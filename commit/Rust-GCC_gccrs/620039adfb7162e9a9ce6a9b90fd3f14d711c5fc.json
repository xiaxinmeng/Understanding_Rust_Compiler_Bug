{"sha": "620039adfb7162e9a9ce6a9b90fd3f14d711c5fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIwMDM5YWRmYjcxNjJlOWE5Y2U2YTliOTBmZDNmMTRkNzExYzVmYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2008-02-12T02:35:48Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-02-12T02:35:48Z"}, "message": "*: Remove all but contents of ext/pb_ds.\n\n2008-02-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* doc/html/*: Remove all but contents of ext/pb_ds.\n\t* doc/html/index.html: New.\n\t* doc/html/README: New.\n\nFrom-SVN: r132250", "tree": {"sha": "ff1936ff863d1fb33d2e9533095545b3e56117ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff1936ff863d1fb33d2e9533095545b3e56117ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc/comments", "author": null, "committer": null, "parents": [{"sha": "c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}], "stats": {"total": 31445, "additions": 52, "deletions": 31393}, "files": [{"sha": "45e7353159ae216c378e72a0923bd770e749a9b1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=620039adfb7162e9a9ce6a9b90fd3f14d711c5fc", "patch": "@@ -1,3 +1,9 @@\n+2008-02-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* doc/html/*: Remove all but contents of ext/pb_ds.\n+\t* doc/html/index.html: New.\n+\t* doc/html/README: New.\n+\t\n 2008-02-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/doxygen/mainpage.html: Add in corrected links."}, {"sha": "a904704ee39f90d4876dcaa0e7d5ec0e2d279d95", "filename": "libstdc++-v3/doc/html/17_intro/BADNAMES", "status": "removed", "additions": 0, "deletions": 182, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FBADNAMES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FBADNAMES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FBADNAMES?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,182 +0,0 @@\n-\n-This is the list of names \"reserved to the implementation\" that\n-have been claimed by certain compilers and system headers of interest,\n-and should not be used in the library.  It will grow, of course.\n-We generally are interested in names that are not all-caps, except\n-for those like \"_T\"\n-\n-For Solarix:\n-_B\n-_C\n-_L\n-_N\n-_P\n-_S\n-_U\n-_X\n-_E1\n-..\n-_E24\n-\n-Irix adds:\n-_A\n-_G\n-\n-MS adds:\n-_T\n-\n-BSD adds:\n-__used\n-__unused\n-__inline\n-_Complex\n-__istype\n-__maskrune\n-__tolower\n-__toupper\n-__wchar_t\n-__wint_t\n-_res\n-_res_ext\n-__tg_*\n-\n-For GCC:\n-\n-  [Note that this list is out of date.  It applies to the old\n-  name-mangling; in G++ 3.0 and higher a different name-mangling is\n-  used.  In addition, many of the bugs relating to G++ interpreting\n-  these names as operators have been fixed.]\n-\n-  The full set of __* identifiers (combined from gcc/cp/lex.c and\n-  gcc/cplus-dem.c) that are either old or new, but are definitely \n-  recognized by the demangler, is:\n-\n-__aa\n-__aad\n-__ad\n-__addr\n-__adv\n-__aer\n-__als\n-__alshift\n-__amd\n-__ami\n-__aml\n-__amu\n-__aor\n-__apl\n-__array\n-__ars\n-__arshift\n-__as\n-__bit_and\n-__bit_ior\n-__bit_not\n-__bit_xor\n-__call\n-__cl\n-__cm\n-__cn\n-__co\n-__component\n-__compound\n-__cond\n-__convert\n-__delete\n-__dl\n-__dv\n-__eq\n-__er\n-__ge\n-__gt\n-__indirect\n-__le\n-__ls\n-__lt\n-__max\n-__md\n-__method_call\n-__mi\n-__min\n-__minus\n-__ml\n-__mm\n-__mn\n-__mult\n-__mx\n-__ne\n-__negate\n-__new\n-__nop\n-__nt\n-__nw\n-__oo\n-__op\n-__or\n-__pl\n-__plus\n-__postdecrement\n-__postincrement\n-__pp\n-__pt\n-__rf\n-__rm\n-__rs\n-__sz\n-__trunc_div\n-__trunc_mod\n-__truth_andif\n-__truth_not\n-__truth_orif\n-__vc\n-__vd\n-__vn\n-\n-SGI badnames:\n-__builtin_alloca\n-__builtin_fsqrt\n-__builtin_sqrt\n-__builtin_fabs\n-__builtin_dabs\n-__builtin_cast_f2i\n-__builtin_cast_i2f\n-__builtin_cast_d2ll\n-__builtin_cast_ll2d\n-__builtin_copy_dhi2i\n-__builtin_copy_i2dhi\n-__builtin_copy_dlo2i\n-__builtin_copy_i2dlo\n-__add_and_fetch\n-__sub_and_fetch\n-__or_and_fetch\n-__xor_and_fetch\n-__and_and_fetch\n-__nand_and_fetch\n-__mpy_and_fetch\n-__min_and_fetch\n-__max_and_fetch\n-__fetch_and_add\n-__fetch_and_sub\n-__fetch_and_or\n-__fetch_and_xor\n-__fetch_and_and\n-__fetch_and_nand\n-__fetch_and_mpy\n-__fetch_and_min\n-__fetch_and_max\n-__lock_test_and_set\n-__lock_release\n-__lock_acquire\n-__compare_and_swap\n-__synchronize\n-__high_multiply\n-__unix\n-__sgi\n-__linux__\n-__i386__\n-__i486__\n-__cplusplus\n-__embedded_cplusplus\n-// long double conversion members mangled as __opr\n-// http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00060.html\n-_opr"}, {"sha": "9eca719a32be0e09787a693ff78bb75929d344c5", "filename": "libstdc++-v3/doc/html/17_intro/C++STYLE", "status": "removed", "additions": 0, "deletions": 399, "changes": 399, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FC%2B%2BSTYLE?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,399 +0,0 @@\n-\n-C++ Standard Library Coding Style Guidelines  \n--------------------------------------\n-\n-This library is written to appropriate C++ coding standards.  As such,\n-it is intended to precede the recommendations of the GNU Coding\n-Standard, which can be referenced in full here:\n-\n-http://www.gnu.org/prep/standards/standards.html#Formatting\n-\n-The rest of this is also interesting reading, but skip the \"Design\n-Advice\" part.\n-\n-The GCC coding conventions are here, and are also useful:\n-http://gcc.gnu.org/codingconventions.html\n-\n-In addition, because it doesn't seem to be stated explicitly anywhere\n-else, there is an 80 column source limit.\n-\n-ChangeLog entries for member functions should use the\n-classname::member function name syntax as follows:\n-\n-1999-04-15  Dennis Ritchie  <dr@att.com>\n-\n-\t* src/basic_file.cc (__basic_file::open): Fix thinko in\n-\t_G_HAVE_IO_FILE_OPEN bits.\n-\n-Notable areas of divergence from what may be previous local practice\n-(particularly for GNU C) include:\n-\n-01. Pointers and references\n-  char* p = \"flop\";\n-  char& c = *p;\n-     -NOT-\n-  char *p = \"flop\";  // wrong\n-  char &c = *p;      // wrong\n-  \n-    Reason: In C++, definitions are mixed with executable code.  Here,       \n-\t    p is being initialized, not *p.  This is near-universal\n-            practice among C++ programmers; it is normal for C hackers\n-            to switch spontaneously as they gain experience.\n-\n-02. Operator names and parentheses\n-  operator==(type)\n-     -NOT-\n-  operator == (type)  // wrong\n-     \n-    Reason: The == is part of the function name.  Separating\n-            it makes the declaration look like an expression. \n-\n-03. Function names and parentheses\n-  void mangle()\n-     -NOT-\n-  void mangle ()  // wrong\n-\n-     Reason: no space before parentheses (except after a control-flow\n-     keyword) is near-universal practice for C++.  It identifies the\n-     parentheses as the function-call operator or declarator, as \n-     opposed to an expression or other overloaded use of parentheses.\n-\n-04. Template function indentation\n-  template<typename T>\n-    void \n-    template_function(args)\n-    { }\n-      -NOT-\n-  template<class T>\n-  void template_function(args) {};\n-  \n-     Reason: In class definitions, without indentation whitespace is\n-             needed both above and below the declaration to distinguish\n-\t     it visually from other members.  (Also, re: \"typename\"\n-\t     rather than \"class\".)  T often could be int, which is \n-\t     not a class.  (\"class\", here, is an anachronism.)\n-\n-05. Template class indentation\n-  template<typename _CharT, typename _Traits>\n-    class basic_ios : public ios_base\n-    {\n-    public:\n-      // Types:\n-    };\n-  -NOT-\n-  template<class _CharT, class _Traits>\n-  class basic_ios : public ios_base\n-    {\n-    public:\n-      // Types:\n-    };\n-  -NOT-\n-  template<class _CharT, class _Traits>\n-    class basic_ios : public ios_base\n-  {\n-    public:\n-      // Types:\n-  };\n-\n-06. Enumerators\n-  enum\n-  {\n-    space = _ISspace,\n-    print = _ISprint,\n-    cntrl = _IScntrl\n-  };\n-  -NOT-\n-  enum { space = _ISspace, print = _ISprint, cntrl = _IScntrl };\n-\n-07. Member initialization lists\n-   All one line, separate from class name.\n-\n-  gribble::gribble() \n-  : _M_private_data(0), _M_more_stuff(0), _M_helper(0);\n-  { }\n-  -NOT-\n-  gribble::gribble() : _M_private_data(0), _M_more_stuff(0), _M_helper(0);\n-  { }\n-\n-08. Try/Catch blocks\n-  try \n-    {\n-      //\n-    }   \n-  catch (...)\n-    {\n-      //\n-    }   \n-  -NOT-\n-  try {\n-    // \n-  } catch(...) { \n-    //\n-  }\n-\n-09. Member functions declarations and definitions\n-   Keywords such as extern, static, export, explicit, inline, etc\n-   go on the line above the function name. Thus\n-\n-  virtual int   \n-  foo()\n-  -NOT-\n-  virtual int foo()\n-\n-\tReason: GNU coding conventions dictate return types for functions\n-     \tare on a separate line than the function name and parameter list\n-     \tfor definitions. For C++, where we have member functions that can\n-    \tbe either inline definitions or declarations, keeping to this\n-     \tstandard allows all member function names for a given class to be\n-\taligned to the same margin, increasing readibility.\n-\n-\n-10. Invocation of member functions with \"this->\"\n-   For non-uglified names, use this->name to call the function.\n-\n-  this->sync()\n-  -NOT-\n-  sync()\n-\n-\tReason: Koenig lookup.\n-\n-11. Namespaces\n-  namespace std\n-  {\n-    blah blah blah;\n-  } // namespace std\n-\n-  -NOT-\n-\n-  namespace std {\n-    blah blah blah;\n-  } // namespace std\n-\n-12. Spacing under protected and private in class declarations:\n-   space above, none below\n-   ie\n-\n-   public:\n-     int foo;\n-\n-   -NOT-\n-   public:\n-   \n-     int foo;\n-\n-13. Spacing WRT return statements.\n-   no extra spacing before returns, no parenthesis\n-   ie\n-\n-   }\n-   return __ret;\n-\n-   -NOT-\n-   }\n-\n-   return __ret;\n-\n-   -NOT-\n-\n-   }\n-   return (__ret);\n-\n-\n-14. Location of global variables.\n-   All global variables of class type, whether in the \"user visable\"\n-   space (e.g., cin) or the implementation namespace, must be defined\n-   as a character array with the appropriate alignment and then later\n-   re-initialized to the correct value.\n-\n-   This is due to startup issues on certain platforms, such as AIX.\n-   For more explanation and examples, see src/globals.cc.  All such\n-   variables should be contained in that file, for simplicity.\n-\n-15. Exception abstractions\n-    Use the exception abstractions found in functexcept.h, which allow\n-    C++ programmers to use this library with -fno-exceptions. (Even if\n-    that is rarely advisable, it's a necessary evil for backwards\n-    compatibility.)\n-\n-16. Exception error messages\n-    All start with the name of the function where the exception is\n-    thrown, and then (optional) descriptive text is added. Example:\n-\n-    __throw_logic_error(__N(\"basic_string::_S_construct NULL not valid\"));\n-\n-    Reason: The verbose terminate handler prints out exception::what(),\n-    as well as the typeinfo for the thrown exception. As this is the\n-    default terminate handler, by putting location info into the\n-    exception string, a very useful error message is printed out for\n-    uncaught exceptions. So useful, in fact, that non-programmers can\n-    give useful error messages, and programmers can intelligently\n-    speculate what went wrong without even using a debugger.\n-\n-17. The doxygen style guide to comments is a separate document,\n-    see index.\n-\n-The library currently has a mixture of GNU-C and modern C++ coding\n-styles.  The GNU C usages will be combed out gradually.\n-\n-Name patterns:\n-\n-For nonstandard names appearing in Standard headers, we are constrained \n-to use names that begin with underscores.  This is called \"uglification\".\n-The convention is:\n-\n-  Local and argument names:  __[a-z].*\n-\n-    Examples:  __count  __ix  __s1  \n-\n-  Type names and template formal-argument names: _[A-Z][^_].*\n-\n-    Examples:  _Helper  _CharT  _N \n-\n-  Member data and function names: _M_.*\n-\n-    Examples:  _M_num_elements  _M_initialize ()\n-\n-  Static data members, constants, and enumerations: _S_.*\n-\n-    Examples: _S_max_elements  _S_default_value\n-\n-Don't use names in the same scope that differ only in the prefix, \n-e.g. _S_top and _M_top.  See BADNAMES for a list of forbidden names.\n-(The most tempting of these seem to be and \"_T\" and \"__sz\".)\n-\n-Names must never have \"__\" internally; it would confuse name\n-unmanglers on some targets.  Also, never use \"__[0-9]\", same reason.\n-\n---------------------------\n-\n-[BY EXAMPLE]\n-    \n-#ifndef  _HEADER_\n-#define  _HEADER_ 1\n-\n-namespace std\n-{\n-  class gribble\n-  {\n-  public:\n-    gribble() throw();\n-\n-    gribble(const gribble&);\n-\n-    explicit \n-    gribble(int __howmany);\n-\n-    gribble& \n-    operator=(const gribble&);\n-\n-    virtual \n-    ~gribble() throw ();\n-\n-    // Start with a capital letter, end with a period.\n-    inline void  \n-    public_member(const char* __arg) const;\n-\n-    // In-class function definitions should be restricted to one-liners.\n-    int \n-    one_line() { return 0 }\n-\n-    int \n-    two_lines(const char* arg) \n-    { return strchr(arg, 'a'); }\n-\n-    inline int \n-    three_lines();  // inline, but defined below.\n-\n-    // Note indentation.\n-    template<typename _Formal_argument>\n-      void \n-      public_template() const throw();\n-\n-    template<typename _Iterator>\n-      void \n-      other_template();\n-\n-  private:\n-    class _Helper;\n-\n-    int _M_private_data;\n-    int _M_more_stuff;\n-    _Helper* _M_helper;\n-    int _M_private_function();\n-\n-    enum _Enum \n-      { \n-\t_S_one, \n-\t_S_two \n-      };\n-\n-    static void \n-    _S_initialize_library();\n-  };\n-\n-// More-or-less-standard language features described by lack, not presence.\n-# ifndef _G_NO_LONGLONG\n-  extern long long _G_global_with_a_good_long_name;  // avoid globals!\n-# endif\n-\n-  // Avoid in-class inline definitions, define separately;\n-  // likewise for member class definitions:\n-  inline int\n-  gribble::public_member() const\n-  { int __local = 0; return __local; }\n-\n-  class gribble::_Helper\n-  {\n-    int _M_stuff;\n-\n-    friend class gribble;\n-  };\n-}\n-\n-// Names beginning with \"__\": only for arguments and\n-//   local variables; never use \"__\" in a type name, or\n-//   within any name; never use \"__[0-9]\".\n-\n-#endif /* _HEADER_ */\n-\n-\n-namespace std \n-{\n-  template<typename T>  // notice: \"typename\", not \"class\", no space\n-    long_return_value_type<with_many, args>  \n-    function_name(char* pointer,               // \"char *pointer\" is wrong.\n-\t\t  char* argument, \n-\t\t  const Reference& ref)\n-    {\n-      // int a_local;  /* wrong; see below. */\n-      if (test) \n-      { \n-\t  nested code \n-      }\n-    \n-      int a_local = 0;  // declare variable at first use.\n-\n-      //  char a, b, *p;   /* wrong */\n-      char a = 'a';\n-      char b = a + 1;\n-      char* c = \"abc\";  // each variable goes on its own line, always.\n-\n-      // except maybe here...\n-      for (unsigned i = 0, mask = 1; mask; ++i, mask <<= 1) {\n-\t  // ...\n-      }\n-    }\n-  \n-  gribble::gribble()\n-  : _M_private_data(0), _M_more_stuff(0), _M_helper(0);\n-  { }\n-\n-  inline int \n-  gribble::three_lines()\n-  {\n-    // doesn't fit in one line.\n-  }\n-} // namespace std\n-\n-\n-"}, {"sha": "623b6258a134210f0b0ada106fdaab7f0370d9c5", "filename": "libstdc++-v3/doc/html/17_intro/COPYING", "status": "removed", "additions": 0, "deletions": 340, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FCOPYING", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FCOPYING", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FCOPYING?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,340 +0,0 @@\n-\t\t    GNU GENERAL PUBLIC LICENSE\n-\t\t       Version 2, June 1991\n-\n- Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n-     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n- Everyone is permitted to copy and distribute verbatim copies\n- of this license document, but changing it is not allowed.\n-\n-\t\t\t    Preamble\n-\n-  The licenses for most software are designed to take away your\n-freedom to share and change it.  By contrast, the GNU General Public\n-License is intended to guarantee your freedom to share and change free\n-software--to make sure the software is free for all its users.  This\n-General Public License applies to most of the Free Software\n-Foundation's software and to any other program whose authors commit to\n-using it.  (Some other Free Software Foundation software is covered by\n-the GNU Library General Public License instead.)  You can apply it to\n-your programs, too.\n-\n-  When we speak of free software, we are referring to freedom, not\n-price.  Our General Public Licenses are designed to make sure that you\n-have the freedom to distribute copies of free software (and charge for\n-this service if you wish), that you receive source code or can get it\n-if you want it, that you can change the software or use pieces of it\n-in new free programs; and that you know you can do these things.\n-\n-  To protect your rights, we need to make restrictions that forbid\n-anyone to deny you these rights or to ask you to surrender the rights.\n-These restrictions translate to certain responsibilities for you if you\n-distribute copies of the software, or if you modify it.\n-\n-  For example, if you distribute copies of such a program, whether\n-gratis or for a fee, you must give the recipients all the rights that\n-you have.  You must make sure that they, too, receive or can get the\n-source code.  And you must show them these terms so they know their\n-rights.\n-\n-  We protect your rights with two steps: (1) copyright the software, and\n-(2) offer you this license which gives you legal permission to copy,\n-distribute and/or modify the software.\n-\n-  Also, for each author's protection and ours, we want to make certain\n-that everyone understands that there is no warranty for this free\n-software.  If the software is modified by someone else and passed on, we\n-want its recipients to know that what they have is not the original, so\n-that any problems introduced by others will not reflect on the original\n-authors' reputations.\n-\n-  Finally, any free program is threatened constantly by software\n-patents.  We wish to avoid the danger that redistributors of a free\n-program will individually obtain patent licenses, in effect making the\n-program proprietary.  To prevent this, we have made it clear that any\n-patent must be licensed for everyone's free use or not licensed at all.\n-\n-  The precise terms and conditions for copying, distribution and\n-modification follow.\n-\f\n-\t\t    GNU GENERAL PUBLIC LICENSE\n-   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n-\n-  0. This License applies to any program or other work which contains\n-a notice placed by the copyright holder saying it may be distributed\n-under the terms of this General Public License.  The \"Program\", below,\n-refers to any such program or work, and a \"work based on the Program\"\n-means either the Program or any derivative work under copyright law:\n-that is to say, a work containing the Program or a portion of it,\n-either verbatim or with modifications and/or translated into another\n-language.  (Hereinafter, translation is included without limitation in\n-the term \"modification\".)  Each licensee is addressed as \"you\".\n-\n-Activities other than copying, distribution and modification are not\n-covered by this License; they are outside its scope.  The act of\n-running the Program is not restricted, and the output from the Program\n-is covered only if its contents constitute a work based on the\n-Program (independent of having been made by running the Program).\n-Whether that is true depends on what the Program does.\n-\n-  1. You may copy and distribute verbatim copies of the Program's\n-source code as you receive it, in any medium, provided that you\n-conspicuously and appropriately publish on each copy an appropriate\n-copyright notice and disclaimer of warranty; keep intact all the\n-notices that refer to this License and to the absence of any warranty;\n-and give any other recipients of the Program a copy of this License\n-along with the Program.\n-\n-You may charge a fee for the physical act of transferring a copy, and\n-you may at your option offer warranty protection in exchange for a fee.\n-\n-  2. You may modify your copy or copies of the Program or any portion\n-of it, thus forming a work based on the Program, and copy and\n-distribute such modifications or work under the terms of Section 1\n-above, provided that you also meet all of these conditions:\n-\n-    a) You must cause the modified files to carry prominent notices\n-    stating that you changed the files and the date of any change.\n-\n-    b) You must cause any work that you distribute or publish, that in\n-    whole or in part contains or is derived from the Program or any\n-    part thereof, to be licensed as a whole at no charge to all third\n-    parties under the terms of this License.\n-\n-    c) If the modified program normally reads commands interactively\n-    when run, you must cause it, when started running for such\n-    interactive use in the most ordinary way, to print or display an\n-    announcement including an appropriate copyright notice and a\n-    notice that there is no warranty (or else, saying that you provide\n-    a warranty) and that users may redistribute the program under\n-    these conditions, and telling the user how to view a copy of this\n-    License.  (Exception: if the Program itself is interactive but\n-    does not normally print such an announcement, your work based on\n-    the Program is not required to print an announcement.)\n-\f\n-These requirements apply to the modified work as a whole.  If\n-identifiable sections of that work are not derived from the Program,\n-and can be reasonably considered independent and separate works in\n-themselves, then this License, and its terms, do not apply to those\n-sections when you distribute them as separate works.  But when you\n-distribute the same sections as part of a whole which is a work based\n-on the Program, the distribution of the whole must be on the terms of\n-this License, whose permissions for other licensees extend to the\n-entire whole, and thus to each and every part regardless of who wrote it.\n-\n-Thus, it is not the intent of this section to claim rights or contest\n-your rights to work written entirely by you; rather, the intent is to\n-exercise the right to control the distribution of derivative or\n-collective works based on the Program.\n-\n-In addition, mere aggregation of another work not based on the Program\n-with the Program (or with a work based on the Program) on a volume of\n-a storage or distribution medium does not bring the other work under\n-the scope of this License.\n-\n-  3. You may copy and distribute the Program (or a work based on it,\n-under Section 2) in object code or executable form under the terms of\n-Sections 1 and 2 above provided that you also do one of the following:\n-\n-    a) Accompany it with the complete corresponding machine-readable\n-    source code, which must be distributed under the terms of Sections\n-    1 and 2 above on a medium customarily used for software interchange; or,\n-\n-    b) Accompany it with a written offer, valid for at least three\n-    years, to give any third party, for a charge no more than your\n-    cost of physically performing source distribution, a complete\n-    machine-readable copy of the corresponding source code, to be\n-    distributed under the terms of Sections 1 and 2 above on a medium\n-    customarily used for software interchange; or,\n-\n-    c) Accompany it with the information you received as to the offer\n-    to distribute corresponding source code.  (This alternative is\n-    allowed only for noncommercial distribution and only if you\n-    received the program in object code or executable form with such\n-    an offer, in accord with Subsection b above.)\n-\n-The source code for a work means the preferred form of the work for\n-making modifications to it.  For an executable work, complete source\n-code means all the source code for all modules it contains, plus any\n-associated interface definition files, plus the scripts used to\n-control compilation and installation of the executable.  However, as a\n-special exception, the source code distributed need not include\n-anything that is normally distributed (in either source or binary\n-form) with the major components (compiler, kernel, and so on) of the\n-operating system on which the executable runs, unless that component\n-itself accompanies the executable.\n-\n-If distribution of executable or object code is made by offering\n-access to copy from a designated place, then offering equivalent\n-access to copy the source code from the same place counts as\n-distribution of the source code, even though third parties are not\n-compelled to copy the source along with the object code.\n-\f\n-  4. You may not copy, modify, sublicense, or distribute the Program\n-except as expressly provided under this License.  Any attempt\n-otherwise to copy, modify, sublicense or distribute the Program is\n-void, and will automatically terminate your rights under this License.\n-However, parties who have received copies, or rights, from you under\n-this License will not have their licenses terminated so long as such\n-parties remain in full compliance.\n-\n-  5. You are not required to accept this License, since you have not\n-signed it.  However, nothing else grants you permission to modify or\n-distribute the Program or its derivative works.  These actions are\n-prohibited by law if you do not accept this License.  Therefore, by\n-modifying or distributing the Program (or any work based on the\n-Program), you indicate your acceptance of this License to do so, and\n-all its terms and conditions for copying, distributing or modifying\n-the Program or works based on it.\n-\n-  6. Each time you redistribute the Program (or any work based on the\n-Program), the recipient automatically receives a license from the\n-original licensor to copy, distribute or modify the Program subject to\n-these terms and conditions.  You may not impose any further\n-restrictions on the recipients' exercise of the rights granted herein.\n-You are not responsible for enforcing compliance by third parties to\n-this License.\n-\n-  7. If, as a consequence of a court judgment or allegation of patent\n-infringement or for any other reason (not limited to patent issues),\n-conditions are imposed on you (whether by court order, agreement or\n-otherwise) that contradict the conditions of this License, they do not\n-excuse you from the conditions of this License.  If you cannot\n-distribute so as to satisfy simultaneously your obligations under this\n-License and any other pertinent obligations, then as a consequence you\n-may not distribute the Program at all.  For example, if a patent\n-license would not permit royalty-free redistribution of the Program by\n-all those who receive copies directly or indirectly through you, then\n-the only way you could satisfy both it and this License would be to\n-refrain entirely from distribution of the Program.\n-\n-If any portion of this section is held invalid or unenforceable under\n-any particular circumstance, the balance of the section is intended to\n-apply and the section as a whole is intended to apply in other\n-circumstances.\n-\n-It is not the purpose of this section to induce you to infringe any\n-patents or other property right claims or to contest validity of any\n-such claims; this section has the sole purpose of protecting the\n-integrity of the free software distribution system, which is\n-implemented by public license practices.  Many people have made\n-generous contributions to the wide range of software distributed\n-through that system in reliance on consistent application of that\n-system; it is up to the author/donor to decide if he or she is willing\n-to distribute software through any other system and a licensee cannot\n-impose that choice.\n-\n-This section is intended to make thoroughly clear what is believed to\n-be a consequence of the rest of this License.\n-\f\n-  8. If the distribution and/or use of the Program is restricted in\n-certain countries either by patents or by copyrighted interfaces, the\n-original copyright holder who places the Program under this License\n-may add an explicit geographical distribution limitation excluding\n-those countries, so that distribution is permitted only in or among\n-countries not thus excluded.  In such case, this License incorporates\n-the limitation as if written in the body of this License.\n-\n-  9. The Free Software Foundation may publish revised and/or new versions\n-of the General Public License from time to time.  Such new versions will\n-be similar in spirit to the present version, but may differ in detail to\n-address new problems or concerns.\n-\n-Each version is given a distinguishing version number.  If the Program\n-specifies a version number of this License which applies to it and \"any\n-later version\", you have the option of following the terms and conditions\n-either of that version or of any later version published by the Free\n-Software Foundation.  If the Program does not specify a version number of\n-this License, you may choose any version ever published by the Free Software\n-Foundation.\n-\n-  10. If you wish to incorporate parts of the Program into other free\n-programs whose distribution conditions are different, write to the author\n-to ask for permission.  For software which is copyrighted by the Free\n-Software Foundation, write to the Free Software Foundation; we sometimes\n-make exceptions for this.  Our decision will be guided by the two goals\n-of preserving the free status of all derivatives of our free software and\n-of promoting the sharing and reuse of software generally.\n-\n-\t\t\t    NO WARRANTY\n-\n-  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\n-FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\n-OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\n-PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\n-OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n-MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\n-TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\n-PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\n-REPAIR OR CORRECTION.\n-\n-  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\n-WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\n-REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\n-INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\n-OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\n-TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\n-YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\n-PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\n-POSSIBILITY OF SUCH DAMAGES.\n-\n-\t\t     END OF TERMS AND CONDITIONS\n-\f\n-\t    How to Apply These Terms to Your New Programs\n-\n-  If you develop a new program, and you want it to be of the greatest\n-possible use to the public, the best way to achieve this is to make it\n-free software which everyone can redistribute and change under these terms.\n-\n-  To do so, attach the following notices to the program.  It is safest\n-to attach them to the start of each source file to most effectively\n-convey the exclusion of warranty; and each file should have at least\n-the \"copyright\" line and a pointer to where the full notice is found.\n-\n-    <one line to give the program's name and a brief idea of what it does.>\n-    Copyright (C) <year>  <name of author>\n-\n-    This program is free software; you can redistribute it and/or modify\n-    it under the terms of the GNU General Public License as published by\n-    the Free Software Foundation; either version 2 of the License, or\n-    (at your option) any later version.\n-\n-    This program is distributed in the hope that it will be useful,\n-    but WITHOUT ANY WARRANTY; without even the implied warranty of\n-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-    GNU General Public License for more details.\n-\n-    You should have received a copy of the GNU General Public License\n-    along with this program; if not, write to the Free Software\n-    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n-\n-\n-Also add information on how to contact you by electronic and paper mail.\n-\n-If the program is interactive, make it output a short notice like this\n-when it starts in an interactive mode:\n-\n-    Gnomovision version 69, Copyright (C) year  name of author\n-    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n-    This is free software, and you are welcome to redistribute it\n-    under certain conditions; type `show c' for details.\n-\n-The hypothetical commands `show w' and `show c' should show the appropriate\n-parts of the General Public License.  Of course, the commands you use may\n-be called something other than `show w' and `show c'; they could even be\n-mouse-clicks or menu items--whatever suits your program.\n-\n-You should also get your employer (if you work as a programmer) or your\n-school, if any, to sign a \"copyright disclaimer\" for the program, if\n-necessary.  Here is a sample; alter the names:\n-\n-  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n-  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n-\n-  <signature of Ty Coon>, 1 April 1989\n-  Ty Coon, President of Vice\n-\n-This General Public License does not permit incorporating your program into\n-proprietary programs.  If your program is a subroutine library, you may\n-consider it more useful to permit linking proprietary applications with the\n-library.  If this is what you want to do, use the GNU Library General\n-Public License instead of this License."}, {"sha": "1a864561bd433440749df8deaa8335e0f98ae58e", "filename": "libstdc++-v3/doc/html/17_intro/COPYING.DOC", "status": "removed", "additions": 0, "deletions": 355, "changes": 355, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FCOPYING.DOC", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FCOPYING.DOC", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FCOPYING.DOC?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,355 +0,0 @@\n-\t\tGNU Free Documentation License\n-\t\t   Version 1.1, March 2000\n-\n- Copyright (C) 2000  Free Software Foundation, Inc.\n-     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n- Everyone is permitted to copy and distribute verbatim copies\n- of this license document, but changing it is not allowed.\n-\n-\n-0. PREAMBLE\n-\n-The purpose of this License is to make a manual, textbook, or other\n-written document \"free\" in the sense of freedom: to assure everyone\n-the effective freedom to copy and redistribute it, with or without\n-modifying it, either commercially or noncommercially.  Secondarily,\n-this License preserves for the author and publisher a way to get\n-credit for their work, while not being considered responsible for\n-modifications made by others.\n-\n-This License is a kind of \"copyleft\", which means that derivative\n-works of the document must themselves be free in the same sense.  It\n-complements the GNU General Public License, which is a copyleft\n-license designed for free software.\n-\n-We have designed this License in order to use it for manuals for free\n-software, because free software needs free documentation: a free\n-program should come with manuals providing the same freedoms that the\n-software does.  But this License is not limited to software manuals;\n-it can be used for any textual work, regardless of subject matter or\n-whether it is published as a printed book.  We recommend this License\n-principally for works whose purpose is instruction or reference.\n-\n-\n-1. APPLICABILITY AND DEFINITIONS\n-\n-This License applies to any manual or other work that contains a\n-notice placed by the copyright holder saying it can be distributed\n-under the terms of this License.  The \"Document\", below, refers to any\n-such manual or work.  Any member of the public is a licensee, and is\n-addressed as \"you\".\n-\n-A \"Modified Version\" of the Document means any work containing the\n-Document or a portion of it, either copied verbatim, or with\n-modifications and/or translated into another language.\n-\n-A \"Secondary Section\" is a named appendix or a front-matter section of\n-the Document that deals exclusively with the relationship of the\n-publishers or authors of the Document to the Document's overall subject\n-(or to related matters) and contains nothing that could fall directly\n-within that overall subject.  (For example, if the Document is in part a\n-textbook of mathematics, a Secondary Section may not explain any\n-mathematics.)  The relationship could be a matter of historical\n-connection with the subject or with related matters, or of legal,\n-commercial, philosophical, ethical or political position regarding\n-them.\n-\n-The \"Invariant Sections\" are certain Secondary Sections whose titles\n-are designated, as being those of Invariant Sections, in the notice\n-that says that the Document is released under this License.\n-\n-The \"Cover Texts\" are certain short passages of text that are listed,\n-as Front-Cover Texts or Back-Cover Texts, in the notice that says that\n-the Document is released under this License.\n-\n-A \"Transparent\" copy of the Document means a machine-readable copy,\n-represented in a format whose specification is available to the\n-general public, whose contents can be viewed and edited directly and\n-straightforwardly with generic text editors or (for images composed of\n-pixels) generic paint programs or (for drawings) some widely available\n-drawing editor, and that is suitable for input to text formatters or\n-for automatic translation to a variety of formats suitable for input\n-to text formatters.  A copy made in an otherwise Transparent file\n-format whose markup has been designed to thwart or discourage\n-subsequent modification by readers is not Transparent.  A copy that is\n-not \"Transparent\" is called \"Opaque\".\n-\n-Examples of suitable formats for Transparent copies include plain\n-ASCII without markup, Texinfo input format, LaTeX input format, SGML\n-or XML using a publicly available DTD, and standard-conforming simple\n-HTML designed for human modification.  Opaque formats include\n-PostScript, PDF, proprietary formats that can be read and edited only\n-by proprietary word processors, SGML or XML for which the DTD and/or\n-processing tools are not generally available, and the\n-machine-generated HTML produced by some word processors for output\n-purposes only.\n-\n-The \"Title Page\" means, for a printed book, the title page itself,\n-plus such following pages as are needed to hold, legibly, the material\n-this License requires to appear in the title page.  For works in\n-formats which do not have any title page as such, \"Title Page\" means\n-the text near the most prominent appearance of the work's title,\n-preceding the beginning of the body of the text.\n-\n-\n-2. VERBATIM COPYING\n-\n-You may copy and distribute the Document in any medium, either\n-commercially or noncommercially, provided that this License, the\n-copyright notices, and the license notice saying this License applies\n-to the Document are reproduced in all copies, and that you add no other\n-conditions whatsoever to those of this License.  You may not use\n-technical measures to obstruct or control the reading or further\n-copying of the copies you make or distribute.  However, you may accept\n-compensation in exchange for copies.  If you distribute a large enough\n-number of copies you must also follow the conditions in section 3.\n-\n-You may also lend copies, under the same conditions stated above, and\n-you may publicly display copies.\n-\n-\n-3. COPYING IN QUANTITY\n-\n-If you publish printed copies of the Document numbering more than 100,\n-and the Document's license notice requires Cover Texts, you must enclose\n-the copies in covers that carry, clearly and legibly, all these Cover\n-Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on\n-the back cover.  Both covers must also clearly and legibly identify\n-you as the publisher of these copies.  The front cover must present\n-the full title with all words of the title equally prominent and\n-visible.  You may add other material on the covers in addition.\n-Copying with changes limited to the covers, as long as they preserve\n-the title of the Document and satisfy these conditions, can be treated\n-as verbatim copying in other respects.\n-\n-If the required texts for either cover are too voluminous to fit\n-legibly, you should put the first ones listed (as many as fit\n-reasonably) on the actual cover, and continue the rest onto adjacent\n-pages.\n-\n-If you publish or distribute Opaque copies of the Document numbering\n-more than 100, you must either include a machine-readable Transparent\n-copy along with each Opaque copy, or state in or with each Opaque copy\n-a publicly-accessible computer-network location containing a complete\n-Transparent copy of the Document, free of added material, which the\n-general network-using public has access to download anonymously at no\n-charge using public-standard network protocols.  If you use the latter\n-option, you must take reasonably prudent steps, when you begin\n-distribution of Opaque copies in quantity, to ensure that this\n-Transparent copy will remain thus accessible at the stated location\n-until at least one year after the last time you distribute an Opaque\n-copy (directly or through your agents or retailers) of that edition to\n-the public.\n-\n-It is requested, but not required, that you contact the authors of the\n-Document well before redistributing any large number of copies, to give\n-them a chance to provide you with an updated version of the Document.\n-\n-\n-4. MODIFICATIONS\n-\n-You may copy and distribute a Modified Version of the Document under\n-the conditions of sections 2 and 3 above, provided that you release\n-the Modified Version under precisely this License, with the Modified\n-Version filling the role of the Document, thus licensing distribution\n-and modification of the Modified Version to whoever possesses a copy\n-of it.  In addition, you must do these things in the Modified Version:\n-\n-A. Use in the Title Page (and on the covers, if any) a title distinct\n-   from that of the Document, and from those of previous versions\n-   (which should, if there were any, be listed in the History section\n-   of the Document).  You may use the same title as a previous version\n-   if the original publisher of that version gives permission.\n-B. List on the Title Page, as authors, one or more persons or entities\n-   responsible for authorship of the modifications in the Modified\n-   Version, together with at least five of the principal authors of the\n-   Document (all of its principal authors, if it has less than five).\n-C. State on the Title page the name of the publisher of the\n-   Modified Version, as the publisher.\n-D. Preserve all the copyright notices of the Document.\n-E. Add an appropriate copyright notice for your modifications\n-   adjacent to the other copyright notices.\n-F. Include, immediately after the copyright notices, a license notice\n-   giving the public permission to use the Modified Version under the\n-   terms of this License, in the form shown in the Addendum below.\n-G. Preserve in that license notice the full lists of Invariant Sections\n-   and required Cover Texts given in the Document's license notice.\n-H. Include an unaltered copy of this License.\n-I. Preserve the section entitled \"History\", and its title, and add to\n-   it an item stating at least the title, year, new authors, and\n-   publisher of the Modified Version as given on the Title Page.  If\n-   there is no section entitled \"History\" in the Document, create one\n-   stating the title, year, authors, and publisher of the Document as\n-   given on its Title Page, then add an item describing the Modified\n-   Version as stated in the previous sentence.\n-J. Preserve the network location, if any, given in the Document for\n-   public access to a Transparent copy of the Document, and likewise\n-   the network locations given in the Document for previous versions\n-   it was based on.  These may be placed in the \"History\" section.\n-   You may omit a network location for a work that was published at\n-   least four years before the Document itself, or if the original\n-   publisher of the version it refers to gives permission.\n-K. In any section entitled \"Acknowledgements\" or \"Dedications\",\n-   preserve the section's title, and preserve in the section all the\n-   substance and tone of each of the contributor acknowledgements\n-   and/or dedications given therein.\n-L. Preserve all the Invariant Sections of the Document,\n-   unaltered in their text and in their titles.  Section numbers\n-   or the equivalent are not considered part of the section titles.\n-M. Delete any section entitled \"Endorsements\".  Such a section\n-   may not be included in the Modified Version.\n-N. Do not retitle any existing section as \"Endorsements\"\n-   or to conflict in title with any Invariant Section.\n-\n-If the Modified Version includes new front-matter sections or\n-appendices that qualify as Secondary Sections and contain no material\n-copied from the Document, you may at your option designate some or all\n-of these sections as invariant.  To do this, add their titles to the\n-list of Invariant Sections in the Modified Version's license notice.\n-These titles must be distinct from any other section titles.\n-\n-You may add a section entitled \"Endorsements\", provided it contains\n-nothing but endorsements of your Modified Version by various\n-parties--for example, statements of peer review or that the text has\n-been approved by an organization as the authoritative definition of a\n-standard.\n-\n-You may add a passage of up to five words as a Front-Cover Text, and a\n-passage of up to 25 words as a Back-Cover Text, to the end of the list\n-of Cover Texts in the Modified Version.  Only one passage of\n-Front-Cover Text and one of Back-Cover Text may be added by (or\n-through arrangements made by) any one entity.  If the Document already\n-includes a cover text for the same cover, previously added by you or\n-by arrangement made by the same entity you are acting on behalf of,\n-you may not add another; but you may replace the old one, on explicit\n-permission from the previous publisher that added the old one.\n-\n-The author(s) and publisher(s) of the Document do not by this License\n-give permission to use their names for publicity for or to assert or\n-imply endorsement of any Modified Version.\n-\n-\n-5. COMBINING DOCUMENTS\n-\n-You may combine the Document with other documents released under this\n-License, under the terms defined in section 4 above for modified\n-versions, provided that you include in the combination all of the\n-Invariant Sections of all of the original documents, unmodified, and\n-list them all as Invariant Sections of your combined work in its\n-license notice.\n-\n-The combined work need only contain one copy of this License, and\n-multiple identical Invariant Sections may be replaced with a single\n-copy.  If there are multiple Invariant Sections with the same name but\n-different contents, make the title of each such section unique by\n-adding at the end of it, in parentheses, the name of the original\n-author or publisher of that section if known, or else a unique number.\n-Make the same adjustment to the section titles in the list of\n-Invariant Sections in the license notice of the combined work.\n-\n-In the combination, you must combine any sections entitled \"History\"\n-in the various original documents, forming one section entitled\n-\"History\"; likewise combine any sections entitled \"Acknowledgements\",\n-and any sections entitled \"Dedications\".  You must delete all sections\n-entitled \"Endorsements.\"\n-\n-\n-6. COLLECTIONS OF DOCUMENTS\n-\n-You may make a collection consisting of the Document and other documents\n-released under this License, and replace the individual copies of this\n-License in the various documents with a single copy that is included in\n-the collection, provided that you follow the rules of this License for\n-verbatim copying of each of the documents in all other respects.\n-\n-You may extract a single document from such a collection, and distribute\n-it individually under this License, provided you insert a copy of this\n-License into the extracted document, and follow this License in all\n-other respects regarding verbatim copying of that document.\n-\n-\n-7. AGGREGATION WITH INDEPENDENT WORKS\n-\n-A compilation of the Document or its derivatives with other separate\n-and independent documents or works, in or on a volume of a storage or\n-distribution medium, does not as a whole count as a Modified Version\n-of the Document, provided no compilation copyright is claimed for the\n-compilation.  Such a compilation is called an \"aggregate\", and this\n-License does not apply to the other self-contained works thus compiled\n-with the Document, on account of their being thus compiled, if they\n-are not themselves derivative works of the Document.\n-\n-If the Cover Text requirement of section 3 is applicable to these\n-copies of the Document, then if the Document is less than one quarter\n-of the entire aggregate, the Document's Cover Texts may be placed on\n-covers that surround only the Document within the aggregate.\n-Otherwise they must appear on covers around the whole aggregate.\n-\n-\n-8. TRANSLATION\n-\n-Translation is considered a kind of modification, so you may\n-distribute translations of the Document under the terms of section 4.\n-Replacing Invariant Sections with translations requires special\n-permission from their copyright holders, but you may include\n-translations of some or all Invariant Sections in addition to the\n-original versions of these Invariant Sections.  You may include a\n-translation of this License provided that you also include the\n-original English version of this License.  In case of a disagreement\n-between the translation and the original English version of this\n-License, the original English version will prevail.\n-\n-\n-9. TERMINATION\n-\n-You may not copy, modify, sublicense, or distribute the Document except\n-as expressly provided for under this License.  Any other attempt to\n-copy, modify, sublicense or distribute the Document is void, and will\n-automatically terminate your rights under this License.  However,\n-parties who have received copies, or rights, from you under this\n-License will not have their licenses terminated so long as such\n-parties remain in full compliance.\n-\n-\n-10. FUTURE REVISIONS OF THIS LICENSE\n-\n-The Free Software Foundation may publish new, revised versions\n-of the GNU Free Documentation License from time to time.  Such new\n-versions will be similar in spirit to the present version, but may\n-differ in detail to address new problems or concerns.  See\n-http://www.gnu.org/copyleft/.\n-\n-Each version of the License is given a distinguishing version number.\n-If the Document specifies that a particular numbered version of this\n-License \"or any later version\" applies to it, you have the option of\n-following the terms and conditions either of that specified version or\n-of any later version that has been published (not as a draft) by the\n-Free Software Foundation.  If the Document does not specify a version\n-number of this License, you may choose any version ever published (not\n-as a draft) by the Free Software Foundation.\n-\n-\n-ADDENDUM: How to use this License for your documents\n-\n-To use this License in a document you have written, include a copy of\n-the License in the document and put the following copyright and\n-license notices just after the title page:\n-\n-      Copyright (c)  YEAR  YOUR NAME.\n-      Permission is granted to copy, distribute and/or modify this document\n-      under the terms of the GNU Free Documentation License, Version 1.1\n-      or any later version published by the Free Software Foundation;\n-      with the Invariant Sections being LIST THEIR TITLES, with the\n-      Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.\n-      A copy of the license is included in the section entitled \"GNU\n-      Free Documentation License\".\n-\n-If you have no Invariant Sections, write \"with no Invariant Sections\"\n-instead of saying which ones are invariant.  If you have no\n-Front-Cover Texts, write \"no Front-Cover Texts\" instead of\n-\"Front-Cover Texts being LIST\"; likewise for Back-Cover Texts.\n-\n-If your document contains nontrivial examples of program code, we\n-recommend releasing these examples in parallel under your choice of\n-free software license, such as the GNU General Public License,\n-to permit their use in free software."}, {"sha": "5af3d9aed3be4442e4cf038fbee6acdca55e6b51", "filename": "libstdc++-v3/doc/html/17_intro/DESIGN", "status": "removed", "additions": 0, "deletions": 859, "changes": 859, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FDESIGN", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FDESIGN", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FDESIGN?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,859 +0,0 @@\n-\n-Standard C++ Library Design Document\n-------------------------------------\n-\n-This is an overview of libstdc++-v3, with particular attention\n-to projects to be done and how they fit into the whole.\n-\n-The Library\n------------\n-\n-This paper is covers two major areas:\n-\n- - Features and policies not mentioned in the standard that\n-   the quality of the library implementation depends on, including\n-   extensions and \"implementation-defined\" features;\n-\n- - Plans for required but unimplemented library features and\n-   optimizations to them.\n-\n-Overhead\n---------\n-\n-The standard defines a large library, much larger than the standard\n-C library.  A naive implementation would suffer substantial overhead\n-in compile time, executable size, and speed, rendering it unusable\n-in many (particularly embedded) applications.  The alternative demands\n-care in construction, and some compiler support, but there is no\n-need for library subsets.\n-\n-What are the sources of this overhead?  There are four main causes:\n-\n- - The library is specified almost entirely as templates, which\n-   with current compilers must be included in-line, resulting in\n-   very slow builds as tens or hundreds of thousands of lines\n-   of function definitions are read for each user source file.\n-   Indeed, the entire SGI STL, as well as the dos Reis valarray,\n-   are provided purely as header files, largely for simplicity in\n-   porting.  Iostream/locale is (or will be) as large again.\n-\n- - The library is very flexible, specifying a multitude of hooks\n-   where users can insert their own code in place of defaults.\n-   When these hooks are not used, any time and code expended to\n-   support that flexibility is wasted.\n-\n- - Templates are often described as causing to \"code bloat\".  In\n-   practice, this refers (when it refers to anything real) to several\n-   independent processes.  First, when a class template is manually\n-   instantiated in its entirely, current compilers place the definitions\n-   for all members in a single object file, so that a program linking\n-   to one member gets definitions of all.  Second, template functions\n-   which do not actually depend on the template argument are, under\n-   current compilers, generated anew for each instantiation, rather\n-   than being shared with other instantiations.  Third, some of the\n-   flexibility mentioned above comes from virtual functions (both in\n-   regular classes and template classes) which current linkers add\n-   to the executable file even when they manifestly cannot be called.\n-\n- - The library is specified to use a language feature, exceptions,\n-   which in the current gcc compiler ABI imposes a run time and\n-   code space cost to handle the possibility of exceptions even when\n-   they are not used.  Under the new ABI (accessed with -fnew-abi),\n-   there is a space overhead and a small reduction in code efficiency\n-   resulting from lost optimization opportunities associated with\n-   non-local branches associated with exceptions.\n-\n-What can be done to eliminate this overhead?  A variety of coding\n-techniques, and compiler, linker and library improvements and\n-extensions may be used, as covered below.  Most are not difficult,\n-and some are already implemented in varying degrees.\n-\n-Overhead: Compilation Time\n---------------------------\n-\n-Providing \"ready-instantiated\" template code in object code archives\n-allows us to avoid generating and optimizing template instantiations\n-in each compilation unit which uses them.  However, the number of such\n-instantiations that are useful to provide is limited, and anyway this\n-is not enough, by itself, to minimize compilation time.  In particular,\n-it does not reduce time spent parsing conforming headers.\n-\n-Quicker header parsing will depend on library extensions and compiler\n-improvements.   One approach is some variation on the techniques\n-previously marketed as \"pre-compiled headers\", now standardized as\n-support for the \"export\" keyword.  \"Exported\" template definitions\n-can be placed (once) in a \"repository\" -- really just a library, but\n-of template definitions rather than object code -- to be drawn upon\n-at link time when an instantiation is needed, rather than placed in\n-header files to be parsed along with every compilation unit.\n-\n-Until \"export\" is implemented we can put some of the lengthy template\n-definitions in #if guards or alternative headers so that users can skip\n-over the the full definitions when they need only the ready-instantiated\n-specializations.\n-\n-To be precise, this means that certain headers which define\n-templates which users normally use only for certain arguments\n-can be instrumented to avoid exposing the template definitions\n-to the compiler unless a macro is defined.  For example, in\n-<string>, we might have:\n-\n-   template <class _CharT, ... > class basic_string {\n-     ... // member declarations\n-   };\n-   ... // operator declarations\n-\n-   #ifdef _STRICT_ISO_\n-   # if _G_NO_TEMPLATE_EXPORT\n-   #   include <bits/std_locale.h>  // headers needed by definitions\n-   #   ...\n-   #   include <bits/string.tcc>  // member and global template definitions.\n-   # endif\n-   #endif\n-\n-Users who compile without specifying a strict-ISO-conforming flag\n-would not see many of the template definitions they now see, and rely\n-instead on ready-instantiated specializations in the library.  This\n-technique would be useful for the following substantial components:\n-string, locale/iostreams, valarray.  It would *not* be useful or\n-usable with the following: containers, algorithms, iterators,\n-allocator.  Since these constitute a large (though decreasing)\n-fraction of the library, the benefit the technique offers is\n-limited.\n-\n-The language specifies the semantics of the \"export\" keyword, but\n-the gcc compiler does not yet support it.  When it does, problems\n-with large template inclusions can largely disappear, given some\n-minor library reorganization, along with the need for the apparatus\n-described above.\n-\n-Overhead: Flexibility Cost\n---------------------------\n-\n-The library offers many places where users can specify operations\n-to be performed by the library in place of defaults.  Sometimes\n-this seems to require that the library use a more-roundabout, and\n-possibly slower, way to accomplish the default requirements than\n-would be used otherwise.\n-\n-The primary protection against this overhead is thorough compiler\n-optimization, to crush out layers of inline function interfaces.\n-Kuck & Associates has demonstrated the practicality of this kind\n-of optimization.\n-\n-The second line of defense against this overhead is explicit\n-specialization.  By defining helper function templates, and writing\n-specialized code for the default case, overhead can be eliminated\n-for that case without sacrificing flexibility.  This takes full\n-advantage of any ability of the optimizer to crush out degenerate\n-code.\n-\n-The library specifies many virtual functions which current linkers\n-load even when they cannot be called.  Some minor improvements to the\n-compiler and to ld would eliminate any such overhead by simply\n-omitting virtual functions that the complete program does not call.\n-A prototype of this work has already been done.  For targets where\n-GNU ld is not used, a \"pre-linker\" could do the same job.\n-\n-The main areas in the standard interface where user flexibility\n-can result in overhead are:\n-\n- - Allocators:  Containers are specified to use user-definable\n-   allocator types and objects, making tuning for the container\n-   characteristics tricky.\n-\n- - Locales: the standard specifies locale objects used to implement\n-   iostream operations, involving many virtual functions which use\n-   streambuf iterators.\n-\n- - Algorithms and containers: these may be instantiated on any type,\n-   frequently duplicating code for identical operations.\n-\n- - Iostreams and strings: users are permitted to use these on their\n-   own types, and specify the operations the stream must use on these\n-   types.\n-\n-Note that these sources of overhead are _avoidable_.  The techniques\n-to avoid them are covered below.\n-\n-Code Bloat\n-----------\n-\n-In the SGI STL, and in some other headers, many of the templates\n-are defined \"inline\" -- either explicitly or by their placement\n-in class definitions -- which should not be inline.  This is a\n-source of code bloat.  Matt had remarked that he was relying on\n-the compiler to recognize what was too big to benefit from inlining,\n-and generate it out-of-line automatically.  However, this also can\n-result in code bloat except where the linker can eliminate the extra\n-copies.\n-\n-Fixing these cases will require an audit of all inline functions\n-defined in the library to determine which merit inlining, and moving\n-the rest out of line.  This is an issue mainly in chapters 23, 25, and\n-27.  Of course it can be done incrementally, and we should generally\n-accept patches that move large functions out of line and into \".tcc\"\n-files, which can later be pulled into a repository.  Compiler/linker\n-improvements to recognize very large inline functions and move them\n-out-of-line, but shared among compilation units, could make this\n-work unnecessary.\n-\n-Pre-instantiating template specializations currently produces large\n-amounts of dead code which bloats statically linked programs.  The\n-current state of the static library, libstdc++.a, is intolerable on\n-this account, and will fuel further confused speculation about a need\n-for a library \"subset\".  A compiler improvement that treats each\n-instantiated function as a separate object file, for linking purposes,\n-would be one solution to this problem.  An alternative would be to\n-split up the manual instantiation files into dozens upon dozens of\n-little files, each compiled separately, but an abortive attempt at\n-this was done for <string> and, though it is far from complete, it\n-is already a nuisance.  A better interim solution (just until we have\n-\"export\") is badly needed.\n-\n-When building a shared library, the current compiler/linker cannot\n-automatically generate the instantiatiations needed.  This creates a\n-miserable situation; it means any time something is changed in the\n-library, before a shared library can be built someone must manually\n-copy the declarations of all templates that are needed by other parts\n-of the library to an \"instantiation\" file, and add it to the build\n-system to be compiled and linked to the library.  This process is\n-readily automated, and should be automated as soon as possible.\n-Users building their own shared libraries experience identical\n-frustrations.\n-\n-Sharing common aspects of template definitions among instantiations\n-can radically reduce code bloat.  The compiler could help a great\n-deal here by recognizing when a function depends on nothing about\n-a template parameter, or only on its size, and giving the resulting\n-function a link-name \"equate\" that allows it to be shared with other\n-instantiations.  Implementation code could take advantage of the\n-capability by factoring out code that does not depend on the template\n-argument into separate functions to be merged by the compiler.\n-\n-Until such a compiler optimization is implemented, much can be done\n-manually (if tediously) in this direction.  One such optimization is\n-to derive class templates from non-template classes, and move as much\n-implementation as possible into the base class.  Another is to partial-\n-specialize certain common instantiations, such as vector<T*>, to share\n-code for instantiations on all types T.  While these techniques work,\n-they are far from the complete solution that a compiler improvement\n-would afford.\n-\n-Overhead: Expensive Language Features\n--------------------------------------\n-\n-The main \"expensive\" language feature used in the standard library\n-is exception support, which requires compiling in cleanup code with\n-static table data to locate it, and linking in library code to use\n-the table.  For small embedded programs the amount of such library\n-code and table data is assumed by some to be excessive.  Under the\n-\"new\" ABI this perception is generally exaggerated, although in some\n-cases it may actually be excessive.\n-\n-To implement a library which does not use exceptions directly is\n-not difficult given minor compiler support (to \"turn off\" exceptions\n-and ignore exception constructs), and results in no great library\n-maintenance difficulties.  To be precise, given \"-fno-exceptions\",\n-the compiler should treat \"try\" blocks as ordinary blocks, and\n-\"catch\" blocks as dead code to ignore or eliminate.  Compiler\n-support is not strictly necessary, except in the case of \"function\n-try blocks\"; otherwise the following macros almost suffice:\n-\n-  #define throw(X)\n-  #define try      if (true)\n-  #define catch(X) else if (false)\n-\n-However, there may be a need to use function try blocks in the\n-library implementation, and use of macros in this way can make\n-correct diagnostics impossible.  Furthermore, use of this scheme\n-would require the library to call a function to re-throw exceptions\n-from a try block.  Implementing the above semantics in the compiler\n-is preferable.\n-\n-Given the support above (however implemented) it only remains to\n-replace code that \"throws\" with a call to a well-documented \"handler\"\n-function in a separate compilation unit which may be replaced by\n-the user.  The main source of exceptions that would be difficult\n-for users to avoid is memory allocation failures, but users can\n-define their own memory allocation primitives that never throw.\n-Otherwise, the complete list of such handlers, and which library\n-functions may call them, would be needed for users to be able to\n-implement the necessary substitutes.  (Fortunately, they have the\n-source code.)\n-\n-Opportunities\n--------------\n-\n-The template capabilities of C++ offer enormous opportunities for\n-optimizing common library operations, well beyond what would be\n-considered \"eliminating overhead\".  In particular, many operations\n-done in Glibc with macros that depend on proprietary language\n-extensions can be implemented in pristine Standard C++.  For example,\n-the chapter 25 algorithms, and even C library functions such as strchr,\n-can be specialized for the case of static arrays of known (small) size.\n-\n-Detailed optimization opportunities are identified below where\n-the component where they would appear is discussed.  Of course new\n-opportunities will be identified during implementation.\n-\n-Unimplemented Required Library Features\n----------------------------------------\n-\n-The standard specifies hundreds of components, grouped broadly by\n-chapter.  These are listed in excruciating detail in the CHECKLIST\n-file.\n-\n-  17 general\n-  18 support\n-  19 diagnostics\n-  20 utilities\n-  21 string\n-  22 locale\n-  23 containers\n-  24 iterators\n-  25 algorithms\n-  26 numerics\n-  27 iostreams\n-  Annex D  backward compatibility\n-\n-Anyone participating in implementation of the library should obtain\n-a copy of the standard, ISO 14882.   People in the U.S. can obtain an\n-electronic copy for US$18 from ANSI's web site.  Those from other\n-countries should visit http://www.iso.ch/ to find out the location\n-of their country's representation in ISO, in order to know who can\n-sell them a copy.\n-\n-The emphasis in the following sections is on unimplemented features\n-and optimization opportunities.\n-\n-Chapter 17  General\n--------------------\n-\n-Chapter 17 concerns overall library requirements.\n-\n-The standard doesn't mention threads.  A multi-thread (MT) extension\n-primarily affects operators new and delete (18), allocator (20),\n-string (21), locale (22), and iostreams (27).  The common underlying\n-support needed for this is discussed under chapter 20.\n-\n-The standard requirements on names from the C headers create a\n-lot of work, mostly done.  Names in the C headers must be visible\n-in the std:: and sometimes the global namespace; the names in the\n-two scopes must refer to the same object.  More stringent is that\n-Koenig lookup implies that any types specified as defined in std::\n-really are defined in std::.  Names optionally implemented as\n-macros in C cannot be macros in C++.  (An overview may be read at\n-<http://www.cantrip.org/cheaders.html>).  The scripts \"inclosure\"\n-and \"mkcshadow\", and the directories shadow/ and cshadow/, are the\n-beginning of an effort to conform in this area.\n-\n-A correct conforming definition of C header names based on underlying\n-C library headers, and practical linking of conforming namespaced\n-customer code with third-party C libraries depends ultimately on\n-an ABI change, allowing namespaced C type names to be mangled into\n-type names as if they were global, somewhat as C function names in a\n-namespace, or C++ global variable names, are left unmangled.  Perhaps\n-another \"extern\" mode, such as 'extern \"C-global\"' would be an\n-appropriate place for such type definitions.  Such a type would\n-affect mangling as follows:\n-\n-  namespace A {\n-    struct X {};\n-    extern \"C-global\" {  // or maybe just 'extern \"C\"'\n-      struct Y {};\n-    };\n-  }\n-  void f(A::X*);  // mangles to f__FPQ21A1X\n-  void f(A::Y*);  // mangles to f__FP1Y\n-\n-(It may be that this is really the appropriate semantics for regular\n-'extern \"C\"', and 'extern \"C-global\"', as an extension, would not be\n-necessary.) This would allow functions declared in non-standard C headers\n-(and thus fixable by neither us nor users) to link properly with functions\n-declared using C types defined in properly-namespaced headers.  The\n-problem this solves is that C headers (which C++ programmers do persist\n-in using) frequently forward-declare C struct tags without including\n-the header where the type is defined, as in\n-\n-  struct tm;\n-  void munge(tm*);\n-\n-Without some compiler accommodation, munge cannot be called by correct\n-C++ code using a pointer to a correctly-scoped tm* value.\n-\n-The current C headers use the preprocessor extension \"#include_next\",\n-which the compiler complains about when run \"-pedantic\".\n-(Incidentally, it appears that \"-fpedantic\" is currently ignored,\n-probably a bug.)  The solution in the C compiler is to use\n-\"-isystem\" rather than \"-I\", but unfortunately in g++ this seems\n-also to wrap the whole header in an 'extern \"C\"' block, so it's\n-unusable for C++ headers.  The correct solution appears to be to\n-allow the various special include-directory options, if not given\n-an argument, to affect subsequent include-directory options additively,\n-so that if one said\n-\n-  -pedantic -iprefix $(prefix) \\\n-  -idirafter -ino-pedantic -ino-extern-c -iwithprefix -I g++-v3 \\\n-  -iwithprefix -I g++-v3/ext\n-\n-the compiler would search $(prefix)/g++-v3 and not report\n-pedantic warnings for files found there, but treat files in\n-$(prefix)/g++-v3/ext pedantically.  (The undocumented semantics\n-of \"-isystem\" in g++ stink.  Can they be rescinded?  If not it\n-must be replaced with something more rationally behaved.)\n-\n-All the C headers need the treatment above; in the standard these\n-headers are mentioned in various chapters.  Below, I have only\n-mentioned those that present interesting implementation issues.\n-\n-The components identified as \"mostly complete\", below, have not been\n-audited for conformance.  In many cases where the library passes\n-conformance tests we have non-conforming extensions that must be\n-wrapped in #if guards for \"pedantic\" use, and in some cases renamed\n-in a conforming way for continued use in the implementation regardless\n-of conformance flags.\n-\n-The STL portion of the library still depends on a header\n-stl/bits/stl_config.h full of #ifdef clauses.  This apparatus\n-should be replaced with autoconf/automake machinery.\n-\n-The SGI STL defines a type_traits<> template, specialized for\n-many types in their code including the built-in numeric and\n-pointer types and some library types, to direct optimizations of\n-standard functions.  The SGI compiler has been extended to generate\n-specializations of this template automatically for user types,\n-so that use of STL templates on user types can take advantage of\n-these optimizations.  Specializations for other, non-STL, types\n-would make more optimizations possible, but extending the gcc\n-compiler in the same way would be much better.  Probably the next\n-round of standardization will ratify this, but probably with\n-changes, so it probably should be renamed to place it in the\n-implementation namespace.\n-\n-The SGI STL also defines a large number of extensions visible in\n-standard headers.  (Other extensions that appear in separate headers\n-have been sequestered in subdirectories ext/ and backward/.)  All\n-these extensions should be moved to other headers where possible,\n-and in any case wrapped in a namespace (not std!), and (where kept\n-in a standard header) girded about with macro guards.  Some cannot be\n-moved out of standard headers because they are used to implement\n-standard features.   The canonical method for accommodating these\n-is to use a protected name, aliased in macro guards to a user-space\n-name.  Unfortunately C++ offers no satisfactory template typedef\n-mechanism, so very ad-hoc and unsatisfactory aliasing must be used\n-instead.\n-\n-Implementation of a template typedef mechanism should have the highest\n-priority among possible extensions, on the same level as implementation\n-of the template \"export\" feature.\n-\n-Chapter 18  Language support\n-----------------------------\n-\n-Headers: <limits> <new> <typeinfo> <exception>\n-C headers: <cstddef> <climits> <cfloat>  <cstdarg> <csetjmp>\n-           <ctime>   <csignal> <cstdlib> (also 21, 25, 26)\n-\n-This defines the built-in exceptions, rtti, numeric_limits<>,\n-operator new and delete.  Much of this is provided by the\n-compiler in its static runtime library.\n-\n-Work to do includes defining numeric_limits<> specializations in\n-separate files for all target architectures.  Values for integer types\n-except for bool and wchar_t are readily obtained from the C header\n-<limits.h>, but values for the remaining numeric types (bool, wchar_t,\n-float, double, long double) must be entered manually.  This is\n-largely dog work except for those members whose values are not\n-easily deduced from available documentation.  Also, this involves\n-some work in target configuration to identify the correct choice of\n-file to build against and to install.\n-\n-The definitions of the various operators new and delete must be\n-made thread-safe, which depends on a portable exclusion mechanism,\n-discussed under chapter 20.   Of course there is always plenty of\n-room for improvements to the speed of operators new and delete.\n-\n-<cstdarg>, in Glibc, defines some macros that gcc does not allow to\n-be wrapped into an inline function.  Probably this header will demand\n-attention whenever a new target is chosen.  The functions atexit(),\n-exit(), and abort() in cstdlib have different semantics in C++, so\n-must be re-implemented for C++.\n-\n-Chapter 19  Diagnostics\n------------------------\n-\n-Headers: <stdexcept>\n-C headers: <cassert> <cerrno>\n-\n-This defines the standard exception objects, which are \"mostly complete\".\n-Cygnus has a version, and now SGI provides a slightly different one.\n-It makes little difference which we use.\n-\n-The C global name \"errno\", which C allows to be a variable or a macro,\n-is required in C++ to be a macro.  For MT it must typically result in\n-a function call.\n-\n-Chapter 20  Utilities\n----------------------\n-Headers: <utility> <functional> <memory>\n-C header: <ctime> (also in 18)\n-\n-SGI STL provides \"mostly complete\" versions of all the components\n-defined in this chapter.  However, the auto_ptr<> implementation\n-is known to be wrong.  Furthermore, the standard definition of it\n-is known to be unimplementable as written.  A minor change to the\n-standard would fix it, and auto_ptr<> should be adjusted to match.\n-\n-Multi-threading affects the allocator implementation, and there must\n-be configuration/installation choices for different users' MT\n-requirements.  Anyway, users will want to tune allocator options\n-to support different target conditions, MT or no.\n-\n-The primitives used for MT implementation should be exposed, as an\n-extension, for users' own work.  We need cross-CPU \"mutex\" support,\n-multi-processor shared-memory atomic integer operations, and single-\n-processor uninterruptible integer operations, and all three configurable\n-to be stubbed out for non-MT use, or to use an appropriately-loaded\n-dynamic library for the actual runtime environment, or statically\n-compiled in for cases where the target architecture is known.\n-\n-Chapter 21  String\n-------------------\n-Headers: <string>\n-C headers: <cctype> <cwctype> <cstring> <cwchar> (also in 27)\n-           <cstdlib> (also in 18, 25, 26)\n-\n-We have \"mostly-complete\" char_traits<> implementations.  Many of the\n-char_traits<char> operations might be optimized further using existing\n-proprietary language extensions.\n-\n-We have a \"mostly-complete\" basic_string<> implementation.  The work\n-to manually instantiate char and wchar_t specializations in object\n-files to improve link-time behavior is extremely unsatisfactory,\n-literally tripling library-build time with no commensurate improvement\n-in static program link sizes.  It must be redone.  (Similar work is\n-needed for some components in chapters 22 and 27.)\n-\n-Other work needed for strings is MT-safety, as discussed under the\n-chapter 20 heading.\n-\n-The standard C type mbstate_t from <cwchar> and used in char_traits<>\n-must be different in C++ than in C, because in C++ the default constructor\n-value mbstate_t() must be the \"base\" or \"ground\" sequence state.\n-(According to the likely resolution of a recently raised Core issue,\n-this may become unnecessary.  However, there are other reasons to\n-use a state type not as limited as whatever the C library provides.)\n-If we might want to provide conversions from (e.g.) internally-\n-represented EUC-wide to externally-represented Unicode, or vice-\n-versa, the mbstate_t we choose will need to be more accommodating\n-than what might be provided by an underlying C library.\n-\n-There remain some basic_string template-member functions which do\n-not overload properly with their non-template brethren.  The infamous\n-hack akin to what was done in vector<> is needed, to conform to\n-23.1.1 para 10.  The CHECKLIST items for basic_string marked 'X',\n-or incomplete, are so marked for this reason.\n-\n-Replacing the string iterators, which currently are simple character\n-pointers, with class objects would greatly increase the safety of the\n-client interface, and also permit a \"debug\" mode in which range,\n-ownership, and validity are rigorously checked.  The current use of\n-raw pointers as string iterators is evil.  vector<> iterators need the\n-same treatment.  Note that the current implementation freely mixes\n-pointers and iterators, and that must be fixed before safer iterators\n-can be introduced.\n-\n-Some of the functions in <cstring> are different from the C version.\n-generally overloaded on const and non-const argument pointers.  For\n-example, in <cstring> strchr is overloaded.  The functions isupper\n-etc.  in <cctype> typically implemented as macros in C are functions\n-in C++, because they are overloaded with others of the same name\n-defined in <locale>.\n-\n-Many of the functions required in <cwctype> and <cwchar> cannot be\n-implemented using underlying C facilities on intended targets because\n-such facilities only partly exist.\n-\n-Chapter 22  Locale\n-------------------\n-Headers: <locale>\n-C headers: <clocale>\n-\n-We have a \"mostly complete\" class locale, with the exception of\n-code for constructing, and handling the names of, named locales.\n-The ways that locales are named (particularly when categories\n-(e.g. LC_TIME, LC_COLLATE) are different) varies among all target\n-environments.  This code must be written in various versions and\n-chosen by configuration parameters.\n-\n-Members of many of the facets defined in <locale> are stubs.  Generally,\n-there are two sets of facets: the base class facets (which are supposed\n-to implement the \"C\" locale) and the \"byname\" facets, which are supposed\n-to read files to determine their behavior.  The base ctype<>, collate<>,\n-and numpunct<> facets are \"mostly complete\", except that the table of\n-bitmask values used for \"is\" operations, and corresponding mask values,\n-are still defined in libio and just included/linked.  (We will need to\n-implement these tables independently, soon, but should take advantage\n-of libio where possible.)  The num_put<>::put members for integer types\n-are \"mostly complete\".\n-\n-A complete list of what has and has not been implemented may be\n-found in CHECKLIST.  However, note that the current definition of\n-codecvt<wchar_t,char,mbstate_t> is wrong.  It should simply write\n-out the raw bytes representing the wide characters, rather than\n-trying to convert each to a corresponding single \"char\" value.\n-\n-Some of the facets are more important than others.  Specifically,\n-the members of ctype<>, numpunct<>, num_put<>, and num_get<> facets\n-are used by other library facilities defined in <string>, <istream>,\n-and <ostream>, and the codecvt<> facet is used by basic_filebuf<>\n-in <fstream>, so a conforming iostream implementation depends on\n-these.\n-\n-The \"long long\" type eventually must be supported, but code mentioning\n-it should be wrapped in #if guards to allow pedantic-mode compiling.\n-\n-Performance of num_put<> and num_get<> depend critically on\n-caching computed values in ios_base objects, and on extensions\n-to the interface with streambufs.\n-\n-Specifically: retrieving a copy of the locale object, extracting\n-the needed facets, and gathering data from them, for each call to\n-(e.g.) operator<< would be prohibitively slow.   To cache format\n-data for use by num_put<> and num_get<> we have a _Format_cache<>\n-object stored in the ios_base::pword() array.  This is constructed\n-and initialized lazily, and is organized purely for utility.  It\n-is discarded when a new locale with different facets is imbued.\n-\n-Using only the public interfaces of the iterator arguments to the\n-facet functions would limit performance by forbidding \"vector-style\"\n-character operations.  The streambuf iterator optimizations are\n-described under chapter 24, but facets can also bypass the streambuf\n-iterators via explicit specializations and operate directly on the\n-streambufs, and use extended interfaces to get direct access to the\n-streambuf internal buffer arrays.  These extensions are mentioned\n-under chapter 27.  These optimizations are particularly important\n-for input parsing.\n-\n-Unused virtual members of locale facets can be omitted, as mentioned\n-above, by a smart linker.\n-\n-Chapter 23  Containers\n-----------------------\n-Headers: <deque> <list> <queue> <stack> <vector> <map> <set> <bitset>\n-\n-All the components in chapter 23 are implemented in the SGI STL.\n-They are \"mostly complete\"; they include a large number of\n-nonconforming extensions which must be wrapped.  Some of these\n-are used internally and must be renamed or duplicated.\n-\n-The SGI components are optimized for large-memory environments.  For\n-embedded targets, different criteria might be more appropriate.  Users\n-will want to be able to tune this behavior.  We should provide\n-ways for users to compile the library with different memory usage\n-characteristics.\n-\n-A lot more work is needed on factoring out common code from different\n-specializations to reduce code size here and in chapter 25.  The\n-easiest fix for this would be a compiler/ABI improvement that allows\n-the compiler to recognize when a specialization depends only on the\n-size (or other gross quality) of a template argument, and allow the\n-linker to share the code with similar specializations.  In its\n-absence, many of the algorithms and containers can be partial-\n-specialized, at least for the case of pointers, but this only solves\n-a small part of the problem.  Use of a type_traits-style template\n-allows a few more optimization opportunities, more if the compiler\n-can generate the specializations automatically.\n-\n-As an optimization, containers can specialize on the default allocator\n-and bypass it, or take advantage of details of its implementation\n-after it has been improved upon.\n-\n-Replacing the vector iterators, which currently are simple element\n-pointers, with class objects would greatly increase the safety of the\n-client interface, and also permit a \"debug\" mode in which range,\n-ownership, and validity are rigorously checked.  The current use of\n-pointers for iterators is evil.\n-\n-As mentioned for chapter 24, the deque iterator is a good example of\n-an opportunity to implement a \"staged\" iterator that would benefit\n-from specializations of some algorithms.\n-\n-Chapter 24  Iterators\n----------------------\n-Headers: <iterator>\n-\n-Standard iterators are \"mostly complete\", with the exception of\n-the stream iterators, which are not yet templatized on the\n-stream type.  Also, the base class template iterator<> appears\n-to be wrong, so everything derived from it must also be wrong,\n-currently.\n-\n-The streambuf iterators (currently located in stl/bits/std_iterator.h,\n-but should be under bits/) can be rewritten to take advantage of\n-friendship with the streambuf implementation.\n-\n-Matt Austern has identified opportunities where certain iterator\n-types, particularly including streambuf iterators and deque\n-iterators, have a \"two-stage\" quality, such that an intermediate\n-limit can be checked much more quickly than the true limit on\n-range operations.  If identified with a member of iterator_traits,\n-algorithms may be specialized for this case.  Of course the\n-iterators that have this quality can be identified by specializing\n-a traits class.\n-\n-Many of the algorithms must be specialized for the streambuf\n-iterators, to take advantage of block-mode operations, in order\n-to allow iostream/locale operations' performance not to suffer.\n-It may be that they could be treated as staged iterators and\n-take advantage of those optimizations.\n-\n-Chapter 25  Algorithms\n-----------------------\n-Headers: <algorithm>\n-C headers: <cstdlib> (also in 18, 21, 26))\n-\n-The algorithms are \"mostly complete\".  As mentioned above, they\n-are optimized for speed at the expense of code and data size.\n-\n-Specializations of many of the algorithms for non-STL types would\n-give performance improvements, but we must use great care not to\n-interfere with fragile template overloading semantics for the\n-standard interfaces.  Conventionally the standard function template\n-interface is an inline which delegates to a non-standard function\n-which is then overloaded (this is already done in many places in\n-the library).  Particularly appealing opportunities for the sake of\n-iostream performance are for copy and find applied to streambuf\n-iterators or (as noted elsewhere) for staged iterators, of which\n-the streambuf iterators are a good example.\n-\n-The bsearch and qsort functions cannot be overloaded properly as\n-required by the standard because gcc does not yet allow overloading\n-on the extern-\"C\"-ness of a function pointer.\n-\n-Chapter 26  Numerics\n---------------------\n-Headers: <complex> <valarray> <numeric>\n-C headers: <cmath>, <cstdlib> (also 18, 21, 25)\n-\n-Numeric components: Gabriel dos Reis's valarray, Drepper's complex,\n-and the few algorithms from the STL are \"mostly done\".   Of course\n-optimization opportunities abound for the numerically literate.  It\n-is not clear whether the valarray implementation really conforms\n-fully, in the assumptions it makes about aliasing (and lack thereof)\n-in its arguments.\n-\n-The C div() and ldiv() functions are interesting, because they are the\n-only case where a C library function returns a class object by value.\n-Since the C++ type div_t must be different from the underlying C type\n-(which is in the wrong namespace) the underlying functions div() and\n-ldiv() cannot be re-used efficiently.  Fortunately they are trivial to\n-re-implement.\n-\n-Chapter 27  Iostreams\n----------------------\n-Headers: <iosfwd> <streambuf> <ios> <ostream> <istream> <iostream>\n-         <iomanip> <sstream> <fstream>\n-C headers: <cstdio> <cwchar> (also in 21)\n-\n-Iostream is currently in a very incomplete state.  <iosfwd>, <iomanip>,\n-ios_base, and basic_ios<> are \"mostly complete\".  basic_streambuf<> and\n-basic_ostream<> are well along, but basic_istream<> has had little work\n-done.  The standard stream objects, <sstream> and <fstream> have been\n-started; basic_filebuf<> \"write\" functions have been implemented just\n-enough to do \"hello, world\".\n-\n-Most of the istream and ostream operators << and >> (with the exception\n-of the op<<(integer) ones) have not been changed to use locale primitives,\n-sentry objects, or char_traits members.\n-\n-All these templates should be manually instantiated for char and\n-wchar_t in a way that links only used members into user programs.\n-\n-Streambuf is fertile ground for optimization extensions.  An extended\n-interface giving iterator access to its internal buffer would be very\n-useful for other library components.\n-\n-Iostream operations (primarily operators << and >>) can take advantage\n-of the case where user code has not specified a locale, and bypass locale\n-operations entirely.  The current implementation of op<</num_put<>::put,\n-for the integer types, demonstrates how they can cache encoding details\n-from the locale on each operation.  There is lots more room for\n-optimization in this area.\n-\n-The definition of the relationship between the standard streams\n-cout et al. and stdout et al. requires something like a \"stdiobuf\".\n-The SGI solution of using double-indirection to actually use a\n-stdio FILE object for buffering is unsatisfactory, because it\n-interferes with peephole loop optimizations.\n-\n-The <sstream> header work has begun.  stringbuf can benefit from\n-friendship with basic_string<> and basic_string<>::_Rep to use\n-those objects directly as buffers, and avoid allocating and making\n-copies.\n-\n-The basic_filebuf<> template is a complex beast.  It is specified to\n-use the locale facet codecvt<> to translate characters between native\n-files and the locale character encoding.  In general this involves\n-two buffers, one of \"char\" representing the file and another of\n-\"char_type\", for the stream, with codecvt<> translating.  The process\n-is complicated by the variable-length nature of the translation, and\n-the need to seek to corresponding places in the two representations.\n-For the case of basic_filebuf<char>, when no translation is needed,\n-a single buffer suffices.  A specialized filebuf can be used to reduce\n-code space overhead when no locale has been imbued.  Matt Austern's\n-work at SGI will be useful, perhaps directly as a source of code, or\n-at least as an example to draw on.\n-\n-Filebuf, almost uniquely (cf. operator new), depends heavily on\n-underlying environmental facilities.  In current releases iostream\n-depends fairly heavily on libio constant definitions, but it should\n-be made independent.   It also depends on operating system primitives\n-for file operations.  There is immense room for optimizations using\n-(e.g.) mmap for reading.  The shadow/ directory wraps, besides the\n-standard C headers, the libio.h and unistd.h headers, for use mainly\n-by filebuf.  These wrappings have not been completed, though there\n-is scaffolding in place.\n-\n-The encapulation of certain C header <cstdio> names presents an\n-interesting problem.  It is possible to define an inline std::fprintf()\n-implemented in terms of the 'extern \"C\"' vfprintf(), but there is no\n-standard vfscanf() to use to implement std::fscanf().  It appears that\n-vfscanf but be re-implemented in C++ for targets where no vfscanf\n-extension has been defined.  This is interesting in that it seems\n-to be the only significant case in the C library where this kind of\n-rewriting is necessary.  (Of course Glibc provides the vfscanf()\n-extension.)  (The functions related to exit() must be rewritten\n-for other reasons.)\n-\n-\n-Annex D\n--------\n-Headers: <strstream>\n-\n-Annex D defines many non-library features, and many minor\n-modifications to various headers, and a complete header.\n-It is \"mostly done\", except that the libstdc++-2 <strstream>\n-header has not been adopted into the library, or checked to\n-verify that it matches the draft in those details that were\n-clarified by the committee.  Certainly it must at least be\n-moved into the std namespace.\n-\n-We still need to wrap all the deprecated features in #if guards\n-so that pedantic compile modes can detect their use.\n-\n-Nonstandard Extensions\n-----------------------\n-Headers: <iostream.h> <strstream.h> <hash> <rbtree>\n-         <pthread_alloc> <stdiobuf> (etc.)\n-\n-User code has come to depend on a variety of nonstandard components\n-that we must not omit.  Much of this code can be adopted from\n-libstdc++-v2 or from the SGI STL.  This particularly includes\n-<iostream.h>, <strstream.h>, and various SGI extensions such\n-as <hash_map.h>.  Many of these are already placed in the\n-subdirectories ext/ and backward/.  (Note that it is better to\n-include them via \"<backward/hash_map.h>\" or \"<ext/hash_map>\" than\n-to search the subdirectory itself via a \"-I\" directive.\n-"}, {"sha": "a0a257c4876a4c245dcb2b65687777f76639db3f", "filename": "libstdc++-v3/doc/html/17_intro/TODO", "status": "removed", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FTODO", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FTODO", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2FTODO?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,164 +0,0 @@\n-std::allocator\n-\n-  - persistent allocator\n- \n-  - shared memory allocator (use or link to boost::shmem::allocator)\n-\n-std::string \n-\n-  - document __gnu_cxx::__versa_string, add new policies\n-    (Policy-based design incorporating COW\n-    vs. deep copy issues, MT scalability\n-    See Andrei Alexandrescu, June 2001, C/C++ Users Journal\n-    \"Generic<Programming>: A Policy-Based basic_string Implementation\"\n-    http://www.cuj.com/documents/s=7994/cujcexp1906alexandr/)\n-\n-  - operator!= and utility/rel_ops operators need to be made safe with\n-    string and vector iterator classes. basic_string::reverse_iterator may\n-    be implemented incorrectly, or need things like\n-    operator==(__normal_iterator, const char*&), and swap(vector)\n-\n-  - 'do the right thing' ctor fixing needs to be done for string. This\n-    is still subject to some debate on the library issues list, so I\n-    suggest punting till the dust clears.\n-\n-  - fix template members of basic_string<> to overload iterators and\n-    non-iterators properly.  (This is the infamous hack as in vector<> etc\n-    23.1.1 para 10.)\n-\n-std::locale  \n-\n-  - implement __convert_to_v and __convert_from_v without \"C\" library\n-    functions and and LANG environment variable dependencies.\n-\n-  - use localedata to implement generic named (non-MT-safe) locales?\n-    Figure out a way to use ICU data, like libjava? Re-package and use\n-    the glibc localedata, even if we aren't on linux? Need a generic\n-    locale model that does something besides the \"C\" locale.\n-\n-  - make locale::classic() separate from named locale code. This will\n-    improve the static linkage situation, but will require new\n-    initialization code. In particular, we need lazy-initialization of\n-    locale::classic(), and maybe the has_facet/use_facet functions for all\n-    the required facets. The end goal is a self-contained\n-    locale_init.cc, or one with transitive closure without the locale\n-    instantiations (locale-inst.cc) or the named locale bits\n-    (localename.cc).\n-\n-  - Jerry(?)/Paolo(?) work on __float_to_char.\n-\n-  - minimize ctype convertion in data facets, see numpunct/num_put/num_get\n-\n-std::basic_filebuf, 27_io\n-\n-  - wfilebuf, get variable-encoding working and tested, including\n-    positioning and seeking. (I think this may be done now)\n-\n-  - wfilebuf testsuite (getting there...)\n-\n-  - look ahead for unbuffered io, so know when multiple putc's can be\n-    coalesced.\n-\n-  - unlocked __basic_file + new mutext class\n-\n-  - optimized the sentries for istream/ostream\n-\n-  - v2 vs. v3 speed\n-\n-  - add optimization hooks (esp. whitespace eating) to streambuf\n-  - add _M_begin() and _M_end() to streambuf\n-  - add algorithm specializations for [io]streambuf_iterator (copy find etc.)\n-\n-testsuite\n-\n-  - valgrind hooks into make check so can tell memory leakage\n-    Some commentary on the valgrind users list\n-\n-  - add hooks for qmtest, pychart, other for visual diffs \n-\n-  - automatic testing of interactive tests\n-\n-  - diffing generated output files\n-\n-  - provide testsuites for numerics.\n-\n-  - make check-abi needs to have full symbol checking. Scope the LSB\n-    testsuite, see what's going on with the typeinfo etc. bits.\n-\n-  - try to do a better job of ABI testing, with instantiations of all\n-    standard-specified types checked, not just exported symbols.\n-\n-g++/binutils\n-\n-  - compression for wide versions of basic types, not just narrow\n-\n-threads\n-\n-  - create MT abstraction layer for atomicity to pthreads.\n-\n-  - solution for threads + C++.\n-\n-other/random\n-\n-- relocations, work on getting these down\n-\n-- issues with __builtin_memcpy and std::copy from Jerry Quinn\n-  http://gcc.gnu.org/ml/libstdc++/2003-02/msg00056.html\n-  http://gcc.gnu.org/ml/libstdc++/2003-02/msg00302.html\n-  http://gcc.gnu.org/ml/gcc/2003-10/msg01305.html\n-\n-- fix dependency tracking for includes (.h, .tcc) during build process.\n-\n-- coordinate with \"C\" library people the \"C\" compatibility headers.\n-\n-- Think about naming all member data and member functions consistently\n-  as per\n-  funtions: _M_verb_adverb\n-  data: _M_noun_adjective\n-\n-- A C++STYLE guide that deals with nested namespaces, and that\n-everybody can live with.\n-\n-- exception specifications need to be reviewed for all parts of the\n-library support and utility areas, particularly <new>. Part of this is\n-a standards issue, where the 27_io standard is really in an odd\n-spot. Do the work to make this consistent.\n-\n-- C-related issues WRT to io and filepos, mbstate_t. Seeking in wide\n-streams. May need to define operators for mbstate_t so that\n-'mbstate_t& == mbstate_t' is something that can be done.\n-\n-- scoping/linking issues WRT to C structs need to be worked out. See\n-Nathan's commentary on cantrip, http://www.cantrip.org/cheaders.html\n-\n-- auto_ptr: seems to be some disagreement on what is\n-standards-conformant behavior, specially on conversion operators.\n-\n-- list::assignment operator needs const_cast\n-\n-- a cleaner division between pointers-to-value_type and true iterators\n-needs to be drawn throughout the entire STL implementation.\n-\n-- priority_queue conversions may be non-conformant\n-\n-- Protect valarray::result_type (not Standard) and make it work with\n-  the various helper classes.\n-\n-- Make sure `valarray<bool> & == _Expr<_BinClos<logical_or,_ValArray,_ValArray,double,double>,bool>' \n-  is defined\n-\n-- All of the Library working group closed issues need to be\n-addressed. Some of them proposed resolutions are already in the v-3\n-sources, with macro-guards. Also, same with the TR.\n-\n-- need to think about doing a .texi or DocBook manual, instead of all\n-these HTML pages. In addition, it would be nice to have a full manual,\n-instead of a lot of ad-hoc pages. Weaknesses include numerics, locale,\n-and io.\n-\n-- add FAQ entries -- improve the install instructions\n-\n-- add HOWTO entries\n-\n-- do more doxygen manpages\n-"}, {"sha": "c27de61515c7eee0d77f54825c8068a6fe17dd6f", "filename": "libstdc++-v3/doc/html/17_intro/abi.html", "status": "removed", "additions": 0, "deletions": 991, "changes": 991, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fabi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fabi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fabi.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,991 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta name=\"AUTHOR\" content=\"bkoz@gcc.gnu.org (Benjamin Kosnik)\" />\n-   <meta name=\"KEYWORDS\" content=\"C++, libstdc++, dynamic, shared, library, ABI, version\" />\n-   <meta name=\"DESCRIPTION\" content=\"C++ Standard Library ABI\" />\n-   <meta name=\"GENERATOR\" content=\"emacs and ten fingers\" />\n-   <title>Standard C++ Library ABI</title>\n-<link rel=\"StyleSheet\" href=\"lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Copyright\" href=\"17_intro/license.html\" type=\"text/html\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">C++ Standard Library ABI</a></h1>\n-\n-<p class=\"fineprint\"><em>\n-   The latest version of this document is always available at\n-   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/abi.html\">\n-   http://gcc.gnu.org/onlinedocs/libstdc++/abi.html</a>.\n-</em></p>\n-\n-<p><em>\n-   To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++ homepage</a>.\n-</em></p>\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h3 class=\"left\">\n-  <a name=\"CXXinterface\">The C++ interface</a>\n-</h3>\n-\n-<p> C++ applications often dependent on specific language support\n-routines, say for throwing exceptions, or catching exceptions, and\n-perhaps also dependent on features in the C++ Standard Library.\n-</p>\n-\n-<p> The C++ Standard Library has many include files, types defined in\n-those include files, specific named functions, and other behavior. The\n-text of these behaviors, as written in source include files, is called\n-the Application Programing Interface, or API.\n-</p>\n-\n-<p> Furthermore, C++ source that is compiled into object files is\n- transformed by the compiler: it arranges objects with specific\n- alignment and in a particular layout, mangling names according to a\n- well-defined algorithm, has specific arrangements for the support of\n- virtual functions, etc. These details are defined as the compiler\n- Application Binary Interface, or ABI. The GNU C++ compiler uses an\n- industry-standard C++ ABI starting with version 3. Details can be\n- found in the <a href=\"http://www.codesourcery.com/cxx-abi/abi.html\">\n- ABI specification</a>.\n-</p>\n-\n-<p>\n- The GNU C++ compiler, g++, has a compiler command line option to\n-  switch between various different C++ ABIs. This explicit version\n-  switch is the flag <code> -fabi-version</code>. In addition, some\n-  g++ command line options may change the ABI as a side-effect of\n-  use. Such flags include <code>-fpack-struct</code> and\n-  <code>-fno-exceptions</code>, but include others: see the complete\n-  list in the GCC manual under the heading <a\n-  href=\"http://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#Code%20Gen%20Options\">Options\n-  for Code Generation Conventions</a>.\n-</p>\n-\n-<p> The configure options used when building a specific libstdc++\n-version may also impact the resulting library ABI. The available\n-configure options, and their impact on the library ABI, are documented\n-<a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html\">\n-here</a>.\n-</p>\n-\n-<p> Putting all of these ideas together results in the C++ Standard\n-library ABI, which is the compilation of a given library API by a\n-given compiler ABI. In a nutshell:\n-</p>\n-\n-<code> library API + compiler ABI = library ABI</code>\n-\n-<p>\n- The library ABI is mostly of interest for end-users who have\n- unresolved symbols and are linking dynamically to the C++ Standard\n- library, and who thus must be careful to compile their application\n- with a compiler that is compatible with the available C++ Standard\n- library binary. In this case, compatible is defined with the equation\n- above: given an application compiled with a given compiler ABI and\n- library API, it will work correctly with a Standard C++ Library\n- created with the same constraints.\n-</p>\n-\n-<p>\n-  To use a specific version of the C++ ABI, one must use a\n-  corresponding GNU C++ toolchain (Ie, g++ and libstdc++) that\n-  implements the C++ ABI in question.\n-</p>\n-\n-<h3 class=\"left\">\n-  <a name=\"ABI_versioning\">Versioning</a>\n-</h3>\n-\n-<p> The C++ interface has evolved throughout the history of the GNU\n-C++ toolchain. With each release, various details have been changed so\n-as to give distinct versions to the C++ interface.\n-</p>\n-\n-<h5 class=\"left\">\n-  <a name=\"goals\">Goals of versioning</a>\n-</h5>\n-\n-<p>Extending existing, stable ABIs. Versioning gives subsequent stable\n-releases series libraries the ability to add new symbols and add\n-functionality, all the while retaining backwards compatibility with\n-the previous releases in the series. Note: the reverse is not true. It\n-is not possible to take binaries linked with the latest version of a\n-release series (if symbols have been added) and expect the initial\n-release of the series to remain link compatible.\n-</p>\n-\n-<p>Allows multiple, incompatible ABIs to coexist at the same time.\n-</p>\n-\n-<p>\n-</p>\n-\n-<h5 class=\"left\">\n-  <a name=\"details\"> Version History </a>\n-</h5>\n-<p>\n- How can this complexity be managed? What does C++ versioning mean?\n-  Because library and compiler changes often make binaries compiled\n-  with one version of the GNU tools incompatible with binaries\n-  compiled with other (either newer or older) versions of the same GNU\n-  tools, specific techniques are used to make managing this complexity\n-  easier.\n-</p>\n-\n-<p>\n-  The following techniques are used:\n-</p>\n-\n-  <ul>\n-\n-    <li> <p>Release versioning on the libgcc_s.so binary. This is\n-implemented via file names and the ELF DT_SONAME mechanism (at least\n-on ELF systems).</p>\n-\n-    <p>It is versioned as follows: \n-    </p>\n-    <ul>\n-    <li>gcc-3.0.0: libgcc_s.so.1</li>\n-    <li>gcc-3.0.1: libgcc_s.so.1</li>\n-    <li>gcc-3.0.2: libgcc_s.so.1</li>\n-    <li>gcc-3.0.3: libgcc_s.so.1</li>\n-    <li>gcc-3.0.4: libgcc_s.so.1</li>\n-    <li>gcc-3.1.0: libgcc_s.so.1</li>\n-    <li>gcc-3.1.1: libgcc_s.so.1</li>\n-    <li>gcc-3.2.0: libgcc_s.so.1</li>\n-    <li>gcc-3.2.1: libgcc_s.so.1</li>\n-    <li>gcc-3.2.2: libgcc_s.so.1</li>\n-    <li>gcc-3.2.3: libgcc_s.so.1</li>\n-    <li>gcc-3.3.0: libgcc_s.so.1</li>\n-    <li>gcc-3.3.1: libgcc_s.so.1</li>\n-    <li>gcc-3.3.2: libgcc_s.so.1</li>\n-    <li>gcc-3.3.3: libgcc_s.so.1</li>\n-    <li>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: on m68k-linux and\n-    hppa-linux this is either libgcc_s.so.1 (when configuring\n-    <code>--with-sjlj-exceptions</code>) or libgcc_s.so.2. For all\n-    others, this is libgcc_s.so.1.  </li> </ul>\n-    <p></p>\n-    </li>\n-\n-    <li>Symbol versioning on the libgcc_s.so binary.\n-    <p>mapfile: gcc/libgcc-std.ver</p>\n-\n-    <p>It is versioned with the following labels and version\n-   definitions, where the version definition is the maximum for a\n-   particular release. Labels are cumulative. If a particular release\n-   is not listed, it has the same version labels as the preceeding\n-   release.</p>\n-    <ul>\n-    <li>gcc-3.0.0: GCC_3.0</li>\n-    <li>gcc-3.3.0: GCC_3.3</li>\n-    <li>gcc-3.3.1: GCC_3.3.1</li>\n-    <li>gcc-3.3.2: GCC_3.3.2</li>\n-    <li>gcc-3.3.4: GCC_3.3.4</li>\n-    <li>gcc-3.4.0: GCC_3.4</li>\n-    <li>gcc-3.4.2: GCC_3.4.2</li>\n-    <li>gcc-3.4.4: GCC_3.4.4</li>\n-    <li>gcc-4.0.0: GCC_4.0.0</li>\n-    <li>gcc-4.1.0: GCC_4.1.0</li>\n-    <li>gcc-4.2.0: GCC_4.2.0</li>\n-    </ul>\n-    <p></p>\n-    </li>\n-\n-    <li>Release versioning on the libstdc++.so binary, implemented in the same was as the libgcc_s.so binary, above.\n-\n-    <p>It is versioned as follows:\n-    </p>\n-    <ul>\n-    <li>gcc-3.0.0: libstdc++.so.3.0.0</li>\n-    <li>gcc-3.0.1: libstdc++.so.3.0.1</li>\n-    <li>gcc-3.0.2: libstdc++.so.3.0.2</li>\n-    <li>gcc-3.0.3: libstdc++.so.3.0.2 (Error should be libstdc++.so.3.0.3)</li>\n-    <li>gcc-3.0.4: libstdc++.so.3.0.4</li>\n-    <li>gcc-3.1.0: libstdc++.so.4.0.0</li>\n-    <li>gcc-3.1.1: libstdc++.so.4.0.1</li>\n-    <li>gcc-3.2.0: libstdc++.so.5.0.0</li>\n-    <li>gcc-3.2.1: libstdc++.so.5.0.1</li>\n-    <li>gcc-3.2.2: libstdc++.so.5.0.2</li>\n-    <li>gcc-3.2.3: libstdc++.so.5.0.3 (Not strictly required)</li>\n-    <li>gcc-3.3.0: libstdc++.so.5.0.4</li>\n-    <li>gcc-3.3.1: libstdc++.so.5.0.5</li>\n-    <li>gcc-3.3.2: libstdc++.so.5.0.5</li>\n-    <li>gcc-3.3.3: libstdc++.so.5.0.5</li>\n-    <li>gcc-3.4.0: libstdc++.so.6.0.0</li>\n-    <li>gcc-3.4.1: libstdc++.so.6.0.1</li>\n-    <li>gcc-3.4.2: libstdc++.so.6.0.2</li>\n-    <li>gcc-3.4.3: libstdc++.so.6.0.3</li>\n-    <li>gcc-3.4.4: libstdc++.so.6.0.3</li>\n-    <li>gcc-3.4.5: libstdc++.so.6.0.3</li>\n-    <li>gcc-3.4.6: libstdc++.so.6.0.3</li>\n-    <li>gcc-4.0.0: libstdc++.so.6.0.4</li>\n-    <li>gcc-4.0.1: libstdc++.so.6.0.5</li>\n-    <li>gcc-4.0.2: libstdc++.so.6.0.6</li>\n-    <li>gcc-4.0.3: libstdc++.so.6.0.7</li>\n-    <li>gcc-4.1.0: libstdc++.so.6.0.7</li>\n-    <li>gcc-4.1.1: libstdc++.so.6.0.8</li>\n-    <li>gcc-4.1.2: libstdc++.so.6.0.8</li>\n-    <li>gcc-4.2.0: libstdc++.so.6.0.9</li>\n-    </ul>\n-    <p></p>\n-    </li>\n-\n-    <li>Symbol versioning on the libstdc++.so binary.\n-\n-    <p>mapfile: libstdc++/config/linker-map.gnu</p>\n-    <p>It is versioned with the following labels and version\n-   definitions, where the version definition is the maximum for a\n-   particular release. Note, only symbol which are newly introduced\n-   will use the maximum version definition. Thus, for release series\n-   with the same label, but incremented version definitions, the later\n-   release has both versions. (An example of this would be the\n-   gcc-3.2.1 release, which has GLIBCPP_3.2.1 for new symbols and\n-   GLIBCPP_3.2 for symbols that were introduced in the gcc-3.2.0\n-   release.) If a particular release is not listed, it has the same\n-   version labels as the preceeding release.\n-   </p>\n-    <ul>\n-    <li>gcc-3.0.0: (Error, not versioned)</li>\n-    <li>gcc-3.0.1: (Error, not versioned)</li>\n-    <li>gcc-3.0.2: (Error, not versioned)</li>\n-    <li>gcc-3.0.3: (Error, not versioned)</li>\n-    <li>gcc-3.0.4: (Error, not versioned)</li>\n-    <li>gcc-3.1.0: GLIBCPP_3.1, CXXABI_1</li>\n-    <li>gcc-3.1.1: GLIBCPP_3.1, CXXABI_1</li>\n-    <li>gcc-3.2.0: GLIBCPP_3.2, CXXABI_1.2</li>\n-    <li>gcc-3.2.1: GLIBCPP_3.2.1, CXXABI_1.2</li>\n-    <li>gcc-3.2.2: GLIBCPP_3.2.2, CXXABI_1.2</li>\n-    <li>gcc-3.2.3: GLIBCPP_3.2.2, CXXABI_1.2</li>\n-    <li>gcc-3.3.0: GLIBCPP_3.2.2, CXXABI_1.2.1</li>\n-    <li>gcc-3.3.1: GLIBCPP_3.2.3, CXXABI_1.2.1</li>\n-    <li>gcc-3.3.2: GLIBCPP_3.2.3, CXXABI_1.2.1</li>\n-    <li>gcc-3.3.3: GLIBCPP_3.2.3, CXXABI_1.2.1</li>\n-    <li>gcc-3.4.0: GLIBCXX_3.4, CXXABI_1.3</li>\n-    <li>gcc-3.4.1: GLIBCXX_3.4.1, CXXABI_1.3</li>\n-    <li>gcc-3.4.2: GLIBCXX_3.4.2</li>\n-    <li>gcc-3.4.3: GLIBCXX_3.4.3</li>\n-    <li>gcc-4.0.0: GLIBCXX_3.4.4, CXXABI_1.3.1</li>\n-    <li>gcc-4.0.1: GLIBCXX_3.4.5</li>\n-    <li>gcc-4.0.2: GLIBCXX_3.4.6</li>\n-    <li>gcc-4.0.3: GLIBCXX_3.4.7</li>\n-    <li>gcc-4.1.1: GLIBCXX_3.4.8</li>\n-    <li>gcc-4.2.0: GLIBCXX_3.4.9</li>\n-    </ul>\n-    <p></p>\n-    </li>\n-  \n-    <li>\n-    <p>Incremental bumping of a compiler pre-defined macro,\n-    __GXX_ABI_VERSION. This macro is defined as the version of the\n-    compiler v3 ABI, with g++ 3.0.x being version 100. This macro will\n-    be automatically defined whenever g++ is used (the curious can\n-    test this by invoking g++ with the '-v' flag.)\n-    </p>\n-    \n-    <p>\n-    This macro was defined in the file \"lang-specs.h\" in the gcc/cp directory.\n-    Later versions defined it in \"c-common.c\" in the gcc directory, and from\n-    G++ 3.4 it is defined in c-cppbuiltin.c and its value determined by the\n-    '-fabi-version' command line option.\n-    </p>\n-\n-    <p>\n-    It is versioned as follows, where 'n' is given by '-fabi-version=n':\n-    </p>\n-    <ul>\n-    <li>gcc-3.0.x: 100</li>\n-    <li>gcc-3.1.x: 100 (Error, should be 101)</li>\n-    <li>gcc-3.2.x: 102</li>\n-    <li>gcc-3.3.x: 102</li>\n-    <li>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: 102 (when n=1)</li>\n-    <li>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: 1000 + n (when n&gt;1)</li>\n-    <li>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: 999999 (when n=0)</li>\n-    </ul>\n-    <p></p>\n-    </li>\n-\n-    <li>\n-    <p>Changes to the default compiler option for\n-    <code>-fabi-version</code>.\n-    </p>\n-   <p>\n-    It is versioned as follows:\n-    </p>\n-    <ul>\n-    <li>gcc-3.0.x: (Error, not versioned) </li>\n-    <li>gcc-3.1.x: (Error, not versioned) </li>\n-    <li>gcc-3.2.x: <code>-fabi-version=1</code></li>\n-    <li>gcc-3.3.x: <code>-fabi-version=1</code></li>\n-    <li>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: <code>-fabi-version=2</code></li>\n-    </ul>\n-    <p></p>\n-    </li>\n-\n-   <li>\n-    <p>Incremental bumping of a library pre-defined macro. For releases\n-    before 3.4.0, the macro is __GLIBCPP__. For later releases, it's\n-    __GLIBCXX__. (The libstdc++ project generously changed from CPP to\n-    CXX throughout its source to allow the \"C\" pre-processor the CPP\n-    macro namespace.) These macros are defined as the date the library\n-    was released, in compressed ISO date format, as an unsigned long.\n-    </p>\n-\n-    <p>\n-    This macro is defined in the file \"c++config\" in the\n-    \"libstdc++/include/bits\" directory. (Up to gcc-4.1.0, it was\n-    changed every night by an automated script. Since gcc-4.1.0, it is\n-    the same value as gcc/DATESTAMP.)\n-    </p>\n-    <p>\n-    It is versioned as follows:\n-    </p>\n-    <ul>\n-    <li>gcc-3.0.0: 20010615</li>\n-    <li>gcc-3.0.1: 20010819</li>\n-    <li>gcc-3.0.2: 20011023</li>\n-    <li>gcc-3.0.3: 20011220</li>\n-    <li>gcc-3.0.4: 20020220</li>\n-    <li>gcc-3.1.0: 20020514</li>\n-    <li>gcc-3.1.1: 20020725</li>\n-    <li>gcc-3.2.0: 20020814</li>\n-    <li>gcc-3.2.1: 20021119</li>\n-    <li>gcc-3.2.2: 20030205</li>\n-    <li>gcc-3.2.3: 20030422</li>\n-    <li>gcc-3.3.0: 20030513</li>\n-    <li>gcc-3.3.1: 20030804</li>\n-    <li>gcc-3.3.2: 20031016</li>\n-    <li>gcc-3.3.3: 20040214</li>\n-    <li>gcc-3.4.0: 20040419</li>\n-    <li>gcc-3.4.1: 20040701</li>\n-    <li>gcc-3.4.2: 20040906</li>\n-    <li>gcc-3.4.3: 20041105</li>\n-    <li>gcc-3.4.4: 20050519</li>\n-    <li>gcc-3.4.5: 20051201</li>\n-    <li>gcc-3.4.6: 20060306</li>\n-    <li>gcc-4.0.0: 20050421</li>\n-    <li>gcc-4.0.1: 20050707</li>\n-    <li>gcc-4.0.2: 20050921</li>\n-    <li>gcc-4.0.3: 20060309</li>\n-    <li>gcc-4.1.0: 20060228</li>\n-    <li>gcc-4.1.1: 20060524</li>\n-    <li>gcc-4.1.2: 20070214</li>\n-    <li>gcc-4.2.0: 20070514</li>\n-    </ul>\n-    <p></p>\n-    </li>\n-\n-    <li>\n-    <p>\n-    Incremental bumping of a library pre-defined macro,\n-    _GLIBCPP_VERSION. This macro is defined as the released version of\n-    the library, as a string literal. This is only implemented in\n-    gcc-3.1.0 releases and higher, and is deprecated in 3.4 (where it\n-    is called _GLIBCXX_VERSION).\n-    </p>\n-\n-    <p>\n-    This macro is defined in the file \"c++config\" in the\n-    \"libstdc++/include/bits\" directory and is generated\n-    automatically by autoconf as part of the configure-time generation\n-    of config.h.\n-    </p>\n-\n-    <p>\n-    It is versioned as follows:\n-    </p>\n-    <ul>\n-    <li>gcc-3.0.0: \"3.0.0\"</li>\n-    <li>gcc-3.0.1: \"3.0.0\" (Error, should be \"3.0.1\")</li>\n-    <li>gcc-3.0.2: \"3.0.0\" (Error, should be \"3.0.2\")</li>\n-    <li>gcc-3.0.3: \"3.0.0\" (Error, should be \"3.0.3\")</li>\n-    <li>gcc-3.0.4: \"3.0.0\" (Error, should be \"3.0.4\")</li>\n-    <li>gcc-3.1.0: \"3.1.0\"</li>\n-    <li>gcc-3.1.1: \"3.1.1\"</li>\n-    <li>gcc-3.2.0: \"3.2\"</li>\n-    <li>gcc-3.2.1: \"3.2.1\"</li>\n-    <li>gcc-3.2.2: \"3.2.2\"</li>\n-    <li>gcc-3.2.3: \"3.2.3\"</li>\n-    <li>gcc-3.3.0: \"3.3\"</li>\n-    <li>gcc-3.3.1: \"3.3.1\"</li>\n-    <li>gcc-3.3.2: \"3.3.2\"</li>\n-    <li>gcc-3.3.3: \"3.3.3\"</li>\n-    <li>gcc-3.4.x: \"version-unused\"</li>\n-    <li>gcc-4.0.x: \"version-unused\"</li>\n-    <li>gcc-4.1.x: \"version-unused\"</li>\n-    <li>gcc-4.2.x: \"version-unused\"</li>\n-    </ul>\n-    <p></p>\n-    </li>\n-\n-    <li>\n-    <p>\n-    Matching each specific C++ compiler release to a specific set of\n-    C++ include files. This is only implemented in gcc-3.1.1 releases\n-    and higher.\n-    </p>\n-    <p>\n-    All C++ includes are installed in include/c++, then nest in a\n-    directory hierarchy corresponding to the C++ compiler's released\n-    version. This version corresponds to the variable \"gcc_version\" in\n-    \"libstdc++/acinclude.m4,\" and more details can be found in that\n-    file's macro GLIBCXX_CONFIGURE (GLIBCPP_CONFIGURE before gcc-3.4.0).\n-    </p>\n-    <p>\n-    C++ includes are versioned as follows:\n-    </p>\n-    <ul>\n-    <li>gcc-3.0.0: include/g++-v3</li>\n-    <li>gcc-3.0.1: include/g++-v3</li>\n-    <li>gcc-3.0.2: include/g++-v3</li>\n-    <li>gcc-3.0.3: include/g++-v3</li>\n-    <li>gcc-3.0.4: include/g++-v3</li>\n-    <li>gcc-3.1.0: include/g++-v3</li>\n-    <li>gcc-3.1.1: include/c++/3.1.1</li>\n-    <li>gcc-3.2.0: include/c++/3.2</li>\n-    <li>gcc-3.2.1: include/c++/3.2.1</li>\n-    <li>gcc-3.2.2: include/c++/3.2.2</li>\n-    <li>gcc-3.2.3: include/c++/3.2.3</li>\n-    <li>gcc-3.3.0: include/c++/3.3</li>\n-    <li>gcc-3.3.1: include/c++/3.3.1</li>\n-    <li>gcc-3.3.2: include/c++/3.3.2</li>\n-    <li>gcc-3.3.3: include/c++/3.3.3</li>\n-    <li>gcc-3.4.0: include/c++/3.4.0</li>\n-    <li>gcc-3.4.1: include/c++/3.4.1</li>\n-    <li>gcc-3.4.2: include/c++/3.4.2</li>\n-    <li>gcc-3.4.3: include/c++/3.4.3</li>\n-    <li>gcc-3.4.4: include/c++/3.4.4</li>\n-    <li>gcc-3.4.5: include/c++/3.4.5</li>\n-    <li>gcc-3.4.6: include/c++/3.4.6</li>\n-    <li>gcc-4.0.0: include/c++/4.0.0</li>\n-    <li>gcc-4.0.1: include/c++/4.0.1</li>\n-    <li>gcc-4.0.2: include/c++/4.0.2</li>\n-    <li>gcc-4.0.3: include/c++/4.0.3</li>\n-    <li>gcc-4.1.0: include/c++/4.1.0</li>\n-    <li>gcc-4.1.1: include/c++/4.1.1</li>\n-    <li>gcc-4.1.2: include/c++/4.1.2</li>\n-    <li>gcc-4.2.0: include/c++/4.2.0</li>\n-    </ul>\n-    <p></p>\n-    </li>\n-  </ul>\n-<p>\n-  Taken together, these techniques can accurately specify interface\n-  and implementation changes in the GNU C++ tools themselves. Used\n-  properly, they allow both the GNU C++ tools implementation, and\n-  programs using them, an evolving yet controlled development that\n-  maintains backward compatibility.\n-</p>\n-\n-\n-\n-<h5 class=\"left\">\n-  <a name=\"requirements\"> Minimum requirements for a versioned ABI </a>\n-</h5>\n-<p>\n-  Minimum environment that supports a versioned ABI: A supported\n-  dynamic linker, a GNU linker of sufficient vintage to understand\n-  demangled C++ name globbing (ld), a shared executable compiled with\n-  g++, and shared libraries (libgcc_s, libstdc++) compiled by a\n-  compiler (g++) with a compatible ABI. Phew.\n-</p>\n-\n-<p>\n-  On top of all that, an additional constraint: libstdc++ did not\n-  attempt to version symbols (or age gracefully, really) until version\n-  3.1.0. \n-</p>\n-\n-<p>\n-  Most modern Linux and BSD versions, particularly ones using\n-  gcc-3.1.x tools and more recent vintages, will meet the requirements above.\n-</p>\n-\n-\n-<h5 class=\"left\">\n-  <a name=\"config\"> What configure options impact symbol versioning? </a>\n-</h5>\n-<p>\n-  It turns out that most of the configure options that change default\n-  behavior will impact the mangled names of exported symbols, and thus\n-  impact versioning and compatibility.\n-</p>\n-\n-<p>\n-  For more information on configure options, including ABI impacts, see:\n-  http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html\n-</p>\n-\n-<p>\n-  There is one flag that explicitly deals with symbol versioning:\n-  --enable-symvers. \n-</p>\n-\n-<p>\n-  In particular, libstdc++/acinclude.m4 has a macro called\n-  GLIBCXX_ENABLE_SYMVERS that defaults to yes (or the argument passed\n-  in via --enable-symvers=foo). At that point, the macro attempts to\n-  make sure that all the requirement for symbol versioning are in\n-  place. For more information, please consult acinclude.m4. \n-</p>\n-\n-\n-<h5 class=\"left\">\n-  <a name=\"active\"> How to tell if symbol versioning is, indeed, active? </a>\n-</h5>\n-<p>\n-  When the GNU C++ library is being built with symbol versioning on,\n-  you should see the following at configure time for libstdc++:\n-</p>\n-\n-\n-<code>  checking versioning on shared library symbols... gnu</code>\n-\n-<p>\n-  If you don't see this line in the configure output, or if this line\n-  appears but the last word is 'no', then you are out of luck.\n-</p>\n-\n-<p>\n-  If the compiler is pre-installed, a quick way to test is to compile\n-  the following (or any) simple C++ file and link it to the shared\n-  libstdc++ library:\n-</p>\n-\n-<pre>\n-#include &lt;iostream&gt;\n-\n-int main()\n-{ std::cout &lt;&lt; \"hello\" &lt;&lt; std::endl; return 0; }\n-\n-%g++ hello.cc -o hello.out\n-\n-%ldd hello.out\n-        libstdc++.so.5 =&gt; /usr/lib/libstdc++.so.5 (0x00764000)\n-        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x004a8000)\n-        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x40016000)\n-        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x0036d000)\n-        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n-\n-%nm hello.out\n-</pre>\n-\n-<p>\n-If you see symbols in the resulting output with \"GLIBCXX_3\" as part\n-of the name, then the executable is versioned. Here's an example:\n-</p>\n-\n-   <code>      U _ZNSt8ios_base4InitC1Ev@@GLIBCXX_3.4 </code>\n-\n-<h3 class=\"left\">\n-  <a name=\"ABI_allowed\">Library allowed ABI changes</a>\n-</h3>\n-<p>\n-The following will cause the library minor version number to\n-increase, say from \"libstdc++.so.3.0.4\" to \"libstdc++.so.3.0.5\".\n-</p>\n-<ul>\n- <li>adding an exported global or static data member</li>\n- <li>adding an exported function, static or non-virtual member function</li>\n- <li>adding an exported symbol or symbols by additional instantiations</li>\n-</ul>\n-<p>\n-</p>\n-<p>\n-Other allowed changes are possible.\n-</p>\n-\n-\n-<h3 class=\"left\">\n-  <a name=\"ABI_disallowed\">Library disallowed ABI changes</a>\n-</h3>\n-\n-<p>\n-The following non-exhaustive list will cause the library major version\n-number to increase, say from \"libstdc++.so.3.0.4\" to\n-\"libstdc++.so.4.0.0\".\n-</p>\n-<ul>\n- <li>changes in the gcc/g++ compiler ABI</li>\n-<li>changing size of an exported symbol</li>\n-<li>changing alignment of an exported symbol</li>\n-<li>changing the layout of an exported symbol</li>\n-<li>changing mangling on an exported symbol</li>\n-<li>deleting an exported symbol</li>\n-<li>changing the inheritance properties of a type by adding or removing\n-    base classes</li>\n-<li>\n-  changing the size, alignment, or layout of types\n-  specified in the C++ standard. These may not necessarily be\n-  instantiated or otherwise exported in the library binary, and\n-  include all the required locale facets, as well as things like\n-  std::basic_streambuf, et al.\n-</li>\n-\n-<li> adding an explicit copy constructor or destructor to a\n-class that would otherwise have implicit versions. This will change\n-the way the compiler deals with this class in by-value return\n-statements or parameters: instead of being passing instances of this\n-class in registers, the compiler will be forced to use memory. See <a\n-href=\"http://www.codesourcery.com/cxx-abi/abi.html#calls\"> this part</a>\n- of the C++ ABI documentation for further details. \n- </li>\n-\n-</ul>\n-\n-<h3 class=\"left\">\n-  <a name=\"implementation\">Library implementation strategy</a> </h3>\n-\n-<ul>\n- <li>Separation of interface and implementation\n-<p>This is accomplished by two techniques that separate the API from\n-the ABI: forcing undefined references to link against a library binary\n-for definitions.\n-</p>\n-\n- <dl>\n-  <dt>Include files have declarations, source files have defines</dt>\n-\n-   <dd> For non-templatized types, such as much of <code>class\n-   locale</code>, the appropriate standard C++ include, say\n-   <code>locale</code>, can contain full declarations, while various\n-   source files (say <code> locale.cc, locale_init.cc,\n-   localename.cc</code>) contain definitions.</dd>\n-\n-  <dt>Extern template on required types</dt>\n-\n-   <dd>For parts of the standard that have an explicit list of required\n-   instantiations, the GNU extension syntax <code> extern template\n-   </code> can be used to control where template definitions\n-   reside. By marking required instantiations as <code> extern\n-   template </code> in include files, and providing explicit\n-   instantiations in the appropriate instantiation files, non-inlined\n-   template functions can be versioned. This technique is mostly used\n-   on parts of the standard that require <code> char</code> and <code>\n-   wchar_t</code> instantiations, and includes <code>\n-   basic_string</code>, the locale facets, and the types in <code>\n-   iostreams</code>.</dd>\n-\n- </dl>\n- <p> In addition, these techniques have the additional benefit that\n- they reduce binary size, which can increase runtime performance.\n- </p>\n- </li>\n-\n- <li>Namespaces linking symbol definitions to export mapfiles\n-\n-<p>All symbols in the shared library binary are processed by a linker\n-script at build time that either allows or disallows external\n-linkage. Because of this, some symbols, regardless of normal C/C++\n-linkage, are not visible. Symbols that are internal have several\n-appealing characteristics: by not exporting the symbols, there are no\n-relocations when the shared library is started and thus this makes for\n-faster runtime loading performance by the underlying dynamic loading\n-mechanism. In addition, they have the possibility of changing without\n-impacting ABI compatibility.\n-</p>\n-\n-<p>The following namespaces are transformed by the mapfile:</p>\n-\n-<dl>\n-<dt><code>namespace std</code></dt>\n-<dd> Defaults to exporting all symbols in label\n-<code>GLIBCXX</code> that do not begin with an underscore, ie\n-<code>__test_func</code> would not be exported by default. Select\n-exceptional symbols are allowed to be visible.</dd>\n-\n-<dt><code>namespace __gnu_cxx</code></dt>\n-<dd> Defaults to not exporting any symbols in label\n-<code>GLIBCXX</code>, select items are allowed to be visible.</dd>\n-\n-<dt><code>namespace __gnu_internal</code></dt>\n-<dd> Defaults to not exported, no items are allowed to be visible.</dd>\n-\n-<dt><code>namespace __cxxabiv1</code>, aliased to <code> namespace abi</code></dt>\n-<dd> Defaults to not exporting any symbols in label\n-<code>CXXABI</code>, select items are allowed to be visible.</dd>\n-</dl>\n-<p>\n-</p>\n-</li>\n-\n- <li>Freezing the API\n- <p>Disallowed changes, as above, are not made on a stable release\n-branch. Enforcement tends to be less strict with GNU extensions that\n-standard includes.</p>\n-</li>\n-</ul>\n-\n-<h3 class=\"left\">\n-  <a name=\"ABI_testing\">Testing ABI changes</a>\n-</h3>\n-\n-<p>\n-Testing for GNU C++ ABI changes is composed of two distinct areas:\n-testing the C++ compiler (g++) for compiler changes, and testing the\n-C++ library (libstdc++) for library changes.\n-</p>\n-\n-<p>\n-Testing the C++ compiler ABI can be done various ways.\n-</p>\n-\n-<p>\n-One. \n-Intel ABI checker. More information can be obtained\n-<a href=\"http://developer.intel.com/software/products/opensource/\">here.</a>\n-</p>\n-\n-<p>\n-Two.\n-The second is yet unreleased, but has been announced on the gcc\n-mailing list. It is yet unspecified if these tools will be freely\n-available, and able to be included in a GNU project. Please contact\n-Mark Mitchell (mark@codesourcery.com) for more details, and current\n-status.\n-</p>\n-\n-<p>\n-Three.\n-Involves using the vlad.consistency test framework. This has also been\n-discussed on the gcc mailing lists.\n-</p>\n-\n-<p>\n-Testing the C++ library ABI can also be done various ways.\n-</p>\n-\n-<p>\n-One. \n-(Brendan Kehoe, Jeff Law suggestion to run 'make check-c++' two ways, \n-one with a new compiler and an old library, and the other with an old\n-compiler and a new library, and look for testsuite regressions)\n-</p>\n-\n-<p>\n-Details on how to set this kind of test up can be found here:\n-http://gcc.gnu.org/ml/gcc/2002-08/msg00142.html\n-</p>\n-\n-<p>\n-Two.  \n-Use the 'make check-abi' rule in the libstdc++ Makefile. \n-</p>\n-\n-<p>\n-This is a proactive check the library ABI. Currently, exported symbol\n-names that are either weak or defined are checked against a last known\n-good baseline. Currently, this baseline is keyed off of 3.4.0\n-binaries, as this was the last time the .so number was incremented. In\n-addition, all exported names are demangled, and the exported objects\n-are checked to make sure they are the same size as the same object in\n-the baseline.\n-\n-Notice that each baseline is relative to a <strong>default</strong>\n-configured library and compiler: in particular, if options such as\n---enable-clocale, or --with-cpu, in case of multilibs, are used at\n-configure time, the check may fail, either because of substantive\n-differences or because of limitations of the current checking\n-machinery.\n-</p>\n-\n-<p>\n-This dataset is insufficient, yet a start. Also needed is a\n-comprehensive check for all user-visible types part of the standard\n-library for sizeof() and alignof() changes. \n-</p>\n-\n-<p>\n-Verifying compatible layouts of objects is not even attempted.  It\n-should be possible to use sizeof, alignof, and offsetof to compute\n-offsets for each structure and type in the standard library, saving to\n-another datafile. Then, compute this in a similar way for new\n-binaries, and look for differences.\n-</p>\n-\n-<p>\n-Another approach might be to use the -fdump-class-hierarchy flag to\n-get information. However, currently this approach gives insufficient\n-data for use in library testing, as class data members, their offsets,\n-and other detailed data is not displayed with this flag.\n-(See g++/7470 on how this was used to find bugs.)\n-</p>\n-\n-<p>\n-Perhaps there are other C++ ABI checkers. If so, please notify\n-us. We'd like to know about them!\n-</p>\n-\n-<h3 class=\"left\">\n-  <a name=\"ABI_multi_testing\">Testing Multi-ABI binaries</a>\n-</h3>\n-\n-<p>\n-A \"C\" application, dynamically linked to two shared libraries, liba,\n-libb. The dependent library liba is C++ shared library compiled with\n-gcc-3.3.x, and uses io, exceptions, locale, etc. The dependent library\n-libb is a C++ shared library compiled with gcc-3.4.x, and also uses io,\n-exceptions, locale, etc.\n-</p>\n-\n-<p> As above, libone is constructed as follows: </p>\n-<pre>\n-%$bld/H-x86-gcc-3.4.0/bin/g++ -fPIC -DPIC -c a.cc\n-\n-%$bld/H-x86-gcc-3.4.0/bin/g++ -shared -Wl,-soname -Wl,libone.so.1 -Wl,-O1 -Wl,-z,defs a.o -o libone.so.1.0.0\n-\n-%ln -s libone.so.1.0.0 libone.so\n-\n-%$bld/H-x86-gcc-3.4.0/bin/g++ -c a.cc\n-\n-%ar cru libone.a a.o \n-</pre>\n-\n-<p> And, libtwo is constructed as follows: </p>\n-\n-<pre>\n-%$bld/H-x86-gcc-3.3.3/bin/g++ -fPIC -DPIC -c b.cc\n-\n-%$bld/H-x86-gcc-3.3.3/bin/g++ -shared -Wl,-soname -Wl,libtwo.so.1 -Wl,-O1 -Wl,-z,defs b.o -o libtwo.so.1.0.0\n-\n-%ln -s libtwo.so.1.0.0 libtwo.so\n-\n-%$bld/H-x86-gcc-3.3.3/bin/g++ -c b.cc\n-\n-%ar cru libtwo.a b.o \n-</pre>\n-\n-<p> ...with the resulting libraries looking like </p>\n-<pre>\n-%ldd libone.so.1.0.0\n-        libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x40016000)\n-        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x400fa000)\n-        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x4011c000)\n-        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x40125000)\n-        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n-\n-%ldd libtwo.so.1.0.0\n-        libstdc++.so.5 =&gt; /usr/lib/libstdc++.so.5 (0x40027000)\n-        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x400e1000)\n-        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x40103000)\n-        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x4010c000)\n-        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n-\n-</pre>\n-\n-<p> Then, the \"C\" compiler is used to compile a source file that uses\n-functions from each library.</p>\n-<pre>\n-gcc test.c -g -O2 -L. -lone -ltwo /usr/lib/libstdc++.so.5 /usr/lib/libstdc++.so.6\n-</pre>\n-\n-<p>\n-Which gives the expected:\n-</p>\n-<pre>\n-%ldd a.out\n-        libstdc++.so.5 =&gt; /usr/lib/libstdc++.so.5 (0x00764000)\n-        libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x40015000)\n-        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x0036d000)\n-        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x004a8000)\n-        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x400e5000)\n-        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n-</pre>\n-\n-<p>\n-This resulting binary, when executed, will be able to safely use code\n-from both liba, and the dependent libstdc++.so.6, and libb, with the\n-dependent libstdc++.so.5.\n-</p>\n-\n-\n-<h3 class=\"left\">\n-  <a name=\"Outstanding Issues\">Outstanding Issues</a>\n-</h3>\n-\n-<p> Some features in the C++ language make versioning especially\n-difficult. In particular, compiler generated constructs such as\n-implicit instantiations for templates, typeinfo information, and\n-virtual tables all may cause ABI leakage across shared library\n-boundaries. Because of this, mixing C++ ABI's is not recommended at\n-this time.\n-</p>\n-\n-<p>For more background on this issue, see these bugzilla entries:</p>\n-\n-<p>\n-<a href=\"http://gcc.gnu.org/PR24660\">24660: versioning weak symbols in libstdc++</a>\n-</p>\n-\n-<p>\n-<a href=\"http://gcc.gnu.org/PR19664\">19664: libstdc++ headers should have pop/push of the visibility around the declarations</a>\n-</p>\n-\n-<h3 class=\"left\">\n-  <a name=\"references\">Bibliography / Further Reading</a>\n-</h3>\n-\n-<p>\n-ABIcheck, a vague idea of checking ABI compatibility\n-<br />\n-<a href=\"http://abicheck.sourceforge.net/\">http://abicheck.sourceforge.net/</a>\n-</p>\n-\n-<p>\n-C++ ABI reference\n-<br />\n-<a href=\"http://www.codesourcery.com/cxx-abi/\">http://www.codesourcery.com/cxx-abi/</a>\n-</p>\n-\n-<p>\n-Intel ABI documentation, \"Intel\ufffd Compilers for Linux* -Compatibility with the GNU Compilers\"\n-<br />\n-<a href=\"http://developer.intel.com/software/products/compilers/techtopics/LinuxCompilersCompatibility.htm\">http://developer.intel.com/software/products/compilers/techtopics/LinuxCompilersCompatibility.htm</a>\n-</p>\n-\n-<p>\n-Sun Solaris 2.9 docs\n-<br />\n-Linker and Libraries Guide (document 816-1386)\n-<br />\n-C++ Migration Guide (document 816-2459)\n-<br />\n-<a href=\"http://docs.sun.com/db/prod/solaris.9\">http://docs.sun.com/db/prod/solaris.9</a>\n-<br />\n-<a href=\"http://docs.sun.com/?p=/doc/816-1386&amp;a=load\">http://docs.sun.com/?p=/doc/816-1386&amp;a=load</a>\n-</p>\n-\n-<p>\n-Ulrich Drepper, \"ELF Symbol Versioning\"\n-<br />\n-<a href=\"http://people.redhat.com/drepper/symbol-versioning\">http://people.redhat.com/drepper/symbol-versioning</a>\n-</p>\n-\n-<p>\n-C++ ABI for the ARM Architecture\n-<br />\n-<a href=\"http://www.arm.com/miscPDFs/8033.pdf\">http://www.arm.com/miscPDFs/8033.pdf</a>\n-</p>\n-\n-<p>\n-Benjamin Kosnik, ISO C++ J16/06-0046\n-<br />\n-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1976.html\">Dynamic Shared Objects: Survey and Issues</a>\n-</p>\n-\n-<p>\n-Benjamin Kosnik, ISO C++ J16/06-0083\n-<br />\n-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2013.html\">Versioning With Namespaces</a>\n-</p>\n-\n-</body>\n-</html>\n-"}, {"sha": "1d1e36d90d2e44d750ac06d19766d331685a8153", "filename": "libstdc++-v3/doc/html/17_intro/api.html", "status": "removed", "additions": 0, "deletions": 290, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fapi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fapi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fapi.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,290 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta name=\"AUTHOR\" content=\"bkoz@gcc.gnu.org (Benjamin Kosnik)\" />\n-   <meta name=\"KEYWORDS\" content=\"C++, libstdc++, API, evolution, deprecate\" />\n-   <meta name=\"DESCRIPTION\" content=\"API evolution and deprecation history\" />\n-   <meta name=\"GENERATOR\" content=\"emacs and ten fingers\" />\n-   <title>API Evolution and Deprecation History</title>\n-<link rel=\"StyleSheet\" href=\"lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Copyright\" href=\"17_intro/license.html\" type=\"text/html\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">API Evolution and Deprecation History</a></h1>\n-\n-<p class=\"fineprint\"><em>\n-   The latest version of this document is always available at\n-   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/api.html\">\n-   http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/api.html</a>.\n-</em></p>\n-\n-<p><em>\n-   To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++ homepage</a>.\n-</em></p>\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<h3 class=\"left\">\n-  <a name=\"intro\">API Evolution, Deprecation, and History of User Visible Changes</a>\n-</h3>\n-\n-<p> A list of user-visible changes, by release version.\n-</p>\n-\n-<h3 class=\"left\">\n-  <a name=\"3.0\">3.0</a>\n-</h3>\n-\n-<p>\n-Extensions moved to <code>include/ext</code>.\n-</p>\n-\n-<p>\n-Include files from the SGI/HP sources that pre-date the ISO standard\n-are added. These files are placed into\n-the <code>include/backward</code> directory and a deprecated warning\n-is added that notifies on inclusion (<code>-Wno-deprecated</code>\n-deactivates the warning.)\n-</p>\n-\n-<p>Deprecated include &lt;backward/strstream&gt; added.</p>\n-\n-<p>Removal of include &lt;builtinbuf.h&gt;, &lt;indstream.h&gt;, &lt;parsestream.h&gt;, &lt;PlotFile.h&gt;, &lt;SFile.h&gt;, &lt;stdiostream.h&gt;, and &lt;stream.h&gt;.</p>\n-\n-\n-<h3 class=\"left\">\n-  <a name=\"3.1\">3.1</a>\n-</h3>\n-\n-<p>\n-Extensions from SGI/HP moved from <code>namespace std</code>\n-to <code>namespace __gnu_cxx</code>. As part of this, the following\n-new includes are\n-added: &lt;ext/algorithm&gt;, &lt;ext/functional&gt;, &lt;ext/iterator&gt;, &lt;ext/memory&gt;, and &lt;ext/numeric&gt;.\n-</p>\n-\n-<p>\n-Extensions to <code>basic_filebuf</code> introduced: <code>__gnu_cxx::enc_filebuf</code>, and <code>__gnu_cxx::stdio_filebuf</code>.\n-</p>\n-\n-<p>\n-Extensions to tree data structures added in &lt;ext/rb_tree&gt;.\n-</p>\n-\n-<p>\n-Removal of &lt;ext/tree&gt;, moved to &lt;backward/tree.h&gt;.\n-</p>\n-\n-\n-<h3 class=\"left\">\n-  <a name=\"3.2\">3.2</a>\n-</h3>\n-<p>Symbol versioning introduced for shared library.</p>\n-\n-<p>Removal of include &lt;backward/strstream.h&gt;.</p>\n-\n-<h3 class=\"left\">\n-  <a name=\"3.3\">3.3</a>\n-</h3>\n-<p>Allocator changes. Change <code>__malloc_alloc</code> to <code>malloc_allocator</code> and <code>__new_alloc</code> to <code>new_allocator</code>. </p>\n-\n-<p>Error handling in iostreams cleaned up, made consistent. </p>\n-\n-\n-<h3 class=\"left\">\n-  <a name=\"3.4\">3.4</a>\n-</h3>\n-<p>\n-Large file support.\n-</p>\n-\n-<p> Extensions for generic characters and <code>char_traits</code> added in &lt;ext/pod_char_traits.h&gt;.\n-</p>\n-\n-<p>\n-Support for <code>wchar_t</code> specializations of <code>basic_filebuf</code> enhanced to support <code>UTF-8</code> and <code>Unicode</code>, depending on host. More hosts support basic <code>wchar_t</code> functionality.\n-</p>\n-\n-<p>\n-Support for <code>char_traits</code> beyond builtin types.\n-</p>\n-\n-<p>\n-Conformant <code>allocator</code> class and usage in containers. As\n-part of this, the following extensions are\n-added: &lt;ext/bitmap_allocator.h&gt;, &lt;ext/debug_allocator.h&gt;, &lt;ext/mt_allocator.h&gt;, &lt;ext/malloc_allocator.h&gt;,&lt;ext/new_allocator.h&gt;, &lt;ext/pool_allocator.h&gt;.\n-</p>\n-\n-\n-<p>\n-Debug mode first appears.\n-</p>\n-\n-<p>\n-PCH support.\n-</p>\n-\n-<p>\n-Macro guard for libstdc++ changed, from _GLIBCPP_ to _GLIBCXX_.\n-</p>\n-\n-<p>\n-Extension &lt;ext/stdio_sync_filebuf.h&gt; added.\n-</p>\n-\n-<p>\n-Extension &lt;ext/demangle.h&gt; added.\n-</p>\n-\n-\n-<h3 class=\"left\">\n-  <a name=\"4.0\">4.0</a>\n-</h3>\n-<p>\n-TR1 features first appear.\n-</p>\n-\n-<p>\n-Extension allocator &lt;ext/array_allocator.h&gt; added.\n-</p>\n-\n-<p>\n-Extension <code>codecvt</code> specializations moved to &lt;ext/codecvt_specializations.h&gt;.\n-</p>\n-\n-<p>\n-Removal of &lt;ext/demangle.h&gt;.\n-</p>\n-\n-\n-<h3 class=\"left\">\n-  <a name=\"4.1\">4.1</a>\n-</h3>\n-\n-<p>\n-Removal of &lt;cassert&gt; from all standard headers: now has to be explicitly included for <code>std::assert</code> calls.\n-</p>\n-\n-<p> Extensions for policy-based data structures first added. New includes,\n-types, namespace <code>pb_assoc</code>.\n-</p>\n-\n-\n-\n-<p> Extensions for typelists added in &lt;ext/typelist.h&gt;.\n-</p>\n-\n-<p> Extension for policy-based <code>basic_string</code> first added: <code>__gnu_cxx::__versa_string</code> in &lt;ext/vstring.h&gt;.\n-</p>\n-\n-<h3 class=\"left\">\n-  <a name=\"4.2\">4.2</a>\n-</h3>\n-\n-<p> Default visibility attributes applied to <code>namespace std</code>. Support for <code>-fvisibility</code>.\n-</p>\n-\n-<p>TR1 &lt;random&gt;, &lt;complex&gt;, and C compatibility headers added.</p>\n-\n-<p> Extensions for concurrent programming consolidated\n-into &lt;ext/concurrence.h&gt; and &lt;ext/atomicity.h&gt;,\n-including change of namespace to <code>__gnu_cxx</code> in some\n-cases. Added types\n-include <code>_Lock_policy</code>, <code>__concurrence_lock_error</code>, <code>__concurrence_unlock_error</code>, <code>__mutex</code>, <code>__scoped_lock</code>.</p>\n-\n-<p> Extensions for type traits consolidated\n-into &lt;ext/type_traits.h&gt;. Additional traits are added\n-(<code>__conditional_type</code>, <code>__enable_if</code>, others.)\n-</p>\n-\n-<p> Extensions for policy-based data structures revised. New includes,\n-types, namespace moved to <code>__pb_ds</code>.\n-</p>\n-\n-<p> Extensions for debug mode modified: now nested in <code>namespace\n-std::__debug</code> and extensions in <code>namespace\n-__gnu_cxx::__debug</code>.</p>\n-\n-<p> Extensions added: &lt;ext/typelist.h&gt;\n-and &lt;ext/throw_allocator.h&gt;.\n-</p>\n-\n-<h3 class=\"left\">\n-  <a name=\"4.3\">4.3</a>\n-</h3>\n-\n-<p>\n-C++0X features first appear.\n-</p>\n-\n-<p>TR1 &lt;regex&gt; and &lt;cmath&gt;'s mathematical special function added.</p>\n-\n-<p>\n-Backward include edit.\n-</p>\n-<ul>\n-  <li> Removed: &lt;algobase.h&gt; &lt;algo.h&gt; &lt;alloc.h&gt; &lt;bvector.h&gt; &lt;complex.h&gt;\n-defalloc.h&gt; &lt;deque.h&gt; &lt;fstream.h&gt; &lt;function.h&gt; &lt;hash_map.h&gt; &lt;hash_set.h&gt;\n-hashtable.h&gt; &lt;heap.h&gt; &lt;iomanip.h&gt; &lt;iostream.h&gt; &lt;istream.h&gt; &lt;iterator.h&gt;\n-list.h&gt; &lt;map.h&gt; &lt;multimap.h&gt; &lt;multiset.h&gt; &lt;new.h&gt; &lt;ostream.h&gt; &lt;pair.h&gt; &lt;queue.h&gt; &lt;rope.h&gt; &lt;set.h&gt; &lt;slist.h&gt; &lt;stack.h&gt; &lt;streambuf.h&gt; &lt;stream.h&gt; &lt;tempbuf.h&gt;\n-&lt;tree.h&gt; &lt;vector.h&gt;\n-  </li>\n-  <li> Added: &lt;hash_map&gt; and &lt;hash_set&gt;</li>\n-  <li> Added in C++0x: &lt;auto_ptr.h&gt; and &lt;binders.h&gt;</li>\n-</ul>\n-\n-<p>\n-Header dependency streamlining.\n-</p>\n-\n-<ul>\n-  <li>&lt;algorithm&gt; no longer includes &lt;climits&gt;, &lt;cstring&gt;, or &lt;iosfwd&gt; </li>\n-  <li>&lt;bitset&gt; no longer includes &lt;istream&gt; or &lt;ostream&gt;, adds &lt;iosfwd&gt; </li>\n-  <li>&lt;functional&gt; no longer includes &lt;cstddef&gt;</li>\n-  <li>&lt;iomanip&gt; no longer includes &lt;istream&gt;, &lt;istream&gt;, or &lt;functional&gt;, adds &lt;ioswd&gt; </li>\n-  <li>&lt;numeric&gt; no longer includes &lt;iterator&gt;</li>\n-  <li>&lt;string&gt; no longer includes &lt;algorithm&gt; or &lt;memory&gt;</li>\n-\n-  <li>&lt;valarray&gt; no longer includes &lt;numeric&gt; or &lt;cstdlib&gt;</li>\n-  <li>&lt;tr1/hashtable&gt; no longer includes &lt;memory&gt; or &lt;functional&gt;</li>\n-  <li>&lt;tr1/memory&gt; no longer includes &lt;algorithm&gt;</li>\n-  <li>&lt;tr1/random&gt; no longer includes &lt;algorithm&gt; or &lt;fstream&gt;</li>\n-</ul>\n-\n-<p>\n-Debug mode for &lt;unordered_map&gt; and &lt;unordered_set&gt;.\n-</p>\n-\n-<p>\n-Parallel mode first appears.\n-</p>\n-\n-<p>Variadic template implementations of items in &lt;tuple&gt; and\n-    &lt;functional&gt;. \n-</p>\n-\n-<p>Default <code>what</code> implementations give more elaborate\n-    exception strings for <code>bad_cast</code>,\n-    <code>bad_typeid</code>, <code>bad_exception</code>, and\n-    <code>bad_alloc</code>.\n-</p>\n-\n-<p>\n-PCH binary files no longer installed. Instead, the source files are installed. \n-</p>\n-\n-<p>\n-Namespace pb_ds moved to __gnu_pb_ds.\n-</p>\n-\n-</body>\n-</html>\n-"}, {"sha": "c9af980f0fc2b9d881f33db966e65348a92dd514", "filename": "libstdc++-v3/doc/html/17_intro/backwards_compatibility.html", "status": "removed", "additions": 0, "deletions": 1073, "changes": 1073, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fbackwards_compatibility.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fbackwards_compatibility.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fbackwards_compatibility.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,1073 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta name=\"AUTHOR\" content=\"bkoz@gcc.gnu.org (Benjamin Kosnik), Felix Natter\" />\n-   <meta name=\"KEYWORDS\" content=\"C++, libstdc++, API, backward, compatibility\" />\n-   <meta name=\"DESCRIPTION\" content=\"Backwards Compatibility\" />\n-   <meta name=\"GENERATOR\" content=\"emacs and ten fingers\" />\n-   <title>Backwards Compatibility</title>\n-<link rel=\"StyleSheet\" href=\"lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Copyright\" href=\"17_intro/license.html\" type=\"text/html\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Backwards Compatibility</a></h1>\n-\n-<p class=\"fineprint\"><em>\n-   The latest version of this document is always available at\n-   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/backwards_compatibility.html\">\n-   http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/backwards_compatibility.html</a>.\n-</em></p>\n-\n-<p><em>\n-   To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++ homepage</a>.\n-</em></p>\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h3 class=\"left\">\n-  <a name=\"v1\">First.</a>\n-</h3>\n-\n-<p> The first generation GNU C++ library was called libg++.  It was a\n-separate GNU project, although reliably paired with GCC. Rumors imply\n-that it had a working relationship with at least two kinds of\n-dinosaur.\n-</p>\n-\n-<p>Known Issues include many of the limitations of its immediate ancestor.</p> \n-\n-<p>Portability notes and known implementation limitations are as follows.</p>\n-\n-<h5>No <code>ios_base</code></h5>\n-\n-<p> At least some older implementations don't have <code>std::ios_base</code>, so you should use <code>std::ios::badbit</code>, <code>std::ios::failbit</code> and <code>std::ios::eofbit</code> and <code>std::ios::goodbit</code>.\n-</p>\n-\n-<h5>No <code>cout</code> in <code>ostream.h</code>, no <code>cin</code> in <code>istream.h</code></h5>\n-\n-<p>\n-\tIn earlier versions of the standard,\n-\t<tt>&lt;fstream.h&gt;</tt>,\n-\t<tt>&lt;ostream.h&gt;</tt>\n-\tand <tt>&lt;istream.h&gt;</tt>\n-\tused to define\n-\t<code>cout</code>, <code>cin</code> and so on. ISO C++ specifies that one needs to include\n-\t<tt>&lt;iostream&gt;</tt>\n-\texplicitly to get the required definitions.\n- </p>\n-<p> Some include adjustment may be required.</p>\n-\n-\n-<p>This project is no longer maintained or supported, and the sources\n-archived.  The code is considered replaced and rewritten.\n-</p>\n-\n-<hr />\n-<h3 class=\"left\">\n-  <a name=\"v2\">Second.</a>\n-</h3>\n-<p> The second generation GNU C++ library was called libstdc++, or\n-libstdc++-v2. It spans the time between libg++ and pre-ISO C++\n-standardization and is usually associated with the following GCC\n-releases: egcs 1.x, gcc 2.95, and gcc 2.96.\n-</p>\n-\n-<p> The STL portions of this library are based on SGI/HP STL release 3.11.\n-</p>\n-\n-<p>Portability notes and known implementation limitations are as follows.</p>\n-\n-<h5>Namespace <code>std::</code> not supported</h5>\n-\n-<p>\n-      Some care is required to support C++ compiler and or library\n-      implementation that do not have the standard library in\n-      <code>namespace std</code>.\n-    </p>\n-<p>\n-   The following sections list some possible solutions to support compilers\n-   that cannot ignore <code>std::</code>-qualified names.\n- </p>\n-\n-<p> First, see if the compiler has a flag for this. Namespace\n-      back-portability-issues are generally not a problem for g++\n-      compilers that do not have libstdc++ in <code>std::</code>, as\n-      the compilers use <code>-fno-honor-std</code> (ignore\n-      <code>std::</code>, <code>:: = std::</code>) by default. That\n-      is, the responsibility for enabling or disabling\n-      <code>std::</code> is on the user; the maintainer does not have\n-      to care about it. This probably applies to some other compilers\n-      as well.\n-    </p>\n-\n-<p>Second, experiment with a variety of pre-processor tricks.</p>\n-\n-<p> By defining <code>std</code> as a macro, fully-qualified namespace calls become global. Volia. </p>\n-\t      \n-<pre>\n-#ifdef WICKEDLY_OLD_COMPILER\n-# define std\n-#endif\n-</pre>\n-(thanks to Juergen Heinzl who posted this solution on gnu.gcc.help)\n-\n-<p>Another pre-processor based approach is to define a\n-macro <code>NAMESPACE_STD</code>, which is defined to either\n-&quot;&quot; or &quot;std&quot; based on a compile-type test. On GNU\n-systems, this can be done with autotools by means of an autoconf test\n-(see below) for <code>HAVE_NAMESPACE_STD</code>, then using that to\n-set a value for the <code>NAMESPACE_STD</code> macro.  At that point,\n-one is able to use <code>NAMESPACE_STD::string</code>, which will\n-evaluate to <code>std::string</code> or\n-<code>::string</code> (ie, in the global namespace on systems that do\n-not put <code>string</code> in <code>std::</code>). </p>\n-\n-<pre style=\"background: #c0c0c0\">\n-dnl @synopsis AC_CXX_NAMESPACE_STD\n-dnl\n-dnl If the compiler supports namespace std, define\n-dnl HAVE_NAMESPACE_STD.\n-dnl\n-dnl @category Cxx\n-dnl @author Todd Veldhuizen\n-dnl @author Luc Maisonobe &lt;luc@spaceroots.org&gt;\n-dnl @version 2004-02-04\n-dnl @license AllPermissive\n-AC_DEFUN([AC_CXX_NAMESPACE_STD], [\n-  AC_CACHE_CHECK(if g++ supports namespace std,\n-  ac_cv_cxx_have_std_namespace,\n-  [AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  AC_TRY_COMPILE([#include &lt;iostream&gt; \n-                  std::istream&amp; is = std::cin;],,\n-  ac_cv_cxx_have_std_namespace=yes, ac_cv_cxx_have_std_namespace=no)\n-  AC_LANG_RESTORE\n-  ])\n-  if test \"$ac_cv_cxx_have_std_namespace\" = yes; then\n-    AC_DEFINE(HAVE_NAMESPACE_STD,,[Define if g++ supports namespace std. ])\n-  fi\n-])\n-</pre>\n-\n-<h5>Illegal iterator usage</h5>\n-<p>\n-      The following illustrate implementation-allowed illegal iterator\n-      use, and then correct use.  \n-</p>\n-\n-<ul> <li><p>you cannot do\n-      <code>ostream::operator&lt;&lt;(iterator)</code> to print the\n-      address of the iterator =&gt; use <code>operator&lt;&lt;\n-      &amp;*iterator</code> instead\n-\t  </p></li>\n-<li><p>you cannot clear an iterator's reference\n-\t    (<code>iterator = 0</code>) =&gt; use\n-\t    <code>iterator = iterator_type();</code>\n-\t  </p></li>\n-<li><p>\n-<code>if (iterator)</code> won't work any\n-\t    more =&gt; use <code>if (iterator != iterator_type())</code>\n-\t    </p></li>\n-</ul>\n-\n-<h5><code>isspace</code> from <tt>&lt;cctype&gt;</tt> is a macro\n-</h5>\n-\n-<p> Glibc 2.0.x and 2.1.x define <tt>&lt;ctype.h&gt;</tt>\n-functionality as macros (isspace, isalpha etc.).    \n-</p>\n-\n-<p>\n-This implementations of libstdc++, however, keep these functions as\n-macros, and so it is not back-portable to use fully qualified\n-names. For example:\n-</p>\n-\n-<pre> \n-#include &lt;cctype&gt; \n-int main() { std::isspace('X'); } \n-</pre> \n-\n-<p>Results in something like this:\n-</p>\n-\n-<pre> \n-std:: (__ctype_b[(int) ( ( 'X' ) )] &amp; (unsigned short int) _ISspace ) ; \n-</pre>\n-\n-\n-<p> A solution is to modify a header-file so that the compiler tells\n-<tt>&lt;ctype.h&gt;</tt> to define functions instead of macros:\n-</p>\n-\n-<pre>\n-// This keeps isalnum, et al from being propagated as macros. \n-#if __linux__\n-# define __NO_CTYPE 1\n-#endif\n-</pre>\n-\n-<p>Then, include &lt;ctype.h&gt;\n-</p>\n-\n-<p>\n-Another problem arises if you put a <code>using namespace std;</code>\n-declaration at the top, and include <tt>&lt;ctype.h&gt;</tt>. This\n-will result in ambiguities between the definitions in the global\n-namespace (<tt>&lt;ctype.h&gt;</tt>) and the definitions in namespace\n-<code>std::</code> (<code>&lt;cctype&gt;</code>).    \n-</p>\n-\n-<h5>No <code>vector::at</code>, <code>deque::at</code>, <code>string::at</code></h5>\n-\n-<p>\n-      One solution is to add an autoconf-test for this:\n-</p>\n-<pre style=\"background: #c0c0c0\">\n-AC_MSG_CHECKING(for container::at)\n-AC_TRY_COMPILE(\n-[\n-#include &lt;vector&gt;\n-#include &lt;deque&gt;\n-#include &lt;string&gt;\n-\t\n-using namespace std;\n-],\n-[\n-deque&lt;int&gt; test_deque(3);\n-test_deque.at(2);\n-vector&lt;int&gt; test_vector(2);\n-test_vector.at(1);\n-string test_string(&quot;test_string&quot;);\n-test_string.at(3);\n-],\n-[AC_MSG_RESULT(yes)\n-AC_DEFINE(HAVE_CONTAINER_AT)],\n-[AC_MSG_RESULT(no)])\n-</pre>\n-\n-<p>\n-If you are using other (non-GNU) compilers it might be a good idea\n-to check for <code>string::at</code> separately.\n-</p>\n-\n-<h5>No <code>std::char_traits&lt;char&gt;::eof</code></h5>\n-\n-<p>\n-Use some kind of autoconf test, plus this:\n-</p>      \n-<pre> \n-#ifdef HAVE_CHAR_TRAITS\n-#define CPP_EOF std::char_traits&lt;char&gt;::eof()\n-#else\n-#define CPP_EOF EOF\n-#endif\n-</pre>\n-\n-<h5>No <code>string::clear</code></h5>\n-\n-<p>\n-      There are two functions for deleting the contents of a string:\n-      <code>clear</code> and <code>erase</code> (the latter\n-      returns the string).\n-</p>\n-      \n-<pre>\n-void \n-clear() { _M_mutate(0, this-&gt;size(), 0); }\n-</pre>\n-<pre>\n-basic_string&amp; \n-erase(size_type __pos = 0, size_type __n = npos)\n-{ \n-  return this-&gt;replace(_M_check(__pos), _M_fold(__pos, __n),\n-                          _M_data(), _M_data()); \n-}\n-</pre>\n-\n-<p>\n-      Unfortunately, ut <code>clear</code> is not\n-      implemented in this version, so you should use\n-      <code>erase</code> (which is probably faster than\n-      <code>operator=(charT*)</code>).\n-</p>\n-\n-<h5>Removal of <code>ostream::form</code> and\n-<code>istream::scan</code> extensions</h5>\n-\n-<p> These are no longer supported. Please use\n-   <a href=\"#sec-stringstream\" title=\"Using stringstreams\">\n-    stringstreams</a> instead.\t\n-</p>\n-\n-<h5>No <code>basic_stringbuf</code>, <code>basic_stringstream</code></h5>\n-\n-<p>\n-Although the ISO standard \n-<code>i/ostringstream</code>-classes are provided, (<tt>&lt;sstream&gt;</tt>), for compatibility with older implementations the pre-ISO <code>i/ostrstream</code> (<tt>&lt;strstream&gt;</tt>) interface is also provided, with these caveats:\n-</p>\n-\n-      <div class=\"itemizedlist\"><ul type=\"disc\">\n-<li><p> <code>strstream</code> is considered to be\n-\t    deprecated\n-\t  </p></li>\n-<li><p> <code>strstream</code> is limited to\n-\t    <code>char</code>\n-\t  </p></li>\n-<li><p> with <code>ostringstream</code> you don't\n-\t    have to take care of terminating the string or freeing its\n-\t    memory\n-\t  </p></li>\n-<li><p> <code>istringstream</code> can be re-filled\n-\t    (clear(); str(input);)\n-\t  </p></li>\n-</ul></div>\n-<p>\n-      You can then use output-stringstreams like this:\n-</p>\n-       \n-<pre>\n-#ifdef HAVE_SSTREAM\n-# include &lt;sstream&gt;\n-#else\n-# include &lt;strstream&gt;\n-#endif\n-\n-#ifdef HAVE_SSTREAM\n-  std::ostringstream oss;\n-#else\n-  std::ostrstream oss;\n-#endif\n-\n-oss &lt;&lt; &quot;Name=&quot; &lt;&lt; m_name &lt;&lt; &quot;, number=&quot; &lt;&lt; m_number &lt;&lt; std::endl;\n-...\n-#ifndef HAVE_SSTREAM\n-  oss &lt;&lt; std::ends; // terminate the char*-string\n-#endif\n-\n-// str() returns char* for ostrstream and a string for ostringstream\n-// this also causes ostrstream to think that the buffer's memory\n-// is yours\n-m_label.set_text(oss.str());\n-#ifndef HAVE_SSTREAM\n-  // let the ostrstream take care of freeing the memory\n-  oss.freeze(false);\n-#endif\n-</pre>\n-\n-<p>\n-      Input-stringstreams can be used similarly:\n-</p>\n-      \n-<pre> \n-std::string input;\n-...\n-#ifdef HAVE_SSTREAM\n-std::istringstream iss(input);\n-#else\n-std::istrstream iss(input.c_str());\n-#endif\n-\n-int i;\n-iss &gt;&gt; i; \n-</pre>\n-\n-<p> One (the only?) restriction is that an istrstream cannot be re-filled:\n-</p>\n-      \n-<pre>\n-std::istringstream iss(numerator);\n-iss &gt;&gt; m_num;\n-// this is not possible with istrstream\n-iss.clear();\n-iss.str(denominator);\n-iss &gt;&gt; m_den;\n- </pre>\n- \n-<p>\n-If you don't care about speed, you can put these conversions in\n-      a template-function:\n-</p>      \n-<pre>\n-template &lt;class X&gt;\n-void fromString(const string&amp; input, X&amp; any)\n-{\n-#ifdef HAVE_SSTREAM\n-std::istringstream iss(input);\n-#else\n-std::istrstream iss(input.c_str());\n-#endif\n-X temp;\n-iss &gt;&gt; temp;\n-if (iss.fail())\n-throw runtime_error(..)\n-any = temp;\n-}\n-</pre>\n-\n-<p> Another example of using stringstreams is in <a href=\"../21_strings/howto.html\" target=\"_top\">this howto</a>.\n-</p>\n-\n-<p> There is additional information in the libstdc++-v2 info files, in\n-particular &quot;info iostream&quot;.\n-</p>\n-\n-<h5>Little or no wide character support</h5>\n-\n-<h5>No templatized iostreams</h5>\n-\n-<h5>Thread safety issues</h5>\n-\n-<p>This project is no longer maintained or supported, and the sources\n-archived.  The code is considered replaced and rewritten.\n-</p>\n-\n-\n-<hr />\n-<h3 class=\"left\">\n-  <a name=\"v3\">Third.</a>\n-</h3>\n-<p> The third generation GNU C++ library is called libstdc++, or\n-libstdc++-v3.\n-</p>\n-\n-      <p>The subset commonly known as the Standard Template Library\n-         (chapters 23 through 25, mostly) is adapted from the final release\n-         of the SGI STL (version 3.3), with extensive changes.\n-      </p>\n-\n-      <p>A more formal description of the V3 goals can be found in the\n-         official <a href=\"../17_intro/DESIGN\">design document</a>.\n-      </p>\n-\n-<p>Portability notes and known implementation limitations are as follows.</p>\n-\n-<h5>Pre-ISO headers moved to backwards or removed</h5>\n-\n-<p> The pre-ISO C++ headers\n-      (<code>iostream.h</code>, <code>defalloc.h</code> etc.) are\n-      available, unlike previous libstdc++ versions, but inclusion\n-      generates a warning that you are using deprecated headers.\n-</p>\n-\n-    <p>This compatibility layer is constructed by including the\n-    standard C++ headers, and injecting any items in\n-    <code>std::</code> into the global namespace.\n-   </p>\n-   <p>For those of you new to ISO C++ (welcome, time travelers!), no,\n-      that isn't a typo. Yes, the headers really have new names.\n-      Marshall Cline's C++ FAQ Lite has a good explanation in <a\n-      href=\"http://www.parashift.com/c++-faq-lite/coding-standards.html#faq-27.4\">item\n-      [27.4]</a>.\n-   </p>\n-\n-<p> Some include adjustment may be required. What follows is an\n-autoconf test that defines <code>PRE_STDCXX_HEADERS</code> when they\n-exist.</p>\n-\n-<pre style=\"background: #c0c0c0\">\n-# AC_HEADER_PRE_STDCXX\n-AC_DEFUN([AC_HEADER_PRE_STDCXX], [\n-  AC_CACHE_CHECK(for pre-ISO C++ include files,\n-  ac_cv_cxx_pre_stdcxx,\n-  [AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -Wno-deprecated\"\t\n-\n-  # Omit defalloc.h, as compilation with newer compilers is problematic.\n-  AC_TRY_COMPILE([\n-  #include &lt;new.h&gt;\n-  #include &lt;iterator.h&gt;\n-  #include &lt;alloc.h&gt;\n-  #include &lt;set.h&gt;\n-  #include &lt;hashtable.h&gt;\n-  #include &lt;hash_set.h&gt;\n-  #include &lt;fstream.h&gt;\n-  #include &lt;tempbuf.h&gt;\n-  #include &lt;istream.h&gt;\n-  #include &lt;bvector.h&gt;\n-  #include &lt;stack.h&gt;\n-  #include &lt;rope.h&gt;\n-  #include &lt;complex.h&gt;\n-  #include &lt;ostream.h&gt;\n-  #include &lt;heap.h&gt;\n-  #include &lt;iostream.h&gt;\n-  #include &lt;function.h&gt;\n-  #include &lt;multimap.h&gt;\n-  #include &lt;pair.h&gt;\n-  #include &lt;stream.h&gt;\n-  #include &lt;iomanip.h&gt;\n-  #include &lt;slist.h&gt;\n-  #include &lt;tree.h&gt;\n-  #include &lt;vector.h&gt;\n-  #include &lt;deque.h&gt;\n-  #include &lt;multiset.h&gt;\n-  #include &lt;list.h&gt;\n-  #include &lt;map.h&gt;\n-  #include &lt;algobase.h&gt;\n-  #include &lt;hash_map.h&gt;\n-  #include &lt;algo.h&gt;\n-  #include &lt;queue.h&gt;\n-  #include &lt;streambuf.h&gt;\n-  ],,\n-  ac_cv_cxx_pre_stdcxx=yes, ac_cv_cxx_pre_stdcxx=no)\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  AC_LANG_RESTORE\n-  ])\n-  if test \"$ac_cv_cxx_pre_stdcxx\" = yes; then\n-    AC_DEFINE(PRE_STDCXX_HEADERS,,[Define if pre-ISO C++ header files are present. ])\n-  fi\n-])\n-</pre>\n-\n-<p>Porting between pre-ISO headers and ISO headers is simple: headers\n-like &lt;vector.h&gt; can be replaced with &lt;vector&gt; and a using\n-directive <code>using namespace std;</code> can be put at the global\n-scope. This should be enough to get this code compiling, assuming the\n-other usage is correct.\n-</p>\n-\n-<h5>Extension headers hash_map, hash_set moved to ext or backwards</h5>\n-\n-<p> Header files <code>hash_map</code> and <code>hash_set</code> moved\n-to <code>ext/hash_map</code> and <code>ext/hash_set</code>,\n-respectively. At the same time, all types in these files are enclosed\n-in <code>namespace __gnu_cxx</code>. Later versions move deprecate\n-these files, and suggest using TR1's <code>unordered_map</code>\n-and <code>unordered_set</code> instead.\n-</p>\n-\n-<p>The following autoconf tests check for working HP/SGI hash containers.\n-</p>\n-\n-<pre style=\"background: #c0c0c0\">\n-# AC_HEADER_EXT_HASH_MAP\n-AC_DEFUN([AC_HEADER_EXT_HASH_MAP], [\n-  AC_CACHE_CHECK(for ext/hash_map,\n-  ac_cv_cxx_ext_hash_map,\n-  [AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -Werror\"\t\n-  AC_TRY_COMPILE([#include &lt;ext/hash_map&gt;], [using __gnu_cxx::hash_map;],\n-  ac_cv_cxx_ext_hash_map=yes, ac_cv_cxx_ext_hash_map=no)\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  AC_LANG_RESTORE\n-  ])\n-  if test \"$ac_cv_cxx_ext_hash_map\" = yes; then\n-    AC_DEFINE(HAVE_EXT_HASH_MAP,,[Define if ext/hash_map is present. ])\n-  fi\n-])\n-</pre>\n-\n-<pre style=\"background: #c0c0c0\">\n-# AC_HEADER_EXT_HASH_SET\n-AC_DEFUN([AC_HEADER_EXT_HASH_SET], [\n-  AC_CACHE_CHECK(for ext/hash_set,\n-  ac_cv_cxx_ext_hash_set,\n-  [AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -Werror\"\t\n-  AC_TRY_COMPILE([#include &lt;ext/hash_set&gt;], [using __gnu_cxx::hash_set;],\n-  ac_cv_cxx_ext_hash_set=yes, ac_cv_cxx_ext_hash_set=no)\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  AC_LANG_RESTORE\n-  ])\n-  if test \"$ac_cv_cxx_ext_hash_set\" = yes; then\n-    AC_DEFINE(HAVE_EXT_HASH_SET,,[Define if ext/hash_set is present. ])\n-  fi\n-])\n-</pre>\n-\n-\n-<h5>\n-No <code>ios::nocreate/ios::noreplace</code>.\n-</h5>\n-\n-<p> The existence of <code>ios::nocreate</code> being used for\n-input-streams has been confirmed, most probably because the author\n-thought it would be more correct to specify nocreate explicitly.  So\n-it can be left out for input-streams.\n-</p>\n-\n-<p>For output streams, &quot;nocreate&quot; is probably the default,\n-unless you specify <code>std::ios::trunc</code> ? To be safe, you can\n-open the file for reading, check if it has been opened, and then\n-decide whether you want to create/replace or not. To my knowledge,\n-even older implementations support <code>app</code>, <code>ate</code>\n-and <code>trunc</code> (except for <code>app</code> ?).\n-</p>\n-\n-\n-<h5>\n-No <code>stream::attach(int fd)</code>\n-</h5>\n-\n-<p>\n-      Phil Edwards writes: It was considered and rejected for the ISO\n-      standard.  Not all environments use file descriptors.  Of those\n-      that do, not all of them use integers to represent them.\n-    </p>  \n-\n-<p>\n-      For a portable solution (among systems which use\n-      filedescriptors), you need to implement a subclass of\n-      <code>std::streambuf</code> (or\n-      <code>std::basic_streambuf&lt;..&gt;</code>) which opens a file\n-      given a descriptor, and then pass an instance of this to the\n-      stream-constructor. \n-    </p>\n-\n-<p>\n-      An extension is available that implements this.\n-      <code>&lt;ext/stdio_filebuf.h&gt;</code> contains a derived class called\n-      <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/class____gnu__cxx_1_1stdio__filebuf.html\"><code>__gnu_cxx::stdio_filebuf</code></a>.\n-      This class can be constructed from a C <code>FILE*</code> or a file\n-      descriptor, and provides the <code>fd()</code> function.\n-    </p>\n-\n-<p>\n- For another example of this, refer to\n-      <a href=\"http://www.josuttis.com/cppcode/fdstream.html\" target=\"_top\">fdstream example</a> \n-      by Nicolai Josuttis.\n-</p>\n-\n-<h5>\n-Support for C++98 dialect.\n-</h5>\n-\n-<p>Check for complete library coverage of the C++1998/2003 standard.\n-</p>\n-\n-<pre style=\"background: #c0c0c0\">\n-\n-# AC_HEADER_STDCXX_98\n-AC_DEFUN([AC_HEADER_STDCXX_98], [\n-  AC_CACHE_CHECK(for ISO C++ 98 include files,\n-  ac_cv_cxx_stdcxx_98,\n-  [AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  AC_TRY_COMPILE([\n-    #include &lt;cassert&gt;\n-    #include &lt;cctype&gt;\n-    #include &lt;cerrno&gt;\n-    #include &lt;cfloat&gt;\n-    #include &lt;ciso646&gt;\n-    #include &lt;climits&gt;\n-    #include &lt;clocale&gt;\n-    #include &lt;cmath&gt;\n-    #include &lt;csetjmp&gt;\n-    #include &lt;csignal&gt;\n-    #include &lt;cstdarg&gt;\n-    #include &lt;cstddef&gt;\n-    #include &lt;cstdio&gt;\n-    #include &lt;cstdlib&gt;\n-    #include &lt;cstring&gt;\n-    #include &lt;ctime&gt;\n-\n-    #include &lt;algorithm&gt;\n-    #include &lt;bitset&gt;\n-    #include &lt;complex&gt;\n-    #include &lt;deque&gt;\n-    #include &lt;exception&gt;\n-    #include &lt;fstream&gt;\n-    #include &lt;functional&gt;\n-    #include &lt;iomanip&gt;\n-    #include &lt;ios&gt;\n-    #include &lt;iosfwd&gt;\n-    #include &lt;iostream&gt;\n-    #include &lt;istream&gt;\n-    #include &lt;iterator&gt;\n-    #include &lt;limits&gt;\n-    #include &lt;list&gt;\n-    #include &lt;locale&gt;\n-    #include &lt;map&gt;\n-    #include &lt;memory&gt;\n-    #include &lt;new&gt;\n-    #include &lt;numeric&gt;\n-    #include &lt;ostream&gt;\n-    #include &lt;queue&gt;\n-    #include &lt;set&gt;\n-    #include &lt;sstream&gt;\n-    #include &lt;stack&gt;\n-    #include &lt;stdexcept&gt;\n-    #include &lt;streambuf&gt;\n-    #include &lt;string&gt;\n-    #include &lt;typeinfo&gt;\n-    #include &lt;utility&gt;\n-    #include &lt;valarray&gt;\n-    #include &lt;vector&gt;\n-  ],,\n-  ac_cv_cxx_stdcxx_98=yes, ac_cv_cxx_stdcxx_98=no)\n-  AC_LANG_RESTORE\n-  ])\n-  if test \"$ac_cv_cxx_stdcxx_98\" = yes; then\n-    AC_DEFINE(STDCXX_98_HEADERS,,[Define if ISO C++ 1998 header files are present. ])\n-  fi\n-])\n-</pre>\n-\n-\n-<h5>\n-Support for C++TR1 dialect.\n-</h5>\n-\n-<p>Check for library coverage of the TR1 standard.\n-</p>\n-\n-<pre style=\"background: #c0c0c0\">\n-\n-# AC_HEADER_STDCXX_TR1\n-AC_DEFUN([AC_HEADER_STDCXX_TR1], [\n-  AC_CACHE_CHECK(for ISO C++ TR1 include files,\n-  ac_cv_cxx_stdcxx_tr1,\n-  [AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  AC_TRY_COMPILE([\n-  #include &lt;tr1/array&gt;\n-  #include &lt;tr1/ccomplex&gt;\n-  #include &lt;tr1/cctype&gt;\n-  #include &lt;tr1/cfenv&gt;\n-  #include &lt;tr1/cfloat&gt;\n-  #include &lt;tr1/cinttypes&gt;\n-  #include &lt;tr1/climits&gt;\n-  #include &lt;tr1/cmath&gt;\n-  #include &lt;tr1/complex&gt;\n-  #include &lt;tr1/cstdarg&gt;\n-  #include &lt;tr1/cstdbool&gt;\n-  #include &lt;tr1/cstdint&gt;\n-  #include &lt;tr1/cstdio&gt;\n-  #include &lt;tr1/cstdlib&gt;\n-  #include &lt;tr1/ctgmath&gt;\n-  #include &lt;tr1/ctime&gt;\n-  #include &lt;tr1/cwchar&gt;\n-  #include &lt;tr1/cwctype&gt;\n-  #include &lt;tr1/functional&gt;\n-  #include &lt;tr1/memory&gt;\n-  #include &lt;tr1/random&gt;\n-  #include &lt;tr1/regex&gt;\n-  #include &lt;tr1/tuple&gt;\n-  #include &lt;tr1/type_traits&gt;\n-  #include &lt;tr1/unordered_set&gt;\n-  #include &lt;tr1/unordered_map&gt;\n-  #include &lt;tr1/utility&gt;\n-  ],,\n-  ac_cv_cxx_stdcxx_tr1=yes, ac_cv_cxx_stdcxx_tr1=no)\n-  AC_LANG_RESTORE\n-  ])\n-  if test \"$ac_cv_cxx_stdcxx_tr1\" = yes; then\n-    AC_DEFINE(STDCXX_TR1_HEADERS,,[Define if ISO C++ TR1 header files are present. ])\n-  fi\n-])\n-</pre>\n-\n-<p>An alternative is to check just for specific TR1 includes, such as &lt;unordered_map&gt; and &lt;unordered_set&gt;.\n-</p>\n-\n-<pre style=\"background: #c0c0c0\">\n-# AC_HEADER_TR1_UNORDERED_MAP\n-AC_DEFUN([AC_HEADER_TR1_UNORDERED_MAP], [\n-  AC_CACHE_CHECK(for tr1/unordered_map,\n-  ac_cv_cxx_tr1_unordered_map,\n-  [AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  AC_TRY_COMPILE([#include &lt;tr1/unordered_map&gt;], [using std::tr1::unordered_map;],\n-  ac_cv_cxx_tr1_unordered_map=yes, ac_cv_cxx_tr1_unordered_map=no)\n-  AC_LANG_RESTORE\n-  ])\n-  if test \"$ac_cv_cxx_tr1_unordered_map\" = yes; then\n-    AC_DEFINE(HAVE_TR1_UNORDERED_MAP,,[Define if tr1/unordered_map is present. ])\n-  fi\n-])\n-</pre>\n-\n-<pre style=\"background: #c0c0c0\">\n-# AC_HEADER_TR1_UNORDERED_SET\n-AC_DEFUN([AC_HEADER_TR1_UNORDERED_SET], [\n-  AC_CACHE_CHECK(for tr1/unordered_set,\n-  ac_cv_cxx_tr1_unordered_set,\n-  [AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  AC_TRY_COMPILE([#include &lt;tr1/unordered_set&gt;], [using std::tr1::unordered_set;],\n-  ac_cv_cxx_tr1_unordered_set=yes, ac_cv_cxx_tr1_unordered_set=no)\n-  AC_LANG_RESTORE\n-  ])\n-  if test \"$ac_cv_cxx_tr1_unordered_set\" = yes; then\n-    AC_DEFINE(HAVE_TR1_UNORDERED_SET,,[Define if tr1/unordered_set is present. ])\n-  fi\n-])\n-</pre>\n-\n-\n-\n-<h5>\n-Support for C++0x dialect.\n-</h5>\n-\n-<p>Check for baseline language coverage in the compiler for the C++0xstandard.\n-</p>\n-\n-<pre style=\"background: #c0c0c0\">\n-# AC_COMPILE_STDCXX_OX\n-AC_DEFUN([AC_COMPILE_STDCXX_0X], [\n-  AC_CACHE_CHECK(if g++ supports C++0x features without additional flags,\n-  ac_cv_cxx_compile_cxx0x_native,\n-  [AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  AC_TRY_COMPILE([\n-  template &lt;typename T&gt;\n-    struct check \n-    {\n-      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n-    };\n-\n-    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n-\n-    int a;\n-    decltype(a) b;\n-\n-    typedef check&lt;int&gt; check_type;\n-    check_type c;\n-    check_type&amp;&amp; cr = c;],,\n-  ac_cv_cxx_compile_cxx0x_native=yes, ac_cv_cxx_compile_cxx0x_native=no)\n-  AC_LANG_RESTORE\n-  ])\n-\n-  AC_CACHE_CHECK(if g++ supports C++0x features with -std=c++0x,\n-  ac_cv_cxx_compile_cxx0x_cxx,\n-  [AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -std=c++0x\"\t\n-  AC_TRY_COMPILE([\n-  template &lt;typename T&gt;\n-    struct check \n-    {\n-      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n-    };\n-\n-    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n-\n-    int a;\n-    decltype(a) b;\n-\n-    typedef check&lt;int&gt; check_type;\n-    check_type c;\n-    check_type&amp;&amp; cr = c;],,\n-  ac_cv_cxx_compile_cxx0x_cxx=yes, ac_cv_cxx_compile_cxx0x_cxx=no)\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  AC_LANG_RESTORE\n-  ])\n-\n-  AC_CACHE_CHECK(if g++ supports C++0x features with -std=gnu++0x,\n-  ac_cv_cxx_compile_cxx0x_gxx,\n-  [AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n-  AC_TRY_COMPILE([\n-  template &lt;typename T&gt;\n-    struct check \n-    {\n-      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n-    };\n-\n-    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n-\n-    int a;\n-    decltype(a) b;\n-\n-    typedef check&lt;int&gt; check_type;\n-    check_type c;\n-    check_type&amp;&amp; cr = c;],,\n-  ac_cv_cxx_compile_cxx0x_gxx=yes, ac_cv_cxx_compile_cxx0x_gxx=no)\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  AC_LANG_RESTORE\n-  ])\n-\n-  if test \"$ac_cv_cxx_compile_cxx0x_native\" = yes || \n-     test \"$ac_cv_cxx_compile_cxx0x_cxx\" = yes || \n-     test \"$ac_cv_cxx_compile_cxx0x_gxx\" = yes; then\n-    AC_DEFINE(HAVE_STDCXX_0X,,[Define if g++ supports C++0x features. ])\n-  fi\n-])\n-</pre>\n-\n-\n-<p>Check for library coverage of the C++0xstandard.\n-</p>\n-\n-<pre style=\"background: #c0c0c0\">\n-\n-# AC_HEADER_STDCXX_0X\n-AC_DEFUN([AC_HEADER_STDCXX_0X], [\n-  AC_CACHE_CHECK(for ISO C++ 0x include files,\n-  ac_cv_cxx_stdcxx_0x,\n-  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n-\n-  AC_TRY_COMPILE([\n-    #include &lt;cassert&gt;\n-    #include &lt;ccomplex&gt;\n-    #include &lt;cctype&gt;\n-    #include &lt;cerrno&gt;\n-    #include &lt;cfenv&gt;\n-    #include &lt;cfloat&gt;\n-    #include &lt;cinttypes&gt;\n-    #include &lt;ciso646&gt;\n-    #include &lt;climits&gt;\n-    #include &lt;clocale&gt;\n-    #include &lt;cmath&gt;\n-    #include &lt;csetjmp&gt;\n-    #include &lt;csignal&gt;\n-    #include &lt;cstdarg&gt;\n-    #include &lt;cstdbool&gt;\n-    #include &lt;cstddef&gt;\n-    #include &lt;cstdint&gt;\n-    #include &lt;cstdio&gt;\n-    #include &lt;cstdlib&gt;\n-    #include &lt;cstring&gt;\n-    #include &lt;ctgmath&gt;\n-    #include &lt;ctime&gt;\n-    #include &lt;cwchar&gt;\n-    #include &lt;cwctype&gt;\n-\n-    #include &lt;algorithm&gt;\n-    #include &lt;array&gt;\n-    #include &lt;bitset&gt;\n-    #include &lt;complex&gt;\n-    #include &lt;deque&gt;\n-    #include &lt;exception&gt;\n-    #include &lt;fstream&gt;\n-    #include &lt;functional&gt;\n-    #include &lt;iomanip&gt;\n-    #include &lt;ios&gt;\n-    #include &lt;iosfwd&gt;\n-    #include &lt;iostream&gt;\n-    #include &lt;istream&gt;\n-    #include &lt;iterator&gt;\n-    #include &lt;limits&gt;\n-    #include &lt;list&gt;\n-    #include &lt;locale&gt;\n-    #include &lt;map&gt;\n-    #include &lt;memory&gt;\n-    #include &lt;new&gt;\n-    #include &lt;numeric&gt;\n-    #include &lt;ostream&gt;\n-    #include &lt;queue&gt;\n-    #include &lt;random&gt;\n-    #include &lt;regex&gt;\n-    #include &lt;set&gt;\n-    #include &lt;sstream&gt;\n-    #include &lt;stack&gt;\n-    #include &lt;stdexcept&gt;\n-    #include &lt;streambuf&gt;\n-    #include &lt;string&gt;\n-    #include &lt;tuple&gt;\n-    #include &lt;typeinfo&gt;\n-    #include &lt;type_traits&gt;\n-    #include &lt;unordered_map&gt;\n-    #include &lt;unordered_set&gt;\n-    #include &lt;utility&gt;\n-    #include &lt;valarray&gt;\n-    #include &lt;vector&gt;\n-  ],,\n-  ac_cv_cxx_stdcxx_0x=yes, ac_cv_cxx_stdcxx_0x=no)\n-  AC_LANG_RESTORE\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  ])\n-  if test \"$ac_cv_cxx_stdcxx_0x\" = yes; then\n-    AC_DEFINE(STDCXX_0X_HEADERS,,[Define if ISO C++ 0x header files are present. ])\n-  fi\n-])\n-</pre>\n-\n-<p>As is the case for TR1 support, these autoconf macros can be made for a finer-grained, per-header-file check. For &lt;unordered_map&gt;\n-</p>\n-\n-<pre style=\"background: #c0c0c0\">\n-\n-# AC_HEADER_UNORDERED_MAP\n-AC_DEFUN([AC_HEADER_UNORDERED_MAP], [\n-  AC_CACHE_CHECK(for unordered_map,\n-  ac_cv_cxx_unordered_map,\n-  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n-  AC_TRY_COMPILE([#include &lt;unordered_map&gt;], [using std::unordered_map;],\n-  ac_cv_cxx_unordered_map=yes, ac_cv_cxx_unordered_map=no)\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  AC_LANG_RESTORE\n-  ])\n-  if test \"$ac_cv_cxx_unordered_map\" = yes; then\n-    AC_DEFINE(HAVE_UNORDERED_MAP,,[Define if unordered_map is present. ])\n-  fi\n-])\n-</pre>\n-\n-<pre style=\"background: #c0c0c0\">\n-# AC_HEADER_UNORDERED_SET\n-AC_DEFUN([AC_HEADER_UNORDERED_SET], [\n-  AC_CACHE_CHECK(for unordered_set,\n-  ac_cv_cxx_unordered_set,\n-  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n-  AC_TRY_COMPILE([#include &lt;unordered_set&gt;], [using std::unordered_set;],\n-  ac_cv_cxx_unordered_set=yes, ac_cv_cxx_unordered_set=no)\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  AC_LANG_RESTORE\n-  ])\n-  if test \"$ac_cv_cxx_unordered_set\" = yes; then\n-    AC_DEFINE(HAVE_UNORDERED_SET,,[Define if unordered_set is present. ])\n-  fi\n-])\n-</pre>\n-\n-\n-<h5>\n-Container iterator_type is not necessarily container value_type*\n-</h5>\n-\n-\n-<hr />\n-<h3 class=\"left\">\n-  <a name=\"v4\">Fourth, and future</a>\n-</h3>\n-\n-<hr />\n-<h3 class=\"left\">\n-  <a name=\"Links\">Links</a>\n-</h3>\n-\n-<p>\n-<a href=\"http://www.kegel.com/gcc/gcc4.html\">Migrating to gcc-4.1</a>, by Dan Kegel.\n-</p>\n-\n-<p>\n-<a href=\"http://lists.debian.org/debian-gcc/2006/03/msg00405.html\">Building the whole Debian archive with GCC 4.1: a summary</a>, by Martin Michlmayr\n-</p>\n-\n-<p>\n-<a href=\"http://annwm.lbl.gov/~leggett/Atlas/gcc-3.2.html\">Migration guide for GCC-3.2</a>\n-</p>\n-\n-</body>\n-</html>\n-"}, {"sha": "cfc28ed44a5d9a4db927b7d74f342cee7d24a667", "filename": "libstdc++-v3/doc/html/17_intro/c++0x_status.html", "status": "removed", "additions": 0, "deletions": 2290, "changes": 2290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fc%2B%2B0x_status.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fc%2B%2B0x_status.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fc%2B%2B0x_status.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,2290 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html \n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"DTD/xhtml1-transitional.dtd\">\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-\n-<head>\n-\n-  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-  <link rev=\"made\" href=\"mailto:gcc@gcc.gnu.org\" />\n-  <link rel=\"shortcut icon\" href=\"http://gcc.gnu.org/favicon.ico\" />\n-\n-  <title>\n-    Status of C++0x features in GCC\n-    - GNU Project - Free Software Foundation (FSF)\n-  </title>\n-\n-</head>\n-\n-<body>\n-\n-<h1 align=\"center\">\n- Status of C++0x features in GCC\n-</h1>\n-\n-<p>\n-This table is based on the table of contents of ISO/IEC \n-Doc No: N2461=07-0331 Date: 2007-10-22\n-Working Draft, Standard for Programming Language C++\n-</p>\n-\n-<p>\n-In this implementation <code>-std=gnu++0x</code> or\n-<code>-std=c++0x</code> flags must be used to enable language and\n-library features. The pre-defined symbol\n-<code>__GXX_EXPERIMENTAL_CXX0X__</code> is used to check for the\n-presence of the required flag.\n-</p>\n-\n-<p>\n-This page describes the C++0x support in mainline GCC SVN, not in any\n-particular release.\n-</p>\n-\n-<table border=\"1\">\n-  <thead>\n-    <tr>\n-      <td><span style=\"font-weight: bold;\">Section</span></td>\n-      <td><span style=\"font-weight: bold;\">Description</span></td>\n-      <td><span style=\"font-weight: bold;\">Done</span></td>\n-      <td><span style=\"font-weight: bold;\">Broken</span></td>\n-      <td><span style=\"font-weight: bold;\">Missing</span></td>\n-      <td><span style=\"font-weight: bold;\">Comments</span></td>\n-    </tr>\n-  </thead>\n-  <tbody>\n-    <tr>\n-      <td><b>20</b></td>\n-      <td colspan=\"5\"><b>General Utilities</b></td>\n-    </tr>\n-    <tr>\n-      <td>20.2</td>\n-      <td>Utility Components</td>\n-      <td></td>\n-      <td></td>\n-      <td>incomplete</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.2.1</td>\n-      <td>Operators</td>\n-      <td></td>\n-      <td></td>\n-      <td>partial</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.2.2</td>\n-      <td>forward/move helpers</td>\n-      <td></td>\n-      <td></td>\n-      <td>partial</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.2.3</td>\n-      <td>Pairs</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-\n-    <tr>\n-      <td>20.3</td>\n-      <td>Header <code>&lt;tuple&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.3.1</td>\n-      <td>Class template <code>tuple</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.3.1.1</td>\n-      <td>Construction</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.3.1.2</td>\n-      <td>Tuple creation functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.3.1.3</td>\n-      <td>Tuple helper classes</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.3.1.4</td>\n-      <td>Element access</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.3.1.5</td>\n-      <td>Relational operators</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-\n-    <tr>\n-      <td>20.4</td>\n-      <td colspan=\"5\">Metaprogramming and type traits</td>\n-    </tr>\n-    <tr>\n-      <td>20.4.1</td>\n-      <td>Requirements</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.2</td>\n-      <td>Header <code>&lt;type_traits&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.3</td>\n-      <td>Helper classes</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.4</td>\n-      <td>General Requirements</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.5</td>\n-      <td>Unary Type Traits</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.5.1</td>\n-      <td>Primary Type Categories</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.5.2</td>\n-      <td>Composite type traits</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.5.3</td>\n-      <td>Type properties</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.6</td>\n-      <td>Relationships between types</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.7</td>\n-      <td>Transformations between types</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.7.1</td>\n-      <td>Const-volatile modifications</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.7.2</td>\n-      <td>Reference modifications</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.7.3</td>\n-      <td>Array modifications</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.7.4</td>\n-      <td>Pointer modifications</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.8</td>\n-      <td>Other transformations</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.4.9</td>\n-      <td>Implementation requirements</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5 </td>\n-      <td>Function Objects</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5</td>\n-      <td>Additions to header <code>&lt;functional&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.1</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.2</td>\n-      <td>Requirements</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.3</td>\n-      <td>Base</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.4</td>\n-      <td>Function return types</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.5</td>\n-      <td>Class template <code>reference_wrapper</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.5.1</td>\n-      <td><code>reference_wrapper</code> construct/copy/destroy</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.5.2</td>\n-      <td><code>reference_wrapper</code> assignment</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.5.3</td>\n-      <td><code>reference_wrapper</code> access</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.5.4</td>\n-      <td><code>reference_wrapper</code> invocation</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.5.5</td>\n-      <td><code>reference_wrapper</code> helper functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.14</td>\n-      <td>Function template <code>mem_fn</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.11</td>\n-      <td>Template function bind</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-\n-    <tr>\n-      <td>20.5.11.1</td>\n-      <td>Function object binders</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.11.1.1</td>\n-      <td>Class template <code>is_bind_expression</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.11.1.2</td>\n-      <td>Class template <code>is_placeholder</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.11.1.3</td>\n-      <td>Function template <code>bind</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.11.1.4</td>\n-      <td>Placeholders</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.15</td>\n-      <td>Polymorphic function wrappers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.15.1</td>\n-      <td>Class <code>bad_function_call<code></code></code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.15.1.1</td>\n-      <td><code>bad_function_call</code> constructor</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.15.2</td>\n-      <td>Class template <code>function</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.15.2.1</td>\n-      <td><code>function</code> construct/copy/destroy</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.15.2.2</td>\n-      <td><code>function</code> modifiers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.15.2.3</td>\n-      <td><code>function</code> capacity</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.15.2.4</td>\n-      <td><code>function</code> invocation</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.15.2.5</td>\n-      <td><code>function</code> target access</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.15.2.7</td>\n-      <td>null pointer comparison operators</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.15.2.8</td>\n-      <td>specialized algorithms</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.5.16</td>\n-      <td>Class template <code>hash</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6</td>\n-      <td>Additions to header <code>&lt;memory&gt;</code> synopsis</td>\n-      <td></td>\n-      <td></td>\n-      <td>partial</td>\n-      <td>missing <code>unique_ptr</code></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.5</td>\n-      <td>Class template <code>unique_ptr</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6</td>\n-      <td>Smart pointers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.1</td>\n-      <td>Class <code>bad_weak_ptr</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2</td>\n-      <td>Class template <code>shared_ptr</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td><a href=\"#1\">1</a></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2.1</td>\n-      <td><code>shared_ptr</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2.2</td>\n-      <td><code>shared_ptr</code> destructor</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2.3</td>\n-      <td><code>shared_ptr</code> assignment</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2.4</td>\n-      <td><code>shared_ptr</code> modifiers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2.5</td>\n-      <td><code>shared_ptr</code> observers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2.6</td>\n-      <td><code>shared_ptr</code> creation</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>\n-      <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2351.htm\">N2351</a>\n-      </td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2.7</td>\n-      <td><code>shared_ptr</code> comparison</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2.8</td>\n-      <td><code>shared_ptr</code> I/O</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2.9</td>\n-      <td><code>shared_ptr</code> specialized algorithms</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2.10</td>\n-      <td><code>shared_ptr</code> casts</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.2.11</td>\n-      <td><code>get_deleter</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.3</td>\n-      <td>Class template <code>weak_ptr</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.3.1</td>\n-      <td><code>weak_ptr</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.3.2</td>\n-      <td><code>weak_ptr</code> destructor</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.3.3</td>\n-      <td><code>weak_ptr</code> assignment</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.3.4</td>\n-      <td><code>weak_ptr</code> modifiers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.3.5</td>\n-      <td><code>weak_ptr</code> observers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.3.6</td>\n-      <td><code>weak_ptr</code> comparison</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.3.7</td>\n-      <td><code>weak_ptr</code> specialized algorithms</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>20.6.6.4</td>\n-      <td>Class template <code>enable_shared_from_this</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-\n-\n-\n-    <tr>\n-      <td><b>23</b></td>\n-      <td colspan=\"5\"><b>Containers</b></td>\n-    </tr>\n-    <tr>\n-      <td>23.2.1</td>\n-      <td>Header <code>&lt;array&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.2.1</td>\n-      <td>Class template array</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.2.1.1</td>\n-      <td><code>array</code> constructors, copy, and assignment</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.2.1.2</td>\n-      <td><code>array</code> specialized algorithms</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.2.1.3</td>\n-      <td><code>array </code>size</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.2.1.4</td>\n-      <td><code>array </code>data</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.2.1.5</td>\n-      <td>Zero sized <code>array</code>s</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.2.1.6</td>\n-      <td>Tuple interface to class template <code>array</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-\n-    <tr>\n-      <td>23.4</td>\n-      <td>Unordered associative containers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.1</td>\n-      <td>Class template <code>unordered_map</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.1.1</td>\n-      <td><code>unordered_map</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.1.2</td>\n-      <td><code>unordered_map</code> element access</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.1.3</td>\n-      <td><code>unordered_map</code> swap</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.2</td>\n-      <td>Class template <code>unordered_multimap</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.2.1</td>\n-      <td><code>unordered_multimap</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.2.2</td>\n-      <td><code>unordered_multimap</code> swap</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.3</td>\n-      <td>Class template <code>unordered_set</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.3.1</td>\n-      <td><code>unordered_set</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.3.2</td>\n-      <td><code>unordered_set</code> swap</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.4</td>\n-      <td>Class template <code>unordered_multiset<code></code></code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.4.1</td>\n-      <td><code>unordered_multiset</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>23.4.4.2</td>\n-      <td><code>unordered_multiset</code> swap</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-\n-    <tr>\n-      <td><b>26</b></td>\n-      <td colspan=\"5\"><b>Numerics</b></td>\n-    </tr>\n-    <tr>\n-      <td>26.4</td>\n-      <td>Random number generation</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.1</td>\n-      <td>Requirements</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.2</td>\n-      <td>Header <code>&lt;random&gt;</code> synopsis</td>\n-      <td></td>\n-      <td></td>\n-      <td>partial</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.3</td>\n-      <td>Random number engine class templates</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.3.1</td>\n-      <td>Class template <code>linear_congruential_engine</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.3.2</td>\n-      <td>Class template <code>mersenne_twister_engine</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.3.3</td>\n-      <td>Class template <code>subtract_with_carry_engine</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.4</td>\n-      <td>Random number engine adaptor class templates</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-\n-    <tr>\n-      <td>26.4.4.1</td>\n-      <td>Class template <code>discard_block_engine</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.4.2</td>\n-      <td>Class template <code>independent_bits_engine</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.4.3</td>\n-      <td>Class template <code>shuffle_order_engine</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.4.4</td>\n-      <td>Class template <code>xor_combine_engine</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>operator()() per N2079</td>\n-    </tr>\n-    <tr>\n-      <td>26.4.5</td>\n-      <td>Engines and engine adaptors with predefined parameters</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.6</td>\n-      <td>Class <code>random_device</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.7</td>\n-      <td>Utilities</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.7.1</td>\n-      <td>Class <code>seed_seq</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.7.2</td>\n-      <td>Function template <code>generate_cannonical</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8</td>\n-      <td>Random number generation class templates</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.1</td>\n-      <td>Uniform distributions</td>\n-      <td></td>\n-      <td></td>\n-      <td>partial</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.1</td>\n-      <td>Class template <code>uniform_int_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.1</td>\n-      <td>Class template <code>uniform_real_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-   <tr>\n-      <td>26.4.8.2</td>\n-      <td>Bernoulli distributions</td>\n-      <td></td>\n-      <td></td>\n-      <td>partial</td>\n-      <td></td>\n-    </tr>\n-\n-    <tr>\n-      <td>26.4.8.2.1</td>\n-      <td>Class <code>bernoulli_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.2.2</td>\n-      <td>Class template <code>binomial_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.2.3</td>\n-      <td>Class template <code>geometric_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.2.4</td>\n-      <td>Class template <code>negative_binomial_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.3</td>\n-      <td>Poisson distributions</td>\n-      <td></td>\n-      <td></td>\n-      <td>partial</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.3.1</td>\n-      <td>Class template <code>poisson_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.3.2</td>\n-      <td>Class template <code>exponential_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.3.3</td>\n-      <td>Class template <code>gamma_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.3.4</td>\n-      <td>Class template <code>weibull_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.3.5</td>\n-      <td>Class template <code>extreme_value_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.4</td>\n-      <td>Normal distributions</td>\n-      <td></td>\n-      <td></td>\n-      <td>partial</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.4.1</td>\n-      <td>Class template <code>normal_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.4.2</td>\n-      <td>Class template <code>lognormal_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.4.3</td>\n-      <td>Class template <code>chi_squared_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.4.4</td>\n-      <td>Class template <code>cauchy_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.4.5</td>\n-      <td>Class template <code>fisher_f_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.4.6</td>\n-      <td>Class template <code>student_t_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.5</td>\n-      <td>Sampling distributions</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.5.1</td>\n-      <td>Class template <code>discrete_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.5.1</td>\n-      <td>Class template <code>piecewise_constant_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>26.4.8.5.1</td>\n-      <td>Class template <code>general_pdf_distribution</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-\n-   <tr>\n-      <td><b>28</b></td>\n-      <td colspan=\"5\"><b>Regular expressions</b></td>\n-    </tr>\n-    <tr>\n-      <td>28.1</td>\n-      <td>Definitions</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.2</td>\n-      <td>Requirements</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.3</td>\n-      <td>Regular expressions summary</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.4</td>\n-      <td>Header <code>&lt;regex&gt;</code> synopsis</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.5</td>\n-      <td>Namespace <code>tr1::regex_constants</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.5.1</td>\n-      <td>Bitmask Type <code>syntax_option_type</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.5.2</td>\n-      <td>Bitmask Type <code>regex_constants::match_flag_type</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.5.3</td>\n-      <td>Implementation defined <code>error_type</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.6</td>\n-      <td>Class <code>regex_error</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.7</td>\n-      <td>Class template <code>regex_traits</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.8</td>\n-      <td>Class template <code>basic_regex</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.8.1</td>\n-      <td><code>basic_regex</code> constants</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.8.2</td>\n-      <td><code>basic_regex</code> constructors</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.8.3</td>\n-      <td><code>basic_regex</code> assign</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.8.4</td>\n-      <td><code>basic_regex</code> constant operations</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.8.5</td>\n-      <td><code>basic_regex</code> locale</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.8.6</td>\n-      <td><code>basic_regex</code> swap</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.8.7</td>\n-      <td><code>basic_regex</code> non-member functions</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.8.7.1</td>\n-      <td><code>basic_regex</code> non-member swap</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.9</td>\n-      <td>Class template <code>sub_match</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.9.1</td>\n-      <td><code>sub_match</code> members</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.9.2</td>\n-      <td><code>sub_match</code> non-member operators</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.10</td>\n-      <td>Class template <code>match_results</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.10.1</td>\n-      <td><code>match_results</code> constructors</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.10.2</td>\n-      <td><code>match_results</code> size</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.10.3</td>\n-      <td><code>match_results</code> element access</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.10.4</td>\n-      <td><code>match_results</code> formatting</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.10.5</td>\n-      <td><code>match_results</code> allocator</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.10.6</td>\n-      <td><code>match_results</code> swap</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.11</td>\n-      <td>Regular expression algorithms</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.11.1</td>\n-      <td>exceptions</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.11.2</td>\n-      <td><code>regex_match</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.11.3</td>\n-      <td><code>regex_search</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.11.4</td>\n-      <td><code>regex_replace</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.12</td>\n-      <td>Regular expression Iterators</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.12.1</td>\n-      <td>Class template <code>regex_iterator</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.12.1.1</td>\n-      <td><code>regex_iterator</code> constructors</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.12.1.2</td>\n-      <td><code>regex_iterator</code> comparisons</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.12.1.3</td>\n-      <td><code>regex_iterator</code> dereference</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.12.1.4</td>\n-      <td><code>regex_iterator</code> increment</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.12.2</td>\n-      <td>Class template <code>regex_token_iterator</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.12.2.1</td>\n-      <td><code>regex_token_iterator</code> constructors</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.12.2.2</td>\n-      <td><code>regex_token_iterator</code> comparisons</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.12.2.3</td>\n-      <td><code>regex_token_iterator</code> dereference</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.12.2.4</td>\n-      <td><code>regex_token_iterator</code> increment</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>28.13</td>\n-      <td>Modified ECMAScript regular expression grammar</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td><b>C</b></td>\n-      <td colspan=\"5\"><b>C compatibility</b></td>\n-    </tr>\n-    <tr>\n-      <td>C2.1</td>\n-      <td>Additions to header <code>&lt;complex&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.1.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.1.2</td>\n-      <td>Function <code>acos</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.1.3</td>\n-      <td>Function <code>asin</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.1.4</td>\n-      <td>Function <code>atan</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.1.5</td>\n-      <td>Function <code>acosh</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.1.6</td>\n-      <td>Function <code>asinh</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.1.7</td>\n-      <td>Function <code>atanh</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.1.8</td>\n-      <td>Function <code>fabs</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.1.9</td>\n-      <td>Additional Overloads</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.2</td>\n-      <td>Header <code>&lt;ccomplex&gt;</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td>DR 551</td>\n-    </tr>\n-    <tr>\n-      <td>C2.3</td>\n-      <td>Header <code>&lt;complex.h&gt;</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td>DR 551</td>\n-    </tr>\n-    <tr>\n-      <td>C2.4</td>\n-      <td>Additions to header <code>&lt;cctype&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.4.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.4.2</td>\n-      <td>Function <code>isblank</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.5</td>\n-      <td>Additions to header <code>&lt;ctype.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.6</td>\n-      <td>Header <code>&lt;cfenv&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.6.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.6.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.7</td>\n-      <td>Header <code>&lt;fenv.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.8</td>\n-      <td>Additions to header <code>&lt;cfloat&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.9</td>\n-      <td>Additions to header <code>&lt;float.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.10</td>\n-      <td>Additions to header <code>&lt;ios&gt;</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.10.1</td>\n-      <td>Synopsis</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.10.2</td>\n-      <td>Function <code>hexfloat</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.11</td>\n-      <td>Header <code>&lt;cinttypes&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.11.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>DR 557</td>\n-    </tr>\n-    <tr>\n-      <td>C2.11.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.12</td>\n-      <td>Header <code>&lt;inttypes.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.13</td>\n-      <td>Additions to header <code>&lt;climits&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.14</td>\n-      <td>Additions to header <code>&lt;limits.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.15</td>\n-      <td>Additions to header <code>&lt;locale&gt;</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.16</td>\n-      <td>Additions to header <code>&lt;cmath&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.16.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.16.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.16.3</td>\n-      <td>Function template definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.16.4</td>\n-      <td>Additional overloads</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>DR 568; DR 550</td>\n-    </tr>\n-    <tr>\n-      <td>C2.17</td>\n-      <td>Additions to header <code>&lt;math.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.18</td>\n-      <td>Additions to header <code>&lt;cstdarg&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.19</td>\n-      <td>Additions to header <code>&lt;stdarg.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.20</td>\n-      <td>The header <code>&lt;cstdbool&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.21</td>\n-      <td>The header <code>&lt;stdbool.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.22</td>\n-      <td>The header <code>&lt;cstdint&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.22.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.22.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.23</td>\n-      <td>The header <code>&lt;stdint.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.24</td>\n-      <td>Additions to header <code>&lt;cstdio&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.24.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.24.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.24.3</td>\n-      <td>Additional format specifiers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>C library responsibility</td>\n-    </tr>\n-    <tr>\n-      <td>C2.24.4</td>\n-      <td>Additions to header <code>&lt;stdio.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.25</td>\n-      <td>Additions to header <code>&lt;cstdlib&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.25.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.25.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.25.3</td>\n-      <td>Function <code>abs</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.25.4</td>\n-      <td>Function <code>div</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.26</td>\n-      <td>Additions to header <code>&lt;stdlib.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.27</td>\n-      <td>Header <code>&lt;ctgmath&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>DR 551</td>\n-    </tr>\n-    <tr>\n-      <td>C2.28</td>\n-      <td>Header <code>&lt;tgmath.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>DR 551</td>\n-    </tr>\n-    <tr>\n-      <td>C2.29</td>\n-      <td>Additions to header <code>&lt;ctime&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>C library responsibility</td>\n-    </tr>\n-    <tr>\n-      <td>C2.30</td>\n-      <td>Additions to header <code>&lt;cwchar&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.30.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.30.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.30.3</td>\n-      <td>Additional wide format specifiers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>C library responsibility</td>\n-    </tr>\n-    <tr>\n-      <td>C2.31</td>\n-      <td>Additions to header <code>&lt;wchar.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.32</td>\n-      <td>Additions to header <code>&lt;cwctype&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.32.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.32.2</td>\n-      <td>Function <code>iswblank</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>C2.33</td>\n-      <td>Additions to header <code>&lt;wctype.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td><b>D</b></td>\n-      <td colspan=\"5\"><b>Compatibility Features</b></td>\n-    </tr>\n-    <tr>\n-      <td>D.6</td>\n-      <td>Old iostream members</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>D.8</td>\n-      <td>Binders</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td><a href=\"http://gcc.gnu.org/PR33911\">33911</a></td>\n-    </tr>\n-    <tr>\n-      <td>D.9</td>\n-      <td>Class template <code>auto_ptr</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td><a href=\"http://gcc.gnu.org/PR33911\">33911</a></td>\n-    </tr>\n-\n-  </tbody>\n-</table>\n-\n-<h3>Footnotes</h3>\n-\n-<ol>\n-\n-  <li>\n-    <a name=\"1\"/>\n-    The shared_ptr implementation uses some code from the\n-    <a href=\"http://www.boost.org/libs/smart_ptr/shared_ptr.htm\">Boost \n-    shared_ptr</a> library.\n-  </li>\n-\n-</ol>\n-\n-<p>\n-Please send FSF &amp; GNU inquiries &amp; questions to\n-<a href=\"mailto:gnu@gnu.org\">gnu@gnu.org</a>.\n-There are also <a href=\"http://www.gnu.org/home.html#ContactInfo\">other ways\n-to contact</a> the FSF.\n-</p>\n-\n-<p>\n-These pages are maintained by\n-<a href=\"http://gcc.gnu.org/about.html\">the GCC team</a>.\n-</p>\n-\n-<address>\n-For questions related to the use of GCC, please consult these web\n-pages and the <a href=\"http://gcc.gnu.org/onlinedocs/\">GCC manuals</a>. If\n-that fails, the <a href=\"mailto:gcc-help@gcc.gnu.org\">gcc-help@gcc.gnu.org</a>\n-mailing list might help.<br />\n-Please send comments on these web pages and the development of GCC to our\n-developer mailing list at <a href=\"mailto:gcc@gnu.org\">gcc@gnu.org</a>\n-or <a href=\"mailto:gcc@gcc.gnu.org\">gcc@gcc.gnu.org</a>.  All of our lists\n-have <a href=\"http://gcc.gnu.org/lists.html\">public archives</a>.\n-</address>\n-\n-<p>\n-Copyright (C) Free Software Foundation, Inc.,\n-51 Franklin St, Fifth Floor, Boston, MA 02110, USA.\n-</p>\n-<p>\n-Verbatim copying and distribution of this entire article is\n-permitted in any medium, provided this notice is preserved.\n-</p>\n-\n-<table width=\"100%\" border=\"0\">\n-<tr>\n-  <td>\n-    <!-- IGNORE DIFF -->Last modified 2007-10-30\n-  </td>\n-  <td align=\"right\" valign=\"bottom\">\n-    <a href=\"http://validator.w3.org/check/referer\">\n-        <img src=\"http://www.w3.org/Icons/valid-xhtml10\"\n-       alt=\"Valid XHTML 1.0\" border=\"0\" width=\"88\" height=\"31\" />\n-    </a>\n-  </td>\n-</tr>\n-</table>\n-\n-</body>\n-</html>"}, {"sha": "7865e6499822cc5ac2a485b462b775fea26522a7", "filename": "libstdc++-v3/doc/html/17_intro/c++1998_status.html", "status": "removed", "additions": 0, "deletions": 6004, "changes": 6004, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fc%2B%2B1998_status.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fc%2B%2B1998_status.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fc%2B%2B1998_status.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "a62d28ce9ddf00a2689bb05ab892e6e7798e8bb0", "filename": "libstdc++-v3/doc/html/17_intro/confdeps.dot", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fconfdeps.dot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fconfdeps.dot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fconfdeps.dot?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,14 +0,0 @@\n-# Blatantly ripped out of the graphviz examples and modified.  -pme\n-digraph v3conf {\n-    size=\"6,6\";\n-    node [color=lightblue2, style=filled];\n-    \"aclocal.m4\" -> \"acinclude.m4\";\n-    \"configure\" -> \"aclocal.m4\";\n-    \"configure\" -> \"configure.ac\";\n-    \"configure\" -> \"crossconfig.m4\";\n-    \"configure\" -> \"linkage.m4\";\n-    \"[*/]Makefile.in\" -> \"Makefile.am\";\n-    \"[*/]Makefile.in\" -> \"configure.ac\";\n-    \"config.h.in\" -> \"acconfig.h\";\n-    \"config.h.in\" -> \"configure.ac\";\n-}"}, {"sha": "5075aa869b158b79a04a48023f24817743615807", "filename": "libstdc++-v3/doc/html/17_intro/confdeps.png", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fconfdeps.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fconfdeps.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fconfdeps.png?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "a35ccf23996bee9ec0d6c5218a8a0539fdc291b1", "filename": "libstdc++-v3/doc/html/17_intro/configury.html", "status": "removed", "additions": 0, "deletions": 305, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fconfigury.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fconfigury.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fconfigury.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,305 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"DESCRIPTION\" content=\"configury for libstdc++\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ configury</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type='text/css' />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n- title=\"GNU C++ Standard Library\" />\n-</head>\n-<body>\n-\n-<h1><code>&gt; open configury door</code></h1>\n-<h1><code>&gt; look</code></h1>\n-\n-<p class=\"larger\"><code>You are in a maze of twisty passages, all\n-different.</code></p>\n-<p class=\"larger\"><code>It is dark.  You are likely to be eaten by a\n-Canadian cross build.</code></p>\n-\n-\n-<hr />\n-<h2>Notes on libstdc++ configury</h2>\n-<blockquote>\n-No problem is insoluble in all conceivable circumstances.<br />\n--- The Cosmic AC,\n-<a href=\"http://mit.edu/tylerc/www/twt/LQ1.htm\">The\n-Last Question</a>, by Isaac Asimov\n-</blockquote>\n-<ul>\n- <li><a href=\"#prereq\">Prerequisites for configure and make hacking</a></li>\n- <li><a href=\"#deps\">Overview: what comes from where</a></li>\n- <li><a href=\"#breakout\">Storing information in non-AC files, like\n-                         configure.host</a></li>\n- <li><a href=\"#general\">Coding and commenting conventions</a></li>\n- <li><a href=\"#aclayout\">The acinclude.m4 layout</a></li>\n- <li><a href=\"#enable\"><code>GLIBCXX_ENABLE, the --enable</code> howto</a></li>\n-</ul>\n-\n-<hr />\n-<h3><a name=\"prereq\">Prerequisites for configure and make hacking</a></h3>\n-\n-<p> As\n-noted <a href=\"http://gcc.gnu.org/install/prerequisites.html\">previously</a>,\n-certain other tools are necessary for hacking on files that control\n-configure (<code>configure.ac</code>, <code>acinclude.m4</code>) and\n-make (<code>Makefile.am</code>). These additional tools\n-(<code>automake</code>, and <code>autoconf</code>) are further\n-described in detail in their respective manuals. All the libraries in GCC try to stay in sync with each other in terms of versions of the auto-tools used, so please try to play nicely with the neighbors.\n-</p>\n-\n-\n-<hr />\n-<h3><a name=\"deps\">Overview: what comes from where</a></h3>\n-<p class=\"centered\"><img src=\"confdeps.png\"\n-  alt=\"Dependency graph in PNG graphics format.  (Get a better browser!)\" /></p>\n-\n-<p>Regenerate all generated files by using the command sequence\n- <code>\"autoreconf\"</code> at the top level of the libstdc++ source\n- directory. The following will also work, but is much more complex:\n-   <code>\"aclocal-1.7 &amp;&amp; autoconf-2.59 &amp;&amp;\n-   autoheader-2.59 &amp;&amp; automake-1.7\"</code> The version numbers\n-   may be absent entirely or otherwise vary depending on\n-   <a href=\"http://gcc.gnu.org/install/prerequisites.html\">the current\n-   requirements</a> and your vendor's choice of installation names.\n-</p>\n-\n-\n-<hr />\n-<h3><a name=\"breakout\">Storing information in non-AC files, like\n-                       configure.host</a></h3>\n-<p>Until that glorious day when we can use AC_TRY_LINK with a cross-compiler,\n-   we have to hardcode the results of what the tests would have shown if\n-   they could be run.  So we have an inflexible mess like crossconfig.m4.\n-</p>\n-\n-<p>Wouldn't it be nice if we could store that information in files like\n-   configure.host, which can be modified without needing to regenerate\n-   anything, and can even be tweaked without really knowing how the configury\n-   all works?  Perhaps break the pieces of crossconfig.m4 out and place them in\n-   their appropriate config/{cpu,os} directory.\n-</p>\n-\n-<p>Alas, writing macros like \"<code>AC_DEFINE(HAVE_A_NICE_DAY)</code>\" can\n-   only be done inside files which are passed through autoconf.  Files which\n-   are pure shell script can be source'd at configure time.  Files which\n-   contain autoconf macros must be processed with autoconf.  We could still\n-   try breaking the pieces out into \"config/*/cross.m4\" bits, for instance,\n-   but then we would need arguments to aclocal/autoconf to properly find\n-   them all when generating configure.  I would discourage that.\n-</p>\n-\n-\n-<hr />\n-<h3><a name=\"general\">Coding and commenting conventions</a></h3>\n-<p>Lots of stuff got thrown out because the new autotools kindly generate\n-   the same (or better) shell code for us.\n-</p>\n-\n-<p>Most comments should use {octothorpes, shibboleths, hash marks, pound\n-   signs, whatevers} rather than \"dnl\".  Nearly all comments in configure.ac\n-   should.  Comments inside macros written in ancilliary .m4 files should.\n-   About the only comments which should <em>not</em> use #, but use dnl\n-   instead, are comments <em>outside</em> our own macros in the ancilliary\n-   files.  The difference is that # comments show up in <code>configure</code>\n-   (which is most helpful for debugging), while dnl'd lines just vanish.\n-   Since the macros in ancilliary files generate code which appears in odd\n-   places, their \"outside\" comments tend to not be useful while reading\n-   <code>configure</code>.\n-</p>\n-\n-<p>Do not use any <code>$target*</code> variables, such as\n-   <code>$target_alias</code>.  The single exception is in configure.ac,\n-   for automake+dejagnu's sake.\n-</p>\n-\n-<p>\n-</p>\n-\n-<hr />\n-<h3><a name=\"aclayout\">The acinclude.m4 layout</a></h3>\n-<p>The nice thing about acinclude.m4/aclocal.m4 is that macros aren't actually\n-   performed/called/expanded/whatever here, just loaded.  So we can arrange\n-   the contents however we like.  As of this writing, acinclude.m4 is arranged\n-   as follows:\n-</p>\n-<pre>\n-    GLIBCXX_CHECK_HOST\n-    GLIBCXX_TOPREL_CONFIGURE\n-    GLIBCXX_CONFIGURE\n-</pre>\n-<p>All the major variable \"discovery\" is done here.  CXX, multilibs, etc.\n-</p>\n-<pre>\n-    fragments included from elsewhere\n-</pre>\n-<p>Right now, \"fragments\" == \"the math/linkage bits\".\n-</p>\n-<pre>\n-    GLIBCXX_CHECK_COMPILER_FEATURES\n-    GLIBCXX_CHECK_LINKER_FEATURES\n-    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n-</pre>\n-<p>Next come extra compiler/linker feature tests.  Wide character support\n-   was placed here because I couldn't think of another place for it.  It will\n-   probably get broken apart like the math tests, because we're still disabling\n-   wchars on systems which could actually support them.\n-</p>\n-<pre>\n-    GLIBCXX_CHECK_SETRLIMIT_ancilliary\n-    GLIBCXX_CHECK_SETRLIMIT\n-    GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n-    GLIBCXX_CHECK_POLL\n-    GLIBCXX_CHECK_WRITEV\n-\n-    GLIBCXX_CONFIGURE_TESTSUITE\n-</pre>\n-<p>Feature tests which only get used in one place.  Here, things used only in\n-   the testsuite, plus a couple bits used in the guts of I/O.\n-</p>\n-<pre>\n-    GLIBCXX_EXPORT_INCLUDES\n-    GLIBCXX_EXPORT_FLAGS\n-    GLIBCXX_EXPORT_INSTALL_INFO\n-</pre>\n-<p>Installation variables, multilibs, working with the rest of the compiler.\n-   Many of the critical variables used in the makefiles are set here.\n-</p>\n-<pre>\n-    GLIBGCC_ENABLE\n-    GLIBCXX_ENABLE_C99\n-    GLIBCXX_ENABLE_CHEADERS\n-    GLIBCXX_ENABLE_CLOCALE\n-    GLIBCXX_ENABLE_CONCEPT_CHECKS\n-    GLIBCXX_ENABLE_CSTDIO\n-    GLIBCXX_ENABLE_CXX_FLAGS\n-    GLIBCXX_ENABLE_C_MBCHAR\n-    GLIBCXX_ENABLE_DEBUG\n-    GLIBCXX_ENABLE_DEBUG_FLAGS\n-    GLIBCXX_ENABLE_LONG_LONG\n-    GLIBCXX_ENABLE_PCH\n-    GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n-    GLIBCXX_ENABLE_SYMVERS\n-    GLIBCXX_ENABLE_THREADS\n-</pre>\n-<p>All the features which can be controlled with enable/disable configure\n-   options.  Note how they're alphabetized now?  Keep them like that.  :-)\n-</p>\n-<pre>\n-    AC_LC_MESSAGES\n-    libtool bits\n-</pre>\n-<p>Things which we don't seem to use directly, but just has to be present\n-   otherwise stuff magically goes wonky.\n-</p>\n-\n-\n-<hr />\n-<h3><a name=\"enable\">GLIBCXX_ENABLE, the <code>--enable</code> howto</a></h3>\n-<p>All the GLIBCXX_ENABLE_FOO macros use a common helper, GLIBCXX_ENABLE.\n-   (You don't have to use it, but it's easy.)  The helper does two things\n-   for us:\n-</p>\n-\n-<ol>\n- <li>Builds the call to the AC_ARG_ENABLE macro, with --help text properly\n-     quoted and aligned.  (Death to changequote!)</li>\n- <li>Checks the result against a list of allowed possibilities, and signals\n-     a fatal error if there's no match.  This means that the rest of the\n-     GLIBCXX_ENABLE_FOO macro doesn't need to test for strange arguments,\n-     nor do we need to protect against empty/whitespace strings with the\n-     <code>\"x$foo\" = \"xbar\"</code> idiom.</li>\n-</ol>\n-\n-<p>Doing these things correctly takes some extra autoconf/autom4te code,\n-   which made our macros nearly illegible.  So all the ugliness is factored\n-   out into this one helper macro.\n-</p>\n-\n-<p>Many of the macros take an argument, passed from when they are expanded\n-   in configure.ac.  The argument controls the default value of the\n-   enable/disable switch.  Previously, the arguments themselves had defaults.\n-   Now they don't, because that's extra complexity with zero gain for us.\n-</p>\n-\n-<p>There are three \"overloaded signatures\".  When reading the descriptions\n-   below, keep in mind that the brackets are autoconf's quotation characters,\n-   and that they will be stripped.  Examples of just about everything occur\n-   in acinclude.m4, if you want to look.\n-</p>\n-\n-<pre>\n-    GLIBCXX_ENABLE (FEATURE, DEFAULT, HELP-ARG, HELP-STRING)\n-    GLIBCXX_ENABLE (FEATURE, DEFAULT, HELP-ARG, HELP-STRING, permit a|b|c)\n-    GLIBCXX_ENABLE (FEATURE, DEFAULT, HELP-ARG, HELP-STRING, SHELL-CODE-HANDLER)\n-</pre>\n-\n-<ul>\n- <li><p>FEATURE is the string that follows --enable.  The results of the test\n-     (such as it is) will be in the variable $enable_FEATURE, where FEATURE\n-     has been squashed.  Example:  <code>[extra-foo]</code>, controlled by the\n-     --enable-extra-foo option and stored in $enable_extra_foo.</p></li>\n- <li><p>DEFAULT is the value to store in $enable_FEATURE if the user does not\n-     pass --enable/--disable.  It should be one of the permitted values\n-     passed later.  Examples:  <code>[yes]</code>, or <code>[bar]</code>, or\n-     <code>[$1]</code> (which passes the argument given to the\n-     GLIBCXX_ENABLE_FOO macro as the default).</p>\n-     <p>For cases where we need to probe for particular models\n-     of things, it is useful to have an undocumented \"auto\" value here (see\n-     GLIBCXX_ENABLE_CLOCALE for an example).</p></li>\n- <li><p>HELP-ARG is any text to append to the option string itself in the\n-     --help output.  Examples: <code>[]</code> (i.e., an empty string,\n-     which appends nothing),\n-     <code>[=BAR]</code>, which produces\n-     <code>--enable-extra-foo=BAR</code>, and\n-     <code>[@&lt;:@=BAR@:&gt;@]</code>, which produces\n-     <code>--enable-extra-foo[=BAR]</code>.  See the difference?  See what\n-     it implies to the user?</p>\n-     <p>If you're wondering what that line noise in the last example was,\n-     that's how you embed autoconf special characters in output text.\n-     They're called\n-<a\n-href=\"http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_95.html#SEC95\"><em>quadrigraphs</em></a>\n-     and you should use them whenever necessary.</p></li>\n- <li><p>HELP-STRING is what you think it is.  Do not include the \"default\"\n-     text like we used to do; it will be done for you by GLIBCXX_ENABLE.\n-     By convention, these are not full English sentences.\n-     Example:  [turn on extra foo]</p></li>\n-</ul>\n-\n-<p>With no other arguments, only the standard autoconf patterns are\n-   allowed:  \"<code>--{enable,disable}-foo[={yes,no}]</code>\"  The\n-   $enable_FEATURE variable is guaranteed to equal either \"yes\" or \"no\"\n-   after the macro.  If the user tries to pass something else, an\n-   explanatory error message will be given, and configure will halt.\n-</p>\n-\n-<p>The second signature takes a fifth argument,\n-   \"<code>[permit <em>a</em>|<em>b</em>|<em>c</em>|<em>...</em>]</code>\"\n-   This allows <em>a</em> or <em>b</em> or ... after the equals sign in the\n-   option, and $enable_FEATURE is guaranteed to equal one of them after the\n-   macro.  Note that if you want to allow plain --enable/--disable with no\n-   \"=whatever\", you must include \"yes\" and \"no\" in the list of permitted\n-   values.  Also note that whatever you passed as DEFAULT must be in the list.\n-   If the user tries to pass something not on the list, a semi-explanatory\n-   error message will be given, and configure will halt.\n-   Example:  <code>[permit generic|gnu|ieee_1003.1-2001|yes|no|auto]</code>\n-</p>\n-\n-<p>The third signature takes a fifth argument.  It is arbitrary shell code\n-   to execute if the user actually passes the enable/disable option.  (If\n-   the user does not, the default is used.  Duh.)  No argument checking at\n-   all is done in this signature.  See GLIBCXX_ENABLE_CXX_FLAGS for an\n-   example of handling, and an error message.\n-</p>\n-\n-<hr />\n-</body>\n-</html>"}, {"sha": "00c749a449078830a8086f0fe5357e05f92f51e2", "filename": "libstdc++-v3/doc/html/17_intro/contribute.html", "status": "removed", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fcontribute.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fcontribute.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fcontribute.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,135 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-  <title>How to contribute</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n- title=\"GNU C++ Standard Library\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<!--990301 slightly modified version of the GCC contribute.html file-->\n-<!-- #include virtual=\"/include/header-subpages.html\"-->\n-<body>\n-<h2>How to contribute</h2>\n-<p> The Standard C++ Library v3, follows an open development\n-model. Active contributors are assigned maintainer-ship\n-responsibility, and given write access to the SVN repository. First\n-time contributors should follow this procedure:\n-</p>\n-\n-<hr />\n-<h4>ONE : read the documentation</h4> \n-\n-<ul>\n- <li> Get and read the relevant sections of the C++ language\n-specification. Copies of the full ISO 14882 standard are available on\n-line via the ISO mirror site for committee members. Non-members, or\n-those who have not paid for the privilege of sitting on the committee\n-and sustained their two meeting commitment for voting rights, may get\n-a copy of the standard from their respective national standards\n-organization. In the USA, this national standards organization is ANSI\n-and their web-site is right\n-\n- <a href=\"http://www.ansi.org\">here.</a> \n-(And if you've already registered with them, clicking this link will take you to directly to the place where you can \n-<a href=\"http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%3A2003\">buy the standard on-line.)</a>\n-</li>\n-\n-<li> The library working group bugs, and known defects, can be obtained here:\n- <a href=\"http://www.open-std.org/jtc1/sc22/wg21/\">http://www.open-std.org/jtc1/sc22/wg21 </a>\n-</li>\n-\n-<li> The newsgroup dedicated to standardization issues is comp.std.c++: this FAQ for this group is quite useful and can be found <a href=\"http://www.jamesd.demon.co.uk/csc/faq.html\"> here </a>.\n-</li>\n-\n- <li> Peruse the <a href=\"http://www.gnu.org/prep/standards_toc.html\">GNU Coding Standards</a>, and chuckle when you hit the part about \"Using Languages Other Than C.\" \n-</li>\n-\n- <li> Be familiar with the extensions that preceded these general GNU rules. These style issues for libstdc++ can be found in the file C++STYLE, located in the root level of the distribution, or <a href=\"C++STYLE\"> here. </a>\n-</li>\n-\n- <li> And last but certainly not least, read the library-specific information found <a href=\"../documentation.html\"> here.</a>\n-</li>\n-\n-</ul>\n-\n-\n-\n-<hr />\n-<h4>TWO : copyright assignment</h4> \n-<p>\n-Small changes can be accepted without a copyright assignment form on\n-file. New code and additions to the library need completed copyright\n-assignment form on file at the FSF. Note: your employer may be required\n-to fill out appropriate disclaimer forms as well. \n-</p>\n-\n-<p> Historically, the libstdc++ assignment form added the following question:\n-</p>\n-\n-<code>[Which Belgian comic book character is better, Tintin or\n-Asterix, and why?]</code>\n-\n-<p>\n-While not strictly necessary, humoring the maintainers and answering\n-this question would be appreciated.\n-</p>\n-\n-<p>\n-For more information about getting a copyright assignment, please see \n-<a href=\"http://www.gnu.org/prep/maintain/html_node/Legal-Matters.html\">Legal\n-Matters</a>.\n-</p>\n-\n-<p>\n-Please contact <a href=\"mailto:bkoz+assign@redhat.com\">Benjamin\n-Kosnik</a> if you are confused about the assignment or have general\n-licensing questions. When requesting an assignment form from <a\n-href=\"mailto:assign@gnu.org\">assign@gnu.org</a>, please cc\n-the above libstdc++ maintainer so that progress can be monitored.\n-</p>\n-\n-\n-<hr />\n-<h4>THREE : submitting patches</h4> \n-\n-<p>\n-Every patch must have several pieces of information before it can be\n-properly evaluated. Ideally (and to ensure the fastest possible\n-response from the maintainers) it would have all of these pieces:\n-</p>\n-\n-<ul>\n-\n- <li> A description of the bug and how your patch fixes this bug. For\n- new features a description of the feature and your implementation. </li>\n-\n- <li> A ChangeLog entry as plain text; see the various ChangeLog files\n- for format and content. If using you are using emacs as your editor,\n- simply position the insertion point at the beginning of your change\n- and hit CX-4a to bring up the appropriate ChangeLog\n- entry. See--magic! Similar functionality also exists for vi.  </li>\n-\n- <li> A testsuite submission or sample program that will easily and\n- simply show the existing error or test new functionality.  </li>\n-\n- <li> The patch itself. If you are accessing the SVN repository\n- use \"svn update; svn diff NEW\"; else, use \"diff -cp OLD NEW\"\n- ... If your version of diff does not support these options, then\n- get the latest version of GNU diff. The <a\n- href=\"http://gcc.gnu.org/wiki/SvnTricks\">SVN Tricks</a> wiki page\n- has information on customising the output of <code>svn diff</code>.</li>\n-\n- <li> When you have all these pieces, bundle them up in a mail message\n-and send it to libstdc++@gcc.gnu.org. All patches and related\n-discussion should be sent to the libstdc++ mailing list. </li>\n-\n-</ul>\n-\n-</body>\n-</html>\n-"}, {"sha": "09f1a3c370ad85143a29e87c1d2ddc305ece0462", "filename": "libstdc++-v3/doc/html/17_intro/howto.html", "status": "removed", "additions": 0, "deletions": 737, "changes": 737, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,737 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards), Benjamin Kosnik, Felix Natter\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, gcc, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for libstdc++ chapter 17.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ HOWTO:  Chapter 17: Library Introduction</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n- title=\"GNU C++ Standard Library\" />\n-<link rel=\"Next\" href=\"../18_support/howto.html\" type=\"text/html\"\n-  title=\"Library Support\" />\n-<link rel=\"Copyright\" href=\"license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Chapter 17:  Library Introduction</a></h1>\n-\n-<p>Chapter 17 is actually a list of definitions and descriptions used\n-   in the following chapters of the Standard when describing the actual\n-   library.  Here, we use &quot;Introduction&quot; as an introduction\n-   to the <em>GNU implementation of</em> the ISO Standard C++ Library.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h1>Contents</h1>\n-<ul>\n-   <li><a href=\"#2.0\">Header Files</a></li>\n-   <li><a href=\"#3.0\">Namespaces</a></li>\n-   <li><a href=\"#6\">Macros</a></li>\n-   <li><a href=\"#5\">Implementation specific behavior</a></li>\n-   <li><a href=\"#7\">Multithreading</a></li>\n-</ul>\n-\n-<hr />\n-\n-<!-- ####################################################### -->\n-\n-<h2><a name=\"2.0\">Header Files</a></h2>\n-   <p>The C++ standard specifies the entire set of header files that must be\n-      available to all hosted implementations.  Actually, the word\n-      &quot;files&quot; is a misnomer, since the contents of the headers\n-      don't necessarily have to be in any kind of external file.  The\n-      only rule is that when one <code>#include</code>'s a header, the\n-      contents of that header become\n-      available, no matter how.\n-   </p>\n-\n-<p>That said, in practice files are used.</p>\n-\n-<p> There are two main types of include files: header files related to\n-a specific version of the ISO C++ standard (called Standard Headers),\n-and all others (TR1, C++ ABI, and Extensions).</p>\n-\n-<p>Two dialects of standard headers are supported, corresponding to\n-the 1998 standard as updated for 2003, and the draft of the upcoming\n-200x standard.\n-</p>\n-\n-<p>C++98/03 include files. These are available in the default compilation mode, ie <code>-std=c++98</code> or <code>-std=gnu++98</code>. \n-</p>\n-\n-<center><table border=\"1\"><caption>C++98 Library Headers</caption>\n-<tr><td>&lt;algorithm&gt;</td><td>&lt;iomanip&gt;</td><td>&lt;list&gt;</td><td>&lt;ostream&gt;</td><td>&lt;streambuf&gt;</td></tr>\n-<tr><td>&lt;bitset&gt;</td><td>&lt;ios&gt;</td><td>&lt;locale&gt;</td><td>&lt;queue&gt;</td><td>&lt;string&gt;</td></tr>\n-<tr><td>&lt;complex&gt;</td><td>&lt;iosfwd&gt;</td><td>&lt;map&gt;</td><td>&lt;set&gt;</td><td>&lt;typeinfo&gt;</td></tr>\n-<tr><td>&lt;deque&gt;</td><td>&lt;iostream&gt;</td><td>&lt;memory&gt;</td><td>&lt;sstream&gt;</td><td>&lt;utility&gt;</td></tr>\n-<tr><td>&lt;exception&gt;</td><td>&lt;istream&gt;</td><td>&lt;new&gt;</td><td>&lt;stack&gt;</td><td>&lt;valarray&gt;</td></tr>\n-<tr><td>&lt;fstream&gt;</td><td>&lt;iterator&gt;</td><td>&lt;numeric&gt;</td><td>&lt;stdexcept&gt;</td><td>&lt;vector&gt;</td></tr>\n-<tr><td>&lt;functional&gt;</td><td>&lt;limits&gt;</td></tr>\n-</table></center>\n-\n-<p></p>\n-\n-<center><table border=\"1\"><caption>C++98 Headers for C Library Facilities</caption>\n-<tr><td>&lt;cassert&gt;</td><td>&lt;ciso646&gt;</td><td>&lt;csetjmp&gt;</td><td>&lt;cstdio&gt;</td><td>&lt;ctime&gt;</td></tr>\n-<tr><td>&lt;cctype&gt;</td><td>&lt;climits&gt;</td><td>&lt;csignal&gt;</td><td>&lt;cstdlib&gt;</td><td>&lt;cwchar&gt;</td></tr>\n-<tr><td>&lt;cerrno&gt;</td><td>&lt;clocale&gt;</td><td>&lt;cstdarg&gt;</td><td>&lt;cstring&gt;</td><td>&lt;cwctype&gt;</td></tr>\n-<tr><td>&lt;cfloat&gt;</td><td>&lt;cmath&gt;</td><td>&lt;cstddef&gt;</td></tr>\n-</table></center>\n-\n-<p>C++0x include files. These are only available in C++0x compilation mode, ie <code>-std=c++0x</code> or <code>-std=gnu++0x</code>. \n-</p>\n-\n-<center><table border=\"1\"><caption>C++0x Library Headers</caption>\n-<tr><td>&lt;algorithm&gt;</td><td>&lt;iomanip&gt;</td><td>&lt;locale&gt;</td><td>&lt;regex&gt;</td><td>&lt;tuple&gt;</td></tr>\n-<tr><td>&lt;array&gt;</td><td>&lt;ios&gt;</td><td>&lt;map&gt;</td><td>&lt;set&gt;</td><td>&lt;typeinfo&gt;</td></tr>\n-<tr><td>&lt;bitset&gt;</td><td>&lt;iosfwd&gt;</td><td>&lt;memory&gt;</td><td>&lt;sstream&gt;</td><td>&lt;type_traits&gt;</td></tr>\n-<tr><td>&lt;complex&gt;</td><td>&lt;iostream&gt;</td><td>&lt;new&gt;</td><td>&lt;stack&gt;</td><td>&lt;unordered_map&gt;</td></tr>\n-<tr><td>&lt;deque&gt;</td><td>&lt;istream&gt;</td><td>&lt;numeric&gt;</td><td>&lt;stdexcept&gt;</td><td>&lt;unordered_set&gt;</td></tr>\n-<tr><td>&lt;exception&gt;</td><td>&lt;iterator&gt;</td><td>&lt;ostream&gt;</td><td>&lt;streambuf&gt;</td><td>&lt;utility&gt;</td></tr>\n-<tr><td>&lt;fstream&gt;</td><td>&lt;limits&gt;</td><td>&lt;queue&gt;</td><td>&lt;string&gt;</td><td>&lt;valarray&gt;</td></tr>\n-<tr><td>&lt;functional&gt;</td><td>&lt;list&gt;</td><td>&lt;random&gt;</td><td>&lt;system_error&gt;</td><td>&lt;vector&gt;</td></tr>\n-</table></center>\n-\n-<p></p>\n-\n-<center><table border=\"1\"><caption>C++0x Headers for C Library Facilities</caption>\n-<tr><td>&lt;cassert&gt;</td><td>&lt;cfloat&gt;</td><td>&lt;cmath&gt;</td><td>&lt;cstddef&gt;</td><td>&lt;ctgmath&gt;</td></tr>\n-<tr><td>&lt;ccomplex&gt;</td><td>&lt;cinttypes&gt;</td><td>&lt;csetjmp&gt;</td><td>&lt;cstdint&gt;</td><td>&lt;ctime&gt;</td></tr>\n-<tr><td>&lt;cctype&gt;</td><td>&lt;ciso646&gt;</td><td>&lt;csignal&gt;</td><td>&lt;cstdio&gt;</td><td>&lt;cuchar&gt;</td></tr>\n-<tr><td>&lt;cerrno&gt;</td><td>&lt;climits&gt;</td><td>&lt;cstdarg&gt;</td><td>&lt;cstdlib&gt;</td><td>&lt;cwchar&gt;</td></tr>\n-<tr><td>&lt;cfenv&gt;</td><td>&lt;clocale&gt;</td><td>&lt;cstdbool&gt;</td><td>&lt;cstring&gt;</td><td>&lt;cwctype&gt;</td></tr>\n-</table></center>\n-\n-\n-<p>In addition, TR1 includes as:\n-</p>\n-\n-<center><table border=\"1\"><caption>TR1 Library Headers</caption>\n-<tr><td>&lt;tr1/array&gt;</td><td>&lt;tr1/memory&gt;</td><td>&lt;tr1/regex&gt;</td><td>&lt;tr1/type_traits&gt;</td><td>&lt;tr1/unordered_set&gt;</td></tr>\n-<tr><td>&lt;tr1/complex&gt;</td><td>&lt;tr1/random&gt;</td><td>&lt;tr1/tuple&gt;</td><td>&lt;tr1/unordered_map&gt;</td><td>&lt;tr1/utility&gt;</td></tr>\n-<tr><td>&lt;tr1/functional&gt;</td></tr>\n-</table></center>\n-\n-<p></p>\n-\n-<center><table border=\"1\"><caption>TR1 Headers for C Library Facilities</caption>\n-<tr><td>&lt;tr1/cmath&gt;</td><td>&lt;tr1/cfloat&gt;</td><td>&lt;tr1/cstdarg&gt;</td><td>&lt;tr1/cstdio&gt;</td><td>&lt;tr1/ctime&gt;</td></tr>\n-<tr><td>&lt;tr1/ccomplex&gt;</td><td>&lt;tr1/cinttypes&gt;</td><td>&lt;tr1/cstdbool&gt;</td><td>&lt;tr1/cstdlib&gt;</td><td>&lt;tr1/cwchar&gt;</td></tr>\n-<tr><td>&lt;tr1/cfenv&gt;</td><td>&lt;tr1/climits&gt;</td><td>&lt;tr1/cstdint&gt;</td><td>&lt;tr1/ctgmath&gt;</td><td>&lt;tr1/cwctype&gt;</td></tr>\n-</table></center>\n-\n-<p>Also included are files for the C++ ABI interface:\n-</p>\n-<center><table border=\"1\"><caption>C++ ABI Headers</caption>\n-<tr><td>&lt;cxxabi.h&gt;</td><td>&lt;cxxabi_forced.h&gt;</td></tr>\n-</table></center>\n-\n-<p>And a large variety of extensions.\n-</p>\n-\n-<center><table border=\"1\"><caption>Extension Headers</caption>\n-<tr><td>&lt;ext/algorithm&gt;</td><td>&lt;ext/debug_allocator.h&gt;</td><td>&lt;ext/mt_allocator.h&gt;</td><td>&lt;ext/pod_char_traits.h&gt;</td><td>&lt;ext/stdio_sync_filebuf.h&gt;</td></tr>\n-<tr><td>&lt;ext/array_allocator.h&gt;</td><td>&lt;ext/enc_filebuf.h&gt;</td><td>&lt;ext/new_allocator.h&gt;</td><td>&lt;ext/pool_allocator.h&gt;</td><td>&lt;ext/throw_allocator.h&gt;</td></tr>\n-<tr><td>&lt;ext/atomicity.h&gt;</td><td>&lt;ext/functional&gt;</td><td>&lt;ext/numeric&gt;</td><td>&lt;ext/rb_tree&gt;</td><td>&lt;ext/typelist.h&gt;</td></tr>\n-<tr><td>&lt;ext/bitmap_allocator.h&gt;</td><td>&lt;ext/iterator&gt;</td><td>&lt;ext/numeric_traits.h&gt;</td><td>&lt;ext/rope&gt;</td><td>&lt;ext/type_traits.h&gt;</td></tr>\n-<tr><td>&lt;ext/codecvt_specializations.h&gt;</td><td>&lt;ext/malloc_allocator.h&gt;</td><td>&lt;ext/pb_ds/assoc_container.h&gt;</td><td>&lt;ext/slist&gt;</td><td>&lt;ext/vstring.h&gt;</td></tr>\n-<tr><td>&lt;ext/concurrence.h&gt;</td><td>&lt;ext/memory&gt;</td><td>&lt;ext/pb_ds/priority_queue.h&gt;</td><td>&lt;ext/stdio_filebuf.h&gt;</td></tr>\n-</table></center>\n-\n-<p></p>\n-\n-<center><table border=\"1\"><caption>Extension Debug Headers</caption>\n-<tr><td>&lt;debug/bitset&gt;</td><td>&lt;debug/list&gt;</td><td>&lt;debug/set&gt;</td><td>&lt;debug/unordered_map&gt;</td><td>&lt;debug/vector&gt;</td></tr>\n-<tr><td>&lt;debug/deque&gt;</td><td>&lt;debug/map&gt;</td><td>&lt;debug/string&gt;</td><td>&lt;debug/unordered_set&gt;</td></tr>\n-</table></center>\n-\n-<p></p>\n-\n-<center><table border=\"1\"><caption>Extension Parallel Headers</caption>\n-<tr><td>&lt;parallel/algorithm&gt;</td><td>&lt;parallel/numeric&gt;</td></tr>\n-</table></center>\n-\n-<hr />\n-<h2><a name=\"2.1\">Recipes for mixing headers</a></h2>\n-\n-<p> A few simple rules.\n-</p>\n-\n-<p>First, mixing different dialects of the standard headers is not\n-possible. It's an all-or-nothing affair. Thus, code like\n-</p>\n-\n-<pre>\n-#include &lt;array&gt;\n-#include &lt;functional&gt;\n-</pre>\n-\n-<p>Implies C++0x mode. To use the entities in &lt;array&gt;, the C++0x\n-compilation mode must be used, which implies the C++0x functionality\n-(and deprecations) in &lt;functional&gt; will be present.\n-</p>\n-\n-<p>Second, the other headers can be included with either dialect of\n-the standard headers, although features and types specific to C++0x\n-are still only enabled when in C++0x compilation mode. So, to use\n-rvalue references with <code>__gnu_cxx::vstring</code>, or to use the\n-debug-mode versions of <code>std::unordered_map</code>, one must use\n-the <code>std=gnu++0x</code> compiler flag. (Or <code>std=c++0x</code>, of course.)\n-</p>\n-\n-<p>A special case of the second rule is the mixing of TR1 and C++0x\n-facilities. It is possible (although not especially prudent) to\n-include both the TR1 version and the C++0x version of header in the\n-same translation unit:\n-</p>\n-\n-<pre>\n-#include &lt;tr1/type_traits&gt;\n-#include &lt;type_traits&gt;\n-</pre>\n-\n-<p> Several parts of C++0x diverge quite substantially from TR1 predecessors.\n-</p>\n-\n-\n-<hr />\n-<h2><a name=\"2.2\">The C Headers and <code>namespace std</code></a></h2>\n-<p>\n-\tThe standard specifies that if one includes the C-style header\n-\t(&lt;math.h&gt; in this case), the symbols will be available\n-\tin the global namespace and perhaps in\n-\tnamespace <code>std::</code> (but this is no longer a firm\n-\trequirement.) One the other hand, including the C++-style\n-\theader (&lt;cmath&gt;) guarantees that the entities will be\n-\tfound in namespace std and perhaps in the global namespace.\n-      </p>\n-\n-<p>\n-Usage of C++-style headers is recommended, as then\n-C-linkage names can be disambiguated by explicit qualification, such\n-as by <code>std::abort</code>. In addition, the C++-style headers can\n-use function overloading to provide a simpler interface to certain\n-families of C-functions. For instance in &lt;cmath&gt;, the\n-function <code>std::sin</code> has overloads for all the builtin\n-floating-point types. This means that <code>std::sin</code> can be\n-used uniformly, instead of a combination\n-of <code>std::sinf</code>, <code>std::sin</code>,\n-and <code>std::sinl</code>.\n-</p>\n-\n-<hr />\n-<h2><a name=\"2.3\">Precompiled Headers</a></h2>\n-\n-<p>There are three base header files that are provided. They can be\n-used to precompile the standard headers and extensions into binary\n-files that may the be used to speed compiles that use these headers.\n-</p>\n-\n-\n-<ul>\n-<li>stdc++.h\n-<p>Includes all standard headers. Actual content varies depending on\n-language dialect.\n-</p>\n-</li>\n-\n-<li>stdtr1c++.h\n-<p>Includes all of &lt;stdc++.h&gt;, and adds all the TR1 headers.\n-</p>\n-</li>\n-\n-<li>extc++.h\n-<p>Includes all of &lt;stdtr1c++.h&gt;, and adds all the Extension headers.\n-</p></li>\n-</ul>\n-\n-<p>How to construct a .gch file from one of these base header files.</p>\n-\n-<p>First, find the include directory for the compiler. One way to do\n-this is:</p>\n-\n-<pre>\n-g++ -v hello.cc\n-\n-#include &lt;...&gt; search starts here:\n- /mnt/share/bld/H-x86-gcc.20071201/include/c++/4.3.0\n-...\n-End of search list.\n-</pre>\n-\n-\n-<p>Then, create a precompiled header file with the same flags that\n-will be used to compile other projects.</p>\n-\n-<pre>\n-g++ -Winvalid-pch -x c++-header -g -O2 -o ./stdc++.h.gch /mnt/share/bld/H-x86-gcc.20071201/include/c++/4.3.0/x86_64-unknown-linux-gnu/bits/stdc++.h\n-</pre>\n-\n-<p>The resulting file will be quite large: the current size is around\n-thirty megabytes. </p>\n-\n-<p>How to use the resulting file.</p>\n-\n-<pre>\n-g++ -I. -include stdc++.h  -H -g -O2 hello.cc \n-</pre>\n-\n-<p>Verification that the PCH file is being used is easy:</p>\n-\n-<pre>\n-g++ -Winvalid-pch -I. -include stdc++.h -H -g -O2 hello.cc -o test.exe\n-! ./stdc++.h.gch\n-. /mnt/share/bld/H-x86-gcc.20071201/include/c++/4.3.0/iostream\n-. /mnt/share/bld/H-x86-gcc.20071201include/c++/4.3.0/string\n-</pre>\n-\n-<p>The exclamation point to the left of the <code>stdc++.h.gch</code> listing means that the generated PCH file was used, and thus the </p>\n-<p></p>\n-\n-<p> Detailed information about creating precompiled header files can be found in the GCC <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html\">documentation</a>.\n-</p>\n-\n-\n-<hr />\n-<h2><a name=\"3.0\">Namespaces</a></h2>\n-\n-\n-<p> There are three main namespaces.\n-</p>\n-\n-<ul>\n-<li>std\n-<p>The ISO C++ standards specify that \"all library entities are defined\n-within namespace std.\" This includes namepaces nested\n-within <code>namespace std</code>, such as <code>namespace\n-std::tr1</code>.\n-</p>\n-</li>\n-<li>abi\n-<p>Specified by the C++ ABI. This ABI specifies a number of type and\n-function APIs supplemental to those required by the ISO C++ Standard,\n-but necessary for interoperability.\n-</p>\n-</li>\n-\n-<li>__gnu_\n-<p>Indicating one of several GNU extensions. Choices\n-include <code>__gnu_cxx</code>, <code>__gnu_debug</code>, <code>__gnu_parallel</code>,\n-and <code>__gnu_pbds</code>.\n-</p></li>\n-</ul>\n-\n-<p> A complete list of implementation namespaces (including namespace contents) is available in the generated source <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/namespaces.html\">documentation</a>. \n-</p>\n-\n-\n-<hr />\n-<h2><a name=\"3.1\">Namespace <code>std::</code></a></h2>\n-\n-<p>\n-      One standard requirement is that the library components are defined\n-      in <code>namespace std::</code>. Thus, in order to use these types or\n-      functions, one must do one of two things:\n-</p>\n-\n-      <div class=\"itemizedlist\"><ul type=\"disc\"> <li><p>put a kind of\n-<span class=\"emphasis\"><i>using-declaration</i></span> in your source\n-(either <code>using namespace std;</code> or i.e. <code>using\n-std::string;</code>) This approach works well for individual source files, but\n-should not be used in a global context, like header files.\n-\t  </p></li> <li><p>use a <span class=\"emphasis\"><i>fully\n-qualified name</i></span> for each library symbol\n-(i.e. <code>std::string</code>, <code>std::cout</code>) Always can be\n-used, and usually enhanced, by strategic use of typedefs. (In the\n-cases where the qualified verbiage becomes unwieldy.)\n-\t  </p></li>\n-</ul></div>\n-\n-<hr />\n-<h2><a name=\"3.2\">Using namespace composition</a></h2>\n-\n-<p>\n-Best practice in programming suggests sequestering new data or\n-functionality in a sanely-named, unique namespace whenever\n-possible. This is considered an advantage over dumping everything in\n-the global namespace, as then name look-up can be explicitly enabled or\n-disabled as above, symbols are consistently mangled without repetitive\n-naming prefixes or macros, etc.\n-</p>\n-\n-<p>For instance, consider a project that defines most of its classes in <code>namespace gtk</code>. It is possible to\n-\tadapt <code>namespace gtk</code> to <code>namespace std</code> by using a C++-feature called\n-\t<span class=\"emphasis\"><i>namespace composition</i></span>. This is what happens if\n-\ta <span class=\"emphasis\"><i>using</i></span>-declaration is put into a\n-\tnamespace-definition: the imported symbol(s) gets imported into the\n-\tcurrently active namespace(s). For example:\n-</p>\n-<pre class=\"programlisting\">\n-namespace gtk \n-{\n-  using std::string;\n-  using std::tr1::array;\n-\n-  class Window { ... };\n-}\n-</pre>\n-<p>\n-\tIn this example, <code>std::string</code> gets imported into\n-\t<code>namespace gtk</code>.  The result is that use of\n-\t<code>std::string</code> inside namespace gtk can just use <code>string</code>, without the explicit qualification. \n-\tAs an added bonus, \n-\t<code>std::string</code> does not get imported into\n-\tthe global namespace.  Additionally, a more elaborate arrangement can be made for backwards compatibility and portability, whereby the\n-\t<code>using</code>-declarations can wrapped in macros that\n-\tare set based on autoconf-tests to either &quot;&quot; or i.e. <code>using\n-\t  std::string;</code> (depending on whether the system has\n-\tlibstdc++ in <code>std::</code> or not).  (ideas from\n-\t<tt>&lt;<a href=\"mailto:llewelly@dbritsch.dsl.xmission.com\">llewelly@dbritsch.dsl.xmission.com</a>&gt;</tt>, Karl Nelson\n-\t<tt>&lt;<a href=\"mailto:kenelson@ece.ucdavis.edu\">kenelson@ece.ucdavis.edu</a>&gt;</tt>)\n-</p>\n-\n-<hr />\n-<h2><a name=\"6\">Macros for libstdc++</a></h2>\n-\n-   <p>All pre-processor switches and configurations are all gathered\n-      in the file <code>c++config.h</code>, which is generated during\n-      the libstdc++ configuration and build process, and included by\n-      files part of the public libstdc++ API. Most of these macros\n-      should not be used by consumers of libstdc++, and are reserved\n-      for internal implementation use. <strong>These macros cannot be\n-      redefined</strong>. However, a select handful of these macro\n-      control libstdc++ extensions and extra features, or provide\n-      versioning information for the API, and are able to be used.\n-   </p>\n-\n-   <p>All library macros begin with <code>_GLIBCXX_</code> (except for\n-   versions 3.1.x to 3.3.x, which use <code>_GLIBCPP_</code>).\n-   </p>\n-\n-   <p>Below is the macro which users may check for library version\n-      information. </p>\n-\n-    <dl>\n-    <dt><code>__GLIBCXX__</code></dt> <dd>The current version of\n-    libstdc++ in compressed ISO date format, form of an unsigned\n-    long. For details on the value of this particular macro for a\n-    particular release, please consult this <a href=\"abi.html\">\n-    document</a>.</dd> </dl>\n-\n-   <p>Below are the macros which users may change with #define/#undef or\n-      with -D/-U compiler flags.  The default state of the symbol is\n-      listed.</p>\n-\n-   <p>&quot;Configurable&quot; (or &quot;Not configurable&quot;) means\n-      that the symbol is initially chosen (or not) based on\n-      --enable/--disable options at library build and configure time\n-      (documented <a href=\"../configopts.html\">here</a>), with the\n-      various --enable/--disable choices being translated to\n-      #define/#undef).\n-   </p> \n-\n-   <p> &quot;ABI&quot; means that changing from the default value may\n-  mean changing the ABI of compiled code. In other words, these\n-  choices control code which has already been compiled (i.e., in a\n-  binary such as libstdc++.a/.so).  If you explicitly #define or\n-  #undef these macros, the <em>headers</em> may see different code\n-  paths, but the <em>libraries</em> which you link against will not.\n-  Experimenting with different values with the expectation of\n-  consistent linkage requires changing the config headers before\n-  building/installing the library.\n-   </p>   \n-\n-    <dl>\n-    <dt><code>_GLIBCXX_DEPRECATED</code></dt>\n-    <dd>Defined by default. Not configurable. ABI-changing. Turning this off\n-        removes older ARM-style iostreams code, and other anachronisms\n-        from the API.  This macro is dependent on the version of the\n-        standard being tracked, and as a result may give different results for\n-        <code>-std=c++98</code> and <code>-std=c++0x</code>. This may\n-        be useful in updating old C++ code which no longer meet the\n-        requirements of the language, or for checking current code\n-        against new language standards.  </dd>\n-\n-    <dt><code>_GLIBCXX_FORCE_NEW</code></dt> <dd>Undefined by\n-    default. When defined, memory allocation and allocators controlled\n-    by libstdc++ call operator new/delete without caching and\n-    pooling. Configurable via\n-    <code>--enable-libstdcxx-allocator</code>. ABI-changing.\n-    </dd>\n-\n-\n-    <dt><code>_GLIBCXX_CONCEPT_CHECKS</code></dt> <dd>Undefined by\n-    default.  Configurable via <code>--enable-concept-checks</code>.\n-    When defined, performs compile-time checking on certain template\n-    instantiations to detect violations of the requirements of the\n-    standard.  This is described in more detail <a\n-    href=\"../19_diagnostics/howto.html#3\">here</a>.</dd>\n-\n-    <dt><code>_GLIBCXX_DEBUG</code></dt>\n-    <dd>Undefined by default. When defined, compiles\n-    user code using the <a href=\"../ext/debug.html#safe\">libstdc++ debug\n-    mode</a>.\n-    </dd>\n-    <dt><code>_GLIBCXX_DEBUG_PEDANTIC</code></dt>\n-    <dd>Undefined by default. When defined while\n-    compiling with the <a href=\"../ext/debug.html#safe\">libstdc++ debug\n-    mode</a>, makes the debug mode extremely picky by making the use\n-    of libstdc++ extensions and libstdc++-specific behavior into\n-    errors.\n-    </dd>\n-    <dt><code>_GLIBCXX_PARALLEL</code></dt>\n-    <dd>Undefined by default. When defined, compiles\n-    user code using the <a href=\"../ext/parallel_mode.html\">libstdc++ parallel\n-    mode</a>.\n-    </dd>\n-    </dl>\n-\n-<hr />\n-<h2><a name=\"7\">The Standard C++ library and multithreading</a></h2>\n-   <p>This section discusses issues surrounding the proper compilation\n-      of multithreaded applications which use the Standard C++\n-      library.  This information is GCC-specific since the C++\n-      standard does not address matters of multithreaded applications.\n-      Unless explicitly prefaced, all information in this section is\n-      relevant to the GCC 3.0 release and all later releases.\n-   </p>\n-   <p>Earlier GCC releases had a somewhat different approach to\n-      threading configuration and proper compilation.  Before GCC 3.0,\n-      configuration of the threading model was dictated by compiler\n-      command-line options and macros (both of which were somewhat\n-      thread-implementation and port-specific).  There were no\n-      guarantees related to being able to link code compiled with one\n-      set of options and macro setting with another set.  For GCC 3.0,\n-      configuration of the threading model used with libraries and\n-      user-code is performed when GCC is configured and built using\n-      the --enable-threads and --disable-threads options.  The ABI is\n-      stable for symbol name-mangling and limited functional\n-      compatibility exists between code compiled under different\n-      threading models.\n-   </p>\n-   <p>All normal disclaimers aside, multithreaded C++ application are\n-      only supported when libstdc++ and all user code was built with\n-      compilers which report (via <code> gcc/g++ -v </code>) the same thread\n-      model and that model is not <em>single</em>.  As long as your\n-      final application is actually single-threaded, then it should be\n-      safe to mix user code built with a thread model of\n-      <em>single</em> with a libstdc++ and other C++ libraries built\n-      with another thread model useful on the platform.  Other mixes\n-      may or may not work but are not considered supported.  (Thus, if\n-      you distribute a shared C++ library in binary form only, it may\n-      be best to compile it with a GCC configured with\n-      --enable-threads for maximal interchangeability and usefulness\n-      with a user population that may have built GCC with either\n-      --enable-threads or --disable-threads.)\n-   </p>\n-   <p>When you link a multithreaded application, you will probably\n-      need to add a library or flag to g++.  This is a very\n-      non-standardized area of GCC across ports.  Some ports support a\n-      special flag (the spelling isn't even standardized yet) to add\n-      all required macros to a compilation (if any such flags are\n-      required then you must provide the flag for all compilations not\n-      just linking) and link-library additions and/or replacements at\n-      link time.  The documentation is weak.  Here is a quick summary\n-      to display how ad hoc this is: On Solaris, both -pthreads and\n-      -threads (with subtly different meanings) are honored.  On OSF,\n-      -pthread and -threads (with subtly different meanings) are\n-      honored.  On Linux/i386, -pthread is honored.  On FreeBSD,\n-      -pthread is honored.  Some other ports use other switches.\n-      AFAIK, none of this is properly documented anywhere other than\n-      in ``gcc -dumpspecs'' (look at lib and cpp entries).\n-   </p>\n-   <p>See <a href=\"../faq/index.html#5_6\">FAQ</a> (general overview), <a\n-      href=\"../23_containers/howto.html#3\">23</a> (containers), and <a\n-      href=\"../27_io/howto.html#9\">27</a> (I/O) for more information.\n-   </p>\n-   <p>The libstdc++ library has been designed so that it can be used in\n-      multithreaded applications (with libstdc++-v2 this was\n-      only true of the STL parts.)  The first problem is\n-      finding a <em>fast</em> method of implementation portable to all\n-      platforms.  Due to historical reasons, some of the library is\n-      written against per-CPU-architecture spinlocks and other parts\n-      against the gthr.h abstraction layer which is provided by gcc.\n-      A minor problem that pops up every so often is different\n-      interpretations of what &quot;thread-safe&quot; means for a\n-      library (not a general program).  We currently use the <a\n-      href=\"http://www.sgi.com/tech/stl/thread_safety.html\">same\n-      definition that SGI</a> uses for their STL subset.  However, the\n-      exception for read-only containers only applies to the STL\n-      components. This definition is widely-used and something similar\n-      will be used in the next version of the C++ standard library.\n-   </p>\n-   <p>Here is a small link farm to threads (no pun) in the mail archives\n-      that discuss the threading problem.  Each link is to the first\n-      relevant message in the thread; from there you can use\n-      &quot;Thread Next&quot; to move down the thread.  This farm is in\n-      latest-to-oldest order.\n-   </p>\n-      <ul>\n-        <li>Our threading expert Loren gives a breakdown of\n-        <a href=\"http://gcc.gnu.org/ml/libstdc++/2001-10/msg00024.html\">the\n-        six situations involving threads</a> for the 3.0 release series.</li>\n-        <li><a href=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00384.html\">\n-        This message</a> inspired a recent updating of issues with threading\n-        and the SGI STL library.  It also contains some example\n-        POSIX-multithreaded STL code.</li>\n-      </ul>\n-   <p> (A large selection of links to older messages has been removed; many\n-      of the messages from 1999 were lost in a disk crash, and the few\n-      people with access to the backup tapes have been too swamped with work\n-      to restore them.  Many of the points have been superseded anyhow.)\n-   </p>\n-   <p>This section will be updated as new and interesting issues come\n-      to light.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"5\">Behavior specific to libstdc++</a></h2>\n-   <p>The ISO standard defines the following phrase:\n-   </p>\n-     <blockquote><dl>\n-     <dt><code>[1.3.5] implementation-defined behavior</code></dt>\n-     <dd>behavior, for a well-formed program construct and correct data, that\n-         depends on the implementation <strong>and that each implementation\n-         shall document</strong>.\n-     </dd>\n-     </dl></blockquote>\n-   <p>We do so here, for the C++ library only.  Behavior of the compiler,\n-      linker, runtime loader, and other elements of &quot;the\n-      implementation&quot; are documented elsewhere.  Everything listed in\n-      Annex B, Implementation Qualities, are also part of the compiler, not\n-      the library.\n-   </p>\n-   <p>For each entry, we give the section number of the standard, when\n-      applicable.  This list is probably incomplet and inkorrekt.\n-   </p>\n-   <p><strong>[1.9]/11 #3</strong> If <code>isatty(3)</code> is true, then\n-      interactive stream support is implied.\n-   </p>\n-   <p><strong>[17.4.4.5]</strong> Non-reentrant functions are probably best\n-      discussed in the various sections on multithreading (see above).\n-   </p>\n-   <!-- [17.4.4.8]/3 says any function that doesn't have an exception-spec\n-        can throw whatever we want; see also its footnote.  Let's list those\n-        in the sections where the function itself occurs.\n-   -->\n-   <p><strong>[18.1]/4</strong> The type of <code>NULL</code> is described\n-      <a href=\"../18_support/howto.html#1\">here</a>.\n-   </p>\n-   <p><strong>[18.3]/8</strong> Even though it's listed in the library\n-      sections, libstdc++ has zero control over what the cleanup code hands\n-      back to the runtime loader.  Talk to the compiler people.  :-)\n-   </p>\n-   <p><strong>[18.4.2.1]/5</strong> (bad_alloc),<br />\n-      <strong>[18.5.2]/5</strong> (bad_cast),<br />\n-      <strong>[18.5.3]/5</strong> (bad_typeid),<br />\n-      <strong>[18.6.1]/8</strong> (exception),<br />\n-      <strong>[18.6.2.1]/5</strong> (bad_exception):  The <code>what()</code>\n-      member function of class <code>std::exception</code>, and these other\n-      classes publicly derived from it, simply returns the name of the\n-      class.  But they are the <em>mangled</em> names; you will need to call\n-      <code>c++filt</code> and pass the names as command-line parameters to\n-      demangle them, or call a\n-      <a href=\"../18_support/howto.html#5\">runtime demangler function</a>.\n-      (The classes in <code>&lt;stdexcept&gt;</code> have constructors which\n-      require an argument to use later for <code>what()</code> calls, so the\n-      problem of <code>what()</code>'s value does not arise in most\n-      user-defined exceptions.)\n-   </p>\n-   <p><strong>[18.5.1]/7</strong> The return value of\n-      <code>std::type_info::name()</code> is the mangled type name (see the\n-      previous entry for more).\n-   </p>\n-   <p><strong>[20.1.5]/5</strong> <em>&quot;Implementors are encouraged to\n-      supply libraries that can accept allocators that encapsulate more\n-      general memory models and that support non-equal instances.  In such\n-      implementations, any requirements imposed on allocators by containers\n-      beyond those requirements that appear in Table 32, and the semantics\n-      of containers and algorithms when allocator instances compare\n-      non-equal, are implementation-defined.&quot;</em>  As yet we don't\n-      have any allocators which compare non-equal, so we can't describe how\n-      they behave.\n-   </p>\n-   <p><strong>[21.1.3.1]/3,4</strong>,<br />\n-      <strong>[21.1.3.2]/2</strong>,<br />\n-      <strong>[23.*]'s foo::iterator</strong>,<br />\n-      <strong>[27.*]'s foo::*_type</strong>,<br />\n-      <strong>others...</strong>\n-      Nope, these types are called implementation-defined because you\n-      shouldn't be taking advantage of their underlying types.  Listing them\n-      here would defeat the purpose.  :-)\n-   </p>\n-   <p><strong>[21.1.3.1]/5</strong> I don't really know about the mbstate_t\n-      stuff... see the <a href=\"../22_locale/howto.html\">chapter 22 notes</a>\n-      for what does exist.\n-   </p>\n-   <p><strong>[22.*]</strong> Anything and everything we have on locale\n-      implementation will be described\n-      <a href=\"../22_locale/howto.html\">over here</a>.\n-   </p>\n-   <p><strong>[26.2.8]/9</strong> I have no idea what\n-      <code>complex&lt;T&gt;</code>'s pow(0,0) returns.\n-   </p>\n-   <p><strong>[27.4.2.4]/2</strong> Calling\n-      <code>std::ios_base::sync_with_stdio</code> after I/O has already been\n-      performed on the standard stream objects will\n-      flush the buffers, and <!-- this line might go away -->\n-      destroy and recreate the underlying buffer instances.  Whether or not\n-      the previously-written I/O is destroyed in this process depends mostly\n-      on the --enable-libio choice:  for stdio, if the written data is\n-      already in the stdio buffer, the data may be completely safe!\n-   </p>\n-   <p><strong>[27.6.1.1.2]</strong>,<br />\n-      <strong>[27.6.2.3]</strong> The I/O sentry ctor and dtor can perform\n-      additional work than the minimum required.  We are not currently taking\n-      advantage of this yet.\n-   </p>\n-   <p><strong>[27.7.1.3]/16</strong>,<br />\n-      <strong>[27.8.1.4]/10</strong>\n-      The effects of <code>pubsetbuf/setbuf</code> are described\n-      <a href=\"../27_io/howto.html#2\">in this chapter</a>.\n-   </p>\n-   <p><strong>[27.8.1.4]/16</strong> Calling <code>fstream::sync</code> when\n-      a get area exists will... whatever <code>fflush()</code> does, I think.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-    <!--\n-    <dt><code></code></dt>\n-    <dd>\n-    </dd>\n-    -->\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>\n-\n-"}, {"sha": "294a00892d32f404ad75e798d624d6bb8969cc03", "filename": "libstdc++-v3/doc/html/17_intro/license.html", "status": "removed", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Flicense.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Flicense.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Flicense.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,119 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"libstdc++, license, licence\" />\n-   <meta name=\"DESCRIPTION\" content=\"Copying restrictions for libstdc++.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ copying</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" rev=\"Copyright\" href=\"../documentation.html\" type=\"text/html\"\n- title=\"GNU C++ Standard Library\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Licenses for the Library</a></h1>\n-\n-<p>There are two licenses affecting GNU libstdc++:  one for the code, and\n-   one for the documentation.  Here we will describe both of them, and try\n-   to answer some of the widespread questions.  If you have more questions,\n-   ask the FSF or the\n-   <a href=\"http://gcc.gnu.org/lists.html\">gcc mailing list</a>; the person\n-   writing this page is a programmer, not a lawyer.\n-</p>\n-\n-<hr />\n-\n-<h2>The Code:  Runtime GPL</h2>\n-\n-<p>The source code of libstdc++ is distributed under version 2 of the\n-   <a href=\"COPYING\" type=\"text/plain\">GNU General Public License</a>, with the so-called\n-   &quot;runtime exception,&quot; as follows (or see any header or\n-   implementation file):\n-</p>\n-<pre>\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.\n-</pre>\n-\n-<p>Hopefully that text is self-explanatory.  If it isn't, you need to speak\n-   to your lawyer, or the Free Software Foundation.\n-</p>\n-\n-<!-- Most of the Q&A's are based on, paraphrased from, and outright stolen\n-     from this thread:\n-     http://gcc.gnu.org/ml/libstdc++/2000-q2/subjects.html#00050\n--->\n-<p><strong>Q:  So any program which uses libstdc++ falls under the GPL?</strong>\n- <br />A:  <strong>No.</strong>  The special exception permits use of the\n-     library in proprietary applications.\n-</p>\n-\n-<p><strong>Q:  How is that different from the GNU {Lesser,Library}\n-   GPL?</strong>\n- <!-- Quoting Jason Merrill from the thread above: -->\n- <br />A:  The LGPL requires that users be able to replace the LGPL code with a\n-     modified version; this is trivial if the library in question is a C\n-     shared library.  But there's no way to make that work with C++, where\n-     much of the library consists of inline functions and templates, which\n-     are expanded inside the code that uses the library.  So to allow people\n-     to replace the library code, someone using the library would have to\n-     distribute their own source, rendering the LGPL equivalent to the GPL.\n-</p>\n-\n-<p><strong>Q:  I see.  So, what restrictions <em>are</em> there on\n-   programs that use the library?</strong>\n- <br />A:  None.  We encourage such programs to be released as open source,\n-     but we won't punish you or sue you if you choose otherwise.\n-</p>\n-\n-<hr />\n-\n-<h2>The Docs:  GPL, FDL</h2>\n-\n-<p>The documentation shipped with the library and made available over the\n-   web, excluding the pages generated from source comments, are copyrighted\n-   by the Free Software Foundation, and placed under\n-   the <a href=\"COPYING.DOC\" type=\"text/plain\">GNU Free Documentation License version 1.1</a>.\n-   There are no Front-Cover Texts, no Back-Cover Texts, and\n-   <!-- as far as I know -->\n-   no Invariant Sections.\n-</p>\n-\n-<p> For documentation generated by doxygen or other automated tools\n-via processing source code comments and markup, the original source\n-code license applies to the generated files. Thus, the doxygen\n-documents are licensed GPL.\n-</p>\n-\n-<p>If you plan on making copies of the documentation, please let us know.\n-   We can probably offer suggestions.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-Comments and suggestions about this page are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-Comments or questions about the licenses themselves are also welcome, and\n-should be directed to the GCC list as descibed above.\n-</em></p>\n-\n-\n-</body>\n-</html>\n-\n-"}, {"sha": "2a561a9abc305b059bd2cc437026c459605f00c0", "filename": "libstdc++-v3/doc/html/17_intro/porting.html", "status": "removed", "additions": 0, "deletions": 992, "changes": 992, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fporting.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fporting.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fporting.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,992 +0,0 @@\n-<html lang=\"en\">\n-<head>\n-<title>Porting libstdc++</title>\n-<meta http-equiv=\"Content-Type\" content=\"text/html\">\n-<meta name=\"description\" content=\"Porting libstdc++\">\n-<meta name=\"generator\" content=\"makeinfo 4.6\">\n-<!--\n-Copyright &copy; 2000, 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n-\n-   <p>Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.2 or\n-any later version published by the Free Software Foundation; with the\n-Invariant Sections being \"GNU General Public License\", the Front-Cover\n-texts being (a) (see below), and with the Back-Cover Texts being (b)\n-(see below).  A copy of the license is included in the section entitled\n-\"GNU Free Documentation License\".\n-\n-   <p>(a) The FSF's Front-Cover Text is:\n-\n-   <p>A GNU Manual\n-\n-   <p>(b) The FSF's Back-Cover Text is:\n-\n-   <p>You have freedom to copy and modify this GNU Manual, like GNU\n-     software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.-->\n-<meta http-equiv=\"Content-Style-Type\" content=\"text/css\">\n-<style type=\"text/css\"><!--\n-  pre.display { font-family:inherit }\n-  pre.format  { font-family:inherit }\n-  pre.smalldisplay { font-family:inherit; font-size:smaller }\n-  pre.smallformat  { font-family:inherit; font-size:smaller }\n-  pre.smallexample { font-size:smaller }\n-  pre.smalllisp    { font-size:smaller }\n---></style>\n-</head>\n-<body>\n-<h1 class=\"settitle\">Porting libstdc++</h1>\n-<div class=\"node\">\n-<p><hr>\n-Node:&nbsp;<a name=\"Top\">Top</a>,\n-Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Operating%20system\">Operating system</a>,\n-Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#dir\">(dir)</a>\n-<br>\n-</div>\n-\n-<h2 class=\"unnumbered\">Porting libstdc++</h2>\n-\n-<p>This document explains how to port libstdc++ (the GNU C++ library) to\n-a new target.\n-\n-   <p>In order to make the GNU C++ library (libstdc++) work with a new\n-target, you must edit some configuration files and provide some new\n-header files.  Unless this is done, libstdc++ will use generic\n-settings which may not be correct for your target; even if they are\n-correct, they will likely be inefficient.\n-\n-   <p>Before you get started, make sure that you have a working C library on\n-your target.  The C library need not precisely comply with any\n-particular standard, but should generally conform to the requirements\n-imposed by the ANSI/ISO standard.\n-\n-   <p>In addition, you should try to verify that the C++ compiler generally\n-works.  It is difficult to test the C++ compiler without a working\n-library, but you should at least try some minimal test cases.\n-\n-   <p>(Note that what we think of as a \"target,\" the library refers to as\n-a \"host.\"  The comment at the top of <code>configure.ac</code> explains why.)\n-\n-   <p>Here are the primary steps required to port the library:\n-\n-<ul class=\"menu\">\n-<li><a accesskey=\"1\" href=\"#Operating%20system\">Operating system</a>:     Configuring for your operating system. \n-<li><a accesskey=\"2\" href=\"#CPU\">CPU</a>:                  Configuring for your processor chip. \n-<li><a accesskey=\"3\" href=\"#Character%20types\">Character types</a>:      Implementing character classification. \n-<li><a accesskey=\"4\" href=\"#Thread%20safety\">Thread safety</a>:        Implementing atomic operations. \n-<li><a accesskey=\"5\" href=\"#Numeric%20limits\">Numeric limits</a>: \tImplementing numeric limits. \n-<li><a accesskey=\"6\" href=\"#Libtool\">Libtool</a>:              Using libtool. \n-<li><a accesskey=\"7\" href=\"#GNU%20Free%20Documentation%20License\">GNU Free Documentation License</a>:  How you can copy and share this manual. \n-</ul>\n-\n-<div class=\"node\">\n-<p><hr>\n-Node:&nbsp;<a name=\"Operating%20system\">Operating system</a>,\n-Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#CPU\">CPU</a>,\n-Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Top\">Top</a>,\n-Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>\n-<br>\n-</div>\n-\n-<h2 class=\"chapter\">Operating system</h2>\n-\n-<p>If you are porting to a new operating system (as opposed to a new chip\n-using an existing operating system), you will need to create a new\n-directory in the <code>config/os</code> hierarchy.  For example, the IRIX\n-configuration files are all in <code>config/os/irix</code>.  There is no set\n-way to organize the OS configuration directory.  For example,\n-<code>config/os/solaris/solaris-2.6</code> and\n-<code>config/os/solaris/solaris-2.7</code> are used as configuration\n-directories for these two versions of Solaris.  On the other hand, both\n-Solaris 2.7 and Solaris 2.8 use the <code>config/os/solaris/solaris-2.7</code>\n-directory.  The important information is that there needs to be a\n-directory under <code>config/os</code> to store the files for your operating\n-system.\n-\n-   <p>You might have to change the <code>configure.host</code> file to ensure that\n-your new directory is activated.  Look for the switch statement that sets\n-<code>os_include_dir</code>, and add a pattern to handle your operating system\n-if the default will not suffice.  The switch statement switches on only\n-the OS portion of the standard target triplet; e.g., the <code>solaris2.8</code>\n-in <code>sparc-sun-solaris2.8</code>.  If the new directory is named after the\n-OS portion of the triplet (the default), then nothing needs to be changed.\n-\n-   <p>The first file to create in this directory, should be called\n-<code>os_defines.h</code>.  This file contains basic macro definitions\n-that are required to allow the C++ library to work with your C library. \n-\n-   <p>Several libstdc++ source files unconditionally define the macro\n-<code>_POSIX_SOURCE</code>.  On many systems, defining this macro causes\n-large portions of the C library header files to be eliminated\n-at preprocessing time.  Therefore, you may have to <code>#undef</code> this\n-macro, or define other macros (like <code>_LARGEFILE_SOURCE</code> or\n-<code>__EXTENSIONS__</code>).  You won't know what macros to define or\n-undefine at this point; you'll have to try compiling the library and\n-seeing what goes wrong.  If you see errors about calling functions\n-that have not been declared, look in your C library headers to see if\n-the functions are declared there, and then figure out what macros you\n-need to define.  You will need to add them to the\n-<code>CPLUSPLUS_CPP_SPEC</code> macro in the GCC configuration file for your\n-target.  It will not work to simply define these macros in\n-<code>os_defines.h</code>.\n-\n-   <p>At this time, there are a few libstdc++-specific macros which may be\n-defined:\n-\n-   <p><code>_GLIBCXX_USE_C99_CHECK</code> may be defined to 1 to check C99\n-function declarations (which are not covered by specialization below)\n-found in system headers against versions found in the library headers\n-derived from the standard.\n-\n-   <p><code>_GLIBCXX_USE_C99_DYNAMIC</code> may be defined to an expression that\n-yields 0 if and only if the system headers are exposing proper support\n-for C99 functions (which are not covered by specialization below).  If\n-defined, it must be 0 while bootstrapping the compiler/rebuilding the\n-library.\n-\n-   <p><code>_GLIBCXX_USE_C99_LONG_LONG_CHECK</code> may be defined to 1 to check\n-the set of C99 long long function declarations found in system headers\n-against versions found in the library headers derived from the\n-standard.\n-\n-   <p><code>_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC</code> may be defined to an\n-expression that yields 0 if and only if the system headers are\n-exposing proper support for the set of C99 long long functions.  If\n-defined, it must be 0 while bootstrapping the compiler/rebuilding the\n-library.\n-\n-   <p><code>_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC</code> may be defined to an\n-expression that yields 0 if and only if the system headers\n-are exposing proper support for the related set of macros.  If defined,\n-it must be 0 while bootstrapping the compiler/rebuilding the library.\n-\n-   <p><code>_GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_CHECK</code> may be defined\n-to 1 to check the related set of function declarations found in system\n-headers against versions found in the library headers derived from\n-the standard.\n-\n-   <p><code>_GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC</code> may be defined\n-to an expression that yields 0 if and only if the system headers\n-are exposing proper support for the related set of functions.  If defined,\n-it must be 0 while bootstrapping the compiler/rebuilding the library.\n-\n-   <p>Finally, you should bracket the entire file in an include-guard, like\n-this:\n-\n-<pre class=\"example\">     #ifndef _GLIBCXX_OS_DEFINES\n-     #define _GLIBCXX_OS_DEFINES\n-     ...\n-     #endif\n-     </pre>\n-\n-   <p>We recommend copying an existing <code>os_defines.h</code> to use as a\n-starting point.\n-\n-<div class=\"node\">\n-<p><hr>\n-Node:&nbsp;<a name=\"CPU\">CPU</a>,\n-Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Character%20types\">Character types</a>,\n-Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Operating%20system\">Operating system</a>,\n-Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>\n-<br>\n-</div>\n-\n-<h2 class=\"chapter\">CPU</h2>\n-\n-<p>If you are porting to a new chip (as opposed to a new operating system\n-running on an existing chip), you will need to create a new directory in the\n-<code>config/cpu</code> hierarchy.  Much like the <a href=\"#Operating%20system\">Operating system</a> setup,\n-there are no strict rules on how to organize the CPU configuration\n-directory, but careful naming choices will allow the configury to find your\n-setup files without explicit help.\n-\n-   <p>We recommend that for a target triplet <code>&lt;CPU&gt;-&lt;vendor&gt;-&lt;OS&gt;</code>, you\n-name your configuration directory <code>config/cpu/&lt;CPU&gt;</code>.  If you do this,\n-the configury will find the directory by itself.  Otherwise you will need to\n-edit the <code>configure.host</code> file and, in the switch statement that sets\n-<code>cpu_include_dir</code>, add a pattern to handle your chip.\n-\n-   <p>Note that some chip families share a single configuration directory, for\n-example, <code>alpha</code>, <code>alphaev5</code>, and <code>alphaev6</code> all use the\n-<code>config/cpu/alpha</code> directory, and there is an entry in the\n-<code>configure.host</code> switch statement to handle this.\n-\n-   <p>The <code>cpu_include_dir</code> sets default locations for the files controlling\n-<a href=\"#Thread%20safety\">Thread safety</a> and <a href=\"#Numeric%20limits\">Numeric limits</a>, if the defaults are not\n-appropriate for your chip.\n-\n-<div class=\"node\">\n-<p><hr>\n-Node:&nbsp;<a name=\"Character%20types\">Character types</a>,\n-Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Thread%20safety\">Thread safety</a>,\n-Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#CPU\">CPU</a>,\n-Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>\n-<br>\n-</div>\n-\n-<h2 class=\"chapter\">Character types</h2>\n-\n-<p>The library requires that you provide three header files to implement\n-character classification, analogous to that provided by the C libraries\n-<code>&lt;ctype.h&gt;</code> header.  You can model these on the files provided in\n-<code>config/os/generic</code>.  However, these files will almost\n-certainly need some modification.\n-\n-   <p>The first file to write is <code>ctype_base.h</code>.  This file provides\n-some very basic information about character classification.  The libstdc++\n-library assumes that your C library implements <code>&lt;ctype.h&gt;</code> by using\n-a table (indexed by character code) containing integers, where each of\n-these integers is a bit-mask indicating whether the character is\n-upper-case, lower-case, alphabetic, etc.  The <code>ctype_base.h</code>\n-file gives the type of the integer, and the values of the various bit\n-masks.  You will have to peer at your own <code>&lt;ctype.h&gt;</code> to figure out\n-how to define the values required by this file.\n-\n-   <p>The <code>ctype_base.h</code> header file does not need include guards. \n-It should contain a single <code>struct</code> definition called\n-<code>ctype_base</code>.  This <code>struct</code> should contain two type\n-declarations, and one enumeration declaration, like this example, taken\n-from the IRIX configuration:\n-\n-<pre class=\"example\">     struct ctype_base\n-     {\n-       typedef unsigned int \tmask;\n-       typedef int* \t\t__to_type;\n-     \n-       enum\n-       {\n-         space = _ISspace,\n-         print = _ISprint,\n-         cntrl = _IScntrl,\n-         upper = _ISupper,\n-         lower = _ISlower,\n-         alpha = _ISalpha,\n-         digit = _ISdigit,\n-         punct = _ISpunct,\n-         xdigit = _ISxdigit,\n-         alnum = _ISalnum,\n-         graph = _ISgraph\n-       };\n-     };\n-     </pre>\n-\n-<p>The <code>mask</code> type is the type of the elements in the table.  If your\n-C library uses a table to map lower-case numbers to upper-case numbers,\n-and vice versa, you should define <code>__to_type</code> to be the type of the\n-elements in that table.  If you don't mind taking a minor performance\n-penalty, or if your library doesn't implement <code>toupper</code> and\n-<code>tolower</code> in this way, you can pick any pointer-to-integer type,\n-but you must still define the type.\n-\n-   <p>The enumeration should give definitions for all the values in the above\n-example, using the values from your native <code>&lt;ctype.h&gt;</code>.  They can\n-be given symbolically (as above), or numerically, if you prefer.  You do\n-not have to include <code>&lt;ctype.h&gt;</code> in this header; it will always be\n-included before <code>ctype_base.h</code> is included.\n-\n-   <p>The next file to write is <code>ctype_noninline.h</code>, which also does\n-not require include guards.  This file defines a few member functions\n-that will be included in <code>include/bits/locale_facets.h</code>.  The first\n-function that must be written is the <code>ctype&lt;char&gt;::ctype</code>\n-constructor.  Here is the IRIX example:\n-\n-<pre class=\"example\">     ctype&lt;char&gt;::ctype(const mask* __table = 0, bool __del = false,\n-           size_t __refs = 0)\n-       : _Ctype_nois&lt;char&gt;(__refs), _M_del(__table != 0 &amp;&amp; __del),\n-         _M_toupper(NULL),\n-         _M_tolower(NULL),\n-         _M_ctable(NULL),\n-         _M_table(!__table\n-                  ? (const mask*) (__libc_attr._ctype_tbl-&gt;_class + 1)\n-                  : __table)\n-       { }\n-     </pre>\n-\n-<p>There are two parts of this that you might choose to alter. The first,\n-and most important, is the line involving <code>__libc_attr</code>.  That is\n-IRIX system-dependent code that gets the base of the table mapping\n-character codes to attributes.  You need to substitute code that obtains\n-the address of this table on your system.  If you want to use your\n-operating system's tables to map upper-case letters to lower-case, and\n-vice versa, you should initialize <code>_M_toupper</code> and\n-<code>_M_tolower</code> with those tables, in similar fashion.\n-\n-   <p>Now, you have to write two functions to convert from upper-case to\n-lower-case, and vice versa.  Here are the IRIX versions:\n-\n-<pre class=\"example\">     char\n-     ctype&lt;char&gt;::do_toupper(char __c) const\n-     { return _toupper(__c); }\n-     \n-     char\n-     ctype&lt;char&gt;::do_tolower(char __c) const\n-     { return _tolower(__c); }\n-     </pre>\n-\n-<p>Your C library provides equivalents to IRIX's <code>_toupper</code> and\n-<code>_tolower</code>.  If you initialized <code>_M_toupper</code> and\n-<code>_M_tolower</code> above, then you could use those tables instead.\n-\n-   <p>Finally, you have to provide two utility functions that convert strings\n-of characters.  The versions provided here will always work - but you\n-could use specialized routines for greater performance if you have\n-machinery to do that on your system:\n-\n-<pre class=\"example\">     const char*\n-     ctype&lt;char&gt;::do_toupper(char* __low, const char* __high) const\n-     {\n-       while (__low &lt; __high)\n-         {\n-           *__low = do_toupper(*__low);\n-           ++__low;\n-         }\n-       return __high;\n-     }\n-     \n-     const char*\n-     ctype&lt;char&gt;::do_tolower(char* __low, const char* __high) const\n-     {\n-       while (__low &lt; __high)\n-         {\n-           *__low = do_tolower(*__low);\n-           ++__low;\n-         }\n-       return __high;\n-     }\n-     </pre>\n-\n-   <p>You must also provide the <code>ctype_inline.h</code> file, which\n-contains a few more functions.  On most systems, you can just copy\n-<code>config/os/generic/ctype_inline.h</code> and use it on your system.\n-\n-   <p>In detail, the functions provided test characters for particular\n-properties; they are analogous to the functions like <code>isalpha</code> and\n-<code>islower</code> provided by the C library.\n-\n-   <p>The first function is implemented like this on IRIX:\n-\n-<pre class=\"example\">     bool\n-     ctype&lt;char&gt;::\n-     is(mask __m, char __c) const throw()\n-     { return (_M_table)[(unsigned char)(__c)] &amp; __m; }\n-     </pre>\n-\n-<p>The <code>_M_table</code> is the table passed in above, in the constructor. \n-This is the table that contains the bitmasks for each character.  The\n-implementation here should work on all systems.\n-\n-   <p>The next function is:\n-\n-<pre class=\"example\">     const char*\n-     ctype&lt;char&gt;::\n-     is(const char* __low, const char* __high, mask* __vec) const throw()\n-     {\n-       while (__low &lt; __high)\n-         *__vec++ = (_M_table)[(unsigned char)(*__low++)];\n-       return __high;\n-     }\n-     </pre>\n-\n-<p>This function is similar; it copies the masks for all the characters\n-from <code>__low</code> up until <code>__high</code> into the vector given by\n-<code>__vec</code>.\n-\n-   <p>The last two functions again are entirely generic:\n-\n-<pre class=\"example\">     const char*\n-     ctype&lt;char&gt;::\n-     scan_is(mask __m, const char* __low, const char* __high) const throw()\n-     {\n-       while (__low &lt; __high &amp;&amp; !this-&gt;is(__m, *__low))\n-         ++__low;\n-       return __low;\n-     }\n-     \n-     const char*\n-     ctype&lt;char&gt;::\n-     scan_not(mask __m, const char* __low, const char* __high) const throw()\n-     {\n-       while (__low &lt; __high &amp;&amp; this-&gt;is(__m, *__low))\n-         ++__low;\n-       return __low;\n-     }\n-     </pre>\n-\n-<div class=\"node\">\n-<p><hr>\n-Node:&nbsp;<a name=\"Thread%20safety\">Thread safety</a>,\n-Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Numeric%20limits\">Numeric limits</a>,\n-Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Character%20types\">Character types</a>,\n-Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>\n-<br>\n-</div>\n-\n-<h2 class=\"chapter\">Thread safety</h2>\n-\n-<p>The C++ library string functionality requires a couple of atomic\n-operations to provide thread-safety.  If you don't take any special\n-action, the library will use stub versions of these functions that are\n-not thread-safe.  They will work fine, unless your applications are\n-multi-threaded.\n-\n-   <p>If you want to provide custom, safe, versions of these functions, there\n-are two distinct approaches.  One is to provide a version for your CPU,\n-using assembly language constructs.  The other is to use the\n-thread-safety primitives in your operating system.  In either case, you\n-make a file called <code>atomicity.h</code>, and the variable\n-<code>ATOMICITYH</code> must point to this file.\n-\n-   <p>If you are using the assembly-language approach, put this code in\n-<code>config/cpu/&lt;chip&gt;/atomicity.h</code>, where chip is the name of\n-your processor (see <a href=\"#CPU\">CPU</a>).  No additional changes are necessary to\n-locate the file in this case; <code>ATOMICITYH</code> will be set by default.\n-\n-   <p>If you are using the operating system thread-safety primitives approach,\n-you can also put this code in the same CPU directory, in which case no more\n-work is needed to locate the file.  For examples of this approach,\n-see the <code>atomicity.h</code> file for IRIX or IA64.\n-\n-   <p>Alternatively, if the primitives are more closely related to the OS\n-than they are to the CPU, you can put the <code>atomicity.h</code> file in\n-the <a href=\"#Operating%20system\">Operating system</a> directory instead.  In this case, you must\n-edit <code>configure.host</code>, and in the switch statement that handles\n-operating systems, override the <code>ATOMICITYH</code> variable to point to\n-the appropriate <code>os_include_dir</code>.  For examples of this approach,\n-see the <code>atomicity.h</code> file for AIX.\n-\n-   <p>With those bits out of the way, you have to actually write\n-<code>atomicity.h</code> itself.  This file should be wrapped in an\n-include guard named <code>_GLIBCXX_ATOMICITY_H</code>.  It should define one\n-type, and two functions.\n-\n-   <p>The type is <code>_Atomic_word</code>.  Here is the version used on IRIX:\n-\n-<pre class=\"example\">     typedef long _Atomic_word;\n-     </pre>\n-\n-<p>This type must be a signed integral type supporting atomic operations. \n-If you're using the OS approach, use the same type used by your system's\n-primitives.  Otherwise, use the type for which your CPU provides atomic\n-primitives.\n-\n-   <p>Then, you must provide two functions.  The bodies of these functions\n-must be equivalent to those provided here, but using atomic operations:\n-\n-<pre class=\"example\">     static inline _Atomic_word\n-     __attribute__ ((__unused__))\n-     __exchange_and_add (_Atomic_word* __mem, int __val)\n-     {\n-       _Atomic_word __result = *__mem;\n-       *__mem += __val;\n-       return __result;\n-     }\n-     \n-     static inline void\n-     __attribute__ ((__unused__))\n-     __atomic_add (_Atomic_word* __mem, int __val)\n-     {\n-       *__mem += __val;\n-     }\n-     </pre>\n-\n-<div class=\"node\">\n-<p><hr>\n-Node:&nbsp;<a name=\"Numeric%20limits\">Numeric limits</a>,\n-Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Libtool\">Libtool</a>,\n-Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Thread%20safety\">Thread safety</a>,\n-Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>\n-<br>\n-</div>\n-\n-<h2 class=\"chapter\">Numeric limits</h2>\n-\n-<p>The C++ library requires information about the fundamental data types,\n-such as the minimum and maximum representable values of each type. \n-You can define each of these values individually, but it is usually\n-easiest just to indicate how many bits are used in each of the data\n-types and let the library do the rest.  For information about the\n-macros to define, see the top of <code>include/bits/std_limits.h</code>.\n-\n-   <p>If you need to define any macros, you can do so in <code>os_defines.h</code>. \n-However, if all operating systems for your CPU are likely to use the\n-same values, you can provide a CPU-specific file instead so that you\n-do not have to provide the same definitions for each operating system. \n-To take that approach, create a new file called <code>cpu_limits.h</code> in\n-your CPU configuration directory (see <a href=\"#CPU\">CPU</a>).\n-\n-<div class=\"node\">\n-<p><hr>\n-Node:&nbsp;<a name=\"Libtool\">Libtool</a>,\n-Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#GNU%20Free%20Documentation%20License\">GNU Free Documentation License</a>,\n-Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Numeric%20limits\">Numeric limits</a>,\n-Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>\n-<br>\n-</div>\n-\n-<h2 class=\"chapter\">Libtool</h2>\n-\n-<p>The C++ library is compiled, archived and linked with libtool. \n-Explaining the full workings of libtool is beyond the scope of this\n-document, but there are a few, particular bits that are necessary for\n-porting.\n-\n-   <p>Some parts of the libstdc++ library are compiled with the libtool\n-<code>--tags CXX</code> option (the C++ definitions for libtool).  Therefore,\n-<code>ltcf-cxx.sh</code> in the top-level directory needs to have the correct\n-logic to compile and archive objects equivalent to the C version of libtool,\n-<code>ltcf-c.sh</code>.  Some libtool targets have definitions for C but not\n-for C++, or C++ definitions which have not been kept up to date.\n-\n-   <p>The C++ run-time library contains initialization code that needs to be\n-run as the library is loaded.  Often, that requires linking in special\n-object files when the C++ library is built as a shared library, or\n-taking other system-specific actions.\n-\n-   <p>The libstdc++ library is linked with the C version of libtool, even\n-though it is a C++ library.  Therefore, the C version of libtool needs to\n-ensure that the run-time library initializers are run.  The usual way to\n-do this is to build the library using <code>gcc -shared</code>.\n-\n-   <p>If you need to change how the library is linked, look at\n-<code>ltcf-c.sh</code> in the top-level directory.  Find the switch statement\n-that sets <code>archive_cmds</code>.  Here, adjust the setting for your\n-operating system.\n-\n-<div class=\"node\">\n-<p><hr>\n-Node:&nbsp;<a name=\"GNU%20Free%20Documentation%20License\">GNU Free Documentation License</a>,\n-Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Libtool\">Libtool</a>,\n-Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>\n-<br>\n-</div>\n-\n-<h2 class=\"unnumbered\">GNU Free Documentation License</h2>\n-\n-<div align=\"center\">Version 1.2, November 2002</div>\n-<pre class=\"display\">     Copyright &copy; 2000,2001,2002 Free Software Foundation, Inc.\n-     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA\n-     \n-     Everyone is permitted to copy and distribute verbatim copies\n-     of this license document, but changing it is not allowed.\n-     </pre>\n-\n-     <ol type=1 start=0>\n-<li>PREAMBLE\n-\n-     <p>The purpose of this License is to make a manual, textbook, or other\n-functional and useful document <dfn>free</dfn> in the sense of freedom: to\n-assure everyone the effective freedom to copy and redistribute it,\n-with or without modifying it, either commercially or noncommercially. \n-Secondarily, this License preserves for the author and publisher a way\n-to get credit for their work, while not being considered responsible\n-for modifications made by others.\n-\n-     <p>This License is a kind of \"copyleft\", which means that derivative\n-works of the document must themselves be free in the same sense.  It\n-complements the GNU General Public License, which is a copyleft\n-license designed for free software.\n-\n-     <p>We have designed this License in order to use it for manuals for free\n-software, because free software needs free documentation: a free\n-program should come with manuals providing the same freedoms that the\n-software does.  But this License is not limited to software manuals;\n-it can be used for any textual work, regardless of subject matter or\n-whether it is published as a printed book.  We recommend this License\n-principally for works whose purpose is instruction or reference.\n-\n-     </p><li>APPLICABILITY AND DEFINITIONS\n-\n-     <p>This License applies to any manual or other work, in any medium, that\n-contains a notice placed by the copyright holder saying it can be\n-distributed under the terms of this License.  Such a notice grants a\n-world-wide, royalty-free license, unlimited in duration, to use that\n-work under the conditions stated herein.  The \"Document\", below,\n-refers to any such manual or work.  Any member of the public is a\n-licensee, and is addressed as \"you\".  You accept the license if you\n-copy, modify or distribute the work in a way requiring permission\n-under copyright law.\n-\n-     <p>A \"Modified Version\" of the Document means any work containing the\n-Document or a portion of it, either copied verbatim, or with\n-modifications and/or translated into another language.\n-\n-     <p>A \"Secondary Section\" is a named appendix or a front-matter section\n-of the Document that deals exclusively with the relationship of the\n-publishers or authors of the Document to the Document's overall\n-subject (or to related matters) and contains nothing that could fall\n-directly within that overall subject.  (Thus, if the Document is in\n-part a textbook of mathematics, a Secondary Section may not explain\n-any mathematics.)  The relationship could be a matter of historical\n-connection with the subject or with related matters, or of legal,\n-commercial, philosophical, ethical or political position regarding\n-them.\n-\n-     <p>The \"Invariant Sections\" are certain Secondary Sections whose titles\n-are designated, as being those of Invariant Sections, in the notice\n-that says that the Document is released under this License.  If a\n-section does not fit the above definition of Secondary then it is not\n-allowed to be designated as Invariant.  The Document may contain zero\n-Invariant Sections.  If the Document does not identify any Invariant\n-Sections then there are none.\n-\n-     <p>The \"Cover Texts\" are certain short passages of text that are listed,\n-as Front-Cover Texts or Back-Cover Texts, in the notice that says that\n-the Document is released under this License.  A Front-Cover Text may\n-be at most 5 words, and a Back-Cover Text may be at most 25 words.\n-\n-     <p>A \"Transparent\" copy of the Document means a machine-readable copy,\n-represented in a format whose specification is available to the\n-general public, that is suitable for revising the document\n-straightforwardly with generic text editors or (for images composed of\n-pixels) generic paint programs or (for drawings) some widely available\n-drawing editor, and that is suitable for input to text formatters or\n-for automatic translation to a variety of formats suitable for input\n-to text formatters.  A copy made in an otherwise Transparent file\n-format whose markup, or absence of markup, has been arranged to thwart\n-or discourage subsequent modification by readers is not Transparent. \n-An image format is not Transparent if used for any substantial amount\n-of text.  A copy that is not \"Transparent\" is called \"Opaque\".\n-\n-     <p>Examples of suitable formats for Transparent copies include plain\n-<small>ASCII</small> without markup, Texinfo input format, LaTeX input\n-format, <small>SGML</small> or <small>XML</small> using a publicly available\n-<small>DTD</small>, and standard-conforming simple <small>HTML</small>,\n-PostScript or <small>PDF</small> designed for human modification.  Examples\n-of transparent image formats include <small>PNG</small>, <small>XCF</small> and\n-<small>JPG</small>.  Opaque formats include proprietary formats that can be\n-read and edited only by proprietary word processors, <small>SGML</small> or\n-<small>XML</small> for which the <small>DTD</small> and/or processing tools are\n-not generally available, and the machine-generated <small>HTML</small>,\n-PostScript or <small>PDF</small> produced by some word processors for\n-output purposes only.\n-\n-     <p>The \"Title Page\" means, for a printed book, the title page itself,\n-plus such following pages as are needed to hold, legibly, the material\n-this License requires to appear in the title page.  For works in\n-formats which do not have any title page as such, \"Title Page\" means\n-the text near the most prominent appearance of the work's title,\n-preceding the beginning of the body of the text.\n-\n-     <p>A section \"Entitled XYZ\" means a named subunit of the Document whose\n-title either is precisely XYZ or contains XYZ in parentheses following\n-text that translates XYZ in another language.  (Here XYZ stands for a\n-specific section name mentioned below, such as \"Acknowledgements\",\n-\"Dedications\", \"Endorsements\", or \"History\".)  To \"Preserve the Title\"\n-of such a section when you modify the Document means that it remains a\n-section \"Entitled XYZ\" according to this definition.\n-\n-     <p>The Document may include Warranty Disclaimers next to the notice which\n-states that this License applies to the Document.  These Warranty\n-Disclaimers are considered to be included by reference in this\n-License, but only as regards disclaiming warranties: any other\n-implication that these Warranty Disclaimers may have is void and has\n-no effect on the meaning of this License.\n-\n-     </p><li>VERBATIM COPYING\n-\n-     <p>You may copy and distribute the Document in any medium, either\n-commercially or noncommercially, provided that this License, the\n-copyright notices, and the license notice saying this License applies\n-to the Document are reproduced in all copies, and that you add no other\n-conditions whatsoever to those of this License.  You may not use\n-technical measures to obstruct or control the reading or further\n-copying of the copies you make or distribute.  However, you may accept\n-compensation in exchange for copies.  If you distribute a large enough\n-number of copies you must also follow the conditions in section 3.\n-\n-     <p>You may also lend copies, under the same conditions stated above, and\n-you may publicly display copies.\n-\n-     </p><li>COPYING IN QUANTITY\n-\n-     <p>If you publish printed copies (or copies in media that commonly have\n-printed covers) of the Document, numbering more than 100, and the\n-Document's license notice requires Cover Texts, you must enclose the\n-copies in covers that carry, clearly and legibly, all these Cover\n-Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on\n-the back cover.  Both covers must also clearly and legibly identify\n-you as the publisher of these copies.  The front cover must present\n-the full title with all words of the title equally prominent and\n-visible.  You may add other material on the covers in addition. \n-Copying with changes limited to the covers, as long as they preserve\n-the title of the Document and satisfy these conditions, can be treated\n-as verbatim copying in other respects.\n-\n-     <p>If the required texts for either cover are too voluminous to fit\n-legibly, you should put the first ones listed (as many as fit\n-reasonably) on the actual cover, and continue the rest onto adjacent\n-pages.\n-\n-     <p>If you publish or distribute Opaque copies of the Document numbering\n-more than 100, you must either include a machine-readable Transparent\n-copy along with each Opaque copy, or state in or with each Opaque copy\n-a computer-network location from which the general network-using\n-public has access to download using public-standard network protocols\n-a complete Transparent copy of the Document, free of added material. \n-If you use the latter option, you must take reasonably prudent steps,\n-when you begin distribution of Opaque copies in quantity, to ensure\n-that this Transparent copy will remain thus accessible at the stated\n-location until at least one year after the last time you distribute an\n-Opaque copy (directly or through your agents or retailers) of that\n-edition to the public.\n-\n-     <p>It is requested, but not required, that you contact the authors of the\n-Document well before redistributing any large number of copies, to give\n-them a chance to provide you with an updated version of the Document.\n-\n-     </p><li>MODIFICATIONS\n-\n-     <p>You may copy and distribute a Modified Version of the Document under\n-the conditions of sections 2 and 3 above, provided that you release\n-the Modified Version under precisely this License, with the Modified\n-Version filling the role of the Document, thus licensing distribution\n-and modification of the Modified Version to whoever possesses a copy\n-of it.  In addition, you must do these things in the Modified Version:\n-\n-          <ol type=A start=1>\n-<li>Use in the Title Page (and on the covers, if any) a title distinct\n-from that of the Document, and from those of previous versions\n-(which should, if there were any, be listed in the History section\n-of the Document).  You may use the same title as a previous version\n-if the original publisher of that version gives permission.\n-\n-          <li>List on the Title Page, as authors, one or more persons or entities\n-responsible for authorship of the modifications in the Modified\n-Version, together with at least five of the principal authors of the\n-Document (all of its principal authors, if it has fewer than five),\n-unless they release you from this requirement.\n-\n-          <li>State on the Title page the name of the publisher of the\n-Modified Version, as the publisher.\n-\n-          <li>Preserve all the copyright notices of the Document.\n-\n-          <li>Add an appropriate copyright notice for your modifications\n-adjacent to the other copyright notices.\n-\n-          <li>Include, immediately after the copyright notices, a license notice\n-giving the public permission to use the Modified Version under the\n-terms of this License, in the form shown in the Addendum below.\n-\n-          <li>Preserve in that license notice the full lists of Invariant Sections\n-and required Cover Texts given in the Document's license notice.\n-\n-          <li>Include an unaltered copy of this License.\n-\n-          <li>Preserve the section Entitled \"History\", Preserve its Title, and add\n-to it an item stating at least the title, year, new authors, and\n-publisher of the Modified Version as given on the Title Page.  If\n-there is no section Entitled \"History\" in the Document, create one\n-stating the title, year, authors, and publisher of the Document as\n-given on its Title Page, then add an item describing the Modified\n-Version as stated in the previous sentence.\n-\n-          <li>Preserve the network location, if any, given in the Document for\n-public access to a Transparent copy of the Document, and likewise\n-the network locations given in the Document for previous versions\n-it was based on.  These may be placed in the \"History\" section. \n-You may omit a network location for a work that was published at\n-least four years before the Document itself, or if the original\n-publisher of the version it refers to gives permission.\n-\n-          <li>For any section Entitled \"Acknowledgements\" or \"Dedications\", Preserve\n-the Title of the section, and preserve in the section all the\n-substance and tone of each of the contributor acknowledgements and/or\n-dedications given therein.\n-\n-          <li>Preserve all the Invariant Sections of the Document,\n-unaltered in their text and in their titles.  Section numbers\n-or the equivalent are not considered part of the section titles.\n-\n-          <li>Delete any section Entitled \"Endorsements\".  Such a section\n-may not be included in the Modified Version.\n-\n-          <li>Do not retitle any existing section to be Entitled \"Endorsements\" or\n-to conflict in title with any Invariant Section.\n-\n-          <li>Preserve any Warranty Disclaimers.\n-          </ol>\n-\n-     <p>If the Modified Version includes new front-matter sections or\n-appendices that qualify as Secondary Sections and contain no material\n-copied from the Document, you may at your option designate some or all\n-of these sections as invariant.  To do this, add their titles to the\n-list of Invariant Sections in the Modified Version's license notice. \n-These titles must be distinct from any other section titles.\n-\n-     <p>You may add a section Entitled \"Endorsements\", provided it contains\n-nothing but endorsements of your Modified Version by various\n-parties--for example, statements of peer review or that the text has\n-been approved by an organization as the authoritative definition of a\n-standard.\n-\n-     <p>You may add a passage of up to five words as a Front-Cover Text, and a\n-passage of up to 25 words as a Back-Cover Text, to the end of the list\n-of Cover Texts in the Modified Version.  Only one passage of\n-Front-Cover Text and one of Back-Cover Text may be added by (or\n-through arrangements made by) any one entity.  If the Document already\n-includes a cover text for the same cover, previously added by you or\n-by arrangement made by the same entity you are acting on behalf of,\n-you may not add another; but you may replace the old one, on explicit\n-permission from the previous publisher that added the old one.\n-\n-     <p>The author(s) and publisher(s) of the Document do not by this License\n-give permission to use their names for publicity for or to assert or\n-imply endorsement of any Modified Version.\n-\n-     </p><li>COMBINING DOCUMENTS\n-\n-     <p>You may combine the Document with other documents released under this\n-License, under the terms defined in section 4 above for modified\n-versions, provided that you include in the combination all of the\n-Invariant Sections of all of the original documents, unmodified, and\n-list them all as Invariant Sections of your combined work in its\n-license notice, and that you preserve all their Warranty Disclaimers.\n-\n-     <p>The combined work need only contain one copy of this License, and\n-multiple identical Invariant Sections may be replaced with a single\n-copy.  If there are multiple Invariant Sections with the same name but\n-different contents, make the title of each such section unique by\n-adding at the end of it, in parentheses, the name of the original\n-author or publisher of that section if known, or else a unique number. \n-Make the same adjustment to the section titles in the list of\n-Invariant Sections in the license notice of the combined work.\n-\n-     <p>In the combination, you must combine any sections Entitled \"History\"\n-in the various original documents, forming one section Entitled\n-\"History\"; likewise combine any sections Entitled \"Acknowledgements\",\n-and any sections Entitled \"Dedications\".  You must delete all\n-sections Entitled \"Endorsements.\"\n-\n-     </p><li>COLLECTIONS OF DOCUMENTS\n-\n-     <p>You may make a collection consisting of the Document and other documents\n-released under this License, and replace the individual copies of this\n-License in the various documents with a single copy that is included in\n-the collection, provided that you follow the rules of this License for\n-verbatim copying of each of the documents in all other respects.\n-\n-     <p>You may extract a single document from such a collection, and distribute\n-it individually under this License, provided you insert a copy of this\n-License into the extracted document, and follow this License in all\n-other respects regarding verbatim copying of that document.\n-\n-     </p><li>AGGREGATION WITH INDEPENDENT WORKS\n-\n-     <p>A compilation of the Document or its derivatives with other separate\n-and independent documents or works, in or on a volume of a storage or\n-distribution medium, is called an \"aggregate\" if the copyright\n-resulting from the compilation is not used to limit the legal rights\n-of the compilation's users beyond what the individual works permit. \n-When the Document is included an aggregate, this License does not\n-apply to the other works in the aggregate which are not themselves\n-derivative works of the Document.\n-\n-     <p>If the Cover Text requirement of section 3 is applicable to these\n-copies of the Document, then if the Document is less than one half of\n-the entire aggregate, the Document's Cover Texts may be placed on\n-covers that bracket the Document within the aggregate, or the\n-electronic equivalent of covers if the Document is in electronic form. \n-Otherwise they must appear on printed covers that bracket the whole\n-aggregate.\n-\n-     </p><li>TRANSLATION\n-\n-     <p>Translation is considered a kind of modification, so you may\n-distribute translations of the Document under the terms of section 4. \n-Replacing Invariant Sections with translations requires special\n-permission from their copyright holders, but you may include\n-translations of some or all Invariant Sections in addition to the\n-original versions of these Invariant Sections.  You may include a\n-translation of this License, and all the license notices in the\n-Document, and any Warrany Disclaimers, provided that you also include\n-the original English version of this License and the original versions\n-of those notices and disclaimers.  In case of a disagreement between\n-the translation and the original version of this License or a notice\n-or disclaimer, the original version will prevail.\n-\n-     <p>If a section in the Document is Entitled \"Acknowledgements\",\n-\"Dedications\", or \"History\", the requirement (section 4) to Preserve\n-its Title (section 1) will typically require changing the actual\n-title.\n-\n-     </p><li>TERMINATION\n-\n-     <p>You may not copy, modify, sublicense, or distribute the Document except\n-as expressly provided for under this License.  Any other attempt to\n-copy, modify, sublicense or distribute the Document is void, and will\n-automatically terminate your rights under this License.  However,\n-parties who have received copies, or rights, from you under this\n-License will not have their licenses terminated so long as such\n-parties remain in full compliance.\n-\n-     </p><li>FUTURE REVISIONS OF THIS LICENSE\n-\n-     <p>The Free Software Foundation may publish new, revised versions\n-of the GNU Free Documentation License from time to time.  Such new\n-versions will be similar in spirit to the present version, but may\n-differ in detail to address new problems or concerns.  See\n-<a href=\"http://www.gnu.org/copyleft/\">http://www.gnu.org/copyleft/</a>.\n-\n-     <p>Each version of the License is given a distinguishing version number. \n-If the Document specifies that a particular numbered version of this\n-License \"or any later version\" applies to it, you have the option of\n-following the terms and conditions either of that specified version or\n-of any later version that has been published (not as a draft) by the\n-Free Software Foundation.  If the Document does not specify a version\n-number of this License, you may choose any version ever published (not\n-as a draft) by the Free Software Foundation.\n-        </ol>\n-\n-<h3 class=\"unnumberedsec\">ADDENDUM: How to use this License for your documents</h3>\n-\n-<p>To use this License in a document you have written, include a copy of\n-the License in the document and put the following copyright and\n-license notices just after the title page:\n-\n-<pre class=\"smallexample\">       Copyright (C)  <var>year</var>  <var>your name</var>.\n-       Permission is granted to copy, distribute and/or modify this document\n-       under the terms of the GNU Free Documentation License, Version 1.2\n-       or any later version published by the Free Software Foundation;\n-       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.\n-       A copy of the license is included in the section entitled ``GNU\n-       Free Documentation License''.\n-     </pre>\n-\n-   <p>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,\n-replace the \"with...Texts.\" line with this:\n-\n-<pre class=\"smallexample\">         with the Invariant Sections being <var>list their titles</var>, with\n-         the Front-Cover Texts being <var>list</var>, and with the Back-Cover Texts\n-         being <var>list</var>.\n-     </pre>\n-\n-   <p>If you have Invariant Sections without Cover Texts, or some other\n-combination of the three, merge those two alternatives to suit the\n-situation.\n-\n-   <p>If your document contains nontrivial examples of program code, we\n-recommend releasing these examples in parallel under your choice of\n-free software license, such as the GNU General Public License,\n-to permit their use in free software.\n-\n-\n-<div class=\"contents\">\n-<h2>Table of Contents</h2>\n-<ul>\n-<li><a name=\"toc_Top\" href=\"#Top\">Porting libstdc++</a>\n-<li><a name=\"toc_Operating%20system\" href=\"#Operating%20system\">Operating system</a>\n-<li><a name=\"toc_CPU\" href=\"#CPU\">CPU</a>\n-<li><a name=\"toc_Character%20types\" href=\"#Character%20types\">Character types</a>\n-<li><a name=\"toc_Thread%20safety\" href=\"#Thread%20safety\">Thread safety</a>\n-<li><a name=\"toc_Numeric%20limits\" href=\"#Numeric%20limits\">Numeric limits</a>\n-<li><a name=\"toc_Libtool\" href=\"#Libtool\">Libtool</a>\n-<li><a name=\"toc_GNU%20Free%20Documentation%20License\" href=\"#GNU%20Free%20Documentation%20License\">GNU Free Documentation License</a>\n-<ul>\n-<li><a href=\"#GNU%20Free%20Documentation%20License\">ADDENDUM: How to use this License for your documents</a>\n-</li></ul>\n-</li></ul>\n-</div>\n-\n-   </body></html>\n-"}, {"sha": "090bdf771556536f4cea901e55303540265f774c", "filename": "libstdc++-v3/doc/html/17_intro/porting.texi", "status": "removed", "additions": 0, "deletions": 570, "changes": 570, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fporting.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fporting.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Fporting.texi?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,570 +0,0 @@\n-\\input texinfo\n-\n-@c ---------------------------------------------------------------------\n-@c Prologue\n-@c ---------------------------------------------------------------------\n-\n-@setfilename porting.info\n-@settitle Porting libstdc++-v3\n-@setchapternewpage odd\n-\n-@copying\n-Copyright @copyright{} 2000, 2001, 2002, 2003, 2005 \n-Free Software Foundation, Inc.\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.2 or\n-any later version published by the Free Software Foundation; with the\n-Invariant Sections being ``GNU General Public License'', the Front-Cover\n-texts being (a) (see below), and with the Back-Cover Texts being (b)\n-(see below).  A copy of the license is included in the section entitled\n-``GNU Free Documentation License''.\n-\n-(a) The FSF's Front-Cover Text is:\n-\n-     A GNU Manual\n-\n-(b) The FSF's Back-Cover Text is:\n-\n-     You have freedom to copy and modify this GNU Manual, like GNU\n-     software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n-@end copying\n-\n-@ifinfo\n-This file explains how to port libstdc++-v3 (the GNU C++ library) to \n-a new target.\n-\n-@insertcopying\n-@end ifinfo\n-\n-@c ---------------------------------------------------------------------\n-@c Titlepage\n-@c ---------------------------------------------------------------------\n-\n-@titlepage\n-@title Porting libstdc++-v3\n-@author Mark Mitchell\n-@page\n-@vskip 0pt plus 1filll\n-@insertcopying\n-@end titlepage\n-\n-@c ---------------------------------------------------------------------\n-@c Top\n-@c ---------------------------------------------------------------------\n-\n-@node Top\n-@top Porting libstdc++-v3\n-\n-This document explains how to port libstdc++-v3 (the GNU C++ library) to \n-a new target.\n-\n-In order to make the GNU C++ library (libstdc++-v3) work with a new\n-target, you must edit some configuration files and provide some new\n-header files.  Unless this is done, libstdc++-v3 will use generic\n-settings which may not be correct for your target; even if they are\n-correct, they will likely be inefficient.\n-\n-Before you get started, make sure that you have a working C library on\n-your target.  The C library need not precisely comply with any\n-particular standard, but should generally conform to the requirements\n-imposed by the ANSI/ISO standard.\n-\n-In addition, you should try to verify that the C++ compiler generally\n-works.  It is difficult to test the C++ compiler without a working\n-library, but you should at least try some minimal test cases.\n-\n-(Note that what we think of as a ``target,'' the library refers to as\n-a ``host.''  The comment at the top of @file{configure.ac} explains why.)\n-\n-Here are the primary steps required to port the library:\n-\n-@menu\n-* Operating system::    Configuring for your operating system.\n-* CPU::                 Configuring for your processor chip.\n-* Character types::     Implementing character classification.\n-* Thread safety::       Implementing atomic operations.\n-* Numeric limits::\tImplementing numeric limits.\n-* Libtool::             Using libtool.\n-* GNU Free Documentation License:: How you can copy and share this manual.\n-@end menu\n-\n-@c ---------------------------------------------------------------------\n-@c Operating system\n-@c ---------------------------------------------------------------------\n-\n-@node Operating system\n-@chapter Operating system\n-\n-If you are porting to a new operating system (as opposed to a new chip\n-using an existing operating system), you will need to create a new\n-directory in the @file{config/os} hierarchy.  For example, the IRIX\n-configuration files are all in @file{config/os/irix}.  There is no set\n-way to organize the OS configuration directory.  For example,\n-@file{config/os/solaris/solaris-2.6} and\n-@file{config/os/solaris/solaris-2.7} are used as configuration\n-directories for these two versions of Solaris.  On the other hand, both\n-Solaris 2.7 and Solaris 2.8 use the @file{config/os/solaris/solaris-2.7}\n-directory.  The important information is that there needs to be a\n-directory under @file{config/os} to store the files for your operating\n-system.\n-\n-You might have to change the @file{configure.host} file to ensure that\n-your new directory is activated.  Look for the switch statement that sets\n-@code{os_include_dir}, and add a pattern to handle your operating system\n-if the default will not suffice.  The switch statement switches on only\n-the OS portion of the standard target triplet; e.g., the @code{solaris2.8}\n-in @code{sparc-sun-solaris2.8}.  If the new directory is named after the\n-OS portion of the triplet (the default), then nothing needs to be changed.\n-\n-The first file to create in this directory, should be called\n-@file{os_defines.h}.  This file contains basic macro definitions\n-that are required to allow the C++ library to work with your C library.\n-\n-Several libstdc++-v3 source files unconditionally define the macro\n-@code{_POSIX_SOURCE}.  On many systems, defining this macro causes\n-large portions of the C library header files to be eliminated\n-at preprocessing time.  Therefore, you may have to @code{#undef} this\n-macro, or define other macros (like @code{_LARGEFILE_SOURCE} or\n-@code{__EXTENSIONS__}).  You won't know what macros to define or\n-undefine at this point; you'll have to try compiling the library and\n-seeing what goes wrong.  If you see errors about calling functions\n-that have not been declared, look in your C library headers to see if\n-the functions are declared there, and then figure out what macros you\n-need to define.  You will need to add them to the\n-@code{CPLUSPLUS_CPP_SPEC} macro in the GCC configuration file for your\n-target.  It will not work to simply define these macros in\n-@file{os_defines.h}.\n-\n-At this time, there are a few libstdc++-v3-specific macros which may be\n-defined:\n-\n-@code{_GLIBCXX_USE_C99_CHECK} may be defined to 1 to check C99\n-function declarations (which are not covered by specialization below)\n-found in system headers against versions found in the library headers\n-derived from the standard.\n-\n-@code{_GLIBCXX_USE_C99_DYNAMIC} may be defined to an expression that\n-yields 0 if and only if the system headers are exposing proper support\n-for C99 functions (which are not covered by specialization below).  If\n-defined, it must be 0 while bootstrapping the compiler/rebuilding the\n-library.\n-\n-@code{_GLIBCXX_USE_C99_LONG_LONG_CHECK} may be defined to 1 to check\n-the set of C99 long long function declarations found in system headers\n-against versions found in the library headers derived from the\n-standard.\n-\n-@code{_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC} may be defined to an\n-expression that yields 0 if and only if the system headers are\n-exposing proper support for the set of C99 long long functions.  If\n-defined, it must be 0 while bootstrapping the compiler/rebuilding the\n-library.\n-\n-@code{_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC} may be defined to an\n-expression that yields 0 if and only if the system headers\n-are exposing proper support for the related set of macros.  If defined,\n-it must be 0 while bootstrapping the compiler/rebuilding the library.\n-\n-@code{_GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_CHECK} may be defined\n-to 1 to check the related set of function declarations found in system\n-headers against versions found in the library headers derived from\n-the standard.\n-\n-@code{_GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC} may be defined\n-to an expression that yields 0 if and only if the system headers\n-are exposing proper support for the related set of functions.  If defined,\n-it must be 0 while bootstrapping the compiler/rebuilding the library.\n-\n-Finally, you should bracket the entire file in an include-guard, like\n-this:\n-\n-@example\n-#ifndef _GLIBCXX_OS_DEFINES\n-#define _GLIBCXX_OS_DEFINES\n-...\n-#endif\n-@end example\n-\n-We recommend copying an existing @file{os_defines.h} to use as a\n-starting point.\n-\n-@c ---------------------------------------------------------------------\n-@c CPU\n-@c ---------------------------------------------------------------------\n-\n-@node CPU\n-@chapter CPU\n-\n-If you are porting to a new chip (as opposed to a new operating system\n-running on an existing chip), you will need to create a new directory in the\n-@file{config/cpu} hierarchy.  Much like the @ref{Operating system} setup,\n-there are no strict rules on how to organize the CPU configuration\n-directory, but careful naming choices will allow the configury to find your\n-setup files without explicit help.\n-\n-We recommend that for a target triplet @code{<CPU>-<vendor>-<OS>}, you\n-name your configuration directory @file{config/cpu/<CPU>}.  If you do this,\n-the configury will find the directory by itself.  Otherwise you will need to\n-edit the @file{configure.host} file and, in the switch statement that sets\n-@code{cpu_include_dir}, add a pattern to handle your chip.\n-\n-Note that some chip families share a single configuration directory, for\n-example, @code{alpha}, @code{alphaev5}, and @code{alphaev6} all use the\n-@file{config/cpu/alpha} directory, and there is an entry in the\n-@file{configure.host} switch statement to handle this.\n-\n-The @code{cpu_include_dir} sets default locations for the files controlling\n-@ref{Thread safety} and @ref{Numeric limits}, if the defaults are not\n-appropriate for your chip.\n-\n-\n-@c ---------------------------------------------------------------------\n-@c Character types\n-@c ---------------------------------------------------------------------\n-\n-@node Character types\n-@chapter Character types\n-\n-The library requires that you provide three header files to implement\n-character classification, analogous to that provided by the C libraries\n-@file{<ctype.h>} header.  You can model these on the files provided in\n-@file{config/os/generic}.  However, these files will almost\n-certainly need some modification.\n-\n-The first file to write is @file{ctype_base.h}.  This file provides\n-some very basic information about character classification.  The libstdc++-v3\n-library assumes that your C library implements @file{<ctype.h>} by using\n-a table (indexed by character code) containing integers, where each of\n-these integers is a bit-mask indicating whether the character is\n-upper-case, lower-case, alphabetic, etc.  The @file{ctype_base.h}\n-file gives the type of the integer, and the values of the various bit\n-masks.  You will have to peer at your own @file{<ctype.h>} to figure out\n-how to define the values required by this file.\n-\n-The @file{ctype_base.h} header file does not need include guards.\n-It should contain a single @code{struct} definition called\n-@code{ctype_base}.  This @code{struct} should contain two type\n-declarations, and one enumeration declaration, like this example, taken\n-from the IRIX configuration:\n-\n-@example\n-struct ctype_base\n-@{\n-  typedef unsigned int \tmask;\n-  typedef int* \t\t__to_type;\n-\n-  enum\n-  @{\n-    space = _ISspace,\n-    print = _ISprint,\n-    cntrl = _IScntrl,\n-    upper = _ISupper,\n-    lower = _ISlower,\n-    alpha = _ISalpha,\n-    digit = _ISdigit,\n-    punct = _ISpunct,\n-    xdigit = _ISxdigit,\n-    alnum = _ISalnum,\n-    graph = _ISgraph\n-  @};\n-@};\n-@end example\n-\n-@noindent\n-The @code{mask} type is the type of the elements in the table.  If your\n-C library uses a table to map lower-case numbers to upper-case numbers,\n-and vice versa, you should define @code{__to_type} to be the type of the\n-elements in that table.  If you don't mind taking a minor performance\n-penalty, or if your library doesn't implement @code{toupper} and\n-@code{tolower} in this way, you can pick any pointer-to-integer type,\n-but you must still define the type.\n-\n-The enumeration should give definitions for all the values in the above\n-example, using the values from your native @file{<ctype.h>}.  They can\n-be given symbolically (as above), or numerically, if you prefer.  You do\n-not have to include @file{<ctype.h>} in this header; it will always be\n-included before @file{ctype_base.h} is included.\n-\n-The next file to write is @file{ctype_noninline.h}, which also does\n-not require include guards.  This file defines a few member functions\n-that will be included in @file{include/bits/locale_facets.h}.  The first\n-function that must be written is the @code{ctype<char>::ctype}\n-constructor.  Here is the IRIX example:\n-\n-@example\n-ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n-      size_t __refs = 0)\n-  : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n-    _M_toupper(NULL),\n-    _M_tolower(NULL),\n-    _M_ctable(NULL), \n-    _M_table(!__table\n-             ? (const mask*) (__libc_attr._ctype_tbl->_class + 1)\n-             : __table) \n-  @{ @}\n-@end example\n-\n-@noindent\n-There are two parts of this that you might choose to alter. The first,\n-and most important, is the line involving @code{__libc_attr}.  That is\n-IRIX system-dependent code that gets the base of the table mapping\n-character codes to attributes.  You need to substitute code that obtains\n-the address of this table on your system.  If you want to use your\n-operating system's tables to map upper-case letters to lower-case, and\n-vice versa, you should initialize @code{_M_toupper} and\n-@code{_M_tolower} with those tables, in similar fashion.\n-\n-Now, you have to write two functions to convert from upper-case to\n-lower-case, and vice versa.  Here are the IRIX versions:\n-\n-@example\n-char\n-ctype<char>::do_toupper(char __c) const\n-@{ return _toupper(__c); @}\n-\n-char\n-ctype<char>::do_tolower(char __c) const\n-@{ return _tolower(__c); @}\n-@end example\n-\n-@noindent\n-Your C library provides equivalents to IRIX's @code{_toupper} and\n-@code{_tolower}.  If you initialized @code{_M_toupper} and\n-@code{_M_tolower} above, then you could use those tables instead.\n-\n-Finally, you have to provide two utility functions that convert strings\n-of characters.  The versions provided here will always work -- but you\n-could use specialized routines for greater performance if you have\n-machinery to do that on your system:\n-\n-@example\n-const char*\n-ctype<char>::do_toupper(char* __low, const char* __high) const\n-@{\n-  while (__low < __high)\n-    @{\n-      *__low = do_toupper(*__low);\n-      ++__low;\n-    @}\n-  return __high;\n-@}\n-\n-const char* \n-ctype<char>::do_tolower(char* __low, const char* __high) const\n-@{\n-  while (__low < __high)\n-    @{\n-      *__low = do_tolower(*__low);\n-      ++__low;\n-    @}\n-  return __high;\n-@}\n-@end example\n-\n-You must also provide the @file{ctype_inline.h} file, which\n-contains a few more functions.  On most systems, you can just copy\n-@file{config/os/generic/ctype_inline.h} and use it on your system.\n-\n-In detail, the functions provided test characters for particular\n-properties; they are analogous to the functions like @code{isalpha} and\n-@code{islower} provided by the C library.\n-\n-The first function is implemented like this on IRIX:\n-\n-@example\n-bool\n-ctype<char>::\n-is(mask __m, char __c) const throw()\n-@{ return (_M_table)[(unsigned char)(__c)] & __m; @}\n-@end example\n-\n-@noindent\n-The @code{_M_table} is the table passed in above, in the constructor.\n-This is the table that contains the bitmasks for each character.  The\n-implementation here should work on all systems.\n-\n-The next function is:\n-\n-@example\n-const char*\n-ctype<char>::\n-is(const char* __low, const char* __high, mask* __vec) const throw()\n-@{\n-  while (__low < __high)\n-    *__vec++ = (_M_table)[(unsigned char)(*__low++)];\n-  return __high;\n-@}\n-@end example\n-\n-@noindent\n-This function is similar; it copies the masks for all the characters\n-from @code{__low} up until @code{__high} into the vector given by\n-@code{__vec}.\n-\n-The last two functions again are entirely generic:\n-\n-@example\n-const char*\n-ctype<char>::\n-scan_is(mask __m, const char* __low, const char* __high) const throw()\n-@{\n-  while (__low < __high && !this->is(__m, *__low))\n-    ++__low;\n-  return __low;\n-@}\n-\n-const char*\n-ctype<char>::\n-scan_not(mask __m, const char* __low, const char* __high) const throw()\n-@{\n-  while (__low < __high && this->is(__m, *__low))\n-    ++__low;\n-  return __low;\n-@}\n-@end example\n-\n-@c ---------------------------------------------------------------------\n-@c Thread safety\n-@c ---------------------------------------------------------------------\n-\n-@node Thread safety\n-@chapter Thread safety\n-\n-The C++ library string functionality requires a couple of atomic\n-operations to provide thread-safety.  If you don't take any special\n-action, the library will use stub versions of these functions that are\n-not thread-safe.  They will work fine, unless your applications are\n-multi-threaded.\n-\n-If you want to provide custom, safe, versions of these functions, there\n-are two distinct approaches.  One is to provide a version for your CPU,\n-using assembly language constructs.  The other is to use the\n-thread-safety primitives in your operating system.  In either case, you\n-make a file called @file{atomicity.h}, and the variable\n-@code{ATOMICITYH} must point to this file.\n-\n-If you are using the assembly-language approach, put this code in\n-@file{config/cpu/<chip>/atomicity.h}, where chip is the name of\n-your processor (@pxref{CPU}).  No additional changes are necessary to\n-locate the file in this case; @code{ATOMICITYH} will be set by default.\n-\n-If you are using the operating system thread-safety primitives approach,\n-you can also put this code in the same CPU directory, in which case no more\n-work is needed to locate the file.  For examples of this approach,\n-see the @file{atomicity.h} file for IRIX or IA64.\n-\n-Alternatively, if the primitives are more closely related to the OS\n-than they are to the CPU, you can put the @file{atomicity.h} file in\n-the @ref{Operating system} directory instead.  In this case, you must\n-edit @file{configure.host}, and in the switch statement that handles\n-operating systems, override the @code{ATOMICITYH} variable to point to\n-the appropriate @code{os_include_dir}.  For examples of this approach,\n-see the @file{atomicity.h} file for AIX.\n-\n-With those bits out of the way, you have to actually write\n-@file{atomicity.h} itself.  This file should be wrapped in an\n-include guard named @code{_GLIBCXX_ATOMICITY_H}.  It should define one\n-type, and two functions.  \n-\n-The type is @code{_Atomic_word}.  Here is the version used on IRIX:\n-\n-@example\n-typedef long _Atomic_word;\n-@end example\n-\n-@noindent\n-This type must be a signed integral type supporting atomic operations.\n-If you're using the OS approach, use the same type used by your system's\n-primitives.  Otherwise, use the type for which your CPU provides atomic\n-primitives.\n-\n-Then, you must provide two functions.  The bodies of these functions\n-must be equivalent to those provided here, but using atomic operations:\n-\n-@example\n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add (_Atomic_word* __mem, int __val)\n-@{\n-  _Atomic_word __result = *__mem;\n-  *__mem += __val;\n-  return __result;\n-@}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add (_Atomic_word* __mem, int __val)\n-@{\n-  *__mem += __val;\n-@}\n-@end example\n-\n-@c ---------------------------------------------------------------------\n-@c Numeric limits\n-@c ---------------------------------------------------------------------\n-\n-@node Numeric limits\n-@chapter Numeric limits\n-\n-The C++ library requires information about the fundamental data types,\n-such as the minimum and maximum representable values of each type.\n-You can define each of these values individually, but it is usually\n-easiest just to indicate how many bits are used in each of the data\n-types and let the library do the rest.  For information about the\n-macros to define, see the top of @file{include/bits/std_limits.h}.\n-\n-If you need to define any macros, you can do so in @file{os_defines.h}.\n-However, if all operating systems for your CPU are likely to use the\n-same values, you can provide a CPU-specific file instead so that you\n-do not have to provide the same definitions for each operating system.\n-To take that approach, create a new file called @file{cpu_limits.h} in\n-your CPU configuration directory (@pxref{CPU}).\n-\n-@c ---------------------------------------------------------------------\n-@c Libtool\n-@c ---------------------------------------------------------------------\n-\n-@node Libtool\n-@chapter Libtool\n-\n-The C++ library is compiled, archived and linked with libtool.\n-Explaining the full workings of libtool is beyond the scope of this\n-document, but there are a few, particular bits that are necessary for\n-porting.\n-\n-Some parts of the libstdc++-v3 library are compiled with the libtool\n-@code{--tags CXX} option (the C++ definitions for libtool).  Therefore,\n-@file{ltcf-cxx.sh} in the top-level directory needs to have the correct\n-logic to compile and archive objects equivalent to the C version of libtool,\n-@file{ltcf-c.sh}.  Some libtool targets have definitions for C but not\n-for C++, or C++ definitions which have not been kept up to date.\n-\n-The C++ run-time library contains initialization code that needs to be\n-run as the library is loaded.  Often, that requires linking in special\n-object files when the C++ library is built as a shared library, or\n-taking other system-specific actions.\n-\n-The libstdc++-v3 library is linked with the C version of libtool, even\n-though it is a C++ library.  Therefore, the C version of libtool needs to\n-ensure that the run-time library initializers are run.  The usual way to\n-do this is to build the library using @code{gcc -shared}.\n-\n-If you need to change how the library is linked, look at\n-@file{ltcf-c.sh} in the top-level directory.  Find the switch statement\n-that sets @code{archive_cmds}.  Here, adjust the setting for your\n-operating system.\n-\n-@c ---------------------------------------------------------------------\n-@c GFDL\n-@c ---------------------------------------------------------------------\n-\n-@include fdl.texi\n-\n-@c ---------------------------------------------------------------------\n-@c Epilogue\n-@c ---------------------------------------------------------------------\n-\n-@contents\n-@bye"}, {"sha": "3d3d673cf89c8939539b4fe5ea4e03e21dcf0162", "filename": "libstdc++-v3/doc/html/17_intro/tr1_status.html", "status": "removed", "additions": 0, "deletions": 2322, "changes": 2322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Ftr1_status.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Ftr1_status.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F17_intro%2Ftr1_status.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,2322 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html \n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"DTD/xhtml1-transitional.dtd\">\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-\n-<head>\n-\n-  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-  <link rev=\"made\" href=\"mailto:gcc@gcc.gnu.org\" />\n-  <link rel=\"shortcut icon\" href=\"http://gcc.gnu.org/favicon.ico\" />\n-\n-  <title>\n-    Status of TR1 features in GCC\n-    - GNU Project - Free Software Foundation (FSF)\n-  </title>\n-\n-</head>\n-\n-<body>\n-\n-<h1 align=\"center\">\n- Status of TR1 features in GCC\n-</h1>\n-\n-<p>\n-This table is based on the table of contents of ISO/IEC DTR 19768\n-Doc No: N1836=05-0096 Date: 2005-06-24\n-Draft Technical Report on C++ Library Extensions\n-</p>\n-\n-<p>\n-In this implementation the header names are prefixed by\n-<code>tr1/</code>, for instance <code>&lt;tr1/functional&gt;</code>,\n-<code>&lt;tr1/memory&gt;</code>, and so on.\n-</p>\n-\n-<p>\n-This page describes the TR1 support in mainline GCC SVN, not in any particular\n-release.\n-</p>\n-\n-<table border=\"1\">\n-  <thead>\n-    <tr>\n-      <td><span style=\"font-weight: bold;\">Section</span></td>\n-      <td><span style=\"font-weight: bold;\">Description</span></td>\n-      <td><span style=\"font-weight: bold;\">Done</span></td>\n-      <td><span style=\"font-weight: bold;\">Broken</span></td>\n-      <td><span style=\"font-weight: bold;\">Missing</span></td>\n-      <td><span style=\"font-weight: bold;\">Comments</span></td>\n-    </tr>\n-  </thead>\n-  <tbody>\n-    <tr>\n-      <td><b>2</b></td>\n-      <td colspan=\"5\"><b>General Utilities</b></td>\n-    </tr>\n-    <tr>\n-      <td>2.1</td>\n-      <td>Reference wrappers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.1.1</td>\n-      <td>Additions to header <code>&lt;functional&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.1.2</td>\n-      <td>Class template <code>reference_wrapper</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.1.2.1</td>\n-      <td><code>reference_wrapper</code> construct/copy/destroy</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.1.2.2</td>\n-      <td><code>reference_wrapper</code> assignment</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.1.2.3</td>\n-      <td><code>reference_wrapper</code> access</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.1.2.4</td>\n-      <td><code>reference_wrapper</code> invocation</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.1.2.5</td>\n-      <td><code>reference_wrapper</code> helper functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2</td>\n-      <td>Smart pointers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.1</td>\n-      <td>Additions to header <code>&lt;memory&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.2</td>\n-      <td>Class <code>bad_weak_ptr</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.3</td>\n-      <td>Class template <code>shared_ptr</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td><a href=\"tr1.html#1\">1</a></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.3.1</td>\n-      <td><code>shared_ptr</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.3.2</td>\n-      <td><code>shared_ptr</code> destructor</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.3.3</td>\n-      <td><code>shared_ptr</code> assignment</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.3.4</td>\n-      <td><code>shared_ptr</code> modifiers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.3.5</td>\n-      <td><code>shared_ptr</code> observers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.3.6</td>\n-      <td><code>shared_ptr</code> comparison</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.3.7</td>\n-      <td><code>shared_ptr</code> I/O</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.3.8</td>\n-      <td><code>shared_ptr</code> specialized algorithms</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.3.9</td>\n-      <td><code>shared_ptr</code> casts</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.3.10</td>\n-      <td><code>get_deleter</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.4</td>\n-      <td>Class template <code>weak_ptr</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.4.1</td>\n-      <td><code>weak_ptr</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.4.2</td>\n-      <td><code>weak_ptr</code> destructor</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.4.3</td>\n-      <td><code>weak_ptr</code> assignment</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.4.4</td>\n-      <td><code>weak_ptr</code> modifiers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.4.5</td>\n-      <td><code>weak_ptr</code> observers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.4.6</td>\n-      <td><code>weak_ptr</code> comparison</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.4.7</td>\n-      <td><code>weak_ptr</code> specialized algorithms</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>2.2.5</td>\n-      <td>Class template <code>enable_shared_from_this</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td><b>3</b></td>\n-      <td colspan=\"5\"><b>Function objects</b></td>\n-    </tr>\n-    <tr>\n-      <td>3.1</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.2</td>\n-      <td>Additions to <code>&lt;functional&gt; synopsis</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.3</td>\n-      <td>Requirements</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.4</td>\n-      <td>Function return types</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.5</td>\n-      <td>Function template <code>mem_fn</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.6</td>\n-      <td>Function object binders</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.6.1</td>\n-      <td>Class template <code>is_bind_expression</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.6.2</td>\n-      <td>Class template <code>is_placeholder</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.6.3</td>\n-      <td>Function template <code>bind</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.6.4</td>\n-      <td>Placeholders</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7</td>\n-      <td>Polymorphic function wrappers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7.1</td>\n-      <td>Class <code>bad_function_call<code></code></code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7.1.1</td>\n-      <td><code>bad_function_call</code> constructor</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7.2</td>\n-      <td>Class template <code>function</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7.2.1</td>\n-      <td><code>function</code> construct/copy/destroy</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7.2.2</td>\n-      <td><code>function</code> modifiers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7.2.3</td>\n-      <td><code>function</code> capacity</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7.2.4</td>\n-      <td><code>function</code> invocation</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7.2.5</td>\n-      <td><code>function</code> target access</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7.2.6</td>\n-      <td>undefined operators</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7.2.7</td>\n-      <td>null pointer comparison operators</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>3.7.2.8</td>\n-      <td>specialized algorithms</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td><b>4</b></td>\n-      <td colspan=\"5\"><b>Metaprogramming and type traits</b></td>\n-    </tr>\n-    <tr>\n-      <td>4.1</td>\n-      <td>Requirements</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.2</td>\n-      <td>Header <code>&lt;type_traits&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.3</td>\n-      <td>Helper classes</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.4</td>\n-      <td>General Requirements</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.5</td>\n-      <td>Unary Type Traits</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.5.1</td>\n-      <td>Primary Type Categories</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.5.2</td>\n-      <td>Composite type traits</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.5.3</td>\n-      <td>Type properties</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.6</td>\n-      <td>Relationships between types</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.7</td>\n-      <td>Transformations between types</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.7.1</td>\n-      <td>Const-volatile modifications</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.7.2</td>\n-      <td>Reference modifications</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.7.3</td>\n-      <td>Array modifications</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.7.4</td>\n-      <td>Pointer modifications</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.8</td>\n-      <td>Other transformations</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>4.9</td>\n-      <td>Implementation requirements</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td><b>5</b></td>\n-      <td colspan=\"5\"><b>Numerical facilities</b></td>\n-    </tr>\n-    <tr>\n-      <td>5.1</td>\n-      <td>Random number generation</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.1</td>\n-      <td>Requirements</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.2</td>\n-      <td>Header <code>&lt;random&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.3</td>\n-      <td>Class template <code>variate_generator</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.4</td>\n-      <td>Random number engine class templates</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.4.1</td>\n-      <td>Class template <code>linear_congruential</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.4.2</td>\n-      <td>Class template <code>mersenne_twister</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.4.3</td>\n-      <td>Class template <code>subtract_with_carry</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.4.4</td>\n-      <td>Class template <code>subtract_with_carry_01</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.4.5</td>\n-      <td>Class template <code>discard_block</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.4.6</td>\n-      <td>Class template <code>xor_combine</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>operator()() per N2079</td>\n-    </tr>\n-    <tr>\n-      <td>5.1.5</td>\n-      <td>Engines with predefined parameters</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.6</td>\n-      <td>Class <code>random_device</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.7</td>\n-      <td>Random distribution class templates</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.7.1</td>\n-      <td>Class template <code>uniform_int</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.7.2</td>\n-      <td>Class <code>bernoulli_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.7.3</td>\n-      <td>Class template <code>geometric_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.7.4</td>\n-      <td>Class template <code>poisson_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.7.5</td>\n-      <td>Class template <code>binomial_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.7.6</td>\n-      <td>Class template <code>uniform_real</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.7.7</td>\n-      <td>Class template <code>exponential_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.7.8</td>\n-      <td>Class template <code>normal_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.1.7.9</td>\n-      <td>Class template <code>gamma_distribution</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2</td>\n-      <td>Mathematical special functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1</td>\n-      <td>Additions to header <code>&lt;cmath&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.1</td>\n-      <td>associated Laguerre polynomials</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.2</td>\n-      <td>associated Legendre functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.3</td>\n-      <td>beta function</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.4</td>\n-      <td>(complete) elliptic integral of the first kind</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.5</td>\n-      <td>(complete) elliptic integral of the second kind</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.6</td>\n-      <td>(complete) elliptic integral of the third kind</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.7</td>\n-      <td>confluent hypergeometric functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.8</td>\n-      <td>regular modified cylindrical Bessel functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.9</td>\n-      <td>cylindrical Bessel functions (of the first kind)</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.10</td>\n-      <td>irregular modified cylindrical Bessel functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.11</td>\n-      <td>cylindrical Neumann functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.12</td>\n-      <td>(incomplete) elliptic integral of the first kind</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.13</td>\n-      <td>(incomplete) elliptic integral of the second kind</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.14</td>\n-      <td>(incomplete) elliptic integral of the third kind</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.15</td>\n-      <td>exponential integral</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.16</td>\n-      <td>Hermite polynomials</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.17</td>\n-      <td>hypergeometric functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.18</td>\n-      <td>Laguerre polynomials</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.19</td>\n-      <td>Legendre polynomials</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.20</td>\n-      <td>Riemann zeta function</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.21</td>\n-      <td>spherical Bessel functions (of the first kind)</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.22</td>\n-      <td>spherical associated Legendre functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.1.23</td>\n-      <td>spherical Neumann functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>5.2.2</td>\n-      <td>Additions to header <code>&lt;math.h&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td><b>6</b></td>\n-      <td colspan=\"5\"><b>Containers</b></td>\n-    </tr>\n-    <tr>\n-      <td>6.1</td>\n-      <td>Tuple types</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.1.1</td>\n-      <td>Header <code>&lt;tuple&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.1.2</td>\n-      <td>Additions to header <code>&lt;utility&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.1.3</td>\n-      <td>Class template <code>tuple</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.1.3.1</td>\n-      <td>Construction</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.1.3.2</td>\n-      <td>Tuple creation functions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.1.3.3</td>\n-      <td>Tuple helper classes</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.1.3.4</td>\n-      <td>Element access</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.1.3.5</td>\n-      <td>Relational operators</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.1.4</td>\n-      <td>Pairs</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.2</td>\n-      <td>Fixed size array</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.2.1</td>\n-      <td>Header <code>&lt;array&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.2.2</td>\n-      <td>Class template <code>array</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.2.2.1</td>\n-      <td><code>array</code> constructors, copy, and assignment</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.2.2.2</td>\n-      <td><code>array</code> specialized algorithms</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.2.2.3</td>\n-      <td><code>array</code> size</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.2.2.4</td>\n-      <td>Zero sized <code>array</code>s</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.2.2.5</td>\n-      <td>Tuple interface to class template <code>array</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3</td>\n-      <td>Unordered associative containers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.1</td>\n-      <td>Unordered associative container requirements</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.1.1</td>\n-      <td>Exception safety guarantees</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.2</td>\n-      <td>Additions to header <code>&lt;functional&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.3</td>\n-      <td>Class template <code>hash</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4</td>\n-      <td>Unordered associative container classes</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.1</td>\n-      <td>Header <code>&lt;unordered_set&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.2</td>\n-      <td>Header <code>&lt;unordered_map&gt;</code> synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.3</td>\n-      <td>Class template <code>unordered_set</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.3.1</td>\n-      <td><code>unordered_set</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.3.2</td>\n-      <td><code>unordered_set</code> swap</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.4</td>\n-      <td>Class template <code>unordered_map</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.4.1</td>\n-      <td><code>unordered_map</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.4.2</td>\n-      <td><code>unordered_map</code> element access</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.4.3</td>\n-      <td><code>unordered_map</code> swap</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.5</td>\n-      <td>Class template <code>unordered_multiset<code></code></code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.5.1</td>\n-      <td><code>unordered_multiset</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.5.2</td>\n-      <td><code>unordered_multiset</code> swap</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.6</td>\n-      <td>Class template <code>unordered_multimap</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.6.1</td>\n-      <td><code>unordered_multimap</code> constructors</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>6.3.4.6.2</td>\n-      <td><code>unordered_multimap</code> swap</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td><b>7</b></td>\n-      <td colspan=\"5\"><b>Regular expressions</b></td>\n-    </tr>\n-    <tr>\n-      <td>7.1</td>\n-      <td>Definitions</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.2</td>\n-      <td>Requirements</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.3</td>\n-      <td>Regular expressions summary</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.4</td>\n-      <td>Header <code>&lt;regex&gt;</code> synopsis</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.5</td>\n-      <td>Namespace <code>tr1::regex_constants</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.5.1</td>\n-      <td>Bitmask Type <code>syntax_option_type</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.5.2</td>\n-      <td>Bitmask Type <code>regex_constants::match_flag_type</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.5.3</td>\n-      <td>Implementation defined <code>error_type</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.6</td>\n-      <td>Class <code>regex_error</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.7</td>\n-      <td>Class template <code>regex_traits</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.8</td>\n-      <td>Class template <code>basic_regex</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.8.1</td>\n-      <td><code>basic_regex</code> constants</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.8.2</td>\n-      <td><code>basic_regex</code> constructors</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.8.3</td>\n-      <td><code>basic_regex</code> assign</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.8.4</td>\n-      <td><code>basic_regex</code> constant operations</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.8.5</td>\n-      <td><code>basic_regex</code> locale</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.8.6</td>\n-      <td><code>basic_regex</code> swap</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.8.7</td>\n-      <td><code>basic_regex</code> non-member functions</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.8.7.1</td>\n-      <td><code>basic_regex</code> non-member swap</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.9</td>\n-      <td>Class template <code>sub_match</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.9.1</td>\n-      <td><code>sub_match</code> members</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.9.2</td>\n-      <td><code>sub_match</code> non-member operators</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.10</td>\n-      <td>Class template <code>match_results</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.10.1</td>\n-      <td><code>match_results</code> constructors</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.10.2</td>\n-      <td><code>match_results</code> size</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.10.3</td>\n-      <td><code>match_results</code> element access</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.10.4</td>\n-      <td><code>match_results</code> formatting</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.10.5</td>\n-      <td><code>match_results</code> allocator</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.10.6</td>\n-      <td><code>match_results</code> swap</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.11</td>\n-      <td>Regular expression algorithms</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.11.1</td>\n-      <td>exceptions</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.11.2</td>\n-      <td><code>regex_match</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.11.3</td>\n-      <td><code>regex_search</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.11.4</td>\n-      <td><code>regex_replace</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.12</td>\n-      <td>Regular expression Iterators</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.12.1</td>\n-      <td>Class template <code>regex_iterator</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.12.1.1</td>\n-      <td><code>regex_iterator</code> constructors</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.12.1.2</td>\n-      <td><code>regex_iterator</code> comparisons</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.12.1.3</td>\n-      <td><code>regex_iterator</code> dereference</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.12.1.4</td>\n-      <td><code>regex_iterator</code> increment</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.12.2</td>\n-      <td>Class template <code>regex_token_iterator</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.12.2.1</td>\n-      <td><code>regex_token_iterator</code> constructors</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.12.2.2</td>\n-      <td><code>regex_token_iterator</code> comparisons</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.12.2.3</td>\n-      <td><code>regex_token_iterator</code> dereference</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.12.2.4</td>\n-      <td><code>regex_token_iterator</code> increment</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>7.13</td>\n-      <td>Modified ECMAScript regular expression grammar</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td><b>8</b></td>\n-      <td colspan=\"5\"><b>C compatibility</b></td>\n-    </tr>\n-    <tr>\n-      <td>8.1</td>\n-      <td>Additions to header <code>&lt;complex&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.1.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.1.2</td>\n-      <td>Function <code>acos</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.1.3</td>\n-      <td>Function <code>asin</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.1.4</td>\n-      <td>Function <code>atan</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.1.5</td>\n-      <td>Function <code>acosh</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.1.6</td>\n-      <td>Function <code>asinh</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.1.7</td>\n-      <td>Function <code>atanh</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.1.8</td>\n-      <td>Function <code>fabs</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.1.9</td>\n-      <td>Additional Overloads</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.2</td>\n-      <td>Header <code>&lt;ccomplex&gt;</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td>DR 551</td>\n-    </tr>\n-    <tr>\n-      <td>8.3</td>\n-      <td>Header <code>&lt;complex.h&gt;</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td>DR 551</td>\n-    </tr>\n-    <tr>\n-      <td>8.4</td>\n-      <td>Additions to header <code>&lt;cctype&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.4.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.4.2</td>\n-      <td>Function <code>isblank</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.5</td>\n-      <td>Additions to header <code>&lt;ctype.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.6</td>\n-      <td>Header <code>&lt;cfenv&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.6.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.6.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.7</td>\n-      <td>Header <code>&lt;fenv.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.8</td>\n-      <td>Additions to header <code>&lt;cfloat&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.9</td>\n-      <td>Additions to header <code>&lt;float.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.10</td>\n-      <td>Additions to header <code>&lt;ios&gt;</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.10.1</td>\n-      <td>Synopsis</td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.10.2</td>\n-      <td>Function <code>hexfloat</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.11</td>\n-      <td>Header <code>&lt;cinttypes&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.11.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>DR 557</td>\n-    </tr>\n-    <tr>\n-      <td>8.11.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.12</td>\n-      <td>Header <code>&lt;inttypes.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.13</td>\n-      <td>Additions to header <code>&lt;climits&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.14</td>\n-      <td>Additions to header <code>&lt;limits.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.15</td>\n-      <td>Additions to header <code>&lt;locale&gt;</code></td>\n-      <td></td>\n-      <td></td>\n-      <td>missing</td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.16</td>\n-      <td>Additions to header <code>&lt;cmath&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.16.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.16.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.16.3</td>\n-      <td>Function template definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.16.4</td>\n-      <td>Additional overloads</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>DR 568; DR 550</td>\n-    </tr>\n-    <tr>\n-      <td>8.17</td>\n-      <td>Additions to header <code>&lt;math.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.18</td>\n-      <td>Additions to header <code>&lt;cstdarg&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.19</td>\n-      <td>Additions to header <code>&lt;stdarg.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.20</td>\n-      <td>The header <code>&lt;cstdbool&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.21</td>\n-      <td>The header <code>&lt;stdbool.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.22</td>\n-      <td>The header <code>&lt;cstdint&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.22.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.22.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.23</td>\n-      <td>The header <code>&lt;stdint.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.24</td>\n-      <td>Additions to header <code>&lt;cstdio&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.24.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.24.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.24.3</td>\n-      <td>Additional format specifiers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>C library responsibility</td>\n-    </tr>\n-    <tr>\n-      <td>8.24.4</td>\n-      <td>Additions to header <code>&lt;stdio.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.25</td>\n-      <td>Additions to header <code>&lt;cstdlib&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.25.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.25.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.25.3</td>\n-      <td>Function <code>abs</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.25.4</td>\n-      <td>Function <code>div</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.26</td>\n-      <td>Additions to header <code>&lt;stdlib.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.27</td>\n-      <td>Header <code>&lt;ctgmath&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>DR 551</td>\n-    </tr>\n-    <tr>\n-      <td>8.28</td>\n-      <td>Header <code>&lt;tgmath.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>DR 551</td>\n-    </tr>\n-    <tr>\n-      <td>8.29</td>\n-      <td>Additions to header <code>&lt;ctime&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>C library responsibility</td>\n-    </tr>\n-    <tr>\n-      <td>8.30</td>\n-      <td>Additions to header <code>&lt;cwchar&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.30.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.30.2</td>\n-      <td>Definitions</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.30.3</td>\n-      <td>Additional wide format specifiers</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td>C library responsibility</td>\n-    </tr>\n-    <tr>\n-      <td>8.31</td>\n-      <td>Additions to header <code>&lt;wchar.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.32</td>\n-      <td>Additions to header <code>&lt;cwctype&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.32.1</td>\n-      <td>Synopsis</td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.32.2</td>\n-      <td>Function <code>iswblank</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-    <tr>\n-      <td>8.33</td>\n-      <td>Additions to header <code>&lt;wctype.h&gt;</code></td>\n-      <td>done</td>\n-      <td></td>\n-      <td></td>\n-      <td></td>\n-    </tr>\n-  </tbody>\n-</table>\n-\n-<h3>Footnotes</h3>\n-\n-<ol>\n-\n-  <li>\n-    <a name=\"1\"/>\n-    The shared_ptr implementation uses some code from the\n-    <a href=\"http://www.boost.org/libs/smart_ptr/shared_ptr.htm\">Boost \n-    shared_ptr</a> library.\n-  </li>\n-\n-</ol>\n-\n-<p>\n-Please send FSF &amp; GNU inquiries &amp; questions to\n-<a href=\"mailto:gnu@gnu.org\">gnu@gnu.org</a>.\n-There are also <a href=\"http://www.gnu.org/home.html#ContactInfo\">other ways\n-to contact</a> the FSF.\n-</p>\n-\n-<p>\n-These pages are maintained by\n-<a href=\"http://gcc.gnu.org/about.html\">the GCC team</a>.\n-</p>\n-\n-<address>\n-For questions related to the use of GCC, please consult these web\n-pages and the <a href=\"http://gcc.gnu.org/onlinedocs/\">GCC manuals</a>. If\n-that fails, the <a href=\"mailto:gcc-help@gcc.gnu.org\">gcc-help@gcc.gnu.org</a>\n-mailing list might help.<br />\n-Please send comments on these web pages and the development of GCC to our\n-developer mailing list at <a href=\"mailto:gcc@gnu.org\">gcc@gnu.org</a>\n-or <a href=\"mailto:gcc@gcc.gnu.org\">gcc@gcc.gnu.org</a>.  All of our lists\n-have <a href=\"http://gcc.gnu.org/lists.html\">public archives</a>.\n-</address>\n-\n-<p>\n-Copyright (C) Free Software Foundation, Inc.,\n-51 Franklin St, Fifth Floor, Boston, MA 02110, USA.\n-</p>\n-<p>\n-Verbatim copying and distribution of this entire article is\n-permitted in any medium, provided this notice is preserved.\n-</p>\n-\n-<table width=\"100%\" border=\"0\">\n-<tr>\n-  <td>\n-    <!-- IGNORE DIFF -->Last modified 2006-10-01\n-  </td>\n-  <td align=\"right\" valign=\"bottom\">\n-    <a href=\"http://validator.w3.org/check/referer\">\n-        <img src=\"http://www.w3.org/Icons/valid-xhtml10\"\n-       alt=\"Valid XHTML 1.0\" border=\"0\" width=\"88\" height=\"31\" />\n-    </a>\n-  </td>\n-</tr>\n-</table>\n-\n-</body>\n-</html>"}, {"sha": "d7ea434db2df1a42f9648b0d0fce535f9abbed2e", "filename": "libstdc++-v3/doc/html/18_support/howto.html", "status": "removed", "additions": 0, "deletions": 435, "changes": 435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F18_support%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F18_support%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F18_support%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,435 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 18.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ HOWTO:  Chapter 18: Library Support</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Prev\" href=\"../17_intro/howto.html\" type=\"text/html\"\n-  title=\"Library Introduction\" />\n-<link rel=\"Next\" href=\"../19_diagnostics/howto.html\" type=\"text/html\"\n-  title=\"Diagnostics\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Chapter 18:  Library Support</a></h1>\n-\n-<p>Chapter 18 deals with the functions called and objects created\n-   automatically during the course of a program's existence.\n-</p>\n-<p>While we can't reproduce the contents of the Standard here (you need to\n-   get your own copy from your nation's member body; see our homepage for\n-   help), we can mention a couple of changes in what kind of support a C++\n-   program gets from the Standard Library.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h1>Contents</h1>\n-<ul>\n-   <li><a href=\"#1\">Types</a></li>\n-   <li><a href=\"#2\">Implementation properties</a></li>\n-   <li><a href=\"#3\">Start and Termination</a></li>\n-   <li><a href=\"#4\">Verbose <code>terminate</code></a></li>\n-   <li><a href=\"#5\">Dynamic memory management</a></li>\n-   <li><a href=\"#6\">RTTI, the ABI, and demangling</a></li>\n-</ul>\n-\n-<hr />\n-\n-<!-- ####################################################### -->\n-\n-<h2><a name=\"1\">Types</a></h2>\n-   <p>All the types that you're used to in C are here in one form or\n-      another.  The only change that might affect people is the type of\n-      NULL:  while it is required to be a macro, the definition of that\n-      macro is <em>not</em> allowed to be <code>(void*)0</code>, which is\n-      often used in C.\n-   </p>\n-   <p>In g++, NULL is #define'd to be <code>__null</code>, a magic keyword\n-      extension of g++.\n-   </p>\n-   <p>The biggest problem of #defining NULL to be something like\n-      &quot;0L&quot; is that the compiler will view that as a long integer\n-      before it views it as a pointer, so overloading won't do what you\n-      expect.  (This is why g++ has a magic extension, so that NULL is\n-      always a pointer.)\n-   </p>\n-   <p>In his book\n-      <a href=\"http://www.awprofessional.com/titles/0-201-92488-9/\"><em>Effective C++</em></a>,\n-      Scott Meyers points out that the best way to solve this problem is to\n-      not overload on pointer-vs-integer types to begin with.  He also\n-      offers a way to make your own magic NULL that will match pointers\n-      before it matches integers:\n-   </p>\n-   <pre>\n-   const                             // this is a const object...\n-   class {\n-   public:\n-     template&lt;class T&gt;               // convertible to any type\n-       operator T*() const           // of null non-member\n-       { return 0; }                 // pointer...\n-\n-     template&lt;class C, class T&gt;      // or any type of null\n-       operator T C::*() const       // member pointer...\n-       { return 0; }\n-\n-   private:\n-     void operator&amp;() const;         // whose address can't be\n-                                     // taken (see Item 27)...\n-\n-   } NULL;                           // and whose name is NULL\n-   </pre>\n-   <p>(Cribbed from the published version of\n-      <a href=\"http://www.awprofessional.com/titles/0-201-31015-5/\">the\n-      Effective C++ CD</a>, reproduced here with permission.)\n-   </p>\n-   <p>If you aren't using g++ (why?), but you do have a compiler which\n-      supports member function templates, then you can use this definition\n-      of NULL (be sure to #undef any existing versions).  It only helps if\n-      you actually use NULL in function calls, though; if you make a call of\n-      <code>foo(0);</code> instead of <code>foo(NULL);</code>, then you're back\n-      where you started.\n-   </p>\n-   <p><strong>Added Note:</strong>  When we contacted Dr. Meyers to ask\n-      permission to\n-      print this stuff, it prompted him to run this code through current\n-      compilers to see what the state of the art is with respect to member\n-      template functions.  He posted\n-      <a href=\"http://groups.google.com/groups?oi=djq&amp;selm=an_644660779\">\n-      an article to Usenet</a> after discovering that the code above is not\n-      valid!  Even though it has no data members, it still needs a\n-      user-defined constructor (which means that the class needs a type name\n-      after all).  The ctor can have an empty body; it just needs to be\n-      there.  (Stupid requirement?  We think so too, and this will probably\n-      be changed in the language itself.)\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"2\">Implementation properties</a></h2>\n-   <h3><code>&lt;limits&gt;</code></h3>\n-   <p>This header mainly defines traits classes to give access to various\n-   implementation defined-aspects of the fundamental types.  The\n-   traits classes -- fourteen in total -- are all specializations of the \n-   template class <code>numeric_limits</code>, documented\n-   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/structstd_1_1numeric__limits.html\">here</a>\n-   and defined as follows:\n-   </p>\n-   <pre>\n-   template&lt;typename T&gt; struct class {\n-      static const bool is_specialized;\n-      static T max() throw();\n-      static T min() throw();\n-\n-      static const int digits;\n-      static const int digits10;\n-      static const bool is_signed;\n-      static const bool is_integer;\n-      static const bool is_exact;\n-      static const int radix;\n-      static T epsilon() throw();\n-      static T round_error() throw();\n-\n-      static const int min_exponent;\n-      static const int min_exponent10;\n-      static const int max_exponent;\n-      static const int max_exponent10;\n-\n-      static const bool has_infinity;\n-      static const bool has_quiet_NaN;\n-      static const bool has_signaling_NaN;\n-      static const float_denorm_style has_denorm;\n-      static const bool has_denorm_loss;\n-      static T infinity() throw();\n-      static T quiet_NaN() throw();\n-      static T denorm_min() throw();\n-\n-      static const bool is_iec559;\n-      static const bool is_bounded;\n-      static const bool is_modulo;\n-\n-      static const bool traps;\n-      static const bool tinyness_before;\n-      static const float_round_style round_style;\n-   };</pre>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"3\">Start and Termination</a></h2>\n-   <p>Not many changes here to <code>&lt;cstdlib&gt;</code> (the old stdlib.h).\n-      You should note that the <code>abort()</code> function does not call\n-      the destructors of automatic nor static objects, so if you're depending\n-      on those to do cleanup, it isn't going to happen.  (The functions\n-      registered with <code>atexit()</code> don't get called either, so you\n-      can forget about that possibility, too.)\n-   </p>\n-   <p>The good old <code>exit()</code> function can be a bit funky, too, until\n-      you look closer.  Basically, three points to remember are:\n-   </p>\n-      <ol>\n-        <li>Static objects are destroyed in reverse order of their creation.\n-        </li>\n-        <li>Functions registered with <code>atexit()</code> are called in\n-            reverse order of registration, once per registration call.\n-            (This isn't actually new.)\n-        </li>\n-        <li>The previous two actions are &quot;interleaved,&quot; that is,\n-            given this pseudocode:\n-            <pre>\n-              extern \"C or C++\" void  f1 (void);\n-              extern \"C or C++\" void  f2 (void);\n-\n-              static Thing obj1;\n-              atexit(f1);\n-              static Thing obj2;\n-              atexit(f2);\n-            </pre>\n-            then at a call of <code>exit()</code>, f2 will be called, then\n-            obj2 will be destroyed, then f1 will be called, and finally obj1\n-            will be destroyed.  If f1 or f2 allow an exception to propagate\n-            out of them, Bad Things happen.\n-        </li>\n-      </ol>\n-   <p>Note also that <code>atexit()</code> is only required to store 32\n-      functions, and the compiler/library might already be using some of\n-      those slots.  If you think you may run out, we recommend using\n-      the xatexit/xexit combination from libiberty, which has no such limit.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"4\">Verbose <code>terminate</code></a></h2>\n-   <p>If you are having difficulty with uncaught exceptions and want a\n-      little bit of help debugging the causes of the core dumps, you can\n-      make use of a GNU extension in GCC 3.1 and later:\n-   </p>\n-   <pre>\n-   #include &lt;exception&gt;\n-\n-   int main()\n-   {\n-       std::set_terminate(__gnu_cxx::__verbose_terminate_handler);\n-       ...\n-\n-       throw <em>anything</em>;\n-   }</pre>\n-   <p>The <code> __verbose_terminate_handler </code> function obtains the name\n-      of the current exception, attempts to demangle it, and prints it to\n-      stderr.  If the exception is derived from <code> std::exception </code>\n-      then the output from <code>what()</code> will be included.\n-   </p>\n-   <p>Any replacement termination function is required to kill the program\n-      without returning; this one calls abort.\n-   </p>\n-   <p>For example:\n-   </p>\n-   <pre>\n-   #include &lt;exception&gt;\n-   #include &lt;stdexcept&gt;\n-\n-   struct argument_error : public std::runtime_error\n-   {  \n-     argument_error(const std::string&amp; s): std::runtime_error(s) { }\n-   };\n-\n-   int main(int argc)\n-   {\n-     std::set_terminate(__gnu_cxx::__verbose_terminate_handler);\n-     if (argc &gt; 5)\n-       throw argument_error(&quot;argc is greater than 5!&quot;);\n-     else\n-       throw argc;\n-   }\n-   </pre>\n-   <p>In GCC 3.1 and later, this gives\n-   </p>\n-   <pre>\n-   % ./a.out\n-   terminate called after throwing a `int'\n-   Aborted\n-   % ./a.out f f f f f f f f f f f\n-   terminate called after throwing an instance of `argument_error'\n-   what(): argc is greater than 5!\n-   Aborted\n-   %</pre>\n-   <p>The 'Aborted' line comes from the call to abort(), of course.\n-   </p>\n-   <p><strong>UPDATE:</strong> Starting with GCC 3.4, this is the default\n-      termination handler; nothing need be done to use it.  To go back to\n-      the previous &quot;silent death&quot; method, simply include\n-      <code>&lt;exception&gt;</code> and <code>&lt;cstdlib&gt;</code>,\n-      and call\n-   </p>\n-   <pre>\n-       std::set_terminate(std::abort);</pre>\n-\n-<p>\n-   This function will attempt to write to stderr.  If your application\n-    closes stderr or redirects it to an inappropriate location,\n-    <code>__verbose_terminate_handler</code> will behave in an\n-    unspecified manner.\n-</p>\n-\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-\n-<hr />\n-<h2><a name=\"5\">Dynamic memory management</a></h2>\n-   <p>There are six flavors each of <code>new</code> and\n-      <code>delete</code>, so make certain that you're using the right\n-      ones!  Here are quickie descriptions of <code>new</code>:\n-        </p>\n-   <ul>\n-      <li>single object form, throwing a <code>bad_alloc</code> on errors;\n-          this is what most people are used to using</li>\n-      <li>single object &quot;nothrow&quot; form, returning NULL on errors</li>\n-      <li>array new, throwing <code>bad_alloc</code> on errors</li>\n-      <li>array nothrow new, returning NULL on errors</li>\n-      <li>placement new, which does nothing (like it's supposed to)</li>\n-      <li>placement array new, which also does nothing</li>\n-   </ul>\n-   <p>They are distinguished by the parameters that you pass to them, like\n-      any other overloaded function.  The six flavors of <code>delete</code>\n-      are distinguished the same way, but none of them are allowed to throw\n-      an exception under any circumstances anyhow.  (They match up for\n-      completeness' sake.)\n-   </p>\n-   <p>Remember that it is perfectly okay to call <code>delete</code> on a\n-      NULL pointer!  Nothing happens, by definition.  That is not the\n-      same thing as deleting a pointer twice.\n-   </p>\n-   <p>By default, if one of the &quot;throwing <code>new</code>s&quot; can't\n-      allocate the memory requested, it tosses an instance of a\n-      <code>bad_alloc</code> exception (or, technically, some class derived\n-      from it).  You can change this by writing your own function (called a\n-      new-handler) and then registering it with <code>set_new_handler()</code>:\n-        </p>\n-   <pre>\n-   typedef void (*PFV)(void);\n-\n-   static char*  safety;\n-   static PFV    old_handler;\n-\n-   void my_new_handler ()\n-   {\n-       delete[] safety;\n-       popup_window (\"Dude, you are running low on heap memory.  You\n-                      should, like, close some windows, or something.\n-                      The next time you run out, we're gonna burn!\");\n-       set_new_handler (old_handler);\n-       return;\n-   }\n-\n-   int main ()\n-   {\n-       safety = new char[500000];\n-       old_handler = set_new_handler (&amp;my_new_handler);\n-       ...\n-   }\n-   </pre>\n-   <p><code>bad_alloc</code> is derived from the base <code>exception</code>\n-      class defined in Chapter 19.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"6\">RTTI, the ABI, and demangling</a></h2>\n-   <p>If you have read the <a href=\"../documentation.html#4\">source\n-      documentation</a> for <code> namespace abi </code> then you are aware\n-      of the cross-vendor C++ ABI which we use.  One of the exposed\n-      functions is the one which we use for demangling in programs like\n-      <code>c++filt</code>, and you can use it yourself as well.\n-   </p>\n-   <p>(The function itself might use different demanglers, but that's the\n-      whole point of abstract interfaces.  If we change the implementation,\n-      you won't notice.)\n-   </p>\n-   <p>Probably the only times you'll be interested in demangling at runtime\n-      are when you're seeing <code>typeid</code> strings in RTTI, or when\n-      you're handling the runtime-support exception classes.  For example:\n-   </p>\n-   <pre>\n-#include &lt;exception&gt;\n-#include &lt;iostream&gt;\n-#include &lt;cxxabi.h&gt;\n-\n-struct empty { };\n-\n-template &lt;typename T, int N&gt;\n-  struct bar { };\n-\n-\n-int main()\n-{\n-  int     status;\n-  char   *realname;\n-\n-  // exception classes not in &lt;stdexcept&gt;, thrown by the implementation\n-  // instead of the user\n-  std::bad_exception  e;\n-  realname = abi::__cxa_demangle(e.what(), 0, 0, &amp;status);\n-  std::cout &lt;&lt; e.what() &lt;&lt; \"\\t=&gt; \" &lt;&lt; realname &lt;&lt; \"\\t: \" &lt;&lt; status &lt;&lt; '\\n';\n-  free(realname);\n-\n-\n-  // typeid\n-  bar&lt;empty,17&gt;          u;\n-  const std::type_info  &amp;ti = typeid(u);\n-\n-  realname = abi::__cxa_demangle(ti.name(), 0, 0, &amp;status);\n-  std::cout &lt;&lt; ti.name() &lt;&lt; \"\\t=&gt; \" &lt;&lt; realname &lt;&lt; \"\\t: \" &lt;&lt; status &lt;&lt; '\\n';\n-  free(realname);\n-\n-  return 0;\n-}</pre>\n-   <p>With GCC 3.1 and later, this prints\n-   </p>\n-   <pre>\n-      St13bad_exception       =&gt; std::bad_exception   : 0\n-      3barI5emptyLi17EE       =&gt; bar&lt;empty, 17&gt;       : 0 </pre>\n-   <p>The demangler interface is described in the source documentation\n-      linked to above.  It is actually written in C, so you don't need to\n-      be writing C++ in order to demangle C++.  (That also means we have to\n-      use crummy memory management facilities, so don't forget to free()\n-      the returned char array.)\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "90a60b3bca5fe2f31375c103b6188e787298f60f", "filename": "libstdc++-v3/doc/html/19_diagnostics/howto.html", "status": "removed", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F19_diagnostics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F19_diagnostics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F19_diagnostics%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,127 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 19.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ HOWTO:  Chapter 19: Diagnostics</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Prev\" href=\"../18_support/howto.html\" type=\"text/html\"\n-  title=\"Library Support\" />\n-<link rel=\"Next\" href=\"../20_util/howto.html\" type=\"text/html\"\n-  title=\"General Utilities\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Chapter 19:  Diagnostics</a></h1>\n-\n-<p>Chapter 19 deals with program diagnostics, such as exceptions\n-   and assertions.  You know, all the things we wish weren't even\n-   necessary at all.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h1>Contents</h1>\n-<ul>\n-   <li><a href=\"#1\">Adding data to exceptions</a></li>\n-   <li><a href=\"#3\">Concept checkers -- <strong>new and improved!</strong></a></li>\n-</ul>\n-\n-<hr />\n-\n-<!-- ####################################################### -->\n-\n-<h2><a name=\"1\">Adding data to exceptions</a></h2>\n-   <p>The standard exception classes carry with them a single string as\n-      data (usually describing what went wrong or where the 'throw' took\n-      place).  It's good to remember that you can add your own data to\n-      these exceptions when extending the hierarchy:\n-   </p>\n-   <pre>\n-   struct My_Exception : public std::runtime_error\n-   {\n-     public:\n-       My_Exception (const string&amp; whatarg)\n-           : std::runtime_error(whatarg), e(errno), id(GetDataBaseID()) { }\n-       int  errno_at_time_of_throw() const { return e; }\n-       DBID id_of_thing_that_threw() const { return id; }\n-     protected:\n-       int    e;\n-       DBID   id;     // some user-defined type\n-   };\n-   </pre>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"3\">Concept checkers -- <strong>new and improved!</strong></a></h2>\n-   <p>Better taste!  Less fat!  Literally!</p>\n-   <p>In 1999, SGI added <em>concept checkers</em> to their implementation\n-      of the STL:  code which checked the template parameters of\n-      instantiated pieces of the STL, in order to insure that the parameters\n-      being used met the requirements of the standard.  For example,\n-      the Standard requires that types passed as template parameters to\n-      <code>vector</code> be &quot;Assignable&quot; (which means what you think\n-      it means).  The checking was done during compilation, and none of\n-      the code was executed at runtime.\n-   </p>\n-   <p>Unfortunately, the size of the compiler files grew significantly\n-      as a result.  The checking code itself was cumbersome.  And bugs\n-      were found in it on more than one occasion.\n-   </p>\n-   <p>The primary author of the checking code, Jeremy Siek, had already\n-      started work on a replacement implementation.  The new code has been\n-      formally reviewed and accepted into\n-      <a href=\"http://www.boost.org/libs/concept_check/concept_check.htm\">the\n-      Boost libraries</a>, and we are pleased to incorporate it into the\n-      GNU C++ library.\n-   </p>\n-   <p>The new version imposes a much smaller space overhead on the generated\n-      object file.  The checks are also cleaner and easier to read and\n-      understand.\n-   </p>\n-   <p>They are off by default for all versions of GCC from 3.0 to 3.4 (the\n-      latest release at the time of writing).\n-      They can be enabled at configure time with\n-      <a href=\"../configopts.html\"><code>--enable-concept-checks</code></a>.\n-      You can enable them on a per-translation-unit basis with\n-      <code>#define _GLIBCXX_CONCEPT_CHECKS</code> for GCC 3.4 and higher\n-      (or with <code>#define _GLIBCPP_CONCEPT_CHECKS</code> for versions\n-      3.1, 3.2 and 3.3).\n-   </p>\n-\n-   <p>Please note that the upcoming C++ standard has first-class\n-   support for template parameter constraints based on concepts in the core\n-   language. This will obviate the need for the library-simulated concept\n-   checking described above.\n-   </p>\n-\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "951c12df36d4b0ace0ac9a154f353274dad9b69f", "filename": "libstdc++-v3/doc/html/20_util/allocator.html", "status": "removed", "additions": 0, "deletions": 554, "changes": 554, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F20_util%2Fallocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F20_util%2Fallocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F20_util%2Fallocator.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,554 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards) and bkoz@gcc.gnu.org (Benjamin Kosnik)\" />\n-   <meta name=\"KEYWORDS\" content=\"c++, libstdc++, g++, allocator, memory\" />\n-   <meta name=\"DESCRIPTION\" content=\"Allocators and allocation\" />\n-   <meta name=\"GENERATOR\" content=\"emacs and ten fingers\" />\n-   <title>Allocators and allocation</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Bookmark\" href=\"howto.html\" type=\"text/html\"\n-  title=\"General Utilities\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Allocators and allocation</a></h1>\n-\n-<p class=\"fineprint\"><em>\n-   The latest version of this document is always available at\n-   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/20_util/allocator.html\">\n-   http://gcc.gnu.org/onlinedocs/libstdc++/20_util/allocator.html</a>.\n-</em></p>\n-\n-<p><em>\n-   To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++ homepage</a>.\n-</em></p>\n-\n-<!-- ####################################################### -->\n-<hr />\n-<p> The C++ Standard encapsulates memory management characteristics\n-   for strings, container classes, and parts of iostreams in a\n-   template class called <code>std::allocator</code>. This class, and\n-   base classes of it, are the superset of available free store\n-   (&quot;heap&quot;) management classes.\n-</p>\n-\n-<h3 class=\"left\">\n-  <a name=\"standard_requirements\">Standard requirements</a>\n-</h3>\n-   <p>The C++ standard only gives a few directives in this area:\n-   </p>\n-   <ul>\n-     <li>When you add elements to a container, and the container must allocate\n-         more memory to hold them, the container makes the request via its\n-         <code>Allocator</code> template parameter.  This includes adding\n-         chars to the string class, which acts as a regular STL container\n-         in this respect.\n-     </li>\n-     <li>The default <code>Allocator</code> of every container-of-T is\n-         <code>std::allocator&lt;T&gt;</code>.\n-     </li>\n-     <li>The interface of the <code>allocator&lt;T&gt;</code> class is\n-         extremely simple.  It has about 20 public declarations (nested\n-         typedefs, member functions, etc), but the two which concern us most\n-         are:\n-         <pre>\n-      T*    allocate   (size_type n, const void* hint = 0);\n-      void  deallocate (T* p, size_type n);</pre>\n-         (This is a simplification; the real signatures use nested typedefs.)\n-         The <code>&quot;n&quot;</code> arguments in both those functions is a\n-         <em>count</em> of the number of T's to allocate space for,\n-         <em>not their total size</em>.\n-     </li>\n-     <li>&quot;The storage is obtained by calling\n-         <code>::operator new(size_t)</code>, but it is unspecified when or\n-         how often this function is called.  The use of <code>hint</code>\n-         is unspecified, but intended as an aid to locality if an\n-         implementation so desires.&quot; [20.4.1.1]/6\n-      </li>\n-   </ul>\n-\n-   <p> Complete details cam be found in the C++ standard, look in\n-   [20.4 Memory].\n-   </p>\n-\n-<h3 class=\"left\">\n-  <a name=\"probs_possibilities\">Problems and Possibilities</a>\n-</h3>\n-   <p>The easiest way of fulfilling the requirements is to call operator new\n-      each time a container needs memory, and to call operator delete each\n-      time the container releases memory. This method may be \n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00105.html\">slower</a>\n-      than caching the allocations and re-using previously-allocated\n-      memory, but has the advantage of working correctly across a wide\n-      variety of hardware and operating systems, including large\n-      clusters. The <code>__gnu_cxx::new_allocator</code> implements\n-      the simple operator new and operator delete semantics, while <code>__gnu_cxx::malloc_allocator</code> implements much the same thing, only with the C language functions <code>std::malloc</code> and <code>std::free</code>.\n-   </p>\n-\n-<p> Another approach is to use intelligence within the allocator class\n-to cache allocations. This extra machinery can take a variety of\n-forms: a bitmap index, an index into an exponentially increasing\n-power-of-two-sized buckets, or simpler fixed-size pooling cache.  The\n-cache is shared among all the containers in the program: when your\n-program's std::vector&lt;int&gt; gets cut in half and frees a bunch of\n-its storage, that memory can be reused by the private\n-std::list&lt;WonkyWidget&gt; brought in from a KDE library that you\n-linked against.  And operators new and delete are not always called to\n-pass the memory on, either, which is a speed bonus. Examples of\n-allocators that use these techniques\n-are <code>__gnu_cxx::bitmap_allocator</code>, <code>__gnu_cxx::pool_allocator</code>,\n-and <code>__gnu_cxx::__mt_alloc</code>.\n-</p>\n-\n-<p>Depending on the implementation techniques used, the underlying\n-operating system, and compilation environment, scaling caching\n-allocators can be tricky. In particular, order-of-destruction and\n-order-of-creation for memory pools may be difficult to pin down with\n-certainty, which may create problems when used with plugins or loading\n-and unloading shared objects in memory. As such, using caching\n-allocators on systems that do not\n-support <code>abi::__cxa_atexit</code> is not recommended.\n-</p>\n-\n-   <p>Versions of libstdc++ prior to 3.4 cache allocations in a memory\n-   pool, instead of passing through to call the global allocation\n-   operators (ie, <code>__gnu_cxx::pool_allocator</code>).  More\n-   recent versions default to the\n-   simpler <code>__gnu_cxx::new_allocator</code>.\n-   </p>\n- \n-<h3 class=\"left\">\n-  <a name=\"stdallocator\">Implementation details of <code>std::allocator</code></a>\n-</h3>\n-   <p> The implementation of <code> std::allocator</code> has continued\n-      to evolve through successive releases. Here's a brief history.\n-   </p>\n-\n-<h5 class=\"left\">\n-  <a name=\"30allocator\"> 3.0, 3.1, 3.2, 3.3 </a>\n-</h5>\n-   <p> During this period, all allocators were written to the SGI\n-   style, and all STL containers expected this interface. This\n-   interface had a traits class called <code>_Alloc_traits</code> that\n-   attempted to provide more information for compile-time allocation\n-   selection and optimization. This traits class had another allocator\n-   wrapper, <code>__simple_alloc&lt;T,A&gt;</code>, which was a\n-   wrapper around another allocator, A, which itself is an allocator\n-   for instances of T. But wait, there's more:\n-   <code>__allocator&lt;T,A&gt;</code> is another adapter.  Many of\n-   the provided allocator classes were SGI style: such classes can be\n-   changed to a conforming interface with this wrapper:\n-   <code>__allocator&lt;T, __alloc&gt;</code> is thus the same as\n-   <code>allocator&lt;T&gt;</code>.\n-   </p>\n-\n-   <p> The class <code>std::allocator</code> use the typedef\n-   <code>__alloc</code> to select an underlying allocator that\n-   satisfied memory allocation requests. The selection of this\n-   underlying allocator was not user-configurable.\n-   </p>\n-\n-<h5 class=\"left\">\n-  <a name=\"34allocator\"> 3.4 </a>\n-</h5>\n-   <p> For this and later releases, the only allocator interface that\n-   is support is the standard C++ interface. As such, all STL\n-   containers have been adjusted, and all external allocators have\n-   been modified to support this change. Because of this,\n-   <code>__simple_alloc, __allocator, __alloc, </code> and <code>\n-   _Alloc_traits</code> have all been removed.\n-   </p>\n-\n-   <p> The class <code>std::allocator</code> just has typedef,\n-   constructor, and rebind members. It inherits from one of the\n-   high-speed extension allocators, covered below. Thus, all\n-   allocation and deallocation depends on the base class.\n-   </p>\n-\n-  <p> The base class that <code>std::allocator</code> is derived from\n-  is not user-configurable.\n-  </p>\n-\n-<h5 class=\"left\">\n-  <a name=\"benchmarks\"> How the default allocation strategy is selected.</a>\n-</h5>\n-   <p> It's difficult to pick an allocation strategy that will provide\n-   maximum utility, without excessively penalizing some behavior. In\n-   fact, it's difficult just deciding which typical actions to measure\n-   for speed.\n-   </p>\n-\n-   <p> Three synthetic benchmarks have been created that provide data\n-   that is used to compare different C++ allocators. These tests are:\n-   </p>\n-\n-   <ul>\n-     <li>Insertion. Over multiple iterations, various STL container\n-     objects have elements inserted to some maximum amount. A variety\n-     of allocators are tested.  \n-     Test source for <a\n-     href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/sequence.cc?view=markup\">sequence</a>\n-     and <a\n-     href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/associative.cc?view=markup\">associative</a>\n-     containers.\n-     </li>\n-\n-     <li>Insertion and erasure in a multi-threaded environment.\n-     This test shows the ability of the allocator to reclaim memory\n-     on a pre-thread basis, as well as measuring thread contention\n-     for memory resources. \n-     Test source \n-    <a href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert_erase/associative.cc?view=markup\">here</a>.\n-     </li>\n-\n-     <li>A threaded producer/consumer model.\n-     Test source for\n-     <a href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/producer_consumer/sequence.cc?view=markup\">sequence</a>\n-     and \n-     <a href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/producer_consumer/associative.cc?view=markup\">associative</a>\n-     containers.\n-     </li>\n-   </ul>\n-\n-<h5 class=\"left\">\n-  <a name=\"forcenew\"> Disabling memory caching.</a>\n-</h5>\n-   <p> In use, <code>std::allocator</code> may allocate and deallocate\n-   using implementation-specified strategies and heuristics. Because of\n-   this, every call to an allocator object's <code> allocate</code>\n-   member function may not actually call the global operator new. This\n-   situation is also duplicated for calls to the <code>\n-   deallocate</code> member function.\n-   </p>\n-\n-   <p> This can be confusing. \n-   </p>\n-\n-   <p> In particular, this can make debugging memory errors more\n-   difficult, especially when using third party tools like valgrind or\n-   debug versions of <code> new</code>. \n-   </p>\n-\n-   <p> There are various ways to solve this problem. One would be to\n-   use a custom allocator that just called operators <code> new\n-   </code> and <code> delete</code> directly, for every\n-   allocation. (See include/ext/new_allocator.h, for instance.)\n-   However, that option would involve changing source code to use the a\n-   non-default allocator. Another option is to force the default\n-   allocator to remove caching and pools, and to directly allocate\n-   with every call of <code> allocate</code> and directly deallocate\n-   with every call of <code> deallocate</code>, regardless of\n-   efficiency. As it turns out, this last option is available,\n-   although the exact mechanism has evolved with time.\n-   </p>\n-\n-   <p> For GCC releases from 2.95 through the 3.1 series, defining\n-   <code>__USE_MALLOC</code> on the gcc command line would change the\n-   default allocation strategy to instead use <code> malloc</code> and\n-   <code> free</code>. See \n-   <a href=\"../23_containers/howto.html#3\">this note</a> \n-   for details as to why this was something needing improvement.\n-   </p> \n-\n-   <p>Starting with GCC 3.2, and continued in the 3.3 series, to\n-      globally disable memory caching within the library for the\n-      default allocator, merely set GLIBCPP_FORCE_NEW (at this time,\n-      with any value) in the system's environment before running the\n-      program. If your program crashes with GLIBCPP_FORCE_NEW in the\n-      environment, it likely means that you linked against objects\n-      built against the older library.  Code to support this extension\n-      is fully compatible with 3.2 code if GLIBCPP_FORCE_NEW is not in\n-      the environment. \n-   </p>\n-\n-   <p> As it turns out, the 3.4 code base continues to use this\n-   mechanism, only the environment variable has been changed to\n-   GLIBCXX_FORCE_NEW.\n-   </p> \n-\n-<h3 class=\"left\">\n-  <a name=\"ext_allocators\">Other allocators</a>\n-</h3>\n-   <p> Several other allocators are provided as part of this\n-   implementation.  The location of the extension allocators and their\n-   names have changed, but in all cases, functionality is\n-   equivalent. Starting with gcc-3.4, all extension allocators are\n-   standard style. Before this point, SGI style was the norm. Because of\n-   this, the number of template arguments also changed. Here's a simple\n-   chart to track the changes.\n-   </p>\n-\n-<table title=\"extension allocators\" border=\"1\">\n-  <tr>\n-    <th>Allocator (3.4)</th>\n-    <th>Header (3.4)</th>\n-    <th>Allocator (3.[0-3])</th>\n-    <th>Header (3.[0-3])</th>\n-  </tr>\n-  <tr>\n-    <td>__gnu_cxx::new_allocator&lt;T&gt;</td>\n-    <td>&lt;ext/new_allocator.h&gt;</td>\n-    <td>std::__new_alloc</td>\n-    <td>&lt;memory&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>__gnu_cxx::malloc_allocator&lt;T&gt;</td>\n-    <td>&lt;ext/malloc_allocator.h&gt;</td>\n-    <td>std::__malloc_alloc_template&lt;int&gt;</td>\n-    <td>&lt;memory&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>__gnu_cxx::debug_allocator&lt;T&gt;</td>\n-    <td>&lt;ext/debug_allocator.h&gt;</td>\n-    <td>std::debug_alloc&lt;T&gt;</td>\n-    <td>&lt;memory&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>__gnu_cxx::__pool_alloc&lt;T&gt;</td>\n-    <td>&lt;ext/pool_allocator.h&gt;</td>\n-    <td>std::__default_alloc_template&lt;bool,int&gt;</td>\n-    <td>&lt;memory&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>__gnu_cxx::__mt_alloc&lt;T&gt;</td>\n-    <td>&lt;ext/mt_allocator.h&gt;</td>\n-    <td></td>\n-    <td></td>\n-  </tr>\n-  <tr>\n-    <td>__gnu_cxx::bitmap_allocator&lt;T&gt;</td>\n-    <td>&lt;ext/bitmap_allocator.h&gt;</td>\n-    <td></td>\n-    <td></td>\n-  </tr>\n-</table>\n-\n-   <p> Releases after gcc-3.4 have continued to add to the collection\n-   of available allocators. All of these new allocators are\n-   standard-style. The following table includes details, along with\n-   the first released version of GCC that included the extension allocator.\n-   </p>\n-\n-<table title=\"more extension allocators\" border=\"1\">\n-  <tr>\n-    <th>Allocator</th>\n-    <th>Include</th>\n-    <th>Version</th>\n-  </tr>\n-  <tr>\n-    <td>__gnu_cxx::array_allocator&lt;T&gt;</td>\n-    <td>&lt;ext/array_allocator.h&gt;</td>\n-    <td>4.0.0</td>\n-  </tr>\n-  <tr>\n-    <td>__gnu_cxx::throw_allocator&lt;T&gt;</td>\n-    <td>&lt;ext/throw_allocator.h&gt;</td>\n-    <td>4.2.0</td>\n-  </tr>\n-</table>\n-\n-   <p>More details on each of these extension allocators follows. </p>\n-   <ul>\n-     <li><code>new_allocator</code> \n-     <p>Simply wraps <code>::operator new</code>\n-         and <code>::operator delete</code>.\n-     </p>\n-     </li>\n-     <li><code>malloc_allocator</code> \n-     <p>Simply wraps\n-         <code>malloc</code> and <code>free</code>.  There is also a hook\n-         for an out-of-memory handler (for new/delete this is taken care of\n-         elsewhere).  \n-     </p>\n-     </li>\n-     <li><code>array_allocator</code> \n-     <p>Allows allocations of known and fixed sizes using existing\n-         global or external storage allocated via construction of\n-         std::tr1::array objects. By using this allocator, fixed size\n-         containers (including std::string) can be used without\n-         instances calling <code>::operator new</code> and\n-         <code>::operator delete</code>. This capability allows the\n-         use of STL abstractions without runtime complications or\n-         overhead, even in situations such as program startup. For\n-         usage examples, please consult the libstdc++ testsuite.\n-     </p>\n-     </li>\n-     <li><code>debug_allocator</code> \n-     <p> A wrapper around an\n-         arbitrary allocator A.  It passes on slightly increased size\n-         requests to A, and uses the extra memory to store size information.\n-         When a pointer is passed to <code>deallocate()</code>, the stored\n-         size is checked, and assert() is used to guarantee they match. \n-     </p>\n-     </li>\n-      <li><code>throw_allocator</code> \n-     <p> Includes memory tracking and marking abilities as well as hooks for\n-     throwing exceptinos at configurable intervals (including random,\n-     all, none). \n-     </p>\n-     </li>\n-     <li><code>__pool_alloc</code>\n-     <p> A high-performance, single pool allocator.  The reusable\n-      memory is shared among identical instantiations of this type.\n-      It calls through <code>::operator new</code> to obtain new memory\n-      when its lists run out.  If a client container requests a block\n-      larger than a certain threshold size, then the pool is bypassed,\n-      and the allocate/deallocate request is passed to\n-      <code>::operator new</code> directly.  </p>\n-\n-   <p> For versions of <code>__pool_alloc</code> after 3.4.0, there is\n-   only one template parameter, as per the standard.\n-   </p>\n-\n-   <p> Older versions of this class take a boolean template parameter,\n-      called <code>thr</code>, and an integer template parameter,\n-      called <code>inst</code>.\n-   </p>\n-\n-   <p>The <code>inst</code> number is used to track additional memory\n-      pools.  The point of the number is to allow multiple\n-      instantiations of the classes without changing the semantics at\n-      all.  All three of\n-   </p>\n-\n-   <pre>\n-    typedef  __pool_alloc&lt;true,0&gt;    normal;\n-    typedef  __pool_alloc&lt;true,1&gt;    private;\n-    typedef  __pool_alloc&lt;true,42&gt;   also_private;</pre>\n-   <p>behave exactly the same way.  However, the memory pool for each type\n-      (and remember that different instantiations result in different types)\n-      remains separate.\n-   </p>\n-   <p>The library uses <strong>0</strong> in all its instantiations.  If you\n-      wish to keep separate free lists for a particular purpose, use a\n-      different number.\n-   </p>\n-   <p>The <code>thr</code> boolean determines whether the pool should\n-      be manipulated atomically or not.  When thr=true, the allocator\n-      is is threadsafe, while thr=false, and is slightly faster but\n-      unsafe for multiple threads.\n-   </p>\n-\n-   <p>For thread-enabled configurations, the pool is locked with a\n-   single big lock. In some situations, this implementation detail may\n-   result in severe performance degredation.\n-   </p>\n-\n-   <p>(Note that the GCC thread abstraction layer allows us to provide safe\n-      zero-overhead stubs for the threading routines, if threads were\n-      disabled at configuration time.)\n-   </p>\n-\n-     </li>\n-\n-     <li><code>__mt_alloc</code> \n-     <p>A high-performance\n-     fixed-size allocator. It has its own documentation, found <a\n-     href=\"../ext/mt_allocator.html\">here</a>.\n-     </p>\n-     </li>\n-\n-     <li><code>bitmap_allocator</code> \n-     <p>A high-performance allocator that uses a bit-map to keep track\n-     of the used and unused memory locations. It has its own\n-     documentation, found <a\n-     href=\"../ext/ballocator_doc.html\">here</a>.\n-     </p>\n-     </li>\n-   </ul>\n-\n-\n-<h3 class=\"left\">\n-  <a name=\"using_custom_allocators\">Using a specific allocator</a>\n-</h3>\n-   <p>You can specify different memory management schemes on a\n-      per-container basis, by overriding the default\n-      <code>Allocator</code> template parameter.  For example, an easy\n-      (but non-portable) method of specifying that only malloc/free\n-      should be used instead of the default node allocator is:\n-   </p>\n-   <pre>\n-    std::list &lt;int, __gnu_cxx::malloc_allocator&lt;int&gt; &gt;  malloc_list;</pre>\n-      Likewise, a debugging form of whichever allocator is currently in use:\n-      <pre>\n-    std::deque &lt;int, __gnu_cxx::debug_allocator&lt;std::allocator&lt;int&gt; &gt; &gt;  debug_deque;</pre>\n-\n-\n-<h3 class=\"left\">\n-  <a name=\"custom_allocators\">Writing custom allocators</a>\n-</h3>\n-   <p> Writing a portable C++ allocator would dictate that the\n-   interface would look much like the one specified for <code>\n-   std::allocator</code>. Additional member functions, but not\n-   subtractions, would be permissible.\n-   </p>\n-\n-   <p> Probably the best place to start would be to copy one of the\n-   extension allocators already shipped with libstdc++: say, <code>\n-   new_allocator </code>.\n-   </p>\n-\n-\n-<h3 class=\"left\">\n-  <a name=\"biblio\">Bibliography / Further Reading</a>\n-</h3>\n-   <p>\n-   ISO/IEC 14882:1998 Programming languages - C++ [20.4 Memory]\n-   </p>\n-\n-   <p>\n-   Austern, Matt, C/C++ Users Journal.\n-   <a href=\"http://www.cuj.com/documents/s=8000/cujcexp1812austern/\">The Standard Librarian: What Are Allocators Good\n-   For?</a>\n-   </p>\n-\n-   <p>\n-   Berger, Emery, \n-   <a href=\"http://www.cs.umass.edu/~emery/hoard/\"> The Hoard memory allocator </a>\n-   </p>\n-\n-   <p>\n-   Berger, Emery with Ben Zorn &amp; Kathryn McKinley, OOPSLA 2002\n-   <a href=\"http://www.cs.umass.edu/~emery/pubs/berger-oopsla2002.pdf\">Reconsidering Custom Memory Allocation</a>\n-   </p>\n-\n-   <p>\n-   Kreft, Klaus and Angelika Langer, C++ Report, June 1998\n-   <a href=\"http://www.langer.camelot.de/Articles/C++Report/Allocators/Allocators.html\">Allocator Types</a>\n-   </p>\n-\n-   <p>\n-   Stroustrup, Bjarne, 19.4 Allocators, The C++ Programming\n-   Language, Special Edition, Addison Wesley, Inc. 2000\n-   </p>\n-\n-   <p>\n-   Yen, Felix, <a href=\"http://home.earthlink.net/~brimar/yalloc/\">Yalloc: A Recycling C++ Allocator</a>\n-   </p>\n-\n-<hr />\n-<p>Return <a href=\"#top\">to the top of the page</a> or\n-   <a href=\"http://gcc.gnu.org/libstdc++/\">to the libstdc++ homepage</a>.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "fb02aa169fb1192d9e1e2b008f0555295ae59e4e", "filename": "libstdc++-v3/doc/html/20_util/howto.html", "status": "removed", "additions": 0, "deletions": 234, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F20_util%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F20_util%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F20_util%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,234 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 20.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ HOWTO:  Chapter 20: General Utilities</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Prev\" href=\"../19_diagnostics/howto.html\" type=\"text/html\"\n-  title=\"Diagnostics\" />\n-<link rel=\"Next\" href=\"../21_strings/howto.html\" type=\"text/html\"\n-  title=\"Strings\" />\n-<link rel=\"Bookmark\" href=\"allocator.html\" type=\"text/html\"\n-  title=\"Allocators and allocation\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Chapter 20:  General Utilities</a></h1>\n-\n-<p>Chapter 20 deals with utility classes and functions, such as\n-   the oft-debated <code>auto_ptr&lt;&gt;</code>.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h1>Contents</h1>\n-<ul>\n-   <li><a href=\"#1\"><code>auto_ptr</code> is not omnipotent</a></li>\n-   <li><a href=\"#2\"><code>auto_ptr</code> inside container classes</a></li>\n-   <li><a href=\"#3\">Functors</a></li>\n-   <li><a href=\"#4\">Pairs</a></li>\n-   <li><a href=\"#5\">Memory allocators</a></li>\n-</ul>\n-\n-<hr />\n-\n-<!-- ####################################################### -->\n-\n-<h2><a name=\"1\"><code>auto_ptr</code> is not omnipotent</a></h2>\n-   <p>I'm not going to try and explain all of the fun and delicious\n-      things that can happen with misuse of the auto_ptr class template\n-      (called AP here), nor am I going to try and teach you how to use\n-      AP safely in the presence of copying.  The AP class is a really\n-      nifty idea for a smart pointer, but it is one of the dumbest of\n-      all the smart pointers -- and that's fine.\n-   </p>\n-   <p>AP is not meant to be a supersmart solution to all resource\n-      leaks everywhere.  Neither is it meant to be an effective form\n-      of garbage collection (although it can help, a little bit).\n-      And it can <em>not</em> be used for arrays!\n-   </p>\n-   <p>AP <em>is</em> meant to prevent nasty leaks in the presence of\n-      exceptions.  That's <em>all</em>.  This code is AP-friendly:\n-   </p>\n-   <pre>\n-    // not a recommend naming scheme, but good for web-based FAQs\n-    typedef std::auto_ptr&lt;MyClass&gt;  APMC;\n-\n-    extern function_taking_MyClass_pointer (MyClass*);\n-    extern some_throwable_function ();\n-\n-    void func (int data)\n-    {\n-        APMC  ap (new MyClass(data));\n-\n-        some_throwable_function();   // this will throw an exception\n-\n-        function_taking_MyClass_pointer (ap.get());\n-    }\n-   </pre>\n-   <p>When an exception gets thrown, the instance of MyClass that's\n-      been created on the heap will be <code>delete</code>'d as the stack is\n-      unwound past <code>func()</code>.\n-   </p>\n-   <p>Changing that code as follows is <em>not</em> AP-friendly:\n-   </p>\n-   <pre>\n-        APMC  ap (new MyClass[22]);\n-   </pre>\n-   <p>You will get the same problems as you would without the use\n-      of AP:\n-   </p>\n-   <pre>\n-        char*  array = new char[10];       // array new...\n-        ...\n-        delete array;                      // ...but single-object delete\n-   </pre>\n-   <p>AP cannot tell whether the pointer you've passed at creation points\n-      to one or many things.  If it points to many things, you are about\n-      to die.  AP is trivial to write, however, so you could write your\n-      own <code>auto_array_ptr</code> for that situation (in fact, this has\n-      been done many times; check the mailing lists, Usenet, Boost, etc).\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"2\"><code>auto_ptr</code> inside container classes</a></h2>\n-   <p>All of the <a href=\"../23_containers/howto.html\">containers</a>\n-      described in the standard library require their contained types\n-      to have, among other things, a copy constructor like this:\n-   </p>\n-   <pre>\n-    struct My_Type\n-    {\n-        My_Type (My_Type const&amp;);\n-    };\n-   </pre>\n-   <p>Note the const keyword; the object being copied shouldn't change.\n-      The template class <code>auto_ptr</code> (called AP here) does not\n-      meet this requirement.  Creating a new AP by copying an existing\n-      one transfers ownership of the pointed-to object, which means that\n-      the AP being copied must change, which in turn means that the\n-      copy ctors of AP do not take const objects.\n-   </p>\n-   <p>The resulting rule is simple:  <em>Never ever use a container of\n-      auto_ptr objects.</em>  The standard says that &quot;undefined&quot;\n-      behavior is the result, but it is guaranteed to be messy.\n-   </p>\n-   <p>To prevent you from doing this to yourself, the\n-      <a href=\"../19_diagnostics/howto.html#3\">concept checks</a> built\n-      in to this implementation will issue an error if you try to\n-      compile code like this:\n-   </p>\n-   <pre>\n-    #include &lt;vector&gt;\n-    #include &lt;memory&gt;\n-    \n-    void f()\n-    {\n-        std::vector&lt; std::auto_ptr&lt;int&gt; &gt;   vec_ap_int;\n-    }\n-   </pre>\n-   <p>Should you try this with the checks enabled, you will see an error.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"3\">Functors</a></h2>\n-   <p>If you don't know what functors are, you're not alone.  Many people\n-      get slightly the wrong idea.  In the interest of not reinventing\n-      the wheel, we will refer you to the introduction to the functor\n-      concept written by SGI as part of their STL, in\n-      <a href=\"http://www.sgi.com/tech/stl/functors.html\">their\n-      http://www.sgi.com/tech/stl/functors.html</a>.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"4\">Pairs</a></h2>\n-   <p>The <code>pair&lt;T1,T2&gt;</code> is a simple and handy way to\n-      carry around a pair of objects.  One is of type T1, and another of\n-      type T2; they may be the same type, but you don't get anything\n-      extra if they are.  The two members can be accessed directly, as\n-      <code>.first</code> and <code>.second</code>.\n-   </p>\n-   <p>Construction is simple.  The default ctor initializes each member\n-      with its respective default ctor.  The other simple ctor,\n-   </p>\n-   <pre>\n-    pair (const T1&amp; x, const T2&amp; y);\n-   </pre>\n-   <p>does what you think it does, <code>first</code> getting <code>x</code>\n-      and <code>second</code> getting <code>y</code>.\n-   </p>\n-   <p>There is a copy constructor, but it requires that your compiler\n-      handle member function templates:\n-   </p>\n-   <pre>\n-    template &lt;class U, class V&gt; pair (const pair&lt;U,V&gt;&amp; p);\n-   </pre>\n-   <p>The compiler will convert as necessary from U to T1 and from\n-      V to T2 in order to perform the respective initializations.\n-   </p>\n-   <p>The comparison operators are done for you.  Equality\n-      of two <code>pair&lt;T1,T2&gt;</code>s is defined as both <code>first</code>\n-      members comparing equal and both <code>second</code> members comparing\n-      equal; this simply delegates responsibility to the respective\n-      <code>operator==</code> functions (for types like MyClass) or builtin\n-      comparisons (for types like int, char, etc).\n-   </p>\n-   <p><a name=\"pairlt\">\n-      The less-than operator is a bit odd the first time you see it.  It\n-      is defined as evaluating to:\n-      </a>\n-   </p>\n-   <pre>\n-    x.first  &lt;  y.first  ||\n-        ( !(y.first  &lt;  x.first)  &amp;&amp;  x.second  &lt;  y.second )\n-   </pre>\n-   <p>The other operators are not defined using the <code>rel_ops</code>\n-      functions above, but their semantics are the same.\n-   </p>\n-   <p>Finally, there is a template function called <code>make_pair</code>\n-      that takes two references-to-const objects and returns an\n-      instance of a pair instantiated on their respective types:\n-   </p>\n-   <pre>\n-    pair&lt;int,MyClass&gt; p = make_pair(4,myobject);\n-   </pre>\n-\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "6df2e6de635a65f5246cf19cbd24bcb5479d06b5", "filename": "libstdc++-v3/doc/html/20_util/shared_ptr.html", "status": "removed", "additions": 0, "deletions": 419, "changes": 419, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F20_util%2Fshared_ptr.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F20_util%2Fshared_ptr.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F20_util%2Fshared_ptr.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,419 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"Notes on the shared_ptr implementation.\" />\n-   <title>Notes on the shared_ptr implementation.</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Bookmark\" href=\"howto.html\" type=\"text/html\" title=\"General Utilities\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-<h1>\n-Notes on the <code>shared_ptr</code> implementation.\n-</h1>\n-<em>\n-prepared by Jonathan Wakely on November 11, 2007\n-</em>\n-\n-<h2>\n-1. Abstract\n-</h2>\n-<p>\n-The shared_ptr class template stores a pointer, usually obtained via new,\n-and implements shared ownership semantics.\n-</p>\n-\n-<h2>\n-2. What the standard says\n-</h2>\n-\n-<blockquote>\n-20.6.6.2 - Class template shared_ptr [util.smartptr.shared]\n-</blockquote>\n-\n-<p>\n-The standard deliberately doesn't require a reference-counted implementation,\n-allowing other techniques such as a circular-linked-list.\n-</p>\n-\n-<p>\n-At the time of writing the C++0x working paper doesn't mention how threads\n-affect shared_ptr, but it is likely to follow the existing practice set by\n-<code>boost::shared_ptr</code>.  The shared_ptr in libstdc++ is derived\n-from Boost's, so the same rules apply.\n-</p>\n-\n-<h2>\n-3. Problems with shared_ptr: TR1 vs C++0x, thread safety.\n-</h2>\n-\n-<p>\n-The interface of <code>tr1::shared_ptr</code> was extended for C++0x with\n-support for rvalue-references and the other features from N2351. As\n-with other libstdc++ headers shared by TR1 and C++0x, boost_shared_ptr.h\n-uses conditional compilation, based on the macros _GLIBCXX_INCLUDE_AS_CXX0X\n-and _GLIBCXX_INCLUDE_AS_TR1, to enable and disable features.\n-</p>\n-\n-<p>\n-C++0x-only features are: rvalue-ref/move support, allocator support,\n-aliasing constructor, make_shared &amp; allocate_shared. Additionally, the\n-constructors taking auto_ptr parameters are deprecated in C++0x mode.\n-</p>\n-\n-<p>\n-The \n-<a href=\"http://boost.org/libs/smart_ptr/shared_ptr.htm#ThreadSafety\">Thread\n-Safety</a> section of the Boost shared_ptr documentation says \"shared_ptr\n-objects offer the same level of thread safety as built-in types.\"\n-The implementation must ensure that concurrent updates to separate shared_ptr\n-instances are correct even when those instances share a reference count e.g.\n-</p>\n-<pre>\n-shared_ptr&lt;A&gt; a(new A);\n-shared_ptr&lt;A&gt; b(a);\n-\n-// Thread 1     // Thread 2\n-   a.reset();      b.reset();\n-</pre>\n-<p>\n-The dynamically-allocated object must be destroyed by exactly one of the\n-threads. Weak references make things even more interesting.\n-The shared state used to implement shared_ptr must be transparent to the\n-user and invariants must be preserved at all times.\n-The key pieces of shared state are the strong and weak reference counts.\n-Updates to these need to be atomic and visible to all threads to ensure\n-correct cleanup of the managed resource (which is, after all, shared_ptr's\n-job!)\n-On multi-processor systems memory synchronisation may be needed so that\n-reference-count updates and the destruction of the managed resource are\n-race-free.\n-</p>\n-\n-<p>\n-The function <code>_Sp_counted_base::_M_add_ref_lock()</code>, called when\n-obtaining a shared_ptr from a weak_ptr, has to test if the managed\n-resource still exists and either increment the reference count or throw\n-<code>std::bad_weak_ptr</code>.\n-In a multi-threaded program there is a potential race condition if the last\n-reference is dropped (and the managed resource destroyed) between testing\n-the reference count and incrementing it, which could result in a shared_ptr\n-pointing to invalid memory.\n-</p>\n-<p>\n-The Boost shared_ptr (as used in GCC) features a clever lock-free algorithm\n-to avoid the race condition, but this relies on the processor supporting\n-an atomic <em>Compare-And-Swap</em> instruction. For other platforms there\n-are fall-backs using mutex locks.  Boost (as of version 1.35) includes\n-several different implementations and the preprocessor selects one based\n-on the compiler, standard library, platform etc. For the version of\n-shared_ptr in libstdc++ the compiler and library are fixed, which makes\n-things much simpler: we have an atomic CAS or we don't, see Lock Policy\n-below for details.\n-</p>\n-\n-<h2>\n-4. Design and Implementation Details\n-</h2>\n-\n-<p>\n-The shared_ptr code in libstdc++ was kindly donated to GCC by the Boost\n-project and the original authors of the code. The basic design and\n-algorithms are from Boost, the notes below describe details specific to\n-the GCC implementation. Names have been uglified in this implementation,\n-but the design should be recognisable to anyone familiar with the Boost\n-1.32 shared_ptr.\n-</p>\n-\n-<p>\n-The basic design is an abstract base class, <code>_Sp_counted_base</code> that\n-does the reference-counting and calls virtual functions when the count\n-drops to zero.\n-Derived classes override those functions to destroy resources in a context\n-where the correct dynamic type is known. This is an application of the\n-technique known as type erasure.\n-</p>\n-\n-<h3>\n-C++0x and TR1 Implementations\n-</h3>\n-\n-<p>\n-The classes derived from <code>_Sp_counted_base</code> (see Class Hierarchy\n-below) and <code>__shared_count</code> are implemented separately for C++0x\n-and TR1, in <tt>bits/boost_sp_shared_count.h</tt> and\n-<tt>tr1/boost_sp_shared_count.h</tt> respectively.  All other classes\n-including <code>_Sp_counted_base</code> are shared by both implementations.\n-</p>\n-\n-<p>\n-The TR1 implementation is considered relatively stable, so is unlikely to\n-change unless bug fixes require it to.  If the code that is common to both\n-C++0x and TR1 modes needs to diverge further then it might be necessary to \n-duplicate additional classes and only make changes to the C++0x versions.\n-</p>\n-\n-<h3>\n-Lock Policy\n-</h3>\n-\n-<p>\n-Libstdc++ has a single <code>_Sp_counted_base</code> class, which is a\n-template parameterized on the enum <code>__gnu_cxx::_Lock_policy</code>.\n-The entire family of classes is parameterized on the lock policy, right up\n-to <code>__shared_ptr</code>, <code>__weak_ptr</code> and\n-<code>__enable_shared_from_this</code>. The actual\n-<code>std::shared_ptr</code> class inherits from <code>__shared_ptr</code>\n-with the lock policy parameter selected automatically based on the thread\n-model and platform that libstdc++ is configured for, so that the best\n-available template specialization will be used. This design is necessary\n-because it would not be conforming for <code>std::shared_ptr</code> to have\n-an extra template parameter, even if it had a default value.\n-The available policies are:\n-</p>\n-\n-<dl>\n-<dt><code>_S_Atomic</code></dt>\n-<dd>\n-Selected when GCC supports a builtin atomic compare-and-swap\n-operation on the target processor (see\n-<a href=\"http://gcc.gnu.org/onlinedocs/gcc/Atomic-Builtins.html\">Atomic\n-Builtins</a>.)\n-The reference counts are maintained using a lock-free algorithm and GCC's\n-atomic builtins, which provide the required memory synchronisation.\n-</dd>\n-<dt><code>_S_Mutex</code></dt>\n-<dd>\n-The _Sp_counted_base specialization for this policy contains a mutex,\n-which is locked in add_ref_lock(). This policy is used when GCC's atomic\n-builtins aren't available so explicit memory barriers are needed in places.\n-</dd>\n-<dt><code>_S_Single</code></dt>\n-<dd>\n-This policy uses a non-reentrant add_ref_lock() with no locking. It is\n-used when libstdc++ is built without <em>--enable-threads</em>.\n-</dd>\n-</dl>\n-\n-<p>\n-For all three policies, reference count increments and decrements are done\n-via the functions in <tt>&lt;ext/atomicity.h&gt;</tt>, which detect if the\n-program is multi-threaded.\n-If only one thread of execution exists in the program then less expensive\n-non-atomic operations are used.\n-</p>\n-\n-<h3>\n-Class Hierarchy\n-</h3>\n-\n-<p>\n-A <code>shared_ptr&lt;T&gt;</code> contains a pointer of type <code>T*</code>\n-and an object of type <code>__shared_count</code>. The shared_count contains\n-a pointer of type <code>_Sp_counted_base*</code> which points to the object\n-that maintains the reference-counts and destroys the managed resource.\n-</p>\n-\n-<dl>\n-<dt><code>_Sp_counted_base&lt;Lp&gt;</code></dt>\n-<dd>\n-The base of the hierarchy is parameterized on the lock policy alone.\n-_Sp_counted_base doesn't depend on the type of pointer being managed,\n-it only maintains the reference counts and calls virtual functions when\n-the counts drop to zero. The managed object is destroyed when the last\n-strong reference is dropped, but the _Sp_counted_base itself must exist\n-until the last weak reference is dropped.\n-</dd>\n-<dt><code>_Sp_counted_base_impl&lt;Ptr, Deleter, Lp&gt;</code></dt>\n-<dd>\n-Inherits from _Sp_counted_base and stores a pointer of type <code>Ptr</code>\n-and a deleter of type <code>Deleter</code>.  <code>_Sp_deleter</code> is\n-used when the user doesn't supply a custom deleter. Unlike Boost's, this\n-default deleter is not \"checked\" because GCC already issues a warning if\n-<code>delete</code> is used with an incomplete type.\n-This is the only derived type used by <code>tr1::shared_ptr&lt;Ptr&gt;</code>\n-and it is never used by <code>std::shared_ptr</code>, which uses one of\n-the following types, depending on how the shared_ptr is constructed.\n-</dd>\n-<dt><code>_Sp_counted_ptr&lt;Ptr, Lp&gt;</code></dt>\n-<dd>\n-Inherits from _Sp_counted_base and stores a pointer of type <code>Ptr</code>,\n-which is passed to <code>delete</code> when the last reference is dropped.\n-This is the simplest form and is used when there is no custom deleter or\n-allocator.\n-</dd>\n-<dt><code>_Sp_counted_deleter&lt;Ptr, Deleter, Alloc&gt;</code></dt>\n-<dd>\n-Inherits from _Sp_counted_ptr and adds support for custom deleter and\n-allocator. Empty Base Optimization is used for the allocator. This class\n-is used even when the user only provides a custom deleter, in which case\n-<code>std::allocator</code> is used as the allocator.\n-</dd>\n-<dt><code>_Sp_counted_ptr_inplace&lt;Tp, Alloc, Lp&gt;</code></dt>\n-<dd>\n-Used by <code>allocate_shared</code> and <code>make_shared</code>.\n-Contains aligned storage to hold an object of type <code>Tp</code>,\n-which is constructed in-place with placement <code>new</code>.\n-Has a variadic template constructor allowing any number of arguments to\n-be forwarded to <code>Tp</code>'s constructor.\n-Unlike the other _Sp_counted_* classes, this one is parameterized on the\n-type of object, not the type of pointer; this is purely a convenience\n-that simplifies the implementation slightly.\n-</dd>\n-</dl>\n-\n-<h3>\n-Related functions and classes\n-</h3>\n-\n-<dl>\n-<dt><code>dynamic_pointer_cast</code>, <code>static_pointer_cast</code>,\n-<code>const_pointer_cast</code></dt>\n-<dd>\n-As noted in N2351, these functions can be implemented non-intrusively using\n-the alias constructor.  However the aliasing constructor is only available\n-in C++0x mode, so in TR1 mode these casts rely on three non-standard\n-constructors in shared_ptr and __shared_ptr.\n-In C++0x mode these constructors and the related tag types are not needed.\n-</dd>\n-<dt><code>enable_shared_from_this</code></dt>\n-<dd>\n-The clever overload to detect a base class of type\n-<code>enable_shared_from_this</code> comes straight from Boost.\n-There is an extra overload for <code>__enable_shared_from_this</code> to \n-work smoothly with <code>__shared_ptr&lt;Tp, Lp&gt;</code> using any lock\n-policy.\n-</dd>\n-<dt><code>make_shared</code>, <code>allocate_shared</code></dt>\n-<dd>\n-<code>make_shared</code> simply forwards to <code>allocate_shared</code>\n-with <code>std::allocator</code> as the allocator.\n-Although these functions can be implemented non-intrusively using the\n-alias constructor, if they have access to the implementation then it is\n-possible to save storage and reduce the number of heap allocations. The\n-newly constructed object and the _Sp_counted_* can be allocated in a single\n-block and the standard says implementations are \"encouraged, but not required,\"\n-to do so. This implementation provides additional non-standard constructors\n-(selected with the type <code>_Sp_make_shared_tag</code>) which create an\n-object of type <code>_Sp_counted_ptr_inplace</code> to hold the new object.\n-The returned <code>shared_ptr&lt;A&gt;</code> needs to know the address of the\n-new <code>A</code> object embedded in the <code>_Sp_counted_ptr_inplace</code>,\n-but it has no way to access it.\n-This implementation uses a \"covert channel\" to return the address of the\n-embedded object when <code>get_deleter&lt;_Sp_make_shared_tag&gt;()</code>\n-is called.  Users should not try to use this.\n-As well as the extra constructors, this implementation also needs some\n-members of _Sp_counted_deleter to be protected where they could otherwise\n-be private.\n-</dd>\n-</dl>\n-\n-<h2>\n-5. Examples\n-</h2>\n-\n-<p>\n-Examples of use can be found in the testsuite, under\n-<tt>testsuite/tr1/2_general_utilities/shared_ptr</tt>.\n-</p>\n-\n-<h2>\n-6. Unresolved Issues\n-</h2>\n-\n-<p>\n-The resolution to C++ Standard Library issue <a\n-href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#674\">674</a>,\n-\"shared_ptr interface changes for consistency with N1856\" will need to be\n-implemented after it is accepted into the working paper. Issue <a \n-href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#743\">743</a>\n-might also require changes.\n-</p>\n-\n-<p>\n-The _S_single policy uses atomics when used in MT code, because it uses\n-the same dispatcher functions that check __gthread_active_p(). This could be\n-addressed by providing template specialisations for some members of\n-_Sp_counted_base&lt;_S_single&gt;.\n-</p>\n-\n-<p>\n-Unlike Boost, this implementation does not use separate classes for the\n-pointer+deleter and pointer+deleter+allocator cases in C++0x mode, combining\n-both into _Sp_counted_deleter and using std::allocator when the user doesn't\n-specify an allocator.\n-If it was found to be beneficial an additional class could easily be added.\n-With the current implementation, the _Sp_counted_deleter and __shared_count\n-constructors taking a custom deleter but no allocator are technically\n-redundant and could be removed, changing callers to always specify an\n-allocator. If a separate pointer+deleter class was added the __shared_count\n-constructor would be needed, so it has been kept for now.\n-</p>\n-\n-<p>\n-The hack used to get the address of the managed object from\n-_Sp_counted_ptr_inplace::_M_get_deleter() is accessible to users. This\n-could be prevented if get_deleter&lt;_Sp_make_shared_tag&gt;() always\n-returned NULL, since the hack only needs to work at a lower level, not\n-in the public API. This wouldn't be difficult, but hasn't been done since\n-there is no danger of accidental misuse: users already know they are\n-relying on unsupported features if they refer to implementation details\n-such as _Sp_make_shared_tag.\n-</p>\n-\n-<p>\n-tr1::_Sp_deleter could be a private member of tr1::__shared_count but it\n-would alter the ABI.\n-</p>\n-\n-<p>\n-Exposing the alias constructor in TR1 mode could simplify the *_pointer_cast\n-functions.\n-Constructor could be private in TR1 mode, with the cast functions as friends.\n-</p>\n-\n-<h2>\n-7. Acknowledgments\n-</h2>\n-<p>\n-The original authors of the Boost shared_ptr, which is really nice code\n-to work with, Peter Dimov in particular for his help and invaluable advice\n-on thread safety.\n-Phillip Jordan and Paolo Carlini for the lock policy implementation.\n-</p>\n-\n-\n-<h2>\n-8. Bibliography / Referenced Documents\n-</h2>\n-\n-<p>\n-N2351 Improving shared_ptr for C++0x, Revision 2\n-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2351.htm\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2351.htm</a>\n-</p>\n-\n-<p>\n-N2456 C++ Standard Library Active Issues List (Revision R52)\n-<a href=\"http://open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2456.html\">http://open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2456.html</a></p>\n-<p>\n-N2461 Working Draft, Standard for Programming Language C++\n-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2461.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2461.pdf</a>\n-</p>\n-\n-<p>\n-Boost C++ Libraries documentation - shared_ptr class template\n-<a href=\"http://boost.org/libs/smart_ptr/shared_ptr.htm\">http://boost.org/libs/smart_ptr/shared_ptr.htm</a>\n-</p>\n-\n-</body>\n-</html>\n-"}, {"sha": "9326604855e2626ce1aeb8fedfdc2b845c0e2a85", "filename": "libstdc++-v3/doc/html/21_strings/gotw29a.txt", "status": "removed", "additions": 0, "deletions": 159, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fgotw29a.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fgotw29a.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fgotw29a.txt?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,159 +0,0 @@\n-From: herbs@cntc.com (Herb Sutter)\n-Subject: Guru of the Week #29: Solution\n-Date: 22 Jan 1998 00:00:00 GMT\n-Message-ID: <6a8q26$9qa@netlab.cs.rpi.edu>\n-Newsgroups: comp.lang.c++.moderated\n-\n-\n- .--------------------------------------------------------------------.\n- |  Guru of the Week problems and solutions are posted regularly on   |\n- |   news:comp.lang.c++.moderated. For past problems and solutions    |\n- |            see the GotW archive at http://www.cntc.com.            |\n- | Is there a topic you'd like to see covered? mailto:herbs@cntc.com  |\n- `--------------------------------------------------------------------'\n-_______________________________________________________\n-\n-GotW #29:   Strings\n-\n-Difficulty: 7 / 10\n-_______________________________________________________\n-\n-\n->Write a ci_string class which is identical to the\n->standard 'string' class, but is case-insensitive in the\n->same way as the C function stricmp():\n-\n-The \"how can I make a case-insensitive string?\"\n-question is so common that it probably deserves its own\n-FAQ -- hence this issue of GotW.\n-\n-Note 1:  The stricmp() case-insensitive string\n-comparison function is not part of the C standard, but\n-it is a common extension on many C compilers.\n-\n-Note 2:  What \"case insensitive\" actually means depends\n-entirely on your application and language.  For\n-example, many languages do not have \"cases\" at all, and\n-for languages that do you have to decide whether you\n-want accented characters to compare equal to unaccented\n-characters, and so on.  This GotW provides guidance on\n-how to implement case-insensitivity for standard\n-strings in whatever sense applies to your particular\n-situation.\n-\n-\n-Here's what we want to achieve:\n-\n->    ci_string s( \"AbCdE\" );\n->\n->    // case insensitive\n->    assert( s == \"abcde\" );\n->    assert( s == \"ABCDE\" );\n->\n->    // still case-preserving, of course\n->    assert( strcmp( s.c_str(), \"AbCdE\" ) == 0 );\n->    assert( strcmp( s.c_str(), \"abcde\" ) != 0 );\n-\n-The key here is to understand what a \"string\" actually\n-is in standard C++.  If you look in your trusty string\n-header, you'll see something like this:\n-\n-  typedef basic_string<char> string;\n-\n-So string isn't really a class... it's a typedef of a\n-template.  In turn, the basic_string<> template is\n-declared as follows, in all its glory:\n-\n-  template<class charT,\n-           class traits = char_traits<charT>,\n-           class Allocator = allocator<charT> >\n-      class basic_string;\n-\n-So \"string\" really means \"basic_string<char,\n-char_traits<char>, allocator<char> >\".  We don't need\n-to worry about the allocator part, but the key here is\n-the char_traits part because char_traits defines how\n-characters interact and compare(!).\n-\n-basic_string supplies useful comparison functions that\n-let you compare whether a string is equal to another,\n-less than another, and so on.  These string comparisons\n-functions are built on top of character comparison\n-functions supplied in the char_traits template.  In\n-particular, the char_traits template supplies character\n-comparison functions named eq(), ne(), and lt() for\n-equality, inequality, and less-than comparisons, and\n-compare() and find() functions to compare and search\n-sequences of characters.\n-\n-If we want these to behave differently, all we have to\n-do is provide a different char_traits template!  Here's\n-the easiest way:\n-\n-  struct ci_char_traits : public char_traits<char>\n-                // just inherit all the other functions\n-                //  that we don't need to override\n-  {\n-    static bool eq( char c1, char c2 ) {\n-      return tolower(c1) == tolower(c2);\n-    }\n-\n-    static bool ne( char c1, char c2 ) {\n-      return tolower(c1) != tolower(c2);\n-    }\n-\n-    static bool lt( char c1, char c2 ) {\n-      return tolower(c1) < tolower(c2);\n-    }\n-\n-    static int compare( const char* s1,\n-                        const char* s2,\n-                        size_t n ) {\n-      return strnicmp( s1, s2, n );\n-             // if available on your compiler,\n-             //  otherwise you can roll your own\n-    }\n-\n-    static const char*\n-    find( const char* s, int n, char a ) {\n-      while( n-- > 0 && tolower(*s) != tolower(a) ) {\n-          ++s;\n-      }\n-      return n >= 0 ? s : 0;\n-    }\n-  };\n-\n-[N.B. A bug in the original code has been fixed for the\n-GCC documentation, the corrected code was taken from\n-Herb Sutter's book, Exceptional C++]\n-\n-And finally, the key that brings it all together:\n-\n-  typedef basic_string<char, ci_char_traits> ci_string;\n-\n-All we've done is created a typedef named \"ci_string\"\n-which operates exactly like the standard \"string\",\n-except that it uses ci_char_traits instead of\n-char_traits<char> to get its character comparison\n-rules.  Since we've handily made the ci_char_traits\n-rules case-insensitive, we've made ci_string itself\n-case-insensitive without any further surgery -- that\n-is, we have a case-insensitive string without having\n-touched basic_string at all!\n-\n-This GotW should give you a flavour for how the\n-basic_string template works and how flexible it is in\n-practice.  If you want different comparisons than the\n-ones stricmp() and tolower() give you, just replace the\n-five functions shown above with your own code that\n-performs character comparisons the way that's\n-appropriate in your particular application.\n-\n-\n-\n-Exercise for the reader:\n-\n-Is it safe to inherit ci_char_traits from\n-char_traits<char> this way?  Why or why not?\n-\n-"}, {"sha": "bdc868a02dc4e5d39d99c284c38ee59da045d969", "filename": "libstdc++-v3/doc/html/21_strings/howto.html", "status": "removed", "additions": 0, "deletions": 472, "changes": 472, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,472 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 21.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ HOWTO:  Chapter 21: Strings</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Prev\" href=\"../20_util/howto.html\" type=\"text/html\"\n-  title=\"General Utilities\" />\n-<link rel=\"Next\" href=\"../22_locale/howto.html\" type=\"text/html\"\n-  title=\"Localization\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Chapter 21:  Strings</a></h1>\n-\n-<p>Chapter 21 deals with the C++ strings library (a welcome relief).\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h1>Contents</h1>\n-<ul>\n-   <li><a href=\"#1\">MFC's CString</a></li>\n-   <li><a href=\"#2\">A case-insensitive string class</a></li>\n-   <li><a href=\"#3\">Breaking a C++ string into tokens</a></li>\n-   <li><a href=\"#4\">Simple transformations</a></li>\n-   <li><a href=\"#5\">Making strings of arbitrary character types</a></li>\n-   <li><a href=\"#6\">Shrink-to-fit strings</a></li>\n-</ul>\n-\n-<hr />\n-\n-<!-- ####################################################### -->\n-\n-<h2><a name=\"1\">MFC's CString</a></h2>\n-   <p>A common lament seen in various newsgroups deals with the Standard\n-      string class as opposed to the Microsoft Foundation Class called\n-      CString.  Often programmers realize that a standard portable\n-      answer is better than a proprietary nonportable one, but in porting\n-      their application from a Win32 platform, they discover that they\n-      are relying on special functions offered by the CString class.\n-   </p>\n-   <p>Things are not as bad as they seem.  In\n-      <a href=\"http://gcc.gnu.org/ml/gcc/1999-04n/msg00236.html\">this\n-      message</a>, Joe Buck points out a few very important things:\n-   </p>\n-      <ul>\n-         <li>The Standard <code>string</code> supports all the operations\n-             that CString does, with three exceptions.\n-         </li>\n-         <li>Two of those exceptions (whitespace trimming and case \n-             conversion) are trivial to implement.  In fact, we do so\n-             on this page.\n-         </li>\n-         <li>The third is <code>CString::Format</code>, which allows formatting\n-             in the style of <code>sprintf</code>.  This deserves some mention:\n-         </li>\n-      </ul>\n-   <p><a name=\"1.1internal\"> <!-- Coming from Chapter 27 -->\n-      The old libg++ library had a function called form(), which did much\n-      the same thing.  But for a Standard solution, you should use the\n-      stringstream classes.  These are the bridge between the iostream\n-      hierarchy and the string class, and they operate with regular\n-      streams seamlessly because they inherit from the iostream\n-      hierarchy.  An quick example:\n-      </a>\n-   </p>\n-   <pre>\n-   #include &lt;iostream&gt;\n-   #include &lt;string&gt;\n-   #include &lt;sstream&gt;\n-\n-   string f (string&amp; incoming)     // incoming is \"foo  N\"\n-   {\n-       istringstream   incoming_stream(incoming);\n-       string          the_word;\n-       int             the_number;\n-\n-       incoming_stream &gt;&gt; the_word        // extract \"foo\"\n-                       &gt;&gt; the_number;     // extract N\n-\n-       ostringstream   output_stream;\n-       output_stream &lt;&lt; \"The word was \" &lt;&lt; the_word\n-                     &lt;&lt; \" and 3*N was \" &lt;&lt; (3*the_number);\n-\n-       return output_stream.str();\n-   } </pre>\n-   <p>A serious problem with CString is a design bug in its memory\n-      allocation.  Specifically, quoting from that same message:\n-   </p>\n-   <pre>\n-   CString suffers from a common programming error that results in\n-   poor performance.  Consider the following code:\n-   \n-   CString n_copies_of (const CString&amp; foo, unsigned n)\n-   {\n-           CString tmp;\n-           for (unsigned i = 0; i &lt; n; i++)\n-                   tmp += foo;\n-           return tmp;\n-   }\n-   \n-   This function is O(n^2), not O(n).  The reason is that each +=\n-   causes a reallocation and copy of the existing string.  Microsoft\n-   applications are full of this kind of thing (quadratic performance\n-   on tasks that can be done in linear time) -- on the other hand,\n-   we should be thankful, as it's created such a big market for high-end\n-   ix86 hardware. :-)\n-   \n-   If you replace CString with string in the above function, the\n-   performance is O(n).\n-   </pre>\n-   <p>Joe Buck also pointed out some other things to keep in mind when\n-      comparing CString and the Standard string class:\n-   </p>\n-      <ul>\n-         <li>CString permits access to its internal representation; coders\n-             who exploited that may have problems moving to <code>string</code>.\n-         </li>\n-         <li>Microsoft ships the source to CString (in the files\n-             MFC\\SRC\\Str{core,ex}.cpp), so you could fix the allocation\n-             bug and rebuild your MFC libraries.\n-             <em><strong>Note:</strong> It looks like the CString shipped\n-             with VC++6.0 has fixed this, although it may in fact have been\n-             one of the VC++ SPs that did it.</em>\n-         </li>\n-         <li><code>string</code> operations like this have O(n) complexity\n-             <em>if the implementors do it correctly</em>.  The libstdc++\n-             implementors did it correctly.  Other vendors might not.\n-         </li>\n-         <li>While parts of the SGI STL are used in libstdc++, their\n-             string class is not.  The SGI <code>string</code> is essentially\n-             <code>vector&lt;char&gt;</code> and does not do any reference\n-             counting like libstdc++'s does.  (It is O(n), though.)\n-             So if you're thinking about SGI's string or rope classes,\n-             you're now looking at four possibilities:  CString, the\n-             libstdc++ string, the SGI string, and the SGI rope, and this\n-             is all before any allocator or traits customizations!  (More\n-             choices than you can shake a stick at -- want fries with that?)\n-         </li>\n-      </ul>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"2\">A case-insensitive string class</a></h2>\n-   <p>The well-known-and-if-it-isn't-well-known-it-ought-to-be\n-      <a href=\"http://www.gotw.ca/gotw/\">Guru of the Week</a>\n-      discussions held on Usenet covered this topic in January of 1998.\n-      Briefly, the challenge was, &quot;write a 'ci_string' class which\n-      is identical to the standard 'string' class, but is\n-      case-insensitive in the same way as the (common but nonstandard)\n-      C function stricmp():&quot;\n-   </p>\n-   <pre>\n-   ci_string s( \"AbCdE\" );\n-\n-   // case insensitive\n-   assert( s == \"abcde\" );\n-   assert( s == \"ABCDE\" );\n-\n-   // still case-preserving, of course\n-   assert( strcmp( s.c_str(), \"AbCdE\" ) == 0 );\n-   assert( strcmp( s.c_str(), \"abcde\" ) != 0 ); </pre>\n-\n-   <p>The solution is surprisingly easy.  The <a href=\"gotw29a.txt\">original\n-      answer</a> was posted on Usenet, and a revised version appears in\n-      Herb Sutter's book <em>Exceptional C++</em> and on his website as\n-      <a href=\"http://www.gotw.ca/gotw/029.htm\">GotW 29</a>.\n-   </p>\n-   <p>See?  Told you it was easy!</p>\n-   <p><strong>Added June 2000:</strong> The May 2000 issue of <u>C++ Report</u>\n-      contains a fascinating <a href=\"http://lafstern.org/matt/col2_new.pdf\">\n-      article</a> by Matt Austern (yes, <em>the</em> Matt Austern)\n-      on why case-insensitive comparisons are not as easy as they seem,\n-      and why creating a class is the <em>wrong</em> way to go about it in\n-      production code.  (The GotW answer mentions one of the principle\n-      difficulties; his article mentions more.)\n-   </p>\n-   <p>Basically, this is &quot;easy&quot; only if you ignore some things,\n-      things which may be too important to your program to ignore.  (I chose\n-      to ignore them when originally writing this entry, and am surprised\n-      that nobody ever called me on it...)  The GotW question and answer\n-      remain useful instructional tools, however.\n-   </p>\n-   <p><strong>Added September 2000:</strong>  James Kanze provided a link to a\n-      <a href=\"http://www.unicode.org/unicode/reports/tr21/\">Unicode\n-      Technical Report discussing case handling</a>, which provides some\n-      very good information.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"3\">Breaking a C++ string into tokens</a></h2>\n-   <p>The Standard C (and C++) function <code>strtok()</code> leaves a lot to\n-      be desired in terms of user-friendliness.  It's unintuitive, it\n-      destroys the character string on which it operates, and it requires\n-      you to handle all the memory problems.  But it does let the client\n-      code decide what to use to break the string into pieces; it allows\n-      you to choose the &quot;whitespace,&quot; so to speak.\n-   </p>\n-   <p>A C++ implementation lets us keep the good things and fix those\n-      annoyances.  The implementation here is more intuitive (you only\n-      call it once, not in a loop with varying argument), it does not\n-      affect the original string at all, and all the memory allocation\n-      is handled for you.\n-   </p>\n-   <p>It's called stringtok, and it's a template function.  It's given\n-      <a href=\"stringtok_h.txt\">in this file</a> in a less-portable form than\n-      it could be, to keep this example simple (for example, see the\n-      comments on what kind of string it will accept).  The author uses\n-      a more general (but less readable) form of it for parsing command\n-      strings and the like.  If you compiled and ran this code using it:\n-   </p>\n-   <pre>\n-   std::list&lt;string&gt;  ls;\n-   stringtok (ls, \" this  \\t is\\t\\n  a test  \");\n-   for (std::list&lt;string&gt;const_iterator i = ls.begin();\n-        i != ls.end(); ++i)\n-   {\n-       std::cerr &lt;&lt; ':' &lt;&lt; (*i) &lt;&lt; \":\\n\";\n-   } </pre>\n-   <p>You would see this as output:\n-   </p>\n-   <pre>\n-   :this:\n-   :is:\n-   :a:\n-   :test: </pre>\n-   <p>with all the whitespace removed.  The original <code>s</code> is still\n-      available for use, <code>ls</code> will clean up after itself, and\n-      <code>ls.size()</code> will return how many tokens there were.\n-   </p>\n-   <p>As always, there is a price paid here, in that stringtok is not\n-      as fast as strtok.  The other benefits usually outweigh that, however.\n-      <a href=\"stringtok_std_h.txt\">Another version of stringtok is given\n-      here</a>, suggested by Chris King and tweaked by Petr Prikryl,\n-      and this one uses the\n-      transformation functions mentioned below.  If you are comfortable\n-      with reading the new function names, this version is recommended\n-      as an example.\n-   </p>\n-   <p><strong>Added February 2001:</strong>  Mark Wilden pointed out that the\n-      standard <code>std::getline()</code> function can be used with standard\n-      <a href=\"../27_io/howto.html\">istringstreams</a> to perform\n-      tokenizing as well.  Build an istringstream from the input text,\n-      and then use std::getline with varying delimiters (the three-argument\n-      signature) to extract tokens into a string.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"4\">Simple transformations</a></h2>\n-   <p>Here are Standard, simple, and portable ways to perform common\n-      transformations on a <code>string</code> instance, such as &quot;convert\n-      to all upper case.&quot;  The word transformations is especially\n-      apt, because the standard template function\n-      <code>transform&lt;&gt;</code> is used.\n-   </p>\n-   <p>This code will go through some iterations (no pun).  Here's the\n-      simplistic version usually seen on Usenet:\n-   </p>\n-   <pre>\n-   #include &lt;string&gt;\n-   #include &lt;algorithm&gt;\n-   #include &lt;cctype&gt;      // old &lt;ctype.h&gt;\n-\n-   struct ToLower\n-   {\n-     char operator() (char c) const  { return std::tolower(c); }\n-   };\n-\n-   struct ToUpper\n-   {\n-     char operator() (char c) const  { return std::toupper(c); }\n-   };\n-\n-   int main()\n-   {\n-     std::string  s (\"Some Kind Of Initial Input Goes Here\");\n-\n-     // Change everything into upper case\n-     std::transform (s.begin(), s.end(), s.begin(), ToUpper());\n-\n-     // Change everything into lower case\n-     std::transform (s.begin(), s.end(), s.begin(), ToLower());\n-\n-     // Change everything back into upper case, but store the\n-     // result in a different string\n-     std::string  capital_s;\n-     capital_s.resize(s.size());\n-     std::transform (s.begin(), s.end(), capital_s.begin(), ToUpper());\n-   } </pre>\n-   <p><span class=\"larger\"><strong>Note</strong></span> that these calls all\n-      involve the global C locale through the use of the C functions\n-      <code>toupper/tolower</code>.  This is absolutely guaranteed to work --\n-      but <em>only</em> if the string contains <em>only</em> characters\n-      from the basic source character set, and there are <em>only</em>\n-      96 of those.  Which means that not even all English text can be\n-      represented (certain British spellings, proper names, and so forth).\n-      So, if all your input forevermore consists of only those 96\n-      characters (hahahahahaha), then you're done.\n-   </p>\n-   <p><span class=\"larger\"><strong>Note</strong></span> that the\n-      <code>ToUpper</code> and <code>ToLower</code> function objects\n-      are needed because <code>toupper</code> and <code>tolower</code>\n-      are overloaded names (declared in <code>&lt;cctype&gt;</code> and\n-      <code>&lt;locale&gt;</code>) so the template-arguments for\n-      <code>transform&lt;&gt;</code> cannot be deduced, as explained in\n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-11/msg00180.html\">this\n-      message</a>.  <!-- section 14.8.2.4 clause 16 in ISO 14882:1998\n-      if you're into that sort of thing -->\n-      At minimum, you can write short wrappers like\n-   </p>\n-   <pre>\n-   char toLower (char c)\n-   {\n-      return std::tolower(c);\n-   } </pre>\n-   <p>The correct method is to use a facet for a particular locale\n-      and call its conversion functions.  These are discussed more in\n-      Chapter 22; the specific part is\n-      <a href=\"../22_locale/howto.html#7\">Correct Transformations</a>,\n-      which shows the final version of this code.  (Thanks to James Kanze\n-      for assistance and suggestions on all of this.)\n-   </p>\n-   <p>Another common operation is trimming off excess whitespace.  Much\n-      like transformations, this task is trivial with the use of string's\n-      <code>find</code> family.  These examples are broken into multiple\n-      statements for readability:\n-   </p>\n-   <pre>\n-   std::string  str (\" \\t blah blah blah    \\n \");\n-\n-   // trim leading whitespace\n-   string::size_type  notwhite = str.find_first_not_of(\" \\t\\n\");\n-   str.erase(0,notwhite);\n-\n-   // trim trailing whitespace\n-   notwhite = str.find_last_not_of(\" \\t\\n\"); \n-   str.erase(notwhite+1); </pre>\n-   <p>Obviously, the calls to <code>find</code> could be inserted directly\n-      into the calls to <code>erase</code>, in case your compiler does not\n-      optimize named temporaries out of existence.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"5\">Making strings of arbitrary character types</a></h2>\n-   <p>The <code>std::basic_string</code> is tantalizingly general, in that\n-      it is parameterized on the type of the characters which it holds.\n-      In theory, you could whip up a Unicode character class and instantiate\n-      <code>std::basic_string&lt;my_unicode_char&gt;</code>, or assuming\n-      that integers are wider than characters on your platform, maybe just\n-      declare variables of type <code>std::basic_string&lt;int&gt;</code>.\n-   </p>\n-   <p>That's the theory.  Remember however that basic_string has additional\n-      type parameters, which take default arguments based on the character\n-      type (called <code>CharT</code> here):\n-   </p>\n-   <pre>\n-      template &lt;typename CharT,\n-                typename Traits = char_traits&lt;CharT&gt;,\n-                typename Alloc = allocator&lt;CharT&gt; &gt;\n-      class basic_string { .... };</pre>\n-   <p>Now, <code>allocator&lt;CharT&gt;</code> will probably Do The Right\n-      Thing by default, unless you need to implement your own allocator\n-      for your characters.\n-   </p>\n-   <p>But <code>char_traits</code> takes more work.  The char_traits\n-      template is <em>declared</em> but not <em>defined</em>.\n-      That means there is only\n-   </p>\n-   <pre>\n-      template &lt;typename CharT&gt;\n-        struct char_traits\n-        {\n-            static void foo (type1 x, type2 y);\n-            ...\n-        };</pre>\n-   <p>and functions such as char_traits&lt;CharT&gt;::foo() are not\n-      actually defined anywhere for the general case.  The C++ standard\n-      permits this, because writing such a definition to fit all possible\n-      CharT's cannot be done.\n-   </p>\n-   <p>The C++ standard also requires that char_traits be specialized for\n-      instantiations of <code>char</code> and <code>wchar_t</code>, and it\n-      is these template specializations that permit entities like\n-      <code>basic_string&lt;char,char_traits&lt;char&gt;&gt;</code> to work.\n-   </p>\n-   <p>If you want to use character types other than char and wchar_t,\n-      such as <code>unsigned char</code> and <code>int</code>, you will\n-      need suitable specializations for them.  For a time, in earlier\n-      versions of GCC, there was a mostly-correct implementation that\n-      let programmers be lazy but it broke under many situations, so it\n-      was removed.  GCC 3.4 introduced a new implementation that mostly\n-      works and can be specialized even for <code>int</code> and other\n-      built-in types.\n-   </p>\n-   <p>If you want to use your own special character class, then you have\n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00163.html\">a lot\n-      of work to do</a>, especially if you with to use i18n features\n-      (facets require traits information but don't have a traits argument).\n-   </p>\n-   <p>Another example of how to specialize char_traits was given <a\n-      href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00260.html\">on the\n-      mailing list</a> and at a later date was put into the file <code>\n-      include/ext/pod_char_traits.h</code>.  We agree\n-      that the way it's used with basic_string (scroll down to main())\n-      doesn't look nice, but that's because <a\n-      href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00236.html\">the\n-      nice-looking first attempt</a> turned out to <a\n-      href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00242.html\">not\n-      be conforming C++</a>, due to the rule that CharT must be a POD.\n-      (See how tricky this is?)\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"6\">Shrink-to-fit strings</a></h2>\n-   <!-- referenced by faq/index.html#5_9, update link if numbering changes -->\n-   <p>From GCC 3.4 calling <code>s.reserve(res)</code> on a\n-      <code>string s</code> with <code>res &lt; s.capacity()</code> will\n-      reduce the string's capacity to <code>std::max(s.size(), res)</code>.\n-   </p>\n-   <p>This behaviour is suggested, but not required by the standard. Prior\n-      to GCC 3.4 the following alternative can be used instead\n-   </p>\n-   <pre>\n-      std::string(str.data(), str.size()).swap(str);\n-   </pre>\n-   <p>This is similar to the idiom for reducing a <code>vector</code>'s\n-      memory usage (see <a href='../faq/index.html#5_9'>FAQ 5.9</a>) but\n-      the regular copy constructor cannot be used because libstdc++'s\n-      <code>string</code> is Copy-On-Write.\n-   </p>\n-      \n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "81d87a6efaf758a8ebe2ec9ff0d7e4b0a6d960f2", "filename": "libstdc++-v3/doc/html/21_strings/stringtok_h.txt", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fstringtok_h.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fstringtok_h.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fstringtok_h.txt?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,102 +0,0 @@\n-/*\n- * stringtok.h -- Breaks a string into tokens.  This is an example for lib3.\n- *\n- * Template function looks like this:\n- *\n- *    template <typename Container>\n- *    void stringtok (Container &l,\n- *                    string const &s,\n- *                    char const * const ws = \" \\t\\n\");\n- *\n- * A nondestructive version of strtok() that handles its own memory and can\n- * be broken up by any character(s).  Does all the work at once rather than\n- * in an invocation loop like strtok() requires.\n- *\n- * Container is any type that supports push_back(a_string), although using\n- * list<string> and deque<string> are indicated due to their O(1) push_back.\n- * (I prefer deque<> because op[]/at() is available as well.)  The first\n- * parameter references an existing Container.\n- *\n- * s is the string to be tokenized.  From the parameter declaration, it can\n- * be seen that s is not affected.  Since references-to-const may refer to\n- * temporaries, you could use stringtok(some_container, readline(\"\")) when\n- * using the GNU readline library.\n- *\n- * The final parameter is an array of characters that serve as whitespace.\n- * Whitespace characters default to one or more of tab, space, and newline,\n- * in any combination.\n- *\n- * 'l' need not be empty on entry.  On return, 'l' will have the token\n- * strings appended.\n- *\n- *\n- * [Example:\n- *       list<string>       ls;\n- *       stringtok (ls, \" this  \\t is\\t\\n  a test  \");\n- *       for (list<string>::const_iterator i = ls.begin();\n- *            i != ls.end(); ++i)\n- *       {\n- *            cerr << ':' << (*i) << \":\\n\";\n- *       }\n- *\n- *  would print\n- *       :this:\n- *       :is:\n- *       :a:\n- *       :test:\n- * -end example]\n- *\n- * pedwards@jaj.com  May 1999\n-*/\n-\n-\n-#include <string>\n-#include <cstring>    // for strchr\n-\n-\n-/*****************************************************************\n- * This is the only part of the implementation that I don't like.\n- * It can probably be improved upon by the reader...\n-*/\n-namespace {\n-    inline bool\n-    isws (char c, char const * const wstr)\n-    {\n-        return (strchr(wstr,c) != NULL);\n-    }\n-}\n-\n-\n-/*****************************************************************\n- * Simplistic and quite Standard, but a bit slow.  This should be\n- * templatized on basic_string instead, or on a more generic StringT\n- * that just happens to support ::size_type, .substr(), and so on.\n- * I had hoped that \"whitespace\" would be a trait, but it isn't, so\n- * the user must supply it.  Enh, this lets them break up strings on\n- * different things easier than traits would anyhow.\n-*/\n-template <typename Container>\n-void\n-stringtok (Container &l, string const &s, char const * const ws = \" \\t\\n\")\n-{\n-    const string::size_type  S = s.size();\n-          string::size_type  i = 0;\n-\n-    while (i < S) {\n-        // eat leading whitespace\n-        while ((i < S) && (isws(s[i],ws)))  ++i;\n-        if (i == S)  return;  // nothing left but WS\n-\n-        // find end of word\n-        string::size_type  j = i+1;\n-        while ((j < S) && (!isws(s[j],ws)))  ++j;\n-\n-        // add word\n-        l.push_back(s.substr(i,j-i));\n-\n-        // set up for next loop\n-        i = j+1;\n-    }\n-}\n-\n-"}, {"sha": "2f3d7e073684aef9fc676fb7eedd165253d43826", "filename": "libstdc++-v3/doc/html/21_strings/stringtok_std_h.txt", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fstringtok_std_h.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fstringtok_std_h.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F21_strings%2Fstringtok_std_h.txt?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,39 +0,0 @@\n-/*\n- * Same as stringtok_h.txt, but doesn't (visiably) use C functions.\n-*/\n-\n-#include <string>\n-\n-// The std:: prefix is not used here, for readability, and a line like\n-// \"using namespace std;\" is dangerous to have in a header file.\n-\n-template <typename Container>\n-void\n-stringtok (Container &container, string const &in,\n-           const char * const delimiters = \" \\t\\n\")\n-{\n-    const string::size_type len = in.length();\n-          string::size_type i = 0;\n-\n-    while ( i < len )\n-    {\n-        // eat leading whitespace\n-        i = in.find_first_not_of (delimiters, i);\n-        if (i == string::npos)\n-            return;   // nothing left but white space\n-\n-        // find the end of the token\n-        string::size_type j = in.find_first_of (delimiters, i);\n-\n-        // push token\n-        if (j == string::npos) {\n-            container.push_back (in.substr(i));\n-            return;\n-        } else\n-            container.push_back (in.substr(i, j-i));\n-\n-        // set up for next loop\n-        i = j + 1;\n-    }\n-}\n-"}, {"sha": "c760c098b5cc84173e28b1c4aa920b78d76f51ef", "filename": "libstdc++-v3/doc/html/22_locale/codecvt.html", "status": "removed", "additions": 0, "deletions": 595, "changes": 595, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fcodecvt.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fcodecvt.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fcodecvt.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,595 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"bkoz@redhat.com (Benjamin Kosnik)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"Notes on the codecvt implementation.\" />\n-   <title>Notes on the codecvt implementation.</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Bookmark\" href=\"howto.html\" type=\"text/html\" title=\"Localization\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-  <h1>\n-  Notes on the codecvt implementation.\n-  </h1>\n-<p>\n-<em>\n-prepared by Benjamin Kosnik (bkoz@redhat.com) on August 28, 2000\n-</em>\n-</p>\n-\n-<h2>\n-1. Abstract\n-</h2>\n-<p>\n-The standard class codecvt attempts to address conversions between\n-different character encoding schemes. In particular, the standard\n-attempts to detail conversions between the implementation-defined wide\n-characters (hereafter referred to as wchar_t) and the standard type\n-char that is so beloved in classic &quot;C&quot; (which can now be referred to\n-as narrow characters.)  This document attempts to describe how the GNU\n-libstdc++ implementation deals with the conversion between wide and\n-narrow characters, and also presents a framework for dealing with the\n-huge number of other encodings that iconv can convert, including\n-Unicode and UTF8. Design issues and requirements are addressed, and\n-examples of correct usage for both the required specializations for\n-wide and narrow characters and the implementation-provided extended\n-functionality are given.\n-</p>\n-\n-<h2>\n-2. What the standard says\n-</h2>\n-Around page 425 of the C++ Standard, this charming heading comes into view:\n-\n-<blockquote>\n-22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n-</blockquote>\n-\n-The text around the codecvt definition gives some clues:\n-\n-<blockquote>\n-<em>\n--1- The class codecvt&lt;internT,externT,stateT&gt; is for use when\n-converting from one codeset to another, such as from wide characters\n-to multibyte characters, between wide character encodings such as\n-Unicode and EUC. \n-</em>\n-</blockquote>\n-\n-<p> \n-Hmm. So, in some unspecified way, Unicode encodings and\n-translations between other character sets should be handled by this\n-class.  \n-</p>\n-\n-<blockquote>\n-<em>\n--2- The stateT argument selects the pair of codesets being mapped between. \n-</em>\n-</blockquote>\n-\n-<p>\n-Ah ha! Another clue...\n-</p>\n-\n-<blockquote>\n-<em>\n--3- The instantiations required in the Table ??\n-(lib.locale.category), namely codecvt&lt;wchar_t,char,mbstate_t&gt; and\n-codecvt&lt;char,char,mbstate_t&gt;, convert the implementation-defined\n-native character set. codecvt&lt;char,char,mbstate_t&gt; implements a\n-degenerate conversion; it does not convert at\n-all. codecvt&lt;wchar_t,char,mbstate_t&gt; converts between the native\n-character sets for tiny and wide characters. Instantiations on\n-mbstate_t perform conversion between encodings known to the library\n-implementor.  Other encodings can be converted by specializing on a\n-user-defined stateT type. The stateT object can contain any state that\n-is useful to communicate to or from the specialized do_convert member.\n-</em>\n-</blockquote>\n-\n-<p>\n-At this point, a couple points become clear:\n-</p>\n-\n-<p>\n-One: The standard clearly implies that attempts to add non-required\n-(yet useful and widely used) conversions need to do so through the\n-third template parameter, stateT.</p>\n-\n-<p>\n-Two: The required conversions, by specifying mbstate_t as the third\n-template parameter, imply an implementation strategy that is mostly\n-(or wholly) based on the underlying C library, and the functions\n-mcsrtombs and wcsrtombs in particular.</p>\n-\n-<h2>\n-3. Some thoughts on what would be useful\n-</h2>\n-Probably the most frequently asked question about code conversion is:\n-&quot;So dudes, what's the deal with Unicode strings?&quot; The dude part is\n-optional, but apparently the usefulness of Unicode strings is pretty\n-widely appreciated. Sadly, this specific encoding (And other useful\n-encodings like UTF8, UCS4, ISO 8859-10, etc etc etc) are not mentioned\n-in the C++ standard.\n-\n-<p>\n-In particular, the simple implementation detail of wchar_t's size\n-seems to repeatedly confound people. Many systems use a two byte,\n-unsigned integral type to represent wide characters, and use an\n-internal encoding of Unicode or UCS2. (See AIX, Microsoft NT, Java,\n-others.) Other systems, use a four byte, unsigned integral type to\n-represent wide characters, and use an internal encoding of\n-UCS4. (GNU/Linux systems using glibc, in particular.) The C\n-programming language (and thus C++) does not specify a specific size\n-for the type wchar_t.\n-</p>\n-\n-<p>\n-Thus, portable C++ code cannot assume a byte size (or endianness) either.\n-</p>\n-\n-<p>\n-Getting back to the frequently asked question: What about Unicode strings?\n-</p>\n-\n-<p>\n-What magic spell will do this conversion?\n-</p>\n-\n-<p>\n-A couple of comments:\n-</p>\n-\n-<p>\n-The thought that all one needs to convert between two arbitrary\n-codesets is two types and some kind of state argument is\n-unfortunate. In particular, encodings may be stateless. The naming of\n-the third parameter as stateT is unfortunate, as what is really needed\n-is some kind of generalized type that accounts for the issues that\n-abstract encodings will need. The minimum information that is required\n-includes:\n-</p>\n-\n-<ul>\n-<li>\n-<p>\n- Identifiers for each of the codesets involved in the conversion. For\n-example, using the iconv family of functions from the Single Unix\n-Specification (what used to be called X/Open) hosted on the GNU/Linux\n-operating system allows bi-directional mapping between far more than\n-the following tantalizing possibilities: \n-</p>\n-\n-<p>\n-(An edited list taken from <code>`iconv --list`</code> on a Red Hat 6.2/Intel system:\n-</p>\n-\n-<blockquote>\n-<pre>\n-8859_1, 8859_9, 10646-1:1993, 10646-1:1993/UCS4, ARABIC, ARABIC7,\n-ASCII, EUC-CN, EUC-JP, EUC-KR, EUC-TW, GREEK-CCIcode, GREEK, GREEK7-OLD,\n-GREEK7, GREEK8, HEBREW, ISO-8859-1, ISO-8859-2, ISO-8859-3,\n-ISO-8859-4, ISO-8859-5, ISO-8859-6, ISO-8859-7, ISO-8859-8,\n-ISO-8859-9, ISO-8859-10, ISO-8859-11, ISO-8859-13, ISO-8859-14,\n-ISO-8859-15, ISO-10646, ISO-10646/UCS2, ISO-10646/UCS4,\n-ISO-10646/UTF-8, ISO-10646/UTF8, SHIFT-JIS, SHIFT_JIS, UCS-2, UCS-4,\n-UCS2, UCS4, UNICODE, UNICODEBIG, UNICODELIcodeLE, US-ASCII, US, UTF-8,\n-UTF-16, UTF8, UTF16).\n-</pre>\n-</blockquote>\n-\n-<p>\n-For iconv-based implementations, string literals for each of the\n-encodings (ie. &quot;UCS-2&quot; and &quot;UTF-8&quot;) are necessary,\n-although for other,\n-non-iconv implementations a table of enumerated values or some other\n-mechanism may be required.\n-</p>\n-</li>\n-\n-<li>\n- Maximum length of the identifying string literal.\n-</li>\n-\n-<li>\n- Some encodings require explicit endian-ness. As such, some kind\n-  of endian marker or other byte-order marker will be necessary. See\n-  &quot;Footnotes for C/C++ developers&quot; in Haible for more information on\n-  UCS-2/Unicode endian issues. (Summary: big endian seems most likely,\n-  however implementations, most notably Microsoft, vary.)\n-</li>\n-\n-<li>\n- Types representing the conversion state, for conversions involving\n-  the machinery in the &quot;C&quot; library, or the conversion descriptor, for\n-  conversions using iconv (such as the type iconv_t.)  Note that the\n-  conversion descriptor encodes more information than a simple encoding\n-  state type.\n-</li>\n-\n-<li>\n- Conversion descriptors for both directions of encoding. (ie, both\n-  UCS-2 to UTF-8 and UTF-8 to UCS-2.)\n-</li>\n-\n-<li>\n- Something to indicate if the conversion requested if valid.\n-</li>\n-\n-<li>\n- Something to represent if the conversion descriptors are valid.\n-</li>\n-\n-<li>\n- Some way to enforce strict type checking on the internal and\n-  external types. As part of this, the size of the internal and\n-  external types will need to be known.\n-</li>\n-</ul>\n-\n-<h2>\n-4. Problems with &quot;C&quot; code conversions : thread safety, global\n-locales, termination.\n-</h2>\n-\n-In addition, multi-threaded and multi-locale environments also impact\n-the design and requirements for code conversions. In particular, they\n-affect the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt;\n-when implemented using standard &quot;C&quot; functions.\n-\n-<p>\n-Three problems arise, one big, one of medium importance, and one small. \n-</p>\n-\n-<p>\n-First, the small: mcsrtombs and wcsrtombs may not be multithread-safe\n-on all systems required by the GNU tools. For GNU/Linux and glibc,\n-this is not an issue.\n-</p>\n-\n-<p>\n-Of medium concern, in the grand scope of things, is that the functions\n-used to implement this specialization work on null-terminated\n-strings. Buffers, especially file buffers, may not be null-terminated,\n-thus giving conversions that end prematurely or are otherwise\n-incorrect. Yikes!\n-</p>\n-\n-<p>\n-The last, and fundamental problem, is the assumption of a global\n-locale for all the &quot;C&quot; functions referenced above. For something like\n-C++ iostreams (where codecvt is explicitly used) the notion of\n-multiple locales is fundamental. In practice, most users may not run\n-into this limitation. However, as a quality of implementation issue,\n-the GNU C++ library would like to offer a solution that allows\n-multiple locales and or simultaneous usage with computationally\n-correct results. In short, libstdc++ is trying to offer, as an\n-option, a high-quality implementation, damn the additional complexity!\n-</p>\n-\n-<p>\n-For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,\n-conversions are made between the internal character set (always UCS4\n-on GNU/Linux) and whatever the currently selected locale for the\n-LC_CTYPE category implements.\n-</p>\n-\n-<h2>\n-5. Design\n-</h2>\n-The two required specializations are implemented as follows:\n-\n-<p>\n-<code>\n-codecvt&lt;char, char, mbstate_t&gt;\n-</code>\n-</p>\n-<p>\n-This is a degenerate (ie, does nothing) specialization. Implementing\n-this was a piece of cake.\n-</p>\n-\n-<p>\n-<code>\n-codecvt&lt;char, wchar_t, mbstate_t&gt;\n-</code>\n-</p>\n-<p>\n-This specialization, by specifying all the template parameters, pretty\n-much ties the hands of implementors. As such, the implementation is\n-straightforward, involving mcsrtombs for the conversions between char\n-to wchar_t and wcsrtombs for conversions between wchar_t and char.\n-</p>\n-\n-<p>\n-Neither of these two required specializations deals with Unicode\n-characters. As such, libstdc++ implements a partial specialization\n-of the codecvt class with and iconv wrapper class, encoding_state as the\n-third template parameter.\n-</p>\n-\n-<p>\n-This implementation should be standards conformant. First of all, the\n-standard explicitly points out that instantiations on the third\n-template parameter, stateT, are the proper way to implement\n-non-required conversions. Second of all, the standard says (in Chapter\n-17) that partial specializations of required classes are a-ok. Third\n-of all, the requirements for the stateT type elsewhere in the standard\n-(see 21.1.2 traits typedefs) only indicate that this type be copy\n-constructible.\n-</p>\n-\n-<p>\n-As such, the type encoding_state is defined as a non-templatized, POD\n-type to be used as the third type of a codecvt instantiation. This\n-type is just a wrapper class for iconv, and provides an easy interface\n-to iconv functionality.\n-</p>\n-\n-<p>\n-There are two constructors for encoding_state:\n-</p>\n-\n-<p>\n-<code> \n-encoding_state() : __in_desc(0), __out_desc(0)\n-</code>\n-</p>\n-<p>\n-This default constructor sets the internal encoding to some default\n-(currently UCS4) and the external encoding to whatever is returned by\n-nl_langinfo(CODESET).\n-</p>\n-\n-<p>\n-<code> \n-encoding_state(const char* __int, const char* __ext)\n-</code>\n-</p>\n-<p>\n-This constructor takes as parameters string literals that indicate the\n-desired internal and external encoding. There are no defaults for\n-either argument.\n-</p>\n-\n-<p>\n-One of the issues with iconv is that the string literals identifying\n-conversions are not standardized. Because of this, the thought of\n-mandating and or enforcing some set of pre-determined valid\n-identifiers seems iffy: thus, a more practical (and non-migraine\n-inducing) strategy was implemented: end-users can specify any string\n-(subject to a pre-determined length qualifier, currently 32 bytes) for\n-encodings. It is up to the user to make sure that these strings are\n-valid on the target system.\n-</p>\n-  \n-<p>\n-<code> \n-void\n-_M_init()\n-</code>\n-</p>\n-<p>\n-Strangely enough, this member function attempts to open conversion\n-descriptors for a given encoding_state object. If the conversion\n-descriptors are not valid, the conversion descriptors returned will\n-not be valid and the resulting calls to the codecvt conversion\n-functions will return error.\n-</p>\n-\n-<p>\n-<code> \n-bool\n-_M_good()\n-</code>\n-</p>\n-<p>\n-Provides a way to see if the given encoding_state object has been\n-properly initialized. If the string literals describing the desired\n-internal and external encoding are not valid, initialization will\n-fail, and this will return false. If the internal and external\n-encodings are valid, but iconv_open could not allocate conversion\n-descriptors, this will also return false. Otherwise, the object is\n-ready to convert and will return true.\n-</p>\n-\n-<p>\n-<code> \n-encoding_state(const encoding_state&amp;)\n-</code>\n-</p>\n-<p>\n-As iconv allocates memory and sets up conversion descriptors, the copy\n-constructor can only copy the member data pertaining to the internal\n-and external code conversions, and not the conversion descriptors\n-themselves.\n-</p>\n-\n-<p>\n-Definitions for all the required codecvt member functions are provided\n-for this specialization, and usage of codecvt&lt;internal character type,\n-external character type, encoding_state&gt; is consistent with other\n-codecvt usage.\n-</p>\n-\n-<h2>\n-6.  Examples\n-</h2>\n-\n-<ul>\n-        <li>\n-        a. conversions involving string literals\n-\n-<pre>\n-  typedef codecvt_base::result                  result;\n-  typedef unsigned short                        unicode_t;\n-  typedef unicode_t                             int_type;\n-  typedef char                                  ext_type;\n-  typedef encoding_state                          state_type;\n-  typedef codecvt&lt;int_type, ext_type, state_type&gt; unicode_codecvt;\n-\n-  const ext_type*       e_lit = \"black pearl jasmine tea\";\n-  int                   size = strlen(e_lit);\n-  int_type              i_lit_base[24] = \n-  { 25088, 27648, 24832, 25344, 27392, 8192, 28672, 25856, 24832, 29184, \n-    27648, 8192, 27136, 24832, 29440, 27904, 26880, 28160, 25856, 8192, 29696,\n-    25856, 24832, 2560\n-  };\n-  const int_type*       i_lit = i_lit_base;\n-  const ext_type*       efrom_next;\n-  const int_type*       ifrom_next;\n-  ext_type*             e_arr = new ext_type[size + 1];\n-  ext_type*             eto_next;\n-  int_type*             i_arr = new int_type[size + 1];\n-  int_type*             ito_next;\n-\n-  // construct a locale object with the specialized facet.\n-  locale                loc(locale::classic(), new unicode_codecvt);\n-  // sanity check the constructed locale has the specialized facet.\n-  VERIFY( has_facet&lt;unicode_codecvt&gt;(loc) );\n-  const unicode_codecvt&amp; cvt = use_facet&lt;unicode_codecvt&gt;(loc); \n-  // convert between const char* and unicode strings\n-  unicode_codecvt::state_type state01(\"UNICODE\", \"ISO_8859-1\");\n-  initialize_state(state01);\n-  result r1 = cvt.in(state01, e_lit, e_lit + size, efrom_next, \n-                     i_arr, i_arr + size, ito_next);\n-  VERIFY( r1 == codecvt_base::ok );\n-  VERIFY( !int_traits::compare(i_arr, i_lit, size) ); \n-  VERIFY( efrom_next == e_lit + size );\n-  VERIFY( ito_next == i_arr + size );\n-</pre>\n-        </li>\n-        <li>\n-        b. conversions involving std::string\n-        </li>\n-        <li>\n-        c. conversions involving std::filebuf and std::ostream\n-        </li>\n-</ul>\n-\n-More information can be found in the following testcases:\n-<ul>\n-<li> testsuite/22_locale/codecvt_char_char.cc       </li>\n-<li> testsuite/22_locale/codecvt_unicode_wchar_t.cc </li>\n-<li> testsuite/22_locale/codecvt_unicode_char.cc    </li>\n-<li> testsuite/22_locale/codecvt_wchar_t_char.cc    </li>\n-</ul>\n-\n-<h2>\n-7.  Unresolved Issues\n-</h2>\n-<ul>\n-<li>\n-   a. things that are sketchy, or remain unimplemented:\n-      do_encoding, max_length and length member functions\n-      are only weakly implemented. I have no idea how to do\n-      this correctly, and in a generic manner.  Nathan?\n-</li>\n-\n-<li>\n-   b. conversions involving std::string\n-\n-   <ul>\n-      <li>\n-      how should operators != and == work for string of\n-      different/same encoding?\n-      </li>\n-\n-      <li>\n-      what is equal? A byte by byte comparison or an\n-      encoding then byte comparison?\n-      </li>\n-      \n-      <li>\n-      conversions between narrow, wide, and unicode strings\n-      </li>\n-   </ul>\n-</li>\n-<li>\n-   c. conversions involving std::filebuf and std::ostream\n-   <ul>\n-      <li>\n-      how to initialize the state object in a\n-      standards-conformant manner?\n-      </li>\n-\n-                <li>\n-      how to synchronize the &quot;C&quot; and &quot;C++&quot;\n-      conversion information?\n-      </li>\n-\n-                <li>\n-      wchar_t/char internal buffers and conversions between\n-      internal/external buffers?\n-      </li>\n-   </ul>\n-</li>\n-</ul>\n-\n-<h2>\n-8. Acknowledgments\n-</h2>\n-Ulrich Drepper for the iconv suggestions and patient answering of\n-late-night questions, Jason Merrill for the template partial\n-specialization hints, language clarification, and wchar_t fixes.\n-\n-<h2>\n-9. Bibliography / Referenced Documents\n-</h2>\n-\n-Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters &quot;6. Character Set Handling&quot; and &quot;7 Locales and Internationalization&quot;\n-\n-<p>\n-Drepper, Ulrich, Numerous, late-night email correspondence\n-</p>\n-\n-<p>\n-Feather, Clive, &quot;A brief description of Normative Addendum 1,&quot; in particular the parts on Extended Character Sets\n-http://www.lysator.liu.se/c/na1.html\n-</p>\n-\n-<p>\n-Haible, Bruno, &quot;The Unicode HOWTO&quot; v0.18, 4 August 2000\n-ftp://ftp.ilog.fr/pub/Users/haible/utf8/Unicode-HOWTO.html\n-</p>\n-\n-<p>\n-ISO/IEC 14882:1998 Programming languages - C++\n-</p>\n-\n-<p>\n-ISO/IEC 9899:1999 Programming languages - C\n-</p>\n-\n-<p>\n-Khun, Markus, &quot;UTF-8 and Unicode FAQ for Unix/Linux&quot;\n-http://www.cl.cam.ac.uk/~mgk25/unicode.html\n-</p>\n-\n-<p>\n-Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000\n-</p>\n-\n-<p>\n-Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n-</p>\n-\n-<p>\n-System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n-The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n-http://www.opennc.org/austin/docreg.html\n-</p>\n-\n-</body>\n-</html>"}, {"sha": "e52f8353bd9d2ae58755ddbbeb2fc53f40de49bd", "filename": "libstdc++-v3/doc/html/22_locale/ctype.html", "status": "removed", "additions": 0, "deletions": 166, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fctype.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fctype.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fctype.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,166 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"bkoz@redhat.com (Benjamin Kosnik)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"Notes on the ctype implementation.\" />\n-   <title>Notes on the ctype implementation.</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Bookmark\" href=\"howto.html\" type=\"text/html\" title=\"Localization\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-  <h1>\n-  Notes on the ctype implementation.\n-  </h1>\n-<em>\n-prepared by Benjamin Kosnik (bkoz@redhat.com) on August 30, 2000\n-</em>\n-\n-<h2>\n-1. Abstract\n-</h2>\n-<p>\n-Woe is me.\n-</p>\n-\n-<h2>\n-2. What the standard says\n-</h2>\n-\n-\n-<h2>\n-3. Problems with &quot;C&quot; ctype : global locales, termination.\n-</h2>\n-\n-<p>\n-For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,\n-conversions are made between the internal character set (always UCS4\n-on GNU/Linux) and whatever the currently selected locale for the\n-LC_CTYPE category implements.\n-</p>\n-\n-<h2>\n-4. Design\n-</h2>\n-The two required specializations are implemented as follows:\n-\n-<p>\n-<code>\n-ctype&lt;char&gt;\n-</code>\n-</p>\n-<p>\n-This is simple specialization. Implementing this was a piece of cake.\n-</p>\n-\n-<p>\n-<code>\n-ctype&lt;wchar_t&gt;\n-</code>\n-</p>\n-<p>\n-This specialization, by specifying all the template parameters, pretty\n-much ties the hands of implementors. As such, the implementation is\n-straightforward, involving mcsrtombs for the conversions between char\n-to wchar_t and wcsrtombs for conversions between wchar_t and char.\n-</p>\n-\n-<p>\n-Neither of these two required specializations deals with Unicode\n-characters. As such, libstdc++ implements \n-</p>\n-\n-<h2>\n-5.  Examples\n-</h2>\n-\n-<pre>\n-  typedef ctype&lt;char&gt; cctype;\n-</pre>\n-\n-More information can be found in the following testcases:\n-<ul>\n-<li> testsuite/22_locale/ctype_char_members.cc    </li>\n-<li> testsuite/22_locale/ctype_wchar_t_members.cc </li>\n-</ul>\n-\n-<h2>\n-6.  Unresolved Issues\n-</h2>\n-\n-<ul>\n-   <li> how to deal with the global locale issue? </li>\n-\n-   <li> how to deal with different types than char, wchar_t? </li>\n-\n-   <li> codecvt/ctype overlap: narrow/widen </li>\n-\n-   <li> mask typedef in codecvt_base, argument types in codecvt.\n-   what is know about this type? </li>\n-\n-   <li> why mask* argument in codecvt? </li>\n-   \n-   <li> can this be made (more) generic? is there a simple way to\n-   straighten out the configure-time mess that is a by-product of\n-   this class? </li>\n-\n-   <li> get the ctype&lt;wchar_t&gt;::mask stuff under control. Need to\n-   make some kind of static table, and not do lookup evertime\n-   somebody hits the do_is... functions. Too bad we can't just\n-   redefine mask for ctype&lt;wchar_t&gt; </li>\n-   \n-   <li> rename abstract base class. See if just smash-overriding\n-   is a better approach. Clarify, add sanity to naming. </li>\n-\n-</ul>\n-\n-\n-<h2>\n-7. Acknowledgments\n-</h2>\n-Ulrich Drepper for patient answering of late-night questions, skeletal\n-examples, and C language expertise.\n-\n-<h2>\n-8. Bibliography / Referenced Documents\n-</h2>\n-\n-Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters &quot;6. Character Set Handling&quot; and &quot;7 Locales and Internationalization&quot;\n-\n-<p>\n-Drepper, Ulrich, Numerous, late-night email correspondence\n-</p>\n-\n-<p>\n-ISO/IEC 14882:1998 Programming languages - C++\n-</p>\n-\n-<p>\n-ISO/IEC 9899:1999 Programming languages - C\n-</p>\n-\n-<p>\n-Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000\n-</p>\n-\n-<p>\n-Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n-</p>\n-\n-<p>\n-System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n-The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n-http://www.opennc.org/austin/docreg.html\n-</p>\n-\n-</body>\n-</html>"}, {"sha": "3709a6fac972841bf54b7e98e40e99b93cf71ef9", "filename": "libstdc++-v3/doc/html/22_locale/howto.html", "status": "removed", "additions": 0, "deletions": 240, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,240 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 22.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ HOWTO:  Chapter 22: Localization</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Prev\" href=\"../21_strings/howto.html\" type=\"text/html\"\n-  title=\"Strings\" />\n-<link rel=\"Next\" href=\"../23_containers/howto.html\" type=\"text/html\"\n-  title=\"Containers\" />\n-<link rel=\"Bookmark\" href=\"locale.html\" type=\"text/html\" title=\"class locale\" />\n-<link rel=\"Bookmark\" href=\"codecvt.html\" type=\"text/html\" title=\"class codecvt\" />\n-<link rel=\"Bookmark\" href=\"ctype.html\" type=\"text/html\" title=\"class ctype\" />\n-<link rel=\"Bookmark\" href=\"messages.html\" type=\"text/html\" title=\"class messages\" />\n-<link rel=\"Bookmark\" href=\"http://www.research.att.com/~bs/3rd_loc0.html\" type=\"text/html\" title=\"Bjarne Stroustrup on Locales\" />\n-<link rel=\"Bookmark\" href=\"http://www.cantrip.org/locale.html\" type=\"text/html\" title=\"Nathan Myers on Locales\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Chapter 22:  Localization</a></h1>\n-\n-<p>Chapter 22 deals with the C++ localization facilities.\n-</p>\n-<!-- I wanted to write that sentence in something requiring an exotic font,\n-     like Cyrllic or Kanji.  Probably more work than such cuteness is worth,\n-     but I still think it'd be funny.\n- -->\n-\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h1>Contents</h1>\n-<ul>\n-   <li><a href=\"#1\">class locale</a></li>\n-   <li><a href=\"#2\">class codecvt</a></li>\n-   <li><a href=\"#3\">class ctype</a></li>\n-   <li><a href=\"#4\">class messages</a></li>\n-   <li><a href=\"#5\">Bjarne Stroustrup on Locales</a></li>\n-   <li><a href=\"#6\">Nathan Myers on Locales</a></li>\n-   <li><a href=\"#7\">Correct Transformations</a></li>\n-</ul>\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<h2><a name=\"1\">class locale</a></h2>\n-   <p>Notes made during the implementation of locales can be found \n-      <a href=\"locale.html\">here</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"2\">class codecvt</a></h2>\n-   <p>Notes made during the implementation of codecvt can be found \n-      <a href=\"codecvt.html\">here</a>.\n-   </p>\n-\n-   <p>The following is the abstract from the implementation notes:\n-   </p>\n-   <blockquote>\n-   The standard class codecvt attempts to address conversions between\n-   different character encoding schemes. In particular, the standard\n-   attempts to detail conversions between the implementation-defined\n-   wide characters (hereafter referred to as wchar_t) and the standard\n-   type char that is so beloved in classic &quot;C&quot; (which can\n-   now be referred to as narrow characters.)  This document attempts\n-   to describe how the GNU libstdc++ implementation deals with the\n-   conversion between wide and narrow characters, and also presents a\n-   framework for dealing with the huge number of other encodings that\n-   iconv can convert, including Unicode and UTF8. Design issues and\n-   requirements are addressed, and examples of correct usage for both\n-   the required specializations for wide and narrow characters and the\n-   implementation-provided extended functionality are given.\n-   </blockquote>\n-\n-<hr />\n-<h2><a name=\"3\">class ctype</a></h2>\n-   <p>Notes made during the implementation of ctype can be found \n-      <a href=\"ctype.html\">here</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"4\">class messages</a></h2>\n-   <p>Notes made during the implementation of messages can be found \n-      <a href=\"messages.html\">here</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"5\">Bjarne Stroustrup on Locales</a></h2>\n-   <p>Dr. Bjarne Stroustrup has released a\n-      <a href=\"http://www.research.att.com/~bs/3rd_loc0.html\">pointer</a>\n-      to Appendix D of his book,\n-      <a href=\"http://www.research.att.com/~bs/3rd.html\">The C++\n-      Programming Language (3rd Edition)</a>.  It is a detailed\n-      description of locales and how to use them.\n-   </p>\n-   <p>He also writes:\n-   </p>\n-      <blockquote><em>\n-      Please note that I still consider this detailed description of\n-      locales beyond the needs of most C++ programmers.  It is written\n-      with experienced programmers in mind and novices will do best to\n-      avoid it.\n-      </em></blockquote>\n-\n-<hr />\n-<h2><a name=\"6\">Nathan Myers on Locales</a></h2>\n-   <p>An article entitled &quot;The Standard C++ Locale&quot; was\n-      published in Dr. Dobb's Journal and can be found\n-      <a href=\"http://www.cantrip.org/locale.html\">here</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"7\">Correct Transformations</a></h2>\n-   <!-- Jumping directly to here from chapter 21. -->\n-   <p>A very common question on newsgroups and mailing lists is, &quot;How\n-      do I do &lt;foo&gt; to a character string?&quot; where &lt;foo&gt; is\n-      a task such as changing all the letters to uppercase, to lowercase,\n-      testing for digits, etc.  A skilled and conscientious programmer\n-      will follow the question with another, &quot;And how do I make the\n-      code portable?&quot;\n-   </p>\n-   <p>(Poor innocent programmer, you have no idea the depths of trouble\n-      you are getting yourself into.  'Twould be best for your sanity if\n-      you dropped the whole idea and took up basket weaving instead.  No?\n-      Fine, you asked for it...)\n-   </p>\n-   <p>The task of changing the case of a letter or classifying a character\n-      as numeric, graphical, etc., all depends on the cultural context of the\n-      program at runtime.  So, first you must take the portability question\n-      into account.  Once you have localized the program to a particular\n-      natural language, only then can you perform the specific task.\n-      Unfortunately, specializing a function for a human language is not\n-      as simple as declaring\n-      <code> extern &quot;Danish&quot; int tolower (int); </code>.\n-   </p>\n-   <p>The C++ code to do all this proceeds in the same way.  First, a locale\n-      is created.  Then member functions of that locale are called to\n-      perform minor tasks.  Continuing the example from Chapter 21, we wish\n-      to use the following convenience functions:\n-   </p>\n-   <pre>\n-   namespace std {\n-     template &lt;class charT&gt;\n-       charT\n-       toupper (charT c, const locale&amp; loc) const;\n-     template &lt;class charT&gt;\n-       charT\n-       tolower (charT c, const locale&amp; loc) const;\n-   }</pre>\n-   <p>\n-      This function extracts the appropriate &quot;facet&quot; from the\n-      locale <em>loc</em> and calls the appropriate member function of that\n-      facet, passing <em>c</em> as its argument.  The resulting character\n-      is returned.\n-   </p>\n-   <p>For the C/POSIX locale, the results are the same as calling the\n-      classic C <code>toupper/tolower</code> function that was used in previous\n-      examples.  For other locales, the code should Do The Right Thing.\n-   </p>\n-   <p>Of course, these functions take a second argument, and the\n-      transformation algorithm's operator argument can only take a single\n-      parameter.  So we write simple wrapper structs to handle that.\n-   </p>\n-   <p>The next-to-final version of the code started in Chapter 21 looks like:\n-   </p>\n-      <pre>\n-   #include &lt;iterator&gt;    // for back_inserter\n-   #include &lt;locale&gt;\n-   #include &lt;string&gt;\n-   #include &lt;algorithm&gt;\n-   #include &lt;cctype&gt;      // old &lt;ctype.h&gt;\n-\n-   struct ToUpper\n-   {\n-       ToUpper(std::locale const&amp; l) : loc(l) {;}\n-       char operator() (char c) const  { return std::toupper(c,loc); }\n-   private:\n-       std::locale const&amp; loc;\n-   };\n-   \n-   struct ToLower\n-   {\n-       ToLower(std::locale const&amp; l) : loc(l) {;}\n-       char operator() (char c) const  { return std::tolower(c,loc); }\n-   private:\n-       std::locale const&amp; loc;\n-   };\n-   \n-   int main ()\n-   {\n-      std::string  s(\"Some Kind Of Initial Input Goes Here\");\n-      ToUpper      up(std::locale::classic());\n-      ToLower      down(std::locale::classic());\n-   \n-      // Change everything into upper case.\n-      std::transform(s.begin(), s.end(), s.begin(), up);\n-   \n-      // Change everything into lower case.\n-      std::transform(s.begin(), s.end(), s.begin(), down);\n-   \n-      // Change everything back into upper case, but store the\n-      // result in a different string.\n-      std::string  capital_s;\n-      std::transform(s.begin(), s.end(), std::back_inserter(capital_s), up);\n-   }</pre>\n-   <p>The <code>ToUpper</code> and <code>ToLower</code> structs can be\n-      generalized for other character types by making <code>operator()</code>\n-      a member function template.\n-   </p>\n-   <p>The final version of the code uses <code>bind2nd</code> to eliminate\n-      the wrapper structs, but the resulting code is tricky.  I have not\n-      shown it here because no compilers currently available to me will\n-      handle it.\n-   </p>\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "57ef5b4e981cfde3437f3b27b5802e2e434adcb5", "filename": "libstdc++-v3/doc/html/22_locale/locale.html", "status": "removed", "additions": 0, "deletions": 543, "changes": 543, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Flocale.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Flocale.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Flocale.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,543 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"bkoz@redhat.com (Benjamin Kosnik)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, locale name LC_ALL\" />\n-   <meta name=\"DESCRIPTION\" content=\"Notes on the locale implementation.\" />\n-   <title>Notes on the locale implementation.</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Bookmark\" href=\"howto.html\" type=\"text/html\" title=\"Localization\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-  <h1>\n-  Notes on the locale implementation.\n-  </h1>\n-<em>\n-prepared by Benjamin Kosnik (bkoz@redhat.com) on October 14, 2002\n-</em>\n-\n-<h2>\n-1. Abstract \n-</h2>\n-<p>\n-Describes the basic locale object, including nested\n-classes id, facet, and the reference-counted implementation object,\n-class _Impl.\n-</p>\n-\n-<h2>\n-2. What the standard says\n-</h2>\n-Class locale is non-templatized and has two distinct types nested\n-inside of it:\n-\n-<blockquote>\n-<em>\n-class facet\n-22.1.1.1.2 Class locale::facet\n-</em>\n-</blockquote>\n-\n-<p>\n-Facets actually implement locale functionality. For instance, a facet\n-called numpunct is the data objects that can be used to query for the\n-thousands separator is in the German locale.\n-</p>\n-\n-Literally, a facet is strictly defined:\n-<ul>\n-  <li>containing the following public data member:\n-  <p>\n-  <code>static locale::id id;</code>\n-  </p>\n-  </li>\n-\n-  <li>derived from another facet:\n-  <p>\n-  <code> class gnu_codecvt: public std::ctype&lt;user-defined-type&gt;</code>\n-  </p>\n-  </li>\n-</ul>\n-\n-<p>\n-Of interest in this class are the memory management options explicitly\n-specified as an argument to facet's constructor. Each constructor of a\n-facet class takes a std::size_t __refs argument: if __refs == 0, the\n-facet is deleted when the locale containing it is destroyed. If __refs\n-== 1, the facet is not destroyed, even when it is no longer\n-referenced.\n-</p>\n-\n-<blockquote>\n-<em>\n-class id\n-22.1.1.1.3 - Class locale::id\n-</em>\n-</blockquote>\n-\n-<p>\n-Provides an index for looking up specific facets.\n-</p>\n-\n-\n-<h2>\n-3. Interacting with &quot;C&quot; locales.\n-</h2>\n-\n-<p>\n-Some help on determining the underlying support for locales on a system. \n-Note, this is specific to linux (and glibc-2.3.x)\n-</p>\n-\n-<ul>\n-   <li> <code>`locale -a`</code> displays available locales. \n-<blockquote>\n-<pre>\n-af_ZA\n-ar_AE\n-ar_AE.utf8\n-ar_BH\n-ar_BH.utf8\n-ar_DZ\n-ar_DZ.utf8\n-ar_EG\n-ar_EG.utf8\n-ar_IN\n-ar_IQ\n-ar_IQ.utf8\n-ar_JO\n-ar_JO.utf8\n-ar_KW\n-ar_KW.utf8\n-ar_LB\n-ar_LB.utf8\n-ar_LY\n-ar_LY.utf8\n-ar_MA\n-ar_MA.utf8\n-ar_OM\n-ar_OM.utf8\n-ar_QA\n-ar_QA.utf8\n-ar_SA\n-ar_SA.utf8\n-ar_SD\n-ar_SD.utf8\n-ar_SY\n-ar_SY.utf8\n-ar_TN\n-ar_TN.utf8\n-ar_YE\n-ar_YE.utf8\n-be_BY\n-be_BY.utf8\n-bg_BG\n-bg_BG.utf8\n-br_FR\n-bs_BA\n-C\n-ca_ES\n-ca_ES@euro\n-ca_ES.utf8\n-ca_ES.utf8@euro\n-cs_CZ\n-cs_CZ.utf8\n-cy_GB\n-da_DK\n-da_DK.iso885915\n-da_DK.utf8\n-de_AT\n-de_AT@euro\n-de_AT.utf8\n-de_AT.utf8@euro\n-de_BE\n-de_BE@euro\n-de_BE.utf8\n-de_BE.utf8@euro\n-de_CH\n-de_CH.utf8\n-de_DE\n-de_DE@euro\n-de_DE.utf8\n-de_DE.utf8@euro\n-de_LU\n-de_LU@euro\n-de_LU.utf8\n-de_LU.utf8@euro\n-el_GR\n-el_GR.utf8\n-en_AU\n-en_AU.utf8\n-en_BW\n-en_BW.utf8\n-en_CA\n-en_CA.utf8\n-en_DK\n-en_DK.utf8\n-en_GB\n-en_GB.iso885915\n-en_GB.utf8\n-en_HK\n-en_HK.utf8\n-en_IE\n-en_IE@euro\n-en_IE.utf8\n-en_IE.utf8@euro\n-en_IN\n-en_NZ\n-en_NZ.utf8\n-en_PH\n-en_PH.utf8\n-en_SG\n-en_SG.utf8\n-en_US\n-en_US.iso885915\n-en_US.utf8\n-en_ZA\n-en_ZA.utf8\n-en_ZW\n-en_ZW.utf8\n-es_AR\n-es_AR.utf8\n-es_BO\n-es_BO.utf8\n-es_CL\n-es_CL.utf8\n-es_CO\n-es_CO.utf8\n-es_CR\n-es_CR.utf8\n-es_DO\n-es_DO.utf8\n-es_EC\n-es_EC.utf8\n-es_ES\n-es_ES@euro\n-es_ES.utf8\n-es_ES.utf8@euro\n-es_GT\n-es_GT.utf8\n-es_HN\n-es_HN.utf8\n-es_MX\n-es_MX.utf8\n-es_NI\n-es_NI.utf8\n-es_PA\n-es_PA.utf8\n-es_PE\n-es_PE.utf8\n-es_PR\n-es_PR.utf8\n-es_PY\n-es_PY.utf8\n-es_SV\n-es_SV.utf8\n-es_US\n-es_US.utf8\n-es_UY\n-es_UY.utf8\n-es_VE\n-es_VE.utf8\n-et_EE\n-et_EE.utf8\n-eu_ES\n-eu_ES@euro\n-eu_ES.utf8\n-eu_ES.utf8@euro\n-fa_IR\n-fi_FI\n-fi_FI@euro\n-fi_FI.utf8\n-fi_FI.utf8@euro\n-fo_FO\n-fo_FO.utf8\n-fr_BE\n-fr_BE@euro\n-fr_BE.utf8\n-fr_BE.utf8@euro\n-fr_CA\n-fr_CA.utf8\n-fr_CH\n-fr_CH.utf8\n-fr_FR\n-fr_FR@euro\n-fr_FR.utf8\n-fr_FR.utf8@euro\n-fr_LU\n-fr_LU@euro\n-fr_LU.utf8\n-fr_LU.utf8@euro\n-ga_IE\n-ga_IE@euro\n-ga_IE.utf8\n-ga_IE.utf8@euro\n-gl_ES\n-gl_ES@euro\n-gl_ES.utf8\n-gl_ES.utf8@euro\n-gv_GB\n-gv_GB.utf8\n-he_IL\n-he_IL.utf8\n-hi_IN\n-hr_HR\n-hr_HR.utf8\n-hu_HU\n-hu_HU.utf8\n-id_ID\n-id_ID.utf8\n-is_IS\n-is_IS.utf8\n-it_CH\n-it_CH.utf8\n-it_IT\n-it_IT@euro\n-it_IT.utf8\n-it_IT.utf8@euro\n-iw_IL\n-iw_IL.utf8\n-ja_JP.eucjp\n-ja_JP.utf8\n-ka_GE\n-kl_GL\n-kl_GL.utf8\n-ko_KR.euckr\n-ko_KR.utf8\n-kw_GB\n-kw_GB.utf8\n-lt_LT\n-lt_LT.utf8\n-lv_LV\n-lv_LV.utf8\n-mi_NZ\n-mk_MK\n-mk_MK.utf8\n-mr_IN\n-ms_MY\n-ms_MY.utf8\n-mt_MT\n-mt_MT.utf8\n-nl_BE\n-nl_BE@euro\n-nl_BE.utf8\n-nl_BE.utf8@euro\n-nl_NL\n-nl_NL@euro\n-nl_NL.utf8\n-nl_NL.utf8@euro\n-nn_NO\n-nn_NO.utf8\n-no_NO\n-no_NO.utf8\n-oc_FR\n-pl_PL\n-pl_PL.utf8\n-POSIX\n-pt_BR\n-pt_BR.utf8\n-pt_PT\n-pt_PT@euro\n-pt_PT.utf8\n-pt_PT.utf8@euro\n-ro_RO\n-ro_RO.utf8\n-ru_RU\n-ru_RU.koi8r\n-ru_RU.utf8\n-ru_UA\n-ru_UA.utf8\n-se_NO\n-sk_SK\n-sk_SK.utf8\n-sl_SI\n-sl_SI.utf8\n-sq_AL\n-sq_AL.utf8\n-sr_YU\n-sr_YU@cyrillic\n-sr_YU.utf8\n-sr_YU.utf8@cyrillic\n-sv_FI\n-sv_FI@euro\n-sv_FI.utf8\n-sv_FI.utf8@euro\n-sv_SE\n-sv_SE.iso885915\n-sv_SE.utf8\n-ta_IN\n-te_IN\n-tg_TJ\n-th_TH\n-th_TH.utf8\n-tl_PH\n-tr_TR\n-tr_TR.utf8\n-uk_UA\n-uk_UA.utf8\n-ur_PK\n-uz_UZ\n-vi_VN\n-vi_VN.tcvn\n-wa_BE\n-wa_BE@euro\n-yi_US\n-zh_CN\n-zh_CN.gb18030\n-zh_CN.gbk\n-zh_CN.utf8\n-zh_HK\n-zh_HK.utf8\n-zh_TW\n-zh_TW.euctw\n-zh_TW.utf8\n-</pre>\n-</blockquote>\n-</li>\n-   \n-   <li> <code>`locale`</code> displays environmental variables\n-   that impact how locale(\"\") will be deduced.\n-\n-<blockquote>\n-<pre>\n-LANG=en_US\n-LC_CTYPE=\"en_US\"\n-LC_NUMERIC=\"en_US\"\n-LC_TIME=\"en_US\"\n-LC_COLLATE=\"en_US\"\n-LC_MONETARY=\"en_US\"\n-LC_MESSAGES=\"en_US\"\n-LC_PAPER=\"en_US\"\n-LC_NAME=\"en_US\"\n-LC_ADDRESS=\"en_US\"\n-LC_TELEPHONE=\"en_US\"\n-LC_MEASUREMENT=\"en_US\"\n-LC_IDENTIFICATION=\"en_US\"\n-LC_ALL=\n-</pre>\n-</blockquote>\n-</li>\n-</ul>\n-\n-<p>\n-From Josuttis, p. 697-698, which says, that \"there is only *one*\n-relation (of the C++ locale mechanism) to the C locale mechanism: the\n-global C locale is modified if a named C++ locale object is set as the\n-global locale\" (emphasis Paolo), that is:\n-</p>\n-    <code>std::locale::global(std::locale(\"\"));</code>\n-\n-<p>affects the C functions as if the following call was made:</p>\n-\n-    <code>std::setlocale(LC_ALL, \"\");</code>\n-\n-<p>\n-On the other hand, there is *no* viceversa, that is, calling setlocale\n-has *no* whatsoever on the C++ locale mechanism, in particular on the\n-working of locale(\"\"), which constructs the locale object from the\n-environment of the running program, that is, in practice, the set of\n-LC_ALL, LANG, etc. variable of the shell.\n-</p>\n-\n-\n-<h2>\n-4. Design\n-</h2>\n-\n-\n-<p>\n-The major design challenge is fitting an object-orientated and\n-non-global locale design ontop of POSIX and other relevant stanards,\n-which include the Single Unix (nee X/Open.)\n-</p>\n-\n-<p>\n-Because POSIX falls down so completely, portibility is an issue.\n-</p>\n-\n-class _Impl\n-The internal representation of the std::locale object.\n-\n-\n-<h2>\n-5.  Examples\n-</h2>\n-\n-More information can be found in the following testcases:\n-<ul>\n-<li> testsuite/22_locale/all   </li>\n-</ul>\n-\n-<h2>\n-6.  Unresolved Issues\n-</h2>\n-\n-<ul>\n-   <li> locale initialization: at what point does _S_classic,\n-   _S_global get initialized? Can named locales assume this\n-   initialization has already taken place? </li>\n-\n-   <li> document how named locales error check when filling data\n-   members. Ie, a fr_FR locale that doesn't have\n-   numpunct::truename(): does it use \"true\"? Or is it a blank\n-   string? What's the convention? </li>\n-\n-   <li> explain how locale aliasing happens. When does \"de_DE\"\n-   use \"de\" information? What is the rule for locales composed of\n-   just an ISO language code (say, \"de\") and locales with both an\n-   ISO language code and ISO country code (say, \"de_DE\"). </li>\n-\n-   <li> what should non-required facet instantiations do?  If the\n-   generic implemenation is provided, then how to end-users\n-   provide specializations? </li>\n-</ul>\n-\n-<h2>\n-7. Acknowledgments\n-</h2>\n-\n-<h2>\n-8. Bibliography / Referenced Documents\n-</h2>\n-\n-Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters &quot;6. Character Set Handling&quot; and &quot;7 Locales and Internationalization&quot;\n-\n-<p>\n-Drepper, Ulrich, Numerous, late-night email correspondence\n-</p>\n-\n-<p>\n-ISO/IEC 14882:1998 Programming languages - C++\n-</p>\n-\n-<p>\n-ISO/IEC 9899:1999 Programming languages - C\n-</p>\n-\n-<p>\n-Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000\n-</p>\n-\n-<p>\n-Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n-</p>\n-\n-<p>\n-System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n-The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n-http://www.opennc.org/austin/docreg.html\n-</p>\n-\n-</body>\n-</html>\n-\n-"}, {"sha": "bb096c09e7f27281942e6f7a9bb2f32dab8120db", "filename": "libstdc++-v3/doc/html/22_locale/messages.html", "status": "removed", "additions": 0, "deletions": 461, "changes": 461, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fmessages.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fmessages.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F22_locale%2Fmessages.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,461 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"bkoz@redhat.com (Benjamin Kosnik)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"Notes on the messages implementation.\" />\n-   <title>Notes on the messages implementation.</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Bookmark\" href=\"howto.html\" type=\"text/html\" title=\"Localization\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-<h1>\n-Notes on the messages implementation.\n-</h1>\n-<em>\n-prepared by Benjamin Kosnik (bkoz@redhat.com) on August 8, 2001\n-</em>\n-\n-<h2>\n-1. Abstract\n-</h2>\n-<p>\n-The std::messages facet implements message retrieval functionality\n-equivalent to Java's java.text.MessageFormat .using either GNU gettext\n-or IEEE 1003.1-200 functions.\n-</p>\n-\n-<h2>\n-2. What the standard says\n-</h2>\n-The std::messages facet is probably the most vaguely defined facet in\n-the standard library. It's assumed that this facility was built into\n-the standard library in order to convert string literals from one\n-locale to the other. For instance, converting the \"C\" locale's\n-<code>const char* c = \"please\"</code> to a German-localized <code>\"bitte\"</code>\n-during program execution.\n-\n-<blockquote>\n-22.2.7.1 - Template class messages [lib.locale.messages]\n-</blockquote>\n-\n-This class has three public member functions, which directly\n-correspond to three protected virtual member functions. \n-\n-The public member functions are:\n-\n-<p>\n-<code>catalog open(const string&amp;, const locale&amp;) const</code>\n-</p>\n-\n-<p>\n-<code>string_type get(catalog, int, int, const string_type&amp;) const</code>\n-</p>\n-\n-<p>\n-<code>void close(catalog) const</code>\n-</p>\n-\n-<p>\n-While the virtual functions are:\n-</p>\n-\n-<p>\n-<code>catalog do_open(const string&amp;, const locale&amp;) const</code>\n-</p>\n-<blockquote>\n-<em>\n--1- Returns: A value that may be passed to get() to retrieve a\n-message, from the message catalog identified by the string name\n-according to an implementation-defined mapping. The result can be used\n-until it is passed to close().  Returns a value less than 0 if no such\n-catalog can be opened.\n-</em>\n-</blockquote>\n-\n-<p>\n-<code>string_type do_get(catalog, int, int, const string_type&amp;) const</code>\n-</p>\n-<blockquote>\n-<em>\n--3- Requires: A catalog cat obtained from open() and not yet closed. \n--4- Returns: A message identified by arguments set, msgid, and dfault,\n-according to an implementation-defined mapping. If no such message can\n-be found, returns dfault.\n-</em>\n-</blockquote>\n-\n-<p>\n-<code>void do_close(catalog) const</code>\n-</p>\n-<blockquote>\n-<em>\n--5- Requires: A catalog cat obtained from open() and not yet closed. \n--6- Effects: Releases unspecified resources associated with cat. \n--7- Notes: The limit on such resources, if any, is implementation-defined. \n-</em>\n-</blockquote>\n-\n-\n-<h2>\n-3. Problems with &quot;C&quot; messages: thread safety,\n-over-specification, and assumptions.\n-</h2>\n-A couple of notes on the standard. \n-\n-<p>\n-First, why is <code>messages_base::catalog</code> specified as a typedef\n-to int? This makes sense for implementations that use\n-<code>catopen</code>, but not for others. Fortunately, it's not heavily\n-used and so only a minor irritant. \n-</p>\n-\n-<p>\n-Second, by making the member functions <code>const</code>, it is\n-impossible to save state in them. Thus, storing away information used\n-in the 'open' member function for use in 'get' is impossible. This is\n-unfortunate.\n-</p>\n-\n-<p>\n-The 'open' member function in particular seems to be oddly\n-designed. The signature seems quite peculiar. Why specify a <code>const\n-string&amp; </code> argument, for instance, instead of just <code>const\n-char*</code>? Or, why specify a <code>const locale&amp;</code> argument that is\n-to be used in the 'get' member function? How, exactly, is this locale\n-argument useful? What was the intent? It might make sense if a locale\n-argument was associated with a given default message string in the\n-'open' member function, for instance. Quite murky and unclear, on\n-reflection.\n-</p>\n-\n-<p>\n-Lastly, it seems odd that messages, which explicitly require code\n-conversion, don't use the codecvt facet. Because the messages facet\n-has only one template parameter, it is assumed that ctype, and not\n-codecvt, is to be used to convert between character sets. \n-</p>\n-\n-<p>\n-It is implicitly assumed that the locale for the default message\n-string in 'get' is in the \"C\" locale. Thus, all source code is assumed\n-to be written in English, so translations are always from \"en_US\" to\n-other, explicitly named locales.\n-</p>\n-\n-<h2>\n-4. Design and Implementation Details\n-</h2>\n-This is a relatively simple class, on the face of it. The standard\n-specifies very little in concrete terms, so generic implementations\n-that are conforming yet do very little are the norm. Adding\n-functionality that would be useful to programmers and comparable to\n-Java's java.text.MessageFormat takes a bit of work, and is highly\n-dependent on the capabilities of the underlying operating system.\n-\n-<p>\n-Three different mechanisms have been provided, selectable via\n-configure flags:\n-</p>\n-\n-<ul>\n-   <li> generic\n-   <p>\n-   This model does very little, and is what is used by default.   \n-   </p>\n-   </li>\n-\n-   <li> gnu\n-   <p>\n-   The gnu model is complete and fully tested. It's based on the\n-   GNU gettext package, which is part of glibc. It uses the functions\n-   <code>textdomain, bindtextdomain, gettext</code>\n-   to implement full functionality. Creating message\n-   catalogs is a relatively straight-forward process and is\n-   lightly documented below, and fully documented in gettext's\n-   distributed documentation.\n-   </p>\n-   </li>\n-\n-   <li> ieee_1003.1-200x\n-   <p>\n-   This is a complete, though untested, implementation based on\n-   the IEEE standard. The functions\n-   <code>catopen, catgets, catclose</code>\n-   are used to retrieve locale-specific messages given the\n-   appropriate message catalogs that have been constructed for\n-   their use. Note, the script <code> po2msg.sed</code> that is part\n-   of the gettext distribution can convert gettext catalogs into\n-   catalogs that <code>catopen</code> can use.\n-   </p>\n-   </li>\n-</ul>\n-\n-<p>\n-A new, standards-conformant non-virtual member function signature was\n-added for 'open' so that a directory could be specified with a given\n-message catalog. This simplifies calling conventions for the gnu\n-model.\n-</p>\n-\n-<p>\n-The rest of this document discusses details of the GNU model.\n-</p>\n-\n-<p>\n-The messages facet, because it is retrieving and converting between\n-characters sets, depends on the ctype and perhaps the codecvt facet in\n-a given locale. In addition, underlying \"C\" library locale support is\n-necessary for more than just the <code>LC_MESSAGES</code> mask:\n-<code>LC_CTYPE</code> is also necessary. To avoid any unpleasantness, all\n-bits of the \"C\" mask (ie <code>LC_ALL</code>) are set before retrieving\n-messages.\n-</p>\n-\n-<p>\n-Making the message catalogs can be initially tricky, but become quite\n-simple with practice. For complete info, see the gettext\n-documentation. Here's an idea of what is required:\n-</p>\n-\n-<ul>\n-   <li> Make a source file with the required string literals\n-   that need to be translated. See\n-   <code>intl/string_literals.cc</code> for an example.\n-   </li>\n-\n-   <li> Make initial catalog (see \"4 Making the PO Template File\"\n-   from the gettext docs).\n-   <p>\n-   <code> xgettext --c++ --debug string_literals.cc -o libstdc++.pot </code>\n-   </p>\n-   </li>\n-   \n-   <li> Make language and country-specific locale catalogs.\n-   <p>\n-   <code>cp libstdc++.pot fr_FR.po</code>\n-   </p>\n-   <p>\n-   <code>cp libstdc++.pot de_DE.po</code>\n-   </p>\n-   </li>\n-\n-   <li> Edit localized catalogs in emacs so that strings are\n-   translated.\n-   <p>\n-   <code>emacs fr_FR.po</code>\n-   </p>\n-   </li>\n-   \n-   <li> Make the binary mo files.\n-   <p>\n-   <code>msgfmt fr_FR.po -o fr_FR.mo</code>\n-   </p>\n-   <p>\n-   <code>msgfmt de_DE.po -o de_DE.mo</code>\n-   </p>\n-   </li>\n-\n-   <li> Copy the binary files into the correct directory structure.\n-   <p>\n-   <code>cp fr_FR.mo (dir)/fr_FR/LC_MESSAGES/libstdc++.mo</code>\n-   </p>\n-   <p>\n-   <code>cp de_DE.mo (dir)/de_DE/LC_MESSAGES/libstdc++.mo</code>\n-   </p>\n-   </li>\n-\n-   <li> Use the new message catalogs.\n-   <p>\n-   <code>locale loc_de(\"de_DE\");</code>\n-   </p>\n-   <p>\n-   <code>\n-   use_facet&lt;messages&lt;char&gt; &gt;(loc_de).open(\"libstdc++\", locale(), dir);\n-   </code>\n-   </p>\n-   </li>\n-</ul>\n-\n-<h2>\n-5.  Examples\n-</h2>\n-\n-<ul>\n-   <li> message converting, simple example using the GNU model.\n-\n-<pre>\n-#include &lt;iostream&gt;\n-#include &lt;locale&gt;\n-using namespace std;\n-\n-void test01()\n-{\n-  typedef messages&lt;char&gt;::catalog catalog;\n-  const char* dir =\n-  \"/mnt/egcs/build/i686-pc-linux-gnu/libstdc++/po/share/locale\";  \n-  const locale loc_de(\"de_DE\");\n-  const messages&lt;char&gt;&amp; mssg_de = use_facet&lt;messages&lt;char&gt; &gt;(loc_de); \n-\n-  catalog cat_de = mssg_de.open(\"libstdc++\", loc_de, dir);\n-  string s01 = mssg_de.get(cat_de, 0, 0, \"please\");\n-  string s02 = mssg_de.get(cat_de, 0, 0, \"thank you\");\n-  cout &lt;&lt; \"please in german:\" &lt;&lt; s01 &lt;&lt; '\\n';\n-  cout &lt;&lt; \"thank you in german:\" &lt;&lt; s02 &lt;&lt; '\\n';\n-  mssg_de.close(cat_de);\n-}\n-</pre>\n-   </li>\n-</ul>\n-\n-More information can be found in the following testcases:\n-<ul>\n-<li> testsuite/22_locale/messages.cc              </li>\n-<li> testsuite/22_locale/messages_byname.cc       </li>\n-<li> testsuite/22_locale/messages_char_members.cc </li>\n-</ul>\n-\n-<h2>\n-6.  Unresolved Issues\n-</h2>\n-<ul>\n-<li>  Things that are sketchy, or remain unimplemented:\n-   <ul>\n-      <li>_M_convert_from_char, _M_convert_to_char are in\n-      flux, depending on how the library ends up doing\n-      character set conversions. It might not be possible to\n-      do a real character set based conversion, due to the\n-      fact that the template parameter for messages is not\n-      enough to instantiate the codecvt facet (1 supplied,\n-      need at least 2 but would prefer 3).\n-      </li>\n-\n-      <li> There are issues with gettext needing the global\n-      locale set to extract a message. This dependence on\n-      the global locale makes the current \"gnu\" model non\n-      MT-safe. Future versions of glibc, ie glibc 2.3.x will\n-      fix this, and the C++ library bits are already in\n-      place.\n-      </li>\n-   </ul>\n-</li>\n-\n-<li>  Development versions of the GNU \"C\" library, glibc 2.3 will allow\n-   a more efficient, MT implementation of std::messages, and will\n-   allow the removal of the _M_name_messages data member. If this\n-   is done, it will change the library ABI. The C++ parts to\n-   support glibc 2.3 have already been coded, but are not in use:\n-   once this version of the \"C\" library is released, the marked\n-   parts of the messages implementation can be switched over to\n-   the new \"C\" library functionality. \n-</li>\n-<li>    At some point in the near future, std::numpunct will probably use\n-   std::messages facilities to implement truename/falename\n-   correctly. This is currently not done, but entries in\n-   libstdc++.pot have already been made for \"true\" and \"false\"\n-   string literals, so all that remains is the std::numpunct\n-   coding and the configure/make hassles to make the installed\n-   library search its own catalog. Currently the libstdc++.mo\n-   catalog is only searched for the testsuite cases involving\n-   messages members.\n-</li>\n-\n-<li>  The following member functions:\n-\n-   <p>\n-   <code>\n-        catalog \n-        open(const basic_string&lt;char&gt;&amp; __s, const locale&amp; __loc) const\n-   </code>\n-   </p>\n-\n-   <p>\n-   <code>\n-   catalog \n-   open(const basic_string&lt;char&gt;&amp;, const locale&amp;, const char*) const;\n-   </code>\n-   </p>\n-\n-   <p>\n-   Don't actually return a \"value less than 0 if no such catalog\n-   can be opened\" as required by the standard in the \"gnu\"\n-   model. As of this writing, it is unknown how to query to see\n-   if a specified message catalog exists using the gettext\n-   package.\n-   </p>\n-</li>\n-</ul>\n-\n-<h2>\n-7. Acknowledgments\n-</h2>\n-Ulrich Drepper for the character set explanations, gettext details,\n-and patient answering of late-night questions, Tom Tromey for the java details.\n-\n-\n-<h2>\n-8. Bibliography / Referenced Documents\n-</h2>\n-\n-Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters\n-&quot;7 Locales and Internationalization&quot;\n-\n-<p>\n-Drepper, Ulrich, Thread-Aware Locale Model, A proposal. This is a\n-draft document describing the design of glibc 2.3 MT locale\n-functionality.\n-</p>\n-\n-<p>\n-Drepper, Ulrich, Numerous, late-night email correspondence\n-</p>\n-\n-<p>\n-ISO/IEC 9899:1999 Programming languages - C\n-</p>\n-\n-<p>\n-ISO/IEC 14882:1998 Programming languages - C++\n-</p>\n-\n-<p>\n-Java 2 Platform, Standard Edition, v 1.3.1 API Specification. In\n-particular, java.util.Properties, java.text.MessageFormat,\n-java.util.Locale, java.util.ResourceBundle.\n-http://java.sun.com/j2se/1.3/docs/api\n-</p>\n-\n-<p>\n-System Interface Definitions, Issue 7 (IEEE Std. 1003.1-200x)\n-The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n-In particular see lines 5268-5427.\n-http://www.opennc.org/austin/docreg.html\n-</p>\n-\n-<p> GNU gettext tools, version 0.10.38, Native Language Support\n-Library and Tools. \n-http://sources.redhat.com/gettext\n-</p>\n-\n-<p>\n-Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales,\n-Advanced Programmer's Guide and Reference, Addison Wesley Longman,\n-Inc. 2000. See page 725, Internationalized Messages.\n-</p>\n-\n-<p>\n-Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n-</p>\n-\n-</body>\n-</html>\n-"}, {"sha": "c4b6eb856f5827bd8c04256a69c50bdf26ac28ba", "filename": "libstdc++-v3/doc/html/23_containers/howto.html", "status": "removed", "additions": 0, "deletions": 457, "changes": 457, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F23_containers%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F23_containers%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F23_containers%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,457 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 23.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ HOWTO:  Chapter 23: Containers</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Prev\" href=\"../22_locale/howto.html\" type=\"text/html\"\n-  title=\"Localization\" />\n-<link rel=\"Next\" href=\"../24_iterators/howto.html\" type=\"text/html\"\n-  title=\"Iterators\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Chapter 23:  Containers</a></h1>\n-\n-<p>Chapter 23 deals with container classes and what they offer.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h1>Contents</h1>\n-<ul>\n-   <li><a href=\"#1\">Making code unaware of the container/array difference</a></li>\n-   <li><a href=\"#2\">Variable-sized bitmasks</a></li>\n-   <li><a href=\"#3\">Containers and multithreading</a></li>\n-   <li><a href=\"#4\">&quot;Hinting&quot; during insertion</a></li>\n-   <li><a href=\"#5\">Bitmasks and string arguments</a></li>\n-   <li><a href=\"#6\"><code>std::list::size()</code> is O(n)!</a></li>\n-   <li><a href=\"#7\">Space overhead management for vectors</a></li>\n-</ul>\n-\n-<hr />\n-\n-<!-- ####################################################### -->\n-\n-<h2><a name=\"1\">Making code unaware of the container/array difference</a></h2>\n-   <p>You're writing some code and can't decide whether to use builtin\n-      arrays or some kind of container.  There are compelling reasons \n-      to use one of the container classes, but you're afraid that you'll\n-      eventually run into difficulties, change everything back to arrays,\n-      and then have to change all the code that uses those data types to\n-      keep up with the change.\n-   </p>\n-   <p>If your code makes use of the standard algorithms, this isn't as\n-      scary as it sounds.  The algorithms don't know, nor care, about\n-      the kind of &quot;container&quot; on which they work, since the\n-      algorithms are only given endpoints to work with.  For the container\n-      classes, these are iterators (usually <code>begin()</code> and\n-      <code>end()</code>, but not always).  For builtin arrays, these are\n-      the address of the first element and the\n-      <a href=\"../24_iterators/howto.html#2\">past-the-end</a> element.\n-   </p>\n-   <p>Some very simple wrapper functions can hide all of that from the\n-      rest of the code.  For example, a pair of functions called\n-      <code>beginof</code> can be written, one that takes an array, another\n-      that takes a vector.  The first returns a pointer to the first\n-      element, and the second returns the vector's <code>begin()</code>\n-      iterator.\n-   </p>\n-   <p>The functions should be made template functions, and should also \n-      be declared inline.  As pointed out in the comments in the code \n-      below, this can lead to <code>beginof</code> being optimized out of\n-      existence, so you pay absolutely nothing in terms of increased\n-      code size or execution time.\n-   </p>\n-   <p>The result is that if all your algorithm calls look like\n-   </p>\n-   <pre>\n-   std::transform(beginof(foo), endof(foo), beginof(foo), SomeFunction);</pre>\n-   <p>then the type of foo can change from an array of ints to a vector\n-      of ints to a deque of ints and back again, without ever changing any\n-      client code.\n-   </p>\n-   <p>This author has a collection of such functions, called &quot;*of&quot;\n-      because they all extend the builtin &quot;sizeof&quot;.  It started\n-      with some Usenet discussions on a transparent way to find the length\n-      of an array.  A simplified and much-reduced version for easier\n-      reading is <a href=\"wrappers_h.txt\">given here</a>.\n-   </p>\n-   <p>Astute readers will notice two things at once:  first, that the\n-      container class is still a <code>vector&lt;T&gt;</code> instead of a\n-      more general <code>Container&lt;T&gt;</code>.  This would mean that\n-      three functions for <code>deque</code> would have to be added, another\n-      three for <code>list</code>, and so on.  This is due to problems with\n-      getting template resolution correct; I find it easier just to \n-      give the extra three lines and avoid confusion.\n-   </p>\n-   <p>Second, the line\n-   </p>\n-   <pre>\n-    inline unsigned int lengthof (T (&amp;)[sz]) { return sz; } </pre>\n-   <p>looks just weird!  Hint:  unused parameters can be left nameless.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"2\">Variable-sized bitmasks</a></h2>\n-   <p>No, you cannot write code of the form\n-   </p>\n-      <!-- Careful, the leading spaces in PRE show up directly. -->\n-   <pre>\n-      #include &lt;bitset&gt;\n-\n-      void foo (size_t n)\n-      {\n-          std::bitset&lt;n&gt;   bits;\n-          ....\n-      } </pre>\n-   <p>because <code>n</code> must be known at compile time.  Your compiler is\n-      correct; it is not a bug.  That's the way templates work.  (Yes, it\n-      <em>is</em> a feature.)\n-   </p>\n-   <p>There are a couple of ways to handle this kind of thing.  Please\n-      consider all of them before passing judgement.  They include, in\n-      no particular order:\n-   </p>\n-      <ul>\n-        <li>A very large N in <code>bitset&lt;N&gt;</code>.</li>\n-        <li>A container&lt;bool&gt;.</li>\n-        <li>Extremely weird solutions.</li>\n-      </ul>\n-   <p><strong>A very large N in\n-      <code>bitset&lt;N&gt;</code>.&nbsp;&nbsp;</strong>  It has\n-      been pointed out a few times in newsgroups that N bits only takes up\n-      (N/8) bytes on most systems, and division by a factor of eight is pretty\n-      impressive when speaking of memory.  Half a megabyte given over to a\n-      bitset (recall that there is zero space overhead for housekeeping info;\n-      it is known at compile time exactly how large the set is) will hold over\n-      four million bits.  If you're using those bits as status flags (e.g.,\n-      &quot;changed&quot;/&quot;unchanged&quot; flags), that's a <em>lot</em>\n-      of state.\n-   </p>\n-   <p>You can then keep track of the &quot;maximum bit used&quot; during some\n-      testing runs on representative data, make note of how many of those bits\n-      really need to be there, and then reduce N to a smaller number.  Leave\n-      some extra space, of course.  (If you plan to write code like the \n-      incorrect example above, where the bitset is a local variable, then you\n-      may have to talk your compiler into allowing that much stack space;\n-      there may be zero space overhead, but it's all allocated inside the\n-      object.)\n-   </p>\n-   <p><strong>A container&lt;bool&gt;.&nbsp;&nbsp;</strong>  The Committee\n-      made provision\n-      for the space savings possible with that (N/8) usage previously mentioned,\n-      so that you don't have to do wasteful things like\n-      <code>Container&lt;char&gt;</code> or\n-      <code>Container&lt;short int&gt;</code>.\n-      Specifically, <code>vector&lt;bool&gt;</code> is required to be\n-      specialized for that space savings.\n-   </p>\n-   <p>The problem is that <code>vector&lt;bool&gt;</code> doesn't behave like a\n-      normal vector anymore.  There have been recent journal articles which\n-      discuss the problems (the ones by Herb Sutter in the May and\n-      July/August 1999 issues of\n-      <u>C++ Report</u> cover it well).  Future revisions of the ISO C++\n-      Standard will change the requirement for <code>vector&lt;bool&gt;</code>\n-      specialization.  In the meantime, <code>deque&lt;bool&gt;</code> is\n-      recommended (although its behavior is sane, you probably will not get\n-      the space savings, but the allocation scheme is different than that\n-      of vector).\n-   </p>\n-   <p><strong>Extremely weird solutions.&nbsp;&nbsp;</strong>  If you have\n-      access to\n-      the compiler and linker at runtime, you can do something insane, like\n-      figuring out just how many bits you need, then writing a temporary \n-      source code file.  That file contains an instantiation of\n-      <code>bitset</code>\n-      for the required number of bits, inside some wrapper functions with\n-      unchanging signatures.  Have your program then call the\n-      compiler on that file using Position Independent Code, then open the\n-      newly-created object file and load those wrapper functions.  You'll have\n-      an instantiation of <code>bitset&lt;N&gt;</code> for the exact\n-      <code>N</code>\n-      that you need at the time.  Don't forget to delete the temporary files.\n-      (Yes, this <em>can</em> be, and <em>has been</em>, done.)\n-   </p>\n-   <!-- I wonder if this next paragraph will get me in trouble... -->\n-   <p>This would be the approach of either a visionary genius or a raving\n-      lunatic, depending on your programming and management style.  Probably\n-      the latter.\n-   </p>\n-   <p>Which of the above techniques you use, if any, are up to you and your\n-      intended application.  Some time/space profiling is indicated if it\n-      really matters (don't just guess).  And, if you manage to do anything\n-      along the lines of the third category, the author would love to hear\n-      from you...\n-   </p>\n-   <p>Also note that the implementation of bitset used in libstdc++ has\n-      <a href=\"../ext/sgiexts.html#ch23\">some extensions</a>.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"3\">Containers and multithreading</a></h2>\n-   <p>This section discusses issues surrounding the design of\n-      multithreaded applications which use Standard C++ containers.\n-      All information in this section is current as of the gcc 3.0\n-      release and all later point releases.  Although earlier gcc\n-      releases had a different approach to threading configuration and\n-      proper compilation, the basic code design rules presented here\n-      were similar.  For information on all other aspects of\n-      multithreading as it relates to libstdc++, including details on\n-      the proper compilation of threaded code (and compatibility between\n-      threaded and non-threaded code), see Chapter 17.\n-   </p>\n-   <p>Two excellent pages to read when working with the Standard C++\n-      containers and threads are\n-      <a href=\"http://www.sgi.com/tech/stl/thread_safety.html\">SGI's\n-      http://www.sgi.com/tech/stl/thread_safety.html</a> and\n-      <a href=\"http://www.sgi.com/tech/stl/Allocators.html\">SGI's\n-      http://www.sgi.com/tech/stl/Allocators.html</a>.\n-   </p>\n-   <p><em>However, please ignore all discussions about the user-level\n-      configuration of the lock implementation inside the STL\n-      container-memory allocator on those pages.  For the sake of this\n-      discussion, libstdc++ configures the SGI STL implementation,\n-      not you.  This is quite different from how gcc pre-3.0 worked.\n-      In particular, past advice was for people using g++ to\n-      explicitly define _PTHREADS or other macros or port-specific\n-      compilation options on the command line to get a thread-safe\n-      STL.  This is no longer required for any port and should no\n-      longer be done unless you really know what you are doing and\n-      assume all responsibility.</em>\n-   </p>\n-   <p>Since the container implementation of libstdc++ uses the SGI\n-      code, we use the same definition of thread safety as SGI when\n-      discussing design.  A key point that beginners may miss is the\n-      fourth major paragraph of the first page mentioned above\n-      (&quot;For most clients,&quot;...), which points out that\n-      locking must nearly always be done outside the container, by\n-      client code (that'd be you, not us).  There is a notable\n-      exceptions to this rule.  Allocators called while a container or\n-      element is constructed uses an internal lock obtained and\n-      released solely within libstdc++ code (in fact, this is the\n-      reason STL requires any knowledge of the thread configuration).\n-   </p>\n-   <p>For implementing a container which does its own locking, it is\n-      trivial to provide a wrapper class which obtains the lock (as\n-      SGI suggests), performs the container operation, and then\n-      releases the lock.  This could be templatized <em>to a certain\n-      extent</em>, on the underlying container and/or a locking\n-      mechanism.  Trying to provide a catch-all general template\n-      solution would probably be more trouble than it's worth.\n-   </p>\n-   <p>The STL implementation is currently configured to use the\n-      high-speed caching memory allocator.  Some people like to\n-      test and/or normally run threaded programs with a different\n-      default.  For all details about how to globally override this\n-      at application run-time see <a href=\"../ext/howto.html#3\">here</a>.\n-   </p> \n-   <p>There is a better way (not standardized yet):  It is possible to\n-      force the malloc-based allocator on a per-case-basis for some\n-      application code.  The library team generally believes that this\n-      is a better way to tune an application for high-speed using this\n-      implementation of the STL.  There is\n-      <a href=\"../ext/howto.html#3\">more information on allocators here</a>.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"4\">&quot;Hinting&quot; during insertion</a></h2>\n-   <p>Section [23.1.2], Table 69, of the C++ standard lists this function\n-      for all of the associative containers (map, set, etc):\n-   </p>\n-   <pre>\n-      a.insert(p,t);</pre>\n-   <p>where 'p' is an iterator into the container 'a', and 't' is the item\n-      to insert.  The standard says that &quot;<code>t</code> is inserted\n-      as close as possible to the position just prior to\n-      <code>p</code>.&quot; (Library DR #233 addresses this topic, referring to\n-      <a href='http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1780.html'>N1780</a>.\n-      Since version 4.2 GCC implements the resolution to DR 233, so that\n-      insertions happen as close as possible to the hint. For earlier releases\n-      the hint was only used as described below.\n-   </p>\n-   <p>Here we'll describe how the hinting works in the libstdc++\n-      implementation, and what you need to do in order to take advantage of\n-      it.  (Insertions can change from logarithmic complexity to amortized\n-      constant time, if the hint is properly used.)  Also, since the current\n-      implementation is based on the SGI STL one, these points may hold true\n-      for other library implementations also, since the HP/SGI code is used\n-      in a lot of places.\n-   </p>\n-   <p>In the following text, the phrases <em>greater than</em> and <em>less\n-      than</em> refer to the results of the strict weak ordering imposed on\n-      the container by its comparison object, which defaults to (basically)\n-      &quot;&lt;&quot;.  Using those phrases is semantically sloppy, but I\n-      didn't want to get bogged down in syntax.  I assume that if you are\n-      intelligent enough to use your own comparison objects, you are also\n-      intelligent enough to assign &quot;greater&quot; and &quot;lesser&quot;\n-      their new meanings in the next paragraph.  *grin*\n-   </p>\n-   <p>If the <code>hint</code> parameter ('p' above) is equivalent to:\n-   </p>\n-     <ul>\n-      <li><code>begin()</code>, then the item being inserted should have a key\n-          less than all the other keys in the container.  The item will\n-          be inserted at the beginning of the container, becoming the new\n-          entry at <code>begin()</code>.\n-      </li>\n-      <li><code>end()</code>, then the item being inserted should have a key\n-          greater than all the other keys in the container.  The item will\n-          be inserted at the end of the container, becoming the new entry\n-          at <code>end()</code>.\n-      </li>\n-      <li>neither <code>begin()</code> nor <code>end()</code>, then:  Let <code>h</code>\n-          be the entry in the container pointed to by <code>hint</code>, that\n-          is, <code>h = *hint</code>.  Then the item being inserted should have\n-          a key less than that of <code>h</code>, and greater than that of the\n-          item preceding <code>h</code>.  The new item will be inserted\n-          between <code>h</code> and <code>h</code>'s predecessor.\n-      </li>\n-     </ul>\n-   <p>For <code>multimap</code> and <code>multiset</code>, the restrictions are\n-      slightly looser:  &quot;greater than&quot; should be replaced by\n-      &quot;not less than&quot; and &quot;less than&quot; should be replaced\n-      by &quot;not greater than.&quot;  (Why not replace greater with\n-      greater-than-or-equal-to?  You probably could in your head, but the\n-      mathematicians will tell you that it isn't the same thing.)\n-   </p>\n-   <p>If the conditions are not met, then the hint is not used, and the\n-      insertion proceeds as if you had called <code> a.insert(t) </code>\n-      instead.  (<strong>Note </strong> that GCC releases prior to 3.0.2\n-      had a bug in the case with <code>hint == begin()</code> for the\n-      <code>map</code> and <code>set</code> classes.  You should not use a hint\n-      argument in those releases.)\n-   </p>\n-   <p>This behavior goes well with other containers' <code>insert()</code>\n-      functions which take an iterator:  if used, the new item will be\n-      inserted before the iterator passed as an argument, same as the other\n-      containers. \n-   </p>\n-   <p><strong>Note </strong> also that the hint in this implementation is a\n-      one-shot.  The older insertion-with-hint routines check the immediately\n-      surrounding entries to ensure that the new item would in fact belong\n-      there.  If the hint does not point to the correct place, then no\n-      further local searching is done; the search begins from scratch in\n-      logarithmic time.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"5\">Bitmasks and string arguments</a></h2>\n-   <p>Bitmasks do not take char* nor const char* arguments in their\n-      constructors.  This is something of an accident, but you can read\n-      about the problem:  follow the library's &quot;Links&quot; from the\n-      homepage, and from the C++ information &quot;defect reflector&quot;\n-      link, select the library issues list.  Issue number 116 describes the\n-      problem.\n-   </p>\n-   <p>For now you can simply make a temporary string object using the\n-      constructor expression:\n-   </p>\n-      <pre>\n-      std::bitset&lt;5&gt; b ( std::string(&quot;10110&quot;) );\n-      </pre>\n-      instead of\n-      <pre>\n-      std::bitset&lt;5&gt; b ( &quot;10110&quot; );    // invalid\n-      </pre>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"6\"><code>std::list::size()</code> is O(n)!</a></h2>\n-   <p>Yes it is, and that's okay.  This is a decision that we preserved when\n-      we imported SGI's STL implementation.  The following is quoted from\n-      <a href=\"http://www.sgi.com/tech/stl/FAQ.html\">their FAQ</a>:\n-   </p>\n-   <blockquote>\n-      <p>The size() member function, for list and slist, takes time\n-      proportional to the number of elements in the list.  This was a\n-      deliberate tradeoff.  The only way to get a constant-time size() for\n-      linked lists would be to maintain an extra member variable containing\n-      the list's size.  This would require taking extra time to update that\n-      variable (it would make splice() a linear time operation, for example),\n-      and it would also make the list larger.  Many list algorithms don't\n-      require that extra word (algorithms that do require it might do better\n-      with vectors than with lists), and, when it is necessary to maintain\n-      an explicit size count, it's something that users can do themselves.\n-      </p>\n-      <p>This choice is permitted by the C++ standard. The standard says that\n-      size() &quot;should&quot; be constant time, and &quot;should&quot;\n-      does not mean the same thing as &quot;shall&quot;.  This is the\n-      officially recommended ISO wording for saying that an implementation\n-      is supposed to do something unless there is a good reason not to.\n-      </p>\n-      <p>One implication of linear time size(): you should never write\n-      </p>\n-         <pre>\n-         if (L.size() == 0)\n-             ...</pre>\n-         Instead, you should write\n-         <pre>\n-         if (L.empty())\n-             ...</pre>\n-   </blockquote>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"7\">Space overhead management for vectors</a></h2>\n-   <p>In\n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-04/msg00105.html\">this\n-      message to the list</a>, Daniel Kostecky announced work on an\n-      alternate form of <code>std::vector</code> that would support hints\n-      on the number of elements to be over-allocated.  The design was also\n-      described, along with possible implementation choices.\n-   </p>\n-   <p>The first two alpha releases were announced\n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-07/msg00048.html\">here</a>\n-      and\n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-07/msg00111.html\">here</a>.\n-      The releases themselves are available at\n-      <a href=\"http://www.kotelna.sk/dk/sw/caphint/\">\n-      http://www.kotelna.sk/dk/sw/caphint/</a>.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "53b59204220d98726dc7d4b5c9f6ce623ea88388", "filename": "libstdc++-v3/doc/html/23_containers/wrappers_h.txt", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F23_containers%2Fwrappers_h.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F23_containers%2Fwrappers_h.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F23_containers%2Fwrappers_h.txt?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,48 +0,0 @@\n-\n-/*****************************************************************\n- * Functions to help treat arrays in a uniform manner.  These were\n- * inspired by a thread on comp.lang.c++.moderated, started by Dietmar\n- * Kuehl and contributed to by the rest of the entire planet.\n- *\n- * beginof (x), endof (x), lengthof (x) now accompany sizeof, where x\n- * can be either a container (currently only sequences) or a builtin\n- * array (/not/ a pointer).  The beginof/endof are intended for use in\n- * the algorithms library, and lengthof is a \"sizing\" function.\n- *\n- * Note example:\n- *       char  an_array [17];\n- *       cerr << lengthof(an_array) << endl;\n- * produces assembly code of\n- *       mov 17,register0\n- *       call ofstream_put\n- * i.e., the template function inlining really does work; g++\n- * requires -O3 (or -finline-functions) before it does this, though.\n- *\n- * pedwards 13Nov98\n-*/\n-// beginof\n-template <class T>\n-  inline typename vector<T>::iterator beginof (vector<T> &v)\n-  { return v.begin(); }\n-\n-template <class T, unsigned int sz>\n-  inline T* beginof (T (&array)[sz]) { return array; }\n-\n-\n-// endof\n-template <class T>\n-  inline typename vector<T>::iterator endof (vector<T> &v)\n-  { return v.end(); }\n-\n-template <class T, unsigned int sz>\n-  inline T* endof (T (&array)[sz]) { return array + sz; }\n-\n-\n-// lengthof\n-template <class T>\n-  inline typename vector<T>::size_type lengthof (vector<T> &v)\n-  { return v.size(); }\n-\n-template <class T, unsigned int sz>\n-  inline unsigned int lengthof (T (&)[sz]) { return sz; }\n-"}, {"sha": "7c2f106ac31de153d687efd00c376d1676a89079", "filename": "libstdc++-v3/doc/html/24_iterators/howto.html", "status": "removed", "additions": 0, "deletions": 200, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F24_iterators%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F24_iterators%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F24_iterators%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,200 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 24.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ HOWTO:  Chapter 24: Iterators</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Prev\" href=\"../23_containers/howto.html\" type=\"text/html\"\n-  title=\"Containers\" />\n-<link rel=\"Next\" href=\"../25_algorithms/howto.html\" type=\"text/html\"\n-  title=\"Algorithms\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Chapter 24:  Iterators</a></h1>\n-\n-<p>Chapter 24 deals with the FORTRAN subroutines for automatically\n-   transforming lemmings into gold.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h1>Contents</h1>\n-<ul>\n-   <li><a href=\"#1\">They ain't pointers!</a></li>\n-   <li><a href=\"#2\">It ends <em>where?</em></a></li>\n-</ul>\n-\n-<hr />\n-\n-<!-- ####################################################### -->\n-\n-<h2><a name=\"1\">They ain't pointers!</a></h2>\n-   <p><a href=\"../faq/index.html#5_1\">FAQ 5.1</a> points out that iterators\n-      are not implemented as pointers.  They are a generalization of\n-      pointers, but they are implemented in libstdc++ as separate classes.\n-   </p>\n-   <p>Keeping that simple fact in mind as you design your code will\n-      prevent a whole lot of difficult-to-understand bugs.\n-   </p>\n-   <p>You can think of it the other way 'round, even.  Since iterators\n-      are a generalization, that means that <em>pointers</em> are\n-      <em>iterators</em>, and that pointers can be used whenever an\n-      iterator would be.  All those functions in the Algorithms chapter\n-      of the Standard will work just as well on plain arrays and their\n-      pointers.\n-   </p>\n-   <p>That doesn't mean that when you pass in a pointer, it gets wrapped\n-      into some special delegating iterator-to-pointer class with a layer\n-      of overhead.  (If you think that's the case anywhere, you don't\n-      understand templates to begin with...)  Oh, no; if you pass\n-      in a pointer, then the compiler will instantiate that template\n-      using T* as a type, and good old high-speed pointer arithmetic as\n-      its operations, so the resulting code will be doing exactly the same\n-      things as it would be doing if you had hand-coded it yourself (for\n-      the 273rd time).\n-   </p>\n-   <p>How much overhead <em>is</em> there when using an iterator class?\n-      Very little.  Most of the layering classes contain nothing but\n-      typedefs, and typedefs are &quot;meta-information&quot; that simply\n-      tell the compiler some nicknames; they don't create code.  That\n-      information gets passed down through inheritance, so while the\n-      compiler has to do work looking up all the names, your runtime code\n-      does not.  (This has been a prime concern from the beginning.)\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"2\">It ends <em>where?</em></a></h2>\n-   <p>This starts off sounding complicated, but is actually very easy,\n-      especially towards the end.  Trust me.\n-   </p>\n-   <p>Beginners usually have a little trouble understand the whole\n-      'past-the-end' thing, until they remember their early algebra classes\n-      (see, they <em>told</em> you that stuff would come in handy!) and\n-      the concept of half-open ranges.\n-   </p>\n-   <p>First, some history, and a reminder of some of the funkier rules in\n-      C and C++ for builtin arrays.  The following rules have always been\n-      true for both languages:\n-   </p>\n-   <ol>\n-      <li>You can point anywhere in the array, <em>or to the first element\n-          past the end of the array</em>.  A pointer that points to one\n-          past the end of the array is guaranteed to be as unique as a\n-          pointer to somewhere inside the array, so that you can compare\n-          such pointers safely.\n-      </li>\n-      <li>You can only dereference a pointer that points into an array.\n-          If your array pointer points outside the array -- even to just\n-          one past the end -- and you dereference it, Bad Things happen.\n-      </li>\n-      <li>Strictly speaking, simply pointing anywhere else invokes\n-          undefined behavior.  Most programs won't puke until such a\n-          pointer is actually dereferenced, but the standards leave that\n-          up to the platform.\n-      </li>\n-   </ol>\n-   <p>The reason this past-the-end addressing was allowed is to make it\n-      easy to write a loop to go over an entire array, e.g.,\n-      while (*d++ = *s++);.\n-   </p>\n-   <p>So, when you think of two pointers delimiting an array, don't think\n-      of them as indexing 0 through n-1.  Think of them as <em>boundary\n-      markers</em>:\n-   </p>\n-   <pre>\n-\n-   beginning            end\n-     |                   |\n-     |                   |               This is bad.  Always having to\n-     |                   |               remember to add or subtract one.\n-     |                   |               Off-by-one bugs very common here.\n-     V                   V\n-        array of N elements\n-     |---|---|--...--|---|---|\n-     | 0 | 1 |  ...  |N-2|N-1|\n-     |---|---|--...--|---|---|\n-\n-     ^                       ^\n-     |                       |\n-     |                       |           This is good.  This is safe.  This\n-     |                       |           is guaranteed to work.  Just don't\n-     |                       |           dereference 'end'.\n-   beginning                end\n-\n-   </pre>\n-   <p>See?  Everything between the boundary markers is part of the array.\n-      Simple.\n-   </p>\n-   <p>Now think back to your junior-high school algebra course, when you\n-      were learning how to draw graphs.  Remember that a graph terminating\n-      with a solid dot meant, &quot;Everything up through this point,&quot;\n-      and a graph terminating with an open dot meant, &quot;Everything up\n-      to, but not including, this point,&quot; respectively called closed\n-      and open ranges?  Remember how closed ranges were written with\n-      brackets, <em>[a,b]</em>, and open ranges were written with parentheses,\n-      <em>(a,b)</em>?\n-   </p>\n-   <p>The boundary markers for arrays describe a <em>half-open range</em>,\n-      starting with (and including) the first element, and ending with (but\n-      not including) the last element:  <em>[beginning,end)</em>.  See, I\n-      told you it would be simple in the end.\n-   </p>\n-   <p>Iterators, and everything working with iterators, follows this same\n-      time-honored tradition.  A container's <code>begin()</code> method returns\n-      an iterator referring to the first element, and its <code>end()</code>\n-      method returns a past-the-end iterator, which is guaranteed to be\n-      unique and comparable against any other iterator pointing into the\n-      middle of the container.\n-   </p>\n-   <p>Container constructors, container methods, and algorithms, all take\n-      pairs of iterators describing a range of values on which to operate.\n-      All of these ranges are half-open ranges, so you pass the beginning\n-      iterator as the starting parameter, and the one-past-the-end iterator\n-      as the finishing parameter.\n-   </p>\n-   <p>This generalizes very well.  You can operate on sub-ranges quite\n-      easily this way; functions accepting a <em>[first,last)</em> range\n-      don't know or care whether they are the boundaries of an entire {array,\n-      sequence, container, whatever}, or whether they only enclose a few\n-      elements from the center.  This approach also makes zero-length\n-      sequences very simple to recognize:  if the two endpoints compare\n-      equal, then the {array, sequence, container, whatever} is empty.\n-   </p>\n-   <p>Just don't dereference <code>end()</code>.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "bb5caee354ab4f21b7868c66ae3a2e87378d075f", "filename": "libstdc++-v3/doc/html/25_algorithms/howto.html", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F25_algorithms%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F25_algorithms%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F25_algorithms%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,116 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 25.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ HOWTO:  Chapter 25: Algorithms</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Prev\" href=\"../24_iterators/howto.html\" type=\"text/html\"\n-  title=\"Iterators\" />\n-<link rel=\"Next\" href=\"../26_numerics/howto.html\" type=\"text/html\"\n-  title=\"Numerics\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Chapter 25:  Algorithms</a></h1>\n-\n-<p>Chapter 25 deals with the generalized subroutines for automatically\n-   transforming lemmings into gold.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h1>Contents</h1>\n-<ul>\n-   <li><a href=\"#1\">Prerequisites</a></li>\n-   <li><a href=\"#2\">Special <code>swap</code>s</a></li>\n-</ul>\n-\n-<hr />\n-\n-<!-- ####################################################### -->\n-\n-<h2><a name=\"1\">Prerequisites</a></h2>\n-   <p>The neatest accomplishment of the algorithms chapter is that all the\n-      work is done via iterators, not containers directly.  This means two\n-      important things:\n-   </p>\n-   <ol>\n-      <li>Anything that behaves like an iterator can be used in one of\n-          these algorithms.  Raw pointers make great candidates, thus\n-          built-in arrays are fine containers, as well as your own iterators.\n-      </li>\n-      <li>The algorithms do not (and cannot) affect the container as a\n-          whole; only the things between the two iterator endpoints.  If\n-          you pass a range of iterators only enclosing the middle third of\n-          a container, then anything outside that range is inviolate.\n-      </li>\n-   </ol>\n-   <p>Even strings can be fed through the algorithms here, although the\n-      string class has specialized versions of many of these functions (for\n-      example, <code>string::find()</code>).  Most of the examples on this\n-      page will use simple arrays of integers as a playground for\n-      algorithms, just to keep things simple.\n-      <a name=\"Nsize\">The use of <strong>N</strong></a> as a size in the\n-      examples is to keep things easy to read but probably won't be valid\n-      code.  You can use wrappers such as those described in the\n-      <a href=\"../23_containers/howto.html\">containers chapter</a> to keep\n-      real code readable.\n-   </p>\n-   <p>The single thing that trips people up the most is the definition of \n-      <em>range</em> used with iterators; the famous\n-      &quot;past-the-end&quot; rule that everybody loves to hate.  The\n-      <a href=\"../24_iterators/howto.html#2\">iterators chapter</a> of this\n-      document has a complete explanation of this simple rule that seems to\n-      cause so much confusion.  Once you get <em>range</em> into your head\n-      (it's not that hard, honest!), then the algorithms are a cakewalk.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"2\">Special <code>swap</code>s</a></h2>\n-   <p>If you call <code> std::swap(x,y); </code> where x and y are standard\n-      containers, then the call will automatically be replaced by a call to\n-      <code> x.swap(y); </code> instead.\n-   </p>\n-   <p>This allows member functions of each container class to take over, and\n-      containers' swap functions should have O(1) complexity according to\n-      the standard.  (And while &quot;should&quot; allows implementations to\n-      behave otherwise and remain compliant, this implementation does in\n-      fact use constant-time swaps.)  This should not be surprising, since\n-      for two containers of the same type to swap contents, only some\n-      internal pointers to storage need to be exchanged.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "e56659b3804364ff3c1405d772e727f9db11fabe", "filename": "libstdc++-v3/doc/html/26_numerics/howto.html", "status": "removed", "additions": 0, "deletions": 179, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F26_numerics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F26_numerics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F26_numerics%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,179 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 26.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ HOWTO:  Chapter 26: Numerics</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Prev\" href=\"../25_algorithms/howto.html\" type=\"text/html\"\n-  title=\"Algorithms\" />\n-<link rel=\"Next\" href=\"../27_io/howto.html\" type=\"text/html\"\n-  title=\"Input/Output\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Chapter 26:  Numerics</a></h1>\n-\n-<p>Chapter 26 deals with building block abstractions to aid in\n-   numerical computing:\n-</p>\n-<ul>\n-   <li>Template data structures such as <code>valarray&lt;&gt;</code>\n-       and <code>complex&lt;&gt;</code>.\n-   </li>\n-   <li>Template numerical functions such as <code>accumulate</code>,\n-       <code>inner_product</code>, <code>partial_sum</code>, and\n-       <code>adjacent_difference</code>.\n-   </li>\n-</ul>\n-<p>All of the Standard C math functions are of course included in C++,\n-   and overloaded versions for <code>long</code>, <code>float</code>, and\n-   <code>long double</code> have been added for all of them.\n-</p>\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h1>Contents</h1>\n-<ul>\n-   <li><a href=\"#1\">Complex Number Processing</a></li>\n-   <li><a href=\"#2\">Array Processing</a></li>\n-   <li><a href=\"#3\">Numerical Functions</a></li>\n-   <li><a href=\"#4\">C99</a></li>\n-</ul>\n-\n-<hr />\n-\n-<!-- ####################################################### -->\n-\n-<h2><a name=\"1\">Complex Number Processing</a></h2>\n-   <p>Using <code>complex&lt;&gt;</code> becomes even more comple- er, sorry,\n-      <em>complicated</em>, with the not-quite-gratuitously-incompatible\n-      addition of complex types to the C language.  David Tribble has\n-      compiled a list of C++98 and C99 conflict points; his description of\n-      C's new type versus those of C++ and how to get them playing together\n-      nicely is\n-<a href=\"http://david.tribble.com/text/cdiffs.htm#C99-complex\">here</a>.\n-   </p>\n-   <p><code>complex&lt;&gt;</code> is intended to be instantiated with a\n-      floating-point type.  As long as you meet that and some other basic\n-      requirements, then the resulting instantiation has all of the usual\n-      math operators defined, as well as definitions of <code>op&lt;&lt;</code>\n-      and <code>op&gt;&gt;</code> that work with iostreams: <code>op&lt;&lt;</code>\n-      prints <code>(u,v)</code> and <code>op&gt;&gt;</code> can read <code>u</code>,\n-      <code>(u)</code>, and <code>(u,v)</code>.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"2\">Array Processing</a></h2>\n-   <p>One of the major reasons why FORTRAN can chew through numbers so well\n-      is that it is defined to be free of pointer aliasing, an assumption\n-      that C89 is not allowed to make, and neither is C++98.  C99 adds a new\n-      keyword, <code>restrict</code>, to apply to individual pointers.  The\n-      C++ solution is contained in the library rather than the language\n-      (although many vendors can be expected to add this to their compilers\n-      as an extension).\n-   </p>\n-   <p>That library solution is a set of two classes, five template classes,\n-      and &quot;a whole bunch&quot; of functions.  The classes are required\n-      to be free of pointer aliasing, so compilers can optimize the\n-      daylights out of them the same way that they have been for FORTRAN.\n-      They are collectively called <code>valarray</code>, although strictly\n-      speaking this is only one of the five template classes, and they are\n-      designed to be familiar to people who have worked with the BLAS\n-      libraries before.\n-   </p>\n-   <p>Some more stuff should go here once somebody has time to write it.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"3\">Numerical Functions</a></h2>\n-   <p>There are four generalized functions in the &lt;numeric&gt; header\n-      that follow the same conventions as those in &lt;algorithm&gt;.  Each\n-      of them is overloaded:  one signature for common default operations,\n-      and a second for fully general operations.  Their names are\n-      self-explanatory to anyone who works with numerics on a regular basis:\n-   </p>\n-   <ul>\n-      <li><code>accumulate</code></li>\n-      <li><code>inner_product</code></li>\n-      <li><code>partial_sum</code></li>\n-      <li><code>adjacent_difference</code></li>\n-   </ul>\n-   <p>Here is a simple example of the two forms of <code>accumulate</code>.\n-   </p>\n-   <pre>\n-   int   ar[50];\n-   int   someval = somefunction();\n-\n-   // ...initialize members of ar to something...\n-\n-   int  sum       = std::accumulate(ar,ar+50,0);\n-   int  sum_stuff = std::accumulate(ar,ar+50,someval);\n-   int  product   = std::accumulate(ar,ar+50,1,std::multiplies&lt;int&gt;());\n-   </pre>\n-   <p>The first call adds all the members of the array, using zero as an\n-      initial value for <code>sum</code>.  The second does the same, but uses\n-      <code>someval</code> as the starting value (thus, <code>sum_stuff == sum +\n-      someval</code>).  The final call uses the second of the two signatures,\n-      and multiplies all the members of the array; here we must obviously\n-      use 1 as a starting value instead of 0.\n-   </p>\n-   <p>The other three functions have similar dual-signature forms.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"4\">C99</a></h2>\n-   <p>In addition to the other topics on this page, we'll note here some\n-      of the C99 features that appear in libstdc++.\n-   </p>\n-   <p>The C99 features depend on the <code>--enable-c99</code> configure flag.\n-      This flag is already on by default, but it can be disabled by the\n-      user.  Also, the configuration machinery will disable it if the\n-      necessary support for C99 (e.g., header files) cannot be found.\n-   </p>\n-   <p>As of GCC 3.0, C99 support includes classification functions\n-      such as <code>isnormal</code>, <code>isgreater</code>,\n-      <code>isnan</code>, etc.\n-      The functions used for 'long long' support such as <code>strtoll</code>\n-      are supported, as is the <code>lldiv_t</code> typedef.  Also supported\n-      are the wide character functions using 'long long', like\n-      <code>wcstoll</code>.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "65d79c996c5d3b0bb4f97c1da31195300df05e8e", "filename": "libstdc++-v3/doc/html/27_io/binary_iostreams_kanze.txt", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F27_io%2Fbinary_iostreams_kanze.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F27_io%2Fbinary_iostreams_kanze.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F27_io%2Fbinary_iostreams_kanze.txt?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,51 +0,0 @@\n-\n-From: James Kanze <kanze@gabi-soft.de>\n-Newsgroups: comp.lang.c++.moderated\n-Subject: Re: binary iostreams ?\n-Date: 3 Feb 2001 14:28:19 -0500\n-Message-ID: <86lmro86qp.fsf@alex.gabi-soft.de>\n-\n-\"Plinio Conti\" <plinio.contiNO@SPAMMINGmclink.it> writes:\n-\n-|>  Why std c++ library stream classes are only text-oriented?\n-\n-Because that is the only universally recognized format.\n-\n-|>  I mean, if I want to write an int, a float, etc. AS IT IS I can't\n-|>  use streams, because they write and read a human readable text\n-|>  format of numbers.\n-\n-Correct.\n-\n-|>  Does anyone know how to solve the problem?\n-\n-It depends on what you really want to do.  If you are just dumping a\n-block of memory to disk, in order to free up memory, and will reread it\n-later in the same run of the same program, ostream::write and\n-istream::read are what you need.  Note, however, that this ony works 1)\n-in the same run of the same program, and 2) for PODs without pointers.\n-\n-If you are writing something that will be read by another program, or a\n-later run of the same program, you'll have to define a specific format\n-to use, and implement streams to input and output that.  If you are\n-writing something that will be read by an existing program, or be\n-transmitted over a network to another machine, you will have to find out\n-what protocol is expected, and adher to it.\n-\n-|>  Any public library?\n-\n-Not that I know of.  I think that there is a library somewhere that\n-outputs in format RPC, or maybe some Internet format.\n-\n-|>  What do you think about this choice?\n-\n-What other choice is possible?  It's not reasonable to ask the standard\n-to support all binary formats, and it's not reasonable for it to favor\n-any one of them.  Given that, what else can you do.\n-\n---\n-James Kanze                               mailto:kanze@gabi-soft.de\n-Conseils en informatique orient\ufffde objet/\n-                   Beratung in objektorientierter Datenverarbeitung\n-Ziegelh\ufffdttenweg 17a, 60598 Frankfurt, Germany Tel. +49(069)63198627\n-"}, {"sha": "901701ff4805651e2c5231102f38e489f0c22c29", "filename": "libstdc++-v3/doc/html/27_io/binary_iostreams_kuehl.txt", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F27_io%2Fbinary_iostreams_kuehl.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F27_io%2Fbinary_iostreams_kuehl.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F27_io%2Fbinary_iostreams_kuehl.txt?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,89 +0,0 @@\n-\n-From: kuehl@ramsen.informatik.uni-konstanz.de (Dietmar Kuehl)\n-Newsgroups: comp.std.c++\n-Subject: Re: binary iostreams ?\n-Date: Sat,  3 Feb 2001 17:17:49 GMT\n-Message-ID: <95hctq$suu$2@news.BelWue.DE>\n-\n-Hi,\n-Plinio Conti (plinio.contiNO@SPAMMINGmclink.it) wrote:\n-: Why std c++ library stream classes are only text-oriented?\n-\n-There is only a text oriented front end to stream buffers because text\n-input and output does not vary between platforms. This is very\n-different for binary output. For example, binary output has to consider\n-\n-- word sizes: Is an 'int' two, four, or eight bytes long? The same\n-  questions arise for all other built-in types.\n-\n-- what is the bit pattern of a value? I think that at least implicitly\n-  in the standard a binary representation for integer types is required.\n-  I don't think that it is required to use two's complement. In any\n-  case, the floating point representations do differ, eg. in their\n-  number of bytes used.\n-\n-- what \"endianess\" is to be used?\n-\n-Basically it is possible to decide a format for each of those. This,\n-however, implies inefficient implementations on platforms where the\n-format does not match the internal representation.\n-\n-What many people asking for binary I/O forget is that binary I/O also\n-requires some form of formatting! Assuming that just writing data and\n-then reading it in will work is asking for problems, eg. when the\n-compiler version changes and they decided to use a 32 bit integer\n-rather than a 16 bit integer: It is not even necessary to switch\n-platforms to run into problems!\n-\n-: I mean, if I want to write an int, a float, etc. AS IT IS I can't use\n-: streams, because they write and read a human readable text format of\n-: numbers.\n-\n-Which is for most I/O a reasonable approach. If it is not for you, you\n-might want to consider a data base: File I/O is not really useful as a\n-persistance mechanism. It is fine eg. for user interaction (text I/O),\n-logging (text I/O), cross platfrom program interaction (formatted I/O),\n-and data exchange (formatted I/O). In all these cases, the I/O is\n-formatted, although possible using a binary format. For persistance,\n-data bases are used. Depending on your needs, a relational or an object\n-oriented one may be better suited.\n-\n-That said, it is worth to mention that it is easy to create a hierarchy\n-similar to IOStreams built on top of stream buffers but doing binary\n-formatting. A somewhat aged example is found at\n-<ftp://ftp.fmi.uni-konstanz.de/pub/algo/personal/kuehl/binio.tar.gz>.\n-This uses XDR formatting of the binary data (well, if I remmeber \n-correctly, it is easy to plug in a different binary formatting).\n-\n-: Does anyone know how to solve the problem?\n-\n-Use a data base, text formatting, or binary formatting. With the\n-details you have given it is impossible to tell which of those is the\n-right approach because you haven't told *why* you want a binary format\n-and *what* you want to do. That basically means that you came up with\n-solution and you want us to confirm that it is the right one without\n-telling us what problem is solved! Until I have seen the problem I\n-doubt that binary I/O is the right approach...\n-\n-... and, BTW, using 'std::istream::read()' and 'std::ostream::write()'\n-is almost certainly the *wrong* approach! These functions are an\n-historical mistake which should have been corrected in the standard:\n-It is my understanding that these methods were present in the IOStream\n-version predating the rework from Jerry Schwartz and were left in to\n-be compatible with the earlier stuff although they were not necessary:\n-You could get binary I/O from the stream buffer level. The original\n-IOStream library (maybe you remember using <stream.h>) did not have\n-stream buffers and thus basic support for binary I/O was also present\n-on the streams level.\n-\n-: What do you think about this choice?\n-\n-When I wrote the above paragraph about confirming your choice, I haven't\n-read this question! As I said above: You told us what solution you have\n-choosen without stating what problem is solved. We cannot determine\n-whether your choice is the right one. Actually, I'm pretty sure it is\n-the wrong one but without seen the details I can't be certain.\n---\n-<mailto:dietmar_kuehl@yahoo.com> <http://www.dietmar-kuehl.de/>\n-Phaidros eaSE - Easy Software Engineering: <http://www.phaidros.com/>\n-"}, {"sha": "46d03b34630efd254bf858f22b1cc61549278610", "filename": "libstdc++-v3/doc/html/27_io/howto.html", "status": "removed", "additions": 0, "deletions": 779, "changes": 779, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2F27_io%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,779 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n-   <meta name=\"DESCRIPTION\" content=\"HOWTO for the libstdc++ chapter 27.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ HOWTO:  Chapter 27: Input/Output</title>\n-<link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Start\" href=\"../documentation.html\" type=\"text/html\"\n-  title=\"GNU C++ Standard Library\" />\n-<link rel=\"Prev\" href=\"../26_numerics/howto.html\" type=\"text/html\"\n-  title=\"Numerics\" />\n-<link rel=\"Next\" href=\"../ext/howto.html\" type=\"text/html\"\n-  title=\"Extensions\" />\n-<link rel=\"Copyright\" href=\"../17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"../faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Chapter 27:  Input/Output</a></h1>\n-\n-<p>Chapter 27 deals with iostreams and all their subcomponents\n-   and extensions.  All <em>kinds</em> of fun stuff.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-<hr />\n-<h1>Contents</h1>\n-<ul>\n-   <li><a href=\"#1\">Copying a file</a></li>\n-   <li><a href=\"#2\">The buffering is screwing up my program!</a></li>\n-   <li><a href=\"#3\">Binary I/O</a></li>\n-   <li><a href=\"#5\">What is this &lt;sstream&gt;/stringstreams thing?</a></li>\n-   <li><a href=\"#6\">Deriving a stream buffer</a></li>\n-   <li><a href=\"#7\">More on binary I/O</a></li>\n-   <li><a href=\"#8\">Pathetic performance?  Ditch C.</a></li>\n-   <li><a href=\"#9\">Threads and I/O</a></li>\n-   <li><a href=\"#10\">Which header?</a></li>\n-   <li><a href=\"#11\">Using FILE*s and file descriptors with IOStreams</a></li>\n-</ul>\n-\n-<hr />\n-\n-<!-- ####################################################### -->\n-\n-<h2><a name=\"1\">Copying a file</a></h2>\n-   <p>So you want to copy a file quickly and easily, and most important,\n-      completely portably.  And since this is C++, you have an open\n-      ifstream (call it IN) and an open ofstream (call it OUT):\n-   </p>\n-   <pre>\n-   #include &lt;fstream&gt;\n-\n-   std::ifstream  IN (\"input_file\");\n-   std::ofstream  OUT (\"output_file\"); </pre>\n-   <p>Here's the easiest way to get it completely wrong:\n-   </p>\n-   <pre>\n-   OUT &lt;&lt; IN;</pre>\n-   <p>For those of you who don't already know why this doesn't work\n-      (probably from having done it before), I invite you to quickly\n-      create a simple text file called &quot;input_file&quot; containing\n-      the sentence\n-   </p>\n-      <pre>\n-      The quick brown fox jumped over the lazy dog.</pre>\n-   <p>surrounded by blank lines.  Code it up and try it.  The contents\n-      of &quot;output_file&quot; may surprise you.\n-   </p>\n-   <p>Seriously, go do it.  Get surprised, then come back.  It's worth it.\n-   </p>\n-   <hr width=\"60%\" />\n-   <p>The thing to remember is that the <code>basic_[io]stream</code> classes\n-      handle formatting, nothing else.  In particular, they break up on\n-      whitespace.  The actual reading, writing, and storing of data is\n-      handled by the <code>basic_streambuf</code> family.  Fortunately, the\n-      <code>operator&lt;&lt;</code> is overloaded to take an ostream and\n-      a pointer-to-streambuf, in order to help with just this kind of\n-      &quot;dump the data verbatim&quot; situation.\n-   </p>\n-   <p>Why a <em>pointer</em> to streambuf and not just a streambuf?  Well,\n-      the [io]streams hold pointers (or references, depending on the\n-      implementation) to their buffers, not the actual\n-      buffers.  This allows polymorphic behavior on the part of the buffers\n-      as well as the streams themselves.  The pointer is easily retrieved\n-      using the <code>rdbuf()</code> member function.  Therefore, the easiest\n-      way to copy the file is:\n-   </p>\n-   <pre>\n-   OUT &lt;&lt; IN.rdbuf();</pre>\n-   <p>So what <em>was</em> happening with OUT&lt;&lt;IN?  Undefined\n-      behavior, since that particular &lt;&lt; isn't defined by the Standard.\n-      I have seen instances where it is implemented, but the character\n-      extraction process removes all the whitespace, leaving you with no\n-      blank lines and only &quot;Thequickbrownfox...&quot;.  With\n-      libraries that do not define that operator, IN (or one of IN's\n-      member pointers) sometimes gets converted to a void*, and the output\n-      file then contains a perfect text representation of a hexadecimal\n-      address (quite a big surprise).  Others don't compile at all.\n-   </p>\n-   <p>Also note that none of this is specific to o<b>*f*</b>streams. \n-      The operators shown above are all defined in the parent \n-      basic_ostream class and are therefore available with all possible\n-      descendants.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"2\">The buffering is screwing up my program!</a></h2>\n-<!--\n-  This is not written very well.  I need to redo this section.\n--->\n-   <p>First, are you sure that you understand buffering?  Particularly\n-      the fact that C++ may not, in fact, have anything to do with it?\n-   </p>\n-   <p>The rules for buffering can be a little odd, but they aren't any\n-      different from those of C.  (Maybe that's why they can be a bit\n-      odd.)  Many people think that writing a newline to an output\n-      stream automatically flushes the output buffer.  This is true only\n-      when the output stream is, in fact, a terminal and not a file\n-      or some other device -- and <em>that</em> may not even be true\n-      since C++ says nothing about files nor terminals.  All of that is\n-      system-dependent.  (The &quot;newline-buffer-flushing only occurring\n-      on terminals&quot; thing is mostly true on Unix systems, though.)\n-   </p>\n-   <p>Some people also believe that sending <code>endl</code> down an\n-      output stream only writes a newline.  This is incorrect; after a\n-      newline is written, the buffer is also flushed.  Perhaps this\n-      is the effect you want when writing to a screen -- get the text\n-      out as soon as possible, etc -- but the buffering is largely\n-      wasted when doing this to a file:\n-   </p>\n-   <pre>\n-   output &lt;&lt; &quot;a line of text&quot; &lt;&lt; endl;\n-   output &lt;&lt; some_data_variable &lt;&lt; endl;\n-   output &lt;&lt; &quot;another line of text&quot; &lt;&lt; endl; </pre>\n-   <p>The proper thing to do in this case to just write the data out\n-      and let the libraries and the system worry about the buffering.\n-      If you need a newline, just write a newline:\n-   </p>\n-   <pre>\n-   output &lt;&lt; &quot;a line of text\\n&quot;\n-          &lt;&lt; some_data_variable &lt;&lt; '\\n'\n-          &lt;&lt; &quot;another line of text\\n&quot;; </pre>\n-   <p>I have also joined the output statements into a single statement.\n-      You could make the code prettier by moving the single newline to\n-      the start of the quoted text on the last line, for example.\n-   </p>\n-   <p>If you do need to flush the buffer above, you can send an\n-      <code>endl</code> if you also need a newline, or just flush the buffer\n-      yourself:\n-   </p>\n-   <pre>\n-   output &lt;&lt; ...... &lt;&lt; flush;    // can use std::flush manipulator\n-   output.flush();               // or call a member fn </pre>\n-   <p>On the other hand, there are times when writing to a file should\n-      be like writing to standard error; no buffering should be done \n-      because the data needs to appear quickly (a prime example is a\n-      log file for security-related information).  The way to do this is\n-      just to turn off the buffering <em>before any I/O operations at\n-      all</em> have been done (note that opening counts as an I/O operation):\n-   </p>\n-   <pre>\n-   std::ofstream    os;\n-   std::ifstream    is;\n-   int   i;\n-\n-   os.rdbuf()-&gt;pubsetbuf(0,0);\n-   is.rdbuf()-&gt;pubsetbuf(0,0);\n-\n-   os.open(&quot;/foo/bar/baz&quot;);\n-   is.open(&quot;/qux/quux/quuux&quot;);\n-   ...\n-   os &lt;&lt; &quot;this data is written immediately\\n&quot;;\n-   is &gt;&gt; i;   // and this will probably cause a disk read </pre>\n-   <p>Since all aspects of buffering are handled by a streambuf-derived\n-      member, it is necessary to get at that member with <code>rdbuf()</code>.\n-      Then the public version of <code>setbuf</code> can be called.  The \n-      arguments are the same as those for the Standard C I/O Library\n-      function (a buffer area followed by its size).\n-   </p>\n-   <p>A great deal of this is implementation-dependent.  For example,\n-      <code>streambuf</code> does not specify any actions for its own \n-      <code>setbuf()</code>-ish functions; the classes derived from\n-      <code>streambuf</code> each define behavior that &quot;makes \n-      sense&quot; for that class:  an argument of (0,0) turns off buffering\n-      for <code>filebuf</code> but does nothing at all for its siblings\n-      <code>stringbuf</code> and <code>strstreambuf</code>, and specifying\n-      anything other than (0,0) has varying effects.\n-      User-defined classes derived from <code>streambuf</code> can\n-      do whatever they want.  (For <code>filebuf</code> and arguments for\n-      <code>(p,s)</code> other than zeros, libstdc++ does what you'd expect:\n-      the first <code>s</code> bytes of <code>p</code> are used as a buffer,\n-      which you must allocate and deallocate.)\n-   </p>\n-   <p>A last reminder:  there are usually more buffers involved than\n-      just those at the language/library level.  Kernel buffers, disk\n-      buffers, and the like will also have an effect.  Inspecting and\n-      changing those are system-dependent.\n-   </p>\n-   <p>Return <a href=\"#top\">to top of page</a> or\n-      <a href=\"../faq/index.html\">to the FAQ</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"3\">Binary I/O</a></h2>\n-   <p>The first and most important thing to remember about binary I/O is\n-      that opening a file with <code>ios::binary</code> is not, repeat\n-      <em>not</em>, the only thing you have to do.  It is not a silver\n-      bullet, and will not allow you to use the <code>&lt;&lt;/&gt;&gt;</code>\n-      operators of the normal fstreams to do binary I/O.\n-   </p>\n-   <p>Sorry.  Them's the breaks.\n-   </p>\n-   <p>This isn't going to try and be a complete tutorial on reading and\n-      writing binary files (because &quot;binary&quot;\n-      <a href=\"#7\">covers a lot of ground)</a>, but we will try and clear\n-      up a couple of misconceptions and common errors.\n-   </p>\n-   <p>First, <code>ios::binary</code> has exactly one defined effect, no more\n-      and no less.  Normal text mode has to be concerned with the newline\n-      characters, and the runtime system will translate between (for\n-      example) '\\n' and the appropriate end-of-line sequence (LF on Unix,\n-      CRLF on DOS, CR on Macintosh, etc).  (There are other things that\n-      normal mode does, but that's the most obvious.)  Opening a file in\n-      binary mode disables this conversion, so reading a CRLF sequence\n-      under Windows won't accidentally get mapped to a '\\n' character, etc.\n-      Binary mode is not supposed to suddenly give you a bitstream, and\n-      if it is doing so in your program then you've discovered a bug in\n-      your vendor's compiler (or some other part of the C++ implementation,\n-      possibly the runtime system).\n-   </p>\n-   <p>Second, using <code>&lt;&lt;</code> to write and <code>&gt;&gt;</code> to\n-      read isn't going to work with the standard file stream classes, even\n-      if you use <code>skipws</code> during reading.  Why not?  Because \n-      ifstream and ofstream exist for the purpose of <em>formatting</em>,\n-      not reading and writing.  Their job is to interpret the data into\n-      text characters, and that's exactly what you don't want to happen\n-      during binary I/O.\n-   </p>\n-   <p>Third, using the <code>get()</code> and <code>put()/write()</code> member\n-      functions still aren't guaranteed to help you.  These are\n-      &quot;unformatted&quot; I/O functions, but still character-based.\n-      (This may or may not be what you want, see below.)\n-   </p>\n-   <p>Notice how all the problems here are due to the inappropriate use\n-      of <em>formatting</em> functions and classes to perform something\n-      which <em>requires</em> that formatting not be done?  There are a\n-      seemingly infinite number of solutions, and a few are listed here:\n-   </p>\n-   <ul>\n-      <li>&quot;Derive your own fstream-type classes and write your own\n-          &lt;&lt;/&gt;&gt; operators to do binary I/O on whatever data\n-          types you're using.&quot;  This is a Bad Thing, because while\n-          the compiler would probably be just fine with it, other humans\n-          are going to be confused.  The overloaded bitshift operators\n-          have a well-defined meaning (formatting), and this breaks it.\n-      </li>\n-      <li>&quot;Build the file structure in memory, then <code>mmap()</code>\n-          the file and copy the structure.&quot;  Well, this is easy to\n-          make work, and easy to break, and is pretty equivalent to\n-          using <code>::read()</code> and <code>::write()</code> directly, and\n-          makes no use of the iostream library at all...\n-      </li>\n-      <li>&quot;Use streambufs, that's what they're there for.&quot;\n-          While not trivial for the beginner, this is the best of all\n-          solutions.  The streambuf/filebuf layer is the layer that is\n-          responsible for actual I/O.  If you want to use the C++\n-          library for binary I/O, this is where you start.\n-      </li>\n-   </ul>\n-   <p>How to go about using streambufs is a bit beyond the scope of this\n-      document (at least for now), but while streambufs go a long way,\n-      they still leave a couple of things up to you, the programmer.\n-      As an example, byte ordering is completely between you and the\n-      operating system, and you have to handle it yourself.\n-   </p>\n-   <p>Deriving a streambuf or filebuf\n-      class from the standard ones, one that is specific to your data\n-      types (or an abstraction thereof) is probably a good idea, and\n-      lots of examples exist in journals and on Usenet.  Using the\n-      standard filebufs directly (either by declaring your own or by\n-      using the pointer returned from an fstream's <code>rdbuf()</code>)\n-      is certainly feasible as well.\n-   </p>\n-   <p>One area that causes problems is trying to do bit-by-bit operations\n-      with filebufs.  C++ is no different from C in this respect:  I/O\n-      must be done at the byte level.  If you're trying to read or write\n-      a few bits at a time, you're going about it the wrong way.  You\n-      must read/write an integral number of bytes and then process the\n-      bytes.  (For example, the streambuf functions take and return\n-      variables of type <code>int_type</code>.)\n-   </p>\n-   <p>Another area of problems is opening text files in binary mode.\n-      Generally, binary mode is intended for binary files, and opening\n-      text files in binary mode means that you now have to deal with all of \n-      those end-of-line and end-of-file problems that we mentioned before.\n-      An instructive thread from comp.lang.c++.moderated delved off into\n-      this topic starting more or less at\n-      <a href=\"http://groups.google.com/groups?oi=djq&amp;selm=an_436187505\">this</a>\n-      article and continuing to the end of the thread.  (You'll have to\n-      sort through some flames every couple of paragraphs, but the points\n-      made are good ones.)\n-   </p>\n- \n-<hr />\n-<h2><a name=\"5\">What is this &lt;sstream&gt;/stringstreams thing?</a></h2>\n-   <p>Stringstreams (defined in the header <code>&lt;sstream&gt;</code>)\n-      are in this author's opinion one of the coolest things since\n-      sliced time.  An example of their use is in the Received Wisdom\n-      section for Chapter 21 (Strings),\n-      <a href=\"../21_strings/howto.html#1.1internal\"> describing how to\n-      format strings</a>.\n-   </p>\n-   <p>The quick definition is:  they are siblings of ifstream and ofstream,\n-      and they do for <code>std::string</code> what their siblings do for\n-      files.  All that work you put into writing <code>&lt;&lt;</code> and\n-      <code>&gt;&gt;</code> functions for your classes now pays off\n-      <em>again!</em>  Need to format a string before passing the string\n-      to a function?  Send your stuff via <code>&lt;&lt;</code> to an\n-      ostringstream.  You've read a string as input and need to parse it?\n-      Initialize an istringstream with that string, and then pull pieces\n-      out of it with <code>&gt;&gt;</code>.  Have a stringstream and need to\n-      get a copy of the string inside?  Just call the <code>str()</code>\n-      member function.\n-   </p>\n-   <p>This only works if you've written your\n-      <code>&lt;&lt;</code>/<code>&gt;&gt;</code> functions correctly, though,\n-      and correctly means that they take istreams and ostreams as\n-      parameters, not i<b>f</b>streams and o<b>f</b>streams.  If they\n-      take the latter, then your I/O operators will work fine with\n-      file streams, but with nothing else -- including stringstreams.\n-   </p>\n-   <p>If you are a user of the strstream classes, you need to update\n-      your code.  You don't have to explicitly append <code>ends</code> to\n-      terminate the C-style character array, you don't have to mess with\n-      &quot;freezing&quot; functions, and you don't have to manage the\n-      memory yourself.  The strstreams have been officially deprecated,\n-      which means that 1) future revisions of the C++ Standard won't\n-      support them, and 2) if you use them, people will laugh at you.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"6\">Deriving a stream buffer</a></h2>\n-   <p>Creating your own stream buffers for I/O can be remarkably easy.\n-      If you are interested in doing so, we highly recommend two very\n-      excellent books:\n-      <a href=\"http://www.langer.camelot.de/iostreams.html\">Standard C++\n-      IOStreams and Locales</a> by Langer and Kreft, ISBN 0-201-18395-1, and\n-      <a href=\"http://www.josuttis.com/libbook/\">The C++ Standard Library</a>\n-      by Nicolai Josuttis, ISBN 0-201-37926-0.  Both are published by\n-      Addison-Wesley, who isn't paying us a cent for saying that, honest.\n-   </p>\n-   <p>Here is a simple example, io/outbuf1, from the Josuttis text.  It\n-      transforms everything sent through it to uppercase.  This version\n-      assumes many things about the nature of the character type being\n-      used (for more information, read the books or the newsgroups):\n-   </p>\n-   <pre>\n-    #include &lt;iostream&gt;\n-    #include &lt;streambuf&gt;\n-    #include &lt;locale&gt;\n-    #include &lt;cstdio&gt;\n-\n-    class outbuf : public std::streambuf\n-    {\n-      protected:\n-\t/* central output function\n-\t * - print characters in uppercase mode\n-\t */\n-\tvirtual int_type overflow (int_type c) {\n-\t    if (c != EOF) {\n-\t\t// convert lowercase to uppercase\n-\t\tc = std::toupper(static_cast&lt;char&gt;(c),getloc());\n-\n-\t\t// and write the character to the standard output\n-\t\tif (putchar(c) == EOF) {\n-\t\t    return EOF;\n-\t\t}\n-\t    }\n-\t    return c;\n-\t}\n-    };\n-\n-    int main()\n-    {\n-\t// create special output buffer\n-\toutbuf ob;\n-\t// initialize output stream with that output buffer\n-\tstd::ostream out(&amp;ob);\n-\n-\tout &lt;&lt; \"31 hexadecimal: \"\n-\t    &lt;&lt; std::hex &lt;&lt; 31 &lt;&lt; std::endl;\n-\treturn 0;\n-    }\n-   </pre>\n-   <p>Try it yourself!  More examples can be found in 3.1.x code, in\n-      <code>include/ext/*_filebuf.h</code>, and on\n-      <a href=\"http://www.informatik.uni-konstanz.de/~kuehl/c++/iostream/\">Dietmar\n-      K&uuml;hl's IOStreams page</a>.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"7\">More on binary I/O</a></h2>\n-   <p>Towards the beginning of February 2001, the subject of\n-      &quot;binary&quot; I/O was brought up in a couple of places at the\n-      same time.  One notable place was Usenet, where James Kanze and\n-      Dietmar K&uuml;hl separately posted articles on why attempting\n-      generic binary I/O was not a good idea.  (Here are copies of\n-      <a href=\"binary_iostreams_kanze.txt\">Kanze's article</a> and\n-      <a href=\"binary_iostreams_kuehl.txt\">K&uuml;hl's article</a>.)\n-   </p>\n-   <p>Briefly, the problems of byte ordering and type sizes mean that\n-      the unformatted functions like <code>ostream::put()</code> and\n-      <code>istream::get()</code> cannot safely be used to communicate\n-      between arbitrary programs, or across a network, or from one\n-      invocation of a program to another invocation of the same program\n-      on a different platform, etc.\n-   </p>\n-   <p>The entire Usenet thread is instructive, and took place under the\n-      subject heading &quot;binary iostreams&quot; on both comp.std.c++\n-      and comp.lang.c++.moderated in parallel.  Also in that thread,\n-      Dietmar K&uuml;hl mentioned that he had written a pair of stream\n-      classes that would read and write XDR, which is a good step towards\n-      a portable binary format.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"8\">Pathetic performance?  Ditch C.</a></h2>\n-   <p>It sounds like a flame on C, but it isn't.  Really.  Calm down.\n-      I'm just saying it to get your attention.\n-   </p>\n-   <p>Because the C++ library includes the C library, both C-style and\n-      C++-style I/O have to work at the same time.  For example:\n-   </p>\n-   <pre>\n-     #include &lt;iostream&gt;\n-     #include &lt;cstdio&gt;\n-\n-     std::cout &lt;&lt; &quot;Hel&quot;;\n-     std::printf (&quot;lo, worl&quot;);\n-     std::cout &lt;&lt; &quot;d!\\n&quot;;\n-   </pre>\n-   <p>This must do what you think it does.\n-   </p>\n-   <p>Alert members of the audience will immediately notice that buffering\n-      is going to make a hash of the output unless special steps are taken.\n-   </p>\n-   <p>The special steps taken by libstdc++, at least for version 3.0,\n-      involve doing very little buffering for the standard streams, leaving\n-      most of the buffering to the underlying C library.  (This kind of\n-      thing is tricky to get right.)\n-      The upside is that correctness is ensured.  The downside is that\n-      writing through <code>cout</code> can quite easily lead to awful\n-      performance when the C++ I/O library is layered on top of the C I/O\n-      library (as it is for 3.0 by default).  Some patches have been applied\n-      which improve the situation for 3.1.\n-   </p>\n-   <p>However, the C and C++ standard streams only need to be kept in sync\n-      when both libraries' facilities are in use.  If your program only uses\n-      C++ I/O, then there's no need to sync with the C streams.  The right\n-      thing to do in this case is to call\n-   </p>\n-   <pre>\n-     #include <em>any of the I/O headers such as ios, iostream, etc</em>\n-\n-     std::ios::sync_with_stdio(false);\n-   </pre>\n-   <p>You must do this before performing any I/O via the C++ stream objects.\n-      Once you call this, the C++ streams will operate independently of the\n-      (unused) C streams.  For GCC 3.x, this means that <code>cout</code> and\n-      company will become fully buffered on their own.\n-   </p>\n-   <p>Note, by the way, that the synchronization requirement only applies to\n-      the standard streams (<code>cin</code>, <code>cout</code>,\n-      <code>cerr</code>,\n-      <code>clog</code>, and their wide-character counterparts).  File stream\n-      objects that you declare yourself have no such requirement and are fully\n-      buffered.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"9\">Threads and I/O</a></h2>\n-   <p>I'll assume that you have already read the\n-      <a href=\"../17_intro/howto.html#3\">general notes on library threads</a>,\n-      and the\n-      <a href=\"../23_containers/howto.html#3\">notes on threaded container\n-      access</a> (you might not think of an I/O stream as a container, but\n-      the points made there also hold here).  If you have not read them,\n-      please do so first.\n-   </p>\n-   <p>This gets a bit tricky.  Please read carefully, and bear with me.\n-   </p>\n-   <h3>Structure</h3>\n-   <p>A wrapper\n-      type called <code>__basic_file</code> provides our abstraction layer\n-      for the <code>std::filebuf</code> classes.  Nearly all decisions dealing\n-      with actual input and output must be made in <code>__basic_file</code>.\n-   </p>\n-   <p>A generic locking mechanism is somewhat in place at the filebuf layer,\n-      but is not used in the current code.  Providing locking at any higher\n-      level is akin to providing locking within containers, and is not done\n-      for the same reasons (see the links above).\n-   </p>\n-   <h3>The defaults for 3.0.x</h3>\n-   <p>The __basic_file type is simply a collection of small wrappers around\n-      the C stdio layer (again, see the link under Structure).  We do no\n-      locking ourselves, but simply pass through to calls to <code>fopen</code>,\n-      <code>fwrite</code>, and so forth.\n-   </p>\n-   <p>So, for 3.0, the question of &quot;is multithreading safe for I/O&quot; \n-      must be answered with, &quot;is your platform's C library threadsafe\n-      for I/O?&quot;  Some are by default, some are not; many offer multiple\n-      implementations of the C library with varying tradeoffs of threadsafety\n-      and efficiency.  You, the programmer, are always required to take care\n-      with multiple threads.\n-   </p>\n-   <p>(As an example, the POSIX standard requires that C stdio FILE*\n-       operations are atomic.  POSIX-conforming C libraries (e.g, on Solaris\n-       and GNU/Linux) have an internal mutex to serialize operations on\n-       FILE*s.  However, you still need to not do stupid things like calling\n-       <code>fclose(fs)</code> in one thread followed by an access of\n-       <code>fs</code> in another.)\n-   </p>\n-   <p>So, if your platform's C library is threadsafe, then your\n-      <code>fstream</code> I/O operations will be threadsafe at the lowest\n-      level.  For higher-level operations, such as manipulating the data\n-      contained in the stream formatting classes (e.g., setting up callbacks\n-      inside an <code>std::ofstream</code>), you need to guard such accesses\n-      like any other critical shared resource.\n-   </p>\n-   <h3>The future</h3>\n-   <p> A\n-      second choice may be available for I/O implementations:  libio.  This is\n-      disabled by default, and in fact will not currently work due to other\n-      issues.  It will be revisited, however.\n-   </p>\n-   <p>The libio code is a subset of the guts of the GNU libc (glibc) I/O\n-      implementation.  When libio is in use, the <code>__basic_file</code>\n-      type is basically derived from FILE.  (The real situation is more\n-      complex than that... it's derived from an internal type used to\n-      implement FILE.  See libio/libioP.h to see scary things done with\n-      vtbls.)  The result is that there is no &quot;layer&quot; of C stdio\n-      to go through; the filebuf makes calls directly into the same\n-      functions used to implement <code>fread</code>, <code>fwrite</code>,\n-      and so forth, using internal data structures.  (And when I say\n-      &quot;makes calls directly,&quot; I mean the function is literally\n-      replaced by a jump into an internal function.  Fast but frightening.\n-      *grin*)\n-   </p>\n-   <p>Also, the libio internal locks are used.  This requires pulling in\n-      large chunks of glibc, such as a pthreads implementation, and is one\n-      of the issues preventing widespread use of libio as the libstdc++\n-      cstdio implementation.\n-   </p>\n-   <p>But we plan to make this work, at least as an option if not a future\n-      default.  Platforms running a copy of glibc with a recent-enough\n-      version will see calls from libstdc++ directly into the glibc already\n-      installed.  For other platforms, a copy of the libio subsection will\n-      be built and included in libstdc++.\n-   </p>\n-   <h3>Alternatives</h3>\n-   <p>Don't forget that other cstdio implementations are possible.  You could\n-      easily write one to perform your own forms of locking, to solve your\n-      &quot;interesting&quot; problems.\n-   </p>\n-\n-<hr />\n-<h2><a name=\"10\">Which header?</a></h2>\n-   <p>To minimize the time you have to wait on the compiler, it's good to\n-      only include the headers you really need.  Many people simply include\n-      &lt;iostream&gt; when they don't need to -- and that can <em>penalize\n-      your runtime as well.</em>  Here are some tips on which header to use\n-      for which situations, starting with the simplest.\n-   </p>\n-   <p><strong>&lt;iosfwd&gt;</strong> should be included whenever you simply\n-      need the <em>name</em> of an I/O-related class, such as\n-      &quot;ofstream&quot; or &quot;basic_streambuf&quot;.  Like the name\n-      implies, these are forward declarations.  (A word to all you fellow\n-      old school programmers:  trying to forward declare classes like\n-      &quot;class istream;&quot; won't work.  Look in the iosfwd header if\n-      you'd like to know why.)  For example,\n-   </p>\n-   <pre>\n-    #include &lt;iosfwd&gt;\n-\n-    class MyClass\n-    {\n-        ....\n-        std::ifstream&amp;   input_file;\n-    };\n-\n-    extern std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, MyClass&amp;);\n-   </pre>\n-   <p><strong>&lt;ios&gt;</strong> declares the base classes for the entire\n-      I/O stream hierarchy, std::ios_base and std::basic_ios&lt;charT&gt;, the\n-      counting types std::streamoff and std::streamsize, the file\n-      positioning type std::fpos, and the various manipulators like\n-      std::hex, std::fixed, std::noshowbase, and so forth.\n-   </p>\n-   <p>The ios_base class is what holds the format flags, the state flags,\n-      and the functions which change them (setf(), width(), precision(),\n-      etc).  You can also store extra data and register callback functions\n-      through ios_base, but that has been historically underused.  Anything\n-      which doesn't depend on the type of characters stored is consolidated\n-      here.\n-   </p>\n-   <p>The template class basic_ios is the highest template class in the\n-      hierarchy; it is the first one depending on the character type, and\n-      holds all general state associated with that type:  the pointer to the\n-      polymorphic stream buffer, the facet information, etc.\n-   </p>\n-   <p><strong>&lt;streambuf&gt;</strong> declares the template class\n-      basic_streambuf, and two standard instantiations, streambuf and\n-      wstreambuf.  If you need to work with the vastly useful and capable\n-      stream buffer classes, e.g., to create a new form of storage\n-      transport, this header is the one to include.\n-   </p>\n-   <p><strong>&lt;istream&gt;</strong>/<strong>&lt;ostream&gt;</strong> are\n-      the headers to include when you are using the &gt;&gt;/&lt;&lt;\n-      interface, or any of the other abstract stream formatting functions.\n-      For example,\n-   </p>\n-   <pre>\n-    #include &lt;istream&gt;\n-\n-    std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, MyClass&amp; c)\n-    {\n-       return os &lt;&lt; c.data1() &lt;&lt; c.data2();\n-    }\n-   </pre>\n-   <p>The std::istream and std::ostream classes are the abstract parents of\n-      the various concrete implementations.  If you are only using the\n-      interfaces, then you only need to use the appropriate interface header.\n-   </p>\n-   <p><strong>&lt;iomanip&gt;</strong> provides &quot;extractors and inserters\n-      that alter information maintained by class ios_base and its derived\n-      classes,&quot; such as std::setprecision and std::setw.  If you need\n-      to write expressions like <code>os &lt;&lt; setw(3);</code> or\n-      <code>is &gt;&gt; setbase(8);</code>, you must include &lt;iomanip&gt;.\n-   </p>\n-   <p><strong>&lt;sstream&gt;</strong>/<strong>&lt;fstream&gt;</strong>\n-      declare the six stringstream and fstream classes.  As they are the\n-      standard concrete descendants of istream and ostream, you will already\n-      know about them.\n-   </p>\n-   <p>Finally, <strong>&lt;iostream&gt;</strong> provides the eight standard\n-      global objects (cin, cout, etc).  To do this correctly, this header\n-      also provides the contents of the &lt;istream&gt; and &lt;ostream&gt;\n-      headers, but nothing else.  The contents of this header look like\n-   </p>\n-   <pre>\n-    #include &lt;ostream&gt;\n-    #include &lt;istream&gt;\n-\n-    namespace std\n-    {\n-        extern istream cin;\n-        extern ostream cout;\n-        ....\n-\n-        // this is explained below\n-        <strong>static ios_base::Init __foo;</strong>    // not its real name\n-    }\n-   </pre>\n-   <p>Now, the runtime penalty mentioned previously:  the global objects\n-      must be initialized before any of your own code uses them; this is\n-      guaranteed by the standard.  Like any other global object, they must\n-      be initialized once and only once.  This is typically done with a\n-      construct like the one above, and the nested class ios_base::Init is \n-      specified in the standard for just this reason.\n-   </p>\n-   <p>How does it work?  Because the header is included before any of your\n-      code, the <strong>__foo</strong> object is constructed before any of\n-      your objects.  (Global objects are built in the order in which they\n-      are declared, and destroyed in reverse order.)  The first time the\n-      constructor runs, the eight stream objects are set up.\n-   </p>\n-   <p>The <code>static</code> keyword means that each object file compiled\n-      from a source file containing &lt;iostream&gt; will have its own\n-      private copy of <strong>__foo</strong>.  There is no specified order\n-      of construction across object files (it's one of those pesky NP\n-      problems that make life so interesting), so one copy in each object\n-      file means that the stream objects are guaranteed to be set up before\n-      any of your code which uses them could run, thereby meeting the\n-      requirements of the standard.\n-   </p>\n-   <p>The penalty, of course, is that after the first copy of\n-      <strong>__foo</strong> is constructed, all the others are just wasted\n-      processor time.  The time spent is merely for an increment-and-test\n-      inside a function call, but over several dozen or hundreds of object\n-      files, that time can add up.  (It's not in a tight loop, either.)\n-   </p>\n-   <p>The lesson?  Only include &lt;iostream&gt; when you need to use one of\n-      the standard objects in that source file; you'll pay less startup\n-      time.  Only include the header files you need to in general; your\n-      compile times will go down when there's less parsing work to do.\n-   </p>\n-\n-\n-<hr />\n-<h2><a name=\"11\">Using FILE*s and file descriptors with IOStreams</a></h2>\n-   <!-- referenced by ext/howto.html#2, update link if numbering changes -->\n-   <p>The v2 library included non-standard extensions to construct\n-      <code>std::filebuf</code>s from C stdio types such as\n-      <code>FILE*</code>s and POSIX file descriptors.\n-      Today the recommended way to use stdio types with libstdc++\n-      IOStreams is via the <code>stdio_filebuf</code> class (see below),\n-      but earlier releases provided slightly different mechanisms.\n-   </p>\n-   <ul>\n-     <li>3.0.x <code>filebuf</code>s have another ctor with this signature:\n-         <br />\n-        <code>basic_filebuf(__c_file_type*, ios_base::openmode, int_type);</code>\n-         <br />This comes in very handy in a number of places, such as\n-         attaching Unix sockets, pipes, and anything else which uses file\n-         descriptors, into the IOStream buffering classes.  The three\n-         arguments are as follows:\n-         <ul>\n-          <li><code>__c_file_type*      F   </code>\n-              // the __c_file_type typedef usually boils down to stdio's FILE\n-          </li>\n-          <li><code>ios_base::openmode  M   </code>\n-              // same as all the other uses of openmode\n-          </li>\n-          <li><code>int_type            B   </code>\n-              // buffer size, defaults to BUFSIZ if not specified\n-          </li>\n-         </ul>\n-         For those wanting to use file descriptors instead of FILE*'s, I\n-         invite you to contemplate the mysteries of C's <code>fdopen()</code>.\n-     </li>\n-     <li>In library snapshot 3.0.95 and later, <code>filebuf</code>s bring\n-         back an old extension:  the <code>fd()</code> member function.  The\n-         integer returned from this function can be used for whatever file\n-         descriptors can be used for on your platform.  Naturally, the\n-         library cannot track what you do on your own with a file descriptor,\n-         so if you perform any I/O directly, don't expect the library to be\n-         aware of it.\n-     </li>\n-     <li>Beginning with 3.1, the extra <code>filebuf</code> constructor and\n-         the <code>fd()</code> function were removed from the standard\n-         filebuf.  Instead, <code>&lt;ext/stdio_filebuf.h&gt;</code> contains\n-         a derived class called\n-         <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/class____gnu__cxx_1_1stdio__filebuf.html\"><code>__gnu_cxx::stdio_filebuf</code></a>.\n-         This class can be constructed from a C <code>FILE*</code> or a file\n-         descriptor, and provides the <code>fd()</code> function.\n-     </li>\n-   </ul>\n-   <p>If you want to access a <code>filebuf</code>'s file descriptor to\n-      implement file locking (e.g. using the <code>fcntl()</code> system\n-      call) then you might be interested in Henry Suter's\n-      <a href=\"http://suter.home.cern.ch/suter/RWLock.html\">RWLock</a>\n-      class.\n-   </p>\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"../17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>\n-\n-"}, {"sha": "ea5dcfcdd41dc321a3d5a2ae0395c469070a3bcf", "filename": "libstdc++-v3/doc/html/README", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2FREADME?ref=620039adfb7162e9a9ce6a9b90fd3f14d711c5fc", "patch": "@@ -0,0 +1,3 @@\n+The HTML documentation in this folder is generated from the XML sources.\n+\n+To change or edit, please edit the XML sources in the ../xml directory."}, {"sha": "c830a9967ba75f7d76d25e0ea7df1fc180c9631a", "filename": "libstdc++-v3/doc/html/configopts.html", "status": "removed", "additions": 0, "deletions": 342, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fconfigopts.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,342 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta name=\"AUTHOR\" content=\"pme@gcc.gnu.org (Phil Edwards)\" />\n-   <meta name=\"KEYWORDS\" content=\"libstdc++, libstdc++, GCC, g++\" />\n-   <meta name=\"DESCRIPTION\" content=\"Configuration options for libstdc++.\" />\n-   <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++ configure options</title>\n-<link rel=\"StyleSheet\" href=\"lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Copyright\" href=\"17_intro/license.html\" type=\"text/html\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n-options</a></h1>\n-\n-<p class=\"fineprint\"><em>\n-   The latest version of this document is always available at\n-   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html\">\n-   http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html</a>.\n-</em></p>\n-\n-<p><em>\n-   To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++ homepage</a>.\n-</em></p>\n-\n-<!-- ####################################################### -->\n-<hr />\n-<p>Here are some of the non-obvious options to libstdc++'s configure.\n-   Keep in mind that\n-   <!-- This SECnn should be the \"Choosing Package Options\" section. -->\n-   <a href=\"http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_131.html#SEC131\">they\n-   all have opposite forms as well</a>\n-   (enable/disable and with/without).  The defaults are for <strong>current\n-   development sources</strong>, which may be different than those for\n-   released versions.\n-</p>\n-<p>The canonical way to find out the configure options that are\n-   available for a given set of libstdc++ sources is to go to the\n-   source directory and then type:<code>  ./configure --help</code>\n-</p>\n-\n-<dl>\n- <dt><code>--enable-multilib  </code>[default]</dt>\n- <dd><p>This is part of the generic multilib support for building cross\n-        compilers.  As such, targets like &quot;powerpc-elf&quot; will have\n-        libstdc++ built many different ways:  &quot;-msoft-float&quot;\n-        and not, etc.  A different libstdc++ will be built for each of\n-        the different multilib versions.  This option is on by default.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-sjlj-exceptions  </code></dt>\n- <dd><p>Forces old, set-jump/long-jump exception handling model.  If\n-        at all possible, the new, frame unwinding exception handling routines\n-        should be used instead, as they significantly reduce both\n-        runtime memory usage and executable size. This option can\n-        change the library ABI.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-version-specific-runtime-libs  </code></dt>\n- <dd><p>Specify that run-time libraries should be installed in the\n-        compiler-specific subdirectory (i.e.,\n-        <code>${libdir}/gcc-lib/${target_alias}/${gcc_version}</code>)\n-        instead of <code>${libdir}</code>.  This option is useful if you\n-        intend to use several versions of gcc in parallel.  In addition,\n-        libstdc++'s include files will be installed in\n-        <code>${libdir}/gcc-lib/${target_alias}/${gcc_version}/include/g++</code>,\n-        unless you also specify\n-       <code>--with-gxx-include-dir=<em>dirname</em></code> during configuration.\n-     </p>\n- </dd>\n-\n- <dt><code>--with-gxx-include-dir=&lt;include-files dir&gt;</code></dt>\n- <dd><p>Adds support for named libstdc++ include directory.  For instance,\n-        the following puts all the libstdc++ headers into a directory\n-        called &quot;2.97-20001008&quot; instead of the usual\n-        &quot;c++/(version)&quot;.\n-     </p>\n-        <pre>\n-   --with-gxx-include-dir=/foo/H-x86-gcc-3-c-gxx-inc/include/2.97-20001008</pre> </dd>\n-\n- <dt><code>--enable-cstdio  </code></dt>\n- <dd><p>This is an abbreviated form of <code>'--enable-cstdio=stdio'</code>\n-        (described next). This option can change the library ABI.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-cstdio=OPTION  </code></dt>\n- <dd><p>Select a target-specific I/O package. At the moment, the only\n-        choice is to use 'stdio', a generic &quot;C&quot; abstraction.\n-        The default is 'stdio'. \n-     </p>\n- </dd>\n-\n- <dt><code>--enable-clocale  </code></dt>\n- <dd><p>This is an abbreviated form of <code>'--enable-clocale=generic'</code>\n-        (described next). This option can change the library ABI.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-clocale=OPTION  </code></dt>\n- <dd><p>Select a target-specific underlying locale package.  The\n-        choices are 'ieee_1003.1-2001' to specify an X/Open, Standard Unix\n-        (IEEE Std. 1003.1-2001) model based on langinfo/iconv/catgets,\n-        'gnu' to specify a model based on functionality from the GNU C\n-        library (langinfo/iconv/gettext) (from <a\n-        href=\"http://sources.redhat.com/glibc/\">glibc</a>, the GNU C\n-        library), or 'generic' to use a generic &quot;C&quot;\n-        abstraction which consists of &quot;C&quot; locale info.\n-     </p>\n-\n-     <p>As part of the configuration process, the \"C\" library is\n-      probed both for sufficient vintage, and installed locale\n-      data. If either of these elements are not present, the C++\n-      locale model default to 'generic.' On glibc-based systems of\n-      version 2.2.5 and above with installed locale files, 'gnu' is\n-      automatically selected.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-libstdcxx-allocator  </code></dt>\n- <dd><p>This is an abbreviated form of\n-        <code>'--enable-libstdcxx-allocator=auto'</code> (described\n-        next). This option can change the library ABI.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-libstdcxx-allocator=OPTION  </code></dt>\n- <dd><p>Select a target-specific underlying std::allocator.  The\n-        choices are 'new' to specify a wrapper for new, 'malloc' to\n-        specify a wrapper for malloc, 'mt' for a fixed power of two allocator\n-        (<a href=\"ext/mt_allocator.html\">documented</a> under extensions),\n-\t'pool' for the SGI pooled allocator or 'bitmap' for a bitmap allocator.\n-\tThis option can change the library ABI.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-cheaders=OPTION  </code></dt>\n- <dd><p>This allows the user to define the approach taken for C header\n-        compatibility with C++. Options are c, c_std, and c_global.\n-        These correspond to the source directory's include/c,\n-        include/c_std, and include/c_global, and may also include\n-        include/c_compatibility.  The default is c_global.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-threads  </code></dt>\n- <dd><p>This is an abbreviated form of <code>'--enable-threads=yes'</code>\n-        (described next). This option can change the library ABI.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-threads=OPTION  </code></dt>\n- <dd><p>Select a threading library.  A full description is given in the\n-        general <a href=\"http://gcc.gnu.org/install/configure.html\">compiler\n-        configuration instructions</a>.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-libstdcxx-debug  </code></dt>\n- <dd><p>Build separate debug libraries in addition to what is normally built.\n-        By default, the debug libraries are compiled with \n-        <code> CXXFLAGS='-g3 -O0'</code>\n-        , are installed in <code>${libdir}/debug</code>, and have the\n-        same names and versioning information as the non-debug\n-        libraries. This option is off by default.\n-     </p>\n-     <p>Note this make command, executed in\n-        the build directory, will do much the same thing, without the\n-        configuration difference and without building everything twice: \n-        <code>make CXXFLAGS='-g3 -O0' all</code>\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-libstdcxx-debug-flags=FLAGS</code></dt>\n-\n- <dd><p>This option is only valid when <code> --enable-debug </code>\n-        is also specified, and applies to the debug builds only. With\n-        this option, you can pass a specific string of flags to the\n-        compiler to use when building the debug versions of libstdc++.\n-        FLAGS is a quoted string of options, like\n-     </p>\n-        <pre>\n-  --enable-libstdcxx-debug-flags='-g3 -O1 -gdwarf-2'</pre>\n- </dd>\n-\n- <dt><code>--enable-cxx-flags=FLAGS</code></dt>\n- <dd><p>With this option, you can pass a string of -f (functionality)\n-        flags to the compiler to use when building libstdc++. This\n-        option can change the library ABI. FLAGS is a quoted string of\n-        options, like\n-     </p>\n-        <pre>\n-  --enable-cxx-flags='-fvtable-gc -fomit-frame-pointer -ansi'</pre>\n-     <p>\n-        Note that the flags don't necessarily have to all be -f flags,\n-        as shown, but usually those are the ones that will make sense\n-        for experimentation and configure-time overriding.\n-     </p>\n-     <p>The advantage of --enable-cxx-flags over setting CXXFLAGS in\n-        the 'make' environment is that, if files are automatically\n-        rebuilt, the same flags will be used when compiling those files\n-        as well, so that everything matches.\n-     </p>\n-     <p>Fun flags to try might include combinations of\n-     </p>\n-        <pre>\n-  -fstrict-aliasing\n-  -fno-exceptions\n-  -ffunction-sections\n-  -fvtable-gc</pre>\n-     <p>and opposite forms (-fno-) of the same.  Tell us (the libstdc++\n-        mailing list) if you discover more!\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-c99  </code></dt>\n- <dd><p>The &quot;long long&quot; type was introduced in C99, along\n-        with many other functions for wide characters, and math\n-        classification macros, etc.  If enabled, all C99 functions not\n-        specified by the C++ standard will be put into <code>namespace\n-        __gnu_cxx</code>, and then all these names will\n-        be injected into namespace std, so that C99 functions can be\n-        used &quot;as if&quot; they were in the C++ standard (as they\n-        will eventually be in some future revision of the standard,\n-        without a doubt).  By default, C99 support is on, assuming the\n-        configure probes find all the necessary functions and bits\n-        necessary. This option can change the library ABI.\n-    </p>\n- </dd>\n-\n- <dt><code>--enable-wchar_t  </code>[default]</dt>\n- <dd><p>Template specializations for the &quot;wchar_t&quot; type are\n-        required for wide character conversion support.  Disabling\n-        wide character specializations may be expedient for initial\n-        porting efforts, but builds only a subset of what is required by\n-        ISO, and is not recommended.  By default, this option is on.\n-        This option can change the library ABI.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-long-long  </code></dt>\n- <dd><p>The &quot;long long&quot; type was introduced in C99.  It is\n-        provided as a GNU extension to C++98 in g++.  This flag builds\n-        support for &quot;long long&quot; into the library (specialized\n-        templates and the like for iostreams).  This option is on by default:\n-        if enabled, users will have to either use the new-style &quot;C&quot;\n-        headers by default (i.e., &lt;cmath&gt; not &lt;math.h&gt;)\n-        or add appropriate compile-time flags to all compile lines to\n-        allow &quot;C&quot; visibility of this feature (on GNU/Linux,\n-        the flag is -D_ISOC99_SOURCE, which is added automatically via\n-        CPLUSPLUS_CPP_SPEC's addition of _GNU_SOURCE).\n-        This option can change the library ABI. \n-     </p>\n- </dd>\n-\n- <dt><code>--enable-fully-dynamic-string  </code></dt>\n- <dd><p>This option enables a special version of basic_string avoiding\n-        the optimization that allocates empty objects in static memory.\n-\tMostly useful together with shared memory allocators, see PR\n-\tlibstdc++/16612 for details.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-concept-checks  </code></dt>\n- <dd><p>This turns on additional compile-time checks for instantiated\n-        library templates, in the form of specialized templates,\n-        <a href=\"19_diagnostics/howto.html#3\">described here</a>.  They\n-        can help users discover when they break the rules of the STL, before\n-        their programs run.\n-     </p>\n- </dd>\n-\n- <dt><code>--enable-symvers[=style]  </code></dt>\n-\n- <dd><p>In 3.1 and later, tries to turn on symbol versioning in the\n-        shared library (if a shared library has been\n-        requested). Values for 'style' that are currently supported\n-        are 'gnu', 'gnu-versioned-namespace', 'darwin', and\n-        'darwin-export'. Both gnu- options require that a recent\n-        version of the GNU linker be in use. Both darwin options are\n-        equivalent. With no style given, the configure script will try\n-        to guess correct defaults for the host system, probe to see if\n-        additional requirements are necessary and present for\n-        activation, and if so, will turn symbol versioning on. This\n-        option can change the library ABI.\n-     </p>\n-\n- </dd>\n-\n- <dt><code>--enable-visibility  </code></dt>\n- <dd><p> In 4.2 and later, enables or disables visibility attributes.\n-        If enabled (as by default), and the compiler seems capable of\n-        passing the simple sanity checks thrown at it, adjusts items\n-        in namespace std, namespace std::tr1, and namespace __gnu_cxx\n-        so that -fvisibility options work.\n-    </p>\n- </dd>\n-\n- <dt><code>--enable-libstdcxx-pch  </code></dt>\n- <dd><p>In 3.4 and later, tries to turn on the generation of\n-        stdc++.h.gch, a pre-compiled file including all the standard\n-        C++ includes. If enabled (as by default), and the compiler\n-        seems capable of passing the simple sanity checks thrown at\n-        it, try to build stdc++.h.gch as part of the make process. \n-        In addition, this generated file is used later on (by appending <code>\n-        --include bits/stdc++.h </code> to CXXFLAGS) when running the\n-        testsuite.\n-     </p>\n- </dd>\n-\n- <dt><code>--disable-hosted-libstdcxx  </code></dt>\n- <dd><p>By default, a complete <em>hosted</em> C++ library is built.  The\n-        C++ Standard also describes a <em>freestanding</em> environment,\n-        in which only a minimal set of headers are provided.  This option\n-        builds such an environment.\n-     </p>\n- </dd>\n-</dl>\n-<p>Return <a href=\"#top\">to the top of the page</a> or\n-   <a href=\"http://gcc.gnu.org/libstdc++/\">to the libstdc++ homepage</a>.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "61c6a8ba17b9a620366c2462518b66ed226beb3a", "filename": "libstdc++-v3/doc/html/debug.html", "status": "removed", "additions": 0, "deletions": 474, "changes": 474, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fdebug.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fdebug.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fdebug.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,474 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-   <meta name=\"AUTHOR\" content=\"bkoz@gcc.gnu.org (Benjamin Kosnik)\" />\n-   <meta name=\"KEYWORDS\" content=\"c++, libstdc++, gdb, g++, debug\" />\n-   <meta name=\"DESCRIPTION\" content=\"Debugging C++ binaries\" />\n-   <meta name=\"GENERATOR\" content=\"vi and ten fingers\" />\n-   <title>Debugging schemes and strategies</title>\n-<link rel=\"StyleSheet\" href=\"lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Copyright\" href=\"17_intro/license.html\" type=\"text/html\" />\n-</head>\n-<body>\n-\n-<h1 class=\"centered\"><a name=\"top\">Debugging schemes and strategies</a></h1>\n-\n-<p class=\"fineprint\"><em>\n-   The latest version of this document is always available at\n-   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/debug.html\">\n-   http://gcc.gnu.org/onlinedocs/libstdc++/debug.html</a>.\n-</em></p>\n-\n-<p><em>\n-   To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++ homepage</a>.\n-</em></p>\n-\n-<!-- ####################################################### -->\n-<hr />\n-<p>There are numerous things that can be done to improve the ease with\n-   which C++ binaries are debugged when using the GNU \n-   tool chain. Here are some of them.\n-</p>\n-\n-<h3 class=\"left\"><a name=\"gplusplus\">Compiler flags determine debug info</a></h3>\n-<p>The default optimizations and debug flags for a libstdc++ build are\n-   <code>-g -O2</code>. However, both debug and optimization flags can\n-   be varied to change debugging characteristics. For instance,\n-   turning off all optimization via the <code>-g -O0</code> flag will\n-   disable inlining, so that stepping through all functions, including\n-   inlined constructors and destructors, is possible. In addition,\n-   <code>-fno-eliminate-unused-debug-types</code> can be used when\n-   additional debug information, such as nested class info, is desired.\n-</p>\n-\n-<p>Or, the debug format that the compiler and debugger use to communicate\n-   information about source constructs can be changed via <code>\n-   -gdwarf-2 </code> or <code> -gstabs </code> flags: some debugging\n-   formats permit more expressive type and scope information to be\n-   shown in gdb.  The default debug information for a particular\n-   platform can be identified via the value set by the\n-   PREFERRED_DEBUGGING_TYPE macro in the gcc sources.\n-</p>\n-\n-<p>Many other options are available: please see\n-<a href=\"http://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html#Debugging%20Options\">\"Options for Debugging Your Program\"</a>\n-   in Using the GNU Compiler Collection (GCC) for a complete list.\n-</p>\n-\n-<h3 class=\"left\"><a name=\"lib\">Using special flags to make a debug binary</a></h3>\n-<p>If you would like debug symbols in libstdc++, there are two ways to\n-  build libstdc++ with debug flags. The first is to run make from the\n-  toplevel in a freshly-configured tree with\n-</p>\n-<pre>\n-     --enable-libstdcxx-debug\n-</pre>\n-<p>and perhaps</p>\n-<pre>\n-     --enable-libstdcxx-debug-flags='...'\n-</pre>\n-<p>to create a separate debug build. Both the normal build and the\n-   debug build will persist, without having to specify\n-   <code>CXXFLAGS</code>, and the debug library will be installed in a\n-   separate directory tree, in <code>(prefix)/lib/debug</code>. For\n-   more information, look at the <a href=\"configopts.html\">configuration\n-   options</a> document.\n-</p>\n-\n-<p>A second approach is to use the configuration flags \n-</p>\n-<pre>\n-     make CXXFLAGS='-g3 -O0' all\n-</pre>\n-\n-<p>This quick and dirty approach is often sufficient for quick\n-  debugging tasks, when you cannot or don't want to recompile your\n-  application to use the <a href=\"#safe\">debug mode</a>.</p>\n-\n-<h3 class=\"left\"><a name=\"safe\">The libstdc++ debug mode</a></h3>\n-<p>By default, libstdc++ is built with efficiency in mind, and\n-  therefore performs little or no error checking that is not required\n-  by the C++ standard. This means that programs that incorrectly use\n-  the C++ standard library will exhibit behavior that is not portable\n-  and may not even be predictable, because they tread into \n-  implementation-specific or undefined behavior. To detect some of\n-  these errors before they can become problematic, libstdc++ offers a\n-  debug mode that provides additional checking of library facilities,\n-  and will report errors in the use of libstdc++ as soon as they can\n-  be detected by emitting a description of the problem to standard\n-  error and aborting the program.  This debug mode is available with\n-  GCC 3.4.0 and later versions. </p>\n-\n-<p>The libstdc++ debug mode performs checking for many areas of the C++\n-  standard, but the focus is on checking interactions among standard\n-  iterators, containers, and algorithms, including:</p>\n-\n-  <ul>\n-    <li><em>Safe iterators</em>: Iterators keep track of the\n-    container whose elements they reference, so errors such as\n-    incrementing a past-the-end iterator or dereferencing an iterator\n-    that points to a container that has been destructed are diagnosed\n-    immediately.</li>\n-    \n-    <li><em>Algorithm preconditions</em>: Algorithms attempt to\n-    validate their input parameters to detect errors as early as\n-    possible. For instance, the <code>set_intersection</code>\n-    algorithm requires that its iterator\n-    parameters <code>first1</code> and <code>last1</code> form a valid\n-    iterator range, and that the sequence\n-    [<code>first1</code>, <code>last1</code>) is sorted according to\n-    the same predicate that was passed\n-    to <code>set_intersection</code>; the libstdc++ debug mode will\n-    detect an error if the sequence is not sorted or was sorted by a\n-    different predicate.</li>\n-  </ul>\n-\n-<h4 class=\"left\">Using the libstdc++ debug mode</h4>\n-<p>To use the libstdc++ debug mode, compile your application with the\n-  compiler flag <code>-D_GLIBCXX_DEBUG</code>. Note that this flag\n-  changes the sizes and behavior of standard class templates such\n-  as <code>std::vector</code>, and therefore you can only link code\n-  compiled with debug mode and code compiled without debug mode if no\n-  instantiation of a container is passed between the two translation\n-  units.</p>\n-\n-<p>By default, error messages are formatted to fit on lines of about\n-  78 characters.  The environment variable\n-  <code>GLIBCXX_DEBUG_MESSAGE_LENGTH</code> can be used to request a\n-  different length.</p>\n-\n-<p>For information about the design of the libstdc++ debug mode,\n-  please see the <a href=\"debug_mode.html\">libstdc++ debug mode design\n-  document</a>.</p>\n-\n-<h4 class=\"left\">Using the debugging containers without debug\n-  mode</h4>\n-<p>When it is not feasible to recompile your entire application, or\n-  only specific containers need checking, debugging containers are\n-  available as GNU extensions. These debugging containers are\n-  functionally equivalent to the standard drop-in containers used in\n-  debug mode, but they are available in a separate namespace as GNU\n-  extensions and may be used in programs compiled with either release\n-  mode or with debug mode. The\n-  following table provides the names and headers of the debugging\n-  containers:\n-</p>\n-\n-<table title=\"Debugging containers\" border=\"1\">\n-  <tr>\n-    <th>Container</th>\n-    <th>Header</th>\n-    <th>Debug container</th>\n-    <th>Debug header</th>\n-  </tr>\n-  <tr>\n-    <td>std::bitset</td>\n-    <td>&lt;bitset&gt;</td>\n-    <td>__gnu_debug::bitset</td>\n-    <td>&lt;debug/bitset&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::deque</td>\n-    <td>&lt;deque&gt;</td>\n-    <td>__gnu_debug::deque</td>\n-    <td>&lt;debug/deque&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::list</td>\n-    <td>&lt;list&gt;</td>\n-    <td>__gnu_debug::list</td>\n-    <td>&lt;debug/list&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::map</td>\n-    <td>&lt;map&gt;</td>\n-    <td>__gnu_debug::map</td>\n-    <td>&lt;debug/map&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::multimap</td>\n-    <td>&lt;map&gt;</td>\n-    <td>__gnu_debug::multimap</td>\n-    <td>&lt;debug/map&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::multiset</td>\n-    <td>&lt;set&gt;</td>\n-    <td>__gnu_debug::multiset</td>\n-    <td>&lt;debug/set&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::set</td>\n-    <td>&lt;set&gt;</td>\n-    <td>__gnu_debug::set</td>\n-    <td>&lt;debug/set&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::string</td>\n-    <td>&lt;string&gt;</td>\n-    <td>__gnu_debug::string</td>\n-    <td>&lt;debug/string&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::wstring</td>\n-    <td>&lt;string&gt;</td>\n-    <td>__gnu_debug::wstring</td>\n-    <td>&lt;debug/string&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::basic_string</td>\n-    <td>&lt;string&gt;</td>\n-    <td>__gnu_debug::basic_string</td>\n-    <td>&lt;debug/string&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::vector</td>\n-    <td>&lt;vector&gt;</td>\n-    <td>__gnu_debug::vector</td>\n-    <td>&lt;debug/vector&gt;</td>\n-  </tr>\n-</table>\n-\n-<p>In addition, when compiling in C++0x mode, these additional\n-containers have additional debug capability.\n-</p>\n-\n-<table>\n-  <tr>\n-    <td>std::unordered_map</td>\n-    <td>&lt;unordered_map&gt;</td>\n-    <td>__gnu_debug::unordered_map</td>\n-    <td>&lt;debug/unordered_map&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::unordered_multimap</td>\n-    <td>&lt;unordered_map&gt;</td>\n-    <td>__gnu_debug::unordered_multimap</td>\n-    <td>&lt;debug/unordered_map&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::unordered_set</td>\n-    <td>&lt;unordered_set&gt;</td>\n-    <td>__gnu_debug::unordered_set</td>\n-    <td>&lt;debug/unordered_set&gt;</td>\n-  </tr>\n-  <tr>\n-    <td>std::unordered_multiset</td>\n-    <td>&lt;unordered_set&gt;</td>\n-    <td>__gnu_debug::unordered_multiset</td>\n-    <td>&lt;debug/unordered_set&gt;</td>\n-  </tr>\n-</table>\n-\n-<h4 class=\"left\">Debug mode semantics</h4>\n-<p>A program that uses the C++ standard library correctly\n-  will maintain the same semantics under debug mode as it had with\n-  the normal (release) library. All functional and exception-handling\n-  guarantees made by the normal library also hold for the debug mode\n-  library, with one exception: performance guarantees made by the\n-  normal library may not hold in the debug mode library. For\n-  instance, erasing an element in a <code>std::list</code> is a\n-  constant-time operation in normal library, but in debug mode it is\n-  linear in the number of iterators that reference that particular\n-  list. So while your (correct) program won't change its results, it \n-  is likely to execute more slowly.</p>\n-\n-<p>libstdc++ includes many extensions to the C++ standard library. In\n-  some cases the extensions are obvious, such as the hashed\n-  associative containers, whereas other extensions give predictable\n-  results to behavior that would otherwise be undefined, such as\n-  throwing an exception when a <code>std::basic_string</code> is\n-  constructed from a NULL character pointer. This latter category also\n-  includes implementation-defined and unspecified semantics, such as\n-  the growth rate of a vector. Use of these extensions is not\n-  considered incorrect, so code that relies on them will not be\n-  rejected by debug mode. However, use of these extensions may affect\n-  the portability of code to other implementations of the C++ standard\n-  library, and is therefore somewhat hazardous. For this reason, the\n-  libstdc++ debug mode offers a \"pedantic\" mode (similar to\n-  GCC's <code>-pedantic</code> compiler flag) that attempts to emulate\n-  the semantics guaranteed by the C++ standard. For\n-  instance, constructing a <code>std::basic_string</code> with a NULL\n-  character pointer would result in an exception under normal mode or\n-  non-pedantic debug mode (this is a libstdc++ extension), whereas\n-  under pedantic debug mode libstdc++ would signal an error. To enable\n-  the pedantic debug mode, compile your program with\n-  both <code>-D_GLIBCXX_DEBUG</code>\n-  and <code>-D_GLIBCXX_DEBUG_PEDANTIC</code> .\n-  (N.B. In GCC 3.4.x and 4.0.0, due to a bug,\n-  <code>-D_GLIBXX_DEBUG_PEDANTIC</code> was also needed. The problem has\n-  been fixed in GCC 4.0.1 and later versions.) </p>\n-\n-<p>The following library components provide extra debugging\n-  capabilities in debug mode:</p>\n-<ul>\n-  <li><code>std::basic_string</code> (no safe iterators and see note below)</li>\n-  <li><code>std::bitset</code></li>\n-  <li><code>std::deque</code></li>\n-  <li><code>std::list</code></li>\n-  <li><code>std::map</code></li>\n-  <li><code>std::multimap</code></li>\n-  <li><code>std::multiset</code></li>\n-  <li><code>std::set</code></li>\n-  <li><code>std::vector</code></li>\n-  <li><code>std::unordered_map</code></li>\n-  <li><code>std::unordered_multimap</code></li>\n-  <li><code>std::unordered_set</code></li>\n-  <li><code>std::unordered_multiset</code></li>\n-</ul>\n-\n-<p>N.B. although there are precondition checks for some string operations,\n-e.g.  <code>operator[]</code>,\n-they will not always be run when using the <code>char</code> and\n-<code>wchar_t</code> specialisations (<code>std::string</code> and\n-<code>std::wstring</code>).  This is because libstdc++ uses GCC's\n-<code>extern template</code> extension to provide explicit instantiations\n-of <code>std::string</code> and <code>std::wstring</code>, and those\n-explicit instantiations don't include the debug-mode checks.  If the\n-containing functions are inlined then the checks will run, so compiling\n-with <code>-O1</code> might be enough to enable them.  Alternatively\n-<code>-D_GLIBCXX_EXTERN_TEMPLATE=0</code> will suppress the declarations\n-of the explicit instantiations and cause the functions to be instantiated\n-with the debug-mode checks included, but this is unsupported and not\n-guaranteed to work.  For full debug-mode support you can use the\n-<code>__gnu_debug::basic_string</code> debugging container directly,\n-which always works correctly.\n-</p>\n-\n-<h3 class=\"left\"><a name=\"mem\">Tips for memory leak hunting</a></h3>\n-\n-<p>There are various third party memory tracing and debug utilities\n-   that can be used to provide detailed memory allocation information\n-   about C++ code. An exhaustive list of tools is not going to be\n-   attempted, but includes <code>mtrace</code>, <code>valgrind</code>,\n-   <code>mudflap</code>, and the non-free commercial product\n-   <code>purify</code>. In addition, <code>libcwd</code> has a\n-   replacement for the global new and delete operators that can track\n-   memory allocation and deallocation and provide useful memory\n-   statistics.\n-</p>\n-\n-<p>Regardless of the memory debugging tool being used, there is one\n-   thing of great importance to keep in mind when debugging C++ code\n-   that uses <code>new</code> and <code>delete</code>:\n-   there are different kinds of allocation schemes that can be used by\n-   <code> std::allocator </code>. For implementation details, see the\n-   <a href=\"ext/mt_allocator.html\">mt allocator</a> documentation and\n-   look specifically for <code>GLIBCXX_FORCE_NEW</code>. \n-</p>\n-\n-<p>In a nutshell, the default allocator used by <code>\n-   std::allocator</code> is a high-performance pool allocator, and can\n-   give the mistaken impression that in a suspect executable, memory\n-   is being leaked, when in reality the memory \"leak\" is a pool being\n-   used by the library's allocator and is reclaimed after program\n-   termination.\n-</p>\n-\n-<p>For valgrind, there are some specific items to keep in mind. First\n-   of all, use a version of valgrind that will work with current GNU\n-   C++ tools: the first that can do this is valgrind 1.0.4, but later\n-   versions should work at least as well. Second of all, use a\n-   completely unoptimized build to avoid confusing valgrind. Third,\n-   use GLIBCXX_FORCE_NEW to keep extraneous pool allocation noise from\n-   cluttering debug information.\n-</p>\n-\n-<p>Fourth, it may be necessary to force deallocation in other\n-   libraries as well, namely the \"C\" library. On linux, this can be\n-   accomplished with the appropriate use of the\n-   <code>__cxa_atexit</code> or <code>atexit</code> functions.\n-</p>\n-\n-<pre>\n-   #include &lt;cstdlib&gt;\n-\n-   extern \"C\" void __libc_freeres(void);\n-\n-   void do_something() { }\n-\n-   int main()\n-   {\n-     atexit(__libc_freeres);\n-     do_something();\n-     return 0;\n-   }\n-</pre>\n-\n-\n-<p>or, using <code>__cxa_atexit</code>:</p>\n-\n-<pre>\n-   extern \"C\" void __libc_freeres(void);\n-   extern \"C\" int __cxa_atexit(void (*func) (void *), void *arg, void *d);\n-\n-   void do_something() { }\n-\n-   int main()\n-   {\n-      extern void* __dso_handle __attribute__ ((__weak__));\n-      __cxa_atexit((void (*) (void *)) __libc_freeres, NULL, \n-                   &amp;__dso_handle ? __dso_handle : NULL);\n-      do_test();\n-      return 0;\n-   }\n-</pre>\n-\n-<p>Suggested valgrind flags, given the suggestions above about setting\n-   up the runtime environment, library, and test file, might be:\n-</p>\n-<pre> \n-   valgrind -v --num-callers=20 --leak-check=yes --leak-resolution=high --show-reachable=yes a.out\n-</pre>\n-\n-\n-<h3 class=\"left\"><a name=\"gdb\">Some gdb strategies</a></h3>\n-<p>Many options are available for gdb itself: please see <a\n-   href=\"http://sources.redhat.com/gdb/current/onlinedocs/gdb_13.html#SEC109\">\n-   \"GDB features for C++\" </a> in the gdb documentation. Also\n-   recommended: the other parts of this manual.\n-</p>\n-\n-<p>These settings can either be switched on in at the gdb command\n-   line, or put into a .gdbint file to establish default debugging\n-   characteristics, like so:\n-</p>\n-\n-<pre>\n-   set print pretty on\n-   set print object on\n-   set print static-members on\n-   set print vtbl on\n-   set print demangle on\n-   set demangle-style gnu-v3\n-</pre>\n-\n-\n-<h3 class=\"left\"><a name=\"verbterm\">Tracking uncaught exceptions</a></h3>\n-<p>The <a href=\"18_support/howto.html#4\">verbose termination handler</a>\n-   gives information about uncaught exceptions which are killing the\n-   program.  It is described in the linked-to page.\n-</p>\n-\n-\n-<p>Return <a href=\"#top\">to the top of the page</a> or\n-   <a href=\"http://gcc.gnu.org/libstdc++/\">to the libstdc++ homepage</a>.\n-</p>\n-\n-\n-<!-- ####################################################### -->\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-\n-</body>\n-</html>"}, {"sha": "c5413decd27f833baf65d98f6afe637e9c8ee4ce", "filename": "libstdc++-v3/doc/html/documentation.html", "status": "removed", "additions": 0, "deletions": 361, "changes": 361, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fdocumentation.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea", "patch": "@@ -1,361 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n- <meta name=\"KEYWORDS\" \n-  content=\"libstdc++, homepage, home, C++, library, c++, std, g++, STL\" />\n- <title>The GNU C++ Library</title>\n-<link rel=\"StyleSheet\" href=\"lib3styles.css\" type=\"text/css\" />\n-<link rel=\"Copyright\" href=\"17_intro/license.html\" type=\"text/html\" />\n-<link rel=\"Help\" href=\"faq/index.html\" type=\"text/html\" title=\"F.A.Q.\" />\n-</head>\n-<body>\n-\n-<h1>The GNU C++ Library</h1>\n-\n-\n-<h2><a name=\"3\">Table of Contents</a></h2>\n-\n-<p>\n-The GNU Standard C++ Library is an ongoing <a\n-href=\"http://gcc.gnu.org/libstdc++\">project</a> to implement the ISO\n-14882 Standard C++ library as described in chapters 17 through 27 and\n-annex D, extensions as described by TR1, and future C++ library\n-standards still in progress. For those who want to see exactly how far\n-the project has come, or just want the latest bleeding-edge code, the\n-up-to-date source is always publicly available over anonymous SVN,\n-and can be browsed over the <a\n-href=\"http://gcc.gnu.org/svn.html\">web</a>.\n-</p>\n-\n-<p>Stable versions of libstdc++ are included with releases of\n-   <a href=\"http://gcc.gnu.org/releases.html\">the GCC compilers</a>.\n-</p>\n-  <ul>\n-   <li>Introduction\n-   <ul>\n-\n-    <li> Status\n-<ul>\n-\t<li>Implementation Status\n-   \t\t<ul>\n-   \t\t<li><a href=\"17_intro/c++1998_status.html\">C++1998</a>, \n-\t\tincluding <a href=\"17_intro/howto.html#5\">implementation-defined behavior</a> and  <a href=\"ext/howto.html#5\">LWG issues</a> </li>\n-   \t\t<li><a href=\"17_intro/tr1_status.html\">C++TR1</a></li>\n-   \t\t<li><a href=\"17_intro/c++0x_status.html\">C++0x</a></li>\n-   \t\t<li>Extensions</li>\n-   \t\t</ul>\n-   \t</li>\n-         <li><a href=\"17_intro/license.html\">License</a></li>\n-         <li><a href=\"http://gcc.gnu.org/bugzilla/buglist.cgi?cmdtype=runnamed&amp;namedcmd=libstdc%2B%2B\">Known Bugs</a></li>\n-\n-</ul>\n-    </li>\n-\n-\n-\n-    <li> Configuring, Building, Testing, Installing \n-<ul>\n-   <li><a href=\"install.html\">Getting started: configure, build, install</a>\n-   </li>\n-   <li><a href=\"configopts.html\">Configure options</a></li>\n-   <li><a href=\"test.html\">Testing details</a></li>\n-</ul>\n-  </li>\n-\n-    <li> Using the Library \n-      <ul>\n-         <li>Header Files\n-         <ul>\n-         <li><a href=\"17_intro/howto.html#2.0\">Available headers</a></li>\n-         <li><a href=\"17_intro/howto.html#2.1\">Mixing headers</a></li>\n-         <li><a href=\"17_intro/howto.html#2.2\">The C Headers and <code>namespace std</code></a></li>\n-         <li><a href=\"17_intro/howto.html#2.3\">Precompiled Headers</a></li>\n-         </ul>\n-\t </li>\n-\n-         <li>Namespaces\n-         <ul>\n-         <li><a href=\"17_intro/howto.html#3.0\">Available namespaces</a></li>\n-         <li><a href=\"17_intro/howto.html#3.1\">Namespace <code>std::</code></a></li>\n-         <li><a href=\"17_intro/howto.html#3.2\">Using namespace composition</a></li>\n-         </ul>\n-\t </li>\n-         <li><a href=\"17_intro/howto.html#6\">Macros</a></li>\n-         <li>Command line options</li>\n-\n- \t<li>Concurrency\n-         <ul>\n-\t  <li><a href=\"faq/index.html#5_6\">Is it thread safe?</a></li>\n-         <li><a href=\"17_intro/howto.html#7\">Thread safety history and evolution</a></li>\n-\t  <li><a href=\"23_containers/howto.html#3\">Containers</a></li>\n-\t  <li><a href=\"27_io/howto.html#9\">IO</a></li>\n-         </ul>\n-\t </li>\n-         <li>Exception safety</li>\n-\n-         <li><a href=\"debug.html\">Debugging support</a></li>\n-      </ul>\n-    </li>\n-\n-   </ul>\n-   </li>\n-\n-   <li>Support\n-   <ul>\n-     <li><a href=\"18_support/howto.html#1\">Types</a></li>\n-     <li><a href=\"18_support/howto.html#2\">Implementation properties of builtin types</a></li>\n-     <li><a href=\"18_support/howto.html#3\">Start and Termination</a></li>\n-     <li><a href=\"18_support/howto.html#4\">Verbose <code>terminate</code></a></li>\n-     <li><a href=\"18_support/howto.html#5\">Dynamic memory management</a></li>\n-   </ul>\n-   </li>\n-\n-   <li>Diagnostics\n-   <ul>\n-     <li>Exceptions\n-\n-     <ul>\n-     <li>Exception class hierarchy</li>\n-     <li><a href=\"19_diagnostics/howto.html#1\">Adding data to exceptions</a></li>\n-     <li>Cancellation</li>\n-     </ul>\n-     </li>\n-\n-     <li><a href=\"19_diagnostics/howto.html#3\">Concept checking</a></li>\n-   </ul>\n-   </li>\n-\n-   <li>General Utilities\n-   <ul>\n-     <li><a href=\"20_util/howto.html#3\">Functors</a></li>\n-     <li><a href=\"20_util/howto.html#4\">Pairs</a></li>\n-\n-     <li>Memory\n-     <ul>\n-     <li><a href=\"20_util/allocator.html\">allocator</a></li>\n-     <li>auto_ptr\n-     <ul>\n-     <li><a href=\"20_util/howto.html#1\"><code>auto_ptr</code> is not omnipotent</a></li>\n-     <li><a href=\"20_util/howto.html#2\"><code>auto_ptr</code> inside container classes</a></li>\n-    </ul>\n-    </li>\n-     <li>shared_ptr\n-     <ul>\n-     <li><a href=\"20_util/shared_ptr.html\">Notes on the <code>shared_ptr</code>\n-     implementation</a></li>\n-    </ul>\n-     </li>\n-   </ul>\n-   </li>\n-   </ul>\n-   </li>\n-\n-   <li>Strings\n-   <ul>\n-     <li><a href=\"21_strings/howto.html#2\">A case-insensitive string class</a></li>\n-     <li><a href=\"21_strings/howto.html#3\">Breaking a C++ string into tokens</a></li>\n-     <li><a href=\"21_strings/howto.html#4\">Simple transformations</a></li>\n-     <li><a href=\"21_strings/howto.html#5\">Making strings of arbitrary character types</a></li>\n-     <li><a href=\"21_strings/howto.html#6\">Shrink-to-fit strings</a></li>\n-     <li><a href=\"21_strings/howto.html#1\">MFC's CString</a></li>\n-   </ul>\n-   </li>\n-\n-   <li>Localization\n-   <ul>\n-     <li><a href=\"22_locale/howto.html#1\">class locale</a></li>\n-     <li><a href=\"22_locale/howto.html#2\">class codecvt</a></li>\n-     <li><a href=\"22_locale/howto.html#3\">class ctype</a></li>\n-     <li><a href=\"22_locale/howto.html#7\">Correct Transformations</a></li>\n-     <li><a href=\"22_locale/howto.html#4\">class messages</a></li>\n-   </ul>\n-   </li>\n-\n-   <li>Containers\n-   <ul>\n-     <li><a href=\"23_containers/howto.html#1\">Making code unaware of the container/array difference</a></li>\n-     <li><a href=\"23_containers/howto.html#4\">&quot;Hinting&quot; during insertion</a></li>\n-     <li><a href=\"23_containers/howto.html#6\"><code>std::list::size()</code> is O(n)!</a></li>\n-     <li><a href=\"23_containers/howto.html#7\">Space overhead management for vectors</a></li>\n-     <li><a href=\"23_containers/howto.html#2\">Variable-sized bitmasks</a></li>\n-     <li><a href=\"23_containers/howto.html#5\">Bitmasks and string arguments</a></li>\n-   </ul>\n-   </li>\n-\n-   <li>Iterators\n-   <ul>\n-     <li><a href=\"24_iterators/howto.html#1\">They ain't pointers!</a></li>\n-     <li><a href=\"24_iterators/howto.html#2\">It ends <em>where?</em></a></li>\n-   </ul>\n-   </li>\n-\n-   <li>Algorithms\n-   <ul>\n-     <li><a href=\"25_algorithms/howto.html#1\">Prerequisites</a></li>\n-     <li><a href=\"25_algorithms/howto.html#2\">Specializations for <code>swap</code></a></li>\n-   </ul>\n-   </li>\n-\n-   <li>Numerics\n-   <ul>\n-     <li><a href=\"26_numerics/howto.html#1\">Complex Number Processing</a></li>\n-     <li><a href=\"26_numerics/howto.html#2\">Array Processing</a></li>\n-     <li><a href=\"26_numerics/howto.html#3\">Numerical Functions</a></li>\n-     <li><a href=\"26_numerics/howto.html#4\">C99</a></li>\n-   </ul>\n-   </li>\n-\n-   <li>Input/Output\n-   <ul>\n-     <li><a href=\"27_io/howto.html#1\">Copying a file</a></li>\n-     <li><a href=\"27_io/howto.html#2\">The buffering is screwing up my program!</a></li>\n-     <li><a href=\"27_io/howto.html#3\">Binary I/O</a></li>\n-     <li><a href=\"27_io/howto.html#5\">What is this &lt;sstream&gt;/stringstreams thing?</a></li>\n-     <li><a href=\"27_io/howto.html#6\">Deriving a stream buffer</a></li>\n-     <li><a href=\"27_io/howto.html#7\">More on binary I/O</a></li>\n-     <li><a href=\"27_io/howto.html#8\">Pathetic performance?  Ditch C.</a></li>\n-     <li><a href=\"27_io/howto.html#9\">Threads and I/O</a></li>\n-     <li><a href=\"27_io/howto.html#10\">Which header?</a></li>\n-     <li><a href=\"27_io/howto.html#11\">Using FILE*s and file descriptors with IOStreams</a></li>\n-   </ul>\n-   </li>\n-\n-   <li>Extensions\n-   <ul>\n-     <li><a href=\"ext/howto.html#4\">Compile-time checks</a></li>\n-     <li><a href=\"ext/debug_mode.html\">Debug mode</a></li>\n-     <li><a href=\"ext/parallel_mode.html\">Parallel mode</a></li>\n-     <li> Allocators\n-     <ul>\n-     <li><a href=\"ext/mt_allocator.html\"><code>__mt_alloc</code> </a></li>\n-     <li><a href=\"ext/ballocator_doc.html\">Bitmap Allocator</a></li>\n-     </ul>\n-     </li>\n-\n-     <li> Containers\n-       <ul> \n-       <li><a href=\"ext/pb_ds/index.html\">Policy Based Data Structures</a></li>\n-       <li><a href=\"ext/howto.html#1\">Ropes and trees and hashes, oh my!</a></li>\n-       </ul>\n-     </li>\n-\n-     <li> Algorithms\n-<ul>\n-     <li><a href=\"ext/sgiexts.html\">HP/SGI STL Extensions</a></li>\n-</ul>\n-</li>\n-\n-     <li> Input/Output\n-<ul>\n-     <li><a href=\"27_io/howto.html#11\">Derived filebuf classes</a></li>\n-</ul>\n-</li>\n-     <li><a href=\"ext/../18_support/howto.html#6\">Demangling</a></li>\n-     <li><a href=\"ext/concurrence.html\">Concurrency: Threads and Atomics</a></li>\n-   </ul>\n-   </li>\n-\n-   <li>Appendix\n-   <ul>\n-\n-     <li>A. <a name=\"5\">Contributing and Maintenance</a>\n-<ul>\n-   <li><a href=\"17_intro/contribute.html\">Contributor checklist</a></li>\n-   <li><a href=\"http://gcc.gnu.org/svnwrite.html\">Getting write access\n-       (look for &quot;Write after approval&quot;)</a></li>\n-   <li><a href=\"17_intro/BADNAMES\">Identifier blacklist</a>\n-       - names to avoid because of potential collisions</li>\n-   <li><a href=\"17_intro/C++STYLE\">Coding style, by example</a></li>\n-\n-   <li> Comment coding style, a doxygen markup style guide. In the source docs/doxygen directory, see <a href=\"http://gcc.gnu.org/viewcvs/*checkout*/trunk/libstdc%2B%2B-v3/docs/doxygen/guide.html\">guide.html</a>.</li>\n-   <li><a href=\"17_intro/DESIGN\">Design Notes</a>\n-       - notes on the implementation plan</li>\n-   <li><a href=\"17_intro/configury.html\">Editing configure and make files</a></li>\n-  <li>Header policy, namespace map, API conventions</li>\n-</ul>\n-</li>\n-\n-     <li>B. Porting\n-\n-<ul>\n-     <li><a href=\"17_intro/porting.html\">Porting to new hardware or operating systems.</a></li>\n-     <li><a href=\"17_intro/abi.html\">ABI Policy and Guidelines</a></li>\n-     <li><a href=\"17_intro/api.html\">API Evolution and Deprecation History</a></li>\n-     <li><a href=\"17_intro/backwards_compatibility.html\">Backwards Compatibility</a></li>\n-</ul>\n-</li>\n-\n-     <li>C. <a href=\"http://www.gnu.org/software/libc/manual/html_node/Free-Manuals.html#Free-Manuals\">Free Software Needs Free Documentation </a></li>\n-\n-   </ul>\n-   </li>\n-  </ul>\n-<!-- endlist -->\n-\n-\n-<hr />\n-<br />\n-<h2><a name=\"4\">Source-Level Documentation</a></h2>\n-<p>The library sources have been specially formatted so that with the\n-   proper invocation of another tool (Doxygen), a set of HTML pages\n-   are generated from the sources files themselves.  The resultant\n-   documentation is referred to as Source-Level Documentation, and is\n-   useful for examining the signatures of public member functions for\n-   the library classes, finding out what is in a particular include\n-   file, looking at inheritance diagrams, etc.\n-</p>\n-<p>The source-level documentation for the most recent releases can\n-   be viewed online:\n-</p>\n-<ul>\n- <li><a href=\"libstdc++-html-USERS-3.4/index.html\">for the 3.4 release</a></li>\n- <li><a href=\"libstdc++-html-USERS-4.1/index.html\">for the 4.1 release</a></li>\n- <li><a href=\"libstdc++-html-USERS-4.2/index.html\">for the 4.2 release</a></li>\n- <li><a href=\"latest-doxygen/index.html\">&quot;the latest collection&quot;</a>\n-   (for the main development tree; see the date on the first page)\n- </li>\n-</ul>\n-<p>This generated HTML collection, as above, is also available for download in\n-   the libstdc++ snapshots directory at\n-   <code>&lt;URL:ftp://gcc.gnu.org/pub/gcc/libstdc++/doxygen/&gt;</code>.\n-   You will almost certainly need to use one of the\n-   <a href=\"http://gcc.gnu.org/mirrors.html\">mirror sites</a> to download\n-   the tarball.  After unpacking, simply load libstdc++-html-*/index.html\n-   into a browser.\n-</p>\n-<p>Documentation for older releases is available for download only, not\n-   online viewing.\n-</p>\n-<p>In addition, an initial set of man pages are also available in the\n-   same place as the HTML collections.  Start with C++Intro(3).\n-</p>\n-\n-<hr />\n-<br />\n-<h2><a name=\"7\" href=\"faq/index.html\">Frequently Asked Questions</a></h2>\n-\n-<hr />\n-<br />\n-<p><strong>All of these documents</strong> (in fact, this entire homepage set)\n-   are bundled with the library source, under the <code>docs</code>\n-   subdirectory, for releases and snapshots.  The sole exception is the\n-   automatically-generated source documentation, available separately.\n-</p>\n-\n-<!-- ####################################################### -->\n-<p>Return <a href=\"http://gcc.gnu.org/libstdc++/\">to the libstdc++ homepage</a>.</p>\n-\n-\n-<hr />\n-<p class=\"fineprint\"><em>\n-See <a href=\"17_intro/license.html\">license.html</a> for copying conditions.\n-Comments and suggestions are welcome, and may be sent to\n-<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n-</em></p>\n-\n-</body>\n-</html>"}, {"sha": "064f5935e72644f6e23e3a5fe16cd9b3691c52ad", "filename": "libstdc++-v3/doc/html/ext/ballocator_doc.html", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fballocator_doc.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fballocator_doc.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fballocator_doc.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "e6bf4438f63940dc08046d4e02ea59795a33242f", "filename": "libstdc++-v3/doc/html/ext/concurrence.html", "status": "removed", "additions": 0, "deletions": 342, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fconcurrence.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fconcurrence.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fconcurrence.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "7e9d9bafae92c97dc10d21f5add7d4e2201bb4a2", "filename": "libstdc++-v3/doc/html/ext/debug_mode.html", "status": "removed", "additions": 0, "deletions": 578, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fdebug_mode.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fdebug_mode.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fdebug_mode.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "2e88c660a61709f5889b0d26298c038a8c56451b", "filename": "libstdc++-v3/doc/html/ext/howto.html", "status": "removed", "additions": 0, "deletions": 675, "changes": 675, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fhowto.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "b53e7e6200eca2ec5d83d200071eaa5c29b9b599", "filename": "libstdc++-v3/doc/html/ext/mt_allocator.html", "status": "removed", "additions": 0, "deletions": 560, "changes": 560, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fmt_allocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fmt_allocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fmt_allocator.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "7ca8dbe937cc75f9f01ee39066bca57661d05c29", "filename": "libstdc++-v3/doc/html/ext/parallel_mode.html", "status": "removed", "additions": 0, "deletions": 593, "changes": 593, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fparallel_mode.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fparallel_mode.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fparallel_mode.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "64b8e3138c19e163a9fe7a3c44025e59c752c82c", "filename": "libstdc++-v3/doc/html/ext/sgiexts.html", "status": "removed", "additions": 0, "deletions": 253, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fsgiexts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fsgiexts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fsgiexts.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "ff6cd65c9a6ee419951ba0e014fefa94ada0d5d7", "filename": "libstdc++-v3/doc/html/faq/index.html", "status": "removed", "additions": 0, "deletions": 1215, "changes": 1215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq%2Findex.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "96ff103fb0452ff0d3c4580dc13b8cc9121c46d5", "filename": "libstdc++-v3/doc/html/index.html", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Findex.html?ref=620039adfb7162e9a9ce6a9b90fd3f14d711c5fc"}, {"sha": "3166ebc0a86ff4287b3be166940ca1217989ec34", "filename": "libstdc++-v3/doc/html/install.html", "status": "removed", "additions": 0, "deletions": 240, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Finstall.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "ee88c366cd47bcbcd11efd0f7f4c6049aac99db5", "filename": "libstdc++-v3/doc/html/lib3styles.css", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Flib3styles.css", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Flib3styles.css", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Flib3styles.css?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}, {"sha": "8a8694c2d6ef9145edba6f299ce91bd88c8109ed", "filename": "libstdc++-v3/doc/html/test.html", "status": "removed", "additions": 0, "deletions": 722, "changes": 722, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ftest.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ftest.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ftest.html?ref=c9024a78a93bd19d869f1bd3bb1fdfcc2e540aea"}]}