{"sha": "0e83f45aa68afba1d7938b186a90e3db3a3f0ee2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU4M2Y0NWFhNjhhZmJhMWQ3OTM4YjE4NmE5MGUzZGIzYTNmMGVlMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-10-04T22:19:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-04T22:19:44Z"}, "message": "re PR libstdc++/49561 ([C++0x] std::list::size complexity)\n\n2011-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/49561\n\t* include/bits/stl_list.h (_List_base<>::_List_impl::_M_size):\n\tAdd in C++0x mode.\n\t(_List_base<>::_List_impl, _List_base<>::_M_get_node,\n\t_List_base<>::_M_put_node, _List_base<>::_List_base(_List_base&&),\n\tlist<>::size, list<>::swap, list<>::splice): Use it.\n\t(operator==(const list<>&, const list<>&)): Rewrite in C++0x mode.\n\t* include/bits/list.tcc (list<>::erase): Likewise.\n\t(list<>::merge): Adjust in C++0x mode.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r179528", "tree": {"sha": "57cf2af28dc628f942d5b72e40f22a2c1bd448bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57cf2af28dc628f942d5b72e40f22a2c1bd448bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/comments", "author": null, "committer": null, "parents": [{"sha": "6caf3f7f123174d5c9b7fd6b4bdbf62c75cdf09f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6caf3f7f123174d5c9b7fd6b4bdbf62c75cdf09f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6caf3f7f123174d5c9b7fd6b4bdbf62c75cdf09f"}], "stats": {"total": 153, "additions": 119, "deletions": 34}, "files": [{"sha": "88d1d1b1188a99ef39eb46981cbc358a01f11f94", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e83f45aa68afba1d7938b186a90e3db3a3f0ee2", "patch": "@@ -1,3 +1,23 @@\n+2011-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/49561\n+\t* include/bits/stl_list.h (_List_base<>::_List_impl::_M_size):\n+\tAdd in C++0x mode.\n+\t(_List_base<>::_List_impl, _List_base<>::_M_get_node,\n+\t_List_base<>::_M_put_node, _List_base<>::_List_base(_List_base&&),\n+\tlist<>::size, list<>::swap, list<>::splice): Use it.\n+\t(operator==(const list<>&, const list<>&)): Rewrite in C++0x mode.\n+\t* include/bits/list.tcc (list<>::erase): Likewise.\n+\t(list<>::merge): Adjust in C++0x mode.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2011-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/20_util/bind/48698.cc (g): Fix return type, avoid -Wall"}, {"sha": "55156bbf062d1ab6f2558fdd16e52acb8a71b801", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=0e83f45aa68afba1d7938b186a90e3db3a3f0ee2", "patch": "@@ -67,8 +67,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     _M_clear()\n     {\n       typedef _List_node<_Tp>  _Node;\n-      _Node* __cur = static_cast<_Node*>(this->_M_impl._M_node._M_next);\n-      while (__cur != &this->_M_impl._M_node)\n+      _Node* __cur = static_cast<_Node*>(_M_impl._M_node._M_next);\n+      while (__cur != &_M_impl._M_node)\n \t{\n \t  _Node* __tmp = __cur;\n \t  __cur = static_cast<_Node*>(__cur->_M_next);\n@@ -139,29 +139,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     list<_Tp, _Alloc>::\n     resize(size_type __new_size)\n     {\n-      iterator __i = begin();\n-      size_type __len = 0;\n-      for (; __i != end() && __len < __new_size; ++__i, ++__len)\n-        ;\n-      if (__len == __new_size)\n-        erase(__i, end());\n-      else                          // __i == end()\n-\t_M_default_append(__new_size - __len);\n+      if (__new_size > size())\n+\t_M_default_append(__new_size - size());\n+      else if (__new_size < size())\n+\t{\n+\t  iterator __i = begin();\n+\t  std::advance(__i, __new_size);\n+\t  erase(__i, end());\n+\t}\n     }\n \n   template<typename _Tp, typename _Alloc>\n     void\n     list<_Tp, _Alloc>::\n     resize(size_type __new_size, const value_type& __x)\n     {\n-      iterator __i = begin();\n-      size_type __len = 0;\n-      for (; __i != end() && __len < __new_size; ++__i, ++__len)\n-        ;\n-      if (__len == __new_size)\n-        erase(__i, end());\n-      else                          // __i == end()\n-        insert(end(), __new_size - __len, __x);\n+      if (__new_size > size())\n+\tinsert(end(), __new_size - size(), __x);\n+      else if (__new_size < size())\n+\t{\n+\t  iterator __i = begin();\n+\t  std::advance(__i, __new_size);\n+\t  erase(__i, end());\n+\t}\n     }\n #else\n   template<typename _Tp, typename _Alloc>\n@@ -312,6 +312,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      ++__first1;\n \t  if (__first2 != __last2)\n \t    _M_transfer(__last1, __first2, __last2);\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t  this->_M_impl._M_size += __x.size();\n+\t  __x._M_impl._M_size = 0;\n+#endif\n \t}\n     }\n \n@@ -346,6 +351,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t++__first1;\n \t    if (__first2 != __last2)\n \t      _M_transfer(__last1, __first2, __last2);\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t    this->_M_impl._M_size += __x.size();\n+\t    __x._M_impl._M_size = 0;\n+#endif\n \t  }\n       }\n "}, {"sha": "56ee2fbfd2e4d098fcd0e70254b1e85f6581ab08", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 67, "deletions": 12, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=0e83f45aa68afba1d7938b186a90e3db3a3f0ee2", "patch": "@@ -306,22 +306,32 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;\n \n-      struct _List_impl \n+      struct _List_impl\n       : public _Node_alloc_type\n       {\n \t__detail::_List_node_base _M_node;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\tsize_t                    _M_size;\n+#endif\n+\n \t_List_impl()\n \t: _Node_alloc_type(), _M_node()\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t, _M_size(0)\n+#endif\n \t{ }\n \n \t_List_impl(const _Node_alloc_type& __a)\n \t: _Node_alloc_type(__a), _M_node()\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t, _M_size(0)\n+#endif\n \t{ }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \t_List_impl(_Node_alloc_type&& __a)\n-\t: _Node_alloc_type(std::move(__a)), _M_node()\n+\t: _Node_alloc_type(std::move(__a)), _M_node(), _M_size(0)\n \t{ }\n #endif\n       };\n@@ -330,22 +340,33 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       _List_node<_Tp>*\n       _M_get_node()\n-      { return _M_impl._Node_alloc_type::allocate(1); }\n-      \n+      {\n+\t_List_node<_Tp>* __tmp = _M_impl._Node_alloc_type::allocate(1);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t++_M_impl._M_size;\n+#endif\t\n+\treturn __tmp;\n+      }\n+\n       void\n       _M_put_node(_List_node<_Tp>* __p)\n-      { _M_impl._Node_alloc_type::deallocate(__p, 1); }\n+      {\n+\t_M_impl._Node_alloc_type::deallocate(__p, 1);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t--_M_impl._M_size;\n+#endif\n+      }\n       \n   public:\n       typedef _Alloc allocator_type;\n \n       _Node_alloc_type&\n       _M_get_Node_allocator() _GLIBCXX_NOEXCEPT\n-      { return *static_cast<_Node_alloc_type*>(&this->_M_impl); }\n+      { return *static_cast<_Node_alloc_type*>(&_M_impl); }\n \n       const _Node_alloc_type&\n       _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT\n-      { return *static_cast<const _Node_alloc_type*>(&this->_M_impl); }\n+      { return *static_cast<const _Node_alloc_type*>(&_M_impl); }\n \n       _Tp_alloc_type\n       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT\n@@ -368,8 +389,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_impl(std::move(__x._M_get_Node_allocator()))\n       {\n \t_M_init();\n-\t__detail::_List_node_base::swap(this->_M_impl._M_node, \n-\t\t\t\t\t__x._M_impl._M_node);\t\n+\t__detail::_List_node_base::swap(_M_impl._M_node, __x._M_impl._M_node);\n+\tstd::swap(_M_impl._M_size, __x._M_impl._M_size);\n       }\n #endif\n \n@@ -851,7 +872,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**  Returns the number of elements in the %list.  */\n       size_type\n       size() const _GLIBCXX_NOEXCEPT\n-      { return std::distance(begin(), end()); }\n+      {\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\treturn this->_M_impl._M_size;\n+#else\n+\treturn std::distance(begin(), end());\n+#endif\n+      }\n \n       /**  Returns the size() of the largest possible %list.  */\n       size_type\n@@ -1186,6 +1213,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \t__detail::_List_node_base::swap(this->_M_impl._M_node, \n \t\t\t\t\t__x._M_impl._M_node);\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\tstd::swap(this->_M_impl._M_size, __x._M_impl._M_size);\n+#endif\n \n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 431. Swapping containers with unequal allocators.\n@@ -1230,6 +1260,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    _M_check_equal_allocators(__x);\n \n \t    this->_M_transfer(__position, __x.begin(), __x.end());\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t    this->_M_impl._M_size += __x.size();\n+\t    __x._M_impl._M_size = 0;\n+#endif\n \t  }\n       }\n \n@@ -1261,7 +1296,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  return;\n \n \tif (this != &__x)\n-\t  _M_check_equal_allocators(__x);\n+\t  {\n+\t    _M_check_equal_allocators(__x);\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t    ++this->_M_impl._M_size;\n+\t    --__x._M_impl._M_size;\n+#endif\n+\t  }\n \n \tthis->_M_transfer(__position, __i, __j);\n       }\n@@ -1296,7 +1338,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tif (__first != __last)\n \t  {\n \t    if (this != &__x)\n-\t      _M_check_equal_allocators(__x);\n+\t      {\n+\t\t_M_check_equal_allocators(__x);\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t\tconst size_type __size = std::distance(__first, __last);\n+\t\tthis->_M_impl._M_size += __size;\n+\t\t__x._M_impl._M_size -= __size;\n+#endif\n+\t      }\n \n \t    this->_M_transfer(__position, __first, __last);\n \t  }\n@@ -1571,6 +1621,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline bool\n     operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)\n     {\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      return (__x.size() == __y.size()\n+\t      && std::equal(__x.begin(), __x.end(), __y.begin()));\n+#else\n       typedef typename list<_Tp, _Alloc>::const_iterator const_iterator;\n       const_iterator __end1 = __x.end();\n       const_iterator __end2 = __y.end();\n@@ -1583,6 +1637,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  ++__i2;\n \t}\n       return __i1 == __end1 && __i2 == __end2;\n+#endif\n     }\n \n   /**"}, {"sha": "974821f0e529e82a5b04c38eace12cad6f211230", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=0e83f45aa68afba1d7938b186a90e3db3a3f0ee2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1499 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1549 }\n \n #include <list>\n "}, {"sha": "6683e78062d294d726bb563e1e7f371153776dee", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=0e83f45aa68afba1d7938b186a90e3db3a3f0ee2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1455 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1505 }\n \n #include <list>\n "}, {"sha": "f3e70098ea0f7c3c6259038711977e1d8f398790", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=0e83f45aa68afba1d7938b186a90e3db3a3f0ee2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1455 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1505 }\n \n #include <list>\n #include <utility>"}, {"sha": "7e19c4205dc8ca88d38dfb6fb39be6e7cecfeef8", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e83f45aa68afba1d7938b186a90e3db3a3f0ee2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=0e83f45aa68afba1d7938b186a90e3db3a3f0ee2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1455 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1505 }\n \n #include <list>\n "}]}