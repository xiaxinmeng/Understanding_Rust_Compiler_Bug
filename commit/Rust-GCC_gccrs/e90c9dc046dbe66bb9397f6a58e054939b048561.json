{"sha": "e90c9dc046dbe66bb9397f6a58e054939b048561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwYzlkYzA0NmRiZTY2YmI5Mzk3ZjZhNThlMDU0OTM5YjA0ODU2MQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2003-06-01T07:21:02Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-06-01T07:21:02Z"}, "message": "lex.c (ffelex_file_fixed): Remove usage of REDUCE_CARD_SIZE_AFTER_BIGGY.\n\n\n\t* lex.c (ffelex_file_fixed): Remove usage of\n\tREDUCE_CARD_SIZE_AFTER_BIGGY.\n\n\t* expr.c (ffeexpr_exprstack_push_operand_): Remove code depenend\n\ton WEIRD_NONFORTRAN_RULES.\n\n\t* com.c (ffecom_arg_ptr_to_expr): Remove\n\tPASS_HOLLERITH_BY_DESCRIPTOR dependend code.\n\t(ffecom_const_expr): Remove usage of NEWCOMMON.\n\t(ffecom_expand_let_stmt): Remove MOVE_EXPR.\n\nFrom-SVN: r67287", "tree": {"sha": "75239b620a6b05698b5b8fcdabad40901ed67315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75239b620a6b05698b5b8fcdabad40901ed67315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e90c9dc046dbe66bb9397f6a58e054939b048561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90c9dc046dbe66bb9397f6a58e054939b048561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90c9dc046dbe66bb9397f6a58e054939b048561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90c9dc046dbe66bb9397f6a58e054939b048561/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1174a658cf6ec539822c46b0b40b6a68940d1552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1174a658cf6ec539822c46b0b40b6a68940d1552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1174a658cf6ec539822c46b0b40b6a68940d1552"}], "stats": {"total": 91, "additions": 23, "deletions": 68}, "files": [{"sha": "624b607a2cdbb12752b8e2765ebff1c5eb62da46", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90c9dc046dbe66bb9397f6a58e054939b048561/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90c9dc046dbe66bb9397f6a58e054939b048561/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=e90c9dc046dbe66bb9397f6a58e054939b048561", "patch": "@@ -1,3 +1,16 @@\n+2003-06-01  Andreas Jaeger  <aj@suse.de>\n+\n+\t* lex.c (ffelex_file_fixed): Remove usage of\n+\tREDUCE_CARD_SIZE_AFTER_BIGGY.\n+\n+\t* expr.c (ffeexpr_exprstack_push_operand_): Remove code depenend\n+\ton WEIRD_NONFORTRAN_RULES.\n+\n+\t* com.c (ffecom_arg_ptr_to_expr): Remove\n+\tPASS_HOLLERITH_BY_DESCRIPTOR dependend code.\n+\t(ffecom_const_expr): Remove usage of NEWCOMMON.\n+\t(ffecom_expand_let_stmt): Remove MOVE_EXPR.\n+\n 2003-05-31  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR fortran/10843"}, {"sha": "fb90a46efa0e1e3fa52fa4f01ee52932d50d2545", "filename": "gcc/f/com.c", "status": "modified", "additions": 8, "deletions": 41, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90c9dc046dbe66bb9397f6a58e054939b048561/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90c9dc046dbe66bb9397f6a58e054939b048561/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=e90c9dc046dbe66bb9397f6a58e054939b048561", "patch": "@@ -168,7 +168,7 @@ tree ffecom_tree_type[FFEINFO_basictype][FFEINFO_kindtype];\n    appropriate _tree_type array element.  */\n \n static GTY(()) tree ffecom_tree_fun_type[FFEINFO_basictype][FFEINFO_kindtype];\n-static GTY(()) tree \n+static GTY(()) tree\n   ffecom_tree_ptr_to_fun_type[FFEINFO_basictype][FFEINFO_kindtype];\n static GTY(()) tree ffecom_tree_subr_type;\n static GTY(()) tree ffecom_tree_ptr_to_subr_type;\n@@ -604,18 +604,18 @@ struct lang_identifier GTY(())\n   (((struct lang_identifier *)(NODE))->invented)\n \n /* The resulting tree type.  */\n-union lang_tree_node \n+union lang_tree_node\n   GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n        chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n {\n-  union tree_node GTY ((tag (\"0\"), \n-\t\t\tdesc (\"tree_node_structure (&%h)\"))) \n+  union tree_node GTY ((tag (\"0\"),\n+\t\t\tdesc (\"tree_node_structure (&%h)\")))\n     generic;\n   struct lang_identifier GTY ((tag (\"1\"))) identifier;\n };\n \n /* Fortran doesn't use either of these.  */\n-struct lang_decl GTY(()) \n+struct lang_decl GTY(())\n {\n };\n struct lang_type GTY(())\n@@ -2918,7 +2918,7 @@ ffecom_do_entry_ (ffesymbol fn, int entrynum)\n   finish_function (0);\n \n   input_location = old_loc;\n-  \n+\n   ffecom_doing_entry_ = FALSE;\n }\n \n@@ -7294,7 +7294,7 @@ ffecom_sym_transform_ (ffesymbol s)\n   ffeinfoKindtype kt;\n   ffeglobal g;\n   location_t old_loc = input_location;\n-  \n+\n   /* Must ensure special ASSIGN variables are declared at top of outermost\n      block, else they'll end up in the innermost block when their first\n      ASSIGN is seen, which leaves them out of scope when they're the\n@@ -10111,9 +10111,6 @@ ffecom_arg_ptr_to_expr (ffebld expr, tree *length)\n     case FFEBLD_opPERCENT_DESCR:\n       switch (ffeinfo_basictype (ffebld_info (expr)))\n \t{\n-#ifdef PASS_HOLLERITH_BY_DESCRIPTOR\n-\tcase FFEINFO_basictypeHOLLERITH:\n-#endif\n \tcase FFEINFO_basictypeCHARACTER:\n \t  break;\t\t/* Passed by descriptor anyway. */\n \n@@ -10129,21 +10126,6 @@ ffecom_arg_ptr_to_expr (ffebld expr, tree *length)\n       break;\n     }\n \n-#ifdef PASS_HOLLERITH_BY_DESCRIPTOR\n-  if ((ffeinfo_basictype (ffebld_info (expr)) == FFEINFO_basictypeHOLLERITH)\n-      && (length != NULL))\n-    {\t\t\t\t/* Pass Hollerith by descriptor. */\n-      ffetargetHollerith h;\n-\n-      assert (ffebld_op (expr) == FFEBLD_opCONTER);\n-      h = ffebld_cu_val_hollerith (ffebld_constant_union\n-\t\t\t\t   (ffebld_conter (expr)));\n-      *length\n-\t= build_int_2 (h.length, 0);\n-      TREE_TYPE (*length) = ffecom_f2c_ftnlen_type_node;\n-    }\n-#endif\n-\n   if (ffeinfo_basictype (ffebld_info (expr)) != FFEINFO_basictypeCHARACTER)\n     return ffecom_ptr_to_expr (expr);\n \n@@ -10608,7 +10590,7 @@ ffecom_constantunion_with_type (ffebldConstantUnion *cu,\n   {\n #if FFETARGET_okINTEGER1\n \t  case  FFEBLD_constINTEGER1:\n-         \t  val = ffebld_cu_val_integer1 (*cu);\n+\t  val = ffebld_cu_val_integer1 (*cu);\n \t\t  item = build_int_2 (val, (val < 0) ? -1 : 0);\n \t\t  break;\n #endif\n@@ -10695,10 +10677,6 @@ ffecom_const_expr (ffebld expr)\n \n   if (ffebld_arity (expr) == 0\n       && (ffebld_op (expr) != FFEBLD_opSYMTER\n-#if NEWCOMMON\n-\t  /* ~~Enable once common/equivalence is handled properly?  */\n-\t  || ffebld_where (expr) == FFEINFO_whereCOMMON\n-#endif\n \t  || ffebld_where (expr) == FFEINFO_whereGLOBAL\n \t  || ffebld_where (expr) == FFEINFO_whereINTRINSIC))\n     {\n@@ -10930,24 +10908,13 @@ ffecom_expand_let_stmt (ffebld dest, ffebld source)\n \texpr_tree = source_tree;\n       else if (assign_temp)\n \t{\n-#ifdef MOVE_EXPR\n-\t  /* The back end understands a conceptual move (evaluate source;\n-\t     store into dest), so use that, in case it can determine\n-\t     that it is going to use, say, two registers as temporaries\n-\t     anyway.  So don't use the temp (and someday avoid generating\n-\t     it, once this code starts triggering regularly).  */\n-\t  expr_tree = ffecom_2s (MOVE_EXPR, void_type_node,\n-\t\t\t\t dest_tree,\n-\t\t\t\t source_tree);\n-#else\n \t  expr_tree = ffecom_2s (MODIFY_EXPR, void_type_node,\n \t\t\t\t assign_temp,\n \t\t\t\t source_tree);\n \t  expand_expr_stmt (expr_tree);\n \t  expr_tree = ffecom_2s (MODIFY_EXPR, void_type_node,\n \t\t\t\t dest_tree,\n \t\t\t\t assign_temp);\n-#endif\n \t}\n       else\n \texpr_tree = ffecom_2s (MODIFY_EXPR, void_type_node,"}, {"sha": "077da3ef87d777f5555bed0f908196ebfcaf92c6", "filename": "gcc/f/expr.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90c9dc046dbe66bb9397f6a58e054939b048561/gcc%2Ff%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90c9dc046dbe66bb9397f6a58e054939b048561/gcc%2Ff%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fexpr.c?ref=e90c9dc046dbe66bb9397f6a58e054939b048561", "patch": "@@ -1,5 +1,5 @@\n /* expr.c -- Implementation File (module.c template V1.0)\n-   Copyright (C) 1995, 1996, 1997, 1998, 2001, 2002\n+   Copyright (C) 1995, 1996, 1997, 1998, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n    Contributed by James Craig Burley.\n \n@@ -9577,15 +9577,6 @@ static void\n ffeexpr_exprstack_push_operand_ (ffeexprExpr_ e)\n {\n   ffeexpr_exprstack_push_ (e);\n-#ifdef WEIRD_NONFORTRAN_RULES\n-  if ((ffeexpr_stack_->exprstack != NULL)\n-      && (ffeexpr_stack_->exprstack->expr->type == FFEEXPR_exprtypeBINARY_)\n-      && (ffeexpr_stack_->exprstack->expr->u.operator.prec\n-\t  == FFEEXPR_operatorprecedenceHIGHEST_)\n-      && (ffeexpr_stack_->exprstack->expr->u.operator.as\n-\t  == FFEEXPR_operatorassociativityL2R_))\n-    ffeexpr_reduce_ ();\n-#endif\n }\n \n /* ffeexpr_exprstack_push_unary_ -- Push a unary operator onto the stack\n@@ -11519,7 +11510,7 @@ ffeexpr_reduced_ugly2log_ (ffebld reduced, ffeexprExpr_ l, ffeexprExpr_ op,\n \t\t\t\t  FFETARGET_charactersizeNONE,\n \t\t\t\t  FFEEXPR_contextLET));\n   }\n-  \n+\n   return reduced;\n }\n "}, {"sha": "39b9c62803d64f7948f68f412293eca0026d710e", "filename": "gcc/f/lex.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90c9dc046dbe66bb9397f6a58e054939b048561/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90c9dc046dbe66bb9397f6a58e054939b048561/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=e90c9dc046dbe66bb9397f6a58e054939b048561", "patch": "@@ -1028,7 +1028,6 @@ ffelex_hash_ (FILE *finput)\n \t      goto skipline;\n \t    }\n \t}\n-\n       else if (c == 'd')\n \t{\n \t  if (getc (finput) == 'e'\n@@ -1450,9 +1449,6 @@ ffelex_include_ ()\n \n   if (card_length != 0)\n     {\n-#ifdef REDUCE_CARD_SIZE_AFTER_BIGGY\t/* Define if occasional large lines. */\n-#error \"need to handle possible reduction of card size here!!\"\n-#endif\n       assert (ffelex_card_size_ >= card_length);\t/* It shrunk?? */\n       memcpy (ffelex_card_image_, card_image, card_length);\n     }\n@@ -1756,18 +1752,6 @@ ffelex_file_fixed (ffewhereFile wf, FILE *f)\n \n  beginning_of_line_again:\t/* :::::::::::::::::::: */\n \n-#ifdef REDUCE_CARD_SIZE_AFTER_BIGGY\t/* Define if occasional large lines. */\n-  if (ffelex_card_size_ != FFELEX_columnINITIAL_SIZE_)\n-    {\n-      ffelex_card_image_\n-\t= malloc_resize_ks (malloc_pool_image (),\n-\t\t\t    ffelex_card_image_,\n-\t\t\t    FFELEX_columnINITIAL_SIZE_ + 9,\n-\t\t\t    ffelex_card_size_ + 9);\n-      ffelex_card_size_ = FFELEX_columnINITIAL_SIZE_;\n-    }\n-#endif\n-\n  first_line:\t\t\t/* :::::::::::::::::::: */\n \n   c = latest_char_in_file;"}]}