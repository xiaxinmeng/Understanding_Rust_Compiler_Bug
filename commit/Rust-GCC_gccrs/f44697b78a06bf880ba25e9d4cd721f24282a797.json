{"sha": "f44697b78a06bf880ba25e9d4cd721f24282a797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ0Njk3Yjc4YTA2YmY4ODBiYTI1ZTlkNGNkNzIxZjI0MjgyYTc5Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-30T12:02:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-30T12:02:55Z"}, "message": "gimple-parser.c (c_parser_gimple_postfix_expression): Parse _Literal (type) { ...\n\n2018-11-30  Richard Biener  <rguenther@suse.de>\n\n\tc/\n\t* gimple-parser.c (c_parser_gimple_postfix_expression): Parse\n\t_Literal (type) { ... } as empty aggregate or vector constructor.\n\n\t* gcc.dg/gimplefe-34.c: New testcase.\n\t* gcc.dg/gimplefe-35.c: Likewise.\n\nFrom-SVN: r266661", "tree": {"sha": "19934ba62a512bb402f7913a3e91b3e0ad938771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19934ba62a512bb402f7913a3e91b3e0ad938771"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f44697b78a06bf880ba25e9d4cd721f24282a797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44697b78a06bf880ba25e9d4cd721f24282a797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44697b78a06bf880ba25e9d4cd721f24282a797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44697b78a06bf880ba25e9d4cd721f24282a797/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eea34f203816e71f2fe261b9b8593a01eb01ec81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea34f203816e71f2fe261b9b8593a01eb01ec81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea34f203816e71f2fe261b9b8593a01eb01ec81"}], "stats": {"total": 130, "additions": 117, "deletions": 13}, "files": [{"sha": "1f1b81fe7ba631f4a649b8f72f76dd0b46bb6977", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44697b78a06bf880ba25e9d4cd721f24282a797/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44697b78a06bf880ba25e9d4cd721f24282a797/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f44697b78a06bf880ba25e9d4cd721f24282a797", "patch": "@@ -1,3 +1,8 @@\n+2018-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-parser.c (c_parser_gimple_postfix_expression): Parse\n+\t_Literal (type) { ... } as empty aggregate or vector constructor.\n+\n 2018-11-29  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/88091"}, {"sha": "ab09b2b9a0e9f0d1db0c7f1fc95e5a9eb2c8e914", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 76, "deletions": 13, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44697b78a06bf880ba25e9d4cd721f24282a797/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44697b78a06bf880ba25e9d4cd721f24282a797/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=f44697b78a06bf880ba25e9d4cd721f24282a797", "patch": "@@ -806,6 +806,7 @@ c_parser_gimple_call_internal (c_parser *parser)\n      identifier\n      constant\n      string-literal\n+     constructor\n      gimple-call-internal\n \n */\n@@ -934,7 +935,7 @@ c_parser_gimple_postfix_expression (c_parser *parser)\n \t    }\n \t  else if (strcmp (IDENTIFIER_POINTER (id), \"_Literal\") == 0)\n \t    {\n-\t      /* _Literal '(' type-name ')' [ '-' ] constant */\n+\t      /* _Literal '(' type-name ')' ( [ '-' ] constant | constructor ) */\n \t      c_parser_consume_token (parser);\n \t      tree type = NULL_TREE;\n \t      if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n@@ -946,28 +947,90 @@ c_parser_gimple_postfix_expression (c_parser *parser)\n \t\t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t\t     \"expected %<)%>\");\n \t\t}\n-\t      bool neg_p;\n-\t      if ((neg_p = c_parser_next_token_is (parser, CPP_MINUS)))\n-\t\tc_parser_consume_token (parser);\n-\t      tree val = c_parser_gimple_postfix_expression (parser).value;\n-\t      if (! type\n-\t\t  || ! val\n-\t\t  || val == error_mark_node\n-\t\t  || ! CONSTANT_CLASS_P (val))\n+\t      if (! type)\n \t\t{\n \t\t  c_parser_error (parser, \"invalid _Literal\");\n \t\t  return expr;\n \t\t}\n-\t      if (neg_p)\n+\t      if (c_parser_next_token_is (parser, CPP_OPEN_BRACE))\n+\t\t{\n+\t\t  c_parser_consume_token (parser);\n+\t\t  if (!AGGREGATE_TYPE_P (type)\n+\t\t      && !VECTOR_TYPE_P (type))\n+\t\t    {\n+\t\t      c_parser_error (parser, \"invalid type for _Literal with \"\n+\t\t\t\t      \"constructor\");\n+\t\t      c_parser_skip_until_found (parser, CPP_CLOSE_BRACE,\n+\t\t\t\t\t\t \"expected %<}%>\");\n+\t\t      return expr;\n+\t\t    }\n+\t\t  vec<constructor_elt, va_gc> *v = NULL;\n+\t\t  bool constant_p = true;\n+\t\t  if (VECTOR_TYPE_P (type)\n+\t\t      && !c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n+\t\t    {\n+\t\t      vec_alloc (v, TYPE_VECTOR_SUBPARTS (type).to_constant ());\n+\t\t      do\n+\t\t\t{\n+\t\t\t  tree val\n+\t\t\t    = c_parser_gimple_postfix_expression (parser).value;\n+\t\t\t  if (! val\n+\t\t\t      || val == error_mark_node\n+\t\t\t      || (! CONSTANT_CLASS_P (val)\n+\t\t\t\t  && ! SSA_VAR_P (val)))\n+\t\t\t    {\n+\t\t\t      c_parser_error (parser, \"invalid _Literal\");\n+\t\t\t      return expr;\n+\t\t\t    }\n+\t\t\t  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, val);\n+\t\t\t  if (! CONSTANT_CLASS_P (val))\n+\t\t\t    constant_p = false;\n+\t\t\t  if (c_parser_next_token_is (parser, CPP_COMMA))\n+\t\t\t    c_parser_consume_token (parser);\n+\t\t\t  else\n+\t\t\t    break;\n+\t\t\t}\n+\t\t      while (1);\n+\t\t    }\n+\t\t  if (c_parser_require (parser, CPP_CLOSE_BRACE,\n+\t\t\t\t\t\"expected %<}%>\"))\n+\t\t    {\n+\t\t      if (v && constant_p)\n+\t\t\texpr.value = build_vector_from_ctor (type, v);\n+\t\t      else\n+\t\t\texpr.value = build_constructor (type, v);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      c_parser_skip_until_found (parser, CPP_CLOSE_BRACE,\n+\t\t\t\t\t\t \"expected %<}%>\");\n+\t\t      return expr;\n+\t\t    }\n+\t\t}\n+\t      else\n \t\t{\n-\t\t  val = const_unop (NEGATE_EXPR, TREE_TYPE (val), val);\n-\t\t  if (! val)\n+\t\t  bool neg_p;\n+\t\t  if ((neg_p = c_parser_next_token_is (parser, CPP_MINUS)))\n+\t\t    c_parser_consume_token (parser);\n+\t\t  tree val = c_parser_gimple_postfix_expression (parser).value;\n+\t\t  if (! val\n+\t\t      || val == error_mark_node\n+\t\t      || ! CONSTANT_CLASS_P (val))\n \t\t    {\n \t\t      c_parser_error (parser, \"invalid _Literal\");\n \t\t      return expr;\n \t\t    }\n+\t\t  if (neg_p)\n+\t\t    {\n+\t\t      val = const_unop (NEGATE_EXPR, TREE_TYPE (val), val);\n+\t\t      if (! val)\n+\t\t\t{\n+\t\t\t  c_parser_error (parser, \"invalid _Literal\");\n+\t\t\t  return expr;\n+\t\t\t}\n+\t\t    }\n+\t\t  expr.value = fold_convert (type, val);\n \t\t}\n-\t      expr.value = fold_convert (type, val);\n \t      return expr;\n \t    }\n "}, {"sha": "b33ed8e6b92c7243a686b54ecd28c6562acd37a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44697b78a06bf880ba25e9d4cd721f24282a797/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44697b78a06bf880ba25e9d4cd721f24282a797/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f44697b78a06bf880ba25e9d4cd721f24282a797", "patch": "@@ -1,3 +1,8 @@\n+2018-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/gimplefe-34.c: New testcase.\n+\t* gcc.dg/gimplefe-35.c: Likewise.\n+\n 2018-11-30  Martin Liska  <mliska@suse.cz>\n \n \tPR testsuite/88265"}, {"sha": "3cf28b57218504bc37b22869cacff5d4323e95c3", "filename": "gcc/testsuite/gcc.dg/gimplefe-34.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44697b78a06bf880ba25e9d4cd721f24282a797/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44697b78a06bf880ba25e9d4cd721f24282a797/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-34.c?ref=f44697b78a06bf880ba25e9d4cd721f24282a797", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple\" } */\n+\n+typedef unsigned char v16qi __attribute__((vector_size(16)));\n+typedef unsigned char v8qi __attribute__((vector_size(8)));\n+\n+v16qi x;\n+\n+void __GIMPLE foo (unsigned char *p)\n+{\n+  v8qi _2;\n+  v16qi _3;\n+\n+bb_2:\n+  _2 = __MEM <v8qi, 8> (p_1(D));\n+  _3 = _Literal (v16qi) { _2, _Literal (v8qi) { _Literal (unsigned char) 0, _Literal (unsigned char) 0, _Literal (unsigned char) 0, _Literal (unsigned char) 0, _Literal (unsigned char) 0, _Literal (unsigned char) 0, _Literal (unsigned char) 0 } };\n+  x = _3;\n+  return;\n+}\n+"}, {"sha": "80ee75cf2cd90e42deba5f1dc52af6f302401481", "filename": "gcc/testsuite/gcc.dg/gimplefe-35.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44697b78a06bf880ba25e9d4cd721f24282a797/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44697b78a06bf880ba25e9d4cd721f24282a797/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-35.c?ref=f44697b78a06bf880ba25e9d4cd721f24282a797", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple\" } */\n+\n+struct X { int i; } x;\n+void __GIMPLE foo (void)\n+{\n+bb_2:\n+  x = _Literal (struct X) {};\n+  return;\n+}\n+"}]}