{"sha": "cb4b152d88b9c77f552345917601d401010dc4b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I0YjE1MmQ4OGI5Yzc3ZjU1MjM0NTkxNzYwMWQ0MDEwMTBkYzRiMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-12-21T19:00:28Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-12-21T19:00:28Z"}, "message": "re PR target/83467 (ICE: in assign_by_spills, at lra-assigns.c:1476: unable to find a register to spill with -flive-range-shrinkage -m8bit-idiv)\n\n\tPR target/83467\n\t* config/i386/i386.md (*ashl<mode>3_mask): Add operand\n\tconstraints to operand 2.\n\t(*ashl<mode>3_mask_1): Ditto.\n\t(*<shift_insn><mode>3_mask): Ditto.\n\t(*<shift_insn><mode>3_mask_1): Ditto.\n\t(*<rotate_insn><mode>3_mask): Ditto.\n\t(*<rotate_insn><mode>3_mask_1): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/83467\n\t* gcc.target/i386/pr83467-1.c: New test.\n\t* gcc.target/i386/pr83467-2.c: Ditto.\n\nFrom-SVN: r255949", "tree": {"sha": "b50c571c96b42119ec68231cc9711e0a520dcfc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b50c571c96b42119ec68231cc9711e0a520dcfc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb4b152d88b9c77f552345917601d401010dc4b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4b152d88b9c77f552345917601d401010dc4b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb4b152d88b9c77f552345917601d401010dc4b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4b152d88b9c77f552345917601d401010dc4b3/comments", "author": null, "committer": null, "parents": [{"sha": "056cf43428e87bff0703ab4a6ec3558a90328be4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056cf43428e87bff0703ab4a6ec3558a90328be4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056cf43428e87bff0703ab4a6ec3558a90328be4"}], "stats": {"total": 124, "additions": 90, "deletions": 34}, "files": [{"sha": "7f9d16c08d35a27ceefabcbcf81bfa47aa9d84be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4b152d88b9c77f552345917601d401010dc4b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4b152d88b9c77f552345917601d401010dc4b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb4b152d88b9c77f552345917601d401010dc4b3", "patch": "@@ -1,9 +1,19 @@\n-2017-12-21  Alexandre Oliva <aoliva@redhat.com>\n+2017-12-21  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* reorg.c (make_return_insns): Reemit each insn with its own\n-\tlocation.\n+\tPR target/83467\n+\t* config/i386/i386.md (*ashl<mode>3_mask): Add operand\n+\tconstraints to operand 2.\n+\t(*ashl<mode>3_mask_1): Ditto.\n+\t(*<shift_insn><mode>3_mask): Ditto.\n+\t(*<shift_insn><mode>3_mask_1): Ditto.\n+\t(*<rotate_insn><mode>3_mask): Ditto.\n+\t(*<rotate_insn><mode>3_mask_1): Ditto.\n \n-2017-12-21  Alexandre Oliva <aoliva@redhat.com>\n+2017-12-21  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* reorg.c (make_return_insns): Reemit each insn with its own location.\n+\n+2017-12-21  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/83419\n \t* c-family/c-semantics.c (pop_stmt_list): Propagate side\n@@ -631,7 +641,7 @@\n \t(expand_builtin_strcmp): Call maybe_warn_nonstring_arg.\n \t(expand_builtin_strncmp): Same.\n \n-2017-12-20  Alexandre Oliva <aoliva@redhat.com>\n+2017-12-20  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR bootstrap/83396\n \t* cfgexpand.c (label_rtx_for_bb): Revert SFN changes that\n@@ -1290,7 +1300,7 @@\n \tpoly_int64.  Use strip_offset_and_add to handle (plus X (const)).\n \n 2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n-            Alan Hayward  <alan.hayward@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>\n \n \t* rtl.h (reg_attrs::offset): Change from HOST_WIDE_INT to poly_int64.\n@@ -1317,7 +1327,7 @@\n \tof a PARALLEL.\n \n 2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n-            Alan Hayward  <alan.hayward@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>\n \n \t* target.def (truly_noop_truncation): Take poly_uint64s instead of\n@@ -1606,7 +1616,8 @@\n 2017-12-20  Tom de Vries  <tom@codesourcery.com>\n \n \tPR middle-end/83423\n-\t* config/i386/i386.c (ix86_static_chain): Move DECL_STATIC_CHAIN test ...\n+\t* config/i386/i386.c (ix86_static_chain): Move\n+\tDECL_STATIC_CHAIN test ...\n \t* calls.c (rtx_for_static_chain): ... here.  New function.\n \t* calls.h (rtx_for_static_chain): Declare.\n \t* builtins.c (expand_builtin_setjmp_receiver): Use rtx_for_static_chain\n@@ -1642,7 +1653,7 @@\n \tcharacter load case, if get_stridx on MEM_REF's operand doesn't\n \tlook usable, retry with get_addr_stridx.\n \n-2017-12-19  Alexandre Oliva <aoliva@redhat.com>\n+2017-12-19  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/83422\n \t* var-tracking.c (vt_debug_insns_local): Do not drop markers.\n@@ -1712,7 +1723,8 @@\n \t* sched-rgn.c (sched_rgn_init): Likewise.\n \t* diagnostic-show-locus.c (layout::show_ruler): Likewise.\n \t* combine.c (find_split_point, simplify_if_then_else, force_to_mode,\n-\tif_then_else_cond, simplify_shift_const_1, simplify_comparison): Likewise.\n+\tif_then_else_cond, simplify_shift_const_1, simplify_comparison):\n+\tLikewise.\n \t* explow.c (eliminate_constant_term): Likewise.\n \t* final.c (leaf_renumber_regs_insn): Likewise.\n \t* cfgrtl.c (print_rtl_with_bb): Likewise.\n@@ -1762,7 +1774,7 @@\n \n \tPR c++/83489\n \t* config/i386/i386.c (init_cumulative_args): Don't check TYPE_EMPTY_P\n-\ton an error node.\t\t\t\t\t\t     \n+\ton an error node.\n \n 2017-12-19  Claudiu Zissulescu  <claziss@synopsys.com>\n \n@@ -1881,9 +1893,9 @@\n \t* doc/extend.texi (x86 Function Attributes): Reformat nocf_check\n \texample\tto avoid overfull hbox.\n \t* doc/invoke.texi (Option Summary): Add missing @gol.\n-\t(C++ Dialect Options): Reformat -Wnoexcept-type example to avoid \n+\t(C++ Dialect Options): Reformat -Wnoexcept-type example to avoid\n \toverfull hbox.\n-\t\n+\n 2017-12-17  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n@@ -2211,13 +2223,13 @@\n \toptimizing for size.  Don't pessimize blocks which will be\n \tcopied, but all the statements will be dead.\n \n-2017-12-15  Alexandre Oliva <aoliva@redhat.com>\n+2017-12-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR tree-optimization/81165\n \t* tree-ssa-threadupdate.c (uses_in_bb): New.\n \t(estimate_threading_killed_stmts): New.\n \t* tree-ssa-threadupdate.h (estimate_threading_killed_stmts): Prototype.\n-\t* tree-ssa-threadedge.c \n+\t* tree-ssa-threadedge.c\n \t(record_temporary_equivalences_from_stmts_at_dest): Expand limit\n \twhen its hit.\n \n@@ -2343,7 +2355,8 @@\n 2017-12-15  Julia Koval  <julia.koval@intel.com>\n \n \t* config/i386/i386-builtin.def (__builtin_ia32_vaesenclast_v16qi,\n-\t__builtin_ia32_vaesenclast_v32qi, __builtin_ia32_vaesenclast_v64qi): New.\n+\t__builtin_ia32_vaesenclast_v32qi, __builtin_ia32_vaesenclast_v64qi):\n+\tNew.\n \t* config/i386/sse.md (vaesenclast_<mode>): New pattern.\n \t* config/i386/vaesintrin.h (_mm256_aesenclast_epi128,\n \t_mm512_aesenclast_epi128, _mm_aesenclast_epi128): New intrinsics.\n@@ -2359,7 +2372,8 @@\n 2017-12-15  Julia Koval  <julia.koval@intel.com>\n \n \t* config/i386/i386-builtin.def (__builtin_ia32_vaesdeclast_v16qi,\n-\t__builtin_ia32_vaesdeclast_v32qi, __builtin_ia32_vaesdeclast_v64qi): New.\n+\t__builtin_ia32_vaesdeclast_v32qi, __builtin_ia32_vaesdeclast_v64qi):\n+\tNew.\n \t* config/i386/sse.md (vaesdeclast_<mode>): New pattern.\n \t* config/i386/vaesintrin.h (_mm256_aesdeclast_epi128,\n \t_mm512_aesdeclast_epi128, _mm_aesdeclast_epi128): New intrinsics.\n@@ -2415,7 +2429,7 @@\n \tPR bootstrap/83396\n \t* reload1.c (emit_input_reload_insns): Skip debug markers.\n \n-2017-12-14  Alexandre Oliva <aoliva@redhat.com>\n+2017-12-14  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/i386/i386.c (rest_of_insert_endbranch): Use call loc\n \tfor its nop_endbr.\n@@ -2453,8 +2467,7 @@\n \n \tPR tree-optimization/83418\n \t* vr-values.c (vr_values::extract_range_for_var_from_comparison_expr):\n-\tInstead of asserting we don't get unfolded comparisons deal with\n-\tthem.\n+\tInstead of asserting we don't get unfolded comparisons deal with them.\n \n 2017-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -2518,7 +2531,7 @@\n \t(ASSERT_MAYBE_NE_AT): New macros.\n \n 2017-12-13  Eric Botcazou  <ebotcazou@adacore.com>\n-            Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\t    Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \tPR middle-end/78468\n \t* emit-rtl.c (init_emit): Remove ??? comment.\n@@ -2534,7 +2547,7 @@\n \t* config/rs6000/ppc-auxv.h (PPC_FEATURE2_HTM_NO_SUSPEND): New define.\n \t* config/rs6000/rs6000.c (cpu_supports_info): Use it.\n \n-2017-12-13  Alexandre Oliva <aoliva@redhat.com>\n+2017-12-13  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR bootstrap/83396\n \t* reload1.c (eliminate_regs_in_insn): Skip debug markers."}, {"sha": "59d9245234fd4cf0d79fab2edbe98d035cdd0b38", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4b152d88b9c77f552345917601d401010dc4b3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4b152d88b9c77f552345917601d401010dc4b3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cb4b152d88b9c77f552345917601d401010dc4b3", "patch": "@@ -10353,7 +10353,7 @@\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"register_operand\")\n+\t      (match_operand:SI 2 \"register_operand\" \"c,r\")\n \t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (ASHIFT, <MODE>mode, operands)\n@@ -10367,14 +10367,15 @@\n \t   (ashift:SWI48 (match_dup 1)\n \t\t\t (match_dup 2)))\n       (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[2] = gen_lowpart (QImode, operands[2]);\")\n+  \"operands[2] = gen_lowpart (QImode, operands[2]);\"\n+  [(set_attr \"isa\" \"*,bmi2\")])\n \n (define_insn_and_split \"*ashl<mode>3_mask_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t(ashift:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t  (and:QI\n-\t    (match_operand:QI 2 \"register_operand\")\n+\t    (match_operand:QI 2 \"register_operand\" \"c,r\")\n \t    (match_operand:QI 3 \"const_int_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (ASHIFT, <MODE>mode, operands)\n@@ -10387,7 +10388,9 @@\n      [(set (match_dup 0)\n \t   (ashift:SWI48 (match_dup 1)\n \t\t\t (match_dup 2)))\n-      (clobber (reg:CC FLAGS_REG))])])\n+      (clobber (reg:CC FLAGS_REG))])]\n+  \"\"\n+  [(set_attr \"isa\" \"*,bmi2\")])\n \n (define_insn \"*bmi2_ashl<mode>3_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n@@ -10873,7 +10876,7 @@\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"register_operand\")\n+\t      (match_operand:SI 2 \"register_operand\" \"c,r\")\n \t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n@@ -10887,14 +10890,15 @@\n \t   (any_shiftrt:SWI48 (match_dup 1)\n \t\t\t      (match_dup 2)))\n       (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[2] = gen_lowpart (QImode, operands[2]);\")\n+  \"operands[2] = gen_lowpart (QImode, operands[2]);\"\n+  [(set_attr \"isa\" \"*,bmi2\")])\n \n (define_insn_and_split \"*<shift_insn><mode>3_mask_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t(any_shiftrt:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t  (and:QI\n-\t    (match_operand:QI 2 \"register_operand\")\n+\t    (match_operand:QI 2 \"register_operand\" \"c,r\")\n \t    (match_operand:QI 3 \"const_int_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n@@ -10907,7 +10911,9 @@\n      [(set (match_dup 0)\n \t   (any_shiftrt:SWI48 (match_dup 1)\n \t\t\t      (match_dup 2)))\n-      (clobber (reg:CC FLAGS_REG))])])\n+      (clobber (reg:CC FLAGS_REG))])]\n+  \"\"\n+  [(set_attr \"isa\" \"*,bmi2\")])\n \n (define_insn_and_split \"*<shift_insn><mode>3_doubleword\"\n   [(set (match_operand:DWI 0 \"register_operand\" \"=&r\")\n@@ -11352,7 +11358,7 @@\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"register_operand\")\n+\t      (match_operand:SI 2 \"register_operand\" \"c\")\n \t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n@@ -11373,7 +11379,7 @@\n \t(any_rotate:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t  (and:QI\n-\t    (match_operand:QI 2 \"register_operand\")\n+\t    (match_operand:QI 2 \"register_operand\" \"c\")\n \t    (match_operand:QI 3 \"const_int_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)"}, {"sha": "2696f5e86555bdcf897559f66bd7b51e09ad191b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4b152d88b9c77f552345917601d401010dc4b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4b152d88b9c77f552345917601d401010dc4b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb4b152d88b9c77f552345917601d401010dc4b3", "patch": "@@ -1,4 +1,10 @@\n-2017-12-21  Alexandre Oliva <aoliva@redhat.com>\n+2017-12-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/83467\n+\t* gcc.target/i386/pr83467-1.c: New test.\n+\t* gcc.target/i386/pr83467-2.c: Ditto.\n+\n+2017-12-21  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/83419\n \t* gcc.dg/pr83419.c: New.\n@@ -111,7 +117,7 @@\n \t* gcc.dg/Wstringop-overflow.c: New test.\n \t* gcc/testsuite/c-c++-common/Warray-bounds-3.c: Adjust.\n \n-2017-12-19  Alexandre Oliva <aoliva@redhat.com>\n+2017-12-19  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/83422\n \t* gcc.dg/pr83422.c: New."}, {"sha": "b5cf17edec25ab5f84a3f4213c1e1d1650b56dbc", "filename": "gcc/testsuite/gcc.target/i386/pr83467-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4b152d88b9c77f552345917601d401010dc4b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83467-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4b152d88b9c77f552345917601d401010dc4b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83467-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83467-1.c?ref=cb4b152d88b9c77f552345917601d401010dc4b3", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -flive-range-shrinkage -m8bit-idiv\" } */\n+/* { dg-require-effective-target int128 } */\n+\n+unsigned a;\n+\n+__int128\n+b (unsigned c, short d, int e, long f, unsigned __int128 g, char h,\n+   int i, __int128 j)\n+{\n+  j %= 5;\n+  c *= i;\n+  e = e >> (g & 31);\n+  h &= e /= d;\n+  g <<= 0 <= 0;\n+  g &= h < j;\n+  return c + d + f + g + h + i + a + j;\n+}"}, {"sha": "1b424fec2cb8841fcf4c4570818a77f837ef6d9f", "filename": "gcc/testsuite/gcc.target/i386/pr83467-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4b152d88b9c77f552345917601d401010dc4b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83467-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4b152d88b9c77f552345917601d401010dc4b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83467-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83467-2.c?ref=cb4b152d88b9c77f552345917601d401010dc4b3", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -flive-range-shrinkage\" } */\n+/* { dg-require-effective-target int128 } */\n+\n+int\n+a (int b, short c, int d, long e, __int128 f, short g, long h, __int128 i)\n+{\n+  d <<= f & 31;\n+  f >>= 127;\n+  g *= d > c;\n+  f >>= g;\n+  return b + e + f + h + i;\n+}"}]}