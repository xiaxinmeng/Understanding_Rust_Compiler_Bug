{"sha": "47ee6837900a6f7b22f13da0db83cd5923ff9fe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlZTY4Mzc5MDBhNmY3YjIyZjEzZGEwZGI4M2NkNTkyM2ZmOWZlOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-07T22:51:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-07T22:51:45Z"}, "message": "(build_binary_op): Likewise.\n\n(build_conditional_expr): op1 now always nonnull.\n\nFrom-SVN: r13234", "tree": {"sha": "d41746d7219cbcabd09d8f31ff05ed7de6d0b9b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d41746d7219cbcabd09d8f31ff05ed7de6d0b9b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47ee6837900a6f7b22f13da0db83cd5923ff9fe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ee6837900a6f7b22f13da0db83cd5923ff9fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ee6837900a6f7b22f13da0db83cd5923ff9fe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ee6837900a6f7b22f13da0db83cd5923ff9fe8/comments", "author": null, "committer": null, "parents": [{"sha": "e78a3b4249fb70a97ac87b55b612553d19da36a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78a3b4249fb70a97ac87b55b612553d19da36a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78a3b4249fb70a97ac87b55b612553d19da36a3"}], "stats": {"total": 17, "additions": 4, "deletions": 13}, "files": [{"sha": "a5a5b009b98032aefc6e92d8a2506eb20cb5adc7", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee6837900a6f7b22f13da0db83cd5923ff9fe8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee6837900a6f7b22f13da0db83cd5923ff9fe8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=47ee6837900a6f7b22f13da0db83cd5923ff9fe8", "patch": "@@ -2107,7 +2107,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n     case RSHIFT_EXPR:\n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n-\t  if (TREE_CODE (op1) == INTEGER_CST)\n+\t  if (TREE_CODE (op1) == INTEGER_CST && skip_evaluation == 0)\n \t    {\n \t      if (tree_int_cst_sgn (op1) < 0)\n \t\twarning (\"right shift count is negative\");\n@@ -2139,7 +2139,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n     case LSHIFT_EXPR:\n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n-\t  if (TREE_CODE (op1) == INTEGER_CST)\n+\t  if (TREE_CODE (op1) == INTEGER_CST && skip_evaluation == 0)\n \t    {\n \t      if (tree_int_cst_sgn (op1) < 0)\n \t\twarning (\"left shift count is negative\");\n@@ -2167,7 +2167,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n     case LROTATE_EXPR:\n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n-\t  if (TREE_CODE (op1) == INTEGER_CST)\n+\t  if (TREE_CODE (op1) == INTEGER_CST && skip_evaluation == 0)\n \t    {\n \t      if (tree_int_cst_sgn (op1) < 0)\n \t\twarning (\"shift count is negative\");\n@@ -2469,7 +2469,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t  converted = 1;\n \t  resultcode = xresultcode;\n \n-\t  if (warn_sign_compare)\n+\t  if (warn_sign_compare && skip_evaluation == 0)\n \t    {\n \t      int op0_signed = ! TREE_UNSIGNED (TREE_TYPE (orig_op0));\n \t      int op1_signed = ! TREE_UNSIGNED (TREE_TYPE (orig_op1));\n@@ -3377,15 +3377,6 @@ build_conditional_expr (ifexp, op1, op2)\n   register tree result_type = NULL;\n   tree orig_op1 = op1, orig_op2 = op2;\n \n-  /* If second operand is omitted, it is the same as the first one;\n-     make sure it is calculated only once.  */\n-  if (op1 == 0)\n-    {\n-      if (pedantic)\n-\tpedwarn (\"ANSI C forbids omitting the middle term of a ?: expression\");\n-      ifexp = orig_op1 = op1 = save_expr (ifexp);\n-    }\n-\n   ifexp = truthvalue_conversion (default_conversion (ifexp));\n \n #if 0 /* Produces wrong result if within sizeof.  */"}]}