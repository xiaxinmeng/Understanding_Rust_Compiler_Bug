{"sha": "a5f3dd66156df7d51189ceb2077592c332fbcc10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVmM2RkNjYxNTZkZjdkNTExODljZWIyMDc3NTkyYzMzMmZiY2MxMA==", "commit": {"author": {"name": "Kelley Cook", "email": "kelleycook@wideopenwest.com", "date": "2003-06-06T04:33:03Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2003-06-06T04:33:03Z"}, "message": "re PR rtl-optimization/4490 (ICE with -m128bit-long-double)\n\n\tPR optimization/4490\n\t* config/i386/i386.md: Don't use XFMode if TARGET_128BIT_LONG_DOUBLE.\n\t* doc/invoke.texi (m96bit-long-double, m128bit-long-double):  Reword\n\tdocumentation to accurately reflect what these options do.\n\nFrom-SVN: r67528", "tree": {"sha": "2d7cfe332dce3ae0463f2d444d4ed92de1c44153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d7cfe332dce3ae0463f2d444d4ed92de1c44153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5f3dd66156df7d51189ceb2077592c332fbcc10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f3dd66156df7d51189ceb2077592c332fbcc10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f3dd66156df7d51189ceb2077592c332fbcc10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f3dd66156df7d51189ceb2077592c332fbcc10/comments", "author": null, "committer": null, "parents": [{"sha": "25119b21dcf803317093d30bf27e77ea4aa1b75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25119b21dcf803317093d30bf27e77ea4aa1b75a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25119b21dcf803317093d30bf27e77ea4aa1b75a"}], "stats": {"total": 148, "additions": 83, "deletions": 65}, "files": [{"sha": "d886022464e62573e48b22e9f202b7b16c515151", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3dd66156df7d51189ceb2077592c332fbcc10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3dd66156df7d51189ceb2077592c332fbcc10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5f3dd66156df7d51189ceb2077592c332fbcc10", "patch": "@@ -1,3 +1,10 @@\n+2003-06-05  Kelley Cook  <kelleycook@wideopenwest.com>\n+\n+\tPR optimization/4490\n+\t* config/i386/i386.md: Don't use XFMode if TARGET_128BIT_LONG_DOUBLE.\n+\t* doc/invoke.texi (m96bit-long-double, m128bit-long-double):  Reword\n+\tdocumentation to accurately reflect what these options do.\n+\n 2003-06-06  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/linux.h (STARTFILE_SPEC): Handle -pie.  Simplify."}, {"sha": "9731d19b751a5c59d806b679d2bd6fe95a21e306", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3dd66156df7d51189ceb2077592c332fbcc10/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3dd66156df7d51189ceb2077592c332fbcc10/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a5f3dd66156df7d51189ceb2077592c332fbcc10", "patch": "@@ -707,7 +707,7 @@\n   [(set (reg:CC 17)\n \t(compare:CC (match_operand:XF 0 \"cmp_fp_expander_operand\" \"\")\n \t\t    (match_operand:XF 1 \"cmp_fp_expander_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n {\n   ix86_compare_op0 = operands[0];\n   ix86_compare_op1 = operands[1];\n@@ -841,7 +841,7 @@\n \t(compare:CCFP\n \t  (match_operand:XF 0 \"register_operand\" \"f\")\n \t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"* return output_fp_compare (insn, operands, 0, 0);\"\n   [(set_attr \"type\" \"fcmp\")\n    (set_attr \"mode\" \"XF\")])\n@@ -863,7 +863,7 @@\n \t     (match_operand:XF 1 \"register_operand\" \"f\")\n \t     (match_operand:XF 2 \"register_operand\" \"f\"))]\n \t  UNSPEC_FNSTSW))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"* return output_fp_compare (insn, operands, 2, 0);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"XF\")])\n@@ -2740,7 +2740,7 @@\n (define_expand \"movxf\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:XF 1 \"general_operand\" \"\"))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_128BIT_LONG_DOUBLE\"\n   \"ix86_expand_move (XFmode, operands); DONE;\")\n \n (define_expand \"movtf\"\n@@ -2759,7 +2759,7 @@\n (define_insn \"*pushxf_nointeger\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=X,X,X\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f,Fo,*r\"))]\n-  \"!TARGET_64BIT && optimize_size\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && optimize_size\"\n {\n   /* This insn should be already splitted before reg-stack.  */\n   abort ();\n@@ -2781,7 +2781,7 @@\n (define_insn \"*pushxf_integer\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f#r,ro#f\"))]\n-  \"!TARGET_64BIT && !optimize_size\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && !optimize_size\"\n {\n   /* This insn should be already splitted before reg-stack.  */\n   abort ();\n@@ -2814,7 +2814,7 @@\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(match_operand:XF 1 \"any_fp_register_operand\" \"\"))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_128BIT_LONG_DOUBLE\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n    (set (mem:XF (reg:SI 7)) (match_dup 1))])\n \n@@ -2836,7 +2836,7 @@\n (define_insn \"*movxf_nointeger\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,*r,o\")\n \t(match_operand:XF 1 \"general_operand\" \"fm,f,G,*roF,F*r\"))]\n-  \"!TARGET_64BIT\n+  \"!TARGET_128BIT_LONG_DOUBLE\n    && optimize_size\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && (reload_in_progress || reload_completed\n@@ -2926,7 +2926,7 @@\n (define_insn \"*movxf_integer\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,m,f#r,r#f,o\")\n \t(match_operand:XF 1 \"general_operand\" \"fm#r,f#r,G,roF#f,Fr#f\"))]\n-  \"!TARGET_64BIT\n+  \"!TARGET_128BIT_LONG_DOUBLE\n    && !optimize_size\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && (reload_in_progress || reload_completed\n@@ -3593,7 +3593,7 @@\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(float_extend:XF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_128BIT_LONG_DOUBLE\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n    (set (mem:XF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n@@ -3626,7 +3626,7 @@\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(float_extend:XF (match_operand:DF 1 \"fp_register_operand\" \"\")))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_128BIT_LONG_DOUBLE\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n    (set (mem:DF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n@@ -3708,7 +3708,7 @@\n (define_expand \"extendsfxf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:XF (match_operand:SF 1 \"general_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n      are LEGITIMATE_CONSTANT_P.  */\n@@ -3721,7 +3721,7 @@\n (define_insn \"*extendsfxf2_1\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"!TARGET_64BIT && TARGET_80387\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (which_alternative)\n@@ -3798,7 +3798,7 @@\n (define_expand \"extenddfxf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:XF (match_operand:DF 1 \"general_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n      are LEGITIMATE_CONSTANT_P.  */\n@@ -3811,7 +3811,7 @@\n (define_insn \"*extenddfxf2_1\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"!TARGET_64BIT && TARGET_80387\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (which_alternative)\n@@ -4130,15 +4130,15 @@\n \t\t   (float_truncate:SF\n \t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (match_dup 2))])]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"operands[2] = assign_386_stack_local (SFmode, 0);\")\n \n (define_insn \"*truncxfsf2_1\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f#rx,?r#fx,?x#rf\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"register_operand\" \"f,f,f,f\")))\n    (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m\"))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n {\n   switch (which_alternative)\n     {\n@@ -4158,7 +4158,7 @@\n   [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n {\n   if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n     return \"fstp%z0\\t%y0\";\n@@ -4255,15 +4255,15 @@\n \t\t   (float_truncate:DF\n \t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (match_dup 2))])]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"operands[2] = assign_386_stack_local (DFmode, 0);\")\n \n (define_insn \"*truncxfdf2_1\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f#rY,?r#fY,?Y#rf\")\n \t(float_truncate:DF\n \t (match_operand:XF 1 \"register_operand\" \"f,f,f,f\")))\n    (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m,m,m\"))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n {\n   switch (which_alternative)\n     {\n@@ -4284,7 +4284,7 @@\n   [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n \t(float_truncate:DF\n \t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n {\n   if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n     return \"fstp%z0\\t%y0\";\n@@ -4384,7 +4384,7 @@\n (define_expand \"fix_truncxfdi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n         (fix:DI (match_operand:XF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"\")\n \n (define_expand \"fix_trunctfdi2\"\n@@ -4551,7 +4551,7 @@\n (define_expand \"fix_truncxfsi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(fix:SI (match_operand:XF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"\")\n \n (define_expand \"fix_trunctfsi2\"\n@@ -4712,7 +4712,7 @@\n (define_expand \"fix_truncxfhi2\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n         (fix:HI (match_operand:XF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"\")\n \n (define_expand \"fix_trunctfhi2\"\n@@ -5064,7 +5064,7 @@\n (define_insn \"floathixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:HI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"@\n    fild%z1\\t%1\n    #\"\n@@ -5086,7 +5086,7 @@\n (define_insn \"floatsixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"@\n    fild%z1\\t%1\n    #\"\n@@ -5108,7 +5108,7 @@\n (define_insn \"floatdixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"@\n    fild%z1\\t%1\n    #\"\n@@ -6819,7 +6819,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(plus:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"\")\n \n (define_expand \"addtf3\"\n@@ -7172,7 +7172,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(minus:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t  (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"\")\n \n (define_expand \"subtf3\"\n@@ -7690,7 +7690,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"\")\n \n (define_expand \"multf3\"\n@@ -7744,7 +7744,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(div:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t(match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"\")\n \n (define_expand \"divtf3\"\n@@ -10157,7 +10157,7 @@\n   [(parallel [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t\t   (neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"ix86_expand_unary_operator (NEG, XFmode, operands); DONE;\")\n \n (define_expand \"negtf2\"\n@@ -10174,7 +10174,7 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"!TARGET_64BIT && TARGET_80387\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n    && ix86_unary_operator_ok (NEG, XFmode, operands)\"\n   \"#\")\n \n@@ -10262,7 +10262,7 @@\n (define_insn \"*negxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"!TARGET_64BIT && TARGET_80387 && reload_completed\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && reload_completed\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")\n@@ -10272,7 +10272,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (float_extend:XF\n \t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")\n@@ -10282,7 +10282,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (float_extend:XF\n \t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")\n@@ -10619,7 +10619,7 @@\n   [(parallel [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t\t   (neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"ix86_expand_unary_operator (ABS, XFmode, operands); DONE;\")\n \n (define_expand \"abstf2\"\n@@ -10636,7 +10636,7 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(abs:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"!TARGET_64BIT && TARGET_80387\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n    && ix86_unary_operator_ok (ABS, XFmode, operands)\"\n   \"#\")\n \n@@ -10715,7 +10715,7 @@\n (define_insn \"*absxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"!TARGET_64BIT && TARGET_80387 && reload_completed\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && reload_completed\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"DF\")])\n@@ -10724,7 +10724,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (float_extend:XF\n \t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n@@ -10733,7 +10733,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (float_extend:XF\n \t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n@@ -14803,7 +14803,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:XF 1 \"register_operand\" \"%0\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"f\")]))]\n-  \"!TARGET_64BIT && TARGET_80387\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n    && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n@@ -15079,7 +15079,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"f,0\")]))]\n-  \"!TARGET_64BIT && TARGET_80387\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n    && GET_RTX_CLASS (GET_CODE (operands[3])) != 'c'\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n@@ -15113,7 +15113,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,0\")]))]\n-  \"!TARGET_64BIT && TARGET_80387 && TARGET_USE_FIOP\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && TARGET_USE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -15149,7 +15149,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(match_operand:XF 1 \"register_operand\" \"0,0\")\n \t   (float:XF (match_operand:SI 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n-  \"!TARGET_64BIT && TARGET_80387 && TARGET_USE_FIOP\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && TARGET_USE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -15185,7 +15185,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float_extend:XF (match_operand 1 \"nonimmediate_operand\" \"fm,0\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,f\")]))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -15218,7 +15218,7 @@\n \t  [(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t   (float_extend:XF\n \t    (match_operand 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -15253,7 +15253,7 @@\n \t    (match_operand 1 \"register_operand\" \"0,f\"))\n \t   (float_extend:XF\n \t    (match_operand 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"!TARGET_64BIT && TARGET_80387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -15419,7 +15419,7 @@\n (define_insn \"sqrtxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"!TARGET_64BIT && TARGET_80387 && !TARGET_NO_FANCY_MATH_387 \n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && !TARGET_NO_FANCY_MATH_387 \n    && (TARGET_IEEE_FP || flag_unsafe_math_optimizations) \"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -15440,7 +15440,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n \t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_64BIT && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")\n@@ -15460,7 +15460,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n \t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_64BIT && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")\n@@ -15508,7 +15508,7 @@\n (define_insn \"sinxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] UNSPEC_SIN))]\n-  \"!TARGET_64BIT && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n   \"fsin\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -15555,7 +15555,7 @@\n (define_insn \"cosxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] UNSPEC_COS))]\n-  \"!TARGET_64BIT && ! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+  \"!TARGET_128BIT_LONG_DOUBLE && ! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n   \"fcos\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -16975,7 +16975,7 @@\n \t(if_then_else:XF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"\")\n \t\t\t (match_operand:XF 3 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_CMOVE\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_CMOVE\"\n   \"if (! ix86_expand_fp_movcc (operands)) FAIL; DONE;\")\n \n (define_expand \"movtfcc\"\n@@ -16992,7 +16992,7 @@\n \t\t\t\t[(reg 17) (const_int 0)])\n \t\t      (match_operand:XF 2 \"register_operand\" \"f,0\")\n \t\t      (match_operand:XF 3 \"register_operand\" \"0,f\")))]\n-  \"!TARGET_64BIT && TARGET_CMOVE\"\n+  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_CMOVE\"\n   \"@\n    fcmov%F1\\t{%2, %0|%0, %2}\n    fcmov%f1\\t{%3, %0|%0, %3}\""}, {"sha": "1a8f78dce2535d8c83fbdd680fb3c45f22eef1e2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f3dd66156df7d51189ceb2077592c332fbcc10/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f3dd66156df7d51189ceb2077592c332fbcc10/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a5f3dd66156df7d51189ceb2077592c332fbcc10", "patch": "@@ -8242,22 +8242,33 @@ the published application binary interface specifications for the 386\n and will not be binary compatible with structures in code compiled\n without that switch.\n \n+@item -m96bit-long-double\n @item -m128bit-long-double\n+@opindex m96bit-long-double\n @opindex m128bit-long-double\n-Control the size of @code{long double} type. i386 application binary interface\n-specify the size to be 12 bytes, while modern architectures (Pentium and newer)\n-prefer @code{long double} aligned to 8 or 16 byte boundary.  This is\n-impossible to reach with 12 byte long doubles in the array accesses.\n+These switches control the size of @code{long double} type. The i386 \n+application binary interface specifies the size to be 96 bits, \n+so @option{-m96bit-long-double} is the default in 32 bit mode.\n+\n+Modern architectures (Pentium and newer) would prefer @code{long double}\n+to be aligned to an 8 or 16 byte boundary.  In arrays or structures \n+conforming to the ABI, this would not be possible.  So specifying a \n+@option{-m128bit-long-double} will align @code{long double}\n+to a 16 byte boundary by padding the @code{long double} with an additional\n+32 bit zero. \n+\n+In the x86-64 compiler, @option{-m128bit-long-double} is the default choice as\n+its ABI specifies that @code{long double} is to be aligned on 16 byte boundary.\n+ \n+Notice that neither of these options enable any extra precision over the x87\n+standard of 80 bits for a @code{long double}. \n \n-@strong{Warning:} if you use the @option{-m128bit-long-double} switch, the\n+@strong{Warning:} if you override the default value for your target ABI, the\n structures and arrays containing @code{long double} will change their size as\n well as function calling convention for function taking @code{long double}\n-will be modified.\n+will be modified.  Hence they will not be binary compatible with arrays or\n+structures in code compiled without that switch.\n \n-@item -m96bit-long-double\n-@opindex m96bit-long-double\n-Set the size of @code{long double} to 96 bits as required by the i386\n-application binary interface.  This is the default.\n \n @item -msvr3-shlib\n @itemx -mno-svr3-shlib"}]}