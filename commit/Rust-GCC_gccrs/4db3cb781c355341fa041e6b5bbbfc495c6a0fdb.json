{"sha": "4db3cb781c355341fa041e6b5bbbfc495c6a0fdb", "node_id": "C_kwDOANBUbNoAKDRkYjNjYjc4MWMzNTUzNDFmYTA0MWU2YjViYmJmYzQ5NWM2YTBmZGI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-08T13:45:45Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-08T13:45:45Z"}, "message": "c++: unnecessary instantiation of constexpr var [PR99130]\n\nHere the use of 'value' from within an unevaluated context causes us\nto overeagerly instantiate it, via maybe_instantiate_decl called from\nmark_used, despite the use occurring in a context that doesn't require\na definition.\n\nThis seems to only affect constexpr variable specializations, though\nwe used to have the same issue for constexpr function specializations\nuntil r6-1309-g81371eff9bc7ef made us delay their instantiation until\nnecessary during constexpr evaluation.\n\nThis patch expands upon the r6-1309 fix to make mark_used avoid\nunnecessarily instantiating constexpr variable specializations too,\nby pulling out from maybe_instantiate_decl the condition\n\n  (decl_maybe_constant_var_p (decl)\n   || (TREE_CODE (decl) == FUNCTION_DECL\n       && DECL_OMP_DECLARE_REDUCTION_P (decl))\n   || undeduced_auto_decl (decl))\n\ninto each of its three callers (including mark_used), removing the\nproblematic first test from mark_used, and simplifying accordingly.\nThe net result is that only mark_used is changed because the other two\ncallers, resolve_address_of_overloaded_function and decl_constant_var_p,\nalready guard the call appropriately.  (This relaxation of mark_used\nseems to be safe because during constexpr evaluation we already take\ncare to instantiate a constexpr variable as necessary via\ndecl_constant_value etc).\n\n\tPR c++/99130\n\ngcc/cp/ChangeLog:\n\n\t* decl2.cc (maybe_instantiate_decl): Adjust function comment.\n\tCheck VAR_OR_FUNCTION_DECL_P.  Pull out the disjunction into ...\n\t(mark_used): ... here, removing the decl_maybe_constant_var_p\n\tpart of it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-decltype5.C: New test.", "tree": {"sha": "b113e95a7756fe473ce3e7c834e8ded99649157e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b113e95a7756fe473ce3e7c834e8ded99649157e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4db3cb781c355341fa041e6b5bbbfc495c6a0fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db3cb781c355341fa041e6b5bbbfc495c6a0fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db3cb781c355341fa041e6b5bbbfc495c6a0fdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db3cb781c355341fa041e6b5bbbfc495c6a0fdb/comments", "author": null, "committer": null, "parents": [{"sha": "95c7d5899521a9e266c68cbcc92edfd2cde8694e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c7d5899521a9e266c68cbcc92edfd2cde8694e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c7d5899521a9e266c68cbcc92edfd2cde8694e"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "cd188813beeb58f0558e695a2b75d175fe0a5443", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db3cb781c355341fa041e6b5bbbfc495c6a0fdb/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db3cb781c355341fa041e6b5bbbfc495c6a0fdb/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=4db3cb781c355341fa041e6b5bbbfc495c6a0fdb", "patch": "@@ -5381,24 +5381,15 @@ possibly_inlined_p (tree decl)\n   return true;\n }\n \n-/* Normally, we can wait until instantiation-time to synthesize DECL.\n-   However, if DECL is a static data member initialized with a constant\n-   or a constexpr function, we need it right now because a reference to\n-   such a data member or a call to such function is not value-dependent.\n-   For a function that uses auto in the return type, we need to instantiate\n-   it to find out its type.  For OpenMP user defined reductions, we need\n-   them instantiated for reduction clauses which inline them by hand\n-   directly.  */\n+/* If DECL is a function or variable template specialization, instantiate\n+   its definition now.  */\n \n void\n maybe_instantiate_decl (tree decl)\n {\n-  if (DECL_LANG_SPECIFIC (decl)\n+  if (VAR_OR_FUNCTION_DECL_P (decl)\n+      && DECL_LANG_SPECIFIC (decl)\n       && DECL_TEMPLATE_INFO (decl)\n-      && (decl_maybe_constant_var_p (decl)\n-\t  || (TREE_CODE (decl) == FUNCTION_DECL\n-\t      && DECL_OMP_DECLARE_REDUCTION_P (decl))\n-\t  || undeduced_auto_decl (decl))\n       && !DECL_DECLARED_CONCEPT_P (decl)\n       && !uses_template_parms (DECL_TI_ARGS (decl)))\n     {\n@@ -5700,15 +5691,13 @@ mark_used (tree decl, tsubst_flags_t complain)\n       return false;\n     }\n \n-  /* Normally, we can wait until instantiation-time to synthesize DECL.\n-     However, if DECL is a static data member initialized with a constant\n-     or a constexpr function, we need it right now because a reference to\n-     such a data member or a call to such function is not value-dependent.\n-     For a function that uses auto in the return type, we need to instantiate\n-     it to find out its type.  For OpenMP user defined reductions, we need\n-     them instantiated for reduction clauses which inline them by hand\n-     directly.  */\n-  maybe_instantiate_decl (decl);\n+  /* If DECL has a deduced return type, we need to instantiate it now to\n+     find out its type.  For OpenMP user defined reductions, we need them\n+     instantiated for reduction clauses which inline them by hand directly.  */\n+  if (undeduced_auto_decl (decl)\n+      || (TREE_CODE (decl) == FUNCTION_DECL\n+\t  && DECL_OMP_DECLARE_REDUCTION_P (decl)))\n+    maybe_instantiate_decl (decl);\n \n   if (processing_template_decl || in_template_function ())\n     return true;"}, {"sha": "54112262dfc997dc57318a082ce308439a39d24d", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-decltype5.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db3cb781c355341fa041e6b5bbbfc495c6a0fdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-decltype5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db3cb781c355341fa041e6b5bbbfc495c6a0fdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-decltype5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-decltype5.C?ref=4db3cb781c355341fa041e6b5bbbfc495c6a0fdb", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/99130\n+// { dg-do compile { target c++11 } }\n+\n+template<class T>\n+struct A {\n+  static constexpr int value = T::nonexistent;\n+};\n+\n+using type = const int;\n+using type = decltype(A<int>::value);\n+\n+#if __cpp_variable_templates\n+struct B {\n+  template<class T>\n+  static constexpr int value = T::nonexistent;\n+};\n+\n+template<class T>\n+constexpr int value = T::nonexistent;\n+\n+using type = decltype(B::value<int>);\n+using type = decltype(value<int>);\n+#endif"}]}