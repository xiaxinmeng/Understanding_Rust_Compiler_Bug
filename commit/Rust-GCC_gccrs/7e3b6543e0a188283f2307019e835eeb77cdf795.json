{"sha": "7e3b6543e0a188283f2307019e835eeb77cdf795", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UzYjY1NDNlMGExODgyODNmMjMwNzAxOWU4MzVlZWI3N2NkZjc5NQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-03-27T17:40:26Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-03-27T17:40:26Z"}, "message": "re PR fortran/47065 (Replace trim(a) by a(1:len_trim(a)))\n\n2011-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/47065\n\t* frontend-passes (optimize_trim): Also follow references, except\n\twhen they are substring references or array references.\n\n2011-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/47065\n\t* gfortran.dg/trim_optimize_5.f90:  New test.\n\t* gfortran.dg/trim_optimize_6.f90:  New test.\n\nFrom-SVN: r171575", "tree": {"sha": "5f8e7e59135cea0ccb12d23b4052ba0a4b3989dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f8e7e59135cea0ccb12d23b4052ba0a4b3989dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e3b6543e0a188283f2307019e835eeb77cdf795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e3b6543e0a188283f2307019e835eeb77cdf795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e3b6543e0a188283f2307019e835eeb77cdf795", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e3b6543e0a188283f2307019e835eeb77cdf795/comments", "author": null, "committer": null, "parents": [{"sha": "15ea09a082e6964a4abbc49a6834cf5ab705813a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ea09a082e6964a4abbc49a6834cf5ab705813a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ea09a082e6964a4abbc49a6834cf5ab705813a"}], "stats": {"total": 125, "additions": 96, "deletions": 29}, "files": [{"sha": "95d9b78a0bdf290e782e3ab924bbd7ff78a04ede", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3b6543e0a188283f2307019e835eeb77cdf795/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3b6543e0a188283f2307019e835eeb77cdf795/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7e3b6543e0a188283f2307019e835eeb77cdf795", "patch": "@@ -1,3 +1,9 @@\n+2011-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/47065\n+\t* frontend-passes (optimize_trim): Also follow references, except\n+\twhen they are substring references or array references.\n+\n 2011-03-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "2051b0c566d49108f6ee6d327b6ca1066dbd3539", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3b6543e0a188283f2307019e835eeb77cdf795/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3b6543e0a188283f2307019e835eeb77cdf795/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=7e3b6543e0a188283f2307019e835eeb77cdf795", "patch": "@@ -664,6 +664,7 @@ optimize_trim (gfc_expr *e)\n   gfc_ref *ref;\n   gfc_expr *fcn;\n   gfc_actual_arglist *actual_arglist, *next;\n+  gfc_ref **rr = NULL;\n \n   /* Don't do this optimization within an argument list, because\n      otherwise aliasing issues may occur.  */\n@@ -681,46 +682,54 @@ optimize_trim (gfc_expr *e)\n   if (a->expr_type != EXPR_VARIABLE)\n     return false;\n \n+  /* Follow all references to find the correct place to put the newly\n+     created reference.  FIXME:  Also handle substring references and\n+     array references.  Array references cause strange regressions at\n+     the moment.  */\n+\n   if (a->ref)\n     {\n-      /* FIXME - also handle substring references, by modifying the\n-\t reference itself.  Make sure not to evaluate functions in\n-\t the references twice.  */\n-      return false;\n+      for (rr = &(a->ref); *rr; rr = &((*rr)->next))\n+\t{\n+\t  if ((*rr)->type == REF_SUBSTRING || (*rr)->type == REF_ARRAY)\n+\t    return false;\n+\t}\n     }\n-  else\n-    {\n-      strip_function_call (e);\n \n-      /* Create the reference.  */\n+  strip_function_call (e);\n \n-      ref = gfc_get_ref ();\n-      ref->type = REF_SUBSTRING;\n+  if (e->ref == NULL)\n+    rr = &(e->ref);\n \n-      /* Set the start of the reference.  */\n+  /* Create the reference.  */\n \n-      ref->u.ss.start = gfc_get_int_expr (gfc_default_integer_kind, NULL, 1);\n+  ref = gfc_get_ref ();\n+  ref->type = REF_SUBSTRING;\n \n-      /* Build the function call to len_trim(x, gfc_defaul_integer_kind).  */\n+  /* Set the start of the reference.  */\n \n-      fcn = gfc_get_expr ();\n-      fcn->expr_type = EXPR_FUNCTION;\n-      fcn->value.function.isym =\n-\tgfc_intrinsic_function_by_id (GFC_ISYM_LEN_TRIM);\n-      actual_arglist = gfc_get_actual_arglist ();\n-      actual_arglist->expr = gfc_copy_expr (e);\n-      next = gfc_get_actual_arglist ();\n-      next->expr = gfc_get_int_expr (gfc_default_integer_kind, NULL,\n-\t\t\t\t     gfc_default_integer_kind);\n-      actual_arglist->next = next;\n-      fcn->value.function.actual = actual_arglist;\n+  ref->u.ss.start = gfc_get_int_expr (gfc_default_integer_kind, NULL, 1);\n \n-      /* Set the end of the reference to the call to len_trim.  */\n+  /* Build the function call to len_trim(x, gfc_defaul_integer_kind).  */\n \n-      ref->u.ss.end = fcn;\n-      e->ref = ref;\n-      return true;\n-    }\n+  fcn = gfc_get_expr ();\n+  fcn->expr_type = EXPR_FUNCTION;\n+  fcn->value.function.isym =\n+    gfc_intrinsic_function_by_id (GFC_ISYM_LEN_TRIM);\n+  actual_arglist = gfc_get_actual_arglist ();\n+  actual_arglist->expr = gfc_copy_expr (e);\n+  next = gfc_get_actual_arglist ();\n+  next->expr = gfc_get_int_expr (gfc_default_integer_kind, NULL,\n+\t\t\t\t gfc_default_integer_kind);\n+  actual_arglist->next = next;\n+  fcn->value.function.actual = actual_arglist;\n+\n+  /* Set the end of the reference to the call to len_trim.  */\n+\n+  ref->u.ss.end = fcn;\n+  gcc_assert (*rr == NULL);\n+  *rr = ref;\n+  return true;\n }\n \n #define WALK_SUBEXPR(NODE) \\"}, {"sha": "3cc61b079d5c88d2d5907dd0bc47c4e42a92a60d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3b6543e0a188283f2307019e835eeb77cdf795/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3b6543e0a188283f2307019e835eeb77cdf795/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e3b6543e0a188283f2307019e835eeb77cdf795", "patch": "@@ -1,3 +1,9 @@\n+2011-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/47065\n+\t* gfortran.dg/trim_optimize_5.f90:  New test.\n+\t* gfortran.dg/trim_optimize_6.f90:  New test.\n+\n 2011-03-27  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR target/38598"}, {"sha": "70a85d601d446f5fcff5eb2e89823a943af30ed9", "filename": "gcc/testsuite/gfortran.dg/trim_optimize_5.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3b6543e0a188283f2307019e835eeb77cdf795/gcc%2Ftestsuite%2Fgfortran.dg%2Ftrim_optimize_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3b6543e0a188283f2307019e835eeb77cdf795/gcc%2Ftestsuite%2Fgfortran.dg%2Ftrim_optimize_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftrim_optimize_5.f90?ref=7e3b6543e0a188283f2307019e835eeb77cdf795", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+! { dg-options \"-O -fdump-tree-original\" }\n+! PR 47065 - replace trim with substring expressions even with references.\n+program main\n+  use foo\n+  implicit none\n+  type t\n+     character(len=2) :: x\n+  end type t\n+  type(t) :: a\n+  character(len=3) :: b\n+  character(len=10) :: line\n+  a%x = 'a'\n+  write(unit=line,fmt='(A,A)') trim(a%x),\"X\"\n+  if (line /= 'aX        ') call abort\n+  b = 'ab'\n+  write (unit=line,fmt='(A,A)') trim(b),\"Y\"\n+  if (line /= 'abY       ') call abort\n+end program main\n+! { dg-final { scan-tree-dump-times \"string_len_trim\" 2 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "2303bb4ef78b0192b133e98ee21a22793dff288b", "filename": "gcc/testsuite/gfortran.dg/trim_optimize_6.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e3b6543e0a188283f2307019e835eeb77cdf795/gcc%2Ftestsuite%2Fgfortran.dg%2Ftrim_optimize_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e3b6543e0a188283f2307019e835eeb77cdf795/gcc%2Ftestsuite%2Fgfortran.dg%2Ftrim_optimize_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftrim_optimize_6.f90?ref=7e3b6543e0a188283f2307019e835eeb77cdf795", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! PR 47065 - make sure that impure functions are not evaluated twice when\n+! replacing calls to trim with expression(1:len_trim)\n+module foo\n+  implicit none\n+contains\n+  function f()\n+    integer :: f\n+    integer :: s=0\n+    s = s + 1\n+    f = s\n+  end function f\n+end module foo\n+\n+program main\n+  use foo\n+  implicit none\n+  character(len=10) :: line\n+  character(len=4) :: b(2)\n+  b(1) = 'a'\n+  b(2) = 'bc'\n+  write(unit=line,fmt='(A,A)') trim(b(f())), \"X\"\n+  if (line /= \"aX          \") call abort\n+  if (f() .ne. 2) call abort\n+end program main"}]}