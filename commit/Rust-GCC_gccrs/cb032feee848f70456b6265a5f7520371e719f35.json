{"sha": "cb032feee848f70456b6265a5f7520371e719f35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IwMzJmZWVlODQ4ZjcwNDU2YjYyNjVhNWY3NTIwMzcxZTcxOWYzNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-11T15:30:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-11T15:30:52Z"}, "message": "i386.c (legitimize_tls_address): Call gen_tls_dynamic_gnu2_{32,64} expanders directly for TARGET_GNU2_TLS.\n\n\t* config/i386/i386.c (legitimize_tls_address)\n\t<TLS_MODEL_GLOBAL_DYNAMIC>: Call gen_tls_dynamic_gnu2_{32,64}\n\texpanders directly for TARGET_GNU2_TLS.  Determine pic and\n\t__tls_get_addr symbol reference here.  Update call to\n\tgen_tls_global_dynamic_{32,64} for added arguments.\n\t<TLS_MODEL_LOCAL_DYNAMIC>: Call gen_tls_dynamic_gnu2_{32,64}\n\texpanders directly for TARGET_GNU2_TLS.  Determine\n\t__tls_get_addr symbol reference here.  Update call to\n\tgen_tls_local_dynamic_base_{32,64} for added arguments.  Attach\n\tunique UNSPEC REG_EQUIV to libcall block.\n\t(ix86_tls_get_addr): Declare static.\n\t* config/i386/i386-protos.h (ix86_tls_get_addr): Remove declaration.\n\t* config/i386/i386.md (tls_global_dynamic_32): Add operand 2 and 3.\n\tDo not determine pic and __tls_get_addr symbol reference here. Do not\n\tcall gen_tls_dynamic_gnu2_32 for TARGET_GNU2_TLS.\n\t(tls_local_dynamic_base_32): Ditto for operands 1 and 2.\n\t(tls_global_dynamic_64): Add operand 2.  Do not determine\n\t__tls_get_addr symbol reference here.  Do not call\n\tgen_tls_dynamic_gnu2_64 for TARGET_GNU2_TLS here.\n\t(tls_local_dynamic_base64): Ditto for operand 1.\n\nFrom-SVN: r173662", "tree": {"sha": "b6c3b80ce2d340562c1bce2f34083ef27a41f5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6c3b80ce2d340562c1bce2f34083ef27a41f5fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb032feee848f70456b6265a5f7520371e719f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb032feee848f70456b6265a5f7520371e719f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb032feee848f70456b6265a5f7520371e719f35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb032feee848f70456b6265a5f7520371e719f35/comments", "author": null, "committer": null, "parents": [{"sha": "6d3cc8f0516347d5e1a1dec49e872889967c0136", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d3cc8f0516347d5e1a1dec49e872889967c0136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d3cc8f0516347d5e1a1dec49e872889967c0136"}], "stats": {"total": 306, "additions": 157, "deletions": 149}, "files": [{"sha": "8c799370220b553a8d12aa30da8e6d16173b2bcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb032feee848f70456b6265a5f7520371e719f35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb032feee848f70456b6265a5f7520371e719f35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb032feee848f70456b6265a5f7520371e719f35", "patch": "@@ -1,3 +1,26 @@\n+2011-05-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (legitimize_tls_address)\n+\t<TLS_MODEL_GLOBAL_DYNAMIC>: Call gen_tls_dynamic_gnu2_{32,64}\n+\texpanders directly for TARGET_GNU2_TLS.  Determine pic and\n+\t__tls_get_addr symbol reference here.  Update call to\n+\tgen_tls_global_dynamic_{32,64} for added arguments.\n+\t<TLS_MODEL_LOCAL_DYNAMIC>: Call gen_tls_dynamic_gnu2_{32,64}\n+\texpanders directly for TARGET_GNU2_TLS.  Determine\n+\t__tls_get_addr symbol reference here.  Update call to\n+\tgen_tls_local_dynamic_base_{32,64} for added arguments.  Attach\n+\tunique UNSPEC REG_EQUIV to libcall block.\n+\t(ix86_tls_get_addr): Declare static.\n+\t* config/i386/i386-protos.h (ix86_tls_get_addr): Remove declaration.\n+\t* config/i386/i386.md (tls_global_dynamic_32): Add operand 2 and 3.\n+\tDo not determine pic and __tls_get_addr symbol reference here. Do not\n+\tcall gen_tls_dynamic_gnu2_32 for TARGET_GNU2_TLS.\n+\t(tls_local_dynamic_base_32): Ditto for operands 1 and 2.\n+\t(tls_global_dynamic_64): Add operand 2.  Do not determine\n+\t__tls_get_addr symbol reference here.  Do not call\n+\tgen_tls_dynamic_gnu2_64 for TARGET_GNU2_TLS here.\n+\t(tls_local_dynamic_base64): Ditto for operand 1.\n+\n 2011-05-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* function.c (expand_function_start): Initialize stack_check_probe_note\n@@ -13,8 +36,7 @@\n \n 2011-05-11  Nathan Froyd  <froydnj@codesourcery.com>\n \n-\t* ggc-page.c (extra_order_size_table): Use struct\n-\ttree_type_non_common.\n+\t* ggc-page.c (extra_order_size_table): Use struct tree_type_non_common.\n \t* lto-streamer-in.c (unpack_ts_type_value_fields): Rename to...\n \t(unpack_ts_type_common_value_fields): ...this.  Update comment.\n \t(unpack_value_fields): Adjust for renaming.\n@@ -100,10 +122,8 @@\n \n 2011-05-11  Joseph Myers  <joseph@codesourcery.com>\n \n-\t* opts.c (finish_options): Move warning settings from\n-\tprocess_options.\n-\t* toplev.c (process_options): Move warning settings to\n-\tfinish_options.\n+\t* opts.c (finish_options): Move warning settings from process_options.\n+\t* toplev.c (process_options): Move warning settings to finish_options.\n \n 2011-05-11  Richard Guenther  <rguenther@suse.de>\n \n@@ -192,8 +212,7 @@\n \n 2011-05-10  Joseph Myers  <joseph@codesourcery.com>\n \n-\t* config/rs6000/genopt.sh, config/rs6000/rs6000-cpus.def: New\n-\tfiles.\n+\t* config/rs6000/genopt.sh, config/rs6000/rs6000-cpus.def: New files.\n \t* config/rs6000/rs6000-tables.opt: New file (generated).\n \t* config.gcc (powerpc*-*-*, rs6000*-*-*): Add\n \trs6000/rs6000-tables.opt to extra_options.\n@@ -230,8 +249,7 @@\n \n \t* config.gcc (libgcc_tm_file): Define instead of including files\n \tfrom ../../libgcc/config/ in tm_file.\n-\t* configure.ac (libgcc_tm_file_list, libgcc_tm_include_list):\n-\tDefine.\n+\t* configure.ac (libgcc_tm_file_list, libgcc_tm_include_list): Define.\n \t* configure: Regenerate.\n \t* Makefile.in (libgcc_tm_file_list, libgcc_tm_include_list,\n \tlibgcc_tm.h, cs-libgcc_tm.h): New."}, {"sha": "a58c964475b0caf2e89fb2e5cfd1d0ecab2a8155", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb032feee848f70456b6265a5f7520371e719f35/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb032feee848f70456b6265a5f7520371e719f35/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=cb032feee848f70456b6265a5f7520371e719f35", "patch": "@@ -193,7 +193,6 @@ extern unsigned int ix86_get_callcvt (const_tree);\n \n #endif\n \n-extern rtx ix86_tls_get_addr (void);\n extern rtx ix86_tls_module_base (void);\n \n extern void ix86_expand_vector_init (bool, rtx, rtx);"}, {"sha": "1cf8933e4dfeef0f5b8a36e16f176e55253c588f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 115, "deletions": 75, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb032feee848f70456b6265a5f7520371e719f35/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb032feee848f70456b6265a5f7520371e719f35/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cb032feee848f70456b6265a5f7520371e719f35", "patch": "@@ -12657,7 +12657,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n /* Load the thread pointer.  If TO_REG is true, force it into a register.  */\n \n static rtx\n-get_thread_pointer (int to_reg)\n+get_thread_pointer (bool to_reg)\n {\n   rtx tp, reg, insn;\n \n@@ -12672,76 +12672,154 @@ get_thread_pointer (int to_reg)\n   return reg;\n }\n \n+/* Construct the SYMBOL_REF for the tls_get_addr function.  */\n+\n+static GTY(()) rtx ix86_tls_symbol;\n+\n+static rtx\n+ix86_tls_get_addr (void)\n+{\n+  if (!ix86_tls_symbol)\n+    {\n+      const char *sym\n+\t= ((TARGET_ANY_GNU_TLS && !TARGET_64BIT)\n+\t   ? \"___tls_get_addr\" : \"__tls_get_addr\");\n+\n+      ix86_tls_symbol = gen_rtx_SYMBOL_REF (Pmode, sym);\n+    }\n+\n+  return ix86_tls_symbol;\n+}\n+\n+/* Construct the SYMBOL_REF for the _TLS_MODULE_BASE_ symbol.  */\n+\n+static GTY(()) rtx ix86_tls_module_base_symbol;\n+\n+rtx\n+ix86_tls_module_base (void)\n+{\n+  if (!ix86_tls_module_base_symbol)\n+    {\n+      ix86_tls_module_base_symbol\n+\t= gen_rtx_SYMBOL_REF (Pmode, \"_TLS_MODULE_BASE_\");\n+\n+      SYMBOL_REF_FLAGS (ix86_tls_module_base_symbol)\n+\t|= TLS_MODEL_GLOBAL_DYNAMIC << SYMBOL_FLAG_TLS_SHIFT;\n+    }\n+\n+  return ix86_tls_module_base_symbol;\n+}\n+\n /* A subroutine of ix86_legitimize_address and ix86_expand_move.  FOR_MOV is\n    false if we expect this to be used for a memory address and true if\n    we expect to load the address into a register.  */\n \n static rtx\n-legitimize_tls_address (rtx x, enum tls_model model, int for_mov)\n+legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n {\n-  rtx dest, base, off, pic, tp;\n+  rtx dest, base, off;\n+  rtx pic = NULL_RTX, tp = NULL_RTX;\n   int type;\n \n   switch (model)\n     {\n     case TLS_MODEL_GLOBAL_DYNAMIC:\n       dest = gen_reg_rtx (Pmode);\n-      tp = TARGET_GNU2_TLS ? get_thread_pointer (1) : 0;\n \n-      if (TARGET_64BIT && ! TARGET_GNU2_TLS)\n+      if (!TARGET_64BIT)\n \t{\n-\t  rtx rax = gen_rtx_REG (Pmode, AX_REG), insns;\n-\n-\t  start_sequence ();\n-\t  emit_call_insn (gen_tls_global_dynamic_64 (rax, x));\n-\t  insns = get_insns ();\n-\t  end_sequence ();\n-\n-\t  RTL_CONST_CALL_P (insns) = 1;\n-\t  emit_libcall_block (insns, dest, rax, x);\n+\t  if (flag_pic)\n+\t    pic = pic_offset_table_rtx;\n+\t  else\n+\t    {\n+\t      pic = gen_reg_rtx (Pmode);\n+\t      emit_insn (gen_set_got (pic));\n+\t    }\n \t}\n-      else if (TARGET_64BIT && TARGET_GNU2_TLS)\n-\temit_insn (gen_tls_global_dynamic_64 (dest, x));\n-      else\n-\temit_insn (gen_tls_global_dynamic_32 (dest, x));\n \n       if (TARGET_GNU2_TLS)\n \t{\n+\t  if (TARGET_64BIT)\n+\t    emit_insn (gen_tls_dynamic_gnu2_64 (dest, x));\n+\t  else\n+\t    emit_insn (gen_tls_dynamic_gnu2_32 (dest, x, pic));\n+\n+\t  tp = get_thread_pointer (true);\n \t  dest = force_reg (Pmode, gen_rtx_PLUS (Pmode, tp, dest));\n \n \t  set_unique_reg_note (get_last_insn (), REG_EQUIV, x);\n \t}\n+      else\n+\t{\n+\t  rtx caddr = ix86_tls_get_addr ();\n+\n+\t  if (TARGET_64BIT)\n+\t    {\n+\t      rtx rax = gen_rtx_REG (Pmode, AX_REG), insns;\n+\n+\t      start_sequence ();\n+\t      emit_call_insn (gen_tls_global_dynamic_64 (rax, x, caddr));\n+\t      insns = get_insns ();\n+\t      end_sequence ();\n+\n+\t      RTL_CONST_CALL_P (insns) = 1;\n+\t      emit_libcall_block (insns, dest, rax, x);\n+\t    }\n+\t  else\n+\t    emit_insn (gen_tls_global_dynamic_32 (dest, x, pic, caddr));\n+\t}\n       break;\n \n     case TLS_MODEL_LOCAL_DYNAMIC:\n       base = gen_reg_rtx (Pmode);\n-      tp = TARGET_GNU2_TLS ? get_thread_pointer (1) : 0;\n \n-      if (TARGET_64BIT && ! TARGET_GNU2_TLS)\n+      if (!TARGET_64BIT)\n \t{\n-\t  rtx rax = gen_rtx_REG (Pmode, AX_REG), insns, note;\n-\n-\t  start_sequence ();\n-\t  emit_call_insn (gen_tls_local_dynamic_base_64 (rax));\n-\t  insns = get_insns ();\n-\t  end_sequence ();\n-\n-\t  note = gen_rtx_EXPR_LIST (VOIDmode, const0_rtx, NULL);\n-\t  note = gen_rtx_EXPR_LIST (VOIDmode, ix86_tls_get_addr (), note);\n-\t  RTL_CONST_CALL_P (insns) = 1;\n-\t  emit_libcall_block (insns, base, rax, note);\n+\t  if (flag_pic)\n+\t    pic = pic_offset_table_rtx;\n+\t  else\n+\t    {\n+\t      pic = gen_reg_rtx (Pmode);\n+\t      emit_insn (gen_set_got (pic));\n+\t    }\n \t}\n-      else if (TARGET_64BIT && TARGET_GNU2_TLS)\n-\temit_insn (gen_tls_local_dynamic_base_64 (base));\n-      else\n-\temit_insn (gen_tls_local_dynamic_base_32 (base));\n \n       if (TARGET_GNU2_TLS)\n \t{\n-\t  rtx x = ix86_tls_module_base ();\n+\t  rtx tmp = ix86_tls_module_base ();\n \n+\t  if (TARGET_64BIT)\n+\t    emit_insn (gen_tls_dynamic_gnu2_64 (base, tmp));\n+\t  else\n+\t    emit_insn (gen_tls_dynamic_gnu2_32 (base, tmp, pic));\n+\n+\t  tp = get_thread_pointer (true);\n \t  set_unique_reg_note (get_last_insn (), REG_EQUIV,\n-\t\t\t       gen_rtx_MINUS (Pmode, x, tp));\n+\t\t\t       gen_rtx_MINUS (Pmode, tmp, tp));\n+\t}\n+      else\n+\t{\n+\t  rtx caddr = ix86_tls_get_addr ();\n+\n+\t  if (TARGET_64BIT)\n+\t    {\n+\t      rtx rax = gen_rtx_REG (Pmode, AX_REG), insns, eqv;\n+\n+\t      start_sequence ();\n+\t      emit_call_insn (gen_tls_local_dynamic_base_64 (rax, caddr));\n+\t      insns = get_insns ();\n+\t      end_sequence ();\n+\n+\t      /* Attach a unique REG_EQUIV, to allow the RTL optimizers to\n+\t\t share the LD_BASE result with other LD model accesses.  */\n+\t      eqv = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx),\n+\t\t\t\t    UNSPEC_TLS_LD_BASE);\n+\n+\t      RTL_CONST_CALL_P (insns) = 1;\n+\t      emit_libcall_block (insns, base, rax, eqv);\n+\t    }\n+\t  else\n+\t    emit_insn (gen_tls_local_dynamic_base_32 (base, pic, caddr));\n \t}\n \n       off = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, x), UNSPEC_DTPOFF);\n@@ -12755,7 +12833,6 @@ legitimize_tls_address (rtx x, enum tls_model model, int for_mov)\n \n \t  set_unique_reg_note (get_last_insn (), REG_EQUIV, x);\n \t}\n-\n       break;\n \n     case TLS_MODEL_INITIAL_EXEC:\n@@ -22166,43 +22243,6 @@ assign_386_stack_local (enum machine_mode mode, enum ix86_stack_slot n)\n   ix86_stack_locals = s;\n   return s->rtl;\n }\n-\n-/* Construct the SYMBOL_REF for the tls_get_addr function.  */\n-\n-static GTY(()) rtx ix86_tls_symbol;\n-rtx\n-ix86_tls_get_addr (void)\n-{\n-\n-  if (!ix86_tls_symbol)\n-    {\n-      ix86_tls_symbol = gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t    (TARGET_ANY_GNU_TLS\n-\t\t\t\t\t     && !TARGET_64BIT)\n-\t\t\t\t\t    ? \"___tls_get_addr\"\n-\t\t\t\t\t    : \"__tls_get_addr\");\n-    }\n-\n-  return ix86_tls_symbol;\n-}\n-\n-/* Construct the SYMBOL_REF for the _TLS_MODULE_BASE_ symbol.  */\n-\n-static GTY(()) rtx ix86_tls_module_base_symbol;\n-rtx\n-ix86_tls_module_base (void)\n-{\n-\n-  if (!ix86_tls_module_base_symbol)\n-    {\n-      ix86_tls_module_base_symbol = gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t\t\t\"_TLS_MODULE_BASE_\");\n-      SYMBOL_REF_FLAGS (ix86_tls_module_base_symbol)\n-\t|= TLS_MODEL_GLOBAL_DYNAMIC << SYMBOL_FLAG_TLS_SHIFT;\n-    }\n-\n-  return ix86_tls_module_base_symbol;\n-}\n \f\n /* Calculate the length of the memory address in the instruction\n    encoding.  Does not include the one-byte modrm, opcode, or prefix.  */"}, {"sha": "028eafd3ee1219b87a102401bdedc4bbc645cad3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 14, "deletions": 63, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb032feee848f70456b6265a5f7520371e719f35/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb032feee848f70456b6265a5f7520371e719f35/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cb032feee848f70456b6265a5f7520371e719f35", "patch": "@@ -12555,30 +12555,13 @@\n (define_expand \"tls_global_dynamic_32\"\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (unspec:SI\n-\t\t    [(match_dup 2)\n+\t\t    [(match_operand:SI 2 \"register_operand\" \"\")\n \t\t     (match_operand:SI 1 \"tls_symbolic_operand\" \"\")\n-\t\t     (match_dup 3)]\n+\t\t     (match_operand:SI 3 \"call_insn_operand\" \"\")]\n \t\t    UNSPEC_TLS_GD))\n \t      (clobber (match_scratch:SI 4 \"\"))\n \t      (clobber (match_scratch:SI 5 \"\"))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"\"\n-{\n-  if (flag_pic)\n-    operands[2] = pic_offset_table_rtx;\n-  else\n-    {\n-      operands[2] = gen_reg_rtx (Pmode);\n-      emit_insn (gen_set_got (operands[2]));\n-    }\n-  if (TARGET_GNU2_TLS)\n-    {\n-       emit_insn (gen_tls_dynamic_gnu2_32\n-\t\t  (operands[0], operands[1], operands[2]));\n-       DONE;\n-    }\n-  operands[3] = ix86_tls_get_addr ();\n-})\n+\t      (clobber (reg:CC FLAGS_REG))])])\n \n (define_insn \"*tls_global_dynamic_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n@@ -12593,19 +12576,11 @@\n \n (define_expand \"tls_global_dynamic_64\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (call:DI (mem:QI (match_dup 2)) (const_int 0)))\n+\t\t   (call:DI\n+\t\t     (mem:QI (match_operand:DI 2 \"call_insn_operand\" \"\"))\n+\t\t     (const_int 0)))\n \t      (unspec:DI [(match_operand:DI 1 \"tls_symbolic_operand\" \"\")]\n-\t\t\t UNSPEC_TLS_GD)])]\n-  \"\"\n-{\n-  if (TARGET_GNU2_TLS)\n-    {\n-       emit_insn (gen_tls_dynamic_gnu2_64\n-\t\t  (operands[0], operands[1]));\n-       DONE;\n-    }\n-  operands[2] = ix86_tls_get_addr ();\n-})\n+\t\t\t UNSPEC_TLS_GD)])])\n \n (define_insn \"*tls_local_dynamic_base_32_gnu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n@@ -12622,28 +12597,12 @@\n \n (define_expand \"tls_local_dynamic_base_32\"\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (unspec:SI [(match_dup 1) (match_dup 2)]\n+\t\t   (unspec:SI [(match_operand:SI 1 \"register_operand\" \"\")\n+\t\t\t       (match_operand:SI 2 \"call_insn_operand\" \"\")]\n \t\t\t      UNSPEC_TLS_LD_BASE))\n \t      (clobber (match_scratch:SI 3 \"\"))\n \t      (clobber (match_scratch:SI 4 \"\"))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"\"\n-{\n-  if (flag_pic)\n-    operands[1] = pic_offset_table_rtx;\n-  else\n-    {\n-      operands[1] = gen_reg_rtx (Pmode);\n-      emit_insn (gen_set_got (operands[1]));\n-    }\n-  if (TARGET_GNU2_TLS)\n-    {\n-       emit_insn (gen_tls_dynamic_gnu2_32\n-\t\t  (operands[0], ix86_tls_module_base (), operands[1]));\n-       DONE;\n-    }\n-  operands[2] = ix86_tls_get_addr ();\n-})\n+\t      (clobber (reg:CC FLAGS_REG))])])\n \n (define_insn \"*tls_local_dynamic_base_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n@@ -12657,18 +12616,10 @@\n \n (define_expand \"tls_local_dynamic_base_64\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (call:DI (mem:QI (match_dup 1)) (const_int 0)))\n-\t      (unspec:DI [(const_int 0)] UNSPEC_TLS_LD_BASE)])]\n-  \"\"\n-{\n-  if (TARGET_GNU2_TLS)\n-    {\n-       emit_insn (gen_tls_dynamic_gnu2_64\n-\t\t  (operands[0], ix86_tls_module_base ()));\n-       DONE;\n-    }\n-  operands[1] = ix86_tls_get_addr ();\n-})\n+\t\t   (call:DI\n+\t\t     (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"\"))\n+\t\t     (const_int 0)))\n+\t      (unspec:DI [(const_int 0)] UNSPEC_TLS_LD_BASE)])])\n \n ;; Local dynamic of a single variable is a lose.  Show combine how\n ;; to convert that back to global dynamic."}]}