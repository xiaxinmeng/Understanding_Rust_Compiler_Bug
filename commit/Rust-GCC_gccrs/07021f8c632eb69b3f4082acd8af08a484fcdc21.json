{"sha": "07021f8c632eb69b3f4082acd8af08a484fcdc21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwMjFmOGM2MzJlYjY5YjNmNDA4MmFjZDhhZjA4YTQ4NGZjZGMyMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-26T18:32:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-26T18:32:41Z"}, "message": "re PR c++/31988 (new operator should not permit default first parameter)\n\ncp/\n2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR c++/31988\n\t* decl2.c (coerce_new_type): Do not allow a default argument for\n\tthe first parameter.\n\ntestsuite/\n2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR c++/31988\n\t* g++.dg/init/new25.C: New.\n\nFrom-SVN: r129657", "tree": {"sha": "a4e9a38ac896b6bfc8e16bfbf28f3e21214b2405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4e9a38ac896b6bfc8e16bfbf28f3e21214b2405"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07021f8c632eb69b3f4082acd8af08a484fcdc21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07021f8c632eb69b3f4082acd8af08a484fcdc21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07021f8c632eb69b3f4082acd8af08a484fcdc21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07021f8c632eb69b3f4082acd8af08a484fcdc21/comments", "author": null, "committer": null, "parents": [{"sha": "2b536806afcb297162fdc44e04cbf6f2c21e66aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b536806afcb297162fdc44e04cbf6f2c21e66aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b536806afcb297162fdc44e04cbf6f2c21e66aa"}], "stats": {"total": 72, "additions": 65, "deletions": 7}, "files": [{"sha": "99a2bc57538b8c75d84559bcbed7edc2b969a77d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07021f8c632eb69b3f4082acd8af08a484fcdc21/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07021f8c632eb69b3f4082acd8af08a484fcdc21/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07021f8c632eb69b3f4082acd8af08a484fcdc21", "patch": "@@ -1,3 +1,9 @@\n+2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR c++/31988\n+\t* decl2.c (coerce_new_type): Do not allow a default argument for\n+\tthe first parameter.\n+\n 2007-10-26  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR c++/33839"}, {"sha": "0a978344fa13ddee00f85c9da7e9a2aa90878326", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07021f8c632eb69b3f4082acd8af08a484fcdc21/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07021f8c632eb69b3f4082acd8af08a484fcdc21/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=07021f8c632eb69b3f4082acd8af08a484fcdc21", "patch": "@@ -1251,15 +1251,33 @@ coerce_new_type (tree type)\n       error (\"%<operator new%> must return type %qT\", ptr_type_node);\n     }\n \n-  if (!args || args == void_list_node\n-      || !same_type_p (TREE_VALUE (args), size_type_node))\n+  if (args && args != void_list_node)\n     {\n-      e = 2;\n-      if (args && args != void_list_node)\n-\targs = TREE_CHAIN (args);\n-      pedwarn (\"%<operator new%> takes type %<size_t%> (%qT) \"\n-\t       \"as first parameter\", size_type_node);\n+      if (TREE_PURPOSE (args))\n+\t{\n+\t  /* [basic.stc.dynamic.allocation]\n+\t     \n+\t     The first parameter shall not have an associated default\n+\t     argument.  */\n+\t  error (\"the first parameter of %<operator new%> cannot \"\n+\t\t \"have a default argument\");\n+\t  /* Throw away the default argument.  */\n+\t  TREE_PURPOSE (args) = NULL_TREE;\n+\t}\n+\n+      if (!same_type_p (TREE_VALUE (args), size_type_node))\n+\t{\n+\t  e = 2;\n+\t  args = TREE_CHAIN (args);\n+\t}\n     }\n+  else\n+    e = 2;\n+\n+  if (e == 2)\n+    pedwarn (\"%<operator new%> takes type %<size_t%> (%qT) \"\n+\t     \"as first parameter\", size_type_node);\n+\n   switch (e)\n   {\n     case 2:"}, {"sha": "02339a0c64faf196d712304c7e17ed1ed4ca7623", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07021f8c632eb69b3f4082acd8af08a484fcdc21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07021f8c632eb69b3f4082acd8af08a484fcdc21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07021f8c632eb69b3f4082acd8af08a484fcdc21", "patch": "@@ -1,3 +1,8 @@\n+2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR c++/31988\n+\t* g++.dg/init/new25.C: New.\n+\n 2007-10-26  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* g++.dg/cpp0x/pr33839.C: New."}, {"sha": "2d447f8f28a43786db036b575c8e5ea2c5771239", "filename": "gcc/testsuite/g++.dg/init/new25.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07021f8c632eb69b3f4082acd8af08a484fcdc21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07021f8c632eb69b3f4082acd8af08a484fcdc21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew25.C?ref=07021f8c632eb69b3f4082acd8af08a484fcdc21", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/31988\n+#include <new>\n+\n+class C\n+{\n+public:\n+  void* operator new(std::size_t = 32) throw (std::bad_alloc); // { dg-error \"first parameter\" }\n+  void* operator new[](std::size_t = 32) throw (std::bad_alloc); // { dg-error \"first parameter\" }\n+  void* operator new(std::size_t = 32, const std::nothrow_t&) throw(); // { dg-error \"first parameter\" }\n+  void* operator new[](std::size_t = 32, const std::nothrow_t&) throw(); // { dg-error \"first parameter\" }\n+};\n+\n+class D\n+{\n+public:\n+  void* operator new(std::size_t,\n+\t\t     const std::nothrow_t& = std::nothrow_t()) throw();\n+  void* operator new[](std::size_t,\n+\t\t       const std::nothrow_t& = std::nothrow_t()) throw();\n+};\n+\n+class E\n+{\n+public:\n+  void* operator new(std::size_t = 0,\n+\t\t     const std::nothrow_t& = std::nothrow_t()) throw(); // { dg-error \"first parameter\" }\n+  void* operator new[](std::size_t = 0,\n+\t\t       const std::nothrow_t& = std::nothrow_t()) throw(); // { dg-error \"first parameter\" }\n+};"}]}