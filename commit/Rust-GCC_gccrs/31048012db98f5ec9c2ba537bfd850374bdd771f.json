{"sha": "31048012db98f5ec9c2ba537bfd850374bdd771f", "node_id": "C_kwDOANBUbNoAKDMxMDQ4MDEyZGI5OGY1ZWM5YzJiYTUzN2JmZDg1MDM3NGJkZDc3MWY", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-18T13:51:56Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-18T13:51:56Z"}, "message": "x86: PR target/103611: Splitter for DST:DI = (HI:SI<<32)|LO:SI.\n\nA common idiom is to create a DImode value from the \"concat\" of two SImode\nvalues, using \"(long long)hi << 32 | (long long)lo\", where the operation\nmay be ior, xor or plus.  On x86, with -m32, the high and low parts of\na DImode register are actually different SImode registers (typically %edx\nand %eax) so ideally this idiom should reduce to two move instructions\n(or optimally, just clever register allocation).\n\nUnfortunately, GCC currently performs the IOR operation above on -m32,\nand worse allocates DImode registers (split to SImode register pairs)\nfor both the zero extended HI and LO values.\n\nHence, for test1 from the new test case below:\n\ntypedef int __v4si __attribute__ ((__vector_size__ (16)));\nlong long test1(__v4si v) {\n  unsigned int loVal = (unsigned int)v[0];\n  unsigned int hiVal = (unsigned int)v[1];\n  return (long long)(loVal) | ((long long)(hiVal) << 32);\n}\n\nwe currently generate (with -m32 -O2 -msse4.1):\n\ntest1:\tsubl    $28, %esp\n        pextrd  $1, %xmm0, %eax\n        pmovzxdq        %xmm0, %xmm1\n        movq    %xmm1, 8(%esp)\n        movl    %eax, %edx\n        movl    8(%esp), %eax\n        orl     12(%esp), %edx\n        addl    $28, %esp\n        orb     $0, %ah\n        ret\n\nwith this patch we now generate:\n\ntest1:\tpextrd  $1, %xmm0, %edx\n        movd    %xmm0, %eax\n        ret\n\nThe fix is to recognize and split the idiom (hi<<32)|zext(lo) prior\nto register allocation on !TARGET_64BIT, simplifying this sequence to\n\"highpart(dst) = hi; lowpart(dst) = lo\".\n\nThe one minor complication is that sse.md's define_insn for\n*vec_extractv4si_0_zext_sse4 can sometimes interfere with this\noptimization.  It turns out that on !TARGET_64BIT, the zero_extend:DI\nfollowing vec_select:SI isn't free, and this insn gets split back\ninto multiple instructions during later passes, but too late to\nbe optimized away by this patch/reload.  Hence the last hunk of\nthis patch is to restrict *vec_extractv4si_0_zext_sse4 to TARGET_64BIT.\nChecking PR target/80286, where *vec_extractv4si_0_zext_sse4 was\nfirst added, this seems reasonable.\n\n2021-12-18  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\tPR target/103611\n\t* config/i386/i386.md (any_or_plus): New code iterator.\n\t(define_split): Split (HI<<32)|zext(LO) into piece-wise\n\tmove instructions on !TARGET_64BIT.\n\t* config/i386/sse.md (*vec_extractv4si_0_zext_sse4):\n\tRestrict to TARGET_64BIT.\n\ngcc/testsuite/ChangeLog\n\tPR target/103611\n\t* gcc.target/i386/pr103611-2.c: New test case.", "tree": {"sha": "22588f0d37f0cf719fab2a1b4b7f3d3776feec50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22588f0d37f0cf719fab2a1b4b7f3d3776feec50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31048012db98f5ec9c2ba537bfd850374bdd771f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31048012db98f5ec9c2ba537bfd850374bdd771f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31048012db98f5ec9c2ba537bfd850374bdd771f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31048012db98f5ec9c2ba537bfd850374bdd771f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e742722f76c70be303248da7ca4842198d4fd1cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e742722f76c70be303248da7ca4842198d4fd1cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e742722f76c70be303248da7ca4842198d4fd1cc"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "d25453fe574cf50ad78f7ad2b664039f0cc7cc6c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31048012db98f5ec9c2ba537bfd850374bdd771f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31048012db98f5ec9c2ba537bfd850374bdd771f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=31048012db98f5ec9c2ba537bfd850374bdd771f", "patch": "@@ -10644,6 +10644,38 @@\n   [(set_attr \"isa\" \"*,nox64\")\n    (set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n+\n+;; Split DST = (HI<<32)|LO early to minimize register usage.\n+(define_code_iterator any_or_plus [plus ior xor])\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(any_or_plus:DI\n+\t  (ashift:DI (match_operand:DI 1 \"register_operand\")\n+\t\t     (const_int 32))\n+\t  (zero_extend:DI (match_operand:SI 2 \"register_operand\"))))]\n+  \"!TARGET_64BIT\"\n+  [(set (match_dup 3) (match_dup 4))\n+   (set (match_dup 5) (match_dup 2))]\n+{\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[4] = gen_lowpart (SImode, operands[1]);\n+  operands[5] = gen_lowpart (SImode, operands[0]);\n+})\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(any_or_plus:DI\n+\t  (zero_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t  (ashift:DI (match_operand:DI 2 \"register_operand\")\n+\t\t     (const_int 32))))]\n+  \"!TARGET_64BIT\"\n+  [(set (match_dup 3) (match_dup 4))\n+   (set (match_dup 5) (match_dup 1))]\n+{\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[4] = gen_lowpart (SImode, operands[2]);\n+  operands[5] = gen_lowpart (SImode, operands[0]);\n+})\n \f\n ;; Negation instructions\n "}, {"sha": "827ffbba8f35fe86c5329d4b280c4fbc271c15a5", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31048012db98f5ec9c2ba537bfd850374bdd771f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31048012db98f5ec9c2ba537bfd850374bdd771f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=31048012db98f5ec9c2ba537bfd850374bdd771f", "patch": "@@ -18747,9 +18747,9 @@\n \t  (vec_select:SI\n \t    (match_operand:V4SI 1 \"register_operand\" \"v,x,v\")\n \t    (parallel [(const_int 0)]))))]\n-  \"TARGET_SSE4_1\"\n+  \"TARGET_64BIT && TARGET_SSE4_1\"\n   \"#\"\n-  [(set_attr \"isa\" \"x64,*,avx512f\")\n+  [(set_attr \"isa\" \"*,*,avx512f\")\n    (set (attr \"preferred_for_speed\")\n      (cond [(eq_attr \"alternative\" \"0\")\n \t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")"}, {"sha": "1555e997ec83f7a05642c38b3fe9d40a1468b6a5", "filename": "gcc/testsuite/gcc.target/i386/pr103611-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31048012db98f5ec9c2ba537bfd850374bdd771f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103611-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31048012db98f5ec9c2ba537bfd850374bdd771f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103611-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103611-2.c?ref=31048012db98f5ec9c2ba537bfd850374bdd771f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-m32 -O2 -msse4\" } */\n+typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+\n+long long test1(__v4si v) {\n+  unsigned int loVal = (unsigned int)v[0];\n+  unsigned int hiVal = (unsigned int)v[1];\n+  return (long long)(loVal) | ((long long)(hiVal) << 32);\n+}\n+\n+long long test2(__v4si v) {\n+  unsigned int loVal = (unsigned int)v[2];\n+  unsigned int hiVal = (unsigned int)v[3];\n+  return (long long)(loVal) | ((long long)(hiVal) << 32);\n+}\n+\n+long long test3(__v4si v) {\n+  unsigned int loVal = (unsigned int)v[0];\n+  unsigned int hiVal = (unsigned int)v[1];\n+  return (long long)(loVal) ^ ((long long)(hiVal) << 32);\n+}\n+\n+long long test4(__v4si v) {\n+  unsigned int loVal = (unsigned int)v[2];\n+  unsigned int hiVal = (unsigned int)v[3];\n+  return (long long)(loVal) ^ ((long long)(hiVal) << 32);\n+}\n+\n+long long test5(__v4si v) {\n+  unsigned int loVal = (unsigned int)v[0];\n+  unsigned int hiVal = (unsigned int)v[1];\n+  return (long long)(loVal) + ((long long)(hiVal) << 32);\n+}\n+\n+long long test6(__v4si v) {\n+  unsigned int loVal = (unsigned int)v[2];\n+  unsigned int hiVal = (unsigned int)v[3];\n+  return (long long)(loVal) + ((long long)(hiVal) << 32);\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\tor\" } } */\n+/* { dg-final { scan-assembler-not \"\\txor\" } } */\n+/* { dg-final { scan-assembler-not \"\\tadd\" } } */"}]}