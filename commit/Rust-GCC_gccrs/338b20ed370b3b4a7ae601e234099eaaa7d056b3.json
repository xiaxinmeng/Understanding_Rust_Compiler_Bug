{"sha": "338b20ed370b3b4a7ae601e234099eaaa7d056b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM4YjIwZWQzNzBiM2I0YTdhZTYwMWUyMzQwOTllYWFhN2QwNTZiMw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-10T19:19:29Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-10T19:19:29Z"}, "message": "Ensure method resolution resolves to an actual method\n\nWe need to check for rustc --explain E0599 so when we have a method call\nthat it must resolve to an actual method impl item.", "tree": {"sha": "d5c23bd1a05db839890655780aae6dfac44dd838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5c23bd1a05db839890655780aae6dfac44dd838"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/338b20ed370b3b4a7ae601e234099eaaa7d056b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338b20ed370b3b4a7ae601e234099eaaa7d056b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338b20ed370b3b4a7ae601e234099eaaa7d056b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338b20ed370b3b4a7ae601e234099eaaa7d056b3/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0c5afe70d33d902cf89f2e0ced5431a50521dcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c5afe70d33d902cf89f2e0ced5431a50521dcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c5afe70d33d902cf89f2e0ced5431a50521dcd"}], "stats": {"total": 142, "additions": 49, "deletions": 93}, "files": [{"sha": "fc67d60c0ed2402ffd2aa817d344ccb84f17824a", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338b20ed370b3b4a7ae601e234099eaaa7d056b3/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338b20ed370b3b4a7ae601e234099eaaa7d056b3/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=338b20ed370b3b4a7ae601e234099eaaa7d056b3", "patch": "@@ -745,6 +745,8 @@ class Method : public InherentImplItem, public TraitImplItem\n \n   Location get_locus () const { return locus; }\n \n+  Location get_impl_locus () const final { return get_locus (); }\n+\n   std::unique_ptr<BlockExpr> &get_function_body () { return function_body; }\n   const std::unique_ptr<BlockExpr> &get_function_body () const\n   {\n@@ -1366,6 +1368,8 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n \n   Location get_locus () const { return locus; }\n \n+  Location get_impl_locus () const final { return get_locus (); }\n+\n   void accept_vis (HIRVisitor &vis) override;\n \n   Analysis::NodeMapping get_impl_mappings () const override\n@@ -2266,6 +2270,8 @@ class ConstantItem : public VisItem,\n \n   Location get_locus () const { return locus; }\n \n+  Location get_impl_locus () const final { return get_locus (); }\n+\n   void accept_vis (HIRVisitor &vis) override;\n \n   Type *get_type () { return type.get (); }"}, {"sha": "f6fa62d81e351de715e6679d299d12ec6fd6ca53", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338b20ed370b3b4a7ae601e234099eaaa7d056b3/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338b20ed370b3b4a7ae601e234099eaaa7d056b3/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=338b20ed370b3b4a7ae601e234099eaaa7d056b3", "patch": "@@ -1295,6 +1295,8 @@ class InherentImplItem\n   virtual void accept_vis (HIRVisitor &vis) = 0;\n \n   virtual Analysis::NodeMapping get_impl_mappings () const = 0;\n+\n+  virtual Location get_impl_locus () const = 0;\n };\n \n // Abstract base class for items used in a trait impl"}, {"sha": "b2391e317f0f4a1adec1d291e14f8020c2f8688d", "filename": "gcc/rust/typecheck/rust-hir-method-resolve.h", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c5afe70d33d902cf89f2e0ced5431a50521dcd/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c5afe70d33d902cf89f2e0ced5431a50521dcd/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h?ref=e0c5afe70d33d902cf89f2e0ced5431a50521dcd", "patch": "@@ -1,67 +0,0 @@\n-// Copyright (C) 2020 Free Software Foundation, Inc.\n-\n-// This file is part of GCC.\n-\n-// GCC is free software; you can redistribute it and/or modify it under\n-// the terms of the GNU General Public License as published by the Free\n-// Software Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-// for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with GCC; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#ifndef RUST_HIR_METHOD_RESOLVE_H\n-#define RUST_HIR_METHOD_RESOLVE_H\n-\n-#include \"rust-hir-type-check-base.h\"\n-#include \"rust-hir-full.h\"\n-#include \"rust-tyty.h\"\n-#include \"rust-hir-path-probe.h\"\n-#include \"rust-substitution-mapper.h\"\n-\n-namespace Rust {\n-namespace Resolver {\n-\n-class MethodResolution : public TypeCheckBase\n-{\n-  using Rust::Resolver::TypeCheckBase::visit;\n-\n-public:\n-  static std::vector<PathProbeCandidate>\n-  Probe (std::vector<PathProbeCandidate> &path_candidates)\n-  {\n-    MethodResolution probe;\n-    for (auto &c : path_candidates)\n-      probe.process_candidate (c);\n-\n-    return probe.candidates;\n-  }\n-\n-  void process_candidate (PathProbeCandidate &candidate)\n-  {\n-    is_method_flag = false;\n-    candidate.impl_item->accept_vis (*this);\n-\n-    if (is_method_flag)\n-      candidates.push_back (candidate);\n-  }\n-\n-  void visit (HIR::Method &method) override { is_method_flag = true; }\n-\n-private:\n-  MethodResolution () : TypeCheckBase () {}\n-\n-  bool is_method_flag;\n-  std::vector<PathProbeCandidate> candidates;\n-};\n-\n-} // namespace Resolver\n-} // namespace Rust\n-\n-#endif // RUST_HIR_METHOD_RESOLVE_H"}, {"sha": "5df6b708c285d7442ecd4599550fd2071f5d987d", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338b20ed370b3b4a7ae601e234099eaaa7d056b3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338b20ed370b3b4a7ae601e234099eaaa7d056b3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=338b20ed370b3b4a7ae601e234099eaaa7d056b3", "patch": "@@ -24,7 +24,6 @@\n #include \"rust-tyty.h\"\n #include \"rust-tyty-call.h\"\n #include \"rust-hir-type-check-struct-field.h\"\n-#include \"rust-hir-method-resolve.h\"\n #include \"rust-hir-path-probe.h\"\n #include \"rust-substitution-mapper.h\"\n #include \"rust-hir-const-fold.h\"\n@@ -221,43 +220,45 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t       \"failed to resolve the PathExprSegment to any Method\");\n \treturn;\n       }\n-\n-    // filter all methods\n-    auto possible_methods = MethodResolution::Probe (candidates);\n-    if (possible_methods.size () == 0)\n-      {\n-\trust_error_at (expr.get_method_name ().get_locus (),\n-\t\t       \"no method named %s found in scope\",\n-\t\t       expr.get_method_name ().as_string ().c_str ());\n-\treturn;\n-      }\n-    else if (possible_methods.size () > 1)\n+    else if (candidates.size () > 1)\n       {\n \tReportMultipleCandidateError::Report (\n-\t  possible_methods, expr.get_method_name ().get_segment (),\n+\t  candidates, expr.get_method_name ().get_segment (),\n \t  expr.get_method_name ().get_locus ());\n \treturn;\n       }\n \n-    auto resolved_candidate = possible_methods.at (0);\n+    auto resolved_candidate = candidates.at (0);\n     HIR::InherentImplItem *resolved_method = resolved_candidate.impl_item;\n     TyTy::BaseType *lookup_tyty = resolved_candidate.ty;\n \n+    if (lookup_tyty->get_kind () != TyTy::TypeKind::FNDEF)\n+      {\n+\tRichLocation r (expr.get_method_name ().get_locus ());\n+\tr.add_range (resolved_method->get_impl_locus ());\n+\trust_error_at (r, \"associated impl item is not a method\");\n+\treturn;\n+      }\n+\n     TyTy::BaseType *lookup = lookup_tyty;\n-    if (lookup_tyty->get_kind () == TyTy::TypeKind::FNDEF)\n+    TyTy::FnType *fn = static_cast<TyTy::FnType *> (lookup);\n+    if (!fn->is_method ())\n       {\n-\tTyTy::FnType *fn = static_cast<TyTy::FnType *> (lookup);\n-\tif (receiver_tyty->get_kind () == TyTy::TypeKind::ADT)\n+\tRichLocation r (expr.get_method_name ().get_locus ());\n+\tr.add_range (resolved_method->get_impl_locus ());\n+\trust_error_at (r, \"associated function is not a method\");\n+\treturn;\n+      }\n+\n+    if (receiver_tyty->get_kind () == TyTy::TypeKind::ADT)\n+      {\n+\tTyTy::ADTType *adt = static_cast<TyTy::ADTType *> (receiver_tyty);\n+\tif (adt->has_substitutions () && fn->needs_substitution ())\n \t  {\n-\t    TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (receiver_tyty);\n-\t    if (adt->has_substitutions () && fn->needs_substitution ())\n-\t      {\n-\t\trust_assert (adt->was_substituted ());\n-\t\tauto used_args_in_prev_segment = GetUsedSubstArgs::From (adt);\n-\t\tlookup\n-\t\t  = SubstMapperInternal::Resolve (fn,\n-\t\t\t\t\t\t  used_args_in_prev_segment);\n-\t      }\n+\t    rust_assert (adt->was_substituted ());\n+\t    auto used_args_in_prev_segment = GetUsedSubstArgs::From (adt);\n+\t    lookup\n+\t      = SubstMapperInternal::Resolve (fn, used_args_in_prev_segment);\n \t  }\n       }\n "}, {"sha": "51bc821335559c175f4284880bbcecb7bee3197f", "filename": "gcc/testsuite/rust.test/xfail_compile/method1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338b20ed370b3b4a7ae601e234099eaaa7d056b3/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fmethod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338b20ed370b3b4a7ae601e234099eaaa7d056b3/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fmethod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fmethod1.rs?ref=338b20ed370b3b4a7ae601e234099eaaa7d056b3", "patch": "@@ -0,0 +1,14 @@\n+// { dg-excess-errors \"Noisy error and debug\" }\n+struct Foo(i32);\n+\n+impl Foo {\n+    fn test() {}\n+}\n+\n+pub fn main() {\n+    let a;\n+    a = Foo(123);\n+\n+    a.test()\n+    // { dg-error \"associated function is not a method\" \"\" { target *-*-* } .-1 }\n+}"}]}