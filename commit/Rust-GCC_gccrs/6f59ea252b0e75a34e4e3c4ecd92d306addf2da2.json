{"sha": "6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY1OWVhMjUyYjBlNzVhMzRlNGUzYzRlY2Q5MmQzMDZhZGRmMmRhMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-06-01T14:16:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-06-01T14:16:19Z"}, "message": "hashtable.h (_Hashtable<>::_Hashtable(_Hashtable&&)): Use std::move on the allocator, use noexcept.\n\n2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/hashtable.h (_Hashtable<>::_Hashtable(_Hashtable&&)):\n\tUse std::move on the allocator, use noexcept.\n\t(_Hashtable<>::~_Hashtable): Use noexcept.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/forward_list.h: Likewise.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/bits/stl_bvector.h: Likewise.\n\t* include/bits/stl_map.h (map<>::map(map&&)): Use noexcept. \n\t* include/bits/stl_set.h: Likewise.\n\t* include/bits/stl_multimap.h: Likewise.\n\t* include/bits/stl_multiset.h: Likewise.\n\t* include/bits/stl_tree.h (_Rb_tree<>::_Rb_tree(_Rb_tree&&)): Use\n\tstd::move on the allocator.\n\t(_Rb_tree<>::~_Rb_tree): Use noexcept.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/basic_string.h (basic_string<>::~basic_string): Use\n\tnoexcept.\n\t* include/ext/vstring.h (__versa_string<>::~__versa_string): Likewise.\n\t* include/debug/set.h: Adjust.\n\t* include/debug/unordered_map: Likewise.\n\t* include/debug/multiset.h: Likewise.\n\t* include/debug/forward_list: Likewise.\n\t* include/debug/vector: Likewise.\n\t* include/debug/unordered_set: Likewise.\n\t* include/debug/deque: Likewise.\n\t* include/debug/map.h: Likewise.\n\t* include/debug/string: Likewise.\n\t* include/debug/list: Likewise.\n\t* include/debug/multimap.h: Likewise.\n\t* include/profile/set.h: Likewise.\n\t* include/profile/unordered_map: Likewise.\n\t* include/profile/multiset.h: Likewise.\n\t* include/profile/forward_list: Likewise.\n\t* include/profile/unordered_set: Likewise.\n\t* include/profile/vector: Likewise.\n\t* include/profile/deque: Likewise.\n\t* include/profile/map.h: Likewise.\n\t* include/profile/list: Likewise.\n\t* include/profile/multimap.h: Likewise.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/\n\tnoexcept_move_construct.cc: New.\n\t* testsuite/21_strings/basic_string/cons/char/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/ext/vstring/cons/noexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/cons/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/multimap/cons/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/set/cons/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/cons/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/forward_list/cons/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/cons/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/vector/bool/cons/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/vector/cons/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/multiset/cons/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/list/cons/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/cons/\n\tnoexcept_move_construct.cc: Likewise.\n\t* testsuite/23_containers/map/cons/noexcept_move_construct.cc\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: Adjust dg-error line numbers.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tassign_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\n\t* include/bits/move.h (swap): Use __and_ in the noexcept.\n\t* include/bits/algorithmfwd.h: Adjust.\n\nFrom-SVN: r174525", "tree": {"sha": "5f19e059c0bf5df233b925249cc902742f90c284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f19e059c0bf5df233b925249cc902742f90c284"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/comments", "author": null, "committer": null, "parents": [{"sha": "11026b51231fe541fa4317b550177c004f724ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11026b51231fe541fa4317b550177c004f724ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11026b51231fe541fa4317b550177c004f724ad7"}], "stats": {"total": 779, "additions": 684, "deletions": 95}, "files": [{"sha": "0aac5ae28ed9cddc28b7921b5c3ec3be477c0e19", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -1,3 +1,108 @@\n+2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/hashtable.h (_Hashtable<>::_Hashtable(_Hashtable&&)):\n+\tUse std::move on the allocator, use noexcept.\n+\t(_Hashtable<>::~_Hashtable): Use noexcept.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/forward_list.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t* include/bits/stl_map.h (map<>::map(map&&)): Use noexcept.\n+\t* include/bits/stl_set.h: Likewise.\n+\t* include/bits/stl_multimap.h: Likewise.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\t* include/bits/stl_tree.h (_Rb_tree<>::_Rb_tree(_Rb_tree&&)): Use\n+\tstd::move on the allocator.\n+\t(_Rb_tree<>::~_Rb_tree): Use noexcept.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/basic_string.h (basic_string<>::~basic_string): Use\n+\tnoexcept.\n+\t* include/ext/vstring.h (__versa_string<>::~__versa_string): Likewise.\n+\t* include/debug/set.h: Adjust.\n+\t* include/debug/unordered_map: Likewise.\n+\t* include/debug/multiset.h: Likewise.\n+\t* include/debug/forward_list: Likewise.\n+\t* include/debug/vector: Likewise.\n+\t* include/debug/unordered_set: Likewise.\n+\t* include/debug/deque: Likewise.\n+\t* include/debug/map.h: Likewise.\n+\t* include/debug/string: Likewise.\n+\t* include/debug/list: Likewise.\n+\t* include/debug/multimap.h: Likewise.\n+\t* include/profile/set.h: Likewise.\n+\t* include/profile/unordered_map: Likewise.\n+\t* include/profile/multiset.h: Likewise.\n+\t* include/profile/forward_list: Likewise.\n+\t* include/profile/unordered_set: Likewise.\n+\t* include/profile/vector: Likewise.\n+\t* include/profile/deque: Likewise.\n+\t* include/profile/map.h: Likewise.\n+\t* include/profile/list: Likewise.\n+\t* include/profile/multimap.h: Likewise.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/\n+\tnoexcept_move_construct.cc: New.\n+\t* testsuite/21_strings/basic_string/cons/char/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/ext/vstring/cons/noexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/cons/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/multimap/cons/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/set/cons/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/cons/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/cons/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/cons/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/vector/bool/cons/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/vector/cons/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/multiset/cons/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/list/cons/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/cons/\n+\tnoexcept_move_construct.cc: Likewise.\n+\t* testsuite/23_containers/map/cons/noexcept_move_construct.cc\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: Adjust dg-error line numbers.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tassign_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n+\t* include/bits/move.h (swap): Use __and_ in the noexcept.\n+\t* include/bits/algorithmfwd.h: Adjust.\n+\n 2011-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/basic_string.h: Use noexcept per the FDIS (minus"}, {"sha": "bb7ca250333de21f189d41d0e7441c7d6d33fbc2", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -551,8 +551,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void \n     swap(_Tp&, _Tp&)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    noexcept(is_nothrow_move_constructible<_Tp>::value\n-\t     && is_nothrow_move_assignable<_Tp>::value)\n+    noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n+\t            is_nothrow_move_assignable<_Tp>>::value)\n #endif\n     ;\n "}, {"sha": "9279a38cf4c0317c1662b23ccadf9dd7b5d6b9e0", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -530,7 +530,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  @brief  Destroy the string instance.\n        */\n-      ~basic_string()\n+      ~basic_string() _GLIBCXX_NOEXCEPT\n       { _M_rep()->_M_dispose(this->get_allocator()); }\n \n       /**"}, {"sha": "df96c88cb99f358ae46c1c115beb6cd5873708c8", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -290,6 +290,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         _Fwd_list_impl(const _Node_alloc_type& __a)\n         : _Node_alloc_type(__a), _M_head()\n         { }\n+\n+        _Fwd_list_impl(_Node_alloc_type&& __a)\n+\t: _Node_alloc_type(std::move(__a)), _M_head()\n+        { }\n       };\n \n       _Fwd_list_impl _M_impl;\n@@ -323,7 +327,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       _Fwd_list_base(_Fwd_list_base&& __lst)\n-      : _M_impl(__lst._M_get_Node_allocator())\n+      : _M_impl(std::move(__lst._M_get_Node_allocator()))\n       {\n \tthis->_M_impl._M_head._M_next = __lst._M_impl._M_head._M_next;\n \t__lst._M_impl._M_head._M_next = 0;\n@@ -523,7 +527,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  forward_list. The contents of @a list are a valid, but unspecified\n        *  %forward_list.\n        */\n-      forward_list(forward_list&& __list)\n+      forward_list(forward_list&& __list) noexcept\n       : _Base(std::move(__list)) { }\n \n       /**\n@@ -542,7 +546,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  The forward_list dtor.\n        */\n-      ~forward_list()\n+      ~forward_list() noexcept\n       { }\n \n       /**"}, {"sha": "d72c78bbdf2cdedd03567b52083e2883cffecb91", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -213,8 +213,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Hashtable(const _Hashtable&);\n \n-      _Hashtable(_Hashtable&&);\n-\n+      _Hashtable(_Hashtable&&)\n+      noexcept(__and_<is_nothrow_copy_constructible<_Equal>,\n+\t              is_nothrow_copy_constructible<_H1>>::value);\n+ \n       _Hashtable&\n       operator=(const _Hashtable& __ht)\n       {\n@@ -233,7 +235,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-      ~_Hashtable();\n+      ~_Hashtable() noexcept;\n \n       void swap(_Hashtable&);\n \n@@ -672,11 +674,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n     _Hashtable(_Hashtable&& __ht)\n+    noexcept(__and_<is_nothrow_copy_constructible<_Equal>,\n+\t            is_nothrow_copy_constructible<_H1>>::value)\n     : __detail::_Rehash_base<_RehashPolicy, _Hashtable>(__ht),\n       __detail::_Hash_code_base<_Key, _Value, _ExtractKey, _Equal,\n \t\t\t\t_H1, _H2, _Hash, __chc>(__ht),\n       __detail::_Map_base<_Key, _Value, _ExtractKey, __uk, _Hashtable>(__ht),\n-      _M_node_allocator(__ht._M_node_allocator),\n+      _M_node_allocator(std::move(__ht._M_node_allocator)),\n       _M_buckets(__ht._M_buckets),\n       _M_bucket_count(__ht._M_bucket_count),\n       _M_begin_bucket_index(__ht._M_begin_bucket_index),\n@@ -697,7 +701,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   bool __chc, bool __cit, bool __uk>\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n-    ~_Hashtable()\n+    ~_Hashtable() noexcept\n     {\n       clear();\n       _M_deallocate_buckets(_M_buckets, _M_bucket_count);"}, {"sha": "ca7686eb1623739767ff701b8bd409900cf1453e", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -136,8 +136,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline void\n     swap(_Tp& __a, _Tp& __b)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    noexcept(is_nothrow_move_constructible<_Tp>::value\n-\t     && is_nothrow_move_assignable<_Tp>::value)\n+    noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n+\t            is_nothrow_move_assignable<_Tp>>::value)\n #endif\n     {\n       // concept requirements"}, {"sha": "edf662987cb7852b75574d8e15dba7b1d7aa03a9", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -392,6 +392,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_Bvector_impl(const _Bit_alloc_type& __a)\n \t: _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)\n \t{ }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t_Bvector_impl(_Bit_alloc_type&& __a)\n+\t: _Bit_alloc_type(std::move(__a)), _M_start(), _M_finish(),\n+\t  _M_end_of_storage(0)\n+\t{ }\n+#endif\n       };\n \n     public:\n@@ -416,8 +423,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_impl(__a) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      _Bvector_base(_Bvector_base&& __x)\n-      : _M_impl(__x._M_get_Bit_allocator())\n+      _Bvector_base(_Bvector_base&& __x) noexcept\n+      : _M_impl(std::move(__x._M_get_Bit_allocator()))\n       {\n \tthis->_M_impl._M_start = __x._M_impl._M_start;\n \tthis->_M_impl._M_finish = __x._M_impl._M_finish;\n@@ -532,7 +539,7 @@ template<typename _Alloc>\n     }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    vector(vector&& __x)\n+    vector(vector&& __x) noexcept\n     : _Base(std::move(__x)) { }\n \n     vector(initializer_list<bool> __l,\n@@ -553,7 +560,7 @@ template<typename _Alloc>\n \t_M_initialize_dispatch(__first, __last, _Integral());\n       }\n \n-    ~vector() { }\n+    ~vector() _GLIBCXX_NOEXCEPT { }\n \n     vector&\n     operator=(const vector& __x)"}, {"sha": "7ddfbc5ac16846376caa0a5ef1533a0638e5efc7", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -465,7 +465,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       _Deque_base(_Deque_base&& __x)\n-      : _M_impl(__x._M_get_Tp_allocator())\n+      : _M_impl(std::move(__x._M_get_Tp_allocator()))\n       {\n \t_M_initialize_map(0);\n \tif (__x._M_impl._M_map)\n@@ -505,6 +505,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t: _Tp_alloc_type(__a), _M_map(0), _M_map_size(0),\n \t  _M_start(), _M_finish()\n \t{ }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t_Deque_impl(_Tp_alloc_type&& __a)\n+\t: _Tp_alloc_type(std::move(__a)), _M_map(0), _M_map_size(0),\n+\t  _M_start(), _M_finish()\n+\t{ }\n+#endif\n       };\n \n       _Tp_alloc_type&\n@@ -894,7 +901,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  themselves are pointers, the pointed-to memory is not touched in any\n        *  way.  Managing the pointer is the user's responsibility.\n        */\n-      ~deque()\n+      ~deque() _GLIBCXX_NOEXCEPT\n       { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }\n \n       /**"}, {"sha": "96995994185a12d54f1d1b37e3f3cbdad05806ae", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -318,6 +318,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_List_impl(const _Node_alloc_type& __a)\n \t: _Node_alloc_type(__a), _M_node()\n \t{ }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t_List_impl(_Node_alloc_type&& __a)\n+\t: _Node_alloc_type(std::move(__a)), _M_node()\n+\t{ }\n+#endif\n       };\n \n       _List_impl _M_impl;\n@@ -359,7 +365,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       _List_base(_List_base&& __x)\n-      : _M_impl(__x._M_get_Node_allocator())\n+      : _M_impl(std::move(__x._M_get_Node_allocator()))\n       {\n \t_M_init();\n \t__detail::_List_node_base::swap(this->_M_impl._M_node, \n@@ -368,7 +374,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n       // This is what actually destroys the list.\n-      ~_List_base()\n+      ~_List_base() _GLIBCXX_NOEXCEPT\n       { _M_clear(); }\n \n       void\n@@ -580,7 +586,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  The newly-created %list contains the exact contents of @a x.\n        *  The contents of @a x are a valid, but unspecified %list.\n        */\n-      list(list&& __x)\n+      list(list&& __x) noexcept\n       : _Base(std::move(__x)) { }\n \n       /**"}, {"sha": "3ca683791d8500ac172b0c643dc2b78f68832b04", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -181,6 +181,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  The contents of @a x are a valid, but unspecified %map.\n        */\n       map(map&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _M_t(std::move(__x._M_t)) { }\n \n       /**"}, {"sha": "58811317228fc7b4f8fe1448d11c189ed684f89b", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -179,6 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  The contents of @a x are a valid, but unspecified %multimap.\n        */\n       multimap(multimap&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _M_t(std::move(__x._M_t)) { }\n \n       /**"}, {"sha": "d5d94ebe7c921b4e2f64219a4e95b747c8f18269", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -192,6 +192,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  The contents of @a x are a valid, but unspecified %multiset.\n        */\n       multiset(multiset&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _M_t(std::move(__x._M_t)) { }\n \n       /**"}, {"sha": "9676d909f693da756bf10b3e0aad532087a4cce8", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -199,6 +199,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  The contents of @a x are a valid, but unspecified %set.\n        */\n       set(set&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _M_t(std::move(__x._M_t)) { }\n \n       /**"}, {"sha": "3b291c5bdb9b34b1dc08b087c874e06081550d05", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -450,6 +450,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _M_node_count(0)\n \t  { _M_initialize(); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)\n+\t  : _Node_allocator(std::move(__a)), _M_key_compare(__comp),\n+\t    _M_header(), _M_node_count(0)\n+\t  { _M_initialize(); }\n+#endif\n+\n \tprivate:\n \t  void\n \t  _M_initialize()\n@@ -635,7 +642,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Rb_tree(_Rb_tree&& __x);\n #endif\n \n-      ~_Rb_tree()\n+      ~_Rb_tree() _GLIBCXX_NOEXCEPT\n       { _M_erase(_M_begin()); }\n \n       _Rb_tree&\n@@ -900,7 +907,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n            typename _Compare, typename _Alloc>\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _Rb_tree(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&& __x)\n-    : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())\n+    : _M_impl(__x._M_impl._M_key_compare,\n+\t      std::move(__x._M_get_Node_allocator()))\n     {\n       if (__x._M_root() != 0)\n \t{"}, {"sha": "5fa5f522e0c9f89bf0db77824f105d14a32293a1", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -86,6 +86,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_Vector_impl(_Tp_alloc_type const& __a)\n \t: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)\n \t{ }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t_Vector_impl(_Tp_alloc_type&& __a)\n+\t: _Tp_alloc_type(std::move(__a)),\n+\t  _M_start(0), _M_finish(0), _M_end_of_storage(0)\n+\t{ }\n+#endif\n       };\n       \n     public:\n@@ -127,7 +134,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       _Vector_base(_Vector_base&& __x)\n-      : _M_impl(__x._M_get_Tp_allocator())\n+      : _M_impl(std::move(__x._M_get_Tp_allocator()))\n       {\n \tthis->_M_impl._M_start = __x._M_impl._M_start;\n \tthis->_M_impl._M_finish = __x._M_impl._M_finish;\n@@ -291,7 +298,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  The newly-created %vector contains the exact contents of @a x.\n        *  The contents of @a x are a valid, but unspecified %vector.\n        */\n-      vector(vector&& __x)\n+      vector(vector&& __x) noexcept\n       : _Base(std::move(__x)) { }\n \n       /**\n@@ -346,7 +353,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  not touched in any way.  Managing the pointer is the user's\n        *  responsibility.\n        */\n-      ~vector()\n+      ~vector() _GLIBCXX_NOEXCEPT\n       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t      _M_get_Tp_allocator()); }\n "}, {"sha": "749fc2e6cab46927ddbe0530c1851de3e97f320b", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -113,7 +113,7 @@ namespace __debug\n       : _Base(__l, __a), _Safe_base() { }\n #endif\n \n-      ~deque() { }\n+      ~deque() _GLIBCXX_NOEXCEPT { }\n \n       deque&\n       operator=(const deque& __x)"}, {"sha": "9f1da5b679f067d2d9b514e8a2f99418628b531d", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -104,7 +104,7 @@ namespace __debug\n       : _Base(__list)\n       { }\n \n-      forward_list(forward_list&& __list)\n+      forward_list(forward_list&& __list) noexcept\n       : _Base(std::move(__list._M_base()))\n       {\n \tthis->_M_swap(__list);\n@@ -115,7 +115,7 @@ namespace __debug\n       : _Base(__il, __al)\n       { }\n \n-      ~forward_list()\n+      ~forward_list() noexcept\n       { }\n \n       forward_list&"}, {"sha": "44a208bfe5201ab04cbf2b7e950899fa6412dc07", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -106,7 +106,7 @@ namespace __debug\n       : _Base(__x), _Safe_base() { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      list(list&& __x)\n+      list(list&& __x) noexcept\n       : _Base(std::move(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n \n@@ -115,7 +115,7 @@ namespace __debug\n         : _Base(__l, __a), _Safe_base() { }\n #endif\n \n-      ~list() { }\n+      ~list() _GLIBCXX_NOEXCEPT { }\n \n       list&\n       operator=(const list& __x)"}, {"sha": "9f80251e3ae94d50651e6666c2be0121e48cf1ad", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -95,6 +95,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       map(map&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n \n@@ -104,7 +105,7 @@ namespace __debug\n       : _Base(__l, __c, __a), _Safe_base() { }\n #endif\n \n-      ~map() { }\n+      ~map() _GLIBCXX_NOEXCEPT { }\n \n       map&\n       operator=(const map& __x)"}, {"sha": "b3c43b8bfa26aad4d921150a6cb21604956b13c7", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -96,6 +96,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       multimap(multimap&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n \n@@ -105,7 +106,7 @@ namespace __debug\n       : _Base(__l, __c, __a), _Safe_base() { }\n #endif\n \n-      ~multimap() { }\n+      ~multimap() _GLIBCXX_NOEXCEPT { }\n \n       multimap&\n       operator=(const multimap& __x)"}, {"sha": "ee4c04735dd81e93a41cd6015b38ac59988db9e9", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -95,6 +95,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       multiset(multiset&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n \n@@ -104,7 +105,7 @@ namespace __debug\n       : _Base(__l, __comp, __a), _Safe_base() { }\n #endif\n \n-      ~multiset() { }\n+      ~multiset() _GLIBCXX_NOEXCEPT { }\n \n       multiset&\n       operator=(const multiset& __x)"}, {"sha": "fd6a607d0139d92f2ec4ea5333a4b6bb3af5aaab", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -1,6 +1,6 @@\n // Debugging set implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -95,6 +95,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       set(set&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n \n@@ -104,7 +105,7 @@ namespace __debug\n       : _Base(__l, __comp, __a), _Safe_base() { }\n #endif\n \n-      ~set() { }\n+      ~set() _GLIBCXX_NOEXCEPT { }\n \n       set&\n       operator=(const set& __x)"}, {"sha": "b6d2b4b34ea54949973a1a4af6da7f4d0abb3e1e", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -124,7 +124,7 @@ namespace __gnu_debug\n     { }\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n-    ~basic_string() { }\n+    ~basic_string() _GLIBCXX_NOEXCEPT { }\n \n     basic_string&\n     operator=(const basic_string& __str)"}, {"sha": "7a4265c7b0d3e272328d83471b365438fefa2bda", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -1,6 +1,6 @@\n // Debugging unordered_map/unordered_multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -98,6 +98,8 @@ namespace __debug\n       : _Base(__x), _Safe_base() { }\n \n       unordered_map(unordered_map&& __x)\n+      noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n+\t              is_nothrow_copy_constructible<_Pred>>::value)\n       : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_map(initializer_list<value_type> __l,\n@@ -107,6 +109,8 @@ namespace __debug\n \t\t    const allocator_type& __a = allocator_type())\n       : _Base(__l, __n, __hf, __eql, __a), _Safe_base() { }\n \n+      ~unordered_map() noexcept { }\n+\n       unordered_map&\n       operator=(const unordered_map& __x)\n       {\n@@ -385,7 +389,9 @@ namespace __debug\n       unordered_multimap(const _Base& __x) \n       : _Base(__x), _Safe_base() { }\n \n-      unordered_multimap(unordered_multimap&& __x) \n+      unordered_multimap(unordered_multimap&& __x)\n+      noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n+\t              is_nothrow_copy_constructible<_Pred>>::value)\n       : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_multimap(initializer_list<value_type> __l,\n@@ -395,6 +401,8 @@ namespace __debug\n \t\t\t const allocator_type& __a = allocator_type())\n       : _Base(__l, __n, __hf, __eql, __a), _Safe_base() { }\n \n+      ~unordered_multimap() noexcept { }\n+\n       unordered_multimap&\n       operator=(const unordered_multimap& __x)\n       {"}, {"sha": "46dff272bb26ec63a73ba4ab856e830a366ca13e", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -97,7 +97,9 @@ namespace __debug\n       unordered_set(const _Base& __x) \n       : _Base(__x), _Safe_base() { }\n \n-      unordered_set(unordered_set&& __x) \n+      unordered_set(unordered_set&& __x)\n+      noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n+\t              is_nothrow_copy_constructible<_Pred>>::value)\n       : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_set(initializer_list<value_type> __l,\n@@ -107,6 +109,8 @@ namespace __debug\n \t\t    const allocator_type& __a = allocator_type())\n       : _Base(__l, __n, __hf, __eql, __a), _Safe_base() { }\n \n+      ~unordered_set() noexcept { }\n+\n       unordered_set&\n       operator=(const unordered_set& __x)\n       {\n@@ -374,7 +378,9 @@ namespace __debug\n       unordered_multiset(const _Base& __x) \n       : _Base(__x), _Safe_base() { }\n \n-      unordered_multiset(unordered_multiset&& __x) \n+      unordered_multiset(unordered_multiset&& __x)\n+      noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n+\t              is_nothrow_copy_constructible<_Pred>>::value)\n       : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_multiset(initializer_list<value_type> __l,\n@@ -384,6 +390,8 @@ namespace __debug\n \t\t\t const allocator_type& __a = allocator_type())\n       : _Base(__l, __n, __hf, __eql, __a), _Safe_base() { }\n \n+      ~unordered_multiset() noexcept { }\n+\n       unordered_multiset&\n       operator=(const unordered_multiset& __x)\n       {"}, {"sha": "6072515dac3d6ecc97617ae5106003c8fc5d319d", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -109,7 +109,7 @@ namespace __debug\n       : _Base(__x), _Safe_base(), _M_guaranteed_capacity(__x.size()) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      vector(vector&& __x)\n+      vector(vector&& __x) noexcept\n       : _Base(std::move(__x)), _Safe_base(),\n \t_M_guaranteed_capacity(this->size())\n       {\n@@ -123,7 +123,7 @@ namespace __debug\n \t_M_guaranteed_capacity(__l.size()) { }\n #endif\n \n-      ~vector() { }\n+      ~vector() _GLIBCXX_NOEXCEPT { }\n \n       vector&\n       operator=(const vector& __x)"}, {"sha": "a84336861a7fe159f16d5387f3c596dd2607e2a4", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -243,7 +243,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  @brief  Destroy the string instance.\n        */\n-      ~__versa_string() { }\t\n+      ~__versa_string() _GLIBCXX_NOEXCEPT { }\t\n \n       /**\n        *  @brief  Assign the value of @a str to this string."}, {"sha": "48a18c984d98ff98f2affdcbc9cc1b71086888dc", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -101,7 +101,7 @@ namespace __profile\n       : _Base(__l, __a) { }\n #endif\n \n-      ~deque() { }\n+      ~deque() _GLIBCXX_NOEXCEPT { }\n \n       deque&\n       operator=(const deque& __x)"}, {"sha": "618b2480caa8ed0c69e2bfa5bcde0e343d10aef6", "filename": "libstdc++-v3/include/profile/forward_list", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -83,15 +83,15 @@ namespace __profile\n       : _Base(__list)\n       { }\n \n-      forward_list(forward_list&& __list)\n+      forward_list(forward_list&& __list) noexcept\n       : _Base(std::move(__list)) { }\n \n       forward_list(std::initializer_list<_Tp> __il,\n                    const _Alloc& __al = _Alloc())\n       : _Base(__il, __al)\n       { }\n \n-      ~forward_list()\n+      ~forward_list() noexcept\n       { }\n \n       forward_list&"}, {"sha": "33b1ae64d87951de818947caf8659b127e82d8f0", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -67,7 +67,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       explicit\n       list(const _Allocator& __a = _Allocator())\n       : _Base(__a) \n-      { \n+      {\n         __profcxx_list_construct(this); \t// list2slist\n         __profcxx_list_construct2(this); \t// list2vector\n       }\n@@ -76,15 +76,15 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       explicit\n       list(size_type __n)\n       : _Base(__n) \n-      { \n+      {\n         __profcxx_list_construct(this); \n         __profcxx_list_construct2(this); \n       }\n \n       list(size_type __n, const _Tp& __value,\n \t   const _Allocator& __a = _Allocator())\n       : _Base(__n, __value, __a) \n-      { \n+      {\n         __profcxx_list_construct(this); \n         __profcxx_list_construct2(this); \n       }\n@@ -93,7 +93,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       list(size_type __n, const _Tp& __value = _Tp(),\n \t   const _Allocator& __a = _Allocator())\n       : _Base(__n, __value, __a) \n-      { \n+      {\n         __profcxx_list_construct(this); \n         __profcxx_list_construct2(this); \n       }\n@@ -103,29 +103,29 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       list(_InputIterator __first, _InputIterator __last,\n \t   const _Allocator& __a = _Allocator())\n       : _Base(__first, __last, __a)\n-      {\t \n+      {\n         __profcxx_list_construct(this); \n         __profcxx_list_construct2(this); \n       }\n \n       list(const list& __x)\n       : _Base(__x) \n-      { \n+      {\n         __profcxx_list_construct(this); \n         __profcxx_list_construct2(this); \n       }\n \n       list(const _Base& __x)\n       : _Base(__x) \n-      { \t\n+      {\n         __profcxx_list_construct(this); \n         __profcxx_list_construct2(this); \n       }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      list(list&& __x)\n+      list(list&& __x) noexcept\n       : _Base(std::move(__x))\n-      { \n+      {\n         __profcxx_list_construct(this); \n         __profcxx_list_construct2(this); \n       }\n@@ -135,7 +135,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n         : _Base(__l, __a) { }\n #endif\n \n-      ~list()\n+      ~list() _GLIBCXX_NOEXCEPT\n       { \n         __profcxx_list_destruct(this); \n         __profcxx_list_destruct2(this); "}, {"sha": "622bc575ad2d12812a9790d4f8fb03c990634f5d", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -92,6 +92,7 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       map(map&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n       { }\n \n@@ -101,7 +102,7 @@ namespace __profile\n       : _Base(__l, __c, __a) { }\n #endif\n \n-      ~map()\n+      ~map() _GLIBCXX_NOEXCEPT\n       { __profcxx_map_to_unordered_map_destruct(this); }\n \n       map&"}, {"sha": "547a221b3300bfb335cdffc38824b2d6c6ce0cf8", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -82,6 +82,7 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       multimap(multimap&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n       { }\n \n@@ -91,7 +92,7 @@ namespace __profile\n       : _Base(__l, __c, __a) { }\n #endif\n \n-      ~multimap() { }\n+      ~multimap() _GLIBCXX_NOEXCEPT { }\n \n       multimap&\n       operator=(const multimap& __x)"}, {"sha": "a5779383a56a943ed41621764c2ce8d8e6f79568", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -82,6 +82,7 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       multiset(multiset&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n       { }\n \n@@ -91,7 +92,7 @@ namespace __profile\n       : _Base(__l, __comp, __a) { }\n #endif\n \n-      ~multiset() { }\n+      ~multiset() _GLIBCXX_NOEXCEPT { }\n \n       multiset&\n       operator=(const multiset& __x)"}, {"sha": "47261e9160f1a9c81ef66dd0e65a4b48000cdcfd", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -82,6 +82,7 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       set(set&& __x)\n+      noexcept(is_nothrow_copy_constructible<_Compare>::value)\n       : _Base(std::move(__x))\n       { }\n \n@@ -91,7 +92,7 @@ namespace __profile\n       : _Base(__l, __comp, __a) { }\n #endif\n \n-      ~set() { }\n+      ~set() _GLIBCXX_NOEXCEPT { }\n \n       set&\n       operator=(const set& __x)"}, {"sha": "5bbb7aea6d85beaa1b7be3cc71d35b5da5784f87", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -104,6 +104,8 @@ namespace __profile\n       }\n \n       unordered_map(unordered_map&& __x)\n+      noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n+\t              is_nothrow_copy_constructible<_Pred>>::value)\n       : _Base(std::move(__x)) \n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n@@ -142,7 +144,7 @@ namespace __profile\n \treturn *this;\n       }\n \n-      ~unordered_map()\n+      ~unordered_map() noexcept\n       {\n         __profcxx_hashtable_destruct(this, _Base::bucket_count(),\n \t\t\t\t     _Base::size());\n@@ -372,6 +374,8 @@ namespace __profile\n       }\n \n       unordered_multimap(unordered_multimap&& __x)\n+      noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n+\t              is_nothrow_copy_constructible<_Pred>>::value)\n       : _Base(std::move(__x))\n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n@@ -409,7 +413,7 @@ namespace __profile\n \treturn *this;\n       }\n \n-      ~unordered_multimap()\n+      ~unordered_multimap() noexcept\n       {\n         __profcxx_hashtable_destruct(this, _Base::bucket_count(), \n \t\t\t\t     _Base::size());"}, {"sha": "51b42db96335784493643f62c1da88803ca8b511", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -103,6 +103,8 @@ namespace __profile\n       }\n \n       unordered_set(unordered_set&& __x)\n+      noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n+\t              is_nothrow_copy_constructible<_Pred>>::value)\n       : _Base(std::move(__x)) \n       { \n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n@@ -141,7 +143,7 @@ namespace __profile\n \treturn *this;\n       }\n \n-      ~unordered_set()\n+      ~unordered_set() noexcept\n       {\n         __profcxx_hashtable_destruct(this, _Base::bucket_count(), \n                                      _Base::size());\n@@ -346,6 +348,8 @@ namespace __profile\n       }\n \n       unordered_multiset(unordered_multiset&& __x)\n+      noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n+\t              is_nothrow_copy_constructible<_Pred>>::value)\n       : _Base(std::move(__x))\n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n@@ -383,7 +387,7 @@ namespace __profile\n \treturn *this;\n       }\n \n-      ~unordered_multiset()\n+      ~unordered_multiset() noexcept\n       {\n         __profcxx_hashtable_destruct(this, _Base::bucket_count(), \n                                      _Base::size());"}, {"sha": "7a33e88be01ec9853a6825ed71ed69c8468d2096", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -79,33 +79,33 @@ namespace __profile\n       explicit\n       vector(const _Allocator& __a = _Allocator())\n       : _Base(__a)\n-      { \n+      {\n         __profcxx_vector_construct(this, this->capacity());\n         __profcxx_vector_construct2(this);\n       }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       explicit\n       vector(size_type __n)\n-      :  _Base(__n)\n-      { \n+      : _Base(__n)\n+      {\n         __profcxx_vector_construct(this, this->capacity());\n         __profcxx_vector_construct2(this);\n       }\n \n       vector(size_type __n, const _Tp& __value,\n \t     const _Allocator& __a = _Allocator())\n       :  _Base(__n, __value, __a)\n-      { \n+      {\n         __profcxx_vector_construct(this, this->capacity());\n         __profcxx_vector_construct2(this);\n       }\n #else\n       explicit\n       vector(size_type __n, const _Tp& __value = _Tp(),\n \t     const _Allocator& __a = _Allocator())\n-      :  _Base(__n, __value, __a)\n-      { \n+      : _Base(__n, __value, __a)\n+      {\n         __profcxx_vector_construct(this, this->capacity());\n         __profcxx_vector_construct2(this);\n       }\n@@ -115,14 +115,14 @@ namespace __profile\n         vector(_InputIterator __first, _InputIterator __last,\n \t       const _Allocator& __a = _Allocator())\n \t: _Base(__first, __last, __a)\n-      { \n-        __profcxx_vector_construct(this, this->capacity());\n-        __profcxx_vector_construct2(this);\n-      }\n+        {\n+\t  __profcxx_vector_construct(this, this->capacity());\n+\t  __profcxx_vector_construct2(this);\n+\t}\n \n       vector(const vector& __x)\n       : _Base(__x) \n-      { \n+      {\n         __profcxx_vector_construct(this, this->capacity());\n         __profcxx_vector_construct2(this);\n       }\n@@ -136,7 +136,7 @@ namespace __profile\n       }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      vector(vector&& __x)\n+      vector(vector&& __x) noexcept\n       : _Base(std::move(__x))\n       {\n         __profcxx_vector_construct(this, this->capacity());\n@@ -148,7 +148,7 @@ namespace __profile\n       : _Base(__l, __a) { }\n #endif\n \n-      ~vector()\n+      ~vector() _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_vector_destruct(this, this->capacity(), this->size());\n         __profcxx_vector_destruct2(this);"}, {"sha": "9d3d871ba36ad7a352c65e5411f6a9032e9d5a63", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+\n+typedef std::string stype;\n+\n+static_assert(std::is_nothrow_move_constructible<stype>::value, \"Error\");"}, {"sha": "07cc8ce521f88170335e7f529307752d73dd978e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+\n+typedef std::wstring wstype;\n+\n+static_assert(std::is_nothrow_move_constructible<wstype>::value, \"Error\");"}, {"sha": "1b0ececc05f641b78baeb90ead07d4bdbf2ba7b2", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1661 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1668 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "ebb9c3be348ba68435c5f37789dacd8a7edb815e", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1594 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1601 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "943bc637b1e204eb7cb75a1e4b9a5d73ad0fcdf3", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1594 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1601 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "396122f5a89bb6afcfaa13100918961dbd45c632", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1745 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1752 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "36559b7821f364709eb5de66cb322d464b89bc04", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+\n+typedef std::forward_list<int> fltype;\n+\n+static_assert(std::is_nothrow_move_constructible<fltype>::value, \"Error\");"}, {"sha": "35ce47edf35472cf2dae12c6ece34d09212df35c", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1206 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1210 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "9c89fe793cf4cea5f035fb000cc9b2a668f338af", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1206 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1210 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010, 2011 Free Software Foundation"}, {"sha": "cb22c379a768a1a48423b488e3b86c5164595f75", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1206 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1210 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010, 2011 Free Software Foundation"}, {"sha": "684b5013a91cb704750a26a20b2b7da26b2c946e", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1206 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1210 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010, 2011 Free Software Foundation"}, {"sha": "f54d4a1d37ffa92d7ff823001806d294876f414b", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+\n+typedef std::list<int> ltype;\n+\n+static_assert(std::is_nothrow_move_constructible<ltype>::value, \"Error\");"}, {"sha": "54473ee4231578c2fd6c3cda6acacf6761fea503", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1491 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1497 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "5f7b07f51dc339bea67857ce5f811451caa7f832", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1447 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1453 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "1bf19de6e1aa80d4a90000964836df07aa2924b0", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1447 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1453 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "05dd2e732cc271b954a5f69eacf1868c76b819e9", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1447 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1453 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "9ff36ef7eba86d731304cce30450fa9c6fb8e768", "filename": "libstdc++-v3/testsuite/23_containers/map/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <map>\n+\n+typedef std::map<int, int> mtype;\n+\n+static_assert(std::is_nothrow_move_constructible<mtype>::value, \"Error\");"}, {"sha": "96546f51b543ad75cda820fa6706c098aa4dfc34", "filename": "libstdc++-v3/testsuite/23_containers/multimap/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <map>\n+\n+typedef std::multimap<int, int> mmtype;\n+\n+static_assert(std::is_nothrow_move_constructible<mmtype>::value, \"Error\");"}, {"sha": "d200367c2613a9c142f05885bdca250a1acf1070", "filename": "libstdc++-v3/testsuite/23_containers/multiset/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <set>\n+\n+typedef std::multiset<int> mstype;\n+\n+static_assert(std::is_nothrow_move_constructible<mstype>::value, \"Error\");"}, {"sha": "ddee8ec6ed0faac0c5a92fccd017ca6096406f60", "filename": "libstdc++-v3/testsuite/23_containers/set/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <set>\n+\n+typedef std::set<int> stype;\n+\n+static_assert(std::is_nothrow_move_constructible<stype>::value, \"Error\");"}, {"sha": "cb2116873eda345853c8d429b66ef9d383a3d076", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+\n+typedef std::unordered_map<int, int> umtype;\n+\n+static_assert(std::is_nothrow_move_constructible<umtype>::value, \"Error\");"}, {"sha": "45ccee09db3766e501feaf006b6cd74be5ac54cf", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+\n+typedef std::unordered_multimap<int, int> ummtype;\n+\n+static_assert(std::is_nothrow_move_constructible<ummtype>::value, \"Error\");"}, {"sha": "4a1ada81becbb5fc0042f434760451dd793ba511", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+\n+typedef std::unordered_multiset<int> umstype;\n+\n+static_assert(std::is_nothrow_move_constructible<umstype>::value, \"Error\");"}, {"sha": "3e3ec73e09f3097ad6812a164ef758ebb09234d1", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+\n+typedef std::unordered_set<int> ustype;\n+\n+static_assert(std::is_nothrow_move_constructible<ustype>::value, \"Error\");"}, {"sha": "3fc70759290a1653b4ddc0769951807674b75fbd", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+\n+typedef std::vector<bool> vbtype;\n+\n+static_assert(std::is_nothrow_move_constructible<vbtype>::value, \"Error\");"}, {"sha": "b73a575a2b4ab6eb015755f1622a8dd63a8d0b3e", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+\n+typedef std::vector<int> vtype;\n+\n+static_assert(std::is_nothrow_move_constructible<vtype>::value, \"Error\");"}, {"sha": "fcead6a4e9b3da1ccf1b215d8109c78e33d328db", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1150 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1157 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "acb195392bde7e4e2abaff61d11dfa5d15972e00", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1080 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1087 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "dd519da8ff39dcc75b06ece246935e5dd854b19b", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1080 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1087 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "5fb204562408c85ed49be0060187de01b69f7859", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1191 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "3e592d7d1a11aecd1ab515e8c83b5fb654247e0a", "filename": "libstdc++-v3/testsuite/ext/vstring/cons/noexcept_move_construct.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f59ea252b0e75a34e4e3c4ecd92d306addf2da2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcons%2Fnoexcept_move_construct.cc?ref=6f59ea252b0e75a34e4e3c4ecd92d306addf2da2", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/vstring.h>\n+\n+typedef __gnu_cxx::__sso_string sstype;\n+\n+static_assert(std::is_nothrow_move_constructible<sstype>::value, \"Error\");"}]}