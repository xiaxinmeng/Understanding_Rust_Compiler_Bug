{"sha": "2928d0f87052e921ddd212f32e20fd2add5f771b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyOGQwZjg3MDUyZTkyMWRkZDIxMmYzMmUyMGZkMmFkZDVmNzcxYg==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2005-07-18T21:14:19Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2005-07-18T21:14:19Z"}, "message": "common.opt (frename-registers): Initialize to 2.\n\n\t* common.opt (frename-registers): Initialize to 2.\n\t(fweb): Ditto.\n\t(fgcse-after-reload): Ditto.\n\t* toplev.c (AUTODETECT_FLAG_VAR_TRACKING): Rename to AUTODETECT_VALUE.\n\t(process_options): Only change flag_web, flag_rename_registers,\n\tand flag_rerun_cse_after_loop if not explicitly set by user.\n\nFrom-SVN: r102141", "tree": {"sha": "53ffd88b402da9bf5d1d731f5df0236a8056cee4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ffd88b402da9bf5d1d731f5df0236a8056cee4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2928d0f87052e921ddd212f32e20fd2add5f771b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2928d0f87052e921ddd212f32e20fd2add5f771b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2928d0f87052e921ddd212f32e20fd2add5f771b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2928d0f87052e921ddd212f32e20fd2add5f771b/comments", "author": null, "committer": null, "parents": [{"sha": "3b8350f542e8df517a1b1b25fa7fcbff5456d134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8350f542e8df517a1b1b25fa7fcbff5456d134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8350f542e8df517a1b1b25fa7fcbff5456d134"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "c24f4b410281a7b71a971d5789ae42838c2adc44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928d0f87052e921ddd212f32e20fd2add5f771b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928d0f87052e921ddd212f32e20fd2add5f771b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2928d0f87052e921ddd212f32e20fd2add5f771b", "patch": "@@ -1,3 +1,12 @@\n+2005-07-18  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* common.opt (frename-registers): Initialize to 2.\n+\t(fweb): Ditto.\n+\t(fgcse-after-reload): Ditto.\n+\t* toplev.c (AUTODETECT_FLAG_VAR_TRACKING): Rename to AUTODETECT_VALUE.\n+\t(process_options): Only change flag_web, flag_rename_registers,\n+\tand flag_rerun_cse_after_loop if not explicitly set by user.\n+\n 2005-07-18  Jan Beulich  <jbeulich@novell.com>\n \n \t* config/i386/i386.c (ix86_expand_branch, ix86_expand_setcc,"}, {"sha": "4af5f506cdc32d4d93182557887619caccca6fcc", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928d0f87052e921ddd212f32e20fd2add5f771b/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928d0f87052e921ddd212f32e20fd2add5f771b/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=2928d0f87052e921ddd212f32e20fd2add5f771b", "patch": "@@ -431,7 +431,7 @@ Perform redundant load after store elimination in global common subexpression\n elimination\n \n fgcse-after-reload\n-Common Report Var(flag_gcse_after_reload)\n+Common Report Var(flag_gcse_after_reload) Init(2)\n Perform global common subexpression elimination after register allocation\n has finished\n \n@@ -674,7 +674,7 @@ Common Report Var(flag_regmove)\n Enables a register move optimization\n \n frename-registers\n-Common Report Var(flag_rename_registers)\n+Common Report Var(flag_rename_registers) Init(2)\n Perform a register renaming optimization pass\n \n freorder-blocks\n@@ -1015,7 +1015,7 @@ Common Report Var(flag_value_profile_transformations)\n Use expression value profiles in optimizations\n \n fweb\n-Common Report Var(flag_web) Init(0)\n+Common Report Var(flag_web) Init(2)\n Construct webs and split unrelated uses of single variable\n \n fwhole-program"}, {"sha": "368e9e60b20cf8adc2ba87a1b7ce91d54a55247a", "filename": "gcc/toplev.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928d0f87052e921ddd212f32e20fd2add5f771b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928d0f87052e921ddd212f32e20fd2add5f771b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2928d0f87052e921ddd212f32e20fd2add5f771b", "patch": "@@ -145,7 +145,7 @@ location_t unknown_location = { NULL, 0 };\n \n /* Used to enable -fvar-tracking, -fweb and -frename-registers according\n    to optimize and default_debug_hooks in process_options ().  */\n-#define AUTODETECT_FLAG_VAR_TRACKING 2\n+#define AUTODETECT_VALUE 2\n \n /* Current position in real source file.  */\n \n@@ -334,9 +334,9 @@ rtx stack_limit_rtx;\n int flag_renumber_insns = 1;\n \n /* Nonzero if we should track variables.  When\n-   flag_var_tracking == AUTODETECT_FLAG_VAR_TRACKING it will be set according\n+   flag_var_tracking == AUTODETECT_VALUE it will be set according\n    to optimize, debug_info_level and debug_hooks in process_options ().  */\n-int flag_var_tracking = AUTODETECT_FLAG_VAR_TRACKING;\n+int flag_var_tracking = AUTODETECT_VALUE;\n \n /* True if the user has tagged the function with the 'section'\n    attribute.  */\n@@ -1531,14 +1531,14 @@ process_options (void)\n     flag_unroll_loops = 1;\n \n   /* The loop unrolling code assumes that cse will be run after loop.\n-     Also enable -fweb and -frename-registers that help scheduling\n-     the unrolled loop.  */\n-  if (flag_unroll_loops || flag_peel_loops)\n-    {\n-      flag_rerun_cse_after_loop = 1;\n-      flag_web = 1;\n-      flag_rename_registers = 1;\n-    }\n+     web and rename-registers also help when run after loop unrolling.  */\n+\n+  if (flag_rerun_cse_after_loop == AUTODETECT_VALUE)\n+    flag_rerun_cse_after_loop = flag_unroll_loops || flag_peel_loops;\n+  if (flag_web == AUTODETECT_VALUE)\n+    flag_web = flag_unroll_loops || flag_peel_loops;\n+  if (flag_rename_registers == AUTODETECT_VALUE)\n+    flag_rename_registers = flag_unroll_loops || flag_peel_loops;\n \n   /* If explicitly asked to run new loop optimizer, switch off the old\n      one.  */\n@@ -1693,11 +1693,11 @@ process_options (void)\n       flag_var_tracking = 0;\n     }\n \n-  if (flag_rename_registers == AUTODETECT_FLAG_VAR_TRACKING)\n+  if (flag_rename_registers == AUTODETECT_VALUE)\n     flag_rename_registers = default_debug_hooks->var_location\n \t    \t\t    != do_nothing_debug_hooks.var_location;\n \n-  if (flag_var_tracking == AUTODETECT_FLAG_VAR_TRACKING)\n+  if (flag_var_tracking == AUTODETECT_VALUE)\n     flag_var_tracking = optimize >= 1;\n \n   /* If auxiliary info generation is desired, open the output file."}]}