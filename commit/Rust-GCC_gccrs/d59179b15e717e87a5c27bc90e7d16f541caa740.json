{"sha": "d59179b15e717e87a5c27bc90e7d16f541caa740", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU5MTc5YjE1ZTcxN2U4N2E1YzI3YmM5MGU3ZDE2ZjU0MWNhYTc0MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:26:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:26:12Z"}, "message": "[multiple changes]\n\n2017-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Fully_Conformant_Expressions): Two entity\n\treferences are fully conformant if they are both expansions\n\tof the discriminant of a protected type, within one of the\n\tprotected operations. One occurrence may be expanded into a\n\tconstant declaration while the other is an input parameter to\n\tthe corresponding generated subprogram.\n\n2017-05-02  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch3.adb (Check_For_Null_Excluding_Components): Created for\n\trecursivly searching composite-types for null-excluding access\n\ttypes and verifying them.\n\t(Analyze_Object_Declaration): Add a\n\tcall to Check_Null_Excluding_Components for static verification\n\tof non-initialized objects.\n\t* checks.adb, checks.ads (Null_Exclusion_Static_Checks): Added\n\ta parameter for a composite-type's component and an extra case\n\tfor printing component information.\n\n2017-05-02  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch10.adb (Analyze_Subunit): Take\n\tconfiguration pragma into account when restoring appropriate\n\tpragma for analysis of subunit.\n\n2017-05-02  Justin Squirek  <squirek@adacore.com>\n\n\t* s-tasren.adb, s-tasini.adb, s-taprop-linux.adb,\n\ts-mudido-affinity.adb,, a-exetim-posix.adb, a-direio.adb,\n\tg-socket.adb, s-taenca.adb, s-fileio.adb: Remove unused use-type\n\tclauses from the runtime.\n\nFrom-SVN: r247465", "tree": {"sha": "4715ec2bb7050196ddf845a257e2307f8cd49c5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4715ec2bb7050196ddf845a257e2307f8cd49c5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d59179b15e717e87a5c27bc90e7d16f541caa740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d59179b15e717e87a5c27bc90e7d16f541caa740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d59179b15e717e87a5c27bc90e7d16f541caa740", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d59179b15e717e87a5c27bc90e7d16f541caa740/comments", "author": null, "committer": null, "parents": [{"sha": "26de50b098414b0322acad162a1797fe06bd261b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26de50b098414b0322acad162a1797fe06bd261b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26de50b098414b0322acad162a1797fe06bd261b"}], "stats": {"total": 278, "additions": 223, "deletions": 55}, "files": [{"sha": "5ef8c6d51dbb7f1f886639db1c6178e6c344a2c9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -1,3 +1,37 @@\n+2017-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Fully_Conformant_Expressions): Two entity\n+\treferences are fully conformant if they are both expansions\n+\tof the discriminant of a protected type, within one of the\n+\tprotected operations. One occurrence may be expanded into a\n+\tconstant declaration while the other is an input parameter to\n+\tthe corresponding generated subprogram.\n+\n+2017-05-02  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch3.adb (Check_For_Null_Excluding_Components): Created for\n+\trecursivly searching composite-types for null-excluding access\n+\ttypes and verifying them.\n+\t(Analyze_Object_Declaration): Add a\n+\tcall to Check_Null_Excluding_Components for static verification\n+\tof non-initialized objects.\n+\t* checks.adb, checks.ads (Null_Exclusion_Static_Checks): Added\n+\ta parameter for a composite-type's component and an extra case\n+\tfor printing component information.\n+\n+2017-05-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch10.adb (Analyze_Subunit): Take\n+\tconfiguration pragma into account when restoring appropriate\n+\tpragma for analysis of subunit.\n+\n+2017-05-02  Justin Squirek  <squirek@adacore.com>\n+\n+\t* s-tasren.adb, s-tasini.adb, s-taprop-linux.adb,\n+\ts-mudido-affinity.adb,, a-exetim-posix.adb, a-direio.adb,\n+\tg-socket.adb, s-taenca.adb, s-fileio.adb: Remove unused use-type\n+\tclauses from the runtime.\n+\n 2017-05-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* freeze.adb (Check_Component_Storage_Order): Do not treat bit-packed"}, {"sha": "f5063145b758fad9a3fe6ba601f95174d909e552", "filename": "gcc/ada/a-direio.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fa-direio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fa-direio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direio.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,12 +39,9 @@ with System;               use System;\n with System.CRTL;\n with System.File_Control_Block;\n with System.File_IO;\n-with System.Direct_IO;\n with System.Storage_Elements;\n with Ada.Unchecked_Conversion;\n \n-use type System.Direct_IO.Count;\n-\n package body Ada.Direct_IO is\n \n    Zeroes : constant System.Storage_Elements.Storage_Array :="}, {"sha": "10000bf23e10ef5170f9f651eb3c675cfc02684a", "filename": "gcc/ada/a-exetim-posix.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fa-exetim-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fa-exetim-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-posix.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 2007-2015, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2007-2017, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -164,7 +164,7 @@ package body Ada.Execution_Time is\n       SC : out Ada.Real_Time.Seconds_Count;\n       TS : out Ada.Real_Time.Time_Span)\n    is\n-      use type Ada.Real_Time.Time;\n+\n    begin\n       Ada.Real_Time.Split (Ada.Real_Time.Time (T), SC, TS);\n    end Split;"}, {"sha": "a5a57c4e0e94fe008f38e45488512eb7e1b04faf", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -4037,7 +4037,10 @@ package body Checks is\n    -- Null_Exclusion_Static_Checks --\n    ----------------------------------\n \n-   procedure Null_Exclusion_Static_Checks (N : Node_Id) is\n+   procedure Null_Exclusion_Static_Checks\n+     (N    : Node_Id;\n+      Comp : Node_Id := Empty)\n+   is\n       Error_Node : Node_Id;\n       Expr       : Node_Id;\n       Has_Null   : constant Boolean := Has_Null_Exclusion (N);\n@@ -4119,11 +4122,27 @@ package body Checks is\n          Set_Expression (N, Make_Null (Sloc (N)));\n          Set_Etype (Expression (N), Etype (Defining_Identifier (N)));\n \n-         Apply_Compile_Time_Constraint_Error\n-           (N      => Expression (N),\n-            Msg    =>\n-              \"(Ada 2005) null-excluding objects must be initialized??\",\n-            Reason => CE_Null_Not_Allowed);\n+         if Present (Comp) then\n+\n+            --  Specialize the error message to indicate that we are dealing\n+            --  with an uninitialized composite object that has a defaulted\n+            --  null-excluding component.\n+\n+            Error_Msg_Name_1 := Chars (Defining_Identifier (Comp));\n+            Error_Msg_Name_2 := Chars (Defining_Identifier (N));\n+\n+            Apply_Compile_Time_Constraint_Error\n+              (N      => Expression (N),\n+               Msg    => \"(Ada 2005) null-excluding component % of object % \" &\n+                           \"must be initialized??\",\n+               Reason => CE_Null_Not_Allowed);\n+         else\n+            Apply_Compile_Time_Constraint_Error\n+              (N      => Expression (N),\n+               Msg    =>\n+                 \"(Ada 2005) null-excluding objects must be initialized??\",\n+               Reason => CE_Null_Not_Allowed);\n+         end if;\n       end if;\n \n       --  Check that a null-excluding component, formal or object is not being"}, {"sha": "3df5c687c5169c0d47a604ec49766e6859b074b7", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -915,8 +915,14 @@ package Checks is\n    --  Chars (Related_Id)_FIRST/_LAST. For suggested use of these parameters\n    --  see the warning in the body of Sem_Ch3.Process_Range_Expr_In_Decl.\n \n-   procedure Null_Exclusion_Static_Checks (N : Node_Id);\n+   procedure Null_Exclusion_Static_Checks\n+     (N    : Node_Id;\n+      Comp : Node_Id := Empty);\n    --  Ada 2005 (AI-231): Check bad usages of the null-exclusion issue\n+   --\n+   --  When a value for Comp is supplied (as in the case of an uninitialized\n+   --  null-excluding component within a composite object), a reported error\n+   --  will indicate the offending component instead of the object itself.\n \n    procedure Remove_Checks (Expr : Node_Id);\n    --  Remove all checks from Expr except those that are only executed"}, {"sha": "688fc82a4e218624f2352ffa5ea52f26ebcce3c9", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2016, AdaCore                     --\n+--                     Copyright (C) 2001-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2633,8 +2633,6 @@ package body GNAT.Sockets is\n    ----------------------\n \n    function To_Service_Entry (E : Servent_Access) return Service_Entry_Type is\n-      use type C.size_t;\n-\n       Aliases_Count : Natural;\n \n    begin"}, {"sha": "bc98a9f87b35b475289dee597552413cea0f6739", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,6 @@ with Ada.Finalization;           use Ada.Finalization;\n with Ada.IO_Exceptions;          use Ada.IO_Exceptions;\n with Ada.Unchecked_Deallocation;\n \n-with Interfaces.C;\n with Interfaces.C_Streams;       use Interfaces.C_Streams;\n \n with System.Case_Util;           use System.Case_Util;\n@@ -48,7 +47,6 @@ package body System.File_IO is\n    package SSL renames System.Soft_Links;\n \n    use type CRTL.size_t;\n-   use type Interfaces.C.int;\n \n    ----------------------\n    -- Global Variables --"}, {"sha": "b0a5fdd1898032abbcd142e12655ec944f8042ea", "filename": "gcc/ada/s-mudido-affinity.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-mudido-affinity.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-mudido-affinity.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mudido-affinity.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -77,8 +77,6 @@ package body System.Multiprocessors.Dispatching_Domains is\n    is\n       Target : constant ST.Task_Id := Convert_Ids (T);\n \n-      use type ST.Dispatching_Domain_Access;\n-\n    begin\n       --  The exception Dispatching_Domain_Error is propagated if T is already\n       --  assigned to a Dispatching_Domain other than\n@@ -127,7 +125,6 @@ package body System.Multiprocessors.Dispatching_Domains is\n \n       use type ST.Dispatching_Domain;\n       use type ST.Dispatching_Domain_Access;\n-      use type ST.Array_Allocated_Tasks;\n       use type ST.Task_Id;\n \n       T : ST.Task_Id;\n@@ -331,8 +328,6 @@ package body System.Multiprocessors.Dispatching_Domains is\n    is\n       Target : constant ST.Task_Id := Convert_Ids (T);\n \n-      use type ST.Dispatching_Domain_Access;\n-\n    begin\n       --  The exception Dispatching_Domain_Error is propagated if CPU is not\n       --  one of the processors of the Dispatching_Domain on which T is"}, {"sha": "9fa1384a14a36c82f8dd1f71e0764e5b3403ebad", "filename": "gcc/ada/s-taenca.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-taenca.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-taenca.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taenca.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2011, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2017, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -533,8 +533,6 @@ package body System.Tasking.Entry_Calls is\n       Self_Id  : constant Task_Id := Entry_Call.Self;\n       Timedout : Boolean := False;\n \n-      use type Ada.Exceptions.Exception_Id;\n-\n    begin\n       --  This procedure waits for the entry call to be served, with a timeout.\n       --  It tries to cancel the call if the timeout expires before the call is"}, {"sha": "745f132c850bd8573610d255381a9cd8472e7b92", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2016, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2017, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1525,8 +1525,6 @@ package body System.Task_Primitives.Operations is\n       --    's'   Interrupt_State pragma set state to System (use \"default\"\n       --           system handler)\n \n-      use type System.Multiprocessors.CPU_Range;\n-\n    begin\n       Environment_Task_Id := Environment_Task;\n "}, {"sha": "21404d0cd526a1a30cc1ff63cd428be089426c90", "filename": "gcc/ada/s-tasini.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2016, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2017, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,8 +38,6 @@ pragma Polling (Off);\n --  routines in this package, and more to the point, if we try to poll it can\n --  cause infinite loops.\n \n-with Ada.Exceptions;\n-\n with System.Task_Primitives;\n with System.Task_Primitives.Operations;\n with System.Soft_Links;\n@@ -234,7 +232,6 @@ package body System.Tasking.Initialization is\n    --  Call only when holding no locks\n \n    procedure Do_Pending_Action (Self_ID : Task_Id) is\n-      use type Ada.Exceptions.Exception_Id;\n \n    begin\n       pragma Assert (Self_ID = Self and then Self_ID.Deferral_Level = 0);"}, {"sha": "b5e85e15087cdd864ed8cc2b66af6810bc5f11ed", "filename": "gcc/ada/s-tasren.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 1992-2014, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2017, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -547,8 +547,6 @@ package body System.Tasking.Rendezvous is\n          Source : Ada.Exceptions.Exception_Occurrence);\n       pragma Import (C, Transfer_Occurrence, \"__gnat_transfer_occurrence\");\n \n-      use type STPE.Protection_Entries_Access;\n-\n    begin\n       --  The deferral level is critical here, since we want to raise an\n       --  exception or allow abort to take place, if there is an exception or"}, {"sha": "07f9f8c730f25ecf279b72ed87054b5dc46ed6fd", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -2288,10 +2288,10 @@ package body Sem_Ch10 is\n          Pop_Scope;\n       end Remove_Scope;\n \n-      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n-      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      Saved_SM  : SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : Node_Id         := SPARK_Mode_Pragma;\n       --  Save the SPARK mode-related data to restore on exit. Removing\n-      --  eclosing scopes and contexts to provide a clean environment for the\n+      --  enclosing scopes and contexts to provide a clean environment for the\n       --  context of the subunit will eliminate any previously set SPARK_Mode.\n \n    --  Start of processing for Analyze_Subunit\n@@ -2351,6 +2351,15 @@ package body Sem_Ch10 is\n \n          Analyze_Subunit_Context;\n \n+         --  Take into account the effect of any SPARK_Mode configuration\n+         --  pragma, which takes precedence over a different value of\n+         --  SPARK_Mode inherited from the context of the stub.\n+\n+         if SPARK_Mode /= None then\n+            Saved_SM  := SPARK_Mode;\n+            Saved_SMP := SPARK_Mode_Pragma;\n+         end if;\n+\n          Re_Install_Parents (Lib_Unit, Par_Unit);\n          Set_Is_Immediately_Visible (Par_Unit);\n \n@@ -2392,7 +2401,8 @@ package body Sem_Ch10 is\n       Generate_Parent_References (Unit (N), Par_Unit);\n \n       --  Reinstall the SPARK_Mode which was in effect prior to any scope and\n-      --  context manipulations.\n+      --  context manipulations, taking into account a possible SPARK_Mode\n+      --  configuration pragma if present.\n \n       Install_SPARK_Mode (Saved_SM, Saved_SMP);\n "}, {"sha": "245601595bb676a4fce97c2cc99135f616edf341", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 123, "deletions": 13, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -3588,6 +3588,13 @@ package body Sem_Ch3 is\n \n       Prev_Entity : Entity_Id := Empty;\n \n+      procedure Check_For_Null_Excluding_Components\n+        (Obj_Typ  : Entity_Id;\n+         Obj_Decl : Node_Id);\n+      --  Recursively verify that each null-excluding component of an object\n+      --  declaration's type has explicit initialization, and generate\n+      --  compile-time warnings for each one that does not.\n+\n       function Count_Tasks (T : Entity_Id) return Uint;\n       --  This function is called when a non-generic library level object of a\n       --  task type is declared. Its function is to count the static number of\n@@ -3607,6 +3614,100 @@ package body Sem_Ch3 is\n \n       --  Any other relevant delayed aspects on object declarations ???\n \n+      -----------------------------------------\n+      -- Check_For_Null_Excluding_Components --\n+      -----------------------------------------\n+\n+      procedure Check_For_Null_Excluding_Components\n+        (Obj_Typ  : Entity_Id;\n+         Obj_Decl : Node_Id)\n+      is\n+\n+         procedure Check_Component\n+           (Comp_Typ  : Entity_Id;\n+            Comp_Decl : Node_Id := Empty);\n+         --  Perform compile-time null-exclusion checks on a given component\n+         --  and all of its subcomponents, if any.\n+\n+         ---------------------\n+         -- Check_Component --\n+         ---------------------\n+\n+         procedure Check_Component\n+           (Comp_Typ  : Entity_Id;\n+            Comp_Decl : Node_Id := Empty)\n+         is\n+            Comp : Entity_Id;\n+            T    : Entity_Id;\n+\n+         begin\n+            --  Return without further checking if the component has explicit\n+            --  initialization or does not come from source.\n+\n+            if Present (Comp_Decl) then\n+               if not Comes_From_Source (Comp_Decl)\n+                 or else Present (Expression (Comp_Decl))\n+               then\n+                  return;\n+               end if;\n+            end if;\n+\n+            if Is_Incomplete_Or_Private_Type (Comp_Typ)\n+              and then Present (Full_View (Comp_Typ))\n+            then\n+               T := Full_View (Comp_Typ);\n+            else\n+               T := Comp_Typ;\n+            end if;\n+\n+            --  Verify a component of a null-excluding access type\n+\n+            if Is_Access_Type (T)\n+              and then Can_Never_Be_Null (T)\n+            then\n+               Null_Exclusion_Static_Checks (Obj_Decl, Comp_Decl);\n+\n+            --  Check array type components\n+\n+            elsif Is_Array_Type (T) then\n+               --  There is no suitable component when the object is of an\n+               --  array type. However, a namable component may appear at some\n+               --  point during the recursive inspection, but not at the top\n+               --  level.\n+\n+               if Comp_Decl = Obj_Decl then\n+                  Check_Component (Component_Type (T));\n+               else\n+                  Check_Component (Component_Type (T), Comp_Decl);\n+               end if;\n+\n+            --  If T allows named components, then iterate through them,\n+            --  recursively verifying all subcomponents.\n+\n+            --  NOTE: Due to the complexities involved with checking components\n+            --  of nontrivial types with discriminants (variant records and\n+            --  the like), no static checking is performed on them. ???\n+\n+            elsif (Is_Concurrent_Type (T)\n+                    or else Is_Incomplete_Or_Private_Type (T)\n+                    or else Is_Record_Type (T))\n+               and then not Has_Discriminants (T)\n+            then\n+               Comp := First_Component (T);\n+               while Present (Comp) loop\n+                  Check_Component (Etype (Comp), Parent (Comp));\n+\n+                  Comp := Next_Component (Comp);\n+               end loop;\n+            end if;\n+         end Check_Component;\n+\n+      --  Start processing for Check_For_Null_Excluding_Components\n+\n+      begin\n+         Check_Component (Obj_Typ, Obj_Decl);\n+      end Check_For_Null_Excluding_Components;\n+\n       -----------------\n       -- Count_Tasks --\n       -----------------\n@@ -3808,25 +3909,34 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-231): Propagate the null-excluding attribute and carry\n       --  out some static checks.\n \n-      if Ada_Version >= Ada_2005 and then Can_Never_Be_Null (T) then\n-\n+      if Ada_Version >= Ada_2005 then\n          --  In case of aggregates we must also take care of the correct\n          --  initialization of nested aggregates bug this is done at the\n          --  point of the analysis of the aggregate (see sem_aggr.adb) ???\n \n-         if Present (Expression (N))\n-           and then Nkind (Expression (N)) = N_Aggregate\n-         then\n-            null;\n+         if Can_Never_Be_Null (T) then\n+\n+            if Present (Expression (N))\n+              and then Nkind (Expression (N)) = N_Aggregate\n+            then\n+               null;\n+\n+            else\n+               declare\n+                  Save_Typ : constant Entity_Id := Etype (Id);\n+               begin\n+                  Set_Etype (Id, T); --  Temp. decoration for static checks\n+                  Null_Exclusion_Static_Checks (N);\n+                  Set_Etype (Id, Save_Typ);\n+               end;\n+            end if;\n+\n+         --  We might be dealing with an object of a composite type containing\n+         --  null-excluding components without an aggregate, so we must verify\n+         --  that such components have default initialization.\n \n          else\n-            declare\n-               Save_Typ : constant Entity_Id := Etype (Id);\n-            begin\n-               Set_Etype (Id, T); --  Temp. decoration for static checks\n-               Null_Exclusion_Static_Checks (N);\n-               Set_Etype (Id, Save_Typ);\n-            end;\n+            Check_For_Null_Excluding_Components (T, N);\n          end if;\n       end if;\n "}, {"sha": "98c893b684baf31f9973a256e350df04a0a69e97", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59179b15e717e87a5c27bc90e7d16f541caa740/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d59179b15e717e87a5c27bc90e7d16f541caa740", "patch": "@@ -8770,6 +8770,16 @@ package body Sem_Ch6 is\n                         and then Ekind (Entity (E1)) = E_Discriminant\n                         and then Ekind (Entity (E2)) = E_In_Parameter)\n \n+             --  The discriminant of a protected type is transformed into\n+             --  a local constant and then into a parameter of a protected\n+             --  operation.\n+\n+             or else (Ekind (Entity (E1)) = E_Constant\n+                 and then Ekind (Entity (E2)) = E_In_Parameter\n+                 and then Present (Discriminal_Link (Entity (E1)))\n+                 and then Discriminal_Link (Entity (E1)) =\n+                          Discriminal_Link (Entity (E2)))\n+\n              --  AI12-050: The loop variables of quantified expressions\n              --  match if they have the same identifier, even though they\n              --  are different entities."}]}