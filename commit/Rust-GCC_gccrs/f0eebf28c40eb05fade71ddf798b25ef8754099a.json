{"sha": "f0eebf28c40eb05fade71ddf798b25ef8754099a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlZWJmMjhjNDBlYjA1ZmFkZTcxZGRmNzk4YjI1ZWY4NzU0MDk5YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-07-27T23:35:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-07-27T23:35:53Z"}, "message": "(fold_range_test, fold): Avoid making SAVE_EXPR if at top level.\n\nFrom-SVN: r14541", "tree": {"sha": "c85d50241f6674d9235fa9dac9ad72629c7ec589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c85d50241f6674d9235fa9dac9ad72629c7ec589"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0eebf28c40eb05fade71ddf798b25ef8754099a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0eebf28c40eb05fade71ddf798b25ef8754099a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0eebf28c40eb05fade71ddf798b25ef8754099a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0eebf28c40eb05fade71ddf798b25ef8754099a/comments", "author": null, "committer": null, "parents": [{"sha": "d0977240cb11d81e95dc263820ae177c27d9c059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0977240cb11d81e95dc263820ae177c27d9c059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0977240cb11d81e95dc263820ae177c27d9c059"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "b146e8b1fac6f93d3e14d105301f4b7c289c433b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0eebf28c40eb05fade71ddf798b25ef8754099a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0eebf28c40eb05fade71ddf798b25ef8754099a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f0eebf28c40eb05fade71ddf798b25ef8754099a", "patch": "@@ -3106,13 +3106,15 @@ fold_range_test (exp)\n \t       || TREE_CODE (exp) == TRUTH_ORIF_EXPR)\n \t   && operand_equal_p (lhs, rhs, 0))\n     {\n-      /* If simple enough, just rewrite.  Otherwise, make a SAVE_EXPR.  */\n+      /* If simple enough, just rewrite.  Otherwise, make a SAVE_EXPR\n+\t unless we are at top level, in which case we can't do this.  */\n       if (simple_operand_p (lhs))\n \treturn build (TREE_CODE (exp) == TRUTH_ANDIF_EXPR\n \t\t      ? TRUTH_AND_EXPR : TRUTH_OR_EXPR,\n \t\t      TREE_TYPE (exp), TREE_OPERAND (exp, 0),\n \t\t      TREE_OPERAND (exp, 1));\n-      else\n+\n+      else if (current_function_decl != 0)\n \t{\n \t  tree common = save_expr (lhs);\n \n@@ -3764,9 +3766,10 @@ fold (expr)\n \treturn build (COMPOUND_EXPR, type, TREE_OPERAND (arg1, 0),\n \t\t      fold (build (code, type,\n \t\t\t\t   arg0, TREE_OPERAND (arg1, 1))));\n-      else if (TREE_CODE (arg1) == COND_EXPR\n-\t       || (TREE_CODE_CLASS (TREE_CODE (arg1)) == '<'\n-\t\t   && TREE_CODE_CLASS (code) != '<'))\n+      else if ((TREE_CODE (arg1) == COND_EXPR\n+\t\t|| (TREE_CODE_CLASS (TREE_CODE (arg1)) == '<'\n+\t\t    && TREE_CODE_CLASS (code) != '<'))\n+\t       && (! TREE_SIDE_EFFECTS (arg0) || current_function_decl != 0))\n \t{\n \t  tree test, true_value, false_value;\n \n@@ -3804,7 +3807,8 @@ fold (expr)\n \t      if (TREE_CONSTANT (lhs) || TREE_CONSTANT (rhs))\n \t\treturn fold (build (COND_EXPR, type, test, lhs, rhs));\n \n-\t      arg0 = save_expr (arg0);\n+\t      if (current_function_decl != 0)\n+\t\targ0 = save_expr (arg0);\n \t    }\n \n \t  test = fold (build (COND_EXPR, type, test,\n@@ -3821,9 +3825,10 @@ fold (expr)\n       else if (TREE_CODE (arg0) == COMPOUND_EXPR)\n \treturn build (COMPOUND_EXPR, type, TREE_OPERAND (arg0, 0),\n \t\t      fold (build (code, type, TREE_OPERAND (arg0, 1), arg1)));\n-      else if (TREE_CODE (arg0) == COND_EXPR\n-\t       || (TREE_CODE_CLASS (TREE_CODE (arg0)) == '<'\n-\t\t   && TREE_CODE_CLASS (code) != '<'))\n+      else if ((TREE_CODE (arg0) == COND_EXPR\n+\t\t|| (TREE_CODE_CLASS (TREE_CODE (arg0)) == '<'\n+\t\t    && TREE_CODE_CLASS (code) != '<'))\n+\t       && (! TREE_SIDE_EFFECTS (arg1) || current_function_decl != 0))\n \t{\n \t  tree test, true_value, false_value;\n \n@@ -3853,7 +3858,8 @@ fold (expr)\n \t\t  || TREE_CONSTANT (arg1))\n \t\treturn fold (build (COND_EXPR, type, test, lhs, rhs));\n \n-\t      arg1 = save_expr (arg1);\n+\t      if (current_function_decl != 0)\n+\t\targ1 = save_expr (arg1);\n \t    }\n \n \t  test = fold (build (COND_EXPR, type, test,\n@@ -4374,7 +4380,7 @@ fold (expr)\n \t  if (real_onep (arg1))\n \t    return non_lvalue (convert (type, arg0));\n \t  /* x*2 is x+x */\n-\t  if (! wins && real_twop (arg1))\n+\t  if (! wins && real_twop (arg1) && current_function_decl != 0)\n \t    {\n \t      tree arg = save_expr (arg0);\n \t      return build (PLUS_EXPR, type, arg, arg);"}]}