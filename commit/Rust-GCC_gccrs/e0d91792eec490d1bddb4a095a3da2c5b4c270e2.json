{"sha": "e0d91792eec490d1bddb4a095a3da2c5b4c270e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkOTE3OTJlZWM0OTBkMWJkZGI0YTA5NWEzZGEyYzViNGMyNzBlMg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2019-10-30T20:29:21Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2019-10-30T20:29:21Z"}, "message": "re PR c++/92024 (crash in check_local_shadow)\n\n2019-10-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * doc/invoke.texi (-Wshadow, -Wshadow=global\n        -Wshadow=local, -Wshadow=compatible-local): Update documentation.\n\ncp:\n2019-10-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR c++/92024\n        * name-lookup.c (check_local_shadow): Shadowing TYPE_DECLs\n        is always a -Wshadow=compatible-local warning, unless\n        -Wshadow is used.\n\ntestsuite:\n2019-10-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR c++/92024\n        * g++.dg/parse/crash70.C: New test.\n        * c-c++-common/Wshadow-1.c: New test.\n\nFrom-SVN: r277643", "tree": {"sha": "adb1ad05b60151a76485bafaf60afe5ee2313e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adb1ad05b60151a76485bafaf60afe5ee2313e06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0d91792eec490d1bddb4a095a3da2c5b4c270e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d91792eec490d1bddb4a095a3da2c5b4c270e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d91792eec490d1bddb4a095a3da2c5b4c270e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b7a9826d737254eb70ab5a600ce5f334a7f922b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b7a9826d737254eb70ab5a600ce5f334a7f922b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b7a9826d737254eb70ab5a600ce5f334a7f922b"}], "stats": {"total": 124, "additions": 92, "deletions": 32}, "files": [{"sha": "d1a83f50d1281322ea050149fa77039cf9440bf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0d91792eec490d1bddb4a095a3da2c5b4c270e2", "patch": "@@ -1,3 +1,8 @@\n+2019-10-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* doc/invoke.texi (-Wshadow, -Wshadow=global\n+\t-Wshadow=local, -Wshadow=compatible-local): Update documentation.\n+\n 2019-10-30  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gimplify.c (gimplify_scan_omp_clauses): Remove FE-generated"}, {"sha": "402d321d0e7488785d41c481b39611e031b9b4b6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e0d91792eec490d1bddb4a095a3da2c5b4c270e2", "patch": "@@ -1,3 +1,10 @@\n+2019-10-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/92024\n+\t* name-lookup.c (check_local_shadow): Shadowing TYPE_DECLs\n+\tis always a -Wshadow=compatible-local warning, unless\n+\t-Wshadow is used.\n+\n 2019-10-30  Jason Merrill  <jason@redhat.com>\n \n \t* cxx-pretty-print.c (get_fold_operator): Use OVL_OP_INFO."}, {"sha": "9ef1ed9c8e36cfecbfed0c76305b092ece3b9bed", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=e0d91792eec490d1bddb4a095a3da2c5b4c270e2", "patch": "@@ -2750,29 +2750,31 @@ check_local_shadow (tree decl)\n \t parameter, more than often they would use the variable\n \t thinking (mistakenly) it's still the parameter. It would be\n \t rare that users would use the variable in the place that\n-\t expects the parameter but thinking it's a new decl.  */\n+\t expects the parameter but thinking it's a new decl.\n+\t If either object is a TYPE_DECL, '-Wshadow=compatible-local'\n+\t warns regardless of whether one of the types involved\n+\t is a subclass of the other, since that is never okay.  */\n \n       enum opt_code warning_code;\n       if (warn_shadow)\n \twarning_code = OPT_Wshadow;\n-      else if (warn_shadow_local)\n-\twarning_code = OPT_Wshadow_local;\n-      else if (warn_shadow_compatible_local\n-\t       && (same_type_p (TREE_TYPE (old), TREE_TYPE (decl))\n-\t\t   || (!dependent_type_p (TREE_TYPE (decl))\n-\t\t       && !dependent_type_p (TREE_TYPE (old))\n-\t\t       /* If the new decl uses auto, we don't yet know\n-\t\t\t  its type (the old type cannot be using auto\n-\t\t\t  at this point, without also being\n-\t\t\t  dependent).  This is an indication we're\n-\t\t\t  (now) doing the shadow checking too\n-\t\t\t  early.  */\n-\t\t       && !type_uses_auto (TREE_TYPE (decl))\n-\t\t       && can_convert (TREE_TYPE (old), TREE_TYPE (decl),\n-\t\t\t\t       tf_none))))\n+      else if (same_type_p (TREE_TYPE (old), TREE_TYPE (decl))\n+\t       || TREE_CODE (decl) == TYPE_DECL\n+\t       || TREE_CODE (old) == TYPE_DECL\n+\t       || (!dependent_type_p (TREE_TYPE (decl))\n+\t\t   && !dependent_type_p (TREE_TYPE (old))\n+\t\t   /* If the new decl uses auto, we don't yet know\n+\t\t      its type (the old type cannot be using auto\n+\t\t      at this point, without also being\n+\t\t      dependent).  This is an indication we're\n+\t\t      (now) doing the shadow checking too\n+\t\t      early.  */\n+\t\t   && !type_uses_auto (TREE_TYPE (decl))\n+\t\t   && can_convert (TREE_TYPE (old), TREE_TYPE (decl),\n+\t\t\t\t   tf_none)))\n \twarning_code = OPT_Wshadow_compatible_local;\n       else\n-\treturn;\n+\twarning_code = OPT_Wshadow_local;\n \n       const char *msg;\n       if (TREE_CODE (old) == PARM_DECL)"}, {"sha": "d1eb317f43cd31156c80ef7dd910024c50f33deb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e0d91792eec490d1bddb4a095a3da2c5b4c270e2", "patch": "@@ -342,7 +342,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-pragmas  -Wno-prio-ctor-dtor  -Wredundant-decls @gol\n -Wrestrict  -Wno-return-local-addr @gol\n -Wreturn-type  -Wsequence-point  -Wshadow  -Wno-shadow-ivar @gol\n--Wshadow=global,  -Wshadow=local,  -Wshadow=compatible-local @gol\n+-Wshadow=global  -Wshadow=local  -Wshadow=compatible-local @gol\n -Wshift-overflow  -Wshift-overflow=@var{n} @gol\n -Wshift-count-negative  -Wshift-count-overflow  -Wshift-negative-value @gol\n -Wsign-compare  -Wsign-conversion  -Wfloat-conversion @gol\n@@ -6309,7 +6309,7 @@ can be used to suppress such a warning.\n @opindex Wno-discarded-array-qualifiers\n @opindex Wdiscarded-array-qualifiers\n Do not warn if type qualifiers on arrays which are pointer targets\n-are being discarded. Typically, the compiler warns if a\n+are being discarded.  Typically, the compiler warns if a\n @code{const int (*)[]} variable is passed to a function that\n takes a @code{int (*)[]} parameter.  This option can be used to\n suppress such a warning.\n@@ -6508,9 +6508,13 @@ allowed in GCC@.  It is not supported by ISO C90.  @xref{Mixed Declarations}.\n @opindex Wno-shadow\n Warn whenever a local variable or type declaration shadows another\n variable, parameter, type, class member (in C++), or instance variable\n-(in Objective-C) or whenever a built-in function is shadowed. Note\n+(in Objective-C) or whenever a built-in function is shadowed.  Note\n that in C++, the compiler warns if a local variable shadows an\n explicit typedef, but not if it shadows a struct/class/enum.\n+If this warning is enabled, it includes also all instances of\n+local shadowing.  This means that @option{-Wno-shadow=local}\n+and @option{-Wno-shadow=compatible-local} are ignored when\n+@option{-Wshadow} is used.\n Same as @option{-Wshadow=global}.\n \n @item -Wno-shadow-ivar @r{(Objective-C only)}\n@@ -6521,20 +6525,19 @@ Objective-C method.\n \n @item -Wshadow=global\n @opindex Wshadow=global\n-The default for @option{-Wshadow}. Warns for any (global) shadowing.\n-This warning is enabled by @option{-Wshadow=global}.\n+Warn for any shadowing.\n+Same as @option{-Wshadow}.\n \n @item -Wshadow=local\n @opindex Wshadow=local\n Warn when a local variable shadows another local variable or parameter.\n-This warning is enabled by @option{-Wshadow=local}.\n \n @item -Wshadow=compatible-local\n @opindex Wshadow=compatible-local\n Warn when a local variable shadows another local variable or parameter\n-whose type is compatible with that of the shadowing variable. In C++,\n+whose type is compatible with that of the shadowing variable.  In C++,\n type compatibility here means the type of the shadowing variable can be\n-converted to that of the shadowed variable. The creation of this flag\n+converted to that of the shadowed variable.  The creation of this flag\n (in addition to @option{-Wshadow=local}) is based on the idea that when\n a local variable shadows another one of incompatible type, it is most\n likely intentional, not a bug or typo, as shown in the following example:\n@@ -6553,16 +6556,15 @@ for (SomeIterator i = SomeObj.begin(); i != SomeObj.end(); ++i)\n @end smallexample\n \n Since the two variable @code{i} in the example above have incompatible types,\n-enabling only @option{-Wshadow=compatible-local} will not emit a warning.\n+enabling only @option{-Wshadow=compatible-local} does not emit a warning.\n Because their types are incompatible, if a programmer accidentally uses one\n-in place of the other, type checking will catch that and emit an error or\n-warning. So not warning (about shadowing) in this case will not lead to\n-undetected bugs. Use of this flag instead of @option{-Wshadow=local} can\n+in place of the other, type checking is expected to catch that and emit an\n+error or warning.  Use of this flag instead of @option{-Wshadow=local} can\n possibly reduce the number of warnings triggered by intentional shadowing.\n-Note that this does also mean that shadowing @code{const char *i} by\n-@code{char *i} will not emit a warning.\n+Note that this also means that shadowing @code{const char *i} by\n+@code{char *i} does not emit a warning.\n \n-This warning is enabled by @option{-Wshadow=compatible-local}.\n+This warning is also enabled by @option{-Wshadow=local}.\n \n @item -Wlarger-than=@var{byte-size}\n @opindex Wlarger-than="}, {"sha": "67de104fb1d43ee86b48846268eb3cb7c58526e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0d91792eec490d1bddb4a095a3da2c5b4c270e2", "patch": "@@ -1,3 +1,9 @@\n+2019-10-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/92024\n+\t* g++.dg/parse/crash70.C: New test.\n+\t* c-c++-common/Wshadow-1.c: New test.\n+\n 2019-10-30  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/92208"}, {"sha": "4d1edf07f00224d99ce94ab3a75719bd8dfdcd0b", "filename": "gcc/testsuite/c-c++-common/Wshadow-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshadow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshadow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshadow-1.c?ref=e0d91792eec490d1bddb4a095a3da2c5b4c270e2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do-compile } */\n+/* { dg-additional-options \"-Wshadow=local -Wno-shadow=compatible-local\" } */\n+int c;\n+void foo(int *c, int *d)   /* { dg-bogus   \"Wshadow\" } */\n+{\n+  int *e = d;\n+  {\n+    int d = 0;             /* { dg-warning \"Wshadow=local\" } */\n+  }\n+  {\n+    int *e = 0;            /* { dg-bogus   \"Wshadow=compatible-local\" } */\n+  }\n+}\n+#pragma GCC diagnostic warning \"-Wshadow\"\n+void bar(int *c, int *d)   /* { dg-warning \"Wshadow\" } */\n+{\n+  int *e = d;\n+  {\n+    int d = 0;             /* { dg-warning \"Wshadow\" } */\n+  }\n+  {\n+    int *e = 0;            /* { dg-warning \"Wshadow\" } */\n+  }\n+}"}, {"sha": "16c0785827bc8a055c9af848c191cf96414c2738", "filename": "gcc/testsuite/g++.dg/parse/crash70.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash70.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d91792eec490d1bddb4a095a3da2c5b4c270e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash70.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash70.C?ref=e0d91792eec490d1bddb4a095a3da2c5b4c270e2", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/92024\n+// { dg-additional-options \"-Wshadow=compatible-local\" }\n+\n+template<typename>\n+struct S {\n+  S () {\n+    struct c;\n+      {\n+\tstruct c {}; // { dg-warning \"Wshadow=compatible-local\" }\n+      }\n+  }\n+};\n+\n+S<int> s;"}]}