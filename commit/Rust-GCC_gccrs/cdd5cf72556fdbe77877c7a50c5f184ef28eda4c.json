{"sha": "cdd5cf72556fdbe77877c7a50c5f184ef28eda4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkNWNmNzI1NTZmZGJlNzc4NzdjN2E1MGM1ZjE4NGVmMjhlZGE0Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-10-24T10:12:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-24T10:12:05Z"}, "message": "locale_facets.tcc (money_get::do_get(..., string_type&): Move an if block...\n\n2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (money_get::do_get(...,\n\tstring_type&): Move an if block, thus minimizing the amount\n\tof code processed anyway when __tmp_units.size() == 0.\n\nFrom-SVN: r72887", "tree": {"sha": "0890b40c9d7b00474170658560d52be95e7ddb06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0890b40c9d7b00474170658560d52be95e7ddb06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdd5cf72556fdbe77877c7a50c5f184ef28eda4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd5cf72556fdbe77877c7a50c5f184ef28eda4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd5cf72556fdbe77877c7a50c5f184ef28eda4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd5cf72556fdbe77877c7a50c5f184ef28eda4c/comments", "author": null, "committer": null, "parents": [{"sha": "904715853c40f9a27b492794a6db817ea89a553a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/904715853c40f9a27b492794a6db817ea89a553a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/904715853c40f9a27b492794a6db817ea89a553a"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "16b221b8db5e0f23be1ff5b65e901f63b4063082", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd5cf72556fdbe77877c7a50c5f184ef28eda4c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd5cf72556fdbe77877c7a50c5f184ef28eda4c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cdd5cf72556fdbe77877c7a50c5f184ef28eda4c", "patch": "@@ -1,3 +1,9 @@\n+2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (money_get::do_get(...,\n+\tstring_type&): Move an if block, thus minimizing the amount\n+\tof code processed anyway when __tmp_units.size() == 0.\n+\n 2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc"}, {"sha": "ca9ad0510d62da0706c10113885eb81e32a0057c", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd5cf72556fdbe77877c7a50c5f184ef28eda4c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd5cf72556fdbe77877c7a50c5f184ef28eda4c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=cdd5cf72556fdbe77877c7a50c5f184ef28eda4c", "patch": "@@ -1270,20 +1270,6 @@ namespace std\n \t\t}\n \t}\n \n-      // Need to get the rest of the sign characters, if they exist.\n-      const char_type __eof = static_cast<char_type>(char_traits<char_type>::eof());\n-      if (__sign.size() > 1)\n-\t{\n-\t  const size_type __len = __sign.size();\n-\t  size_type __i = 1;\n-\t  for (; __c != __eof && __i < __len; ++__i)\n-\t    while (__beg != __end && __c != __sign[__i])\n-\t      __c = *(++__beg);\n-\t  \n-\t  if (__i != __len)\n-\t    __testvalid = false;\n-\t}\n-\n       const char_type __zero = __ctype.widen('0');\n \n       // Strip leading zeros.\n@@ -1322,6 +1308,20 @@ namespace std\n       else\n \t__testvalid = false;\n \n+      // Need to get the rest of the sign characters, if they exist.\n+      const char_type __eof = static_cast<char_type>(char_traits<char_type>::eof());\n+      if (__sign.size() > 1)\n+\t{\n+\t  const size_type __len = __sign.size();\n+\t  size_type __i = 1;\n+\t  for (; __c != __eof && __i < __len; ++__i)\n+\t    while (__beg != __end && __c != __sign[__i])\n+\t      __c = *(++__beg);\n+\t  \n+\t  if (__i != __len)\n+\t    __testvalid = false;\n+\t}\n+\n       // Iff no more characters are available.      \n       if (__c == __eof)\n \t__err |= ios_base::eofbit;"}]}