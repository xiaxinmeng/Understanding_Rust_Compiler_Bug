{"sha": "329ea7ece205200951bf92a642196935dfa2dad1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5ZWE3ZWNlMjA1MjAwOTUxYmY5MmE2NDIxOTY5MzVkZmEyZGFkMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-03T10:09:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-03T10:09:24Z"}, "message": "[multiple changes]\n\n2013-01-03  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_intr.adb: Minor reformatting.\n\n2013-01-03  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.adb: Minor reformatting.\n\n2013-01-03  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c, adaint.h (__gnat_get_module_name): Removed.\n\t(__gnat_is_module_name_supported): Removed.\n\t* s-win32.ads: Add some needed definitions.\n\t* g-trasym.ads: Update comments.\n\n2013-01-03  Robert Dewar  <dewar@adacore.com>\n\n\t* layout.adb (Set_Composite_Alignment): Fix problems of\n\tinteractions with Optimize_Alignment set to Space.\n\n2013-01-03  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_disp.adb: Minor reformatting.\n\nFrom-SVN: r194842", "tree": {"sha": "a2e0ef3632b87fd658f62f0b7ae5acf9f0d287ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2e0ef3632b87fd658f62f0b7ae5acf9f0d287ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/329ea7ece205200951bf92a642196935dfa2dad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329ea7ece205200951bf92a642196935dfa2dad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329ea7ece205200951bf92a642196935dfa2dad1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329ea7ece205200951bf92a642196935dfa2dad1/comments", "author": null, "committer": null, "parents": [{"sha": "86a2db336a819376663e4a44141e569dcef21015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86a2db336a819376663e4a44141e569dcef21015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86a2db336a819376663e4a44141e569dcef21015"}], "stats": {"total": 172, "additions": 103, "deletions": 69}, "files": [{"sha": "5ecac2e8dd1dd0c63b27125cfd90ae1da0f0f9ce", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=329ea7ece205200951bf92a642196935dfa2dad1", "patch": "@@ -1,3 +1,27 @@\n+2013-01-03  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_intr.adb: Minor reformatting.\n+\n+2013-01-03  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.adb: Minor reformatting.\n+\n+2013-01-03  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c, adaint.h (__gnat_get_module_name): Removed.\n+\t(__gnat_is_module_name_supported): Removed.\n+\t* s-win32.ads: Add some needed definitions.\n+\t* g-trasym.ads: Update comments.\n+\n+2013-01-03  Robert Dewar  <dewar@adacore.com>\n+\n+\t* layout.adb (Set_Composite_Alignment): Fix problems of\n+\tinteractions with Optimize_Alignment set to Space.\n+\n+2013-01-03  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_disp.adb: Minor reformatting.\n+\n 2013-01-02  Richard Biener  <rguenther@suse.de>\n \n \tPR bootstrap/55784"}, {"sha": "4b8ce5341effe674babb315ccfde9b4ad681c25d", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=329ea7ece205200951bf92a642196935dfa2dad1", "patch": "@@ -2960,54 +2960,6 @@ __gnat_locate_exec_on_path (char *exec_name)\n #endif\n }\n \n-/* __gnat_get_module_name returns the module name (executable or shared\n-   library) in which the code at addr is. This is used to properly\n-   report the symbolic tracebacks.  If the module cannot be located\n-   it returns the empty string. The returned value must not be freed.\n-\n-   If this routine is fully implemented the value for\n-   __gnat_is_module_name_supported should be set to 1.  */\n-\n-char *__gnat_get_module_name (void *addr ATTRIBUTE_UNUSED)\n-{\n-  extern char **gnat_argv;\n-\n-#ifdef _WIN32\n-  static char lpFilename[MAX_PATH];\n-  HMODULE hModule;\n-\n-  lpFilename[0] = '\\0';\n-\n-  /* Get the module handle in which the code running at the specified\n-     address is contained.  */\n-\n-  if (GetModuleHandleEx\n-      (GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS, addr, &hModule) == FALSE)\n-    return __gnat_locate_exec_on_path (gnat_argv[0]);\n-\n-  /* Get the corresponding module full path name.  We really want the\n-     standard ASCII version of this routine as the name is passed to\n-     the BFD library.  */\n-\n-  if (GetModuleFileNameA (hModule, lpFilename, MAX_PATH) == 0)\n-    return __gnat_locate_exec_on_path (gnat_argv[0]);\n-\n-  return lpFilename;\n-\n-#else\n-  /* On all other platforms we just return the full path name of the\n-     main executable.  */\n-\n-  return __gnat_locate_exec_on_path (gnat_argv[0]);\n-#endif\n-}\n-\n-#ifdef _WIN32\n-int __gnat_is_module_name_supported = 1;\n-#else\n-int __gnat_is_module_name_supported = 0;\n-#endif\n-\n #ifdef VMS\n \n /* These functions are used to translate to and from VMS and Unix syntax"}, {"sha": "7956e27a709f705d0dd6d0e8d709b9af48226c1c", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=329ea7ece205200951bf92a642196935dfa2dad1", "patch": "@@ -186,7 +186,6 @@ extern int    __gnat_portable_wait                 (int *);\n extern char  *__gnat_locate_exec                   (char *, char *);\n extern char  *__gnat_locate_exec_on_path\t   (char *);\n extern char  *__gnat_locate_regular_file           (char *, char *);\n-extern char  *__gnat_get_module_name               (void *);\n extern void   __gnat_maybe_glob_args               (int *, char ***);\n extern void   __gnat_os_exit\t\t\t   (int);\n extern char  *__gnat_get_libraries_from_registry   (void);"}, {"sha": "89cd7826313716037e731ba24fb69938811ee494", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=329ea7ece205200951bf92a642196935dfa2dad1", "patch": "@@ -5910,14 +5910,12 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Is_Record_Type (Id)\n-         or else Is_Incomplete_Or_Private_Type (Id)\n-         or else Has_Discriminants (Id));\n+          or else Is_Incomplete_Or_Private_Type (Id)\n+          or else Has_Discriminants (Id));\n \n       Comp_Id := First_Entity (Id);\n       while Present (Comp_Id) loop\n-         exit when Ekind (Comp_Id) = E_Component\n-                     or else\n-                   Ekind (Comp_Id) = E_Discriminant;\n+         exit when Ekind_In (Comp_Id, E_Component, E_Discriminant);\n          Comp_Id := Next_Entity (Comp_Id);\n       end loop;\n "}, {"sha": "5b8ae1720ae020e987f99ed956531a1d906a372c", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=329ea7ece205200951bf92a642196935dfa2dad1", "patch": "@@ -8107,7 +8107,7 @@ package body Exp_Disp is\n          procedure Handle_Inherited_Private_Subprograms (Typ : Entity_Id);\n          --  Called if Typ is declared in a nested package or a public child\n          --  package to handle inherited primitives that were inherited by Typ\n-         --  in  the visible part, but whose declaration was deferred because\n+         --  in the visible part, but whose declaration was deferred because\n          --  the parent operation was private and not visible at that point.\n \n          procedure Set_Fixed_Prim (Pos : Nat);"}, {"sha": "f86cbe5e24868d262560bedb0bda7eaa7d2f4a0d", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=329ea7ece205200951bf92a642196935dfa2dad1", "patch": "@@ -287,7 +287,8 @@ package body Exp_Intr is\n          Set_Controlling_Argument (Cnstr_Call,\n            New_Occurrence_Of (Defining_Identifier (Iface_Tag), Loc));\n       else\n-         Set_Controlling_Argument (Cnstr_Call, Relocate_Node (Tag_Arg));\n+         Set_Controlling_Argument (Cnstr_Call,\n+           Relocate_Node (Tag_Arg));\n       end if;\n \n       --  Rewrite and analyze the call to the instance as a class-wide"}, {"sha": "62bb632c8158b99fd86c1c623d29b6faa60ed456", "filename": "gcc/ada/g-trasym.ads", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fg-trasym.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fg-trasym.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.ads?ref=329ea7ece205200951bf92a642196935dfa2dad1", "patch": "@@ -67,13 +67,14 @@\n \n --  In order to retrieve symbolic information, functions in this package will\n --  read on disk all the debug information of the executable file (found via\n---  Argument (0), and looked in the PATH if needed), and load them in memory,\n---  causing a significant cpu and memory overhead.\n-\n---  On all platforms except VMS, this package is not intended to be used\n---  within a shared library, symbolic tracebacks are only supported for the\n---  main executable and not for shared libraries. You should consider using\n---  gdb to obtain symbolic traceback in such cases.\n+--  Argument (0), and looked in the PATH if needed) or shared libraries using\n+--  OS facilities, and load them in memory, causing a significant cpu and\n+--  memory overhead.\n+\n+--  Symbolic traceback from shared libraries is only supported for VMS, Windows\n+--  and GNU/Linux. On other targets symbolic tracebacks are only supported for\n+--  the main executable. You should consider using gdb to obtain symbolic\n+--  traceback in such cases.\n \n --  On VMS, there is no restriction on using this facility with shared\n --  libraries. However, the OS should be at least v7.3-1 and OS patch"}, {"sha": "55fe37812cec1d9f38f197e0c44c1c44d0bef32e", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=329ea7ece205200951bf92a642196935dfa2dad1", "patch": "@@ -2873,22 +2873,63 @@ package body Layout is\n       --  Alignment is not known, see if we can set it, taking into account\n       --  the setting of the Optimize_Alignment mode.\n \n-      --  If Optimize_Alignment is set to Space, then packed records always\n-      --  have an alignment of 1. But don't do anything for atomic records\n-      --  since we may need higher alignment for indivisible access.\n+      --  If Optimize_Alignment is set to Space, then we try to give packed\n+      --  records an aligmment of 1, unless there is some reason we can't.\n \n       if Optimize_Alignment_Space (E)\n         and then Is_Record_Type (E)\n         and then Is_Packed (E)\n-        and then not Is_Atomic (E)\n       then\n+         --  No effect for record with atomic components\n+\n+         if Is_Atomic (E) then\n+            Error_Msg_N (\"Optimize_Alignment has no effect for &??\", E);\n+            Error_Msg_N (\"\\pragma ignored for atomic record??\", E);\n+            return;\n+         end if;\n+\n+         --  No effect if independent components\n+\n+         if Has_Independent_Components (E) then\n+            Error_Msg_N (\"Optimize_Alignment has no effect for &??\", E);\n+            Error_Msg_N\n+              (\"\\pragma ignored for record with independent components??\", E);\n+            return;\n+         end if;\n+\n+         --  No effect if any component is atomic or is a by reference type\n+\n+         declare\n+            Ent : Entity_Id;\n+         begin\n+            Ent := First_Component_Or_Discriminant (E);\n+            while Present (Ent) loop\n+               if Is_By_Reference_Type (Etype (Ent))\n+                 or else Is_Atomic (Etype (Ent))\n+                 or else Is_Atomic (Ent)\n+               then\n+                  Error_Msg_N (\"Optimize_Alignment has no effect for &??\", E);\n+                  Error_Msg_N\n+                    (\"\\pragma is ignored if atomic components present??\", E);\n+                  return;\n+               else\n+                  Next_Component_Or_Discriminant (Ent);\n+               end if;\n+            end loop;\n+         end;\n+\n+         --  Optimize_Alignment has no effect on variable length record\n+\n          if not Size_Known_At_Compile_Time (E) then\n             Error_Msg_N (\"Optimize_Alignment has no effect for &??\", E);\n             Error_Msg_N (\"\\pragma is ignored for variable length record??\", E);\n-         else\n-            Align := 1;\n+            return;\n          end if;\n \n+         --  All tests passed, we can set alignment to 1\n+\n+         Align := 1;\n+\n       --  Not a record, or not packed\n \n       else"}, {"sha": "4c92ea5ede7422135a3dda04065a6e4a5039f944", "filename": "gcc/ada/s-win32.ads", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fs-win32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329ea7ece205200951bf92a642196935dfa2dad1/gcc%2Fada%2Fs-win32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-win32.ads?ref=329ea7ece205200951bf92a642196935dfa2dad1", "patch": "@@ -154,6 +154,8 @@ package System.Win32 is\n    FILE_ATTRIBUTE_VALID_FLAGS         : constant := 16#00007fb7#;\n    FILE_ATTRIBUTE_VALID_SET_FLAGS     : constant := 16#000031a7#;\n \n+   GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS : constant := 16#00000004#;\n+\n    type OVERLAPPED is record\n       Internal     : DWORD;\n       InternalHigh : DWORD;\n@@ -318,4 +320,20 @@ package System.Win32 is\n    pragma Import\n      (Stdcall, QueryPerformanceCounter, \"QueryPerformanceCounter\");\n \n+   ------------\n+   -- Module --\n+   ------------\n+\n+   function GetModuleHandleEx\n+     (dwFlags      : DWORD;\n+      lpModuleName : Address;\n+      phModule     : access HANDLE) return BOOL;\n+   pragma Import (Stdcall, GetModuleHandleEx, \"GetModuleHandleExA\");\n+\n+   function GetModuleFileName\n+     (hModule    : HANDLE;\n+      lpFilename : Address;\n+      nSize      : DWORD) return DWORD;\n+   pragma Import (Stdcall, GetModuleFileName, \"GetModuleFileNameA\");\n+\n end System.Win32;"}]}