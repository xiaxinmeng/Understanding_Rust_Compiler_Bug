{"sha": "1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZiNjNlODlkZmVmZjZiNDI3OTI5NjdjNzY0ZGY4OWQwY2ExZDhjNg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-31T09:37:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T09:37:12Z"}, "message": "exp_ch5.adb, [...]: Minor reformatting.\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb, sem_ch3.adb, exp_ch7.adb, exp_util.adb, exp_ch9.adb,\n\tsem_ch7.adb, checks.adb, s-exctra.adb, exp_ch6.adb, exp_disp.adb,\n\texp_dist.adb, sem_ch13.adb, exp_strm.adb, exp_ch3.adb: Minor\n\treformatting.\n\nFrom-SVN: r213325", "tree": {"sha": "1ba101c6fc76662edeaaf29a4db8af79dec2ade7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ba101c6fc76662edeaaf29a4db8af79dec2ade7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/comments", "author": null, "committer": null, "parents": [{"sha": "2fe258bf9315fa25f620860f99462faa8ade3b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe258bf9315fa25f620860f99462faa8ade3b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe258bf9315fa25f620860f99462faa8ade3b68"}], "stats": {"total": 114, "additions": 61, "deletions": 53}, "files": [{"sha": "b6377b38efcdc2b16fba6d723e77de0540d55e36", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -1,3 +1,10 @@\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch5.adb, sem_ch3.adb, exp_ch7.adb, exp_util.adb, exp_ch9.adb,\n+\tsem_ch7.adb, checks.adb, s-exctra.adb, exp_ch6.adb, exp_disp.adb,\n+\texp_dist.adb, sem_ch13.adb, exp_strm.adb, exp_ch3.adb: Minor\n+\treformatting.\n+\n 2014-07-31  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch13.adb: Minor reformatting."}, {"sha": "3fb352e86a2295926136dbc0d84b1295d9b7ff96", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -6055,7 +6055,7 @@ package body Checks is\n \n       --  For an untagged derived type, use the discriminants of the parent\n       --  which have been renamed in the derivation, possibly by a one-to-many\n-      --  discriminant constraint. For non-tagged type, initially get the Etype\n+      --  discriminant constraint. For untagged type, initially get the Etype\n       --  of the prefix\n \n       else"}, {"sha": "ea38e51a1ea8db8d045f8fdae4829f551c57f10d", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -148,8 +148,8 @@ package body Exp_Ch3 is\n    --  The resulting operation is a TSS subprogram.\n \n    procedure Build_Variant_Record_Equality (Typ  : Entity_Id);\n-   --  Create An Equality function for the non-tagged variant record Typ\n-   --  and attach it to the TSS list\n+   --  Create An Equality function for the untagged variant record Typ and\n+   --  attach it to the TSS list\n \n    procedure Check_Stream_Attributes (Typ : Entity_Id);\n    --  Check that if a limited extension has a parent with user-defined stream\n@@ -242,7 +242,7 @@ package body Exp_Ch3 is\n       CL     : Node_Id;\n       Discrs : Elist_Id := New_Elmt_List) return List_Id;\n    --  Building block for variant record equality. Defined to share the code\n-   --  between the tagged and non-tagged case. Given a Component_List node CL,\n+   --  between the tagged and untagged case. Given a Component_List node CL,\n    --  it generates an 'if' followed by a 'case' statement that compares all\n    --  components of local temporaries named X and Y (that are declared as\n    --  formals at some upper level). E provides the Sloc to be used for the\n@@ -256,7 +256,7 @@ package body Exp_Ch3 is\n      (E : Entity_Id;\n       L : List_Id) return Node_Id;\n    --  Building block for variant record equality. Defined to share the code\n-   --  between the tagged and non-tagged case. Given the list of components\n+   --  between the tagged and untagged case. Given the list of components\n    --  (or discriminants) L, it generates a return statement that compares all\n    --  components of local temporaries named X and Y (that are declared as\n    --  formals at some upper level). E provides the Sloc to be used for the\n@@ -1752,12 +1752,10 @@ package body Exp_Ch3 is\n       --  objects on list Decls.\n \n       function Build_Init_Call_Thru (Parameters : List_Id) return List_Id;\n-      --  Given a non-tagged type-derivation that declares discriminants,\n-      --  such as\n+      --  Given a untagged type-derivation that declares discriminants, e.g.\n       --\n-      --  type R (R1, R2 : Integer) is record ... end record;\n-      --\n-      --  type D (D1 : Integer) is new R (1, D1);\n+      --     type R (R1, R2 : Integer) is record ... end record;\n+      --     type D (D1 : Integer) is new R (1, D1);\n       --\n       --  we make the _init_proc of D be\n       --\n@@ -5840,7 +5838,7 @@ package body Exp_Ch3 is\n \n             --  Handle C++ constructor calls. Note that we do not check that\n             --  Typ is a tagged type since the equivalent Ada type of a C++\n-            --  class that has no virtual methods is a non-tagged limited\n+            --  class that has no virtual methods is a untagged limited\n             --  record type.\n \n             elsif Is_CPP_Constructor_Call (Expr) then\n@@ -6802,7 +6800,7 @@ package body Exp_Ch3 is\n          Next_Component (Comp);\n       end loop;\n \n-      --  Handle constructors of non-tagged CPP_Class types\n+      --  Handle constructors of untagged CPP_Class types\n \n       if not Is_Tagged_Type (Def_Id) and then Is_CPP_Class (Def_Id) then\n          Set_CPP_Constructors (Def_Id);\n@@ -7019,7 +7017,7 @@ package body Exp_Ch3 is\n             end if;\n          end if;\n \n-      --  In the non-tagged case, ever since Ada 83 an equality function must\n+      --  In the untagged case, ever since Ada 83 an equality function must\n       --  be  provided for variant records that are not unchecked unions.\n       --  In Ada 2012 the equality function composes, and thus must be built\n       --  explicitly just as for tagged records."}, {"sha": "978a1e97c40ff9dc2be3bb55c45b92f0638b64f4", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -106,7 +106,7 @@ package body Exp_Ch5 is\n    --  using the standard Insert_Actions mechanism.\n \n    procedure Expand_Assign_Record (N : Node_Id);\n-   --  N is an assignment of a non-tagged record value. This routine handles\n+   --  N is an assignment of a untagged record value. This routine handles\n    --  the case where the assignment must be made component by component,\n    --  either because the target is not byte aligned, or there is a change\n    --  of representation, or when we have a tagged type with a representation"}, {"sha": "45327b96a72f77ffe336402c6af4699e02f057bc", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -2016,7 +2016,7 @@ package body Exp_Ch6 is\n       --  entity and Orig_Subp is the entity of the call node N.\n \n       function Inherited_From_Formal (S : Entity_Id) return Entity_Id;\n-      --  Within an instance, a type derived from a non-tagged formal derived\n+      --  Within an instance, a type derived from an untagged formal derived\n       --  type inherits from the original parent, not from the actual. The\n       --  current derivation mechanism has the derived type inherit from the\n       --  actual, which is only correct outside of the instance. If the"}, {"sha": "00fd3e09375317768ace1a9b1d49fa88a78c4ac6", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -5079,7 +5079,7 @@ package body Exp_Ch7 is\n       Utyp := Underlying_Type (Base_Type (Utyp));\n       Set_Assignment_OK (Ref);\n \n-      --  Deal with non-tagged derivation of private views\n+      --  Deal with untagged derivation of private views\n \n       if Is_Untagged_Derivation (Typ) then\n          Utyp := Underlying_Type (Root_Type (Base_Type (Typ)));\n@@ -7284,7 +7284,7 @@ package body Exp_Ch7 is\n       Utyp := Underlying_Type (Base_Type (Utyp));\n       Set_Assignment_OK (Ref);\n \n-      --  Deal with non-tagged derivation of private views. If the parent type\n+      --  Deal with untagged derivation of private views. If the parent type\n       --  is a protected type, Deep_Finalize is found on the corresponding\n       --  record of the ancestor.\n \n@@ -7751,7 +7751,7 @@ package body Exp_Ch7 is\n \n       Utyp := Underlying_Type (Base_Type (Utyp));\n \n-      --  Deal with non-tagged derivation of private views\n+      --  Deal with untagged derivation of private views\n \n       if Is_Untagged_Derivation (Typ) and then not Is_Conc then\n          Utyp := Underlying_Type (Root_Type (Base_Type (Typ)));\n@@ -7878,7 +7878,7 @@ package body Exp_Ch7 is\n \n       Utyp := Underlying_Type (Base_Type (Utyp));\n \n-      --  Deal with non-tagged derivation of private views. If the parent is\n+      --  Deal with untagged derivation of private views. If the parent is\n       --  now known to be protected, the finalization routine is the one\n       --  defined on the corresponding record of the ancestor (corresponding\n       --  records do not automatically inherit operations, but maybe they"}, {"sha": "b3a4542097085126f0a6411f638d8fee01c404ec", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -2511,8 +2511,7 @@ package body Exp_Ch9 is\n    --  Start of processing for Build_Wrapper_Spec\n \n    begin\n-      --  There is no point in building wrappers for non-tagged concurrent\n-      --  types.\n+      --  No point in building wrappers for untagged concurrent types\n \n       pragma Assert (Is_Tagged_Type (Obj_Typ));\n "}, {"sha": "59c42b007f9e593242202264eef022d9597ffc6c", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -3672,18 +3672,17 @@ package body Exp_Disp is\n         (Subp        : Entity_Id;\n          Tagged_Type : Entity_Id;\n          Typ         : Entity_Id);\n-      --  Verify that all non-tagged types in the profile of a subprogram\n-      --  are frozen at the point the subprogram is frozen. This enforces\n-      --  the rule on RM 13.14 (14) as modified by AI05-019. At the point a\n-      --  subprogram is frozen, enough must be known about it to build the\n-      --  activation record for it, which requires at least that the size of\n-      --  all parameters be known. Controlling arguments are by-reference,\n-      --  and therefore the rule only applies to non-tagged types.\n-      --  Typical violation of the rule involves an object declaration that\n-      --  freezes a tagged type, when one of its primitive operations has a\n-      --  type in its profile whose full view has not been analyzed yet.\n-      --  More complex cases involve composite types that have one private\n-      --  unfrozen subcomponent.\n+      --  Verify that all untagged types in the profile of a subprogram are\n+      --  frozen at the point the subprogram is frozen. This enforces the rule\n+      --  on RM 13.14 (14) as modified by AI05-019. At the point a subprogram\n+      --  is frozen, enough must be known about it to build the activation\n+      --  record for it, which requires at least that the size of all\n+      --  parameters be known. Controlling arguments are by-reference,\n+      --  and therefore the rule only applies to non-tagged types. Typical\n+      --  violation of the rule involves an object declaration that freezes a\n+      --  tagged type, when one of its primitive operations has a type in its\n+      --  profile whose full view has not been analyzed yet. More complex cases\n+      --  involve composite types that have one private unfrozen subcomponent.\n \n       procedure Export_DT (Typ : Entity_Id; DT : Entity_Id; Index : Nat := 0);\n       --  Export the dispatch table DT of tagged type Typ. Required to generate\n@@ -8438,10 +8437,10 @@ package body Exp_Disp is\n               Make_Defining_Identifier (Loc,\n                 Chars => Make_Init_Proc_Name (Typ));\n \n-            --  Case 1: Constructor of non-tagged type\n+            --  Case 1: Constructor of untagged type\n \n             --  If the C++ class has no virtual methods then the matching Ada\n-            --  type is a non-tagged record type. In such case there is no need\n+            --  type is an untagged record type. In such case there is no need\n             --  to generate a wrapper of the C++ constructor because the _tag\n             --  component is not available.\n "}, {"sha": "e2f1a8399919de5411cffdb74b2d687375f57b70", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -9465,7 +9465,7 @@ package body Exp_Dist is\n \n             elsif Is_Derived_Type (Typ) and then not Is_Tagged_Type (Typ) then\n \n-               --  Non-tagged derived type: convert to root type\n+               --  Untagged derived type: convert to root type\n \n                declare\n                   Rt_Type : constant Entity_Id := Root_Type (Typ);\n@@ -9480,7 +9480,7 @@ package body Exp_Dist is\n \n             elsif Is_Record_Type (Typ) and then not Is_Tagged_Type (Typ) then\n \n-               --  Non-tagged record type\n+               --  Untagged record type\n \n                if Nkind (Declaration_Node (Typ)) = N_Subtype_Declaration then\n                   declare"}, {"sha": "2c0f97b89b94ec612ecce0e91cdcd54cfd0e9ffe", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -131,9 +131,9 @@ package body Exp_Strm is\n    --      return V;\n    --    end typSI[_nnn]\n \n-   --  Note: the suffix [_nnn] is present for non-tagged types, where we\n-   --  generate a local subprogram at the point of the occurrence of the\n-   --  attribute reference, so the name must be unique.\n+   --  Note: the suffix [_nnn] is present for untagged types, where we generate\n+   --  a local subprogram at the point of the occurrence of the attribute\n+   --  reference, so the name must be unique.\n \n    procedure Build_Array_Input_Function\n      (Loc  : Source_Ptr;"}, {"sha": "c50a6cd2f4c6725890bb8dcf329fb7430925e026", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -461,7 +461,7 @@ package body Exp_Util is\n \n          Utyp := Underlying_Type (Base_Type (Utyp));\n \n-         --  Deal with non-tagged derivation of private views. If the parent is\n+         --  Deal with untagged derivation of private views. If the parent is\n          --  now known to be protected, the finalization routine is the one\n          --  defined on the corresponding record of the ancestor (corresponding\n          --  records do not automatically inherit operations, but maybe they"}, {"sha": "509f61be9934e525163aaabf8c97a4c0528bc113", "filename": "gcc/ada/s-exctra.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fs-exctra.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fs-exctra.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exctra.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -29,6 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.Unchecked_Conversion;\n+\n with System.Standard_Library; use System.Standard_Library;\n with System.Soft_Links;       use System.Soft_Links;\n \n@@ -67,16 +69,19 @@ package body System.Exception_Traces is\n      (Traceback : System.Address;\n       Len       : Natural) return String\n    is\n-      Decorator_Traceback : Traceback_Entries.Tracebacks_Array (1 .. Len);\n-      for Decorator_Traceback'Address use Traceback;\n+      --  Note: do not use an address clause, which is not supported under .NET\n+\n+      subtype Trace_Array is Traceback_Entries.Tracebacks_Array (1 .. Len);\n+      type Trace_Array_Access is access all Trace_Array;\n \n-      --  Handle the \"transition\" from the array stored in the exception\n-      --  occurrence to the array expected by the decorator.\n+      function To_Trace_Array is new\n+        Ada.Unchecked_Conversion (Address, Trace_Array_Access);\n \n-      pragma Import (Ada, Decorator_Traceback);\n+      Decorator_Traceback : constant Trace_Array_Access :=\n+                              To_Trace_Array (Traceback);\n \n    begin\n-      return Current_Decorator.all (Decorator_Traceback);\n+      return Current_Decorator.all (Decorator_Traceback.all);\n    end Decorator_Wrapper;\n \n    -------------------------"}, {"sha": "2ae6ef90a0aa7c8b0c95a5336596971a3186f596", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -169,10 +169,10 @@ package body Sem_Ch13 is\n       Nam  : TSS_Name_Type);\n    --  Create a subprogram renaming of a given stream attribute to the\n    --  designated subprogram and then in the tagged case, provide this as a\n-   --  primitive operation, or in the non-tagged case make an appropriate TSS\n+   --  primitive operation, or in the untagged case make an appropriate TSS\n    --  entry. This is more properly an expansion activity than just semantics,\n-   --  but the presence of user-defined stream functions for limited types is a\n-   --  legality check, which is why this takes place here rather than in\n+   --  but the presence of user-defined stream functions for limited types\n+   --  is a legality check, which is why this takes place here rather than in\n    --  exp_ch13, where it was previously. Nam indicates the name of the TSS\n    --  function to be generated.\n    --\n@@ -11206,7 +11206,7 @@ package body Sem_Ch13 is\n \n          return True;\n \n-      --  Check for case of non-tagged derived type whose parent either has\n+      --  Check for case of untagged derived type whose parent either has\n       --  primitive operations, or is a by reference type (RM 13.1(10)). In\n       --  this case we do not output a Too_Late message, since there is no\n       --  earlier point where the rep item could be placed to make it legal."}, {"sha": "6d5827e9a21ab15f23446fa2a55baf49fde471c0", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -20398,7 +20398,7 @@ package body Sem_Ch3 is\n         or else Null_Present (Component_List (Def))\n       then\n          if not Is_Tagged_Type (T) then\n-            Check_SPARK_Restriction (\"non-tagged record cannot be null\", Def);\n+            Check_SPARK_Restriction (\"untagged record cannot be null\", Def);\n          end if;\n \n       else"}, {"sha": "f143560d26575592dbbd5b18cbb5fa9e3951e9e4", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb63e89dfeff6b42792967c764df89d0ca1d8c6/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "patch": "@@ -1890,7 +1890,7 @@ package body Sem_Ch7 is\n                end if;\n \n             else\n-               --  Non-tagged type, scan forward to locate inherited hidden\n+               --  For untagged type, scan forward to locate inherited hidden\n                --  operations.\n \n                Prim_Op := Next_Entity (E);"}]}