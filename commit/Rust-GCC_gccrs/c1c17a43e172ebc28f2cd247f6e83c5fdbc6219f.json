{"sha": "c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f", "node_id": "C_kwDOANBUbNoAKGMxYzE3YTQzZTE3MmViYzI4ZjJjZDI0N2Y2ZTgzYzVmZGJjNjIxOWY", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-01-07T21:34:59Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-01-09T13:34:15Z"}, "message": "Fortran: Ignore KIND argument of a few more intrinsics. [PR103789]\n\nAfter PR97896 for which some code was added to ignore the KIND argument\nof the INDEX intrinsics, and PR87711 for which that was extended to LEN_TRIM\nas well, this propagates it further to MASKL, MASKR, SCAN and VERIFY.\n\n\tPR fortran/103789\n\ngcc/fortran/ChangeLog:\n\n\t* trans-array.c (arg_evaluated_for_scalarization): Add MASKL, MASKR,\n\tSCAN and VERIFY to the list of intrinsics whose KIND argument is to be\n\tignored.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/maskl_1.f90: New test.\n\t* gfortran.dg/maskr_1.f90: New test.\n\t* gfortran.dg/scan_3.f90: New test.\n\t* gfortran.dg/verify_3.f90: New test.", "tree": {"sha": "62bb3619dad1c74d2ccd6591209052e1139b509a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62bb3619dad1c74d2ccd6591209052e1139b509a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f/comments", "author": null, "committer": null, "parents": [{"sha": "57fe1f6ad36dec80c02a9fb976ddcf038679cbf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57fe1f6ad36dec80c02a9fb976ddcf038679cbf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57fe1f6ad36dec80c02a9fb976ddcf038679cbf0"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "a77f3318846e96fcbcfc23b60ac59a5ea6958c5f", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f", "patch": "@@ -11500,6 +11500,10 @@ arg_evaluated_for_scalarization (gfc_intrinsic_sym *function,\n \t{\n \t  case GFC_ISYM_INDEX:\n \t  case GFC_ISYM_LEN_TRIM:\n+\t  case GFC_ISYM_MASKL:\n+\t  case GFC_ISYM_MASKR:\n+\t  case GFC_ISYM_SCAN:\n+\t  case GFC_ISYM_VERIFY:\n \t    if (strcmp (\"kind\", gfc_dummy_arg_get_name (*dummy_arg)) == 0)\n \t      return false;\n \t  /* Fallthrough.  */"}, {"sha": "9e25c2c9cdca233162b54c1547311c7df2353802", "filename": "gcc/testsuite/gfortran.dg/maskl_1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskl_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskl_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskl_1.f90?ref=c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+!\n+! PR fortran/103789\n+! Check the absence of ICE when generating calls to MASKL with a KIND argument.\n+\n+program p\n+   integer :: z(2), y(2)\n+   y = [1, 13]\n+   z = maskl(y, kind=4) + 1\n+end program p"}, {"sha": "ebfd3dbba330192c670ed0df7c7d410331d07069", "filename": "gcc/testsuite/gfortran.dg/maskr_1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskr_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskr_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaskr_1.f90?ref=c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+!\n+! PR fortran/103789\n+! Check the absence of ICE when generating calls to MASKR with a KIND argument.\n+\n+program p\n+   integer :: z(2), y(2)\n+   y = [1, 13]\n+   z = maskr(y, kind=4) + 1\n+end program p"}, {"sha": "80262ae2167e189a8fc559f6cf97b3c353dc2760", "filename": "gcc/testsuite/gfortran.dg/scan_3.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f/gcc%2Ftestsuite%2Fgfortran.dg%2Fscan_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f/gcc%2Ftestsuite%2Fgfortran.dg%2Fscan_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fscan_3.f90?ref=c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+!\n+! PR fortran/103789\n+! Check the absence of ICE when generating calls to SCAN with a KIND argument.\n+\n+program p\n+   character(len=10) :: y(2)\n+   integer :: z(2)\n+   y = ['abc', 'def']\n+   z = scan(y, 'e', kind=4) + 1\n+end program p"}, {"sha": "f01e24e199e7df5322f6dbe33ca9b17a958bfdff", "filename": "gcc/testsuite/gfortran.dg/verify_3.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f/gcc%2Ftestsuite%2Fgfortran.dg%2Fverify_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f/gcc%2Ftestsuite%2Fgfortran.dg%2Fverify_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fverify_3.f90?ref=c1c17a43e172ebc28f2cd247f6e83c5fdbc6219f", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+!\n+! PR fortran/103789\n+! Check the absence of ICE when generating calls to VERIFY with a KIND argument.\n+\n+program p\n+   character(len=10) :: y(2)\n+   integer :: z(2)\n+   y = ['abc', 'def']\n+   z = verify(y, 'e', kind=4) + 1\n+end program p"}]}