{"sha": "6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkNWRjY2Q1ZWNlZjJkOWNlZmNlOGM2MWM3YTgzZmU2YjFhMGM3Ng==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-28T06:09:57Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-28T06:09:57Z"}, "message": "Consolidate strerror handling, as well as getcwd/getwd.\n\n        * configure.in (GCC_NEED_DECLARATIONS): Add strerror, getcwd and\n        getwd.\n        * acconfig.m4: Add stubs for NEED_DECLARATION_STRERROR,\n        NEED_DECLARATION_GETCWD and NEED_DECLARATION_GETWD.\n        * cccp.c: Remove strerror()/sys_nerr/sys_errlist decls.\n        (my_strerror): Add prototype and make it static.\n        * collect2.c: Likewise.\n        * cpplib.c: Likewise.\n        * gcc.c: Likewise, but keep `my_strerror' extern.\n        * protoize.c: Likewise.\n        * pexecute.c (my_strerror): Add argument to prototype.\n        * system.h: Add prototypes for getcwd, getwd and strerror.  Add\n        extern decls for sys_nerr and sys_errlist.  Make abort decl\n        explicitly extern.\n        * getpwd.c: Remove decls for getwd and getcwd.\n\nFrom-SVN: r20779", "tree": {"sha": "6f091a195512741bb4eb68f404e752087fb5691e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f091a195512741bb4eb68f404e752087fb5691e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/comments", "author": null, "committer": null, "parents": [{"sha": "984e3c38b51824e200729c1a8d4a87800d654fe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984e3c38b51824e200729c1a8d4a87800d654fe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984e3c38b51824e200729c1a8d4a87800d654fe6"}], "stats": {"total": 128, "additions": 76, "deletions": 52}, "files": [{"sha": "3bc9e92beeb40cbd97323faaba345d9b658105df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -1,3 +1,30 @@\n+Sun Jun 28 08:57:09 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* configure.in (GCC_NEED_DECLARATIONS): Add strerror, getcwd and\n+\tgetwd.\n+\n+\t* acconfig.m4: Add stubs for NEED_DECLARATION_STRERROR,\n+\tNEED_DECLARATION_GETCWD and NEED_DECLARATION_GETWD. \n+\n+\t* cccp.c: Remove strerror()/sys_nerr/sys_errlist decls.\n+\t(my_strerror): Add prototype and make it static.\n+\n+\t* collect2.c: Likewise.\n+\n+\t* cpplib.c: Likewise.\n+\n+\t* gcc.c: Likewise, but keep `my_strerror' extern.\n+\n+\t* protoize.c: Likewise.\n+\n+\t* pexecute.c (my_strerror): Add argument to prototype.\n+\n+\t* system.h: Add prototypes for getcwd, getwd and strerror.  Add\n+\textern decls for sys_nerr and sys_errlist.  Make abort decl\n+\texplicitly extern.\n+\n+\t* getpwd.c: Remove decls for getwd and getcwd.\n+\n Sun Jun 28 02:11:16 PDT 1998 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "f2dd58209899a3bc54c5c6e90e687eb2a4d70203", "filename": "gcc/acconfig.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facconfig.h?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -55,4 +55,13 @@\n \n /* Whether abort must be declared even if <stdlib.h> is included.  */\n #undef NEED_DECLARATION_ABORT\n+\n+/* Whether strerror must be declared even if <string.h> is included.  */\n+#undef NEED_DECLARATION_STRERROR\n+\n+/* Whether getcwd must be declared even if <unistd.h> is included.  */\n+#undef NEED_DECLARATION_GETCWD\n+\n+/* Whether getwd must be declared even if <unistd.h> is included.  */\n+#undef NEED_DECLARATION_GETWD\n @TOP@"}, {"sha": "d717009a35de6ca889eeab3f31975d35f7e72728", "filename": "gcc/cccp.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -138,16 +138,6 @@ static int hack_vms_include_specification ();\n \n extern char *version_string;\n extern char *update_path PROTO((char *, char *));\n-#ifndef VMS\n-#ifndef HAVE_STRERROR\n-extern int sys_nerr;\n-extern char *sys_errlist[];\n-#else\t/* HAVE_STRERROR */\n-char *strerror ();\n-#endif\n-#else\t/* VMS */\n-char *strerror (int,...);\n-#endif\n HOST_WIDE_INT parse_escape PROTO((char **, HOST_WIDE_INT));\n HOST_WIDE_INT parse_c_expression PROTO((char *, int));\n \f\n@@ -1003,7 +993,7 @@ static int discard_comments PROTO((U_CHAR *, int, int));\n \n static int change_newlines PROTO((U_CHAR *, int));\n \n-char *my_strerror PROTO((int));\n+static char *my_strerror PROTO((int));\n void error PRINTF_PROTO_1((char *, ...));\n static void verror PROTO((char *, va_list));\n static void error_from_errno PROTO((char *));\n@@ -8873,7 +8863,7 @@ change_newlines (start, length)\n /* my_strerror - return the descriptive text associated with an\n    `errno' code.  */\n \n-char *\n+static char *\n my_strerror (errnum)\n      int errnum;\n {"}, {"sha": "a766bd2583441608da3f8ce791d6cff0bfc5eb79", "filename": "gcc/collect2.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -39,13 +39,6 @@ Boston, MA 02111-1307, USA.  */\n #include <process.h>\n #endif\n \n-#ifndef HAVE_STRERROR\n-extern char *sys_errlist[];\n-extern int sys_nerr;\n-#else\n-char *strerror();\n-#endif\n-\n /* Obstack allocation and deallocation routines.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n@@ -278,6 +271,7 @@ static struct path_prefix *libpaths[3] = {&cmdline_lib_dirs,\n static char *libexts[3] = {\"a\", \"so\", NULL};  /* possible library extentions */\n #endif\n \n+static char *my_strerror\tPROTO((int));\n static void handler\t\tPROTO((int));\n static int is_ctor_dtor\t\tPROTO((char *));\n static char *find_a_file\tPROTO((struct path_prefix *, char *));\n@@ -336,7 +330,7 @@ dup2 (oldfd, newfd)\n }\n #endif\n \n-char *\n+static char *\n my_strerror (e)\n      int e;\n {"}, {"sha": "e4e4f2eb1dea9740cf671b287530071935ad6404", "filename": "gcc/config.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -57,6 +57,15 @@\n /* Whether abort must be declared even if <stdlib.h> is included.  */\n #undef NEED_DECLARATION_ABORT\n \n+/* Whether strerror must be declared even if <string.h> is included.  */\n+#undef NEED_DECLARATION_STRERROR\n+\n+/* Whether getcwd must be declared even if <unistd.h> is included.  */\n+#undef NEED_DECLARATION_GETCWD\n+\n+/* Whether getwd must be declared even if <unistd.h> is included.  */\n+#undef NEED_DECLARATION_GETWD\n+\n /* Define if you don't have vprintf but do have _doprnt.  */\n #undef HAVE_DOPRNT\n "}, {"sha": "dfa8e26608331b671d56f9adb47ddd0f3d17d0db", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -1945,7 +1945,7 @@ fi\n \n \n for ac_func in malloc realloc calloc free bcopy bzero bcmp \\\n-\tindex rindex getenv atol sbrk abort atof\n+\tindex rindex getenv atol sbrk abort atof strerror getcwd getwd\n do\n echo $ac_n \"checking whether $ac_func must be declared\"\"... $ac_c\" 1>&6\n echo \"configure:1952: checking whether $ac_func must be declared\" >&5"}, {"sha": "bdfe74a62b01575609b51d35875ec4785d9b33ee", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -197,7 +197,7 @@ GCC_FUNC_VFPRINTF_DOPRNT\n GCC_FUNC_PRINTF_PTR\n \n GCC_NEED_DECLARATIONS(malloc realloc calloc free bcopy bzero bcmp \\\n-\tindex rindex getenv atol sbrk abort atof)\n+\tindex rindex getenv atol sbrk abort atof strerror getcwd getwd)\n \n AC_DECL_SYS_SIGLIST\n "}, {"sha": "5f699c8ee07d00504ddcce1654e1303640cd9d15", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -203,6 +203,7 @@ struct cpp_pending {\n char *xmalloc ();\n extern void cpp_hash_cleanup PARAMS ((cpp_reader *));\n \n+static char *my_strerror\t\tPROTO ((int));\n static void add_import\t\t\tPROTO ((cpp_reader *, int, char *));\n static void append_include_chain\tPROTO ((cpp_reader *,\n \t\t\t\t\t\tstruct file_name_list *,\n@@ -7599,21 +7600,10 @@ cpp_pedwarn_with_file_and_line VPROTO ((cpp_reader *pfile, char *file, int line,\n   va_end(ap);\n }\n \n-#ifndef VMS\n-#ifndef HAVE_STRERROR\n-extern int sys_nerr;\n-extern char *sys_errlist[];\n-#else\t/* HAVE_STRERROR */\n-char *strerror ();\n-#endif\n-#else\t/* VMS */\n-char *strerror (int,...);\n-#endif\n-\n /* my_strerror - return the descriptive text associated with an\n    `errno' code.  */\n \n-char *\n+static char *\n my_strerror (errnum)\n      int errnum;\n {"}, {"sha": "cc4af8e897a1fa25de6225614087ee291e52ded9", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -122,13 +122,7 @@ static char dir_separator_str[] = {DIR_SEPARATOR, 0};\n #endif\n \n extern char *choose_temp_base PROTO((void));\n-\n-#ifndef HAVE_STRERROR\n-extern int sys_nerr;\n-extern char *sys_errlist[];\n-#else\n-extern char *strerror();\n-#endif\n+extern char *my_strerror PROTO((int));\n \n #ifndef HAVE_KILL\n #define kill(p,s) raise(s)"}, {"sha": "947383ef9a4457e203081ca700ef9dd97e4bdee3", "filename": "gcc/getpwd.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fgetpwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fgetpwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgetpwd.c?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -9,15 +9,13 @@\n    the few exceptions to the general rule here.  */\n \n #if !(defined (POSIX) || defined (USG) || defined (VMS)) || defined (HAVE_GETWD)\n-extern char *getwd ();\n #define getcwd(buf,len) getwd(buf)\n #ifdef MAXPATHLEN\n #define GUESSPATHLEN (MAXPATHLEN + 1)\n #else\n #define GUESSPATHLEN 100\n #endif\n #else /* (defined (USG) || defined (VMS)) */\n-extern char *getcwd ();\n /* We actually use this as a starting point, not a limit.  */\n #define GUESSPATHLEN 100\n #endif /* (defined (USG) || defined (VMS)) */"}, {"sha": "804f3147f7d8bb6b07988b12dad4f1de7f9bf026", "filename": "gcc/pexecute.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpexecute.c?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -637,7 +637,7 @@ pfinish ()\n extern int execv ();\n extern int execvp ();\n #ifdef IN_GCC\n-extern char * my_strerror();\n+extern char * my_strerror\t\t\tPROTO ((int));\n #endif\n \n int"}, {"sha": "a85b21b3a8a870388c012d817c92aef1c3df14a6", "filename": "gcc/protoize.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -93,13 +93,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"getopt.h\"\n #undef getopt\n \n-#ifndef HAVE_STRERROR\n-extern int sys_nerr;\n-extern char *sys_errlist[];\n-#else\n-extern char *strerror();\n-#endif\n-\n extern char *version_string;\n \n /* Systems which are compatible only with POSIX 1003.1-1988 (but *not*\n@@ -123,6 +116,7 @@ extern char *version_string;\n extern char *getpwd ();\n \n extern char *choose_temp_base PROTO ((void));\n+extern char * my_strerror PROTO ((int));\n \n extern int pexecute PROTO ((const char *, char * const *, const char *,\n \t\t\t    const char *, char **, char **, int));"}, {"sha": "79e1e279ae2a65a0f214b8cdbe83da085f7c5138", "filename": "gcc/system.h", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=6cd5dccd5ecef2d9cefce8c61c7a83fe6b1a0c76", "patch": "@@ -202,14 +202,33 @@ extern long atol();\n extern void free ();\n #endif\n \n+#ifdef NEED_DECLARATION_GETCWD\n+extern char *getcwd ();\n+#endif\n+\n #ifdef NEED_DECLARATION_GETENV\n extern char *getenv ();\n #endif\n \n+#ifdef NEED_DECLARATION_GETWD\n+extern char *getwd ();\n+#endif\n+\n #ifdef NEED_DECLARATION_SBRK\n extern char *sbrk ();\n #endif\n \n+#ifdef HAVE_STRERROR\n+# ifdef NEED_DECLARATION_STRERROR\n+#  ifndef strerror\n+extern char *strerror ();\n+#  endif\n+# endif\n+#else /* ! HAVE_STRERROR */\n+extern int sys_nerr;\n+extern char *sys_errlist[];\n+#endif /* HAVE_STRERROR */\n+\n /* HAVE_VOLATILE only refers to the stage1 compiler.  We also check\n    __STDC__ and assume gcc sets it and has volatile in stage >=2. */\n #if !defined(HAVE_VOLATILE) && !defined(__STDC__) && !defined(volatile)\n@@ -229,7 +248,7 @@ extern char *sbrk ();\n \n #ifdef USE_SYSTEM_ABORT\n # ifdef NEED_DECLARATION_ABORT\n-void abort ();\n+extern void abort ();\n # endif\n #else\n #if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)"}]}