{"sha": "48c82310947355665d628d4d1c8e736df9987574", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhjODIzMTA5NDczNTU2NjVkNjI4ZDRkMWM4ZTczNmRmOTk4NzU3NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-04-20T13:25:50Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-04-20T13:25:50Z"}, "message": "Fix ICE on invalid calls_comdat_local flag [pr94582]\n\n\tPR ipa/94582\n\t* tree-inline.c (optimize_inline_calls): Recompute calls_comdat_local\n\tflag.\n\n\t* g++.dg/torture/pr94582.C: New test.", "tree": {"sha": "08aeb9c41a0be02b7c2ebda0771730d22e843f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08aeb9c41a0be02b7c2ebda0771730d22e843f81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48c82310947355665d628d4d1c8e736df9987574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c82310947355665d628d4d1c8e736df9987574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c82310947355665d628d4d1c8e736df9987574", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c82310947355665d628d4d1c8e736df9987574/comments", "author": null, "committer": null, "parents": [{"sha": "aeb430aadc3c91af50095be924365981d85f8b8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb430aadc3c91af50095be924365981d85f8b8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb430aadc3c91af50095be924365981d85f8b8a"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "cc6c6389b9020b2be4a836d41c526c2ddaf8736b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c82310947355665d628d4d1c8e736df9987574/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c82310947355665d628d4d1c8e736df9987574/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48c82310947355665d628d4d1c8e736df9987574", "patch": "@@ -1,3 +1,9 @@\n+2020-04-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/94582\n+\t* tree-inline.c (optimize_inline_calls): Recompute calls_comdat_local\n+\tflag.\n+\n 2020-04-20  Martin Liska  <mliska@suse.cz>\n \n \t* symtab.c (symtab_node::dump_references): Add space after"}, {"sha": "feea458ca3f58d090efafac6e017a2f3cfb43572", "filename": "gcc/ipa-comdats.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c82310947355665d628d4d1c8e736df9987574/gcc%2Fipa-comdats.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c82310947355665d628d4d1c8e736df9987574/gcc%2Fipa-comdats.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-comdats.c?ref=48c82310947355665d628d4d1c8e736df9987574", "patch": "@@ -376,6 +376,15 @@ ipa_comdats (void)\n \t\t   true);\n \t}\n     }\n+\n+#if 0\n+  /* Recompute calls comdat local flag.  This need to be done after all changes\n+     are made.  */\n+  cgraph_node *function;\n+  FOR_EACH_DEFINED_FUNCTION (function)\n+    if (function->get_comdat_group ())\n+      function->calls_comdat_local = function->check_calls_comdat_local_p ();\n+#endif\n   return 0;\n }\n "}, {"sha": "9ba21a0b7f83ae546c2a007996bbce8cedb6a78d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c82310947355665d628d4d1c8e736df9987574/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c82310947355665d628d4d1c8e736df9987574/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48c82310947355665d628d4d1c8e736df9987574", "patch": "@@ -1,3 +1,9 @@\n+2020-04-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/94582\n+\tPR ipa/94582\n+\t* g++.dg/torture/pr94582.C: New test.\n+\n 2020-04-20  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/93364"}, {"sha": "b06285a196cd10725ad3e332b9c8b4a38f40d6c7", "filename": "gcc/testsuite/g++.dg/torture/pr94582.C", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c82310947355665d628d4d1c8e736df9987574/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr94582.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c82310947355665d628d4d1c8e736df9987574/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr94582.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr94582.C?ref=48c82310947355665d628d4d1c8e736df9987574", "patch": "@@ -0,0 +1,87 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-fnon-call-exceptions -fno-inline-functions-called-once -fno-tree-sra --param early-inlining-insns=1\" }\n+template <typename, typename> struct __replace_first_arg;\n+template <template <typename> class _Template, typename _Up, typename _Tp,\n+          typename... _Types>\n+struct __replace_first_arg<_Template<_Tp, _Types...>, _Up> {\n+  using type = _Template<_Up>;\n+};\n+template <class> class min_pointer;\n+struct pointer_traits {\n+  template <typename _Up>\n+  using rebind = typename __replace_first_arg<min_pointer<int>, _Up>::type;\n+};\n+template <typename, typename _Tp>\n+using __ptr_rebind = pointer_traits::rebind<_Tp>;\n+template <typename _Alloc> struct allocator_traits {\n+  template <typename _Tp>\n+  static auto construct(_Alloc, _Tp) noexcept -> decltype(0);\n+};\n+template <typename _ForwardIterator, typename _Allocator>\n+void _Destroy(_ForwardIterator __last, _Allocator) {\n+  _ForwardIterator __first;\n+  for (; __first != __last;)\n+    ;\n+}\n+template <typename _ForwardIterator, typename _Allocator>\n+void __uninitialized_default_a(_ForwardIterator __last, _Allocator __alloc) {\n+  _ForwardIterator __first;\n+  try {\n+    for (; __first != __last;)\n+      allocator_traits<_Allocator>::construct(__alloc, 0);\n+  } catch (...) {\n+    _Destroy(__first, __alloc);\n+  }\n+}\n+template <typename _Ptr> struct _Deque_iterator {\n+  typedef __ptr_rebind<_Ptr, __ptr_rebind<_Ptr, int>> _Map_pointer;\n+};\n+template <typename _Alloc> class _Deque_base {\n+protected:\n+  typedef _Alloc _Tp_alloc_type;\n+  typedef _Deque_iterator<typename _Tp_alloc_type ::pointer> iterator;\n+  _Deque_base(_Alloc, long);\n+  typedef typename iterator::_Map_pointer _Map_pointer;\n+  _Tp_alloc_type _M_get_Tp_allocator();\n+};\n+template <typename _Alloc> class deque : _Deque_base<_Alloc> {\n+  typedef _Deque_base<_Alloc> _Base;\n+  typedef typename _Base::_Map_pointer _Map_pointer;\n+  typedef typename _Base::iterator iterator;\n+  using _Base::_M_get_Tp_allocator;\n+\n+public:\n+  deque(int, _Alloc __a) : _Base(__a, 0) {\n+    _Map_pointer __cur;\n+    try {\n+      __uninitialized_default_a(__cur, _M_get_Tp_allocator());\n+    } catch (...) {\n+    }\n+    _M_destroy_data(begin(), end(), 0);\n+  }\n+  iterator begin();\n+  iterator end();\n+  template <typename _Alloc1>\n+  void _M_destroy_data(iterator, iterator, _Alloc1) {\n+    for (_Map_pointer __node;;)\n+      _Destroy(__node, _M_get_Tp_allocator());\n+  }\n+};\n+template <class T> class min_pointer {\n+  T ptr_;\n+  friend bool operator==(min_pointer x, min_pointer y) {\n+    return x.ptr_ == y.ptr_;\n+  }\n+  friend bool operator!=(min_pointer x, min_pointer y) { return x == y; }\n+};\n+template <class> class min_allocator {\n+public:\n+  typedef int pointer;\n+};\n+int foo() {\n+  int n;\n+  min_allocator<int> alloc;\n+  deque<min_allocator<int>>(n, alloc);\n+  return 1;\n+}\n+"}, {"sha": "69ca8e99109ed9bae74f8099789049a251abe9b9", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c82310947355665d628d4d1c8e736df9987574/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c82310947355665d628d4d1c8e736df9987574/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=48c82310947355665d628d4d1c8e736df9987574", "patch": "@@ -5469,6 +5469,7 @@ optimize_inline_calls (tree fn)\n   number_blocks (fn);\n \n   delete_unreachable_blocks_update_callgraph (id.dst_node, false);\n+  id.dst_node->calls_comdat_local = id.dst_node->check_calls_comdat_local_p ();\n \n   if (flag_checking)\n     id.dst_node->verify ();"}]}