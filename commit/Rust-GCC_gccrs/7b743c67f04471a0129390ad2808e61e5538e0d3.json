{"sha": "7b743c67f04471a0129390ad2808e61e5538e0d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I3NDNjNjdmMDQ0NzFhMDEyOTM5MGFkMjgwOGU2MWU1NTM4ZTBkMw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-27T18:09:52Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-27T18:09:52Z"}, "message": "libstdc++: Fix operator overload ambiguity with calendar types\n\nWe currently don't enforce a constraint on some of the calendar types'\naddition/subtraction operator overloads that take a 'months' arguments:\n\n  Constraints: If the argument supplied by the caller for the months\n  parameter is convertible to years, its implicit conversion sequence to\n  years is worse than its implicit conversion sequence to months.\n\nThis constraint is relevant when adding/subtracting a duration to/from,\nsay, a year_month where the given duration is convertible to both\n'months' and to 'years' (as in the new testcases below).  The correct\nbehavior here in light of this constraint is to perform the operation\nthrough the (more efficient) 'years'-based overload, but we currently\nemit an ambiguous overload error.\n\nThis patch templatizes the 'months'-based addition/subtraction operator\noverloads so that in the event of an implicit-conversion tie, we select\nthe non-template 'years'-based overload.  This is the same approach\nthat the date library takes for enforcing this constraint.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/chrono\n\t(__detail::__months_years_conversion_disambiguator): Define.\n\t(year_month::operator+=): Templatize the 'months'-based overload\n\tso that the 'years'-based overload is selected in case of\n\tequally-ranked implicit conversion sequences to both 'months'\n\tand 'years' from the supplied argument.\n\t(year_month::operator-=): Likewise.\n\t(year_month::operator+): Likewise.\n\t(year_month::operator-): Likewise.\n\t(year_month_day::operator+=): Likewise.\n\t(year_month_day::operator-=): Likewise.\n\t(year_month_day::operator+): Likewise.\n\t(year_month_day::operator-): Likewise.\n\t(year_month_day_last::operator+=): Likewise.\n\t(year_month_day_last::operator-=): Likewise.\n\t(year_month_day_last::operator+): Likewise\n\t(year_month_day_last::operator-): Likewise.\n\t(year_month_day_weekday::operator+=): Likewise\n\t(year_month_day_weekday::operator-=): Likewise.\n\t(year_month_day_weekday::operator+): Likewise.\n\t(year_month_day_weekday::operator-): Likewise.\n\t(year_month_day_weekday_last::operator+=): Likewise\n\t(year_month_day_weekday_last::operator-=): Likewise.\n\t(year_month_day_weekday_last::operator+): Likewise.\n\t(year_month_day_weekday_last::operator-): Likewise.\n\t(testsuite/std/time/year_month/2.cc): New test.\n\t(testsuite/std/time/year_month_day/2.cc): New test.\n\t(testsuite/std/time/year_month_day_last/2.cc): New test.\n\t(testsuite/std/time/year_month_weekday/2.cc): New test.\n\t(testsuite/std/time/year_month_weekday_last/2.cc): New test.", "tree": {"sha": "20043ba2843efa697a9372479bec73d877116ebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20043ba2843efa697a9372479bec73d877116ebc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b743c67f04471a0129390ad2808e61e5538e0d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b743c67f04471a0129390ad2808e61e5538e0d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b743c67f04471a0129390ad2808e61e5538e0d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b743c67f04471a0129390ad2808e61e5538e0d3/comments", "author": null, "committer": null, "parents": [{"sha": "04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6"}], "stats": {"total": 486, "additions": 367, "deletions": 119}, "files": [{"sha": "df2f5d23f527799896fd88340e37409c0d6a3271", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 167, "deletions": 119, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=7b743c67f04471a0129390ad2808e61e5538e0d3", "patch": "@@ -2046,6 +2046,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // YEAR_MONTH\n \n+    namespace __detail\n+    {\n+      // [time.cal.ym], [time.cal.ymd], etc constrain the 'months'-based\n+      // addition/subtraction operator overloads like so:\n+      //\n+      //   Constraints: if the argument supplied by the caller for the months\n+      //   parameter is convertible to years, its implicit conversion sequence\n+      //   to years is worse than its implicit conversion sequence to months.\n+      //\n+      // We realize this constraint by templatizing the 'months'-based\n+      // overloads (using a dummy defaulted template parameter), so that\n+      // overload resolution doesn't select the 'months'-based overload unless\n+      // the implicit conversion sequence to 'months' is better than that to\n+      // 'years'.\n+      using __months_years_conversion_disambiguator = void;\n+    }\n+\n     class year_month\n     {\n     private:\n@@ -2068,19 +2085,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       month() const noexcept\n       { return _M_m; }\n \n-      constexpr year_month&\n-      operator+=(const months& __dm) noexcept\n-      {\n-\t*this = *this + __dm;\n-\treturn *this;\n-      }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tconstexpr year_month&\n+\toperator+=(const months& __dm) noexcept\n+\t{\n+\t  *this = *this + __dm;\n+\t  return *this;\n+\t}\n \n-      constexpr year_month&\n-      operator-=(const months& __dm) noexcept\n-      {\n-\t*this = *this - __dm;\n-\treturn *this;\n-      }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tconstexpr year_month&\n+\toperator-=(const months& __dm) noexcept\n+\t{\n+\t  *this = *this - __dm;\n+\t  return *this;\n+\t}\n \n       constexpr year_month&\n       operator+=(const years& __dy)  noexcept\n@@ -2108,25 +2127,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator<=>(const year_month& __x, const year_month& __y) noexcept\n \t= default;\n \n-      friend constexpr year_month\n-      operator+(const year_month& __ym, const months& __dm) noexcept\n-      {\n-\t// TODO: Optimize?\n-\tauto __m = __ym.month() + __dm;\n-\tauto __i = unsigned{__ym.month()} - 1 + __dm.count();\n-\tauto __y = (__i < 0\n-\t\t    ? __ym.year() + years{(__i - 11) / 12}\n-\t\t    : __ym.year() + years{__i / 12});\n-\treturn __y / __m;\n-      }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month\n+\toperator+(const year_month& __ym, const months& __dm) noexcept\n+\t{\n+\t  // TODO: Optimize?\n+\t  auto __m = __ym.month() + __dm;\n+\t  auto __i = unsigned{__ym.month()} - 1 + __dm.count();\n+\t  auto __y = (__i < 0\n+\t\t      ? __ym.year() + years{(__i - 11) / 12}\n+\t\t      : __ym.year() + years{__i / 12});\n+\t  return __y / __m;\n+\t}\n \n-      friend constexpr year_month\n-      operator+(const months& __dm, const year_month& __ym) noexcept\n-      { return __ym + __dm; }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month\n+\toperator+(const months& __dm, const year_month& __ym) noexcept\n+\t{ return __ym + __dm; }\n \n-      friend constexpr year_month\n-      operator-(const year_month& __ym, const months& __dm) noexcept\n-      { return __ym + -__dm; }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month\n+\toperator-(const year_month& __ym, const months& __dm) noexcept\n+\t{ return __ym + -__dm; }\n \n       friend constexpr months\n       operator-(const year_month& __x, const year_month& __y) noexcept\n@@ -2200,19 +2222,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : year_month_day(sys_days{__dp.time_since_epoch()})\n       { }\n \n-      constexpr year_month_day&\n-      operator+=(const months& __m) noexcept\n-      {\n-\t*this = *this + __m;\n-\treturn *this;\n-      }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tconstexpr year_month_day&\n+\toperator+=(const months& __m) noexcept\n+\t{\n+\t  *this = *this + __m;\n+\t  return *this;\n+\t}\n \n-      constexpr year_month_day&\n-      operator-=(const months& __m) noexcept\n-      {\n-\t*this = *this - __m;\n-\treturn *this;\n-      }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tconstexpr year_month_day&\n+\toperator-=(const months& __m) noexcept\n+\t{\n+\t  *this = *this - __m;\n+\t  return *this;\n+\t}\n \n       constexpr year_month_day&\n       operator+=(const years& __y) noexcept\n@@ -2262,13 +2286,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator<=>(const year_month_day& __x, const year_month_day& __y) noexcept\n \t= default;\n \n-      friend constexpr year_month_day\n-      operator+(const year_month_day& __ymd, const months& __dm) noexcept\n-      { return (__ymd.year() / __ymd.month() + __dm) / __ymd.day(); }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_day\n+\toperator+(const year_month_day& __ymd, const months& __dm) noexcept\n+\t{ return (__ymd.year() / __ymd.month() + __dm) / __ymd.day(); }\n \n-      friend constexpr year_month_day\n-      operator+(const months& __dm, const year_month_day& __ymd) noexcept\n-      { return __ymd + __dm; }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_day\n+\toperator+(const months& __dm, const year_month_day& __ymd) noexcept\n+\t{ return __ymd + __dm; }\n \n       friend constexpr year_month_day\n       operator+(const year_month_day& __ymd, const years& __dy) noexcept\n@@ -2278,9 +2304,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator+(const years& __dy, const year_month_day& __ymd) noexcept\n       { return __ymd + __dy; }\n \n-      friend constexpr year_month_day\n-      operator-(const year_month_day& __ymd, const months& __dm) noexcept\n-      { return __ymd + -__dm; }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_day\n+\toperator-(const year_month_day& __ymd, const months& __dm) noexcept\n+\t{ return __ymd + -__dm; }\n \n       friend constexpr year_month_day\n       operator-(const year_month_day& __ymd, const years& __dy) noexcept\n@@ -2364,19 +2391,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_y{__y}, _M_mdl{__mdl}\n       { }\n \n-      constexpr year_month_day_last&\n-      operator+=(const months& __m) noexcept\n-      {\n-\t*this = *this + __m;\n-\treturn *this;\n-      }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tconstexpr year_month_day_last&\n+\toperator+=(const months& __m) noexcept\n+\t{\n+\t  *this = *this + __m;\n+\t  return *this;\n+\t}\n \n-      constexpr year_month_day_last&\n-      operator-=(const months& __m) noexcept\n-      {\n-\t*this = *this - __m;\n-\treturn *this;\n-      }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tconstexpr year_month_day_last&\n+\toperator-=(const months& __m) noexcept\n+\t{\n+\t  *this = *this - __m;\n+\t  return *this;\n+\t}\n \n       constexpr year_month_day_last&\n       operator+=(const years& __y)  noexcept\n@@ -2438,20 +2467,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  const year_month_day_last& __y) noexcept\n \t= default;\n \n-      friend constexpr year_month_day_last\n-      operator+(const year_month_day_last& __ymdl,\n-\t\tconst months& __dm) noexcept\n-      { return (__ymdl.year() / __ymdl.month() + __dm) / last; }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_day_last\n+\toperator+(const year_month_day_last& __ymdl,\n+\t\t  const months& __dm) noexcept\n+\t{ return (__ymdl.year() / __ymdl.month() + __dm) / last; }\n \n-      friend constexpr year_month_day_last\n-      operator+(const months& __dm,\n-\t\tconst year_month_day_last& __ymdl) noexcept\n-      { return __ymdl + __dm; }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_day_last\n+\toperator+(const months& __dm,\n+\t\t  const year_month_day_last& __ymdl) noexcept\n+\t{ return __ymdl + __dm; }\n \n-      friend constexpr year_month_day_last\n-      operator-(const year_month_day_last& __ymdl,\n-\t\tconst months& __dm) noexcept\n-      { return __ymdl + -__dm; }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_day_last\n+\toperator-(const year_month_day_last& __ymdl,\n+\t\t  const months& __dm) noexcept\n+\t{ return __ymdl + -__dm; }\n \n       friend constexpr year_month_day_last\n       operator+(const year_month_day_last& __ymdl,\n@@ -2544,19 +2576,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : year_month_weekday{sys_days{__dp.time_since_epoch()}}\n       { }\n \n-      constexpr year_month_weekday&\n-      operator+=(const months& __m) noexcept\n-      {\n-\t*this = *this + __m;\n-\treturn *this;\n-      }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tconstexpr year_month_weekday&\n+\toperator+=(const months& __m) noexcept\n+\t{\n+\t  *this = *this + __m;\n+\t  return *this;\n+\t}\n \n-      constexpr year_month_weekday&\n-      operator-=(const months& __m) noexcept\n-      {\n-\t*this = *this - __m;\n-\treturn *this;\n-      }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tconstexpr year_month_weekday&\n+\toperator-=(const months& __m) noexcept\n+\t{\n+\t  *this = *this - __m;\n+\t  return *this;\n+\t}\n \n       constexpr year_month_weekday&\n       operator+=(const years& __y) noexcept\n@@ -2626,13 +2660,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  && __x.weekday_indexed() == __y.weekday_indexed();\n       }\n \n-      friend constexpr year_month_weekday\n-      operator+(const year_month_weekday& __ymwd, const months& __dm) noexcept\n-      { return (__ymwd.year() / __ymwd.month() + __dm) / __ymwd.weekday_indexed(); }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_weekday\n+\toperator+(const year_month_weekday& __ymwd, const months& __dm) noexcept\n+\t{\n+\t  return ((__ymwd.year() / __ymwd.month() + __dm)\n+\t\t  / __ymwd.weekday_indexed());\n+\t}\n \n-      friend constexpr year_month_weekday\n-      operator+(const months& __dm, const year_month_weekday& __ymwd) noexcept\n-      { return __ymwd + __dm; }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_weekday\n+\toperator+(const months& __dm, const year_month_weekday& __ymwd) noexcept\n+\t{ return __ymwd + __dm; }\n \n       friend constexpr year_month_weekday\n       operator+(const year_month_weekday& __ymwd, const years& __dy) noexcept\n@@ -2642,9 +2681,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator+(const years& __dy, const year_month_weekday& __ymwd) noexcept\n       { return __ymwd + __dy; }\n \n-      friend constexpr year_month_weekday\n-      operator-(const year_month_weekday& __ymwd, const months& __dm) noexcept\n-      { return __ymwd + -__dm; }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_weekday\n+\toperator-(const year_month_weekday& __ymwd, const months& __dm) noexcept\n+\t{ return __ymwd + -__dm; }\n \n       friend constexpr year_month_weekday\n       operator-(const year_month_weekday& __ymwd, const years& __dy) noexcept\n@@ -2690,19 +2730,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_y{__y}, _M_m{__m}, _M_wdl{__wdl}\n       { }\n \n-      constexpr year_month_weekday_last&\n-      operator+=(const months& __m) noexcept\n-      {\n-\t*this = *this + __m;\n-\treturn *this;\n-      }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tconstexpr year_month_weekday_last&\n+\toperator+=(const months& __m) noexcept\n+\t{\n+\t  *this = *this + __m;\n+\t  return *this;\n+\t}\n \n-      constexpr year_month_weekday_last&\n-      operator-=(const months& __m) noexcept\n-      {\n-\t*this = *this - __m;\n-\treturn *this;\n-      }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tconstexpr year_month_weekday_last&\n+\toperator-=(const months& __m) noexcept\n+\t{\n+\t  *this = *this - __m;\n+\t  return *this;\n+\t}\n \n       constexpr year_month_weekday_last&\n       operator+=(const years& __y)  noexcept\n@@ -2759,15 +2801,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  && __x.weekday_last() == __y.weekday_last();\n       }\n \n-      friend constexpr year_month_weekday_last\n-      operator+(const year_month_weekday_last& __ymwdl,\n-\t\tconst months& __dm) noexcept\n-      { return (__ymwdl.year() / __ymwdl.month() + __dm) / __ymwdl.weekday_last(); }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_weekday_last\n+\toperator+(const year_month_weekday_last& __ymwdl,\n+\t\t  const months& __dm) noexcept\n+\t{\n+\t  return ((__ymwdl.year() / __ymwdl.month() + __dm)\n+\t\t  / __ymwdl.weekday_last());\n+\t}\n \n-      friend constexpr year_month_weekday_last\n-      operator+(const months& __dm,\n-\t\tconst year_month_weekday_last& __ymwdl) noexcept\n-      { return __ymwdl + __dm; }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_weekday_last\n+\toperator+(const months& __dm,\n+\t\t  const year_month_weekday_last& __ymwdl) noexcept\n+\t{ return __ymwdl + __dm; }\n \n       friend constexpr year_month_weekday_last\n       operator+(const year_month_weekday_last& __ymwdl,\n@@ -2779,10 +2826,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\tconst year_month_weekday_last& __ymwdl) noexcept\n       { return __ymwdl + __dy; }\n \n-      friend constexpr year_month_weekday_last\n-      operator-(const year_month_weekday_last& __ymwdl,\n-\t\tconst months& __dm) noexcept\n-      { return __ymwdl + -__dm; }\n+      template<typename = __detail::__months_years_conversion_disambiguator>\n+\tfriend constexpr year_month_weekday_last\n+\toperator-(const year_month_weekday_last& __ymwdl,\n+\t\t  const months& __dm) noexcept\n+\t{ return __ymwdl + -__dm; }\n \n       friend constexpr year_month_weekday_last\n       operator-(const year_month_weekday_last& __ymwdl,"}, {"sha": "36e146675472f581cbe5d7e86975582133aff6ad", "filename": "libstdc++-v3/testsuite/std/time/year_month/2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month%2F2.cc?ref=7b743c67f04471a0129390ad2808e61e5538e0d3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template year_month [time.cal.year_month]\n+\n+#include <chrono>\n+\n+constexpr void\n+constexpr_year_month_op_overload_disambiguation()\n+{\n+  using namespace std::chrono;\n+  using decades = duration<long long, std::ratio<31556952 * 10>>;\n+  static_assert(std::convertible_to<decades, months>\n+\t\t&& std::convertible_to<decades, years>);\n+  using ym = year_month;\n+\n+  constexpr ym ym1 = 2015y/June;\n+  static_assert(ym1 + decades{1} == 2025y/June);\n+  static_assert(ym1 - decades{1} == 2005y/June);\n+  static_assert(decades{1} + ym1 == 2025y/June);\n+  static_assert((ym{ym1} += decades{1}) == 2025y/June);\n+  static_assert((ym{ym1} -= decades{1}) == 2005y/June);\n+}"}, {"sha": "80d1f033c1d7e003b2c15f4b19424638eb7754a7", "filename": "libstdc++-v3/testsuite/std/time/year_month_day/2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day%2F2.cc?ref=7b743c67f04471a0129390ad2808e61e5538e0d3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template year_month_day [time.cal.year_month_day]\n+\n+#include <chrono>\n+\n+constexpr void\n+constexpr_year_month_day_op_overload_disambiguation()\n+{\n+  using namespace std::chrono;\n+  using decades = duration<long long, std::ratio<31556952 * 10>>;\n+  static_assert(std::convertible_to<decades, months>\n+\t\t&& std::convertible_to<decades, years>);\n+  using ymd = year_month_day;\n+\n+  constexpr ymd ymd1 = 2015y/June/15d;\n+  static_assert(ymd1 + decades{1} == 2025y/June/15d);\n+  static_assert(ymd1 - decades{1} == 2005y/June/15d);\n+  static_assert(decades{1} + ymd1 == 2025y/June/15d);\n+  static_assert((ymd{ymd1} += decades{1}) == 2025y/June/15d);\n+  static_assert((ymd{ymd1} -= decades{1}) == 2005y/June/15d);\n+}"}, {"sha": "dadbd3c38b5220162bf3e21403ed6e48f424eb41", "filename": "libstdc++-v3/testsuite/std/time/year_month_day_last/2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day_last%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day_last%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day_last%2F2.cc?ref=7b743c67f04471a0129390ad2808e61e5538e0d3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template year_month_day_last [time.cal.year_month_day_last]\n+\n+#include <chrono>\n+\n+constexpr void\n+constexpr_year_month_day_last_op_overload_disambiguation()\n+{\n+  using namespace std::chrono;\n+  using decades = duration<long long, std::ratio<31556952 * 10>>;\n+  static_assert(std::convertible_to<decades, months>\n+\t\t&& std::convertible_to<decades, years>);\n+  using ymdl = year_month_day_last;\n+\n+  constexpr ymdl ymdl1 = 2015y/June/last;\n+  static_assert(ymdl1 + decades{1} == 2025y/June/last);\n+  static_assert(ymdl1 - decades{1} == 2005y/June/last);\n+  static_assert(decades{1} + ymdl1 == 2025y/June/last);\n+  static_assert((ymdl{ymdl1} += decades{1}) == 2025y/June/last);\n+  static_assert((ymdl{ymdl1} -= decades{1}) == 2005y/June/last);\n+}"}, {"sha": "6ddfb15b2839472321c67b1a2ac237c3b0ab19d6", "filename": "libstdc++-v3/testsuite/std/time/year_month_weekday/2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday%2F2.cc?ref=7b743c67f04471a0129390ad2808e61e5538e0d3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template year_month_weekday [time.cal.year_month_weekday]\n+\n+#include <chrono>\n+\n+constexpr void\n+constexpr_year_month_weekday_op_overload_disambiguation()\n+{\n+  using namespace std::chrono;\n+  using decades = duration<long long, std::ratio<31556952 * 10>>;\n+  static_assert(std::convertible_to<decades, months>\n+\t\t&& std::convertible_to<decades, years>);\n+  using ymwd = year_month_weekday;\n+\n+  constexpr ymwd ymwd1 = 2015y/June/Monday[3];\n+  static_assert(ymwd1 + decades{1} == 2025y/June/Monday[3]);\n+  static_assert(ymwd1 - decades{1} == 2005y/June/Monday[3]);\n+  static_assert(decades{1} + ymwd1 == 2025y/June/Monday[3]);\n+  static_assert((ymwd{ymwd1} += decades{1}) == 2025y/June/Monday[3]);\n+  static_assert((ymwd{ymwd1} -= decades{1}) == 2005y/June/Monday[3]);\n+}"}, {"sha": "170b5a45ad69860b0c296688f97019852f417f31", "filename": "libstdc++-v3/testsuite/std/time/year_month_weekday_last/2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday_last%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b743c67f04471a0129390ad2808e61e5538e0d3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday_last%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_weekday_last%2F2.cc?ref=7b743c67f04471a0129390ad2808e61e5538e0d3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template year_month_weekday_last [time.cal.year_month_weekday_last]\n+\n+#include <chrono>\n+\n+constexpr void\n+constexpr_year_month_weekday_last_op_overload_disambiguation()\n+{\n+  using namespace std::chrono;\n+  using decades = duration<long long, std::ratio<31556952 * 10>>;\n+  static_assert(std::convertible_to<decades, months>\n+\t\t&& std::convertible_to<decades, years>);\n+  using ymwdl = year_month_weekday_last;\n+\n+  constexpr ymwdl ymwdl1 = 2015y/June/Monday[last];\n+  static_assert(ymwdl1 + decades{1} == 2025y/June/Monday[last]);\n+  static_assert(ymwdl1 - decades{1} == 2005y/June/Monday[last]);\n+  static_assert(decades{1} + ymwdl1 == 2025y/June/Monday[last]);\n+  static_assert((ymwdl{ymwdl1} += decades{1}) == 2025y/June/Monday[last]);\n+  static_assert((ymwdl{ymwdl1} -= decades{1}) == 2005y/June/Monday[last]);\n+}"}]}