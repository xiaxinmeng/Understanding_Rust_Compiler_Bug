{"sha": "e513e9aa53121e628e0403438a5bb3861a50c198", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUxM2U5YWE1MzEyMWU2MjhlMDQwMzQzOGE1YmIzODYxYTUwYzE5OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-30T19:55:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-30T19:55:56Z"}, "message": "libstdc++: Check _GLIBCXX_USE_C99_STDLIB for strtof and strtold\n\nOn broken systems we only have strtod, not strtof and strtold. Just use\nstrtod for all types, even though that will produce incorrect results in\nsome cases.\n\nSimilarly, if _GLIBCXX_USE_C99_MATH is not defined then std::isinf won't\nbe declared. Just refer to it unqualified, which should find the C\nlibrary's isinf macro if that hasn't been #undef'd by <cmath>.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/floating_from_chars.cc (from_chars_impl): Use\n\tisinf unqualified.\n\t[!_GLIBCXX_USE_C99_STDLIB]: Use strtod for float and long\n\tdouble.", "tree": {"sha": "de76aeaa30a94261bf9b439cedc8c6997c3e8e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de76aeaa30a94261bf9b439cedc8c6997c3e8e02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e513e9aa53121e628e0403438a5bb3861a50c198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e513e9aa53121e628e0403438a5bb3861a50c198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e513e9aa53121e628e0403438a5bb3861a50c198", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e513e9aa53121e628e0403438a5bb3861a50c198/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "357beca8bce179315bdf112c0f1df20ff5874f39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357beca8bce179315bdf112c0f1df20ff5874f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357beca8bce179315bdf112c0f1df20ff5874f39"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "26b69a3852150f6f2b07116e48a392fe1c6d5120", "filename": "libstdc++-v3/src/c++17/floating_from_chars.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e513e9aa53121e628e0403438a5bb3861a50c198/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e513e9aa53121e628e0403438a5bb3861a50c198/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc?ref=e513e9aa53121e628e0403438a5bb3861a50c198", "patch": "@@ -300,12 +300,16 @@ namespace\n \terrno = 0;\n \tchar* endptr;\n \tT tmpval;\n+#if _GLIBCXX_USE_C99_STDLIB\n \tif constexpr (is_same_v<T, float>)\n \t  tmpval = std::strtof(str, &endptr);\n-\tif constexpr (is_same_v<T, double>)\n+\telse if constexpr (is_same_v<T, double>)\n \t  tmpval = std::strtod(str, &endptr);\n \telse if constexpr (is_same_v<T, long double>)\n \t  tmpval = std::strtold(str, &endptr);\n+#else\n+\ttmpval = std::strtod(str, &endptr);\n+#endif\n \tconst int conv_errno = std::__exchange(errno, save_errno);\n \n #if _GLIBCXX_USE_C99_FENV_TR1\n@@ -319,7 +323,7 @@ namespace\n \tconst ptrdiff_t n = endptr - str;\n \tif (conv_errno == ERANGE) [[unlikely]]\n \t  {\n-\t    if (std::isinf(tmpval)) // overflow\n+\t    if (isinf(tmpval)) // overflow\n \t      ec = errc::result_out_of_range;\n \t    else // underflow (LWG 3081 wants to set value = tmpval here)\n \t      ec = errc::result_out_of_range;"}]}