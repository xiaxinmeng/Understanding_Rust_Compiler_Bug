{"sha": "460f84ed3d295f5bad049f989c355e6948d4052a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYwZjg0ZWQzZDI5NWY1YmFkMDQ5Zjk4OWMzNTVlNjk0OGQ0MDUyYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-08-05T02:42:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-08-05T02:42:06Z"}, "message": "re PR middle-end/21529 (code size regression (+40%) with -Os from GCC-3.4.3 to 4.1)\n\n        PR 21529\n        * params.def (PARAM_SRA_MAX_STRUCTURE_COUNT): New.\n        * params.h (SRA_MAX_STRUCTURE_COUNT): New.\n        * tree-sra.c (decide_block_copy): Use it.  Disable element copy\n        if we'd have to instantiate too many members.\n\nFrom-SVN: r102761", "tree": {"sha": "1d2fdcd189ab8b9cad25924e41fb4ccae8726a08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d2fdcd189ab8b9cad25924e41fb4ccae8726a08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/460f84ed3d295f5bad049f989c355e6948d4052a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460f84ed3d295f5bad049f989c355e6948d4052a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/460f84ed3d295f5bad049f989c355e6948d4052a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460f84ed3d295f5bad049f989c355e6948d4052a/comments", "author": null, "committer": null, "parents": [{"sha": "ea78022d6890c305342a33050b38f5e531654dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea78022d6890c305342a33050b38f5e531654dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea78022d6890c305342a33050b38f5e531654dbb"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "6662acb6f6f2840f58b4118cd52c8d4087904b3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460f84ed3d295f5bad049f989c355e6948d4052a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460f84ed3d295f5bad049f989c355e6948d4052a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=460f84ed3d295f5bad049f989c355e6948d4052a", "patch": "@@ -1,3 +1,11 @@\n+2005-08-04  Richard Henderson  <rth@redhat.com>\n+\n+\tPR 21529\n+\t* params.def (PARAM_SRA_MAX_STRUCTURE_COUNT): New.\n+\t* params.h (SRA_MAX_STRUCTURE_COUNT): New.\n+\t* tree-sra.c (decide_block_copy): Use it.  Disable element copy\n+\tif we'd have to instantiate too many members.\n+\n 2005-08-04  Richard Henderson  <rth@redhat.com>\n \n \tPR 21291"}, {"sha": "4fc74b5e6afeb237c25a82e82c8e7ea92b99139a", "filename": "gcc/params.def", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460f84ed3d295f5bad049f989c355e6948d4052a/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460f84ed3d295f5bad049f989c355e6948d4052a/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=460f84ed3d295f5bad049f989c355e6948d4052a", "patch": "@@ -54,14 +54,25 @@ DEFPARAM (PARAM_SALIAS_MAX_IMPLICIT_FIELDS,\n    itself.  */\n DEFPARAM (PARAM_SRA_MAX_STRUCTURE_SIZE,\n \t  \"sra-max-structure-size\",\n-\t  \"The maximum structure size (in bytes) at which GCC will do block copies\",\n+\t  \"The maximum structure size (in bytes) for which GCC will \"\n+\t  \"use by-element copies\",\n+\t  0, 0, 0)\n+\n+/* The maximum number of structure fields which the SRA pass will\n+   instantiate to avoid block copies.  The default value, 0, implies\n+   that GCC will select the appropriate value itself.  */\n+DEFPARAM (PARAM_SRA_MAX_STRUCTURE_COUNT,\n+\t  \"sra-max-structure-count\",\n+\t  \"The maximum number of structure fields for which GCC will \"\n+\t  \"use by-element copies\",\n \t  0, 0, 0)\n \n /* The ratio between instantiated fields and the complete structure\n    size.  We say that if the ratio of the number of bytes in\n    instantiated fields to the number of bytes in the complete\n-   structure exceeds this parameter, then block copies are not used.\n-   The default is 75%.  */\n+   structure exceeds this parameter, or if the number of instantiated\n+   fields to the total number of fields exceeds this parameter, then\n+   block copies are not used.  The default is 75%.  */\n DEFPARAM (PARAM_SRA_FIELD_STRUCTURE_RATIO,\n \t  \"sra-field-structure-ratio\",\n \t  \"The threshold ratio between instantiated fields and the total structure size\","}, {"sha": "6c9f7d6cca3724101ae677b663a1a46149d46bd5", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460f84ed3d295f5bad049f989c355e6948d4052a/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460f84ed3d295f5bad049f989c355e6948d4052a/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=460f84ed3d295f5bad049f989c355e6948d4052a", "patch": "@@ -93,6 +93,8 @@ typedef enum compiler_param\n   PARAM_VALUE (PARAM_SALIAS_MAX_IMPLICIT_FIELDS)\n #define SRA_MAX_STRUCTURE_SIZE \\\n   PARAM_VALUE (PARAM_SRA_MAX_STRUCTURE_SIZE)\n+#define SRA_MAX_STRUCTURE_COUNT \\\n+  PARAM_VALUE (PARAM_SRA_MAX_STRUCTURE_COUNT)\n #define SRA_FIELD_STRUCTURE_RATIO \\\n   PARAM_VALUE (PARAM_SRA_FIELD_STRUCTURE_RATIO)\n #define MAX_INLINE_INSNS_SINGLE \\"}, {"sha": "bd3a3c3f1f96222de2edad93b65a4a1de1bbc725", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460f84ed3d295f5bad049f989c355e6948d4052a/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460f84ed3d295f5bad049f989c355e6948d4052a/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=460f84ed3d295f5bad049f989c355e6948d4052a", "patch": "@@ -1325,16 +1325,21 @@ decide_block_copy (struct sra_elt *elt)\n       else if (host_integerp (size_tree, 1))\n \t{\n \t  unsigned HOST_WIDE_INT full_size, inst_size = 0;\n-\t  unsigned int max_size;\n+\t  unsigned int max_size, max_count, inst_count, full_count;\n \n \t  /* If the sra-max-structure-size parameter is 0, then the\n \t     user has not overridden the parameter and we can choose a\n \t     sensible default.  */\n \t  max_size = SRA_MAX_STRUCTURE_SIZE\n \t    ? SRA_MAX_STRUCTURE_SIZE\n \t    : MOVE_RATIO * UNITS_PER_WORD;\n+\t  max_count = SRA_MAX_STRUCTURE_COUNT\n+\t    ? SRA_MAX_STRUCTURE_COUNT\n+\t    : MOVE_RATIO;\n \n \t  full_size = tree_low_cst (size_tree, 1);\n+\t  full_count = count_type_elements (elt->type);\n+\t  inst_count = sum_instantiated_sizes (elt, &inst_size);\n \n \t  /* ??? What to do here.  If there are two fields, and we've only\n \t     instantiated one, then instantiating the other is clearly a win.\n@@ -1344,15 +1349,12 @@ decide_block_copy (struct sra_elt *elt)\n \t  /* If the structure is small, and we've made copies, go ahead\n \t     and instantiate, hoping that the copies will go away.  */\n \t  if (full_size <= max_size\n+\t      && (full_count - inst_count) <= max_count\n \t      && elt->n_copies > elt->n_uses)\n \t    use_block_copy = false;\n-\t  else\n-\t    {\n-\t      sum_instantiated_sizes (elt, &inst_size);\n-\n-\t      if (inst_size * 100 >= full_size * SRA_FIELD_STRUCTURE_RATIO)\n-\t\tuse_block_copy = false;\n-\t    }\n+\t  else if (inst_count * 100 >= full_count * SRA_FIELD_STRUCTURE_RATIO\n+\t\t   && inst_size * 100 >= full_size * SRA_FIELD_STRUCTURE_RATIO)\n+\t    use_block_copy = false;\n \n \t  /* In order to avoid block copy, we have to be able to instantiate\n \t     all elements of the type.  See if this is possible.  */"}]}