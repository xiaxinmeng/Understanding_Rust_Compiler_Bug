{"sha": "2ba25f504d54596978a4efa6531cb313688d1ae0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJhMjVmNTA0ZDU0NTk2OTc4YTRlZmE2NTMxY2IzMTM2ODhkMWFlMA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-02-21T20:28:30Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-02-21T20:28:30Z"}, "message": "90th Cygnus<->FSF quick merge\n\nFrom-SVN: r13673", "tree": {"sha": "7f8754a63a49f51e2887ad1d6e48c15ec046b993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f8754a63a49f51e2887ad1d6e48c15ec046b993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ba25f504d54596978a4efa6531cb313688d1ae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba25f504d54596978a4efa6531cb313688d1ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba25f504d54596978a4efa6531cb313688d1ae0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba25f504d54596978a4efa6531cb313688d1ae0/comments", "author": null, "committer": null, "parents": [{"sha": "9290558260c3d26ae55adb61a7225dde9e61fb79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9290558260c3d26ae55adb61a7225dde9e61fb79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9290558260c3d26ae55adb61a7225dde9e61fb79"}], "stats": {"total": 118, "additions": 93, "deletions": 25}, "files": [{"sha": "78ca95441ef6166d75e9820d07581a42ffbcebbb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2ba25f504d54596978a4efa6531cb313688d1ae0", "patch": "@@ -1,3 +1,33 @@\n+Thu Feb 20 15:12:15 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_over_call): Call mark_used before trying to elide\n+\tthe call.\n+\n+\t* decl.c (implicitly_declare): Don't set DECL_ARTIFICIAL.\n+\n+Wed Feb 19 11:18:53 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* typeck.c (build_modify_expr): Always pedwarn for a cast to\n+\tnon-reference used as an lvalue.\n+\n+Wed Feb 19 10:35:37 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cvt.c (cp_convert_to_pointer): Convert from 0 to a pmf properly.\n+\n+Tue Feb 18 15:40:57 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y (handler): Fix template typo.\n+\n+Sun Feb 16 02:12:28 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* error.c (lang_decl_name): New fn.\n+\t* tree.c (lang_printable_name): Use it.\n+\n+Fri Feb 14 16:57:05 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* g++spec.c: Include config.h so that we can catch bzero #defines\n+\tfrom the config file.\n+\n Tue Feb 11 13:50:48 1997  Mike Stump  <mrs@cygnus.com>\n \n \t* new1.cc: Include a declaration for malloc, to avoid warning, and"}, {"sha": "75e7b5615344f9c5ba7b7633cacf405c9c413171", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2ba25f504d54596978a4efa6531cb313688d1ae0", "patch": "@@ -5092,6 +5092,10 @@ build_over_call (fn, convs, args, flags)\n \n   converted_args = nreverse (converted_args);\n \n+  /* [class.copy]: the copy constructor is implicitly defined even if the\n+     implementation  elided  its  use.  */\n+  mark_used (fn);\n+\n   /* Avoid actually calling copy constructors and copy assignment operators,\n      if possible.  */\n   if (DECL_CONSTRUCTOR_P (fn)\n@@ -5155,8 +5159,6 @@ build_over_call (fn, convs, args, flags)\n       return val;\n     }\n \n-  mark_used (fn);\n-\n   if (DECL_CONTEXT (fn) && IS_SIGNATURE (DECL_CONTEXT (fn)))\n     return build_signature_method_call (fn, converted_args);\n   else if (DECL_VINDEX (fn) && (flags & LOOKUP_NONVIRTUAL) == 0)"}, {"sha": "9bd73abc12712016ed78ab9778966fb447e80f6b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2ba25f504d54596978a4efa6531cb313688d1ae0", "patch": "@@ -2163,6 +2163,7 @@ extern char *parm_as_string\t\t\tPROTO((int, int));\n extern char *op_as_string\t\t\tPROTO((enum tree_code, int));\n extern char *assop_as_string\t\t\tPROTO((enum tree_code, int));\n extern char *cv_as_string\t\t\tPROTO((tree, int));\n+extern char *lang_decl_name\t\t\tPROTO((tree, int));\n \n /* in except.c */\n extern void init_exception_processing\t\tPROTO((void));\n@@ -2410,7 +2411,7 @@ extern tree function_arg_chain\t\t\tPROTO((tree));\n extern int promotes_to_aggr_type\t\tPROTO((tree, enum tree_code));\n extern int is_aggr_type_2\t\t\tPROTO((tree, tree));\n extern void message_2_types\t\t\tPROTO((void (*)(), char *, tree, tree));\n-extern char *lang_printable_name\t\tPROTO((tree));\n+extern char *lang_printable_name\t\tPROTO((tree, int));\n extern tree build_exception_variant\t\tPROTO((tree, tree));\n extern tree copy_to_permanent\t\t\tPROTO((tree));\n extern void print_lang_statistics\t\tPROTO((void));"}, {"sha": "1c40640a45a37ccbc0abd1a03837cd2032dcda8f", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=2ba25f504d54596978a4efa6531cb313688d1ae0", "patch": "@@ -272,6 +272,8 @@ cp_convert_to_pointer (type, expr)\n \n   if (integer_zerop (expr))\n     {\n+      if (TREE_CODE (TREE_TYPE (type)) == METHOD_TYPE)\n+\treturn build_ptrmemfunc (type, expr, 0);\n       expr = build_int_2 (0, 0);\n       TREE_TYPE (expr) = type;\n       return expr;"}, {"sha": "77dce5b4a7351870159dc8eb639eff6bce0ff162", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2ba25f504d54596978a4efa6531cb313688d1ae0", "patch": "@@ -3583,7 +3583,6 @@ implicitly_declare (functionid)\n \n   DECL_EXTERNAL (decl) = 1;\n   TREE_PUBLIC (decl) = 1;\n-  DECL_ARTIFICIAL (decl) = 1;\n \n   /* ANSI standard says implicit declarations are in the innermost block.\n      So we record the decl in the standard fashion.  */"}, {"sha": "8d9ade45fcf35240172970940a6501cb9f36f12c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=2ba25f504d54596978a4efa6531cb313688d1ae0", "patch": "@@ -1486,6 +1486,41 @@ decl_as_string (decl, v)\n   return (char *)obstack_base (&scratch_obstack);\n }\n \n+/* Generate the three forms of printable names for lang_printable_name.  */\n+\n+char *\n+lang_decl_name (decl, v)\n+     tree decl;\n+     int v;\n+{\n+  if (v >= 2)\n+    return decl_as_string (decl, 1);\n+\n+  OB_INIT ();\n+\n+  if (v == 1 && DECL_CONTEXT (decl)\n+      && TREE_CODE_CLASS (TREE_CODE (DECL_CONTEXT (decl))) == 't')\n+    {\n+      tree cname;\n+      if (TREE_CODE (decl) == FUNCTION_DECL)\n+\tcname = DECL_CLASS_CONTEXT (decl);\n+      else\n+\tcname = DECL_CONTEXT (decl);\n+      dump_type (cname, 0);\n+      OB_PUTC2 (':', ':');\n+    }\n+\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    dump_function_name (decl);\n+  else\n+    dump_decl (DECL_NAME (decl), 0);\n+\n+  OB_FINISH ();\n+\n+  return (char *)obstack_base (&scratch_obstack);\n+}\n+  \n+\n char *\n cp_file_of (t)\n      tree t;"}, {"sha": "d41c516f64e72d58adedf117bed06b7e66ed5af9", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=2ba25f504d54596978a4efa6531cb313688d1ae0", "patch": "@@ -1,5 +1,7 @@\n #include <sys/types.h>\n #include <stdio.h>\n+\n+#include \"config.h\"\n #include \"gansidecl.h\"\n \n /* This bit is set if we saw a `-xfoo' language specification.  */"}, {"sha": "ff0a139f3f220d0fa4366ba42320ff996c997d78", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=2ba25f504d54596978a4efa6531cb313688d1ae0", "patch": "@@ -3742,18 +3742,18 @@ handler:\n \t\t{\n \t\t  if (processing_template_decl)\n \t\t    {\n-\t\t      TREE_OPERAND ($<ttype>3, 0) = TREE_CHAIN ($<ttype>3);\n-\t\t      TREE_CHAIN ($<ttype>3) = NULL_TREE;\n-\t\t      last_tree = $<ttype>3;\n+\t\t      TREE_OPERAND ($<ttype>2, 0) = TREE_CHAIN ($<ttype>2);\n+\t\t      TREE_CHAIN ($<ttype>2) = NULL_TREE;\n+\t\t      last_tree = $<ttype>2;\n \t\t    }\n \t\t}\t  \n \t  compstmt\n \t\t{\n \t\t  if (processing_template_decl)\n \t\t    {\n-\t\t      TREE_OPERAND ($<ttype>3, 1) = TREE_CHAIN ($<ttype>3);\n-\t\t      TREE_CHAIN ($<ttype>3) = NULL_TREE;\n-\t\t      last_tree = $<ttype>3;\n+\t\t      TREE_OPERAND ($<ttype>2, 1) = TREE_CHAIN ($<ttype>2);\n+\t\t      TREE_CHAIN ($<ttype>2) = NULL_TREE;\n+\t\t      last_tree = $<ttype>2;\n \t\t    }\n \t\t  else\n \t\t    expand_end_catch_block ();"}, {"sha": "df732f5344070f8c94e42d3d996642713581d006", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2ba25f504d54596978a4efa6531cb313688d1ae0", "patch": "@@ -1385,18 +1385,20 @@ message_2_types (pfn, s, type1, type2)\n #define PRINT_RING_SIZE 4\n \n char *\n-lang_printable_name (decl)\n+lang_printable_name (decl, v)\n      tree decl;\n+     int v;\n {\n   static tree decl_ring[PRINT_RING_SIZE];\n   static char *print_ring[PRINT_RING_SIZE];\n   static int ring_counter;\n   int i;\n \n   /* Only cache functions.  */\n-  if (TREE_CODE (decl) != FUNCTION_DECL\n+  if (v < 2\n+      || TREE_CODE (decl) != FUNCTION_DECL\n       || DECL_LANG_SPECIFIC (decl) == 0)\n-    return decl_as_string (decl, 1);\n+    return lang_decl_name (decl, v);\n \n   /* See if this print name is lying around.  */\n   for (i = 0; i < PRINT_RING_SIZE; i++)\n@@ -1420,16 +1422,8 @@ lang_printable_name (decl)\n   if (print_ring[ring_counter])\n     free (print_ring[ring_counter]);\n \n-  {\n-    int print_ret_type_p\n-      = (!DECL_CONSTRUCTOR_P (decl)\n-\t && !DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (decl)));\n-\n-    char *name = (char *)decl_as_string (decl, print_ret_type_p);\n-    print_ring[ring_counter] = (char *)malloc (strlen (name) + 1);\n-    strcpy (print_ring[ring_counter], name);\n-    decl_ring[ring_counter] = decl;\n-  }\n+  print_ring[ring_counter] = xstrdup (lang_decl_name (decl, v));\n+  decl_ring[ring_counter] = decl;\n   return print_ring[ring_counter];\n }\n \f"}, {"sha": "10fbdef9a0d009db70817a4460f3a9e3808c266b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba25f504d54596978a4efa6531cb313688d1ae0/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2ba25f504d54596978a4efa6531cb313688d1ae0", "patch": "@@ -5787,8 +5787,11 @@ build_modify_expr (lhs, modifycode, rhs)\n       {\n \ttree inner_lhs = TREE_OPERAND (lhs, 0);\n \ttree result;\n-\tif (! lvalue_p (lhs) && pedantic)\n-\t  pedwarn (\"cast to non-reference type used as lvalue\");\n+\n+\t/* WP 5.4.1:  The result is an lvalue if T is a reference type,\n+\t   otherwise the result is an rvalue.   */\n+\tif (! lvalue_p (lhs))\n+\t  pedwarn (\"ANSI C++ forbids cast to non-reference type used as lvalue\");\n \n \tresult = build_modify_expr (inner_lhs, NOP_EXPR,\n \t\t\t\t    convert (TREE_TYPE (inner_lhs),"}]}