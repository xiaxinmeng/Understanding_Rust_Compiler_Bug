{"sha": "1229ece065d2312eab6f29e6a012fbb5c6ad6eae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIyOWVjZTA2NWQyMzEyZWFiNmYyOWU2YTAxMmZiYjVjNmFkNmVhZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-08-13T06:16:03Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-08-13T06:16:03Z"}, "message": "re PR fortran/32962 (b = conjg(transpose(a)) is erroneous if b is an allocatable array)\n\n2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32962\n\t* trans-array.c (gfc_conv_array_transpose): Set the offset\n\tof the destination to zero if the loop is zero based.\n\n2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32962\n\t* gfortran.dg/transpose_1.f90: New test.\n\nFrom-SVN: r127391", "tree": {"sha": "6cda691140c2048799e6ece3e64d23a216db0834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cda691140c2048799e6ece3e64d23a216db0834"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1229ece065d2312eab6f29e6a012fbb5c6ad6eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1229ece065d2312eab6f29e6a012fbb5c6ad6eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1229ece065d2312eab6f29e6a012fbb5c6ad6eae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1229ece065d2312eab6f29e6a012fbb5c6ad6eae/comments", "author": null, "committer": null, "parents": [{"sha": "d9acb717f1469f8fdee0a134cb046b22f5cacd10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9acb717f1469f8fdee0a134cb046b22f5cacd10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9acb717f1469f8fdee0a134cb046b22f5cacd10"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "faa76ef50e9e05b8d462109b557f232a214eb400", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1229ece065d2312eab6f29e6a012fbb5c6ad6eae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1229ece065d2312eab6f29e6a012fbb5c6ad6eae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1229ece065d2312eab6f29e6a012fbb5c6ad6eae", "patch": "@@ -1,3 +1,9 @@\n+2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32962\n+\t* trans-array.c (gfc_conv_array_transpose): Set the offset\n+\tof the destination to zero if the loop is zero based.\n+\n 2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/29600"}, {"sha": "31d177bdbf65af2776ef11ec3d802e11b0759a54", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1229ece065d2312eab6f29e6a012fbb5c6ad6eae/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1229ece065d2312eab6f29e6a012fbb5c6ad6eae/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=1229ece065d2312eab6f29e6a012fbb5c6ad6eae", "patch": "@@ -783,13 +783,18 @@ gfc_conv_array_transpose (gfc_se * se, gfc_expr * expr)\n   dest_info->data = gfc_conv_descriptor_data_get (src);\n   gfc_conv_descriptor_data_set (&se->pre, dest, dest_info->data);\n \n-  /* Copy the offset.  This is not changed by transposition: the top-left\n-     element is still at the same offset as before.  */\n-  dest_info->offset = gfc_conv_descriptor_offset (src);\n+  /* Copy the offset.  This is not changed by transposition; the top-left\n+     element is still at the same offset as before, except where the loop\n+     starts at zero.  */\n+  if (!integer_zerop (loop->from[0]))\n+    dest_info->offset = gfc_conv_descriptor_offset (src);\n+  else\n+    dest_info->offset = gfc_index_zero_node;\n+\n   gfc_add_modify_expr (&se->pre,\n \t\t       gfc_conv_descriptor_offset (dest),\n \t\t       dest_info->offset);\n-\n+\t  \n   if (dest_info->dimen > loop->temp_dim)\n     loop->temp_dim = dest_info->dimen;\n }"}, {"sha": "c5009c4df0cfd23c4a36a06320ccc5bbace0d3df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1229ece065d2312eab6f29e6a012fbb5c6ad6eae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1229ece065d2312eab6f29e6a012fbb5c6ad6eae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1229ece065d2312eab6f29e6a012fbb5c6ad6eae", "patch": "@@ -1,3 +1,8 @@\n+2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32962\n+\t* gfortran.dg/transpose_1.f90: New test.\n+\n 2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/29600"}, {"sha": "9ad784ea7a2b91e530e8457c0acce4baad3a29de", "filename": "gcc/testsuite/gfortran.dg/transpose_1.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1229ece065d2312eab6f29e6a012fbb5c6ad6eae/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1229ece065d2312eab6f29e6a012fbb5c6ad6eae/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_1.f90?ref=1229ece065d2312eab6f29e6a012fbb5c6ad6eae", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! Tests the fix for PR32962, in which the result of TRANSPOSE, when\n+! an actual argument of an elemental intrinsic would receive the\n+! wrong offset.\n+!\n+! Contributed by Wirawan Purwanto <wirawan0@gmail.com>\n+!\n+  real(kind=8), allocatable :: b(:,:)\n+  real(kind=8) :: a(2,2), c(2,2)\n+  i = 2\n+  allocate (b(i,i))\n+  a(1,1) = 2\n+  a(2,1) = 3\n+  a(1,2) = 7\n+  a(2,2) = 11\n+  call foo\n+  call bar\n+  if (any (c .ne. b)) call abort\n+contains\n+  subroutine foo\n+    b = cos(transpose(a))\n+  end subroutine\n+  subroutine bar\n+    c = transpose(a)\n+    c = cos(c)\n+  end subroutine\n+end program"}]}