{"sha": "e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdhMmQ1ZmI3NzJiMzNlZjE2MWIyMDFkNTc5YjZkNThjNWZiMWVkMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-26T06:07:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-26T06:07:52Z"}, "message": "arith.c (gfc_validate_kind): Add may_fail argument; abort if false and we don't validate the kind.\n\n        * arith.c (gfc_validate_kind): Add may_fail argument; abort if\n        false and we don't validate the kind.\n        (gfc_check_integer_range, gfc_check_real_range): Update to match.\n        * check.c (kind_check): Likewise.\n        * decl.c (gfc_match_old_kind_spec, gfc_match_kind_spec): Likewise.\n        (match_char_spec, match_logical_spec): Likewise.\n        * gfortran.h (gfc_validate_kind): Likewise.\n        * options.c (gfc_handle_option): Likewise.\n        * primary.c (match_integer_constant, match_real_constant,\n        match_string_constant, match_logical_constant,\n        match_const_complex_part): Likewise.\n        * simplify.c (get_kind, gfc_simplify_bit_size, gfc_simplify_digits,\n        gfc_simplify_epsilon, gfc_simplify_huge, gfc_simplify_ibclr,\n        gfc_simplify_ibset, gfc_simplify_ishft, gfc_simplify_ishftc,\n        gfc_simplify_maxexponent, gfc_simplify_minexponent,\n        gfc_simplify_nearest, gfc_simplify_not, gfc_simplify_precision,\n        gfc_simplify_radix, gfc_simplify_range, gfc_simplify_rrspacing,\n        gfc_simplify_scale, gfc_simplify_spacing, gfc_simplify_tan,\n        gfc_simplify_tiny): Likewise.\n        * trans-intrinsic.c (gfc_conv_intrinsic_aint, gfc_conv_intrinsic_mod,\n        gfc_conv_intrinsic_minmaxloc, gfc_conv_intrinsic_minmaxval,\n        prepare_arg_info): Likewise.\n\nFrom-SVN: r86608", "tree": {"sha": "888872234485cb430569f6f616fdcf7a056f67a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/888872234485cb430569f6f616fdcf7a056f67a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/comments", "author": null, "committer": null, "parents": [{"sha": "1249691bab4f13ceb72ec2a535a0fc9a37818161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1249691bab4f13ceb72ec2a535a0fc9a37818161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1249691bab4f13ceb72ec2a535a0fc9a37818161"}], "stats": {"total": 175, "additions": 74, "deletions": 101}, "files": [{"sha": "9e727ca7a0b8de63ddd6c041bc88da00d5de8daa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "patch": "@@ -1,3 +1,28 @@\n+2004-08-25  Richard Henderson  <rth@redhat.com>\n+\n+\t* arith.c (gfc_validate_kind): Add may_fail argument; abort if\n+\tfalse and we don't validate the kind.\n+\t(gfc_check_integer_range, gfc_check_real_range): Update to match.\n+\t* check.c (kind_check): Likewise.\n+\t* decl.c (gfc_match_old_kind_spec, gfc_match_kind_spec): Likewise.\n+\t(match_char_spec, match_logical_spec): Likewise.\n+\t* gfortran.h (gfc_validate_kind): Likewise.\n+\t* options.c (gfc_handle_option): Likewise.\n+\t* primary.c (match_integer_constant, match_real_constant,\n+\tmatch_string_constant, match_logical_constant,\n+\tmatch_const_complex_part): Likewise.\n+\t* simplify.c (get_kind, gfc_simplify_bit_size, gfc_simplify_digits,\n+\tgfc_simplify_epsilon, gfc_simplify_huge, gfc_simplify_ibclr,\n+\tgfc_simplify_ibset, gfc_simplify_ishft, gfc_simplify_ishftc,\n+\tgfc_simplify_maxexponent, gfc_simplify_minexponent,\n+\tgfc_simplify_nearest, gfc_simplify_not, gfc_simplify_precision,\n+\tgfc_simplify_radix, gfc_simplify_range, gfc_simplify_rrspacing,\n+\tgfc_simplify_scale, gfc_simplify_spacing, gfc_simplify_tan,\n+\tgfc_simplify_tiny): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_aint, gfc_conv_intrinsic_mod,\n+\tgfc_conv_intrinsic_minmaxloc, gfc_conv_intrinsic_minmaxval,\n+\tprepare_arg_info): Likewise.\n+\n 2004-08-25  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* expr.c (gfc_check_assign): Add comment. Add new warning."}, {"sha": "ec19682df62366d02d2a22b13981affa9a08df58", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "patch": "@@ -526,7 +526,7 @@ validate_character (int kind)\n    type.  */\n \n int\n-gfc_validate_kind (bt type, int kind)\n+gfc_validate_kind (bt type, int kind, bool may_fail)\n {\n   int rc;\n \n@@ -550,6 +550,9 @@ gfc_validate_kind (bt type, int kind)\n       gfc_internal_error (\"gfc_validate_kind(): Got bad type\");\n     }\n \n+  if (!may_fail && rc < 0)\n+    gfc_internal_error (\"gfc_validate_kind(): Got bad kind\");\n+\n   return rc;\n }\n \n@@ -563,10 +566,7 @@ gfc_check_integer_range (mpz_t p, int kind)\n   arith result;\n   int i;\n \n-  i = validate_integer (kind);\n-  if (i == -1)\n-    gfc_internal_error (\"gfc_check_integer_range(): Bad kind\");\n-\n+  i = gfc_validate_kind (BT_INTEGER, kind, false);\n   result = ARITH_OK;\n \n   if (mpz_cmp (p, gfc_integer_kinds[i].min_int) < 0\n@@ -588,9 +588,7 @@ gfc_check_real_range (mpfr_t p, int kind)\n   mpfr_t q;\n   int i;\n \n-  i = validate_real (kind);\n-  if (i == -1)\n-    gfc_internal_error (\"gfc_check_real_range(): Bad kind\");\n+  i = gfc_validate_kind (BT_REAL, kind, false);\n \n   gfc_set_model (p);\n   mpfr_init (q);"}, {"sha": "acf16c5362adf2279fb679686715c50a998fe63d", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "patch": "@@ -117,7 +117,7 @@ kind_check (gfc_expr * k, int n, bt type)\n     }\n \n   if (gfc_extract_int (k, &kind) != NULL\n-      || gfc_validate_kind (type, kind) == -1)\n+      || gfc_validate_kind (type, kind, true) < 0)\n     {\n       gfc_error (\"Invalid kind for %s at %L\", gfc_basic_typename (type),\n \t\t &k->where);\n@@ -133,7 +133,6 @@ kind_check (gfc_expr * k, int n, bt type)\n static try\n double_check (gfc_expr * d, int n)\n {\n-\n   if (type_check (d, n, BT_REAL) == FAILURE)\n     return FAILURE;\n "}, {"sha": "3a61fda8a128031408a3df706f9f49d0cb48ce40", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "patch": "@@ -632,7 +632,7 @@ gfc_match_old_kind_spec (gfc_typespec * ts)\n   if (ts->type == BT_COMPLEX && ts->kind == 16)\n     ts->kind = 8;\n \n-  if (gfc_validate_kind (ts->type, ts->kind) == -1)\n+  if (gfc_validate_kind (ts->type, ts->kind, true) < 0)\n     {\n       gfc_error (\"Old-style kind %d not supported for type %s at %C\",\n \t\t ts->kind, gfc_basic_typename (ts->type));\n@@ -692,7 +692,7 @@ gfc_match_kind_spec (gfc_typespec * ts)\n   gfc_free_expr (e);\n   e = NULL;\n \n-  if (gfc_validate_kind (ts->type, ts->kind) == -1)\n+  if (gfc_validate_kind (ts->type, ts->kind, true) < 0)\n     {\n       gfc_error (\"Kind %d not supported for type %s at %C\", ts->kind,\n \t\t gfc_basic_typename (ts->type));\n@@ -790,7 +790,7 @@ match_char_spec (gfc_typespec * ts)\n \n       gfc_match_small_int (&kind);\n \n-      if (gfc_validate_kind (BT_CHARACTER, kind) == -1)\n+      if (gfc_validate_kind (BT_CHARACTER, kind, true) < 0)\n \t{\n \t  gfc_error (\"Kind %d is not a CHARACTER kind at %C\", kind);\n \t  return MATCH_YES;\n@@ -833,7 +833,7 @@ match_char_spec (gfc_typespec * ts)\n   m = MATCH_ERROR;\n \n done:\n-  if (m == MATCH_YES && gfc_validate_kind (BT_CHARACTER, kind) == -1)\n+  if (m == MATCH_YES && gfc_validate_kind (BT_CHARACTER, kind, true) < 0)\n     {\n       gfc_error (\"Kind %d is not a CHARACTER kind at %C\", kind);\n       m = MATCH_ERROR;"}, {"sha": "d9da8057baecd1fd3f19eaf70149791788cb3f61", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "patch": "@@ -1511,7 +1511,7 @@ int gfc_default_double_kind (void);\n int gfc_default_character_kind (void);\n int gfc_default_logical_kind (void);\n int gfc_default_complex_kind (void);\n-int gfc_validate_kind (bt, int);\n+int gfc_validate_kind (bt, int, bool);\n extern int gfc_index_integer_kind;\n \n /* symbol.c */"}, {"sha": "83ca9c75548a10b5426c6985b26608430b53322f", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "patch": "@@ -282,7 +282,7 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_qkind_:\n-      if (gfc_validate_kind (BT_REAL, value) < 0)\n+      if (gfc_validate_kind (BT_REAL, value, true) < 0)\n \tgfc_fatal_error (\"Argument to -fqkind isn't a valid real kind\");\n       gfc_option.q_kind = value;\n       break;"}, {"sha": "7cc99661d2231cf35d3f56c86faff43c60c45177", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "patch": "@@ -208,7 +208,7 @@ match_integer_constant (gfc_expr ** result, int signflag)\n   if (kind == -1)\n     return MATCH_ERROR;\n \n-  if (gfc_validate_kind (BT_INTEGER, kind) == -1)\n+  if (gfc_validate_kind (BT_INTEGER, kind, true) < 0)\n     {\n       gfc_error (\"Integer kind %d at %C not available\", kind);\n       return MATCH_ERROR;\n@@ -477,7 +477,7 @@ match_real_constant (gfc_expr ** result, int signflag)\n       if (kind == -2)\n \tkind = gfc_default_real_kind ();\n \n-      if (gfc_validate_kind (BT_REAL, kind) == -1)\n+      if (gfc_validate_kind (BT_REAL, kind, true) < 0)\n \t{\n \t  gfc_error (\"Invalid real kind %d at %C\", kind);\n \t  goto cleanup;\n@@ -818,7 +818,7 @@ match_string_constant (gfc_expr ** result)\n \t}\n     }\n \n-  if (gfc_validate_kind (BT_CHARACTER, kind) == -1)\n+  if (gfc_validate_kind (BT_CHARACTER, kind, true) < 0)\n     {\n       gfc_error (\"Invalid kind %d for CHARACTER constant at %C\", kind);\n       return MATCH_ERROR;\n@@ -907,7 +907,7 @@ match_logical_constant (gfc_expr ** result)\n   if (kind == -2)\n     kind = gfc_default_logical_kind ();\n \n-  if (gfc_validate_kind (BT_LOGICAL, kind) == -1)\n+  if (gfc_validate_kind (BT_LOGICAL, kind, true) < 0)\n     gfc_error (\"Bad kind for logical constant at %C\");\n \n   e = gfc_get_expr ();\n@@ -1120,7 +1120,7 @@ match_const_complex_part (gfc_expr ** result)\n \t    kind = gfc_default_real_kind ();\n \t}\n \n-      if (gfc_validate_kind (BT_REAL, kind) == -1)\n+      if (gfc_validate_kind (BT_REAL, kind, true) < 0)\n \t{\n \t  gfc_error (\"Invalid real kind %d at %C\", kind);\n \t  return MATCH_ERROR;"}, {"sha": "e2a4f07c39b1a84e59db481c23e238dfcb0fecea", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 26, "deletions": 75, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "patch": "@@ -128,7 +128,7 @@ get_kind (bt type, gfc_expr * k, const char *name, int default_kind)\n     }\n \n   if (gfc_extract_int (k, &kind) != NULL\n-      || gfc_validate_kind (type, kind) == -1)\n+      || gfc_validate_kind (type, kind, true) < 0)\n     {\n \n       gfc_error (\"Invalid KIND parameter of %s at %L\", name, &k->where);\n@@ -547,10 +547,7 @@ gfc_simplify_bit_size (gfc_expr * e)\n   gfc_expr *result;\n   int i;\n \n-  i = gfc_validate_kind (e->ts.type, e->ts.kind);\n-  if (i == -1)\n-    gfc_internal_error (\"In gfc_simplify_bit_size(): Bad kind\");\n-\n+  i = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n   result = gfc_constant_result (BT_INTEGER, e->ts.kind, &e->where);\n   mpz_set_ui (result->value.integer, gfc_integer_kinds[i].bit_size);\n \n@@ -818,10 +815,7 @@ gfc_simplify_digits (gfc_expr * x)\n {\n   int i, digits;\n \n-  i = gfc_validate_kind (x->ts.type, x->ts.kind);\n-  if (i == -1)\n-    goto bad;\n-\n+  i = gfc_validate_kind (x->ts.type, x->ts.kind, false);\n   switch (x->ts.type)\n     {\n     case BT_INTEGER:\n@@ -834,8 +828,7 @@ gfc_simplify_digits (gfc_expr * x)\n       break;\n \n     default:\n-    bad:\n-      gfc_internal_error (\"gfc_simplify_digits(): Bad type\");\n+      abort ();\n     }\n \n   return gfc_int_expr (digits);\n@@ -907,9 +900,7 @@ gfc_simplify_epsilon (gfc_expr * e)\n   gfc_expr *result;\n   int i;\n \n-  i = gfc_validate_kind (e->ts.type, e->ts.kind);\n-  if (i == -1)\n-    gfc_internal_error (\"gfc_simplify_epsilon(): Bad kind\");\n+  i = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n \n   result = gfc_constant_result (BT_REAL, e->ts.kind, &e->where);\n \n@@ -1109,9 +1100,7 @@ gfc_simplify_huge (gfc_expr * e)\n   gfc_expr *result;\n   int i;\n \n-  i = gfc_validate_kind (e->ts.type, e->ts.kind);\n-  if (i == -1)\n-    goto bad_type;\n+  i = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n \n   result = gfc_constant_result (e->ts.type, e->ts.kind, &e->where);\n \n@@ -1125,9 +1114,8 @@ gfc_simplify_huge (gfc_expr * e)\n       mpfr_set (result->value.real, gfc_real_kinds[i].huge, GFC_RND_MODE);\n       break;\n \n-    bad_type:\n     default:\n-      gfc_internal_error (\"gfc_simplify_huge(): Bad type\");\n+      abort ();\n     }\n \n   return result;\n@@ -1189,9 +1177,7 @@ gfc_simplify_ibclr (gfc_expr * x, gfc_expr * y)\n       return &gfc_bad_expr;\n     }\n \n-  k = gfc_validate_kind (x->ts.type, x->ts.kind);\n-  if (k == -1)\n-    gfc_internal_error (\"gfc_simplify_ibclr(): Bad kind\");\n+  k = gfc_validate_kind (x->ts.type, x->ts.kind, false);\n \n   if (pos > gfc_integer_kinds[k].bit_size)\n     {\n@@ -1232,9 +1218,7 @@ gfc_simplify_ibits (gfc_expr * x, gfc_expr * y, gfc_expr * z)\n       return &gfc_bad_expr;\n     }\n \n-  k = gfc_validate_kind (BT_INTEGER, x->ts.kind);\n-  if (k == -1)\n-    gfc_internal_error (\"gfc_simplify_ibits(): Bad kind\");\n+  k = gfc_validate_kind (BT_INTEGER, x->ts.kind, false);\n \n   bitsize = gfc_integer_kinds[k].bit_size;\n \n@@ -1293,9 +1277,7 @@ gfc_simplify_ibset (gfc_expr * x, gfc_expr * y)\n       return &gfc_bad_expr;\n     }\n \n-  k = gfc_validate_kind (x->ts.type, x->ts.kind);\n-  if (k == -1)\n-    gfc_internal_error (\"gfc_simplify_ibset(): Bad kind\");\n+  k = gfc_validate_kind (x->ts.type, x->ts.kind, false);\n \n   if (pos > gfc_integer_kinds[k].bit_size)\n     {\n@@ -1620,9 +1602,7 @@ gfc_simplify_ishft (gfc_expr * e, gfc_expr * s)\n       return &gfc_bad_expr;\n     }\n \n-  k = gfc_validate_kind (BT_INTEGER, e->ts.kind);\n-  if (k == -1)\n-    gfc_internal_error (\"gfc_simplify_ishft(): Bad kind\");\n+  k = gfc_validate_kind (BT_INTEGER, e->ts.kind, false);\n \n   isize = gfc_integer_kinds[k].bit_size;\n \n@@ -1676,9 +1656,7 @@ gfc_simplify_ishftc (gfc_expr * e, gfc_expr * s, gfc_expr * sz)\n       return &gfc_bad_expr;\n     }\n \n-  k = gfc_validate_kind (e->ts.type, e->ts.kind);\n-  if (k == -1)\n-    gfc_internal_error (\"gfc_simplify_ishftc(): Bad kind\");\n+  k = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n \n   if (sz != NULL)\n     {\n@@ -2137,9 +2115,7 @@ gfc_simplify_maxexponent (gfc_expr * x)\n   gfc_expr *result;\n   int i;\n \n-  i = gfc_validate_kind (BT_REAL, x->ts.kind);\n-  if (i == -1)\n-    gfc_internal_error (\"gfc_simplify_maxexponent(): Bad kind\");\n+  i = gfc_validate_kind (BT_REAL, x->ts.kind, false);\n \n   result = gfc_int_expr (gfc_real_kinds[i].max_exponent);\n   result->where = x->where;\n@@ -2154,9 +2130,7 @@ gfc_simplify_minexponent (gfc_expr * x)\n   gfc_expr *result;\n   int i;\n \n-  i = gfc_validate_kind (BT_REAL, x->ts.kind);\n-  if (i == -1)\n-    gfc_internal_error (\"gfc_simplify_minexponent(): Bad kind\");\n+  i = gfc_validate_kind (BT_REAL, x->ts.kind, false);\n \n   result = gfc_int_expr (gfc_real_kinds[i].min_exponent);\n   result->where = x->where;\n@@ -2306,9 +2280,7 @@ gfc_simplify_nearest (gfc_expr * x, gfc_expr * s)\n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  k = gfc_validate_kind (x->ts.type, x->ts.kind);\n-  if (k == -1)\n-    gfc_internal_error (\"gfc_simplify_precision(): Bad kind\");\n+  k = gfc_validate_kind (x->ts.type, x->ts.kind, false);\n \n   result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n \n@@ -2443,9 +2415,7 @@ gfc_simplify_not (gfc_expr * e)\n   /* Because of how GMP handles numbers, the result must be ANDed with\n      the max_int mask.  For radices <> 2, this will require change.  */\n \n-  i = gfc_validate_kind (BT_INTEGER, e->ts.kind);\n-  if (i == -1)\n-    gfc_internal_error (\"gfc_simplify_not(): Bad kind\");\n+  i = gfc_validate_kind (BT_INTEGER, e->ts.kind, false);\n \n   mpz_and (result->value.integer, result->value.integer,\n \t   gfc_integer_kinds[i].max_int);\n@@ -2480,9 +2450,7 @@ gfc_simplify_precision (gfc_expr * e)\n   gfc_expr *result;\n   int i;\n \n-  i = gfc_validate_kind (e->ts.type, e->ts.kind);\n-  if (i == -1)\n-    gfc_internal_error (\"gfc_simplify_precision(): Bad kind\");\n+  i = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n \n   result = gfc_int_expr (gfc_real_kinds[i].precision);\n   result->where = e->where;\n@@ -2497,10 +2465,7 @@ gfc_simplify_radix (gfc_expr * e)\n   gfc_expr *result;\n   int i;\n \n-  i = gfc_validate_kind (e->ts.type, e->ts.kind);\n-  if (i == -1)\n-    goto bad;\n-\n+  i = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n   switch (e->ts.type)\n     {\n     case BT_INTEGER:\n@@ -2512,8 +2477,7 @@ gfc_simplify_radix (gfc_expr * e)\n       break;\n \n     default:\n-    bad:\n-      gfc_internal_error (\"gfc_simplify_radix(): Bad type\");\n+      abort ();\n     }\n \n   result = gfc_int_expr (i);\n@@ -2530,9 +2494,7 @@ gfc_simplify_range (gfc_expr * e)\n   int i;\n   long j;\n \n-  i = gfc_validate_kind (e->ts.type, e->ts.kind);\n-  if (i == -1)\n-    goto bad_type;\n+  i = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n \n   switch (e->ts.type)\n     {\n@@ -2545,9 +2507,8 @@ gfc_simplify_range (gfc_expr * e)\n       j = gfc_real_kinds[i].range;\n       break;\n \n-    bad_type:\n     default:\n-      gfc_internal_error (\"gfc_simplify_range(): Bad kind\");\n+      abort ();\n     }\n \n   result = gfc_int_expr (j);\n@@ -2886,9 +2847,7 @@ gfc_simplify_rrspacing (gfc_expr * x)\n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  i = gfc_validate_kind (x->ts.type, x->ts.kind);\n-  if (i == -1)\n-    gfc_internal_error (\"gfc_simplify_rrspacing(): Bad kind\");\n+  i = gfc_validate_kind (x->ts.type, x->ts.kind, false);\n \n   result = gfc_constant_result (BT_REAL, x->ts.kind, &x->where);\n \n@@ -2959,9 +2918,7 @@ gfc_simplify_scale (gfc_expr * x, gfc_expr * i)\n       return result;\n     }\n \n-  k = gfc_validate_kind (BT_REAL, x->ts.kind);\n-  if (k == -1)\n-    gfc_internal_error (\"gfc_simplify_scale(): Bad kind\");\n+  k = gfc_validate_kind (BT_REAL, x->ts.kind, false);\n \n   exp_range = gfc_real_kinds[k].max_exponent - gfc_real_kinds[k].min_exponent;\n \n@@ -3410,9 +3367,7 @@ gfc_simplify_spacing (gfc_expr * x)\n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  i = gfc_validate_kind (x->ts.type, x->ts.kind);\n-  if (i == -1)\n-    gfc_internal_error (\"gfc_simplify_spacing(): Bad kind\");\n+  i = gfc_validate_kind (x->ts.type, x->ts.kind, false);\n \n   p = gfc_real_kinds[i].digits;\n \n@@ -3599,9 +3554,7 @@ gfc_simplify_tan (gfc_expr * x)\n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  i = gfc_validate_kind (BT_REAL, x->ts.kind);\n-  if (i == -1)\n-    gfc_internal_error (\"gfc_simplify_tan(): Bad kind\");\n+  i = gfc_validate_kind (BT_REAL, x->ts.kind, false);\n \n   result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n \n@@ -3634,9 +3587,7 @@ gfc_simplify_tiny (gfc_expr * e)\n   gfc_expr *result;\n   int i;\n \n-  i = gfc_validate_kind (BT_REAL, e->ts.kind);\n-  if (i == -1)\n-    gfc_internal_error (\"gfc_simplify_error(): Bad kind\");\n+  i = gfc_validate_kind (BT_REAL, e->ts.kind, false);\n \n   result = gfc_constant_result (BT_REAL, e->ts.kind, &e->where);\n   mpfr_set (result->value.real, gfc_real_kinds[i].tiny, GFC_RND_MODE);"}, {"sha": "396a3da6bb830bacac9c797422c4bcaea49e148f", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=e7a2d5fb772b33ef161b201d579b6d58c5fb1ed1", "patch": "@@ -365,7 +365,7 @@ gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, int op)\n   /* Test if the value is too large to handle sensibly.  */\n   gfc_set_model_kind (kind);\n   mpfr_init (huge);\n-  n = gfc_validate_kind (BT_INTEGER, kind);\n+  n = gfc_validate_kind (BT_INTEGER, kind, false);\n   mpfr_set_z (huge, gfc_integer_kinds[n].huge, GFC_RND_MODE);\n   tmp = gfc_conv_mpfr_to_tree (huge, kind);\n   cond = build2 (LT_EXPR, boolean_type_node, arg, tmp);\n@@ -804,7 +804,7 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n       /* Test if the value is too large to handle sensibly.  */\n       gfc_set_model_kind (expr->ts.kind);\n       mpfr_init (huge);\n-      n = gfc_validate_kind (BT_INTEGER, expr->ts.kind);\n+      n = gfc_validate_kind (BT_INTEGER, expr->ts.kind, false);\n       mpfr_set_z (huge, gfc_integer_kinds[n].huge, GFC_RND_MODE);\n       test = gfc_conv_mpfr_to_tree (huge, expr->ts.kind);\n       test2 = build2 (LT_EXPR, boolean_type_node, tmp, test);\n@@ -1424,7 +1424,7 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, int op)\n     maskss = NULL;\n \n   limit = gfc_create_var (gfc_typenode_for_spec (&arrayexpr->ts), \"limit\");\n-  n = gfc_validate_kind (arrayexpr->ts.type, arrayexpr->ts.kind);\n+  n = gfc_validate_kind (arrayexpr->ts.type, arrayexpr->ts.kind, false);\n   switch (arrayexpr->ts.type)\n     {\n     case BT_REAL:\n@@ -1565,7 +1565,7 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, int op)\n   type = gfc_typenode_for_spec (&expr->ts);\n   /* Initialize the result.  */\n   limit = gfc_create_var (type, \"limit\");\n-  n = gfc_validate_kind (expr->ts.type, expr->ts.kind);\n+  n = gfc_validate_kind (expr->ts.type, expr->ts.kind, false);\n   switch (expr->ts.type)\n     {\n     case BT_REAL:\n@@ -2327,7 +2327,7 @@ void prepare_arg_info (gfc_se * se, gfc_expr * expr,\n    rcs->arg = arg;\n \n    /* Caculate the numbers of bits of exponent, fraction and word  */\n-   n = gfc_validate_kind (a1->ts.type, a1->ts.kind);\n+   n = gfc_validate_kind (a1->ts.type, a1->ts.kind, false);\n    tmp = build_int_cst (NULL_TREE, gfc_real_kinds[n].digits - 1);\n    rcs->fdigits = convert (masktype, tmp);\n    wbits = build_int_cst (NULL_TREE, TYPE_PRECISION (rcs->type) - 1);"}]}