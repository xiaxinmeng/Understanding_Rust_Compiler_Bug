{"sha": "92db5dee00b7dfdba5f8a66c67e5ce64843b5897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJkYjVkZWUwMGI3ZGZkYmE1ZjhhNjZjNjdlNWNlNjQ4NDNiNTg5Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:20:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:20:48Z"}, "message": "[multiple changes]\n\n2011-08-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-exexpr-gcc.adb (Unwind_Action) Rewrite as an integer with constants.\n\t(GNAT_GCC_Exception): Remove N_Cleanups_To_Trigger component.\n\t(Adjust_N_CLeanups_For): Remove.\n\t(CleanupUnwind_Handler): Call Unhandled_Exception_Terminate when end of\n\tstack is reached.\n\t(Propgate_Exception): Adjust.\n\t* raise-gcc.c: Add a few static/const.\n\t(Adjust_N_Cleanups_For): Remove declaration.\n\t(PERSONALITY_FUNCTION): Remove code dealing with N_Cleanups_To_Trigger.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb: Use type of function return when rewriting as object\n\tdeclaration.\n\nFrom-SVN: r178188", "tree": {"sha": "21a115072de0d1c3445d45d632a0dc0b6e84e9f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21a115072de0d1c3445d45d632a0dc0b6e84e9f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92db5dee00b7dfdba5f8a66c67e5ce64843b5897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92db5dee00b7dfdba5f8a66c67e5ce64843b5897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92db5dee00b7dfdba5f8a66c67e5ce64843b5897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92db5dee00b7dfdba5f8a66c67e5ce64843b5897/comments", "author": null, "committer": null, "parents": [{"sha": "1378bf105ea73f1d4fab574dc8ed6d1479433296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1378bf105ea73f1d4fab574dc8ed6d1479433296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1378bf105ea73f1d4fab574dc8ed6d1479433296"}], "stats": {"total": 123, "additions": 50, "deletions": 73}, "files": [{"sha": "0440dda905b4e70ab11ea3d87e9e719fa6fca57a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92db5dee00b7dfdba5f8a66c67e5ce64843b5897/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92db5dee00b7dfdba5f8a66c67e5ce64843b5897/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=92db5dee00b7dfdba5f8a66c67e5ce64843b5897", "patch": "@@ -1,3 +1,20 @@\n+2011-08-29  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-exexpr-gcc.adb (Unwind_Action) Rewrite as an integer with constants.\n+\t(GNAT_GCC_Exception): Remove N_Cleanups_To_Trigger component.\n+\t(Adjust_N_CLeanups_For): Remove.\n+\t(CleanupUnwind_Handler): Call Unhandled_Exception_Terminate when end of\n+\tstack is reached.\n+\t(Propgate_Exception): Adjust.\n+\t* raise-gcc.c: Add a few static/const.\n+\t(Adjust_N_Cleanups_For): Remove declaration.\n+\t(PERSONALITY_FUNCTION): Remove code dealing with N_Cleanups_To_Trigger.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb: Use type of function return when rewriting as object\n+\tdeclaration.\n+\n 2011-08-29  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_type.adb: Minor reformatting."}, {"sha": "00dab03826fa9beb55e7bb2680fdfbe2561753c5", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 24, "deletions": 53, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92db5dee00b7dfdba5f8a66c67e5ce64843b5897/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92db5dee00b7dfdba5f8a66c67e5ce64843b5897/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=92db5dee00b7dfdba5f8a66c67e5ce64843b5897", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -76,20 +76,21 @@ package body Exception_Propagation is\n \n    --  Phase identifiers\n \n-   type Unwind_Action is\n+   type Unwind_Action is new Integer;\n+   pragma Convention (C, Unwind_Action);\n+\n+   UA_SEARCH_PHASE  : constant Unwind_Action := 1;\n+   UA_CLEANUP_PHASE : constant Unwind_Action := 2;\n+   UA_HANDLER_FRAME : constant Unwind_Action := 4;\n+   UA_FORCE_UNWIND  : constant Unwind_Action := 8;\n+   UA_END_OF_STACK  : constant Unwind_Action := 16;  --  GCC extension ?\n+\n+   pragma Unreferenced\n      (UA_SEARCH_PHASE,\n       UA_CLEANUP_PHASE,\n       UA_HANDLER_FRAME,\n       UA_FORCE_UNWIND);\n \n-   for Unwind_Action use\n-      (UA_SEARCH_PHASE  => 1,\n-       UA_CLEANUP_PHASE => 2,\n-       UA_HANDLER_FRAME => 4,\n-       UA_FORCE_UNWIND  => 8);\n-\n-   pragma Convention (C, Unwind_Action);\n-\n    --  Mandatory common header for any exception object handled by the\n    --  GCC unwinding runtime.\n \n@@ -132,13 +133,6 @@ package body Exception_Propagation is\n       --  and then used by the personality routine to determine if the context\n       --  it examines contains a handler for the exception being propagated.\n \n-      N_Cleanups_To_Trigger : Integer;\n-      --  Number of cleanup only frames encountered in SEARCH phase.  This is\n-      --  initialized to 0 by Propagate_Exception and maintained by the\n-      --  personality routine to control a forced unwinding phase triggering\n-      --  all the cleanups before calling Unhandled_Exception_Terminate when\n-      --  an exception is not handled.\n-\n       Next_Exception : EOA;\n       --  Used to create a linked list of exception occurrences\n    end record;\n@@ -264,11 +258,6 @@ package body Exception_Propagation is\n      return Exception_Id;\n    pragma Export (C, EID_For, \"__gnat_eid_for\");\n \n-   procedure Adjust_N_Cleanups_For\n-     (GNAT_Exception : GNAT_GCC_Exception_Access;\n-      Adjustment     : Integer);\n-   pragma Export (C, Adjust_N_Cleanups_For, \"__gnat_adjust_n_cleanups_for\");\n-\n    ---------------------------------------------------------------------------\n    -- Objects to materialize \"others\" and \"all others\" in the GCC EH tables --\n    ---------------------------------------------------------------------------\n@@ -357,19 +346,18 @@ package body Exception_Propagation is\n       UW_Argument  : System.Address) return Unwind_Reason_Code\n    is\n       pragma Unreferenced\n-        (UW_Version, UW_Phases, UW_Eclass, UW_Context, UW_Argument);\n+        (UW_Version, UW_Eclass, UW_Exception, UW_Context, UW_Argument);\n \n    begin\n-      --  Terminate as soon as we know there is nothing more to run. The\n-      --  count is maintained by the personality routine.\n+      --  Terminate when the end of the stack is reached\n \n-      if UW_Exception.N_Cleanups_To_Trigger = 0 then\n+      if UW_Phases >= UA_END_OF_STACK then\n          Unhandled_Exception_Terminate;\n       end if;\n \n       --  We know there is at least one cleanup further up. Return so that it\n       --  is searched and entered, after which Unwind_Resume will be called\n-      --  and this hook will gain control (with an updated count) again.\n+      --  and this hook will gain control again.\n \n       return URC_NO_REASON;\n    end CleanupUnwind_Handler;\n@@ -553,7 +541,6 @@ package body Exception_Propagation is\n       Clear_Setup_And_Not_Propagated (Excep);\n \n       GCC_Exception.Id := Excep.Id;\n-      GCC_Exception.N_Cleanups_To_Trigger := 0;\n \n       --  Compute the backtrace for this occurrence if the corresponding\n       --  binder option has been set. Call_Chain takes care of the reraise\n@@ -581,8 +568,7 @@ package body Exception_Propagation is\n       --  Perform a standard raise first. If a regular handler is found, it\n       --  will be entered after all the intermediate cleanups have run. If\n       --  there is no regular handler, control will get back to after the\n-      --  call, with N_Cleanups_To_Trigger set to the number of frames with\n-      --  cleanups found on the way up, and none of these already run.\n+      --  call.\n \n       Unwind_RaiseException (GCC_Exception);\n \n@@ -593,36 +579,21 @@ package body Exception_Propagation is\n \n       Notify_Unhandled_Exception;\n \n-      --  Now, if cleanups have been found, run a forced unwind to trigger\n-      --  them. Control should not resume there, as the unwinding hook calls\n-      --  Unhandled_Exception_Terminate as soon as the last cleanup has been\n-      --  triggered.\n+      --  Now, un a forced unwind to trigger cleanups. Control should not\n+      --  resume there, if there are cleanups and in any cases as the\n+      --  unwinding hook calls Unhandled_Exception_Terminate when end of stack\n+      --  is reached.\n \n-      if GCC_Exception.N_Cleanups_To_Trigger /= 0 then\n-         Unwind_ForcedUnwind (GCC_Exception,\n-                              CleanupUnwind_Handler'Address,\n-                              System.Null_Address);\n-      end if;\n+      Unwind_ForcedUnwind (GCC_Exception,\n+                           CleanupUnwind_Handler'Address,\n+                           System.Null_Address);\n \n-      --  We get here when there is no handler or cleanup to be run at all.\n+      --  We get here in case of error.\n       --  The debugger has been notified before the second step above.\n \n       Unhandled_Exception_Terminate;\n    end Propagate_Exception;\n \n-   ---------------------------\n-   -- Adjust_N_Cleanups_For --\n-   ---------------------------\n-\n-   procedure Adjust_N_Cleanups_For\n-     (GNAT_Exception : GNAT_GCC_Exception_Access;\n-      Adjustment     : Integer)\n-   is\n-   begin\n-      GNAT_Exception.N_Cleanups_To_Trigger :=\n-        GNAT_Exception.N_Cleanups_To_Trigger + Adjustment;\n-   end Adjust_N_Cleanups_For;\n-\n    -------------\n    -- EID_For --\n    -------------"}, {"sha": "fb0ec81fcb1eaefbbd56f72b9d1bbf9a90e9e478", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92db5dee00b7dfdba5f8a66c67e5ce64843b5897/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92db5dee00b7dfdba5f8a66c67e5ce64843b5897/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=92db5dee00b7dfdba5f8a66c67e5ce64843b5897", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *             Copyright (C) 1992-2010, Free Software Foundation, Inc.      *\n+ *             Copyright (C) 1992-2011, Free Software Foundation, Inc.      *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -128,7 +128,7 @@ typedef struct\n   char * description;\n } phase_descriptor;\n \n-static phase_descriptor phase_descriptors[]\n+static const phase_descriptor phase_descriptors[]\n   = {{ _UA_SEARCH_PHASE,  \"SEARCH_PHASE\" },\n      { _UA_CLEANUP_PHASE, \"CLEANUP_PHASE\" },\n      { _UA_HANDLER_FRAME, \"HANDLER_FRAME\" },\n@@ -622,7 +622,7 @@ typedef enum\n } action_kind;\n \n /* filter value for cleanup actions.  */\n-const int cleanup_filter = 0;\n+static const int cleanup_filter = 0;\n \n typedef struct\n {\n@@ -842,15 +842,13 @@ get_call_site_action_for (_Unwind_Context *uw_context,\n #define Language_For          __gnat_language_for\n #define Import_Code_For       __gnat_import_code_for\n #define EID_For               __gnat_eid_for\n-#define Adjust_N_Cleanups_For __gnat_adjust_n_cleanups_for\n \n extern bool Is_Handled_By_Others (_Unwind_Ptr eid);\n extern char Language_For (_Unwind_Ptr eid);\n \n extern Exception_Code Import_Code_For (_Unwind_Ptr eid);\n \n extern Exception_Id EID_For (_GNAT_Exception * e);\n-extern void Adjust_N_Cleanups_For (_GNAT_Exception * e, int n);\n \n static int\n is_handled_by (_Unwind_Ptr choice, _GNAT_Exception * propagated_exception)\n@@ -1142,7 +1140,6 @@ PERSONALITY_FUNCTION (version_arg_t version_arg,\n     {\n       if (action.kind == cleanup)\n \t{\n-\t  Adjust_N_Cleanups_For (gnat_exception, 1);\n \t  return _URC_CONTINUE_UNWIND;\n \t}\n       else\n@@ -1160,14 +1157,6 @@ PERSONALITY_FUNCTION (version_arg_t version_arg,\n      occurrence (we are in a FORCED_UNWIND phase in this case). Install the\n      context to get there.  */\n \n-  /* If we are going to install a cleanup context, decrement the cleanup\n-     count.  This is required in a FORCED_UNWINDing phase (for an unhandled\n-     exception), as this is used from the forced unwinding handler in\n-     Ada.Exceptions.Exception_Propagation to decide whether unwinding should\n-     proceed further or Unhandled_Exception_Terminate should be called.  */\n-  if (action.kind == cleanup)\n-    Adjust_N_Cleanups_For (gnat_exception, -1);\n-\n   setup_to_install\n     (uw_context, uw_exception, action.landing_pad, action.ttype_filter);\n "}, {"sha": "0b9ab13b4bdb79b93248ccb3f0af8bef2ded61c6", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92db5dee00b7dfdba5f8a66c67e5ce64843b5897/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92db5dee00b7dfdba5f8a66c67e5ce64843b5897/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=92db5dee00b7dfdba5f8a66c67e5ce64843b5897", "patch": "@@ -814,7 +814,7 @@ package body Sem_Ch8 is\n \n          if Nkind (Nam) = N_Function_Call\n            and then Is_Immutably_Limited_Type (Etype (Nam))\n-           and then not Is_Constrained (T)\n+           and then not Is_Constrained (Etype (Nam))\n            and then Comes_From_Source (N)\n          then\n             Set_Etype (Id, T);\n@@ -823,7 +823,7 @@ package body Sem_Ch8 is\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Id,\n                 Constant_Present    => True,\n-                Object_Definition   => New_Occurrence_Of (T, Loc),\n+                Object_Definition   => New_Occurrence_Of (Etype (Nam), Loc),\n                 Expression          => Relocate_Node (Nam)));\n             return;\n          end if;\n@@ -851,9 +851,9 @@ package body Sem_Ch8 is\n \n          --  Ada 2005 AI05-105: if the declaration has an anonymous access\n          --  type, the renamed object must also have an anonymous type, and\n-         --  this is a name resolution rule. This was implicit in the last\n-         --  part of the first sentence in 8.5.1.(3/2), and is made explicit\n-         --  by this recent AI.\n+         --  this is a name resolution rule. This was implicit in the last part\n+         --  of the first sentence in 8.5.1(3/2), and is made explicit by this\n+         --  recent AI.\n \n          if not Is_Overloaded (Nam) then\n             if Ekind (Etype (Nam)) /= Ekind (T) then\n@@ -994,7 +994,7 @@ package body Sem_Ch8 is\n \n       T2 := Etype (Nam);\n \n-      --  (Ada 2005: AI-326): Handle wrong use of incomplete type\n+      --  Ada 2005 (AI-326): Handle wrong use of incomplete type\n \n       if Nkind (Nam) = N_Explicit_Dereference\n         and then Ekind (Etype (T2)) = E_Incomplete_Type"}]}