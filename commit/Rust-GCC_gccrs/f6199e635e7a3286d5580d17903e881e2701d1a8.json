{"sha": "f6199e635e7a3286d5580d17903e881e2701d1a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxOTllNjM1ZTdhMzI4NmQ1NTgwZDE3OTAzZTg4MWUyNzAxZDFhOA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-07-14T08:09:05Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-07-14T08:09:05Z"}, "message": "re PR fortran/44925 ([OOP] C_LOC with CLASS pointer)\n\n2010-07-14  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44925\n\t* gfortran.h (gfc_is_data_pointer): Remove prototype.\n\t* dependency.c (gfc_is_data_pointer): Make it static.\n\t* intrinsic.texi: Update documentation on C_LOC.\n\t* resolve.c (gfc_iso_c_func_interface): Fix pointer and target checks\n\tand add a check for polymorphic variables.\n\n\n2010-07-14  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44925\n\t* gfortran.dg/c_loc_tests_15.f90: New.\n\nFrom-SVN: r162169", "tree": {"sha": "54a2c46fe1716df95f4f8171b512adec531cd9f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a2c46fe1716df95f4f8171b512adec531cd9f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6199e635e7a3286d5580d17903e881e2701d1a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6199e635e7a3286d5580d17903e881e2701d1a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6199e635e7a3286d5580d17903e881e2701d1a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6199e635e7a3286d5580d17903e881e2701d1a8/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa86d337f691f622a4ff946b8b8e87deffb72f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa86d337f691f622a4ff946b8b8e87deffb72f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa86d337f691f622a4ff946b8b8e87deffb72f7f"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "2f028b1299caa5782235eb47a9b4013d08c174ea", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f6199e635e7a3286d5580d17903e881e2701d1a8", "patch": "@@ -1,3 +1,12 @@\n+2010-07-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44925\n+\t* gfortran.h (gfc_is_data_pointer): Remove prototype.\n+\t* dependency.c (gfc_is_data_pointer): Make it static.\n+\t* intrinsic.texi: Update documentation on C_LOC.\n+\t* resolve.c (gfc_iso_c_func_interface): Fix pointer and target checks\n+\tand add a check for polymorphic variables.\n+\n 2010-07-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* trans-expr.c (string_to_single_character): Also optimize"}, {"sha": "083058dab8b92c7cbbb3b672cbaa013dafccf59c", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=f6199e635e7a3286d5580d17903e881e2701d1a8", "patch": "@@ -424,7 +424,7 @@ gfc_ref_needs_temporary_p (gfc_ref *ref)\n }\n \n \n-int\n+static int\n gfc_is_data_pointer (gfc_expr *e)\n {\n   gfc_ref *ref;"}, {"sha": "11ff594f59ba1c20bf00d821091973854e505a87", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f6199e635e7a3286d5580d17903e881e2701d1a8", "patch": "@@ -2810,7 +2810,6 @@ void gfc_global_used (gfc_gsymbol *, locus *);\n \n /* dependency.c */\n int gfc_dep_compare_expr (gfc_expr *, gfc_expr *);\n-int gfc_is_data_pointer (gfc_expr *);\n \n /* check.c */\n gfc_try gfc_check_same_strlen (const gfc_expr*, const gfc_expr*, const char*);"}, {"sha": "2e91a3eb37af1f6e55470400ba242b73be9bc098", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=f6199e635e7a3286d5580d17903e881e2701d1a8", "patch": "@@ -2142,9 +2142,9 @@ Inquiry function\n @code{RESULT = C_LOC(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .70\n-@item @var{X} @tab Associated scalar pointer or interoperable scalar\n-or allocated allocatable variable with @code{TARGET} attribute.\n+@multitable @columnfractions .10 .75\n+@item @var{X} @tab  Shall have either the POINTER or TARGET attribute. It shall not be a coindexed object. It shall either be a variable with interoperable type and kind type parameters, or be a scalar, nonpolymorphic variable with no length type parameters.\n+\n @end multitable\n \n @item @emph{Return value}:"}, {"sha": "15b67d46ca185eb21baa2a929a6ff999beecdc81", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f6199e635e7a3286d5580d17903e881e2701d1a8", "patch": "@@ -2440,10 +2440,11 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n {\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   char binding_label[GFC_MAX_BINDING_LABEL_LEN + 1];\n-  int optional_arg = 0, is_pointer = 0;\n+  int optional_arg = 0;\n   gfc_try retval = SUCCESS;\n   gfc_symbol *args_sym;\n   gfc_typespec *arg_ts;\n+  symbol_attribute arg_attr;\n \n   if (args->expr->expr_type == EXPR_CONSTANT\n       || args->expr->expr_type == EXPR_OP\n@@ -2460,8 +2461,7 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n      and not necessarily that of the expr symbol (args_sym), because\n      the actual expression could be a part-ref of the expr symbol.  */\n   arg_ts = &(args->expr->ts);\n-\n-  is_pointer = gfc_is_data_pointer (args->expr);\n+  arg_attr = gfc_expr_attr (args->expr);\n     \n   if (sym->intmod_sym_id == ISOCBINDING_ASSOCIATED)\n     {\n@@ -2504,7 +2504,7 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n       else if (sym->intmod_sym_id == ISOCBINDING_LOC)\n         {\n           /* Make sure we have either the target or pointer attribute.  */\n-\t  if (!args_sym->attr.target && !is_pointer)\n+\t  if (!arg_attr.target && !arg_attr.pointer)\n             {\n               gfc_error_now (\"Parameter '%s' to '%s' at %L must be either \"\n                              \"a TARGET or an associated pointer\",\n@@ -2587,7 +2587,7 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n \t\t\t  }\n                     }\n                 }\n-              else if (is_pointer\n+              else if (arg_attr.pointer\n \t\t       && is_scalar_expr_ptr (args->expr) != SUCCESS)\n                 {\n                   /* Case 1c, section 15.1.2.5, J3/04-007: an associated\n@@ -2622,6 +2622,13 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n                                  &(args->expr->where));\n                   retval = FAILURE;\n                 }\n+\t      else if (arg_ts->type == BT_CLASS)\n+\t\t{\n+\t\t  gfc_error_now (\"Parameter '%s' to '%s' at %L must not be \"\n+\t\t\t\t \"polymorphic\", args_sym->name, sym->name,\n+\t\t\t\t &(args->expr->where));\n+\t\t  retval = FAILURE;\n+\t\t}\n             }\n         }\n       else if (sym->intmod_sym_id == ISOCBINDING_FUNLOC)"}, {"sha": "44785593ce21b096273ed826dc00db7e05bb8bde", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6199e635e7a3286d5580d17903e881e2701d1a8", "patch": "@@ -1,3 +1,8 @@\n+2010-07-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44925\n+\t* gfortran.dg/c_loc_tests_15.f90: New.\n+\n 2010-07-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44909"}, {"sha": "63f8816379ec8905f161af21b4dffca73c2d07ca", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_15.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6199e635e7a3286d5580d17903e881e2701d1a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_15.f90?ref=f6199e635e7a3286d5580d17903e881e2701d1a8", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+!\n+! PR 44925: [OOP] C_LOC with CLASS pointer\n+!\n+! Contributed by Barron Bichon <barron.bichon@swri.org>\n+\n+  use iso_c_binding\n+\n+  type :: t\n+  end type t\n+\n+  type(c_ptr) :: tt_cptr\n+  class(t), pointer :: tt_fptr\n+  if (associated(tt_fptr)) tt_cptr = c_loc(tt_fptr)  ! { dg-error \"must not be polymorphic\" }\n+\n+end"}]}