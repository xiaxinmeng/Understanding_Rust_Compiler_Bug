{"sha": "c1107fa376b716f93c9c6f349bb46e1e767d41d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExMDdmYTM3NmI3MTZmOTNjOWM2ZjM0OWJiNDZlMWU3NjdkNDFkNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T13:27:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T13:27:22Z"}, "message": "[multiple changes]\n\n2012-07-09  Vincent Pucci  <pucci@adacore.com>\n\n\t* sem_ch9.adb (Check_Node): Allow attributes\n\tthat denote static function for lock-free implementation.\n\t(Is_Static_Function): New routine.\n\n2012-07-09  Tristan Gingold  <gingold@adacore.com>\n\n\t* tracebak.c: Adjust skip_frames on Win64.\n\n2012-07-09  Tristan Gingold  <gingold@adacore.com>\n\n\t* init.c: Add __gnat_adjust_context_for_raise for ia64/hpux.\n\t* raise-gcc.c: __gnat_cleanupunwind_handler: Do not call\n\t_Unwind_GetGR on hpux when using libgcc unwinder.  Part of\n\n2012-07-09  Vincent Pucci  <pucci@adacore.com>\n\n\t* exp_attr.adb, sem_attr.adb: Minor reformatting.\n\t* par-ch13.adb, par-ch4.adb, par-util.adb: Reformatting\n\tconsidering that internal attribute names are not defined anymore\n\tin the main attribute names list.\n\t* snames.adb-tmpl (Get_Attribute_Id): Special processinf\n\tfor names CPU, Dispatching_Domain and Interrupt_Priority.\n\t(Is_Internal_Attribute_Name): Minor reformatting.\n\t* snames.ads-tmpl: New list of internal attribute names. Internal\n\tattributes moved at the end of the attribute Id list.\n\nFrom-SVN: r189380", "tree": {"sha": "3116306d0d98adfdfd391185637bd4a43a7a293d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3116306d0d98adfdfd391185637bd4a43a7a293d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1107fa376b716f93c9c6f349bb46e1e767d41d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1107fa376b716f93c9c6f349bb46e1e767d41d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1107fa376b716f93c9c6f349bb46e1e767d41d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1107fa376b716f93c9c6f349bb46e1e767d41d6/comments", "author": null, "committer": null, "parents": [{"sha": "d27f3ff4c3165d5decf103e63336095730745f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27f3ff4c3165d5decf103e63336095730745f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d27f3ff4c3165d5decf103e63336095730745f82"}], "stats": {"total": 206, "additions": 161, "deletions": 45}, "files": [{"sha": "59432bfcf2aaf65bbd0e48d8c7561a5609444e5f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -1,3 +1,31 @@\n+2012-07-09  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* sem_ch9.adb (Check_Node): Allow attributes\n+\tthat denote static function for lock-free implementation.\n+\t(Is_Static_Function): New routine.\n+\n+2012-07-09  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* tracebak.c: Adjust skip_frames on Win64.\n+\n+2012-07-09  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* init.c: Add __gnat_adjust_context_for_raise for ia64/hpux.\n+\t* raise-gcc.c: __gnat_cleanupunwind_handler: Do not call\n+\t_Unwind_GetGR on hpux when using libgcc unwinder.  Part of\n+\n+2012-07-09  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* exp_attr.adb, sem_attr.adb: Minor reformatting.\n+\t* par-ch13.adb, par-ch4.adb, par-util.adb: Reformatting\n+\tconsidering that internal attribute names are not defined anymore\n+\tin the main attribute names list.\n+\t* snames.adb-tmpl (Get_Attribute_Id): Special processinf\n+\tfor names CPU, Dispatching_Domain and Interrupt_Priority.\n+\t(Is_Internal_Attribute_Name): Minor reformatting.\n+\t* snames.ads-tmpl: New list of internal attribute names. Internal\n+\tattributes moved at the end of the attribute Id list.\n+\n 2012-07-09  Robert Dewar  <dewar@adacore.com>\n \n \t* freeze.adb: Minor code reorganization (use Ekind_In)."}, {"sha": "cc658a2471ed7620dfca3143ac3e3cc5970e1080", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -841,9 +841,7 @@ package body Exp_Attr is\n       --  Internal attributes used to deal with Ada 2012 delayed aspects. These\n       --  were already rejected by the parser. Thus they shouldn't appear here.\n \n-      when Attribute_CPU                |\n-           Attribute_Dispatching_Domain |\n-           Attribute_Interrupt_Priority =>\n+      when Internal_Attribute_Id =>\n          raise Program_Error;\n \n       ------------"}, {"sha": "e28b264f222e1a1b1f8e6f2e8e4e42856481d5f6", "filename": "gcc/ada/init.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -304,6 +304,25 @@ __gnat_install_handler (void)\n #include <signal.h>\n #include <sys/ucontext.h>\n \n+#if defined(__ia64__)\n+#include <sys/uc_access.h>\n+#define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n+\n+void\n+__gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n+{\n+  ucontext_t *uc = (ucontext_t *) ucontext;\n+  uint64_t ip;\n+\n+  /* Adjust on itanium, as GetIPInfo is not supported.  */\n+  __uc_get_ip (uc, &ip);\n+  __uc_set_ip (uc, ip + 1);\n+}\n+#endif /* __ia64__ */\n+\n+/* Tasking and Non-tasking signal handler.  Map SIGnal to Ada exception\n+   propagation after the required low level adjustments.  */\n+\n static void\n __gnat_error_handler (int sig,\n \t\t      siginfo_t *si ATTRIBUTE_UNUSED,\n@@ -312,6 +331,10 @@ __gnat_error_handler (int sig,\n   struct Exception_Data *exception;\n   const char *msg;\n \n+#if defined(__ia64__)\n+  __gnat_adjust_context_for_raise (sig, ucontext);\n+#endif\n+\n   switch (sig)\n     {\n     case SIGSEGV:"}, {"sha": "8b2d3d469dd51795ee96c470f5ff8b185517600b", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -226,8 +226,8 @@ package body Ch13 is\n                --  are meant to be used only by the compiler.\n \n                if not Is_Attribute_Name (Attr_Name)\n-                 or else (Is_Internal_Attribute_Name (Attr_Name)\n-                           and then Comes_From_Source (Token_Node))\n+                 and then (not Is_Internal_Attribute_Name (Attr_Name)\n+                            or else Comes_From_Source (Token_Node))\n                then\n                   Signal_Bad_Attribute;\n                end if;"}, {"sha": "79aa85fad2d806827e0ed6b08d3630e896f7a684", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -434,13 +434,7 @@ package body Ch4 is\n             elsif Token = Tok_Identifier then\n                Attr_Name := Token_Name;\n \n-               --  Note that internal attributes names don't denote real\n-               --  attributes, so do not count in this error test. We just\n-               --  want to consider them as not being attribute names.\n-\n-               if not Is_Attribute_Name (Attr_Name)\n-                 or else Is_Internal_Attribute_Name (Attr_Name)\n-               then\n+               if not Is_Attribute_Name (Attr_Name) then\n                   if Apostrophe_Should_Be_Semicolon then\n                      Expr_Form := EF_Name;\n                      return Name_Node;"}, {"sha": "efcf70bf352e3b47f0b5044efda7c94c8b002258", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -721,13 +721,7 @@ package body Util is\n \n       Error_Msg_Name_1 := First_Attribute_Name;\n       while Error_Msg_Name_1 <= Last_Attribute_Name loop\n-\n-         --  No mispelling possible with internal attribute names since they\n-         --  don't denote real attributes.\n-\n-         if not Is_Internal_Attribute_Name (Error_Msg_Name_1)\n-           and then Is_Bad_Spelling_Of (Token_Name, Error_Msg_Name_1)\n-         then\n+         if Is_Bad_Spelling_Of (Token_Name, Error_Msg_Name_1) then\n             Error_Msg_N -- CODEFIX\n               (\"\\possible misspelling of %\", Token_Node);\n             exit;"}, {"sha": "514a23c192012489e23b5470c614e763c005a293", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -1167,7 +1167,7 @@ __gnat_cleanupunwind_handler (int version,\n {\n   /* Terminate when the end of the stack is reached.  */\n   if ((phases & _UA_END_OF_STACK) != 0\n-#if defined (__ia64__) && defined (__hpux__)\n+#if defined (__ia64__) && defined (__hpux__) && defined (USE_LIBUNWIND_EXCEPTIONS)\n       /* Strictely follow the ia64 ABI: when end of stack is reached,\n \t the callback will be called with a NULL stack pointer.\n \t No need for that when using libgcc unwinder.  */"}, {"sha": "d2c49c0600b1e2fa1ae7172754a8753f3348ca0c", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -2218,9 +2218,7 @@ package body Sem_Attr is\n       --  Internal attributes used to deal with Ada 2012 delayed aspects. These\n       --  were already rejected by the parser. Thus they shouldn't appear here.\n \n-      when Attribute_CPU                |\n-           Attribute_Dispatching_Domain |\n-           Attribute_Interrupt_Priority =>\n+      when Internal_Attribute_Id =>\n          raise Program_Error;\n \n       ------------------"}, {"sha": "6a9fedf253af2179cf4da8815a2793620a9d238e", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -244,12 +244,71 @@ package body Sem_Ch9 is\n                ----------------\n \n                function Check_Node (N : Node_Id) return Traverse_Result is\n+                  function Is_Static_Function (Attr : Node_Id) return Boolean;\n+                  --  Given an attribute reference node Attr, return True if\n+                  --  Attr denotes a static function according to the rules in\n+                  --  (RM 4.9 (22)).\n+\n+                  ------------------------\n+                  -- Is_Static_Function --\n+                  ------------------------\n+\n+                  function Is_Static_Function\n+                    (Attr : Node_Id) return Boolean\n+                  is\n+                     Para : Node_Id;\n+\n+                  begin\n+                     pragma Assert (Nkind (Attr) = N_Attribute_Reference);\n+\n+                     case Attribute_Name (Attr) is\n+                        when Name_Min             |\n+                             Name_Max             |\n+                             Name_Pred            |\n+                             Name_Succ            |\n+                             Name_Value           |\n+                             Name_Wide_Value      |\n+                             Name_Wide_Wide_Value =>\n+\n+                           --  A language-defined attribute denotes a static\n+                           --  function if the prefix denotes a static scalar\n+                           --  subtype, and if the parameter and result types\n+                           --  are scalar (RM 4.9 (22)).\n+\n+                           if Is_Scalar_Type (Etype (Attr))\n+                             and then Is_Scalar_Type (Etype (Prefix (Attr)))\n+                             and then Is_Static_Subtype (Etype (Prefix (Attr)))\n+                           then\n+                              Para := First (Expressions (Attr));\n+\n+                              while Present (Para) loop\n+                                 if not Is_Scalar_Type (Etype (Para)) then\n+                                    return False;\n+                                 end if;\n+\n+                                 Next (Para);\n+                              end loop;\n+\n+                              return True;\n+\n+                           else\n+                              return False;\n+                           end if;\n+\n+                        when others => return False;\n+                     end case;\n+                  end Is_Static_Function;\n+\n+               --  Start of processing for Check_Node\n+\n                begin\n                   if Is_Procedure then\n-                     --  Function calls and attribute references must be static\n+                     --  Attribute references must be static or denote a static\n+                     --  function.\n \n                      if Nkind (N) = N_Attribute_Reference\n                        and then not Is_Static_Expression (N)\n+                       and then not Is_Static_Function (N)\n                      then\n                         if Complain then\n                            Error_Msg_N\n@@ -258,6 +317,8 @@ package body Sem_Ch9 is\n \n                         return Abandon;\n \n+                     --  Function calls must be static\n+\n                      elsif Nkind (N) = N_Function_Call\n                        and then not Is_Static_Expression (N)\n                      then"}, {"sha": "05d427743a87ea52ea2497a162de61f676073ebf", "filename": "gcc/ada/snames.adb-tmpl", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fsnames.adb-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fsnames.adb-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb-tmpl?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -127,7 +127,15 @@ package body Snames is\n \n    function Get_Attribute_Id (N : Name_Id) return Attribute_Id is\n    begin\n-      return Attribute_Id'Val (N - First_Attribute_Name);\n+      if N = Name_CPU then\n+         return Attribute_CPU;\n+      elsif N = Name_Dispatching_Domain then\n+         return Attribute_Dispatching_Domain;\n+      elsif N = Name_Interrupt_Priority then\n+         return Attribute_Interrupt_Priority;\n+      else\n+         return Attribute_Id'Val (N - First_Attribute_Name);\n+      end if;\n    end Get_Attribute_Id;\n \n    -----------------------\n@@ -399,9 +407,7 @@ package body Snames is\n    function Is_Internal_Attribute_Name (N : Name_Id) return Boolean is\n    begin\n       return\n-        N = Name_CPU                or else\n-        N = Name_Interrupt_Priority or else\n-        N = Name_Dispatching_Domain;\n+        N in First_Internal_Attribute_Name .. Last_Internal_Attribute_Name;\n    end Is_Internal_Attribute_Name;\n \n    ----------------------------"}, {"sha": "f4facab956bd64fb1f69840d5a6cdb2a60106911", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -753,14 +753,6 @@ package Snames is\n    --  implementation dependent attributes may be found in the appropriate\n    --  section in Sem_Attr.\n \n-   --  The entries marked INT are not real attributes. They are special names\n-   --  used internally by GNAT in order to deal with certain delayed aspects\n-   --  (Aspect_CPU, Aspect_Dispatching_Domain, Aspect_Interrupt_Priority) that\n-   --  don't have corresponding pragmas or user-referencable attributes. It is\n-   --  convenient to have these internal attributes available in processing\n-   --  the aspects, since the normal approach is to convert an aspect into its\n-   --  corresponding pragma or attribute specification.\n-\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n@@ -787,15 +779,13 @@ package Snames is\n    Name_Constant_Indexing              : constant Name_Id := N + $; -- GNAT\n    Name_Constrained                    : constant Name_Id := N + $;\n    Name_Count                          : constant Name_Id := N + $;\n-   Name_CPU                            : constant Name_Id := N + $; -- INT\n    Name_Default_Bit_Order              : constant Name_Id := N + $; -- GNAT\n    Name_Default_Iterator               : constant Name_Id := N + $; -- GNAT\n    Name_Definite                       : constant Name_Id := N + $;\n    Name_Delta                          : constant Name_Id := N + $;\n    Name_Denorm                         : constant Name_Id := N + $;\n    Name_Descriptor_Size                : constant Name_Id := N + $;\n    Name_Digits                         : constant Name_Id := N + $;\n-   Name_Dispatching_Domain             : constant Name_Id := N + $; -- INT\n    Name_Elaborated                     : constant Name_Id := N + $; -- GNAT\n    Name_Emax                           : constant Name_Id := N + $; -- Ada 83\n    Name_Enabled                        : constant Name_Id := N + $; -- GNAT\n@@ -817,7 +807,6 @@ package Snames is\n    Name_Img                            : constant Name_Id := N + $; -- GNAT\n    Name_Implicit_Dereference           : constant Name_Id := N + $; -- GNAT\n    Name_Integer_Value                  : constant Name_Id := N + $; -- GNAT\n-   Name_Interrupt_Priority             : constant Name_Id := N + $; -- INT\n    Name_Invalid_Value                  : constant Name_Id := N + $; -- GNAT\n    Name_Iterator_Element               : constant Name_Id := N + $; -- GNAT\n    Name_Large                          : constant Name_Id := N + $; -- Ada 83\n@@ -963,6 +952,21 @@ package Snames is\n    Last_Entity_Attribute_Name          : constant Name_Id := N + $;\n    Last_Attribute_Name                 : constant Name_Id := N + $;\n \n+   --  Names of internal attributes. They are not real attributes but special\n+   --  names used internally by GNAT in order to deal with certain delayed\n+   --  aspects (Aspect_CPU, Aspect_Dispatching_Domain,\n+   --  Aspect_Interrupt_Priority) that don't have corresponding pragmas or\n+   --  user-referencable attributes. It is convenient to have these internal\n+   --  attributes available in processing the aspects, since the normal\n+   --  approach is to convert an aspect into its corresponding pragma or\n+   --  attribute specification.\n+\n+   First_Internal_Attribute_Name       : constant Name_Id := N + $;\n+   Name_CPU                            : constant Name_Id := N + $; -- INT\n+   Name_Dispatching_Domain             : constant Name_Id := N + $; -- INT\n+   Name_Interrupt_Priority             : constant Name_Id := N + $; -- INT\n+   Last_Internal_Attribute_Name        : constant Name_Id := N + $;\n+\n    --  Names of recognized locking policy identifiers\n \n    First_Locking_Policy_Name           : constant Name_Id := N + $;\n@@ -1366,15 +1370,13 @@ package Snames is\n       Attribute_Constant_Indexing,\n       Attribute_Constrained,\n       Attribute_Count,\n-      Attribute_CPU,\n       Attribute_Default_Bit_Order,\n       Attribute_Default_Iterator,\n       Attribute_Definite,\n       Attribute_Delta,\n       Attribute_Denorm,\n       Attribute_Descriptor_Size,\n       Attribute_Digits,\n-      Attribute_Dispatching_Domain,\n       Attribute_Elaborated,\n       Attribute_Emax,\n       Attribute_Enabled,\n@@ -1396,7 +1398,6 @@ package Snames is\n       Attribute_Img,\n       Attribute_Implicit_Dereference,\n       Attribute_Integer_Value,\n-      Attribute_Interrupt_Priority,\n       Attribute_Invalid_Value,\n       Attribute_Iterator_Element,\n       Attribute_Large,\n@@ -1526,7 +1527,18 @@ package Snames is\n \n       Attribute_Base,\n       Attribute_Class,\n-      Attribute_Stub_Type);\n+      Attribute_Stub_Type,\n+\n+      --  The internal attributes are on their own, out of order, because of\n+      --  the special processing required to deal with the fact that their\n+      --  names are not attribute names.\n+\n+      Attribute_CPU,\n+      Attribute_Dispatching_Domain,\n+      Attribute_Interrupt_Priority);\n+\n+      subtype Internal_Attribute_Id is Attribute_Id range\n+        Attribute_CPU .. Attribute_Interrupt_Priority;\n \n       type Attribute_Class_Array is array (Attribute_Id) of Boolean;\n       --  Type used to build attribute classification flag arrays\n@@ -1897,7 +1909,9 @@ package Snames is\n \n    function Get_Attribute_Id (N : Name_Id) return Attribute_Id;\n    --  Returns Id of attribute corresponding to given name. It is an error to\n-   --  call this function with a name that is not the name of a attribute.\n+   --  call this function with a name that is not the name of a attribute. Note\n+   --  that the function also works correctly for internal attribute names even\n+   --  though there are not included in the main list of attribute Names.\n \n    function Get_Convention_Id (N : Name_Id) return Convention_Id;\n    --  Returns Id of language convention corresponding to given name. It is"}, {"sha": "01a9e75a9a276e8c16834667571ede7358a9018c", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1107fa376b716f93c9c6f349bb46e1e767d41d6/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=c1107fa376b716f93c9c6f349bb46e1e767d41d6", "patch": "@@ -160,7 +160,7 @@ __gnat_backtrace (void **array,\n \tbreak;\n \n       /* Skip frames.  */\n-      if (skip_frames)\n+      if (skip_frames > 1)\n \t{\n \t  skip_frames--;\n \t  continue;"}]}