{"sha": "7d6040e83acb9a468df6d9fbe84335037ba313ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q2MDQwZTgzYWNiOWE0NjhkZjZkOWZiZTg0MzM1MDM3YmEzMTNiYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-02-25T04:14:45Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-02-25T04:14:45Z"}, "message": "sparc.c (const64_high_operand): Zero-extend operands of SPARC_SETHI_P.\n\n* config/sparc/sparc.c (const64_high_operand): Zero-extend\noperands of SPARC_SETHI_P.\n(input_operand): Likewise.\n(sparc_emit_set_const32): Likewise.\n* config/sparc/sparc.h (SPARC_SETHI_P): Disregard TARGET_ARCH64.\n(SPARC_SETHI32_P): Zero-extend operand from 32 bits.\n(CONST_OK_FOR_LETTER_P): Use SETHI32 for `K'.  Add `N' as SETHI.\n* config/sparc/sparc.md (movdi_insn_sp64_novis): Use `N'.\n(movdi_insn_sp64_vis): Likewise.\n(movdi split, movdf split): Use SETHI32.\n* doc/md.texi: Document SPARC constraints L, M and N.\n\nFrom-SVN: r50018", "tree": {"sha": "664376e76fff6e38684f68fdc9cd8d2f2958e420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/664376e76fff6e38684f68fdc9cd8d2f2958e420"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d6040e83acb9a468df6d9fbe84335037ba313ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6040e83acb9a468df6d9fbe84335037ba313ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6040e83acb9a468df6d9fbe84335037ba313ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6040e83acb9a468df6d9fbe84335037ba313ba/comments", "author": null, "committer": null, "parents": [{"sha": "77da08b08ea7e8b12f38605dacfc73a84be1bd82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77da08b08ea7e8b12f38605dacfc73a84be1bd82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77da08b08ea7e8b12f38605dacfc73a84be1bd82"}], "stats": {"total": 64, "additions": 41, "deletions": 23}, "files": [{"sha": "c510a9a29009a85d4bd9c9df671b166b90196e7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6040e83acb9a468df6d9fbe84335037ba313ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6040e83acb9a468df6d9fbe84335037ba313ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d6040e83acb9a468df6d9fbe84335037ba313ba", "patch": "@@ -1,3 +1,17 @@\n+2002-02-25  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/sparc/sparc.c (const64_high_operand): Zero-extend\n+\toperands of SPARC_SETHI_P.\n+\t(input_operand): Likewise.\n+\t(sparc_emit_set_const32): Likewise.\n+\t* config/sparc/sparc.h (SPARC_SETHI_P): Disregard TARGET_ARCH64.\n+\t(SPARC_SETHI32_P): Zero-extend operand from 32 bits.\n+\t(CONST_OK_FOR_LETTER_P): Use SETHI32 for `K'.  Add `N' as SETHI.\n+\t* config/sparc/sparc.md (movdi_insn_sp64_novis): Use `N'.\n+\t(movdi_insn_sp64_vis): Likewise.\n+\t(movdi split, movdf split): Use SETHI32.\n+\t* doc/md.texi: Document SPARC constraints L, M and N.\n+\n 2002-02-25  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/rs6000.md (\"get_vrsave_internal\"): New."}, {"sha": "d661d30cdb33f1112f3ebc390199acab3d0ddd08", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6040e83acb9a468df6d9fbe84335037ba313ba/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6040e83acb9a468df6d9fbe84335037ba313ba/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7d6040e83acb9a468df6d9fbe84335037ba313ba", "patch": "@@ -1004,17 +1004,11 @@ const64_operand (op, mode)\n int\n const64_high_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     enum machine_mode mode;\n {\n   return ((GET_CODE (op) == CONST_INT\n \t   && (INTVAL (op) & ~(HOST_WIDE_INT)0x3ff) != 0\n-\t   && SPARC_SETHI_P (INTVAL (op))\n-#if HOST_BITS_PER_WIDE_INT != 64\n-\t   /* Must be positive on non-64bit host else the\n-\t      optimizer is fooled into thinking that sethi\n-\t      sign extends, even though it does not.  */\n-\t   && INTVAL (op) >= 0\n-#endif\n+\t   && SPARC_SETHI_P (INTVAL (op) & GET_MODE_MASK (mode))\n \t   )\n \t  || (GET_CODE (op) == CONST_DOUBLE\n \t      && CONST_DOUBLE_HIGH (op) == 0\n@@ -1227,12 +1221,7 @@ input_operand (op, mode)\n      variants when we are working in DImode and !arch64.  */\n   if (GET_MODE_CLASS (mode) == MODE_INT\n       && ((GET_CODE (op) == CONST_INT\n-\t   && ((SPARC_SETHI_P (INTVAL (op))\n-\t\t&& (! TARGET_ARCH64\n-\t\t    || (INTVAL (op) >= 0)\n-\t\t    || mode == SImode\n-\t\t    || mode == HImode\n-\t\t    || mode == QImode))\n+\t   && (SPARC_SETHI_P (INTVAL (op) & GET_MODE_MASK (mode))\n \t       || SPARC_SIMM13_P (INTVAL (op))\n \t       || (mode == DImode\n \t\t   && ! TARGET_ARCH64)))\n@@ -1311,7 +1300,7 @@ sparc_emit_set_const32 (op0, op1)\n     {\n       HOST_WIDE_INT value = INTVAL (op1);\n \n-      if (SPARC_SETHI_P (value)\n+      if (SPARC_SETHI_P (value & GET_MODE_MASK (mode))\n \t  || SPARC_SIMM13_P (value))\n \tabort ();\n     }"}, {"sha": "779a39c988e3fc25222e4039d54f73cdeb3d62ee", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6040e83acb9a468df6d9fbe84335037ba313ba/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6040e83acb9a468df6d9fbe84335037ba313ba/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=7d6040e83acb9a468df6d9fbe84335037ba313ba", "patch": "@@ -1393,7 +1393,8 @@ extern const char leaf_reg_remap[];\n    `J' is used for the range which is just zero (since that is R0).\n    `K' is used for constants which can be loaded with a single sethi insn.\n    `L' is used for the range of constants supported by the movcc insns.\n-   `M' is used for the range of constants supported by the movrcc insns.  */\n+   `M' is used for the range of constants supported by the movrcc insns.\n+   `N' is like K, but for constants wider than 32 bits.  */\n \n #define SPARC_SIMM10_P(X) ((unsigned HOST_WIDE_INT) (X) + 0x200 < 0x400)\n #define SPARC_SIMM11_P(X) ((unsigned HOST_WIDE_INT) (X) + 0x400 < 0x800)\n@@ -1405,15 +1406,18 @@ extern const char leaf_reg_remap[];\n #define SMALL_INT32(X) (SPARC_SIMM13_P (trunc_int_for_mode \\\n \t\t\t\t\t(INTVAL (X), SImode)))\n #define SPARC_SETHI_P(X) \\\n-(((unsigned HOST_WIDE_INT) (X) & \\\n-  (TARGET_ARCH64 ? ~(unsigned HOST_WIDE_INT) 0xfffffc00 : 0x3ff)) == 0)\n+  (((unsigned HOST_WIDE_INT) (X) \\\n+    & ((unsigned HOST_WIDE_INT) 0x3ff - GET_MODE_MASK (SImode) - 1)) == 0)\n+#define SPARC_SETHI32_P(X) \\\n+  (SPARC_SETHI_P ((unsigned HOST_WIDE_INT) (X) & GET_MODE_MASK (SImode)))\n \n #define CONST_OK_FOR_LETTER_P(VALUE, C)  \\\n   ((C) == 'I' ? SPARC_SIMM13_P (VALUE)\t\t\t\\\n    : (C) == 'J' ? (VALUE) == 0\t\t\t\t\\\n-   : (C) == 'K' ? SPARC_SETHI_P (VALUE)\t\t\t\\\n+   : (C) == 'K' ? SPARC_SETHI32_P (VALUE)\t\t\\\n    : (C) == 'L' ? SPARC_SIMM11_P (VALUE)\t\t\\\n    : (C) == 'M' ? SPARC_SIMM10_P (VALUE)\t\t\\\n+   : (C) == 'N' ? SPARC_SETHI_P (VALUE)\t\t\t\\\n    : 0)\n \n /* Similar, but for floating constants, and defining letters G and H."}, {"sha": "18b2ba8f90fef214db841fe1fe0fb5b62163c90a", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6040e83acb9a468df6d9fbe84335037ba313ba/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6040e83acb9a468df6d9fbe84335037ba313ba/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=7d6040e83acb9a468df6d9fbe84335037ba313ba", "patch": "@@ -2515,7 +2515,7 @@\n \n (define_insn \"*movdi_insn_sp64_novis\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,?e,?e,?m\")\n-        (match_operand:DI 1 \"input_operand\"   \"rI,K,J,m,rJ,e,m,e\"))]\n+        (match_operand:DI 1 \"input_operand\"   \"rI,N,J,m,rJ,e,m,e\"))]\n   \"TARGET_ARCH64 && ! TARGET_VIS\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n@@ -2533,7 +2533,7 @@\n \n (define_insn \"*movdi_insn_sp64_vis\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,?e,?e,?m,b\")\n-        (match_operand:DI 1 \"input_operand\"   \"rI,K,J,m,rJ,e,m,e,J\"))]\n+        (match_operand:DI 1 \"input_operand\"   \"rI,N,J,m,rJ,e,m,e,J\"))]\n   \"TARGET_ARCH64 && TARGET_VIS &&\n    (register_operand (operands[0], DImode)\n     || reg_or_0_operand (operands[1], DImode))\"\n@@ -2791,7 +2791,7 @@\n   /* Slick... but this trick loses if this subreg constant part\n      can be done in one insn.  */\n   if (CONST_DOUBLE_LOW (operands[1]) == CONST_DOUBLE_HIGH (operands[1])\n-      && !(SPARC_SETHI_P (CONST_DOUBLE_HIGH (operands[1]))\n+      && !(SPARC_SETHI32_P (CONST_DOUBLE_HIGH (operands[1]))\n \t   || SPARC_SIMM13_P (CONST_DOUBLE_HIGH (operands[1]))))\n     {\n       emit_insn (gen_movsi (gen_lowpart (SImode, operands[0]),\n@@ -3403,7 +3403,7 @@\n       /* Slick... but this trick loses if this subreg constant part\n          can be done in one insn.  */\n       if (l[1] == l[0]\n-          && !(SPARC_SETHI_P (l[0])\n+          && !(SPARC_SETHI32_P (l[0])\n \t       || SPARC_SIMM13_P (l[0])))\n         {\n           emit_insn (gen_movsi (gen_lowpart (SImode, operands[0]),"}, {"sha": "8e05d62b40f4b370edbf44ad0afc66d14d6c26a6", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6040e83acb9a468df6d9fbe84335037ba313ba/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6040e83acb9a468df6d9fbe84335037ba313ba/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=7d6040e83acb9a468df6d9fbe84335037ba313ba", "patch": "@@ -1859,6 +1859,17 @@ Zero\n 32-bit constant with the low 12 bits clear (a constant that can be\n loaded with the @code{sethi} instruction)\n \n+@item L\n+A constant in the range supported by @code{movcc} instructions\n+\n+@item M\n+A constant in the range supported by @code{movrcc} instructions\n+\n+@item N\n+Same as @samp{K}, except that it verifies that bits that are not in the\n+lower 32-bits range are all zero.  Must be used instead of @samp{K} for\n+modes wider than @code{SImode}\n+\n @item G\n Floating-point zero\n "}]}