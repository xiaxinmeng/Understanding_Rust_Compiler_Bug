{"sha": "9bdae0133df72dab6604c2b9b25f6411e4c41e8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJkYWUwMTMzZGY3MmRhYjY2MDRjMmI5YjI1ZjY0MTFlNGM0MWU4Yg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2013-01-07T08:06:46Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2013-01-07T08:06:46Z"}, "message": "PR c++/55311 - Cannot specialize alias template with arg of type array of char\n\nConsider this test case:\n\n     1\ttemplate <const char *const C, typename T>\n     2\tstruct A\n     3\t{};\n     4\n     5\tstruct B {};\n     6\n     7\textern constexpr char HELLO_WORLD[] = \"hello world\";\n     8\n     9\tA<HELLO_WORLD, B> g; // <-- This works fine\n    10\n    11\ttemplate <typename T>\n    12\tusing PartiallySpecialized = A<HELLO_WORLD, T>;  // <-- This fails\n    13\n\nAt line 12 G++ fails to instantiate the alias template that has a\nstring variable initialized with a string literal, with the error\nmessage:\n\n    test.cc:12:46: error: \u2018\"hello world\"\u2019 is not a valid template argument of type \u2018const char*\u2019 because \u2018\"hello world\"\u2019 is not a variable\n     using PartiallySpecialized = A<HELLO_WORLD, T>;  // <-- This fails\n                                              ^\n\nNote that instantiating the template A at line 9 with the same\narguments as in the problematic case above works.\n\nThis happens in the context of lookup_template_class_1, when it handles\nthe alias template instantiation A<HELLO_WORLD, T> and thus passes the\nVAR_DECL for HELLO_WORLD to convert_nontype_argument.\n\nNote that from there decay_conversion replaces the the VAR_DECL with\nits STRING_CST initializer[1].  Latter on, convert_nontype_argument\nchecks that the HELLO_WORLD constant it received as argument was\nindeed a VAR_DECL:\n\n      else\n\t{\n\t  tree decl;\n\n\t  decl = ((TREE_CODE (expr) == ADDR_EXPR)\n\t\t  ? TREE_OPERAND (expr, 0) : expr);\n\t  if (TREE_CODE (decl) != VAR_DECL)\n\t    {\n\t      error (\"%qE is not a valid template argument of type %qT \"\n\t\t     \"because %qE is not a variable\",\n\t\t     expr, type, decl);\n\t      return NULL_TREE;\n\t    }\n\nBut the issue is, that VAR_DECL has been replaced by STRING_CST, so\nthe last 'if' above fails.\n\nThe fix is to teach decay_conversion to return the address of array,\nrather than returning its initializer.\n\nBootstrapped and tested on x86_64-unknown-linux-gnu against trunk.\n\ngcc/cp/\n\n\tPR c++/55311\n\t* pt.c (decay_conversion): Do not return the initializer of an array.\n\ngcc/testsuite/\n\n\tPR c++/55311\n\t* g++.dg/cpp0x/alias-decl-30.C: New test.\n\t* g++.dg/init/array21.C: New test.\n\nFrom-SVN: r194961", "tree": {"sha": "93908fdd901e2fcf0b9ab2e350080821a3fb529a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93908fdd901e2fcf0b9ab2e350080821a3fb529a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bdae0133df72dab6604c2b9b25f6411e4c41e8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bdae0133df72dab6604c2b9b25f6411e4c41e8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bdae0133df72dab6604c2b9b25f6411e4c41e8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bdae0133df72dab6604c2b9b25f6411e4c41e8b/comments", "author": null, "committer": null, "parents": [{"sha": "36b21740b4756881c0e35e3cb87d77fac3d1d731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b21740b4756881c0e35e3cb87d77fac3d1d731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b21740b4756881c0e35e3cb87d77fac3d1d731"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "66fb33ab56d1ec81c560f653fcdb524759c0a7bb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdae0133df72dab6604c2b9b25f6411e4c41e8b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdae0133df72dab6604c2b9b25f6411e4c41e8b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9bdae0133df72dab6604c2b9b25f6411e4c41e8b", "patch": "@@ -1880,19 +1880,25 @@ decay_conversion (tree exp, tsubst_flags_t complain)\n       return error_mark_node;\n     }\n \n-  /* FIXME remove? at least need to remember that this isn't really a\n-     constant expression if EXP isn't decl_constant_var_p, like with\n-     C_MAYBE_CONST_EXPR.  */\n-  exp = decl_constant_value_safe (exp);\n-  if (error_operand_p (exp))\n-    return error_mark_node;\n+  code = TREE_CODE (type);\n+\n+  /* For an array decl decay_conversion should not try to return its\n+     initializer.  */\n+  if (code != ARRAY_TYPE)\n+    {\n+      /* FIXME remove? at least need to remember that this isn't really a\n+\t constant expression if EXP isn't decl_constant_var_p, like with\n+\t C_MAYBE_CONST_EXPR.  */\n+      exp = decl_constant_value_safe (exp);\n+      if (error_operand_p (exp))\n+\treturn error_mark_node;\n+    }\n \n   if (NULLPTR_TYPE_P (type) && !TREE_SIDE_EFFECTS (exp))\n     return nullptr_node;\n \n   /* build_c_cast puts on a NOP_EXPR to make the result not an lvalue.\n      Leave such NOP_EXPRs, since RHS is being used in non-lvalue context.  */\n-  code = TREE_CODE (type);\n   if (code == VOID_TYPE)\n     {\n       if (complain & tf_error)"}, {"sha": "7ad5e6d83d42227d34821b073b29ff5ea718ff37", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-30.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdae0133df72dab6604c2b9b25f6411e4c41e8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdae0133df72dab6604c2b9b25f6411e4c41e8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-30.C?ref=9bdae0133df72dab6604c2b9b25f6411e4c41e8b", "patch": "@@ -0,0 +1,15 @@\n+// Origin PR c++/55311\n+// { dg-do compile { target c++11 } }\n+\n+template <const char *const C, typename T>\n+struct A\n+{};\n+\n+struct B {};\n+\n+extern constexpr char HELLO_WORLD[] = \"hello world\";\n+\n+A<HELLO_WORLD, B> g; // <-- This works fine\n+\n+template <typename T>\n+using PartiallySpecialized = A<HELLO_WORLD, T>;  // <-- This fails"}, {"sha": "fc6abab551b036ee81528eac1b7072f79cc4e71d", "filename": "gcc/testsuite/g++.dg/init/array21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdae0133df72dab6604c2b9b25f6411e4c41e8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdae0133df72dab6604c2b9b25f6411e4c41e8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray21.C?ref=9bdae0133df72dab6604c2b9b25f6411e4c41e8b", "patch": "@@ -3,5 +3,5 @@\n void foo()\n {\n   const int x[] = 0; // { dg-error \"initializer\" }\n-  ++x;\n+  ++x; // { dg-error \"read-only|operand\" }\n }"}]}