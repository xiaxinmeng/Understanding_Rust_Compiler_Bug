{"sha": "38771e4e1fdacfbdac5a14e50fcc0538577b1bdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3NzFlNGUxZmRhY2ZiZGFjNWExNGU1MGZjYzA1Mzg1NzdiMWJkYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-12-09T18:51:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-09T18:51:04Z"}, "message": "Guard less code with the JIT mutex\n\ngcc/jit/ChangeLog:\n\t* jit-playback.c (gcc::jit::playback::context::compile): Acquire the\n\tmutex here, immediately before using toplev, and release it here, on\n\teach exit path after acquisition.\n\t(jit_mutex): Move this variable here, from jit-recording.c.\n\t(gcc::jit::playback::context::acquire_mutex): New function, based on\n\tcode in jit-recording.c.\n\t(gcc::jit::playback::context::release_mutex): Likewise.\n\t* jit-playback.h (gcc::jit::playback::context::acquire_mutex): New\n\tfunction.\n\t(gcc::jit::playback::context::release_mutex): New function.\n\t* jit-recording.c (jit_mutex): Move this variable to jit-playback.c.\n\t(gcc::jit::recording::context::compile): Move mutex-handling from\n\there into jit-playback.c's gcc::jit::playback::context::compile.\n\t* notes.txt: Update to show the new locations of ACQUIRE_MUTEX\n\tand RELEASE_MUTEX.\n\nFrom-SVN: r218528", "tree": {"sha": "dcf6ca65f430649752f2bbeab9e80301f3820f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcf6ca65f430649752f2bbeab9e80301f3820f24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38f4f64124c88933acc76325a256950d468022fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f4f64124c88933acc76325a256950d468022fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f4f64124c88933acc76325a256950d468022fa"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "6acd50b22e3f4e0647305bb8e77f5d5a43641c98", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=38771e4e1fdacfbdac5a14e50fcc0538577b1bdb", "patch": "@@ -1,3 +1,21 @@\n+2014-12-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit-playback.c (gcc::jit::playback::context::compile): Acquire the\n+\tmutex here, immediately before using toplev, and release it here, on\n+\teach exit path after acquisition.\n+\t(jit_mutex): Move this variable here, from jit-recording.c.\n+\t(gcc::jit::playback::context::acquire_mutex): New function, based on\n+\tcode in jit-recording.c.\n+\t(gcc::jit::playback::context::release_mutex): Likewise.\n+\t* jit-playback.h (gcc::jit::playback::context::acquire_mutex): New\n+\tfunction.\n+\t(gcc::jit::playback::context::release_mutex): New function.\n+\t* jit-recording.c (jit_mutex): Move this variable to jit-playback.c.\n+\t(gcc::jit::recording::context::compile): Move mutex-handling from\n+\there into jit-playback.c's gcc::jit::playback::context::compile.\n+\t* notes.txt: Update to show the new locations of ACQUIRE_MUTEX\n+\tand RELEASE_MUTEX.\n+\n 2014-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit-playback.c (gcc::jit::playback::context::compile): Move the"}, {"sha": "281ad85fa339b0e61f8a395a263fa5d069514c5c", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=38771e4e1fdacfbdac5a14e50fcc0538577b1bdb", "patch": "@@ -1622,6 +1622,9 @@ compile ()\n   if (errors_occurred ())\n     return NULL;\n \n+  /* Acquire the JIT mutex and set \"this\" as the active playback ctxt.  */\n+  acquire_mutex ();\n+\n   /* This runs the compiler.  */\n   toplev toplev (false);\n   toplev.main (fake_args.length (),\n@@ -1635,25 +1638,61 @@ compile ()\n   /* Clean up the compiler.  */\n   toplev.finalize ();\n \n-  active_playback_ctxt = NULL;\n+  /* Ideally we would release the jit mutex here, but we can't yet since\n+     followup activities use timevars, which are global state.  */\n \n   if (errors_occurred ())\n-    return NULL;\n+    {\n+      release_mutex ();\n+      return NULL;\n+    }\n \n   if (get_bool_option (GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE))\n     dump_generated_code ();\n \n   convert_to_dso (ctxt_progname);\n   if (errors_occurred ())\n-    return NULL;\n+    {\n+      release_mutex ();\n+      return NULL;\n+    }\n \n   result_obj = dlopen_built_dso ();\n \n+  release_mutex ();\n+\n   return result_obj;\n }\n \n /* Helper functions for gcc::jit::playback::context::compile.  */\n \n+/* This mutex guards gcc::jit::recording::context::compile, so that only\n+   one thread can be accessing the bulk of GCC's state at once.  */\n+\n+static pthread_mutex_t jit_mutex = PTHREAD_MUTEX_INITIALIZER;\n+\n+/* Acquire jit_mutex and set \"this\" as the active playback ctxt.  */\n+\n+void\n+playback::context::acquire_mutex ()\n+{\n+  /* Acquire the big GCC mutex. */\n+  pthread_mutex_lock (&jit_mutex);\n+  gcc_assert (NULL == active_playback_ctxt);\n+  active_playback_ctxt = this;\n+}\n+\n+/* Release jit_mutex and clear the active playback ctxt.  */\n+\n+void\n+playback::context::release_mutex ()\n+{\n+  /* Release the big GCC mutex. */\n+  gcc_assert (active_playback_ctxt == this);\n+  active_playback_ctxt = NULL;\n+  pthread_mutex_unlock (&jit_mutex);\n+}\n+\n /* Build a fake argv for toplev::main from the options set\n    by the user on the context .  */\n "}, {"sha": "1373ecc7b2b451477fee356161c505f13ef91065", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=38771e4e1fdacfbdac5a14e50fcc0538577b1bdb", "patch": "@@ -235,6 +235,9 @@ class context\n \n   /* Functions for implementing \"compile\".  */\n \n+  void acquire_mutex ();\n+  void release_mutex ();\n+\n   void\n   make_fake_args (vec <char *> *argvec,\n \t\t  const char *ctxt_progname,"}, {"sha": "bea2360ae5d3430a3fd55b2241df78f4bf8152e7", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=38771e4e1fdacfbdac5a14e50fcc0538577b1bdb", "patch": "@@ -888,12 +888,6 @@ recording::context::enable_dump (const char *dumpname,\n   m_requested_dumps.safe_push (d);\n }\n \n-\n-/* This mutex guards gcc::jit::recording::context::compile, so that only\n-   one thread can be accessing the bulk of GCC's state at once.  */\n-\n-static pthread_mutex_t jit_mutex = PTHREAD_MUTEX_INITIALIZER;\n-\n /* Validate this context, and if it passes, compile it within a\n    mutex.\n \n@@ -908,20 +902,12 @@ recording::context::compile ()\n   if (errors_occurred ())\n     return NULL;\n \n-  /* Acquire the big GCC mutex. */\n-  pthread_mutex_lock (&jit_mutex);\n-  gcc_assert (NULL == ::gcc::jit::active_playback_ctxt);\n-\n   /* Set up a playback context.  */\n   ::gcc::jit::playback::context replayer (this);\n-  ::gcc::jit::active_playback_ctxt = &replayer;\n \n+  /* Use it.  */\n   result *result_obj = replayer.compile ();\n \n-  /* Release the big GCC mutex. */\n-  ::gcc::jit::active_playback_ctxt = NULL;\n-  pthread_mutex_unlock (&jit_mutex);\n-\n   return result_obj;\n }\n "}, {"sha": "26f381e4177aec31ff3809dd898d2fe39313e7c1", "filename": "gcc/jit/notes.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb/gcc%2Fjit%2Fnotes.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb/gcc%2Fjit%2Fnotes.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fnotes.txt?ref=38771e4e1fdacfbdac5a14e50fcc0538577b1bdb", "patch": "@@ -20,11 +20,11 @@ Client Code   . Generated .            libgccjit.so\n     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>      .               .\n               .           .    \u2502 start of recording::context::compile ()\n               .           .    \u2502     .               .\n-              .           .    \u2502 ACQUIRE MUTEX       .\n-              .           .    \u2502     .               .\n               .           .    \u2502 start of playback::context::compile ()\n               .           .    \u2502   (create tempdir)  .\n               .           .    \u2502     .               .\n+              .           .    \u2502 ACQUIRE MUTEX       .\n+              .           .    \u2502     .               .\n               .           .    V\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500> toplev::main (for now)\n               .           .          .               .       \u2502\n               .           .          .               .   (various code)\n@@ -78,6 +78,8 @@ Client Code   . Generated .            libgccjit.so\n               .           .    \u2502     .               .\n               .           .    \u2502 Load DSO (dlopen \"fake.so\")\n               .           .    \u2502     .               .\n+              .           .    \u2502 RELEASE MUTEX       .\n+              .           .    \u2502     .               .\n               .           .    \u2502 end of playback::context::compile ()\n               .           .    \u2502     .               .\n               .           .    \u2502 playback::context dtor\n@@ -87,8 +89,6 @@ Client Code   . Generated .            libgccjit.so\n               .           .       \u2502    filesystem at this point)\n               .           .    <\u2500\u2500   .               .\n               .           .    \u2502     .               .\n-              .           .    \u2502 RELEASE MUTEX       .\n-              .           .    \u2502     .               .\n               .           .    \u2502 end of recording::context::compile ()\n    <\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      .               .\n    \u2502          .           .          .               ."}]}