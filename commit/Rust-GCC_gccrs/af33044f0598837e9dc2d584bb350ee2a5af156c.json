{"sha": "af33044f0598837e9dc2d584bb350ee2a5af156c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYzMzA0NGYwNTk4ODM3ZTlkYzJkNTg0YmIzNTBlZTJhNWFmMTU2Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-04-01T18:17:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-04-01T18:17:38Z"}, "message": "re PR tree-optimization/31169 (Bootstrap comparison error at revision 122821)\n\n        PR tree-optimization/31169 \n        * tree-vrp.c (extract_range_from_binary_expr) <RSHIFT_EXPR>: Drop\n        to varying if the range is outside [0,  prec-1].\n\nFrom-SVN: r123405", "tree": {"sha": "60c36006c1f1d38e5a8127cbbc7d68f8fab38359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60c36006c1f1d38e5a8127cbbc7d68f8fab38359"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af33044f0598837e9dc2d584bb350ee2a5af156c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af33044f0598837e9dc2d584bb350ee2a5af156c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af33044f0598837e9dc2d584bb350ee2a5af156c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af33044f0598837e9dc2d584bb350ee2a5af156c/comments", "author": null, "committer": null, "parents": [{"sha": "a616b1da79fa53234feb3367578720f0d6573cdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a616b1da79fa53234feb3367578720f0d6573cdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a616b1da79fa53234feb3367578720f0d6573cdc"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "81606be4cd3b71636447d692f1333ba0e3c0e4fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af33044f0598837e9dc2d584bb350ee2a5af156c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af33044f0598837e9dc2d584bb350ee2a5af156c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af33044f0598837e9dc2d584bb350ee2a5af156c", "patch": "@@ -1,3 +1,9 @@\n+2007-04-01  Richard Henderson  <rth@redhat.com>\n+\n+\tPR tree-optimization/31169\n+\t* tree-vrp.c (extract_range_from_binary_expr) <RSHIFT_EXPR>: Drop\n+\tto varying if the range is outside [0,  prec-1].\n+\n 2007-04-01  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR target/31388"}, {"sha": "dbb97de887a29a6acb6d7c2fa83f5e985a90f2e9", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af33044f0598837e9dc2d584bb350ee2a5af156c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af33044f0598837e9dc2d584bb350ee2a5af156c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=af33044f0598837e9dc2d584bb350ee2a5af156c", "patch": "@@ -1813,15 +1813,23 @@ extract_range_from_binary_expr (value_range_t *vr, tree expr)\n \t  return;\n \t}\n \n-      /* If we have a RSHIFT_EXPR with a possibly negative shift\n-\t count or an anti-range shift count drop to VR_VARYING.\n-\t We currently cannot handle the overflow cases correctly.  */\n-      if (code == RSHIFT_EXPR\n-\t  && (vr1.type == VR_ANTI_RANGE\n-\t      || !vrp_expr_computes_nonnegative (op1, &sop)))\n+      /* If we have a RSHIFT_EXPR with any shift values outside [0..prec-1],\n+\t then drop to VR_VARYING.  Outside of this range we get undefined\n+\t behaviour from the shift operation.  We cannot even trust\n+\t SHIFT_COUNT_TRUNCATED at this stage, because that applies to rtl\n+\t shifts, and the operation at the tree level may be widened.  */\n+      if (code == RSHIFT_EXPR)\n \t{\n-\t  set_value_range_to_varying (vr);\n-\t  return;\n+\t  if (vr1.type == VR_ANTI_RANGE\n+\t      || !vrp_expr_computes_nonnegative (op1, &sop)\n+\t      || (operand_less_p\n+\t\t  (build_int_cst (TREE_TYPE (vr1.max),\n+\t\t\t\t  TYPE_PRECISION (TREE_TYPE (expr)) - 1),\n+\t\t   vr1.max) != 0))\n+\t    {\n+\t      set_value_range_to_varying (vr);\n+\t      return;\n+\t    }\n \t}\n \n       /* Multiplications and divisions are a bit tricky to handle,\n@@ -1838,9 +1846,8 @@ extract_range_from_binary_expr (value_range_t *vr, tree expr)\n \t the new range.  */\n \n       /* Divisions by zero result in a VARYING value.  */\n-      if ((code != MULT_EXPR\n-\t   && code != RSHIFT_EXPR)\n-\t  && (vr0.type == VR_ANTI_RANGE || range_includes_zero_p (&vr1)))\n+      else if (code != MULT_EXPR\n+\t       && (vr0.type == VR_ANTI_RANGE || range_includes_zero_p (&vr1)))\n \t{\n \t  set_value_range_to_varying (vr);\n \t  return;"}]}