{"sha": "7da9a089608b0ca09683332ce014fb6184842724", "node_id": "C_kwDOANBUbNoAKDdkYTlhMDg5NjA4YjBjYTA5NjgzMzMyY2UwMTRmYjYxODQ4NDI3MjQ", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-01T20:55:58Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-18T21:43:56Z"}, "message": "c: Implement new -Wenum-int-mismatch warning [PR105131]\n\nIn C, an enumerated type is compatible with char, a signed integer type,\nor an unsigned integer type (6.7.2.2/5).  Therefore this code compiles:\n\n  enum E { l = -1, z = 0, g = 1 };\n  int foo(void);\n  enum E foo(void) { return z; }\n\nif the underlying type of 'enum E' is 'int' (if not, we emit an error).\nThis is different for typedefs, where C11 permits typedefs to be\nredeclared to the same type, but not to compatible types.  In C++, the\ncode above is invalid.\n\nIt seems desirable to emit a warning in the C case, because it is\nprobably a mistake and definitely a portability error, given that the\nchoice of the underlying type is implementation-defined.\n\nTo that end, this patch implements a new -Wenum-int-mismatch warning.\nConveniently, we already have comptypes_check_enum_int to detect such\nmismatches.  This warning is enabled by either -Wall or -Wc++-compat.\n\n\tPR c/105131\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt (Wenum-int-mismatch): New.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.cc (diagnose_mismatched_decls): Warn about enum/integer type\n\tmismatches.\n\t* c-tree.h (comptypes_check_enum_int): Declare.\n\t* c-typeck.cc (comptypes): No longer static.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Document -Wenum-int-mismatch.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Wenum-int-mismatch-1.c: New test.\n\t* gcc.dg/Wenum-int-mismatch-2.c: New test.\n\t* gcc.dg/Wenum-int-mismatch-3.c: New test.\n\t* gcc.dg/Wenum-int-mismatch-4.c: New test.\n\t* gcc.dg/Wenum-int-mismatch-5.c: New test.", "tree": {"sha": "a66671c0a6edc1a4191f4ec0d97d6a5c55ff6191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a66671c0a6edc1a4191f4ec0d97d6a5c55ff6191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7da9a089608b0ca09683332ce014fb6184842724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da9a089608b0ca09683332ce014fb6184842724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7da9a089608b0ca09683332ce014fb6184842724", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da9a089608b0ca09683332ce014fb6184842724/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1875214cd1ca3e8bd0121f703537eb98edd84027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1875214cd1ca3e8bd0121f703537eb98edd84027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1875214cd1ca3e8bd0121f703537eb98edd84027"}], "stats": {"total": 180, "additions": 177, "deletions": 3}, "files": [{"sha": "41a20bc625e9d9235efed5f47c0106701cbbc953", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=7da9a089608b0ca09683332ce014fb6184842724", "patch": "@@ -638,6 +638,10 @@ Wenum-conversion\n C ObjC C++ ObjC++ Var(warn_enum_conversion) Init(0) Warning LangEnabledBy(C ObjC,Wextra)\n Warn about implicit conversion of enum types.\n \n+Wenum-int-mismatch\n+C ObjC Var(warn_enum_int_mismatch) Warning LangEnabledBy(C ObjC,Wall || Wc++-compat)\n+Warn about enum/integer type mismatches.\n+\n Werror\n C ObjC C++ ObjC++\n ; Documented in common.opt"}, {"sha": "5266a61b8597ce23144d11172d2e6c2bfc01fefb", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=7da9a089608b0ca09683332ce014fb6184842724", "patch": "@@ -1993,9 +1993,12 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \n   bool pedwarned = false;\n   bool warned = false;\n+  bool enum_and_int_p = false;\n   auto_diagnostic_group d;\n \n-  if (!comptypes (oldtype, newtype))\n+  int comptypes_result = comptypes_check_enum_int (oldtype, newtype,\n+\t\t\t\t\t\t   &enum_and_int_p);\n+  if (!comptypes_result)\n     {\n       if (TREE_CODE (olddecl) == FUNCTION_DECL\n \t  && fndecl_built_in_p (olddecl, BUILT_IN_NORMAL)\n@@ -2137,6 +2140,13 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t  return false;\n \t}\n     }\n+  /* Warn about enum/integer type mismatches.  They are compatible types\n+     (C2X 6.7.2.2/5), but may pose portability problems.  */\n+  else if (enum_and_int_p && TREE_CODE (newdecl) != TYPE_DECL)\n+    warned = warning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t\t\t OPT_Wenum_int_mismatch,\n+\t\t\t \"conflicting types for %q+D due to enum/integer \"\n+\t\t\t \"mismatch; have %qT\", newdecl, newtype);\n \n   /* Redeclaration of a type is a constraint violation (6.7.2.3p1),\n      but silently ignore the redeclaration if either is in a system\n@@ -2146,7 +2156,6 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   if (TREE_CODE (newdecl) == TYPE_DECL)\n     {\n       bool types_different = false;\n-      int comptypes_result;\n \n       comptypes_result\n \t= comptypes_check_different_types (oldtype, newtype, &types_different);"}, {"sha": "2bcb9662620a27c793870bbac3c7cfbc7c7bd850", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=7da9a089608b0ca09683332ce014fb6184842724", "patch": "@@ -685,6 +685,7 @@ extern tree require_complete_type (location_t, tree);\n extern bool same_translation_unit_p (const_tree, const_tree);\n extern int comptypes (tree, tree);\n extern int comptypes_check_different_types (tree, tree, bool *);\n+extern int comptypes_check_enum_int (tree, tree, bool *);\n extern bool c_vla_type_p (const_tree);\n extern bool c_mark_addressable (tree, bool = false);\n extern void c_incomplete_type_error (location_t, const_tree, const_tree);"}, {"sha": "4f3611f1b89583b04fc886ee6b36346f0b379a0b", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=7da9a089608b0ca09683332ce014fb6184842724", "patch": "@@ -1055,7 +1055,7 @@ comptypes (tree type1, tree type2)\n /* Like comptypes, but if it returns non-zero because enum and int are\n    compatible, it sets *ENUM_AND_INT_P to true.  */\n \n-static int\n+int\n comptypes_check_enum_int (tree type1, tree type2, bool *enum_and_int_p)\n {\n   const struct tagged_tu_seen_cache * tagged_tu_seen_base1 = tagged_tu_seen_base;"}, {"sha": "98a543ae06fdae31c7a4af641572f84d156b7607", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7da9a089608b0ca09683332ce014fb6184842724", "patch": "@@ -349,6 +349,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-div-by-zero  -Wdouble-promotion @gol\n -Wduplicated-branches  -Wduplicated-cond @gol\n -Wempty-body  -Wno-endif-labels  -Wenum-compare  -Wenum-conversion @gol\n+-Wenum-int-mismatch @gol\n -Werror  -Werror=*  -Wexpansion-to-defined  -Wfatal-errors @gol\n -Wfloat-conversion  -Wfloat-equal  -Wformat  -Wformat=2 @gol\n -Wno-format-contains-nul  -Wno-format-extra-args  @gol\n@@ -5759,6 +5760,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wdangling-pointer=2  @gol\n -Wduplicate-decl-specifier @r{(C and Objective-C only)} @gol\n -Wenum-compare @r{(in C/ObjC; this is on by default in C++)} @gol\n+-Wenum-int-mismatch @r{(C and Objective-C only)} @gol\n -Wformat   @gol\n -Wformat-overflow  @gol\n -Wformat-truncation  @gol\n@@ -8735,6 +8737,25 @@ Warn when a value of enumerated type is implicitly converted to a\n different enumerated type.  This warning is enabled by @option{-Wextra}\n in C@.\n \n+@item -Wenum-int-mismatch @r{(C and Objective-C only)}\n+@opindex Wenum-int-mismatch\n+@opindex Wno-enum-int-mismatch\n+Warn about mismatches between an enumerated type and an integer type in\n+declarations.  For example:\n+\n+@smallexample\n+enum E @{ l = -1, z = 0, g = 1 @};\n+int foo(void);\n+enum E foo(void);\n+@end smallexample\n+\n+In C, an enumerated type is compatible with @code{char}, a signed\n+integer type, or an unsigned integer type.  However, since the choice\n+of the underlying type of an enumerated type is implementation-defined,\n+such mismatches may cause portability issues.  In C++, such mismatches\n+are an error.  In C, this warning is enabled by @option{-Wall} and\n+@option{-Wc++-compat}.\n+\n @item -Wjump-misses-init @r{(C, Objective-C only)}\n @opindex Wjump-misses-init\n @opindex Wno-jump-misses-init"}, {"sha": "629801833de994aeb58f0834f607d950e554166b", "filename": "gcc/testsuite/gcc.dg/Wenum-int-mismatch-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-1.c?ref=7da9a089608b0ca09683332ce014fb6184842724", "patch": "@@ -0,0 +1,43 @@\n+/* PR c/105131 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -fno-short-enums\" } */\n+\n+enum E { E1 = -1, E2 = 0, E3 = 1 };\n+\n+int foo(void); /* { dg-message \"previous declaration\" } */\n+enum E foo(void) { return E2; } /* { dg-warning \"conflicting types\" } */\n+\n+void bar(int); /* { dg-message \"previous declaration\" } */\n+void bar(enum E); /* { dg-warning \"conflicting types\" } */\n+\n+extern int arr[10]; /* { dg-message \"previous declaration\" } */\n+extern enum E arr[10]; /* { dg-warning \"conflicting types\" } */\n+\n+extern int i; /* { dg-message \"previous declaration\" } */\n+extern enum E i; /* { dg-warning \"conflicting types\" } */\n+\n+extern int *p; /* { dg-message \"previous declaration\" } */\n+extern enum E *p; /* { dg-warning \"conflicting types\" } */\n+\n+enum E foo2(void) { return E2; } /* { dg-message \"previous definition\" } */\n+int foo2(void); /* { dg-warning \"conflicting types\" } */\n+\n+void bar2(enum E); /* { dg-message \"previous declaration\" } */\n+void bar2(int); /* { dg-warning \"conflicting types\" } */\n+\n+extern enum E arr2[10]; /* { dg-message \"previous declaration\" } */\n+extern int arr2[10]; /* { dg-warning \"conflicting types\" } */\n+\n+extern enum E i2; /* { dg-message \"previous declaration\" } */\n+extern int i2; /* { dg-warning \"conflicting types\" } */\n+\n+extern enum E *p2; /* { dg-message \"previous declaration\" } */\n+extern int *p2; /* { dg-warning \"conflicting types\" } */\n+\n+enum F { F1 = -1, F2, F3 } __attribute__ ((__packed__));\n+\n+enum F fn1(void); /* { dg-message \"previous declaration\" } */\n+signed char fn1(void); /* { dg-warning \"conflicting types\" } */\n+\n+signed char fn2(void); /* { dg-message \"previous declaration\" } */\n+enum F fn2(void); /* { dg-warning \"conflicting types\" } */"}, {"sha": "e5f75003d6a2d1481300a661e650ed3767b0cb18", "filename": "gcc/testsuite/gcc.dg/Wenum-int-mismatch-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-2.c?ref=7da9a089608b0ca09683332ce014fb6184842724", "patch": "@@ -0,0 +1,43 @@\n+/* PR c/105131 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -fno-short-enums\" } */\n+\n+enum E { E1 = 0, E2, E3 };\n+\n+unsigned int foo(void); /* { dg-message \"previous declaration\" } */\n+enum E foo(void) { return E2; } /* { dg-warning \"conflicting types\" } */\n+\n+void bar(unsigned int); /* { dg-message \"previous declaration\" } */\n+void bar(enum E); /* { dg-warning \"conflicting types\" } */\n+\n+extern enum E arr[10]; /* { dg-message \"previous declaration\" } */\n+extern unsigned int arr[10]; /* { dg-warning \"conflicting types\" } */\n+\n+extern unsigned int i; /* { dg-message \"previous declaration\" } */\n+extern enum E i; /* { dg-warning \"conflicting types\" } */\n+\n+extern unsigned int *p; /* { dg-message \"previous declaration\" } */\n+extern enum E *p; /* { dg-warning \"conflicting types\" } */\n+\n+enum E foo2(void) { return E2; } /* { dg-message \"previous definition\" } */\n+unsigned int foo2(void); /* { dg-warning \"conflicting types\" } */\n+\n+void bar2(enum E); /* { dg-message \"previous declaration\" } */\n+void bar2(unsigned int); /* { dg-warning \"conflicting types\" } */\n+\n+extern unsigned int arr2[10]; /* { dg-message \"previous declaration\" } */\n+extern enum E arr2[10]; /* { dg-warning \"conflicting types\" } */\n+\n+extern enum E i2; /* { dg-message \"previous declaration\" } */\n+extern unsigned int i2; /* { dg-warning \"conflicting types\" } */\n+\n+extern enum E *p2; /* { dg-message \"previous declaration\" } */\n+extern unsigned int *p2; /* { dg-warning \"conflicting types\" } */\n+\n+enum F { F1 = 1u, F2, F3 } __attribute__ ((__packed__));\n+\n+enum F fn1(void); /* { dg-message \"previous declaration\" } */\n+unsigned char fn1(void); /* { dg-warning \"conflicting types\" } */\n+\n+unsigned char fn2(void); /* { dg-message \"previous declaration\" } */\n+enum F fn2(void); /* { dg-warning \"conflicting types\" } */"}, {"sha": "4ddbeb152d8a957c8fe3eeeaf6bccd064fd9a917", "filename": "gcc/testsuite/gcc.dg/Wenum-int-mismatch-3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-3.c?ref=7da9a089608b0ca09683332ce014fb6184842724", "patch": "@@ -0,0 +1,43 @@\n+/* PR c/105131 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat -fno-short-enums\" } */\n+\n+enum E { E1 = -1, E2 = 0, E3 = 1 };\n+\n+int foo(void); /* { dg-message \"previous declaration\" } */\n+enum E foo(void) { return E2; } /* { dg-warning \"conflicting types\" } */\n+\n+void bar(int); /* { dg-message \"previous declaration\" } */\n+void bar(enum E); /* { dg-warning \"conflicting types\" } */\n+\n+extern int arr[10]; /* { dg-message \"previous declaration\" } */\n+extern enum E arr[10]; /* { dg-warning \"conflicting types\" } */\n+\n+extern int i; /* { dg-message \"previous declaration\" } */\n+extern enum E i; /* { dg-warning \"conflicting types\" } */\n+\n+extern int *p; /* { dg-message \"previous declaration\" } */\n+extern enum E *p; /* { dg-warning \"conflicting types\" } */\n+\n+enum E foo2(void) { return E2; } /* { dg-message \"previous definition\" } */\n+int foo2(void); /* { dg-warning \"conflicting types\" } */\n+\n+void bar2(enum E); /* { dg-message \"previous declaration\" } */\n+void bar2(int); /* { dg-warning \"conflicting types\" } */\n+\n+extern enum E arr2[10]; /* { dg-message \"previous declaration\" } */\n+extern int arr2[10]; /* { dg-warning \"conflicting types\" } */\n+\n+extern enum E i2; /* { dg-message \"previous declaration\" } */\n+extern int i2; /* { dg-warning \"conflicting types\" } */\n+\n+extern enum E *p2; /* { dg-message \"previous declaration\" } */\n+extern int *p2; /* { dg-warning \"conflicting types\" } */\n+\n+enum F { F1 = -1, F2, F3 } __attribute__ ((__packed__));\n+\n+enum F fn1(void); /* { dg-message \"previous declaration\" } */\n+signed char fn1(void); /* { dg-warning \"conflicting types\" } */\n+\n+signed char fn2(void); /* { dg-message \"previous declaration\" } */\n+enum F fn2(void); /* { dg-warning \"conflicting types\" } */"}, {"sha": "fcaca2834576f6f34e5777cc1aadbb384b4febca", "filename": "gcc/testsuite/gcc.dg/Wenum-int-mismatch-4.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-4.c?ref=7da9a089608b0ca09683332ce014fb6184842724", "patch": "@@ -0,0 +1,5 @@\n+/* PR c/105131 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-short-enums\" } */\n+\n+#include \"Wenum-int-mismatch-1.c\""}, {"sha": "db24fd32f00b315ec6d1d77ae9880da47bf2a6dc", "filename": "gcc/testsuite/gcc.dg/Wenum-int-mismatch-5.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da9a089608b0ca09683332ce014fb6184842724/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWenum-int-mismatch-5.c?ref=7da9a089608b0ca09683332ce014fb6184842724", "patch": "@@ -0,0 +1,5 @@\n+/* PR c/105131 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-short-enums\" } */\n+\n+#include \"Wenum-int-mismatch-2.c\""}]}