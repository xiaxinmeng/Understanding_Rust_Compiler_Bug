{"sha": "feb801f62239528bca2cfb6c3abd70d434b69c0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmViODAxZjYyMjM5NTI4YmNhMmNmYjZjM2FiZDcwZDQzNGI2OWMwYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-23T00:12:47Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-27T01:08:41Z"}, "message": "c++: Explicit constructor called in copy-initialization [PR90320]\n\nThis test is rejected with a bogus \"use of deleted function\" error\nstarting with r225705 whereby convert_like_real/ck_base no longer\nsets LOOKUP_ONLYCONVERTING for user_conv_p conversions.  This does\nnot seem to be always correct.  To recap, when we have something like\nT t = x where T is a class type and the type of x is not T or derived\nfrom T, we perform copy-initialization, something like:\n  1. choose a user-defined conversion to convert x to T, the result is\n     a prvalue,\n  2. use this prvalue to direct-initialize t.\n\nIn the second step, explicit constructors should be considered, since\nwe're direct-initializing.  This is what r225705 fixed.\n\nIn this PR we are dealing with the first step, I think, where explicit\nconstructors should be skipped.  [over.match.copy] says \"The converting\nconstructors of T are candidate functions\" which clearly eliminates\nexplicit constructors.  But we also have to copy-initialize the argument\nwe are passing to such a converting constructor, and here we should\ndisregard explicit constructors too.\n\nIn this testcase we have\n\n  V v = m;\n\nand we choose V::V(M) to convert m to V.  But we wrongly choose\nthe explicit M::M<M&>(M&) to copy-initialize the argument; it's\na better match for a non-const lvalue than the implicit M::M(const M&)\nbut because it's explicit, we shouldn't use it.\n\nWhen convert_like is processing the ck_user conversion -- the convfn is\nV::V(M) -- it can see that cand->flags contains LOOKUP_ONLYCONVERTING,\nbut then when we're in build_over_call for this convfn, we have no way\nto pass the flag to convert_like for the argument 'm', because convert_like\ndoesn't take flags.  Fixed by creating a new conversion flag, copy_init_p,\nset in ck_base/ck_rvalue to signal that explicit constructors should be\nskipped.\n\nLOOKUP_COPY_PARM looks relevant, but again, it's a LOOKUP_* flag, so\ncan't pass it to convert_like.  DR 899 also seemed related, but that\ndeals with direct-init contexts only.\n\n\tPR c++/90320\n\t* call.c (struct conversion): Add copy_init_p.\n\t(standard_conversion): Set copy_init_p in ck_base and ck_rvalue\n\tif FLAGS demands LOOKUP_ONLYCONVERTING.\n\t(convert_like_real) <case ck_base>: If copy_init_p is set, or\n\tLOOKUP_ONLYCONVERTING into FLAGS.\n\n\t* g++.dg/cpp0x/explicit13.C: New test.\n\t* g++.dg/cpp0x/explicit14.C: New test.", "tree": {"sha": "e5b98b248b797bf5a63855496422ea0c647d4708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5b98b248b797bf5a63855496422ea0c647d4708"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feb801f62239528bca2cfb6c3abd70d434b69c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb801f62239528bca2cfb6c3abd70d434b69c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feb801f62239528bca2cfb6c3abd70d434b69c0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb801f62239528bca2cfb6c3abd70d434b69c0a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c80863570664e7754ba1a4b8c1df6a19b2589920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80863570664e7754ba1a4b8c1df6a19b2589920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80863570664e7754ba1a4b8c1df6a19b2589920"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "4e0ea91883d79dc39ccbc71256b3fbfa417e328e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb801f62239528bca2cfb6c3abd70d434b69c0a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb801f62239528bca2cfb6c3abd70d434b69c0a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=feb801f62239528bca2cfb6c3abd70d434b69c0a", "patch": "@@ -1,3 +1,12 @@\n+2020-04-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/90320\n+\t* call.c (struct conversion): Add copy_init_p.\n+\t(standard_conversion): Set copy_init_p in ck_base and ck_rvalue\n+\tif FLAGS demands LOOKUP_ONLYCONVERTING.\n+\t(convert_like_real) <case ck_base>: If copy_init_p is set, or\n+\tLOOKUP_ONLYCONVERTING into FLAGS.\n+\n 2020-04-26  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/94752"}, {"sha": "8345997ccf9a54984f4bc85822aa35615dd35783", "filename": "gcc/cp/call.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb801f62239528bca2cfb6c3abd70d434b69c0a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb801f62239528bca2cfb6c3abd70d434b69c0a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=feb801f62239528bca2cfb6c3abd70d434b69c0a", "patch": "@@ -92,7 +92,7 @@ struct conversion {\n      language standards, e.g. disregarding pointer qualifiers or\n      converting integers to pointers.  */\n   BOOL_BITFIELD bad_p : 1;\n-  /* If KIND is ck_ref_bind ck_base_conv, true to indicate that a\n+  /* If KIND is ck_ref_bind or ck_base, true to indicate that a\n      temporary should be created to hold the result of the\n      conversion.  If KIND is ck_ambig or ck_user, true means force\n      copy-initialization.  */\n@@ -111,6 +111,10 @@ struct conversion {\n   /* Whether check_narrowing should only check TREE_CONSTANTs; used\n      in build_converted_constant_expr.  */\n   BOOL_BITFIELD check_narrowing_const_only: 1;\n+  /* True if this conversion is taking place in a copy-initialization context\n+     and we should only consider converting constructors.  Only set in\n+     ck_base and ck_rvalue.  */\n+  BOOL_BITFIELD copy_init_p : 1;\n   /* The type of the expression resulting from the conversion.  */\n   tree type;\n   union {\n@@ -1252,6 +1256,10 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n       if (flags & LOOKUP_PREFER_RVALUE)\n \t/* Tell convert_like_real to set LOOKUP_PREFER_RVALUE.  */\n \tconv->rvaluedness_matches_p = true;\n+      /* If we're performing copy-initialization, remember to skip\n+\t explicit constructors.  */\n+      if (flags & LOOKUP_ONLYCONVERTING)\n+\tconv->copy_init_p = true;\n     }\n \n    /* Allow conversion between `__complex__' data types.  */\n@@ -1528,6 +1536,10 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n       if (flags & LOOKUP_PREFER_RVALUE)\n \t/* Tell convert_like_real to set LOOKUP_PREFER_RVALUE.  */\n \tconv->rvaluedness_matches_p = true;\n+      /* If we're performing copy-initialization, remember to skip\n+\t explicit constructors.  */\n+      if (flags & LOOKUP_ONLYCONVERTING)\n+\tconv->copy_init_p = true;\n     }\n   else\n     return NULL;\n@@ -7653,12 +7665,16 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t type is the same class as, or a derived class of, the class of the\n \t destination [is treated as direct-initialization].  [dcl.init] */\n       flags = LOOKUP_NORMAL;\n+      /* This conversion is being done in the context of a user-defined\n+\t conversion (i.e. the second step of copy-initialization), so\n+\t don't allow any more.  */\n       if (convs->user_conv_p)\n-\t/* This conversion is being done in the context of a user-defined\n-\t   conversion (i.e. the second step of copy-initialization), so\n-\t   don't allow any more.  */\n \tflags |= LOOKUP_NO_CONVERSION;\n-      else\n+      /* We might be performing a conversion of the argument\n+\t to the user-defined conversion, i.e., not a conversion of the\n+\t result of the user-defined conversion.  In which case we skip\n+\t explicit constructors.  */\n+      if (convs->copy_init_p)\n \tflags |= LOOKUP_ONLYCONVERTING;\n       if (convs->rvaluedness_matches_p)\n \t/* standard_conversion got LOOKUP_PREFER_RVALUE.  */"}, {"sha": "1e3325853e1f4f6cc00b286012e0f6373917167e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb801f62239528bca2cfb6c3abd70d434b69c0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb801f62239528bca2cfb6c3abd70d434b69c0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=feb801f62239528bca2cfb6c3abd70d434b69c0a", "patch": "@@ -1,3 +1,9 @@\n+2020-04-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/90320\n+\t* g++.dg/cpp0x/explicit13.C: New test.\n+\t* g++.dg/cpp0x/explicit14.C: New test.\n+\n 2020-04-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/89418"}, {"sha": "cbd9a73d8fcbe0567961dd61cfa2b3ebec3d89a3", "filename": "gcc/testsuite/g++.dg/cpp0x/explicit13.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb801f62239528bca2cfb6c3abd70d434b69c0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb801f62239528bca2cfb6c3abd70d434b69c0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit13.C?ref=feb801f62239528bca2cfb6c3abd70d434b69c0a", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/90320\n+// { dg-do compile { target c++11 } }\n+\n+struct M {\n+  M() = default;\n+  template <typename T> explicit M(T&&) = delete;\n+};\n+\n+struct V {\n+  V(M m);\n+};\n+\n+M m;\n+V v = m;"}, {"sha": "8a8adfe16773a5652bec08ad0370df702002e4a5", "filename": "gcc/testsuite/g++.dg/cpp0x/explicit14.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb801f62239528bca2cfb6c3abd70d434b69c0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb801f62239528bca2cfb6c3abd70d434b69c0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit14.C?ref=feb801f62239528bca2cfb6c3abd70d434b69c0a", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/90320\n+// { dg-do compile { target c++11 } }\n+\n+struct B { };\n+\n+struct M : B {\n+  M() = default;\n+  template <typename T> explicit M(T&&) = delete;\n+};\n+\n+struct V {\n+  V(B);\n+};\n+\n+M m;\n+V v = m;"}]}