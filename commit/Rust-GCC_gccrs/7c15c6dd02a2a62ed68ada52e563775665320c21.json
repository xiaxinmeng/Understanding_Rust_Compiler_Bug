{"sha": "7c15c6dd02a2a62ed68ada52e563775665320c21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MxNWM2ZGQwMmEyYTYyZWQ2OGFkYTUyZTU2Mzc3NTY2NTMyMGMyMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T09:54:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T09:54:26Z"}, "message": "[multiple changes]\n\n2017-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch7.adb (Has_Referencer): Move up and expand comment\n\texplaining the test used to detect inlining.  Use same test\n\tin second occurrence.\n\t(Analyze_Package_Body_Helper): Minor formatting fixes.\n\n2017-09-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Handle_Changed_Representation): For an untagged\n\tderived type with a mixture of renamed and constrained parent\n\tdiscriminants, the constraint for the target must obtain the\n\tdiscriminant values from both the operand and from the stored\n\tconstraint for it, given that the constrained discriminants are\n\tnot visible in the object.\n\t* exp_ch5.adb (Make_Field_Assign): The type of the right-hand\n\tside may be derived from that of the left-hand side (as in the\n\tcase of an assignment with a change of representation) so the\n\tdiscriminant to be used in the retrieval of the value of the\n\tcomponent must be the entity in the type of the right-hand side.\n\nFrom-SVN: r251763", "tree": {"sha": "5ad17b86a49aa4a6a46ee6739677a75b04d410fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ad17b86a49aa4a6a46ee6739677a75b04d410fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c15c6dd02a2a62ed68ada52e563775665320c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c15c6dd02a2a62ed68ada52e563775665320c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c15c6dd02a2a62ed68ada52e563775665320c21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c15c6dd02a2a62ed68ada52e563775665320c21/comments", "author": null, "committer": null, "parents": [{"sha": "c23c86bb171edf47767dbc56545c0b535b526c5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c23c86bb171edf47767dbc56545c0b535b526c5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c23c86bb171edf47767dbc56545c0b535b526c5b"}], "stats": {"total": 145, "additions": 112, "deletions": 33}, "files": [{"sha": "d91c4b3678485c2ce032ee28e75749ee56b312f4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c15c6dd02a2a62ed68ada52e563775665320c21/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c15c6dd02a2a62ed68ada52e563775665320c21/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7c15c6dd02a2a62ed68ada52e563775665320c21", "patch": "@@ -1,3 +1,24 @@\n+2017-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch7.adb (Has_Referencer): Move up and expand comment\n+\texplaining the test used to detect inlining.  Use same test\n+\tin second occurrence.\n+\t(Analyze_Package_Body_Helper): Minor formatting fixes.\n+\n+2017-09-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Handle_Changed_Representation): For an untagged\n+\tderived type with a mixture of renamed and constrained parent\n+\tdiscriminants, the constraint for the target must obtain the\n+\tdiscriminant values from both the operand and from the stored\n+\tconstraint for it, given that the constrained discriminants are\n+\tnot visible in the object.\n+\t* exp_ch5.adb (Make_Field_Assign): The type of the right-hand\n+\tside may be derived from that of the left-hand side (as in the\n+\tcase of an assignment with a change of representation) so the\n+\tdiscriminant to be used in the retrieval of the value of the\n+\tcomponent must be the entity in the type of the right-hand side.\n+\n 2017-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch3.adb, sem_ch7.adb, sem_util.adb, g-debpoo.adb, sem_ch4.adb,\n@@ -11,7 +32,6 @@\n \n \t* sem_prag.adb: Update description of Eliminate.\n \n-\n 2017-09-06  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_attr.adb (Analyze_Attribute, case 'Loop_Entry): Handle\n@@ -179,7 +199,6 @@\n \n \t* fe.h (Eliminate_Error_Msg): Remove.\n \n-\n 2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc-interface/utils.c (make_packable_type): Update call to"}, {"sha": "7f64cde371dc4e2ef47f534831f82759cf83132c", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 61, "deletions": 15, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c15c6dd02a2a62ed68ada52e563775665320c21/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c15c6dd02a2a62ed68ada52e563775665320c21/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=7c15c6dd02a2a62ed68ada52e563775665320c21", "patch": "@@ -10627,7 +10627,6 @@ package body Exp_Ch4 is\n          Temp : Entity_Id;\n          Decl : Node_Id;\n          Odef : Node_Id;\n-         Disc : Node_Id;\n          N_Ix : Node_Id;\n          Cons : List_Id;\n \n@@ -10657,22 +10656,69 @@ package body Exp_Ch4 is\n \n             if not Is_Constrained (Target_Type) then\n                if Has_Discriminants (Operand_Type) then\n-                  Disc := First_Discriminant (Operand_Type);\n \n-                  if Disc /= First_Stored_Discriminant (Operand_Type) then\n-                     Disc := First_Stored_Discriminant (Operand_Type);\n-                  end if;\n+                  --  A change of representation can only apply to untagged\n+                  --  types. We need to build the constraint that applies to\n+                  --  the target type, using the constraints of the operand.\n+                  --  The analysis is complicated if there are both inherited\n+                  --  discriminants and constrained discriminants.\n+                  --  We iterate over the discriminants of the target, and\n+                  --  find the discriminant of the same name:\n \n-                  Cons := New_List;\n-                  while Present (Disc) loop\n-                     Append_To (Cons,\n-                       Make_Selected_Component (Loc,\n-                         Prefix        =>\n-                           Duplicate_Subexpr_Move_Checks (Operand),\n-                         Selector_Name =>\n-                           Make_Identifier (Loc, Chars (Disc))));\n-                     Next_Discriminant (Disc);\n-                  end loop;\n+                  --  a) If there is a corresponding discriminant in the object\n+                  --  then the value is a selected component of the operand.\n+\n+                  --  b) Otherwise the value of a constrained discriminant is\n+                  --  found in the stored constraint of the operand.\n+\n+                  declare\n+                     Stored : constant Elist_Id :=\n+                       Stored_Constraint (Operand_Type);\n+\n+                     Elmt : Elmt_Id;\n+\n+                     Disc_O : Entity_Id;\n+                     --  Discriminant of the operand type. Its value in the\n+                     --  the object is captured in a selected component.\n+\n+                     Disc_S : Entity_Id;\n+                     --  Stored discriminant of the operand. If present, it\n+                     --  corresponds to a constrained discriminant of the\n+                     --  parent type.\n+\n+                     Disc_T : Entity_Id;\n+                     --  Discriminant of the target type\n+\n+                  begin\n+                     Disc_T := First_Discriminant (Target_Type);\n+                     Disc_O := First_Discriminant (Operand_Type);\n+                     Disc_S := First_Stored_Discriminant (Operand_Type);\n+\n+                     if Present (Stored) then\n+                        Elmt := First_Elmt (Stored);\n+                     end if;\n+\n+                     Cons := New_List;\n+                     while Present (Disc_T) loop\n+                        if Present (Disc_O)\n+                          and then Chars (Disc_T) = Chars (Disc_O)\n+                        then\n+                           Append_To (Cons,\n+                             Make_Selected_Component (Loc,\n+                               Prefix        =>\n+                                 Duplicate_Subexpr_Move_Checks (Operand),\n+                                  Selector_Name =>\n+                                 Make_Identifier (Loc, Chars (Disc_O))));\n+                           Next_Discriminant (Disc_O);\n+\n+                        elsif Present (Disc_S) then\n+                           Append_To (Cons, New_Copy_Tree (Node (Elmt)));\n+                           Next_Elmt (Elmt);\n+                        end if;\n+\n+                        Next_Discriminant (Disc_T);\n+                     end loop;\n+                  end;\n \n                elsif Is_Array_Type (Operand_Type) then\n                   N_Ix := First_Index (Target_Type);"}, {"sha": "59af6ab172b638e1cae6c18340f0d84da306e9ef", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c15c6dd02a2a62ed68ada52e563775665320c21/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c15c6dd02a2a62ed68ada52e563775665320c21/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=7c15c6dd02a2a62ed68ada52e563775665320c21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1448,9 +1448,21 @@ package body Exp_Ch5 is\n             U_U : Boolean := False) return Node_Id\n          is\n             A    : Node_Id;\n+            Disc : Entity_Id;\n             Expr : Node_Id;\n \n          begin\n+\n+            --  The discriminant entity to be used in the retrieval below must\n+            --  be one in the corresponding type, given that the assignment\n+            --  may be between derived and parent types.\n+\n+            if Is_Derived_Type (Etype (Rhs)) then\n+               Disc := Find_Component (R_Typ, C);\n+            else\n+               Disc := C;\n+            end if;\n+\n             --  In the case of an Unchecked_Union, use the discriminant\n             --  constraint value as on the right-hand side of the assignment.\n \n@@ -1463,7 +1475,7 @@ package body Exp_Ch5 is\n                Expr :=\n                  Make_Selected_Component (Loc,\n                    Prefix        => Duplicate_Subexpr (Rhs),\n-                   Selector_Name => New_Occurrence_Of (C, Loc));\n+                   Selector_Name => New_Occurrence_Of (Disc, Loc));\n             end if;\n \n             A :="}, {"sha": "e62d7e189df4d977302418f38e539338455fbbe7", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c15c6dd02a2a62ed68ada52e563775665320c21/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c15c6dd02a2a62ed68ada52e563775665320c21/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=7c15c6dd02a2a62ed68ada52e563775665320c21", "patch": "@@ -392,6 +392,13 @@ package body Sem_Ch7 is\n \n                      --  An inlined subprogram body acts as a referencer\n \n+                     --  Note that we test Has_Pragma_Inline here in addition\n+                     --  to Is_Inlined. We are doing this for a client, since\n+                     --  we are computing which entities should be public, and\n+                     --  it is the client who will decide if actual inlining\n+                     --  should occur, so we need to catch all cases where the\n+                     --  subprogram may be inlined by the client.\n+\n                      if Is_Inlined (Decl_Id)\n                        or else Has_Pragma_Inline (Decl_Id)\n                      then\n@@ -413,18 +420,13 @@ package body Sem_Ch7 is\n                   else\n                      Decl_Id := Defining_Entity (Decl);\n \n-                     --  An inlined body acts as a referencer. Note that an\n-                     --  inlined subprogram remains Is_Public as gigi requires\n-                     --  the flag to be set.\n-\n-                     --  Note that we test Has_Pragma_Inline here rather than\n-                     --  Is_Inlined. We are compiling this for a client, and\n-                     --  it is the client who will decide if actual inlining\n-                     --  should occur, so we need to assume that the procedure\n-                     --  could be inlined for the purpose of accessing global\n-                     --  entities.\n+                     --  An inlined body acts as a referencer, see above. Note\n+                     --  that an inlined subprogram remains Is_Public as gigi\n+                     --  requires the flag to be set.\n \n-                     if Has_Pragma_Inline (Decl_Id) then\n+                     if Is_Inlined (Decl_Id)\n+                       or else Has_Pragma_Inline (Decl_Id)\n+                     then\n                         if Top_Level\n                           and then not Contains_Subprograms_Refs (Decl)\n                         then\n@@ -915,11 +917,11 @@ package body Sem_Ch7 is\n       --  down the number of global symbols that do not neet public visibility\n       --  as this has two beneficial effects:\n       --    (1) It makes the compilation process more efficient.\n-      --    (2) It gives the code generatormore freedom to optimize within each\n+      --    (2) It gives the code generator more leeway to optimize within each\n       --        unit, especially subprograms.\n \n-      --  This is done only for top level library packages or child units as\n-      --  the algorithm does a top down traversal of the package body.\n+      --  This is done only for top-level library packages or child units as\n+      --  the algorithm does a top-down traversal of the package body.\n \n       if (Scope (Spec_Id) = Standard_Standard or else Is_Child_Unit (Spec_Id))\n         and then not Is_Generic_Unit (Spec_Id)"}]}