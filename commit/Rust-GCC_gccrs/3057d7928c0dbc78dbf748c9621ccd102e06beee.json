{"sha": "3057d7928c0dbc78dbf748c9621ccd102e06beee", "node_id": "C_kwDOANBUbNoAKDMwNTdkNzkyOGMwZGJjNzhkYmY3NDhjOTYyMWNjZDEwMmUwNmJlZWU", "commit": {"author": {"name": "Martin Uecker", "email": "uecker@tugraz.at", "date": "2023-02-08T14:02:43Z"}, "committer": {"name": "Martin Uecker", "email": "uecker@tugraz.at", "date": "2023-02-18T09:37:03Z"}, "message": "Fix ICE related to implicit access attributes for VLA arguments [PR105660]\n\nWhen constructing the specifier string when merging an access attribute\nthat encodes information about VLA arguments, the string was constructed\nin random order by iterating through a hash table. Fix this by iterating\nthough the list of arguments.\n\ngcc/c-family/Changelog:\n\tPR c/105660\n\t* c-attribs.cc (append_access_attr): Use order of arguments when\n\tconstruction string.\n\t(append_access_attr_idxs): Rename and make static.\n\t* c-warn.cc (warn_parm_array_mismatch): Add assertion.\n\ngcc/testsuite/ChangeLog:\n\tPR c/105660\n\t* gcc.dg/pr105660-1.c: New test.\n\t* gcc.dg/pr105660-2.c: New test.", "tree": {"sha": "2ee1b3cfb2f04ac9329511ae156053b5c9e62d5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ee1b3cfb2f04ac9329511ae156053b5c9e62d5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3057d7928c0dbc78dbf748c9621ccd102e06beee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3057d7928c0dbc78dbf748c9621ccd102e06beee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3057d7928c0dbc78dbf748c9621ccd102e06beee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3057d7928c0dbc78dbf748c9621ccd102e06beee/comments", "author": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "017849d9d88f021770a90f12fffec9aa2425ed27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017849d9d88f021770a90f12fffec9aa2425ed27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/017849d9d88f021770a90f12fffec9aa2425ed27"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "072cfb69147bd6b314459c0bd48a0c1fb92d3e4d", "filename": "gcc/c-family/c-attribs.cc", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3057d7928c0dbc78dbf748c9621ccd102e06beee/gcc%2Fc-family%2Fc-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3057d7928c0dbc78dbf748c9621ccd102e06beee/gcc%2Fc-family%2Fc-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.cc?ref=3057d7928c0dbc78dbf748c9621ccd102e06beee", "patch": "@@ -4728,30 +4728,34 @@ append_access_attr (tree node[3], tree attrs, const char *attrstr,\n   rdwr_map cur_idxs;\n   init_attr_rdwr_indices (&cur_idxs, attrs);\n \n+  tree args = TYPE_ARG_TYPES (node[0]);\n+  int argpos = 0;\n   std::string spec;\n-  for (auto it = new_idxs.begin (); it != new_idxs.end (); ++it)\n+  for (tree arg = args; arg; arg = TREE_CHAIN (arg), argpos++)\n     {\n-      const auto &newaxsref = *it;\n+      const attr_access* const newa = new_idxs.get (argpos);\n+\n+      if (!newa)\n+\tcontinue;\n \n       /* The map has two equal entries for each pointer argument that\n \t has an associated size argument.  Process just the entry for\n \t the former.  */\n-      if ((unsigned)newaxsref.first != newaxsref.second.ptrarg)\n+      if ((unsigned)argpos != newa->ptrarg)\n \tcontinue;\n \n-      const attr_access* const cura = cur_idxs.get (newaxsref.first);\n+      const attr_access* const cura = cur_idxs.get (argpos);\n       if (!cura)\n \t{\n \t  /* The new attribute needs to be added.  */\n-\t  tree str = newaxsref.second.to_internal_string ();\n+\t  tree str = newa->to_internal_string ();\n \t  spec += TREE_STRING_POINTER (str);\n \t  continue;\n \t}\n \n       /* The new access spec refers to an array/pointer argument for\n \t which an access spec already exists.  Check and diagnose any\n \t conflicts.  If no conflicts are found, merge the two.  */\n-      const attr_access* const newa = &newaxsref.second;\n \n       if (!attrstr)\n \t{\n@@ -4886,7 +4890,7 @@ append_access_attr (tree node[3], tree attrs, const char *attrstr,\n \tcontinue;\n \n       /* Merge the CURA and NEWA.  */\n-      attr_access merged = newaxsref.second;\n+      attr_access merged = *newa;\n \n       /* VLA seen in a declaration takes precedence.  */\n       if (cura->minsize == HOST_WIDE_INT_M1U)\n@@ -4912,9 +4916,9 @@ append_access_attr (tree node[3], tree attrs, const char *attrstr,\n \n /* Convenience wrapper for the above.  */\n \n-tree\n-append_access_attr (tree node[3], tree attrs, const char *attrstr,\n-\t\t    char code, HOST_WIDE_INT idxs[2])\n+static tree\n+append_access_attr_idxs (tree node[3], tree attrs, const char *attrstr,\n+\t\t\t char code, HOST_WIDE_INT idxs[2])\n {\n   char attrspec[80];\n   int n = sprintf (attrspec, \"%c%u\", code, (unsigned) idxs[0] - 1);\n@@ -5204,7 +5208,7 @@ handle_access_attribute (tree node[3], tree name, tree args, int flags,\n      attributes specified on previous declarations of the same type\n      and if not, concatenate the two.  */\n   const char code = attr_access::mode_chars[mode];\n-  tree new_attrs = append_access_attr (node, attrs, attrstr, code, idxs);\n+  tree new_attrs = append_access_attr_idxs (node, attrs, attrstr, code, idxs);\n   if (!new_attrs)\n     return NULL_TREE;\n \n@@ -5217,7 +5221,7 @@ handle_access_attribute (tree node[3], tree name, tree args, int flags,\n     {\n       /* Repeat for the previously declared type.  */\n       attrs = TYPE_ATTRIBUTES (TREE_TYPE (node[1]));\n-      new_attrs = append_access_attr (node, attrs, attrstr, code, idxs);\n+      new_attrs = append_access_attr_idxs (node, attrs, attrstr, code, idxs);\n       if (!new_attrs)\n \treturn NULL_TREE;\n "}, {"sha": "a6fb95b1e808b3ba7d962787ac73fad113ea25b4", "filename": "gcc/c-family/c-warn.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3057d7928c0dbc78dbf748c9621ccd102e06beee/gcc%2Fc-family%2Fc-warn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3057d7928c0dbc78dbf748c9621ccd102e06beee/gcc%2Fc-family%2Fc-warn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.cc?ref=3057d7928c0dbc78dbf748c9621ccd102e06beee", "patch": "@@ -3617,6 +3617,8 @@ warn_parm_array_mismatch (location_t origloc, tree fndecl, tree newparms)\n       for (tree newvbl = newa->size, curvbl = cura->size; newvbl;\n \t   newvbl = TREE_CHAIN (newvbl), curvbl = TREE_CHAIN (curvbl))\n \t{\n+\t  gcc_assert (curvbl);\n+\n \t  tree newpos = TREE_PURPOSE (newvbl);\n \t  tree curpos = TREE_PURPOSE (curvbl);\n "}, {"sha": "d4454f04c43eee0ddf7268115715b887e40b3ca5", "filename": "gcc/testsuite/gcc.dg/pr105660-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3057d7928c0dbc78dbf748c9621ccd102e06beee/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105660-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3057d7928c0dbc78dbf748c9621ccd102e06beee/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105660-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105660-1.c?ref=3057d7928c0dbc78dbf748c9621ccd102e06beee", "patch": "@@ -0,0 +1,13 @@\n+/* PR105660\n+ * { dg-do compile }\n+ * { dg-options \"-std=c17\" }\n+ */\n+\n+void gatherConservativeVars(int, int, int, int, int, int, int Hnvar, int,\n+                            int Hnyt, int Hnxyt, int, int Hstep, double[Hnyt],\n+                            double[Hnvar][Hstep][Hnxyt]);\n+void gatherConservativeVars(int, int, int, int, int, int, int Hnvar, int, int Hnyt,\n+                            int Hnxyt, int, int Hstep, double[Hnyt],\n+                            double[Hnvar][Hstep][Hnxyt]);\n+\n+"}, {"sha": "29fd82f923b829e46dd7c3f3916505af3328be7c", "filename": "gcc/testsuite/gcc.dg/pr105660-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3057d7928c0dbc78dbf748c9621ccd102e06beee/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105660-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3057d7928c0dbc78dbf748c9621ccd102e06beee/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105660-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105660-2.c?ref=3057d7928c0dbc78dbf748c9621ccd102e06beee", "patch": "@@ -0,0 +1,12 @@\n+/* PR105660\n+ * { dg-do compile }\n+ * { dg-options \"-Wall -std=c17\" }\n+ */\n+\n+\n+struct bat_gen_conf_s;\n+void batch_generator_create2(struct bat_gen_conf_s* config, int D, int N, const long bat_dims[D][N], const long tot_dims[D][N], const long tot_strs[D][N], const _Complex float* data[D]);\n+void batch_generator_create2(struct bat_gen_conf_s* config, int D, int N, const long bat_dims[D][N], const long tot_dims[D][N], const long tot_strs[D][N], const _Complex float* data[D]);\n+\n+\n+"}]}