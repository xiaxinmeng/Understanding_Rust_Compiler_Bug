{"sha": "a712aa03c55cf4a82bdb0111d1ccc9c692d547b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcxMmFhMDNjNTVjZjRhODJiZGIwMTExZDFjY2M5YzY5MmQ1NDdiOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-13T12:56:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-13T12:56:49Z"}, "message": "[multiple changes]\n\n2009-07-13  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch10.adb, sem_ch12.adb, gnat1drv.adb, exp_ch4.adb: Fix casing of\n\tseveral references to CodePeer.\n\n2009-07-13  Bob Duff  <duff@adacore.com>\n\n\t* exp_dist.adb (Build_From_Any_Function,Build_To_Any_Function,\n\tBuild_TypeCode_Function_All): Do not recurse if the type is the base\n\ttype.\n\nFrom-SVN: r149580", "tree": {"sha": "792d33be9e463b595a73155856db2f479cde4064", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/792d33be9e463b595a73155856db2f479cde4064"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/comments", "author": null, "committer": null, "parents": [{"sha": "53bb010641d53c4180c70622f39cae1c1a871312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53bb010641d53c4180c70622f39cae1c1a871312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53bb010641d53c4180c70622f39cae1c1a871312"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "ed02aeaed856ce00acf4f707ecdb91dc42972ebe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a712aa03c55cf4a82bdb0111d1ccc9c692d547b9", "patch": "@@ -1,3 +1,14 @@\n+2009-07-13  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch10.adb, sem_ch12.adb, gnat1drv.adb, exp_ch4.adb: Fix casing of\n+\tseveral references to CodePeer.\n+\n+2009-07-13  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_dist.adb (Build_From_Any_Function,Build_To_Any_Function,\n+\tBuild_TypeCode_Function_All): Do not recurse if the type is the base\n+\ttype.\n+\n 2009-07-13  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch4.adb: Minor comment change"}, {"sha": "178f1644884cb762c66c8596652a607039887e39", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=a712aa03c55cf4a82bdb0111d1ccc9c692d547b9", "patch": "@@ -4093,7 +4093,7 @@ package body Exp_Ch4 is\n          Insert_Action (N, New_If);\n          Analyze_And_Resolve (N, Typ);\n \n-         --  Link temporary to original expression, for Codepeer\n+         --  Link temporary to original expression, for CodePeer\n \n          Set_Related_Expression (Cnn, Original_Node (N));\n       end if;"}, {"sha": "a0ba2f0483ddebc612f9ec3a8512dd3efe2f1cc2", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=a712aa03c55cf4a82bdb0111d1ccc9c692d547b9", "patch": "@@ -8672,7 +8672,9 @@ package body Exp_Dist is\n             Use_Opaque_Representation : Boolean;\n \n          begin\n-            if Is_Itype (Typ) then\n+            --  The following test needs a comment ???\n+\n+            if Is_Itype (Typ) and then Typ /= Base_Type (Typ) then\n                Build_From_Any_Function\n                   (Loc  => Loc,\n                    Typ  => Etype (Typ),\n@@ -9497,7 +9499,9 @@ package body Exp_Dist is\n             --  opaque sequence of bytes.\n \n          begin\n-            if Is_Itype (Typ) then\n+            --  The following test needs a comment ???\n+\n+            if Is_Itype (Typ) and then Typ /= Base_Type (Typ) then\n                Build_To_Any_Function\n                   (Loc  => Loc,\n                   Typ  => Etype (Typ),\n@@ -10624,8 +10628,12 @@ package body Exp_Dist is\n             Type_Name_Str    : String_Id;\n             Type_Repo_Id_Str : String_Id;\n \n+         --  Start of processing for Build_TypeCode_Function\n+\n          begin\n-            if Is_Itype (Typ) then\n+            --  The following test needs a comment ???\n+\n+            if Is_Itype (Typ) and then Typ /= Base_Type (Typ) then\n                Build_TypeCode_Function\n                   (Loc  => Loc,\n                   Typ  => Etype (Typ),"}, {"sha": "c8d9cb35b7324ebda0b33e4524f4c126d5d88a1e", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=a712aa03c55cf4a82bdb0111d1ccc9c692d547b9", "patch": "@@ -148,7 +148,7 @@ procedure Gnat1drv is\n \n       if CodePeer_Mode then\n \n-         --  Turn off inlining, confuses codepeer output and gains nothing\n+         --  Turn off inlining, confuses CodePeer output and gains nothing\n \n          Front_End_Inlining := False;\n          Inline_Active      := False;\n@@ -164,7 +164,7 @@ procedure Gnat1drv is\n          Dynamic_Elaboration_Checks := False;\n \n          --  Suppress overflow checks since this is handled implicitely by\n-         --  codepeer. Enable all other language checks.\n+         --  CodePeer. Enable all other language checks.\n \n          Suppress_Options       := (Overflow_Check => True, others => False);\n          Enable_Overflow_Checks := False;\n@@ -174,7 +174,7 @@ procedure Gnat1drv is\n          Debug_Generated_Code := False;\n \n          --  Turn cross-referencing on in case it was disabled (by e.g. -gnatD)\n-         --  Do we really need to spend time generating xref in codepeer\n+         --  Do we really need to spend time generating xref in CodePeer\n          --  mode??? Consider setting Xref_Active to False.\n \n          Xref_Active := True;\n@@ -193,26 +193,26 @@ procedure Gnat1drv is\n \n          Generate_SCIL := True;\n \n-         --  Enable assertions and debug pragmas, since they give codepeer\n+         --  Enable assertions and debug pragmas, since they give CodePeer\n          --  valuable extra information.\n \n          Assertions_Enabled     := True;\n          Debug_Pragmas_Enabled  := True;\n \n          --  Suppress compiler warnings, since what we are interested in here\n-         --  is what codepeer can find out. Also disable all simple value\n+         --  is what CodePeer can find out. Also disable all simple value\n          --  propagation. This is an optimization which is valuable for code\n          --  optimization, and also for generation of compiler warnings, but\n-         --  these are being turned off anyway, and codepeer understands\n+         --  these are being turned off anyway, and CodePeer understands\n          --  things more clearly if references are not optimized in this way.\n \n          Warning_Mode  := Suppress;\n          Debug_Flag_MM := True;\n \n          --  Set normal RM validity checking, and checking of IN OUT parameters\n-         --  (this might give codepeer more useful checks to analyze, to be\n+         --  (this might give CodePeer more useful checks to analyze, to be\n          --  confirmed???). All other validity checking is turned off, since\n-         --  this can generate very complex trees that only confuse codepeer\n+         --  this can generate very complex trees that only confuse CodePeer\n          --  and do not bring enough useful info.\n \n          Reset_Validity_Check_Options;\n@@ -221,7 +221,7 @@ procedure Gnat1drv is\n          Validity_Check_In_Params     := True;\n \n          --  Turn off style check options since we are not interested in any\n-         --  front-end warnings when we are getting code peer output.\n+         --  front-end warnings when we are getting CodePeer output.\n \n          Reset_Style_Check_Options;\n       end if;"}, {"sha": "970d3679224a48ce230593c5c59e471922127b0d", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=a712aa03c55cf4a82bdb0111d1ccc9c692d547b9", "patch": "@@ -742,7 +742,7 @@ package body Sem_Ch10 is\n                   --  in its scope. Finally we create a Units table entry for\n                   --  the subprogram declaration, to maintain a one-to-one\n                   --  correspondence with compilation unit nodes. This is\n-                  --  critical for the tree traversals performed by Codepeer.\n+                  --  critical for the tree traversals performed by CodePeer.\n \n                   declare\n                      Loc : constant Source_Ptr := Sloc (N);"}, {"sha": "75b24952200ac4239505ef4c86cefcc6ff5aca5f", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a712aa03c55cf4a82bdb0111d1ccc9c692d547b9/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=a712aa03c55cf4a82bdb0111d1ccc9c692d547b9", "patch": "@@ -4374,7 +4374,7 @@ package body Sem_Ch12 is\n       --  The new compilation unit is linked to its body, but both share the\n       --  same file, so we do not set Body_Required on the new unit so as not\n       --  to create a spurious dependency on a non-existent body in the ali.\n-      --  This simplifies Codepeer unit traversal.\n+      --  This simplifies CodePeer unit traversal.\n \n       --  We use the original instantiation compilation unit as the resulting\n       --  compilation unit of the instance, since this is the main unit."}]}