{"sha": "6a0263647ee6694086e4dec1ee67094a31df10d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEwMjYzNjQ3ZWU2Njk0MDg2ZTRkZWMxZWU2NzA5NGEzMWRmMTBkOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-06-12T21:36:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-12T21:36:36Z"}, "message": "re PR c++/38958 ('unused variable' warning emitted when extending the lifetime of a returned RAII type by holding a reference to const despite delayed destructor side-effects. [dtor])\n\n/cp\n2013-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/38958\n\t* decl.c (poplevel): For the benefit of -Wunused-variable see\n\tthrough references.\n\n/testsuite\n2013-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/38958\n\t* g++.dg/warn/Wunused-var-20.C: New.\n\nFrom-SVN: r200042", "tree": {"sha": "945e6c45c18be6d4f64d894b68af55361fa825c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/945e6c45c18be6d4f64d894b68af55361fa825c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a0263647ee6694086e4dec1ee67094a31df10d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0263647ee6694086e4dec1ee67094a31df10d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a0263647ee6694086e4dec1ee67094a31df10d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0263647ee6694086e4dec1ee67094a31df10d9/comments", "author": null, "committer": null, "parents": [{"sha": "ef08b035900e8fc1cdcb2648dc6cd85169a43399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef08b035900e8fc1cdcb2648dc6cd85169a43399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef08b035900e8fc1cdcb2648dc6cd85169a43399"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "48a9310bddcc80af118182f06719fecd6101af73", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0263647ee6694086e4dec1ee67094a31df10d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0263647ee6694086e4dec1ee67094a31df10d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6a0263647ee6694086e4dec1ee67094a31df10d9", "patch": "@@ -1,3 +1,9 @@\n+2013-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/38958\n+\t* decl.c (poplevel): For the benefit of -Wunused-variable see\n+\tthrough references.\n+\n 2013-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* parser.c (cp_parser_nested_name_specifier_opt): Fix typo in comment."}, {"sha": "9eb1d12ceb2ed411f9c4d17b0f881510de027db5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0263647ee6694086e4dec1ee67094a31df10d9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0263647ee6694086e4dec1ee67094a31df10d9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6a0263647ee6694086e4dec1ee67094a31df10d9", "patch": "@@ -622,17 +622,20 @@ poplevel (int keep, int reverse, int functionbody)\n \t   push_local_binding where the list of decls returned by\n \t   getdecls is built.  */\n \tdecl = TREE_CODE (d) == TREE_LIST ? TREE_VALUE (d) : d;\n+\t// See through references for improved -Wunused-variable (PR 38958).\n+\ttree type = non_reference (TREE_TYPE (decl));\n \tif (VAR_P (decl)\n \t    && (! TREE_USED (decl) || !DECL_READ_P (decl))\n \t    && ! DECL_IN_SYSTEM_HEADER (decl)\n \t    && DECL_NAME (decl) && ! DECL_ARTIFICIAL (decl)\n-\t    && TREE_TYPE (decl) != error_mark_node\n-\t    && (!CLASS_TYPE_P (TREE_TYPE (decl))\n-\t\t|| !TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (decl))))\n+\t    && type != error_mark_node\n+\t    && (!CLASS_TYPE_P (type)\n+\t\t|| !TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type)))\n \t  {\n \t    if (! TREE_USED (decl))\n \t      warning (OPT_Wunused_variable, \"unused variable %q+D\", decl);\n \t    else if (DECL_CONTEXT (decl) == current_function_decl\n+\t\t     // For -Wunused-but-set-variable leave references alone.\n \t\t     && TREE_CODE (TREE_TYPE (decl)) != REFERENCE_TYPE\n \t\t     && errorcount == unused_but_set_errorcount)\n \t      {"}, {"sha": "b167e4c3d479622582c705fcb446b442317b0435", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0263647ee6694086e4dec1ee67094a31df10d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0263647ee6694086e4dec1ee67094a31df10d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a0263647ee6694086e4dec1ee67094a31df10d9", "patch": "@@ -1,3 +1,8 @@\n+2013-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/38958\n+\t* g++.dg/warn/Wunused-var-20.C: New.\n+\n 2013-06-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.target/mips/mips.exp: Handle -f{no-,}common."}, {"sha": "792c25369c740b765d5ef9b0f95df6c239b534b6", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-20.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0263647ee6694086e4dec1ee67094a31df10d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0263647ee6694086e4dec1ee67094a31df10d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-20.C?ref=6a0263647ee6694086e4dec1ee67094a31df10d9", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/38958\n+// { dg-options \"-Wunused\" }\n+\n+volatile int g;\n+\n+struct Lock\n+{\n+  ~Lock() { g = 0; }\n+};\n+\n+Lock AcquireLock() { return Lock(); }\n+\n+int main()\n+{\n+  const Lock& lock = AcquireLock();\n+  g = 1;\n+  g = 2;\n+  g = 3;\n+}"}]}