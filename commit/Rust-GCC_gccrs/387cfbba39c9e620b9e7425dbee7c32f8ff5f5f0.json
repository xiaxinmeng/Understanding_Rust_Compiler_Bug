{"sha": "387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3Y2ZiYmEzOWM5ZTYyMGI5ZTc0MjVkYmVlN2MzMmY4ZmY1ZjVmMA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2007-07-31T15:05:52Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-07-31T15:05:52Z"}, "message": "re PR testsuite/32843 (libffi.call/return_sc.c)\n\n2007-07-30  Andrew Haley  <aph@redhat.com>\n\n        PR testsuite/32843\n        * src/x86/ffi.c (ffi_prep_cif_machdep): in x86 case, add code for\n        signed/unsigned int8/16.\n        * src/x86/sysv.S (ffi_call_SYSV): Rewrite to:\n        Use a jump table.\n        Remove code to pop args from the stack after call.\n        Special-case signed/unsigned int8/16.\n        * testsuite/libffi.call/return_sc.c (main): Revert.\n\nFrom-SVN: r127093", "tree": {"sha": "77d7eb285bfcbe2522e9774cf8c6e92ca56bd6a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77d7eb285bfcbe2522e9774cf8c6e92ca56bd6a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bde7ae91a1edba5968c32ceb6f10b7b5ea98bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bde7ae91a1edba5968c32ceb6f10b7b5ea98bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bde7ae91a1edba5968c32ceb6f10b7b5ea98bfa"}], "stats": {"total": 100, "additions": 78, "deletions": 22}, "files": [{"sha": "de4ee0a7e9554ff4d54749c3b99c2d9f38eac76a", "filename": "libffi/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0", "patch": "@@ -1,3 +1,14 @@\n+2007-07-30  Andrew Haley  <aph@redhat.com>\n+\n+\tPR testsuite/32843\n+\t* src/x86/ffi.c (ffi_prep_cif_machdep): in x86 case, add code for\n+\tsigned/unsigned int8/16.\n+\t* src/x86/sysv.S (ffi_call_SYSV): Rewrite to:\n+\tUse a jump table.\n+\tRemove code to pop args from the stack after call.\n+\tSpecial-case signed/unsigned int8/16.\n+\t* testsuite/libffi.call/return_sc.c (main): Revert.\n+\n 2007-07-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR testsuite/32843"}, {"sha": "45fb0b9a0b98813be8c74b6624d411c9f7d27f98", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0", "patch": "@@ -121,7 +121,12 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n     case FFI_TYPE_VOID:\n #ifdef X86\n     case FFI_TYPE_STRUCT:\n+    case FFI_TYPE_UINT8:\n+    case FFI_TYPE_UINT16:\n+    case FFI_TYPE_SINT8:\n+    case FFI_TYPE_SINT16:\n #endif\n+\n     case FFI_TYPE_SINT64:\n     case FFI_TYPE_FLOAT:\n     case FFI_TYPE_DOUBLE:"}, {"sha": "a5add26d1dccee9b34212a3431fc92085d63eec3", "filename": "libffi/src/x86/sysv.S", "status": "modified", "additions": 61, "deletions": 21, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0/libffi%2Fsrc%2Fx86%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0/libffi%2Fsrc%2Fx86%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fsysv.S?ref=387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0", "patch": "@@ -59,16 +59,15 @@ ffi_call_SYSV:\n \n \tcall  *28(%ebp)\n \n-\t/* Remove the space we pushed for the args  */\n-\tmovl  16(%ebp),%ecx\n-\taddl  %ecx,%esp\n-\n \t/* Load %ecx with the return type code  */\n \tmovl  20(%ebp),%ecx\t\n \n+\t/* Protect %esi.  We're going to pop it in the epilogue.  */\n+\tpushl %esi\n+\n \t/* If the return value pointer is NULL, assume no return value.  */\n \tcmpl  $0,24(%ebp)\n-\tjne   retint\n+\tjne  0f\n \n \t/* Even if there is no space for the return value, we are \n \t   obliged to handle floating-point values.  */\n@@ -78,51 +77,84 @@ ffi_call_SYSV:\n \n         jmp   epilogue\n \n-retint:\n-\tcmpl  $FFI_TYPE_INT,%ecx\n-\tjne   retfloat\n-\t/* Load %ecx with the pointer to storage for the return value  */\n-\tmovl  24(%ebp),%ecx\t\n-\tmovl  %eax,0(%ecx)\n-\tjmp   epilogue\n+0:\n+\tcall  1f\n+\n+.Lstore_table:\n+\t.long\tnoretval-.Lstore_table\t/* FFI_TYPE_VOID */\n+\t.long\tretint-.Lstore_table\t/* FFI_TYPE_INT */\n+\t.long\tretfloat-.Lstore_table\t/* FFI_TYPE_FLOAT */\n+\t.long\tretdouble-.Lstore_table\t/* FFI_TYPE_DOUBLE */\n+\t.long\tretlongdouble-.Lstore_table\t/* FFI_TYPE_LONGDOUBLE */\n+\t.long\tretuint8-.Lstore_table\t/* FFI_TYPE_UINT8 */\n+\t.long\tretsint8-.Lstore_table\t/* FFI_TYPE_SINT8 */\n+\t.long\tretuint16-.Lstore_table\t/* FFI_TYPE_UINT16 */\n+\t.long\tretsint16-.Lstore_table\t/* FFI_TYPE_SINT16 */\n+\t.long\tretint-.Lstore_table\t/* FFI_TYPE_UINT32 */\n+\t.long\tretint-.Lstore_table\t/* FFI_TYPE_SINT32 */\n+\t.long\tretint64-.Lstore_table\t/* FFI_TYPE_UINT64 */\n+\t.long\tretint64-.Lstore_table\t/* FFI_TYPE_SINT64 */\n+\t.long\tretstruct-.Lstore_table\t/* FFI_TYPE_STRUCT */\n+\t.long\tretint-.Lstore_table\t/* FFI_TYPE_POINTER */\n+\n+1:\n+\tpop  %esi\n+\tadd  (%esi, %ecx, 4), %esi\n+\tjmp  *%esi\n+\n+\t/* Sign/zero extend as appropriate.  */\n+retsint8:\n+\tmovsbl  %al, %eax\n+\tjmp  retint\n+\n+retsint16:\n+\tmovswl  %ax, %eax\n+\tjmp  retint\n+\n+retuint8:\n+\tmovzbl  %al, %eax\n+\tjmp  retint\n+\n+retuint16:\n+\tmovzwl  %ax, %eax\n+\tjmp  retint\n \n retfloat:\n-\tcmpl  $FFI_TYPE_FLOAT,%ecx\n-\tjne   retdouble\n \t/* Load %ecx with the pointer to storage for the return value  */\n \tmovl  24(%ebp),%ecx\t\n \tfstps (%ecx)\n \tjmp   epilogue\n \n retdouble:\n-\tcmpl  $FFI_TYPE_DOUBLE,%ecx\n-\tjne   retlongdouble\n \t/* Load %ecx with the pointer to storage for the return value  */\n \tmovl  24(%ebp),%ecx\t\n \tfstpl (%ecx)\n \tjmp   epilogue\n \n retlongdouble:\n-\tcmpl  $FFI_TYPE_LONGDOUBLE,%ecx\n-\tjne   retint64\n \t/* Load %ecx with the pointer to storage for the return value  */\n \tmovl  24(%ebp),%ecx\t\n \tfstpt (%ecx)\n \tjmp   epilogue\n \t\n retint64:\t\n-\tcmpl  $FFI_TYPE_SINT64,%ecx\n-        jne   retstruct\n \t/* Load %ecx with the pointer to storage for the return value  */\n \tmovl  24(%ebp),%ecx\t\n \tmovl  %eax,0(%ecx)\n \tmovl  %edx,4(%ecx)\n+\tjmp   epilogue\n \t\n+retint:\n+\t/* Load %ecx with the pointer to storage for the return value  */\n+\tmovl  24(%ebp),%ecx\t\n+\tmovl  %eax,0(%ecx)\n+\n retstruct:\n \t/* Nothing to do!  */\n \n noretval:\n epilogue:\n+        popl %esi\n         movl %ebp,%esp\n         popl %ebp\n         ret\n@@ -162,7 +194,15 @@ ffi_closure_SYSV:\n \tmovl\t-12(%ebp), %ecx\n \tcmpl\t$FFI_TYPE_INT, %eax\n \tje\t.Lcls_retint\n-\tcmpl\t$FFI_TYPE_FLOAT, %eax\n+\n+\t/* Handle FFI_TYPE_UINT8, FFI_TYPE_SINT8, FFI_TYPE_UINT16,\n+\t   FFI_TYPE_SINT16, FFI_TYPE_UINT32, FFI_TYPE_SINT32.  */\n+\tcmpl\t$FFI_TYPE_UINT64, %eax\n+\tjge\t0f\n+\tcmpl\t$FFI_TYPE_UINT8, %eax\n+\tjge\t.Lcls_retint\n+\t\n+0:\tcmpl\t$FFI_TYPE_FLOAT, %eax\n \tje\t.Lcls_retfloat\n \tcmpl\t$FFI_TYPE_DOUBLE, %eax\n \tje\t.Lcls_retdouble"}, {"sha": "19608ee7c8bbbe6cfcdd5bae95510f8ccddef0ef", "filename": "libffi/testsuite/libffi.call/return_sc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0/libffi%2Ftestsuite%2Flibffi.call%2Freturn_sc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0/libffi%2Ftestsuite%2Flibffi.call%2Freturn_sc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Freturn_sc.c?ref=387cfbba39c9e620b9e7425dbee7c32f8ff5f5f0", "patch": "@@ -30,7 +30,7 @@ int main (void)\n        sc < (signed char) 127; sc++)\n     {\n       ffi_call(&cif, FFI_FN(return_sc), &rint, values);\n-      CHECK((signed char) rint == sc);\n+      CHECK(rint == (ffi_arg) sc);\n     }\n   exit(0);\n }"}]}