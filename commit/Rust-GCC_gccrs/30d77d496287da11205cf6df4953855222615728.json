{"sha": "30d77d496287da11205cf6df4953855222615728", "node_id": "C_kwDOANBUbNoAKDMwZDc3ZDQ5NjI4N2RhMTEyMDVjZjZkZjQ5NTM4NTUyMjI2MTU3Mjg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-13T00:17:02Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-13T00:17:02Z"}, "message": "Daily bump.", "tree": {"sha": "44efcca9f5a5b2546ed26590744bbab33dba6a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44efcca9f5a5b2546ed26590744bbab33dba6a3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30d77d496287da11205cf6df4953855222615728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d77d496287da11205cf6df4953855222615728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d77d496287da11205cf6df4953855222615728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d77d496287da11205cf6df4953855222615728/comments", "author": null, "committer": null, "parents": [{"sha": "ec6c2029714057b4bca344ee59be977d17361092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6c2029714057b4bca344ee59be977d17361092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6c2029714057b4bca344ee59be977d17361092"}], "stats": {"total": 236, "additions": 235, "deletions": 1}, "files": [{"sha": "96125c18e4347a3893da68fbf8b8bc7c76041de2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d77d496287da11205cf6df4953855222615728/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d77d496287da11205cf6df4953855222615728/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30d77d496287da11205cf6df4953855222615728", "patch": "@@ -1,3 +1,96 @@\n+2022-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* dfp.cc (decimal_from_binary): Convert a canonical NaN to a\n+\tcanonical NaN.\n+\n+2022-11-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (range_tests_signbit): Move to set from here...\n+\t(range_tests_signed_zeros): ...to here.\n+\n+2022-11-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (build_lt): Adjust with frange_nextafter\n+\tinstead of default to a closed range.\n+\t(build_gt): Same.\n+\n+2022-11-12  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* range-op-float.cc (float_binary_op_range_finish): New function.\n+\t(foperator_plus::op1_range): New.\n+\t(foperator_plus::op2_range): New.\n+\t(foperator_minus::op1_range): New.\n+\t(foperator_minus::op2_range): New.\n+\t(foperator_mult::op1_range): New.\n+\t(foperator_mult::op2_range): New.\n+\t(foperator_div::op1_range): New.\n+\t(foperator_div::op2_range): New.\n+\n+2022-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107569\n+\t* range-op-float.cc (zero_p, contains_p, singleton_inf_p,\n+\tsignbit_known_p, zero_range, inf_range, zero_to_inf_range): New\n+\tfunctions.\n+\t(foperator_mult_div_base): New class.\n+\t(foperator_mult, foperator_div): Derive from that and use\n+\tprotected static method from it as well as above new functions\n+\tto simplify the code.\n+\n+2022-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107569\n+\t* range-op-float.cc (foperator_div): New class.\n+\t(floating_op_table::floating_op_table): Use foperator_div\n+\tfor RDIV_EXPR.\n+\n+2022-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107569\n+\tPR tree-optimization/107591\n+\t* range-op.h (range_operator_float::rv_fold): Add relation_kind\n+\targument.\n+\t* range-op-float.cc (range_operator_float::fold_range): Name\n+\tlast argument trio and pass trio.op1_op2 () as last argument to\n+\trv_fold.\n+\t(range_operator_float::rv_fold): Add relation_kind argument.\n+\t(foperator_plus::rv_fold, foperator_minus::rv_fold): Likewise.\n+\t(foperator_mult): New class.\n+\t(floating_op_table::floating_op_table): Use foperator_mult for\n+\tMULT_EXPR.\n+\n+2022-11-12  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* config/loongarch/loongarch.md (UNSPEC_FLOGB): New unspec.\n+\t(type): Add flogb.\n+\t(logb_non_negative<mode>2): New instruction template.\n+\t(logb<mode>2): New define_expand.\n+\n+2022-11-12  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* config/loongarch/loongarch.md (UNSPEC_FSCALEB): New unspec.\n+\t(type): Add fscaleb.\n+\t(IMODE): New mode attr.\n+\t(ldexp<mode>3): New instruction template.\n+\n+2022-11-12  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* config/loongarch/loongarch.md (UNSPEC_FTINT): New unspec.\n+\t(UNSPEC_FTINTRM): Likewise.\n+\t(UNSPEC_FTINTRP): Likewise.\n+\t(LRINT): New define_int_iterator.\n+\t(lrint_pattern): New define_int_attr.\n+\t(lrint_submenmonic): Likewise.\n+\t(lrint_allow_inexact): Likewise.\n+\t(ANYFI): New define_mode_iterator.\n+\t(lrint<ANYF><ANYFI>): New instruction template.\n+\n+2022-11-12  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* config/loongarch/loongarch.md (frint_<fmt>): Rename to ..\n+\t(rint<mode>2): .. this.\n+\n 2022-11-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/106147"}, {"sha": "f96347308027dfeaacca15b70b9beea0dbab42a1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d77d496287da11205cf6df4953855222615728/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d77d496287da11205cf6df4953855222615728/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=30d77d496287da11205cf6df4953855222615728", "patch": "@@ -1 +1 @@\n-20221112\n+20221113"}, {"sha": "b25c118019fa3a39f05df2b7d016ff9009853a90", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d77d496287da11205cf6df4953855222615728/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d77d496287da11205cf6df4953855222615728/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=30d77d496287da11205cf6df4953855222615728", "patch": "@@ -1,3 +1,7 @@\n+2022-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.cc (c_common_reswords): Use D_C2X instead of D_CXXONLY.\n+\n 2022-11-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c/85487"}, {"sha": "d6c6f4f6811c3d594b75cafe93a5cec6ec5694fc", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d77d496287da11205cf6df4953855222615728/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d77d496287da11205cf6df4953855222615728/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=30d77d496287da11205cf6df4953855222615728", "patch": "@@ -1,3 +1,57 @@\n+2022-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.cc (start_underspecified_init)\n+\t(finish_underspecified_init): Handle name == NULL_TREE for\n+\tcompound literals.\n+\t(merge_decls): Merge C_DECL_DECLARED_CONSTEXPR.\n+\t(shadow_tag_warned): Check for constexpr.\n+\t(start_decl): Add parameter do_push.\n+\t(build_compound_literal): Set C_DECL_DECLARED_CONSTEXPR.\n+\t(grokdeclarator): Handle constexpr.\n+\t(finish_struct): Set C_TYPE_FIELDS_NON_CONSTEXPR.\n+\t(declspecs_add_scspec): Handle constexpr.\n+\t* c-parser.cc (c_token_starts_compound_literal)\n+\t(c_token_starts_declspecs, c_parser_declaration_or_fndef)\n+\t(c_parser_declspecs, c_parser_gnu_attribute_any_word)\n+\t(c_parser_compound_literal_scspecs)\n+\t(c_parser_postfix_expression_after_paren_type): Handle constexpr.\n+\tUpdate calls to start_init.\n+\t(c_parser_declaration_or_fndef, c_parser_initializer)\n+\t(c_parser_initval): Pass true for new argument of\n+\tconvert_lvalue_to_rvalue.  Call convert_lvalue_to_rvalue for\n+\tconstexpr compound literals.\n+\t(c_parser_static_assert_declaration_no_semi)\n+\t(c_parser_enum_specifier, c_parser_struct_declaration)\n+\t(c_parser_alignas_specifier, c_parser_initelt, c_parser_label):\n+\tCall convert_lvalue_to_rvalue on expressions required to be\n+\tinteger constant expressions.\n+\t(c_parser_omp_declare_reduction): Update call to start_init.\n+\t* c-tree.h (C_TYPE_FIELDS_NON_CONSTEXPR)\n+\t(C_DECL_DECLARED_CONSTEXPR): New macros.\n+\t(struct c_declspecs): Add constexpr_p.\n+\t(start_decl, convert_lvalue_to_rvalue, start_init): Update\n+\tprototypes.\n+\t* c-typeck.cc (require_constant_value, require_constant_elements):\n+\tChange to bool.\n+\t(require_constexpr_value, maybe_get_constexpr_init)\n+\t(constexpr_init_fits_real_type, check_constexpr_init): New.\n+\t(convert_lvalue_to_rvalue): Add new parameter for_init.  Call\n+\tmaybe_get_constexpr_init.\n+\t(store_init_value): Update call to digest_init.\n+\t(digest_init): Add parameters int_const_expr, arith_const_expr and\n+\trequire_constexpr.  Check constexpr initializers.\n+\t(constructor_top_level): Remove.\n+\t(struct initializer_stack): Remove top_level.  Add\n+\trequire_constexpr_value.\n+\t(start_init): Remove parameter top_level.  Add parameters\n+\tinit_require_constant and init_require_constexpr.  Save\n+\trequire_constexpr_value on stack.\n+\t(pop_init_level): Use a null pointer constant for zero initializer\n+\tof pointer initialized with {}.\n+\t(output_init_element): Update call to digest_init.  Avoid passing\n+\tnull pointer constants of pointer type through digest_init a\n+\tsecond time when initializing a constexpr object.\n+\n 2022-11-03  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-decl.cc (in_underspecified_init, start_underspecified_init)"}, {"sha": "73cdb00da690cab254132d1fd6ee6e065929e0e4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d77d496287da11205cf6df4953855222615728/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d77d496287da11205cf6df4953855222615728/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=30d77d496287da11205cf6df4953855222615728", "patch": "@@ -1,3 +1,18 @@\n+2022-11-12  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107444\n+\t* trans-decl.cc (create_function_arglist): Extend presence status\n+\tto all intrinsic types, and change prefix of internal symbol to '.'.\n+\t* trans-expr.cc (gfc_conv_expr_present): Align to changes in\n+\tcreate_function_arglist.\n+\t(gfc_conv_procedure_call): Fix generation of procedure arguments for\n+\tthe case of character dummy arguments with optional+value attribute.\n+\t* trans-types.cc (gfc_get_function_type): Synchronize with changes\n+\tto create_function_arglist.\n+\t* doc/gfortran/naming-and-argument-passing-conventions.rst: Clarify\n+\tthe gfortran argument passing conventions with regard to OPTIONAL\n+\tdummy arguments of intrinsic type.\n+\n 2022-11-10  Martin Liska  <mliska@suse.cz>\n \n \t* doc/gfortran/intrinsic-procedures/abs.rst: Move label directly before title."}, {"sha": "a3178e59080f4ae52ace084318a9e8f9b5500d8f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d77d496287da11205cf6df4953855222615728/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d77d496287da11205cf6df4953855222615728/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30d77d496287da11205cf6df4953855222615728", "patch": "@@ -1,3 +1,44 @@\n+2022-11-12  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107444\n+\t* gfortran.dg/optional_absent_7.f90: Adjust regex.\n+\t* gfortran.dg/optional_absent_8.f90: New test.\n+\n+2022-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-keywords-1.c: Also test constexpr.\n+\t* gcc.dg/c2x-constexpr-1.c, gcc.dg/c2x-constexpr-2a.c,\n+\tgcc.dg/c2x-constexpr-2b.c, gcc.dg/c2x-constexpr-3.c,\n+\tgcc.dg/c2x-constexpr-4.c, gcc.dg/c2x-constexpr-5.c,\n+\tgcc.dg/c2x-constexpr-6.c, gcc.dg/c2x-constexpr-7.c,\n+\tgcc.dg/c2x-constexpr-8.c, gcc.dg/c2x-constexpr-9.c,\n+\tgcc.dg/dfp/c2x-constexpr-dfp-1.c,\n+\tgcc.dg/dfp/c2x-constexpr-dfp-2.c, gcc.dg/gnu2x-constexpr-1.c,\n+\tgcc.target/i386/excess-precision-11.c,\n+\tgcc.target/i386/excess-precision-12.c: New tests.\n+\n+2022-11-12  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/ieee/inf-4.c: New test.\n+\n+2022-11-12  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* gcc.target/loongarch/flogb.c: New test.\n+\n+2022-11-12  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* gcc.target/loongarch/fscaleb.c: New test.\n+\n+2022-11-12  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* gcc.target/loongarch/ftint.c: New test.\n+\t* gcc.target/loongarch/ftint-no-inexact.c: New test.\n+\n+2022-11-12  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* gcc.target/loongarch/frint.c: New test.\n+\n 2022-11-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/106147"}, {"sha": "b69ca7590fda366d8c0501a6454b63251ba88790", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d77d496287da11205cf6df4953855222615728/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d77d496287da11205cf6df4953855222615728/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=30d77d496287da11205cf6df4953855222615728", "patch": "@@ -1,3 +1,9 @@\n+2022-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/107641\n+\t* env.c (parse_unsigned_long): Cast params[2] to uintptr_t rather than\n+\tunsigned long.  Change type of upper from unsigned to unsigned long.\n+\n 2022-11-10  Martin Liska  <mliska@suse.cz>\n \n \t* doc/conf.py: Add newline at last line."}, {"sha": "85ff5c9a1d82d59bd4428f982fcd139eb41599ea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d77d496287da11205cf6df4953855222615728/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d77d496287da11205cf6df4953855222615728/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=30d77d496287da11205cf6df4953855222615728", "patch": "@@ -1,3 +1,24 @@\n+2022-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/107636\n+\t* include/std/charconv (to_chars): Fix up powerpc64le _Float128\n+\toverload __extension__ placement.\n+\n+2022-11-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/Makefile.am: Simplify debug build targets.\n+\t* src/Makefile.in: Regenerate.\n+\n+2022-11-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103755\n+\t* src/c++11/locale-inst-monetary.h: Include new header.\n+\t* src/c++11/locale-inst-numeric.h: Likewise.\n+\t* src/c++11/locale-inst.cc: Likewise.\n+\t(INSTANTIATE_USE_FACET, INSTANTIATE_FACET_ACCESSORS): Move\n+\tmacro definitions to ...\n+\t* src/c++11/facet_inst_macros.h: New file.\n+\n 2022-11-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/95048"}]}