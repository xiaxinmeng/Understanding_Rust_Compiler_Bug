{"sha": "eb319c505d0bc3497170b5cdaeaf774a67594ae3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIzMTljNTA1ZDBiYzM0OTcxNzBiNWNkYWVhZjc3NGE2NzU5NGFlMw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-02-22T17:38:11Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-02-22T17:38:11Z"}, "message": "PR tree-optimization/88993 - GCC 9 -Wformat-overflow=2 should reflect real libc limits\n\nPR tree-optimization/88993 - GCC 9 -Wformat-overflow=2 should reflect real libc limits\nPR tree-optimization/88835 - overly aggressive -Werror=format-overflow for printf\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/88993\n\tPR tree-optimization/88853\n\t* gimple-ssa-sprintf.c (sprintf_dom_walker::call_info::is_file_func):\n\tNew helper.\n\t(sprintf_dom_walker::call_info::is_string_func): New helper.\n\t(format_directive): Only issue \"may exceed\" 4095/INT_MAX warnings\n\tfor formatted string functions.\n\t(sprintf_dom_walker::handle_gimple_call): Fix a typo in a comment.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/88993\n\tPR tree-optimization/88853\n\t* gcc.dg/tree-ssa/builtin-fprintf-warn-2.c: New test.\n\t* gcc.dg/tree-ssa/builtin-printf-warn-2.c: New test.\n\t* gcc.dg/tree-ssa/builtin-snprintf-warn-3.c: Adjust.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-18.c: Same.\n\nFrom-SVN: r269125", "tree": {"sha": "3672c9247aa57526186defef4ad821df6a89c49d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3672c9247aa57526186defef4ad821df6a89c49d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb319c505d0bc3497170b5cdaeaf774a67594ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb319c505d0bc3497170b5cdaeaf774a67594ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb319c505d0bc3497170b5cdaeaf774a67594ae3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb319c505d0bc3497170b5cdaeaf774a67594ae3/comments", "author": null, "committer": null, "parents": [{"sha": "cfed471a5612a925d55dae4085aa10d230bf4494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfed471a5612a925d55dae4085aa10d230bf4494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfed471a5612a925d55dae4085aa10d230bf4494"}], "stats": {"total": 836, "additions": 772, "deletions": 64}, "files": [{"sha": "e40e0db427cf31745a10e74db54f03394efe27f7", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 138, "deletions": 55, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb319c505d0bc3497170b5cdaeaf774a67594ae3/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb319c505d0bc3497170b5cdaeaf774a67594ae3/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=eb319c505d0bc3497170b5cdaeaf774a67594ae3", "patch": "@@ -945,6 +945,29 @@ struct sprintf_dom_walker::call_info\n   {\n     return bounded ? OPT_Wformat_truncation_ : OPT_Wformat_overflow_;\n   }\n+\n+  /* Return true for calls to file formatted functions.  */\n+  bool is_file_func () const\n+  {\n+    return (fncode == BUILT_IN_FPRINTF\n+\t    || fncode == BUILT_IN_FPRINTF_CHK\n+\t    || fncode == BUILT_IN_FPRINTF_UNLOCKED\n+\t    || fncode == BUILT_IN_VFPRINTF\n+\t    || fncode == BUILT_IN_VFPRINTF_CHK);\n+  }\n+\n+  /* Return true for calls to string formatted functions.  */\n+  bool is_string_func () const\n+  {\n+    return (fncode == BUILT_IN_SPRINTF\n+\t    || fncode == BUILT_IN_SPRINTF_CHK\n+\t    || fncode == BUILT_IN_SNPRINTF\n+\t    || fncode == BUILT_IN_SNPRINTF_CHK\n+\t    || fncode == BUILT_IN_VSPRINTF\n+\t    || fncode == BUILT_IN_VSPRINTF_CHK\n+\t    || fncode == BUILT_IN_VSNPRINTF\n+\t    || fncode == BUILT_IN_VSNPRINTF_CHK);\n+  }\n };\n \n /* Return the result of formatting a no-op directive (such as '%n').  */\n@@ -2841,6 +2864,8 @@ format_directive (const sprintf_dom_walker::call_info &info,\n   if (!warned\n       /* Only warn at level 2.  */\n       && warn_level > 1\n+      /* Only warn for string functions.  */\n+      && info.is_string_func ()\n       && (!minunder4k\n \t  || (!maxunder4k && fmtres.range.max < HOST_WIDE_INT_MAX)))\n     {\n@@ -2849,22 +2874,28 @@ format_directive (const sprintf_dom_walker::call_info &info,\n \t of C11.  Warn on this only at level 2 but remember this and\n \t prevent folding the return value when done.  This allows for\n \t the possibility of the actual libc call failing due to ENOMEM\n-\t (like Glibc does under some conditions).  */\n+\t (like Glibc does with very large precision or width).\n+\t Issue the \"may exceed\" warning only for string functions and\n+\t not for fprintf or printf.  */\n \n       if (fmtres.range.min == fmtres.range.max)\n \twarned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n \t\t\t  \"%<%.*s%> directive output of %wu bytes exceeds \"\n \t\t\t  \"minimum required size of 4095\", dirlen,\n \t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t\t  fmtres.range.min);\n-      else\n+      else if (!minunder4k)\n+\twarned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t\t  \"%<%.*s%> directive output between %wu and %wu \"\n+\t\t\t  \"bytes exceeds minimum required size of 4095\",\n+\t\t\t  dirlen,\n+\t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t\t  fmtres.range.min, fmtres.range.max);\n+      else if (!info.retval_used () && info.is_string_func ())\n \twarned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n-\t\t\t  minunder4k\n-\t\t\t  ? G_(\"%<%.*s%> directive output between %wu and %wu \"\n-\t\t\t       \"bytes may exceed minimum required size of \"\n-\t\t\t       \"4095\")\n-\t\t\t  : G_(\"%<%.*s%> directive output between %wu and %wu \"\n-\t\t\t       \"bytes exceeds minimum required size of 4095\"),\n+\t\t\t  \"%<%.*s%> directive output between %wu and %wu \"\n+\t\t\t  \"bytes may exceed minimum required size of \"\n+\t\t\t  \"4095\",\n \t\t\t  dirlen,\n \t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t\t  fmtres.range.min, fmtres.range.max);\n@@ -2887,24 +2918,48 @@ format_directive (const sprintf_dom_walker::call_info &info,\n \t      && maxximax\n \t      && fmtres.range.max < HOST_WIDE_INT_MAX)))\n     {\n-      /* The directive output causes the total length of output\n-\t to exceed INT_MAX bytes.  */\n-\n-      if (fmtres.range.min == fmtres.range.max)\n-\twarned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n-\t\t\t  \"%<%.*s%> directive output of %wu bytes causes \"\n-\t\t\t  \"result to exceed %<INT_MAX%>\", dirlen,\n-\t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n-\t\t\t  fmtres.range.min);\n-      else\n+      if (fmtres.range.min > target_int_max ())\n+\t{\n+\t  /* The directive output exceeds INT_MAX bytes.  */\n+\t  if (fmtres.range.min == fmtres.range.max)\n+\t    warned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t\t      \"%<%.*s%> directive output of %wu bytes exceeds \"\n+\t\t\t      \"%<INT_MAX%>\", dirlen,\n+\t\t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t\t      fmtres.range.min);\n+\t  else\n+\t    warned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t\t      \"%<%.*s%> directive output between %wu and \"\n+\t\t\t      \"%wu bytes exceeds %<INT_MAX%>\", dirlen,\n+\t\t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t\t      fmtres.range.min, fmtres.range.max);\n+\t}\n+      else if (res->range.min > target_int_max ())\n+\t{\n+\t  /* The directive output is under INT_MAX but causes the result\n+\t     to exceed INT_MAX bytes.  */\n+\t  if (fmtres.range.min == fmtres.range.max)\n+\t    warned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t\t      \"%<%.*s%> directive output of %wu bytes causes \"\n+\t\t\t      \"result to exceed %<INT_MAX%>\", dirlen,\n+\t\t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t\t      fmtres.range.min);\n+\t  else\n+\t    warned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t\t      \"%<%.*s%> directive output between %wu and \"\n+\t\t\t      \"%wu bytes causes result to exceed %<INT_MAX%>\",\n+\t\t\t      dirlen,\n+\t\t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t\t      fmtres.range.min, fmtres.range.max);\n+\t}\n+      else if ((!info.retval_used () || !info.bounded)\n+\t       && (info.is_string_func ()))\n+\t/* Warn for calls to string functions that either aren't bounded\n+\t   (sprintf) or whose return value isn't used.  */\n \twarned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n-\t\t\t  fmtres.range.min > target_int_max ()\n-\t\t\t  ? G_(\"%<%.*s%> directive output between %wu and \"\n-\t\t\t       \"%wu bytes causes result to exceed \"\n-\t\t\t       \"%<INT_MAX%>\")\n-\t\t\t  : G_(\"%<%.*s%> directive output between %wu and \"\n-\t\t\t       \"%wu bytes may cause result to exceed \"\n-\t\t\t       \"%<INT_MAX%>\"), dirlen,\n+\t\t\t  \"%<%.*s%> directive output between %wu and \"\n+\t\t\t  \"%wu bytes may cause result to exceed \"\n+\t\t\t  \"%<INT_MAX%>\", dirlen,\n \t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t\t  fmtres.range.min, fmtres.range.max);\n     }\n@@ -2944,37 +2999,65 @@ format_directive (const sprintf_dom_walker::call_info &info,\n \n   res->warned |= warned;\n \n-  if (!dir.beg[0] && res->warned && info.objsize < HOST_WIDE_INT_MAX)\n+  if (!dir.beg[0] && res->warned)\n     {\n-      /* If a warning has been issued for buffer overflow or truncation\n-\t (but not otherwise) help the user figure out how big a buffer\n-\t they need.  */\n-\n       location_t callloc = gimple_location (info.callstmt);\n \n       unsigned HOST_WIDE_INT min = res->range.min;\n       unsigned HOST_WIDE_INT max = res->range.max;\n \n-      if (min == max)\n-\tinform (callloc,\n-\t\t(min == 1\n-\t\t ? G_(\"%qE output %wu byte into a destination of size %wu\")\n-\t\t : G_(\"%qE output %wu bytes into a destination of size %wu\")),\n-\t\tinfo.func, min, info.objsize);\n-      else if (max < HOST_WIDE_INT_MAX)\n-\tinform (callloc,\n-\t\t\"%qE output between %wu and %wu bytes into \"\n-\t\t\"a destination of size %wu\",\n-\t\tinfo.func, min, max, info.objsize);\n-      else if (min < res->range.likely && res->range.likely < max)\n-\tinform (callloc,\n-\t\t\"%qE output %wu or more bytes (assuming %wu) into \"\n-\t\t\"a destination of size %wu\",\n-\t\tinfo.func, min, res->range.likely, info.objsize);\n-      else\n-\tinform (callloc,\n-\t\t\"%qE output %wu or more bytes into a destination of size %wu\",\n-\t\tinfo.func, min, info.objsize);\n+      if (info.objsize < HOST_WIDE_INT_MAX)\n+\t{\n+\t  /* If a warning has been issued for buffer overflow or truncation\n+\t     help the user figure out how big a buffer they need.  */\n+\n+\t  if (min == max)\n+\t    inform (callloc,\n+\t\t    (min == 1\n+\t\t     ? G_(\"%qE output %wu byte into a destination of size %wu\")\n+\t\t     : G_(\"%qE output %wu bytes into a destination of size \"\n+\t\t\t  \"%wu\")),\n+\t\t    info.func, min, info.objsize);\n+\t  else if (max < HOST_WIDE_INT_MAX)\n+\t    inform (callloc,\n+\t\t    \"%qE output between %wu and %wu bytes into \"\n+\t\t    \"a destination of size %wu\",\n+\t\t    info.func, min, max, info.objsize);\n+\t  else if (min < res->range.likely && res->range.likely < max)\n+\t    inform (callloc,\n+\t\t    \"%qE output %wu or more bytes (assuming %wu) into \"\n+\t\t    \"a destination of size %wu\",\n+\t\t    info.func, min, res->range.likely, info.objsize);\n+\t  else\n+\t    inform (callloc,\n+\t\t    \"%qE output %wu or more bytes into a destination of size \"\n+\t\t    \"%wu\",\n+\t\t    info.func, min, info.objsize);\n+\t}\n+      else if (!info.is_string_func ())\n+\t{\n+\t  /* If the warning is for a file function function like fprintf\n+\t     of printf with no destination size just print the computed\n+\t     result.  */\n+\t  if (min == max)\n+\t    inform (callloc,\n+\t\t    (min == 1\n+\t\t     ? G_(\"%qE output %wu byte\")\n+\t\t     : G_(\"%qE output %wu bytes\")),\n+\t\t    info.func, min);\n+\t  else if (max < HOST_WIDE_INT_MAX)\n+\t    inform (callloc,\n+\t\t    \"%qE output between %wu and %wu bytes\",\n+\t\t    info.func, min, max);\n+\t  else if (min < res->range.likely && res->range.likely < max)\n+\t    inform (callloc,\n+\t\t    \"%qE output %wu or more bytes (assuming %wu)\",\n+\t\t    info.func, min, res->range.likely);\n+\t  else\n+\t    inform (callloc,\n+\t\t    \"%qE output %wu or more bytes\",\n+\t\t    info.func, min);\n+\t}\n     }\n \n   if (dump_file && *dir.beg)\n@@ -3501,14 +3584,14 @@ sprintf_dom_walker::compute_format_length (call_info &info,\n }\n \n /* Return the size of the object referenced by the expression DEST if\n-   available, or -1 otherwise.  */\n+   available, or the maximum possible size otherwise.  */\n \n static unsigned HOST_WIDE_INT\n get_destination_size (tree dest)\n {\n-  /* When there is no destination return -1.  */\n+  /* When there is no destination return the maximum.  */\n   if (!dest)\n-    return HOST_WIDE_INT_M1U;\n+    return HOST_WIDE_INT_MAX;\n \n   /* Initialize object size info before trying to compute it.  */\n   init_object_sizes ();\n@@ -3523,7 +3606,7 @@ get_destination_size (tree dest)\n   if (compute_builtin_object_size (dest, ost, &size))\n     return size;\n \n-  return HOST_WIDE_INT_M1U;\n+  return HOST_WIDE_INT_MAX;\n }\n \n /* Return true if the call described by INFO with result RES safe to\n@@ -3844,7 +3927,7 @@ sprintf_dom_walker::handle_gimple_call (gimple_stmt_iterator *gsi)\n \n     case BUILT_IN_PRINTF_CHK:\n       // Signature:\n-      //   __builtin_printf_chk (it, format, ...)\n+      //   __builtin_printf_chk (ost, format, ...)\n       idx_format = 1;\n       info.argidx = 2;\n       idx_dstptr = -1;"}, {"sha": "4422e4c86f6a0d2df12339b8c068243051ccedf2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-fprintf-warn-2.c", "status": "added", "additions": 324, "deletions": 0, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb319c505d0bc3497170b5cdaeaf774a67594ae3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-fprintf-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb319c505d0bc3497170b5cdaeaf774a67594ae3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-fprintf-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-fprintf-warn-2.c?ref=eb319c505d0bc3497170b5cdaeaf774a67594ae3", "patch": "@@ -0,0 +1,324 @@\n+/* PR middle-end/88993 - GCC 9 -Wformat-overflow=2 should reflect real\n+   libc limits\n+   Verify that -Wformat-overflow=2 \"may exceed\" warnings are not issued\n+   for printf family of functions.\n+   { dg-do compile }\n+   { dg-options \"-O -Wformat -Wformat-overflow=2 -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target int32plus } */\n+\n+#define INT_MAX __INT_MAX__\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+#if !__cplusplus\n+typedef __WCHAR_TYPE__ wchar_t;\n+#endif\n+\n+typedef struct FILE FILE;\n+\n+FILE *fp;\n+\n+#define T(...) __builtin_fprintf (__VA_ARGS__)\n+\n+/* Exercise the \"%c\" directive with constant arguments.  */\n+\n+void test_fprintf_c_const (int width)\n+{\n+  /* Verify that a warning is only issued when the output is definitely\n+     exceeded but not when exceeding it is possible but not inevitable.\n+     Also verify that a note is printed with amount of output produced\n+     by the call (the result - 1).  */\n+  T (fp, \"%2147483647c\", '1');\n+  T (fp, \"X%2147483647c\", '2');   /* { dg-warning \".%2147483647c. directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  /* { dg-message \".__builtin_fprintf. output 2147483649 bytes\" \"note\" { target *-*-* } .-1 } */\n+  T (fp, \"%2147483647cY\", '3');   /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (fp, \"%2147483648c\", '1');    /* { dg-warning \".%2147483648c. directive output of 2147483648 bytes exceeds .INT_MAX.\" } */\n+  T (fp, \"X%2147483649c\", '2');   /* { dg-warning \".%2147483649c. directive output of 2147483649 bytes exceeds .INT_MAX.\" } */\n+  T (fp, \"%2147483650cY\", '3');   /* { dg-warning \".%2147483650c. directive output of 2147483650 bytes exceeds .INT_MAX.\" } */\n+\n+  T (fp, \"%*c\", INT_MAX, '1');\n+  T (fp, \"X%*c\", INT_MAX, '1');   /* { dg-warning \".%*c. directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"%*cY\", INT_MAX, '1');   /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (fp, \"X%*c\", INT_MAX - 1, '1');\n+  T (fp, \"%*cY\", INT_MAX - 1, '1');\n+\n+  T (fp, \"%*cY\", INT_MAX, '1');   /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"X%*c\", INT_MAX, '1');   /* { dg-warning \".%*c. directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+}\n+\n+/* Exercise the \"%c\" directive with arguments in a known range.  */\n+\n+void test_fprintf_c_range (int width)\n+{\n+  /* Verify that an known upper bound doesn't trigger a warning.  */\n+  if (width > INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (fp, \"%*c\", width, '1');\n+  T (fp, \"X%*c\", width, '1');\n+  T (fp, \"%*cY\", width, '1');\n+\n+  T (fp, \"%*c\", width, '1');\n+  T (fp, \"X%*c\", width, '1');\n+  T (fp, \"%*cY\", width, '1');\n+\n+  T (fp, \"%*c%*c\", width, '1', width, '2');\n+  T (fp, \"X%*cY%*cZ\", width, '1', width, '2');\n+\n+  /* Verify that a lower bound in excess of 4095 doesn't trigger\n+     a warning.  */\n+  if (width < 4096)\n+    width = 4096;\n+\n+  T (fp, \"%*c\", width, '1');\n+  T (fp, \"X%*c\", width, '1');\n+  T (fp, \"%*cY\", width, '1');\n+\n+  /* Verify that a large lower bound triggers a warning when the total\n+     result of the function definitely exceeds INT_MAX.  */\n+  if (width < INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (fp, \"%*c\", width, '1');\n+  T (fp, \"X%*c\", width, '2');\n+  T (fp, \"%*cY\", width, '3');\n+  T (fp, \"X%*cY\", width, '4');    /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+  /* { dg-message \".__builtin_fprintf. output 2147483649 bytes\" \"note\" { target *-*-* } .-1 } */\n+}\n+\n+\n+/* Exercise the \"%s\" directive.  */\n+\n+void test_fprintf_s_const (int width, const char *s)\n+{\n+  T (fp, \"%2147483647s\", s);\n+  T (fp, \"%2147483647s\", \"1\");\n+\n+  T (fp, \"%2147483647.2147483647s\", s);\n+  T (fp, \"%2147483647.2147483647s\", \"12\");\n+\n+  T (fp, \"X%2147483647s\", s);     /* { dg-warning \".%2147483647s. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"%2147483647sY\", s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (fp, \"X%2147483647.1s\", s);   /* { dg-warning \".%2147483647\\\\\\.1s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"%2147483647.2sY\", s);   /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (fp, \"X%1.2147483647s\", s);\n+  T (fp, \"%2.2147483647sY\", s);\n+\n+  T (fp, \"X%1.2147483647s\", \"123\");\n+  T (fp, \"%2.2147483647sY\", \"1234\");\n+\n+  T (fp, \"%2147483648s\", s);      /* { dg-warning \"%2147483648s. directive output between 2147483648 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+  T (fp, \"X%2147483649s\", s);     /* { dg-warning \"%2147483649s. directive output between 2147483649 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+  T (fp, \"%2147483650sY\", s);     /* { dg-warning \".%2147483650s. directive output between 2147483650 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+\n+  T (fp, \"%*s\", INT_MAX, s);\n+  T (fp, \"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (fp, \"X%*s\", INT_MAX - 1, s);\n+  T (fp, \"%*sY\", INT_MAX - 1, s);\n+\n+  T (fp, \"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+\n+  if (width > INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (fp, \"%*s\", width, s);\n+  T (fp, \"X%*s\", width, s);\n+  T (fp, \"%*sY\", width, s);\n+\n+  T (fp, \"%*s\", width, s);\n+  T (fp, \"X%*s\", width, s);\n+  T (fp, \"%*sY\", width, s);\n+\n+  T (fp, \"%*s%*s\", width, s, width, s);\n+  T (fp, \"X%*sY%*sZ\", width, s, width, s);\n+\n+  if (width < 4096)\n+    width = 4096;\n+\n+  T (fp, \"%*s\", width, s);\n+  T (fp, \"X%*s\", width, s);\n+  T (fp, \"%*sY\", width, s);\n+\n+  if (width < INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (fp, \"%*s\", width, s);\n+  T (fp, \"X%*s\", width, s);\n+  T (fp, \"%*sY\", width, s);\n+  T (fp, \"X%*sY\", width, s);      /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+}\n+\n+/* Exercise the \"%ls\" directive.  */\n+\n+void test_fprintf_ls_const (int width, const wchar_t *s)\n+{\n+  T (fp, \"%2147483647ls\", s);\n+  T (fp, \"X%2147483647ls\", s);    /* { dg-warning \".%2147483647ls. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"%2147483647lsY\", s);    /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (fp, \"%2147483648ls\", s);     /* { dg-warning \"%2147483648ls. directive output between 2147483648 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+  T (fp, \"X%2147483649ls\", s);    /* { dg-warning \"%2147483649ls. directive output between 2147483649 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+  T (fp, \"%2147483650lsY\", s);    /* { dg-warning \".%2147483650ls. directive output between 2147483650 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+\n+  T (fp, \"%*ls\", INT_MAX, s);\n+  T (fp, \"X%*ls\", INT_MAX, s);    /* { dg-warning \".%\\\\\\*ls. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"%*lsY\", INT_MAX, s);    /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (fp, \"X%*ls\", INT_MAX - 1, s);\n+  T (fp, \"%*lsY\", INT_MAX - 1, s);\n+\n+  T (fp, \"%*lsY\", INT_MAX, s);    /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"X%*ls\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*ls. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+\n+  if (width > INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (fp, \"%*ls\", width, s);\n+  T (fp, \"X%*ls\", width, s);\n+  T (fp, \"%*lsY\", width, s);\n+\n+  T (fp, \"%*ls\", width, s);\n+  T (fp, \"X%*ls\", width, s);\n+  T (fp, \"%*lsY\", width, s);\n+\n+  T (fp, \"%*ls%*ls\", width, s, width, s);\n+  T (fp, \"X%*lsY%*lsZ\", width, s, width, s);\n+\n+  if (width < 4096)\n+    width = 4096;\n+\n+  T (fp, \"%*ls\", width, s);\n+  T (fp, \"X%*ls\", width, s);\n+  T (fp, \"%*lsY\", width, s);\n+\n+  if (width < INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (fp, \"%*ls\", width, s);\n+  T (fp, \"X%*ls\", width, s);\n+  T (fp, \"%*lsY\", width, s);\n+  T (fp, \"X%*lsY\", width, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+}\n+\n+\n+/* Also exercise fprintf_chk.  */\n+\n+#undef T\n+#define T(...) __builtin___fprintf_chk (__VA_ARGS__)\n+\n+void test_fprintf_chk_s_const (int width)\n+{\n+  const char *s = \"0123456789\";\n+\n+  T (fp, 0, \"%2147483647s\", s);\n+  T (fp, 0, \"X%2147483647s\", s);    /* { dg-warning \".%2147483647s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, 0, \"%2147483647sY\", s);    /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (fp, 0, \"%2147483648s\", s);      /* { dg-warning \"%2147483648s. directive output of 2147483648 bytes exceeds .INT_MAX.\" } */\n+  T (fp, 0, \"X%2147483649s\", s);     /* { dg-warning \"%2147483649s. directive output of 2147483649 bytes exceeds .INT_MAX.\" } */\n+  T (fp, 0, \"%2147483650sY\", s);     /* { dg-warning \".%2147483650s. directive output of 2147483650 bytes exceeds .INT_MAX.\" } */\n+\n+  T (fp, 0, \"%*s\", INT_MAX, s);\n+  T (fp, 0, \"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, 0, \"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (fp, 0, \"X%*s\", INT_MAX - 1, s);\n+  T (fp, 0, \"%*sY\", INT_MAX - 1, s);\n+\n+  T (fp, 0, \"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, 0, \"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  if (width > INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (fp, 0, \"%*s\", width, s);\n+  T (fp, 0, \"X%*s\", width, s);\n+  T (fp, 0, \"%*sY\", width, s);\n+\n+  T (fp, 0, \"%*s\", width, s);\n+  T (fp, 0, \"X%*s\", width, s);\n+  T (fp, 0, \"%*sY\", width, s);\n+\n+  T (fp, 0, \"%*s%*s\", width, s, width, s);\n+  T (fp, 0, \"X%*sY%*sZ\", width, s, width, s);\n+\n+  if (width < 4096)\n+    width = 4096;\n+\n+  T (fp, 0, \"%*s\", width, s);\n+  T (fp, 0, \"X%*s\", width, s);\n+  T (fp, 0, \"%*sY\", width, s);\n+\n+  if (width < INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (fp, 0, \"%*s\", width, s);\n+  T (fp, 0, \"X%*s\", width, s);\n+  T (fp, 0, \"%*sY\", width, s);\n+  T (fp, 0, \"X%*sY\", width, s);      /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+}\n+\n+\n+/* And finally exercise fprintf_unlocked.  */\n+\n+#undef T\n+#define T(...) __builtin_fprintf_unlocked (__VA_ARGS__)\n+\n+void test_fprintf_unlocked_s_const (int width)\n+{\n+  const char *s = \"0123456789\";\n+\n+  T (fp, \"%2147483647s\", s);\n+  T (fp, \"X%2147483647s\", s);     /* { dg-warning \".%2147483647s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"%2147483647sY\", s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (fp, \"%2147483648s\", s);      /* { dg-warning \"%2147483648s. directive output of 2147483648 bytes exceeds .INT_MAX.\" } */\n+  T (fp, \"X%2147483649s\", s);     /* { dg-warning \"%2147483649s. directive output of 2147483649 bytes exceeds .INT_MAX.\" } */\n+  T (fp, \"%2147483650sY\", s);     /* { dg-warning \".%2147483650s. directive output of 2147483650 bytes exceeds .INT_MAX.\" } */\n+\n+  T (fp, \"%*s\", INT_MAX, s);\n+  T (fp, \"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (fp, \"X%*s\", INT_MAX - 1, s);\n+  T (fp, \"%*sY\", INT_MAX - 1, s);\n+\n+  T (fp, \"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+  T (fp, \"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  if (width > INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (fp, \"%*s\", width, s);\n+  T (fp, \"X%*s\", width, s);\n+  T (fp, \"%*sY\", width, s);\n+\n+  T (fp, \"%*s\", width, s);\n+  T (fp, \"X%*s\", width, s);\n+  T (fp, \"%*sY\", width, s);\n+\n+  T (fp, \"%*s%*s\", width, s, width, s);\n+  T (fp, \"X%*sY%*sZ\", width, s, width, s);\n+\n+  if (width < 4096)\n+    width = 4096;\n+\n+  T (fp, \"%*s\", width, s);\n+  T (fp, \"X%*s\", width, s);\n+  T (fp, \"%*sY\", width, s);\n+\n+  if (width < INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (fp, \"%*s\", width, s);\n+  T (fp, \"X%*s\", width, s);\n+  T (fp, \"%*sY\", width, s);\n+  T (fp, \"X%*sY\", width, s);      /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+}"}, {"sha": "31d16bc99692ea49387e687da1428454de378d63", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-printf-warn-2.c", "status": "added", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb319c505d0bc3497170b5cdaeaf774a67594ae3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-printf-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb319c505d0bc3497170b5cdaeaf774a67594ae3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-printf-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-printf-warn-2.c?ref=eb319c505d0bc3497170b5cdaeaf774a67594ae3", "patch": "@@ -0,0 +1,293 @@\n+/* PR middle-end/88993 - GCC 9 -Wformat-overflow=2 should reflect real\n+   libc limits\n+   Verify that -Wformat-overflow=2 \"may exceed\" warnings are not issued\n+   for printf family of functions.\n+   { dg-do compile }\n+   { dg-options \"-O -Wformat -Wformat-overflow=2 -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target int32plus } */\n+\n+\n+#define INT_MAX __INT_MAX__\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+#if !__cplusplus\n+typedef __WCHAR_TYPE__ wchar_t;\n+#endif\n+\n+#define T(...) __builtin_printf (__VA_ARGS__)\n+\n+/* Exercise the \"%c\" directive with constant arguments.  */\n+\n+void test_printf_c_const (int width)\n+{\n+  /* Verify that a warning is only issued when the output is definitely\n+     exceeded but not when exceeding it is possible but not inevitable.  */\n+  T (\"%2147483647c\", '1');\n+  T (\"X%2147483647c\", '2');   /* { dg-warning \".%*c. directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"%2147483647cY\", '3');   /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (\"%2147483648c\", '1');    /* { dg-warning \".%2147483648c. directive output of 2147483648 bytes exceeds .INT_MAX.\" } */\n+  T (\"X%2147483649c\", '2');   /* { dg-warning \".%2147483649c. directive output of 2147483649 bytes exceeds .INT_MAX.\" } */\n+  T (\"%2147483650cY\", '3');   /* { dg-warning \".%2147483650c. directive output of 2147483650 bytes exceeds .INT_MAX.\" } */\n+\n+  T (\"%*c\", INT_MAX, '1');\n+  T (\"X%*c\", INT_MAX, '1');   /* { dg-warning \".%*c. directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"%*cY\", INT_MAX, '1');   /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (\"X%*c\", INT_MAX - 1, '1');\n+  T (\"%*cY\", INT_MAX - 1, '1');\n+\n+  T (\"%*cY\", INT_MAX, '1');   /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"X%*c\", INT_MAX, '1');   /* { dg-warning \".%*c. directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+\n+  if (width > INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (\"%*c\", width, '1');\n+  T (\"X%*c\", width, '1');\n+  T (\"%*cY\", width, '1');\n+\n+  T (\"%*c\", width, '1');\n+  T (\"X%*c\", width, '1');\n+  T (\"%*cY\", width, '1');\n+\n+  T (\"%*c%*c\", width, '1', width, '2');\n+  T (\"X%*cY%*cZ\", width, '1', width, '2');\n+\n+  if (width < 4096)\n+    width = 4096;\n+\n+  T (\"%*c\", width, '1');\n+  T (\"X%*c\", width, '1');\n+  T (\"%*cY\", width, '1');\n+\n+  if (width < INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (\"%*c\", width, '1');\n+  T (\"X%*c\", width, '2');\n+  T (\"%*cY\", width, '3');\n+  T (\"X%*cY\", width, '4');    /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+}\n+\n+\n+/* Exercise the \"%s\" directive with constant arguments.  */\n+\n+void test_printf_s_const (int width, const char *s)\n+{\n+  T (\"%2147483647s\", s);\n+  T (\"X%2147483647s\", s);     /* { dg-warning \".%2147483647s. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"%2147483647sY\", s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (\"%2147483648s\", s);      /* { dg-warning \"%2147483648s. directive output between 2147483648 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+  T (\"X%2147483649s\", s);     /* { dg-warning \"%2147483649s. directive output between 2147483649 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+  T (\"%2147483650sY\", s);     /* { dg-warning \".%2147483650s. directive output between 2147483650 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+\n+  T (\"%*s\", INT_MAX, s);\n+  T (\"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (\"X%*s\", INT_MAX - 1, s);\n+  T (\"%*sY\", INT_MAX - 1, s);\n+\n+  T (\"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+\n+  if (width > INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (\"%*s\", width, s);\n+  T (\"X%*s\", width, s);\n+  T (\"%*sY\", width, s);\n+\n+  T (\"%*s\", width, s);\n+  T (\"X%*s\", width, s);\n+  T (\"%*sY\", width, s);\n+\n+  T (\"%*s%*s\", width, s, width, s);\n+  T (\"X%*sY%*sZ\", width, s, width, s);\n+\n+  if (width < 4096)\n+    width = 4096;\n+\n+  T (\"%*s\", width, s);\n+  T (\"X%*s\", width, s);\n+  T (\"%*sY\", width, s);\n+\n+  if (width < INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (\"%*s\", width, s);\n+  T (\"X%*s\", width, s);\n+  T (\"%*sY\", width, s);\n+  T (\"X%*sY\", width, s);      /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+}\n+\n+/* Exercise the \"%ls\" directive with constant arguments.  */\n+\n+void test_printf_ls_const (int width, const wchar_t *s)\n+{\n+  T (\"%2147483647ls\", s);\n+  T (\"X%2147483647ls\", s);    /* { dg-warning \".%2147483647ls. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"%2147483647lsY\", s);    /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (\"%2147483648ls\", s);     /* { dg-warning \"%2147483648ls. directive output between 2147483648 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+  T (\"X%2147483649ls\", s);    /* { dg-warning \"%2147483649ls. directive output between 2147483649 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+  T (\"%2147483650lsY\", s);    /* { dg-warning \".%2147483650ls. directive output between 2147483650 and \\[0-9\\]+ bytes exceeds .INT_MAX.\" } */\n+\n+  T (\"%*ls\", INT_MAX, s);\n+  T (\"X%*ls\", INT_MAX, s);    /* { dg-warning \".%\\\\\\*ls. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"%*lsY\", INT_MAX, s);    /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (\"X%*ls\", INT_MAX - 1, s);\n+  T (\"%*lsY\", INT_MAX - 1, s);\n+\n+  T (\"%*lsY\", INT_MAX, s);    /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"X%*ls\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*ls. directive output between 2147483647 and \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+\n+  if (width > INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (\"%*ls\", width, s);\n+  T (\"X%*ls\", width, s);\n+  T (\"%*lsY\", width, s);\n+\n+  T (\"%*ls\", width, s);\n+  T (\"X%*ls\", width, s);\n+  T (\"%*lsY\", width, s);\n+\n+  T (\"%*ls%*ls\", width, s, width, s);\n+  T (\"X%*lsY%*lsZ\", width, s, width, s);\n+\n+  if (width < 4096)\n+    width = 4096;\n+\n+  T (\"%*ls\", width, s);\n+  T (\"X%*ls\", width, s);\n+  T (\"%*lsY\", width, s);\n+\n+  if (width < INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (\"%*ls\", width, s);\n+  T (\"X%*ls\", width, s);\n+  T (\"%*lsY\", width, s);\n+  T (\"X%*lsY\", width, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+}\n+\n+\n+/* Also exercise printf_chk.  */\n+\n+#undef T\n+#define T(...) __builtin___printf_chk (__VA_ARGS__)\n+\n+void test_printf_chk_s_const (int width)\n+{\n+  const char *s = \"0123456789\";\n+\n+  T (0, \"%2147483647s\", s);\n+  T (0, \"X%2147483647s\", s);    /* { dg-warning \".%2147483647s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+  T (0, \"%2147483647sY\", s);    /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (0, \"%2147483648s\", s);      /* { dg-warning \"%2147483648s. directive output of 2147483648 bytes exceeds .INT_MAX.\" } */\n+  T (0, \"X%2147483649s\", s);     /* { dg-warning \"%2147483649s. directive output of 2147483649 bytes exceeds .INT_MAX.\" } */\n+  T (0, \"%2147483650sY\", s);     /* { dg-warning \".%2147483650s. directive output of 2147483650 bytes exceeds .INT_MAX.\" } */\n+\n+  T (0, \"%*s\", INT_MAX, s);\n+  T (0, \"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+  T (0, \"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (0, \"X%*s\", INT_MAX - 1, s);\n+  T (0, \"%*sY\", INT_MAX - 1, s);\n+\n+  T (0, \"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+  T (0, \"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  if (width > INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (0, \"%*s\", width, s);\n+  T (0, \"X%*s\", width, s);\n+  T (0, \"%*sY\", width, s);\n+\n+  T (0, \"%*s\", width, s);\n+  T (0, \"X%*s\", width, s);\n+  T (0, \"%*sY\", width, s);\n+\n+  T (0, \"%*s%*s\", width, s, width, s);\n+  T (0, \"X%*sY%*sZ\", width, s, width, s);\n+\n+  if (width < 4096)\n+    width = 4096;\n+\n+  T (0, \"%*s\", width, s);\n+  T (0, \"X%*s\", width, s);\n+  T (0, \"%*sY\", width, s);\n+\n+  if (width < INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (0, \"%*s\", width, s);\n+  T (0, \"X%*s\", width, s);\n+  T (0, \"%*sY\", width, s);\n+  T (0, \"X%*sY\", width, s);      /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+}\n+\n+\n+/* And finally exercise printf_unlocked.  */\n+\n+#undef T\n+#define T(...) __builtin_printf_unlocked (__VA_ARGS__)\n+\n+void test_printf_unlocked_s_const (int width)\n+{\n+  const char *s = \"0123456789\";\n+\n+  T (\"%2147483647s\", s);\n+  T (\"X%2147483647s\", s);     /* { dg-warning \".%2147483647s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"%2147483647sY\", s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (\"%2147483648s\", s);      /* { dg-warning \"%2147483648s. directive output of 2147483648 bytes exceeds .INT_MAX.\" } */\n+  T (\"X%2147483649s\", s);     /* { dg-warning \"%2147483649s. directive output of 2147483649 bytes exceeds .INT_MAX.\" } */\n+  T (\"%2147483650sY\", s);     /* { dg-warning \".%2147483650s. directive output of 2147483650 bytes exceeds .INT_MAX.\" } */\n+\n+  T (\"%*s\", INT_MAX, s);\n+  T (\"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  T (\"X%*s\", INT_MAX - 1, s);\n+  T (\"%*sY\", INT_MAX - 1, s);\n+\n+  T (\"%*sY\", INT_MAX, s);     /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+  T (\"X%*s\", INT_MAX, s);     /* { dg-warning \".%\\\\\\*s. directive output of 2147483647 bytes causes result to exceed .INT_MAX.\" } */\n+\n+  if (width > INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (\"%*s\", width, s);\n+  T (\"X%*s\", width, s);\n+  T (\"%*sY\", width, s);\n+\n+  T (\"%*s\", width, s);\n+  T (\"X%*s\", width, s);\n+  T (\"%*sY\", width, s);\n+\n+  T (\"%*s%*s\", width, s, width, s);\n+  T (\"X%*sY%*sZ\", width, s, width, s);\n+\n+  if (width < 4096)\n+    width = 4096;\n+\n+  T (\"%*s\", width, s);\n+  T (\"X%*s\", width, s);\n+  T (\"%*sY\", width, s);\n+\n+  if (width < INT_MAX - 1)\n+    width = INT_MAX - 1;\n+\n+  T (\"%*s\", width, s);\n+  T (\"X%*s\", width, s);\n+  T (\"%*sY\", width, s);\n+  T (\"X%*sY\", width, s);      /* { dg-warning \".Y. directive output of 1 bytes causes result to exceed .INT_MAX.\" } */\n+}"}, {"sha": "3f2b7562cad5b93708b3b8889a5c63e7caf2ea70", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-warn-3.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb319c505d0bc3497170b5cdaeaf774a67594ae3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb319c505d0bc3497170b5cdaeaf774a67594ae3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-3.c?ref=eb319c505d0bc3497170b5cdaeaf774a67594ae3", "patch": "@@ -1,6 +1,6 @@\n /* PR middle-end/79448 - unhelpful -Wformat-truncation=2 warning\n    { dg-do compile }\n-   { dg-options \"-O2 -Wformat -Wformat-truncation=2 -ftrack-macro-expansion=0\" } \n+   { dg-options \"-O2 -Wformat -Wformat-truncation=2 -ftrack-macro-expansion=0\" }\n    { dg-require-effective-target ptr32plus } */\n \n typedef __SIZE_TYPE__  size_t;\n@@ -166,11 +166,17 @@ void test_string_checked (const char *s, const struct Arrays *ar)\n   T (-1, \"%s%s\", ar->a4k, ar->ax);\n \n   /* Verify that an array that fits a string longer than 4095 bytes\n-     does trigger a warning.  */\n-  T (-1, \"%-s\", ar->a4kp1);   /* { dg-warning \"directive output between 0 and 4096 bytes may exceed minimum required size of 4095\" } */\n-\n-  /* Also verify that a %s directive with width greater than 4095\n-     triggers a warning even if the argument is not longer than 4k.  */\n+     does not trigger a warning.  (No known implementation has trouble\n+     with this).  */\n+  T (-1, \"%s\", ar->a4kp1);\n+\n+  /* Verify that a %s directive with width greater than 4095 does\n+     trigger a warning even if the string argument is not longer\n+     than 4k.  Glibc only has trouble with directives whose width\n+     or precision exceeds 64K or so:\n+     https://bugzilla.redhat.com/show_bug.cgi?id=441945 *\n+     but hardcoding that as the limit and assuming no other\n+     implementation has a lower one seems unwise.  */\n   T (-1, \"%*s\", 4096, ar->a4k);   /* { dg-warning \"directive output of 4096 bytes exceeds minimum required size of 4095\" } */\n \n   /* Verify that precision constrains the putput and suppresses the 4k\n@@ -190,5 +196,7 @@ void test_string_checked (const char *s, const struct Arrays *ar)\n   T (-1, \"%s %s %s\", ar->a4k, ar->a4k, ar->a4k);\n   T (-1, \"%s %s %s\", ar->ax, ar->ax, ar->ax);\n \n-  T (-1, \"%-s\", ar->amax);   /* { dg-warning \"directive output between 0 and \\[0-9\\]+ bytes may exceed minimum required size of 4095\" } */\n+  /* Similar to the above, verify there's no warning for an array\n+     just because its size is INT_MAX bytes.  */\n+  T (-1, \"%s\", ar->amax);\n }"}, {"sha": "6a18f1776a704519d7a2f2e75bc15f6069f2d03f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-18.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb319c505d0bc3497170b5cdaeaf774a67594ae3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb319c505d0bc3497170b5cdaeaf774a67594ae3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-18.c?ref=eb319c505d0bc3497170b5cdaeaf774a67594ae3", "patch": "@@ -118,9 +118,9 @@ void test_width_and_precision_out_of_range (char *d)\n   /* The range here happens to be a property of the compiler, not\n      one of the target.  */\n   T (\"%9223372036854775808i\", 0);    /* { dg-warning \"width out of range\" \"first\" } */\n-  /* { dg-warning \"result to exceed .INT_MAX.\" \"second\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"exceeds .INT_MAX.\" \"second\" { target *-*-* } .-1 } */\n   T (\"%.9223372036854775808i\", 0);   /* { dg-warning \"precision out of range\" \"first\" } */\n-  /* { dg-warning \"causes result to exceed .INT_MAX.\" \"second\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"exceeds .INT_MAX.\" \"second\" { target *-*-* } .-1 } */\n \n   /* The following is diagnosed by -Wformat (disabled here).  */\n   /* T (\"%9223372036854775808$i\", 0); */"}]}