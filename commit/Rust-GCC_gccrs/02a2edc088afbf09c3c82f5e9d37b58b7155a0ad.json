{"sha": "02a2edc088afbf09c3c82f5e9d37b58b7155a0ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhMmVkYzA4OGFmYmYwOWMzYzgyZjVlOWQzN2I1OGI3MTU1YTBhZA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2003-08-19T20:12:44Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2003-08-19T20:12:44Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r70573", "tree": {"sha": "346f1ebd450686d1b4790a3e7d867e9291da3711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/346f1ebd450686d1b4790a3e7d867e9291da3711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad/comments", "author": null, "committer": null, "parents": [{"sha": "ab3d4713ce0f7e89cde72effba3cb5088e545f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab3d4713ce0f7e89cde72effba3cb5088e545f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab3d4713ce0f7e89cde72effba3cb5088e545f0d"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "7b09e5d6f8e00edd5edf9caa38af23ee881199a2", "filename": "gcc/c-common.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=02a2edc088afbf09c3c82f5e9d37b58b7155a0ad", "patch": "@@ -412,6 +412,11 @@ int warn_main;\n \n int warn_sequence_point;\n \n+/* Nonzero means warn about uninitialized variable when it is initialized with itself.\n+   For example: int i = i;, GCC will not warn about this when warn_init_self is nonzero. */\n+\n+int warn_init_self;\n+\n /* Nonzero means to warn about compile-time division by zero.  */\n int warn_div_by_zero = 1;\n \n@@ -5729,4 +5734,35 @@ c_estimate_num_insns (tree decl)\n   return num;\n }\n \n+/* Used by c_decl_uninit to find where expressions like x = x + 1; */\n+\n+static tree\n+c_decl_uninit_1 (tree *t, int *walk_sub_trees, void *x)\n+{\n+  /* If x = EXP(&x)EXP, then do not warn about the use of x. */\n+  if (TREE_CODE (*t) == ADDR_EXPR && TREE_OPERAND (*t, 0) == x)\n+    {\n+      *walk_sub_trees = 0;\n+      return NULL_TREE;\n+    }\n+  if (*t == x)\n+    return *t;\n+  return NULL_TREE;\n+}\n+\n+/* Find out if a variable is uninitialized based on DECL_INITIAL.  */\n+\n+bool\n+c_decl_uninit (tree t)\n+{\n+  /* int x = x; is GCC extension to turn off this warning, only if warn_init_self is zero. */\n+  if (DECL_INITIAL (t) == t)\n+    return warn_init_self ? true : false;\n+\n+  /* Walk the trees looking for the variable itself. */\n+  if (walk_tree_without_duplicates (&DECL_INITIAL (t), c_decl_uninit_1, t))\n+    return true;\n+  return false;\n+}\n+\n #include \"gt-c-common.h\""}, {"sha": "ea957e49e98a9211df2c3c6aaae10909e472b8ef", "filename": "gcc/testsuite/gcc.dg/uninit-D.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-D.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-D.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-D.c?ref=02a2edc088afbf09c3c82f5e9d37b58b7155a0ad", "patch": "@@ -0,0 +1,9 @@\n+/* Test we do not warn about initializing variable with self. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+int f()\n+{\n+  int i = i;\n+  return i;\n+}"}, {"sha": "42b84302f967da6ddffc7709b7f2fd052d0d7e2c", "filename": "gcc/testsuite/gcc.dg/uninit-E.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-E.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-E.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-E.c?ref=02a2edc088afbf09c3c82f5e9d37b58b7155a0ad", "patch": "@@ -0,0 +1,9 @@\n+/* Test we do warn about initializing variable with self when -Winit-self is supplied. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized -Winit-self\" } */\n+\n+int f()\n+{\n+  int i = i;\n+  return i;\n+}"}, {"sha": "1dbb365e5b70729f6146ffcd936c1adcbb0a3100", "filename": "gcc/testsuite/gcc.dg/uninit-F.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-F.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-F.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-F.c?ref=02a2edc088afbf09c3c82f5e9d37b58b7155a0ad", "patch": "@@ -0,0 +1,9 @@\n+/* Test we do warn about initializing variable with self in the initialization. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+int f()\n+{\n+  int i = i + 1; /* { dg-warning \"i\" \"uninitialized variable warning\" }  */\n+  return i;\n+}"}, {"sha": "08f5f532116097e214f331102be6cc680d31824a", "filename": "gcc/testsuite/gcc.dg/uninit-G.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-G.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a2edc088afbf09c3c82f5e9d37b58b7155a0ad/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-G.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-G.c?ref=02a2edc088afbf09c3c82f5e9d37b58b7155a0ad", "patch": "@@ -0,0 +1,9 @@\n+/* Test we do not warn about initializing variable with address of self in the initialization. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+void *f()\n+{\n+  void *i = &i;\n+  return i;\n+}"}]}