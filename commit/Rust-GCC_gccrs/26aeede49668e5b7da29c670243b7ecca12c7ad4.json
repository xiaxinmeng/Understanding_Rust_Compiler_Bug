{"sha": "26aeede49668e5b7da29c670243b7ecca12c7ad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZhZWVkZTQ5NjY4ZTViN2RhMjljNjcwMjQzYjdlY2NhMTJjN2FkNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-05-01T08:27:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-05-01T08:27:55Z"}, "message": "PR target/6512, PR target/5628\n\n\tPR target/6512, PR target/5628\n\t* config/sparc/sparc.md (movdf_insn_v9only_novis): Don't allow >= %f32\n\twhen memory is not aligned.\n\t(movdf_insn_v9only_vis): Likewise.\n\t* config/sparc/sparc.h (SECONDARY_INPUT_RELOAD_CLASS): Request a FP_REGS\n\ttemporary for EXTRA_FP_REGS DFmode load from unaligned memory.\n\t(SECONDARY_OUTPUT_RELOAD_CLASS): Similarly.\n\nFrom-SVN: r52995", "tree": {"sha": "426779a30e770e0296efa4419af6cd770bc8f452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/426779a30e770e0296efa4419af6cd770bc8f452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26aeede49668e5b7da29c670243b7ecca12c7ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26aeede49668e5b7da29c670243b7ecca12c7ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26aeede49668e5b7da29c670243b7ecca12c7ad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26aeede49668e5b7da29c670243b7ecca12c7ad4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2600218b4da6ad8f4c3160290585430ddd50a5c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2600218b4da6ad8f4c3160290585430ddd50a5c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2600218b4da6ad8f4c3160290585430ddd50a5c8"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "39212f45eaef23c3d450aa21fb8440eae4cbbbf4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26aeede49668e5b7da29c670243b7ecca12c7ad4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26aeede49668e5b7da29c670243b7ecca12c7ad4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26aeede49668e5b7da29c670243b7ecca12c7ad4", "patch": "@@ -1,3 +1,13 @@\n+2002-05-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/6512, PR target/5628\n+\t* config/sparc/sparc.md (movdf_insn_v9only_novis): Don't allow >= %f32\n+\twhen memory is not aligned.\n+\t(movdf_insn_v9only_vis): Likewise.\n+\t* config/sparc/sparc.h (SECONDARY_INPUT_RELOAD_CLASS): Request a FP_REGS\n+\ttemporary for EXTRA_FP_REGS DFmode load from unaligned memory.\n+\t(SECONDARY_OUTPUT_RELOAD_CLASS): Similarly.\n+\n 2002-05-01  Aldy Hernandez  <aldyh@redhat.com>\n \n         * gcc.dg/altivec-7.c: New."}, {"sha": "d70f5428971d9e8d9d19bfc60f818c860c95c172", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26aeede49668e5b7da29c670243b7ecca12c7ad4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26aeede49668e5b7da29c670243b7ecca12c7ad4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=26aeede49668e5b7da29c670243b7ecca12c7ad4", "patch": "@@ -1423,7 +1423,10 @@ extern const char leaf_reg_remap[];\n \n    We need a temporary when loading/storing a HImode/QImode value\n    between memory and the FPU registers.  This can happen when combine puts\n-   a paradoxical subreg in a float/fix conversion insn.  */\n+   a paradoxical subreg in a float/fix conversion insn.\n+\n+   We need a temporary when loading/storing a DFmode value between\n+   unaligned memory and the upper FPU registers.  */\n \n #define SECONDARY_INPUT_RELOAD_CLASS(CLASS, MODE, IN)\t\t\\\n   ((FP_REG_CLASS_P (CLASS)\t\t\t\t\t\\\n@@ -1432,28 +1435,36 @@ extern const char leaf_reg_remap[];\n         || ((GET_CODE (IN) == REG || GET_CODE (IN) == SUBREG)\t\\\n             && true_regnum (IN) == -1)))\t\t\t\\\n    ? GENERAL_REGS\t\t\t\t\t\t\\\n-   : (((TARGET_CM_MEDANY\t\t\t\t\t\\\n-        && symbolic_operand ((IN), (MODE)))\t\t\t\\\n-       || (TARGET_CM_EMBMEDANY\t\t\t\t\t\\\n-           && text_segment_operand ((IN), (MODE))))\t\t\\\n-      && !flag_pic)\t\t\t\t\t\t\\\n-     ? GENERAL_REGS\t\t\t\t\t\t\\\n-     : NO_REGS)\n+   : ((CLASS) == EXTRA_FP_REGS && (MODE) == DFmode\t\t\\\n+      && GET_CODE (IN) == MEM && TARGET_ARCH32\t\t\t\\\n+      && ! mem_min_alignment ((IN), 8))\t\t\t\t\\\n+     ? FP_REGS\t\t\t\t\t\t\t\\\n+     : (((TARGET_CM_MEDANY\t\t\t\t\t\\\n+\t  && symbolic_operand ((IN), (MODE)))\t\t\t\\\n+\t || (TARGET_CM_EMBMEDANY\t\t\t\t\\\n+\t     && text_segment_operand ((IN), (MODE))))\t\t\\\n+\t&& !flag_pic)\t\t\t\t\t\t\\\n+       ? GENERAL_REGS\t\t\t\t\t\t\\\n+       : NO_REGS)\n \n #define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS, MODE, IN)\t\t\\\n-   ((FP_REG_CLASS_P (CLASS)\t\t\t\t\t\\\n+  ((FP_REG_CLASS_P (CLASS)\t\t\t\t\t\\\n      && ((MODE) == HImode || (MODE) == QImode)\t\t\t\\\n      && (GET_CODE (IN) == MEM\t\t\t\t\t\\\n          || ((GET_CODE (IN) == REG || GET_CODE (IN) == SUBREG)\t\\\n              && true_regnum (IN) == -1)))\t\t\t\\\n-    ? GENERAL_REGS\t\t\t\t\t\t\\\n-   : (((TARGET_CM_MEDANY\t\t\t\t\t\\\n-        && symbolic_operand ((IN), (MODE)))\t\t\t\\\n-       || (TARGET_CM_EMBMEDANY\t\t\t\t\t\\\n-           && text_segment_operand ((IN), (MODE))))\t\t\\\n-      && !flag_pic)\t\t\t\t\t\t\\\n-     ? GENERAL_REGS\t\t\t\t\t\t\\\n-     : NO_REGS)\n+   ? GENERAL_REGS\t\t\t\t\t\t\\\n+   : ((CLASS) == EXTRA_FP_REGS && (MODE) == DFmode\t\t\\\n+      && GET_CODE (IN) == MEM && TARGET_ARCH32\t\t\t\\\n+      && ! mem_min_alignment ((IN), 8))\t\t\t\t\\\n+     ? FP_REGS\t\t\t\t\t\t\t\\\n+     : (((TARGET_CM_MEDANY\t\t\t\t\t\\\n+\t  && symbolic_operand ((IN), (MODE)))\t\t\t\\\n+\t || (TARGET_CM_EMBMEDANY\t\t\t\t\\\n+\t     && text_segment_operand ((IN), (MODE))))\t\t\\\n+\t&& !flag_pic)\t\t\t\t\t\t\\\n+       ? GENERAL_REGS\t\t\t\t\t\t\\\n+       : NO_REGS)\n \n /* On SPARC it is not possible to directly move data between \n    GENERAL_REGS and FP_REGS.  */"}, {"sha": "8d246d009f362994b06bdb6056aeaa416c5def85", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26aeede49668e5b7da29c670243b7ecca12c7ad4/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26aeede49668e5b7da29c670243b7ecca12c7ad4/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=26aeede49668e5b7da29c670243b7ecca12c7ad4", "patch": "@@ -3535,8 +3535,8 @@\n ;; We have available v9 double floats but not 64-bit\n ;; integer registers and no VIS.\n (define_insn \"*movdf_insn_v9only_novis\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,T,W,U,T,e,*r,o\")\n-        (match_operand:DF 1 \"input_operand\"    \"e,W#F,G,e,T,U,o#F,*roF,*rGe\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,T,W,U,T,f,*r,o\")\n+        (match_operand:DF 1 \"input_operand\"    \"e,W#F,G,e,T,U,o#F,*roF,*rGf\"))]\n   \"TARGET_FPU\n    && TARGET_V9\n    && ! TARGET_VIS\n@@ -3561,8 +3561,8 @@\n ;; We have available v9 double floats but not 64-bit\n ;; integer registers but we have VIS.\n (define_insn \"*movdf_insn_v9only_vis\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,e,T,W,U,T,e,*r,o\")\n-        (match_operand:DF 1 \"input_operand\" \"G,e,W#F,G,e,T,U,o#F,*roGF,*rGe\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,e,T,W,U,T,f,*r,o\")\n+        (match_operand:DF 1 \"input_operand\" \"G,e,W#F,G,e,T,U,o#F,*roGF,*rGf\"))]\n   \"TARGET_FPU\n    && TARGET_VIS\n    && ! TARGET_ARCH64"}]}