{"sha": "aed93b23d7a09f4875e31a3472f8c900ddbad462", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVkOTNiMjNkN2EwOWY0ODc1ZTMxYTM0NzJmOGM5MDBkZGJhZDQ2Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-16T11:42:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-16T11:42:28Z"}, "message": "tree-vect-stmts.c (vectorizable_store): Adjust.\n\n2015-06-16  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-stmts.c (vectorizable_store): Adjust.\n\t(vectorizable_load): Likewise.\n\t* tree-vect-data-refs.c (vect_create_addr_base_for_vector_ref):\n\tSimplify.\n\t(vect_create_data_ref_ptr): Likewise.\n\t(bump_vector_ptr): Adjust.\n\n\t* gcc.target/i386/recip-vec-sqrtf-avx.c: Disable unrolling.\n\nFrom-SVN: r224514", "tree": {"sha": "c955887453a851973daa19dae3ed358fd4a9f642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c955887453a851973daa19dae3ed358fd4a9f642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aed93b23d7a09f4875e31a3472f8c900ddbad462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed93b23d7a09f4875e31a3472f8c900ddbad462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed93b23d7a09f4875e31a3472f8c900ddbad462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed93b23d7a09f4875e31a3472f8c900ddbad462/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "283f196368b2c217e3828953d5bad148a860e5a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283f196368b2c217e3828953d5bad148a860e5a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283f196368b2c217e3828953d5bad148a860e5a5"}], "stats": {"total": 89, "additions": 46, "deletions": 43}, "files": [{"sha": "92bd3a2ed967f45c0c903cb97c4d9d4066189f5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed93b23d7a09f4875e31a3472f8c900ddbad462/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed93b23d7a09f4875e31a3472f8c900ddbad462/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aed93b23d7a09f4875e31a3472f8c900ddbad462", "patch": "@@ -1,3 +1,12 @@\n+2015-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_store): Adjust.\n+\t(vectorizable_load): Likewise.\n+\t* tree-vect-data-refs.c (vect_create_addr_base_for_vector_ref):\n+\tSimplify.\n+\t(vect_create_data_ref_ptr): Likewise.\n+\t(bump_vector_ptr): Adjust.\n+\n 2015-06-16  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-stmts.c (vectorizable_load): Properly start loads"}, {"sha": "82a19fdda9cce2763a809568de1ac6996694f82a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed93b23d7a09f4875e31a3472f8c900ddbad462/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed93b23d7a09f4875e31a3472f8c900ddbad462/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aed93b23d7a09f4875e31a3472f8c900ddbad462", "patch": "@@ -1,3 +1,7 @@\n+2015-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/recip-vec-sqrtf-avx.c: Disable unrolling.\n+\n 2015-06-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/arm/pr65647.c: Do not override -mfloat-abi directives"}, {"sha": "d11bc0938901bbacd1f03f32c07f4f515676c82c", "filename": "gcc/testsuite/gcc.target/i386/recip-vec-sqrtf-avx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed93b23d7a09f4875e31a3472f8c900ddbad462/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-sqrtf-avx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed93b23d7a09f4875e31a3472f8c900ddbad462/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-sqrtf-avx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-sqrtf-avx.c?ref=aed93b23d7a09f4875e31a3472f8c900ddbad462", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx -mtune=generic -mfpmath=sse -mrecip\" } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx -mtune=generic -mfpmath=sse -mrecip --param max-completely-peel-times=1\" } */\n \n float a[32];\n float b[32];"}, {"sha": "36d9ff1eb04dcf178cdd8556bd0d297de6ee00ca", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed93b23d7a09f4875e31a3472f8c900ddbad462/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed93b23d7a09f4875e31a3472f8c900ddbad462/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=aed93b23d7a09f4875e31a3472f8c900ddbad462", "patch": "@@ -3956,13 +3956,13 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n     }\n \n   vect_ptr_type = build_pointer_type (STMT_VINFO_VECTYPE (stmt_info));\n-  addr_base = fold_convert (vect_ptr_type, addr_base);\n   dest = vect_get_new_vect_var (vect_ptr_type, vect_pointer_var, base_name);\n-  addr_base = force_gimple_operand (addr_base, &seq, false, dest);\n+  addr_base = force_gimple_operand (addr_base, &seq, true, dest);\n   gimple_seq_add_seq (new_stmt_list, seq);\n \n   if (DR_PTR_INFO (dr)\n-      && TREE_CODE (addr_base) == SSA_NAME)\n+      && TREE_CODE (addr_base) == SSA_NAME\n+      && !SSA_NAME_PTR_INFO (addr_base))\n     {\n       vect_duplicate_ssa_name_ptr_info (addr_base, dr, stmt_info);\n       if (offset || byte_offset)\n@@ -4048,7 +4048,6 @@ vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n   tree aggr_ptr_type;\n   tree aggr_ptr;\n   tree new_temp;\n-  gimple vec_stmt;\n   gimple_seq new_stmt_list = NULL;\n   edge pe = NULL;\n   basic_block new_bb;\n@@ -4196,28 +4195,7 @@ vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n     }\n \n   *initial_address = new_temp;\n-\n-  /* Create: p = (aggr_type *) initial_base  */\n-  if (TREE_CODE (new_temp) != SSA_NAME\n-      || !useless_type_conversion_p (aggr_ptr_type, TREE_TYPE (new_temp)))\n-    {\n-      vec_stmt = gimple_build_assign (aggr_ptr,\n-\t\t\t\t      fold_convert (aggr_ptr_type, new_temp));\n-      aggr_ptr_init = make_ssa_name (aggr_ptr, vec_stmt);\n-      /* Copy the points-to information if it exists. */\n-      if (DR_PTR_INFO (dr))\n-\tvect_duplicate_ssa_name_ptr_info (aggr_ptr_init, dr, stmt_info);\n-      gimple_assign_set_lhs (vec_stmt, aggr_ptr_init);\n-      if (pe)\n-\t{\n-\t  new_bb = gsi_insert_on_edge_immediate (pe, vec_stmt);\n-\t  gcc_assert (!new_bb);\n-\t}\n-      else\n-\tgsi_insert_before (gsi, vec_stmt, GSI_SAME_STMT);\n-    }\n-  else\n-    aggr_ptr_init = new_temp;\n+  aggr_ptr_init = new_temp;\n \n   /* (3) Handle the updating of the aggregate-pointer inside the loop.\n      This is needed when ONLY_INIT is false, and also when AT_LOOP is the\n@@ -4342,7 +4320,10 @@ bump_vector_ptr (tree dataref_ptr, gimple ptr_incr, gimple_stmt_iterator *gsi,\n   if (bump)\n     update = bump;\n \n-  new_dataref_ptr = copy_ssa_name (dataref_ptr);\n+  if (TREE_CODE (dataref_ptr) == SSA_NAME)\n+    new_dataref_ptr = copy_ssa_name (dataref_ptr);\n+  else\n+    new_dataref_ptr = make_ssa_name (TREE_TYPE (dataref_ptr));\n   incr_stmt = gimple_build_assign (new_dataref_ptr, POINTER_PLUS_EXPR,\n \t\t\t\t   dataref_ptr, update);\n   vect_finish_stmt_generation (stmt, incr_stmt, gsi);"}, {"sha": "12829de3d15683b6944b193b9124fef5040b09a0", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed93b23d7a09f4875e31a3472f8c900ddbad462/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed93b23d7a09f4875e31a3472f8c900ddbad462/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=aed93b23d7a09f4875e31a3472f8c900ddbad462", "patch": "@@ -5572,11 +5572,12 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t   vect_permute_store_chain().  */\n \t\tvec_oprnd = result_chain[i];\n \n-\t      data_ref = build2 (MEM_REF, TREE_TYPE (vec_oprnd), dataref_ptr,\n-\t\t\t\t dataref_offset\n-\t\t\t\t ? dataref_offset\n-\t\t\t\t : build_int_cst (reference_alias_ptr_type\n-\t\t\t\t\t\t  (DR_REF (first_dr)), 0));\n+\t      data_ref = fold_build2 (MEM_REF, TREE_TYPE (vec_oprnd),\n+\t\t\t\t      dataref_ptr,\n+\t\t\t\t      dataref_offset\n+\t\t\t\t      ? dataref_offset\n+\t\t\t\t      : build_int_cst (reference_alias_ptr_type\n+\t\t\t\t\t\t       (DR_REF (first_dr)), 0));\n \t      align = TYPE_ALIGN_UNIT (vectype);\n \t      if (aligned_access_p (first_dr))\n \t\tmisalign = 0;\n@@ -5595,7 +5596,8 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t\t\t\t  TYPE_ALIGN (elem_type));\n \t\t  misalign = DR_MISALIGNMENT (first_dr);\n \t\t}\n-\t      if (dataref_offset == NULL_TREE)\n+\t      if (dataref_offset == NULL_TREE\n+\t\t  && TREE_CODE (dataref_ptr) == SSA_NAME)\n \t\tset_ptr_info_alignment (get_ptr_info (dataref_ptr), align,\n \t\t\t\t\tmisalign);\n \n@@ -6643,11 +6645,11 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t    unsigned int align, misalign;\n \n \t\t    data_ref\n-\t\t      = build2 (MEM_REF, vectype, dataref_ptr,\n-\t\t\t\tdataref_offset\n-\t\t\t\t? dataref_offset\n-\t\t\t\t: build_int_cst (reference_alias_ptr_type\n-\t\t\t\t\t\t (DR_REF (first_dr)), 0));\n+\t\t      = fold_build2 (MEM_REF, vectype, dataref_ptr,\n+\t\t\t\t     dataref_offset\n+\t\t\t\t     ? dataref_offset\n+\t\t\t\t     : build_int_cst (reference_alias_ptr_type\n+\t\t\t\t\t\t      (DR_REF (first_dr)), 0));\n \t\t    align = TYPE_ALIGN_UNIT (vectype);\n \t\t    if (alignment_support_scheme == dr_aligned)\n \t\t      {\n@@ -6669,7 +6671,8 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t\t\t\t\tTYPE_ALIGN (elem_type));\n \t\t\tmisalign = DR_MISALIGNMENT (first_dr);\n \t\t      }\n-\t\t    if (dataref_offset == NULL_TREE)\n+\t\t    if (dataref_offset == NULL_TREE\n+\t\t\t&& TREE_CODE (dataref_ptr) == SSA_NAME)\n \t\t      set_ptr_info_alignment (get_ptr_info (dataref_ptr),\n \t\t\t\t\t      align, misalign);\n \t\t    break;\n@@ -6686,7 +6689,10 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t\t\t\t\t    dr_explicit_realign,\n \t\t\t\t\t\t    dataref_ptr, NULL);\n \n-\t\t    ptr = copy_ssa_name (dataref_ptr);\n+\t\t    if (TREE_CODE (dataref_ptr) == SSA_NAME)\n+\t\t      ptr = copy_ssa_name (dataref_ptr);\n+\t\t    else\n+\t\t      ptr = make_ssa_name (TREE_TYPE (dataref_ptr));\n \t\t    new_stmt = gimple_build_assign\n \t\t\t\t (ptr, BIT_AND_EXPR, dataref_ptr,\n \t\t\t\t  build_int_cst\n@@ -6716,7 +6722,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t\t\t  build_int_cst\n \t\t\t\t  (TREE_TYPE (ptr),\n \t\t\t\t   -(HOST_WIDE_INT)TYPE_ALIGN_UNIT (vectype)));\n-\t\t    ptr = copy_ssa_name (dataref_ptr, new_stmt);\n+\t\t    ptr = copy_ssa_name (ptr, new_stmt);\n \t\t    gimple_assign_set_lhs (new_stmt, ptr);\n \t\t    vect_finish_stmt_generation (stmt, new_stmt, gsi);\n \t\t    data_ref\n@@ -6726,7 +6732,10 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t    break;\n \t\t  }\n \t\tcase dr_explicit_realign_optimized:\n-\t\t  new_temp = copy_ssa_name (dataref_ptr);\n+\t\t  if (TREE_CODE (dataref_ptr) == SSA_NAME)\n+\t\t    new_temp = copy_ssa_name (dataref_ptr);\n+\t\t  else\n+\t\t    new_temp = make_ssa_name (TREE_TYPE (dataref_ptr));\n \t\t  new_stmt = gimple_build_assign\n \t\t\t       (new_temp, BIT_AND_EXPR, dataref_ptr,\n \t\t\t\tbuild_int_cst"}]}