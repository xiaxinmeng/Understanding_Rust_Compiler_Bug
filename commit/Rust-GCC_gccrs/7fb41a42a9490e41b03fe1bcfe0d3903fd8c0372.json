{"sha": "7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZiNDFhNDJhOTQ5MGU0MWIwM2ZlMWJjZmUwZDM5MDNmZDhjMDM3Mg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-01-08T18:29:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-01-08T18:29:18Z"}, "message": "tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Use type of offset to build the index.\n\n2007-01-08  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Use type\n\tof offset to build the index.\n\t* tree-pretty-print.c (dump_generic_node): Don't build negated\n\tconst just for printing.\n\t* c-pretty-print.c (pp_c_integer_constant): Likewise.\n\t* builtins.c (fold_builtin_int_roundingfn): Check if result\n\tfits the type by using force_fit_type and comparing the result.\n\t* predict.c (predict_loops): Use compare_tree_int for comparison.\n\t* tree.c (build_int_cst): Fall back to integer_type_node for\n\tNULL_TREE type.\n\t(build_int_cst_wide): Assert type is non-null.\n\n\tfortran/\n\t* trans-io.c (transfer_array_desc): Use build_int_cst instead\n\tof build_int_cstu.\n\nFrom-SVN: r120586", "tree": {"sha": "39d3113999a59bc49ff73a06408842ee861973fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39d3113999a59bc49ff73a06408842ee861973fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "738a52d3e27cc81e337c3f57e845adc0dd666eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/738a52d3e27cc81e337c3f57e845adc0dd666eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/738a52d3e27cc81e337c3f57e845adc0dd666eaa"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "c892de94bc78011ae7e38f1a35f44708f96749d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "patch": "@@ -1,3 +1,17 @@\n+2007-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Use type\n+\tof offset to build the index.\n+\t* tree-pretty-print.c (dump_generic_node): Don't build negated\n+\tconst just for printing.\n+\t* c-pretty-print.c (pp_c_integer_constant): Likewise.\n+\t* builtins.c (fold_builtin_int_roundingfn): Check if result\n+\tfits the type by using force_fit_type and comparing the result.\n+\t* predict.c (predict_loops): Use compare_tree_int for comparison.\n+\t* tree.c (build_int_cst): Fall back to integer_type_node for\n+\tNULL_TREE type.\n+\t(build_int_cst_wide): Assert type is non-null.\n+\n 2007-01-08  Roberto Costa  <roberto.costa@st.com>\n \n \t* tree-vrp.c (extract_range_from_cond_expr): New."}, {"sha": "e97e3bb57cb9c22eb8afc071da329ed34b07124d", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "patch": "@@ -7602,9 +7602,11 @@ fold_builtin_int_roundingfn (tree fndecl, tree arglist)\n \t    }\n \n \t  REAL_VALUE_TO_INT (&lo, &hi, r);\n-\t  result = build_int_cst_wide (NULL_TREE, lo, hi);\n-\t  if (int_fits_type_p (result, itype))\n-\t    return fold_convert (itype, result);\n+\t  result = build_int_cst_wide (itype, lo, hi);\n+\t  result = force_fit_type (result, 0, false, false);\n+\t  if (TREE_INT_CST_LOW (result) == lo\n+\t      && TREE_INT_CST_HIGH (result) == hi)\n+\t    return result;\n \t}\n     }\n "}, {"sha": "e7ca1246b35467c0dc65a4fea4d0d9bb7d43bf9e", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "patch": "@@ -810,17 +810,16 @@ pp_c_integer_constant (c_pretty_printer *pp, tree i)\n     pp_wide_integer (pp, TREE_INT_CST_LOW (i));\n   else\n     {\n+      unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (i);\n+      HOST_WIDE_INT high = TREE_INT_CST_HIGH (i);\n       if (tree_int_cst_sgn (i) < 0)\n \t{\n \t  pp_character (pp, '-');\n-\t  i = build_int_cst_wide (NULL_TREE,\n-\t\t\t\t  -TREE_INT_CST_LOW (i),\n-\t\t\t\t  ~TREE_INT_CST_HIGH (i)\n-\t\t\t\t  + !TREE_INT_CST_LOW (i));\n+\t  high = ~high + !low;\n+\t  low = -low;\n \t}\n       sprintf (pp_buffer (pp)->digit_buffer,\n-\t       HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n-\t       TREE_INT_CST_HIGH (i), TREE_INT_CST_LOW (i));\n+\t       HOST_WIDE_INT_PRINT_DOUBLE_HEX, high, low);\n       pp_string (pp, pp_buffer (pp)->digit_buffer);\n     }\n   if (TYPE_UNSIGNED (type))"}, {"sha": "a31c8ace3df4d0b01f39383ac77bc78a5c340d20", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "patch": "@@ -1,3 +1,8 @@\n+2007-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* trans-io.c (transfer_array_desc): Use build_int_cst instead\n+\tof build_int_cstu.\n+\n 2007-01-08  Roger Sayle  <roger@eyesopen.com>\n \n \t* trans-array.c (constant_array_constructor_p): New function to"}, {"sha": "654c0fad8079d925ce7653e80b9de1a383eeb592", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "patch": "@@ -1779,7 +1779,7 @@ transfer_array_desc (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n   if (ts->type == BT_CHARACTER)\n     charlen_arg = se->string_length;\n   else\n-    charlen_arg = build_int_cstu (NULL_TREE, 0);\n+    charlen_arg = build_int_cst (NULL_TREE, 0);\n \n   kind_arg = build_int_cst (NULL_TREE, ts->kind);\n "}, {"sha": "61d8547def0c3767cb8c54e562d005e656d00a36", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "patch": "@@ -662,8 +662,7 @@ predict_loops (void)\n \t      int probability;\n \t      int max = PARAM_VALUE (PARAM_MAX_PREDICTED_ITERATIONS);\n \t      if (host_integerp (niter, 1)\n-\t\t  && tree_int_cst_lt (niter,\n-\t\t\t\t      build_int_cstu (NULL_TREE, max - 1)))\n+\t\t  && compare_tree_int (niter, max-1) == -1)\n \t\t{\n \t\t  HOST_WIDE_INT nitercst = tree_low_cst (niter, 1) + 1;\n \t\t  probability = ((REG_BR_PROB_BASE + nitercst / 2)"}, {"sha": "d9d4b968a3249c06ca343a90ca09ccd6bf52fd6f", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "patch": "@@ -748,23 +748,20 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       else if (! host_integerp (node, 0))\n \t{\n \t  tree val = node;\n+\t  unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (val);\n+\t  HOST_WIDE_INT high = TREE_INT_CST_HIGH (val);\n \n \t  if (tree_int_cst_sgn (val) < 0)\n \t    {\n \t      pp_character (buffer, '-');\n-\t      val = build_int_cst_wide (NULL_TREE,\n-\t\t\t\t\t-TREE_INT_CST_LOW (val),\n-\t\t\t\t\t~TREE_INT_CST_HIGH (val)\n-\t\t\t\t\t+ !TREE_INT_CST_LOW (val));\n+\t      high = ~high + !low;\n+\t      low = -low;\n \t    }\n \t  /* Would \"%x%0*x\" or \"%x%*0x\" get zero-padding on all\n \t     systems?  */\n-\t  {\n-\t    sprintf (pp_buffer (buffer)->digit_buffer, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n-\t\t     TREE_INT_CST_HIGH (val),\n-\t\t     TREE_INT_CST_LOW (val));\n-\t    pp_string (buffer, pp_buffer (buffer)->digit_buffer);\n-\t  }\n+\t  sprintf (pp_buffer (buffer)->digit_buffer,\n+\t\t   HOST_WIDE_INT_PRINT_DOUBLE_HEX, high, low);\n+\t  pp_string (buffer, pp_buffer (buffer)->digit_buffer);\n \t}\n       else\n \tpp_wide_integer (buffer, TREE_INT_CST_LOW (node));"}, {"sha": "617a2cf6643aeba4576ff7e9c6eb10491088fe74", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "patch": "@@ -1608,7 +1608,7 @@ maybe_fold_offset_to_array_ref (tree base, tree offset, tree orig_type)\n \t  || lrem || hrem)\n \treturn NULL_TREE;\n \n-      idx = build_int_cst_wide (NULL_TREE, lquo, hquo);\n+      idx = build_int_cst_wide (TREE_TYPE (offset), lquo, hquo);\n     }\n \n   /* Assume the low bound is zero.  If there is a domain type, get the"}, {"sha": "e3eb4be8b0588c1d4e3f80e6a3162b925e3e4934", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7fb41a42a9490e41b03fe1bcfe0d3903fd8c0372", "patch": "@@ -752,6 +752,10 @@ copy_list (tree list)\n tree\n build_int_cst (tree type, HOST_WIDE_INT low)\n {\n+  /* Support legacy code.  */\n+  if (!type)\n+    type = integer_type_node;\n+\n   return build_int_cst_wide (type, low, low < 0 ? -1 : 0);\n }\n \n@@ -864,8 +868,7 @@ build_int_cst_wide (tree type, unsigned HOST_WIDE_INT low, HOST_WIDE_INT hi)\n   int ix = -1;\n   int limit = 0;\n \n-  if (!type)\n-    type = integer_type_node;\n+  gcc_assert (type);\n \n   switch (TREE_CODE (type))\n     {"}]}