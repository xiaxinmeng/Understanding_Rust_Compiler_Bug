{"sha": "86e6f22fcc0ba44042c9546b875eafb9f9649125", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZlNmYyMmZjYzBiYTQ0MDQyYzk1NDZiODc1ZWFmYjlmOTY0OTEyNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-07-30T23:01:56Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-07-30T23:01:56Z"}, "message": "92th Cygnus<->FSF quick merge\n\nFrom-SVN: r14566", "tree": {"sha": "ffc169e8d421fe807067aaa486d1d80398535c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffc169e8d421fe807067aaa486d1d80398535c1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86e6f22fcc0ba44042c9546b875eafb9f9649125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e6f22fcc0ba44042c9546b875eafb9f9649125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86e6f22fcc0ba44042c9546b875eafb9f9649125", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e6f22fcc0ba44042c9546b875eafb9f9649125/comments", "author": null, "committer": null, "parents": [{"sha": "a29f4129cc1ee65f68dcaeb8dc1438f77bee2f2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29f4129cc1ee65f68dcaeb8dc1438f77bee2f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a29f4129cc1ee65f68dcaeb8dc1438f77bee2f2c"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "303c72a1c691fd7e899354eb92c66c0ce29848e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e6f22fcc0ba44042c9546b875eafb9f9649125/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e6f22fcc0ba44042c9546b875eafb9f9649125/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=86e6f22fcc0ba44042c9546b875eafb9f9649125", "patch": "@@ -1,3 +1,14 @@\n+Tue Jul 29 21:17:29 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (resolve_args): New fn.\n+\t(build_new_function_call): Use it.\n+\t(build_object_call): Likewise.\n+\t(build_new_method_call): Likewise.\n+\n+Mon Jul 28 16:02:36 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_over_call): tsubst all default parms from templates.\n+\n Wed Jul 23 13:36:25 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (struct cp_function): Add static_labelno."}, {"sha": "48c7bb96339ccfa30887aeb4b707868fbbd15229", "filename": "gcc/cp/call.c", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e6f22fcc0ba44042c9546b875eafb9f9649125/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e6f22fcc0ba44042c9546b875eafb9f9649125/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=86e6f22fcc0ba44042c9546b875eafb9f9649125", "patch": "@@ -4338,6 +4338,28 @@ build_user_type_conversion (totype, expr, flags)\n   return NULL_TREE;\n }\n \n+/* Do any initial processing on the arguments to a function call.  */\n+\n+static tree\n+resolve_args (args)\n+     tree args;\n+{\n+  tree t;\n+  for (t = args; t; t = TREE_CHAIN (t))\n+    {\n+      if (TREE_VALUE (t) == error_mark_node)\n+\treturn error_mark_node;\n+      else if (TREE_CODE (TREE_TYPE (TREE_VALUE (t))) == VOID_TYPE)\n+\t{\n+\t  error (\"invalid use of void expression\");\n+\t  return error_mark_node;\n+\t}\n+      else if (TREE_CODE (TREE_VALUE (t)) == OFFSET_REF)\n+\tTREE_VALUE (t) = resolve_offset_ref (TREE_VALUE (t));\n+    }\n+  return args;\n+}\n+      \n tree\n build_new_function_call (fn, args, obj)\n      tree fn, args, obj;\n@@ -4349,17 +4371,11 @@ build_new_function_call (fn, args, obj)\n       tree t;\n       tree templates = NULL_TREE;\n \n-      for (t = args; t; t = TREE_CHAIN (t))\n-\t{\n-\t  if (TREE_VALUE (t) == error_mark_node)\n-\t    return error_mark_node;\n-\t  else if (TREE_CODE (TREE_TYPE (TREE_VALUE (t))) == VOID_TYPE)\n-\t    {\n-\t      error (\"invalid use of void expression\");\n-\t      return error_mark_node;\n-\t    }\n-\t}\n-\t\n+      args = resolve_args (args);\n+\n+      if (args == error_mark_node)\n+\treturn error_mark_node;\n+\n       for (t = TREE_VALUE (fn); t; t = DECL_CHAIN (t))\n \t{\n \t  if (TREE_CODE (t) == TEMPLATE_DECL)\n@@ -4416,6 +4432,11 @@ build_object_call (obj, args)\n \n   fns = lookup_fnfields (TYPE_BINFO (type), ansi_opname [CALL_EXPR], 0);\n \n+  args = resolve_args (args);\n+\n+  if (args == error_mark_node)\n+    return error_mark_node;\n+\n   if (fns)\n     {\n       tree fn = TREE_VALUE (fns);\n@@ -5113,7 +5134,7 @@ build_over_call (fn, convs, args, flags)\n     {\n       tree arg = TREE_PURPOSE (parm);\n \n-      if (DECL_TEMPLATE_INFO (fn) && uses_template_parms (arg))\n+      if (DECL_TEMPLATE_INFO (fn))\n \t/* This came from a template.  Instantiate the default arg here,\n \t   not in tsubst.  */\n \targ = tsubst_expr (arg,\n@@ -5266,9 +5287,10 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n   if (flags & LOOKUP_HAS_IN_CHARGE)\n     user_args = TREE_CHAIN (args);\n \n-  for (fns = args; fns; fns = TREE_CHAIN (fns))\n-    if (TREE_VALUE (fns) == error_mark_node)\n-      return error_mark_node;\n+  args = resolve_args (args);\n+\n+  if (args == error_mark_node)\n+    return error_mark_node;\n \n   if (instance == NULL_TREE)\n     basetype = BINFO_TYPE (basetype_path);"}]}