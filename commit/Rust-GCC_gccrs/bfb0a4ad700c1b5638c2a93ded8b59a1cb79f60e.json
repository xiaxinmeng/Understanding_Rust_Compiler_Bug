{"sha": "bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZiMGE0YWQ3MDBjMWI1NjM4YzJhOTNkZWQ4YjU5YTFjYjc5ZjYwZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-03-09T21:02:52Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-03-09T21:02:52Z"}, "message": "2004-03-09  Michael Koch  <konqueror@gmx.de>\n\n\t* java/lang/Thread.java\n\t(runnable): Moved around.\n\t(daemon): Renamed from daemon_flag.\n\t(contextClassLoader): Renamed from context_class_loader.\n\t(Thread): Reordered constructors.\n\t(activeCount): Use group directly.\n\t(destroy): Make it a java method. Throw NoSuchMethodError like Sun does.\n\t(holdsLock): Reworked javadoc.\n\t(setDaemon): Reworked.\n\t* java/lang/natThread.cc\n\t(destroy): Removed.\n\nFrom-SVN: r79200", "tree": {"sha": "f12b8c8e41d8b31e0eedd4952c590a8d6778df2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f12b8c8e41d8b31e0eedd4952c590a8d6778df2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e/comments", "author": null, "committer": null, "parents": [{"sha": "ec730df5fc5d0e879363556e6d9032f3104d0f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec730df5fc5d0e879363556e6d9032f3104d0f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec730df5fc5d0e879363556e6d9032f3104d0f49"}], "stats": {"total": 169, "additions": 90, "deletions": 79}, "files": [{"sha": "d3669d084bef72b787b91d83823d6e0b2cb5d1b2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e", "patch": "@@ -1,3 +1,16 @@\n+2004-03-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/lang/Thread.java\n+\t(runnable): Moved around.\n+\t(daemon): Renamed from daemon_flag.\n+\t(contextClassLoader): Renamed from context_class_loader.\n+\t(Thread): Reordered constructors.\n+\t(activeCount): Use group directly.\n+\t(destroy): Make it a java method. Throw NoSuchMethodError like Sun does.\n+\t(holdsLock): Reworked javadoc.\n+\t(setDaemon): Reworked.\n+\t* java/lang/natThread.cc\n+\t(destroy): Removed.\n 2004-03-08  Anthony Green  <green@redhat.com>\n \n \t* Makefile.am: Build property resource files into libgcj."}, {"sha": "0232a1d6afd111cd1f5071bb12f08117bf835d50", "filename": "libjava/java/lang/Thread.java", "status": "modified", "additions": 77, "deletions": 70, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e/libjava%2Fjava%2Flang%2FThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e/libjava%2Fjava%2Flang%2FThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.java?ref=bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e", "patch": "@@ -104,20 +104,24 @@ public class Thread implements Runnable\n    */\n   ThreadGroup group;\n \n+  /** The object to run(), null if this is the target. */\n+  private Runnable runnable;\n+\n   /** The thread name, non-null. */\n   String name;\n \n-  /** The object to run(), null if this is the target. */\n-  private Runnable runnable;\n+  /** Whether the thread is a daemon. */\n+  private boolean daemon;\n \n   /** The thread priority, 1 to 10. */\n   private int priority;\n \n-  private boolean daemon_flag;\n   boolean interrupt_flag;\n   private boolean alive_flag;\n   private boolean startable_flag;\n-  private ClassLoader context_class_loader;\n+\n+  /** The context classloader for this Thread. */\n+  private ClassLoader contextClassLoader;\n \n   // This describes the top-most interpreter frame for this thread.\n   RawData interp_frame;\n@@ -206,6 +210,54 @@ public Thread(String name)\n     this(null, null, name);\n   }\n \n+  /**\n+   * Allocates a new <code>Thread</code> object. This constructor has\n+   * the same effect as <code>Thread(group, target,</code>\n+   * <i>gname</i><code>)</code>, where <i>gname</i> is\n+   * a newly generated name. Automatically generated names are of the\n+   * form <code>\"Thread-\"+</code><i>n</i>, where <i>n</i> is an integer.\n+   *\n+   * @param group the group to put the Thread into\n+   * @param target the Runnable object to execute\n+   * @throws SecurityException if this thread cannot access <code>group</code>\n+   * @throws IllegalThreadStateException if group is destroyed\n+   * @see #Thread(ThreadGroup, Runnable, String)\n+   */\n+  public Thread(ThreadGroup group, Runnable target)\n+  {\n+    this(group, target, gen_name());\n+  }\n+\n+  /**\n+   * Allocates a new <code>Thread</code> object. This constructor has\n+   * the same effect as <code>Thread(group, null, name)</code>\n+   *\n+   * @param group the group to put the Thread into\n+   * @param name the name for the Thread\n+   * @throws NullPointerException if name is null\n+   * @throws SecurityException if this thread cannot access <code>group</code>\n+   * @throws IllegalThreadStateException if group is destroyed\n+   * @see #Thread(ThreadGroup, Runnable, String)\n+   */\n+  public Thread(ThreadGroup group, String name)\n+  {\n+    this(group, null, name);\n+  }\n+\n+  /**\n+   * Allocates a new <code>Thread</code> object. This constructor has\n+   * the same effect as <code>Thread(null, target, name)</code>.\n+   *\n+   * @param target the Runnable object to execute\n+   * @param name the name for the Thread\n+   * @throws NullPointerException if name is null\n+   * @see #Thread(ThreadGroup, Runnable, String)\n+   */\n+  public Thread(Runnable target, String name)\n+  {\n+    this(null, target, name);\n+  }\n+\n   /**\n    * Allocate a new Thread object, with the specified ThreadGroup and name, and\n    * using the specified Runnable object's <code>run()</code> method to\n@@ -266,55 +318,6 @@ public Thread(ThreadGroup group, Runnable target, String name, long size)\n     this(currentThread(), group, target, name);\n   }\n \n-  /**\n-   * Allocates a new <code>Thread</code> object. This constructor has\n-   * the same effect as <code>Thread(group, target,</code>\n-   * <i>gname</i><code>)</code>, where <i>gname</i> is\n-   * a newly generated name. Automatically generated names are of the\n-   * form <code>\"Thread-\"+</code><i>n</i>, where <i>n</i> is an integer.\n-   *\n-   * @param      group    the thread group.\n-   * @param      target   the object whose <code>run</code> method is called.\n-   * @exception  SecurityException  if the current thread cannot create a\n-   *             thread in the specified thread group.\n-   * @see        java.lang.Thread#Thread(java.lang.ThreadGroup,\n-   *             java.lang.Runnable, java.lang.String)\n-   */\n-  public Thread(ThreadGroup group, Runnable target)\n-  {\n-    this(group, target, gen_name());\n-  }\n-\n-  /**\n-   * Allocates a new <code>Thread</code> object. This constructor has\n-   * the same effect as <code>Thread(group, null, name)</code>\n-   *\n-   * @param      group   the thread group.\n-   * @param      name    the name of the new thread.\n-   * @exception  SecurityException  if the current thread cannot create a\n-   *               thread in the specified thread group.\n-   * @see        java.lang.Thread#Thread(java.lang.ThreadGroup,\n-   *          java.lang.Runnable, java.lang.String)\n-   */\n-  public Thread(ThreadGroup group, String name)\n-  {\n-    this(group, null, name);\n-  }\n-\n-  /**\n-   * Allocates a new <code>Thread</code> object. This constructor has\n-   * the same effect as <code>Thread(null, target, name)</code>.\n-   *\n-   * @param   target   the object whose <code>run</code> method is called.\n-   * @param   name     the name of the new thread.\n-   * @see     java.lang.Thread#Thread(java.lang.ThreadGroup,\n-   *          java.lang.Runnable, java.lang.String)\n-   */\n-  public Thread(Runnable target, String name)\n-  {\n-    this(null, target, name);\n-  }\n-\n   private Thread (Thread current, ThreadGroup g, Runnable r, String n)\n   {\n     // The Class Libraries book says ``threadName cannot be null''.  I\n@@ -343,16 +346,16 @@ private Thread (Thread current, ThreadGroup g, Runnable r, String n)\n       {\n \tgroup.checkAccess();\n \n-\tdaemon_flag = current.isDaemon();\n+\tdaemon = current.isDaemon();\n         int gmax = group.getMaxPriority();\n \tint pri = current.getPriority();\n \tpriority = (gmax < pri ? gmax : pri);\n-\tcontext_class_loader = current.context_class_loader;\n+\tcontextClassLoader = current.contextClassLoader;\n \tInheritableThreadLocal.newChildThread(this);\n       }\n     else\n       {\n-\tdaemon_flag = false;\n+\tdaemon = false;\n \tpriority = NORM_PRIORITY;\n       }\n \n@@ -373,7 +376,7 @@ private Thread (Thread current, ThreadGroup g, Runnable r, String n)\n    */\n   public static int activeCount()\n   {\n-    return currentThread().getThreadGroup().activeCount();\n+    return currentThread().group.activeCount();\n   }\n \n   /**\n@@ -411,7 +414,10 @@ public final void checkAccess()\n    * Originally intended to destroy this thread, this method was never\n    * implemented by Sun, and is hence a no-op.\n    */\n-  public native void destroy();\n+  public void destroy()\n+  {\n+    throw new NoSuchMethodError();\n+  }\n   \n   /**\n    * Print a stack trace of the current thread to stderr using the same\n@@ -475,11 +481,12 @@ public final ThreadGroup getThreadGroup()\n   }\n \n   /**\n-   * Return true if this Thread holds the object's lock, false otherwise.\n+   * Checks whether the current thread holds the monitor on a given object.\n+   * This allows you to do <code>assert Thread.holdsLock(obj)</code>.\n    *\n    * @param obj the object to test lock ownership on.\n    * @return true if the current thread is currently synchronized on obj\n-   * @throws NullPointerException if obj is null.\n+   * @throws NullPointerException if obj is null\n    * @since 1.4\n    */\n   public static native boolean holdsLock(Object obj);\n@@ -551,7 +558,7 @@ public final boolean isAlive()\n    */\n   public final boolean isDaemon()\n   {\n-    return daemon_flag;\n+    return daemon;\n   }\n \n   /**\n@@ -653,12 +660,12 @@ public void run()\n    * @see #isDaemon()\n    * @see #checkAccess()\n    */\n-  public final void setDaemon(boolean status)\n+  public final void setDaemon(boolean daemon)\n   {\n-    checkAccess();\n     if (!startable_flag)\n       throw new IllegalThreadStateException();\n-    daemon_flag = status;\n+    checkAccess();\n+    this.daemon = daemon;\n   }\n \n   /**\n@@ -677,8 +684,8 @@ public final void setDaemon(boolean status)\n    */\n   public synchronized ClassLoader getContextClassLoader()\n   {\n-    if (context_class_loader == null)\n-      context_class_loader = ClassLoader.getSystemClassLoader();\n+    if (contextClassLoader == null)\n+      contextClassLoader = ClassLoader.getSystemClassLoader();\n \n     SecurityManager sm = System.getSecurityManager();\n     // FIXME: we can't currently find the caller's class loader.\n@@ -687,18 +694,18 @@ public synchronized ClassLoader getContextClassLoader()\n       {\n \t// See if the caller's class loader is the same as or an\n \t// ancestor of this thread's class loader.\n-\twhile (callers != null && callers != context_class_loader)\n+\twhile (callers != null && callers != contextClassLoader)\n \t  {\n \t    // FIXME: should use some internal version of getParent\n \t    // that avoids security checks.\n \t    callers = callers.getParent();\n \t  }\n \n-\tif (callers != context_class_loader)\n+\tif (callers != contextClassLoader)\n \t  sm.checkPermission(new RuntimePermission(\"getClassLoader\"));\n       }\n \n-    return context_class_loader;\n+    return contextClassLoader;\n   }\n \n   /**\n@@ -718,7 +725,7 @@ public synchronized void setContextClassLoader(ClassLoader classloader)\n     SecurityManager sm = System.getSecurityManager();\n     if (sm != null)\n       sm.checkPermission(new RuntimePermission(\"setContextClassLoader\"));\n-    context_class_loader = classloader;\n+    this.contextClassLoader = classloader;\n   }\n \n   /**"}, {"sha": "a131f058be75ae73664f59ed421d461756d17371", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=bfb0a4ad700c1b5638c2a93ded8b59a1cb79f60e", "patch": "@@ -98,15 +98,6 @@ java::lang::Thread::currentThread (void)\n   return _Jv_ThreadCurrent ();\n }\n \n-void\n-java::lang::Thread::destroy (void)\n-{\n-  // NOTE: This is marked as unimplemented in the JDK 1.2\n-  // documentation.\n-  throw new UnsupportedOperationException\n-    (JvNewStringLatin1 (\"Thread.destroy unimplemented\"));\n-}\n-\n jboolean\n java::lang::Thread::holdsLock (jobject obj)\n {"}]}