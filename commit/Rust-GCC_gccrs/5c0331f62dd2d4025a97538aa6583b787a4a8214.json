{"sha": "5c0331f62dd2d4025a97538aa6583b787a4a8214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMwMzMxZjYyZGQyZDQwMjVhOTc1MzhhYTY1ODNiNzg3YTRhODIxNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-24T19:34:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-24T19:34:06Z"}, "message": "re PR target/82370 (AVX512 can use a memory operand for immediate-count vpsrlw, but gcc doesn't.)\n\n\tPR target/82370\n\t* config/i386/sse.md (VIMAX_AVX2): Remove V4TImode.\n\t(VIMAX_AVX2_AVX512BW, VIMAX_AVX512VL): New mode iterators.\n\t(vec_shl_<mode>): Remove unused expander.\n\t(avx512bw_<shift_insn><mode>3): New define_insn.\n\t(<sse2_avx2>_ashl<mode>3, <sse2_avx2>_lshr<mode>3): Replaced by ...\n\t(<sse2_avx2>_<shift_insn><mode>3): ... this.  New define_insn.\n\n\t* gcc.target/i386/pr82370.c: New test.\n\nFrom-SVN: r254058", "tree": {"sha": "4320571507b8f8dba245b2e58c75344695c1fab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4320571507b8f8dba245b2e58c75344695c1fab2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c0331f62dd2d4025a97538aa6583b787a4a8214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0331f62dd2d4025a97538aa6583b787a4a8214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c0331f62dd2d4025a97538aa6583b787a4a8214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0331f62dd2d4025a97538aa6583b787a4a8214/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff1ff960f5039cf1d2970bfe2ba965d1b994caf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1ff960f5039cf1d2970bfe2ba965d1b994caf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff1ff960f5039cf1d2970bfe2ba965d1b994caf1"}], "stats": {"total": 98, "additions": 57, "deletions": 41}, "files": [{"sha": "b2864cf177bbc3f6bc83764c5d6f820ce4a0e490", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0331f62dd2d4025a97538aa6583b787a4a8214/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0331f62dd2d4025a97538aa6583b787a4a8214/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c0331f62dd2d4025a97538aa6583b787a4a8214", "patch": "@@ -1,3 +1,13 @@\n+2017-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82370\n+\t* config/i386/sse.md (VIMAX_AVX2): Remove V4TImode.\n+\t(VIMAX_AVX2_AVX512BW, VIMAX_AVX512VL): New mode iterators.\n+\t(vec_shl_<mode>): Remove unused expander.\n+\t(avx512bw_<shift_insn><mode>3): New define_insn.\n+\t(<sse2_avx2>_ashl<mode>3, <sse2_avx2>_lshr<mode>3): Replaced by ...\n+\t(<sse2_avx2>_<shift_insn><mode>3): ... this.  New define_insn.\n+\n 2017-10-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/82466"}, {"sha": "4f9f2bd0a1cb1a8ec1343b398b30cc7d55805d16", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 24, "deletions": 41, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0331f62dd2d4025a97538aa6583b787a4a8214/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0331f62dd2d4025a97538aa6583b787a4a8214/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5c0331f62dd2d4025a97538aa6583b787a4a8214", "patch": "@@ -371,10 +371,17 @@\n   [V16SF V16SI])\n \n ;; ??? We should probably use TImode instead.\n-(define_mode_iterator VIMAX_AVX2\n+(define_mode_iterator VIMAX_AVX2_AVX512BW\n   [(V4TI \"TARGET_AVX512BW\") (V2TI \"TARGET_AVX2\") V1TI])\n \n-;; ??? This should probably be dropped in favor of VIMAX_AVX2.\n+;; Suppose TARGET_AVX512BW as baseline\n+(define_mode_iterator VIMAX_AVX512VL\n+  [V4TI (V2TI \"TARGET_AVX512VL\") (V1TI \"TARGET_AVX512VL\")])\n+\n+(define_mode_iterator VIMAX_AVX2\n+  [(V2TI \"TARGET_AVX2\") V1TI])\n+\n+;; ??? This should probably be dropped in favor of VIMAX_AVX2_AVX512BW.\n (define_mode_iterator SSESCALARMODE\n   [(V4TI \"TARGET_AVX512BW\") (V2TI \"TARGET_AVX2\") TI])\n \n@@ -10778,9 +10785,9 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n \n-(define_expand \"vec_shl_<mode>\"\n+(define_expand \"vec_shr_<mode>\"\n   [(set (match_dup 3)\n-\t(ashift:V1TI\n+\t(lshiftrt:V1TI\n \t (match_operand:VI_128 1 \"register_operand\")\n \t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\")))\n    (set (match_operand:VI_128 0 \"register_operand\") (match_dup 4))]\n@@ -10791,48 +10798,24 @@\n   operands[4] = gen_lowpart (<MODE>mode, operands[3]);\n })\n \n-(define_insn \"<sse2_avx2>_ashl<mode>3\"\n-  [(set (match_operand:VIMAX_AVX2 0 \"register_operand\" \"=x,v\")\n-\t(ashift:VIMAX_AVX2\n-\t (match_operand:VIMAX_AVX2 1 \"register_operand\" \"0,v\")\n-\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n,n\")))]\n-  \"TARGET_SSE2\"\n+(define_insn \"avx512bw_<shift_insn><mode>3\"\n+  [(set (match_operand:VIMAX_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(any_lshift:VIMAX_AVX512VL\n+\t (match_operand:VIMAX_AVX512VL 1 \"nonimmediate_operand\" \"vm\")\n+\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n+  \"TARGET_AVX512BW\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \"pslldq\\t{%2, %0|%0, %2}\";\n-    case 1:\n-      return \"vpslldq\\t{%2, %1, %0|%0, %1, %2}\";\n-    default:\n-      gcc_unreachable ();\n-    }\n+  return \"vp<vshift>dq\\t{%2, %1, %0|%0, %1, %2}\";\n }\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sseishft\")\n+  [(set_attr \"type\" \"sseishft\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"vec_shr_<mode>\"\n-  [(set (match_dup 3)\n-\t(lshiftrt:V1TI\n-\t (match_operand:VI_128 1 \"register_operand\")\n-\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\")))\n-   (set (match_operand:VI_128 0 \"register_operand\") (match_dup 4))]\n-  \"TARGET_SSE2\"\n-{\n-  operands[1] = gen_lowpart (V1TImode, operands[1]);\n-  operands[3] = gen_reg_rtx (V1TImode);\n-  operands[4] = gen_lowpart (<MODE>mode, operands[3]);\n-})\n-\n-(define_insn \"<sse2_avx2>_lshr<mode>3\"\n+(define_insn \"<sse2_avx2>_<shift_insn><mode>3\"\n   [(set (match_operand:VIMAX_AVX2 0 \"register_operand\" \"=x,v\")\n-\t(lshiftrt:VIMAX_AVX2\n+\t(any_lshift:VIMAX_AVX2\n \t (match_operand:VIMAX_AVX2 1 \"register_operand\" \"0,v\")\n \t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n,n\")))]\n   \"TARGET_SSE2\"\n@@ -10842,9 +10825,9 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \"psrldq\\t{%2, %0|%0, %2}\";\n+      return \"p<vshift>dq\\t{%2, %0|%0, %2}\";\n     case 1:\n-      return \"vpsrldq\\t{%2, %1, %0|%0, %1, %2}\";\n+      return \"vp<vshift>dq\\t{%2, %1, %0|%0, %1, %2}\";\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "a33711847637ca7cf8fe9df8ac421dc204ef2fdb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0331f62dd2d4025a97538aa6583b787a4a8214/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0331f62dd2d4025a97538aa6583b787a4a8214/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c0331f62dd2d4025a97538aa6583b787a4a8214", "patch": "@@ -1,3 +1,8 @@\n+2017-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82370\n+\t* gcc.target/i386/pr82370.c: New test.\n+\n 2017-10-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/82466"}, {"sha": "cc4d9b6f255d849b8d92465a03a1e7475761f93f", "filename": "gcc/testsuite/gcc.target/i386/pr82370.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0331f62dd2d4025a97538aa6583b787a4a8214/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0331f62dd2d4025a97538aa6583b787a4a8214/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82370.c?ref=5c0331f62dd2d4025a97538aa6583b787a4a8214", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/82370 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"vpslldq\\[ \\t]\\+\\\\\\$5, \\\\(%\\[a-z0-9,]*\\\\), %xmm\\[0-9]\\+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[ \\t]\\+\\\\\\$5, \\\\(%\\[a-z0-9,]*\\\\), %xmm\\[0-9]\\+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpslldq\\[ \\t]\\+\\\\\\$5, \\\\(%\\[a-z0-9,]*\\\\), %ymm\\[0-9]\\+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[ \\t]\\+\\\\\\$5, \\\\(%\\[a-z0-9,]*\\\\), %ymm\\[0-9]\\+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpslldq\\[ \\t]\\+\\\\\\$5, \\\\(%\\[a-z0-9,]*\\\\), %zmm\\[0-9]\\+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[ \\t]\\+\\\\\\$5, \\\\(%\\[a-z0-9,]*\\\\), %zmm\\[0-9]\\+\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+__m512i f1 (__m512i *x) { return _mm512_bslli_epi128 (*x, 5); }\n+__m512i f2 (__m512i *x) { return _mm512_bsrli_epi128 (*x, 5); }\n+__m256i f3 (__m256i *x) { return _mm256_bslli_epi128 (*x, 5); }\n+__m256i f4 (__m256i *x) { return _mm256_bsrli_epi128 (*x, 5); }\n+__m128i f5 (__m128i *x) { return _mm_bslli_si128 (*x, 5); }\n+__m128i f6 (__m128i *x) { return _mm_bsrli_si128 (*x, 5); }"}]}