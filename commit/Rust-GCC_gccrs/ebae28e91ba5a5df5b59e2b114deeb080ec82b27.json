{"sha": "ebae28e91ba5a5df5b59e2b114deeb080ec82b27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJhZTI4ZTkxYmE1YTVkZjViNTllMmIxMTRkZWViMDgwZWM4MmIyNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-05-02T09:49:39Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-02T09:49:39Z"}, "message": "predicates.md (nonimm_ssenomem_operand): New predicate.\n\n\t* config/i386/predicates.md (nonimm_ssenomem_operand): New predicate.\n\t(register_mixssei387nonimm_operand): Remove predicate.\n\t* config/i386/i386.md (*fop_<mode>_comm): Merge from\n\t*fop_<mode>_comm_mixed and *fop_<mode>_comm_i387.  Disable unsupported\n\talternatives using \"enabled\" attribute.  Also check X87_ENABLE_ARITH\n\tfor TARGET_MIX_SSE_I387 alternatives.\n\t(*fop_<mode>_1): Merge from *fop_<mode>_1_mixed and *fop_<mode>_1_i387.\n\tDisable unsupported alternatives using \"enabled\" attribute.  Use\n\tnonimm_ssenomem_operand as operand 1 predicate.  Also check\n\tX87_ENABLE_ARITH for TARGET_MIX_SSE_I387 alternatives.\n\t* config/i386/predicates.md (nonimm_ssenomem_operand): New predicate.\n\t(register_mixssei387nonimm_operand): Remove predicate.\n\nFrom-SVN: r235727", "tree": {"sha": "a15ebd7e29e7fd3474467a62879e9bdcdb4addab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a15ebd7e29e7fd3474467a62879e9bdcdb4addab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebae28e91ba5a5df5b59e2b114deeb080ec82b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebae28e91ba5a5df5b59e2b114deeb080ec82b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebae28e91ba5a5df5b59e2b114deeb080ec82b27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebae28e91ba5a5df5b59e2b114deeb080ec82b27/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eff69022b3937d69e567c2ce397af7a601d3c64b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff69022b3937d69e567c2ce397af7a601d3c64b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff69022b3937d69e567c2ce397af7a601d3c64b"}], "stats": {"total": 111, "additions": 56, "deletions": 55}, "files": [{"sha": "3982115c31caa763a0aa8c9ed21ec5399e61309a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebae28e91ba5a5df5b59e2b114deeb080ec82b27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebae28e91ba5a5df5b59e2b114deeb080ec82b27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebae28e91ba5a5df5b59e2b114deeb080ec82b27", "patch": "@@ -1,3 +1,18 @@\n+2016-05-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (nonimm_ssenomem_operand): New predicate.\n+\t(register_mixssei387nonimm_operand): Remove predicate.\n+\t* config/i386/i386.md (*fop_<mode>_comm): Merge from\n+\t*fop_<mode>_comm_mixed and *fop_<mode>_comm_i387.  Disable unsupported\n+\talternatives using \"enabled\" attribute.  Also check X87_ENABLE_ARITH\n+\tfor TARGET_MIX_SSE_I387 alternatives.\n+\t(*fop_<mode>_1): Merge from *fop_<mode>_1_mixed and *fop_<mode>_1_i387.\n+\tDisable unsupported alternatives using \"enabled\" attribute.  Use\n+\tnonimm_ssenomem_operand as operand 1 predicate.  Also check\n+\tX87_ENABLE_ARITH for TARGET_MIX_SSE_I387 alternatives.\n+\t* config/i386/predicates.md (nonimm_ssenomem_operand): New predicate.\n+\t(register_mixssei387nonimm_operand): Remove predicate.\n+\n 2016-05-02  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree.c (cst_and_fits_in_hwi): Simplify."}, {"sha": "f4d33c595511f74780907aceb2ed5d5f229836a6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 33, "deletions": 50, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebae28e91ba5a5df5b59e2b114deeb080ec82b27/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebae28e91ba5a5df5b59e2b114deeb080ec82b27/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ebae28e91ba5a5df5b59e2b114deeb080ec82b27", "patch": "@@ -13989,12 +13989,13 @@\n ;; Gcc is slightly more smart about handling normal two address instructions\n ;; so use special patterns for add and mull.\n \n-(define_insn \"*fop_<mode>_comm_mixed\"\n+(define_insn \"*fop_<mode>_comm\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,x,v\")\n \t(match_operator:MODEF 3 \"binary_fp_operator\"\n \t  [(match_operand:MODEF 1 \"nonimmediate_operand\" \"%0,0,v\")\n \t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"fm,xm,vm\")]))]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+  \"((SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+    || (TARGET_80387 && X87_ENABLE_ARITH (<MODE>mode)))\n    && COMMUTATIVE_ARITH_P (operands[3])\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"* return output_387_binary_op (insn, operands);\"\n@@ -14010,25 +14011,17 @@\n    (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set (attr \"enabled\")\n-     (cond [(eq_attr \"alternative\" \"0\")\n-              (symbol_ref \"TARGET_MIX_SSE_I387\")\n-\t   ]\n-           (const_string \"*\")))])\n-\n-(define_insn \"*fop_<mode>_comm_i387\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f\")\n-\t(match_operator:MODEF 3 \"binary_fp_operator\"\n-\t  [(match_operand:MODEF 1 \"nonimmediate_operand\" \"%0\")\n-\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"fm\")]))]\n-  \"TARGET_80387 && X87_ENABLE_ARITH (<MODE>mode)\n-   && COMMUTATIVE_ARITH_P (operands[3])\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\")\n-\t(if_then_else (match_operand:MODEF 3 \"mult_operator\")\n-\t   (const_string \"fmul\")\n-\t   (const_string \"fop\")))\n-   (set_attr \"mode\" \"<MODE>\")])\n+     (if_then_else\n+       (match_test (\"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"0\")\n+\t (symbol_ref \"TARGET_MIX_SSE_I387\n+\t\t      && X87_ENABLE_ARITH (<MODE>mode)\")\n+\t (const_string \"*\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"0\")\n+\t (symbol_ref \"true\")\n+\t (symbol_ref \"false\"))))])\n \n (define_insn \"*rcpsf2_sse\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n@@ -14042,14 +14035,15 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_<mode>_1_mixed\"\n+(define_insn \"*fop_<mode>_1\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f,x,v\")\n \t(match_operator:MODEF 3 \"binary_fp_operator\"\n \t  [(match_operand:MODEF 1\n-\t     \"register_mixssei387nonimm_operand\" \"0,fm,0,v\")\n+\t     \"nonimm_ssenomem_operand\" \"0,fm,0,v\")\n \t   (match_operand:MODEF 2\n-\t     \"nonimmediate_operand\"\t\t \"fm,0,xm,vm\")]))]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+\t     \"nonimmediate_operand\"    \"fm,0,xm,vm\")]))]\n+  \"((SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+    || (TARGET_80387 && X87_ENABLE_ARITH (<MODE>mode)))\n    && !COMMUTATIVE_ARITH_P (operands[3])\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"* return output_387_binary_op (insn, operands);\"\n@@ -14065,27 +14059,17 @@\n    (set_attr \"prefix\" \"orig,orig,orig,vex\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set (attr \"enabled\")\n-     (cond [(eq_attr \"alternative\" \"0,1\")\n-              (symbol_ref \"TARGET_MIX_SSE_I387\")\n-\t   ]\n-           (const_string \"*\")))])\n-\n-;; This pattern is not fully shadowed by the pattern above.\n-(define_insn \"*fop_<mode>_1_i387\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:MODEF 3 \"binary_fp_operator\"\n-\t  [(match_operand:MODEF 1 \"nonimmediate_operand\" \"0,fm\")\n-\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n-  \"TARGET_80387 && X87_ENABLE_ARITH (<MODE>mode)\n-   && !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-   && !COMMUTATIVE_ARITH_P (operands[3])\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\")\n-        (if_then_else (match_operand:MODEF 3 \"div_operator\")\n-           (const_string \"fdiv\")\n-           (const_string \"fop\")))\n-   (set_attr \"mode\" \"<MODE>\")])\n+     (if_then_else\n+       (match_test (\"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"0,1\")\n+\t (symbol_ref \"TARGET_MIX_SSE_I387\n+\t\t      && X87_ENABLE_ARITH (<MODE>mode)\")\n+\t (const_string \"*\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"0,1\")\n+\t (symbol_ref \"true\")\n+\t (symbol_ref \"false\"))))])\n \n ;; ??? Add SSE splitters for these!\n (define_insn \"*fop_<MODEF:mode>_2_i387\"\n@@ -14137,8 +14121,7 @@\n \t     (match_operand:SF 1 \"nonimmediate_operand\" \"fm,0\"))\n \t    (match_operand:DF 2 \"register_operand\" \"0,f\")]))]\n   \"TARGET_80387 && X87_ENABLE_ARITH (DFmode)\n-   && !(TARGET_SSE2 && TARGET_SSE_MATH)\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+   && !(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n         (cond [(match_operand:DF 3 \"mult_operator\")\n@@ -14156,7 +14139,7 @@\n \t   (float_extend:DF\n \t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n   \"TARGET_80387 && X87_ENABLE_ARITH (DFmode)\n-   && !(TARGET_SSE2 && TARGET_SSE_MATH)\"\n+   && !(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n         (cond [(match_operand:DF 3 \"mult_operator\")\n@@ -14175,7 +14158,7 @@\n \t   (float_extend:DF\n \t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n   \"TARGET_80387 && X87_ENABLE_ARITH (DFmode)\n-   && !(TARGET_SSE2 && TARGET_SSE_MATH)\"\n+   && !(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n         (cond [(match_operand:DF 3 \"mult_operator\")"}, {"sha": "fe9bb2bc6953d1fa2d528029499dc220b4d64074", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebae28e91ba5a5df5b59e2b114deeb080ec82b27/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebae28e91ba5a5df5b59e2b114deeb080ec82b27/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=ebae28e91ba5a5df5b59e2b114deeb080ec82b27", "patch": "@@ -121,11 +121,14 @@\n     (match_operand 0 \"nonmemory_operand\")\n     (match_operand 0 \"general_operand\")))\n \n-;; Match register operands, include memory operand for TARGET_MIX_SSE_I387.\n-(define_predicate \"register_mixssei387nonimm_operand\"\n-  (if_then_else (match_test \"TARGET_MIX_SSE_I387\")\n-    (match_operand 0 \"nonimmediate_operand\")\n-    (match_operand 0 \"register_operand\")))\n+;; Match nonimmediate operands, but exclude memory operands\n+;; for TARGET_SSE_MATH if TARGET_MIX_SSE_I387 is not enabled.\n+(define_predicate \"nonimm_ssenomem_operand\"\n+  (if_then_else\n+    (and (match_test \"SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH\")\n+\t (not (match_test \"TARGET_MIX_SSE_I387 && X87_ENABLE_ARITH (mode)\")))\n+    (match_operand 0 \"register_operand\")\n+    (match_operand 0 \"nonimmediate_operand\")))\n \n ;; Match register operands, include memory operand for TARGET_SSE4_1.\n (define_predicate \"register_sse4nonimm_operand\""}]}