{"sha": "2f3bb934a1223f6f98314a7e730407e5e8ff1e68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYzYmI5MzRhMTIyM2Y2Zjk4MzE0YTdlNzMwNDA3ZTVlOGZmMWU2OA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-09-15T12:48:50Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-09-15T12:48:50Z"}, "message": "c-decl.c (lookup_label): Return NULL_TREE instead of 0.\n\n\t* c-decl.c (lookup_label): Return NULL_TREE instead of 0.\n\t(lookup_tag): Change the type of THISLEVEL_ONLY to bool.\n\tReturn NULL_TREE instead of 0.\n\t(lookup_name): Return NULL_TREE instead of 0.\n\t(lookup_name_in_scope): Likewise.\n\t(shadow_tag_warned): Use true instead of 1 and NULL_TREE instead of 0.\n\t(parser_xref_tag): Use false instead of 0.\n\t(start_struct): Use true instead of 1.\n\t(start_enum): Use true instead of 1 and NULL_TREE instead of 0.\n\nFrom-SVN: r227791", "tree": {"sha": "f8201dfa06a26b11130c16ab1eccf8a732aa2e59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8201dfa06a26b11130c16ab1eccf8a732aa2e59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f3bb934a1223f6f98314a7e730407e5e8ff1e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3bb934a1223f6f98314a7e730407e5e8ff1e68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f3bb934a1223f6f98314a7e730407e5e8ff1e68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3bb934a1223f6f98314a7e730407e5e8ff1e68/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abf47511f57721e791c48852c01bb32d0689525f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf47511f57721e791c48852c01bb32d0689525f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abf47511f57721e791c48852c01bb32d0689525f"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "37124b3f587cbab7c6e5244ad53f8b4131f54d12", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3bb934a1223f6f98314a7e730407e5e8ff1e68/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3bb934a1223f6f98314a7e730407e5e8ff1e68/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2f3bb934a1223f6f98314a7e730407e5e8ff1e68", "patch": "@@ -1,3 +1,15 @@\n+2015-09-15  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-decl.c (lookup_label): Return NULL_TREE instead of 0.\n+\t(lookup_tag): Change the type of THISLEVEL_ONLY to bool.\n+\tReturn NULL_TREE instead of 0.\n+\t(lookup_name): Return NULL_TREE instead of 0.\n+\t(lookup_name_in_scope): Likewise.\n+\t(shadow_tag_warned): Use true instead of 1 and NULL_TREE instead of 0.\n+\t(parser_xref_tag): Use false instead of 0.\n+\t(start_struct): Use true instead of 1.\n+\t(start_enum): Use true instead of 1 and NULL_TREE instead of 0.\n+\n 2015-09-14  Marek Polacek  <polacek@redhat.com>\n \n \t* c-typeck.c (set_nonincremental_init_from_string): Use"}, {"sha": "989ff993223e86774130c57bfa919d5bbe6af173", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3bb934a1223f6f98314a7e730407e5e8ff1e68/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3bb934a1223f6f98314a7e730407e5e8ff1e68/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=2f3bb934a1223f6f98314a7e730407e5e8ff1e68", "patch": "@@ -3474,7 +3474,7 @@ lookup_label (tree name)\n   if (current_function_scope == 0)\n     {\n       error (\"label %qE referenced outside of any function\", name);\n-      return 0;\n+      return NULL_TREE;\n     }\n \n   /* Use a label already defined or ref'd with this name, but not if\n@@ -3811,14 +3811,14 @@ c_check_switch_jump_warnings (struct c_spot_bindings *switch_bindings,\n    If the wrong kind of type is found, an error is reported.  */\n \n static tree\n-lookup_tag (enum tree_code code, tree name, int thislevel_only,\n+lookup_tag (enum tree_code code, tree name, bool thislevel_only,\n \t    location_t *ploc)\n {\n   struct c_binding *b = I_TAG_BINDING (name);\n-  int thislevel = 0;\n+  bool thislevel = false;\n \n   if (!b || !b->decl)\n-    return 0;\n+    return NULL_TREE;\n \n   /* We only care about whether it's in this level if\n      thislevel_only was set or it might be a type clash.  */\n@@ -3830,11 +3830,11 @@ lookup_tag (enum tree_code code, tree name, int thislevel_only,\n \t file scope is created.)  */\n       if (B_IN_CURRENT_SCOPE (b)\n \t  || (current_scope == file_scope && B_IN_EXTERNAL_SCOPE (b)))\n-\tthislevel = 1;\n+\tthislevel = true;\n     }\n \n   if (thislevel_only && !thislevel)\n-    return 0;\n+    return NULL_TREE;\n \n   if (TREE_CODE (b->decl) != code)\n     {\n@@ -3885,7 +3885,7 @@ lookup_name (tree name)\n       maybe_record_typedef_use (b->decl);\n       return b->decl;\n     }\n-  return 0;\n+  return NULL_TREE;\n }\n \n /* Similar to `lookup_name' but look only at the indicated scope.  */\n@@ -3898,7 +3898,7 @@ lookup_name_in_scope (tree name, struct c_scope *scope)\n   for (b = I_SYMBOL_BINDING (name); b; b = b->shadowed)\n     if (B_IN_SCOPE (b, scope))\n       return b->decl;\n-  return 0;\n+  return NULL_TREE;\n }\n \f\n /* Create the predefined scalar types of C,\n@@ -4138,9 +4138,9 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n \t  else\n \t    {\n \t      pending_invalid_xref = 0;\n-\t      t = lookup_tag (code, name, 1, NULL);\n+\t      t = lookup_tag (code, name, true, NULL);\n \n-\t      if (t == 0)\n+\t      if (t == NULL_TREE)\n \t\t{\n \t\t  t = make_node (code);\n \t\t  pushtag (input_location, name, t);\n@@ -7082,7 +7082,7 @@ parser_xref_tag (location_t loc, enum tree_code code, tree name)\n   /* If a cross reference is requested, look up the type\n      already defined for this tag and return it.  */\n \n-  ref = lookup_tag (code, name, 0, &refloc);\n+  ref = lookup_tag (code, name, false, &refloc);\n   /* If this is the right type of tag, return what we found.\n      (This reference will be shadowed by shadow_tag later if appropriate.)\n      If this is the wrong type of tag, do not return it.  If it was the\n@@ -7186,7 +7186,7 @@ start_struct (location_t loc, enum tree_code code, tree name,\n   location_t refloc = UNKNOWN_LOCATION;\n \n   if (name != NULL_TREE)\n-    ref = lookup_tag (code, name, 1, &refloc);\n+    ref = lookup_tag (code, name, true, &refloc);\n   if (ref && TREE_CODE (ref) == code)\n     {\n       if (TYPE_SIZE (ref))\n@@ -7905,9 +7905,9 @@ start_enum (location_t loc, struct c_enum_contents *the_enum, tree name)\n      forward reference.  */\n \n   if (name != NULL_TREE)\n-    enumtype = lookup_tag (ENUMERAL_TYPE, name, 1, &enumloc);\n+    enumtype = lookup_tag (ENUMERAL_TYPE, name, true, &enumloc);\n \n-  if (enumtype == 0 || TREE_CODE (enumtype) != ENUMERAL_TYPE)\n+  if (enumtype == NULL_TREE || TREE_CODE (enumtype) != ENUMERAL_TYPE)\n     {\n       enumtype = make_node (ENUMERAL_TYPE);\n       pushtag (loc, name, enumtype);"}]}