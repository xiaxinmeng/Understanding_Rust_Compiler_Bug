{"sha": "c59c3b1c801ec31bcae74900e77e479bb1084c65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU5YzNiMWM4MDFlYzMxYmNhZTc0OTAwZTc3ZTQ3OWJiMTA4NGM2NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-12T20:50:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-12T20:50:49Z"}, "message": "(output_scc_di): New function.\n\n(extend_operator) : Allow DImode target.\n\nFrom-SVN: r9663", "tree": {"sha": "f5759ca5e4f40280dde1aeeca833ebdee2014985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5759ca5e4f40280dde1aeeca833ebdee2014985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c59c3b1c801ec31bcae74900e77e479bb1084c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59c3b1c801ec31bcae74900e77e479bb1084c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c59c3b1c801ec31bcae74900e77e479bb1084c65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59c3b1c801ec31bcae74900e77e479bb1084c65/comments", "author": null, "committer": null, "parents": [{"sha": "096b9fea8d958df0ae6cfde78864057987c6648c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096b9fea8d958df0ae6cfde78864057987c6648c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096b9fea8d958df0ae6cfde78864057987c6648c"}], "stats": {"total": 147, "additions": 138, "deletions": 9}, "files": [{"sha": "25211a9335c1fa4755aa4a7d46b632c23f332c9b", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 138, "deletions": 9, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59c3b1c801ec31bcae74900e77e479bb1084c65/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59c3b1c801ec31bcae74900e77e479bb1084c65/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=c59c3b1c801ec31bcae74900e77e479bb1084c65", "patch": "@@ -693,6 +693,143 @@ output_dbcc_and_branch (operands)\n     }\n }\n \n+char *\n+output_scc_di(op, operand1, operand2, dest)\n+     rtx op;\n+     rtx operand1;\n+     rtx operand2;\n+     rtx dest;\n+{\n+  rtx loperands[7];\n+\n+  loperands[0] = operand1;\n+  if (GET_CODE (operand1) == REG)\n+    loperands[1] = gen_rtx (REG, SImode, REGNO (operand1) + 1);\n+  else\n+    loperands[1] = adj_offsettable_operand (operand1, 4);\n+  if (operand2 != const0_rtx)\n+    {\n+      loperands[2] = operand2;\n+      if (GET_CODE (operand2) == REG)\n+\tloperands[3] = gen_rtx (REG, SImode, REGNO (operand2) + 1);\n+      else\n+\tloperands[3] = adj_offsettable_operand (operand2, 4);\n+    }\n+  loperands[4] = gen_label_rtx();\n+  if (operand2 != const0_rtx)\n+#ifdef MOTOROLA\n+    output_asm_insn (\"cmp%.l %0,%2\\n\\tjbne %l4\\n\\tcmp%.l %1,%3\", loperands);\n+#else\n+    output_asm_insn (\"cmp%.l %0,%2\\n\\tjne %l4\\n\\tcmp%.l %1,%3\", loperands);\n+#endif\n+  else\n+#ifdef MOTOROLA\n+    output_asm_insn (\"tst%.l %0\\n\\tjbne %l4\\n\\ttst%.l %1\", loperands);\n+#else\n+    output_asm_insn (\"tst%.l %0\\n\\tjne %l4\\n\\ttst%.l %1\", loperands);\n+#endif\n+  loperands[5] = dest;\n+  \n+  switch (GET_CODE (op))\n+    {\n+      case EQ:\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n+        output_asm_insn (\"seq %5\", loperands);\n+        break;\n+\n+      case NE:\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n+        output_asm_insn (\"sne %5\", loperands);\n+        break;\n+\n+      case GT:\n+        loperands[6] = gen_label_rtx();\n+#ifdef MOTOROLA\n+        output_asm_insn (\"shi %5\\n\\tjbra %l6\", loperands);\n+#else\n+        output_asm_insn (\"shi %5\\n\\tjra %l6\", loperands);\n+#endif\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n+        output_asm_insn (\"sgt %5\", loperands);\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[6]));\n+        break;\n+\n+      case GTU:\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n+        output_asm_insn (\"shi %5\", loperands);\n+        break;\n+\n+      case LT:\n+        loperands[6] = gen_label_rtx();\n+#ifdef MOTOROLA\n+        output_asm_insn (\"scs %5\\n\\tjbra %l6\", loperands);\n+#else\n+        output_asm_insn (\"scs %5\\n\\tjra %l6\", loperands);\n+#endif\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n+        output_asm_insn (\"slt %5\", loperands);\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[6]));\n+        break;\n+\n+      case LTU:\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n+        output_asm_insn (\"scs %5\", loperands);\n+        break;\n+\n+      case GE:\n+        loperands[6] = gen_label_rtx();\n+#ifdef MOTOROLA\n+        output_asm_insn (\"scc %5\\n\\tjbra %l6\", loperands);\n+#else\n+        output_asm_insn (\"scc %5\\n\\tjra %l6\", loperands);\n+#endif\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n+        output_asm_insn (\"sge %5\", loperands);\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[6]));\n+        break;\n+\n+      case GEU:\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n+        output_asm_insn (\"scc %5\", loperands);\n+        break;\n+\n+      case LE:\n+        loperands[6] = gen_label_rtx();\n+#ifdef MOTOROLA\n+        output_asm_insn (\"sls %5\\n\\tjbra %l6\", loperands);\n+#else\n+        output_asm_insn (\"sls %5\\n\\tjra %l6\", loperands);\n+#endif\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n+        output_asm_insn (\"sle %5\", loperands);\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[6]));\n+        break;\n+\n+      case LEU:\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n+        output_asm_insn (\"sls %5\", loperands);\n+        break;\n+\n+      default:\n+\tabort ();\n+    }\n+  return \"\";\n+}\n+\n char *\n output_btst (operands, countop, dataop, insn, signpos)\n      rtx *operands;\n@@ -774,20 +911,12 @@ extend_operator(x, mode)\n      rtx x;\n      enum machine_mode mode;\n {\n-    if (GET_MODE(x) != SImode)\n+    if (mode != VOIDmode && GET_MODE(x) != mode)\n \treturn 0;\n     switch (GET_CODE(x))\n \t{\n \tcase SIGN_EXTEND :\n \tcase ZERO_EXTEND :\n-\t    break;\n-\tdefault :\n-\t    return 0;\n-\t}\n-    switch (GET_MODE(XEXP(x, 0)))\n-\t{\n-\tcase HImode :\n-\tcase QImode :\n \t    return 1;\n \tdefault :\n \t    return 0;"}]}