{"sha": "03af65c41e5e380c16816043be0b86433ea7842a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhZjY1YzQxZTVlMzgwYzE2ODE2MDQzYmUwYjg2NDMzZWE3ODQyYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-19T11:26:31Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-19T11:26:31Z"}, "message": "(sign_extend): Disable pattern with explicit SUBREG.\n\n(cmov): Allow first operand of comparison to be zero, 2nd reg.\n\nFrom-SVN: r8524", "tree": {"sha": "fd9216f5846eeed5f3582e7bca639b19173db948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd9216f5846eeed5f3582e7bca639b19173db948"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03af65c41e5e380c16816043be0b86433ea7842a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03af65c41e5e380c16816043be0b86433ea7842a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03af65c41e5e380c16816043be0b86433ea7842a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03af65c41e5e380c16816043be0b86433ea7842a/comments", "author": null, "committer": null, "parents": [{"sha": "ab561e667b7da048887a49d6cd53e7817504d0a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab561e667b7da048887a49d6cd53e7817504d0a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab561e667b7da048887a49d6cd53e7817504d0a6"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "459ca66160707b09f6905113df9183847c23784d", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03af65c41e5e380c16816043be0b86433ea7842a/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03af65c41e5e380c16816043be0b86433ea7842a/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=03af65c41e5e380c16816043be0b86433ea7842a", "patch": "@@ -785,21 +785,24 @@\n }\"\n   [(set_attr \"type\" \"iaddlog,shiftcm\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI\n-\t (subreg:SI (ashift:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t\t       (match_operand:DI 2 \"const_int_operand\" \"P\"))\n-\t\t    0)))]\n-  \"INTVAL (operands[2]) >= 1 && INTVAL (operands[2]) <= 3\"\n-  \"*\n-{\n-  if (operands[2] == const1_rtx)\n-    return \\\"addl %r1,%r1,%0\\\";\n-  else\n-    return \\\"s%P2addl %r1,0,%0\\\";\n-}\"\n-  [(set_attr \"type\" \"iaddlog\")])\n+;; ??? The following pattern is made by combine, but earlier phases\n+;; (specifically flow) can't handle it.  This occurs in jump.c.  Deal\n+;; with this in a better way at some point.\n+;;(define_insn \"\"\n+;;  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+;;\t(sign_extend:DI\n+;;\t (subreg:SI (ashift:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n+;;\t\t\t       (match_operand:DI 2 \"const_int_operand\" \"P\"))\n+;;\t\t    0)))]\n+;;  \"INTVAL (operands[2]) >= 1 && INTVAL (operands[2]) <= 3\"\n+;;  \"*\n+;;{\n+;;  if (operands[2] == const1_rtx)\n+;;    return \\\"addl %r1,%r1,%0\\\";\n+;;  else\n+;;    return \\\"s%P2addl %r1,0,%0\\\";\n+;; }\"\n+;;  [(set_attr \"type\" \"iaddlog\")])\n \t\t\t  \n (define_insn \"lshrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -1302,17 +1305,19 @@\n   [(set_attr \"type\" \"icmp\")])\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r,r\")\n \t(if_then_else:DI\n \t (match_operator 2 \"signed_comparison_operator\"\n-\t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ\")\n-\t\t\t  (const_int 0)])\n-\t (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI,0\")\n-\t (match_operand:DI 4 \"reg_or_8bit_operand\" \"0,rI\")))]\n-  \"\"\n+\t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ,J,J\")\n+\t\t\t  (match_operand:DI 4 \"reg_or_0_operand\" \"J,J,rJ,rJ\")])\n+\t (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI,0,rI,0\")\n+\t (match_operand:DI 5 \"reg_or_8bit_operand\" \"0,rI,0,rI\")))]\n+  \"operands[3] == const0_rtx || operands[4] == const0_rtx\"\n   \"@\n    cmov%C2 %r3,%1,%0\n-   cmov%D2 %r3,%4,%0\")\n+   cmov%D2 %r3,%5,%0\n+   cmov%c2 %r4,%1,%0\n+   cmov%d2 %r4,%5,%0\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")"}]}