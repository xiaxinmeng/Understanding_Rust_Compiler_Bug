{"sha": "052204fac580b21c967e57e6285d99a9828b8fac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUyMjA0ZmFjNTgwYjIxYzk2N2U1N2U2Mjg1ZDk5YTk4MjhiOGZhYw==", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-08-28T15:01:15Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-09-16T13:17:17Z"}, "message": "vec: don't select partial vectors when unnecessary\n\ngcc/ChangeLog\n\n2020-09-09  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* tree-vect-loop.c (vect_need_peeling_or_partial_vectors_p): New\n\tfunction.\n\t(vect_analyze_loop_2): Make use of it not to select partial\n\tvectors if no peel is required.\n\t(determine_peel_for_niter): Move out some logic into\n\t'vect_need_peeling_or_partial_vectors_p'.\n\ngcc/testsuite/ChangeLog\n\n2020-09-09  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* gcc.target/aarch64/sve/cost_model_10.c: New test.\n\t* gcc.target/aarch64/sve/clastb_8.c: Update test for new\n\tvectorization strategy.\n\t* gcc.target/aarch64/sve/cost_model_5.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_14.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_15.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_16.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_17.c: Likewise.", "tree": {"sha": "0503459bcc84856c2f71ab5cca17878aebfb34f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0503459bcc84856c2f71ab5cca17878aebfb34f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/052204fac580b21c967e57e6285d99a9828b8fac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052204fac580b21c967e57e6285d99a9828b8fac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/052204fac580b21c967e57e6285d99a9828b8fac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052204fac580b21c967e57e6285d99a9828b8fac/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "453a20c65722719b9e2d84339f215e7ec87692dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453a20c65722719b9e2d84339f215e7ec87692dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453a20c65722719b9e2d84339f215e7ec87692dc"}], "stats": {"total": 138, "additions": 80, "deletions": 58}, "files": [{"sha": "e61ff4ac92dfe8d18ac6e3d6e0652fe9ce5509ca", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_8.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_8.c?ref=052204fac580b21c967e57e6285d99a9828b8fac", "patch": "@@ -23,7 +23,4 @@ TEST_TYPE (uint64_t);\n /* { dg-final { scan-assembler {\\tclastb\\t(h[0-9]+), p[0-7], \\1, z[0-9]+\\.h\\n} } } */\n /* { dg-final { scan-assembler {\\tclastb\\t(s[0-9]+), p[0-7], \\1, z[0-9]+\\.s\\n} } } */\n /* { dg-final { scan-assembler {\\tclastb\\t(d[0-9]+), p[0-7], \\1, z[0-9]+\\.d\\n} } } */\n-/* { dg-final { scan-assembler {\\twhilelo\\tp[0-9]+\\.b,} } } */\n-/* { dg-final { scan-assembler {\\twhilelo\\tp[0-9]+\\.h,} } } */\n-/* { dg-final { scan-assembler {\\twhilelo\\tp[0-9]+\\.s,} } } */\n-/* { dg-final { scan-assembler {\\twhilelo\\tp[0-9]+\\.d,} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp[0-9]+\\.b,} 4 } } */"}, {"sha": "bfac09ed1c14237a2ed5d002b27c6262302bf2ff", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_10.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_10.c?ref=052204fac580b21c967e57e6285d99a9828b8fac", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256\" } */\n+\n+void\n+f (int *restrict x, int *restrict y, unsigned int n)\n+{\n+  for (unsigned int i = 0; i < n * 8; ++i)\n+    x[i] += y[i];\n+}\n+\n+/* { dg-final { scan-assembler-not {\\twhilelo\\t} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp} } } */\n+/* { dg-final { scan-assembler {\\tcmp\\tx[0-9]+, x[0-9]+\\n} } } */"}, {"sha": "f3a29fc38a1700752fff8d98e1e642cdbe436c18", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_5.c?ref=052204fac580b21c967e57e6285d99a9828b8fac", "patch": "@@ -9,5 +9,5 @@ vset (int *restrict dst, int *restrict src, int count)\n       *dst++ = 1;\n }\n \n-/* { dg-final { scan-assembler-not {\\tst1w\\tz} } } */\n-/* { dg-final { scan-assembler-times {\\tstp\\tq} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tstp\\tq} } } */"}, {"sha": "45644b67bda8955dc10cf0b7a8a7a8667c51b76a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_14.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_14.c?ref=052204fac580b21c967e57e6285d99a9828b8fac", "patch": "@@ -43,12 +43,12 @@\n #undef NAME\n #undef TYPE\n \n-/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n \n /* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "814dbb3ae41f7f5bb13ffc6e59d6f7802f3c264e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_15.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_15.c?ref=052204fac580b21c967e57e6285d99a9828b8fac", "patch": "@@ -3,12 +3,12 @@\n \n #include \"struct_vect_14.c\"\n \n-/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n \n /* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "6ecf89b54420625140c08aa226a1a60b1e274398", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_16.c?ref=052204fac580b21c967e57e6285d99a9828b8fac", "patch": "@@ -3,12 +3,12 @@\n \n #include \"struct_vect_14.c\"\n \n-/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n \n /* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "571c6d0d33b7688bde6445cb2fb2493223cd9494", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_17.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_17.c?ref=052204fac580b21c967e57e6285d99a9828b8fac", "patch": "@@ -3,12 +3,12 @@\n \n #include \"struct_vect_14.c\"\n \n-/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n \n /* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */"}, {"sha": "3021be3b241adce8695167fbec0d2c374d6916f5", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052204fac580b21c967e57e6285d99a9828b8fac/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=052204fac580b21c967e57e6285d99a9828b8fac", "patch": "@@ -991,6 +991,51 @@ vect_min_prec_for_max_niters (loop_vec_info loop_vinfo, unsigned int factor)\n   return wi::min_precision (max_ni * factor, UNSIGNED);\n }\n \n+/* True if the loop needs peeling or partial vectors when vectorized.  */\n+\n+static bool\n+vect_need_peeling_or_partial_vectors_p (loop_vec_info loop_vinfo)\n+{\n+  unsigned HOST_WIDE_INT const_vf;\n+  HOST_WIDE_INT max_niter\n+    = likely_max_stmt_executions_int (LOOP_VINFO_LOOP (loop_vinfo));\n+\n+  unsigned th = LOOP_VINFO_COST_MODEL_THRESHOLD (loop_vinfo);\n+  if (!th && LOOP_VINFO_ORIG_LOOP_INFO (loop_vinfo))\n+    th = LOOP_VINFO_COST_MODEL_THRESHOLD (LOOP_VINFO_ORIG_LOOP_INFO\n+\t\t\t\t\t  (loop_vinfo));\n+\n+  if (LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n+      && LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) >= 0)\n+    {\n+      /* Work out the (constant) number of iterations that need to be\n+\t peeled for reasons other than niters.  */\n+      unsigned int peel_niter = LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo);\n+      if (LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo))\n+\tpeel_niter += 1;\n+      if (!multiple_p (LOOP_VINFO_INT_NITERS (loop_vinfo) - peel_niter,\n+\t\t       LOOP_VINFO_VECT_FACTOR (loop_vinfo)))\n+\treturn true;\n+    }\n+  else if (LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo)\n+      /* ??? When peeling for gaps but not alignment, we could\n+\t try to check whether the (variable) niters is known to be\n+\t VF * N + 1.  That's something of a niche case though.  */\n+      || LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo)\n+      || !LOOP_VINFO_VECT_FACTOR (loop_vinfo).is_constant (&const_vf)\n+      || ((tree_ctz (LOOP_VINFO_NITERS (loop_vinfo))\n+\t   < (unsigned) exact_log2 (const_vf))\n+\t  /* In case of versioning, check if the maximum number of\n+\t     iterations is greater than th.  If they are identical,\n+\t     the epilogue is unnecessary.  */\n+\t  && (!LOOP_REQUIRES_VERSIONING (loop_vinfo)\n+\t      || ((unsigned HOST_WIDE_INT) max_niter\n+\t\t  > (th / const_vf) * const_vf))))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Each statement in LOOP_VINFO can be masked where necessary.  Check\n    whether we can actually generate the masks required.  Return true if so,\n    storing the type of the scalar IV in LOOP_VINFO_RGROUP_COMPARE_TYPE.  */\n@@ -1967,44 +2012,10 @@ determine_peel_for_niter (loop_vec_info loop_vinfo)\n {\n   LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = false;\n \n-  unsigned HOST_WIDE_INT const_vf;\n-  HOST_WIDE_INT max_niter\n-    = likely_max_stmt_executions_int (LOOP_VINFO_LOOP (loop_vinfo));\n-\n-  unsigned th = LOOP_VINFO_COST_MODEL_THRESHOLD (loop_vinfo);\n-  if (!th && LOOP_VINFO_ORIG_LOOP_INFO (loop_vinfo))\n-    th = LOOP_VINFO_COST_MODEL_THRESHOLD (LOOP_VINFO_ORIG_LOOP_INFO\n-\t\t\t\t\t  (loop_vinfo));\n-\n   if (LOOP_VINFO_USING_PARTIAL_VECTORS_P (loop_vinfo))\n     /* The main loop handles all iterations.  */\n     LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = false;\n-  else if (LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n-\t   && LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) >= 0)\n-    {\n-      /* Work out the (constant) number of iterations that need to be\n-\t peeled for reasons other than niters.  */\n-      unsigned int peel_niter = LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo);\n-      if (LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo))\n-\tpeel_niter += 1;\n-      if (!multiple_p (LOOP_VINFO_INT_NITERS (loop_vinfo) - peel_niter,\n-\t\t       LOOP_VINFO_VECT_FACTOR (loop_vinfo)))\n-\tLOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = true;\n-    }\n-  else if (LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo)\n-\t   /* ??? When peeling for gaps but not alignment, we could\n-\t      try to check whether the (variable) niters is known to be\n-\t      VF * N + 1.  That's something of a niche case though.  */\n-\t   || LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo)\n-\t   || !LOOP_VINFO_VECT_FACTOR (loop_vinfo).is_constant (&const_vf)\n-\t   || ((tree_ctz (LOOP_VINFO_NITERS (loop_vinfo))\n-\t\t< (unsigned) exact_log2 (const_vf))\n-\t       /* In case of versioning, check if the maximum number of\n-\t\t  iterations is greater than th.  If they are identical,\n-\t\t  the epilogue is unnecessary.  */\n-\t       && (!LOOP_REQUIRES_VERSIONING (loop_vinfo)\n-\t\t   || ((unsigned HOST_WIDE_INT) max_niter\n-\t\t       > (th / const_vf) * const_vf))))\n+  else if (vect_need_peeling_or_partial_vectors_p (loop_vinfo))\n     LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = true;\n }\n \n@@ -2265,7 +2276,9 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n      this vectorization factor.  */\n   if (LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo))\n     {\n-      if (param_vect_partial_vector_usage == 0)\n+      /* Don't use partial vectors if we don't need to peel the loop.  */\n+      if (param_vect_partial_vector_usage == 0\n+\t  || !vect_need_peeling_or_partial_vectors_p (loop_vinfo))\n \tLOOP_VINFO_USING_PARTIAL_VECTORS_P (loop_vinfo) = false;\n       else if (vect_verify_full_masking (loop_vinfo)\n \t       || vect_verify_loop_lens (loop_vinfo))"}]}