{"sha": "886e08657ea9afe9ba6265f5a79f5c9b8cd38636", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2ZTA4NjU3ZWE5YWZlOWJhNjI2NWY1YTc5ZjVjOWI4Y2QzODYzNg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-02-12T01:05:47Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-02-12T01:05:47Z"}, "message": "diagnostic.c (real_abort): New.\n\n\t* diagnostic.c (real_abort): New.\n\t(diagnostic_report_diagnostic): Call real_abort on error.\n\t* diagnostic.h (diagnostic_abort_on_error): New.\n\t(struct diagnostic_context): Add abort_on_error field.\n\t* toplev.c (setup_core_dumping): New.\n\t(decode_d_option): Handle 'H' case.\n\t* doc/invoke.texi (Debugging Options): Document -dH.\n\nFrom-SVN: r62753", "tree": {"sha": "4da9d6d58f72a28241619628a1b3f73d75b12303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4da9d6d58f72a28241619628a1b3f73d75b12303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/886e08657ea9afe9ba6265f5a79f5c9b8cd38636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886e08657ea9afe9ba6265f5a79f5c9b8cd38636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886e08657ea9afe9ba6265f5a79f5c9b8cd38636", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886e08657ea9afe9ba6265f5a79f5c9b8cd38636/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab77073fd7020f952a127d772c4e3010ca92fcf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab77073fd7020f952a127d772c4e3010ca92fcf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab77073fd7020f952a127d772c4e3010ca92fcf3"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "96d364e7c8781cac51c014baaebc8e1f5798bf52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886e08657ea9afe9ba6265f5a79f5c9b8cd38636/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886e08657ea9afe9ba6265f5a79f5c9b8cd38636/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=886e08657ea9afe9ba6265f5a79f5c9b8cd38636", "patch": "@@ -1,3 +1,13 @@\n+2003-02-11  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* diagnostic.c (real_abort): New.\n+\t(diagnostic_report_diagnostic): Call real_abort on error.\n+\t* diagnostic.h (diagnostic_abort_on_error): New.\n+\t(struct diagnostic_context): Add abort_on_error field.\n+\t* toplev.c (setup_core_dumping): New.\n+\t(decode_d_option): Handle 'H' case.\n+\t* doc/invoke.texi (Debugging Options): Document -dH.\n+\n 2003-02-11  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* Makefile.in: Remove pointless setting of CXXFLAGS for dejagnu"}, {"sha": "21d78a95dc5cda89eeff678f7ba73cac5a713f2f", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886e08657ea9afe9ba6265f5a79f5c9b8cd38636/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886e08657ea9afe9ba6265f5a79f5c9b8cd38636/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=886e08657ea9afe9ba6265f5a79f5c9b8cd38636", "patch": "@@ -81,6 +81,7 @@ static void default_diagnostic_finalizer PARAMS ((diagnostic_context *,\n \n static void error_recursion PARAMS ((diagnostic_context *)) ATTRIBUTE_NORETURN;\n static bool text_specifies_location PARAMS ((text_info *, location_t *));\n+static void real_abort PARAMS ((void)) ATTRIBUTE_NORETURN;\n \n extern int rtl_dump_and_exit;\n extern int warnings_are_errors;\n@@ -1283,6 +1284,8 @@ diagnostic_report_diagnostic (context, diagnostic)\n       output_flush (&context->buffer);\n     }\n \n+  if (context->abort_on_error && diagnostic->kind <= DK_ERROR)\n+    real_abort();\n   --context->lock;\n }\n \n@@ -1459,3 +1462,13 @@ warn_deprecated_use (node)\n \twarning (\"type is deprecated\");\n     }\n }\n+\n+/* Really call the system 'abort'.  This has to go right at the end of\n+   this file, so that there are no functions after it that call abort\n+   and get the system abort instead of our macro.  */\n+#undef abort\n+static void \n+real_abort ()\n+{\n+  abort ();\n+}"}, {"sha": "2c822fc16174c3a59d335ee88388b313a7d09604", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886e08657ea9afe9ba6265f5a79f5c9b8cd38636/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886e08657ea9afe9ba6265f5a79f5c9b8cd38636/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=886e08657ea9afe9ba6265f5a79f5c9b8cd38636", "patch": "@@ -1,5 +1,5 @@\n /* Various declarations for language-independent diagnostics subroutines.\n-   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n \n This file is part of GCC.\n@@ -190,6 +190,9 @@ struct diagnostic_context\n      message, usually displayed once per compiler run.  */\n   bool warnings_are_errors_message;\n \n+  /* True if we should raise a SIGABRT on errors.  */\n+  bool abort_on_error;\n+\n   /* This function is called before any message is printed out.  It is\n      responsible for preparing message prefix and such.  For example, it\n      might say:\n@@ -259,12 +262,16 @@ struct diagnostic_context\n #define diagnostic_set_last_module(DC) \\\n   (DC)->last_module = input_file_stack_tick\n \n+/* Raise SIGABRT on any diagnostic of severity DK_ERROR or higher.  */\n+#define diagnostic_abort_on_error(DC) \\\n+  (DC)->abort_on_error = true\n+\n /* This diagnostic_context is used by front-ends that directly output\n    diagnostic messages without going through `error', `warning',\n    and similar functions.  */\n extern diagnostic_context *global_dc;\n \n-/* The total count of a KIND of diagnostics meitted so far.  */\n+/* The total count of a KIND of diagnostics emitted so far.  */\n #define diagnostic_kind_count(DC, DK) (DC)->diagnostic_count[(int) (DK)]\n \n /* The number of errors that have been issued so far.  Ideally, these"}, {"sha": "0e0a0ea91a14f20653cbe51f9a37d0ef42b7ea91", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886e08657ea9afe9ba6265f5a79f5c9b8cd38636/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886e08657ea9afe9ba6265f5a79f5c9b8cd38636/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=886e08657ea9afe9ba6265f5a79f5c9b8cd38636", "patch": "@@ -3216,6 +3216,9 @@ Dump after the peephole pass, to @file{@var{file}.27.peephole2}.\n @item a\n @opindex da\n Produce all the dumps listed above.\n+@item H\n+@opindex dH\n+Produce a core dump whenever an error occurs.\n @item m\n @opindex dm\n Print statistics on memory usage, at the end of the run, to"}, {"sha": "38cff5b12d7e8d905f0df2e601a8467acb68fe48", "filename": "gcc/toplev.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886e08657ea9afe9ba6265f5a79f5c9b8cd38636/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886e08657ea9afe9ba6265f5a79f5c9b8cd38636/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=886e08657ea9afe9ba6265f5a79f5c9b8cd38636", "patch": "@@ -113,6 +113,7 @@ static void finalize PARAMS ((void));\n static void set_target_switch PARAMS ((const char *));\n \n static void crash_signal PARAMS ((int)) ATTRIBUTE_NORETURN;\n+static void setup_core_dumping PARAMS ((void));\n static void compile_file PARAMS ((void));\n static void display_help PARAMS ((void));\n static void display_target_options PARAMS ((void));\n@@ -1693,6 +1694,29 @@ crash_signal (signo)\n   internal_error (\"%s\", strsignal (signo));\n }\n \n+/* Arrange to dump core on error.  (The regular error message is still\n+   printed first, except in the case of abort().)  */\n+\n+static void\n+setup_core_dumping ()\n+{\n+#ifdef SIGABRT\n+  signal (SIGABRT, SIG_DFL);\n+#endif\n+#if defined(HAVE_SETRLIMIT)\n+  {\n+    struct rlimit rlim;\n+    if (getrlimit (RLIMIT_CORE, &rlim) != 0)\n+      fatal_io_error (\"getting core file size maximum limit\");\n+    rlim.rlim_cur = rlim.rlim_max;\n+    if (setrlimit (RLIMIT_CORE, &rlim) != 0)\n+      fatal_io_error (\"setting core file size limit to maximum\");\n+  }\n+#endif\n+  diagnostic_abort_on_error (global_dc);\n+}\n+\n+\n /* Strip off a legitimate source ending from the input string NAME of\n    length LEN.  Rather than having to know the names used by all of\n    our front ends, we strip off an ending of a period followed by\n@@ -3953,6 +3977,9 @@ decode_d_option (arg)\n       case 'D':\t/* These are handled by the preprocessor.  */\n       case 'I':\n \tbreak;\n+      case 'H':\n+\tsetup_core_dumping();\n+\tbreak;\n \n       default:\n \tmatched = 0;"}]}