{"sha": "d898d29bf9d642a49bb2502416ecdfe0a21d6ac1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg5OGQyOWJmOWQ2NDJhNDliYjI1MDI0MTZlY2RmZTBhMjFkNmFjMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-09-11T07:33:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-09-11T07:33:23Z"}, "message": "re PR target/37382 (ICE in extract_insn: <var_decl 0x7fda26ff4b40 swig_module>) 0))\n\n\tPR target/37382\n\t* expmed.c (extract_low_bits): Avoid creating invalid subregs.\n\t* dse.c (find_shift_sequence): Use extract_low_bits instead of\n\tsimplify_gen_subreg.\n\n\t* gcc.c-torture/compile/pr37382.c: New test.\n\nFrom-SVN: r140265", "tree": {"sha": "654aa05676a650f4bfb708a7c200e82d0a1e39c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/654aa05676a650f4bfb708a7c200e82d0a1e39c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ace428e3133f0aa7f4cb90180e716114bf73d705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace428e3133f0aa7f4cb90180e716114bf73d705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace428e3133f0aa7f4cb90180e716114bf73d705"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "5cf27d019e6fb0f4bf7f9b04ba286b83b153cb7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d898d29bf9d642a49bb2502416ecdfe0a21d6ac1", "patch": "@@ -1,3 +1,10 @@\n+2008-09-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/37382\n+\t* expmed.c (extract_low_bits): Avoid creating invalid subregs.\n+\t* dse.c (find_shift_sequence): Use extract_low_bits instead of\n+\tsimplify_gen_subreg.\n+\n 2008-09-11  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-vect-transform.c (vectorizable_store): Use the rhs vector type"}, {"sha": "0a3ebb40ffa48cb224c1c6de27a2b9ff9d13c62d", "filename": "gcc/dse.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=d898d29bf9d642a49bb2502416ecdfe0a21d6ac1", "patch": "@@ -1445,7 +1445,7 @@ find_shift_sequence (int access_size,\n        new_mode = GET_MODE_WIDER_MODE (new_mode))\n     {\n       rtx target, new_reg, shift_seq, insn, new_lhs;\n-      int cost, offset;\n+      int cost;\n \n       /* Try a wider mode if truncating the store mode to NEW_MODE\n \t requires a real instruction.  */\n@@ -1459,11 +1459,6 @@ find_shift_sequence (int access_size,\n       if (!CONSTANT_P (store_info->rhs)\n \t  && !MODES_TIEABLE_P (new_mode, store_mode))\n \tcontinue;\n-      offset = subreg_lowpart_offset (new_mode, store_mode);\n-      new_lhs = simplify_gen_subreg (new_mode, copy_rtx (store_info->rhs),\n-\t\t\t\t     store_mode, offset);\n-      if (new_lhs == NULL_RTX)\n-\tcontinue;\n \n       new_reg = gen_reg_rtx (new_mode);\n \n@@ -1496,6 +1491,11 @@ find_shift_sequence (int access_size,\n       if (cost > COSTS_N_INSNS (1))\n \tcontinue;\n \n+      new_lhs = extract_low_bits (new_mode, store_mode,\n+\t\t\t\t  copy_rtx (store_info->rhs));\n+      if (new_lhs == NULL_RTX)\n+\tcontinue;\n+\n       /* We found an acceptable shift.  Generate a move to\n \t take the value from the store and put it into the\n \t shift pseudo, then shift it, then generate another"}, {"sha": "6099c4b68392a06ebc461559f99dde288e14500e", "filename": "gcc/expmed.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=d898d29bf9d642a49bb2502416ecdfe0a21d6ac1", "patch": "@@ -1991,8 +1991,22 @@ extract_low_bits (enum machine_mode mode, enum machine_mode src_mode, rtx src)\n     return src;\n \n   if (CONSTANT_P (src))\n-    return simplify_gen_subreg (mode, src, src_mode,\n-\t\t\t\tsubreg_lowpart_offset (mode, src_mode));\n+    {\n+      /* simplify_gen_subreg can't be used here, as if simplify_subreg\n+\t fails, it will happily create (subreg (symbol_ref)) or similar\n+\t invalid SUBREGs.  */\n+      unsigned int byte = subreg_lowpart_offset (mode, src_mode);\n+      rtx ret = simplify_subreg (mode, src, src_mode, byte);\n+      if (ret)\n+\treturn ret;\n+\n+      if (GET_MODE (src) == VOIDmode\n+\t  || !validate_subreg (mode, src_mode, src, byte))\n+\treturn NULL_RTX;\n+\n+      src = force_reg (GET_MODE (src), src);\n+      return gen_rtx_SUBREG (mode, src, byte);\n+    }\n \n   if (GET_MODE_CLASS (mode) == MODE_CC || GET_MODE_CLASS (src_mode) == MODE_CC)\n     return NULL_RTX;"}, {"sha": "1d3dc0a09d30098072cbf9029f720c542d808a9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d898d29bf9d642a49bb2502416ecdfe0a21d6ac1", "patch": "@@ -1,3 +1,8 @@\n+2008-09-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/37382\n+\t* gcc.c-torture/compile/pr37382.c: New test.\n+\n 2008-09-11  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/36214"}, {"sha": "47525bcf9561040926a596f739d4a2766755efd9", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37382.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37382.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d898d29bf9d642a49bb2502416ecdfe0a21d6ac1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37382.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37382.c?ref=d898d29bf9d642a49bb2502416ecdfe0a21d6ac1", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/37382 */\n+\n+void baz (char *);\n+int c;\n+\n+void\n+bar (void)\n+{\n+  char a[2];\n+  int *ip = &c;\n+  char *p = a, *q = (char *) &ip;\n+  const char *r = q + 2;\n+  for (; q != r; p++, q++)\n+    *p = *q;\n+  baz (a);\n+}"}]}