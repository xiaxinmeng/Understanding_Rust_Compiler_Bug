{"sha": "75a27d3584e4c8565a838d4623e12ba1602e8a92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhMjdkMzU4NGU0Yzg1NjVhODM4ZDQ2MjNlMTJiYTE2MDJlOGE5Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-01-31T14:53:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-01-31T14:53:26Z"}, "message": "re PR c++/68763 (ICE: in verify_unstripped_args, at cp/pt.c:1132)\n\n\tPR c++/68763\n\n\t* tree.c (strip_typedefs) [FUNCTION_TYPE]: Avoid building a new\n\tfunction type if nothing is changing.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r233020", "tree": {"sha": "104b280c259f5583ca744225d29936a58f595805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/104b280c259f5583ca744225d29936a58f595805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a27d3584e4c8565a838d4623e12ba1602e8a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a27d3584e4c8565a838d4623e12ba1602e8a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a27d3584e4c8565a838d4623e12ba1602e8a92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a27d3584e4c8565a838d4623e12ba1602e8a92/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6978c505d01ec65a1465a196e35f27eb5cc79c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6978c505d01ec65a1465a196e35f27eb5cc79c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6978c505d01ec65a1465a196e35f27eb5cc79c66"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "804deb068efa95079dbe79eb211de1505f9c68e4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a27d3584e4c8565a838d4623e12ba1602e8a92/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a27d3584e4c8565a838d4623e12ba1602e8a92/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=75a27d3584e4c8565a838d4623e12ba1602e8a92", "patch": "@@ -1,3 +1,10 @@\n+2016-01-31  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/68763\n+\t* tree.c (strip_typedefs) [FUNCTION_TYPE]: Avoid building a new\n+\tfunction type if nothing is changing.\n+\n 2016-01-31  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/69009"}, {"sha": "2bf37bcabc1689d52a43dca54a6eba7fe192f1ce", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a27d3584e4c8565a838d4623e12ba1602e8a92/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a27d3584e4c8565a838d4623e12ba1602e8a92/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=75a27d3584e4c8565a838d4623e12ba1602e8a92", "patch": "@@ -1314,7 +1314,22 @@ strip_typedefs (tree t, bool *remove_attributes)\n     case FUNCTION_TYPE:\n     case METHOD_TYPE:\n       {\n-\ttree arg_types = NULL, arg_node, arg_type;\n+\ttree arg_types = NULL, arg_node, arg_node2, arg_type;\n+\tbool changed;\n+\n+\t/* Because we stomp on TREE_PURPOSE of TYPE_ARG_TYPES in many places\n+\t   around the compiler (e.g. cp_parser_late_parsing_default_args), we\n+\t   can't expect that re-hashing a function type will find a previous\n+\t   equivalent type, so try to reuse the input type if nothing has\n+\t   changed.  If the type is itself a variant, that will change.  */\n+\tbool is_variant = typedef_variant_p (t);\n+\tif (remove_attributes\n+\t    && (TYPE_ATTRIBUTES (t) || TYPE_USER_ALIGN (t)))\n+\t  is_variant = true;\n+\n+\ttype = strip_typedefs (TREE_TYPE (t), remove_attributes);\n+\tchanged = type != TREE_TYPE (t) || is_variant;\n+\n \tfor (arg_node = TYPE_ARG_TYPES (t);\n \t     arg_node;\n \t     arg_node = TREE_CHAIN (arg_node))\n@@ -1324,11 +1339,27 @@ strip_typedefs (tree t, bool *remove_attributes)\n \t    arg_type = strip_typedefs (TREE_VALUE (arg_node),\n \t\t\t\t       remove_attributes);\n \t    gcc_assert (arg_type);\n+\t    if (arg_type == TREE_VALUE (arg_node) && !changed)\n+\t      continue;\n+\n+\t    if (!changed)\n+\t      {\n+\t\tchanged = true;\n+\t\tfor (arg_node2 = TYPE_ARG_TYPES (t);\n+\t\t     arg_node2 != arg_node;\n+\t\t     arg_node2 = TREE_CHAIN (arg_node2))\n+\t\t  arg_types\n+\t\t    = tree_cons (TREE_PURPOSE (arg_node2),\n+\t\t\t\t TREE_VALUE (arg_node2), arg_types);\n+\t      }\n \n-\t    arg_types =\n-\t      tree_cons (TREE_PURPOSE (arg_node), arg_type, arg_types);\n+\t    arg_types\n+\t      = tree_cons (TREE_PURPOSE (arg_node), arg_type, arg_types);\n \t  }\n \n+\tif (!changed)\n+\t  return t;\n+\n \tif (arg_types)\n \t  arg_types = nreverse (arg_types);\n \n@@ -1337,7 +1368,6 @@ strip_typedefs (tree t, bool *remove_attributes)\n \tif (arg_node)\n \t  arg_types = chainon (arg_types, void_list_node);\n \n-\ttype = strip_typedefs (TREE_TYPE (t), remove_attributes);\n \tif (TREE_CODE (t) == METHOD_TYPE)\n \t  {\n \t    tree class_type = TREE_TYPE (TREE_VALUE (arg_types));"}]}