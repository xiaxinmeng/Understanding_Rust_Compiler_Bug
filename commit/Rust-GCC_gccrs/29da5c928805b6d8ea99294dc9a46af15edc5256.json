{"sha": "29da5c928805b6d8ea99294dc9a46af15edc5256", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlkYTVjOTI4ODA1YjZkOGVhOTkyOTRkYzlhNDZhZjE1ZWRjNTI1Ng==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-08-11T21:47:39Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-08-11T21:47:39Z"}, "message": "avr.c (avr_init_once): Use xcalloc in lieu of xmalloc/memset.\n\n\t* config/avr/avr.c (avr_init_once): Use xcalloc in lieu of\n\txmalloc/memset.\n\t* config/ia64/ia64.c (ia64_reorg): Likewise.\n\t* conflict.c (conflict_graph_new): Likewise.\n\t* fixinc/fixincl.c (run_compiles): Likewise.\n\t* genattrtab.c (optimize_attrs): Likewise.\n\t* genrecog.c (new_decision): Likewise.\n\t* haifa-sched.c (schedule_block): Likewise.\n\t* hashtable.c (ht_create): Likewise.\n\nFrom-SVN: r70337", "tree": {"sha": "94bcf5915821086716a7469523e1815e7340f194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94bcf5915821086716a7469523e1815e7340f194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29da5c928805b6d8ea99294dc9a46af15edc5256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29da5c928805b6d8ea99294dc9a46af15edc5256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29da5c928805b6d8ea99294dc9a46af15edc5256", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29da5c928805b6d8ea99294dc9a46af15edc5256/comments", "author": null, "committer": null, "parents": [{"sha": "1705e37dbbe626bb8f57ba765c03525a8e4570ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1705e37dbbe626bb8f57ba765c03525a8e4570ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1705e37dbbe626bb8f57ba765c03525a8e4570ed"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "d204bc35a0f64f219fe08a7f3eae278560ad7e93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29da5c928805b6d8ea99294dc9a46af15edc5256", "patch": "@@ -1,3 +1,15 @@\n+2003-08-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* config/avr/avr.c (avr_init_once): Use xcalloc in lieu of\n+\txmalloc/memset.\n+\t* config/ia64/ia64.c (ia64_reorg): Likewise.\n+\t* conflict.c (conflict_graph_new): Likewise.\n+\t* fixinc/fixincl.c (run_compiles): Likewise.\n+\t* genattrtab.c (optimize_attrs): Likewise.\n+\t* genrecog.c (new_decision): Likewise.\n+\t* haifa-sched.c (schedule_block): Likewise.\n+\t* hashtable.c (ht_create): Likewise.\n+\n 2003-08-11  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/lib2funcs.S: Fix whitespace."}, {"sha": "16701d1b550512a5564616c71ea86f68b385e496", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=29da5c928805b6d8ea99294dc9a46af15edc5256", "patch": "@@ -281,20 +281,17 @@ avr_override_options ()\n void\n avr_init_once ()\n {\n-  tmp_reg_rtx = xmalloc (sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n-  memset (tmp_reg_rtx, 0, sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n+  tmp_reg_rtx = xcalloc (1, sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n   PUT_CODE (tmp_reg_rtx, REG);\n   PUT_MODE (tmp_reg_rtx, QImode);\n   XINT (tmp_reg_rtx, 0) = TMP_REGNO;\n \n-  zero_reg_rtx = xmalloc (sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n-  memset (zero_reg_rtx, 0, sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n+  zero_reg_rtx = xcalloc (1, sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n   PUT_CODE (zero_reg_rtx, REG);\n   PUT_MODE (zero_reg_rtx, QImode);\n   XINT (zero_reg_rtx, 0) = ZERO_REGNO;\n \n-  ldi_reg_rtx = xmalloc (sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n-  memset (ldi_reg_rtx, 0, sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n+  ldi_reg_rtx = xcalloc (1, sizeof (struct rtx_def) + 1 * sizeof (rtunion));\n   PUT_CODE (ldi_reg_rtx, REG);\n   PUT_MODE (ldi_reg_rtx, QImode);\n   XINT (ldi_reg_rtx, 0) = LDI_REG_REGNO;"}, {"sha": "c3676e151f96ae3ed115dfa8b9639174bf7ead11", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=29da5c928805b6d8ea99294dc9a46af15edc5256", "patch": "@@ -7419,14 +7419,11 @@ ia64_reorg ()\n       PREV_INSN (ia64_nop) = NEXT_INSN (ia64_nop) = NULL_RTX;\n       recog_memoized (ia64_nop);\n       clocks_length = get_max_uid () + 1;\n-      stops_p = (char *) xmalloc (clocks_length);\n-      memset (stops_p, 0, clocks_length);\n+      stops_p = xcalloc (1, clocks_length);\n       if (ia64_tune == PROCESSOR_ITANIUM)\n \t{\n-\t  clocks = (int *) xmalloc (clocks_length * sizeof (int));\n-\t  memset (clocks, 0, clocks_length * sizeof (int));\n-\t  add_cycles = (int *) xmalloc (clocks_length * sizeof (int));\n-\t  memset (add_cycles, 0, clocks_length * sizeof (int));\n+\t  clocks = xcalloc (clocks_length, sizeof (int));\n+\t  add_cycles = xcalloc (clocks_length, sizeof (int));\n \t}\n       if (ia64_tune == PROCESSOR_ITANIUM2)\n \t{"}, {"sha": "c832b7df52cb2af9eee3b2ce3776f3955e56844b", "filename": "gcc/conflict.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fconflict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fconflict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconflict.c?ref=29da5c928805b6d8ea99294dc9a46af15edc5256", "patch": "@@ -160,9 +160,8 @@ conflict_graph_new (int num_regs)\n   obstack_init (&graph->arc_obstack);\n \t     \n   /* Create and zero the lookup table by register number.  */\n-  graph->neighbor_heads = xmalloc (num_regs * sizeof (conflict_graph_arc));\n+  graph->neighbor_heads = xcalloc (num_regs, sizeof (conflict_graph_arc));\n \n-  memset (graph->neighbor_heads, 0, num_regs * sizeof (conflict_graph_arc));\n   return graph;\n }\n "}, {"sha": "5b92c3ce097c0508f7d807097361c9e236bf9957", "filename": "gcc/fixinc/fixincl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.c?ref=29da5c928805b6d8ea99294dc9a46af15edc5256", "patch": "@@ -481,11 +481,10 @@ run_compiles (void)\n {\n   tFixDesc *p_fixd = fixDescList;\n   int fix_ct = FIX_COUNT;\n-  regex_t *p_re = xmalloc (REGEX_COUNT * sizeof (regex_t));\n+  regex_t *p_re = xcalloc (REGEX_COUNT, sizeof (regex_t));\n \n   /*  Make sure compile_re does not stumble across invalid data */\n \n-  memset (p_re, '\\0', REGEX_COUNT * sizeof (regex_t));\n   memset (&incl_quote_re, '\\0', sizeof (regex_t));\n \n   compile_re (incl_quote_pat, &incl_quote_re, 1,"}, {"sha": "d34fde26213dc3e8a25a0ae31559edff8e84e631", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=29da5c928805b6d8ea99294dc9a46af15edc5256", "patch": "@@ -3393,10 +3393,8 @@ optimize_attrs (void)\n     return;\n \n   /* Make 2 extra elements, for \"code\" values -2 and -1.  */\n-  insn_code_values = xmalloc ((insn_code_number + 2)\n-\t\t\t      * sizeof (struct attr_value_list *));\n-  memset (insn_code_values, 0,\n-\t  (insn_code_number + 2) * sizeof (struct attr_value_list *));\n+  insn_code_values = xcalloc ((insn_code_number + 2),\n+\t\t\t      sizeof (struct attr_value_list *));\n \n   /* Offset the table address so we can index by -2 or -1.  */\n   insn_code_values += 2;"}, {"sha": "76f3749610706cb9cb59f0ce482267ab4d3bb9c1", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=29da5c928805b6d8ea99294dc9a46af15edc5256", "patch": "@@ -316,9 +316,8 @@ extern void debug_decision_list\n static struct decision *\n new_decision (const char *position, struct decision_head *last)\n {\n-  struct decision *new = xmalloc (sizeof (struct decision));\n+  struct decision *new = xcalloc (1, sizeof (struct decision));\n \n-  memset (new, 0, sizeof (*new));\n   new->success = *last;\n   new->position = xstrdup (position);\n   new->number = next_number++;"}, {"sha": "c75f5ba3590c0cbb2562da059d109141bc16d163", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=29da5c928805b6d8ea99294dc9a46af15edc5256", "patch": "@@ -2138,8 +2138,7 @@ schedule_block (int b, int rgn_n_insns)\n     {\n       /* It is used for first cycle multipass scheduling.  */\n       temp_state = alloca (dfa_state_size);\n-      ready_try = xmalloc ((rgn_n_insns + 1) * sizeof (char));\n-      memset (ready_try, 0, (rgn_n_insns + 1) * sizeof (char));\n+      ready_try = xcalloc ((rgn_n_insns + 1), sizeof (char));\n       choice_stack = xmalloc ((rgn_n_insns + 1)\n \t\t\t      * sizeof (struct choice_entry));\n       for (i = 0; i <= rgn_n_insns; i++)"}, {"sha": "41551394f8aa6dc35be116b4d32f132d33c6e226", "filename": "gcc/hashtable.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fhashtable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29da5c928805b6d8ea99294dc9a46af15edc5256/gcc%2Fhashtable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.c?ref=29da5c928805b6d8ea99294dc9a46af15edc5256", "patch": "@@ -58,8 +58,7 @@ ht_create (unsigned int order)\n   unsigned int nslots = 1 << order;\n   hash_table *table;\n \n-  table = xmalloc (sizeof (hash_table));\n-  memset (table, 0, sizeof (hash_table));\n+  table = xcalloc (1, sizeof (hash_table));\n \n   /* Strings need no alignment.  */\n   _obstack_begin (&table->stack, 0, 0,"}]}