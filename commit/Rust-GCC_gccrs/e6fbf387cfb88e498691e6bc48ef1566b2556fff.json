{"sha": "e6fbf387cfb88e498691e6bc48ef1566b2556fff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmYmYzODdjZmI4OGU0OTg2OTFlNmJjNDhlZjE1NjZiMjU1NmZmZg==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2007-05-10T21:20:02Z"}, "committer": {"name": "Roman Zippel", "email": "zippel@gcc.gnu.org", "date": "2007-05-10T21:20:02Z"}, "message": "configure.ac (HAVE_AS_CFI_PSEUDO_OP): New test.\n\n\t* configure.ac (HAVE_AS_CFI_PSEUDO_OP): New test.\n\t* configure: Regenerate.\n\t* fficonfig.h.in: Regenerate.\n\t* src/m68k/sysv.S (CFI_STARTPROC,CFI_ENDPROC,\n\tCFI_OFFSET,CFI_DEF_CFA): New macros.\n\t(ffi_call_SYSV): Add callframe annotation.\n\nFrom-SVN: r124600", "tree": {"sha": "ff3c1cdffb8947b4d8e00aa22563d7ba4db63d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff3c1cdffb8947b4d8e00aa22563d7ba4db63d9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6fbf387cfb88e498691e6bc48ef1566b2556fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fbf387cfb88e498691e6bc48ef1566b2556fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6fbf387cfb88e498691e6bc48ef1566b2556fff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fbf387cfb88e498691e6bc48ef1566b2556fff/comments", "author": null, "committer": null, "parents": [{"sha": "b5296e520d6ffe92dc40e224b3ca521b817be00e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5296e520d6ffe92dc40e224b3ca521b817be00e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5296e520d6ffe92dc40e224b3ca521b817be00e"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "7512e8124c1b7dc9dacc587f1a42563471314622", "filename": "libffi/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fbf387cfb88e498691e6bc48ef1566b2556fff/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fbf387cfb88e498691e6bc48ef1566b2556fff/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=e6fbf387cfb88e498691e6bc48ef1566b2556fff", "patch": "@@ -1,3 +1,12 @@\n+2007-05-10  Roman Zippel <zippel@linux-m68k.org>\n+\n+\t* configure.ac (HAVE_AS_CFI_PSEUDO_OP): New test.\n+\t* configure: Regenerate.\n+\t* fficonfig.h.in: Regenerate.\n+\t* src/m68k/sysv.S (CFI_STARTPROC,CFI_ENDPROC,\n+\tCFI_OFFSET,CFI_DEF_CFA): New macros.\n+\t(ffi_call_SYSV): Add callframe annotation.\n+\n 2007-05-10  Roman Zippel <zippel@linux-m68k.org>\n \n \t* src/m68k/ffi.c (ffi_prep_args,ffi_prep_cif_machdep): Fix"}, {"sha": "2c4706e11ff2a7df66ff12e7ea26f44382e6c9a5", "filename": "libffi/configure", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fbf387cfb88e498691e6bc48ef1566b2556fff/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fbf387cfb88e498691e6bc48ef1566b2556fff/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=e6fbf387cfb88e498691e6bc48ef1566b2556fff", "patch": "@@ -7444,6 +7444,70 @@ presetting ac_cv_c_bigendian=no (or yes) will help\" >&2;}\n esac\n \n \n+echo \"$as_me:$LINENO: checking assembler .cfi pseudo-op support\" >&5\n+echo $ECHO_N \"checking assembler .cfi pseudo-op support... $ECHO_C\" >&6\n+if test \"${libffi_cv_as_cfi_pseudo_op+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+    libffi_cv_as_cfi_pseudo_op=unknown\n+    cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+asm (\".cfi_startproc\\n\\t.cfi_endproc\");\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  libffi_cv_as_cfi_pseudo_op=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+libffi_cv_as_cfi_pseudo_op=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+echo \"$as_me:$LINENO: result: $libffi_cv_as_cfi_pseudo_op\" >&5\n+echo \"${ECHO_T}$libffi_cv_as_cfi_pseudo_op\" >&6\n+if test \"x$libffi_cv_as_cfi_pseudo_op\" = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_CFI_PSEUDO_OP 1\n+_ACEOF\n+\n+fi\n+\n if test x$TARGET = xSPARC; then\n     echo \"$as_me:$LINENO: checking assembler and linker support unaligned pc related relocs\" >&5\n echo $ECHO_N \"checking assembler and linker support unaligned pc related relocs... $ECHO_C\" >&6"}, {"sha": "92c5678c93498dbbbc61d489c084ec79a1822dc8", "filename": "libffi/configure.ac", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fbf387cfb88e498691e6bc48ef1566b2556fff/libffi%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fbf387cfb88e498691e6bc48ef1566b2556fff/libffi%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure.ac?ref=e6fbf387cfb88e498691e6bc48ef1566b2556fff", "patch": "@@ -201,6 +201,18 @@ AC_SUBST(HAVE_LONG_DOUBLE)\n \n AC_C_BIGENDIAN\n \n+AC_CACHE_CHECK([assembler .cfi pseudo-op support],\n+    libffi_cv_as_cfi_pseudo_op, [\n+    libffi_cv_as_cfi_pseudo_op=unknown\n+    AC_TRY_COMPILE([asm (\".cfi_startproc\\n\\t.cfi_endproc\");],,\n+\t\t   [libffi_cv_as_cfi_pseudo_op=yes],\n+\t\t   [libffi_cv_as_cfi_pseudo_op=no])\n+])\n+if test \"x$libffi_cv_as_cfi_pseudo_op\" = xyes; then\n+    AC_DEFINE(HAVE_AS_CFI_PSEUDO_OP, 1,\n+\t      [Define if your assembler supports .cfi_* directives.])\n+fi\n+\n if test x$TARGET = xSPARC; then\n     AC_CACHE_CHECK([assembler and linker support unaligned pc related relocs],\n \tlibffi_cv_as_sparc_ua_pcrel, ["}, {"sha": "d32d488ed12a8fcdfa8975fc2d8dfddab38aa1df", "filename": "libffi/fficonfig.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fbf387cfb88e498691e6bc48ef1566b2556fff/libffi%2Ffficonfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fbf387cfb88e498691e6bc48ef1566b2556fff/libffi%2Ffficonfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ffficonfig.h.in?ref=e6fbf387cfb88e498691e6bc48ef1566b2556fff", "patch": "@@ -27,6 +27,9 @@\n    */\n #undef HAVE_ALLOCA_H\n \n+/* Define if your assembler supports .cfi_* directives. */\n+#undef HAVE_AS_CFI_PSEUDO_OP\n+\n /* Define if your assembler supports .register. */\n #undef HAVE_AS_REGISTER_PSEUDO_OP\n "}, {"sha": "a3d9a4f7ff7a16110d46989488f62094ba8590ef", "filename": "libffi/src/m68k/sysv.S", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fbf387cfb88e498691e6bc48ef1566b2556fff/libffi%2Fsrc%2Fm68k%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fbf387cfb88e498691e6bc48ef1566b2556fff/libffi%2Fsrc%2Fm68k%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fm68k%2Fsysv.S?ref=e6fbf387cfb88e498691e6bc48ef1566b2556fff", "patch": "@@ -8,15 +8,31 @@\n #include <fficonfig.h>\n #include <ffi.h>\n \n+#ifdef HAVE_AS_CFI_PSEUDO_OP\n+#define CFI_STARTPROC()\t\t.cfi_startproc\n+#define CFI_OFFSET(reg,off)\t.cfi_offset\treg,off\n+#define CFI_DEF_CFA(reg,off)\t.cfi_def_cfa\treg,off\n+#define CFI_ENDPROC()\t\t.cfi_endproc\n+#else\n+#define CFI_STARTPROC()\n+#define CFI_OFFSET(reg,off)\n+#define CFI_DEF_CFA(reg,off)\n+#define CFI_ENDPROC()\n+#endif\n+\n \t.text\n \n \t.globl\tffi_call_SYSV\n \t.type\tffi_call_SYSV,@function\n \t.align\t4\n \n ffi_call_SYSV:\n+\tCFI_STARTPROC()\n \tlink\t%fp,#0\n+\tCFI_OFFSET(14,-8)\n+\tCFI_DEF_CFA(14,8)\n \tmove.l\t%d2,-(%sp)\n+\tCFI_OFFSET(2,-12)\n \n \t| Make room for all of the new args.\n \tsub.l\t12(%fp),%sp\n@@ -103,4 +119,5 @@ epilogue:\n \tmove.l\t(%sp)+,%d2\n \tunlk\t%fp\n \trts\n+\tCFI_ENDPROC()\n \t.size\tffi_call_SYSV,.-ffi_call_SYSV"}]}