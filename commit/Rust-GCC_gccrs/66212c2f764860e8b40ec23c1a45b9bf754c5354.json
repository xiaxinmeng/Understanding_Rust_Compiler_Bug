{"sha": "66212c2f764860e8b40ec23c1a45b9bf754c5354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYyMTJjMmY3NjQ4NjBlOGI0MGVjMjNjMWE0NWI5YmY3NTRjNTM1NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-27T03:18:12Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-27T03:18:12Z"}, "message": "(make_node, case 'c'): For INTEGER_CST, use size of struct containing constant, just like for reals.\n\n(make_node, case 'c'): For INTEGER_CST, use size of struct containing\nconstant, just like for reals.  Also, clean up code to avoid confusing\nfallthrough.\n\nFrom-SVN: r2919", "tree": {"sha": "46d0f6ca70ac5113eabab699d0e4fb4b8f7c7a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46d0f6ca70ac5113eabab699d0e4fb4b8f7c7a0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66212c2f764860e8b40ec23c1a45b9bf754c5354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66212c2f764860e8b40ec23c1a45b9bf754c5354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66212c2f764860e8b40ec23c1a45b9bf754c5354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66212c2f764860e8b40ec23c1a45b9bf754c5354/comments", "author": null, "committer": null, "parents": [{"sha": "0570c42392880a6359ce2bacd928c2a18b0502c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0570c42392880a6359ce2bacd928c2a18b0502c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0570c42392880a6359ce2bacd928c2a18b0502c2"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "3ce46f6e3a4296d13bfb4a3f59db876672b16d79", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66212c2f764860e8b40ec23c1a45b9bf754c5354/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66212c2f764860e8b40ec23c1a45b9bf754c5354/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=66212c2f764860e8b40ec23c1a45b9bf754c5354", "patch": "@@ -844,13 +844,21 @@ make_node (code)\n       kind = c_kind;\n #endif\n       obstack = expression_obstack;\n-      /* We can't use tree_code_length for this, since the number of words\n-\t is machine-dependent due to varying alignment of `double'.  */\n-      if (code == REAL_CST)\n-\t{\n-\t  length = sizeof (struct tree_real_cst);\n-\t  break;\n-\t}\n+\n+      /* We can't use tree_code_length for INTEGER_CST, since the number of\n+\t words is machine-dependent due to varying length of HOST_WIDE_INT,\n+\t which might be wider than a pointer (e.g., long long).  Similarly\n+\t for REAL_CST, since the number of words is machine-dependent due\n+\t to varying size and alignment of `double'.  */\n+\n+      if (code == INTEGER_CST)\n+\tlength = sizeof (struct tree_int_cst);\n+      else if (code == REAL_CST)\n+\tlength = sizeof (struct tree_real_cst);\n+      else\n+\tlength = sizeof (struct tree_common)\n+\t  + tree_code_length[(int) code] * sizeof (char *);\n+      break;\n \n     case 'x':  /* something random, like an identifier.  */\n #ifdef GATHER_STATISTICS"}]}