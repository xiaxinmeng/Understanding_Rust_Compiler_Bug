{"sha": "f959607b40d11dc4a0636797feeee9adac9f8a02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk1OTYwN2I0MGQxMWRjNGEwNjM2Nzk3ZmVlZWU5YWRhYzlmOGEwMg==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2012-10-11T15:05:44Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2012-10-11T15:05:44Z"}, "message": "builtins.c (expand_builtin_thread_pointer): New.\n\n2012-10-11  Chung-Lin Tang  <cltang@codesourcery.com>\n\n\t* builtins.c (expand_builtin_thread_pointer): New.\n\t(expand_builtin_set_thread_pointer): New.\n\t(expand_builtin): Add BUILT_IN_THREAD_POINTER,\n\tBUILT_IN_SET_THREAD_POINTER expand cases.\n\t* builtins.def (BUILT_IN_THREAD_POINTER):\n\tNew __builtin_thread_pointer builtin.\n\t(BUILT_IN_SET_THREAD_POINTER):\n\tNew __builtin_set_thread_pointer builtin.\n\t* optabs.def (get_thread_pointer,set_thread_pointer):\n\tNew standard names.\n\t* doc/md.texi (Standard Names): Document get_thread_pointer and\n\tset_thread_pointer patterns.\n\t* config/alpha/alpha.md (get_thread_pointerdi): Rename from load_tp.\n\t(set_thread_pointerdi): Rename from set_tp.\n\t* config/alpha/alpha.c (alpha_legitimize_address_1): Change\n\tgen_load_tp calls to gen_get_thread_pointerdi.\n\t(alpha_builtin): Remove ALPHA_BUILTIN_THREAD_POINTER,\n\tALPHA_BUILTIN_SET_THREAD_POINTER.\n\t(code_for_builtin): Remove CODE_FOR_load_tp, CODE_FOR_set_tp.\n\t(alpha_init_builtins): Remove __builtin_thread_pointer,\n\t__builtin_set_thread_pointer machine-specific builtins.\n\t(alpha_expand_builtin_thread_pointer): Add hook function for\n\tTARGET_EXPAND_BUILTIN_THREAD_POINTER.\n\t(alpha_expand_builtin_set_thread_pointer): Add hook function for\n\tTARGET_EXPAND_BUILTIN_SET_THREAD_POINTER.\n\t(alpha_fold_builtin): Remove ALPHA_BUILTIN_THREAD_POINTER,\n\tALPHA_BUILTIN_SET_THREAD_POINTER cases.\n\t* config/arm/arm.md (get_thread_pointersi): New pattern.\n\t* config/arm/arm-protos.h (arm_load_tp): Add extern declaration.\n\t* config/arm/arm.c (arm_load_tp): Remove static.\n\t(arm_builtins): Remove ARM_BUILTIN_THREAD_POINTER.\n\t(arm_init_tls_builtins): Remove function.\n\t(arm_init_builtins): Remove call to arm_init_tls_builtins().\n\t(arm_expand_builtin): Remove ARM_BUILTIN_THREAD_POINTER case.\n\t* config/mips/mips.md (get_thread_pointer<mode>): New pattern.\n\t* config/mips/mips-protos.h (mips_expand_thread_pointer):\n\tAdd extern declaration.\n\t* config/mips/mips.c (mips_expand_thread_pointer):\n\tRenamed from mips_get_tp.\n\t(mips_get_tp): New stub calling mips_expand_thread_pointer.\n\t* config/s390/s390.c (s390_builtin,code_for_builtin_64,\n\tcode_for_builtin_31,s390_init_builtins,s390_expand_builtin): Remove.\n\t* config/s390/s390.md (get_tp_64,get_tp_31,set_tp_64,set_tp_31):\n\tRemove.\n\t(get_thread_pointer<mode>,set_thread_pointer<mode>):\n\tNew, adapted from removed patterns.\n\t* config/xtensa/xtensa.md (get_thread_pointersi):\n\tRenamed from load_tp.\n\t(set_thread_pointersi): Renamed from set_tp.\n\t* config/xtensa/xtensa.c (xtensa_legitimize_tls_address):\n\tChange gen_load_tp calls to gen_get_thread_pointersi.\n\t(xtensa_builtin): Remove XTENSA_BUILTIN_THREAD_POINTER and\n\tXTENSA_BUILTIN_SET_THREAD_POINTER.\n\t(xtensa_init_builtins): Remove __builtin_thread_pointer,\n\t__builtin_set_thread_pointer machine-specific builtins.\n\t(xtensa_fold_builtin): Remove XTENSA_BUILTIN_THREAD_POINTER,\n\tXTENSA_BUILTIN_SET_THREAD_POINTER cases.\n\t(xtensa_expand_builtin): Remove XTENSA_BUILTIN_THREAD_POINTER,\n\tXTENSA_BUILTIN_SET_THREAD_POINTER cases.\n\nFrom-SVN: r192364", "tree": {"sha": "21a7244b43175e5f9f9368c389ea7a5e40186615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21a7244b43175e5f9f9368c389ea7a5e40186615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f959607b40d11dc4a0636797feeee9adac9f8a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f959607b40d11dc4a0636797feeee9adac9f8a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f959607b40d11dc4a0636797feeee9adac9f8a02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f959607b40d11dc4a0636797feeee9adac9f8a02/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fdce8752b88cdc8b05cf09d90fec25468b12e6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fdce8752b88cdc8b05cf09d90fec25468b12e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fdce8752b88cdc8b05cf09d90fec25468b12e6f"}], "stats": {"total": 412, "additions": 180, "deletions": 232}, "files": [{"sha": "1919873b524def034e97fc54d1eb295d27d2c9b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -1,3 +1,65 @@\n+2012-10-11  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* builtins.c (expand_builtin_thread_pointer): New.\n+\t(expand_builtin_set_thread_pointer): New.\n+\t(expand_builtin): Add BUILT_IN_THREAD_POINTER,\n+\tBUILT_IN_SET_THREAD_POINTER expand cases.\n+\t* builtins.def (BUILT_IN_THREAD_POINTER):\n+\tNew __builtin_thread_pointer builtin.\n+\t(BUILT_IN_SET_THREAD_POINTER):\n+\tNew __builtin_set_thread_pointer builtin.\n+\t* optabs.def (get_thread_pointer,set_thread_pointer):\n+\tNew standard names.\n+\t* doc/md.texi (Standard Names): Document get_thread_pointer and\n+\tset_thread_pointer patterns.\n+\t* config/alpha/alpha.md (get_thread_pointerdi): Rename from load_tp.\n+\t(set_thread_pointerdi): Rename from set_tp.\n+\t* config/alpha/alpha.c (alpha_legitimize_address_1): Change\n+\tgen_load_tp calls to gen_get_thread_pointerdi.\n+\t(alpha_builtin): Remove ALPHA_BUILTIN_THREAD_POINTER,\n+\tALPHA_BUILTIN_SET_THREAD_POINTER.\n+\t(code_for_builtin): Remove CODE_FOR_load_tp, CODE_FOR_set_tp.\n+\t(alpha_init_builtins): Remove __builtin_thread_pointer,\n+\t__builtin_set_thread_pointer machine-specific builtins.\n+\t(alpha_expand_builtin_thread_pointer): Add hook function for\n+\tTARGET_EXPAND_BUILTIN_THREAD_POINTER.\n+\t(alpha_expand_builtin_set_thread_pointer): Add hook function for\n+\tTARGET_EXPAND_BUILTIN_SET_THREAD_POINTER.\n+\t(alpha_fold_builtin): Remove ALPHA_BUILTIN_THREAD_POINTER,\n+\tALPHA_BUILTIN_SET_THREAD_POINTER cases.\n+\t* config/arm/arm.md (get_thread_pointersi): New pattern.\n+\t* config/arm/arm-protos.h (arm_load_tp): Add extern declaration.\n+\t* config/arm/arm.c (arm_load_tp): Remove static.\n+\t(arm_builtins): Remove ARM_BUILTIN_THREAD_POINTER.\n+\t(arm_init_tls_builtins): Remove function.\n+\t(arm_init_builtins): Remove call to arm_init_tls_builtins().\n+\t(arm_expand_builtin): Remove ARM_BUILTIN_THREAD_POINTER case.\n+\t* config/mips/mips.md (get_thread_pointer<mode>): New pattern.\n+\t* config/mips/mips-protos.h (mips_expand_thread_pointer):\n+\tAdd extern declaration.\n+\t* config/mips/mips.c (mips_expand_thread_pointer):\n+\tRenamed from mips_get_tp.\n+\t(mips_get_tp): New stub calling mips_expand_thread_pointer.\n+\t* config/s390/s390.c (s390_builtin,code_for_builtin_64,\n+\tcode_for_builtin_31,s390_init_builtins,s390_expand_builtin): Remove.\n+\t* config/s390/s390.md (get_tp_64,get_tp_31,set_tp_64,set_tp_31):\n+\tRemove.\n+\t(get_thread_pointer<mode>,set_thread_pointer<mode>):\n+\tNew, adapted from removed patterns.\n+\t* config/xtensa/xtensa.md (get_thread_pointersi):\n+\tRenamed from load_tp.\n+\t(set_thread_pointersi): Renamed from set_tp.\n+\t* config/xtensa/xtensa.c (xtensa_legitimize_tls_address):\n+\tChange gen_load_tp calls to gen_get_thread_pointersi.\n+\t(xtensa_builtin): Remove XTENSA_BUILTIN_THREAD_POINTER and\n+\tXTENSA_BUILTIN_SET_THREAD_POINTER.\n+\t(xtensa_init_builtins): Remove __builtin_thread_pointer,\n+\t__builtin_set_thread_pointer machine-specific builtins.\n+\t(xtensa_fold_builtin): Remove XTENSA_BUILTIN_THREAD_POINTER,\n+\tXTENSA_BUILTIN_SET_THREAD_POINTER cases.\n+\t(xtensa_expand_builtin): Remove XTENSA_BUILTIN_THREAD_POINTER,\n+\tXTENSA_BUILTIN_SET_THREAD_POINTER cases.\n+\n 2012-10-11  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* doc/extend.texi (Vector Extensions): C++ improvements."}, {"sha": "fb8d83a14e9f3c1c411cb977c8fb2893486aa094", "filename": "gcc/builtins.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -5744,6 +5744,45 @@ expand_builtin_sync_synchronize (void)\n   expand_mem_thread_fence (MEMMODEL_SEQ_CST);\n }\n \n+static rtx\n+expand_builtin_thread_pointer (tree exp, rtx target)\n+{\n+  enum insn_code icode;\n+  if (!validate_arglist (exp, VOID_TYPE))\n+    return const0_rtx;\n+  icode = direct_optab_handler (get_thread_pointer_optab, Pmode);\n+  if (icode != CODE_FOR_nothing)\n+    {\n+      struct expand_operand op;\n+      if (!REG_P (target) || GET_MODE (target) != Pmode)\n+\ttarget = gen_reg_rtx (Pmode);\n+      create_output_operand (&op, target, Pmode);\n+      expand_insn (icode, 1, &op);\n+      return target;\n+    }\n+  error (\"__builtin_thread_pointer is not supported on this target\");\n+  return const0_rtx;\n+}\n+\n+static void\n+expand_builtin_set_thread_pointer (tree exp)\n+{\n+  enum insn_code icode;\n+  if (!validate_arglist (exp, POINTER_TYPE, VOID_TYPE))\n+    return;\n+  icode = direct_optab_handler (set_thread_pointer_optab, Pmode);\n+  if (icode != CODE_FOR_nothing)\n+    {\n+      struct expand_operand op;\n+      rtx val = expand_expr (CALL_EXPR_ARG (exp, 0), NULL_RTX,\n+\t\t\t     Pmode, EXPAND_NORMAL);      \n+      create_fixed_operand (&op, val);\n+      expand_insn (icode, 1, &op);\n+      return;\n+    }\n+  error (\"__builtin_set_thread_pointer is not supported on this target\");\n+}\n+\n \f\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n@@ -6809,6 +6848,13 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \tmaybe_emit_free_warning (exp);\n       break;\n \n+    case BUILT_IN_THREAD_POINTER:\n+      return expand_builtin_thread_pointer (exp, target);\n+\n+    case BUILT_IN_SET_THREAD_POINTER:\n+      expand_builtin_set_thread_pointer (exp);\n+      return const0_rtx;\n+\n     default:\t/* just do library call, if unknown builtin */\n       break;\n     }"}, {"sha": "177bf4963aab3be58049b45f6e5762e3f0edc1c6", "filename": "gcc/builtins.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -782,6 +782,17 @@ DEF_BUILTIN (BUILT_IN_PROFILE_FUNC_ENTER, \"__cyg_profile_func_enter\", BUILT_IN_N\n DEF_BUILTIN (BUILT_IN_PROFILE_FUNC_EXIT, \"__cyg_profile_func_exit\", BUILT_IN_NORMAL, BT_FN_VOID_PTR_PTR, BT_LAST,\n \t     false, false, false, ATTR_NULL, true, true)\n \n+/* TLS thread pointer related builtins.  */\n+DEF_BUILTIN (BUILT_IN_THREAD_POINTER, \"__builtin_thread_pointer\",\n+\t     BUILT_IN_NORMAL, BT_FN_PTR, BT_LAST,\n+\t     false, false, true, ATTR_CONST_NOTHROW_LIST, true,\n+\t     targetm.have_tls)\n+\n+DEF_BUILTIN (BUILT_IN_SET_THREAD_POINTER, \"__builtin_set_thread_pointer\",\n+\t     BUILT_IN_NORMAL, BT_FN_VOID_PTR, BT_LAST,\n+\t     false, false, true, ATTR_NOTHROW_LIST, true,\n+\t     targetm.have_tls)\n+\n /* TLS emulation.  */\n DEF_BUILTIN (BUILT_IN_EMUTLS_GET_ADDRESS, targetm.emutls.get_address,\n \t     BUILT_IN_NORMAL,"}, {"sha": "82135ffda3d5b9de1be7cc119441afe0ae243745", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -963,7 +963,7 @@ alpha_legitimize_address_1 (rtx x, rtx scratch, enum machine_mode mode)\n \t  scratch = gen_reg_rtx (Pmode);\n \t  dest = gen_reg_rtx (Pmode);\n \n-\t  emit_insn (gen_load_tp (tp));\n+\t  emit_insn (gen_get_thread_pointerdi (tp));\n \t  emit_insn (gen_rtx_SET (VOIDmode, scratch, eqv));\n \t  emit_insn (gen_adddi3 (dest, tp, scratch));\n \t  return dest;\n@@ -973,7 +973,7 @@ alpha_legitimize_address_1 (rtx x, rtx scratch, enum machine_mode mode)\n \t  eqv = gen_rtx_CONST (Pmode, eqv);\n \t  tp = gen_reg_rtx (Pmode);\n \n-\t  emit_insn (gen_load_tp (tp));\n+\t  emit_insn (gen_get_thread_pointerdi (tp));\n \t  if (alpha_tls_size == 32)\n \t    {\n \t      insn = gen_rtx_HIGH (Pmode, eqv);\n@@ -6328,8 +6328,6 @@ enum alpha_builtin\n   ALPHA_BUILTIN_AMASK,\n   ALPHA_BUILTIN_IMPLVER,\n   ALPHA_BUILTIN_RPCC,\n-  ALPHA_BUILTIN_THREAD_POINTER,\n-  ALPHA_BUILTIN_SET_THREAD_POINTER,\n   ALPHA_BUILTIN_ESTABLISH_VMS_CONDITION_HANDLER,\n   ALPHA_BUILTIN_REVERT_VMS_CONDITION_HANDLER,\n \n@@ -6385,8 +6383,6 @@ static enum insn_code const code_for_builtin[ALPHA_BUILTIN_max] = {\n   CODE_FOR_builtin_amask,\n   CODE_FOR_builtin_implver,\n   CODE_FOR_builtin_rpcc,\n-  CODE_FOR_load_tp,\n-  CODE_FOR_set_tp,\n   CODE_FOR_builtin_establish_vms_condition_handler,\n   CODE_FOR_builtin_revert_vms_condition_handler,\n \n@@ -6544,14 +6540,6 @@ alpha_init_builtins (void)\n \t\t\t\t    alpha_dimode_u, NULL_TREE);\n   alpha_add_builtins (two_arg_builtins, ARRAY_SIZE (two_arg_builtins), ftype);\n \n-  ftype = build_function_type_list (ptr_type_node, NULL_TREE);\n-  alpha_builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t\t  ALPHA_BUILTIN_THREAD_POINTER, ECF_NOTHROW);\n-\n-  ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n-  alpha_builtin_function (\"__builtin_set_thread_pointer\", ftype,\n-\t\t\t  ALPHA_BUILTIN_SET_THREAD_POINTER, ECF_NOTHROW);\n-\n   if (TARGET_ABI_OPEN_VMS)\n     {\n       ftype = build_function_type_list (ptr_type_node, ptr_type_node,\n@@ -7088,8 +7076,6 @@ alpha_fold_builtin (tree fndecl, int n_args, tree *op,\n     case ALPHA_BUILTIN_AMASK:\n     case ALPHA_BUILTIN_IMPLVER:\n     case ALPHA_BUILTIN_RPCC:\n-    case ALPHA_BUILTIN_THREAD_POINTER:\n-    case ALPHA_BUILTIN_SET_THREAD_POINTER:\n       /* None of these are foldable at compile-time.  */\n     default:\n       return NULL;"}, {"sha": "cad810c461bded9259827dc572ced65842097b49", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -4365,7 +4365,7 @@\n ;; For userland, we load the thread pointer from the TCB.\n ;; For the kernel, we load the per-cpu private value.\n \n-(define_insn \"load_tp\"\n+(define_insn \"get_thread_pointerdi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=v\")\n \t(unspec:DI [(const_int 0)] UNSPEC_TP))]\n   \"TARGET_ABI_OSF\"\n@@ -4382,7 +4382,7 @@\n ;; quantity for CSE, we have to use a volatile unspec, and then there's\n ;; not much point in creating an R16_REG register class.\n \n-(define_expand \"set_tp\"\n+(define_expand \"set_thread_pointerdi\"\n   [(set (reg:DI 16) (match_operand:DI 0 \"input_operand\" \"\"))\n    (unspec_volatile [(reg:DI 16)] UNSPECV_SET_TP)]\n   \"TARGET_ABI_OSF\""}, {"sha": "010e7fc1c158de4e63c12786b45484e082412531", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -163,6 +163,7 @@ extern int arm_attr_length_push_multi(rtx, rtx);\n extern void arm_expand_compare_and_swap (rtx op[]);\n extern void arm_split_compare_and_swap (rtx op[]);\n extern void arm_split_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx, rtx);\n+extern rtx arm_load_tp (rtx);\n \n #if defined TREE_CODE\n extern void arm_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);"}, {"sha": "866385ccabbc02629a3e2e31ac25d0cbf85bc941", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -6279,7 +6279,7 @@ get_tls_get_addr (void)\n   return tls_get_addr_libfunc;\n }\n \n-static rtx\n+rtx\n arm_load_tp (rtx target)\n {\n   if (!target)\n@@ -19155,8 +19155,6 @@ enum arm_builtins\n \n   ARM_BUILTIN_WMERGE,\n \n-  ARM_BUILTIN_THREAD_POINTER,\n-\n   ARM_BUILTIN_NEON_BASE,\n \n   ARM_BUILTIN_MAX = ARM_BUILTIN_NEON_BASE + ARRAY_SIZE (neon_builtin_data)\n@@ -20195,20 +20193,6 @@ arm_init_iwmmxt_builtins (void)\n #undef iwmmx2_mbuiltin\n }\n \n-static void\n-arm_init_tls_builtins (void)\n-{\n-  tree ftype, decl;\n-\n-  ftype = build_function_type (ptr_type_node, void_list_node);\n-  decl = add_builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t\t       ARM_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\t       NULL, NULL_TREE);\n-  TREE_NOTHROW (decl) = 1;\n-  TREE_READONLY (decl) = 1;\n-  arm_builtin_decls[ARM_BUILTIN_THREAD_POINTER] = decl;\n-}\n-\n static void\n arm_init_fp16_builtins (void)\n {\n@@ -20221,8 +20205,6 @@ arm_init_fp16_builtins (void)\n static void\n arm_init_builtins (void)\n {\n-  arm_init_tls_builtins ();\n-\n   if (TARGET_REALLY_IWMMXT)\n     arm_init_iwmmxt_builtins ();\n \n@@ -21334,9 +21316,6 @@ arm_expand_builtin (tree exp,\n \t}\n       return arm_expand_binop_builtin (icode, exp, target);\n \n-    case ARM_BUILTIN_THREAD_POINTER:\n-      return arm_load_tp (target);\n-\n     default:\n       break;\n     }"}, {"sha": "201cbdac44c6097693c4c843af5852457825375e", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -11501,6 +11501,15 @@\n \"\"\n )\n \n+(define_expand \"get_thread_pointersi\"\n+  [(match_operand:SI 0 \"s_register_operand\" \"=r\")]\n+ \"\"\n+ \"\n+ {\n+   arm_load_tp (operands[0]);\n+   DONE;\n+ }\")\n+\n ;; Load the load/store multiple patterns\n (include \"ldmstm.md\")\n "}, {"sha": "f2c5c0d182333241a7d95aea22f704979d56233b", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -351,6 +351,8 @@ extern void mips_expand_vec_reduc (rtx, rtx, rtx (*)(rtx, rtx, rtx));\n extern void mips_expand_vec_minmax (rtx, rtx, rtx,\n \t\t\t\t    rtx (*) (rtx, rtx, rtx), bool);\n \n+extern rtx mips_expand_thread_pointer (rtx);\n+\n extern bool mips_eh_uses (unsigned int);\n extern bool mips_epilogue_uses (unsigned int);\n extern void mips_final_prescan_insn (rtx, rtx *, int);"}, {"sha": "bbd0fc429dc909473b811652f799ab185644874c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -2884,12 +2884,11 @@ mips_call_tls_get_addr (rtx sym, enum mips_symbol_type type, rtx v0)\n \n /* Return a pseudo register that contains the current thread pointer.  */\n \n-static rtx\n-mips_get_tp (void)\n+rtx\n+mips_expand_thread_pointer (rtx tp)\n {\n-  rtx tp, fn;\n+  rtx fn;\n \n-  tp = gen_reg_rtx (Pmode);\n   if (TARGET_MIPS16)\n     {\n       mips_need_mips16_rdhwr_p = true;\n@@ -2904,6 +2903,12 @@ mips_get_tp (void)\n   return tp;\n }\n \n+static rtx\n+mips_get_tp (void)\n+{\n+  return mips_expand_thread_pointer (gen_reg_rtx (Pmode));\n+}\n+\n /* Generate the code to access LOC, a thread-local SYMBOL_REF, and return\n    its address.  The return value will be both a valid address and a valid\n    SET_SRC (either a REG or a LO_SUM).  */"}, {"sha": "c7dd87512eec8c8dcf818a8815e178a1b49b3d30", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -6880,6 +6880,16 @@\n   [(set_attr \"type\" \"call\")\n    (set_attr \"length\" \"12\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Named pattern for expanding thread pointer reference.\n+(define_expand \"get_thread_pointer<mode>\"\n+  [(match_operand:P 0 \"register_operand\" \"=d\")]\n+  \"HAVE_AS_TLS\"\n+{\n+  mips_expand_thread_pointer (operands[0]);\n+  DONE;\n+})\n+\n \f\n ;; Synchronization instructions.\n "}, {"sha": "4ce1dc9542c4b4756bf8ce1fa725b04f43c12f8b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -9294,132 +9294,6 @@ s390_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   return build_va_arg_indirect_ref (addr);\n }\n \n-\n-/* Builtins.  */\n-\n-enum s390_builtin\n-{\n-  S390_BUILTIN_THREAD_POINTER,\n-  S390_BUILTIN_SET_THREAD_POINTER,\n-\n-  S390_BUILTIN_max\n-};\n-\n-static enum insn_code const code_for_builtin_64[S390_BUILTIN_max] = {\n-  CODE_FOR_get_tp_64,\n-  CODE_FOR_set_tp_64\n-};\n-\n-static enum insn_code const code_for_builtin_31[S390_BUILTIN_max] = {\n-  CODE_FOR_get_tp_31,\n-  CODE_FOR_set_tp_31\n-};\n-\n-static void\n-s390_init_builtins (void)\n-{\n-  tree ftype;\n-\n-  ftype = build_function_type_list (ptr_type_node, NULL_TREE);\n-  add_builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t\tS390_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\tNULL, NULL_TREE);\n-\n-  ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n-  add_builtin_function (\"__builtin_set_thread_pointer\", ftype,\n-\t\t\tS390_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\tNULL, NULL_TREE);\n-}\n-\n-/* Expand an expression EXP that calls a built-in function,\n-   with result going to TARGET if that's convenient\n-   (and in mode MODE if that's convenient).\n-   SUBTARGET may be used as the target for computing one of EXP's operands.\n-   IGNORE is nonzero if the value is to be ignored.  */\n-\n-static rtx\n-s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t     int ignore ATTRIBUTE_UNUSED)\n-{\n-#define MAX_ARGS 2\n-\n-  enum insn_code const *code_for_builtin =\n-    TARGET_64BIT ? code_for_builtin_64 : code_for_builtin_31;\n-\n-  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n-  enum insn_code icode;\n-  rtx op[MAX_ARGS], pat;\n-  int arity;\n-  bool nonvoid;\n-  tree arg;\n-  call_expr_arg_iterator iter;\n-\n-  if (fcode >= S390_BUILTIN_max)\n-    internal_error (\"bad builtin fcode\");\n-  icode = code_for_builtin[fcode];\n-  if (icode == 0)\n-    internal_error (\"bad builtin fcode\");\n-\n-  nonvoid = TREE_TYPE (TREE_TYPE (fndecl)) != void_type_node;\n-\n-  arity = 0;\n-  FOR_EACH_CALL_EXPR_ARG (arg, iter, exp)\n-    {\n-      const struct insn_operand_data *insn_op;\n-\n-      if (arg == error_mark_node)\n-\treturn NULL_RTX;\n-      if (arity > MAX_ARGS)\n-\treturn NULL_RTX;\n-\n-      insn_op = &insn_data[icode].operand[arity + nonvoid];\n-\n-      op[arity] = expand_expr (arg, NULL_RTX, insn_op->mode, EXPAND_NORMAL);\n-\n-      if (!(*insn_op->predicate) (op[arity], insn_op->mode))\n-\top[arity] = copy_to_mode_reg (insn_op->mode, op[arity]);\n-      arity++;\n-    }\n-\n-  if (nonvoid)\n-    {\n-      enum machine_mode tmode = insn_data[icode].operand[0].mode;\n-      if (!target\n-\t  || GET_MODE (target) != tmode\n-\t  || !(*insn_data[icode].operand[0].predicate) (target, tmode))\n-\ttarget = gen_reg_rtx (tmode);\n-    }\n-\n-  switch (arity)\n-    {\n-    case 0:\n-      pat = GEN_FCN (icode) (target);\n-      break;\n-    case 1:\n-      if (nonvoid)\n-        pat = GEN_FCN (icode) (target, op[0]);\n-      else\n-\tpat = GEN_FCN (icode) (op[0]);\n-      break;\n-    case 2:\n-      pat = GEN_FCN (icode) (target, op[0], op[1]);\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n-  if (!pat)\n-    return NULL_RTX;\n-  emit_insn (pat);\n-\n-  if (nonvoid)\n-    return target;\n-  else\n-    return const0_rtx;\n-}\n-\n-\n /* Output assembly code for the trampoline template to\n    stdio stream FILE.\n \n@@ -11075,11 +10949,6 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY s390_return_in_memory\n \n-#undef  TARGET_INIT_BUILTINS\n-#define TARGET_INIT_BUILTINS s390_init_builtins\n-#undef  TARGET_EXPAND_BUILTIN\n-#define TARGET_EXPAND_BUILTIN s390_expand_builtin\n-\n #undef TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n #define TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA s390_output_addr_const_extra\n "}, {"sha": "efe1a470e8d3abdd077a3464d9f4ca2e18fcd586", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -8710,26 +8710,15 @@\n ;;- Thread-local storage support.\n ;;\n \n-(define_expand \"get_tp_64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\") (reg:DI TP_REGNUM))]\n-  \"TARGET_64BIT\"\n-  \"\")\n-\n-(define_expand \"get_tp_31\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\") (reg:SI TP_REGNUM))]\n-  \"!TARGET_64BIT\"\n-  \"\")\n-\n-(define_expand \"set_tp_64\"\n-  [(set (reg:DI TP_REGNUM) (match_operand:DI 0 \"nonimmediate_operand\" \"\"))\n-   (set (reg:DI TP_REGNUM) (unspec_volatile:DI [(reg:DI TP_REGNUM)] UNSPECV_SET_TP))]\n-  \"TARGET_64BIT\"\n+(define_expand \"get_thread_pointer<mode>\"\n+  [(set (match_operand:P 0 \"nonimmediate_operand\" \"\") (reg:P TP_REGNUM))]\n+  \"\"\n   \"\")\n \n-(define_expand \"set_tp_31\"\n-  [(set (reg:SI TP_REGNUM) (match_operand:SI 0 \"nonimmediate_operand\" \"\"))\n-   (set (reg:SI TP_REGNUM) (unspec_volatile:SI [(reg:SI TP_REGNUM)] UNSPECV_SET_TP))]\n-  \"!TARGET_64BIT\"\n+(define_expand \"set_thread_pointer<mode>\"\n+  [(set (reg:P TP_REGNUM) (match_operand:P 0 \"nonimmediate_operand\" \"\"))\n+   (set (reg:P TP_REGNUM) (unspec_volatile:P [(reg:P TP_REGNUM)] UNSPECV_SET_TP))]\n+  \"\"\n   \"\")\n \n (define_insn \"*set_tp\""}, {"sha": "451a074da2a94527b216d79d86d9696d826cc41d", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -1899,7 +1899,7 @@ xtensa_legitimize_tls_address (rtx x)\n     case TLS_MODEL_INITIAL_EXEC:\n     case TLS_MODEL_LOCAL_EXEC:\n       tp = gen_reg_rtx (SImode);\n-      emit_insn (gen_load_tp (tp));\n+      emit_insn (gen_get_thread_pointersi (tp));\n       addend = force_reg (SImode, gen_sym_TPOFF (x));\n       emit_insn (gen_addsi3 (dest, tp, addend));\n       break;\n@@ -3076,8 +3076,6 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n enum xtensa_builtin\n {\n   XTENSA_BUILTIN_UMULSIDI3,\n-  XTENSA_BUILTIN_THREAD_POINTER,\n-  XTENSA_BUILTIN_SET_THREAD_POINTER,\n   XTENSA_BUILTIN_max\n };\n \n@@ -3096,23 +3094,6 @@ xtensa_init_builtins (void)\n \t\t\t       \"__umulsidi3\", NULL_TREE);\n   TREE_NOTHROW (decl) = 1;\n   TREE_READONLY (decl) = 1;\n-\n-  if (TARGET_THREADPTR)\n-    {\n-      ftype = build_function_type_list (ptr_type_node, NULL_TREE);\n-      decl = add_builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t\t\t   XTENSA_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\t\t   NULL, NULL_TREE);\n-      TREE_READONLY (decl) = 1;\n-      TREE_NOTHROW (decl) = 1;\n-\n-      ftype = build_function_type_list (void_type_node, ptr_type_node,\n-\t\t\t\t\tNULL_TREE);\n-      decl = add_builtin_function (\"__builtin_set_thread_pointer\", ftype,\n-\t\t\t\t   XTENSA_BUILTIN_SET_THREAD_POINTER,\n-\t\t\t\t   BUILT_IN_MD, NULL, NULL_TREE);\n-      TREE_NOTHROW (decl) = 1;\n-    }\n }\n \n \n@@ -3135,10 +3116,6 @@ xtensa_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n \t\t\t    fold_convert (unsigned_intDI_type_node, arg1));\n       break;\n \n-    case XTENSA_BUILTIN_THREAD_POINTER:\n-    case XTENSA_BUILTIN_SET_THREAD_POINTER:\n-      break;\n-\n     default:\n       internal_error (\"bad builtin code\");\n       break;\n@@ -3166,19 +3143,6 @@ xtensa_expand_builtin (tree exp, rtx target,\n \t implement it.  If not, just call the function.  */\n       return expand_call (exp, target, ignore);\n \n-    case XTENSA_BUILTIN_THREAD_POINTER:\n-      if (!target || !register_operand (target, Pmode))\n-\ttarget = gen_reg_rtx (Pmode);\n-      emit_insn (gen_load_tp (target));\n-      return target;\n-\n-    case XTENSA_BUILTIN_SET_THREAD_POINTER:\n-      arg = expand_normal (CALL_EXPR_ARG (exp, 0));\n-      if (!register_operand (arg, Pmode))\n-\targ = copy_to_mode_reg (Pmode, arg);\n-      emit_insn (gen_set_tp (arg));\n-      return const0_rtx;\n-\n     default:\n       internal_error (\"bad builtin code\");\n     }"}, {"sha": "b87f08988ea6a3bfecd56f26ec25301a37f82be4", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -1714,7 +1714,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"load_tp\"\n+(define_insn \"get_thread_pointersi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(unspec:SI [(const_int 0)] UNSPEC_TP))]\n   \"TARGET_THREADPTR\"\n@@ -1723,7 +1723,7 @@\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n \n-(define_insn \"set_tp\"\n+(define_insn \"set_thread_pointersi\"\n   [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")]\n \t\t    UNSPECV_SET_TP)]\n   \"TARGET_THREADPTR\""}, {"sha": "f17d55e292c81836a364e303a115aa376e24b756", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -6133,6 +6133,18 @@ If this pattern is not specified, all memory models except\n @code{__ATOMIC_RELAXED} will result in issuing a @code{sync_synchronize}\n barrier pattern.\n \n+@cindex @code{get_thread_pointer@var{mode}} instruction pattern\n+@cindex @code{set_thread_pointer@var{mode}} instruction pattern\n+@item @samp{get_thread_pointer@var{mode}}\n+@itemx @samp{set_thread_pointer@var{mode}}\n+These patterns emit code that reads/sets the TLS thread pointer. Currently,\n+these are only needed if the target needs to support the\n+@code{__builtin_thread_pointer} and @code{__builtin_set_thread_pointer}\n+builtins.\n+\n+The get/set patterns have a single output/input operand respectively,\n+with @var{mode} intended to be @code{Pmode}.\n+\n @cindex @code{stack_protect_set} instruction pattern\n @item @samp{stack_protect_set}\n "}, {"sha": "b483b0274e7c4804b51e0fe1cb51e37eb02138b3", "filename": "gcc/optabs.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f959607b40d11dc4a0636797feeee9adac9f8a02/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=f959607b40d11dc4a0636797feeee9adac9f8a02", "patch": "@@ -306,3 +306,6 @@ OPTAB_D (atomic_sub_fetch_optab, \"atomic_sub_fetch$I$a\")\n OPTAB_D (atomic_sub_optab, \"atomic_sub$I$a\")\n OPTAB_D (atomic_xor_fetch_optab, \"atomic_xor_fetch$I$a\")\n OPTAB_D (atomic_xor_optab, \"atomic_xor$I$a\")\n+\n+OPTAB_D (get_thread_pointer_optab, \"get_thread_pointer$I$a\")\n+OPTAB_D (set_thread_pointer_optab, \"set_thread_pointer$I$a\")"}]}