{"sha": "3204b9cd43a75f23985533f14c6e1ff40e92c7db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIwNGI5Y2Q0M2E3NWYyMzk4NTUzM2YxNGM2ZTFmZjQwZTkyYzdkYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-16T09:47:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-16T09:47:36Z"}, "message": "[multiple changes]\n\n2009-04-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Map_Formal_Package_Entities): renamed from Map_Entities\n\tand made global, to be used when installing parents of a child\n\tinstance, to provide mappings for entities declared in formal packages\n\tof ancestor units. Now called from Install_Formal_Packages.\n\n2009-04-16  Doug Rupp  <rupp@adacore.com>\n\n\t* s-taskin.adb (Initialize_ATCB): Initialize Debug_Events with others\n\tnotation for clarity.\n\n\t* s-taprop-vxworks.adb, s-taprop-tru64.adb, s-taprop-vms.adb,\n\ts-taprop-mingw.adb, s-taprop-linux.adb, s-taprop-solaris.adb,\n\ts-taprop-irix.adb, s-taprop-hpux-dce.adb, s-taprop-posix.adb\n\t(Initialize): Initialize Known_Tasks with Environment task.\n\n\t* s-taskin.ads (Task_States): Move new states to end for the sake of\n\tGDB compatibility.\n\n\t* s-tassta.adb (Task_Wrapper): Fix comment about Enter_Task.\n\nFrom-SVN: r146158", "tree": {"sha": "062e0ba09344455dcff99935705e0775be767d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/062e0ba09344455dcff99935705e0775be767d7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3204b9cd43a75f23985533f14c6e1ff40e92c7db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3204b9cd43a75f23985533f14c6e1ff40e92c7db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3204b9cd43a75f23985533f14c6e1ff40e92c7db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3204b9cd43a75f23985533f14c6e1ff40e92c7db/comments", "author": null, "committer": null, "parents": [{"sha": "f17f3601670ddeff49783fb6d10e41a555695b37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17f3601670ddeff49783fb6d10e41a555695b37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17f3601670ddeff49783fb6d10e41a555695b37"}], "stats": {"total": 340, "additions": 233, "deletions": 107}, "files": [{"sha": "7748446d7d8b512c98583bd8b64cff0d51fabcb8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -1,3 +1,25 @@\n+2009-04-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Map_Formal_Package_Entities): renamed from Map_Entities\n+\tand made global, to be used when installing parents of a child\n+\tinstance, to provide mappings for entities declared in formal packages\n+\tof ancestor units. Now called from Install_Formal_Packages.\n+\n+2009-04-16  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-taskin.adb (Initialize_ATCB): Initialize Debug_Events with others\n+\tnotation for clarity.\n+\n+\t* s-taprop-vxworks.adb, s-taprop-tru64.adb, s-taprop-vms.adb,\n+\ts-taprop-mingw.adb, s-taprop-linux.adb, s-taprop-solaris.adb,\n+\ts-taprop-irix.adb, s-taprop-hpux-dce.adb, s-taprop-posix.adb\n+\t(Initialize): Initialize Known_Tasks with Environment task.\n+\n+\t* s-taskin.ads (Task_States): Move new states to end for the sake of\n+\tGDB compatibility.\n+\n+\t* s-tassta.adb (Task_Wrapper): Fix comment about Enter_Task.\n+\n 2009-04-16  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch9.adb (Expand_N_Protected_Type_Declaration): If a protected"}, {"sha": "6288af5a776bb03ba5f2cb50c72784ddacef514d", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -1218,6 +1218,12 @@ package body System.Task_Primitives.Operations is\n \n       Specific.Initialize (Environment_Task);\n \n+      --  Make environment task known here because it doesn't go through\n+      --  Activate_Tasks, which does it for all other tasks.\n+\n+      Known_Tasks (Known_Tasks'First) := Environment_Task;\n+      Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n+\n       Enter_Task (Environment_Task);\n \n       --  Install the abort-signal handler"}, {"sha": "2d38f6e4a5cdc79b94c737fdcb07960489cd86c3", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -1303,6 +1303,12 @@ package body System.Task_Primitives.Operations is\n \n       Specific.Initialize (Environment_Task);\n \n+      --  Make environment task known here because it doesn't go through\n+      --  Activate_Tasks, which does it for all other tasks.\n+\n+      Known_Tasks (Known_Tasks'First) := Environment_Task;\n+      Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n+\n       Enter_Task (Environment_Task);\n \n       --  Prepare the set of signals that should unblocked in all tasks"}, {"sha": "aebfcb65383040b88bd5c5a38200579cd46bf355", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -1244,6 +1244,12 @@ package body System.Task_Primitives.Operations is\n            Alternate_Stack'Address;\n       end if;\n \n+      --  Make environment task known here because it doesn't go through\n+      --  Activate_Tasks, which does it for all other tasks.\n+\n+      Known_Tasks (Known_Tasks'First) := Environment_Task;\n+      Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n+\n       Enter_Task (Environment_Task);\n \n       --  Install the abort-signal handler"}, {"sha": "cb51841a54d2886d262825537caefb84fc038e06", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -1069,6 +1069,13 @@ package body System.Task_Primitives.Operations is\n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n \n       Environment_Task.Common.LL.Thread := GetCurrentThread;\n+\n+      --  Make environment task known here because it doesn't go through\n+      --  Activate_Tasks, which does it for all other tasks.\n+\n+      Known_Tasks (Known_Tasks'First) := Environment_Task;\n+      Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n+\n       Enter_Task (Environment_Task);\n    end Initialize;\n "}, {"sha": "d87b1e670c26e80a679b701faf68f1b618d5c0a1", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -1423,6 +1423,12 @@ package body System.Task_Primitives.Operations is\n            Alternate_Stack'Address;\n       end if;\n \n+      --  Make environment task known here because it doesn't go through\n+      --  Activate_Tasks, which does it for all other tasks.\n+\n+      Known_Tasks (Known_Tasks'First) := Environment_Task;\n+      Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n+\n       Enter_Task (Environment_Task);\n \n       --  Install the abort-signal handler"}, {"sha": "795750bed85bf1a2824b5005df0a0fd3353cd4f8", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -479,6 +479,12 @@ package body System.Task_Primitives.Operations is\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n \n+      --  Make environment task known here because it doesn't go through\n+      --  Activate_Tasks, which does it for all other tasks.\n+\n+      Known_Tasks (Known_Tasks'First) := Environment_Task;\n+      Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n+\n       Enter_Task (Environment_Task);\n \n       --  Install the abort-signal handler"}, {"sha": "4c55c58a0a488e57542611084ebf33911c0654de", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -1332,6 +1332,12 @@ package body System.Task_Primitives.Operations is\n \n       Specific.Initialize (Environment_Task);\n \n+      --  Make environment task known here because it doesn't go through\n+      --  Activate_Tasks, which does it for all other tasks.\n+\n+      Known_Tasks (Known_Tasks'First) := Environment_Task;\n+      Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n+\n       Enter_Task (Environment_Task);\n \n       --  Install the abort-signal handler"}, {"sha": "01a77d6ff3a57ab0e7b9dafadebce494e1e8649c", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -1264,6 +1264,12 @@ package body System.Task_Primitives.Operations is\n         0                  --  False, we don't have the std TCB prolog\n        );\n \n+      --  Make environment task known here because it doesn't go through\n+      --  Activate_Tasks, which does it for all other tasks.\n+\n+      Known_Tasks (Known_Tasks'First) := Environment_Task;\n+      Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n+\n       Enter_Task (Environment_Task);\n    end Initialize;\n "}, {"sha": "7f823ac0c45ebe97ab32003cd7227a057843d567", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -1383,6 +1383,12 @@ package body System.Task_Primitives.Operations is\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n \n+      --  Make environment task known here because it doesn't go through\n+      --  Activate_Tasks, which does it for all other tasks.\n+\n+      Known_Tasks (Known_Tasks'First) := Environment_Task;\n+      Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n+\n       Enter_Task (Environment_Task);\n    end Initialize;\n "}, {"sha": "ba5ef095345a2f8148506447c6aeb153105b2e86", "filename": "gcc/ada/s-taskin.adb", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -114,25 +114,25 @@ package body System.Tasking is\n          return;\n       end if;\n \n-      T.Common.Parent := Parent;\n-      T.Common.Base_Priority := Base_Priority;\n-      T.Common.Current_Priority := 0;\n+      --  Wouldn't the following be better done using an assignment of an\n+      --  aggregate so that we could be sure no components were forgotten???\n+\n+      T.Common.Parent                   := Parent;\n+      T.Common.Base_Priority            := Base_Priority;\n+      T.Common.Current_Priority         := 0;\n       T.Common.Protected_Action_Nesting := 0;\n-      T.Common.Call := null;\n-      T.Common.Task_Arg := Task_Arg;\n-      T.Common.Task_Entry_Point := Task_Entry_Point;\n-      T.Common.Activator := Self_ID;\n-      T.Common.Wait_Count := 0;\n-      T.Common.Elaborated := Elaborated;\n-      T.Common.Activation_Failed := False;\n-      T.Common.Task_Info := Task_Info;\n+      T.Common.Call                     := null;\n+      T.Common.Task_Arg                 := Task_Arg;\n+      T.Common.Task_Entry_Point         := Task_Entry_Point;\n+      T.Common.Activator                := Self_ID;\n+      T.Common.Wait_Count               := 0;\n+      T.Common.Elaborated               := Elaborated;\n+      T.Common.Activation_Failed        := False;\n+      T.Common.Task_Info                := Task_Info;\n       T.Common.Global_Task_Lock_Nesting := 0;\n-      T.Common.Fall_Back_Handler := null;\n-      T.Common.Specific_Handler  := null;\n-      T.Common.Debug_Events :=\n-        (False, False, False, False, False, False, False, False,\n-         False, False, False, False, False, False, False, False);\n-      --  Wouldn't (others => False) be clearer ???\n+      T.Common.Fall_Back_Handler        := null;\n+      T.Common.Specific_Handler         := null;\n+      T.Common.Debug_Events             := (others => False);\n \n       if T.Common.Parent = null then\n "}, {"sha": "5012abec55511df8f27517435463a35ee5a161fc", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -131,8 +131,9 @@ package System.Tasking is\n       --  TCB initialized but not task has not been created.\n       --  It cannot be executing.\n \n-      Activating,\n-      --  Task has been created and is being made Runnable.\n+--    Activating,\n+--    --  ??? Temporarily at end of list for GDB compatibility\n+--    --  Task has been created and is being made Runnable.\n \n       --  Active states\n       --  For all states from here down, the task has been activated.\n@@ -156,8 +157,9 @@ package System.Tasking is\n       Acceptor_Sleep,\n       --  Task is waiting on an accept or select with terminate\n \n-      Acceptor_Delay_Sleep,\n-      --  Task is waiting on an selective wait statement\n+--    Acceptor_Delay_Sleep,\n+--    --  ??? Temporarily at end of list for GDB compatibility\n+--    --  Task is waiting on an selective wait statement\n \n       Entry_Caller_Sleep,\n       --  Task is waiting on an entry call\n@@ -193,9 +195,15 @@ package System.Tasking is\n       Asynchronous_Hold,\n       --  The task has been held by Asynchronous_Task_Control.Hold_Task\n \n-      Interrupt_Server_Blocked_On_Event_Flag\n+      Interrupt_Server_Blocked_On_Event_Flag,\n       --  The task has been blocked on a system call waiting for a\n       --  completion event/signal to occur.\n+\n+      Activating,\n+      --  Task has been created and is being made Runnable.\n+\n+      Acceptor_Delay_Sleep\n+      --  Task is waiting on an selective wait statement\n      );\n \n    type Call_Modes is"}, {"sha": "0dd9ac3316f0afd460861704ae6ba1f5b6b2e82e", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -1111,8 +1111,7 @@ package body System.Tasking.Stages is\n       Stack_Guard (Self_ID, True);\n \n       --  Initialize low-level TCB components, that cannot be initialized by\n-      --  the creator. Enter_Task sets Self_ID.Known_Tasks_Index and also\n-      --  Self_ID.LL.Thread\n+      --  the creator. Enter_Task sets Self_ID.LL.Thread\n \n       Enter_Task (Self_ID);\n "}, {"sha": "808723177b3583e535f2f55433ad691ddf94acc7", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 125, "deletions": 83, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204b9cd43a75f23985533f14c6e1ff40e92c7db/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=3204b9cd43a75f23985533f14c6e1ff40e92c7db", "patch": "@@ -681,6 +681,19 @@ package body Sem_Ch12 is\n    --  this field overlaps Entity, which is fine, because the whole point is\n    --  that we don't need or want the normal Entity field in this situation.\n \n+   procedure Map_Formal_Package_Entities (Form : Entity_Id; Act : Entity_Id);\n+   --  Within the generic part, entities in the formal package are\n+   --  visible. To validate subsequent type declarations, indicate\n+   --  the correspondence between the entities in the analyzed formal,\n+   --  and the entities in  the actual package. There are three packages\n+   --  involved in the instantiation of a formal package: the parent\n+   --  generic P1 which appears in the generic declaration, the fake\n+   --  instantiation P2 which appears in the analyzed generic, and whose\n+   --  visible entities may be used in subsequent formals, and the actual\n+   --  P3 in the instance. To validate subsequent formals, me indicate\n+   --  that the entities in P2 are mapped into those of P3. The mapping of\n+   --  entities has to be done recursively for nested packages.\n+\n    procedure Move_Freeze_Nodes\n      (Out_Of : Entity_Id;\n       After  : Node_Id;\n@@ -2952,6 +2965,15 @@ package body Sem_Ch12 is\n \n       Init_Env;\n       Env_Installed := True;\n+\n+      --  Reset renaming map for formal types. The mapping is established\n+      --  when analyzing the generic associations, but some mappings are\n+      --  inherited from formal packages of parent units, and these are\n+      --  constructed when the parents are installed.\n+\n+      Generic_Renamings.Set_Last (0);\n+      Generic_Renamings_HTable.Reset;\n+\n       Check_Generic_Child_Unit (Gen_Id, Parent_Installed);\n       Gen_Unit := Entity (Gen_Id);\n \n@@ -3053,9 +3075,6 @@ package body Sem_Ch12 is\n          --  validate an actual package, the instantiation environment is that\n          --  of the enclosing instance.\n \n-         Generic_Renamings.Set_Last (0);\n-         Generic_Renamings_HTable.Reset;\n-\n          Create_Instantiation_Source (N, Gen_Unit, False, S_Adjustment);\n \n          --  Copy original generic tree, to produce text for instantiation\n@@ -7135,10 +7154,21 @@ package body Sem_Ch12 is\n    -----------------------------\n \n    procedure Install_Formal_Packages (Par : Entity_Id) is\n-      E : Entity_Id;\n+      E     : Entity_Id;\n+      Gen   : Entity_Id;\n+      Gen_E : Entity_Id := Empty;\n \n    begin\n       E := First_Entity (Par);\n+\n+      --  In we are installing an instance parent, locate the formal packages\n+      --  of its generic parent.\n+\n+      if Is_Generic_Instance (Par) then\n+         Gen   := Generic_Parent (Specification (Unit_Declaration_Node (Par)));\n+         Gen_E := First_Entity (Gen);\n+      end if;\n+\n       while Present (E) loop\n          if Ekind (E) = E_Package\n            and then Nkind (Parent (E)) = N_Package_Renaming_Declaration\n@@ -7159,10 +7189,26 @@ package body Sem_Ch12 is\n             then\n                Check_Generic_Actuals (Renamed_Object (E), True);\n                Set_Is_Hidden (E, False);\n+\n+               --  Find formal package in generic unit that corresponds to\n+               --  (instance of) formal package in instance.\n+\n+               while Present (Gen_E)\n+                 and then  Chars (Gen_E) /= Chars (E)\n+               loop\n+                  Next_Entity (Gen_E);\n+               end loop;\n+\n+               if Present (Gen_E) then\n+                  Map_Formal_Package_Entities (Gen_E, E);\n+               end if;\n             end if;\n          end if;\n \n          Next_Entity (E);\n+         if Present (Gen_E) then\n+            Next_Entity (Gen_E);\n+         end if;\n       end loop;\n    end Install_Formal_Packages;\n \n@@ -7397,19 +7443,6 @@ package body Sem_Ch12 is\n       --  original generic ancestor. In that case, we recognize that the\n       --  ultimate ancestor is the same by examining names and scopes.\n \n-      procedure Map_Entities (Form : Entity_Id; Act : Entity_Id);\n-      --  Within the generic part, entities in the formal package are\n-      --  visible. To validate subsequent type declarations, indicate\n-      --  the correspondence between the entities in the analyzed formal,\n-      --  and the entities in  the actual package. There are three packages\n-      --  involved in the instantiation of a formal package: the parent\n-      --  generic P1 which appears in the generic declaration, the fake\n-      --  instantiation P2 which appears in the analyzed generic, and whose\n-      --  visible entities may be used in subsequent formals, and the actual\n-      --  P3 in the instance. To validate subsequent formals, me indicate\n-      --  that the entities in P2 are mapped into those of P3. The mapping of\n-      --  entities has to be done recursively for nested packages.\n-\n       procedure Process_Nested_Formal (Formal : Entity_Id);\n       --  If the current formal is declared with a box, its own formals are\n       --  visible in the instance, as they were in the generic, and their\n@@ -7590,65 +7623,6 @@ package body Sem_Ch12 is\n          end if;\n       end Is_Instance_Of;\n \n-      ------------------\n-      -- Map_Entities --\n-      ------------------\n-\n-      procedure Map_Entities (Form : Entity_Id; Act : Entity_Id) is\n-         E1 : Entity_Id;\n-         E2 : Entity_Id;\n-\n-      begin\n-         Set_Instance_Of (Form, Act);\n-\n-         --  Traverse formal and actual package to map the corresponding\n-         --  entities. We skip over internal entities that may be generated\n-         --  during semantic analysis, and find the matching entities by\n-         --  name, given that they must appear in the same order.\n-\n-         E1 := First_Entity (Form);\n-         E2 := First_Entity (Act);\n-         while Present (E1)\n-           and then E1 /= First_Private_Entity (Form)\n-         loop\n-            --  Could this test be a single condition???\n-            --  Seems like it could, and isn't FPE (Form) a constant anyway???\n-\n-            if not Is_Internal (E1)\n-              and then Present (Parent (E1))\n-              and then not Is_Class_Wide_Type (E1)\n-              and then not Is_Internal_Name (Chars (E1))\n-            then\n-               while Present (E2)\n-                 and then Chars (E2) /= Chars (E1)\n-               loop\n-                  Next_Entity (E2);\n-               end loop;\n-\n-               if No (E2) then\n-                  exit;\n-               else\n-                  Set_Instance_Of (E1, E2);\n-\n-                  if Is_Type (E1)\n-                    and then Is_Tagged_Type (E2)\n-                  then\n-                     Set_Instance_Of\n-                       (Class_Wide_Type (E1), Class_Wide_Type (E2));\n-                  end if;\n-\n-                  if Ekind (E1) = E_Package\n-                    and then No (Renamed_Object (E1))\n-                  then\n-                     Map_Entities (E1, E2);\n-                  end if;\n-               end if;\n-            end if;\n-\n-            Next_Entity (E1);\n-         end loop;\n-      end Map_Entities;\n-\n       ---------------------------\n       -- Process_Nested_Formal --\n       ---------------------------\n@@ -7734,7 +7708,7 @@ package body Sem_Ch12 is\n          end if;\n \n          Set_Instance_Of (Defining_Identifier (Formal), Actual_Pack);\n-         Map_Entities (Formal_Pack, Actual_Pack);\n+         Map_Formal_Package_Entities (Formal_Pack, Actual_Pack);\n \n          Nod :=\n            Make_Package_Renaming_Declaration (Loc,\n@@ -8378,7 +8352,7 @@ package body Sem_Ch12 is\n                \"with volatile actual\", Actual);\n          end if;\n \n-      --  OUT not present\n+      --  formal in-parameter\n \n       else\n          --  The instantiation of a generic formal in-parameter is constant\n@@ -8426,11 +8400,15 @@ package body Sem_Ch12 is\n             end if;\n \n             declare\n-               Typ : constant Entity_Id :=\n-                       Get_Instance_Of\n-                         (Etype (Defining_Identifier (Analyzed_Formal)));\n+               Formal_Object : constant Entity_Id :=\n+                                 Defining_Identifier (Analyzed_Formal);\n+               Formal_Type   : constant Entity_Id := Etype (Formal_Object);\n+\n+               Typ : Entity_Id;\n \n             begin\n+               Typ := Get_Instance_Of (Formal_Type);\n+\n                Freeze_Before (Instantiation_Node, Typ);\n \n                --  If the actual is an aggregate, perform name resolution on\n@@ -10722,6 +10700,70 @@ package body Sem_Ch12 is\n       end if;\n    end Load_Parent_Of_Generic;\n \n+   ---------------------------------\n+   -- Map_Formal_Package_Entities --\n+   ---------------------------------\n+\n+   procedure Map_Formal_Package_Entities (Form : Entity_Id; Act : Entity_Id) is\n+      E1 : Entity_Id;\n+      E2 : Entity_Id;\n+\n+   begin\n+      Set_Instance_Of (Form, Act);\n+\n+      --  Traverse formal and actual package to map the corresponding entities.\n+      --  We skip over internal entities that may be generated during semantic\n+      --  analysis, and find the matching entities by name, given that they\n+      --  must appear in the same order.\n+\n+      E1 := First_Entity (Form);\n+      E2 := First_Entity (Act);\n+      while Present (E1)\n+        and then E1 /= First_Private_Entity (Form)\n+      loop\n+         --  Could this test be a single condition???\n+         --  Seems like it could, and isn't FPE (Form) a constant anyway???\n+\n+         if not Is_Internal (E1)\n+           and then Present (Parent (E1))\n+           and then not Is_Class_Wide_Type (E1)\n+           and then not Is_Internal_Name (Chars (E1))\n+         then\n+            while Present (E2)\n+              and then Chars (E2) /= Chars (E1)\n+            loop\n+               Next_Entity (E2);\n+            end loop;\n+\n+            if No (E2) then\n+               exit;\n+            else\n+               Set_Instance_Of (E1, E2);\n+\n+               if Is_Type (E1)\n+                 and then Is_Tagged_Type (E2)\n+               then\n+                  Set_Instance_Of\n+                    (Class_Wide_Type (E1), Class_Wide_Type (E2));\n+               end if;\n+\n+               if Is_Constrained (E1) then\n+                  Set_Instance_Of\n+                    (Base_Type (E1), Base_Type (E2));\n+               end if;\n+\n+               if Ekind (E1) = E_Package\n+                 and then No (Renamed_Object (E1))\n+               then\n+                  Map_Formal_Package_Entities (E1, E2);\n+               end if;\n+            end if;\n+         end if;\n+\n+         Next_Entity (E1);\n+      end loop;\n+   end Map_Formal_Package_Entities;\n+\n    -----------------------\n    -- Move_Freeze_Nodes --\n    -----------------------\n@@ -10737,8 +10779,8 @@ package body Sem_Ch12 is\n       Spec      : Node_Id;\n \n       function Is_Outer_Type (T : Entity_Id) return Boolean;\n-      --  Check whether entity is declared in a scope external to that\n-      --  of the generic unit.\n+      --  Check whether entity is declared in a scope external to that of the\n+      --  generic unit.\n \n       -------------------\n       -- Is_Outer_Type --"}]}