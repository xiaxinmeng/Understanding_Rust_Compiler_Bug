{"sha": "2f4eb706df3bf10b82f571b0910df14317d1ff27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY0ZWI3MDZkZjNiZjEwYjgyZjU3MWIwOTEwZGYxNDMxN2QxZmYyNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-05-04T19:50:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-04T19:50:51Z"}, "message": "i386.c: Change GET_CODE (...) == CONST_DOUBLE check to CONST_DOUBLE_P predicate.\n\n\t* config/i386/i386.c: Change GET_CODE (...) == CONST_DOUBLE check\n\tto CONST_DOUBLE_P predicate.\n\t(standard_sse_constant_p): Return 0 for !TARGET_SSE.\n\t(ix86_legitimate_constant_p) <case CONST_WIDE_INT>: For 32bit targets,\n\tallow only operands that satisfy standard_sse_constant_p predicate.\n\t* config/i386/i386.md: Change GET_CODE (...) == CONST_DOUBLE check\n\tto CONST_DOUBLE_P predicate.\n\nFrom-SVN: r222774", "tree": {"sha": "bf4998953bac6da0aa38daabdd695600ffad11b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf4998953bac6da0aa38daabdd695600ffad11b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f4eb706df3bf10b82f571b0910df14317d1ff27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f4eb706df3bf10b82f571b0910df14317d1ff27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f4eb706df3bf10b82f571b0910df14317d1ff27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f4eb706df3bf10b82f571b0910df14317d1ff27/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "383be4a8c1518edfc2b74d31027e21d43c101ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383be4a8c1518edfc2b74d31027e21d43c101ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/383be4a8c1518edfc2b74d31027e21d43c101ff0"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "c16c1d059622932f511ad10ef9c87ecd45b2a433", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f4eb706df3bf10b82f571b0910df14317d1ff27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f4eb706df3bf10b82f571b0910df14317d1ff27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f4eb706df3bf10b82f571b0910df14317d1ff27", "patch": "@@ -1,3 +1,13 @@\n+2015-05-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c: Change GET_CODE (...) == CONST_DOUBLE check\n+\tto CONST_DOUBLE_P predicate.\n+\t(standard_sse_constant_p): Return 0 for !TARGET_SSE.\n+\t(ix86_legitimate_constant_p) <case CONST_WIDE_INT>: For 32bit targets,\n+\tallow only operands that satisfy standard_sse_constant_p predicate.\n+\t* config/i386/i386.md: Change GET_CODE (...) == CONST_DOUBLE check\n+\tto CONST_DOUBLE_P predicate.\n+\n 2015-05-04  Jeff Law  <law@redhat.com>\n \n \t* match.pd (bit_and (plus/minus (convert @0) (convert @1) mask): New"}, {"sha": "607cfcab2ed236bdb6154b6468cf6d373362b45b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f4eb706df3bf10b82f571b0910df14317d1ff27/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f4eb706df3bf10b82f571b0910df14317d1ff27/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2f4eb706df3bf10b82f571b0910df14317d1ff27", "patch": "@@ -9368,7 +9368,7 @@ standard_80387_constant_p (rtx x)\n \n   REAL_VALUE_TYPE r;\n \n-  if (!(X87_FLOAT_MODE_P (mode) && (GET_CODE (x) == CONST_DOUBLE)))\n+  if (!(CONST_DOUBLE_P (x) && X87_FLOAT_MODE_P (mode)))\n     return -1;\n \n   if (x == CONST0_RTX (mode))\n@@ -9469,9 +9469,14 @@ standard_80387_constant_rtx (int idx)\n int\n standard_sse_constant_p (rtx x)\n {\n-  machine_mode mode = GET_MODE (x);\n+  machine_mode mode;\n \n-  if (x == const0_rtx || x == CONST0_RTX (GET_MODE (x)))\n+  if (!TARGET_SSE)\n+    return 0;\n+\n+  mode = GET_MODE (x);\n+  \n+  if (x == const0_rtx || x == CONST0_RTX (mode))\n     return 1;\n   if (vector_all_ones_operand (x, mode))\n     switch (mode)\n@@ -13078,9 +13083,7 @@ ix86_legitimate_constant_p (machine_mode, rtx x)\n       break;\n \n     case CONST_WIDE_INT:\n-      if (GET_MODE (x) == TImode\n-\t  && x != CONST0_RTX (TImode)\n-          && !TARGET_64BIT)\n+      if (!TARGET_64BIT && !standard_sse_constant_p (x))\n \treturn false;\n       break;\n \n@@ -15903,7 +15906,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \toutput_address (x);\n     }\n \n-  else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) == SFmode)\n+  else if (CONST_DOUBLE_P (x) && GET_MODE (x) == SFmode)\n     {\n       REAL_VALUE_TYPE r;\n       long l;\n@@ -15921,7 +15924,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \tfprintf (file, \"0x%08x\", (unsigned int) l);\n     }\n \n-  else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) == DFmode)\n+  else if (CONST_DOUBLE_P (x) && GET_MODE (x) == DFmode)\n     {\n       REAL_VALUE_TYPE r;\n       long l[2];\n@@ -15935,7 +15938,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n     }\n \n   /* These float cases don't actually occur as immediate operands.  */\n-  else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) == XFmode)\n+  else if (CONST_DOUBLE_P (x) && GET_MODE (x) == XFmode)\n     {\n       char dstr[30];\n \n@@ -17364,8 +17367,7 @@ ix86_expand_move (machine_mode mode, rtx operands[])\n \top1 = copy_to_mode_reg (mode, op1);\n \n       if (can_create_pseudo_p ()\n-\t  && FLOAT_MODE_P (mode)\n-\t  && GET_CODE (op1) == CONST_DOUBLE)\n+\t  && CONST_DOUBLE_P (op1))\n \t{\n \t  /* If we are loading a floating point constant to a register,\n \t     force the value to memory now, since we'll get better code\n@@ -19563,7 +19565,7 @@ ix86_expand_copysign (rtx operands[])\n   else\n     vmode = mode;\n \n-  if (GET_CODE (op0) == CONST_DOUBLE)\n+  if (CONST_DOUBLE_P (op0))\n     {\n       rtx (*copysign_insn)(rtx, rtx, rtx, rtx);\n \n@@ -22632,7 +22634,7 @@ ix86_split_to_parts (rtx operand, rtx *parts, machine_mode mode)\n \t      for (i = 1; i < size; i++)\n \t\tparts[i] = adjust_address (operand, SImode, 4 * i);\n \t    }\n-\t  else if (GET_CODE (operand) == CONST_DOUBLE)\n+\t  else if (CONST_DOUBLE_P (operand))\n \t    {\n \t      REAL_VALUE_TYPE r;\n \t      long l[4];\n@@ -22683,7 +22685,7 @@ ix86_split_to_parts (rtx operand, rtx *parts, machine_mode mode)\n \t      parts[0] = operand;\n \t      parts[1] = adjust_address (operand, upper_mode, 8);\n \t    }\n-\t  else if (GET_CODE (operand) == CONST_DOUBLE)\n+\t  else if (CONST_DOUBLE_P (operand))\n \t    {\n \t      REAL_VALUE_TYPE r;\n \t      long l[4];\n@@ -41208,7 +41210,7 @@ ix86_preferred_reload_class (rtx x, reg_class_t regclass)\n     return SSE_CLASS_P (regclass) ? regclass : NO_REGS;\n \n   /* Floating-point constants need more complex checks.  */\n-  if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) != VOIDmode)\n+  if (CONST_DOUBLE_P (x))\n     {\n       /* General regs can load everything.  */\n       if (reg_class_subset_p (regclass, GENERAL_REGS))\n@@ -44551,9 +44553,9 @@ ix86_expand_vector_init (bool mmx_ok, rtx target, rtx vals)\n   for (i = 0; i < n_elts; ++i)\n     {\n       x = XVECEXP (vals, 0, i);\n-      if (!(CONST_INT_P (x)\n-\t    || GET_CODE (x) == CONST_DOUBLE\n-\t    || GET_CODE (x) == CONST_FIXED))\n+      if (!(CONST_SCALAR_INT_P (x)\n+\t    || CONST_DOUBLE_P (x)\n+\t    || CONST_FIXED_P (x)))\n \tn_var++, one_var = i;\n       else if (x != CONST0_RTX (inner_mode))\n \tall_const_zero = false;"}, {"sha": "8b0830c7a1b5c004355ffb4902df16dd3ebf40e8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f4eb706df3bf10b82f571b0910df14317d1ff27/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f4eb706df3bf10b82f571b0910df14317d1ff27/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2f4eb706df3bf10b82f571b0910df14317d1ff27", "patch": "@@ -2955,7 +2955,7 @@\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n-       || GET_CODE (operands[1]) != CONST_DOUBLE\n+       || !CONST_DOUBLE_P (operands[1])\n        || (optimize_function_for_size_p (cfun)\n \t   && standard_sse_constant_p (operands[1])\n \t   && !memory_operand (operands[0], TFmode))\n@@ -3025,7 +3025,7 @@\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n-       || GET_CODE (operands[1]) != CONST_DOUBLE\n+       || !CONST_DOUBLE_P (operands[1])\n        || (optimize_function_for_size_p (cfun)\n \t   && standard_80387_constant_p (operands[1]) > 0\n \t   && !memory_operand (operands[0], XFmode))\n@@ -3079,7 +3079,7 @@\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n-       || GET_CODE (operands[1]) != CONST_DOUBLE\n+       || !CONST_DOUBLE_P (operands[1])\n        || (optimize_function_for_size_p (cfun)\n \t   && ((!(TARGET_SSE2 && TARGET_SSE_MATH)\n \t\t&& standard_80387_constant_p (operands[1]) > 0)\n@@ -3262,7 +3262,7 @@\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n-       || GET_CODE (operands[1]) != CONST_DOUBLE\n+       || !CONST_DOUBLE_P (operands[1])\n        || (optimize_function_for_size_p (cfun)\n \t   && ((!TARGET_SSE_MATH\n \t\t&& standard_80387_constant_p (operands[1]) > 0)\n@@ -3961,7 +3961,7 @@\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n      are TARGET_LEGITIMATE_CONSTANT_P.  */\n-  if (GET_CODE (operands[1]) == CONST_DOUBLE)\n+  if (CONST_DOUBLE_P (operands[1]))\n     {\n       if ((!TARGET_SSE2 || TARGET_MIX_SSE_I387)\n \t  && standard_80387_constant_p (operands[1]) > 0)\n@@ -4077,7 +4077,7 @@\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n      are TARGET_LEGITIMATE_CONSTANT_P.  */\n-  if (GET_CODE (operands[1]) == CONST_DOUBLE)\n+  if (CONST_DOUBLE_P (operands[1]))\n     {\n       if (standard_80387_constant_p (operands[1]) > 0)\n \t{"}]}