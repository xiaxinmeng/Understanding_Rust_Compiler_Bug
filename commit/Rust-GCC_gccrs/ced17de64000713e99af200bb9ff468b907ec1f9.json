{"sha": "ced17de64000713e99af200bb9ff468b907ec1f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VkMTdkZTY0MDAwNzEzZTk5YWYyMDBiYjlmZjQ2OGI5MDdlYzFmOQ==", "commit": {"author": {"name": "Markus Trippelsdorf", "email": "markus@trippelsdorf.de", "date": "2016-11-30T07:30:55Z"}, "committer": {"name": "Markus Trippelsdorf", "email": "trippels@gcc.gnu.org", "date": "2016-11-30T07:30:55Z"}, "message": "Fix PR78588 - rtlanal.c:5210:38: runtime error: shift exponent 4294967295 is too large for 64-bit type\n\nBuilding gcc with -fsanitize=undefined shows:\n rtlanal.c:5210:38: runtime error: shift exponent 4294967295 is too large for 64-bit type 'long unsigned int'\n\nThis happens because if_then_else_cond() in combine.c calls\nnum_sign_bit_copies() in rtlanal.c with mode==BLKmode.\n\n5205   bitwidth = GET_MODE_PRECISION (mode);\n5206   if (bitwidth > HOST_BITS_PER_WIDE_INT)\n5207     return 1;\n5208\n5209   nonzero = nonzero_bits (x, mode);\n5210   return nonzero & (HOST_WIDE_INT_1U << (bitwidth - 1))\n5211          ? 1 : bitwidth - floor_log2 (nonzero) - 1;\n\nThis causes (bitwidth - 1) to wrap around.\n\n\tPR rtl-optimization/78588\n\t* combine.c (if_then_else_cond): Also guard against BLKmode.\n\t* rtlanal.c (num_sign_bit_copies1): Add assert.\n\nFrom-SVN: r242997", "tree": {"sha": "58329b3b6437635ddd11d472f913badec576d090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58329b3b6437635ddd11d472f913badec576d090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ced17de64000713e99af200bb9ff468b907ec1f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ced17de64000713e99af200bb9ff468b907ec1f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ced17de64000713e99af200bb9ff468b907ec1f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ced17de64000713e99af200bb9ff468b907ec1f9/comments", "author": null, "committer": null, "parents": [{"sha": "a4f15a7d4557811b8e5fef05a105cd68daa41a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f15a7d4557811b8e5fef05a105cd68daa41a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f15a7d4557811b8e5fef05a105cd68daa41a84"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "48862fbdddf019afd726a7d6ab4ded02a36de8f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced17de64000713e99af200bb9ff468b907ec1f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced17de64000713e99af200bb9ff468b907ec1f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ced17de64000713e99af200bb9ff468b907ec1f9", "patch": "@@ -1,3 +1,9 @@\n+2016-11-30  Markus Trippelsdorf  <markus@trippelsdorf.de>\n+\n+\tPR rtl-optimization/78588\n+\t* combine.c (if_then_else_cond): Also guard against BLKmode.\n+\t* rtlanal.c (num_sign_bit_copies1): Add assert.\n+\n 2016-11-29  Jeff Law  <law@redhat.com>\n \n \t* common/config/arc/arc-common.c (arc_handle_option): Remove unused"}, {"sha": "a32a0ecc72fba6cac9eda0bee0eda5e460f2675c", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced17de64000713e99af200bb9ff468b907ec1f9/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced17de64000713e99af200bb9ff468b907ec1f9/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ced17de64000713e99af200bb9ff468b907ec1f9", "patch": "@@ -9176,7 +9176,7 @@ if_then_else_cond (rtx x, rtx *ptrue, rtx *pfalse)\n   /* If X is known to be either 0 or -1, those are the true and\n      false values when testing X.  */\n   else if (x == constm1_rtx || x == const0_rtx\n-\t   || (mode != VOIDmode\n+\t   || (mode != VOIDmode && mode != BLKmode\n \t       && num_sign_bit_copies (x, mode) == GET_MODE_PRECISION (mode)))\n     {\n       *ptrue = constm1_rtx, *pfalse = const0_rtx;"}, {"sha": "60550adb7cf9788bdcd98a7515602d597171a325", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced17de64000713e99af200bb9ff468b907ec1f9/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced17de64000713e99af200bb9ff468b907ec1f9/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=ced17de64000713e99af200bb9ff468b907ec1f9", "patch": "@@ -4840,6 +4840,8 @@ num_sign_bit_copies1 (const_rtx x, machine_mode mode, const_rtx known_x,\n   if (mode == VOIDmode)\n     mode = GET_MODE (x);\n \n+  gcc_checking_assert (mode != BLKmode);\n+\n   if (mode == VOIDmode || FLOAT_MODE_P (mode) || FLOAT_MODE_P (GET_MODE (x))\n       || VECTOR_MODE_P (GET_MODE (x)) || VECTOR_MODE_P (mode))\n     return 1;"}]}