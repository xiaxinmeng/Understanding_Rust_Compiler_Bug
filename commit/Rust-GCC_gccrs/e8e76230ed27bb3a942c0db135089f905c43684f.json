{"sha": "e8e76230ed27bb3a942c0db135089f905c43684f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThlNzYyMzBlZDI3YmIzYTk0MmMwZGIxMzUwODlmOTA1YzQzNjg0Zg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2009-08-12T16:34:00Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2009-08-12T16:34:00Z"}, "message": "locks.h: Use atomic builtins For Linux EABI.\n\n2009-08-12  Andrew Haley  <aph@redhat.com>\n\n\t* sysdep/arm/locks.h: Use atomic builtins For Linux EABI.\n\t* configure.ac: Add ATOMICSPEC.\n\t* libgcj.spec.in: Likewise.\n\t* configure.host (arm*-linux*): Add -Wno-abi to cxxflags.\n\t(testsuite/libjava.jvmti/jvmti-interp.exp): Likewise.\n\t(testsuite/libjava.jvmti/jvmti.exp): Likewise.\n\t(testsuite/libjava.jni/jni.exp): Likewise.\n\tSet ATOMICSPEC.\n\tSet LDFLAGS to work around libtool feature.\n\nFrom-SVN: r150702", "tree": {"sha": "e16fbabe8bb8dfe6812a509c329d1ecd79bb1c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e16fbabe8bb8dfe6812a509c329d1ecd79bb1c0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8e76230ed27bb3a942c0db135089f905c43684f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e76230ed27bb3a942c0db135089f905c43684f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8e76230ed27bb3a942c0db135089f905c43684f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e76230ed27bb3a942c0db135089f905c43684f/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2a58473d7b5cb84c43da1a7749b29a96a4bfbad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a58473d7b5cb84c43da1a7749b29a96a4bfbad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a58473d7b5cb84c43da1a7749b29a96a4bfbad"}], "stats": {"total": 99, "additions": 94, "deletions": 5}, "files": [{"sha": "e59c6d7851bbd60704d671f38d270f760f2aeeba", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e8e76230ed27bb3a942c0db135089f905c43684f", "patch": "@@ -1,3 +1,15 @@\n+2009-08-12  Andrew Haley  <aph@redhat.com>\n+\n+\t* sysdep/arm/locks.h: Use atomic builtins For Linux EABI.\n+\t* configure.ac: Add ATOMICSPEC.\n+\t* libgcj.spec.in: Likewise.\n+\t* configure.host (arm*-linux*): Add -Wno-abi to cxxflags.\n+\t(testsuite/libjava.jvmti/jvmti-interp.exp): Likewise.\n+\t(testsuite/libjava.jvmti/jvmti.exp): Likewise.\n+\t(testsuite/libjava.jni/jni.exp): Likewise.\n+\tSet ATOMICSPEC.\n+\tSet LDFLAGS to work around libtool feature.\n+\t\n 2009-07-30  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure.ac (_AC_ARG_VAR_PRECIOUS): Use m4_rename_force."}, {"sha": "ef299c98521bf5e88563869dfcf8d6f5930099b5", "filename": "libjava/configure", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=e8e76230ed27bb3a942c0db135089f905c43684f", "patch": "@@ -459,7 +459,7 @@ ac_includes_default=\"\\\n #endif\"\n \n ac_subdirs_all=\"$ac_subdirs_all classpath libltdl\"\n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_libsubdir build_subdir host_subdir target_subdir multi_basedir host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S mkinstalldirs ANTLR_JAR CREATE_GJDOC_TRUE CREATE_GJDOC_FALSE JAVA_MAINTAINER_MODE_TRUE JAVA_MAINTAINER_MODE_FALSE CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LDFLAGS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE AS ac_ct_AS LD ac_ct_LD AR ac_ct_AR RANLIB ac_ct_RANLIB JAR ZIP UNZIP MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBGCJ_CFLAGS LIBGCJ_CXXFLAGS LIBGCJ_JAVAFLAGS LIBGCJ_LD_SYMBOLIC LIBGCJ_LD_SYMBOLIC_FUNCTIONS LIBGCJDEBUG TOOLKIT XLIB_AWT_TRUE XLIB_AWT_FALSE X_AWT_TRUE X_AWT_FALSE GCJ_FOR_ECJX GCJH host_exeext INCLTDL LIBLTDL DIRLTDL LIBTOOL SED EGREP FGREP GREP DUMPBIN ac_ct_DUMPBIN NM OBJDUMP ac_ct_OBJDUMP lt_ECHO DSYMUTIL ac_ct_DSYMUTIL NMEDIT ac_ct_NMEDIT LIPO ac_ct_LIPO OTOOL ac_ct_OTOOL OTOOL64 ac_ct_OTOOL64 CPP CPPFLAGS CXXCPP GCJ GCJFLAGS GCJDEPMODE am__fastdepGCJ_TRUE am__fastdepGCJ_FALSE subdirs TESTSUBDIR_TRUE TESTSUBDIR_FALSE ECJ_BUILD_JAR ECJ_JAR BUILD_ECJ1_TRUE BUILD_ECJ1_FALSE INSTALL_ECJ_JAR_TRUE INSTALL_ECJ_JAR_FALSE JAVA_HOME_SET_TRUE JAVA_HOME_SET_FALSE JAVA_HOME SUPPRESS_LIBGCJ_BC_TRUE SUPPRESS_LIBGCJ_BC_FALSE BUILD_LIBGCJ_REDUCED_REFLECTION_TRUE BUILD_LIBGCJ_REDUCED_REFLECTION_FALSE INTERPRETER INTERPRETER_TRUE INTERPRETER_FALSE LIBFFI LIBFFIINCS PLATFORM USING_WIN32_PLATFORM_TRUE USING_WIN32_PLATFORM_FALSE USING_POSIX_PLATFORM_TRUE USING_POSIX_PLATFORM_FALSE USING_DARWIN_CRT_TRUE USING_DARWIN_CRT_FALSE SYSTEMSPEC ZLIBSPEC ZLIBTESTSPEC X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS extra_ldflags_libjava extra_gij_ldflags extra_ldflags LIBSTDCXXSPEC LIBGCJTESTSPEC GCLIBS GCINCS GCDEPS GCSPEC JC1GCSPEC GCTESTSPEC USING_BOEHMGC_TRUE USING_BOEHMGC_FALSE USING_NOGC_TRUE USING_NOGC_FALSE THREADLIBS THREADINCS THREADDEPS THREADSPEC THREADSTARTFILESPEC THREADLDFLAGS THREADCXXFLAGS USING_POSIX_THREADS_TRUE USING_POSIX_THREADS_FALSE USING_WIN32_THREADS_TRUE USING_WIN32_THREADS_FALSE USING_NO_THREADS_TRUE USING_NO_THREADS_FALSE USE_LIBGCJ_BC_TRUE USE_LIBGCJ_BC_FALSE LIBGCJ_SPEC HASH_SYNC_SPEC USING_GCC_TRUE USING_GCC_FALSE LIBICONV LTLIBICONV PKG_CONFIG GTK_CFLAGS GTK_LIBS GLIB_CFLAGS GLIB_LIBS LIBART_CFLAGS LIBART_LIBS CLASSPATH_SEPARATOR ZLIBS SYS_ZLIBS ZINCS DIVIDESPEC CHECKREFSPEC EXCEPTIONSPEC BACKTRACESPEC IEEESPEC NATIVE_TRUE NATIVE_FALSE ENABLE_SHARED_TRUE ENABLE_SHARED_FALSE NEEDS_DATA_START_TRUE NEEDS_DATA_START_FALSE INSTALL_BINARIES_TRUE INSTALL_BINARIES_FALSE GCC_UNWIND_INCLUDE toolexecdir toolexecmainlibdir toolexeclibdir GCJVERSION dbexecdir gcjsubdir gxx_include_dir libstdcxx_incdir PERL SYSDEP_SOURCES ANONVERSCRIPT_TRUE ANONVERSCRIPT_FALSE LD_START_STATIC_SPEC LD_FINISH_STATIC_SPEC here python_mod_dir python_mod_dir_expanded MAKE INSTALL_AOT_RPM_TRUE INSTALL_AOT_RPM_FALSE CREATE_JAVA_HOME_TRUE CREATE_JAVA_HOME_FALSE gcc_suffix JAVA_VERSION BUILD_VERSION JVM_ROOT_DIR JVM_JAR_ROOT_DIR JVM_JAR_DIR JRE_DIR JRE_LNK SDK_LNK SDK_BIN_DIR SDK_LIB_DIR SDK_INCLUDE_DIR JRE_BIN_DIR JRE_LIB_DIR GCJ_BIN_DIR CPU OS LIBDIR LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_libsubdir build_subdir host_subdir target_subdir multi_basedir host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S mkinstalldirs ANTLR_JAR CREATE_GJDOC_TRUE CREATE_GJDOC_FALSE JAVA_MAINTAINER_MODE_TRUE JAVA_MAINTAINER_MODE_FALSE CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LDFLAGS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE AS ac_ct_AS LD ac_ct_LD AR ac_ct_AR RANLIB ac_ct_RANLIB JAR ZIP UNZIP MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBGCJ_CFLAGS LIBGCJ_CXXFLAGS LIBGCJ_JAVAFLAGS LIBGCJ_LD_SYMBOLIC LIBGCJ_LD_SYMBOLIC_FUNCTIONS LIBGCJDEBUG TOOLKIT XLIB_AWT_TRUE XLIB_AWT_FALSE X_AWT_TRUE X_AWT_FALSE GCJ_FOR_ECJX GCJH host_exeext INCLTDL LIBLTDL DIRLTDL LIBTOOL SED EGREP FGREP GREP DUMPBIN ac_ct_DUMPBIN NM OBJDUMP ac_ct_OBJDUMP lt_ECHO DSYMUTIL ac_ct_DSYMUTIL NMEDIT ac_ct_NMEDIT LIPO ac_ct_LIPO OTOOL ac_ct_OTOOL OTOOL64 ac_ct_OTOOL64 CPP CPPFLAGS CXXCPP GCJ GCJFLAGS GCJDEPMODE am__fastdepGCJ_TRUE am__fastdepGCJ_FALSE subdirs TESTSUBDIR_TRUE TESTSUBDIR_FALSE ECJ_BUILD_JAR ECJ_JAR BUILD_ECJ1_TRUE BUILD_ECJ1_FALSE INSTALL_ECJ_JAR_TRUE INSTALL_ECJ_JAR_FALSE JAVA_HOME_SET_TRUE JAVA_HOME_SET_FALSE JAVA_HOME SUPPRESS_LIBGCJ_BC_TRUE SUPPRESS_LIBGCJ_BC_FALSE BUILD_LIBGCJ_REDUCED_REFLECTION_TRUE BUILD_LIBGCJ_REDUCED_REFLECTION_FALSE INTERPRETER INTERPRETER_TRUE INTERPRETER_FALSE LIBFFI LIBFFIINCS PLATFORM USING_WIN32_PLATFORM_TRUE USING_WIN32_PLATFORM_FALSE USING_POSIX_PLATFORM_TRUE USING_POSIX_PLATFORM_FALSE USING_DARWIN_CRT_TRUE USING_DARWIN_CRT_FALSE SYSTEMSPEC ZLIBSPEC ZLIBTESTSPEC X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS extra_ldflags_libjava extra_gij_ldflags extra_ldflags LIBSTDCXXSPEC LIBGCJTESTSPEC GCLIBS GCINCS GCDEPS GCSPEC JC1GCSPEC GCTESTSPEC USING_BOEHMGC_TRUE USING_BOEHMGC_FALSE USING_NOGC_TRUE USING_NOGC_FALSE THREADLIBS THREADINCS THREADDEPS THREADSPEC THREADSTARTFILESPEC THREADLDFLAGS THREADCXXFLAGS USING_POSIX_THREADS_TRUE USING_POSIX_THREADS_FALSE USING_WIN32_THREADS_TRUE USING_WIN32_THREADS_FALSE USING_NO_THREADS_TRUE USING_NO_THREADS_FALSE USE_LIBGCJ_BC_TRUE USE_LIBGCJ_BC_FALSE LIBGCJ_SPEC HASH_SYNC_SPEC USING_GCC_TRUE USING_GCC_FALSE LIBICONV LTLIBICONV PKG_CONFIG GTK_CFLAGS GTK_LIBS GLIB_CFLAGS GLIB_LIBS LIBART_CFLAGS LIBART_LIBS CLASSPATH_SEPARATOR ZLIBS SYS_ZLIBS ZINCS DIVIDESPEC CHECKREFSPEC EXCEPTIONSPEC BACKTRACESPEC IEEESPEC ATOMICSPEC NATIVE_TRUE NATIVE_FALSE ENABLE_SHARED_TRUE ENABLE_SHARED_FALSE NEEDS_DATA_START_TRUE NEEDS_DATA_START_FALSE INSTALL_BINARIES_TRUE INSTALL_BINARIES_FALSE GCC_UNWIND_INCLUDE toolexecdir toolexecmainlibdir toolexeclibdir GCJVERSION dbexecdir gcjsubdir gxx_include_dir libstdcxx_incdir PERL SYSDEP_SOURCES ANONVERSCRIPT_TRUE ANONVERSCRIPT_FALSE LD_START_STATIC_SPEC LD_FINISH_STATIC_SPEC here python_mod_dir python_mod_dir_expanded MAKE INSTALL_AOT_RPM_TRUE INSTALL_AOT_RPM_FALSE CREATE_JAVA_HOME_TRUE CREATE_JAVA_HOME_FALSE gcc_suffix JAVA_VERSION BUILD_VERSION JVM_ROOT_DIR JVM_JAR_ROOT_DIR JVM_JAR_DIR JRE_DIR JRE_LNK SDK_LNK SDK_BIN_DIR SDK_LIB_DIR SDK_INCLUDE_DIR JRE_BIN_DIR JRE_LIB_DIR GCJ_BIN_DIR CPU OS LIBDIR LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n ac_pwd=`pwd`\n \n@@ -26421,6 +26421,7 @@ fi\n \n \n \n+\n if test \"$NATIVE\" = yes; then\n   NATIVE_TRUE=\n   NATIVE_FALSE='#'\n@@ -29989,6 +29990,7 @@ s,@CHECKREFSPEC@,$CHECKREFSPEC,;t t\n s,@EXCEPTIONSPEC@,$EXCEPTIONSPEC,;t t\n s,@BACKTRACESPEC@,$BACKTRACESPEC,;t t\n s,@IEEESPEC@,$IEEESPEC,;t t\n+s,@ATOMICSPEC@,$ATOMICSPEC,;t t\n s,@NATIVE_TRUE@,$NATIVE_TRUE,;t t\n s,@NATIVE_FALSE@,$NATIVE_FALSE,;t t\n s,@ENABLE_SHARED_TRUE@,$ENABLE_SHARED_TRUE,;t t"}, {"sha": "7dfb5c5892328a22aaf4cdceb7bbbb97c66727cb", "filename": "libjava/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=e8e76230ed27bb3a942c0db135089f905c43684f", "patch": "@@ -1447,6 +1447,7 @@ AC_SUBST(CHECKREFSPEC)\n AC_SUBST(EXCEPTIONSPEC)\n AC_SUBST(BACKTRACESPEC)\n AC_SUBST(IEEESPEC)\n+AC_SUBST(ATOMICSPEC)\n \n AM_CONDITIONAL(NATIVE, test \"$NATIVE\" = yes)\n AM_CONDITIONAL(ENABLE_SHARED, test \"$enable_shared\" = yes)"}, {"sha": "1d1b7085e11879e0505169d78c74aa7a98d19d5d", "filename": "libjava/configure.host", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=e8e76230ed27bb3a942c0db135089f905c43684f", "patch": "@@ -69,6 +69,7 @@ DIVIDESPEC=-fuse-divide-subroutine\n EXCEPTIONSPEC=-fnon-call-exceptions\n CHECKREFSPEC=\n BACKTRACESPEC=\n+ATOMICSPEC=\n \n # This case statement supports per-CPU defaults.\n case \"${host}\" in\n@@ -87,6 +88,11 @@ case \"${host}\" in\n \tlibgcj_interpreter=yes\n \tsysdeps_dir=arm\n \tfallback_backtrace_h=sysdep/arm/backtrace.h\n+\tlibgcj_cxxflags=-Wno-abi\n+\tATOMICSPEC=-fuse-atomic-builtins\n+\t# Work around a strange libtool feature that causes libraries\n+\t# to be linked with libgcc_s but not libgcc.  \n+\tLDFLAGS=\"${LDFLAGS} -Wl,-lgcc\"\n \t;;\n   mips-tx39-*|mipstx39-unknown-*)\n \tlibgcj_flags=\"${libgcj_flags} -G 0\""}, {"sha": "b6850eb1e141798263b60ea68e4d7915bd5ccae4", "filename": "libjava/libgcj.spec.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Flibgcj.spec.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Flibgcj.spec.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flibgcj.spec.in?ref=e8e76230ed27bb3a942c0db135089f905c43684f", "patch": "@@ -9,4 +9,4 @@\n %rename lib liborig\n *lib: @LD_START_STATIC_SPEC@ @LIBGCJ_SPEC@ @LD_FINISH_STATIC_SPEC@ -lm @LIBICONV@ @GCSPEC@ @THREADSPEC@ @ZLIBSPEC@ @SYSTEMSPEC@ %(libgcc) @LIBSTDCXXSPEC@ %(liborig)\n \n-*jc1: @HASH_SYNC_SPEC@ @DIVIDESPEC@ @CHECKREFSPEC@ @JC1GCSPEC@ @EXCEPTIONSPEC@ @BACKTRACESPEC@ @IEEESPEC@ -fkeep-inline-functions\n+*jc1: @HASH_SYNC_SPEC@ @DIVIDESPEC@ @CHECKREFSPEC@ @JC1GCSPEC@ @EXCEPTIONSPEC@ @BACKTRACESPEC@ @IEEESPEC@ @ATOMICSPEC@ -fkeep-inline-functions"}, {"sha": "2a81e1111bc6870c5133ebdb37c2ccecca8a6ae5", "filename": "libjava/sysdep/arm/locks.h", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Fsysdep%2Farm%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Fsysdep%2Farm%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Farm%2Flocks.h?ref=e8e76230ed27bb3a942c0db135089f905c43684f", "patch": "@@ -13,6 +13,59 @@ details.  */\n \n typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n \t\t\t\t/* address.\t\t\t\t*/\n+#if (__ARM_EABI__ && __linux)\n+\n+// Atomically replace *addr by new_val if it was initially equal to old.\n+// Return true if the comparison succeeded.\n+// Assumed to have acquire semantics, i.e. later memory operations\n+// cannot execute before the compare_and_swap finishes.\n+inline static bool\n+compare_and_swap(volatile obj_addr_t *addr,\n+                 obj_addr_t old,\n+                 obj_addr_t new_val)\n+{\n+  return __sync_bool_compare_and_swap(addr, old, new_val);\n+}\n+\n+// Set *addr to new_val with release semantics, i.e. making sure\n+// that prior loads and stores complete before this\n+// assignment.\n+inline static void\n+release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n+{\n+  __sync_synchronize();\n+  *(addr) = new_val;\n+}\n+\n+// Compare_and_swap with release semantics instead of acquire semantics.\n+// On many architecture, the operation makes both guarantees, so the\n+// implementation can be the same.\n+inline static bool\n+compare_and_swap_release(volatile obj_addr_t *addr,\n+\t\t\t obj_addr_t old,\n+\t\t\t obj_addr_t new_val)\n+{\n+  return __sync_bool_compare_and_swap(addr, old, new_val);\n+}\n+\n+// Ensure that subsequent instructions do not execute on stale\n+// data that was loaded from memory before the barrier.\n+// On X86, the hardware ensures that reads are properly ordered.\n+inline static void\n+read_barrier()\n+{\n+  __sync_synchronize();\n+}\n+\n+// Ensure that prior stores to memory are completed with respect to other\n+// processors.\n+inline static void\n+write_barrier()\n+{\n+  __sync_synchronize();\n+}\n+\n+#else\n \n /* Atomic compare and exchange.  These sequences are not actually\n    atomic; there is a race if *ADDR != OLD_VAL and we are preempted\n@@ -54,8 +107,8 @@ release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n \n inline static bool\n compare_and_swap_release(volatile obj_addr_t *addr,\n-\t\t  \t\t\t\t     obj_addr_t old,\n-\t\t\t\t\t\t     obj_addr_t new_val)\n+\t\t\t obj_addr_t old,\n+\t\t\t obj_addr_t new_val)\n {\n   return compare_and_swap(addr, old, new_val);\n }\n@@ -77,3 +130,4 @@ write_barrier()\n }\n \n #endif\n+#endif"}, {"sha": "68dbd279033de35ffff058c4fa3084fab4106731", "filename": "libjava/testsuite/libjava.jni/jni.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp?ref=e8e76230ed27bb3a942c0db135089f905c43684f", "patch": "@@ -165,6 +165,11 @@ proc gcj_jni_test_one {file} {\n \tlappend cxxflaglist \"-lstdc++\"\n     }\n \n+    # ARM C++ emits an ABI warning for varargs.\n+    if { [istarget \"arm*\"] } {\n+\tlappend cxxflaglist \"-Wno-abi\"\n+    }\n+    \n     set cxxflags [join $cxxflaglist]\n   }\n "}, {"sha": "62c82e92afc1616fbf07034360c153bfabf8b9bf", "filename": "libjava/testsuite/libjava.jvmti/jvmti-interp.exp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti-interp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti-interp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti-interp.exp?ref=e8e76230ed27bb3a942c0db135089f905c43684f", "patch": "@@ -32,7 +32,12 @@ proc gcj_jni_compile_c_to_so {file {options {}}} {\n       set so_extension \"so\"\n       set so_flag \"-shared\"\n   }\n-    \n+\n+  # ARM C++ emits an ABI warning for varargs.\n+  if { [istarget \"arm*\"] } {\n+      lappend options \"additional_flags=-Wno-abi\"\n+  }\n+\n   set filename [file tail $file]\n   set name [file rootname $filename]\n   set soname lib${name}.${so_extension}"}, {"sha": "571952e807cf3a470d63325be1bd79dfd964b474", "filename": "libjava/testsuite/libjava.jvmti/jvmti.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e76230ed27bb3a942c0db135089f905c43684f/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti.exp?ref=e8e76230ed27bb3a942c0db135089f905c43684f", "patch": "@@ -16,6 +16,10 @@ proc gcj_jvmti_compile_cxx_to_o {file {options {}}} {\n   lappend options \"additional_flags=-I$srcdir/..\"\n   # Find jvmti.h, jvmti_md.h, jvmti-int.h, jvm.h requirements\n   lappend options \"additional_flags=-I$srcdir/../include -I$srcdir/../classpath/include -I$objdir/../include -I$objdir/../../boehm-gc/include \"\n+  # ARM C++ emits an ABI warning for varargs.\n+  if { [istarget \"arm*\"] } {\n+      lappend options \"additional_flags=-Wno-abi\"\n+  }\n \n   set x [libjava_prune_warnings \\\n \t   [target_compile $file $oname object $options]]"}]}