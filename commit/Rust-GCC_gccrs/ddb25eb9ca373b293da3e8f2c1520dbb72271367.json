{"sha": "ddb25eb9ca373b293da3e8f2c1520dbb72271367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRiMjVlYjljYTM3M2IyOTNkYTNlOGYyYzE1MjBkYmI3MjI3MTM2Nw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-12-18T17:01:11Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-12-18T17:01:11Z"}, "message": "[PR92726, PR92970, PR92984] [OpenACC] Clarify 'acc_delete' etc. for 'NULL'-in, non-present data, or size zero\n\nPR92970 \"OpenACC 2.5: 'acc_delete' etc. on non-present data is a no-op\" is an\nactual bug fix, and the other ones are fall-out, currently undefined behavior.\n\n\tlibgomp/\n\tPR libgomp/92726\n\tPR libgomp/92970\n\tPR libgomp/92984\n\t* oacc-mem.c (delete_copyout): No-op behavior if 'lookup_host'\n\tfails.\n\t(GOACC_enter_exit_data): Simplify accordingly.\n\t* testsuite/libgomp.oacc-c-c++-common/pr92970-1.c: New file,\n\tsubsuming...\n\t* testsuite/libgomp.oacc-c-c++-common/lib-17.c: ... this file...\n\t* testsuite/libgomp.oacc-c-c++-common/lib-18.c: ..., and this\n\tfile.\n\t* testsuite/libgomp.oacc-c-c++-common/pr92984-1.c: New file,\n\tsubsuming...\n\t* testsuite/libgomp.oacc-c-c++-common/lib-21.c: ... this file...\n\t* testsuite/libgomp.oacc-c-c++-common/lib-29.c: ..., and this\n\tfile.\n\t* testsuite/libgomp.oacc-c-c++-common/pr92726-1.c: New file,\n\tsubsuming...\n\t* testsuite/libgomp.oacc-c-c++-common/lib-28.c: ... this file.\n\nFrom-SVN: r279532", "tree": {"sha": "bbf3d9e62726618daaa67ae2c9631c498594f8d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbf3d9e62726618daaa67ae2c9631c498594f8d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddb25eb9ca373b293da3e8f2c1520dbb72271367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb25eb9ca373b293da3e8f2c1520dbb72271367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb25eb9ca373b293da3e8f2c1520dbb72271367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb25eb9ca373b293da3e8f2c1520dbb72271367/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32128577aed11aa21f3227edc2276da677e97636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32128577aed11aa21f3227edc2276da677e97636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32128577aed11aa21f3227edc2276da677e97636"}], "stats": {"total": 382, "additions": 190, "deletions": 192}, "files": [{"sha": "871a1537c7721ef13e6d6006922fb166e51a4cfe", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb25eb9ca373b293da3e8f2c1520dbb72271367/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb25eb9ca373b293da3e8f2c1520dbb72271367/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ddb25eb9ca373b293da3e8f2c1520dbb72271367", "patch": "@@ -1,5 +1,25 @@\n 2019-12-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR libgomp/92726\n+\tPR libgomp/92970\n+\tPR libgomp/92984\n+\t* oacc-mem.c (delete_copyout): No-op behavior if 'lookup_host'\n+\tfails.\n+\t(GOACC_enter_exit_data): Simplify accordingly.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr92970-1.c: New file,\n+\tsubsuming...\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-17.c: ... this file...\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-18.c: ..., and this\n+\tfile.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr92984-1.c: New file,\n+\tsubsuming...\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-21.c: ... this file...\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-29.c: ..., and this\n+\tfile.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr92726-1.c: New file,\n+\tsubsuming...\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-28.c: ... this file.\n+\n \t* oacc-mem.c (GOACC_enter_exit_data): Simplify 'exit data'\n \t'finalize' handling.\n "}, {"sha": "32bf365602968e61bb563bf1665e8a05e3006ae3", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb25eb9ca373b293da3e8f2c1520dbb72271367/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb25eb9ca373b293da3e8f2c1520dbb72271367/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=ddb25eb9ca373b293da3e8f2c1520dbb72271367", "patch": "@@ -659,7 +659,9 @@ acc_pcopyin (void *h, size_t s)\n static void\n delete_copyout (unsigned f, void *h, size_t s, int async, const char *libfnname)\n {\n-  splay_tree_key n;\n+  /* No need to call lazy open, as the data must already have been\n+     mapped.  */\n+\n   struct goacc_thread *thr = goacc_thread ();\n   struct gomp_device_descr *acc_dev = thr->dev;\n \n@@ -677,16 +679,10 @@ delete_copyout (unsigned f, void *h, size_t s, int async, const char *libfnname)\n \n   gomp_mutex_lock (&acc_dev->lock);\n \n-  n = lookup_host (acc_dev, h, s);\n-\n-  /* No need to call lazy open, as the data must already have been\n-     mapped.  */\n-\n+  splay_tree_key n = lookup_host (acc_dev, h, s);\n   if (!n)\n-    {\n-      gomp_mutex_unlock (&acc_dev->lock);\n-      gomp_fatal (\"[%p,%d] is not mapped\", (void *)h, (int)s);\n-    }\n+    /* PR92726, RP92970, PR92984: no-op.  */\n+    goto out;\n \n   if ((uintptr_t) h < n->host_start || (uintptr_t) h + s > n->host_end)\n     {\n@@ -741,6 +737,7 @@ delete_copyout (unsigned f, void *h, size_t s, int async, const char *libfnname)\n \t}\n     }\n \n+ out:\n   gomp_mutex_unlock (&acc_dev->lock);\n \n   if (profiling_p)\n@@ -1224,13 +1221,10 @@ GOACC_enter_exit_data (int flags_m, size_t mapnum, void **hostaddrs,\n \t      {\n \t      case GOMP_MAP_RELEASE:\n \t      case GOMP_MAP_DELETE:\n-\t\tif (acc_is_present (hostaddrs[i], sizes[i]))\n-\t\t  {\n-\t\t    if (finalize)\n-\t\t      acc_delete_finalize_async (hostaddrs[i], sizes[i], async);\n-\t\t    else\n-\t\t      acc_delete_async (hostaddrs[i], sizes[i], async);\n-\t\t  }\n+\t\tif (finalize)\n+\t\t  acc_delete_finalize_async (hostaddrs[i], sizes[i], async);\n+\t\telse\n+\t\t  acc_delete_async (hostaddrs[i], sizes[i], async);\n \t\tbreak;\n \t      case GOMP_MAP_FROM:\n \t      case GOMP_MAP_FORCE_FROM:"}, {"sha": "a3487e8f5bfc49ab513dde9942be4869b6a8152f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-17.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32128577aed11aa21f3227edc2276da677e97636/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32128577aed11aa21f3227edc2276da677e97636/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-17.c?ref=32128577aed11aa21f3227edc2276da677e97636", "patch": "@@ -1,38 +0,0 @@\n-/* Check acc_copyout failure with acc_device_nvidia.  */\n-\n-/* { dg-do run { target openacc_nvidia_accel_selected } } */\n-\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <openacc.h>\n-\n-int\n-main (int argc, char **argv)\n-{\n-  const int N = 256;\n-  int i;\n-  unsigned char *h;\n-\n-  h = (unsigned char *) malloc (N);\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      h[i] = i;\n-    }\n-\n-  (void) acc_copyin (h, N);\n-\n-  acc_copyout (h, N);\n-\n-  fprintf (stderr, \"CheCKpOInT\\n\");\n-  acc_copyout (h, N);\n-\n-  free (h);\n-\n-  return 0;\n-}\n-\n-/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n-/* { dg-output \"\\\\\\[\\[0-9a-fA-FxX\\]+,256\\\\\\] is not mapped\" } */\n-/* { dg-shouldfail \"\" } */"}, {"sha": "93bfb99f4153647f43a78a9c0750e73dc340b7e1", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-18.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32128577aed11aa21f3227edc2276da677e97636/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32128577aed11aa21f3227edc2276da677e97636/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-18.c?ref=32128577aed11aa21f3227edc2276da677e97636", "patch": "@@ -1,38 +0,0 @@\n-/* Verify that acc_delete unregisters data mappings on the device.  */\n-\n-/* { dg-do run { target openacc_nvidia_accel_selected } } */\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <openacc.h>\n-\n-int\n-main (int argc, char **argv)\n-{\n-  const int N = 256;\n-  int i;\n-  unsigned char *h;\n-  void *d;\n-\n-  h = (unsigned char *) malloc (N);\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      h[i] = i;\n-    }\n-\n-  d = acc_copyin (h, N);\n-\n-  acc_delete (h, N);\n-\n-  fprintf (stderr, \"CheCKpOInT\\n\");\n-  acc_copyout (h, N);\n-\n-  free (h);\n-\n-  return 0;\n-}\n-\n-/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n-/* { dg-output \"\\\\\\[\\[0-9a-fA-FxX\\]+,256\\\\\\] is not mapped\" } */\n-/* { dg-shouldfail \"\" } */"}, {"sha": "b170f81229ceb17dd62ed83d79aba450b35957e2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-21.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32128577aed11aa21f3227edc2276da677e97636/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32128577aed11aa21f3227edc2276da677e97636/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-21.c?ref=32128577aed11aa21f3227edc2276da677e97636", "patch": "@@ -1,35 +0,0 @@\n-/* Exercise acc_copyin and acc_copyout on nvidia targets.  */\n-\n-/* { dg-do run { target openacc_nvidia_accel_selected } } */\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <openacc.h>\n-\n-int\n-main (int argc, char **argv)\n-{\n-  const int N = 256;\n-  int i;\n-  unsigned char *h;\n-\n-  h = (unsigned char *) malloc (N);\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      h[i] = i;\n-    }\n-\n-  (void) acc_copyin (h, N);\n-\n-  fprintf (stderr, \"CheCKpOInT\\n\");\n-  acc_copyout (h, 0);\n-\n-  free (h);\n-\n-  return 0;\n-}\n-\n-/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n-/* { dg-output \"\\\\\\[\\[0-9a-fA-FxX\\]+,0\\\\\\] is not mapped\" } */\n-/* { dg-shouldfail \"\" } */"}, {"sha": "7a96ab26ebd15970d6897c68de3ff7e5a5344af2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-28.c", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32128577aed11aa21f3227edc2276da677e97636/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32128577aed11aa21f3227edc2276da677e97636/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-28.c?ref=32128577aed11aa21f3227edc2276da677e97636", "patch": "@@ -1,32 +0,0 @@\n-/* Exercise acc_delete with a NULL address on nvidia targets.  */\n-\n-/* { dg-do run { target openacc_nvidia_accel_selected } } */\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <openacc.h>\n-\n-int\n-main (int argc, char **argv)\n-{\n-  const int N = 256;\n-  unsigned char *h;\n-  void *d;\n-\n-  h = (unsigned char *) malloc (N);\n-\n-  d = acc_create (h, N);\n-  if (!d)\n-    abort ();\n-\n-  fprintf (stderr, \"CheCKpOInT\\n\");\n-  acc_delete (0, N);\n-\n-  free (h);\n-\n-  return 0;\n-}\n-\n-/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n-/* { dg-output \"\\\\\\[\\[^\\n\\r]*,256\\\\\\] is not mapped\" } */\n-/* { dg-shouldfail \"\" } */"}, {"sha": "318a060f228d4df03994b01dbc0392cc39fc6251", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-29.c", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32128577aed11aa21f3227edc2276da677e97636/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32128577aed11aa21f3227edc2276da677e97636/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-29.c?ref=32128577aed11aa21f3227edc2276da677e97636", "patch": "@@ -1,32 +0,0 @@\n-/* Exercise acc_delete with size zero on nvidia targets.  */\n-\n-/* { dg-do run { target openacc_nvidia_accel_selected } } */\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <openacc.h>\n-\n-int\n-main (int argc, char **argv)\n-{\n-  const int N = 256;\n-  unsigned char *h;\n-  void *d;\n-\n-  h = (unsigned char *) malloc (N);\n-\n-  d = acc_create (h, N);\n-  if (!d)\n-    abort ();\n-\n-  fprintf (stderr, \"CheCKpOInT\\n\");\n-  acc_delete (h, 0);\n-\n-  free (h);\n-\n-  return 0;\n-}\n-\n-/* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" } */\n-/* { dg-output \"\\\\\\[\\[0-9a-fA-FxX\\]+,0\\\\\\] is not mapped\" } */\n-/* { dg-shouldfail \"\" } */"}, {"sha": "fb69adf4c400ce2fc2d5f22c7954e6b1d9277041", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr92726-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb25eb9ca373b293da3e8f2c1520dbb72271367/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92726-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb25eb9ca373b293da3e8f2c1520dbb72271367/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92726-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92726-1.c?ref=ddb25eb9ca373b293da3e8f2c1520dbb72271367", "patch": "@@ -0,0 +1,26 @@\n+/* Verify that 'acc_delete' etc. with a 'NULL' address is a no-op.  */\n+\n+#include <assert.h>\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  const int N = 256;\n+\n+  unsigned char *a = (unsigned char *) malloc (N);\n+  assert (a);\n+\n+  void *a_d = acc_create (a, N);\n+  assert (a_d);\n+\n+  acc_delete (NULL, N);\n+  assert (acc_is_present (a, N));\n+  //TODO similar for others.\n+\n+  acc_delete (a, N);\n+  free (a);\n+\n+  return 0;\n+}"}, {"sha": "380f67934546f924ea61891de4be370f49ba8ef2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr92970-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb25eb9ca373b293da3e8f2c1520dbb72271367/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92970-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb25eb9ca373b293da3e8f2c1520dbb72271367/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92970-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92970-1.c?ref=ddb25eb9ca373b293da3e8f2c1520dbb72271367", "patch": "@@ -0,0 +1,33 @@\n+/* Verify that 'acc_delete' etc. on non-present data is a no-op.  */\n+\n+#include <openacc.h>\n+\n+int\n+main ()\n+{\n+  int a;\n+\n+  int async = 0;\n+\n+#pragma acc exit data copyout (a)\n+  acc_copyout (&a, sizeof a);\n+#pragma acc exit data copyout (a) async (async++)\n+  acc_copyout_async (&a, sizeof a, async++);\n+#pragma acc exit data copyout (a) finalize\n+  acc_copyout_finalize (&a, sizeof a);\n+#pragma acc exit data copyout (a) finalize async (async++)\n+  acc_copyout_finalize_async (&a, sizeof a, async++);\n+\n+#pragma acc exit data delete (a)\n+  acc_delete (&a, sizeof a);\n+#pragma acc exit data delete (a) async (async++)\n+  acc_delete_async (&a, sizeof a, async++);\n+#pragma acc exit data delete (a) finalize\n+  acc_delete_finalize (&a, sizeof a);\n+#pragma acc exit data delete (a) finalize async (async++)\n+  acc_delete_finalize_async (&a, sizeof a, async++);\n+\n+  acc_wait_all ();\n+\n+  return 0;\n+}"}, {"sha": "319d6ccfd35f5322bd199e52ced531618d72c90d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr92984-1.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb25eb9ca373b293da3e8f2c1520dbb72271367/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92984-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb25eb9ca373b293da3e8f2c1520dbb72271367/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92984-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92984-1.c?ref=ddb25eb9ca373b293da3e8f2c1520dbb72271367", "patch": "@@ -0,0 +1,100 @@\n+/* Verify that 'acc_delete' etc. with zero size is a no-op.  */\n+\n+#include <assert.h>\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+\n+#define UNHANDLED_GOMP_MAP_ZERO_LEN_ARRAY_SECTION\n+\n+\n+static void\n+verify_mapped_unchanged (unsigned char *a, size_t N)\n+{\n+  assert (acc_is_present (a, N));\n+\n+  for (size_t i = 0; i < N; ++i)\n+    assert (a[i] == (unsigned char) i);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  const size_t N = 256;\n+\n+  unsigned char *a = (unsigned char *) malloc (N);\n+  assert (a);\n+\n+  for (size_t i = 0; i < N; ++i)\n+    a[i] = 51;\n+\n+  void *a_d = acc_copyin (a, N);\n+  assert (a_d);\n+\n+  for (size_t i = 0; i < N; ++i)\n+    a[i] = i;\n+\n+  int async = 0;\n+\n+  const size_t size = 0;\n+\n+#ifndef UNHANDLED_GOMP_MAP_ZERO_LEN_ARRAY_SECTION\n+#pragma acc exit data copyout (a[0:size])\n+  verify_mapped_unchanged (a, N);\n+#endif\n+  acc_copyout (a, size);\n+  verify_mapped_unchanged (a, N);\n+#ifndef UNHANDLED_GOMP_MAP_ZERO_LEN_ARRAY_SECTION\n+#pragma acc exit data copyout (a[0:size]) async (async++)\n+  verify_mapped_unchanged (a, N);\n+#endif\n+  acc_copyout_async (a, size, async++);\n+  verify_mapped_unchanged (a, N);\n+#ifndef UNHANDLED_GOMP_MAP_ZERO_LEN_ARRAY_SECTION\n+#pragma acc exit data copyout (a[0:size]) finalize\n+  verify_mapped_unchanged (a, N);\n+#endif\n+  acc_copyout_finalize (a, size);\n+  verify_mapped_unchanged (a, N);\n+#ifndef UNHANDLED_GOMP_MAP_ZERO_LEN_ARRAY_SECTION\n+#pragma acc exit data copyout (a[0:size]) finalize async (async++)\n+  verify_mapped_unchanged (a, N);\n+#endif\n+  acc_copyout_finalize_async (a, size, async++);\n+  verify_mapped_unchanged (a, N);\n+\n+#ifndef UNHANDLED_GOMP_MAP_ZERO_LEN_ARRAY_SECTION\n+#pragma acc exit data delete (a[0:size])\n+  verify_mapped_unchanged (a, N);\n+#endif\n+  acc_delete (a, size);\n+  verify_mapped_unchanged (a, N);\n+#ifndef UNHANDLED_GOMP_MAP_ZERO_LEN_ARRAY_SECTION\n+#pragma acc exit data delete (a[0:size]) async (async++)\n+  verify_mapped_unchanged (a, N);\n+#endif\n+  acc_delete_async (a, size, async++);\n+  verify_mapped_unchanged (a, N);\n+#ifndef UNHANDLED_GOMP_MAP_ZERO_LEN_ARRAY_SECTION\n+#pragma acc exit data delete (a[0:size]) finalize\n+  verify_mapped_unchanged (a, N);\n+#endif\n+  acc_delete_finalize (a, size);\n+  verify_mapped_unchanged (a, N);\n+#ifndef UNHANDLED_GOMP_MAP_ZERO_LEN_ARRAY_SECTION\n+#pragma acc exit data delete (a[0:size]) finalize async (async++)\n+  verify_mapped_unchanged (a, N);\n+#endif\n+  acc_delete_finalize_async (a, size, async++);\n+  verify_mapped_unchanged (a, N);\n+\n+  acc_wait_all ();\n+\n+  acc_delete (a, N);\n+#if !ACC_MEM_SHARED\n+  assert (!acc_is_present (a, N));\n+#endif\n+  free (a);\n+\n+  return 0;\n+}"}]}