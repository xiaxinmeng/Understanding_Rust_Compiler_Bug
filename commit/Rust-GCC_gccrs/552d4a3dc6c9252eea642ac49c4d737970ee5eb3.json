{"sha": "552d4a3dc6c9252eea642ac49c4d737970ee5eb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUyZDRhM2RjNmM5MjUyZWVhNjQyYWM0OWM0ZDczNzk3MGVlNWViMw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-05-05T00:01:26Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-05-05T00:01:26Z"}, "message": "[RS6000] Rewrite rs6000_frame_related to use simplify_replace_rtx\n\nModify SETs rather than using replace_rtx on the whole insn.\nRemoves fragile hacks preventing USE and CLOBBER being modified.\n\n\t* config/rs6000/rs6000.c (rs6000_frame_related): Rewrite.\n\nFrom-SVN: r235913", "tree": {"sha": "7fabab87e61ae6d96ba30a8ed3c6d9da53515048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fabab87e61ae6d96ba30a8ed3c6d9da53515048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/552d4a3dc6c9252eea642ac49c4d737970ee5eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552d4a3dc6c9252eea642ac49c4d737970ee5eb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552d4a3dc6c9252eea642ac49c4d737970ee5eb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552d4a3dc6c9252eea642ac49c4d737970ee5eb3/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "662fa3ba61d4fd0bc56803bc4d3866bced62bdc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/662fa3ba61d4fd0bc56803bc4d3866bced62bdc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/662fa3ba61d4fd0bc56803bc4d3866bced62bdc6"}], "stats": {"total": 118, "additions": 48, "deletions": 70}, "files": [{"sha": "64b2541eaa03f38011c111c58d6d6cc49a09b971", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552d4a3dc6c9252eea642ac49c4d737970ee5eb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552d4a3dc6c9252eea642ac49c4d737970ee5eb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=552d4a3dc6c9252eea642ac49c4d737970ee5eb3", "patch": "@@ -1,3 +1,7 @@\n+2016-05-05  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_frame_related): Rewrite.\n+\n 2016-05-05  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_savres_strategy): Don't use"}, {"sha": "701530205fca135d099cefd6f68bcf5fa82e54bf", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 44, "deletions": 70, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552d4a3dc6c9252eea642ac49c4d737970ee5eb3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552d4a3dc6c9252eea642ac49c4d737970ee5eb3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=552d4a3dc6c9252eea642ac49c4d737970ee5eb3", "patch": "@@ -24718,7 +24718,7 @@ output_probe_stack_range (rtx reg1, rtx reg2)\n }\n \n /* Add to 'insn' a note which is PATTERN (INSN) but with REG replaced\n-   with (plus:P (reg 1) VAL), and with REG2 replaced with RREG if REG2\n+   with (plus:P (reg 1) VAL), and with REG2 replaced with REPL2 if REG2\n    is not NULL.  It would be nice if dwarf2out_frame_debug_expr could\n    deduce these equivalences by itself so it wasn't necessary to hold\n    its hand so much.  Don't be tempted to always supply d2_f_d_e with\n@@ -24728,22 +24728,28 @@ output_probe_stack_range (rtx reg1, rtx reg2)\n \n static rtx\n rs6000_frame_related (rtx insn, rtx reg, HOST_WIDE_INT val,\n-\t\t      rtx reg2, rtx rreg)\n+\t\t      rtx reg2, rtx repl2)\n {\n-  rtx real, temp;\n+  rtx repl;\n \n-  if (REGNO (reg) == STACK_POINTER_REGNUM && reg2 == NULL_RTX)\n+  if (REGNO (reg) == STACK_POINTER_REGNUM)\n     {\n-      /* No need for any replacement.  Just set RTX_FRAME_RELATED_P.  */\n-      int i;\n-\n       gcc_checking_assert (val == 0);\n-      real = PATTERN (insn);\n-      if (GET_CODE (real) == PARALLEL)\n-\tfor (i = 0; i < XVECLEN (real, 0); i++)\n-\t  if (GET_CODE (XVECEXP (real, 0, i)) == SET)\n+      repl = NULL_RTX;\n+    }\n+  else\n+    repl = gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode, STACK_POINTER_REGNUM),\n+\t\t\t GEN_INT (val));\n+\n+  rtx pat = PATTERN (insn);\n+  if (!repl && !reg2)\n+    {\n+      /* No need for any replacement.  Just set RTX_FRAME_RELATED_P.  */\n+      if (GET_CODE (pat) == PARALLEL)\n+\tfor (int i = 0; i < XVECLEN (pat, 0); i++)\n+\t  if (GET_CODE (XVECEXP (pat, 0, i)) == SET)\n \t    {\n-\t      rtx set = XVECEXP (real, 0, i);\n+\t      rtx set = XVECEXP (pat, 0, i);\n \n \t      /* If this PARALLEL has been emitted for out-of-line\n \t\t register save functions, or store multiple, then omit\n@@ -24758,79 +24764,47 @@ rs6000_frame_related (rtx insn, rtx reg, HOST_WIDE_INT val,\n       return insn;\n     }\n \n-  /* copy_rtx will not make unique copies of registers, so we need to\n-     ensure we don't have unwanted sharing here.  */\n-  if (reg == reg2)\n-    reg = gen_raw_REG (GET_MODE (reg), REGNO (reg));\n-\n-  if (reg == rreg)\n-    reg = gen_raw_REG (GET_MODE (reg), REGNO (reg));\n-\n-  real = copy_rtx (PATTERN (insn));\n-\n-  if (reg2 != NULL_RTX)\n-    real = replace_rtx (real, reg2, rreg);\n-\n-  if (REGNO (reg) == STACK_POINTER_REGNUM)\n-    gcc_checking_assert (val == 0);\n-  else\n-    real = replace_rtx (real, reg,\n-\t\t\tgen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode,\n-\t\t\t\t\t\t\t  STACK_POINTER_REGNUM),\n-\t\t\t\t      GEN_INT (val)));\n-\n-  /* We expect that 'real' is either a SET or a PARALLEL containing\n+  /* We expect that 'pat' is either a SET or a PARALLEL containing\n      SETs (and possibly other stuff).  In a PARALLEL, all the SETs\n-     are important so they all have to be marked RTX_FRAME_RELATED_P.  */\n+     are important so they all have to be marked RTX_FRAME_RELATED_P.\n+     Call simplify_replace_rtx on the SETs rather than the whole insn\n+     so as to leave the other stuff alone (for example USE of r12).  */\n \n-  if (GET_CODE (real) == SET)\n+  if (GET_CODE (pat) == SET)\n     {\n-      rtx set = real;\n-\n-      temp = simplify_rtx (SET_SRC (set));\n-      if (temp)\n-\tSET_SRC (set) = temp;\n-      temp = simplify_rtx (SET_DEST (set));\n-      if (temp)\n-\tSET_DEST (set) = temp;\n-      if (GET_CODE (SET_DEST (set)) == MEM)\n-\t{\n-\t  temp = simplify_rtx (XEXP (SET_DEST (set), 0));\n-\t  if (temp)\n-\t    XEXP (SET_DEST (set), 0) = temp;\n-\t}\n+      if (repl)\n+\tpat = simplify_replace_rtx (pat, reg, repl);\n+      if (reg2)\n+\tpat = simplify_replace_rtx (pat, reg2, repl2);\n     }\n-  else\n+  else if (GET_CODE (pat) == PARALLEL)\n     {\n-      int i;\n+      pat = shallow_copy_rtx (pat);\n+      XVEC (pat, 0) = shallow_copy_rtvec (XVEC (pat, 0));\n \n-      gcc_assert (GET_CODE (real) == PARALLEL);\n-      for (i = 0; i < XVECLEN (real, 0); i++)\n-\tif (GET_CODE (XVECEXP (real, 0, i)) == SET)\n+      for (int i = 0; i < XVECLEN (pat, 0); i++)\n+\tif (GET_CODE (XVECEXP (pat, 0, i)) == SET)\n \t  {\n-\t    rtx set = XVECEXP (real, 0, i);\n-\n-\t    temp = simplify_rtx (SET_SRC (set));\n-\t    if (temp)\n-\t      SET_SRC (set) = temp;\n-\t    temp = simplify_rtx (SET_DEST (set));\n-\t    if (temp)\n-\t      SET_DEST (set) = temp;\n-\t    if (GET_CODE (SET_DEST (set)) == MEM)\n-\t      {\n-\t\ttemp = simplify_rtx (XEXP (SET_DEST (set), 0));\n-\t\tif (temp)\n-\t\t  XEXP (SET_DEST (set), 0) = temp;\n-\t      }\n+\t    rtx set = XVECEXP (pat, 0, i);\n+\n+\t    if (repl)\n+\t      set = simplify_replace_rtx (set, reg, repl);\n+\t    if (reg2)\n+\t      set = simplify_replace_rtx (set, reg2, repl2);\n+\t    XVECEXP (pat, 0, i) = set;\n+\n \t    /* Omit eh_frame info for any user-defined global regs.  */\n \t    if (!REG_P (SET_SRC (set))\n \t\t|| !fixed_reg_p (REGNO (SET_SRC (set))))\n \t      RTX_FRAME_RELATED_P (set) = 1;\n \t  }\n     }\n+  else\n+    gcc_unreachable ();\n \n   RTX_FRAME_RELATED_P (insn) = 1;\n-  add_reg_note (insn, REG_FRAME_RELATED_EXPR, real);\n+  if (repl || reg2)\n+    add_reg_note (insn, REG_FRAME_RELATED_EXPR, pat);\n \n   return insn;\n }"}]}