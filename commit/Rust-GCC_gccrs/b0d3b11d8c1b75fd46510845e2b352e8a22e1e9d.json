{"sha": "b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBkM2IxMWQ4YzFiNzVmZDQ2NTEwODQ1ZTJiMzUyZThhMjJlMWU5ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T16:03:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T16:03:58Z"}, "message": "[multiple changes]\n\n2009-04-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_warn.ads, sem_warn.adb (Check_Low_Bound_Tested): Catch more cases\n\tfor warning suppression.\n\n2009-04-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Use_One_Type): If the two use_type clauses are\n\tidentical, there is no redudancy to check.\n\n2009-04-10  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch5.adb (Expand_N_Extended_Return_Statement): Delete redundant\n\tcalls initializing SS_Allocator (which is initialized in following\n\tcode).\n\t(Expand_Simple_Function_Return): Add comment about False value for\n\tComes_From_Source on secondary-stack allocator.\n\n\t* exp_ch9.adb (Build_Entry_Family_Name): Add comment.\n\t(Build_Entry_Name): Add comment.\n\nFrom-SVN: r145926", "tree": {"sha": "9c46971d706cd103c0b864242794df7401ef4860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c46971d706cd103c0b864242794df7401ef4860"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/comments", "author": null, "committer": null, "parents": [{"sha": "1147c7040164e56f92f8f692d548049ec68189fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1147c7040164e56f92f8f692d548049ec68189fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1147c7040164e56f92f8f692d548049ec68189fe"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "10d2f78be8c67a432b5ac6ca2897fcf1d49284f9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d", "patch": "@@ -1,3 +1,24 @@\n+2009-04-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_warn.ads, sem_warn.adb (Check_Low_Bound_Tested): Catch more cases\n+\tfor warning suppression.\n+\n+2009-04-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Use_One_Type): If the two use_type clauses are\n+\tidentical, there is no redudancy to check.\n+\n+2009-04-10  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Extended_Return_Statement): Delete redundant\n+\tcalls initializing SS_Allocator (which is initialized in following\n+\tcode).\n+\t(Expand_Simple_Function_Return): Add comment about False value for\n+\tComes_From_Source on secondary-stack allocator.\n+\n+\t* exp_ch9.adb (Build_Entry_Family_Name): Add comment.\n+\t(Build_Entry_Name): Add comment.\n+\n 2009-04-10  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.ads, einfo.adb (Low_Bound_Tested): New name for Low_Bound_Known"}, {"sha": "99870dc873dd81fe8ee60284257cd098c6ed00d5", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d", "patch": "@@ -2814,8 +2814,6 @@ package body Exp_Ch5 is\n                                 Expression =>\n                                   New_Copy_Tree (Return_Obj_Expr)));\n \n-                        SS_Allocator := New_Copy_Tree (Heap_Allocator);\n-\n                      else\n                         --  If the function returns a class-wide type we cannot\n                         --  use the return type for the allocator. Instead we\n@@ -2841,19 +2839,20 @@ package body Exp_Ch5 is\n                         --  then the object will be default initialized twice.\n \n                         Set_No_Initialization (Heap_Allocator);\n-\n-                        SS_Allocator := New_Copy_Tree (Heap_Allocator);\n                      end if;\n \n                      --  If the No_Allocators restriction is active, then only\n                      --  an allocator for secondary stack allocation is needed.\n+                     --  It's OK for such allocators to have Comes_From_Source\n+                     --  set to False, because gigi knows not to flag them as\n+                     --  being a violation of No_Implicit_Heap_Allocations.\n \n                      if Restriction_Active (No_Allocators) then\n                         SS_Allocator   := Heap_Allocator;\n                         Heap_Allocator := Make_Null (Loc);\n \n-                     --  Otherwise the heap allocator may be needed, so we\n-                     --  make another allocator for secondary stack allocation.\n+                     --  Otherwise the heap allocator may be needed, so we make\n+                     --  another allocator for secondary stack allocation.\n \n                      else\n                         SS_Allocator := New_Copy_Tree (Heap_Allocator);\n@@ -2863,7 +2862,7 @@ package body Exp_Ch5 is\n                         --  allocator (that is, it will only be executed on\n                         --  behalf of callers that call the function as\n                         --  initialization for such an allocator). This\n-                        --  prevents errors when No_Implicit_Heap_Allocation\n+                        --  prevents errors when No_Implicit_Heap_Allocations\n                         --  is in force.\n \n                         Set_Comes_From_Source (Heap_Allocator, True);\n@@ -3925,6 +3924,10 @@ package body Exp_Ch5 is\n \n                Set_Associated_Storage_Pool (Acc_Typ, RTE (RE_SS_Pool));\n \n+               --  This is an allocator for the secondary stack, and it's fine\n+               --  to have Comes_From_Source set False on it, as gigi knows not\n+               --  to flag it as a violation of No_Implicit_Heap_Allocations.\n+\n                Alloc_Node :=\n                  Make_Allocator (Loc,\n                    Expression =>"}, {"sha": "1a91bf1b0a37408a2f2934c3ea3bc01a6f3d3c6d", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d", "patch": "@@ -1221,6 +1221,10 @@ package body Exp_Ch9 is\n          --  Generate:\n          --    new String'(\"<Entry name>\" & Lnn'Img);\n \n+         --  This is an implicit heap allocation, and Comes_From_Source is\n+         --  False, which ensures that it will get flagged as a violation of\n+         --  No_Implicit_Heap_Allocations when that restriction applies.\n+\n          Val :=\n            Make_Allocator (Loc,\n              Make_Qualified_Expression (Loc,\n@@ -1268,6 +1272,11 @@ package body Exp_Ch9 is\n \n       begin\n          Get_Name_String (Chars (Id));\n+\n+         --  This is an implicit heap allocation, and Comes_From_Source is\n+         --  False, which ensures that it will get flagged as a violation of\n+         --  No_Implicit_Heap_Allocations when that restriction applies.\n+\n          Val :=\n            Make_Allocator (Loc,\n              Make_Qualified_Expression (Loc,"}, {"sha": "a912fef80b14c2f75f49c238764474b8b1340216", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d", "patch": "@@ -7219,6 +7219,15 @@ package body Sem_Ch8 is\n                        and then\n                      Nkind (Parent (Clause2)) = N_Compilation_Unit\n                   then\n+\n+                     --  If the unit is a subprogram body that acts as spec,\n+                     --  the context clause is shared with the constructed\n+                     --  subprogram spec. Clearly there is no redundancy.\n+\n+                     if Clause1 = Clause2 then\n+                        return;\n+                     end if;\n+\n                      Unit1 := Unit (Parent (Clause1));\n                      Unit2 := Unit (Parent (Clause2));\n "}, {"sha": "3550392f872711d1c6cc3ce08099087a7181b917", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d", "patch": "@@ -619,10 +619,17 @@ package body Sem_Warn is\n               and then Attribute_Name (L) = Name_First\n               and then Is_Entity_Name (Prefix (L))\n               and then Is_Formal (Entity (Prefix (L)))\n-              and then Nkind (R) = N_Integer_Literal\n             then\n                Set_Low_Bound_Tested (Entity (Prefix (L)));\n             end if;\n+\n+            if Nkind (R) = N_Attribute_Reference\n+              and then Attribute_Name (R) = Name_First\n+              and then Is_Entity_Name (Prefix (R))\n+              and then Is_Formal (Entity (Prefix (R)))\n+            then\n+               Set_Low_Bound_Tested (Entity (Prefix (R)));\n+            end if;\n          end;\n       end if;\n    end Check_Low_Bound_Tested;"}, {"sha": "b375b20dd518832afb655f181c686177392971e2", "filename": "gcc/ada/sem_warn.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2Fsem_warn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d/gcc%2Fada%2Fsem_warn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.ads?ref=b0d3b11d8c1b75fd46510845e2b352e8a22e1e9d", "patch": "@@ -170,10 +170,11 @@ package Sem_Warn is\n \n    procedure Check_Low_Bound_Tested (Expr : Node_Id);\n    --  Expr is the node for a comparison operation. This procedure checks if\n-   --  the comparison is a source comparison of P'First with a literal and if\n-   --  so, sets the Low_Bound_Tested flag in Expr to suppress warnings about\n-   --  improper low bound assumptions (we assume that if the code explicitly\n-   --  checks X'First, then it is not operating in blind assumption mode).\n+   --  the comparison is a source comparison of P'First with some other value\n+   --  and if so, sets the Low_Bound_Tested flag in Expr to suppress warnings\n+   --  about improper low bound assumptions (we assume that if the code has a\n+   --  test that explicitly checks X'First, then it is not operating in blind\n+   --  assumption mode).\n \n    procedure Warn_On_Known_Condition (C : Node_Id);\n    --  C is a node for a boolean expression resulting from a relational"}]}