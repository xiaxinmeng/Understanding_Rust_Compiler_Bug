{"sha": "1c28b93579f6082bde3b6fb9f548151be63152a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMyOGI5MzU3OWY2MDgyYmRlM2I2ZmI5ZjU0ODE1MWJlNjMxNTJhMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-09-06T17:58:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-09-06T17:58:27Z"}, "message": "ctype_noninline.h [...]: Remove using _C_legacy::__ctype_*.\n\n\t* config/os/gnu-linux/ctype_noninline.h\n\t[_GLIBCPP_USE_SHADOW_HEADERS]: Remove using _C_legacy::__ctype_*.\n\t(ctype<char>::classic_table): If _GLIBCPP_C_LOCALE_GNU, return\n\t_S_c_locale->__ctype_b, otherwise temporarily switch to \"C\" locale\n\tand return __ctype_b.\n\t(ctype<char>::ctype(__c_locale, const mask*, bool, size_t)): If not\n\t_GLIBCPP_C_LOCALE_GNU, temporarily switch to \"C\" locale and\n\tinitialize using __ctype_{b,tolower,toupper}.\n\t(ctype<char>::ctype(const mask*, bool, size_t)): If\n\t_GLIBCPP_C_LOCALE_GNU, initialize using\n\t_S_c_locale->__ctype_{b,tolower,toupper}, otherwise temporarily\n\tswitch to \"C\" locale and initialize using __ctype_{b,tolower,toupper}.\n\nFrom-SVN: r56893", "tree": {"sha": "9cea2eb5858e1a74bfa18df13bc0c3dfbfa6375b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cea2eb5858e1a74bfa18df13bc0c3dfbfa6375b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c28b93579f6082bde3b6fb9f548151be63152a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c28b93579f6082bde3b6fb9f548151be63152a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c28b93579f6082bde3b6fb9f548151be63152a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c28b93579f6082bde3b6fb9f548151be63152a3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ef835f288446d2e3be42e7778f1fea7cbb0d079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef835f288446d2e3be42e7778f1fea7cbb0d079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef835f288446d2e3be42e7778f1fea7cbb0d079"}], "stats": {"total": 100, "additions": 84, "deletions": 16}, "files": [{"sha": "b86ca41f4cc5e92c8a6620e5dbfe9429040fab21", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28b93579f6082bde3b6fb9f548151be63152a3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28b93579f6082bde3b6fb9f548151be63152a3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1c28b93579f6082bde3b6fb9f548151be63152a3", "patch": "@@ -1,3 +1,18 @@\n+2002-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/os/gnu-linux/ctype_noninline.h\n+\t[_GLIBCPP_USE_SHADOW_HEADERS]: Remove using _C_legacy::__ctype_*.\n+\t(ctype<char>::classic_table): If _GLIBCPP_C_LOCALE_GNU, return\n+\t_S_c_locale->__ctype_b, otherwise temporarily switch to \"C\" locale\n+\tand return __ctype_b.\n+\t(ctype<char>::ctype(__c_locale, const mask*, bool, size_t)): If not\n+\t_GLIBCPP_C_LOCALE_GNU, temporarily switch to \"C\" locale and\n+\tinitialize using __ctype_{b,tolower,toupper}.\n+\t(ctype<char>::ctype(const mask*, bool, size_t)): If\n+\t_GLIBCPP_C_LOCALE_GNU, initialize using\n+\t_S_c_locale->__ctype_{b,tolower,toupper}, otherwise temporarily\n+\tswitch to \"C\" locale and initialize using __ctype_{b,tolower,toupper}.\n+\n 2002-09-05  Paolo Carlini  <pcarlini@unitus.it>\n             Roland McGrath  <roland@redhat.com>\n "}, {"sha": "1578828ccedd5c55711edc789a994d73f063bc88", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_noninline.h", "status": "modified", "additions": 69, "deletions": 16, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28b93579f6082bde3b6fb9f548151be63152a3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28b93579f6082bde3b6fb9f548151be63152a3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h?ref=1c28b93579f6082bde3b6fb9f548151be63152a3", "patch": "@@ -34,16 +34,32 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n \n-#if _GLIBCPP_USE_SHADOW_HEADERS\n-  using _C_legacy::__ctype_toupper;\n-  using _C_legacy::__ctype_tolower;\n-  using _C_legacy::__ctype_b;\n-#endif\n-\n+#if _GLIBCPP_C_LOCALE_GNU\n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n-  { return __ctype_b; }  \n-  \n+  {\n+    if (!_S_c_locale)\n+      _S_create_c_locale(_S_c_locale, \"C\");\n+    return _S_c_locale->__ctype_b;\n+  }\n+#else\n+  const ctype_base::mask*\n+  ctype<char>::classic_table() throw()\n+  {\n+    const ctype_base::mask* __ret;\n+    char* __old = strdup(setlocale(LC_CTYPE, NULL));\n+    setlocale(LC_CTYPE, \"C\");\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    __ret = *__ctype_b_loc();\n+#else\n+    __ret = __ctype_b;\n+#endif\n+    setlocale(LC_CTYPE, __old);\n+    free(__old);\n+    return __ret;\n+  }\n+#endif\n+\n #if _GLIBCPP_C_LOCALE_GNU\n   ctype<char>::ctype(__c_locale __cloc, const mask* __table, bool __del, \n \t\t     size_t __refs) \n@@ -57,17 +73,54 @@\n #else\n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n-  _M_table(__table ? __table : classic_table())\n-  { _M_c_locale_ctype = _S_c_locale; }\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)\n+  {\n+    char* __old=strdup(setlocale(LC_CTYPE, NULL));\n+    setlocale(LC_CTYPE, \"C\");\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    _M_toupper = *__ctype_toupper_loc();\n+    _M_tolower = *__ctype_tolower_loc();\n+    _M_table = __table ? __table : *__ctype_b_loc();\n+#else\n+    _M_toupper = __ctype_toupper;\n+    _M_tolower = __ctype_tolower;\n+    _M_table = __table ? __table : __ctype_b;\n+#endif\n+    setlocale(LC_CTYPE, __old);\n+    free(__old);\n+    _M_c_locale_ctype = _S_c_locale;\n+  }\n #endif\n \n+#if _GLIBCPP_C_LOCALE_GNU\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n+  __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)\n+  {\n+    _M_c_locale_ctype = _S_c_locale;\n+    _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n+    _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n+    _M_table = __table ? __table : _M_c_locale_ctype->__ctype_b;\n+  }\n+#else\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n-  __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-  _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n-  _M_table(__table ? __table : classic_table())\n-  { _M_c_locale_ctype = _S_c_locale; }\n+  __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)\n+  {\n+    char* __old=strdup(setlocale(LC_CTYPE, NULL));\n+    setlocale(LC_CTYPE, \"C\");\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    _M_toupper = *__ctype_toupper_loc();\n+    _M_tolower = *__ctype_tolower_loc();\n+    _M_table = __table ? __table : *__ctype_b_loc();\n+#else\n+    _M_toupper = __ctype_toupper;\n+    _M_tolower = __ctype_tolower;\n+    _M_table = __table ? __table : __ctype_b;\n+#endif\n+    setlocale(LC_CTYPE, __old);\n+    free(__old);\n+    _M_c_locale_ctype = _S_c_locale;\n+  }\n+#endif\n \n   char\n   ctype<char>::do_toupper(char __c) const"}]}