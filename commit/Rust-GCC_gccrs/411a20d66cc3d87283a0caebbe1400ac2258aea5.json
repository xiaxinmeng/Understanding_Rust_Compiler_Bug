{"sha": "411a20d66cc3d87283a0caebbe1400ac2258aea5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDExYTIwZDY2Y2MzZDg3MjgzYTBjYWViYmUxNDAwYWMyMjU4YWVhNQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-05-13T22:01:59Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-05-13T22:01:59Z"}, "message": "ipa-prop.c (ipa_cst_from_jfunc): New function.\n\n2011-05-13  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.c (ipa_cst_from_jfunc): New function.\n\t* ipa-prop.h (ipa_cst_from_jfunc): Declare.\n\t* ipa-inline-analysis.c (evaluate_conditions_for_edge): Use it.\n\t(evaluate_conditions_for_ipcp_clone): Removed.\n\t(estimate_ipcp_clone_size_and_time): Accept vector of known constants.\n\t* ipa-cp.c (ipcp_estimate_growth): Build vector of known constants.\n\t* ipa-inline.h (estimate_ipcp_clone_size_and_time): Update.\n\nFrom-SVN: r173739", "tree": {"sha": "2a7c206f5ca8bf502c60fb2e517ccdc7c268a4bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a7c206f5ca8bf502c60fb2e517ccdc7c268a4bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/411a20d66cc3d87283a0caebbe1400ac2258aea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411a20d66cc3d87283a0caebbe1400ac2258aea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/411a20d66cc3d87283a0caebbe1400ac2258aea5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411a20d66cc3d87283a0caebbe1400ac2258aea5/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d61d771f3bc92b15a77aedb29e36ffe13d3ca47a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d61d771f3bc92b15a77aedb29e36ffe13d3ca47a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d61d771f3bc92b15a77aedb29e36ffe13d3ca47a"}], "stats": {"total": 95, "additions": 55, "deletions": 40}, "files": [{"sha": "ef89e7a17d5c4eb360e9a7fc0e8be091048beecd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=411a20d66cc3d87283a0caebbe1400ac2258aea5", "patch": "@@ -1,3 +1,13 @@\n+2011-05-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.c (ipa_cst_from_jfunc): New function.\n+\t* ipa-prop.h (ipa_cst_from_jfunc): Declare.\n+\t* ipa-inline-analysis.c (evaluate_conditions_for_edge): Use it.\n+\t(evaluate_conditions_for_ipcp_clone): Removed.\n+\t(estimate_ipcp_clone_size_and_time): Accept vector of known constants.\n+\t* ipa-cp.c (ipcp_estimate_growth): Build vector of known constants.\n+\t* ipa-inline.h (estimate_ipcp_clone_size_and_time): Update.\n+\n 2011-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* cfgrtl.c (cfg_layout_redirect_edge_and_branch): Adjust dump message."}, {"sha": "18bfe90235deb59988c19d286bb1735e34363326", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=411a20d66cc3d87283a0caebbe1400ac2258aea5", "patch": "@@ -1068,6 +1068,7 @@ ipcp_estimate_growth (struct cgraph_node *node)\n   int removable_args = 0;\n   bool need_original\n      = !cgraph_will_be_removed_from_program_if_no_direct_calls (node);\n+  VEC (tree, heap) *known_vals = NULL;\n   struct ipa_node_params *info;\n   int i, count;\n   int growth;\n@@ -1085,6 +1086,7 @@ ipcp_estimate_growth (struct cgraph_node *node)\n \n   info = IPA_NODE_REF (node);\n   count = ipa_get_param_count (info);\n+  VEC_safe_grow_cleared (tree, heap, known_vals, count);\n   if (node->local.can_change_signature)\n     for (i = 0; i < count; i++)\n       {\n@@ -1095,14 +1097,18 @@ ipcp_estimate_growth (struct cgraph_node *node)\n \t  removable_args++;\n \n \tif (lat->type == IPA_CONST_VALUE)\n-\t  removable_args++;\n+\t  {\n+\t    removable_args++;\n+\t    VEC_replace (tree, known_vals, i, lat->constant);\n+\t  }\n       }\n \n   /* We make just very simple estimate of savings for removal of operand from\n      call site.  Precise cost is difficult to get, as our size metric counts\n      constants and moves as free.  Generally we are looking for cases that\n      small function is called very many times.  */\n-  estimate_ipcp_clone_size_and_time (node, &growth, NULL);\n+  estimate_ipcp_clone_size_and_time (node, known_vals, &growth, NULL);\n+  VEC_free (tree, heap, known_vals);\n   growth = growth\n   \t   - removable_args * redirectable_node_callers;\n   if (growth < 0)"}, {"sha": "99d691131dc276318dd2abaaae057b5642cdd617", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=411a20d66cc3d87283a0caebbe1400ac2258aea5", "patch": "@@ -592,7 +592,6 @@ evaluate_conditions_for_edge (struct cgraph_edge *e, bool inline_p)\n       struct ipa_node_params *parms_info;\n       struct ipa_edge_args *args = IPA_EDGE_REF (e);\n       int i, count = ipa_get_cs_argument_count (args);\n-      struct ipcp_lattice lat;\n       VEC (tree, heap) *known_vals = NULL;\n \n       if (e->caller->global.inlined_to)\n@@ -603,9 +602,10 @@ evaluate_conditions_for_edge (struct cgraph_edge *e, bool inline_p)\n       VEC_safe_grow_cleared (tree, heap, known_vals, count);\n       for (i = 0; i < count; i++)\n \t{\n-\t  ipa_lattice_from_jfunc (parms_info, &lat, ipa_get_ith_jump_func (args, i));\n-\t  if (lat.type == IPA_CONST_VALUE)\n-\t    VEC_replace (tree, known_vals, i, lat.constant);\n+\t  tree cst = ipa_cst_from_jfunc (parms_info,\n+\t\t\t\t\t ipa_get_ith_jump_func (args, i));\n+\t  if (cst)\n+\t    VEC_replace (tree, known_vals, i, cst);\n \t}\n       clause = evaluate_conditions_for_known_args (e->callee,\n \t\t\t\t\t\t   inline_p, known_vals);\n@@ -619,31 +619,6 @@ evaluate_conditions_for_edge (struct cgraph_edge *e, bool inline_p)\n }\n \n \n-/* Work out what conditions might be true at invocation of NODE\n-   that is (future) ipa-cp clone.  */\n-\n-static clause_t\n-evaluate_conditions_for_ipcp_clone (struct cgraph_node *node)\n-{\n-  struct ipa_node_params *parms_info = IPA_NODE_REF (node);\n-  int i, count = ipa_get_param_count (parms_info);\n-  struct ipcp_lattice *lat;\n-  VEC (tree, heap) *known_vals = NULL;\n-  clause_t clause;\n-\n-  VEC_safe_grow_cleared (tree, heap, known_vals, count);\n-  for (i = 0; i < count; i++)\n-    {\n-      lat = ipa_get_lattice (parms_info, i);\n-      if (lat->type == IPA_CONST_VALUE)\n-\tVEC_replace (tree, known_vals, i, lat->constant);\n-    }\n-  clause = evaluate_conditions_for_known_args (node, false, known_vals);\n-  VEC_free (tree, heap, known_vals);\n-  return clause;\n-}\n-\n-\n /* Allocate the inline summary vector or resize it to cover all cgraph nodes. */\n \n static void\n@@ -1823,18 +1798,19 @@ estimate_node_size_and_time (struct cgraph_node *node,\n }\n \n \n-/* Estimate size and time needed to execute callee of EDGE assuming\n-   that parameters known to be constant at caller of EDGE are\n-   propagated.  If INLINE_P is true, it is assumed that call will\n-   be inlined.  */\n+/* Estimate size and time needed to execute callee of EDGE assuming that\n+   parameters known to be constant at caller of EDGE are propagated.\n+   KNOWN_VALs is a vector of assumed known constant values for parameters.  */\n \n void\n estimate_ipcp_clone_size_and_time (struct cgraph_node *node,\n+\t\t\t\t   VEC (tree, heap) *known_vals,\n \t\t                   int *ret_size, int *ret_time)\n {\n-  estimate_node_size_and_time (node,\n-\t\t\t       evaluate_conditions_for_ipcp_clone (node),\n-\t\t\t       ret_size, ret_time);\n+  clause_t clause;\n+\n+  clause = evaluate_conditions_for_known_args (node, false, known_vals);\n+  estimate_node_size_and_time (node, clause, ret_size, ret_time);\n }\n \n "}, {"sha": "8162cf2d77772c91b3dc7172e5ce1d9cfcf7cad0", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=411a20d66cc3d87283a0caebbe1400ac2258aea5", "patch": "@@ -149,7 +149,9 @@ void inline_free_summary (void);\n void initialize_inline_failed (struct cgraph_edge *);\n int estimate_time_after_inlining (struct cgraph_node *, struct cgraph_edge *);\n int estimate_size_after_inlining (struct cgraph_node *, struct cgraph_edge *);\n-void estimate_ipcp_clone_size_and_time (struct cgraph_node *, int *, int *);\n+void estimate_ipcp_clone_size_and_time (struct cgraph_node *,\n+\t\t\t\t\tVEC (tree, heap) *known_vals,\n+\t\t\t\t\tint *, int *);\n int do_estimate_growth (struct cgraph_node *);\n void inline_merge_summary (struct cgraph_edge *edge);\n int do_estimate_edge_growth (struct cgraph_edge *edge);"}, {"sha": "70622e5e4355ba1007b20947e98624d725a42159", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=411a20d66cc3d87283a0caebbe1400ac2258aea5", "patch": "@@ -3002,6 +3002,7 @@ ipa_update_after_lto_read (void)\n /* Given the jump function JFUNC, compute the lattice LAT that describes the\n    value coming down the callsite. INFO describes the caller node so that\n    pass-through jump functions can be evaluated.  */\n+\n void\n ipa_lattice_from_jfunc (struct ipa_node_params *info, struct ipcp_lattice *lat,\n \t\t\t struct ipa_jump_func *jfunc)\n@@ -3061,3 +3062,19 @@ ipa_lattice_from_jfunc (struct ipa_node_params *info, struct ipcp_lattice *lat,\n   else\n     lat->type = IPA_BOTTOM;\n }\n+\n+/* Determine whether JFUNC evaluates to a constant and if so, return it.\n+   Otherwise return NULL. INFO describes the caller node so that pass-through\n+   jump functions can be evaluated.  */\n+\n+tree\n+ipa_cst_from_jfunc (struct ipa_node_params *info, struct ipa_jump_func *jfunc)\n+{\n+  struct ipcp_lattice lat;\n+\n+  ipa_lattice_from_jfunc (info, &lat, jfunc);\n+  if (lat.type == IPA_CONST_VALUE)\n+    return lat.constant;\n+  else\n+    return NULL_TREE;\n+}"}, {"sha": "89a17f4b9d0b94094e98cf519c10d6a2b86faba5", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411a20d66cc3d87283a0caebbe1400ac2258aea5/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=411a20d66cc3d87283a0caebbe1400ac2258aea5", "patch": "@@ -521,8 +521,12 @@ void ipa_prop_write_jump_functions (cgraph_node_set set);\n void ipa_prop_read_jump_functions (void);\n void ipa_update_after_lto_read (void);\n int ipa_get_param_decl_index (struct ipa_node_params *, tree);\n-void ipa_lattice_from_jfunc (struct ipa_node_params *info, struct ipcp_lattice *lat,\n+void ipa_lattice_from_jfunc (struct ipa_node_params *info,\n+\t\t\t     struct ipcp_lattice *lat,\n \t\t\t     struct ipa_jump_func *jfunc);\n+tree ipa_cst_from_jfunc (struct ipa_node_params *info,\n+\t\t\t struct ipa_jump_func *jfunc);\n+\n \n /* From tree-sra.c:  */\n tree build_ref_for_offset (location_t, tree, HOST_WIDE_INT, tree,"}]}