{"sha": "5a5c5784d89008664ab42c17efcab7198b132456", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE1YzU3ODRkODkwMDg2NjRhYjQyYzE3ZWZjYWI3MTk4YjEzMjQ1Ng==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2016-12-05T11:16:38Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2016-12-05T11:16:38Z"}, "message": "[ARC] Remove unused patterns, refactor unspec+offset pattern gen.\n\n2016-12-05  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc-protos.h (insn_is_tls_gd_dispatch): Remove.\n\t* config/arc/arc.c (arc_unspec_offset): New function.\n\t(arc_finalize_pic): Change.\n\t(arc_emit_call_tls_get_addr): Likewise.\n\t(arc_legitimize_tls_address): Likewise.\n\t(arc_legitimize_pic_address): Likewise.\n\t(insn_is_tls_gd_dispatch): Remove.\n\t* config/arc/arc.h (INSN_REFERENCES_ARE_DELAYED): Change.\n\t* config/arc/arc.md (ls_gd_load): Remove unused pattern.\n\t(tls_gd_dispatch): Likewise.\n\nFrom-SVN: r243244", "tree": {"sha": "0f9c2bad40c6cc82f2ca09eda98853072a4893a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f9c2bad40c6cc82f2ca09eda98853072a4893a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a5c5784d89008664ab42c17efcab7198b132456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5c5784d89008664ab42c17efcab7198b132456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a5c5784d89008664ab42c17efcab7198b132456", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5c5784d89008664ab42c17efcab7198b132456/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aad6838ec786662b6ffb28c494564aba29ad1a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad6838ec786662b6ffb28c494564aba29ad1a4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad6838ec786662b6ffb28c494564aba29ad1a4e"}], "stats": {"total": 91, "additions": 32, "deletions": 59}, "files": [{"sha": "c5095c2599cee0df8328c5c0e6e2623130f62ac5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5c5784d89008664ab42c17efcab7198b132456/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5c5784d89008664ab42c17efcab7198b132456/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a5c5784d89008664ab42c17efcab7198b132456", "patch": "@@ -1,3 +1,16 @@\n+2016-12-05  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-protos.h (insn_is_tls_gd_dispatch): Remove.\n+\t* config/arc/arc.c (arc_unspec_offset): New function.\n+\t(arc_finalize_pic): Change.\n+\t(arc_emit_call_tls_get_addr): Likewise.\n+\t(arc_legitimize_tls_address): Likewise.\n+\t(arc_legitimize_pic_address): Likewise.\n+\t(insn_is_tls_gd_dispatch): Remove.\n+\t* config/arc/arc.h (INSN_REFERENCES_ARE_DELAYED): Change.\n+\t* config/arc/arc.md (ls_gd_load): Remove unused pattern.\n+\t(tls_gd_dispatch): Likewise.\n+\n 2016-12-025  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm.c (TARGET_ASM_INIT_SECTIONS): Fix wrong undef"}, {"sha": "bdbf7ce77f268aab74c5dd5e78d35f02e64fc97d", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5c5784d89008664ab42c17efcab7198b132456/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5c5784d89008664ab42c17efcab7198b132456/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=5a5c5784d89008664ab42c17efcab7198b132456", "patch": "@@ -121,6 +121,5 @@ extern int regno_clobbered_p (unsigned int, rtx_insn *, machine_mode, int);\n extern int arc_return_slot_offset (void);\n extern bool arc_legitimize_reload_address (rtx *, machine_mode, int, int);\n extern void arc_secondary_reload_conv (rtx, rtx, rtx, bool);\n-extern bool insn_is_tls_gd_dispatch (rtx_insn *);\n extern void arc_cpu_cpp_builtins (cpp_reader *);\n extern bool arc_store_addr_hazard_p (rtx_insn *, rtx_insn *);"}, {"sha": "a0aa16e75b4b67dcf367f98b4555db4d42361344", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5c5784d89008664ab42c17efcab7198b132456/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5c5784d89008664ab42c17efcab7198b132456/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=5a5c5784d89008664ab42c17efcab7198b132456", "patch": "@@ -2771,6 +2771,15 @@ arc_return_slot_offset ()\n \n /* PIC */\n \n+/* Helper to generate unspec constant.  */\n+\n+static rtx\n+arc_unspec_offset (rtx loc, int unspec)\n+{\n+  return gen_rtx_CONST (Pmode, gen_rtx_UNSPEC (Pmode, gen_rtvec (1, loc),\n+\t\t\t\t\t       unspec));\n+}\n+\n /* Emit special PIC prologues and epilogues.  */\n /* If the function has any GOTOFF relocations, then the GOTBASE\n    register has to be setup in the prologue\n@@ -2796,9 +2805,7 @@ arc_finalize_pic (void)\n   gcc_assert (flag_pic != 0);\n \n   pat = gen_rtx_SYMBOL_REF (Pmode, \"_DYNAMIC\");\n-  pat = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, pat), ARC_UNSPEC_GOT);\n-  pat = gen_rtx_CONST (Pmode, pat);\n-\n+  pat = arc_unspec_offset (pat, ARC_UNSPEC_GOT);\n   pat = gen_rtx_SET (baseptr_rtx, pat);\n \n   emit_insn (pat);\n@@ -4866,8 +4873,7 @@ arc_emit_call_tls_get_addr (rtx sym, int reloc, rtx eqv)\n \n   start_sequence ();\n \n-  rtx x = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, sym), reloc);\n-  x = gen_rtx_CONST (Pmode, x);\n+  rtx x = arc_unspec_offset (sym, reloc);\n   emit_move_insn (r0, x);\n   use_reg (&call_fusage, r0);\n \n@@ -4923,17 +4929,18 @@ arc_legitimize_tls_address (rtx addr, enum tls_model model)\n       addr = gen_rtx_CONST (Pmode, addr);\n       base = arc_legitimize_tls_address (base, TLS_MODEL_GLOBAL_DYNAMIC);\n       return gen_rtx_PLUS (Pmode, force_reg (Pmode, base), addr);\n+\n     case TLS_MODEL_GLOBAL_DYNAMIC:\n       return arc_emit_call_tls_get_addr (addr, UNSPEC_TLS_GD, addr);\n+\n     case TLS_MODEL_INITIAL_EXEC:\n-      addr = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_TLS_IE);\n-      addr = gen_rtx_CONST (Pmode, addr);\n+      addr = arc_unspec_offset (addr, UNSPEC_TLS_IE);\n       addr = copy_to_mode_reg (Pmode, gen_const_mem (Pmode, addr));\n       return gen_rtx_PLUS (Pmode, arc_get_tp (), addr);\n+\n     case TLS_MODEL_LOCAL_EXEC:\n     local_exec:\n-      addr = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_TLS_OFF);\n-      addr = gen_rtx_CONST (Pmode, addr);\n+      addr = arc_unspec_offset (addr, UNSPEC_TLS_OFF);\n       return gen_rtx_PLUS (Pmode, arc_get_tp (), addr);\n     default:\n       gcc_unreachable ();\n@@ -4964,14 +4971,11 @@ arc_legitimize_pic_address (rtx orig, rtx oldx)\n       else if (!flag_pic)\n \treturn orig;\n       else if (CONSTANT_POOL_ADDRESS_P (addr) || SYMBOL_REF_LOCAL_P (addr))\n-\treturn gen_rtx_CONST (Pmode,\n-\t\t\t      gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr),\n-\t\t\t      ARC_UNSPEC_GOTOFFPC));\n+\treturn arc_unspec_offset (addr, ARC_UNSPEC_GOTOFFPC);\n \n       /* This symbol must be referenced via a load from the Global\n \t Offset Table (@GOTPC).  */\n-      pat = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), ARC_UNSPEC_GOT);\n-      pat = gen_rtx_CONST (Pmode, pat);\n+      pat = arc_unspec_offset (addr, ARC_UNSPEC_GOT);\n       pat = gen_const_mem (Pmode, pat);\n \n       if (oldx == NULL)\n@@ -9985,15 +9989,6 @@ arc_dwarf_register_span (rtx rtl)\n    return p;\n }\n \n-/* We can't inline this in INSN_REFERENCES_ARE_DELAYED because\n-   resource.h doesn't include the required header files.  */\n-\n-bool\n-insn_is_tls_gd_dispatch (rtx_insn *insn)\n-{\n-  return recog_memoized (insn) == CODE_FOR_tls_gd_dispatch;\n-}\n-\n /* Return true if OP is an acceptable memory operand for ARCompact\n    16-bit load instructions of MODE.\n "}, {"sha": "64bd9e0212c88a55ae082fd108e1cdb68b720c8f", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5c5784d89008664ab42c17efcab7198b132456/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5c5784d89008664ab42c17efcab7198b132456/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=5a5c5784d89008664ab42c17efcab7198b132456", "patch": "@@ -1612,7 +1612,7 @@ extern enum arc_function_type arc_compute_function_type (struct function *);\n    && (get_attr_type (X) == TYPE_CALL || get_attr_type (X) == TYPE_SFUNC))\n \n #define INSN_REFERENCES_ARE_DELAYED(insn)\t\t\t\t\\\n-  (INSN_SETS_ARE_DELAYED (insn) && !insn_is_tls_gd_dispatch (insn))\n+  (INSN_SETS_ARE_DELAYED (insn))\n \n #define CALL_ATTR(X, NAME) \\\n   ((CALL_P (X) || NONJUMP_INSN_P (X)) \\"}, {"sha": "18bc68f8f5eacb263f379c088ef63db54abffc98", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5c5784d89008664ab42c17efcab7198b132456/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5c5784d89008664ab42c17efcab7198b132456/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=5a5c5784d89008664ab42c17efcab7198b132456", "patch": "@@ -5486,21 +5486,6 @@\n   [(set_attr \"is_sfunc\" \"yes\")\n    (set_attr \"predicable\" \"yes\")])\n \n-(define_insn \"tls_gd_load\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcq#q,c\")\n-\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"Rcq#q,c\")\n-\t\t    (match_operand:SI 2 \"symbolic_operand\" \"X,X\")]\n-\t UNSPEC_TLS_GD))]\n-  \"\"\n-  \".tls_gd_ld %2`ld%? %0,[%1]\"\n-  [(set_attr \"type\" \"load\")\n-   ; if the linker has to patch this into IE, we need a long insn\n-   ; (FIXME: or two short insn, ld_s / jl_s.  missing -Os optimization.)\n-   (set_attr_alternative \"iscompact\"\n-     [(cond [(ne (symbol_ref \"arc_tp_regno == 30\") (const_int 0))\n-\t     (const_string \"*\")] (const_string \"maybe\"))\n-      (const_string \"*\")])])\n-\n (define_insn \"tls_gd_get_addr\"\n   [(set (reg:SI R0_REG)\n \t(call:SI (mem:SI (unspec:SI [(match_operand:SI 0\n@@ -5514,25 +5499,6 @@\n    ; With TARGET_MEDIUM_CALLS, plt calls are not predicable.\n    (set_attr \"predicable\" \"no\")])\n \n-; We make this call specific to the tls symbol to avoid commoning this\n-; with calls for other symbols; we want the linker to be able to\n-(define_insn \"tls_gd_dispatch\"\n-  [(set (reg:SI R0_REG)\n-\t(unspec:SI\n-\t  [(reg:SI R0_REG)\n-\t   (call (mem:SI (match_operand:SI 0 \"register_operand\" \"Rcq,q,c\"))\n-\t\t (const_int 0))\n-\t   (match_operand:SI 1 \"symbolic_operand\" \"X,X,X\")]\n-\t UNSPEC_TLS_GD))\n-   (clobber (reg:SI RETURN_ADDR_REGNUM))\n-   (clobber (reg:DI R10_REG))\n-   (clobber (reg:SI R12_REG))]\n-  \"\"\n-  \".tls_gd_call %1`jl%!%* [%0]\"\n-  [(set_attr \"type\" \"call\")\n-   (set_attr \"iscompact\" \"maybe,false,*\")\n-   (set_attr \"predicable\" \"no,no,yes\")])\n-\n ;; For thread pointer builtins\n (define_expand \"get_thread_pointersi\"\n   [(set (match_operand:SI 0 \"register_operand\") (match_dup 1))]"}]}