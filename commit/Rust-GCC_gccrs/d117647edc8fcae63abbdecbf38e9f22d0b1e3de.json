{"sha": "d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "node_id": "C_kwDOANBUbNoAKGQxMTc2NDdlZGM4ZmNhZTYzYWJiZGVjYmYzOGU5ZjIyZDBiMWUzZGU", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-10-10T14:21:40Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:06:14Z"}, "message": "arm: improve tests for vmin*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminvq_u8.c: Likewise.", "tree": {"sha": "fa0af7ed7f54a82823c34f3e9bb8d44e5e509a65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa0af7ed7f54a82823c34f3e9bb8d44e5e509a65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa5a44736062eeccd241ebeb1771bd77b7fd168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa5a44736062eeccd241ebeb1771bd77b7fd168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa5a44736062eeccd241ebeb1771bd77b7fd168"}], "stats": {"total": 1575, "additions": 1320, "deletions": 255}, "files": [{"sha": "925b9154ca7144e5d718edf4335bfed181ce0cc5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_m_s16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminat.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminaq_m_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vminat.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminat.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminaq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "296f69dfcdadb720a2ef3d6364f6433ea457f6ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_m_s32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminat.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminaq_m_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vminat.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminat.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminaq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cf6fecc3461b4a8c9068bc571a1ac64ecc4a016a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_m_s8.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_m_s8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminat.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminaq_m_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vminat.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminat.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminaq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "63f59f8c80a4874947fca915c3795c4b6e643a3f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmina.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, int16x8_t b)\n {\n   return vminaq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmina.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmina.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, int16x8_t b)\n {\n   return vminaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmina.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "eb0a54cbe19e533e6457b82d5f99ae1622533cee", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmina.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, int32x4_t b)\n {\n   return vminaq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmina.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmina.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, int32x4_t b)\n {\n   return vminaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmina.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b875308863dda567e3062f0fa6b4544f7033e085", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminaq_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminaq_s8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmina.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, int8x16_t b)\n {\n   return vminaq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmina.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmina.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, int8x16_t b)\n {\n   return vminaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmina.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5d3c40fb1fc3078b464feddcb36c9fcfeee73f4a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_p_s16.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminavt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo (uint16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminavq_p_s16 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminavt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo1 (uint16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminavq_p (a, b, p);\n }\n \n-\n-int16_t\n-foo2 (uint8_t a, int16x8_t b, mve_pred16_t p)\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminavt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16_t\n+foo2 (int16x8_t b, mve_pred16_t p)\n {\n-  return vminavq_p (a, b, p);\n+  return vminavq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminavt.s16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ee4ff251d63868d13a1619e0d1f5f26b22aa54ea", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_p_s32.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminavt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminavq_p_s32 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminavt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminavq_p (a, b, p);\n }\n \n-\n-int32_t\n-foo2 (uint16_t a, int32x4_t b, mve_pred16_t p)\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminavt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (int32x4_t b, mve_pred16_t p)\n {\n-  return vminavq_p (a, b, p);\n+  return vminavq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminavt.s32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "14602c29719e4bbd5e0b38125938835d66e58b56", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_p_s8.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_p_s8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminavt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo (uint8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminavq_p_s8 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminavt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo1 (uint8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminavq_p (a, b, p);\n }\n \n-\n-int8_t\n-foo2 (uint32_t a, int8x16_t b, mve_pred16_t p)\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminavt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8_t\n+foo2 (int8x16_t b, mve_pred16_t p)\n {\n-  return vminavq_p (a, b, p);\n+  return vminavq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminavt.s8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "51f75ae1f6a52ffcf02406551b8144dc12ea225f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_s16.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminav.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo (uint16_t a, int16x8_t b)\n {\n   return vminavq_s16 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminav.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo1 (uint16_t a, int16x8_t b)\n {\n   return vminavq (a, b);\n }\n \n-\n-int16_t\n-foo2 (uint8_t a, int16x8_t b)\n+/*\n+**foo2:\n+**\t...\n+**\tvminav.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16_t\n+foo2 (int16x8_t b)\n {\n-  return vminavq (a, b);\n+  return vminavq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminav.s16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d1602cebe189dbfe60c7cc5e7a0f55900a7bdb19", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_s32.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminav.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, int32x4_t b)\n {\n   return vminavq_s32 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminav.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, int32x4_t b)\n {\n   return vminavq (a, b);\n }\n \n-\n-int32_t\n-foo2 (uint16_t a, int32x4_t b)\n+/*\n+**foo2:\n+**\t...\n+**\tvminav.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (int32x4_t b)\n {\n-  return vminavq (a, b);\n+  return vminavq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminav.s32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f4c9b045b90c41d8fba47cd38f48fe6babff197f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminavq_s8.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminavq_s8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminav.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo (uint8_t a, int8x16_t b)\n {\n   return vminavq_s8 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminav.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo1 (uint8_t a, int8x16_t b)\n {\n   return vminavq (a, b);\n }\n \n-\n-int8_t\n-foo2 (uint32_t a, int8x16_t b)\n+/*\n+**foo2:\n+**\t...\n+**\tvminav.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8_t\n+foo2 (int8x16_t b)\n {\n-  return vminavq (a, b);\n+  return vminavq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminav.s8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1728d1042663e0894380d3a75ea79e3a4eeccffb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmaq_f16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminnma.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vminnmaq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnma.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvminnma.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vminnmaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnma.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "42b4265d9cc06a89fc3808ee960484a93fc25971", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmaq_f32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_f32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminnma.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vminnmaq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnma.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvminnma.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vminnmaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnma.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "51b85bd2b04e8bb07eaf623567fed36d103b9f3a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmaq_m_f16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmat.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmaq_m_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vminnmat.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmat.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmaq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2f0423ecb4f8175e220fafbdd024c2358dbccff6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmaq_m_f32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmaq_m_f32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmat.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmaq_m_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vminnmat.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmat.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmaq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "17e4ad16759bd36b042742e7326e6a3031dbd0f7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_f16.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminnmav.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo (float16_t a, float16x8_t b)\n {\n   return vminnmavq_f16 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminnmav.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo1 (float16_t a, float16x8_t b)\n {\n   return vminnmavq (a, b);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvminnmav.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n-foo2 (float32_t a, float16x8_t b)\n+foo2 (float16x8_t b)\n {\n-  return vminnmavq (a, b);\n+  return vminnmavq (1.1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminnmav.f16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2758e59666e73616e1d4c2fa5d86bd3773a91d79", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_f32.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminnmav.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo (float32_t a, float32x4_t b)\n {\n   return vminnmavq_f32 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminnmav.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo1 (float32_t a, float32x4_t b)\n {\n   return vminnmavq (a, b);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvminnmav.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n-foo2 (float16_t a, float32x4_t b)\n+foo2 (float32x4_t b)\n {\n-  return vminnmavq (a, b);\n+  return vminnmavq (1.1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminnmav.f32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b60a6627aeab4656bafc9ba7653569ab3a25b025", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_p_f16.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmavt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmavq_p_f16 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmavt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmavq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmavt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n-foo2 (float32_t a, float16x8_t b, mve_pred16_t p)\n+foo2 (float16x8_t b, mve_pred16_t p)\n {\n-  return vminnmavq_p (a, b, p);\n+  return vminnmavq_p (1.1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminnmavt.f16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6fa97b74a65fb6ce79909f9369ec32cdd355b399", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_p_f32.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmavt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmavq_p_f32 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmavt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmavq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmavt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n-foo2 (float16_t a, float32x4_t b, mve_pred16_t p)\n+foo2 (float32x4_t b, mve_pred16_t p)\n {\n-  return vminnmavq_p (a, b, p);\n+  return vminnmavq_p (1.1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminnmavt.f32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c0962b52631b4d0ca2e1f2088f12a0c46dd1d465", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_f16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminnm.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vminnmq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnm.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvminnm.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vminnmq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnm.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a9c3e5f74b1364b344077ad8a4d9ad73b6392dac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_f32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_f32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminnm.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vminnmq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnm.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvminnm.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vminnmq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vminnm.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "466264249c539affefd7286fe31f91b7454e6bf9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_m_f16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmq_m_f16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vminnmt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vminnmt.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "57edc8e1a806b47d6ac420b8595775e4036f507b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_m_f32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmq_m_f32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vminnmt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vminnmt.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "73b4ccba08085791445855b344f5b6b7a615a12e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_x_f16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmq_x_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vminnmt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9a824566212743a6fb84eb564a83a7b296237108", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_x_f32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmq_x_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vminnmt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "dc00d02df7d8d608e9701f1f0aa15e1bdd7904b1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_f16.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminnmv.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo (float16_t a, float16x8_t b)\n {\n   return vminnmvq_f16 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminnmv.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo1 (float16_t a, float16x8_t b)\n {\n   return vminnmvq (a, b);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvminnmv.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n-foo2 (float32_t a, float16x8_t b)\n+foo2 (float16x8_t b)\n {\n-  return vminnmvq (a, b);\n+  return vminnmvq (1.1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminnmv.f16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ff23c8184525e3aeec51803fc68e6f3ece95a407", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_f32.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminnmv.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo (float32_t a, float32x4_t b)\n {\n   return vminnmvq_f32 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminnmv.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo1 (float32_t a, float32x4_t b)\n {\n   return vminnmvq (a, b);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvminnmv.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n-foo2 (float16_t a, float32x4_t b)\n+foo2 (float32x4_t b)\n {\n-  return vminnmvq (a, b);\n+  return vminnmvq (1.1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminnmv.f32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ad99f586d11303be7a686af4450c668c0436c38e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_p_f16.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmvt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmvq_p_f16 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmvt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vminnmvq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmvt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n-foo2 (float32_t a, float16x8_t b, mve_pred16_t p)\n+foo2 (float16x8_t b, mve_pred16_t p)\n {\n-  return vminnmvq_p (a, b, p);\n+  return vminnmvq_p (1.1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminnmvt.f16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3c7e5c07a687af260580ca084d4cda1dc1c87418", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_p_f32.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmvt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmvq_p_f32 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmvt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vminnmvq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminnmvt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n-foo2 (float16_t a, float32x4_t b, mve_pred16_t p)\n+foo2 (float32x4_t b, mve_pred16_t p)\n {\n-  return vminnmvq_p (a, b, p);\n+  return vminnmvq_p (1.1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminnmvt.f32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "fe7368eeb383548bd63aae54c7e3f3d62901f1fc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminq_m_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a90a1db883563d9b3ddae835c933075237113c89", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminq_m_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "911bd3af0dc02c9a67e4281e2b277df9c205cab6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminq_m_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f80288aaf79a3d39e293192fdfb9a6e217227fa8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_u16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vminq_m_u16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vminq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b480089f4f3adb76a5946e703e8809429a010c3e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_u32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vminq_m_u32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vminq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "73633c9612ecc113b14cefeb4bb8d423b4ec0eff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_u8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vminq_m_u8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vminq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "eb34dc4c41c42d96770859120c6f92f30348e197", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmin.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vminq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmin.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vminq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "60d29da4e14f3b4a937b72a91e43b4edc696397e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmin.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vminq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmin.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vminq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "675fb8edfb13fcf2ef7e0954ee06eed478a72c84", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_s8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmin.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vminq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmin.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vminq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "50f648d5133f7697efbe6a01f1808a1b6090d195", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_u16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmin.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vminq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmin.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vminq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bcfead39c5a68aea36cf1e14ce18d41a0a6055f1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_u32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmin.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vminq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmin.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vminq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e8eacae4da86ef8a930fbecc1e6a32aeddbd22aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_u8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_u8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmin.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vminq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmin.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vminq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmin.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0d8987e16b802c112883a1a037e88b8a2510cffc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_s16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminq_x_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3c3595171ead9307842c71930d9c1d5bdb41779a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_s32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminq_x_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "402c4aa121dc4f2d8350e2d611078d6fae54ed4d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_s8.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminq_x_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e27a3416e388e2da6d3d6832a366ffea12f5706a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_u16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vminq_x_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vminq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d3cb29bf60c84c4222a6a71bfc0fdd9a2b228aff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_u32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vminq_x_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vminq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3e05ef7dd1323e14da79b1c30d4795250891d7d5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_u8.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vminq_x_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmint.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmint.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vminq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7c25c9d2f825b30990eafec2fca7c8424243a335", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_s16.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16_t\n foo (int16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminvq_p_s16 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16_t\n foo1 (int16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-\n-int16_t\n-foo2 (int8_t a, int16x8_t b, mve_pred16_t p)\n-{\n-  return vminvq_p (a, b, p);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminvt.s16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d5f7418af38c785186f71328256a18d57c1398f6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_s32.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminvq_p_s32 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-\n-int32_t\n-foo2 (int16_t a, int32x4_t b, mve_pred16_t p)\n-{\n-  return vminvq_p (a, b, p);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminvt.s32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6a42170fc191facc0db95216e344b997c88bacc8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_s8.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_s8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8_t\n foo (int8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminvq_p_s8 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8_t\n foo1 (int8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-\n-int8_t\n-foo2 (int32_t a, int8x16_t b, mve_pred16_t p)\n-{\n-  return vminvq_p (a, b, p);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminvt.s8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8f2f68fef842fa0be0104596abcd813f3f772be0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_u16.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo (uint16_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vminvq_p_u16 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo1 (uint16_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n-foo2 (uint32_t a, uint16x8_t b, mve_pred16_t p)\n+foo2 (uint16x8_t b, mve_pred16_t p)\n {\n-  return vminvq_p (a, b, p);\n+  return vminvq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminvt.u16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9d14c39c1dc1ed205c5f499a70e5a49efd3ad87e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_u32.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vminvq_p_u32 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n-foo2 (uint8_t a, uint32x4_t b, mve_pred16_t p)\n+foo2 (uint32x4_t b, mve_pred16_t p)\n {\n-  return vminvq_p (a, b, p);\n+  return vminvq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminvt.u32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4c1f4406852d56e6e6cc5ddfc8a64e26dd1aee59", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_p_u8.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_p_u8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo (uint8_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vminvq_p_u8 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo1 (uint8_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vminvq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvminvt.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n-foo2 (uint16_t a, uint8x16_t b, mve_pred16_t p)\n+foo2 (uint8x16_t b, mve_pred16_t p)\n {\n-  return vminvq_p (a, b, p);\n+  return vminvq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminvt.u8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e3242c0aa4d578d77f3c4f914becb90cfd390ec8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_s16.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,27 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminv.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16_t\n foo (int16_t a, int16x8_t b)\n {\n   return vminvq_s16 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminv.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16_t\n foo1 (int16_t a, int16x8_t b)\n {\n   return vminvq (a, b);\n }\n \n-int16_t\n-foo2 (int8_t a, int16x8_t b)\n-{\n-  return vminvq (a, b);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminv.s16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1325b38411d485828f040bd9fe19b29259915a0d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_s32.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,27 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminv.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32_t a, int32x4_t b)\n {\n   return vminvq_s32 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminv.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32_t a, int32x4_t b)\n {\n   return vminvq (a, b);\n }\n \n-int32_t\n-foo2 (int8_t a, int32x4_t b)\n-{\n-  return vminvq (a, b);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminv.s32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "81c14a8ac6b8c7f093d7b2665a275c8691b025aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_s8.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_s8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,27 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminv.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8_t\n foo (int8_t a, int8x16_t b)\n {\n   return vminvq_s8 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminv.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8_t\n foo1 (int8_t a, int8x16_t b)\n {\n   return vminvq (a, b);\n }\n \n-int8_t\n-foo2 (int32_t a, int8x16_t b)\n-{\n-  return vminvq (a, b);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminv.s8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4372ac623883b79dd683e8885e9b01c124901458", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_u16.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u16.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminv.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo (uint16_t a, uint16x8_t b)\n {\n   return vminvq_u16 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminv.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo1 (uint16_t a, uint16x8_t b)\n {\n   return vminvq (a, b);\n }\n \n-\n-uint8_t\n-foo2 (uint32_t a, uint16x8_t b)\n+/*\n+**foo2:\n+**\t...\n+**\tvminv.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16_t\n+foo2 (uint16x8_t b)\n {\n-  return vminvq (a, b);\n+  return vminvq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminv.u16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "aff3679f49d595f8972dabb4224fc3617288e288", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_u32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u32.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,27 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminv.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint32x4_t b)\n {\n   return vminvq_u32 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminv.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint32x4_t b)\n {\n   return vminvq (a, b);\n }\n \n+/*\n+**foo2:\n+**\t...\n+**\tvminv.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n-foo2 (uint16_t a, uint32x4_t b)\n+foo2 (uint32x4_t b)\n {\n-  return vminvq (a, b);\n+  return vminvq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminv.u32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "883e5f2d2c7ba9c06b07e910c0036e97822c4994", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminvq_u8.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d117647edc8fcae63abbdecbf38e9f22d0b1e3de/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminvq_u8.c?ref=d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvminv.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo (uint8_t a, uint8x16_t b)\n {\n   return vminvq_u8 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvminv.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo1 (uint8_t a, uint8x16_t b)\n {\n   return vminvq (a, b);\n }\n \n-\n-uint16_t\n-foo2 (uint32_t a, uint8x16_t b)\n+/*\n+**foo2:\n+**\t...\n+**\tvminv.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8_t\n+foo2 (uint8x16_t b)\n {\n-  return vminvq (a, b);\n+  return vminvq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vminv.u8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}