{"sha": "79e9f721d1a6f370ce0534745baeeb5a56da948e", "node_id": "C_kwDOANBUbNoAKDc5ZTlmNzIxZDFhNmYzNzBjZTA1MzQ3NDViYWVlYjVhNTZkYTk0OGU", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-19T14:29:35Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-19T14:29:35Z"}, "message": "Revert \"Remove MAY_HAVE_DEBUG_MARKER_STMTS and MAY_HAVE_DEBUG_BIND_STMTS.\"\n\nThis reverts commit 206b22d021d94adbaa79e1d443c87415254b15de.", "tree": {"sha": "9574ee4ccceae4c412c0771e3106422c7c1a0a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9574ee4ccceae4c412c0771e3106422c7c1a0a0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79e9f721d1a6f370ce0534745baeeb5a56da948e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e9f721d1a6f370ce0534745baeeb5a56da948e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e9f721d1a6f370ce0534745baeeb5a56da948e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e9f721d1a6f370ce0534745baeeb5a56da948e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7381debe4c5dd7878338f38db98face1cfa6f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7381debe4c5dd7878338f38db98face1cfa6f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7381debe4c5dd7878338f38db98face1cfa6f90"}], "stats": {"total": 87, "additions": 46, "deletions": 41}, "files": [{"sha": "0d38b706f4c2398cd32ed300aaeef60746f36d13", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -295,7 +295,7 @@ genericize_c_loop (tree *stmt_p, location_t start_locus, tree cond, tree body,\n   finish_bc_block (&stmt_list, bc_continue, clab);\n   if (incr)\n     {\n-      if (debug_nonbind_markers_p && incr_locus != UNKNOWN_LOCATION)\n+      if (MAY_HAVE_DEBUG_MARKER_STMTS && incr_locus != UNKNOWN_LOCATION)\n \t{\n \t  tree d = build0 (DEBUG_BEGIN_STMT, void_type_node);\n \t  SET_EXPR_LOCATION (d, expr_loc_or_loc (incr, start_locus));\n@@ -305,7 +305,7 @@ genericize_c_loop (tree *stmt_p, location_t start_locus, tree cond, tree body,\n     }\n   append_to_statement_list (entry, &stmt_list);\n \n-  if (debug_nonbind_markers_p && cond_locus != UNKNOWN_LOCATION)\n+  if (MAY_HAVE_DEBUG_MARKER_STMTS && cond_locus != UNKNOWN_LOCATION)\n     {\n       tree d = build0 (DEBUG_BEGIN_STMT, void_type_node);\n       SET_EXPR_LOCATION (d, cond_locus);"}, {"sha": "f312630448fd6feeb93b9ab743c49fc4ba30b3ab", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -1791,7 +1791,7 @@ static void\n add_debug_begin_stmt (location_t loc)\n {\n   /* Don't add DEBUG_BEGIN_STMTs outside of functions, see PR84721.  */\n-  if (!debug_nonbind_markers_p || !building_stmt_list_p ())\n+  if (!MAY_HAVE_DEBUG_MARKER_STMTS || !building_stmt_list_p ())\n     return;\n \n   tree stmt = build0 (DEBUG_BEGIN_STMT, void_type_node);"}, {"sha": "eb6466f4be6f72f589abb1055f69d0d323af5c80", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -6587,7 +6587,7 @@ pass_expand::execute (function *fun)\n   timevar_pop (TV_OUT_OF_SSA);\n   SA.partition_to_pseudo = XCNEWVEC (rtx, SA.map->num_partitions);\n \n-  if (flag_var_tracking_assignments && flag_tree_ter)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS && flag_tree_ter)\n     {\n       gimple_stmt_iterator gsi;\n       FOR_EACH_BB_FN (bb, cfun)"}, {"sha": "aa7f0e4b526b8353cf67aaaf90d627905afa450e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -11698,7 +11698,7 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n static void\n add_debug_begin_stmt (location_t loc)\n {\n-  if (!debug_nonbind_markers_p)\n+  if (!MAY_HAVE_DEBUG_MARKER_STMTS)\n     return;\n   if (DECL_DECLARED_CONCEPT_P (current_function_decl))\n     /* A concept is never expanded normally.  */"}, {"sha": "61b3bd036b877763133e2abdd5f6ef157085765c", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -4872,7 +4872,7 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n      disabled.  The markers make little sense without the variable\n      binding annotations among them.  */\n   cfun->debug_nonbind_markers = lang_hooks.emits_begin_stmt\n-    && debug_nonbind_markers_p;\n+    && MAY_HAVE_DEBUG_MARKER_STMTS;\n }\n \n /* This is like allocate_struct_function, but pushes a new cfun for FNDECL"}, {"sha": "7e39c22df4411db5cb2dfb9d54b8f57f9960b595", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -114,7 +114,7 @@ lower_function_body (void)\n   /* If we had begin stmt markers from e.g. PCH, but this compilation\n      doesn't want them, lower_stmt will have cleaned them up; we can\n      now clear the flag that indicates we had them.  */\n-  if (!debug_nonbind_markers_p && cfun->debug_nonbind_markers)\n+  if (!MAY_HAVE_DEBUG_MARKER_STMTS && cfun->debug_nonbind_markers)\n     {\n       /* This counter needs not be exact, but before lowering it will\n \t most certainly be.  */\n@@ -316,7 +316,7 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n       /* Propagate fallthruness.  */\n       /* If the function (e.g. from PCH) had debug stmts, but they're\n \t disabled for this compilation, remove them.  */\n-      if (!debug_nonbind_markers_p)\n+      if (!MAY_HAVE_DEBUG_MARKER_STMTS)\n \tgsi_remove (gsi, true);\n       else\n \tgsi_next (gsi);"}, {"sha": "4b62bb92a21d6b76700a7cfc359f28b8c5a137ab", "filename": "gcc/gimple-ssa-backprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fgimple-ssa-backprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fgimple-ssa-backprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-backprop.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -737,7 +737,7 @@ strip_sign_op (tree rhs)\n void\n backprop::prepare_change (tree var)\n {\n-  if (flag_var_tracking_assignments)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     insert_debug_temp_for_var_def (NULL, var);\n   reset_flow_sensitive_info (var);\n }"}, {"sha": "cec1dba701f0d99bf5cf2b1bf592a2287c03a992", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -832,7 +832,7 @@ ipa_param_adjustments::modify_call (cgraph_edge *cs,\n      vector to say for debug info that if parameter parm had been passed,\n      it would have value parm_Y(D).  */\n   tree old_decl = gimple_call_fndecl (stmt);\n-  if (flag_var_tracking_assignments && old_decl && callee_decl)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS && old_decl && callee_decl)\n     {\n       vec<tree, va_gc> **debug_args = NULL;\n       unsigned i = 0;"}, {"sha": "c68577d04a9940380c813dfb1821bc4b62bc4c1f", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -1465,7 +1465,7 @@ split_function (basic_block return_bb, class split_point *split_point,\n     {\n       vec<tree, va_gc> **debug_args = NULL;\n       unsigned i = 0, len = 0;\n-      if (flag_var_tracking_assignments)\n+      if (MAY_HAVE_DEBUG_BIND_STMTS)\n \t{\n \t  debug_args = decl_debug_args_lookup (node->decl);\n \t  if (debug_args)\n@@ -1479,11 +1479,11 @@ split_function (basic_block return_bb, class split_point *split_point,\n \t    gimple *def_temp;\n \n \t    /* This needs to be done even without\n-\t       flag_var_tracking_assignments, otherwise if it didn't exist\n+\t       MAY_HAVE_DEBUG_BIND_STMTS, otherwise if it didn't exist\n \t       before, we'd end up with different SSA_NAME_VERSIONs\n \t       between -g and -g0.  */\n \t    arg = get_or_create_ssa_default_def (cfun, parm);\n-\t    if (!flag_var_tracking_assignments || debug_args == NULL)\n+\t    if (!MAY_HAVE_DEBUG_BIND_STMTS || debug_args == NULL)\n \t      continue;\n \n \t    while (i < len && (**debug_args)[i] != DECL_ORIGIN (parm))"}, {"sha": "eb8a7dc57b0041147c47aa9beaa09b5931684a41", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -1454,8 +1454,8 @@ input_function (tree fn_decl, class data_in *data_in,\n \t    {\n \t      if (is_gimple_debug (stmt)\n \t\t  && (gimple_debug_nonbind_marker_p (stmt)\n-\t\t      ? !debug_nonbind_markers_p\n-\t\t      : !flag_var_tracking_assignments))\n+\t\t      ? !MAY_HAVE_DEBUG_MARKER_STMTS\n+\t\t      : !MAY_HAVE_DEBUG_BIND_STMTS))\n \t\tremove = true;\n \t      /* In case the linemap overflows locations can be dropped\n \t\t to zero.  Thus do not keep nonsensical inline entry markers"}, {"sha": "ca88f9bbfdf185f67be4d87693f910924fae8b16", "filename": "gcc/sese.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -205,7 +205,7 @@ void\n sese_insert_phis_for_liveouts (sese_info_p region, basic_block bb,\n \t\t\t       edge false_e, edge true_e)\n {\n-  if (flag_var_tracking_assignments)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     sese_reset_debug_liveouts (region);\n \n   unsigned i;"}, {"sha": "f70b0a42368d7e2a0fe8cb94997751b16e37a422", "filename": "gcc/ssa-iterators.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fssa-iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Fssa-iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-iterators.h?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -456,7 +456,7 @@ num_imm_uses (const_tree var)\n   const ssa_use_operand_t *ptr;\n   unsigned int num = 0;\n \n-  if (!flag_var_tracking_assignments)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     {\n       for (ptr = start->next; ptr != start; ptr = ptr->next)\n \tif (USE_STMT (ptr))"}, {"sha": "8ed8c69b5b1f9626e5a13468ce1ae71a418e5532", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -614,7 +614,7 @@ make_blocks (gimple_seq seq)\n      latest (earliest we find) label, and moving debug stmts that are\n      not separated from it by nondebug nonlabel stmts after the\n      label.  */\n-  if (debug_nonbind_markers_p)\n+  if (MAY_HAVE_DEBUG_MARKER_STMTS)\n     {\n       gimple_stmt_iterator label = gsi_none ();\n \n@@ -2139,7 +2139,7 @@ gimple_merge_blocks (basic_block a, basic_block b)\n \t\tgsi_insert_before (&dest_gsi, stmt, GSI_NEW_STMT);\n \t    }\n \t  /* Other user labels keep around in a form of a debug stmt.  */\n-\t  else if (!DECL_ARTIFICIAL (label) && flag_var_tracking_assignments)\n+\t  else if (!DECL_ARTIFICIAL (label) && MAY_HAVE_DEBUG_BIND_STMTS)\n \t    {\n \t      gimple *dbg = gimple_build_debug_bind (label,\n \t\t\t\t\t\t     integer_zero_node,"}, {"sha": "8c108d8e4e701fa0ef1cbd0a831ef1f9f05b4bcb", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -6432,7 +6432,7 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t}\n     }\n \n-  if (param_body_adjs && flag_var_tracking_assignments)\n+  if (param_body_adjs && MAY_HAVE_DEBUG_BIND_STMTS)\n     {\n       vec<tree, va_gc> **debug_args = NULL;\n       unsigned int len = 0;"}, {"sha": "583c01a42d86adf8a32bb2db1bdc072d11c0b330", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -1000,7 +1000,7 @@ generate_loops_for_partition (class loop *loop, partition *partition,\n   /* Remove stmts not in the PARTITION bitmap.  */\n   bbs = get_loop_body_in_dom_order (loop);\n \n-  if (flag_var_tracking_assignments)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     for (i = 0; i < loop->num_nodes; i++)\n       {\n \tbasic_block bb = bbs[i];"}, {"sha": "76e3aae405c1304c37c42dec79c847311f6f7604", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -2588,7 +2588,7 @@ analyze_access_subtree (struct access *root, struct access *parent,\n \t  gcc_checking_assert (!root->grp_scalar_read\n \t\t\t       && !root->grp_assignment_read);\n \t  sth_created = true;\n-\t  if (flag_var_tracking_assignments)\n+\t  if (MAY_HAVE_DEBUG_BIND_STMTS)\n \t    {\n \t      root->grp_to_be_debug_replaced = 1;\n \t      root->replacement_decl = create_access_replacement (root);"}, {"sha": "dbf02c434de48af1ee13ef384e7a6266b08a58c9", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -1143,7 +1143,7 @@ remove_dead_stmt (gimple_stmt_iterator *i, basic_block bb,\n \n   /* If this is a store into a variable that is being optimized away,\n      add a debug bind stmt if possible.  */\n-  if (flag_var_tracking_assignments\n+  if (MAY_HAVE_DEBUG_BIND_STMTS\n       && gimple_assign_single_p (stmt)\n       && is_gimple_val (gimple_assign_rhs1 (stmt)))\n     {"}, {"sha": "5a7fd305d91da7bd66a7a2132b230fd55ba976a7", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -7670,7 +7670,7 @@ remove_unused_ivs (struct ivopts_data *data, bitmap toremove)\n \n \t  tree def = info->iv->ssa_name;\n \n-\t  if (flag_var_tracking_assignments && SSA_NAME_DEF_STMT (def))\n+\t  if (MAY_HAVE_DEBUG_BIND_STMTS && SSA_NAME_DEF_STMT (def))\n \t    {\n \t      imm_use_iterator imm_iter;\n \t      use_operand_p use_p;"}, {"sha": "2fa7069f824c69b58a5c65eb76a7b1e9441d5af6", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -2406,7 +2406,7 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n     }\n   update_stmt (use_stmt);\n \n-  if (flag_var_tracking_assignments)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     {\n       use_operand_p use_p;\n       imm_use_iterator iter;"}, {"sha": "65316223047924965e31d075ce3d851bca79620b", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -233,7 +233,7 @@ reassoc_remove_stmt (gimple_stmt_iterator *gsi)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n \n-  if (!flag_var_tracking_assignments || gimple_code (stmt) == GIMPLE_PHI)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS || gimple_code (stmt) == GIMPLE_PHI)\n     return gsi_remove (gsi, true);\n \n   gimple_stmt_iterator prev = *gsi;"}, {"sha": "48f94217d16ede158d81ef2d3d556c6548a54e8c", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -1796,7 +1796,7 @@ tail_merge_optimize (unsigned int todo)\n \n   if (nr_bbs_removed_total > 0)\n     {\n-      if (flag_var_tracking_assignments)\n+      if (MAY_HAVE_DEBUG_BIND_STMTS)\n \t{\n \t  calculate_dominance_info (CDI_DOMINATORS);\n \t  update_debug_stmts ();"}, {"sha": "891c62aaf8532f77fde58ae756d90292c5eacb39", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -645,7 +645,7 @@ jump_threader::simplify_control_stmt_condition_1\n void\n propagate_threaded_block_debug_into (basic_block dest, basic_block src)\n {\n-  if (!flag_var_tracking_assignments)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return;\n \n   if (!single_pred_p (dest))"}, {"sha": "1565e21d9832c8cb60909ce9cac5f525d9b8dd00", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -220,7 +220,7 @@ flush_pending_stmts (edge e)\n void\n gimple_replace_ssa_lhs (gimple *stmt, tree nlhs)\n {\n-  if (flag_var_tracking_assignments)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     {\n       tree lhs = gimple_get_lhs (stmt);\n \n@@ -242,7 +242,7 @@ gimple_replace_ssa_lhs (gimple *stmt, tree nlhs)\n tree\n target_for_debug_bind (tree var)\n {\n-  if (!flag_var_tracking_assignments)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return NULL_TREE;\n \n   if (TREE_CODE (var) == SSA_NAME)\n@@ -307,7 +307,7 @@ insert_debug_temp_for_var_def (gimple_stmt_iterator *gsi, tree var)\n   int usecount = 0;\n   tree value = NULL;\n \n-  if (!flag_var_tracking_assignments)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return;\n \n   /* If this name has already been registered for replacement, do nothing\n@@ -499,7 +499,7 @@ insert_debug_temps_for_defs (gimple_stmt_iterator *gsi)\n   ssa_op_iter op_iter;\n   def_operand_p def_p;\n \n-  if (!flag_var_tracking_assignments)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return;\n \n   stmt = gsi_stmt (*gsi);\n@@ -525,7 +525,7 @@ reset_debug_uses (gimple *stmt)\n   imm_use_iterator imm_iter;\n   gimple *use_stmt;\n \n-  if (!flag_var_tracking_assignments)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return;\n \n   FOR_EACH_PHI_OR_STMT_DEF (def_p, stmt, op_iter, SSA_OP_DEF)"}, {"sha": "f427c5a789b2879073bd84c92f080a41b116569b", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -560,7 +560,7 @@ release_ssa_name_fn (struct function *fn, tree var)\n       int saved_ssa_name_version = SSA_NAME_VERSION (var);\n       use_operand_p imm = &(SSA_NAME_IMM_USE_NODE (var));\n \n-      if (flag_var_tracking_assignments)\n+      if (MAY_HAVE_DEBUG_BIND_STMTS)\n \tinsert_debug_temp_for_var_def (NULL, var);\n \n       if (flag_checking)"}, {"sha": "f788deb3d72ccf93ddf48d42b4db4809af52c06b", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -201,7 +201,7 @@ adjust_debug_stmts_now (adjust_info *ai)\n static void\n adjust_vec_debug_stmts (void)\n {\n-  if (!flag_var_tracking_assignments)\n+  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n     return;\n \n   gcc_assert (adjust_vec.exists ());\n@@ -223,7 +223,7 @@ adjust_debug_stmts (tree from, tree to, basic_block bb)\n {\n   adjust_info ai;\n \n-  if (flag_var_tracking_assignments\n+  if (MAY_HAVE_DEBUG_BIND_STMTS\n       && TREE_CODE (from) == SSA_NAME\n       && ! SSA_NAME_IS_DEFAULT_DEF (from)\n       && ! virtual_operand_p (from))\n@@ -251,7 +251,7 @@ adjust_phi_and_debug_stmts (gimple *update_phi, edge e, tree new_def)\n \n   SET_PHI_ARG_DEF (update_phi, e->dest_idx, new_def);\n \n-  if (flag_var_tracking_assignments)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     adjust_debug_stmts (orig_def, PHI_RESULT (update_phi),\n \t\t\tgimple_bb (update_phi));\n }\n@@ -2696,7 +2696,7 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n       vop_to_rename = create_lcssa_for_virtual_phi (orig_loop);\n     }\n \n-  if (flag_var_tracking_assignments)\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n     {\n       gcc_assert (!adjust_vec.exists ());\n       adjust_vec.create (32);"}, {"sha": "73efdb96badf151e7ace9826e49dd4cee97ba40e", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -9228,7 +9228,7 @@ vect_transform_loop_stmt (loop_vec_info loop_vinfo, stmt_vec_info stmt_info,\n     dump_printf_loc (MSG_NOTE, vect_location,\n \t\t     \"------>vectorizing statement: %G\", stmt_info->stmt);\n \n-  if (flag_var_tracking_assignments && !STMT_VINFO_LIVE_P (stmt_info))\n+  if (MAY_HAVE_DEBUG_BIND_STMTS && !STMT_VINFO_LIVE_P (stmt_info))\n     vect_loop_kill_debug_uses (loop, stmt_info);\n \n   if (!STMT_VINFO_RELEVANT_P (stmt_info)\n@@ -9602,7 +9602,7 @@ vect_transform_loop (loop_vec_info loop_vinfo, gimple *loop_vectorized_call)\n \t  if (!stmt_info)\n \t    continue;\n \n-\t  if (flag_var_tracking_assignments && !STMT_VINFO_LIVE_P (stmt_info))\n+\t  if (MAY_HAVE_DEBUG_BIND_STMTS && !STMT_VINFO_LIVE_P (stmt_info))\n \t    vect_loop_kill_debug_uses (loop, stmt_info);\n \n \t  if (!STMT_VINFO_RELEVANT_P (stmt_info)"}, {"sha": "03719b18c67544e6ced68e6c9beb533b47ee0fb4", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e9f721d1a6f370ce0534745baeeb5a56da948e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=79e9f721d1a6f370ce0534745baeeb5a56da948e", "patch": "@@ -1174,9 +1174,14 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define VL_EXP_OPERAND_LENGTH(NODE) \\\n   ((int)TREE_INT_CST_LOW (VL_EXP_CHECK (NODE)->exp.operands[0]))\n \n+/* Nonzero if gimple_debug_nonbind_marker_p() may possibly hold.  */\n+#define MAY_HAVE_DEBUG_MARKER_STMTS debug_nonbind_markers_p\n+/* Nonzero if gimple_debug_bind_p() (and thus\n+   gimple_debug_source_bind_p()) may possibly hold.  */\n+#define MAY_HAVE_DEBUG_BIND_STMTS flag_var_tracking_assignments\n /* Nonzero if is_gimple_debug() may possibly hold.  */\n #define MAY_HAVE_DEBUG_STMTS\t\t\t\t\t\\\n-  (debug_nonbind_markers_p || flag_var_tracking_assignments)\n+  (MAY_HAVE_DEBUG_MARKER_STMTS || MAY_HAVE_DEBUG_BIND_STMTS)\n \n /* In a LOOP_EXPR node.  */\n #define LOOP_EXPR_BODY(NODE) TREE_OPERAND_CHECK_CODE (NODE, LOOP_EXPR, 0)"}]}