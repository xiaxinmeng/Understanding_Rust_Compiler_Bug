{"sha": "509912a611f9e86883cd1f3c1751e4a1b3cb7abf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA5OTEyYTYxMWY5ZTg2ODgzY2QxZjNjMTc1MWU0YTFiM2NiN2FiZg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-01-21T15:38:23Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-01-21T15:38:23Z"}, "message": "Make poisoned hashes SFINAE away the call operator of the hash.\n\n* include/bits/functional_hash.h\n(__poison_hash::__enable_hash_call): New.\n* include/std/optional (__optional_hash_call_base): New.\n(hash<optional<_Tp>>): Derive from the new base,\nmove the hash function into that base.\n* include/std/variant (__variant_hash_call_base_impl): New.\n(__variant_hash_call_base): Likewise.\n(hash<variant<_Types...>>): Derive from the new base,\nmove the hash function into that base.\n* testsuite/20_util/optional/hash.cc: Add tests for is_callable.\n* testsuite/20_util/variant/hash.cc: Likewise.\n\nFrom-SVN: r244748", "tree": {"sha": "c4dd133b3f3bc23f7e1a1395c9e1fc10b1c2fde0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4dd133b3f3bc23f7e1a1395c9e1fc10b1c2fde0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/509912a611f9e86883cd1f3c1751e4a1b3cb7abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509912a611f9e86883cd1f3c1751e4a1b3cb7abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/509912a611f9e86883cd1f3c1751e4a1b3cb7abf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31d5fcecf100a3012fae0b99639022a992f28f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31d5fcecf100a3012fae0b99639022a992f28f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31d5fcecf100a3012fae0b99639022a992f28f0"}], "stats": {"total": 82, "additions": 70, "deletions": 12}, "files": [{"sha": "b96185a739328f8fc5511eab6044193f118acbac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=509912a611f9e86883cd1f3c1751e4a1b3cb7abf", "patch": "@@ -1,3 +1,18 @@\n+2017-01-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tMake poisoned hashes SFINAE away the call operator of the hash.\n+\t* include/bits/functional_hash.h\n+\t(__poison_hash::__enable_hash_call): New.\n+\t* include/std/optional (__optional_hash_call_base): New.\n+\t(hash<optional<_Tp>>): Derive from the new base,\n+\tmove the hash function into that base.\n+\t* include/std/variant (__variant_hash_call_base_impl): New.\n+\t(__variant_hash_call_base): Likewise.\n+\t(hash<variant<_Types...>>): Derive from the new base,\n+\tmove the hash function into that base.\n+\t* testsuite/20_util/optional/hash.cc: Add tests for is_callable.\n+\t* testsuite/20_util/variant/hash.cc: Likewise.\n+\n 2017-01-20  Joe Seymour  <joe.s@somniumtech.com>\n \n \t* acinclude.m4 (GLIBCXX_CHECK_SIZE_T_MANGLING): Support uint20_t."}, {"sha": "38be1724d3faf4532199b3d829ab3fb67af1a33a", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=509912a611f9e86883cd1f3c1751e4a1b3cb7abf", "patch": "@@ -60,6 +60,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename = void>\n     struct __poison_hash\n     {\n+      static constexpr bool __enable_hash_call = false;\n     private:\n       // Private rather than deleted to be non-trivially-copyable.\n       __poison_hash(__poison_hash&&);\n@@ -69,6 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>\n     {\n+      static constexpr bool __enable_hash_call = true;\n     };\n \n   // Helper struct for SFINAE-poisoning non-enum types."}, {"sha": "887bf9e83975cccbb1fe53fae91eb85dde91a934", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=509912a611f9e86883cd1f3c1751e4a1b3cb7abf", "patch": "@@ -951,12 +951,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return optional<_Tp> { in_place, __il, std::forward<_Args>(__args)... }; }\n \n   // Hash.\n-  template<typename _Tp>\n-    struct hash<optional<_Tp>> : private __poison_hash<remove_const_t<_Tp>>\n-    {\n-      using result_type = size_t;\n-      using argument_type = optional<_Tp>;\n \n+  template<typename _Tp, bool\n+           = __poison_hash<remove_const_t<_Tp>>::__enable_hash_call>\n+    struct __optional_hash_call_base\n+    {\n       size_t\n       operator()(const optional<_Tp>& __t) const\n       noexcept(noexcept(hash<_Tp> {}(*__t)))\n@@ -968,6 +967,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n+  template<typename _Tp>\n+    struct __optional_hash_call_base<_Tp, false> {};\n+\n+  template<typename _Tp>\n+    struct hash<optional<_Tp>>\n+    : private __poison_hash<remove_const_t<_Tp>>,\n+      public __optional_hash_call_base<_Tp>\n+    {\n+      using result_type = size_t;\n+      using argument_type = optional<_Tp>;\n+    };\n+\n   /// @}\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "c5138e56803f6c4eebd402f58f82892e9b25195d", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=509912a611f9e86883cd1f3c1751e4a1b3cb7abf", "patch": "@@ -1273,14 +1273,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t   std::forward<_Variants>(__variants)...);\n     }\n \n-  template<typename... _Types>\n-    struct hash<variant<_Types...>>\n-    : private __detail::__variant::_Variant_hash_base<\n-\tvariant<_Types...>, std::index_sequence_for<_Types...>>\n+  template<bool, typename... _Types>\n+    struct __variant_hash_call_base_impl\n     {\n-      using result_type = size_t;\n-      using argument_type = variant<_Types...>;\n-\n       size_t\n       operator()(const variant<_Types...>& __t) const\n       noexcept((is_nothrow_callable_v<hash<decay_t<_Types>>(_Types)> && ...))\n@@ -1297,6 +1292,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n+  template<typename... _Types>\n+    struct __variant_hash_call_base_impl<false, _Types...> {};\n+\n+  template<typename... _Types>\n+    using __variant_hash_call_base =\n+    __variant_hash_call_base_impl<(__poison_hash<remove_const_t<_Types>>::\n+\t\t\t\t   __enable_hash_call &&...), _Types...>;\n+\n+  template<typename... _Types>\n+    struct hash<variant<_Types...>>\n+    : private __detail::__variant::_Variant_hash_base<\n+        variant<_Types...>, std::index_sequence_for<_Types...>>,\n+      public __variant_hash_call_base<_Types...>\n+    {\n+      using result_type = size_t;\n+      using argument_type = variant<_Types...>;\n+    };\n+\n   template<>\n     struct hash<monostate>\n     {"}, {"sha": "297ea2e276b633c21264ce46136658f3aebc758c", "filename": "libstdc++-v3/testsuite/20_util/optional/hash.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fhash.cc?ref=509912a611f9e86883cd1f3c1751e4a1b3cb7abf", "patch": "@@ -29,6 +29,12 @@ template<class T>\n auto f(...) -> decltype(std::false_type());\n \n static_assert(!decltype(f<S>(0))::value, \"\");\n+static_assert(!std::is_callable<\n+\t      std::hash<std::optional<S>>&\n+\t      (std::optional<S> const&)>::value, \"\");\n+static_assert(std::is_callable<\n+\t      std::hash<std::optional<int>>&\n+\t      (std::optional<int> const&)>::value, \"\");\n \n int main()\n {"}, {"sha": "0a267ab68e4a72ff0e2d39e68d35ff6615ff11e7", "filename": "libstdc++-v3/testsuite/20_util/variant/hash.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509912a611f9e86883cd1f3c1751e4a1b3cb7abf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fhash.cc?ref=509912a611f9e86883cd1f3c1751e4a1b3cb7abf", "patch": "@@ -33,6 +33,17 @@ static_assert(!decltype(f<std::variant<S>>(0))::value, \"\");\n static_assert(!decltype(f<std::variant<S, S>>(0))::value, \"\");\n static_assert(decltype(f<std::variant<int>>(0))::value, \"\");\n static_assert(decltype(f<std::variant<int, int>>(0))::value, \"\");\n+static_assert(!std::is_callable<\n+\t      std::hash<std::variant<S>>&(std::variant<S> const&)>::value, \"\");\n+static_assert(!std::is_callable<\n+\t      std::hash<std::variant<S, int>>&\n+\t      (std::variant<S, int> const&)>::value, \"\");\n+static_assert(std::is_callable<\n+\t      std::hash<std::variant<int>>&\n+\t      (std::variant<int> const&)>::value, \"\");\n+static_assert(std::is_callable<\n+\t      std::hash<std::variant<int, int>>&\n+\t      (std::variant<int, int> const&)>::value, \"\");\n \n int main()\n {"}]}