{"sha": "393fdeb1e42d9ed78546f350b474183aac463da5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzZmRlYjFlNDJkOWVkNzg1NDZmMzUwYjQ3NDE4M2FhYzQ2M2RhNQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-08-12T20:21:37Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-08-12T20:21:37Z"}, "message": "re PR fortran/91424 (Extend warnings about DO loops)\n\n2019-08-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/91424\n\t* frontend-passes.c (do_subscript): Do not warn for an\n\texpression a second time.  Do not warn about a zero-trip loop.\n\t(doloop_warn): Also look at contained namespaces.\n\n2019-08-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/91424\n\t* gfortran.dg/do_subscript_3.f90: New test.\n\t* gfortran.dg/do_subscript_4.f90: New test.\n\t* gfortran.dg/pr70754.f90: Use indices that to not overflow.\n\n2019-08-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/91422\n\t* testsuite/libgomp.oacc-fortran/routine-7.f90: Correct array\n\tdimension.\n\nFrom-SVN: r274320", "tree": {"sha": "2896814b1c2ce28c76fee7e3b119024a966c4a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2896814b1c2ce28c76fee7e3b119024a966c4a0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/393fdeb1e42d9ed78546f350b474183aac463da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393fdeb1e42d9ed78546f350b474183aac463da5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/393fdeb1e42d9ed78546f350b474183aac463da5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393fdeb1e42d9ed78546f350b474183aac463da5/comments", "author": null, "committer": null, "parents": [{"sha": "0124d2c5bb0ac41a6f3288b5f11861c127f13409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0124d2c5bb0ac41a6f3288b5f11861c127f13409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0124d2c5bb0ac41a6f3288b5f11861c127f13409"}], "stats": {"total": 96, "additions": 86, "deletions": 10}, "files": [{"sha": "05e5ba5cd98be04fb0379f1a71065d571f6085e8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=393fdeb1e42d9ed78546f350b474183aac463da5", "patch": "@@ -1,3 +1,10 @@\n+2019-08-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/91424\n+\t* frontend-passes.c (do_subscript): Do not warn for an\n+\texpression a second time.  Do not warn about a zero-trip loop.\n+\t(doloop_warn): Also look at contained namespaces.\n+\n 2019-08-11  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/91413"}, {"sha": "37c767f96f28422c830c23b7074531f499c58a87", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=393fdeb1e42d9ed78546f350b474183aac463da5", "patch": "@@ -2556,6 +2556,12 @@ do_subscript (gfc_expr **e)\n   if (in_assoc_list)\n     return 0;\n \n+  /* We already warned about this.  */\n+  if (v->do_not_warn)\n+    return 0;\n+\n+  v->do_not_warn = 1;\n+\n   for (ref = v->ref; ref; ref = ref->next)\n     {\n       if (ref->type == REF_ARRAY && ref->u.ar.type == AR_ELEMENT)\n@@ -2608,7 +2614,6 @@ do_subscript (gfc_expr **e)\n \t      else\n \t\thave_do_start = false;\n \n-\n \t      if (dl->ext.iterator->end->expr_type == EXPR_CONSTANT)\n \t\t{\n \t\t  have_do_end = true;\n@@ -2620,6 +2625,17 @@ do_subscript (gfc_expr **e)\n \t      if (!have_do_start && !have_do_end)\n \t\treturn 0;\n \n+\t      /* No warning inside a zero-trip loop.  */\n+\t      if (have_do_start && have_do_end)\n+\t\t{\n+\t\t  int sgn, cmp;\n+\n+\t\t  sgn = mpz_cmp_ui (do_step, 0);\n+\t\t  cmp = mpz_cmp (do_end, do_start);\n+\t\t  if ((sgn > 0 && cmp < 0) || (sgn < 0 && cmp > 0))\n+\t\t    break;\n+\t\t}\n+\n \t      /* May have to correct the end value if the step does not equal\n \t\t one.  */\n \t      if (have_do_start && have_do_end && mpz_cmp_ui (do_step, 1) != 0)\n@@ -2761,6 +2777,12 @@ static void\n doloop_warn (gfc_namespace *ns)\n {\n   gfc_code_walker (&ns->code, doloop_code, do_function, NULL);\n+\n+  for (ns = ns->contained; ns; ns = ns->sibling)\n+    {\n+      if (ns->code == NULL || ns->code->op != EXEC_BLOCK)\n+\tdoloop_warn (ns);\n+    }\n }\n \n /* This selction deals with inlining calls to MATMUL.  */"}, {"sha": "18dac06e77eb85cc0316c2e8c07a7502c947dcee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=393fdeb1e42d9ed78546f350b474183aac463da5", "patch": "@@ -1,3 +1,10 @@\n+2019-08-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/91424\n+\t* gfortran.dg/do_subscript_3.f90: New test.\n+\t* gfortran.dg/do_subscript_4.f90: New test.\n+\t* gfortran.dg/pr70754.f90: Use indices that to not overflow.\n+\n 2019-08-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/83250"}, {"sha": "2f62f58142b69cd5df05ac587e0a746c64367ea5", "filename": "gcc/testsuite/gfortran.dg/do_subscript_3.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_subscript_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_subscript_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_subscript_3.f90?ref=393fdeb1e42d9ed78546f350b474183aac463da5", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! PR fortran/91424\n+! Check that only one warning is issued inside blocks, and that\n+! warnings are also issued for contained subroutines.\n+\n+program main\n+  real :: a(5)\n+  block\n+    integer :: j\n+    do j=0, 5  ! { dg-warning \"out of bounds\" }\n+       a(j) = 2. ! { dg-warning \"out of bounds\" }\n+    end do\n+  end block\n+  call x\n+contains\n+  subroutine x\n+    integer :: i\n+    do i=1,6 ! { dg-warning \"out of bounds\" }\n+       a(i) = 2.  ! { dg-warning \"out of bounds\" }\n+    end do\n+  end subroutine x\n+end program main"}, {"sha": "c773fe75aff0f779e057b313fe9a5a315d2528c1", "filename": "gcc/testsuite/gfortran.dg/do_subscript_4.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_subscript_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_subscript_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_subscript_4.f90?ref=393fdeb1e42d9ed78546f350b474183aac463da5", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! PR 91424 - this used to warn although the DO loop is zero trip.\n+program main\n+  implicit none\n+  integer :: i\n+  real :: a(2)\n+  do i=1,3,-1\n+     a(i) = 2.\n+  end do\n+  print *,a\n+end program main"}, {"sha": "593acf917ee63d92cdce43fbd159f89a50918f11", "filename": "gcc/testsuite/gfortran.dg/pr70754.f90", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr70754.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393fdeb1e42d9ed78546f350b474183aac463da5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr70754.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr70754.f90?ref=393fdeb1e42d9ed78546f350b474183aac463da5", "patch": "@@ -18,12 +18,13 @@ subroutine foo(a)\n     integer (ii4), dimension(40,40) :: c\n     integer  i, j\n \n-    do i=1,20\n-      b(i,j) = 123 * a(i,j) + 34 * a(i,j+1) &\n-             + 34 * a(i,j-1) + a(i+1,j+1) &\n-             + a(i+1,j-1) + a(i-1,j+1) &\n-             + a(i-1,j-1)\n-      c(i,j) = 123\n+    j = 10\n+    do i=11,30\n+       b(i,j) = 123 * a(i,j) + 34 * a(i,j+1) &\n+            + 34 * a(i,j-1) + a(i+1,j+1) &\n+            + a(i+1,j-1) + a(i-1,j+1) &\n+            + a(i-1,j-1)\n+       c(i,j) = 123\n     end do\n \n     where ((xyz(:,:,2) /= 0) .and. (c /= 0))"}, {"sha": "a2737c3ea8ca3c6b7734524460654ecbd7ed543a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393fdeb1e42d9ed78546f350b474183aac463da5/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393fdeb1e42d9ed78546f350b474183aac463da5/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=393fdeb1e42d9ed78546f350b474183aac463da5", "patch": "@@ -1,3 +1,9 @@\n+2019-08-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/91422\n+\t* testsuite/libgomp.oacc-fortran/routine-7.f90: Correct array\n+\tdimension.\n+\n 2019-08-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* target.c (gomp_map_vars_internal): For GOMP_MAP_USE_DEVICE_PTR\n@@ -32,9 +38,9 @@\n \n 2019-07-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n-\t* testsuite/libgomp.fortran/reduction4.f90: Update BOZ usage\n+\t* testsuite/libgomp.fortran/reduction4.f90: Update BOZ usage.\n \t* testsuite/libgomp.fortran/reduction5.f90: Ditto.\n-\t\n+\n 2019-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c-c++-common/loop-1.c: New test."}, {"sha": "1009f4a81e55beab62aaf3b16918d096e40ffd4c", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393fdeb1e42d9ed78546f350b474183aac463da5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393fdeb1e42d9ed78546f350b474183aac463da5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90?ref=393fdeb1e42d9ed78546f350b474183aac463da5", "patch": "@@ -109,7 +109,7 @@ end subroutine gang\n \n subroutine seq (a)\n   !$acc routine seq\n-  integer, intent (inout) :: a(M)\n+  integer, intent (inout) :: a(N)\n   integer :: i\n \n   do i = 1, N"}]}