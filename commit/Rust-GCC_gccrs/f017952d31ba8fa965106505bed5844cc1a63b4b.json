{"sha": "f017952d31ba8fa965106505bed5844cc1a63b4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAxNzk1MmQzMWJhOGZhOTY1MTA2NTA1YmVkNTg0NGNjMWE2M2I0Yg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-09-22T00:48:17Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-09-22T00:48:17Z"}, "message": "libstdc++: Mark some more algorithms constexpr for C++20\n\nAs per P0202.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_algo.h (for_each_n): Mark constexpr for C++20.\n\t(search): Likewise for the overload that takes a searcher.\n\t* testsuite/25_algorithms/for_each/constexpr.cc: Test constexpr\n\tstd::for_each_n.\n\t* testsuite/25_algorithms/search/constexpr.cc: Test constexpr\n\tstd::search overload that takes a searcher.", "tree": {"sha": "5ed5ce03354daa0c012c06149d582faa7cac834a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ed5ce03354daa0c012c06149d582faa7cac834a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f017952d31ba8fa965106505bed5844cc1a63b4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f017952d31ba8fa965106505bed5844cc1a63b4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f017952d31ba8fa965106505bed5844cc1a63b4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f017952d31ba8fa965106505bed5844cc1a63b4b/comments", "author": null, "committer": null, "parents": [{"sha": "44135373fcdbe4019c5524ec3dff8e93d9ef113c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44135373fcdbe4019c5524ec3dff8e93d9ef113c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44135373fcdbe4019c5524ec3dff8e93d9ef113c"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "a0b96c61798e9ae5e8c9d3c1095c994c48484df2", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f017952d31ba8fa965106505bed5844cc1a63b4b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f017952d31ba8fa965106505bed5844cc1a63b4b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=f017952d31ba8fa965106505bed5844cc1a63b4b", "patch": "@@ -3832,6 +3832,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  If `__f` has a return value it is ignored.\n   */\n   template<typename _InputIterator, typename _Size, typename _Function>\n+    _GLIBCXX20_CONSTEXPR\n     _InputIterator\n     for_each_n(_InputIterator __first, _Size __n, _Function __f)\n     {\n@@ -4251,6 +4252,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @return @p __searcher(__first,__last).first\n   */\n   template<typename _ForwardIterator, typename _Searcher>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     search(_ForwardIterator __first, _ForwardIterator __last,\n \t   const _Searcher& __searcher)"}, {"sha": "b3aca23eccc31c58cd22594ff23f5256b3cc91af", "filename": "libstdc++-v3/testsuite/25_algorithms/for_each/constexpr.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f017952d31ba8fa965106505bed5844cc1a63b4b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f017952d31ba8fa965106505bed5844cc1a63b4b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Fconstexpr.cc?ref=f017952d31ba8fa965106505bed5844cc1a63b4b", "patch": "@@ -34,3 +34,15 @@ test()\n }\n \n static_assert(test());\n+\n+constexpr bool\n+test_n()\n+{\n+  int tot = 0;\n+  auto sum = [&total = tot](int i){ total += i; };\n+  auto sum2 = std::for_each_n(ca0.begin(), std::size(ca0)-1, sum);\n+\n+  return tot == 55;\n+}\n+\n+static_assert(test_n());"}, {"sha": "e34194cfc5db474ddfb5578edc16e0c5400d3602", "filename": "libstdc++-v3/testsuite/25_algorithms/search/constexpr.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f017952d31ba8fa965106505bed5844cc1a63b4b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f017952d31ba8fa965106505bed5844cc1a63b4b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fconstexpr.cc?ref=f017952d31ba8fa965106505bed5844cc1a63b4b", "patch": "@@ -31,6 +31,10 @@ test()\n \t\t\t\t cam.begin(), cam.end(),\n \t\t\t\t std::equal_to<int>());\n \n+  const auto outtt2\n+    = std::search(ca0.begin(), ca0.end(),\n+\t\t  std::default_searcher(cam.begin(), cam.end()));\n+\n   return true;\n }\n "}]}