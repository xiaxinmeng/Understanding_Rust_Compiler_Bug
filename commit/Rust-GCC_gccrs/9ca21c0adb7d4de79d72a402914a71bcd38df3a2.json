{"sha": "9ca21c0adb7d4de79d72a402914a71bcd38df3a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNhMjFjMGFkYjdkNGRlNzlkNzJhNDAyOTE0YTcxYmNkMzhkZjNhMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@gcc.gnu.org", "date": "1998-02-12T14:51:57Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchell@gcc.gnu.org", "date": "1998-02-12T14:51:57Z"}, "message": "typeck.c (build_ptrmemfunc): Typecheck pointer-to-member conversions.\n\n\t* typeck.c (build_ptrmemfunc): Typecheck pointer-to-member\n\tconversions.\n\nFrom-SVN: r17874", "tree": {"sha": "9a7a43a23bf4f6a78f7e9d2d046f40f3af4dce1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a7a43a23bf4f6a78f7e9d2d046f40f3af4dce1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ca21c0adb7d4de79d72a402914a71bcd38df3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca21c0adb7d4de79d72a402914a71bcd38df3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca21c0adb7d4de79d72a402914a71bcd38df3a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca21c0adb7d4de79d72a402914a71bcd38df3a2/comments", "author": null, "committer": null, "parents": [{"sha": "614bb5d45d8b87b1f0d5c8d8cb1d02a1377e6ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614bb5d45d8b87b1f0d5c8d8cb1d02a1377e6ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614bb5d45d8b87b1f0d5c8d8cb1d02a1377e6ede"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "311c4bcc838be3f59e583af473db825c08cc0ac5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca21c0adb7d4de79d72a402914a71bcd38df3a2/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca21c0adb7d4de79d72a402914a71bcd38df3a2/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9ca21c0adb7d4de79d72a402914a71bcd38df3a2", "patch": "@@ -6428,16 +6428,22 @@ build_ptrmemfunc (type, pfn, force)\n     {\n       tree ndelta, ndelta2;\n       tree e1, e2, e3, n;\n+      tree pfn_type;\n \n       /* Is is already the right type? */\n       if (type == TYPE_PTRMEMFUNC_FN_TYPE (TREE_TYPE (pfn)))\n \treturn pfn;\n \n+      pfn_type = TYPE_PTRMEMFUNC_FN_TYPE (TREE_TYPE (pfn));\n+      if (!force\n+\t  && comp_target_types (type, pfn_type, 0) != 1)\n+\tcp_error (\"conversion to `%T' from `%T'\", type, pfn_type);\n+\n       ndelta = cp_convert (ptrdiff_type_node, build_component_ref (pfn, delta_identifier, NULL_TREE, 0));\n       ndelta2 = cp_convert (ptrdiff_type_node, DELTA2_FROM_PTRMEMFUNC (pfn));\n       idx = build_component_ref (pfn, index_identifier, NULL_TREE, 0);\n \n-      n = get_delta_difference (TYPE_METHOD_BASETYPE (TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (TREE_TYPE (pfn)))),\n+      n = get_delta_difference (TYPE_METHOD_BASETYPE (TREE_TYPE (pfn_type)),\n \t\t\t\tTYPE_METHOD_BASETYPE (TREE_TYPE (type)),\n \t\t\t\tforce);\n \n@@ -6471,20 +6477,16 @@ build_ptrmemfunc (type, pfn, force)\n \t  && TREE_CODE (TREE_OPERAND (pfn, 0)) == TREE_LIST))\n     return instantiate_type (type, pfn, 1);\n \n+  if (!force \n+      && comp_target_types (type, TREE_TYPE (pfn), 0) != 1)\n+    cp_error (\"conversion to `%T' from `%T'\", type, TREE_TYPE (pfn));\n+\n   /* Allow pointer to member conversions here.  */\n   delta = get_delta_difference (TYPE_METHOD_BASETYPE (TREE_TYPE (TREE_TYPE (pfn))),\n \t\t\t\tTYPE_METHOD_BASETYPE (TREE_TYPE (type)),\n \t\t\t\tforce);\n   delta2 = build_binary_op (PLUS_EXPR, delta2, delta, 1);\n \n-#if 0\n-  /* We need to check the argument types to see if they are compatible\n-     (any const or volatile violations.  */\n-  something like this:\n-  comptype (TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (type))),\n-\t    TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (TREE_TYPE (pfn)))), ?);\n-#endif\n-\n   if (TREE_CODE (TREE_OPERAND (pfn, 0)) != FUNCTION_DECL)\n     warning (\"assuming pointer to member function is non-virtual\");\n "}, {"sha": "6bfb80ca1677793578a79092c757f136649c559f", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p10769a.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca21c0adb7d4de79d72a402914a71bcd38df3a2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca21c0adb7d4de79d72a402914a71bcd38df3a2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769a.C?ref=9ca21c0adb7d4de79d72a402914a71bcd38df3a2", "patch": "@@ -28,7 +28,7 @@ dispatch (A *obj, int i, int j)\n \n void A::main() {\n   dispatch (&a, 0, 0);\n-  void (A::*mPtr)(A*) = &A::f1a;\n+  void (A::*mPtr)(A*) = (void (A::*)(A*))&A::f1a;\n \n   (*(void (*)(A*))PMF2PF(mPtr))(&a);\n   (*(void (*)(A*))PMF2PF(f2a))(&a);\n@@ -37,7 +37,7 @@ void A::main() {\n int main() {\n   a.A::main();\n   dispatch (&a, 0, 1);\n-  void (A::*mPtr)(A*) = &A::f1b;\n+  void (A::*mPtr)(A*) = (void (A::*)(A*))&A::f1b;\n \n   (*(void (*)(A*))PMF2PF(a.*mPtr))(&a);\n   (*(void (*)(A*))PMF2PF(a.f2a))(&a);"}, {"sha": "7cc20c5e4d6771c1688a21394817591b759e26e6", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p10769b.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca21c0adb7d4de79d72a402914a71bcd38df3a2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca21c0adb7d4de79d72a402914a71bcd38df3a2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10769b.C?ref=9ca21c0adb7d4de79d72a402914a71bcd38df3a2", "patch": "@@ -20,6 +20,6 @@ void A::main() {\n }\n \n int main() {\n-  void (A::*mPtr)(A*) = &A::f1a;\n+  void (A::*mPtr)(A*) = (void (A::*)(A*)) &A::f1a;\n   (*(void (*)(A*))PMF2PF(mPtr))(&a);\t// ERROR - \n }"}, {"sha": "85730952d0c92260372c76a370f00de63cb617f5", "filename": "gcc/testsuite/g++.old-deja/g++.other/ptrmem2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca21c0adb7d4de79d72a402914a71bcd38df3a2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca21c0adb7d4de79d72a402914a71bcd38df3a2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem2.C?ref=9ca21c0adb7d4de79d72a402914a71bcd38df3a2", "patch": "@@ -0,0 +1,15 @@\n+class cow {\n+public:\n+  void moo (char *);\n+};\n+\n+void f()\n+{\n+  cow* c;\n+\n+  void (cow::*fp0)(char*) = &cow::moo;  // OK\n+  void (cow::*fp1)(int) = &cow::moo;    // ERROR - conversion\n+  int (cow::*fp2)(char*) = &cow::moo;   // ERROR - conversion\n+  int (cow::*fp3)(char*, void*) = fp2;  // ERROR - conversion\n+  int (cow::*fp4)(double) = (int (cow::*)(double)) fp2; // OK\n+}"}]}