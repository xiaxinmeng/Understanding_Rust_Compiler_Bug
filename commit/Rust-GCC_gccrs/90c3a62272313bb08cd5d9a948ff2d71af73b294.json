{"sha": "90c3a62272313bb08cd5d9a948ff2d71af73b294", "node_id": "C_kwDOANBUbNoAKDkwYzNhNjIyNzIzMTNiYjA4Y2Q1ZDlhOTQ4ZmYyZDcxYWY3M2IyOTQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-05T12:49:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-06T10:02:14Z"}, "message": "More consistently dump GIMPLE FE consumable stmts\n\nThe following makes more stmts consumable with the GIMPLE FE\nwhen dumping with -gimple.  In particular addresses in GIMPLE\noperand position require wrapping with _Literal.\n\nThe TDF_ flag space is now exhausted and I've removed overlaps\nand re-ordered things as to how it is supposed to work and\nmade it uint32_t and prepared the operator overloads for an\neasy migration to uint64_t once required.\n\n2021-10-05  Richard Biener  <rguenther@suse.de>\n\n\tPR c/102605\n\t* dumpfile.h (TDF_GIMPLE_VAL): New.\n\t(dump_flag): Re-order and adjust TDF_* flags.  Make\n\tthe enum uint32_t.  Use std::underlying_type in the\n\toperator overloads.\n\t(optgroup_flag): Likewise for the operator overloads.\n\t* tree-pretty-print.c (dump_generic_node): Wrap ADDR_EXPR\n\tin _Literal if TDF_GIMPLE_VAL.\n\t* gimple-pretty-print.c (dump_gimple_assign): Add\n\tTDF_GIMPLE_VAL to flags when dumping operands where only\n\tis_gimple_val are allowed.\n\t(dump_gimple_cond): Likewise.", "tree": {"sha": "44b87720221147d946d71b0282a85bc56c2a71d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44b87720221147d946d71b0282a85bc56c2a71d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90c3a62272313bb08cd5d9a948ff2d71af73b294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c3a62272313bb08cd5d9a948ff2d71af73b294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90c3a62272313bb08cd5d9a948ff2d71af73b294", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c3a62272313bb08cd5d9a948ff2d71af73b294/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba837323dbda2bca5a1c8a4c78092a88241dcfa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba837323dbda2bca5a1c8a4c78092a88241dcfa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba837323dbda2bca5a1c8a4c78092a88241dcfa3"}], "stats": {"total": 86, "additions": 57, "deletions": 29}, "files": [{"sha": "762267538450fc7013f51741b3fead146ecb1774", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c3a62272313bb08cd5d9a948ff2d71af73b294/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c3a62272313bb08cd5d9a948ff2d71af73b294/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=90c3a62272313bb08cd5d9a948ff2d71af73b294", "patch": "@@ -74,7 +74,7 @@ enum dump_kind\n    the DUMP_OPTIONS array in dumpfile.c. The TDF_* flags coexist with\n    MSG_* flags (for -fopt-info) and the bit values must be chosen to\n    allow that.  */\n-enum dump_flag\n+enum dump_flag : uint32_t\n {\n   /* Value of TDF_NONE is used just for bits filtered by TDF_KIND_MASK.  */\n   TDF_NONE  = 0,\n@@ -140,23 +140,26 @@ enum dump_flag\n   /* Dump SCEV details.  */\n   TDF_SCEV = (1 << 19),\n \n-  /* Dump in GIMPLE FE syntax  */\n+  /* Dump in GIMPLE FE syntax.  */\n   TDF_GIMPLE = (1 << 20),\n \n   /* Dump folding details.  */\n   TDF_FOLDING = (1 << 21),\n \n+  /* Dumping for range path solver.  */\n+  TDF_THREADING = (1 << 22),\n+\n   /* MSG_* flags for expressing the kinds of message to\n      be emitted by -fopt-info.  */\n \n   /* -fopt-info optimized sources.  */\n-  MSG_OPTIMIZED_LOCATIONS = (1 << 22),\n+  MSG_OPTIMIZED_LOCATIONS = (1 << 23),\n \n   /* Missed opportunities.  */\n-  MSG_MISSED_OPTIMIZATION = (1 << 23),\n+  MSG_MISSED_OPTIMIZATION = (1 << 24),\n \n   /* General optimization info.  */\n-  MSG_NOTE = (1 << 24),\n+  MSG_NOTE = (1 << 25),\n \n   /* Mask for selecting MSG_-kind flags.  */\n   MSG_ALL_KINDS = (MSG_OPTIMIZED_LOCATIONS\n@@ -175,33 +178,33 @@ enum dump_flag\n      sub-option of -fopt-info to show the internal messages.  */\n \n   /* Implicitly supplied for messages at the top-level dump scope.  */\n-  MSG_PRIORITY_USER_FACING = (1 << 25),\n+  MSG_PRIORITY_USER_FACING = (1 << 26),\n \n   /* Implicitly supplied for messages within nested dump scopes.  */\n-  MSG_PRIORITY_INTERNALS = (1 << 26),\n+  MSG_PRIORITY_INTERNALS = (1 << 27),\n \n   /* Supplied when an opt_problem generated in a nested scope is re-emitted\n      at the top-level.   We want to default to showing these in -fopt-info\n      output, but to *not* show them in dump files, as the message would be\n      shown twice, messing up \"scan-tree-dump-times\" in DejaGnu tests.  */\n-  MSG_PRIORITY_REEMITTED = (1 << 27),\n+  MSG_PRIORITY_REEMITTED = (1 << 28),\n \n   /* Mask for selecting MSG_PRIORITY_* flags.  */\n   MSG_ALL_PRIORITIES = (MSG_PRIORITY_USER_FACING\n \t\t\t| MSG_PRIORITY_INTERNALS\n \t\t\t| MSG_PRIORITY_REEMITTED),\n \n-  /* Dumping for -fcompare-debug.  */\n-  TDF_COMPARE_DEBUG = (1 << 28),\n+  /* All -fdump- flags.  */\n+  TDF_ALL_VALUES = (1 << 29) - 1,\n \n-  /* For error.  */\n-  TDF_ERROR = (1 << 26),\n+  /* Dumping for -fcompare-debug.  */\n+  TDF_COMPARE_DEBUG = (1 << 29),\n \n-  /* Dumping for range path solver.  */\n-  TDF_THREADING = (1 << 27),\n+  /* Dump a GIMPLE value which means wrapping certain things with _Literal.  */\n+  TDF_GIMPLE_VAL = (1 << 30),\n \n-  /* All values.  */\n-  TDF_ALL_VALUES = (1 << 29) - 1\n+  /* For error.  */\n+  TDF_ERROR = ((uint32_t)1 << 31),\n };\n \n /* Dump flags type.  */\n@@ -211,32 +214,36 @@ typedef enum dump_flag dump_flags_t;\n static inline dump_flags_t\n operator| (dump_flags_t lhs, dump_flags_t rhs)\n {\n-  return (dump_flags_t)((int)lhs | (int)rhs);\n+  return (dump_flags_t)((std::underlying_type<dump_flags_t>::type)lhs\n+\t\t\t| (std::underlying_type<dump_flags_t>::type)rhs);\n }\n \n static inline dump_flags_t\n operator& (dump_flags_t lhs, dump_flags_t rhs)\n {\n-  return (dump_flags_t)((int)lhs & (int)rhs);\n+  return (dump_flags_t)((std::underlying_type<dump_flags_t>::type)lhs\n+\t\t\t& (std::underlying_type<dump_flags_t>::type)rhs);\n }\n \n static inline dump_flags_t\n operator~ (dump_flags_t flags)\n {\n-  return (dump_flags_t)~((int)flags);\n+  return (dump_flags_t)~((std::underlying_type<dump_flags_t>::type)flags);\n }\n \n static inline dump_flags_t &\n operator|= (dump_flags_t &lhs, dump_flags_t rhs)\n {\n-  lhs = (dump_flags_t)((int)lhs | (int)rhs);\n+  lhs = (dump_flags_t)((std::underlying_type<dump_flags_t>::type)lhs\n+\t\t       | (std::underlying_type<dump_flags_t>::type)rhs);\n   return lhs;\n }\n \n static inline dump_flags_t &\n operator&= (dump_flags_t &lhs, dump_flags_t rhs)\n {\n-  lhs = (dump_flags_t)((int)lhs & (int)rhs);\n+  lhs = (dump_flags_t)((std::underlying_type<dump_flags_t>::type)lhs\n+\t\t       & (std::underlying_type<dump_flags_t>::type)rhs);\n   return lhs;\n }\n \n@@ -275,13 +282,15 @@ typedef enum optgroup_flag optgroup_flags_t;\n static inline optgroup_flags_t\n operator| (optgroup_flags_t lhs, optgroup_flags_t rhs)\n {\n-  return (optgroup_flags_t)((int)lhs | (int)rhs);\n+  return (optgroup_flags_t)((std::underlying_type<dump_flags_t>::type)lhs\n+\t\t\t    | (std::underlying_type<dump_flags_t>::type)rhs);\n }\n \n static inline optgroup_flags_t &\n operator|= (optgroup_flags_t &lhs, optgroup_flags_t rhs)\n {\n-  lhs = (optgroup_flags_t)((int)lhs | (int)rhs);\n+  lhs = (optgroup_flags_t)((std::underlying_type<dump_flags_t>::type)lhs\n+\t\t\t   | (std::underlying_type<dump_flags_t>::type)rhs);\n   return lhs;\n }\n "}, {"sha": "1cd1597359e8f29c52cff327fa87b57d1c18a2d6", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c3a62272313bb08cd5d9a948ff2d71af73b294/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c3a62272313bb08cd5d9a948ff2d71af73b294/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=90c3a62272313bb08cd5d9a948ff2d71af73b294", "patch": "@@ -677,11 +677,18 @@ dump_gimple_assign (pretty_printer *buffer, const gassign *gs, int spc,\n \t}\n \n       if (gimple_num_ops (gs) == 2)\n-        dump_unary_rhs (buffer, gs, spc, flags);\n+\tdump_unary_rhs (buffer, gs, spc,\n+\t\t\t((flags & TDF_GIMPLE)\n+\t\t\t && gimple_assign_rhs_class (gs) != GIMPLE_SINGLE_RHS)\n+\t\t\t? (flags | TDF_GIMPLE_VAL) : flags);\n       else if (gimple_num_ops (gs) == 3)\n-        dump_binary_rhs (buffer, gs, spc, flags);\n+\tdump_binary_rhs (buffer, gs, spc,\n+\t\t\t (flags & TDF_GIMPLE)\n+\t\t\t ? (flags | TDF_GIMPLE_VAL) : flags);\n       else if (gimple_num_ops (gs) == 4)\n-        dump_ternary_rhs (buffer, gs, spc, flags);\n+\tdump_ternary_rhs (buffer, gs, spc,\n+\t\t\t  (flags & TDF_GIMPLE)\n+\t\t\t  ? (flags | TDF_GIMPLE_VAL) : flags);\n       else\n         gcc_unreachable ();\n       if (!(flags & TDF_RHS_ONLY))\n@@ -1085,11 +1092,15 @@ dump_gimple_cond (pretty_printer *buffer, const gcond *gs, int spc,\n     {\n       if (!(flags & TDF_RHS_ONLY))\n \tpp_string (buffer, \"if (\");\n-      dump_generic_node (buffer, gimple_cond_lhs (gs), spc, flags, false);\n+      dump_generic_node (buffer, gimple_cond_lhs (gs), spc,\n+\t\t\t flags | ((flags & TDF_GIMPLE) ? TDF_GIMPLE_VAL : TDF_NONE),\n+\t\t\t false);\n       pp_space (buffer);\n       pp_string (buffer, op_symbol_code (gimple_cond_code (gs)));\n       pp_space (buffer);\n-      dump_generic_node (buffer, gimple_cond_rhs (gs), spc, flags, false);\n+      dump_generic_node (buffer, gimple_cond_rhs (gs), spc,\n+\t\t\t flags | ((flags & TDF_GIMPLE) ? TDF_GIMPLE_VAL : TDF_NONE),\n+\t\t\t false);\n       if (!(flags & TDF_RHS_ONLY))\n \t{\n \t  edge_iterator ei;"}, {"sha": "30a3945c37ccb7067c9fdc6918ef599c27952292", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c3a62272313bb08cd5d9a948ff2d71af73b294/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c3a62272313bb08cd5d9a948ff2d71af73b294/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=90c3a62272313bb08cd5d9a948ff2d71af73b294", "patch": "@@ -2873,10 +2873,18 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       break;\n \n       /* Unary arithmetic and logic expressions.  */\n+    case ADDR_EXPR:\n+      if (flags & TDF_GIMPLE_VAL)\n+\t{\n+\t  pp_string (pp, \"_Literal (\");\n+\t  dump_generic_node (pp, TREE_TYPE (node), spc,\n+\t\t\t     flags & ~TDF_GIMPLE_VAL, false);\n+\t  pp_character (pp, ')');\n+\t}\n+      /* Fallthru.  */\n     case NEGATE_EXPR:\n     case BIT_NOT_EXPR:\n     case TRUTH_NOT_EXPR:\n-    case ADDR_EXPR:\n     case PREDECREMENT_EXPR:\n     case PREINCREMENT_EXPR:\n     case INDIRECT_REF:"}]}