{"sha": "90acd49f6ba247e4549224c2178910aee95a2617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBhY2Q0OWY2YmEyNDdlNDU0OTIyNGMyMTc4OTEwYWVlOTVhMjYxNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-09-24T11:38:29Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-09-24T11:38:29Z"}, "message": "Use more switch statements.\n\n2019-09-24  Martin Liska  <mliska@suse.cz>\n\n\t* cfgexpand.c (gimple_assign_rhs_to_tree): Use switch statement\n\tinstead of if-elseif-elseif-...\n\t* gimple-expr.c (extract_ops_from_tree): Likewise.\n\t* gimple.c (get_gimple_rhs_num_ops): Likewise.\n\t* tree-ssa-forwprop.c (rhs_to_tree): Likewise.\n\nFrom-SVN: r276095", "tree": {"sha": "f15a675e455fcdce2a341e15074a7799dfe078a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f15a675e455fcdce2a341e15074a7799dfe078a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90acd49f6ba247e4549224c2178910aee95a2617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90acd49f6ba247e4549224c2178910aee95a2617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90acd49f6ba247e4549224c2178910aee95a2617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90acd49f6ba247e4549224c2178910aee95a2617/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "231f75463c25e2a27c21c19f31bfbda421e12f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231f75463c25e2a27c21c19f31bfbda421e12f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231f75463c25e2a27c21c19f31bfbda421e12f49"}], "stats": {"total": 180, "additions": 98, "deletions": 82}, "files": [{"sha": "1c4c016f46fb23d1444475c94ced8b43f1afe394", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90acd49f6ba247e4549224c2178910aee95a2617/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90acd49f6ba247e4549224c2178910aee95a2617/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90acd49f6ba247e4549224c2178910aee95a2617", "patch": "@@ -1,3 +1,11 @@\n+2019-09-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* cfgexpand.c (gimple_assign_rhs_to_tree): Use switch statement\n+\tinstead of if-elseif-elseif-...\n+\t* gimple-expr.c (extract_ops_from_tree): Likewise.\n+\t* gimple.c (get_gimple_rhs_num_ops): Likewise.\n+\t* tree-ssa-forwprop.c (rhs_to_tree): Likewise.\n+\n 2019-09-24  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/91831"}, {"sha": "a2f96239e2fee4d877e404fc9d317857de7bd67d", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90acd49f6ba247e4549224c2178910aee95a2617/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90acd49f6ba247e4549224c2178910aee95a2617/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=90acd49f6ba247e4549224c2178910aee95a2617", "patch": "@@ -104,38 +104,38 @@ tree\n gimple_assign_rhs_to_tree (gimple *stmt)\n {\n   tree t;\n-  enum gimple_rhs_class grhs_class;\n-\n-  grhs_class = get_gimple_rhs_class (gimple_expr_code (stmt));\n-\n-  if (grhs_class == GIMPLE_TERNARY_RHS)\n-    t = build3 (gimple_assign_rhs_code (stmt),\n-\t\tTREE_TYPE (gimple_assign_lhs (stmt)),\n-\t\tgimple_assign_rhs1 (stmt),\n-\t\tgimple_assign_rhs2 (stmt),\n-\t\tgimple_assign_rhs3 (stmt));\n-  else if (grhs_class == GIMPLE_BINARY_RHS)\n-    t = build2 (gimple_assign_rhs_code (stmt),\n-\t\tTREE_TYPE (gimple_assign_lhs (stmt)),\n-\t\tgimple_assign_rhs1 (stmt),\n-\t\tgimple_assign_rhs2 (stmt));\n-  else if (grhs_class == GIMPLE_UNARY_RHS)\n-    t = build1 (gimple_assign_rhs_code (stmt),\n-\t\tTREE_TYPE (gimple_assign_lhs (stmt)),\n-\t\tgimple_assign_rhs1 (stmt));\n-  else if (grhs_class == GIMPLE_SINGLE_RHS)\n-    {\n-      t = gimple_assign_rhs1 (stmt);\n-      /* Avoid modifying this tree in place below.  */\n-      if ((gimple_has_location (stmt) && CAN_HAVE_LOCATION_P (t)\n-\t   && gimple_location (stmt) != EXPR_LOCATION (t))\n-\t  || (gimple_block (stmt)\n-\t      && currently_expanding_to_rtl\n-\t      && EXPR_P (t)))\n-\tt = copy_node (t);\n+  switch (get_gimple_rhs_class (gimple_expr_code (stmt)))\n+    {\n+    case GIMPLE_TERNARY_RHS:\n+      t = build3 (gimple_assign_rhs_code (stmt),\n+\t\t  TREE_TYPE (gimple_assign_lhs (stmt)),\n+\t\t  gimple_assign_rhs1 (stmt), gimple_assign_rhs2 (stmt),\n+\t\t  gimple_assign_rhs3 (stmt));\n+      break;\n+    case GIMPLE_BINARY_RHS:\n+      t = build2 (gimple_assign_rhs_code (stmt),\n+\t\t  TREE_TYPE (gimple_assign_lhs (stmt)),\n+\t\t  gimple_assign_rhs1 (stmt), gimple_assign_rhs2 (stmt));\n+      break;\n+    case GIMPLE_UNARY_RHS:\n+      t = build1 (gimple_assign_rhs_code (stmt),\n+\t\t  TREE_TYPE (gimple_assign_lhs (stmt)),\n+\t\t  gimple_assign_rhs1 (stmt));\n+      break;\n+    case GIMPLE_SINGLE_RHS:\n+      {\n+\tt = gimple_assign_rhs1 (stmt);\n+\t/* Avoid modifying this tree in place below.  */\n+\tif ((gimple_has_location (stmt) && CAN_HAVE_LOCATION_P (t)\n+\t     && gimple_location (stmt) != EXPR_LOCATION (t))\n+\t    || (gimple_block (stmt) && currently_expanding_to_rtl\n+\t\t&& EXPR_P (t)))\n+\t  t = copy_node (t);\n+\tbreak;\n+      }\n+    default:\n+      gcc_unreachable ();\n     }\n-  else\n-    gcc_unreachable ();\n \n   if (gimple_has_location (stmt) && CAN_HAVE_LOCATION_P (t))\n     SET_EXPR_LOCATION (t, gimple_location (stmt));"}, {"sha": "4082828e1987330db4682c9b4d67c4051beaad4d", "filename": "gcc/gimple-expr.c", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90acd49f6ba247e4549224c2178910aee95a2617/gcc%2Fgimple-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90acd49f6ba247e4549224c2178910aee95a2617/gcc%2Fgimple-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.c?ref=90acd49f6ba247e4549224c2178910aee95a2617", "patch": "@@ -528,37 +528,40 @@ void\n extract_ops_from_tree (tree expr, enum tree_code *subcode_p, tree *op1_p,\n \t\t       tree *op2_p, tree *op3_p)\n {\n-  enum gimple_rhs_class grhs_class;\n-\n   *subcode_p = TREE_CODE (expr);\n-  grhs_class = get_gimple_rhs_class (*subcode_p);\n-\n-  if (grhs_class == GIMPLE_TERNARY_RHS)\n-    {\n-      *op1_p = TREE_OPERAND (expr, 0);\n-      *op2_p = TREE_OPERAND (expr, 1);\n-      *op3_p = TREE_OPERAND (expr, 2);\n-    }\n-  else if (grhs_class == GIMPLE_BINARY_RHS)\n-    {\n-      *op1_p = TREE_OPERAND (expr, 0);\n-      *op2_p = TREE_OPERAND (expr, 1);\n-      *op3_p = NULL_TREE;\n-    }\n-  else if (grhs_class == GIMPLE_UNARY_RHS)\n-    {\n-      *op1_p = TREE_OPERAND (expr, 0);\n-      *op2_p = NULL_TREE;\n-      *op3_p = NULL_TREE;\n-    }\n-  else if (grhs_class == GIMPLE_SINGLE_RHS)\n+  switch (get_gimple_rhs_class (*subcode_p))\n     {\n-      *op1_p = expr;\n-      *op2_p = NULL_TREE;\n-      *op3_p = NULL_TREE;\n+    case GIMPLE_TERNARY_RHS:\n+      {\n+\t*op1_p = TREE_OPERAND (expr, 0);\n+\t*op2_p = TREE_OPERAND (expr, 1);\n+\t*op3_p = TREE_OPERAND (expr, 2);\n+\tbreak;\n+      }\n+    case GIMPLE_BINARY_RHS:\n+      {\n+\t*op1_p = TREE_OPERAND (expr, 0);\n+\t*op2_p = TREE_OPERAND (expr, 1);\n+\t*op3_p = NULL_TREE;\n+\tbreak;\n+      }\n+    case GIMPLE_UNARY_RHS:\n+      {\n+\t*op1_p = TREE_OPERAND (expr, 0);\n+\t*op2_p = NULL_TREE;\n+\t*op3_p = NULL_TREE;\n+\tbreak;\n+      }\n+    case GIMPLE_SINGLE_RHS:\n+      {\n+\t*op1_p = expr;\n+\t*op2_p = NULL_TREE;\n+\t*op3_p = NULL_TREE;\n+\tbreak;\n+      }\n+    default:\n+      gcc_unreachable ();\n     }\n-  else\n-    gcc_unreachable ();\n }\n \n /* Extract operands for a GIMPLE_COND statement out of COND_EXPR tree COND.  */"}, {"sha": "af62c8bf47740a449f7e4e304245d76d315c411e", "filename": "gcc/gimple.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90acd49f6ba247e4549224c2178910aee95a2617/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90acd49f6ba247e4549224c2178910aee95a2617/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=90acd49f6ba247e4549224c2178910aee95a2617", "patch": "@@ -2225,16 +2225,18 @@ dump_gimple_statistics (void)\n unsigned\n get_gimple_rhs_num_ops (enum tree_code code)\n {\n-  enum gimple_rhs_class rhs_class = get_gimple_rhs_class (code);\n-\n-  if (rhs_class == GIMPLE_UNARY_RHS || rhs_class == GIMPLE_SINGLE_RHS)\n-    return 1;\n-  else if (rhs_class == GIMPLE_BINARY_RHS)\n-    return 2;\n-  else if (rhs_class == GIMPLE_TERNARY_RHS)\n-    return 3;\n-  else\n-    gcc_unreachable ();\n+  switch (get_gimple_rhs_class (code))\n+    {\n+    case GIMPLE_UNARY_RHS:\n+    case GIMPLE_SINGLE_RHS:\n+      return 1;\n+    case GIMPLE_BINARY_RHS:\n+      return 2;\n+    case GIMPLE_TERNARY_RHS:\n+      return 3;\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n \n #define DEFTREECODE(SYM, STRING, TYPE, NARGS)   \t\t\t    \\"}, {"sha": "221f140b356fc9792525882ec1e27d04fe240edf", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90acd49f6ba247e4549224c2178910aee95a2617/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90acd49f6ba247e4549224c2178910aee95a2617/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=90acd49f6ba247e4549224c2178910aee95a2617", "patch": "@@ -347,19 +347,22 @@ rhs_to_tree (tree type, gimple *stmt)\n {\n   location_t loc = gimple_location (stmt);\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n-  if (get_gimple_rhs_class (code) == GIMPLE_TERNARY_RHS)\n-    return fold_build3_loc (loc, code, type, gimple_assign_rhs1 (stmt),\n-\t\t\t    gimple_assign_rhs2 (stmt),\n-\t\t\t    gimple_assign_rhs3 (stmt));\n-  else if (get_gimple_rhs_class (code) == GIMPLE_BINARY_RHS)\n-    return fold_build2_loc (loc, code, type, gimple_assign_rhs1 (stmt),\n-\t\t\tgimple_assign_rhs2 (stmt));\n-  else if (get_gimple_rhs_class (code) == GIMPLE_UNARY_RHS)\n-    return build1 (code, type, gimple_assign_rhs1 (stmt));\n-  else if (get_gimple_rhs_class (code) == GIMPLE_SINGLE_RHS)\n-    return gimple_assign_rhs1 (stmt);\n-  else\n-    gcc_unreachable ();\n+  switch (get_gimple_rhs_class (code))\n+    {\n+    case GIMPLE_TERNARY_RHS:\n+      return fold_build3_loc (loc, code, type, gimple_assign_rhs1 (stmt),\n+\t\t\t      gimple_assign_rhs2 (stmt),\n+\t\t\t      gimple_assign_rhs3 (stmt));\n+    case GIMPLE_BINARY_RHS:\n+      return fold_build2_loc (loc, code, type, gimple_assign_rhs1 (stmt),\n+\t\t\t      gimple_assign_rhs2 (stmt));\n+    case GIMPLE_UNARY_RHS:\n+      return build1 (code, type, gimple_assign_rhs1 (stmt));\n+    case GIMPLE_SINGLE_RHS:\n+      return gimple_assign_rhs1 (stmt);\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n \n /* Combine OP0 CODE OP1 in the context of a COND_EXPR.  Returns"}]}