{"sha": "dfccfad9bba8dbc71157e1ece97e785e895b9799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZjY2ZhZDliYmE4ZGJjNzExNTdlMWVjZTk3ZTc4NWU4OTViOTc5OQ==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2003-08-19T00:16:36Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2003-08-19T00:16:36Z"}, "message": "crti.asm (_init, _fini): Add alternate code for new call0 ABI.\n\n        * config/xtensa/crti.asm (_init, _fini): Add alternate code for new\n        call0 ABI.\n        * config/xtensa/crtn.asm (_init, _fini): Likewise.\n        * config/xtensa/lib1funcs.asm (__mulsi3, __udivsi3, __divsi3,\n        __umodsi3, __modsi3): Likewise.\n        * config/xtensa/t-xtensa (crti.o, crtn.o): Add $(GCC_CFLAGS) and\n        $(INCLUDES).\n\nFrom-SVN: r70552", "tree": {"sha": "8965c3e6145dcea4eab5c960878efa403a5826fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8965c3e6145dcea4eab5c960878efa403a5826fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfccfad9bba8dbc71157e1ece97e785e895b9799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfccfad9bba8dbc71157e1ece97e785e895b9799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfccfad9bba8dbc71157e1ece97e785e895b9799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfccfad9bba8dbc71157e1ece97e785e895b9799/comments", "author": null, "committer": null, "parents": [{"sha": "ba45771e5d7472864e910034e2a22e16e1e9ff75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba45771e5d7472864e910034e2a22e16e1e9ff75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba45771e5d7472864e910034e2a22e16e1e9ff75"}], "stats": {"total": 110, "additions": 84, "deletions": 26}, "files": [{"sha": "d14e72c935aff36b606693c8cfc6be43a93e979d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfccfad9bba8dbc71157e1ece97e785e895b9799/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfccfad9bba8dbc71157e1ece97e785e895b9799/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfccfad9bba8dbc71157e1ece97e785e895b9799", "patch": "@@ -1,3 +1,13 @@\n+2003-08-18  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* config/xtensa/crti.asm (_init, _fini): Add alternate code for new\n+\tcall0 ABI.\n+\t* config/xtensa/crtn.asm (_init, _fini): Likewise.\n+\t* config/xtensa/lib1funcs.asm (__mulsi3, __udivsi3, __divsi3,\n+\t__umodsi3, __modsi3): Likewise.\n+\t* config/xtensa/t-xtensa (crti.o, crtn.o): Add $(GCC_CFLAGS) and\n+\t$(INCLUDES).\n+\n 2003-08-18  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/spe.md (\"*nabssf2_gpr\"): New."}, {"sha": "8e5cbe23fbd30bd9b5c18b4b9a4bdf6251678ffd", "filename": "gcc/config/xtensa/crti.asm", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfccfad9bba8dbc71157e1ece97e785e895b9799/gcc%2Fconfig%2Fxtensa%2Fcrti.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfccfad9bba8dbc71157e1ece97e785e895b9799/gcc%2Fconfig%2Fxtensa%2Fcrti.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fcrti.asm?ref=dfccfad9bba8dbc71157e1ece97e785e895b9799", "patch": "@@ -29,16 +29,28 @@\n # .init sections.  Users may put any desired instructions in those\n # sections.\n \n+#include \"xtensa-config.h\"\n+\n \t.section .init\n \t.globl _init\n \t.type _init,@function\n \t.align\t4\n _init:\n+#if XCHAL_HAVE_WINDOWED && !__XTENSA_CALL0_ABI__\n \tentry\tsp, 64\n+#else\n+\taddi\tsp, sp, -32\n+\ts32i\ta0, sp, 0\n+#endif\n \n \t.section .fini\n \t.globl _fini\n \t.type _fini,@function\n \t.align\t4\n _fini:\n+#if XCHAL_HAVE_WINDOWED && !__XTENSA_CALL0_ABI__\n \tentry\tsp, 64\n+#else\n+\taddi\tsp, sp, -32\n+\ts32i\ta0, sp, 0\n+#endif"}, {"sha": "9ccf2e61ab0ef314b4eedd5751607cc4e431d916", "filename": "gcc/config/xtensa/crtn.asm", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfccfad9bba8dbc71157e1ece97e785e895b9799/gcc%2Fconfig%2Fxtensa%2Fcrtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfccfad9bba8dbc71157e1ece97e785e895b9799/gcc%2Fconfig%2Fxtensa%2Fcrtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fcrtn.asm?ref=dfccfad9bba8dbc71157e1ece97e785e895b9799", "patch": "@@ -29,8 +29,22 @@\n # fact return.  Users may put any desired instructions in those sections.\n # This file is the last thing linked into any executable.\n \n+#include \"xtensa-config.h\"\n+\n \t.section .init\n+#if XCHAL_HAVE_WINDOWED && !__XTENSA_CALL0_ABI__\n \tretw\n+#else\n+\tl32i\ta0, sp, 0\n+\taddi\tsp, sp, 32\n+\tret\n+#endif\n \n \t.section .fini\n+#if XCHAL_HAVE_WINDOWED && !__XTENSA_CALL0_ABI__\n \tretw\n+#else\n+\tl32i\ta0, sp, 0\n+\taddi\tsp, sp, 32\n+\tret\n+#endif"}, {"sha": "2df00218a5a8f156fb6c4d71653a6cb62ba8f891", "filename": "gcc/config/xtensa/lib1funcs.asm", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfccfad9bba8dbc71157e1ece97e785e895b9799/gcc%2Fconfig%2Fxtensa%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfccfad9bba8dbc71157e1ece97e785e895b9799/gcc%2Fconfig%2Fxtensa%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flib1funcs.asm?ref=dfccfad9bba8dbc71157e1ece97e785e895b9799", "patch": "@@ -75,19 +75,41 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #endif\n \t.endm\n \n+# Define macros for function entry and return, supporting either the\n+# standard register windowed ABI or the non-windowed call0 ABI.  These\n+# macros do not allocate any extra stack space, so they only work for\n+# leaf functions that do not need to spill anything to the stack.\n+\n+\t.macro abi_entry reg, size\n+#if XCHAL_HAVE_WINDOWED && !__XTENSA_CALL0_ABI__\n+\tentry \\reg, \\size\n+#else\n+\t/* do nothing */\n+#endif\n+\t.endm\n+\n+\t.macro abi_return\n+#if XCHAL_HAVE_WINDOWED && !__XTENSA_CALL0_ABI__\n+\tretw\n+#else\n+\tret\n+#endif\n+\t.endm\n+\n+\n #ifdef L_mulsi3\n \t.align\t4\n \t.global\t__mulsi3\n \t.type\t__mulsi3,@function\n __mulsi3:\n-\tentry\tsp, 32\n+\tabi_entry sp, 32\n \n #if XCHAL_HAVE_MUL16\n \tor\ta4, a2, a3\n \tsrai\ta4, a4, 16\n \tbnez\ta4, .LMUL16\n \tmul16u\ta2, a2, a3\n-\tretw\n+\tabi_return\n .LMUL16:\n \tsrai\ta4, a2, 16\n \tsrai\ta5, a3, 16\n@@ -143,7 +165,7 @@ __mulsi3:\n \tbgeui\ta3, 16, .Lmult_main_loop\n \tneg\ta3, a2\n \tmovltz\ta2, a3, a5\n-\tretw\n+\tabi_return\n \n \t.align\t4\n .Lmult_main_loop:\n@@ -173,7 +195,7 @@ __mulsi3:\n \n #endif /* !XCHAL_HAVE_MUL16 && !XCHAL_HAVE_MAC16 */\n \n-\tretw\n+\tabi_return\n \t.size\t__mulsi3,.-__mulsi3\n \n #endif /* L_mulsi3 */\n@@ -242,7 +264,7 @@ __nsau_data:\n \t.global\t__udivsi3\n \t.type\t__udivsi3,@function\n __udivsi3:\n-\tentry\tsp, 32\n+\tabi_entry sp, 32\n \tbltui\ta3, 2, .Lle_one\t# check if the divisor <= 1\n \n \tmov\ta6, a2\t\t# keep dividend in a6\n@@ -275,22 +297,22 @@ __udivsi3:\n \tbltu\ta6, a3, .Lreturn\n \taddi\ta2, a2, 1\t# increment quotient if dividend >= divisor\n .Lreturn:\n-\tretw\n+\tabi_return\n \n .Lspecial:\n \t# return dividend >= divisor\n \tmovi\ta2, 0\n \tbltu\ta6, a3, .Lreturn2\n \tmovi\ta2, 1\n .Lreturn2:\n-\tretw\n+\tabi_return\n \n .Lle_one:\n \tbeqz\ta3, .Lerror\t# if divisor == 1, return the dividend\n-\tretw\n+\tabi_return\n .Lerror:\n \tmovi\ta2, 0\t\t# just return 0; could throw an exception\n-\tretw\n+\tabi_return\n \t.size\t__udivsi3,.-__udivsi3\n \n #endif /* L_udivsi3 */\n@@ -301,7 +323,7 @@ __udivsi3:\n \t.global\t__divsi3\n \t.type\t__divsi3,@function\n __divsi3:\n-\tentry\tsp, 32\n+\tabi_entry sp, 32\n \txor\ta7, a2, a3\t# sign = dividend ^ divisor\n \tdo_abs\ta6, a2, a4\t# udividend = abs(dividend)\n \tdo_abs\ta3, a3, a4\t# udivisor = abs(divisor)\n@@ -337,7 +359,7 @@ __divsi3:\n .Lreturn:\n \tneg\ta5, a2\n \tmovltz\ta2, a5, a7\t# return (sign < 0) ? -quotient : quotient\n-\tretw\n+\tabi_return\n \n .Lspecial:\n \tmovi\ta2, 0\n@@ -346,16 +368,16 @@ __divsi3:\n \tmovi\ta4, -1\n \tmovltz\ta2, a4, a7\t# else return (sign < 0) ? -1 :\t 1 \n .Lreturn2:\n-\tretw\n+\tabi_return\n \n .Lle_one:\n \tbeqz\ta3, .Lerror\n \tneg\ta2, a6\t\t# if udivisor == 1, then return...\n \tmovgez\ta2, a6, a7\t# (sign < 0) ? -udividend : udividend\n-\tretw\n+\tabi_return\n .Lerror:\n \tmovi\ta2, 0\t\t# just return 0; could throw an exception\n-\tretw\n+\tabi_return\n \t.size\t__divsi3,.-__divsi3\n \n #endif /* L_divsi3 */\n@@ -366,7 +388,7 @@ __divsi3:\n \t.global\t__umodsi3\n \t.type\t__umodsi3,@function\n __umodsi3:\n-\tentry\tsp, 32\n+\tabi_entry sp, 32\n \tbltui\ta3, 2, .Lle_one\t# check if the divisor is <= 1\n \n \tdo_nsau\ta5, a2, a6, a7\t# dividend_shift = nsau(dividend)\n@@ -395,19 +417,19 @@ __umodsi3:\n \tbltu\ta2, a3, .Lreturn\n \tsub\ta2, a2, a3\t# subtract once more if dividend >= divisor\n .Lreturn:\n-\tretw\n+\tabi_return\n \n .Lspecial:\n \tbltu\ta2, a3, .Lreturn2\n \tsub\ta2, a2, a3\t# subtract once if dividend >= divisor\n .Lreturn2:\n-\tretw\n+\tabi_return\n \n .Lle_one:\n \t# the divisor is either 0 or 1, so just return 0.\n \t# someday we may want to throw an exception if the divisor is 0.\n \tmovi\ta2, 0\n-\tretw\n+\tabi_return\n \t.size\t__umodsi3,.-__umodsi3\n \n #endif /* L_umodsi3 */\n@@ -418,7 +440,7 @@ __umodsi3:\n \t.global\t__modsi3\n \t.type\t__modsi3,@function\n __modsi3:\n-\tentry\tsp, 32\n+\tabi_entry sp, 32\n \tmov\ta7, a2\t\t# save original (signed) dividend\n \tdo_abs\ta2, a2, a4\t# udividend = abs(dividend)\n \tdo_abs\ta3, a3, a4\t# udivisor = abs(divisor)\n@@ -452,7 +474,7 @@ __modsi3:\n \tbgez\ta7, .Lpositive\n \tneg\ta2, a2\t\t# if (dividend < 0), return -udividend\n .Lpositive:\t\n-\tretw\n+\tabi_return\n \n .Lspecial:\n \tbltu\ta2, a3, .Lreturn2\n@@ -461,13 +483,13 @@ __modsi3:\n \tbgez\ta7, .Lpositive2\n \tneg\ta2, a2\t\t# if (dividend < 0), return -udividend\n .Lpositive2:\t\n-\tretw\n+\tabi_return\n \n .Lle_one:\n \t# udivisor is either 0 or 1, so just return 0.\n \t# someday we may want to throw an exception if udivisor is 0.\n \tmovi\ta2, 0\n-\tretw\n+\tabi_return\n \t.size\t__modsi3,.-__modsi3\n \n #endif /* L_modsi3 */"}, {"sha": "d39f7fe0e0fd6b80bddb15138e34627e87edfc1f", "filename": "gcc/config/xtensa/t-xtensa", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfccfad9bba8dbc71157e1ece97e785e895b9799/gcc%2Fconfig%2Fxtensa%2Ft-xtensa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfccfad9bba8dbc71157e1ece97e785e895b9799/gcc%2Fconfig%2Fxtensa%2Ft-xtensa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Ft-xtensa?ref=dfccfad9bba8dbc71157e1ece97e785e895b9799", "patch": "@@ -17,11 +17,11 @@ LIB1ASMFUNCS = _mulsi3 _nsau _divsi3 _modsi3 _udivsi3 _umodsi3\n LIB2FUNCS_EXTRA += $(srcdir)/config/xtensa/lib2funcs.S\n \n $(T)crti.o: $(srcdir)/config/xtensa/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)crti.o \\\n-\t  -x assembler-with-cpp $(srcdir)/config/xtensa/crti.asm\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/xtensa/crti.asm\n $(T)crtn.o: $(srcdir)/config/xtensa/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)crtn.o \\\n-\t  -x assembler-with-cpp $(srcdir)/config/xtensa/crtn.asm\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/xtensa/crtn.asm\n \n $(out_object_file): gt-xtensa.h\n gt-xtensa.h : s-gtype ; @true"}]}