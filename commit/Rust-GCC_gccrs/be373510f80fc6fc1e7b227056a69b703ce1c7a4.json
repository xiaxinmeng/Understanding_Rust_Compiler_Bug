{"sha": "be373510f80fc6fc1e7b227056a69b703ce1c7a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUzNzM1MTBmODBmYzZmYzFlN2IyMjcwNTZhNjliNzAzY2UxYzdhNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-11-04T16:50:45Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-11-04T16:50:45Z"}, "message": "Pass manager: add support for termination of pass list\n\n\t* cgraphunit.c (cgraph_node::expand_thunk): Call\n\tallocate_struct_function before init_function_start.\n\t(cgraph_node::expand): Use push_cfun and pop_cfun.\n\t* config/i386/i386.c (ix86_code_end): Call\n\tallocate_struct_function before init_function_start.\n\t* config/rs6000/rs6000.c (rs6000_code_end): Likewise.\n\t* function.c (init_function_start): Move preamble to all\n\tcallers.\n\t* passes.c (do_per_function_toporder): Use push_cfun and pop_cfun.\n\t(execute_one_pass): Handle newly added TODO_discard_function.\n\t(execute_pass_list_1): Terminate if cfun equals to NULL.\n\t(execute_pass_list): Do not push and pop cfun, expect that\n\tcfun is set.\n\t* tree-pass.h (TODO_discard_function): Define.\n\nFrom-SVN: r229764", "tree": {"sha": "316a2296cdfe0b08198dd411e536b7787022ff04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/316a2296cdfe0b08198dd411e536b7787022ff04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be373510f80fc6fc1e7b227056a69b703ce1c7a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be373510f80fc6fc1e7b227056a69b703ce1c7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be373510f80fc6fc1e7b227056a69b703ce1c7a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be373510f80fc6fc1e7b227056a69b703ce1c7a4/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6c764d02ec7716720ceac34b667cda3741c5c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c764d02ec7716720ceac34b667cda3741c5c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6c764d02ec7716720ceac34b667cda3741c5c42"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "6e7020c1739f13423945a24b4736a76ed00674e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be373510f80fc6fc1e7b227056a69b703ce1c7a4", "patch": "@@ -1,3 +1,20 @@\n+2015-11-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraphunit.c (cgraph_node::expand_thunk): Call\n+\tallocate_struct_function before init_function_start.\n+\t(cgraph_node::expand): Use push_cfun and pop_cfun.\n+\t* config/i386/i386.c (ix86_code_end): Call\n+\tallocate_struct_function before init_function_start.\n+\t* config/rs6000/rs6000.c (rs6000_code_end): Likewise.\n+\t* function.c (init_function_start): Move preamble to all\n+\tcallers.\n+\t* passes.c (do_per_function_toporder): Use push_cfun and pop_cfun.\n+\t(execute_one_pass): Handle newly added TODO_discard_function.\n+\t(execute_pass_list_1): Terminate if cfun equals to NULL.\n+\t(execute_pass_list): Do not push and pop cfun, expect that\n+\tcfun is set.\n+\t* tree-pass.h (TODO_discard_function): Define.\n+\n 2015-11-04  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* cfganal.c (inverted_post_order_compute): Remove conditional"}, {"sha": "f73d9a78e0303257afadc9aa10c5a3a7b5588216", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=be373510f80fc6fc1e7b227056a69b703ce1c7a4", "patch": "@@ -1618,6 +1618,7 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       fn_block = make_node (BLOCK);\n       BLOCK_VARS (fn_block) = a;\n       DECL_INITIAL (thunk_fndecl) = fn_block;\n+      allocate_struct_function (thunk_fndecl, false);\n       init_function_start (thunk_fndecl);\n       cfun->is_thunk = 1;\n       insn_locations_init ();\n@@ -1632,7 +1633,6 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       insn_locations_finalize ();\n       init_insn_lengths ();\n       free_after_compilation (cfun);\n-      set_cfun (NULL);\n       TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n       thunk.thunk_p = false;\n       analyzed = false;\n@@ -1944,9 +1944,11 @@ cgraph_node::expand (void)\n   bitmap_obstack_initialize (NULL);\n \n   /* Initialize the RTL code for the function.  */\n-  current_function_decl = decl;\n   saved_loc = input_location;\n   input_location = DECL_SOURCE_LOCATION (decl);\n+\n+  gcc_assert (DECL_STRUCT_FUNCTION (decl));\n+  push_cfun (DECL_STRUCT_FUNCTION (decl));\n   init_function_start (decl);\n \n   gimple_register_cfg_hooks ();\n@@ -2014,8 +2016,8 @@ cgraph_node::expand (void)\n \n   /* Make sure that BE didn't give up on compiling.  */\n   gcc_assert (TREE_ASM_WRITTEN (decl));\n-  set_cfun (NULL);\n-  current_function_decl = NULL;\n+  if (cfun)\n+    pop_cfun ();\n \n   /* It would make a lot more sense to output thunks before function body to get more\n      forward and lest backwarding jumps.  This however would need solving problem"}, {"sha": "2a965f678a0314df1277125ac5f5b80738c77aad", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=be373510f80fc6fc1e7b227056a69b703ce1c7a4", "patch": "@@ -10958,6 +10958,7 @@ ix86_code_end (void)\n \n       DECL_INITIAL (decl) = make_node (BLOCK);\n       current_function_decl = decl;\n+      allocate_struct_function (decl, false);\n       init_function_start (decl);\n       first_function_block_is_cold = false;\n       /* Make sure unwind info is emitted for the thunk if needed.  */"}, {"sha": "8bdd64674bf8ad189676a2026b4a65b23709e656", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=be373510f80fc6fc1e7b227056a69b703ce1c7a4", "patch": "@@ -34594,6 +34594,7 @@ rs6000_code_end (void)\n \n   DECL_INITIAL (decl) = make_node (BLOCK);\n   current_function_decl = decl;\n+  allocate_struct_function (decl, false);\n   init_function_start (decl);\n   first_function_block_is_cold = false;\n   /* Make sure unwind info is emitted for the thunk if needed.  */"}, {"sha": "0d7cabc1d4cefaa6e50b19b428852db756beccaa", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=be373510f80fc6fc1e7b227056a69b703ce1c7a4", "patch": "@@ -4957,11 +4957,6 @@ init_dummy_function_start (void)\n void\n init_function_start (tree subr)\n {\n-  if (subr && DECL_STRUCT_FUNCTION (subr))\n-    set_cfun (DECL_STRUCT_FUNCTION (subr));\n-  else\n-    allocate_struct_function (subr, false);\n-\n   /* Initialize backend, if needed.  */\n   initialize_rtl ();\n "}, {"sha": "7a10cb6334c2c770ef3f3ab7e646f4b9323cb342", "filename": "gcc/passes.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=be373510f80fc6fc1e7b227056a69b703ce1c7a4", "patch": "@@ -1706,7 +1706,12 @@ do_per_function_toporder (void (*callback) (function *, void *data), void *data)\n \t  order[i] = NULL;\n \t  node->process = 0;\n \t  if (node->has_gimple_body_p ())\n-\t    callback (DECL_STRUCT_FUNCTION (node->decl), data);\n+\t    {\n+\t      struct function *fn = DECL_STRUCT_FUNCTION (node->decl);\n+\t      push_cfun (fn);\n+\t      callback (fn, data);\n+\t      pop_cfun ();\n+\t    }\n \t}\n       symtab->remove_cgraph_removal_hook (hook);\n     }\n@@ -2347,6 +2352,23 @@ execute_one_pass (opt_pass *pass)\n \n   current_pass = NULL;\n \n+  if (todo_after & TODO_discard_function)\n+    {\n+      gcc_assert (cfun);\n+      /* As cgraph_node::release_body expects release dominators info,\n+\t we have to release it.  */\n+      if (dom_info_available_p (CDI_DOMINATORS))\n+\tfree_dominance_info (CDI_DOMINATORS);\n+\n+      if (dom_info_available_p (CDI_POST_DOMINATORS))\n+\tfree_dominance_info (CDI_POST_DOMINATORS);\n+\n+      tree fn = cfun->decl;\n+      pop_cfun ();\n+      gcc_assert (!cfun);\n+      cgraph_node::get (fn)->release_body ();\n+    }\n+\n   /* Signal this is a suitable GC collection point.  */\n   if (!((todo_after | pass->todo_flags_finish) & TODO_do_not_ggc_collect))\n     ggc_collect ();\n@@ -2361,6 +2383,9 @@ execute_pass_list_1 (opt_pass *pass)\n     {\n       gcc_assert (pass->type == GIMPLE_PASS\n \t\t  || pass->type == RTL_PASS);\n+\n+      if (cfun == NULL)\n+\treturn;\n       if (execute_one_pass (pass) && pass->sub)\n         execute_pass_list_1 (pass->sub);\n       pass = pass->next;\n@@ -2371,14 +2396,13 @@ execute_pass_list_1 (opt_pass *pass)\n void\n execute_pass_list (function *fn, opt_pass *pass)\n {\n-  push_cfun (fn);\n+  gcc_assert (fn == cfun);\n   execute_pass_list_1 (pass);\n-  if (fn->cfg)\n+  if (cfun && fn->cfg)\n     {\n       free_dominance_info (CDI_DOMINATORS);\n       free_dominance_info (CDI_POST_DOMINATORS);\n     }\n-  pop_cfun ();\n }\n \n /* Write out all LTO data.  */"}, {"sha": "49e22a9d091247316b7b31074f636c6a87be2dab", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be373510f80fc6fc1e7b227056a69b703ce1c7a4/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=be373510f80fc6fc1e7b227056a69b703ce1c7a4", "patch": "@@ -300,6 +300,9 @@ class simple_ipa_opt_pass : public opt_pass\n /* Rebuild the callgraph edges.  */\n #define TODO_rebuild_cgraph_edges       (1 << 22)\n \n+/* Release function body and stop pass manager.  */\n+#define TODO_discard_function\t\t(1 << 23)\n+\n /* Internally used in execute_function_todo().  */\n #define TODO_update_ssa_any\t\t\\\n     (TODO_update_ssa\t\t\t\\"}]}