{"sha": "ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU4YTZhM2VlNWQzNWMyZTE4ODIyNWMyYmJiNThjMmNjYTY5YTJhYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-27T00:37:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-27T00:37:48Z"}, "message": "c-typeck.c (build_offsetof): Remove.\n\n        * c-typeck.c (build_offsetof): Remove.\n        * c-tree.h (build_offsetof): Remove.\n        * c-common.c (fold_offsetof_1, fold_offsetof): New.\n        * c-common.h (fold_offsetof): Declare.\n        * c-parse.in (offsetof_base): New.\n        (offsetof_member_designator): Use it.  Build references, not just\n        a tree list.\n        (primary): Use fold_offsetof, not build_offsetof.\n\nFrom-SVN: r86651", "tree": {"sha": "dac64a782e7964b7582fea44120f93c164d43398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dac64a782e7964b7582fea44120f93c164d43398"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/comments", "author": null, "committer": null, "parents": [{"sha": "525c6bf5a6b91fa09f57b79bad9737ab3733601d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525c6bf5a6b91fa09f57b79bad9737ab3733601d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/525c6bf5a6b91fa09f57b79bad9737ab3733601d"}], "stats": {"total": 131, "additions": 94, "deletions": 37}, "files": [{"sha": "84af91f9e9e3d7d98a39926ba6acd474c49f3fa0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab", "patch": "@@ -1,3 +1,14 @@\n+2004-08-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-typeck.c (build_offsetof): Remove.\n+\t* c-tree.h (build_offsetof): Remove.\n+\t* c-common.c (fold_offsetof_1, fold_offsetof): New.\n+\t* c-common.h (fold_offsetof): Declare.\n+\t* c-parse.in (offsetof_base): New.\n+\t(offsetof_member_designator): Use it.  Build references, not just\n+\ta tree list.\n+\t(primary): Use fold_offsetof, not build_offsetof.\n+\n 2004-08-26  Richard Henderson  <rth@redhat.com>\n \n \t* tree.c (staticp): Return the static object."}, {"sha": "03531d3ca035787bbfc96f8b8dc2a861eb00e640", "filename": "gcc/c-common.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab", "patch": "@@ -5436,4 +5436,69 @@ c_warn_unused_result (tree *top_p)\n     }\n }\n \n+/* Build the result of __builtin_offsetof.  EXPR is a nested sequence of\n+   component references, with an INDIRECT_REF at the bottom; much like\n+   the traditional rendering of offsetof as a macro.  Returns the folded\n+   and properly cast result.  */\n+\n+static tree\n+fold_offsetof_1 (tree expr)\n+{\n+  enum tree_code code = PLUS_EXPR;\n+  tree base, off, t;\n+\n+  switch (TREE_CODE (expr))\n+    {\n+    case ERROR_MARK:\n+      return expr;\n+\n+    case INDIRECT_REF:\n+      return size_zero_node;\n+\n+    case COMPONENT_REF:\n+      base = fold_offsetof_1 (TREE_OPERAND (expr, 0));\n+      if (base == error_mark_node)\n+\treturn base;\n+\n+      t = TREE_OPERAND (expr, 1);\n+      if (DECL_C_BIT_FIELD (t))\n+\t{\n+\t  error (\"attempt to take address of bit-field structure \"\n+\t\t \"member `%s'\", IDENTIFIER_POINTER (DECL_NAME (t)));\n+\t  return error_mark_node;\n+\t}\n+      off = size_binop (PLUS_EXPR, DECL_FIELD_OFFSET (t),\n+\t\t\tsize_int (tree_low_cst (DECL_FIELD_BIT_OFFSET (t), 1)\n+\t\t\t\t  / BITS_PER_UNIT));\n+      break;\n+\n+    case ARRAY_REF:\n+      base = fold_offsetof_1 (TREE_OPERAND (expr, 0));\n+      if (base == error_mark_node)\n+\treturn base;\n+\n+      t = TREE_OPERAND (expr, 1);\n+      if (TREE_CODE (t) == INTEGER_CST && tree_int_cst_sgn (t) < 0)\n+\t{\n+\t  code = MINUS_EXPR;\n+\t  t = fold (build1 (NEGATE_EXPR, TREE_TYPE (t), t));\n+\t}\n+      t = convert (sizetype, t);\n+      off = size_binop (MULT_EXPR, TYPE_SIZE_UNIT (TREE_TYPE (expr)), t);\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+\n+  return size_binop (code, base, off);\n+}\n+\n+tree\n+fold_offsetof (tree expr)\n+{\n+  /* Convert back from the internal sizetype to size_t.  */\n+  return convert (size_type_node, fold_offsetof_1 (expr));\n+}\n+\n #include \"gt-c-common.h\""}, {"sha": "e9a91d50fdd7ec57134a2c7e8e6f358f550ea885", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab", "patch": "@@ -870,6 +870,8 @@ extern void c_warn_unused_result (tree *);\n \n extern void verify_sequence_points (tree);\n \n+extern tree fold_offsetof (tree);\n+\n /* In c-gimplify.c  */\n extern void c_genericize (tree);\n extern int c_gimplify_expr (tree *, tree *, tree *);"}, {"sha": "c28b1565c84222116653b2e72117fe2fcee4cd20", "filename": "gcc/c-parse.in", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab", "patch": "@@ -275,6 +275,9 @@ static GTY(()) tree all_prefix_attributes;\n    all_prefix_attributes.  */\n static GTY(()) tree declspec_stack;\n \n+/* INDIRECT_REF with a TREE_TYPE of the type being queried for offsetof.  */\n+static tree offsetof_base;\n+\n /* PUSH_DECLSPEC_STACK is called from setspecs; POP_DECLSPEC_STACK\n    should be called from the productions making use of setspecs.  */\n #define PUSH_DECLSPEC_STACK\t\t\t\t\t\t \\\n@@ -681,8 +684,15 @@ primary:\n \t\t{ $$.value = build_va_arg ($3.value, groktypename ($5));\n \t\t  $$.original_code = ERROR_MARK; }\n \n-\t| OFFSETOF '(' typename ',' offsetof_member_designator ')'\n-\t\t{ $$.value = build_offsetof (groktypename ($3), $5);\n+\t| OFFSETOF '(' typename ','\n+\t\t{ tree type = groktypename ($3);\n+\t\t  if (type == error_mark_node)\n+\t\t    offsetof_base = error_mark_node;\n+\t\t  else\n+\t\t    offsetof_base = build1 (INDIRECT_REF, type, NULL);\n+\t\t}\n+\t  offsetof_member_designator ')'\n+\t\t{ $$.value = fold_offsetof ($6);\n \t\t  $$.original_code = ERROR_MARK; }\n \t| OFFSETOF '(' error ')'\n \t\t{ $$.value = error_mark_node; $$.original_code = ERROR_MARK; }\n@@ -753,17 +763,15 @@ primary:\n \n /* This is the second argument to __builtin_offsetof.  We must have one\n    identifier, and beyond that we want to accept sub structure and sub\n-   array references.  We return tree list where each element has\n-   PURPOSE set for component refs or VALUE set for array refs.  We'll\n-   turn this into something real inside build_offsetof.  */\n+   array references.  */\n \n offsetof_member_designator:\n \t  identifier\n-\t\t{ $$ = tree_cons ($1, NULL_TREE, NULL_TREE); }\n+\t\t{ $$ = build_component_ref (offsetof_base, $1); }\n \t| offsetof_member_designator '.' identifier\n-\t\t{ $$ = tree_cons ($3, NULL_TREE, $1); }\n+\t\t{ $$ = build_component_ref ($1, $3); }\n \t| offsetof_member_designator '[' expr ']'\n-\t\t{ $$ = tree_cons (NULL_TREE, $3.value, $1); }\n+\t\t{ $$ = build_array_ref ($1, $3.value); }\n \t;\n \n old_style_parm_decls:"}, {"sha": "f9f06eb517c1469fba59f6cb460e34db687b76c9", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab", "patch": "@@ -277,7 +277,6 @@ extern tree c_finish_return (tree);\n extern tree c_finish_bc_stmt (tree *, bool);\n extern tree c_finish_goto_label (tree);\n extern tree c_finish_goto_ptr (tree);\n-extern tree build_offsetof (tree, tree);\n \n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */"}, {"sha": "aa04ac0d24a76b23f2f3125c7b3cbb853d151743", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ee8a6a3ee5d35c2e188225c2bbb58c2cca69a2ab", "patch": "@@ -7583,31 +7583,3 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     return result;\n   }\n }\n-\n-/* Build the result of __builtin_offsetof.  TYPE is the first argument to\n-   offsetof, i.e. a type.  LIST is a tree_list that encodes component and\n-   array references; PURPOSE is set for the former and VALUE is set for\n-   the later.  */\n-\n-tree\n-build_offsetof (tree type, tree list)\n-{\n-  tree t;\n-\n-  /* Build \"*(type *)0\".  */\n-  t = convert (build_pointer_type (type), null_pointer_node);\n-  t = build_indirect_ref (t, \"\");\n-\n-  /* Build COMPONENT and ARRAY_REF expressions as needed.  */\n-  for (list = nreverse (list); list ; list = TREE_CHAIN (list))\n-    if (TREE_PURPOSE (list))\n-      t = build_component_ref (t, TREE_PURPOSE (list));\n-    else\n-      t = build_array_ref (t, TREE_VALUE (list));\n-\n-  /* Finalize the offsetof expression.  For now all we need to do is take\n-     the address of the expression we created, and cast that to an integer\n-     type; this mirrors the traditional macro implementation of offsetof.  */\n-  t = build_unary_op (ADDR_EXPR, t, 0);\n-  return convert (size_type_node, t);\n-}"}]}