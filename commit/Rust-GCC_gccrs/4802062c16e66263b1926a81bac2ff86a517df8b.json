{"sha": "4802062c16e66263b1926a81bac2ff86a517df8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgwMjA2MmMxNmU2NjI2M2IxOTI2YTgxYmFjMmZmODZhNTE3ZGY4Yg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-08-31T19:51:17Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-08-31T19:51:17Z"}, "message": "re PR target/21255 (%R and %S are not safe to use from asms)\n\n2005-08-31  J\"orn Rennecke <joern.rennecke@st.com>\n\ngcc:\n\tPR target/21255\n\t* sh.c (print_operand, %R and %S): Add handling of floating point\n\tregisters, memory, constants and invalid operands.\ngcc/testsuite:\n\tPR target/21255\n\t* gcc.dg/pr21255-1.c: New test.\n\t* gcc.dg/pr21255-2-mb.c: Likewise.\n\t* gcc.dg/pr21255-2-ml.c: Likewise.\n\t* gcc.dg/pr21255-3.c: Likewise.\n\t* gcc.dg/pr21255-4.c: Likewise.\n\nFrom-SVN: r103700", "tree": {"sha": "23a10c4a00c941e09d8222480d6289afc911bfc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23a10c4a00c941e09d8222480d6289afc911bfc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4802062c16e66263b1926a81bac2ff86a517df8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4802062c16e66263b1926a81bac2ff86a517df8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4802062c16e66263b1926a81bac2ff86a517df8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4802062c16e66263b1926a81bac2ff86a517df8b/comments", "author": null, "committer": null, "parents": [{"sha": "d4feded787888bf8626ca114b9e8d3ed3a06a279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4feded787888bf8626ca114b9e8d3ed3a06a279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4feded787888bf8626ca114b9e8d3ed3a06a279"}], "stats": {"total": 153, "additions": 151, "deletions": 2}, "files": [{"sha": "5debe6887f1ea822b173dfbf92cfcf510d6f27eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4802062c16e66263b1926a81bac2ff86a517df8b", "patch": "@@ -1,3 +1,9 @@\n+2005-08-31  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR target/21255\n+\t* sh.c (print_operand, %R and %S): Add handling of floating point\n+\tregisters, memory, constants and invalid operands.\n+\n 2005-08-31  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* ipa-pure-const.c: Change dump name."}, {"sha": "6f1442e59b90c473d46fdc95e6e4a6c0eb53fca3", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4802062c16e66263b1926a81bac2ff86a517df8b", "patch": "@@ -734,11 +734,66 @@ print_operand (FILE *stream, rtx x, int code)\n       x = mark_constant_pool_use (x);\n       output_addr_const (stream, x);\n       break;\n+    /* N.B.: %R / %S / %T adjust memory addresses by four.\n+       For SHMEDIA, that means they can be used to access the first and\n+       second 32 bit part of a 64 bit (or larger) value that\n+       might be held in floating point registers or memory.\n+       While they can be used to access 64 bit parts of a larger value\n+       held in general purpose registers, that won't work with memory -\n+       neither for fp registers, since the frxx names are used.  */\n     case 'R':\n-      fputs (reg_names[REGNO (x) + LSW], (stream));\n+      if (REG_P (x) || GET_CODE (x) == SUBREG)\n+\t{\n+\t  regno = true_regnum (x);\n+\t  regno += FP_REGISTER_P (regno) ? 1 : LSW;\n+\t  fputs (reg_names[regno], (stream));\n+\t}\n+      else if (MEM_P (x))\n+\t{\n+\t  x = adjust_address (x, SImode, 4 * LSW);\n+\t  print_operand_address (stream, XEXP (x, 0));\n+\t}\n+      else\n+\t{\n+\t  rtx sub = NULL_RTX;\n+\n+\t  mode = GET_MODE (x);\n+\t  if (mode == VOIDmode)\n+\t    mode = DImode;\n+\t  if (GET_MODE_SIZE (mode) >= 8)\n+\t    sub = simplify_subreg (SImode, x, mode, 4 * LSW);\n+\t  if (sub)\n+\t    print_operand (stream, sub, 0);\n+\t  else\n+\t    output_operand_lossage (\"invalid operand to %%R\");\n+\t}\n       break;\n     case 'S':\n-      fputs (reg_names[REGNO (x) + MSW], (stream));\n+      if (REG_P (x) || GET_CODE (x) == SUBREG)\n+\t{\n+\t  regno = true_regnum (x);\n+\t  regno += FP_REGISTER_P (regno) ? 0 : MSW;\n+\t  fputs (reg_names[regno], (stream));\n+\t}\n+      else if (MEM_P (x))\n+\t{\n+\t  x = adjust_address (x, SImode, 4 * MSW);\n+\t  print_operand_address (stream, XEXP (x, 0));\n+\t}\n+      else\n+\t{\n+\t  rtx sub = NULL_RTX;\n+\n+\t  mode = GET_MODE (x);\n+\t  if (mode == VOIDmode)\n+\t    mode = DImode;\n+\t  if (GET_MODE_SIZE (mode) >= 8)\n+\t    sub = simplify_subreg (SImode, x, mode, 4 * MSW);\n+\t  if (sub)\n+\t    print_operand (stream, sub, 0);\n+\t  else\n+\t    output_operand_lossage (\"invalid operand to %%S\");\n+\t}\n       break;\n     case 'T':\n       /* Next word of a double.  */"}, {"sha": "35176b6d09eba14f80ce273a1e77583b343c9a0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4802062c16e66263b1926a81bac2ff86a517df8b", "patch": "@@ -1,3 +1,12 @@\n+2005-08-31  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR target/21255\n+\t* gcc.dg/pr21255-1.c: New test.\n+\t* gcc.dg/pr21255-2-mb.c: Likewise.\n+\t* gcc.dg/pr21255-2-ml.c: Likewise.\n+\t* gcc.dg/pr21255-3.c: Likewise.\n+\t* gcc.dg/pr21255-4.c: Likewise.\n+\n 2005-08-31  Dale Johannesen  <dalej@apple.com>\n \n \t* gcc.dg/20050830-1.c:  New."}, {"sha": "0508e809b6b163e9a218315eff955760a636df37", "filename": "gcc/testsuite/gcc.dg/pr21255-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-1.c?ref=4802062c16e66263b1926a81bac2ff86a517df8b", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+/* { dg-final { scan-assembler \"mov fr4,fr.; mov fr5,fr.\" } } */\n+double\n+f (double d)\n+{\n+  double r;\n+\n+#if defined (__SH_FPU_DOUBLE__) && !TARGET_SHMEDIA\n+  asm (\"mov %S1,%S0; mov %R1,%R0\" : \"=f\" (r) : \"f\" (d));\n+#else\n+  asm (\"mov fr4,fr4; mov fr5,fr5\");\n+#endif\n+  return r;\n+}"}, {"sha": "ac2ce687e1e37d6a3312e0418c94804d73283865", "filename": "gcc/testsuite/gcc.dg/pr21255-2-mb.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-2-mb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-2-mb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-2-mb.c?ref=4802062c16e66263b1926a81bac2ff86a517df8b", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-mb -O2 -fomit-frame-pointer\" } */\n+/* { dg-final { scan-assembler \"mov @r.,r.; mov @\\\\(4,r.\\\\),r.\" } } */\n+double d;\n+\n+double\n+f (void)\n+{\n+  double r;\n+\n+/* If -ml from the target options is passed after -mb from dg-options, we\n+   end up with th reverse endianness.  */\n+#if TARGET_SHMEDIA || defined (__LITTLE_ENDIAN__)\n+  asm (\"mov @r1,r3; mov @(4,r1),r4\");\n+#else\n+  asm (\"mov %S1,%S0; mov %R1,%R0\" : \"=&r\" (r) : \"m\" (d));\n+#endif\n+  return r;\n+}"}, {"sha": "c63a573ea9d95142d5245958341ef1b035ea275c", "filename": "gcc/testsuite/gcc.dg/pr21255-2-ml.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-2-ml.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-2-ml.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-2-ml.c?ref=4802062c16e66263b1926a81bac2ff86a517df8b", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-ml -O2 -fomit-frame-pointer\" } */\n+/* { dg-final { scan-assembler \"mov @\\\\(4,r.\\\\),r.; mov @r.,r.\" } } */\n+double d;\n+\n+double\n+f (void)\n+{\n+  double r;\n+\n+/* If -mb from the target options is passed after -ml from dg-options, we\n+   end up with th reverse endianness.  */\n+#if TARGET_SHMEDIA || defined (__BIG_ENDIAN__)\n+  asm (\"mov @(4,r1),r4; mov @r1,r3\");\n+#else\n+  asm (\"mov %S1,%S0; mov %R1,%R0\" : \"=&r\" (r) : \"m\" (d));\n+#endif\n+  return r;\n+}"}, {"sha": "7edd8cb7c1ce21f0055c13c928e3cfb4709046c3", "filename": "gcc/testsuite/gcc.dg/pr21255-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-3.c?ref=4802062c16e66263b1926a81bac2ff86a517df8b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+/* { dg-final { scan-assembler \"mov #?0,r.*; mov #?20,r\" } } */\n+/* { dg-final { scan-assembler \"mov #?1077149696,r.*; mov #?0,r\" } } */\n+double\n+f ()\n+{\n+  double r;\n+\n+  asm (\"mov %S1,%S0; mov %R1,%R0\" : \"=r\" (r) : \"i\" (20));\n+  asm (\"mov %S1,%S0; mov %R1,%R0\" : \"+r\" (r) : \"i\" (20.));\n+  return r;\n+}"}, {"sha": "72a632c9dc5b8d5f58ed933d80059d0ea3565acc", "filename": "gcc/testsuite/gcc.dg/pr21255-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4802062c16e66263b1926a81bac2ff86a517df8b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21255-4.c?ref=4802062c16e66263b1926a81bac2ff86a517df8b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+double\n+f ()\n+{\n+  double r;\n+\n+  asm (\"mov %S1,%S0; mov %R1,%R0\" : \"=r\" (r) : \"i\" (f));\n+/* { dg-error \"invalid operand to %S\" \"\" {target \"sh*-*-*\" }  9 } */\n+/* { dg-error \"invalid operand to %R\" \"\" {target \"sh*-*-*\" }  9 } */\n+  return r;\n+}"}]}