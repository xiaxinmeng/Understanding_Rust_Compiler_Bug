{"sha": "2c11433f202147fd3bfd88f2b1b22e9e91c06d91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMxMTQzM2YyMDIxNDdmZDNiZmQ4OGYyYjFiMjJlOWU5MWMwNmQ5MQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-09-27T09:27:28Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-09-27T09:27:28Z"}, "message": "2004-09-27  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/BufferedInputStream.java\n\t(BufferedInputStream): Added Jeroen Frijters to authors.\n\t(count): Don't explicitely initialize with default value.\n\t(pos): Likewise.\n\t(marklimit): Likewise.\n\t(read): Changed boolean expression to match GNU classpath' version.\n\t(reset): Add proper message to exception.\n\t(skip): Check for closed stream.\n\t(refill): Likewise.\n\nFrom-SVN: r88167", "tree": {"sha": "f26f4216e9089da5b212324c0917296cf311e61a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f26f4216e9089da5b212324c0917296cf311e61a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c11433f202147fd3bfd88f2b1b22e9e91c06d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c11433f202147fd3bfd88f2b1b22e9e91c06d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c11433f202147fd3bfd88f2b1b22e9e91c06d91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c11433f202147fd3bfd88f2b1b22e9e91c06d91/comments", "author": null, "committer": null, "parents": [{"sha": "94c1e7acf0cac4a7eee5216659375c4398054e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c1e7acf0cac4a7eee5216659375c4398054e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c1e7acf0cac4a7eee5216659375c4398054e78"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "41ba9314b5f9479218b3e258b971f942d1899245", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c11433f202147fd3bfd88f2b1b22e9e91c06d91/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c11433f202147fd3bfd88f2b1b22e9e91c06d91/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2c11433f202147fd3bfd88f2b1b22e9e91c06d91", "patch": "@@ -1,3 +1,15 @@\n+2004-09-27  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/BufferedInputStream.java\n+\t(BufferedInputStream): Added Jeroen Frijters to authors.\n+\t(count): Don't explicitely initialize with default value.\n+\t(pos): Likewise.\n+\t(marklimit): Likewise.\n+\t(read): Changed boolean expression to match GNU classpath' version.\n+\t(reset): Add proper message to exception.\n+\t(skip): Check for closed stream.\n+\t(refill): Likewise.\n+\n 2004-09-26  Per Bothner  <per@bothner.com>\n \n \t* prims.cc (unblock_signal): Annotate signum with __unused__ to"}, {"sha": "3faaa6591d4d0c01643573cde6cba39635ef9b6d", "filename": "libjava/java/io/BufferedInputStream.java", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c11433f202147fd3bfd88f2b1b22e9e91c06d91/libjava%2Fjava%2Fio%2FBufferedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c11433f202147fd3bfd88f2b1b22e9e91c06d91/libjava%2Fjava%2Fio%2FBufferedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedInputStream.java?ref=2c11433f202147fd3bfd88f2b1b22e9e91c06d91", "patch": "@@ -61,6 +61,7 @@\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n  * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Jeroen Frijters <jeroen@frijters.net>\n  */\n public class BufferedInputStream extends FilterInputStream\n {\n@@ -79,13 +80,13 @@ public class BufferedInputStream extends FilterInputStream\n    * The number of valid bytes currently in the buffer.  It is also the index\n    * of the buffer position one byte past the end of the valid data.\n    */\n-  protected int count = 0;\n+  protected int count;\n \n   /**\n    * The index of the next character that will by read from the buffer.\n    * When <code>pos == count</code>, the buffer is empty.\n    */\n-  protected int pos = 0;\n+  protected int pos;\n \n   /**\n    * The value of <code>pos</code> when the <code>mark()</code> method was\n@@ -100,7 +101,7 @@ public class BufferedInputStream extends FilterInputStream\n    * After this may bytes are read, the <code>reset()</code> method\n    * may not be called successfully.\n    */\n-  protected int marklimit = 0;\n+  protected int marklimit;\n \n   /**\n    * This is the maximum size we have to allocate for the mark buffer.\n@@ -260,7 +261,7 @@ public synchronized int read() throws IOException\n    */\n   public synchronized int read(byte[] b, int off, int len) throws IOException\n   {\n-    if (off < 0 || len < 0 || off + len > b.length)\n+    if (off < 0 || len < 0 || b.length - off < len)\n       throw new IndexOutOfBoundsException();\n \n     if (pos >= count && !refill())\n@@ -286,13 +287,13 @@ public synchronized int read(byte[] b, int off, int len) throws IOException\n    * passed when establishing the mark.\n    *\n    * @exception IOException If <code>mark()</code> was never called or more\n-   *            then <code>markLimit</code> bytes were read since the last\n+   *            then <code>marklimit</code> bytes were read since the last\n    *            call to <code>mark()</code>\n    */\n   public synchronized void reset() throws IOException\n   {\n-    if (markpos < 0)\n-      throw new IOException();\n+    if (markpos == -1)\n+      throw new IOException(buf == null ? \"Stream closed.\" : \"Invalid mark.\");\n \n     pos = markpos;\n   }\n@@ -310,6 +311,9 @@ public synchronized void reset() throws IOException\n    */\n   public synchronized long skip(long n) throws IOException\n   {\n+    if (buf == null)\n+\tthrow new IOException(\"Stream closed.\");\n+\n     final long origN = n;\n \n     while (n > 0L)\n@@ -332,14 +336,16 @@ public synchronized long skip(long n) throws IOException\n   }\n \n   /**\n-   * Called to refill the buffer (when count is equal or greater the pos).\n-   * Package local so BufferedReader can call it when needed.\n+   * Called to refill the buffer (when count is equal to pos).\n    *\n-   * @return <code>true</code> when <code>buf</code> can be (partly) refilled,\n-   *         <code>false</code> otherwise.\n+   * @return <code>true</code> when at least one additional byte was read\n+   *         into <code>buf</code>, <code>false</code> otherwise (at EOF).\n    */\n   boolean refill() throws IOException\n   {\n+    if (buf == null)\n+\tthrow new IOException(\"Stream closed.\");\n+\n     if (markpos < 0)\n       count = pos = 0;\n     else if (markpos > 0)"}]}