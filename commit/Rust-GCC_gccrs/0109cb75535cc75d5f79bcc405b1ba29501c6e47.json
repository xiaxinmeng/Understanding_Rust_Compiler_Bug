{"sha": "0109cb75535cc75d5f79bcc405b1ba29501c6e47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEwOWNiNzU1MzVjYzc1ZDVmNzliY2M0MDViMWJhMjk1MDFjNmU0Nw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@merlin.codesourcery.com", "date": "2001-01-20T05:09:08Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-01-20T05:09:08Z"}, "message": "tests.exp: New file.\n\n2001-01-20  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n\n\t* testsuite/libstdc++.tests/tests.exp: New file.\n\t* testsuite/lib/libstdc++.exp: Itou.\n\t* testsuite/README: Itou.\n\nFrom-SVN: r39149", "tree": {"sha": "180ffd8dec8c2952f898c632cccf70008c1fe0cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/180ffd8dec8c2952f898c632cccf70008c1fe0cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0109cb75535cc75d5f79bcc405b1ba29501c6e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0109cb75535cc75d5f79bcc405b1ba29501c6e47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0109cb75535cc75d5f79bcc405b1ba29501c6e47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0109cb75535cc75d5f79bcc405b1ba29501c6e47/comments", "author": null, "committer": null, "parents": [{"sha": "1af7d6cff4374da752db2af564c1bb77a7292fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af7d6cff4374da752db2af564c1bb77a7292fd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af7d6cff4374da752db2af564c1bb77a7292fd8"}], "stats": {"total": 282, "additions": 282, "deletions": 0}, "files": [{"sha": "ab8ace7c75dae4fb8221712dcf195c00ea159fce", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0109cb75535cc75d5f79bcc405b1ba29501c6e47/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0109cb75535cc75d5f79bcc405b1ba29501c6e47/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0109cb75535cc75d5f79bcc405b1ba29501c6e47", "patch": "@@ -1,3 +1,9 @@\n+2001-01-20  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+\n+\t* testsuite/libstdc++.tests/tests.exp: New file.\n+\t* testsuite/lib/libstdc++.exp: Itou.\n+\t* testsuite/README: Itou.\n+\n 2001-01-20  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* tests_flags.in: Just output the bare minimum to run tests."}, {"sha": "cda28de38df3edfeeaee01e02d8b80d48790bf8f", "filename": "libstdc++-v3/testsuite/README", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0109cb75535cc75d5f79bcc405b1ba29501c6e47/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0109cb75535cc75d5f79bcc405b1ba29501c6e47/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FREADME?ref=0109cb75535cc75d5f79bcc405b1ba29501c6e47", "patch": "@@ -0,0 +1,9 @@\n+We're in the process of converting the existing testsuite machinery to\n+use the new style DejaGnu framework.  Eventually, we'll abandon\n+../mkcheck.in in favor of this new testsuite framework.  \n+\n+  Basically, a testcase contains dg-keywords (see dg.exp) indicating\n+what to do and what kind of behaviour are to be expected.  New\n+testsuite should be written with the new style DejaGnu framework in mind.\n+\n+-- Gaby"}, {"sha": "59ab9245b488d9841462b3df289b7301598f41a1", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0109cb75535cc75d5f79bcc405b1ba29501c6e47/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0109cb75535cc75d5f79bcc405b1ba29501c6e47/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=0109cb75535cc75d5f79bcc405b1ba29501c6e47", "patch": "@@ -0,0 +1,240 @@\n+# Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# libstdc++@gcc.gnu.org\n+#\n+# This file is contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n+\n+## This file contains support routines for dg.exp-based testsuite\n+## framework.\n+\n+## The global associative array lib_env contains the totality\n+## of options necessary to run testcases; the meanings of which are\n+## as follows:\n+##    lib_env(CXX):  The compiler used to run testcases\n+##    lib_env(CXXFLAGS): Special flags passed to the compiler\n+##    lib_env(INCLUDES):\n+##    lib_env(LDFLAGS): Additional library flags \n+##    lib_env(LIBTOOL):\n+##    lib_env(SRC_DIR):\n+##    lib_env(BUILD_DIR):\n+\n+load_lib dg.exp\n+\n+## Initialization routine.\n+proc libstdc++-dg-init { args } {\n+    global lib_env\n+    global srcdir\n+    global outdir\n+    global dg-do-what-default\n+\n+    # By default, we assume we want to run program images.\n+    set dg-do-what-default run\n+\n+    # Get out the source and the build directories.\n+    set src-dir [lookfor_file $srcdir libstdc++-v3]\n+    set build-dir [lookfor_file $outdir libstdc++-v3]\n+\n+    # Set proper environment variables for the framework.\n+    libstdc++-setup-flags ${src-dir} ${build-dir}\n+    \n+    # FIXME: Is this necessary?  Isn't the framework supposed to\n+    #        do this for us?\n+    file delete -force $outdir/*.exe\n+    file delete -force $outdir/*core*\n+    \n+    # mkcheck.in used to output these information.  Maybe we should\n+    # abandon that practice and define proper libstdc++_version and such.\n+    set output [remote_exec host $lib_env(CXX) -v]\n+    if { [lindex $output 0] == 0 } {\n+\tset output [lindex $output 1]\n+\tregexp \"gcc version.*$\" $output version\n+\tregsub \"\\n+\" $version \"\" version\n+\tclone_output \"Compiler: $version\"\n+\tclone_output \"Compiler flags: $lib_env(CXXFLAGS)\"\n+    } else {\n+\tperror \"Cannot determine compiler version: [lindex $output 1]\"\n+    }\n+}\n+\n+## dg.exp callback.  Called from dg-test to run PROGRAM images.\n+## Normally, we would have left this job to ${tool}_load \n+## (from standard.exp) but because we use surrogate to run programs,\n+##  we have to do this ourseleves.\n+proc libstdc++_load { prog } {\n+    global lib_env\n+    return [remote_load target $lib_env(LIBTOOL) \"--mode=execute $prog\"]\n+}\n+\n+## Nothing particular to do.\n+proc libstdc++_exit { } {\n+}\n+\n+## Output the version of the libs tested.\n+proc libstdc++_version { } {\n+    global lib_env\n+    set version \"undeterminated\" \n+\n+    # This file contains the library configuration, built at configure time.\n+    set config-file $lib_env(BUILD_DIR)/include/bits/c++config.h\n+    \n+    set version_pattern \"__GLIBCPP__\\[ \\t\\]\\+\\[0-9\\]\\+\"\n+    if [file exists ${config-file}] {\n+\tset version [grep ${config-file} $version_pattern]\n+\tregexp \"\\[0-9\\]\\+\" $version version\n+    }\n+    clone_output \"$lib_env(SRC_DIR) version $version\"\n+    return 0\n+}\n+\n+## Main loop.  Loop over TEST-DIRECTORIES and run each testcase\n+## found therein.\n+proc libstdc++_runtest { testdirs } {\n+    global runtests\n+    global srcdir\n+    global outdir\n+\n+    foreach d $testdirs {\n+\tset testfiles [glob -nocomplain $d/*.C $d/*.cc]\n+\tif { [llength $testfiles] == 0 } {\n+\t    continue\n+\t}\n+\t\n+\t# Make the appropriate test-dirs with accompaning .libs/\n+\t# to keep libtool happy.\n+\tset td \"$outdir/[dg-trim-dirname $srcdir $d]\"\n+\tmaybe-make-directory $td\n+\tmaybe-make-directory $td/.lib\n+\n+\tforeach testfile $testfiles {\n+\t    # We're not supposed to test this file, just skip it.\n+\t    if ![runtest_file_p $runtests $testfile] {\n+\t\tcontinue\n+\t    }\n+\t    \n+\t    verbose \"Testing [dg-trim-dirname $srcdir $testfile]\"\n+\t    libstdc++_do_test $testfile static\n+\t    libstdc++_do_test $testfile shared\n+\t}\n+    }\n+}\n+\n+## dg.exp callback.  Main test-running routine.  Called from\n+## dg-test.\n+##\n+## TESTCASE is the file-name of the program to test;\n+## COMPILE_TYPE is the kind of compilation to apply to TESTCASE; \n+##              current compilation kinds are: preprocessing(preprocess),\n+##              compiling-only-no-assembling-nor-linking(compile),\n+##              compiling-and-assmbling-no-linking(assemble),\n+##              linking-no-running(link), running(run).\n+proc libstdc++-dg-test { testfile compile_type additional-options } {\n+    global srcdir; global outdir\n+    global lib_env\n+    global which_library\n+    \n+    # Prepare for compilation output\n+    set comp_output \"\"\n+\n+    # By default, we want to use libtool to run tests.\n+    set lt $lib_env(LIBTOOL)\n+    set lt_args \"--tag=CXX\"\n+    \n+    set output_file $outdir/[dg-trim-dirname $srcdir [file rootname $testfile]]\n+    switch $compile_type {\n+\t\"preprocess\" {\n+\t    set lt $lib_env(CXX)\n+\t    set lt_args \"-E $lib_env(INCLUDES) $testfile -o $output_file.ii\"\n+\t}\n+\t\"compile\" {\n+\t    set lt $lib_env(CXX)\n+\t    set lt_args \"-S $lib_env(INCLUDES) $testfile -o $output_file.s\"\n+\t}\n+\t\"assemble\" {\n+\t    append lt_args \" --mode=compile $lib_env(FLAGS) $testfile\"\n+\t}\n+\t\"run\" -\n+\t\"link\" {\n+\t    # If we're asked to run a testcase, then just do a `link'.\n+\t    # The framework will load the program image latter through\n+\t    # libstdc++_load callback.\n+\t    if { $which_library == \"static\" } {\n+\t\tappend output_file \".st-exe\"\n+\t    } else {\n+\t\tappend output_file \".sh-exe\"\n+\t    }\n+\t    append lt_args \" --mode=link $lib_env(FLAGS) \\\n+\t\t    $lib_env($which_library) $testfile \\\n+\t\t    -o $output_file $lib_env(LDFLAGS)\"\n+\t}\n+\tdefault {\n+\t    perror \"$compile_type: option not recognized\"\n+\t}\n+    }\n+\n+    set results [remote_exec host $lt \"$lt_args ${additional-options}\"]\n+    if { [lindex $results 0] != 0 } {\n+\tset comp_output [lindex $results 1];\n+    }\n+    return [list $comp_output $output_file]\n+}\n+\n+## Get options necessary to properly run testcases. \n+## SRC-DIR is the library top source directory e.g. something like\n+##         /codesourcery/egcs/libstdc++\n+## BUILD-DIR is top build directory e.g. something like\n+##           /tmp/egcs/i686-pc-linux-gnu/libstdc++\n+proc libstdc++-setup-flags {src-dir build-dir} {\n+    global lib_env\n+    \n+    set tmp [remote_exec host ${build-dir}/tests_flags \"--built-library ${build-dir} ${src-dir}\"]\n+    set status [lindex $tmp 0]\n+    set output [lindex $tmp 1]\n+    if { $status == 0 } {\n+\tset flags [split $output :]\n+\tset lib_env(BUILD_DIR) [lindex $flags 0]\n+\tset lib_env(SRC_DIR) [lindex $flags 1]\n+\tset lib_env(CXX) [lindex $flags 3]\n+\tset lib_env(CXXFLAGS) [lindex $flags 4]\n+\tset lib_env(INCLUDES) [lindex $flags 5]\n+\tset lib_env(LDFLAGS) [lindex $flags 6]\n+\t\n+\t# This is really really fragile.  We should find away to\n+\t# tell which flags to use for static/libraries.\n+\tset lib_env(static) \"-static\"\n+\tset lib_env(shared) \"\"\n+\n+\tset lib_env(LIBTOOL) \"$lib_env(BUILD_DIR)/libtool\"\n+\tset lib_env(FLAGS) \"$lib_env(CXX) -B$lib_env(BUILD_DIR)/ \\\n+\t\t$lib_env(INCLUDES) $lib_env(CXXFLAGS)\"\n+    } else {\n+\twarning \"$output\"\n+\texit $status\n+    }\n+}\n+\n+proc maybe-make-directory {dir} {\n+    if {![file isdirectory $dir]} {\n+\tverbose \"Making directory $dir\" 2\n+\tfile mkdir $dir\n+    }\n+}\n+\n+proc libstdc++_do_test { testfile lib } {\n+    global which_library; set which_library $lib\n+    dg-test $testfile \"\" \"\"\n+}"}, {"sha": "d811803ad4cc3f2eb32fd581c35d55d6b66734d6", "filename": "libstdc++-v3/testsuite/libstdc++.tests/tests.exp", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0109cb75535cc75d5f79bcc405b1ba29501c6e47/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0109cb75535cc75d5f79bcc405b1ba29501c6e47/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp?ref=0109cb75535cc75d5f79bcc405b1ba29501c6e47", "patch": "@@ -0,0 +1,27 @@\n+# Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# libstdc++@gcc.gnu.org\n+#\n+# This file is contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n+\n+load_lib libstdc++.exp\n+\n+libstdc++-dg-init\n+libstdc++_runtest [glob -nocomplain $srcdir/*]\n+dg-finish\n+"}]}