{"sha": "3ea63f60c0ba5650378fb1f5301cbe1245060a71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VhNjNmNjBjMGJhNTY1MDM3OGZiMWY1MzAxY2JlMTI0NTA2MGE3MQ==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-06-04T15:35:24Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-06-04T15:35:24Z"}, "message": "AArch64 - Improve MOVI handling (2/5)\n\nFrom-SVN: r199653", "tree": {"sha": "abc53a68e913c6ac624b9563238ed2b3659165ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abc53a68e913c6ac624b9563238ed2b3659165ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ea63f60c0ba5650378fb1f5301cbe1245060a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea63f60c0ba5650378fb1f5301cbe1245060a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ea63f60c0ba5650378fb1f5301cbe1245060a71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea63f60c0ba5650378fb1f5301cbe1245060a71/comments", "author": null, "committer": null, "parents": [{"sha": "d8edd89988bcbe163b36257caae575b82eedad86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8edd89988bcbe163b36257caae575b82eedad86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8edd89988bcbe163b36257caae575b82eedad86"}], "stats": {"total": 84, "additions": 30, "deletions": 54}, "files": [{"sha": "84db56c5ddb5902784969e339b07ff549c546305", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ea63f60c0ba5650378fb1f5301cbe1245060a71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ea63f60c0ba5650378fb1f5301cbe1245060a71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ea63f60c0ba5650378fb1f5301cbe1245060a71", "patch": "@@ -1,3 +1,15 @@\n+2013-06-04  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_simd_valid_immediate): No\n+\tlonger static.\n+\t(aarch64_simd_immediate_valid_for_move): Remove.\n+\t(aarch64_simd_scalar_immediate_valid_for_move): Update call.\n+\t(aarch64_simd_make_constant): Update call.\n+\t(aarch64_output_simd_mov_immediate): Update call.\n+\t* config/aarch64/aarch64-protos.h (aarch64_simd_valid_immediate):\n+\tAdd prototype.\n+\t* config/aarch64/constraints.md (Dn): Update call.\n+\n 2013-06-04  Ian Bolton  <ian.bolton@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_simd_valid_immediate): Change"}, {"sha": "54f05581857524310527ee9753c4cbc9b9af937e", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ea63f60c0ba5650378fb1f5301cbe1245060a71/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ea63f60c0ba5650378fb1f5301cbe1245060a71/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=3ea63f60c0ba5650378fb1f5301cbe1245060a71", "patch": "@@ -157,6 +157,8 @@ bool aarch64_simd_imm_scalar_p (rtx x, enum machine_mode mode);\n bool aarch64_simd_imm_zero_p (rtx, enum machine_mode);\n bool aarch64_simd_scalar_immediate_valid_for_move (rtx, enum machine_mode);\n bool aarch64_simd_shift_imm_p (rtx, enum machine_mode, bool);\n+bool aarch64_simd_valid_immediate (rtx, enum machine_mode, int, rtx *,\n+\t\t\t\t   int *, unsigned char *, int *, int *);\n bool aarch64_symbolic_address_p (rtx);\n bool aarch64_symbolic_constant_p (rtx, enum aarch64_symbol_context,\n \t\t\t\t  enum aarch64_symbol_type *);"}, {"sha": "94e3bc9464bc1b48617c8604abf4e178ba6f0537", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 13, "deletions": 51, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ea63f60c0ba5650378fb1f5301cbe1245060a71/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ea63f60c0ba5650378fb1f5301cbe1245060a71/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=3ea63f60c0ba5650378fb1f5301cbe1245060a71", "patch": "@@ -103,8 +103,6 @@ static bool aarch64_vfp_is_call_or_return_candidate (enum machine_mode,\n static void aarch64_elf_asm_constructor (rtx, int) ATTRIBUTE_UNUSED;\n static void aarch64_elf_asm_destructor (rtx, int) ATTRIBUTE_UNUSED;\n static void aarch64_override_options_after_change (void);\n-static bool aarch64_simd_valid_immediate (rtx, enum machine_mode, int, rtx *,\n-\t\t\t\t\t int *, unsigned char *, int *, int *);\n static bool aarch64_vector_mode_supported_p (enum machine_mode);\n static unsigned bit_count (unsigned HOST_WIDE_INT);\n static bool aarch64_const_vec_all_same_int_p (rtx,\n@@ -6145,7 +6143,7 @@ aarch64_vect_float_const_representable_p (rtx x)\n }\n \n /* Return true for valid and false for invalid.  */\n-static bool\n+bool\n aarch64_simd_valid_immediate (rtx op, enum machine_mode mode, int inverse,\n \t\t\t      rtx *modconst, int *elementwidth,\n \t\t\t      unsigned char *elementchar,\n@@ -6349,45 +6347,6 @@ aarch64_simd_valid_immediate (rtx op, enum machine_mode mode, int inverse,\n #undef CHECK\n }\n \n-/* Return TRUE if rtx X is legal for use as either a AdvSIMD MOVI instruction\n-   (or, implicitly, MVNI) immediate.  Write back width per element\n-   to *ELEMENTWIDTH, and a modified constant (whatever should be output\n-   for a MOVI instruction) in *MODCONST.  */\n-int\n-aarch64_simd_immediate_valid_for_move (rtx op, enum machine_mode mode,\n-\t\t\t\t       rtx *modconst, int *elementwidth,\n-\t\t\t\t       unsigned char *elementchar,\n-\t\t\t\t       int *mvn, int *shift)\n-{\n-  rtx tmpconst;\n-  int tmpwidth;\n-  unsigned char tmpwidthc;\n-  int tmpmvn = 0, tmpshift = 0;\n-  bool retval = aarch64_simd_valid_immediate (op, mode, 0, &tmpconst,\n-\t\t\t\t\t     &tmpwidth, &tmpwidthc,\n-\t\t\t\t\t     &tmpmvn, &tmpshift);\n-\n-  if (!retval)\n-    return 0;\n-\n-  if (modconst)\n-    *modconst = tmpconst;\n-\n-  if (elementwidth)\n-    *elementwidth = tmpwidth;\n-\n-  if (elementchar)\n-    *elementchar = tmpwidthc;\n-\n-  if (mvn)\n-    *mvn = tmpmvn;\n-\n-  if (shift)\n-    *shift = tmpshift;\n-\n-  return 1;\n-}\n-\n static bool\n aarch64_const_vec_all_same_int_p (rtx x,\n \t\t\t\t  HOST_WIDE_INT minval,\n@@ -6492,9 +6451,8 @@ aarch64_simd_scalar_immediate_valid_for_move (rtx op, enum machine_mode mode)\n   gcc_assert (!VECTOR_MODE_P (mode));\n   vmode = aarch64_preferred_simd_mode (mode);\n   rtx op_v = aarch64_simd_gen_const_vector_dup (vmode, INTVAL (op));\n-  int retval = aarch64_simd_immediate_valid_for_move (op_v, vmode, 0,\n-\t\t\t\t\t\t      NULL, NULL, NULL, NULL);\n-  return retval;\n+  return aarch64_simd_valid_immediate (op_v, vmode, 0, NULL,\n+\t\t\t\t       NULL, NULL, NULL, NULL);\n }\n \n /* Construct and return a PARALLEL RTX vector.  */\n@@ -6722,8 +6680,8 @@ aarch64_simd_make_constant (rtx vals)\n     gcc_unreachable ();\n \n   if (const_vec != NULL_RTX\n-      && aarch64_simd_immediate_valid_for_move (const_vec, mode, NULL, NULL,\n-\t\t\t\t\t\tNULL, NULL, NULL))\n+      && aarch64_simd_valid_immediate (const_vec, mode, 0, NULL,\n+\t\t\t\t       NULL, NULL, NULL, NULL))\n     /* Load using MOVI/MVNI.  */\n     return const_vec;\n   else if ((const_dup = aarch64_simd_dup_constant (vals)) != NULL_RTX)\n@@ -7285,18 +7243,22 @@ aarch64_output_simd_mov_immediate (rtx *const_vector,\n \t\t\t\t   enum machine_mode mode,\n \t\t\t\t   unsigned width)\n {\n-  int is_valid;\n+  bool is_valid;\n   unsigned char widthc;\n   int lane_width_bits;\n   static char templ[40];\n   int shift = 0, mvn = 0;\n   const char *mnemonic;\n   unsigned int lane_count = 0;\n \n+/* This will return true to show const_vector is legal for use as either\n+   a AdvSIMD MOVI instruction (or, implicitly, MVNI) immediate.  It\n+   writes back various values via the int pointers and it modifies the\n+   operand pointed to by CONST_VECTOR in-place, if required.  */\n   is_valid =\n-    aarch64_simd_immediate_valid_for_move (*const_vector, mode,\n-\t\t\t\t\t   const_vector, &lane_width_bits,\n-\t\t\t\t\t   &widthc, &mvn, &shift);\n+    aarch64_simd_valid_immediate (*const_vector, mode, 0,\n+\t\t\t\t  const_vector, &lane_width_bits,\n+\t\t\t\t  &widthc, &mvn, &shift);\n   gcc_assert (is_valid);\n \n   mode = GET_MODE_INNER (mode);"}, {"sha": "d1954255d137ef8fc4122586ef3b88aab2aa771b", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ea63f60c0ba5650378fb1f5301cbe1245060a71/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ea63f60c0ba5650378fb1f5301cbe1245060a71/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=3ea63f60c0ba5650378fb1f5301cbe1245060a71", "patch": "@@ -143,9 +143,9 @@\n   \"@internal\n  A constraint that matches vector of immediates.\"\n  (and (match_code \"const_vector\")\n-      (match_test \"aarch64_simd_immediate_valid_for_move (op, GET_MODE (op),\n-\t\t\t\t\t\t\t  NULL, NULL, NULL,\n-\t\t\t\t\t\t\t  NULL, NULL) != 0\")))\n+      (match_test \"aarch64_simd_valid_immediate (op, GET_MODE (op), 0,\n+\t\t\t\t\t\t NULL, NULL, NULL,\n+\t\t\t\t\t\t NULL, NULL)\")))\n \n (define_constraint \"Dh\"\n   \"@internal"}]}