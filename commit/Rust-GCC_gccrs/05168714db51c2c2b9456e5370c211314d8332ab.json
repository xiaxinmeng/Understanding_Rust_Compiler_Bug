{"sha": "05168714db51c2c2b9456e5370c211314d8332ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxNjg3MTRkYjUxYzJjMmI5NDU2ZTUzNzBjMjExMzE0ZDgzMzJhYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-08-04T13:01:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-08-04T13:01:08Z"}, "message": "re PR libstdc++/15523 ([DR 408] Can't have vectors of vector::const_iterator)\n\n2009-08-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/15523\n\t* include/debug/safe_iterator.h (_Safe_iterator<>::\n\t_Safe_iterator(const _Safe_iterator&), _Safe_iterator<>::\n\toperator=(const _Safe_iterator&)): Implement resolution of DR 408,\n\tdo not error out when the source is a value-initialized iterator.\n\t* testsuite/23_containers/vector/15523.cc: New.\n\t* doc/xml/manual/intro.xml: Add an entry for DR 408.\n\nFrom-SVN: r150455", "tree": {"sha": "7809171cc49cbef0c3bf420c0c092104516ee65e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7809171cc49cbef0c3bf420c0c092104516ee65e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05168714db51c2c2b9456e5370c211314d8332ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05168714db51c2c2b9456e5370c211314d8332ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05168714db51c2c2b9456e5370c211314d8332ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05168714db51c2c2b9456e5370c211314d8332ab/comments", "author": null, "committer": null, "parents": [{"sha": "51b128a0c02995a4fb6c615c92e20d2d969c8528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b128a0c02995a4fb6c615c92e20d2d969c8528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51b128a0c02995a4fb6c615c92e20d2d969c8528"}], "stats": {"total": 77, "additions": 69, "deletions": 8}, "files": [{"sha": "dafe95f6ce4bbbac4ff16a719033bd1c2a62d727", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05168714db51c2c2b9456e5370c211314d8332ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05168714db51c2c2b9456e5370c211314d8332ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=05168714db51c2c2b9456e5370c211314d8332ab", "patch": "@@ -1,3 +1,13 @@\n+2009-08-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/15523\n+\t* include/debug/safe_iterator.h (_Safe_iterator<>::\n+\t_Safe_iterator(const _Safe_iterator&), _Safe_iterator<>::\n+\toperator=(const _Safe_iterator&)): Implement resolution of DR 408,\n+\tdo not error out when the source is a value-initialized iterator.\n+\t* testsuite/23_containers/vector/15523.cc: New.\n+\t* doc/xml/manual/intro.xml: Add an entry for DR 408.\n+\n 2009-08-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/istream (operator>>(basic_istream<>&&, _Tp&)): Minor"}, {"sha": "2bf4dea28bffe5dc4ec4d8ab170e881e4617243b", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05168714db51c2c2b9456e5370c211314d8332ab/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05168714db51c2c2b9456e5370c211314d8332ab/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=05168714db51c2c2b9456e5370c211314d8332ab", "patch": "@@ -604,6 +604,14 @@ requirements of the license of GCC.\n     <listitem><para>Replace &quot;new&quot; with &quot;::new&quot;.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#408\">408</ulink>:\n+        <emphasis>\n+        Is vector&lt;reverse_iterator&lt;char*&gt; &gt; forbidden?\n+        </emphasis>\n+    </term>\n+    <listitem><para>Tweak the debug-mode checks in _Safe_iterator.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><ulink url=\"../ext/lwg-defects.html#409\">409</ulink>:\n         <emphasis>Closing an fstream should clear the error state</emphasis>\n     </term>"}, {"sha": "eb0a3e4ae15cf9ae02ff94bc29ee7803b193098b", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05168714db51c2c2b9456e5370c211314d8332ab/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05168714db51c2c2b9456e5370c211314d8332ab/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=05168714db51c2c2b9456e5370c211314d8332ab", "patch": "@@ -115,12 +115,14 @@ namespace __gnu_debug\n \n       /**\n        * @brief Copy construction.\n-       * @pre @p x is not singular\n        */\n       _Safe_iterator(const _Safe_iterator& __x)\n       : _Safe_iterator_base(__x, _M_constant()), _M_current(__x._M_current)\n       {\n-\t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular(),\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n+\t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n+\t\t\t      || __x._M_current == _Iterator(),\n \t\t\t      _M_message(__msg_init_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n@@ -129,8 +131,6 @@ namespace __gnu_debug\n       /**\n        *  @brief Converting constructor from a mutable iterator to a\n        *  constant iterator.\n-       *\n-       *  @pre @p x is not singular\n       */\n       template<typename _MutableIterator>\n         _Safe_iterator(\n@@ -140,20 +140,25 @@ namespace __gnu_debug\n                    _Sequence>::__type>& __x)\n \t: _Safe_iterator_base(__x, _M_constant()), _M_current(__x.base())\n         {\n-\t  _GLIBCXX_DEBUG_VERIFY(!__x._M_singular(),\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // DR 408. Is vector<reverse_iterator<char*> > forbidden?\n+\t  _GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n+\t\t\t\t|| __x.base() == _Iterator(),\n \t\t\t\t_M_message(__msg_init_const_singular)\n \t\t\t\t._M_iterator(*this, \"this\")\n \t\t\t\t._M_iterator(__x, \"other\"));\n \t}\n \n       /**\n        * @brief Copy assignment.\n-       * @pre @p x is not singular\n        */\n       _Safe_iterator&\n       operator=(const _Safe_iterator& __x)\n       {\n-\t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular(),\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n+\t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n+\t\t\t      || __x._M_current == _Iterator(),\n \t\t\t      _M_message(__msg_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n@@ -169,7 +174,6 @@ namespace __gnu_debug\n       reference\n       operator*() const\n       {\n-\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_dereferenceable(),\n \t\t\t      _M_message(__msg_bad_deref)\n \t\t\t      ._M_iterator(*this, \"this\"));"}, {"sha": "3b8230cd56075babb35b1c4f400f8fbf5053c0fe", "filename": "libstdc++-v3/testsuite/23_containers/vector/15523.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05168714db51c2c2b9456e5370c211314d8332ab/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F15523.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05168714db51c2c2b9456e5370c211314d8332ab/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F15523.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F15523.cc?ref=05168714db51c2c2b9456e5370c211314d8332ab", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+\n+#include <vector> \n+\n+// libstdc++/15523\n+void test01() \n+{\n+  using namespace std;\n+\n+  vector<vector<int>::const_iterator> x(2); \n+\n+  vector<int>::iterator i2, i3;\n+  vector<int>::const_iterator ci1(i2);\n+\n+  i2 = i3;\n+} \n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}