{"sha": "b7747781463e8327cf993370055d344fb26abb54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc3NDc3ODE0NjNlODMyN2NmOTkzMzcwMDU1ZDM0NGZiMjZhYmI1NA==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1996-11-12T22:51:54Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1996-11-12T22:51:54Z"}, "message": "(MASK_BYTE_OPS): New define.\n\n(TARGET_BYTE_OPS): New define.\n(TARGET_SWITCHES): Handle -mbyte.\n(LOAD_EXTEND_OP): When MODE is not SImode, return ZERO_EXTEND.\n\nFrom-SVN: r13147", "tree": {"sha": "40782963990283d150c8161c57f5a7a2308bc51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40782963990283d150c8161c57f5a7a2308bc51a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7747781463e8327cf993370055d344fb26abb54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7747781463e8327cf993370055d344fb26abb54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7747781463e8327cf993370055d344fb26abb54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7747781463e8327cf993370055d344fb26abb54/comments", "author": null, "committer": null, "parents": [{"sha": "bbf42586f00c5c0d0f5b906428c64742eed5826f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf42586f00c5c0d0f5b906428c64742eed5826f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf42586f00c5c0d0f5b906428c64742eed5826f"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "2c3df5df017799e5f5ed2c2e57a4f20c5fbc0f9f", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7747781463e8327cf993370055d344fb26abb54/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7747781463e8327cf993370055d344fb26abb54/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=b7747781463e8327cf993370055d344fb26abb54", "patch": "@@ -157,6 +157,11 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n #define MASK_BUILD_CONSTANTS 128\n #define TARGET_BUILD_CONSTANTS (target_flags & MASK_BUILD_CONSTANTS)\n \n+/* This means that the processor has byte and half word loads and stores.  */\n+\n+#define MASK_BYTE_OPS 256\n+#define TARGET_BYTE_OPS\t(target_flags & MASK_BYTE_OPS)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -174,6 +179,7 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n     {\"ieee\", MASK_IEEE|MASK_IEEE_CONFORMANT},\t\\\n     {\"ieee-with-inexact\", MASK_IEEE_WITH_INEXACT|MASK_IEEE_CONFORMANT}, \\\n     {\"build-constants\", MASK_BUILD_CONSTANTS},  \\\n+    {\"byte\", MASK_BYTE_OPS},\t\t\t\\\n     {\"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT} }\n \n #define TARGET_DEFAULT MASK_FP|MASK_FPREGS\n@@ -1466,7 +1472,7 @@ extern void final_prescan_insn ();\n    will either zero-extend or sign-extend.  The value of this macro should\n    be the code that says which one of the two operations is implicitly\n    done, NIL if none.  */\n-#define LOAD_EXTEND_OP(MODE) SIGN_EXTEND\n+#define LOAD_EXTEND_OP(MODE) ((MODE) == SImode ? SIGN_EXTEND : ZERO_EXTEND)\n \n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND"}]}