{"sha": "9973f4a2949b6de3b35752399aea27842e79efdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk3M2Y0YTI5NDliNmRlM2IzNTc1MjM5OWFlYTI3ODQyZTc5ZWZkZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-14T13:08:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-14T13:08:58Z"}, "message": "(call_operand): Any reg is valid for NT.\n\n(output_prologue): Never need GP for Windows/NT.\nSet SYMBOL_REF_FLAG in current function decl.\n\nFrom-SVN: r9381", "tree": {"sha": "5cb7ec473046e10376ff864b6ae58b9689350028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cb7ec473046e10376ff864b6ae58b9689350028"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9973f4a2949b6de3b35752399aea27842e79efdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9973f4a2949b6de3b35752399aea27842e79efdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9973f4a2949b6de3b35752399aea27842e79efdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9973f4a2949b6de3b35752399aea27842e79efdd/comments", "author": null, "committer": null, "parents": [{"sha": "1c3b948b0706f86902f6fbd8f92bc27d6bc8f738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3b948b0706f86902f6fbd8f92bc27d6bc8f738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c3b948b0706f86902f6fbd8f92bc27d6bc8f738"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "83622c879d29c4348c04609c3917ae25da17d276", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9973f4a2949b6de3b35752399aea27842e79efdd/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9973f4a2949b6de3b35752399aea27842e79efdd/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9973f4a2949b6de3b35752399aea27842e79efdd", "patch": "@@ -369,7 +369,8 @@ call_operand (op, mode)\n     return 0;\n \n   return (GET_CODE (op) == SYMBOL_REF\n-\t  || (GET_CODE (op) == REG && REGNO (op) == 27));\n+\t  || (GET_CODE (op) == REG\n+\t      && (REGNO (op) == 27 || WINDOWS_NT)));\n }\n \n /* Return 1 if OP is a valid Alpha comparison operator.  Here we know which\n@@ -1341,7 +1342,9 @@ output_prolog (file, size)\n \n   /* If we need a GP (we have a LDSYM insn or a CALL_INSN), load it first. \n      Even if we are a static function, we still need to do this in case\n-     our address is taken and passed to something like qsort.  */\n+     our address is taken and passed to something like qsort.\n+\n+     We never need a GP for Windows/NT.  */\n \n   alpha_function_needs_gp = 0;\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n@@ -1356,12 +1359,15 @@ output_prolog (file, size)\n \tbreak;\n       }\n \n-  if (alpha_function_needs_gp)\n-    fprintf (file, \"\\tldgp $29,0($27)\\n\");\n+  if (WINDOWS_NT == 0)\n+    {\n+      if (alpha_function_needs_gp)\n+\tfprintf (file, \"\\tldgp $29,0($27)\\n\");\n \n-  /* Put a label after the GP load so we can enter the function at it.  */\n-  assemble_name (file, alpha_function_name);\n-  fprintf (file, \"..ng:\\n\");\n+      /* Put a label after the GP load so we can enter the function at it.  */\n+      assemble_name (file, alpha_function_name);\n+      fprintf (file, \"..ng:\\n\");\n+    }\n \n   /* Adjust the stack by the frame size.  If the frame size is > 4096\n      bytes, we need to be sure we probe somewhere in the first and last\n@@ -1578,6 +1584,9 @@ output_epilog (file, size)\n   assemble_name (file, alpha_function_name);\n   fprintf (file, \"\\n\");\n   inside_function = FALSE;\n+\n+  /* Show that we know this function if it is called again.  */\n+  SYMBOL_REF_FLAG (XEXP (DECL_RTL (current_function_decl), 0)) = 1;\n }\n \f\n /* Debugging support.  */"}]}