{"sha": "73f6eabc3ae4de22a83135f03f8c8688623661a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmNmVhYmMzYWU0ZGUyMmE4MzEzNWYwM2Y4Yzg2ODg2MjM2NjFhMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-06-29T09:42:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-06-29T09:42:42Z"}, "message": "re PR middle-end/49545 (New C++ test failures)\n\ngcc/\n\tPR tree-optimization/49545\n\t* builtins.c (get_object_alignment_1): Update function comment.\n\tDo not use DECL_ALIGN for functions, but test\n\tTARGET_PTRMEMFUNC_VBIT_LOCATION instead.\n\t* fold-const.c (get_pointer_modulus_and_residue): Don't check\n\tfor functions here.\n\t* tree-ssa-ccp.c (get_value_from_alignment): Likewise.\n\ngcc/testsuite/\n\t* gcc.dg/torture/pr49169.c: Restrict to ARM and MIPS targets.\n\nFrom-SVN: r175627", "tree": {"sha": "959a91c1ec3ac4f1dfeb6120dc9880fdef666220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/959a91c1ec3ac4f1dfeb6120dc9880fdef666220"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73f6eabc3ae4de22a83135f03f8c8688623661a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f6eabc3ae4de22a83135f03f8c8688623661a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f6eabc3ae4de22a83135f03f8c8688623661a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f6eabc3ae4de22a83135f03f8c8688623661a1/comments", "author": null, "committer": null, "parents": [{"sha": "0e8377f2d813a56813022c8aad6b3ba7f3a3edbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8377f2d813a56813022c8aad6b3ba7f3a3edbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8377f2d813a56813022c8aad6b3ba7f3a3edbc"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "0a87e3c69215b2dd6fe26e3e4b12989404bc96b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73f6eabc3ae4de22a83135f03f8c8688623661a1", "patch": "@@ -1,3 +1,13 @@\n+2011-06-29  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/49545\n+\t* builtins.c (get_object_alignment_1): Update function comment.\n+\tDo not use DECL_ALIGN for functions, but test\n+\tTARGET_PTRMEMFUNC_VBIT_LOCATION instead.\n+\t* fold-const.c (get_pointer_modulus_and_residue): Don't check\n+\tfor functions here.\n+\t* tree-ssa-ccp.c (get_value_from_alignment): Likewise.\n+\n 2011-06-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/49567"}, {"sha": "1ee8cf80001db3ed90af651c65fbebf27cfda7d5", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=73f6eabc3ae4de22a83135f03f8c8688623661a1", "patch": "@@ -264,8 +264,15 @@ called_as_built_in (tree node)\n   return is_builtin_name (name);\n }\n \n-/* Return the alignment in bits of EXP, an object.\n-   Don't return more than MAX_ALIGN no matter what.  */\n+/* Compute values M and N such that M divides (address of EXP - N) and\n+   such that N < M.  Store N in *BITPOSP and return M.\n+\n+   Note that the address (and thus the alignment) computed here is based\n+   on the address to which a symbol resolves, whereas DECL_ALIGN is based\n+   on the address at which an object is actually located.  These two\n+   addresses are not always the same.  For example, on ARM targets,\n+   the address &foo of a Thumb function foo() has the lowest bit set,\n+   whereas foo() itself starts on an even address.  */\n \n unsigned int\n get_object_alignment_1 (tree exp, unsigned HOST_WIDE_INT *bitposp)\n@@ -287,7 +294,21 @@ get_object_alignment_1 (tree exp, unsigned HOST_WIDE_INT *bitposp)\n     exp = DECL_INITIAL (exp);\n   if (DECL_P (exp)\n       && TREE_CODE (exp) != LABEL_DECL)\n-    align = DECL_ALIGN (exp);\n+    {\n+      if (TREE_CODE (exp) == FUNCTION_DECL)\n+\t{\n+\t  /* Function addresses can encode extra information besides their\n+\t     alignment.  However, if TARGET_PTRMEMFUNC_VBIT_LOCATION\n+\t     allows the low bit to be used as a virtual bit, we know\n+\t     that the address itself must be 2-byte aligned.  */\n+\t  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn)\n+\t    align = 2 * BITS_PER_UNIT;\n+\t  else\n+\t    align = BITS_PER_UNIT;\n+\t}\n+      else\n+\talign = DECL_ALIGN (exp);\n+    }\n   else if (CONSTANT_CLASS_P (exp))\n     {\n       align = TYPE_ALIGN (TREE_TYPE (exp));"}, {"sha": "e48aae9f4ce19a2ed7538194524b091603bff87e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=73f6eabc3ae4de22a83135f03f8c8688623661a1", "patch": "@@ -9216,8 +9216,7 @@ get_pointer_modulus_and_residue (tree expr, unsigned HOST_WIDE_INT *residue,\n   *residue = 0;\n \n   code = TREE_CODE (expr);\n-  if (code == ADDR_EXPR\n-      && TREE_CODE (TREE_OPERAND (expr, 0)) != FUNCTION_DECL)\n+  if (code == ADDR_EXPR)\n     {\n       unsigned int bitalign;\n       bitalign = get_object_alignment_1 (TREE_OPERAND (expr, 0), residue);"}, {"sha": "ee7274790fd91099457a9d40f3d5998ac37c44c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73f6eabc3ae4de22a83135f03f8c8688623661a1", "patch": "@@ -1,3 +1,7 @@\n+2011-06-29  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.dg/torture/pr49169.c: Restrict to ARM and MIPS targets.\n+\n 2011-06-29  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.dg/inline_1.c: Remove dg-excess-errors."}, {"sha": "c7800bb753686abc6b09dfbb8d6452862048877d", "filename": "gcc/testsuite/gcc.dg/torture/pr49169.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49169.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49169.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49169.c?ref=73f6eabc3ae4de22a83135f03f8c8688623661a1", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-do compile { target { arm*-*-* || mips*-*-* } } } */\n+\n #include <stdlib.h>\n #include <stdint.h>\n "}, {"sha": "94a09e0bbc943f130d9fdd14fe9f2965e8c3f784", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f6eabc3ae4de22a83135f03f8c8688623661a1/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=73f6eabc3ae4de22a83135f03f8c8688623661a1", "patch": "@@ -520,10 +520,6 @@ get_value_from_alignment (tree expr)\n     val = bit_value_binop (PLUS_EXPR, TREE_TYPE (expr),\n \t\t\t   TREE_OPERAND (base, 0), TREE_OPERAND (base, 1));\n   else if (base\n-\t   /* ???  While function decls have DECL_ALIGN their addresses\n-\t      may encode extra information in the lower bits on some\n-\t      targets (PR47239).  Simply punt for function decls for now.  */\n-\t   && TREE_CODE (base) != FUNCTION_DECL\n \t   && ((align = get_object_alignment (base, BIGGEST_ALIGNMENT))\n \t\t> BITS_PER_UNIT))\n     {"}]}