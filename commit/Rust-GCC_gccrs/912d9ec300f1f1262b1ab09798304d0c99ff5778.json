{"sha": "912d9ec300f1f1262b1ab09798304d0c99ff5778", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEyZDllYzMwMGYxZjEyNjJiMWFiMDk3OTgzMDRkMGM5OWZmNTc3OA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-09-28T11:06:41Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-09-28T11:06:41Z"}, "message": "Optimize strchr (s, 0) to s + strlen (s).\n\nOptimize strchr (s, 0) to s + strlen (s).  strchr (s, 0) appears a common\nidiom for finding the end of a string, however it is not a very efficient\nway of doing so.  Strlen is a much simpler operation which is significantly\nfaster (eg. on x86 strlen is 50% faster for strings of 8 bytes and about\ntwice as fast as strchr on strings of 1KB).\n\n    gcc/\n\t* gimple-fold.c (gimple_fold_builtin_strchr):\n\tNew function to optimize strchr (s, 0) to strlen.\n\t(gimple_fold_builtin): Add BUILT_IN_STRCHR case.\n\n    testsuite/\n\t* gcc.dg/strlenopt-20.c: Update test.\n\t* gcc.dg/strlenopt-21.c: Likewise.\n\t* gcc.dg/strlenopt-22.c: Likewise.\n\t* gcc.dg/strlenopt-22g.c: Likewise.\n\t* gcc.dg/strlenopt-26.c: Likewise.\n\t* gcc.dg/strlenopt-5.c: Likewise.\n\t* gcc.dg/strlenopt-7.c: Likewise.\n\t* gcc.dg/strlenopt-9.c: Likewise.\n\nFrom-SVN: r240568", "tree": {"sha": "3c170771d3f815d96a6d0ba133a16b9fe28bc717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c170771d3f815d96a6d0ba133a16b9fe28bc717"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/912d9ec300f1f1262b1ab09798304d0c99ff5778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/912d9ec300f1f1262b1ab09798304d0c99ff5778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/912d9ec300f1f1262b1ab09798304d0c99ff5778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/912d9ec300f1f1262b1ab09798304d0c99ff5778/comments", "author": null, "committer": null, "parents": [{"sha": "1b4be62ad3e153d2e4eda115698cbf33fca09781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4be62ad3e153d2e4eda115698cbf33fca09781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4be62ad3e153d2e4eda115698cbf33fca09781"}], "stats": {"total": 100, "additions": 85, "deletions": 15}, "files": [{"sha": "75eeb632adb124f6c6451b56aa70af6dd2784c18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=912d9ec300f1f1262b1ab09798304d0c99ff5778", "patch": "@@ -1,3 +1,10 @@\n+2016-09-28  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR tree-optimization/61056\n+\t* gimple-fold.c (gimple_fold_builtin_strchr):\n+\tNew function to optimize strchr (s, 0) to strlen.\n+\t(gimple_fold_builtin): Add BUILT_IN_STRCHR case.\n+\n 2016-09-27  Robin Dapp  <rdapp@linux.vnet.ibm.com>\n \n \tPR tree-optimization/77724"}, {"sha": "f5a5e5db2830d4f7ecc05084b488f16c3d67f3fb", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=912d9ec300f1f1262b1ab09798304d0c99ff5778", "patch": "@@ -1457,6 +1457,55 @@ gimple_fold_builtin_strncpy (gimple_stmt_iterator *gsi,\n   return true;\n }\n \n+/* Simplify strchr (str, 0) into str + strlen (str).\n+   In general strlen is significantly faster than strchr\n+   due to being a simpler operation.  */\n+static bool\n+gimple_fold_builtin_strchr (gimple_stmt_iterator *gsi)\n+{\n+  gimple *stmt = gsi_stmt (*gsi);\n+  tree str = gimple_call_arg (stmt, 0);\n+  tree c = gimple_call_arg (stmt, 1);\n+  location_t loc = gimple_location (stmt);\n+\n+  if (optimize_function_for_size_p (cfun))\n+    return false;\n+\n+  if (!integer_zerop (c) || !gimple_call_lhs (stmt))\n+    return false;\n+\n+  tree len;\n+  tree strlen_fn = builtin_decl_implicit (BUILT_IN_STRLEN);\n+\n+  if (!strlen_fn)\n+    return false;\n+\n+  /* Create newstr = strlen (str).  */\n+  gimple_seq stmts = NULL;\n+  gimple *new_stmt = gimple_build_call (strlen_fn, 1, str);\n+  gimple_set_location (new_stmt, loc);\n+  if (gimple_in_ssa_p (cfun))\n+    len = make_ssa_name (size_type_node);\n+  else\n+    len = create_tmp_reg (size_type_node);\n+  gimple_call_set_lhs (new_stmt, len);\n+  gimple_seq_add_stmt_without_update (&stmts, new_stmt);\n+\n+  /* Create (str p+ strlen (str)).  */\n+  new_stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t  POINTER_PLUS_EXPR, str, len);\n+  gimple_seq_add_stmt_without_update (&stmts, new_stmt);\n+  gsi_replace_with_seq_vops (gsi, stmts);\n+  /* gsi now points at the assignment to the lhs, get a\n+     stmt iterator to the strlen.\n+     ???  We can't use gsi_for_stmt as that doesn't work when the\n+     CFG isn't built yet.  */\n+  gimple_stmt_iterator gsi2 = *gsi;\n+  gsi_prev (&gsi2);\n+  fold_stmt (&gsi2);\n+  return true;\n+}\n+\n /* Simplify a call to the strcat builtin.  DST and SRC are the arguments\n    to the call.\n \n@@ -2898,6 +2947,8 @@ gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t\t\t\t\t gimple_call_arg (stmt, 1));\n     case BUILT_IN_STRNCAT:\n       return gimple_fold_builtin_strncat (gsi);\n+    case BUILT_IN_STRCHR:\n+      return gimple_fold_builtin_strchr (gsi);\n     case BUILT_IN_FPUTS:\n       return gimple_fold_builtin_fputs (gsi, gimple_call_arg (stmt, 0),\n \t\t\t\t\tgimple_call_arg (stmt, 1), false);"}, {"sha": "0642e23aec79f7a9722505dfc76279b1cef322cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=912d9ec300f1f1262b1ab09798304d0c99ff5778", "patch": "@@ -1,3 +1,14 @@\n+2016-09-28  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.dg/strlenopt-20.c: Update test.\n+\t* gcc.dg/strlenopt-21.c: Likewise.\n+\t* gcc.dg/strlenopt-22.c: Likewise.\n+\t* gcc.dg/strlenopt-22g.c: Likewise.\n+\t* gcc.dg/strlenopt-26.c: Likewise.\n+\t* gcc.dg/strlenopt-5.c: Likewise.\n+\t* gcc.dg/strlenopt-7.c: Likewise.\n+\t* gcc.dg/strlenopt-9.c: Likewise.\n+\n 2016-09-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/cpp1z/feat-cxx1z.C: Add __cpp_capture_star_this test."}, {"sha": "7b483eaeac1aa47278111a92148a16f00b2aaa2d", "filename": "gcc/testsuite/gcc.dg/strlenopt-20.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-20.c?ref=912d9ec300f1f1262b1ab09798304d0c99ff5778", "patch": "@@ -86,9 +86,9 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 2 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 4 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 0 \"strlen\" } } */"}, {"sha": "05b85a49dde0a7f5d269174fd4269e40be910dbd", "filename": "gcc/testsuite/gcc.dg/strlenopt-21.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-21.c?ref=912d9ec300f1f1262b1ab09798304d0c99ff5778", "patch": "@@ -57,9 +57,9 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 2 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 3 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 0 \"strlen\" } } */"}, {"sha": "b4ef772f0e59252f10a5419ede6837b3c8ca8265", "filename": "gcc/testsuite/gcc.dg/strlenopt-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-22.c?ref=912d9ec300f1f1262b1ab09798304d0c99ff5778", "patch": "@@ -31,9 +31,9 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 3 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 4 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 1 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 1 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 0 \"strlen\" } } */"}, {"sha": "9c5d020588f3f338a9acf51d36facfea55810760", "filename": "gcc/testsuite/gcc.dg/strlenopt-22g.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-22g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-22g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-22g.c?ref=912d9ec300f1f1262b1ab09798304d0c99ff5778", "patch": "@@ -5,9 +5,9 @@\n #define USE_GNU\n #include \"strlenopt-22.c\"\n \n-/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 1 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 1 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 1 \"strlen\" } } */"}, {"sha": "da2f465a5b5003fa5dca05f3a6ee00e97b98b5dd", "filename": "gcc/testsuite/gcc.dg/strlenopt-26.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-26.c?ref=912d9ec300f1f1262b1ab09798304d0c99ff5778", "patch": "@@ -21,4 +21,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 2 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */"}, {"sha": "a24aea44e8b00ff7b35a907aaa941b4c509642c4", "filename": "gcc/testsuite/gcc.dg/strlenopt-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-5.c?ref=912d9ec300f1f1262b1ab09798304d0c99ff5778", "patch": "@@ -48,9 +48,9 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 2 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 2 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 1 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 2 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 0 \"strlen\" } } */"}, {"sha": "aa53d7e75254dfe56c93172afc49f95e5b7901e6", "filename": "gcc/testsuite/gcc.dg/strlenopt-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-7.c?ref=912d9ec300f1f1262b1ab09798304d0c99ff5778", "patch": "@@ -40,11 +40,11 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 1 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 2 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"\\\\*r_\\[0-9\\]* = 0;\" 1 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"return 3;\" 1 \"optimized\" } } */"}, {"sha": "e8ff1023d71268e2067993189d5f62eab37a16e5", "filename": "gcc/testsuite/gcc.dg/strlenopt-9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912d9ec300f1f1262b1ab09798304d0c99ff5778/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-9.c?ref=912d9ec300f1f1262b1ab09798304d0c99ff5778", "patch": "@@ -98,10 +98,10 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 3 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 5 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 6 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 1 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 3 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"return 4;\" 1 \"optimized\" } } */"}]}