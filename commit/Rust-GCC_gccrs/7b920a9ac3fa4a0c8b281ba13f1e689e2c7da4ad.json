{"sha": "7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5MjBhOWFjM2ZhNGEwYzhiMjgxYmExM2YxZTY4OWUyYzdkYTRhZA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-05-02T14:03:02Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-05-02T14:03:02Z"}, "message": "re PR middle-end/56988 (ipa-cp incorrectly propagates a field of an aggregate)\n\n2013-05-02  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/56988\n\t* ipa-prop.h (ipa_agg_replacement_value): New flag by_ref.\n\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Also check that by_ref\n\tflags match.\n\t(find_aggregate_values_for_callers_subset): Fill in the by_ref flag of\n\tipa_agg_replacement_value structures.\n\t(known_aggs_to_agg_replacement_list): Likewise.\n\t* ipa-prop.c (write_agg_replacement_chain): Stream by_ref flag.\n\t(read_agg_replacement_chain): Likewise.\n\t(ipcp_transform_function): Also check that by_ref flags match.\n\ntestsuite/\n\t* gcc.dg/ipa/pr56988.c: New test.\n\nFrom-SVN: r198540", "tree": {"sha": "8027a27b3fb600becf052caf7dc0a3248112257e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8027a27b3fb600becf052caf7dc0a3248112257e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c41c19d5dfc3de0c0b149dc0846c08422c5dded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c41c19d5dfc3de0c0b149dc0846c08422c5dded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c41c19d5dfc3de0c0b149dc0846c08422c5dded"}], "stats": {"total": 77, "additions": 74, "deletions": 3}, "files": [{"sha": "5a3d4666076d6e188043a7bbad05b122381ada76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad", "patch": "@@ -1,3 +1,16 @@\n+2013-05-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/56988\n+\t* ipa-prop.h (ipa_agg_replacement_value): New flag by_ref.\n+\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Also check that by_ref\n+\tflags match.\n+\t(find_aggregate_values_for_callers_subset): Fill in the by_ref flag of\n+\tipa_agg_replacement_value structures.\n+\t(known_aggs_to_agg_replacement_list): Likewise.\n+\t* ipa-prop.c (write_agg_replacement_chain): Stream by_ref flag.\n+\t(read_agg_replacement_chain): Likewise.\n+\t(ipcp_transform_function): Also check that by_ref flags match.\n+\n 2013-05-02  Richard Biener  <rguenther@suse.de>\n \n \t* graphds.h (struct graph): Add obstack member."}, {"sha": "f16bd1aa5b51f95637495a096870971da6f2a084", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad", "patch": "@@ -1494,7 +1494,8 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n \t      while (agg_reps)\n \t\t{\n \t\t  if (agg_reps->index == param_index\n-\t\t      && agg_reps->offset == ie->indirect_info->offset)\n+\t\t      && agg_reps->offset == ie->indirect_info->offset\n+\t\t      && agg_reps->by_ref == ie->indirect_info->by_ref)\n \t\t    {\n \t\t      t = agg_reps->value;\n \t\t      break;\n@@ -3028,11 +3029,12 @@ find_aggregate_values_for_callers_subset (struct cgraph_node *node,\n       struct cgraph_edge *cs;\n       vec<ipa_agg_jf_item_t> inter = vNULL;\n       struct ipa_agg_jf_item *item;\n+      struct ipcp_param_lattices *plats = ipa_get_parm_lattices (dest_info, i);\n       int j;\n \n       /* Among other things, the following check should deal with all by_ref\n \t mismatches.  */\n-      if (ipa_get_parm_lattices (dest_info, i)->aggs_bottom)\n+      if (plats->aggs_bottom)\n \tcontinue;\n \n       FOR_EACH_VEC_ELT (callers, j, cs)\n@@ -3054,6 +3056,7 @@ find_aggregate_values_for_callers_subset (struct cgraph_node *node,\n \t  v->index = i;\n \t  v->offset = item->offset;\n \t  v->value = item->value;\n+\t  v->by_ref = plats->aggs_by_ref;\n \t  v->next = res;\n \t  res = v;\n \t}\n@@ -3083,6 +3086,7 @@ known_aggs_to_agg_replacement_list (vec<ipa_agg_jump_function_t> known_aggs)\n \tv->index = i;\n \tv->offset = item->offset;\n \tv->value = item->value;\n+\tv->by_ref = aggjf->by_ref;\n \tv->next = res;\n \tres = v;\n       }"}, {"sha": "b98f9adae4b135fd20f13b917ab08ec31d08daa8", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad", "patch": "@@ -3712,9 +3712,15 @@ write_agg_replacement_chain (struct output_block *ob, struct cgraph_node *node)\n \n   for (av = aggvals; av; av = av->next)\n     {\n+      struct bitpack_d bp;\n+\n       streamer_write_uhwi (ob, av->offset);\n       streamer_write_uhwi (ob, av->index);\n       stream_write_tree (ob, av->value, true);\n+\n+      bp = bitpack_create (ob->main_stream);\n+      bp_pack_value (&bp, av->by_ref, 1);\n+      streamer_write_bitpack (&bp);\n     }\n }\n \n@@ -3732,11 +3738,14 @@ read_agg_replacement_chain (struct lto_input_block *ib,\n   for (i = 0; i <count; i++)\n     {\n       struct ipa_agg_replacement_value *av;\n+      struct bitpack_d bp;\n \n       av = ggc_alloc_ipa_agg_replacement_value ();\n       av->offset = streamer_read_uhwi (ib);\n       av->index = streamer_read_uhwi (ib);\n       av->value = stream_read_tree (ib, data_in);\n+      bp = streamer_read_bitpack (ib);\n+      av->by_ref = bp_unpack_value (&bp, 1);\n       av->next = aggvals;\n       aggvals = av;\n     }\n@@ -3955,7 +3964,7 @@ ipcp_transform_function (struct cgraph_node *node)\n \t  if (v->index == index\n \t      && v->offset == offset)\n \t    break;\n-\tif (!v)\n+\tif (!v || v->by_ref != by_ref)\n \t  continue;\n \n \tgcc_checking_assert (is_gimple_ip_invariant (v->value));"}, {"sha": "e75826ff8dc35b64f8102cfc3ff679382fed41fc", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad", "patch": "@@ -386,6 +386,8 @@ struct GTY(()) ipa_agg_replacement_value\n   tree value;\n   /* The paramter index.  */\n   int index;\n+  /* Whether the value was passed by reference.  */\n+  bool by_ref;\n };\n \n typedef struct ipa_agg_replacement_value *ipa_agg_replacement_value_p;"}, {"sha": "1f345ffb700d6644fe863d7faf8ce0064a1051b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad", "patch": "@@ -1,3 +1,8 @@\n+2013-05-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/56988\n+\t* gcc.dg/ipa/pr56988.c: New test.\n+\n 2013-05-02  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc.target/aarch64/bics_1.c: New test."}, {"sha": "ab20159b8ec5a3e9b0a2c15d800da41a065a6cc2", "filename": "gcc/testsuite/gcc.dg/ipa/pr56988.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr56988.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr56988.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr56988.c?ref=7b920a9ac3fa4a0c8b281ba13f1e689e2c7da4ad", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+struct S\n+{\n+  int a, b, c;\n+};\n+\n+volatile int g;\n+\n+static void __attribute__ ((noinline, noclone))\n+bar (struct S **p)\n+{\n+  g = 5;\n+};\n+\n+static void __attribute__ ((noinline))\n+foo (struct S *p)\n+{\n+  int i = p->a;\n+  if (i != 1)\n+    __builtin_abort ();\n+  bar (&p);\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  struct S s;\n+  s.a = 1;\n+  s.b = 64;\n+  s.c = 32;\n+  foo (&s);\n+\n+  return 0;\n+}\n+"}]}