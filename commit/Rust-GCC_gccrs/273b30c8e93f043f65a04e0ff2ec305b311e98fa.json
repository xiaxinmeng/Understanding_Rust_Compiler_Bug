{"sha": "273b30c8e93f043f65a04e0ff2ec305b311e98fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjczYjMwYzhlOTNmMDQzZjY1YTA0ZTBmZjJlYzMwNWIzMTFlOThmYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-08T09:10:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-08T09:10:34Z"}, "message": "openmp: Set cfun->calls_alloca when needed in OpenMP outlined regions [PR97294]\n\nThe following testcase FAILs, because we don't mark the child OpenMP function\nas cfun->calls_alloca when it does call alloca.  When optimizing, during DCE we\nreset those flags and recompute them again, but with -O0 DCE is not performed.\n\nFixed by calling notice_special_calls when moving insns to the child function.\n\ncfun->calls_alloca is normally set during gimplification and most of the\nalloca calls omp-low.c does go through the gimplifier, but one spot didn't\nand built the gcall directly, so that one needs to set calls_alloca too.\n\n2020-10-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR sanitizer/97294\n\t* tree-cfg.c (move_block_to_fn): Call notice_special_calls on\n\tcall stmts being moved into dest_cfun.\n\t* omp-low.c (lower_rec_input_clauses): Set cfun->calls_alloca when\n\tadding __builtin_alloca_with_align call without gimplification.\n\n\t* gcc.dg/asan/pr97294.c: New test.", "tree": {"sha": "06fd92384b1ed204c0e4c7a6a5c69714f016422d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06fd92384b1ed204c0e4c7a6a5c69714f016422d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/273b30c8e93f043f65a04e0ff2ec305b311e98fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273b30c8e93f043f65a04e0ff2ec305b311e98fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/273b30c8e93f043f65a04e0ff2ec305b311e98fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273b30c8e93f043f65a04e0ff2ec305b311e98fa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7345ef6c2a197d0a2581c67838b7ba1650dfad30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7345ef6c2a197d0a2581c67838b7ba1650dfad30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7345ef6c2a197d0a2581c67838b7ba1650dfad30"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "b3e2468bbaed220d295e9d4a791f2ec5ce9c1e0a", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/273b30c8e93f043f65a04e0ff2ec305b311e98fa/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/273b30c8e93f043f65a04e0ff2ec305b311e98fa/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=273b30c8e93f043f65a04e0ff2ec305b311e98fa", "patch": "@@ -5112,6 +5112,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t  atmp = builtin_decl_explicit (BUILT_IN_ALLOCA_WITH_ALIGN);\n \t\t  stmt = gimple_build_call (atmp, 2, x,\n \t\t\t\t\t    size_int (DECL_ALIGN (var)));\n+\t\t  cfun->calls_alloca = 1;\n \t\t  tmp = create_tmp_var_raw (ptr_type_node);\n \t\t  gimple_add_tmp_var (tmp);\n \t\t  gimple_call_set_lhs (stmt, tmp);"}, {"sha": "6de6c3e763740b7921178da38020fed5d0968b85", "filename": "gcc/testsuite/gcc.dg/asan/pr97294.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/273b30c8e93f043f65a04e0ff2ec305b311e98fa/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr97294.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/273b30c8e93f043f65a04e0ff2ec305b311e98fa/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr97294.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr97294.c?ref=273b30c8e93f043f65a04e0ff2ec305b311e98fa", "patch": "@@ -0,0 +1,41 @@\n+/* PR sanitizer/97294 */\n+/* { dg-do compile { target fopenmp } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+/* { dg-options \"-O0 -fsanitize=address -fopenmp\" } */\n+/* { dg-final { scan-assembler \"foo._omp_fn.\\[0-9]\\[1-9]*:.*call\\[ \\t]\\*__*asan_allocas_unpoison.*\\.size\\[ \\t]\\*foo._omp_fn.\\[0-9]\\[1-9]*,\" { target x86_64-*-linux* i?86-*-linux* } } } */\n+\n+__attribute__((noipa)) void\n+foo (int *p, int n)\n+{\n+  int i;\n+  #pragma omp parallel for num_threads(2) reduction(+:p[:n])\n+  for (i = 0; i < 10; i++)\n+    {\n+      p[0]++;\n+      p[n - 1] += 2;\n+    }\n+}\n+\n+__attribute__((noipa)) void\n+bar (void)\n+{\n+  unsigned char buf[1024];\n+  int i;\n+  asm volatile (\"\" : : \"r\" (&buf[0]) : \"memory\");\n+  for (i = 0; i < 1024; i++)\n+    buf[i] = i;\n+  asm volatile (\"\" : : \"r\" (&buf[0]) : \"memory\");\n+}\n+\n+int\n+main ()\n+{\n+  int p[50], i;\n+  for (i = 0; i < 50; i++)\n+    p[i] = 0;\n+  foo (p, 50);\n+  bar ();\n+  if (p[0] != 10 || p[49] != 20)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "5caf3b62d69d99ec66b57d59232f812affe2ef52", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/273b30c8e93f043f65a04e0ff2ec305b311e98fa/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/273b30c8e93f043f65a04e0ff2ec305b311e98fa/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=273b30c8e93f043f65a04e0ff2ec305b311e98fa", "patch": "@@ -7220,6 +7220,8 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n       free_stmt_operands (cfun, stmt);\n       push_cfun (dest_cfun);\n       update_stmt (stmt);\n+      if (is_gimple_call (stmt))\n+\tnotice_special_calls (as_a <gcall *> (stmt));\n       pop_cfun ();\n     }\n "}]}