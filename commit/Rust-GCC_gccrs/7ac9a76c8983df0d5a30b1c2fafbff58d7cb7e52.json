{"sha": "7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52", "node_id": "C_kwDOANBUbNoAKDdhYzlhNzZjODk4M2RmMGQ1YTMwYjFjMmZhZmJmZjU4ZDdjYjdlNTI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-16T15:22:52Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-16T15:22:52Z"}, "message": "Make TypeBoundPredicate a subclass of the SubstitutionRef\n\nThis will allow us to reuse our generic substitions code to manage generic\ntraits and their substitions better. It will unify the handling in one\npath so we get the same error handling.", "tree": {"sha": "43963805900241b94a43152ffa4e9b31f6400d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43963805900241b94a43152ffa4e9b31f6400d0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56a1571614ab807bfc12a7a43ae4926b2fc1f744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a1571614ab807bfc12a7a43ae4926b2fc1f744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a1571614ab807bfc12a7a43ae4926b2fc1f744"}], "stats": {"total": 94, "additions": 75, "deletions": 19}, "files": [{"sha": "585fb6c8dbfe2f3c89d25a22cc50c6770f43e473", "filename": "gcc/rust/typecheck/rust-hir-trait-ref.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h?ref=7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52", "patch": "@@ -407,7 +407,7 @@ class TraitReference\n \n   bool trait_has_generics () const { return !trait_substs.empty (); }\n \n-  const std::vector<TyTy::SubstitutionParamMapping> &get_trait_substs () const\n+  std::vector<TyTy::SubstitutionParamMapping> get_trait_substs () const\n   {\n     return trait_substs;\n   }"}, {"sha": "806a46f13cee2eec4e0bbe51180542c9e7db1efa", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52", "patch": "@@ -150,8 +150,13 @@ class TraitResolver : public TypeCheckBase\n \n     // They also inherit themselves as a bound this enables a trait item to\n     // reference other Self::trait_items\n+    std::vector<TyTy::SubstitutionParamMapping> self_subst_copy;\n+    for (auto &sub : substitutions)\n+      self_subst_copy.push_back (sub.clone ());\n+\n     specified_bounds.push_back (\n       TyTy::TypeBoundPredicate (trait_reference->get_mappings ().get_defid (),\n+\t\t\t\tstd::move (self_subst_copy),\n \t\t\t\ttrait_reference->get_locus ()));\n \n     std::vector<const TraitReference *> super_traits;\n@@ -168,8 +173,8 @@ class TraitResolver : public TypeCheckBase\n \t\t// FIXME this might be recursive we need a check for that\n \n \t\tTraitReference *trait = resolve_trait_path (b->get_path ());\n-\t\tTyTy::TypeBoundPredicate predicate (\n-\t\t  trait->get_mappings ().get_defid (), bound->get_locus ());\n+\t\tTyTy::TypeBoundPredicate predicate (*trait,\n+\t\t\t\t\t\t    bound->get_locus ());\n \n \t\tspecified_bounds.push_back (std::move (predicate));\n \t\tsuper_traits.push_back (predicate.get ());"}, {"sha": "8a41548babb9dfb3c9135007557b103d138b6cd3", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52", "patch": "@@ -79,8 +79,8 @@ class TypeCheckItem : public TypeCheckBase\n \trust_assert (!trait_reference->is_error ());\n \n \t// setup the bound\n-\tTyTy::TypeBoundPredicate predicate (\n-\t  trait_reference->get_mappings ().get_defid (), ref->get_locus ());\n+\tTyTy::TypeBoundPredicate predicate (*trait_reference,\n+\t\t\t\t\t    ref->get_locus ());\n \tauto &final_seg = ref->get_final_segment ();\n \tif (final_seg->is_generic_segment ())\n \t  {"}, {"sha": "ee77128143df4f1355946f3e00780f34b8da02e7", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52", "patch": "@@ -550,8 +550,7 @@ TypeCheckType::visit (HIR::TraitObjectType &type)\n \n       auto &type_path = trait_bound.get_path ();\n       TraitReference *trait = resolve_trait_path (type_path);\n-      TyTy::TypeBoundPredicate predicate (trait->get_mappings ().get_defid (),\n-\t\t\t\t\t  trait_bound.get_locus ());\n+      TyTy::TypeBoundPredicate predicate (*trait, trait_bound.get_locus ());\n       auto &final_seg = type_path.get_final_segment ();\n       if (final_seg->is_generic_segment ())\n \t{"}, {"sha": "373287e113e4ff8fd497246cecde58de9bb9c5ff", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52", "patch": "@@ -247,8 +247,7 @@ class TypeResolveGenericParam : public TypeCheckBase\n \n \t\t  auto &type_path = b->get_path ();\n \t\t  TraitReference *trait = resolve_trait_path (type_path);\n-\t\t  TyTy::TypeBoundPredicate predicate (\n-\t\t    trait->get_mappings ().get_defid (), b->get_locus ());\n+\t\t  TyTy::TypeBoundPredicate predicate (*trait, b->get_locus ());\n \n \t\t  auto &final_seg = type_path.get_final_segment ();\n \t\t  if (final_seg->is_generic_segment ())\n@@ -318,8 +317,7 @@ class ResolveWhereClauseItem : public TypeCheckBase\n \n \t      auto &type_path = b->get_path ();\n \t      TraitReference *trait = resolve_trait_path (type_path);\n-\t      TyTy::TypeBoundPredicate predicate (\n-\t\ttrait->get_mappings ().get_defid (), b->get_locus ());\n+\t      TyTy::TypeBoundPredicate predicate (*trait, b->get_locus ());\n \n \t      auto &final_seg = type_path.get_final_segment ();\n \t      if (final_seg->is_generic_segment ())"}, {"sha": "25d4966aa6336c87fcd191ebea396ebfc985e3cb", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52", "patch": "@@ -67,17 +67,38 @@ TypeCheckBase::resolve_trait_path (HIR::TypePath &path)\n \n namespace TyTy {\n \n-TypeBoundPredicate::TypeBoundPredicate (DefId reference, Location locus)\n-  : reference (reference), locus (locus), args (nullptr)\n+TypeBoundPredicate::TypeBoundPredicate (\n+  const Resolver::TraitReference &trait_reference, Location locus)\n+  : SubstitutionRef (trait_reference.get_trait_substs (),\n+\t\t     SubstitutionArgumentMappings::error ()),\n+    reference (trait_reference.get_mappings ().get_defid ()), locus (locus),\n+    args (nullptr), error_flag (false)\n {}\n \n+TypeBoundPredicate::TypeBoundPredicate (\n+  DefId reference, std::vector<SubstitutionParamMapping> substitutions,\n+  Location locus)\n+  : SubstitutionRef (std::move (substitutions),\n+\t\t     SubstitutionArgumentMappings::error ()),\n+    reference (reference), locus (locus), args (nullptr), error_flag (false)\n+{}\n+\n+TypeBoundPredicate::TypeBoundPredicate (const TypeBoundPredicate &other)\n+  : SubstitutionRef ({}, other.used_arguments), reference (other.reference),\n+    locus (other.locus), args (other.args), error_flag (other.error_flag)\n+{\n+  substitutions.clear ();\n+  if (!other.is_error ())\n+    {\n+      for (const auto &p : other.get_substs ())\n+\tsubstitutions.push_back (p.clone ());\n+    }\n+}\n+\n std::string\n TypeBoundPredicate::as_string () const\n {\n-  return get ()->as_string ()\n-\t + (has_generic_args ()\n-\t      ? std::string (\"<\") + args->as_string () + std::string (\">\")\n-\t      : \"\");\n+  return get ()->as_string () + subst_as_string ();\n }\n \n const Resolver::TraitReference *\n@@ -183,6 +204,25 @@ TypeBoundPredicateItem::get_tyty_for_receiver (\n \n   return resolved;\n }\n+bool\n+TypeBoundPredicate::is_error () const\n+{\n+  auto context = Resolver::TypeCheckContext::get ();\n+\n+  Resolver::TraitReference *ref = nullptr;\n+  bool ok = context->lookup_trait_reference (reference, &ref);\n+\n+  return !ok || error_flag;\n+}\n+\n+BaseType *\n+TypeBoundPredicate::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  gcc_unreachable ();\n+  return nullptr;\n+}\n+\n+// trait item reference\n \n const Resolver::TraitItemReference *\n TypeBoundPredicateItem::get_raw_item () const"}, {"sha": "44eb81f43dbe3b0f65ef4ce9b2f8a56efa5166de", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=7ac9a76c8983df0d5a30b1c2fafbff58d7cb7e52", "patch": "@@ -939,10 +939,17 @@ class SubstitutionRef\n   SubstitutionArgumentMappings used_arguments;\n };\n \n-class TypeBoundPredicate\n+class TypeBoundPredicate : public SubstitutionRef\n {\n public:\n-  TypeBoundPredicate (DefId reference, Location locus);\n+  TypeBoundPredicate (const Resolver::TraitReference &trait_reference,\n+\t\t      Location locus);\n+\n+  TypeBoundPredicate (DefId reference,\n+\t\t      std::vector<SubstitutionParamMapping> substitutions,\n+\t\t      Location locus);\n+\n+  TypeBoundPredicate (const TypeBoundPredicate &other);\n \n   std::string as_string () const;\n \n@@ -975,10 +982,17 @@ class TypeBoundPredicate\n     return args->has_generic_args ();\n   }\n \n+  // WARNING THIS WILL ALWAYS RETURN NULLPTR\n+  BaseType *\n+  handle_substitions (SubstitutionArgumentMappings mappings) override final;\n+\n+  bool is_error () const;\n+\n private:\n   DefId reference;\n   Location locus;\n   HIR::GenericArgs *args;\n+  bool error_flag;\n };\n \n // https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.VariantDef.html"}]}