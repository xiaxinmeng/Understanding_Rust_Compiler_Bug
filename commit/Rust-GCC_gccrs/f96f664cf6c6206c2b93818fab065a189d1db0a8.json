{"sha": "f96f664cf6c6206c2b93818fab065a189d1db0a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2ZjY2NGNmNmM2MjA2YzJiOTM4MThmYWIwNjVhMTg5ZDFkYjBhOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-04T09:17:18Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-04T09:18:18Z"}, "message": "Remove duplicate ChangeLog entries.\n\ngcc/fortran/ChangeLog:\n\n\t* ChangeLog-2018: Remove duplicate ChangeLog entries.", "tree": {"sha": "c26e5b6f881dd8fc4d99c21bd069d345bd049cd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26e5b6f881dd8fc4d99c21bd069d345bd049cd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f96f664cf6c6206c2b93818fab065a189d1db0a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96f664cf6c6206c2b93818fab065a189d1db0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f96f664cf6c6206c2b93818fab065a189d1db0a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96f664cf6c6206c2b93818fab065a189d1db0a8/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a680610d1cd85fab49a5a9775e253afd30fb9c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a680610d1cd85fab49a5a9775e253afd30fb9c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a680610d1cd85fab49a5a9775e253afd30fb9c1"}], "stats": {"total": 2723, "additions": 0, "deletions": 2723}, "files": [{"sha": "70d50d7f02b2a4b51200b4b78b9bcd8f62cb7f59", "filename": "gcc/fortran/ChangeLog-2018", "status": "modified", "additions": 0, "deletions": 2723, "changes": 2723, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96f664cf6c6206c2b93818fab065a189d1db0a8/gcc%2Ffortran%2FChangeLog-2018", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96f664cf6c6206c2b93818fab065a189d1db0a8/gcc%2Ffortran%2FChangeLog-2018", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog-2018?ref=f96f664cf6c6206c2b93818fab065a189d1db0a8", "patch": "@@ -2928,2729 +2928,6 @@\n \f\n Copyright (C) 2018 Free Software Foundation, Inc.\n \n-Copying and distribution of this file, with or without modification,\n-are permitted in any medium without royalty provided the copyright\n-notice and this notice are preserved.\n-\n-\tPR fortran/87945\n-\t* decl.c (var_element): Inquiry parameters cannit be data objects.\n-\n-2018-12-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/88025\n-\t* expr.c (gfc_apply_init):  Remove asserts that cannot trigger.\n-\tCheck for a NULL pointer.\n-\n-2018-12-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/88357\n-\t* class.c (insert_component_ref): Check for NULL pointer and\n-\tprevious error message issued.\n-\t* parse.c (parse_associate): Check for NULL pointer.\n-\t* resolve.c (resolve_assoc_var): Check for NULL pointer.\n-\n-2018-12-07  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/88377\n-\t* trans-openmp.c (gfc_omp_clause_default_ctor,\n-\tgfc_omp_clause_copy_ctor, gfc_omp_clause_assign_op,\n-\tgfc_omp_clause_linear_ctor, gfc_omp_clause_dtor): Only consider\n-\tGFC_DECL_GET_SCALAR_ALLOCATABLE vars as scalar allocatables if they\n-\thave pointer type.\n-\n-2018-12-03  Fritz Reese  <fritzoreese@gmail.com>\n-\t    Mark Eggleston  <mark.eggleston@codethink.co.uk>\n-\n-\tPR fortran/87919\n-\t* options.c (SET_FLAG, SET_BITFLAG, SET_BITFLAG2): New macros.\n-\t(set_dec_flags): Set/unset DEC and std flags according to value.\n-\t(post_dec_flags, set_init_local_zero): New functions.\n-\t(gfc_init_options): Use set_init_local_zero and post_dec_flags.\n-\t(gfc_handle_options) <case OPT_fcheck_array_temporaries>: Use\n-\tSET_BITFLAG.\n-\t<case OPT_finit_local_zero>: Use set_init_local_zero.\n-\t<case OPT_fdec>: Pass value to set_dec_flags.\n-\t<case OPT_fdec_structure>: Remove.\n-\n-2018-11-30  Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* gfortran.h (struct gfc_omp_clauses): Remove \"wait\".  Adjust all\n-\tusers.\n-\n-\t* openmp.c (gfc_match_omp_clauses): Support multiple OpenACC wait\n-\tclauses.\n-\n-2018-11-27  Martin Liska  <mliska@suse.cz>\n-\n-\t* decl.c (gfc_match_gcc_builtin): New function.\n-\t* gfortran.h (struct vect_builtin_tuple): New.\n-\t(gfc_adjust_builtins): Likewise.\n-\t* lang-specs.h (TARGET_F951_OPTIONS): New.\n-\t(F951_OPTIONS): Use it.\n-\t* lang.opt: Add new option -fpre-include.\n-\t* match.h (gfc_match_gcc_builtin): Declare new function.\n-\t* parse.c (decode_gcc_attribute): Handle builtin.\n-\t(parse_progunit): Call gfc_adjust_builtins.\n-\t* scanner.c (gfc_new_file): Load pre-included header file\n-\twhen provided.\n-\t* trans-intrinsic.c (add_simd_flag_for_built_in): New.\n-\t(gfc_adjust_builtins): Likewise.\n-\n-2018-11-24  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/88143\n-\t* resolve.c (resolve_variable): Check for associate names with\n-\tNULL target.\n-\n-2018-11-23  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* lang.opt (fpad-source): New option.\n-\t* scanner.c (load_line): Don't pad fixed form lines if\n-\t!flag_pad_source.\n-\t* invoke.texi (-fno-pad-source): Document.\n-\n-2018-11-21  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* invoke.texi (-fdec-include): Document.\n-\n-2018-11-21  Jakub Jelinek  <jakub@redhat.com>\n-\t    Mark Eggleston  <mark.eggleston@codethink.com>\n-\n-\t* lang.opt (fdec-include): New option.\n-\t* options.c (set_dec_flags): Set also flag_dec_include.\n-\t* scanner.c (include_line): Change return type from bool to int.\n-\tIn fixed form allow spaces in between include keyword letters.\n-\tFor -fdec-include, allow in fixed form 0 in column 6.  With\n-\t-fdec-include return -1 if the parsed line is not full include\n-\tstatement and it could be successfully completed on continuation\n-\tlines.\n-\t(include_stmt): New function.\n-\t(load_file): Adjust include_line caller.  If it returns -1, keep\n-\ttrying include_stmt until it stops returning -1 whenever adding\n-\tfurther line of input.\n-\n-2018-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/88073\n-\t* frontend-passes.c (combine_array_constructor): Do not do\n-\tanything if in a WHERE statement.\n-\n-2018-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/70260\n-\t* expr.c (gfc_check_assign): Reject assigning to an external\n-\tsymbol.\n-\t(gfc_check_pointer_assign): Add suppress_type_test\n-\targument. Insert line after if. A non-proc pointer can not point\n-\tto a constant.  Only check types if suppress_type_test is false.\n-\t* gfortran.h (gfc_check_pointer_assign): Add optional\n-\tsuppress_type_test argument.\n-\t* resolve.c (gfc_resolve_code):  Move up gfc_check_pointer_assign\n-\tand give it the extra argument.\n-\t(resolve_fl_procedure): Set error on value for a function with\n-\tan inizializer.\n-\n-2018-11-15  David Malcolm  <dmalcolm@redhat.com>\n-\n-\tPR other/19165\n-\t* error.c (gfc_diagnostic_finalizer): Add diagnostic_t param.\n-\n-2018-11-13  David Malcolm  <dmalcolm@redhat.com>\n-\n-\t* cpp.c: Replace \"source_location\" with \"location_t\".\n-\t* gfortran.h: Likewise.\n-\n-2018-11-08  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Use\n-\tOMP_CLAUSE_DEFAULTMAP_SET_KIND.\n-\t(gfc_trans_omp_atomic): Set OMP_ATOMIC_MEMORY_ORDER\n-\trather than OMP_ATOMIC_SEQ_CST.\n-\t(gfc_trans_omp_taskgroup): Build OMP_TASKGROUP using\n-\tmake_node instead of build1_loc.\n-\t* types.def (BT_FN_VOID_BOOL, BT_FN_VOID_SIZE_SIZE_PTR,\n-\tBT_FN_UINT_UINT_PTR_PTR, BT_FN_UINT_OMPFN_PTR_UINT_UINT,\n-\tBT_FN_BOOL_UINT_LONGPTR_LONG_LONG_LONGPTR_LONGPTR_PTR_PTR,\n-\tBT_FN_BOOL_UINT_ULLPTR_LONG_ULL_ULLPTR_ULLPTR_PTR_PTR,\n-\tBT_FN_BOOL_LONG_LONG_LONG_LONG_LONG_LONGPTR_LONGPTR_PTR_PTR,\n-\tBT_FN_BOOL_BOOL_ULL_ULL_ULL_LONG_ULL_ULLPTR_ULLPTR_PTR_PTR): New.\n-\t(BT_FN_VOID_INT_OMPFN_SIZE_PTR_PTR_PTR_UINT_PTR_PTR): Formatting fix.\n-\n-2018-11-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/46020\n-\t* decl.c (verify_bind_c_sym): Remove unnecessary space\n-\tin error message.\n-\n-2018-11-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/87782\n-\t* frontend-passes.c (constant_string_length): If there is a\n-\tsubstring with a length which cannot be reduced to a constant,\n-\treturn NULL.\n-\n-2018-11-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/40196\n-\t* dependency.c (are_identical_variables): Return false if the\n-\tinquiry refs are not the same.\n-\t(gfc_ref_needs_temporary_p): Break on an inquiry ref.\n-\t* dump_parse_tree.c (show_ref): Show the inquiry ref type.\n-\t* expr.c (gfc_free_ref_list): Break on an inquiry ref.\n-\t(gfc_copy_ref): Copy the inquiry ref types.\n-\t(find_inquiry_ref): New function.\n-\t(simplify_const_ref, simplify_ref_chain): Call it. Add new arg\n-\tto simplify_ref_chain.\n-\t(gfc_simplify_expr): Use the new arg in call to\n-\tsimplify_ref_chain.\n-\t(gfc_get_full_arrayspec_from_expr, gfc_is_coarray): Break on\n-\tinquiry ref.\n-\t(gfc_traverse_expr): Return true for inquiry ref.\n-\t* frontend-passes.c (gfc_expr_walker): Break on inquiry ref.\n-\t* gfortran.h : Add enums and union member in gfc_ref to\n-\timplement inquiry refs.\n-\t* intrinsic.c : Fix white nois.\n-\t* match.c (gfc_match_assignment): A constant lavlue is an\n-\terror.\n-\t* module.c : Add DECL_MIO_NAME for inquiry_type and the mstring\n-\tfor inquiry_types.\n-\t(mio_ref): Handle inquiry refs.\n-\t* primary.c (is_inquiry_ref): New function.\n-\t(gfc_match_varspec): Handle inquiry refs calling new function.\n-\t(gfc_variable_attr): Detect inquiry ref for disambiguation\n-\twith components.\n-\t(caf_variable_attr): Treat inquiry and substring refs in the\n-\tsame way.\n-\t* resolve.c (find_array_spec): ditto.\n-\t(gfc_resolve_substring_charlen): If there is neither a charlen\n-\tref not an inquiry ref, return.\n-\t(resolve_ref): Handle inqiry refs as appropriate.\n-\t(resolve_allocate_expr): Entities with an inquiry ref cannot be\n-\tallocated.\n-\t* simplify.c (simplify_bound, simplify_cobound): Punt on\n-\tinquiry refs.\n-\t* trans-array.c (get_array_ctor_var_strlen): Break on inquiry\n-\tref.\n-\t*trans-expr.c (conv_inquiry): New function.\n-\t(gfc_conv_variable): Retain the last typespec to pass to\n-\tconv_inquiry on detecting an inquiry ref.\n-\n-2018-11-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/46020\n-\t* decl.c (verify_bind_c_sym): Improve error message.\n-\n-2018-11-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/54613\n-\t* gfortran.texi (File format of unformatted sequential files):\n-\tReplace random comma with period.\n-\t* intrinsic.texi (Intrinsic Procedures): Add FINDLOC to menu.\n-\t(FINDLOC): Document.\n-\t(MAXLOC): Add refrence to FINDLOC.\n-\t(MINLOC): Likewise.\n-\n-2018-10-31  Nathan Sidwell  <nathan@acm.org>\n-\n-\t* cpp.c (gfc_cpp_init): Adjust cpp_force_token_locations call.\n-\n-2018-10-31  Martin Liska  <mliska@suse.cz>\n-\n-\t* trans-decl.c (struct module_hasher): Call htab_hash_string\n-\tfor s->name and not for s.\n-\n-2018-10-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/85896\n-\t* simplify.c (simplify_min_max): Do not convert the type of the\n-\treturn expression.\n-\n-2017-10-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/54613\n-\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_FINDLOC.\n-\t(gfc_check_f): Add f6fl field.\n-\t(gfc_simplify_f): Add f6 field.\n-\t(gfc_resolve_f): Likewise.\n-\t(gfc_type_letter): Add optional logical_equas_int flag.\n-\t* check.c (intrinsic_type_check): New function.\n-\t(gfc_check_findloc): New function.\n-\t* intrinsics.c (gfc_type_letter): If logical_equals_int is\n-\tset, act accordingly.\n-\t(add_sym_5ml):  Reformat comment.\n-\t(add_sym_6fl): New function.\n-\t(add_functions): Add findloc.\n-\t(check_arglist): Add sixth argument, handle it.\n-\t(resolve_intrinsic): Likewise.\n-\t(check_specific): Handle findloc.\n-\t* intrinsic.h (gfc_check_findloc): Add prototype.\n-\t(gfc_simplify_findloc): Likewise.\n-\t(gfc_resolve_findloc): Likewise.\n-\t(MAX_INTRINSIC_ARGS): Adjust.\n-\t* iresolve.c (gfc_resolve_findloc): New function.\n-\t* simplify.c (gfc_simplify_minmaxloc): Make static.\n-\t(simplify_findloc_to_scalar): New function.\n-\t(simplify_findloc_nodim): New function.\n-\t(simplify_findloc_to_array): New function.\n-\t(gfc_simplify_findloc): New function.\n-\t(gfc_conv_intrinsic_findloc): New function.\n-\t(gfc_conv_intrinsic_function): Handle GFC_ISYM_FINDLOC.\n-\t(gfc_is_intrinsic_libcall): Likewise.\n-\n-2018-10-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/86907\n-\t* frontend-passes.c (check_locus_code): Add information that\n-\twarning about missing location information points to an\n-\tinconsisten internal state.\n-\t(check_locus_expr): Likewise.\n-\n-2018-10-25  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/87725\n-\t* openmp.c (gfc_match_omp_clauses): Parse simd, monotonic and\n-\tnonmonotonic modifiers regardless of if they have been parsed\n-\talready or if the opposite one has.  Fix up check whether\n-\tcomma after modifier should be parsed.\n-\t(resolve_omp_clauses): Diagnose schedule modifier restrictions.\n-\n-2018-10-23  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/85603\n-\t* frontend-passes.c (get_len_call): New function to generate a\n-\tcall to intrinsic LEN.\n-\t(create_var): Use this to make length expressions for variable\n-\trhs string lengths.\n-\tClean up some white space issues.\n-\n-2018-10-21  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/71880\n-\t* trans-expr.c (gfc_trans_pointer_assignment): Set the string\n-\tlength for array valued deferred length lhs.\n-\n-2018-10-18  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/87625\n-\t* trans-array.c (gfc_is_reallocatable_lhs): Detect allocatable\n-\tpolymorphic arrays.\n-\n-2018-10-18  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/58618\n-\t* trans-stmt.c (trans_associate_var): All strings that return\n-\tas pointer types can be assigned directly to the associate\n-\tname so remove 'attr' and the condition that uses it.\n-\n-2018-10-18  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/58618\n-\t* trans-decl.c (gfc_get_symbol_decl): Deal correctly with the\n-\tinitialization with NULL() of a deferred length pointer.\n-\n-2018-10-17  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/87632\n-\t* resolve.c (resolve_select_type): Use correct variable.\n-\n-2018-10-17  David Malcolm  <dmalcolm@redhat.com>\n-\n-\t* Make-lang.in (selftest-fortran): New.\n-\n-2018-10-17  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/56386\n-\tPR fortran/58906\n-\tPR fortran/77385\n-\tPR fortran/80260\n-\tPR fortran/82077\n-\t* resolve.c (resolve_variable): Fix up expressions with array\n-\tassociate names, where the parser did not detect that this is\n-\tarray and there was no array part_ref in the expression.\n-\n-2018-10-16  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/67125\n-\t* trans-array.c (gfc_array_init_size, gfc_array_allocate):\n-\tRename argument e3_is_array_constr to e3_has_nodescriptor\n-\tand update comments.\n-\t* trans-stmt.c (gfc_trans_allocate): Also fix lower bound\n-\tto 1 for nonalloc/nonpointer func results/vars besides\n-\tarray constructors.\n-\n-2018-10-16  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/87556\n-\t* trans-stmt.c (form_team, change_team, sync_team):\n-\tDon't ignore argse.pre/argse.post.\n-\n-2018-10-15  Paul Thomas  <pault@gcc.gnu.org>\n-\tTobias Burnus  <burnus@gcc.gnu.org>\n-\n-\tPR fortran/87566\n-\t* resolve.c (resolve_assoc_var): Add missing array spec for\n-\tclass associate names.\n-\t(resolve_select_type): Handle case where last typed component\n-\tof the selector has a different type to the expression.\n-\t* trans-expr.c (gfc_find_and_cut_at_last_class_ref): Replace\n-\tcall to gfc_expr_to_initialize with call to gfc_copy_expr.\n-\t(gfc_conv_class_to_class): Guard assignment to 'len' field\n-\tagainst case where zero constant is supplied.\n-\n-2018-10-12  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/87597\n-\t* expr.c (gfc_simplify_expr): Avoid simplifying\n-\tthe 'array' argument to lbound/ubound/lcobound/\n-\tucobound.\n-\n-2018-10-12  Tobias Burnus <burnus@net-b.de>\n-\n-\tPR fortran/58787\n-\t* decl.c (get_proc_name): Return with error before\n-\tcreating sym_tree.\n-\n-2018-10-11  Tobias Burnus <burnus@net-b.de>\n-\n-\tRevert:\n-\t2018-10-09  Tobias Burnus <burnus@net-b.de>\n-\n-\tPR fortran/83522\n-\t* resolve.c (resolve_ref): Reject nonscalar\n-\tsubstring references.\n-\n-2018-10-09  David Malcolm  <dmalcolm@redhat.com>\n-\n-\t* cpp.c (gfc_cpp_init_0): Update for renamings.\n-\t(cb_cpp_error): Rename to...\n-\t(cb_cpp_diagnostic): ...this, converting level and reason to\n-\tenums.\n-\n-2018-10-09  Tobias Burnus <burnus@net-b.de>\n-\n-\tPR fortran/83522\n-\t* resolve.c (resolve_ref): Reject nonscalar\n-\tsubstring references.\n-\n-2018-10-09  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/87151\n-\t* trans-array.c (gfc_get_array_span): Deal with deferred char\n-\tarray components having a TYPE_MAX_VALUE of zero.\n-\t(gfc_array_init_size): Use the hidden string length component\n-\tto build the descriptor dtype.\n-\t(gfc_array_allocate): Remove the erroneous replacement of the\n-\tcharlen backend decl with a temporary.\n-\t(gfc_conv_expr_descriptor): Use the ss_info string length in\n-\tthe case of deferred character components.\n-\t(gfc_alloc_allocatable_for_assignment): Actually compare the\n-\tstring lengths for deferred characters. Make sure that kind > 1\n-\tis handled correctly. Set the span field of the descriptor.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_len): Remove the stupid\n-\tcomment.\n-\n-\tPR fortran/80931\n-\t* trans-array.c (gfc_array_allocate): Set the span field for\n-\tvariable length character arrays.\n-\n-2018-10-08  Cesar Philippidis  <cesar@codesourcery.com>\n-\n-\t* expr.c (gfc_check_pointer_assign): Demote \"Assignment to\n-\tcontiguous pointer from non-contiguous target\" to a warning.\n-\n-2018-10-08  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/86372\n-\t* trans-stmt.c (trans_associate_var): Character associate names\n-\twith variable string length do not have to be deferred length\n-\tfor the string length to be set, if variable.\n-\n-2018-10-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/86111\n-\t* gfortran.h (enum arith): Add ARITH_WRONGCONCAT.\n-\t* arith.h (gfc_arith_error): Issue error for ARITH_WRONGCONCAT.\n-\t(gfc_arith_concat):  If the types of op1 and op2 are not\n-\tcharacter of if their kinds do not match, issue ARITH_WRONGCONCAT.\n-\n-2018-10-06  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83999\n-\t* resolve.c (resolve_fl_procedure): Include class functions in\n-\tthe test that elemental function results be scalar.\n-\n-2018-10-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/84640\n-\t* simplify.c (gfc_simplify_cshift): Extend size of hs_ex and ss_ex\n-\tby one. Set extents one past the array boundaries to zero to avoid\n-\twarning with instrumented compiler.\n-\t(gfc_simplify_eoshift): Likewise, only for ss_ex.\n-\n-2018-10-05  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/87487\n-\t* trans-decl.c (gfc_get_symbol_decl): Make sure that deferred\n-\tcharacter length pointer initializer has the right type to fix\n-\tproblem with deferred_character_24.f90 on big endian.\n-\n-2018-10-03  Jeff Law  <law@redhat.comg>\n-\n-\t* trans-types.c (get_typenode_from_name): Moved into gcc/tree.c.\n-\n-2018-10-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/65677\n-\t* trans-expr.c (gfc_trans_assignment_1): Set the 'identical'\n-\tflag in the call to gfc_check_dependency.\n-\n-2018-09-30  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/87359\n-\t* trans-array.c (gfc_is_reallocatable_lhs): Correct the problem\n-\tintroduced by r264358, which prevented components of associate\n-\tnames from being reallocated on assignment.\n-\n-2018-09-30  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/70752\n-\tPR fortran/72709\n-\t* trans-array.c (gfc_conv_scalarized_array_ref): If this is a\n-\tdeferred type and the info->descriptor is present, use the\n-\tinfo->descriptor\n-\t(gfc_conv_array_ref): Is the se expr is a descriptor type, pass\n-\tit as 'decl' rather than the symbol backend_decl.\n-\t(gfc_array_allocate): If the se string_length is a component\n-\treference, fix it and use it for the expression string length\n-\tif the latter is not a variable type. If it is a variable do\n-\tan assignment. Make use of component ref string lengths to set\n-\tthe descriptor 'span'.\n-\t(gfc_conv_expr_descriptor): For pointer assignment, do not set\n-\tthe span field if gfc_get_array_span returns zero.\n-\t* trans.c (get_array_span): If the upper bound a character type\n-\tis zero, use the descriptor span if available.\n-\n-2018-09-30  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/70149\n-\t* trans-decl.c (gfc_get_symbol_decl): A deferred character\n-\tlength pointer that is initialized needs the string length to\n-\tbe initialized as well.\n-\n-2018-09-29  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/65677\n-\t* trans-expr.c (gfc_trans_assignment_1): If there is dependency\n-\tfix the rse stringlength.\n-\n-2018-09-25  Martin Liska  <mliska@suse.cz>\n-\n-\tPR fortran/87394\n-\t* decl.c (add_hidden_procptr_result): Simplify condition\n-\tas we are in branch witch 'case1 || case2'.\n-\n-2018-09-25  Martin Liska  <mliska@suse.cz>\n-\n-\t* trans.c (remove_suffix): Remove\n-\tunused function.\n-\n-2018-09-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/87397\n-\t* gfc_conv_procedure_call: Do not add clobber on INTENT(OUT)\n-\tfor variables in an associate statement.\n-\n-2018-09-24  Bernhard Reuther-Fischer  <aldot@gcc.gnu.org>\n-\t    Cesar Philippidis  <cesar@codesourcery.com>\n-\n-\t* openmp.c (resolve_oacc_loop_blocks):\n-\n-2018-09-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/87397\n-\t* gfc_conv_procedure_call: Do not add clobber on INTENT(OUT)\n-\tfor variables having the dimension attribute.\n-\n-2018-09-23  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* trans-expr.c (gfc_caf_get_image_index): Do array index\n-\tcalculations in gfc_array_index_type.\n-\t* trans-intrinsic.c (conv_intrinsic_event_query): Likewise.\n-\t* trans-stmt.c (gfc_trans_lock_unlock): Likewise.\n-\t(gfc_trans_event_post_wait): Likewise.\n-\n-2018-09-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/87395\n-\t* gfc_conv_procedure_call: Reformat comments slightly. Do not add\n-\tclobber on INTENT(OUT) for saved variables.\n-\n-2018-09-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/41453\n-\t* trans.h (gfc_conv_expr_reference): Add optional argument\n-\tadd_clobber to prototype.\n-\t(gfc_conv_procedure_call):  Set add_clobber argument to\n-\tgfc_conv_procedure_reference to true for scalar, INTENT(OUT),\n-\tnon-pointer, non-allocatable, non-dummy variables whose type\n-\tis neither BT_CHARACTER, BT_DERIVED or BT_CLASS, but only if\n-\tthe procedure is not elemental.\n-\t* trans-expr.c (gfc_conv_procedure_reference): Add clobber\n-\tstatement before call if add_clobber is set.\n-\n-2018-09-22  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/85603\n-\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Test\n-\tthe charlen backend_decl before using the VAR_P macro.\n-\n-2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/77325\n-\t* trans-array.c (gfc_alloc_allocatable_for_assignment): If the\n-\trhs has a charlen expression, convert that and use it.\n-\t* trans-expr.c (gfc_trans_assignment_1): The rse.pre for the\n-\tassignment of deferred character array vars to a realocatable\n-\tlhs should not be added to the exterior block since vector\n-\tindices, for example, generate temporaries indexed within the\n-\tloop.\n-\n-2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/87359\n-\t* trans-stmt.c (gfc_trans_allocate): Don't deallocate alloc\n-\tcomponents if must_finalize is set for expr3.\n-\n-2018-09-21  Andrew Stubbs  <ams@codesourcery.com>\n-            Kwok Cheung Yeung  <kcy@codesourcery.com>\n-\n-\t* trans-expr.c (gfc_trans_structure_assign): Ensure that the first\n-\targument of a call to _gfortran_caf_register is of size_type_node.\n-\t* trans-intrinsic.c (conv_intrinsic_event_query): Convert computed\n-\tindex to a size_type_node type.\n-\t* trans-stmt.c (gfc_trans_event_post_wait): Likewise.\n-\n-2018-09-20  Allan Sandfeld Jensen  <allan.jensen@qt.io>\n-\n-\t* gfortranspec.c (lang_specific_driver): Handle -r like -nostdlib.\n-\n-2018-09-20  Janus Weil  <janus@gcc.gnu.org>\n-\n-\t* gfortran.h (gfc_str_startswith): New macro.\n-\t* decl.c (variable_decl, gfc_match_end): Use it.\n-\t* iresolve.c (is_trig_resolved): Ditto.\n-\t* module.c (load_omp_udrs, read_module): Ditto.\n-\t* options.c (gfc_handle_runtime_check_option): Ditto.\n-\t* primary.c (match_arg_list_function): Ditto.\n-\t* trans-decl.c (gfc_get_symbol_decl): Ditto.\n-\t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n-\t* interface.c (dtio_op): Replace strncmp by strcmp.\n-\t* resolve.c (resolve_actual_arglist, resolve_function): Ditto.\n-\t* trans-expr.c (conv_arglist_function): Ditto.\n-\t* trans-intrinsic.c (gfc_conv_ieee_arithmetic_function): Replace macro\n-\tSTARTS_WITH by gfc_str_startswith.\n-\n-2018-09-20  Cesar Philippidis  <cesar@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses): Add missing omp list_types\n-\tand reorder the switch cases to match the enum in gfortran.h.\n-\n-2018-09-19  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84109\n-\t* trans-expr.c (gfc_trans_assignment_1): The rse.pre for the\n-\tassignment of deferred character intrinsic elemental function\n-\tresults to a realocatable lhs must not be added to the exterior\n-\tblock if they are array valued but must go to the loop body.\n-\n-2018-09-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/29550\n-\t* gfortran.h (gfc_expr): Add external_blas flag.\n-\t* frontend-passes.c (matrix_case): Add case A2TB2T.\n-\t(optimize_namespace): Handle flag_external_blas by\n-\tcalling call_external_blas.\n-\t(get_array_inq_function): Add argument okind. If\n-\tit is nonzero, use it as the kind of argument\n-\tto be used.\n-\t(inline_limit_check): Remove m_case argument, add\n-\tlimit argument instead.  Remove assert about m_case.\n-\tSet the limit for inlining from the limit argument.\n-\t(matmul_lhs_realloc): Handle case A2TB2T.\n-\t(inline_matmul_assign): Handle inline limit for other cases with\n-\ttwo rank-two matrices.  Remove no-op calls to inline_limit_check.\n-\t(call_external_blas): New function.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_funcall): Do not add\n-\targument to external BLAS if external_blas is already set.\n-\n-2018-09-18  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/87239\n-\t* trans-expr.c (gfc_trans_assignment_1): The rse.pre for the\n-\tassignment of deferred character elemental function results to\n-\ta realocatable lhs must not be added to the exterior block but\n-\tmust go to the loop body.\n-\n-2018-09-18  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/87336\n-\t* trans-array.c (gfc_get_array_span): Try to get the element\n-\tlength of incomplete types. Return NULL_TREE otherwise.\n-\t(gfc_conv_expr_descriptor): Only set the 'span' field if the\n-\tabove does not return NULL_TREE. Set 'span' field if possible\n-\tfor all new descriptors.\n-\n-2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/64120\n-\t* trans-decl.c (gfc_get_symbol_decl): Flag allocatable, scalar\n-\tcharacters with a variable length expression for deferred init.\n-\t(gfc_trans_deferred_vars): Perform the assignment for these\n-\tsymbols by calling gfc_conv_string_length.\n-\n-2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/85954\n-\t* resolve.c (resolve_assoc_var): If the target expression is a\n-\tdeferred charlen dummy and the associate name shares the\n-\tcharlen, generate a new one. Make sure that new charlens are in\n-\tthe namespace list so that they get cleaned up.\n-\t* trans-array.c (gfc_is_reallocatable_lhs): Associate names are\n-\tnot reallocatable.\n-\t* trans-decl.c (gfc_get_symbol_decl): Put deferred character\n-\tlength dummy and result arrays on the deferred initialization\n-\tlist so that the variable length arrays can be correctly dealt\n-\twith.\n-\t* trans-expr.c (gfc_conv_string_length): Return if 'expr' is\n-\tNULL rather than ICEing..\n-\n-2018-09-16  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/86484\n-\tPR fortran/84543\n-\t* match.c (gfc_match_assignment): For a polymorphic assignment,\n-\tmake sure that the vtab for the rhs type is generated.\n-\n-2018-09-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/37802\n-\t* frontend-passes.c (B_ERROR): New macro for matmul bounds\n-\tchecking error messages.\n-\t(C_ERROR): Likewise.\n-\t(inline_matmul_assign): Reorganize bounds checking, use B_ERROR\n-\tand C_ERROR macros.\n-\n-2018-09-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n-\n-\t* trans-array.c (gfc_conv_array_initializer): Remove excess precision\n-\tfrom overlength string initializers.\n-\n-2018-09-12  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/87284\n-\t* trans-expr.c (gfc_trans_class_init_assign): Access to\n-\tto array elements of the dynamic type requires that the array\n-\treference be added to the class expression and not the _data\n-\tcomponent, unlike scalar expressions.\n-\n-2018-09-11  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/87172\n-\t* resolve.c (resolve_fl_derived): If a type has the 'use_assoc'\n-\tattribute, then it was declared in another module, so there should be\n-\tno error that it has not been declared.\n-\n-2018-09-11  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/87277\n-\t* expr.c (is_subref_array): Add the check of dimensionality for\n-\tclass, dummy, pointer arrays.\n-\n-2018-09-11  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/86830\n-\t* expr.c (gfc_is_simply_contiguous): Handle type-bound procedure calls\n-\twith non-polymorphic objects.\n-\n-2018-09-10  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/85395\n-\t* decl.c (match_binding_attributes): Use correct default accessibility\n-\tfor procedure pointer components.\n-\n-2018-09-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\t* simplify.c (gfc_simplify_modulo): Re-arrange code to test whether\n-\t'P' is zero and issue an error if it is.\n-\n-2018-08-31  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/86328\n-\tPR fortran/86760\n-\t* trans-array.c (gfc_conv_scalarized_array_ref): Do not fix\n-\tinfo->descriptor but pass it directly to gfc_build_array_ref.\n-\t(gfc_conv_array_ref): Likewise for se->expr.\n-\t* trans.c (gfc_build_array_ref): If 'decl' is a COMPONENT_REF\n-\tobtain the span field directly from it.\n-\n-2017-08-28  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/80477\n-\t* trans-expr.c (gfc_conv_procedure_call): Allocatable class\n-\tscalar results being passed to a derived type formal argument\n-\tare finalized if possible. Otherwise, rely on existing code for\n-\tdeallocation. Make the deallocation of allocatable result\n-\tcomponents conditional on finalization not taking place. Make\n-\tthe freeing of data components after finalization conditional\n-\ton the data being NULL.\n-\t(gfc_trans_arrayfunc_assign): Change the gcc_assert to a\n-\tcondition to return NULL_TREE.\n-\t(gfc_trans_assignment_1): If the assignment is class to class\n-\tand the rhs expression must be finalized but the assignment\n-\tis not marked as a polymorphic assignment, use the vptr copy\n-\tfunction instead of gfc_trans_scalar_assign.\n-\n-\tPR fortran/86481\n-\t* trans-expr.c (gfc_conv_expr_reference): Do not add the post\n-\tblock to the pre block if the expression is to be finalized.\n-\t* trans-stmt.c (gfc_trans_allocate): If the expr3 must be\n-\tfinalized, load the post block into a finalization block and\n-\tadd it right at the end of the allocation block.\n-\n-2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n-\n-\tPR 87091\n-\t* error.c (gfc_format_decoder): Update for conversion of\n-\tshow_caret_p to a tri-state.\n-\n-2018-08-25  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/86545\n-\t* resolve.c (resolve_transfer): Correctly determine typespec for\n-\tgeneric function calls, in order to throw a proper error.\n-\n-2018-08-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/86837\n-\t* frontend-passes.c (var_in_expr_callback): New function.\n-\t(var_in_expr): New function.\n-\t(traverse_io_block): Use var_in_expr instead of\n-\tgfc_check_dependency for checking if the variable depends on the\n-\tprevious interators.\n-\n-2018-08-23  Janne Blomqvist  <blomqvist.janne@gmail.com>\n-\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxval): Delete\n-\tHONOR_SIGNED_ZEROS checks.\n-\n-2018-08-23  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/86863\n-\t* resolve.c (resolve_typebound_call): If the TBP is not marked\n-\tas a subroutine, check the specific symbol.\n-\n-2018-08-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* gfortran.texi: Mention that asynchronous I/O does\n-\tnot work on systems which lack condition variables, such\n-\tas AIX.\n-\n-2018-08-22  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/86935\n-\t* match.c (gfc_match_associate): Improve diagnostics for the ASSOCIATE\n-\tstatement.\n-\n-2018-08-22  Andrew Benson  <abensonca@gmail.com>\n-\n-\t* module.c (load_generic_interfaces): Move call to find_symbol()\n-\tso that only occurs if actually needed.\n-\n-2018-08-22  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/86888\n-\t* decl.c (gfc_match_data_decl): Allow allocatable components of\n-\tindirectly recursive type.\n-\t* resolve.c (resolve_component): Remove two errors messages ...\n-\t(resolve_fl_derived): ... and replace them by a new one.\n-\n-2018-08-21  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax): Use\n-\tMAX_EXPR/MIN_EXPR unconditionally for real arguments.\n-\t* gfortran.texi (Compiler Characteristics): Document MAX/MIN\n-\tbehavior wrt NaN.\n-\n-2018-08-21  Nicolas Koenig  <koenigni@gcc.gnu.org>\n-\tThomas Koenig <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/25829\n-\t* gfortran.texi: Add description of asynchronous I/O.\n-\t* trans-decl.c (gfc_finish_var_decl): Treat asynchronous variables\n-\tas volatile.\n-\t* trans-io.c (gfc_build_io_library_fndecls): Rename st_wait to\n-\tst_wait_async and change argument spec from \".X\" to \".w\".\n-\t(gfc_trans_wait): Pass ID argument via reference.\n-\n-2018-08-16  Nathan Sidwell  <nathan@acm.org>\n-\n-\t* cpp.c (dump_macro): Use cpp_user_macro_p.\n-\n-2018-08-14  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/86116\n-\t* interface.c (compare_type): Remove a CLASS/TYPE check.\n-\t(compare_type_characteristics): New function that behaves like the old\n-\t'compare_type'.\n-\t(gfc_check_dummy_characteristics, gfc_check_result_characteristics):\n-\tCall 'compare_type_characteristics' instead of 'compare_type'.\n-\n-2018-08-12  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/66679\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Class array\n-\telements are returned as references to the data element. Get\n-\tthe class expression by stripping back the references. Use this\n-\tfor the element size.\n-\n-2018-08-12  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/86906\n-\t* resolve.c (resolve_fl_variable_derived): Check if the derived\n-\ttype is use associated before checking for the host association\n-\terror.\n-\n-2018-08-10  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/57160\n-\t* invoke.texi (frontend-optimize): Mention short-circuiting.\n-\t* options.c (gfc_post_options): Disable -ffrontend-optimize with -Og.\n-\t* resolve.c (resolve_operator): Warn about short-circuiting only with\n-\t-ffrontend-optimize.\n-\t* trans-expr.c (gfc_conv_expr_op): Use short-circuiting operators only\n-\twith -ffrontend-optimize. Without that flag, make sure that both\n-\toperands are evaluated.\n-\n-2018-08-08  Nathan Sidwell  <nathan@acm.org>\n-\n-\t* cpp.c (cb_file_change): Use linemap_included_from.\n-\n-2018-08-07  Cesar Philippidis  <cesar@codesourcery.com>\n-\n-\t* trans-stmt.h: Remove stale reference to trans-openacc.c.\n-\n-2018-08-04  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/45521\n-\t* interface.c (gfc_compare_interfaces): Apply additional\n-\tdistinguishability criteria of F08 to operator interfaces.\n-\n-2018-07-31  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-\n-\tRevert 'AsyncI/O patch committed'\n-\t2018-07-25  Nicolas Koenig  <koenigni@gcc.gnu.org>\n-\t\tThomas Koenig <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/25829\n-\t* gfortran.texi: Add description of asynchronous I/O.\n-\t* trans-decl.c (gfc_finish_var_decl): Treat asynchronous variables\n-\tas volatile.\n-\t* trans-io.c (gfc_build_io_library_fndecls): Rename st_wait to\n-\tst_wait_async and change argument spec from \".X\" to \".w\".\n-\t(gfc_trans_wait): Pass ID argument via reference.\n-\n-2018-07-25  Nicolas Koenig  <koenigni@gcc.gnu.org>\n-\tThomas Koenig <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/25829\n-\t* gfortran.texi: Add description of asynchronous I/O.\n-\t* trans-decl.c (gfc_finish_var_decl): Treat asynchronous variables\n-\tas volatile.\n-\t* trans-io.c (gfc_build_io_library_fndecls): Rename st_wait to\n-\tst_wait_async and change argument spec from \".X\" to \".w\".\n-\t(gfc_trans_wait): Pass ID argument via reference.\n-\n-2018-07-20  Martin Sebor  <msebor@redhat.com>\n-\n-\tPR middle-end/82063\n-\t* gfortran.h (gfc_handle_option): Change function argument\n-\tto HOST_WIDE_INT.\n-\t* options.c (gfc_handle_option): Same.\n-\n-2018-07-20  Andrew Benson  <abenson@carnegiescience.edu>\n-\n-\t* gfortran.h (gfc_symbol): Add pointer to next derived type.\n-\t(gfc_dt_list, gfc_get_dt_list): Remove.\n-\t(gfc_namespace): Replace gfc_dt_list with gfc_symbol.\n-\t* parse.c (resolve_all_program_units): Replace gfc_free_dt_list() with\n-\tsimple nullification of gfc_derived_types.\n-\t* resolve.c (resolve_global_procedure): Replace gfc_dt_list with\n-\tgfc_symbol.\n-\t(add_dt_to_dt_list): Change derived type linked list insertion to\n-\tutilize dt_next pointers in gfc_symbol.\n-\t* symbol.c (gfc_new_symbol, gfc_free_dt_list, gfc_symbol_done2)\n-\t(get_iso_c_binding_dt, generate_isocbinding_symbol): Remove\n-\tgfc_free_dt_list as gfc_dt_list is obsoleted. Change derived type\n-\tlinked list search/insertion to utilize dt_next pointers in gfc_symbol.\n-\t* trans-types.c (gfc_get_derived_type): Change derived type linked\n-\tlist search to utilize dt_next pointers in gfc_symbol.\n-\n-2018-07-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n-\n-\t* trans-intrinsic.c: (gfc_conv_intrinsic_minmax): Emit MIN_MAX_EXPR\n-\tor IFN_FMIN/FMAX sequence to calculate the min/max when possible.\n-\n-2018-07-18  Janus Weil  <janus@gcc.gnu.org>\n-\t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/85599\n-\t* dump-parse-tree.c (show_attr): Add handling of implicit_pure.\n-\t* frontend-passes.c (do_warn_function_elimination): Do not warn for\n-\tpure functions.\n-\t* gfortran.h: Add prototypes for gfc_pure_function and\n-\tgfc_implicit_pure_function.\n-\t* gfortran.texi: Add chapter on evaluation of logical expressions.\n-\t* invoke.texi: Mention that -Wfunction-elimination is implied\n-\tby -Wextra.\n-\t* lang.opt: Make -Wextra imply -Wfunction-elimination.\n-\t* resolve.c (pure_function): Rename to gfc_pure_function.\n-\t(gfc_implicit_pure_function): New function.\n-\t(check_pure_function): Use it here.\n-\t(impure_function_callback): New function.\n-\t(resolve_operator): Call it via gfc_expr_walker.\n-\n-2018-07-16  Fritz Reese  <fritzoreese@gmail.com>\n-\n-\tPR fortran/83184\n-\t* decl.c (match_old_style_init): Initialize locus of variable expr when\n-\tcreating a data variable.\n-\t(match_clist_expr): Verify array is explicit shape/size before\n-\tattempting to allocate constant array constructor.\n-\n-2018-07-16  Fritz Reese  <fritzoreese@gmail.com>\n-\n-\tPR fortran/86417\n-\t* module.c (mio_component): Set component->loc when loading from module.\n-\n-2018-07-10  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/86421\n-\t* module.c (omp_declare_simd_clauses): Add LINEAR with _REF, _VAL and\n-\t_UVAL suffixes.\n-\t(mio_omp_declare_simd): Save and restore ref, val and uval modifiers\n-\ton linear clauses.  Initialize n->where to gfc_current_locus.\n-\n-2018-07-05  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/86408\n-\t* resolve.c.c (resolve_contained_fntype): Reference to C418 is\n-\tin F2008 and not F2003.\n-\t(resolve_function): Ditto in error message. Also, exclude\n-\tdeferred character length results from the error.\n-\n-2018-07-05  Fritz Reese  <fritzoreese@gmail.com>\n-\n-\tPR fortran/83183\n-\tPR fortran/86325\n-\t* expr.c (class_allocatable, class_pointer, comp_allocatable,\n-\tcomp_pointer): New helpers.\n-\t(component_initializer): Generate EXPR_NULL for allocatable or pointer\n-\tcomponents. Do not generate initializers for components within BT_CLASS.\n-\tDo not assign to comp->initializer.\n-\t(gfc_generate_initializer): Use new helpers; move code to generate\n-\tEXPR_NULL for class allocatable components into component_initializer().\n-\n-2018-07-04  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/82009\n-\t* trans-decl.c (gfc_process_block_locals): Delete assert and set\n-\tsaved_local_decls = NULL_TREE.\n-\n-2018-07-02  Richard Biener  <rguenther@suse.de>\n-\n-\tPR lto/86321\n-\t* trans-types.c (gfc_get_array_type_bounds): Unshare TYPE_FIELDs\n-\tfor the distinct type copy.\n-\n-2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82969\n-\tPR fortran/86242\n-\t* trans-array.c (structure_alloc_comps): Do not explicitly copy\n-\tprocedure pointer components.\n-\n-2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/45305\n-\t* expr.c : Add a prototype for scalarize_intrinsic_call.\n-\t(gfc_simplify_expr): Use scalarize_intrinsic_call for elemental\n-\tintrinsic function calls.\n-\t(scalarize_intrinsic_call): Add 'init_flag' argument. Check if\n-\tthe expression or any of the actual argument expressions are\n-\tNULL. Before calling gfc_check_init_expr, check 'init_flag'.\n-\tOnly simplify the scalarized expressions if there are no errors\n-\ton the stack.\n-\t(gfc_check_init_expr): Set 'init_flag' true in the call to\n-\tscalarize_intrinsic_call.\n-\n-2018-06-28  Fritz Reese  <fritzoreese@gmail.com>\n-\n-\tPR fortran/82865\n-\t* decl.c (gfc_match_type): Refactor and check for PDT declarations.\n-\n-2018-06-28  Martin Liska  <mliska@suse.cz>\n-\n-\t* gfortranspec.c: Include opt-suggestions.h.\n-\n-2018-06-25  Fritz Reese  <fritzoreese@gmail.com>\n-\n-\tPR fortran/82972\n-\tPR fortran/83088\n-\tPR fortran/85851\n-\t* expr.c (component_initializer): Assign init expr to c->initializer.\n-\t(generate_isocbinding_initializer): New.\n-\t(gfc_generate_initializer): Call generate_isocbinding_initializer to\n-\tgenerate initializers for c_ptr and c_funptr with -finit-derived.\n-\n-2018-06-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/85983\n-\t* interface.c (check_dtio_interface1): Delete assert.\n-\n-2018-06-22  Paul Thomas  <pault@gcc.gnu.org>\n-\t    Rainer Orth  <ro@gcc.gnu.org>\n-\n-\tPR fortran/86281\n-\t* resolve.c (resolve_contained_fntype): Check for the charlen\n-\tbefore testing the length.\n-\n-2018-06-21  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/49630\n-\t* resolve.c (resolve_contained_fntype): Change standard ref.\n-\tfrom F95 to F2003: C418. Correct a spelling error in a comment.\n-\tIt is an error for an abstract interface to have an assumed\n-\tcharacter length result.\n-\t* trans-expr.c (gfc_conv_procedure_call): Likewise change the\n-\tstandard reference.\n-\n-2018-06-21  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83118\n-\t* resolve.c (resolve_ordinary_assign): Force the creation of a\n-\tvtable for assignment of non-polymorphic expressions to an\n-\tunlimited polymorphic object.\n-\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Use the\n-\tsize of the rhs type for such assignments. Set the dtype, _len\n-\tand vptrs appropriately.\n-\t* trans-expr.c (gfc_trans_assignment): Force the use of the\n-\t_copy function for these assignments.\n-\n-2018-06-20  Chung-Lin Tang <cltang@codesourcery.com>\n-\t    Thomas Schwinge <thomas@codesourcery.com>\n-\t    Cesar Philippidis  <cesar@codesourcery.com>\n-\n-\t* gfortran.h (gfc_omp_clauses): Add unsigned if_present, finalize\n-\tbitfields.\n-\t* openmp.c (enum omp_mask2): Remove OMP_CLAUSE_PRESENT_OR_*. Add\n-\tOMP_CLAUSE_{IF_PRESENT,FINALIZE}.\n-\t(gfc_match_omp_clauses): Update handling of copy, copyin, copyout,\n-\tcreate, deviceptr, present_of_*. Add support for finalize and\n-\tif_present.\n-\t(OACC_PARALLEL_CLAUSES): Remove PRESENT_OR_* clauses.\n-\t(OACC_KERNELS_CLAUSES): Likewise.\n-\t(OACC_DATA_CLAUSES): Likewise.\n-\t(OACC_DECLARE_CLAUSES): Likewise.\n-\t(OACC_UPDATE_CLAUSES): Add IF_PRESENT clause.\n-\t(OACC_ENTER_DATA_CLAUSES): Remove PRESENT_OR_* clauses.\n-\t(OACC_EXIT_DATA_CLAUSES): Add FINALIZE clause.\n-\t(gfc_match_oacc_declare): Update to OpenACC 2.5 semantics.\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Add support for IF_PRESENT\n-\tand FINALIZE.\n-\n-2018-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n-\n-\t* trans-decl.c (gfc_get_fake_result_decl): Revert latest change.\n-\n-2018-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n-\n-\t* trans-decl.c (nonlocal_dummy_decl_pset): Delete.\n-\t(nonlocal_dummy_decls): Likewise.\n-\t(gfc_nonlocal_dummy_array_decl): Likewise.\n-\t(gfc_get_symbol_decl): Do not call gfc_nonlocal_dummy_array_decl.\n-\t(gfc_get_fake_result_decl): Do not generate a new DECL if simply\n-\treusing the result of a recursive call.\n-\t(gfc_generate_function_code): Do not create, insert and destroy\n-\tnonlocal_dummy_decls.\n-\n-2018-06-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/86110\n-\t* array.c (gfc_resolve_character_array_constructor): Avoid NULL\n-\tpointer dereference.\n-\n-2018-06-13  Cesar Philippidis  <cesar@codesourcery.com>\n-\n-\tPR fortran/85703\n-\t* parse.c (decode_oacc_directive): Set gfc_matching_function\n-\tto false.\n-\t(decode_omp_directive): Likewise.\n-\n-2018-06-13  Cesar Philippidis  <cesar@codesourcery.com>\n-\n-\tPR fortran/85702\n-\t* openmp.c (gfc_match_oacc_wait): Use %C to report error location.\n-\n-2018-06-12  David Malcolm  <dmalcolm@redhat.com>\n-\n-\tPR other/69968\n-\t* misc.c (gfc_closest_fuzzy_match): Update for renaming of\n-\tlevenshtein_distance to get_edit_distance.\n-\n-2018-06-12  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/44491\n-\t* expr.c (gfc_check_assign): Select non-NULL locus.\n-\n-2018-06-11  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/45521\n-\t* interface.c (compare_ptr_alloc): New function.\n-\t(generic_correspondence): Call it.\n-\n-2018-06-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* gfortran.h (gfc_expr): Add no_bounds_check field.\n-\t* frontend-passes.c (get_array_inq_function): Set no_bounds_check\n-\ton function and function argument.\n-\t(inline_matmul_assign): Set no_bounds_check on zero expression\n-\tand on lhs of zero expression.\n-\tAlso handle A1B2 case if realloc on assigment is active.\n-\t* trans-array.c (gfc_conv_array_ref): Don't do range checking\n-\tif expr has no_bounds_check set.\n-\t(gfc_conv_expr_descriptor): Set no_bounds_check on ss if expr\n-\thas it set.\n-\t* trans-expr.c (gfc_trans_assignment_1): Set no_bounds_check\n-\ton lss and lss if the corresponding expressions have it set.\n-\n-2018-06-10  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n-\n-\tPR fortran/79854\n-\t* trans-const.c: Remove include \"diagnostic-core.h\".\n-\t(gfc_conv_constant_to_tree): Replace fatal_error with gcc_unreachable.\n-\n-2018-06-10  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/85088\n-\t* decl.c (match_attr_spec): Synchronize the DECL_* enum values with the\n-\tINTENT_* values from the enum 'sym_intent'. Call 'match_intent_spec'\n-\tand remove a TODO note.\n-\t* gfortran.h: Add a comment to sym_intent.\n-\n-2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/38351\n-\t* resolve.c (resolve_operator): Provide better error message for\n-\tderived type entity used in an binary intrinsic numeric operator.\n-\n-2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/85138\n-\tPR fortran/85996\n-\tPR fortran/86051\n-\t* decl.c (gfc_match_char_spec): Use private namespace in attempt to\n-\treduce a charlen to a constant.\n-\n-2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/78278\n-\t* data.c (gfc_assign_data_value): Re-arrange code to allow for\n-\tan error for double initialization of CHARACTER entities.\n-\n-2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/63514\n-\t* symbol.c (gfc_add_volatile): Enforce F2008:C1282 and F2018:C1588.\n-\n-2018-06-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/85631\n-\t* trans.h (gfc_ss): Add field no_bounds_check.\n-\t* trans-array.c (gfc_conv_ss_startstride): If flag_realloc_lhs and\n-\tss->no_bounds_check is set, do not use runtime checks.\n-\t* trans-expr.c (gfc_trans_assignment_1): Set lss->no_bounds_check\n-\tfor reallocatable lhs.\n-\n-2018-06-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/86059\n-\t* array.c (match_array_cons_element): NULL() cannot be in an\n-\tarray constructor.\n-\n-2018-06-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/78571\n-\t* data.c (create_character_initializer): Return early if type is\n-\tincompatible with CHARACTER.\n-\n-2018-06-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/86045\n-\t* simplify.c (gfc_simplify_mod): Re-arrange code to test whether\n-\t'P' is zero and issue an error if it is.\n-\n-2018-06-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/85641\n-\t* frontend-passes.c (is_fe_temp): Add prototype.\n-\t(realloc_string_callback): Early return for frontend-generated\n-\ttemporary.\n-\n-2018-06-05  Cesar Philippidis  <cesar@codesourcery.com>\n-\n-\tPR fortran/85701\n-\n-\t* openmp.c (gfc_resolve_oacc_declare): Error on functions and\n-\tsubroutine data clause arguments.\n-\n-2018-06-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/85981\n-\t* resolve.c (resolve_allocate_deallocate): Check errmsg is default\n-\tcharacter kind.\n-\n-2018-06-03  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/36497\n-\t* decl.c (variable_decl): Use gfc_add_type for cray pointees.\n-\n-2018-06-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/63570\n-\t* check.c (gfc_check_random_init): New function. Check arguments of\n-\tRANDOM_INIT.\n-\t* gfortran.h (GFC_ISYM_RANDOM_INIT): New enum token.\n-\t* intrinsic.c (add_subroutines): Add RANDOM_INIT to list of\n-\tsubroutines.\n-\t(gfc_check_intrinsic_standard): Introduce Fortran 2018 check.\n-\t* intrinsic.h: Add prototypes for gfc_check_random_init and\n-\tgfc_resolve_random_init\n-\t* intrinsic.texi: Document new intrinsic subprogram.\n-\t* iresolve.c (gfc_resolve_random_init): Resolve routine name.\n-\t* trans-decl.c: Declare gfor_fndecl_random_init\n-\t* trans-intrinsic.c (conv_intrinsic_random_init): New function.\n-\tTranslate call to RANDOM_INIT.\n-\t(gfc_conv_intrinsic_subroutine): Call it.\n- \t* trans.h: Declare gfor_fndecl_random_init\n-\n-2018-05-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\t* decl.c (match_data_constant):  Fortran 2018 allows pointer\n-\tinitialization in a data statement.\n-\n-2018-05-25  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/85839\n-\t* match.c (gfc_match_block_data): Call gfc_notify_std to warn about\n-\tan obsolescent feature in Fortran 2018.\n-\t(gfc_match_equivalence): Ditto.\n-\t* resolve.c (resolve_common_blocks): Ditto.\n-\t(gfc_resolve_forall): Ditto.\n-\t* symbol.c (gfc_define_st_label): Ditto.\n-\n-2018-05-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/85543\n-\t* resolve.c (update_current_proc_array_outer_dependency): Avoid NULL\n-\tpointer dereference.\n-\n-2018-05-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/85780\n-\t* resolve.c (resolve_fl_procedure): Avoid NULL dereference.\n-\n-2018-05-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/85779\n-\t* decl.c (gfc_match_derived_decl): Fix NULL point dereference.\n-\n-2018-05-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/85895\n-\t* resolve.c (resolve_sync): Resolve expression before checking for\n-\tan error.\n-\n-2018-05-22  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/85841\n-\t* libgfortran.h: Remove the macros GFC_STD_F2008_TS and\n-\tGFC_STD_OPT_F08TS.\n-\t* error.c (notify_std_msg): Remove GFC_STD_F2008_TS.\n-\t* options.c (set_default_std_flags): Ditto.\n-\t(gfc_handle_option): Make -std=f2008ts an alias for -std=f2018.\n-\t* array.c (gfc_match_array_spec): Replace GFC_STD_F2008_TS by\n-\tGFC_STD_F2018.\n-\t* check.c (gfc_check_atomic, gfc_check_event_query,\n-\tgfc_check_c_f_pointer, gfc_check_c_f_procpointer, gfc_check_c_funloc,\n-\tgfc_check_c_loc, gfc_check_num_images, gfc_check_this_image): Ditto.\n-\t* decl.c (gfc_verify_c_interop_param, gfc_match_decl_type_spec): Ditto.\n-\t* intrinsic.c (add_functions, add_subroutines,\n-\tgfc_check_intrinsic_standard): Ditto.\n-\t* iso-c-binding.def: Ditto.\n-\t* iso-fortran-env.def: Ditto.\n-\t* match.c (gfc_match_event_post, gfc_match_event_wait,\n-\tgfc_match_fail_image, gfc_match_form_team, gfc_match_change_team,\n-\tgfc_match_end_team, gfc_match_sync_team): Ditto.\n-\t* gfortran.texi: Remove mention of -std=f2008ts.\n-\tMove TSs into F2018 section.\n-\t* invoke.texi: Update documentation of -std=f2008ts.\n-\n-2018-05-21  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/85841\n-\t* libgfortran.h: New macros GFC_STD_OPT_*.\n-\t* error.c (notify_std_msg): New function.\n-\t(gfc_notify_std): Adjust such that it can handle combinations of\n-\tGFC_STD_* flags in the 'std' argument, not just a single one.\n-\t* match.c (match_arithmetic_if, gfc_match_if): Reject arithmetic if\n-\tin Fortran 2018.\n-\t(gfc_match_stopcode): Use GFC_STD_OPT_* macros.\n-\t* options.c (set_default_std_flags): Warn for F2018 deleted features\n-\tby default.\n-\t(gfc_handle_option): F2018 deleted features are allowed in earlier\n-\tstandards.\n-\t* symbol.c (gfc_define_st_label, gfc_reference_st_label): Reject\n-\tnonblock do constructs in Fortran 2018.\n-\n-2018-05-20  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/80657\n-\t* resolve.c (flag_fn_result_spec): Use the 'sym' argument to\n-\ttest for self refs to the function result in the character len\n-\texpression. If a self reference is found, emit an error and\n-\treturn true.\n-\t(resolve_fntype): Use the function symbol in the calls to the\n-\tabove.\n-\n-2018-05-20  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/49636\n-\t* trans-array.c (gfc_get_array_span): Renamed from\n-\t'get_array_span'.\n-\t(gfc_conv_expr_descriptor): Change references to above.\n-\t* trans-array.h : Add prototype for 'gfc_get_array_span'.\n-\t* trans-intrinsic.c (gfc_conv_associated): Add pre and post\n-\tblocks for 'arg1'.\n-\t* trans-stmt.c (trans_associate_var): If the associate name is\n-\ta subref array pointer, use gfc_get_array_span for the span.\n-\n-2018-05-20  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82275\n-\t* match.c (gfc_match_type_spec): Go through the array ref and\n-\tdecrement 'rank' for every dimension that is an element.\n-\n-2018-05-19  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/82923\n-\tPR fortran/66694\n-\tPR fortran/82617\n-\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Set the\n-\tcharlen backend_decl of the rhs expr to ss->info->string_length\n-\tso that the value in the current scope is used.\n-\n-2018-05-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/63529\n-\t* gfortran.texi: Clarify documentation for Cray pointer and\n-\tassumed-sized array.\n-\n-2018-05-13  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/85742\n-\t* trans-types.c (gfc_get_dtype_rank_type): Reorder evaluation\n-\tof 'size'. If the element type is a pointer use the size of the\n-\tTREE_TYPE of the type, unless it is VOID_TYPE. In this latter\n-\tcase, set the size to zero.\n-\n-2018-05-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\t* gfortran.h: Remove prototype.\n-\t* symbol.c (gfc_new_undo_checkpoint): Remove unused function.\n-\n-2018-05-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/85542\n-\t* expr.c (check_inquiry): Avoid NULL pointer dereference.\n-\n-2018-05-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/85687\n-\t* check.c (gfc_check_rank): Check that the argument is a data object.\n-\n-2018-05-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/85521\n-\t* array.c (gfc_resolve_character_array_constructor): Substrings\n-\twith upper bound smaller than lower bound are zero length strings.\n-\n-2018-05-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/70870\n-\t* data.c (gfc_assign_data_value): Check that a data object does\n-\tnot also have default initialization.\n-\n-2018-05-10  Marek Polacek  <polacek@redhat.com>\n-\n-\tPR fortran/85735\n-\t* options.c (gfc_post_options): Set main_input_filename.\n-\n-2018-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/54613\n-\t* intrinsic.texi: Document BACK for MINLOC and MAXLOC.\n-\n-2018-05-10  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/68846\n-\tPR fortran/70864\n-\t* resolve.c (get_temp_from_expr): The temporary must not have\n-\tdummy or intent attributes.\n-\n-2018-05-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/54613\n-\t* check.c (gfc_check_minmaxloc): Remove error for BACK not being\n-\timplemented.  Use gfc_logical_4_kind for BACK.\n-\t* simplify.c (min_max_choose): Add optional argument back_val.\n-\tHandle it.\n-\t(simplify_minmaxloc_to_scalar): Add argument back_val. Pass\n-\tback_val to min_max_choose.\n-\t(simplify_minmaxloc_to_nodim): Likewise.\n-\t(simplify_minmaxloc_to_array): Likewise.\n-\t(gfc_simplify_minmaxloc): Add argument back, handle it.\n-\tPass back_val to specific simplification functions.\n-\t(gfc_simplify_minloc): Remove ATTRIBUTE_UNUSED from argument back,\n-\tpass it on to gfc_simplify_minmaxloc.\n-\t(gfc_simplify_maxloc): Likewise.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxloc): Adjust\n-\tcomment. If BACK is true, use greater or equal (or lesser or\n-\tequal) insteal of greater (or lesser). Mark the condition of\n-\thaving found a value which exceeds the limit as unlikely.\n-\n-2018-05-07  Jeff Law  <law@redhat.comg>\n-\n-\t* scanner.c (preprocessor_line): Call linemap_add after a line\n-\tdirective that changes the current filename.\n-\n-2018-05-06  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/85507\n-\t* dependency.c (gfc_dep_resolver): Revert looking at coarray dimension\n-\tintroduced by r259385.\n-\t* trans-intrinsic.c (conv_caf_send): Always report a dependency for\n-\tsame variables in coarray assignments.\n-\n-2018-05-02  Tom de Vries  <tom@codesourcery.com>\n-\n-\tPR libgomp/82428\n-\t* f95-lang.c (DEF_GOACC_BUILTIN_ONLY): Define.\n-\n-2018-04-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/85520\n-\t* decl.c (gfc_match_char_spec): Check for negative length and set to 0.\n-\n-2018-04-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/81773\n-\tPR fortran/83606\n-\t* dependency.c (gfc_dep_resolver): Coarray indexes are to be ignored\n-\tduring dependency computation.  They define no data dependency.\n-\t* trans-array.c (conv_array_index_offset): The stride can not be set\n-\there, prevent fail.\n-\t* trans-intrinsic.c (conv_caf_send): Add creation of temporary array\n-\tfor caf_get's result and copying to the array with vectorial\n-\tindexing.\n-\n-2018-04-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/85387\n-\t* frontend-passes.c (traverse_io_block): Check for start, end or\n-\tstride being defined by an outer implied DO loop.\n-\n-2018-04-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/83064\n-\tPR testsuite/85346\n-\t* trans-stmt.c (gfc_trans_forall_loop): Use annot_expr_ivdep_kind\n-\tfor annotation and remove dependence on -ftree-parallelize-loops.\n-\n-2018-04-10  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/85313\n-\t* openmp.c (resolve_omp_do): Remove bogus if (j < i) break;.\n-\t(resolve_oacc_nested_loops): Likewise.  Formatting fix.\n-\n-2018-04-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/83064\n-\t* trans-stmt.c (gfc_trans_forall_loop): Remove annotation for\n-\tparallell processing of DO CONCURRENT -ftree-parallelize-loops\n-\tis set.\n-\n-2018-04-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/51260\n-\t* resolve.c (resolve_variable): Simplify cases where access to a\n-\tparameter array results in a single constant.\n-\n-2018-04-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/85102\n-\t* decl.c (variable_decl): If upper or lower bounds simplify\n-\tto a constant, use that.\n-\n-2018-03-30  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84931\n-\t* simplify.c (gfc_convert_constant): Handle case of array\n-\tconstructors within an array that has no iterator and improve\n-\tthe conciseness of this section of code.\n-\n-2017-03-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/85111\n-\t* array.c (gfc_resolve_character_array_constructor): Early\n-\texit for zero-size arrays.\n-\t* simplify.c (simplify_transformation_to_array): Exit early\n-\tif the result size is zero.\n-\t(simplify_minmaxloc_to_array): Likewise.\n-\n-2018-03-28  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/69497\n-\t* symbol.c (gfc_symbol_done_2): Start freeing namespaces\n-\tfrom the root.\n-\t(gfc_free_namespace): Restore assert (revert r258839).\n-\n-2018-03-28  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* gfortran.h (gfc_dt): Rename default_exp field to dec_ext.\n-\t* ioparm.def (IOPARM_dt_default_exp): Rename to ...\n-\t(IOPARM_dt_dec_ext): ... this.\n-\t* trans-io.c (build_dt): Adjust for default_exp renaming to\n-\tdec_ext and IOPARM_dt_default_exp renaming to IOPARM_dt_dec_ext.\n-\t* io.c (match_io): Likewise.\n-\n-2018-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/85084\n-\t* frontend-passes.c (gfc_run_passes): Do not run front-end\n-\toptimizations if a previous error occurred.\n-\n-2018-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\tHarald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/85083\n-\t* primary.c (gfc_convert_to_structure_constructor): Check\n-\tconformance of argument types in structure constructor.\n-\n-2018-03-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/66709\n-\t* io.c: Include constructor.h.\n-\t(resolve_tag_format): For a constant character array, concatenate\n-\tinto a single character expression.\n-\n-2018-03-25  Seth Johnson <johnsonsr@ornl.gov>\n-\tDominique d'Humieres  <dominiq@gcc.gnu.org>\n-\n-\tPR fortran/84924\n-\t* check.c (gfc_check_c_f_pointer): Allow scalar noninteroperable\n-\tscalar derived type with -std=f2003 and -std=f2008.\n-\n-2018-03-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\t    Dominique d'Humieres  <dominiq@gcc.gnu.org>\n-\n-\tPR fortran/69497\n-\t* symbol.c (gfc_free_namespace): Delete the assert and only if\n-\trefs count is equals zero, free the namespace. Otherwise,\n-\tsomething is halfway and other errors will resound.\n-\n-2018-03-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/70068\n-\t* expr.c (find_substring_ref): Change types of start, end\n-\tand length variables to gfc_charlen_t. Set length to zero\n-\tfor empty substring.\n-\n-2018-03-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/42651\n-\t* decl.c (check_function_name): Improved error message\n-\t(gfc_match_volatile, gfc_match_asynchronous) Use check_function_name.\n-\n-2018-03-22  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/84922\n-\t* decl.c (get_proc_name): If the MODULE prefix appears in interface\n-\tbody, then it must appear on the contained subroutine or function.\n-\tWhile here, fix nearby mis-indented code.\n-\n-2018-03-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\tHarald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/84957\n-\t* trans-types.c (gfc_sym_type): Do not dereference NULL pointer.\n-\n-2018-03-21  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/84615\n-\t* trans-expr.c (gfc_conv_procedure_call): Convert charlen to\n-\tgfc_charlen_type_node when calling procedure.\n-\n-2018-03-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/85001\n-\t* interface.c (symbol_rank): Remove bogus null pointer check that\n-\tcrept in when translating a ternary operator into an if-else\n-\tconstructor.\n-\n-2018-03-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/84931\n-\t* simplify.c (gfc_convert_constant): Correctly handle iterators\n-\tfor type conversion.\n-\n-2018-03-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/77414\n-\t* decl.c (get_proc_name):  Check for a subroutine re-defined in\n-\tthe contain portion of a subroutine.  Change language of existing\n-\terror message to better describe the issue. While here fix whitespace\n-\tissues.\n-\n-2018-03-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/65453\n-\t* decl.c (get_proc_name): Catch clash between a procedure statement\n-\tand a contained subprogram\n-\n-2018-03-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/69395\n-\t* decl.c (merge_array_spec): Correct the error condition.\n-\n-2018-03-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/78741\n-\t* decl.c (get_proc_name):  Check for clash of entry name with\n-\tsubroutine name.\n-\n-2018-03-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/69395\n-\t* decl.c (merge_array_spec): Limit the merging to maximum allowed\n-\tdimensions, and issue error message if limit is exceeded.\n-\n-2018-03-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\t* check.c (gfc_check_kill_sub):  Remove check for INTEGER(4) or (8).\n-\t* intrinsic.c (add_functions): Remove reference to gfc_resolve_kill.\n-\t(add_subroutines): Remove reference to gfc_resolve_kill_sub.\n-\t* intrinsic.texi: Update documentation.\n-\t* iresolve.c (gfc_resolve_kill, gfc_resolve_kill_sub): Remove.\n-\t* trans-decl.c (gfc_build_intrinsic_function_decls):  Add\n-\tgfor_fndecl_kill and gfor_fndecl_kill_sub\n-\t* trans-intrinsic.c (conv_intrinsic_kill, conv_intrinsic_kill_sub): new\n-\tfunctions.\n-\t(gfc_conv_intrinsic_function): Use conv_intrinsic_kill.\n-\t(gfc_conv_intrinsic_subroutine): Use conv_intrinsic_kill_sub.\n-\t* trans.h: Declare gfor_fndecl_kill and gfor_fndecl_kill_sub.\n-\n-2018-03-11  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84546\n-\t* trans-array.c (structure_alloc_comps): Make sure that the\n-\tvptr is copied and that the unlimited polymorphic _len is used\n-\tto compute the size to be allocated.\n-\t* trans-expr.c (gfc_get_class_array_ref): If unlimited, use the\n-\tunlimited polymorphic _len for the offset to the element.\n-\t(gfc_copy_class_to_class): Set the new 'unlimited' argument.\n-\t* trans.h : Add the boolean 'unlimited' to the prototype.\n-\n-2018-03-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/83939\n-\t* resolve.c (resolve_fl_procedure): Enforce F2018:C15100.\n-\n-2018-03-11  Steven G. Kargl  <kargls@gcc.gnu.org>\n-\n-\t* check.c (gfc_check_kill):  Check pid and sig are scalar.\n-\t(gfc_check_kill_sub): Restrict kind to 4 and 8.\n-\t* intrinsic.c (add_function): Sort keyword list.  Add pid and sig\n-\tkeywords for KILL.  Remove redundant *back=\"back\" in favor of the\n-\toriginal *bck=\"back\".\n-\t(add_subroutines): Sort keyword list.  Add pid and sig keywords\n-\tfor KILL.\n-\t* intrinsic.texi: Fix documentation to consistently use pid and sig.\n-\t* iresolve.c (gfc_resolve_kill): Kind can only be 4 or 8.  Choose the\n-\tcorrect function.\n-\t(gfc_resolve_rename_sub): Add comment.\n-\n-2018-03-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/66128\n-\t* simplify.c (simplify_transformation): Return default result for\n-\tempty array argument.\n-\t(gfc_simplify_all): Remove special-case handling for zerosize.\n-\t(gfc_simplify_any): Likewise.\n-\t(gfc_simplify_count): Likewise.\n-\t(gfc_simplify_iall): Likewise.\n-\t(gfc_simplify_iany): Likewise.\n-\t(gfc_simplify_iparity): Likewise.\n-\t(gfc_simplify_minval): Likewise.\n-\t(gfc_simplify_maxval): Likewise.\n-\t(gfc_simplify_norm2): Likewise.\n-\t(gfc_simplify_product): Likewise.\n-\t(gfc_simplify_sum): Likewise.\n-\n-2018-03-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/84734\n-\t* arith.c (check_result, eval_intrinsic):  If result overflows, pass\n-\tthe expression up the chain instead of a NULL pointer.\n-\n-2018-03-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/64124\n-\tPR fortran/70409\n-\t* decl.c (gfc_match_char_spec): Try to reduce a charlen to a constant.\n-\n-2017-03-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/84697\n-\tPR fortran/66128\n-\t* expr.c (simplify_parameter_variable): If p is a size zero array\n-\tand not an ARRAY_EXPR insert an empty array constructor and\n-\treturn.\n-\t* gfortran.h: Add prototype for gfc_is_size_zero_array.\n-\t* simplify.c (is_size_zero_array): Make non-static and rename into\n-\t(gfc_is_size_zero_array):  Check for parameter arrays of zero\n-\tsize by comparing shape and absence of constructor.\n-\t(gfc_simplify_all): Use gfc_is_size_zero_array instead of\n-\tis_size_zero_array.\n-\t(gfc_simplify_count): Likewise.\n-\t(gfc_simplify_iall): Likewise.\n-\t(gfc_simplify_iany): Likewise.\n-\t(gfc_simplify_iparity): Likewise.\n-\t(gfc_simplify_minval): Likewise.\n-\t(gfc_simplify_maxval): Likewise.\n-\t(gfc_simplify_product): Likewise.\n-\t(gfc_simplify_sum): Likewise.\n-\n-2018-03-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/56667\n-\t* primary.c (match_sym_complex_part): Give the matcher for an implied\n-\tdo-loop a chance to run.\n-\n-2018-03-03  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/71085\n-\t* trans-expr.c (gfc_apply_interface_mapping_to_expr): Do not\n-\tdereference NULL pointer.\n-\n-2018-03-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/66128\n-\t* simplify.c (is_size_zero_array): New function to check for size\n-\tzero array.\n-\t(gfc_simplify_all, gfc_simplify_any, gfc_simplify_count,\n-\t gfc_simplify_iall, gfc_simplify_iany, gfc_simplify_iparity,\n-\t gfc_simplify_minval, gfc_simplify_maxval, gfc_simplify_norm2,\n-\t gfc_simplify_product, gfc_simplify_sum): Use it, and implement\n-\trequirements from F2018.\n-\n-2018-03-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/51434\n-\t* simplify.c (gfc_simplify_transfer): Resolve mold.\n-\n-2018-03-03  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/80965\n-\t* resolve.c (build_loc_call): Change symtree name from 'loc' to\n-\t'_loc'.\n-\n-2018-03-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84219\n-\t* target-memory.c (gfc_interpret_derived): Assert that BT_VOID\n-\tcomponents are caf tokens.\n-\t(gfc_target_interpret_expr): Treat BT_VOID expressions as\n-\tintegers.\n-\n-2018-03-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84538\n-\t* class.c (class_array_ref_detected): Remove the condition that\n-\tthere be no reference after the array reference.\n-\t(find_intrinsic_vtab): Remove excess whitespace.\n-\t* trans-array.c (gfc_conv_scalarized_array_ref): Rename 'tmp'\n-\tas 'base and call build_class_array_ref earlier.\n-\n-2018-02-28  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83901\n-\t* trans-stmt.c (trans_associate_var): Make sure that the se\n-\texpression is a pointer type before converting it to the symbol\n-\tbackend_decl type.\n-\n-2018-02-25  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/83633\n-\t* decl.c (variable_decl): Check that an explicit-shape-array with\n-\tnonconstant bounds is allowed.\n-\n-2018-02-25  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84523\n-\t* trans-intrinsic.c (gfc_conv_allocated): If the argument se\n-\thas a pre block, add it to the expression pre block.\n-\n-2018-02-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/78238\n-\t* gfortran.h (gfc_integer_4_kind): Define.\n-\t* resolve.c (resolve_select_type): Make sure that the\n-\tkind of c->high is gfc_integer_4_kind.\n-\n-2018-02-24  Steven G. Kargl <kargl@gcc.gnu.org>\n-\n-\tPR fortran/30792\n-\t* decl.c (gfc_match_data): Check for invalid substring in\n-\tdata-implied-do\n-\n-2018-02-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\t* intrinsic.texi: Arguments to MATMUL cannot both be rank one.\n-\n-2018-02-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/84511\n-\t* trans-io.c (transfer_expr): Deal with C_LOC in transfer statement.\n-\n-2018-02-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/84346\n-\t* interface.c (compare_actual_formal): Issue error if keyword is\n-\tused in a statement function.\n-\n-2018-02-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/84506\n-\t* trans-io.c (set_parameter_value_inquire): Adjust range check of\n-\tnegative unit values for kind=8 units to the kind=4 negative limit.\n-\n-2018-02-23  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83149\n-\t* trans-types.c (gfc_sym_type): Test sym->ns->proc_name before\n-\taccessing its components.\n-\n-2018-02-23  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83149\n-\t* trans-decl.c (gfc_finish_var_decl): Test sym->ns->proc_name\n-\tbefore accessing its components.\n-\n-2018-02-23  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83148\n-\t* trans-const.c : Clean up some whitespace issues.\n-\t* trans-expr.c (gfc_conv_initializer): If an iso_c_binding\n-\tderived type has a kind value of zero, set it to the default\n-\tinteger kind.\n-\n-2018-02-23  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/84519\n-\t* trans-decl.c (gfc_build_builtin_function_decls): Add bool\n-\targument to stop and error stop decls.\n-\t* trans-stmt.c (gfc_trans_stop): Add false value to argument\n-\tlists.\n-\n-2018-02-22  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR 78534\n-\tPR 84509\n-\t* trans-decl.c (gfc_build_builtin_function_decls): Pass\n-\tgfc_int8_type node to pause_numeric, size_type_node to\n-\tpause_string.\n-\t* trans-stmt.c (gfc_trans_pause): Likewise.\n-\n-2018-02-22  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* gfortran.texi: Update Coarray API description.\n-\t* trans-decl.c (gfc_build_builtin_function_decls): Use size_t for\n-\tcharacter lengths, int for exit codes.\n-\t(generate_coarray_sym_init): Use size_t for character length.\n-\t* trans-intrinsic.c (conv_co_collective): Likewise.\n-\t* trans-stmt.c (gfc_trans_lock_unlock): Likewise.\n-\t(gfc_trans_event_post_wait): Likewise.\n-\t(gfc_trans_sync): Likewise.\n-\t(gfc_trans_stop): Use size_t for character lengths, int for exit\n-\tcodes.\n-\n-2018-02-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/48890\n-\tPR fortran/83823\n-\t* primary.c (gfc_convert_to_structure_constructor):\n-\tFor a constant string constructor, make sure the length\n-\tis correct.\n-\n-2018-02-19  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83344\n-\tPR fortran/83975\n-\t* resolve.c (resolve_assoc_var): Rearrange the logic for the\n-\tdetermination of the character length of associate names. If\n-\tthe associate name is missing a length expression or the length\n-\texpression is not a constant and the target is not a variable,\n-\tmake the associate name allocatable and deferred length.\n-\t* trans-decl.c (gfc_get_symbol_decl): Null the character length\n-\tbackend_decl for deferred length associate names that are not\n-\tvariables. Set 'length' to gfc_index_zero_node for character\n-\tassociate names, whose character length is a PARM_DECL.\n-\n-2018-02-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/35339\n-\t* frontend-passes.c (traverse_io_block): Remove workaround for\n-\tPR 80945.\n-\n-2018-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\t* gfortran.texi: Document additional src/dst_type.  Fix some typos.\n-\t* trans-decl.c (gfc_build_builtin_function_decls): Declare the new\n-\targument of _caf_*_by_ref () with * e { get, send, sendget }.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get): Add the type of the\n-\tdata referenced when generating a call to caf_get_by_ref ().\n-\t(conv_caf_send): Same but for caf_send_by_ref () and\n-\tcaf_sendget_by_ref ().\n-\n-2018-02-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/84389\n-\t* io.c (check_format): Allow FMT_COLON.\n-\n-2018-02-18  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/80945\n-\t* trans-array.c (gfc_conv_expr_descriptor): Set parmtype from\n-\tthe typenode in the case of deferred length characters.\n-\n-2018-02-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/84270\n-\t* frontend-passes (scalarized_expr):  If the expression\n-\tis an assumed size array, leave in the last reference\n-\tand pass AR_SECTION instead of AR_FULL to gfc_resolve\n-\tin order to avoid an error.\n-\n-2018-02-17  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84115\n-\t* resolve.c (resolve_assoc_var): If a non-constant target expr.\n-\thas no string length expression, make the associate variable\n-\tinto a deferred length, allocatable symbol.\n-\t* trans-decl.c (gfc_is_reallocatable_lhs): Add and use a ptr to\n-\tthe symbol.\n-\t* trans-stmt.c (trans_associate_var): Null and free scalar\n-\tassociate names that are allocatable. After assignment, remove\n-\tthe allocatable attribute to prevent reallocation.\n-\n-2018-02-16  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/84418\n-\t* trans-openmp.c (gfc_trans_omp_clauses): For OMP_CLAUSE_LINEAR_REF\n-\tkind set OMP_CLAUSE_LINEAR_STEP to TYPE_SIZE_UNIT times last_step.\n-\n-2018-02-16  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n-\n-\tPR fortran/84354\n-\t* decl.c (gfc_get_pdt_instance): Replace '%qs' with %qs.\n-\n-2018-02-15  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/84409\n-\t* interface.c (check_dtio_arg_TKR_intent): Add a check for character\n-\tlength.\n-\n-2018-02-14  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/84385\n-\t* match.c (gfc_match_select_type): Fix check for selector in\n-\tSELECT TYPE statement.\n-\n-2018-02-13  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/84313\n-\t* symbol.c (check_conflict): Reject procedure pointers in common blocks.\n-\n-2018-02-13  Alastair McKinstry  <alastair.mckinstry@sceal.ie>\n-\t    Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* module.c (dump_module): Use lbasename to ensure that module\n-\tfiles are reproducible.\n-\n-2018-02-12  Janus Weil  <janus@gcc.gnu.org>\n-\n-\tPR fortran/84273\n-\t* resolve.c (resolve_component): Fix checks of passed argument in\n-\tprocedure-pointer components.\n-\n-2018-02-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/35299\n-\t* resolve.c (resolve_formal_arglist): Update error message.\n-\n-2018-02-11  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\t* gfortran.texi: Fix typos in documentation of caf_register ().\n-\t* trans-array.c (structure_alloc_comps): Only register a component of\n-\ta derived typed corray, not of an ultimate component coarray.\n-\n-2018-02-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/54223\n-\tPR fortran/84276\n-\t* interface.c (compare_actual_formal): Add in_statement_function\n-\tbool parameter.  Skip check of INTENT attribute for statement\n-\tfunctions.  Arguments to a statement function cannot be optional,\n-\tissue error for missing argument.\n-\t(gfc_procedure_use, gfc_ppc_use, gfc_arglist_matches_symbol): Use\n-\t in_statement_function.\n-\n-2018-02-11  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84074\n-\t* trans-expr.c (gfc_conv_derived_to_class): Set the use_offset\n-\tflag. If the is a vector subscript or the expression is not a\n-\tvariable, make the descriptor one-based.\n-\n-2018-02-10  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84141\n-\tPR fortran/84155\n-\t* trans-array.c (gfc_array_init_size): Revert the change made\n-\tin revision 257356 setting the dtype.\n-\t* trans-types.c (gfc_get_dtype): Do not use the cached dtype.\n-\tCall gfc_get_dtype_rank_type every time.\n-\n-\tPR fortran/56691\n-\t* trans-array.c (gfc_conv_expr_descriptor): If the source array\n-\tis a descriptor type, use its offset, removing the condition\n-\tthat is be a class expression.\n-\n-2018-02-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/82994\n-\t* match.c (gfc_match_deallocate): Check for NULL pointer.\n-\n-2018-02-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/68560\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_shape): New function.\n-\t(gfc_conv_intrinsic_function): Call it.\n-\n-2018-02-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/82049\n-\t* match.c (gfc_match_type_spec): If the charlen is non-NULL, then\n-\ttry to resolve it.  While here return early if possible.\n-\n-2018-02-04  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84115\n-\t* trans-decl.c (gfc_get_symbol_decl): Do not finish the decl of\n-\t'length' if the symbol charlen backend_decl is an indirect ref.\n-\n-2018-02-03  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84141\n-\tPR fortran/84155\n-\t* trans-array.c (gfc_array_init_size): Instead of gfc_get_dtype\n-\tuse gfc_get_dtype_rank_type.\n-\n-2018-02-01  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR 83975\n-\tPR 83344\n-\t* resolve.c (resolve_assoc_var): Generate an error if\n-\ttarget length unknown.\n-\n-2018-02-01  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/83705\n-\t* simplify.c (gfc_simplify_repeat): Increase limit for deferring\n-\tto runtime, print a warning message.\n-\n-2018-01-31  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/84116\n-\t* openmp.c (gfc_match_omp_clauses): If all the linear\n-\tgfc_match_omp_variable_list calls failed, don't gfc_free_omp_namelist\n-\tnor set *head = NULL.  Formatting fixes.\n-\n-2018-01-31  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/84088\n-\t* trans-expr.c (gfc_conv_procedure_call): If the parm expr is\n-\tan address expression passed to an assumed rank dummy, convert\n-\tto an indirect reference.\n-\n-2018-01-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* dump-parse-tree.c (write_proc): Use sym_name (which may\n-\tbe sym->binding_label) instead of sym->name.\n-\n-2018-01-31  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* trans-const.c (gfc_conv_string_init): Use gfc_charlen_t instead\n-\tof int for slen.\n-\n-2018-01-31  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/78534\n-\t* trans-expr.c (fill_with_spaces): Use memset instead of\n-\tgenerating loop.\n-\t(gfc_trans_string_copy): Improve opportunity to use builtins with\n-\tconstant lengths.\n-\n-2018-01-30  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR debug/84131\n-\t* trans-array.c (gfc_get_descriptor_offsets_for_info): Set *data_off\n-\tto DATA_FIELD's offset rather than OFFSET_FIELD's offset.\n-\n-2018-01-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/84134\n-\t* array.c (gfc_ref_dimen_size): Whitespace fixes.  If stride is\n-\tzero, return false.\n-\n-2018-01-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/84133\n-\t* frontend-passes (matmul_to_var_expr): Return early if\n-\tin association list.\n-\t(inline_matmul_assign): Likewise.\n-\n-2017-01-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/84073\n-\t* resolve.c (resolve_component): Ensure BIND(C) character\n-\tcomponents have length one.\n-\t(resolve_symbol): Likewise for variables.\n-\n-2018-01-27  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/84065\n-\t* decl.c (add_init_expr_to_sym): Ignore initializers for too large\n-\tlengths.\n-\n-2018-01-26  Damian Rouson  <damian@sourceryinstitute.org>\n-\t    Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n-\t    Soren Rasmussen  <s.c.rasmussen@gmail.com>\n-\n-\tPartial support for Fortran 2018 teams features.\n-\n-\t* array.c (gfc_match_array_ref): add team attribute in coarray\n-\ttransfers.\n-\t* check.c (gfc_check_get_team, gfc_check_team_number): add new\n-\tfunctions for get_team and team_number.\n-\t* dump-parse-tree.c (show_code_node): add new statements: form team,\n-\tchange team, end team, and sync team.\n-\t* expr.c (gfc_find_team_co): add new function.\n-\t* gfortran.h: add new statements.\n-\t* intrinsic.c (add_functions): add get_team and team_number functions.\n-\t* intrinsic.h: add get_team and team_number prototypes for check,\n-\tsimplify, and resolve.\n-\t* iresolve.c (gfc_resolve_get_team, gfc_resolve_team_number): add new\n-\tfunctions.\n-\t* iso-fortran-env.def: add the team_type derived type.\n-\t* match.c (gfc_match_if, gfc_match_form_team, gfc_match_team_number)\n-\t(gfc_match_end_team, gfc_match_sync_team, gfc_match_change_team):\n-\tadd change team, end team, form team, sync team match and functions.\n-\t* match.h: add new prototypes for change team, end team, form team,\n-\tand sync team.\n-\t* parse.c (decode_statement): add cases for change team, end team,\n-\tform team, and sync team.\n-\t* resolve.c: add cases for exec form team, change team, end team, and\n-\tsync team.\n-\t* simplify.c (gfc_simplify_get_team): add new function for get team.\n-\t* st.c (gfc_free_statement): add cases exec for change team, end team,\n-\tform team, sync team.\n-\t* trans-decl.c (gfor_fndecl_caf_form_team)\n-\t(gfor_fndecl_caf_change_team, gfor_fndecl_caf_end_team)\n-\t(gfor_fndecl_caf_sync_team, gfor_fndecl_caf_get_team)\n-\t(gfor_fndecl_caf_team_number): add functions and definitions.\n-\t* trans-intrinsic.c (conv_caf_send, conv_intrinsic_team_number): add\n-\tnew function and team_type argument support.\n-\t* trans-stmt.c (gfc_trans_form_team, gfc_trans_change_team)\n-\t(gfc_trans_end_team, gfc_trans_sync_team): add new functions.\n-\t* trans-stmt.h: add new prototypes.\n-\t* trans-types.c (gfc_get_derived_type): check condition for team_type.\n-\t* trans.c (trans_code): new exec cases for form team, change team, end\n-\tteam, and sync team.\n-\t* trans.h: add new prototypes.\n-\n-2018-01-26  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/83998\n-\t* simplify.c (compute_dot_product):  Initialize result to INTEGER(1) 0\n-\tor .false.  The summation does the correct type conversion.\n-\t(gfc_simplify_dot_product): Special case zero-sized arrays.\n-\n-2018-25-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/37577\n-\t* array.c (gfc_match_array_ref): If standard earlier than F2008\n-\tit is an error if the reference dimension is greater than 7.\n-\tlibgfortran.h : Increase GFC_MAX_DIMENSIONS to 15. Change the\n-\tdtype masks and shifts accordingly.\n-\t* trans-array.c (gfc_conv_descriptor_dtype): Use the dtype\n-\ttype node to check the field.\n-\t(gfc_conv_descriptor_dtype): Access the rank field of dtype.\n-\t(duplicate_allocatable_coarray): Access the rank field of the\n-\tdtype descriptor rather than the dtype itself.\n-\t* trans-expr.c (get_scalar_to_descriptor_type): Store the type\n-\tof 'scalar' on entry and use its TREE_TYPE if it is ARRAY_TYPE\n-\t(ie. a character).\n-\t(gfc_conv_procedure_call): Pass TREE_OPERAND (tmp,0) to\n-\tget_scalar_to_descriptor_type if the actual expression is a\n-\tconstant.\n-\t(gfc_trans_structure_assign): Assign the rank directly to the\n-\tdtype rank field.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_rank): Cast the result\n-\tto default integer kind.\n-\t(gfc_conv_intrinsic_sizeof): Obtain the element size from the\n-\t'elem_len' field of the dtype.\n-\t* trans-io.c (gfc_build_io_library_fndecls): Replace\n-\tgfc_int4_type_node with dtype_type_node where necessary.\n-\t(transfer_namelist_element): Use gfc_get_dtype_rank_type for\n-\tscalars.\n-\t* trans-types.c : Provide 'get_dtype_type_node' to acces the\n-\tdtype_type_node and, if necessary, build it.\n-\tThe maximum size of an array element is now determined by the\n-\tmaximum value of size_t.\n-\tUpdate the description of the array descriptor, including the\n-\ttype def for the dtype_type.\n-\t(gfc_get_dtype_rank_type): Build a constructor for the dtype.\n-\tDistinguish RECORD_TYPEs that are BT_DERIVED or BT_CLASS.\n-\t(gfc_get_array_descriptor_base): Change the type of the dtype\n-\tfield to dtype_type_node.\n-\t(gfc_get_array_descr_info): Get the offset to the rank field of\n-\tthe dtype.\n-\t* trans-types.h : Add a prototype for 'get_dtype_type_node ()'.\n-\t* trans.h : Define the indices of the dtype fields.\n-\n-2018-23-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83866\n-\t* decl.c (gfc_match_derived_decl): If eos not matched, recover\n-\tand emit error about garbage after declaration.\n-\n-2018-23-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83898\n-\t* trans-stmt.c (trans_associate_var): Do not set cst_array_ctor\n-\tfor characters.\n-\n-2018-01-22  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR 78534\n-\tPR 83704\n-\t* arith.c (gfc_arith_concat): Use size_t for string length.\n-\t(gfc_compare_string): Likewise.\n-\t(gfc_compare_with_Cstring): Likewise.\n-\t* array.c (gfc_resolve_character_array_constructor): Use\n-\tHOST_WIDE_INT, gfc_mpz_get_hwi.\n-\t* check.c (gfc_check_fe_runtime_error): Use size_t.\n-\t* data.c (create_character_initializer): Use HOST_WIDE_INT,\n-\tgfc_extract_hwi.\n-\t* decl.c (gfc_set_constant_character_len): Use gfc_charlen_t.\n-\t(add_init_expr_to_sym): Use HOST_WIDE_INT.\n-\t* expr.c (gfc_build_init_expr): Use HOST_WIDE_INT,\n-\tgfc_extract_hwi.\n-\t(gfc_apply_init): Likewise.\n-\t* match.h (gfc_set_constant_character_len): Update prototype.\n-\t* primary.c (match_string_constant): Use size_t.\n-\t* resolve.c (resolve_ordinary_assign): Use HOST_WIDE_INT,\n-\tgfc_mpz_get_hwi.\n-\t* simplify.c (init_result_expr): Likewise.\n-\t(gfc_simplify_len_trim): Use size_t.\n-\t* target-memory.c (gfc_encode_character): Use size_t.\n-\t(gfc_target_encode_expr): Use HOST_WIDE_INT, gfc_mpz_get_hwi.\n-\t(interpret_array): Use size_t.\n-\t(gfc_interpret_character): Likewise.\n-\t* target-memory.h (gfc_encode_character): Update prototype.\n-\t(gfc_interpret_character): Likewise.\n-\t(gfc_target_interpret_expr): Likewise.\n-\t* trans-const.c (gfc_build_string_const): Use size_t for length\n-\targument.\n-\t(gfc_build_wide_string_const): Likewise.\n-\t* trans-const.h (gfc_build_string_const): Likewise.\n-\t(gfc_build_wide_string_const): Likewise.\n-\n-2018-01-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/83900\n-    * simplify.c (gfc_simplify_matmul): Set return type correctly.\n-\n-2018-01-19  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/83900\n-\t* simplify.c (gfc_simplify_matmul): Delete bogus assertion.\n-\n-2018-01-17  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/83864\n-\t* expr.c (add_init_expr_to_sym): Do not dereference NULL pointer.\n-\n-2018-01-17  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/83874\n-\t* decl.c (add_init_expr_to_sym): Do not dereference NULL pointer.\n-\n-2018-01-15  Louis Krupp  <louis.krupp@zoho.com>\n-\n-\tPR fortran/82257\n-\t* interface.c (compare_rank): Don't try to retrieve CLASS_DATA\n-\tfrom symbol marked unlimited polymorphic.\n-\t* resolve.c (resolve_structure_cons): Likewise.\n-\t* misc.c (gfc_typename): Don't dereference derived->components\n-\tif it's NULL.\n-\n-2018-01-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/54613\n-\t* gfortran.h (gfc_check_f): Rename f4ml to f5ml.\n-\t(gfc_logical_4_kind): New macro\n-\t* intrinsic.h (gfc_simplify_minloc): Add a gfc_expr *argument.\n-\t(gfc_simplify_maxloc): Likewise.\n-\t(gfc_resolve_maxloc): Likewise.\n-\t(gfc_resolve_minloc): Likewise.\n-\t* check.c (gfc_check_minloc_maxloc): Add checking for \"back\"\n-\targument; also raise error if it is used (for now). Add it\n-\tif it isn't present.\n-\t* intrinsic.c (add_sym_4ml): Rename to\n-\t(add_sym_5ml), adjust for extra argument.\n-\t(add_functions): Add \"back\" constant. Adjust maxloc and minloc\n-\tfor back argument.\n-\t* iresolve.c (gfc_resolve_maxloc): Add back argument. If back is\n-\tnot of gfc_logical_4_kind, convert.\n-\t(gfc_resolve_minloc): Likewise.\n-\t* simplify.c (gfc_simplify_minloc): Add back argument.\n-\t(gfc_simplify_maxloc): Likewise.\n-\t* trans-intinsic.c (gfc_conv_intrinsic_minmaxloc): Rename last\n-\targument to %VAL to ensure passing by value.\n-\t(gfc_conv_intrinsic_function): Call gfc_conv_intrinsic_minmaxloc\n-\talso for library calls.\n-\n-2018-01-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/82007\n-\t* resolve.c (resolve_transfer): Delete code looking for 'DT'\n-\tformat specifiers in format strings. Set formatted to true if a\n-\tformat string or format label is present.\n-\t* trans-io.c (get_dtio_proc): Likewise. (transfer_expr): Fix\n-\twhitespace.\n-\n-2018-01-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/83744\n-\t* dump-parse-tree.c (get_c_type_name): Remove extra line.\n-\tChange for loop to use declaration in for loop. Handle BT_LOGICAL\n-\tand BT_CHARACTER.\n-\t(write_decl): Add where argument. Fix indentation. Replace\n-\tassert with error message. Add typename to warning\n-\tin comment.\n-\t(write_type): Adjust locus to call of write_decl.\n-\t(write_variable): Likewise.\n-\t(write_proc): Likewise. Replace assert with error message.\n-\n-2018-01-13  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/52162\n-\t* trans-expr.c (gfc_trans_scalar_assign): Flag is_alloc_lhs if\n-\tthe rhs expression is neither an elemental nor a conversion\n-\tfunction.\n-\n-\tPR fortran/83622\n-\t* trans-array.c (is_pointer_array): Remove unconditional return\n-\tof false for -fopenmp.\n-\n-2018-01-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\t<emsr@gcc.gnu.org>\n-\n-\tPR fortran/83803\n-\t* dump-parse-tree.c (write_proc): Always emit closing parenthesis\n-\tfor functions.\n-\n-2018-01-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/82367\n-\t* resolve.c (resolve_allocate_expr): Check for NULL pointer.\n-\n-2018-01-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/83093\n-\t* resolve.c (resolve_charlen): Check the type of cl->length\n-\tafter resolution.\n-\n-2018-01-10  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/83740\n-\t* trans-array.c (gfc_trans_array_ctor_element): Fix formatting.\n-\n-2018-01-10  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/83740\n-\t* trans-array.c (gfc_trans_array_ctor_element): Convert RHS to the\n-\tLHS type when assigning.\n-\n-2018-01-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/83742\n-\t* expr.c (gfc_is_simply_contiguous): Check for NULL pointer.\n-\n-2018-01-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\t* match.c (gfc_match_allocate): Check for NULL pointer.\n-\n-2018-01-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\t* expr.c (gfc_check_pointer_assign): Fix typo in comment.\n-\n-2018-01-08  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83611\n-\t* decl.c (gfc_get_pdt_instance): If parameterized arrays have\n-\tan initializer, convert the kind parameters and add to the\n-\tcomponent if the instance.\n-\t* trans-array.c (structure_alloc_comps): Add 'is_pdt_type' and\n-\tuse it with case COPY_ALLOC_COMP. Call 'duplicate_allocatable'\n-\tfor parameterized arrays. Clean up typos in comments. Convert\n-\tparameterized array initializers and copy into the array.\n-\t* trans-expr.c (gfc_trans_scalar_assign): Do a deep copy for\n-\tparameterized types.\n-\t*trans-stmt.c (trans_associate_var): Deallocate associate vars\n-\tas necessary, when they are PDT function results for example.\n-\n-\tPR fortran/83731\n-\t* trans-array.c (structure_alloc_comps): Only compare len parms\n-\twhen they are declared explicitly.\n-\n-2018-01-06  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/50892\n-\t* trans-expr.c (gfc_trans_pointer_assignment): fold_convert rhs to\n-\tlhs type.\n-\n-2018-01-05  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR fortran/78534\n-\tPR fortran/66310\n-\t* array.c (got_charlen): Use gfc_charlen_int_kind.\n-\t* class.c (gfc_find_derived_vtab): Use gfc_size_kind instead of\n-\thardcoded kind.\n-\t(find_intrinsic_vtab): Likewise.\n-\t* decl.c (match_char_length): Use gfc_charlen_int_kind.\n-\t(add_init_expr_to_sym): Use gfc_charlen_t and gfc_charlen_int_kind.\n-\t(gfc_match_implicit): Use gfc_charlen_int_kind.\n-\t* dump-parse-tree.c (show_char_const): Use gfc_charlen_t and size_t.\n-\t(show_expr): Use HOST_WIDE_INT_PRINT_DEC.\n-\t* expr.c (gfc_get_character_expr): Length parameter of type\n-\tgfc_charlen_t.\n-\t(gfc_get_int_expr): Value argument of type HOST_WIDE_INT.\n-\t(gfc_extract_hwi): New function.\n-\t(simplify_const_ref): Make string_len of type gfc_charlen_t.\n-\t(gfc_simplify_expr): Use HOST_WIDE_INT for substring refs.\n-\t* frontend-passes.c (optimize_trim): Use gfc_charlen_int_kind.\n-\t* gfortran.h (gfc_mpz_get_hwi): New prototype.\n-\t(gfc_mpz_set_hwi): Likewise.\n-\t(gfc_charlen_t): New typedef.\n-\t(gfc_expr): Use gfc_charlen_t for character lengths.\n-\t(gfc_size_kind): New extern variable.\n-\t(gfc_extract_hwi): New prototype.\n-\t(gfc_get_character_expr): Use gfc_charlen_t for character length.\n-\t(gfc_get_int_expr): Use HOST_WIDE_INT type for value argument.\n-\t* gfortran.texi: Update description of hidden string length argument.\n-\t* iresolve.c (check_charlen_present): Use gfc_charlen_int_kind.\n-\t(gfc_resolve_char_achar): Likewise.\n-\t(gfc_resolve_repeat): Pass string length directly without\n-\ttemporary, use gfc_charlen_int_kind.\n-\t(gfc_resolve_transfer): Use gfc_charlen_int_kind.\n-\t* match.c (select_intrinsic_set_tmp): Use HOST_WIDE_INT for charlen.\n-\t* misc.c (gfc_mpz_get_hwi): New function.\n-\t(gfc_mpz_set_hwi): New function.\n-\t* module.c (atom_int): Change type from int to HOST_WIDE_INT.\n-\t(parse_integer): Don't complain about large integers.\n-\t(write_atom): Use HOST_WIDE_INT for integers.\n-\t(mio_integer): Handle integer type mismatch.\n-\t(mio_hwi): New function.\n-\t(mio_intrinsic_op): Use HOST_WIDE_INT.\n-\t(mio_array_ref): Likewise.\n-\t(mio_expr): Likewise.\n-\t* primary.c (match_substring): Use gfc_charlen_int_kind.\n-\t* resolve.c (resolve_substring_charlen): Use gfc_charlen_int_kind.\n-\t(resolve_character_operator): Likewise.\n-\t(resolve_assoc_var): Likewise.\n-\t(resolve_select_type): Use HOST_WIDE_INT for charlen, use snprintf.\n-\t(resolve_charlen): Use mpz_sgn to determine sign.\n-\t* simplify.c (gfc_simplify_repeat): Use HOST_WIDE_INT/gfc_charlen_t\n-\tinstead of long.\n-\t* symbol.c (generate_isocbinding_symbol): Use gfc_charlen_int_kind.\n-\t* target-memory.c (size_character): Length argument of type\n-\tgfc_charlen_t.\n-\t(gfc_encode_character): Likewise.\n-\t(gfc_interpret_character): Use gfc_charlen_t.\n-\t* target-memory.h (gfc_encode_character): Modify prototype.\n-\t* trans-array.c (gfc_trans_array_ctor_element): Use existing type.\n-\t(get_array_ctor_var_strlen): Use gfc_conv_mpz_to_tree_type.\n-\t(trans_array_constructor): Use existing type.\n-\t(get_array_charlen): Likewise.\n-\t* trans-const.c (gfc_conv_mpz_to_tree_type): New function.\n-\t* trans-const.h (gfc_conv_mpz_to_tree_type): New prototype.\n-\t* trans-decl.c (gfc_trans_deferred_vars): Use existing type.\n-\t(add_argument_checking): Likewise.\n-\t* trans-expr.c (gfc_class_len_or_zero_get): Build const of type\n-\tgfc_charlen_type_node.\n-\t(gfc_conv_intrinsic_to_class): Use gfc_charlen_int_kind instead of\n-\t4, fold_convert to correct type.\n-\t(gfc_conv_class_to_class): Build const of type size_type_node for\n-\tsize.\n-\t(gfc_copy_class_to_class): Likewise.\n-\t(gfc_conv_string_length): Use same type in expression.\n-\t(gfc_conv_substring): Likewise, use HOST_WIDE_INT for charlen.\n-\t(gfc_conv_string_tmp): Make sure len is of the right type.\n-\t(gfc_conv_concat_op): Use same type in expression.\n-\t(gfc_conv_procedure_call): Likewise.\n-\t(fill_with_spaces): Comment out memset() block due to spurious\n-\t-Wstringop-overflow warnings.\n-\t(gfc_trans_string_copy): Use gfc_charlen_type_node.\n-\t(alloc_scalar_allocatable_for_subcomponent_assignment):\n-\tfold_convert to right type.\n-\t(gfc_trans_subcomponent_assign): Likewise.\n-\t(trans_class_vptr_len_assignment): Build const of correct type.\n-\t(gfc_trans_pointer_assignment): Likewise.\n-\t(alloc_scalar_allocatable_for_assignment): fold_convert to right\n-\ttype in expr.\n-\t(trans_class_assignment): Build const of correct type.\n-\t* trans-intrinsic.c (gfc_conv_associated): Likewise.\n-\t(gfc_conv_intrinsic_repeat): Do calculation in sizetype.\n-\t* trans-io.c (gfc_build_io_library_fndecls): Use\n-\tgfc_charlen_type_node for character lengths.\n-\t(set_string): Convert to right type in assignment.\n-\t* trans-stmt.c (gfc_trans_label_assign): Build const of\n-\tgfc_charlen_type_node.\n-\t(trans_associate_var): Likewise.\n-\t(gfc_trans_character_select): Likewise.\n-\t(gfc_trans_allocate): Likewise, don't typecast strlen result.\n-\t(gfc_trans_deallocate): Don't typecast strlen result.\n-\t* trans-types.c (gfc_size_kind): New variable.\n-\t(gfc_init_types): Determine gfc_charlen_int_kind and gfc_size_kind\n-\tfrom size_type_node.\n-\t* trans-types.h: Fix comment.\n-\n-2018-01-04  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/83683\n-\tPR fortran/45689\n-\t* check.c (gfc_check_eoshift): Check for string length and\n-\tfor conformance of boundary.\n-\t* intrinsic.c (add_functions): Add gfc_simplify_eoshift.\n-\t* intrinsic.h: Add prototype for gfc_simplify_eoshift.\n-\t* simplify.c (gfc_simplify_eoshift): New function.\n-\n-2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n-\t    Alan Hayward  <alan.hayward@arm.com>\n-\t    David Sherwood  <david.sherwood@arm.com>\n-\n-\t* trans-types.c (gfc_type_for_mode): Handle MODE_VECTOR_BOOL.\n-\n-2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n-\t    Alan Hayward  <alan.hayward@arm.com>\n-\t    David Sherwood  <david.sherwood@arm.com>\n-\n-\t* trans-types.c (gfc_type_for_mode): Check valid_vector_subparts_p.\n-\n-2018-01-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/83664\n-\t* check.c (gfc_check_eoshift): Error for missing boundary if array\n-\tis not one of the standard types.\n-\n-2018-01-03  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tUpdate copyright years.\n-\n-\t* gfortranspec.c (lang_specific_driver): Update copyright notice\n-\tdates.\n-\t* gfc-internals.texi: Bump @copying's copyright year.\n-\t* gfortran.texi: Ditto.\n-\t* intrinsic.texi: Ditto.\n-\t* invoke.texi: Ditto.\n-\n-2017-01-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/45689\n-\t* intrinsic.c (add_function): Add gfc_simplify_maxloc and\n-\tgfc_simplify_minloc to maxloc and minloc, respectively.\n-\t* intrinsic.h: Add prototypes for gfc_simplify_minloc\n-\tand gfc_simplify_maxloc.\n-\t* simplify.c (min_max_chose): Adjust prototype.  Modify function\n-\tto have a return value which indicates if the extremum was found.\n-\t(is_constant_array_expr): Fix typo in comment.\n-\t(simplify_minmaxloc_to_scalar): New function.\n-\t(simplify_minmaxloc_nodim): New function.\n-\t(new_array): New function.\n-\t(simplify_minmaxloc_to_array): New function.\n-\t(gfc_simplify_minmaxloc): New function.\n-\t(simplify_minloc): New function.\n-\t(simplify_maxloc): New function.\n-\n-2018-01-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/45689\n-\tPR fortran/83650\n-\t* simplify.c (gfc_simplify_cshift): Re-implement to allow full\n-\trange of arguments.\n-\n-2018-01-01  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/83076\n-\t* resolve.c (resolve_fl_derived0): Add caf_token fields for\n-\tallocatable and pointer scalars, when -fcoarray selected.\n-\t* trans-types.c (gfc_copy_dt_decls_ifequal): Copy the token\n-\tfield as well as the backend_decl.\n-\t(gfc_get_derived_type): Flag GFC_FCOARRAY_LIB for module\n-\tderived types that are not vtypes. Components with caf_token\n-\tattribute are pvoid types. For a component requiring it, find\n-\tthe caf_token field and have the component token field point to\n-\tits backend_decl.\n-\n-\tPR fortran/83319\n-\t*trans-types.c (gfc_get_array_descriptor_base): Add the token\n-\tfield to the descriptor even when codimen not set.\n-\f\n-Copyright (C) 2018 Free Software Foundation, Inc.\n-\n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright\n notice and this notice are preserved."}]}