{"sha": "18b9ca6f2cba789ef2e08d3f00c73673468bc859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThiOWNhNmYyY2JhNzg5ZWYyZTA4ZDNmMDBjNzM2NzM0NjhiYzg1OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-07T01:01:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-07T01:01:09Z"}, "message": "(memory_address): Call update_temp_slot_address on new and old\naddress.\n\nFrom-SVN: r6497", "tree": {"sha": "59baff5662736eb4c07b2555c6462dda45088d51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59baff5662736eb4c07b2555c6462dda45088d51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18b9ca6f2cba789ef2e08d3f00c73673468bc859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b9ca6f2cba789ef2e08d3f00c73673468bc859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b9ca6f2cba789ef2e08d3f00c73673468bc859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b9ca6f2cba789ef2e08d3f00c73673468bc859/comments", "author": null, "committer": null, "parents": [{"sha": "e5e761396eed734a87c7c721470a517056333eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e761396eed734a87c7c721470a517056333eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e761396eed734a87c7c721470a517056333eee"}], "stats": {"total": 126, "additions": 71, "deletions": 55}, "files": [{"sha": "64431a69285853dce1362601f7e4133e70c0cee9", "filename": "gcc/explow.c", "status": "modified", "additions": 71, "deletions": 55, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b9ca6f2cba789ef2e08d3f00c73673468bc859/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b9ca6f2cba789ef2e08d3f00c73673468bc859/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=18b9ca6f2cba789ef2e08d3f00c73673468bc859", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for manipulating rtx's in semantically interesting ways.\n-   Copyright (C) 1987, 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1991, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -338,76 +338,85 @@ memory_address (mode, x)\n      enum machine_mode mode;\n      register rtx x;\n {\n-  register rtx oldx;\n+  register rtx oldx = x;\n \n   /* By passing constant addresses thru registers\n      we get a chance to cse them.  */\n   if (! cse_not_expected && CONSTANT_P (x) && CONSTANT_ADDRESS_P (x))\n-    return force_reg (Pmode, x);\n+    x = force_reg (Pmode, x);\n \n   /* Accept a QUEUED that refers to a REG\n      even though that isn't a valid address.\n      On attempting to put this in an insn we will call protect_from_queue\n      which will turn it into a REG, which is valid.  */\n-  if (GET_CODE (x) == QUEUED\n+  else if (GET_CODE (x) == QUEUED\n       && GET_CODE (QUEUED_VAR (x)) == REG)\n-    return x;\n+    ;\n \n   /* We get better cse by rejecting indirect addressing at this stage.\n      Let the combiner create indirect addresses where appropriate.\n      For now, generate the code so that the subexpressions useful to share\n      are visible.  But not if cse won't be done!  */\n-  oldx = x;\n-  if (! cse_not_expected && GET_CODE (x) != REG)\n-    x = break_out_memory_refs (x);\n-\n-  /* At this point, any valid address is accepted.  */\n-  GO_IF_LEGITIMATE_ADDRESS (mode, x, win);\n-\n-  /* If it was valid before but breaking out memory refs invalidated it,\n-     use it the old way.  */\n-  if (memory_address_p (mode, oldx))\n-    goto win2;\n-\n-  /* Perform machine-dependent transformations on X\n-     in certain cases.  This is not necessary since the code\n-     below can handle all possible cases, but machine-dependent\n-     transformations can make better code.  */\n-  LEGITIMIZE_ADDRESS (x, oldx, mode, win);\n-\n-  /* PLUS and MULT can appear in special ways\n-     as the result of attempts to make an address usable for indexing.\n-     Usually they are dealt with by calling force_operand, below.\n-     But a sum containing constant terms is special\n-     if removing them makes the sum a valid address:\n-     then we generate that address in a register\n-     and index off of it.  We do this because it often makes\n-     shorter code, and because the addresses thus generated\n-     in registers often become common subexpressions.  */\n-  if (GET_CODE (x) == PLUS)\n+  else\n     {\n-      rtx constant_term = const0_rtx;\n-      rtx y = eliminate_constant_term (x, &constant_term);\n-      if (constant_term == const0_rtx\n-\t  || ! memory_address_p (mode, y))\n-\treturn force_operand (x, NULL_RTX);\n-\n-      y = gen_rtx (PLUS, GET_MODE (x), copy_to_reg (y), constant_term);\n-      if (! memory_address_p (mode, y))\n-\treturn force_operand (x, NULL_RTX);\n-      return y;\n-    }\n-  if (GET_CODE (x) == MULT || GET_CODE (x) == MINUS)\n-    return force_operand (x, NULL_RTX);\n+      if (! cse_not_expected && GET_CODE (x) != REG)\n+\tx = break_out_memory_refs (x);\n+\n+      /* At this point, any valid address is accepted.  */\n+      GO_IF_LEGITIMATE_ADDRESS (mode, x, win);\n+\n+      /* If it was valid before but breaking out memory refs invalidated it,\n+\t use it the old way.  */\n+      if (memory_address_p (mode, oldx))\n+\tgoto win2;\n+\n+      /* Perform machine-dependent transformations on X\n+\t in certain cases.  This is not necessary since the code\n+\t below can handle all possible cases, but machine-dependent\n+\t transformations can make better code.  */\n+      LEGITIMIZE_ADDRESS (x, oldx, mode, win);\n+\n+      /* PLUS and MULT can appear in special ways\n+\t as the result of attempts to make an address usable for indexing.\n+\t Usually they are dealt with by calling force_operand, below.\n+\t But a sum containing constant terms is special\n+\t if removing them makes the sum a valid address:\n+\t then we generate that address in a register\n+\t and index off of it.  We do this because it often makes\n+\t shorter code, and because the addresses thus generated\n+\t in registers often become common subexpressions.  */\n+      if (GET_CODE (x) == PLUS)\n+\t{\n+\t  rtx constant_term = const0_rtx;\n+\t  rtx y = eliminate_constant_term (x, &constant_term);\n+\t  if (constant_term == const0_rtx\n+\t      || ! memory_address_p (mode, y))\n+\t    x = force_operand (x, NULL_RTX);\n+\t  else\n+\t    {\n+\t      y = gen_rtx (PLUS, GET_MODE (x), copy_to_reg (y), constant_term);\n+\t      if (! memory_address_p (mode, y))\n+\t\tx = force_operand (x, NULL_RTX);\n+\t      else\n+\t\tx = y;\n+\t    }\n+\t}\n \n-  /* If we have a register that's an invalid address,\n-     it must be a hard reg of the wrong class.  Copy it to a pseudo.  */\n-  if (GET_CODE (x) == REG)\n-    return copy_to_reg (x);\n+      if (GET_CODE (x) == MULT || GET_CODE (x) == MINUS)\n+\tx = force_operand (x, NULL_RTX);\n \n-  /* Last resort: copy the value to a register, since\n-     the register is a valid address.  */\n-  return force_reg (Pmode, x);\n+      /* If we have a register that's an invalid address,\n+\t it must be a hard reg of the wrong class.  Copy it to a pseudo.  */\n+      else if (GET_CODE (x) == REG)\n+\tx = copy_to_reg (x);\n+\n+      /* Last resort: copy the value to a register, since\n+\t the register is a valid address.  */\n+      else\n+\tx = force_reg (Pmode, x);\n+\n+      goto done;\n+    }\n \n  win2:\n   x = oldx;\n@@ -419,10 +428,17 @@ memory_address (mode, x)\n \t\t|| XEXP (x, 0) == virtual_incoming_args_rtx)))\n     {\n       if (general_operand (x, Pmode))\n-\treturn force_reg (Pmode, x);\n+\tx = force_reg (Pmode, x);\n       else\n-\treturn force_operand (x, NULL_RTX);\n+\tx = force_operand (x, NULL_RTX);\n     }\n+\n+ done:\n+\n+  /* OLDX may have been the address on a temporary.  Update the address\n+     to indicate that X is now used.  */\n+  update_temp_slot_address (oldx, x);\n+\n   return x;\n }\n "}]}