{"sha": "8fe75147a948ceab6fb9afbe0ee698517ce1dda0", "node_id": "C_kwDOANBUbNoAKDhmZTc1MTQ3YTk0OGNlYWI2ZmI5YWZiZTBlZTY5ODUxN2NlMWRkYTA", "commit": {"author": {"name": "zhongjuzhe", "email": "juzhe.zhong@rivai.ai", "date": "2022-08-30T06:20:27Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-09-01T02:01:20Z"}, "message": "RISC-V: Add csrr vlenb instruction.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.cc (riscv_const_insns): Add cost of poly_int.\n\t(riscv_output_move): Add csrr vlenb assembly.\n\t* config/riscv/riscv.md (move_type): Add csrr vlenb type.\n\t(ext): New attribute.\n\t(ext_enabled): Ditto.\n\t(enabled): Ditto.", "tree": {"sha": "52c5648f685b98ff46dc376c098ca642bc6055b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52c5648f685b98ff46dc376c098ca642bc6055b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fe75147a948ceab6fb9afbe0ee698517ce1dda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe75147a948ceab6fb9afbe0ee698517ce1dda0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fe75147a948ceab6fb9afbe0ee698517ce1dda0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe75147a948ceab6fb9afbe0ee698517ce1dda0/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8089aff3602447cd66ea723802d43cec4e7ec02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8089aff3602447cd66ea723802d43cec4e7ec02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8089aff3602447cd66ea723802d43cec4e7ec02"}], "stats": {"total": 91, "additions": 69, "deletions": 22}, "files": [{"sha": "30cbf00542e9c8b2f342cafafffad430baaffb53", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe75147a948ceab6fb9afbe0ee698517ce1dda0/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe75147a948ceab6fb9afbe0ee698517ce1dda0/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=8fe75147a948ceab6fb9afbe0ee698517ce1dda0", "patch": "@@ -1136,6 +1136,12 @@ riscv_const_insns (rtx x)\n     case LABEL_REF:\n       return riscv_symbol_insns (riscv_classify_symbol (x));\n \n+    /* TODO: In RVV, we get CONST_POLY_INT by using csrr VLENB\n+       instruction and several scalar shift or mult instructions,\n+       it is so far unknown. We set it to 4 temporarily.  */\n+    case CONST_POLY_INT:\n+      return 4;\n+\n     default:\n       return 0;\n     }\n@@ -2507,6 +2513,12 @@ riscv_output_move (rtx dest, rtx src)\n \t    return \"fld\\t%0,%1\";\n \t  }\n     }\n+  if (dest_code == REG && GP_REG_P (REGNO (dest)) && src_code == CONST_POLY_INT)\n+    {\n+      /* We only want a single full vector register VLEN read after reload. */\n+      gcc_assert (known_eq (rtx_to_poly_int64 (src), BYTES_PER_RISCV_VECTOR));\n+      return \"csrr\\t%0,vlenb\";\n+    }\n   gcc_unreachable ();\n }\n "}, {"sha": "2bfab198370f460ad3070da6caa1d2de9fff46db", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 57, "deletions": 22, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe75147a948ceab6fb9afbe0ee698517ce1dda0/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe75147a948ceab6fb9afbe0ee698517ce1dda0/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=8fe75147a948ceab6fb9afbe0ee698517ce1dda0", "patch": "@@ -148,7 +148,7 @@\n ;; scheduling type to be \"multi\" instead.\n (define_attr \"move_type\"\n   \"unknown,load,fpload,store,fpstore,mtc,mfc,move,fmove,\n-   const,logical,arith,andi,shift_shift\"\n+   const,logical,arith,andi,shift_shift,rdvlenb\"\n   (const_string \"unknown\"))\n \n ;; Main data type used by the insn\n@@ -166,6 +166,35 @@\n \t (const_string \"yes\")]\n \t(const_string \"no\")))\n \n+;; ISA attributes.\n+(define_attr \"ext\" \"base,f,d,vector\"\n+  (const_string \"base\"))\n+\n+;; True if the extension is enabled.\n+(define_attr \"ext_enabled\" \"no,yes\"\n+  (cond [(eq_attr \"ext\" \"base\")\n+\t (const_string \"yes\")\n+\t\n+\t (and (eq_attr \"ext\" \"f\")\n+\t      (match_test \"TARGET_HARD_FLOAT\"))\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"ext\" \"d\")\n+\t      (match_test \"TARGET_DOUBLE_FLOAT\"))\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"ext\" \"vector\")\n+\t      (match_test \"TARGET_VECTOR\"))\n+\t (const_string \"yes\")\n+\t]\n+\t(const_string \"no\")))\n+\n+;; Attribute to control enable or disable instructions.\n+(define_attr \"enabled\" \"no,yes\"\n+  (cond [(eq_attr \"ext_enabled\" \"no\")\n+\t (const_string \"no\")]\n+\t(const_string \"yes\")))\n+\n ;; Classification of each insn.\n ;; branch\tconditional branch\n ;; jump\t\tunconditional jump\n@@ -326,7 +355,8 @@\n \t      (eq_attr \"dword_mode\" \"yes\"))\n \t   (const_string \"multi\")\n \t (eq_attr \"move_type\" \"move\") (const_string \"move\")\n-\t (eq_attr \"move_type\" \"const\") (const_string \"const\")]\n+\t (eq_attr \"move_type\" \"const\") (const_string \"const\")\n+\t (eq_attr \"move_type\" \"rdvlenb\") (const_string \"rdvlenb\")]\n \t(const_string \"unknown\")))\n \n ;; Length of instruction in bytes.\n@@ -1633,24 +1663,26 @@\n })\n \n (define_insn \"*movdi_32bit\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,m,  *f,*f,*r,*f,*m\")\n-\t(match_operand:DI 1 \"move_operand\"         \" r,i,m,r,*J*r,*m,*f,*f,*f\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,m,  *f,*f,*r,*f,*m,r\")\n+\t(match_operand:DI 1 \"move_operand\"         \" r,i,m,r,*J*r,*m,*f,*f,*f,vp\"))]\n   \"!TARGET_64BIT\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n   { return riscv_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,const,load,store,mtc,fpload,mfc,fmove,fpstore\")\n-   (set_attr \"mode\" \"DI\")])\n+  [(set_attr \"move_type\" \"move,const,load,store,mtc,fpload,mfc,fmove,fpstore,rdvlenb\")\n+   (set_attr \"mode\" \"DI\")\n+   (set_attr \"ext\" \"base,base,base,base,d,d,d,d,d,vector\")])\n \n (define_insn \"*movdi_64bit\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*f,*r,*f,*m\")\n-\t(match_operand:DI 1 \"move_operand\"         \" r,T,m,rJ,*r*J,*m,*f,*f,*f\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*f,*r,*f,*m,r\")\n+\t(match_operand:DI 1 \"move_operand\"         \" r,T,m,rJ,*r*J,*m,*f,*f,*f,vp\"))]\n   \"TARGET_64BIT\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n   { return riscv_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,const,load,store,mtc,fpload,mfc,fmove,fpstore\")\n-   (set_attr \"mode\" \"DI\")])\n+  [(set_attr \"move_type\" \"move,const,load,store,mtc,fpload,mfc,fmove,fpstore,rdvlenb\")\n+   (set_attr \"mode\" \"DI\")\n+   (set_attr \"ext\" \"base,base,base,base,d,d,d,d,d,vector\")])\n \n ;; 32-bit Integer moves\n \n@@ -1664,13 +1696,14 @@\n })\n \n (define_insn \"*movsi_internal\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*f,*r,*m\")\n-\t(match_operand:SI 1 \"move_operand\"         \" r,T,m,rJ,*r*J,*m,*f,*f\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*f,*r,*m,r\")\n+\t(match_operand:SI 1 \"move_operand\"         \" r,T,m,rJ,*r*J,*m,*f,*f,vp\"))]\n   \"(register_operand (operands[0], SImode)\n     || reg_or_0_operand (operands[1], SImode))\"\n   { return riscv_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,const,load,store,mtc,fpload,mfc,fpstore\")\n-   (set_attr \"mode\" \"SI\")])\n+  [(set_attr \"move_type\" \"move,const,load,store,mtc,fpload,mfc,fpstore,rdvlenb\")\n+   (set_attr \"mode\" \"SI\")\n+   (set_attr \"ext\" \"base,base,base,base,f,f,f,f,vector\")])\n \n ;; 16-bit Integer moves\n \n@@ -1689,13 +1722,14 @@\n })\n \n (define_insn \"*movhi_internal\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*r\")\n-\t(match_operand:HI 1 \"move_operand\"\t   \" r,T,m,rJ,*r*J,*f\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*r,r\")\n+\t(match_operand:HI 1 \"move_operand\"\t   \" r,T,m,rJ,*r*J,*f,vp\"))]\n   \"(register_operand (operands[0], HImode)\n     || reg_or_0_operand (operands[1], HImode))\"\n   { return riscv_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,const,load,store,mtc,mfc\")\n-   (set_attr \"mode\" \"HI\")])\n+  [(set_attr \"move_type\" \"move,const,load,store,mtc,mfc,rdvlenb\")\n+   (set_attr \"mode\" \"HI\")\n+   (set_attr \"ext\" \"base,base,base,base,f,f,vector\")])\n \n ;; HImode constant generation; see riscv_move_integer for details.\n ;; si+si->hi without truncation is legal because of\n@@ -1731,13 +1765,14 @@\n })\n \n (define_insn \"*movqi_internal\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*r\")\n-\t(match_operand:QI 1 \"move_operand\"         \" r,I,m,rJ,*r*J,*f\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*r,r\")\n+\t(match_operand:QI 1 \"move_operand\"         \" r,I,m,rJ,*r*J,*f,vp\"))]\n   \"(register_operand (operands[0], QImode)\n     || reg_or_0_operand (operands[1], QImode))\"\n   { return riscv_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,const,load,store,mtc,mfc\")\n-   (set_attr \"mode\" \"QI\")])\n+  [(set_attr \"move_type\" \"move,const,load,store,mtc,mfc,rdvlenb\")\n+   (set_attr \"mode\" \"QI\")\n+   (set_attr \"ext\" \"base,base,base,base,f,f,vector\")])\n \n ;; 32-bit floating point moves\n "}]}