{"sha": "428f80e65119aca0c7c03d5382d684dfdeaa7ac7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI4ZjgwZTY1MTE5YWNhMGM3YzAzZDUzODJkNjg0ZGZkZWFhN2FjNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-04T12:22:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-04T12:22:42Z"}, "message": "re PR tree-optimization/49957 (Fails to SLP in 410.bwaves)\n\n2011-08-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR fortran/49957\n\t* trans-array.c (add_to_offset): New function.\n\t(gfc_conv_array_ref): Build the array index expression in optimally\n\tassociated order.\n\t(gfc_walk_variable_expr): Adjust for the backward walk.\n\n\t* gfortran.dg/vect/O3-pr49957.f: New testcase.\n\nFrom-SVN: r177368", "tree": {"sha": "1e961cfbf89e2f48a7457ac4fcac919d87391ec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e961cfbf89e2f48a7457ac4fcac919d87391ec7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/428f80e65119aca0c7c03d5382d684dfdeaa7ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428f80e65119aca0c7c03d5382d684dfdeaa7ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/428f80e65119aca0c7c03d5382d684dfdeaa7ac7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428f80e65119aca0c7c03d5382d684dfdeaa7ac7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9515740f004bf41a1a084285943cf73eb7316ef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9515740f004bf41a1a084285943cf73eb7316ef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9515740f004bf41a1a084285943cf73eb7316ef8"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "d794d14ace006a6964241661071db6d14093111d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428f80e65119aca0c7c03d5382d684dfdeaa7ac7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428f80e65119aca0c7c03d5382d684dfdeaa7ac7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=428f80e65119aca0c7c03d5382d684dfdeaa7ac7", "patch": "@@ -1,3 +1,11 @@\n+2011-08-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR fortran/49957\n+\t* trans-array.c (add_to_offset): New function.\n+\t(gfc_conv_array_ref): Build the array index expression in optimally\n+\tassociated order.\n+\t(gfc_walk_variable_expr): Adjust for the backward walk.\n+\n 2011-08-02  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/49885"}, {"sha": "3a756584933dc859c26547619d1d2649b6aff9c0", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428f80e65119aca0c7c03d5382d684dfdeaa7ac7/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428f80e65119aca0c7c03d5382d684dfdeaa7ac7/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=428f80e65119aca0c7c03d5382d684dfdeaa7ac7", "patch": "@@ -2622,6 +2622,22 @@ gfc_conv_tmp_array_ref (gfc_se * se)\n   gfc_advance_se_ss_chain (se);\n }\n \n+/* Add T to the offset pair *OFFSET, *CST_OFFSET.  */\n+\n+static void\n+add_to_offset (tree *cst_offset, tree *offset, tree t)\n+{\n+  if (TREE_CODE (t) == INTEGER_CST)\n+    *cst_offset = int_const_binop (PLUS_EXPR, *cst_offset, t);\n+  else\n+    {\n+      if (!integer_zerop (*offset))\n+\t*offset = fold_build2_loc (input_location, PLUS_EXPR,\n+\t\t\t\t   gfc_array_index_type, *offset, t);\n+      else\n+\t*offset = t;\n+    }\n+}\n \n /* Build an array reference.  se->expr already holds the array descriptor.\n    This should be either a variable, indirect variable reference or component\n@@ -2634,7 +2650,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n \t\t    locus * where)\n {\n   int n;\n-  tree index;\n+  tree offset, cst_offset;\n   tree tmp;\n   tree stride;\n   gfc_se indexse;\n@@ -2669,10 +2685,12 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n       return;\n     }\n \n-  index = gfc_index_zero_node;\n+  cst_offset = offset = gfc_index_zero_node;\n+  add_to_offset (&cst_offset, &offset, gfc_conv_array_offset (se->expr));\n \n-  /* Calculate the offsets from all the dimensions.  */\n-  for (n = 0; n < ar->dimen; n++)\n+  /* Calculate the offsets from all the dimensions.  Make sure to associate\n+     the final offset so that we form a chain of loop invariant summands.  */\n+  for (n = ar->dimen - 1; n >= 0; n--)\n     {\n       /* Calculate the index for this dimension.  */\n       gfc_init_se (&indexse, se);\n@@ -2741,19 +2759,17 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n \t\t\t     indexse.expr, stride);\n \n       /* And add it to the total.  */\n-      index = fold_build2_loc (input_location, PLUS_EXPR,\n-\t\t\t       gfc_array_index_type, index, tmp);\n+      add_to_offset (&cst_offset, &offset, tmp);\n     }\n \n-  tmp = gfc_conv_array_offset (se->expr);\n-  if (!integer_zerop (tmp))\n-    index = fold_build2_loc (input_location, PLUS_EXPR,\n-\t\t\t     gfc_array_index_type, index, tmp);\n+  if (!integer_zerop (cst_offset))\n+    offset = fold_build2_loc (input_location, PLUS_EXPR,\n+\t\t\t      gfc_array_index_type, offset, cst_offset);\n \n   /* Access the calculated element.  */\n   tmp = gfc_conv_array_data (se->expr);\n   tmp = build_fold_indirect_ref (tmp);\n-  se->expr = gfc_build_array_ref (tmp, index, sym->backend_decl);\n+  se->expr = gfc_build_array_ref (tmp, offset, sym->backend_decl);\n }\n \n \n@@ -7575,7 +7591,7 @@ gfc_walk_variable_expr (gfc_ss * ss, gfc_expr * expr)\n       switch (ar->type)\n \t{\n \tcase AR_ELEMENT:\n-\t  for (n = 0; n < ar->dimen + ar->codimen; n++)\n+\t  for (n = ar->dimen + ar->codimen - 1; n >= 0; n--)\n \t    {\n \t      newss = gfc_get_ss ();\n \t      newss->type = GFC_SS_SCALAR;"}, {"sha": "9145186a53e20b9bc2fe6600b46264382303fe8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428f80e65119aca0c7c03d5382d684dfdeaa7ac7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428f80e65119aca0c7c03d5382d684dfdeaa7ac7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=428f80e65119aca0c7c03d5382d684dfdeaa7ac7", "patch": "@@ -1,3 +1,8 @@\n+2011-08-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR fortran/49957\n+\t* gfortran.dg/vect/O3-pr49957.f: New testcase.\n+\n 2011-08-04  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc.target/arm/vfp-1.c: no large negative offsets on Thumb2."}, {"sha": "a9735677e7313fb6095c3aacaeba275acd670cb2", "filename": "gcc/testsuite/gfortran.dg/vect/O3-pr49957.f", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428f80e65119aca0c7c03d5382d684dfdeaa7ac7/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2FO3-pr49957.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428f80e65119aca0c7c03d5382d684dfdeaa7ac7/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2FO3-pr49957.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2FO3-pr49957.f?ref=428f80e65119aca0c7c03d5382d684dfdeaa7ac7", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-require-effective-target vect_double }\n+      subroutine shell(nx,ny,nz,q,dq)\n+      implicit none\n+      integer i,j,k,l,nx,ny,nz\n+      real*8 q(5,nx,ny),dq(5,nx,ny)\n+         do j=1,ny\n+            do i=1,nx\n+               do l=1,5\n+                  q(l,i,j)=q(l,i,j)+dq(l,i,j)\n+               enddo\n+            enddo\n+         enddo\n+      return\n+      end\n+! { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail vect_no_align } } }"}]}