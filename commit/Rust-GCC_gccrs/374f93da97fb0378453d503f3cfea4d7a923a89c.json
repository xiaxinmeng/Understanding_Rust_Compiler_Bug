{"sha": "374f93da97fb0378453d503f3cfea4d7a923a89c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc0ZjkzZGE5N2ZiMDM3ODQ1M2Q1MDNmM2NmZWE0ZDdhOTIzYTg5Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-09T12:48:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-09T14:33:18Z"}, "message": "tree-optimization/100981 - fix SLP patterns involving reductions\n\nThe following fixes the SLP FMA patterns to preserve reduction\ninfo and the reduction vectorization to consider internal function\ncall defs for the reduction stmt.\n\n2021-06-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100981\ngcc/\n\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Use\n\tgimple_get_lhs to also handle calls.\n\t* tree-vect-slp-patterns.c (complex_pattern::build): Transfer\n\treduction info.\n\ngcc/testsuite/\n\t* gfortran.dg/vect/pr100981-1.f90: New testcase.\n\nlibgomp/\n\t* testsuite/libgomp.fortran/pr100981-2.f90: New testcase.", "tree": {"sha": "2899c3123df63912049f2fa094987f262084701c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2899c3123df63912049f2fa094987f262084701c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/374f93da97fb0378453d503f3cfea4d7a923a89c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374f93da97fb0378453d503f3cfea4d7a923a89c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374f93da97fb0378453d503f3cfea4d7a923a89c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374f93da97fb0378453d503f3cfea4d7a923a89c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce670e4faafb296d1f1a7828d20f8c8ba4686797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce670e4faafb296d1f1a7828d20f8c8ba4686797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce670e4faafb296d1f1a7828d20f8c8ba4686797"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "6f111213b7a686fc33a6de0daedf8e35a364f18e", "filename": "gcc/testsuite/gfortran.dg/vect/pr100981-1.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374f93da97fb0378453d503f3cfea4d7a923a89c/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr100981-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374f93da97fb0378453d503f3cfea4d7a923a89c/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr100981-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr100981-1.f90?ref=374f93da97fb0378453d503f3cfea4d7a923a89c", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-O3 -ftree-parallelize-loops=2 -fno-signed-zeros -fno-trapping-math\" }\n+! { dg-additional-options \"-march=armv8.3-a\" { target aarch64*-*-* } }\n+\n+complex function cdcdot(n, cx)\n+  implicit none\n+\n+  integer :: n, i, kx\n+  complex :: cx(*)\n+  double precision :: dsdotr, dsdoti, dt1, dt3\n+\n+  kx = 1\n+  do i = 1, n\n+     dt1 = real(cx(kx))\n+     dt3 = aimag(cx(kx))\n+     dsdotr = dsdotr + dt1 * 2 - dt3 * 2\n+     dsdoti = dsdoti + dt1 * 2 + dt3 * 2\n+     kx = kx + 1\n+  end do\n+  cdcdot = cmplx(real(dsdotr), real(dsdoti))\n+  return\n+end function cdcdot"}, {"sha": "ee79808472cea88786e5c04756980b456c3f5a02", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374f93da97fb0378453d503f3cfea4d7a923a89c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374f93da97fb0378453d503f3cfea4d7a923a89c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=374f93da97fb0378453d503f3cfea4d7a923a89c", "patch": "@@ -5247,7 +5247,7 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n       gcc_assert (STMT_VINFO_RELATED_STMT (orig_stmt_info) == stmt_info);\n     }\n   \n-  scalar_dest = gimple_assign_lhs (orig_stmt_info->stmt);\n+  scalar_dest = gimple_get_lhs (orig_stmt_info->stmt);\n   scalar_type = TREE_TYPE (scalar_dest);\n   scalar_results.create (group_size); \n   new_scalar_dest = vect_create_destination_var (scalar_dest, NULL);"}, {"sha": "2ed49cd9edcabd7948b365dd60d7405b79079a7b", "filename": "gcc/tree-vect-slp-patterns.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374f93da97fb0378453d503f3cfea4d7a923a89c/gcc%2Ftree-vect-slp-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374f93da97fb0378453d503f3cfea4d7a923a89c/gcc%2Ftree-vect-slp-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.c?ref=374f93da97fb0378453d503f3cfea4d7a923a89c", "patch": "@@ -544,6 +544,8 @@ complex_pattern::build (vec_info *vinfo)\n     {\n       /* Calculate the location of the statement in NODE to replace.  */\n       stmt_info = SLP_TREE_REPRESENTATIVE (node);\n+      stmt_vec_info reduc_def\n+\t= STMT_VINFO_REDUC_DEF (vect_orig_stmt (stmt_info));\n       gimple* old_stmt = STMT_VINFO_STMT (stmt_info);\n       tree lhs_old_stmt = gimple_get_lhs (old_stmt);\n       tree type = TREE_TYPE (lhs_old_stmt);\n@@ -568,9 +570,10 @@ complex_pattern::build (vec_info *vinfo)\n \t= vinfo->add_pattern_stmt (call_stmt, stmt_info);\n \n       /* Make sure to mark the representative statement pure_slp and\n-\t relevant. */\n+\t relevant and transfer reduction info. */\n       STMT_VINFO_RELEVANT (call_stmt_info) = vect_used_in_scope;\n       STMT_SLP_TYPE (call_stmt_info) = pure_slp;\n+      STMT_VINFO_REDUC_DEF (call_stmt_info) = reduc_def;\n \n       gimple_set_bb (call_stmt, gimple_bb (stmt_info->stmt));\n       STMT_VINFO_VECTYPE (call_stmt_info) = SLP_TREE_VECTYPE (node);"}, {"sha": "12836d4ad4ce522eb3b485467e71476cec4d9ab5", "filename": "libgomp/testsuite/libgomp.fortran/pr100981-2.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374f93da97fb0378453d503f3cfea4d7a923a89c/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr100981-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374f93da97fb0378453d503f3cfea4d7a923a89c/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr100981-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr100981-2.f90?ref=374f93da97fb0378453d503f3cfea4d7a923a89c", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! { dg-additional-options \"-O3 -ftree-parallelize-loops=2 -fno-signed-zeros -fno-trapping-math\" }\n+\n+complex function cdcdot(n, cx)\n+  implicit none\n+\n+  integer :: n, i, kx\n+  complex :: cx(*)\n+  double precision :: dsdotr, dsdoti, dt1, dt3\n+\n+  kx = 1\n+  do i = 1, n\n+     dt1 = real(cx(kx))\n+     dt3 = aimag(cx(kx))\n+     dsdotr = dsdotr + dt1 * 2 - dt3 * 2\n+     dsdoti = dsdoti + dt1 * 2 + dt3 * 2\n+     kx = kx + 1\n+  end do\n+  cdcdot = cmplx(real(dsdotr), real(dsdoti))\n+  return\n+end function cdcdot\n+program test\n+  implicit none\n+  complex :: cx(100), ct, cdcdot\n+  integer :: i\n+  do i = 1, 100\n+    cx(i) = cmplx(2*i, i)\n+  end do\n+  ct = cdcdot (100, cx)\n+  if (ct.ne.cmplx(10100.0000,30300.0000)) call abort\n+end"}]}