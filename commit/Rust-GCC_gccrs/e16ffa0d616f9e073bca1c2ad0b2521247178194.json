{"sha": "e16ffa0d616f9e073bca1c2ad0b2521247178194", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE2ZmZhMGQ2MTZmOWUwNzNiY2ExYzJhZDBiMjUyMTI0NzE3ODE5NA==", "commit": {"author": {"name": "Hans Boehm", "email": "Hans_Boehm@hp.com", "date": "2001-10-25T17:29:41Z"}, "committer": {"name": "Hans Boehm", "email": "hboehm@gcc.gnu.org", "date": "2001-10-25T17:29:41Z"}, "message": "boehm-gc.h: Call thread local allocation functions if THREAD_LOCAL_ALLOC is defined.\n\n\t* include/boehm-gc.h: Call thread local allocation functions\n\tif THREAD_LOCAL_ALLOC is defined.\n\nFrom-SVN: r46490", "tree": {"sha": "57ca073a3cb01dbb67e2b5e4532948f28c504d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57ca073a3cb01dbb67e2b5e4532948f28c504d56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e16ffa0d616f9e073bca1c2ad0b2521247178194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e16ffa0d616f9e073bca1c2ad0b2521247178194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e16ffa0d616f9e073bca1c2ad0b2521247178194", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e16ffa0d616f9e073bca1c2ad0b2521247178194/comments", "author": null, "committer": null, "parents": [{"sha": "cdd90341d6b8f78828072d555afcb2aaba80465c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd90341d6b8f78828072d555afcb2aaba80465c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd90341d6b8f78828072d555afcb2aaba80465c"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "939f044f4e5bda2c85ef9397d557d57c24bd28c3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16ffa0d616f9e073bca1c2ad0b2521247178194/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16ffa0d616f9e073bca1c2ad0b2521247178194/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e16ffa0d616f9e073bca1c2ad0b2521247178194", "patch": "@@ -1,3 +1,8 @@\n+2001-10-25  Hans Boehm <Hans_Boehm@hp.com>\n+\n+\t* include/boehm-gc.h: Call thread local allocation functions\n+\tif THREAD_LOCAL_ALLOC is defined.\n+\n 2001-10-25  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* java/lang/natClassLoader.cc (_Jv_RegisterClassHookDefault): Use"}, {"sha": "6c60c7945024cce10f9eebbf84b30b0dcccaff10", "filename": "libjava/include/boehm-gc.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16ffa0d616f9e073bca1c2ad0b2521247178194/libjava%2Finclude%2Fboehm-gc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16ffa0d616f9e073bca1c2ad0b2521247178194/libjava%2Finclude%2Fboehm-gc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fboehm-gc.h?ref=e16ffa0d616f9e073bca1c2ad0b2521247178194", "patch": "@@ -28,23 +28,39 @@ extern \"C\"\n \n extern \"C\" void * GC_gcj_malloc(size_t, void *);\n extern \"C\" void * GC_malloc_atomic(size_t);\n+#ifdef THREAD_LOCAL_ALLOC\n+extern \"C\" void * GC_local_gcj_malloc(size_t, void *);\n+extern \"C\" void * GC_local_malloc_atomic(size_t);\n+#endif\n \n inline void *\n _Jv_AllocObj (jsize size, jclass klass)\n {\n   // This should call GC_GCJ_MALLOC, but that would involve\n   // including gc.h.\n+#ifdef THREAD_LOCAL_ALLOC\n+  return GC_local_gcj_malloc (size, klass->vtable);\n+#else \n   return GC_gcj_malloc (size, klass->vtable);\n+#endif\n }\n \n inline void *\n _Jv_AllocPtrFreeObj (jsize size, jclass klass)\n {\n #ifdef JV_HASH_SYNCHRONIZATION\n-  void * obj = GC_malloc_atomic(size);\n+# ifdef THREAD_LOCAL_ALLOC\n+    void * obj = GC_local_malloc_atomic(size);\n+# else\n+    void * obj = GC_malloc_atomic(size);\n+# endif\n   *((_Jv_VTable **) obj) = klass->vtable;\n #else\n-  void * obj = GC_gcj_malloc(size, klass->vtable);\n+# ifdef THREAD_LOCAL_ALLOC\n+    void * obj = GC_local_gcj_malloc(size, klass->vtable);\n+# else\n+    void * obj = GC_gcj_malloc(size, klass->vtable);\n+# endif\n #endif\n   return obj;\n }"}]}