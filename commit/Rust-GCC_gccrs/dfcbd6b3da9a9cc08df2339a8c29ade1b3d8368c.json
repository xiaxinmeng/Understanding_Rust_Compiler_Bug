{"sha": "dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZjYmQ2YjNkYTlhOWNjMDhkZjIzMzlhOGMyOWFkZTFiM2Q4MzY4Yw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2016-12-26T15:14:06Z"}, "committer": {"name": "Alexander Ivchenko", "email": "aivchenk@gcc.gnu.org", "date": "2016-12-26T15:14:06Z"}, "message": "libtool-version: New version.\n\n2016-12-26  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n\n    * mpxrt/libtool-version: New version.\n    * mpxrt/mpxrt-utils.c (set_mpx_rt_stop_handler): New function.\n    (print_help): Add help for CHKP_RT_STOP_HANDLER environment\n    variable.\n    (__mpxrt_init_env_vars): Add initialization of stop_handler.\n    (__mpxrt_stop_handler): New function.\n    (__mpxrt_stop): Ditto.\n    * mpxrt/mpxrt-utils.h (mpx_rt_stop_mode_handler_t): New enum.\n    * mpxrt/mpxrt.c (handler): Replace exit(255) with __mpxrt_stop\n    function call.\n\nFrom-SVN: r243928", "tree": {"sha": "90488c49fb33a067b02d5e4bdc71f03378b35b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90488c49fb33a067b02d5e4bdc71f03378b35b34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c/comments", "author": null, "committer": null, "parents": [{"sha": "1dc9c117782e8f339a484891fa99c8e20404bdf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc9c117782e8f339a484891fa99c8e20404bdf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc9c117782e8f339a484891fa99c8e20404bdf8"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "4f7a68425daa67e5bcd5c1e557141681e0c3ce61", "filename": "libmpx/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c/libmpx%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c/libmpx%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmpx%2FChangeLog?ref=dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c", "patch": "@@ -1,3 +1,16 @@\n+2016-12-26  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\n+\t* mpxrt/libtool-version: New version.\n+\t* mpxrt/mpxrt-utils.c (set_mpx_rt_stop_handler): New function.\n+\t(print_help): Add help for CHKP_RT_STOP_HANDLER environment\n+\tvariable.\n+\t(__mpxrt_init_env_vars): Add initialization of stop_handler.\n+\t(__mpxrt_stop_handler): New function.\n+\t(__mpxrt_stop): Ditto.\n+\t* mpxrt/mpxrt-utils.h (mpx_rt_stop_mode_handler_t): New enum.\n+\t* mpxrt/mpxrt.c (handler): Replace exit(255) with __mpxrt_stop\n+\tfunction call.\n+\n 2016-11-15  Matthias Klose  <doko@ubuntu.com>\n \n \t* configure: Regenerate."}, {"sha": "736d763e6052e273d1e099518302a4b6c5022ef5", "filename": "libmpx/mpxrt/libtool-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c/libmpx%2Fmpxrt%2Flibtool-version", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c/libmpx%2Fmpxrt%2Flibtool-version", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmpx%2Fmpxrt%2Flibtool-version?ref=dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c", "patch": "@@ -3,4 +3,4 @@\n # a separate file so that version updates don't involve re-running\n # automake.\n # CURRENT:REVISION:AGE\n-2:0:0\n+2:1:0"}, {"sha": "63ee7c6ae63f0cc6c6a5f94856d7e348e7453482", "filename": "libmpx/mpxrt/mpxrt-utils.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c/libmpx%2Fmpxrt%2Fmpxrt-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c/libmpx%2Fmpxrt%2Fmpxrt-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmpx%2Fmpxrt%2Fmpxrt-utils.c?ref=dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c", "patch": "@@ -60,6 +60,9 @@\n #define MPX_RT_MODE \"CHKP_RT_MODE\"\n #define MPX_RT_MODE_DEFAULT MPX_RT_COUNT\n #define MPX_RT_MODE_DEFAULT_STR \"count\"\n+#define MPX_RT_STOP_HANDLER \"CHKP_RT_STOP_HANDLER\"\n+#define MPX_RT_STOP_HANDLER_DEFAULT MPX_RT_STOP_HANDLER_ABORT\n+#define MPX_RT_STOP_HANDLER_DEFAULT_STR \"abort\"\n #define MPX_RT_HELP \"CHKP_RT_HELP\"\n #define MPX_RT_ADDPID \"CHKP_RT_ADDPID\"\n #define MPX_RT_BNDPRESERVE \"CHKP_RT_BNDPRESERVE\"\n@@ -84,6 +87,7 @@ typedef struct {\n static int summary;\n static int add_pid;\n static mpx_rt_mode_t mode;\n+static mpx_rt_stop_mode_handler_t stop_handler;\n static env_var_list_t env_var_list;\n static verbose_type verbose_val;\n static FILE *out;\n@@ -226,6 +230,23 @@ set_mpx_rt_mode (const char *env)\n   }\n }\n \n+static mpx_rt_stop_mode_handler_t\n+set_mpx_rt_stop_handler (const char *env)\n+{\n+  if (env == 0)\n+    return MPX_RT_STOP_HANDLER_DEFAULT;\n+  else if (strcmp (env, \"abort\") == 0)\n+    return MPX_RT_STOP_HANDLER_ABORT;\n+  else if (strcmp (env, \"exit\") == 0)\n+    return MPX_RT_STOP_HANDLER_EXIT;\n+  {\n+    __mpxrt_print (VERB_ERROR, \"Illegal value '%s' for %s. Legal values are\"\n+\t\t   \"[abort | exit]\\nUsing default value %s\\n\",\n+\t\t   env, MPX_RT_STOP_HANDLER, MPX_RT_STOP_HANDLER_DEFAULT);\n+    return MPX_RT_STOP_HANDLER_DEFAULT;\n+  }\n+}\n+\n static void\n print_help (void)\n {\n@@ -244,6 +265,11 @@ print_help (void)\n   fprintf (out, \"%s \\t\\t set MPX runtime behavior on #BR exception.\"\n \t   \" [stop | count]\\n\"\n \t   \"\\t\\t\\t [default: %s]\\n\", MPX_RT_MODE, MPX_RT_MODE_DEFAULT_STR);\n+  fprintf (out, \"%s \\t set the handler function MPX runtime will call\\n\"\n+           \"\\t\\t\\t on #BR exception when %s is set to \\'stop\\'.\"\n+\t   \" [abort | exit]\\n\"\n+\t   \"\\t\\t\\t [default: %s]\\n\", MPX_RT_STOP_HANDLER, MPX_RT_MODE,\n+           MPX_RT_STOP_HANDLER_DEFAULT_STR);\n   fprintf (out, \"%s \\t\\t generate out,err file for each process.\\n\"\n \t   \"\\t\\t\\t generated file will be MPX_RT_{OUT,ERR}_FILE.pid\\n\"\n \t   \"\\t\\t\\t [default: no]\\n\", MPX_RT_ADDPID);\n@@ -357,6 +383,10 @@ __mpxrt_init_env_vars (int* bndpreserve)\n   env_var_list_add (MPX_RT_MODE, env);\n   mode = set_mpx_rt_mode (env);\n \n+  env = secure_getenv (MPX_RT_STOP_HANDLER);\n+  env_var_list_add (MPX_RT_STOP_HANDLER, env);\n+  stop_handler = set_mpx_rt_stop_handler (env);\n+\n   env = secure_getenv (MPX_RT_BNDPRESERVE);\n   env_var_list_add (MPX_RT_BNDPRESERVE, env);\n   validate_bndpreserve (env, bndpreserve);\n@@ -487,6 +517,22 @@ __mpxrt_mode (void)\n   return mode;\n }\n \n+mpx_rt_mode_t\n+__mpxrt_stop_handler (void)\n+{\n+  return stop_handler;\n+}\n+\n+void __attribute__ ((noreturn))\n+__mpxrt_stop (void)\n+{\n+  if (__mpxrt_stop_handler () == MPX_RT_STOP_HANDLER_ABORT)\n+    abort ();\n+  else if (__mpxrt_stop_handler () == MPX_RT_STOP_HANDLER_EXIT)\n+    exit (255);\n+  __builtin_unreachable ();\n+}\n+\n void\n __mpxrt_print_summary (uint64_t num_brs, uint64_t l1_size)\n {"}, {"sha": "6da12ccb803e027a6e8101616d517d779dd35e5e", "filename": "libmpx/mpxrt/mpxrt-utils.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c/libmpx%2Fmpxrt%2Fmpxrt-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c/libmpx%2Fmpxrt%2Fmpxrt-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmpx%2Fmpxrt%2Fmpxrt-utils.h?ref=dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c", "patch": "@@ -54,6 +54,11 @@ typedef enum {\n   MPX_RT_STOP\n } mpx_rt_mode_t;\n \n+typedef enum {\n+  MPX_RT_STOP_HANDLER_ABORT,\n+  MPX_RT_STOP_HANDLER_EXIT\n+} mpx_rt_stop_mode_handler_t;\n+\n void __mpxrt_init_env_vars (int* bndpreserve);\n void __mpxrt_write_uint (verbose_type vt, uint64_t val, unsigned base);\n void __mpxrt_write (verbose_type vt, const char* str);"}, {"sha": "76d11f71fd1c7173842101efd6b25213cbc80064", "filename": "libmpx/mpxrt/mpxrt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c/libmpx%2Fmpxrt%2Fmpxrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c/libmpx%2Fmpxrt%2Fmpxrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmpx%2Fmpxrt%2Fmpxrt.c?ref=dfcbd6b3da9a9cc08df2339a8c29ade1b3d8368c", "patch": "@@ -252,7 +252,7 @@ handler (int sig __attribute__ ((unused)),\n \t  uctxt->uc_mcontext.gregs[REG_IP_IDX] =\n \t    (greg_t)get_next_inst_ip ((uint8_t *)ip);\n \t  if (__mpxrt_mode () == MPX_RT_STOP)\n-\t    exit (255);\n+\t    __mpxrt_stop ();\n \t  return;\n \n \tdefault:\n@@ -269,7 +269,7 @@ handler (int sig __attribute__ ((unused)),\n       __mpxrt_write (VERB_ERROR, \", ip = 0x\");\n       __mpxrt_write_uint (VERB_ERROR, ip, 16);\n       __mpxrt_write (VERB_ERROR, \"\\n\");\n-      exit (255);\n+      __mpxrt_stop ();\n     }\n   else\n     {\n@@ -278,7 +278,7 @@ handler (int sig __attribute__ ((unused)),\n       __mpxrt_write (VERB_ERROR, \"! at 0x\");\n       __mpxrt_write_uint (VERB_ERROR, ip, 16);\n       __mpxrt_write (VERB_ERROR, \"\\n\");\n-      exit (255);\n+      __mpxrt_stop ();\n     }\n }\n "}]}