{"sha": "0c506265dd18ed7669eac58c027320b5c16b2b6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM1MDYyNjVkZDE4ZWQ3NjY5ZWFjNThjMDI3MzIwYjVjMTZiMmI2ZQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-30T08:58:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-30T08:58:05Z"}, "message": "[Ada] Minor reformatting\n\n2018-05-30  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb, exp_ch5.adb, exp_ch7.adb, exp_unst.adb, sem_eval.adb:\n\tMinor reformatting.\n\nFrom-SVN: r260941", "tree": {"sha": "b049a71db5f3083ef7fa357a8db5d90d78f60fac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b049a71db5f3083ef7fa357a8db5d90d78f60fac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c506265dd18ed7669eac58c027320b5c16b2b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c506265dd18ed7669eac58c027320b5c16b2b6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c506265dd18ed7669eac58c027320b5c16b2b6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c506265dd18ed7669eac58c027320b5c16b2b6e/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42e508b45d21b195109424f62f454fa619f1cc29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e508b45d21b195109424f62f454fa619f1cc29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e508b45d21b195109424f62f454fa619f1cc29"}], "stats": {"total": 112, "additions": 65, "deletions": 47}, "files": [{"sha": "d7d48ecf495ddb3624a0d9464560db81af237d0d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0c506265dd18ed7669eac58c027320b5c16b2b6e", "patch": "@@ -1,3 +1,8 @@\n+2018-05-30  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb, exp_ch5.adb, exp_ch7.adb, exp_unst.adb, sem_eval.adb:\n+\tMinor reformatting.\n+\n 2018-05-30  Pascal Obry  <obry@adacore.com>\n \n \t* libgnat/g-comlin.ads (Value_Callback, Define_Switch): New."}, {"sha": "584e74734bcf3658f34fea561cee8c8182101192", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=0c506265dd18ed7669eac58c027320b5c16b2b6e", "patch": "@@ -3065,6 +3065,7 @@ package body Checks is\n                      --  If definitely not in range, warn\n \n                      elsif Lov > Hi or else Hiv < Lo then\n+\n                         --  Ignore out of range values for System.Priority in\n                         --  CodePeer mode since the actual target compiler may\n                         --  provide a wider range."}, {"sha": "e0cff915bca95334ee54c1f9af4f9c2f05a737e6", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=0c506265dd18ed7669eac58c027320b5c16b2b6e", "patch": "@@ -3286,6 +3286,7 @@ package body Exp_Ch5 is\n              Parameter_Associations => New_List (\n                Convert_To_Iterable_Type (Container, Loc),\n                New_Occurrence_Of (Cursor, Loc))));\n+\n          Set_Statements (New_Loop,\n            New_List\n              (Make_Block_Statement (Loc,"}, {"sha": "8f510c6042019ce0cf03d7745ae68a49f729f4a0", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=0c506265dd18ed7669eac58c027320b5c16b2b6e", "patch": "@@ -3969,8 +3969,8 @@ package body Exp_Ch7 is\n \n    begin\n       --  For restricted run-time libraries (Ravenscar), tasks are\n-      --  non-terminating and they can only appear at library level, so we do\n-      --  not want finalization of task objects.\n+      --  non-terminating and they can only appear at library level,\n+      --  so we do not want finalization of task objects.\n \n       if Restricted_Profile then\n          return Empty;\n@@ -4014,37 +4014,42 @@ package body Exp_Ch7 is\n               Make_Defining_Identifier (Loc,\n                 Chars => New_Internal_Name ('I'));\n \n-            Elab_Body := Make_Subprogram_Body (Loc,\n-              Specification =>\n-                Make_Procedure_Specification (Loc,\n-                  Defining_Unit_Name => Elab_Proc),\n-              Declarations => New_List,\n-              Handled_Statement_Sequence =>\n-                 Relocate_Node (Handled_Statement_Sequence (N)));\n+            Elab_Body :=\n+              Make_Subprogram_Body (Loc,\n+                Specification              =>\n+                  Make_Procedure_Specification (Loc,\n+                    Defining_Unit_Name => Elab_Proc),\n+                Declarations               => New_List,\n+                Handled_Statement_Sequence =>\n+                  Relocate_Node (Handled_Statement_Sequence (N)));\n+\n+            Elab_Call :=\n+              Make_Procedure_Call_Statement (Loc,\n+                Name => New_Occurrence_Of (Elab_Proc, Loc));\n \n-            Elab_Call := Make_Procedure_Call_Statement (Loc,\n-               New_Occurrence_Of (Elab_Proc, Loc));\n             Append_To (Declarations (N), Elab_Body);\n             Analyze (Elab_Body);\n             Set_Has_Nested_Subprogram (Elab_Proc);\n \n             Set_Handled_Statement_Sequence (N,\n-               Make_Handled_Sequence_Of_Statements (Loc,\n-                  Statements => New_List (Elab_Call)));\n+              Make_Handled_Sequence_Of_Statements (Loc,\n+                Statements => New_List (Elab_Call)));\n+\n             Analyze (Elab_Call);\n \n-            --  The scope of all blocks in the elaboration code is\n-            --  now the constructed elaboration procedure. Nested\n-            --  subprograms within those blocks will have activation\n-            --  records if they contain references to entities in the\n-            --  enclosing block.\n+            --  The scope of all blocks in the elaboration code is now the\n+            --  constructed elaboration procedure. Nested subprograms within\n+            --  those blocks will have activation records if they contain\n+            --  references to entities in the enclosing block.\n+\n+            Stat :=\n+              First (Statements (Handled_Statement_Sequence (Elab_Body)));\n \n-            Stat := First\n-                      (Statements (Handled_Statement_Sequence (Elab_Body)));\n             while Present (Stat) loop\n                if Nkind (Stat) = N_Block_Statement then\n                   Set_Scope (Entity (Identifier (Stat)), Elab_Proc);\n                end if;\n+\n                Next (Stat);\n             end loop;\n          end if;"}, {"sha": "b394f21cee8081f52896999c30a3759dd2e28530", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=0c506265dd18ed7669eac58c027320b5c16b2b6e", "patch": "@@ -619,6 +619,7 @@ package body Exp_Unst is\n \n             procedure Register_Subprogram (E : Entity_Id; Bod : Node_Id) is\n                L : constant Nat := Get_Level (Subp, E);\n+\n             begin\n                Subps.Append\n                  ((Ent           => E,\n@@ -635,6 +636,7 @@ package body Exp_Unst is\n                    ARECnPT       => Empty,\n                    ARECnP        => Empty,\n                    ARECnU        => Empty));\n+\n                Set_Subps_Index (E, UI_From_Int (Subps.Last));\n             end Register_Subprogram;\n \n@@ -645,10 +647,12 @@ package body Exp_Unst is\n \n                --  Record a subprogram call\n \n-               when N_Procedure_Call_Statement | N_Function_Call =>\n+               when N_Function_Call\n+                  | N_Procedure_Call_Statement\n+               =>\n                   --  We are only interested in direct calls, not indirect\n-                  --  calls (where Name (N) is an explicit dereference).\n-                  --  at least for now!\n+                  --  calls (where Name (N) is an explicit dereference) at\n+                  --  least for now!\n \n                   if Nkind (Name (N)) in N_Has_Entity then\n                      Ent := Entity (Name (N));\n@@ -670,10 +674,10 @@ package body Exp_Unst is\n                   --  for uplevel references.\n \n                   declare\n-                     Subp   : Entity_Id;\n                      Actual : Entity_Id;\n-                     Formal : Node_Id;\n                      DT     : Boolean := False;\n+                     Formal : Node_Id;\n+                     Subp   : Entity_Id;\n \n                   begin\n                      if Nkind (Name (N)) = N_Explicit_Dereference then\n@@ -697,18 +701,18 @@ package body Exp_Unst is\n                      end loop;\n                   end;\n \n-               --  An At_End_Proc in a statement sequence indicates that\n-               --  there's a call from the enclosing construct or block\n-               --  to that subprogram. As above, the called entity must\n-               --  be local and not imported.\n+               --  An At_End_Proc in a statement sequence indicates that there\n+               --  is a call from the enclosing construct or block to that\n+               --  subprogram. As above, the called entity must be local and\n+               --  not imported.\n \n                when N_Handled_Sequence_Of_Statements =>\n                   if Present (At_End_Proc (N))\n                     and then Scope_Within (Entity (At_End_Proc (N)), Subp)\n                     and then not Is_Imported (Entity (At_End_Proc (N)))\n                   then\n-                     Append_Unique_Call ((N, Current_Subprogram,\n-                                           Entity (At_End_Proc (N))));\n+                     Append_Unique_Call\n+                       ((N, Current_Subprogram, Entity (At_End_Proc (N))));\n                   end if;\n \n                --  A 'Access reference is a (potential) call.\n@@ -759,8 +763,8 @@ package body Exp_Unst is\n                               declare\n                                  DT : Boolean := False;\n                               begin\n-                                 Check_Static_Type (Etype (Prefix (N)),\n-                                                    Empty, DT);\n+                                 Check_Static_Type\n+                                   (Etype (Prefix (N)), Empty, DT);\n                               end;\n \n                               return OK;\n@@ -818,6 +822,7 @@ package body Exp_Unst is\n                   end if;\n \n                   --  Make new entry in subprogram table if not already made\n+\n                   Register_Subprogram (Ent, N);\n \n                   --  We make a recursive call to scan the subprogram body, so\n@@ -852,8 +857,8 @@ package body Exp_Unst is\n \n                   return Skip;\n \n-               --  If we have a body stub, visit the associated subunit,\n-               --  which is a semantic descendant of the stub.\n+               --  If we have a body stub, visit the associated subunit, which\n+               --  is a semantic descendant of the stub.\n \n                when N_Body_Stub =>\n                   Visit (Library_Unit (N));\n@@ -885,8 +890,8 @@ package body Exp_Unst is\n                --  Otherwise record an uplevel reference\n \n                when others =>\n-                  if\n-                    Nkind (N) in N_Has_Entity and then Present (Entity (N))\n+                  if Nkind (N) in N_Has_Entity\n+                    and then Present (Entity (N))\n                   then\n                      Ent := Entity (N);\n \n@@ -900,14 +905,14 @@ package body Exp_Unst is\n                        and then\n                          Chars (Enclosing_Subprogram (Ent)) /= Name_uParent\n \n-                      --  Constants and variables are potentially\n-                      --  uplevel references to global declarations.\n+                        --  Constants and variables are potentially uplevel\n+                        --  references to global declarations.\n \n                        and then\n                          (Ekind_In (Ent, E_Constant, E_Variable)\n \n-                     --  Formals are interesting, but not if being used as mere\n-                     --  names of parameters for name notation calls.\n+                        --  Formals are interesting, but not if being used as\n+                        --  mere names of parameters for name notation calls.\n \n                         or else\n                           (Is_Formal (Ent)\n@@ -916,7 +921,7 @@ package body Exp_Unst is\n                                and then Selector_Name (Parent (N)) = N))\n \n                         --  Types other than known Is_Static types are\n-                        --  potentially interesting\n+                        --  potentially interesting.\n \n                         or else (Is_Type (Ent)\n                                   and then not Is_Static_Type (Ent)))\n@@ -2037,13 +2042,13 @@ package body Exp_Unst is\n          return;\n       end if;\n \n-      --  A specification will contain bodies if it contains instantiations\n-      --  so examine package or subprogram declaration of the main unit,\n-      --  when it is present.\n+      --  A specification will contain bodies if it contains instantiations so\n+      --  examine package or subprogram declaration of the main unit, when it\n+      --  is present.\n \n       if Nkind (Unit (N)) = N_Package_Body\n-          or else (Nkind (Unit (N)) = N_Subprogram_Body\n-                     and then not Acts_As_Spec (N))\n+        or else (Nkind (Unit (N)) = N_Subprogram_Body\n+                  and then not Acts_As_Spec (N))\n       then\n          Do_Search (Library_Unit (N));\n       end if;"}, {"sha": "59e867256ea51960614163616f263762e3e7e11c", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c506265dd18ed7669eac58c027320b5c16b2b6e/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=0c506265dd18ed7669eac58c027320b5c16b2b6e", "patch": "@@ -574,6 +574,7 @@ package body Sem_Eval is\n             null;\n \n          elsif Is_Out_Of_Range (N, T, Assume_Valid => True) then\n+\n             --  Ignore out of range values for System.Priority in CodePeer\n             --  mode since the actual target compiler may provide a wider\n             --  range."}]}