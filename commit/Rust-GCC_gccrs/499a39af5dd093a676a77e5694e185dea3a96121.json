{"sha": "499a39af5dd093a676a77e5694e185dea3a96121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk5YTM5YWY1ZGQwOTNhNjc2YTc3ZTU2OTRlMTg1ZGVhM2E5NjEyMQ==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2019-10-30T14:15:02Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-10-30T14:15:02Z"}, "message": "msp430.c (msp430_expand_helper): Support expansion of calls to __mspabi_mpy* functions.\n\n2019-10-30  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/msp430.c (msp430_expand_helper): Support expansion of\n\tcalls to __mspabi_mpy* functions.\n\t* config/msp430/msp430.md (mulhisi3): New define_expand.\n\t(umulhisi3): New define_expand.\n\t(*mulhisi3_inline): Use old mulhisi3 define_insn.\n\t(*umulhisi3_inline): Use old umulhisi3 define_insn.\n\nFrom-SVN: r277624", "tree": {"sha": "ad8a0ba08c82876707fd78d2df6c24cbe218d820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad8a0ba08c82876707fd78d2df6c24cbe218d820"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/499a39af5dd093a676a77e5694e185dea3a96121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499a39af5dd093a676a77e5694e185dea3a96121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/499a39af5dd093a676a77e5694e185dea3a96121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499a39af5dd093a676a77e5694e185dea3a96121/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0149b1b4d7f0d3456e77c036a56c7003ca8a1b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0149b1b4d7f0d3456e77c036a56c7003ca8a1b64"}], "stats": {"total": 124, "additions": 110, "deletions": 14}, "files": [{"sha": "70412cdb2f30b5ca79c59f649a800fdf7917e768", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499a39af5dd093a676a77e5694e185dea3a96121/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499a39af5dd093a676a77e5694e185dea3a96121/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=499a39af5dd093a676a77e5694e185dea3a96121", "patch": "@@ -1,3 +1,12 @@\n+2019-10-30  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.c (msp430_expand_helper): Support expansion of\n+\tcalls to __mspabi_mpy* functions.\n+\t* config/msp430/msp430.md (mulhisi3): New define_expand.\n+\t(umulhisi3): New define_expand.\n+\t(*mulhisi3_inline): Use old mulhisi3 define_insn.\n+\t(*umulhisi3_inline): Use old umulhisi3 define_insn.\n+\n 2019-10-30  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.c (msp430_check_index_not_high_mem): New."}, {"sha": "c058690e82703bf7c3ad51814e339590bd1a5f4e", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 57, "deletions": 12, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499a39af5dd093a676a77e5694e185dea3a96121/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499a39af5dd093a676a77e5694e185dea3a96121/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=499a39af5dd093a676a77e5694e185dea3a96121", "patch": "@@ -53,6 +53,7 @@\n \f\n \n static void msp430_compute_frame_info (void);\n+static bool use_32bit_hwmult (void);\n \n \f\n \n@@ -2691,7 +2692,7 @@ void\n msp430_expand_helper (rtx *operands, const char *helper_name,\n \t\t      bool const_variants)\n {\n-  rtx c, f;\n+  rtx c, fusage, fsym;\n   char *helper_const = NULL;\n   int arg1 = 12;\n   int arg2 = 13;\n@@ -2700,8 +2701,14 @@ msp430_expand_helper (rtx *operands, const char *helper_name,\n   machine_mode arg1mode = GET_MODE (operands[1]);\n   machine_mode arg2mode = GET_MODE (operands[2]);\n   int have_430x = msp430x ? 1 : 0;\n+  int expand_mpy = strncmp (helper_name, \"__mspabi_mpy\",\n+\t\t\t    sizeof (\"__mspabi_mpy\") - 1) == 0;\n+  /* This function has been used incorrectly if CONST_VARIANTS is TRUE for a\n+     hwmpy function.  */\n+  gcc_assert (!(expand_mpy && const_variants));\n \n-  if (CONST_INT_P (operands[2]))\n+  /* Emit size-optimal insns for small shifts we can easily do inline.  */\n+  if (CONST_INT_P (operands[2]) && !expand_mpy)\n     {\n       int i;\n \n@@ -2718,6 +2725,10 @@ msp430_expand_helper (rtx *operands, const char *helper_name,\n \t}\n     }\n \n+  if (arg1mode != VOIDmode && arg2mode != VOIDmode)\n+    /* Modes of arguments must be equal if not constants.  */\n+    gcc_assert (arg1mode == arg2mode);\n+\n   if (arg1mode == VOIDmode)\n     arg1mode = arg0mode;\n   if (arg2mode == VOIDmode)\n@@ -2730,12 +2741,13 @@ msp430_expand_helper (rtx *operands, const char *helper_name,\n     }\n   else if (arg1mode == DImode)\n     {\n-      /* Shift value in R8:R11, shift amount in R12.  */\n       arg1 = 8;\n       arg1sz = 4;\n       arg2 = 12;\n     }\n \n+  /* Use the \"const_variant\" of a shift library function if requested.\n+     These are faster, but have larger code size.  */\n   if (const_variants\n       && CONST_INT_P (operands[2])\n       && INTVAL (operands[2]) >= 1\n@@ -2749,25 +2761,58 @@ msp430_expand_helper (rtx *operands, const char *helper_name,\n \t\t(int) INTVAL (operands[2]));\n     }\n \n+  /* Setup the arguments to the helper function.  */\n   emit_move_insn (gen_rtx_REG (arg1mode, arg1),\n \t\t  operands[1]);\n   if (!helper_const)\n     emit_move_insn (gen_rtx_REG (arg2mode, arg2),\n \t\t    operands[2]);\n \n-  c = gen_call_value_internal (gen_rtx_REG (arg0mode, 12),\n-\t\t\t       gen_rtx_SYMBOL_REF (VOIDmode, helper_const\n-\t\t\t\t\t\t   ? helper_const\n-\t\t\t\t\t\t   : helper_name),\n-\t\t\t       GEN_INT (0));\n+  if (expand_mpy)\n+    {\n+      if (msp430_use_f5_series_hwmult ())\n+\tfsym = gen_rtx_SYMBOL_REF (VOIDmode, concat (helper_name,\n+\t\t\t\t\t\t     \"_f5hw\", NULL));\n+      else if (use_32bit_hwmult ())\n+\t{\n+\t  /* When the arguments are 16-bits, the 16-bit hardware multiplier is\n+\t     used.  */\n+\t  if (arg1mode == HImode)\n+\t    fsym = gen_rtx_SYMBOL_REF (VOIDmode, concat (helper_name,\n+\t\t\t\t\t\t\t \"_hw\", NULL));\n+\t  else\n+\t    fsym = gen_rtx_SYMBOL_REF (VOIDmode, concat (helper_name,\n+\t\t\t\t\t\t\t \"_hw32\", NULL));\n+\t}\n+      /* 16-bit hardware multiply.  */\n+      else if (msp430_has_hwmult ())\n+\tfsym = gen_rtx_SYMBOL_REF (VOIDmode, concat (helper_name,\n+\t\t\t\t\t\t     \"_hw\", NULL));\n+      else\n+\tfsym = gen_rtx_SYMBOL_REF (VOIDmode, helper_name);\n+    }\n+  else\n+    fsym = gen_rtx_SYMBOL_REF (VOIDmode,\n+\t\t\t       helper_const ? helper_const : helper_name);\n+\n+  c = gen_call_value_internal (gen_rtx_REG (arg0mode, 12), fsym, GEN_INT (0));\n+\n   c = emit_call_insn (c);\n   RTL_CONST_CALL_P (c) = 1;\n \n-  f = 0;\n-  use_regs (&f, arg1, arg1sz);\n+  /* Add register usage information for the arguments to the call.  */\n+  fusage = NULL;\n+  use_regs (&fusage, arg1, arg1sz);\n   if (!helper_const)\n-    use_regs (&f, arg2, 1);\n-  add_function_usage_to (c, f);\n+    {\n+      /* If we are expanding a shift, we only need to use the low register\n+\t for the shift amount.  */\n+      if (!expand_mpy)\n+\tuse_regs (&fusage, arg2, 1);\n+      else\n+\tuse_regs (&fusage, arg2, arg1sz);\n+    }\n+  add_function_usage_to (c, fusage);\n \n   emit_move_insn (operands[0],\n \t\t  /* Return value will always start in R12.  */"}, {"sha": "c3d85071a58b8f4c2826dc7e723dbe6d80fe3c97", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499a39af5dd093a676a77e5694e185dea3a96121/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499a39af5dd093a676a77e5694e185dea3a96121/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=499a39af5dd093a676a77e5694e185dea3a96121", "patch": "@@ -1642,7 +1642,49 @@\n   \"NOP\"\n   )\n \n-(define_insn \"mulhisi3\"\n+; libgcc helper functions for widening multiplication aren't currently\n+; generated by gcc, so we can't catch them later and map them to the mspabi\n+; functions.\n+; We catch the patterns here and either generate a call to the helper function,\n+; or emit the hardware multiply instruction sequence inline.\n+;\n+; If we don't have hardware multiply support, it will generally be slower and\n+; result in larger code to call the mspabi library function to perform the\n+; widening multiplication than just leaving GCC to widen the arguments itself.\n+;\n+; We don't use library functions for SImode->DImode widening since its always\n+; larger and slower than letting GCC widen the arguments inline.\n+(define_expand \"mulhisi3\"\n+  [(set (match_operand:SI\t\t\t   0 \"register_operand\" \"=r\")\n+\t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n+  \"msp430_has_hwmult ()\"\n+  {\n+    /* Leave the other case for the inline insn.  */\n+    if (!(optimize > 2 && msp430_has_hwmult ()))\n+    {\n+      msp430_expand_helper (operands, \"__mspabi_mpysl\", false);\n+      DONE;\n+    }\n+  }\n+)\n+\n+(define_expand \"umulhisi3\"\n+  [(set (match_operand:SI\t\t\t   0 \"register_operand\" \"=r\")\n+\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n+  \"msp430_has_hwmult ()\"\n+  {\n+    /* Leave the other case for the inline insn.  */\n+    if (!(optimize > 2 && msp430_has_hwmult ()))\n+    {\n+      msp430_expand_helper (operands, \"__mspabi_mpyul\", false);\n+      DONE;\n+    }\n+  }\n+)\n+\n+(define_insn \"*mulhisi3_inline\"\n   [(set (match_operand:SI                          0 \"register_operand\" \"=r\")\n \t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n \t\t (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n@@ -1655,7 +1697,7 @@\n   \"\n )\n \n-(define_insn \"umulhisi3\"\n+(define_insn \"*umulhisi3_inline\"\n   [(set (match_operand:SI                          0 \"register_operand\" \"=r\")\n \t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n \t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]"}]}