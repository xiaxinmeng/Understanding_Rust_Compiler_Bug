{"sha": "18d5e416f8b6ca75796803e6957aaa513fcf51dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThkNWU0MTZmOGI2Y2E3NTc5NjgwM2U2OTU3YWFhNTEzZmNmNTFkYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-01-11T16:44:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-01-11T16:44:56Z"}, "message": "re PR tree-optimization/1046 (gcc less efficient than jdk for recursion with -finline-functions)\n\n\tPR tree-optimization/1046\n\t* tree-tailcall.c (suitable_for_tail_call_opt_p): Use TREE_ADDRESSABLE\n\twhen alias info is not ready.\n\t(pass_tail_recursion): Do not require aliasing.\n\t* tree-ssa-copyrename.c (pass_rename_ssa_cop): Likewise.\n\t* tree-ssa-ccp.c (pass_ccp, pass_fold_builtins): Likewise.\n\t* tree-ssa-copy.c (pass_copy_prop): Likewise.\n\t* tree-ssa-forwprop.c (pass_forwprop): Likewise.\n\t* tree-ssa-dce.c (pass_dce, pass_dce_loop, pass_cd_dce): Likewise.\n\t* passes.c (init_optimization_passes): Execute rename_ssa_copies,\n\tccp, forwprop, copy_prop, merge_phi, copy_prop, dce and tail recursion\n\tbefore inlining.\n\t* tree-ssa-operands.c (add_virtual_operand, get_indirect_ref_operand):\n\tWhen aliasing is not build, mark statement as volatile.\n\nFrom-SVN: r120680", "tree": {"sha": "40aa32737d2e736bae72a8df68748c9a126108d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40aa32737d2e736bae72a8df68748c9a126108d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18d5e416f8b6ca75796803e6957aaa513fcf51dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d5e416f8b6ca75796803e6957aaa513fcf51dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d5e416f8b6ca75796803e6957aaa513fcf51dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d5e416f8b6ca75796803e6957aaa513fcf51dc/comments", "author": null, "committer": null, "parents": [{"sha": "78392049f6da9177ce36eb354b8e65f24e602112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78392049f6da9177ce36eb354b8e65f24e602112", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78392049f6da9177ce36eb354b8e65f24e602112"}], "stats": {"total": 98, "additions": 70, "deletions": 28}, "files": [{"sha": "c63f07418b73ecce86a5d62b7daa4431c3809a62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -1,3 +1,18 @@\n+2007-01-11  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/tailrecursion-4.c: Update dump file.\n+\t* gcc.dg/tree-ssa/tailrecursion-1.c: Update dump file.\n+\t* gcc.dg/tree-ssa/tailrecursion-2.c: Update dump file.\n+\t* gcc.dg/tree-ssa/tailrecursion-3.c: Update dump file.\n+\t* gcc.dg/tree-ssa/pr21658.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr15349.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr25501.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp11.c: Make more complex so it still test\n+\ttransformation in question.\n+\t* gcc.dg/tree-ssa/vrp05.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr20701.c: Likewise.\n+\t* gcc.dg/always_inline3.c: Likewise.\n+\n 2007-01-10  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28999"}, {"sha": "e1a337c2864bac3c9cb194c91f6d5ea9c2b3d0c7", "filename": "gcc/testsuite/gcc.dg/always_inline3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -1,8 +1,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-Winline -O2\" } */\n+void do_something_evil (void);\n inline __attribute__ ((always_inline)) void\n q2(void)\n { \t\t\t\t/* { dg-error \"recursive\" \"\" } */\n+  do_something_evil ();\n   q2(); \t\t\t/* { dg-error \"called from here\" \"\" } */\n   q2(); \t\t\t/* { dg-error \"called from here\" \"\" } */\n }"}, {"sha": "080aa81b504e56fdf139d911dc6f57e1a6ff2913", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr15349.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15349.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15349.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr15349.c?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -22,5 +22,5 @@ foo (int a, int b)\n   return t;\n }\n \n-/* { dg-final { scan-tree-dump-times \"PHI\" 1 \"mergephi\"} } */\n-/* { dg-final { cleanup-tree-dump \"mergephi\" } } */\n+/* { dg-final { scan-tree-dump-times \"PHI\" 1 \"mergephi2\"} } */\n+/* { dg-final { cleanup-tree-dump \"mergephi2\" } } */"}, {"sha": "6721155fc9a251b5d30858208223de89a2ccb7fe", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20701.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -1,30 +1,39 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp2 -fno-early-inlining\" } */\n \n typedef struct {\n   int code;\n } *rtx;\n \n+static inline void *zero ()\n+{\n+  return 0;\n+}\n+static inline int three ()\n+{\n+  return 3;\n+}\n+\n int\n can_combine_p (rtx insn, rtx elt)\n {\n   rtx set;\n \n-  set = 0;\n-  if (insn->code == 3)\n+  set = zero ();\n+  if (insn->code == three ())\n     set = insn;\n   else\n     {\n       set = elt;\n-      if (set == 0)\n+      if (set == zero ())\n \treturn 0;\n     }\n \n-  if (set == 0)\n+  if (set == zero ())\n     return 1;\n \n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Folding predicate.*to 0\" 1 \"vrp1\" } } */\n-/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate.*to 0\" 1 \"vrp2\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp2\" } } */"}, {"sha": "16893b071f346ec3e1e83f3c688a8c0c56ef27bc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21658.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21658.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21658.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21658.c?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -17,5 +17,5 @@ f (void)\n     link_error ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"Folded statement: if \" 1 \"ccp\"} } */\n-/* { dg-final { cleanup-tree-dump \"ccp\" } } */\n+/* { dg-final { scan-tree-dump-times \"Folded statement: if \" 1 \"ccp1\"} } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "7fb2bcc8ac6dbca126cede21c214fbedb410cd82", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr25501.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25501.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25501.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25501.c?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -32,5 +32,5 @@ foo (int a)\n   return 13;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Removing basic block\" 0 \"mergephi\"} } */\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 0 \"mergephi1\"} } */\n /* { dg-final { cleanup-tree-dump \"mergephi\" } } */"}, {"sha": "64de788ec6df681ba8045a3c72e321f547820700", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailrecursion-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-1.c?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -8,5 +8,5 @@ t(int a)\n \telse\n \t\treturn 0;\n }\n-/* { dg-final { scan-tree-dump-times \"Eliminated tail recursion\" 1 \"tailr\"} } */\n-/* { dg-final { cleanup-tree-dump \"tailr\" } } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated tail recursion\" 1 \"tailr1\"} } */\n+/* { dg-final { cleanup-tree-dump \"tailr1\" } } */"}, {"sha": "9ef4fdb6d2e31b5e715f5f5c554898be93faf53b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailrecursion-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-2.c?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -9,5 +9,5 @@ t(char *a)\n \telse\n \t\treturn 0;\n }\n-/* { dg-final { scan-tree-dump-times \"Eliminated tail recursion\" 1 \"tailr\"} } */\n-/* { dg-final { cleanup-tree-dump \"tailr\" } } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated tail recursion\" 1 \"tailr1\"} } */\n+/* { dg-final { cleanup-tree-dump \"tailr1\" } } */"}, {"sha": "37b19af0e54045c19fdce078ffe7592b4eff9eca", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailrecursion-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-3.c?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -12,5 +12,5 @@ t(int a)\n \t\tr=r;\n \treturn r;\n }\n-/* { dg-final { scan-tree-dump-times \"Eliminated tail recursion\" 1 \"tailr\"} } */\n-/* { dg-final { cleanup-tree-dump \"tailr\" } } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated tail recursion\" 1 \"tailr1\"} } */\n+/* { dg-final { cleanup-tree-dump \"tailr1\" } } */"}, {"sha": "34689e64168295d670865875724516937a4c15ed", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailrecursion-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-4.c?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -14,5 +14,5 @@ t(int a)\n \t\tr=r;\n \treturn r;\n }\n-/* { dg-final { scan-tree-dump-times \"Eliminated tail recursion\" 2 \"tailr\"} } */\n-/* { dg-final { cleanup-tree-dump \"tailr\" } } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated tail recursion\" 2 \"tailr1\"} } */\n+/* { dg-final { cleanup-tree-dump \"tailr1\" } } */"}, {"sha": "7b8b61b44431366181b6cb6f799b5638da1b9b0c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp05.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp05.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp05.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp05.c?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -1,19 +1,29 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining\" } */\n+\n+\n+inline int ten()\n+{\n+  return 10;\n+}\n+inline int zero()\n+{\n+  return 0;\n+}\n \n foo (int k, int j)\n {\n-  if (k >= 10)\n+  if (k >= ten())\n     {\n       if (j > k)\n \t{\n \t  /* We should fold this to if (1).  */\n-\t  if (j > 0)\n+\t  if (j > zero())\n \t    return j;\n \t}\n     }\n \n-  return j;\n+  return j+1;\n }\n \n /* { dg-final { scan-tree-dump-times \"Folding predicate j_.*to 1\" 1 \"vrp1\" } } */"}, {"sha": "69e3e74d8097942a76693bcc6fcc5142120fcce4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp11.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d5e416f8b6ca75796803e6957aaa513fcf51dc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp11.c?ref=18d5e416f8b6ca75796803e6957aaa513fcf51dc", "patch": "@@ -1,5 +1,11 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining\" } */\n+\n+int\n+bounce (int arg)\n+{\n+  return arg;\n+}\n \n foo (int k, int j, int z)\n {\n@@ -8,13 +14,13 @@ foo (int k, int j, int z)\n       if (j > k)\n \t{\n \t  /* We should fold this to if (1).  */\n-\t  if (j > z)\n+\t  if (j > bounce (z))\n \t    return j;\n \t}\n     }\n \n-  return j;\n+  return j+1;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Folding predicate.*to 1\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate.*to 1\" 1 \"vrp2\" } } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}]}