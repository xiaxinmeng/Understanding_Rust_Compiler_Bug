{"sha": "fb488cba571539b6644e8f99f1dd997cdb4c82c1", "node_id": "C_kwDOANBUbNoAKGZiNDg4Y2JhNTcxNTM5YjY2NDRlOGY5OWYxZGQ5OTdjZGI0YzgyYzE", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-03-24T13:02:29Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-03-24T13:02:29Z"}, "message": "hardened conditionals: drop copied identifiers\n\nThe copies of identifiers, indended to associate hardening SSA\ntemporaries to the original variables they refer to, end up causing\n-fcompare-debug to fail, because DECL_UIDs are not identical, and the\nnouid flag used in compare-debug dumps doesn't affect the uids in\nnaked identifiers, so the divergence becomes apparent.\n\nThis patch drops the naked identifiers.  Though somewhat desirable,\nthey're not necessary.\n\n\nfor  gcc/ChangeLog\n\n\tPR debug/104564\n\t* gimple-harden-conditionals.cc (detach_value): Keep temps\n\tanonymous.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR debug/104564\n\t* c-c++-common/torture/harden-comp.c: Adjust.\n\t* c-c++-common/torture/harden-cond.c: Adjust.", "tree": {"sha": "cbf936383d278703c5dc1f1fd15158e4bb344cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbf936383d278703c5dc1f1fd15158e4bb344cda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb488cba571539b6644e8f99f1dd997cdb4c82c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb488cba571539b6644e8f99f1dd997cdb4c82c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb488cba571539b6644e8f99f1dd997cdb4c82c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb488cba571539b6644e8f99f1dd997cdb4c82c1/comments", "author": null, "committer": null, "parents": [{"sha": "b8c4171ebd72079e55aceadbcfc883f517cdf895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c4171ebd72079e55aceadbcfc883f517cdf895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c4171ebd72079e55aceadbcfc883f517cdf895"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "c7e5e077a74f68fe2e38c6ec99ca5eb435f37ad2", "filename": "gcc/gimple-harden-conditionals.cc", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb488cba571539b6644e8f99f1dd997cdb4c82c1/gcc%2Fgimple-harden-conditionals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb488cba571539b6644e8f99f1dd997cdb4c82c1/gcc%2Fgimple-harden-conditionals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-harden-conditionals.cc?ref=fb488cba571539b6644e8f99f1dd997cdb4c82c1", "patch": "@@ -126,14 +126,11 @@ detach_value (location_t loc, gimple_stmt_iterator *gsip, tree val)\n       return val;\n     }\n \n-  /* Create a SSA \"copy\" of VAL.  This could be an anonymous\n-     temporary, but it's nice to have it named after the corresponding\n-     variable.  Alas, when VAL is a DECL_BY_REFERENCE RESULT_DECL,\n-     setting (a copy of) it would be flagged by checking, so we don't\n-     use copy_ssa_name: we create an anonymous SSA name, and then give\n-     it the same identifier (rather than decl) as VAL.  */\n+  /* Create a SSA \"copy\" of VAL.  It would be nice to have it named\n+     after the corresponding variable, but sharing the same decl is\n+     problematic when VAL is a DECL_BY_REFERENCE RESULT_DECL, and\n+     copying just the identifier hits -fcompare-debug failures.  */\n   tree ret = make_ssa_name (TREE_TYPE (val));\n-  SET_SSA_NAME_VAR_OR_IDENTIFIER (ret, SSA_NAME_IDENTIFIER (val));\n \n   /* Some modes won't fit in general regs, so we fall back to memory\n      for them.  ??? It would be ideal to try to identify an alternate,"}, {"sha": "502f52e25be240c75e22120c84941ec3471239c1", "filename": "gcc/testsuite/c-c++-common/torture/harden-comp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb488cba571539b6644e8f99f1dd997cdb4c82c1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fharden-comp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb488cba571539b6644e8f99f1dd997cdb4c82c1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fharden-comp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fharden-comp.c?ref=fb488cba571539b6644e8f99f1dd997cdb4c82c1", "patch": "@@ -11,4 +11,4 @@ f (int i, int j)\n /* { dg-final { scan-tree-dump-times \"Adding reversed compare\" 1 \"hardcmp\" } } */\n /* { dg-final { scan-tree-dump-times \"__builtin_trap\" 1 \"hardcmp\" } } */\n /* { dg-final { scan-tree-dump-times \"_\\[0-9\\]* = i_\\[0-9\\]*\\[(\\]D\\[)\\] < j_\\[0-9\\]*\\[(\\]D\\[)\\];\" 1 \"hardcmp\" } } */\n-/* { dg-final { scan-tree-dump-times \"_\\[0-9\\]* = i_\\[0-9\\]* >= j_\\[0-9\\]*;\" 1 \"hardcmp\" } } */\n+/* { dg-final { scan-tree-dump-times \"_\\[0-9\\]* = _\\[0-9\\]* >= _\\[0-9\\]*;\" 1 \"hardcmp\" } } */"}, {"sha": "213b048b25af5d623ada21aceee38c8aab49dffd", "filename": "gcc/testsuite/c-c++-common/torture/harden-cond.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb488cba571539b6644e8f99f1dd997cdb4c82c1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fharden-cond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb488cba571539b6644e8f99f1dd997cdb4c82c1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fharden-cond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fharden-cond.c?ref=fb488cba571539b6644e8f99f1dd997cdb4c82c1", "patch": "@@ -15,4 +15,4 @@ f (int i, int j)\n /* { dg-final { scan-tree-dump-times \"Adding reversed compare\" 2 \"hardcbr\" } } */\n /* { dg-final { scan-tree-dump-times \"__builtin_trap\" 2 \"hardcbr\" } } */\n /* { dg-final { scan-tree-dump-times \"if \\[(\\]i_\\[0-9\\]*\\[(\\]D\\[)\\] < j_\\[0-9\\]*\\[(\\]D\\[)\\]\\[)\\]\" 1 \"hardcbr\" } } */\n-/* { dg-final { scan-tree-dump-times \"if \\[(\\]i_\\[0-9\\]* >= j_\\[0-9\\]*\\[)\\]\" 2 \"hardcbr\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \\[(\\]_\\[0-9\\]* >= _\\[0-9\\]*\\[)\\]\" 2 \"hardcbr\" } } */"}]}