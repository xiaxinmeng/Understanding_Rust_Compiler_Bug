{"sha": "5c7fdaebb319fac36a19ac9f67534883ad66b683", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM3ZmRhZWJiMzE5ZmFjMzZhMTlhYzlmNjc1MzQ4ODNhZDY2YjY4Mw==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2008-05-17T21:03:29Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2008-05-17T21:03:29Z"}, "message": "rtl.texi (RTL_CONST_CALL_P, [...]): Fixed typos.\n\n2008-05-17  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* doc/rtl.texi (RTL_CONST_CALL_P, RTL_PURE_CALL_P): Fixed typos.\n\t* df-problems.c (simulation routines): Fixed block comment to\n\tproperly say how to add forwards scanning functions.\n\nFrom-SVN: r135478", "tree": {"sha": "5f41060081ebc48b54cf2e2425548f0f484a736f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f41060081ebc48b54cf2e2425548f0f484a736f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c7fdaebb319fac36a19ac9f67534883ad66b683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c7fdaebb319fac36a19ac9f67534883ad66b683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c7fdaebb319fac36a19ac9f67534883ad66b683", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c7fdaebb319fac36a19ac9f67534883ad66b683/comments", "author": null, "committer": null, "parents": [{"sha": "587daf2ddadaa2fc1bf9cd067f56ae1633eb37c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587daf2ddadaa2fc1bf9cd067f56ae1633eb37c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/587daf2ddadaa2fc1bf9cd067f56ae1633eb37c6"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b1e60b3ab71fb9f37be2531f078499966d111057", "filename": "gcc/df-problems.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7fdaebb319fac36a19ac9f67534883ad66b683/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7fdaebb319fac36a19ac9f67534883ad66b683/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=5c7fdaebb319fac36a19ac9f67534883ad66b683", "patch": "@@ -3767,10 +3767,10 @@ df_simulate_fixup_sets (basic_block bb, bitmap live)\n    df_simulate_artificial_refs_at_top can be called to get a new value\n    of the sets at the top of the block (this is rarely used).\n \n-   It would be trivial to define a similar set of functions that work\n-   in the forwards direction.  The only changes would be to process\n-   the uses before the defs and properly rename the functions.  This\n-   has so far not been necessary.\n+   It would be not be difficult to define a similar set of functions\n+   that work in the forwards direction.  In that case the functions\n+   would ignore the use sets and look for the REG_DEAD and REG_UNUSED\n+   notes.\n ----------------------------------------------------------------------------*/\n \n /* Apply the artificial uses and defs at the end of BB in a backwards"}, {"sha": "3191fc8e6a90597a611133eaff505b53f7f47537", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7fdaebb319fac36a19ac9f67534883ad66b683/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7fdaebb319fac36a19ac9f67534883ad66b683/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=5c7fdaebb319fac36a19ac9f67534883ad66b683", "patch": "@@ -562,15 +562,15 @@ Stored in the @code{unchanging} field and printed as @samp{/u}.\n @findex RTL_CONST_CALL_P\n @cindex @code{call_insn} and @samp{/u}\n @cindex @code{unchanging}, in @code{call_insn}\n-@item RTLCONST_OR_PURE_CALL_P (@var{x})\n+@item RTL_CONST_CALL_P (@var{x})\n In a @code{call_insn} indicates that the insn represents a call to a\n const function.  Stored in the @code{unchanging} field and printed as\n @samp{/u}.\n \n @findex RTL_PURE_CALL_P\n @cindex @code{call_insn} and @samp{/i}\n @cindex @code{return_val}, in @code{call_insn}\n-@item RTLCONST_OR_PURE_CALL_P (@var{x})\n+@item RTL_PURE_CALL_P (@var{x})\n In a @code{call_insn} indicates that the insn represents a call to a\n pure function.  Stored in the @code{return_val} field and printed as\n @samp{/i}."}]}