{"sha": "936ee79028e95a369184bb8183a3cf3d5ab82a52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM2ZWU3OTAyOGU5NWEzNjkxODRiYjgxODNhM2NmM2Q1YWI4MmE1Mg==", "commit": {"author": {"name": "Christopher Faylor", "email": "cgf@cygnus.com", "date": "2001-03-11T00:12:12Z"}, "committer": {"name": "Christopher Faylor", "email": "cgf@gcc.gnu.org", "date": "2001-03-11T00:12:12Z"}, "message": "cygwin.h: Make ../w32api a system directory.\n\n* config/i386/cygwin.h: Make ../w32api a system directory.  Reorganize mingw\nincludes slightly.\n\nFrom-SVN: r40372", "tree": {"sha": "9abcb3ae0181dca542d376c81b3894e6cb8606f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9abcb3ae0181dca542d376c81b3894e6cb8606f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/936ee79028e95a369184bb8183a3cf3d5ab82a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936ee79028e95a369184bb8183a3cf3d5ab82a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/936ee79028e95a369184bb8183a3cf3d5ab82a52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936ee79028e95a369184bb8183a3cf3d5ab82a52/comments", "author": null, "committer": null, "parents": [{"sha": "8a0e5115f4da68797687e5ed6963153313893595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0e5115f4da68797687e5ed6963153313893595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0e5115f4da68797687e5ed6963153313893595"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "b6d072ab5e1bc52721b2c4bb6c75a96dc3cbfb61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936ee79028e95a369184bb8183a3cf3d5ab82a52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936ee79028e95a369184bb8183a3cf3d5ab82a52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=936ee79028e95a369184bb8183a3cf3d5ab82a52", "patch": "@@ -1,3 +1,8 @@\n+Sat Mar 10 17:52:54 2001  Christopher Faylor <cgf@cygnus.com>\n+\n+\t* config/i386/cygwin.h: Make ../w32api a system directory.  Reorganize\n+\tmingw includes slightly.\n+\n 2001-03-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* system.h (malloc, realloc, calloc, strdup, bzero, bcmp, rindex):"}, {"sha": "4dbec0224abb9825690405521250567140b10677", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936ee79028e95a369184bb8183a3cf3d5ab82a52/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936ee79028e95a369184bb8183a3cf3d5ab82a52/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=936ee79028e95a369184bb8183a3cf3d5ab82a52", "patch": "@@ -81,16 +81,21 @@ Boston, MA 02111-1307, USA. */\n \n #ifdef CROSS_COMPILE\n #define CYGWIN_INCLUDES \"-idirafter \" CYGWIN_CROSS_DIR \"/include\"\n-#define CYGWIN_W32API \"-I\" CYGWIN_CROSS_DIR \"/include/w32api\"\n+#define CYGWIN_W32API \"-idirafter \" CYGWIN_CROSS_DIR \"/include/w32api\"\n #define CYGWIN_LIB CYGWIN_CROSS_DIR \"/lib\"\n #define MINGW_LIBS \"-L\" CYGWIN_CROSS_DIR \"/lib/mingw\"\n-#define MINGW_INCLUDES \"-I\" CYGWIN_CROSS_DIR \"/include/mingw\"\n+#define MINGW_INCLUDES \"-isystem \" CYGWIN_CROSS_DIR \"/include/mingw/g++-3 \"\\\n+\t\t       \"-isystem \" CYGWIN_CROSS_DIR \"/include/mingw/g++ \"\\\n+\t\t       \"-idirafter \" CYGWIN_CROSS_DIR \"/include/mingw\"\n #else\n #define CYGWIN_INCLUDES \"-isystem /usr/local/include -idirafter /usr/include\"\n-#define CYGWIN_W32API \"-I/usr/include/w32api\"\n+#define CYGWIN_W32API \"-idirafter /usr/include/w32api\"\n #define CYGWIN_LIB \"/usr/lib\"\n #define MINGW_LIBS \"-L/usr/local/lib/mingw -L/usr/lib/mingw\"\n-#define MINGW_INCLUDES \"-isystem /usr/local/include/mingw -idirafter /usr/include/mingw\"\n+#define MINGW_INCLUDES \"-isystem /usr/include/mingw/g++-3 \"\\\n+\t\t       \"-isystem /usr/include/mingw/g++ \"\\\n+\t\t       \"-isystem /usr/local/include/mingw\" \\\n+\t\t       \"-idirafter /usr/include/mingw\"\n #endif\n \n #undef STARTFILE_SPEC\n@@ -106,16 +111,14 @@ Boston, MA 02111-1307, USA. */\n     -D_cdecl=__attribute__((__cdecl__))} \\\n   -D__declspec(x)=__attribute__((x)) \\\n   -D__i386__ -D__i386 \\\n+  %{mno-win32: %{mno-cygwin: %emno-cygwin and mno-win32 are not compatible}} \\\n+  %(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n+  %{mno-cygwin:-D__MSVCRT__ -D__MINGW32__ %{mthreads:-D_MT} \" MINGW_INCLUDES \\\n+    \" -mwin32} \\\n   %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ -Dunix -D__unix__ -D__unix \\\n     \" CYGWIN_INCLUDES \"} \\\n-  %{mno-win32: %{mno-cygwin: %emno-cygwin and mno-win32 are not compatible}} \\\n-  %{mno-cygwin:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ -DWINNT -D__MSVCRT__ \\\n-    -D__MINGW32__=0.3 %{mthreads:-D_MT} \" MINGW_INCLUDES \" \" CYGWIN_W32API \"\\\n-    -iwithprefixbefore ../../../../mingw/include/g++-3 \\\n-    -iwithprefixbefore ../../../../mingw/include \\\n-    -iwithprefixbefore ../../../../mingw32/include/g++-3 \\\n-    -iwithprefixbefore ../../../../mingw32/include } \\\n-   %{!mno-win32:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ -DWINNT \" CYGWIN_W32API \"}\"\n+  %{mwin32:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ -DWINNT \" CYGWIN_W32API \"} \\\n+\"\n \n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition\n@@ -357,7 +360,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_LABELREF\n #define ASM_OUTPUT_LABELREF(STREAM, NAME)  \t\t\\\n   fprintf (STREAM, \"%s%s\", USER_LABEL_PREFIX, \t\t\\\n-           I386_PE_STRIP_ENCODING (NAME))\t\t\\\n+\t   I386_PE_STRIP_ENCODING (NAME))\t\t\\\n \n /* Output a common block.  */\n #undef ASM_OUTPUT_COMMON\n@@ -445,10 +448,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       type = SECT_RW;\t\t\t\t\t\t\t\\\n       if (TREE_CODE (DECL) == VAR_DECL\t\t\t\t\t\\\n-          && lookup_attribute (\"shared\", DECL_MACHINE_ATTRIBUTES (DECL))) \\\n-        mode = \"ws\";\t\t\t\t\t\t\t\\\n+\t  && lookup_attribute (\"shared\", DECL_MACHINE_ATTRIBUTES (DECL))) \\\n+\tmode = \"ws\";\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n-        mode = \"w\";\t\t\t\t\t\t\t\\\n+\tmode = \"w\";\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (s == 0)\t\t\t\t\t\t\t\t\\\n@@ -461,12 +464,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n       sections = s;\t\t\t\t\t\t\t\\\n       fprintf (STREAM, \".section\\t%s,\\\"%s\\\"\\n\", NAME, mode);\t\t\\\n       /* Functions may have been compiled at various levels of\t\t\\\n-         optimization so we can't use `same_size' here.  Instead,\t\\\n-         have the linker pick one.  */\t\t\t\t\t\\\n+\t optimization so we can't use `same_size' here.  Instead,\t\\\n+\t have the linker pick one.  */\t\t\t\t\t\\\n       if ((DECL) && DECL_ONE_ONLY (DECL))\t\t\t\t\\\n-        fprintf (STREAM, \"\\t.linkonce %s\\n\",\t\t\t\t\\\n-\t         TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n-\t         ? \"discard\" : \"same_size\");\t\t\t\t\\\n+\tfprintf (STREAM, \"\\t.linkonce %s\\n\",\t\t\t\t\\\n+\t\t TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n+\t\t ? \"discard\" : \"same_size\");\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -527,7 +530,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       && MAIN_NAME_P (DECL_NAME (current_function_decl)))\t\t\\\n      {\t\t\t\t\t\t\t\t\t\\\n       emit_call_insn (gen_rtx (CALL, VOIDmode, \t\t\t\t\\\n-        gen_rtx_MEM (FUNCTION_MODE,\t\t\t\t\t\\\n+\tgen_rtx_MEM (FUNCTION_MODE,\t\t\t\t\t\\\n \t\t     gen_rtx_SYMBOL_REF (Pmode, \"_monstartup\")),\t\\\n \tconst0_rtx));\t\t\t\t\t\t\t\\\n      }"}]}