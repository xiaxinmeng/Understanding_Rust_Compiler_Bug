{"sha": "ae88d80c22f43561be71e16b0e5597799597960b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU4OGQ4MGMyMmY0MzU2MWJlNzFlMTZiMGU1NTk3Nzk5NTk3OTYwYg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2005-06-06T23:57:25Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2005-06-06T23:57:25Z"}, "message": "linux-unwind.h (SH_DWARF_FRAME_XD0): Remove for SH5.\n\n\t* config/sh/linux-unwind.h (SH_DWARF_FRAME_XD0): Remove for SH5.\n\t(SH_DWARF_FRAME_PR, SH_DWARF_FRAME_GBR, SH_DWARF_FRAME_MACL)\n\t(SH_DWARF_FRAME_MACH, SH_DWARF_FRAME_PC, SH_DWARF_FRAME_FPUL):\n\tLikewise.\n\t(SH_DWARF_FRAME_FP0, SH_DWARF_FRAME_FPSCR): Define to the correct\n\tdwarf register number for SHmedia.\n\t(shmedia_fallback_frame_state): New.\n\t(MD_FALLBACK_FRAME_STATE_FOR): Define to it for SH5.\n\n\t* config/sh/linux.h (FUNCTION_PROFILER): Provide SHMEDIA version.\n\nFrom-SVN: r100681", "tree": {"sha": "035deeb0d94ab5b3f8db46e2ced9c9c887082dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/035deeb0d94ab5b3f8db46e2ced9c9c887082dcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae88d80c22f43561be71e16b0e5597799597960b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae88d80c22f43561be71e16b0e5597799597960b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae88d80c22f43561be71e16b0e5597799597960b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae88d80c22f43561be71e16b0e5597799597960b/comments", "author": null, "committer": null, "parents": [{"sha": "4fab72345b0955cc45b021abe30100eebdd691ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fab72345b0955cc45b021abe30100eebdd691ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fab72345b0955cc45b021abe30100eebdd691ec"}], "stats": {"total": 170, "additions": 142, "deletions": 28}, "files": [{"sha": "c573ceaa7c0b7b2c9efa2dacd3535e4b9bdc886e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae88d80c22f43561be71e16b0e5597799597960b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae88d80c22f43561be71e16b0e5597799597960b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae88d80c22f43561be71e16b0e5597799597960b", "patch": "@@ -1,3 +1,16 @@\n+2005-06-06  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/linux-unwind.h (SH_DWARF_FRAME_XD0): Remove for SH5.\n+\t(SH_DWARF_FRAME_PR, SH_DWARF_FRAME_GBR, SH_DWARF_FRAME_MACL)\n+\t(SH_DWARF_FRAME_MACH, SH_DWARF_FRAME_PC, SH_DWARF_FRAME_FPUL):\n+\tLikewise.\n+\t(SH_DWARF_FRAME_FP0, SH_DWARF_FRAME_FPSCR): Define to the correct\n+\tdwarf register number for SHmedia.\n+\t(shmedia_fallback_frame_state): New.\n+\t(MD_FALLBACK_FRAME_STATE_FOR): Define to it for SH5.\n+\n+\t* config/sh/linux.h (FUNCTION_PROFILER): Provide SHMEDIA version.\n+\n 2005-06-06  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-lex.c (lex_string): Use XOBFINISH."}, {"sha": "ab149d33d42125061b5b46613d117b4698ab6bf1", "filename": "gcc/config/sh/linux-unwind.h", "status": "modified", "additions": 84, "deletions": 10, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae88d80c22f43561be71e16b0e5597799597960b/gcc%2Fconfig%2Fsh%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae88d80c22f43561be71e16b0e5597799597960b/gcc%2Fconfig%2Fsh%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux-unwind.h?ref=ae88d80c22f43561be71e16b0e5597799597960b", "patch": "@@ -35,18 +35,11 @@ Boston, MA 02111-1307, USA.  */\n \n # if defined (__SH5__)\n #define SH_DWARF_FRAME_GP0\t0\n-#define SH_DWARF_FRAME_FP0\t(__SH5__ == 32 ? 245 : 77)\n-#define SH_DWARF_FRAME_XD0\t289\n+#define SH_DWARF_FRAME_FP0\t77\n #define SH_DWARF_FRAME_BT0\t68\n-#define SH_DWARF_FRAME_PR\t241\n #define SH_DWARF_FRAME_PR_MEDIA\t18\n-#define SH_DWARF_FRAME_GBR\t238\n-#define SH_DWARF_FRAME_MACH\t239\n-#define SH_DWARF_FRAME_MACL\t240\n-#define SH_DWARF_FRAME_PC\t64\n #define SH_DWARF_FRAME_SR\t65\n-#define SH_DWARF_FRAME_FPUL\t244\n-#define SH_DWARF_FRAME_FPSCR\t243\n+#define SH_DWARF_FRAME_FPSCR\t76\n #else\n #define SH_DWARF_FRAME_GP0\t0\n #define SH_DWARF_FRAME_FP0\t25\n@@ -62,7 +55,88 @@ Boston, MA 02111-1307, USA.  */\n #endif /* defined (__SH5__) */\n \n #if defined (__SH5__)\n-/* MD_FALLBACK_FRAME_STATE_FOR is not yet defined for SHMEDIA.  */\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR shmedia_fallback_frame_state\n+\n+static _Unwind_Reason_Code\n+shmedia_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t      _Unwind_FrameState *fs)\n+{\n+  unsigned char *pc = context->ra;\n+  struct sigcontext *sc;\n+  long new_cfa;\n+  int i, r;\n+\n+  /* movi 0x10,r9; shori 0x77,r9; trapa\tr9; nop (sigreturn)  */\n+  /* movi 0x10,r9; shori 0xad,r9; trapa\tr9; nop (rt_sigreturn)  */\n+  if ((*(unsigned long *) (pc-1)  == 0xcc004090)\n+      && (*(unsigned long *) (pc+3)  == 0xc801dc90)\n+      && (*(unsigned long *) (pc+7)  == 0x6c91fff0)\n+      && (*(unsigned long *) (pc+11)  == 0x6ff0fff0))\n+    sc = context->cfa;\n+  else if ((*(unsigned long *) (pc-1)  == 0xcc004090)\n+\t   && (*(unsigned long *) (pc+3)  == 0xc802b490)\n+\t   && (*(unsigned long *) (pc+7)  == 0x6c91fff0)\n+\t   && (*(unsigned long *) (pc+11)  == 0x6ff0fff0))\n+    {\n+      struct rt_sigframe {\n+\tstruct siginfo *pinfo;\n+\tvoid *puc;\n+\tstruct siginfo info;\n+\tstruct ucontext uc;\n+      } *rt_ = context->cfa;\n+      sc = (struct sigcontext *) &rt_->uc.uc_mcontext;\n+    }\n+  else\n+    return _URC_END_OF_STACK;\n+\n+  new_cfa = sc->sc_regs[15];\n+  fs->cfa_how = CFA_REG_OFFSET;\n+  fs->cfa_reg = 15;\n+  fs->cfa_offset = new_cfa - (long) context->cfa;\n+\n+  for (i = 0; i < 63; i++)\n+    {\n+      if (i == 15)\n+\tcontinue;\n+\n+      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[i].loc.offset\n+\t= (long)&(sc->sc_regs[i]) - new_cfa;\n+    }\n+\n+  fs->regs.reg[SH_DWARF_FRAME_SR].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[SH_DWARF_FRAME_SR].loc.offset\n+    = (long)&(sc->sc_sr) - new_cfa;\n+\n+  r = SH_DWARF_FRAME_BT0;\n+  for (i = 0; i < 8; i++)\n+    {\n+      fs->regs.reg[r+i].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[r+i].loc.offset\n+\t= (long)&(sc->sc_tregs[i]) - new_cfa;\n+    }\n+\n+  r = SH_DWARF_FRAME_FP0;\n+  for (i = 0; i < 32; i++)\n+    {\n+      fs->regs.reg[r+i].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[r+i].loc.offset\n+\t= (long)&(sc->sc_fpregs[i]) - new_cfa;\n+    }\n+\n+  fs->regs.reg[SH_DWARF_FRAME_FPSCR].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[SH_DWARF_FRAME_FPSCR].loc.offset\n+    = (long)&(sc->sc_fpscr) - new_cfa;\n+\n+  /* We use the slot for the zero register to save return address.  */\n+  fs->regs.reg[63].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[63].loc.offset\n+    = (long)&(sc->sc_pc) - new_cfa;\n+  fs->retaddr_column = 63;\n+  return _URC_NO_REASON;\n+}\n+\n #else /* defined (__SH5__) */\n \n #define MD_FALLBACK_FRAME_STATE_FOR sh_fallback_frame_state"}, {"sha": "51d52ebfcc456785a254c044c3487fb23f8744a7", "filename": "gcc/config/sh/linux.h", "status": "modified", "additions": 45, "deletions": 18, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae88d80c22f43561be71e16b0e5597799597960b/gcc%2Fconfig%2Fsh%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae88d80c22f43561be71e16b0e5597799597960b/gcc%2Fconfig%2Fsh%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux.h?ref=ae88d80c22f43561be71e16b0e5597799597960b", "patch": "@@ -68,29 +68,56 @@ Boston, MA 02111-1307, USA.  */\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(STREAM,LABELNO)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    if (flag_pic)\t\t\t\t\t\t\t\\\n+    if (TARGET_SHMEDIA)\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (STREAM, \"\\tmov.l\\t3f,r1\\n\");\t\t\t\t\\\n-\tfprintf (STREAM, \"\\tmova\\t3f,r0\\n\");\t\t\t\t\\\n-\tfprintf (STREAM, \"\\tadd\\tr1,r0\\n\");\t\t\t\t\\\n-\tfprintf (STREAM, \"\\tmov.l\\t1f,r1\\n\");\t\t\t\t\\\n-\tfprintf (STREAM, \"\\tmov.l\\t@(r0,r1),r1\\n\");\t\t\t\\\n+\tfprintf (STREAM, \"\\tpt\\t1f,tr1\\n\");\t\t\t\t\\\n+\tfprintf (STREAM, \"\\taddi.l\\tr15,-8,r15\\n\");\t\t\t\\\n+\tfprintf (STREAM, \"\\tst.l\\tr15,0,r18\\n\");\t\t\t\\\n+\tif (flag_pic)\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    char *gofs = \"(datalabel _GLOBAL_OFFSET_TABLE_-(0f-.))\";\t\\\n+\t    fprintf (STREAM, \"\\tmovi\\t((%s>>16)&0xffff),r21\\n\", gofs);\t\\\n+\t    fprintf (STREAM, \"\\tshori\\t(%s & 0xffff),r21\\n\", gofs);\t\\\n+\t    fprintf (STREAM, \"0:\\tptrel/u\\tr21,tr0\\n\");\t\t\t\\\n+\t    fprintf (STREAM, \"\\tmovi\\t((mcount@GOTPLT)&0xffff),r22\\n\");\t\\\n+\t    fprintf (STREAM, \"\\tgettr\\ttr0,r21\\n\");\t\t\t\\\n+\t    fprintf (STREAM, \"\\tadd.l\\tr21,r22,r21\\n\");\t\t\t\\\n+\t    fprintf (STREAM, \"\\tld.l\\tr21,0,r21\\n\");\t\t\t\\\n+\t    fprintf (STREAM, \"\\tptabs\\tr21,tr0\\n\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\t\\\n+\t  fprintf (STREAM, \"\\tpt\\tmcount,tr0\\n\");\t\t\t\\\n+\tfprintf (STREAM, \"\\tgettr\\ttr1,r18\\n\");\t\t\t\t\\\n+\tfprintf (STREAM, \"\\tblink\\ttr0,r63\\n\");\t\t\t\t\\\n+\tfprintf (STREAM, \"1:\\tld.l\\tr15,0,r18\\n\");\t\t\t\\\n+\tfprintf (STREAM, \"\\taddi.l\\tr15,8,r15\\n\");\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"\\tmov.l\\t1f,r1\\n\");\t\t\t\t\\\n-    fprintf (STREAM, \"\\tsts.l\\tpr,@-r15\\n\");\t\t\t\t\\\n-    fprintf (STREAM, \"\\tmova\\t2f,r0\\n\");\t\t\t\t\\\n-    fprintf (STREAM, \"\\tjmp\\t@r1\\n\");\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\tlds\\tr0,pr\\n\");\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.align\\t2\\n\");\t\t\t\t\t\\\n-    if (flag_pic)\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (STREAM, \"1:\\t.long\\tmcount@GOT\\n\");\t\t\t\\\n-\tfprintf (STREAM, \"3:\\t.long\\t_GLOBAL_OFFSET_TABLE_\\n\");\t\t\\\n+\tif (flag_pic)\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    fprintf (STREAM, \"\\tmov.l\\t3f,r1\\n\");\t\t\t\\\n+\t    fprintf (STREAM, \"\\tmova\\t3f,r0\\n\");\t\t\t\\\n+\t    fprintf (STREAM, \"\\tadd\\tr1,r0\\n\");\t\t\t\t\\\n+\t    fprintf (STREAM, \"\\tmov.l\\t1f,r1\\n\");\t\t\t\\\n+\t    fprintf (STREAM, \"\\tmov.l\\t@(r0,r1),r1\\n\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\t\\\n+\t  fprintf (STREAM, \"\\tmov.l\\t1f,r1\\n\");\t\t\t\t\\\n+\tfprintf (STREAM, \"\\tsts.l\\tpr,@-r15\\n\");\t\t\t\\\n+\tfprintf (STREAM, \"\\tmova\\t2f,r0\\n\");\t\t\t\t\\\n+\tfprintf (STREAM, \"\\tjmp\\t@r1\\n\");\t\t\t\t\\\n+\tfprintf (STREAM, \"\\tlds\\tr0,pr\\n\");\t\t\t\t\\\n+\tfprintf (STREAM, \"\\t.align\\t2\\n\");\t\t\t\t\\\n+\tif (flag_pic)\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    fprintf (STREAM, \"1:\\t.long\\tmcount@GOT\\n\");\t\t\\\n+\t    fprintf (STREAM, \"3:\\t.long\\t_GLOBAL_OFFSET_TABLE_\\n\");\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\t\\\n+\t  fprintf (STREAM, \"1:\\t.long\\tmcount\\n\");\t\t\t\\\n+\tfprintf (STREAM, \"2:\\tlds.l\\t@r15+,pr\\n\");\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"1:\\t.long\\tmcount\\n\");\t\t\t\t\\\n-    fprintf (STREAM, \"2:\\tlds.l\\t@r15+,pr\\n\");\t\t\t\t\\\n   } while (0)\n \n #define MD_UNWIND_SUPPORT \"config/sh/linux-unwind.h\""}]}