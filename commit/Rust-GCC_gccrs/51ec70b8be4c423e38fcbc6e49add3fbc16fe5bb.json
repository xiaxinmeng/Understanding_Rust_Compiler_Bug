{"sha": "51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlYzcwYjhiZTRjNDIzZTM4ZmNiYzZlNDlhZGQzZmJjMTZmZTViYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-29T13:47:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-29T13:47:42Z"}, "message": "[multiple changes]\n\n2009-04-29  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat_ugn.texi: Update some documentation about interfacing with C++\n\tMention -fkeep-inline-functions.\n\n\t* gnat_ugn.texi: Minor edits\n\n2009-04-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Record_Aggregate): When building an aggregate\n\tfor a defaulted component of an enclosing aggregate, inherit the type\n\tfrom the component declaration of the enclosing type. \n\n2009-04-29  Albert Lee  <lee@adacore.com>\n\n\t* g-socthi-vms.ads, g-socthi-vxworks.ads, s-oscons-tmplt.c,\n\tg-socthi-mingw.ads, g-socthi.ads, g-socket.adb, g-sothco.ads\n\t(System.OS_Constants): New type Msg_Iovlen_T which follows whether the\n\tmsg_iovlen field in struct msghdr is 32 or 64 bits wide.\n\tRelocate the Msghdr record type from GNAT.Sockets.Thin to\n\tGNAT.Sockets.Common, and use System.OS_Constants.Msg_Iovlen_T as the\n\ttype for the Msg_Iovlen field.\n\nFrom-SVN: r146969", "tree": {"sha": "f8c5efa510fefa4a36802cbc8fcf62ab4d7580b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8c5efa510fefa4a36802cbc8fcf62ab4d7580b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/comments", "author": null, "committer": null, "parents": [{"sha": "9e895ab50a0882df6e42fdb2995fec55258a26d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e895ab50a0882df6e42fdb2995fec55258a26d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e895ab50a0882df6e42fdb2995fec55258a26d6"}], "stats": {"total": 144, "additions": 80, "deletions": 64}, "files": [{"sha": "553edf2d643a367ba999b71078aa3f6338a93d35", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "patch": "@@ -1,3 +1,26 @@\n+2009-04-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_ugn.texi: Update some documentation about interfacing with C++\n+\tMention -fkeep-inline-functions.\n+\n+\t* gnat_ugn.texi: Minor edits\n+\n+2009-04-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): When building an aggregate\n+\tfor a defaulted component of an enclosing aggregate, inherit the type\n+\tfrom the component declaration of the enclosing type. \n+\n+2009-04-29  Albert Lee  <lee@adacore.com>\n+\n+\t* g-socthi-vms.ads, g-socthi-vxworks.ads, s-oscons-tmplt.c,\n+\tg-socthi-mingw.ads, g-socthi.ads, g-socket.adb, g-sothco.ads\n+\t(System.OS_Constants): New type Msg_Iovlen_T which follows whether the\n+\tmsg_iovlen field in struct msghdr is 32 or 64 bits wide.\n+\tRelocate the Msghdr record type from GNAT.Sockets.Thin to\n+\tGNAT.Sockets.Common, and use System.OS_Constants.Msg_Iovlen_T as the\n+\ttype for the Msg_Iovlen field.\n+\n 2009-04-29  Vincent Celier  <celier@adacore.com>\n \n \t* sinput-l.adb (Load_File): When preprocessing, set temporarily the"}, {"sha": "63f6d748142982d95e0f316727301f67547e62e7", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "patch": "@@ -1673,7 +1673,7 @@ package body GNAT.Sockets is\n               (Msg_Name       => System.Null_Address,\n                Msg_Namelen    => 0,\n                Msg_Iov        => Vector'Address,\n-               Msg_Iovlen     => Vector'Length,\n+               Msg_Iovlen     => SOSC.Msg_Iovlen_T (Vector'Length),\n                Msg_Control    => System.Null_Address,\n                Msg_Controllen => 0,\n                Msg_Flags      => 0);\n@@ -1904,11 +1904,11 @@ package body GNAT.Sockets is\n       Count  : out Ada.Streams.Stream_Element_Count;\n       Flags  : Request_Flag_Type := No_Request_Flag)\n    is\n-      use type C.size_t;\n+      use type SOSC.Msg_Iovlen_T;\n \n       Res            : ssize_t;\n-      Iov_Count      : C.size_t;\n-      This_Iov_Count : C.size_t;\n+      Iov_Count      : SOSC.Msg_Iovlen_T;\n+      This_Iov_Count : SOSC.Msg_Iovlen_T;\n       Msg            : Msghdr;\n \n    begin"}, {"sha": "7b24eeec4e1f31f0931a2fd626816a9475fde9e1", "filename": "gcc/ada/g-socthi-mingw.ads", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-socthi-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-socthi-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.ads?ref=51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "patch": "@@ -54,17 +54,6 @@ package GNAT.Sockets.Thin is\n      .. +(2 ** (C.size_t'Size - 1) - 1);\n    --  Signed type of the same size as size_t\n \n-   type Msghdr is record\n-      Msg_Name       : System.Address;\n-      Msg_Namelen    : C.unsigned;\n-      Msg_Iov        : System.Address;\n-      Msg_Iovlen     : C.size_t;\n-      Msg_Control    : System.Address;\n-      Msg_Controllen : C.size_t;\n-      Msg_Flags      : C.int;\n-   end record;\n-   pragma Convention (C, Msghdr);\n-\n    function Socket_Errno return Integer;\n    --  Returns last socket error number\n "}, {"sha": "2fd5009db15172d901555bc529e7f16f6c0f1128", "filename": "gcc/ada/g-socthi-vms.ads", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-socthi-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-socthi-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.ads?ref=51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "patch": "@@ -57,18 +57,6 @@ package GNAT.Sockets.Thin is\n      .. +(2 ** (C.size_t'Size - 1) - 1);\n    --  Signed type of the same size as size_t\n \n-   type Msghdr is record\n-      Msg_Name       : System.Address;\n-      Msg_Namelen    : C.unsigned;\n-      Msg_Iov        : System.Address;\n-      Msg_Iovlen     : C.size_t;\n-      Msg_Control    : System.Address;\n-      Msg_Controllen : C.size_t;\n-      Msg_Flags      : C.int;\n-   end record;\n-   pragma Convention (C, Msghdr);\n-   --  This type needs comments???\n-\n    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;\n    --  Returns last socket error number\n "}, {"sha": "4b6bd34d080a01e28c9ddb99624d2d01b65df913", "filename": "gcc/ada/g-socthi-vxworks.ads", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-socthi-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-socthi-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.ads?ref=51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "patch": "@@ -55,17 +55,6 @@ package GNAT.Sockets.Thin is\n      .. +(2 ** (C.size_t'Size - 1) - 1);\n    --  Signed type of the same size as size_t\n \n-   type Msghdr is record\n-      Msg_Name       : System.Address;\n-      Msg_Namelen    : C.unsigned;\n-      Msg_Iov        : System.Address;\n-      Msg_Iovlen     : C.size_t;\n-      Msg_Control    : System.Address;\n-      Msg_Controllen : C.size_t;\n-      Msg_Flags      : C.int;\n-   end record;\n-   pragma Convention (C, Msghdr);\n-\n    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;\n    --  Returns last socket error number\n "}, {"sha": "b5186d062c619946e904e8fa8a4afc89e8d45328", "filename": "gcc/ada/g-socthi.ads", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-socthi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-socthi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.ads?ref=51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "patch": "@@ -59,17 +59,6 @@ package GNAT.Sockets.Thin is\n      .. +(2 ** (C.size_t'Size - 1) - 1);\n    --  Signed type of the same size as size_t\n \n-   type Msghdr is record\n-      Msg_Name       : System.Address;\n-      Msg_Namelen    : C.unsigned;\n-      Msg_Iov        : System.Address;\n-      Msg_Iovlen     : C.size_t;\n-      Msg_Control    : System.Address;\n-      Msg_Controllen : C.size_t;\n-      Msg_Flags      : C.int;\n-   end record;\n-   pragma Convention (C, Msghdr);\n-\n    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;\n    --  Returns last socket error number\n "}, {"sha": "9a8672830fa636093cac1baa7f24946e98098f1d", "filename": "gcc/ada/g-sothco.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-sothco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fg-sothco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sothco.ads?ref=51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "patch": "@@ -243,6 +243,21 @@ package GNAT.Sockets.Thin_Common is\n    pragma Convention (C, Hostent_Access);\n    --  Access to host entry\n \n+   ------------------------------------\n+   -- Scatter/gather vector handling --\n+   ------------------------------------\n+\n+   type Msghdr is record\n+      Msg_Name       : System.Address;\n+      Msg_Namelen    : C.unsigned;\n+      Msg_Iov        : System.Address;\n+      Msg_Iovlen     : SOSC.Msg_Iovlen_T;\n+      Msg_Control    : System.Address;\n+      Msg_Controllen : C.size_t;\n+      Msg_Flags      : C.int;\n+   end record;\n+   pragma Convention (C, Msghdr);\n+\n    ----------------------------\n    -- Socket sets management --\n    ----------------------------"}, {"sha": "ec10ef1021c889b1386b52cd45a51b11c6380b54", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "patch": "@@ -2992,17 +2992,18 @@ Interface ---see http://www.codesourcery.com/archives/cxx-abi).\n Interfacing can be done at 3 levels: simple data, subprograms, and\n classes. In the first two cases, GNAT offers a specific @code{Convention\n C_Plus_Plus} (or @code{CPP}) that behaves exactly like @code{Convention C}.\n-Usually, C++ mangles the names of subprograms, and currently, GNAT does\n-not provide any help to solve the demangling problem. This problem can be\n-addressed in two ways:\n+Usually, C++ mangles the names of subprograms. To generate proper mangled\n+names automatically, see @ref{Generating Ada Bindings for C and C++ headers}).\n+This problem can also be addressed manually in two ways:\n+\n @itemize @bullet\n @item\n by modifying the C++ code in order to force a C convention using\n the @code{extern \"C\"} syntax.\n \n @item\n-by figuring out the mangled name and use it as the Link_Name argument of\n-the pragma import.\n+by figuring out the mangled name (using e.g. @command{nm}) and using it as the\n+Link_Name argument of the pragma import.\n @end itemize\n \n @noindent\n@@ -3025,15 +3026,17 @@ considered:\n @item\n Using GNAT and G++ (GNU C++ compiler) from the same GCC installation:\n The C++ linker can simply be called by using the C++ specific driver\n-called @code{c++}. Note that this setup is not very common because it\n-may involve recompiling the whole GCC tree from sources, which makes it\n-harder to upgrade the compilation system for one language without\n-destabilizing the other.\n+called @code{g++}.\n+\n+Note that if the C++ code uses inline functions, you will need to\n+compile your C++ code with the @code{-fkeep-inline-functions} switch in\n+order to provide an existing function implementation that the Ada code can\n+link with.\n \n @smallexample\n-$ c++ -c file1.C\n-$ c++ -c file2.C\n-$ gnatmake ada_unit -largs file1.o file2.o --LINK=c++\n+$ g++ -c -fkeep-inline-functions file1.C\n+$ g++ -c -fkeep-inline-functions file2.C\n+$ gnatmake ada_unit -largs file1.o file2.o --LINK=g++\n @end smallexample\n \n @item\n@@ -3105,6 +3108,10 @@ a pre-linking phase using GNAT will be necessary.\n \n @end enumerate\n \n+Another alternative is to use the @command{gprbuild} multi-language builder\n+which has a large knowledge base and knows how to link Ada and C++ code\n+together automatically in most cases.\n+\n @node A Simple Example\n @subsection  A Simple Example\n @noindent\n@@ -3122,10 +3129,10 @@ languages.\n Here are the compilation commands:\n @smallexample\n $ gnatmake -c simple_cpp_interface\n-$ c++ -c cpp_main.C\n-$ c++ -c ex7.C\n+$ g++ -c cpp_main.C\n+$ g++ -c ex7.C\n $ gnatbind -n simple_cpp_interface\n-$ gnatlink simple_cpp_interface -o cpp_main --LINK=$(CPLUSPLUS)\n+$ gnatlink simple_cpp_interface -o cpp_main --LINK=g++\n       -lstdc++ ex7.o cpp_main.o\n @end smallexample\n "}, {"sha": "24555f1278adf66d578a0ac66d3bccaee4b6a517", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "patch": "@@ -1179,6 +1179,19 @@ CND(SIZEOF_fd_set, \"fd_set\");\n TXT(\"   subtype H_Addrtype_T is Interfaces.C.\" h_addrtype_t \";\")\n TXT(\"   subtype H_Length_T   is Interfaces.C.\" h_length_t \";\")\n \n+/*\n+\n+   --  Fields of struct msghdr\n+*/\n+\n+#if defined (__VMS) || defined (__sun__) || defined (__hpux__)\n+# define msg_iovlen_t \"int\"\n+#else\n+# define msg_iovlen_t \"size_t\"\n+#endif\n+\n+TXT(\"   subtype Msg_Iovlen_T is Interfaces.C.\" msg_iovlen_t \";\")\n+\n /*\n \n    ----------------------------------------"}, {"sha": "e7cb9cc1651cbf4f68f5f8f381f038dcfdb83140", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=51ec70b8be4c423e38fcbc6e49add3fbc16fe5bb", "patch": "@@ -3298,6 +3298,8 @@ package body Sem_Aggr is\n                      --  We build a partially initialized aggregate with the\n                      --  values of the discriminants and box initialization\n                      --  for the rest, if other components are present.\n+                     --  The type of the aggregate is the known subtype of\n+                     --  the component.\n \n                      declare\n                         Loc        : constant Source_Ptr := Sloc (N);\n@@ -3309,6 +3311,7 @@ package body Sem_Aggr is\n \n                      begin\n                         Expr := Make_Aggregate (Loc, New_List, New_List);\n+                        Set_Etype (Expr, Ctyp);\n \n                         Discr_Elmt :=\n                           First_Elmt (Discriminant_Constraint (Ctyp));"}]}