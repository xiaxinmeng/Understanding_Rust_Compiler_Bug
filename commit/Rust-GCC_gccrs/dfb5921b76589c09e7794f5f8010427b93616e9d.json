{"sha": "dfb5921b76589c09e7794f5f8010427b93616e9d", "node_id": "C_kwDOANBUbNoAKGRmYjU5MjFiNzY1ODljMDllNzc5NGY1ZjgwMTA0MjdiOTM2MTZlOWQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-10-20T11:54:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-20T11:54:07Z"}, "message": "Merge #1549\n\n1549: Dump macro declarations properly r=CohenArthur a=CohenArthur\n\nDump `MacroRulesDef` properly\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "afee0ddbe488a894a4242a8de17839c4235d6bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afee0ddbe488a894a4242a8de17839c4235d6bbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfb5921b76589c09e7794f5f8010427b93616e9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjUTbfCRBK7hj4Ov3rIwAAv04IAKrJM9LHn3PXhxLeduIvvZXZ\n6tsoVr7cqRjaSbYgoTskoi2iTcyK5Vc/pBM0xf2B+PVxHDmH9K2w75MHFIQxb9Pk\np0U1SxAOwckfbBjQtoUzalGBSuBY+bbE74P9k0ubttOY1Kac613zL+LKU/AEH9Ux\npznDGkhDT2Mha7ZFb4k1CwQCMFmZtd01GRsdM7g3cdCNidNtS0CpODsOUz3jAb/k\n0fwDsFaXiseqnQw3Og/7XnN/n2OBZKM3RsOLFWctWkruJqXCR7AksBn6hIxWFIbl\n6/QA0U0lcXEYZc9InDXjPCycggWg17bqpT/h9LuKHU9ojTJeO1qqhOvWpZQdsKg=\n=fUyc\n-----END PGP SIGNATURE-----\n", "payload": "tree afee0ddbe488a894a4242a8de17839c4235d6bbd\nparent 3cedc655c2928707612da663211c0802a8ec9319\nparent 15229ea41faccfd2cbe4309b2afe333b56b090b1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1666266847 +0000\ncommitter GitHub <noreply@github.com> 1666266847 +0000\n\nMerge #1549\n\n1549: Dump macro declarations properly r=CohenArthur a=CohenArthur\n\nDump `MacroRulesDef` properly\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb5921b76589c09e7794f5f8010427b93616e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb5921b76589c09e7794f5f8010427b93616e9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb5921b76589c09e7794f5f8010427b93616e9d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cedc655c2928707612da663211c0802a8ec9319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cedc655c2928707612da663211c0802a8ec9319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cedc655c2928707612da663211c0802a8ec9319"}, {"sha": "15229ea41faccfd2cbe4309b2afe333b56b090b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15229ea41faccfd2cbe4309b2afe333b56b090b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15229ea41faccfd2cbe4309b2afe333b56b090b1"}], "stats": {"total": 143, "additions": 131, "deletions": 12}, "files": [{"sha": "4817962f76781ac997b6162d126afcf7dc39f0f7", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 118, "deletions": 8, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb5921b76589c09e7794f5f8010427b93616e9d/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb5921b76589c09e7794f5f8010427b93616e9d/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=dfb5921b76589c09e7794f5f8010427b93616e9d", "patch": "@@ -175,11 +175,27 @@ Dump::format_struct_field (StructField &field)\n \n void\n Dump::visit (Token &tok)\n-{}\n+{\n+  stream << tok.as_string ();\n+}\n \n void\n Dump::visit (DelimTokenTree &delim_tok_tree)\n-{}\n+{\n+  auto tokens = delim_tok_tree.to_token_stream ();\n+\n+  indentation.increment ();\n+  stream << '\\n' << indentation;\n+\n+  for (const auto &tok : tokens)\n+    {\n+      stream << ' ';\n+      tok->accept_vis (*this);\n+    }\n+\n+  indentation.decrement ();\n+  stream << '\\n' << indentation;\n+}\n \n void\n Dump::visit (AttrInputMetaItemContainer &input)\n@@ -1308,22 +1324,116 @@ Dump::visit (ExternBlock &block)\n   stream << \"\\n\" << indentation << \"}\\n\";\n }\n \n-// rust-macro.h\n+static std::pair<char, char>\n+get_delimiters (DelimType delim)\n+{\n+  auto start_delim = '\\0';\n+  auto end_delim = '\\0';\n+\n+  switch (delim)\n+    {\n+    case PARENS:\n+      start_delim = '(';\n+      end_delim = ')';\n+      break;\n+    case SQUARE:\n+      start_delim = '[';\n+      end_delim = ']';\n+      break;\n+    case CURLY:\n+      start_delim = '{';\n+      end_delim = '}';\n+      break;\n+    }\n+\n+  return {start_delim, end_delim};\n+}\n+\n void\n Dump::visit (MacroMatchFragment &match)\n-{}\n+{\n+  stream << '$' << match.get_ident () << ':'\n+\t << match.get_frag_spec ().as_string ();\n+}\n \n void\n-Dump::visit (MacroMatchRepetition &match)\n-{}\n+Dump::visit (MacroMatchRepetition &repetition)\n+{\n+  stream << \"$(\";\n+\n+  for (auto &match : repetition.get_matches ())\n+    {\n+      match->accept_vis (*this);\n+      stream << ' ';\n+    }\n+\n+  auto op_char = '\\0';\n+  switch (repetition.get_op ())\n+    {\n+    case MacroMatchRepetition::ANY:\n+      op_char = '*';\n+      break;\n+    case MacroMatchRepetition::ONE_OR_MORE:\n+      op_char = '+';\n+      break;\n+    case MacroMatchRepetition::ZERO_OR_ONE:\n+      op_char = '?';\n+      break;\n+    case MacroMatchRepetition::NONE:\n+      break;\n+    }\n+\n+  stream << ')';\n+\n+  if (repetition.has_sep ())\n+    stream << repetition.get_sep ()->as_string ();\n+\n+  stream << op_char;\n+}\n \n void\n Dump::visit (MacroMatcher &matcher)\n-{}\n+{\n+  auto delimiters = get_delimiters (matcher.get_delim_type ());\n+\n+  stream << delimiters.first;\n+\n+  for (auto &match : matcher.get_matches ())\n+    {\n+      match->accept_vis (*this);\n+      stream << ' ';\n+    }\n+\n+  stream << delimiters.second;\n+}\n \n void\n Dump::visit (MacroRulesDefinition &rules_def)\n-{}\n+{\n+  for (auto &outer_attr : rules_def.get_outer_attrs ())\n+    emit_attrib (outer_attr);\n+\n+  stream << \"macro_rules! \" << rules_def.get_rule_name () << \" {\\n\";\n+\n+  indentation.increment ();\n+\n+  for (auto &rule : rules_def.get_rules ())\n+    {\n+      stream << indentation;\n+\n+      rule.get_matcher ().accept_vis (*this);\n+\n+      stream << \" => \";\n+\n+      rule.get_transcriber ().get_token_tree ().accept_vis (*this);\n+\n+      stream << \";\\n\";\n+    }\n+\n+  indentation.decrement ();\n+\n+  stream << \"}\\n\";\n+}\n \n void\n Dump::visit (MacroInvocation &macro_invoc)"}, {"sha": "9fe8ee954937b0c3ae5fb657763fb87c417ab6de", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb5921b76589c09e7794f5f8010427b93616e9d/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb5921b76589c09e7794f5f8010427b93616e9d/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=dfb5921b76589c09e7794f5f8010427b93616e9d", "patch": "@@ -72,7 +72,9 @@ class Dump : public ASTVisitor\n   std::ostream &stream;\n   Indent indentation;\n \n-  // Format together common items of functions: Parameters, return type, block\n+  /**\n+   * Format together common items of functions: Parameters, return type, block\n+   */\n   void format_function_common (std::unique_ptr<Type> &return_type,\n \t\t\t       std::unique_ptr<BlockExpr> &block);\n \n@@ -97,13 +99,19 @@ class Dump : public ASTVisitor\n   std::ostream &emit_indented_string (const std::string &value,\n \t\t\t\t      const std::string &comment = \"\");\n \n-  // Emit formatted string for generic parameters.\n+  /**\n+   * Emit formatted string for generic parameters\n+   */\n   void emit_generic_params (std::vector<std::unique_ptr<GenericParam>> &params);\n \n-  // Format a single field of a tuple.\n+  /**\n+   * Format a single field of a tuple\n+   */\n   void format_tuple_field (TupleField &field);\n \n-  // Format a single field of a struct.\n+  /**\n+   * Format a single field of a struct\n+   */\n   void format_struct_field (StructField &field);\n \n   // rust-ast.h"}, {"sha": "276f441fe0b1cb7ef81ee09edd0c43b54b194d6b", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb5921b76589c09e7794f5f8010427b93616e9d/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb5921b76589c09e7794f5f8010427b93616e9d/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=dfb5921b76589c09e7794f5f8010427b93616e9d", "patch": "@@ -407,6 +407,7 @@ struct MacroTranscriber\n   Location get_locus () const { return locus; }\n \n   DelimTokenTree &get_token_tree () { return token_tree; }\n+  const DelimTokenTree &get_token_tree () const { return token_tree; }\n };\n \n // A macro rule? Matcher and transcriber pair?"}]}