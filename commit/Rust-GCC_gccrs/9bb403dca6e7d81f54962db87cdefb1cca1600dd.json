{"sha": "9bb403dca6e7d81f54962db87cdefb1cca1600dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJiNDAzZGNhNmU3ZDgxZjU0OTYyZGI4N2NkZWZiMWNjYTE2MDBkZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-24T00:16:20Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-24T00:16:20Z"}, "message": "Daily bump.", "tree": {"sha": "375602f20bdcf1462c50fb9fa76db0e6776bf67d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/375602f20bdcf1462c50fb9fa76db0e6776bf67d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bb403dca6e7d81f54962db87cdefb1cca1600dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb403dca6e7d81f54962db87cdefb1cca1600dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb403dca6e7d81f54962db87cdefb1cca1600dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb403dca6e7d81f54962db87cdefb1cca1600dd/comments", "author": null, "committer": null, "parents": [{"sha": "83cc5e2b2f887d4bb2305658da382a65fdcaab29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83cc5e2b2f887d4bb2305658da382a65fdcaab29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83cc5e2b2f887d4bb2305658da382a65fdcaab29"}], "stats": {"total": 162, "additions": 161, "deletions": 1}, "files": [{"sha": "36d53f87bf00b808a74757a11eb3ad4f9ea92c7a", "filename": "contrib/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb403dca6e7d81f54962db87cdefb1cca1600dd/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb403dca6e7d81f54962db87cdefb1cca1600dd/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=9bb403dca6e7d81f54962db87cdefb1cca1600dd", "patch": "@@ -1,3 +1,13 @@\n+2020-07-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* vimrc (SetStyle): Also inspect &filetype to determine whether\n+\ta file is C-like.\n+\n+2020-07-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: When reverting a backport,\n+\twe should print only Revert header.\n+\n 2020-07-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* gcc-changelog/git_update_version.py: Fix typo."}, {"sha": "aa51e2d6299d8fadfd83533a111b35fe079b323f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb403dca6e7d81f54962db87cdefb1cca1600dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb403dca6e7d81f54962db87cdefb1cca1600dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bb403dca6e7d81f54962db87cdefb1cca1600dd", "patch": "@@ -1,3 +1,36 @@\n+2020-07-23  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/96298\n+\t* simplify-rtx.c (simplify_binary_operation_1) [XOR]: Xor doesn't\n+\tdistribute over xor, so (a^b)^(c^b) is not the same as (a^c)^b.\n+\n+2020-07-23  Dong JianQiang  <dongjianqiang2@huawei.com>\n+\n+\tPR gcov-profile/96267\n+\t* gcov-io.c (gcov_open): enable if IN_GCOV_TOOL.\n+\n+2020-07-23  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (adjust_vectorization_cost): Renamed to ...\n+\t(rs6000_adjust_vect_cost_per_stmt): ... here.\n+\t(rs6000_add_stmt_cost): Rename adjust_vectorization_cost to\n+\trs6000_adjust_vect_cost_per_stmt.\n+\n+2020-07-23  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-ssa-loop-ivopts.c (get_mem_type_for_internal_fn): Handle\n+\tIFN_LEN_LOAD and IFN_LEN_STORE.\n+\t(get_alias_ptr_type_for_ptr_address): Likewise.\n+\n+2020-07-23  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/96260\n+\t* asan.c (asan_shadow_offset_set_p): New.\n+\t* asan.h (asan_shadow_offset_set_p): Ditto.\n+\t* toplev.c (process_options): Allow -fsanitize=kernel-address\n+\teven TARGET_ASAN_SHADOW_OFFSET not implemented, only check when\n+\tasan stack protection is enabled.\n+\n 2020-07-22  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR target/96236"}, {"sha": "09a13ab3781d77d394101ddd52d00e64e079fba1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb403dca6e7d81f54962db87cdefb1cca1600dd/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb403dca6e7d81f54962db87cdefb1cca1600dd/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9bb403dca6e7d81f54962db87cdefb1cca1600dd", "patch": "@@ -1 +1 @@\n-20200723\n+20200724"}, {"sha": "2a32e86b3cd2edf2ca63396136d03500f6ca694e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb403dca6e7d81f54962db87cdefb1cca1600dd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb403dca6e7d81f54962db87cdefb1cca1600dd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9bb403dca6e7d81f54962db87cdefb1cca1600dd", "patch": "@@ -1,3 +1,52 @@\n+2020-07-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* aspects.ads: Declare CUDA_Global as aspect.\n+\t* einfo.ads: Use Flag118 for the Is_CUDA_Kernel flag.\n+\t(Set_Is_CUDA_Kernel): New function.\n+\t(Is_CUDA_Kernel): New function.\n+\t* einfo.adb (Set_Is_CUDA_Kernel): New function.\n+\t(Is_CUDA_Kernel): New function.\n+\t* par-prag.adb (Prag): Ignore Pragma_CUDA_Execute and\n+\tPragma_CUDA_global.\n+\t* rtsfind.ads: Define CUDA.Driver_Types.Stream_T and\n+\tCUDA.Vector_Types.Dim3 entities\n+\t* rtsfind.adb: Define CUDA_Descendant subtype.\n+\t(Get_Unit_Name): Handle CUDA_Descendant packages.\n+\t* sem_prag.ads: Mark CUDA_Global as aspect-specifying pragma.\n+\t* sem_prag.adb (Analyze_Pragma): Validate Pragma_CUDA_Execute and\n+\tPragma_CUDA_Global.\n+\t* snames.ads-tmpl: Define Name_CUDA_Execute and Name_CUDA_Global.\n+\n+2020-07-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch13.ads (Same_Representation): Renamed as\n+\tHas_Compatible_Representation because now the order of the arguments\n+\tare taken into account; its formals are also renamed as Target_Type\n+\tand Operand_Type.\n+\t* sem_ch13.adb (Same_Representation): Renamed and moved to place the\n+\troutine in alphabetic order.\n+\t* sem_attr.adb (Prefix_With_Safe_Accessibility_Level): New subprogram.\n+\t(Resolve_Attribute): Check that the prefix of attribute Access\n+\tdoes not have a value conversion of an array type.\n+\t* sem_res.adb (Resolve_Actuals): Remove restrictive check on view\n+\tconversions which required matching value of Has_Aliased_Components of\n+\tformals and actuals.\n+\t* exp_ch4.adb (Handle_Changed_Representation): Update call to\n+\tSame_Representation.\n+\t(Expand_N_Type_Conversion): Update call to Same_Representation.\n+\t* exp_ch5.adb (Change_Of_Representation): Update call to\n+\tSame_Representation.\n+\t* exp_ch6.adb (Add_Call_By_Copy_Code): Update call to\n+\tSame_Representation.\n+\t(Expand_Actuals): Update call to Same_Representation.\n+\t(Expand_Call_Helper): Update call to Same_Representation.\n+\n+2020-07-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* output.ads (Push_Output, Pop_Output): New procedures.\n+\t* output.adb (FD_Array, FD_Stack, FD_Stack_Idx): New type and vars.\n+\t(Push_Output, Pop_Output): New procedures.\n+\n 2020-07-16  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_ch3.adb (Expand_N_Full_Type_Declaration): Ensure a _master"}, {"sha": "652408d100f06ce2fbf470c03c2704caf71f67a2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb403dca6e7d81f54962db87cdefb1cca1600dd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb403dca6e7d81f54962db87cdefb1cca1600dd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9bb403dca6e7d81f54962db87cdefb1cca1600dd", "patch": "@@ -1,3 +1,23 @@\n+2020-07-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.h (gfc_omp_namelist): Add lastprivate_conditional.\n+\t* openmp.c (gfc_match_omp_clauses): Handle 'conditional:'\n+\tmodifier of 'lastprivate'.\n+\t* trans-openmp.c (gfc_omp_clause_default_ctor): Don't assert\n+\ton OMP_CLAUSE__CONDTEMP_ and other OMP_*TEMP_.\n+\t(gfc_trans_omp_variable_list): Handle lastprivate_conditional.\n+\n+2020-07-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* intrinsic.texi (OMP_LIB_KINDS): Add omp_depend_kind.\n+\n+2020-07-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.texi (Standards): Update URL; state that OpenMP 4.5\n+\tis supported and 5.0 is partially.\n+\t* intrinsic.texi (OpenMP Modules): Refer also to OpenMP 5.0;\n+\t(OMP_LIB): Add missing derived type and new named constants.\n+\n 2020-07-22  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gfortran.h (enum gfc_omp_if_kind): Add OMP_IF_CANCEL and OMP_IF_SIMD."}, {"sha": "0609ab2ff851a27b744a697187354558bffb0900", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb403dca6e7d81f54962db87cdefb1cca1600dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb403dca6e7d81f54962db87cdefb1cca1600dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bb403dca6e7d81f54962db87cdefb1cca1600dd", "patch": "@@ -1,3 +1,26 @@\n+2020-07-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/95886\n+\t* gcc.target/i386/memcpy-pr95886.c: Restrict test to LP64.\n+\n+2020-07-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/lastprivate-conditional-1.f90: New test.\n+\t* gfortran.dg/gomp/lastprivate-conditional-2.f90: New test.\n+\t* gfortran.dg/gomp/lastprivate-conditional-3.f90: New test.\n+\t* gfortran.dg/gomp/lastprivate-conditional-4.f90: New test.\n+\t* gfortran.dg/gomp/lastprivate-conditional-5.f90: New test.\n+\n+2020-07-23  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/96260\n+\t* gcc.target/riscv/pr91441.c: Update warning message.\n+\t* gcc.target/riscv/pr96260.c: New.\n+\n+2020-07-23  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* c-c++-common/builtin-has-attribute-4.c: Require visibility.\n+\n 2020-07-22  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gfortran.dg/gomp/cancel-2.f90: New test."}, {"sha": "fd86c69aa2b01a08264c07cf366720b726ff1071", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb403dca6e7d81f54962db87cdefb1cca1600dd/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb403dca6e7d81f54962db87cdefb1cca1600dd/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9bb403dca6e7d81f54962db87cdefb1cca1600dd", "patch": "@@ -1,3 +1,9 @@\n+2020-07-23  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/96035\n+\t* libgcov-driver-system.c: Create gcov folders with 0777\n+\tso that it respects a system umask.\n+\n 2020-07-14  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/t-slibgcc-aix: Set BITS from compiler cpp macro."}, {"sha": "ad9617392f498acb2123935fd5a6e13b40a6b246", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb403dca6e7d81f54962db87cdefb1cca1600dd/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb403dca6e7d81f54962db87cdefb1cca1600dd/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9bb403dca6e7d81f54962db87cdefb1cca1600dd", "patch": "@@ -1,3 +1,22 @@\n+2020-07-23  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* target.c (gomp_unmap_vars_internal): Remove unnecessary forcing of\n+\tfinalization for detach operation.\n+\t* testsuite/libgomp.oacc-c-c++-common/structured-detach-underflow.c:\n+\tNew test.\n+\n+2020-07-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* configure.ac: Add OMP_DEPEND_KIND and OMP_INT128_SIZE.\n+\t* libgomp_f.h.in (omp_check_defines): Check whether\n+\tsizeof of determined Fortran kind and C typedef match.\n+\t* omp_lib.f90.in: Add omp_depened_kind.\n+\t* omp_lib.h.in: Likewise; fix omp_alloctrait_key_kind.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n 2020-07-22  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.c-c++-common/critical-hint-1.c: New; moved from"}]}