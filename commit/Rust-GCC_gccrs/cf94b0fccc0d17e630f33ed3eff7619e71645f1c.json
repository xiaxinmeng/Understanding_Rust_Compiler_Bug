{"sha": "cf94b0fccc0d17e630f33ed3eff7619e71645f1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y5NGIwZmNjYzBkMTdlNjMwZjMzZWQzZWZmNzYxOWU3MTY0NWYxYw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-01-24T08:55:47Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-01-24T08:55:47Z"}, "message": "rtlanal.c (non_rtx_starting_operands, [...]): New.\n\n2005-01-24  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* rtlanal.c (non_rtx_starting_operands, for_each_rtx_1,\n\tinit_rtlanal): New.\n\t(for_each_rtx): Call for_each_rtx_1.\n\t* rtl.h (init_rtlanal): Declare.\n\t* toplev.c (backend_init): Call init_rtlanal.\n\nFrom-SVN: r94146", "tree": {"sha": "41828e58bb4f1c77ba97241564241cbc154e5432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41828e58bb4f1c77ba97241564241cbc154e5432"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf94b0fccc0d17e630f33ed3eff7619e71645f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf94b0fccc0d17e630f33ed3eff7619e71645f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf94b0fccc0d17e630f33ed3eff7619e71645f1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf94b0fccc0d17e630f33ed3eff7619e71645f1c/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b77302be88147ea826ab87d7d31e810fa68f4279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77302be88147ea826ab87d7d31e810fa68f4279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b77302be88147ea826ab87d7d31e810fa68f4279"}], "stats": {"total": 145, "additions": 109, "deletions": 36}, "files": [{"sha": "874eccdca0c4db5d27a84a337db05fc0035379c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf94b0fccc0d17e630f33ed3eff7619e71645f1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf94b0fccc0d17e630f33ed3eff7619e71645f1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf94b0fccc0d17e630f33ed3eff7619e71645f1c", "patch": "@@ -1,3 +1,11 @@\n+2005-01-24  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* rtlanal.c (non_rtx_starting_operands, for_each_rtx_1,\n+\tinit_rtlanal): New.\n+\t(for_each_rtx): Call for_each_rtx_1.\n+\t* rtl.h (init_rtlanal): Declare.\n+\t* toplev.c (backend_init): Call init_rtlanal.\n+\n 2005-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* flow.c (propagate_one_insn): Formatting."}, {"sha": "7e010293cd03dc757e7011118eb9f4f7a4b5c61a", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf94b0fccc0d17e630f33ed3eff7619e71645f1c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf94b0fccc0d17e630f33ed3eff7619e71645f1c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=cf94b0fccc0d17e630f33ed3eff7619e71645f1c", "patch": "@@ -966,6 +966,7 @@ enum label_kind\n    not to use an rtx with this cost under any circumstances.  */\n #define MAX_COST INT_MAX\n \n+extern void init_rtlanal (void);\n extern int rtx_cost (rtx, enum rtx_code);\n extern int address_cost (rtx, enum machine_mode);\n extern unsigned int subreg_lsb (rtx);"}, {"sha": "94e8d4c8033ae111f1249f7466de1969c069ce50", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 99, "deletions": 36, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf94b0fccc0d17e630f33ed3eff7619e71645f1c/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf94b0fccc0d17e630f33ed3eff7619e71645f1c/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=cf94b0fccc0d17e630f33ed3eff7619e71645f1c", "patch": "@@ -58,6 +58,10 @@ static unsigned int cached_num_sign_bit_copies (rtx, enum machine_mode, rtx,\n static unsigned int num_sign_bit_copies1 (rtx, enum machine_mode, rtx,\n                                           enum machine_mode, unsigned int);\n \n+/* Offset of the first 'e', 'E' or 'V' operand for each rtx code, or\n+   -1 if a code has no such operand.  */\n+static int non_rtx_starting_operands[NUM_RTX_CODE];\n+\n /* Bit flags that specify the machine subtype we are compiling for.\n    Bits are tested using macros TARGET_... defined in the tm.h file\n    and set by `-m...' switches.  Must be defined in rtlanal.c.  */\n@@ -2624,6 +2628,82 @@ computed_jump_p (rtx insn)\n   return 0;\n }\n \n+/* Optimized loop of for_each_rtx, trying to avoid useless recursive\n+   calls.  Processes the subexpressions of EXP and passes them to F.  */\n+static int\n+for_each_rtx_1 (rtx exp, int n, rtx_function f, void *data)\n+{\n+  int result, i, j;\n+  const char *format = GET_RTX_FORMAT (GET_CODE (exp));\n+  rtx *x;\n+\n+  for (; format[n] != '\\0'; n++)\n+    {\n+      switch (format[n])\n+\t{\n+\tcase 'e':\n+\t  /* Call F on X.  */\n+\t  x = &XEXP (exp, n);\n+\t  result = (*f) (x, data);\n+\t  if (result == -1)\n+\t    /* Do not traverse sub-expressions.  */\n+\t    continue;\n+\t  else if (result != 0)\n+\t    /* Stop the traversal.  */\n+\t    return result;\n+\t\n+\t  if (*x == NULL_RTX)\n+\t    /* There are no sub-expressions.  */\n+\t    continue;\n+\t\n+\t  i = non_rtx_starting_operands[GET_CODE (*x)];\n+\t  if (i >= 0)\n+\t    {\n+\t      result = for_each_rtx_1 (*x, i, f, data);\n+\t      if (result != 0)\n+\t\treturn result;\n+\t    }\n+\t  break;\n+\n+\tcase 'V':\n+\tcase 'E':\n+\t  if (XVEC (exp, n) == 0)\n+\t    continue;\n+\t  for (j = 0; j < XVECLEN (exp, n); ++j)\n+\t    {\n+\t      /* Call F on X.  */\n+\t      x = &XVECEXP (exp, n, j);\n+\t      result = (*f) (x, data);\n+\t      if (result == -1)\n+\t\t/* Do not traverse sub-expressions.  */\n+\t\tcontinue;\n+\t      else if (result != 0)\n+\t\t/* Stop the traversal.  */\n+\t\treturn result;\n+\t\n+\t      if (*x == NULL_RTX)\n+\t\t/* There are no sub-expressions.  */\n+\t\tcontinue;\n+\t\n+\t      i = non_rtx_starting_operands[GET_CODE (*x)];\n+\t      if (i >= 0)\n+\t\t{\n+\t\t  result = for_each_rtx_1 (*x, i, f, data);\n+\t\t  if (result != 0)\n+\t\t    return result;\n+\t        }\n+\t    }\n+\t  break;\n+\n+\tdefault:\n+\t  /* Nothing to do.  */\n+\t  break;\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n /* Traverse X via depth-first search, calling F for each\n    sub-expression (including X itself).  F is also passed the DATA.\n    If F returns -1, do not traverse sub-expressions, but continue\n@@ -2641,8 +2721,6 @@ int\n for_each_rtx (rtx *x, rtx_function f, void *data)\n {\n   int result;\n-  int length;\n-  const char *format;\n   int i;\n \n   /* Call F on X.  */\n@@ -2658,43 +2736,14 @@ for_each_rtx (rtx *x, rtx_function f, void *data)\n     /* There are no sub-expressions.  */\n     return 0;\n \n-  length = GET_RTX_LENGTH (GET_CODE (*x));\n-  format = GET_RTX_FORMAT (GET_CODE (*x));\n-\n-  for (i = 0; i < length; ++i)\n-    {\n-      switch (format[i])\n-\t{\n-\tcase 'e':\n-\t  result = for_each_rtx (&XEXP (*x, i), f, data);\n-\t  if (result != 0)\n-\t    return result;\n-\t  break;\n-\n-\tcase 'V':\n-\tcase 'E':\n-\t  if (XVEC (*x, i) != 0)\n-\t    {\n-\t      int j;\n-\t      for (j = 0; j < XVECLEN (*x, i); ++j)\n-\t\t{\n-\t\t  result = for_each_rtx (&XVECEXP (*x, i, j), f, data);\n-\t\t  if (result != 0)\n-\t\t    return result;\n-\t\t}\n-\t    }\n-\t  break;\n-\n-\tdefault:\n-\t  /* Nothing to do.  */\n-\t  break;\n-\t}\n-\n-    }\n+  i = non_rtx_starting_operands[GET_CODE (*x)];\n+  if (i < 0)\n+    return 0;\n \n-  return 0;\n+  return for_each_rtx_1 (*x, i, f, data);\n }\n \n+\n /* Searches X for any reference to REGNO, returning the rtx of the\n    reference found if any.  Otherwise, returns NULL_RTX.  */\n \n@@ -4612,3 +4661,17 @@ get_condition (rtx jump, rtx *earliest, int allow_cc_mode, int valid_at_insn_p)\n \t\t\t\t allow_cc_mode, valid_at_insn_p);\n }\n \n+\f\n+/* Initialize non_rtx_starting_operands, which is used to speed up\n+   for_each_rtx.  */\n+void\n+init_rtlanal (void)\n+{\n+  int i;\n+  for (i = 0; i < NUM_RTX_CODE; i++)\n+    {\n+      const char *format = GET_RTX_FORMAT (i);\n+      const char *first = strpbrk (format, \"eEV\");\n+      non_rtx_starting_operands[i] = first ? first - format : -1;\n+    }\n+}"}, {"sha": "af57e570f78ccffe0b29d8213b5af2dfe7160888", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf94b0fccc0d17e630f33ed3eff7619e71645f1c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf94b0fccc0d17e630f33ed3eff7619e71645f1c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=cf94b0fccc0d17e630f33ed3eff7619e71645f1c", "patch": "@@ -1951,6 +1951,7 @@ backend_init (void)\n #endif\n \t\t    || flag_test_coverage);\n \n+  init_rtlanal ();\n   init_regs ();\n   init_fake_stack_mems ();\n   init_alias_once ();"}]}