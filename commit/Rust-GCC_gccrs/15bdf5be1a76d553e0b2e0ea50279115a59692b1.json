{"sha": "15bdf5be1a76d553e0b2e0ea50279115a59692b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTViZGY1YmUxYTc2ZDU1M2UwYjJlMGVhNTAyNzkxMTVhNTk2OTJiMQ==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2016-06-08T08:38:50Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2016-06-08T08:38:50Z"}, "message": "tree-vect-data-refs.c (vect_analyze_data_refs): Remove debug newline.\n\n2016-06-08  Alan Hayward  <alan.hayward@arm.com>\n\ngcc/\n\t* tree-vect-data-refs.c (vect_analyze_data_refs): Remove debug newline.\n\t* tree-vect-loop-manip.c (slpeel_make_loop_iterate_ntimes): likewise.\n\t(vect_can_advance_ivs_p): likewise.\n\t(vect_update_ivs_after_vectorizer): likewise.\n\t* tree-vect-loop.c (vect_determine_vectorization_factor): likewise.\n\t(vect_analyze_scalar_cycles_1): likewise.\n\t(vect_analyze_loop_operations): likewise.\n\t(report_vect_op): likewise.\n\t(vect_is_slp_reduction): likewise.\n\t(vect_is_simple_reduction): likewise.\n\t(get_initial_def_for_induction): likewise.\n\t(vect_transform_loop): likewise.\n\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): likewise.\n\t(vect_recog_sad_pattern): likewise.\n\t(vect_recog_widen_sum_pattern): likewise.\n\t(vect_recog_widening_pattern): likewise.\n\t(vect_recog_divmod_pattern): likewise.\n\t* tree-vect-slp.c (vect-build-slp_tree_1): likewise.\n\t(vect_analyze_slp_instance): likewise.\n\t(vect_transform_slp_perm_load): likewise.\n\t(vect_schedule_slp_instance): likewise.\n\nFrom-SVN: r237198", "tree": {"sha": "97b17bcd9127aed5fe3d664254dd3b07568d5043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97b17bcd9127aed5fe3d664254dd3b07568d5043"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15bdf5be1a76d553e0b2e0ea50279115a59692b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15bdf5be1a76d553e0b2e0ea50279115a59692b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15bdf5be1a76d553e0b2e0ea50279115a59692b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15bdf5be1a76d553e0b2e0ea50279115a59692b1/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce0607bbcdfdb5bb1653cf40db9f205516f526b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0607bbcdfdb5bb1653cf40db9f205516f526b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce0607bbcdfdb5bb1653cf40db9f205516f526b5"}], "stats": {"total": 81, "additions": 25, "deletions": 56}, "files": [{"sha": "087d9f9f72ccf2d7aaa70c0f6e8b5cd85ddcc657", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15bdf5be1a76d553e0b2e0ea50279115a59692b1", "patch": "@@ -1,3 +1,27 @@\n+2016-06-08  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* tree-vect-data-refs.c (vect_analyze_data_refs): Remove debug newline.\n+\t* tree-vect-loop-manip.c (slpeel_make_loop_iterate_ntimes): likewise.\n+\t(vect_can_advance_ivs_p): likewise.\n+\t(vect_update_ivs_after_vectorizer): likewise.\n+\t* tree-vect-loop.c (vect_determine_vectorization_factor): likewise.\n+\t(vect_analyze_scalar_cycles_1): likewise.\n+\t(vect_analyze_loop_operations): likewise.\n+\t(report_vect_op): likewise.\n+\t(vect_is_slp_reduction): likewise.\n+\t(vect_is_simple_reduction): likewise.\n+\t(get_initial_def_for_induction): likewise.\n+\t(vect_transform_loop): likewise.\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): likewise.\n+\t(vect_recog_sad_pattern): likewise.\n+\t(vect_recog_widen_sum_pattern): likewise.\n+\t(vect_recog_widening_pattern): likewise.\n+\t(vect_recog_divmod_pattern): likewise.\n+\t* tree-vect-slp.c (vect-build-slp_tree_1): likewise.\n+\t(vect_analyze_slp_instance): likewise.\n+\t(vect_transform_slp_perm_load): likewise.\n+\t(vect_schedule_slp_instance): likewise.\n+\n 2016-06-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* predict.c (predict_iv_comparison): Mention that heuristics is broken."}, {"sha": "e640bbda790858796fdd03134662b5534f8b4218", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=15bdf5be1a76d553e0b2e0ea50279115a59692b1", "patch": "@@ -3557,7 +3557,6 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n                                    \"not vectorized: data ref analysis \"\n                                    \"failed \");\n \t\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-                  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t}\n \n \t      if (is_a <bb_vec_info> (vinfo))\n@@ -3589,7 +3588,6 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n               dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n                                \"not vectorized: volatile type \");\n               dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-              dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n             }\n \n           if (is_a <bb_vec_info> (vinfo))\n@@ -3606,7 +3604,6 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n                                \"not vectorized: statement can throw an \"\n                                \"exception \");\n               dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-              dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n             }\n \n           if (is_a <bb_vec_info> (vinfo))\n@@ -3626,7 +3623,6 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n                                \"not vectorized: statement is bitfield \"\n                                \"access \");\n               dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-              dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n             }\n \n           if (is_a <bb_vec_info> (vinfo))\n@@ -3651,7 +3647,6 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n \t      dump_printf_loc (MSG_MISSED_OPTIMIZATION,  vect_location,\n \t                       \"not vectorized: dr in a call \");\n \t      dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-\t      dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t    }\n \n \t  if (is_a <bb_vec_info> (vinfo))\n@@ -3798,7 +3793,6 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n                                \"not vectorized: more than one data ref \"\n                                \"in stmt: \");\n               dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-              dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n             }\n \n           if (is_a <bb_vec_info> (vinfo))\n@@ -3887,7 +3881,6 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n \t\t\t\t   \"not vectorized: not suitable for scatter \"\n \t\t\t\t   \"store \");\n \t\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-                  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t}\n \t      return false;\n \t    }\n@@ -3908,7 +3901,6 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n                                    \"not vectorized: not suitable for strided \"\n                                    \"load \");\n \t\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-                  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t}\n \t      return false;\n \t    }"}, {"sha": "508bbf0b281190c60179dc636dd9ccc093b200a1", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=15bdf5be1a76d553e0b2e0ea50279115a59692b1", "patch": "@@ -710,7 +710,6 @@ slpeel_make_loop_iterate_ntimes (struct loop *loop, tree niters)\n \tdump_printf (MSG_NOTE, \"\\nloop at %s:%d: \", LOCATION_FILE (loop_loc),\n \t\t     LOCATION_LINE (loop_loc));\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, cond_stmt, 0);\n-      dump_printf (MSG_NOTE, \"\\n\");\n     }\n   loop->nb_iterations = niters;\n }\n@@ -1557,7 +1556,6 @@ vect_can_advance_ivs_p (loop_vec_info loop_vinfo)\n \t{\n           dump_printf_loc (MSG_NOTE, vect_location, \"Analyze phi: \");\n           dump_gimple_stmt (MSG_NOTE, TDF_SLIM, phi, 0);\n-          dump_printf (MSG_NOTE, \"\\n\");\n \t}\n \n       /* Skip virtual phi's. The data dependences that are associated with\n@@ -1678,7 +1676,6 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n           dump_printf_loc (MSG_NOTE, vect_location,\n                            \"vect_update_ivs_after_vectorizer: phi: \");\n \t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, phi, 0);\n-          dump_printf (MSG_NOTE, \"\\n\");\n         }\n \n       /* Skip virtual phi's.  */"}, {"sha": "1f61c83deafa003529273e21f68bc48d3e6446b9", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=15bdf5be1a76d553e0b2e0ea50279115a59692b1", "patch": "@@ -212,7 +212,6 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t    {\n \t      dump_printf_loc (MSG_NOTE, vect_location, \"==> examining phi: \");\n \t      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, phi, 0);\n-\t      dump_printf (MSG_NOTE, \"\\n\");\n \t    }\n \n \t  gcc_assert (stmt_info);\n@@ -282,7 +281,6 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t      dump_printf_loc (MSG_NOTE, vect_location,\n                                \"==> examining statement: \");\n \t      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n-              dump_printf (MSG_NOTE, \"\\n\");\n \t    }\n \n \t  gcc_assert (stmt_info);\n@@ -304,7 +302,6 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n                       dump_printf_loc (MSG_NOTE, vect_location,\n                                        \"==> examining pattern statement: \");\n                       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n-                      dump_printf (MSG_NOTE, \"\\n\");\n                     }\n                 }\n               else\n@@ -355,7 +352,6 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n                                            \"==> examining pattern def stmt: \");\n \t\t\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM,\n                                             pattern_def_stmt, 0);\n-                          dump_printf (MSG_NOTE, \"\\n\");\n \t\t\t}\n \n \t\t      stmt = pattern_def_stmt;\n@@ -396,7 +392,6 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n                                    \"not vectorized: irregular stmt.\");\n \t\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION,  TDF_SLIM, stmt,\n                                     0);\n-                  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t}\n \t      return false;\n \t    }\n@@ -408,7 +403,6 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t          dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n                                    \"not vectorized: vector stmt in loop:\");\n \t          dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-                  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t        }\n \t      return false;\n \t    }\n@@ -625,7 +619,6 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t\t\t\t       \"for statement, \");\n \t\t      dump_gimple_stmt (MSG_MISSED_OPTIMIZATION,  TDF_SLIM, stmt,\n \t\t\t\t\t0);\n-\t\t      dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t    }\n \t\t  return false;\n \t\t}\n@@ -695,7 +688,6 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t\t\t       \"for statement, \");\n \t      dump_gimple_stmt (MSG_MISSED_OPTIMIZATION,  TDF_SLIM, stmt,\n \t\t\t\t0);\n-\t      dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t    }\n \t  return false;\n \t}\n@@ -799,7 +791,6 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \t{\n \t  dump_printf_loc (MSG_NOTE, vect_location, \"Analyze phi: \");\n \t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, phi, 0);\n-          dump_printf (MSG_NOTE, \"\\n\");\n \t}\n \n       /* Skip virtual phi's.  The data dependences that are associated with\n@@ -859,7 +850,6 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n         {\n           dump_printf_loc (MSG_NOTE, vect_location, \"Analyze phi: \");\n           dump_gimple_stmt (MSG_NOTE, TDF_SLIM, phi, 0);\n-          dump_printf (MSG_NOTE, \"\\n\");\n         }\n \n       gcc_assert (!virtual_operand_p (def)\n@@ -1623,7 +1613,6 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n             {\n               dump_printf_loc (MSG_NOTE, vect_location, \"examining phi: \");\n               dump_gimple_stmt (MSG_NOTE, TDF_SLIM, phi, 0);\n-              dump_printf (MSG_NOTE, \"\\n\");\n             }\n \t  if (virtual_operand_p (gimple_phi_result (phi)))\n \t    continue;\n@@ -1705,7 +1694,6 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n \t\t\t\t   \"not vectorized: relevant phi not \"\n \t\t\t\t   \"supported: \");\n                   dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, phi, 0);\n-                  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n                 }\n \t      return false;\n             }\n@@ -2337,7 +2325,6 @@ report_vect_op (int msg_type, gimple *stmt, const char *msg)\n {\n   dump_printf_loc (msg_type, vect_location, \"%s\", msg);\n   dump_gimple_stmt (msg_type, TDF_SLIM, stmt, 0);\n-  dump_printf (msg_type, \"\\n\");\n }\n \n \n@@ -2508,7 +2495,6 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \t\t{\n \t\t  dump_printf_loc (MSG_NOTE, vect_location, \"swapping oprnds: \");\n \t\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, next_stmt, 0);\n-                  dump_printf (MSG_NOTE, \"\\n\");\n \t\t}\n \n \t      swap_ssa_operands (next_stmt,\n@@ -2667,10 +2653,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n   if (!is_gimple_assign (def_stmt) && gimple_code (def_stmt) != GIMPLE_PHI)\n     {\n       if (dump_enabled_p ())\n-        {\n-          dump_gimple_stmt (MSG_NOTE, TDF_SLIM, def_stmt, 0);\n-          dump_printf (MSG_NOTE, \"\\n\");\n-        }\n+\tdump_gimple_stmt (MSG_NOTE, TDF_SLIM, def_stmt, 0);\n       return NULL;\n     }\n \n@@ -3978,7 +3961,6 @@ get_initial_def_for_induction (gimple *iv_phi)\n \t      dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t       \"vector of inductions after inner-loop:\");\n \t      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, new_stmt, 0);\n-              dump_printf (MSG_NOTE, \"\\n\");\n \t    }\n \t}\n     }\n@@ -3989,10 +3971,8 @@ get_initial_def_for_induction (gimple *iv_phi)\n       dump_printf_loc (MSG_NOTE, vect_location,\n \t\t       \"transform induction: created def-use cycle: \");\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, induction_phi, 0);\n-      dump_printf (MSG_NOTE, \"\\n\");\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM,\n \t\t\tSSA_NAME_DEF_STMT (vec_def), 0);\n-      dump_printf (MSG_NOTE, \"\\n\");\n     }\n \n   STMT_VINFO_VEC_STMT (phi_info) = induction_phi;\n@@ -4414,9 +4394,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n               dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t       \"transform reduction: created def-use cycle: \");\n               dump_gimple_stmt (MSG_NOTE, TDF_SLIM, phi, 0);\n-              dump_printf (MSG_NOTE, \"\\n\");\n               dump_gimple_stmt (MSG_NOTE, TDF_SLIM, SSA_NAME_DEF_STMT (def), 0);\n-              dump_printf (MSG_NOTE, \"\\n\");\n             }\n         }\n     }\n@@ -5166,7 +5144,6 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n                       dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t\t       \"created double reduction phi node: \");\n                       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, vect_phi, 0);\n-                      dump_printf (MSG_NOTE, \"\\n\");\n                     }\n \n                   vect_phi_res = PHI_RESULT (vect_phi);\n@@ -6719,7 +6696,6 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t      dump_printf_loc (MSG_NOTE, vect_location,\n                                \"------>vectorizing phi: \");\n \t      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, phi, 0);\n-              dump_printf (MSG_NOTE, \"\\n\");\n \t    }\n \t  stmt_info = vinfo_for_stmt (phi);\n \t  if (!stmt_info)\n@@ -6772,7 +6748,6 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t      dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t       \"------>vectorizing statement: \");\n \t      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n-              dump_printf (MSG_NOTE, \"\\n\");\n \t    }\n \n \t  stmt_info = vinfo_for_stmt (stmt);\n@@ -6847,7 +6822,6 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t\t\t\t\t   \"stmt: \");\n \t\t\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM,\n \t\t\t\t\t    pattern_def_stmt, 0);\n-                          dump_printf (MSG_NOTE, \"\\n\");\n \t\t\t}\n \n \t\t      stmt = pattern_def_stmt;"}, {"sha": "8a2221f935063002ecd02d2b20af5cb4bd7d9fee", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=15bdf5be1a76d553e0b2e0ea50279115a59692b1", "patch": "@@ -431,7 +431,6 @@ vect_recog_dot_prod_pattern (vec<gimple *> *stmts, tree *type_in,\n       dump_printf_loc (MSG_NOTE, vect_location,\n                        \"vect_recog_dot_prod_pattern: detected: \");\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n-      dump_printf (MSG_NOTE, \"\\n\");\n     }\n \n   return pattern_stmt;\n@@ -667,7 +666,6 @@ vect_recog_sad_pattern (vec<gimple *> *stmts, tree *type_in,\n       dump_printf_loc (MSG_NOTE, vect_location,\n                        \"vect_recog_sad_pattern: detected: \");\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n-      dump_printf (MSG_NOTE, \"\\n\");\n     }\n \n   return pattern_stmt;\n@@ -1210,7 +1208,6 @@ vect_recog_widen_sum_pattern (vec<gimple *> *stmts, tree *type_in,\n       dump_printf_loc (MSG_NOTE, vect_location,\n                        \"vect_recog_widen_sum_pattern: detected: \");\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n-      dump_printf (MSG_NOTE, \"\\n\");\n     }\n \n   return pattern_stmt;\n@@ -1510,7 +1507,6 @@ vect_recog_over_widening_pattern (vec<gimple *> *stmts,\n           dump_printf_loc (MSG_NOTE, vect_location,\n                            \"created pattern stmt: \");\n           dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n-          dump_printf (MSG_NOTE, \"\\n\");\n         }\n \n       type = gimple_expr_type (stmt);\n@@ -1578,7 +1574,6 @@ vect_recog_over_widening_pattern (vec<gimple *> *stmts,\n       dump_printf_loc (MSG_NOTE, vect_location,\n                        \"vect_recog_over_widening_pattern: detected: \");\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n-      dump_printf (MSG_NOTE, \"\\n\");\n     }\n \n   return pattern_stmt;\n@@ -2717,7 +2712,6 @@ vect_recog_divmod_pattern (vec<gimple *> *stmts,\n       dump_printf_loc (MSG_NOTE, vect_location,\n                        \"vect_recog_divmod_pattern: detected: \");\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n-      dump_printf (MSG_NOTE, \"\\n\");\n     }\n \n   stmts->safe_push (last_stmt);"}, {"sha": "0239e12d4829ec29192d8f178678ee78e3dad460", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15bdf5be1a76d553e0b2e0ea50279115a59692b1/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=15bdf5be1a76d553e0b2e0ea50279115a59692b1", "patch": "@@ -498,7 +498,6 @@ vect_build_slp_tree_1 (vec_info *vinfo,\n               dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t       \"Build SLP failed: unvectorizable statement \");\n               dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-              dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n             }\n \t  /* Fatal mismatch.  */\n \t  matches[0] = false;\n@@ -514,7 +513,6 @@ vect_build_slp_tree_1 (vec_info *vinfo,\n \t\t\t       \"Build SLP failed: not GIMPLE_ASSIGN nor \"\n \t\t\t       \"GIMPLE_CALL \");\n \t      dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-              dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t    }\n \t  /* Fatal mismatch.  */\n \t  matches[0] = false;\n@@ -570,7 +568,6 @@ vect_build_slp_tree_1 (vec_info *vinfo,\n \t\t\t\t   \"Build SLP failed: unsupported call type \");\n \t\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n \t\t\t\t    call_stmt, 0);\n-                  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t}\n \t      /* Fatal mismatch.  */\n \t      matches[0] = false;\n@@ -686,7 +683,6 @@ vect_build_slp_tree_1 (vec_info *vinfo,\n \t\t\t\t   \"Build SLP failed: different shift \"\n \t\t\t\t   \"arguments in \");\n \t\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-                  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t}\n \t      /* Mismatch.  */\n \t      continue;\n@@ -707,7 +703,6 @@ vect_build_slp_tree_1 (vec_info *vinfo,\n \t\t\t\t       \"Build SLP failed: different calls in \");\n \t\t      dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n \t\t\t\t\tstmt, 0);\n-                      dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t    }\n \t\t  /* Mismatch.  */\n \t\t  continue;\n@@ -741,7 +736,6 @@ vect_build_slp_tree_1 (vec_info *vinfo,\n \t\t\t\t\t   \"interleaving chains in one node \");\n                           dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n \t\t\t\t\t    stmt, 0);\n-                          dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n                         }\n \t\t      /* Mismatch.  */\n \t\t      continue;\n@@ -761,7 +755,6 @@ vect_build_slp_tree_1 (vec_info *vinfo,\n \t\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location, \n \t\t\t\t   \"Build SLP failed: not grouped load \");\n \t\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-                  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t}\n \n \t      /* FORNOW: Not grouped loads are not supported.  */\n@@ -783,7 +776,6 @@ vect_build_slp_tree_1 (vec_info *vinfo,\n \t\t\t\t   \"Build SLP failed: operation\");\n \t\t  dump_printf (MSG_MISSED_OPTIMIZATION, \" unsupported \");\n \t\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n-                  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t}\n \t      /* Fatal mismatch.  */\n \t      matches[0] = false;\n@@ -805,7 +797,6 @@ vect_build_slp_tree_1 (vec_info *vinfo,\n \t\t\t\t       \" operation\");\n                       dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n \t\t\t\t\tstmt, 0);\n-                      dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n                     }\n \t\t  /* Mismatch.  */\n \t\t  continue;\n@@ -1876,7 +1867,6 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t\t\t\t   \"permutation \");\n \t\t      dump_gimple_stmt (MSG_MISSED_OPTIMIZATION,\n \t\t\t\t\tTDF_SLIM, stmt, 0);\n-                  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n                 }\n               vect_free_slp_instance (new_instance);\n               return false;\n@@ -3446,7 +3436,6 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n \t\t\t\t   \"least three vectors \");\n \t\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n \t\t\t\t    stmt, 0);\n-\t\t  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t\t}\n \t      return false;\n \t    }\n@@ -3567,7 +3556,6 @@ vect_schedule_slp_instance (slp_tree node, slp_instance instance,\n       dump_printf_loc (MSG_NOTE,vect_location,\n \t\t       \"------>vectorizing SLP node starting from: \");\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n-      dump_printf (MSG_NOTE, \"\\n\");\n     }\n \n   /* Vectorized stmts go before the last scalar stmt which is where"}]}