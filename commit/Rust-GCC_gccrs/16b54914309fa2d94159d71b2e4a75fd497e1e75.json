{"sha": "16b54914309fa2d94159d71b2e4a75fd497e1e75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZiNTQ5MTQzMDlmYTJkOTQxNTlkNzFiMmU0YTc1ZmQ0OTdlMWU3NQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2019-12-18T07:15:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-18T07:15:22Z"}, "message": "[Ada] Fix three-letter typos like \"sss\" in comments and docs\n\n2019-12-18  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst,\n\tdoc/gnat_rm/obsolescent_features.rst,\n\tdoc/gnat_ugn/gnat_and_program_execution.rst, exp_attr.adb,\n\texp_ch9.adb, init.c, libgnat/s-valrea.adb, par-ch6.adb,\n\tsem_attr.adb, sem_ch4.adb, sem_util.ads: Fix trivial typos.\n\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n\nFrom-SVN: r279514", "tree": {"sha": "541b1c56376e314d239a65f9060b7808d8bdd2f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/541b1c56376e314d239a65f9060b7808d8bdd2f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16b54914309fa2d94159d71b2e4a75fd497e1e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b54914309fa2d94159d71b2e4a75fd497e1e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16b54914309fa2d94159d71b2e4a75fd497e1e75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b54914309fa2d94159d71b2e4a75fd497e1e75/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a760d142461694eca613c9d9a19333416566241e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a760d142461694eca613c9d9a19333416566241e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a760d142461694eca613c9d9a19333416566241e"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "90d25c022c9b6b364c0d254b96c428f0ba2aa4ff", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -1,3 +1,12 @@\n+2019-12-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst,\n+\tdoc/gnat_rm/obsolescent_features.rst,\n+\tdoc/gnat_ugn/gnat_and_program_execution.rst, exp_attr.adb,\n+\texp_ch9.adb, init.c, libgnat/s-valrea.adb, par-ch6.adb,\n+\tsem_attr.adb, sem_ch4.adb, sem_util.ads: Fix trivial typos.\n+\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\n 2019-12-18  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_res.adb (Resolve_Type_Conversion): Add handling for access"}, {"sha": "c3d6f90714c3591a19b9e41f5871c3aafb013d3f", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -1344,7 +1344,7 @@ are equivalent to\n The precondition ensures that one and only one of the case guards is\n satisfied on entry to the subprogram.\n The postcondition ensures that for the case guard that was True on entry,\n-the corrresponding consequence is True on exit. Other consequence expressions\n+the corresponding consequence is True on exit. Other consequence expressions\n are not evaluated.\n \n A precondition ``P`` and postcondition ``Q`` can also be"}, {"sha": "3ba502188e034fd370895b561634dbf6c0149a50", "filename": "gcc/ada/doc/gnat_rm/obsolescent_features.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fobsolescent_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fobsolescent_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fobsolescent_features.rst?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -49,7 +49,7 @@ pragma Task_Info\n The functionality provided by pragma ``Task_Info`` is now part of the\n Ada language. The ``CPU`` aspect and the package\n ``System.Multiprocessors`` offer a less system-dependent way to specify\n-task affinity or to query the number of processsors.\n+task affinity or to query the number of processors.\n \n Syntax\n "}, {"sha": "ba2c9b6d201967627f044560036cad4c0bd8bca4", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -2964,7 +2964,7 @@ integer arithmetic package. The compiler will make calls\n to this package, though only in cases where it cannot be\n sure that ``Long_Long_Integer`` is sufficient to guard against\n intermediate overflows. This package does not use dynamic\n-alllocation, but it does use the secondary stack, so an\n+allocation, but it does use the secondary stack, so an\n appropriate secondary stack package must be present (this\n is always true for standard full Ada, but may require\n specific steps for restricted run times such as ZFP)."}, {"sha": "4057a36dc11c87ed767edcb404d1f14e6d6d7f4a", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -5246,7 +5246,7 @@ package body Exp_Attr is\n                                 Rep_To_Pos_Flag (Ptyp, Loc))))));\n \n             else\n-               --  Add Boolean parameter True, to request program errror if\n+               --  Add Boolean parameter True, to request program error if\n                --  we have a bad representation on our hands. If checks are\n                --  suppressed, then add False instead\n \n@@ -6216,7 +6216,7 @@ package body Exp_Attr is\n                                     Make_Integer_Literal (Loc, 1))),\n                                 Rep_To_Pos_Flag (Ptyp, Loc))))));\n             else\n-               --  Add Boolean parameter True, to request program errror if\n+               --  Add Boolean parameter True, to request program error if\n                --  we have a bad representation on our hands. Add False if\n                --  checks are suppressed.\n "}, {"sha": "64ac3533caf20a1cfe386cd0baad0e22e930f7bb", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -363,7 +363,7 @@ package body Exp_Ch9 is\n    --  a null trailing statement with the given Loc (which is the sloc of\n    --  the accept, delay, or entry call statement). There might not be any\n    --  generated code for the accept, delay, or entry call itself (the effect\n-   --  of these statements is part of the general processsing done for the\n+   --  of these statements is part of the general processing done for the\n    --  enclosing selective accept, timed entry call, or asynchronous select),\n    --  and the null statement is there to carry the sloc of that statement to\n    --  the back-end for trace-based coverage analysis purposes."}, {"sha": "5261d38bb220bf526f442d5a6c50bfeefc51ef0e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -2751,7 +2751,7 @@ pragma Postcondition (if C2 then Pred2);\n The precondition ensures that one and only one of the case guards is\n satisfied on entry to the subprogram.\n The postcondition ensures that for the case guard that was True on entry,\n-the corrresponding consequence is True on exit. Other consequence expressions\n+the corresponding consequence is True on exit. Other consequence expressions\n are not evaluated.\n \n A precondition @code{P} and postcondition @code{Q} can also be\n@@ -28804,7 +28804,7 @@ this kind of implementation dependent addition.\n The functionality provided by pragma @code{Task_Info} is now part of the\n Ada language. The @code{CPU} aspect and the package\n @code{System.Multiprocessors} offer a less system-dependent way to specify\n-task affinity or to query the number of processsors.\n+task affinity or to query the number of processors.\n \n Syntax\n "}, {"sha": "66bea96d13af68dd646be8de091465a001aea4e3", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -22795,7 +22795,7 @@ integer arithmetic package. The compiler will make calls\n to this package, though only in cases where it cannot be\n sure that @code{Long_Long_Integer} is sufficient to guard against\n intermediate overflows. This package does not use dynamic\n-alllocation, but it does use the secondary stack, so an\n+allocation, but it does use the secondary stack, so an\n appropriate secondary stack package must be present (this\n is always true for standard full Ada, but may require\n specific steps for restricted run times such as ZFP)."}, {"sha": "67ea4dc25798bdeeefe961ec6a5306eb063ea28e", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -1564,7 +1564,7 @@ int __gl_heap_size = 64;\n    operation, drivide by zero, and overflow. This will prevent the VMS runtime\n    (specifically OTS$CHECK_FP_MODE) from complaining about inconsistent\n    floating point settings in a mixed language program. Ideally the setting\n-   would be determined at link time based on setttings in the object files,\n+   would be determined at link time based on settings in the object files,\n    however the VMS linker seems to take the setting from the first object\n    in the link, e.g. pcrt0.o which is float representation neutral.  */\n char __gl_float_format = 'I';"}, {"sha": "424ccd05f4e7ebe52571ea5a67d5cb42aef58027", "filename": "gcc/ada/libgnat/s-valrea.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valrea.adb?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -204,7 +204,7 @@ package body System.Val_Real is\n \n          if Digit < 0 then\n             if Digit = Underscore and Index + 1 <= Max then\n-               --  Underscore is only alllowed if followed by a digit\n+               --  Underscore is only allowed if followed by a digit\n                Digit := As_Digit (Str (Index + 1));\n                if Digit in Valid_Digit then\n                   Index := Index + 1;"}, {"sha": "8445a4ec412b156d6b89fd3ba9b2f4ff27c8b293", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -999,7 +999,7 @@ package body Ch6 is\n \n          if Pf_Flags.Pbod\n \n-           --  Disconnnect this processing if we have scanned a null procedure\n+           --  Disconnect this processing if we have scanned a null procedure\n            --  because in this case the spec is complete anyway with no body.\n \n            and then (Nkind (Specification_Node) /= N_Procedure_Specification"}, {"sha": "190d281e4558f7b5bced31b42a7063161b3cbe43", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -10503,7 +10503,7 @@ package body Sem_Attr is\n                   --  to a missed warning (the Valid check does not really\n                   --  modify!) If this case, Note will be reset to False.\n \n-                  --  Skip it as well if the type is an Acccess_To_Constant,\n+                  --  Skip it as well if the type is an Access_To_Constant,\n                   --  given that no use of the value can modify the prefix.\n \n                begin"}, {"sha": "591011252aabeb6b5719ca6e33b75708f723d0ab", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -676,7 +676,7 @@ package body Sem_Ch4 is\n \n                --  In GNATprove mode we need to preserve the link between\n                --  the original subtype indication and the anonymous subtype,\n-               --  to extend proofs to constrained acccess types. We only do\n+               --  to extend proofs to constrained access types. We only do\n                --  that outside of spec expressions, otherwise the declaration\n                --  cannot be inserted and analyzed. In such a case, GNATprove\n                --  later rejects the allocator as it is not used here in"}, {"sha": "c148a50d72b61cddccd68e337bb6bca8d24ce2c1", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b54914309fa2d94159d71b2e4a75fd497e1e75/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=16b54914309fa2d94159d71b2e4a75fd497e1e75", "patch": "@@ -547,7 +547,7 @@ package Sem_Util is\n    function Deepest_Type_Access_Level (Typ : Entity_Id) return Uint;\n    --  Same as Type_Access_Level, except that if the type is the type of an Ada\n    --  2012 stand-alone object of an anonymous access type, then return the\n-   --  static accesssibility level of the object. In that case, the dynamic\n+   --  static accessibility level of the object. In that case, the dynamic\n    --  accessibility level of the object may take on values in a range. The low\n    --  bound of that range is returned by Type_Access_Level; this function\n    --  yields the high bound of that range. Also differs from Type_Access_Level"}]}