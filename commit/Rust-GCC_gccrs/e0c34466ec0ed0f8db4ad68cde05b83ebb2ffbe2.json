{"sha": "e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBjMzQ0NjZlYzBlZDBmOGRiNGFkNjhjZGUwNWI4M2ViYjJmZmJlMg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2002-11-17T15:47:27Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-11-17T15:47:27Z"}, "message": "* java/net/HttpURLConnection.java: Merge with GNU Classpath.\n\nFrom-SVN: r59195", "tree": {"sha": "7b2e74a1a7b4b72554482be317b7dad299975bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b2e74a1a7b4b72554482be317b7dad299975bd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2/comments", "author": null, "committer": null, "parents": [{"sha": "5ab2f7b747a94911c4cd0cc019f7f799270017a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab2f7b747a94911c4cd0cc019f7f799270017a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab2f7b747a94911c4cd0cc019f7f799270017a4"}], "stats": {"total": 380, "additions": 327, "deletions": 53}, "files": [{"sha": "a5b63e5d463249e767149f4949437f7c0735a859", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2", "patch": "@@ -1,3 +1,7 @@\n+2002-11-17  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/net/HttpURLConnection.java: Merge with GNU Classpath.\n+\n 2002-11-16  Mark Wielaard  <mark@klomp.org>\n \n \tIntegrate work by Raif S. Naffah (raif@fl.net.au)"}, {"sha": "85a3ea44ecb4e1744ff1d03051c27cafb27dae71", "filename": "libjava/java/net/HttpURLConnection.java", "status": "modified", "additions": 323, "deletions": 53, "changes": 376, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FHttpURLConnection.java?ref=e0c34466ec0ed0f8db4ad68cde05b83ebb2ffbe2", "patch": "@@ -1,99 +1,351 @@\n // HttpURLConnection.java - Subclass of communications links using\n //\t\t\tHypertext Transfer Protocol.\n \n-/* Copyright (C) 1999, 2000  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+/* Copyright (C) 1998, 1999, 2000, 2002 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA. \n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n package java.net;\n \n import java.io.*;\n import java.security.Permission;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @since 1.1\n- * @date March 29, 1999.\n- */\n-\n-/**\n+/*\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+ * This class provides a common abstract implementation for those \n+ * URL connection classes that will connect using the HTTP protocol.\n+ * In addition to the functionality provided by the URLConnection\n+ * class, it defines constants for HTTP return code values and\n+ * methods for setting the HTTP request method and determining whether\n+ * or not to follow redirects. \n+ *\n+ * @since 1.1\n+ *\n+ * @author Warren Levy (warrenl@cygnus.com)\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n public abstract class HttpURLConnection extends URLConnection\n {\n   /* HTTP Success Response Codes */\n+\n+  /**\n+   * Indicates that the client may continue with its request.  This value\n+   * is specified as part of RFC 2068 but was not included in Sun's JDK, so\n+   * beware of using this value\n+   */\n+  static final int HTTP_CONTINUE = 100;\n+  \n+  /**\n+   * Indicates the request succeeded.\n+   */\n   public static final int HTTP_OK\t\t= 200;\n+\n+  /**\n+   * The requested resource has been created.\n+   */\n   public static final int HTTP_CREATED\t\t= 201;\n+\n+  /**\n+   * The request has been accepted for processing but has not completed.\n+   * There is no guarantee that the requested action will actually ever\n+   * be completed succesfully, but everything is ok so far.\n+   */\n   public static final int HTTP_ACCEPTED \t= 202;\n+\n+  /**\n+   * The meta-information returned in the header is not the actual data\n+   * from the original server, but may be from a local or other copy. \n+   * Normally this still indicates a successful completion.\n+   */\n   public static final int HTTP_NOT_AUTHORITATIVE = 203;\n+\n+  /**\n+   * The server performed the request, but there is no data to send\n+   * back.  This indicates that the user's display should not be changed.\n+   */\n   public static final int HTTP_NO_CONTENT\t= 204;\n+\n+  /**\n+   * The server performed the request, but there is no data to sent back,\n+   * however, the user's display should be \"reset\" to clear out any form\n+   * fields entered.\n+   */\n   public static final int HTTP_RESET\t\t= 205;\n+\n+  /**\n+   * The server completed the partial GET request for the resource.\n+   */\n   public static final int HTTP_PARTIAL\t\t= 206;\n \n+\n   /* HTTP Redirection Response Codes */\n-  public static final int HTTP_MULT_CHOICE\t= 300;\n-  public static final int HTTP_MOVED_PERM\t= 301;\n-  public static final int HTTP_MOVED_TEMP\t= 302;\n-  public static final int HTTP_SEE_OTHER\t= 303;\n-  public static final int HTTP_NOT_MODIFIED\t= 304;\n-  public static final int HTTP_USE_PROXY\t= 305;\n \n+  /**\n+   * There is a list of choices available for the requested resource.\n+   */\n+  public static final int HTTP_MULT_CHOICE = 300;\n+  \n+  /**\n+   * The resource has been permanently moved to a new location.\n+   */\n+  public static final int HTTP_MOVED_PERM = 301;\n+  \n+  /**\n+   * The resource requested has been temporarily moved to a new location.\n+   */\n+  public static final int HTTP_MOVED_TEMP = 302;\n+  \n+  /**\n+   * The response to the request issued is available at another location.\n+   */\n+  public static final int HTTP_SEE_OTHER = 303;\n+  \n+  /**\n+   * The document has not been modified since the criteria specified in\n+   * a conditional GET.\n+   */\n+  public static final int HTTP_NOT_MODIFIED = 304;\n+  \n+  \n   /* HTTP Client Error Response Codes */\n-  public static final int HTTP_BAD_REQUEST\t= 400;\n-  public static final int HTTP_UNAUTHORIZED\t= 401;\n-  public static final int HTTP_PAYMENT_REQUIRED\t= 402;\n-  public static final int HTTP_FORBIDDEN\t= 403;\n-  public static final int HTTP_NOT_FOUND\t= 404;\n-  public static final int HTTP_BAD_METHOD\t= 405;\n-  public static final int HTTP_NOT_ACCEPTABLE\t= 406;\n-  public static final int HTTP_PROXY_AUTH\t= 407;\n-  public static final int HTTP_CLIENT_TIMEOUT\t= 408;\n-  public static final int HTTP_CONFLICT\t\t= 409;\n-  public static final int HTTP_GONE\t\t= 410;\n-  public static final int HTTP_LENGTH_REQUIRED\t= 411;\n-  public static final int HTTP_PRECON_FAILED\t= 412;\n-  public static final int HTTP_ENTITY_TOO_LARGE\t= 413;\n-  public static final int HTTP_REQ_TOO_LONG\t= 414;\n-  public static final int HTTP_UNSUPPORTED_TYPE\t= 415;\n+\n+  /**\n+   * The request was misformed or could not be understood.\n+   */\n+  public static final int HTTP_BAD_REQUEST = 400;\n+  \n+  /**\n+   * The request made requires user authorization.  Try again with\n+   * a correct authentication header.\n+   */\n+  public static final int HTTP_UNAUTHORIZED = 401;\n+  \n+  /**\n+   * Code reserved for future use - I hope way in the future.\n+   */\n+  public static final int HTTP_PAYMENT_REQUIRED = 402;\n+  \n+  /**\n+   * There is no permission to access the requested resource.\n+   */\n+  public static final int HTTP_FORBIDDEN = 403;\n+  \n+  /**\n+   * The requested resource was not found.\n+   */\n+  public static final int HTTP_NOT_FOUND = 404;\n+  \n+  /**\n+   * The specified request method is not allowed for this resource.\n+   */\n+  public static final int HTTP_BAD_METHOD = 405;\n+  \n+  /**\n+   * Based on the input headers sent, the resource returned in response\n+   * to the request would not be acceptable to the client.\n+   */\n+  public static final int HTTP_NOT_ACCEPTABLE = 406;\n+  \n+  /**\n+   * The client must authenticate with a proxy prior to attempting this\n+   * request.\n+   */\n+  public static final int HTTP_PROXY_AUTH = 407;\n+  \n+  /**\n+   * The request timed out.\n+   */\n+  public static final int HTTP_CLIENT_TIMEOUT = 408;\n+  \n+  /**\n+   * There is a conflict between the current state of the resource and the\n+   * requested action.\n+   */\n+  public static final int HTTP_CONFLICT = 409;\n+  \n+  /**\n+   * The requested resource is no longer available.  This ususally indicates\n+   * a permanent condition.\n+   */\n+  public static final int HTTP_GONE = 410;\n+\n+  /**\n+   * A Content-Length header is required for this request, but was not\n+   * supplied.\n+   */\n+  public static final int HTTP_LENGTH_REQUIRED = 411;\n+  \n+  /**\n+   * A client specified pre-condition was not met on the server.\n+   */\n+  public static final int HTTP_PRECON_FAILED = 412;\n+  \n+  /**\n+   * The request sent was too large for the server to handle.\n+   */\n+  public static final int HTTP_ENTITY_TOO_LARGE = 413;\n+  \n+  /**\n+   * The name of the resource specified was too long.\n+   */\n+  public static final int HTTP_REQ_TOO_LONG = 414;\n+  \n+  /**\n+   * The request is in a format not supported by the requested resource.\n+   */\n+  public static final int HTTP_UNSUPPORTED_TYPE = 415;\n+\n \n   /* HTTP Server Error Response Codes */\n-  public static final int HTTP_SERVER_ERROR\t= 500;\n-  public static final int HTTP_INTERNAL_ERROR\t= 500;\n-  public static final int HTTP_NOT_IMPLEMENTED\t= 501;\n-  public static final int HTTP_BAD_GATEWAY\t= 502;\n-  public static final int HTTP_UNAVAILABLE\t= 503;\n-  public static final int HTTP_GATEWAY_TIMEOUT\t= 504;\n-  public static final int HTTP_VERSION\t\t= 505;\n \n-  static boolean followRedirects = true;\n+  /**\n+   * This error code indicates that some sort of server error occurred.\n+   */\n+  public static final int HTTP_SERVER_ERROR    = 500;\n+\n+  /**\n+   * The server encountered an unexpected error (such as a CGI script crash)\n+   * that prevents the request from being fulfilled.\n+   */\n+  public static final int HTTP_INTERNAL_ERROR   = 500;\n+\n+  /**\n+   * The server does not support the requested functionality.  \n+   * @since 1.3\n+   */\n+  static final int HTTP_NOT_IMPLEMENTED = 501;\n+\n+  /**\n+   * The proxy encountered a bad response from the server it was proxy-ing for\n+   */\n+  public static final int HTTP_BAD_GATEWAY = 502;\n+\n+  /**\n+   * The HTTP service is not availalble, such as because it is overloaded\n+   * and does not want additional requests.\n+   */\n+  public static final int HTTP_UNAVAILABLE = 503;\n+\n+  /**\n+   * The proxy timed out getting a reply from the remote server it was\n+   * proxy-ing for.\n+   */\n+  public static final int HTTP_GATEWAY_TIMEOUT = 504;\n+\n+  /**\n+   * This server does not support the protocol version requested.\n+   */\n+  public static final int HTTP_VERSION = 505;\n+\n+  // Non-HTTP response static variables\n+\n+  /**\n+   * Flag to indicate whether or not redirects should be automatically\n+   * followed by default.\n+   */\n+  private static boolean followRedirects = true;\n+\n+  /**\n+   * This is a list of valid request methods, separated by \"|\" characters.\n+   */\n+  private static String valid_methods\n+      = \"|GET|POST|HEAD|OPTIONS|PUT|DELETE|TRACE|\";\n+\n+  // Instance Variables\n \n+  /**\n+   * The requested method in use for this connection. Default is GET.\n+   */\n   protected String method = \"GET\";\n+\n+  /**\n+   * The response code received from the server\n+   */\n   protected int responseCode = -1;\n-  protected String responseMessage;\n+\n+  /**\n+   * The response message string received from the server.\n+   */\n+  protected String responseMessage = null;\n+\n+  /**\n+   * If this instance should follow redirect requests.\n+   */\n   protected boolean instanceFollowRedirects = followRedirects;\n \n+  /**\n+   * Whether we alreadt got a valid response code for this connection.\n+   * Used by <code>getResponceCode()</code> and\n+   * <code>getResponseMessage()</code>.\n+   */\n   private boolean gotResponseVals = false;\n \n+  /**\n+   * Create an HttpURLConnection for the specified URL\n+   *\n+   * @param url The URL to create this connection for.\n+   */\n   protected HttpURLConnection(URL url)\n   {\n     super(url);\n   }\n-\n+  \n+  /**   \n+   * Closes the connection to the server.\n+   */\n   public abstract void disconnect();\n \n+  /** \n+   * Returns a boolean indicating whether or not this connection is going\n+   * through a proxy\n+   * \n+   * @return true if through a proxy, false otherwise\n+   */\n   public abstract boolean usingProxy();\n \n   /**\n    * Sets whether HTTP redirects (requests with response code 3xx) should be\n    * automatically followed by this class. True by default\n    *\n+   * @param set true if redirects should be followed, false otherwis.\n+   *\n    * @exception SecurityException If a security manager exists and its\n    * checkSetFactory method doesn't allow the operation\n    */\n@@ -108,6 +360,12 @@ public static void setFollowRedirects(boolean set)\n     followRedirects = set;\n   }\n \n+  /**\n+   * Returns a boolean indicating whether or not HTTP redirects will \n+   * automatically be followed or not.\n+   *\n+   * @return true if redirects will be followed, false otherwise\n+   */\n   public static boolean getFollowRedirects()\n   {\n     return followRedirects;\n@@ -142,22 +400,31 @@ public void setRequestMethod(String method) throws ProtocolException\n     if (connected)\n       throw new ProtocolException(\"Already connected\");\n \n-    if (method.equals(\"GET\") || method.equals(\"POST\") ||\n-\tmethod.equals(\"HEAD\") || method.equals(\"OPTIONS\") ||\n-\tmethod.equals(\"PUT\") || method.equals(\"DELETE\") ||\n-\tmethod.equals(\"TRACE\"))\n+    method = method.toUpperCase();\n+    if (valid_methods.indexOf(\"|\" + method + \"|\") != -1)\n       this.method = method;\n     else\n-      throw new ProtocolException(\"Invalid HTTP request method\");\n+      throw new ProtocolException(\"Invalid HTTP request method: \" + method);\n+\n   }\n \n+  /**\n+   * The request method currently in use for this connection.\n+   *\n+   * @return The request method\n+   */\n   public String getRequestMethod()\n   {\n     return method;\n   }\n \n   /**\n-   * Gets the status code from an HTTP response message\n+   * Gets the status code from an HTTP response message, or -1 if\n+   * the response code could not be determined.\n+   * Note that all valid response codes have class variables\n+   * defined for them in this class.\n+   *\n+   * @return The response code\n    *\n    * @exception IOException If an error occurs\n    */\n@@ -170,7 +437,10 @@ public int getResponseCode() throws IOException\n \n   /**\n    * Gets the HTTP response message, if any, returned along with the\n-   * response code from a server\n+   * response code from a server. Null if no response message was set\n+   * or an error occured while connecting.\n+   *\n+   * @return The response message\n    *\n    * @exception IOException If an error occurs\n    */"}]}