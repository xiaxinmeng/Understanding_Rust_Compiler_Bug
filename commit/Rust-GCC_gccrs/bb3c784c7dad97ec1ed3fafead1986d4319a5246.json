{"sha": "bb3c784c7dad97ec1ed3fafead1986d4319a5246", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIzYzc4NGM3ZGFkOTdlYzFlZDNmYWZlYWQxOTg2ZDQzMTlhNTI0Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T14:14:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T14:14:36Z"}, "message": "[multiple changes]\n\n2011-08-05  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, gnatcmd.adb, switch-c.adb, exp_attr.adb, make.adb,\n\tbindgen.adb, einfo.adb, sem_ch12.adb, sem_attr.adb, a-fihema.adb,\n\ta-fihema.ads, sem_elab.adb, sem_elab.ads, aspects.adb, opt.ads,\n\tprj-conf.adb, sem_ch13.adb, s-ficobl.ads: Minor reformatting\n\n2011-08-05  Bob Duff  <duff@adacore.com>\n\n\t* a-stunau.ads, g-spipat.adb: Update comments.\n\nFrom-SVN: r177441", "tree": {"sha": "e5940f065500a45141f98f894bec0fdcea88fd6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5940f065500a45141f98f894bec0fdcea88fd6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb3c784c7dad97ec1ed3fafead1986d4319a5246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb3c784c7dad97ec1ed3fafead1986d4319a5246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb3c784c7dad97ec1ed3fafead1986d4319a5246", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb3c784c7dad97ec1ed3fafead1986d4319a5246/comments", "author": null, "committer": null, "parents": [{"sha": "36f686f99b109da4248647b441cbf0f0e67b75df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f686f99b109da4248647b441cbf0f0e67b75df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f686f99b109da4248647b441cbf0f0e67b75df"}], "stats": {"total": 185, "additions": 103, "deletions": 82}, "files": [{"sha": "69805dc4f2832031fef7d0218436c9823d297600", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -1,3 +1,14 @@\n+2011-08-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, gnatcmd.adb, switch-c.adb, exp_attr.adb, make.adb,\n+\tbindgen.adb, einfo.adb, sem_ch12.adb, sem_attr.adb, a-fihema.adb,\n+\ta-fihema.ads, sem_elab.adb, sem_elab.ads, aspects.adb, opt.ads,\n+\tprj-conf.adb, sem_ch13.adb, s-ficobl.ads: Minor reformatting\n+\n+2011-08-05  Bob Duff  <duff@adacore.com>\n+\n+\t* a-stunau.ads, g-spipat.adb: Update comments.\n+\n 2011-08-05  Bob Duff  <duff@adacore.com>\n \n \t* a-fihema.ads: Minor comment fix."}, {"sha": "dca5b1e369e50b81bffb83228b114da98ec34887", "filename": "gcc/ada/a-fihema.adb", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fa-fihema.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fa-fihema.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-fihema.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -41,7 +41,7 @@ with System.Storage_Pools;    use System.Storage_Pools;\n \n package body Ada.Finalization.Heap_Management is\n \n-   Header_Size   : constant Storage_Count  := Node'Size / Storage_Unit;\n+   Header_Size : constant Storage_Count  := Node'Size / Storage_Unit;\n    --  Size of the header in bytes. Added to Storage_Size requested by\n    --  Allocate/Deallocate to determine the Storage_Size passed to the\n    --  underlying pool.\n@@ -149,6 +149,7 @@ package body Ada.Finalization.Heap_Management is\n       N.Prev := L;\n \n       Unlock_Task.all;\n+\n       --  Note: no need to unlock in case of exceptions; the above code cannot\n       --  raise any.\n    end Attach;\n@@ -185,8 +186,7 @@ package body Ada.Finalization.Heap_Management is\n             N_Ptr  : Node_Ptr;\n \n          begin\n-            --  Move the address from the object to the beginning of the list\n-            --  header.\n+            --  Move address from the object to beginning of the list header\n \n             N_Addr := Addr - Header_Offset;\n \n@@ -221,8 +221,10 @@ package body Ada.Finalization.Heap_Management is\n    ------------\n \n    procedure Detach (N : Node_Ptr) is\n+\n+      --  N must be attached to some list\n+\n       pragma Assert (N.Next /= null and then N.Prev /= null);\n-      --  It must be attached to some list\n \n       procedure Null_Out_Pointers;\n       --  Set Next/Prev pointer of N to null (for debugging)\n@@ -237,6 +239,8 @@ package body Ada.Finalization.Heap_Management is\n          N.Prev := null;\n       end Null_Out_Pointers;\n \n+   --  Start of processing for Detach\n+\n    begin\n       Lock_Task.all;\n \n@@ -247,9 +251,10 @@ package body Ada.Finalization.Heap_Management is\n       --  Note: no need to unlock in case of exceptions; the above code cannot\n       --  raise any.\n \n-      pragma Debug (Null_Out_Pointers);\n       --  No need to null out the pointers, except that it makes pcol easier to\n       --  understand.\n+\n+      pragma Debug (Null_Out_Pointers);\n    end Detach;\n \n    --------------\n@@ -278,13 +283,14 @@ package body Ada.Finalization.Heap_Management is\n       --  to go away.\n \n       while Curr_Ptr /= Collection.Objects'Unchecked_Access loop\n+\n          --  ??? Kludge: Don't do anything until the proper place to set\n          --  primitive Finalize_Address has been determined.\n \n          if Collection.Finalize_Address /= null then\n             declare\n                Object_Address : constant Address :=\n-                 Curr_Ptr.all'Address + Header_Offset;\n+                                  Curr_Ptr.all'Address + Header_Offset;\n                --  Get address of object from address of header\n \n             begin\n@@ -330,8 +336,8 @@ package body Ada.Finalization.Heap_Management is\n \n    procedure pcol (Collection : Finalization_Collection) is\n       Head      : constant Node_Ptr := Collection.Objects'Unrestricted_Access;\n-      --  \"Unrestricted\", because we're evilly getting access-to-variable of a\n-      --  constant!  OK for debugging code.\n+      --  \"Unrestricted\", because we are getting access-to-variable of a\n+      --  constant!  Normally worrisome, this is OK for debugging code.\n \n       Head_Seen : Boolean := False;\n       N_Ptr     : Node_Ptr;\n@@ -348,13 +354,15 @@ package body Ada.Finalization.Heap_Management is\n       Put_Line (Address_Image (Collection'Address));\n \n       Put (\"Base_Pool : \");\n+\n       if Collection.Base_Pool = null then\n          Put_Line (\" null\");\n       else\n          Put_Line (Address_Image (Collection.Base_Pool'Address));\n       end if;\n \n       Put (\"Fin_Addr  : \");\n+\n       if Collection.Finalize_Address = null then\n          Put_Line (\"null\");\n       else\n@@ -384,7 +392,6 @@ package body Ada.Finalization.Heap_Management is\n       --  (dummy head) - present if dummy head\n \n       N_Ptr := Head;\n-\n       while N_Ptr /= null loop -- Should never be null; we being defensive\n          Put_Line (\"V\");\n \n@@ -428,13 +435,15 @@ package body Ada.Finalization.Heap_Management is\n          end if;\n \n          Put (\"|  Prev: \");\n+\n          if N_Ptr.Prev = null then\n             Put_Line (\"null\");\n          else\n             Put_Line (Address_Image (N_Ptr.Prev.all'Address));\n          end if;\n \n          Put (\"|  Next: \");\n+\n          if N_Ptr.Next = null then\n             Put_Line (\"null\");\n          else"}, {"sha": "e3f412f91e4b3b1d50aeef1d02c7f0e95d4b74ae", "filename": "gcc/ada/a-fihema.ads", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fa-fihema.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fa-fihema.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-fihema.ads?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -92,8 +92,7 @@ package Ada.Finalization.Heap_Management is\n \n    overriding procedure Finalize\n      (Collection : in out Finalization_Collection);\n-   --  Traverse the objects of Collection, invoking Finalize_Address on each of\n-   --  them.\n+   --  Traverse objects of Collection, invoking Finalize_Address on each one\n \n    overriding procedure Initialize\n      (Collection : in out Finalization_Collection);\n@@ -116,13 +115,13 @@ private\n    type Node_Ptr is access all Node;\n    pragma No_Strict_Aliasing (Node_Ptr);\n \n-   type Node is record\n-      --  This should really be limited, but we can see the full view of\n-      --  Limited_Controlled, which is NOT limited. Note that default\n-      --  initialization does not happen for this type (these pointers will not\n-      --  be automatically set to null), because of the games we're playing\n-      --  with address arithmetic.\n+   --  The following record type should really be limited, but we can see the\n+   --  full view of Limited_Controlled, which is NOT limited. Note that default\n+   --  initialization does not happen for this type (the pointers will not be\n+   --  automatically set to null), because of the games we're playing with\n+   --  address arithmetic.\n \n+   type Node is record\n       Prev : Node_Ptr;\n       Next : Node_Ptr;\n    end record;"}, {"sha": "06cffc589a6e3304be2ce9149720e731db85da0b", "filename": "gcc/ada/a-stunau.ads", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fa-stunau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fa-stunau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stunau.ads?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -68,12 +68,6 @@ package Ada.Strings.Unbounded.Aux is\n    --  referenced string returned by this call is always one, so the actual\n    --  string data is always accessible as S (1 .. L).\n \n-   procedure Set_String (UP : out Unbounded_String; S : String)\n-     renames Set_Unbounded_String;\n-   --  This function is simply a renaming of the new Ada 2005 function as shown\n-   --  above. It is provided for historical reasons, but should be removed at\n-   --  this stage???\n-\n    procedure Set_String (UP : in out Unbounded_String; S : String_Access);\n    pragma Inline (Set_String);\n    --  This version of Set_Unbounded_String takes a string access value, rather"}, {"sha": "74d17c7cea772c55f233a362ff08dd377c373639", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -42,12 +42,11 @@ package body Aspects is\n    --  Same as Set_Aspect_Specifications, but does not contain the assertion\n    --  that checks that N does not already have aspect specifications. This\n    --  subprogram is supposed to be used as a part of Tree_Read. When reading\n-   --  the tree we first read nodes with their basic properties (as\n-   --  Atree.Tree_Read), this includes reading the Has_Aspects flag for each\n-   --  node, then we reed all the list tables and only after that we call\n-   --  Tree_Read for Aspects. That is, when reading the tree, the list of\n-   --  aspects is attached to the node that already has Has_Aspects flag set\n-   --  ON\n+   --  tree, first read nodes with their basic properties (as Atree.Tree_Read),\n+   --  this includes reading the Has_Aspects flag for each node, then we reed\n+   --  all the list tables and only after that we call Tree_Read for Aspects.\n+   --  That is, when reading the tree, the list of aspects is attached to the\n+   --  node that already has Has_Aspects flag set ON.\n \n    ------------------------------------------\n    -- Hash Table for Aspect Specifications --"}, {"sha": "78c077cc11f5e4a7a223f6c0252c079b0138fc62", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -929,6 +929,7 @@ package body Bindgen is\n \n    procedure Gen_CodePeer_Wrapper is\n       Callee_Name : constant String := \"Ada_Main_Program\";\n+\n    begin\n       if ALIs.Table (ALIs.First).Main_Program = Proc then\n          WBI (\"   procedure \" & CodePeer_Wrapper_Name & \" is \");\n@@ -1472,6 +1473,7 @@ package body Bindgen is\n    procedure Gen_Main is\n    begin\n       if not No_Main_Subprogram then\n+\n          --  To call the main program, we declare it using a pragma Import\n          --  Ada with the right link name.\n \n@@ -1488,7 +1490,6 @@ package body Bindgen is\n \n          if ALIs.Table (ALIs.First).Main_Program = Func then\n             WBI (\"   function Ada_Main_Program return Integer;\");\n-\n          else\n             WBI (\"   procedure Ada_Main_Program;\");\n          end if;\n@@ -1584,8 +1585,8 @@ package body Bindgen is\n          end if;\n \n          if Bind_Main_Program\n-           and then not Suppress_Standard_Library_On_Target\n-           and then not CodePeer_Mode\n+           and not Suppress_Standard_Library_On_Target\n+           and not CodePeer_Mode\n          then\n             WBI (\"      SEH : aliased array (1 .. 2) of Integer;\");\n             WBI (\"\");\n@@ -1603,9 +1604,8 @@ package body Bindgen is\n       --  this variable at any level of optimization.\n \n       if Bind_Main_Program and not CodePeer_Mode then\n-         WBI\n-           (\"      Ensure_Reference : aliased System.Address := \" &\n-            \"Ada_Main_Program_Name'Address;\");\n+         WBI (\"      Ensure_Reference : aliased System.Address := \" &\n+              \"Ada_Main_Program_Name'Address;\");\n          WBI (\"      pragma Volatile (Ensure_Reference);\");\n          WBI (\"\");\n       end if;"}, {"sha": "db0fcb1d8816f36d3b4a673a471d49e3cc73d740", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -519,10 +519,10 @@ package body Einfo is\n    --    Is_Safe_To_Reevaluate           Flag249\n    --    Has_Predicates                  Flag250\n \n+   --    (Has_Implicit_Dereference)      Flag251\n    --    Is_Processed_Transient          Flag252\n    --    Is_Postcondition_Proc           Flag253\n \n-   --    (Has_Implicit_Dereference)      Flag251\n    --    (unused)                        Flag254\n \n    -----------------------"}, {"sha": "c6d396ddccd1feb2a1d0d5c4a0c017b127fbe187", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -678,13 +678,13 @@ package body Exp_Attr is\n \n       case Id is\n \n-         --  Attributes related to Ada2012 iterators (Placeholder)\n+         --  Attributes related to Ada2012 iterators (placeholder ???)\n \n-         when Attribute_Constant_Indexing => null;\n-         when Attribute_Default_Iterator => null;\n+         when Attribute_Constant_Indexing    => null;\n+         when Attribute_Default_Iterator     => null;\n          when Attribute_Implicit_Dereference => null;\n-         when Attribute_Iterator_Element => null;\n-         when Attribute_Variable_Indexing => null;\n+         when Attribute_Iterator_Element     => null;\n+         when Attribute_Variable_Indexing    => null;\n \n       ------------\n       -- Access --"}, {"sha": "b1dacd98dc1f0b60b8ac44ecd0bd863bf919d110", "filename": "gcc/ada/g-spipat.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fg-spipat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fg-spipat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-spipat.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2010, AdaCore                     --\n+--                     Copyright (C) 1998-2011, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3851,7 +3851,8 @@ package body GNAT.Spitbol.Patterns is\n \n                   begin\n                      if Node_OnM.Pcode = PC_Assign_OnM then\n-                        Set_String (Node_OnM.VP.all, Subject (Start .. Stop));\n+                        Set_Unbounded_String\n+                          (Node_OnM.VP.all, Subject (Start .. Stop));\n \n                      elsif Node_OnM.Pcode = PC_Write_OnM then\n                         Put_Line (Node_OnM.FP.all, Subject (Start .. Stop));\n@@ -4062,7 +4063,7 @@ package body GNAT.Spitbol.Patterns is\n          --  Assign immediate. This node performs the actual assignment\n \n          when PC_Assign_Imm =>\n-            Set_String\n+            Set_Unbounded_String\n               (Node.VP.all,\n                Subject (Stack (Stack_Base - 1).Cursor + 1 .. Cursor));\n             Pop_Region;\n@@ -5228,7 +5229,8 @@ package body GNAT.Spitbol.Patterns is\n \n                   begin\n                      if Node_OnM.Pcode = PC_Assign_OnM then\n-                        Set_String (Node_OnM.VP.all, Subject (Start .. Stop));\n+                        Set_Unbounded_String\n+                          (Node_OnM.VP.all, Subject (Start .. Stop));\n                         Dout\n                           (Img (Stack (S).Node) &\n                            \"deferred assignment of \" &\n@@ -5477,7 +5479,7 @@ package body GNAT.Spitbol.Patterns is\n             Dout\n               (Img (Node) & \"executing immediate assignment of \" &\n                Image (Subject (Stack (Stack_Base - 1).Cursor + 1 .. Cursor)));\n-            Set_String\n+            Set_Unbounded_String\n               (Node.VP.all,\n                Subject (Stack (Stack_Base - 1).Cursor + 1 .. Cursor));\n             Pop_Region;"}, {"sha": "0fd1d9462b3d29ec8580123fe94ea719588a2dd3", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -872,8 +872,10 @@ procedure GNATCmd is\n                Close (File);\n             end if;\n \n+         --  Don't crash if it is not possible to delete or close the file,\n+         --  just ignore the situation.\n+\n          exception\n-            --  Don't crash if it is not possible to delete or close the file\n             when others =>\n                null;\n          end;"}, {"sha": "a383d7c0fa70f1f6f841e551dbea16d41aa2afb1", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -4352,7 +4352,7 @@ package body Make is\n             end if;\n          end if;\n \n-         --  Put the object directories in ADA_OBJECTS_PATH.\n+         --  Put the object directories in ADA_OBJECTS_PATH\n \n          Prj.Env.Set_Ada_Paths\n            (Main_Project,"}, {"sha": "d7cde5334262abe9975d64f10734127b70a49096", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -603,7 +603,7 @@ package Opt is\n    --  Also forces generation of tree file if -gnatt is also set.\n \n    Disable_ALI_File : Boolean := False;\n-   --  GNAT2WHY\n+   --  GNAT\n    --  Disable generation of ALI file\n \n    Force_Checking_Of_Elaboration_Flags : Boolean := False;"}, {"sha": "db8312a196d57aea78f3489f536251388835ad63", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -911,7 +911,7 @@ package body Prj.Conf is\n \n          if Subdirs /= null then\n             Add_Char_To_Name_Buffer (Directory_Separator);\n-            Add_Str_To_Name_Buffer  (Subdirs.all);\n+            Add_Str_To_Name_Buffer (Subdirs.all);\n          end if;\n \n          for J in 1 .. Name_Len loop\n@@ -989,10 +989,8 @@ package body Prj.Conf is\n \n                   procedure Check_RTS_Switches is\n                      Switch_Array : Array_Element;\n-\n                      Switch_List  : String_List_Id := Nil_String;\n                      Switch       : String_Element;\n-\n                      Lang         : Name_Id;\n                      Lang_Last    : Positive;\n "}, {"sha": "d3e5ef26ed2e7ebf1cc464121c2258608fe98f8c", "filename": "gcc/ada/s-ficobl.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fs-ficobl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fs-ficobl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ficobl.ads?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -122,7 +122,7 @@ package System.File_Control_Block is\n       --  Indicates sharing status of file, see description of type above\n \n       Access_Method : Character;\n-      --  Set to 'Q', 'S', 'T, 'D' for Sequential_IO, Stream_IO, Text_IO,\n+      --  Set to 'Q', 'S', 'T', 'D' for Sequential_IO, Stream_IO, Text_IO,\n       --  Direct_IO file (used to validate file sharing request).\n \n       Next : AFCB_Ptr;"}, {"sha": "de7fd3ef9b2cc02c173d8f04c2adf21f94ee0fba", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -2110,13 +2110,13 @@ package body Sem_Attr is\n \n       case Attr_Id is\n \n-         --  Attributes related to Ada2012 iterators (Placeholder).\n+         --  Attributes related to Ada2012 iterators (placeholder ???)\n \n-         when Attribute_Constant_Indexing => null;\n-         when Attribute_Default_Iterator => null;\n+         when Attribute_Constant_Indexing    => null;\n+         when Attribute_Default_Iterator     => null;\n          when Attribute_Implicit_Dereference => null;\n-         when Attribute_Iterator_Element => null;\n-         when Attribute_Variable_Indexing => null;\n+         when Attribute_Iterator_Element     => null;\n+         when Attribute_Variable_Indexing    => null;\n \n       ------------------\n       -- Abort_Signal --\n@@ -5967,23 +5967,23 @@ package body Sem_Attr is\n       --  test Static as required in cases where it makes a difference.\n \n       --  In the case where Static is not set, we do know that all the\n-      --  expressions present are at least known at compile time (we\n-      --  assumed above that if this was not the case, then there was\n-      --  no hope of static evaluation). However, we did not require\n-      --  that the bounds of the prefix type be compile time known,\n-      --  let alone static). That's because there are many attributes\n-      --  that can be computed at compile time on non-static subtypes,\n-      --  even though such references are not static expressions.\n+      --  expressions present are at least known at compile time (we assumed\n+      --  above that if this was not the case, then there was no hope of static\n+      --  evaluation). However, we did not require that the bounds of the\n+      --  prefix type be compile time known, let alone static). That's because\n+      --  there are many attributes that can be computed at compile time on\n+      --  non-static subtypes, even though such references are not static\n+      --  expressions.\n \n       case Id is\n \n-         --  Attributes related to Ada2012 iterators (Placeholder).\n+         --  Attributes related to Ada2012 iterators (placeholder ???)\n \n-         when Attribute_Constant_Indexing => null;\n-         when Attribute_Default_Iterator => null;\n+         when Attribute_Constant_Indexing    => null;\n+         when Attribute_Default_Iterator     => null;\n          when Attribute_Implicit_Dereference => null;\n-         when Attribute_Iterator_Element => null;\n-         when Attribute_Variable_Indexing => null;\n+         when Attribute_Iterator_Element     => null;\n+         when Attribute_Variable_Indexing    => null;\n \n       --------------\n       -- Adjacent --"}, {"sha": "97cbd0757b80ba549c361e898e5dd008f7230556", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -2194,6 +2194,7 @@ package body Sem_Ch12 is\n          while Nkind (Gen_Name) = N_Expanded_Name loop\n             Gen_Name := Prefix (Gen_Name);\n          end loop;\n+\n          if Chars (Gen_Name) = Chars (Pack_Id) then\n             Error_Msg_NE\n              (\"& is hidden within declaration of formal package\",\n@@ -2285,6 +2286,7 @@ package body Sem_Ch12 is\n       --  The formals for which associations are provided are not visible\n       --  outside of the formal package. The others are still declared by a\n       --  formal parameter declaration.\n+\n       --  If there are no associations, the only local entity to hide is the\n       --  generated package renaming itself.\n \n@@ -2294,7 +2296,6 @@ package body Sem_Ch12 is\n       begin\n          E := First_Entity (Formal);\n          while Present (E) loop\n-\n             if Associations\n               and then not Is_Generic_Formal (E)\n             then"}, {"sha": "4a9e9a94cf1a2ba08f24c3f724626d5f473144bc", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -946,7 +946,7 @@ package body Sem_Ch13 is\n \n                   Delay_Required := False;\n \n-               --  Aspects related to container iterators.\n+               --  Aspects related to container iterators (fill in later???)\n \n                when Aspect_Constant_Indexing    |\n                     Aspect_Default_Iterator     |\n@@ -955,7 +955,6 @@ package body Sem_Ch13 is\n                   null;\n \n                when Aspect_Implicit_Dereference =>\n-\n                   if not Is_Type (E)\n                     or else not Has_Discriminants (E)\n                   then\n@@ -978,6 +977,7 @@ package body Sem_Ch13 is\n                               Set_Has_Implicit_Dereference (Disc);\n                               goto Continue;\n                            end if;\n+\n                            Next_Discriminant (Disc);\n                         end loop;\n \n@@ -2310,9 +2310,12 @@ package body Sem_Ch13 is\n          --------------------------\n          -- Implicit_Dereference --\n          --------------------------\n+\n          when Attribute_Implicit_Dereference =>\n-            --  Legality checks already performed above.\n-            null;   --  TBD\n+\n+            --  Legality checks already performed above\n+\n+            null;   --  TBD???\n \n          -----------\n          -- Input --\n@@ -5482,6 +5485,8 @@ package body Sem_Ch13 is\n               Aspect_Value_Size     =>\n             T := Any_Integer;\n \n+         --  Following to be done later ???\n+\n          when Aspect_Constant_Indexing    |\n               Aspect_Default_Iterator     |\n               Aspect_Iterator_Element     |"}, {"sha": "89583ddf14724fd242d7cbf160fb74e42103273b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -9121,12 +9121,13 @@ package body Sem_Ch3 is\n \n                            --  AI05-0068: report if there is an overriding\n                            --  non-abstract subprogram that is invisible.\n+\n                            if Is_Hidden (E)\n                              and then not Is_Abstract_Subprogram (E)\n                            then\n                               Error_Msg_NE\n-                             (\"\\& subprogram# is not visible\",\n-                              T, Subp);\n+                                (\"\\& subprogram# is not visible\",\n+                                 T, Subp);\n \n                            else\n                               Error_Msg_NE"}, {"sha": "5df43afc43eb11c0b99176e9f2564204cc137d15", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -1120,7 +1120,7 @@ package body Sem_Elab is\n    procedure Check_Elab_Call\n      (N            : Node_Id;\n       Outer_Scope  : Entity_Id := Empty;\n-      In_Init_Proc : Boolean := False)\n+      In_Init_Proc : Boolean   := False)\n    is\n       Ent : Entity_Id;\n       P   : Node_Id;"}, {"sha": "2bea37dbe5fa20fed405d45ab635b61ec88af08e", "filename": "gcc/ada/sem_elab.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_elab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fsem_elab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.ads?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -121,7 +121,7 @@ package Sem_Elab is\n    procedure Check_Elab_Call\n      (N            : Node_Id;\n       Outer_Scope  : Entity_Id := Empty;\n-      In_Init_Proc : Boolean := False);\n+      In_Init_Proc : Boolean   := False);\n    --  Check a call for possible elaboration problems. The node N is either\n    --  an N_Function_Call or N_Procedure_Call_Statement node. The Outer_Scope\n    --  argument indicates whether this is an outer level call from Sem_Res"}, {"sha": "58d4e13e7acb325bcb7ed79ec930f4ac2687e657", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb3c784c7dad97ec1ed3fafead1986d4319a5246/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=bb3c784c7dad97ec1ed3fafead1986d4319a5246", "patch": "@@ -1059,8 +1059,8 @@ package body Switch.C is\n                  (\"-gnatZ is no longer supported: consider using --RTS=zcx\");\n \n             --  Note on language version switches: whenever a new language\n-            --  version switch is added, procedure\n-            --  Switch.M.Normalize_Compiler_Switches must be updated.\n+            --  version switch is added, Switch.M.Normalize_Compiler_Switches\n+            --  must be updated.\n \n             --  Processing for 83 switch\n "}]}