{"sha": "487a6e06cec4f057438ef9933852d8ee536077ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg3YTZlMDZjZWM0ZjA1NzQzOGVmOTkzMzg1MmQ4ZWU1MzYwNzdmZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-05-19T08:42:48Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-05-19T08:42:48Z"}, "message": "Warning Fixes:\n\n        * Makefile.in (print-rtl.o): Depend on bitmap.h.\n        (dbxout.o): Depend on toplev.h.\n        ($(SCHED_PREFIX)sched.o): Likewise.\n        ($(out_object_file)): Likewise for system.h and toplev.h.\n        (cppmain.o): Depend on gansidecl.h.\n        (cpplib.o): Likewise.\n        (cpperror.o): Likewise.\n        (cppexp.o): Likewise.\n        (cpphash.o): Likewise.\n        (cppalloc.o): Likewise.\n        (fix-header.o): Depend on cpplib.h and cpphash.h.\n        (scan-decls.o): Depend on gansidecl.h.\n        * basic-block.h (free_regset_vector): Add prototype.\n        * cccp.c (check_precompiled): Mark parameter `fname' with\n        ATTRIBUTE_UNUSED.\n        (do_assert): Likewise for `op' and `keyword'.\n        (do_unassert): Likewise.\n        (do_line): Likewise for `keyword'.\n        (do_error): Likewise for `op' and `keyword'.\n        (do_warning): Likewise.\n        (do_ident): Likewise for `keyword'.\n        (do_pragma): Likewise for `limit', `op' and `keyword'.\n        (do_sccs): Likewise.\n        (do_if): Likewise for `keyword'.\n        (do_elif): Likewise.\n        (do_else): Likewise.\n        (do_endif): Likewise.\n        * collect2.c (getenv): Remove redundant prototype.\n        (collect_exit, collect_execute, dump_file): Likewise.\n        (dump_list): Wrap prototype and definition in COLLECT_EXPORT_LIST.\n        (dump_prefix_list): Hide prototype and definition.\n        * sparc.c: Include toplev.h.\n        (intreg_operand): Mark parameter `mode' with ATTRIBUTE_UNUSED.\n        (symbolic_memory_operand): Likewise.\n        (sp64_medium_pic_operand): Likewise.\n        (data_segment_operand): Likewise.\n        (text_segment_operand): Likewise.\n        (splittable_symbolic_memory_operand): Likewise.\n        (splittable_immediate_memory_operand): Likewise.\n        (eq_or_neq): Likewise.\n        (normal_comp_operator): Likewise.\n        (noov_compare_op): Likewise.\n        (v9_regcmp_op): Likewise.\n        (v8plus_regcmp_op): Likewise.\n        (extend_op): Likewise.\n        (cc_arithop): Likewise.\n        (cc_arithopn): Likewise.\n        (small_int): Likewise.\n        (uns_small_int): Likewise.\n        (clobbered_register): Likewise.\n        (legitimize_pic_address): Likewise.\n        (delay_operand): Likewise.\n        (sparc_builtin_saveregs): Remove unused variable `stdarg'.\n        * sparc.h (order_regs_for_local_alloc, eligible_for_return_delay,\n        sparc_issue_rate, v8plus_regcmp_p): Add prototypes.\n        * sparc.md (cmpdi_v8plus): Add abort for default case in switch.\n        * cppalloc.c: Include gansidecl.h.\n        * cpperror.c: Include stdarg.h/varargs.h and gansidecl.h.\n        (cpp_file_line_for_message): Mark parameter `pfile' with\n        ATTRIBUTE_UNUSED.\n        (v_cpp_message): New function.\n        (cpp_message): Use it.  Also convert to variable arguments.\n        (cpp_fatal): Likewise.\n        (cpp_pfatal_with_name): Constify parameter `name'.\n        * cppexp.c: Move gansidecl.h before cpplib.h.\n        * cpphash.c: Likewise.\n        * cpphash.h (hashf, delete_macro): Add prototypes.\n        * cpplib.c: Include stdarg.h/varargs.h and move gansidecl.h before\n        cpplib.h.  Don't include errno.h.\n        (update_path): Add arguments to prototype.\n        (cpp_fatal, cpp_file_line_for_message, cpp_message, delete_macro,\n        cpp_print_containing_files): Remove redundant prototypes.\n        (cpp_hash_cleanup, add_import, append_include_chain,\n        make_assertion, path_include, initialize_builtins,\n        initialize_char_syntax, finclude, validate_else, comp_def_part,\n        lookup_import, redundant_include_p, is_system_include,\n        read_name_map, read_filename_string, open_include_file,\n        check_macro_name, compare_defs, compare_token_lists,\n        eval_if_expression, change_newlines): Add prototype arguments.\n        (hashf): Remove redundant prototype.\n        (read_token_list, free_token_list, safe_read, xcalloc, savestring,\n        conditional_skip, skip_if_group): Add prototype arguments.\n        (fdopen): Remove redundant prototype.\n        (do_define, do_line, do_include, do_undef, do_error, do_pragma,\n        do_ident, do_if, do_xifdef, do_else, do_elif, do_endif, do_sccs,\n        do_once, do_assert, do_unassert, do_warning): Add prototype arguments.\n        (struct directive): Add prototype arguments to function pointer\n        member `func'.\n        (handle_directive): Add missing arguments to call to `do_line'.\n        (do_include): Mark parameters `unused1' and `unused2' with\n        ATTRIBUTE_UNUSED.\n        (do_line): Likewise for `keyword' and new parameters `unused1' and\n        `unused2'.\n        (do_error): Likewise for `keyword'.\n        (do_warning): Likewise.  Also add missing argument `pfile' in call\n        to cpp_pedwarn.\n        (do_once): Mark parameter `keyword', `unused1' and `unused2' with\n        ATTRIBUTE_UNUSED.\n        (do_ident): Likewise for `keyword', `buf' and `limit'.\n        (do_pragma): Likewise.  Also add missing arguments in call to do_once.\n        (do_sccs): Mark parameter `keyword', `buf' and `limit' with\n        ATTRIBUTE_UNUSED.\n        (do_if): Likewise for `keyword'.\n        (do_elif): Likewise.\n        (eval_if_expression): Likewise for `buf' and `length'.\n        (do_xifdef): Likewise for `unused1' and `unused2'.\n        (do_else): Likewise for `keyword', `buf' and `limit'.\n        (do_endif): Likewise.\n        (parse_name): Add missing argument `pfile' in call to cpp_pedwarn.\n        (cpp_handle_options): Remove superfluous NULL argument in call to\n        cpp_fatal.\n        (cpp_handle_options): Likewise.\n        (do_assert): Mark parameter `keyword', `buf' and `limit' with\n        ATTRIBUTE_UNUSED.\n        (do_unassert): Likewise.\n        (cpp_print_file_and_line): Add missing argument `pfile' in call to\n        cpp_file_line_for_message.\n        (v_cpp_error): New function.\n        (cpp_error): Use it. Also accept variable arguments.\n        (v_cpp_warning): New function.\n        (cpp_warning): Use it. Also accept variable arguments.\n        (cpp_pedwarn): Accept variable arguments.\n        (v_cpp_error_with_line): New function\n        (cpp_error_with_line): Use it.  Accept variable arguments.\n        (v_cpp_warning_with_line): New function.\n        (cpp_warning_with_line): Use it.  Accept variable arguments.  Hide\n        definition.\n        (cpp_pedwarn_with_line): Accept variable arguments.\n        (cpp_pedwarn_with_file_and_line): Likewise.\n        (cpp_error_from_errno): Constify parameter `name'.  Add missing\n        argument `pfile' in call to cpp_file_line_for_message.\n        (cpp_perror_with_name): Constify parameter `name'.\n        * cpplib.h: Define PARAMS() in terms of PROTO().\n        (fatal): Remove redundant prototype.\n        (cpp_error, cpp_warning, cpp_pedwarn, cpp_error_with_line,\n        cpp_pedwarn_with_line, cpp_pedwarn_with_file_and_line,\n        cpp_error_from_errno, cpp_perror_with_name, cpp_pfatal_with_name,\n        cpp_fatal, cpp_message, cpp_pfatal_with_name,\n        cpp_file_line_for_message, cpp_print_containing_files): Add\n        arguments to prototypes.\n        (scan_decls, cpp_finish): Add prototypes.\n        * cppmain.c: Include gansidecl.h.\n        (main): Remove unused variable `i'.\n        * dbxout.c: Include toplev.h.\n        * demangle.h (do_tlink, collect_execute, collect_exit,\n        collect_wait, dump_file, file_exists): Add prototype.\n        * dwarf2out.c (dwarf_type_encoding_name, decl_start_label): Hide\n        prototype and definition.\n        (gen_unspecified_parameters_die): Don't assign results of call to\n        function new_die() to unused variable `parm_die'.\n        (dwarf2out_line): Mark parameter `filename' with ATTRIBUTE_UNUSED.\n        (dwarf2out_define): Likewise for `lineno' and `buffer'.\n        * dwarfout.c (output_unsigned_leb128, output_signed_leb128): Hide\n        prototype and definition.\n        (output_die): Add prototype arguments to function pointer arg.\n        (output_unspecified_parameters_die): Mark parameter `arg' with\n        ATTRIBUTE_UNUSED.\n        * except.c (output_exception_table_entry): Remove unused variable\n        `eh_entry'.\n        * except.h (expand_fixup_region_start, expand_fixup_region_end):\n        Add prototypes.\n        * expr.c (do_jump_by_parts_equality_rtx): Remove prototype.\n        * expr.h (do_jump_by_parts_equality_rtx): Add prototype.\n        * fix-header.c: Include stdarg.h/varargs.h, move gansidecl.h\n        before cpplib.h, include cpphash.h, remove redundant prototype of\n        cpp_fatal, don't define `const', add a prototype for `fatal'.\n        (cpp_file_line_for_message): Add missing arguments `pfile'.\n        (v_cpp_message): New function.\n        (cpp_message): Use it.\n        (v_fatal): New function.\n        (fatal, cpp_fatal): Use it.\n        (cpp_pfatal_with_name): Constify parameter `name'.\n        * flow.c (free_regset_vector): Remove redundant prototype.\n        * function.c (round_down): Wrap prototype and definition with\n        macro ARGS_GROW_DOWNWARD.\n        (record_insns): Wrap prototype and definition with\n        defined (HAVE_prologue) || defined (HAVE_epilogue).\n        * gansidecl.h (ATTRIBUTE_PRINTF_4, ATTRIBUTE_PRINTF_5): New macros.\n        * gen-protos.c: Include gansidecl.h.\n        (hashf): Don't make it static, constify parameter `name'.\n        * genattrtab.c (check_attr_test): Change XEXP() to XSTR() to match\n        specifier %s in calls to function `fatal'.\n        * haifa-sched.c: Include toplev.h.\n        (find_rgns): Remove unused variable `j'.\n        * integrate.c (note_modified_parmregs): Mark parameter `x' with\n        ATTRIBUTE_UNUSED.\n        (mark_stores): Likewise.\n        * jump.c (mark_modified_reg): Likewise.\n        * output.h (insn_current_reference_address): Add prototype.\n        (eh_frame_section): Likewise.\n        * print-rtl.c: Include bitmap.h.\n        * reload1.c (reload): Wrap variables `note' and `next' in macro\n        PRESERVE_DEATH_INFO_REGNO_P.\n        (forget_old_reloads_1): Mark parameter `ignored' with\n        ATTRIBUTE_UNUSED.\n        (choose_reload_regs): Remove unused variable `in'.\n        (reload_cse_invalidate_mem): Mark parameter `ignore' with\n        ATTRIBUTE_UNUSED.\n        (reload_cse_check_clobber): Likewise.\n        * rtl.h (expand_null_return, reg_classes_intersect_p): Add prototype.\n        (mark_elimination): Fix typo in prototype.\n        * scan-decls.c: Include gansidecl.h.\n        * tree.h (using_eh_for_cleanups, supports_one_only): Add prototype.\n\nFrom-SVN: r19867", "tree": {"sha": "63a33d6778d8745de346913c7e48157808cb69e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63a33d6778d8745de346913c7e48157808cb69e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/487a6e06cec4f057438ef9933852d8ee536077ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487a6e06cec4f057438ef9933852d8ee536077ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/487a6e06cec4f057438ef9933852d8ee536077ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487a6e06cec4f057438ef9933852d8ee536077ff/comments", "author": null, "committer": null, "parents": [{"sha": "77dc0938f72adc4ef75f164fe290deeb236b32eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77dc0938f72adc4ef75f164fe290deeb236b32eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77dc0938f72adc4ef75f164fe290deeb236b32eb"}], "stats": {"total": 1141, "additions": 850, "deletions": 291}, "files": [{"sha": "2651fb6dd68216cee734679415908b7bf8e28449", "filename": "gcc/ChangeLog", "status": "modified", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -1,3 +1,244 @@\n+Tue May 19 11:08:52 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (print-rtl.o): Depend on bitmap.h.\n+\t(dbxout.o): Depend on toplev.h.\n+\t($(SCHED_PREFIX)sched.o): Likewise.\n+\t($(out_object_file)): Likewise for system.h and toplev.h.\n+\t(cppmain.o): Depend on gansidecl.h.\n+\t(cpplib.o): Likewise.\n+\t(cpperror.o): Likewise.\n+\t(cppexp.o): Likewise.\n+\t(cpphash.o): Likewise.\n+\t(cppalloc.o): Likewise.\n+\t(fix-header.o): Depend on cpplib.h and cpphash.h.\n+\t(scan-decls.o): Depend on gansidecl.h.\n+\n+\t* basic-block.h (free_regset_vector): Add prototype.\n+\n+\t* cccp.c (check_precompiled): Mark parameter `fname' with\n+\tATTRIBUTE_UNUSED.\n+\t(do_assert): Likewise for `op' and `keyword'.\n+\t(do_unassert): Likewise.\n+\t(do_line): Likewise for `keyword'.\n+\t(do_error): Likewise for `op' and `keyword'.\n+\t(do_warning): Likewise.\n+\t(do_ident): Likewise for `keyword'.\n+\t(do_pragma): Likewise for `limit', `op' and `keyword'.\n+\t(do_sccs): Likewise.\n+\t(do_if): Likewise for `keyword'.\n+\t(do_elif): Likewise.\n+\t(do_else): Likewise.\n+\t(do_endif): Likewise.\n+\n+\t* collect2.c (getenv): Remove redundant prototype.\n+\t(collect_exit, collect_execute, dump_file): Likewise.\n+\t(dump_list): Wrap prototype and definition in COLLECT_EXPORT_LIST.\n+\t(dump_prefix_list): Hide prototype and definition.\n+\n+\t* sparc.c: Include toplev.h.\n+\t(intreg_operand): Mark parameter `mode' with ATTRIBUTE_UNUSED.\n+\t(symbolic_memory_operand): Likewise.\n+\t(sp64_medium_pic_operand): Likewise.\n+\t(data_segment_operand): Likewise.\n+\t(text_segment_operand): Likewise.\n+\t(splittable_symbolic_memory_operand): Likewise.\n+\t(splittable_immediate_memory_operand): Likewise.\n+\t(eq_or_neq): Likewise.\n+\t(normal_comp_operator): Likewise.\n+\t(noov_compare_op): Likewise.\n+\t(v9_regcmp_op): Likewise.\n+\t(v8plus_regcmp_op): Likewise.\n+\t(extend_op): Likewise.\n+\t(cc_arithop): Likewise.\n+\t(cc_arithopn): Likewise.\n+\t(small_int): Likewise.\n+\t(uns_small_int): Likewise.\n+\t(clobbered_register): Likewise.\n+\t(legitimize_pic_address): Likewise.\n+\t(delay_operand): Likewise.\n+\t(sparc_builtin_saveregs): Remove unused variable `stdarg'.\n+\n+\t* sparc.h (order_regs_for_local_alloc, eligible_for_return_delay,\n+\tsparc_issue_rate, v8plus_regcmp_p): Add prototypes.\n+\n+\t* sparc.md (cmpdi_v8plus): Add abort for default case in switch.\n+\n+\t* cppalloc.c: Include gansidecl.h.\n+\n+\t* cpperror.c: Include stdarg.h/varargs.h and gansidecl.h.\n+\t(cpp_file_line_for_message): Mark parameter `pfile' with\n+\tATTRIBUTE_UNUSED.\n+\t(v_cpp_message): New function.\n+\t(cpp_message): Use it.  Also convert to variable arguments.\n+\t(cpp_fatal): Likewise.\n+\t(cpp_pfatal_with_name): Constify parameter `name'.\n+\n+\t* cppexp.c: Move gansidecl.h before cpplib.h.\n+\t* cpphash.c: Likewise.\n+\t* cpphash.h (hashf, delete_macro): Add prototypes.\n+\n+\t* cpplib.c: Include stdarg.h/varargs.h and move gansidecl.h before\n+\tcpplib.h.  Don't include errno.h.\n+\t(update_path): Add arguments to prototype.\n+\t(cpp_fatal, cpp_file_line_for_message, cpp_message, delete_macro,\n+\tcpp_print_containing_files): Remove redundant prototypes.\n+\t(cpp_hash_cleanup, add_import, append_include_chain,\n+ \tmake_assertion, path_include, initialize_builtins,\n+ \tinitialize_char_syntax, finclude, validate_else, comp_def_part,\n+ \tlookup_import, redundant_include_p, is_system_include,\n+ \tread_name_map, read_filename_string, open_include_file,\n+ \tcheck_macro_name, compare_defs, compare_token_lists,\n+ \teval_if_expression, change_newlines): Add prototype arguments.\n+\t(hashf): Remove redundant prototype.\n+\t(read_token_list, free_token_list, safe_read, xcalloc, savestring,\n+\tconditional_skip, skip_if_group): Add prototype arguments.\n+\t(fdopen): Remove redundant prototype.\n+\t(do_define, do_line, do_include, do_undef, do_error, do_pragma,\n+\tdo_ident, do_if, do_xifdef, do_else, do_elif, do_endif, do_sccs,\n+\tdo_once, do_assert, do_unassert, do_warning): Add prototype arguments.\n+\t(struct directive): Add prototype arguments to function pointer\n+ \tmember `func'.\n+\t(handle_directive): Add missing arguments to call to `do_line'.\n+\t(do_include): Mark parameters `unused1' and `unused2' with\n+\tATTRIBUTE_UNUSED.\n+\t(do_line): Likewise for `keyword' and new parameters `unused1' and\n+\t`unused2'.\n+\t(do_error): Likewise for `keyword'.\n+\t(do_warning): Likewise.  Also add missing argument `pfile' in call\n+\tto cpp_pedwarn.\n+\t(do_once): Mark parameter `keyword', `unused1' and `unused2' with\n+\tATTRIBUTE_UNUSED. \n+\t(do_ident): Likewise for `keyword', `buf' and `limit'.\n+\t(do_pragma): Likewise.  Also add missing arguments in call to do_once.\n+\t(do_sccs): Mark parameter `keyword', `buf' and `limit' with\n+\tATTRIBUTE_UNUSED. \n+\t(do_if): Likewise for `keyword'.\n+\t(do_elif): Likewise.\n+\t(eval_if_expression): Likewise for `buf' and `length'.\n+\t(do_xifdef): Likewise for `unused1' and `unused2'.\n+\t(do_else): Likewise for `keyword', `buf' and `limit'.\n+\t(do_endif): Likewise.\n+\t(parse_name): Add missing argument `pfile' in call to cpp_pedwarn.\n+\t(cpp_handle_options): Remove superfluous NULL argument in call to\n+\tcpp_fatal.\n+\t(cpp_handle_options): Likewise.\n+\t(do_assert): Mark parameter `keyword', `buf' and `limit' with\n+\tATTRIBUTE_UNUSED.\n+\t(do_unassert): Likewise.\n+\t(cpp_print_file_and_line): Add missing argument `pfile' in call to\n+\tcpp_file_line_for_message.\n+\t(v_cpp_error): New function.\n+\t(cpp_error): Use it. Also accept variable arguments.\n+\t(v_cpp_warning): New function.\n+\t(cpp_warning): Use it. Also accept variable arguments.\n+\t(cpp_pedwarn): Accept variable arguments.\n+\t(v_cpp_error_with_line): New function\n+\t(cpp_error_with_line): Use it.  Accept variable arguments.\n+\t(v_cpp_warning_with_line): New function.\n+\t(cpp_warning_with_line): Use it.  Accept variable arguments.  Hide\n+\tdefinition.\n+\t(cpp_pedwarn_with_line): Accept variable arguments.\n+\t(cpp_pedwarn_with_file_and_line): Likewise.\n+\t(cpp_error_from_errno): Constify parameter `name'.  Add missing\n+\targument `pfile' in call to cpp_file_line_for_message.\n+\t(cpp_perror_with_name): Constify parameter `name'.\n+\n+\t* cpplib.h: Define PARAMS() in terms of PROTO().\n+\t(fatal): Remove redundant prototype.\n+\t(cpp_error, cpp_warning, cpp_pedwarn, cpp_error_with_line,\n+\tcpp_pedwarn_with_line, cpp_pedwarn_with_file_and_line,\n+\tcpp_error_from_errno, cpp_perror_with_name, cpp_pfatal_with_name, \n+\tcpp_fatal, cpp_message, cpp_pfatal_with_name,\n+\tcpp_file_line_for_message, cpp_print_containing_files): Add\n+\targuments to prototypes.\n+\t(scan_decls, cpp_finish): Add prototypes.\n+\n+\t* cppmain.c: Include gansidecl.h.\n+\t(main): Remove unused variable `i'.\n+\t\n+\t* dbxout.c: Include toplev.h.\n+\n+\t* demangle.h (do_tlink, collect_execute, collect_exit,\n+\tcollect_wait, dump_file, file_exists): Add prototype.\n+\n+\t* dwarf2out.c (dwarf_type_encoding_name, decl_start_label): Hide\n+\tprototype and definition.\n+\t(gen_unspecified_parameters_die): Don't assign results of call to\n+\tfunction new_die() to unused variable `parm_die'.\n+\t(dwarf2out_line): Mark parameter `filename' with ATTRIBUTE_UNUSED.\n+\t(dwarf2out_define): Likewise for `lineno' and `buffer'.\n+\n+\t* dwarfout.c (output_unsigned_leb128, output_signed_leb128): Hide\n+\tprototype and definition.\n+\t(output_die): Add prototype arguments to function pointer arg.\n+\t(output_unspecified_parameters_die): Mark parameter `arg' with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* except.c (output_exception_table_entry): Remove unused variable\n+\t`eh_entry'.\n+\n+\t* except.h (expand_fixup_region_start, expand_fixup_region_end):\n+\tAdd prototypes.\n+\n+\t* expr.c (do_jump_by_parts_equality_rtx): Remove prototype.\n+\n+\t* expr.h (do_jump_by_parts_equality_rtx): Add prototype.\n+\n+\t* fix-header.c: Include stdarg.h/varargs.h, move gansidecl.h\n+\tbefore cpplib.h, include cpphash.h, remove redundant prototype of\n+\tcpp_fatal, don't define `const', add a prototype for `fatal'.\n+\t(cpp_file_line_for_message): Add missing arguments `pfile'.\n+\t(v_cpp_message): New function.\n+\t(cpp_message): Use it.\n+\t(v_fatal): New function.\n+\t(fatal, cpp_fatal): Use it.\n+\t(cpp_pfatal_with_name): Constify parameter `name'.\n+\n+\t* flow.c (free_regset_vector): Remove redundant prototype.\n+\n+\t* function.c (round_down): Wrap prototype and definition with\n+\tmacro ARGS_GROW_DOWNWARD.\n+\t(record_insns): Wrap prototype and definition with\n+ \tdefined (HAVE_prologue) || defined (HAVE_epilogue).\n+\n+\t* gansidecl.h (ATTRIBUTE_PRINTF_4, ATTRIBUTE_PRINTF_5): New macros.\n+\n+\t* gen-protos.c: Include gansidecl.h.\n+\t(hashf): Don't make it static, constify parameter `name'.\n+\n+\t* genattrtab.c (check_attr_test): Change XEXP() to XSTR() to match\n+\tspecifier %s in calls to function `fatal'.\n+\n+\t* haifa-sched.c: Include toplev.h.\n+\t(find_rgns): Remove unused variable `j'.\n+\n+\t* integrate.c (note_modified_parmregs): Mark parameter `x' with\n+\tATTRIBUTE_UNUSED.\n+\t(mark_stores): Likewise.\n+\n+\t* jump.c (mark_modified_reg): Likewise.\n+\n+\t* output.h (insn_current_reference_address): Add prototype.\n+\t(eh_frame_section): Likewise.\n+\n+\t* print-rtl.c: Include bitmap.h.\n+\n+\t* reload1.c (reload): Wrap variables `note' and `next' in macro\n+\tPRESERVE_DEATH_INFO_REGNO_P.\n+\t(forget_old_reloads_1): Mark parameter `ignored' with\n+\tATTRIBUTE_UNUSED.\n+\t(choose_reload_regs): Remove unused variable `in'.\n+\t(reload_cse_invalidate_mem): Mark parameter `ignore' with\n+\tATTRIBUTE_UNUSED.\n+\t(reload_cse_check_clobber): Likewise.\n+\n+\t* rtl.h (expand_null_return, reg_classes_intersect_p): Add prototype.\n+\t(mark_elimination): Fix typo in prototype.\n+\n+\t* scan-decls.c: Include gansidecl.h.\n+\n+\t* tree.h (using_eh_for_cleanups, supports_one_only): Add prototype.\n+\t\n Mon May 18 22:37:33 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* function.c (identify_blocks): Fix thinko when setting the"}, {"sha": "9cfac12b50eaf82657da8bddfccfc1b9b1c4a1a5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -1394,7 +1394,7 @@ toplev.o : toplev.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) \\\n \n rtl.o : rtl.c $(CONFIG_H) system.h $(RTL_H) bitmap.h\n \n-print-rtl.o : print-rtl.c $(CONFIG_H) system.h $(RTL_H)\n+print-rtl.o : print-rtl.c $(CONFIG_H) system.h $(RTL_H) bitmap.h\n rtlanal.o : rtlanal.c $(CONFIG_H) system.h $(RTL_H)\n \n varasm.o : varasm.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h \\\n@@ -1421,7 +1421,8 @@ explow.o : explow.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n optabs.o : optabs.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h  \\\n    insn-flags.h insn-config.h insn-codes.h expr.h $(RECOG_H) reload.h\n dbxout.o : dbxout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h regs.h \\\n-   insn-config.h reload.h gstab.h xcoffout.h defaults.h output.h dbxout.h\n+   insn-config.h reload.h gstab.h xcoffout.h defaults.h output.h dbxout.h \\\n+   toplev.h\n sdbout.o : sdbout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h except.h \\\n    function.h expr.h output.h hard-reg-set.h regs.h defaults.h real.h \\\n    insn-config.h obstack.h xcoffout.h c-pragma.h sdbout.h\n@@ -1487,7 +1488,8 @@ regmove.o : regmove.c $(CONFIG_H) system.h $(RTL_H) insn-config.h \\\n    insn-codes.h recog.h output.h reload.h regs.h hard-reg-set.h flags.h \\\n    expr.h insn-flags.h\n $(SCHED_PREFIX)sched.o : $(SCHED_PREFIX)sched.c $(CONFIG_H) system.h $(RTL_H) \\\n-   $(BASIC_BLOCK_H) regs.h hard-reg-set.h flags.h insn-config.h insn-attr.h\n+   $(BASIC_BLOCK_H) regs.h hard-reg-set.h flags.h insn-config.h insn-attr.h \\\n+   toplev.h\n final.o : final.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h regs.h \\\n    $(RECOG_H) conditions.h insn-config.h insn-attr.h except.h real.h output.h \\\n    hard-reg-set.h insn-flags.h insn-codes.h gstab.h xcoffout.h defaults.h \\\n@@ -1500,7 +1502,7 @@ reg-stack.o : reg-stack.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) \\\n \n $(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) \\\n    $(RTL_H) regs.h hard-reg-set.h real.h insn-config.h conditions.h \\\n-   insn-flags.h output.h insn-attr.h insn-codes.h\n+   insn-flags.h output.h insn-attr.h insn-codes.h system.h toplev.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(out_file)\n \n # Build auxiliary files that support ecoff format.\n@@ -1847,9 +1849,10 @@ cppmain$(exeext): cppmain.o cpplib.o cpphash.o cppalloc.o cpperror.o cppexp.o \\\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ cppmain.o cpplib.o cpphash.o \\\n \t  cppalloc.o cpperror.o cppexp.o prefix.o version.o $(LIBS)\n \n-cppmain.o: cppmain.c $(CONFIG_H) cpplib.h system.h\n+cppmain.o: cppmain.c $(CONFIG_H) cpplib.h system.h gansidecl.h\n \n-cpplib.o: cpplib.c $(CONFIG_H) cpplib.h cpphash.h config.status system.h\n+cpplib.o: cpplib.c $(CONFIG_H) cpplib.h cpphash.h config.status system.h \\\n+\tgansidecl.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n \t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gxx_include_dir)\\\" \\\n@@ -1859,13 +1862,13 @@ cpplib.o: cpplib.c $(CONFIG_H) cpplib.h cpphash.h config.status system.h\n \t  -DTOOL_INCLUDE_DIR=\\\"$(tooldir)/include\\\" \\\n \t  -c `echo $(srcdir)/cpplib.c | sed 's,^\\./,,'`\n \n-cpperror.o: cpperror.c $(CONFIG_H) cpplib.h system.h\n+cpperror.o: cpperror.c $(CONFIG_H) cpplib.h system.h gansidecl.h\n \n-cppexp.o: cppexp.c $(CONFIG_H) cpplib.h system.h\n+cppexp.o: cppexp.c $(CONFIG_H) cpplib.h system.h gansidecl.h\n \n-cpphash.o: cpphash.c cpplib.h cpphash.h $(CONFIG_H) system.h\n+cpphash.o: cpphash.c cpplib.h cpphash.h $(CONFIG_H) system.h gansidecl.h\n \n-cppalloc.o: cppalloc.c $(CONFIG_H) cpplib.h system.h\n+cppalloc.o: cppalloc.c $(CONFIG_H) cpplib.h system.h gansidecl.h\n \n # Note for the stamp targets, we run the program `true' instead of\n # having an empty command (nothing following the semicolon).\n@@ -2054,10 +2057,10 @@ fix-header: fix-header.o scan-decls.o scan.o xsys-protos.h $(HOST_LIBDEPS) \\\n \t   version.o cppexp.o $(HOST_LIBS)\n \n fix-header.o: fix-header.c obstack.h scan.h xsys-protos.h $(build_xm_file) \\\n-\tsystem.h\n+\tsystem.h cpplib.h cpphash.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/fix-header.c\n \n-scan-decls.o: scan-decls.c scan.h cpplib.h $(build_xm_file) system.h\n+scan-decls.o: scan-decls.c scan.h cpplib.h $(build_xm_file) system.h gansidecl.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/scan-decls.c\n \n # stmp-fixproto depends on this, not on fix-header directly."}, {"sha": "d41c9ba5e9e02f914bfbeddce4ff840ee0bd9f24", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -184,6 +184,7 @@ extern void free_int_list               PROTO ((int_list_block **));\n #define EXIT_BLOCK (-2)\n \n /* from flow.c */\n+extern void free_regset_vector PROTO ((regset *, int nelts));\n extern int *uid_block_number;\n #define BLOCK_NUM(INSN)    uid_block_number[INSN_UID (INSN)]\n "}, {"sha": "3a0cf0db520e57fb65d7185676c207d4d25d5b57", "filename": "gcc/cccp.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -5194,7 +5194,7 @@ static char *\n check_precompiled (pcf, st, fname, limit)\n      int pcf;\n      struct stat *st;\n-     char *fname;\n+     char *fname ATTRIBUTE_UNUSED;\n      char **limit;\n {\n   int length = 0;\n@@ -6190,8 +6190,8 @@ collect_expansion (buf, end, nargs, arglist)\n static int\n do_assert (buf, limit, op, keyword)\n      U_CHAR *buf, *limit;\n-     FILE_BUF *op;\n-     struct directive *keyword;\n+     FILE_BUF *op ATTRIBUTE_UNUSED;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   U_CHAR *bp;\t\t\t/* temp ptr into input buffer */\n   U_CHAR *symname;\t\t/* remember where symbol name starts */\n@@ -6267,8 +6267,8 @@ do_assert (buf, limit, op, keyword)\n static int\n do_unassert (buf, limit, op, keyword)\n      U_CHAR *buf, *limit;\n-     FILE_BUF *op;\n-     struct directive *keyword;\n+     FILE_BUF *op ATTRIBUTE_UNUSED;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   U_CHAR *bp;\t\t\t/* temp ptr into input buffer */\n   U_CHAR *symname;\t\t/* remember where symbol name starts */\n@@ -6599,7 +6599,7 @@ static int\n do_line (buf, limit, op, keyword)\n      U_CHAR *buf, *limit;\n      FILE_BUF *op;\n-     struct directive *keyword;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   register U_CHAR *bp;\n   FILE_BUF *ip = &instack[indepth];\n@@ -6788,8 +6788,8 @@ do_undef (buf, limit, op, keyword)\n static int\n do_error (buf, limit, op, keyword)\n      U_CHAR *buf, *limit;\n-     FILE_BUF *op;\n-     struct directive *keyword;\n+     FILE_BUF *op ATTRIBUTE_UNUSED;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   int length = limit - buf;\n   U_CHAR *copy = (U_CHAR *) alloca (length + 1);\n@@ -6807,8 +6807,8 @@ do_error (buf, limit, op, keyword)\n static int\n do_warning (buf, limit, op, keyword)\n      U_CHAR *buf, *limit;\n-     FILE_BUF *op;\n-     struct directive *keyword;\n+     FILE_BUF *op ATTRIBUTE_UNUSED;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   int length = limit - buf;\n   U_CHAR *copy = (U_CHAR *) alloca (length + 1);\n@@ -6846,7 +6846,7 @@ static int\n do_ident (buf, limit, op, keyword)\n      U_CHAR *buf, *limit;\n      FILE_BUF *op;\n-     struct directive *keyword;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   FILE_BUF trybuf;\n   int len;\n@@ -6875,9 +6875,9 @@ do_ident (buf, limit, op, keyword)\n \n static int\n do_pragma (buf, limit, op, keyword)\n-     U_CHAR *buf, *limit;\n-     FILE_BUF *op;\n-     struct directive *keyword;\n+     U_CHAR *buf, *limit ATTRIBUTE_UNUSED;\n+     FILE_BUF *op ATTRIBUTE_UNUSED;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   SKIP_WHITE_SPACE (buf);\n   if (!strncmp ((char *) buf, \"once\", 4)) {\n@@ -6946,9 +6946,9 @@ do_pragma ()\n \n static int\n do_sccs (buf, limit, op, keyword)\n-     U_CHAR *buf, *limit;\n-     FILE_BUF *op;\n-     struct directive *keyword;\n+     U_CHAR *buf ATTRIBUTE_UNUSED, *limit ATTRIBUTE_UNUSED;\n+     FILE_BUF *op ATTRIBUTE_UNUSED;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   if (pedantic)\n     pedwarn (\"ANSI C does not allow `#sccs'\");\n@@ -6972,7 +6972,7 @@ static int\n do_if (buf, limit, op, keyword)\n      U_CHAR *buf, *limit;\n      FILE_BUF *op;\n-     struct directive *keyword;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   HOST_WIDE_INT value;\n   FILE_BUF *ip = &instack[indepth];\n@@ -6989,7 +6989,7 @@ static int\n do_elif (buf, limit, op, keyword)\n      U_CHAR *buf, *limit;\n      FILE_BUF *op;\n-     struct directive *keyword;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   HOST_WIDE_INT value;\n   FILE_BUF *ip = &instack[indepth];\n@@ -7522,7 +7522,7 @@ static int\n do_else (buf, limit, op, keyword)\n      U_CHAR *buf, *limit;\n      FILE_BUF *op;\n-     struct directive *keyword;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   FILE_BUF *ip = &instack[indepth];\n \n@@ -7569,7 +7569,7 @@ static int\n do_endif (buf, limit, op, keyword)\n      U_CHAR *buf, *limit;\n      FILE_BUF *op;\n-     struct directive *keyword;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n {\n   if (pedantic) {\n     SKIP_WHITE_SPACE (buf);"}, {"sha": "eec7a95e10cceb395fe8c100399cba0400de0c9f", "filename": "gcc/collect2.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -245,7 +245,6 @@ char * temporary_firstobj;\n /* Defined in the automatically-generated underscore.c.  */\n extern int prepends_underscore;\n \n-extern char *getenv ();\n extern char *mktemp ();\n extern FILE *fdopen ();\n \n@@ -279,9 +278,6 @@ static struct path_prefix *libpaths[3] = {&cmdline_lib_dirs,\n static char *libexts[3] = {\"a\", \"so\", NULL};  /* possible library extentions */\n #endif\n \n-void collect_exit\t\tPROTO((int));\n-void collect_execute\t\tPROTO((char *, char **, char *));\n-void dump_file\t\t\tPROTO((char *));\n static void handler\t\tPROTO((int));\n static int is_ctor_dtor\t\tPROTO((char *));\n static char *find_a_file\tPROTO((struct path_prefix *, char *));\n@@ -293,8 +289,12 @@ static void fork_execute\tPROTO((char *, char **));\n static void maybe_unlink\tPROTO((char *));\n static void add_to_list\t\tPROTO((struct head *, char *));\n static void write_list\t\tPROTO((FILE *, char *, struct id *));\n+#ifdef COLLECT_EXPORT_LIST\n static void dump_list\t\tPROTO((FILE *, char *, struct id *));\n+#endif\n+#if 0\n static void dump_prefix_list\tPROTO((FILE *, char *, struct prefix_list *));\n+#endif\n static void write_list_with_asm PROTO((FILE *, char *, struct id *));\n static void write_c_file\tPROTO((FILE *, char *));\n static void scan_prog_file\tPROTO((char *, enum pass));\n@@ -1775,6 +1775,7 @@ is_in_list (prefix, list)\n #endif\n \n /* Added for debugging purpose.  */\n+#ifdef COLLECT_EXPORT_LIST\n static void\n dump_list (stream, prefix, list)\n      FILE *stream;\n@@ -1787,7 +1788,9 @@ dump_list (stream, prefix, list)\n       list = list->next;\n     }\n }\n+#endif\n \n+#if 0\n static void\n dump_prefix_list (stream, prefix, list)\n      FILE *stream;\n@@ -1800,6 +1803,7 @@ dump_prefix_list (stream, prefix, list)\n       list = list->next;\n     }\n }\n+#endif\n \n static void\n write_list_with_asm (stream, prefix, list)"}, {"sha": "2270c62a8bce829b712886a1f119c4ba62dbc919", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -36,6 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"expr.h\"\n #include \"recog.h\"\n+#include \"toplev.h\"\n \n /* 1 if the caller has placed an \"unimp\" insn immediately after the call.\n    This is used in v8 code when calling a function that returns a structure.\n@@ -400,7 +401,7 @@ fp_zero_operand (op)\n int\n intreg_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (register_operand (op, SImode)\n \t  || (TARGET_ARCH64 && register_operand (op, DImode)));\n@@ -520,7 +521,7 @@ symbolic_operand (op, mode)\n int\n symbolic_memory_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == SUBREG)\n     op = SUBREG_REG (op);\n@@ -551,7 +552,7 @@ label_ref_operand (op, mode)\n int\n sp64_medium_pic_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   /* Check for (const (minus (symbol_ref:GOT)\n                              (const (minus (label) (pc))))).  */\n@@ -578,7 +579,7 @@ sp64_medium_pic_operand (op, mode)\n int\n data_segment_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -600,7 +601,7 @@ data_segment_operand (op, mode)\n int\n text_segment_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -686,7 +687,7 @@ move_operand (op, mode)\n int\n splittable_symbolic_memory_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != MEM)\n     return 0;\n@@ -698,7 +699,7 @@ splittable_symbolic_memory_operand (op, mode)\n int\n splittable_immediate_memory_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != MEM)\n     return 0;\n@@ -712,7 +713,7 @@ splittable_immediate_memory_operand (op, mode)\n int\n eq_or_neq (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == EQ || GET_CODE (op) == NE);\n }\n@@ -723,7 +724,7 @@ eq_or_neq (op, mode)\n int\n normal_comp_operator (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   enum rtx_code code = GET_CODE (op);\n \n@@ -743,7 +744,7 @@ normal_comp_operator (op, mode)\n int\n noov_compare_op (op, mode)\n     register rtx op;\n-    enum machine_mode mode;\n+    enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   enum rtx_code code = GET_CODE (op);\n \n@@ -762,7 +763,7 @@ noov_compare_op (op, mode)\n int\n v9_regcmp_op (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   enum rtx_code code = GET_CODE (op);\n \n@@ -775,7 +776,7 @@ v9_regcmp_op (op, mode)\n int\n v8plus_regcmp_op (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   enum rtx_code code = GET_CODE (op);\n \n@@ -787,7 +788,7 @@ v8plus_regcmp_op (op, mode)\n int\n extend_op (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return GET_CODE (op) == SIGN_EXTEND || GET_CODE (op) == ZERO_EXTEND;\n }\n@@ -799,7 +800,7 @@ extend_op (op, mode)\n int\n cc_arithop (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == AND\n       || GET_CODE (op) == IOR\n@@ -815,7 +816,7 @@ cc_arithop (op, mode)\n int\n cc_arithopn (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   /* XOR is not here because combine canonicalizes (xor (not ...) ...)\n      and (xor ... (not ...)) to (not (xor ...)).   */\n@@ -947,7 +948,7 @@ arith10_double_operand (op, mode)\n int\n small_int (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT && SMALL_INT (op));\n }\n@@ -959,7 +960,7 @@ small_int (op, mode)\n int\n uns_small_int (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n #if HOST_BITS_PER_WIDE_INT > 32\n   /* All allowed constants will fit a CONST_INT.  */\n@@ -986,7 +987,7 @@ uns_arith_operand (op, mode)\n int\n clobbered_register (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == REG && call_used_regs[REGNO (op)]);\n }\n@@ -1433,7 +1434,7 @@ pic_address_needs_scratch (x)\n rtx\n legitimize_pic_address (orig, mode, reg)\n      rtx orig;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n      rtx reg;\n {\n   if (GET_CODE (orig) == SYMBOL_REF)\n@@ -4669,9 +4670,6 @@ sparc_builtin_saveregs (arglist)\n      tree arglist;\n {\n   tree fntype = TREE_TYPE (current_function_decl);\n-  int stdarg = (TYPE_ARG_TYPES (fntype) != 0\n-\t\t&& (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-\t\t    != void_type_node));\n   int first_reg = current_function_args_info.words;\n   rtx address;\n   int regno;\n@@ -6801,7 +6799,7 @@ sparc_return_peephole_ok (dest, src)\n int\n delay_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {"}, {"sha": "2add5214ec9d17880e8d86b57e81dffbdf0317bf", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -3207,6 +3207,7 @@ extern char *singlemove_string ();\n \n extern void emit_v9_brxx_insn ();\n extern void finalize_pic ();\n+extern void order_regs_for_local_alloc ();\n extern void output_double_int ();\n extern void output_function_epilogue ();\n extern void output_function_prologue ();\n@@ -3228,6 +3229,7 @@ extern int check_pic ();\n extern int compute_frame_size ();\n extern int data_segment_operand ();\n extern int eligible_for_epilogue_delay ();\n+extern int eligible_for_return_delay ();\n extern int emit_move_sequence ();\n extern int extend_op ();\n extern int fcc_reg_operand ();\n@@ -3249,6 +3251,7 @@ extern int small_int ();\n extern int sp64_medium_pic_operand ();\n extern int sparc_flat_eligible_for_epilogue_delay ();\n extern int sparc_flat_epilogue_delay_slots ();\n+extern int sparc_issue_rate ();\n extern int sparc_operand ();\n extern int splittable_immediate_memory_operand ();\n extern int splittable_symbolic_memory_operand ();\n@@ -3258,6 +3261,7 @@ extern int symbolic_operand ();\n extern int text_segment_operand ();\n extern int ultrasparc_adjust_cost ();\n extern int uns_small_int ();\n+extern int v8plus_regcmp_p ();\n extern int v9_regcmp_op ();\n extern int v9_regcmp_p ();\n "}, {"sha": "683bcfd55f8a41568efb1ec481ce8d3df9ee95e1", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -567,6 +567,8 @@\n       if (sparc_check_64 (operands[1], insn) <= 0)\n \toutput_asm_insn (\\\"srl %L1,0,%L1\\\", operands);\n       return \\\"sllx %H1,32,%3\\;or %L0,%2,%2\\;or %L1,%3,%3\\;cmp %2,%3\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"length\" \"3,4,7\")])"}, {"sha": "bd3a6051971610cb8caaba78db6ccddc72edd3fb", "filename": "gcc/cppalloc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcppalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcppalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppalloc.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -24,6 +24,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"gansidecl.h\"\n #include \"cpplib.h\"\n \n static void"}, {"sha": "fdd08195c2985e40669cd3ea6c5edfbcba6d389d", "filename": "gcc/cpperror.c", "status": "modified", "additions": 55, "deletions": 13, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -24,13 +24,21 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #ifndef EMACS\n #include \"config.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n+#include \"gansidecl.h\"\n #else\n #include <stdio.h>\n #endif /* not EMACS */\n \n #include \"cpplib.h\"\n \n+static void v_cpp_message PROTO ((cpp_reader *, int, const char *, va_list));\n+\n /* Print the file names and line numbers of the #include\n    commands which led to the current file.  */\n \n@@ -79,7 +87,7 @@ cpp_print_containing_files (pfile)\n \n void\n cpp_file_line_for_message (pfile, filename, line, column)\n-     cpp_reader *pfile;\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n      char *filename;\n      int line, column;\n {\n@@ -92,41 +100,75 @@ cpp_file_line_for_message (pfile, filename, line, column)\n /* IS_ERROR is 2 for \"fatal\" error, 1 for error, 0 for warning */\n \n void\n-cpp_message (pfile, is_error, msg, arg1, arg2, arg3)\n-     int is_error;\n-     cpp_reader *pfile;\n-     char *msg;\n-     char *arg1, *arg2, *arg3;\n+v_cpp_message (pfile, is_error, msg, ap)\n+  cpp_reader * pfile;\n+  int is_error;\n+  const char *msg;\n+  va_list ap;\n {\n   if (!is_error)\n     fprintf (stderr, \"warning: \");\n   else if (is_error == 2)\n     pfile->errors = CPP_FATAL_LIMIT;\n   else if (pfile->errors < CPP_FATAL_LIMIT)\n     pfile->errors++;\n-  fprintf (stderr, msg, arg1, arg2, arg3);\n+  vfprintf (stderr, msg, ap);\n   fprintf (stderr, \"\\n\");\n }\n \n+void\n+cpp_message VPROTO ((cpp_reader *pfile, int is_error, const char *msg, ...))\n+{\n+#ifndef __STDC__\n+  cpp_reader *pfile;\n+  int is_error;\n+  const char *msg;\n+#endif\n+  va_list ap;\n+  \n+  VA_START (ap, msg);\n+  \n+#ifndef __STDC__\n+  pfile = va_arg (ap, cpp_reader *);\n+  is_error = va_arg (ap, int);\n+  msg = va_arg (ap, const char *);\n+#endif\n+\n+  v_cpp_message(pfile, is_error, msg, ap);\n+  va_end(ap);\n+}\n+\n /* Same as cpp_error, except we consider the error to be \"fatal\",\n    such as inconsistent options.  I.e. there is little point in continuing.\n    (We do not exit, to support use of cpplib as a library.\n    Instead, it is the caller's responsibility to check\n    CPP_FATAL_ERRORS.  */\n \n void\n-cpp_fatal (pfile, str, arg)\n-     cpp_reader *pfile;\n-     char *str, *arg;\n-{\n+cpp_fatal VPROTO ((cpp_reader *pfile, const char *str, ...))\n+{  \n+#ifndef __STDC__\n+  cpp_reader *pfile;\n+  const char *str;\n+#endif\n+  va_list ap;\n+  \n+  VA_START (ap, str);\n+  \n+#ifndef __STDC__\n+  pfile = va_arg (ap, cpp_reader *);\n+  str = va_arg (ap, const char *);\n+#endif\n+\n   fprintf (stderr, \"%s: \", progname);\n-  cpp_message (pfile, 2, str, arg);\n+  v_cpp_message (pfile, 2, str, ap);\n+  va_end(ap);\n }\n \f\n void\n cpp_pfatal_with_name (pfile, name)\n      cpp_reader *pfile;\n-     char *name;\n+     const char *name;\n {\n   cpp_perror_with_name (pfile, name);\n #ifdef VMS"}, {"sha": "44f8a66547c89f2b8498814c31a74a92ca8ec6ef", "filename": "gcc/cppexp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -26,8 +26,8 @@ Written by Per Bothner 1994.  */\n    \n #include \"config.h\"\n #include \"system.h\"\n-#include \"cpplib.h\"\n #include \"gansidecl.h\"\n+#include \"cpplib.h\"\n \n extern char *xmalloc PARAMS ((unsigned));\n extern char *xrealloc PARAMS ((void *, unsigned));"}, {"sha": "6aa9e9c7c12b17cec2675e33066a3d4473e1eb04", "filename": "gcc/cpphash.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -24,9 +24,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"gansidecl.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n-#include \"gansidecl.h\"\n \n extern char *xmalloc PARAMS ((unsigned));\n "}, {"sha": "2b0668d3eb210a88615d61982bfbe9c168b69aa5", "filename": "gcc/cpphash.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -36,3 +36,5 @@ static HASHNODE *hashtab[HASHSIZE];\n #define MAKE_POS(v) (v & 0x7fffffff) /* make number positive */\n \n extern HASHNODE *install PARAMS ((U_CHAR *,int,enum node_type, int,char *,int));\n+extern int hashf PARAMS ((const U_CHAR *, int, int));\n+extern void delete_macro PARAMS ((HASHNODE *));"}, {"sha": "884bda1990854a6a6b8d94c088231a24271dfd74", "filename": "gcc/cpplib.c", "status": "modified", "additions": 287, "deletions": 152, "changes": 439, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -19,6 +19,11 @@ along with this program; if not, write to the Free Software\n Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n \n #ifndef STDC_VALUE\n@@ -35,15 +40,15 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n # include <sys/resource.h>\n #endif\n \n+#include \"gansidecl.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n-#include \"gansidecl.h\"\n \n #ifndef GET_ENVIRONMENT\n #define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ENV_VALUE = getenv (ENV_NAME)\n #endif\n \n-extern char *update_path ();\n+extern char *update_path PARAMS ((char *, char *));\n \n #undef MIN\n #undef MAX\n@@ -196,52 +201,56 @@ struct cpp_pending {\n /* Forward declarations.  */\n \n char *xmalloc ();\n-void cpp_fatal ();\n-void cpp_file_line_for_message PARAMS ((char *, int, int));\n-void cpp_hash_cleanup PARAMS ((cpp_reader *));\n-void cpp_message ();\n-void cpp_print_containing_files PARAMS ((cpp_reader *));\n-\n-static void add_import ();\n-static void append_include_chain ();\n-static void make_assertion ();\n-static void path_include ();\n-static void initialize_builtins ();\n-static void initialize_char_syntax ();\n-extern void delete_macro ();\n+extern void cpp_hash_cleanup PARAMS ((cpp_reader *));\n+extern void v_cpp_message PROTO ((cpp_reader *, int, const char *, va_list));\n+\n+static void add_import\t\t\tPROTO ((cpp_reader *, int, char *));\n+static void append_include_chain\tPROTO ((cpp_reader *,\n+\t\t\t\t\t\tstruct file_name_list *,\n+\t\t\t\t\t\tstruct file_name_list *));\n+static void make_assertion\t\tPROTO ((cpp_reader *, char *, U_CHAR *));\n+static void path_include\t\tPROTO ((cpp_reader *, char *));\n+static void initialize_builtins\t\tPROTO ((cpp_reader *));\n+static void initialize_char_syntax\tPROTO ((struct cpp_options *));\n #if 0\n static void trigraph_pcp ();\n #endif\n-static int finclude ();\n-static void validate_else ();\n-static int comp_def_part ();\n+static int finclude\t\t\tPROTO ((cpp_reader *, int, char *,\n+\t\t\t\t\t\tint, struct file_name_list *));\n+static void validate_else\t\tPROTO ((cpp_reader *, char *));\n+static int comp_def_part\t\tPROTO ((int, U_CHAR *, int, U_CHAR *,\n+\t\t\t\t\t\tint, int));\n #ifdef abort\n extern void fancy_abort ();\n #endif\n-static int lookup_import ();\n-static int redundant_include_p ();\n-static int is_system_include ();\n-static struct file_name_map *read_name_map ();\n-static char *read_filename_string ();\n-static int open_include_file ();\n-static int check_macro_name ();\n-static int compare_defs ();\n-static int compare_token_lists ();\n-static HOST_WIDE_INT eval_if_expression ();\n-static int change_newlines ();\n-extern int hashf ();\n-static struct arglist *read_token_list ();\n-static void free_token_list ();\n-static int safe_read ();\n+static int lookup_import\t\tPROTO ((cpp_reader *, char *,\n+\t\t\t\t\t\tstruct file_name_list *));\n+static int redundant_include_p\t\tPROTO ((cpp_reader *, char *));\n+static int is_system_include\t\tPROTO ((cpp_reader *, char *));\n+static struct file_name_map *read_name_map\tPROTO ((cpp_reader *, char *));\n+static char *read_filename_string\tPROTO ((int, FILE *));\n+static int open_include_file\t\tPROTO ((cpp_reader *, char *,\n+\t\t\t\t\t\tstruct file_name_list *));\n+static int check_macro_name\t\tPROTO ((cpp_reader *, U_CHAR *, char *));\n+static int compare_defs\t\t\tPROTO ((cpp_reader *,\n+\t\t\t\t\t\tDEFINITION *, DEFINITION *));\n+static int compare_token_lists\t\tPROTO ((struct arglist *,\n+\t\t\t\t\t\tstruct arglist *));\n+static HOST_WIDE_INT eval_if_expression\tPROTO ((cpp_reader *, U_CHAR *, int));\n+static int change_newlines\t\tPROTO ((U_CHAR *, int));\n+static struct arglist *read_token_list\tPROTO ((cpp_reader *, int *));\n+static void free_token_list\t\tPROTO ((struct arglist *));\n+static int safe_read\t\t\tPROTO ((int, char *, int));\n static void push_macro_expansion PARAMS ((cpp_reader *,\n \t\t\t\t\t  U_CHAR *, int, HASHNODE *));\n static struct cpp_pending *nreverse_pending PARAMS ((struct cpp_pending *));\n extern char *xrealloc ();\n-static char *xcalloc ();\n-static char *savestring ();\n+static char *xcalloc\t\t\tPROTO ((unsigned, unsigned));\n+static char *savestring\t\t\tPROTO ((char *));\n \n-static void conditional_skip ();\n-static void skip_if_group ();\n+static void conditional_skip\t\tPROTO ((cpp_reader *, int,\n+\t\t\t\t\t       enum node_type, U_CHAR *));\n+static void skip_if_group\t\tPROTO ((cpp_reader *, int));\n static int parse_name PARAMS ((cpp_reader *, int));\n \n /* Last arg to output_line_command.  */\n@@ -251,33 +260,8 @@ enum file_change_code {same_file, enter_file, leave_file};\n \n extern HOST_WIDE_INT cpp_parse_expr PARAMS ((cpp_reader *));\n \n-extern FILE *fdopen ();\n extern char *version_string;\n extern struct tm *localtime ();\n-\n-/* These functions are declared to return int instead of void since they\n-   are going to be placed in a table and some old compilers have trouble with\n-   pointers to functions returning void.  */\n-\n-static int do_define ();\n-static int do_line ();\n-static int do_include ();\n-static int do_undef ();\n-static int do_error ();\n-static int do_pragma ();\n-static int do_ident ();\n-static int do_if ();\n-static int do_xifdef ();\n-static int do_else ();\n-static int do_elif ();\n-static int do_endif ();\n-#ifdef SCCS_DIRECTIVE\n-static int do_sccs ();\n-#endif\n-static int do_once ();\n-static int do_assert ();\n-static int do_unassert ();\n-static int do_warning ();\n \f\n struct file_name_list\n   {\n@@ -360,12 +344,37 @@ static struct default_include {\n \n struct directive {\n   int length;\t\t\t/* Length of name */\n-  int (*func)();\t\t/* Function to handle directive */\n+  int (*func)\t\t\t/* Function to handle directive */\n+    PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n   char *name;\t\t\t/* Name of directive */\n   enum node_type type;\t\t/* Code which describes which directive.  */\n   char command_reads_line;      /* One if rest of line is read by func.  */\n };\n \n+/* These functions are declared to return int instead of void since they\n+   are going to be placed in a table and some old compilers have trouble with\n+   pointers to functions returning void.  */\n+\n+static int do_define PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_line PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_include PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_undef PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_error PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_pragma PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_ident PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_if PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_xifdef PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_else PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_elif PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_endif PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+#ifdef SCCS_DIRECTIVE\n+static int do_sccs PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+#endif\n+static int do_once PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_assert PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_unassert PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+static int do_warning PARAMS ((cpp_reader *, struct directive *, U_CHAR *, U_CHAR *));\n+\n #define IS_INCLUDE_DIRECTIVE_TYPE(t) \\\n ((int) T_INCLUDE <= (int) (t) && (int) (t) <= (int) T_IMPORT)\n \n@@ -993,7 +1002,7 @@ handle_directive (pfile)\n       /* Handle # followed by a line number.  */\n       if (CPP_PEDANTIC (pfile))\n \tcpp_pedwarn (pfile, \"`#' followed by integer\");\n-      do_line (pfile, NULL);\n+      do_line (pfile, NULL, NULL, NULL);\n       goto done_a_directive;\n     }\n \n@@ -3050,7 +3059,7 @@ static int\n do_include (pfile, keyword, unused1, unused2)\n      cpp_reader *pfile;\n      struct directive *keyword;\n-     U_CHAR *unused1, *unused2;\n+     U_CHAR *unused1 ATTRIBUTE_UNUSED, *unused2 ATTRIBUTE_UNUSED;\n {\n   int importing = (keyword->type == T_IMPORT);\n   int skip_dirs = (keyword->type == T_INCLUDE_NEXT);\n@@ -3671,9 +3680,10 @@ convert_string (pfile, result, in, limit, handle_escapes)\n #define FNAME_HASHSIZE 37\n \n static int\n-do_line (pfile, keyword)\n+do_line (pfile, keyword, unused1, unused2)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n+     U_CHAR *unused1 ATTRIBUTE_UNUSED, *unused2 ATTRIBUTE_UNUSED;\n {\n   cpp_buffer *ip = CPP_BUFFER (pfile);\n   int new_lineno;\n@@ -3848,7 +3858,7 @@ do_undef (pfile, keyword, buf, limit)\n static int\n do_error (pfile, keyword, buf, limit)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n      U_CHAR *buf, *limit;\n {\n   int length = limit - buf;\n@@ -3869,7 +3879,7 @@ do_error (pfile, keyword, buf, limit)\n static int\n do_warning (pfile, keyword, buf, limit)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n      U_CHAR *buf, *limit;\n {\n   int length = limit - buf;\n@@ -3879,7 +3889,7 @@ do_warning (pfile, keyword, buf, limit)\n   SKIP_WHITE_SPACE (copy);\n \n   if (CPP_PEDANTIC (pfile) && !CPP_BUFFER (pfile)->system_header_p)\n-    cpp_pedwarn (\"ANSI C does not allow `#warning'\");\n+    cpp_pedwarn (pfile, \"ANSI C does not allow `#warning'\");\n \n   /* Use `pedwarn' not `warning', because #warning isn't in the C Standard;\n      if -pedantic-errors is given, #warning should cause an error.  */\n@@ -3891,8 +3901,10 @@ do_warning (pfile, keyword, buf, limit)\n    avoid ever including it again.  */\n \n static int\n-do_once (pfile)\n+do_once (pfile, keyword, unused1, unused2)\n      cpp_reader *pfile;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n+     U_CHAR *unused1 ATTRIBUTE_UNUSED, *unused2 ATTRIBUTE_UNUSED;\n {\n   cpp_buffer *ip = NULL;\n   struct file_name_list *new;\n@@ -3922,8 +3934,8 @@ do_once (pfile)\n static int\n do_ident (pfile, keyword, buf, limit)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n-     U_CHAR *buf, *limit;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n+     U_CHAR *buf ATTRIBUTE_UNUSED, *limit ATTRIBUTE_UNUSED;\n {\n /*  long old_written = CPP_WRITTEN (pfile);*/\n \n@@ -3942,8 +3954,8 @@ do_ident (pfile, keyword, buf, limit)\n static int\n do_pragma (pfile, keyword, buf, limit)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n-     U_CHAR *buf, *limit;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n+     U_CHAR *buf, *limit ATTRIBUTE_UNUSED;\n {\n   while (*buf == ' ' || *buf == '\\t')\n     buf++;\n@@ -3952,7 +3964,7 @@ do_pragma (pfile, keyword, buf, limit)\n        fault.  */\n     if (!CPP_BUFFER (pfile)->system_header_p)\n       cpp_warning (pfile, \"`#pragma once' is obsolete\");\n-    do_once (pfile);\n+    do_once (pfile, NULL, NULL, NULL);\n   }\n \n   if (!strncmp (buf, \"implementation\", 14)) {\n@@ -4015,8 +4027,8 @@ do_pragma ()\n static int\n do_sccs (pfile, keyword, buf, limit)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n-     U_CHAR *buf, *limit;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n+     U_CHAR *buf ATTRIBUTE_UNUSED, *limit ATTRIBUTE_UNUSED;\n {\n   if (CPP_PEDANTIC (pfile))\n     cpp_pedwarn (pfile, \"ANSI C does not allow `#sccs'\");\n@@ -4040,7 +4052,7 @@ do_sccs (pfile, keyword, buf, limit)\n static int\n do_if (pfile, keyword, buf, limit)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n      U_CHAR *buf, *limit;\n {\n   HOST_WIDE_INT value = eval_if_expression (pfile, buf, limit - buf);\n@@ -4056,7 +4068,7 @@ do_if (pfile, keyword, buf, limit)\n static int\n do_elif (pfile, keyword, buf, limit)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n      U_CHAR *buf, *limit;\n {\n   if (pfile->if_stack == CPP_BUFFER (pfile)->if_stack) {\n@@ -4099,8 +4111,8 @@ do_elif (pfile, keyword, buf, limit)\n static HOST_WIDE_INT\n eval_if_expression (pfile, buf, length)\n      cpp_reader *pfile;\n-     U_CHAR *buf;\n-     int length;\n+     U_CHAR *buf ATTRIBUTE_UNUSED;\n+     int length ATTRIBUTE_UNUSED;\n {\n   HASHNODE *save_defined;\n   HOST_WIDE_INT value;\n@@ -4128,7 +4140,7 @@ static int\n do_xifdef (pfile, keyword, unused1, unused2)\n      cpp_reader *pfile;\n      struct directive *keyword;\n-     U_CHAR *unused1, *unused2;\n+     U_CHAR *unused1 ATTRIBUTE_UNUSED, *unused2 ATTRIBUTE_UNUSED;\n {\n   int skip;\n   cpp_buffer *ip = CPP_BUFFER (pfile);\n@@ -4408,8 +4420,8 @@ skip_if_group (pfile, any)\n static int\n do_else (pfile, keyword, buf, limit)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n-     U_CHAR *buf, *limit;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n+     U_CHAR *buf ATTRIBUTE_UNUSED, *limit ATTRIBUTE_UNUSED;\n {\n   cpp_buffer *ip = CPP_BUFFER (pfile);\n \n@@ -4451,8 +4463,8 @@ do_else (pfile, keyword, buf, limit)\n static int\n do_endif (pfile, keyword, buf, limit)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n-     U_CHAR *buf, *limit;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n+     U_CHAR *buf ATTRIBUTE_UNUSED, *limit ATTRIBUTE_UNUSED;\n {\n   if (CPP_PEDANTIC (pfile))\n     validate_else (pfile, \"#endif\");\n@@ -5219,7 +5231,7 @@ parse_name (pfile, c)\n       }\n \n       if (c == '$' && CPP_PEDANTIC (pfile))\n-\tcpp_pedwarn (\"`$' in identifier\");\n+\tcpp_pedwarn (pfile, \"`$' in identifier\");\n \n       CPP_RESERVE(pfile, 2); /* One more for final NUL.  */\n       CPP_PUTC_Q (pfile, c);\n@@ -6635,7 +6647,7 @@ cpp_handle_options (pfile, argc, argv)\n \t  push_pending (pfile, \"-U\", argv[i] + 2);\n \telse if (i + 1 == argc)\n \t  {\n-\t    cpp_fatal (pfile, \"Macro name missing after -U option\", NULL);\n+\t    cpp_fatal (pfile, \"Macro name missing after -U option\");\n \t    return argc;\n \t  }\n \telse\n@@ -6829,8 +6841,8 @@ cpp_cleanup (pfile)\n static int\n do_assert (pfile, keyword, buf, limit)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n-     U_CHAR *buf, *limit;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n+     U_CHAR *buf ATTRIBUTE_UNUSED, *limit ATTRIBUTE_UNUSED;\n {\n   long symstart;\t\t/* remember where symbol name starts */\n   int c;\n@@ -6902,8 +6914,8 @@ do_assert (pfile, keyword, buf, limit)\n static int\n do_unassert (pfile, keyword, buf, limit)\n      cpp_reader *pfile;\n-     struct directive *keyword;\n-     U_CHAR *buf, *limit;\n+     struct directive *keyword ATTRIBUTE_UNUSED;\n+     U_CHAR *buf ATTRIBUTE_UNUSED, *limit ATTRIBUTE_UNUSED;\n {\n   long symstart;\t\t/* remember where symbol name starts */\n   int sym_length;\t/* and how long it is */\n@@ -7316,29 +7328,49 @@ cpp_print_file_and_line (pfile)\n     {\n       long line, col;\n       cpp_buf_line_and_col (ip, &line, &col);\n-      cpp_file_line_for_message (ip->nominal_fname,\n+      cpp_file_line_for_message (pfile, ip->nominal_fname,\n \t\t\t\t line, pfile->show_column ? col : -1);\n     }\n }\n \n-void\n-cpp_error (pfile, msg, arg1, arg2, arg3)\n-     cpp_reader *pfile;\n-     char *msg;\n-     char *arg1, *arg2, *arg3;\n+static void\n+v_cpp_error (pfile, msg, ap)\n+  cpp_reader *pfile;\n+  const char *msg;\n+  va_list ap;\n {\n   cpp_print_containing_files (pfile);\n   cpp_print_file_and_line (pfile);\n-  cpp_message (pfile, 1, msg, arg1, arg2, arg3);\n+  v_cpp_message (pfile, 1, msg, ap);\n+}\n+\n+void\n+cpp_error VPROTO ((cpp_reader * pfile, const char *msg, ...))\n+{\n+#ifndef __STDC__\n+  cpp_reader *pfile;\n+  const char *msg;\n+#endif\n+  va_list ap;\n+\n+  VA_START(ap, msg);\n+  \n+#ifndef __STDC__\n+  pfile = va_arg (ap, cpp_reader *);\n+  msg = va_arg (ap, const char *);\n+#endif\n+\n+  v_cpp_error (pfile, msg, ap);\n+  va_end(ap);\n }\n \n /* Print error message but don't count it.  */\n \n-void\n-cpp_warning (pfile, msg, arg1, arg2, arg3)\n-     cpp_reader *pfile;\n-     char *msg;\n-     char *arg1, *arg2, *arg3;\n+static void\n+v_cpp_warning (pfile, msg, ap)\n+  cpp_reader *pfile;\n+  const char *msg;\n+  va_list ap;\n {\n   if (CPP_OPTIONS (pfile)->inhibit_warnings)\n     return;\n@@ -7348,46 +7380,103 @@ cpp_warning (pfile, msg, arg1, arg2, arg3)\n \n   cpp_print_containing_files (pfile);\n   cpp_print_file_and_line (pfile);\n-  cpp_message (pfile, 0, msg, arg1, arg2, arg3);\n+  v_cpp_message (pfile, 0, msg, ap);\n+}\n+\n+void\n+cpp_warning VPROTO ((cpp_reader * pfile, const char *msg, ...))\n+{\n+#ifndef __STDC__\n+  cpp_reader *pfile;\n+  const char *msg;\n+#endif\n+  va_list ap;\n+  \n+  VA_START (ap, msg);\n+  \n+#ifndef __STDC__\n+  pfile = va_arg (ap, cpp_reader *);\n+  msg = va_arg (ap, const char *);\n+#endif\n+\n+  v_cpp_warning (pfile, msg, ap);\n+  va_end(ap);\n }\n \n /* Print an error message and maybe count it.  */\n \n void\n-cpp_pedwarn (pfile, msg, arg1, arg2, arg3)\n-     cpp_reader *pfile;\n-     char *msg;\n-     char *arg1, *arg2, *arg3;\n+cpp_pedwarn VPROTO ((cpp_reader * pfile, const char *msg, ...))\n {\n+#ifndef __STDC__\n+  cpp_reader *pfile;\n+  const char *msg;\n+#endif\n+  va_list ap;\n+  \n+  VA_START (ap, msg);\n+  \n+#ifndef __STDC__\n+  pfile = va_arg (ap, cpp_reader *);\n+  msg = va_arg (ap, const char *);\n+#endif\n+\n   if (CPP_OPTIONS (pfile)->pedantic_errors)\n-    cpp_error (pfile, msg, arg1, arg2, arg3);\n+    v_cpp_error (pfile, msg, ap);\n   else\n-    cpp_warning (pfile, msg, arg1, arg2, arg3);\n+    v_cpp_warning (pfile, msg, ap);\n+  va_end(ap);\n }\n \n-void\n-cpp_error_with_line (pfile, line, column, msg, arg1, arg2, arg3)\n-     cpp_reader *pfile;\n-     int line, column;\n-     char *msg;\n-     char *arg1, *arg2, *arg3;\n+static void\n+v_cpp_error_with_line (pfile, line, column, msg, ap)\n+  cpp_reader * pfile;\n+  int line;\n+  int column;\n+  const char * msg;\n+  va_list ap;\n {\n   cpp_buffer *ip = cpp_file_buffer (pfile);\n \n   cpp_print_containing_files (pfile);\n \n   if (ip != NULL)\n-    cpp_file_line_for_message (ip->nominal_fname, line, column);\n+    cpp_file_line_for_message (pfile, ip->nominal_fname, line, column);\n \n-  cpp_message (pfile, 1, msg, arg1, arg2, arg3);\n+  v_cpp_message (pfile, 1, msg, ap);\n+}\n+\n+void\n+cpp_error_with_line VPROTO ((cpp_reader * pfile, int line, int column, const char *msg, ...))\n+{\n+#ifndef __STDC__\n+  cpp_reader *pfile;\n+  int line;\n+  int column;\n+  const char *msg;\n+#endif\n+  va_list ap;\n+  \n+  VA_START (ap, msg);\n+  \n+#ifndef __STDC__\n+  pfile = va_arg (ap, cpp_reader *);\n+  line = va_arg (ap, int);\n+  column = va_arg (ap, int);\n+  msg = va_arg (ap, const char *);\n+#endif\n+\n+  v_cpp_error_with_line(pfile, line, column, msg, ap);\n+  va_end(ap);\n }\n \n static void\n-cpp_warning_with_line (pfile, line, column, msg, arg1, arg2, arg3)\n-     cpp_reader *pfile;\n-     int line, column;\n-     char *msg;\n-     char *arg1, *arg2, *arg3;\n+v_cpp_warning_with_line (pfile, line, column, msg, ap)\n+  cpp_reader * pfile;\n+  int line;\n+  int column;\n+  const char *msg;\n+  va_list ap;\n {\n   cpp_buffer *ip;\n \n@@ -7402,50 +7491,96 @@ cpp_warning_with_line (pfile, line, column, msg, arg1, arg2, arg3)\n   ip = cpp_file_buffer (pfile);\n \n   if (ip != NULL)\n-    cpp_file_line_for_message (ip->nominal_fname, line, column);\n+    cpp_file_line_for_message (pfile, ip->nominal_fname, line, column);\n \n-  cpp_message (pfile, 0, msg, arg1, arg2, arg3);\n+  v_cpp_message (pfile, 0, msg, ap);\n+}  \n+\n+#if 0\n+static void\n+cpp_warning_with_line VPROTO ((cpp_reader * pfile, int line, int column, const char *msg, ...))\n+{\n+#ifndef __STDC__\n+  cpp_reader *pfile;\n+  int line;\n+  int column;\n+  const char *msg;\n+#endif\n+  va_list ap;\n+  \n+  VA_START (ap, msg);\n+  \n+#ifndef __STDC__\n+  pfile = va_arg (ap, cpp_reader *);\n+  line = va_arg (ap, int);\n+  column = va_arg (ap, int);\n+  msg = va_arg (ap, const char *);\n+#endif\n+\n+  v_cpp_warning_with_line (pfile, line, column, msg, ap);\n+  va_end(ap);\n }\n+#endif\n \n void\n-cpp_pedwarn_with_line (pfile, line, column, msg, arg1, arg2, arg3)\n-     cpp_reader *pfile;\n-     int line, column;\n-     char *msg;\n-     char *arg1, *arg2, *arg3;\n+cpp_pedwarn_with_line VPROTO ((cpp_reader * pfile, int line, int column, const char *msg, ...))\n {\n+#ifndef __STDC__\n+  cpp_reader *pfile;\n+  int line;\n+  int column;\n+  const char *msg;\n+#endif\n+  va_list ap;\n+  \n+  VA_START (ap, msg);\n+  \n+#ifndef __STDC__\n+  pfile = va_arg (ap, cpp_reader *);\n+  line = va_arg (ap, int);\n+  column = va_arg (ap, int);\n+  msg = va_arg (ap, const char *);\n+#endif\n+\n   if (CPP_OPTIONS (pfile)->pedantic_errors)\n-    cpp_error_with_line (pfile, column, line, msg, arg1, arg2, arg3);\n+    v_cpp_error_with_line (pfile, column, line, msg, ap);\n   else\n-    cpp_warning_with_line (pfile, line, column, msg, arg1, arg2, arg3);\n+    v_cpp_warning_with_line (pfile, line, column, msg, ap);\n+  va_end(ap);\n }\n \n /* Report a warning (or an error if pedantic_errors)\n    giving specified file name and line number, not current.  */\n \n void\n-cpp_pedwarn_with_file_and_line (pfile, file, line, msg, arg1, arg2, arg3)\n-     cpp_reader *pfile;\n-     char *file;\n-     int line;\n-     char *msg;\n-     char *arg1, *arg2, *arg3;\n+cpp_pedwarn_with_file_and_line VPROTO ((cpp_reader *pfile, char *file, int line, const char *msg, ...))\n {\n+#ifndef __STDC__\n+  cpp_reader *pfile;\n+  char *file;\n+  int line;\n+  const char *msg;\n+#endif\n+  va_list ap;\n+  \n+  VA_START (ap, msg);\n+\n+#ifndef __STDC__\n+  pfile = va_arg (ap, cpp_reader *);\n+  file = va_arg (ap, char *);\n+  line = va_arg (ap, int);\n+  msg = va_arg (ap, const char *);\n+#endif\n+\n   if (!CPP_OPTIONS (pfile)->pedantic_errors\n       && CPP_OPTIONS (pfile)->inhibit_warnings)\n     return;\n   if (file != NULL)\n-    cpp_file_line_for_message (file, line, -1);\n-  cpp_message (pfile, CPP_OPTIONS (pfile)->pedantic_errors,\n-\t       msg, arg1, arg2, arg3);\n+    cpp_file_line_for_message (pfile, file, line, -1);\n+  v_cpp_message (pfile, CPP_OPTIONS (pfile)->pedantic_errors, msg, ap);\n+  va_end(ap);\n }\n \n-/* This defines \"errno\" properly for VMS, and gives us EACCES.  */\n-#include <errno.h>\n-#ifndef errno\n-extern int errno;\n-#endif\n-\n #ifndef VMS\n #ifndef HAVE_STRERROR\n extern int sys_nerr;\n@@ -7494,23 +7629,23 @@ my_strerror (errnum)\n void\n cpp_error_from_errno (pfile, name)\n      cpp_reader *pfile;\n-     char *name;\n+     const char *name;\n {\n   int e = errno;\n   cpp_buffer *ip = cpp_file_buffer (pfile);\n \n   cpp_print_containing_files (pfile);\n \n   if (ip != NULL)\n-    cpp_file_line_for_message (ip->nominal_fname, ip->lineno, -1);\n+    cpp_file_line_for_message (pfile, ip->nominal_fname, ip->lineno, -1);\n \n   cpp_message (pfile, 1, \"%s: %s\", name, my_strerror (e));\n }\n \n void\n cpp_perror_with_name (pfile, name)\n      cpp_reader *pfile;\n-     char *name;\n+     const char *name;\n {\n   cpp_message (pfile, 1, \"%s: %s: %s\", progname, name, my_strerror (errno));\n }"}, {"sha": "49fcc737f053044ff18152c32fcf27b0f40a589f", "filename": "gcc/cpplib.h", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -69,11 +69,7 @@ enum cpp_token {\n };\n \n #ifndef PARAMS\n-#ifdef __STDC__\n-#define PARAMS(P) P\n-#else\n-#define PARAMS(P) ()\n-#endif\n+#define PARAMS(P) PROTO(P)\n #endif /* !PARAMS */\n \n typedef enum cpp_token (*parse_underflow_t) PARAMS((cpp_reader *));\n@@ -644,16 +640,20 @@ extern void cpp_buf_line_and_col PARAMS((cpp_buffer *, long *, long *));\n extern cpp_buffer* cpp_file_buffer PARAMS((cpp_reader *));\n extern void cpp_define PARAMS ((cpp_reader*, unsigned char *));\n \n-extern void cpp_error ();\n-extern void cpp_warning ();\n-extern void cpp_pedwarn ();\n-extern void cpp_error_with_line ();\n-extern void cpp_pedwarn_with_line ();\n-extern void cpp_pedwarn_with_file_and_line ();\n-extern void fatal ();\n-extern void cpp_error_from_errno ();\n-extern void cpp_perror_with_name ();\n-extern void cpp_pfatal_with_name ();\n+extern void cpp_error PVPROTO ((cpp_reader *, const char *, ...))\n+  ATTRIBUTE_PRINTF_2;\n+extern void cpp_warning PVPROTO ((cpp_reader *, const char *, ...))\n+  ATTRIBUTE_PRINTF_2;\n+extern void cpp_pedwarn PVPROTO ((cpp_reader *, const char *, ...))\n+  ATTRIBUTE_PRINTF_2;\n+extern void cpp_error_with_line PVPROTO ((cpp_reader *, int, int, const char *, ...))\n+  ATTRIBUTE_PRINTF_4;\n+extern void cpp_pedwarn_with_line PVPROTO ((cpp_reader *, int, int, const char *, ...))\n+  ATTRIBUTE_PRINTF_4;\n+extern void cpp_pedwarn_with_file_and_line PVPROTO ((cpp_reader *, char *, int, const char *, ...))\n+  ATTRIBUTE_PRINTF_4;\n+extern void cpp_error_from_errno PROTO ((cpp_reader *, const char *));\n+extern void cpp_perror_with_name PROTO ((cpp_reader *, const char *));\n \n extern void cpp_grow_buffer PARAMS ((cpp_reader *, long));\n extern int cpp_parse_escape PARAMS ((cpp_reader *, char **));\n@@ -667,7 +667,18 @@ extern void cpp_reader_init PARAMS ((cpp_reader *));\n extern void cpp_options_init PARAMS ((cpp_options *));\n extern int cpp_start_read PARAMS ((cpp_reader *, char *));\n extern int cpp_read_check_assertion PARAMS ((cpp_reader *));\n+extern int scan_decls PARAMS ((cpp_reader *, int, char **));\n extern void skip_rest_of_line PARAMS ((cpp_reader *));\n+extern void cpp_finish PARAMS ((cpp_reader *));\n+\n+/* From cpperror.c */\n+extern void cpp_fatal PVPROTO ((cpp_reader *, const char *, ...))\n+  ATTRIBUTE_PRINTF_2;\n+extern void cpp_message PVPROTO ((cpp_reader *, int, const char *, ...))\n+  ATTRIBUTE_PRINTF_3;\n+extern void cpp_pfatal_with_name PROTO ((cpp_reader *, const char *));\n+extern void cpp_file_line_for_message PROTO ((cpp_reader *, char *, int, int));\n+extern void cpp_print_containing_files PROTO ((cpp_reader *));\n \n #ifdef __cplusplus\n }"}, {"sha": "c7fdf532997cf19161244a77e5a4669cbaf3ca5a", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -23,6 +23,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #ifndef EMACS\n #include \"config.h\"\n #include \"system.h\"\n+#include \"gansidecl.h\"\n #else\n #include <stdio.h>\n \n@@ -54,7 +55,6 @@ main (argc, argv)\n      char **argv;\n {\n   char *p;\n-  int i;\n   int argi = 1;  /* Next argument to handle.  */\n   struct cpp_options *opts = &options;\n "}, {"sha": "bc2e2bac455761aa9d8553352d73a478c09d8380", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -79,6 +79,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"defaults.h\"\n #include \"output.h\" /* ASM_OUTPUT_SOURCE_LINE may refer to sdb functions.  */\n #include \"dbxout.h\"\n+#include \"toplev.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\""}, {"sha": "1e1e705512ac220ea5bb278f99e164b57cdfb59e", "filename": "gcc/demangle.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdemangle.h?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -87,4 +87,22 @@ cplus_mangle_opname PARAMS ((const char *opname, int options));\n extern void\n set_cplus_marker_for_demangling PARAMS ((int ch));\n \n+extern void\n+do_tlink PARAMS ((char **, char **));\n+\n+extern void\n+collect_execute PARAMS ((char *, char **, char *));\n+\n+extern void\n+collect_exit PARAMS ((int));\n+\n+extern int\n+collect_wait PARAMS ((char *));\n+\n+extern void\n+dump_file PARAMS ((char *));\n+\n+extern int\n+file_exists PARAMS ((char *));\n+\n #endif\t/* DEMANGLE_H */"}, {"sha": "11229e6ae4458d3f8b10916664c679a4d1ec6d97", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -2373,7 +2373,9 @@ static char *dwarf_tag_name\t\tPROTO((unsigned));\n static char *dwarf_attr_name\t\tPROTO((unsigned));\n static char *dwarf_form_name\t\tPROTO((unsigned));\n static char *dwarf_stack_op_name\tPROTO((unsigned));\n+#if 0\n static char *dwarf_type_encoding_name\tPROTO((unsigned));\n+#endif\n static tree decl_ultimate_origin\tPROTO((tree));\n static tree block_ultimate_origin\tPROTO((tree));\n static tree decl_class_context\t\tPROTO((tree));\n@@ -2504,7 +2506,9 @@ static void add_type_attribute\t\tPROTO((dw_die_ref, tree, int, int,\n \t\t\t\t\t       dw_die_ref));\n static char *type_tag\t\t\tPROTO((tree));\n static tree member_declared_type\tPROTO((tree));\n+#if 0\n static char *decl_start_label\t\tPROTO((tree));\n+#endif\n static void gen_array_type_die\t\tPROTO((tree, dw_die_ref));\n static void gen_set_type_die\t\tPROTO((tree, dw_die_ref));\n #if 0\n@@ -3472,6 +3476,7 @@ dwarf_stack_op_name (op)\n \n /* Convert a DWARF type code into its string name.  */\n \n+#if 0\n static char *\n dwarf_type_encoding_name (enc)\n      register unsigned enc;\n@@ -3498,6 +3503,7 @@ dwarf_type_encoding_name (enc)\n       return \"DW_ATE_<unknown>\";\n     }\n }\n+#endif\n \f\n /* Determine the \"ultimate origin\" of a decl.  The decl may be an inlined\n    instance of an inlined instance of a decl which is local to an inline\n@@ -7728,6 +7734,7 @@ member_declared_type (member)\n /* Get the decl's label, as described by its RTL. This may be different\n    from the DECL_NAME name used in the source file.  */\n \n+#if 0\n static char *\n decl_start_label (decl)\n      register tree decl;\n@@ -7745,6 +7752,7 @@ decl_start_label (decl)\n   fnname = XSTR (x, 0);\n   return fnname;\n }\n+#endif\n \f\n /* These routines generate the internal representation of the DIE's for\n    the compilation unit.  Debugging information is collected by walking\n@@ -8049,8 +8057,7 @@ gen_unspecified_parameters_die (decl_or_type, context_die)\n      register tree decl_or_type;\n      register dw_die_ref context_die;\n {\n-  register dw_die_ref parm_die = new_die (DW_TAG_unspecified_parameters,\n-\t\t\t\t\t  context_die);\n+  new_die (DW_TAG_unspecified_parameters, context_die);\n }\n \n /* Generate a list of nameless DW_TAG_formal_parameter DIEs (and perhaps a\n@@ -9674,7 +9681,7 @@ dwarf2out_line (filename, line)\n \n void\n dwarf2out_start_source_file (filename)\n-     register char *filename;\n+     register char *filename ATTRIBUTE_UNUSED;\n {\n }\n \n@@ -9709,8 +9716,8 @@ dwarf2out_define (lineno, buffer)\n \n void\n dwarf2out_undef (lineno, buffer)\n-     register unsigned lineno;\n-     register char *buffer;\n+     register unsigned lineno ATTRIBUTE_UNUSED;\n+     register char *buffer ATTRIBUTE_UNUSED;\n {\n }\n "}, {"sha": "e80a2c9a92fd5da07e8c025a461e0423c8535336", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -314,8 +314,10 @@ static char *dwarf_fund_type_name\tPROTO((unsigned));\n static tree decl_ultimate_origin\tPROTO((tree));\n static tree block_ultimate_origin\tPROTO((tree));\n static tree decl_class_context \t\tPROTO((tree));\n+#if 0\n static void output_unsigned_leb128\tPROTO((unsigned long));\n static void output_signed_leb128\tPROTO((long));\n+#endif\n static inline int is_body_block\t\tPROTO((tree));\n static int fundamental_type_code\tPROTO((tree));\n static tree root_type_1\t\t\tPROTO((tree, int));\n@@ -413,7 +415,7 @@ static void output_typedef_die\t\tPROTO((void *));\n static void output_union_type_die\tPROTO((void *));\n static void output_unspecified_parameters_die PROTO((void *));\n static void output_padded_null_die\tPROTO((void *));\n-static void output_die\t\t\tPROTO((void (*) (), void *));\n+static void output_die\t\t\tPROTO((void (*) PROTO((void *)), void *));\n static void end_sibling_chain\t\tPROTO((void));\n static void output_formal_types\t\tPROTO((tree));\n static void pend_type\t\t\tPROTO((tree));\n@@ -1213,6 +1215,7 @@ decl_class_context (decl)\n   return context;\n }\n \n+#if 0\n static void\n output_unsigned_leb128 (value)\n      register unsigned long value;\n@@ -1266,6 +1269,7 @@ output_signed_leb128 (value)\n     }\n   while (more);\n }\n+#endif\n \f\n /**************** utility functions for attribute functions ******************/\n \n@@ -3922,7 +3926,7 @@ output_unspecified_parameters_die (arg)\n \n static void\n output_padded_null_die (arg)\n-     register void *arg;\n+     register void *arg ATTRIBUTE_UNUSED;\n {\n   ASM_OUTPUT_ALIGN (asm_out_file, 2);\t/* 2**2 == 4 */\n }\n@@ -3937,7 +3941,7 @@ output_padded_null_die (arg)\n \n static void\n output_die (die_specific_output_function, param)\n-     register void (*die_specific_output_function)();\n+     register void (*die_specific_output_function) PROTO ((void *));\n      register void *param;\n {\n   char begin_label[MAX_ARTIFICIAL_LABEL_BYTES];"}, {"sha": "0f658941162d035824de402860a416c11120f3fe", "filename": "gcc/except.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -1797,7 +1797,6 @@ output_exception_table_entry (file, n)\n {\n   char buf[256];\n   rtx sym;\n-  int eh_entry;\n   struct handler_info *handler;\n \n   handler = get_first_handler (n);"}, {"sha": "4917ab709bc4e163e0539f3450fa77ac0a725adf", "filename": "gcc/except.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -364,6 +364,11 @@ extern int protect_cleanup_actions_with_terminate;\n extern tree protect_with_terminate\t\tPROTO((tree));\n #endif\n \n+extern void expand_fixup_region_start\tPROTO((void));\n+#ifdef TREE_CODE\n+extern void expand_fixup_region_end\tPROTO((tree));\n+#endif\n+\n /* Various hooks for the DWARF 2 __throw routine.  */\n \n void expand_builtin_unwind_init\t\tPROTO((void));"}, {"sha": "300e55862af1a322ca4ac82d74ee89841f94c281", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -188,7 +188,6 @@ static void preexpand_calls\tPROTO((tree));\n static void do_jump_by_parts_greater PROTO((tree, int, rtx, rtx));\n void do_jump_by_parts_greater_rtx PROTO((enum machine_mode, int, rtx, rtx, rtx, rtx));\n static void do_jump_by_parts_equality PROTO((tree, rtx, rtx));\n-void do_jump_by_parts_equality_rtx PROTO((rtx, rtx, rtx));\n static void do_jump_for_compare\tPROTO((rtx, rtx, rtx));\n static rtx compare\t\tPROTO((tree, enum rtx_code, enum rtx_code));\n static rtx do_store_flag\tPROTO((tree, rtx, enum machine_mode, int));"}, {"sha": "509cbebe46d47837ee34a7a41f78fcd66ccf8e51", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -947,6 +947,7 @@ extern rtx (*lang_expand_expr) PROTO ((union tree_node *, rtx,\n \n extern void init_all_optabs\t\t\tPROTO ((void));\n extern void init_mov_optab\t\t\tPROTO ((void));\n+extern void do_jump_by_parts_equality_rtx\tPROTO((rtx, rtx, rtx));\n extern void do_jump_by_parts_greater_rtx\tPROTO ((enum machine_mode, int,\n \t\t\t\t\t\t\trtx, rtx, rtx, rtx));\n "}, {"sha": "8ba79ff6590469526f98df13c2fc3bae8c10383f", "filename": "gcc/fix-header.c", "status": "modified", "additions": 78, "deletions": 20, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -71,17 +71,19 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n    Written by Per Bothner <bothner@cygnus.com>, July 1993.  */\n \n #include \"hconfig.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n+#include \"gansidecl.h\"\n #include \"obstack.h\"\n #include \"scan.h\"\n #include \"cpplib.h\"\n-#include \"gansidecl.h\"\n+#include \"cpphash.h\"\n \n-extern void cpp_fatal ();\n-\n-#if !__STDC__ && !defined(const)\n-#define const /* nothing */\n-#endif\n+void fatal PVPROTO ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n \n sstring buf;\n \n@@ -1327,7 +1329,8 @@ main (argc, argv)\n    because we want to suppress error messages.  */\n \n void\n-cpp_file_line_for_message (filename, line, column)\n+cpp_file_line_for_message (pfile, filename, line, column)\n+     cpp_reader * pfile;\n      char *filename;\n      int line, column;\n {\n@@ -1347,11 +1350,12 @@ cpp_print_containing_files (pfile)\n \n /* IS_ERROR is 2 for fatal error, 1 for error, 0 for warning */\n \n-void cpp_message (pfile, is_error, msg, arg1, arg2, arg3)\n-     int is_error;\n+void\n+v_cpp_message (pfile, is_error, msg, ap)\n      cpp_reader *pfile;\n-     char *msg;\n-     char *arg1, *arg2, *arg3;\n+     int is_error;\n+     const char *msg;\n+     va_list ap;\n {\n   if (is_error == 1)\n     pfile->errors++;\n@@ -1361,32 +1365,86 @@ void cpp_message (pfile, is_error, msg, arg1, arg2, arg3)\n     return;\n   if (!is_error)\n     fprintf (stderr, \"warning: \");\n-  fprintf (stderr, msg, arg1, arg2, arg3);\n+  vfprintf (stderr, msg, ap);\n   fprintf (stderr, \"\\n\");\n }\n \n void\n-fatal (str, arg)\n-     char *str, *arg;\n+cpp_message VPROTO ((cpp_reader *pfile, int is_error, const char *msg, ...))\n+{\n+#ifndef __STDC__\n+  cpp_reader *pfile;\n+  int is_error;\n+  const char *msg;\n+#endif\n+  va_list ap;\n+  \n+  VA_START (ap, msg);\n+  \n+#ifndef __STDC__\n+  pfile = va_arg (ap, cpp_reader *);\n+  is_error = va_arg (ap, const int);\n+  msg = va_arg (ap, const char *);\n+#endif\n+\n+  v_cpp_message(pfile, is_error, msg, ap);\n+  va_end(ap);\n+}\n+\n+static void\n+v_fatal (str, ap)\n+  const char * str;\n+  va_list ap;\n {\n   fprintf (stderr, \"%s: %s: \", progname, inc_filename);\n-  fprintf (stderr, str, arg);\n+  vfprintf (stderr, str, ap);\n   fprintf (stderr, \"\\n\");\n+  \n   exit (FATAL_EXIT_CODE);\n }\n \n void\n-cpp_fatal (pfile, str, arg)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n-     char *str, *arg;\n+fatal VPROTO ((const char *str, ...))\n {\n-  fatal (str, arg);\n+#ifndef __STDC__\n+  const char *str;\n+#endif\n+  va_list ap;\n+  \n+  VA_START(ap, str);\n+\n+#ifndef __STDC__\n+  str = va_arg (ap, const char *);\n+#endif\n+\n+  v_fatal(str, ap);\n+  va_end(ap);\n+}\n+\n+void\n+cpp_fatal VPROTO ((cpp_reader * pfile, const char *str, ...))\n+{\n+#ifndef __STDC__\n+  cpp_reader * pfile;\n+  const char *str;\n+#endif\n+  va_list ap;\n+  \n+  VA_START(ap, str);\n+\n+#ifndef __STDC__\n+  pfile = va_arg (ap, cpp_reader *);\n+  str = va_arg (ap, const char *);\n+#endif\n+\n+  v_fatal(str, ap);\n+  va_end(ap);\n }\n \n void\n cpp_pfatal_with_name (pfile, name)\n      cpp_reader *pfile;\n-     char *name;\n+     const char *name;\n {\n   cpp_perror_with_name (pfile, name);\n   exit (FATAL_EXIT_CODE);"}, {"sha": "4ade02ae5c3a58e7f4dea3e6e14e915cf051349f", "filename": "gcc/flow.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -262,7 +262,6 @@ static void mark_label_ref\t\tPROTO((rtx, rtx, int));\n static void life_analysis_1\t\tPROTO((rtx, int));\n void allocate_for_life_analysis\t\tPROTO((void));\n void init_regset_vector\t\t\tPROTO((regset *, int, struct obstack *));\n-void free_regset_vector\t\t\tPROTO((regset *, int));\n static void propagate_block\t\tPROTO((regset, rtx, rtx, int, \n \t\t\t\t\t       regset, int));\n static rtx flow_delete_insn\t\tPROTO((rtx));"}, {"sha": "2d1056f4371a46cf29d5dc26e8646463e46cd2e9", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -439,12 +439,14 @@ static void pad_to_arg_alignment PROTO((struct args_size *, int));\n static void pad_below\t\tPROTO((struct args_size *, enum  machine_mode,\n \t\t\t\t       tree));\n #endif\n+#ifdef ARGS_GROW_DOWNWARD\n static tree round_down\t\tPROTO((tree, int));\n+#endif\n static rtx round_trampoline_addr PROTO((rtx));\n static tree blocks_nreverse\tPROTO((tree));\n static int all_blocks\t\tPROTO((tree, tree *));\n-static int *record_insns\tPROTO((rtx));\n #if defined (HAVE_prologue) || defined (HAVE_epilogue)\n+static int *record_insns\tPROTO((rtx));\n static int contains\t\tPROTO((rtx, int *));\n #endif /* HAVE_prologue || HAVE_epilogue */\n static void put_addressof_into_stack PROTO((rtx));\n@@ -4747,6 +4749,7 @@ pad_below (offset_ptr, passed_mode, sizetree)\n }\n #endif\n \n+#ifdef ARGS_GROW_DOWNWARD\n static tree\n round_down (value, divisor)\n      tree value;\n@@ -4756,6 +4759,7 @@ round_down (value, divisor)\n \t\t     size_binop (FLOOR_DIV_EXPR, value, size_int (divisor)),\n \t\t     size_int (divisor));\n }\n+#endif\n \f\n /* Walk the tree of blocks describing the binding levels within a function\n    and warn about uninitialized variables.\n@@ -5944,6 +5948,7 @@ static int *epilogue;\n /* Create an array that records the INSN_UIDs of INSNS (either a sequence\n    or a single insn).  */\n \n+#if defined (HAVE_prologue) || defined (HAVE_epilogue)\n static int *\n record_insns (insns)\n      rtx insns;\n@@ -5969,7 +5974,6 @@ record_insns (insns)\n \n /* Determine how many INSN_UIDs in VEC are part of INSN.  */\n \n-#if defined (HAVE_prologue) || defined (HAVE_epilogue)\n static int\n contains (insn, vec)\n      rtx insn;"}, {"sha": "f994b2d5c3ea1235799184961361a3cfccc6a102", "filename": "gcc/gansidecl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fgansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fgansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgansidecl.h?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -59,6 +59,8 @@ Boston, MA 02111-1307, USA.  */\n #define ATTRIBUTE_PRINTF_1 ATTRIBUTE_PRINTF(1, 2)\n #define ATTRIBUTE_PRINTF_2 ATTRIBUTE_PRINTF(2, 3)\n #define ATTRIBUTE_PRINTF_3 ATTRIBUTE_PRINTF(3, 4)\n+#define ATTRIBUTE_PRINTF_4 ATTRIBUTE_PRINTF(4, 5)\n+#define ATTRIBUTE_PRINTF_5 ATTRIBUTE_PRINTF(5, 6)\n #endif /* ATTRIBUTE_PRINTF */\n \n /* Define a generic NULL if one hasn't already been defined.  */"}, {"sha": "8b018cdc526ac4f32599ac09e5957d14d99e24cc", "filename": "gcc/gen-protos.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fgen-protos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fgen-protos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgen-protos.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -17,6 +17,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"hconfig.h\"\n #include \"system.h\"\n+#include \"gansidecl.h\"\n #include \"scan.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n@@ -28,9 +29,9 @@ char *progname;\n int hash_tab[HASH_SIZE];\n int next_index;\n \n-static int\n+int\n hashf (name, len, hashsize)\n-     register U_CHAR *name;\n+     register const U_CHAR *name;\n      register int len;\n      int hashsize;\n {"}, {"sha": "3914c64d4aaf990afe4867f82d8af0669960ee64", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -952,12 +952,12 @@ check_attr_test (exp, is_const)\n \t\t  return exp;\n \t\t}\n \t      else\n-\t\tfatal (\"Unknown attribute `%s' in EQ_ATTR\", XEXP (exp, 0));\n+\t\tfatal (\"Unknown attribute `%s' in EQ_ATTR\", XSTR (exp, 0));\n \t    }\n \n \t  if (is_const && ! attr->is_const)\n \t    fatal (\"Constant expression uses insn attribute `%s' in EQ_ATTR\",\n-\t\t   XEXP (exp, 0));\n+\t\t   XSTR (exp, 0));\n \n \t  /* Copy this just to make it permanent,\n \t     so expressions using it can be permanent too.  */\n@@ -974,7 +974,7 @@ check_attr_test (exp, is_const)\n \t      for (p = XSTR (exp, 1); *p; p++)\n \t\tif (*p < '0' || *p > '9')\n \t\t   fatal (\"Attribute `%s' takes only numeric values\", \n-\t\t\t  XEXP (exp, 0));\n+\t\t\t  XSTR (exp, 0));\n \t    }\n \t  else\n \t    {\n@@ -985,7 +985,7 @@ check_attr_test (exp, is_const)\n \n \t      if (av == NULL)\n \t\tfatal (\"Unknown value `%s' for `%s' attribute\",\n-\t\t       XEXP (exp, 1), XEXP (exp, 0));\n+\t\t       XSTR (exp, 1), XSTR (exp, 0));\n \t    }\n \t}\n       else"}, {"sha": "1c5245c2d86e654b29a45b59f3acb0f98c6f97c1", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -164,6 +164,7 @@\n #include \"insn-config.h\"\n #include \"insn-attr.h\"\n #include \"except.h\"\n+#include \"toplev.h\"\n \n extern char *reg_known_equiv_p;\n extern rtx *reg_known_value;\n@@ -1471,7 +1472,7 @@ find_rgns (s_preds, s_succs, num_preds, num_succs, dom)\n {\n   int *max_hdr, *dfs_nr, *stack, *queue, *degree;\n   char no_loops = 1;\n-  int node, child, loop_head, i, j, head, tail;\n+  int node, child, loop_head, i, head, tail;\n   int count = 0, sp, idx = 0, current_edge = out_edges[0];\n   int num_bbs, num_insns, unreachable;\n   int too_large_failure;"}, {"sha": "ef78b0a924813af3f23d4ece4e2fc8f5424d76ba", "filename": "gcc/integrate.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -1018,7 +1018,7 @@ save_constants (px)\n static void\n note_modified_parmregs (reg, x)\n      rtx reg;\n-     rtx x;\n+     rtx x ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (reg) == REG && in_nonparm_insns\n       && REGNO (reg) < max_parm_reg\n@@ -3096,7 +3096,7 @@ subst_constants (loc, insn, map)\n void\n mark_stores (dest, x)\n      rtx dest;\n-     rtx x;\n+     rtx x ATTRIBUTE_UNUSED;\n {\n   int regno = -1;\n   enum machine_mode mode;"}, {"sha": "74b038c7c796810074907a6921c156525254f982", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -4347,7 +4347,7 @@ static int modified_mem;\n static void\n mark_modified_reg (dest, x)\n      rtx dest;\n-     rtx x;\n+     rtx x ATTRIBUTE_UNUSED;\n {\n   int regno, i;\n "}, {"sha": "c3c0381ded6a20b67679236c58dc0021421aa233", "filename": "gcc/output.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -83,6 +83,11 @@ extern void output_operand_lossage  PROTO((char *));\n    Defined in final.c.  */\n extern void output_asm_insn\tPROTO((char *, rtx *));\n \n+/* Compute a worst-case reference address of a branch so that it\n+   can be safely used in the presence of aligned labels.\n+   Defined in final.c.  */\n+extern int insn_current_reference_address\tPROTO((rtx));\n+\n /* Output a LABEL_REF, or a bare CODE_LABEL, as an assembler symbol.  */\n extern void output_asm_label\tPROTO((rtx));\n \n@@ -140,6 +145,10 @@ extern void readonly_data_section\tPROTO((void));\n /* Determine if we're in the text section. */\n extern int in_text_section\t\tPROTO((void));\n \n+#ifdef EH_FRAME_SECTION_ASM_OP\n+extern void eh_frame_section\t\tPROTO ((void));\n+#endif\n+\n #ifdef TREE_CODE\n /* Tell assembler to change to section NAME for DECL.\n    If DECL is NULL, just switch to section NAME."}, {"sha": "0187c34127a6c3e91467c6ff10480130ff2bb573", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -22,6 +22,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"rtl.h\"\n+#include \"bitmap.h\"\n \n \n /* How to print out a register name."}, {"sha": "094c6ba662d8a61d0143288bba0bfac050f8fda0", "filename": "gcc/reload1.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -2108,7 +2108,9 @@ reload (first, global, dumpfile)\n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n       {\n+#ifdef PRESERVE_DEATH_INFO_REGNO_P\n \trtx note, next;\n+#endif\n \n \tif (GET_CODE (PATTERN (insn)) == USE\n \t    && find_reg_note (insn, REG_EQUAL, NULL_RTX))\n@@ -4215,7 +4217,7 @@ reload_as_needed (first, live_known)\n static void\n forget_old_reloads_1 (x, ignored)\n      rtx x;\n-     rtx ignored;\n+     rtx ignored ATTRIBUTE_UNUSED;\n {\n   register int regno;\n   int nr;\n@@ -5448,7 +5450,6 @@ choose_reload_regs (insn, avoid_return_reg)\n \t    {\n \t      register int regno = -1;\n \t      enum machine_mode mode;\n-\t      rtx in;\n \n \t      if (reload_in[r] == 0)\n \t\t;\n@@ -7912,7 +7913,7 @@ reload_cse_invalidate_mem (mem_rtx)\n static void\n reload_cse_invalidate_rtx (dest, ignore)\n      rtx dest;\n-     rtx ignore;\n+     rtx ignore ATTRIBUTE_UNUSED;\n {\n   while (GET_CODE (dest) == STRICT_LOW_PART\n \t || GET_CODE (dest) == SIGN_EXTRACT\n@@ -8602,7 +8603,7 @@ static rtx reload_cse_check_src;\n static void\n reload_cse_check_clobber (dest, ignore)\n      rtx dest;\n-     rtx ignore;\n+     rtx ignore ATTRIBUTE_UNUSED;\n {\n   if (reg_overlap_mentioned_p (dest, reload_cse_check_src))\n     reload_cse_check_clobbered = 1;"}, {"sha": "26b5aa5961203c8f4b824ec78dd1150f1bf642a7", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -1378,6 +1378,7 @@ extern int num_validated_changes\tPROTO ((void));\n extern int recog\t\t\tPROTO ((rtx, rtx, int *));\n \n /* In stmt.c */\n+extern void expand_null_return\t\tPROTO((void));\n extern void emit_jump\t\t\tPROTO ((rtx));\n extern int preserve_subexpressions_p\tPROTO ((void));\n \n@@ -1404,13 +1405,14 @@ extern rtx expand_mult_highpart\t\tPROTO ((enum machine_mode, rtx,\n \t\t\t\t\t\tint, int));\n \n /* In global.c */\n-extern void mark_elimiation\t\tPROTO ((int, int));\n+extern void mark_elimination\t\tPROTO ((int, int));\n #ifdef BUFSIZ\n extern int global_alloc\t\t\tPROTO ((FILE *));\n extern void dump_global_regs\t\tPROTO ((FILE *));\n #endif\n \n /* In regclass.c */\n+extern int reg_classes_intersect_p\tPROTO ((enum reg_class, enum reg_class));\n extern int reg_class_subset_p\t\tPROTO ((enum reg_class, enum reg_class));\n extern void globalize_reg\t\tPROTO ((int));\n extern void init_regs\t\t\tPROTO ((void));"}, {"sha": "d2f32a86cf91a741d8dd26b412304ee3cd87c398", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -19,6 +19,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #include \"hconfig.h\"\n #include \"system.h\"\n+#include \"gansidecl.h\"\n #include \"cpplib.h\"\n #include \"scan.h\"\n "}, {"sha": "ec6b3fa01e6ae528df14c9d7aa0e478a1b9a6b6b", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487a6e06cec4f057438ef9933852d8ee536077ff/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=487a6e06cec4f057438ef9933852d8ee536077ff", "patch": "@@ -1822,6 +1822,7 @@ extern int pushcase\t\t\t\tPROTO((tree,\n extern int pushcase_range\t\t\tPROTO((tree, tree,\n \t\t\t\t\t\t       tree (*) (tree, tree),\n \t\t\t\t\t\t       tree, tree *));\n+extern void using_eh_for_cleanups\t\tPROTO((void));\n \n /* In fold-const.c */\n \n@@ -2123,6 +2124,7 @@ extern void fixup_signed_type\t\tPROTO ((tree));\n /* varasm.c */\n extern void make_decl_rtl\t\tPROTO ((tree, char *, int));\n extern void make_decl_one_only\t\tPROTO ((tree));\n+extern int supports_one_only\t\tPROTO ((void));\n extern void variable_section\t\tPROTO ((tree, int));\n \n /* In fold-const.c */"}]}