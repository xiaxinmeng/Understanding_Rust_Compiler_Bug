{"sha": "ae818d3be84a3154287758d8be72c82b921d1429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU4MThkM2JlODRhMzE1NDI4Nzc1OGQ4YmU3MmM4MmI5MjFkMTQyOQ==", "commit": {"author": {"name": "Erik Rozendaal", "email": "dlr@acm.org", "date": "2001-07-09T23:46:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-07-09T23:46:06Z"}, "message": "typeck.c (unary_complex_lvalue): Do not duplicate the argument to modify...\n\n        * typeck.c (unary_complex_lvalue): Do not duplicate the\n        argument to modify, pre-, or post-increment when used as an\n        lvalue and when the argument has side-effects.\n\nFrom-SVN: r43884", "tree": {"sha": "c6ad27b09a855052eba84353eab09e3c659df104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6ad27b09a855052eba84353eab09e3c659df104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae818d3be84a3154287758d8be72c82b921d1429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae818d3be84a3154287758d8be72c82b921d1429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae818d3be84a3154287758d8be72c82b921d1429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae818d3be84a3154287758d8be72c82b921d1429/comments", "author": null, "committer": null, "parents": [{"sha": "d777856dc899138fa15029c6f7490614c176d765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d777856dc899138fa15029c6f7490614c176d765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d777856dc899138fa15029c6f7490614c176d765"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "1f77946cbf259515a1c6fb2e264f4d179e5d6c30", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae818d3be84a3154287758d8be72c82b921d1429/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae818d3be84a3154287758d8be72c82b921d1429/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ae818d3be84a3154287758d8be72c82b921d1429", "patch": "@@ -1,3 +1,9 @@\n+2001-07-09  Erik Rozendaal  <dlr@acm.org>\n+\n+\t* typeck.c (unary_complex_lvalue): Do not duplicate the\n+\targument to modify, pre-, or post-increment when used as an\n+\tlvalue and when the argument has side-effects.\n+\n 2001-07-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* decl.c (start_decl): Don't call SET_DEFAULT_DECL_ATTRIBUTES.\n@@ -12,7 +18,7 @@\n \n 2001-07-06  Ira Ruben   <ira@apple.com>\n \n-        * cp-tree.def (TEMPLATE_DECL): Update comment. DECL_RESULT should\n+\t* cp-tree.def (TEMPLATE_DECL): Update comment. DECL_RESULT should\n \tbe DECL_TEMPLATE_RESULT.\n \n 2001-07-05  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>"}, {"sha": "17b75cc362b8d8fdd6609e01821ab03253fd7a49", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae818d3be84a3154287758d8be72c82b921d1429/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae818d3be84a3154287758d8be72c82b921d1429/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ae818d3be84a3154287758d8be72c82b921d1429", "patch": "@@ -4808,12 +4808,21 @@ unary_complex_lvalue (code, arg)\n       || TREE_CODE (arg) == MIN_EXPR || TREE_CODE (arg) == MAX_EXPR)\n     return rationalize_conditional_expr (code, arg);\n \n+  /* Handle (a = b), (++a), and (--a) used as an \"lvalue\".  */\n   if (TREE_CODE (arg) == MODIFY_EXPR\n       || TREE_CODE (arg) == PREINCREMENT_EXPR\n       || TREE_CODE (arg) == PREDECREMENT_EXPR)\n-    return unary_complex_lvalue\n-      (code, build (COMPOUND_EXPR, TREE_TYPE (TREE_OPERAND (arg, 0)),\n-\t\t    arg, TREE_OPERAND (arg, 0)));\n+    {\n+      tree lvalue = TREE_OPERAND (arg, 0);\n+      if (TREE_SIDE_EFFECTS (lvalue))\n+\t{\n+\t  lvalue = stabilize_reference (lvalue);\n+\t  arg = build (TREE_CODE (arg), TREE_TYPE (arg),\n+\t\t       lvalue, TREE_OPERAND (arg, 1));\n+\t}\n+      return unary_complex_lvalue\n+\t(code, build (COMPOUND_EXPR, TREE_TYPE (lvalue), arg, lvalue));\n+    }\n \n   if (code != ADDR_EXPR)\n     return 0;"}]}