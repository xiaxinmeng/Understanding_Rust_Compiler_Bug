{"sha": "04ea1955ee6a70390a171328c537ed121eb05078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRlYTE5NTVlZTZhNzAzOTBhMTcxMzI4YzUzN2VkMTIxZWIwNTA3OA==", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-08-24T19:57:54Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-09-05T18:52:55Z"}, "message": "mangling: Add option to choose mangling version", "tree": {"sha": "84da324a046eacdce472f647445256fc9f4a1cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84da324a046eacdce472f647445256fc9f4a1cff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04ea1955ee6a70390a171328c537ed121eb05078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ea1955ee6a70390a171328c537ed121eb05078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ea1955ee6a70390a171328c537ed121eb05078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ea1955ee6a70390a171328c537ed121eb05078/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91507076503d57982218c726a712c48adc7a4e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91507076503d57982218c726a712c48adc7a4e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91507076503d57982218c726a712c48adc7a4e1d"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "05c15e3c7ea50d6052a5f16f3a6af827739e9fa9", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ea1955ee6a70390a171328c537ed121eb05078/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ea1955ee6a70390a171328c537ed121eb05078/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=04ea1955ee6a70390a171328c537ed121eb05078", "patch": "@@ -46,7 +46,7 @@ class Context\n     : backend (backend), resolver (Resolver::Resolver::get ()),\n       tyctx (Resolver::TypeCheckContext::get ()),\n       mappings (Analysis::Mappings::get ()),\n-      const_ctx (ConstFold::Context::get ()), mangler (Mangler (Mangler::MangleVersion::LEGACY))\n+      const_ctx (ConstFold::Context::get ()), mangler (Mangler ())\n   {\n     // insert the builtins\n     auto builtins = resolver->get_builtin_types ();"}, {"sha": "40822b4be7b1681a7878d02d1c3d87b279a88593", "filename": "gcc/rust/backend/rust-mangle.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ea1955ee6a70390a171328c537ed121eb05078/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ea1955ee6a70390a171328c537ed121eb05078/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-mangle.cc?ref=04ea1955ee6a70390a171328c537ed121eb05078", "patch": "@@ -11,6 +11,8 @@ static const std::string kMangledSubstEnd = \"$GT$\";\n namespace Rust {\n namespace Compile {\n \n+Mangler::MangleVersion Mangler::version = MangleVersion::LEGACY;\n+\n static std::string\n legacy_mangle_name (const std::string &name)\n {\n@@ -78,8 +80,9 @@ legacy_mangle_self (const TyTy::BaseType *self)\n }\n \n static std::string\n-legacy_mangle_item (const TyTy::BaseType *ty, const Resolver::CanonicalPath &path,\n-\t\t\t     const std::string &crate_name)\n+legacy_mangle_item (const TyTy::BaseType *ty,\n+\t\t    const Resolver::CanonicalPath &path,\n+\t\t    const std::string &crate_name)\n {\n   const std::string hash = legacy_hash (ty->as_string ());\n   const std::string hash_sig = legacy_mangle_name (hash);\n@@ -90,10 +93,8 @@ legacy_mangle_item (const TyTy::BaseType *ty, const Resolver::CanonicalPath &pat\n \n // FIXME this is a wee bit broken\n static std::string\n-legacy_mangle_impl_item (const TyTy::BaseType *self,\n-\t\t\t\t  const TyTy::BaseType *ty,\n-\t\t\t\t  const std::string &name,\n-\t\t\t\t  const std::string &crate_name)\n+legacy_mangle_impl_item (const TyTy::BaseType *self, const TyTy::BaseType *ty,\n+\t\t\t const std::string &name, const std::string &crate_name)\n {\n   const std::string hash = legacy_hash (ty->as_string ());\n   const std::string hash_sig = legacy_mangle_name (hash);\n@@ -116,7 +117,8 @@ legacy_mangle_impl_item (const TyTy::BaseType *self,\n // {}\n \n std::string\n-Mangler::mangle_item (const TyTy::BaseType *ty, const Resolver::CanonicalPath &path,\n+Mangler::mangle_item (const TyTy::BaseType *ty,\n+\t\t      const Resolver::CanonicalPath &path,\n \t\t      const std::string &crate_name) const\n {\n   switch (version)\n@@ -145,5 +147,6 @@ Mangler::mangle_impl_item (const TyTy::BaseType *self, const TyTy::BaseType *ty,\n       gcc_unreachable ();\n     }\n }\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "10874464a22c4c2f786031700114965afeee85d3", "filename": "gcc/rust/backend/rust-mangle.h", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ea1955ee6a70390a171328c537ed121eb05078/gcc%2Frust%2Fbackend%2Frust-mangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ea1955ee6a70390a171328c537ed121eb05078/gcc%2Frust%2Fbackend%2Frust-mangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-mangle.h?ref=04ea1955ee6a70390a171328c537ed121eb05078", "patch": "@@ -26,23 +26,33 @@ class Mangler\n public:\n   enum MangleVersion\n   {\n-    LEGACY,\n+    LEGACY = 0,\n     V0,\n   };\n \n-  Mangler (MangleVersion version) : version (version) {}\n-\n   // this needs to support Legacy and V0 see github #429 or #305\n-  std::string mangle_item (const TyTy::BaseType *ty, const Resolver::CanonicalPath &path,\n+  std::string mangle_item (const TyTy::BaseType *ty,\n+\t\t\t   const Resolver::CanonicalPath &path,\n \t\t\t   const std::string &crate_name) const;\n \n   std::string mangle_impl_item (const TyTy::BaseType *self,\n \t\t\t\tconst TyTy::BaseType *ty,\n \t\t\t\tconst std::string &name,\n-\t\t\t   const std::string &crate_name) const;\n+\t\t\t\tconst std::string &crate_name) const;\n+\n+  static bool choose_mangling (std::string arg)\n+  {\n+    if (arg == \"legacy\")\n+      version = MangleVersion::LEGACY;\n+    else if (arg == \"v0\")\n+      version = MangleVersion::V0;\n+    else\n+      return false;\n+\n+    return true;\n+  }\n \n-private:\n-  enum MangleVersion version;\n+  static enum MangleVersion version;\n };\n } // namespace Compile\n } // namespace Rust"}, {"sha": "72542de30d718833802a383c1e429e5f20425eaf", "filename": "gcc/rust/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ea1955ee6a70390a171328c537ed121eb05078/gcc%2Frust%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ea1955ee6a70390a171328c537ed121eb05078/gcc%2Frust%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flang.opt?ref=04ea1955ee6a70390a171328c537ed121eb05078", "patch": "@@ -43,6 +43,10 @@ frust-dump-\n Rust Joined RejectNegative\n -frust-dump-<type>\tDump Rust frontend internal information.\n \n+frust-mangling=\n+Rust Joined RejectNegative\n+-frust-mangling=<version> Choose which version to use for name mangling (legacy, v0)\n+\n o\n Rust Joined Separate\n ; Documented in common.opt"}, {"sha": "82593f3ce4bc5fbce8329fdef0a0e89b385337be", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ea1955ee6a70390a171328c537ed121eb05078/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ea1955ee6a70390a171328c537ed121eb05078/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=04ea1955ee6a70390a171328c537ed121eb05078", "patch": "@@ -370,6 +370,9 @@ Session::handle_option (\n \t  ret = false;\n \t}\n       break;\n+    case OPT_frust_mangling_:\n+      if (arg != nullptr)\n+\tret = Compile::Mangler::choose_mangling (std::string (arg));\n     // no option handling for -o\n     default:\n       // return 1 to indicate option is valid"}]}