{"sha": "19cf9bde76edc1c14f233b08c3d7866150b01b83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTljZjliZGU3NmVkYzFjMTRmMjMzYjA4YzNkNzg2NjE1MGIwMWI4Mw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-11-16T15:48:28Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-16T15:48:28Z"}, "message": "arc.c: Delete pasto.\n\n\t* config/arc/arc.c: Delete pasto.\n\t* config/pa/pa.c (pa_function_arg_boundary): Add missing comparison.\n\nFrom-SVN: r166806", "tree": {"sha": "e84c04f24537b9fb1a393b858d71f72702af8779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e84c04f24537b9fb1a393b858d71f72702af8779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19cf9bde76edc1c14f233b08c3d7866150b01b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19cf9bde76edc1c14f233b08c3d7866150b01b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19cf9bde76edc1c14f233b08c3d7866150b01b83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19cf9bde76edc1c14f233b08c3d7866150b01b83/comments", "author": null, "committer": null, "parents": [{"sha": "f2831cc91f95831e8ff6094262323e5413ffc3cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2831cc91f95831e8ff6094262323e5413ffc3cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2831cc91f95831e8ff6094262323e5413ffc3cb"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "1ba5586ea7857d5da53f542b56f6d6cfb4f107a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19cf9bde76edc1c14f233b08c3d7866150b01b83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19cf9bde76edc1c14f233b08c3d7866150b01b83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19cf9bde76edc1c14f233b08c3d7866150b01b83", "patch": "@@ -1,3 +1,8 @@\n+2010-11-16  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/arc/arc.c: Delete pasto.\n+\t* config/pa/pa.c (pa_function_arg_boundary): Add missing comparison.\n+\n 2010-11-16  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/mn10300/mn10300.h (PREFERRED_RELOAD_CLASS,"}, {"sha": "d822f59eb985e1dfc3d2da3a5f79108d7765c7b5", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19cf9bde76edc1c14f233b08c3d7866150b01b83/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19cf9bde76edc1c14f233b08c3d7866150b01b83/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=19cf9bde76edc1c14f233b08c3d7866150b01b83", "patch": "@@ -2426,10 +2426,6 @@ arc_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t  + ROUND_ADVANCE_ARG (mode, type));\n }\n \n-/* If defined, a C expression that gives the alignment boundary, in bits,\n-   of an argument with the specified mode and type.  If it is not defined, \n-   PARM_BOUNDARY is used for all arguments.  */\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n /* Worker function for TARGET_FUNCTION_ARG_BOUNDARY.  */\n \n static unsigned int"}, {"sha": "366ce015bcf8e2b705b1a64c3eab42d94ba0f0eb", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19cf9bde76edc1c14f233b08c3d7866150b01b83/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19cf9bde76edc1c14f233b08c3d7866150b01b83/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=19cf9bde76edc1c14f233b08c3d7866150b01b83", "patch": "@@ -9613,7 +9613,7 @@ pa_function_arg_boundary (enum machine_mode mode, const_tree type)\n \t\t     ? (integer_zerop (size)\n \t\t\t|| !TREE_CONSTANT (size)\n \t\t\t|| int_size_in_bytes (type) <= UNITS_PER_WORD)\n-\t\t     : GET_MODE_SIZE (mode));\n+\t\t     : GET_MODE_SIZE (mode) <= UNITS_PER_WORD);\n \n   return singleword ? PARM_BOUNDARY : MAX_PARM_BOUNDARY;\n }"}]}