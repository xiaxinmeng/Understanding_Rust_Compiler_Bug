{"sha": "38e34671fa2bb8a686cd2e2c770937b8c9be8f1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlMzQ2NzFmYTJiYjhhNjg2Y2QyZTJjNzcwOTM3YjhjOWJlOGYxZQ==", "commit": {"author": {"name": "Eelis van der Weegen", "email": "eelis@eelis.net", "date": "2016-10-14T19:40:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-14T19:40:32Z"}, "message": "Optimize std::shuffle by using generator to get two values at once\n\n2016-10-14  Eelis van der Weegen  <eelis@eelis.net>\n\n\t* include/bits/stl_algo.h (shuffle): Extract two random numbers from\n\teach generator invocation when its range is large enough.\n\nFrom-SVN: r241184", "tree": {"sha": "6e19ecb291e9b2e941c92718b9342998f603596e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e19ecb291e9b2e941c92718b9342998f603596e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38e34671fa2bb8a686cd2e2c770937b8c9be8f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e34671fa2bb8a686cd2e2c770937b8c9be8f1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e34671fa2bb8a686cd2e2c770937b8c9be8f1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e34671fa2bb8a686cd2e2c770937b8c9be8f1e/comments", "author": {"login": "Eelis", "id": 22357, "node_id": "MDQ6VXNlcjIyMzU3", "avatar_url": "https://avatars.githubusercontent.com/u/22357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eelis", "html_url": "https://github.com/Eelis", "followers_url": "https://api.github.com/users/Eelis/followers", "following_url": "https://api.github.com/users/Eelis/following{/other_user}", "gists_url": "https://api.github.com/users/Eelis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eelis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eelis/subscriptions", "organizations_url": "https://api.github.com/users/Eelis/orgs", "repos_url": "https://api.github.com/users/Eelis/repos", "events_url": "https://api.github.com/users/Eelis/events{/privacy}", "received_events_url": "https://api.github.com/users/Eelis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17739146f98241af2787b1aff50265efbe84f96f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17739146f98241af2787b1aff50265efbe84f96f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17739146f98241af2787b1aff50265efbe84f96f"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "1537793bef09a7579c261793d1c717f190ccc5bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e34671fa2bb8a686cd2e2c770937b8c9be8f1e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e34671fa2bb8a686cd2e2c770937b8c9be8f1e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=38e34671fa2bb8a686cd2e2c770937b8c9be8f1e", "patch": "@@ -1,3 +1,8 @@\n+2016-10-14  Eelis van der Weegen  <eelis@eelis.net>\n+\n+\t* include/bits/stl_algo.h (shuffle): Extract two random numbers from\n+\teach generator invocation when its range is large enough.\n+\n 2016-10-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/experimental/algorithm/sample.cc: Qualify calls to"}, {"sha": "db99cb8a0a69dd7790c27f8e8c7d01bd97032194", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e34671fa2bb8a686cd2e2c770937b8c9be8f1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e34671fa2bb8a686cd2e2c770937b8c9be8f1e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=38e34671fa2bb8a686cd2e2c770937b8c9be8f1e", "patch": "@@ -3772,6 +3772,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename std::make_unsigned<_DistanceType>::type __ud_type;\n       typedef typename std::uniform_int_distribution<__ud_type> __distr_type;\n       typedef typename __distr_type::param_type __p_type;\n+\n+      typedef typename std::remove_reference<_UniformRandomNumberGenerator>::type _Gen;\n+      typedef typename std::common_type<typename _Gen::result_type, __ud_type>::type __uc_type;\n+\n+      const __uc_type __urngrange = __g.max() - __g.min();\n+      const __uc_type __urange = __uc_type(__last - __first);\n+\n+      if (__urngrange / __urange >= __urange)\n+        // I.e. (__urngrange >= __urange * __urange) but without wrap issues.\n+      {\n+\t_RandomAccessIterator __i = __first + 1;\n+\n+\t// Since we know the range isn't empty, an even number of elements\n+\t// means an uneven number of elements /to swap/, in which case we\n+\t// do the first one up front:\n+\n+\tif ((__urange % 2) == 0)\n+\t{\n+\t  __distr_type __d{0, 1};\n+\t  std::iter_swap(__i++, __first + __d(__g));\n+\t}\n+\n+\t// Now we know that __last - __i is even, so we do the rest in pairs,\n+\t// using a single distribution invocation to produce swap positions\n+\t// for two successive elements at a time:\n+\n+\twhile (__i != __last)\n+\t{\n+\t  const __uc_type __swap_range = __uc_type(__i - __first) + 1;\n+\t  const __uc_type __comp_range = __swap_range * (__swap_range + 1);\n+\n+\t  std::uniform_int_distribution<__uc_type> __d{0, __comp_range - 1};\n+\t  const __uc_type __pospos = __d(__g);\n+\n+\t  std::iter_swap(__i++, __first + (__pospos % __swap_range));\n+\t  std::iter_swap(__i++, __first + (__pospos / __swap_range));\n+\t}\n+\n+\treturn;\n+      }\n+\n       __distr_type __d;\n \n       for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)"}]}