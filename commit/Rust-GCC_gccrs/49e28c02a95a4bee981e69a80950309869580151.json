{"sha": "49e28c02a95a4bee981e69a80950309869580151", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDllMjhjMDJhOTVhNGJlZTk4MWU2OWE4MDk1MDMwOTg2OTU4MDE1MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-28T16:43:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-28T16:43:15Z"}, "message": "ubsan: Fix ICEs with DECL_REGISTER tests [PR101624]\n\nThe following testcase ICEs, because the base is a CONST_DECL for\nthe Fortran parameter, and ubsan/sanopt uses DECL_REGISTER macro on it.\n /* In VAR_DECL and PARM_DECL nodes, nonzero means declared `register'.  */\n #define DECL_REGISTER(NODE) (DECL_WRTL_CHECK (NODE)->decl_common.decl_flag_0)\nwhile CONST_DECL doesn't satisfy DECL_WRTL_CHECK.\n\nThe following patch checks explicitly for VAR_DECL/PARM_DECL/RESULT_DECL\nonly before using DECL_REGISTER, assumes other decls aren't DECL_REGISTER.\nNot really sure about RESULT_DECL but it at least satisfies DECL_WRTL_CHECK...\n\n2021-07-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/101624\n\t* ubsan.c (maybe_instrument_pointer_overflow,\n\tinstrument_object_size): Only test DECL_REGISTER on VAR_DECLs,\n\tPARM_DECLs or RESULT_DECLs.\n\t* sanopt.c (maybe_optimize_ubsan_ptr_ifn): Likewise.\n\n\t* gfortran.dg/ubsan/ubsan.exp: New file.\n\t* gfortran.dg/ubsan/pr101624.f90: New test.", "tree": {"sha": "25cbd3dff9461094f89a830998158206f14f4d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25cbd3dff9461094f89a830998158206f14f4d4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49e28c02a95a4bee981e69a80950309869580151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e28c02a95a4bee981e69a80950309869580151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e28c02a95a4bee981e69a80950309869580151", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e28c02a95a4bee981e69a80950309869580151/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4fc4df94f703e3b191f503ebe7186500e45d081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fc4df94f703e3b191f503ebe7186500e45d081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4fc4df94f703e3b191f503ebe7186500e45d081"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "2e401554abf9b228a658eecbd18cfc21175a19e0", "filename": "gcc/sanopt.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e28c02a95a4bee981e69a80950309869580151/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e28c02a95a4bee981e69a80950309869580151/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=49e28c02a95a4bee981e69a80950309869580151", "patch": "@@ -492,7 +492,10 @@ maybe_optimize_ubsan_ptr_ifn (sanopt_ctx *ctx, gimple *stmt)\n \t\t\t\t  &unsignedp, &reversep, &volatilep);\n       if ((offset == NULL_TREE || TREE_CODE (offset) == INTEGER_CST)\n \t  && DECL_P (base)\n-\t  && !DECL_REGISTER (base)\n+\t  && ((!VAR_P (base)\n+\t       && TREE_CODE (base) != PARM_DECL\n+\t       && TREE_CODE (base) != RESULT_DECL)\n+\t      || !DECL_REGISTER (base))\n \t  && pbitpos.is_constant (&bitpos))\n \t{\n \t  offset_int expr_offset;"}, {"sha": "51783c8ddadd1f3176c17c025176d0fc7b2e3729", "filename": "gcc/testsuite/gfortran.dg/ubsan/pr101624.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e28c02a95a4bee981e69a80950309869580151/gcc%2Ftestsuite%2Fgfortran.dg%2Fubsan%2Fpr101624.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e28c02a95a4bee981e69a80950309869580151/gcc%2Ftestsuite%2Fgfortran.dg%2Fubsan%2Fpr101624.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fubsan%2Fpr101624.f90?ref=49e28c02a95a4bee981e69a80950309869580151", "patch": "@@ -0,0 +1,13 @@\n+! PR middle-end/101624\n+! { dg-do compile }\n+! { dg-options \"-O2 -fsanitize=undefined\" }\n+\n+complex function foo (x)\n+  complex, intent(in) :: x\n+  foo = aimag (x)\n+end\n+program pr101624\n+  complex, parameter :: a = (0.0, 1.0)\n+  complex :: b, foo\n+  b = foo (a)\n+end"}, {"sha": "e44d946c4a0f0f2a787df8103e099639f742af5d", "filename": "gcc/testsuite/gfortran.dg/ubsan/ubsan.exp", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e28c02a95a4bee981e69a80950309869580151/gcc%2Ftestsuite%2Fgfortran.dg%2Fubsan%2Fubsan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e28c02a95a4bee981e69a80950309869580151/gcc%2Ftestsuite%2Fgfortran.dg%2Fubsan%2Fubsan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fubsan%2Fubsan.exp?ref=49e28c02a95a4bee981e69a80950309869580151", "patch": "@@ -0,0 +1,38 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite for gfortran that checks undefined behavior sanitizer.\n+\n+# Load support procs.\n+load_lib gfortran-dg.exp\n+load_lib ubsan-dg.exp\n+\n+\n+# Initialize `dg'.\n+dg-init\n+ubsan_init\n+\n+# Main loop.\n+if [check_effective_target_fsanitize_undefined] {\n+    gfortran-dg-runtest [lsort \\\n+       [glob -nocomplain $srcdir/$subdir/*.\\[fF\\]{,90,95,03,08} ] ] \"\" \"\"\n+}\n+\n+# All done.\n+ubsan_finish\n+dg-finish"}, {"sha": "ba9adf0ad96cac4aa80571d529ce59455a827f2c", "filename": "gcc/ubsan.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e28c02a95a4bee981e69a80950309869580151/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e28c02a95a4bee981e69a80950309869580151/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=49e28c02a95a4bee981e69a80950309869580151", "patch": "@@ -1443,7 +1443,10 @@ maybe_instrument_pointer_overflow (gimple_stmt_iterator *gsi, tree t)\n   tree base;\n   if (decl_p)\n     {\n-      if (DECL_REGISTER (inner))\n+      if ((VAR_P (inner)\n+\t   || TREE_CODE (inner) == PARM_DECL\n+\t   || TREE_CODE (inner) == RESULT_DECL)\n+\t  && DECL_REGISTER (inner))\n \treturn;\n       base = inner;\n       /* If BASE is a fixed size automatic variable or\n@@ -2115,7 +2118,10 @@ instrument_object_size (gimple_stmt_iterator *gsi, tree t, bool is_lhs)\n   tree base;\n   if (decl_p)\n     {\n-      if (DECL_REGISTER (inner))\n+      if ((VAR_P (inner)\n+\t   || TREE_CODE (inner) == PARM_DECL\n+\t   || TREE_CODE (inner) == RESULT_DECL)\n+\t  && DECL_REGISTER (inner))\n \treturn;\n       base = inner;\n     }"}]}