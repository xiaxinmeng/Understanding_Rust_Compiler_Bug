{"sha": "fc76e42593c62945254b41d590c6b92e61ccdff7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3NmU0MjU5M2M2Mjk0NTI1NGI0MWQ1OTBjNmI5MmU2MWNjZGZmNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-08T23:30:46Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-08T23:30:46Z"}, "message": "(default_conversion, build_binary_op, build_function_call): Use STRIP_NOPS.\n\nFrom-SVN: r1534", "tree": {"sha": "150d5aa4194c7ce49af91e74f18ab76dda5eac2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/150d5aa4194c7ce49af91e74f18ab76dda5eac2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc76e42593c62945254b41d590c6b92e61ccdff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc76e42593c62945254b41d590c6b92e61ccdff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc76e42593c62945254b41d590c6b92e61ccdff7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc76e42593c62945254b41d590c6b92e61ccdff7/comments", "author": null, "committer": null, "parents": [{"sha": "d964285ca2090dbdc538fcf16f0a42da36f89d0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d964285ca2090dbdc538fcf16f0a42da36f89d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d964285ca2090dbdc538fcf16f0a42da36f89d0f"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "2a8a5c17c713b5f60a644ed1da4bd22d82680666", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc76e42593c62945254b41d590c6b92e61ccdff7/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc76e42593c62945254b41d590c6b92e61ccdff7/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=fc76e42593c62945254b41d590c6b92e61ccdff7", "patch": "@@ -889,9 +889,8 @@ default_conversion (exp)\n       type = TREE_TYPE (exp);\n     }\n \n-  /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n-  if (TREE_CODE (exp) == NON_LVALUE_EXPR)\n-    exp = TREE_OPERAND (exp, 0);\n+  /* Strip NON_LVALUE_EXPRs, etc., since we aren't using as an lvalue.  */\n+  STRIP_NOPS (exp);\n \n   /* Normally convert enums to int,\n      but convert wide enums to something wider.  */\n@@ -1774,9 +1773,8 @@ build_function_call (function, params)\n   register tree coerced_params;\n   tree name = NULL_TREE;\n \n-  /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n-  if (TREE_CODE (function) == NON_LVALUE_EXPR)\n-    function = TREE_OPERAND (function, 0);\n+  /* Strip NON_LVALUE_EXPRs, etc., since we aren't using as an lvalue.  */\n+  STRIP_NOPS (function);\n \n   /* Convert anything with function type to a pointer-to-function.  */\n   if (TREE_CODE (function) == FUNCTION_DECL)\n@@ -1907,6 +1905,8 @@ convert_arguments (typelist, values, name)\n \t}\n \n       /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n+      /* Do not use STRIP_NOPS here!  We do not want an enumerator with value 0\n+\t to convert automatically to a pointer.  */\n       if (TREE_CODE (val) == NON_LVALUE_EXPR)\n \tval = TREE_OPERAND (val, 0);\n \n@@ -2225,11 +2225,9 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n   code0 = TREE_CODE (type0);\n   code1 = TREE_CODE (type1);\n \n-  /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n-  if (TREE_CODE (op0) == NON_LVALUE_EXPR)\n-    op0 = TREE_OPERAND (op0, 0);\n-  if (TREE_CODE (op1) == NON_LVALUE_EXPR)\n-    op1 = TREE_OPERAND (op1, 0);\n+  /* Strip NON_LVALUE_EXPRs, etc., since we aren't using as an lvalue.  */\n+  STRIP_NOPS (op0);\n+  STRIP_NOPS (op1);\n \n   /* If an error was already reported for one of the arguments,\n      avoid reporting another error.  */\n@@ -3761,6 +3759,8 @@ build_modify_expr (lhs, modifycode, rhs)\n     return error_mark_node;\n \n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n+  /* Do not use STRIP_NOPS here.  We do not want an enumerator\n+     whose value is 0 to count as a null pointer constant.  */\n   if (TREE_CODE (rhs) == NON_LVALUE_EXPR)\n     rhs = TREE_OPERAND (rhs, 0);\n \n@@ -3920,6 +3920,8 @@ convert_for_assignment (type, rhs, errtype, funname, parmnum)\n   register enum tree_code coder;\n \n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n+  /* Do not use STRIP_NOPS here.  We do not want an enumerator\n+     whose value is 0 to count as a null pointer constant.  */\n   if (TREE_CODE (rhs) == NON_LVALUE_EXPR)\n     rhs = TREE_OPERAND (rhs, 0);\n \n@@ -4507,6 +4509,8 @@ digest_init (type, init, tail, require_constant, constructor_constant, ofwhat)\n     return init;\n \n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n+  /* Do not use STRIP_NOPS here.  We do not want an enumerator\n+     whose value is 0 to count as a null pointer constant.  */\n   if (TREE_CODE (init) == NON_LVALUE_EXPR)\n     inside_init = TREE_OPERAND (init, 0);\n "}]}