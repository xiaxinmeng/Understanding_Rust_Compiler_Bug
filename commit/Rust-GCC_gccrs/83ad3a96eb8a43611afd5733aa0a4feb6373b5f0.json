{"sha": "83ad3a96eb8a43611afd5733aa0a4feb6373b5f0", "node_id": "C_kwDOANBUbNoAKDgzYWQzYTk2ZWI4YTQzNjExYWZkNTczM2FhMGE0ZmViNjM3M2I1ZjA", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-01-21T12:04:20Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-02-03T13:06:45Z"}, "message": "Assert that backedges are available in path solver.\n\ngcc/ChangeLog:\n\n\t* cfganal.cc (verify_marked_backedges): New.\n\t* cfganal.h (verify_marked_backedges): New.\n\t* gimple-range-path.cc (path_range_query::path_range_query):\n\tVerify freshness of back edges.\n\t* tree-ssa-loop-ch.cc (ch_base::copy_headers): Call\n\tmark_dfs_back_edges.\n\t* tree-ssa-threadbackward.cc (back_threader::back_threader): Move\n\tpath_range_query construction after backedges have been\n\tupdated.", "tree": {"sha": "1789c09c63ee0d07a1ac8a49777bd6bd34ab4113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1789c09c63ee0d07a1ac8a49777bd6bd34ab4113"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "635504510a9410844991c68880f2e7352cacfd86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635504510a9410844991c68880f2e7352cacfd86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635504510a9410844991c68880f2e7352cacfd86"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "d76d47a5dc38d7db6ab2d17b0391244affc89c6e", "filename": "gcc/cfganal.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0/gcc%2Fcfganal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0/gcc%2Fcfganal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.cc?ref=83ad3a96eb8a43611afd5733aa0a4feb6373b5f0", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"cfganal.h\"\n #include \"cfgloop.h\"\n+#include \"diagnostic.h\"\n \n namespace {\n /* Store the data structures necessary for depth-first search.  */\n@@ -141,6 +142,40 @@ mark_dfs_back_edges (void)\n   return mark_dfs_back_edges (cfun);\n }\n \n+/* Return TRUE if EDGE_DFS_BACK is up to date for CFUN.  */\n+\n+void\n+verify_marked_backedges (struct function *fun)\n+{\n+  auto_edge_flag saved_dfs_back (fun);\n+  basic_block bb;\n+  edge e;\n+  edge_iterator ei;\n+\n+  // Save all the back edges...\n+  FOR_EACH_BB_FN (bb, fun)\n+    FOR_EACH_EDGE (e, ei, bb->succs)\n+      {\n+\tif (e->flags & EDGE_DFS_BACK)\n+\t  {\n+\t    e->flags |= saved_dfs_back;\n+\t    e->flags &= ~EDGE_DFS_BACK;\n+\t  }\n+      }\n+\n+  // ...and verify that recalculating them agrees with the saved ones.\n+  mark_dfs_back_edges ();\n+  FOR_EACH_BB_FN (bb, fun)\n+    FOR_EACH_EDGE (e, ei, bb->succs)\n+      {\n+\tif (((e->flags & EDGE_DFS_BACK) != 0)\n+\t    != ((e->flags & saved_dfs_back) != 0))\n+\t  internal_error (\"%<verify_marked_backedges%> failed\");\n+\n+\te->flags &= ~saved_dfs_back;\n+      }\n+}\n+\n /* Find unreachable blocks.  An unreachable block will have 0 in\n    the reachable bit in block->flags.  A nonzero value indicates the\n    block is reachable.  */"}, {"sha": "bb402390db1bd45d2c326e77a6143c46a915ba67", "filename": "gcc/cfganal.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0/gcc%2Fcfganal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0/gcc%2Fcfganal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.h?ref=83ad3a96eb8a43611afd5733aa0a4feb6373b5f0", "patch": "@@ -51,6 +51,7 @@ class control_dependences\n \n extern bool mark_dfs_back_edges (struct function *);\n extern bool mark_dfs_back_edges (void);\n+extern void verify_marked_backedges (struct function *);\n extern void find_unreachable_blocks (void);\n extern void verify_no_unreachable_blocks (void);\n struct edge_list * create_edge_list (void);"}, {"sha": "3bf9bd1e981d953b08ee14de8dd9a9ff3026242a", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=83ad3a96eb8a43611afd5733aa0a4feb6373b5f0", "patch": "@@ -48,6 +48,9 @@ path_range_query::path_range_query (bool resolve, gimple_ranger *ranger)\n     m_ranger = ranger;\n \n   m_oracle = new path_oracle (m_ranger->oracle ());\n+\n+  if (m_resolve && flag_checking)\n+    verify_marked_backedges (cfun);\n }\n \n path_range_query::~path_range_query ()"}, {"sha": "2f5a390404c57fd424ad539c11cc87624e48adfd", "filename": "gcc/tree-ssa-loop-ch.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0/gcc%2Ftree-ssa-loop-ch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0/gcc%2Ftree-ssa-loop-ch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.cc?ref=83ad3a96eb8a43611afd5733aa0a4feb6373b5f0", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"value-range.h\"\n #include \"gimple-range.h\"\n #include \"gimple-range-path.h\"\n+#include \"cfganal.h\"\n \n /* Duplicates headers of loops if they are small enough, so that the statements\n    in the loop body are always executed when the loop is entered.  This\n@@ -384,6 +385,7 @@ ch_base::copy_headers (function *fun)\n   auto_vec<loop_p> candidates;\n   auto_vec<std::pair<edge, loop_p> > copied;\n \n+  mark_dfs_back_edges ();\n   path_range_query *query = new path_range_query;\n   for (auto loop : loops_list (cfun, 0))\n     {"}, {"sha": "3519aca84cd4ec412048b748f4b8bd33020026ab", "filename": "gcc/tree-ssa-threadbackward.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0/gcc%2Ftree-ssa-threadbackward.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ad3a96eb8a43611afd5733aa0a4feb6373b5f0/gcc%2Ftree-ssa-threadbackward.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.cc?ref=83ad3a96eb8a43611afd5733aa0a4feb6373b5f0", "patch": "@@ -142,12 +142,12 @@ back_threader::back_threader (function *fun, unsigned flags, bool first)\n \n   m_fun = fun;\n   m_flags = flags;\n-  m_solver = new path_range_query (flags & BT_RESOLVE);\n   m_last_stmt = NULL;\n \n   // The path solver needs EDGE_DFS_BACK in resolving mode.\n   if (flags & BT_RESOLVE)\n     mark_dfs_back_edges ();\n+  m_solver = new path_range_query (flags & BT_RESOLVE);\n }\n \n back_threader::~back_threader ()"}]}