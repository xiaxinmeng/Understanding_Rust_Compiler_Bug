{"sha": "e7951b3f2642bc5f777e177b6df1ba9e4d912988", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc5NTFiM2YyNjQyYmM1Zjc3N2UxNzdiNmRmMWJhOWU0ZDkxMjk4OA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-28T05:20:58Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-28T05:20:58Z"}, "message": "entered into RCS\n\nFrom-SVN: r1110", "tree": {"sha": "c2117ee3293ee54e736f6a522d1539b68898079b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2117ee3293ee54e736f6a522d1539b68898079b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7951b3f2642bc5f777e177b6df1ba9e4d912988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7951b3f2642bc5f777e177b6df1ba9e4d912988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7951b3f2642bc5f777e177b6df1ba9e4d912988", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7951b3f2642bc5f777e177b6df1ba9e4d912988/comments", "author": null, "committer": null, "parents": [{"sha": "1185c45527d3ef1849feb1b9c24c21b96f2e06d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1185c45527d3ef1849feb1b9c24c21b96f2e06d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1185c45527d3ef1849feb1b9c24c21b96f2e06d7"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "699532efbb4d52d0fd9c75b69c4316e0b6d7fa60", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7951b3f2642bc5f777e177b6df1ba9e4d912988/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7951b3f2642bc5f777e177b6df1ba9e4d912988/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e7951b3f2642bc5f777e177b6df1ba9e4d912988", "patch": "@@ -2569,12 +2569,16 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \n \t  final_type = result_type;\n \n-\t  /* Handle the case that OP0 does not *contain* a conversion\n+\t  /* Handle the case that OP0 (or OP1) does not *contain* a conversion\n \t     but it *requires* conversion to FINAL_TYPE.  */\n \n-\t  if (op0 == arg0 && TREE_TYPE (op0) != final_type)\n+\t  if ((TYPE_PRECISION (TREE_TYPE (op0))\n+\t       == TYPE_PRECISION (TREE_TYPE (arg0)))\n+\t      && TREE_TYPE (op0) != final_type)\n \t    unsigned0 = TREE_UNSIGNED (TREE_TYPE (op0));\n-\t  if (op1 == arg1 && TREE_TYPE (op1) != final_type)\n+\t  if ((TYPE_PRECISION (TREE_TYPE (op1))\n+\t       == TYPE_PRECISION (TREE_TYPE (arg1)))\n+\t      && TREE_TYPE (op1) != final_type)\n \t    unsigned1 = TREE_UNSIGNED (TREE_TYPE (op1));\n \n \t  /* Now UNSIGNED0 is 1 if ARG0 zero-extends to FINAL_TYPE.  */"}]}