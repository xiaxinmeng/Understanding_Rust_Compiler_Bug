{"sha": "8265ab07f3bbeb672488fdfc6418e0bce89dff9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2NWFiMDdmM2JiZWI2NzI0ODhmZGZjNjQxOGUwYmNlODlkZmY5Yw==", "commit": {"author": {"name": "Cassio Neri", "email": "cassio.neri@gmail.com", "date": "2021-02-24T18:12:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-24T18:25:35Z"}, "message": "libstdc++: More efficient last day of month\n\nThis patch reimplements std::chrono::year_month_day_last:day() which yields the\nlast day of a particular month.  The current implementation uses a look-up table\nimplemented as an unsigned[12] array.  The new implementation instead\nis based on\nthe fact that a month m in [1, 12], except for m == 2 (February), is\neither 31 or\n30 days long and m's length depends on two things: m's parity and whether m >= 8\nor not. These two conditions are determined by the 0th and 3th bit of m and,\ntherefore, cheap and straightforward bit-twiddling can provide the right result.\n\nMeasurements in x86_64 [1] suggest a 10% performance boost.  Although this does\nnot seem to be huge, notice that measurements are done in hot L1 cache\nconditions which might not be very representative of production runs. Also\nfreeing L1 cache from holding the look-up table might allow performance\nimprovements elsewhere.\n\nReferences:\n[1] https://github.com/cassioneri/calendar\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/chrono (year_month_day_last:day): New\n\timplementation.", "tree": {"sha": "210908aa2f048f84d549e864883cecc7387620d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/210908aa2f048f84d549e864883cecc7387620d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8265ab07f3bbeb672488fdfc6418e0bce89dff9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8265ab07f3bbeb672488fdfc6418e0bce89dff9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8265ab07f3bbeb672488fdfc6418e0bce89dff9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8265ab07f3bbeb672488fdfc6418e0bce89dff9c/comments", "author": {"login": "cassioneri", "id": 2662854, "node_id": "MDQ6VXNlcjI2NjI4NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2662854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassioneri", "html_url": "https://github.com/cassioneri", "followers_url": "https://api.github.com/users/cassioneri/followers", "following_url": "https://api.github.com/users/cassioneri/following{/other_user}", "gists_url": "https://api.github.com/users/cassioneri/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassioneri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassioneri/subscriptions", "organizations_url": "https://api.github.com/users/cassioneri/orgs", "repos_url": "https://api.github.com/users/cassioneri/repos", "events_url": "https://api.github.com/users/cassioneri/events{/privacy}", "received_events_url": "https://api.github.com/users/cassioneri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "126793971bee0e92bea237823bdc51a594951faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126793971bee0e92bea237823bdc51a594951faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/126793971bee0e92bea237823bdc51a594951faa"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "feb2c2a1fad83ad3512b5478a55467048701995f", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8265ab07f3bbeb672488fdfc6418e0bce89dff9c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8265ab07f3bbeb672488fdfc6418e0bce89dff9c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=8265ab07f3bbeb672488fdfc6418e0bce89dff9c", "patch": "@@ -1269,9 +1269,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       inline constexpr unsigned __days_per_month[12]\n \t= { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n-\n-      inline constexpr unsigned __last_day[12]\n-\t= { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n     }\n \n     // DAY\n@@ -2576,9 +2573,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr chrono::day\n       day() const noexcept\n       {\n-\tif (!_M_mdl.ok() || (month() == February && _M_y.is_leap()))\n-\t  return chrono::day{29};\n-\treturn chrono::day{__detail::__last_day[unsigned(month()) - 1]};\n+\tconst auto __m = static_cast<unsigned>(month());\n+\n+\t// Excluding February, the last day of month __m is either 30 or 31 or,\n+\t// in another words, it is 30 + b = 30 | b, where b is in {0, 1}.\n+\n+\t// If __m in {1, 3, 4, 5, 6, 7}, then b is 1 if, and only if __m is odd.\n+\t// Hence, b = __m & 1 = (__m ^ 0) & 1.\n+\n+\t// If __m in {8, 9, 10, 11, 12}, then b is 1 if, and only if __m is even.\n+\t// Hence, b = (__m ^ 1) & 1.\n+\n+\t// Therefore, b = (__m ^ c) & 1, where c = 0, if __m < 8, or c = 1 if\n+\t// __m >= 8, that is, c = __m >> 3.\n+\n+\t// The above mathematically justifies this implementation whose\n+\t// performance does not depend on look-up tables being on the L1 cache.\n+\treturn chrono::day{__m != 2 ? ((__m ^ (__m >> 3)) & 1) | 30\n+\t\t\t\t    : _M_y.is_leap() ? 29 : 28};\n       }\n \n       constexpr"}]}