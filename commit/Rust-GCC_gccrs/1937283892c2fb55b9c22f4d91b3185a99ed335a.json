{"sha": "1937283892c2fb55b9c22f4d91b3185a99ed335a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkzNzI4Mzg5MmMyZmI1NWI5YzIyZjRkOTFiMzE4NWE5OWVkMzM1YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-05-03T11:11:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-03T11:11:34Z"}, "message": "tree-ssa-pre.c (debug_bitmap_sets_for): New function.\n\n2012-05-03  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (debug_bitmap_sets_for): New function.\n\t(union_contains_value): Remove.\n\t(vro_valid_in_sets): Likewise.\n\t(op_valid_in_sets): New function.\n\t(valid_in_sets): Use op_valid_in_sets.\n\t(insert_into_preds_of_block): Move dumping ...\n\t(do_regular_insertion): ... here.\n\t(do_partial_partial_insertion): ... and here.  Dump that\n\twe've found a partial partial redundancy.\n\t(insert): Dump the current insert iteration.\n\nFrom-SVN: r187092", "tree": {"sha": "716bb3049c7ac9d2258ff1f79488886c1ff818dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/716bb3049c7ac9d2258ff1f79488886c1ff818dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1937283892c2fb55b9c22f4d91b3185a99ed335a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1937283892c2fb55b9c22f4d91b3185a99ed335a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1937283892c2fb55b9c22f4d91b3185a99ed335a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1937283892c2fb55b9c22f4d91b3185a99ed335a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68d23306934e79d3a40068349d7eb8507da806c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d23306934e79d3a40068349d7eb8507da806c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d23306934e79d3a40068349d7eb8507da806c6"}], "stats": {"total": 141, "additions": 68, "deletions": 73}, "files": [{"sha": "788574b5290b1fe037a5257873ae5d9f73bb6306", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1937283892c2fb55b9c22f4d91b3185a99ed335a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1937283892c2fb55b9c22f4d91b3185a99ed335a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1937283892c2fb55b9c22f4d91b3185a99ed335a", "patch": "@@ -1,3 +1,16 @@\n+2012-05-03  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (debug_bitmap_sets_for): New function.\n+\t(union_contains_value): Remove.\n+\t(vro_valid_in_sets): Likewise.\n+\t(op_valid_in_sets): New function.\n+\t(valid_in_sets): Use op_valid_in_sets.\n+\t(insert_into_preds_of_block): Move dumping ...\n+\t(do_regular_insertion): ... here.\n+\t(do_partial_partial_insertion): ... and here.  Dump that\n+\twe've found a partial partial redundancy.\n+\t(insert): Dump the current insert iteration.\n+\n 2012-05-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR plugins/53126"}, {"sha": "e27e91471ca252c7d07ec6307c54f3b15ccc4734", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 55, "deletions": 73, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1937283892c2fb55b9c22f4d91b3185a99ed335a/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1937283892c2fb55b9c22f4d91b3185a99ed335a/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=1937283892c2fb55b9c22f4d91b3185a99ed335a", "patch": "@@ -1029,6 +1029,24 @@ debug_bitmap_set (bitmap_set_t set)\n   print_bitmap_set (stderr, set, \"debug\", 0);\n }\n \n+void debug_bitmap_sets_for (basic_block);\n+\n+DEBUG_FUNCTION void\n+debug_bitmap_sets_for (basic_block bb)\n+{\n+  print_bitmap_set (stderr, AVAIL_OUT (bb), \"avail_out\", bb->index);\n+  if (!in_fre)\n+    {\n+      print_bitmap_set (stderr, EXP_GEN (bb), \"exp_gen\", bb->index);\n+      print_bitmap_set (stderr, PHI_GEN (bb), \"phi_gen\", bb->index);\n+      print_bitmap_set (stderr, TMP_GEN (bb), \"tmp_gen\", bb->index);\n+      print_bitmap_set (stderr, ANTIC_IN (bb), \"antic_in\", bb->index);\n+      if (do_partial_partial)\n+\tprint_bitmap_set (stderr, PA_IN (bb), \"pa_in\", bb->index);\n+      print_bitmap_set (stderr, NEW_SETS (bb), \"new_sets\", bb->index);\n+    }\n+}\n+\n /* Print out the expressions that have VAL to OUTFILE.  */\n \n static void\n@@ -2014,57 +2032,19 @@ value_dies_in_block_x (pre_expr expr, basic_block block)\n }\n \n \n-#define union_contains_value(SET1, SET2, VAL)\t\t\t\\\n-  (bitmap_set_contains_value ((SET1), (VAL))\t\t\t\\\n-   || ((SET2) && bitmap_set_contains_value ((SET2), (VAL))))\n+/* Determine if OP is valid in SET1 U SET2, which it is when the union\n+   contains its value-id.  */\n \n-/* Determine if vn_reference_op_t VRO is legal in SET1 U SET2.\n- */\n static bool\n-vro_valid_in_sets (bitmap_set_t set1, bitmap_set_t set2,\n-\t\t   vn_reference_op_t vro)\n+op_valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, tree op)\n {\n-  if (vro->op0 && TREE_CODE (vro->op0) == SSA_NAME)\n-    {\n-      struct pre_expr_d temp;\n-      temp.kind = NAME;\n-      temp.id = 0;\n-      PRE_EXPR_NAME (&temp) = vro->op0;\n-      temp.id = lookup_expression_id (&temp);\n-      if (temp.id == 0)\n-\treturn false;\n-      if (!union_contains_value (set1, set2,\n-\t\t\t\t get_expr_value_id (&temp)))\n-\treturn false;\n-    }\n-  if (vro->op1 && TREE_CODE (vro->op1) == SSA_NAME)\n+  if (op && TREE_CODE (op) == SSA_NAME)\n     {\n-      struct pre_expr_d temp;\n-      temp.kind = NAME;\n-      temp.id = 0;\n-      PRE_EXPR_NAME (&temp) = vro->op1;\n-      temp.id = lookup_expression_id (&temp);\n-      if (temp.id == 0)\n-\treturn false;\n-      if (!union_contains_value (set1, set2,\n-\t\t\t\t get_expr_value_id (&temp)))\n+      unsigned int value_id = VN_INFO (op)->value_id;\n+      if (!bitmap_set_contains_value (set1, value_id)\n+\t  || (set2 && !bitmap_set_contains_value  (set2, value_id)))\n \treturn false;\n     }\n-\n-  if (vro->op2 && TREE_CODE (vro->op2) == SSA_NAME)\n-    {\n-      struct pre_expr_d temp;\n-      temp.kind = NAME;\n-      temp.id = 0;\n-      PRE_EXPR_NAME (&temp) = vro->op2;\n-      temp.id = lookup_expression_id (&temp);\n-      if (temp.id == 0)\n-\treturn false;\n-      if (!union_contains_value (set1, set2,\n-\t\t\t\t get_expr_value_id (&temp)))\n-\treturn false;\n-    }\n-\n   return true;\n }\n \n@@ -2087,21 +2067,8 @@ valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, pre_expr expr,\n \tunsigned int i;\n \tvn_nary_op_t nary = PRE_EXPR_NARY (expr);\n \tfor (i = 0; i < nary->length; i++)\n-\t  {\n-\t    if (TREE_CODE (nary->op[i]) == SSA_NAME)\n-\t      {\n-\t\tstruct pre_expr_d temp;\n-\t\ttemp.kind = NAME;\n-\t\ttemp.id = 0;\n-\t\tPRE_EXPR_NAME (&temp) = nary->op[i];\n-\t\ttemp.id = lookup_expression_id (&temp);\n-\t\tif (temp.id == 0)\n-\t\t  return false;\n-\t\tif (!union_contains_value (set1, set2,\n-\t\t\t\t\t   get_expr_value_id (&temp)))\n-\t\t  return false;\n-\t      }\n-\t  }\n+\t  if (!op_valid_in_sets (set1, set2, nary->op[i]))\n+\t    return false;\n \t/* If the NARY may trap make sure the block does not contain\n \t   a possible exit point.\n \t   ???  This is overly conservative if we translate AVAIL_OUT\n@@ -2120,7 +2087,9 @@ valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, pre_expr expr,\n \n \tFOR_EACH_VEC_ELT (vn_reference_op_s, ref->operands, i, vro)\n \t  {\n-\t    if (!vro_valid_in_sets (set1, set2, vro))\n+\t    if (!op_valid_in_sets (set1, set2, vro->op0)\n+\t\t|| !op_valid_in_sets (set1, set2, vro->op1)\n+\t\t|| !op_valid_in_sets (set1, set2, vro->op2))\n \t      return false;\n \t  }\n \treturn true;\n@@ -3330,13 +3299,6 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n   tree temp;\n   gimple phi;\n \n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    {\n-      fprintf (dump_file, \"Found partial redundancy for expression \");\n-      print_pre_expr (dump_file, expr);\n-      fprintf (dump_file, \" (%04d)\\n\", val);\n-    }\n-\n   /* Make sure we aren't creating an induction variable.  */\n   if (block->loop_depth > 0 && EDGE_COUNT (block->preds) == 2)\n     {\n@@ -3651,11 +3613,21 @@ do_regular_insertion (basic_block block, basic_block dom)\n \t\t\t       \"optimized for speed edge\\n\", val);\n \t\t    }\n \t\t}\n-\t      else if (dbg_cnt (treepre_insert)\n-\t\t       && insert_into_preds_of_block (block,\n-\t\t\t\t\t\t      get_expression_id (expr),\n-\t\t\t\t\t\t      avail))\n-\t\tnew_stuff = true;\n+\t      else if (dbg_cnt (treepre_insert))\n+\t\t{\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    {\n+\t\t      fprintf (dump_file, \"Found partial redundancy for \"\n+\t\t\t       \"expression \");\n+\t\t      print_pre_expr (dump_file, expr);\n+\t\t      fprintf (dump_file, \" (%04d)\\n\",\n+\t\t\t       get_expr_value_id (expr));\n+\t\t    }\n+\t\t  if (insert_into_preds_of_block (block,\n+\t\t\t\t\t\t  get_expression_id (expr),\n+\t\t\t\t\t\t  avail))\n+\t\t    new_stuff = true;\n+\t\t}\n \t    }\n \t  /* If all edges produce the same value and that value is\n \t     an invariant, then the PHI has the same value on all\n@@ -3813,6 +3785,14 @@ do_partial_partial_insertion (basic_block block, basic_block dom)\n \t      else if (dbg_cnt (treepre_insert))\n \t\t{\n \t\t  pre_stats.pa_insert++;\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    {\n+\t\t      fprintf (dump_file, \"Found partial partial redundancy \"\n+\t\t\t       \"for expression \");\n+\t\t      print_pre_expr (dump_file, expr);\n+\t\t      fprintf (dump_file, \" (%04d)\\n\",\n+\t\t\t       get_expr_value_id (expr));\n+\t\t    }\n \t\t  if (insert_into_preds_of_block (block,\n \t\t\t\t\t\t  get_expression_id (expr),\n \t\t\t\t\t\t  avail))\n@@ -3888,6 +3868,8 @@ insert (void)\n   while (new_stuff)\n     {\n       num_iterations++;\n+      if (dump_file && dump_flags & TDF_DETAILS)\n+\tfprintf (dump_file, \"Starting insert iteration %d\\n\", num_iterations);\n       new_stuff = insert_aux (ENTRY_BLOCK_PTR);\n     }\n   statistics_histogram_event (cfun, \"insert iterations\", num_iterations);"}]}