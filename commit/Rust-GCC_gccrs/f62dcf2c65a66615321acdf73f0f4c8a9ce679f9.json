{"sha": "f62dcf2c65a66615321acdf73f0f4c8a9ce679f9", "node_id": "C_kwDOANBUbNoAKGY2MmRjZjJjNjVhNjY2MTUzMjFhY2RmNzNmMGY0YzhhOWNlNjc5Zjk", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-01-31T14:39:29Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:21Z"}, "message": "gccrs: Add missing Sized, Copy and Clone lang item mappings\n\nWe need these lang items to be defined and later down the line the mappings\nwill be used to implement proper copy and clone logic.\n\nFixes #1786\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* util/rust-lang-item.h:\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-1786.rs: New test.", "tree": {"sha": "79a78ac5e6eaf11b807849e69c195f9c010e1dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79a78ac5e6eaf11b807849e69c195f9c010e1dcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f62dcf2c65a66615321acdf73f0f4c8a9ce679f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62dcf2c65a66615321acdf73f0f4c8a9ce679f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f62dcf2c65a66615321acdf73f0f4c8a9ce679f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62dcf2c65a66615321acdf73f0f4c8a9ce679f9/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a2e6712ba03437857c1b39ed0ce1ca7b0974318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2e6712ba03437857c1b39ed0ce1ca7b0974318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2e6712ba03437857c1b39ed0ce1ca7b0974318"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "c5ef6200fb4fa5f560bbac8de522f09cb44c61ab", "filename": "gcc/rust/util/rust-lang-item.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62dcf2c65a66615321acdf73f0f4c8a9ce679f9/gcc%2Frust%2Futil%2Frust-lang-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62dcf2c65a66615321acdf73f0f4c8a9ce679f9/gcc%2Frust%2Futil%2Frust-lang-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-lang-item.h?ref=f62dcf2c65a66615321acdf73f0f4c8a9ce679f9", "patch": "@@ -80,6 +80,12 @@ class RustLangItem\n     FN_ONCE,\n     FN_ONCE_OUTPUT,\n \n+    // markers\n+    COPY,\n+    CLONE,\n+    SIZED,\n+\n+    // delimiter\n     UNKNOWN,\n   };\n \n@@ -237,6 +243,18 @@ class RustLangItem\n       {\n \treturn ItemType::FN_ONCE_OUTPUT;\n       }\n+    else if (item.compare (\"copy\") == 0)\n+      {\n+\treturn ItemType::COPY;\n+      }\n+    else if (item.compare (\"clone\") == 0)\n+      {\n+\treturn ItemType::CLONE;\n+      }\n+    else if (item.compare (\"sized\") == 0)\n+      {\n+\treturn ItemType::SIZED;\n+      }\n \n     return ItemType::UNKNOWN;\n   }\n@@ -321,6 +339,12 @@ class RustLangItem\n \treturn \"fn_once\";\n       case FN_ONCE_OUTPUT:\n \treturn \"fn_once_output\";\n+      case COPY:\n+\treturn \"copy\";\n+      case CLONE:\n+\treturn \"clone\";\n+      case SIZED:\n+\treturn \"sized\";\n \n       case UNKNOWN:\n \treturn \"<UNKNOWN>\";"}, {"sha": "f73b63d0cb679ad38217120acfb6b0387d5af51c", "filename": "gcc/testsuite/rust/compile/issue-1786.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62dcf2c65a66615321acdf73f0f4c8a9ce679f9/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1786.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62dcf2c65a66615321acdf73f0f4c8a9ce679f9/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1786.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1786.rs?ref=f62dcf2c65a66615321acdf73f0f4c8a9ce679f9", "patch": "@@ -0,0 +1,23 @@\n+#[lang = \"clone\"]\n+trait Clone {\n+    fn clone(&self) -> Self;\n+\n+    fn clone_from(&mut self, source: &Self) {\n+        *self = source.clone()\n+    }\n+}\n+\n+#[lang = \"copy\"]\n+pub trait Copy: Clone {\n+    // Empty.\n+}\n+\n+mod impls {\n+    use super::Clone;\n+\n+    impl Clone for char {\n+        fn clone(&self) -> Self {\n+            *self\n+        }\n+    }\n+}"}]}