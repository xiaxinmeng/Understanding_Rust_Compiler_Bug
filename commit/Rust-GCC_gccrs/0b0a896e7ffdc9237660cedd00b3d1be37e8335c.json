{"sha": "0b0a896e7ffdc9237660cedd00b3d1be37e8335c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIwYTg5NmU3ZmZkYzkyMzc2NjBjZWRkMDBiM2QxYmUzN2U4MzM1Yw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-07-12T17:42:04Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-07-12T17:42:04Z"}, "message": "re PR target/71805 (incorrect code for test pr45752.c with -mcpu=power9)\n\n[gcc]\n2016-07-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/71805\n\t* config/rs6000/altivec.md (altivec_vperm_<mode>_internal):\n\tThe xxperm and xxpermr instructions require that the 2nd input\n\toperand overlap with the output operand, and not the 1st.\n\t(altivec_vperm_v8hiv16qi): Likewise.\n\t(altivec_vperm_<mode>_uns_internal): Likewise.\n\t(altivec_vpermr_<mode>_internal): Likewise.\n\t(vperm_v8hiv4si): Likewise.\n\t(vperm_v16qiv8hi): Likewise.\n\n[gcc/testsuite]\n2016-07-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/71805\n\t* gcc.target/powerpc/pr71805.c: New test.\n\nFrom-SVN: r238256", "tree": {"sha": "75dca43273b631235b5bcddda99840df7b3477d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75dca43273b631235b5bcddda99840df7b3477d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b0a896e7ffdc9237660cedd00b3d1be37e8335c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0a896e7ffdc9237660cedd00b3d1be37e8335c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0a896e7ffdc9237660cedd00b3d1be37e8335c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0a896e7ffdc9237660cedd00b3d1be37e8335c/comments", "author": null, "committer": null, "parents": [{"sha": "b88bd5e0ca120822fc2fbac03a903c5b2efdde06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b88bd5e0ca120822fc2fbac03a903c5b2efdde06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b88bd5e0ca120822fc2fbac03a903c5b2efdde06"}], "stats": {"total": 166, "additions": 148, "deletions": 18}, "files": [{"sha": "b8db66377f2e4634f95f8aece98aae295cdd0430", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0a896e7ffdc9237660cedd00b3d1be37e8335c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0a896e7ffdc9237660cedd00b3d1be37e8335c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b0a896e7ffdc9237660cedd00b3d1be37e8335c", "patch": "@@ -1,3 +1,15 @@\n+2016-07-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/71805\n+\t* config/rs6000/altivec.md (altivec_vperm_<mode>_internal):\n+\tThe xxperm and xxpermr instructions require that the 2nd input\n+\toperand overlap with the output operand, and not the 1st.\n+\t(altivec_vperm_v8hiv16qi): Likewise.\n+\t(altivec_vperm_<mode>_uns_internal): Likewise.\n+\t(altivec_vpermr_<mode>_internal): Likewise.\n+\t(vperm_v8hiv4si): Likewise.\n+\t(vperm_v16qiv8hi): Likewise.\n+\n 2016-07-12  Martin Liska  <mliska@suse.cz>\n \n \t* params.def: Add avg-loop niter."}, {"sha": "aa01ac9de8d94cf3dab28aaf8c47a1447d22dc01", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0a896e7ffdc9237660cedd00b3d1be37e8335c/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0a896e7ffdc9237660cedd00b3d1be37e8335c/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=0b0a896e7ffdc9237660cedd00b3d1be37e8335c", "patch": "@@ -1985,27 +1985,27 @@\n ;; Slightly prefer vperm, since the target does not overlap the source\n (define_insn \"*altivec_vperm_<mode>_internal\"\n   [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,0\")\n-\t\t    (match_operand:VM 2 \"register_operand\" \"v,wo\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,wo\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v,0\")\n \t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n-   xxperm %x0,%x2,%x3\"\n+   xxperm %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"altivec_vperm_v8hiv16qi\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v,?wo\")\n-\t(unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v,0\")\n-   \t               (match_operand:V8HI 2 \"register_operand\" \"v,wo\")\n+\t(unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v,wo\")\n+   \t               (match_operand:V8HI 2 \"register_operand\" \"v,0\")\n \t\t       (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n-   xxperm %x0,%x2,%x3\"\n+   xxperm %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2026,14 +2026,14 @@\n \n (define_insn \"*altivec_vperm_<mode>_uns_internal\"\n   [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,0\")\n-\t\t    (match_operand:VM 2 \"register_operand\" \"v,wo\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,wo\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v,0\")\n \t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n \t\t   UNSPEC_VPERM_UNS))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n-   xxperm %x0,%x2,%x3\"\n+   xxperm %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2066,14 +2066,14 @@\n \n (define_insn \"*altivec_vpermr_<mode>_internal\"\n   [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,0\")\n-\t\t    (match_operand:VM 2 \"register_operand\" \"v,wo\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,wo\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v,0\")\n \t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n \t\t   UNSPEC_VPERMR))]\n   \"TARGET_P9_VECTOR\"\n   \"@\n    vpermr %0,%2,%1,%3\n-   xxpermr %x0,%x2,%x3\"\n+   xxpermr %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2895,27 +2895,27 @@\n \n (define_insn \"vperm_v8hiv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v,?wo\")\n-        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v,0\")\n-\t\t      (match_operand:V4SI 2 \"register_operand\" \"v,wo\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v,wo\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"v,0\")\n \t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n                   UNSPEC_VPERMSI))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n-   xxperm %x0,%x2,%x3\"\n+   xxperm %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"vperm_v16qiv8hi\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v,?wo\")\n-        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v,0\")\n-\t\t      (match_operand:V8HI 2 \"register_operand\" \"v,wo\")\n+        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v,wo\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v,0\")\n \t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wo\")]\n                   UNSPEC_VPERMHI))]\n   \"TARGET_ALTIVEC\"\n   \"@\n    vperm %0,%1,%2,%3\n-   xxperm %x0,%x2,%x3\"\n+   xxperm %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n    (set_attr \"length\" \"4\")])\n "}, {"sha": "cb2c9e0afc2585949ef11d5d59984275eb78ddd1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0a896e7ffdc9237660cedd00b3d1be37e8335c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0a896e7ffdc9237660cedd00b3d1be37e8335c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b0a896e7ffdc9237660cedd00b3d1be37e8335c", "patch": "@@ -1,3 +1,8 @@\n+2016-07-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/71805\n+\t* gcc.target/powerpc/pr71805.c: New test.\n+\n 2016-07-12  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/divkc3-1.c: New."}, {"sha": "02db059dff9327d67fcd8dc59f8479d56eeb362e", "filename": "gcc/testsuite/gcc.target/powerpc/pr71805.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0a896e7ffdc9237660cedd00b3d1be37e8335c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71805.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0a896e7ffdc9237660cedd00b3d1be37e8335c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71805.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71805.c?ref=0b0a896e7ffdc9237660cedd00b3d1be37e8335c", "patch": "@@ -0,0 +1,113 @@\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O3 --param tree-reassoc-width=1\" } */\n+\n+/* Originally from gcc.dg/vect/pr45752.c.  */\n+#include <stdarg.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+extern void abort (void);\n+extern void exit (int);\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#define M00 100\n+#define M10 216\n+#define M20 23\n+#define M30 237\n+#define M40 437\n+\n+#define M01 1322\n+#define M11 13\n+#define M21 27271\n+#define M31 2280\n+#define M41 284\n+\n+#define M02 74\n+#define M12 191\n+#define M22 500\n+#define M32 111\n+#define M42 1114\n+\n+#define M03 134\n+#define M13 117\n+#define M23 11\n+#define M33 771\n+#define M43 71\n+\n+#define M04 334\n+#define M14 147\n+#define M24 115\n+#define M34 7716\n+#define M44 16\n+\n+#define N 20\n+\n+void foo (unsigned int *__restrict__ pInput,\n+          unsigned int *__restrict__ pOutput,\n+          unsigned int *__restrict__ pInput2,\n+          unsigned int *__restrict__ pOutput2)\n+{\n+  unsigned int i, a, b, c, d, e;\n+\n+  for (i = 0; i < N / 5; i++)\n+    {\n+       a = *pInput++;\n+       b = *pInput++;\n+       c = *pInput++;\n+       d = *pInput++;\n+       e = *pInput++;\n+\n+       *pOutput++ = M00 * a + M01 * b + M02 * c + M03 * d + M04 * e;\n+       *pOutput++ = M10 * a + M11 * b + M12 * c + M13 * d + M14 * e;\n+       *pOutput++ = M20 * a + M21 * b + M22 * c + M23 * d + M24 * e;\n+       *pOutput++ = M30 * a + M31 * b + M32 * c + M33 * d + M34 * e;\n+       *pOutput++ = M40 * a + M41 * b + M42 * c + M43 * d + M44 * e;\n+\n+\n+       a = *pInput2++;\n+       b = *pInput2++;\n+       c = *pInput2++;\n+       d = *pInput2++;\n+       e = *pInput2++;\n+\n+       *pOutput2++ = M00 * a + M01 * b + M02 * c + M03 * d + M04 * e;\n+       *pOutput2++ = M10 * a + M11 * b + M12 * c + M13 * d + M14 * e;\n+       *pOutput2++ = M20 * a + M21 * b + M22 * c + M23 * d + M24 * e;\n+       *pOutput2++ = M30 * a + M31 * b + M32 * c + M33 * d + M34 * e;\n+       *pOutput2++ = M40 * a + M41 * b + M42 * c + M43 * d + M44 * e;\n+\n+    }\n+}\n+\n+int main (int argc, const char* argv[])\n+{\n+  unsigned int input[N], output[N], i, input2[N], output2[N];\n+  unsigned int check_results[N]\n+    = {3208, 1334, 28764, 35679, 2789, 13028, 4754, 168364, 91254, 12399, \n+    22848, 8174, 307964, 146829, 22009, 32668, 11594, 447564, 202404, 31619 };\n+  unsigned int check_results2[N]\n+    = {7136, 2702, 84604, 57909, 6633, 16956, 6122, 224204, 113484, 16243, \n+    26776, 9542, 363804, 169059, 25853, 36596, 12962, 503404, 224634, 35463 };\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      input[i] = i%256;\n+      input2[i] = i + 2;\n+      output[i] = 0;\n+      output2[i] = 0;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  foo (input, output, input2, output2);\n+\n+  for (i = 0; i < N; i++)\n+    if (output[i] != check_results[i]\n+        || output2[i] != check_results2[i])\n+      abort ();\n+\n+  return 0;\n+}"}]}