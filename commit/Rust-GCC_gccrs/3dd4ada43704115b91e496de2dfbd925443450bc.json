{"sha": "3dd4ada43704115b91e496de2dfbd925443450bc", "node_id": "C_kwDOANBUbNoAKDNkZDRhZGE0MzcwNDExNWI5MWU0OTZkZTJkZmJkOTI1NDQzNDUwYmM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-07T00:16:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-07T00:16:44Z"}, "message": "Daily bump.", "tree": {"sha": "a176e5f705fe226c9a302105be58f2c06e718bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a176e5f705fe226c9a302105be58f2c06e718bfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dd4ada43704115b91e496de2dfbd925443450bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd4ada43704115b91e496de2dfbd925443450bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dd4ada43704115b91e496de2dfbd925443450bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd4ada43704115b91e496de2dfbd925443450bc/comments", "author": null, "committer": null, "parents": [{"sha": "1d92cd072ef4b2e4f309eefbcfe64c368d220f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d92cd072ef4b2e4f309eefbcfe64c368d220f29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d92cd072ef4b2e4f309eefbcfe64c368d220f29"}], "stats": {"total": 154, "additions": 153, "deletions": 1}, "files": [{"sha": "e33fbd444012f2391febc9f67217d382e1523321", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd4ada43704115b91e496de2dfbd925443450bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd4ada43704115b91e496de2dfbd925443450bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dd4ada43704115b91e496de2dfbd925443450bc", "patch": "@@ -1,3 +1,35 @@\n+2023-03-06  Paul-Antoine Arras  <pa@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (<expander><mode>3_exec): Add patterns for\n+\t{s|u}{max|min} in QI, HI and DI modes.\n+\t(<expander><mode>3): Add pattern for {s|u}{max|min} in DI mode.\n+\t(cond_<fexpander><mode>): Add pattern for cond_f{max|min}.\n+\t(cond_<expander><mode>): Add pattern for cond_{s|u}{max|min}.\n+\t* config/gcn/gcn.cc (gcn_spill_class): Allow the exec register to be\n+\tsaved in SGPRs.\n+\n+2023-03-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109025\n+\t* tree-vect-loop.cc (vect_is_simple_reduction): Verify\n+\tthe inner LC PHI use is the inner loop PHI latch definition\n+\tbefore classifying an outer PHI as double reduction.\n+\n+2023-03-06  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR target/108429\n+\t* config/i386/x86-tune.def (X86_TUNE_USE_SCATTER_2PARTS): Enable for\n+\tgeneric.\n+\t(X86_TUNE_USE_SCATTER_4PARTS): Likewise.\n+\t(X86_TUNE_USE_SCATTER): Likewise.\n+\n+2023-03-06  Xi Ruoyao  <xry111@xry111.site>\n+\n+\tPR target/109000\n+\t* config/loongarch/loongarch.h (FP_RETURN): Use\n+\tTARGET_*_FLOAT_ABI instead of TARGET_*_FLOAT.\n+\t(UNITS_PER_FP_ARG): Likewise.\n+\n 2023-03-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n \n \t* config/riscv/riscv-vsetvl.cc (reg_available_p): Fix bug."}, {"sha": "c01bc02318c471ce6b694a83d59737ea48e88e8d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd4ada43704115b91e496de2dfbd925443450bc/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd4ada43704115b91e496de2dfbd925443450bc/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3dd4ada43704115b91e496de2dfbd925443450bc", "patch": "@@ -1 +1 @@\n-20230306\n+20230307"}, {"sha": "c3741f744c57995a3bb9b03a0e13aacb9baea62f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd4ada43704115b91e496de2dfbd925443450bc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd4ada43704115b91e496de2dfbd925443450bc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3dd4ada43704115b91e496de2dfbd925443450bc", "patch": "@@ -1,3 +1,19 @@\n+2023-03-06  Javier Miranda  <miranda@adacore.com>\n+\n+\tPR ada/108858\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): For functions with\n+\tseparate spec, if their return type was visible through a limited-\n+\twith context clause, their extra formals were not added when the\n+\tspec was analyzed.  Now the full view must be available, and the\n+\textra formals can be created and Returns_By_Ref computed.\n+\n+2023-03-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/108909\n+\tPR ada/108983\n+\t* Make-generated.in: Do not use GNATMAKE.\n+\t* gcc-interface/Makefile.in: Ditto.\n+\n 2023-02-26  Peter Foley  <pefoley2@pefoley.com>\n \n \tPR ada/108909"}, {"sha": "4c620829c6bdb42e21787b62f8fce00cc5128f69", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd4ada43704115b91e496de2dfbd925443450bc/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd4ada43704115b91e496de2dfbd925443450bc/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=3dd4ada43704115b91e496de2dfbd925443450bc", "patch": "@@ -1,3 +1,7 @@\n+2023-03-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* fr.po, sv.po: Update.\n+\n 2023-02-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,"}, {"sha": "08d5c0ee1e637fac68bf7f6954acbd58647458a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd4ada43704115b91e496de2dfbd925443450bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd4ada43704115b91e496de2dfbd925443450bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3dd4ada43704115b91e496de2dfbd925443450bc", "patch": "@@ -1,3 +1,87 @@\n+2023-03-07  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/analyzer/allocation-size-multiline-3.c: Handle\n+\tint32_t being \"long int\".\n+\n+2023-03-07  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* lib/multiline.exp (_build_multiline_regex): Map\n+\t\"{re:\" to \"(\", similarly \")?\" from \":re?}\" and the\n+\tsame without question mark.\n+\n+2023-03-06  Paul-Antoine Arras  <pa@codesourcery.com>\n+\n+\t* gcc.target/gcn/cond_fmaxnm_1.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_1_run.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_2.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_2_run.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_3.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_3_run.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_4.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_4_run.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_5.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_5_run.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_6.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_6_run.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_7.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_7_run.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_8.c: New test.\n+\t* gcc.target/gcn/cond_fmaxnm_8_run.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_1.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_1_run.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_2.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_2_run.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_3.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_3_run.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_4.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_4_run.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_5.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_5_run.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_6.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_6_run.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_7.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_7_run.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_8.c: New test.\n+\t* gcc.target/gcn/cond_fminnm_8_run.c: New test.\n+\t* gcc.target/gcn/cond_smax_1.c: New test.\n+\t* gcc.target/gcn/cond_smax_1_run.c: New test.\n+\t* gcc.target/gcn/cond_smin_1.c: New test.\n+\t* gcc.target/gcn/cond_smin_1_run.c: New test.\n+\t* gcc.target/gcn/cond_umax_1.c: New test.\n+\t* gcc.target/gcn/cond_umax_1_run.c: New test.\n+\t* gcc.target/gcn/cond_umin_1.c: New test.\n+\t* gcc.target/gcn/cond_umin_1_run.c: New test.\n+\t* gcc.target/gcn/smax_1.c: New test.\n+\t* gcc.target/gcn/smax_1_run.c: New test.\n+\t* gcc.target/gcn/smin_1.c: New test.\n+\t* gcc.target/gcn/smin_1_run.c: New test.\n+\t* gcc.target/gcn/umax_1.c: New test.\n+\t* gcc.target/gcn/umax_1_run.c: New test.\n+\t* gcc.target/gcn/umin_1.c: New test.\n+\t* gcc.target/gcn/umin_1_run.c: New test.\n+\n+2023-03-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109025\n+\t* gcc.dg/vect/pr109025.c: New testcase.\n+\n+2023-03-06  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* gcc.target/loongarch/prolog-opt.c (dg-options): Add\n+\t-fno-stack-protector.\n+\t* gcc.target/loongarch/stack-check-cfa-1.c (dg-options):\n+\tLikewise.\n+\t* gcc.target/loongarch/stack-check-cfa-2.c (dg-options):\n+\tLikewise.\n+\n+2023-03-06  Xi Ruoyao  <xry111@xry111.site>\n+\n+\tPR target/109000\n+\t* gcc.target/loongarch/flt-abi-isa-1.c: New test.\n+\t* gcc.target/loongarch/flt-abi-isa-2.c: New test.\n+\t* gcc.target/loongarch/flt-abi-isa-3.c: New test.\n+\t* gcc.target/loongarch/flt-abi-isa-4.c: New test.\n+\n 2023-03-05  Harald Anlauf  <anlauf@gmx.de>\n \t    Tobias Burnus   <tobias@codesourcery.com>\n "}, {"sha": "bf7062ccfad3563208a9fc2b23e45c834168a36e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd4ada43704115b91e496de2dfbd925443450bc/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd4ada43704115b91e496de2dfbd925443450bc/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=3dd4ada43704115b91e496de2dfbd925443450bc", "patch": "@@ -1,3 +1,19 @@\n+2023-03-06   Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/107299\n+\t* config/rs6000/_divkc3.c (COPYSIGN): Use the correct built-in based on\n+\twhether long double is IBM or IEEE.\n+\t(INFINITY): Likewise.\n+\t(FABS): Likewise.\n+\t* config/rs6000/_mulkc3.c (COPYSIGN): Likewise.\n+\t(INFINITY): Likewise.\n+\t* config/rs6000/quad-float128.h (TF): Remove definition.\n+\t(TFtype): Define to be long double or _Float128.\n+\t(TCtype): Define to be _Complex long double or _Complex _Float128.\n+\t* libgcc2.h (TFtype): Allow machine config files to override this.\n+\t(TCtype): Likewise.\n+\t* soft-fp/quad.h (TFtype): Likewise.\n+\n 2023-02-13  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* config.host (riscv*-*-*): Add config/riscv/value-unwind.h."}]}