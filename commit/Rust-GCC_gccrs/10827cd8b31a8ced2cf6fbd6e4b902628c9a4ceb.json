{"sha": "10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4MjdjZDhiMzFhOGNlZDJjZjZmYmQ2ZTRiOTAyNjI4YzlhNGNlYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-06-13T09:21:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-06-13T09:21:30Z"}, "message": "re PR middle-end/27793 (num_ssa_names inconsistent or immediate use iterator wrong)\n\n\tPR middle-end/27793\n\t* cp-tree.h (cxx_int_tree_map): New struct.\n\t(struct language_function): Add extern_decl_map field.\n\t* name-lookup.c (pushdecl_maybe_friend): Add x -> t mapping\n\tto cp_function_chain->extern_decl_map hash table instead of\n\tcopying over DECL_UID.\n\t* cp-gimplify.c (cxx_int_tree_map_eq, cxx_int_tree_map_hash): New\n\tfunctions.\n\t(cp_genericize_r): Remap DECL_EXTERN local decls using\n\tcp_function_chain->extern_decl_map hash table.\n\t* decl.c (finish_function): Clear extern_decl_map.\n\n\tPR c++/26757\n\tPR c++/27894\n\t* g++.dg/tree-ssa/pr26757.C: New test.\n\t* g++.dg/tree-ssa/pr27894.C: New test.\n\nFrom-SVN: r114607", "tree": {"sha": "db3fc5592b68d1ca71570ab74208c662419bc2e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db3fc5592b68d1ca71570ab74208c662419bc2e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd8d4e24e0b04c77dd709aeea7075d0a6a0f2833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8d4e24e0b04c77dd709aeea7075d0a6a0f2833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8d4e24e0b04c77dd709aeea7075d0a6a0f2833"}], "stats": {"total": 220, "additions": 214, "deletions": 6}, "files": [{"sha": "129f5df0deb08824e32b18904bc2dfe27ed933c0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "patch": "@@ -1,3 +1,17 @@\n+2006-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/27793\n+\t* cp-tree.h (cxx_int_tree_map): New struct.\n+\t(struct language_function): Add extern_decl_map field.\n+\t* name-lookup.c (pushdecl_maybe_friend): Add x -> t mapping\n+\tto cp_function_chain->extern_decl_map hash table instead of\n+\tcopying over DECL_UID.\n+\t* cp-gimplify.c (cxx_int_tree_map_eq, cxx_int_tree_map_hash): New\n+\tfunctions.\n+\t(cp_genericize_r): Remap DECL_EXTERN local decls using\n+\tcp_function_chain->extern_decl_map hash table.\n+\t* decl.c (finish_function): Clear extern_decl_map.\n+\n 2006-06-12  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/27601"}, {"sha": "ca8ff5fcfdeee3793991c6c750b499420a8d6200", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "patch": "@@ -601,6 +601,24 @@ is_invisiref_parm (tree t)\n \t  && DECL_BY_REFERENCE (t));\n }\n \n+/* Return true if the uid in both int tree maps are equal.  */\n+\n+int\n+cxx_int_tree_map_eq (const void *va, const void *vb)\n+{\n+  const struct cxx_int_tree_map *a = (const struct cxx_int_tree_map *) va;\n+  const struct cxx_int_tree_map *b = (const struct cxx_int_tree_map *) vb;\n+  return (a->uid == b->uid);\n+}\n+\n+/* Hash a UID in a cxx_int_tree_map.  */\n+\n+unsigned int\n+cxx_int_tree_map_hash (const void *item)\n+{\n+  return ((const struct cxx_int_tree_map *)item)->uid;\n+}\n+\n /* Perform any pre-gimplification lowering of C++ front end trees to\n    GENERIC.  */\n \n@@ -620,6 +638,25 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       return NULL;\n     }\n \n+  /* Map block scope extern declarations to visible declarations with the\n+     same name and type in outer scopes if any.  */\n+  if (cp_function_chain->extern_decl_map\n+      && (TREE_CODE (stmt) == FUNCTION_DECL || TREE_CODE (stmt) == VAR_DECL)\n+      && DECL_EXTERNAL (stmt))\n+    {\n+      struct cxx_int_tree_map *h, in;\n+      in.uid = DECL_UID (stmt);\n+      h = (struct cxx_int_tree_map *)\n+\t  htab_find_with_hash (cp_function_chain->extern_decl_map,\n+\t\t\t       &in, in.uid);\n+      if (h)\n+\t{\n+\t  *stmt_p = h->to;\n+\t  *walk_subtrees = 0;\n+\t  return NULL;\n+\t}\n+    }\n+\n   /* Other than invisiref parms, don't walk the same tree twice.  */\n   if (pointer_set_contains (p_set, stmt))\n     {"}, {"sha": "c0897a07f73c42baba7176d1b0c16d454e291846", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "patch": "@@ -721,6 +721,15 @@ struct saved_scope GTY(())\n \n extern GTY(()) struct saved_scope *scope_chain;\n \n+struct cxx_int_tree_map GTY(())\n+{\n+  unsigned int uid;\n+  tree to;\n+};\n+\n+extern unsigned int cxx_int_tree_map_hash (const void *);\n+extern int cxx_int_tree_map_eq (const void *, const void *);\n+\n /* Global state pertinent to the current function.  */\n \n struct language_function GTY(())\n@@ -747,6 +756,7 @@ struct language_function GTY(())\n   htab_t GTY((param_is(struct named_label_entry))) x_named_labels;\n   struct cp_binding_level *bindings;\n   VEC(tree,gc) *x_local_names;\n+  htab_t GTY((param_is (struct cxx_int_tree_map))) extern_decl_map;\n };\n \n /* The current C++-specific per-function global variables.  */"}, {"sha": "206fced6b3947820d8f38e3017d6fde939423aa3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "patch": "@@ -11102,6 +11102,7 @@ finish_function (int flags)\n       f->x_vtt_parm = NULL;\n       f->x_return_value = NULL;\n       f->bindings = NULL;\n+      f->extern_decl_map = NULL;\n \n       /* Handle attribute((warn_unused_result)).  Relies on gimple input.  */\n       c_warn_unused_result (&DECL_SAVED_TREE (fndecl));"}, {"sha": "3de99992a12b9640e6b67d4530e6843a9f3c79e5", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "patch": "@@ -670,14 +670,28 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \t      if (decls_match (x, t))\n \t\t/* The standard only says that the local extern\n \t\t   inherits linkage from the previous decl; in\n-\t\t   particular, default args are not shared.  We must\n-\t\t   also tell cgraph to treat these decls as the same,\n-\t\t   or we may neglect to emit an \"unused\" static - we\n-\t\t   do this by making the DECL_UIDs equal, which should\n-\t\t   be viewed as a kludge.  FIXME.  */\n+\t\t   particular, default args are not shared.  Add\n+\t\t   the decl into a hash table to make sure only\n+\t\t   the previous decl in this case is seen by the\n+\t\t   middle end.  */\n \t\t{\n+\t\t  struct cxx_int_tree_map *h;\n+\t\t  void **loc;\n+\n \t\t  TREE_PUBLIC (x) = TREE_PUBLIC (t);\n-\t\t  DECL_UID (x) = DECL_UID (t);\n+\n+\t\t  if (cp_function_chain->extern_decl_map == NULL)\n+\t\t    cp_function_chain->extern_decl_map\n+\t\t      = htab_create_ggc (20, cxx_int_tree_map_hash,\n+\t\t\t\t\t cxx_int_tree_map_eq, NULL);\n+\n+\t\t  h = GGC_NEW (struct cxx_int_tree_map);\n+\t\t  h->uid = DECL_UID (x);\n+\t\t  h->to = t;\n+\t\t  loc = htab_find_slot_with_hash\n+\t\t\t  (cp_function_chain->extern_decl_map, h,\n+\t\t\t   h->uid, INSERT);\n+\t\t  *(struct cxx_int_tree_map **) loc = h;\n \t\t}\n \t    }\n \t  else if (TREE_CODE (t) == PARM_DECL)"}, {"sha": "9371ad6ff046ec7c871368a504ce23139b940e0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "patch": "@@ -1,3 +1,9 @@\n+2006-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/27894\n+\t* g++.dg/tree-ssa/pr26757.C: New test.\n+\t* g++.dg/tree-ssa/pr27894.C: New test.\n+\n 2006-06-13  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n \n \t* gcc.c-torture/compile/20060609-1.c: New test."}, {"sha": "4d124e3c45d6472689d5d8d35145caf1ac9d05ad", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr26757.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr26757.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr26757.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr26757.C?ref=10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "patch": "@@ -0,0 +1,44 @@\n+// PR c++/26757\n+// { dg-do run }\n+// { dg-options \"-O\" }\n+\n+extern \"C\" void abort ();\n+\n+typedef struct A\n+{\n+  int c;\n+  int d;\n+} A;\n+\n+A *b;\n+\n+void\n+foo ()\n+{\n+  b->c++;\n+  extern A *b;\n+  b->d++;\n+\n+}\n+\n+void\n+bar ()\n+{\n+  if (b->d)\n+    b->c++;\n+}\n+\n+\n+int\n+main ()\n+{\n+  A a = { 0, 0 };\n+  b = &a;\n+  foo ();\n+  bar ();\n+  if (b->c != 2)\n+    abort ();\n+  if (b->d != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "ac97a35f1cf241769fd8d50956d202b5ce509569", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr27894.C", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27894.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27894.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27894.C?ref=10827cd8b31a8ced2cf6fbd6e4b902628c9a4ceb", "patch": "@@ -0,0 +1,82 @@\n+// PR c++/27894\n+// { dg-do compile }\n+// { dg-options \"-O\" }\n+\n+class A;\n+struct B\n+{\n+  B (unsigned long);\n+  int b2 () const;\n+  A *b1 () const;\n+};\n+\n+enum { P = 0 };\n+enum O { Q = 75, };\n+class C;\n+struct D { A *d; };\n+struct E\n+{\n+  B e1 (int) const;\n+  A *e2 (const B &) const;\n+  D e3[4096];\n+};\n+\n+inline A *\n+E::e2 (const B & x) const\n+{\n+  const D *w = &e3[x.b2 ()];\n+  return (A *) w->d;\n+}\n+\n+extern E *e;\n+\n+inline A *\n+B::b1 () const\n+{\n+  extern E *e;\n+  return e->e2 (*this);\n+}\n+\n+template <class T> struct F : public B\n+{\n+  F (const B &);\n+  T *b1 () const;\n+};\n+\n+template < class T > inline T * F <T>::b1 () const\n+{\n+  return (T *) B::b1 ();\n+};\n+\n+typedef F <C> N;\n+\n+class G {};\n+class H : public G {};\n+class I : public H {};\n+class J {};\n+class K {};\n+struct L\n+{\n+  void l (J *, C *, int, const char *, O);\n+};\n+class M : public K, public I\n+{\n+  void m (J &, int, const char *);\n+  void m (J &, int, int, const char *, float);\n+};\n+\n+void\n+M::m (J &x, int y, const char *z)\n+{\n+  L *w = new L;\n+  N v = e->e1 (y);\n+  w->l (&x, v.b1 (), P, z, Q);\n+}\n+\n+void\n+M::m (J &x, int y, int s, const char *z, float t)\n+{\n+  L *w = new L;\n+  N v = e->e1 (y);\n+  w->l (&x, v.b1 (), s, z, (O) (int) ((t) ? (50 + 20 / (float) t) : 0));\n+}"}]}