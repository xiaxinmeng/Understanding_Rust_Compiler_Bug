{"sha": "11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFjZDNiZWQyOGYxM2ExYTAyNTRkMDBjNGI0ZDc5OWQwOGNjMjY2Yw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-12-09T21:06:06Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-12-09T21:06:06Z"}, "message": "Eliminate FOR_EACH_BB macro.\n\ngcc/\n\t* basic-block.h (FOR_EACH_BB): Eliminate macro.\n\n\t* asan.c (transform_statements, execute_sanopt): Eliminate\n\tuse of FOR_EACH_BB in favor of FOR_EACH_BB_FN, to make use of cfun\n\texplicit.\n\t* auto-inc-dec.c (rest_of_handle_auto_inc_dec): Likewise.\n\t* bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges,\n\tset_edge_can_fallthru_flag, fix_up_fall_thru_edges,\n\tfix_crossing_unconditional_branches, add_reg_crossing_jump_notes,\n\tinsert_section_boundary_note, rest_of_handle_reorder_blocks,\n\tduplicate_computed_gotos): Likewise.\n\t* cfg.c (clear_edges, compact_blocks, brief_dump_cfg): Likewise.\n\t* cfganal.c (find_unreachable_blocks, add_noreturn_fake_exit_edges,\n\tcompute_dominance_frontiers_1, single_pred_before_succ_order): Likewise.\n\t* cfgbuild.c (find_many_sub_basic_blocks): Likewise.\n\t* cfgcleanup.c (try_optimize_cfg, delete_dead_jumptables): Likewise.\n\t* cfgexpand.c (add_scope_conflicts, discover_nonconstant_array_refs):\n\tLikewise.\n\t* cfgloop.c (flow_loops_cfg_dump, get_loop_body, record_loop_exits,\n\tverify_loop_structure): Likewise.\n\t* cfgloopanal.c (mark_loop_exit_edges): Likewise.\n\t* cfgrtl.c (compute_bb_for_insn, find_partition_fixes,\n\tverify_hot_cold_block_grouping, purge_all_dead_edges,\n\tfixup_abnormal_edges, record_effective_endpoints,\n\toutof_cfg_layout_mode, fixup_reorder_chain, force_one_exit_fallthru,\n\tbreak_superblocks): Likewise.\n\t* cgraphbuild.c (build_cgraph_edges, rebuild_cgraph_edges,\n\tcgraph_rebuild_references): Likewise.\n\t* combine-stack-adj.c (combine_stack_adjustments): Likewise.\n\t* combine.c (delete_noop_moves, create_log_links,\n\tcombine_instructions): Likewise.\n\t* config/arm/arm.c (thumb1_reorg, thumb2_reorg): Likewise.\n\t* config/bfin/bfin.c (bfin_gen_bundles, reorder_var_tracking_notes):\n\tLikewise.\n\t* config/c6x/c6x.c (c6x_gen_bundles, conditionalize_after_sched,\n\tc6x_reorg): Likewise.\n\t* config/epiphany/resolve-sw-modes.c (resolve_sw_modes): Likewise.\n\t* config/frv/frv.c (frv_optimize_membar): Likewise.\n\t* config/i386/i386.c (ix86_finalize_stack_realign_flags): Likewise.\n\t* config/ia64/ia64.c (ia64_reorg): Likewise.\n\t* config/mips/mips.c (mips_annotate_pic_calls): Likewise.\n\t* config/picochip/picochip.c (reorder_var_tracking_notes): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_alloc_sdmode_stack_slot): Likewise.\n\t* config/s390/s390.c (s390_regs_ever_clobbered): Likewise.\n\t* config/sh/sh_treg_combine.cc (sh_treg_combine::execute): Likewise.\n\t* config/spu/spu.c (spu_machine_dependent_reorg): Likewise.\n\t* config/tilegx/tilegx.c (tilegx_gen_bundles,\n\treorder_var_tracking_notes): Likewise.\n\t* config/tilepro/tilepro.c (tilepro_gen_bundles,\n\treorder_var_tracking_notes): Likewise.\n\t* coverage.c (coverage_compute_cfg_checksum): Likewise.\n\t* cprop.c (compute_hash_table_work, compute_cprop_data,\n\tlocal_cprop_pass, find_implicit_sets): Likewise.\n\t* cse.c (cse_condition_code_reg): Likewise.\n\t* dce.c (prescan_insns_for_dce): Likewise.\n\t* df-core.c (df_compact_blocks): Likewise.\n\t* df-problems.c (df_word_lr_alloc): Likewise.\n\t* df-scan.c (df_scan_start_dump, df_scan_blocks, df_insn_rescan_all,\n\tdf_update_entry_exit_and_calls): Likewise.\n\t* dominance.c (calculate_dominance_info, verify_dominators,\n\tdebug_dominance_info): Likewise.\n\t* dse.c (dse_step5_nospill): Likewise.\n\t* except.c (finish_eh_generation): Likewise.\n\t* final.c (compute_alignments): Likewise.\n\t* function.c (thread_prologue_and_epilogue_insns,\n\trest_of_match_asm_constraints): Likewise.\n\t* gcse.c (compute_hash_table_work, prune_expressions,\n\tcompute_pre_data, compute_code_hoist_vbeinout, hoist_code,\n\tcalculate_bb_reg_pressure, compute_ld_motion_mems): Likewise.\n\t* gimple-iterator.c (gsi_commit_edge_inserts): Likewise.\n\t* gimple-ssa-isolate-paths.c (find_implicit_erroneous_behaviour,\n\tfind_explicit_erroneous_behaviour): Likewise.\n\t* graphite-sese-to-poly.c (rewrite_reductions_out_of_ssa,\n\trewrite_cross_bb_scalar_deps_out_of_ssa): Likewise.\n\t* haifa-sched.c (haifa_sched_init): Likewise.\n\t* hw-doloop.c (discover_loops, set_bb_indices, reorder_loops):\n\tLikewise.\n\t* ifcvt.c (if_convert): Likewise.\n\t* init-regs.c (initialize_uninitialized_regs): Likewise.\n\t* ipa-prop.c (ipcp_transform_function): Likewise.\n\t* ipa-pure-const.c (analyze_function): Likewise.\n\t* ipa-split.c (find_split_points, execute_split_functions): Likewise.\n\t* ira-build.c (form_loop_tree): Likewise.\n\t* ira-costs.c (find_costs_and_classes): Likewise.\n\t* ira-emit.c (emit_moves, add_ranges_and_copies, ira_emit): Likewise.\n\t* ira.c (decrease_live_ranges_number, compute_regs_asm_clobbered,\n\tmark_elimination, update_equiv_regs, find_moveable_pseudos,\n\tsplit_live_ranges_for_shrink_wrap, allocate_initial_values): Likewise.\n\t* jump.c (mark_all_labels): Likewise.\n\t* lcm.c (compute_laterin, compute_insert_delete, compute_available,\n\tcompute_nearerout, compute_rev_insert_delete): Likewise.\n\t* loop-init.c (fix_loop_structure): Likewise.\n\t* loop-invariant.c (calculate_loop_reg_pressure): Likewise.\n\t* lower-subreg.c (decompose_multiword_subregs,\n\tdecompose_multiword_subregs): Likewise.\n\t* lra-assigns.c (assign_by_spills): Likewise.\n\t* lra-coalesce.c (lra_coalesce): Likewise.\n\t* lra-constraints.c (lra_inheritance, remove_inheritance_pseudos):\n\tLikewise.\n\t* lra-eliminations.c (lra_init_elimination): Likewise.\n\t* lra-spills.c (assign_spill_hard_regs, spill_pseudos,\n\tlra_final_code_change): Likewise.\n\t* lra.c (remove_scratches, check_rtl, has_nonexceptional_receiver,\n\tupdate_inc_notes): Likewise.\n\t* mcf.c (adjust_cfg_counts): Likewise.\n\t* mode-switching.c (optimize_mode_switching): Likewise.\n\t* modulo-sched.c (rest_of_handle_sms): Likewise.\n\t* omp-low.c (optimize_omp_library_calls, expand_omp_taskreg,\n\texpand_omp_target): Likewise.\n\t* postreload-gcse.c (alloc_mem, compute_hash_table): Likewise.\n\t* postreload.c (reload_cse_regs_1): Likewise.\n\t* predict.c (strip_predict_hints, tree_bb_level_predictions,\n\ttree_estimate_probability, expensive_function_p,\n\testimate_bb_frequencies, compute_function_frequency): Likewise.\n\t* profile.c (is_inconsistent, compute_branch_probabilities,\n\tbranch_prob): Likewise.\n\t* ree.c (find_removable_extensions): Likewise.\n\t* reg-stack.c (compensate_edges, convert_regs, reg_to_stack): Likewise.\n\t* regcprop.c (copyprop_hardreg_forward): Likewise.\n\t* reginfo.c (init_subregs_of_mode): Likewise.\n\t* regrename.c (regrename_analyze): Likewise.\n\t* regstat.c (regstat_compute_ri, regstat_compute_calls_crossed):\n\tLikewise.\n\t* reload1.c (has_nonexceptional_receiver, reload,\n\tcalculate_elim_costs_all_insns): Likewise.\n\t* resource.c (init_resource_info, free_resource_info): Likewise.\n\t* sched-ebb.c (schedule_ebbs): Likewise.\n\t* sched-rgn.c (is_cfg_nonregular, find_single_block_region,\n\thaifa_find_rgns, sched_rgn_local_init): Likewise.\n\t* sel-sched-dump.c (sel_dump_cfg_2): Likewise.\n\t* sel-sched-ir.c (init_lv_sets, free_lv_sets,\n\tmake_regions_from_the_rest): Likewise.\n\t* sese.c (build_sese_loop_nests, sese_build_liveouts): Likewise.\n\t* stack-ptr-mod.c (notice_stack_pointer_modification): Likewise.\n\t* store-motion.c (compute_store_table, build_store_vectors,\n\tone_store_motion_pass): Likewise.\n\t* tracer.c (tail_duplicate): Likewise.\n\t* trans-mem.c (compute_transaction_bits): Likewise.\n\t* tree-call-cdce.c (tree_call_cdce): Likewise.\n\t* tree-cfg.c (replace_loop_annotate, factor_computed_gotos,\n\tfold_cond_expr_cond, make_edges, assign_discriminators,\n\tmake_abnormal_goto_edges, cleanup_dead_labels, group_case_labels,\n\tdump_cfg_stats, gimple_verify_flow_info, print_loop,\n\texecute_fixup_cfg): Likewise.\n\t* tree-cfgcleanup.c (cleanup_tree_cfg_1, merge_phi_nodes): Likewise.\n\t* tree-complex.c (init_dont_simulate_again, tree_lower_complex):\n\tLikewise.\n\t* tree-dfa.c (collect_dfa_stats, dump_enumerated_decls): Likewise.\n\t* tree-eh.c (execute_lower_resx, execute_lower_eh_dispatch,\n\tmark_reachable_handlers): Likewise.\n\t* tree-emutls.c (lower_emutls_function_body): Likewise.\n\t* tree-if-conv.c (main_tree_if_conversion): Likewise.\n\t* tree-inline.c (optimize_inline_calls): Likewise.\n\t* tree-into-ssa.c (rewrite_into_ssa, update_ssa): Likewise.\n\t* tree-nrv.c (tree_nrv, execute_return_slot_opt): Likewise.\n\t* tree-object-size.c (compute_object_sizes): Likewise.\n\t* tree-outof-ssa.c (eliminate_useless_phis, rewrite_trees,\n\tinsert_backedge_copies, tree_profiling): Likewise.\n\t* tree-scalar-evolution.c (scev_const_prop): Likewise.\n\t* tree-sra.c (scan_function, sra_modify_function_body,\n\tpropagate_dereference_distances, ipa_sra_modify_function_body,\n\tconvert_callers): Likewise.\n\t* tree-ssa-ccp.c (ccp_initialize, execute_fold_all_builtins): Likewise.\n\t* tree-ssa-coalesce.c (build_ssa_conflict_graph): Likewise.\n\tcreate_outofssa_var_map, coalesce_partitions): Likewise.\n\t* tree-ssa-copy.c (init_copy_prop): Likewise.\n\t* tree-ssa-copyrename.c (rename_ssa_copies): Likewise.\n\t* tree-ssa-dce.c (find_obviously_necessary_stmts,\n\teliminate_unnecessary_stmts): Likewise.\n\t* tree-ssa-dom.c (free_all_edge_infos, tree_ssa_dominator_optimize):\n\tLikewise.\n\t* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine): Likewise.\n\t* tree-ssa-live.c (clear_unused_block_pointer, remove_unused_locals,\n\tnew_tree_live_info, calculate_live_on_exit, dump_live_info,\n\tanalyze_memory_references, fill_always_executed_in,\n\ttree_ssa_lim_finalize): Likewise.\n\t* tree-ssa-loop-manip.c (find_uses_to_rename, verify_loop_closed_ssa):\n\tLikewise.\n\t* tree-ssa-math-opts.c (execute_cse_reciprocals, execute_cse_sincos,\n\texecute_optimize_bswap, execute_optimize_widening_mul): Likewise.\n\t* tree-ssa-propagate.c (substitute_and_fold): Likewise.\n\t* tree-ssa-structalias.c (compute_points_to_sets): Likewise.\n\t* tree-ssa-tail-merge.c (find_same_succ, reset_cluster_vectors):\n\tLikewise.\n\t* tree-ssa-ter.c (find_replaceable_exprs): Likewise.\n\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Likewise.\n\t* tree-ssa-uncprop.c (associate_equivalences_with_edges,\n\ttree_ssa_uncprop): Likewise.\n\t* tree-ssa-uninit.c (warn_uninitialized_vars,\n\texecute_late_warn_uninitialized): Likewise.\n\t* tree-ssa.c (verify_ssa, execute_update_addresses_taken): Likewise.\n\t* tree-stdarg.c (check_all_va_list_escapes, execute_optimize_stdarg):\n\tLikewise.\n\t* tree-switch-conversion.c (do_switchconv): Likewise.\n\t* tree-vect-generic.c (expand_vector_operations): Likewise.\n\t* tree-vectorizer.c (adjust_simduid_builtins, note_simd_array_uses,\n\texecute_vect_slp): Likewise.\n\t* tree-vrp.c (check_all_array_refs, remove_range_assertions,\n\tvrp_initialize, identify_jump_threads, instrument_memory_accesses):\n\tLikewise.\n\t* ubsan.c (ubsan_pass): Likewise.\n\t* value-prof.c (verify_histograms, gimple_value_profile_transformations,\n\tgimple_find_values_to_profile): Likewise.\n\t* var-tracking.c (vt_find_locations, dump_dataflow_sets, vt_emit_notes,\n\tvt_initialize, delete_debug_insns, vt_finalize): Likewise.\n\ngcc/testsuite/\n\t* g++.dg/plugin/selfassign.c (execute_warn_self_assign): Eliminate\n\tuse of FOR_EACH_BB in favor of FOR_EACH_BB_FN, to make use of cfun\n\texplicit.\n\t* gcc.dg/plugin/selfassign.c (execute_warn_self_assign): Likewise.\n\nFrom-SVN: r205828", "tree": {"sha": "57a1f71bbd8d7849694dc3206a7d3ea69f99a67d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57a1f71bbd8d7849694dc3206a7d3ea69f99a67d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b1c6fd7166bb33319ebc1d20fd9ca83d39b0079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1c6fd7166bb33319ebc1d20fd9ca83d39b0079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b1c6fd7166bb33319ebc1d20fd9ca83d39b0079"}], "stats": {"total": 945, "additions": 579, "deletions": 366}, "files": [{"sha": "3a53226154c33029ae2e801f81be155266bcc340", "filename": "gcc/ChangeLog", "status": "modified", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1,3 +1,211 @@\n+2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* basic-block.h (FOR_EACH_BB): Eliminate macro.\n+\n+\t* asan.c (transform_statements, execute_sanopt): Eliminate\n+\tuse of FOR_EACH_BB in favor of FOR_EACH_BB_FN, to make use of cfun\n+\texplicit.\n+\t* auto-inc-dec.c (rest_of_handle_auto_inc_dec): Likewise.\n+\t* bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges,\n+\tset_edge_can_fallthru_flag, fix_up_fall_thru_edges,\n+\tfix_crossing_unconditional_branches, add_reg_crossing_jump_notes,\n+\tinsert_section_boundary_note, rest_of_handle_reorder_blocks,\n+\tduplicate_computed_gotos): Likewise.\n+\t* cfg.c (clear_edges, compact_blocks, brief_dump_cfg): Likewise.\n+\t* cfganal.c (find_unreachable_blocks, add_noreturn_fake_exit_edges,\n+\tcompute_dominance_frontiers_1, single_pred_before_succ_order): Likewise.\n+\t* cfgbuild.c (find_many_sub_basic_blocks): Likewise.\n+\t* cfgcleanup.c (try_optimize_cfg, delete_dead_jumptables): Likewise.\n+\t* cfgexpand.c (add_scope_conflicts, discover_nonconstant_array_refs):\n+\tLikewise.\n+\t* cfgloop.c (flow_loops_cfg_dump, get_loop_body, record_loop_exits,\n+\tverify_loop_structure): Likewise.\n+\t* cfgloopanal.c (mark_loop_exit_edges): Likewise.\n+\t* cfgrtl.c (compute_bb_for_insn, find_partition_fixes,\n+\tverify_hot_cold_block_grouping, purge_all_dead_edges,\n+\tfixup_abnormal_edges, record_effective_endpoints,\n+\toutof_cfg_layout_mode, fixup_reorder_chain, force_one_exit_fallthru,\n+\tbreak_superblocks): Likewise.\n+\t* cgraphbuild.c (build_cgraph_edges, rebuild_cgraph_edges,\n+\tcgraph_rebuild_references): Likewise.\n+\t* combine-stack-adj.c (combine_stack_adjustments): Likewise.\n+\t* combine.c (delete_noop_moves, create_log_links,\n+\tcombine_instructions): Likewise.\n+\t* config/arm/arm.c (thumb1_reorg, thumb2_reorg): Likewise.\n+\t* config/bfin/bfin.c (bfin_gen_bundles, reorder_var_tracking_notes):\n+\tLikewise.\n+\t* config/c6x/c6x.c (c6x_gen_bundles, conditionalize_after_sched,\n+\tc6x_reorg): Likewise.\n+\t* config/epiphany/resolve-sw-modes.c (resolve_sw_modes): Likewise.\n+\t* config/frv/frv.c (frv_optimize_membar): Likewise.\n+\t* config/i386/i386.c (ix86_finalize_stack_realign_flags): Likewise.\n+\t* config/ia64/ia64.c (ia64_reorg): Likewise.\n+\t* config/mips/mips.c (mips_annotate_pic_calls): Likewise.\n+\t* config/picochip/picochip.c (reorder_var_tracking_notes): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_alloc_sdmode_stack_slot): Likewise.\n+\t* config/s390/s390.c (s390_regs_ever_clobbered): Likewise.\n+\t* config/sh/sh_treg_combine.cc (sh_treg_combine::execute): Likewise.\n+\t* config/spu/spu.c (spu_machine_dependent_reorg): Likewise.\n+\t* config/tilegx/tilegx.c (tilegx_gen_bundles,\n+\treorder_var_tracking_notes): Likewise.\n+\t* config/tilepro/tilepro.c (tilepro_gen_bundles,\n+\treorder_var_tracking_notes): Likewise.\n+\t* coverage.c (coverage_compute_cfg_checksum): Likewise.\n+\t* cprop.c (compute_hash_table_work, compute_cprop_data,\n+\tlocal_cprop_pass, find_implicit_sets): Likewise.\n+\t* cse.c (cse_condition_code_reg): Likewise.\n+\t* dce.c (prescan_insns_for_dce): Likewise.\n+\t* df-core.c (df_compact_blocks): Likewise.\n+\t* df-problems.c (df_word_lr_alloc): Likewise.\n+\t* df-scan.c (df_scan_start_dump, df_scan_blocks, df_insn_rescan_all,\n+\tdf_update_entry_exit_and_calls): Likewise.\n+\t* dominance.c (calculate_dominance_info, verify_dominators,\n+\tdebug_dominance_info): Likewise.\n+\t* dse.c (dse_step5_nospill): Likewise.\n+\t* except.c (finish_eh_generation): Likewise.\n+\t* final.c (compute_alignments): Likewise.\n+\t* function.c (thread_prologue_and_epilogue_insns,\n+\trest_of_match_asm_constraints): Likewise.\n+\t* gcse.c (compute_hash_table_work, prune_expressions,\n+\tcompute_pre_data, compute_code_hoist_vbeinout, hoist_code,\n+\tcalculate_bb_reg_pressure, compute_ld_motion_mems): Likewise.\n+\t* gimple-iterator.c (gsi_commit_edge_inserts): Likewise.\n+\t* gimple-ssa-isolate-paths.c (find_implicit_erroneous_behaviour,\n+\tfind_explicit_erroneous_behaviour): Likewise.\n+\t* graphite-sese-to-poly.c (rewrite_reductions_out_of_ssa,\n+\trewrite_cross_bb_scalar_deps_out_of_ssa): Likewise.\n+\t* haifa-sched.c (haifa_sched_init): Likewise.\n+\t* hw-doloop.c (discover_loops, set_bb_indices, reorder_loops):\n+\tLikewise.\n+\t* ifcvt.c (if_convert): Likewise.\n+\t* init-regs.c (initialize_uninitialized_regs): Likewise.\n+\t* ipa-prop.c (ipcp_transform_function): Likewise.\n+\t* ipa-pure-const.c (analyze_function): Likewise.\n+\t* ipa-split.c (find_split_points, execute_split_functions): Likewise.\n+\t* ira-build.c (form_loop_tree): Likewise.\n+\t* ira-costs.c (find_costs_and_classes): Likewise.\n+\t* ira-emit.c (emit_moves, add_ranges_and_copies, ira_emit): Likewise.\n+\t* ira.c (decrease_live_ranges_number, compute_regs_asm_clobbered,\n+\tmark_elimination, update_equiv_regs, find_moveable_pseudos,\n+\tsplit_live_ranges_for_shrink_wrap, allocate_initial_values): Likewise.\n+\t* jump.c (mark_all_labels): Likewise.\n+\t* lcm.c (compute_laterin, compute_insert_delete, compute_available,\n+\tcompute_nearerout, compute_rev_insert_delete): Likewise.\n+\t* loop-init.c (fix_loop_structure): Likewise.\n+\t* loop-invariant.c (calculate_loop_reg_pressure): Likewise.\n+\t* lower-subreg.c (decompose_multiword_subregs,\n+\tdecompose_multiword_subregs): Likewise.\n+\t* lra-assigns.c (assign_by_spills): Likewise.\n+\t* lra-coalesce.c (lra_coalesce): Likewise.\n+\t* lra-constraints.c (lra_inheritance, remove_inheritance_pseudos):\n+\tLikewise.\n+\t* lra-eliminations.c (lra_init_elimination): Likewise.\n+\t* lra-spills.c (assign_spill_hard_regs, spill_pseudos,\n+\tlra_final_code_change): Likewise.\n+\t* lra.c (remove_scratches, check_rtl, has_nonexceptional_receiver,\n+\tupdate_inc_notes): Likewise.\n+\t* mcf.c (adjust_cfg_counts): Likewise.\n+\t* mode-switching.c (optimize_mode_switching): Likewise.\n+\t* modulo-sched.c (rest_of_handle_sms): Likewise.\n+\t* omp-low.c (optimize_omp_library_calls, expand_omp_taskreg,\n+\texpand_omp_target): Likewise.\n+\t* postreload-gcse.c (alloc_mem, compute_hash_table): Likewise.\n+\t* postreload.c (reload_cse_regs_1): Likewise.\n+\t* predict.c (strip_predict_hints, tree_bb_level_predictions,\n+\ttree_estimate_probability, expensive_function_p,\n+\testimate_bb_frequencies, compute_function_frequency): Likewise.\n+\t* profile.c (is_inconsistent, compute_branch_probabilities,\n+\tbranch_prob): Likewise.\n+\t* ree.c (find_removable_extensions): Likewise.\n+\t* reg-stack.c (compensate_edges, convert_regs, reg_to_stack): Likewise.\n+\t* regcprop.c (copyprop_hardreg_forward): Likewise.\n+\t* reginfo.c (init_subregs_of_mode): Likewise.\n+\t* regrename.c (regrename_analyze): Likewise.\n+\t* regstat.c (regstat_compute_ri, regstat_compute_calls_crossed):\n+\tLikewise.\n+\t* reload1.c (has_nonexceptional_receiver, reload,\n+\tcalculate_elim_costs_all_insns): Likewise.\n+\t* resource.c (init_resource_info, free_resource_info): Likewise.\n+\t* sched-ebb.c (schedule_ebbs): Likewise.\n+\t* sched-rgn.c (is_cfg_nonregular, find_single_block_region,\n+\thaifa_find_rgns, sched_rgn_local_init): Likewise.\n+\t* sel-sched-dump.c (sel_dump_cfg_2): Likewise.\n+\t* sel-sched-ir.c (init_lv_sets, free_lv_sets,\n+\tmake_regions_from_the_rest): Likewise.\n+\t* sese.c (build_sese_loop_nests, sese_build_liveouts): Likewise.\n+\t* stack-ptr-mod.c (notice_stack_pointer_modification): Likewise.\n+\t* store-motion.c (compute_store_table, build_store_vectors,\n+\tone_store_motion_pass): Likewise.\n+\t* tracer.c (tail_duplicate): Likewise.\n+\t* trans-mem.c (compute_transaction_bits): Likewise.\n+\t* tree-call-cdce.c (tree_call_cdce): Likewise.\n+\t* tree-cfg.c (replace_loop_annotate, factor_computed_gotos,\n+\tfold_cond_expr_cond, make_edges, assign_discriminators,\n+\tmake_abnormal_goto_edges, cleanup_dead_labels, group_case_labels,\n+\tdump_cfg_stats, gimple_verify_flow_info, print_loop,\n+\texecute_fixup_cfg): Likewise.\n+\t* tree-cfgcleanup.c (cleanup_tree_cfg_1, merge_phi_nodes): Likewise.\n+\t* tree-complex.c (init_dont_simulate_again, tree_lower_complex):\n+\tLikewise.\n+\t* tree-dfa.c (collect_dfa_stats, dump_enumerated_decls): Likewise.\n+\t* tree-eh.c (execute_lower_resx, execute_lower_eh_dispatch,\n+\tmark_reachable_handlers): Likewise.\n+\t* tree-emutls.c (lower_emutls_function_body): Likewise.\n+\t* tree-if-conv.c (main_tree_if_conversion): Likewise.\n+\t* tree-inline.c (optimize_inline_calls): Likewise.\n+\t* tree-into-ssa.c (rewrite_into_ssa, update_ssa): Likewise.\n+\t* tree-nrv.c (tree_nrv, execute_return_slot_opt): Likewise.\n+\t* tree-object-size.c (compute_object_sizes): Likewise.\n+\t* tree-outof-ssa.c (eliminate_useless_phis, rewrite_trees,\n+\tinsert_backedge_copies, tree_profiling): Likewise.\n+\t* tree-scalar-evolution.c (scev_const_prop): Likewise.\n+\t* tree-sra.c (scan_function, sra_modify_function_body,\n+\tpropagate_dereference_distances, ipa_sra_modify_function_body,\n+\tconvert_callers): Likewise.\n+\t* tree-ssa-ccp.c (ccp_initialize, execute_fold_all_builtins): Likewise.\n+\t* tree-ssa-coalesce.c (build_ssa_conflict_graph): Likewise.\n+\tcreate_outofssa_var_map, coalesce_partitions): Likewise.\n+\t* tree-ssa-copy.c (init_copy_prop): Likewise.\n+\t* tree-ssa-copyrename.c (rename_ssa_copies): Likewise.\n+\t* tree-ssa-dce.c (find_obviously_necessary_stmts,\n+\teliminate_unnecessary_stmts): Likewise.\n+\t* tree-ssa-dom.c (free_all_edge_infos, tree_ssa_dominator_optimize):\n+\tLikewise.\n+\t* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine): Likewise.\n+\t* tree-ssa-live.c (clear_unused_block_pointer, remove_unused_locals,\n+\tnew_tree_live_info, calculate_live_on_exit, dump_live_info,\n+\tanalyze_memory_references, fill_always_executed_in,\n+\ttree_ssa_lim_finalize): Likewise.\n+\t* tree-ssa-loop-manip.c (find_uses_to_rename, verify_loop_closed_ssa):\n+\tLikewise.\n+\t* tree-ssa-math-opts.c (execute_cse_reciprocals, execute_cse_sincos,\n+\texecute_optimize_bswap, execute_optimize_widening_mul): Likewise.\n+\t* tree-ssa-propagate.c (substitute_and_fold): Likewise.\n+\t* tree-ssa-structalias.c (compute_points_to_sets): Likewise.\n+\t* tree-ssa-tail-merge.c (find_same_succ, reset_cluster_vectors):\n+\tLikewise.\n+\t* tree-ssa-ter.c (find_replaceable_exprs): Likewise.\n+\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Likewise.\n+\t* tree-ssa-uncprop.c (associate_equivalences_with_edges,\n+\ttree_ssa_uncprop): Likewise.\n+\t* tree-ssa-uninit.c (warn_uninitialized_vars,\n+\texecute_late_warn_uninitialized): Likewise.\n+\t* tree-ssa.c (verify_ssa, execute_update_addresses_taken): Likewise.\n+\t* tree-stdarg.c (check_all_va_list_escapes, execute_optimize_stdarg):\n+\tLikewise.\n+\t* tree-switch-conversion.c (do_switchconv): Likewise.\n+\t* tree-vect-generic.c (expand_vector_operations): Likewise.\n+\t* tree-vectorizer.c (adjust_simduid_builtins, note_simd_array_uses,\n+\texecute_vect_slp): Likewise.\n+\t* tree-vrp.c (check_all_array_refs, remove_range_assertions,\n+\tvrp_initialize, identify_jump_threads, instrument_memory_accesses):\n+\tLikewise.\n+\t* ubsan.c (ubsan_pass): Likewise.\n+\t* value-prof.c (verify_histograms, gimple_value_profile_transformations,\n+\tgimple_find_values_to_profile): Likewise.\n+\t* var-tracking.c (vt_find_locations, dump_dataflow_sets, vt_emit_notes,\n+\tvt_initialize, delete_debug_insns, vt_finalize): Likewise.\n+\n 2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* basic-block.h (last_basic_block): Eliminate macro."}, {"sha": "1394e1314c5aac6386f36e2c24e5ade9c9c96a9c", "filename": "gcc/asan.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -2043,7 +2043,7 @@ transform_statements (void)\n   gimple_stmt_iterator i;\n   int saved_last_basic_block = last_basic_block_for_fn (cfun);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       basic_block prev_bb = bb;\n \n@@ -2557,7 +2557,7 @@ execute_sanopt (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))"}, {"sha": "be7fdf81f18342f55209eee3a8ae451669f0ddda", "filename": "gcc/auto-inc-dec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fauto-inc-dec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fauto-inc-dec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-inc-dec.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1480,7 +1480,7 @@ rest_of_handle_auto_inc_dec (void)\n   reg_next_use = XCNEWVEC (rtx, max_reg);\n   reg_next_inc_use = XCNEWVEC (rtx, max_reg);\n   reg_next_def = XCNEWVEC (rtx, max_reg);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     merge_in_block (max_reg, bb);\n \n   free (reg_next_use);"}, {"sha": "b378a5b240c7ee6432c56ca479018e2b452dfa95", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -333,8 +333,6 @@ struct GTY(()) control_flow_graph {\n #define FOR_EACH_BB_FN(BB, FN) \\\n   FOR_BB_BETWEEN (BB, (FN)->cfg->x_entry_block_ptr->next_bb, (FN)->cfg->x_exit_block_ptr, next_bb)\n \n-#define FOR_EACH_BB(BB) FOR_EACH_BB_FN (BB, cfun)\n-\n #define FOR_EACH_BB_REVERSE_FN(BB, FN) \\\n   FOR_BB_BETWEEN (BB, (FN)->cfg->x_exit_block_ptr->prev_bb, (FN)->cfg->x_entry_block_ptr, prev_bb)\n "}, {"sha": "7f8ea075e1bfca912fb752d3df4aaea226cac492", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1566,7 +1566,7 @@ find_rarely_executed_basic_blocks_and_crossing_edges (void)\n   vec<basic_block> bbs_in_hot_partition = vNULL;\n \n   /* Mark which partition (hot/cold) each basic block belongs in.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       bool cold_bb = false;\n \n@@ -1658,7 +1658,7 @@ find_rarely_executed_basic_blocks_and_crossing_edges (void)\n \n   /* Mark every edge that crosses between sections.  */\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_EACH_EDGE (e, ei, bb->succs)\n       {\n \tunsigned int flags = e->flags;\n@@ -1691,7 +1691,7 @@ set_edge_can_fallthru_flag (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       edge e;\n       edge_iterator ei;\n@@ -1792,7 +1792,7 @@ fix_up_fall_thru_edges (void)\n   rtx old_jump;\n   rtx fall_thru_label;\n \n-  FOR_EACH_BB (cur_bb)\n+  FOR_EACH_BB_FN (cur_bb, cfun)\n     {\n       fall_thru = NULL;\n       if (EDGE_COUNT (cur_bb->succs) > 0)\n@@ -1992,7 +1992,7 @@ fix_crossing_conditional_branches (void)\n   rtx old_label = NULL_RTX;\n   rtx new_label;\n \n-  FOR_EACH_BB (cur_bb)\n+  FOR_EACH_BB_FN (cur_bb, cfun)\n     {\n       crossing_edge = NULL;\n       if (EDGE_COUNT (cur_bb->succs) > 0)\n@@ -2123,7 +2123,7 @@ fix_crossing_unconditional_branches (void)\n   rtx cur_insn;\n   edge succ;\n \n-  FOR_EACH_BB (cur_bb)\n+  FOR_EACH_BB_FN (cur_bb, cfun)\n     {\n       last_insn = BB_END (cur_bb);\n \n@@ -2201,7 +2201,7 @@ add_reg_crossing_jump_notes (void)\n   edge e;\n   edge_iterator ei;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_EACH_EDGE (e, ei, bb->succs)\n       if ((e->flags & EDGE_CROSSING)\n \t  && JUMP_P (BB_END (e->src))\n@@ -2286,7 +2286,7 @@ insert_section_boundary_note (void)\n   if (!crtl->has_bb_partition)\n     return;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       if (!current_partition)\n \tcurrent_partition = BB_PARTITION (bb);\n@@ -2321,7 +2321,7 @@ rest_of_handle_reorder_blocks (void)\n   reorder_basic_blocks ();\n   cleanup_cfg (CLEANUP_EXPENSIVE);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb->next_bb != EXIT_BLOCK_PTR_FOR_FN (cfun))\n       bb->aux = bb->next_bb;\n   cfg_layout_finalize ();\n@@ -2410,7 +2410,7 @@ duplicate_computed_gotos (void)\n   /* Look for blocks that end in a computed jump, and see if such blocks\n      are suitable for unfactoring.  If a block is a candidate for unfactoring,\n      mark it in the candidates.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n       edge e;\n@@ -2457,7 +2457,7 @@ duplicate_computed_gotos (void)\n     goto done;\n \n   /* Duplicate computed gotos.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       if (bb->flags & BB_VISITED)\n \tcontinue;"}, {"sha": "4f9d7694222d634bb041346cf9f35e8411b6b868", "filename": "gcc/cfg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -101,7 +101,7 @@ clear_edges (void)\n   edge e;\n   edge_iterator ei;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \tfree_edge (e);\n@@ -163,7 +163,7 @@ compact_blocks (void)\n       basic_block bb;\n \n       i = NUM_FIXED_BLOCKS;\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  SET_BASIC_BLOCK_FOR_FN (cfun, i, bb);\n \t  bb->index = i;\n@@ -828,7 +828,7 @@ brief_dump_cfg (FILE *file, int flags)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       dump_bb_info (file, bb, 0,\n \t\t    flags & (TDF_COMMENT | TDF_DETAILS),"}, {"sha": "3371b4a221a055bb4792a795b7df3d7e0ac58e94", "filename": "gcc/cfganal.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -159,7 +159,7 @@ find_unreachable_blocks (void)\n \n   /* Clear all the reachability flags.  */\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bb->flags &= ~BB_REACHABLE;\n \n   /* Add our starting points to the worklist.  Almost always there will\n@@ -554,7 +554,7 @@ add_noreturn_fake_exit_edges (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (EDGE_COUNT (bb->succs) == 0)\n       make_single_succ_edge (bb, EXIT_BLOCK_PTR_FOR_FN (cfun), EDGE_FAKE);\n }\n@@ -1236,7 +1236,7 @@ compute_dominance_frontiers_1 (bitmap_head *frontiers)\n   edge p;\n   edge_iterator ei;\n   basic_block b;\n-  FOR_EACH_BB (b)\n+  FOR_EACH_BB_FN (b, cfun)\n     {\n       if (EDGE_COUNT (b->preds) >= 2)\n \t{\n@@ -1517,7 +1517,7 @@ single_pred_before_succ_order (void)\n   bitmap_clear (visited);\n \n   MARK_VISITED (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n-  FOR_EACH_BB (x)\n+  FOR_EACH_BB_FN (x, cfun)\n     {\n       if (VISITED_P (x))\n \tcontinue;"}, {"sha": "acfc73be6409ef5bf3639dfef24d200c3cca57bd", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -595,15 +595,15 @@ find_many_sub_basic_blocks (sbitmap blocks)\n {\n   basic_block bb, min, max;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     SET_STATE (bb,\n \t       bitmap_bit_p (blocks, bb->index) ? BLOCK_TO_SPLIT : BLOCK_ORIGINAL);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (STATE (bb) == BLOCK_TO_SPLIT)\n       find_bb_boundaries (bb);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (STATE (bb) != BLOCK_ORIGINAL)\n       break;\n \n@@ -640,6 +640,6 @@ find_many_sub_basic_blocks (sbitmap blocks)\n \tcompute_outgoing_frequencies (bb);\n       }\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     SET_STATE (bb, 0);\n }"}, {"sha": "cf72c03a29466c1669b36c3dbc2383625e0cc4b6", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -2613,7 +2613,7 @@ try_optimize_cfg (int mode)\n \n   crossjumps_occured = false;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     update_forwarder_flag (bb);\n \n   if (! targetm.cannot_modify_jumps_p ())\n@@ -2955,7 +2955,7 @@ delete_dead_jumptables (void)\n \n   /* A dead jump table does not belong to any basic block.  Scan insns\n      between two adjacent basic blocks.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn, next;\n "}, {"sha": "56bcd804cfd43a73113ae713615551b8f55b2434", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -520,7 +520,7 @@ add_scope_conflicts (void)\n \t}\n     }\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     add_scope_conflicts_1 (bb, work, true);\n \n   free (rpo);\n@@ -5378,7 +5378,7 @@ discover_nonconstant_array_refs (void)\n   basic_block bb;\n   gimple_stmt_iterator gsi;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       {\n \tgimple stmt = gsi_stmt (gsi);"}, {"sha": "5639e7ae8560c3b290274af1ccc2caff84fdb523", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -50,7 +50,7 @@ flow_loops_cfg_dump (FILE *file)\n   if (!file)\n     return;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       edge succ;\n       edge_iterator ei;\n@@ -834,7 +834,7 @@ get_loop_body (const struct loop *loop)\n       gcc_assert (loop->num_nodes == (unsigned) n_basic_blocks_for_fn (cfun));\n       body[tv++] = loop->header;\n       body[tv++] = EXIT_BLOCK_PTR_FOR_FN (cfun);\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tbody[tv++] = bb;\n     }\n   else\n@@ -1082,7 +1082,7 @@ record_loop_exits (void)\n \t\t\t\t\t  loop_exit_hash, loop_exit_eq,\n \t\t\t\t\t  loop_exit_free);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \t{\n@@ -1343,7 +1343,7 @@ verify_loop_structure (void)\n     verify_dominators (CDI_DOMINATORS);\n \n   /* Check the headers.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb_loop_header_p (bb))\n       {\n \tif (bb->loop_father->header == NULL)\n@@ -1479,7 +1479,7 @@ verify_loop_structure (void)\n     {\n       /* Record old info.  */\n       irreds = sbitmap_alloc (last_basic_block_for_fn (cfun));\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  edge_iterator ei;\n \t  if (bb->flags & BB_IRREDUCIBLE_LOOP)\n@@ -1495,7 +1495,7 @@ verify_loop_structure (void)\n       mark_irreducible_loops ();\n \n       /* Compare.  */\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  edge_iterator ei;\n \n@@ -1578,7 +1578,7 @@ verify_loop_structure (void)\n \n       sizes = XCNEWVEC (unsigned, num);\n       memset (sizes, 0, sizeof (unsigned) * num);\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  edge_iterator ei;\n \t  if (bb->loop_father == current_loops->tree_root)"}, {"sha": "5e89cb1cd794c9c1f80cc77b4f9c0657c40ceedc", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -432,7 +432,7 @@ mark_loop_exit_edges (void)\n   if (number_of_loops (cfun) <= 1)\n     return;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       edge_iterator ei;\n "}, {"sha": "daadd9b0e2d744fb5d988ec55ffe9c47497d4ef9", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -416,7 +416,7 @@ compute_bb_for_insn (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx end = BB_END (bb);\n       rtx insn;\n@@ -2275,7 +2275,7 @@ find_partition_fixes (bool flag_only)\n   /* Callers check this.  */\n   gcc_checking_assert (crtl->has_bb_partition);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if ((BB_PARTITION (bb) == BB_COLD_PARTITION))\n       bbs_in_cold_partition.safe_push (bb);\n \n@@ -2372,7 +2372,7 @@ verify_hot_cold_block_grouping (void)\n       || current_ir_type () != IR_RTL_CFGRTL)\n     return err;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       if (current_partition != BB_UNPARTITIONED\n           && BB_PARTITION (bb) != current_partition)\n@@ -3201,7 +3201,7 @@ purge_all_dead_edges (void)\n   int purged = false;\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       bool purged_here = purge_dead_edges (bb);\n \n@@ -3226,7 +3226,7 @@ fixup_abnormal_edges (void)\n   bool inserted = false;\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       edge e;\n       edge_iterator ei;\n@@ -3449,7 +3449,7 @@ record_effective_endpoints (void)\n     cfg_layout_function_header = NULL_RTX;\n \n   next_insn = get_insns ();\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx end;\n \n@@ -3479,7 +3479,7 @@ outof_cfg_layout_mode (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb->next_bb != EXIT_BLOCK_PTR_FOR_FN (cfun))\n       bb->aux = bb->next_bb;\n \n@@ -3857,7 +3857,7 @@ fixup_reorder_chain (void)\n   relink_block_chain (/*stay_in_cfglayout_mode=*/false);\n \n   /* Annoying special case - jump around dead jumptables left in the code.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       edge e = find_fallthru_edge (bb->succs);\n \n@@ -3868,7 +3868,7 @@ fixup_reorder_chain (void)\n   /* Ensure goto_locus from edges has some instructions with that locus\n      in RTL.  */\n   if (!optimize)\n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       {\n         edge e;\n         edge_iterator ei;\n@@ -4047,7 +4047,7 @@ force_one_exit_fallthru (void)\n \n   /* Fix up the chain of blocks -- make FORWARDER immediately precede the\n      exit block.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       if (bb->aux == NULL && bb != forwarder)\n \t{\n@@ -4258,7 +4258,7 @@ break_superblocks (void)\n   superblocks = sbitmap_alloc (last_basic_block_for_fn (cfun));\n   bitmap_clear (superblocks);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb->flags & BB_SUPERBLOCK)\n       {\n \tbb->flags &= ~BB_SUPERBLOCK;"}, {"sha": "f1595fd0aff47cf33cc18630ef5c6a7afc688a07", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -317,7 +317,7 @@ build_cgraph_edges (void)\n \n   /* Create the callgraph edges and record the nodes referenced by the function.\n      body.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n@@ -451,7 +451,7 @@ rebuild_cgraph_edges (void)\n \n   node->count = ENTRY_BLOCK_PTR_FOR_FN (cfun)->count;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n@@ -505,7 +505,7 @@ cgraph_rebuild_references (void)\n \n   node->count = ENTRY_BLOCK_PTR_FOR_FN (cfun)->count;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \tipa_record_stmt_references (node, gsi_stmt (gsi));"}, {"sha": "5c897cf106d148343de9015cf5d227c8f74c0156", "filename": "gcc/combine-stack-adj.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcombine-stack-adj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcombine-stack-adj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine-stack-adj.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -95,7 +95,7 @@ combine_stack_adjustments (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     combine_stack_adjustments_for_block (bb);\n }\n "}, {"sha": "dea6c2818bb7a6e3cb89c0259bae17cc042aa0c6", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -960,7 +960,7 @@ delete_noop_moves (void)\n   rtx insn, next;\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb)); insn = next)\n \t{\n@@ -997,7 +997,7 @@ create_log_links (void)\n      usage -- these are taken from original flow.c did. Don't ask me why it is\n      done this way; I don't know and if it works, I don't want to know.  */\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_BB_INSNS_REVERSE (bb, insn)\n         {\n@@ -1160,7 +1160,7 @@ combine_instructions (rtx f, unsigned int nregs)\n   last_bb = ENTRY_BLOCK_PTR_FOR_FN (cfun);\n \n   create_log_links ();\n-  FOR_EACH_BB (this_basic_block)\n+  FOR_EACH_BB_FN (this_basic_block, cfun)\n     {\n       optimize_this_for_speed_p = optimize_bb_for_speed_p (this_basic_block);\n       last_call_luid = 0;\n@@ -1211,7 +1211,7 @@ combine_instructions (rtx f, unsigned int nregs)\n   setup_incoming_promotions (first);\n   last_bb = ENTRY_BLOCK_PTR_FOR_FN (cfun);\n \n-  FOR_EACH_BB (this_basic_block)\n+  FOR_EACH_BB_FN (this_basic_block, cfun)\n     {\n       rtx last_combined_insn = NULL_RTX;\n       optimize_this_for_speed_p = optimize_bb_for_speed_p (this_basic_block);"}, {"sha": "7027a262bcfcfaa60b99d299185b8f16daeb11cb", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -16673,7 +16673,7 @@ thumb1_reorg (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx dest, src;\n       rtx pat, op0, set = NULL;\n@@ -16751,7 +16751,7 @@ thumb2_reorg (void)\n   compute_bb_for_insn ();\n   df_analyze ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n "}, {"sha": "c15451cd2edf2c6320af67ed1c3ad6dea7535271", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -3957,7 +3957,7 @@ static void\n bfin_gen_bundles (void)\n {\n   basic_block bb;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn, next;\n       rtx slot[3];\n@@ -4036,7 +4036,7 @@ static void\n reorder_var_tracking_notes (void)\n {\n   basic_block bb;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn, next;\n       rtx queue = NULL_RTX;"}, {"sha": "6f80bc8aa4b1278ac54531f0e2446649dab8808c", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -4629,7 +4629,7 @@ c6x_gen_bundles (void)\n   basic_block bb;\n   rtx insn, next, last_call;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn, next;\n       /* The machine is eight insns wide.  We can have up to six shadow\n@@ -5383,7 +5383,7 @@ conditionalize_after_sched (void)\n {\n   basic_block bb;\n   rtx insn;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       {\n \tunsigned uid = INSN_UID (insn);\n@@ -5959,7 +5959,7 @@ c6x_reorg (void)\n \n   if (c6x_flag_schedule_insns2)\n     {\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tif ((bb->flags & BB_DISABLE_SCHEDULE) == 0)\n \t  assign_reservations (BB_HEAD (bb), BB_END (bb));\n     }"}, {"sha": "30f6920aba00cf95a10c449e51a9fcecee381b87", "filename": "gcc/config/epiphany/resolve-sw-modes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fepiphany%2Fresolve-sw-modes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fepiphany%2Fresolve-sw-modes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fresolve-sw-modes.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -69,7 +69,7 @@ resolve_sw_modes (void)\n       df_note_add_problem ();\n       df_analyze ();\n     }\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       {\n \tenum attr_fp_mode selected_mode;"}, {"sha": "3755e62bf966272361d8d1b825b371624738fdf3", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -8070,11 +8070,11 @@ frv_optimize_membar (void)\n   first_io = XCNEWVEC (struct frv_io, last_basic_block_for_fn (cfun));\n   last_membar = XCNEWVEC (rtx, last_basic_block_for_fn (cfun));\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     frv_optimize_membar_local (bb, &first_io[bb->index],\n \t\t\t       &last_membar[bb->index]);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (last_membar[bb->index] != 0)\n       frv_optimize_membar_global (bb, first_io, last_membar[bb->index]);\n "}, {"sha": "5a75bf96ff62a8825e30ac30280a4951a071ae59", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -10500,7 +10500,7 @@ ix86_finalize_stack_realign_flags (void)\n       add_to_hard_reg_set (&set_up_by_prologue, Pmode, ARG_POINTER_REGNUM);\n       add_to_hard_reg_set (&set_up_by_prologue, Pmode,\n \t\t\t   HARD_FRAME_POINTER_REGNUM);\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n         {\n           rtx insn;\n \t  FOR_BB_INSNS (bb, insn)"}, {"sha": "a8379745a14a4b7ad11b7212a05ed40bbb27d033", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -9688,7 +9688,7 @@ ia64_reorg (void)\n \n       /* We can't let modulo-sched prevent us from scheduling any bbs,\n \t since we need the final schedule to produce bundle information.  */\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tbb->flags &= ~BB_DISABLE_SCHEDULE;\n \n       initiate_bundle_states ();"}, {"sha": "e65dc6bda6acb7a04df5a7bf8cce7144a0a64ec5", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -15332,7 +15332,7 @@ mips_annotate_pic_calls (void)\n   basic_block bb;\n   rtx insn;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n     {\n       rtx call, reg, symbol, second_call;"}, {"sha": "8861ffc77069c44a6776b6ab1f3eda49093ad7cd", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -3174,7 +3174,7 @@ reorder_var_tracking_notes (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn, next, last_insn = NULL_RTX;\n       rtx queue = NULL_RTX;"}, {"sha": "1db97fa03232a9b7840ba589f931713278fcecb1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -16395,7 +16395,7 @@ rs6000_alloc_sdmode_stack_slot (void)\n   if (TARGET_NO_SDMODE_STACK)\n     return;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       {\n \ttree ret = walk_gimple_op (gsi_stmt (gsi), rs6000_check_sdmode, NULL);"}, {"sha": "f9b7cd0f741ffa9aaa9f057d5daa5746c63e5a31", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -7458,7 +7458,7 @@ s390_regs_ever_clobbered (char regs_ever_clobbered[])\n       if (!call_really_used_regs[i])\n \tregs_ever_clobbered[i] = 1;\n \n-  FOR_EACH_BB (cur_bb)\n+  FOR_EACH_BB_FN (cur_bb, cfun)\n     {\n       FOR_BB_INSNS (cur_bb, cur_insn)\n \t{"}, {"sha": "fc4a1c03bce076b5cd2994ff0df1efb29846525e", "filename": "gcc/config/sh/sh_treg_combine.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1469,7 +1469,7 @@ sh_treg_combine::execute (void)\n   // Look for basic blocks that end with a conditional branch and try to\n   // optimize them.\n   basic_block bb;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx i = BB_END (bb);\n       if (any_condjump_p (i) && onlyjump_p (i))"}, {"sha": "66209b675ad663d4355c16e703bae411c8260d8b", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -2645,7 +2645,7 @@ spu_machine_dependent_reorg (void)\n     find_many_sub_basic_blocks (blocks);\n \n   /* We have to schedule to make sure alignment is ok. */\n-  FOR_EACH_BB (bb) bb->flags &= ~BB_DISABLE_SCHEDULE;\n+  FOR_EACH_BB_FN (bb, cfun) bb->flags &= ~BB_DISABLE_SCHEDULE;\n \n   /* The hints need to be scheduled, so call it again. */\n   schedule_insns ();"}, {"sha": "eecc9a926c31d255d7d539167961e18744243121", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -4383,7 +4383,7 @@ static void\n tilegx_gen_bundles (void)\n {\n   basic_block bb;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn, next;\n       rtx end = NEXT_INSN (BB_END (bb));\n@@ -4709,7 +4709,7 @@ static void\n reorder_var_tracking_notes (void)\n {\n   basic_block bb;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n   {\n     rtx insn, next;\n     rtx queue = NULL_RTX;"}, {"sha": "b2bafb4f30044fb5b5f0c910d1497b48d92c6069", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -3988,7 +3988,7 @@ static void\n tilepro_gen_bundles (void)\n {\n   basic_block bb;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n   {\n     rtx insn, next;\n     rtx end = NEXT_INSN (BB_END (bb));\n@@ -4259,7 +4259,7 @@ static void\n reorder_var_tracking_notes (void)\n {\n   basic_block bb;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n   {\n     rtx insn, next;\n     rtx queue = NULL_RTX;"}, {"sha": "f7a2924707a7976d3adf8c92bd65a05a6bcb78b9", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -588,7 +588,7 @@ coverage_compute_cfg_checksum (void)\n   basic_block bb;\n   unsigned chksum = n_basic_blocks_for_fn (cfun);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       edge e;\n       edge_iterator ei;"}, {"sha": "7d07246cd0db2f5b8c87ac9b662bb51a07a9cf92", "filename": "gcc/cprop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -400,7 +400,7 @@ compute_hash_table_work (struct hash_table_d *table)\n   /* Allocate vars to track sets of regs.  */\n   reg_set_bitmap = ALLOC_REG_SET (NULL);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n \n@@ -649,7 +649,7 @@ compute_cprop_data (void)\n      aren't recorded for the local pass so they cannot be propagated within\n      their basic block by this pass and 2) the global pass would otherwise\n      propagate them only in the successors of their basic block.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       int index = implicit_set_indexes[bb->index];\n       if (index != -1)\n@@ -1234,7 +1234,7 @@ local_cprop_pass (void)\n   unsigned i;\n \n   cselib_init (0);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_BB_INSNS (bb, insn)\n \t{\n@@ -1359,7 +1359,7 @@ find_implicit_sets (void)\n \n   implicit_sets = XCNEWVEC (rtx, implicit_sets_size);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       /* Check for more than one successor.  */\n       if (EDGE_COUNT (bb->succs) <= 1)"}, {"sha": "0e28f48729678ed7c2da316297331efc4c09def6", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -7335,7 +7335,7 @@ cse_condition_code_reg (void)\n   else\n     cc_reg_2 = NULL_RTX;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx last_insn;\n       rtx cc_reg;"}, {"sha": "3101102723783e9e8b257dcd66a69227ebad383c", "filename": "gcc/dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -623,7 +623,7 @@ prescan_insns_for_dce (bool fast)\n   if (!df_in_progress && ACCUMULATE_OUTGOING_ARGS)\n     arg_stores = BITMAP_ALLOC (NULL);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_BB_INSNS_REVERSE_SAFE (bb, insn, prev)\n \tif (NONDEBUG_INSN_P (insn))"}, {"sha": "ba57d3911bf25a1efe1d8f0466acf12a26b6841d", "filename": "gcc/df-core.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1543,7 +1543,7 @@ df_compact_blocks (void)\n \t    bitmap_set_bit (dflow->out_of_date_transfer_functions, EXIT_BLOCK);\n \n \t  i = NUM_FIXED_BLOCKS;\n-\t  FOR_EACH_BB (bb)\n+\t  FOR_EACH_BB_FN (bb, cfun)\n \t    {\n \t      if (bitmap_bit_p (&tmp, bb->index))\n \t\tbitmap_set_bit (dflow->out_of_date_transfer_functions, i);\n@@ -1564,7 +1564,7 @@ df_compact_blocks (void)\n \t     place in the block_info vector.  Null out the copied\n \t     item.  The entry and exit blocks never move.  */\n \t  i = NUM_FIXED_BLOCKS;\n-\t  FOR_EACH_BB (bb)\n+\t  FOR_EACH_BB_FN (bb, cfun)\n \t    {\n \t      df_set_bb_info (dflow, i,\n \t\t\t      (char *)problem_temps\n@@ -1590,7 +1590,7 @@ df_compact_blocks (void)\n       bitmap_copy (&tmp, df->blocks_to_analyze);\n       bitmap_clear (df->blocks_to_analyze);\n       i = NUM_FIXED_BLOCKS;\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  if (bitmap_bit_p (&tmp, bb->index))\n \t    bitmap_set_bit (df->blocks_to_analyze, i);\n@@ -1601,7 +1601,7 @@ df_compact_blocks (void)\n   bitmap_clear (&tmp);\n \n   i = NUM_FIXED_BLOCKS;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       SET_BASIC_BLOCK_FOR_FN (cfun, i, bb);\n       bb->index = i;"}, {"sha": "70f7254024c6e99fa78de2b9672edfbeb50a81e8", "filename": "gcc/df-problems.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -2427,7 +2427,7 @@ df_word_lr_alloc (bitmap all_blocks ATTRIBUTE_UNUSED)\n \n   bitmap_obstack_initialize (&problem_data->word_lr_bitmaps);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bitmap_set_bit (df_word_lr->out_of_date_transfer_functions, bb->index);\n \n   bitmap_set_bit (df_word_lr->out_of_date_transfer_functions, ENTRY_BLOCK);"}, {"sha": "9f6f67ac045f757c2a558008c7dab7d6a1b1fe92", "filename": "gcc/df-scan.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -449,7 +449,7 @@ df_scan_start_dump (FILE *file ATTRIBUTE_UNUSED)\n \tfprintf (file, \"} \");\n       }\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       if (INSN_P (insn))\n \t{\n@@ -673,7 +673,7 @@ df_scan_blocks (void)\n   df_set_bb_dirty (BASIC_BLOCK_FOR_FN (cfun, EXIT_BLOCK));\n \n   /* Regular blocks */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       unsigned int bb_index = bb->index;\n       df_bb_refs_record (bb_index, true);\n@@ -1415,7 +1415,7 @@ df_insn_rescan_all (void)\n   bitmap_clear (&df->insns_to_rescan);\n   bitmap_clear (&df->insns_to_notes_rescan);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n       FOR_BB_INSNS (bb, insn)\n@@ -4154,7 +4154,7 @@ df_update_entry_exit_and_calls (void)\n \n   /* The call insns need to be rescanned because there may be changes\n      in the set of registers clobbered across the call.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n       FOR_BB_INSNS (bb, insn)"}, {"sha": "521b224b8fbe1c34f1d080294798a3643c1bf035", "filename": "gcc/dominance.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -662,7 +662,7 @@ calculate_dominance_info (enum cdi_direction dir)\n       calc_dfs_tree (&di, reverse);\n       calc_idoms (&di, reverse);\n \n-      FOR_EACH_BB (b)\n+      FOR_EACH_BB_FN (b, cfun)\n \t{\n \t  TBB d = di.dom[di.dfs_order[b->index]];\n \n@@ -1025,7 +1025,7 @@ verify_dominators (enum cdi_direction dir)\n   calc_dfs_tree (&di, reverse);\n   calc_idoms (&di, reverse);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       imm_bb = get_immediate_dominator (dir, bb);\n       if (!imm_bb)\n@@ -1492,7 +1492,7 @@ DEBUG_FUNCTION void\n debug_dominance_info (enum cdi_direction dir)\n {\n   basic_block bb, bb2;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if ((bb2 = get_immediate_dominator (dir, bb)))\n       fprintf (stderr, \"%i %i\\n\", bb->index, bb2->index);\n }"}, {"sha": "e5b08504cba044a2fcb437cf23cbb8246923fead", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -3507,7 +3507,7 @@ static void\n dse_step5_nospill (void)\n {\n   basic_block bb;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       bb_info_t bb_info = bb_table[bb->index];\n       insn_info_t insn_info = bb_info->last_insn;"}, {"sha": "cf4fd149dfc0a3906cabdf9576d3f4807ca7d09f", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1511,7 +1511,7 @@ finish_eh_generation (void)\n     commit_edge_insertions ();\n \n   /* Redirect all EH edges from the post_landing_pad to the landing pad.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       eh_landing_pad lp;\n       edge_iterator ei;"}, {"sha": "f475d276b70c8720c20caf1b7b2dd2fb221a0b90", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -700,14 +700,14 @@ compute_alignments (void)\n       flow_loops_dump (dump_file, NULL, 1);\n     }\n   loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb->frequency > freq_max)\n       freq_max = bb->frequency;\n   freq_threshold = freq_max / PARAM_VALUE (PARAM_ALIGN_THRESHOLD);\n \n   if (dump_file)\n     fprintf (dump_file, \"freq_max: %i\\n\",freq_max);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx label = BB_HEAD (bb);\n       int fallthru_frequency = 0, branch_frequency = 0, has_fallthru = 0;"}, {"sha": "e00f583b74367b58e99cddbb9b0f27a07b83220a", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -6043,7 +6043,7 @@ thread_prologue_and_epilogue_insns (void)\n       max_grow_size = get_uncond_jump_length ();\n       max_grow_size *= PARAM_VALUE (PARAM_MAX_GROW_COPY_BB_INSNS);\n \n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  rtx insn;\n \t  unsigned size = 0;\n@@ -6120,7 +6120,7 @@ thread_prologue_and_epilogue_insns (void)\n \t needing a prologue.  */\n       bitmap_clear (&bb_on_list);\n       bitmap_and_compl (&bb_antic_flags, &bb_flags, &bb_tail);\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  if (!bitmap_bit_p (&bb_antic_flags, bb->index))\n \t    continue;\n@@ -6154,7 +6154,7 @@ thread_prologue_and_epilogue_insns (void)\n       /* Find exactly one edge that leads to a block in ANTIC from\n \t a block that isn't.  */\n       if (!bitmap_bit_p (&bb_antic_flags, entry_edge->dest->index))\n-\tFOR_EACH_BB (bb)\n+\tFOR_EACH_BB_FN (bb, cfun)\n \t  {\n \t    if (!bitmap_bit_p (&bb_antic_flags, bb->index))\n \t      continue;\n@@ -6202,7 +6202,7 @@ thread_prologue_and_epilogue_insns (void)\n \t  /* Find tail blocks reachable from both blocks needing a\n \t     prologue and blocks not needing a prologue.  */\n \t  if (!bitmap_empty_p (&bb_tail))\n-\t    FOR_EACH_BB (bb)\n+\t    FOR_EACH_BB_FN (bb, cfun)\n \t      {\n \t\tbool some_pro, some_no_pro;\n \t\tif (!bitmap_bit_p (&bb_tail, bb->index))\n@@ -6480,7 +6480,7 @@ thread_prologue_and_epilogue_insns (void)\n \t we take advantage of cfg_layout_finalize using\n \t fixup_fallthru_exit_predecessor.  */\n       cfg_layout_initialize (0);\n-      FOR_EACH_BB (cur_bb)\n+      FOR_EACH_BB_FN (cur_bb, cfun)\n \tif (cur_bb->index >= NUM_FIXED_BLOCKS\n \t    && cur_bb->next_bb->index >= NUM_FIXED_BLOCKS)\n \t  cur_bb->aux = cur_bb->next_bb;\n@@ -7192,7 +7192,7 @@ rest_of_match_asm_constraints (void)\n     return 0;\n \n   df_set_flags (DF_DEFER_INSN_RESCAN);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_BB_INSNS (bb, insn)\n \t{"}, {"sha": "a6874abe009884aa94753d2b9003df618f90b4ba", "filename": "gcc/gcse.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1559,7 +1559,7 @@ compute_hash_table_work (struct hash_table_d *table)\n   for (i = 0; i < max_reg_num (); ++i)\n     reg_avail_info[i].last_bb = NULL;\n \n-  FOR_EACH_BB (current_bb)\n+  FOR_EACH_BB_FN (current_bb, cfun)\n     {\n       rtx insn;\n       unsigned int regno;\n@@ -1899,7 +1899,7 @@ prune_expressions (bool pre_p)\n \t}\n     }\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       edge e;\n       edge_iterator ei;\n@@ -2020,7 +2020,7 @@ compute_pre_data (void)\n      ~(TRANSP | COMP)\n   */\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       bitmap_ior (ae_kill[bb->index], transp[bb->index], comp[bb->index]);\n       bitmap_not (ae_kill[bb->index], ae_kill[bb->index]);\n@@ -2855,7 +2855,7 @@ compute_code_hoist_vbeinout (void)\n     {\n       fprintf (dump_file, \"hoisting vbeinout computation: %d passes\\n\", passes);\n \n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n         {\n \t  fprintf (dump_file, \"vbein (%d): \", bb->index);\n \t  dump_bitmap_file (dump_file, hoist_vbein[bb->index]);\n@@ -3169,7 +3169,7 @@ hoist_code (void)\n   to_bb_head = XCNEWVEC (int, get_max_uid ());\n   bb_size = XCNEWVEC (int, last_basic_block_for_fn (cfun));\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n       int to_head;\n@@ -3512,7 +3512,7 @@ calculate_bb_reg_pressure (void)\n \n   ira_setup_eliminable_regset ();\n   curr_regs_live = BITMAP_ALLOC (&reg_obstack);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       curr_bb = bb;\n       BB_DATA (bb)->live_in = BITMAP_ALLOC (NULL);\n@@ -3562,7 +3562,7 @@ calculate_bb_reg_pressure (void)\n     return;\n \n   fprintf (dump_file, \"\\nRegister Pressure: \\n\");\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       fprintf (dump_file, \"  Basic block %d: \\n\", bb->index);\n       for (i = 0; (int) i < ira_pressure_classes_num; i++)\n@@ -3888,7 +3888,7 @@ compute_ld_motion_mems (void)\n   pre_ldst_mems = NULL;\n   pre_ldst_table.create (13);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_BB_INSNS (bb, insn)\n \t{"}, {"sha": "2460c616dac73a37b805e2ddbfbc708b9377cc16", "filename": "gcc/gimple-iterator.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fgimple-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fgimple-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -839,7 +839,7 @@ gsi_commit_edge_inserts (void)\n   gsi_commit_one_edge_insert (single_succ_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun)),\n \t\t\t      NULL);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_EACH_EDGE (e, ei, bb->succs)\n       gsi_commit_one_edge_insert (e, NULL);\n }"}, {"sha": "aaa75378b3e07b07cc4ae87c8bec50e1472c716b", "filename": "gcc/gimple-ssa-isolate-paths.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fgimple-ssa-isolate-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fgimple-ssa-isolate-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-isolate-paths.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -216,7 +216,7 @@ find_implicit_erroneous_behaviour (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator si;\n \n@@ -304,7 +304,7 @@ find_explicit_erroneous_behaviour (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator si;\n "}, {"sha": "66c1b6ef95e3a90068c45aac9a7050d268503d07", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -2295,7 +2295,7 @@ rewrite_reductions_out_of_ssa (scop_p scop)\n   gimple_stmt_iterator psi;\n   sese region = SCOP_REGION (scop);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb_in_sese_p (bb, region))\n       for (psi = gsi_start_phis (bb); !gsi_end_p (psi);)\n \t{\n@@ -2489,7 +2489,7 @@ rewrite_cross_bb_scalar_deps_out_of_ssa (scop_p scop)\n   /* Create an extra empty BB after the scop.  */\n   split_edge (SESE_EXIT (region));\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb_in_sese_p (bb, region))\n       for (psi = gsi_start_bb (bb); !gsi_end_p (psi); gsi_next (&psi))\n \tchanged |= rewrite_cross_bb_scalar_deps (scop, &psi);"}, {"sha": "4f3b05477ce0860d8387674847fbd009bcfd6180", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -6709,7 +6709,7 @@ haifa_sched_init (void)\n \n     sched_init_bbs ();\n \n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       bbs.quick_push (bb);\n     sched_init_luids (bbs);\n     sched_deps_init (true);"}, {"sha": "b6184a26d87f3e9333c1411c3ec358bfd42602af", "filename": "gcc/hw-doloop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fhw-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fhw-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhw-doloop.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -357,7 +357,7 @@ discover_loops (bitmap_obstack *loop_stack, struct hw_doloop_hooks *hooks)\n   /* Find all the possible loop tails.  This means searching for every\n      loop_end instruction.  For each one found, create a hwloop_info\n      structure and add the head block to the work list. */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx tail = BB_END (bb);\n       rtx insn, reg;\n@@ -480,7 +480,7 @@ set_bb_indices (void)\n   intptr_t index;\n \n   index = 0;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bb->aux = (void *) index++;\n }\n \n@@ -537,7 +537,7 @@ reorder_loops (hwloop_info loops)\n       loops = loops->next;\n     }\n   \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       if (bb->next_bb != EXIT_BLOCK_PTR_FOR_FN (cfun))\n \tbb->aux = bb->next_bb;"}, {"sha": "543a70da319f1238ee20e1f91346ef1e37d18293", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -4408,7 +4408,7 @@ if_convert (bool after_combine)\n \tfprintf (dump_file, \"\\n\\n========== Pass %d ==========\\n\", pass);\n #endif\n \n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n           basic_block new_bb;\n           while (!df_get_bb_dirty (bb)"}, {"sha": "d26ee9bd71e6211f80ddac2aecf85a8bda9dbe8e", "filename": "gcc/init-regs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Finit-regs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Finit-regs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finit-regs.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -59,7 +59,7 @@ initialize_uninitialized_regs (void)\n \n   df_analyze ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n       bitmap lr = DF_LR_IN (bb);"}, {"sha": "7b16b7e657ccb7e3066d53a35f1f80bc9582df9f", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -4726,7 +4726,7 @@ ipcp_transform_function (struct cgraph_node *node)\n   descriptors.safe_grow_cleared (param_count);\n   ipa_populate_param_decls (node, descriptors);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       {\n \tstruct ipa_agg_replacement_value *v;"}, {"sha": "a60e078c90c22e3a3ca3a38608cb06922754c55b", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -754,7 +754,7 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n \n   push_cfun (DECL_STRUCT_FUNCTION (decl));\n \n-  FOR_EACH_BB (this_block)\n+  FOR_EACH_BB_FN (this_block, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       struct walk_stmt_info wi;"}, {"sha": "390adf1f7983febd1020df0800fa987dbda1f321", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1070,7 +1070,7 @@ find_split_points (int overall_time, int overall_size)\n         stack.pop ();\n     }\n   ENTRY_BLOCK_PTR_FOR_FN (cfun)->aux = NULL;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bb->aux = NULL;\n   stack.release ();\n   BITMAP_FREE (current.ssa_names_to_pass);\n@@ -1595,7 +1595,7 @@ execute_split_functions (void)\n   /* Compute local info about basic blocks and determine function size/time.  */\n   bb_info_vec.safe_grow_cleared (last_basic_block_for_fn (cfun) + 1);\n   memset (&best_split_point, 0, sizeof (best_split_point));\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       int time = 0;\n       int size = 0;"}, {"sha": "660fb0d6eb05236db8ec2eb76899c2829c4c7050", "filename": "gcc/ira-build.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -341,7 +341,7 @@ form_loop_tree (void)\n   /* We can not use loop/bb node access macros because of potential\n      checking and because the nodes are not initialized enough\n      yet.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       bb_node = &ira_bb_nodes[bb->index];\n       bb_node->bb = bb;"}, {"sha": "c8d64d5e50ace6a36c8b49ac65d591078a27ed83", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1585,7 +1585,7 @@ find_costs_and_classes (FILE *dump_file)\n \t{\n \t  basic_block bb;\n \n-\t  FOR_EACH_BB (bb)\n+\t  FOR_EACH_BB_FN (bb, cfun)\n \t    process_bb_for_costs (bb);\n \t}\n "}, {"sha": "196efa025457292e16d0927e276dd5a80b89ca63", "filename": "gcc/ira-emit.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fira-emit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fira-emit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-emit.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -986,7 +986,7 @@ emit_moves (void)\n   edge e;\n   rtx insns, tmp;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       if (at_bb_start[bb->index] != NULL)\n \t{\n@@ -1203,7 +1203,7 @@ add_ranges_and_copies (void)\n   bitmap live_through;\n \n   live_through = ira_allocate_bitmap ();\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       /* It does not matter what loop_tree_node (of source or\n \t destination block) to use for searching allocnos by their\n@@ -1260,7 +1260,7 @@ ira_emit (bool loops_p)\n   ira_free_bitmap (renamed_regno_bitmap);\n   ira_free_bitmap (local_allocno_bitmap);\n   setup_entered_from_non_parent_p ();\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       at_bb_start[bb->index] = NULL;\n       at_bb_end[bb->index] = NULL;\n@@ -1275,15 +1275,15 @@ ira_emit (bool loops_p)\n   memset (allocno_last_set_check, 0, sizeof (int) * max_reg_num ());\n   memset (hard_regno_last_set_check, 0, sizeof (hard_regno_last_set_check));\n   curr_tick = 0;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     unify_moves (bb, true);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     unify_moves (bb, false);\n   move_vec.create (ira_allocnos_num);\n   emit_moves ();\n   add_ranges_and_copies ();\n   /* Clean up: */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       free_move_list (at_bb_start[bb->index]);\n       free_move_list (at_bb_end[bb->index]);\n@@ -1301,7 +1301,7 @@ ira_emit (bool loops_p)\n      reload assumes initial insn codes defined.  The insn codes can be\n      invalidated by CFG infrastructure for example in jump\n      redirection.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS_REVERSE (bb, insn)\n       if (INSN_P (insn))\n \trecog_memoized (insn);"}, {"sha": "b4ae0ca7451da5988295e536e6ba75f367716ebe", "filename": "gcc/ira.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -2135,7 +2135,7 @@ decrease_live_ranges_number (void)\n   if (ira_dump_file)\n     fprintf (ira_dump_file, \"Starting decreasing number of live ranges...\\n\");\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       {\n \tset = single_set (insn);\n@@ -2358,7 +2358,7 @@ compute_regs_asm_clobbered (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n       FOR_BB_INSNS_REVERSE (bb, insn)\n@@ -2951,7 +2951,7 @@ mark_elimination (int from, int to)\n   basic_block bb;\n   bitmap r;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       r = DF_LR_IN (bb);\n       if (bitmap_bit_p (r, from))\n@@ -3473,15 +3473,15 @@ update_equiv_regs (void)\n      paradoxical subreg. Don't set such reg sequivalent to a mem,\n      because lra will not substitute such equiv memory in order to\n      prevent access beyond allocated memory for paradoxical memory subreg.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       if (NONDEBUG_INSN_P (insn))\n \tfor_each_rtx (&insn, set_paradoxical_subreg, (void *) pdx_subregs);\n \n   /* Scan the insns and find which registers have equivalences.  Do this\n      in a separate scan of the insns because (due to -fcse-follow-jumps)\n      a register can be set below its use.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       loop_depth = bb_loop_depth (bb);\n \n@@ -3905,7 +3905,7 @@ update_equiv_regs (void)\n \n   if (!bitmap_empty_p (cleared_regs))\n     {\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  bitmap_and_compl_into (DF_LR_IN (bb), cleared_regs);\n \t  bitmap_and_compl_into (DF_LR_OUT (bb), cleared_regs);\n@@ -4532,7 +4532,7 @@ find_moveable_pseudos (void)\n   bitmap_initialize (&used, 0);\n   bitmap_initialize (&set, 0);\n   bitmap_initialize (&unusable_as_input, 0);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n       bitmap transp = bb_transp_live + bb->index;\n@@ -4595,7 +4595,7 @@ find_moveable_pseudos (void)\n   bitmap_clear (&used);\n   bitmap_clear (&set);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       bitmap local = bb_local + bb->index;\n       rtx insn;\n@@ -4824,7 +4824,7 @@ find_moveable_pseudos (void)\n \t}\n     }\n   \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       bitmap_clear (bb_local + bb->index);\n       bitmap_clear (bb_transp_live + bb->index);\n@@ -4921,7 +4921,7 @@ split_live_ranges_for_shrink_wrap (void)\n   bitmap_initialize (&reachable, 0);\n   queue.create (n_basic_blocks_for_fn (cfun));\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       if (CALL_P (insn) && !SIBLING_CALL_P (insn))\n \t{\n@@ -5145,7 +5145,7 @@ allocate_initial_values (void)\n \t\t     fixed regs are accepted.  */\n \t\t  SET_REGNO (preg, new_regno);\n \t\t  /* Update global register liveness information.  */\n-\t\t  FOR_EACH_BB (bb)\n+\t\t  FOR_EACH_BB_FN (bb, cfun)\n \t\t    {\n \t\t      if (REGNO_REG_SET_P (df_get_live_in (bb), regno))\n \t\t\tSET_REGNO_REG_SET (df_get_live_in (bb), new_regno);"}, {"sha": "5eefeefbf6366aa095afe784c1ffdf3b79f3dcf1", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -275,7 +275,7 @@ mark_all_labels (rtx f)\n   if (current_ir_type () == IR_RTL_CFGLAYOUT)\n     {\n       basic_block bb;\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  /* In cfglayout mode, we don't bother with trivial next-insn\n \t     propagation of LABEL_REFs into JUMP_LABEL.  This will be"}, {"sha": "0b528d9466943f4371195d0726a7cb1615314a80", "filename": "gcc/lcm.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -281,7 +281,7 @@ compute_laterin (struct edge_list *edge_list, sbitmap *earliest,\n \n   /* Add all the blocks to the worklist.  This prevents an early exit from\n      the loop given our optimistic initialization of LATER above.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       *qin++ = bb;\n       bb->aux = bb;\n@@ -350,7 +350,7 @@ compute_insert_delete (struct edge_list *edge_list, sbitmap *antloc,\n   int x;\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bitmap_and_compl (del[bb->index], antloc[bb->index],\n \t\t\tlaterin[bb->index]);\n \n@@ -497,7 +497,7 @@ compute_available (sbitmap *avloc, sbitmap *kill, sbitmap *avout,\n \n   /* Put every block on the worklist; this is necessary because of the\n      optimistic initialization of AVOUT above.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       *qin++ = bb;\n       bb->aux = bb;\n@@ -638,7 +638,7 @@ compute_nearerout (struct edge_list *edge_list, sbitmap *farthest,\n \n   /* Add all the blocks to the worklist.  This prevents an early exit\n      from the loop given our optimistic initialization of NEARER.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       *tos++ = bb;\n       bb->aux = bb;\n@@ -695,7 +695,7 @@ compute_rev_insert_delete (struct edge_list *edge_list, sbitmap *st_avloc,\n   int x;\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bitmap_and_compl (del[bb->index], st_avloc[bb->index],\n \t\t\tnearerout[bb->index]);\n "}, {"sha": "3dc6953d52584fc317a82c90d710f60ed53c9f0c", "filename": "gcc/loop-init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -213,7 +213,7 @@ fix_loop_structure (bitmap changed_bbs)\n   /* Remember the depth of the blocks in the loop hierarchy, so that we can\n      recognize blocks whose loop nesting relationship has changed.  */\n   if (changed_bbs)\n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       bb->aux = (void *) (size_t) loop_depth (bb->loop_father);\n \n   /* Remove the dead loops from structures.  We start from the innermost\n@@ -256,7 +256,7 @@ fix_loop_structure (bitmap changed_bbs)\n   /* Mark the blocks whose loop has changed.  */\n   if (changed_bbs)\n     {\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  if ((void *) (size_t) loop_depth (bb->loop_father) != bb->aux)\n \t    bitmap_set_bit (changed_bbs, bb->index);"}, {"sha": "f47bd5059229d7dd07dc4239f6af4273e7196ad0", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1825,7 +1825,7 @@ calculate_loop_reg_pressure (void)\n       }\n   ira_setup_eliminable_regset ();\n   bitmap_initialize (&curr_regs_live, &reg_obstack);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       curr_loop = bb->loop_father;\n       if (curr_loop == current_loops->tree_root)"}, {"sha": "0b0e397c61af46bdd22746d72f2b1c00c76daa09", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1463,7 +1463,7 @@ decompose_multiword_subregs (bool decompose_copies)\n   memset (reg_copy_graph.address (), 0, sizeof (bitmap) * max);\n \n   speed_p = optimize_function_for_speed_p (cfun);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n \n@@ -1543,7 +1543,7 @@ decompose_multiword_subregs (bool decompose_copies)\n       EXECUTE_IF_SET_IN_BITMAP (decomposable_context, 0, regno, iter)\n \tdecompose_register (regno);\n \n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  rtx insn;\n "}, {"sha": "41ee28648aede6f4babde89a78f16d78100e1510", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1302,7 +1302,7 @@ assign_by_spills (void)\n \n       /* FIXME: Look up the changed insns in the cached LRA insn data using\n \t an EXECUTE_IF_SET_IN_BITMAP over changed_insns.  */\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tFOR_BB_INSNS (bb, insn)\n \tif (bitmap_bit_p (&changed_insns, INSN_UID (insn)))\n \t  {"}, {"sha": "94a21f05aecf3c0ba93e3ff81c14b56929bfaea1", "filename": "gcc/lra-coalesce.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-coalesce.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -239,7 +239,7 @@ lra_coalesce (void)\n   mv_num = 0;\n   /* Collect moves.  */\n   coalesced_moves = 0;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_BB_INSNS_SAFE (bb, insn, next)\n \tif (INSN_P (insn)\n@@ -297,7 +297,7 @@ lra_coalesce (void)\n \t}\n     }\n   bitmap_initialize (&used_pseudos_bitmap, &reg_obstack);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       update_live_info (df_get_live_in (bb));\n       update_live_info (df_get_live_out (bb));"}, {"sha": "0c4eec3923067ae432a2f92d9cfcaa559d29d3d2", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -5302,7 +5302,7 @@ lra_inheritance (void)\n   bitmap_initialize (&live_regs, &reg_obstack);\n   bitmap_initialize (&temp_bitmap, &reg_obstack);\n   bitmap_initialize (&ebb_global_regs, &reg_obstack);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       start_bb = bb;\n       if (lra_dump_file != NULL)\n@@ -5403,7 +5403,7 @@ remove_inheritance_pseudos (bitmap remove_pseudos)\n      because we need to marks insns affected by previous\n      inheritance/split pass for processing by the subsequent\n      constraint pass.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       fix_bb_live_info (df_get_live_in (bb), remove_pseudos);\n       fix_bb_live_info (df_get_live_out (bb), remove_pseudos);"}, {"sha": "6c52bb34251006460138dcd757b73d39ae4b1159", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1284,7 +1284,7 @@ init_elimination (void)\n   struct elim_table *ep;\n \n   init_elim_table ();\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       curr_sp_change = 0;\n       stop_to_sp_elimination_p = false;"}, {"sha": "1e5f52bd0096837a0dd16cca693d9a03f08f960d", "filename": "gcc/lra-spills.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra-spills.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra-spills.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-spills.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -280,7 +280,7 @@ assign_spill_hard_regs (int *pseudo_regnos, int n)\n \t  add_to_hard_reg_set (&reserved_hard_regs[p],\n \t\t\t       lra_reg_info[i].biggest_mode, hard_regno);\n   bitmap_initialize (&ok_insn_bitmap, &reg_obstack);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       if (DEBUG_INSN_P (insn)\n \t  || ((set = single_set (insn)) != NULL_RTX\n@@ -478,7 +478,7 @@ spill_pseudos (void)\n \t  bitmap_ior_into (&changed_insns, &lra_reg_info[i].insn_bitmap);\n \t}\n     }\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_BB_INSNS (bb, insn)\n \tif (bitmap_bit_p (&changed_insns, INSN_UID (insn)))\n@@ -686,7 +686,7 @@ lra_final_code_change (void)\n     if (lra_reg_info[i].nrefs != 0\n \t&& (hard_regno = lra_get_regno_hard_regno (i)) >= 0)\n       SET_REGNO (regno_reg_rtx[i], hard_regno);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS_SAFE (bb, insn, curr)\n       if (INSN_P (insn))\n \t{"}, {"sha": "21b8af17ace37074d4d8384505061cf8ad8c1a13", "filename": "gcc/lra.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1960,7 +1960,7 @@ remove_scratches (void)\n   scratches.create (get_max_uid ());\n   bitmap_initialize (&scratch_bitmap, &reg_obstack);\n   bitmap_initialize (&scratch_operand_bitmap, &reg_obstack);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n     if (INSN_P (insn))\n       {\n@@ -2049,7 +2049,7 @@ check_rtl (bool final_p)\n   rtx insn;\n \n   lra_assert (! final_p || reload_completed);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n     if (NONDEBUG_INSN_P (insn)\n \t&& GET_CODE (PATTERN (insn)) != USE\n@@ -2090,7 +2090,7 @@ has_nonexceptional_receiver (void)\n   /* First determine which blocks can reach exit via normal paths.  */\n   tos = worklist = XNEWVEC (basic_block, n_basic_blocks_for_fn (cfun) + 1);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bb->flags &= ~BB_REACHABLE;\n \n   /* Place the exit block on our worklist.  */\n@@ -2165,7 +2165,7 @@ update_inc_notes (void)\n   basic_block bb;\n   rtx insn;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n     if (NONDEBUG_INSN_P (insn))\n       {"}, {"sha": "f9b55051923214a71fe894b684ece3b1225a34be", "filename": "gcc/mcf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fmcf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fmcf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmcf.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1281,7 +1281,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n     {\n       fprintf (dump_file, \"\\nCheck %s() CFG flow conservation:\\n\",\n \t       current_function_name ());\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n         {\n           if ((bb->count != sum_edge_counts (bb->preds))\n                || (bb->count != sum_edge_counts (bb->succs)))"}, {"sha": "4e31d6812a392a3ee8af3aa58bb2b9aef602f1a9", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -516,7 +516,7 @@ optimize_mode_switching (void)\n       /* Determine what the first use (if any) need for a mode of entity E is.\n \t This will be the mode that is anticipatable for this block.\n \t Also compute the initial transparency settings.  */\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  struct seginfo *ptr;\n \t  int last_mode = no_mode;\n@@ -624,7 +624,7 @@ optimize_mode_switching (void)\n \t  int m = current_mode[j] = MODE_PRIORITY_TO_MODE (entity_map[j], i);\n \t  struct bb_info *info = bb_info[j];\n \n-\t  FOR_EACH_BB (bb)\n+\t  FOR_EACH_BB_FN (bb, cfun)\n \t    {\n \t      if (info[bb->index].seginfo->mode == m)\n \t\tbitmap_set_bit (antic[bb->index], j);\n@@ -637,7 +637,7 @@ optimize_mode_switching (void)\n       /* Calculate the optimal locations for the\n \t placement mode switches to modes with priority I.  */\n \n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tbitmap_not (kill[bb->index], transp[bb->index]);\n       edge_list = pre_edge_lcm (n_entities, transp, comp, antic,\n \t\t\t\tkill, &insert, &del);"}, {"sha": "ba8d02096ef81c9d8e9c88817c89b8c36848ffa4", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -3343,7 +3343,7 @@ rest_of_handle_sms (void)\n   max_regno = max_reg_num ();\n \n   /* Finalize layout changes.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb->next_bb != EXIT_BLOCK_PTR_FOR_FN (cfun))\n       bb->aux = bb->next_bb;\n   free_dominance_info (CDI_DOMINATORS);"}, {"sha": "05fca4096fc250246d255ffb3ad2e611f103278d", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -4545,7 +4545,7 @@ optimize_omp_library_calls (gimple entry_stmt)\n \t\t      && find_omp_clause (gimple_omp_task_clauses (entry_stmt),\n \t\t\t\t\t  OMP_CLAUSE_UNTIED) != NULL);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       {\n \tgimple call = gsi_stmt (gsi);\n@@ -4849,7 +4849,7 @@ expand_omp_taskreg (struct omp_region *region)\n \t  basic_block bb;\n \t  bool changed = false;\n \n-\t  FOR_EACH_BB (bb)\n+\t  FOR_EACH_BB_FN (bb, cfun)\n \t    changed |= gimple_purge_dead_eh_edges (bb);\n \t  if (changed)\n \t    cleanup_tree_cfg ();\n@@ -7939,7 +7939,7 @@ expand_omp_target (struct omp_region *region)\n \t  basic_block bb;\n \t  bool changed = false;\n \n-\t  FOR_EACH_BB (bb)\n+\t  FOR_EACH_BB_FN (bb, cfun)\n \t    changed |= gimple_purge_dead_eh_edges (bb);\n \t  if (changed)\n \t    cleanup_tree_cfg ();"}, {"sha": "a1204f9016a74ce6976e9dfccda1066ab41d9020", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -266,7 +266,7 @@ alloc_mem (void)\n   /* Find the largest UID and create a mapping from UIDs to CUIDs.  */\n   uid_cuid = XCNEWVEC (int, get_max_uid () + 1);\n   i = 1;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       {\n         if (INSN_P (insn))\n@@ -828,7 +828,7 @@ compute_hash_table (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n "}, {"sha": "bfa5a38f062c4fbf24dadd50d36239da07f4d255", "filename": "gcc/postreload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -213,7 +213,7 @@ reload_cse_regs_1 (void)\n   cselib_init (CSELIB_RECORD_MEMORY);\n   init_alias_analysis ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       {\n \tif (INSN_P (insn))"}, {"sha": "78efb7235f27498a151186051819b859518a3f8a", "filename": "gcc/predict.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1955,7 +1955,7 @@ strip_predict_hints (void)\n   gimple ass_stmt;\n   tree var;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator bi;\n       for (bi = gsi_start_bb (bb); !gsi_end_p (bi);)\n@@ -2226,7 +2226,7 @@ tree_bb_level_predictions (void)\n \n   apply_return_prediction ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n \n@@ -2400,10 +2400,10 @@ tree_estimate_probability (void)\n   if (number_of_loops (cfun) > 1)\n     predict_loops ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     tree_estimate_probability_bb (bb);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     combine_predictions_for_bb (bb);\n \n #ifdef ENABLE_CHECKING\n@@ -2928,7 +2928,7 @@ expensive_function_p (int threshold)\n \n   /* Maximally BB_FREQ_MAX^2 so overflow won't happen.  */\n   limit = ENTRY_BLOCK_PTR_FOR_FN (cfun)->frequency * threshold;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n \n@@ -2997,7 +2997,7 @@ estimate_bb_frequencies (bool force)\n       estimate_loops ();\n \n       memcpy (&freq_max, &real_zero, sizeof (real_zero));\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tif (sreal_compare (&freq_max, &BLOCK_INFO (bb)->frequency) < 0)\n \t  memcpy (&freq_max, &BLOCK_INFO (bb)->frequency, sizeof (freq_max));\n \n@@ -3055,7 +3055,7 @@ compute_function_frequency (void)\n      functions to unlikely and that is most of what we care about.  */\n   if (!cfun->after_inlining)\n     node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       if (maybe_hot_bb_p (cfun, bb))\n \t{"}, {"sha": "62b126c4a818e500f3748ae02b5ae9671eabddce", "filename": "gcc/profile.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -354,7 +354,7 @@ is_inconsistent (void)\n {\n   basic_block bb;\n   bool inconsistent = false;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       inconsistent |= is_edge_inconsistent (bb->preds);\n       if (!dump_file && inconsistent)\n@@ -692,7 +692,7 @@ compute_branch_probabilities (unsigned cfg_checksum, unsigned lineno_checksum)\n \n   /* If the graph has been correctly solved, every block will have a\n      succ and pred count of zero.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gcc_assert (!BB_INFO (bb)->succ_count && !BB_INFO (bb)->pred_count);\n     }\n@@ -1021,7 +1021,7 @@ branch_prob (void)\n      We also add fake exit edges for each call and asm statement in the\n      basic, since it may not return.  */\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       int need_exit_edge = 0, need_entry_edge = 0;\n       int have_exit_edge = 0, have_entry_edge = 0;\n@@ -1260,7 +1260,7 @@ branch_prob (void)\n       /* Initialize the output.  */\n       output_location (NULL, 0, NULL, NULL);\n \n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  gimple_stmt_iterator gsi;\n \t  gcov_position_t offset = 0;"}, {"sha": "9938e98b4dcbc425ba1216e7c1542b8469fd6ff0", "filename": "gcc/ree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -835,7 +835,7 @@ find_removable_extensions (void)\n   rtx insn, set;\n   unsigned *def_map = XCNEWVEC (unsigned, max_insn_uid);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       {\n \tif (!NONDEBUG_INSN_P (insn))"}, {"sha": "87b9821fbeb4daeab39a60d1e837323ad063b006", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -2846,7 +2846,7 @@ compensate_edges (void)\n \n   starting_stack_p = false;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb != ENTRY_BLOCK_PTR_FOR_FN (cfun))\n       {\n         edge e;\n@@ -3153,7 +3153,7 @@ convert_regs (void)\n \n   /* ??? Process all unreachable blocks.  Though there's no excuse\n      for keeping these even when not optimizing.  */\n-  FOR_EACH_BB (b)\n+  FOR_EACH_BB_FN (b, cfun)\n     {\n       block_info bi = BLOCK_INFO (b);\n \n@@ -3212,7 +3212,7 @@ reg_to_stack (void)\n \n   /* Set up block info for each basic block.  */\n   alloc_aux_for_blocks (sizeof (struct block_info_def));\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       block_info bi = BLOCK_INFO (bb);\n       edge_iterator ei;"}, {"sha": "3c9ef3d33806eef2deefadb6914ed0381b45946b", "filename": "gcc/regcprop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1076,7 +1076,7 @@ copyprop_hardreg_forward (void)\n       = create_alloc_pool (\"debug insn changes pool\",\n \t\t\t   sizeof (struct queued_debug_insn_change), 256);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       bitmap_set_bit (visited, bb->index);\n \n@@ -1112,7 +1112,7 @@ copyprop_hardreg_forward (void)\n \n   if (MAY_HAVE_DEBUG_INSNS)\n     {\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tif (bitmap_bit_p (visited, bb->index)\n \t    && all_vd[bb->index].n_debug_insn_changes)\n \t  {"}, {"sha": "46288ebd181075f8d910f17166cfde3cce4ddf2e", "filename": "gcc/reginfo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1266,7 +1266,7 @@ init_subregs_of_mode (void)\n   bitmap_obstack_initialize (&srom_obstack);\n   subregs_of_mode = BITMAP_ALLOC (&srom_obstack);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       if (NONDEBUG_INSN_P (insn))\n         find_subregs_of_mode (PATTERN (insn), subregs_of_mode);"}, {"sha": "9ff94d0c0e8216ebeae26e76c1df7fb2c14e5dde", "filename": "gcc/regrename.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -674,7 +674,7 @@ regrename_analyze (bitmap bb_mask)\n   /* Gather some information about the blocks in this function.  */\n   rename_info = XCNEWVEC (struct bb_rename_info, n_basic_blocks_for_fn (cfun));\n   i = 0;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       struct bb_rename_info *ri = rename_info + i;\n       ri->bb = bb;\n@@ -778,7 +778,7 @@ regrename_analyze (bitmap bb_mask)\n      We perform the analysis for both incoming and outgoing edges, but we\n      only need to merge once (in the second part, after verifying outgoing\n      edges).  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       struct bb_rename_info *bb_ri = (struct bb_rename_info *) bb->aux;\n       unsigned j;\n@@ -843,7 +843,7 @@ regrename_analyze (bitmap bb_mask)\n \t    }\n \t}\n     }\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       struct bb_rename_info *bb_ri = (struct bb_rename_info *) bb->aux;\n       unsigned j;\n@@ -920,7 +920,7 @@ regrename_analyze (bitmap bb_mask)\n \n   free (rename_info);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bb->aux = NULL;\n }\n "}, {"sha": "6a191d8ceabe28dc71bec99ac1ae1588e52da45e", "filename": "gcc/regstat.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fregstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fregstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregstat.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -375,7 +375,7 @@ regstat_compute_ri (void)\n   reg_info_p = XCNEWVEC (struct reg_info_t, max_regno);\n   local_live_last_luid = XNEWVEC (int, max_regno);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       regstat_bb_compute_ri (bb->index, live, artificial_uses,\n \t\t\t     local_live, local_processed,\n@@ -522,7 +522,7 @@ regstat_compute_calls_crossed (void)\n   reg_info_p_size = max_regno;\n   reg_info_p = XCNEWVEC (struct reg_info_t, max_regno);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       regstat_bb_compute_calls_crossed (bb->index, live);\n     }"}, {"sha": "47439ce6ec9ffb01359b416429033b82579a0062", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -613,7 +613,7 @@ has_nonexceptional_receiver (void)\n   /* First determine which blocks can reach exit via normal paths.  */\n   tos = worklist = XNEWVEC (basic_block, n_basic_blocks_for_fn (cfun) + 1);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bb->flags &= ~BB_REACHABLE;\n \n   /* Place the exit block on our worklist.  */\n@@ -641,7 +641,7 @@ has_nonexceptional_receiver (void)\n \n   /* Now see if there's a reachable block with an exceptional incoming\n      edge.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb->flags & BB_REACHABLE && bb_has_abnormal_pred (bb))\n       return true;\n \n@@ -1048,7 +1048,7 @@ reload (rtx first, int global)\n      pseudo.  */\n \n   if (! frame_pointer_needed)\n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       bitmap_clear_bit (df_get_live_in (bb), HARD_FRAME_POINTER_REGNUM);\n \n   /* Come here (with failure set nonzero) if we can't get enough spill\n@@ -1592,7 +1592,7 @@ calculate_elim_costs_all_insns (void)\n   set_initial_elim_offsets ();\n   set_initial_label_offsets ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n       elim_bb = bb;"}, {"sha": "442c8523cb8f91147e356f9ec98dbb3b6c292619", "filename": "gcc/resource.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1219,7 +1219,7 @@ init_resource_info (rtx epilogue_insn)\n   bb_ticks = XCNEWVEC (int, last_basic_block_for_fn (cfun));\n \n   /* Set the BLOCK_FOR_INSN of each label that starts a basic block.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (LABEL_P (BB_HEAD (bb)))\n       BLOCK_FOR_INSN (BB_HEAD (bb)) = bb;\n }\n@@ -1258,7 +1258,7 @@ free_resource_info (void)\n       bb_ticks = NULL;\n     }\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (LABEL_P (BB_HEAD (bb)))\n       BLOCK_FOR_INSN (BB_HEAD (bb)) = NULL;\n }"}, {"sha": "d4baec5a5346738d69016211632229e2c16064b4", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -637,7 +637,7 @@ schedule_ebbs (void)\n   schedule_ebbs_init ();\n \n   /* Schedule every region in the subroutine.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx head = BB_HEAD (bb);\n "}, {"sha": "7fa9759f846c7caa73b8718a6a0967290a7509f3", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -272,7 +272,7 @@ is_cfg_nonregular (void)\n \n   /* If we have insns which refer to labels as non-jumped-to operands,\n      then we consider the cfg not well structured.  */\n-  FOR_EACH_BB (b)\n+  FOR_EACH_BB_FN (b, cfun)\n     FOR_BB_INSNS (b, insn)\n       {\n \trtx note, next, set, dest;\n@@ -317,7 +317,7 @@ is_cfg_nonregular (void)\n      Unreachable loops with a single block are detected here.  This\n      test is redundant with the one in find_rgns, but it's much\n      cheaper to go ahead and catch the trivial case here.  */\n-  FOR_EACH_BB (b)\n+  FOR_EACH_BB_FN (b, cfun)\n     {\n       if (EDGE_COUNT (b->preds) == 0\n \t  || (single_pred_p (b)\n@@ -479,7 +479,7 @@ find_single_block_region (bool ebbs_p)\n       probability_cutoff = PARAM_VALUE (TRACER_MIN_BRANCH_PROBABILITY);\n     probability_cutoff = REG_BR_PROB_BASE / 100 * probability_cutoff;\n \n-    FOR_EACH_BB (ebb_start)\n+    FOR_EACH_BB_FN (ebb_start, cfun)\n       {\n         RGN_NR_BLOCKS (nr_regions) = 0;\n         RGN_BLOCKS (nr_regions) = i;\n@@ -512,7 +512,7 @@ find_single_block_region (bool ebbs_p)\n       }\n   }\n   else\n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       {\n         rgn_bb_table[nr_regions] = bb->index;\n         RGN_NR_BLOCKS (nr_regions) = 1;\n@@ -762,7 +762,7 @@ haifa_find_rgns (void)\n      the entry node by placing a nonzero value in dfs_nr.  Thus if\n      dfs_nr is zero for any block, then it must be unreachable.  */\n   unreachable = 0;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (dfs_nr[bb->index] == 0)\n       {\n \tunreachable = 1;\n@@ -773,7 +773,7 @@ haifa_find_rgns (void)\n      to hold degree counts.  */\n   degree = dfs_nr;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     degree[bb->index] = EDGE_COUNT (bb->preds);\n \n   /* Do not perform region scheduling if there are any unreachable\n@@ -807,7 +807,7 @@ haifa_find_rgns (void)\n \n       /* Find blocks which are inner loop headers.  We still have non-reducible\n \t loops to consider at this point.  */\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  if (bitmap_bit_p (header, bb->index) && bitmap_bit_p (inner, bb->index))\n \t    {\n@@ -826,7 +826,7 @@ haifa_find_rgns (void)\n \t\t If there exists a block that is not dominated by the loop\n \t\t header, then the block is reachable from outside the loop\n \t\t and thus the loop is not a natural loop.  */\n-\t      FOR_EACH_BB (jbb)\n+\t      FOR_EACH_BB_FN (jbb, cfun)\n \t\t{\n \t\t  /* First identify blocks in the loop, except for the loop\n \t\t     entry block.  */\n@@ -874,7 +874,7 @@ haifa_find_rgns (void)\n \t\t Place those blocks into the queue.  */\n \t      if (no_loops)\n \t\t{\n-\t\t  FOR_EACH_BB (jbb)\n+\t\t  FOR_EACH_BB_FN (jbb, cfun)\n \t\t    /* Leaf nodes have only a single successor which must\n \t\t       be EXIT_BLOCK.  */\n \t\t    if (single_succ_p (jbb)\n@@ -1052,7 +1052,7 @@ haifa_find_rgns (void)\n \n   /* Any block that did not end up in a region is placed into a region\n      by itself.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (degree[bb->index] >= 0)\n       {\n \trgn_bb_table[idx] = bb->index;\n@@ -3281,7 +3281,7 @@ sched_rgn_local_init (int rgn)\n \n       /* Use ->aux to implement EDGE_TO_BIT mapping.  */\n       rgn_nr_edges = 0;\n-      FOR_EACH_BB (block)\n+      FOR_EACH_BB_FN (block, cfun)\n \t{\n \t  if (CONTAINING_RGN (block->index) != rgn)\n \t    continue;\n@@ -3291,7 +3291,7 @@ sched_rgn_local_init (int rgn)\n \n       rgn_edges = XNEWVEC (edge, rgn_nr_edges);\n       rgn_nr_edges = 0;\n-      FOR_EACH_BB (block)\n+      FOR_EACH_BB_FN (block, cfun)\n \t{\n \t  if (CONTAINING_RGN (block->index) != rgn)\n \t    continue;\n@@ -3312,7 +3312,7 @@ sched_rgn_local_init (int rgn)\n       /* Cleanup ->aux used for EDGE_TO_BIT mapping.  */\n       /* We don't need them anymore.  But we want to avoid duplication of\n \t aux fields in the newly created edges.  */\n-      FOR_EACH_BB (block)\n+      FOR_EACH_BB_FN (block, cfun)\n \t{\n \t  if (CONTAINING_RGN (block->index) != rgn)\n \t    continue;"}, {"sha": "2e4677071cec0b3792fe8a11c7a126b7da2dec61", "filename": "gcc/sel-sched-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fsel-sched-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fsel-sched-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-dump.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -750,7 +750,7 @@ sel_dump_cfg_2 (FILE *f, int flags)\n   if (flags & SEL_DUMP_CFG_FUNCTION_NAME)\n     fprintf (f, \"function [label = \\\"%s\\\"];\\n\", current_function_name ());\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       insn_t insn = BB_HEAD (bb);\n       insn_t next_tail = NEXT_INSN (BB_END (bb));"}, {"sha": "942d909639c9c976a6db7fbdb0fa88b9a609a5eb", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -4321,7 +4321,7 @@ init_lv_sets (void)\n   basic_block bb;\n \n   /* Initialize of LV sets.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     init_lv_set (bb);\n \n   /* Don't forget EXIT_BLOCK.  */\n@@ -4349,7 +4349,7 @@ free_lv_sets (void)\n   free_lv_set (EXIT_BLOCK_PTR_FOR_FN (cfun));\n \n   /* Free LV sets.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (BB_LV_SET (bb))\n       free_lv_set (bb);\n }\n@@ -6155,7 +6155,7 @@ make_regions_from_the_rest (void)\n   for (i = 0; i < last_basic_block_for_fn (cfun); i++)\n     loop_hdr[i] = -1;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       if (bb->loop_father && !bb->loop_father->num == 0\n \t  && !(bb->flags & BB_IRREDUCIBLE_LOOP))\n@@ -6165,7 +6165,7 @@ make_regions_from_the_rest (void)\n   /* For each basic block degree is calculated as the number of incoming\n      edges, that are going out of bbs that are not yet scheduled.\n      The basic blocks that are scheduled have degree value of zero.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       degree[bb->index] = 0;\n \n@@ -6183,7 +6183,7 @@ make_regions_from_the_rest (void)\n \n   /* Any block that did not end up in a region is placed into a region\n      by itself.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (degree[bb->index] >= 0)\n       {\n \trgn_bb_table[cur_rgn_blocks] = bb->index;"}, {"sha": "5e47ef77d9afd607b7ff16150facedec16a12a35", "filename": "gcc/sese.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -156,7 +156,7 @@ build_sese_loop_nests (sese region)\n   basic_block bb;\n   struct loop *loop0, *loop1;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb_in_sese_p (bb, region))\n       {\n \tstruct loop *loop = bb->loop_father;\n@@ -303,10 +303,10 @@ sese_build_liveouts (sese region, bitmap liveouts)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     sese_build_liveouts_bb (region, liveouts, bb);\n   if (MAY_HAVE_DEBUG_STMTS)\n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       sese_reset_debug_liveouts_bb (region, liveouts, bb);\n }\n "}, {"sha": "acca80127e1952adb534bcb4e1f785e429752fd3", "filename": "gcc/stack-ptr-mod.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fstack-ptr-mod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fstack-ptr-mod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstack-ptr-mod.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -58,7 +58,7 @@ notice_stack_pointer_modification (void)\n      been used.  */\n   crtl->sp_is_unchanging = !cfun->calls_alloca;\n   if (crtl->sp_is_unchanging)\n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       FOR_BB_INSNS (bb, insn)\n         {\n \t  if (INSN_P (insn))"}, {"sha": "57c991aacf3c1733cc651f2b58234a2838396c51", "filename": "gcc/store-motion.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fstore-motion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fstore-motion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstore-motion.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -656,7 +656,7 @@ compute_store_table (void)\n   already_set = XNEWVEC (int, max_gcse_regno);\n \n   /* Find all the stores we care about.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       /* First compute the registers set in this block.  */\n       FOR_BB_INSNS (bb, insn)\n@@ -1061,7 +1061,7 @@ build_store_vectors (void)\n   bitmap_vector_clear (st_transp, last_basic_block_for_fn (cfun));\n   regs_set_in_block = XNEWVEC (int, max_gcse_regno);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       memset (regs_set_in_block, 0, sizeof (int) * max_gcse_regno);\n \n@@ -1188,7 +1188,7 @@ one_store_motion_pass (void)\n \n       /* Now we want to insert the new stores which are going to be needed.  */\n \n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tif (bitmap_bit_p (st_delete_map[bb->index], ptr->index))\n \t  {\n \t    delete_store (ptr, bb);"}, {"sha": "ae5983a6fc2522f3c6d7fbcf7605d3e7db14a120", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1,3 +1,10 @@\n+2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/plugin/selfassign.c (execute_warn_self_assign): Eliminate\n+\tuse of FOR_EACH_BB in favor of FOR_EACH_BB_FN, to make use of cfun\n+\texplicit.\n+\t* gcc.dg/plugin/selfassign.c (execute_warn_self_assign): Likewise.\n+\n 2013-12-09  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* gcc.target/arm/ldrd-strd-offset.c: New."}, {"sha": "041f25dce34830dc98f78af05fa0b0035ffaf50e", "filename": "gcc/testsuite/g++.dg/plugin/selfassign.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -261,7 +261,7 @@ execute_warn_self_assign (void)\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n         warn_self_assign (gsi_stmt (gsi));"}, {"sha": "041f25dce34830dc98f78af05fa0b0035ffaf50e", "filename": "gcc/testsuite/gcc.dg/plugin/selfassign.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -261,7 +261,7 @@ execute_warn_self_assign (void)\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n         warn_self_assign (gsi_stmt (gsi));"}, {"sha": "a40cbebd434ca81e031cbbbbc5754365c94cacab", "filename": "gcc/tracer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -256,7 +256,7 @@ tail_duplicate (void)\n   branch_ratio_cutoff =\n     (REG_BR_PROB_BASE / 100 * PARAM_VALUE (TRACER_MIN_BRANCH_RATIO));\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       int n = count_insns (bb);\n       if (!ignore_bb_p (bb))"}, {"sha": "c9af68002ac297cf3d9e0d6ba98d79e88af98f4c", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -2656,7 +2656,7 @@ compute_transaction_bits (void)\n      certainly don't need it to calculate CDI_DOMINATOR info.  */\n   gate_tm_init ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bb->flags &= ~BB_IN_TRANSACTION;\n \n   for (region = all_tm_regions; region; region = region->next)"}, {"sha": "32d0d5a93a1b4ccd0d44cf6e47ca60103cf9e49c", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -876,7 +876,7 @@ tree_call_cdce (void)\n   gimple_stmt_iterator i;\n   bool something_changed = false;\n   auto_vec<gimple> cond_dead_built_in_calls;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       /* Collect dead call candidates.  */\n       for (i = gsi_start_bb (bb); !gsi_end_p (i); gsi_next (&i))"}, {"sha": "98434ac70d1137b4732e510455b01cce6654c41f", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -302,7 +302,7 @@ replace_loop_annotate ()\n     }\n \n   /* Remove IFN_ANNOTATE. Safeguard for the case loop->latch == NULL.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gsi = gsi_last_bb (bb);\n       stmt = gsi_stmt (gsi);\n@@ -456,7 +456,7 @@ factor_computed_gotos (void)\n      Examine the last statement in each basic block to see if the block\n      ends with a computed goto.  */\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi = gsi_last_bb (bb);\n       gimple last;\n@@ -635,7 +635,7 @@ fold_cond_expr_cond (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple stmt = last_stmt (bb);\n \n@@ -682,7 +682,7 @@ make_edges (void)\n \t     EDGE_FALLTHRU);\n \n   /* Traverse the basic block array placing edges.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple last = last_stmt (bb);\n       bool fallthru;\n@@ -836,7 +836,7 @@ assign_discriminators (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       edge e;\n       edge_iterator ei;\n@@ -1055,7 +1055,7 @@ make_abnormal_goto_edges (basic_block bb, bool for_call)\n   basic_block target_bb;\n   gimple_stmt_iterator gsi;\n \n-  FOR_EACH_BB (target_bb)\n+  FOR_EACH_BB_FN (target_bb, cfun)\n     {\n       for (gsi = gsi_start_bb (target_bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n@@ -1235,7 +1235,7 @@ cleanup_dead_labels (void)\n \n   /* Find a suitable label for each block.  We use the first user-defined\n      label if there is one, or otherwise just the first label we see.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator i;\n \n@@ -1271,7 +1271,7 @@ cleanup_dead_labels (void)\n \n   /* Now redirect all jumps/branches to the selected label.\n      First do so for each block ending in a control statement.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple stmt = last_stmt (bb);\n       tree label, new_label;\n@@ -1363,7 +1363,7 @@ cleanup_dead_labels (void)\n   /* Finally, purge dead labels.  All user-defined labels and labels that\n      can be the target of non-local gotos and labels which have their\n      address taken are preserved.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator i;\n       tree label_for_this_bb = label_for_bb[bb->index].label;\n@@ -1487,7 +1487,7 @@ group_case_labels (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple stmt = last_stmt (bb);\n       if (stmt && gimple_code (stmt) == GIMPLE_SWITCH)\n@@ -2160,7 +2160,7 @@ dump_cfg_stats (FILE *file)\n \t   SCALE (size), LABEL (size));\n \n   num_edges = 0;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     num_edges += EDGE_COUNT (bb->succs);\n   size = num_edges * sizeof (struct edge_def);\n   total += size;\n@@ -4894,7 +4894,7 @@ gimple_verify_flow_info (void)\n \terr = 1;\n       }\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       bool found_ctrl_stmt = false;\n \n@@ -7241,7 +7241,7 @@ print_loop (FILE *file, struct loop *loop, int indent, int verbosity)\n   if (verbosity >= 1)\n     {\n       fprintf (file, \"%s{\\n\", s_indent);\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tif (bb->loop_father == loop)\n \t  print_loops_bb (file, bb, indent, verbosity);\n \n@@ -8331,7 +8331,7 @@ execute_fixup_cfg (void)\n   FOR_EACH_EDGE (e, ei, ENTRY_BLOCK_PTR_FOR_FN (cfun)->succs)\n     e->count = apply_scale (e->count, count_scale);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       bb->count = apply_scale (bb->count, count_scale);\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))"}, {"sha": "949b21d749dca6c470bbc9d8931f10e67ef01343", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -640,7 +640,7 @@ cleanup_tree_cfg_1 (void)\n      recording of edge to CASE_LABEL_EXPR.  */\n   start_recording_case_labels ();\n \n-  /* Start by iterating over all basic blocks.  We cannot use FOR_EACH_BB,\n+  /* Start by iterating over all basic blocks.  We cannot use FOR_EACH_BB_FN,\n      since the basic blocks may get removed.  */\n   n = last_basic_block_for_fn (cfun);\n   for (i = NUM_FIXED_BLOCKS; i < n; i++)\n@@ -918,7 +918,7 @@ merge_phi_nodes (void)\n   calculate_dominance_info (CDI_DOMINATORS);\n \n   /* Find all PHI nodes that we may be able to merge.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       basic_block dest;\n "}, {"sha": "8c9a3aa7c5a3de208d984f5d79092ee4180caf22", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -207,7 +207,7 @@ init_dont_simulate_again (void)\n   gimple phi;\n   bool saw_a_complex_op = false;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n@@ -1637,7 +1637,7 @@ tree_lower_complex (void)\n \n   /* ??? Ideally we'd traverse the blocks in breadth-first order.  */\n   old_last_basic_block = last_basic_block_for_fn (cfun);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       if (bb->index >= old_last_basic_block)\n \tcontinue;"}, {"sha": "2d964d5082bec809cf1b954a688178fe0516180d", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -279,7 +279,7 @@ collect_dfa_stats (struct dfa_stats_d *dfa_stats_p ATTRIBUTE_UNUSED)\n   memset ((void *)dfa_stats_p, 0, sizeof (struct dfa_stats_d));\n \n   /* Walk all the statements in the function counting references.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator si;\n \n@@ -741,7 +741,7 @@ dump_enumerated_decls (FILE *file, int flags)\n \n   memset (&wi, '\\0', sizeof (wi));\n   wi.info = (void *) &decl_list;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n "}, {"sha": "9097378a9899f69ae05e7c01dbf9ecc685464afa", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -3304,7 +3304,7 @@ execute_lower_resx (void)\n \n   mnt_map = pointer_map_create ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple last = last_stmt (bb);\n       if (last && is_gimple_resx (last))\n@@ -3710,7 +3710,7 @@ execute_lower_eh_dispatch (void)\n \n   assign_filter_values ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple last = last_stmt (bb);\n       if (last == NULL)\n@@ -3810,7 +3810,7 @@ mark_reachable_handlers (sbitmap *r_reachablep, sbitmap *lp_reachablep)\n   else\n     lp_reachable = NULL;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n "}, {"sha": "4595b1c0dd97ab1e67c13d481b08a7a0fba5f4ed", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -638,7 +638,7 @@ lower_emutls_function_body (struct cgraph_node *node)\n      create a node for it.  */\n   d.builtin_node = cgraph_get_create_node (d.builtin_decl);\n \n-  FOR_EACH_BB (d.bb)\n+  FOR_EACH_BB_FN (d.bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       unsigned int i, nedge;"}, {"sha": "71a25f1f1c0a7fbcbb44fc9086a5a8d20d90f73a", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1815,7 +1815,7 @@ main_tree_if_conversion (void)\n #ifdef ENABLE_CHECKING\n   {\n     basic_block bb;\n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       gcc_assert (!bb->aux);\n   }\n #endif"}, {"sha": "ab8e40b804a6c930d7909fc7ea3fd12636b3dfe2", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -4569,7 +4569,7 @@ optimize_inline_calls (tree fn)\n      will split id->current_basic_block, and the new blocks will\n      follow it; we'll trudge through them, processing their CALL_EXPRs\n      along the way.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     inlined_p |= gimple_expand_calls_inline (bb, &id);\n \n   pop_gimplify_context (NULL);"}, {"sha": "8e539f2ebcfaad6d0933fa9e1418642b1b734181", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -2320,7 +2320,7 @@ rewrite_into_ssa (void)\n \n   /* Initialize dominance frontier.  */\n   dfs = XNEWVEC (bitmap_head, last_basic_block_for_fn (cfun));\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bitmap_initialize (&dfs[bb->index], &bitmap_default_obstack);\n \n   /* 1- Compute dominance frontiers.  */\n@@ -2337,7 +2337,7 @@ rewrite_into_ssa (void)\n   rewrite_blocks (ENTRY_BLOCK_PTR_FOR_FN (cfun), REWRITE_ALL);\n \n   /* Free allocated memory.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bitmap_clear (&dfs[bb->index]);\n   free (dfs);\n \n@@ -3270,7 +3270,7 @@ update_ssa (unsigned update_flags)\n       /* If the caller requested PHI nodes to be added, compute\n \t dominance frontiers.  */\n       dfs = XNEWVEC (bitmap_head, last_basic_block_for_fn (cfun));\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tbitmap_initialize (&dfs[bb->index], &bitmap_default_obstack);\n       compute_dominance_frontiers (dfs);\n \n@@ -3296,7 +3296,7 @@ update_ssa (unsigned update_flags)\n \tinsert_updated_phi_nodes_for (sym, dfs, blocks_to_update,\n \t                              update_flags);\n \n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tbitmap_clear (&dfs[bb->index]);\n       free (dfs);\n "}, {"sha": "e00463dcc604036ead69408ef78d26e38fd695de", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -144,7 +144,7 @@ tree_nrv (void)\n     return 0;\n \n   /* Look through each block for assignments to the RESULT_DECL.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n@@ -238,7 +238,7 @@ tree_nrv (void)\n      RESULT.  */\n   data.var = found;\n   data.result = result;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); )\n \t{\n@@ -358,7 +358,7 @@ execute_return_slot_opt (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))"}, {"sha": "c83345f7efd260375685c60a47e35be48e96af6a", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1211,7 +1211,7 @@ static unsigned int\n compute_object_sizes (void)\n {\n   basic_block bb;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator i;\n       for (i = gsi_start_bb (bb); !gsi_end_p (i); gsi_next (&i))"}, {"sha": "c5bba7896373eed9b08a1f31f07f82d479b38924", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -835,7 +835,7 @@ eliminate_useless_phis (void)\n   gimple_stmt_iterator gsi;\n   tree result;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); )\n         {\n@@ -893,7 +893,7 @@ rewrite_trees (var_map map ATTRIBUTE_UNUSED)\n   /* Search for PHIs where the destination has no partition, but one\n      or more arguments has a partition.  This should not happen and can\n      create incorrect code.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -1101,7 +1101,7 @@ insert_backedge_copies (void)\n \n   mark_dfs_back_edges ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       /* Mark block as possibly needing calculation of UIDs.  */\n       bb->aux = &bb->aux;"}, {"sha": "51e997ccd4faf38d45f204289649f16bef2ca784", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -637,7 +637,7 @@ tree_profiling (void)\n \n       push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n \n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  gimple_stmt_iterator gsi;\n \t  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))"}, {"sha": "59e44cbb9c9383e48c85f3ff11b4a578d9bba03f", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -3276,7 +3276,7 @@ scev_const_prop (void)\n   if (number_of_loops (cfun) <= 1)\n     return 0;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       loop = bb->loop_father;\n "}, {"sha": "ebd42185c98bf57f303b9a39a791894888e893fb", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1252,7 +1252,7 @@ scan_function (void)\n   basic_block bb;\n   bool ret = false;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -3311,7 +3311,7 @@ sra_modify_function_body (void)\n   bool cfg_changed = false;\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi = gsi_start_bb (bb);\n       while (!gsi_end_p (gsi))\n@@ -3795,7 +3795,7 @@ propagate_dereference_distances (void)\n \n   auto_vec<basic_block> queue (last_basic_block_for_fn (cfun));\n   queue.quick_push (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       queue.quick_push (bb);\n       bb->aux = bb;\n@@ -4572,7 +4572,7 @@ ipa_sra_modify_function_body (ipa_parm_adjustment_vec adjustments)\n   bool cfg_changed = false;\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n \n@@ -4811,7 +4811,7 @@ convert_callers (struct cgraph_node *node, tree old_decl,\n   if (!encountered_recursive_call)\n     return;\n \n-  FOR_EACH_BB (this_block)\n+  FOR_EACH_BB_FN (this_block, cfun)\n     {\n       gimple_stmt_iterator gsi;\n "}, {"sha": "7e0777153e796907ad4a5404b26afce2a4728ca4", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -774,7 +774,7 @@ ccp_initialize (void)\n   const_val = XCNEWVEC (prop_value_t, n_const_val);\n \n   /* Initialize simulation flags for PHI nodes and statements.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator i;\n \n@@ -808,7 +808,7 @@ ccp_initialize (void)\n   /* Now process PHI nodes.  We never clear the simulate_again flag on\n      phi nodes, since we do not know which edges are executable yet,\n      except for phi nodes for virtual operands when we do not do store ccp.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator i;\n \n@@ -2508,7 +2508,7 @@ execute_fold_all_builtins (void)\n   basic_block bb;\n   unsigned int todoflags = 0;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator i;\n       for (i = gsi_start_bb (bb); !gsi_end_p (i); )"}, {"sha": "38a407877300c63be7d60aff81692885e838c85b", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -821,7 +821,7 @@ build_ssa_conflict_graph (tree_live_info_p liveinfo)\n \n   live = new_live_track (map);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n \n@@ -929,7 +929,7 @@ create_outofssa_var_map (coalesce_list_p cl, bitmap used_in_copy)\n \n   map = init_var_map (num_ssa_names);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       tree arg;\n \n@@ -1183,7 +1183,7 @@ coalesce_partitions (var_map map, ssa_conflicts_p graph, coalesce_list_p cl,\n      in the coalesce list because they do not need to be sorted, and simply\n      consume extra memory/compilation time in large programs.  */\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \tif (e->flags & EDGE_ABNORMAL)"}, {"sha": "3da262b2a77188b443430405e170a84b8a1658f2", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -469,7 +469,7 @@ init_copy_prop (void)\n   n_copy_of = num_ssa_names;\n   copy_of = XCNEWVEC (prop_value_t, n_copy_of);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator si;\n       int depth = bb_loop_depth (bb);"}, {"sha": "c7d514fe0ec2d848aeb66b48aff15d4c15e0e64e", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -325,7 +325,7 @@ rename_ssa_copies (void)\n \n   map = init_var_map (num_ssa_names);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       /* Scan for real copies.  */\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -341,7 +341,7 @@ rename_ssa_copies (void)\n \t}\n     }\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       /* Treat PHI nodes as copies between the result and each argument.  */\n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))"}, {"sha": "5abef5c12834287a91e461d5b2c664bcfce3e03d", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -374,7 +374,7 @@ find_obviously_necessary_stmts (bool aggressive)\n   gimple phi, stmt;\n   int flags;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       /* PHI nodes are never inherently necessary.  */\n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -404,7 +404,7 @@ find_obviously_necessary_stmts (bool aggressive)\n       struct loop *loop;\n       scev_initialize ();\n       if (mark_irreducible_loops ())\n-\tFOR_EACH_BB (bb)\n+\tFOR_EACH_BB_FN (bb, cfun)\n \t  {\n \t    edge_iterator ei;\n \t    FOR_EACH_EDGE (e, ei, bb->succs)\n@@ -1325,7 +1325,7 @@ eliminate_unnecessary_stmts (void)\n \t    }\n \t}\n     }\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       /* Remove dead PHI nodes.  */\n       something_changed |= remove_dead_phis (bb);"}, {"sha": "2bd2a860dca9493092a8addc7f99c66ee0103d3e", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -795,7 +795,7 @@ free_all_edge_infos (void)\n   edge_iterator ei;\n   edge e;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_EACH_EDGE (e, ei, bb->preds)\n         {\n@@ -866,7 +866,7 @@ tree_ssa_dominator_optimize (void)\n   {\n     gimple_stmt_iterator gsi;\n     basic_block bb;\n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       {\n \tfor (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t  update_stmt_if_modified (gsi_stmt (gsi));"}, {"sha": "a77a6390cb46127c7c2a1529efdc44d428b6f157", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -3386,7 +3386,7 @@ ssa_forward_propagate_and_combine (void)\n \n   cfg_changed = false;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n "}, {"sha": "da7198bc24851b3f0eea66366407b3a65f570620", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -673,7 +673,7 @@ clear_unused_block_pointer (void)\n   basic_block bb;\n   gimple_stmt_iterator gsi;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       {\n \tunsigned i;\n@@ -791,7 +791,7 @@ remove_unused_locals (void)\n   usedvars = BITMAP_ALLOC (NULL);\n \n   /* Walk the CFG marking all referenced symbols.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       size_t i;\n@@ -856,7 +856,7 @@ remove_unused_locals (void)\n      ignores them, and the second pass (if there were any) tries to remove\n      them.  */\n   if (have_local_clobbers)\n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       {\n \tgimple_stmt_iterator gsi;\n \n@@ -963,11 +963,11 @@ new_tree_live_info (var_map map)\n   live->num_blocks = last_basic_block_for_fn (cfun);\n \n   live->livein = XNEWVEC (bitmap_head, last_basic_block_for_fn (cfun));\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bitmap_initialize (&live->livein[bb->index], &liveness_bitmap_obstack);\n \n   live->liveout = XNEWVEC (bitmap_head, last_basic_block_for_fn (cfun));\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bitmap_initialize (&live->liveout[bb->index], &liveness_bitmap_obstack);\n \n   live->work_stack = XNEWVEC (int, last_basic_block_for_fn (cfun));\n@@ -1149,11 +1149,11 @@ calculate_live_on_exit (tree_live_info_p liveinfo)\n   edge_iterator ei;\n \n   /* live on entry calculations used liveout vectors for defs, clear them.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     bitmap_clear (&liveinfo->liveout[bb->index]);\n \n   /* Set all the live-on-exit bits for uses in PHIs.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       size_t i;\n@@ -1294,7 +1294,7 @@ dump_live_info (FILE *f, tree_live_info_p live, int flag)\n \n   if ((flag & LIVEDUMP_ENTRY) && live->livein)\n     {\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  fprintf (f, \"\\nLive on entry to BB%d : \", bb->index);\n \t  EXECUTE_IF_SET_IN_BITMAP (&live->livein[bb->index], 0, i, bi)\n@@ -1308,7 +1308,7 @@ dump_live_info (FILE *f, tree_live_info_p live, int flag)\n \n   if ((flag & LIVEDUMP_EXIT) && live->liveout)\n     {\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \t{\n \t  fprintf (f, \"\\nLive on exit from BB%d : \", bb->index);\n \t  EXECUTE_IF_SET_IN_BITMAP (&live->liveout[bb->index], 0, i, bi)"}, {"sha": "cbcdc37f91dadf6a7feb4b343fcf9928a4a1d663", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1601,7 +1601,7 @@ analyze_memory_references (void)\n      loops postorder.  */\n   i = 0;\n   bbs = XNEWVEC (basic_block, n_basic_blocks_for_fn (cfun) - NUM_FIXED_BLOCKS);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     if (bb->loop_father != current_loops->tree_root)\n       bbs[i++] = bb;\n   n = i;\n@@ -2406,7 +2406,7 @@ fill_always_executed_in (void)\n   struct loop *loop;\n \n   bitmap_clear (contains_call);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -2478,7 +2478,7 @@ tree_ssa_lim_finalize (void)\n \n   free_aux_for_edges ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     SET_ALWAYS_EXECUTED_IN (bb, NULL);\n \n   bitmap_obstack_release (&lim_bitmap_obstack);"}, {"sha": "ed30c7b09267e5f5f6d152125353429c2a370f30", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -463,7 +463,7 @@ find_uses_to_rename (bitmap changed_bbs, bitmap *use_blocks, bitmap need_phis)\n     EXECUTE_IF_SET_IN_BITMAP (changed_bbs, 0, index, bi)\n       find_uses_to_rename_bb (BASIC_BLOCK_FOR_FN (cfun, index), use_blocks, need_phis);\n   else\n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       find_uses_to_rename_bb (bb, use_blocks, need_phis);\n }\n \n@@ -602,7 +602,7 @@ verify_loop_closed_ssa (bool verify_ssa_p)\n \n   timevar_push (TV_VERIFY_LOOP_CLOSED);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (bsi = gsi_start_phis (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n \t{"}, {"sha": "1c89f4519b98ed046fb4f5e0f6db2026d3b88aa6", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -527,7 +527,7 @@ execute_cse_reciprocals (void)\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n \n #ifdef ENABLE_CHECKING\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     gcc_assert (!bb->aux);\n #endif\n \n@@ -540,7 +540,7 @@ execute_cse_reciprocals (void)\n \t  execute_cse_reciprocals_1 (NULL, name);\n       }\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       gimple phi;\n@@ -1419,7 +1419,7 @@ execute_cse_sincos (void)\n   calculate_dominance_info (CDI_DOMINATORS);\n   memset (&sincos_stats, 0, sizeof (sincos_stats));\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n       bool cleanup_eh = false;\n@@ -1939,7 +1939,7 @@ execute_optimize_bswap (void)\n \n   memset (&bswap_stats, 0, sizeof (bswap_stats));\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n \n@@ -2785,7 +2785,7 @@ execute_optimize_widening_mul (void)\n \n   memset (&widen_mul_stats, 0, sizeof (widen_mul_stats));\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n "}, {"sha": "f9f084bababe45ca72a8759292c376d7b9c18ec3", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1097,7 +1097,7 @@ substitute_and_fold (ssa_prop_get_value_fn get_value_fn,\n       }\n \n   /* Propagate into all uses and fold.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator i;\n "}, {"sha": "2ac7d9c521eee5209433978564442a53b1d62a59", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -6764,7 +6764,7 @@ compute_points_to_sets (void)\n   intra_create_variable_infos ();\n \n   /* Now walk all statements and build the constraint set.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n \n@@ -6811,7 +6811,7 @@ compute_points_to_sets (void)\n     }\n \n   /* Compute the call-used/clobbered sets.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi;\n "}, {"sha": "4e05246762d63e2a56f561e63beade1892d2a1a0", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -754,7 +754,7 @@ find_same_succ (void)\n   same_succ same = same_succ_alloc ();\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       find_same_succ_bb (bb, &same);\n       if (same == NULL)\n@@ -1015,7 +1015,7 @@ reset_cluster_vectors (void)\n   for (i = 0; i < all_clusters.length (); ++i)\n     delete_cluster (all_clusters[i]);\n   all_clusters.truncate (0);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     BB_CLUSTER (bb) = NULL;\n }\n "}, {"sha": "22ae47b766b04a1950bd8b8b98d9c5e26020b11f", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -683,7 +683,7 @@ find_replaceable_exprs (var_map map)\n \n   bitmap_obstack_initialize (&ter_bitmap_obstack);\n   table = new_temp_expr_table (map);\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       find_replaceable_in_bb (table, bb);\n       gcc_checking_assert (bitmap_empty_p (table->partition_in_use));"}, {"sha": "6f978e20c2b03c95c0343fcfad900b1fcce09f8c", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1631,7 +1631,7 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n      ahead and thread it, else ignore it.  */\n   basic_block bb;\n   edge e;\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       /* If we do end up threading here, we can remove elements from\n \t BB->preds.  Thus we can not use the FOR_EACH_EDGE iterator.  */"}, {"sha": "63a2e10472cb55ad51361238b4731708c819531f", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -65,7 +65,7 @@ associate_equivalences_with_edges (void)\n \n   /* Walk over each block.  If the block ends with a control statement,\n      then it might create a useful equivalence.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator gsi = gsi_last_bb (bb);\n       gimple stmt;\n@@ -406,7 +406,7 @@ tree_ssa_uncprop (void)\n   /* we just need to empty elements out of the hash table, and cleanup the\n     AUX field on the edges.  */\n   val_ssa_equiv.dispose ();\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       edge e;\n       edge_iterator ei;"}, {"sha": "c6b0a90f40859d319f0a2113a2ae9dd50b9e2198", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -176,7 +176,7 @@ warn_uninitialized_vars (bool warn_possibly_uninitialized)\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       bool always_executed = dominated_by_p (CDI_POST_DOMINATORS,\n \t\t\t\t\t     single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun)), bb);\n@@ -2130,7 +2130,7 @@ execute_late_warn_uninitialized (void)\n   added_to_worklist = pointer_set_create ();\n \n   /* Initialize worklist  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       {\n         gimple phi = gsi_stmt (gsi);"}, {"sha": "8c1aaf20c150574b83cd489bd185530c3b4bd942", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -999,7 +999,7 @@ verify_ssa (bool check_modified_stmt)\n \n   /* Now verify all the uses and make sure they agree with the definitions\n      found in the previous pass.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       edge e;\n       gimple phi;\n@@ -1456,7 +1456,7 @@ execute_update_addresses_taken (void)\n \n   /* Collect into ADDRESSES_TAKEN all variables whose address is taken within\n      the function body.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n@@ -1558,7 +1558,7 @@ execute_update_addresses_taken (void)\n      variables and operands need to be rewritten to expose bare symbols.  */\n   if (!bitmap_empty_p (suitable_for_renaming))\n     {\n-      FOR_EACH_BB (bb)\n+      FOR_EACH_BB_FN (bb, cfun)\n \tfor (gsi = gsi_start_bb (bb); !gsi_end_p (gsi);)\n \t  {\n \t    gimple stmt = gsi_stmt (gsi);"}, {"sha": "dc82340c99e20f86345c337a773612c78860ab02", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -536,7 +536,7 @@ check_all_va_list_escapes (struct stdarg_info *si)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator i;\n \n@@ -703,7 +703,7 @@ execute_optimize_stdarg (void)\n \t\t\t   || TREE_TYPE (cfun_va_list) == char_type_node);\n   gcc_assert (is_gimple_reg_type (cfun_va_list) == va_list_simple_ptr);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator i;\n \n@@ -813,7 +813,7 @@ execute_optimize_stdarg (void)\n   memset (&wi, 0, sizeof (wi));\n   wi.info = si.va_list_vars;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator i;\n "}, {"sha": "efcc94ddc6af5ecc8d034257a2abaefb646bb0a5", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1420,7 +1420,7 @@ do_switchconv (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n   {\n     const char *failure_reason;\n     gimple stmt = last_stmt (bb);"}, {"sha": "098012c15a4423977bc1694929e7f13f235d90a9", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -1541,7 +1541,7 @@ expand_vector_operations (void)\n   basic_block bb;\n   bool cfg_changed = false;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{"}, {"sha": "6cc07abe633d7c1bf5a75570bf1f6abfd0d26868", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -157,7 +157,7 @@ adjust_simduid_builtins (hash_table <simduid_to_vf> &htab)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator i;\n \n@@ -265,7 +265,7 @@ note_simd_array_uses (hash_table <simd_array_to_simduid> *htab)\n   wi.info = &ns;\n   ns.htab = htab;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       {\n \tgimple stmt = gsi_stmt (gsi);\n@@ -475,7 +475,7 @@ execute_vect_slp (void)\n \n   init_stmt_vec_info_vec ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       vect_location = find_bb_location (bb);\n "}, {"sha": "8ab6d767f2579752c7093c287be75f119f63aacb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -6431,7 +6431,7 @@ check_all_array_refs (void)\n   basic_block bb;\n   gimple_stmt_iterator si;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       edge_iterator ei;\n       edge e;\n@@ -6593,7 +6593,7 @@ remove_range_assertions (void)\n   /* Note that the BSI iterator bump happens at the bottom of the\n      loop and no bump is necessary if we're removing the statement\n      referenced by the current BSI.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     for (si = gsi_after_labels (bb), is_unreachable = -1; !gsi_end_p (si);)\n       {\n \tgimple stmt = gsi_stmt (si);\n@@ -6708,7 +6708,7 @@ vrp_initialize (void)\n   vr_value = XCNEWVEC (value_range_t *, num_vr_values);\n   vr_phi_edge_counts = XCNEWVEC (int, num_ssa_names);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple_stmt_iterator si;\n \n@@ -9543,7 +9543,7 @@ identify_jump_threads (void)\n      I doubt it's worth the effort for the classes of jump\n      threading opportunities we are trying to identify at this\n      point in compilation.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       gimple last;\n "}, {"sha": "d12459fbfbfb68fe72817c070b8dc129184376bc", "filename": "gcc/tsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -640,7 +640,7 @@ instrument_memory_accesses (void)\n   gimple_stmt_iterator gsi;\n   bool fentry_exit_instrument = false;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       fentry_exit_instrument |= instrument_gimple (&gsi);\n   return fentry_exit_instrument;"}, {"sha": "51b4f8dd7bf7275024cf966b75f206f439e002cf", "filename": "gcc/ubsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -741,7 +741,7 @@ ubsan_pass (void)\n   basic_block bb;\n   gimple_stmt_iterator gsi;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi);)\n \t{"}, {"sha": "c684835bdd827a2c34b0a79e4a887b26ad7fdda3", "filename": "gcc/value-prof.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -542,7 +542,7 @@ verify_histograms (void)\n \n   error_found = false;\n   visited_hists = pointer_set_create ();\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       {\n \tgimple stmt = gsi_stmt (gsi);\n@@ -648,7 +648,7 @@ gimple_value_profile_transformations (void)\n   gimple_stmt_iterator gsi;\n   bool changed = false;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n@@ -1944,7 +1944,7 @@ gimple_find_values_to_profile (histogram_values *values)\n   histogram_value hist = NULL;\n   values->create (0);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       gimple_values_to_profile (gsi_stmt (gsi), values);\n "}, {"sha": "175ec01f647aa47e59a2d1c0cdb23c15cc086890", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cd3bed28f13a1a0254d00c4b4d799d08cc266c/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "patch": "@@ -6941,7 +6941,7 @@ vt_find_locations (void)\n   in_pending = sbitmap_alloc (last_basic_block_for_fn (cfun));\n   bitmap_clear (in_worklist);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     fibheap_insert (pending, bb_order[bb->index], bb);\n   bitmap_ones (in_pending);\n \n@@ -7101,7 +7101,7 @@ vt_find_locations (void)\n     }\n \n   if (success && MAY_HAVE_DEBUG_INSNS)\n-    FOR_EACH_BB (bb)\n+    FOR_EACH_BB_FN (bb, cfun)\n       gcc_assert (VTI (bb)->flooded);\n \n   free (bb_order);\n@@ -7229,7 +7229,7 @@ dump_dataflow_sets (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       fprintf (dump_file, \"\\nBasic block %d:\\n\", bb->index);\n       fprintf (dump_file, \"IN:\\n\");\n@@ -9402,7 +9402,7 @@ vt_emit_notes (void)\n \n   /* Free memory occupied by the out hash tables, as they aren't used\n      anymore.  */\n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     dataflow_set_clear (&VTI (bb)->out);\n \n   /* Enable emitting notes by functions (mainly by set_variable_part and\n@@ -9418,7 +9418,7 @@ vt_emit_notes (void)\n \n   dataflow_set_init (&cur);\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       /* Emit the notes for changes of variable locations between two\n \t subsequent basic blocks.  */\n@@ -9995,7 +9995,7 @@ vt_initialize (void)\n \n   vt_add_function_parameters ();\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       rtx insn;\n       HOST_WIDE_INT pre, post = 0;\n@@ -10138,7 +10138,7 @@ delete_debug_insns (void)\n   if (!MAY_HAVE_DEBUG_INSNS)\n     return;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_BB_INSNS_SAFE (bb, insn, next)\n \tif (DEBUG_INSN_P (insn))\n@@ -10181,7 +10181,7 @@ vt_finalize (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB (bb)\n+  FOR_EACH_BB_FN (bb, cfun)\n     {\n       VTI (bb)->mos.release ();\n     }"}]}