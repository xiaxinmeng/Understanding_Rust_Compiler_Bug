{"sha": "df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYzOGViZGRkYmU5OTMwYWUxNTU3MGNlYTNhOGZiMjhjZDBkMGViZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-13T22:21:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-13T22:21:53Z"}, "message": "Lose all references to current_vtable_decl, CLASSTYPE_INST_VAR and\nCLASSTYPE_VTBL_PTR.\n\nFrom-SVN: r9936", "tree": {"sha": "b71bd718bcd21743533a1030633d33be02a715ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b71bd718bcd21743533a1030633d33be02a715ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd/comments", "author": null, "committer": null, "parents": [{"sha": "5f34005f06e800994dd6a305788cadd89488e92f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f34005f06e800994dd6a305788cadd89488e92f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f34005f06e800994dd6a305788cadd89488e92f"}], "stats": {"total": 65, "additions": 0, "deletions": 65}, "files": [{"sha": "e0d1a64402dd9c4f0aeb38ebaffe6fdbaa8a4a88", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd", "patch": "@@ -493,8 +493,6 @@ struct lang_type\n   union tree_node *as_list;\n   union tree_node *id_as_list;\n   union tree_node *binfo_as_list;\n-  union tree_node *vtbl_ptr;\n-  union tree_node *instance_variable;\n   union tree_node *friend_classes;\n \n   char *mi_matrix;\n@@ -807,12 +805,6 @@ struct lang_type\n /* Same, but cache a list whose value is the binfo of this type.  */\n #define CLASSTYPE_BINFO_AS_LIST(NODE) (TYPE_LANG_SPECIFIC(NODE)->binfo_as_list)\n \n-/* Slot in which to cache a copy of the local vtable pointer.  */\n-#define CLASSTYPE_VTBL_PTR(NODE) (TYPE_LANG_SPECIFIC(NODE)->vtbl_ptr)\n-\n-/* Hold the instance object associated with this method.  */\n-#define CLASSTYPE_INST_VAR(NODE) (TYPE_LANG_SPECIFIC(NODE)->instance_variable)\n-\n /* A list of class types with which this type is a friend.  */\n #define CLASSTYPE_FRIEND_CLASSES(NODE) (TYPE_LANG_SPECIFIC(NODE)->friend_classes)\n \n@@ -1524,7 +1516,6 @@ extern tree current_lang_name, lang_name_cplusplus, lang_name_c;\n extern tree original_function_name;\n \n extern tree current_class_name, current_class_type, current_class_decl, C_C_D;\n-extern tree current_vtable_decl;\n \n /* in init.c  */\n extern tree global_base_init_list;"}, {"sha": "4fed546989da106f9460a5f6c17c194d0ee894a1", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd", "patch": "@@ -2037,59 +2037,6 @@ setup_vtbl_ptr ()\n   if (base_init_expr == 0\n       && DECL_CONSTRUCTOR_P (current_function_decl))\n     emit_base_init (current_class_type, 0);\n-\n-#if 0\n-  /* This has something a little wrong with it.\n-\n-     On a sun4, code like:\n-\n-        be L6\n-        ld [%i0],%o1\n-\n-     is generated, when the below is used when -O4 is given.  The delay\n-     slot it filled with an instruction that is safe, when this isn't\n-     used, like in:\n-\n-        be L6\n-        sethi %hi(LC1),%o0\n-        ld [%i0],%o1\n-\n-     on code like:\n-\n-        struct A {\n-          virtual void print() { printf(\"xxx\"); }\n-          void f();\n-        };\n-\n-        void A::f() {\n-          if (this) {\n-            print();\n-          } else {\n-            printf(\"0\");\n-          }\n-        }\n-\n-     And that is why this is disabled for now. (mrs)\n-  */\n-\n-  if ((flag_this_is_variable & 1) == 0\n-      && optimize\n-      && current_class_type\n-      && CLASSTYPE_VSIZE (current_class_type)\n-      && ! DECL_STATIC_FUNCTION_P (current_function_decl))\n-    {\n-      tree vfield = build_vfield_ref (C_C_D, current_class_type);\n-      current_vtable_decl = CLASSTYPE_VTBL_PTR (current_class_type);\n-      DECL_RTL (current_vtable_decl) = 0;\n-      DECL_INITIAL (current_vtable_decl) = error_mark_node;\n-      /* Have to cast the initializer, since it may have come from a\n-\t more base class then we ascribe CURRENT_VTABLE_DECL to be.  */\n-      finish_decl (current_vtable_decl, convert_force (TREE_TYPE (current_vtable_decl), vfield, 0), NULL_TREE, 0, 0);\n-      current_vtable_decl = build_indirect_ref (current_vtable_decl, NULL_PTR);\n-    }\n-  else\n-#endif\n-    current_vtable_decl = NULL_TREE;\n }\n \n /* Record the existence of an addressable inline function.  */"}, {"sha": "400cf1f0b37558f7903e906581adf78e916b6648", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=df38ebdddbe9930ae15570cea3a8fb28cd0d0ebd", "patch": "@@ -724,9 +724,6 @@ base_init:\n \t\t  if (! current_function_parms_stored)\n \t\t    store_parm_decls ();\n \n-\t\t  /* Flag that we are processing base and member initializers.  */\n-\t\t  current_vtable_decl = error_mark_node;\n-\n \t\t  if (DECL_CONSTRUCTOR_P (current_function_decl))\n \t\t    {\n \t\t      /* Make a contour for the initializer list.  */"}]}