{"sha": "1a7ce8570997eb1596c803443d20687b43fa2e47", "node_id": "C_kwDOANBUbNoAKDFhN2NlODU3MDk5N2ViMTU5NmM4MDM0NDNkMjA2ODdiNDNmYTJlNDc", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-12-22T08:48:54Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-12-23T05:42:55Z"}, "message": "Combine vpcmpuw + zero_extend to vpcmpuw.\n\nvcmp{ps,ph,pd} and vpcmp{,u}{b,w,d,q} implicitly clear the upper bits\nof dest.\n\ngcc/ChangeLog:\n\n\tPR target/103750\n\t* config/i386/sse.md\n\t(*<avx512>_cmp<V48H_AVX512VL:mode>3_zero_extend<SWI248x:mode>):\n\tNew pre_reload define_insn_and_split.\n\t(*<avx512>_cmp<VI12_AVX512VL:mode>3_zero_extend<SWI248x:mode>):\n\tDitto.\n\t(*<avx512>_ucmp<VI12_AVX512VL:mode>3_zero_extend<SWI248x:mode>):\n\tDitto.\n\t(*<avx512>_ucmp<VI48_AVX512VL:mode>3_zero_extend<SWI248x:mode>):\n\tDitto.\n\t(*<avx512>_cmp<V48H_AVX512VL:mode>3_zero_extend<SWI248x:mode>_2):\n\tDitto.\n\t(*<avx512>_cmp<VI12_AVX512VL:mode>3_zero_extend<SWI248x:mode>_2):\n\tDitto.\n\t(*<avx512>_ucmp<VI12_AVX512VL:mode>3_zero_extend<SWI248x:mode>_2):\n\tDitto.\n\t(*<avx512>_ucmp<VI48_AVX512VL:mode>3_zero_extend<SWI248x:mode>_2):\n\tDitto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512bw-pr103750-1.c: New test.\n\t* gcc.target/i386/avx512bw-pr103750-2.c: New test.\n\t* gcc.target/i386/avx512f-pr103750-1.c: New test.\n\t* gcc.target/i386/avx512f-pr103750-2.c: New test.\n\t* gcc.target/i386/avx512fp16-pr103750-1.c: New test.\n\t* gcc.target/i386/avx512fp16-pr103750-2.c: New test.", "tree": {"sha": "56edd779c97e42887a8a67b7163bd96341dcb22a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56edd779c97e42887a8a67b7163bd96341dcb22a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a7ce8570997eb1596c803443d20687b43fa2e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7ce8570997eb1596c803443d20687b43fa2e47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7ce8570997eb1596c803443d20687b43fa2e47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7ce8570997eb1596c803443d20687b43fa2e47/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f9bc0bf0d6b043192df5fc9d03b71ff2a36ddc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9bc0bf0d6b043192df5fc9d03b71ff2a36ddc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9bc0bf0d6b043192df5fc9d03b71ff2a36ddc5"}], "stats": {"total": 1635, "additions": 1635, "deletions": 0}, "files": [{"sha": "69c754751a8fb9c3760015012ae8fb9a669f4cfd", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 275, "deletions": 0, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1a7ce8570997eb1596c803443d20687b43fa2e47", "patch": "@@ -3702,6 +3702,77 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+;; Since vpcmpd implicitly clear the upper bits of dest, transform\n+;; vpcmpd + zero_extend to vpcmpd since the instruction\n+(define_insn_and_split \"*<avx512>_cmp<V48H_AVX512VL:mode>3_zero_extend<SWI248x:mode>\"\n+  [(set (match_operand:SWI248x 0 \"register_operand\")\n+\t(zero_extend:SWI248x\n+\t  (unspec:<V48H_AVX512VL:avx512fmaskmode>\n+\t    [(match_operand:V48H_AVX512VL 1 \"nonimmediate_operand\")\n+\t     (match_operand:V48H_AVX512VL 2 \"nonimmediate_operand\")\n+\t     (match_operand:SI 3 \"const_0_to_7_operand\" \"n\")]\n+\t    UNSPEC_PCMP)))]\n+  \"TARGET_AVX512F\n+   && (!VALID_MASK_AVX512BW_MODE (<SWI248x:MODE>mode) || TARGET_AVX512BW)\n+   && ix86_pre_reload_split ()\n+   && (GET_MODE_NUNITS (<V48H_AVX512VL:MODE>mode)\n+      < GET_MODE_PRECISION (<SWI248x:MODE>mode))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<V48H_AVX512VL:avx512fmaskmode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)]\n+\t  UNSPEC_PCMP))]\n+{\n+  operands[1] = force_reg (<V48H_AVX512VL:MODE>mode, operands[1]);\n+  operands[0] = lowpart_subreg (<V48H_AVX512VL:avx512fmaskmode>mode,\n+\t\t\t\t operands[0], <SWI248x:MODE>mode);\n+}\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<V48H_AVX512VL:sseinsnmode>\")])\n+\n+(define_insn_and_split \"*<avx512>_cmp<V48H_AVX512VL:mode>3_zero_extend<SWI248x:mode>_2\"\n+  [(set (match_operand:SWI248x 0 \"register_operand\")\n+\t(zero_extend:SWI248x\n+\t  (unspec:<V48H_AVX512VL:avx512fmaskmode>\n+\t    [(match_operand:V48H_AVX512VL 1 \"nonimmediate_operand\")\n+\t     (match_operand:V48H_AVX512VL 2 \"nonimmediate_operand\")\n+\t     (match_operand:SI 3 \"const_0_to_7_operand\")]\n+\t    UNSPEC_PCMP)))\n+   (set (match_operand:<V48H_AVX512VL:avx512fmaskmode> 4 \"register_operand\")\n+\t(unspec:<V48H_AVX512VL:avx512fmaskmode>\n+\t    [(match_dup 1)\n+\t     (match_dup 2)\n+\t     (match_dup 3)]\n+\t    UNSPEC_PCMP))]\n+  \"TARGET_AVX512F\n+   && (!VALID_MASK_AVX512BW_MODE (<SWI248x:MODE>mode) || TARGET_AVX512BW)\n+   && (GET_MODE_NUNITS (<V48H_AVX512VL:MODE>mode)\n+       < GET_MODE_PRECISION (<SWI248x:MODE>mode))\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<V48H_AVX512VL:avx512fmaskmode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)]\n+\t  UNSPEC_PCMP))\n+   (set (match_dup 4) (match_dup 0))]\n+{\n+  operands[1] = force_reg (<V48H_AVX512VL:MODE>mode, operands[1]);\n+  operands[0] = lowpart_subreg (<V48H_AVX512VL:avx512fmaskmode>mode,\n+\t\t\t\toperands[0], <SWI248x:MODE>mode);\n+}\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<V48H_AVX512VL:sseinsnmode>\")])\n+\n (define_insn_and_split \"*<avx512>_cmp<mode>3\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n \t(not:<avx512fmaskmode>\n@@ -3735,6 +3806,73 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"*<avx512>_cmp<VI12_AVX512VL:mode>3_zero_extend<SWI248x:mode>\"\n+  [(set (match_operand:SWI248x 0 \"register_operand\")\n+\t(zero_extend:SWI248x\n+\t  (unspec:<VI12_AVX512VL:avx512fmaskmode>\n+\t    [(match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\")\n+\t     (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\")\n+\t     (match_operand:SI 3 \"const_0_to_7_operand\")]\n+\t    UNSPEC_PCMP)))]\n+  \"TARGET_AVX512BW\n+  && ix86_pre_reload_split ()\n+  && (GET_MODE_NUNITS (<VI12_AVX512VL:MODE>mode)\n+      < GET_MODE_PRECISION (<SWI248x:MODE>mode))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<VI12_AVX512VL:avx512fmaskmode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)]\n+\t  UNSPEC_PCMP))]\n+{\n+  operands[1] = force_reg (<VI12_AVX512VL:MODE>mode, operands[1]);\n+  operands[0] = lowpart_subreg (<VI12_AVX512VL:avx512fmaskmode>mode,\n+\t\t\t\toperands[0], <SWI248x:MODE>mode);\n+}\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<VI12_AVX512VL:sseinsnmode>\")])\n+\n+(define_insn_and_split \"*<avx512>_cmp<VI12_AVX512VL:mode>3_zero_extend<SWI248x:mode>_2\"\n+  [(set (match_operand:SWI248x 0 \"register_operand\")\n+\t(zero_extend:SWI248x\n+\t  (unspec:<VI12_AVX512VL:avx512fmaskmode>\n+\t    [(match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\")\n+\t     (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\")\n+\t     (match_operand:SI 3 \"const_0_to_7_operand\")]\n+\t    UNSPEC_PCMP)))\n+   (set (match_operand:<VI12_AVX512VL:avx512fmaskmode> 4 \"register_operand\")\n+\t(unspec:<VI12_AVX512VL:avx512fmaskmode>\n+\t    [(match_dup 1)\n+\t     (match_dup 2)\n+\t     (match_dup 3)]\n+\t    UNSPEC_PCMP))]\n+  \"TARGET_AVX512BW\n+  && (GET_MODE_NUNITS (<VI12_AVX512VL:MODE>mode)\n+      < GET_MODE_PRECISION (<SWI248x:MODE>mode))\n+  && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<VI12_AVX512VL:avx512fmaskmode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)]\n+\t  UNSPEC_PCMP))\n+   (set (match_dup 4) (match_dup 0))]\n+{\n+  operands[1] = force_reg (<VI12_AVX512VL:MODE>mode, operands[1]);\n+  operands[0] = lowpart_subreg (<VI12_AVX512VL:avx512fmaskmode>mode,\n+\t\t\t\toperands[0], <SWI248x:MODE>mode);\n+}\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<VI12_AVX512VL:sseinsnmode>\")])\n+\n (define_int_iterator UNSPEC_PCMP_ITER\n   [UNSPEC_PCMP UNSPEC_UNSIGNED_PCMP])\n \n@@ -3771,6 +3909,74 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"*<avx512>_ucmp<VI12_AVX512VL:mode>3_zero_extend<SWI248x:mode>\"\n+  [(set (match_operand:SWI248x 0 \"register_operand\")\n+\t(zero_extend:SWI248x\n+\t  (unspec:<VI12_AVX512VL:avx512fmaskmode>\n+\t    [(match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\")\n+\t     (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\")\n+\t     (match_operand:SI 3 \"const_0_to_7_operand\")]\n+\t    UNSPEC_UNSIGNED_PCMP)))]\n+  \"TARGET_AVX512BW\n+  && ix86_pre_reload_split ()\n+  && (GET_MODE_NUNITS (<VI12_AVX512VL:MODE>mode)\n+      < GET_MODE_PRECISION (<SWI248x:MODE>mode))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<VI12_AVX512VL:avx512fmaskmode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)]\n+\t  UNSPEC_UNSIGNED_PCMP))]\n+{\n+  operands[1] = force_reg (<VI12_AVX512VL:MODE>mode, operands[1]);\n+  operands[0] = lowpart_subreg (<VI12_AVX512VL:avx512fmaskmode>mode,\n+\t\t\t\toperands[0], <SWI248x:MODE>mode);\n+}\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<VI12_AVX512VL:sseinsnmode>\")])\n+\n+(define_insn_and_split \"*<avx512>_ucmp<VI12_AVX512VL:mode>3_zero_extend<SWI248x:mode>_2\"\n+  [(set (match_operand:SWI248x 0 \"register_operand\")\n+\t(zero_extend:SWI248x\n+\t  (unspec:<VI12_AVX512VL:avx512fmaskmode>\n+\t    [(match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\")\n+\t     (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\")\n+\t     (match_operand:SI 3 \"const_0_to_7_operand\")]\n+\t    UNSPEC_UNSIGNED_PCMP)))\n+   (set (match_operand:<VI12_AVX512VL:avx512fmaskmode> 4 \"register_operand\")\n+\t(unspec:<VI12_AVX512VL:avx512fmaskmode>\n+\t    [(match_dup 1)\n+\t     (match_dup 2)\n+\t     (match_dup 3)]\n+\t    UNSPEC_UNSIGNED_PCMP))]\n+  \"TARGET_AVX512BW\n+   && ix86_pre_reload_split ()\n+   && (GET_MODE_NUNITS (<VI12_AVX512VL:MODE>mode)\n+      < GET_MODE_PRECISION (<SWI248x:MODE>mode))\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<VI12_AVX512VL:avx512fmaskmode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)]\n+\t  UNSPEC_UNSIGNED_PCMP))\n+   (set (match_dup 4) (match_dup 0))]\n+{\n+  operands[1] = force_reg (<VI12_AVX512VL:MODE>mode, operands[1]);\n+  operands[0] = lowpart_subreg (<VI12_AVX512VL:avx512fmaskmode>mode,\n+\t\t\t\toperands[0], <SWI248x:MODE>mode);\n+}\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<VI12_AVX512VL:sseinsnmode>\")])\n+\n (define_insn \"<avx512>_ucmp<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>\n@@ -3785,6 +3991,75 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"*<avx512>_ucmp<VI48_AVX512VL:mode>3_zero_extend<SWI248x:mode>\"\n+  [(set (match_operand:SWI248x 0 \"register_operand\")\n+\t(zero_extend:SWI248x\n+\t  (unspec:<VI48_AVX512VL:avx512fmaskmode>\n+\t    [(match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\")\n+\t     (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\")\n+\t     (match_operand:SI 3 \"const_0_to_7_operand\")]\n+\t    UNSPEC_UNSIGNED_PCMP)))]\n+  \"TARGET_AVX512F\n+   && (!VALID_MASK_AVX512BW_MODE (<SWI248x:MODE>mode) || TARGET_AVX512BW)\n+   && ix86_pre_reload_split ()\n+   && (GET_MODE_NUNITS (<VI48_AVX512VL:MODE>mode)\n+      < GET_MODE_PRECISION (<SWI248x:MODE>mode))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<VI48_AVX512VL:avx512fmaskmode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)]\n+\t  UNSPEC_UNSIGNED_PCMP))]\n+{\n+  operands[1] = force_reg (<VI48_AVX512VL:MODE>mode, operands[1]);\n+  operands[0] = lowpart_subreg (<VI48_AVX512VL:avx512fmaskmode>mode,\n+\t\t\t\toperands[0], <SWI248x:MODE>mode);\n+}\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<VI48_AVX512VL:sseinsnmode>\")])\n+\n+(define_insn_and_split \"*<avx512>_ucmp<VI48_AVX512VL:mode>3_zero_extend<SWI248x:mode>_2\"\n+  [(set (match_operand:SWI248x 0 \"register_operand\")\n+\t(zero_extend:SWI248x\n+\t  (unspec:<VI48_AVX512VL:avx512fmaskmode>\n+\t    [(match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\")\n+\t     (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\")\n+\t     (match_operand:SI 3 \"const_0_to_7_operand\")]\n+\t    UNSPEC_UNSIGNED_PCMP)))\n+   (set (match_operand:<VI48_AVX512VL:avx512fmaskmode> 4 \"register_operand\")\n+\t(unspec:<VI48_AVX512VL:avx512fmaskmode>\n+\t    [(match_dup 1)\n+\t     (match_dup 2)\n+\t     (match_dup 3)]\n+\t    UNSPEC_UNSIGNED_PCMP))]\n+  \"TARGET_AVX512F\n+   && (!VALID_MASK_AVX512BW_MODE (<SWI248x:MODE>mode) || TARGET_AVX512BW)\n+   && (GET_MODE_NUNITS (<VI48_AVX512VL:MODE>mode)\n+       < GET_MODE_PRECISION (<SWI248x:MODE>mode))\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<VI48_AVX512VL:avx512fmaskmode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)]\n+\t  UNSPEC_UNSIGNED_PCMP))\n+   (set (match_dup 4) (match_dup 0))]\n+{\n+  operands[1] = force_reg (<VI48_AVX512VL:MODE>mode, operands[1]);\n+  operands[0] = lowpart_subreg (<VI48_AVX512VL:avx512fmaskmode>mode,\n+\t\t\t\toperands[0], <SWI248x:MODE>mode);\n+}\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<VI48_AVX512VL:sseinsnmode>\")])\n+\n (define_insn_and_split \"*<avx512>_ucmp<mode>3\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n \t(not:<avx512fmaskmode>"}, {"sha": "b1165f069bb589d45a0fc3c38f9b280e6b334eb6", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr103750-1.c", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr103750-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr103750-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr103750-1.c?ref=1a7ce8570997eb1596c803443d20687b43fa2e47", "patch": "@@ -0,0 +1,154 @@\n+/* PR target/103750 */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-not \"kmov\" { xfail ia32 } } } */\n+/* xfail need to be fixed.  */\n+\n+#include <immintrin.h>\n+extern __m128i* pi128;\n+extern __m256i* pi256;\n+extern __m512i* pi512;\n+\n+unsigned char\n+foo ()\n+{\n+  __mmask16 mask1 = _mm_cmpeq_epu8_mask (pi128[0], pi128[1]);\n+  __mmask16 mask2 = _mm_cmpeq_epu8_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo1 ()\n+{\n+  __mmask16 mask1 = _mm_cmpeq_epu8_mask (pi128[0], pi128[1]);\n+  __mmask16 mask2 = _mm_cmpeq_epu8_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo2 ()\n+{\n+  __mmask32 mask1 = _mm256_cmpeq_epu8_mask (pi256[0], pi256[1]);\n+  __mmask32 mask2 = _mm256_cmpeq_epu8_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo3 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu16_mask (pi128[1], pi128[2]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo4 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu16_mask (pi128[1], pi128[2]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo5 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu16_mask (pi128[1], pi128[2]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo6 ()\n+{\n+  __mmask16 mask1 = _mm256_cmpeq_epu16_mask (pi256[0], pi256[1]);\n+  __mmask16 mask2 = _mm256_cmpeq_epu16_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo7 ()\n+{\n+  __mmask16 mask1 = _mm256_cmpeq_epu16_mask (pi256[0], pi256[1]);\n+  __mmask16 mask2 = _mm256_cmpeq_epu16_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo8 ()\n+{\n+  __mmask32 mask1 = _mm512_cmpeq_epu16_mask (pi512[0], pi512[1]);\n+  __mmask32 mask2 = _mm512_cmpeq_epu16_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo ()\n+{\n+  __mmask16 mask1 = _mm_cmpeq_epi8_mask (pi128[0], pi128[1]);\n+  __mmask16 mask2 = _mm_cmpeq_epi8_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo1 ()\n+{\n+  __mmask16 mask1 = _mm_cmpeq_epi8_mask (pi128[0], pi128[1]);\n+  __mmask16 mask2 = _mm_cmpeq_epi8_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo2 ()\n+{\n+  __mmask32 mask1 = _mm256_cmpeq_epi8_mask (pi256[0], pi256[1]);\n+  __mmask32 mask2 = _mm256_cmpeq_epi8_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo3 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi16_mask (pi128[1], pi128[2]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo4 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi16_mask (pi128[1], pi128[2]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo5 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi16_mask (pi128[1], pi128[2]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo6 ()\n+{\n+  __mmask16 mask1 = _mm256_cmpeq_epi16_mask (pi256[0], pi256[1]);\n+  __mmask16 mask2 = _mm256_cmpeq_epi16_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo7 ()\n+{\n+  __mmask16 mask1 = _mm256_cmpeq_epi16_mask (pi256[0], pi256[1]);\n+  __mmask16 mask2 = _mm256_cmpeq_epi16_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo8 ()\n+{\n+  __mmask32 mask1 = _mm512_cmpeq_epi16_mask (pi512[0], pi512[1]);\n+  __mmask32 mask2 = _mm512_cmpeq_epi16_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}"}, {"sha": "7303f5403ba860a150813077dc445bff70d97ef4", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr103750-2.c", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr103750-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr103750-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr103750-2.c?ref=1a7ce8570997eb1596c803443d20687b43fa2e47", "patch": "@@ -0,0 +1,173 @@\n+/* PR target/103750 */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -mavx512dq -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-not \"kmov\" { xfail ia32 } } } */\n+/* xfail need to be fixed.  */\n+\n+#include <immintrin.h>\n+extern __m128i* pi128;\n+extern __m256i* pi256;\n+extern __m512i* pi512;\n+\n+extern char a, b;\n+void\n+foo ()\n+{\n+  __mmask16 mask1 = _mm_cmpeq_epu8_mask (pi128[0], pi128[1]);\n+  __mmask16 mask2 = _mm_cmpeq_epu8_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+foo1 ()\n+{\n+  __mmask16 mask1 = _mm_cmpeq_epu8_mask (pi128[0], pi128[1]);\n+  __mmask16 mask2 = _mm_cmpeq_epu8_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+foo2 ()\n+{\n+  __mmask32 mask1 = _mm256_cmpeq_epu8_mask (pi256[0], pi256[1]);\n+  __mmask32 mask2 = _mm256_cmpeq_epu8_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+void\n+foo3 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu16_mask (pi128[1], pi128[2]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo4 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu16_mask (pi128[1], pi128[2]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo5 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu16_mask (pi128[1], pi128[2]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo6 ()\n+{\n+  __mmask16 mask1 = _mm256_cmpeq_epu16_mask (pi256[0], pi256[1]);\n+  __mmask16 mask2 = _mm256_cmpeq_epu16_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+foo7 ()\n+{\n+  __mmask16 mask1 = _mm256_cmpeq_epu16_mask (pi256[0], pi256[1]);\n+  __mmask16 mask2 = _mm256_cmpeq_epu16_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+foo8 ()\n+{\n+  __mmask32 mask1 = _mm512_cmpeq_epu16_mask (pi512[0], pi512[1]);\n+  __mmask32 mask2 = _mm512_cmpeq_epu16_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo ()\n+{\n+  __mmask16 mask1 = _mm_cmpeq_epi8_mask (pi128[0], pi128[1]);\n+  __mmask16 mask2 = _mm_cmpeq_epi8_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo1 ()\n+{\n+  __mmask16 mask1 = _mm_cmpeq_epi8_mask (pi128[0], pi128[1]);\n+  __mmask16 mask2 = _mm_cmpeq_epi8_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo2 ()\n+{\n+  __mmask32 mask1 = _mm256_cmpeq_epi8_mask (pi256[0], pi256[1]);\n+  __mmask32 mask2 = _mm256_cmpeq_epi8_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo3 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi16_mask (pi128[1], pi128[2]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo4 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi16_mask (pi128[1], pi128[2]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo5 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi16_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi16_mask (pi128[1], pi128[2]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo6 ()\n+{\n+  __mmask16 mask1 = _mm256_cmpeq_epi16_mask (pi256[0], pi256[1]);\n+  __mmask16 mask2 = _mm256_cmpeq_epi16_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo7 ()\n+{\n+  __mmask16 mask1 = _mm256_cmpeq_epi16_mask (pi256[0], pi256[1]);\n+  __mmask16 mask2 = _mm256_cmpeq_epi16_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo8 ()\n+{\n+  __mmask32 mask1 = _mm512_cmpeq_epi16_mask (pi512[0], pi512[1]);\n+  __mmask32 mask2 = _mm512_cmpeq_epi16_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask32_u8 (mask1, mask2);\n+}"}, {"sha": "613efe0f92636623c4d8680f6d7a202884197ace", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr103750-1.c", "status": "added", "additions": 426, "deletions": 0, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr103750-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr103750-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr103750-1.c?ref=1a7ce8570997eb1596c803443d20687b43fa2e47", "patch": "@@ -0,0 +1,426 @@\n+/* PR target/103750 */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -mavx512f -mavx512vl -mavx512bw\" } */\n+/* { dg-final { scan-assembler-not \"kmov\" { xfail ia32 } } } */\n+/* xfail need to be fixed.  */\n+\n+#include <immintrin.h>\n+extern __m128i* pi128;\n+extern __m256i* pi256;\n+extern __m512i* pi512;\n+\n+extern __m128* ps128;\n+extern __m256* ps256;\n+extern __m512* ps512;\n+\n+extern __m128d* pd128;\n+extern __m256d* pd256;\n+extern __m512d* pd512;\n+\n+unsigned char\n+foo ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu32_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo1 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu32_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo2 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu32_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo3 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu32_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo4 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu32_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo5 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu32_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo6 ()\n+{\n+  __mmask16 mask1 = _mm512_cmpeq_epu32_mask (pi512[0], pi512[1]);\n+  __mmask16 mask2 = _mm512_cmpeq_epu32_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo7 ()\n+{\n+  __mmask16 mask1 = _mm512_cmpeq_epu32_mask (pi512[0], pi512[1]);\n+  __mmask16 mask2 = _mm512_cmpeq_epu32_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo8 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu64_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo9 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu64_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo10 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu64_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo11 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu64_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo12 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu64_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo13 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu64_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo14 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epu64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epu64_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo15 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epu64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epu64_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+foo16 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epu64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epu64_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi32_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo1 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi32_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo2 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi32_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo3 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi32_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo4 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi32_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo5 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi32_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo6 ()\n+{\n+  __mmask16 mask1 = _mm512_cmpeq_epi32_mask (pi512[0], pi512[1]);\n+  __mmask16 mask2 = _mm512_cmpeq_epi32_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo7 ()\n+{\n+  __mmask16 mask1 = _mm512_cmpeq_epi32_mask (pi512[0], pi512[1]);\n+  __mmask16 mask2 = _mm512_cmpeq_epi32_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo8 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi64_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo9 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi64_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo10 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi64_mask (pi128[2], pi128[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo11 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi64_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo12 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi64_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo13 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi64_mask (pi256[2], pi256[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo14 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epi64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epi64_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo15 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epi64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epi64_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo16 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epi64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epi64_mask (pi512[2], pi512[3]);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ps_mask (ps128[0], ps128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ps_mask (ps128[2], ps128[3], 1);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo1 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ps_mask (ps128[0], ps128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ps_mask (ps128[2], ps128[3], 1);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo2 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ps_mask (ps128[0], ps128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ps_mask (ps128[2], ps128[3], 1);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo3 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_ps_mask (ps256[0], ps256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_ps_mask (ps256[2], ps256[3], 1);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo4 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_ps_mask (ps256[0], ps256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_ps_mask (ps256[2], ps256[3], 1);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo5 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_ps_mask (ps256[0], ps256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_ps_mask (ps256[2], ps256[3], 1);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo6 ()\n+{\n+  __mmask16 mask1 = _mm512_cmp_ps_mask (ps512[0], ps512[1], 1);\n+  __mmask16 mask2 = _mm512_cmp_ps_mask (ps512[2], ps512[3], 1);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo7 ()\n+{\n+  __mmask16 mask1 = _mm512_cmp_ps_mask (ps512[0], ps512[1], 1);\n+  __mmask16 mask2 = _mm512_cmp_ps_mask (ps512[2], ps512[3], 1);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo8 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_pd_mask (pd128[0], pd128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_pd_mask (pd128[2], pd128[3], 1);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo9 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_pd_mask (pd128[0], pd128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_pd_mask (pd128[2], pd128[3], 1);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo10 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_pd_mask (pd128[0], pd128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_pd_mask (pd128[2], pd128[3], 1);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo11 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_pd_mask (pd256[0], pd256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_pd_mask (pd256[2], pd256[3], 1);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo12 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_pd_mask (pd256[0], pd256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_pd_mask (pd256[2], pd256[3], 1);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo13 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_pd_mask (pd256[0], pd256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_pd_mask (pd256[2], pd256[3], 1);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo14 ()\n+{\n+  __mmask8 mask1 = _mm512_cmp_pd_mask (pd512[0], pd512[1], 1);\n+  __mmask8 mask2 = _mm512_cmp_pd_mask (pd512[2], pd512[3], 1);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo15 ()\n+{\n+  __mmask8 mask1 = _mm512_cmp_pd_mask (pd512[0], pd512[1], 1);\n+  __mmask8 mask2 = _mm512_cmp_pd_mask (pd512[2], pd512[3], 1);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+float_foo16 ()\n+{\n+  __mmask8 mask1 = _mm512_cmp_pd_mask (pd512[0], pd512[1], 1);\n+  __mmask8 mask2 = _mm512_cmp_pd_mask (pd512[2], pd512[3], 1);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}"}, {"sha": "a6c2b06747d4bd6a2a29feec1825f4b7a9f2552a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr103750-2.c", "status": "added", "additions": 478, "deletions": 0, "changes": 478, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr103750-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr103750-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr103750-2.c?ref=1a7ce8570997eb1596c803443d20687b43fa2e47", "patch": "@@ -0,0 +1,478 @@\n+/* PR target/103750 */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -mavx512dq -mavx512vl -mavx512bw\" } */\n+/* { dg-final { scan-assembler-not \"kmov\" { xfail ia32 } } } */\n+/* xfail need to be fixed.  */\n+\n+#include <immintrin.h>\n+extern __m128i* pi128;\n+extern __m256i* pi256;\n+extern __m512i* pi512;\n+\n+extern __m128* ps128;\n+extern __m256* ps256;\n+extern __m512* ps512;\n+\n+extern __m128d* pd128;\n+extern __m256d* pd256;\n+extern __m512d* pd512;\n+\n+extern char a, b;\n+void\n+foo ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu32_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo1 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu32_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo2 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu32_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo3 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu32_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo4 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu32_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo5 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu32_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo6 ()\n+{\n+  __mmask16 mask1 = _mm512_cmpeq_epu32_mask (pi512[0], pi512[1]);\n+  __mmask16 mask2 = _mm512_cmpeq_epu32_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+foo7 ()\n+{\n+  __mmask16 mask1 = _mm512_cmpeq_epu32_mask (pi512[0], pi512[1]);\n+  __mmask16 mask2 = _mm512_cmpeq_epu32_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+foo8 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu64_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo9 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu64_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo10 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epu64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epu64_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo11 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu64_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo12 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu64_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo13 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epu64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epu64_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo14 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epu64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epu64_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo15 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epu64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epu64_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+foo16 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epu64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epu64_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi32_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo1 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi32_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo2 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi32_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi32_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo3 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi32_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo4 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi32_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo5 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi32_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi32_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo6 ()\n+{\n+  __mmask16 mask1 = _mm512_cmpeq_epi32_mask (pi512[0], pi512[1]);\n+  __mmask16 mask2 = _mm512_cmpeq_epi32_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo7 ()\n+{\n+  __mmask16 mask1 = _mm512_cmpeq_epi32_mask (pi512[0], pi512[1]);\n+  __mmask16 mask2 = _mm512_cmpeq_epi32_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo8 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi64_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo9 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi64_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo10 ()\n+{\n+  __mmask8 mask1 = _mm_cmpeq_epi64_mask (pi128[0], pi128[1]);\n+  __mmask8 mask2 = _mm_cmpeq_epi64_mask (pi128[2], pi128[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo11 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi64_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo12 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi64_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo13 ()\n+{\n+  __mmask8 mask1 = _mm256_cmpeq_epi64_mask (pi256[0], pi256[1]);\n+  __mmask8 mask2 = _mm256_cmpeq_epi64_mask (pi256[2], pi256[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo14 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epi64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epi64_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo15 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epi64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epi64_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo16 ()\n+{\n+  __mmask8 mask1 = _mm512_cmpeq_epi64_mask (pi512[0], pi512[1]);\n+  __mmask8 mask2 = _mm512_cmpeq_epi64_mask (pi512[2], pi512[3]);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ps_mask (ps128[0], ps128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ps_mask (ps128[2], ps128[3], 1);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo1 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ps_mask (ps128[0], ps128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ps_mask (ps128[2], ps128[3], 1);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo2 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ps_mask (ps128[0], ps128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ps_mask (ps128[2], ps128[3], 1);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo3 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_ps_mask (ps256[0], ps256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_ps_mask (ps256[2], ps256[3], 1);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo4 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_ps_mask (ps256[0], ps256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_ps_mask (ps256[2], ps256[3], 1);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo5 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_ps_mask (ps256[0], ps256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_ps_mask (ps256[2], ps256[3], 1);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo6 ()\n+{\n+  __mmask16 mask1 = _mm512_cmp_ps_mask (ps512[0], ps512[1], 1);\n+  __mmask16 mask2 = _mm512_cmp_ps_mask (ps512[2], ps512[3], 1);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo7 ()\n+{\n+  __mmask16 mask1 = _mm512_cmp_ps_mask (ps512[0], ps512[1], 1);\n+  __mmask16 mask2 = _mm512_cmp_ps_mask (ps512[2], ps512[3], 1);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo8 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_pd_mask (pd128[0], pd128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_pd_mask (pd128[2], pd128[3], 1);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo9 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_pd_mask (pd128[0], pd128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_pd_mask (pd128[2], pd128[3], 1);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo10 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_pd_mask (pd128[0], pd128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_pd_mask (pd128[2], pd128[3], 1);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo11 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_pd_mask (pd256[0], pd256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_pd_mask (pd256[2], pd256[3], 1);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo12 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_pd_mask (pd256[0], pd256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_pd_mask (pd256[2], pd256[3], 1);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo13 ()\n+{\n+  __mmask8 mask1 = _mm256_cmp_pd_mask (pd256[0], pd256[1], 1);\n+  __mmask8 mask2 = _mm256_cmp_pd_mask (pd256[2], pd256[3], 1);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo14 ()\n+{\n+  __mmask8 mask1 = _mm512_cmp_pd_mask (pd512[0], pd512[1], 1);\n+  __mmask8 mask2 = _mm512_cmp_pd_mask (pd512[2], pd512[3], 1);\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo15 ()\n+{\n+  __mmask8 mask1 = _mm512_cmp_pd_mask (pd512[0], pd512[1], 1);\n+  __mmask8 mask2 = _mm512_cmp_pd_mask (pd512[2], pd512[3], 1);\n+  a = _kortestz_mask32_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+float_foo16 ()\n+{\n+  __mmask8 mask1 = _mm512_cmp_pd_mask (pd512[0], pd512[1], 1);\n+  __mmask8 mask2 = _mm512_cmp_pd_mask (pd512[2], pd512[3], 1);\n+  a = _kortestz_mask64_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}"}, {"sha": "eaf6d1e9819f496ad5bfc52f488052704501421f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-pr103750-1.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr103750-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr103750-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr103750-1.c?ref=1a7ce8570997eb1596c803443d20687b43fa2e47", "patch": "@@ -0,0 +1,58 @@\n+/* PR target/103750 */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+/* { dg-final { scan-assembler-not \"kmov\" { xfail ia32 } } } */\n+/* xfail need to be fixed.  */\n+\n+#include <immintrin.h>\n+extern __m128h* ph128;\n+extern __m256h* ph256;\n+extern __m512h* ph512;\n+\n+unsigned char\n+sign_foo3 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ph_mask (ph128[0], ph128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ph_mask (ph128[1], ph128[2], 1);\n+  return _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo4 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ph_mask (ph128[0], ph128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ph_mask (ph128[1], ph128[2], 1);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo5 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ph_mask (ph128[0], ph128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ph_mask (ph128[1], ph128[2], 1);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo6 ()\n+{\n+  __mmask16 mask1 = _mm256_cmp_ph_mask (ph256[0], ph256[1], 1);\n+  __mmask16 mask2 = _mm256_cmp_ph_mask (ph256[2], ph256[3], 1);\n+  return _kortestz_mask32_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo7 ()\n+{\n+  __mmask16 mask1 = _mm256_cmp_ph_mask (ph256[0], ph256[1], 1);\n+  __mmask16 mask2 = _mm256_cmp_ph_mask (ph256[2], ph256[3], 1);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}\n+\n+unsigned char\n+sign_foo8 ()\n+{\n+  __mmask32 mask1 = _mm512_cmp_ph_mask (ph512[0], ph512[1], 1);\n+  __mmask32 mask2 = _mm512_cmp_ph_mask (ph512[2], ph512[3], 1);\n+  return _kortestz_mask64_u8 (mask1, mask2);\n+}"}, {"sha": "3d3a033fe64c5f14a9198ff19b07f11f419c085d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-pr103750-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr103750-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7ce8570997eb1596c803443d20687b43fa2e47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr103750-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-pr103750-2.c?ref=1a7ce8570997eb1596c803443d20687b43fa2e47", "patch": "@@ -0,0 +1,71 @@\n+/* PR target/103750 */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+/* { dg-final { scan-assembler-not \"kmov\" { xfail ia32 } } } */\n+/* xfail need to be fixed.  */\n+\n+#include <immintrin.h>\n+extern __m128h* ph128;\n+extern __m256h* ph256;\n+extern __m512h* ph512;\n+\n+extern char a, b;\n+void\n+sign_foo3 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ph_mask (ph128[0], ph128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ph_mask (ph128[1], ph128[2], 1);\n+\n+  a = _kortestz_mask16_u8 (mask1, mask2);\n+  b = _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo4 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ph_mask (ph128[0], ph128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ph_mask (ph128[1], ph128[2], 1);\n+\n+  a =  _kortestz_mask32_u8 (mask1, mask2);\n+  b =  _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo5 ()\n+{\n+  __mmask8 mask1 = _mm_cmp_ph_mask (ph128[0], ph128[1], 1);\n+  __mmask8 mask2 = _mm_cmp_ph_mask (ph128[1], ph128[2], 1);\n+\n+  a =  _kortestz_mask64_u8 (mask1, mask2);\n+  b =  _kortestz_mask8_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo6 ()\n+{\n+  __mmask16 mask1 = _mm256_cmp_ph_mask (ph256[0], ph256[1], 1);\n+  __mmask16 mask2 = _mm256_cmp_ph_mask (ph256[2], ph256[3], 1);\n+\n+  a =  _kortestz_mask32_u8 (mask1, mask2);\n+  b =  _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo7 ()\n+{\n+  __mmask16 mask1 = _mm256_cmp_ph_mask (ph256[0], ph256[1], 1);\n+  __mmask16 mask2 = _mm256_cmp_ph_mask (ph256[2], ph256[3], 1);\n+\n+  a =  _kortestz_mask64_u8 (mask1, mask2);\n+  b =  _kortestz_mask16_u8 (mask1, mask2);\n+}\n+\n+void\n+sign_foo8 ()\n+{\n+  __mmask32 mask1 = _mm512_cmp_ph_mask (ph512[0], ph512[1], 1);\n+  __mmask32 mask2 = _mm512_cmp_ph_mask (ph512[2], ph512[3], 1);\n+\n+  a =  _kortestz_mask64_u8 (mask1, mask2);\n+  b =  _kortestz_mask32_u8 (mask1, mask2);\n+}"}]}