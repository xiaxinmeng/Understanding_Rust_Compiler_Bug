{"sha": "64cb8ebef32c44ab7cab6021942df0b3d08a5fe5", "node_id": "C_kwDOANBUbNoAKDY0Y2I4ZWJlZjMyYzQ0YWI3Y2FiNjAyMTk0MmRmMGIzZDA4YTVmZTU", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2021-10-26T00:45:50Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-11-09T09:44:47Z"}, "message": "[Ada] Errors on globals in expressions of predicate aspects in generic bodies\n\ngcc/ada/\n\n\t* sem_ch13.adb (Freeze_Entity_Checks): Analyze the expression of\n\ta pragma Predicate associated with an aspect at the freeze point\n\tof the type, to ensure that references to globals get saved when\n\tthe aspect occurs within a generic body. Also, add\n\tAspect_Static_Predicate to the choices of the membership test of\n\tthe enclosing guard.", "tree": {"sha": "9d2964c66c9ca8c9bce47a45d929985e9bbfa23d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d2964c66c9ca8c9bce47a45d929985e9bbfa23d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64cb8ebef32c44ab7cab6021942df0b3d08a5fe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64cb8ebef32c44ab7cab6021942df0b3d08a5fe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64cb8ebef32c44ab7cab6021942df0b3d08a5fe5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64cb8ebef32c44ab7cab6021942df0b3d08a5fe5/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1275c4031a7d3b55e127cab53f31362469f8c89b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1275c4031a7d3b55e127cab53f31362469f8c89b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1275c4031a7d3b55e127cab53f31362469f8c89b"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "be9b84e5ec7c0935eeb9d670097ba116126d2fb2", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64cb8ebef32c44ab7cab6021942df0b3d08a5fe5/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64cb8ebef32c44ab7cab6021942df0b3d08a5fe5/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=64cb8ebef32c44ab7cab6021942df0b3d08a5fe5", "patch": "@@ -13162,13 +13162,42 @@ package body Sem_Ch13 is\n                   if Get_Aspect_Id (Ritem) in Aspect_CPU\n                                             | Aspect_Dynamic_Predicate\n                                             | Aspect_Predicate\n+                                            | Aspect_Static_Predicate\n                                             | Aspect_Priority\n                   then\n                     --  Retrieve the visibility to components and discriminants\n                     --  in order to properly analyze the aspects.\n \n                      Push_Type (E);\n                      Check_Aspect_At_Freeze_Point (Ritem);\n+\n+                     --  In the case of predicate aspects, there will be\n+                     --  a corresponding Predicate pragma associated with\n+                     --  the aspect, and the expression of the pragma also\n+                     --  needs to be analyzed at this point, to ensure that\n+                     --  Save_Global_References will capture global refs in\n+                     --  expressions that occur in generic bodies, for proper\n+                     --  later resolution of the pragma in instantiations.\n+\n+                     if Is_Type (E)\n+                       and then Inside_A_Generic\n+                       and then Has_Predicates (E)\n+                       and then Present (Aspect_Rep_Item (Ritem))\n+                     then\n+                        declare\n+                           Pragma_Args : constant List_Id :=\n+                             Pragma_Argument_Associations\n+                               (Aspect_Rep_Item (Ritem));\n+                           Pragma_Expr : constant Node_Id :=\n+                             Expression (Next (First (Pragma_Args)));\n+                        begin\n+                           if Present (Pragma_Expr) then\n+                              Analyze_And_Resolve\n+                                (Pragma_Expr, Standard_Boolean);\n+                           end if;\n+                        end;\n+                     end if;\n+\n                      Pop_Type (E);\n \n                   else"}]}