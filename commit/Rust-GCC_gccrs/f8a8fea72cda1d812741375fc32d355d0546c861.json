{"sha": "f8a8fea72cda1d812741375fc32d355d0546c861", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhhOGZlYTcyY2RhMWQ4MTI3NDEzNzVmYzMyZDM1NWQwNTQ2Yzg2MQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-02-26T14:51:36Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-02-26T14:51:36Z"}, "message": "re PR target/54640 (arm_adjust_block_mem: signed/unsigned comparison [-Werror=sign-compare])\n\n        PR target/54640\n        * config/arm/arm.c (const_ok_for_dimode_op): Make code consistent\n        for HOST_WIDE_INT of 32 bit / same size as int.\n        (arm_block_move_unaligned_straight): Likewise.\n        (arm_adjust_block_mem): Likewise.\n\nFrom-SVN: r196290", "tree": {"sha": "3dc43bff0758aab69a5e5e7906dd34a4d951ee8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dc43bff0758aab69a5e5e7906dd34a4d951ee8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8a8fea72cda1d812741375fc32d355d0546c861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a8fea72cda1d812741375fc32d355d0546c861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8a8fea72cda1d812741375fc32d355d0546c861", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a8fea72cda1d812741375fc32d355d0546c861/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c81369fa9000509fd2f2dd73763545cc7ec3c95d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c81369fa9000509fd2f2dd73763545cc7ec3c95d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c81369fa9000509fd2f2dd73763545cc7ec3c95d"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "c245470e447b259c4340f7d50eac5102abcc5ecf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a8fea72cda1d812741375fc32d355d0546c861/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a8fea72cda1d812741375fc32d355d0546c861/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8a8fea72cda1d812741375fc32d355d0546c861", "patch": "@@ -22,6 +22,12 @@\n \t* config/mn10300/mn10300.c (mn10300_expand_epilogue): Avoid offset\n \ttype promotion to unsigned.\n \n+\tPR target/54640\n+\t* config/arm/arm.c (const_ok_for_dimode_op): Make code consistent\n+\tfor HOST_WIDE_INT of 32 bit / same size as int.\n+\t(arm_block_move_unaligned_straight): Likewise.\n+\t(arm_adjust_block_mem): Likewise.\n+\n 2013-02-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/56426"}, {"sha": "3e7bd7f058cd1075aae2922397943d10cdf099df", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a8fea72cda1d812741375fc32d355d0546c861/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a8fea72cda1d812741375fc32d355d0546c861/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f8a8fea72cda1d812741375fc32d355d0546c861", "patch": "@@ -2607,7 +2607,7 @@ const_ok_for_op (HOST_WIDE_INT i, enum rtx_code code)\n int\n const_ok_for_dimode_op (HOST_WIDE_INT i, enum rtx_code code)\n {\n-  HOST_WIDE_INT hi_val = (i >> 32) & 0xFFFFFFFF;\n+  HOST_WIDE_INT hi_val = (i >> 16 >> 16) & 0xFFFFFFFF;\n   HOST_WIDE_INT lo_val = i & 0xFFFFFFFF;\n   rtx hi = GEN_INT (hi_val);\n   rtx lo = GEN_INT (lo_val);\n@@ -11347,10 +11347,10 @@ arm_block_move_unaligned_straight (rtx dstbase, rtx srcbase,\n   /* Use hard registers if we have aligned source or destination so we can use\n      load/store multiple with contiguous registers.  */\n   if (dst_aligned || src_aligned)\n-    for (i = 0; i < interleave_factor; i++)\n+    for (i = 0; i < (HOST_WIDE_INT) interleave_factor; i++)\n       regs[i] = gen_rtx_REG (SImode, i);\n   else\n-    for (i = 0; i < interleave_factor; i++)\n+    for (i = 0; i < (HOST_WIDE_INT) interleave_factor; i++)\n       regs[i] = gen_reg_rtx (SImode);\n \n   dst = copy_addr_to_reg (XEXP (dstbase, 0));\n@@ -11362,7 +11362,7 @@ arm_block_move_unaligned_straight (rtx dstbase, rtx srcbase,\n      For copying the last bytes we want to subtract this offset again.  */\n   src_autoinc = dst_autoinc = 0;\n \n-  for (i = 0; i < interleave_factor; i++)\n+  for (i = 0; i < (HOST_WIDE_INT) interleave_factor; i++)\n     regnos[i] = i;\n \n   /* Copy BLOCK_SIZE_BYTES chunks.  */\n@@ -11378,7 +11378,7 @@ arm_block_move_unaligned_straight (rtx dstbase, rtx srcbase,\n \t}\n       else\n \t{\n-\t  for (j = 0; j < interleave_factor; j++)\n+\t  for (j = 0; j < (HOST_WIDE_INT) interleave_factor; j++)\n \t    {\n \t      addr = plus_constant (Pmode, src, (srcoffset + j * UNITS_PER_WORD\n \t\t\t\t\t\t - src_autoinc));\n@@ -11398,7 +11398,7 @@ arm_block_move_unaligned_straight (rtx dstbase, rtx srcbase,\n \t}\n       else\n \t{\n-\t  for (j = 0; j < interleave_factor; j++)\n+\t  for (j = 0; j < (HOST_WIDE_INT) interleave_factor; j++)\n \t    {\n \t      addr = plus_constant (Pmode, dst, (dstoffset + j * UNITS_PER_WORD\n \t\t\t\t\t\t - dst_autoinc));\n@@ -11417,7 +11417,7 @@ arm_block_move_unaligned_straight (rtx dstbase, rtx srcbase,\n   \n   words = remaining / UNITS_PER_WORD;\n \n-  gcc_assert (words < interleave_factor);\n+  gcc_assert (words < (HOST_WIDE_INT) interleave_factor);\n   \n   if (src_aligned && words > 1)\n     {\n@@ -11555,7 +11555,8 @@ arm_adjust_block_mem (rtx mem, HOST_WIDE_INT length, rtx *loop_reg,\n   /* Although the new mem does not refer to a known location,\n      it does keep up to LENGTH bytes of alignment.  */\n   *loop_mem = change_address (mem, BLKmode, *loop_reg);\n-  set_mem_align (*loop_mem, MIN (MEM_ALIGN (mem), length * BITS_PER_UNIT));\n+  set_mem_align (*loop_mem,\n+\t\t MIN ((HOST_WIDE_INT) MEM_ALIGN (mem), length * BITS_PER_UNIT));\n }\n \n /* From mips_block_move_loop:"}]}