{"sha": "0dd48296433763ba6f3a1c9068ce3991fb71e9b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRkNDgyOTY0MzM3NjNiYTZmM2ExYzkwNjhjZTM5OTFmYjcxZTliOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:00Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:00Z"}, "message": "Add an RAII class for managing obstacks\n\nThis patch adds an RAII class for managing the lifetimes of objects\non an obstack.  See the comments in the patch for more details and\nexample usage.\n\ngcc/\n\t* obstack-utils.h: New file.", "tree": {"sha": "752daed09322f5a5318d22edcdf41919a9265c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/752daed09322f5a5318d22edcdf41919a9265c3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dd48296433763ba6f3a1c9068ce3991fb71e9b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd48296433763ba6f3a1c9068ce3991fb71e9b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd48296433763ba6f3a1c9068ce3991fb71e9b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd48296433763ba6f3a1c9068ce3991fb71e9b9/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4187be442f5baa4fc3d6a3f0077fca0d46877b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4187be442f5baa4fc3d6a3f0077fca0d46877b6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4187be442f5baa4fc3d6a3f0077fca0d46877b6e"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "ee389f89923eb8eb6ac0a3932766dd198003dbd7", "filename": "gcc/obstack-utils.h", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd48296433763ba6f3a1c9068ce3991fb71e9b9/gcc%2Fobstack-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd48296433763ba6f3a1c9068ce3991fb71e9b9/gcc%2Fobstack-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobstack-utils.h?ref=0dd48296433763ba6f3a1c9068ce3991fb71e9b9", "patch": "@@ -0,0 +1,86 @@\n+// Obstack-related utilities.\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of GCC.\n+//\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+//\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef GCC_OBSTACK_UTILS_H\n+#define GCC_OBSTACK_UTILS_H\n+\n+// This RAII class automatically frees memory allocated on an obstack,\n+// unless told not to via keep ().  It automatically converts to an\n+// obstack, so it can (optionally) be used in place of the obstack\n+// to make the scoping clearer.  For example:\n+//\n+//     obstack_watermark watermark (ob);\n+//     auto *ptr1 = XOBNEW (watermark, struct1);\n+//     if (...)\n+//       // Frees ptr1.\n+//       return false;\n+//\n+//     auto *ptr2 = XOBNEW (watermark, struct2);\n+//     if (...)\n+//       // Frees ptr1 and ptr2.\n+//       return false;\n+//\n+//     // Retains ptr1 and ptr2.\n+//     watermark.keep ();\n+//\n+//     auto *ptr3 = XOBNEW (watermark, struct3);\n+//     if (...)\n+//       // Frees ptr3.\n+//       return false;\n+//\n+//     // Retains ptr3 (in addition to ptr1 and ptr2 above).\n+//     watermark.keep ();\n+//     return true;\n+//\n+// The move constructor makes it possible to transfer ownership to a caller:\n+//\n+//     obstack_watermark\n+//     foo ()\n+//     {\n+//       obstack_watermark watermark (ob);\n+//       ...\n+//       return watermark;\n+//     }\n+//\n+//     void\n+//     bar ()\n+//     {\n+//       // Inherit ownership of everything that foo allocated.\n+//       obstack_watermark watermark = foo ();\n+//       ...\n+//     }\n+class obstack_watermark\n+{\n+public:\n+  obstack_watermark (obstack *ob) : m_obstack (ob) { keep (); }\n+  constexpr obstack_watermark (obstack_watermark &&) = default;\n+  ~obstack_watermark () { obstack_free (m_obstack, m_start); }\n+\n+  operator obstack *() const { return m_obstack; }\n+  void keep () { m_start = XOBNEWVAR (m_obstack, char, 0); }\n+\n+private:\n+  DISABLE_COPY_AND_ASSIGN (obstack_watermark);\n+\n+protected:\n+  obstack *m_obstack;\n+  char *m_start;\n+};\n+\n+#endif"}]}