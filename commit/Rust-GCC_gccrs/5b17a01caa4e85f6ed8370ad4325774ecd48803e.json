{"sha": "5b17a01caa4e85f6ed8370ad4325774ecd48803e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIxN2EwMWNhYTRlODVmNmVkODM3MGFkNDMyNTc3NGVjZDQ4ODAzZQ==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2016-05-20T09:39:32Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2016-05-20T09:39:32Z"}, "message": "Add test-cases mentioned in r236502.\n\nFrom-SVN: r236503", "tree": {"sha": "cbae5f275d49aa830935ef621be003b920d1b8bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbae5f275d49aa830935ef621be003b920d1b8bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b17a01caa4e85f6ed8370ad4325774ecd48803e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b17a01caa4e85f6ed8370ad4325774ecd48803e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b17a01caa4e85f6ed8370ad4325774ecd48803e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b17a01caa4e85f6ed8370ad4325774ecd48803e/comments", "author": null, "committer": null, "parents": [{"sha": "550fa0931855ee93f340dee752a8bb9b1a70cbc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550fa0931855ee93f340dee752a8bb9b1a70cbc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/550fa0931855ee93f340dee752a8bb9b1a70cbc5"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "7010a52b58d5fd0362389a41129e0a7e2ef1f08a", "filename": "gcc/testsuite/gcc.dg/vect/section-anchors-vect-70.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b17a01caa4e85f6ed8370ad4325774ecd48803e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b17a01caa4e85f6ed8370ad4325774ecd48803e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-70.c?ref=5b17a01caa4e85f6ed8370ad4325774ecd48803e", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target section_anchors } */\n+/* { dg-require-effective-target vect_int } */\n+\n+#define N 32\n+\n+/* Increase alignment of struct if an array's offset is multiple of alignment of\n+   vector type corresponding to it's scalar type.\n+   For the below test-case:\n+   offsetof(e) == 8 bytes. \n+   i) For arm: let x = alignment of vector type corresponding to int,\n+   x == 8 bytes.\n+   Since offsetof(e) % x == 0, set DECL_ALIGN(a, b, c) to x.\n+   ii) For aarch64, ppc: x == 16 bytes.\n+   Since offsetof(e) % x != 0, don't increase alignment of a, b, c.\n+*/\n+\n+static struct A {\n+  int p1, p2;\n+  int e[N];\n+} a, b, c;\n+\n+int foo(void)\n+{\n+  for (int i = 0; i < N; i++)\n+    a.e[i] = b.e[i] + c.e[i];\n+\n+   return a.e[0];\n+}\n+\n+/* { dg-final { scan-ipa-dump-times \"Increasing alignment of decl\" 0 \"increase_alignment\" { target aarch64*-*-* } } } */\n+/* { dg-final { scan-ipa-dump-times \"Increasing alignment of decl\" 0 \"increase_alignment\" { target powerpc64*-*-* } } } */\n+/* { dg-final { scan-ipa-dump-times \"Increasing alignment of decl\" 3 \"increase_alignment\" { target arm*-*-* } } } */"}, {"sha": "7cbd1dcf304c592db26103b3b77dc80d54bc64ae", "filename": "gcc/testsuite/gcc.dg/vect/section-anchors-vect-71.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b17a01caa4e85f6ed8370ad4325774ecd48803e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-71.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b17a01caa4e85f6ed8370ad4325774ecd48803e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-71.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-71.c?ref=5b17a01caa4e85f6ed8370ad4325774ecd48803e", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target section_anchors } */\n+/* { dg-require-effective-target vect_int } */\n+\n+/* Should not increase alignment of the struct because\n+   sizeof (A.e) < sizeof(corresponding vector type).  */\n+\n+#define N 3\n+\n+static struct A {\n+  int p1, p2;\n+  int e[N];\n+} a, b, c;\n+\n+int foo(void)\n+{\n+  for (int i = 0; i < N; i++)\n+    a.e[i] = b.e[i] + c.e[i];\n+\n+   return a.e[0];\n+}\n+\n+/* { dg-final { scan-ipa-dump-times \"Increasing alignment of decl\" 0 \"increase_alignment\" { target aarch64*-*-* } } } */\n+/* { dg-final { scan-ipa-dump-times \"Increasing alignment of decl\" 0 \"increase_alignment\" { target powerpc64*-*-* } } } */\n+/* { dg-final { scan-ipa-dump-times \"Increasing alignment of decl\" 0 \"increase_alignment\" { target arm*-*-* } } } */"}, {"sha": "873fabe9f5294c7153299e1414d9185687078ff5", "filename": "gcc/testsuite/gcc.dg/vect/section-anchors-vect-72.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b17a01caa4e85f6ed8370ad4325774ecd48803e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-72.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b17a01caa4e85f6ed8370ad4325774ecd48803e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-72.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-72.c?ref=5b17a01caa4e85f6ed8370ad4325774ecd48803e", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target section_anchors } */\n+/* { dg-require-effective-target vect_int } */\n+\n+#define N 32\n+\n+/* Clone of section-anchors-vect-70.c having nested struct.  */\n+\n+struct S\n+{\n+  int e[N];\n+};\n+\n+static struct A {\n+  int p1, p2;\n+  struct S s; \n+} a, b, c;\n+\n+int foo(void)\n+{\n+  for (int i = 0; i < N; i++)\n+    a.s.e[i] = b.s.e[i] + c.s.e[i];\n+\n+   return a.s.e[0];\n+}\n+\n+/* { dg-final { scan-ipa-dump-times \"Increasing alignment of decl\" 0 \"increase_alignment\" { target aarch64*-*-* } } } */\n+/* { dg-final { scan-ipa-dump-times \"Increasing alignment of decl\" 0 \"increase_alignment\" { target powerpc64*-*-* } } } */\n+/* { dg-final { scan-ipa-dump-times \"Increasing alignment of decl\" 3 \"increase_alignment\" { target arm*-*-* } } } */"}]}