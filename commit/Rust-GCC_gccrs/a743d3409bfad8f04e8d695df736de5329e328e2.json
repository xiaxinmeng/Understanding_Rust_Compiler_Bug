{"sha": "a743d3409bfad8f04e8d695df736de5329e328e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc0M2QzNDA5YmZhZDhmMDRlOGQ2OTVkZjczNmRlNTMyOWUzMjhlMg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-07-08T08:52:32Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-07-08T08:52:32Z"}, "message": "Add node describing spec files.\n\nFrom-SVN: r28005", "tree": {"sha": "c8d2518888050b9c3cf46e3521b2ec11c59b7502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8d2518888050b9c3cf46e3521b2ec11c59b7502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a743d3409bfad8f04e8d695df736de5329e328e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a743d3409bfad8f04e8d695df736de5329e328e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a743d3409bfad8f04e8d695df736de5329e328e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a743d3409bfad8f04e8d695df736de5329e328e2/comments", "author": null, "committer": null, "parents": [{"sha": "ec4b2ecbe658403ba07827a524ee8ca35acb2163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4b2ecbe658403ba07827a524ee8ca35acb2163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4b2ecbe658403ba07827a524ee8ca35acb2163"}], "stats": {"total": 428, "additions": 428, "deletions": 0}, "files": [{"sha": "88977e963b66c6e8dfc593133be8156eb8fa3846", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a743d3409bfad8f04e8d695df736de5329e328e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a743d3409bfad8f04e8d695df736de5329e328e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a743d3409bfad8f04e8d695df736de5329e328e2", "patch": "@@ -1,3 +1,8 @@\n+Thu Jul  8 16:50:14 1999  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* invoke.texi (Spec Files): New node: Describe the contents of\n+\tspec files.\n+\n Thu Jul  8 10:28:25 1999  Craig Burley  <craig@jcb-sc.com>\n \n \t* invoke.texi (DEC Alpha Options): Put @end table at"}, {"sha": "4f5c2eee9c7ba02b4fa17e02389093dd265139a9", "filename": "gcc/invoke.texi", "status": "modified", "additions": 423, "deletions": 0, "changes": 423, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a743d3409bfad8f04e8d695df736de5329e328e2/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a743d3409bfad8f04e8d695df736de5329e328e2/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=a743d3409bfad8f04e8d695df736de5329e328e2", "patch": "@@ -68,6 +68,7 @@ only one of these two forms, whichever one is not the default.\n * Link Options::        Specifying libraries and so on.\n * Directory Options::   Where to find header files and libraries.\n                         Where to find the compiler executable files.\n+* Spec Files::          How to pass switches to sub-processes.\n * Target Options::      Running a cross-compiler, or an old version of GNU CC.\n * Submodel Options::    Specifying minor hardware or convention variations,\n                         such as 68010 vs 68020.\n@@ -447,6 +448,7 @@ in the following sections.\n * Link Options::        Specifying libraries and so on.\n * Directory Options::   Where to find header files and libraries.\n                         Where to find the compiler executable files.\n+* Spec Files::          How to pass switches to sub-processes.\n * Target Options::      Running a cross-compiler, or an old version of GNU CC.\n @end menu\n \n@@ -2989,6 +2991,427 @@ program uses when determining what switches to pass to @file{cc1},\n are processed in order, from left to right.\n @end table\n \n+@node Spec Files\n+@section Specifying subprocesses and the switches to pass to them\n+@cindex Spec Files\n+@code{GCC} is a driver program.  It performs its job by invoking a\n+sequence of other programs to do the work of compiling, assembling and\n+linking.  GCC interprets its command-line parameters and uses these to\n+deduce which programs it should invoke, and which command-line options\n+it ought to place on their command lines.  This behaviour is controlled\n+by @dfn{spec strings}.  In most cases there is one spec string for each\n+program that GCC can invoke, but a few programs have multiple spec\n+strings to control their behaviour.  The spec strings built into GCC can\n+be overridden by using the @samp{-specs=} command-line switch to specify\n+a spec file.\n+\n+@dfn{Spec files} are plaintext files that are used to construct spec\n+strings.  They consist of a sequence of directives separated by blank\n+lines.  The type of directive is determined by the first non-whitespace\n+character on the line and it can be one of the following:\n+\n+@table @code\n+@item %@var{command}\n+Issues a @var{command} to the spec file processor.  The commands that can\n+appear here are: \n+\n+@table @code\n+@item %include <@var{file}>\n+@cindex %include\n+Search for @var{file} and insert its text at the current point in the\n+specs file.\n+\n+@item %include_noerr <@var{file}>\n+@cindex %include_noerr\n+Just like @samp{%include}, but do not generate an error message if the include\n+file cannot be found.\n+\n+@item %rename @var{old_name} @var{new_name}\n+@cindex %rename\n+Rename the spec string @var{old_name} to @var{new_name}.\n+\n+@end table\n+\n+@item *[@var{spec_name}]:\n+This tells the compiler to create, override or delete the named spec\n+string.  All lines after this directive up to the next directive or\n+blank line are considered to be the text for the spec string.  If this\n+results in an empty string then the spec will be deleted.  (Or, if the\n+spec did not exist, then nothing will happened.)  Otherwise, if the spec\n+does not currently exist a new spec will be created.  If the spec does\n+exist then its contents will be overridden by the text of this\n+directive, unless the first character of that text is the @samp{+}\n+character, in which case the text will be appended to the spec.\n+\n+@item [@var{suffix}]:\n+Creates a new @samp{[@var{suffix}] spec} pair.  All lines after this directive\n+and up to the next directive or blank line are considered to make up the\n+spec string for the indicated suffix.  When the compiler encounters an \n+input file with the named suffix, it will processes the spec string in\n+order to work out how to compile that file.  For example:\n+\n+@smallexample\n+.ZZ:\n+z-compile -input %i\n+@end smallexample\n+\n+This says that any input file whose name ends in @samp{.ZZ} should be\n+passed to the program @samp{z-compile}, which should be invoked with the\n+command-line switch @samp{-input} and with the result of performing the\n+@samp{%i} substitution.  (See below.)\n+\n+As an alternative to providing a spec string, the text that follows a\n+suffix directive can be one of the following:\n+\n+@table @code\n+@item @@@var{language}\n+This says that the suffix is an alias for a known @var{language}.  This is\n+similar to using the @code{-x} command-line switch to GCC to specify a\n+language explicitly.  For example:\n+\n+@smallexample\n+.ZZ:\n+@@c++\n+@end smallexample\n+\n+Says that .ZZ files are, in fact, C++ source files.\n+\n+@item #@var{name}\n+This causes an error messages saying:\n+\n+@smallexample\n+@var{name} compiler not installed on this system.\n+@end smallexample\n+@end table\n+\n+GCC already has an extensive list of suffixes built into it.\n+This directive will add an entry to the end of the list of suffixes, but\n+since the list is searched from the end backwards, it is effectively\n+possible to override earlier entries using this technique.\n+\n+@end table\n+\n+GCC has the following spec strings built into it.  Spec files can\n+override these strings or create their own.  Note that individual\n+targets can also add their own spec strings to this list. \n+\n+@smallexample\n+asm          Options to pass to the assembler\n+asm_final    Options to pass to the assembler post-processor\n+cpp          Options to pass to the C preprocessor\n+cc1          Options to pass to the C compiler\n+cc1plus      Options to pass to the C++ compiler\n+endfile      Object files to include at the end of the link\n+link         Options to pass to the linker\n+lib          Libraries to include on the command line to the linker\n+libgcc       Decides which GCC support library to pass to the linker\n+linker       Sets the name of the linker\n+predefines   Defines to be passed to the C preprocessor\n+signed_char  Defines to pass to CPP to say whether @code{char} is signed by default\n+startfile    Object files to include at the start of the link\n+@end smallexample\n+\n+Here is a small example of a spec file:\n+\n+@smallexample\n+%rename lib                 old_lib\n+\n+*lib:\n+--start-group -lgcc -lc -leval1 --end-group %(old_lib)\n+@end smallexample\n+\n+This example renames the spec called @samp{lib} to @samp{old_lib} and\n+then overrides the previous definition of @samp{lib} with a new one.\n+The new definition adds in some extra command-line options before\n+including the text of the old definition.\n+\n+@dfn{Spec strings} are a list of command-line options to be passed to their\n+corresponding program.  In addition, the spec strings can contain\n+@samp{%}-prefixed sequences to substitute variable text or to\n+conditionally insert text into the command line.  Using these constructs\n+it is possible to generate quite complex command lines.\n+\n+Here is a table of all defined @samp{%}-sequences for spec\n+strings.  Note that spaces are not generated automatically around the\n+results of expanding these sequences.  Therefore you can concatenate them\n+together or combine them with constant text in a single argument. \n+\n+@table @code\n+@item %%\n+Substitute one @samp{%} into the program name or argument.\n+\n+@item %i\n+Substitute the name of the input file being processed.\n+\n+@item %b\n+Substitute the basename of the input file being processed.\n+This is the substring up to (and not including) the last period\n+and not including the directory.\n+\n+@item %d\n+Marks the argument containing or following the @samp{%d} as a\n+temporary file name, so that that file will be deleted if GCC exits\n+successfully.  Unlike @samp{%g}, this contributes no text to the\n+argument. \n+\n+@item %g@var{suffix}\n+Substitute a file name that has suffix @var{suffix} and is chosen\n+once per compilation, and mark the argument in the same way as\n+@samp{%d}.  To reduce exposure to denial-of-service attacks, the file\n+name is now chosen in a way that is hard to predict even when previously \n+chosen file names are known.  For example, @samp{%g.s ... %g.o ... %g.s}\n+might turn into @samp{ccUVUUAU.s ccXYAXZ12.o ccUVUUAU.s}.  @var{suffix} matches\n+the regexp @samp{[.A-Za-z]*} or the special string @samp{%O}, which is\n+treated exactly as if @samp{%O} had been preprocessed.  Previously, @samp{%g}\n+was simply substituted with a file name chosen once per compilation,\n+without regard to any appended suffix (which was therefore treated\n+just like ordinary text), making such attacks more likely to succeed.\n+\n+@item %u@var{suffix}\n+Like @samp{%g}, but generates a new temporary file name even if\n+@samp{%u@var{suffix}} was already seen.\n+\n+@item %U@var{suffix}\n+Substitutes the last file name generated with @samp{%u@var{suffix}}, generating a\n+new one if there is no such last file name.  In the absence of any\n+@samp{%u@var{suffix}}, this is just like @samp{%g@var{suffix}}, except they don't share\n+the same suffix @emph{space}, so @samp{%g.s ... %U.s ... %g.s ... %U.s}\n+would involve the generation of two distinct file names, one\n+for each @samp{%g.s} and another for each @samp{%U.s}.  Previously, @samp{%U} was\n+simply substituted with a file name chosen for the previous @samp{%u},\n+without regard to any appended suffix.\n+\n+@item %w\n+Marks the argument containing or following the @samp{%w} as the\n+designated output file of this compilation.  This puts the argument\n+into the sequence of arguments that @samp{%o} will substitute later.\n+\n+@item %o\n+Substitutes the names of all the output files, with spaces\n+automatically placed around them.  You should write spaces\n+around the @samp{%o} as well or the results are undefined.\n+@samp{%o} is for use in the specs for running the linker.\n+Input files whose names have no recognized suffix are not compiled\n+at all, but they are included among the output files, so they will\n+be linked.\n+\n+@item %O\n+Substitutes the suffix for object files.  Note that this is\n+handled specially when it immediately follows @samp{%g, %u, or %U},\n+because of the need for those to form complete file names.  The\n+handling is such that @samp{%O} is treated exactly as if it had already\n+been substituted, except that @samp{%g, %u, and %U} do not currently\n+support additional @var{suffix} characters following @samp{%O} as they would\n+following, for example, @samp{.o}.\n+\n+@item %p\n+Substitutes the standard macro predefinitions for the\n+current target machine.  Use this when running @code{cpp}.\n+\n+@item %P\n+Like @samp{%p}, but puts @samp{__} before and after the name of each\n+predefined macro, except for macros that start with @samp{__} or with\n+@samp{_@var{L}}, where @var{L} is an uppercase letter.  This is for ANSI\n+C.  \n+\n+@item %I\n+Substitute a @samp{-iprefix} option made from GCC_EXEC_PREFIX.\n+\n+@item %s\n+Current argument is the name of a library or startup file of some sort.\n+Search for that file in a standard list of directories and substitute\n+the full name found. \n+\n+@item %e@var{str}\n+Print @var{str} as an error message.  @var{str} is terminated by a newline.\n+Use this when inconsistent options are detected.\n+\n+@item %|\n+Output @samp{-} if the input for the current command is coming from a pipe.\n+\n+@item %(@var{name})\n+Substitute the contents of spec string @var{name} at this point.\n+\n+@item %[@var{name}]\n+Like @samp{%(...)} but put @samp{__} around @samp{-D} arguments.\n+\n+@item %x@{@var{option}@}\n+Accumulate an option for @samp{%X}.\n+\n+@item %X\n+Output the accumulated linker options specified by @samp{-Wl} or a @samp{%x}\n+spec string.\n+\n+@item %Y\n+Output the accumulated assembler options specified by @samp{-Wa}.\n+\n+@item %Z\n+Output the accumulated preprocessor options specified by @samp{-Wp}.\n+\n+@item %v1\n+Substitute the major version number of GCC.\n+(For version 2.9.5, this is 2.)\n+\n+@item %v2\n+Substitute the minor version number of GCC.\n+(For version 2.9.5, this is 9.)\n+\n+@item %a\n+Process the @code{asm} spec.  This is used to compute the\n+switches to be passed to the assembler.\n+\n+@item %A\n+Process the @code{asm_final} spec.  This is a spec string for\n+passing switches to an assembler post-processor, if such a program is\n+needed.\n+\n+@item %l\n+Process the @code{link} spec.  This is the spec for computing the\n+command line passed to the linker.  Typically it will make use of the\n+@samp{%L %G %S %D and %E} sequences.\n+\n+@item %D\n+Dump out a @samp{-L} option for each directory that GCC believes might\n+contain startup files.  If the target supports multilibs then the\n+current multilib directory will be prepended to each of these paths. \n+\n+@item %L\n+Process the @code{lib} spec.  This is a spec string for deciding which\n+libraries should be included on the command line to the linker. \n+\n+@item %G\n+Process the @code{libgcc} spec.  This is a spec string for deciding\n+which GCC support library should be included on the command line to the linker. \n+\n+@item %S\n+Process the @code{startfile} spec.  This is a spec for deciding which\n+object files should be the first ones passed to the linker.  Typically\n+this might be a file named @file{crt0.o}. \n+\n+@item %E\n+Process the @code{endfile} spec.  This is a spec string that specifies\n+the last object files that will be passed to the linker.  \n+\n+@item %C\n+Process the @code{cpp} spec.  This is used to construct the arguments\n+to be passed to the C preprocessor.\n+\n+@item %c\n+Process the @code{signed_char} spec.  This is intended to be used\n+to tell cpp whether a char is signed.  It typically has the definition: \n+@smallexample\n+%@{funsigned-char:-D__CHAR_UNSIGNED__@}\n+@end smallexample\n+\n+@item %1\n+Process the @code{cc1} spec.  This is used to construct the options to be\n+passed to the actual C compiler (@samp{cc1}).\n+\n+@item %2\n+Process the @code{cc1plus} spec.  This is used to construct the options to be\n+passed to the actual C++ compiler (@samp{cc1plus}).\n+\n+@item %*\n+Substitute the variable part of a matched option.  See below.\n+Note that each comma in the substituted string is replaced by\n+a single space.\n+\n+@item %@{@code{S}@}\n+Substitutes the @code{-S} switch, if that switch was given to GCC.\n+If that switch was not specified, this substitutes nothing.  Note that\n+the leading dash is omitted when specifying this option, and it is\n+automatically inserted if the substitution is performed.  Thus the spec\n+string @samp{%@{foo@}} would match the command-line option @samp{-foo}\n+and would output the command line option @samp{-foo}.\n+\n+@item %W@{@code{S}@}\n+Like %@{@code{S}@} but mark last argument supplied within as a file to be\n+deleted on failure. \n+\n+@item %@{@code{S}*@}\n+Substitutes all the switches specified to GCC whose names start\n+with @code{-S}, but which also take an argument.  This is used for\n+switches like @samp{-o, -D, -I}, etc.  GCC considers @samp{-o foo} as being\n+one switch whose names starts with @samp{o}.  %@{o*@} would substitute this\n+text, including the space.  Thus two arguments would be generated. \n+\n+@item %@{^@code{S}*@}\n+Like %@{@code{S}*@}, but don't put a blank between a switch and its\n+argument.  Thus %@{^o*@} would only generate one argument, not two.\n+\n+@item %@{@code{S}*:@code{X}@}\n+Substitutes @code{X} if one or more switches whose names start with\n+@code{-S} are specified to GCC.  Note that the tail part of the\n+@code{-S} option (i.e. the part matched by the @samp{*}) will be substituted\n+for each occurrence of @samp{%*} within @code{X}. \n+\n+@item %@{@code{S}:@code{X}@}\n+Substitutes @code{X}, but only if the @samp{-S} switch was given to GCC.\n+\n+@item %@{!@code{S}:@code{X}@}\n+Substitutes @code{X}, but only if the @samp{-S} switch was @emph{not} given to GCC.\n+\n+@item %@{|@code{S}:@code{X}@}\n+Like %@{@code{S}:@code{X}@}, but if no @code{S} switch, substitute @samp{-}.\n+\n+@item %@{|!@code{S}:@code{X}@}\n+Like %@{!@code{S}:@code{X}@}, but if there is an @code{S} switch, substitute @samp{-}.\n+\n+@item %@{.@code{S}:@code{X}@}\n+Substitutes @code{X}, but only if processing a file with suffix @code{S}.\n+\n+@item %@{!.@code{S}:@code{X}@}\n+Substitutes @code{X}, but only if @emph{not} processing a file with suffix @code{S}.\n+\n+@item %@{@code{S}|@code{P}:@code{X}@}\n+Substitutes @code{X} if either @code{-S} or @code{-P} was given to GCC.  This may be\n+combined with @samp{!} and @samp{.} sequences as well, although they\n+have a stronger binding than the @samp{|}.  For example a spec string\n+like this:\n+\n+@smallexample\n+%@{.c:-foo@} %@{!.c:-bar@} %@{.c|d:-baz@} %@{!.c|d:-boggle@}\n+@end smallexample\n+\n+will output the following command-line options from the following input\n+command-line options:\n+\n+@smallexample\n+fred.c        -foo -baz\n+jim.d         -bar -boggle\n+-d fred.c     -foo -baz -boggle\n+-d jim.d      -bar -baz -boggle\n+@end smallexample\n+\n+@end table\n+\n+The conditional text @code{X} in a %@{@code{S}:@code{X}@} or\n+%@{!@code{S}:@code{X}@} construct may contain other nested @samp{%} constructs\n+or spaces, or even newlines.  They are processed as usual, as described\n+above. \n+\n+The @samp{-O, -f, -m, and -W} switches are handled specifically in these\n+constructs.  If another value of @samp{-O} or the negated form of a @samp{-f, -m, or\n+-W} switch is found later in the command line, the earlier switch\n+value is ignored, except with @{@code{S}*@} where @code{S} is just one\n+letter, which passes all matching options.\n+\n+The character @samp{|} at the beginning of the predicate text is used to indicate\n+that a command should be piped to the following command, but only if @samp{-pipe}\n+is specified.\n+\n+It is built into GCC which switches take arguments and which do not.\n+(You might think it would be useful to generalize this to allow each\n+compiler's spec to say which switches take arguments.  But this cannot\n+be done in a consistent fashion.  GCC cannot even decide which input\n+files have been specified without knowing which switches take arguments,\n+and it must know which input files to compile in order to tell which\n+compilers to run). \n+\n+GCC also knows implicitly that arguments starting in @samp{-l} are to be\n+treated as compiler output files, and passed to the linker in their\n+proper position among the other output files.\n+\n @node Target Options\n @section Specifying Target Machine and Compiler Version\n @cindex target options"}]}