{"sha": "e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf", "node_id": "C_kwDOANBUbNoAKGUxYTkxNjgxNTNkMmJmMTI2OTU4NDRhOWNhOWY5ZmMxZGU4ZDFkZGY", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-08-05T23:45:41Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-08-05T23:45:41Z"}, "message": "New warning: -Wanalyzer-jump-through-null [PR105947]\n\nThis patch adds a new warning to -fanalyzer for jumps through NULL\nfunction pointers.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/105947\n\t* analyzer.opt (Wanalyzer-jump-through-null): New option.\n\t* engine.cc (class jump_through_null): New.\n\t(exploded_graph::process_node): Complain about jumps through NULL\n\tfunction pointers.\n\ngcc/ChangeLog:\n\tPR analyzer/105947\n\t* doc/invoke.texi: Add -Wanalyzer-jump-through-null.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/105947\n\t* gcc.dg/analyzer/function-ptr-5.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "1ec0493d1273a4b4e8abaf2ee23d13be64ffffc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ec0493d1273a4b4e8abaf2ee23d13be64ffffc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc01a27db5411a4fe354a97b7c86703c5bc81243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc01a27db5411a4fe354a97b7c86703c5bc81243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc01a27db5411a4fe354a97b7c86703c5bc81243"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "c6d9c53d9c3eb1aacdcf81f354c5d4e4b6189a32", "filename": "gcc/analyzer/analyzer.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf/gcc%2Fanalyzer%2Fanalyzer.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf/gcc%2Fanalyzer%2Fanalyzer.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.opt?ref=e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf", "patch": "@@ -98,6 +98,10 @@ Wanalyzer-free-of-non-heap\n Common Var(warn_analyzer_free_of_non_heap) Init(1) Warning\n Warn about code paths in which a non-heap pointer is freed.\n \n+Wanalyzer-jump-through-null\n+Common Var(warn_analyzer_jump_through_null) Init(1) Warning\n+Warn about code paths in which a NULL function pointer is called.\n+\n Wanalyzer-malloc-leak\n Common Var(warn_analyzer_malloc_leak) Init(1) Warning\n Warn about code paths in which a heap-allocated pointer leaks."}, {"sha": "e8db00d7e18fa6001350c3feb3cf96804813b0f0", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf", "patch": "@@ -3705,6 +3705,46 @@ class impl_path_context : public path_context\n   bool m_terminate_path;\n };\n \n+/* A subclass of pending_diagnostic for complaining about jumps through NULL\n+   function pointers.  */\n+\n+class jump_through_null : public pending_diagnostic_subclass<jump_through_null>\n+{\n+public:\n+  jump_through_null (const gcall *call)\n+  : m_call (call)\n+  {}\n+\n+  const char *get_kind () const final override\n+  {\n+    return \"jump_through_null\";\n+  }\n+\n+  bool operator== (const jump_through_null &other) const\n+  {\n+    return m_call == other.m_call;\n+  }\n+\n+  int get_controlling_option () const final override\n+  {\n+    return OPT_Wanalyzer_jump_through_null;\n+  }\n+\n+  bool emit (rich_location *rich_loc) final override\n+  {\n+    return warning_at (rich_loc, get_controlling_option (),\n+\t\t       \"jump through null pointer\");\n+  }\n+\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n+  {\n+    return ev.formatted_print (\"jump through null pointer here\");\n+  }\n+\n+private:\n+  const gcall *m_call;\n+};\n+\n /* The core of exploded_graph::process_worklist (the main analysis loop),\n    handling one node in the worklist.\n \n@@ -4046,6 +4086,15 @@ exploded_graph::process_node (exploded_node *node)\n \t\t\t\t\t\t\t       logger);\n \t\tif (!call_discovered)\n \t\t  {\n+\t\t    /* Check for jump through NULL.  */\n+\t\t    if (tree fn_ptr = gimple_call_fn (call))\n+\t\t      {\n+\t\t\tconst svalue *fn_ptr_sval\n+\t\t\t  = model->get_rvalue (fn_ptr, &ctxt);\n+\t\t\tif (fn_ptr_sval->all_zeroes_p ())\n+\t\t\t  ctxt.warn (new jump_through_null (call));\n+\t\t      }\n+\n \t\t    /* An unknown function or a special function was called\n \t\t       at this point, in such case, don't terminate the\n \t\t       analysis of the current function."}, {"sha": "92f7aaead74f10e8235a79016367d4dbe88f20eb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf", "patch": "@@ -453,6 +453,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-analyzer-fd-use-without-check @gol\n -Wno-analyzer-file-leak @gol\n -Wno-analyzer-free-of-non-heap @gol\n+-Wno-analyzer-jump-through-null @gol\n -Wno-analyzer-malloc-leak @gol\n -Wno-analyzer-mismatching-deallocation @gol\n -Wno-analyzer-null-argument @gol\n@@ -9756,6 +9757,7 @@ Enabling this option effectively enables the following warnings:\n -Wanalyzer-fd-use-without-check @gol\n -Wanalyzer-file-leak @gol\n -Wanalyzer-free-of-non-heap @gol\n+-Wanalyzer-jump-through-null @gol\n -Wanalyzer-malloc-leak @gol\n -Wanalyzer-mismatching-deallocation @gol\n -Wanalyzer-null-argument @gol\n@@ -9942,6 +9944,16 @@ is called on a non-heap pointer (e.g. an on-stack buffer, or a global).\n \n See @uref{https://cwe.mitre.org/data/definitions/590.html, CWE-590: Free of Memory not on the Heap}.\n \n+@item -Wno-analyzer-jump-through-null\n+@opindex Wanalyzer-jump-through-null\n+@opindex Wno-analyzer-jump-through-null\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-jump-through-null}\n+to disable it.\n+\n+This diagnostic warns for paths through the code in which a @code{NULL}\n+function pointer is called.\n+\n @item -Wno-analyzer-malloc-leak\n @opindex Wanalyzer-malloc-leak\n @opindex Wno-analyzer-malloc-leak"}, {"sha": "3c46f2890821f3117b1a687777ad9ace18e4d30b", "filename": "gcc/testsuite/gcc.dg/analyzer/function-ptr-5.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffunction-ptr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffunction-ptr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffunction-ptr-5.c?ref=e1a9168153d2bf12695844a9ca9f9fc1de8d1ddf", "patch": "@@ -0,0 +1,42 @@\n+#define NULL ((void *)0)\n+\n+void calling_null_fn_ptr_1 (void)\n+{\n+  void (*fn_ptr) (void) = NULL;\n+  fn_ptr (); /* { dg-warning \"jump through null pointer\" } */\n+}\n+\n+int calling_null_fn_ptr_2 (void)\n+{\n+  int (*fn_ptr) (void) = NULL;\n+  return fn_ptr (); /* { dg-warning \"jump through null pointer\" } */\n+}\n+\n+typedef void (*void_void_fn_ptr) (void);\n+\n+void calling_const_fn_ptr (void)\n+{\n+  void_void_fn_ptr fn_ptr = (void_void_fn_ptr)0xffd2;\n+  return fn_ptr ();\n+}\n+\n+void skipping_init (int flag)\n+{\n+  void_void_fn_ptr fn_ptr = NULL;\n+  if (flag) /* { dg-message \"branch\" } */\n+    fn_ptr = (void_void_fn_ptr)0xffd2;\n+  fn_ptr (); /* { dg-warning \"jump through null pointer\" } */\n+}\n+\n+struct callbacks\n+{\n+  void_void_fn_ptr on_redraw;\n+  void_void_fn_ptr on_cleanup;  \n+};\n+\n+void test_callbacks (void)\n+{\n+  struct callbacks cb;\n+  __builtin_memset (&cb, 0, sizeof (cb));\n+  cb.on_cleanup (); /* { dg-warning \"jump through null pointer\" } */\n+}"}]}