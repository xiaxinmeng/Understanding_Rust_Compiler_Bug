{"sha": "1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg1M2Y1Yzc3ZjEyNGQ2MGQ2MGZjYzA4NTliNzQyZDIyY2Q0ZDVjMA==", "commit": {"author": {"name": "Sebastian Peryt", "email": "sebastian.peryt@intel.com", "date": "2017-05-02T13:07:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-02T13:07:12Z"}, "message": "* config/i386/avx512fintrin.h (_mm_mask_add_round_sd)\n\t(_mm_maskz_add_round_sd, _mm_mask_add_round_ss)\n\t(mm_maskz_add_round_ss, _mm_mask_sub_round_sd)\n\t(mm_maskz_sub_round_sd, _mm_mask_sub_round_ss)\n\t(mm_maskz_sub_round_ss, _mm_mask_add_sd)\n\t(mm_maskz_add_sd, _mm_mask_add_ss, _mm_maskz_add_ss)\n\t(mm_mask_sub_sd, _mm_maskz_sub_sd, _mm_mask_sub_ss)\n\t(mm_maskz_sub_ss): New intrinsics.\n\t* config/i386/i386-builtin-types.def (V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n\t(V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT): New function type aliases.\n\t* config/i386/i386-builtin.def (__builtin_ia32_addsd_mask_round)\n\t(__builtin_ia32_addss_mask_round, __builtin_ia32_subsd_mask_round)\n\t(__builtin_ia32_subss_mask_round): New builtins.\n\t* config/i386/i386.c (V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n\t(V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT): Handle new types.\n\t* config/i386/sse.md (<sse>_vm<plusminus_insn><mode>3<round_name>):\n\tRenamed to ...\n\t(<sse>_vm<plusminus_insn><mode>3<mask_name><round_name>): ... this.\n\t(v<plusminus_mnemonic><ssescalarmodesuffix>\\t{<round_op3>%2, %1, %0|%0, %1, %<iptr>2<round_op3>}):\n\tChanged to ...\n\t(v<plusminus_mnemonic><ssescalarmodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}):\n\t... this.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512f-vaddsd-1.c (_mm_mask_add_sd)\n\t(_mm_maskz_add_sd, _mm_mask_add_round_sd)\n\t(_mm_maskz_add_round_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vaddsd-2.c: New.\n\t* gcc.target/i386/avx512f-vaddss-1.c (_mm_mask_add_ss)\n\t(_mm_maskz_add_ss, _mm_mask_add_round_ss)\n\t(_mm_maskz_add_round_ss): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vaddss-2.c: New.\n\t* gcc.target/i386/avx512f-vsubsd-1.c (_mm_mask_sub_sd)\n\t(_mm_maskz_sub_sd, _mm_mask_sub_round_sd)\n\t(_mm_maskz_sub_round_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vsubsd-2.c: New.\n\t* gcc.target/i386/avx512f-vsubss-1.c (_mm_mask_sub_ss)\n\t(_mm_maskz_sub_ss, _mm_mask_sub_round_ss)\n\t(_mm_maskz_sub_round_ss): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vsubss-2.c: New.\n\t* gcc.target/i386/avx-1.c (__builtin_ia32_addsd_mask_round)\n\t(__builtin_ia32_addss_mask_round, __builtin_ia32_subsd_mask_round)\n\t(__builtin_ia32_subss_mask_round): Test new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c (_mm_maskz_add_round_sd)\n\t(_mm_maskz_add_round_ss, _mm_maskz_sub_round_sd)\n\t(_mm_maskz_sub_round_ss, _mm_mask_add_round_sd)\n\t(_mm_mask_add_round_ss, _mm_mask_sub_round_sd)\n\t(_mm_mask_sub_round_ss): Test new intrinsics.\n\t* gcc.target/i386/testround-1.c: Ditto.\n\nFrom-SVN: r247498", "tree": {"sha": "b3a11c3ddc3947ee29e4fef4b78f881031120882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3a11c3ddc3947ee29e4fef4b78f881031120882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/comments", "author": {"login": "speryt", "id": 44768132, "node_id": "MDQ6VXNlcjQ0NzY4MTMy", "avatar_url": "https://avatars.githubusercontent.com/u/44768132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/speryt", "html_url": "https://github.com/speryt", "followers_url": "https://api.github.com/users/speryt/followers", "following_url": "https://api.github.com/users/speryt/following{/other_user}", "gists_url": "https://api.github.com/users/speryt/gists{/gist_id}", "starred_url": "https://api.github.com/users/speryt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/speryt/subscriptions", "organizations_url": "https://api.github.com/users/speryt/orgs", "repos_url": "https://api.github.com/users/speryt/repos", "events_url": "https://api.github.com/users/speryt/events{/privacy}", "received_events_url": "https://api.github.com/users/speryt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bba75411e14cdf1ee67f4ee965665cf6c6c6ea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bba75411e14cdf1ee67f4ee965665cf6c6c6ea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bba75411e14cdf1ee67f4ee965665cf6c6c6ea7"}], "stats": {"total": 636, "additions": 630, "deletions": 6}, "files": [{"sha": "9ad9ec00fc20eaeb793f6bcc6106c220c858275d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -1,3 +1,28 @@\n+2017-05-02  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_mm_mask_add_round_sd)\n+\t(_mm_maskz_add_round_sd, _mm_mask_add_round_ss)\n+\t(mm_maskz_add_round_ss, _mm_mask_sub_round_sd)\n+\t(mm_maskz_sub_round_sd, _mm_mask_sub_round_ss)\n+\t(mm_maskz_sub_round_ss, _mm_mask_add_sd)\n+\t(mm_maskz_add_sd, _mm_mask_add_ss, _mm_maskz_add_ss)\n+\t(mm_mask_sub_sd, _mm_maskz_sub_sd, _mm_mask_sub_ss)\n+\t(mm_maskz_sub_ss): New intrinsics.\n+\t* config/i386/i386-builtin-types.def (V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n+\t(V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT): New function type aliases.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_addsd_mask_round)\n+\t(__builtin_ia32_addss_mask_round, __builtin_ia32_subsd_mask_round)\n+\t(__builtin_ia32_subss_mask_round): New builtins.\n+\t* config/i386/i386.c (V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n+\t(V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT): Handle new types.\n+\t* config/i386/sse.md (<sse>_vm<plusminus_insn><mode>3<round_name>):\n+\tRenamed to ...\n+\t(<sse>_vm<plusminus_insn><mode>3<mask_name><round_name>): ... this.\n+\t(v<plusminus_mnemonic><ssescalarmodesuffix>\\t{<round_op3>%2, %1, %0|%0, %1, %<iptr>2<round_op3>}):\n+\tChanged to ...\n+\t(v<plusminus_mnemonic><ssescalarmodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}):\n+\t... this.\n+\n 2017-05-02  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/78687"}, {"sha": "15573c574091794b532382dd143c404cbedb40f0", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -1415,6 +1415,29 @@ _mm_add_round_sd (__m128d __A, __m128d __B, const int __R)\n \t\t\t\t\t       __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_add_round_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t  __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_addsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_add_round_sd (__mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128d) __builtin_ia32_addsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df)\n+\t\t\t\t\t\t _mm_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_add_round_ss (__m128 __A, __m128 __B, const int __R)\n@@ -1424,6 +1447,29 @@ _mm_add_round_ss (__m128 __A, __m128 __B, const int __R)\n \t\t\t\t\t      __R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_add_round_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t  __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_addss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_add_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128) __builtin_ia32_addss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf)\n+\t\t\t\t\t\t _mm_setzero_ps (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sub_round_sd (__m128d __A, __m128d __B, const int __R)\n@@ -1433,6 +1479,29 @@ _mm_sub_round_sd (__m128d __A, __m128d __B, const int __R)\n \t\t\t\t\t       __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sub_round_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t  __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_subsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sub_round_sd (__mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128d) __builtin_ia32_subsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df)\n+\t\t\t\t\t\t _mm_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sub_round_ss (__m128 __A, __m128 __B, const int __R)\n@@ -1442,18 +1511,66 @@ _mm_sub_round_ss (__m128 __A, __m128 __B, const int __R)\n \t\t\t\t\t      __R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sub_round_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t  __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_subss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sub_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128) __builtin_ia32_subss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf)\n+\t\t\t\t\t\t _mm_setzero_ps (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n #else\n #define _mm_add_round_sd(A, B, C)            \\\n     (__m128d)__builtin_ia32_addsd_round(A, B, C)\n \n+#define _mm_mask_add_round_sd(W, U, A, B, C) \\\n+    (__m128d)__builtin_ia32_addsd_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_add_round_sd(U, A, B, C)   \\\n+    (__m128d)__builtin_ia32_addsd_mask_round(A, B, (__v2df)_mm_setzero_pd(), U, C)\n+\n #define _mm_add_round_ss(A, B, C)            \\\n     (__m128)__builtin_ia32_addss_round(A, B, C)\n \n+#define _mm_mask_add_round_ss(W, U, A, B, C) \\\n+    (__m128)__builtin_ia32_addss_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_add_round_ss(U, A, B, C)   \\\n+    (__m128)__builtin_ia32_addss_mask_round(A, B, (__v4sf)_mm_setzero_ps(), U, C)\n+\n #define _mm_sub_round_sd(A, B, C)            \\\n     (__m128d)__builtin_ia32_subsd_round(A, B, C)\n \n+#define _mm_mask_sub_round_sd(W, U, A, B, C) \\\n+    (__m128d)__builtin_ia32_subsd_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_sub_round_sd(U, A, B, C)   \\\n+    (__m128d)__builtin_ia32_subsd_mask_round(A, B, (__v2df)_mm_setzero_pd(), U, C)\n+\n #define _mm_sub_round_ss(A, B, C)            \\\n     (__m128)__builtin_ia32_subss_round(A, B, C)\n+\n+#define _mm_mask_sub_round_ss(W, U, A, B, C) \\\n+    (__m128)__builtin_ia32_subss_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_sub_round_ss(U, A, B, C)   \\\n+    (__m128)__builtin_ia32_subss_mask_round(A, B, (__v4sf)_mm_setzero_ps(), U, C)\n+\n #endif\n \n #ifdef __OPTIMIZE__\n@@ -10868,6 +10985,52 @@ _mm512_maskz_add_ps (__mmask16 __U, __m512 __A, __m512 __B)\n \t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_add_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_addsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t(__v2df) __B,\n+\t\t\t\t\t\t(__v2df) __W,\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_add_sd (__mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_addsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t(__v2df) __B,\n+\t\t\t\t\t\t(__v2df)\n+\t\t\t\t\t\t_mm_setzero_pd (),\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_add_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_addss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf) __W,\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_add_ss (__mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_addss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf)\n+\t\t\t\t\t\t_mm_setzero_ps (),\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_sub_pd (__m512d __A, __m512d __B)\n@@ -10928,6 +11091,52 @@ _mm512_maskz_sub_ps (__mmask16 __U, __m512 __A, __m512 __B)\n \t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sub_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_subsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t(__v2df) __B,\n+\t\t\t\t\t\t(__v2df) __W,\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sub_sd (__mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_subsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t(__v2df) __B,\n+\t\t\t\t\t\t(__v2df)\n+\t\t\t\t\t\t_mm_setzero_pd (),\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sub_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_subss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf) __W,\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sub_ss (__mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_subss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf)\n+\t\t\t\t\t\t_mm_setzero_ps (),\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mul_pd (__m512d __A, __m512d __B)"}, {"sha": "b3620edd1061b691d6cf0d641370503632192dfe", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -1004,6 +1004,8 @@ DEF_FUNCTION_TYPE (V8DF, V8DI, V8DF, QI, INT)\n DEF_FUNCTION_TYPE (V8SF, V8DI, V8SF, QI, INT)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, V16SF, HI, INT)\n DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, V8DF, UQI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DF, UQI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SF, UQI, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SF, QI, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V2DF, V4SF, QI, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DF, QI, INT)"}, {"sha": "5556f59547797188ca9459803b4a83f09397027b", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -2387,7 +2387,9 @@ BDESC_FIRST (round_args, ROUND_ARGS,\n        OPTION_MASK_ISA_AVX512F, CODE_FOR_addv8df3_mask_round, \"__builtin_ia32_addpd512_mask\", IX86_BUILTIN_ADDPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_addv16sf3_mask_round, \"__builtin_ia32_addps512_mask\", IX86_BUILTIN_ADDPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmaddv2df3_round, \"__builtin_ia32_addsd_round\", IX86_BUILTIN_ADDSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmaddv2df3_mask_round, \"__builtin_ia32_addsd_mask_round\", IX86_BUILTIN_ADDSD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmaddv4sf3_round, \"__builtin_ia32_addss_round\", IX86_BUILTIN_ADDSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmaddv4sf3_mask_round, \"__builtin_ia32_addss_mask_round\", IX86_BUILTIN_ADDSS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_cmpv8df3_mask_round, \"__builtin_ia32_cmppd512_mask\", IX86_BUILTIN_CMPPD512, UNKNOWN, (int) UQI_FTYPE_V8DF_V8DF_INT_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_cmpv16sf3_mask_round, \"__builtin_ia32_cmpps512_mask\", IX86_BUILTIN_CMPPS512, UNKNOWN, (int) UHI_FTYPE_V16SF_V16SF_INT_UHI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vmcmpv2df3_mask_round, \"__builtin_ia32_cmpsd_mask\", IX86_BUILTIN_CMPSD_MASK, UNKNOWN, (int) UQI_FTYPE_V2DF_V2DF_INT_UQI_INT)\n@@ -2462,7 +2464,9 @@ BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsqrtv4sf2_round, \"__builtin_ia32_\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_subv8df3_mask_round, \"__builtin_ia32_subpd512_mask\", IX86_BUILTIN_SUBPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_subv16sf3_mask_round, \"__builtin_ia32_subps512_mask\", IX86_BUILTIN_SUBPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsubv2df3_round, \"__builtin_ia32_subsd_round\", IX86_BUILTIN_SUBSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsubv2df3_mask_round, \"__builtin_ia32_subsd_mask_round\", IX86_BUILTIN_SUBSD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsubv4sf3_round, \"__builtin_ia32_subss_round\", IX86_BUILTIN_SUBSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsubv4sf3_mask_round, \"__builtin_ia32_subss_mask_round\", IX86_BUILTIN_SUBSS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_cvtsd2si_round, \"__builtin_ia32_vcvtsd2si32\", IX86_BUILTIN_VCVTSD2SI32, UNKNOWN, (int) INT_FTYPE_V2DF_INT)\n BDESC (OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, CODE_FOR_sse2_cvtsd2siq_round, \"__builtin_ia32_vcvtsd2si64\", IX86_BUILTIN_VCVTSD2SI64, UNKNOWN, (int) INT64_FTYPE_V2DF_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vcvtsd2usi_round, \"__builtin_ia32_vcvtsd2usi32\", IX86_BUILTIN_VCVTSD2USI32, UNKNOWN, (int) UINT_FTYPE_V2DF_INT)"}, {"sha": "9c429de7f7e3ca38840cf4852b0ffac8088e42cc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -36183,6 +36183,8 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case INT_FTYPE_V2DF_V2DF_INT_INT:\n       return ix86_expand_sse_comi_round (d, exp, target);\n     case V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT:\n+    case V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT:\n+    case V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT:\n     case V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT:\n     case V2DF_FTYPE_V2DF_V2DF_V2DF_QI_INT:\n     case V2DF_FTYPE_V2DF_V4SF_V2DF_QI_INT:"}, {"sha": "98104e4d78192f59092cad762517f1e4b537a5e6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -1568,7 +1568,7 @@\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vm<plusminus_insn><mode>3<round_name>\"\n+(define_insn \"<sse>_vm<plusminus_insn><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (plusminus:VF_128\n@@ -1579,7 +1579,7 @@\n   \"TARGET_SSE\"\n   \"@\n    <plusminus_mnemonic><ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n-   v<plusminus_mnemonic><ssescalarmodesuffix>\\t{<round_op3>%2, %1, %0|%0, %1, %<iptr>2<round_op3>}\"\n+   v<plusminus_mnemonic><ssescalarmodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n    (set_attr \"prefix\" \"<round_prefix>\")"}, {"sha": "d47aa91110f7fa64cfce891c5e0065c0d6a242e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -1,3 +1,33 @@\n+2017-05-02  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vaddsd-1.c (_mm_mask_add_sd)\n+\t(_mm_maskz_add_sd, _mm_mask_add_round_sd)\n+\t(_mm_maskz_add_round_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vaddsd-2.c: New.\n+\t* gcc.target/i386/avx512f-vaddss-1.c (_mm_mask_add_ss)\n+\t(_mm_maskz_add_ss, _mm_mask_add_round_ss)\n+\t(_mm_maskz_add_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vaddss-2.c: New.\n+\t* gcc.target/i386/avx512f-vsubsd-1.c (_mm_mask_sub_sd)\n+\t(_mm_maskz_sub_sd, _mm_mask_sub_round_sd)\n+\t(_mm_maskz_sub_round_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vsubsd-2.c: New.\n+\t* gcc.target/i386/avx512f-vsubss-1.c (_mm_mask_sub_ss)\n+\t(_mm_maskz_sub_ss, _mm_mask_sub_round_ss)\n+\t(_mm_maskz_sub_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vsubss-2.c: New.\n+\t* gcc.target/i386/avx-1.c (__builtin_ia32_addsd_mask_round)\n+\t(__builtin_ia32_addss_mask_round, __builtin_ia32_subsd_mask_round)\n+\t(__builtin_ia32_subss_mask_round): Test new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c (_mm_maskz_add_round_sd)\n+\t(_mm_maskz_add_round_ss, _mm_maskz_sub_round_sd)\n+\t(_mm_maskz_sub_round_ss, _mm_mask_add_round_sd)\n+\t(_mm_mask_add_round_ss, _mm_mask_sub_round_sd)\n+\t(_mm_mask_sub_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/testround-1.c: Ditto.\n+\n 2017-05-02  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/78687"}, {"sha": "e5fe9331c29c4c50deab0a3c146cdfdd8ea3ed19", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -173,7 +173,9 @@\n #define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 8)\n+#define __builtin_ia32_addsd_mask_round(A, B, C, D, E) __builtin_ia32_addsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_addss_round(A, B, C) __builtin_ia32_addss_round(A, B, 8)\n+#define __builtin_ia32_addss_mask_round(A, B, C, D, E) __builtin_ia32_addss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_alignd512_mask(A, B, F, D, E) __builtin_ia32_alignd512_mask(A, B, 1, D, E)\n #define __builtin_ia32_alignq512_mask(A, B, F, D, E) __builtin_ia32_alignq512_mask(A, B, 1, D, E)\n #define __builtin_ia32_cmpd512_mask(A, B, E, D) __builtin_ia32_cmpd512_mask(A, B, 1, D)\n@@ -296,7 +298,9 @@\n #define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 8)\n+#define __builtin_ia32_subsd_mask_round(A, B, C, D, E) __builtin_ia32_subsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_subss_round(A, B, C) __builtin_ia32_subss_round(A, B, 8)\n+#define __builtin_ia32_subss_mask_round(A, B, C, D, E) __builtin_ia32_subss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_ucmpd512_mask(A, B, E, D) __builtin_ia32_ucmpd512_mask(A, B, 1, D)\n #define __builtin_ia32_ucmpq512_mask(A, B, E, D) __builtin_ia32_ucmpq512_mask(A, B, 1, D)\n #define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 8)"}, {"sha": "a0ec08231e8fc097ca6b31756aa291fd6b789bc9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddsd-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-1.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -1,13 +1,22 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vaddsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vaddsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vaddsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d x1, x2;\n+volatile __m128d x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_add_sd (x1, m, x2, x3);\n+  x1 = _mm_maskz_add_sd (m, x1, x2);\n   x1 = _mm_add_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_add_round_sd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_add_round_sd (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "8969d636aaf040512d785c2f32927d07fbdc6936", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddsd-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-2.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (double *r, double *s1, double *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] + s2[i];\n+    }\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, res5, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm_mask_add_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_add_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_add_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_add_round_sd (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_add_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_add (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  if (check_union128d (res3, res_ref))\n+    abort();\n+  \n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (check_union128d (res5, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "fa5f44ec18bba0f8411708d9c73bf41f09a6566c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddss-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-1.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -1,13 +1,22 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vaddss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vaddss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vaddss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddss\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 x1, x2;\n+volatile __m128 x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_add_ss (x1, m, x2, x3);\n+  x1 = _mm_maskz_add_ss (m, x1, x2);\n   x1 = _mm_add_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_add_round_ss (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_add_round_ss (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "49c49c35530bbf7642f6bafd2d30fc67a81d1afe", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddss-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-2.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (float *r, float *s1, float *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] + s2[i];\n+    }\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, res5, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm_mask_add_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_add_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_add_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_add_round_ss (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_add_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_add (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  if (check_union128 (res3, res_ref))\n+    abort();\n+  \n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (check_union128 (res5, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "692350c14ce2e89d1121d6ddc60f7f23e098610b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubsd-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-1.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -1,13 +1,22 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vsubsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vsubsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vsubsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d x1, x2;\n+volatile __m128d x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_sub_sd (x1, m, x2, x3);\n+  x1 = _mm_maskz_sub_sd (m, x1, x2);\n   x1 = _mm_sub_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_sub_round_sd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_sub_round_sd (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "50585e5501da247a8b2baedcf4b00820384e3187", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubsd-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-2.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_sub (double *r, double *s1, double *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] - s2[i];\n+    }\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, res5, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm_mask_sub_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_sub_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_sub_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_sub_round_sd (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_sub_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_sub (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  if (check_union128d (res3, res_ref))\n+    abort();\n+  \n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (check_union128d (res5, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "c144aac623adf6b7c295dad43fcc1a6ea7df422b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubss-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-1.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -1,13 +1,22 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vsubss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vsubss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vsubss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubss\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 x1, x2;\n+volatile __m128 x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_sub_ss (x1, m, x2, x3);\n+  x1 = _mm_maskz_sub_ss (m, x1, x2);\n   x1 = _mm_sub_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_sub_round_ss (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_sub_round_ss (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "60b3e95e50346bf82547e30b38ec8dfbd073707d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubss-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-2.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_sub (float *r, float *s1, float *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] - s2[i];\n+    }\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, res5, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm_mask_sub_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_sub_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_sub_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_sub_round_ss (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_sub_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_sub (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  if (check_union128 (res3, res_ref))\n+    abort();\n+  \n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (check_union128 (res5, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "319da22361fd409a432c7b53e097dc64a988d5c5", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -190,7 +190,9 @@\n #define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 8)\n+#define __builtin_ia32_addsd_mask_round(A, B, C, D, E) __builtin_ia32_addsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_addss_round(A, B, C) __builtin_ia32_addss_round(A, B, 8)\n+#define __builtin_ia32_addss_mask_round(A, B, C, D, E) __builtin_ia32_addss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_alignd512_mask(A, B, F, D, E) __builtin_ia32_alignd512_mask(A, B, 1, D, E)\n #define __builtin_ia32_alignq512_mask(A, B, F, D, E) __builtin_ia32_alignq512_mask(A, B, 1, D, E)\n #define __builtin_ia32_cmpd512_mask(A, B, E, D) __builtin_ia32_cmpd512_mask(A, B, 1, D)\n@@ -313,7 +315,9 @@\n #define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 8)\n+#define __builtin_ia32_subsd_mask_round(A, B, C, D, E) __builtin_ia32_subsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_subss_round(A, B, C) __builtin_ia32_subss_round(A, B, 8)\n+#define __builtin_ia32_subss_mask_round(A, B, C, D, E) __builtin_ia32_subss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_ucmpd512_mask(A, B, E, D) __builtin_ia32_ucmpd512_mask(A, B, 1, D)\n #define __builtin_ia32_ucmpq512_mask(A, B, E, D) __builtin_ia32_ucmpq512_mask(A, B, 1, D)\n #define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 8)"}, {"sha": "4667998b0a4506d4f4cc6982245320affe25dc7b", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -377,7 +377,9 @@ test_3 (_mm512_mask_srai_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n test_3 (_mm512_mask_srli_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n test_3 (_mm512_mask_srli_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n test_3 (_mm512_maskz_add_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm_maskz_add_round_sd, __m128d, __mmask8, __m128d, __m128d, 9)\n test_3 (_mm512_maskz_add_round_ps, __m512, __mmask16, __m512, __m512, 9)\n+test_3 (_mm_maskz_add_round_ss, __m128, __mmask8, __m128, __m128, 9)\n test_3 (_mm512_maskz_alignr_epi32, __m512i, __mmask16, __m512i, __m512i, 1)\n test_3 (_mm512_maskz_alignr_epi64, __m512i, __mmask8, __m512i, __m512i, 1)\n test_3 (_mm512_maskz_div_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n@@ -401,7 +403,9 @@ test_3 (_mm512_maskz_shuffle_i64x2, __m512i, __mmask8, __m512i, __m512i, 1)\n test_3 (_mm512_maskz_shuffle_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n test_3 (_mm512_maskz_shuffle_ps, __m512, __mmask16, __m512, __m512, 1)\n test_3 (_mm512_maskz_sub_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm_maskz_sub_round_sd, __m128d, __mmask8, __m128d, __m128d, 9)\n test_3 (_mm512_maskz_sub_round_ps, __m512, __mmask16, __m512, __m512, 9)\n+test_3 (_mm_maskz_sub_round_ss, __m128, __mmask8, __m128, __m128, 9)\n test_3 (_mm512_ternarylogic_epi32, __m512i, __m512i, __m512i, __m512i, 1)\n test_3 (_mm512_ternarylogic_epi64, __m512i, __m512i, __m512i, __m512i, 1)\n test_3 (_mm_fmadd_round_sd, __m128d, __m128d, __m128d, __m128d, 9)\n@@ -441,7 +445,9 @@ test_4 (_mm512_mask3_fnmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16,\n test_4 (_mm512_mask3_fnmsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n test_4 (_mm512_mask3_fnmsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n test_4 (_mm512_mask_add_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm_mask_add_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n test_4 (_mm512_mask_add_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm_mask_add_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n test_4 (_mm512_mask_alignr_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n test_4 (_mm512_mask_alignr_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n test_4 (_mm512_mask_div_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n@@ -485,7 +491,9 @@ test_4 (_mm512_mask_shuffle_i64x2, __m512i, __m512i, __mmask8, __m512i, __m512i,\n test_4 (_mm512_mask_shuffle_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n test_4 (_mm512_mask_shuffle_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n test_4 (_mm512_mask_sub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm_mask_sub_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n test_4 (_mm512_mask_sub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm_mask_sub_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n test_4 (_mm512_mask_ternarylogic_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n test_4 (_mm512_mask_ternarylogic_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n test_4 (_mm512_maskz_fmadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)"}, {"sha": "92daf96f3696b88b4d82d43454cfc62427be82ea", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -191,7 +191,9 @@\n #define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 8)\n+#define __builtin_ia32_addsd_mask_round(A, B, C, D, E) __builtin_ia32_addsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_addss_round(A, B, C) __builtin_ia32_addss_round(A, B, 8)\n+#define __builtin_ia32_addss_mask_round(A, B, C, D, E) __builtin_ia32_addss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_alignd512_mask(A, B, F, D, E) __builtin_ia32_alignd512_mask(A, B, 1, D, E)\n #define __builtin_ia32_alignq512_mask(A, B, F, D, E) __builtin_ia32_alignq512_mask(A, B, 1, D, E)\n #define __builtin_ia32_cmpd512_mask(A, B, E, D) __builtin_ia32_cmpd512_mask(A, B, 1, D)\n@@ -314,7 +316,9 @@\n #define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 8)\n+#define __builtin_ia32_subsd_mask_round(A, B, C, D, E) __builtin_ia32_subsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_subss_round(A, B, C) __builtin_ia32_subss_round(A, B, 8)\n+#define __builtin_ia32_subss_mask_round(A, B, C, D, E) __builtin_ia32_subss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_ucmpd512_mask(A, B, E, D) __builtin_ia32_ucmpd512_mask(A, B, 1, D)\n #define __builtin_ia32_ucmpq512_mask(A, B, E, D) __builtin_ia32_ucmpq512_mask(A, B, 1, D)\n #define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 8)"}, {"sha": "8cc019b32a4b5a63c70ee949e34950a85e3f06c0", "filename": "gcc/testsuite/gcc.target/i386/testround-1.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853f5c77f124d60d60fcc0859b742d22cd4d5c0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c?ref=1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "patch": "@@ -20,9 +20,17 @@ void\n test_round (void)\n {\n   m128d = _mm_add_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_add_round_sd (m128d, mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_add_round_sd (mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128 = _mm_add_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_add_round_ss (m128, mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_add_round_ss (mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128d = _mm_sub_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_sub_round_sd (m128d, mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_sub_round_sd (mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128 = _mm_sub_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_sub_round_ss (m128, mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_sub_round_ss (mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512d = _mm512_sqrt_round_pd (m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_sqrt_round_pd (m512d, mmask8, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n@@ -263,9 +271,17 @@ void\n test_round_sae (void)\n {\n   m128d = _mm_add_round_sd (m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_add_round_sd (m128d, mmask8, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_add_round_sd (mmask8, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m128 = _mm_add_round_ss (m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_add_round_ss (m128, mmask8, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_add_round_ss (mmask8, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m128d = _mm_sub_round_sd (m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_sub_round_sd (m128d, mmask8, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_sub_round_sd (mmask8, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m128 = _mm_sub_round_ss (m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_sub_round_ss (m128, mmask8, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_sub_round_ss (mmask8, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512d = _mm512_sqrt_round_pd (m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_sqrt_round_pd (m512d, mmask8, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */"}]}