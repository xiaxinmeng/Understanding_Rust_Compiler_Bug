{"sha": "17afc0fe9c02a8fa207c2d0d8519fb5f5c339929", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhZmMwZmU5YzAyYThmYTIwN2MyZDBkODUxOWZiNWY1YzMzOTkyOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-01-07T22:52:54Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-01-07T22:52:54Z"}, "message": "re PR tree-optimization/46367 (ICE during cgraph edge cloning)\n\n\n\tPR tree-optimization/46367\n\t* g++.dg/torture/pr46367.C: New file.\n\t* ipa-inline.c (cgraph_clone_inlined_nodes): Use original function only\n\twhen we can update original.\n\t(cgraph_mark_inline_edge): Sanity check.\n\t* ipa-prop.c (ipa_make_edge_direct_to_target): Sanity check.\n\nFrom-SVN: r168587", "tree": {"sha": "62e093f14bafa3b6cc4c1294ee2d8b83b6769208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62e093f14bafa3b6cc4c1294ee2d8b83b6769208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929/comments", "author": null, "committer": null, "parents": [{"sha": "c12e816f5979685f9ef96e665cc1f752a3e54df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12e816f5979685f9ef96e665cc1f752a3e54df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c12e816f5979685f9ef96e665cc1f752a3e54df9"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "3624c0d7575c2841e75c4610733ffb5ab36d06b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17afc0fe9c02a8fa207c2d0d8519fb5f5c339929", "patch": "@@ -1,3 +1,11 @@\n+2011-01-07  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/46367\n+\t* ipa-inline.c (cgraph_clone_inlined_nodes): Use original function only\n+\twhen we can update original.\n+\t(cgraph_mark_inline_edge): Sanity check.\n+\t* ipa-prop.c (ipa_make_edge_direct_to_target): Sanity check.\n+\n 2011-01-07  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.h (ASM_COMMENT_START): Define."}, {"sha": "116abd6619ae37857e009b33ff78a7ab4d507c51", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=17afc0fe9c02a8fa207c2d0d8519fb5f5c339929", "patch": "@@ -232,6 +232,8 @@ cgraph_clone_inlined_nodes (struct cgraph_edge *e, bool duplicate,\n       /* We may eliminate the need for out-of-line copy to be output.\n \t In that case just go ahead and re-use it.  */\n       if (!e->callee->callers->next_caller\n+\t  /* Recursive inlining never wants the master clone to be overwritten.  */\n+\t  && update_original\n \t  /* FIXME: When address is taken of DECL_EXTERNAL function we still can remove its\n \t     offline copy, but we would need to keep unanalyzed node in the callgraph so\n \t     references can point to it.  */\n@@ -303,7 +305,11 @@ cgraph_mark_inline_edge (struct cgraph_edge *e, bool update_original,\n   struct cgraph_edge *curr = e;\n   int freq;\n \n+  /* Don't inline inlined edges.  */\n   gcc_assert (e->inline_failed);\n+  /* Don't even think of inlining inline clone.  */\n+  gcc_assert (!e->callee->global.inlined_to);\n+\n   e->inline_failed = CIF_OK;\n   DECL_POSSIBLY_INLINED (e->callee->decl) = true;\n \n@@ -863,7 +869,6 @@ cgraph_decide_recursive_inlining (struct cgraph_node *node,\n   master_clone = cgraph_clone_node (node, node->decl,\n \t\t\t\t    node->count, CGRAPH_FREQ_BASE, 1,\n   \t\t\t\t    false, NULL);\n-  master_clone->needed = true;\n   for (e = master_clone->callees; e; e = e->next_callee)\n     if (!e->inline_failed)\n       cgraph_clone_inlined_nodes (e, true, false);"}, {"sha": "106fc231ca725359c51712b5c988f9f44915ff9b", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=17afc0fe9c02a8fa207c2d0d8519fb5f5c339929", "patch": "@@ -1483,6 +1483,10 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target, tree delta)\n     return NULL;\n   ipa_check_create_node_params ();\n \n+  /* We can not make edges to inline clones.  It is bug that someone removed the cgraph\n+     node too early.  */\n+  gcc_assert (!callee->global.inlined_to);\n+\n   cgraph_make_edge_direct (ie, callee, delta ? tree_low_cst (delta, 0) : 0);\n   if (dump_file)\n     {"}, {"sha": "e91432e8dede13bd45a5d8b58ca0679a4bf53190", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17afc0fe9c02a8fa207c2d0d8519fb5f5c339929", "patch": "@@ -1,3 +1,8 @@\n+2011-01-07  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/46367\n+\t* g++.dg/torture/pr46367.C: New file.\n+\n 2011-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/47201"}, {"sha": "260b5c11346faa14f6914bed129639eddc079689", "filename": "gcc/testsuite/g++.dg/torture/pr46367.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46367.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17afc0fe9c02a8fa207c2d0d8519fb5f5c339929/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46367.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr46367.C?ref=17afc0fe9c02a8fa207c2d0d8519fb5f5c339929", "patch": "@@ -0,0 +1,11 @@\n+#pragma interface\n+struct S\n+{\n+  S *s;\n+  ~S ()\n+  {\n+    delete s;\n+  }\n+};\n+\n+S s;"}]}