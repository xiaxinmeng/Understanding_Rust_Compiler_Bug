{"sha": "149604e46a31c3f1a22194e61ba3a0f01903de03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ5NjA0ZTQ2YTMxYzNmMWEyMjE5NGU2MWJhM2EwZjAxOTAzZGUwMw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-05-21T10:45:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-05-21T10:45:27Z"}, "message": "einfo.ads (Can_Never_Be_Null): Minor comment update.\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads (Can_Never_Be_Null): Minor comment update.\n\t* sem_prag.adb (Check_Arg_Is_Task_Dispatching_Policy): Minor\n\terror message change.\n\t* s-arit64.adb (\"abs\"): New function. Use expression functions\n\tfor the simple conversions and arithmetic.\n\nFrom-SVN: r210688", "tree": {"sha": "a3607ec285d7816d97a1bec2ef5a864d7c1ce608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3607ec285d7816d97a1bec2ef5a864d7c1ce608"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/149604e46a31c3f1a22194e61ba3a0f01903de03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149604e46a31c3f1a22194e61ba3a0f01903de03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149604e46a31c3f1a22194e61ba3a0f01903de03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149604e46a31c3f1a22194e61ba3a0f01903de03/comments", "author": null, "committer": null, "parents": [{"sha": "c1c84c5ee3a59f12501b36f64bb6b7dc45dcd1c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c84c5ee3a59f12501b36f64bb6b7dc45dcd1c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c84c5ee3a59f12501b36f64bb6b7dc45dcd1c9"}], "stats": {"total": 192, "additions": 94, "deletions": 98}, "files": [{"sha": "31648c7e5b84db78d94ddfe352f19d999e74b2bf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149604e46a31c3f1a22194e61ba3a0f01903de03/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149604e46a31c3f1a22194e61ba3a0f01903de03/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=149604e46a31c3f1a22194e61ba3a0f01903de03", "patch": "@@ -1,3 +1,11 @@\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads (Can_Never_Be_Null): Minor comment update.\n+\t* sem_prag.adb (Check_Arg_Is_Task_Dispatching_Policy): Minor\n+\terror message change.\n+\t* s-arit64.adb (\"abs\"): New function. Use expression functions\n+\tfor the simple conversions and arithmetic.\n+\n 2014-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Subprogram_Body_to_gnu): Rework comment and"}, {"sha": "a007555d4573df8922936b1ed6d7d7551af4edc0", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149604e46a31c3f1a22194e61ba3a0f01903de03/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149604e46a31c3f1a22194e61ba3a0f01903de03/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=149604e46a31c3f1a22194e61ba3a0f01903de03", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -518,19 +518,19 @@ package Einfo is\n --       Export pragma).\n \n --    Can_Never_Be_Null (Flag38)\n---       This flag is defined in all entities, but can only be set in an object\n---       which can never have a null value. Set for constant access values\n---       initialized to a non-null value. This is also set for all access\n---       parameters in Ada 83 and Ada 95 modes, and for access parameters\n---       that explicitly exclude null in Ada 2005.\n+--       This flag is defined in all entities. It is set in an object which can\n+--       never have a null value. Set for constant access values initialized to\n+--       a non-null value. This is also set for all access parameters in Ada 83\n+--       and Ada 95 modes, and for access parameters that explicitly exclude\n+--       exclude null in Ada 2005 mode.\n --\n --       This is used to avoid unnecessary resetting of the Is_Known_Non_Null\n --       flag for such entities. In Ada 2005 mode, this is also used when\n --       determining subtype conformance of subprogram profiles to ensure\n --       that two formals have the same null-exclusion status.\n --\n---       ??? This is also set on some access types, eg the Etype of the\n---       anonymous access type of a controlling formal.\n+--       This is also set on some access types, e.g. the Etype of the anonymous\n+--       access type of a controlling formal.\n \n --    Can_Use_Internal_Rep (Flag229) [base type only]\n --       Defined in Access_Subprogram_Kind nodes. This flag is set by the\n@@ -4114,6 +4114,54 @@ package Einfo is\n --       Defined in functions and procedures which have been classified as\n --       Is_Primitive_Wrapper. Set to the entity being wrapper.\n \n+---------------------------\n+-- Renaming and aliasing --\n+---------------------------\n+\n+--  Several entity attributes relate to renaming constructs, and to the use\n+--  of different names to refer to the same entity. Here is a summary of\n+--  these constructs and their prefered uses.\n+\n+--  There are three related attributes:\n+--\n+--  Renamed_Entity\n+--  Renamed_Object\n+--  Alias\n+--\n+--  They all overlap because they are supposed to apply to different entity\n+--  kinds, and are semantically related, but they have the following intended\n+--  uses:\n+--\n+--  a) Renamed_Entity appplies to entities in renaming declarations that rename\n+--  an entity, so the value of the attribute IS an entity. This applies to\n+--  generic renamings, package renamings, exception renamings, and subprograms\n+--  renamings that rename a subprogram (rather than an attribute, an entry, a\n+--  protected operation, etc).\n+--\n+--  b) Alias applies to overloadable entities, and the value is an overloadable\n+--  entity. so this is a subset of the previous one. We use the term Alias to\n+--  cover both renamings and inherited operations, because both cases are\n+--  handled in the same way when expanding a call. namely the Alias of a given\n+--  subprogram is the subprogram that will actually be called.\n+\n+--  Both a) and b) are set transitively, so that in fact it is not necessary to\n+--  traverse chains of renamings when looking for the original entity: it's\n+--  there in one step (this is done when analyzing renaming declarations other\n+--  than object renamings in sem_ch8).\n+\n+--  c) Renamed_Object applies to constants and variables. Given that the name\n+--  in an object renaming declaration is not necessarily an entity name, the\n+--  value of the attribute is the tree for that name, eg AR (1).Comp. The case\n+--  when that name is in fact an entity is not handled specially. This is why\n+--  in a few cases we need to use a loop to trace a chain of object renamings\n+--  where all of them happen to be entities. So:\n+\n+--    X : integer;\n+--    Y : integer renames X;   -- renamed object is the identifier X\n+--    Z : integer renames Y;   -- renamed object is the identifier Y\n+\n+--  The front-end does not store explicitly the fact that Z renames X.\n+\n --------------------------------------\n -- Delayed Freezing and Elaboration --\n --------------------------------------"}, {"sha": "d41fc92ed43cb4d138f44629fae543ef93127166", "filename": "gcc/ada/s-arit64.adb", "status": "modified", "additions": 28, "deletions": 88, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149604e46a31c3f1a22194e61ba3a0f01903de03/gcc%2Fada%2Fs-arit64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149604e46a31c3f1a22194e61ba3a0f01903de03/gcc%2Fada%2Fs-arit64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-arit64.adb?ref=149604e46a31c3f1a22194e61ba3a0f01903de03", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,6 +30,7 @@\n ------------------------------------------------------------------------------\n \n with Interfaces; use Interfaces;\n+\n with Ada.Unchecked_Conversion;\n \n package body System.Arith_64 is\n@@ -47,35 +48,42 @@ package body System.Arith_64 is\n    -- Local Subprograms --\n    -----------------------\n \n-   function \"+\" (A, B : Uns32) return Uns64;\n-   function \"+\" (A : Uns64; B : Uns32) return Uns64;\n+   function \"+\" (A, B : Uns32) return Uns64 is (Uns64 (A) + Uns64 (B));\n+   function \"+\" (A : Uns64; B : Uns32) return Uns64 is\n+     (A + Uns64 (B));\n    pragma Inline (\"+\");\n    --  Length doubling additions\n \n-   function \"*\" (A, B : Uns32) return Uns64;\n+   function \"*\" (A, B : Uns32) return Uns64 is (Uns64 (A) * Uns64 (B));\n    pragma Inline (\"*\");\n    --  Length doubling multiplication\n \n-   function \"/\" (A : Uns64; B : Uns32) return Uns64;\n+   function \"/\" (A : Uns64; B : Uns32) return Uns64 is (A / Uns64 (B));\n    pragma Inline (\"/\");\n    --  Length doubling division\n \n-   function \"rem\" (A : Uns64; B : Uns32) return Uns64;\n-   pragma Inline (\"rem\");\n-   --  Length doubling remainder\n-\n-   function \"&\" (Hi, Lo : Uns32) return Uns64;\n+   function \"&\" (Hi, Lo : Uns32) return Uns64 is\n+     (Shift_Left (Uns64 (Hi), 32) or Uns64 (Lo));\n    pragma Inline (\"&\");\n    --  Concatenate hi, lo values to form 64-bit result\n \n+   function \"abs\" (X : Int64) return Uns64 is\n+     (if X = Int64'First then 2**63 else Uns64 (Int64'(abs X)));\n+   --  Convert absolute value of X to unsigned. Note that we can't just use\n+   --  the expression of the Else, because it overflows for X = Int64'First.\n+\n+   function \"rem\" (A : Uns64; B : Uns32) return Uns64 is (A rem Uns64 (B));\n+   pragma Inline (\"rem\");\n+   --  Length doubling remainder\n+\n    function Le3 (X1, X2, X3 : Uns32; Y1, Y2, Y3 : Uns32) return Boolean;\n    --  Determines if 96 bit value X1&X2&X3 <= Y1&Y2&Y3\n \n-   function Lo (A : Uns64) return Uns32;\n+   function Lo (A : Uns64) return Uns32 is (Uns32 (A and 16#FFFF_FFFF#));\n    pragma Inline (Lo);\n    --  Low order half of 64-bit value\n \n-   function Hi (A : Uns64) return Uns32;\n+   function Hi (A : Uns64) return Uns32 is (Uns32 (Shift_Right (A, 32)));\n    pragma Inline (Hi);\n    --  High order half of 64-bit value\n \n@@ -97,56 +105,6 @@ package body System.Arith_64 is\n    pragma No_Return (Raise_Error);\n    --  Raise constraint error with appropriate message\n \n-   ---------\n-   -- \"&\" --\n-   ---------\n-\n-   function \"&\" (Hi, Lo : Uns32) return Uns64 is\n-   begin\n-      return Shift_Left (Uns64 (Hi), 32) or Uns64 (Lo);\n-   end \"&\";\n-\n-   ---------\n-   -- \"*\" --\n-   ---------\n-\n-   function \"*\" (A, B : Uns32) return Uns64 is\n-   begin\n-      return Uns64 (A) * Uns64 (B);\n-   end \"*\";\n-\n-   ---------\n-   -- \"+\" --\n-   ---------\n-\n-   function \"+\" (A, B : Uns32) return Uns64 is\n-   begin\n-      return Uns64 (A) + Uns64 (B);\n-   end \"+\";\n-\n-   function \"+\" (A : Uns64; B : Uns32) return Uns64 is\n-   begin\n-      return A + Uns64 (B);\n-   end \"+\";\n-\n-   ---------\n-   -- \"/\" --\n-   ---------\n-\n-   function \"/\" (A : Uns64; B : Uns32) return Uns64 is\n-   begin\n-      return A / Uns64 (B);\n-   end \"/\";\n-\n-   -----------\n-   -- \"rem\" --\n-   -----------\n-\n-   function \"rem\" (A : Uns64; B : Uns32) return Uns64 is\n-   begin\n-      return A rem Uns64 (B);\n-   end \"rem\";\n-\n    --------------------------\n    -- Add_With_Ovflo_Check --\n    --------------------------\n@@ -178,13 +136,13 @@ package body System.Arith_64 is\n       Q, R    : out Int64;\n       Round   : Boolean)\n    is\n-      Xu  : constant Uns64 := To_Uns (abs X);\n-      Yu  : constant Uns64 := To_Uns (abs Y);\n+      Xu  : constant Uns64 := abs X;\n+      Yu  : constant Uns64 := abs Y;\n \n       Yhi : constant Uns32 := Hi (Yu);\n       Ylo : constant Uns32 := Lo (Yu);\n \n-      Zu  : constant Uns64 := To_Uns (abs Z);\n+      Zu  : constant Uns64 := abs Z;\n       Zhi : constant Uns32 := Hi (Zu);\n       Zlo : constant Uns32 := Lo (Zu);\n \n@@ -260,15 +218,6 @@ package body System.Arith_64 is\n       end if;\n    end Double_Divide;\n \n-   --------\n-   -- Hi --\n-   --------\n-\n-   function Hi (A : Uns64) return Uns32 is\n-   begin\n-      return Uns32 (Shift_Right (A, 32));\n-   end Hi;\n-\n    ---------\n    -- Le3 --\n    ---------\n@@ -288,25 +237,16 @@ package body System.Arith_64 is\n       end if;\n    end Le3;\n \n-   --------\n-   -- Lo --\n-   --------\n-\n-   function Lo (A : Uns64) return Uns32 is\n-   begin\n-      return Uns32 (A and 16#FFFF_FFFF#);\n-   end Lo;\n-\n    -------------------------------\n    -- Multiply_With_Ovflo_Check --\n    -------------------------------\n \n    function Multiply_With_Ovflo_Check (X, Y : Int64) return Int64 is\n-      Xu  : constant Uns64 := To_Uns (abs X);\n+      Xu  : constant Uns64 := abs X;\n       Xhi : constant Uns32 := Hi (Xu);\n       Xlo : constant Uns32 := Lo (Xu);\n \n-      Yu  : constant Uns64 := To_Uns (abs Y);\n+      Yu  : constant Uns64 := abs Y;\n       Yhi : constant Uns32 := Hi (Yu);\n       Ylo : constant Uns32 := Lo (Yu);\n \n@@ -373,15 +313,15 @@ package body System.Arith_64 is\n       Q, R    : out Int64;\n       Round   : Boolean)\n    is\n-      Xu  : constant Uns64 := To_Uns (abs X);\n+      Xu  : constant Uns64 := abs X;\n       Xhi : constant Uns32 := Hi (Xu);\n       Xlo : constant Uns32 := Lo (Xu);\n \n-      Yu  : constant Uns64 := To_Uns (abs Y);\n+      Yu  : constant Uns64 := abs Y;\n       Yhi : constant Uns32 := Hi (Yu);\n       Ylo : constant Uns32 := Lo (Yu);\n \n-      Zu  : Uns64 := To_Uns (abs Z);\n+      Zu  : Uns64 := abs Z;\n       Zhi : Uns32 := Hi (Zu);\n       Zlo : Uns32 := Lo (Zu);\n "}, {"sha": "05e29f73f1bab742d2accdd6256614e6c429000a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149604e46a31c3f1a22194e61ba3a0f01903de03/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149604e46a31c3f1a22194e61ba3a0f01903de03/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=149604e46a31c3f1a22194e61ba3a0f01903de03", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4021,7 +4021,7 @@ package body Sem_Prag is\n \n          if not Is_Task_Dispatching_Policy_Name (Chars (Argx)) then\n             Error_Pragma_Arg\n-              (\"& is not a valid task dispatching policy name\", Argx);\n+              (\"& is not an allowed task dispatching policy name\", Argx);\n          end if;\n       end Check_Arg_Is_Task_Dispatching_Policy;\n "}]}