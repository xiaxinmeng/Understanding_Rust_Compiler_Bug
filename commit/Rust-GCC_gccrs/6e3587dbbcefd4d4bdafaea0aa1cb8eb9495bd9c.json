{"sha": "6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUzNTg3ZGJiY2VmZDRkNGJkYWZhZWEwYWExY2I4ZWI5NDk1YmQ5Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-18T19:34:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-18T19:34:47Z"}, "message": "PR c++/89640 - GNU attributes on lambda.\n\nMy patch for PR 60503 to fix C++11 attribute parsing on lambdas accidentally\nremoved support for GNU attributes.\n\n\t* parser.c (cp_parser_lambda_declarator_opt): Allow GNU attributes.\n\nFrom-SVN: r269775", "tree": {"sha": "6ed926243df5e5621e088845332013b1f1899a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ed926243df5e5621e088845332013b1f1899a03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a1d5d6a8edfc9cc08f4a15f70d9240470f05b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1d5d6a8edfc9cc08f4a15f70d9240470f05b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1d5d6a8edfc9cc08f4a15f70d9240470f05b0c"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "a3341bd96726b6df6393636ecaedcb5b674ea681", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c", "patch": "@@ -1,5 +1,8 @@\n 2019-03-18  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/89640 - GNU attributes on lambda.\n+\t* parser.c (cp_parser_lambda_declarator_opt): Allow GNU attributes.\n+\n \tPR c++/89682 - wrong access error in default argument.\n \t* pt.c (tsubst_default_argument): Don't defer access checks.\n "}, {"sha": "81aff35cad9f5cfdd8a4bedd8476bb9ea4c93241", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c", "patch": "@@ -10790,7 +10790,8 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n      This means an empty parameter list, no attributes, and no exception\n      specification.  */\n   tree param_list = void_list_node;\n-  tree attributes = NULL_TREE;\n+  tree std_attrs = NULL_TREE;\n+  tree gnu_attrs = NULL_TREE;\n   tree exception_spec = NULL_TREE;\n   tree template_param_list = NULL_TREE;\n   tree tx_qual = NULL_TREE;\n@@ -10849,7 +10850,8 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n       /* In the decl-specifier-seq of the lambda-declarator, each\n \t decl-specifier shall either be mutable or constexpr.  */\n       int declares_class_or_enum;\n-      if (cp_lexer_next_token_is_decl_specifier_keyword (parser->lexer))\n+      if (cp_lexer_next_token_is_decl_specifier_keyword (parser->lexer)\n+\t  && !cp_next_tokens_can_be_gnu_attribute_p (parser))\n \tcp_parser_decl_specifier_seq (parser,\n \t\t\t\t      CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR,\n \t\t\t\t      &lambda_specs, &declares_class_or_enum);\n@@ -10866,7 +10868,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n       /* Parse optional exception specification.  */\n       exception_spec = cp_parser_exception_specification_opt (parser);\n \n-      attributes = cp_parser_std_attribute_spec_seq (parser);\n+      std_attrs = cp_parser_std_attribute_spec_seq (parser);\n \n       /* Parse optional trailing return type.  */\n       if (cp_lexer_next_token_is (parser->lexer, CPP_DEREF))\n@@ -10875,6 +10877,9 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n           return_type = cp_parser_trailing_type_id (parser);\n         }\n \n+      if (cp_next_tokens_can_be_gnu_attribute_p (parser))\n+\tgnu_attrs = cp_parser_gnu_attributes_opt (parser);\n+\n       /* The function parameters must be in scope all the way until after the\n          trailing-return-type in case of decltype.  */\n       pop_bindings_and_leave_scope ();\n@@ -10922,11 +10927,11 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \t\t\t\t       exception_spec,\n                                        return_type,\n                                        /*requires_clause*/NULL_TREE);\n-    declarator->std_attributes = attributes;\n+    declarator->std_attributes = std_attrs;\n \n     fco = grokmethod (&return_type_specs,\n \t\t      declarator,\n-\t\t      NULL_TREE);\n+\t\t      gnu_attrs);\n     if (fco != error_mark_node)\n       {\n \tDECL_INITIALIZED_IN_CLASS_P (fco) = 1;"}, {"sha": "01470c32233bc1d19b3328536bcd60d0108386a1", "filename": "gcc/testsuite/g++.dg/ext/attr-lambda1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-lambda1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-lambda1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-lambda1.C?ref=6e3587dbbcefd4d4bdafaea0aa1cb8eb9495bd9c", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/89640\n+// { dg-options \"\" }\n+// { dg-do compile { target c++11 } }\n+\n+void test() {\n+    []() __attribute__((noinline,cold)) {\n+        asm volatile(\"\");\n+    }();\n+}"}]}