{"sha": "2534573e53e3161c02ef229411270e49d6a20f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUzNDU3M2U1M2UzMTYxYzAyZWYyMjk0MTEyNzBlNDlkNmEyMGYyMA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-08-14T13:30:51Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-08-14T13:30:51Z"}, "message": "sse.md: Allow V64QI, V32QI, V32HI, V4HI modes.\n\ngcc/\n\t* config/i386/sse.md: Allow V64QI, V32QI, V32HI, V4HI modes.\n\t* config/i386/subst.md\n\t(define_mode_iterator SUBST_V): Update.\n\t(define_mode_iterator SUBST_A): Ditto.\n\t(define_subst_attr \"mask_operand7\"): New.\n\t(define_subst_attr \"mask_operand10\"): New.\n\t(define_subst_attr \"mask_operand_arg34\") : New.\n\t(define_subst_attr \"mask_expand_op3\"): New.\n\t(define_subst_attr \"mask_mode512bit_condition\"): Handle TARGET_AVX512VL.\n\t(define_subst_attr \"sd_mask_mode512bit_condition\"): Ditto.\n\t(define_subst_attr \"mask_avx512vl_condition\"): New.\n\t(define_subst_attr \"round_mask_operand4\"): Ditto.\n\t(define_subst_attr \"round_mask_scalar_op3\"): Delete.\n\t(define_subst_attr \"round_mask_op4\"): New.\n\t(define_subst_attr \"round_mode512bit_condition\"): Allow V8DImode,\n\tV16SImode.\n\t(define_subst_attr \"round_modev8sf_condition\"): New.\n\t(define_subst_attr \"round_modev4sf_condition\"): GET_MODE instead of\n\t<MODE>mode.\n\t(define_subst_attr \"round_saeonly_mask_operand4\"): New.\n\t(define_subst_attr \"round_saeonly_mask_op4\"): New.\n\t(define_subst_attr \"round_saeonly_mode512bit_condition\"): Allow\n\tV8DImode, V16SImode.\n\t(define_subst_attr \"round_saeonly_modev8sf_condition\"): New.\n\t(define_subst_attr \"mask_expand4_name\" \"mask_expand4\"): New.\n\t(define_subst_attr \"mask_expand4_args\"): New.\n\t(define_subst \"mask_expand4\"): New.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r213965", "tree": {"sha": "788bd6ac22766d76a27dc4820a0f4f8d9375b8f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/788bd6ac22766d76a27dc4820a0f4f8d9375b8f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2534573e53e3161c02ef229411270e49d6a20f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2534573e53e3161c02ef229411270e49d6a20f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2534573e53e3161c02ef229411270e49d6a20f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2534573e53e3161c02ef229411270e49d6a20f20/comments", "author": null, "committer": null, "parents": [{"sha": "e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862"}], "stats": {"total": 91, "additions": 80, "deletions": 11}, "files": [{"sha": "c512f10d69959ba4ad0ee3970e0d1c61386fb060", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2534573e53e3161c02ef229411270e49d6a20f20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2534573e53e3161c02ef229411270e49d6a20f20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2534573e53e3161c02ef229411270e49d6a20f20", "patch": "@@ -1,3 +1,40 @@\n+2014-08-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md: Allow V64QI, V32QI, V32HI, V4HI modes.\n+\t* config/i386/subst.md\n+\t(define_mode_iterator SUBST_V): Update.\n+\t(define_mode_iterator SUBST_A): Ditto.\n+\t(define_subst_attr \"mask_operand7\"): New.\n+\t(define_subst_attr \"mask_operand10\"): New.\n+\t(define_subst_attr \"mask_operand_arg34\") : New.\n+\t(define_subst_attr \"mask_expand_op3\"): New.\n+\t(define_subst_attr \"mask_mode512bit_condition\"): Handle TARGET_AVX512VL.\n+\t(define_subst_attr \"sd_mask_mode512bit_condition\"): Ditto.\n+\t(define_subst_attr \"mask_avx512vl_condition\"): New.\n+\t(define_subst_attr \"round_mask_operand4\"): Ditto.\n+\t(define_subst_attr \"round_mask_scalar_op3\"): Delete.\n+\t(define_subst_attr \"round_mask_op4\"): New.\n+\t(define_subst_attr \"round_mode512bit_condition\"): Allow V8DImode,\n+\tV16SImode.\n+\t(define_subst_attr \"round_modev8sf_condition\"): New.\n+\t(define_subst_attr \"round_modev4sf_condition\"): GET_MODE instead of\n+\t<MODE>mode.\n+\t(define_subst_attr \"round_saeonly_mask_operand4\"): New.\n+\t(define_subst_attr \"round_saeonly_mask_op4\"): New.\n+\t(define_subst_attr \"round_saeonly_mode512bit_condition\"): Allow\n+\tV8DImode, V16SImode.\n+\t(define_subst_attr \"round_saeonly_modev8sf_condition\"): New.\n+\t(define_subst_attr \"mask_expand4_name\" \"mask_expand4\"): New.\n+\t(define_subst_attr \"mask_expand4_args\"): New.\n+\t(define_subst \"mask_expand4\"): New.\n+\n 2014-08-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "ebe38f375d6cfe7a2821a7db2582cc03a6bbec15", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2534573e53e3161c02ef229411270e49d6a20f20/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2534573e53e3161c02ef229411270e49d6a20f20/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2534573e53e3161c02ef229411270e49d6a20f20", "patch": "@@ -471,8 +471,8 @@\n \n ;; Mapping of vector modes to corresponding mask size\n (define_mode_attr avx512fmaskmode\n-  [(V16QI \"HI\")\n-   (V16HI \"HI\") (V8HI  \"QI\")\n+  [(V64QI \"DI\") (V32QI \"SI\") (V16QI \"HI\")\n+   (V32HI \"SI\") (V16HI \"HI\") (V8HI  \"QI\") (V4HI \"QI\")\n    (V16SI \"HI\") (V8SI  \"QI\") (V4SI  \"QI\")\n    (V8DI  \"QI\") (V4DI  \"QI\") (V2DI  \"QI\")\n    (V16SF \"HI\") (V8SF  \"QI\") (V4SF  \"QI\")"}, {"sha": "edb0965ab3d3fa2c334753928c992403966681a3", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2534573e53e3161c02ef229411270e49d6a20f20/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2534573e53e3161c02ef229411270e49d6a20f20/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=2534573e53e3161c02ef229411270e49d6a20f20", "patch": "@@ -20,8 +20,8 @@\n ;; Some iterators for extending subst as much as possible\n ;; All vectors (Use it for destination)\n (define_mode_iterator SUBST_V\n-  [V16QI\n-   V16HI V8HI\n+  [V64QI V32QI V16QI\n+   V32HI V16HI V8HI\n    V16SI V8SI  V4SI\n    V8DI  V4DI  V2DI\n    V16SF V8SF  V4SF\n@@ -31,8 +31,8 @@\n   [QI HI SI DI])\n \n (define_mode_iterator SUBST_A\n-  [V16QI\n-   V16HI V8HI\n+  [V64QI V32QI V16QI\n+   V32HI V16HI V8HI\n    V16SI V8SI  V4SI\n    V8DI  V4DI  V2DI\n    V16SF V8SF  V4SF\n@@ -47,16 +47,21 @@\n (define_subst_attr \"mask_operand3_1\" \"mask\" \"\" \"%%{%%4%%}%%N3\") ;; for sprintf\n (define_subst_attr \"mask_operand4\" \"mask\" \"\" \"%{%5%}%N4\")\n (define_subst_attr \"mask_operand6\" \"mask\" \"\" \"%{%7%}%N6\")\n+(define_subst_attr \"mask_operand7\" \"mask\" \"\" \"%{%8%}%N7\")\n+(define_subst_attr \"mask_operand10\" \"mask\" \"\" \"%{%11%}%N10\")\n (define_subst_attr \"mask_operand11\" \"mask\" \"\" \"%{%12%}%N11\")\n (define_subst_attr \"mask_operand18\" \"mask\" \"\" \"%{%19%}%N18\")\n (define_subst_attr \"mask_operand19\" \"mask\" \"\" \"%{%20%}%N19\")\n (define_subst_attr \"mask_codefor\" \"mask\" \"*\" \"\")\n-(define_subst_attr \"mask_mode512bit_condition\" \"mask\" \"1\" \"(<MODE_SIZE> == 64)\")\n+(define_subst_attr \"mask_operand_arg34\" \"mask\" \"\" \", operands[3], operands[4]\")\n+(define_subst_attr \"mask_mode512bit_condition\" \"mask\" \"1\" \"(<MODE_SIZE> == 64 || TARGET_AVX512VL)\")\n+(define_subst_attr \"mask_avx512vl_condition\" \"mask\" \"1\" \"TARGET_AVX512VL\")\n (define_subst_attr \"store_mask_constraint\" \"mask\" \"vm\" \"v\")\n (define_subst_attr \"store_mask_predicate\" \"mask\" \"nonimmediate_operand\" \"register_operand\")\n (define_subst_attr \"mask_prefix\" \"mask\" \"vex\" \"evex\")\n (define_subst_attr \"mask_prefix2\" \"mask\" \"maybe_vex\" \"evex\")\n (define_subst_attr \"mask_prefix3\" \"mask\" \"orig,vex\" \"evex\")\n+(define_subst_attr \"mask_expand_op3\" \"mask\" \"3\" \"5\")\n \n (define_subst \"mask\"\n   [(set (match_operand:SUBST_V 0)\n@@ -85,7 +90,7 @@\n (define_subst_attr \"sd_mask_op4\" \"sd\" \"\" \"%{%5%}%N4\")\n (define_subst_attr \"sd_mask_op5\" \"sd\" \"\" \"%{%6%}%N5\")\n (define_subst_attr \"sd_mask_codefor\" \"sd\" \"*\" \"\")\n-(define_subst_attr \"sd_mask_mode512bit_condition\" \"sd\" \"1\" \"(<MODE_SIZE> == 64)\")\n+(define_subst_attr \"sd_mask_mode512bit_condition\" \"sd\" \"1\" \"(<MODE_SIZE> == 64 || TARGET_AVX512VL)\")\n \n (define_subst \"sd\"\n  [(set (match_operand:SUBST_V 0)\n@@ -101,6 +106,7 @@\n (define_subst_attr \"round_name\" \"round\" \"\" \"_round\")\n (define_subst_attr \"round_mask_operand2\" \"mask\" \"%R2\" \"%R4\")\n (define_subst_attr \"round_mask_operand3\" \"mask\" \"%R3\" \"%R5\")\n+(define_subst_attr \"round_mask_operand4\" \"mask\" \"%R4\" \"%R6\")\n (define_subst_attr \"round_sd_mask_operand4\" \"sd\" \"%R4\" \"%R6\")\n (define_subst_attr \"round_op2\" \"round\" \"\" \"%R2\")\n (define_subst_attr \"round_op3\" \"round\" \"\" \"%R3\")\n@@ -109,14 +115,18 @@\n (define_subst_attr \"round_op6\" \"round\" \"\" \"%R6\")\n (define_subst_attr \"round_mask_op2\" \"round\" \"\" \"<round_mask_operand2>\")\n (define_subst_attr \"round_mask_op3\" \"round\" \"\" \"<round_mask_operand3>\")\n-(define_subst_attr \"round_mask_scalar_op3\" \"round\" \"\" \"<round_mask_scalar_operand3>\")\n+(define_subst_attr \"round_mask_op4\" \"round\" \"\" \"<round_mask_operand4>\")\n (define_subst_attr \"round_sd_mask_op4\" \"round\" \"\" \"<round_sd_mask_operand4>\")\n (define_subst_attr \"round_constraint\" \"round\" \"vm\" \"v\")\n (define_subst_attr \"round_constraint2\" \"round\" \"m\" \"v\")\n (define_subst_attr \"round_constraint3\" \"round\" \"rm\" \"r\")\n (define_subst_attr \"round_nimm_predicate\" \"round\" \"nonimmediate_operand\" \"register_operand\")\n (define_subst_attr \"round_prefix\" \"round\" \"vex\" \"evex\")\n-(define_subst_attr \"round_mode512bit_condition\" \"round\" \"1\" \"(<MODE>mode == V16SFmode || <MODE>mode == V8DFmode)\")\n+(define_subst_attr \"round_mode512bit_condition\" \"round\" \"1\" \"(<MODE>mode == V16SFmode\n+\t\t\t\t\t\t\t      || <MODE>mode == V8DFmode\n+\t\t\t\t\t\t\t      || <MODE>mode == V8DImode\n+\t\t\t\t\t\t\t      || <MODE>mode == V16SImode)\")\n+(define_subst_attr \"round_modev8sf_condition\" \"round\" \"1\" \"(<MODE>mode == V8SFmode)\")\n (define_subst_attr \"round_modev4sf_condition\" \"round\" \"1\" \"(<MODE>mode == V4SFmode)\")\n (define_subst_attr \"round_codefor\" \"round\" \"*\" \"\")\n (define_subst_attr \"round_opnum\" \"round\" \"5\" \"6\")\n@@ -133,6 +143,7 @@\n (define_subst_attr \"round_saeonly_name\" \"round_saeonly\" \"\" \"_round\")\n (define_subst_attr \"round_saeonly_mask_operand2\" \"mask\" \"%r2\" \"%r4\")\n (define_subst_attr \"round_saeonly_mask_operand3\" \"mask\" \"%r3\" \"%r5\")\n+(define_subst_attr \"round_saeonly_mask_operand4\" \"mask\" \"%r4\" \"%r6\")\n (define_subst_attr \"round_saeonly_mask_scalar_merge_operand4\" \"mask_scalar_merge\" \"%r4\" \"%r5\")\n (define_subst_attr \"round_saeonly_sd_mask_operand5\" \"sd\" \"%r5\" \"%r7\")\n (define_subst_attr \"round_saeonly_op2\" \"round_saeonly\" \"\" \"%r2\")\n@@ -143,12 +154,17 @@\n (define_subst_attr \"round_saeonly_prefix\" \"round_saeonly\" \"vex\" \"evex\")\n (define_subst_attr \"round_saeonly_mask_op2\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand2>\")\n (define_subst_attr \"round_saeonly_mask_op3\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand3>\")\n+(define_subst_attr \"round_saeonly_mask_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand4>\")\n (define_subst_attr \"round_saeonly_mask_scalar_merge_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_scalar_merge_operand4>\")\n (define_subst_attr \"round_saeonly_sd_mask_op5\" \"round_saeonly\" \"\" \"<round_saeonly_sd_mask_operand5>\")\n (define_subst_attr \"round_saeonly_constraint\" \"round_saeonly\" \"vm\" \"v\")\n (define_subst_attr \"round_saeonly_constraint2\" \"round_saeonly\" \"m\" \"v\")\n (define_subst_attr \"round_saeonly_nimm_predicate\" \"round_saeonly\" \"nonimmediate_operand\" \"register_operand\")\n-(define_subst_attr \"round_saeonly_mode512bit_condition\" \"round_saeonly\" \"1\" \"(<MODE>mode == V16SFmode || <MODE>mode == V8DFmode)\")\n+(define_subst_attr \"round_saeonly_mode512bit_condition\" \"round_saeonly\" \"1\" \"(<MODE>mode == V16SFmode\n+\t\t\t\t\t\t\t\t\t      || <MODE>mode == V8DFmode\n+\t\t\t\t\t\t\t\t\t      || <MODE>mode == V8DImode\n+\t\t\t\t\t\t\t\t\t      || <MODE>mode == V16SImode)\")\n+(define_subst_attr \"round_saeonly_modev8sf_condition\" \"round_saeonly\" \"1\" \"(<MODE>mode == V8SFmode)\")\n \n (define_subst \"round_saeonly\"\n   [(set (match_operand:SUBST_A 0)\n@@ -196,3 +212,19 @@\n    (match_dup 4)\n    (match_dup 5)\n    (unspec [(match_operand:SI 6 \"const48_operand\")] UNSPEC_EMBEDDED_ROUNDING)])\n+\n+(define_subst_attr \"mask_expand4_name\" \"mask_expand4\" \"\" \"_mask\")\n+(define_subst_attr \"mask_expand4_args\" \"mask_expand4\" \"\" \", operands[4], operands[5]\")\n+\n+(define_subst \"mask_expand4\"\n+  [(match_operand:SUBST_V 0)\n+   (match_operand:SUBST_V 1)\n+   (match_operand:SUBST_V 2)\n+   (match_operand:SI 3)]\n+   \"TARGET_AVX512VL\"\n+   [(match_dup 0)\n+    (match_dup 1)\n+    (match_dup 2)\n+    (match_dup 3)\n+    (match_operand:SUBST_V 4 \"vector_move_operand\")\n+    (match_operand:<avx512fmaskmode> 5 \"register_operand\")])"}]}