{"sha": "ecc607fc08d8d9345406ff824063fcaf500f9021", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNjNjA3ZmMwOGQ4ZDkzNDU0MDZmZjgyNDA2M2ZjYWY1MDBmOTAyMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-09-18T21:25:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-09-18T21:25:18Z"}, "message": "decl2.c (determine_visibility): Make anonymous types internal.\n\n\t* decl2.c (determine_visibility): Make anonymous types internal.\n\t(mark_used): Complain about types without linkage used in\n\tdecls with internal linkage.\n\t(vague_linkage_fn_p): Split out from...\n\t* decl.c (maybe_commonize_var): ...here.\n\t(grokdeclarator): Adjust linkage when a typedef gives linkage name.\n\t* tree.c (no_linkage_check): Check the enclosing class and template\n\targuments.\n\n\t* cp-tree.h (TYPE_NAMESPACE_SCOPE_P): New.\n\nFrom-SVN: r151868", "tree": {"sha": "ec33a1350ff4e953d12da2838d2890d5f32c3181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec33a1350ff4e953d12da2838d2890d5f32c3181"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecc607fc08d8d9345406ff824063fcaf500f9021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc607fc08d8d9345406ff824063fcaf500f9021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc607fc08d8d9345406ff824063fcaf500f9021", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc607fc08d8d9345406ff824063fcaf500f9021/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5babf18b5bede638a67406cbd3ebf480cd4b8f"}], "stats": {"total": 142, "additions": 127, "deletions": 15}, "files": [{"sha": "6c2ce9ce88224fa5e9ce95f2b321245a0bc6cb4b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ecc607fc08d8d9345406ff824063fcaf500f9021", "patch": "@@ -1,5 +1,16 @@\n 2009-09-18  Jason Merrill  <jason@redhat.com>\n \n+\t* decl2.c (determine_visibility): Make anonymous types internal.\n+\t(mark_used): Complain about types without linkage used in\n+\tdecls with internal linkage.\n+\t(vague_linkage_fn_p): Split out from...\n+\t* decl.c (maybe_commonize_var): ...here.\n+\t(grokdeclarator): Adjust linkage when a typedef gives linkage name.\n+\t* tree.c (no_linkage_check): Check the enclosing class and template\n+\targuments.\n+\n+\t* cp-tree.h (TYPE_NAMESPACE_SCOPE_P): New.\n+\n \t* pt.c (get_pattern_parm): New.\n \t(listify): Split out from...\n \t(listify_autos): ...here."}, {"sha": "816b4cabd0b9cc0154be1e294e1e411fdc6ff579", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ecc607fc08d8d9345406ff824063fcaf500f9021", "patch": "@@ -2129,6 +2129,9 @@ struct GTY(()) lang_decl {\n   (!DECL_TEMPLATE_PARM_P (NODE)\t\t\t\t\t\\\n    && TREE_CODE (CP_DECL_CONTEXT (NODE)) == NAMESPACE_DECL)\n \n+#define TYPE_NAMESPACE_SCOPE_P(NODE) \\\n+  (TREE_CODE (CP_TYPE_CONTEXT (NODE)) == NAMESPACE_DECL)\n+\n /* 1 iff NODE is a class member.  */\n #define DECL_CLASS_SCOPE_P(NODE) \\\n   (DECL_CONTEXT (NODE) && TYPE_P (DECL_CONTEXT (NODE)))\n@@ -4457,6 +4460,7 @@ extern bool check_java_method\t\t\t(tree);\n extern tree build_memfn_type\t\t\t(tree, tree, cp_cv_quals);\n extern void maybe_retrofit_in_chrg\t\t(tree);\n extern void maybe_make_one_only\t\t\t(tree);\n+extern bool vague_linkage_fn_p\t\t\t(tree);\n extern void grokclassfn\t\t\t\t(tree, tree,\n \t\t\t\t\t\t enum overload_flags);\n extern tree grok_array_decl\t\t\t(tree, tree);"}, {"sha": "614dbb05238a855fa1f342cda1ef81229e979d45", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ecc607fc08d8d9345406ff824063fcaf500f9021", "patch": "@@ -4615,13 +4615,7 @@ maybe_commonize_var (tree decl)\n       /* Don't mess with __FUNCTION__.  */\n       && ! DECL_ARTIFICIAL (decl)\n       && DECL_FUNCTION_SCOPE_P (decl)\n-      /* Unfortunately, import_export_decl has not always been called\n-\t before the function is processed, so we cannot simply check\n-\t DECL_COMDAT.  */\n-      && (DECL_COMDAT (DECL_CONTEXT (decl))\n-\t  || ((DECL_DECLARED_INLINE_P (DECL_CONTEXT (decl))\n-\t       || DECL_TEMPLATE_INSTANTIATION (DECL_CONTEXT (decl)))\n-\t      && TREE_PUBLIC (DECL_CONTEXT (decl)))))\n+      && vague_linkage_fn_p (DECL_CONTEXT (decl)))\n     {\n       if (flag_weak)\n \t{\n@@ -8845,6 +8839,10 @@ grokdeclarator (const cp_declarator *declarator,\n \t    DECL_NAME (CLASSTYPE_TI_TEMPLATE (type))\n \t      = TYPE_IDENTIFIER (type);\n \n+\t  /* Adjust linkage now that we aren't anonymous anymore.  */\n+\t  set_linkage_according_to_type (type, TYPE_MAIN_DECL (type));\n+\t  determine_visibility (TYPE_MAIN_DECL (type));\n+\n \t  /* FIXME remangle member functions; member functions of a\n \t     type with external linkage have external linkage.  */\n \t}"}, {"sha": "3e8c0d7a99ca458f3ac1045867e61a0fb7cbd3bf", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ecc607fc08d8d9345406ff824063fcaf500f9021", "patch": "@@ -1605,6 +1605,22 @@ maybe_make_one_only (tree decl)\n     }\n }\n \n+/* Returns true iff DECL, a FUNCTION_DECL, has vague linkage.  This\n+   predicate will give the right answer during parsing of the function,\n+   which other tests may not.  */\n+\n+bool\n+vague_linkage_fn_p (tree fn)\n+{\n+  /* Unfortunately, import_export_decl has not always been called\n+     before the function is processed, so we cannot simply check\n+     DECL_COMDAT.  */\n+  return (DECL_COMDAT (fn)\n+\t  || ((DECL_DECLARED_INLINE_P (fn)\n+\t       || DECL_TEMPLATE_INSTANTIATION (fn))\n+\t      && TREE_PUBLIC (fn)));\n+}\n+\n /* Determine whether or not we want to specifically import or export CTYPE,\n    using various heuristics.  */\n \n@@ -2075,6 +2091,16 @@ determine_visibility (tree decl)\n \t  || ! DECL_VISIBILITY_SPECIFIED (decl))\n \tconstrain_visibility (decl, tvis);\n     }\n+  else if (no_linkage_check (TREE_TYPE (decl), /*relaxed_p=*/true))\n+    /* DR 757: A type without linkage shall not be used as the type of a\n+       variable or function with linkage, unless\n+       o the variable or function has extern \"C\" linkage (7.5 [dcl.link]), or\n+       o the variable or function is not used (3.2 [basic.def.odr]) or is\n+       defined in the same translation unit.\n+\n+       Since non-extern \"C\" decls need to be defined in the same\n+       translation unit, we can make the type internal.  */\n+    constrain_visibility (decl, VISIBILITY_ANON);\n \n   /* If visibility changed and DECL already has DECL_RTL, ensure\n      symbol flags are updated.  */\n@@ -3966,7 +3992,7 @@ mark_used (tree decl)\n    o the variable or function has extern \"C\" linkage (7.5 [dcl.link]), or\n    o the variable or function is not used (3.2 [basic.def.odr]) or is\n    defined in the same translation unit.  */\n-  if (TREE_PUBLIC (decl)\n+  if (decl_linkage (decl) != lk_none\n       && !DECL_EXTERN_C_P (decl)\n       && !DECL_ARTIFICIAL (decl)\n       && !decl_defined_p (decl)"}, {"sha": "51752a3f040ea5f25e346a30a1b712969753404e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ecc607fc08d8d9345406ff824063fcaf500f9021", "patch": "@@ -1513,7 +1513,7 @@ verify_stmt_tree (tree t)\n \n /* Check if the type T depends on a type with no linkage and if so, return\n    it.  If RELAXED_P then do not consider a class type declared within\n-   a TREE_PUBLIC function to have no linkage.  */\n+   a vague-linkage function to have no linkage.  */\n \n tree\n no_linkage_check (tree t, bool relaxed_p)\n@@ -1527,22 +1527,49 @@ no_linkage_check (tree t, bool relaxed_p)\n \n   switch (TREE_CODE (t))\n     {\n-      tree fn;\n-\n     case RECORD_TYPE:\n       if (TYPE_PTRMEMFUNC_P (t))\n \tgoto ptrmem;\n       /* Fall through.  */\n     case UNION_TYPE:\n       if (!CLASS_TYPE_P (t))\n \treturn NULL_TREE;\n+\n+      /* Check template type-arguments.  I think that types with no linkage\n+         can't occur in non-type arguments, though that might change with\n+         constexpr.  */\n+      r = CLASSTYPE_TEMPLATE_INFO (t);\n+      if (r)\n+\t{\n+\t  tree args = INNERMOST_TEMPLATE_ARGS (TI_ARGS (r));\n+\t  int i;\n+\n+\t  for (i = TREE_VEC_LENGTH (args); i-- > 0; )\n+\t    {\n+\t      tree elt = TREE_VEC_ELT (args, i);\n+\t      if (TYPE_P (elt)\n+\t\t  && (r = no_linkage_check (elt, relaxed_p), r))\n+\t\treturn r;\n+\t    }\n+\t}\n       /* Fall through.  */\n     case ENUMERAL_TYPE:\n-      if (TYPE_ANONYMOUS_P (t))\n-\treturn t;\n-      fn = decl_function_context (TYPE_MAIN_DECL (t));\n-      if (fn && (!relaxed_p || !TREE_PUBLIC (fn)))\n+      /* Only treat anonymous types as having no linkage if they're at\n+\t namespace scope.  This doesn't have a core issue number yet.  */\n+      if (TYPE_ANONYMOUS_P (t) && TYPE_NAMESPACE_SCOPE_P (t))\n \treturn t;\n+\n+      r = CP_TYPE_CONTEXT (t);\n+      if (TYPE_P (r))\n+\treturn no_linkage_check (TYPE_CONTEXT (t), relaxed_p);\n+      else if (TREE_CODE (r) == FUNCTION_DECL)\n+\t{\n+\t  if (!relaxed_p || !TREE_PUBLIC (r) || !vague_linkage_fn_p (r))\n+\t    return t;\n+\t  else\n+\t    return no_linkage_check (CP_DECL_CONTEXT (r), relaxed_p);\n+\t}\n+\n       return NULL_TREE;\n \n     case ARRAY_TYPE:"}, {"sha": "3604d5b66aecb0ba815afac77f57f4a710c2aa77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ecc607fc08d8d9345406ff824063fcaf500f9021", "patch": "@@ -1,5 +1,7 @@\n 2009-09-18  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/nolinkage1{.C,.h,a.cc}: New.\n+\n \t* g++.dg/cpp0x/initlist-deduce.C: New.\n \n 2009-09-18  Janis Johnson  <janis187@us.ibm.com>"}, {"sha": "a31394b08acb423750a198f1b61eb4c27e01ced1", "filename": "gcc/testsuite/g++.dg/cpp0x/nolinkage1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.C?ref=ecc607fc08d8d9345406ff824063fcaf500f9021", "patch": "@@ -0,0 +1,21 @@\n+// DR 757 allows using types without linkage in declarations with linkage.\n+// Test that this doesn't lead to link-time collisions.\n+\n+// { dg-additional-sources \"nolinkage1a.cc\" }\n+// { dg-do link }\n+\n+#include \"nolinkage1.h\"\n+\n+typedef struct { int i; } *AP;\n+\n+void f(AP) { }\n+\n+A<AP> a;\n+\n+static void g()\n+{\n+  struct B { };\n+  A<B> a;\n+}\n+\n+int main() { g(); f(0); }"}, {"sha": "3cb5f63b3900cba75b242eb73ca1f6ec2d8ab17e", "filename": "gcc/testsuite/g++.dg/cpp0x/nolinkage1.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.h?ref=ecc607fc08d8d9345406ff824063fcaf500f9021", "patch": "@@ -0,0 +1,8 @@\n+template <class T>\n+struct A\n+{\n+  A();\n+};\n+\n+template <class T>\n+A<T>::A() {  }"}, {"sha": "f8528f3e650f1d0965d3b8b099f7612c4b54ddd8", "filename": "gcc/testsuite/g++.dg/cpp0x/nolinkage1a.cc", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc607fc08d8d9345406ff824063fcaf500f9021/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1a.cc?ref=ecc607fc08d8d9345406ff824063fcaf500f9021", "patch": "@@ -0,0 +1,15 @@\n+#include \"nolinkage1.h\"\n+\n+typedef struct { double d; } *BP;\n+\n+void f(BP) {  }\n+\n+A<BP> b;\n+\n+static void g()\n+{\n+  struct B { };\n+  A<B> a;\n+}\n+\n+int dummy() { g(); f(0); }"}]}