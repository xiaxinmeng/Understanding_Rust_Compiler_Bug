{"sha": "e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRlOWE1OTEwNWE4MWNkZDZjMTMyOGIwYTVlZDlmZTRjYzgyODQwZQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-03-16T03:09:14Z"}, "committer": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-03-16T03:11:42Z"}, "message": "Update post order number for merged SCC.\n\nFunction loop_distribution::break_alias_scc_partitions needs to compute\nSCC with runtime alias edges skipped.  As a result, partitions could be\nre-assigned larger post order number than SCC's precedent partition and\ndistributed before the precedent one.  This fixes the issue by updating\nthe merged partition to the minimal post order in SCC.\n\ngcc/\n    PR tree-optimization/94125\n    * tree-loop-distribution.c\n    (loop_distribution::break_alias_scc_partitions): Update post order\n    number for merged scc.\n\ngcc/testsuite/\n    PR tree-optimization/94125\n    * gcc.dg/tree-ssa/pr94125.c: New test.", "tree": {"sha": "10c62b24264529db7f77c3b0e85dc5c9dc2901e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10c62b24264529db7f77c3b0e85dc5c9dc2901e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e/comments", "author": null, "committer": null, "parents": [{"sha": "5e5ce5371f6a8199108eeade587261bf5593dedf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5ce5371f6a8199108eeade587261bf5593dedf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5ce5371f6a8199108eeade587261bf5593dedf"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "53c9622afa2ef35608a7458d774fc29a1b121f72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e", "patch": "@@ -1,3 +1,10 @@\n+2020-03-16  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/94125\n+\t* tree-loop-distribution.c\n+\t(loop_distribution::break_alias_scc_partitions): Update post order\n+\tnumber for merged scc.\n+\n 2020-03-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89229"}, {"sha": "ab0406656d2b3f763053dd3458db6bd4ac52af7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e", "patch": "@@ -1,3 +1,8 @@\n+2020-03-16  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/94125\n+\t* gcc.dg/tree-ssa/pr94125.c: New test.\n+\n 2020-03-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89229"}, {"sha": "c339e51f48298d30656ca895631c2141d7807d78", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94125.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94125.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94125.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94125.c?ref=e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+unsigned char b, f;\n+short d[1][8][1], *g = &d[0][3][0];\n+\n+void __attribute__((noinline)) foo ()\n+{\n+  int k[256] = { 0, 0, 0, 4, 0, 0 };\n+  for (int c = 252; c >= 0; c--)\n+    {\n+      b = f;\n+      *g = k[c + 3];\n+      k[c + 1] = 0;\n+    }\n+  for (int i = 0; i < 8; i++)\n+    if (d[0][i][0] != 0)\n+      __builtin_abort ();\n+}\n+\n+void __attribute__((noinline)) bar ()\n+{\n+  int k[256] = { 0, 0, 0, 4, 0, 0 };\n+  k[255] = 4;\n+  for (int c = 0; c <=252; c++)\n+    {\n+      b = f;\n+      *g = k[c + 3];\n+      k[c + 1] = 0;\n+    }\n+  for (int i = 0; i < 8; i++)\n+    if ((i == 3 && d[0][i][0] != 4) || (i != 3 && d[0][i][0] != 0))\n+      __builtin_abort ();\n+}\n+\n+int main ()\n+{\n+  foo ();\n+  bar ();\n+  return 0;\n+}"}, {"sha": "4442321533286ed78c2743532456c51229d6288b", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e", "patch": "@@ -2489,14 +2489,11 @@ loop_distribution::break_alias_scc_partitions (struct graph *rdg,\n \t      if (cbdata.vertices_component[k] != i)\n \t\tcontinue;\n \n-\t      /* Update postorder number so that merged reduction partition is\n-\t\t sorted after other partitions.  */\n-\t      if (!partition_reduction_p (first)\n-\t\t  && partition_reduction_p (partition))\n-\t\t{\n-\t\t  gcc_assert (pg->vertices[k].post < pg->vertices[j].post);\n-\t\t  pg->vertices[j].post = pg->vertices[k].post;\n-\t\t}\n+\t      /* Update to the minimal postordeer number of vertices in scc so\n+\t\t that merged partition is sorted correctly against others.  */\n+\t      if (pg->vertices[j].post > pg->vertices[k].post)\n+\t\tpg->vertices[j].post = pg->vertices[k].post;\n+\n \t      partition_merge_into (NULL, first, partition, FUSE_SAME_SCC);\n \t      (*partitions)[k] = NULL;\n \t      partition_free (partition);"}]}