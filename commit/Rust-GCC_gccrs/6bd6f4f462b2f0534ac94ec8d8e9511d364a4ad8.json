{"sha": "6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJkNmY0ZjQ2MmIyZjA1MzRhYzk0ZWM4ZDhlOTUxMWQzNjRhNGFkOA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-07-26T04:15:23Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-07-26T04:15:23Z"}, "message": "rs6000.c (rs6000_init_hard_regno_mode_ok): Eliminate TARGET_UPPER_REGS_{DF,DI,SF} usage.\n\n2017-07-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok):\n\tEliminate TARGET_UPPER_REGS_{DF,DI,SF} usage.\n\t(rs6000_option_override_internal): Likewise.\n\t(rs6000_expand_vector_set): Likewise.\n\t* config/rs6000/rs6000.h (TARGET_UPPER_REGS_DF): Delete.\n\t(TARGET_UPPER_REGS_SF): Likewise.\n\t(TARGET_UPPER_REGS_DI): Likewise.\n\t(TARGET_VEXTRACTUB): Eliminate TARGET_UPPER_REGS_{DF,DI,SF}.\n\t(TARGET_DIRECT_MOVE_64BIT): Likewise.\n\t* config/rs6000/rs6000.md (ALTIVEC_DFORM): Likewise.\n\t(float<QHI:mode><FP_ISA3:mode>2_internal): Likewise.\n\t(Splitters for DI constants in Altivec registers): Likewise.\n\t* config/rs6000/vsx.md (vsx_set_<mode>_p9): Likewise.\n\t(vsx_set_v4sf_p9): Likewise.\n\t(vsx_set_v4sf_p9_zero): Likewise.\n\t(vsx_insert_extract_v4sf_p9): Likewise.\n\t(vsx_insert_extract_v4sf_p9_2): Likewise.\n\nFrom-SVN: r250555", "tree": {"sha": "be0203d8abceb016f3b065a2d0cc6ba9c91339bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be0203d8abceb016f3b065a2d0cc6ba9c91339bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8/comments", "author": null, "committer": null, "parents": [{"sha": "c7d22f46ddfd03ed780af5bbbadf1f382036132c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d22f46ddfd03ed780af5bbbadf1f382036132c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d22f46ddfd03ed780af5bbbadf1f382036132c"}], "stats": {"total": 83, "additions": 40, "deletions": 43}, "files": [{"sha": "57cea5de632d3349bc3a5720918cece271cfc322", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8", "patch": "@@ -1,3 +1,23 @@\n+2017-07-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok):\n+\tEliminate TARGET_UPPER_REGS_{DF,DI,SF} usage.\n+\t(rs6000_option_override_internal): Likewise.\n+\t(rs6000_expand_vector_set): Likewise.\n+\t* config/rs6000/rs6000.h (TARGET_UPPER_REGS_DF): Delete.\n+\t(TARGET_UPPER_REGS_SF): Likewise.\n+\t(TARGET_UPPER_REGS_DI): Likewise.\n+\t(TARGET_VEXTRACTUB): Eliminate TARGET_UPPER_REGS_{DF,DI,SF}.\n+\t(TARGET_DIRECT_MOVE_64BIT): Likewise.\n+\t* config/rs6000/rs6000.md (ALTIVEC_DFORM): Likewise.\n+\t(float<QHI:mode><FP_ISA3:mode>2_internal): Likewise.\n+\t(Splitters for DI constants in Altivec registers): Likewise.\n+\t* config/rs6000/vsx.md (vsx_set_<mode>_p9): Likewise.\n+\t(vsx_set_v4sf_p9): Likewise.\n+\t(vsx_set_v4sf_p9_zero): Likewise.\n+\t(vsx_insert_extract_v4sf_p9): Likewise.\n+\t(vsx_insert_extract_v4sf_p9_2): Likewise.\n+\n 2017-07-25  Carl Love  <cel@us.ibm.com>\n \n \t* doc/extend.texi: Update the built-in documentation file for the"}, {"sha": "68a886304fdcdb337ce346d532a05ae4734e79d6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8", "patch": "@@ -3216,22 +3216,12 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n       rs6000_constraints[RS6000_CONSTRAINT_wa] = VSX_REGS;\n       rs6000_constraints[RS6000_CONSTRAINT_wd] = VSX_REGS;\t/* V2DFmode  */\n       rs6000_constraints[RS6000_CONSTRAINT_wf] = VSX_REGS;\t/* V4SFmode  */\n+      rs6000_constraints[RS6000_CONSTRAINT_ws] = VSX_REGS;\t/* DFmode  */\n+      rs6000_constraints[RS6000_CONSTRAINT_wv] = ALTIVEC_REGS;\t/* DFmode  */\n+      rs6000_constraints[RS6000_CONSTRAINT_wi] = VSX_REGS;\t/* DImode  */\n \n       if (TARGET_VSX_TIMODE)\n \trs6000_constraints[RS6000_CONSTRAINT_wt] = VSX_REGS;\t/* TImode  */\n-\n-      if (TARGET_UPPER_REGS_DF)\t\t\t\t\t/* DFmode  */\n-\t{\n-\t  rs6000_constraints[RS6000_CONSTRAINT_ws] = VSX_REGS;\n-\t  rs6000_constraints[RS6000_CONSTRAINT_wv] = ALTIVEC_REGS;\n-\t}\n-      else\n-\trs6000_constraints[RS6000_CONSTRAINT_ws] = FLOAT_REGS;\n-\n-      if (TARGET_UPPER_REGS_DI)\t\t\t\t\t/* DImode  */\n-\trs6000_constraints[RS6000_CONSTRAINT_wi] = VSX_REGS;\n-      else\n-\trs6000_constraints[RS6000_CONSTRAINT_wi] = FLOAT_REGS;\n     }\n \n   /* Add conditional constraints based on various options, to allow us to\n@@ -4647,11 +4637,11 @@ rs6000_option_override_internal (bool global_init_p)\n      variables through memory to do moves.  SImode can be used on ISA 2.07,\n      while HImode and QImode require ISA 3.0.  */\n   if (TARGET_VSX_SMALL_INTEGER\n-      && (!TARGET_DIRECT_MOVE || !TARGET_P8_VECTOR || !TARGET_UPPER_REGS_DI))\n+      && (!TARGET_DIRECT_MOVE || !TARGET_P8_VECTOR))\n     {\n       if (rs6000_isa_flags_explicit & OPTION_MASK_VSX_SMALL_INTEGER)\n \terror (\"-mvsx-small-integer requires -mpower8-vector, \"\n-\t       \"-mupper-regs-di, and -mdirect-move\");\n+\t       \"and -mdirect-move\");\n \n       rs6000_isa_flags &= ~OPTION_MASK_VSX_SMALL_INTEGER;\n     }\n@@ -7348,8 +7338,7 @@ rs6000_expand_vector_set (rtx target, rtx val, int elt)\n       else if (mode == V2DImode)\n \tinsn = gen_vsx_set_v2di (target, target, val, elt_rtx);\n \n-      else if (TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\n-\t       && TARGET_UPPER_REGS_DI && TARGET_POWERPC64)\n+      else if (TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER && TARGET_POWERPC64)\n \t{\n \t  if (mode == V4SImode)\n \t    insn = gen_vsx_set_v4si_p9 (target, target, val, elt_rtx);"}, {"sha": "a2936fd7d6031ff6c75d8489c698ee7f796ec8b1", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8", "patch": "@@ -571,14 +571,6 @@ extern int rs6000_vector_align[];\n \n #define TARGET_ISEL64 (TARGET_ISEL && TARGET_POWERPC64)\n \n-/* We previously had -mupper-regs-{df,di,sf} to control whether DFmode, DImode,\n-   and/or SFmode could go in the traditional Altivec registers.  GCC 8.x deleted\n-   these options.  In order to simplify the code, define the options in terms\n-   of the base option (vsx, power8-vector).  */\n-#define TARGET_UPPER_REGS_DF\tTARGET_VSX\n-#define TARGET_UPPER_REGS_DI\tTARGET_VSX\n-#define TARGET_UPPER_REGS_SF\tTARGET_P8_VECTOR\n-\n /* ISA 2.01 allowed FCFID to be done in 32-bit, previously it was 64-bit only.\n    Enable 32-bit fcfid's on any of the switches for newer ISA machines or\n    XILINX.  */\n@@ -608,7 +600,7 @@ extern int rs6000_vector_align[];\n #define TARGET_DIRECT_MOVE_128\t(TARGET_P9_VECTOR && TARGET_DIRECT_MOVE \\\n \t\t\t\t && TARGET_POWERPC64)\n #define TARGET_VEXTRACTUB\t(TARGET_P9_VECTOR && TARGET_DIRECT_MOVE \\\n-\t\t\t\t && TARGET_UPPER_REGS_DI && TARGET_POWERPC64)\n+\t\t\t\t && TARGET_POWERPC64)\n \n /* Whether we should avoid (SUBREG:SI (REG:SF) and (SUBREG:SF (REG:SI).  */\n #define TARGET_NO_SF_SUBREG\tTARGET_DIRECT_MOVE_64BIT\n@@ -768,7 +760,6 @@ extern int rs6000_vector_align[];\n #define TARGET_DIRECT_MOVE_64BIT\t(TARGET_DIRECT_MOVE\t\t\\\n \t\t\t\t\t && TARGET_P8_VECTOR\t\t\\\n \t\t\t\t\t && TARGET_POWERPC64\t\t\\\n-\t\t\t\t\t && TARGET_UPPER_REGS_DI\t\\\n \t\t\t\t\t && (rs6000_altivec_element_order != 2))\n \n /* Whether the various reciprocal divide/square root estimate instructions"}, {"sha": "8009178ea7eb12ab99ca09a91f2f56e110c7e145", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8", "patch": "@@ -691,7 +691,7 @@\n ;;\tD-form load to FPR register & move to Altivec register\n ;;\tMove Altivec register to FPR register and store\n (define_mode_iterator ALTIVEC_DFORM [DF\n-\t\t\t\t     SF\n+\t\t\t\t     (SF \"TARGET_P8_VECTOR\")\n \t\t\t\t     (DI \"TARGET_POWERPC64\")])\n \n \f\n@@ -5438,7 +5438,7 @@\n    (clobber (match_scratch:DI 3 \"=X,r,X\"))\n    (clobber (match_scratch:<QHI:MODE> 4 \"=X,X,wK\"))]\n   \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\n-   && TARGET_UPPER_REGS_DI && TARGET_VSX_SMALL_INTEGER\"\n+   && TARGET_VSX_SMALL_INTEGER\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -8664,7 +8664,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"altivec_register_operand\" \"\")\n \t(match_operand:DI 1 \"s5bit_cint_operand\" \"\"))]\n-  \"TARGET_UPPER_REGS_DI && TARGET_VSX && reload_completed\"\n+  \"TARGET_VSX && reload_completed\"\n   [(const_int 0)]\n {\n   rtx op0 = operands[0];\n@@ -8686,7 +8686,7 @@\n (define_split\n   [(set (match_operand:INT_ISA3 0 \"altivec_register_operand\" \"\")\n \t(match_operand:INT_ISA3 1 \"xxspltib_constant_split\" \"\"))]\n-  \"TARGET_UPPER_REGS_DI && TARGET_P9_VECTOR && reload_completed\"\n+  \"TARGET_P9_VECTOR && reload_completed\"\n   [(const_int 0)]\n {\n   rtx op0 = operands[0];\n@@ -9766,7 +9766,7 @@\n \t(match_operand:DF 1 \"any_operand\" \"\"))\n    (set (match_operand:DF 2 \"gpc_reg_operand\" \"\")\n \t(match_dup 0))]\n-  \"!TARGET_UPPER_REGS_DF\n+  \"!TARGET_VSX\n    && peep2_reg_dead_p (2, operands[0])\"\n   [(set (match_dup 2) (match_dup 1))])\n \n@@ -9775,7 +9775,7 @@\n \t(match_operand:SF 1 \"any_operand\" \"\"))\n    (set (match_operand:SF 2 \"gpc_reg_operand\" \"\")\n \t(match_dup 0))]\n-  \"!TARGET_UPPER_REGS_SF\n+  \"!TARGET_P8_VECTOR\n    && peep2_reg_dead_p (2, operands[0])\"\n   [(set (match_dup 2) (match_dup 1))])\n \n@@ -13974,8 +13974,7 @@\n \t(match_operand:ALTIVEC_DFORM 2 \"simple_offsettable_mem_operand\"))\n    (set (match_operand:ALTIVEC_DFORM 3 \"altivec_register_operand\")\n \t(match_dup 1))]\n-  \"TARGET_VSX && TARGET_UPPER_REGS_<MODE> && !TARGET_P9_DFORM_SCALAR\n-   && peep2_reg_dead_p (2, operands[1])\"\n+  \"TARGET_VSX && !TARGET_P9_DFORM_SCALAR && peep2_reg_dead_p (2, operands[1])\"\n   [(set (match_dup 0)\n \t(match_dup 4))\n    (set (match_dup 3)\n@@ -14011,8 +14010,7 @@\n \t(match_operand:ALTIVEC_DFORM 2 \"altivec_register_operand\"))\n    (set (match_operand:ALTIVEC_DFORM 3 \"simple_offsettable_mem_operand\")\n \t(match_dup 1))]\n-  \"TARGET_VSX && TARGET_UPPER_REGS_<MODE> && !TARGET_P9_DFORM_SCALAR\n-   && peep2_reg_dead_p (2, operands[1])\"\n+  \"TARGET_VSX && !TARGET_P9_DFORM_SCALAR && peep2_reg_dead_p (2, operands[1])\"\n   [(set (match_dup 0)\n \t(match_dup 4))\n    (set (match_dup 5)"}, {"sha": "1036c7e72a0103916e757556065e4218b2b8cb70", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8", "patch": "@@ -3366,7 +3366,7 @@\n \t  (match_operand:QI 3 \"<VSX_EXTRACT_PREDICATE>\" \"n\")]\n \t UNSPEC_VSX_SET))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\n-   && TARGET_UPPER_REGS_DI && TARGET_POWERPC64\"\n+   && TARGET_POWERPC64\"\n {\n   int ele = INTVAL (operands[3]);\n   int nunits = GET_MODE_NUNITS (<MODE>mode);\n@@ -3391,7 +3391,7 @@\n \t UNSPEC_VSX_SET))\n    (clobber (match_scratch:SI 4 \"=&wJwK\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\n-   && TARGET_UPPER_REGS_DI && TARGET_POWERPC64\"\n+   && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 5)\n@@ -3427,7 +3427,7 @@\n \t UNSPEC_VSX_SET))\n    (clobber (match_scratch:SI 4 \"=&wJwK\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\n-   && TARGET_UPPER_REGS_DI && TARGET_POWERPC64\"\n+   && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 4)\n@@ -3458,7 +3458,7 @@\n \t  (match_operand:QI 4 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\n-   && TARGET_UPPER_REGS_DI && TARGET_POWERPC64\n+   && TARGET_POWERPC64\n    && (INTVAL (operands[3]) == (VECTOR_ELT_ORDER_BIG ? 1 : 2))\"\n {\n   int ele = INTVAL (operands[4]);\n@@ -3486,8 +3486,7 @@\n \t UNSPEC_VSX_SET))\n    (clobber (match_scratch:SI 5 \"=&wJwK\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && VECTOR_MEM_VSX_P (V4SImode)\n-   && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\n-   && TARGET_UPPER_REGS_DI && TARGET_POWERPC64\n+   && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER && TARGET_POWERPC64\n    && (INTVAL (operands[3]) != (VECTOR_ELT_ORDER_BIG ? 1 : 2))\"\n   \"#\"\n   \"&& 1\""}]}