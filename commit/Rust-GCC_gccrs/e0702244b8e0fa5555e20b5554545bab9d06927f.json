{"sha": "e0702244b8e0fa5555e20b5554545bab9d06927f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3MDIyNDRiOGUwZmE1NTU1ZTIwYjU1NTQ1NDViYWI5ZDA2OTI3Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:16:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:16:44Z"}, "message": "gengtype-parse.c (require_template_declaration): Allow '+' in template parameters.\n\ngcc/\n\t* gengtype-parse.c (require_template_declaration): Allow '+' in\n\ttemplate parameters.  Consolidate cases.\n\t* hash-traits.h (int_hash): New class.\n\t* alias.c (alias_set_hash): New structure.\n\t(alias_set_traits): Use it.\n\t* symbol-summary.h (function_summary::map_hash): New class.\n\t(function_summary::summary_hashmap_traits): Use it.\n\t* tree-inline.h (dependence_hash): New class.\n\t(dependence_hasher): Use it.\n\t* tree-ssa-reassoc.c (oecount_hasher): Use int_hash.\n\t* value-prof.c (profile_id_hash): New class.\n\t(profile_id_traits): Use it.\n\nFrom-SVN: r224973", "tree": {"sha": "f415bf86a67f1423c4e6ac1b4d5c826ba1116f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f415bf86a67f1423c4e6ac1b4d5c826ba1116f12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0702244b8e0fa5555e20b5554545bab9d06927f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0702244b8e0fa5555e20b5554545bab9d06927f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0702244b8e0fa5555e20b5554545bab9d06927f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0702244b8e0fa5555e20b5554545bab9d06927f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c9524603bf6207984cc21e7df6520e935a85e35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9524603bf6207984cc21e7df6520e935a85e35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c9524603bf6207984cc21e7df6520e935a85e35"}], "stats": {"total": 208, "additions": 93, "deletions": 115}, "files": [{"sha": "fed4758760f24785bb18871f6e18b6ce8624a620", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0702244b8e0fa5555e20b5554545bab9d06927f", "patch": "@@ -1,3 +1,18 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gengtype-parse.c (require_template_declaration): Allow '+' in\n+\ttemplate parameters.  Consolidate cases.\n+\t* hash-traits.h (int_hash): New class.\n+\t* alias.c (alias_set_hash): New structure.\n+\t(alias_set_traits): Use it.\n+\t* symbol-summary.h (function_summary::map_hash): New class.\n+\t(function_summary::summary_hashmap_traits): Use it.\n+\t* tree-inline.h (dependence_hash): New class.\n+\t(dependence_hasher): Use it.\n+\t* tree-ssa-reassoc.c (oecount_hasher): Use int_hash.\n+\t* value-prof.c (profile_id_hash): New class.\n+\t(profile_id_traits): Use it.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/mips/mips.c (mips16_flip_traits): Use it."}, {"sha": "32eb3cf77adcbac4f496d22dd98a0f6fef12a82e", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=e0702244b8e0fa5555e20b5554545bab9d06927f", "patch": "@@ -141,31 +141,8 @@ along with GCC; see the file COPYING3.  If not see\n    However, this is no actual entry for alias set zero.  It is an\n    error to attempt to explicitly construct a subset of zero.  */\n \n-struct alias_set_traits : default_hashmap_traits\n-{\n-  template<typename T>\n-  static bool\n-  is_empty (T &e)\n-  {\n-    return e.m_key == INT_MIN;\n-  }\n-\n-  template<typename  T>\n-  static bool\n-  is_deleted (T &e)\n-  {\n-    return e.m_key == (INT_MIN + 1);\n-  }\n-\n-  template<typename T> static void mark_empty (T &e) { e.m_key = INT_MIN; }\n-\n-  template<typename T>\n-  static void\n-  mark_deleted (T &e)\n-  {\n-    e.m_key = INT_MIN + 1;\n-  }\n-};\n+struct alias_set_hash : int_hash <int, INT_MIN, INT_MIN + 1> {};\n+struct alias_set_traits : simple_hashmap_traits <alias_set_hash> {};\n \n struct GTY(()) alias_set_entry_d {\n   /* The alias set number, as stored in MEM_ALIAS_SET.  */"}, {"sha": "13b2b5c715ba942a47926fae5fc9529e5e706ac4", "filename": "gcc/gengtype-parse.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Fgengtype-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Fgengtype-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-parse.c?ref=e0702244b8e0fa5555e20b5554545bab9d06927f", "patch": "@@ -274,17 +274,13 @@ require_template_declaration (const char *tmpl_name)\n \t  str = concat (str, \"enum \", (char *) 0);\n \t  continue;\n \t}\n-      if (token () == NUM)\n+      if (token () == NUM\n+\t  || token () == ':'\n+\t  || token () == '+')\n \t{\n \t  str = concat (str, advance (), (char *) 0);\n \t  continue;\n \t}\n-      if (token () == ':')\n-\t{\n-\t  advance ();\n-\t  str = concat (str, \":\", (char *) 0);\n-\t  continue;\n-\t}\n       if (token () == '<')\n \t{\n \t  advance ();"}, {"sha": "26da1f239b8c943830081f630a9d15d38566c05c", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=e0702244b8e0fa5555e20b5554545bab9d06927f", "patch": "@@ -57,6 +57,68 @@ typed_noop_remove <Type>::remove (Type &)\n }\n \n \n+/* Hasher for integer type Type in which Empty is a spare value that can be\n+   used to mark empty slots.  If Deleted != Empty then Deleted is another\n+   spare value that can be used for deleted slots; if Deleted == Empty then\n+   hash table entries cannot be deleted.  */\n+\n+template <typename Type, Type Empty, Type Deleted = Empty>\n+struct int_hash : typed_noop_remove <Type>\n+{\n+  typedef Type value_type;\n+  typedef Type compare_type;\n+\n+  static inline hashval_t hash (value_type);\n+  static inline bool equal (value_type existing, value_type candidate);\n+  static inline void mark_deleted (Type &);\n+  static inline void mark_empty (Type &);\n+  static inline bool is_deleted (Type);\n+  static inline bool is_empty (Type);\n+};\n+\n+template <typename Type, Type Empty, Type Deleted>\n+inline hashval_t\n+int_hash <Type, Empty, Deleted>::hash (value_type x)\n+{\n+  return x;\n+}\n+\n+template <typename Type, Type Empty, Type Deleted>\n+inline bool\n+int_hash <Type, Empty, Deleted>::equal (value_type x, value_type y)\n+{\n+  return x == y;\n+}\n+\n+template <typename Type, Type Empty, Type Deleted>\n+inline void\n+int_hash <Type, Empty, Deleted>::mark_deleted (Type &x)\n+{\n+  gcc_assert (Empty != Deleted);\n+  x = Deleted;\n+}\n+\n+template <typename Type, Type Empty, Type Deleted>\n+inline void\n+int_hash <Type, Empty, Deleted>::mark_empty (Type &x)\n+{\n+  x = Empty;\n+}\n+\n+template <typename Type, Type Empty, Type Deleted>\n+inline bool\n+int_hash <Type, Empty, Deleted>::is_deleted (Type x)\n+{\n+  return Empty != Deleted && x == Deleted;\n+}\n+\n+template <typename Type, Type Empty, Type Deleted>\n+inline bool\n+int_hash <Type, Empty, Deleted>::is_empty (Type x)\n+{\n+  return x == Empty;\n+}\n+\n /* Pointer hasher based on pointer equality.  Other types of pointer hash\n    can inherit this and override the hash and equal functions with some\n    other form of equality (such as string equality).  */"}, {"sha": "facb5961eb60e60531fae0d39659a2304049b807", "filename": "gcc/symbol-summary.h", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Fsymbol-summary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Fsymbol-summary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymbol-summary.h?ref=e0702244b8e0fa5555e20b5554545bab9d06927f", "patch": "@@ -200,45 +200,8 @@ class GTY((user)) function_summary <T *>\n   bool m_ggc;\n \n private:\n-  struct summary_hashmap_traits: default_hashmap_traits\n-  {\n-    static const int deleted_value = -1;\n-    static const int empty_value = 0;\n-\n-    static hashval_t\n-    hash (const int v)\n-    {\n-      return (hashval_t)v;\n-    }\n-\n-    template<typename Type>\n-    static bool\n-    is_deleted (Type &e)\n-    {\n-      return e.m_key == deleted_value;\n-    }\n-\n-    template<typename Type>\n-    static bool\n-    is_empty (Type &e)\n-    {\n-      return e.m_key == empty_value;\n-    }\n-\n-    template<typename Type>\n-    static void\n-    mark_deleted (Type &e)\n-    {\n-      e.m_key = deleted_value;\n-    }\n-\n-    template<typename Type>\n-    static void\n-    mark_empty (Type &e)\n-    {\n-      e.m_key = empty_value;\n-    }\n-  };\n+  typedef int_hash <int, 0, -1> map_hash;\n+  typedef simple_hashmap_traits <map_hash> summary_hashmap_traits;\n \n   /* Getter for summary callgraph ID.  */\n   T* get (int uid)"}, {"sha": "3a47d978e123c596977269209c5fb8b1e5a63aa5", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=e0702244b8e0fa5555e20b5554545bab9d06927f", "patch": "@@ -35,25 +35,8 @@ enum copy_body_cge_which\n   CB_CGE_MOVE_CLONES\n };\n \n-struct dependence_hasher : default_hashmap_traits\n-{\n-  template<typename T>\n-  static void\n-  mark_deleted (T &e)\n-    { gcc_unreachable (); }\n-\n-  template<typename T>\n-  static void\n-  mark_empty (T &e)\n-    { e.m_key = 0; }\n-\n-  template<typename T>\n-  static bool\n-  is_deleted (T &)\n-    { return false; }\n-\n-  template<typename T> static bool is_empty (T &e) { return e.m_key == 0; }\n-};\n+typedef int_hash <unsigned short, 0> dependence_hash;\n+typedef simple_hashmap_traits <dependence_hash> dependence_hasher;\n \n /* Data required for function body duplication.  */\n "}, {"sha": "f243df5103483d3ea7bc6088ba287875497b5a98", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=e0702244b8e0fa5555e20b5554545bab9d06927f", "patch": "@@ -1017,23 +1017,16 @@ static vec<oecount> cvec;\n \n /* Oecount hashtable helpers.  */\n \n-struct oecount_hasher\n+struct oecount_hasher : int_hash <int, 0, 1>\n {\n-  typedef int value_type;\n-  typedef int compare_type;\n-  static inline hashval_t hash (const value_type &);\n-  static inline bool equal (const value_type &, const compare_type &);\n-  static bool is_deleted (int &v) { return v == 1; }\n-  static void mark_deleted (int &e) { e = 1; }\n-  static bool is_empty (int &v) { return v == 0; }\n-  static void mark_empty (int &e) { e = 0; }\n-  static void remove (int &) {}\n+  static inline hashval_t hash (int);\n+  static inline bool equal (int, int);\n };\n \n /* Hash function for oecount.  */\n \n inline hashval_t\n-oecount_hasher::hash (const value_type &p)\n+oecount_hasher::hash (int p)\n {\n   const oecount *c = &cvec[p - 42];\n   return htab_hash_pointer (c->op) ^ (hashval_t)c->oecode;\n@@ -1042,7 +1035,7 @@ oecount_hasher::hash (const value_type &p)\n /* Comparison function for oecount.  */\n \n inline bool\n-oecount_hasher::equal (const value_type &p1, const compare_type &p2)\n+oecount_hasher::equal (int p1, int p2)\n {\n   const oecount *c1 = &cvec[p1 - 42];\n   const oecount *c2 = &cvec[p2 - 42];"}, {"sha": "a84b8dae7a3c6a1bc38eec8ba46af8c5f765eb00", "filename": "gcc/value-prof.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0702244b8e0fa5555e20b5554545bab9d06927f/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=e0702244b8e0fa5555e20b5554545bab9d06927f", "patch": "@@ -1248,19 +1248,8 @@ gimple_mod_subtract_transform (gimple_stmt_iterator *si)\n   return true;\n }\n \n-struct profile_id_traits : default_hashmap_traits\n-{\n-  template<typename T>\n-  static bool\n-  is_deleted (T &e)\n-    {\n-      return e.m_key == UINT_MAX;\n-    }\n-\n-  template<typename T> static bool is_empty (T &e) { return e.m_key == 0; }\n-  template<typename T> static void mark_deleted (T &e) { e.m_key = UINT_MAX; }\n-  template<typename T> static void mark_empty (T &e) { e.m_key = 0; }\n-};\n+typedef int_hash <unsigned int, 0, UINT_MAX> profile_id_hash;\n+typedef simple_hashmap_traits <profile_id_hash> profile_id_traits;\n \n static hash_map<unsigned int, cgraph_node *, profile_id_traits> *\n cgraph_node_map = 0;"}]}