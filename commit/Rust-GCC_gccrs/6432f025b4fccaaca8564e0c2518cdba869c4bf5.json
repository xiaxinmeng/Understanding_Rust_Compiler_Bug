{"sha": "6432f025b4fccaaca8564e0c2518cdba869c4bf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQzMmYwMjViNGZjY2FhY2E4NTY0ZTBjMjUxOGNkYmE4NjljNGJmNQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2017-11-08T18:23:35Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-11-08T18:23:35Z"}, "message": "Simplify vec_merge of vec_duplicate with const_vector\n\nI'm trying to improve some of the RTL-level handling of vector lane operations on aarch64 and that\ninvolves dealing with a lot of vec_merge operations. One simplification that I noticed missing\nfrom simplify-rtx are combinations of vec_merge with vec_duplicate.\nIn this particular case:\n(vec_merge (vec_duplicate (X)) (const_vector [A, B]) (const_int N))\n\nwhich can be replaced with\n\n(vec_concat (X) (B)) if N == 1 (0b01) or\n(vec_concat (A) (X)) if N == 2 (0b10).\n\nFor the aarch64 testcase in this patch this simplifications allows us to try to combine:\n(set (reg:V2DI 77 [ x ])\n    (vec_concat:V2DI (mem:DI (reg:DI 0 x0 [ y ]) [1 *y_3(D)+0 S8 A64])\n        (const_int 0 [0])))\n\ninstead of the more complex:\n(set (reg:V2DI 77 [ x ])\n    (vec_merge:V2DI (vec_duplicate:V2DI (mem:DI (reg:DI 0 x0 [ y ]) [1 *y_3(D)+0 S8 A64]))\n        (const_vector:V2DI [\n                (const_int 0 [0])\n                (const_int 0 [0])\n            ])\n        (const_int 1 [0x1])))\n\n\nFor the simplified form above we already have an aarch64 pattern: *aarch64_combinez<mode> which\nis missing a DI/DFmode version due to an oversight, so this patch extends that pattern as well to\nuse the VDC mode iterator that includes DI and DFmode (as well as V2HF which VD_BHSI was missing).\nThe aarch64 hunk is needed to see the benefit of the simplify-rtx.c hunk, so I didn't split them\ninto separate patches.\n\nBefore this for the testcase we'd generate:\nconstruct_lanedi:\n        movi    v0.4s, 0\n        ldr     x0, [x0]\n        ins     v0.d[0], x0\n        ret\n\nconstruct_lanedf:\n        movi    v0.2d, 0\n        ldr     d1, [x0]\n        ins     v0.d[0], v1.d[0]\n        ret\n\nbut now we can generate:\nconstruct_lanedi:\n        ldr     d0, [x0]\n        ret\n\nconstruct_lanedf:\n        ldr     d0, [x0]\n        ret\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\n\n\t* simplify-rtx.c (simplify_ternary_operation, VEC_MERGE):\n\tSimplify vec_merge of vec_duplicate and const_vector.\n\t* config/aarch64/predicates.md (aarch64_simd_or_scalar_imm_zero):\n\tNew predicate.\n\t* config/aarch64/aarch64-simd.md (*aarch64_combinez<mode>): Use VDC\n\tmode iterator.  Update predicate on operand 1 to\n\thandle non-const_vec constants.  Delete constraints.\n\t(*aarch64_combinez_be<mode>): Likewise for operand 2.\n\n\t* gcc.target/aarch64/construct_lane_zero_1.c: New test.\n\nFrom-SVN: r254548", "tree": {"sha": "2b1006da7b7f54b89c6a5965d73c2492f0e04c1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b1006da7b7f54b89c6a5965d73c2492f0e04c1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6432f025b4fccaaca8564e0c2518cdba869c4bf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6432f025b4fccaaca8564e0c2518cdba869c4bf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6432f025b4fccaaca8564e0c2518cdba869c4bf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6432f025b4fccaaca8564e0c2518cdba869c4bf5/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d9a1ba7bbd5bf5b7f5cfe1c88dd38d70ac54bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d9a1ba7bbd5bf5b7f5cfe1c88dd38d70ac54bbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d9a1ba7bbd5bf5b7f5cfe1c88dd38d70ac54bbc"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "d1225c3a94d88781f8aec592e18bbf7729fe139e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6432f025b4fccaaca8564e0c2518cdba869c4bf5", "patch": "@@ -1,3 +1,14 @@\n+2017-11-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* simplify-rtx.c (simplify_ternary_operation, VEC_MERGE):\n+\tSimplify vec_merge of vec_duplicate and const_vector.\n+\t* config/aarch64/predicates.md (aarch64_simd_or_scalar_imm_zero):\n+\tNew predicate.\n+\t* config/aarch64/aarch64-simd.md (*aarch64_combinez<mode>): Use VDC\n+\tmode iterator.  Update predicate on operand 1 to\n+\thandle non-const_vec constants.  Delete constraints.\n+\t(*aarch64_combinez_be<mode>): Likewise for operand 2.\n+\n 2017-11-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/78821"}, {"sha": "34233f68cbae1fe75eb744ef0072aad7ca641883", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=6432f025b4fccaaca8564e0c2518cdba869c4bf5", "patch": "@@ -2940,9 +2940,9 @@\n \n (define_insn \"*aarch64_combinez<mode>\"\n   [(set (match_operand:<VDBL> 0 \"register_operand\" \"=w,w,w\")\n-        (vec_concat:<VDBL>\n-\t   (match_operand:VD_BHSI 1 \"general_operand\" \"w,?r,m\")\n-\t   (match_operand:VD_BHSI 2 \"aarch64_simd_imm_zero\" \"Dz,Dz,Dz\")))]\n+\t(vec_concat:<VDBL>\n+\t  (match_operand:VDC 1 \"general_operand\" \"w,?r,m\")\n+\t  (match_operand:VDC 2 \"aarch64_simd_or_scalar_imm_zero\")))]\n   \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"@\n    mov\\\\t%0.8b, %1.8b\n@@ -2956,8 +2956,8 @@\n (define_insn \"*aarch64_combinez_be<mode>\"\n   [(set (match_operand:<VDBL> 0 \"register_operand\" \"=w,w,w\")\n         (vec_concat:<VDBL>\n-\t   (match_operand:VD_BHSI 2 \"aarch64_simd_imm_zero\" \"Dz,Dz,Dz\")\n-\t   (match_operand:VD_BHSI 1 \"general_operand\" \"w,?r,m\")))]\n+\t  (match_operand:VDC 2 \"aarch64_simd_or_scalar_imm_zero\")\n+\t  (match_operand:VDC 1 \"general_operand\" \"w,?r,m\")))]\n   \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n   \"@\n    mov\\\\t%0.8b, %1.8b"}, {"sha": "84d441a1cf6d3a7a6bf548132195c6105b3bd3a8", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=6432f025b4fccaaca8564e0c2518cdba869c4bf5", "patch": "@@ -364,6 +364,9 @@\n   return aarch64_simd_imm_zero_p (op, mode);\n })\n \n+(define_special_predicate \"aarch64_simd_or_scalar_imm_zero\"\n+  (match_test \"aarch64_simd_imm_zero_p (op, mode)\"))\n+\n (define_special_predicate \"aarch64_simd_imm_minus_one\"\n   (match_code \"const_vector\")\n {"}, {"sha": "94302f6d00962251eab7cdeb7018bfe5f139a876", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=6432f025b4fccaaca8564e0c2518cdba869c4bf5", "patch": "@@ -5749,6 +5749,22 @@ simplify_ternary_operation (enum rtx_code code, machine_mode mode,\n \t\t    return op1;\n \t\t}\n \t    }\n+\t  /* Replace (vec_merge (vec_duplicate (X)) (const_vector [A, B])\n+\t     (const_int N))\n+\t     with (vec_concat (X) (B)) if N == 1 or\n+\t     (vec_concat (A) (X)) if N == 2.  */\n+\t  if (GET_CODE (op0) == VEC_DUPLICATE\n+\t      && GET_CODE (op1) == CONST_VECTOR\n+\t      && CONST_VECTOR_NUNITS (op1) == 2\n+\t      && GET_MODE_NUNITS (GET_MODE (op0)) == 2\n+\t      && IN_RANGE (sel, 1, 2))\n+\t    {\n+\t      rtx newop0 = XEXP (op0, 0);\n+\t      rtx newop1 = CONST_VECTOR_ELT (op1, 2 - sel);\n+\t      if (sel == 2)\n+\t\tstd::swap (newop0, newop1);\n+\t      return simplify_gen_binary (VEC_CONCAT, mode, newop0, newop1);\n+\t    }\n \t}\n \n       if (rtx_equal_p (op0, op1)"}, {"sha": "28894ee07a1603b2a91f2be8155a8b7f0119cd0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6432f025b4fccaaca8564e0c2518cdba869c4bf5", "patch": "@@ -1,3 +1,7 @@\n+2017-11-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/construct_lane_zero_1.c: New test.\n+\n 2017-11-08  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/delta_aggr.adb: New testcase."}, {"sha": "d87f32908280cf7f6ad89d129f0005510ba7cced", "filename": "gcc/testsuite/gcc.target/aarch64/construct_lane_zero_1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fconstruct_lane_zero_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6432f025b4fccaaca8564e0c2518cdba869c4bf5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fconstruct_lane_zero_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fconstruct_lane_zero_1.c?ref=6432f025b4fccaaca8564e0c2518cdba869c4bf5", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef long long v2di __attribute__ ((vector_size (16)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n+\n+v2di\n+construct_lanedi (long long *y)\n+{\n+  v2di x =\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+  { 0, y[0] }\n+#else\n+  { y[0], 0 }\n+#endif\n+  ;\n+  return x;\n+}\n+\n+v2df\n+construct_lanedf (double *y)\n+{\n+  v2df x =\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+  { 0.0, y[0] }\n+#else\n+  { y[0], 0.0 }\n+#endif\n+  ;\n+  return x;\n+}\n+\n+/* Check that creating V2DI and V2DF vectors from a lane with a zero\n+   makes use of the D-reg LDR rather than doing explicit lane inserts.  */\n+\n+/* { dg-final { scan-assembler-times \"ldr\\td\\[0-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-not \"ins\\t\" } } */"}]}