{"sha": "dc8bd8d973f962ff4ea11f455e0daf398aa8d732", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM4YmQ4ZDk3M2Y5NjJmZjRlYTExZjQ1NWUwZGFmMzk4YWE4ZDczMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-10-12T18:43:50Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-10-12T18:43:50Z"}, "message": "driver-i386.c (detect_caches_cpuid2): Use array of registers instead of eax, ebx, ecx and edx.\n\n\t* config/i386/driver-i386.c (detect_caches_cpuid2): Use array\n\tof registers instead of eax, ebx, ecx and edx.  Use for loop\n\tand check register for non-zero value before the call\n\tto decode_caches_intel.\n\nFrom-SVN: r141075", "tree": {"sha": "bbdbc3f42128775fd31f115a9dafdeaa13b85288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbdbc3f42128775fd31f115a9dafdeaa13b85288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc8bd8d973f962ff4ea11f455e0daf398aa8d732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc8bd8d973f962ff4ea11f455e0daf398aa8d732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc8bd8d973f962ff4ea11f455e0daf398aa8d732", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc8bd8d973f962ff4ea11f455e0daf398aa8d732/comments", "author": null, "committer": null, "parents": [{"sha": "ed42adef4426b71f8f8fecac981a19c29335d454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed42adef4426b71f8f8fecac981a19c29335d454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed42adef4426b71f8f8fecac981a19c29335d454"}], "stats": {"total": 63, "additions": 28, "deletions": 35}, "files": [{"sha": "5a206cf932d7126e2ef5d1053fb51e6ee52eeb2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8bd8d973f962ff4ea11f455e0daf398aa8d732/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8bd8d973f962ff4ea11f455e0daf398aa8d732/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc8bd8d973f962ff4ea11f455e0daf398aa8d732", "patch": "@@ -1,3 +1,10 @@\n+2008-10-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/driver-i386.c (detect_caches_cpuid2): Use array\n+\tof registers instead of eax, ebx, ecx and edx.  Use for loop\n+\tand check register for non-zero value before the call\n+\tto decode_caches_intel.\n+\n 2008-10-11  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \tPR rtl-optimization/37448\n@@ -80,31 +87,26 @@\n \tdf_bb_regno_last_def_find, df_find_def, df_find_use,\n \tdf_refs_chain_dump, df_regs_chain_dump, df_ref_debug,\n \tdebug_df_ref): Replaced struct df_ref * with df_ref.\n-\t(df_mws_dump, df_ref_debug): Use macros to hide references to\n-\tdf_refs.\n+\t(df_mws_dump, df_ref_debug): Use macros to hide references to df_refs.\n \t* cse.c (cse_extended_basic_block): Replaced struct df_ref * with\n \tdf_ref.\n \t* web.c (union_defs, entry_register, replace_ref, web_main):\n \tReplaced struct df_ref * with df_ref.\n-\t(union_defs, replace_ref): Use macros to hide references to\n-\tdf_refs.\n+\t(union_defs, replace_ref): Use macros to hide references to df_refs.\n \t* global.c (compute_regs_asm_clobbered, build_insn_chain):\n \tReplaced struct df_ref * with df_ref.\n-\t* ifcvt.c (dead_or_predicable): Replaced struct df_ref * with\n-\tdf_ref.\n+\t* ifcvt.c (dead_or_predicable): Replaced struct df_ref * with df_ref.\n \t* sel-sched-ir.c (maybe_downgrade_id_to_use, setup_id_reg_sets, ):\n \tReplaced struct df_ref * with df_ref.\n \t* ira-lives.c (mark_ref_live, def_conflicts_with_inputs_p,\n \tmark_ref_dead, process_bb_node_lives): Replaced struct df_ref *\n \twith df_ref.\n-\t* local-alloc.c (block_alloc): Replaced struct df_ref * with\n-\tdf_ref.\n+\t* local-alloc.c (block_alloc): Replaced struct df_ref * with df_ref.\n \t* df-byte-scan.c (df_compute_accessed_bytes_extract,\n \tdf_compute_accessed_bytes_strict_low_part,\n \tdf_compute_accessed_bytes_subreg, df_compute_accessed_bytes):\n \tReplaced struct df_ref * with df_ref.\n-\t(df_compute_accessed_bytes): Use macros to hide references to\n-\tdf_refs.\n+\t(df_compute_accessed_bytes): Use macros to hide references to df_refs.\n \t* init-regs.c (initialize_uninitialized_regs): Replaced struct\n \tdf_ref * with df_ref.\n \t* loop-invariant.c (invariant_for_use, hash_invariant_expr_1,\n@@ -117,7 +119,8 @@\n \tiv_analyze, biv_p): Replaced struct df_ref * with df_ref.\n \t(iv_analysis_loop_init, iv_get_reaching_def): Use macros to hide\n \treferences to df_refs.\n-\t* ira.c (compute_regs_asm_clobbered): Replaced struct df_ref * with df_ref.\n+\t* ira.c (compute_regs_asm_clobbered): Replaced struct df_ref *\n+\twith df_ref.\n \t* combine.c (create_log_links): Replaced struct df_ref * with df_ref.\n \t* df-problems.c (df_rd_bb_local_compute_process_def,\n \tdf_lr_bb_local_compute, df_live_bb_local_compute, df_chain_create,\n@@ -130,9 +133,9 @@\n \tdf_byte_lr_simulate_artificial_refs_at_end, df_create_unused_note,\n \tdf_note_bb_compute, df_note_add_problem, df_simulate_defs,\n \tdf_simulate_uses, df_simulate_artificial_refs_at_end,\n-\tdf_simulate_artificial_refs_at_top): Replaced struct df_ref * with df_ref.\n-\t(df_chain_dump): Use macros to hide\n-\treferences to df_refs.\n+\tdf_simulate_artificial_refs_at_top): Replaced struct df_ref * with\n+\tdf_ref.\n+\t(df_chain_dump): Use macros to hide references to df_refs.\n \t* config/mips/mips.c (r10k_simplify_address): Replaced struct\n \tdf_ref * with df_ref.\n \t* dce.c (mark_nonreg_stores, delete_corresponding_reg_eq_notes,"}, {"sha": "29b040598c51fdcdbc117b4e92a5063925170977", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8bd8d973f962ff4ea11f455e0daf398aa8d732/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8bd8d973f962ff4ea11f455e0daf398aa8d732/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=dc8bd8d973f962ff4ea11f455e0daf398aa8d732", "patch": "@@ -230,27 +230,22 @@ static void\n detect_caches_cpuid2 (bool xeon_mp, \n \t\t      struct cache_desc *level1, struct cache_desc *level2)\n {\n-  unsigned eax, ebx, ecx, edx;\n-  int nreps;\n+  unsigned regs[4];\n+  int nreps, i;\n \n-  __cpuid (2, eax, ebx, ecx, edx);\n+  __cpuid (2, regs[0], regs[1], regs[2], regs[3]);\n \n-  nreps = eax & 0x0f;\n-  eax &= ~0x0f;\n+  nreps = regs[0] & 0x0f;\n+  regs[0] &= ~0x0f;\n \n   while (--nreps >= 0)\n     {\n-      if (!((eax >> 31) & 1))\n-\tdecode_caches_intel (eax, xeon_mp, level1, level2);\n-      if (!((ebx >> 31) & 1))\n-\tdecode_caches_intel (ebx, xeon_mp, level1, level2);\n-      if (!((ecx >> 31) & 1))\n-\tdecode_caches_intel (ecx, xeon_mp, level1, level2);\n-      if (!((edx >> 31) & 1))\n-\tdecode_caches_intel (edx, xeon_mp, level1, level2);\n+      for (i = 0; i < 4; i++)\n+\tif (regs[i] && !((regs[i] >> 31) & 1))\n+\t  decode_caches_intel (regs[i], xeon_mp, level1, level2);\n \n       if (nreps)\n-\t__cpuid (2, eax, ebx, ecx, edx);\n+\t__cpuid (2, regs[0], regs[1], regs[2], regs[3]);\n     }\n }\n \n@@ -298,15 +293,10 @@ detect_caches_cpuid4 (struct cache_desc *level1, struct cache_desc *level2)\n \t    if (cache)\n \t      {\n \t\tunsigned sets = ecx + 1;\n-\t\tunsigned part;\n+\t\tunsigned part = ((ebx >> 12) & 0x03ff) + 1;\n \n+\t\tcache->assoc = ((ebx >> 22) & 0x03ff) + 1;\n \t\tcache->line = (ebx & 0x0fff) + 1;\n-\t\tebx >>= 12;\n-\n-\t\tpart = (ebx & 0x03ff) + 1;\n-\t\tebx >>= 10;\n-\n-\t\tcache->assoc = (ebx & 0x03ff) + 1;\n \n \t\tcache->sizekb = (cache->assoc * part\n \t\t\t\t * cache->line * sets) / 1024;"}]}