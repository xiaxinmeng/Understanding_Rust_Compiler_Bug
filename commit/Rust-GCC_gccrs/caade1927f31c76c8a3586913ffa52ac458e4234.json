{"sha": "caade1927f31c76c8a3586913ffa52ac458e4234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FhZGUxOTI3ZjMxYzc2YzhhMzU4NjkxM2ZmYTUyYWM0NThlNDIzNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-07-31T19:26:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-07-31T19:26:58Z"}, "message": "locale_facets.tcc (num_put<>::_M_insert_float): Find the decimal point in cs, instead of ws; tidy.\n\n2006-07-31  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (num_put<>::_M_insert_float):\n\tFind the decimal point in cs, instead of ws; tidy.\n\nFrom-SVN: r115840", "tree": {"sha": "56cb2b5f759ccb30074d76b879d5ad1cdfbb9f46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56cb2b5f759ccb30074d76b879d5ad1cdfbb9f46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caade1927f31c76c8a3586913ffa52ac458e4234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caade1927f31c76c8a3586913ffa52ac458e4234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caade1927f31c76c8a3586913ffa52ac458e4234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caade1927f31c76c8a3586913ffa52ac458e4234/comments", "author": null, "committer": null, "parents": [{"sha": "5fa432a2bc525788ec94e6e26689a66e23c511ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa432a2bc525788ec94e6e26689a66e23c511ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa432a2bc525788ec94e6e26689a66e23c511ba"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "5867a87e68cee846732d84a47e3945538e2f1755", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caade1927f31c76c8a3586913ffa52ac458e4234/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caade1927f31c76c8a3586913ffa52ac458e4234/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=caade1927f31c76c8a3586913ffa52ac458e4234", "patch": "@@ -1,3 +1,8 @@\n+2006-07-31  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (num_put<>::_M_insert_float):\n+\tFind the decimal point in cs, instead of ws; tidy.\n+\n 2006-07-30  Roger Sayle  <roger@eyesopen.com>\n \n \t* include/ext/codevt_specializations.h (__iconv_adaptor): Use"}, {"sha": "38346b73a3a263b751e8c4d600e8ec719b043923", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caade1927f31c76c8a3586913ffa52ac458e4234/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caade1927f31c76c8a3586913ffa52ac458e4234/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=caade1927f31c76c8a3586913ffa52ac458e4234", "patch": "@@ -1114,24 +1114,21 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \tconst __cache_type* __lc = __uc(__loc);\n \n \t// Use default precision if out of range.\n-\tstreamsize __prec = __io.precision();\n-\tif (__prec < static_cast<streamsize>(0))\n-\t  __prec = static_cast<streamsize>(6);\n+\tconst streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();\n \n \tconst int __max_digits = numeric_limits<_ValueT>::digits10;\n \n \t// [22.2.2.2.2] Stage 1, numeric conversion to character.\n \tint __len;\n \t// Long enough for the max format spec.\n \tchar __fbuf[16];\n+\t__num_base::_S_format_float(__io, __fbuf, __mod);\n \n #ifdef _GLIBCXX_USE_C99\n \t// First try a buffer perhaps big enough (most probably sufficient\n \t// for non-ios_base::fixed outputs)\n \tint __cs_size = __max_digits * 3;\n \tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\n-\t__num_base::_S_format_float(__io, __fbuf, __mod);\n \t__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\n \t\t\t\t      __fbuf, __prec, __v);\n \n@@ -1157,8 +1154,6 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \tconst int __cs_size = __fixed ? __max_exp + __prec + 4\n \t                              : __max_digits * 2 + __prec;\n \tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\n-\t__num_base::_S_format_float(__io, __fbuf, __mod);\n \t__len = std::__convert_from_v(_S_get_c_locale(), __cs, 0, __fbuf, \n \t\t\t\t      __prec, __v);\n #endif\n@@ -1172,18 +1167,20 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t__ctype.widen(__cs, __cs + __len, __ws);\n \t\n \t// Replace decimal point.\n-\tconst _CharT __cdec = __ctype.widen('.');\n-\tconst _CharT __dec = __lc->_M_decimal_point;\n-\tconst _CharT* __p = char_traits<_CharT>::find(__ws, __len, __cdec);\n+\t_CharT* __wp = 0;\n+\tconst char* __p = char_traits<char>::find(__cs, __len, '.');\n \tif (__p)\n-\t  __ws[__p - __ws] = __dec;\n+\t  {\n+\t    __wp = __ws + (__p - __cs);\n+\t    *__wp = __lc->_M_decimal_point;\n+\t  }\n \t\n \t// Add grouping, if necessary.\n \t// N.B. Make sure to not group things like 2e20, i.e., no decimal\n \t// point, scientific notation.\n \tif (__lc->_M_use_grouping\n-\t    && (__p || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'\n-\t\t\t\t     && __cs[1] >= '0' && __cs[2] >= '0')))\n+\t    && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'\n+\t\t\t\t      && __cs[1] >= '0' && __cs[2] >= '0')))\n \t  {\n \t    // Grouping can add (almost) as many separators as the\n \t    // number of digits, but no more.\n@@ -1199,7 +1196,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t      }\n \t    \n \t    _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,\n-\t\t\t   __lc->_M_thousands_sep, __p, __ws2 + __off,\n+\t\t\t   __lc->_M_thousands_sep, __wp, __ws2 + __off,\n \t\t\t   __ws + __off, __len);\n \t    __len += __off;\n \t    "}]}