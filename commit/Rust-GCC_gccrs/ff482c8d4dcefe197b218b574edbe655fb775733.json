{"sha": "ff482c8d4dcefe197b218b574edbe655fb775733", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY0ODJjOGQ0ZGNlZmUxOTdiMjE4YjU3NGVkYmU2NTVmYjc3NTczMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-04T20:01:05Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-04T20:01:05Z"}, "message": "darwin.c, [...]: Fix comment formatting.\n\n\t* config/darwin.c, config/darwin.h, config/freebsd-spec.h,\n\tconfig/arm/arm.c, config/arm/arm.md,\n\tconfig/cris/cris-protos.h, config/fr30/fr30.c,\n\tconfig/fr30/fr30.h, config/h8300/h8300.c, config/i386/i386.h,\n\tconfig/i860/i860.c, config/i860/i860.h, config/ia64/ia64-c.c,\n\tconfig/ia64/ia64.c, config/ia64/ia64.h, config/ip2k/ip2k.h,\n\tconfig/ip2k/ip2k.md, config/ip2k/libgcc.S,\n\tconfig/m32r/linux.h, config/m32r/m32r.c, config/m32r/m32r.h,\n\tconfig/m68k/m68k.c, config/m68k/netbsd-elf.h,\n\tconfig/mips/mips.c, config/mmix/mmix.c, config/mmix/mmix.md,\n\tconfig/ns32k/netbsd.h, config/ns32k/ns32k.c,\n\tconfig/ns32k/ns32k.h, config/pdp11/pdp11.h,\n\tconfig/rs6000/darwin-ldouble.c, config/s390/s390.h,\n\tconfig/s390/s390.md, config/sparc/netbsd-elf.h,\n\tconfig/sparc/openbsd.h, config/sparc/sparc.c,\n\tconfig/xtensa/lib2funcs.S: Fix comment formatting.\n\nFrom-SVN: r77268", "tree": {"sha": "185831442339d40a4a823812a8f40b7ada9974be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/185831442339d40a4a823812a8f40b7ada9974be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff482c8d4dcefe197b218b574edbe655fb775733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff482c8d4dcefe197b218b574edbe655fb775733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff482c8d4dcefe197b218b574edbe655fb775733", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff482c8d4dcefe197b218b574edbe655fb775733/comments", "author": null, "committer": null, "parents": [{"sha": "59b9a953b6338358d0346c91b43095875da7eede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b9a953b6338358d0346c91b43095875da7eede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b9a953b6338358d0346c91b43095875da7eede"}], "stats": {"total": 201, "additions": 110, "deletions": 91}, "files": [{"sha": "fff02fd393887fa5a51e58a6d259a5be8f44d68f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -1,3 +1,22 @@\n+2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/darwin.c, config/darwin.h, config/freebsd-spec.h,\n+\tconfig/arm/arm.c, config/arm/arm.md,\n+\tconfig/cris/cris-protos.h, config/fr30/fr30.c,\n+\tconfig/fr30/fr30.h, config/h8300/h8300.c, config/i386/i386.h,\n+\tconfig/i860/i860.c, config/i860/i860.h, config/ia64/ia64-c.c,\n+\tconfig/ia64/ia64.c, config/ia64/ia64.h, config/ip2k/ip2k.h,\n+\tconfig/ip2k/ip2k.md, config/ip2k/libgcc.S,\n+\tconfig/m32r/linux.h, config/m32r/m32r.c, config/m32r/m32r.h,\n+\tconfig/m68k/m68k.c, config/m68k/netbsd-elf.h,\n+\tconfig/mips/mips.c, config/mmix/mmix.c, config/mmix/mmix.md,\n+\tconfig/ns32k/netbsd.h, config/ns32k/ns32k.c,\n+\tconfig/ns32k/ns32k.h, config/pdp11/pdp11.h,\n+\tconfig/rs6000/darwin-ldouble.c, config/s390/s390.h,\n+\tconfig/s390/s390.md, config/sparc/netbsd-elf.h,\n+\tconfig/sparc/openbsd.h, config/sparc/sparc.c,\n+\tconfig/xtensa/lib2funcs.S: Fix comment formatting.\n+\n 2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/alpha/alpha.c, config/arc/arc.c,"}, {"sha": "67641bf3c75ec520d204e9ad7e17bd4511b01766", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -3318,7 +3318,7 @@ thumb_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n     case AND:\n     case XOR:\n     case IOR: \n-      /* XXX guess. */\n+      /* XXX guess.  */\n       return 8;\n \n     case ADDRESSOF:\n@@ -3331,7 +3331,7 @@ thumb_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n \t\t ? 4 : 0));\n \n     case IF_THEN_ELSE:\n-      /* XXX a guess. */\n+      /* XXX a guess.  */\n       if (GET_CODE (XEXP (x, 1)) == PC || GET_CODE (XEXP (x, 2)) == PC)\n \treturn 14;\n       return 2;\n@@ -3759,11 +3759,11 @@ arm_xscale_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  unsigned HOST_WIDE_INT masked_const;\n \n \t  /* The cost will be related to two insns.\n-\t     First a load of the constant (MOV or LDR), then a multiply. */\n+\t     First a load of the constant (MOV or LDR), then a multiply.  */\n \t  cost = 2;\n \t  if (! const_ok)\n \t    cost += 1;      /* LDR is probably more expensive because\n-\t\t\t       of longer result latency. */\n+\t\t\t       of longer result latency.  */\n \t  masked_const = i & 0xffff8000;\n \t  if (masked_const != 0 && masked_const != 0xffff8000)\n \t    {"}, {"sha": "25c9fd44ea1d9b5d5d6e7b9319413c7af5cbe1df", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -2491,7 +2491,7 @@\n         /* Ideally we shouldn't fail here if we could know that operands[1] \n            ends up already living in an iwmmxt register. Otherwise it's\n            cheaper to have the alternate code being generated than moving\n-           values to iwmmxt regs and back. */\n+           values to iwmmxt regs and back.  */\n         FAIL;\n     }\n   else if (!TARGET_REALLY_IWMMXT && !(TARGET_HARD_FLOAT && TARGET_MAVERICK))\n@@ -2550,7 +2550,7 @@\n         /* Ideally we shouldn't fail here if we could know that operands[1] \n            ends up already living in an iwmmxt register. Otherwise it's\n            cheaper to have the alternate code being generated than moving\n-           values to iwmmxt regs and back. */\n+           values to iwmmxt regs and back.  */\n         FAIL;\n     }\n   else if (!TARGET_REALLY_IWMMXT)\n@@ -2606,7 +2606,7 @@\n         /* Ideally we shouldn't fail here if we could know that operands[1] \n            ends up already living in an iwmmxt register. Otherwise it's\n            cheaper to have the alternate code being generated than moving\n-           values to iwmmxt regs and back. */\n+           values to iwmmxt regs and back.  */\n         FAIL;\n     }\n   else if (!TARGET_REALLY_IWMMXT)"}, {"sha": "1fc647383537a19989f0c1999a134211d577acc1", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -52,7 +52,7 @@ extern rtx cris_expand_builtin_va_arg (tree, tree);\n \n extern void cris_pragma_expand_mul (struct cpp_reader *);\n \n-/* Need one that returns an int; usable in expressions. */\n+/* Need one that returns an int; usable in expressions.  */\n extern int cris_fatal (char *);\n \n extern void cris_override_options (void);"}, {"sha": "1e07a0f57dd04412df41e95fae83240d094deea0", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -82,7 +82,7 @@ machopic_classify_ident (tree ident)\n \t\t     && name[5] == '_'));\n   tree temp;\n \n-  /* The PIC base symbol is always defined. */\n+  /* The PIC base symbol is always defined.  */\n   if (! strcmp (name, \"<pic base>\"))\n     return MACHOPIC_DEFINED_DATA;\n \n@@ -245,7 +245,7 @@ machopic_output_function_base_name (FILE *file)\n {\n   const char *current_name;\n \n-  /* If dynamic-no-pic is on, we should not get here. */\n+  /* If dynamic-no-pic is on, we should not get here.  */\n   if (MACHO_DYNAMIC_NO_PIC_P)\n     abort ();\n   current_name ="}, {"sha": "f15eaae4f04ef5297bf28ca1791a6d7ef460caa2", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -710,7 +710,7 @@ objc_section_init (void)\t\t\t\\\n \n /* Emit an assembler directive to set visibility for a symbol.  Used\n    to support visibility attribute and Darwin's private extern\n-   feature. */\n+   feature.  */\n #undef TARGET_ASM_ASSEMBLE_VISIBILITY\n #define TARGET_ASM_ASSEMBLE_VISIBILITY darwin_assemble_visibility\n "}, {"sha": "4b729e8e819e33585c0b87c649c99e9c5f51446f", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -103,16 +103,16 @@ struct rtx_def * fr30_compare_op1;\n    save masks, and offsets for the current function.  */\n struct fr30_frame_info\n {\n-  unsigned int total_size;\t/* # Bytes that the entire frame takes up. */\n-  unsigned int pretend_size;\t/* # Bytes we push and pretend caller did. */\n-  unsigned int args_size;\t/* # Bytes that outgoing arguments take up. */\n-  unsigned int reg_size;\t/* # Bytes needed to store regs. */\n-  unsigned int var_size;\t/* # Bytes that variables take up. */\n+  unsigned int total_size;\t/* # Bytes that the entire frame takes up.  */\n+  unsigned int pretend_size;\t/* # Bytes we push and pretend caller did.  */\n+  unsigned int args_size;\t/* # Bytes that outgoing arguments take up.  */\n+  unsigned int reg_size;\t/* # Bytes needed to store regs.  */\n+  unsigned int var_size;\t/* # Bytes that variables take up.  */\n   unsigned int frame_size;      /* # Bytes in current frame.  */\n-  unsigned int gmask;\t\t/* Mask of saved registers. */\n-  unsigned int save_fp;\t\t/* Nonzero if frame pointer must be saved. */\n-  unsigned int save_rp;\t\t/* Nonzero if return pointer must be saved. */\n-  int          initialised;\t/* Nonzero if frame size already calculated. */\n+  unsigned int gmask;\t\t/* Mask of saved registers.  */\n+  unsigned int save_fp;\t\t/* Nonzero if frame pointer must be saved.  */\n+  unsigned int save_rp;\t\t/* Nonzero if return pointer must be saved.  */\n+  int          initialised;\t/* Nonzero if frame size already calculated.  */\n };\n \n /* Current frame information calculated by fr30_compute_frame_size().  */\n@@ -425,7 +425,7 @@ fr30_setup_incoming_varargs (CUMULATIVE_ARGS arg_regs_used_so_far,\n      statement is probably unnecessary.  */\n   if (targetm.calls.strict_argument_naming (&arg_regs_used_so_far))\n     /* If TARGET_STRICT_ARGUMENT_NAMING returns true, then the last named\n-       arg must not be treated as an anonymous arg. */\n+       arg must not be treated as an anonymous arg.  */\n     arg_regs_used_so_far += fr30_num_arg_regs (int_mode, type);\n   \n   size = FR30_NUM_ARG_REGS - arg_regs_used_so_far;"}, {"sha": "0d498d706ccf76d36caf2ec5e757a6df8cd0c26b", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -39,7 +39,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Define this to be a string constant containing `-D' options to define the\n    predefined macros that identify this machine and system.  These macros will\n-   be predefined unless the `-ansi' option is specified. */\n+   be predefined unless the `-ansi' option is specified.  */\n \n #define TARGET_CPU_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n@@ -661,7 +661,7 @@ enum reg_class\n    - if the type has variable size\n    - if the type is marked as addressable (it is required to be constructed\n      into the stack)\n-   - if the type is a structure or union. */\n+   - if the type is a structure or union.  */\n \n #define MUST_PASS_IN_STACK(MODE, TYPE)\t\t\t\t\\\n    (((MODE) == BLKmode)\t\t\t\t\t\t\\\n@@ -801,7 +801,7 @@ enum reg_class\n #define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, RETURN_VALUE_REGNUM)\n \n /* A C expression that is nonzero if REGNO is the number of a hard register in\n-   which the values of called function may come back. */\n+   which the values of called function may come back.  */\n \n #define FUNCTION_VALUE_REGNO_P(REGNO) ((REGNO) == RETURN_VALUE_REGNUM)\n "}, {"sha": "6195c08aa5cac124f7a50180e74c5872cce1be1a", "filename": "gcc/config/freebsd-spec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Ffreebsd-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Ffreebsd-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd-spec.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -70,7 +70,7 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Define the default FreeBSD-specific per-CPU hook code. */\n+/* Define the default FreeBSD-specific per-CPU hook code.  */\n #define FBSD_TARGET_CPU_CPP_BUILTINS() do {} while (0)\n \n /* Provide a CPP_SPEC appropriate for FreeBSD.  We just deal with the GCC "}, {"sha": "668f273f363c94852a426f52cf7206d0c3303e3b", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -4419,7 +4419,7 @@ h8300_asm_named_section (const char *name, unsigned int flags ATTRIBUTE_UNUSED)\n int\n h8300_eightbit_constant_address_p (rtx x)\n {\n-  /* The ranges of the 8-bit area. */\n+  /* The ranges of the 8-bit area.  */\n   const unsigned HOST_WIDE_INT n1 = trunc_int_for_mode (0xff00, HImode);\n   const unsigned HOST_WIDE_INT n2 = trunc_int_for_mode (0xffff, HImode);\n   const unsigned HOST_WIDE_INT h1 = trunc_int_for_mode (0x00ffff00, SImode);"}, {"sha": "a2ef75e93ac58a784621f34c70e97081d6a606bb", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -1919,7 +1919,7 @@ typedef struct ix86_args {\n    been eliminated by then.  */\n \n \n-/* Non strict versions, pseudos are ok */\n+/* Non strict versions, pseudos are ok.  */\n #define REG_OK_FOR_INDEX_NONSTRICT_P(X)\t\t\t\t\t\\\n   (REGNO (X) < STACK_POINTER_REGNUM\t\t\t\t\t\\\n    || (REGNO (X) >= FIRST_REX_INT_REG\t\t\t\t\t\\"}, {"sha": "1ee9e4edb9b09adae9be0f87f0a647ecdef0837d", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -1165,7 +1165,7 @@ output_block_move (rtx *operands)\n   output_asm_insn (\"bla %5,%2,.Lm%3\", xoperands);\n   output_asm_insn (\"adds %0,%2,%6\", xoperands);\n   output_asm_insn (\"\\n.Lm%3:\", xoperands);\t    /* Label for bla above.  */\n-  output_asm_insn (\"\\n.Ls%3:\",  xoperands);\t    /* Loop start label. */\n+  output_asm_insn (\"\\n.Ls%3:\",  xoperands);\t    /* Loop start label.  */\n   output_asm_insn (\"adds %5,%6,%6\", xoperands);\n \n   /* NOTE:  The code here which is supposed to handle the cases where the"}, {"sha": "61db1fc093cd5d3fe71174003dbb76c838343818", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -824,7 +824,7 @@ struct cumulative_args { int ints, floats; };\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Define this as 1 if `char' should by default be signed; else as 0.  */"}, {"sha": "b1e617b3b4f34b748a01171a4d5c3aa3dc8b0ead", "filename": "gcc/config/ia64/ia64-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fia64%2Fia64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fia64%2Fia64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-c.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -60,7 +60,7 @@ ia64_hpux_handle_builtin_pragma (cpp_reader *pfile ATTRIBUTE_UNUSED)\n typedef struct c89_mathlib_names\n {\n         const char *realname; /* User visible function name.  */\n-        const char *c89name;  /* libm special name needed to set errno. */\n+        const char *c89name;  /* libm special name needed to set errno.  */\n } c89_mathlib_names;\n \n static const c89_mathlib_names c89_mathlib_name_list [] ="}, {"sha": "e7800b40b329e7d60abbf66629cc115021dea58a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -1525,7 +1525,7 @@ ia64_split_tmode (rtx out[2], rtx in, bool reversed, bool dead)\n \t      {\n \t\t/* Again the postmodify cannot be made to match, but\n \t\t   in this case it's more efficient to get rid of the\n-\t\t   postmodify entirely and fix up with an add insn. */\n+\t\t   postmodify entirely and fix up with an add insn.  */\n \t\tout[1] = adjust_automodify_address (in, DImode, base, 8);\n \t\tfixup = gen_adddi3 (base, base,\n \t\t\t\t    GEN_INT (INTVAL (XEXP (offset, 1)) - 8));\n@@ -6827,7 +6827,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n   initiate_bundle_state_table ();\n   index_to_bundle_states = xmalloc ((insn_num + 2)\n \t\t\t\t    * sizeof (struct bundle_state *));\n-  /* First (forward) pass -- generation of bundle states. */\n+  /* First (forward) pass -- generation of bundle states.  */\n   curr_state = get_free_bundle_state ();\n   curr_state->insn = NULL;\n   curr_state->before_nops_num = 0;\n@@ -7424,7 +7424,7 @@ ia64_ld_address_bypass_p (rtx producer, rtx consumer)\n \n /* The following function returns TRUE if INSN produces address for a\n    load/store insn.  We will place such insns into M slot because it\n-   decreases its latency time. */\n+   decreases its latency time.  */\n \n int\n ia64_produce_address_p (rtx insn)"}, {"sha": "cc218385756e44967e906d951607b79d806911d5", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -90,7 +90,7 @@ extern int target_flags;\n \n #define MASK_INLINE_SQRT_LAT      0x00008000 /* inline sqrt, min latency.  */\n \n-#define MASK_INLINE_SQRT_THR      0x00010000 /* inline sqrt, max throughput. */\n+#define MASK_INLINE_SQRT_THR      0x00010000 /* inline sqrt, max throughput.  */\n \n #define MASK_DWARF2_ASM 0x00020000\t/* test dwarf2 line info via gas.  */\n \n@@ -251,7 +251,7 @@ extern const char *ia64_tls_size_string;\n \n enum processor_type\n {\n-  PROCESSOR_ITANIUM,\t\t\t/* Original Itanium. */\n+  PROCESSOR_ITANIUM,\t\t\t/* Original Itanium.  */\n   PROCESSOR_ITANIUM2,\n   PROCESSOR_max\n };"}, {"sha": "1ed494fa2d9b7dae8e0c5808f75f237f7a20223b", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -862,7 +862,7 @@ extern int ip2k_reorg_merge_qimode;\n \n #define DBX_REGISTER_NUMBER(REGNO)\t(REGNO)\n \n-/* Miscellaneous macros to describe machine specifics. */\n+/* Miscellaneous macros to describe machine specifics.  */\n \n #define IS_PSEUDO_P(R)\t(REGNO (R) >= FIRST_PSEUDO_REGISTER)\n "}, {"sha": "76ae67e525976ee1919066e517d3cb681759d251", "filename": "gcc/config/ip2k/ip2k.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fip2k%2Fip2k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fip2k%2Fip2k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.md?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -975,7 +975,7 @@\n \t\t        0xff & ~mask);\n \n \t  if (CONSTANT_P (operands[3]))\n-\t  /* Constant can just be or-ed in. */\n+\t  /* Constant can just be or-ed in.  */\n \t    {\n \t      p += sprintf (p, \\\"mov\\\\tw,#$%2.2x\\;or\\\\t%%0,w\\\",\n \t\t            (int) (INTVAL (operands[3]) << pos) & mask & 0xff);\n@@ -984,7 +984,7 @@\n \n \t  p += sprintf (p, \\\"mov\\\\tw,%%3\\;\\\"); /* Value to deposit */\n \n-\t  /* Shift and mask the value before OR-ing into the destination. */\n+\t  /* Shift and mask the value before OR-ing into the destination.  */\n \n           if (pos != 0)\n \t    p += sprintf (p, \\\"mulu\\\\tw,#%d\\;\\\", 1<<pos);\n@@ -1084,7 +1084,7 @@\n      {\n        /* It is not impossible to wind up with two constants here.\n           If we simply emit the ashl, we'll generate unrecognizable\n-\t  instructions. */\n+\t  instructions.  */\n        if (! nonimmediate_operand (operands[1], HImode))\n          operands[1] = copy_to_mode_reg (HImode, operands[1]);\n        emit_insn (gen_ashlhi3 (operands[0], operands[1], const1_rtx));"}, {"sha": "4db7e10d1095b6571b5767ce5a29147e8cf001f4", "filename": "gcc/config/ip2k/libgcc.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fip2k%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fip2k%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Flibgcc.S?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -1498,7 +1498,7 @@ _abort:\n #endif\n \n #if defined(Lwrite)\n-\t/* Dummy entrypoint to suppress problems with glue code. */\n+\t/* Dummy entrypoint to suppress problems with glue code.  */\n \t.sect\t.text.libgcc,\"ax\"\n \t.global\t_write\n \t.func\twrite, _write"}, {"sha": "b36719de047a686bad8d21bdea253c46ba2dcf69", "filename": "gcc/config/m32r/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fm32r%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fm32r%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Flinux.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -57,7 +57,7 @@\n    When the -shared link option is used a final link is not being\n    done.  */\n \n-/* If ELF is the default format, we should not use /lib/elf. */\n+/* If ELF is the default format, we should not use /lib/elf.  */\n \n #undef\tLINK_SPEC\n #if TARGET_LITTLE_ENDIAN"}, {"sha": "9ebae494f62dd975078e7144d3474d2c0fc3a59d", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -2034,7 +2034,7 @@ m32r_output_function_prologue (FILE * file, HOST_WIDE_INT size)\n }\n \f\n /* Do any necessary cleanup after a function to restore stack, frame,\n-   and regs. */\n+   and regs.  */\n \n static void\n m32r_output_function_epilogue (FILE * file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n@@ -2724,7 +2724,7 @@ emit_cond_move (rtx * operands, rtx insn ATTRIBUTE_UNUSED)\n }\n \n /* Returns true if the registers contained in the two\n-   rtl expressions are different. */\n+   rtl expressions are different.  */\n \n int\n m32r_not_same_reg (rtx a, rtx b)"}, {"sha": "3ecfc8f2dd23d39fcb4201a9ecbd49ce06342d3e", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -1028,7 +1028,7 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    SIZE is the number of bytes of arguments passed on the stack.  */\n #define RETURN_POPS_ARGS(DECL, FUNTYPE, SIZE) 0\n \n-/* Nonzero if we do not know how to pass TYPE solely in registers. */\n+/* Nonzero if we do not know how to pass TYPE solely in registers.  */\n #define MUST_PASS_IN_STACK(MODE, TYPE)\t\t\t\\\n   ((TYPE) != 0\t\t\t\t\t\t\\\n    && (TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST\t\\\n@@ -1728,7 +1728,7 @@ extern char m32r_punct_chars[256];\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n /* It's not clear what PIC will look like or whether we want to use -fpic\n    for the embedded form currently being talked about.  For now require -fpic\n    to get pc relative switch tables.  */"}, {"sha": "28308b3e5a9e7aef1270102f08ffe4a22abb0c68", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -58,7 +58,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n \n-/* Structure describing stack frame layout. */\n+/* Structure describing stack frame layout.  */\n struct m68k_frame\n {\n   /* Stack pointer to frame pointer offset.  */"}, {"sha": "f9f4d128e3ad7f8ac7d0a38c2d110db864ee57a8", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -316,7 +316,7 @@ while (0)\n    function.  VALTYPE is the data type of the value (as a tree).  If\n    the precise function being called is known, FUNC is its\n    FUNCTION_DECL; otherwise, FUNC is 0.  For m68k/SVR4 generate the\n-   result in d0, a0, or fp0 as appropriate. */\n+   result in d0, a0, or fp0 as appropriate.  */\n \n #undef FUNCTION_VALUE\n #define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\t\\\n@@ -359,14 +359,14 @@ while (0)\n \n \n /* Boundary (in *bits*) on which stack pointer should be aligned.\n-   The m68k/SVR4 convention is to keep the stack pointer longword aligned. */\n+   The m68k/SVR4 convention is to keep the stack pointer longword aligned.  */\n \n #undef STACK_BOUNDARY\n #define STACK_BOUNDARY 32\n \n \n /* Alignment of field after `int : 0' in a structure.\n-   For m68k/SVR4, this is the next longword boundary. */\n+   For m68k/SVR4, this is the next longword boundary.  */\n \n #undef EMPTY_FIELD_BOUNDARY\n #define EMPTY_FIELD_BOUNDARY 32\n@@ -381,7 +381,7 @@ while (0)\n \n \n /* For m68k SVR4, structures are returned using the reentrant\n-   technique. */\n+   technique.  */\n \n #undef PCC_STATIC_STRUCT_RETURN\n "}, {"sha": "689d6fe72d64bbc215b8590b5c6756f8baa69f5f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -2909,13 +2909,13 @@ gen_int_relational (enum rtx_code test_code, rtx result, rtx cmp0,\n   if (mode == VOIDmode)\n     mode = GET_MODE (cmp1);\n \n-  /* Eliminate simple branches */\n+  /* Eliminate simple branches.  */\n   branch_p = (result == 0);\n   if (branch_p)\n     {\n       if (GET_CODE (cmp0) == REG || GET_CODE (cmp0) == SUBREG)\n \t{\n-\t  /* Comparisons against zero are simple branches */\n+\t  /* Comparisons against zero are simple branches.  */\n \t  if (GET_CODE (cmp1) == CONST_INT && INTVAL (cmp1) == 0\n \t      && (! TARGET_MIPS16 || eqne_p))\n \t    return 0;"}, {"sha": "f5f1bd31d7b9e730940d48a17c16ca287d6784f3", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -246,7 +246,7 @@ mmix_init_machine_status (void)\n /* DATA_ALIGNMENT.\n    We have trouble getting the address of stuff that is located at other\n    than 32-bit alignments (GETA requirements), so try to give everything\n-   at least 32-bit alignment. */\n+   at least 32-bit alignment.  */\n \n int\n mmix_data_alignment (tree type ATTRIBUTE_UNUSED, int basic_align)\n@@ -1269,7 +1269,7 @@ mmix_file_start (void)\n \n   fputs (\"! mmixal:= 8H LOC Data_Section\\n\", asm_out_file);\n \n-  /* Make sure each file starts with the text section. */\n+  /* Make sure each file starts with the text section.  */\n   text_section ();\n }\n \n@@ -1278,7 +1278,7 @@ mmix_file_start (void)\n static void\n mmix_file_end (void)\n {\n-  /* Make sure each file ends with the data section. */\n+  /* Make sure each file ends with the data section.  */\n   data_section ();\n }\n "}, {"sha": "389b243ea9e08be05b7c92a61a4fc373055e344a", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -871,7 +871,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n     = mmix_gen_compare_reg (LE, mmix_compare_op0, mmix_compare_op1);\n \n   /* The head comment of optabs.c:can_compare_p says we're required to\n-     implement this, so we have to clean up the mess here. */\n+     implement this, so we have to clean up the mess here.  */\n   if (operands[1] == NULL_RTX)\n     {\n       /* FIXME: Watch out for sharing/unsharing of rtx:es.  */\n@@ -893,7 +893,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n     = mmix_gen_compare_reg (GE, mmix_compare_op0, mmix_compare_op1);\n \n   /* The head comment of optabs.c:can_compare_p says we're required to\n-     implement this, so we have to clean up the mess here. */\n+     implement this, so we have to clean up the mess here.  */\n   if (operands[1] == NULL_RTX)\n     {\n       /* FIXME: Watch out for sharing/unsharing of rtx:es.  */"}, {"sha": "1484214c103f2e781b703a54a13b44c917534d5b", "filename": "gcc/config/ns32k/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fnetbsd.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -52,7 +52,7 @@ Boston, MA 02111-1307, USA.  */\n /* 32532 spec says it can handle any alignment.  Rumor from tm-ns32k.h\n    tells this might not be actually true (but it's for 32032, perhaps\n    National has fixed the bug for 32532).  You might have to change this\n-   if the bug still exists. */\n+   if the bug still exists.  */\n \n #undef STRICT_ALIGNMENT\n #define STRICT_ALIGNMENT 0"}, {"sha": "5eb6ce091138be658a18e49d6583ee6780e68ee3", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -543,7 +543,7 @@ register_move_cost (enum reg_class CLASS1, enum reg_class CLASS2)\n \n #if 0\n /* We made the insn definitions copy from floating point to general\n-  registers via the stack. */\n+  registers via the stack.  */\n int\n secondary_memory_needed (enum reg_class CLASS1,\n \t\t\t enum reg_class CLASS2,\n@@ -558,7 +558,7 @@ secondary_memory_needed (enum reg_class CLASS1,\n \n /* TARGET_ADDRESS_COST calls this.  This function is not optimal\n    for the 32032 & 32332, but it probably is better than\n-   the default. */\n+   the default.  */\n \n static int\n ns32k_address_cost (rtx operand)\n@@ -882,7 +882,7 @@ expand_block_move (rtx operands[])\n \t      /* Use movmd. It is slower than multiple movd's but more\n \t\t compact. It is also slower than movsd for large copies\n \t\t but causes less registers reloading so is better than movsd\n-\t\t for small copies. */\n+\t\t for small copies.  */\n \t      rtx src, dest;\n \t      dest = copy_addr_to_reg (XEXP (operands[0], 0));\n \t      src = copy_addr_to_reg (XEXP (operands[1], 0));"}, {"sha": "96a6a37a1675d2fc01504f8db0558c6373130f66", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -40,7 +40,7 @@ Boston, MA 02111-1307, USA.  */\n       else if (TARGET_32081)\t\t\t\t\\\n \tbuiltin_define (\"__ns32081__\");\t\t\t\\\n \t\t\t\t\t\t\t\\\n-      /* Misc. */\t\t\t\t\t\\\n+      /* Misc.  */\t\t\t\t\t\\\n       if (TARGET_RTD)\t\t\t\t\t\\\n \tbuiltin_define (\"__RTD__\");\t\t\t\\\n \t\t\t\t\t\t\t\\\n@@ -56,7 +56,7 @@ Boston, MA 02111-1307, USA.  */\n /* ABSOLUTE PREFIX, IMMEDIATE_PREFIX and EXTERNAL_PREFIX can be defined\n    to cover most NS32k addressing syntax variations.  This way we don't\n    need to redefine long macros in all the tm.h files for just slight\n-   variations in assembler syntax. */\n+   variations in assembler syntax.  */\n \n #ifndef ABSOLUTE_PREFIX\n #define ABSOLUTE_PREFIX '@'\n@@ -360,10 +360,10 @@ while (0)\n /* NS32000 pc is not overloaded on a register.  */\n /* #define PC_REGNUM */\n \n-/* Register to use for pushing function arguments. */\n+/* Register to use for pushing function arguments.  */\n #define STACK_POINTER_REGNUM 25\n \n-/* Base register for access to local variables of the function. */\n+/* Base register for access to local variables of the function.  */\n #define FRAME_POINTER_REGNUM 24\n \n \n@@ -383,7 +383,7 @@ while (0)\n /* Value is 1 if it is a good idea to tie two pseudo registers\n    when one has mode MODE1 and one has mode MODE2.\n    If HARD_REGNO_MODE_OK could produce different values for MODE1 and MODE2,\n-   for any hard reg, then this must be 0 for correct output. */\n+   for any hard reg, then this must be 0 for correct output.  */\n \n #define MODES_TIEABLE_P(MODE1, MODE2)\t\t\t\t\t\\\n   ((FLOAT_MODE_P(MODE1) && FLOAT_MODE_P(MODE2)\t\t\t\t\\\n@@ -1102,13 +1102,13 @@ __transfer_from_trampoline ()\t\t\\\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.\n    HI mode is more efficient but the range is not wide enough for\n-   all programs. */\n+   all programs.  */\n #define CASE_VECTOR_MODE SImode\n \n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n@@ -1264,7 +1264,7 @@ __transfer_from_trampoline ()\t\t\\\n /* This is how to output an assembler line defining an external/static\n    address which is not in tree format (for collect.c).  */\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n #define USER_LABEL_PREFIX \"_\"\n \n /* This is how to output an insn to push a register on the stack."}, {"sha": "d54146fa005e806389f2e1d2bbca0f22cf2c0af7", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -170,7 +170,7 @@ extern int target_flags;\n /* Define this if most significant word of a multiword number is first.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Define that floats are in VAX order, not high word first as for ints. */\n+/* Define that floats are in VAX order, not high word first as for ints.  */\n #define FLOAT_WORDS_BIG_ENDIAN 0\n \n /* Width of a word, in units (bytes). \n@@ -883,7 +883,7 @@ extern int may_call_alloca;\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n@@ -908,7 +908,7 @@ extern int may_call_alloca;\n \n /* Give a comparison code (EQ, NE etc) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  For floating-point, CCFPmode\n-   should be used. */\n+   should be used.  */\n \n #define SELECT_CC_MODE(OP,X,Y)\t\\\n (GET_MODE_CLASS(GET_MODE(X)) == MODE_FLOAT? CCFPmode : CCmode)\n@@ -1013,7 +1013,7 @@ extern struct rtx_def *cc0_reg_rtx;\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \"\\t.globl \"\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #define USER_LABEL_PREFIX \"_\"\n \n@@ -1034,7 +1034,7 @@ extern struct rtx_def *cc0_reg_rtx;\n   fprintf (FILE, \"\\t%sL_%d\\n\", TARGET_UNIX_ASM ? \"\" : \".word \", VALUE)\n \n /* This is how to output an element of a case-vector that is relative.\n-   Don't define this if it is not supported. */\n+   Don't define this if it is not supported.  */\n \n /* #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL) */\n "}, {"sha": "678b93f23927803d8eb689484c139b258a2aabbe", "filename": "gcc/config/rs6000/darwin-ldouble.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -95,7 +95,7 @@ _xlqadd (double a, double b, double c, double d)\n       d = tau;\n     }\n \n-  /* b <- second largest magnitude double. */\n+  /* b <- second largest magnitude double.  */\n   if (fabs (c) > fabs (b))\n     {\n       t = b;\n@@ -104,7 +104,7 @@ _xlqadd (double a, double b, double c, double d)\n     }\n \n   /* Thanks to commutativity, sum is invariant w.r.t. the next\n-     conditional exchange. */\n+     conditional exchange.  */\n   tau = d + c;\n \n   /* Order the smallest magnitude doubles.  */\n@@ -183,18 +183,18 @@ _xlqdiv (double a, double b, double c, double d)\n \n   /* Finite nonzero result requires corrections to the highest order term.  */\n \n-  s = c * t;                    /* (s,sigma) = c*t exactly. */\n+  s = c * t;                    /* (s,sigma) = c*t exactly.  */\n   w = -(-b + d * t);\t/* Written to get fnmsub for speed, but not\n \t\t\t   numerically necessary.  */\n   \n   /* Use fused multiply-add to get low part of c * t.\t */\n   asm (\"fmsub %0,%1,%2,%3\" : \"=f\"(sigma) : \"f\"(c), \"f\"(t), \"f\"(s));\n   v = a - s;\n   \n-  tau = ((v-sigma)+w)/c;   /* Correction to t. */\n+  tau = ((v-sigma)+w)/c;   /* Correction to t.  */\n   u = t + tau;\n \n-  /* Construct long double result. */\n+  /* Construct long double result.  */\n   z.dval[0] = u;\n   z.dval[1] = (t - u) + tau;\n   return z.ldval;"}, {"sha": "04225d341b7b5329c178463fd338a6c8b3c80aab", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -876,7 +876,7 @@ extern struct rtx_def *s390_compare_op0, *s390_compare_op1;\n #define SLOW_BYTE_ACCESS 1\n \n /* The maximum number of bytes that a single instruction can move quickly\n-   between memory and registers or between two memory locations. */\n+   between memory and registers or between two memory locations.  */\n #define MOVE_MAX (TARGET_64BIT ? 16 : 8)\n #define MAX_MOVE_MAX 16\n "}, {"sha": "794a52fcd591a1f1c9d9ba8dbe3c3c02fca71cde", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -7318,7 +7318,7 @@\n   rtx temp = gen_reg_rtx (Pmode);\n \n   /* Copy the backchain to the first word, sp to the second and the literal pool\n-     base to the third. */\n+     base to the third.  */\n   emit_move_insn (operand_subword (operands[0], 2, 0,\n                   TARGET_64BIT ? OImode : TImode),\n                   gen_rtx_REG (Pmode, BASE_REGISTER));\n@@ -7341,7 +7341,7 @@\n   rtx base = gen_rtx_REG (Pmode, BASE_REGISTER);\n \n   /* Restore the backchain from the first word, sp from the second and the\n-     literal pool base from the third. */\n+     literal pool base from the third.  */\n   emit_move_insn (temp,\n                  operand_subword (operands[1], 0, 0,\n                  TARGET_64BIT ? OImode : TImode));"}, {"sha": "4e191a5aeaa80b52df105bbd66bb960a18baa9ac", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -241,7 +241,7 @@ Boston, MA 02111-1307, USA.  */\n #define MULTILIB_DEFAULTS { \"m64\" }\n #endif\n \n-/* Name the port. */\n+/* Name the port.  */\n #undef TARGET_NAME\n #define TARGET_NAME     (DEFAULT_ARCH32_P ? TARGET_NAME32 : TARGET_NAME64)\n "}, {"sha": "6bd683abdc37b45b560cc230746a6a818dcdeeb5", "filename": "gcc/config/sparc/openbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fsparc%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fsparc%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fopenbsd.h?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -62,7 +62,7 @@ Boston, MA 02111-1307, USA.  */\n /* Assembler format: exception region output.  */\n \n /* All configurations that don't use elf must be explicit about not using\n-   dwarf unwind information. */\n+   dwarf unwind information.  */\n #define DWARF2_UNWIND_INFO 0\n \n #undef ASM_PREFERRED_EH_DATA_FORMAT"}, {"sha": "e8cf905337828344e8e73bd418f6ef6141c805c5", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -7937,7 +7937,7 @@ sparc_init_libfuncs (void)\n       /* Use the subroutines that Sun's library provides for integer\n \t multiply and divide.  The `*' prevents an underscore from\n \t being prepended by the compiler. .umul is a little faster\n-\t than .mul. */\n+\t than .mul.  */\n       set_optab_libfunc (smul_optab, SImode, \"*.umul\");\n       set_optab_libfunc (sdiv_optab, SImode, \"*.div\");\n       set_optab_libfunc (udiv_optab, SImode, \"*.udiv\");\n@@ -8348,7 +8348,7 @@ sparc_rtx_costs (rtx x, int code, int outer_code, int *total)\n       return true;\n \n     case IF_THEN_ELSE:\n-      /* Conditional moves. */\n+      /* Conditional moves.  */\n       switch (sparc_cpu)\n \t{\n \tcase PROCESSOR_ULTRASPARC:"}, {"sha": "f98e9feac0f4da5098fb772f2aa1f8e518921308", "filename": "gcc/config/xtensa/lib2funcs.S", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fxtensa%2Flib2funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482c8d4dcefe197b218b574edbe655fb775733/gcc%2Fconfig%2Fxtensa%2Flib2funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flib2funcs.S?ref=ff482c8d4dcefe197b218b574edbe655fb775733", "patch": "@@ -32,7 +32,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* __xtensa_libgcc_window_spill: This function flushes out all but the\n    current register window.  This is used to set up the stack so that\n-   arbitrary frames can be accessed. */\n+   arbitrary frames can be accessed.  */\n \n \t.align\t4\n \t.global\t__xtensa_libgcc_window_spill\n@@ -91,7 +91,7 @@ __xtensa_nonlocal_goto:\n \t   function.  This can be extracted from the high bits of the\n \t   return address, initially in a0.  As the unwinding\n \t   proceeds, the window size is taken from the value of a0\n-\t   saved _two_ frames below the current frame. */\n+\t   saved _two_ frames below the current frame.  */\n \n \taddi\ta5, sp, -16\t\t# a5 = prev - save area\n \tl32i\ta6, a5, 4\n@@ -112,7 +112,7 @@ __xtensa_nonlocal_goto:\n \t   current sp so they will be reloaded when the return from this\n \t   function underflows.  We don't have to worry about exceptions\n \t   while updating the current save area, because the windows have\n-\t   already been flushed. */\n+\t   already been flushed.  */\n \n \taddi\ta4, sp, -16\t\t# a4 = save area of this function\n \tl32i\ta6, a5, 0\n@@ -125,7 +125,7 @@ __xtensa_nonlocal_goto:\n \ts32i\ta7, a4, 12\n \t\n \t/* Set return address to goto handler.  Use the window size bits\n-\t   from the return address two frames below the target. */\n+\t   from the return address two frames below the target.  */\n \textui\ta8, a8, 30, 2\t\t# get window size from return addr.\n \tslli\ta3, a3, 2\t\t# get goto handler addr. << 2\n \tssai\t2\n@@ -149,7 +149,7 @@ __xtensa_nonlocal_goto:\n    At least one IHI instruction is needed for each i-cache line which may\n    be touched by the trampoline.  An ISYNC instruction is also needed to\n    make sure that the modified instructions are loaded into the instruction\n-   fetch buffer. */\n+   fetch buffer.  */\n \n #define TRAMPOLINE_SIZE 59\n "}]}