{"sha": "221ee7c920c3eb45da77f01f82c4611798473fcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIxZWU3YzkyMGMzZWI0NWRhNzdmMDFmODJjNDYxMTc5ODQ3M2ZjZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-23T14:10:58Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-23T14:10:58Z"}, "message": "Makefile.in (opts.o): Depend on target.h.\n\n\t* Makefile.in (opts.o): Depend on target.h.\n\t* opts.c (decode_options): Use targetm.default_short_enums\n\tinstead of DEFAULT_SHORT_ENUMS.\n\t* system.h (DEFAULT_SHORT_ENUMS): Poison.\n\t* target-def.h (TARGET_DEFAULT_SHORT_ENUMS): New.\n\t(TARGET_INITIALIZER): Add TARGET_DEFAULT_SHORT_ENUMS.\n\t* target.h (gcc_target): Add default_short_enums.\n\t* config/cris/cris.h: Remove a comment about\n\tDEFAULT_SHORT_ENUMS.\n\t* config/ip2k/ip2k.h: Likewise.\n\t* doc/tm.texi (DEFAULT_SHORT_ENUMS): Change to\n\tTARGET_DEFAULT_SHORT_ENUMS.  Update the description.\n\nFrom-SVN: r78303", "tree": {"sha": "684973460c4b2cce9b47cff5b069f2fbfe37d61d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/684973460c4b2cce9b47cff5b069f2fbfe37d61d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/221ee7c920c3eb45da77f01f82c4611798473fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/221ee7c920c3eb45da77f01f82c4611798473fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/221ee7c920c3eb45da77f01f82c4611798473fcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/221ee7c920c3eb45da77f01f82c4611798473fcf/comments", "author": null, "committer": null, "parents": [{"sha": "9bdfe70405125e57b5ef92bba66eb268c43ab1d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bdfe70405125e57b5ef92bba66eb268c43ab1d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bdfe70405125e57b5ef92bba66eb268c43ab1d4"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "17ee9e2c9e7825ff5bf97d7cd269184d4ef670d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=221ee7c920c3eb45da77f01f82c4611798473fcf", "patch": "@@ -1,3 +1,18 @@\n+2004-02-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* Makefile.in (opts.o): Depend on target.h.\n+\t* opts.c (decode_options): Use targetm.default_short_enums\n+\tinstead of DEFAULT_SHORT_ENUMS.\n+\t* system.h (DEFAULT_SHORT_ENUMS): Poison.\n+\t* target-def.h (TARGET_DEFAULT_SHORT_ENUMS): New.\n+\t(TARGET_INITIALIZER): Add TARGET_DEFAULT_SHORT_ENUMS.\n+\t* target.h (gcc_target): Add default_short_enums.\n+\t* config/cris/cris.h: Remove a comment about\n+\tDEFAULT_SHORT_ENUMS.\n+\t* config/ip2k/ip2k.h: Likewise.\n+\t* doc/tm.texi (DEFAULT_SHORT_ENUMS): Change to\n+\tTARGET_DEFAULT_SHORT_ENUMS.  Update the description.\n+\n 2004-02-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n             Falk Hueffner  <falk@debian.org>\n "}, {"sha": "f394b5f66af91d0fe0bcc681b9e339b6ac798ab4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=221ee7c920c3eb45da77f01f82c4611798473fcf", "patch": "@@ -1524,7 +1524,7 @@ diagnostic.o : diagnostic.c $(DIAGNOSTIC_H) real.h \\\n    input.h toplev.h intl.h langhooks.h $(LANGHOOKS_DEF_H)\n opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(RTL_H) \\\n-\toutput.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h\n+\toutput.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h target.h\n targhooks.o : targhooks.c targhooks.h $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TREE_H) $(TM_H) $(RTL_H) $(TM_P_H) function.h \\\n \toutput.h toplev.h"}, {"sha": "10147b272590f46371d25c86398e760bf70bbe17", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=221ee7c920c3eb45da77f01f82c4611798473fcf", "patch": "@@ -567,8 +567,6 @@ extern int target_flags;\n /* For compatibility and historical reasons, a char should be signed.  */\n #define DEFAULT_SIGNED_CHAR 1\n \n-/* No DEFAULT_SHORT_ENUMS, please.  */\n-\n /* Note that WCHAR_TYPE_SIZE is used in cexp.y,\n    where TARGET_SHORT is not available.  */\n #undef WCHAR_TYPE"}, {"sha": "4685d030c1c0fa5edb0d5f1d77e91c3d90d6d8e0", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=221ee7c920c3eb45da77f01f82c4611798473fcf", "patch": "@@ -108,12 +108,6 @@ extern int target_flags;\n \n #define DEFAULT_SIGNED_CHAR 1\n \n-/* #define DEFAULT_SHORT_ENUMS\t1\n-   This was the default for the IP2k but gcc has a bug (as of 17th May\n-   2001) in the way that library calls to the memory checker functions\n-   are issues that screws things up if an enum is not equivalent to\n-   an int.  */\n-\n #define SIZE_TYPE \"unsigned int\"\n \n #define PTRDIFF_TYPE \"int\""}, {"sha": "e618c8eff81b5a15ae6ad656d24b4a9e06d457b1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=221ee7c920c3eb45da77f01f82c4611798473fcf", "patch": "@@ -1605,14 +1605,14 @@ always override this default with the options @option{-fsigned-char}\n and @option{-funsigned-char}.\n @end defmac\n \n-@defmac DEFAULT_SHORT_ENUMS\n-A C expression to determine whether to give an @code{enum} type\n-only as many bytes as it takes to represent the range of possible values\n-of that type.  A nonzero value means to do that; a zero value means all\n+@deftypefn {Target Hook} bool TARGET_DEFAULT_SHORT_ENUMS (void)\n+This target hook should return true if the compiler should give an\n+@code{enum} type only as many bytes as it takes to represent the range\n+of possible values of that type.  It should return false if all\n @code{enum} types should be allocated like @code{int}.\n \n-If you don't define the macro, the default is 0.\n-@end defmac\n+The default is to return false.\n+@end deftypefn\n \n @defmac SIZE_TYPE\n A C expression for a string describing the name of the data type to use"}, {"sha": "a83357b72ddaee8118525e39c903f96400396db9", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=221ee7c920c3eb45da77f01f82c4611798473fcf", "patch": "@@ -37,6 +37,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"diagnostic.h\"\n #include \"tm_p.h\"\t\t/* For OPTIMIZATION_OPTIONS.  */\n #include \"insn-attr.h\"\t\t/* For INSN_SCHEDULING.  */\n+#include \"target.h\"\n \n /* Value of the -G xx switch, and whether it was passed or not.  */\n unsigned HOST_WIDE_INT g_switch_value;\n@@ -594,10 +595,8 @@ decode_options (unsigned int argc, const char **argv)\n \n   /* Initialize whether `char' is signed.  */\n   flag_signed_char = DEFAULT_SIGNED_CHAR;\n-#ifdef DEFAULT_SHORT_ENUMS\n   /* Initialize how much space enums occupy, by default.  */\n-  flag_short_enums = DEFAULT_SHORT_ENUMS;\n-#endif\n+  flag_short_enums = targetm.default_short_enums ();\n \n   /* Initialize target_flags before OPTIMIZATION_OPTIONS so the latter can\n      modify it.  */"}, {"sha": "2631de178df911373c5feebd2e78ab934e1038f5", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=221ee7c920c3eb45da77f01f82c4611798473fcf", "patch": "@@ -605,7 +605,8 @@ typedef char _Bool;\n \tASM_OUTPUT_SECTION_NAME PROMOTE_FUNCTION_ARGS\t\t\t\\\n \tSTRUCT_VALUE_INCOMING STRICT_ARGUMENT_NAMING\t\t\t\\\n \tPROMOTE_FUNCTION_RETURN PROMOTE_PROTOTYPES STRUCT_VALUE_REGNUM\t\\\n-\tSETUP_INCOMING_VARARGS EXPAND_BUILTIN_SAVEREGS\n+\tSETUP_INCOMING_VARARGS EXPAND_BUILTIN_SAVEREGS\t\t\t\\\n+\tDEFAULT_SHORT_ENUMS\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "ef4c777378c69ba26ce8af2b755cbcd5fbabe085", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=221ee7c920c3eb45da77f01f82c4611798473fcf", "patch": "@@ -325,6 +325,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_GET_PCH_VALIDITY default_get_pch_validity\n #define TARGET_PCH_VALID_P default_pch_valid_p\n \n+#define TARGET_DEFAULT_SHORT_ENUMS hook_bool_void_false\n+\n #define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_false\n #define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_false\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_false\n@@ -390,6 +392,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_BUILD_BUILTIN_VA_LIST,\t\t\t\\\n   TARGET_GET_PCH_VALIDITY,\t\t\t\\\n   TARGET_PCH_VALID_P,\t\t\t\t\\\n+  TARGET_DEFAULT_SHORT_ENUMS,\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n   TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n   TARGET_HAVE_TLS,\t\t\t\t\\"}, {"sha": "ed96b02efe4d7c2595ec4eae09aa770c0d57bdd3", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221ee7c920c3eb45da77f01f82c4611798473fcf/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=221ee7c920c3eb45da77f01f82c4611798473fcf", "patch": "@@ -410,6 +410,11 @@ struct gcc_target\n   void * (* get_pch_validity) (size_t *);\n   const char * (* pch_valid_p) (const void *, size_t);\n \n+  /* True if the compiler should give an @code{enum} type only as many\n+     bytes as it takes to represent the range of possible values of\n+     that type.  */\n+  bool (* default_short_enums) (void);\n+\n   /* Leave the boolean fields at the end.  */\n \n   /* True if arbitrary sections are supported.  */"}]}