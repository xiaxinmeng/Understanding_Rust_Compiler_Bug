{"sha": "4e19c2f792e14c2a047a53c913a73d79f91ff277", "node_id": "C_kwDOANBUbNoAKDRlMTljMmY3OTJlMTRjMmEwNDdhNTNjOTEzYTczZDc5ZjkxZmYyNzc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-21T16:23:48Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-21T16:27:56Z"}, "message": "macro-invoc-lexer: Split implementation in its own file", "tree": {"sha": "4d5320a427a276b1588b296ae0aeb42d071cc6bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d5320a427a276b1588b296ae0aeb42d071cc6bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e19c2f792e14c2a047a53c913a73d79f91ff277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e19c2f792e14c2a047a53c913a73d79f91ff277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e19c2f792e14c2a047a53c913a73d79f91ff277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e19c2f792e14c2a047a53c913a73d79f91ff277/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796465596faa9fa69ffede1c16d944e6a6e24458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796465596faa9fa69ffede1c16d944e6a6e24458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/796465596faa9fa69ffede1c16d944e6a6e24458"}], "stats": {"total": 141, "additions": 95, "deletions": 46}, "files": [{"sha": "739b27de8a39fd930c6362788c71212984f4040b", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e19c2f792e14c2a047a53c913a73d79f91ff277/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e19c2f792e14c2a047a53c913a73d79f91ff277/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=4e19c2f792e14c2a047a53c913a73d79f91ff277", "patch": "@@ -74,6 +74,7 @@ GRS_OBJS = \\\n     rust/rust-mangle.o \\\n     rust/rust-compile-resolve-path.o \\\n     rust/rust-macro-expand.o \\\n+    rust/rust-macro-invoc-lexer.o \\\n     rust/rust-hir-full-test.o \\\n     rust/rust-hir-map.o \\\n     rust/rust-abi.o \\"}, {"sha": "64bb0b4bc484c57035a4511912ff559a1a2eab35", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e19c2f792e14c2a047a53c913a73d79f91ff277/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e19c2f792e14c2a047a53c913a73d79f91ff277/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=4e19c2f792e14c2a047a53c913a73d79f91ff277", "patch": "@@ -26,6 +26,7 @@\n #include \"rust-macro.h\"\n #include \"rust-hir-map.h\"\n #include \"rust-name-resolver.h\"\n+#include \"rust-macro-invoc-lexer.h\"\n \n // Provides objects and method prototypes for macro expansion\n \n@@ -48,52 +49,6 @@ struct ExpansionCfg\n   std::string crate_name = \"\";\n };\n \n-class MacroInvocLexer\n-{\n-public:\n-  MacroInvocLexer (std::vector<std::unique_ptr<AST::Token>> stream)\n-    : offs (0), token_stream (std::move (stream))\n-  {}\n-\n-  // Returns token n tokens ahead of current position.\n-  const_TokenPtr peek_token (int n)\n-  {\n-    if ((offs + n) >= token_stream.size ())\n-      return Token::make (END_OF_FILE, Location ());\n-\n-    return token_stream.at (offs + n)->get_tok_ptr ();\n-  }\n-  // Peeks the current token.\n-  const_TokenPtr peek_token () { return peek_token (0); }\n-\n-  // Advances current token to n + 1 tokens ahead of current position.\n-  void skip_token (int n) { offs += (n + 1); }\n-\n-  // Skips the current token.\n-  void skip_token () { skip_token (0); }\n-\n-  // Splits the current token into two. Intended for use with nested generics\n-  // closes (i.e. T<U<X>> where >> is wrongly lexed as one token). Note that\n-  // this will only work with \"simple\" tokens like punctuation.\n-  void split_current_token (TokenId /*new_left*/, TokenId /*new_right*/)\n-  {\n-    // FIXME\n-    gcc_unreachable ();\n-  }\n-\n-  std::string get_filename () const\n-  {\n-    gcc_unreachable ();\n-    return \"FIXME\";\n-  }\n-\n-  size_t get_offs () const { return offs; }\n-\n-private:\n-  size_t offs;\n-  std::vector<std::unique_ptr<AST::Token>> token_stream;\n-};\n-\n struct MatchedFragment\n {\n   std::string fragment_ident;"}, {"sha": "8a43d29e0d123440b4e9314d7030b278e6633fd6", "filename": "gcc/rust/expand/rust-macro-invoc-lexer.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e19c2f792e14c2a047a53c913a73d79f91ff277/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e19c2f792e14c2a047a53c913a73d79f91ff277/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.cc?ref=4e19c2f792e14c2a047a53c913a73d79f91ff277", "patch": "@@ -0,0 +1,29 @@\n+#include \"rust-macro-invoc-lexer.h\"\n+\n+namespace Rust {\n+\n+const_TokenPtr\n+MacroInvocLexer::peek_token (int n)\n+{\n+  if ((offs + n) >= token_stream.size ())\n+    return Token::make (END_OF_FILE, Location ());\n+\n+  return token_stream.at (offs + n)->get_tok_ptr ();\n+}\n+\n+// Advances current token to n + 1 tokens ahead of current position.\n+void\n+MacroInvocLexer::skip_token (int n)\n+{\n+  offs += (n + 1);\n+}\n+\n+void\n+MacroInvocLexer::split_current_token (TokenId new_left __attribute__ ((unused)),\n+\t\t\t\t      TokenId new_right\n+\t\t\t\t      __attribute__ ((unused)))\n+{\n+  // FIXME\n+  gcc_unreachable ();\n+}\n+} // namespace Rust"}, {"sha": "0fd4554d02f6d66eddac420c95636dcfe7289229", "filename": "gcc/rust/expand/rust-macro-invoc-lexer.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e19c2f792e14c2a047a53c913a73d79f91ff277/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e19c2f792e14c2a047a53c913a73d79f91ff277/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.h?ref=4e19c2f792e14c2a047a53c913a73d79f91ff277", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_MACRO_INVOC_LEXER_H\n+#define RUST_MACRO_INVOC_LEXER_H\n+\n+#include \"rust-ast.h\"\n+\n+namespace Rust {\n+class MacroInvocLexer\n+{\n+public:\n+  MacroInvocLexer (std::vector<std::unique_ptr<AST::Token>> stream)\n+    : offs (0), token_stream (std::move (stream))\n+  {}\n+\n+  // Returns token n tokens ahead of current position.\n+  const_TokenPtr peek_token (int n);\n+\n+  // Peeks the current token.\n+  const_TokenPtr peek_token () { return peek_token (0); }\n+\n+  // Advances current token to n + 1 tokens ahead of current position.\n+  void skip_token (int n);\n+\n+  // Skips the current token.\n+  void skip_token () { skip_token (0); }\n+\n+  // Splits the current token into two. Intended for use with nested generics\n+  // closes (i.e. T<U<X>> where >> is wrongly lexed as one token). Note that\n+  // this will only work with \"simple\" tokens like punctuation.\n+  void split_current_token (TokenId new_left, TokenId new_right);\n+\n+  std::string get_filename () const\n+  {\n+    // FIXME\n+    gcc_unreachable ();\n+    return \"FIXME\";\n+  }\n+\n+  size_t get_offs () const { return offs; }\n+\n+private:\n+  size_t offs;\n+  std::vector<std::unique_ptr<AST::Token>> token_stream;\n+};\n+} // namespace Rust\n+\n+#endif // RUST_MACRO_INVOC_LEXER_H"}]}