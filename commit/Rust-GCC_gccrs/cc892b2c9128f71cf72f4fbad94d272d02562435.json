{"sha": "cc892b2c9128f71cf72f4fbad94d272d02562435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4OTJiMmM5MTI4ZjcxY2Y3MmY0ZmJhZDk0ZDI3MmQwMjU2MjQzNQ==", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2005-02-10T13:51:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T13:51:58Z"}, "message": "adaint.c, [...] (to_ptr32): New function.\n\n2005-02-09  Doug Rupp  <rupp@adacore.com>\n\t    Thomas Quinot  <quinot@adacore.com>\n\n\t* adaint.c, adaint.h\n\t[VMS] (to_ptr32): New function.\n\t(MAYBE_TO_PTR32): New macro.\n\t(__gnat_portable_spawn,__gnat_portable_no_block_spawn): Adjust argv\n\tfor pointer size.\n\t[VMS] (descriptor_s, ile_s): Use __char_ptr32 for adr field.\n\t[VMS] (#define fork()): Remove since unneccessary.\n\t(__gnat_set_close_on_exec): New routine to support\n\tGNAT.OS_Lib.Set_Close_On_Exec.\n\n\t* g-expect.adb (Set_Up_Communications): Mark the pipe descriptors for\n\tthe parent side as close-on-exec so that they are not inherited by the\n\tchild.\n\n\t* g-os_lib.ads, g-os_lib.adb (Set_Close_On_Exec): New subprogram to\n\tset or clear the FD_CLOEXEC flag on a file descriptor.\n\nFrom-SVN: r94811", "tree": {"sha": "f7ea7fe8c9dc03d190dde2da59b05740c31b5ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7ea7fe8c9dc03d190dde2da59b05740c31b5ca4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc892b2c9128f71cf72f4fbad94d272d02562435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc892b2c9128f71cf72f4fbad94d272d02562435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc892b2c9128f71cf72f4fbad94d272d02562435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc892b2c9128f71cf72f4fbad94d272d02562435/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e45e7a930bff7c7e6bbfa5f390a14411dc88dd7"}], "stats": {"total": 568, "additions": 327, "deletions": 241}, "files": [{"sha": "f94f3bfb5f284d8c0c73a43e5826a0457dc6b1eb", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 57, "deletions": 16, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc892b2c9128f71cf72f4fbad94d272d02562435/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc892b2c9128f71cf72f4fbad94d272d02562435/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=cc892b2c9128f71cf72f4fbad94d272d02562435", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2004, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2005, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -277,6 +277,37 @@ int max_path_len = GNAT_MAX_PATH_LEN;\n    system provides the routine readdir_r.  */\n #undef HAVE_READDIR_R\n \f\n+#if defined(VMS) && defined (__LONG_POINTERS)\n+\n+/* Return a 32 bit pointer to an array of 32 bit pointers\n+   given a 64 bit pointer to an array of 64 bit pointers */\n+\n+typedef __char_ptr32 *__char_ptr_char_ptr32 __attribute__ ((mode (SI)));\n+\n+static __char_ptr_char_ptr32\n+to_ptr32 (char **ptr64)\n+{\n+  int argc;\n+  __char_ptr_char_ptr32 short_argv;\n+\n+  for (argc=0; ptr64[argc]; argc++);\n+\n+  /* Reallocate argv with 32 bit pointers. */\n+  short_argv = (__char_ptr_char_ptr32) decc$malloc\n+    (sizeof (__char_ptr32) * (argc + 1));\n+\n+  for (argc=0; ptr64[argc]; argc++)\n+    short_argv[argc] = (__char_ptr32) decc$strdup (ptr64[argc]);\n+\n+  short_argv[argc] = (__char_ptr32) 0;\n+  return short_argv;\n+\n+}\n+#define MAYBE_TO_PTR32(argv) to_ptr32 (argv)\n+#else\n+#define MAYBE_TO_PTR32(argv) argv\n+#endif\n+\n void\n __gnat_to_gm_time\n   (OS_Time *p_time,\n@@ -1213,13 +1244,13 @@ static char *to_host_path_spec (char *);\n struct descriptor_s\n {\n   unsigned short len, mbz;\n-  char *adr;\n+  __char_ptr32 adr;\n };\n \n typedef struct _ile3\n {\n   unsigned short len, code;\n-  char *adr;\n+  __char_ptr32 adr;\n   unsigned short *retlen_adr;\n } ile_s;\n \n@@ -1524,17 +1555,6 @@ __gnat_is_symbolic_link (char *name ATTRIBUTE_UNUSED)\n #endif\n }\n \n-#ifdef VMS\n-/* Defined in VMS header files. */\n-#if defined (__ALPHA)\n-#define fork() (decc$$alloc_vfork_blocks() >= 0 ? \\\n-\t\tLIB$GET_CURRENT_INVO_CONTEXT (decc$$get_vfork_jmpbuf()) : -1)\n-#elif defined (__IA64)\n-#define fork() (decc$$alloc_vfork_blocks() >= 0 ? \\\n-\t\tLIB$I64_GET_CURR_INVO_CONTEXT(decc$$get_vfork_jmpbuf()) : -1)\n-#endif\n-#endif\n-\n #if defined (sun) && defined (__SVR4)\n /* Using fork on Solaris will duplicate all the threads. fork1, which\n    duplicates only the active thread, must be used instead, or spawning\n@@ -1585,7 +1605,7 @@ __gnat_portable_spawn (char *args[])\n   if (pid == 0)\n     {\n       /* The child. */\n-      if (execv (args[0], args) != 0)\n+      if (execv (args[0], MAYBE_TO_PTR32 (args)) != 0)\n #if defined (VMS)\n \treturn -1; /* execv is in parent context on VMS.  */\n #else\n@@ -1866,7 +1886,7 @@ __gnat_portable_no_block_spawn (char *args[])\n   if (pid == 0)\n     {\n       /* The child.  */\n-      if (execv (args[0], args) != 0)\n+      if (execv (args[0], MAYBE_TO_PTR32 (args)) != 0)\n #if defined (VMS)\n \treturn -1; /* execv is in parent context on VMS. */\n #else\n@@ -2593,3 +2613,24 @@ get_gcc_version (void)\n {\n   return 3;\n }\n+\n+int\n+__gnat_set_close_on_exec (int fd, int close_on_exec_p)\n+{\n+#if defined (F_GETFD) && defined (FD_CLOEXEC) && ! defined (__vxworks)\n+  int flags = fcntl (fd, F_GETFD, 0);\n+  if (flags < 0)\n+    return flags;\n+  if (close_on_exec_p)\n+    flags |= FD_CLOEXEC;\n+  else\n+    flags &= ~FD_CLOEXEC;\n+  return fcntl (fd, F_SETFD, flags | FD_CLOEXEC);\n+#else\n+  return -1;\n+  /* For the Windows case, we should use SetHandleInformation to remove\n+     the HANDLE_INHERIT property from fd. This is not implemented yet,\n+     but for our purposes (support of GNAT.Expect) this does not matter,\n+     as by default handles are *not* inherited. */\n+#endif\n+}"}, {"sha": "cf7e4032f4ad6096c19fe55b52d4d782f18baf4f", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc892b2c9128f71cf72f4fbad94d272d02562435/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc892b2c9128f71cf72f4fbad94d272d02562435/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=cc892b2c9128f71cf72f4fbad94d272d02562435", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2004 Free Software Foundation, Inc.          *\n+ *          Copyright (C) 1992-2005 Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -149,6 +149,7 @@ extern void   __gnat_set_binary_mode\t\t   (int);\n extern void   __gnat_set_text_mode\t\t   (int);\n extern char  *__gnat_ttyname\t\t\t   (int);\n extern int    __gnat_lseek\t\t\t   (int, long, int);\n+extern int    __gnat_set_close_on_exec\t\t   (int, int);\n extern int    __gnat_dup\t\t\t   (int);\n extern int    __gnat_dup2\t\t\t   (int, int);\n "}, {"sha": "2571a440d652cf83432ca651c53777c46cb983d2", "filename": "gcc/ada/g-expect.adb", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc892b2c9128f71cf72f4fbad94d272d02562435/gcc%2Fada%2Fg-expect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc892b2c9128f71cf72f4fbad94d272d02562435/gcc%2Fada%2Fg-expect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.adb?ref=cc892b2c9128f71cf72f4fbad94d272d02562435", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2000-2003 Ada Core Technologies, Inc.            --\n+--           Copyright (C) 2000-2005 Ada Core Technologies, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1123,6 +1123,8 @@ package body GNAT.Expect is\n       Pipe2      : access Pipe_Type;\n       Pipe3      : access Pipe_Type)\n    is\n+      Status : Boolean;\n+\n    begin\n       --  Create the pipes\n \n@@ -1134,18 +1136,36 @@ package body GNAT.Expect is\n          return;\n       end if;\n \n+      --  Record the 'parent' end of the two pipes in Pid:\n+      --    Child stdin  is connected to the 'write' end of Pipe1;\n+      --    Child stdout is connected to the 'read'  end of Pipe2.\n+      --  We do not want these descriptors to remain open in the child\n+      --  process, so we mark them close-on-exec/non-inheritable.\n+\n       Pid.Input_Fd  := Pipe1.Output;\n+      Set_Close_On_Exec (Pipe1.Output, True, Status);\n       Pid.Output_Fd := Pipe2.Input;\n+      Set_Close_On_Exec (Pipe2.Input, True, Status);\n \n       if Err_To_Out then\n+\n+         --  Reuse the standard output pipe for standard error\n+\n          Pipe3.all := Pipe2.all;\n       else\n+\n+         --  Create a separate pipe for standard error\n+\n          if Create_Pipe (Pipe3) /= 0 then\n             return;\n          end if;\n       end if;\n \n+      --  As above, we record the proper fd for the child's\n+      --  standard error stream.\n+\n       Pid.Error_Fd := Pipe3.Input;\n+      Set_Close_On_Exec (Pipe3.Input, True, Status);\n    end Set_Up_Communications;\n \n    ----------------------------------"}, {"sha": "65213cd5247d0ea8a85528f339204f96326b7233", "filename": "gcc/ada/g-os_lib.adb", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc892b2c9128f71cf72f4fbad94d272d02562435/gcc%2Fada%2Fg-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc892b2c9128f71cf72f4fbad94d272d02562435/gcc%2Fada%2Fg-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-os_lib.adb?ref=cc892b2c9128f71cf72f4fbad94d272d02562435", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 1995-2004 Ada Core Technologies, Inc.            --\n+--           Copyright (C) 1995-2005 Ada Core Technologies, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1075,7 +1075,7 @@ package body GNAT.OS_Lib is\n       S  : Integer;\n \n    begin\n-      --  Use the global lock because To_GM_Time is not thread safe.\n+      --  Use the global lock because To_GM_Time is not thread safe\n \n       Locked_Processing : begin\n          SSL.Lock_Task.all;\n@@ -1920,7 +1920,7 @@ package body GNAT.OS_Lib is\n             if Status <= 0 then\n                Last := Finish + 1;\n \n-            --  Replace symbolic link with its value.\n+            --  Replace symbolic link with its value\n \n             else\n                if Is_Absolute_Path (Link_Buffer (1 .. Status)) then\n@@ -2056,6 +2056,23 @@ package body GNAT.OS_Lib is\n       Rename_File (C_Old_Name'Address, C_New_Name'Address, Success);\n    end Rename_File;\n \n+   -----------------------\n+   -- Set_Close_On_Exec --\n+   -----------------------\n+\n+   procedure Set_Close_On_Exec\n+     (FD            : File_Descriptor;\n+      Close_On_Exec : Boolean;\n+      Status        : out Boolean)\n+   is\n+      function C_Set_Close_On_Exec\n+        (FD : File_Descriptor; Close_On_Exec : System.CRTL.int)\n+         return System.CRTL.int;\n+      pragma Import (C, C_Set_Close_On_Exec, \"__gnat_set_close_on_exec\");\n+   begin\n+      Status := C_Set_Close_On_Exec (FD, Boolean'Pos (Close_On_Exec)) = 0;\n+   end Set_Close_On_Exec;\n+\n    --------------------\n    -- Set_Executable --\n    --------------------\n@@ -2186,7 +2203,7 @@ package body GNAT.OS_Lib is\n          Dup2 (Saved_Error, Standerr);\n       end if;\n \n-      --  And close the saved standard output and error file descriptors.\n+      --  And close the saved standard output and error file descriptors\n \n       Close (Saved_Output);\n \n@@ -2234,7 +2251,7 @@ package body GNAT.OS_Lib is\n    is\n \n       procedure Spawn (Args : Argument_List);\n-      --  Call Spawn.\n+      --  Call Spawn with given argument list\n \n       N_Args : Argument_List (Args'Range);\n       --  Normalized arguments"}, {"sha": "fa094b088c77bb87ae2600afe3383afd65d0e22c", "filename": "gcc/ada/g-os_lib.ads", "status": "modified", "additions": 225, "deletions": 218, "changes": 443, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc892b2c9128f71cf72f4fbad94d272d02562435/gcc%2Fada%2Fg-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc892b2c9128f71cf72f4fbad94d272d02562435/gcc%2Fada%2Fg-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-os_lib.ads?ref=cc892b2c9128f71cf72f4fbad94d272d02562435", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1995-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1995-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,36 +36,39 @@\n --  This package contains types and procedures for interfacing to the\n --  underlying OS. It is used by the GNAT compiler and by tools associated\n --  with the GNAT compiler, and therefore works for the various operating\n---  systems to which GNAT has been ported. This package will undoubtedly\n---  grow as new services are needed by various tools.\n+--  systems to which GNAT has been ported. This package will undoubtedly grow\n+--  as new services are needed by various tools.\n \n---  This package tends to use fairly low-level Ada in order to not bring\n---  in large portions of the RTL. For example, functions return access\n---  to string as part of avoiding functions returning unconstrained types.\n+--  This package tends to use fairly low-level Ada in order to not bring in\n+--  large portions of the RTL. For example, functions return access to string\n+--  as part of avoiding functions returning unconstrained types.\n \n---  Except where specifically noted, these routines are portable across\n---  all GNAT implementations on all supported operating systems.\n+--  Except where specifically noted, these routines are portable across all\n+--  GNAT implementations on all supported operating systems.\n \n with System;\n with GNAT.Strings;\n \n package GNAT.OS_Lib is\n-pragma Elaborate_Body (OS_Lib);\n+   pragma Elaborate_Body (OS_Lib);\n+\n+   -----------------------\n+   -- String Operations --\n+   -----------------------\n+\n+   --  These are reexported from package Strings (which was introduced to\n+   --  avoid different packages declarting different types unnecessarily).\n+   --  See package GNAT.Strings for details.\n \n    subtype String_Access is Strings.String_Access;\n-   --  General purpose string access type. Some of the functions in this\n-   --  package allocate string results on the heap, and return a value of\n-   --  this type. Note that the caller is responsible for freeing this\n-   --  String to avoid memory leaks.\n \n    function \"=\" (Left, Right : in String_Access) return Boolean\n      renames Strings.\"=\";\n \n    procedure Free (X : in out String_Access) renames Strings.Free;\n-   --  This procedure is provided for freeing returned values of type\n-   --  String_Access\n \n    subtype String_List is Strings.String_List;\n+\n    function \"=\" (Left, Right : in String_List) return Boolean\n      renames Strings.\"=\";\n \n@@ -79,15 +82,12 @@ pragma Elaborate_Body (OS_Lib);\n      return String_List renames Strings.\"&\";\n \n    subtype String_List_Access is Strings.String_List_Access;\n-   --  General purpose array and pointer for list of string accesses\n+\n    function \"=\" (Left, Right : in String_List_Access) return Boolean\n      renames Strings.\"=\";\n \n    procedure Free (Arg : in out String_List_Access)\n      renames Strings.Free;\n-   --  Frees the given array and all strings that its elements reference,\n-   --  and then sets the argument to null. Provided for freeing returned\n-   --  values of this type (including Argument_List_Access).\n \n    ---------------------\n    -- Time/Date Stuff --\n@@ -127,9 +127,9 @@ pragma Elaborate_Body (OS_Lib);\n    function \">\"  (X, Y : OS_Time) return Boolean;\n    function \">=\" (X, Y : OS_Time) return Boolean;\n    function \"<=\" (X, Y : OS_Time) return Boolean;\n-   --  Basic comparison operators on OS_Time with obvious meanings. Note\n-   --  that these have Intrinsic convention, so for example it is not\n-   --  permissible to create accesses to any of these functions.\n+   --  Basic comparison operators on OS_Time with obvious meanings. Note that\n+   --  these have Intrinsic convention, so for example it is not permissible\n+   --  to create accesses to any of these functions.\n \n    procedure GM_Split\n      (Date    : OS_Time;\n@@ -146,15 +146,15 @@ pragma Elaborate_Body (OS_Lib);\n    -- File Stuff --\n    ----------------\n \n-   --  These routines give access to the open/creat/close/read/write level\n-   --  of I/O routines in the typical C library (these functions are not\n-   --  part of the ANSI C standard, but are typically available in all\n-   --  systems). See also package Interfaces.C_Streams for access to the\n-   --  stream level routines.\n+   --  These routines give access to the open/creat/close/read/write level of\n+   --  I/O routines in the typical C library (these functions are not part of\n+   --  the ANSI C standard, but are typically available in all systems). See\n+   --  also package Interfaces.C_Streams for access to the stream level\n+   --  routines.\n \n-   --  Note on file names. If a file name is passed as type String in any\n-   --  of the following specifications, then the name is a normal Ada string\n-   --  and need not be NUL-terminated. However, a trailing NUL character is\n+   --  Note on file names. If a file name is passed as type String in any of\n+   --  the following specifications, then the name is a normal Ada string and\n+   --  need not be NUL-terminated. However, a trailing NUL character is\n    --  permitted, and will be ignored (more accurately, the NUL and any\n    --  characters that follow it will be ignored).\n \n@@ -189,9 +189,8 @@ pragma Elaborate_Body (OS_Lib);\n    function Open_Read_Write\n      (Name  : String;\n       Fmode : Mode) return File_Descriptor;\n-   --  Open file Name for both reading and writing, returning file\n-   --  descriptor. File descriptor returned is Invalid_FD if file cannot be\n-   --  opened.\n+   --  Open file Name for both reading and writing, returning file descriptor.\n+   --  File descriptor returned is Invalid_FD if file cannot be opened.\n \n    function Create_File\n      (Name  : String;\n@@ -224,38 +223,49 @@ pragma Elaborate_Body (OS_Lib);\n       Name : out Temp_File_Name);\n    --  Create and open for writing a temporary file in the current working\n    --  directory. The name of the file and the File Descriptor are returned.\n-   --  The File Descriptor returned is Invalid_FD in the case of failure.\n-   --  No mode parameter is provided. Since this is a temporary file,\n-   --  there is no point in doing text translation on it.\n-   --  On some OSes, the maximum number of temp files that can be\n-   --  created with this procedure may be limited. When the maximum is\n-   --  reached, this procedure returns Invalid_FD. On some OSes, there may be\n-   --  a race condition between processes trying to create temp files\n-   --  at the same time in the same directory using this procedure.\n+   --  The File Descriptor returned is Invalid_FD in the case of failure. No\n+   --  mode parameter is provided. Since this is a temporary file, there is no\n+   --  point in doing text translation on it.\n+   --\n+   --  On some OSes, the maximum number of temp files that can be created with\n+   --  this procedure may be limited. When the maximum is reached, this\n+   --  procedure returns Invalid_FD. On some OSes, there may be a race\n+   --  condition between processes trying to create temp files at the same\n+   --  time in the same directory using this procedure.\n \n    procedure Create_Temp_File\n      (FD   : out File_Descriptor;\n       Name : out String_Access);\n    --  Create and open for writing a temporary file in the current working\n    --  directory. The name of the file and the File Descriptor are returned.\n-   --  No mode parameter is provided. Since this is a temporary file,\n-   --  there is no point in doing text translation on it.\n-   --  It is the responsibility of the caller to deallocate the access value\n-   --  returned in Name.\n-   --  This procedure will always succeed if the current working directory\n-   --  is writable. If the current working directory is not writable, then\n+   --  No mode parameter is provided. Since this is a temporary file, there is\n+   --  no point in doing text translation on it. It is the responsibility of\n+   --  the caller to deallocate the access value returned in Name.\n+   --\n+   --  This procedure will always succeed if the current working directory is\n+   --  writable. If the current working directory is not writable, then\n    --  Invalid_FD is returned for the file descriptor and null for the Name.\n-   --  There is no race condition problem between processes trying to\n-   --  create temp files at the same time in the same directory.\n+   --  There is no race condition problem between processes trying to create\n+   --  temp files at the same time in the same directory.\n \n    procedure Close (FD : File_Descriptor; Status : out Boolean);\n    --  Close file referenced by FD. Status is False if the underlying service\n    --  failed. Reasons for failure include: disk full, disk quotas exceeded\n    --  and invalid file descriptor (the file may have been closed twice).\n \n    procedure Close (FD : File_Descriptor);\n-   --  Close file referenced by FD. This form is used when the caller\n-   --  wants to ignore any possible error (see above for error cases).\n+   --  Close file referenced by FD. This form is used when the caller wants to\n+   --  ignore any possible error (see above for error cases).\n+\n+   procedure Set_Close_On_Exec\n+     (FD            : File_Descriptor;\n+      Close_On_Exec : Boolean;\n+      Status        : out Boolean);\n+   --  When Close_On_Exec is True, mark FD to be closed automatically when new\n+   --  program is executed by the calling process (i.e. prevent FD from being\n+   --  inherited by child processes). When Close_On_Exec is False, mark FD to\n+   --  not be closed on exec (i.e. allow it to be inherited). Status is False\n+   --  if the operation could not be performed.\n \n    procedure Delete_File (Name : String; Success : out Boolean);\n    --  Deletes file. Success is set True or False indicating if the delete is\n@@ -265,38 +275,38 @@ pragma Elaborate_Body (OS_Lib);\n      (Old_Name : String;\n       New_Name : String;\n       Success  : out Boolean);\n-   --  Rename a file. Success is set True or False indicating if the\n-   --  rename is successful or not.\n+   --  Rename a file. Success is set True or False indicating if the rename is\n+   --  successful or not.\n \n-   --  The following defines the mode for the Copy_File procedure below.\n-   --  Note that \"time stamps and other file attributes\" in the descriptions\n-   --  below refers to the creation and last modification times, and also\n-   --  the file access (read/write/execute) status flags.\n+   --  The following defines the mode for the Copy_File procedure below. Note\n+   --  that \"time stamps and other file attributes\" in the descriptions below\n+   --  refers to the creation and last modification times, and also the file\n+   --  access (read/write/execute) status flags.\n \n    type Copy_Mode is\n      (Copy,\n-      --  Copy the file. It is an error if the target file already exists.\n-      --  The time stamps and other file attributes are preserved in the copy.\n+      --  Copy the file. It is an error if the target file already exists. The\n+      --  time stamps and other file attributes are preserved in the copy.\n \n       Overwrite,\n-      --  If the target file exists, the file is replaced otherwise\n-      --  the file is just copied. The time stamps and other file\n-      --  attributes are preserved in the copy.\n+      --  If the target file exists, the file is replaced otherwise the file\n+      --  is just copied. The time stamps and other file attributes are\n+      --  preserved in the copy.\n \n       Append);\n-      --  If the target file exists, the contents of the source file\n-      --  is appended at the end. Otherwise the source file is just\n-      --  copied. The time stamps and other file attributes are\n-      --  are preserved if the destination file does not exist.\n+      --  If the target file exists, the contents of the source file is\n+      --  appended at the end. Otherwise the source file is just copied. The\n+      --  time stamps and other file attributes are are preserved if the\n+      --  destination file does not exist.\n \n    type Attribute is\n      (Time_Stamps,\n       --  Copy time stamps from source file to target file. All other\n       --  attributes are set to normal default values for file creation.\n \n       Full,\n-      --  All attributes are copied from the source file to the target\n-      --  file. This includes the timestamps, and for example also includes\n+      --  All attributes are copied from the source file to the target file.\n+      --  This includes the timestamps, and for example also includes\n       --  read/write/execute attributes in Unix systems.\n \n       None);\n@@ -305,8 +315,8 @@ pragma Elaborate_Body (OS_Lib);\n \n    --  Note: The default is Time_Stamps, which corresponds to the normal\n    --  default on Windows style systems. Full corresponds to the typical\n-   --  effect of \"cp -p\" on Unix systems, and None corresponds to the\n-   --  typical effect of \"cp\" on Unix systems.\n+   --  effect of \"cp -p\" on Unix systems, and None corresponds to the typical\n+   --  effect of \"cp\" on Unix systems.\n \n    --  Note: Time_Stamps and Full are not supported on VMS and VxWorks\n \n@@ -320,15 +330,15 @@ pragma Elaborate_Body (OS_Lib);\n    --  Pathname can be a filename or directory name. In the latter case Name\n    --  is copied into the directory preserving the same file name. Mode\n    --  defines the kind of copy, see above with the default being a normal\n-   --  copy in which the target file must not already exist. Success is set\n-   --  to True or False indicating if the copy is successful (depending on\n-   --  the specified Mode).\n+   --  copy in which the target file must not already exist. Success is set to\n+   --  True or False indicating if the copy is successful (depending on the\n+   --  specified Mode).\n    --\n-   --  Note: this procedure is only supported to a very limited extent on\n-   --  VMS. The only supported mode is Overwrite, and the only supported\n-   --  value for Preserve is None, resulting in the default action which\n-   --  for Overwrite is to leave attributes unchanged. Furthermore, the\n-   --  copy only works for simple text files.\n+   --  Note: this procedure is only supported to a very limited extent on VMS.\n+   --  The only supported mode is Overwrite, and the only supported value for\n+   --  Preserve is None, resulting in the default action which for Overwrite\n+   --  is to leave attributes unchanged. Furthermore, the copy only works for\n+   --  simple text files.\n \n    procedure Copy_Time_Stamps (Source, Dest : String; Success : out Boolean);\n    --  Copy Source file time stamps (last modification and last access time\n@@ -343,16 +353,16 @@ pragma Elaborate_Body (OS_Lib);\n      (FD   : File_Descriptor;\n       A    : System.Address;\n       N    : Integer) return Integer;\n-   --  Read N bytes to address A from file referenced by FD. Returned value\n-   --  is count of bytes actually read, which can be less than N at EOF.\n+   --  Read N bytes to address A from file referenced by FD. Returned value is\n+   --  count of bytes actually read, which can be less than N at EOF.\n \n    function Write\n      (FD   : File_Descriptor;\n       A    : System.Address;\n       N    : Integer) return Integer;\n    --  Write N bytes from address A to file referenced by FD. The returned\n-   --  value is the number of bytes written, which can be less than N if\n-   --  a disk full condition was detected.\n+   --  value is the number of bytes written, which can be less than N if a\n+   --  disk full condition was detected.\n \n    Seek_Cur : constant := 1;\n    Seek_End : constant := 2;\n@@ -364,22 +374,22 @@ pragma Elaborate_Body (OS_Lib);\n       offset : Long_Integer;\n       origin : Integer);\n    pragma Import (C, Lseek, \"__gnat_lseek\");\n-   --  Sets the current file pointer to the indicated offset value,\n-   --  relative to the current position (origin = SEEK_CUR), end of\n-   --  file (origin = SEEK_END), or start of file (origin = SEEK_SET).\n+   --  Sets the current file pointer to the indicated offset value, relative\n+   --  to the current position (origin = SEEK_CUR), end of file (origin =\n+   --  SEEK_END), or start of file (origin = SEEK_SET).\n \n    function File_Length (FD : File_Descriptor) return Long_Integer;\n    pragma Import (C, File_Length, \"__gnat_file_length\");\n    --  Get length of file from file descriptor FD\n \n    function File_Time_Stamp (Name : String) return OS_Time;\n    --  Given the name of a file or directory, Name, obtains and returns the\n-   --  time stamp. This function can be used for an unopened file.\n-   --  Returns Invalid_Time is Name doesn't correspond to an existing file.\n+   --  time stamp. This function can be used for an unopened file. Returns\n+   --  Invalid_Time is Name doesn't correspond to an existing file.\n \n    function File_Time_Stamp (FD : File_Descriptor) return OS_Time;\n-   --  Get time stamp of file from file descriptor FD\n-   --  Returns Invalid_Time is FD doesn't correspond to an existing file.\n+   --  Get time stamp of file from file descriptor FD Returns Invalid_Time is\n+   --  FD doesn't correspond to an existing file.\n \n    function Normalize_Pathname\n      (Name           : String;\n@@ -394,43 +404,41 @@ pragma Elaborate_Body (OS_Lib);\n    --  directory if Directory is null. The result returned is the normalized\n    --  name of the file. For most cases, if two file names designate the same\n    --  file through different paths, Normalize_Pathname will return the same\n-   --  canonical name in both cases. However, there are cases when this is\n-   --  not true; for example, this is not true in Unix for two hard links\n+   --  canonical name in both cases. However, there are cases when this is not\n+   --  true; for example, this is not true in Unix for two hard links\n    --  designating the same file.\n    --\n    --  On Windows, the returned path will start with a drive letter except\n-   --  when Directory is not empty and does not include a drive letter.\n-   --  If Directory is empty (the default) and Name is a relative path\n-   --  or an absolute path without drive letter, the letter of the current\n-   --  drive will start the returned path. If Case_Sensitive is True\n-   --  (the default), then this drive letter will be forced to upper case\n-   --  (\"C:\\...\").\n+   --  when Directory is not empty and does not include a drive letter. If\n+   --  Directory is empty (the default) and Name is a relative path or an\n+   --  absolute path without drive letter, the letter of the current drive\n+   --  will start the returned path. If Case_Sensitive is True (the default),\n+   --  then this drive letter will be forced to upper case (\"C:\\...\").\n    --\n    --  If Resolve_Links is set to True, then the symbolic links, on systems\n-   --  that support them, will be fully converted to the name of the file\n-   --  or directory pointed to. This is slightly less efficient, since it\n+   --  that support them, will be fully converted to the name of the file or\n+   --  directory pointed to. This is slightly less efficient, since it\n    --  requires system calls.\n    --\n    --  If Name cannot be resolved or is null on entry (for example if there is\n-   --  a circularity in symbolic links: A is a symbolic link for B, while B is\n-   --  a symbolic link for A), then Normalize_Pathname returns an empty string.\n+   --  symbolic link circularity, e.g. A is a symbolic link for B, and B is a\n+   --  symbolic link for A), then Normalize_Pathname returns an empty  string.\n    --\n    --  In VMS, if Name follows the VMS syntax file specification, it is first\n    --  converted into Unix syntax. If the conversion fails, Normalize_Pathname\n    --  returns an empty string.\n    --\n    --  For case-sensitive file systems, the value of Case_Sensitive parameter\n-   --  is ignored.  For file systems that are not case-sensitive, such as\n+   --  is ignored. For file systems that are not case-sensitive, such as\n    --  Windows and OpenVMS, if this parameter is set to False, then the file\n    --  and directory names are folded to lower case. This allows checking\n    --  whether two files are the same by applying this function to their names\n-   --  and comparing the results.  If Case_Sensitive is set to True, this\n+   --  and comparing the results. If Case_Sensitive is set to True, this\n    --  function does not change the casing of file and directory names.\n \n    function Is_Absolute_Path (Name : String) return Boolean;\n-   --  Returns True if Name is an absolute path name, i.e. it designates\n-   --  a file or a directory absolutely, rather than relative to another\n-   --  directory.\n+   --  Returns True if Name is an absolute path name, i.e. it designates a\n+   --  file or directory absolutely rather than relative to another directory.\n \n    function Is_Regular_File (Name : String) return Boolean;\n    --  Determines if the given string, Name, is the name of an existing\n@@ -446,25 +454,25 @@ pragma Elaborate_Body (OS_Lib);\n    --  a relative path name, it is relative to the current working directory.\n \n    function Is_Readable_File (Name : String) return Boolean;\n-   --  Determines if the given string, Name, is the name of an existing\n-   --  file that is readable. Returns True if so, False otherwise. Note\n-   --  that this function simply interrogates the file attributes (e.g.\n-   --  using the C function stat), so it does not indicate a situation\n-   --  in which a file may not actually be readable due to some other\n-   --  process having exclusive access.\n+   --  Determines if the given string, Name, is the name of an existing file\n+   --  that is readable. Returns True if so, False otherwise. Note that this\n+   --  function simply interrogates the file attributes (e.g. using the C\n+   --  function stat), so it does not indicate a situation in which a file may\n+   --  not actually be readable due to some other process having exclusive\n+   --  access.\n \n    function Is_Writable_File (Name : String) return Boolean;\n-   --  Determines if the given string, Name, is the name of an existing\n-   --  file that is writable. Returns True if so, False otherwise. Note\n-   --  that this function simply interrogates the file attributes (e.g.\n-   --  using the C function stat), so it does not indicate a situation\n-   --  in which a file may not actually be writeable due to some other\n-   --  process having exclusive access.\n+   --  Determines if the given string, Name, is the name of an existing file\n+   --  that is writable. Returns True if so, False otherwise. Note that this\n+   --  function simply interrogates the file attributes (e.g. using the C\n+   --  function stat), so it does not indicate a situation in which a file may\n+   --  not actually be writeable due to some other process having exclusive\n+   --  access.\n \n    function Is_Symbolic_Link (Name : String) return Boolean;\n-   --  Determines if the given string, Name, is the path of a symbolic link\n-   --  on systems that support it. Returns True if so, False if the path\n-   --  is not a symbolic link or if the system does not support symbolic links.\n+   --  Determines if the given string, Name, is the path of a symbolic link on\n+   --  systems that support it. Returns True if so, False if the path is not a\n+   --  symbolic link or if the system does not support symbolic links.\n    --\n    --  A symbolic link is an indirect pointer to a file; its directory entry\n    --  contains the name of the file to which it is linked. Symbolic links may\n@@ -496,16 +504,16 @@ pragma Elaborate_Body (OS_Lib);\n      (File_Name : String;\n       Path      : String) return String_Access;\n    --  Try to locate a regular file whose name is given by File_Name in the\n-   --  directories listed in  Path. If a file is found, its full pathname is\n+   --  directories listed in Path. If a file is found, its full pathname is\n    --  returned; otherwise, a null pointer is returned. If the File_Name given\n    --  is an absolute pathname, then Locate_Regular_File just checks that the\n    --  file exists and is a regular file. Otherwise, if the File_Name given\n-   --  includes directory information, Locate_Regular_File first checks if\n-   --  the file exists relative to the current directory. If it does not,\n-   --  or if the File_Name given is a simple file name, the Path argument is\n-   --  parsed according to OS conventions, and for each directory in the Path\n-   --  a check is made if File_Name is a relative pathname of a regular file\n-   --  from that directory.\n+   --  includes directory information, Locate_Regular_File first checks if the\n+   --  file exists relative to the current directory. If it does not, or if\n+   --  the File_Name given is a simple file name, the Path argument is parsed\n+   --  according to OS conventions, and for each directory in the Path a check\n+   --  is made if File_Name is a relative pathname of a regular file from that\n+   --  directory.\n    --\n    --  Note that this function allocates some memory for the returned value.\n    --  This memory needs to be deallocated after use.\n@@ -531,8 +539,8 @@ pragma Elaborate_Body (OS_Lib);\n    --  routine (using String in place of C_File_Name) defined above.\n \n    subtype C_File_Name is System.Address;\n-   --  This subtype is used to document that a parameter is the address\n-   --  of a null-terminated string containing the name of a file.\n+   --  This subtype is used to document that a parameter is the address of a\n+   --  null-terminated string containing the name of a file.\n \n    --  All the following functions need comments ???\n \n@@ -571,7 +579,7 @@ pragma Elaborate_Body (OS_Lib);\n       Success      : out Boolean);\n \n    function File_Time_Stamp (Name : C_File_Name) return OS_Time;\n-   --  Returns Invalid_Time is Name doesn't correspond to an existing file.\n+   --  Returns Invalid_Time is Name doesn't correspond to an existing file\n \n    function Is_Regular_File (Name : C_File_Name) return Boolean;\n    function Is_Directory (Name : C_File_Name) return Boolean;\n@@ -589,9 +597,9 @@ pragma Elaborate_Body (OS_Lib);\n    ------------------\n \n    subtype Argument_List is String_List;\n-   --  Type used for argument list in call to Spawn. The lower bound\n-   --  of the array should be 1, and the length of the array indicates\n-   --  the number of arguments.\n+   --  Type used for argument list in call to Spawn. The lower bound of the\n+   --  array should be 1, and the length of the array indicates the number of\n+   --  arguments.\n \n    subtype Argument_List_Access is String_List_Access;\n    --  Type used to return Argument_List without dragging in secondary stack.\n@@ -606,42 +614,45 @@ pragma Elaborate_Body (OS_Lib);\n    --  and Non_Blocking_Spawn call Normalize_Arguments automatically, but\n    --  since there is a guarantee that a second call does nothing, this\n    --  internal call will have no effect if Normalize_Arguments is called\n-   --  before calling Spawn. The call to Normalize_Arguments assumes that\n-   --  the individual referenced arguments in Argument_List are on the heap,\n-   --  and may free them and reallocate if they are modified.\n+   --  before calling Spawn. The call to Normalize_Arguments assumes that the\n+   --  individual referenced arguments in Argument_List are on the heap, and\n+   --  may free them and reallocate if they are modified.\n \n    procedure Spawn\n      (Program_Name : String;\n       Args         : Argument_List;\n       Success      : out Boolean);\n-   --  The first parameter of function Spawn is the name of the executable.\n-   --  The second parameter contains the arguments to be passed to the\n-   --  program. Success is False if the named program could not be spawned\n-   --  or its execution completed unsuccessfully. Note that the caller will\n-   --  be blocked until the execution of the spawned program is complete.\n-   --  For maximum portability, use a full path name for the Program_Name\n-   --  argument. On some systems (notably Unix systems) a simple file\n-   --  name may also work (if the executable can be located in the path).\n+   --  This procedure spawns a program with a given list of arguments. The\n+   --  first parameter of is the name of the executable. The second parameter\n+   --  contains the arguments to be passed to this program. Success is False\n+   --  if the named program could not be spawned or its execution completed\n+   --  unsuccessfully. Note that the caller will be blocked until the\n+   --  execution of the spawned program is complete. For maximum portability,\n+   --  use a full path name for the Program_Name argument. On some systems\n+   --  (notably Unix systems) a simple file name may also work (if the\n+   --  executable can be located in the path).\n    --\n-   --  \"Spawn\" should not be used in tasking applications.\n+   --  \"Spawn\" should not be used in tasking applications. Why not??? More\n+   --  documentation would be helpful here ??? Is it really tasking programs,\n+   --  or tasking activity that cause trouble ???\n    --\n    --  Note: Arguments in Args that contain spaces and/or quotes such as\n    --  \"--GCC=gcc -v\" or \"--GCC=\"\"gcc -v\"\"\" are not portable across all\n-   --  operating systems, and would not have the desired effect if they\n-   --  were passed directly to the operating system. To avoid this problem,\n-   --  Spawn makes an internal call to Normalize_Arguments, which ensures\n-   --  that such arguments are modified in a manner that ensures that the\n-   --  desired effect is obtained on all operating systems. The caller may\n-   --  call Normalize_Arguments explicitly before the call (e.g. to print\n-   --  out the exact form of arguments passed to the operating system). In\n-   --  this case the guarantee a second call to Normalize_Arguments has no\n-   --  effect ensures that the internal call will not affect the result.\n-   --  Note that the implicit call to Normalize_Arguments may free and\n-   --  reallocate some of the individual arguments.\n+   --  operating systems, and would not have the desired effect if they were\n+   --  passed directly to the operating system. To avoid this problem, Spawn\n+   --  makes an internal call to Normalize_Arguments, which ensures that such\n+   --  arguments are modified in a manner that ensures that the desired effect\n+   --  is obtained on all operating systems. The caller may call\n+   --  Normalize_Arguments explicitly before the call (e.g. to print out the\n+   --  exact form of arguments passed to the operating system). In this case\n+   --  the guarantee a second call to Normalize_Arguments has no effect\n+   --  ensures that the internal call will not affect the result. Note that\n+   --  the implicit call to Normalize_Arguments may free and reallocate some\n+   --  of the individual arguments.\n    --\n-   --  This function will always set Success to False under VxWorks and\n-   --  other similar operating systems which have no notion of the concept\n-   --  of a dynamically executable file.\n+   --  This function will always set Success to False under VxWorks and other\n+   --  similar operating systems which have no notion of the concept of\n+   --  dynamically executable file.\n \n    function Spawn\n      (Program_Name : String;\n@@ -659,12 +670,10 @@ pragma Elaborate_Body (OS_Lib);\n       Output_File_Descriptor : File_Descriptor;\n       Return_Code            : out Integer;\n       Err_To_Out             : Boolean := True);\n-   --  Similar to the procedure above, but redirects the output to\n-   --  the file designated by Output_File_Descriptor. If Err_To_Out\n-   --  is True, then the Standard Error output is also redirected.\n-   --\n-   --  Return_Code is set to the status code returned by the operating\n-   --  system as described above.\n+   --  Similar to the procedure above, but redirects the output to the file\n+   --  designated by Output_File_Descriptor. If Err_To_Out is True, then the\n+   --  Standard Error output is also redirected.\n+   --  Return_Code is set to the status code returned by the operating system\n    --\n    --  \"Spawn\" should not be used in tasking applications.\n \n@@ -675,13 +684,13 @@ pragma Elaborate_Body (OS_Lib);\n       Success       : out Boolean;\n       Return_Code   : out Integer;\n       Err_To_Out    : Boolean := True);\n-   --  Similar to the procedure above, but saves the output of the command\n-   --  to a file with the name Output_File.\n+   --  Similar to the procedure above, but saves the output of the command to\n+   --  a file with the name Output_File.\n    --\n    --  Success is set to True if the command is executed and its output\n-   --  successfully written to the file. If Success is True, then\n-   --  Return_Code will be set to the status code returned by the\n-   --  operating system. Otherwise, Return_Code is undefined.\n+   --  successfully written to the file. If Success is True, then Return_Code\n+   --  will be set to the status code returned by the operating system.\n+   --  Otherwise, Return_Code is undefined.\n    --\n    --  \"Spawn\" should not be used in tasking applications.\n \n@@ -691,67 +700,66 @@ pragma Elaborate_Body (OS_Lib);\n    --  comparison for equality.\n \n    Invalid_Pid : constant Process_Id;\n-   --  A special value used to indicate errors, as described below.\n+   --  A special value used to indicate errors, as described below\n \n    function Non_Blocking_Spawn\n      (Program_Name : String;\n       Args         : Argument_List)\n       return         Process_Id;\n-   --  This is a non blocking call. The Process_Id of the spawned process\n-   --  is returned. Parameters are to be used as in Spawn. If Invalid_Id\n-   --  is returned the program could not be spawned.\n+   --  This is a non blocking call. The Process_Id of the spawned process is\n+   --  returned. Parameters are to be used as in Spawn. If Invalid_Id is\n+   --  returned the program could not be spawned.\n    --\n    --  \"Non_Blocking_Spawn\" should not be used in tasking applications.\n    --\n-   --  This function will always return Invalid_Id under VxWorks, since\n-   --  there is no notion of executables under this OS.\n+   --  This function will always return Invalid_Id under VxWorks, since there\n+   --  is no notion of executables under this OS.\n \n    procedure Wait_Process (Pid : out Process_Id; Success : out Boolean);\n    --  Wait for the completion of any of the processes created by previous\n-   --  calls to Non_Blocking_Spawn. The caller will be suspended until one\n-   --  of these processes terminates (normally or abnormally). If any of\n-   --  these subprocesses terminates prior to the call to Wait_Process (and\n-   --  has not been returned by a previous call to Wait_Process), then the\n-   --  call to Wait_Process is immediate. Pid identifies the process that\n-   --  has terminated (matching the value returned from Non_Blocking_Spawn).\n-   --  Success is set to True if this sub-process terminated successfully.\n-   --  If Pid = Invalid_Id, there were no subprocesses left to wait on.\n+   --  calls to Non_Blocking_Spawn. The caller will be suspended until one of\n+   --  these processes terminates (normally or abnormally). If any of these\n+   --  subprocesses terminates prior to the call to Wait_Process (and has not\n+   --  been returned by a previous call to Wait_Process), then the call to\n+   --  Wait_Process is immediate. Pid identifies the process that has\n+   --  terminated (matching the value returned from Non_Blocking_Spawn).\n+   --  Success is set to True if this sub-process terminated successfully. If\n+   --  Pid = Invalid_Id, there were no subprocesses left to wait on.\n    --\n    --  This function will always set success to False under VxWorks, since\n    --  there is no notion of executables under this OS.\n \n    function Argument_String_To_List\n      (Arg_String : String)\n       return       Argument_List_Access;\n-   --  Take a string that is a program and its arguments and parse it into\n-   --  an Argument_List. Note that the result is allocated on the heap, and\n-   --  must be freed by the programmer (when it is no longer needed) to avoid\n+   --  Take a string that is a program and its arguments and parse it into an\n+   --  Argument_List. Note that the result is allocated on the heap, and must\n+   --  be freed by the programmer (when it is no longer needed) to avoid\n    --  memory leaks.\n \n    -------------------\n    -- Miscellaneous --\n    -------------------\n \n    function Getenv (Name : String) return String_Access;\n-   --  Get the value of the environment variable. Returns an access\n-   --  to the empty string if the environment variable does not exist\n-   --  or has an explicit null value (in some operating systems these\n-   --  are distinct cases, in others they are not; this interface\n-   --  abstracts away that difference. The argument is allocated on\n-   --  the heap (even in the null case), and needs to be freed explicitly\n-   --  when no longer needed to avoid memory leaks.\n+   --  Get the value of the environment variable. Returns an access to the\n+   --  empty string if the environment variable does not exist or has an\n+   --  explicit null value (in some operating systems these are distinct\n+   --  cases, in others they are not; this interface abstracts away that\n+   --  difference. The argument is allocated on the heap (even in the null\n+   --  case), and needs to be freed explicitly when no longer needed to avoid\n+   --  memory leaks.\n \n    procedure Setenv (Name : String; Value : String);\n    --  Set the value of the environment variable Name to Value. This call\n    --  modifies the current environment, but does not modify the parent\n-   --  process environment. After a call to Setenv, Getenv (Name) will\n-   --  always return a String_Access referencing the same String as Value.\n-   --  This is true also for the null string case (the actual effect may\n-   --  be to either set an explicit null as the value, or to remove the\n-   --  entry, this is operating system dependent). Note that any following\n-   --  calls to Spawn will pass an environment to the spawned process that\n-   --  includes the changes made by Setenv calls. This procedure is not\n-   --  available under VMS.\n+   --  process environment. After a call to Setenv, Getenv (Name) will always\n+   --  return a String_Access referencing the same String as Value. This is\n+   --  true also for the null string case (the actual effect may be to either\n+   --  set an explicit null as the value, or to remove the entry, this is\n+   --  operating system dependent). Note that any following calls to Spawn\n+   --  will pass an environment to the spawned process that includes the\n+   --  changes made by Setenv calls. This procedure is not available on VMS.\n \n    procedure OS_Exit (Status : Integer);\n    pragma Import (C, OS_Exit, \"__gnat_os_exit\");\n@@ -762,37 +770,36 @@ pragma Elaborate_Body (OS_Lib);\n    pragma Import (C, OS_Abort, \"abort\");\n    pragma No_Return (OS_Abort);\n    --  Exit to OS signalling an abort (traceback or other appropriate\n-   --  diagnostic information should be given if possible, or entry made\n-   --  to the debugger if that is possible).\n+   --  diagnostic information should be given if possible, or entry made to\n+   --  the debugger if that is possible).\n \n    function Errno return Integer;\n    pragma Import (C, Errno, \"__get_errno\");\n-   --  Return the task-safe last error number.\n+   --  Return the task-safe last error number\n \n    procedure Set_Errno (Errno : Integer);\n    pragma Import (C, Set_Errno, \"__set_errno\");\n-   --  Set the task-safe error number.\n+   --  Set the task-safe error number\n \n    Directory_Separator : constant Character;\n-   --  The character that is used to separate parts of a pathname.\n+   --  The character that is used to separate parts of a pathname\n \n    Path_Separator : constant Character;\n-   --  The character to separate paths in an environment variable value.\n+   --  The character to separate paths in an environment variable value\n \n private\n    pragma Import (C, Path_Separator, \"__gnat_path_separator\");\n    pragma Import (C, Directory_Separator, \"__gnat_dir_separator\");\n \n    type OS_Time is new Long_Integer;\n-   --  Type used for timestamps in the compiler. This type is used to\n-   --  hold time stamps, but may have a different representation than\n-   --  C's time_t. This type needs to match the declaration of OS_Time\n-   --  in adaint.h.\n-\n-   --  Add pragma Inline statements for comparison operations on OS_Time.\n-   --  It would actually be nice to use pragma Import (Intrinsic) here,\n-   --  but this was not properly supported till GNAT 3.15a, so that would\n-   --  cause bootstrap path problems. To be changed later ???\n+   --  Type used for timestamps in the compiler. This type is used to hold\n+   --  time stamps, but may have a different representation than C's time_t.\n+   --  This type needs to match the declaration of OS_Time in adaint.h.\n+\n+   --  Add pragma Inline statements for comparison operations on OS_Time. It\n+   --  would actually be nice to use pragma Import (Intrinsic) here, but this\n+   --  was not properly supported till GNAT 3.15a, so that would cause\n+   --  bootstrap path problems. To be changed later ???\n \n    Invalid_Time : constant OS_Time := -1;\n    --  This value should match the return valud by __gnat_file_time_*"}]}