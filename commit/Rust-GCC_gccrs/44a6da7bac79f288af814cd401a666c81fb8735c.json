{"sha": "44a6da7bac79f288af814cd401a666c81fb8735c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRhNmRhN2JhYzc5ZjI4OGFmODE0Y2Q0MDFhNjY2YzgxZmI4NzM1Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-02-06T21:12:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-02-06T21:12:13Z"}, "message": "PR c++/71193 - incomplete types in templates\n\n\t* parser.c (cp_parser_postfix_dot_deref_expression): In a template\n\thandle incomplete type by pedwarning and then treating as dependent.\n\nFrom-SVN: r245223", "tree": {"sha": "4cbfd8e8e59100224d7526f61ef5a0a997da535c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cbfd8e8e59100224d7526f61ef5a0a997da535c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44a6da7bac79f288af814cd401a666c81fb8735c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a6da7bac79f288af814cd401a666c81fb8735c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a6da7bac79f288af814cd401a666c81fb8735c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a6da7bac79f288af814cd401a666c81fb8735c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "391675acd2d18d0b6e5130a4105cf66eb1664683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391675acd2d18d0b6e5130a4105cf66eb1664683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391675acd2d18d0b6e5130a4105cf66eb1664683"}], "stats": {"total": 73, "additions": 57, "deletions": 16}, "files": [{"sha": "80f1113d8379fa4e669d2e8796f29e08141f0c27", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a6da7bac79f288af814cd401a666c81fb8735c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a6da7bac79f288af814cd401a666c81fb8735c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=44a6da7bac79f288af814cd401a666c81fb8735c", "patch": "@@ -1,3 +1,9 @@\n+2017-02-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/71193 - incomplete types in templates\n+\t* parser.c (cp_parser_postfix_dot_deref_expression): In a template\n+\thandle incomplete type by pedwarning and then treating as dependent.\n+\n 2017-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79379"}, {"sha": "d2df777f344d8d7987437c7b91cc351f1a7d9b04", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a6da7bac79f288af814cd401a666c81fb8735c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a6da7bac79f288af814cd401a666c81fb8735c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=44a6da7bac79f288af814cd401a666c81fb8735c", "patch": "@@ -7309,7 +7309,7 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n \n   /* Enter the scope corresponding to the type of the object\n      given by the POSTFIX_EXPRESSION.  */\n-  if (!dependent_p && TREE_TYPE (postfix_expression) != NULL_TREE)\n+  if (!dependent_p)\n     {\n       scope = TREE_TYPE (postfix_expression);\n       /* According to the standard, no expression should ever have\n@@ -7324,26 +7324,50 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n \t required to be of complete type for purposes of class member\n \t access (5.2.5) outside the member function body.  */\n       if (postfix_expression != current_class_ref\n+\t  && scope != error_mark_node\n \t  && !(processing_template_decl\n \t       && current_class_type\n \t       && (same_type_ignoring_top_level_qualifiers_p\n \t\t   (scope, current_class_type))))\n-\tscope = complete_type_or_else (scope, postfix_expression);\n-      /* Let the name lookup machinery know that we are processing a\n-\t class member access expression.  */\n-      parser->context->object_type = scope;\n-      /* If something went wrong, we want to be able to discern that case,\n-\t as opposed to the case where there was no SCOPE due to the type\n-\t of expression being dependent.  */\n-      if (!scope)\n-\tscope = error_mark_node;\n-      /* If the SCOPE was erroneous, make the various semantic analysis\n-\t functions exit quickly -- and without issuing additional error\n-\t messages.  */\n-      if (scope == error_mark_node)\n-\tpostfix_expression = error_mark_node;\n+\t{\n+\t  scope = complete_type (scope);\n+\t  if (!COMPLETE_TYPE_P (scope))\n+\t    {\n+\t      /* In a template, be permissive by treating an object expression\n+\t\t of incomplete type as dependent (after a pedwarn).  */\n+\t      diagnostic_t kind = (processing_template_decl\n+\t\t\t\t   ? DK_PEDWARN\n+\t\t\t\t   : DK_ERROR);\n+\t      cxx_incomplete_type_diagnostic\n+\t\t(location_of (postfix_expression),\n+\t\t postfix_expression, scope, kind);\n+\t      if (processing_template_decl)\n+\t\t{\n+\t\t  dependent_p = true;\n+\t\t  scope = TREE_TYPE (postfix_expression) = NULL_TREE;\n+\t\t}\n+\t    }\n+\t}\n+\n+      if (!dependent_p)\n+\t{\n+\t  /* Let the name lookup machinery know that we are processing a\n+\t     class member access expression.  */\n+\t  parser->context->object_type = scope;\n+\t  /* If something went wrong, we want to be able to discern that case,\n+\t     as opposed to the case where there was no SCOPE due to the type\n+\t     of expression being dependent.  */\n+\t  if (!scope)\n+\t    scope = error_mark_node;\n+\t  /* If the SCOPE was erroneous, make the various semantic analysis\n+\t     functions exit quickly -- and without issuing additional error\n+\t     messages.  */\n+\t  if (scope == error_mark_node)\n+\t    postfix_expression = error_mark_node;\n+\t}\n     }\n-  else\n+\n+  if (dependent_p)\n     /* Tell cp_parser_lookup_name that there was an object, even though it's\n        type-dependent.  */\n     parser->context->object_type = unknown_type_node;"}, {"sha": "d6cde6ab1ac8f38720fdf7ffc646d1e4c14d0779", "filename": "gcc/testsuite/g++.dg/template/incomplete8.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a6da7bac79f288af814cd401a666c81fb8735c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a6da7bac79f288af814cd401a666c81fb8735c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete8.C?ref=44a6da7bac79f288af814cd401a666c81fb8735c", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/71193\n+// { dg-options \"\" }\n+\n+class Heap;\n+class A {\n+public:  \n+  Heap *m_fn1();\n+};\n+template <typename> class B : A {\n+  void m_fn2() { m_fn1()->HashSeed; } // { dg-warning \"incomplete\" }\n+};"}]}