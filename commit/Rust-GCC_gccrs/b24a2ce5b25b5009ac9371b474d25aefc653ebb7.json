{"sha": "b24a2ce5b25b5009ac9371b474d25aefc653ebb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI0YTJjZTViMjViNTAwOWFjOTM3MWI0NzRkMjVhZWZjNjUzZWJiNw==", "commit": {"author": {"name": "Greta Yorsh", "email": "greta.yorsh@arm.com", "date": "2013-06-26T09:40:40Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2013-06-26T09:40:40Z"}, "message": "arm.h (MAX_CONDITIONAL_EXECUTE): Define macro.\n\n2013-06-26  Greta Yorsh  <Greta.Yorsh@arm.com>\n\n\t* config/arm/arm.h (MAX_CONDITIONAL_EXECUTE): Define macro.\n\t* config/arm/arm-protos.h (arm_max_conditional_execute): New\n\tdeclaration.\n\t(tune_params): Update comment.\n\t* config/arm/arm.c (arm_cortex_a15_tune): Set max_cond_insns to 2.\n\t(arm_max_conditional_execute): New function.\n\t(thumb2_final_prescan_insn): Use max_insn_skipped and\n\tMAX_INSN_PER_IT_BLOCK to compute maximum instructions in a block.\n\nFrom-SVN: r200419", "tree": {"sha": "945abfb6f7a7a6873628f9c827fe95234062c366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/945abfb6f7a7a6873628f9c827fe95234062c366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b24a2ce5b25b5009ac9371b474d25aefc653ebb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24a2ce5b25b5009ac9371b474d25aefc653ebb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b24a2ce5b25b5009ac9371b474d25aefc653ebb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24a2ce5b25b5009ac9371b474d25aefc653ebb7/comments", "author": null, "committer": null, "parents": [{"sha": "1a3fab15bcbd41b0ad326124c49eb62c67287bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a3fab15bcbd41b0ad326124c49eb62c67287bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a3fab15bcbd41b0ad326124c49eb62c67287bb2"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "88e09bf2e59b8e206e09a7248a39fb450fe8f98b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24a2ce5b25b5009ac9371b474d25aefc653ebb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24a2ce5b25b5009ac9371b474d25aefc653ebb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b24a2ce5b25b5009ac9371b474d25aefc653ebb7", "patch": "@@ -1,3 +1,14 @@\n+2013-06-26  Greta Yorsh  <Greta.Yorsh@arm.com>\n+\n+\t* config/arm/arm.h (MAX_CONDITIONAL_EXECUTE): Define macro.\n+\t* config/arm/arm-protos.h (arm_max_conditional_execute): New\n+\tdeclaration.\n+\t(tune_params): Update comment.\n+\t* config/arm/arm.c (arm_cortex_a15_tune): Set max_cond_insns to 2.\n+\t(arm_max_conditional_execute): New function.\n+\t(thumb2_final_prescan_insn): Use max_insn_skipped and\n+\tMAX_INSN_PER_IT_BLOCK to compute maximum instructions in a block.\n+\n 2013-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/57705"}, {"sha": "ef94bbcea25ad3260bbba2b86748950871232a9d", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24a2ce5b25b5009ac9371b474d25aefc653ebb7/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24a2ce5b25b5009ac9371b474d25aefc653ebb7/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=b24a2ce5b25b5009ac9371b474d25aefc653ebb7", "patch": "@@ -228,6 +228,8 @@ extern const char *arm_mangle_type (const_tree);\n \n extern void arm_order_regs_for_local_alloc (void);\n \n+extern int arm_max_conditional_execute ();\n+\n /* Vectorizer cost model implementation.  */\n struct cpu_vec_costs {\n   const int scalar_stmt_cost;   /* Cost of any scalar operation, excluding\n@@ -257,8 +259,7 @@ struct tune_params\n   bool (*rtx_costs) (rtx, RTX_CODE, RTX_CODE, int *, bool);\n   bool (*sched_adjust_cost) (rtx, rtx, rtx, int *);\n   int constant_limit;\n-  /* Maximum number of instructions to conditionalise in\n-     arm_final_prescan_insn.  */\n+  /* Maximum number of instructions to conditionalise.  */\n   int max_insns_skipped;\n   int num_prefetch_slots;\n   int l1_cache_size;"}, {"sha": "e6fd42079cbe42c32d8c4712276865c8e08be8ee", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24a2ce5b25b5009ac9371b474d25aefc653ebb7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24a2ce5b25b5009ac9371b474d25aefc653ebb7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b24a2ce5b25b5009ac9371b474d25aefc653ebb7", "patch": "@@ -1059,7 +1059,7 @@ const struct tune_params arm_cortex_a15_tune =\n   arm_9e_rtx_costs,\n   NULL,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n-  5,\t\t\t\t\t\t/* Max cond insns.  */\n+  2,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   false,\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost,\n@@ -9145,6 +9145,12 @@ arm_adjust_cost (rtx insn, rtx link, rtx dep, int cost)\n   return cost;\n }\n \n+int\n+arm_max_conditional_execute (void)\n+{\n+  return max_insns_skipped;\n+}\n+\n static int\n arm_default_branch_cost (bool speed_p, bool predictable_p ATTRIBUTE_UNUSED)\n {\n@@ -19567,6 +19573,13 @@ thumb2_final_prescan_insn (rtx insn)\n   enum arm_cond_code code;\n   int n;\n   int mask;\n+  int max;\n+\n+  /* Maximum number of conditionally executed instructions in a block\n+     is minimum of the two max values: maximum allowed in an IT block\n+     and maximum that is beneficial according to the cost model and tune.  */\n+  max = (max_insns_skipped < MAX_INSN_PER_IT_BLOCK) ?\n+    max_insns_skipped : MAX_INSN_PER_IT_BLOCK;\n \n   /* Remove the previous insn from the count of insns to be output.  */\n   if (arm_condexec_count)\n@@ -19609,9 +19622,9 @@ thumb2_final_prescan_insn (rtx insn)\n       /* ??? Recognize conditional jumps, and combine them with IT blocks.  */\n       if (GET_CODE (body) != COND_EXEC)\n \tbreak;\n-      /* Allow up to 4 conditionally executed instructions in a block.  */\n+      /* Maximum number of conditionally executed instructions in a block.  */\n       n = get_attr_ce_count (insn);\n-      if (arm_condexec_masklen + n > MAX_INSN_PER_IT_BLOCK)\n+      if (arm_condexec_masklen + n > max)\n \tbreak;\n \n       predicate = COND_EXEC_TEST (body);"}, {"sha": "387d2717431c374777000875e03f85d7423e20f2", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24a2ce5b25b5009ac9371b474d25aefc653ebb7/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24a2ce5b25b5009ac9371b474d25aefc653ebb7/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b24a2ce5b25b5009ac9371b474d25aefc653ebb7", "patch": "@@ -183,6 +183,11 @@ extern arm_cc arm_current_cc;\n \n #define ARM_INVERSE_CONDITION_CODE(X)  ((arm_cc) (((int)X) ^ 1))\n \n+/* The maximaum number of instructions that is beneficial to\n+   conditionally execute. */\n+#undef MAX_CONDITIONAL_EXECUTE\n+#define MAX_CONDITIONAL_EXECUTE arm_max_conditional_execute ()\n+\n extern int arm_target_label;\n extern int arm_ccfsm_state;\n extern GTY(()) rtx arm_target_insn;"}]}