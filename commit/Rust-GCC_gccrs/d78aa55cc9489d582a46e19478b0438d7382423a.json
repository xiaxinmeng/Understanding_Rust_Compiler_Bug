{"sha": "d78aa55cc9489d582a46e19478b0438d7382423a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc4YWE1NWNjOTQ4OWQ1ODJhNDZlMTk0NzhiMDQzOGQ3MzgyNDIzYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-10-28T00:20:42Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-10-28T00:20:42Z"}, "message": "c-tree.texi, [...]: Put punctuation outside quotes.\n\n\t* doc/c-tree.texi, doc/cpp.texi, doc/implement-c.texi,\n\tdoc/invoke.texi, doc/md.texi, doc/passes.texi, doc/tm.texi: Put\n\tpunctuation outside quotes.\n\nFrom-SVN: r89724", "tree": {"sha": "6f9913b7541fad96286adcce195a648eab93c1da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f9913b7541fad96286adcce195a648eab93c1da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d78aa55cc9489d582a46e19478b0438d7382423a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78aa55cc9489d582a46e19478b0438d7382423a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d78aa55cc9489d582a46e19478b0438d7382423a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78aa55cc9489d582a46e19478b0438d7382423a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f61f572fa3d6a3efe1f971908560ecd399d131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f61f572fa3d6a3efe1f971908560ecd399d131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f61f572fa3d6a3efe1f971908560ecd399d131"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "f561385387e7493fd905e99f409e265c122940b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d78aa55cc9489d582a46e19478b0438d7382423a", "patch": "@@ -1,3 +1,9 @@\n+2004-10-28  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* doc/c-tree.texi, doc/cpp.texi, doc/implement-c.texi,\n+\tdoc/invoke.texi, doc/md.texi, doc/passes.texi, doc/tm.texi: Put\n+\tpunctuation outside quotes.\n+\n 2004-10-27  David Mosberger  <davidm@hpl.hp.com>\n \t    James E Wilson  <wilson@specifixinc.com>\n "}, {"sha": "ac143f12cb65177eb89c039530d3716aabeb4947", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=d78aa55cc9489d582a46e19478b0438d7382423a", "patch": "@@ -145,7 +145,7 @@ erroneous code, you must be prepared to deal with the\n \n Occasionally, a particular tree slot (like an operand to an expression,\n or a particular field in a declaration) will be referred to as\n-``reserved for the back end.''  These slots are used to store RTL when\n+``reserved for the back end''.  These slots are used to store RTL when\n the tree is converted to RTL for use by the GCC back end.  However, if\n that process is not taking place (e.g., if the front end is being hooked\n up to an intelligent editor), then those slots may be used by the\n@@ -1551,7 +1551,7 @@ returned value for a constructor.  The first argument to the\n argument is the initializer for the object.  The object is initialized\n when the @code{RETURN_INIT} is encountered.  The object referred to is\n the actual object returned; this extension is a manual way of doing the\n-``return-value optimization.''  Therefore, the object must actually be\n+``return-value optimization''.  Therefore, the object must actually be\n constructed in the place where the object will be returned.\n \n @item RETURN_STMT"}, {"sha": "e0282e091734c7e9f86e1ee21ac202e599dc1c0f", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=d78aa55cc9489d582a46e19478b0438d7382423a", "patch": "@@ -510,7 +510,7 @@ However, a few of the keywords of C++ are significant even in the\n preprocessor.  @xref{C++ Named Operators}.\n \n In the 1999 C standard, identifiers may contain letters which are not\n-part of the ``basic source character set,'' at the implementation's\n+part of the ``basic source character set'', at the implementation's\n discretion (such as accented Latin letters, Greek letters, or Chinese\n ideograms).  This may be done with an extended character set, or the\n @samp{\\u} and @samp{\\U} escape sequences.  GCC does not presently\n@@ -596,7 +596,7 @@ Punctuator:      @{   @}   [   ]   #    ##\n @end smallexample\n \n @cindex other tokens\n-Any other single character is considered ``other.'' It is passed on to\n+Any other single character is considered ``other''. It is passed on to\n the preprocessor's output unmolested.  The C compiler will almost\n certainly reject source code containing ``other'' tokens.  In ASCII, the\n only other characters are @samp{@@}, @samp{$}, @samp{`}, and control\n@@ -1076,7 +1076,7 @@ would have to edit the new headers to match.\n \n There is no way to solve this problem within the C standard, but you can\n use the GNU extension @samp{#include_next}.  It means, ``Include the\n-@emph{next} file with this name.''  This directive works like\n+@emph{next} file with this name''.  This directive works like\n @samp{#include} except in searching for the specified file: it starts\n searching the list of header file directories @emph{after} the directory\n in which the current file was found.\n@@ -4104,7 +4104,7 @@ comma, then @samp{##} behaves as a normal token paste.\n @item @samp{#line} and @samp{#include}\n \n The @samp{#line} directive used to change GCC's notion of the\n-``directory containing the current file,'' used by @samp{#include} with\n+``directory containing the current file'', used by @samp{#include} with\n a double-quoted header file name.  In 3.0 and later, it does not.\n @xref{Line Control}, for further explanation.\n "}, {"sha": "841ce75e373ea8abb63c75fa60d1d5f3f438705c", "filename": "gcc/doc/implement-c.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=d78aa55cc9489d582a46e19478b0438d7382423a", "patch": "@@ -8,7 +8,7 @@\n \n A conforming implementation of ISO C is required to document its\n choice of behavior in each of the areas that are designated\n-``implementation defined.''  The following lists all such areas,\n+``implementation defined''.  The following lists all such areas,\n along with the section numbers from the ISO/IEC 9899:1990 and ISO/IEC\n 9899:1999 standards.  Some areas are only implementation-defined in\n one version of the standard."}, {"sha": "c08afdf9fe7602e5b21a2f0955ab7a886a3a8fa0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d78aa55cc9489d582a46e19478b0438d7382423a", "patch": "@@ -3896,8 +3896,8 @@ sequence.  For C source files, this is the compiler proper and assembler\n # as 0.00 0.01\n @end smallexample\n \n-The first number on each line is the ``user time,'' that is time spent\n-executing the program itself.  The second number is ``system time,''\n+The first number on each line is the ``user time'', that is time spent\n+executing the program itself.  The second number is ``system time'',\n time spent executing operating system routines on behalf of the program.\n Both numbers are in seconds.\n \n@@ -10760,11 +10760,11 @@ to the GNU linker for 32-bit PowerPC systems as well.\n \n On Darwin/PPC systems, @code{#pragma longcall} will generate ``jbsr\n callee, L42'', plus a ``branch island'' (glue code).  The two target\n-addresses represent the callee and the ``branch island.'' The\n+addresses represent the callee and the ``branch island''.  The\n Darwin/PPC linker will prefer the first address and generate a ``bl\n callee'' if the PPC ``bl'' instruction will reach the callee directly;\n otherwise, the linker will generate ``bl L42'' to call the ``branch\n-island.''  The ``branch island'' is appended to the body of the\n+island''.  The ``branch island'' is appended to the body of the\n calling function; it computes the full 32-bit address of the callee\n and jumps to it.\n "}, {"sha": "6d8d6d1e8148646d2e47e7fb543f1c3e0e71a86a", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=d78aa55cc9489d582a46e19478b0438d7382423a", "patch": "@@ -1307,9 +1307,9 @@ identical.  If we are considering an insn of the form\n @noindent\n the first pattern would not apply at all, because this insn does not\n contain two identical subexpressions in the right place.  The pattern would\n-say, ``That does not look like an add instruction; try other patterns.''\n+say, ``That does not look like an add instruction; try other patterns''.\n The second pattern would say, ``Yes, that's an add instruction, but there\n-is something wrong with it.''  It would direct the reload pass of the\n+is something wrong with it''.  It would direct the reload pass of the\n compiler to generate additional insns to make the constraint true.  The\n results might look like this:\n "}, {"sha": "7ecc866616c198412fa563ee0e04630fc6f64f8c", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=d78aa55cc9489d582a46e19478b0438d7382423a", "patch": "@@ -110,8 +110,8 @@ definitions immediately or queue them for later processing.\n @cindex GIMPLE\n @dfn{Gimplification} is a whimsical term for the process of converting\n the intermediate representation of a function into the GIMPLE language\n-(CROSSREF).  The term stuck, and so words like ``gimplification,''\n-``gimplify,'' ``gimplifier'' and the like are sprinkled throughout this\n+(CROSSREF).  The term stuck, and so words like ``gimplification'',\n+``gimplify'', ``gimplifier'' and the like are sprinkled throughout this\n section of code.\n \n @cindex GENERIC"}, {"sha": "c7a1816ab468eb363bda4cd46268e0ecfc6a159f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78aa55cc9489d582a46e19478b0438d7382423a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d78aa55cc9489d582a46e19478b0438d7382423a", "patch": "@@ -2860,7 +2860,7 @@ Here is the basic stack layout.\n Define this macro if pushing a word onto the stack moves the stack\n pointer to a smaller address.\n \n-When we say, ``define this macro if @dots{},'' it means that the\n+When we say, ``define this macro if @dots{}'', it means that the\n compiler checks this macro only with @code{#ifdef} so the precise\n definition used does not matter.\n @end defmac"}]}