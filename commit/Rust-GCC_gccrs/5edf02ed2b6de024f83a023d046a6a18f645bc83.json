{"sha": "5edf02ed2b6de024f83a023d046a6a18f645bc83", "node_id": "C_kwDOANBUbNoAKDVlZGYwMmVkMmI2ZGUwMjRmODNhMDIzZDA0NmE2YTE4ZjY0NWJjODM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-15T11:33:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-15T12:21:20Z"}, "message": "tree-optimization/106922 - PRE and virtual operand translation\n\nPRE implicitely keeps virtual operands at the blocks incoming version\nbut the explicit updating point during PHI translation fails to trigger\nwhen there are no PHIs at all in a block.  Later lazy updating then\nfails because of a too lose block check.  A similar issues plagues\nreference invalidation when checking the ANTIC_OUT to ANTIC_IN\ntranslation.  The following fixes both and makes the lazy updating\nwork.\n\nThe diagnostic testcase unfortunately requires boost so the\ntestcase is the one I reduced for a missed optimization in PRE.\nThe testcase fails with -m32 on x86_64 because we optimize too\nmuch before PRE which causes PRE to not trigger so we fail to\neliminate a full redundancy.  I'm going to open a separate bug\nfor this.  Hopefully the !lp64 selector is good enough.\n\n\tPR tree-optimization/106922\n\t* tree-ssa-pre.cc (translate_vuse_through_block): Only\n\tkeep the VUSE if its def dominates PHIBLOCK.\n\t(prune_clobbered_mems): Rewrite logic so we check whether\n\ta value dies in a block when the VUSE def doesn't dominate it.\n\n\t* g++.dg/tree-ssa/pr106922.C: New testcase.", "tree": {"sha": "3cab78ed4aef66f6e7b74cadba4af047df5ddf51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cab78ed4aef66f6e7b74cadba4af047df5ddf51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5edf02ed2b6de024f83a023d046a6a18f645bc83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edf02ed2b6de024f83a023d046a6a18f645bc83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5edf02ed2b6de024f83a023d046a6a18f645bc83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edf02ed2b6de024f83a023d046a6a18f645bc83/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff2a92a0450243e52d3299a13b30f208bafa7e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff2a92a0450243e52d3299a13b30f208bafa7e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff2a92a0450243e52d3299a13b30f208bafa7e0"}], "stats": {"total": 109, "additions": 103, "deletions": 6}, "files": [{"sha": "faf379b0361452e166157702f3d4fdbe537617a5", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr106922.C", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5edf02ed2b6de024f83a023d046a6a18f645bc83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr106922.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5edf02ed2b6de024f83a023d046a6a18f645bc83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr106922.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr106922.C?ref=5edf02ed2b6de024f83a023d046a6a18f645bc83", "patch": "@@ -0,0 +1,91 @@\n+// { dg-require-effective-target c++20 }\n+// { dg-options \"-O2 -fdump-tree-pre-details -fdump-tree-cddce3\" }\n+\n+template <typename> struct __new_allocator {\n+  void deallocate(int *, int) { operator delete(0); }\n+};\n+template <typename _Tp> using __allocator_base = __new_allocator<_Tp>;\n+template <typename> struct allocator : __allocator_base<int> {\n+  [[__gnu__::__always_inline__]] void deallocate(int *__p, int __n) {\n+    __allocator_base<int>::deallocate(__p, __n);\n+  }\n+};\n+template <typename> struct allocator_traits;\n+template <typename _Tp> struct allocator_traits<allocator<_Tp>> {\n+  using allocator_type = allocator<_Tp>;\n+  using pointer = _Tp *;\n+  using size_type = int;\n+  template <typename _Up> using rebind_alloc = allocator<_Up>;\n+  static void deallocate(allocator_type &__a, pointer __p, size_type __n) {\n+    __a.deallocate(__p, __n);\n+  }\n+};\n+template <typename _Alloc> struct __alloc_traits : allocator_traits<_Alloc> {\n+  typedef allocator_traits<_Alloc> _Base_type;\n+  template <typename _Tp> struct rebind {\n+    typedef _Base_type::template rebind_alloc<_Tp> other;\n+  };\n+};\n+long _M_deallocate___n;\n+struct _Vector_base {\n+  typedef __alloc_traits<allocator<int>>::rebind<int>::other _Tp_alloc_type;\n+  typedef __alloc_traits<_Tp_alloc_type>::pointer pointer;\n+  struct _Vector_impl_data {\n+    pointer _M_start;\n+  };\n+  struct _Vector_impl : _Tp_alloc_type, _Vector_impl_data {};\n+  ~_Vector_base() { _M_deallocate(_M_impl._M_start); }\n+  _Vector_impl _M_impl;\n+  void _M_deallocate(pointer __p) {\n+    if (__p)\n+      __alloc_traits<_Tp_alloc_type>::deallocate(_M_impl, __p,\n+                                                 _M_deallocate___n);\n+  }\n+};\n+struct vector : _Vector_base {};\n+struct aligned_storage {\n+  int dummy_;\n+  int *ptr_ref0;\n+  vector &ref() {\n+    vector *__trans_tmp_2;\n+    void *__trans_tmp_1 = &dummy_;\n+    union {\n+      void *ap_pvoid;\n+      vector *as_ptype;\n+    } caster{__trans_tmp_1};\n+    __trans_tmp_2 = caster.as_ptype;\n+    return *__trans_tmp_2;\n+  }\n+};\n+struct optional_base {\n+  optional_base operator=(optional_base &) {\n+    bool __trans_tmp_3 = m_initialized;\n+    if (__trans_tmp_3)\n+      m_initialized = false;\n+    return *this;\n+  }\n+  ~optional_base() {\n+    if (m_initialized)\n+      m_storage.ref().~vector();\n+  }\n+  bool m_initialized;\n+  aligned_storage m_storage;\n+};\n+struct optional : optional_base {\n+  optional() : optional_base() {}\n+};\n+template <class> using Optional = optional;\n+struct Trans_NS___cxx11_basic_stringstream {};\n+void operator<<(Trans_NS___cxx11_basic_stringstream, int);\n+int testfunctionfoo_myStructs[10];\n+void testfunctionfoo() {\n+  Optional<char> external, internal;\n+  for (auto myStruct : testfunctionfoo_myStructs) {\n+    Trans_NS___cxx11_basic_stringstream address_stream;\n+    address_stream << myStruct;\n+    external = internal;\n+  }\n+}\n+\n+// { dg-final { scan-tree-dump-times \"Found fully redundant value\" 4 \"pre\" { xfail { ! lp64 } } } }\n+// { dg-final { scan-tree-dump-not \"m_initialized\" \"cddce3\" { xfail { ! lp64 } } } }"}, {"sha": "2afc74fc57c764e5d42371630a67e54ea5d43f48", "filename": "gcc/tree-ssa-pre.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5edf02ed2b6de024f83a023d046a6a18f645bc83/gcc%2Ftree-ssa-pre.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5edf02ed2b6de024f83a023d046a6a18f645bc83/gcc%2Ftree-ssa-pre.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.cc?ref=5edf02ed2b6de024f83a023d046a6a18f645bc83", "patch": "@@ -1236,7 +1236,11 @@ translate_vuse_through_block (vec<vn_reference_op_s> operands,\n   if (same_valid)\n     *same_valid = true;\n \n-  if (gimple_bb (phi) != phiblock)\n+  /* If value-numbering provided a memory state for this\n+     that dominates PHIBLOCK we can just use that.  */\n+  if (gimple_nop_p (phi)\n+      || (gimple_bb (phi) != phiblock\n+\t  && dominated_by_p (CDI_DOMINATORS, phiblock, gimple_bb (phi))))\n     return vuse;\n \n   /* We have pruned expressions that are killed in PHIBLOCK via\n@@ -2031,11 +2035,13 @@ prune_clobbered_mems (bitmap_set_t set, basic_block block)\n \t    {\n \t      gimple *def_stmt = SSA_NAME_DEF_STMT (ref->vuse);\n \t      if (!gimple_nop_p (def_stmt)\n-\t\t  && ((gimple_bb (def_stmt) != block\n-\t\t       && !dominated_by_p (CDI_DOMINATORS,\n-\t\t\t\t\t   block, gimple_bb (def_stmt)))\n-\t\t      || (gimple_bb (def_stmt) == block\n-\t\t\t  && value_dies_in_block_x (expr, block))))\n+\t\t  /* If value-numbering provided a memory state for this\n+\t\t     that dominates BLOCK we're done, otherwise we have\n+\t\t     to check if the value dies in BLOCK.  */\n+\t\t  && !(gimple_bb (def_stmt) != block\n+\t\t       && dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t\t  block, gimple_bb (def_stmt)))\n+\t\t  && value_dies_in_block_x (expr, block))\n \t\tto_remove = i;\n \t    }\n \t  /* If the REFERENCE may trap make sure the block does not contain"}]}