{"sha": "4352288a3df915575a2b820f702242908740106f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1MjI4OGEzZGY5MTU1NzVhMmI4MjBmNzAyMjQyOTA4NzQwMTA2Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-24T15:01:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-24T15:01:45Z"}, "message": "tree-vect-slp.c (vect_get_and_check_slp_defs): For reduction chains try harder with operand swapping and instead of putting a...\n\n2019-10-24  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_get_and_check_slp_defs): For reduction\n\tchains try harder with operand swapping and instead of\n\tputting a shifted chain into the reduction operands put\n\ta repetition of the final reduction op there as if we'd\n\treassociate the expression.\n\n\t* gcc.dg/vect/slp-reduc-10a.c: New testcase.\n\t* gcc.dg/vect/slp-reduc-10b.c: Likewise.\n\t* gcc.dg/vect/slp-reduc-10c.c: Likewise.\n\t* gcc.dg/vect/slp-reduc-10d.c: Likewise.\n\t* gcc.dg/vect/slp-reduc-10e.c: Likewise.\n\nFrom-SVN: r277406", "tree": {"sha": "575af1eed28449217962628ae5ea192898d39358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/575af1eed28449217962628ae5ea192898d39358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4352288a3df915575a2b820f702242908740106f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4352288a3df915575a2b820f702242908740106f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4352288a3df915575a2b820f702242908740106f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4352288a3df915575a2b820f702242908740106f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ce55f3ff5d04834e436a72fb2be84b31aa89def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce55f3ff5d04834e436a72fb2be84b31aa89def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce55f3ff5d04834e436a72fb2be84b31aa89def"}], "stats": {"total": 477, "additions": 464, "deletions": 13}, "files": [{"sha": "f63370bd32911ba3b5199e244d9718ac1acd1870", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4352288a3df915575a2b820f702242908740106f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4352288a3df915575a2b820f702242908740106f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4352288a3df915575a2b820f702242908740106f", "patch": "@@ -1,3 +1,11 @@\n+2019-10-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): For reduction\n+\tchains try harder with operand swapping and instead of\n+\tputting a shifted chain into the reduction operands put\n+\ta repetition of the final reduction op there as if we'd\n+\treassociate the expression.\n+\n 2019-10-24  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-reference.c (ipa_reference_optimization_summary_d): Rename"}, {"sha": "329f244474f3bdecba5efde9426b3a78ed7b66a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4352288a3df915575a2b820f702242908740106f", "patch": "@@ -1,3 +1,11 @@\n+2019-10-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/slp-reduc-10a.c: New testcase.\n+\t* gcc.dg/vect/slp-reduc-10b.c: Likewise.\n+\t* gcc.dg/vect/slp-reduc-10c.c: Likewise.\n+\t* gcc.dg/vect/slp-reduc-10d.c: Likewise.\n+\t* gcc.dg/vect/slp-reduc-10e.c: Likewise.\n+\n 2019-10-24  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc.target/msp430/emulate-slli.c: Skip for -mcpu=msp430."}, {"sha": "d3c2c2d7f54db637a6da8aa20598717e9ba292b8", "filename": "gcc/testsuite/gcc.dg/vect/slp-reduc-10a.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10a.c?ref=4352288a3df915575a2b820f702242908740106f", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-fgimple\" } */\n+\n+int __GIMPLE (ssa,guessed_local(118111600),startwith(\"dce3\"))\n+foo (int * x, int n)\n+{\n+  int i;\n+  int sum;\n+  int _1;\n+  long unsigned int _2;\n+  long unsigned int _3;\n+  int * _4;\n+  int _5;\n+  __SIZETYPE__ _7;\n+  __SIZETYPE__ _8;\n+  int * _9;\n+  int _10;\n+  __SIZETYPE__ _11;\n+  __SIZETYPE__ _12;\n+  int * _13;\n+  int _14;\n+  __SIZETYPE__ _15;\n+  __SIZETYPE__ _16;\n+  int * _17;\n+  int _18;\n+\n+  __BB(2,guessed_local(118111600)):\n+  if (n_21(D) > 0)\n+    goto __BB5(guessed(119453778));\n+  else\n+    goto __BB7(guessed(14763950));\n+\n+  __BB(5,guessed_local(105119324)):\n+  goto __BB3(precise(134217728));\n+\n+  __BB(3,loop_header(1),guessed_local(955630224)):\n+  sum_30 = __PHI (__BB5: 0, __BB6: sum_27);\n+  i_32 = __PHI (__BB5: 0, __BB6: i_28);\n+  _1 = i_32 * 4;\n+  _2 = (long unsigned int) _1;\n+  _3 = _2 * 4ul;\n+  _4 = x_23(D) + _3;\n+  _5 = __MEM <int> (_4);\n+  sum_24 = _5 + sum_30;\n+  _7 = _2 + 1ul;\n+  _8 = _7 * 4ul;\n+  _9 = x_23(D) + _8;\n+  _10 = __MEM <int> (_9);\n+  sum_25 = _10 + sum_24;\n+  _11 = _2 + 2ul;\n+  _12 = _11 * 4ul;\n+  _13 = x_23(D) + _12;\n+  _14 = __MEM <int> (_13);\n+  sum_26 = _14 + sum_25;\n+  _15 = _2 + 3ul;\n+  _16 = _15 * 4ul;\n+  _17 = x_23(D) + _16;\n+  _18 = __MEM <int> (_17);\n+  sum_27 = _18 + sum_26;\n+  i_28 = i_32 + 1;\n+  if (n_21(D) > i_28)\n+    goto __BB6(guessed(119453778));\n+  else\n+    goto __BB8(guessed(14763950));\n+\n+  __BB(8,guessed_local(105119324)):\n+  goto __BB4(precise(134217728));\n+\n+  __BB(6,guessed_local(850510900)):\n+  goto __BB3(precise(134217728));\n+\n+  __BB(7,guessed_local(12992276)):\n+  goto __BB4(precise(134217728));\n+\n+  __BB(4,guessed_local(118111601)):\n+  sum_31 = __PHI (__BB7: 0, __BB8: sum_27);\n+  return sum_31;\n+\n+}\n+\n+/* { dg-final { scan-tree-dump \"Decided to SLP 1 instances\" \"vect\" } } */"}, {"sha": "6a0d55def306ca1ad0dce76e59f65892f7ac1c2a", "filename": "gcc/testsuite/gcc.dg/vect/slp-reduc-10b.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10b.c?ref=4352288a3df915575a2b820f702242908740106f", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-fgimple\" } */\n+\n+int __GIMPLE (ssa,guessed_local(118111600),startwith(\"dce3\"))\n+foo (int * x, int n)\n+{\n+  int i;\n+  int sum;\n+  int _1;\n+  long unsigned int _2;\n+  long unsigned int _3;\n+  int * _4;\n+  int _5;\n+  __SIZETYPE__ _7;\n+  __SIZETYPE__ _8;\n+  int * _9;\n+  int _100;\n+  __SIZETYPE__ _11;\n+  __SIZETYPE__ _12;\n+  int * _13;\n+  int _14;\n+  __SIZETYPE__ _15;\n+  __SIZETYPE__ _16;\n+  int * _17;\n+  int _18;\n+\n+  __BB(2,guessed_local(118111600)):\n+  if (n_21(D) > 0)\n+    goto __BB5(guessed(119453778));\n+  else\n+    goto __BB7(guessed(14763950));\n+\n+  __BB(5,guessed_local(105119324)):\n+  goto __BB3(precise(134217728));\n+\n+  __BB(3,loop_header(1),guessed_local(955630224)):\n+  sum_30 = __PHI (__BB5: 0, __BB6: sum_27);\n+  i_32 = __PHI (__BB5: 0, __BB6: i_28);\n+  _1 = i_32 * 4;\n+  _2 = (long unsigned int) _1;\n+  _3 = _2 * 4ul;\n+  _4 = x_23(D) + _3;\n+  _5 = __MEM <int> (_4);\n+  sum_24 = _5 + sum_30;\n+  _7 = _2 + 1ul;\n+  _8 = _7 * 4ul;\n+  _9 = x_23(D) + _8;\n+  _100 = __MEM <int> (_9);\n+  sum_25 = sum_24 + _100;\n+  _11 = _2 + 2ul;\n+  _12 = _11 * 4ul;\n+  _13 = x_23(D) + _12;\n+  _14 = __MEM <int> (_13);\n+  sum_26 = _14 + sum_25;\n+  _15 = _2 + 3ul;\n+  _16 = _15 * 4ul;\n+  _17 = x_23(D) + _16;\n+  _18 = __MEM <int> (_17);\n+  sum_27 = _18 + sum_26;\n+  i_28 = i_32 + 1;\n+  if (n_21(D) > i_28)\n+    goto __BB6(guessed(119453778));\n+  else\n+    goto __BB8(guessed(14763950));\n+\n+  __BB(8,guessed_local(105119324)):\n+  goto __BB4(precise(134217728));\n+\n+  __BB(6,guessed_local(850510900)):\n+  goto __BB3(precise(134217728));\n+\n+  __BB(7,guessed_local(12992276)):\n+  goto __BB4(precise(134217728));\n+\n+  __BB(4,guessed_local(118111601)):\n+  sum_31 = __PHI (__BB7: 0, __BB8: sum_27);\n+  return sum_31;\n+\n+}\n+\n+/* { dg-final { scan-tree-dump \"Decided to SLP 1 instances\" \"vect\" } } */"}, {"sha": "20df2626764e9a315f4eb5b994afeea3556c4848", "filename": "gcc/testsuite/gcc.dg/vect/slp-reduc-10c.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10c.c?ref=4352288a3df915575a2b820f702242908740106f", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-fgimple\" } */\n+\n+int __GIMPLE (ssa,guessed_local(118111600),startwith(\"dce3\"))\n+foo (int * x, int n)\n+{\n+  int i;\n+  int sum;\n+  int _1;\n+  long unsigned int _2;\n+  long unsigned int _3;\n+  int * _4;\n+  int _5;\n+  __SIZETYPE__ _7;\n+  __SIZETYPE__ _8;\n+  int * _9;\n+  int _10;\n+  __SIZETYPE__ _11;\n+  __SIZETYPE__ _12;\n+  int * _13;\n+  int _100;\n+  __SIZETYPE__ _15;\n+  __SIZETYPE__ _16;\n+  int * _17;\n+  int _18;\n+\n+  __BB(2,guessed_local(118111600)):\n+  if (n_21(D) > 0)\n+    goto __BB5(guessed(119453778));\n+  else\n+    goto __BB7(guessed(14763950));\n+\n+  __BB(5,guessed_local(105119324)):\n+  goto __BB3(precise(134217728));\n+\n+  __BB(3,loop_header(1),guessed_local(955630224)):\n+  sum_30 = __PHI (__BB5: 0, __BB6: sum_27);\n+  i_32 = __PHI (__BB5: 0, __BB6: i_28);\n+  _1 = i_32 * 4;\n+  _2 = (long unsigned int) _1;\n+  _3 = _2 * 4ul;\n+  _4 = x_23(D) + _3;\n+  _5 = __MEM <int> (_4);\n+  sum_24 = _5 + sum_30;\n+  _7 = _2 + 1ul;\n+  _8 = _7 * 4ul;\n+  _9 = x_23(D) + _8;\n+  _10 = __MEM <int> (_9);\n+  sum_25 = _10 + sum_24;\n+  _11 = _2 + 2ul;\n+  _12 = _11 * 4ul;\n+  _13 = x_23(D) + _12;\n+  _100 = __MEM <int> (_13);\n+  sum_26 = sum_25 + _100;\n+  _15 = _2 + 3ul;\n+  _16 = _15 * 4ul;\n+  _17 = x_23(D) + _16;\n+  _18 = __MEM <int> (_17);\n+  sum_27 = _18 + sum_26;\n+  i_28 = i_32 + 1;\n+  if (n_21(D) > i_28)\n+    goto __BB6(guessed(119453778));\n+  else\n+    goto __BB8(guessed(14763950));\n+\n+  __BB(8,guessed_local(105119324)):\n+  goto __BB4(precise(134217728));\n+\n+  __BB(6,guessed_local(850510900)):\n+  goto __BB3(precise(134217728));\n+\n+  __BB(7,guessed_local(12992276)):\n+  goto __BB4(precise(134217728));\n+\n+  __BB(4,guessed_local(118111601)):\n+  sum_31 = __PHI (__BB7: 0, __BB8: sum_27);\n+  return sum_31;\n+\n+}\n+\n+/* { dg-final { scan-tree-dump \"Decided to SLP 1 instances\" \"vect\" } } */"}, {"sha": "8a512d5c14db0d3042d8bcf557bc553c0fe22c14", "filename": "gcc/testsuite/gcc.dg/vect/slp-reduc-10d.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10d.c?ref=4352288a3df915575a2b820f702242908740106f", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-fgimple\" } */\n+\n+int __GIMPLE (ssa,guessed_local(118111600),startwith(\"dce3\"))\n+foo (int * x, int n)\n+{\n+  int i;\n+  int sum;\n+  int _1;\n+  long unsigned int _2;\n+  long unsigned int _3;\n+  int * _4;\n+  int _5;\n+  __SIZETYPE__ _7;\n+  __SIZETYPE__ _8;\n+  int * _9;\n+  int _10;\n+  __SIZETYPE__ _11;\n+  __SIZETYPE__ _12;\n+  int * _13;\n+  int _14;\n+  __SIZETYPE__ _15;\n+  __SIZETYPE__ _16;\n+  int * _17;\n+  int _100;\n+\n+  __BB(2,guessed_local(118111600)):\n+  if (n_21(D) > 0)\n+    goto __BB5(guessed(119453778));\n+  else\n+    goto __BB7(guessed(14763950));\n+\n+  __BB(5,guessed_local(105119324)):\n+  goto __BB3(precise(134217728));\n+\n+  __BB(3,loop_header(1),guessed_local(955630224)):\n+  sum_30 = __PHI (__BB5: 0, __BB6: sum_27);\n+  i_32 = __PHI (__BB5: 0, __BB6: i_28);\n+  _1 = i_32 * 4;\n+  _2 = (long unsigned int) _1;\n+  _3 = _2 * 4ul;\n+  _4 = x_23(D) + _3;\n+  _5 = __MEM <int> (_4);\n+  sum_24 = _5 + sum_30;\n+  _7 = _2 + 1ul;\n+  _8 = _7 * 4ul;\n+  _9 = x_23(D) + _8;\n+  _10 = __MEM <int> (_9);\n+  sum_25 = _10 + sum_24;\n+  _11 = _2 + 2ul;\n+  _12 = _11 * 4ul;\n+  _13 = x_23(D) + _12;\n+  _14 = __MEM <int> (_13);\n+  sum_26 = _14 + sum_25;\n+  _15 = _2 + 3ul;\n+  _16 = _15 * 4ul;\n+  _17 = x_23(D) + _16;\n+  _100 = __MEM <int> (_17);\n+  sum_27 = sum_26 + _100;\n+  i_28 = i_32 + 1;\n+  if (n_21(D) > i_28)\n+    goto __BB6(guessed(119453778));\n+  else\n+    goto __BB8(guessed(14763950));\n+\n+  __BB(8,guessed_local(105119324)):\n+  goto __BB4(precise(134217728));\n+\n+  __BB(6,guessed_local(850510900)):\n+  goto __BB3(precise(134217728));\n+\n+  __BB(7,guessed_local(12992276)):\n+  goto __BB4(precise(134217728));\n+\n+  __BB(4,guessed_local(118111601)):\n+  sum_31 = __PHI (__BB7: 0, __BB8: sum_27);\n+  return sum_31;\n+\n+}\n+\n+/* { dg-final { scan-tree-dump \"Decided to SLP 1 instances\" \"vect\" } } */"}, {"sha": "268ec9db77da3a9200b227bcd88c3a0be5273712", "filename": "gcc/testsuite/gcc.dg/vect/slp-reduc-10e.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4352288a3df915575a2b820f702242908740106f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-10e.c?ref=4352288a3df915575a2b820f702242908740106f", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-fgimple\" } */\n+\n+int __GIMPLE (ssa,guessed_local(118111600),startwith(\"dce3\"))\n+foo (int * x, int n)\n+{\n+  int i;\n+  int sum;\n+  int _1;\n+  long unsigned int _2;\n+  long unsigned int _3;\n+  int * _4;\n+  int _100;\n+  __SIZETYPE__ _7;\n+  __SIZETYPE__ _8;\n+  int * _9;\n+  int _10;\n+  __SIZETYPE__ _11;\n+  __SIZETYPE__ _12;\n+  int * _13;\n+  int _14;\n+  __SIZETYPE__ _15;\n+  __SIZETYPE__ _16;\n+  int * _17;\n+  int _18;\n+\n+  __BB(2,guessed_local(118111600)):\n+  if (n_21(D) > 0)\n+    goto __BB5(guessed(119453778));\n+  else\n+    goto __BB7(guessed(14763950));\n+\n+  __BB(5,guessed_local(105119324)):\n+  goto __BB3(precise(134217728));\n+\n+  __BB(3,loop_header(1),guessed_local(955630224)):\n+  sum_30 = __PHI (__BB5: 0, __BB6: sum_27);\n+  i_32 = __PHI (__BB5: 0, __BB6: i_28);\n+  _1 = i_32 * 4;\n+  _2 = (long unsigned int) _1;\n+  _3 = _2 * 4ul;\n+  _4 = x_23(D) + _3;\n+  _100 = __MEM <int> (_4);\n+  sum_24 = sum_30 + _100;\n+  _7 = _2 + 1ul;\n+  _8 = _7 * 4ul;\n+  _9 = x_23(D) + _8;\n+  _10 = __MEM <int> (_9);\n+  sum_25 = _10 + sum_24;\n+  _11 = _2 + 2ul;\n+  _12 = _11 * 4ul;\n+  _13 = x_23(D) + _12;\n+  _14 = __MEM <int> (_13);\n+  sum_26 = _14 + sum_25;\n+  _15 = _2 + 3ul;\n+  _16 = _15 * 4ul;\n+  _17 = x_23(D) + _16;\n+  _18 = __MEM <int> (_17);\n+  sum_27 = _18 + sum_26;\n+  i_28 = i_32 + 1;\n+  if (n_21(D) > i_28)\n+    goto __BB6(guessed(119453778));\n+  else\n+    goto __BB8(guessed(14763950));\n+\n+  __BB(8,guessed_local(105119324)):\n+  goto __BB4(precise(134217728));\n+\n+  __BB(6,guessed_local(850510900)):\n+  goto __BB3(precise(134217728));\n+\n+  __BB(7,guessed_local(12992276)):\n+  goto __BB4(precise(134217728));\n+\n+  __BB(4,guessed_local(118111601)):\n+  sum_31 = __PHI (__BB7: 0, __BB8: sum_27);\n+  return sum_31;\n+\n+}\n+\n+/* { dg-final { scan-tree-dump \"Decided to SLP 1 instances\" \"vect\" } } */"}, {"sha": "3db08fac4003ab49ebc82aad0c2ccccca01a60e3", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4352288a3df915575a2b820f702242908740106f/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4352288a3df915575a2b820f702242908740106f/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=4352288a3df915575a2b820f702242908740106f", "patch": "@@ -433,20 +433,35 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \t     the def-stmt/s of the first stmt.  Allow different definition\n \t     types for reduction chains: the first stmt must be a\n \t     vect_reduction_def (a phi node), and the rest\n-\t     vect_internal_def.  */\n+\t     end in the reduction chain.  */\n \t  tree type = TREE_TYPE (oprnd);\n \t  if ((oprnd_info->first_dt != dt\n \t       && !(oprnd_info->first_dt == vect_reduction_def\n-\t\t    && dt == vect_internal_def)\n+\t\t    && !STMT_VINFO_DATA_REF (stmt_info)\n+\t\t    && REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n+\t\t    && def_stmt_info\n+\t\t    && !STMT_VINFO_DATA_REF (def_stmt_info)\n+\t\t    && (REDUC_GROUP_FIRST_ELEMENT (def_stmt_info)\n+\t\t\t== REDUC_GROUP_FIRST_ELEMENT (stmt_info)))\n \t       && !((oprnd_info->first_dt == vect_external_def\n \t\t     || oprnd_info->first_dt == vect_constant_def)\n \t\t    && (dt == vect_external_def\n \t\t\t|| dt == vect_constant_def)))\n-\t      || !types_compatible_p (oprnd_info->first_op_type, type))\n+\t      || !types_compatible_p (oprnd_info->first_op_type, type)\n+\t      || (!STMT_VINFO_DATA_REF (stmt_info)\n+\t\t  && REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n+\t\t  && ((!def_stmt_info\n+\t\t       || STMT_VINFO_DATA_REF (def_stmt_info)\n+\t\t       || (REDUC_GROUP_FIRST_ELEMENT (def_stmt_info)\n+\t\t\t   != REDUC_GROUP_FIRST_ELEMENT (stmt_info)))\n+\t\t      != (oprnd_info->first_dt != vect_reduction_def))))\n \t    {\n \t      /* Try swapping operands if we got a mismatch.  */\n \t      if (i == commutative_op && !swapped)\n \t\t{\n+\t\t  if (dump_enabled_p ())\n+\t\t    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t     \"trying swapped operands\\n\");\n \t\t  swapped = true;\n \t\t  goto again;\n \t\t}\n@@ -484,9 +499,26 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \t  oprnd_info->ops.quick_push (oprnd);\n \t  break;\n \n+\tcase vect_internal_def:\n \tcase vect_reduction_def:\n+\t  if (oprnd_info->first_dt == vect_reduction_def\n+\t      && !STMT_VINFO_DATA_REF (stmt_info)\n+\t      && REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n+\t      && !STMT_VINFO_DATA_REF (def_stmt_info)\n+\t      && (REDUC_GROUP_FIRST_ELEMENT (def_stmt_info)\n+\t\t  == REDUC_GROUP_FIRST_ELEMENT (stmt_info)))\n+\t    {\n+\t      /* For a SLP reduction chain we want to duplicate the\n+\t         reduction to each of the chain members.  That gets\n+\t\t us a sane SLP graph (still the stmts are not 100%\n+\t\t correct wrt the initial values).  */\n+\t      gcc_assert (!first);\n+\t      oprnd_info->def_stmts.quick_push (oprnd_info->def_stmts[0]);\n+\t      oprnd_info->ops.quick_push (oprnd_info->ops[0]);\n+\t      break;\n+\t    }\n+\t  /* Fallthru.  */\n \tcase vect_induction_def:\n-\tcase vect_internal_def:\n \t  oprnd_info->def_stmts.quick_push (def_stmt_info);\n \t  oprnd_info->ops.quick_push (oprnd);\n \t  break;\n@@ -1182,15 +1214,8 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t  /* Else def types have to match.  */\n \t  stmt_vec_info other_info;\n \t  FOR_EACH_VEC_ELT (stmts, i, other_info)\n-\t    {\n-\t      /* But for reduction chains only check on the first stmt.  */\n-\t      if (!STMT_VINFO_DATA_REF (other_info)\n-\t\t  && REDUC_GROUP_FIRST_ELEMENT (other_info)\n-\t\t  && REDUC_GROUP_FIRST_ELEMENT (other_info) != stmt_info)\n-\t\tcontinue;\n-\t      if (STMT_VINFO_DEF_TYPE (other_info) != def_type)\n-\t\treturn NULL;\n-\t    }\n+\t    if (STMT_VINFO_DEF_TYPE (other_info) != def_type)\n+\t      return NULL;\n \t}\n       else\n \treturn NULL;"}]}