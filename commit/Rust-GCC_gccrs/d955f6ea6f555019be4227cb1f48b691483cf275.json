{"sha": "d955f6ea6f555019be4227cb1f48b691483cf275", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk1NWY2ZWE2ZjU1NTAxOWJlNDIyN2NiMWY0OGI2OTE0ODNjZjI3NQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2002-07-17T14:17:21Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2002-07-17T14:17:21Z"}, "message": "PR c++/2862, c++/2863\n\n\tPR c++/2862, c++/2863\n\t* pt.c (determine_specialization): Compare the length of\n\tTYPE_ARG_TYPES.  Tidy.\n\n\t* g++.dg/template/instantiate2.C: New test.\n\t* g++.dg/template/spec4.C: New test.\n\nFrom-SVN: r55527", "tree": {"sha": "7233f26cf7a716b8c04adeaf35c062057062b6a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7233f26cf7a716b8c04adeaf35c062057062b6a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d955f6ea6f555019be4227cb1f48b691483cf275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d955f6ea6f555019be4227cb1f48b691483cf275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d955f6ea6f555019be4227cb1f48b691483cf275", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d955f6ea6f555019be4227cb1f48b691483cf275/comments", "author": null, "committer": null, "parents": [{"sha": "d03d18e8deab04e1b9c79d84fe91432abdf7ddf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03d18e8deab04e1b9c79d84fe91432abdf7ddf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d03d18e8deab04e1b9c79d84fe91432abdf7ddf3"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "de620fe5010c2825b9d7baa056274e882f2efec4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d955f6ea6f555019be4227cb1f48b691483cf275/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d955f6ea6f555019be4227cb1f48b691483cf275/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d955f6ea6f555019be4227cb1f48b691483cf275", "patch": "@@ -1,3 +1,9 @@\n+2002-07-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/2862, c++/2863\n+\t* pt.c (determine_specialization): Compare the length of\n+\tTYPE_ARG_TYPES.  Tidy.\n+\n 2002-07-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/3797"}, {"sha": "8caf0a04a4f861dfba222930a685a2125a4bdd90", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d955f6ea6f555019be4227cb1f48b691483cf275/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d955f6ea6f555019be4227cb1f48b691483cf275/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d955f6ea6f555019be4227cb1f48b691483cf275", "patch": "@@ -998,28 +998,58 @@ determine_specialization (template_id, decl, targs_out,\n \n   for (; fns; fns = OVL_NEXT (fns))\n     {\n-      tree tmpl;\n-\n       tree fn = OVL_CURRENT (fns);\n \n       if (TREE_CODE (fn) == TEMPLATE_DECL)\n-\t/* DECL might be a specialization of FN.  */\n-\ttmpl = fn;\n+\t{\n+\t  tree decl_arg_types;\n+\n+\t  /* DECL might be a specialization of FN.  */\n+\n+\t  /* Adjust the type of DECL in case FN is a static member.  */\n+\t  decl_arg_types = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+\t  if (DECL_STATIC_FUNCTION_P (fn) \n+\t      && DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n+\t    decl_arg_types = TREE_CHAIN (decl_arg_types);\n+\n+\t  /* Check that the number of function parameters matches.\n+\t     For example,\n+\t       template <class T> void f(int i = 0);\n+\t       template <> void f<int>();\n+\t     The specialization f<int> is illegal but is not caught\n+\t     by get_bindings below.  */\n+\n+\t  if (list_length (TYPE_ARG_TYPES (TREE_TYPE (fn)))\n+\t      != list_length (decl_arg_types))\n+\t    continue;\n+\n+\t  /* See whether this function might be a specialization of this\n+\t     template.  */\n+\t  targs = get_bindings (fn, decl, explicit_targs);\n+\n+\t  if (!targs)\n+\t    /* We cannot deduce template arguments that when used to\n+\t       specialize TMPL will produce DECL.  */\n+\t    continue;\n+\n+\t  /* Save this template, and the arguments deduced.  */\n+\t  templates = tree_cons (targs, fn, templates);\n+\t}\n       else if (need_member_template)\n \t/* FN is an ordinary member function, and we need a\n \t   specialization of a member template.  */\n-\tcontinue;\n+\t;\n       else if (TREE_CODE (fn) != FUNCTION_DECL)\n \t/* We can get IDENTIFIER_NODEs here in certain erroneous\n \t   cases.  */\n-\tcontinue;\n+\t;\n       else if (!DECL_FUNCTION_MEMBER_P (fn))\n \t/* This is just an ordinary non-member function.  Nothing can\n \t   be a specialization of that.  */\n-\tcontinue;\n+\t;\n       else if (DECL_ARTIFICIAL (fn))\n \t/* Cannot specialize functions that are created implicitly.  */\n-\tcontinue;\n+\t;\n       else\n \t{\n \t  tree decl_arg_types;\n@@ -1055,21 +1085,7 @@ determine_specialization (template_id, decl, targs_out,\n \t\t\t decl_arg_types))\n \t    /* They match!  */\n \t    candidates = tree_cons (NULL_TREE, fn, candidates);\n-\n-\t  continue;\n \t}\n-\n-      /* See whether this function might be a specialization of this\n-\t template.  */\n-      targs = get_bindings (tmpl, decl, explicit_targs);\n-\n-      if (!targs)\n-\t/* We cannot deduce template arguments that when used to\n-\t   specialize TMPL will produce DECL.  */\n-\tcontinue;\n-\n-      /* Save this template, and the arguments deduced.  */\n-      templates = tree_cons (targs, tmpl, templates);\n     }\n \n   if (templates && TREE_CHAIN (templates))"}, {"sha": "1cef63b62d79fffb313447fc5722ba153bfbf6c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d955f6ea6f555019be4227cb1f48b691483cf275/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d955f6ea6f555019be4227cb1f48b691483cf275/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d955f6ea6f555019be4227cb1f48b691483cf275", "patch": "@@ -1,3 +1,8 @@\n+2002-07-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* g++.dg/template/instantiate2.C: New test.\n+\t* g++.dg/template/spec4.C: New test.\n+\n 2002-07-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* g++.dg/template/access2.C: New test."}, {"sha": "a76eaa4701c390de9a983bb4b32de74a07813975", "filename": "gcc/testsuite/g++.dg/template/instantiate2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d955f6ea6f555019be4227cb1f48b691483cf275/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d955f6ea6f555019be4227cb1f48b691483cf275/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate2.C?ref=d955f6ea6f555019be4227cb1f48b691483cf275", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+// Origin: Wolfgang Bangerth <wolfgang.bangerth@iwr.uni-heidelberg.de>\n+\n+// PR c++/2862\n+// Default function argument and template instantiation.\n+\n+template <int dim> void f (int=0) {};\n+template void f<1> ();\t\t// { dg-error \"not match\" }"}, {"sha": "97ee4fc2d5dd513402c77c748a1c4e5ad7fde80e", "filename": "gcc/testsuite/g++.dg/template/spec4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d955f6ea6f555019be4227cb1f48b691483cf275/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d955f6ea6f555019be4227cb1f48b691483cf275/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec4.C?ref=d955f6ea6f555019be4227cb1f48b691483cf275", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+// Origin: Wolfgang Bangerth <wolfgang.bangerth@iwr.uni-heidelberg.de>\n+\n+// PR c++/2863\n+// Default function argument and template specialization.\n+\n+struct X {\n+  template <int dim> void f(int=0);\n+};\n+\n+template <> void X::f<1> () {}\t// { dg-error \"(not match|syntax error)\" }"}]}