{"sha": "5681668765e233735b4c5e6a305e73ae1f80a328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY4MTY2ODc2NWUyMzM3MzViNGM1ZTZhMzA1ZTczYWUxZjgwYTMyOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-29T18:02:59Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-29T18:02:59Z"}, "message": "c++: Tolerate empty initial args during normalization [PR97412]\n\nWhen normalizing the constraint-expression of a nested-requirement, we\npass NULL_TREE as the initial template arguments for normalization, but\ntsubst_argument_pack is not prepared to handle a NULL_TREE args vector.\nThis causes us to ICE when normalizing a variadic concept as part of a\nnested-requirement.\n\nThis patch fixes the ICE by guarding the call to tsubst_template_args in\nnormalize_concept_check appropriately.  This will also enable us to\nsimplify many of the normalization routines to just pass NULL_TREE\n(instead of a set of generic template arguments) as the initial template\narguments.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97412\n\t* constraint.cc (normalize_concept_check): Don't call\n\ttsubst_template_args when 'args' is NULL.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97412\n\t* g++.dg/cpp2a/concepts-variadic2.C: New test.", "tree": {"sha": "42d42a5806738beffa48429082f97ee3ab89fb72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42d42a5806738beffa48429082f97ee3ab89fb72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5681668765e233735b4c5e6a305e73ae1f80a328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5681668765e233735b4c5e6a305e73ae1f80a328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5681668765e233735b4c5e6a305e73ae1f80a328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5681668765e233735b4c5e6a305e73ae1f80a328/comments", "author": null, "committer": null, "parents": [{"sha": "57ec9b687b0c1d83e477b7b7433c11d814489259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ec9b687b0c1d83e477b7b7433c11d814489259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ec9b687b0c1d83e477b7b7433c11d814489259"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "75457a2dd603583550be47a24173c7228fdecd96", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5681668765e233735b4c5e6a305e73ae1f80a328/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5681668765e233735b4c5e6a305e73ae1f80a328/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=5681668765e233735b4c5e6a305e73ae1f80a328", "patch": "@@ -686,7 +686,8 @@ normalize_concept_check (tree check, tree args, norm_info info)\n     }\n \n   /* Substitute through the arguments of the concept check. */\n-  targs = tsubst_template_args (targs, args, info.complain, info.in_decl);\n+  if (args)\n+    targs = tsubst_template_args (targs, args, info.complain, info.in_decl);\n   if (targs == error_mark_node)\n     return error_mark_node;\n "}, {"sha": "ce61aef54817108b8a35669faec83efb1d012d66", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-variadic2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5681668765e233735b4c5e6a305e73ae1f80a328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-variadic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5681668765e233735b4c5e6a305e73ae1f80a328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-variadic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-variadic2.C?ref=5681668765e233735b4c5e6a305e73ae1f80a328", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/97412\n+// { dg-do compile { target c++20 } }\n+\n+template <class T, class... TArgs>\n+concept call_bar_with = requires(T t, TArgs... args) {\n+  t.bar(args...);\n+};\n+\n+template <class T, class... TArgs>\n+concept foo = requires {\n+  requires call_bar_with<T, TArgs...>;\n+};"}]}