{"sha": "4a96e5c3cd07bf5b4860fdb55510682f9d708e71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE5NmU1YzNjZDA3YmY1YjQ4NjBmZGI1NTUxMDY4MmY5ZDcwOGU3MQ==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@apple.com", "date": "2005-06-10T15:01:59Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2005-06-10T15:01:59Z"}, "message": "Use scc_operand predicate for eq:SI in powerpc.\n\nOked by David Edelsohn.\n\nFrom-SVN: r100818", "tree": {"sha": "e40684a215a637b820559186d0071f3dfe3e5a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e40684a215a637b820559186d0071f3dfe3e5a20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a96e5c3cd07bf5b4860fdb55510682f9d708e71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a96e5c3cd07bf5b4860fdb55510682f9d708e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a96e5c3cd07bf5b4860fdb55510682f9d708e71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a96e5c3cd07bf5b4860fdb55510682f9d708e71/comments", "author": null, "committer": null, "parents": [{"sha": "bb7483290049647685d17557117e4285530266f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7483290049647685d17557117e4285530266f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb7483290049647685d17557117e4285530266f3"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "78bd82a8ef3004e532807d0990c4e7b157d09ee8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a96e5c3cd07bf5b4860fdb55510682f9d708e71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a96e5c3cd07bf5b4860fdb55510682f9d708e71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a96e5c3cd07bf5b4860fdb55510682f9d708e71", "patch": "@@ -1,3 +1,7 @@\n+2005-06-10  Fariborz Jahanian <fjahanian@apple.com>\n+\t* rs6000/predicates.md (scc_operand): New.\n+\t* rs6000/rs6000.md : Use scc_operand for eq:SI compares.\n+\n 2005-06-10  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* tree-vect-analyze.c (vect_analyze_data_ref_dependence): DRs whose"}, {"sha": "936f9329b5a2fb8f8e4f57196d7fdae078ca7074", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a96e5c3cd07bf5b4860fdb55510682f9d708e71/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a96e5c3cd07bf5b4860fdb55510682f9d708e71/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=4a96e5c3cd07bf5b4860fdb55510682f9d708e71", "patch": "@@ -132,6 +132,17 @@\n   (ior (match_code \"const_int\")\n        (match_operand 0 \"gpc_reg_operand\")))\n \n+;; Return 1 if op is an integer meeting one of 'I','J','O','L'(TARGET_32BIT)\n+;; or 'J'(TARGET_64BIT) constraints or if it is a non-special register.\n+(define_predicate \"scc_operand\"\n+  (if_then_else (match_code \"const_int\")\n+    (match_test \"CONST_OK_FOR_LETTER_P (INTVAL (op), 'I')\n+\t\t || CONST_OK_FOR_LETTER_P (INTVAL (op), 'K')\n+\t\t || CONST_OK_FOR_LETTER_P (INTVAL (op), 'O')\n+\t\t || CONST_OK_FOR_LETTER_P (INTVAL (op), \n+\t\t\t\t\t   (TARGET_32BIT ? 'L' : 'J'))\")\n+    (match_operand 0 \"gpc_reg_operand\")))\n+\n ;; Return 1 if op is a 32-bit signed constant integer valid for arithmetic\n ;; or non-special register.\n (define_predicate \"reg_or_arith_cint_operand\""}, {"sha": "ead5f03a3c41be6cbad268142103e8eab992d686", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a96e5c3cd07bf5b4860fdb55510682f9d708e71/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a96e5c3cd07bf5b4860fdb55510682f9d708e71/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=4a96e5c3cd07bf5b4860fdb55510682f9d708e71", "patch": "@@ -11560,7 +11560,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r,&r,&r\")\n \t(plus:SI (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\"))\n+\t\t\t(match_operand:SI 2 \"scc_operand\" \"r,O,K,L,I\"))\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r,r\")))]\n   \"TARGET_32BIT\"\n   \"@\n@@ -11577,7 +11577,7 @@\n \t(compare:CC\n \t (plus:SI\n \t  (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r,r,r\")\n-\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I,r,O,K,L,I\"))\n+\t\t (match_operand:SI 2 \"scc_operand\" \"r,O,K,L,I,r,O,K,L,I\"))\n \t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r,r,r,r,r,r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r,&r,&r,&r,&r,&r,&r\"))]\n@@ -11601,7 +11601,7 @@\n \t(compare:CC\n \t (plus:SI\n \t  (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n+\t\t (match_operand:SI 2 \"scc_operand\" \"\"))\n \t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"\"))]\n@@ -11620,7 +11620,7 @@\n \t(compare:CC\n \t (plus:SI\n \t  (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r,r,r\")\n-\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I,r,O,K,L,I\"))\n+\t\t (match_operand:SI 2 \"scc_operand\" \"r,O,K,L,I,r,O,K,L,I\"))\n \t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r,r,r,r,r,r,r\"))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r,&r,&r,&r,&r,&r,&r,&r\")\n@@ -11645,7 +11645,7 @@\n \t(compare:CC\n \t (plus:SI\n \t  (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n+\t\t (match_operand:SI 2 \"scc_operand\" \"\"))\n \t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n@@ -11661,7 +11661,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n \t(neg:SI (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\"))))]\n+\t\t       (match_operand:SI 2 \"scc_operand\" \"r,O,K,L,I\"))))]\n   \"TARGET_32BIT\"\n   \"@\n    xor %0,%1,%2\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0"}, {"sha": "d9c1b77f22b360a5e6f92b9497ce396d4ed2280e", "filename": "gcc/testsuite/gcc.dg/const-compare.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a96e5c3cd07bf5b4860fdb55510682f9d708e71/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a96e5c3cd07bf5b4860fdb55510682f9d708e71/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-compare.c?ref=4a96e5c3cd07bf5b4860fdb55510682f9d708e71", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-m64 -O1 -static\" } */\n+typedef unsigned long long uint64_t;\n+\n+static int\n+match(name, pat)\n+ uint64_t *name, *pat;\n+{\n+ int ok=0, negate_range;\n+ uint64_t c, k;\n+\n+  c = *pat++;\n+  switch (c & 0xffffffffffULL) {\n+  case ((uint64_t)(('[')|0x8000000000ULL)):\n+   if ((negate_range = ((*pat & 0xffffffffffULL) == ((uint64_t)(('!')|0x8000000000ULL)) )) != '\\0')\n+    ++pat;\n+   while (((c = *pat++) & 0xffffffffffULL) )\n+    if ((*pat & 0xffffffffffULL) == ((uint64_t)(('-')|0x8000000000ULL))) \n+      {\n+       pat += 2;\n+      } \n+\n+   if (ok == negate_range)\n+    return(0);\n+   break;\n+  }\n+ return(*name == '\\0');\n+}\n+"}]}