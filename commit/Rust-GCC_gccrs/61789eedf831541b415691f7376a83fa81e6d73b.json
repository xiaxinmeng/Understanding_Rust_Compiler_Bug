{"sha": "61789eedf831541b415691f7376a83fa81e6d73b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE3ODllZWRmODMxNTQxYjQxNTY5MWY3Mzc2YTgzZmE4MWU2ZDczYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-02-12T17:39:27Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-02-12T17:39:27Z"}, "message": "PR driver/69265 and 69453: improved suggestions for various misspelled options\n\ngcc/ChangeLog:\n\tPR driver/69265\n\tPR driver/69453\n\t* gcc.c (driver::driver): Initialize m_option_suggestions.\n\t(driver::~driver): Clean up m_option_suggestions.\n\t(suggest_option): Convert to...\n\t(driver::suggest_option): ...this, and split out into\n\tdriver::build_option_suggestions and find_closest_string.\n\t(driver::build_option_suggestions): New function, from\n\tfirst half of suggest_option.  Special-case\n\tOPT_fsanitize_ and OPT_fsanitize_recover_, making use of\n\tthe sanitizer_opts array.  For options of enum types, add the\n\tvarious enum values to the candidate strings.\n\t(driver::handle_unrecognized_options): Remove \"const\".\n\t* gcc.h (driver::handle_unrecognized_options): Likewise.\n\t(driver::build_option_suggestions): New decl.\n\t(driver::suggest_option): New decl.\n\t(driver::m_option_suggestions): New field.\n\t* opts-common.c (add_misspelling_candidates): New function.\n\t* opts.c (sanitizer_opts): Remove decl of struct sanitizer_opts_s\n\tand make non-static.\n\t* opts.h (sanitizer_opts): New array decl.\n\t(add_misspelling_candidates): New function decl.\n\t* spellcheck.c (find_closest_string): New function.\n\t* spellcheck.h (find_closest_string): New function decl.\n\ngcc/testsuite/ChangeLog:\n\tPR driver/69265\n\tPR driver/69453\n\t* gcc.dg/spellcheck-options-3.c: New test case.\n\t* gcc.dg/spellcheck-options-4.c: New test case.\n\t* gcc.dg/spellcheck-options-5.c: New test case.\n\t* gcc.dg/spellcheck-options-6.c: New test case.\n\t* gcc.dg/spellcheck-options-7.c: New test case.\n\t* gcc.dg/spellcheck-options-8.c: New test case.\n\t* gcc.dg/spellcheck-options-9.c: New test case.\n\t* gcc.dg/spellcheck-options-10.c: New test case.\n\nFrom-SVN: r233382", "tree": {"sha": "570dfb8c0732f310844f592f252d735a0da81372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/570dfb8c0732f310844f592f252d735a0da81372"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61789eedf831541b415691f7376a83fa81e6d73b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61789eedf831541b415691f7376a83fa81e6d73b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61789eedf831541b415691f7376a83fa81e6d73b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61789eedf831541b415691f7376a83fa81e6d73b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e"}], "stats": {"total": 314, "additions": 279, "deletions": 35}, "files": [{"sha": "729034caff4be1844260c934fec106a10493769c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -1,3 +1,30 @@\n+2016-02-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR driver/69265\n+\tPR driver/69453\n+\t* gcc.c (driver::driver): Initialize m_option_suggestions.\n+\t(driver::~driver): Clean up m_option_suggestions.\n+\t(suggest_option): Convert to...\n+\t(driver::suggest_option): ...this, and split out into\n+\tdriver::build_option_suggestions and find_closest_string.\n+\t(driver::build_option_suggestions): New function, from\n+\tfirst half of suggest_option.  Special-case\n+\tOPT_fsanitize_ and OPT_fsanitize_recover_, making use of\n+\tthe sanitizer_opts array.  For options of enum types, add the\n+\tvarious enum values to the candidate strings.\n+\t(driver::handle_unrecognized_options): Remove \"const\".\n+\t* gcc.h (driver::handle_unrecognized_options): Likewise.\n+\t(driver::build_option_suggestions): New decl.\n+\t(driver::suggest_option): New decl.\n+\t(driver::m_option_suggestions): New field.\n+\t* opts-common.c (add_misspelling_candidates): New function.\n+\t* opts.c (sanitizer_opts): Remove decl of struct sanitizer_opts_s\n+\tand make non-static.\n+\t* opts.h (sanitizer_opts): New array decl.\n+\t(add_misspelling_candidates): New function decl.\n+\t* spellcheck.c (find_closest_string): New function.\n+\t* spellcheck.h (find_closest_string): New function decl.\n+\n 2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/69764"}, {"sha": "99fa5e386a5a9b851055622f030611ce68ca410e", "filename": "gcc/gcc.c", "status": "modified", "additions": 84, "deletions": 28, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -7135,7 +7135,8 @@ compare_files (char *cmpfile[])\n \n driver::driver (bool can_finalize, bool debug) :\n   explicit_link_files (NULL),\n-  decoded_options (NULL)\n+  decoded_options (NULL),\n+  m_option_suggestions (NULL)\n {\n   env.init (can_finalize, debug);\n }\n@@ -7144,6 +7145,14 @@ driver::~driver ()\n {\n   XDELETEVEC (explicit_link_files);\n   XDELETEVEC (decoded_options);\n+  if (m_option_suggestions)\n+    {\n+      int i;\n+      char *str;\n+      FOR_EACH_VEC_ELT (*m_option_suggestions, i, str)\n+\tfree (str);\n+      delete m_option_suggestions;\n+    }\n }\n \n /* driver::main is implemented as a series of driver:: method calls.  */\n@@ -7632,49 +7641,96 @@ driver::maybe_putenv_OFFLOAD_TARGETS () const\n   offload_targets = NULL;\n }\n \n-/* Helper function for driver::handle_unrecognized_options.\n+/* Helper function for driver::suggest_option.  Populate\n+   m_option_suggestions with candidate strings for misspelled options.\n+   The strings will be freed by the driver's dtor.  */\n \n-   Given an unrecognized option BAD_OPT (without the leading dash),\n-   locate the closest reasonable matching option (again, without the\n-   leading dash), or NULL.  */\n-\n-static const char *\n-suggest_option (const char *bad_opt)\n+void\n+driver::build_option_suggestions (void)\n {\n-  const cl_option *best_option = NULL;\n-  edit_distance_t best_distance = MAX_EDIT_DISTANCE;\n+  gcc_assert (m_option_suggestions == NULL);\n+  m_option_suggestions = new auto_vec <char *> ();\n+\n+  /* We build a vec of m_option_suggestions, using add_misspelling_candidates\n+     to add copies of strings, without a leading dash.  */\n \n   for (unsigned int i = 0; i < cl_options_count; i++)\n     {\n-      edit_distance_t dist = levenshtein_distance (bad_opt,\n-\t\t\t\t\t\t   cl_options[i].opt_text + 1);\n-      if (dist < best_distance)\n+      const struct cl_option *option = &cl_options[i];\n+      const char *opt_text = option->opt_text;\n+      switch (i)\n \t{\n-\t  best_distance = dist;\n-\t  best_option = &cl_options[i];\n+\tdefault:\n+\t  if (option->var_type == CLVC_ENUM)\n+\t    {\n+\t      const struct cl_enum *e = &cl_enums[option->var_enum];\n+\t      for (unsigned j = 0; e->values[j].arg != NULL; j++)\n+\t\t{\n+\t\t  char *with_arg = concat (opt_text, e->values[j].arg, NULL);\n+\t\t  add_misspelling_candidates (m_option_suggestions, with_arg);\n+\t\t  free (with_arg);\n+\t\t}\n+\t    }\n+\t  else\n+\t    add_misspelling_candidates (m_option_suggestions, opt_text);\n+\t  break;\n+\n+\tcase OPT_fsanitize_:\n+\tcase OPT_fsanitize_recover_:\n+\t  /* -fsanitize= and -fsanitize-recover= can take\n+\t     a comma-separated list of arguments.  Given that combinations\n+\t     are supported, we can't add all potential candidates to the\n+\t     vec, but if we at least add them individually without commas,\n+\t     we should do a better job e.g. correcting\n+\t       \"-sanitize=address\"\n+\t     to\n+\t       \"-fsanitize=address\"\n+\t     rather than to \"-Wframe-address\" (PR driver/69265).  */\n+\t  {\n+\t    for (int j = 0; sanitizer_opts[j].name != NULL; ++j)\n+\t      {\n+\t\t/* Get one arg at a time e.g. \"-fsanitize=address\".  */\n+\t\tchar *with_arg = concat (opt_text,\n+\t\t\t\t\t sanitizer_opts[j].name,\n+\t\t\t\t\t NULL);\n+\t\t/* Add with_arg and all of its variant spellings e.g.\n+\t\t   \"-fno-sanitize=address\" to candidates (albeit without\n+\t\t   leading dashes).  */\n+\t\tadd_misspelling_candidates (m_option_suggestions, with_arg);\n+\t\tfree (with_arg);\n+\t      }\n+\t  }\n+\t  break;\n \t}\n     }\n+}\n \n-  if (!best_option)\n-    return NULL;\n+/* Helper function for driver::handle_unrecognized_options.\n \n-  /* If more than half of the letters were misspelled, the suggestion is\n-     likely to be meaningless.  */\n-  if (best_option)\n-    {\n-      unsigned int cutoff = MAX (strlen (bad_opt),\n-\t\t\t\t strlen (best_option->opt_text + 1)) / 2;\n-      if (best_distance > cutoff)\n-\treturn NULL;\n-    }\n+   Given an unrecognized option BAD_OPT (without the leading dash),\n+   locate the closest reasonable matching option (again, without the\n+   leading dash), or NULL.\n+\n+   The returned string is owned by the driver instance.  */\n+\n+const char *\n+driver::suggest_option (const char *bad_opt)\n+{\n+  /* Lazily populate m_option_suggestions.  */\n+  if (!m_option_suggestions)\n+    build_option_suggestions ();\n+  gcc_assert (m_option_suggestions);\n \n-  return best_option->opt_text + 1;\n+  /* \"m_option_suggestions\" is now populated.  Use it.  */\n+  return find_closest_string\n+    (bad_opt,\n+     (auto_vec <const char *> *) m_option_suggestions);\n }\n \n /* Reject switches that no pass was interested in.  */\n \n void\n-driver::handle_unrecognized_options () const\n+driver::handle_unrecognized_options ()\n {\n   for (size_t i = 0; (int) i < n_switches; i++)\n     if (! switches[i].validated)"}, {"sha": "cb7081fc2df9d84b9adec3c00e49f931e5780679", "filename": "gcc/gcc.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -45,7 +45,9 @@ class driver\n   void putenv_COLLECT_GCC (const char *argv0) const;\n   void maybe_putenv_COLLECT_LTO_WRAPPER () const;\n   void maybe_putenv_OFFLOAD_TARGETS () const;\n-  void handle_unrecognized_options () const;\n+  void build_option_suggestions (void);\n+  const char *suggest_option (const char *bad_opt);\n+  void handle_unrecognized_options ();\n   int maybe_print_and_exit () const;\n   bool prepare_infiles ();\n   void do_spec_on_infiles () const;\n@@ -57,6 +59,7 @@ class driver\n   char *explicit_link_files;\n   struct cl_decoded_option *decoded_options;\n   unsigned int decoded_options_count;\n+  auto_vec <char *> *m_option_suggestions;\n };\n \n /* The mapping of a spec function name to the C function that"}, {"sha": "bb689827227bffc1c675e21ac784096ba7d1af4d", "filename": "gcc/opts-common.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -365,6 +365,47 @@ static const struct option_map option_map[] =\n     { \"--no-\", NULL, \"-f\", false, true }\n   };\n \n+/* Helper function for gcc.c's driver::suggest_option, for populating the\n+   vec of suggestions for misspelled options.\n+\n+   option_map above provides various prefixes for spelling command-line\n+   options, which decode_cmdline_option uses to map spellings of options\n+   to specific options.  We want to do the reverse: to find all the ways\n+   that a user could validly spell an option.\n+\n+   Given valid OPT_TEXT (with a leading dash), add it and all of its valid\n+   variant spellings to CANDIDATES, each without a leading dash.\n+\n+   For example, given \"-Wabi-tag\", the following are added to CANDIDATES:\n+     \"Wabi-tag\"\n+     \"Wno-abi-tag\"\n+     \"-warn-abi-tag\"\n+     \"-warn-no-abi-tag\".\n+\n+   The added strings must be freed using free.  */\n+\n+void\n+add_misspelling_candidates (auto_vec<char *> *candidates,\n+\t\t\t    const char *opt_text)\n+{\n+  gcc_assert (candidates);\n+  gcc_assert (opt_text);\n+  candidates->safe_push (xstrdup (opt_text + 1));\n+  for (unsigned i = 0; i < ARRAY_SIZE (option_map); i++)\n+    {\n+      const char *opt0 = option_map[i].opt0;\n+      const char *new_prefix = option_map[i].new_prefix;\n+      size_t new_prefix_len = strlen (new_prefix);\n+\n+      if (strncmp (opt_text, new_prefix, new_prefix_len) == 0)\n+\t{\n+\t  char *alternative = concat (opt0 + 1, opt_text + new_prefix_len,\n+\t\t\t\t      NULL);\n+\t  candidates->safe_push (alternative);\n+\t}\n+    }\n+}\n+\n /* Decode the switch beginning at ARGV for the language indicated by\n    LANG_MASK (including CL_COMMON and CL_TARGET if applicable), into\n    the structure *DECODED.  Returns the number of switches"}, {"sha": "2f453122b0982e661255971c7e972d3f54af58af", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -1434,12 +1434,7 @@ enable_fdo_optimizations (struct gcc_options *opts,\n }\n \n /* -f{,no-}sanitize{,-recover}= suboptions.  */\n-static const struct sanitizer_opts_s\n-{\n-  const char *const name;\n-  unsigned int flag;\n-  size_t len;\n-} sanitizer_opts[] =\n+const struct sanitizer_opts_s sanitizer_opts[] =\n {\n #define SANITIZER_OPT(name, flags) { #name, flags, sizeof #name - 1 }\n   SANITIZER_OPT (address, SANITIZE_ADDRESS | SANITIZE_USER_ADDRESS),"}, {"sha": "fa479d83da52b57687c8adbce7ae5b4584e126ac", "filename": "gcc/opts.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -404,4 +404,15 @@ extern void set_struct_debug_option (struct gcc_options *opts,\n \t\t\t\t     const char *value);\n extern bool opt_enum_arg_to_value (size_t opt_index, const char *arg,\n \t\t\t\t   int *value, unsigned int lang_mask);\n+\n+extern const struct sanitizer_opts_s\n+{\n+  const char *const name;\n+  unsigned int flag;\n+  size_t len;\n+} sanitizer_opts[];\n+\n+extern void add_misspelling_candidates (auto_vec<char *> *candidates,\n+\t\t\t\t\tconst char *base_option);\n+\n #endif"}, {"sha": "e4e83a5ae16eaae870b670e808bb3b3ef6dcbd69", "filename": "gcc/spellcheck.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fspellcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fspellcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -119,3 +119,49 @@ levenshtein_distance (const char *s, const char *t)\n {\n   return levenshtein_distance (s, strlen (s), t, strlen (t));\n }\n+\n+/* Given TARGET, a non-NULL string, and CANDIDATES, a non-NULL ptr to\n+   an autovec of non-NULL strings, determine which element within\n+   CANDIDATES has the lowest edit distance to TARGET.  If there are\n+   multiple elements with the same minimal distance, the first in the\n+   vector wins.\n+\n+   If more than half of the letters were misspelled, the suggestion is\n+   likely to be meaningless, so return NULL for this case.  */\n+\n+const char *\n+find_closest_string (const char *target,\n+\t\t     const auto_vec<const char *> *candidates)\n+{\n+  gcc_assert (target);\n+  gcc_assert (candidates);\n+\n+  int i;\n+  const char *candidate;\n+  const char *best_candidate = NULL;\n+  edit_distance_t best_distance = MAX_EDIT_DISTANCE;\n+  size_t len_target = strlen (target);\n+  FOR_EACH_VEC_ELT (*candidates, i, candidate)\n+    {\n+      gcc_assert (candidate);\n+      edit_distance_t dist\n+\t= levenshtein_distance (target, len_target,\n+\t\t\t\tcandidate, strlen (candidate));\n+      if (dist < best_distance)\n+\t{\n+\t  best_distance = dist;\n+\t  best_candidate = candidate;\n+\t}\n+    }\n+\n+  /* If more than half of the letters were misspelled, the suggestion is\n+     likely to be meaningless.  */\n+  if (best_candidate)\n+    {\n+      unsigned int cutoff = MAX (len_target, strlen (best_candidate)) / 2;\n+      if (best_distance > cutoff)\n+\treturn NULL;\n+    }\n+\n+  return best_candidate;\n+}"}, {"sha": "040c33ef571f37087f6559e127559ab4d3574428", "filename": "gcc/spellcheck.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fspellcheck.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Fspellcheck.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.h?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -31,6 +31,10 @@ levenshtein_distance (const char *s, int len_s,\n extern edit_distance_t\n levenshtein_distance (const char *s, const char *t);\n \n+extern const char *\n+find_closest_string (const char *target,\n+\t\t     const auto_vec<const char *> *candidates);\n+\n /* spellcheck-tree.c  */\n \n extern edit_distance_t"}, {"sha": "ffe2f2a268789a85206f1149366f584beca32c71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -1,3 +1,16 @@\n+2016-02-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR driver/69265\n+\tPR driver/69453\n+\t* gcc.dg/spellcheck-options-3.c: New test case.\n+\t* gcc.dg/spellcheck-options-4.c: New test case.\n+\t* gcc.dg/spellcheck-options-5.c: New test case.\n+\t* gcc.dg/spellcheck-options-6.c: New test case.\n+\t* gcc.dg/spellcheck-options-7.c: New test case.\n+\t* gcc.dg/spellcheck-options-8.c: New test case.\n+\t* gcc.dg/spellcheck-options-9.c: New test case.\n+\t* gcc.dg/spellcheck-options-10.c: New test case.\n+\n 2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/69764"}, {"sha": "1957205593b4e9fd45294b6ce7cbecc11e83d4b5", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-10.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-10.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -0,0 +1,6 @@\n+/* Verify that we include -Wno- variants when considering hints\n+   for misspelled options (PR driver/69453).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-if-convert\" } */\n+/* { dg-error \"unrecognized command line option .-fno-if-convert.; did you mean .-fno-if-conversion.?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "4133df9555e158890e913cba2c5f4e28a96f82db", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-3.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -0,0 +1,6 @@\n+/* Verify that we provide simple suggestions for the arguments of\n+   \"-fsanitize=\" when it is misspelled (PR driver/69265).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-sanitize=address\" } */\n+/* { dg-error \"unrecognized command line option '-sanitize=address'; did you mean '-fsanitize=address'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "252376fd7575328326770a4adba5b6f7964d1d20", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-4.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -0,0 +1,6 @@\n+/* Verify that we provide simple suggestions for the arguments of\n+   \"-fsanitize-recover=\" when it is misspelled (PR driver/69265).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-sanitize-recover=integer-divide-by-0\" } */\n+/* { dg-error \"unrecognized command line option '-sanitize-recover=integer-divide-by-0'; did you mean '-fsanitize-recover=integer-divide-by-zero'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "9a02bb7afbb2b488dfa175f68d4be4a3fe94307e", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-5.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-5.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -0,0 +1,6 @@\n+/* Verify that we provide suggestions (with arguments) for the \"-fno-\"\n+   variant of \"-fsanitize=\" when it is misspelled (PR driver/69265).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-no-sanitize=all\" } */\n+/* { dg-error \"unrecognized command line option '-no-sanitize=all'; did you mean '-fno-sanitize=all'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "4d6bf0d945da79975f2881bd31622137feca98cf", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-6.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-6.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -0,0 +1,6 @@\n+/* Verify that we can generate a suggestion of \"--warn-no-abi-tag\"\n+   from c.opt's \"Wabi-tag\" (PR driver/69265).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-fwarn-no-abi-tag\" } */\n+/* { dg-error \"unrecognized command line option '-fwarn-no-abi-tag'; did you mean '--warn-no-abi-tag'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "ca8939949837bef099dd127f4eb7a7195b60431c", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-7.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-7.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -0,0 +1,6 @@\n+/* Verify that we provide a hint if the user misspells an option that\n+   takes an argument (PR driver/69265).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-tls-model=global-dynamic\" } */\n+/* { dg-error \"unrecognized command line option '-tls-model=global-dynamic'; did you mean '-ftls-model=global-dynamic'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "2cc6c1ff1fe12a73d1eec31b60a22427315cbfbd", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-8.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-8.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -0,0 +1,6 @@\n+/* Verify that we include -Wno- variants when considering hints\n+   for misspelled options (PR driver/69453).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"--Wno-narrowing\" } */\n+/* { dg-error \"unrecognized command line option '--Wno-narrowing'; did you mean '-Wno-narrowing'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "768b6f8c2a90bea447d6416acceba6b0ece9c03e", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-9.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61789eedf831541b415691f7376a83fa81e6d73b/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-9.c?ref=61789eedf831541b415691f7376a83fa81e6d73b", "patch": "@@ -0,0 +1,6 @@\n+/* Verify that we include -Wno- variants when considering hints\n+   for misspelled options (PR driver/69453).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-fmo-unroll-loops\" } */\n+/* { dg-error \"unrecognized command line option '-fmo-unroll-loops'; did you mean '-fno-unroll-loops'?\"  \"\" { target *-*-* } 0 } */"}]}