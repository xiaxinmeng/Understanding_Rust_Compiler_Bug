{"sha": "3fe30ff6f7652648c0c2882815ad2f52e51c06db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlMzBmZjZmNzY1MjY0OGMwYzI4ODI4MTVhZDJmNTJlNTFjMDZkYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-11-21T19:09:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-11-21T19:09:38Z"}, "message": "c-common.c (c_unsafe_for_reeval): New function.\n\n        * c-common.c (c_unsafe_for_reeval): New function.\n        (add_c_tree_codes): Register it.\n        * c-common.h: Declare it.\n        * tree.c (lang_unsafe_for_reeval): New hook.\n        (unsafe_for_reeval): Call it.\n        * tree.h: Declare it.\n\nFrom-SVN: r37623", "tree": {"sha": "7b19327f6425471460eda074c9f38f18c4323d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b19327f6425471460eda074c9f38f18c4323d1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fe30ff6f7652648c0c2882815ad2f52e51c06db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe30ff6f7652648c0c2882815ad2f52e51c06db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe30ff6f7652648c0c2882815ad2f52e51c06db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe30ff6f7652648c0c2882815ad2f52e51c06db/comments", "author": null, "committer": null, "parents": [{"sha": "3adbce3d89170e4c84697de5c71d5486b029f26f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3adbce3d89170e4c84697de5c71d5486b029f26f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3adbce3d89170e4c84697de5c71d5486b029f26f"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "0a88e629d740669c9d0cc56e2c71655a65a08e93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe30ff6f7652648c0c2882815ad2f52e51c06db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe30ff6f7652648c0c2882815ad2f52e51c06db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fe30ff6f7652648c0c2882815ad2f52e51c06db", "patch": "@@ -1,3 +1,12 @@\n+2000-11-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c (c_unsafe_for_reeval): New function.\n+\t(add_c_tree_codes): Register it.\n+\t* c-common.h: Declare it.\n+\t* tree.c (lang_unsafe_for_reeval): New hook.\n+\t(unsafe_for_reeval): Call it.\n+\t* tree.h: Declare it.\n+\n 2000-11-21  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (i386_simplify_dwarf_addr): Simplify @GOT"}, {"sha": "59bc43e0f20037e49f1cd8bbc5295f928b3ba333", "filename": "gcc/c-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe30ff6f7652648c0c2882815ad2f52e51c06db/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe30ff6f7652648c0c2882815ad2f52e51c06db/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3fe30ff6f7652648c0c2882815ad2f52e51c06db", "patch": "@@ -5924,6 +5924,20 @@ c_safe_from_p (target, exp)\n   return 1;\n }\n \n+/* Hook used by unsafe_for_reeval to handle language-specific tree codes.  */\n+\n+int\n+c_unsafe_for_reeval (exp)\n+     tree exp;\n+{\n+  /* Statement expressions may not be reevaluated.  */\n+  if (TREE_CODE (exp) == STMT_EXPR)\n+    return 2;\n+\n+  /* Walk all other expressions.  */\n+  return -1;\n+}\n+\n /* Tree code classes. */\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n@@ -5971,6 +5985,7 @@ add_c_tree_codes ()\n   memcpy (tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE,\n \t  c_tree_code_name,\n \t  (LAST_C_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (char *));\n+  lang_unsafe_for_reeval = c_unsafe_for_reeval;\n }\n \n #define CALLED_AS_BUILT_IN(NODE) \\"}, {"sha": "5f6e4d2335b3c614387b20285a3d2e223708881d", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe30ff6f7652648c0c2882815ad2f52e51c06db/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe30ff6f7652648c0c2882815ad2f52e51c06db/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3fe30ff6f7652648c0c2882815ad2f52e51c06db", "patch": "@@ -757,9 +757,10 @@ extern struct rtx_def *c_expand_expr            PARAMS ((tree, rtx,\n \t\t\t\t\t\t\t enum expand_modifier));\n \n extern int c_safe_from_p                        PARAMS ((rtx, tree));\n-\n #endif\n \n+extern int c_unsafe_for_reeval\t\t\tPARAMS ((tree));\n+\n /* In dump.c */\n \n typedef struct dump_info *dump_info_p;"}, {"sha": "dcacdaf1d397943f0100c18ed766a7abe7f9a1b6", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe30ff6f7652648c0c2882815ad2f52e51c06db/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe30ff6f7652648c0c2882815ad2f52e51c06db/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3fe30ff6f7652648c0c2882815ad2f52e51c06db", "patch": "@@ -179,6 +179,9 @@ static void finish_vector_type PARAMS((tree));\n void (*lang_unsave) PARAMS ((tree *));\n void (*lang_unsave_expr_now) PARAMS ((tree));\n \n+/* If non-null, these are language-specific helper functions for\n+   unsafe_for_reeval.  Return negative to not handle some tree.  */\n+int (*lang_unsafe_for_reeval) PARAMS ((tree));\n \f\n tree global_trees[TI_MAX];\n tree integer_types[itk_none];\n@@ -1778,7 +1781,12 @@ unsafe_for_reeval (expr)\n       break;\n \n     default:\n-      /* ??? Add a lang hook if it becomes necessary.  */\n+      if (lang_unsafe_for_reeval != 0)\n+\t{\n+\t  tmp = (*lang_unsafe_for_reeval) (expr);\n+\t  if (tmp >= 0)\n+\t    return tmp;\n+\t}\n       break;\n     }\n "}, {"sha": "1cf49f1f8729212e137e2048b5eac7284f7fd5cc", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe30ff6f7652648c0c2882815ad2f52e51c06db/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe30ff6f7652648c0c2882815ad2f52e51c06db/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3fe30ff6f7652648c0c2882815ad2f52e51c06db", "patch": "@@ -2255,7 +2255,11 @@ extern void (*lang_unsave_expr_now)     PARAMS ((tree));\n /* Return 0 if it is safe to evaluate EXPR multiple times,\n    return 1 if it is safe if EXPR is unsaved afterward, or\n    return 2 if it is completely unsafe.  */\n-extern int unsafe_for_reeval PARAMS ((tree));\n+extern int unsafe_for_reeval\t\tPARAMS ((tree));\n+\n+/* If non-null, these are language-specific helper functions for\n+   unsafe_for_reeval.  Return negative to not handle some tree.  */\n+extern int (*lang_unsafe_for_reeval)\tPARAMS ((tree));\n \n /* Return 1 if EXP contains a PLACEHOLDER_EXPR; i.e., if it represents a size\n    or offset that depends on a field within a record."}]}