{"sha": "7b76e80551f4445f2557d9f20bc29f06adb7b4e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I3NmU4MDU1MWY0NDQ1ZjI1NTdkOWYyMGJjMjlmMDZhZGI3YjRlMQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-12-13T10:27:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:27:21Z"}, "message": "gnat1drv.adb (Gnat1drv): Properly set new flag Opt.Real_VMS_Target\n\n2007-12-06  Robert Dewar  <dewar@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* gnat1drv.adb (Gnat1drv): Properly set new flag Opt.Real_VMS_Target\n\n\t* layout.adb (Resolve_Attribute, case 'Access): If designated type of\n\tcontext is a limited view, use non-limited view when available. If the\n\tnon-limited view is an unconstrained array, this enforces consistency\n\trequirements in 3.10.2 (27).\n\t(Layout_Type): For an access type whose designated type is a limited\n\tview, examine its declaration to determine if it is an unconstrained\n\tarray, and size the access type accordingly.\n\t(Layout_Type): Do not force 32-bits for convention c subprogram\n\tpointers in -gnatdm mode, only if real vms target.\n\n\t* sem_attr.adb (Analyze_Access_Attribute): Use new flag\n\tHas_Pragma_Inline_Always instead of obsolete function Is_Always_Inlined\n\t(Analyze_Access_Attribute,Attribute_Address): Remove checks for\n\tviolations of the No_Implicit_Dynamic_Code restriction.\n\t(Resolve_Attribute, case 'Access): If designated type of context is a\n\tlimited view, use non-limited view when available. If the non-limited\n\tview is an unconstrained array, this enforces consistency requirements\n\tin 3.10.2 (27).\n\t(Layout_Type): For an access type whose designated type is a limited\n\tview, examine its declaration to determine if it is an unconstrained\n\tarray, and size the access type accordingly.\n\nFrom-SVN: r130840", "tree": {"sha": "6542bbec96f5e0f9ee4e11f9f7c4927d4bdd9dd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6542bbec96f5e0f9ee4e11f9f7c4927d4bdd9dd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b76e80551f4445f2557d9f20bc29f06adb7b4e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b76e80551f4445f2557d9f20bc29f06adb7b4e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b76e80551f4445f2557d9f20bc29f06adb7b4e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b76e80551f4445f2557d9f20bc29f06adb7b4e1/comments", "author": null, "committer": null, "parents": [{"sha": "7d304f61cd5e9835bbc600272772cf067f9b2b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d304f61cd5e9835bbc600272772cf067f9b2b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d304f61cd5e9835bbc600272772cf067f9b2b6b"}], "stats": {"total": 138, "additions": 93, "deletions": 45}, "files": [{"sha": "dda21ce8e98cb4526ed66908d83e6d431fe2639a", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b76e80551f4445f2557d9f20bc29f06adb7b4e1/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b76e80551f4445f2557d9f20bc29f06adb7b4e1/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=7b76e80551f4445f2557d9f20bc29f06adb7b4e1", "patch": "@@ -370,6 +370,12 @@ begin\n          Ttypes.Bytes_Big_Endian := not Ttypes.Bytes_Big_Endian;\n       end if;\n \n+      --  Deal with forcing OpenVMS switches Ture if debug flag M is set, but\n+      --  record the setting of Targparm.Open_VMS_On_Target in True_VMS_Target\n+      --  before doing this.\n+\n+      Opt.True_VMS_Target := Targparm.OpenVMS_On_Target;\n+\n       if Debug_Flag_M then\n          Targparm.OpenVMS_On_Target := True;\n          Hostparm.OpenVMS := True;"}, {"sha": "a3ed7579451a2286738aaa840f44aa81cc2bb7fb", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b76e80551f4445f2557d9f20bc29f06adb7b4e1/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b76e80551f4445f2557d9f20bc29f06adb7b4e1/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=7b76e80551f4445f2557d9f20bc29f06adb7b4e1", "patch": "@@ -2300,6 +2300,8 @@ package body Layout is\n    -----------------\n \n    procedure Layout_Type (E : Entity_Id) is\n+      Desig_Type : Entity_Id;\n+\n    begin\n       --  For string literal types, for now, kill the size always, this\n       --  is because gigi does not like or need the size to be set ???\n@@ -2321,6 +2323,18 @@ package body Layout is\n \n       if Is_Access_Type (E) then\n \n+         Desig_Type :=  Underlying_Type (Designated_Type (E));\n+\n+         --  If we only have a limited view of the type, see whether the\n+         --  non-limited view is available.\n+\n+         if From_With_Type (Designated_Type (E))\n+           and then Ekind (Designated_Type (E)) = E_Incomplete_Type\n+           and then Present (Non_Limited_View (Designated_Type (E)))\n+         then\n+            Desig_Type := Non_Limited_View (Designated_Type (E));\n+         end if;\n+\n          --  If Esize already set (e.g. by a size clause), then nothing\n          --  further to be done here.\n \n@@ -2344,11 +2358,10 @@ package body Layout is\n          --  a fat pointer is used (pointer-to-unconstrained array case),\n          --  twice the address size to accommodate a fat pointer.\n \n-         elsif Present (Underlying_Type (Designated_Type (E)))\n-            and then Is_Array_Type (Underlying_Type (Designated_Type (E)))\n-            and then not Is_Constrained (Underlying_Type (Designated_Type (E)))\n-            and then not Has_Completion_In_Body (Underlying_Type\n-                                                 (Designated_Type (E)))\n+         elsif Present (Desig_Type)\n+            and then Is_Array_Type (Desig_Type)\n+            and then not Is_Constrained (Desig_Type)\n+            and then not Has_Completion_In_Body (Desig_Type)\n             and then not Debug_Flag_6\n          then\n             Init_Size (E, 2 * System_Address_Size);\n@@ -2365,6 +2378,19 @@ package body Layout is\n                  (\"?this access type does not correspond to C pointer\", E);\n             end if;\n \n+         --  If the designated type is a limited view it is unanalyzed. We\n+         --  can examine the declaration itself to determine whether it will\n+         --  need a fat pointer.\n+\n+         elsif Present (Desig_Type)\n+            and then Present (Parent (Desig_Type))\n+            and then Nkind (Parent (Desig_Type)) = N_Full_Type_Declaration\n+            and then\n+              Nkind (Type_Definition (Parent (Desig_Type)))\n+                 = N_Unconstrained_Array_Definition\n+         then\n+            Init_Size (E, 2 * System_Address_Size);\n+\n          --  When the target is AAMP, access-to-subprogram types are fat\n          --  pointers consisting of the subprogram address and a static\n          --  link (with the exception of library-level access types,\n@@ -2395,7 +2421,10 @@ package body Layout is\n          --  for this purpose, since it would be weird not to inherit the size\n          --  in this case.\n \n-         if OpenVMS_On_Target\n+         --  We do NOT do this if we are in -gnatdm mode on a non-VMS target\n+         --  since in that case we want the normal pointer representation.\n+\n+         if Opt.True_VMS_Target\n            and then (Convention (E) = Convention_C\n                       or else\n                      Convention (E) = Convention_CPP)"}, {"sha": "4bfce0c6cb909cc6d8ac5e89987780f2ed5c8f6e", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 52, "deletions": 39, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b76e80551f4445f2557d9f20bc29f06adb7b4e1/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b76e80551f4445f2557d9f20bc29f06adb7b4e1/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=7b76e80551f4445f2557d9f20bc29f06adb7b4e1", "patch": "@@ -534,14 +534,7 @@ package body Sem_Attr is\n          if Is_Entity_Name (P)\n            and then Is_Overloadable (Entity (P))\n          then\n-            --  Not allowed for nested subprograms if No_Implicit_Dynamic_Code\n-            --  restriction set (since in general a trampoline is required).\n-\n-            if not Is_Library_Level_Entity (Entity (P)) then\n-               Check_Restriction (No_Implicit_Dynamic_Code, P);\n-            end if;\n-\n-            if Is_Always_Inlined (Entity (P)) then\n+            if Has_Pragma_Inline_Always (Entity (P)) then\n                Error_Attr_P\n                  (\"prefix of % attribute cannot be Inline_Always subprogram\");\n             end if;\n@@ -1399,7 +1392,6 @@ package body Sem_Attr is\n          then\n             Error_Attr (\"only allowed prefix for % attribute is Standard\", P);\n          end if;\n-\n       end Check_Standard_Prefix;\n \n       ----------------------------\n@@ -1921,10 +1913,6 @@ package body Sem_Attr is\n \n             begin\n                if Is_Subprogram (Ent) then\n-                  if not Is_Library_Level_Entity (Ent) then\n-                     Check_Restriction (No_Implicit_Dynamic_Code, P);\n-                  end if;\n-\n                   Set_Address_Taken (Ent);\n                   Kill_Current_Values (Ent);\n \n@@ -1934,7 +1922,7 @@ package body Sem_Attr is\n                   --  errors about implicit uses of Address in the dispatch\n                   --  table initialization).\n \n-                  if Is_Always_Inlined (Entity (P))\n+                  if Has_Pragma_Inline_Always (Entity (P))\n                     and then Comes_From_Source (P)\n                   then\n                      Error_Attr_P\n@@ -2809,6 +2797,20 @@ package body Sem_Attr is\n             Error_Attr_P (\"prefix of % attribute must be tagged\");\n          end if;\n \n+      ---------------\n+      -- Fast_Math --\n+      ---------------\n+\n+      when Attribute_Fast_Math =>\n+         Check_E0;\n+         Check_Standard_Prefix;\n+\n+         if Opt.Fast_Math then\n+            Rewrite (N, New_Occurrence_Of (Standard_True, Loc));\n+         else\n+            Rewrite (N, New_Occurrence_Of (Standard_False, Loc));\n+         end if;\n+\n       -----------\n       -- First --\n       -----------\n@@ -3869,6 +3871,9 @@ package body Sem_Attr is\n          if Comes_From_Source (N) then\n             Check_Not_Incomplete_Type;\n          end if;\n+\n+         --  Set appropriate type\n+\n          Set_Etype (N, RTE (RE_Tag));\n \n       -----------------\n@@ -6914,6 +6919,7 @@ package body Sem_Attr is\n            Attribute_Elab_Spec                |\n            Attribute_Enabled                  |\n            Attribute_External_Tag             |\n+           Attribute_Fast_Math                |\n            Attribute_First_Bit                |\n            Attribute_Input                    |\n            Attribute_Last_Bit                 |\n@@ -7439,6 +7445,26 @@ package body Sem_Attr is\n                end if;\n             end if;\n \n+            Des_Btyp := Designated_Type (Btyp);\n+\n+            if Ada_Version >= Ada_05\n+              and then Is_Incomplete_Type (Des_Btyp)\n+            then\n+               --  Ada 2005 (AI-412): If the (sub)type is a limited view of an\n+               --  imported entity, and the non-limited view is visible, make\n+               --  use of it. If it is an incomplete subtype, use the base type\n+               --  in any case.\n+\n+               if From_With_Type (Des_Btyp)\n+                 and then Present (Non_Limited_View (Des_Btyp))\n+               then\n+                  Des_Btyp := Non_Limited_View (Des_Btyp);\n+\n+               elsif Ekind (Des_Btyp) = E_Incomplete_Subtype then\n+                  Des_Btyp := Etype (Des_Btyp);\n+               end if;\n+            end if;\n+\n             if (Attr_Id = Attribute_Access\n                   or else\n                 Attr_Id = Attribute_Unchecked_Access)\n@@ -7489,23 +7515,6 @@ package body Sem_Attr is\n                   Nom_Subt := Base_Type (Nom_Subt);\n                end if;\n \n-               Des_Btyp := Designated_Type (Btyp);\n-\n-               if Ekind (Des_Btyp) = E_Incomplete_Subtype then\n-\n-                  --  Ada 2005 (AI-412): Subtypes of incomplete types visible\n-                  --  through a limited with clause or regular incomplete\n-                  --  subtypes.\n-\n-                  if From_With_Type (Des_Btyp)\n-                    and then Present (Non_Limited_View (Des_Btyp))\n-                  then\n-                     Des_Btyp := Non_Limited_View (Des_Btyp);\n-                  else\n-                     Des_Btyp := Etype (Des_Btyp);\n-                  end if;\n-               end if;\n-\n                if Is_Tagged_Type (Designated_Type (Typ)) then\n \n                   --  If the attribute is in the context of an access\n@@ -7568,16 +7577,20 @@ package body Sem_Attr is\n                --  (because access values must be assumed to designate mutable\n                --  objects when designated type does not impose a constraint).\n \n-               elsif not Subtypes_Statically_Match (Des_Btyp, Nom_Subt)\n+               elsif Subtypes_Statically_Match (Des_Btyp, Nom_Subt) then\n+                  null;\n+\n+               elsif Has_Discriminants (Designated_Type (Typ))\n+                 and then not Is_Constrained (Des_Btyp)\n                  and then\n-                   not (Has_Discriminants (Designated_Type (Typ))\n-                          and then not Is_Constrained (Des_Btyp)\n-                          and then\n-                            (Ada_Version < Ada_05\n-                              or else\n-                                not Has_Constrained_Partial_View\n-                                      (Designated_Type (Base_Type (Typ)))))\n+                   (Ada_Version < Ada_05\n+                     or else\n+                       not Has_Constrained_Partial_View\n+                             (Designated_Type (Base_Type (Typ))))\n                then\n+                  null;\n+\n+               else\n                   Error_Msg_F\n                     (\"object subtype must statically match \"\n                      & \"designated subtype\", P);"}]}