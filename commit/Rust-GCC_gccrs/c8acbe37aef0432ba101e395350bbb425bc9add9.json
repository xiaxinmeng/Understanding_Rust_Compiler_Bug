{"sha": "c8acbe37aef0432ba101e395350bbb425bc9add9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhY2JlMzdhZWYwNDMyYmExMDFlMzk1MzUwYmJiNDI1YmM5YWRkOQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-05-11T02:09:38Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-05-11T02:09:38Z"}, "message": "[RS6000] complex long double ABI_V4 fix\n\nRevision 235794 regressed compat/scalar-by-value-6 for powerpc-linux\n-m32 due to accidentally changing the ABI.  By another historical\naccident, complex long double is stupidly passed in gprs for -m32.\n\n\t* config/rs6000/rs6000.c (is_complex_IBM_long_double,\n\tabi_v4_pass_in_fpr): New functions.\n\t(rs6000_function_arg_boundary): Exclude complex IBM long double\n\tfrom 64-bit alignment when ABI_V4.\n\t(rs6000_function_arg, rs6000_function_arg_advance_1,\n\trs6000_gimplify_va_arg): Use abi_v4_pass_in_fpr.\n\nFrom-SVN: r236111", "tree": {"sha": "9758b76b632f662ab22c46cc9907671a2d081424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9758b76b632f662ab22c46cc9907671a2d081424"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8acbe37aef0432ba101e395350bbb425bc9add9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8acbe37aef0432ba101e395350bbb425bc9add9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8acbe37aef0432ba101e395350bbb425bc9add9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8acbe37aef0432ba101e395350bbb425bc9add9/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36bc016315eb36f55e4de48c427b5c40304d73ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36bc016315eb36f55e4de48c427b5c40304d73ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36bc016315eb36f55e4de48c427b5c40304d73ec"}], "stats": {"total": 67, "additions": 47, "deletions": 20}, "files": [{"sha": "84d5ddcba2c8a4ee2549309e373e567f2a4c83ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8acbe37aef0432ba101e395350bbb425bc9add9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8acbe37aef0432ba101e395350bbb425bc9add9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8acbe37aef0432ba101e395350bbb425bc9add9", "patch": "@@ -1,3 +1,12 @@\n+2016-05-11  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (is_complex_IBM_long_double,\n+\tabi_v4_pass_in_fpr): New functions.\n+\t(rs6000_function_arg_boundary): Exclude complex IBM long double\n+\tfrom 64-bit alignment when ABI_V4.\n+\t(rs6000_function_arg, rs6000_function_arg_advance_1,\n+\trs6000_gimplify_va_arg): Use abi_v4_pass_in_fpr.\n+\n 2016-05-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/71028"}, {"sha": "0f70bb91126c17d8ee50e60860c539c30c9cb823", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8acbe37aef0432ba101e395350bbb425bc9add9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8acbe37aef0432ba101e395350bbb425bc9add9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c8acbe37aef0432ba101e395350bbb425bc9add9", "patch": "@@ -10089,6 +10089,35 @@ rs6000_must_pass_in_stack (machine_mode mode, const_tree type)\n     return must_pass_in_stack_var_size_or_pad (mode, type);\n }\n \n+static inline bool\n+is_complex_IBM_long_double (machine_mode mode)\n+{\n+  return mode == ICmode || (!TARGET_IEEEQUAD && mode == TCmode);\n+}\n+\n+/* Whether ABI_V4 passes MODE args to a function in floating point\n+   registers.  */\n+\n+static bool\n+abi_v4_pass_in_fpr (machine_mode mode)\n+{\n+  if (!TARGET_FPRS || !TARGET_HARD_FLOAT)\n+    return false;\n+  if (TARGET_SINGLE_FLOAT && mode == SFmode)\n+    return true;\n+  if (TARGET_DOUBLE_FLOAT && mode == DFmode)\n+    return true;\n+  /* ABI_V4 passes complex IBM long double in 8 gprs.\n+     Stupid, but we can't change the ABI now.  */\n+  if (is_complex_IBM_long_double (mode))\n+    return false;\n+  if (FLOAT128_2REG_P (mode))\n+    return true;\n+  if (DECIMAL_FLOAT_MODE_P (mode))\n+    return true;\n+  return false;\n+}\n+\n /* If defined, a C expression which determines whether, and in which\n    direction, to pad out an argument with extra space.  The value\n    should be of type `enum direction': either `upward' to pad above\n@@ -10173,6 +10202,7 @@ rs6000_function_arg_boundary (machine_mode mode, const_tree type)\n       && (GET_MODE_SIZE (mode) == 8\n \t  || (TARGET_HARD_FLOAT\n \t      && TARGET_FPRS\n+\t      && !is_complex_IBM_long_double (mode)\n \t      && FLOAT128_2REG_P (mode))))\n     return 64;\n   else if (FLOAT128_VECTOR_P (mode))\n@@ -10552,11 +10582,7 @@ rs6000_function_arg_advance_1 (CUMULATIVE_ARGS *cum, machine_mode mode,\n     }\n   else if (DEFAULT_ABI == ABI_V4)\n     {\n-      if (TARGET_HARD_FLOAT && TARGET_FPRS\n-\t  && ((TARGET_SINGLE_FLOAT && mode == SFmode)\n-\t      || (TARGET_DOUBLE_FLOAT && mode == DFmode)\n-\t      || FLOAT128_2REG_P (mode)\n-\t      || DECIMAL_FLOAT_MODE_P (mode)))\n+      if (abi_v4_pass_in_fpr (mode))\n \t{\n \t  /* _Decimal128 must use an even/odd register pair.  This assumes\n \t     that the register number is odd when fregno is odd.  */\n@@ -11213,11 +11239,7 @@ rs6000_function_arg (cumulative_args_t cum_v, machine_mode mode,\n \n   else if (abi == ABI_V4)\n     {\n-      if (TARGET_HARD_FLOAT && TARGET_FPRS\n-\t  && ((TARGET_SINGLE_FLOAT && mode == SFmode)\n-\t      || (TARGET_DOUBLE_FLOAT && mode == DFmode)\n-\t      || FLOAT128_2REG_P (mode)\n-\t      || DECIMAL_FLOAT_MODE_P (mode)))\n+      if (abi_v4_pass_in_fpr (mode))\n \t{\n \t  /* _Decimal128 must use an even/odd register pair.  This assumes\n \t     that the register number is odd when fregno is odd.  */\n@@ -12138,19 +12160,15 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   rsize = (size + 3) / 4;\n   align = 1;\n \n-  if (TARGET_HARD_FLOAT && TARGET_FPRS\n-      && ((TARGET_SINGLE_FLOAT && TYPE_MODE (type) == SFmode)\n-          || (TARGET_DOUBLE_FLOAT \n-              && (TYPE_MODE (type) == DFmode \n-\t\t  || FLOAT128_2REG_P (TYPE_MODE (type))\n-\t\t  || DECIMAL_FLOAT_MODE_P (TYPE_MODE (type))))))\n+  machine_mode mode = TYPE_MODE (type);\n+  if (abi_v4_pass_in_fpr (mode))\n     {\n       /* FP args go in FP registers, if present.  */\n       reg = fpr;\n       n_reg = (size + 7) / 8;\n       sav_ofs = ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT) ? 8 : 4) * 4;\n       sav_scale = ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT) ? 8 : 4);\n-      if (TYPE_MODE (type) != SFmode && TYPE_MODE (type) != SDmode)\n+      if (mode != SFmode && mode != SDmode)\n \talign = 8;\n     }\n   else\n@@ -12170,7 +12188,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   addr = create_tmp_var (ptr_type_node, \"addr\");\n \n   /*  AltiVec vectors never go in registers when -mabi=altivec.  */\n-  if (TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (TYPE_MODE (type)))\n+  if (TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n     align = 16;\n   else\n     {\n@@ -12191,7 +12209,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \t}\n       /* _Decimal128 is passed in even/odd fpr pairs; the stored\n \t reg number is 0 for f1, so we want to make it odd.  */\n-      else if (reg == fpr && TYPE_MODE (type) == TDmode)\n+      else if (reg == fpr && mode == TDmode)\n \t{\n \t  t = build2 (BIT_IOR_EXPR, TREE_TYPE (reg), unshare_expr (reg),\n \t\t      build_int_cst (TREE_TYPE (reg), 1));\n@@ -12218,7 +12236,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \t FP register for 32-bit binaries.  */\n       if (TARGET_32BIT\n \t  && TARGET_HARD_FLOAT && TARGET_FPRS\n-\t  && TYPE_MODE (type) == SDmode)\n+\t  && mode == SDmode)\n \tt = fold_build_pointer_plus_hwi (t, size);\n \n       gimplify_assign (addr, t, pre_p);"}]}