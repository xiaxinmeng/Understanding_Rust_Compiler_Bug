{"sha": "2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ5NmM3YmQ1ZjUxOWJjOTMzNGYyYTRhZDc3MWI0YjhjOWNiYTdjNw==", "commit": {"author": {"name": "Lars Brinkhoff", "email": "lars@nocrew.org", "date": "2002-03-19T18:00:43Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-19T18:00:43Z"}, "message": "emit-rtl.c (gen_int_mode): New function.\n\n        * emit-rtl.c (gen_int_mode): New function.\n        * rtl.h: Prototype for it.\n        * combine.c (make_extraction, simplify_comparison), expmed.c\n        (store_bit_field, expand_mult_highpart, expand_divmod), expr.c\n        (convert_modes, store_field), optabs.c (expand_fix),\n        simplify-rtx.c (neg_const_int, simplify_unary_real),\n\n        * config/rs6000/rs6000.c, config/rs6000/rs6000.md:\n        Use it instead of GEN_INT (trunc_int_for_mode (...)).\n\nFrom-SVN: r51030", "tree": {"sha": "03b085deca8da9a691cb5cdc16540f0276bd3595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b085deca8da9a691cb5cdc16540f0276bd3595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/comments", "author": {"login": "larsbrinkhoff", "id": 775050, "node_id": "MDQ6VXNlcjc3NTA1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/775050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larsbrinkhoff", "html_url": "https://github.com/larsbrinkhoff", "followers_url": "https://api.github.com/users/larsbrinkhoff/followers", "following_url": "https://api.github.com/users/larsbrinkhoff/following{/other_user}", "gists_url": "https://api.github.com/users/larsbrinkhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/larsbrinkhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larsbrinkhoff/subscriptions", "organizations_url": "https://api.github.com/users/larsbrinkhoff/orgs", "repos_url": "https://api.github.com/users/larsbrinkhoff/repos", "events_url": "https://api.github.com/users/larsbrinkhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/larsbrinkhoff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09979e6f03b42f800cf39123596e7d4027da9057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09979e6f03b42f800cf39123596e7d4027da9057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09979e6f03b42f800cf39123596e7d4027da9057"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "fbaee551790da6103267e30b5d0f8ccb4704c1da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "patch": "@@ -1,3 +1,15 @@\n+2002-03-19  Lars Brinkhoff  <lars@nocrew.org>\n+\n+\t* emit-rtl.c (gen_int_mode): New function.\n+\t* rtl.h: Prototype for it.\n+\t* combine.c (make_extraction, simplify_comparison), expmed.c\n+\t(store_bit_field, expand_mult_highpart, expand_divmod), expr.c\n+\t(convert_modes, store_field), optabs.c (expand_fix),\n+\tsimplify-rtx.c (neg_const_int, simplify_unary_real),\n+\n+\t* config/rs6000/rs6000.c, config/rs6000/rs6000.md:\n+\tUse it instead of GEN_INT (trunc_int_for_mode (...)).\n+\n 2002-03-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/5656\n@@ -95,8 +107,8 @@\n \n 2002-03-18  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.h (PREDICATE_CODES): Add PARALLEL to\n-        any_operand.\n+\t* config/rs6000/rs6000.h (PREDICATE_CODES): Add PARALLEL to\n+\tany_operand.\n \n 2002-03-17  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "0f175599b29bf15536b84a4a228483dc2d36ed8d", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "patch": "@@ -6033,7 +6033,7 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n \treturn new;\n \n       if (GET_CODE (new) == CONST_INT)\n-\treturn GEN_INT (trunc_int_for_mode (INTVAL (new), mode));\n+\treturn gen_int_mode (INTVAL (new), mode);\n \n       /* If we know that no extraneous bits are set, and that the high\n \t bit is not set, convert the extraction to the cheaper of\n@@ -10792,7 +10792,7 @@ simplify_comparison (code, pop0, pop1)\n \t      unsigned HOST_WIDE_INT temp = const_op & GET_MODE_MASK (mode);\n \n \t      temp >>= INTVAL (XEXP (op0, 1));\n-\t      op1 = GEN_INT (trunc_int_for_mode (temp, mode));\n+\t      op1 = gen_int_mode (temp, mode);\n \t      op0 = XEXP (op0, 0);\n \t      continue;\n \t    }"}, {"sha": "de4af5d1d8725e85e1b16d28cc90f4c40e454924", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "patch": "@@ -2177,8 +2177,7 @@ rs6000_emit_move (dest, source, mode)\n       /* FIXME.  This should never happen.  */\n       /* Since it seems that it does, do the safe thing and convert\n \t to a CONST_INT.  */\n-      operands[1] = \n-\tGEN_INT (trunc_int_for_mode (CONST_DOUBLE_LOW (operands[1]), mode));\n+      operands[1] = gen_int_mode (CONST_DOUBLE_LOW (operands[1]), mode);\n     }\n   if (GET_CODE (operands[1]) == CONST_DOUBLE\n       && ! FLOAT_MODE_P (mode)\n@@ -8312,10 +8311,8 @@ rs6000_emit_eh_toc_restore (stacksize)\n \t\t\t       bottom_of_stack, stacksize,\n \t\t\t       NULL_RTX, 1, OPTAB_WIDEN);\n \n-  emit_move_insn (tocompare, \n-\t\t  GEN_INT (trunc_int_for_mode (TARGET_32BIT \n-\t\t\t\t\t       ? 0x80410014 \n-\t\t\t\t\t       : 0xE8410028, SImode)));\n+  emit_move_insn (tocompare, gen_int_mode (TARGET_32BIT ? 0x80410014 \n+\t\t\t\t\t   : 0xE8410028, SImode));\n \n   if (insn_after_throw == NULL_RTX)\n     abort ();"}, {"sha": "1330361ae72794257fcfa773fa26214212906232", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "patch": "@@ -7819,7 +7819,7 @@\n   else\n     operands[2] = gen_lowpart (SImode, operands[0]);\n \n-  operands[3] = GEN_INT (trunc_int_for_mode (l, SImode));\n+  operands[3] = gen_int_mode (l, SImode);\n }\")\n \n (define_insn \"*movsf_hardfloat\"\n@@ -7909,8 +7909,8 @@\n \n   operands[2] = operand_subword (operands[0], endian, 0, DFmode);\n   operands[3] = operand_subword (operands[0], 1 - endian, 0, DFmode);\n-  operands[4] = GEN_INT (trunc_int_for_mode (l[endian], SImode));\n-  operands[5] = GEN_INT (trunc_int_for_mode (l[1 - endian], SImode));\n+  operands[4] = gen_int_mode (l[endian], SImode);\n+  operands[5] = gen_int_mode (l[1 - endian], SImode);\n }\")\n \n (define_split"}, {"sha": "d54bacab6b95c4ae6eed240ece3b9282e61bc88a", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "patch": "@@ -355,6 +355,14 @@ gen_rtx_CONST_INT (mode, arg)\n   return (rtx) *slot;\n }\n \n+rtx\n+gen_int_mode (c, mode)\n+     HOST_WIDE_INT c;\n+     enum machine_mode mode;\n+{\n+  return GEN_INT (trunc_int_for_mode (c, mode));\n+}\n+\n /* CONST_DOUBLEs needs special handling because their length is known\n    only at run-time.  */\n "}, {"sha": "d2edd813c964ea35f15119b4fd593ddcbc873185", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "patch": "@@ -656,7 +656,7 @@ store_bit_field (str_rtx, bitsize, bitnum, fieldmode, value, total_size)\n \t\tvalue1 = gen_lowpart (maxmode, value1);\n \t    }\n \t  else if (GET_CODE (value) == CONST_INT)\n-\t    value1 = GEN_INT (trunc_int_for_mode (INTVAL (value), maxmode));\n+\t    value1 = gen_int_mode (INTVAL (value), maxmode);\n \t  else if (!CONSTANT_P (value))\n \t    /* Parse phase is supposed to make VALUE's data type\n \t       match that of the component reference, which is a type\n@@ -2789,7 +2789,7 @@ expand_mult_highpart (mode, op0, cnst1, target, unsignedp, max_cost)\n   if (size > HOST_BITS_PER_WIDE_INT)\n     abort ();\n \n-  op1 = GEN_INT (trunc_int_for_mode (cnst1, mode));\n+  op1 = gen_int_mode (cnst1, mode);\n \n   wide_op1\n     = immed_double_const (cnst1,\n@@ -3273,7 +3273,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\tif (rem_flag && d < 0)\n \t\t  {\n \t\t    d = abs_d;\n-\t\t    op1 = GEN_INT (trunc_int_for_mode (abs_d, compute_mode));\n+\t\t    op1 = gen_int_mode (abs_d, compute_mode);\n \t\t  }\n \n \t\tif (d == 1)\n@@ -3312,8 +3312,8 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\t\tt1 = copy_to_mode_reg (compute_mode, op0);\n \t\t\tdo_cmp_and_jump (t1, const0_rtx, GE,\n \t\t\t\t\t compute_mode, label);\n-\t\t\texpand_inc (t1, GEN_INT (trunc_int_for_mode\n-\t\t\t\t\t\t (abs_d - 1, compute_mode)));\n+\t\t\texpand_inc (t1, gen_int_mode (abs_d - 1,\n+\t\t\t\t\t\t      compute_mode));\n \t\t\temit_label (label);\n \t\t\tquotient = expand_shift (RSHIFT_EXPR, compute_mode, t1,\n \t\t\t\t\t\t build_int_2 (lgup, 0),\n@@ -3853,8 +3853,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t    t1 = expand_shift (RSHIFT_EXPR, compute_mode, op0,\n \t\t\t       build_int_2 (pre_shift, 0), NULL_RTX, unsignedp);\n \t    quotient = expand_mult (compute_mode, t1,\n-\t\t\t\t    GEN_INT (trunc_int_for_mode\n-\t\t\t\t\t     (ml, compute_mode)),\n+\t\t\t\t    gen_int_mode (ml, compute_mode),\n \t\t\t\t    NULL_RTX, 0);\n \n \t    insn = get_last_insn ();"}, {"sha": "f8a045a49fd23e26d97e6b0e0ff018b3a07946c8", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "patch": "@@ -1352,7 +1352,7 @@ convert_modes (mode, oldmode, x, unsignedp)\n \t      && (val & ((HOST_WIDE_INT) 1 << (width - 1))))\n \t    val |= (HOST_WIDE_INT) (-1) << width;\n \n-\t  return GEN_INT (trunc_int_for_mode (val, mode));\n+\t  return gen_int_mode (val, mode);\n \t}\n \n       return gen_lowpart (mode, x);\n@@ -5150,8 +5150,7 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode, unsignedp, type,\n \n \t      if (unsignedp)\n \t\treturn expand_and (tmode, temp,\n-\t\t\t\t   GEN_INT (trunc_int_for_mode (width_mask,\n-\t\t\t\t\t\t\t\ttmode)),\n+\t\t\t\t   gen_int_mode (width_mask, tmode),\n \t\t\t\t   NULL_RTX);\n \n \t      count = build_int_2 (GET_MODE_BITSIZE (tmode) - bitsize, 0);"}, {"sha": "2abf67359c47fcd86d9a56f622a95ab391603eb0", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "patch": "@@ -4560,9 +4560,9 @@ expand_fix (to, from, unsignedp)\n \t\t\t\t NULL_RTX, 0, OPTAB_LIB_WIDEN);\n \t  expand_fix (to, target, 0);\n \t  target = expand_binop (GET_MODE (to), xor_optab, to,\n-\t\t\t\t GEN_INT (trunc_int_for_mode\n-\t\t\t\t\t  ((HOST_WIDE_INT) 1 << (bitsize - 1),\n-\t\t\t\t\t   GET_MODE (to))),\n+\t\t\t\t gen_int_mode\n+\t\t\t\t ((HOST_WIDE_INT) 1 << (bitsize - 1),\n+\t\t\t\t  GET_MODE (to)),\n \t\t\t\t to, 1, OPTAB_LIB_WIDEN);\n \n \t  if (target != to)"}, {"sha": "711f53b4d9ef3ba722cb8e4a49b979fff95c554d", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "patch": "@@ -1246,6 +1246,8 @@ extern rtx gen_rtx\t\t\tPARAMS ((enum rtx_code,\n extern rtvec gen_rtvec\t\t\tPARAMS ((int, ...));\n extern rtx copy_insn_1\t\t\tPARAMS ((rtx));\n extern rtx copy_insn\t\t\tPARAMS ((rtx));\n+extern rtx gen_int_mode\t\t\tPARAMS ((HOST_WIDE_INT,\n+\t\t\t\t\t\t enum machine_mode));\n \n /* In rtl.c */\n extern rtx rtx_alloc\t\t\tPARAMS ((RTX_CODE));"}, {"sha": "21012ce31a3a3d4e6af11ac59d30777d78ec781e", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=2496c7bd5f519bc9334f2a4ad771b4b8c9cba7c7", "patch": "@@ -114,7 +114,7 @@ neg_const_int (mode, i)\n      enum machine_mode mode;\n      rtx i;\n {\n-  return GEN_INT (trunc_int_for_mode (- INTVAL (i), mode));\n+  return gen_int_mode (- INTVAL (i), mode);\n }\n \n \f\n@@ -376,7 +376,7 @@ simplify_unary_real (p)\n \tdefault:\n \t  abort ();\n \t}\n-      args->result = GEN_INT (trunc_int_for_mode (i, args->mode));\n+      args->result = gen_int_mode (i, args->mode);\n     }\n   else\n     {"}]}