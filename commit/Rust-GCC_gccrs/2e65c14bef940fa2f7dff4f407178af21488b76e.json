{"sha": "2e65c14bef940fa2f7dff4f407178af21488b76e", "node_id": "C_kwDOANBUbNoAKDJlNjVjMTRiZWY5NDBmYTJmN2RmZjRmNDA3MTc4YWYyMTQ4OGI3NmU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-05-10T16:51:05Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-05-10T17:01:23Z"}, "message": "Allow cast of integers to pointers\n\nThis adds the cast rules of integer types and integer inference variables\nto pointers. The code-generation needed to remove the bad assertion that\nall integer literals were always going to be of type integer. This also\nneeded a tweak to a bad port from the cp/constexpr.cc code which assumed\nthat all integer_cst of pointer types would be a zero pointer which was\nused to detect cases of bad method pointers in CPP which we does not apply\nhere.\n\nsee gcc/cp/constexpr.cc:6564-6488\n\nFixes #1226", "tree": {"sha": "e037226b7226ab0765d526b5c5511f6af6310e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e037226b7226ab0765d526b5c5511f6af6310e37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e65c14bef940fa2f7dff4f407178af21488b76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e65c14bef940fa2f7dff4f407178af21488b76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e65c14bef940fa2f7dff4f407178af21488b76e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e65c14bef940fa2f7dff4f407178af21488b76e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03c21a08eb40b71e67da0c8ae83ed2c645fb76a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c21a08eb40b71e67da0c8ae83ed2c645fb76a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03c21a08eb40b71e67da0c8ae83ed2c645fb76a3"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "0307df10f1f435821ed03c6f642a9f84bccbcf25", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e65c14bef940fa2f7dff4f407178af21488b76e/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e65c14bef940fa2f7dff4f407178af21488b76e/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=2e65c14bef940fa2f7dff4f407178af21488b76e", "patch": "@@ -903,7 +903,6 @@ CompileExpr::compile_integer_literal (const HIR::LiteralExpr &expr,\n   const auto literal_value = expr.get_literal ();\n \n   tree type = TyTyResolveCompile::compile (ctx, tyty);\n-  rust_assert (TREE_CODE (type) == INTEGER_TYPE);\n \n   mpz_t ival;\n   if (mpz_init_set_str (ival, literal_value.as_string ().c_str (), 10) != 0)"}, {"sha": "aee41e43c0a2f35dd0b21f0bb4e304c5d3158420", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e65c14bef940fa2f7dff4f407178af21488b76e/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e65c14bef940fa2f7dff4f407178af21488b76e/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=2e65c14bef940fa2f7dff4f407178af21488b76e", "patch": "@@ -59,17 +59,7 @@ ConstCtx::constexpr_expression (tree t)\n     {\n       if (TREE_OVERFLOW (t))\n \t{\n-\t  rust_error_at (Location (loc), \"overflow in constant expression\");\n-\t  return t;\n-\t}\n-\n-      if (TREE_CODE (t) == INTEGER_CST && TYPE_PTR_P (TREE_TYPE (t))\n-\t  && !integer_zerop (t))\n-\t{\n-\t  // FIXME check does this actually work to print out tree types\n-\t  rust_error_at (Location (loc),\n-\t\t\t \"value %qE of type %qT is not a constant expression\",\n-\t\t\t t, TREE_TYPE (t));\n+\t  error_at (loc, \"overflow in constant expression\");\n \t  return t;\n \t}\n "}, {"sha": "5ca68d07aa2d8f215f1a9e448598e39a7b589425", "filename": "gcc/rust/typecheck/rust-tyty-cast.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e65c14bef940fa2f7dff4f407178af21488b76e/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e65c14bef940fa2f7dff4f407178af21488b76e/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h?ref=2e65c14bef940fa2f7dff4f407178af21488b76e", "patch": "@@ -588,8 +588,11 @@ class InferCastRules : public BaseCastRules\n \n   void visit (PointerType &type) override\n   {\n-    bool is_valid\n-      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    bool is_general_infer_var\n+      = base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL;\n+    bool is_integral_infer_var\n+      = base->get_infer_kind () == TyTy::InferType::InferTypeKind::INTEGRAL;\n+    bool is_valid = is_general_infer_var || is_integral_infer_var;\n     if (is_valid)\n       {\n \tresolved = type.clone ();\n@@ -939,6 +942,8 @@ class IntCastRules : public BaseCastRules\n \n   void visit (ISizeType &type) override { resolved = type.clone (); }\n \n+  void visit (PointerType &type) override { resolved = type.clone (); }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -975,6 +980,8 @@ class UintCastRules : public BaseCastRules\n \n   void visit (ISizeType &type) override { resolved = type.clone (); }\n \n+  void visit (PointerType &type) override { resolved = type.clone (); }\n+\n   void visit (CharType &type) override\n   {\n     // error[E0604]: only `u8` can be cast as `char`, not `i32`"}, {"sha": "f5f9e5ff08d329a6e4c92a5d5273d7df3446835e", "filename": "gcc/testsuite/rust/compile/issue-1226.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e65c14bef940fa2f7dff4f407178af21488b76e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1226.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e65c14bef940fa2f7dff4f407178af21488b76e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1226.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1226.rs?ref=2e65c14bef940fa2f7dff4f407178af21488b76e", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options \"-w\" }\n+const TEST: *mut u8 = 123 as *mut u8;\n+\n+fn test() {\n+    let a = TEST;\n+}"}]}