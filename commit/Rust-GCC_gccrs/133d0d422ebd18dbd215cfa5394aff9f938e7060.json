{"sha": "133d0d422ebd18dbd215cfa5394aff9f938e7060", "node_id": "C_kwDOANBUbNoAKDEzM2QwZDQyMmViZDE4ZGJkMjE1Y2ZhNTM5NGFmZjlmOTM4ZTcwNjA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-28T11:05:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-28T11:14:45Z"}, "message": "fortran, libgfortran: Avoid using libquadmath for glibc 2.26+\n\nAs mentioned by Joseph in PR105101, glibc 2.26 or later has on x86\n(both -m32/-m64), powerpc64le, ia64 and mips support for\n*f128 math/complex APIs plus strtof128 and strfromf128, and these APIs allow\nus to avoid libquadmath for Fortran purposes on these architectures,\nreplace *q math/complex APIs, strtof128 instead of strtoflt128 and,\nwhile strfromf128 unfortunately isn't a perfect replacement to\nquadmath_snprintf, it can be made to work.\n\nThe advantage of this is that when configured against such glibcs\n(2.26 is now almost 5 years old), we can avoid linking against an extra shared\nlibrary and the math support in glibc is maintained better than libquadmath.\n\nWe need both a compiler change (so that for glibc 2.26+ it uses *f128 APIs\ninstead of *q) and library change.\n\nThe above mentioned problem with strfromf128 is that the strfrom* functions\nare severely restricted versions of snprintf.  In libgfortran, we handle\n!isfinite differently and just use snprintf/quadmath_snprintf for\n%+-#.*{L,Q}{f,e} printing.\nstrfrom* doesn't allow +, -, # modifiers and it only supports .34 or\nsimilar precision, not .* .  The L/Q etc. letters are omitted.\nThe + is there to force + sign at the start if it is positive.\nWorkaround in the patch is to add the + at the start manually for\n!signbit (val).\nThe - (left alignment instead of right) I don't understand why we need it,\nwhen minimum field width isn't specified (for strfrom* can't be specified),\nno padding is ever added anywhere I believe.\nThe # is to force adding . - workaround is to search for first . or e or '\\0'\ncharacter, if it is '\\0', just append ., if it is e, insert . before e and\nmemmove the rest (which is just a few bytes, e, +/- and at most a few digits)\none byte later.\nThe .* case is handled by creating the format string for strfrom* by\nsnprintf into a temporary buffer.\n\nAs requested, this patch also switches from using __float128 type in\nlibgfortran to _Float128 which is equivalent on all arches that support\n__float128.\n\nThe change is done in a backwards compatible change, when GCC is configured\nagainst glibc 2.26 or newer, libgfortran.so.5 itself doesn't link against\n-lquadmath nor uses any libquadmath APIs, libgfortran.a doesn't use any\nlibquadmath APIs either.  User programs and libraries when being linked\nby gfortran driver are linked against -lgfortran and -lquadmath, but\nthe latter only in the --as-needed linker mode, which means it needs\nto be around during linking and will be linked in if there are any\ncalls to math/complex functions with real(kind=16) or complex(kind=16)\nin compilation units compiled by older versions of gcc, but if either\nuser code doesn't call those math/complex functions for the largest\nsupported kind, or the code is recompiled by gcc with this change in,\nlibquadmath won't be linked in.\n\n2022-06-28  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/fortran/\n\t* gfortran.h (gfc_real_info): Add use_iec_60559 bitfield.\n\t* trans-types.h (gfc_real16_use_iec_60559): Declare.\n\t* trans-types.cc (gfc_real16_use_iec_60559): Define.\n\t(gfc_init_kinds): When building powerpc64le-linux libgfortran\n\ton glibc 2.26 to 2.31, set gfc_real16_use_iec_60559 and\n\tuse_iec_60559.\n\t(gfc_build_real_type): Set gfc_real16_use_iec_60559 and use_iec_60559\n\ton glibc 2.26 or later.\n\t* trans-intrinsic.cc (gfc_build_intrinsic_lib_fndecls): Adjust\n\tcomment.  Handle gfc_real16_use_iec_60559.\n\t(gfc_get_intrinsic_lib_fndecl): Handle use_iec_60559.\nlibgfortran/\n\t* configure.ac: Check for strtof128 and strfromf128.\n\tCheck for math and complex *f128 functions.  Set\n\thave_iec_60559_libc_support to yes if *f128 support is around, for\n\t--enable-libquadmath-support default to \"default\" rather than yes if\n\thave_iec_60559_libc_support is yes.\n\t* acinclude.m4 (LIBGFOR_CHECK_FLOAT128): Test\n\t_Float128/_Complex _Float128 rather than __float128 and\n\t_Complex float __attribute__((mode(TC))).  If libquadmath support\n\tis defaulted and have_iec_60559_libc_support is yes, define and subst\n\tUSE_IEC_60559.  Remove unused LIBGFOR_BUILD_QUAD conditional.\n\t* Makefile.am (kinds.h): Pass @USE_IEC_60559@ as an extra\n\tmk-kinds-h.sh argument.\n\t* mk-kinds-h.sh: Accept 4th use_iec_60559 argument.  Use\n\t_Float128/_Complex _Float128 types instead of __float128 and\n\t_Complex float __attribute__((mode(TC))), and if use_iec_60559 is yes,\n\tuse f128 suffix instead of q and define GFC_REAL_16_USE_IEC_60559.\n\t* kinds-override.h: Use _Float128/_Complex _Float128 types instead of\n\t__float128 and _Complex float __attribute__((mode(TC))), if\n\tUSE_IEC_60559 is defined, use f128 suffixes instead of q and\n\tdefine GFC_REAL_17_USE_IEC_60559.\n\t* libgfortran.h: Don't include quadmath_weak.h if USE_IEC_60559 is\n\tdefined.\n\t(GFC_REAL_16_INFINITY, GFC_REAL_16_QUIET_NAN): Define\n\tfor GFC_REAL_16_USE_IEC_60559 differently.\n\t* caf/single.c (convert_type): Use _Float128/_Complex _Float128\n\tinstead of __float128 and _Complex float __attribute__((mode(TC))).\n\tFor HAVE_GFC_REAL_10 when HAVE_GFC_REAL_16 isn't defined use\n\t_Complex long double instead of long double.\n\t* ieee/issignaling_fallback.h (ieee854_float128_shape_type): Use\n\t_Float128 instead of __float128.\n\t(__issignalingf128): Change argument type to _Float128.\n\t(issignaling): Use _Float128 instead of __float128 in _Generic.\n\t* intrinsics/cshift0.c (cshift0): Use _Float128 instead of __float128\n\tin a comment.  Fix a comment typo, logn double -> long double.\n\t* intrinsics/erfc_scaled.c (_THRESH, _M_2_SQRTPI, _INF, _ERFC, _EXP):\n\tUse different definitions if GFC_REAL_16_USE_IEC_60559.\n\t(_THRESH, _M_2_SQRTPI): Use GFC_REAL_17_LITERAL macro.\n\t(_ERFC, _EXP): Use different definitions if GFC_REAL_17_USE_IEC_60559.\n\t* intrinsics/spread_generic.c (spread, spread_scalar): Use _Float128\n\tinstead of __float128 in a comment.  Fix a comment typo,\n\tlogn double -> long double.\n\t* intrinsics/trigd.c (ENABLE_SIND, ENABLE_COSD, ENABLE_TAND): Handle\n\tGFC_REAL_16_USE_IEC_60559.\n\t* intrinsics/pack_generic.c (pack): Use _Float128 instead of\n\t__float128 in a comment.  Fix a comment typo, logn double ->\n\tlong double.\n\t* intrinsics/unpack_generic.c (unpack1, unpack0): Likewise.\n\t* runtime/in_pack_generic.c (internal_pack): Likewise.\n\t* runtime/in_unpack_generic.c (internal_unpack): Likewise.\n\t* io/read.c (convert_real, convert_infnan): Handle\n\tGFC_REAL_16_USE_IEC_60559 and GFC_REAL_17_USE_IEC_60559.\n\t* io/transfer128.c (tmp1, tmp2): Don't define if libquadmath\n\tisn't needed.\n\t* io/write_float.def (gfor_strfromf128): New function.\n\t(DTOA2Q, FDTOA2Q): Define differently if\n\tGFC_REAL_16_USE_IEC_60559 or GFC_REAL_17_USE_IEC_60559.\n\t* m4/mtype.m4: Use different suffix if GFC_REAL_16_USE_IEC_60559\n\tor GFC_REAL_17_USE_IEC_60559.\n\t* config.h.in: Regenerated.\n\t* configure: Regenerated.\n\t* Makefile.in: Regenerated.\n\t* generated/bessel_r16.c: Regenerated.\n\t* generated/bessel_r17.c: Regenerated.\n\t* generated/norm2_r16.c: Regenerated.\n\t* generated/norm2_r17.c: Regenerated.", "tree": {"sha": "61960a3bd1b5217720216943ef30f5065d944b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61960a3bd1b5217720216943ef30f5065d944b5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/133d0d422ebd18dbd215cfa5394aff9f938e7060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/133d0d422ebd18dbd215cfa5394aff9f938e7060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/133d0d422ebd18dbd215cfa5394aff9f938e7060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/133d0d422ebd18dbd215cfa5394aff9f938e7060/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8354d0abeb7646e109b2fb982afbc253644b0925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8354d0abeb7646e109b2fb982afbc253644b0925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8354d0abeb7646e109b2fb982afbc253644b0925"}], "stats": {"total": 4013, "additions": 3728, "deletions": 285}, "files": [{"sha": "463d9692236fa6f615708997e99326440ba5a218", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -2665,6 +2665,9 @@ typedef struct\n   unsigned int c_double : 1;\n   unsigned int c_long_double : 1;\n   unsigned int c_float128 : 1;\n+  /* True if for _Float128 C2X IEC 60559 *f128 APIs should be used\n+     instead of libquadmath *q APIs.  */\n+  unsigned int use_iec_60559 : 1;\n }\n gfc_real_info;\n "}, {"sha": "9d9127819a1a511927667ce6f3c338eb39ff3041", "filename": "gcc/fortran/trans-intrinsic.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/gcc%2Ffortran%2Ftrans-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/gcc%2Ffortran%2Ftrans-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.cc?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -692,7 +692,7 @@ gfc_build_intrinsic_lib_fndecls (void)\n   {\n     /* If we have soft-float types, we create the decls for their\n        C99-like library functions.  For now, we only handle _Float128\n-       q-suffixed functions.  */\n+       q-suffixed or IEC 60559 f128-suffixed functions.  */\n \n     tree type, complex_type, func_1, func_2, func_cabs, func_frexp;\n     tree func_iround, func_lround, func_llround, func_scalbn, func_cpow;\n@@ -739,7 +739,10 @@ gfc_build_intrinsic_lib_fndecls (void)\n        builtin_decl_for_float_type(). The others are all constructed by\n        gfc_get_intrinsic_lib_fndecl().  */\n #define OTHER_BUILTIN(ID, NAME, TYPE, CONST) \\\n-  quad_decls[BUILT_IN_ ## ID] = define_quad_builtin (NAME \"q\", func_ ## TYPE, CONST);\n+    quad_decls[BUILT_IN_ ## ID]\t\t\t\t\t\t\\\n+      = define_quad_builtin (gfc_real16_use_iec_60559\t\t\t\\\n+\t\t\t     ? NAME \"f128\" : NAME \"q\", func_ ## TYPE,\t\\\n+\t\t\t     CONST);\n \n #include \"mathbuiltins.def\"\n \n@@ -751,8 +754,9 @@ gfc_build_intrinsic_lib_fndecls (void)\n     /* There is one built-in we defined manually, because it gets called\n        with builtin_decl_for_precision() or builtin_decl_for_float_type()\n        even though it is not an OTHER_BUILTIN: it is SQRT.  */\n-    quad_decls[BUILT_IN_SQRT] = define_quad_builtin (\"sqrtq\", func_1, true);\n-\n+    quad_decls[BUILT_IN_SQRT]\n+      = define_quad_builtin (gfc_real16_use_iec_60559\n+\t\t\t     ? \"sqrtf128\" : \"sqrtq\", func_1, true);\n   }\n \n   /* Add GCC builtin functions.  */\n@@ -875,7 +879,8 @@ gfc_get_intrinsic_lib_fndecl (gfc_intrinsic_map_t * m, gfc_expr * expr)\n \t\t  ts->type == BT_COMPLEX ? \"c\" : \"\", m->name, \"l\");\n       else if (gfc_real_kinds[n].c_float128)\n \tsnprintf (name, sizeof (name), \"%s%s%s\",\n-\t\t  ts->type == BT_COMPLEX ? \"c\" : \"\", m->name, \"q\");\n+\t\t  ts->type == BT_COMPLEX ? \"c\" : \"\", m->name,\n+\t\t  gfc_real_kinds[n].use_iec_60559 ? \"f128\" : \"q\");\n       else\n \tgcc_unreachable ();\n     }"}, {"sha": "0ea7c74a6f1c4e59604f5db9c951a68e0f3b2a3f", "filename": "gcc/fortran/trans-types.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/gcc%2Ffortran%2Ftrans-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/gcc%2Ffortran%2Ftrans-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.cc?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -72,6 +72,7 @@ tree gfc_float128_type_node = NULL_TREE;\n tree gfc_complex_float128_type_node = NULL_TREE;\n \n bool gfc_real16_is_float128 = false;\n+bool gfc_real16_use_iec_60559 = false;\n \n static GTY(()) tree gfc_desc_dim_type;\n static GTY(()) tree gfc_max_array_element_size;\n@@ -522,6 +523,11 @@ gfc_init_kinds (void)\n \t\t&& (TARGET_GLIBC_MAJOR < 2\n \t\t    || (TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR < 32)))\n \t      {\n+\t\tif (TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 26)\n+\t\t  {\n+\t\t    gfc_real16_use_iec_60559 = true;\n+\t\t    gfc_real_kinds[i].use_iec_60559 = 1;\n+\t\t  }\n \t\tgfc_real16_is_float128 = true;\n \t\tgfc_real_kinds[i].c_float128 = 1;\n \t      }\n@@ -878,6 +884,12 @@ gfc_build_real_type (gfc_real_info *info)\n       /* TODO: see PR101835.  */\n       info->c_float128 = 1;\n       gfc_real16_is_float128 = true;\n+      if (TARGET_GLIBC_MAJOR > 2\n+\t  || (TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 26))\n+\t{\n+\t  info->use_iec_60559 = 1;\n+\t  gfc_real16_use_iec_60559 = true;\n+\t}\n     }\n \n   if (TYPE_PRECISION (float_type_node) == mode_precision)"}, {"sha": "6a360de69f6a0f7a011805fec0f930f056484b6c", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -58,6 +58,10 @@ extern GTY(()) tree gfc_charlen_type_node;\n    and _Float128.  */\n extern bool gfc_real16_is_float128;\n \n+/* True if IEC 60559 *f128 APIs should be used for _Float128 rather than\n+   libquadmath *q APIs.  */\n+extern bool gfc_real16_use_iec_60559;\n+\n enum gfc_packed {\n   PACKED_NO = 0,\n   PACKED_PARTIAL,"}, {"sha": "454ad12e701efdceb95637fc8917481de6cfb0de", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -1167,7 +1167,9 @@ I_M4_DEPS8=$(I_M4_DEPS) m4/ifindloc1.m4\n I_M4_DEPS9=$(I_M4_DEPS) m4/ifindloc2.m4\n \n kinds.h: $(srcdir)/mk-kinds-h.sh\n-\t$(SHELL) $(srcdir)/mk-kinds-h.sh '@LIBGOMP_CHECKED_INT_KINDS@' '@LIBGOMP_CHECKED_REAL_KINDS@' '$(FCCOMPILE)' > $@ || rm $@\n+\t$(SHELL) $(srcdir)/mk-kinds-h.sh '@LIBGOMP_CHECKED_INT_KINDS@' \\\n+\t\t\t\t\t '@LIBGOMP_CHECKED_REAL_KINDS@' \\\n+\t\t\t\t\t '$(FCCOMPILE)' '@USE_IEC_60559@' > $@ || rm $@\n \n kinds.inc: kinds.h $(srcdir)/kinds-override.h\n \tcat kinds.h $(srcdir)/kinds-override.h | grep '^#' | grep -v include > $@"}, {"sha": "23df0761096d332e6620865e935505d29c4ba8e7", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -664,6 +664,7 @@ SED = @SED@\n SET_MAKE = @SET_MAKE@\n SHELL = @SHELL@\n STRIP = @STRIP@\n+USE_IEC_60559 = @USE_IEC_60559@\n VERSION = @VERSION@\n abs_builddir = @abs_builddir@\n abs_srcdir = @abs_srcdir@\n@@ -7674,7 +7675,9 @@ ieee_arithmetic.mod: ieee_arithmetic.lo\n @onestep_TRUE@\t$(LTCOMPILE) -c -o $@ $^ -combine\n \n kinds.h: $(srcdir)/mk-kinds-h.sh\n-\t$(SHELL) $(srcdir)/mk-kinds-h.sh '@LIBGOMP_CHECKED_INT_KINDS@' '@LIBGOMP_CHECKED_REAL_KINDS@' '$(FCCOMPILE)' > $@ || rm $@\n+\t$(SHELL) $(srcdir)/mk-kinds-h.sh '@LIBGOMP_CHECKED_INT_KINDS@' \\\n+\t\t\t\t\t '@LIBGOMP_CHECKED_REAL_KINDS@' \\\n+\t\t\t\t\t '$(FCCOMPILE)' '@USE_IEC_60559@' > $@ || rm $@\n \n kinds.inc: kinds.h $(srcdir)/kinds-override.h\n \tcat kinds.h $(srcdir)/kinds-override.h | grep '^#' | grep -v include > $@"}, {"sha": "dbf687e5cc2b8dcc885f99281989ee1d6d227205", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -264,31 +264,35 @@ __mingw_snprintf (NULL, 0, \"%d\\n\", 1);\n dnl Check whether we have a __float128 type\n AC_DEFUN([LIBGFOR_CHECK_FLOAT128], [\n   LIBQUADSPEC=\n+  LIBQUADLIB=\n+  LIBQUADLIB_DEP=\n+  LIBQUADINCLUDE=\n+  USE_IEC_60559=no\n \n   if test \"x$enable_libquadmath_support\" != xno; then\n \n-  AC_CACHE_CHECK([whether we have a usable __float128 type],\n+  AC_CACHE_CHECK([whether we have a usable _Float128 type],\n                  libgfor_cv_have_float128, [\n    GCC_TRY_COMPILE_OR_LINK([\n-    typedef _Complex float __attribute__((mode(TC))) __complex128;\n-\n-    __float128 foo (__float128 x)\n+    _Float128 foo (_Float128 x)\n     {\n \n-     __complex128 z1, z2;\n+     _Complex _Float128 z1, z2;\n \n      z1 = x;\n-     z2 = x / 7.Q;\n+     z2 = x / 7.F128;\n      z2 /= z1;\n \n-     return (__float128) z2;\n+     return (_Float128) z2;\n     }\n \n-    __float128 bar (__float128 x)\n+    _Float128 bar (_Float128 x)\n     {\n-      return x * __builtin_huge_valq ();\n+      return x * __builtin_huge_valf128 ();\n     }\n   ],[\n+    foo (1.2F128);\n+    bar (1.2F128);\n     foo (1.2Q);\n     bar (1.2Q);\n   ],[\n@@ -297,8 +301,16 @@ AC_DEFUN([LIBGFOR_CHECK_FLOAT128], [\n     libgfor_cv_have_float128=no\n ])])\n \n+    if test \"x$have_iec_60559_libc_support$enable_libquadmath_support$libgfor_cv_have_float128\" = xyesdefaultyes; then\n+      USE_IEC_60559=yes\n+    fi\n+\n+\n   if test \"x$libgfor_cv_have_float128\" = xyes; then\n-    AC_DEFINE(HAVE_FLOAT128, 1, [Define if have a usable __float128 type.])\n+    if test \"x$USE_IEC_60559\" = xyes; then\n+      AC_DEFINE(USE_IEC_60559, 1, [Define if IEC 60559 *f128 APIs should be used for _Float128.])\n+    fi\n+    AC_DEFINE(HAVE_FLOAT128, 1, [Define if have a usable _Float128 type.])\n \n     dnl Check whether -Wl,--as-needed resp. -Wl,-zignore is supported\n     dnl \n@@ -339,36 +351,38 @@ AC_DEFUN([LIBGFOR_CHECK_FLOAT128], [\n     ])\n \n     dnl For static libgfortran linkage, depend on libquadmath only if needed.\n+    dnl If using *f128 APIs from libc/libm, depend on libquadmath only if needed\n+    dnl even for dynamic libgfortran linkage, and don't link libgfortran against\n+    dnl -lquadmath.\n     if test \"x$libgfor_cv_have_as_needed\" = xyes; then\n-      LIBQUADSPEC=\"%{static-libgfortran:$libgfor_cv_as_needed_option} -lquadmath %{static-libgfortran:$libgfor_cv_no_as_needed_option}\"\n+      if test \"x$USE_IEC_60559\" = xyes; then\n+\tLIBQUADSPEC=\"$libgfor_cv_as_needed_option -lquadmath $libgfor_cv_no_as_needed_option\"\n+      else\n+\tLIBQUADSPEC=\"%{static-libgfortran:$libgfor_cv_as_needed_option} -lquadmath %{static-libgfortran:$libgfor_cv_no_as_needed_option}\"\n+      fi\n     else\n       LIBQUADSPEC=\"-lquadmath\"\n     fi\n-    if test -f ../libquadmath/libquadmath.la; then\n-      LIBQUADLIB=../libquadmath/libquadmath.la\n-      LIBQUADLIB_DEP=../libquadmath/libquadmath.la\n-      LIBQUADINCLUDE='-I$(srcdir)/../libquadmath'\n-    else\n-      LIBQUADLIB=\"-lquadmath\"\n-      LIBQUADLIB_DEP=\n-      LIBQUADINCLUDE=\n+    if test \"x$USE_IEC_60559\" != xyes; then\n+      if test -f ../libquadmath/libquadmath.la; then\n+\tLIBQUADLIB=../libquadmath/libquadmath.la\n+\tLIBQUADLIB_DEP=../libquadmath/libquadmath.la\n+\tLIBQUADINCLUDE='-I$(srcdir)/../libquadmath'\n+      else\n+\tLIBQUADLIB=\"-lquadmath\"\n+      fi\n     fi\n-  fi\n   else\n-    # for --disable-quadmath\n-    LIBQUADLIB=\n-    LIBQUADLIB_DEP=\n-    LIBQUADINCLUDE=\n+    USE_IEC_60559=no\n+  fi\n   fi\n \n   dnl For the spec file\n   AC_SUBST(LIBQUADSPEC)\n   AC_SUBST(LIBQUADLIB)\n   AC_SUBST(LIBQUADLIB_DEP)\n   AC_SUBST(LIBQUADINCLUDE)\n-\n-  dnl We need a conditional for the Makefile\n-  AM_CONDITIONAL(LIBGFOR_BUILD_QUAD, [test \"x$libgfor_cv_have_float128\" = xyes])\n+  AC_SUBST(USE_IEC_60559)\n ])\n \n "}, {"sha": "24a391fcfdde9fe545b2b13da26c4dc3eed7fa70", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -478,12 +478,11 @@ convert_type (void *dst, int dst_type, int dst_kind, void *src, int src_type,\n   typedef long double real128t;\n   typedef _Complex long double complex128t;\n #elif defined(HAVE_GFC_REAL_16)\n-  typedef _Complex float __attribute__((mode(TC))) __complex128;\n-  typedef __float128 real128t;\n-  typedef __complex128 complex128t;\n+  typedef _Float128 real128t;\n+  typedef _Complex _Float128 complex128t;\n #elif defined(HAVE_GFC_REAL_10)\n   typedef long double real128t;\n-  typedef long double complex128t;\n+  typedef _Complex long double complex128t;\n #else\n   typedef double real128t;\n   typedef _Complex double complex128t;"}, {"sha": "c403934661b2fcbd5ecce5a272440df11e16642c", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 196, "deletions": 1, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -12,12 +12,18 @@\n /* Define to 1 if you have the `acosf' function. */\n #undef HAVE_ACOSF\n \n+/* Define to 1 if you have the `acosf128' function. */\n+#undef HAVE_ACOSF128\n+\n /* Define to 1 if you have the `acosh' function. */\n #undef HAVE_ACOSH\n \n /* Define to 1 if you have the `acoshf' function. */\n #undef HAVE_ACOSHF\n \n+/* Define to 1 if you have the `acoshf128' function. */\n+#undef HAVE_ACOSHF128\n+\n /* Define to 1 if you have the `acoshl' function. */\n #undef HAVE_ACOSHL\n \n@@ -33,12 +39,18 @@\n /* Define to 1 if you have the `asinf' function. */\n #undef HAVE_ASINF\n \n+/* Define to 1 if you have the `asinf128' function. */\n+#undef HAVE_ASINF128\n+\n /* Define to 1 if you have the `asinh' function. */\n #undef HAVE_ASINH\n \n /* Define to 1 if you have the `asinhf' function. */\n #undef HAVE_ASINHF\n \n+/* Define to 1 if you have the `asinhf128' function. */\n+#undef HAVE_ASINHF128\n+\n /* Define to 1 if you have the `asinhl' function. */\n #undef HAVE_ASINHL\n \n@@ -54,18 +66,27 @@\n /* Define to 1 if you have the `atan2f' function. */\n #undef HAVE_ATAN2F\n \n+/* Define to 1 if you have the `atan2f128' function. */\n+#undef HAVE_ATAN2F128\n+\n /* Define to 1 if you have the `atan2l' function. */\n #undef HAVE_ATAN2L\n \n /* Define to 1 if you have the `atanf' function. */\n #undef HAVE_ATANF\n \n+/* Define to 1 if you have the `atanf128' function. */\n+#undef HAVE_ATANF128\n+\n /* Define to 1 if you have the `atanh' function. */\n #undef HAVE_ATANH\n \n /* Define to 1 if you have the `atanhf' function. */\n #undef HAVE_ATANHF\n \n+/* Define to 1 if you have the `atanhf128' function. */\n+#undef HAVE_ATANHF128\n+\n /* Define to 1 if you have the `atanhl' function. */\n #undef HAVE_ATANHL\n \n@@ -99,6 +120,9 @@\n /* Define to 1 if you have the `cabsf' function. */\n #undef HAVE_CABSF\n \n+/* Define to 1 if you have the `cabsf128' function. */\n+#undef HAVE_CABSF128\n+\n /* Define to 1 if you have the `cabsl' function. */\n #undef HAVE_CABSL\n \n@@ -108,12 +132,18 @@\n /* Define to 1 if you have the `cacosf' function. */\n #undef HAVE_CACOSF\n \n+/* Define to 1 if you have the `cacosf128' function. */\n+#undef HAVE_CACOSF128\n+\n /* Define to 1 if you have the `cacosh' function. */\n #undef HAVE_CACOSH\n \n /* Define to 1 if you have the `cacoshf' function. */\n #undef HAVE_CACOSHF\n \n+/* Define to 1 if you have the `cacoshf128' function. */\n+#undef HAVE_CACOSHF128\n+\n /* Define to 1 if you have the `cacoshl' function. */\n #undef HAVE_CACOSHL\n \n@@ -126,6 +156,9 @@\n /* Define to 1 if you have the `cargf' function. */\n #undef HAVE_CARGF\n \n+/* Define to 1 if you have the `cargf128' function. */\n+#undef HAVE_CARGF128\n+\n /* Define to 1 if you have the `cargl' function. */\n #undef HAVE_CARGL\n \n@@ -135,12 +168,18 @@\n /* Define to 1 if you have the `casinf' function. */\n #undef HAVE_CASINF\n \n+/* Define to 1 if you have the `casinf128' function. */\n+#undef HAVE_CASINF128\n+\n /* Define to 1 if you have the `casinh' function. */\n #undef HAVE_CASINH\n \n /* Define to 1 if you have the `casinhf' function. */\n #undef HAVE_CASINHF\n \n+/* Define to 1 if you have the `casinhf128' function. */\n+#undef HAVE_CASINHF128\n+\n /* Define to 1 if you have the `casinhl' function. */\n #undef HAVE_CASINHL\n \n@@ -153,12 +192,18 @@\n /* Define to 1 if you have the `catanf' function. */\n #undef HAVE_CATANF\n \n+/* Define to 1 if you have the `catanf128' function. */\n+#undef HAVE_CATANF128\n+\n /* Define to 1 if you have the `catanh' function. */\n #undef HAVE_CATANH\n \n /* Define to 1 if you have the `catanhf' function. */\n #undef HAVE_CATANHF\n \n+/* Define to 1 if you have the `catanhf128' function. */\n+#undef HAVE_CATANHF128\n+\n /* Define to 1 if you have the `catanhl' function. */\n #undef HAVE_CATANHL\n \n@@ -171,12 +216,18 @@\n /* Define to 1 if you have the `ccosf' function. */\n #undef HAVE_CCOSF\n \n+/* Define to 1 if you have the `ccosf128' function. */\n+#undef HAVE_CCOSF128\n+\n /* Define to 1 if you have the `ccosh' function. */\n #undef HAVE_CCOSH\n \n /* Define to 1 if you have the `ccoshf' function. */\n #undef HAVE_CCOSHF\n \n+/* Define to 1 if you have the `ccoshf128' function. */\n+#undef HAVE_CCOSHF128\n+\n /* Define to 1 if you have the `ccoshl' function. */\n #undef HAVE_CCOSHL\n \n@@ -189,6 +240,9 @@\n /* Define to 1 if you have the `ceilf' function. */\n #undef HAVE_CEILF\n \n+/* Define to 1 if you have the `ceilf128' function. */\n+#undef HAVE_CEILF128\n+\n /* Define to 1 if you have the `ceill' function. */\n #undef HAVE_CEILL\n \n@@ -198,6 +252,9 @@\n /* Define to 1 if you have the `cexpf' function. */\n #undef HAVE_CEXPF\n \n+/* Define to 1 if you have the `cexpf128' function. */\n+#undef HAVE_CEXPF128\n+\n /* Define to 1 if you have the `cexpl' function. */\n #undef HAVE_CEXPL\n \n@@ -222,12 +279,18 @@\n /* Define to 1 if you have the `clog10f' function. */\n #undef HAVE_CLOG10F\n \n+/* Define to 1 if you have the `clog10f128' function. */\n+#undef HAVE_CLOG10F128\n+\n /* Define to 1 if you have the `clog10l' function. */\n #undef HAVE_CLOG10L\n \n /* Define to 1 if you have the `clogf' function. */\n #undef HAVE_CLOGF\n \n+/* Define to 1 if you have the `clogf128' function. */\n+#undef HAVE_CLOGF128\n+\n /* Define to 1 if you have the `clogl' function. */\n #undef HAVE_CLOGL\n \n@@ -240,6 +303,9 @@\n /* Define to 1 if you have the `copysignf' function. */\n #undef HAVE_COPYSIGNF\n \n+/* Define to 1 if you have the `copysignf128' function. */\n+#undef HAVE_COPYSIGNF128\n+\n /* Define to 1 if you have the `copysignl' function. */\n #undef HAVE_COPYSIGNL\n \n@@ -249,12 +315,18 @@\n /* Define to 1 if you have the `cosf' function. */\n #undef HAVE_COSF\n \n+/* Define to 1 if you have the `cosf128' function. */\n+#undef HAVE_COSF128\n+\n /* Define to 1 if you have the `cosh' function. */\n #undef HAVE_COSH\n \n /* Define to 1 if you have the `coshf' function. */\n #undef HAVE_COSHF\n \n+/* Define to 1 if you have the `coshf128' function. */\n+#undef HAVE_COSHF128\n+\n /* Define to 1 if you have the `coshl' function. */\n #undef HAVE_COSHL\n \n@@ -267,6 +339,9 @@\n /* Define to 1 if you have the `cpowf' function. */\n #undef HAVE_CPOWF\n \n+/* Define to 1 if you have the `cpowf128' function. */\n+#undef HAVE_CPOWF128\n+\n /* Define to 1 if you have the `cpowl' function. */\n #undef HAVE_CPOWL\n \n@@ -279,12 +354,18 @@\n /* Define to 1 if you have the `csinf' function. */\n #undef HAVE_CSINF\n \n+/* Define to 1 if you have the `csinf128' function. */\n+#undef HAVE_CSINF128\n+\n /* Define to 1 if you have the `csinh' function. */\n #undef HAVE_CSINH\n \n /* Define to 1 if you have the `csinhf' function. */\n #undef HAVE_CSINHF\n \n+/* Define to 1 if you have the `csinhf128' function. */\n+#undef HAVE_CSINHF128\n+\n /* Define to 1 if you have the `csinhl' function. */\n #undef HAVE_CSINHL\n \n@@ -297,6 +378,9 @@\n /* Define to 1 if you have the `csqrtf' function. */\n #undef HAVE_CSQRTF\n \n+/* Define to 1 if you have the `csqrtf128' function. */\n+#undef HAVE_CSQRTF128\n+\n /* Define to 1 if you have the `csqrtl' function. */\n #undef HAVE_CSQRTL\n \n@@ -306,12 +390,18 @@\n /* Define to 1 if you have the `ctanf' function. */\n #undef HAVE_CTANF\n \n+/* Define to 1 if you have the `ctanf128' function. */\n+#undef HAVE_CTANF128\n+\n /* Define to 1 if you have the `ctanh' function. */\n #undef HAVE_CTANH\n \n /* Define to 1 if you have the `ctanhf' function. */\n #undef HAVE_CTANHF\n \n+/* Define to 1 if you have the `ctanhf128' function. */\n+#undef HAVE_CTANHF128\n+\n /* Define to 1 if you have the `ctanhl' function. */\n #undef HAVE_CTANHL\n \n@@ -333,18 +423,27 @@\n /* Define to 1 if you have the `erfcf' function. */\n #undef HAVE_ERFCF\n \n+/* Define to 1 if you have the `erfcf128' function. */\n+#undef HAVE_ERFCF128\n+\n /* Define to 1 if you have the `erfcl' function. */\n #undef HAVE_ERFCL\n \n /* Define to 1 if you have the `erff' function. */\n #undef HAVE_ERFF\n \n+/* Define to 1 if you have the `erff128' function. */\n+#undef HAVE_ERFF128\n+\n /* Define to 1 if you have the `exp' function. */\n #undef HAVE_EXP\n \n /* Define to 1 if you have the `expf' function. */\n #undef HAVE_EXPF\n \n+/* Define to 1 if you have the `expf128' function. */\n+#undef HAVE_EXPF128\n+\n /* Define to 1 if you have the `expl' function. */\n #undef HAVE_EXPL\n \n@@ -354,6 +453,9 @@\n /* Define to 1 if you have the `fabsf' function. */\n #undef HAVE_FABSF\n \n+/* Define to 1 if you have the `fabsf128' function. */\n+#undef HAVE_FABSF128\n+\n /* Define to 1 if you have the `fabsl' function. */\n #undef HAVE_FABSL\n \n@@ -366,7 +468,7 @@\n /* Define to 1 if you have the <fenv.h> header file. */\n #undef HAVE_FENV_H\n \n-/* Define if have a usable __float128 type. */\n+/* Define if have a usable _Float128 type. */\n #undef HAVE_FLOAT128\n \n /* Define to 1 if you have the <floatingpoint.h> header file. */\n@@ -378,6 +480,9 @@\n /* Define to 1 if you have the `floorf' function. */\n #undef HAVE_FLOORF\n \n+/* Define to 1 if you have the `floorf128' function. */\n+#undef HAVE_FLOORF128\n+\n /* Define to 1 if you have the `floorl' function. */\n #undef HAVE_FLOORL\n \n@@ -393,6 +498,9 @@\n /* Define to 1 if you have the `fmaf' function. */\n #undef HAVE_FMAF\n \n+/* Define to 1 if you have the `fmaf128' function. */\n+#undef HAVE_FMAF128\n+\n /* Define to 1 if you have the `fmal' function. */\n #undef HAVE_FMAL\n \n@@ -402,6 +510,9 @@\n /* Define to 1 if you have the `fmodf' function. */\n #undef HAVE_FMODF\n \n+/* Define to 1 if you have the `fmodf128' function. */\n+#undef HAVE_FMODF128\n+\n /* Define to 1 if you have the `fmodl' function. */\n #undef HAVE_FMODL\n \n@@ -450,6 +561,9 @@\n /* Define to 1 if you have the `frexpf' function. */\n #undef HAVE_FREXPF\n \n+/* Define to 1 if you have the `frexpf128' function. */\n+#undef HAVE_FREXPF128\n+\n /* Define to 1 if you have the `frexpl' function. */\n #undef HAVE_FREXPL\n \n@@ -507,6 +621,9 @@\n /* Define to 1 if you have the `hypotf' function. */\n #undef HAVE_HYPOTF\n \n+/* Define to 1 if you have the `hypotf128' function. */\n+#undef HAVE_HYPOTF128\n+\n /* Define to 1 if you have the `hypotl' function. */\n #undef HAVE_HYPOTL\n \n@@ -537,18 +654,27 @@\n /* Define to 1 if you have the `j0f' function. */\n #undef HAVE_J0F\n \n+/* Define to 1 if you have the `j0f128' function. */\n+#undef HAVE_J0F128\n+\n /* Define to 1 if you have the `j1' function. */\n #undef HAVE_J1\n \n /* Define to 1 if you have the `j1f' function. */\n #undef HAVE_J1F\n \n+/* Define to 1 if you have the `j1f128' function. */\n+#undef HAVE_J1F128\n+\n /* Define to 1 if you have the `jn' function. */\n #undef HAVE_JN\n \n /* Define to 1 if you have the `jnf' function. */\n #undef HAVE_JNF\n \n+/* Define to 1 if you have the `jnf128' function. */\n+#undef HAVE_JNF128\n+\n /* Define to 1 if you have the `jnl' function. */\n #undef HAVE_JNL\n \n@@ -561,6 +687,9 @@\n /* Define to 1 if you have the `ldexpf' function. */\n #undef HAVE_LDEXPF\n \n+/* Define to 1 if you have the `ldexpf128' function. */\n+#undef HAVE_LDEXPF128\n+\n /* Define to 1 if you have the `ldexpl' function. */\n #undef HAVE_LDEXPL\n \n@@ -570,6 +699,9 @@\n /* Define to 1 if you have the `lgammaf' function. */\n #undef HAVE_LGAMMAF\n \n+/* Define to 1 if you have the `lgammaf128' function. */\n+#undef HAVE_LGAMMAF128\n+\n /* Define to 1 if you have the `m' library (-lm). */\n #undef HAVE_LIBM\n \n@@ -582,6 +714,9 @@\n /* Define to 1 if you have the `llroundf' function. */\n #undef HAVE_LLROUNDF\n \n+/* Define to 1 if you have the `llroundf128' function. */\n+#undef HAVE_LLROUNDF128\n+\n /* Define to 1 if you have the `llroundl' function. */\n #undef HAVE_LLROUNDL\n \n@@ -597,12 +732,18 @@\n /* Define to 1 if you have the `log10f' function. */\n #undef HAVE_LOG10F\n \n+/* Define to 1 if you have the `log10f128' function. */\n+#undef HAVE_LOG10F128\n+\n /* Define to 1 if you have the `log10l' function. */\n #undef HAVE_LOG10L\n \n /* Define to 1 if you have the `logf' function. */\n #undef HAVE_LOGF\n \n+/* Define to 1 if you have the `logf128' function. */\n+#undef HAVE_LOGF128\n+\n /* Define to 1 if you have the `logl' function. */\n #undef HAVE_LOGL\n \n@@ -612,6 +753,9 @@\n /* Define to 1 if you have the `lroundf' function. */\n #undef HAVE_LROUNDF\n \n+/* Define to 1 if you have the `lroundf128' function. */\n+#undef HAVE_LROUNDF128\n+\n /* Define to 1 if you have the `lroundl' function. */\n #undef HAVE_LROUNDL\n \n@@ -642,6 +786,9 @@\n /* Define to 1 if you have the `nextafterf' function. */\n #undef HAVE_NEXTAFTERF\n \n+/* Define to 1 if you have the `nextafterf128' function. */\n+#undef HAVE_NEXTAFTERF128\n+\n /* Define to 1 if you have the `nextafterl' function. */\n #undef HAVE_NEXTAFTERL\n \n@@ -657,6 +804,9 @@\n /* Define to 1 if you have the `powf' function. */\n #undef HAVE_POWF\n \n+/* Define to 1 if you have the `powf128' function. */\n+#undef HAVE_POWF128\n+\n /* Define to 1 if the system has the type `ptrdiff_t'. */\n #undef HAVE_PTRDIFF_T\n \n@@ -672,6 +822,9 @@\n /* Define to 1 if you have the `roundf' function. */\n #undef HAVE_ROUNDF\n \n+/* Define to 1 if you have the `roundf128' function. */\n+#undef HAVE_ROUNDF128\n+\n /* Define to 1 if you have the `roundl' function. */\n #undef HAVE_ROUNDL\n \n@@ -681,6 +834,9 @@\n /* Define to 1 if you have the `scalbnf' function. */\n #undef HAVE_SCALBNF\n \n+/* Define to 1 if you have the `scalbnf128' function. */\n+#undef HAVE_SCALBNF128\n+\n /* Define to 1 if you have the `scalbnl' function. */\n #undef HAVE_SCALBNL\n \n@@ -699,12 +855,18 @@\n /* Define to 1 if you have the `sinf' function. */\n #undef HAVE_SINF\n \n+/* Define to 1 if you have the `sinf128' function. */\n+#undef HAVE_SINF128\n+\n /* Define to 1 if you have the `sinh' function. */\n #undef HAVE_SINH\n \n /* Define to 1 if you have the `sinhf' function. */\n #undef HAVE_SINHF\n \n+/* Define to 1 if you have the `sinhf128' function. */\n+#undef HAVE_SINHF128\n+\n /* Define to 1 if you have the `sinhl' function. */\n #undef HAVE_SINHL\n \n@@ -723,6 +885,9 @@\n /* Define to 1 if you have the `sqrtf' function. */\n #undef HAVE_SQRTF\n \n+/* Define to 1 if you have the `sqrtf128' function. */\n+#undef HAVE_SQRTF128\n+\n /* Define to 1 if you have the `sqrtl' function. */\n #undef HAVE_SQRTL\n \n@@ -744,6 +909,9 @@\n /* Define if strerror_r takes two arguments and is available in <string.h>. */\n #undef HAVE_STRERROR_R_2ARGS\n \n+/* Define to 1 if you have the `strfromf128' function. */\n+#undef HAVE_STRFROMF128\n+\n /* Define to 1 if you have the <strings.h> header file. */\n #undef HAVE_STRINGS_H\n \n@@ -759,6 +927,9 @@\n /* Define to 1 if you have the `strtof' function. */\n #undef HAVE_STRTOF\n \n+/* Define to 1 if you have the `strtof128' function. */\n+#undef HAVE_STRTOF128\n+\n /* Define to 1 if you have the `strtold' function. */\n #undef HAVE_STRTOLD\n \n@@ -804,12 +975,18 @@\n /* Define to 1 if you have the `tanf' function. */\n #undef HAVE_TANF\n \n+/* Define to 1 if you have the `tanf128' function. */\n+#undef HAVE_TANF128\n+\n /* Define to 1 if you have the `tanh' function. */\n #undef HAVE_TANH\n \n /* Define to 1 if you have the `tanhf' function. */\n #undef HAVE_TANHF\n \n+/* Define to 1 if you have the `tanhf128' function. */\n+#undef HAVE_TANHF128\n+\n /* Define to 1 if you have the `tanhl' function. */\n #undef HAVE_TANHL\n \n@@ -822,6 +999,9 @@\n /* Define to 1 if you have the `tgammaf' function. */\n #undef HAVE_TGAMMAF\n \n+/* Define to 1 if you have the `tgammaf128' function. */\n+#undef HAVE_TGAMMAF128\n+\n /* Define to 1 if you have the `times' function. */\n #undef HAVE_TIMES\n \n@@ -831,6 +1011,9 @@\n /* Define to 1 if you have the `truncf' function. */\n #undef HAVE_TRUNCF\n \n+/* Define to 1 if you have the `truncf128' function. */\n+#undef HAVE_TRUNCF128\n+\n /* Define to 1 if you have the `truncl' function. */\n #undef HAVE_TRUNCL\n \n@@ -876,18 +1059,27 @@\n /* Define to 1 if you have the `y0f' function. */\n #undef HAVE_Y0F\n \n+/* Define to 1 if you have the `y0f128' function. */\n+#undef HAVE_Y0F128\n+\n /* Define to 1 if you have the `y1' function. */\n #undef HAVE_Y1\n \n /* Define to 1 if you have the `y1f' function. */\n #undef HAVE_Y1F\n \n+/* Define to 1 if you have the `y1f128' function. */\n+#undef HAVE_Y1F128\n+\n /* Define to 1 if you have the `yn' function. */\n #undef HAVE_YN\n \n /* Define to 1 if you have the `ynf' function. */\n #undef HAVE_YNF\n \n+/* Define to 1 if you have the `ynf128' function. */\n+#undef HAVE_YNF128\n+\n /* Define to 1 if you have the `ynl' function. */\n #undef HAVE_YNL\n \n@@ -1006,6 +1198,9 @@\n /* Define to 1 if the target supports weakref */\n #undef SUPPORTS_WEAKREF\n \n+/* Define if IEC 60559 *f128 APIs should be used for _Float128. */\n+#undef USE_IEC_60559\n+\n /* Enable extensions on AIX 3, Interix.  */\n #ifndef _ALL_SOURCE\n # undef _ALL_SOURCE"}, {"sha": "c833591d844d687b2d64da146b928c8ededad8e2", "filename": "libgfortran/configure", "status": "modified", "additions": 3201, "deletions": 202, "changes": 3403, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060"}, {"sha": "07b9a48a19fb41bc9eea9c1ca1a2d7316237230e", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 80, "deletions": 3, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -356,7 +356,7 @@ else\n    getcwd localtime_r gmtime_r getpwuid_r ttyname_r clock_gettime \\\n    getgid getpid getuid geteuid umask getegid \\\n    secure_getenv __secure_getenv mkostemp strnlen strndup newlocale \\\n-   freelocale uselocale strerror_l)\n+   freelocale uselocale strerror_l strtof128 strfromf128)\n fi\n \n # Check strerror_r, cannot be above as versions with two and three arguments exist\n@@ -582,24 +582,101 @@ GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK2([copysignl], [long double])\n GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1([fabs], [double])\n GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1([fabsl], [long double])\n \n+GCC_CHECK_MATH_FUNC([acosf128])\n+GCC_CHECK_MATH_FUNC([acoshf128])\n+GCC_CHECK_MATH_FUNC([asinf128])\n+GCC_CHECK_MATH_FUNC([asinhf128])\n+GCC_CHECK_MATH_FUNC([atan2f128])\n+GCC_CHECK_MATH_FUNC([atanf128])\n+GCC_CHECK_MATH_FUNC([atanhf128])\n+GCC_CHECK_MATH_FUNC([cargf128])\n+GCC_CHECK_MATH_FUNC([ceilf128])\n+GCC_CHECK_MATH_FUNC([copysignf128])\n+GCC_CHECK_MATH_FUNC([cosf128])\n+GCC_CHECK_MATH_FUNC([ccosf128])\n+GCC_CHECK_MATH_FUNC([coshf128])\n+GCC_CHECK_MATH_FUNC([ccoshf128])\n+GCC_CHECK_MATH_FUNC([expf128])\n+GCC_CHECK_MATH_FUNC([cexpf128])\n+GCC_CHECK_MATH_FUNC([fabsf128])\n+GCC_CHECK_MATH_FUNC([cabsf128])\n+GCC_CHECK_MATH_FUNC([floorf128])\n+GCC_CHECK_MATH_FUNC([fmaf128])\n+GCC_CHECK_MATH_FUNC([fmodf128])\n+GCC_CHECK_MATH_FUNC([frexpf128])\n+GCC_CHECK_MATH_FUNC([hypotf128])\n+GCC_CHECK_MATH_FUNC([ldexpf128])\n+GCC_CHECK_MATH_FUNC([logf128])\n+GCC_CHECK_MATH_FUNC([clogf128])\n+GCC_CHECK_MATH_FUNC([log10f128])\n+GCC_CHECK_MATH_FUNC([clog10f128])\n+GCC_CHECK_MATH_FUNC([nextafterf128])\n+GCC_CHECK_MATH_FUNC([powf128])\n+GCC_CHECK_MATH_FUNC([cpowf128])\n+GCC_CHECK_MATH_FUNC([roundf128])\n+GCC_CHECK_MATH_FUNC([lroundf128])\n+GCC_CHECK_MATH_FUNC([llroundf128])\n+GCC_CHECK_MATH_FUNC([scalbnf128])\n+GCC_CHECK_MATH_FUNC([sinf128])\n+GCC_CHECK_MATH_FUNC([csinf128])\n+GCC_CHECK_MATH_FUNC([sinhf128])\n+GCC_CHECK_MATH_FUNC([csinhf128])\n+GCC_CHECK_MATH_FUNC([sqrtf128])\n+GCC_CHECK_MATH_FUNC([csqrtf128])\n+GCC_CHECK_MATH_FUNC([tanf128])\n+GCC_CHECK_MATH_FUNC([ctanf128])\n+GCC_CHECK_MATH_FUNC([tanhf128])\n+GCC_CHECK_MATH_FUNC([ctanhf128])\n+GCC_CHECK_MATH_FUNC([truncf128])\n+GCC_CHECK_MATH_FUNC([erff128])\n+GCC_CHECK_MATH_FUNC([erfcf128])\n+GCC_CHECK_MATH_FUNC([j0f128])\n+GCC_CHECK_MATH_FUNC([j1f128])\n+GCC_CHECK_MATH_FUNC([jnf128])\n+GCC_CHECK_MATH_FUNC([y0f128])\n+GCC_CHECK_MATH_FUNC([y1f128])\n+GCC_CHECK_MATH_FUNC([ynf128])\n+GCC_CHECK_MATH_FUNC([tgammaf128])\n+GCC_CHECK_MATH_FUNC([lgammaf128])\n+\n+GCC_CHECK_MATH_FUNC([cacosf128])\n+GCC_CHECK_MATH_FUNC([cacoshf128])\n+GCC_CHECK_MATH_FUNC([casinf128])\n+GCC_CHECK_MATH_FUNC([casinhf128])\n+GCC_CHECK_MATH_FUNC([catanf128])\n+GCC_CHECK_MATH_FUNC([catanhf128])\n+\n # Check whether the system has a working stat()\n LIBGFOR_CHECK_WORKING_STAT\n \n # Check whether __mingw_snprintf() is present\n LIBGFOR_CHECK_MINGW_SNPRINTF\n \n+have_iec_60559_libc_support=no\n+if test \"x$ac_cv_func_strtof128$ac_cv_func_strfromf128\" = xyesyes \\\n+   && test \"x$gcc_cv_math_func_sinf128$gcc_cv_math_func_cacosf128\" = xyesyes; then\n+  have_iec_60559_libc_support=yes\n+fi\n+\n # Check whether libquadmath should be used\n AC_ARG_ENABLE(libquadmath-support,\n AS_HELP_STRING([--disable-libquadmath-support],\n   [disable libquadmath support for Fortran]),\n ENABLE_LIBQUADMATH_SUPPORT=$enableval,\n-ENABLE_LIBQUADMATH_SUPPORT=yes)\n+if test \"x$have_iec_60559_libc_support\" = xyes; then\n+  ENABLE_LIBQUADMATH_SUPPORT=default\n+else\n+  ENABLE_LIBQUADMATH_SUPPORT=yes\n+fi)\n enable_libquadmath_support=\n if test \"${ENABLE_LIBQUADMATH_SUPPORT}\" = \"no\" ; then\n   enable_libquadmath_support=no\n+elif test \"${ENABLE_LIBQUADMATH_SUPPORT}\" = \"default\" ; then\n+  enable_libquadmath_support=default\n fi\n \n-# Check whether we have a __float128 type, depends on enable_libquadmath_support\n+# Check whether we have a _Float128 type, depends on enable_libquadmath_support\n+# and have_iec_60559_libc_support.\n LIBGFOR_CHECK_FLOAT128\n \n # Check for GNU libc feenableexcept"}, {"sha": "96f0d9d9974fb6550c4481a400c744f60eb6ba80", "filename": "libgfortran/generated/bessel_r16.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fgenerated%2Fbessel_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fgenerated%2Fbessel_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fbessel_r16.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -29,7 +29,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n \n #if defined(GFC_REAL_16_IS_FLOAT128)\n+#if defined(GFC_REAL_16_USE_IEC_60559)\n+#define MATHFUNC(funcname) funcname ## f128\n+#else\n #define MATHFUNC(funcname) funcname ## q\n+#endif\n #else\n #define MATHFUNC(funcname) funcname ## l\n #endif"}, {"sha": "1ef4987c65dceb0a45f8966e58872994a91f90bd", "filename": "libgfortran/generated/bessel_r17.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fgenerated%2Fbessel_r17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fgenerated%2Fbessel_r17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fbessel_r17.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -30,6 +30,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #if defined(POWER_IEEE128)\n #define MATHFUNC(funcname) __ ## funcname ## ieee128\n+#elif defined(GFC_REAL_17_USE_IEC_60559)\n+#define MATHFUNC(funcname) funcname ## f128\n #else\n #define MATHFUNC(funcname) funcname ## q\n #endif"}, {"sha": "269c6129289e40495ea6483b46dde4cf73b8e784", "filename": "libgfortran/generated/norm2_r16.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fgenerated%2Fnorm2_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fgenerated%2Fnorm2_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r16.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -30,7 +30,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_REAL_16) && defined (HAVE_GFC_REAL_16) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_SQRTL)) && (defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_FABSL))\n \n #if defined(GFC_REAL_16_IS_FLOAT128)\n+#if defined(GFC_REAL_16_USE_IEC_60559)\n+#define MATHFUNC(funcname) funcname ## f128\n+#else\n #define MATHFUNC(funcname) funcname ## q\n+#endif\n #else\n #define MATHFUNC(funcname) funcname ## l\n #endif"}, {"sha": "75b4ac4b5844fb13106151b572fcc6b74e4ac748", "filename": "libgfortran/generated/norm2_r17.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fgenerated%2Fnorm2_r17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fgenerated%2Fnorm2_r17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r17.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -31,6 +31,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #if defined(POWER_IEEE128)\n #define MATHFUNC(funcname) __ ## funcname ## ieee128\n+#elif defined(GFC_REAL_17_USE_IEC_60559)\n+#define MATHFUNC(funcname) funcname ## f128\n #else\n #define MATHFUNC(funcname) funcname ## q\n #endif"}, {"sha": "698c3f2edc9313c571aced60c1ab2b9d7612ad53", "filename": "libgfortran/ieee/issignaling_fallback.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fieee%2Fissignaling_fallback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fieee%2Fissignaling_fallback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fissignaling_fallback.h?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -197,11 +197,11 @@ __issignalingl (long double x)\n \n #if defined(GFC_REAL_16_IS_FLOAT128)\n \n-/* We have a __float128 type.  */\n+/* We have a _Float128 type.  */\n \n typedef union\n {\n-  __float128 value;\n+  _Float128 value;\n   struct\n   {\n #if __FLOAT_WORD_ORDER__ == __ORDER_BIG_ENDIAN__\n@@ -215,7 +215,7 @@ typedef union\n } ieee854_float128_shape_type;\n \n static inline int\n-__issignalingf128 (__float128 x)\n+__issignalingf128 (_Float128 x)\n {\n   uint64_t hxi, lxi;\n   ieee854_float128_shape_type u;\n@@ -237,7 +237,7 @@ __issignalingf128 (__float128 x)\n #if defined(GFC_REAL_16_IS_FLOAT128)\n # define issignaling(X) \\\n   _Generic ((X), \\\n-\t    __float128: __issignalingf128, \\\n+\t    _Float128: __issignalingf128, \\\n \t    float: __issignalingf, \\\n \t    double: __issignaling, \\\n \t    long double: __issignalingl)(X)"}, {"sha": "2fe4d04e5afb07de340710a4a4de223bb1c5d486", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -132,7 +132,7 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)\n@@ -162,7 +162,7 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)"}, {"sha": "df3352a8292418142f8e8b107ba1a125bee4ba63", "filename": "libgfortran/intrinsics/erfc_scaled.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Ferfc_scaled.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Ferfc_scaled.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ferfc_scaled.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -52,11 +52,19 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #ifdef GFC_REAL_16_IS_FLOAT128\n \n-# define _THRESH -106.566990228185312813205074546585730Q\n-# define _M_2_SQRTPI M_2_SQRTPIq\n-# define _INF __builtin_infq()\n-# define _ERFC(x) erfcq(x)\n-# define _EXP(x) expq(x)\n+# ifdef GFC_REAL_16_USE_IEC_60559\n+#  define _THRESH -106.566990228185312813205074546585730F128\n+#  define _M_2_SQRTPI M_2_SQRTPIf128\n+#  define _INF __builtin_inff128()\n+#  define _ERFC(x) erfcf128(x)\n+#  define _EXP(x) expf128(x)\n+# else\n+#  define _THRESH -106.566990228185312813205074546585730Q\n+#  define _M_2_SQRTPI M_2_SQRTPIq\n+#  define _INF __builtin_infq()\n+#  define _ERFC(x) erfcq(x)\n+#  define _EXP(x) expq(x)\n+# endif\n \n #else\n \n@@ -139,12 +147,15 @@ ERFC_SCALED(16)\n /* For quadruple-precision, netlib's implementation is\n    not accurate enough.  We provide another one.  */\n \n-# define _THRESH -106.566990228185312813205074546585730Q\n-# define _M_2_SQRTPI M_2_SQRTPIq\n+# define _THRESH GFC_REAL_17_LITERAL(-106.566990228185312813205074546585730)\n+# define _M_2_SQRTPI GFC_REAL_17_LITERAL(M_2_SQRTPI)\n # define _INF __builtin_inff128()\n # ifdef POWER_IEEE128\n #  define _ERFC(x) __erfcieee128(x)\n #  define _EXP(x) __expieee128(x)\n+# elif defined(GFC_REAL_17_USE_IEC_60559)\n+#  define _ERFC(x) erfcf128(x)\n+#  define _EXP(x) expf128(x)\n # else\n #  define _ERFC(x) erfcq(x)\n #  define _EXP(x) expq(x)"}, {"sha": "5c54fe36c4823c2f755caba4fc6d796e36a805e7", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -307,7 +307,7 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)\n@@ -339,7 +339,7 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)"}, {"sha": "d65912268b979baa2cbd53e7d5757c18eabecbc2", "filename": "libgfortran/intrinsics/spread_generic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Fspread_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Fspread_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fspread_generic.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -320,7 +320,7 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)\n@@ -352,7 +352,7 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)\n@@ -524,7 +524,7 @@ spread_scalar (gfc_array_char *ret, const char *source,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)\n@@ -556,7 +556,7 @@ spread_scalar (gfc_array_char *ret, const char *source,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)"}, {"sha": "36f46ac7ca400363e428b7a2bd39c5c6f13b7d9f", "filename": "libgfortran/intrinsics/trigd.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Ftrigd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Ftrigd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftrigd.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -261,6 +261,24 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #endif /* HAVE_FABSL && HAVE_FMODL && HAVE_COPYSIGNL */\n \n+#elif defined(GFC_REAL_16_USE_IEC_60559)\n+\n+#if defined(HAVE_FABSF128) && defined(HAVE_FMODF128) && defined(HAVE_COPYSIGNF128)\n+\n+#ifdef HAVE_SINF128\n+#define ENABLE_SIND\n+#endif\n+\n+#ifdef HAVE_COSF128\n+#define ENABLE_COSD\n+#endif\n+\n+#ifdef HAVE_TANF128\n+#define ENABLE_TAND\n+#endif\n+\n+#endif /* HAVE_FABSF128 && HAVE_FMODF128 && HAVE_COPYSIGNF128 */\n+\n #else\n \n /* libquadmath: HAVE_*Q are never defined.  They must be available.  */"}, {"sha": "a24c284a9f796af8b5d67b7a8c5b6371e45766d3", "filename": "libgfortran/intrinsics/unpack_generic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Funpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fintrinsics%2Funpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funpack_generic.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -265,7 +265,7 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)\n@@ -297,7 +297,7 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)\n@@ -486,7 +486,7 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)\n@@ -518,7 +518,7 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)"}, {"sha": "8e9d50dd54cdb9b6ca7bf721dd455a919b06375d", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -186,7 +186,11 @@ convert_real (st_parameter_dt *dtp, void *dest, const char *buffer, int length)\n #if defined(HAVE_GFC_REAL_16)\n # if defined(GFC_REAL_16_IS_FLOAT128)\n     case 16:\n+#  if defined(GFC_REAL_16_USE_IEC_60559)\n+      *((GFC_REAL_16*) dest) = strtof128 (buffer, &endptr);\n+#  else\n       *((GFC_REAL_16*) dest) = __qmath_(strtoflt128) (buffer, &endptr);\n+#  endif\n       break;\n # elif defined(HAVE_STRTOLD)\n     case 16:\n@@ -199,6 +203,8 @@ convert_real (st_parameter_dt *dtp, void *dest, const char *buffer, int length)\n     case 17:\n # if defined(POWER_IEEE128)\n       *((GFC_REAL_17*) dest) = __strtoieee128 (buffer, &endptr);\n+# elif defined(GFC_REAL_17_USE_IEC_60559)\n+      *((GFC_REAL_17*) dest) = strtof128 (buffer, &endptr);\n # else\n       *((GFC_REAL_17*) dest) = __qmath_(strtoflt128) (buffer, &endptr);\n # endif\n@@ -272,7 +278,14 @@ convert_infnan (st_parameter_dt *dtp, void *dest, const char *buffer,\n #if defined(HAVE_GFC_REAL_16)\n # if defined(GFC_REAL_16_IS_FLOAT128)\n     case 16:\n+#  if defined(GFC_REAL_16_USE_IEC_60559)\n+      if (is_inf)\n+\t*((GFC_REAL_16*) dest) = plus ? __builtin_inff128 () : -__builtin_inff128 ();\n+      else\n+\t*((GFC_REAL_16*) dest) = plus ? __builtin_nanf128 (\"\") : -__builtin_nanf128 (\"\");\n+#  else\n       *((GFC_REAL_16*) dest) = __qmath_(strtoflt128) (buffer, NULL);\n+#  endif\n       break;\n # else\n     case 16:"}, {"sha": "8f3073079dc973a54048f770015ee7e314e929e4", "filename": "libgfortran/io/transfer128.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fio%2Ftransfer128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fio%2Ftransfer128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer128.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -65,7 +65,9 @@ export_proto(transfer_complex128_write);\n    write_float; the pointer assignment with USED attribute make sure\n    that there is a non-weakref dependence if the quadmath functions\n    are used. That avoids segfault when libquadmath is statically linked.  */\n-# if !defined(HAVE_GFC_REAL_17) || !defined(POWER_IEEE128)\n+# if (defined(HAVE_GFC_REAL_17) && !defined(POWER_IEEE128) \\\n+      && !defined(GFC_REAL_17_USE_IEC_60559)) \\\n+     || (!defined(HAVE_GFC_REAL_17) && !defined(GFC_REAL_16_USE_IEC_60559))\n static void __attribute__((used)) *tmp1 = strtoflt128;\n static void __attribute__((used)) *tmp2 = quadmath_snprintf;\n # endif"}, {"sha": "a4d84938a851bd3c9d3f49ec4471b18d84815992", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -837,18 +837,60 @@ snprintf (buffer, size, \"%+-#.*e\", (prec), (val))\n #define DTOA2L(prec,val) \\\n snprintf (buffer, size, \"%+-#.*Le\", (prec), (val))\n \n+#if defined(GFC_REAL_16_USE_IEC_60559) || defined(GFC_REAL_17_USE_IEC_60559)\n+/* strfromf128 unfortunately doesn't allow +, - and # modifiers\n+   nor .* (only allows .number).  For +, work around it by adding\n+   leading + manually for !signbit values.  For - I don't see why\n+   we need it, when we don't specify field minimum width.\n+   For #, add . if it is missing.  Assume size is at least 2.  */\n+static int\n+gfor_strfromf128 (char *buffer, size_t size, int kind, int prec, _Float128 val)\n+{\n+  int ret, n = 0;\n+  char fmt[sizeof (int) * 3 + 5];\n+  snprintf (fmt, sizeof fmt, \"%%.%d%c\", prec, kind);\n+  if (!__builtin_signbit (val))\n+    {\n+      n = 1;\n+      buffer[0] = '+';\n+    }\n+  ret = strfromf128 (buffer + n, size - n, fmt, val) + n;\n+  if ((size_t) ret < size - 1)\n+    {\n+      size_t s = strcspn (buffer, \".e\");\n+      if (buffer[s] != '.')\n+\t{\n+\t  if (buffer[s] == '\\0')\n+\t    buffer[s + 1] = '\\0';\n+\t  else\n+\t    memmove (buffer + s + 1, buffer + s, ret + 1 - s);\n+\t  buffer[s] = '.';\n+\t  ++ret;\n+\t}\n+    }\n+  return ret;\n+}\n+#endif\n \n #if defined(HAVE_GFC_REAL_17)\n # if defined(POWER_IEEE128)\n #  define DTOA2Q(prec,val) \\\n __snprintfieee128 (buffer, size, \"%+-#.*Le\", (prec), (val))\n+# elif defined(GFC_REAL_17_USE_IEC_60559)\n+#  define DTOA2Q(prec,val) \\\n+gfor_strfromf128 (buffer, size, 'e', (prec), (val))\n # else\n #  define DTOA2Q(prec,val) \\\n quadmath_snprintf (buffer, size, \"%+-#.*Qe\", (prec), (val))\n # endif\n #elif defined(GFC_REAL_16_IS_FLOAT128)\n-# define DTOA2Q(prec,val) \\\n+# if defined(GFC_REAL_16_USE_IEC_60559)\n+#  define DTOA2Q(prec,val) \\\n+gfor_strfromf128 (buffer, size, 'e', (prec), (val))\n+# else\n+#  define DTOA2Q(prec,val) \\\n quadmath_snprintf (buffer, size, \"%+-#.*Qe\", (prec), (val))\n+# endif\n #endif\n \n #define FDTOA(suff,prec,val) TOKENPASTE(FDTOA2,suff)(prec,val)\n@@ -865,13 +907,21 @@ snprintf (buffer, size, \"%+-#.*Lf\", (prec), (val))\n # if defined(POWER_IEEE128)\n #  define FDTOA2Q(prec,val) \\\n __snprintfieee128 (buffer, size, \"%+-#.*Lf\", (prec), (val))\n+# elif defined(GFC_REAL_17_USE_IEC_60559)\n+#  define FDTOA2Q(prec,val) \\\n+gfor_strfromf128 (buffer, size, 'f', (prec), (val))\n # else\n # define FDTOA2Q(prec,val) \\\n quadmath_snprintf (buffer, size, \"%+-#.*Qf\", (prec), (val))\n # endif\n #elif defined(GFC_REAL_16_IS_FLOAT128)\n-# define FDTOA2Q(prec,val) \\\n+# if defined(GFC_REAL_16_USE_IEC_60559)\n+#  define FDTOA2Q(prec,val) \\\n+gfor_strfromf128 (buffer, size, 'f', (prec), (val))\n+# else\n+#  define FDTOA2Q(prec,val) \\\n quadmath_snprintf (buffer, size, \"%+-#.*Qf\", (prec), (val))\n+# endif\n #endif\n \n "}, {"sha": "3762ee2c0d4802e9aedc98c26afdd220450921b0", "filename": "libgfortran/kinds-override.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fkinds-override.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fkinds-override.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fkinds-override.h?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -26,18 +26,26 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Ensure that TFmode is available under.  */\n \n #if defined(GFC_REAL_16_IS_FLOAT128) && !defined(HAVE_FLOAT128)\n-# error \"Where has __float128 gone?\"\n+# error \"Where has _Float128 gone?\"\n #endif\n \n /* Keep these conditions on one line so grep can filter it out.  */\n #if defined(__powerpc64__)  && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__  && __SIZEOF_LONG_DOUBLE__ == 16\n-typedef __float128 GFC_REAL_17;\n-typedef _Complex float __attribute__((mode(KC))) GFC_COMPLEX_17;\n+typedef _Float128 GFC_REAL_17;\n+typedef _Complex _Float128 GFC_COMPLEX_17;\n #define HAVE_GFC_REAL_17\n #define HAVE_GFC_COMPLEX_17\n+#define GFC_REAL_17_IS_FLOAT128\n+#ifdef USE_IEC_60559\n+#define GFC_REAL_17_USE_IEC_60559\n+#define GFC_REAL_17_HUGE 1.18973149535723176508575932662800702e4932f128\n+#define GFC_REAL_17_LITERAL_SUFFIX f128\n+#define GFC_REAL_17_LITERAL(X) (X ## f128)\n+#else\n #define GFC_REAL_17_HUGE 1.18973149535723176508575932662800702e4932q\n #define GFC_REAL_17_LITERAL_SUFFIX q\n #define GFC_REAL_17_LITERAL(X) (X ## q)\n+#endif\n #define GFC_REAL_17_DIGITS 113\n #define GFC_REAL_17_RADIX 2\n #endif"}, {"sha": "c21224539ebe6e724c27480e05a248180717eebe", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -58,8 +58,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* If we're support quad-precision floating-point type, include the\n    header to our support library.  */\n-#ifdef HAVE_FLOAT128\n-#  include \"quadmath_weak.h\"\n+#if defined(HAVE_FLOAT128) && !defined(USE_IEC_60559)\n+# include \"quadmath_weak.h\"\n #endif\n \n #ifdef __MINGW32__\n@@ -322,6 +322,8 @@ typedef GFC_UINTEGER_4 gfc_char4_t;\n # ifdef HAVE_GFC_REAL_16\n #  ifdef GFC_REAL_16_IS_LONG_DOUBLE\n #   define GFC_REAL_16_INFINITY __builtin_infl ()\n+#  elif defined GFC_REAL_16_USE_IEC_60559\n+#   define GFC_REAL_16_INFINITY __builtin_inff128 ()\n #  else\n #   define GFC_REAL_16_INFINITY __builtin_infq ()\n #  endif\n@@ -343,6 +345,8 @@ typedef GFC_UINTEGER_4 gfc_char4_t;\n # ifdef HAVE_GFC_REAL_16\n #  ifdef GFC_REAL_16_IS_LONG_DOUBLE\n #   define GFC_REAL_16_QUIET_NAN __builtin_nanl (\"\")\n+#  elif defined GFC_REAL_16_USE_IEC_60559\n+#   define GFC_REAL_16_QUIET_NAN __builtin_nanf128 (\"\")\n #  else\n #   define GFC_REAL_16_QUIET_NAN nanq (\"\")\n #  endif"}, {"sha": "682a2a2534de2da3eb48bd4cbb31dd139e011470", "filename": "libgfortran/m4/mtype.m4", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fm4%2Fmtype.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fm4%2Fmtype.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmtype.m4?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -15,12 +15,18 @@ ifelse(kind,17,`1 /* FIXME: figure this out later.  */',dnl\n define(mathfunc_macro,`ifelse(kind,17,dnl\n `#if defined(POWER_IEEE128)\n #define MATHFUNC(funcname) __ ## funcname ## ieee128\n+#elif defined(GFC_REAL_17_USE_IEC_60559)\n+#define MATHFUNC(funcname) funcname ## f128\n #else\n #define MATHFUNC(funcname) funcname ## q\n #endif',dnl\n `ifelse(kind,16,dnl\n `#if defined(GFC_REAL_16_IS_FLOAT128)\n+#if defined(GFC_REAL_16_USE_IEC_60559)\n+#define MATHFUNC(funcname) funcname ## f128\n+#else\n #define MATHFUNC(funcname) funcname ## q\n+#endif\n #else\n #define MATHFUNC(funcname) funcname ## l\n #endif',dnl"}, {"sha": "be4a6325b88736e88bbf3a466b105637103965ee", "filename": "libgfortran/mk-kinds-h.sh", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fmk-kinds-h.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fmk-kinds-h.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fmk-kinds-h.sh?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -2,15 +2,16 @@\n LC_ALL=C\n export LC_ALL\n \n-if test \"$#\" -ne 3; then\n-  echo \"Usage $0 int_kinds real_kinds compile\"\n+if test \"$#\" -ne 4; then\n+  echo \"Usage $0 int_kinds real_kinds compile use_iec_60559\"\n   exit 1\n fi\n \n # Possible kinds must be listed in ascending order\n possible_integer_kinds=\"$1\"\n possible_real_kinds=\"$2\"\n compile=\"$3\"\n+use_iec_60559=\"$4\"\n \n largest=\"\"\n smallest=\"\"\n@@ -49,7 +50,7 @@ echo \"\"\n \n \n # Get the kind value for long double, so we may disambiguate it\n-# from __float128.\n+# from _Float128.\n echo \"use iso_c_binding; print *, c_long_double ; end\" > tmq$$.f90\n long_double_kind=`$compile -S -fdump-parse-tree tmq$$.f90 | grep TRANSFER \\\n \t\t\t| sed 's/ *TRANSFER *//'`\n@@ -68,10 +69,15 @@ for k in $possible_real_kinds; do\n       10) ctype=\"long double\" ; cplxtype=\"complex long double\" ; suffix=\"l\" ;;\n       # If we have a REAL(KIND=16), it is either long double or __float128\n       16) if [ $long_double_kind -ne 16 ]; then\n-\t    ctype=\"__float128\"\n-\t    cplxtype=\"_Complex float __attribute__((mode(TC)))\"\n-\t    suffix=\"q\"\n+\t    ctype=\"_Float128\"\n+\t    cplxtype=\"_Complex _Float128\"\n \t    echo \"#define GFC_REAL_16_IS_FLOAT128\"\n+\t    if [ x$use_iec_60559 = xyes ]; then\n+\t      suffix=\"f128\"\n+\t      echo \"#define GFC_REAL_16_USE_IEC_60559\"\n+\t    else\n+\t      suffix=\"q\"\n+\t    fi\n \t  else\n \t    ctype=\"long double\"\n \t    cplxtype=\"complex long double\""}, {"sha": "37c07aad3e2360da36526ad089639d6c94cb14bc", "filename": "libgfortran/runtime/in_pack_generic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fruntime%2Fin_pack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fruntime%2Fin_pack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_pack_generic.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -82,7 +82,7 @@ internal_pack (gfc_array_char * source)\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)\n@@ -106,7 +106,7 @@ internal_pack (gfc_array_char * source)\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)"}, {"sha": "1bed7e1b1abfd86dd1027690cfd2f34cab8ff7cf", "filename": "libgfortran/runtime/in_unpack_generic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fruntime%2Fin_unpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133d0d422ebd18dbd215cfa5394aff9f938e7060/libgfortran%2Fruntime%2Fin_unpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_unpack_generic.c?ref=133d0d422ebd18dbd215cfa5394aff9f938e7060", "patch": "@@ -89,7 +89,7 @@ internal_unpack (gfc_array_char * d, const void * s)\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)\n@@ -117,7 +117,7 @@ internal_unpack (gfc_array_char * d, const void * s)\n /* FIXME: This here is a hack, which will have to be removed when\n    the array descriptor is reworked.  Currently, we don't store the\n    kind value for the type, but only the size.  Because on targets with\n-   __float128, we have sizeof(logn double) == sizeof(__float128),\n+   _Float128, we have sizeof(long double) == sizeof(_Float128),\n    we cannot discriminate here and have to fall back to the generic\n    handling (which is suboptimal).  */\n #if !defined(GFC_REAL_16_IS_FLOAT128)"}]}