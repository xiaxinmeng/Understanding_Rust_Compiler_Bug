{"sha": "36cf595c0b8919dc261771fc5bea0c8b5614ab60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZjZjU5NWMwYjg5MTlkYzI2MTc3MWZjNWJlYTBjOGI1NjE0YWI2MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-03-30T10:38:01Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-15T08:04:19Z"}, "message": "[Ada] Implement AI12-0077 Has_Same_Storage on objects of size zero\n\n2020-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference) <Has_Same_Storage>:\n\tDo not do superfluous work.  Add the condition (X'Size /= 0) on\n\tboth paths and turn binary AND into short-circuit AND THEN.", "tree": {"sha": "05b0377f8b8f186fa478b422cc34fd85a14b95e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05b0377f8b8f186fa478b422cc34fd85a14b95e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36cf595c0b8919dc261771fc5bea0c8b5614ab60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36cf595c0b8919dc261771fc5bea0c8b5614ab60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36cf595c0b8919dc261771fc5bea0c8b5614ab60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36cf595c0b8919dc261771fc5bea0c8b5614ab60/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fab710d0694d487fbd4943cdec240f2dcfda496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fab710d0694d487fbd4943cdec240f2dcfda496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fab710d0694d487fbd4943cdec240f2dcfda496"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "a7b9007ffe2d4f9fa7abb138eba68058937d70c8", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36cf595c0b8919dc261771fc5bea0c8b5614ab60/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36cf595c0b8919dc261771fc5bea0c8b5614ab60/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=36cf595c0b8919dc261771fc5bea0c8b5614ab60", "patch": "@@ -3603,6 +3603,7 @@ package body Exp_Attr is\n \n          --    (X'address = Y'address)\n          --      and then (X'Size = Y'Size)\n+         --      and then (X'Size /= 0)      (AI12-0077)\n \n          --  If both arguments have the same Etype the second conjunct can be\n          --  omitted.\n@@ -3622,27 +3623,39 @@ package body Exp_Attr is\n              Attribute_Name => Name_Size,\n              Prefix         => New_Copy_Tree (X));\n \n-         Y_Size :=\n-           Make_Attribute_Reference (Loc,\n-             Attribute_Name => Name_Size,\n-             Prefix         => New_Copy_Tree (Y));\n-\n          if Etype (X) = Etype (Y) then\n             Rewrite (N,\n-              Make_Op_Eq (Loc,\n-                Left_Opnd  => X_Addr,\n-                Right_Opnd => Y_Addr));\n+              Make_And_Then (Loc,\n+                Left_Opnd  =>\n+                  Make_Op_Eq (Loc,\n+                    Left_Opnd  => X_Addr,\n+                    Right_Opnd => Y_Addr),\n+                Right_Opnd =>\n+                  Make_Op_Ne (Loc,\n+                    Left_Opnd  => X_Size,\n+                    Right_Opnd => Make_Integer_Literal (Loc, 0))));\n          else\n+            Y_Size :=\n+              Make_Attribute_Reference (Loc,\n+                Attribute_Name => Name_Size,\n+                Prefix         => New_Copy_Tree (Y));\n+\n             Rewrite (N,\n-              Make_Op_And (Loc,\n+              Make_And_Then (Loc,\n                 Left_Opnd  =>\n                   Make_Op_Eq (Loc,\n                     Left_Opnd  => X_Addr,\n                     Right_Opnd => Y_Addr),\n                 Right_Opnd =>\n-                  Make_Op_Eq (Loc,\n-                    Left_Opnd  => X_Size,\n-                    Right_Opnd => Y_Size)));\n+                  Make_And_Then (Loc,\n+                    Left_Opnd  =>\n+                      Make_Op_Eq (Loc,\n+                        Left_Opnd  => X_Size,\n+                        Right_Opnd => Y_Size),\n+                    Right_Opnd =>\n+                      Make_Op_Ne (Loc,\n+                        Left_Opnd  => New_Copy_Tree (X_Size),\n+                        Right_Opnd => Make_Integer_Literal (Loc, 0)))));\n          end if;\n \n          Analyze_And_Resolve (N, Standard_Boolean);"}]}