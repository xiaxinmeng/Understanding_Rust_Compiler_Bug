{"sha": "05945a1b8356818a441b3d358c8d803ee52eb778", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU5NDVhMWI4MzU2ODE4YTQ0MWIzZDM1OGM4ZDgwM2VlNTJlYjc3OA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-06-05T20:53:06Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-06-05T20:53:06Z"}, "message": "libcpp: add callback for comment-handling\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/plugin/comment_plugin.c: New test plugin.\n\t* g++.dg/plugin/comments-1.C: New test file.\n\t* g++.dg/plugin/plugin.exp (plugin_test_list): Add the above.\n\nlibcpp/ChangeLog:\n\t* include/cpplib.h (struct cpp_callbacks): Add \"comment\"\n\tcallback.\n\t* lex.c (_cpp_lex_direct): Call the comment callback if non-NULL.\n\nFrom-SVN: r248901", "tree": {"sha": "d602be4faec521df3252fd78c8aaab8cd7f563d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d602be4faec521df3252fd78c8aaab8cd7f563d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05945a1b8356818a441b3d358c8d803ee52eb778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05945a1b8356818a441b3d358c8d803ee52eb778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05945a1b8356818a441b3d358c8d803ee52eb778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05945a1b8356818a441b3d358c8d803ee52eb778/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b972837bd72fc1e709206e19492123a6df2aada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b972837bd72fc1e709206e19492123a6df2aada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b972837bd72fc1e709206e19492123a6df2aada"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "f1bb404a9562ed6a840426858cad3bc3ef861a28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05945a1b8356818a441b3d358c8d803ee52eb778/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05945a1b8356818a441b3d358c8d803ee52eb778/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05945a1b8356818a441b3d358c8d803ee52eb778", "patch": "@@ -1,3 +1,9 @@\n+2017-06-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/plugin/comment_plugin.c: New test plugin.\n+\t* g++.dg/plugin/comments-1.C: New test file.\n+\t* g++.dg/plugin/plugin.exp (plugin_test_list): Add the above.\n+\n 2017-06-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gcc.misc-tests/gcov-1a.c: New test."}, {"sha": "c3b08e34dc751106993e2524d9452689a01500fd", "filename": "gcc/testsuite/g++.dg/plugin/comment_plugin.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05945a1b8356818a441b3d358c8d803ee52eb778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fcomment_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05945a1b8356818a441b3d358c8d803ee52eb778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fcomment_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fcomment_plugin.c?ref=05945a1b8356818a441b3d358c8d803ee52eb778", "patch": "@@ -0,0 +1,63 @@\n+/* Test of cpp_callbacks::comments.  */\n+\n+#include \"gcc-plugin.h\"\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"cpplib.h\"\n+#include \"diagnostic.h\"\n+#include \"c-family/c-pragma.h\"\n+\n+int plugin_is_GPL_compatible;\n+\n+/* Test callback for cpp_callbacks::comments.  */\n+\n+void\n+my_comment_cb (cpp_reader *, source_location loc,\n+\t       const unsigned char *content, size_t len)\n+{\n+  if (in_system_header_at (loc))\n+    return;\n+\n+  /* CONTENT contains the opening slash-star (or slash-slash),\n+     and for C-style comments contains the closing star-slash.  */\n+  gcc_assert (len >= 2);\n+  gcc_assert (content[0] == '/');\n+  gcc_assert (content[1] == '*' || content[1] == '/');\n+  bool c_style = (content[1] == '*');\n+  if (c_style)\n+    {\n+      gcc_assert (content[len - 2] == '*');\n+      gcc_assert (content[len - 1] == '/');\n+    }\n+\n+  if (c_style)\n+    inform (loc, \"got C-style comment; length=%i\", len);\n+  else\n+    inform (loc, \"got C++-style comment; length=%i\", len);\n+\n+  /* Print the content of the comment.\n+     For a C-style comment, the buffer CONTENT contains the opening\n+     slash-star and closing star-slash, so we can't directly verify\n+     it in the DejaGnu test without adding another comment, which\n+     would trigger this callback again.\n+     Hence we skip the syntactically-significant parts of the comment\n+     when printing it.  */\n+  fprintf (stderr, \"stripped content of comment: >\");\n+  /* Avoid printing trailing star-slash.  */\n+  if (c_style)\n+    len -= 2;\n+  for (size_t i = 2; i < len; i++)\n+    fputc (content[i], stderr);\n+  fprintf (stderr, \"<\\n\");\n+}\n+\n+int\n+plugin_init (struct plugin_name_args *plugin_info,\n+\t     struct plugin_gcc_version *version)\n+{\n+  cpp_callbacks *cb = cpp_get_callbacks (parse_in);\n+  cb->comment = my_comment_cb;\n+\n+  return 0;\n+}"}, {"sha": "0821b14c03ab6d828fe912a8f1899b6e59277b52", "filename": "gcc/testsuite/g++.dg/plugin/comments-1.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05945a1b8356818a441b3d358c8d803ee52eb778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fcomments-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05945a1b8356818a441b3d358c8d803ee52eb778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fcomments-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fcomments-1.C?ref=05945a1b8356818a441b3d358c8d803ee52eb778", "patch": "@@ -0,0 +1,49 @@\n+/* Example of a one-line C-style comment.  */\n+#if 0\n+{ dg-message \"1: got C-style comment; length=45\" \"\" { target *-*-* } .-2 }\n+{ dg-begin-multiline-output \"\" }\n+stripped content of comment: > Example of a one-line C-style comment.  <\n+{ dg-end-multiline-output \"\" }\n+#endif\n+\n+     /*Another example of a one-line C-style comment.*/\n+#if 0\n+{ dg-message \"6: got C-style comment; length=50\" \"\" { target *-*-* } .-2 }\n+{ dg-begin-multiline-output \"\" }\n+stripped content of comment: >Another example of a one-line C-style comment.<\n+{ dg-end-multiline-output \"\" }\n+#endif\n+\n+/**/\n+#if 0\n+{ dg-message \"1: got C-style comment; length=4\" \"\" { target *-*-* } .-2 }\n+{ dg-begin-multiline-output \"\" }\n+stripped content of comment: ><\n+{ dg-end-multiline-output \"\" }\n+#endif\n+\n+/* Example of a\n+   multi-line C-style comment.  */\n+#if 0\n+{ dg-message \"1: got C-style comment; length=50\" \"\" { target *-*-* } .-3 }\n+{ dg-begin-multiline-output \"\" }\n+stripped content of comment: > Example of a\n+   multi-line C-style comment.  <\n+{ dg-end-multiline-output \"\" }\n+#endif\n+\n+// Example of a C++-style comment\n+#if 0\n+{ dg-message \"1: got C\\\\+\\\\+-style comment; length=33\" \"\" { target *-*-* } .-2 }\n+{ dg-begin-multiline-output \"\" }\n+stripped content of comment: > Example of a C++-style comment<\n+{ dg-end-multiline-output \"\" }\n+#endif\n+\n+//\n+#if 0\n+{ dg-message \"1: got C\\\\+\\\\+-style comment; length=2\" \"\" { target *-*-* } .-2 }\n+{ dg-begin-multiline-output \"\" }\n+stripped content of comment: ><\n+{ dg-end-multiline-output \"\" }\n+#endif"}, {"sha": "e40cba328c5f432936615739210be95fb6874c07", "filename": "gcc/testsuite/g++.dg/plugin/plugin.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05945a1b8356818a441b3d358c8d803ee52eb778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05945a1b8356818a441b3d358c8d803ee52eb778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp?ref=05945a1b8356818a441b3d358c8d803ee52eb778", "patch": "@@ -68,6 +68,7 @@ set plugin_test_list [list \\\n     { show_template_tree_color_plugin.c \\\n     \t  show-template-tree-color.C \\\n     \t  show-template-tree-color-no-elide-type.C } \\\n+    { comment_plugin.c comments-1.C } \\\n ]\n \n foreach plugin_test $plugin_test_list {"}, {"sha": "8032d7cde9990602a1601f95461482b5efd63c5c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05945a1b8356818a441b3d358c8d803ee52eb778/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05945a1b8356818a441b3d358c8d803ee52eb778/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=05945a1b8356818a441b3d358c8d803ee52eb778", "patch": "@@ -1,3 +1,9 @@\n+2017-06-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/cpplib.h (struct cpp_callbacks): Add \"comment\"\n+\tcallback.\n+\t* lex.c (_cpp_lex_direct): Call the comment callback if non-NULL.\n+\n 2017-05-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (class rich_location): Update description of"}, {"sha": "66ef4d6443376fbac6050c50597c52ebc6739c39", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05945a1b8356818a441b3d358c8d803ee52eb778/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05945a1b8356818a441b3d358c8d803ee52eb778/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=05945a1b8356818a441b3d358c8d803ee52eb778", "patch": "@@ -609,6 +609,15 @@ struct cpp_callbacks\n \n   /* Callback for providing suggestions for misspelled directives.  */\n   const char *(*get_suggestion) (cpp_reader *, const char *, const char *const *);\n+\n+  /* Callback for when a comment is encountered, giving the location\n+     of the opening slash, a pointer to the content (which is not\n+     necessarily 0-terminated), and the length of the content.\n+     The content contains the opening slash-star (or slash-slash),\n+     and for C-style comments contains the closing star-slash.  For\n+     C++-style comments it does not include the terminating newline.  */\n+  void (*comment) (cpp_reader *, source_location, const unsigned char *,\n+\t\t   size_t);\n };\n \n #ifdef VMS"}, {"sha": "40ff801e8e32b421df946ac5296037a28449119e", "filename": "libcpp/lex.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05945a1b8356818a441b3d358c8d803ee52eb778/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05945a1b8356818a441b3d358c8d803ee52eb778/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=05945a1b8356818a441b3d358c8d803ee52eb778", "patch": "@@ -2889,6 +2889,13 @@ _cpp_lex_direct (cpp_reader *pfile)\n       if (fallthrough_comment_p (pfile, comment_start))\n \tfallthrough_comment = true;\n \n+      if (pfile->cb.comment)\n+\t{\n+\t  size_t len = pfile->buffer->cur - comment_start;\n+\t  pfile->cb.comment (pfile, result->src_loc, comment_start - 1,\n+\t\t\t     len + 1);\n+\t}\n+\n       if (!pfile->state.save_comments)\n \t{\n \t  result->flags |= PREV_WHITE;"}]}