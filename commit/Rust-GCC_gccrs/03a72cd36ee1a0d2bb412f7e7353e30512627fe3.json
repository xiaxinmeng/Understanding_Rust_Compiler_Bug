{"sha": "03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhNzJjZDM2ZWUxYTBkMmJiNDEyZjdlNzM1M2UzMDUxMjYyN2ZlMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:05:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:05:48Z"}, "message": "[multiple changes]\n\n2015-10-20  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch9.adb (Expand_Entry_Barrier): Default initialize local variable\n\tFunc.\n\n2015-10-20  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* init.c (__gnat_error_handler for vxworks): Force\n\tSPE bit in the MSR when handling signals\n\n2015-10-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* einfo.ads, sem_ch12.adb, sem_ch6.adb, table.ads, s-stposu.ads,\n\tg-table.ads, g-dyntab.ads, makeutl.ads, a-crdlli.ads: Fix typos.\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Loop_Statement): Element iterators\n\tover multidimensional arrays create additional loops during\n\texpansion. For such loops we create a label as a scope\n\tname. Attach this label  properly to tree, for use in GNATProve\n\tover such element iterators.\n\t* sem_attr.adb (Analyze_Attribute, case Loop_Entry): The loop to\n\twhich the attribute applies comes from source, not from expansion\n\tof an element iterator or a quantified expression.\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Ditto.\n\nFrom-SVN: r229057", "tree": {"sha": "e2488e4fa1bdad3c7f323f40b81091562c736f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2488e4fa1bdad3c7f323f40b81091562c736f8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/comments", "author": null, "committer": null, "parents": [{"sha": "fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc90cc6293fbe3e3254ed73290f83f6c402c40a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc90cc6293fbe3e3254ed73290f83f6c402c40a7"}], "stats": {"total": 99, "additions": 77, "deletions": 22}, "files": [{"sha": "fda8e8bbf93b4cd261f9f10057b1d16dc3166850", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -1,3 +1,30 @@\n+2015-10-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_Entry_Barrier): Default initialize local variable\n+\tFunc.\n+\n+2015-10-20  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* init.c (__gnat_error_handler for vxworks): Force\n+\tSPE bit in the MSR when handling signals\n+\n+2015-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* einfo.ads, sem_ch12.adb, sem_ch6.adb, table.ads, s-stposu.ads,\n+\tg-table.ads, g-dyntab.ads, makeutl.ads, a-crdlli.ads: Fix typos.\n+\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Loop_Statement): Element iterators\n+\tover multidimensional arrays create additional loops during\n+\texpansion. For such loops we create a label as a scope\n+\tname. Attach this label  properly to tree, for use in GNATProve\n+\tover such element iterators.\n+\t* sem_attr.adb (Analyze_Attribute, case Loop_Entry): The loop to\n+\twhich the attribute applies comes from source, not from expansion\n+\tof an element iterator or a quantified expression.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Ditto.\n+\n 2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch6.adb (Expand_Call): Check for a call to a function"}, {"sha": "151d3f94a0b6e0fbd2bcb4916bc46e8ac70ea9a2", "filename": "gcc/ada/a-crdlli.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fa-crdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fa-crdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-crdlli.ads?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -208,7 +208,7 @@ package Ada.Containers.Restricted_Doubly_Linked_Lists is\n       Before    : Cursor;\n       Position  : in out Cursor);\n    --  If Before is associated with a list object different from Container,\n-   --  then Program_Error is raised. If Position equals No_element, then\n+   --  then Program_Error is raised. If Position equals No_Element, then\n    --  Constraint_Error is raised; if it associated with a list object\n    --  different from Container, then Program_Error is raised. Otherwise, the\n    --  node designated by Position is relinked immediately prior to Before. If"}, {"sha": "58d3ba866f3ccd10f0d78beb502b5409b4a0ffb4", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -2031,7 +2031,7 @@ package Einfo is\n --       their subtypes have unknown discriminants and can have declared ones\n --       as well. Private types declared with unknown discriminants may have a\n --       full view that has explicit discriminants, and both flag will be set\n---       on the partial view, to insure that discriminants are properly\n+--       on the partial view, to ensure that discriminants are properly\n --       inherited in certain contexts.\n \n --    Has_Visible_Refinement (Flag263)\n@@ -3460,7 +3460,7 @@ package Einfo is\n --    Next_Inlined_Subprogram (Node12)\n --       Defined in subprograms. Used to chain inlined subprograms used in\n --       the current compilation, in the order in which they must be compiled\n---       by the backend to insure that all inlinings are performed.\n+--       by the backend to ensure that all inlinings are performed.\n \n --    Next_Literal (synthesized)\n --       Applies to enumeration literals, returns the next literal, or"}, {"sha": "f6f22f00473c156eb52c0e66e979d369076c3010", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -1012,13 +1012,15 @@ package body Exp_Attr is\n          Loop_Stmt := Label_Construct (Parent (Loop_Id));\n \n       --  Climb the parent chain to find the nearest enclosing loop. Skip all\n-      --  internally generated loops for quantified expressions.\n+      --  internally generated loops for quantified expressions and for\n+      --  element iterators over multidimensional arrays: pragma applies to\n+      --  source loop.\n \n       else\n          Loop_Stmt := N;\n          while Present (Loop_Stmt) loop\n             if Nkind (Loop_Stmt) = N_Loop_Statement\n-              and then Present (Identifier (Loop_Stmt))\n+              and then Comes_From_Source (Loop_Stmt)\n             then\n                exit;\n             end if;"}, {"sha": "3e13126a48146b0830b574e4e0ee903b330f2590", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -6184,7 +6184,7 @@ package body Exp_Ch9 is\n                     Condition (Entry_Body_Formal_Part (N));\n       Prot      : constant Entity_Id := Scope (Ent);\n       Spec_Decl : constant Node_Id   := Parent (Prot);\n-      Func      : Entity_Id;\n+      Func      : Entity_Id          := Empty;\n       B_F       : Node_Id;\n       Body_Decl : Node_Id;\n \n@@ -6206,6 +6206,11 @@ package body Exp_Ch9 is\n             S := Scope  (E);\n \n             if Ekind (E) = E_Variable then\n+\n+               --  If the variable is local to the barrier function generated\n+               --  during expansion, it is ok. If expansion is not performed,\n+               --  then Func is Empty so this test cannot succeed.\n+\n                if Scope (E) = Func then\n                   null;\n "}, {"sha": "59d993200aa09b31ebca546df8f90bd840fdf505", "filename": "gcc/ada/g-dyntab.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fg-dyntab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fg-dyntab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dyntab.ads?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2013, AdaCore                     --\n+--                     Copyright (C) 2000-2015, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -58,7 +58,7 @@ generic\n package GNAT.Dynamic_Tables is\n \n    --  Table_Component_Type and Table_Index_Type specify the type of the\n-   --  array, Table_Low_Bound is the lower bound. Index_type must be an\n+   --  array, Table_Low_Bound is the lower bound. Table_Index_Type must be an\n    --  integer type. The effect is roughly to declare:\n \n    --    Table : array (Table_Low_Bound .. <>) of Table_Component_Type;"}, {"sha": "1b4b04c492d7bc2775fa2dda9c44805ee4f089aa", "filename": "gcc/ada/g-table.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fg-table.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fg-table.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.ads?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2013, AdaCore                     --\n+--                     Copyright (C) 1998-2015, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,7 +57,7 @@ package GNAT.Table is\n    pragma Elaborate_Body;\n \n    --  Table_Component_Type and Table_Index_Type specify the type of the\n-   --  array, Table_Low_Bound is the lower bound. Index_type must be an\n+   --  array, Table_Low_Bound is the lower bound. Table_Index_Type must be an\n    --  integer type. The effect is roughly to declare:\n \n    --    Table : array (Table_Index_Type range Table_Low_Bound .. <>)"}, {"sha": "1db30099317b11cf4e0190a81b5825e175718de8", "filename": "gcc/ada/init.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -46,6 +46,7 @@\n    that the __vxworks header appear before any other include.  */\n #ifdef __vxworks\n #include \"vxWorks.h\"\n+#include \"version.h\" /* for _WRS_VXWORKS_MAJOR */\n #endif\n \n #ifdef __ANDROID__\n@@ -1916,6 +1917,20 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n {\n   sigset_t mask;\n \n+  /* VxWorks 7 on e500v2 clears the SPE bit of the MSR when entering CPU\n+     exception state. To allow the handler and exception to work properly\n+     when they contain SPE instructions, we need to set it back before doing\n+     anything else. */\n+#if (CPU == PPCE500V2) && (_WRS_VXWORKS_MAJOR == 7)\n+  register unsigned msr;\n+  /* Read the MSR value */\n+  asm volatile (\"mfmsr %0\" : \"=r\" (msr));\n+  /* Force the SPE bit */\n+  msr |= 0x02000000;\n+  /* Store to MSR */\n+  asm volatile (\"mtmsr %0\" : : \"r\" (msr));\n+#endif\n+\n   /* VxWorks will always mask out the signal during the signal handler and\n      will reenable it on a longjmp.  GNAT does not generate a longjmp to\n      return from a signal handler so the signal will still be masked unless"}, {"sha": "185569bca195d29f213579f47d8c9f7fa23d8e3f", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -306,7 +306,7 @@ package Makeutl is\n    --  least equal to Minimum_Verbosity, then print Prefix to standard output\n    --  followed by N1 and S1. If N2 /= No_Name then N2 is printed after S1. S2\n    --  is printed last. Both N1 and N2 are printed in quotation marks. The two\n-   --  forms differ only in taking Name_Id or File_name_Type arguments.\n+   --  forms differ only in taking Name_Id or File_Name_Type arguments.\n \n    -------------------------\n    -- Program termination --"}, {"sha": "f473dc279b9a14e34033fcc8642e874298fa08cc", "filename": "gcc/ada/s-stposu.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fs-stposu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fs-stposu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stposu.ads?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -106,7 +106,7 @@ package System.Storage_Pools.Subpools is\n      (Pool : in out Root_Storage_Pool_With_Subpools)\n       return not null Subpool_Handle;\n    --  Return a common subpool which is used for object allocations without a\n-   --  Subpool_Handle_name in the allocator. The default implementation of this\n+   --  Subpool_Handle_Name in the allocator. The default implementation of this\n    --  routine raises Program_Error.\n \n    function Pool_Of_Subpool"}, {"sha": "fc24b35fa9b8e5d99f1aa054e95d249baf4897dd", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -4284,10 +4284,13 @@ package body Sem_Attr is\n \n             --  Locate the enclosing loop (if any). Note that Ada 2012 array\n             --  iteration may be expanded into several nested loops, we are\n-            --  interested in the outermost one which has the loop identifier.\n+            --  interested in the outermost one which has the loop identifier,\n+            --  and comes from source.\n \n             elsif Nkind (Stmt) = N_Loop_Statement\n               and then Present (Identifier (Stmt))\n+              and then Comes_From_Source (Original_Node (Stmt))\n+              and then Nkind (Original_Node (Stmt)) = N_Loop_Statement\n             then\n                Enclosing_Loop := Stmt;\n "}, {"sha": "18e3e3874296672e37037a5627383f4bc06b0a4f", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -5004,7 +5004,7 @@ package body Sem_Ch12 is\n          end loop;\n \n          if No (Renaming_Decl) then\n-            Append  (Unit_Renaming, Renaming_List);\n+            Append (Unit_Renaming, Renaming_List);\n          end if;\n       end Build_Subprogram_Renaming;\n "}, {"sha": "d340b8f385aada62c7763fc2222f2135875a19d2", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -3215,12 +3215,15 @@ package body Sem_Ch5 is\n             end if;\n          end if;\n \n-      --  Case of no identifier present\n+      --  Case of no identifier present. Create one and attach it to the\n+      --  loop statement for use as a scope and as a reference for later\n+      --  expansions. Indicate that the label does not come from source.\n \n       else\n          Ent := New_Internal_Entity (E_Loop, Current_Scope, Loc, 'L');\n          Set_Etype  (Ent, Standard_Void_Type);\n-         Set_Parent (Ent, N);\n+         Set_Identifier (N, New_Occurrence_Of (Ent, Loc));\n+         Set_Has_Created_Identifier (N);\n       end if;\n \n       --  Iteration over a container in Ada 2012 involves the creation of a"}, {"sha": "f626ea4b4a32de9347bf85465bbbc8f9d0571d9b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -6798,7 +6798,7 @@ package body Sem_Ch6 is\n          Next_Formal (Formal);\n       end loop;\n \n-      --  If Extra_formals were already created, don't do it again. This\n+      --  If Extra_Formals were already created, don't do it again. This\n       --  situation may arise for subprogram types created as part of\n       --  dispatching calls (see Expand_Dispatching_Call)\n "}, {"sha": "4788016738caf05d0fd0f0a1d017dfa92e17a477", "filename": "gcc/ada/table.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Ftable.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a72cd36ee1a0d2bb412f7e7353e30512627fe3/gcc%2Fada%2Ftable.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftable.ads?ref=03a72cd36ee1a0d2bb412f7e7353e30512627fe3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -55,8 +55,8 @@ package Table is\n    package Table is\n \n       --  Table_Component_Type and Table_Index_Type specify the type of the\n-      --  array, Table_Low_Bound is the lower bound. Index_type must be an\n-      --  integer type. The effect is roughly to declare:\n+      --  array, Table_Low_Bound is the lower bound. Table_Index_Type must be\n+      --  an integer type. The effect is roughly to declare:\n \n       --    Table : array (Table_Index_Type range Table_Low_Bound .. <>)\n       --                       of Table_Component_Type;"}]}