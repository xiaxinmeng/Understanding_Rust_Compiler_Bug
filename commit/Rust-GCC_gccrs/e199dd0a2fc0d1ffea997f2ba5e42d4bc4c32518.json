{"sha": "e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5OWRkMGEyZmMwZDFmZmVhOTk3ZjJiYTVlNDJkNGJjNGMzMjUxOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-02-10T15:06:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-10T15:06:20Z"}, "message": "re PR ipa/69241 (ICE with noreturn and function that return non-POD)\n\n\tPR ipa/69241\n\tPR c++/69649\n\t* gimplify.c (gimplify_modify_expr): Set lhs even for noreturn\n\tcalls if the return type is TREE_ADDRESSABLE.\n\t* cgraphunit.c (cgraph_node::expand_thunk): Likewise.\n\t* ipa-split.c (split_function): Fix doubled \"we\" in comment.\n\tUse void return type for the split part even if\n\t!split_point->split_part_set_retval.\n\n\t* g++.dg/ipa/pr69241-1.C: New test.\n\t* g++.dg/ipa/pr69241-2.C: New test.\n\t* g++.dg/ipa/pr69241-3.C: New test.\n\t* g++.dg/ipa/pr69649.C: New test.\n\nCo-Authored-By: Patrick Palka <ppalka@gcc.gnu.org>\n\nFrom-SVN: r233271", "tree": {"sha": "d04fa6cffeb76dd4444658f8e2f8360ed9d03342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d04fa6cffeb76dd4444658f8e2f8360ed9d03342"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6b38027a031b8a4b74ff54129e0689822f483fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b38027a031b8a4b74ff54129e0689822f483fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b38027a031b8a4b74ff54129e0689822f483fc"}], "stats": {"total": 115, "additions": 109, "deletions": 6}, "files": [{"sha": "38cdb6db00fa07686ac6f5ccbd22b859628942c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "patch": "@@ -1,3 +1,15 @@\n+2016-02-10  Jakub Jelinek  <jakub@redhat.com>\n+\t    Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR ipa/69241\n+\tPR c++/69649\n+\t* gimplify.c (gimplify_modify_expr): Set lhs even for noreturn\n+\tcalls if the return type is TREE_ADDRESSABLE.\n+\t* cgraphunit.c (cgraph_node::expand_thunk): Likewise.\n+\t* ipa-split.c (split_function): Fix doubled \"we\" in comment.\n+\tUse void return type for the split part even if\n+\t!split_point->split_part_set_retval.\n+\n 2016-02-10  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/68021"}, {"sha": "0a745f0f473bc02ba31bcc9cafeb05c9703d7da6", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "patch": "@@ -1701,7 +1701,8 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       bsi = gsi_start_bb (bb);\n \n       /* Build call to the function being thunked.  */\n-      if (!VOID_TYPE_P (restype) && !alias_is_noreturn)\n+      if (!VOID_TYPE_P (restype)\n+\t  && (!alias_is_noreturn || TREE_ADDRESSABLE (restype)))\n \t{\n \t  if (DECL_BY_REFERENCE (resdecl))\n \t    {\n@@ -1768,7 +1769,7 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \t      || DECL_BY_REFERENCE (resdecl)))\n         gimple_call_set_return_slot_opt (call, true);\n \n-      if (restmp && !alias_is_noreturn)\n+      if (restmp)\n \t{\n           gimple_call_set_lhs (call, restmp);\n \t  gcc_assert (useless_type_conversion_p (TREE_TYPE (restmp),"}, {"sha": "6aa9db2e9c6ba72734c35975eb4d00a9e3ef9a56", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "patch": "@@ -4828,7 +4828,8 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t    }\n \t}\n       notice_special_calls (call_stmt);\n-      if (!gimple_call_noreturn_p (call_stmt))\n+      if (!gimple_call_noreturn_p (call_stmt)\n+\t  || TREE_ADDRESSABLE (TREE_TYPE (*to_p)))\n \tgimple_call_set_lhs (call_stmt, *to_p);\n       assign = call_stmt;\n     }"}, {"sha": "21fd46f50c8ae3cdc32f038f2cd4c55914e48e1b", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "patch": "@@ -1254,7 +1254,7 @@ split_function (basic_block return_bb, struct split_point *split_point,\n       else\n \tmain_part_return_p = true;\n     }\n-  /* The main part also returns if we we split on a fallthru edge\n+  /* The main part also returns if we split on a fallthru edge\n      and the split part returns.  */\n   if (split_part_return_p)\n     FOR_EACH_EDGE (e, ei, split_point->entry_bb->preds)\n@@ -1364,8 +1364,9 @@ split_function (basic_block return_bb, struct split_point *split_point,\n   /* Now create the actual clone.  */\n   cgraph_edge::rebuild_edges ();\n   node = cur_node->create_version_clone_with_body\n-    (vNULL, NULL, args_to_skip, !split_part_return_p, split_point->split_bbs,\n-     split_point->entry_bb, \"part\");\n+    (vNULL, NULL, args_to_skip,\n+     !split_part_return_p || !split_point->split_part_set_retval,\n+     split_point->split_bbs, split_point->entry_bb, \"part\");\n \n   node->split_part = true;\n "}, {"sha": "5475bec275a69d4e5af7fa760d0dc96e13563752", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "patch": "@@ -1,3 +1,13 @@\n+2016-02-10  Jakub Jelinek  <jakub@redhat.com>\n+\t    Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR ipa/69241\n+\tPR c++/69649\n+\t* g++.dg/ipa/pr69241-1.C: New test.\n+\t* g++.dg/ipa/pr69241-2.C: New test.\n+\t* g++.dg/ipa/pr69241-3.C: New test.\n+\t* g++.dg/ipa/pr69649.C: New test.\n+\n 2016-02-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/tree-ssa/sra-17.c: Add -mcpu=ev4 for target alpha*-*-*."}, {"sha": "3e0502ac68cf6612c33ac436b742874def2f7760", "filename": "gcc/testsuite/g++.dg/ipa/pr69241-1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-1.C?ref=e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "patch": "@@ -0,0 +1,12 @@\n+// PR ipa/69241\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+struct R { R (const R &) {} };\n+__attribute__ ((noreturn)) R bar ();\n+\n+R\n+foo ()\n+{\n+  bar ();\n+}"}, {"sha": "bc79bbc738216559f0c69a2193fe2102bcb68ef8", "filename": "gcc/testsuite/g++.dg/ipa/pr69241-2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-2.C?ref=e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "patch": "@@ -0,0 +1,18 @@\n+// PR ipa/69241\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+__attribute__((noreturn)) void foo (int);\n+struct R { R (const R &) {} };\n+\n+R\n+bar ()\n+{\n+  foo (0);\n+}\n+\n+R\n+baz ()\n+{\n+  foo (0);\n+}"}, {"sha": "3894dc3daa677bb6e72d4d582cf7c4667523f8d2", "filename": "gcc/testsuite/g++.dg/ipa/pr69241-3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69241-3.C?ref=e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "patch": "@@ -0,0 +1,12 @@\n+// PR ipa/69241\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+struct R { int x[100]; };\n+__attribute__ ((noreturn)) R bar ();\n+\n+void\n+foo ()\n+{\n+  bar ();\n+}"}, {"sha": "1ad70dc8af7c5a7f5d5cddc164da3839c675a0e1", "filename": "gcc/testsuite/g++.dg/ipa/pr69649.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69649.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69649.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr69649.C?ref=e199dd0a2fc0d1ffea997f2ba5e42d4bc4c32518", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/69649\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+struct A { virtual void m1 (); };\n+struct C : A { void m1 () { m1 (); } };\n+template <class T> struct B\n+{\n+  T *t;\n+  B (T *x) : t (x) { if (t) t->m1 (); }\n+  B (const B &);\n+};\n+struct D : public C {};\n+struct F : public D\n+{\n+  virtual B<D> m2 ();\n+  virtual B<D> m3 ();\n+  int m4 ();\n+};\n+struct G : F\n+{\n+  B<D> m2 ();\n+  B<D> m3 ();\n+};\n+B<D> G::m2 ()\n+{\n+  if (m4 () == 0)\n+    return this;\n+  return 0;\n+}\n+B<D> G::m3 ()\n+{\n+  if (m4 () == 0)\n+    return this;\n+  return 0;\n+}"}]}