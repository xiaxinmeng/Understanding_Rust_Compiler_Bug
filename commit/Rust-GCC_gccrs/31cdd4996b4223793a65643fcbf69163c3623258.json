{"sha": "31cdd4996b4223793a65643fcbf69163c3623258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFjZGQ0OTk2YjQyMjM3OTNhNjU2NDNmY2JmNjkxNjNjMzYyMzI1OA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2001-08-12T01:46:15Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-12T01:46:15Z"}, "message": "defaults.h: Define PREFERRED_STACK_BOUNDARY to STACK_BOUNDARY if not already defined.\n\n\t* defaults.h: Define PREFERRED_STACK_BOUNDARY to\n\tSTACK_BOUNDARY if not already defined.\n\n\t* calls.c, function.c, reload1.c, explow.c: Don't default\n\tPREFERRED_STACK_BOUNDARY.  Remove all #if/#ifdef on\n\tPREFERRRED_STACK_BOUNDARY and/or STACK_BOUNDARY.\n\n\t* explow.c (allocate_dynamic_stack_space): Change unsafe #if\n\tto run-time test.\n\n\t* doc/tm.texi: Document that STACK_BOUNDARY is required;\n\tclarify difference between it and PREFERRED_STACK_BOUNDARY.\n\nFrom-SVN: r44814", "tree": {"sha": "4a0e1181985ae01e6097206b29b38dff92c54a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a0e1181985ae01e6097206b29b38dff92c54a52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31cdd4996b4223793a65643fcbf69163c3623258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31cdd4996b4223793a65643fcbf69163c3623258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31cdd4996b4223793a65643fcbf69163c3623258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31cdd4996b4223793a65643fcbf69163c3623258/comments", "author": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b2202656c555a659103f4ed7e140c5784613f33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2202656c555a659103f4ed7e140c5784613f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2202656c555a659103f4ed7e140c5784613f33"}], "stats": {"total": 75, "additions": 36, "deletions": 39}, "files": [{"sha": "04cc0916e56f8d1467dd7960107964793950bd6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31cdd4996b4223793a65643fcbf69163c3623258", "patch": "@@ -1,3 +1,18 @@\n+2001-08-11  Zack Weinberg  <zackw@panix.com>\n+\n+\t* defaults.h: Define PREFERRED_STACK_BOUNDARY to\n+\tSTACK_BOUNDARY if not already defined.\n+\n+\t* calls.c, function.c, reload1.c, explow.c: Don't default\n+\tPREFERRED_STACK_BOUNDARY.  Remove all #if/#ifdef on\n+\tPREFERRRED_STACK_BOUNDARY and/or STACK_BOUNDARY.\n+\n+\t* explow.c (allocate_dynamic_stack_space): Change unsafe #if\n+\tto run-time test.\n+\n+\t* doc/tm.texi: Document that STACK_BOUNDARY is required;\n+\tclarify difference between it and PREFERRED_STACK_BOUNDARY.\n+\n 2001-08-11  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cppmacro.c (enter_macro_context): Push macro expansions even"}, {"sha": "60178d7250658b8ef13e2eeb20456d0d8722346f", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=31cdd4996b4223793a65643fcbf69163c3623258", "patch": "@@ -37,10 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #define FUNCTION_OK_FOR_SIBCALL(DECL) 1\n #endif\n \n-#if !defined PREFERRED_STACK_BOUNDARY\n-#define PREFERRED_STACK_BOUNDARY STACK_BOUNDARY\n-#endif\n-\n /* Decide whether a function's arguments should be processed\n    from first to last or from last to first.\n "}, {"sha": "d20bc28f6ffadd86029f6fc0a4897a17b881d88a", "filename": "gcc/defaults.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=31cdd4996b4223793a65643fcbf69163c3623258", "patch": "@@ -352,6 +352,12 @@ do {\t\t\t\t\t\t\t\t\\\n #endif\n #endif\n \n+/* If PREFERRED_STACK_BOUNDARY is not defined, set it to STACK_BOUNDARY.\n+   STACK_BOUNDARY is required.  */\n+#ifndef PREFERRED_STACK_BOUNDARY\n+#define PREFERRED_STACK_BOUNDARY STACK_BOUNDARY\n+#endif\n+\n /* Select a format to encode pointers in exception handling data.  We\n    prefer those that result in fewer dynamic relocations.  Assume no\n    special support here and encode direct references.  */"}, {"sha": "60fc2d3acb327bb62d8c3a4d056e1ec80abd096b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=31cdd4996b4223793a65643fcbf69163c3623258", "patch": "@@ -1015,18 +1015,19 @@ size of an integer.\n \n @findex STACK_BOUNDARY\n @item STACK_BOUNDARY\n-Define this macro if there is a guaranteed alignment for the stack\n-pointer on this machine.  The definition is a C expression\n-for the desired alignment (measured in bits).  This value is used as a\n-default if @code{PREFERRED_STACK_BOUNDARY} is not defined.\n+Define this macro to the minimum alignment enforced by hardware for the\n+stack pointer on this machine.  The definition is a C expression for the\n+desired alignment (measured in bits).  This value is used as a default\n+if @code{PREFERRED_STACK_BOUNDARY} is not defined.  On most machines,\n+this should be the same as @code{PARM_BOUNDARY}.\n \n @findex PREFERRED_STACK_BOUNDARY\n @item PREFERRED_STACK_BOUNDARY\n-Define this macro if you wish to preserve a certain alignment for\n-the stack pointer.  The definition is a C expression\n-for the desired alignment (measured in bits).  If @code{STACK_BOUNDARY} is\n-also defined, this macro must evaluate to a value equal to or larger\n-than @code{STACK_BOUNDARY}.\n+Define this macro if you wish to preserve a certain alignment for the\n+stack pointer, greater than what the hardware enforces.  The definition\n+is a C expression for the desired alignment (measured in bits).  This\n+macro must evaluate to a value equal to or larger than\n+@code{STACK_BOUNDARY}.\n \n @findex FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN\n @item FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN"}, {"sha": "cf1faf86fa6ee034be7a44011ab63a3cdbeda123", "filename": "gcc/explow.c", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=31cdd4996b4223793a65643fcbf69163c3623258", "patch": "@@ -33,10 +33,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-config.h\"\n #include \"recog.h\"\n \n-#if !defined PREFERRED_STACK_BOUNDARY && defined STACK_BOUNDARY\n-#define PREFERRED_STACK_BOUNDARY STACK_BOUNDARY\n-#endif\n-\n static rtx break_out_memory_refs\tPARAMS ((rtx));\n static void emit_stack_probe\t\tPARAMS ((rtx));\n \n@@ -976,7 +972,6 @@ rtx\n round_push (size)\n      rtx size;\n {\n-#ifdef PREFERRED_STACK_BOUNDARY\n   int align = PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT;\n   if (align == 1)\n     return size;\n@@ -997,7 +992,6 @@ round_push (size)\n \t\t\t    NULL_RTX, 1);\n       size = expand_mult (Pmode, size, GEN_INT (align), NULL_RTX, 1);\n     }\n-#endif /* PREFERRED_STACK_BOUNDARY */\n   return size;\n }\n \f\n@@ -1260,9 +1254,7 @@ allocate_dynamic_stack_space (size, target, known_align)\n   /* We can't attempt to minimize alignment necessary, because we don't\n      know the final value of preferred_stack_boundary yet while executing\n      this code.  */\n-#ifdef PREFERRED_STACK_BOUNDARY\n   cfun->preferred_stack_boundary = PREFERRED_STACK_BOUNDARY;\n-#endif\n \n   /* We will need to ensure that the address we return is aligned to\n      BIGGEST_ALIGNMENT.  If STACK_DYNAMIC_OFFSET is defined, we don't\n@@ -1277,7 +1269,7 @@ allocate_dynamic_stack_space (size, target, known_align)\n      If we have to align, we must leave space in SIZE for the hole\n      that might result from the alignment operation.  */\n \n-#if defined (STACK_DYNAMIC_OFFSET) || defined (STACK_POINTER_OFFSET) || ! defined (PREFERRED_STACK_BOUNDARY)\n+#if defined (STACK_DYNAMIC_OFFSET) || defined (STACK_POINTER_OFFSET)\n #define MUST_ALIGN 1\n #else\n #define MUST_ALIGN (PREFERRED_STACK_BOUNDARY < BIGGEST_ALIGNMENT)\n@@ -1307,11 +1299,10 @@ allocate_dynamic_stack_space (size, target, known_align)\n \t/* See optimize_save_area_alloca to understand what is being\n \t   set up here.  */\n \n-#if !defined(PREFERRED_STACK_BOUNDARY) || !defined(MUST_ALIGN) || (PREFERRED_STACK_BOUNDARY != BIGGEST_ALIGNMENT)\n-\t/* If anyone creates a target with these characteristics, let them\n-\t   know that our optimization cannot work correctly in such a case.  */\n-\tabort ();\n-#endif\n+\t/* ??? Code below assumes that the save area needs maximal\n+\t   alignment.  This constraint may be too strong.  */\n+\tif (PREFERRED_STACK_BOUNDARY != BIGGEST_ALIGNMENT)\n+\t  abort ();\n \n \tif (GET_CODE (size) == CONST_INT)\n \t  {\n@@ -1357,23 +1348,19 @@ allocate_dynamic_stack_space (size, target, known_align)\n      way of knowing which systems have this problem.  So we avoid even\n      momentarily mis-aligning the stack.  */\n \n-#ifdef PREFERRED_STACK_BOUNDARY\n   /* If we added a variable amount to SIZE,\n      we can no longer assume it is aligned.  */\n #if !defined (SETJMP_VIA_SAVE_AREA)\n   if (MUST_ALIGN || known_align % PREFERRED_STACK_BOUNDARY != 0)\n #endif\n     size = round_push (size);\n-#endif\n \n   do_pending_stack_adjust ();\n \n  /* We ought to be called always on the toplevel and stack ought to be aligned\n     propertly.  */\n-#ifdef PREFERRED_STACK_BOUNDARY\n   if (stack_pointer_delta % (PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT))\n     abort ();\n-#endif\n \n   /* If needed, check that we have the required amount of stack.  Take into\n      account what has already been checked.  */"}, {"sha": "7a03d9cd73e52a60631a8e2a4f23db67cfa8570d", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=31cdd4996b4223793a65643fcbf69163c3623258", "patch": "@@ -67,10 +67,6 @@ Boston, MA 02111-1307, USA.  */\n #define LOCAL_ALIGNMENT(TYPE, ALIGNMENT) ALIGNMENT\n #endif\n \n-#ifndef PREFERRED_STACK_BOUNDARY\n-#define PREFERRED_STACK_BOUNDARY STACK_BOUNDARY\n-#endif\n-\n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n    give the same symbol without quotes for an alternative entry point.  You"}, {"sha": "e2f895af47406da56cadd8d28f6e16ae708d8062", "filename": "gcc/reload1.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cdd4996b4223793a65643fcbf69163c3623258/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=31cdd4996b4223793a65643fcbf69163c3623258", "patch": "@@ -41,10 +41,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"except.h\"\n \n-#if !defined PREFERRED_STACK_BOUNDARY && defined STACK_BOUNDARY\n-#define PREFERRED_STACK_BOUNDARY STACK_BOUNDARY\n-#endif\n-\n /* This file contains the reload pass of the compiler, which is\n    run after register allocation has been done.  It checks that\n    each insn is valid (operands required to be in registers really"}]}