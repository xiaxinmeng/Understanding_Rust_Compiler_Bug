{"sha": "ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMwNGFhZDc2ZDVhNGFjNDc1OWE3OGEwNGNiZDk1MGY0YTFlOTUxNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-25T15:32:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-25T15:32:37Z"}, "message": "Fix error handling in copy_file and equivalent\n\n\t* src/filesystem/ops.cc (do_copy_file): Report an error if source or\n\tdestination is not a regular file (LWG 2712).\n\t(equivalent): Fix error handling and result when only one file exists.\n\t* testsuite/experimental/filesystem/operations/copy.cc: Remove files\n\tcreated by tests. Test copying directories.\n\t* testsuite/experimental/filesystem/operations/copy_file.cc: Remove\n\tfiles created by tests.\n\t* testsuite/experimental/filesystem/operations/equivalent.cc: New.\n\t* testsuite/experimental/filesystem/operations/is_empty.cc: New.\n\t* testsuite/experimental/filesystem/operations/read_symlink.cc: Remove\n\tfile created by test.\n\t* testsuite/experimental/filesystem/operations/remove_all.cc: New.\n\t* testsuite/util/testsuite_fs.h (~scoped_file): Only try to remove\n\tfile if path is non-empty, to support removal by other means.\n\nFrom-SVN: r241521", "tree": {"sha": "ed5e0dc857b8a43f528b75b3830ab61dd7929917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed5e0dc857b8a43f528b75b3830ab61dd7929917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cf1719bc07ade2e96d47c7bae00d1203c847ee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf1719bc07ade2e96d47c7bae00d1203c847ee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cf1719bc07ade2e96d47c7bae00d1203c847ee0"}], "stats": {"total": 381, "additions": 368, "deletions": 13}, "files": [{"sha": "5086417d4635bddd477a46f8faf0eb202f3b50c1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "patch": "@@ -1,3 +1,20 @@\n+2016-10-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/filesystem/ops.cc (do_copy_file): Report an error if source or\n+\tdestination is not a regular file (LWG 2712).\n+\t(equivalent): Fix error handling and result when only one file exists.\n+\t* testsuite/experimental/filesystem/operations/copy.cc: Remove files\n+\tcreated by tests. Test copying directories.\n+\t* testsuite/experimental/filesystem/operations/copy_file.cc: Remove\n+\tfiles created by tests.\n+\t* testsuite/experimental/filesystem/operations/equivalent.cc: New.\n+\t* testsuite/experimental/filesystem/operations/is_empty.cc: New.\n+\t* testsuite/experimental/filesystem/operations/read_symlink.cc: Remove\n+\tfile created by test.\n+\t* testsuite/experimental/filesystem/operations/remove_all.cc: New.\n+\t* testsuite/util/testsuite_fs.h (~scoped_file): Only try to remove\n+\tfile if path is non-empty, to support removal by other means.\n+\n 2016-10-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/filesystem/ops.cc (is_empty): Fix error handling."}, {"sha": "fcf747e6a01afb2159213e60fcb33a65414d94b1", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "patch": "@@ -350,6 +350,8 @@ namespace\n \t  from_st = &st2;\n       }\n     f = make_file_status(*from_st);\n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+    // 2712. copy_file() has a number of unspecified error conditions\n     if (!is_regular_file(f))\n       {\n \tec = std::make_error_code(std::errc::not_supported);\n@@ -360,8 +362,13 @@ namespace\n \n     if (exists(t))\n       {\n-\tif (!is_other(t) && !is_other(f)\n-\t    && to_st->st_dev == from_st->st_dev\n+\tif (!is_regular_file(t))\n+\t  {\n+\t    ec = std::make_error_code(std::errc::not_supported);\n+\t    return false;\n+\t  }\n+\n+\tif (to_st->st_dev == from_st->st_dev\n \t    && to_st->st_ino == from_st->st_ino)\n \t  {\n \t    ec = std::make_error_code(std::errc::file_exists);\n@@ -912,7 +919,7 @@ fs::equivalent(const path& p1, const path& p2)\n {\n   error_code ec;\n   auto result = equivalent(p1, p2, ec);\n-  if (ec.value())\n+  if (ec)\n     _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"cannot check file equivalence\",\n \t  p1, p2, ec));\n   return result;\n@@ -922,25 +929,42 @@ bool\n fs::equivalent(const path& p1, const path& p2, error_code& ec) noexcept\n {\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n+  int err = 0;\n+  file_status s1, s2;\n   stat_type st1, st2;\n-  if (::stat(p1.c_str(), &st1) == 0 && ::stat(p2.c_str(), &st2) == 0)\n+  if (::stat(p1.c_str(), &st1) == 0)\n+    s1 = make_file_status(st1);\n+  else if (is_not_found_errno(errno))\n+    s1.type(file_type::not_found);\n+  else\n+    err = errno;\n+\n+  if (::stat(p2.c_str(), &st2) == 0)\n+    s2 = make_file_status(st2);\n+  else if (is_not_found_errno(errno))\n+    s2.type(file_type::not_found);\n+  else\n+    err = errno;\n+\n+  if (exists(s1) && exists(s2))\n     {\n-      file_status s1 = make_file_status(st1);\n-      file_status s2 = make_file_status(st2);\n       if (is_other(s1) && is_other(s2))\n \t{\n \t  ec = std::make_error_code(std::errc::not_supported);\n \t  return false;\n \t}\n       ec.clear();\n+      if (is_other(s1) || is_other(s2))\n+\treturn false;\n       return st1.st_dev == st2.st_dev && st1.st_ino == st2.st_ino;\n     }\n-  else if (is_not_found_errno(errno))\n-    {\n-      ec = std::make_error_code(std::errc::no_such_file_or_directory);\n-      return false;\n-    }\n-  ec.assign(errno, std::generic_category());\n+  else if (!exists(s1) && !exists(s2))\n+    ec = std::make_error_code(std::errc::no_such_file_or_directory);\n+  else if (err)\n+    ec.assign(err, std::generic_category());\n+  else\n+    ec.clear();\n+  return false;\n #else\n   ec = std::make_error_code(std::errc::not_supported);\n #endif"}, {"sha": "7173788c4511f5b9f74bfe89c8ce1a987a60834d", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/copy.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc?ref=ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "patch": "@@ -128,6 +128,9 @@ test03()\n   fs::copy(from, to);\n   VERIFY( fs::exists(to) );\n   VERIFY( fs::file_size(to) == fs::file_size(from) );\n+\n+  remove(from);\n+  remove(to);\n }\n \n // Test is_directory(f) case.\n@@ -138,6 +141,37 @@ test04()\n   auto to = __gnu_test::nonexistent_path();\n   std::error_code ec;\n \n+  create_directories(from/\"a/b/c\");\n+\n+  {\n+    __gnu_test::scoped_file f(to);\n+    copy(from, to, ec);\n+    VERIFY( ec );\n+  }\n+\n+  __gnu_test::scoped_file f1(from/\"a/f1\");\n+  std::ofstream{f1.path} << \"file one\";\n+  __gnu_test::scoped_file f2(from/\"a/b/f2\");\n+  std::ofstream{f2.path} << \"file two\";\n+\n+  copy(from, to, ec);\n+  VERIFY( !ec );\n+  VERIFY( exists(to) && is_empty(to) );\n+  remove(to);\n+\n+  copy(from, to, fs::copy_options::recursive, ec);\n+  VERIFY( !ec );\n+  VERIFY( exists(to) && !is_empty(to) );\n+  VERIFY( is_regular_file(to/\"a/f1\") && !is_empty(to/\"a/f1\") );\n+  VERIFY( file_size(from/\"a/f1\") == file_size(to/\"a/f1\") );\n+  VERIFY( is_regular_file(to/\"a/b/f2\") && !is_empty(to/\"a/b/f2\") );\n+  VERIFY( file_size(from/\"a/b/f2\") == file_size(to/\"a/b/f2\") );\n+  VERIFY( is_directory(to/\"a/b/c\") && is_empty(to/\"a/b/c\") );\n+\n+  f1.path.clear();\n+  f2.path.clear();\n+  remove_all(from, ec);\n+  remove_all(to, ec);\n }\n \n // Test no-op cases."}, {"sha": "1e487cd0b0cc80be826f4a6ab9978a7b53c9d020", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/copy_file.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy_file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy_file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy_file.cc?ref=ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "patch": "@@ -73,6 +73,9 @@ test01()\n   VERIFY( !ec );\n   VERIFY( exists(to) );\n   VERIFY( file_size(to) == file_size(from) );\n+\n+  remove(from);\n+  remove(to);\n }\n \n int"}, {"sha": "77ed05477122409e1912aec6a82a19514571a918", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/equivalent.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fequivalent.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fequivalent.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fequivalent.cc?ref=ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-lstdc++fs\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <experimental/filesystem>\n+#include <testsuite_fs.h>\n+#include <testsuite_hooks.h>\n+\n+namespace fs = std::experimental::filesystem;\n+\n+\n+void\n+test01()\n+{\n+  auto p1 = __gnu_test::nonexistent_path();\n+  auto p2 = __gnu_test::nonexistent_path();\n+  std::error_code ec;\n+  bool result;\n+\n+  result = equivalent(p1, p2, ec);\n+  VERIFY( ec );\n+  VERIFY( !result );\n+  const auto bad_ec = ec;\n+\n+  __gnu_test::scoped_file f1(p1);\n+  result = equivalent(p1, p2, ec);\n+  VERIFY( !ec );\n+  VERIFY( !result );\n+\n+  __gnu_test::scoped_file f2(p2);\n+  ec = bad_ec;\n+  result = equivalent(p1, p2, ec);\n+  VERIFY( !ec );\n+  VERIFY( !result );\n+\n+  auto p3 = __gnu_test::nonexistent_path();\n+  create_hard_link(p1, p3, ec);\n+  if (ec)\n+    return;  // hard links not supported\n+  __gnu_test::scoped_file f3(p3, __gnu_test::scoped_file::adopt_file);\n+\n+  ec = bad_ec;\n+  result = equivalent(p1, p3, ec);\n+  VERIFY( !ec );\n+  VERIFY( result );\n+\n+  ec = bad_ec;\n+  result = equivalent(p2, p3, ec);\n+  VERIFY( !ec );\n+  VERIFY( !result );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "d35967a81731578f866d98311bf26c16fa881f8f", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/is_empty.cc", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc?ref=ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "patch": "@@ -0,0 +1,109 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-lstdc++fs\" }\n+// { dg-do run { target c++11 } }E\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <experimental/filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+namespace fs = std::experimental::filesystem;\n+\n+void\n+test01()\n+{\n+  auto p = __gnu_test::nonexistent_path();\n+  create_directory(p);\n+  permissions(p, fs::perms::none);\n+  std::error_code ec, ec2;\n+\n+  bool result = fs::is_empty(p, ec);\n+  VERIFY( ec == std::make_error_code(std::errc::permission_denied) );\n+  VERIFY( !result );\n+\n+  try {\n+    fs::is_empty(p);\n+  } catch (const fs::filesystem_error& e) {\n+    ec2 = e.code();\n+  }\n+  VERIFY( ec2 == ec );\n+\n+  result = fs::is_empty(p/\"f\", ec);\n+  VERIFY( ec == std::make_error_code(std::errc::permission_denied) );\n+  VERIFY( !result );\n+\n+  try {\n+    fs::is_empty(p/\"f\");\n+  } catch (const fs::filesystem_error& e) {\n+    ec2 = e.code();\n+  }\n+  VERIFY( ec2 == ec );\n+\n+  permissions(p, fs::perms::owner_all, ec);\n+  remove_all(p, ec);\n+}\n+\n+void\n+test02()\n+{\n+  auto p = __gnu_test::nonexistent_path();\n+  create_directory(p);\n+  std::error_code ec, bad_ec = make_error_code(std::errc::invalid_argument);\n+  bool empty;\n+\n+  ec = bad_ec;\n+  empty = is_empty(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( empty );\n+  empty = is_empty(p);\n+  VERIFY( empty );\n+\n+  __gnu_test::scoped_file f(p/\"f\");\n+  ec = bad_ec;\n+  empty = is_empty(f.path, ec);\n+  VERIFY( !ec );\n+  VERIFY( empty );\n+  empty = is_empty(f.path);\n+  VERIFY( empty );\n+\n+  std::ofstream{f.path.native()} << \"data\";\n+  ec = bad_ec;\n+  empty = is_empty(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( !empty );\n+  empty = is_empty(p);\n+  VERIFY( !empty );\n+\n+  ec = bad_ec;\n+  empty = is_empty(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( !empty );\n+  empty = is_empty(p);\n+  VERIFY( !empty );\n+\n+  f.path.clear();\n+  remove_all(p, ec);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "c67b3184fdb256a80fa4995822d625af05427566", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/read_symlink.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc?ref=ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "patch": "@@ -40,6 +40,8 @@ test01()\n   auto result = read_symlink(p, ec);\n   VERIFY( !ec );\n   VERIFY( result == tgt );\n+\n+  remove(p);\n }\n \n int"}, {"sha": "57d15af9c5cb43dec018b2b5d4a9ab979346e7fe", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/remove_all.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "patch": "@@ -0,0 +1,92 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-lstdc++fs\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <experimental/filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+namespace fs = std::experimental::filesystem;\n+\n+void\n+test01()\n+{\n+  std::error_code ec;\n+  std::uintmax_t n;\n+\n+  n = fs::remove_all(\"\", ec);\n+  VERIFY( ec );\n+  VERIFY( n == std::uintmax_t(-1) );\n+\n+  auto p = __gnu_test::nonexistent_path();\n+  ec.clear();\n+  n = remove_all(p, ec);\n+  VERIFY( ec );\n+  VERIFY( n == std::uintmax_t(-1) );\n+\n+  const auto bad_ec = ec;\n+  auto link = __gnu_test::nonexistent_path();\n+  create_symlink(p, link);  // dangling symlink\n+  ec = bad_ec;\n+  n = remove_all(link, ec);\n+  VERIFY( !ec );\n+  VERIFY( n == 1 );\n+  VERIFY( !exists(symlink_status(link)) ); // DR 2721\n+\n+  __gnu_test::scoped_file f(p);\n+  create_symlink(p, link);\n+  ec = bad_ec;\n+  n = remove_all(link, ec);\n+  VERIFY( !ec );\n+  VERIFY( n == 1 );\n+  VERIFY( !exists(symlink_status(link)) );  // The symlink is removed, but\n+  VERIFY( exists(p) );                      // its target is not.\n+\n+  auto dir = __gnu_test::nonexistent_path();\n+  create_directories(dir/\"a/b/c\");\n+  ec = bad_ec;\n+  n = remove_all(dir/\"a\", ec);\n+  VERIFY( !ec );\n+  VERIFY( n == 3 );\n+  VERIFY( exists(dir) );\n+  VERIFY( !exists(dir/\"a\") );\n+\n+  create_directories(dir/\"a/b/c\");\n+  __gnu_test::scoped_file a1(dir/\"a/1\");\n+  __gnu_test::scoped_file a2(dir/\"a/2\");\n+  __gnu_test::scoped_file b1(dir/\"a/b/1\");\n+  __gnu_test::scoped_file b2(dir/\"a/b/2\");\n+  ec = bad_ec;\n+  n = remove_all(dir, ec);\n+  VERIFY( !ec );\n+  VERIFY( n == 8 );\n+  VERIFY( !exists(dir) );\n+\n+  a1.path.clear();\n+  a2.path.clear();\n+  b1.path.clear();\n+  b2.path.clear();\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "7d9b20c2b72d62d6a59b9d7efd822aaffdcf85c4", "filename": "libstdc++-v3/testsuite/util/testsuite_fs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec04aad76d5a4ac4759a78a04cbd950f4a1e9517/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h?ref=ec04aad76d5a4ac4759a78a04cbd950f4a1e9517", "patch": "@@ -107,7 +107,7 @@ namespace __gnu_test\n \n     scoped_file(path_type p, adopt_file_t) : path(p) { }\n \n-    ~scoped_file() { remove(path); }\n+    ~scoped_file() { if (!path.empty()) remove(path); }\n \n     path_type path;\n   };"}]}