{"sha": "5149f0701c126f74f3cccf53b14175374fe3a7e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE0OWYwNzAxYzEyNmY3NGYzY2NjZjUzYjE0MTc1Mzc0ZmUzYTdlOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-05-27T10:15:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-05-27T10:15:57Z"}, "message": "basic-block.h (PEOP_SCAN_DEAD_STORES): New.\n\n\n\t* basic-block.h (PEOP_SCAN_DEAD_STORES): New.\n\t(PROP_FINAL): Include.\n\t* flow.c (life_analysis, update_life_info,\n\tinit_propagate_block_info, mark_set_1, mark_used_rgs):\n\tSupport SCAN_DEAD_STORE.\n\nFrom-SVN: r53920", "tree": {"sha": "da9f1e46251a76c45311b1d2ca5dc31b4bb913a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da9f1e46251a76c45311b1d2ca5dc31b4bb913a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5149f0701c126f74f3cccf53b14175374fe3a7e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5149f0701c126f74f3cccf53b14175374fe3a7e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5149f0701c126f74f3cccf53b14175374fe3a7e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5149f0701c126f74f3cccf53b14175374fe3a7e9/comments", "author": null, "committer": null, "parents": [{"sha": "c9715013ff4d33a50893e10339c32cb88185edea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9715013ff4d33a50893e10339c32cb88185edea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9715013ff4d33a50893e10339c32cb88185edea"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "8f6a1c594063b601507833fc1fbf8761f3be4faa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5149f0701c126f74f3cccf53b14175374fe3a7e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5149f0701c126f74f3cccf53b14175374fe3a7e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5149f0701c126f74f3cccf53b14175374fe3a7e9", "patch": "@@ -1,3 +1,11 @@\n+Mon May 27 12:14:02 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* basic-block.h (PEOP_SCAN_DEAD_STORES): New.\n+\t(PROP_FINAL): Include.\n+\t* flow.c (life_analysis, update_life_info,\n+\tinit_propagate_block_info, mark_set_1, mark_used_rgs):\n+\tSupport SCAN_DEAD_STORE.\n+\n 2002-05-27  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-common.c (c_common_init): Set CPP arithmetic precision."}, {"sha": "e88871f2cb45d9755a3d685e761a4e3d321adf43", "filename": "gcc/basic-block.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5149f0701c126f74f3cccf53b14175374fe3a7e9/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5149f0701c126f74f3cccf53b14175374fe3a7e9/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=5149f0701c126f74f3cccf53b14175374fe3a7e9", "patch": "@@ -582,7 +582,12 @@ enum update_life_extent\n \t\t\t\t\t   by dead code removal.  */\n #define PROP_AUTOINC\t\t64\t/* Create autoinc mem references.  */\n #define PROP_EQUAL_NOTES\t128\t/* Take into account REG_EQUAL notes.  */\n-#define PROP_FINAL\t\t127\t/* All of the above.  */\n+#define PROP_SCAN_DEAD_STORES\t256\t/* Scan for dead code.  */\n+#define PROP_FINAL\t\t(PROP_DEATH_NOTES | PROP_LOG_LINKS  \\\n+\t\t\t\t | PROP_REG_INFO | PROP_KILL_DEAD_CODE  \\\n+\t\t\t\t | PROP_SCAN_DEAD_CODE | PROP_AUTOINC \\\n+\t\t\t\t | PROP_ALLOW_CFG_CHANGES \\\n+\t\t\t\t | PROP_SCAN_DEAD_STORES)\n \n #define CLEANUP_EXPENSIVE\t1\t/* Do relativly expensive optimizations\n \t\t\t\t\t   except for edge forwarding */"}, {"sha": "4719dcce4186f70693ba3f91b40e642f29288dbf", "filename": "gcc/flow.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5149f0701c126f74f3cccf53b14175374fe3a7e9/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5149f0701c126f74f3cccf53b14175374fe3a7e9/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=5149f0701c126f74f3cccf53b14175374fe3a7e9", "patch": "@@ -447,7 +447,7 @@ life_analysis (f, file, flags)\n     flags &= ~(PROP_REG_INFO | PROP_AUTOINC);\n \n   /* We want alias analysis information for local dead store elimination.  */\n-  if (optimize && (flags & PROP_SCAN_DEAD_CODE))\n+  if (optimize && (flags & PROP_SCAN_DEAD_STORES))\n     init_alias_analysis ();\n \n   /* Always remove no-op moves.  Do this before other processing so\n@@ -477,7 +477,7 @@ life_analysis (f, file, flags)\n   update_life_info (NULL, UPDATE_LIFE_GLOBAL, flags);\n \n   /* Clean up.  */\n-  if (optimize && (flags & PROP_SCAN_DEAD_CODE))\n+  if (optimize && (flags & PROP_SCAN_DEAD_STORES))\n     end_alias_analysis ();\n \n   if (file)\n@@ -646,6 +646,7 @@ update_life_info (blocks, extent, prop_flags)\n \n \t  calculate_global_regs_live (blocks, blocks,\n \t\t\t\tprop_flags & (PROP_SCAN_DEAD_CODE\n+\t\t\t\t\t      | PROP_SCAN_DEAD_STORES\n \t\t\t\t\t      | PROP_ALLOW_CFG_CHANGES));\n \n \t  if ((prop_flags & (PROP_KILL_DEAD_CODE | PROP_ALLOW_CFG_CHANGES))\n@@ -659,6 +660,7 @@ update_life_info (blocks, extent, prop_flags)\n \t      COPY_REG_SET (tmp, bb->global_live_at_end);\n \t      changed |= propagate_block (bb, tmp, NULL, NULL,\n \t\t\t\tprop_flags & (PROP_SCAN_DEAD_CODE\n+\t\t\t\t\t      | PROP_SCAN_DEAD_STORES\n \t\t\t\t\t      | PROP_KILL_DEAD_CODE));\n \t    }\n \n@@ -667,7 +669,8 @@ update_life_info (blocks, extent, prop_flags)\n \t     removing dead code can affect global register liveness, which\n \t     is supposed to be finalized for this call after this loop.  */\n \t  stabilized_prop_flags\n-\t    &= ~(PROP_SCAN_DEAD_CODE | PROP_KILL_DEAD_CODE);\n+\t    &= ~(PROP_SCAN_DEAD_CODE | PROP_SCAN_DEAD_STORES\n+\t\t | PROP_KILL_DEAD_CODE);\n \n \t  if (! changed)\n \t    break;\n@@ -1922,7 +1925,7 @@ init_propagate_block_info (bb, live, local_set, cond_local_set, flags)\n       && ! (TREE_CODE (TREE_TYPE (current_function_decl)) == FUNCTION_TYPE\n \t    && (TYPE_RETURNS_STACK_DEPRESSED\n \t\t(TREE_TYPE (current_function_decl))))\n-      && (flags & PROP_SCAN_DEAD_CODE)\n+      && (flags & PROP_SCAN_DEAD_STORES)\n       && (bb->succ == NULL\n \t  || (bb->succ->succ_next == NULL\n \t      && bb->succ->dest == EXIT_BLOCK_PTR\n@@ -2609,7 +2612,7 @@ mark_set_1 (pbi, code, reg, cond, insn, flags)\n \n   /* If this set is a MEM, then it kills any aliased writes.\n      If this set is a REG, then it kills any MEMs which use the reg.  */\n-  if (optimize && (flags & PROP_SCAN_DEAD_CODE))\n+  if (optimize && (flags & PROP_SCAN_DEAD_STORES))\n     {\n       if (GET_CODE (reg) == REG)\n \tinvalidate_mems_from_set (pbi, reg);\n@@ -3712,7 +3715,7 @@ mark_used_regs (pbi, x, cond, insn)\n     case MEM:\n       /* Don't bother watching stores to mems if this is not the\n \t final pass.  We'll not be deleting dead stores this round.  */\n-      if (optimize && (flags & PROP_SCAN_DEAD_CODE))\n+      if (optimize && (flags & PROP_SCAN_DEAD_STORES))\n \t{\n \t  /* Invalidate the data for the last MEM stored, but only if MEM is\n \t     something that can be stored into.  */"}]}