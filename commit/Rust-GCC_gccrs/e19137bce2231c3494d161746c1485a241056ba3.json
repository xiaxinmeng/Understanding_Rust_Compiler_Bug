{"sha": "e19137bce2231c3494d161746c1485a241056ba3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5MTM3YmNlMjIzMWMzNDk0ZDE2MTc0NmMxNDg1YTI0MTA1NmJhMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-24T15:52:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-24T15:52:45Z"}, "message": "[multiple changes]\n\n2014-02-24  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb (Traverse_One): Refine categorization of statement\n\tSCOs.\n\n2014-02-24  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads, aspects.adb: Remove aspects Ada_2005 and Ada_2012,\n\tPure_05, Pure_12 and Preelaborate_05.\n\t* gnat_rm.texi: Update accordingly.\n\t* sem_prag.adb: Document one argument form of Ada_05/Ada_2005\n\tpragmas Document one argument form of Ada_12/Ada_2012 pragmas\n\tRecognize one argument form of these pragmas only in GNAT mode\n\t(-gnatg).\n\nFrom-SVN: r208072", "tree": {"sha": "45da60a5e29914e3174fcd1b61eae9258a2cbe0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45da60a5e29914e3174fcd1b61eae9258a2cbe0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e19137bce2231c3494d161746c1485a241056ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19137bce2231c3494d161746c1485a241056ba3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e19137bce2231c3494d161746c1485a241056ba3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19137bce2231c3494d161746c1485a241056ba3/comments", "author": null, "committer": null, "parents": [{"sha": "1037b0f46276a61dc28319562c97180aaaaa9b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1037b0f46276a61dc28319562c97180aaaaa9b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1037b0f46276a61dc28319562c97180aaaaa9b80"}], "stats": {"total": 125, "additions": 78, "deletions": 47}, "files": [{"sha": "ce741ff584f8eaea4e847c221833a66052c2dc3e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e19137bce2231c3494d161746c1485a241056ba3", "patch": "@@ -1,3 +1,18 @@\n+2014-02-24  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb (Traverse_One): Refine categorization of statement\n+\tSCOs.\n+\n+2014-02-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Remove aspects Ada_2005 and Ada_2012,\n+\tPure_05, Pure_12 and Preelaborate_05.\n+\t* gnat_rm.texi: Update accordingly.\n+\t* sem_prag.adb: Document one argument form of Ada_05/Ada_2005\n+\tpragmas Document one argument form of Ada_12/Ada_2012 pragmas\n+\tRecognize one argument form of these pragmas only in GNAT mode\n+\t(-gnatg).\n+\n 2014-02-24  Ed Schonberg  <schonberg@adacore.com>\n \n \t* s-dimmks.ads: Replace symbol for temperature, previously the"}, {"sha": "fd044fef07f22be476ac074910a0c9137b009f7e", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=e19137bce2231c3494d161746c1485a241056ba3", "patch": "@@ -492,8 +492,6 @@ package body Aspects is\n    Canonical_Aspect : constant array (Aspect_Id) of Aspect_Id :=\n    (No_Aspect                           => No_Aspect,\n     Aspect_Abstract_State               => Aspect_Abstract_State,\n-    Aspect_Ada_2005                     => Aspect_Ada_2005,\n-    Aspect_Ada_2012                     => Aspect_Ada_2005,\n     Aspect_Address                      => Aspect_Address,\n     Aspect_Alignment                    => Aspect_Alignment,\n     Aspect_All_Calls_Remote             => Aspect_All_Calls_Remote,\n@@ -557,12 +555,9 @@ package body Aspects is\n     Aspect_Precondition                 => Aspect_Pre,\n     Aspect_Predicate                    => Aspect_Predicate,\n     Aspect_Preelaborate                 => Aspect_Preelaborate,\n-    Aspect_Preelaborate_05              => Aspect_Preelaborate_05,\n     Aspect_Preelaborable_Initialization => Aspect_Preelaborable_Initialization,\n     Aspect_Priority                     => Aspect_Priority,\n     Aspect_Pure                         => Aspect_Pure,\n-    Aspect_Pure_05                      => Aspect_Pure_05,\n-    Aspect_Pure_12                      => Aspect_Pure_12,\n     Aspect_Pure_Function                => Aspect_Pure_Function,\n     Aspect_Refined_Depends              => Aspect_Refined_Depends,\n     Aspect_Refined_Global               => Aspect_Refined_Global,"}, {"sha": "a5e3bbc06b4edaf64e065d12cb463e75cc621494", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=e19137bce2231c3494d161746c1485a241056ba3", "patch": "@@ -146,10 +146,7 @@ package Aspects is\n       Aspect_Compiler_Unit,                 -- GNAT\n       Aspect_Elaborate_Body,\n       Aspect_Preelaborate,\n-      Aspect_Preelaborate_05,               -- GNAT\n       Aspect_Pure,\n-      Aspect_Pure_05,                       -- GNAT\n-      Aspect_Pure_12,                       -- GNAT\n       Aspect_Remote_Call_Interface,\n       Aspect_Remote_Types,\n       Aspect_Shared_Passive,\n@@ -162,8 +159,6 @@ package Aspects is\n       --  the aspect value is inherited from the parent, in which case, we do\n       --  not allow False if we inherit a True value from the parent.\n \n-      Aspect_Ada_2005,                      -- GNAT\n-      Aspect_Ada_2012,                      -- GNAT\n       Aspect_Async_Readers,                 -- GNAT\n       Aspect_Async_Writers,                 -- GNAT\n       Aspect_Asynchronous,\n@@ -220,8 +215,6 @@ package Aspects is\n \n    Implementation_Defined_Aspect : constant array (Aspect_Id) of Boolean :=\n      (Aspect_Abstract_State           => True,\n-      Aspect_Ada_2005                 => True,\n-      Aspect_Ada_2012                 => True,\n       Aspect_Async_Readers            => True,\n       Aspect_Async_Writers            => True,\n       Aspect_Compiler_Unit            => True,\n@@ -239,9 +232,6 @@ package Aspects is\n       Aspect_Object_Size              => True,\n       Aspect_Persistent_BSS           => True,\n       Aspect_Predicate                => True,\n-      Aspect_Preelaborate_05          => True,\n-      Aspect_Pure_05                  => True,\n-      Aspect_Pure_12                  => True,\n       Aspect_Pure_Function            => True,\n       Aspect_Remote_Access_Type       => True,\n       Aspect_Scalar_Storage_Order     => True,\n@@ -282,7 +272,7 @@ package Aspects is\n    --  aspect is enabled. If it is False, the aspect is disabled.\n \n    subtype Boolean_Aspects is\n-     Aspect_Id range Aspect_Ada_2005 .. Aspect_Id'Last;\n+     Aspect_Id range Aspect_Async_Readers .. Aspect_Id'Last;\n \n    subtype Pre_Post_Aspects is\n      Aspect_Id range Aspect_Post .. Aspect_Precondition;\n@@ -377,8 +367,6 @@ package Aspects is\n    Aspect_Names : constant array (Aspect_Id) of Name_Id :=\n      (No_Aspect                           => No_Name,\n       Aspect_Abstract_State               => Name_Abstract_State,\n-      Aspect_Ada_2005                     => Name_Ada_2005,\n-      Aspect_Ada_2012                     => Name_Ada_2012,\n       Aspect_Address                      => Name_Address,\n       Aspect_Alignment                    => Name_Alignment,\n       Aspect_All_Calls_Remote             => Name_All_Calls_Remote,\n@@ -443,11 +431,8 @@ package Aspects is\n       Aspect_Predicate                    => Name_Predicate,\n       Aspect_Preelaborable_Initialization => Name_Preelaborable_Initialization,\n       Aspect_Preelaborate                 => Name_Preelaborate,\n-      Aspect_Preelaborate_05              => Name_Preelaborate_05,\n       Aspect_Priority                     => Name_Priority,\n       Aspect_Pure                         => Name_Pure,\n-      Aspect_Pure_05                      => Name_Pure_05,\n-      Aspect_Pure_12                      => Name_Pure_12,\n       Aspect_Pure_Function                => Name_Pure_Function,\n       Aspect_Read                         => Name_Read,\n       Aspect_Refined_Depends              => Name_Refined_Depends,\n@@ -646,11 +631,8 @@ package Aspects is\n       Aspect_Predicate                    => Always_Delay,\n       Aspect_Preelaborable_Initialization => Always_Delay,\n       Aspect_Preelaborate                 => Always_Delay,\n-      Aspect_Preelaborate_05              => Always_Delay,\n       Aspect_Priority                     => Always_Delay,\n       Aspect_Pure                         => Always_Delay,\n-      Aspect_Pure_05                      => Always_Delay,\n-      Aspect_Pure_12                      => Always_Delay,\n       Aspect_Pure_Function                => Always_Delay,\n       Aspect_Read                         => Always_Delay,\n       Aspect_Refined_Depends              => Always_Delay,\n@@ -681,8 +663,6 @@ package Aspects is\n       Aspect_Write                        => Always_Delay,\n \n       Aspect_Abstract_State               => Never_Delay,\n-      Aspect_Ada_2005                     => Never_Delay,\n-      Aspect_Ada_2012                     => Never_Delay,\n       Aspect_Convention                   => Never_Delay,\n       Aspect_Dimension                    => Never_Delay,\n       Aspect_Dimension_System             => Never_Delay,"}, {"sha": "7e02d3bd2997f8d5682e3cf9e8591dc4547a3bc1", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=e19137bce2231c3494d161746c1485a241056ba3", "patch": "@@ -279,8 +279,6 @@ Implementation Defined Pragmas\n Implementation Defined Aspects\n \n * Aspect Abstract_State::\n-* Aspect Ada_2005::\n-* Aspect Ada_2012::\n * Aspect Compiler_Unit::\n * Aspect Contract_Cases::\n * Aspect Depends::\n@@ -1188,6 +1186,7 @@ either Ada 83 or Ada 95 programs.\n Syntax:\n @smallexample @c ada\n pragma Ada_05;\n+pragma Ada_05 (local_NAME);\n @end smallexample\n \n @noindent\n@@ -1197,6 +1196,17 @@ This pragma is useful when writing a reusable component that\n itself uses Ada 2005 features, but which is intended to be usable from\n either Ada 83 or Ada 95 programs.\n \n+The one argument form (which is not a configuration pragma)\n+is used for managing the transition from\n+Ada 95 to Ada 2005 in the run-time library. If an entity is marked\n+as Ada_2005 only, then referencing the entity in Ada_83 or Ada_95\n+mode will generate a warning. In addition, in Ada_83 or Ada_95\n+mode, a preference rule is established which does not choose\n+such an entity unless it is unambiguously specified. This avoids\n+extra subprograms marked this way from generating ambiguities in\n+otherwise legal pre-Ada_2005 programs. The one argument form is\n+intended for exclusive use in the GNAT run-time library.\n+\n @node Pragma Ada_2005\n @unnumberedsec Pragma Ada_2005\n @findex Ada_2005\n@@ -1217,6 +1227,7 @@ same syntax and effect.\n Syntax:\n @smallexample @c ada\n pragma Ada_12;\n+pragma Ada_12 (local_NAME);\n @end smallexample\n \n @noindent\n@@ -1228,6 +1239,17 @@ contexts.  This pragma is useful when writing a reusable component that\n itself uses Ada 2012 features, but which is intended to be usable from\n Ada 83, Ada 95, or Ada 2005 programs.\n \n+The one argument form, which is not a configuration pragma,\n+is used for managing the transition from Ada\n+2005 to Ada 2012 in the run-time library. If an entity is marked\n+as Ada_201 only, then referencing the entity in any pre-Ada_2012\n+mode will generate a warning. In addition, in any pre-Ada_2012\n+mode, a preference rule is established which does not choose\n+such an entity unless it is unambiguously specified. This avoids\n+extra subprograms marked this way from generating ambiguities in\n+otherwise legal pre-Ada_2012 programs. The one argument form is\n+intended for exclusive use in the GNAT run-time library.\n+\n @node Pragma Ada_2012\n @unnumberedsec Pragma Ada_2012\n @findex Ada_2005\n@@ -7640,8 +7662,6 @@ clause.\n \n @menu\n * Aspect Abstract_State::\n-* Aspect Ada_2005::\n-* Aspect Ada_2012::\n * Aspect Compiler_Unit::\n * Aspect Contract_Cases::\n * Aspect Depends::\n@@ -7686,18 +7706,6 @@ clause.\n @noindent\n This aspect is equivalent to pragma @code{Abstract_State}.\n \n-@node Aspect Ada_2005\n-@unnumberedsec Aspect Ada_2005\n-@findex Ada_2005\n-@noindent\n-This aspect is equivalent to the one argument form of pragma @code{Ada_2005}.\n-\n-@node Aspect Ada_2012\n-@unnumberedsec Aspect Ada_2012\n-@findex Ada_2012\n-@noindent\n-This aspect is equivalent to the one argument form of pragma @code{Ada_2012}.\n-\n @node Aspect Compiler_Unit\n @unnumberedsec Aspect Compiler_Unit\n @findex Compiler_Unit"}, {"sha": "97b6f93e4c5afd4783fec15f8d619f56906ab186", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=e19137bce2231c3494d161746c1485a241056ba3", "patch": "@@ -1544,12 +1544,17 @@ package body Par_SCO is\n                Set_Statement_Entry;\n                Traverse_Package_Body (N);\n \n-            --  Subprogram declaration\n+            --  Subprogram declaration or subprogram body stub\n \n             when N_Subprogram_Declaration | N_Subprogram_Body_Stub =>\n                Process_Decisions_Defer\n                  (Parameter_Specifications (Specification (N)), 'X');\n \n+            --  Entry declaration\n+\n+            when N_Entry_Declaration =>\n+               Process_Decisions_Defer (Parameter_Specifications (N), 'X');\n+\n             --  Generic subprogram declaration\n \n             when N_Generic_Subprogram_Declaration =>\n@@ -1600,7 +1605,7 @@ package body Par_SCO is\n             --  any decisions in the exit statement expression.\n \n             when N_Exit_Statement =>\n-               Extend_Statement_Sequence (N, ' ');\n+               Extend_Statement_Sequence (N, 'E');\n                Process_Decisions_Defer (Condition (N), 'E');\n                Set_Statement_Entry;\n \n@@ -2002,7 +2007,7 @@ package body Par_SCO is\n             --  want one entry in the SCOs, so we take the first, for which\n             --  Prev_Ids is False.\n \n-            when N_Object_Declaration =>\n+            when N_Object_Declaration | N_Number_Declaration =>\n                if not Prev_Ids (N) then\n                   Extend_Statement_Sequence (N, 'o');\n \n@@ -2033,10 +2038,11 @@ package body Par_SCO is\n                --  no SCO should be generated for this node.\n \n                declare\n+                  NK  : constant Node_Kind := Nkind (N);\n                   Typ : Character;\n \n                begin\n-                  case Nkind (N) is\n+                  case NK is\n                      when N_Full_Type_Declaration         |\n                           N_Incomplete_Type_Declaration   |\n                           N_Private_Type_Declaration      |\n@@ -2060,8 +2066,15 @@ package body Par_SCO is\n                           N_Protected_Body_Stub           =>\n                         Typ := ASCII.NUL;\n \n-                     when others                          =>\n+                     when N_Procedure_Call_Statement =>\n                         Typ := ' ';\n+\n+                     when others                          =>\n+                        if NK in N_Statement_Other_Than_Procedure_Call then\n+                           Typ := ' ';\n+                        else\n+                           Typ := 'd';\n+                        end if;\n                   end case;\n \n                   if Typ /= ASCII.NUL then"}, {"sha": "9479cb8883a2b0ea6bef851e2af846481397a3f8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19137bce2231c3494d161746c1485a241056ba3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e19137bce2231c3494d161746c1485a241056ba3", "patch": "@@ -10673,6 +10673,16 @@ package body Sem_Prag is\n          --  Note: these pragmas also have some specific processing in Par.Prag\n          --  because we want to set the Ada 2005 version mode during parsing.\n \n+         --  The one argument form is used for managing the transition from\n+         --  Ada 95 to Ada 2005 in the run-time library. If an entity is marked\n+         --  as Ada_2005 only, then referencing the entity in Ada_83 or Ada_95\n+         --  mode will generate a warning. In addition, in Ada_83 or Ada_95\n+         --  mode, a preference rule is established which does not choose\n+         --  such an entity unless it is unambiguously specified. This avoids\n+         --  extra subprograms marked this way from generating ambiguities in\n+         --  otherwise legal pre-Ada_2005 programs. The one argument form is\n+         --  intended for exclusive use in the GNAT run-time library.\n+\n          when Pragma_Ada_05 | Pragma_Ada_2005 => declare\n             E_Id : Node_Id;\n \n@@ -10722,6 +10732,16 @@ package body Sem_Prag is\n          --  Note: these pragmas also have some specific processing in Par.Prag\n          --  because we want to set the Ada 2012 version mode during parsing.\n \n+         --  The one argument form is used for managing the transition from Ada\n+         --  2005 to Ada 2012 in the run-time library. If an entity is marked\n+         --  as Ada_201 only, then referencing the entity in any pre-Ada_2012\n+         --  mode will generate a warning. In addition, in any pre-Ada_2012\n+         --  mode, a preference rule is established which does not choose\n+         --  such an entity unless it is unambiguously specified. This avoids\n+         --  extra subprograms marked this way from generating ambiguities in\n+         --  otherwise legal pre-Ada_2012 programs. The one argument form is\n+         --  intended for exclusive use in the GNAT run-time library.\n+\n          when Pragma_Ada_12 | Pragma_Ada_2012 => declare\n             E_Id : Node_Id;\n "}]}