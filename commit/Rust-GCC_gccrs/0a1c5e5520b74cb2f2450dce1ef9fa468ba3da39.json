{"sha": "0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGExYzVlNTUyMGI3NGNiMmYyNDUwZGNlMWVmOWZhNDY4YmEzZGEzOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-05-30T11:24:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-05-30T11:24:32Z"}, "message": "i386.h (TARGET_ABM): New define.\n\n\t* config/i386/i386.h (TARGET_ABM): New define.\n\t(TARGET_POPCNT): Ditto.\n\t(TARGET_64BIT, TARGET_MMX, TARGET_3DNOW, TARGET_3DNOW_A, TARGET_SSE*):\n\tNew temporary defines to redefine from OPTION_ISA_* defines.\n\t(MASK_64BIT, MASK_MMX, MASK_3DNOW, MASK_3DNOW_A, MASK_SSE*):\n\tNew temporary defines to redefine from OPTION_MASK_ISA_* defines.\n\t(ix86_isa_flags): New extern int declaration.\n\t(TARGET_SUBTARGET_DEFAULT): New define.\n\t(TARGET_SUBTARGET_ISA_DEFAULT): Ditto.\n\t(TARGET_SUBTARGET32_DEFAULT): Ditto.\n\t(TARGET_SUBTARGET32_ISA_DEFAULT): Ditto.\n\t(TARGET_SUBTARGET64_ISA_DEFAULT): Ditto.\n\t* config/i386/unix.h: Undef TARGET_SUBTARGET_DEFAULT before define.\n\t* config/i386/darwin.h: Change TARGET_64BIT define to\n\tOPTION_ISA_64BIT.\n\n\t* config/i386/i386.opt (m3dnowa): Define as undocumented option\n\tusing existing \"ix86_isa_flags\" varible.\n\t(m32, m64): Use existing \"ix86_isa_flags\" variable.\n\t(mmmx, m3dnow): Ditto.\n\t(msse, msse2, msse3, mssse3, msse4.1, msse4a): Ditto.\n\t(mabm): Define as non-negative option using \"x86_abm\" variable.\n\t(mpopcnt): Define as non-negative option using \"x86_popcnt\" variable.\n\n\t* config/i386/i386.c (ix86_arch_features) [X86_ARCH_CMOVE]:\n\tRewrite feature test bitmap.\n\t(ix86_isa_flags): New initialized global int varible.\n\t(ix86_isa_flags_explicit): New static int variable.\n\t(ix86_handle_option): Set \"ix86_isa_flags_explicit\" when mmmx, m3dnow,\n\tmsse, msse2, msse3, msse4.1 and msse4a option is processed.  Change\n\ti86_isa_flags and ix86_isa_flags_explicit, not target_flags and\n\ttarget_flags_explicit.\n\t(override_options): Remove \"target_enable\" and \"target_disable\" fields\n\tfrom \"struct ptt\". Update processor_target_table accordingly. Remove\n\tPTA_PREFETCH_SSE from processor_alias_table entry if PTE_SSE is\n\tdefined and rearrange PTA_* bits.  Use \"ix86_isa_flags\" instead of\n\t\"target_flags\" and \"ix86_isa_flags_explicit\" instead of\n\t\"target_flags_explicit\" when masked with MASK_64BIT, MASK_MMX,\n\tMASK_3DNOW, MASK_3DNOW_A or MASK_SSE*.  Set \"x86_abm\" to true when\n\tPTA_ABM is set in processor_alias_table flags entry.  Set \"x86_popcnt\"\n\tto true when either of PTA_POPCNT or PTA_ABM is set in\n\tprocessor_alias_table flags entry.  Set \"x86_prefetch_sse\" to true\n\twhen either of PTA_PREFETCH_SSE or PTA_SSE is set in\n\tprocessor_alias_table flags entry.  Remove handling of\n\t\"target_enable\" and \"target_disable\" fields of processor_target_table.\n\tMask \"target_flags\" with TARGET_SUBTARGET32_DEFAULT for 32-bit\n\ttargets or with TARGET_SUBTARGET64_DEFAULT for 64-bit targets.\n\tMask \"ix86_isa_flags\" with TARGET_SUBTARGET32_ISA_DEFAULT for 32-bit\n\ttargets or with TARGET_SUBTARGET64_ISA_DEFAULT for 64-bit targets.\n\t(def_builtin): Mask \"mask\" variable with \"ix86_isa_flags\", not\n\t\"target_flags\".\n\t(TARGET_DEFAULT_TARGET_FLAGS): Do not include TARGET_64BIT_DEFAULT.\n\nFrom-SVN: r125180", "tree": {"sha": "0651ed4c91eedf4b29b65f6c31412dd3dbac8aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0651ed4c91eedf4b29b65f6c31412dd3dbac8aa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/comments", "author": null, "committer": null, "parents": [{"sha": "a7c835467af11772beb7c310143bedc29adb471e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c835467af11772beb7c310143bedc29adb471e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c835467af11772beb7c310143bedc29adb471e"}], "stats": {"total": 565, "additions": 346, "deletions": 219}, "files": [{"sha": "3742fb17a0f1f31565217ea3ba226d05453bc017", "filename": "gcc/ChangeLog", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39", "patch": "@@ -1,3 +1,58 @@\n+2007-05-30 Uros Bizjak <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (TARGET_ABM): New define.\n+\t(TARGET_POPCNT): Ditto.\n+\t(TARGET_64BIT, TARGET_MMX, TARGET_3DNOW, TARGET_3DNOW_A, TARGET_SSE*):\n+\tNew temporary defines to redefine from OPTION_ISA_* defines.\n+\t(MASK_64BIT, MASK_MMX, MASK_3DNOW, MASK_3DNOW_A, MASK_SSE*):\n+\tNew temporary defines to redefine from OPTION_MASK_ISA_* defines.\n+\t(ix86_isa_flags): New extern int declaration.\n+\t(TARGET_SUBTARGET_DEFAULT): New define.\n+\t(TARGET_SUBTARGET_ISA_DEFAULT): Ditto.\n+\t(TARGET_SUBTARGET32_DEFAULT): Ditto.\n+\t(TARGET_SUBTARGET32_ISA_DEFAULT): Ditto.\n+\t(TARGET_SUBTARGET64_ISA_DEFAULT): Ditto.\n+\t* config/i386/unix.h: Undef TARGET_SUBTARGET_DEFAULT before define.\n+\t* config/i386/darwin.h: Change TARGET_64BIT define to\n+\tOPTION_ISA_64BIT.\n+\n+\t* config/i386/i386.opt (m3dnowa): Define as undocumented option\n+\tusing existing \"ix86_isa_flags\" varible.\n+\t(m32, m64): Use existing \"ix86_isa_flags\" variable.\n+\t(mmmx, m3dnow): Ditto.\n+\t(msse, msse2, msse3, mssse3, msse4.1, msse4a): Ditto.\n+\t(mabm): Define as non-negative option using \"x86_abm\" variable.\n+\t(mpopcnt): Define as non-negative option using \"x86_popcnt\" variable.\n+\n+\t* config/i386/i386.c (ix86_arch_features) [X86_ARCH_CMOVE]:\n+\tRewrite feature test bitmap.\n+\t(ix86_isa_flags): New initialized global int varible.\n+\t(ix86_isa_flags_explicit): New static int variable.\n+\t(ix86_handle_option): Set \"ix86_isa_flags_explicit\" when mmmx, m3dnow,\n+\tmsse, msse2, msse3, msse4.1 and msse4a option is processed.  Change\n+\ti86_isa_flags and ix86_isa_flags_explicit, not target_flags and\n+\ttarget_flags_explicit.\n+\t(override_options): Remove \"target_enable\" and \"target_disable\" fields\n+\tfrom \"struct ptt\". Update processor_target_table accordingly. Remove\n+\tPTA_PREFETCH_SSE from processor_alias_table entry if PTE_SSE is\n+\tdefined and rearrange PTA_* bits.  Use \"ix86_isa_flags\" instead of\n+\t\"target_flags\" and \"ix86_isa_flags_explicit\" instead of\n+\t\"target_flags_explicit\" when masked with MASK_64BIT, MASK_MMX,\n+\tMASK_3DNOW, MASK_3DNOW_A or MASK_SSE*.  Set \"x86_abm\" to true when\n+\tPTA_ABM is set in processor_alias_table flags entry.  Set \"x86_popcnt\"\n+\tto true when either of PTA_POPCNT or PTA_ABM is set in\n+\tprocessor_alias_table flags entry.  Set \"x86_prefetch_sse\" to true\n+\twhen either of PTA_PREFETCH_SSE or PTA_SSE is set in\n+\tprocessor_alias_table flags entry.  Remove handling of\n+\t\"target_enable\" and \"target_disable\" fields of processor_target_table.\n+\tMask \"target_flags\" with TARGET_SUBTARGET32_DEFAULT for 32-bit\n+\ttargets or with TARGET_SUBTARGET64_DEFAULT for 64-bit targets.\n+\tMask \"ix86_isa_flags\" with TARGET_SUBTARGET32_ISA_DEFAULT for 32-bit\n+\ttargets or with TARGET_SUBTARGET64_ISA_DEFAULT for 64-bit targets.\n+\t(def_builtin): Mask \"mask\" variable with \"ix86_isa_flags\", not\n+\t\"target_flags\".\n+\t(TARGET_DEFAULT_TARGET_FLAGS): Do not include TARGET_64BIT_DEFAULT.\n+\n 2007-05-29  David Daney  <ddaney@avtrex.com\n \n \tPR gcc/31975\n@@ -119,7 +174,6 @@\n \t* varpool.c (add_new_static_var): New function.\n \t* cgraph.h (add_new_static_var): Declare.\n \n-\n 2007-05-27  Eric Christopher  <echristo@apple.com>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_prologue): Update\n@@ -136,7 +190,8 @@\n \t* tree-ssa-threadupdate.c (thread_block): Ditto.\n \t(thread_through_all_blocks): Ditto.  Assert that loops were analysed.\n \t* tree-ssa-loop-manip.c (rewrite_into_loop_closed_ssa,\n-\tverify_loop_closed_ssa): Check number_of_loops instead of current_loops.\n+\tverify_loop_closed_ssa): Check number_of_loops instead of\n+\tcurrent_loops.\n \t* predict.c (tree_estimate_probability): Ditto.\n \t* tree-if-conv.c (main_tree_if_conversion): Ditto.\n \t* tree-ssa-loop-ch.c (copy_loop_headers): Ditto."}, {"sha": "d0ffec4113b293c2641f14882a794b238238d3d6", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39", "patch": "@@ -26,7 +26,7 @@ Boston, MA 02110-1301, USA.  */\n #define TARGET_VERSION fprintf (stderr, \" (i686 Darwin)\");\n \n #undef  TARGET_64BIT\n-#define TARGET_64BIT (target_flags & MASK_64BIT)\n+#define TARGET_64BIT OPTION_ISA_64BIT\n \n #ifdef IN_LIBGCC2\n #undef TARGET_64BIT"}, {"sha": "87972b47d5df078977824421b744424869c9ab9a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 182, "deletions": 151, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39", "patch": "@@ -1227,8 +1227,8 @@ unsigned int ix86_tune_features[X86_TUNE_LAST] = {\n \n /* Feature tests against the various architecture variations.  */\n unsigned int ix86_arch_features[X86_ARCH_LAST] = {\n-  /* X86_ARCH_CMOVE */\n-  m_PPRO | m_GEODE | m_ATHLON_K8_AMDFAM10 | m_PENT4 | m_NOCONA,\n+  /* X86_ARCH_CMOVE: Conditional move was added for pentiumpro.  */\n+  ~(m_386 | m_486 | m_PENT | m_K6),\n \n   /* X86_ARCH_CMPXCHG: Compare and exchange was added for 80486.  */\n   ~m_386,\n@@ -1544,79 +1544,97 @@ static bool ix86_expand_vector_init_one_nonzero (bool, enum machine_mode,\n #define DEFAULT_PCC_STRUCT_RETURN 1\n #endif\n \n+/* Bit flags that specify the ISA we are compiling for.  */\n+int ix86_isa_flags = TARGET_64BIT_DEFAULT | TARGET_SUBTARGET_ISA_DEFAULT;\n+\n+/* A mask of ix86_isa_flags that includes bit X if X\n+   was set or cleared on the command line.  */\n+static int ix86_isa_flags_explicit;\n+\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n ix86_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n {\n   switch (code)\n     {\n-    case OPT_m3dnow:\n+    case OPT_mmmx:\n+      ix86_isa_flags_explicit |= MASK_MMX;\n       if (!value)\n \t{\n-\t  target_flags &= ~MASK_3DNOW_A;\n-\t  target_flags_explicit |= MASK_3DNOW_A;\n+\t  ix86_isa_flags &= ~(MASK_3DNOW | MASK_3DNOW_A);\n+\t  ix86_isa_flags_explicit |= MASK_3DNOW | MASK_3DNOW_A;\n \t}\n       return true;\n \n-    case OPT_mmmx:\n+    case OPT_m3dnow:\n+      ix86_isa_flags_explicit |= MASK_3DNOW;\n       if (!value)\n \t{\n-\t  target_flags &= ~(MASK_3DNOW | MASK_3DNOW_A);\n-\t  target_flags_explicit |= MASK_3DNOW | MASK_3DNOW_A;\n+\t  ix86_isa_flags &= ~MASK_3DNOW_A;\n+\t  ix86_isa_flags_explicit |= MASK_3DNOW_A;\n \t}\n       return true;\n \n+    case OPT_m3dnowa:\n+      return false;\n+\n     case OPT_msse:\n+      ix86_isa_flags_explicit |= MASK_SSE;\n       if (!value)\n \t{\n-\t  target_flags &= ~(MASK_SSE2 | MASK_SSE3 | MASK_SSSE3\n-\t\t\t    | MASK_SSE4_1 | MASK_SSE4A);\n-\t  target_flags_explicit |= (MASK_SSE2 | MASK_SSE3 | MASK_SSSE3\n-\t\t\t\t    | MASK_SSE4_1 | MASK_SSE4A);\n+\t  ix86_isa_flags &= ~(MASK_SSE2 | MASK_SSE3 | MASK_SSSE3\n+\t\t\t      | MASK_SSE4_1 | MASK_SSE4A);\n+\t  ix86_isa_flags_explicit |= (MASK_SSE2 | MASK_SSE3 | MASK_SSSE3\n+\t\t\t\t      | MASK_SSE4_1 | MASK_SSE4A);\n \t}\n       return true;\n \n     case OPT_msse2:\n+      ix86_isa_flags_explicit |= MASK_SSE2;\n       if (!value)\n \t{\n-\t  target_flags &= ~(MASK_SSE3 | MASK_SSSE3 | MASK_SSE4_1\n-\t\t\t    | MASK_SSE4A);\n-\t  target_flags_explicit |= (MASK_SSE3 | MASK_SSSE3\n-\t\t\t\t    | MASK_SSE4_1 | MASK_SSE4A);\n+\t  ix86_isa_flags &= ~(MASK_SSE3 | MASK_SSSE3 | MASK_SSE4_1\n+\t\t\t      | MASK_SSE4A);\n+\t  ix86_isa_flags_explicit |= (MASK_SSE3 | MASK_SSSE3\n+\t\t\t\t      | MASK_SSE4_1 | MASK_SSE4A);\n \t}\n       return true;\n \n     case OPT_msse3:\n+      ix86_isa_flags_explicit |= MASK_SSE3;\n       if (!value)\n \t{\n-\t  target_flags &= ~(MASK_SSSE3 | MASK_SSE4_1 | MASK_SSE4A);\n-\t  target_flags_explicit |= (MASK_SSSE3 | MASK_SSE4_1\n-\t\t\t\t    | MASK_SSE4A);\n+\t  ix86_isa_flags &= ~(MASK_SSSE3 | MASK_SSE4_1 | MASK_SSE4A);\n+\t  ix86_isa_flags_explicit |= (MASK_SSSE3 | MASK_SSE4_1\n+\t\t\t\t      | MASK_SSE4A);\n \t}\n       return true;\n \n     case OPT_mssse3:\n+      ix86_isa_flags_explicit |= MASK_SSSE3;\n       if (!value)\n \t{\n-\t  target_flags &= ~(MASK_SSE4_1 | MASK_SSE4A);\n-\t  target_flags_explicit |= MASK_SSE4_1 | MASK_SSE4A;\n+\t  ix86_isa_flags &= ~(MASK_SSE4_1 | MASK_SSE4A);\n+\t  ix86_isa_flags_explicit |= MASK_SSE4_1 | MASK_SSE4A;\n \t}\n       return true;\n \n     case OPT_msse4_1:\n+      ix86_isa_flags_explicit |= MASK_SSE4_1;\n       if (!value)\n \t{\n-\t  target_flags &= ~MASK_SSE4A;\n-\t  target_flags_explicit |= MASK_SSE4A;\n+\t  ix86_isa_flags &= ~MASK_SSE4A;\n+\t  ix86_isa_flags_explicit |= MASK_SSE4A;\n \t}\n       return true;\n \n     case OPT_msse4a:\n+      ix86_isa_flags_explicit |= MASK_SSE4A;\n       if (!value)\n \t{\n-\t  target_flags &= ~MASK_SSE4_1;\n-\t  target_flags_explicit |= MASK_SSE4_1;\n+\t  ix86_isa_flags &= ~MASK_SSE4_1;\n+\t  ix86_isa_flags_explicit |= MASK_SSE4_1;\n \t}\n       return true;\n \n@@ -1647,8 +1665,6 @@ override_options (void)\n   static struct ptt\n     {\n       const struct processor_costs *cost;\t/* Processor costs */\n-      const int target_enable;\t\t\t/* Target flags to enable.  */\n-      const int target_disable;\t\t\t/* Target flags to disable.  */\n       const int align_loop;\t\t\t/* Default alignments.  */\n       const int align_loop_max_skip;\n       const int align_jump;\n@@ -1657,20 +1673,20 @@ override_options (void)\n     }\n   const processor_target_table[PROCESSOR_max] =\n     {\n-      {&i386_cost, 0, 0, 4, 3, 4, 3, 4},\n-      {&i486_cost, 0, 0, 16, 15, 16, 15, 16},\n-      {&pentium_cost, 0, 0, 16, 7, 16, 7, 16},\n-      {&pentiumpro_cost, 0, 0, 16, 15, 16, 7, 16},\n-      {&geode_cost, 0, 0, 0, 0, 0, 0, 0},\n-      {&k6_cost, 0, 0, 32, 7, 32, 7, 32},\n-      {&athlon_cost, 0, 0, 16, 7, 16, 7, 16},\n-      {&pentium4_cost, 0, 0, 0, 0, 0, 0, 0},\n-      {&k8_cost, 0, 0, 16, 7, 16, 7, 16},\n-      {&nocona_cost, 0, 0, 0, 0, 0, 0, 0},\n-      {&core2_cost, 0, 0, 16, 7, 16, 7, 16},\n-      {&generic32_cost, 0, 0, 16, 7, 16, 7, 16},\n-      {&generic64_cost, 0, 0, 16, 7, 16, 7, 16},\n-      {&amdfam10_cost, 0, 0, 32, 24, 32, 7, 32}\n+      {&i386_cost, 4, 3, 4, 3, 4},\n+      {&i486_cost, 16, 15, 16, 15, 16},\n+      {&pentium_cost, 16, 7, 16, 7, 16},\n+      {&pentiumpro_cost, 16, 15, 16, 7, 16},\n+      {&geode_cost, 0, 0, 0, 0, 0},\n+      {&k6_cost, 32, 7, 32, 7, 32},\n+      {&athlon_cost, 16, 7, 16, 7, 16},\n+      {&pentium4_cost, 0, 0, 0, 0, 0},\n+      {&k8_cost, 16, 7, 16, 7, 16},\n+      {&nocona_cost, 0, 0, 0, 0, 0},\n+      {&core2_cost, 16, 7, 16, 7, 16},\n+      {&generic32_cost, 16, 7, 16, 7, 16},\n+      {&generic64_cost, 16, 7, 16, 7, 16},\n+      {&amdfam10_cost, 32, 24, 32, 7, 32}\n     };\n \n   static const char * const cpu_names[] = TARGET_CPU_DEFAULT_NAMES;\n@@ -1707,71 +1723,79 @@ override_options (void)\n       {\"winchip-c6\", PROCESSOR_I486, PTA_MMX},\n       {\"winchip2\", PROCESSOR_I486, PTA_MMX | PTA_3DNOW},\n       {\"c3\", PROCESSOR_I486, PTA_MMX | PTA_3DNOW},\n-      {\"c3-2\", PROCESSOR_PENTIUMPRO, PTA_MMX | PTA_PREFETCH_SSE | PTA_SSE},\n+      {\"c3-2\", PROCESSOR_PENTIUMPRO, PTA_MMX | PTA_SSE},\n       {\"i686\", PROCESSOR_PENTIUMPRO, 0},\n       {\"pentiumpro\", PROCESSOR_PENTIUMPRO, 0},\n       {\"pentium2\", PROCESSOR_PENTIUMPRO, PTA_MMX},\n-      {\"pentium3\", PROCESSOR_PENTIUMPRO, PTA_MMX | PTA_SSE | PTA_PREFETCH_SSE},\n-      {\"pentium3m\", PROCESSOR_PENTIUMPRO, PTA_MMX | PTA_SSE | PTA_PREFETCH_SSE},\n-      {\"pentium-m\", PROCESSOR_PENTIUMPRO, PTA_MMX | PTA_SSE | PTA_PREFETCH_SSE | PTA_SSE2},\n-      {\"pentium4\", PROCESSOR_PENTIUM4, PTA_SSE | PTA_SSE2\n-\t\t\t\t       | PTA_MMX | PTA_PREFETCH_SSE},\n-      {\"pentium4m\", PROCESSOR_PENTIUM4, PTA_SSE | PTA_SSE2\n-\t\t\t\t        | PTA_MMX | PTA_PREFETCH_SSE},\n-      {\"prescott\", PROCESSOR_NOCONA, PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t\t\t\t        | PTA_MMX | PTA_PREFETCH_SSE},\n-      {\"nocona\", PROCESSOR_NOCONA, PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_64BIT\n-\t\t\t\t\t| PTA_MMX | PTA_PREFETCH_SSE\n-\t\t\t\t\t| PTA_CX16 | PTA_NO_SAHF},\n-      {\"core2\", PROCESSOR_CORE2, PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3\n-                                        | PTA_64BIT | PTA_MMX\n-\t\t\t\t\t| PTA_PREFETCH_SSE | PTA_CX16},\n-      {\"geode\", PROCESSOR_GEODE, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-\t\t\t\t   | PTA_3DNOW_A},\n+      {\"pentium3\", PROCESSOR_PENTIUMPRO, PTA_MMX | PTA_SSE},\n+      {\"pentium3m\", PROCESSOR_PENTIUMPRO, PTA_MMX | PTA_SSE},\n+      {\"pentium-m\", PROCESSOR_PENTIUMPRO, PTA_MMX | PTA_SSE | PTA_SSE2},\n+      {\"pentium4\", PROCESSOR_PENTIUM4, PTA_MMX |PTA_SSE | PTA_SSE2},\n+      {\"pentium4m\", PROCESSOR_PENTIUM4, PTA_MMX | PTA_SSE | PTA_SSE2},\n+      {\"prescott\", PROCESSOR_NOCONA, PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3},\n+      {\"nocona\", PROCESSOR_NOCONA, (PTA_64BIT \n+\t\t\t\t    | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t\t\t\t    | PTA_CX16 | PTA_NO_SAHF)},\n+      {\"core2\", PROCESSOR_CORE2, (PTA_64BIT\n+\t\t\t\t  | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t\t\t\t  | PTA_SSSE3\n+\t\t\t\t  | PTA_CX16)},\n+      {\"geode\", PROCESSOR_GEODE, (PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t  |PTA_PREFETCH_SSE)},\n       {\"k6\", PROCESSOR_K6, PTA_MMX},\n       {\"k6-2\", PROCESSOR_K6, PTA_MMX | PTA_3DNOW},\n       {\"k6-3\", PROCESSOR_K6, PTA_MMX | PTA_3DNOW},\n-      {\"athlon\", PROCESSOR_ATHLON, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-\t\t\t\t   | PTA_3DNOW_A},\n-      {\"athlon-tbird\", PROCESSOR_ATHLON, PTA_MMX | PTA_PREFETCH_SSE\n-\t\t\t\t\t | PTA_3DNOW | PTA_3DNOW_A},\n-      {\"athlon-4\", PROCESSOR_ATHLON, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-\t\t\t\t    | PTA_3DNOW_A | PTA_SSE},\n-      {\"athlon-xp\", PROCESSOR_ATHLON, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-\t\t\t\t      | PTA_3DNOW_A | PTA_SSE},\n-      {\"athlon-mp\", PROCESSOR_ATHLON, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-\t\t\t\t      | PTA_3DNOW_A | PTA_SSE},\n-      {\"x86-64\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_64BIT\n-\t\t\t       | PTA_SSE | PTA_SSE2 | PTA_NO_SAHF},\n-      {\"k8\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW | PTA_64BIT\n-\t\t\t\t      | PTA_3DNOW_A | PTA_SSE | PTA_SSE2\n-\t\t\t\t      | PTA_NO_SAHF},\n-      {\"k8-sse3\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW | PTA_64BIT\n-                                      | PTA_3DNOW_A | PTA_SSE | PTA_SSE2\n-\t\t\t\t      | PTA_SSE3 | PTA_NO_SAHF},\n-      {\"opteron\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-\t\t\t\t\t| PTA_64BIT | PTA_3DNOW_A | PTA_SSE\n-\t\t\t\t\t| PTA_SSE2 | PTA_NO_SAHF},\n-      {\"opteron-sse3\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-\t\t\t\t\t| PTA_64BIT | PTA_3DNOW_A | PTA_SSE\n-\t\t\t\t\t| PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF},\n-      {\"athlon64\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-\t\t\t\t\t | PTA_64BIT | PTA_3DNOW_A | PTA_SSE\n-\t\t\t\t\t | PTA_SSE2 | PTA_NO_SAHF},\n-      {\"athlon64-sse3\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-\t\t\t\t\t | PTA_64BIT | PTA_3DNOW_A | PTA_SSE\n-                                         | PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF},\n-      {\"athlon-fx\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-\t\t\t\t\t  | PTA_64BIT | PTA_3DNOW_A | PTA_SSE\n-\t\t\t\t\t  | PTA_SSE2 | PTA_NO_SAHF},\n-      {\"amdfam10\", PROCESSOR_AMDFAM10, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-                                       | PTA_64BIT | PTA_3DNOW_A | PTA_SSE\n-                                       | PTA_SSE2 | PTA_SSE3 | PTA_POPCNT\n-                                       | PTA_ABM | PTA_SSE4A | PTA_CX16},\n-      {\"barcelona\", PROCESSOR_AMDFAM10, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n-                                       | PTA_64BIT | PTA_3DNOW_A | PTA_SSE\n-                                       | PTA_SSE2 | PTA_SSE3 | PTA_POPCNT\n-                                       | PTA_ABM | PTA_SSE4A | PTA_CX16},\n+      {\"athlon\", PROCESSOR_ATHLON, (PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t    | PTA_PREFETCH_SSE)},\n+      {\"athlon-tbird\", PROCESSOR_ATHLON, (PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t\t  | PTA_PREFETCH_SSE)},\n+      {\"athlon-4\", PROCESSOR_ATHLON, (PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t      | PTA_SSE)},\n+      {\"athlon-xp\", PROCESSOR_ATHLON, (PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t       | PTA_SSE)},\n+      {\"athlon-mp\", PROCESSOR_ATHLON, (PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t       | PTA_SSE)},\n+      {\"x86-64\", PROCESSOR_K8, (PTA_64BIT\n+\t\t\t\t| PTA_MMX | PTA_SSE | PTA_SSE2\n+\t\t\t\t| PTA_NO_SAHF)},\n+      {\"k8\", PROCESSOR_K8, (PTA_64BIT\n+\t\t\t    | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t    | PTA_SSE | PTA_SSE2\n+\t\t\t    | PTA_NO_SAHF)},\n+      {\"k8-sse3\", PROCESSOR_K8, (PTA_64BIT\n+\t\t\t\t | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t\t\t\t | PTA_NO_SAHF)},\n+      {\"opteron\", PROCESSOR_K8, (PTA_64BIT\n+\t\t\t\t | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t | PTA_SSE | PTA_SSE2\n+\t\t\t\t | PTA_NO_SAHF)},\n+      {\"opteron-sse3\", PROCESSOR_K8, (PTA_64BIT\n+\t\t\t\t      | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t      | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t\t\t\t      | PTA_NO_SAHF)},\n+      {\"athlon64\", PROCESSOR_K8, (PTA_64BIT\n+\t\t\t\t  | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t  | PTA_SSE | PTA_SSE2\n+\t\t\t\t  | PTA_NO_SAHF)},\n+      {\"athlon64-sse3\", PROCESSOR_K8, (PTA_64BIT\n+\t\t\t\t       | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t       | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t\t\t\t       | PTA_NO_SAHF)},\n+      {\"athlon-fx\", PROCESSOR_K8, (PTA_64BIT\n+\t\t\t\t   | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t   | PTA_SSE | PTA_SSE2\n+\t\t\t\t   | PTA_NO_SAHF)},\n+      {\"amdfam10\", PROCESSOR_AMDFAM10, (PTA_64BIT\n+\t\t\t\t\t| PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t\t| PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t\t\t\t\t| PTA_SSE4A\n+\t\t\t\t\t| PTA_CX16 | PTA_ABM)},\n+      {\"barcelona\", PROCESSOR_AMDFAM10, (PTA_64BIT\n+\t\t\t\t\t | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A\n+\t\t\t\t\t | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t\t\t\t\t | PTA_SSE4A\n+\t\t\t\t\t | PTA_CX16 | PTA_ABM)},\n       {\"generic32\", PROCESSOR_GENERIC32, 0 /* flags are only used for -march switch.  */ },\n       {\"generic64\", PROCESSOR_GENERIC64, PTA_64BIT /* flags are only used for -march switch.  */ },\n     };\n@@ -1925,58 +1949,60 @@ override_options (void)\n   if ((TARGET_64BIT == 0) != (ix86_cmodel == CM_32))\n     error (\"code model %qs not supported in the %s bit mode\",\n \t   ix86_cmodel_string, TARGET_64BIT ? \"64\" : \"32\");\n-  if ((TARGET_64BIT != 0) != ((target_flags & MASK_64BIT) != 0))\n+  if ((TARGET_64BIT != 0) != ((ix86_isa_flags & MASK_64BIT) != 0))\n     sorry (\"%i-bit mode not compiled in\",\n-\t   (target_flags & MASK_64BIT) ? 64 : 32);\n+\t   (ix86_isa_flags & MASK_64BIT) ? 64 : 32);\n \n   for (i = 0; i < pta_size; i++)\n     if (! strcmp (ix86_arch_string, processor_alias_table[i].name))\n       {\n \tix86_arch = processor_alias_table[i].processor;\n \t/* Default cpu tuning to the architecture.  */\n \tix86_tune = ix86_arch;\n+\n+\tif (TARGET_64BIT && !(processor_alias_table[i].flags & PTA_64BIT))\n+\t  error (\"CPU you selected does not support x86-64 \"\n+\t\t \"instruction set\");\n+\n \tif (processor_alias_table[i].flags & PTA_MMX\n-\t    && !(target_flags_explicit & MASK_MMX))\n-\t  target_flags |= MASK_MMX;\n+\t    && !(ix86_isa_flags_explicit & MASK_MMX))\n+\t  ix86_isa_flags |= MASK_MMX;\n \tif (processor_alias_table[i].flags & PTA_3DNOW\n-\t    && !(target_flags_explicit & MASK_3DNOW))\n-\t  target_flags |= MASK_3DNOW;\n+\t    && !(ix86_isa_flags_explicit & MASK_3DNOW))\n+\t  ix86_isa_flags |= MASK_3DNOW;\n \tif (processor_alias_table[i].flags & PTA_3DNOW_A\n-\t    && !(target_flags_explicit & MASK_3DNOW_A))\n-\t  target_flags |= MASK_3DNOW_A;\n+\t    && !(ix86_isa_flags_explicit & MASK_3DNOW_A))\n+\t  ix86_isa_flags |= MASK_3DNOW_A;\n \tif (processor_alias_table[i].flags & PTA_SSE\n-\t    && !(target_flags_explicit & MASK_SSE))\n-\t  target_flags |= MASK_SSE;\n+\t    && !(ix86_isa_flags_explicit & MASK_SSE))\n+\t  ix86_isa_flags |= MASK_SSE;\n \tif (processor_alias_table[i].flags & PTA_SSE2\n-\t    && !(target_flags_explicit & MASK_SSE2))\n-\t  target_flags |= MASK_SSE2;\n+\t    && !(ix86_isa_flags_explicit & MASK_SSE2))\n+\t  ix86_isa_flags |= MASK_SSE2;\n \tif (processor_alias_table[i].flags & PTA_SSE3\n-\t    && !(target_flags_explicit & MASK_SSE3))\n-\t  target_flags |= MASK_SSE3;\n+\t    && !(ix86_isa_flags_explicit & MASK_SSE3))\n+\t  ix86_isa_flags |= MASK_SSE3;\n \tif (processor_alias_table[i].flags & PTA_SSSE3\n-\t    && !(target_flags_explicit & MASK_SSSE3))\n-\t  target_flags |= MASK_SSSE3;\n+\t    && !(ix86_isa_flags_explicit & MASK_SSSE3))\n+\t  ix86_isa_flags |= MASK_SSSE3;\n \tif (processor_alias_table[i].flags & PTA_SSE4_1\n-\t    && !(target_flags_explicit & MASK_SSE4_1))\n-\t  target_flags |= MASK_SSE4_1;\n-\tif (processor_alias_table[i].flags & PTA_PREFETCH_SSE)\n-\t  x86_prefetch_sse = true;\n+\t    && !(ix86_isa_flags_explicit & MASK_SSE4_1))\n+\t  ix86_isa_flags |= MASK_SSE4_1;\n+\tif (processor_alias_table[i].flags & PTA_SSE4A\n+\t    && !(ix86_isa_flags_explicit & MASK_SSE4A))\n+\t  ix86_isa_flags |= MASK_SSE4A;\n+\n+\tif (processor_alias_table[i].flags & PTA_ABM)\n+\t  x86_abm = true;\n \tif (processor_alias_table[i].flags & PTA_CX16)\n \t  x86_cmpxchg16b = true;\n-\tif (processor_alias_table[i].flags & PTA_POPCNT\n-\t    && !(target_flags_explicit & MASK_POPCNT))\n-\t  target_flags |= MASK_POPCNT;\n-\tif (processor_alias_table[i].flags & PTA_ABM\n-\t    && !(target_flags_explicit & MASK_ABM))\n-\t  target_flags |= MASK_ABM;\n-\tif (processor_alias_table[i].flags & PTA_SSE4A\n-\t    && !(target_flags_explicit & MASK_SSE4A))\n-\t  target_flags |= MASK_SSE4A;\n-\tif (!(TARGET_64BIT && (processor_alias_table[i].flags & PTA_NO_SAHF)))\n+\tif (processor_alias_table[i].flags & (PTA_POPCNT | PTA_ABM))\n+\t  x86_popcnt = true;\n+\tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n+\t  x86_prefetch_sse = true;\n+\tif ((processor_alias_table[i].flags & PTA_NO_SAHF) && !TARGET_64BIT)\n \t  x86_sahf = true;\n-\tif (TARGET_64BIT && !(processor_alias_table[i].flags & PTA_64BIT))\n-\t  error (\"CPU you selected does not support x86-64 \"\n-\t\t \"instruction set\");\n+\n \tbreak;\n       }\n \n@@ -2011,7 +2037,8 @@ override_options (void)\n \t   -mtune (rather than -march) points us to a processor that has them.\n \t   However, the VIA C3 gives a SIGILL, so we only do that for i686 and\n \t   higher processors.  */\n-\tif (TARGET_CMOVE && (processor_alias_table[i].flags & PTA_PREFETCH_SSE))\n+\tif (TARGET_CMOVE\n+\t    && (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE)))\n \t  x86_prefetch_sse = true;\n \tbreak;\n       }\n@@ -2026,8 +2053,6 @@ override_options (void)\n     ix86_cost = &size_cost;\n   else\n     ix86_cost = processor_target_table[ix86_tune].cost;\n-  target_flags |= processor_target_table[ix86_tune].target_enable;\n-  target_flags &= ~processor_target_table[ix86_tune].target_disable;\n \n   /* Arrange to set up i386_stack_locals for all functions.  */\n   init_machine_status = ix86_init_machine_status;\n@@ -2166,53 +2191,60 @@ override_options (void)\n \n   /* Turn on SSSE3 builtins for -msse4.1.  */\n   if (TARGET_SSE4_1)\n-    target_flags |= MASK_SSSE3;\n+    ix86_isa_flags |= MASK_SSSE3;\n \n   /* Turn on SSE3 builtins for -mssse3.  */\n   if (TARGET_SSSE3)\n-    target_flags |= MASK_SSE3;\n+    ix86_isa_flags |= MASK_SSE3;\n \n   /* Turn on SSE3 builtins for -msse4a.  */\n   if (TARGET_SSE4A)\n-    target_flags |= MASK_SSE3;\n+    ix86_isa_flags |= MASK_SSE3;\n \n   /* Turn on SSE2 builtins for -msse3.  */\n   if (TARGET_SSE3)\n-    target_flags |= MASK_SSE2;\n+    ix86_isa_flags |= MASK_SSE2;\n \n   /* Turn on SSE builtins for -msse2.  */\n   if (TARGET_SSE2)\n-    target_flags |= MASK_SSE;\n+    ix86_isa_flags |= MASK_SSE;\n \n   /* Turn on MMX builtins for -msse.  */\n   if (TARGET_SSE)\n     {\n-      target_flags |= MASK_MMX & ~target_flags_explicit;\n+      ix86_isa_flags |= MASK_MMX & ~ix86_isa_flags_explicit;\n       x86_prefetch_sse = true;\n     }\n \n   /* Turn on MMX builtins for 3Dnow.  */\n   if (TARGET_3DNOW)\n-    target_flags |= MASK_MMX;\n+    ix86_isa_flags |= MASK_MMX;\n \n   /* Turn on POPCNT builtins for -mabm.  */\n   if (TARGET_ABM)\n-    target_flags |= MASK_POPCNT;\n+    x86_popcnt = true;\n \n   if (TARGET_64BIT)\n     {\n-      if (TARGET_RTD)\n-\twarning (0, \"-mrtd is ignored in 64bit mode\");\n+      target_flags |= TARGET_SUBTARGET64_DEFAULT & ~target_flags_explicit;\n \n       /* Enable by default the SSE and MMX builtins.  Do allow the user to\n \t explicitly disable any of these.  In particular, disabling SSE and\n \t MMX for kernel code is extremely useful.  */\n-      target_flags\n-\t|= ((MASK_SSE2 | MASK_SSE | MASK_MMX | TARGET_SUBTARGET64_DEFAULT)\n-\t    & ~target_flags_explicit);\n+      ix86_isa_flags\n+\t|= ((MASK_SSE2 | MASK_SSE | MASK_MMX | TARGET_SUBTARGET64_ISA_DEFAULT)\n+\t    & ~ix86_isa_flags_explicit);\n+\n+      if (TARGET_RTD)\n+\twarning (0, \"-mrtd is ignored in 64bit mode\");\n     }\n   else\n     {\n+      target_flags |= TARGET_SUBTARGET32_DEFAULT & ~target_flags_explicit;\n+\n+      ix86_isa_flags\n+\t|= TARGET_SUBTARGET32_DEFAULT & ~ix86_isa_flags_explicit;\n+\n       /* i386 ABI does not specify red zone.  It still makes sense to use it\n          when programmer takes care to stack from being destroyed.  */\n       if (!(target_flags_explicit & MASK_NO_RED_ZONE))\n@@ -16608,7 +16640,7 @@ def_builtin (int mask, const char *name, tree type, enum ix86_builtins code)\n {\n   tree decl = NULL_TREE;\n \n-  if (mask & target_flags\n+  if (mask & ix86_isa_flags\n       && (!(mask & MASK_64BIT) || TARGET_64BIT))\n     {\n       decl = add_builtin_function (name, type, code, BUILT_IN_MD,\n@@ -22702,7 +22734,6 @@ static const struct attribute_spec ix86_attribute_table[] =\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS\t\\\n   (TARGET_DEFAULT\t\t\t\\\n-   | TARGET_64BIT_DEFAULT\t\t\\\n    | TARGET_SUBTARGET_DEFAULT\t\t\\\n    | TARGET_TLS_DIRECT_SEG_REFS_DEFAULT)\n "}, {"sha": "003ecf58d476809aeaf0b5750c5f1665833181a5", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39", "patch": "@@ -35,6 +35,32 @@ Boston, MA 02110-1301, USA.  */\n    ADDR_BEG, ADDR_END, PRINT_IREG, PRINT_SCALE, PRINT_B_I_S, and many\n    that start with ASM_ or end in ASM_OP.  */\n \n+/* Redefines for option macros.  */\n+\n+#define TARGET_64BIT\tOPTION_ISA_64BIT\n+#define TARGET_MMX\tOPTION_ISA_MMX\n+#define TARGET_3DNOW\tOPTION_ISA_3DNOW\n+#define TARGET_3DNOW_A\tOPTION_ISA_3DNOW_A\n+#define TARGET_SSE\tOPTION_ISA_SSE\n+#define TARGET_SSE2\tOPTION_ISA_SSE2\n+#define TARGET_SSE3\tOPTION_ISA_SSE3\n+#define TARGET_SSSE3\tOPTION_ISA_SSSE3\n+#define TARGET_SSE4_1\tOPTION_ISA_SSE4_1\n+#define TARGET_SSE4A\tOPTION_ISA_SSE4A\n+\n+/* ??? Remove following defines.  */\n+\n+#define MASK_64BIT\tOPTION_MASK_ISA_64BIT\n+#define MASK_MMX\tOPTION_MASK_ISA_MMX\n+#define MASK_3DNOW\tOPTION_MASK_ISA_3DNOW\n+#define MASK_3DNOW_A\tOPTION_MASK_ISA_3DNOW_A\n+#define MASK_SSE\tOPTION_MASK_ISA_SSE\n+#define MASK_SSE2\tOPTION_MASK_ISA_SSE2\n+#define MASK_SSE3\tOPTION_MASK_ISA_SSE3\n+#define MASK_SSSE3\tOPTION_MASK_ISA_SSSE3\n+#define MASK_SSE4_1\tOPTION_MASK_ISA_SSE4_1\n+#define MASK_SSE4A\tOPTION_MASK_ISA_SSE4A\n+\n #include \"config/vxworks-dummy.h\"\n \n /* Algorithm to expand string function with.  */\n@@ -342,13 +368,15 @@ extern unsigned int ix86_arch_features[X86_ARCH_LAST];\n #define TARGET_XADD\t\tix86_arch_features[X86_ARCH_XADD]\n #define TARGET_BSWAP\t\tix86_arch_features[X86_ARCH_BSWAP]\n \n-#define TARGET_CMPXCHG16B\tx86_cmpxchg16b\n-#define TARGET_SAHF\t\tx86_sahf\n-\n #define TARGET_FISTTP\t\t(TARGET_SSE3 && TARGET_80387)\n \n extern int x86_prefetch_sse;\n+\n+#define TARGET_ABM\t\tx86_abm\n+#define TARGET_CMPXCHG16B\tx86_cmpxchg16b\n+#define TARGET_POPCNT\t\tx86_popcnt\n #define TARGET_PREFETCH_SSE\tx86_prefetch_sse\n+#define TARGET_SAHF\t\tx86_sahf\n \n #define ASSEMBLER_DIALECT\t(ix86_asm_dialect)\n \n@@ -361,6 +389,8 @@ extern int x86_prefetch_sse;\n #define TARGET_ANY_GNU_TLS\t(TARGET_GNU_TLS || TARGET_GNU2_TLS)\n #define TARGET_SUN_TLS\t\t(ix86_tls_dialect == TLS_DIALECT_SUN)\n \n+extern int ix86_isa_flags;\n+\n #ifndef TARGET_64BIT_DEFAULT\n #define TARGET_64BIT_DEFAULT 0\n #endif\n@@ -373,8 +403,17 @@ extern int x86_prefetch_sse;\n    the frame pointer in leaf functions.  */\n #define TARGET_DEFAULT 0\n \n+/* Extra bits to force.  */\n+#define TARGET_SUBTARGET_DEFAULT 0\n+#define TARGET_SUBTARGET_ISA_DEFAULT 0\n+\n+/* Extra bits to force on w/ 32-bit mode.  */\n+#define TARGET_SUBTARGET32_DEFAULT 0\n+#define TARGET_SUBTARGET32_ISA_DEFAULT 0\n+\n /* Extra bits to force on w/ 64-bit mode.  */\n #define TARGET_SUBTARGET64_DEFAULT 0\n+#define TARGET_SUBTARGET64_ISA_DEFAULT 0\n \n /* This is not really a target flag, but is done this way so that\n    it's analogous to similar code for Mach-O on PowerPC.  darwin.h"}, {"sha": "9257ae1ca4d021336a0c08ae502f67623ffc7eb4", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 63, "deletions": 62, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39", "patch": "@@ -23,18 +23,6 @@ m128bit-long-double\n Target RejectNegative Report Mask(128BIT_LONG_DOUBLE)\n sizeof(long double) is 16\n \n-m32\n-Target RejectNegative Negative(m64) Report InverseMask(64BIT)\n-Generate 32bit i386 code\n-\n-m3dnow\n-Target Report Mask(3DNOW)\n-Support 3DNow! built-in functions\n-\n-m64\n-Target RejectNegative Negative(m32) Report Mask(64BIT)\n-Generate 64bit x86-64 code\n-\n m80387\n Target Report Mask(80387)\n Use hardware fp\n@@ -119,10 +107,6 @@ mintel-syntax\n Target Undocumented\n ;; Deprecated\n \n-mmmx\n-Target Report Mask(MMX)\n-Support MMX built-in functions\n-\n mms-bitfields\n Target Report Mask(MS_BITFIELD_LAYOUT)\n Use native (MS) bitfield layout\n@@ -171,50 +155,6 @@ msoft-float\n Target InverseMask(80387)\n Do not use hardware fp\n \n-msse\n-Target Report Mask(SSE)\n-Support MMX and SSE built-in functions and code generation\n-\n-msse2\n-Target Report Mask(SSE2)\n-Support MMX, SSE and SSE2 built-in functions and code generation\n-\n-msse3\n-Target Report Mask(SSE3)\n-Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation\n-\n-mssse3\n-Target Report Mask(SSSE3)\n-Support MMX, SSE, SSE2, SSE3 and SSSE3 built-in functions and code generation\n-\n-msse4.1\n-Target Report Mask(SSE4_1)\n-Support MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1 built-in functions and code generation\n-\n-msse4a\n-Target Report Mask(SSE4A)\n-Support MMX, SSE, SSE2, SSE3 and SSE4A built-in functions and code generation\n-\n-mpopcnt\n-Target Report Mask(POPCNT)\n-Support code generation of popcnt instruction for popcount built-ins \n-namely __builtin_popcount, __builtin_popcountl and __builtin_popcountll\n-\n-mabm\n-Target Report Mask(ABM)\n-Support code generation of Advanced Bit Manipulation (ABM) instructions,\n-which include popcnt and lzcnt instructions, for popcount and clz built-ins\n-namely __builtin_popcount, __builtin_popcountl, __builtin_popcountll and\n-__builtin_clz, __builtin_clzl, __builtin_clzll\n-\n-mcx16\n-Target Report RejectNegative Var(x86_cmpxchg16b)\n-Support code generation of cmpxchg16b instruction.\n-\n-msahf\n-Target Report RejectNegative Var(x86_sahf)\n-Support code generation of sahf instruction in 64bit x86-64 code\n-\n msseregparm\n Target RejectNegative Mask(SSEREGPARM)\n Use SSE register passing conventions for SF and DF mode\n@@ -243,5 +183,66 @@ mtune=\n Target RejectNegative Joined Var(ix86_tune_string)\n Schedule code for given CPU\n \n-;; Support Athlon 3Dnow builtins\n-Mask(3DNOW_A)\n+;; ISA support\n+\n+m32\n+Target RejectNegative Negative(m64) Report InverseMask(ISA_64BIT) Var(ix86_isa_flags) VarExists\n+Generate 32bit i386 code\n+\n+m64\n+Target RejectNegative Negative(m32) Report Mask(ISA_64BIT) Var(ix86_isa_flags) VarExists\n+Generate 64bit x86-64 code\n+\n+mmmx\n+Target Report Mask(ISA_MMX) Var(ix86_isa_flags) VarExists\n+Support MMX built-in functions\n+\n+m3dnow\n+Target Report Mask(ISA_3DNOW) Var(ix86_isa_flags) VarExists\n+Support 3DNow! built-in functions\n+\n+m3dnowa\n+Target Undocumented Mask(ISA_3DNOW_A) Var(ix86_isa_flags) VarExists\n+Support Athlon 3Dnow! built-in functions\n+\n+msse\n+Target Report Mask(ISA_SSE) Var(ix86_isa_flags) VarExists\n+Support MMX and SSE built-in functions and code generation\n+\n+msse2\n+Target Report Mask(ISA_SSE2) Var(ix86_isa_flags) VarExists\n+Support MMX, SSE and SSE2 built-in functions and code generation\n+\n+msse3\n+Target Report Mask(ISA_SSE3) Var(ix86_isa_flags) VarExists\n+Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation\n+\n+mssse3\n+Target Report Mask(ISA_SSSE3) Var(ix86_isa_flags) VarExists\n+Support MMX, SSE, SSE2, SSE3 and SSSE3 built-in functions and code generation\n+\n+msse4.1\n+Target Report Mask(ISA_SSE4_1) Var(ix86_isa_flags) VarExists\n+Support MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1 built-in functions and code generation\n+\n+msse4a\n+Target Report Mask(ISA_SSE4A) Var(ix86_isa_flags) VarExists\n+Support MMX, SSE, SSE2, SSE3 and SSE4A built-in functions and code generation\n+\n+;; Instruction support\n+\n+mabm\n+Target Report RejectNegative Var(x86_abm)\n+Support code generation of Advanced Bit Manipulation (ABM) instructions.\n+\n+mcx16\n+Target Report RejectNegative Var(x86_cmpxchg16b)\n+Support code generation of cmpxchg16b instruction.\n+\n+mpopcnt\n+Target Report RejectNegative Var(x86_popcnt)\n+Support code generation of popcnt instruction.\n+\n+msahf\n+Target Report RejectNegative Var(x86_sahf)\n+Support code generation of sahf instruction in 64bit x86-64 code."}, {"sha": "cb5a87d598edf5e470987a8b16d71b031507417f", "filename": "gcc/config/i386/unix.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2Fconfig%2Fi386%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39/gcc%2Fconfig%2Fi386%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Funix.h?ref=0a1c5e5520b74cb2f2450dce1ef9fa468ba3da39", "patch": "@@ -61,6 +61,7 @@ Boston, MA 02110-1301, USA.  */\n \n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    and returns float values in the 387.  */\n+#undef TARGET_SUBTARGET_DEFAULT\n #define TARGET_SUBTARGET_DEFAULT \\\n \t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n "}]}