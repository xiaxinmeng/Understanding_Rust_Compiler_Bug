{"sha": "0ad91047cd146c0f2e5a7589b2f11bb08fe1685b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkOTEwNDdjZDE0NmMwZjJlNWE3NTg5YjJmMTFiYjA4ZmUxNjg1Yg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-07-19T19:11:29Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-07-19T19:11:29Z"}, "message": "rs6000.md (arithmetic, [...]): Disable patterns performing SImode comparisons with SImode values if...\n\n\t* rs6000.md (arithmetic, logical, and shift Rc combiner patterns):\n\tDisable patterns performing SImode comparisons with SImode values\n\tif TARGET_POWERPC64 and instruction does not sign-extend or does\n\tnot mask to narrower than SImode, i.e. where bit 31 and bit 63 may\n\tdiffer for signed quantities.\n\t(indirect_jump): Add expander to choose RTL based on TARGET_64BIT.\n\t(tablejump): Patterns contingent on TARGET_64BIT not TARGET_POWERPC64.\n\t(decrement_and_branch_on_count): Add 64-bit variant.\n\nFrom-SVN: r28172", "tree": {"sha": "59a3f7cca13239eabf0e1bae23d9ccc82f92201a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59a3f7cca13239eabf0e1bae23d9ccc82f92201a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ad91047cd146c0f2e5a7589b2f11bb08fe1685b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad91047cd146c0f2e5a7589b2f11bb08fe1685b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad91047cd146c0f2e5a7589b2f11bb08fe1685b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad91047cd146c0f2e5a7589b2f11bb08fe1685b/comments", "author": null, "committer": null, "parents": [{"sha": "9608c09195c04769c7314dbae392d6bae14f1d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9608c09195c04769c7314dbae392d6bae14f1d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9608c09195c04769c7314dbae392d6bae14f1d1e"}], "stats": {"total": 486, "additions": 370, "deletions": 116}, "files": [{"sha": "dd689e275eb8b50c61cb5c7effd93cde949a79ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad91047cd146c0f2e5a7589b2f11bb08fe1685b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad91047cd146c0f2e5a7589b2f11bb08fe1685b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ad91047cd146c0f2e5a7589b2f11bb08fe1685b", "patch": "@@ -1,3 +1,14 @@\n+Mon Jul 19 15:09:29 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.md (arithmetic, logical, and shift Rc combiner patterns):\n+\tDisable patterns performing SImode comparisons with SImode values\n+\tif TARGET_POWERPC64 and instruction does not sign-extend or does\n+\tnot mask to narrower than SImode, i.e. where bit 31 and bit 63 may\n+\tdiffer for signed quantities.\n+\t(indirect_jump): Add expander to choose RTL based on TARGET_64BIT.\n+\t(tablejump): Patterns contingent on TARGET_64BIT not TARGET_POWERPC64.\n+\t(decrement_and_branch_on_count): Add 64-bit variant.\n+\n Mon Jul 19 09:36:27 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* final.c (output_asm_insn): When searching for the matching string"}, {"sha": "d9e82a815a339425156090630b2b1deee3bdc55c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 359, "deletions": 116, "changes": 475, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad91047cd146c0f2e5a7589b2f11bb08fe1685b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad91047cd146c0f2e5a7589b2f11bb08fe1685b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=0ad91047cd146c0f2e5a7589b2f11bb08fe1685b", "patch": "@@ -931,7 +931,7 @@\n \t\t\t     (match_operand:SI 2 \"reg_or_short_operand\" \"r,I,r,I\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {cax.|add.} %3,%1,%2\n    {ai.|addic.} %3,%1,%2\n@@ -946,7 +946,7 @@\n \t\t\t     (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 3)\n \t(plus:SI (match_dup 1)\n \t\t (match_dup 2)))\n@@ -963,7 +963,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(plus:SI (match_dup 1)\n \t\t (match_dup 2)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {cax.|add.} %0,%1,%2\n    {ai.|addic.} %0,%1,%2\n@@ -979,7 +979,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:SI (match_dup 1)\n \t\t (match_dup 2)))\n@@ -1022,7 +1022,7 @@\n \t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 2 \"=r,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    nor. %2,%1,%1\n    #\"\n@@ -1034,7 +1034,7 @@\n \t(compare:CC (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 2 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 2)\n \t(not:SI (match_dup 1)))\n    (set (match_dup 0)\n@@ -1048,7 +1048,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(not:SI (match_dup 1)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    nor. %0,%1,%1\n    #\"\n@@ -1061,7 +1061,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(not:SI (match_dup 1)))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0)\n \t(not:SI (match_dup 1)))\n    (set (match_dup 2)\n@@ -1104,7 +1104,7 @@\n \t\t\t      (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC\"\n+  \"TARGET_POWERPC && ! TARGET_POWERPC64\"\n   \"@\n    subf. %3,%2,%1\n    #\"\n@@ -1117,7 +1117,7 @@\n \t\t\t      (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 3)\n \t(minus:SI (match_dup 1)\n \t\t  (match_dup 2)))\n@@ -1148,7 +1148,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(minus:SI (match_dup 1)\n \t\t  (match_dup 2)))]\n-  \"TARGET_POWERPC\"\n+  \"TARGET_POWERPC && ! TARGET_POWERPC64\"\n   \"@\n    subf. %0,%2,%1\n    #\"\n@@ -1163,7 +1163,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(minus:SI (match_dup 1)\n \t\t  (match_dup 2)))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0)\n \t(minus:SI (match_dup 1)\n \t\t  (match_dup 2)))\n@@ -1324,7 +1324,7 @@\n   \"\"\n   \"\n {\n-  if (!TARGET_POWER)\n+  if (! TARGET_POWER)\n     {\n       emit_insn (gen_abssi2_nopower (operands[0], operands[1]));\n       DONE;\n@@ -1341,7 +1341,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,r\")\n \t(abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\")))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n-  \"!TARGET_POWER\"\n+  \"! TARGET_POWER\"\n   \"*\n {\n   return (TARGET_POWERPC)\n@@ -1354,7 +1354,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,r\")\n \t(abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\")))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n-  \"!TARGET_POWER && reload_completed\"\n+  \"! TARGET_POWER && reload_completed\"\n   [(set (match_dup 2) (ashiftrt:SI (match_dup 1) (const_int 31)))\n    (set (match_dup 0) (xor:SI (match_dup 2) (match_dup 1)))\n    (set (match_dup 0) (minus:SI (match_dup 0) (match_dup 2)))]\n@@ -1370,7 +1370,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,r\")\n \t(neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\"))))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n-  \"!TARGET_POWER\"\n+  \"! TARGET_POWER\"\n   \"*\n {\n   return (TARGET_POWERPC)\n@@ -1383,7 +1383,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,r\")\n \t(neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\"))))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n-  \"!TARGET_POWER && reload_completed\"\n+  \"! TARGET_POWER && reload_completed\"\n   [(set (match_dup 2) (ashiftrt:SI (match_dup 1) (const_int 31)))\n    (set (match_dup 0) (xor:SI (match_dup 2) (match_dup 1)))\n    (set (match_dup 0) (minus:SI (match_dup 2) (match_dup 0)))]\n@@ -1400,7 +1400,7 @@\n \t(compare:CC (neg:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 2 \"=r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"neg. %2,%1\"\n   [(set_attr \"type\" \"compare\")])\n \n@@ -1410,7 +1410,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:SI (match_dup 1)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"neg. %0,%1\"\n   [(set_attr \"type\" \"compare\")])\n \n@@ -1874,7 +1874,7 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r,r,r,r,r,r,r\"))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    and. %3,%1,%2\n    {andil.|andi.} %3,%1,%b2\n@@ -1894,7 +1894,7 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))\n    (clobber (match_scratch:CC 4 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(parallel [(set (match_dup 3)\n \t\t   (and:SI (match_dup 1)\n \t\t\t   (match_dup 2)))\n@@ -1913,7 +1913,7 @@\n \t(and:SI (match_dup 1)\n \t\t(match_dup 2)))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    and. %0,%1,%2\n    {andil.|andi.} %0,%1,%b2\n@@ -1935,7 +1935,7 @@\n \t(and:SI (match_dup 1)\n \t\t(match_dup 2)))\n    (clobber (match_scratch:CC 4 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(parallel [(set (match_dup 0)\n \t\t   (and:SI (match_dup 1)\n \t\t\t   (match_dup 2)))\n@@ -1983,7 +1983,7 @@\n \t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    or. %3,%1,%2\n    #\"\n@@ -1996,7 +1996,7 @@\n \t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 3)\n \t(ior:SI (match_dup 1)\n \t\t(match_dup 2)))\n@@ -2013,7 +2013,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ior:SI (match_dup 1)\n \t\t(match_dup 2)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    or. %0,%1,%2\n    #\"\n@@ -2027,7 +2027,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(ior:SI (match_dup 1) (match_dup 2)))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0)\n \t(ior:SI (match_dup 1)\n \t\t(match_dup 2)))\n@@ -2090,7 +2090,7 @@\n \t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    xor. %3,%1,%2\n    #\"\n@@ -2103,7 +2103,7 @@\n \t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 3)\n \t(xor:SI (match_dup 1)\n \t\t(match_dup 2)))\n@@ -2120,7 +2120,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(xor:SI (match_dup 1)\n \t\t(match_dup 2)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    xor. %0,%1,%2\n    #\"\n@@ -2134,7 +2134,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(xor:SI (match_dup 1) (match_dup 2)))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0)\n \t(xor:SI (match_dup 1)\n \t\t(match_dup 2)))\n@@ -2172,7 +2172,7 @@\n \t\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n-   \"\"\n+   \"! TARGET_POWERPC64\"\n    \"@\n     eqv. %3,%1,%2\n     #\"\n@@ -2185,7 +2185,7 @@\n \t\t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 3)\n \t(not:SI (xor:SI (match_dup 1)\n \t\t\t(match_dup 2))))\n@@ -2201,7 +2201,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(not:SI (xor:SI (match_dup 1) (match_dup 2))))]\n-   \"\"\n+   \"! TARGET_POWERPC64\"\n    \"@\n     eqv. %0,%1,%2\n     #\"\n@@ -2216,7 +2216,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(not:SI (xor:SI (match_dup 1)\n \t\t\t(match_dup 2))))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0)\n \t(not:SI (xor:SI (match_dup 1)\n \t\t\t(match_dup 2))))\n@@ -2238,7 +2238,7 @@\n \t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    andc. %3,%2,%1\n    #\"\n@@ -2251,7 +2251,7 @@\n \t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 3)\n \t(and:SI (not:SI (match_dup 1))\n \t\t(match_dup 2)))\n@@ -2268,7 +2268,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(and:SI (not:SI (match_dup 1))\n \t\t(match_dup 2)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    andc. %0,%2,%1\n    #\"\n@@ -2283,7 +2283,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(and:SI (not:SI (match_dup 1))\n \t\t(match_dup 2)))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0)\n \t(and:SI (not:SI (match_dup 1))\n \t\t(match_dup 2)))\n@@ -2305,7 +2305,7 @@\n \t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    orc. %3,%2,%1\n    #\"\n@@ -2318,7 +2318,7 @@\n \t\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 3)\n \t(ior:SI (not:SI (match_dup 1))\n \t\t(match_dup 2)))\n@@ -2334,7 +2334,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ior:SI (not:SI (match_dup 1)) (match_dup 2)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    orc. %0,%2,%1\n    #\"\n@@ -2348,7 +2348,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(ior:SI (not:SI (match_dup 1))\n \t\t(match_dup 2)))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0)\n \t(ior:SI (not:SI (match_dup 1))\n \t\t(match_dup 2)))\n@@ -2370,7 +2370,7 @@\n \t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    nand. %3,%1,%2\n    #\"\n@@ -2383,7 +2383,7 @@\n \t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 3)\n \t(ior:SI (not:SI (match_dup 1))\n \t\t(not:SI (match_dup 2))))\n@@ -2400,7 +2400,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ior:SI (not:SI (match_dup 1))\n \t\t(not:SI (match_dup 2))))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    nand. %0,%1,%2\n    #\"\n@@ -2415,7 +2415,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(ior:SI (not:SI (match_dup 1))\n \t\t(not:SI (match_dup 2))))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0)\n \t(ior:SI (not:SI (match_dup 1))\n \t\t(not:SI (match_dup 2))))\n@@ -2437,7 +2437,7 @@\n \t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    nor. %3,%1,%2\n    #\"\n@@ -2450,7 +2450,7 @@\n \t\t\t    (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 3)\n \t(and:SI (not:SI (match_dup 1))\n \t\t(not:SI (match_dup 2))))\n@@ -2467,7 +2467,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(and:SI (not:SI (match_dup 1))\n \t\t(not:SI (match_dup 2))))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    nor. %0,%1,%2\n    #\"\n@@ -2482,7 +2482,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(and:SI (not:SI (match_dup 1))\n \t\t(not:SI (match_dup 2))))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0)\n \t(and:SI (not:SI (match_dup 1))\n \t\t(not:SI (match_dup 2))))\n@@ -2594,10 +2594,10 @@\n ;; Rotate and shift insns, in all their variants.  These support shifts,\n ;; field inserts and extracts, and various combinations thereof.\n (define_expand \"insv\"\n-  [(set (zero_extract (match_operand 0 \"gpc_reg_operand\" \"+r\")\n-\t\t       (match_operand:SI 1 \"const_int_operand\" \"i\")\n-\t\t       (match_operand:SI 2 \"const_int_operand\" \"i\"))\n-\t(match_operand 3 \"gpc_reg_operand\" \"r\"))]\n+  [(set (zero_extract (match_operand 0 \"gpc_reg_operand\" \"\")\n+\t\t       (match_operand:SI 1 \"const_int_operand\" \"\")\n+\t\t       (match_operand:SI 2 \"const_int_operand\" \"\"))\n+\t(match_operand 3 \"gpc_reg_operand\" \"\"))]\n   \"\"\n   \"\n {\n@@ -2722,10 +2722,10 @@\n }\")\n \n (define_expand \"extzv\"\n-  [(set (match_operand 0 \"gpc_reg_operand\" \"=r\")\n-\t(zero_extract (match_operand 1 \"gpc_reg_operand\" \"r\")\n-\t\t       (match_operand:SI 2 \"const_int_operand\" \"i\")\n-\t\t       (match_operand:SI 3 \"const_int_operand\" \"i\")))]\n+  [(set (match_operand 0 \"gpc_reg_operand\" \"\")\n+\t(zero_extract (match_operand 1 \"gpc_reg_operand\" \"\")\n+\t\t       (match_operand:SI 2 \"const_int_operand\" \"\")\n+\t\t       (match_operand:SI 3 \"const_int_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -2768,7 +2768,7 @@\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"*\n {\n   int start = INTVAL (operands[3]) & 31;\n@@ -2806,7 +2806,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(zero_extract:SI (match_dup 1) (match_dup 2) (match_dup 3)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"*\n {\n   int start = INTVAL (operands[3]) & 31;\n@@ -2901,7 +2901,7 @@\n \t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{rl%I2nm.|rlw%I2nm.} %3,%1,%h2,0xffffffff\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n@@ -2912,7 +2912,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(rotate:SI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{rl%I2nm.|rlw%I2nm.} %0,%1,%h2,0xffffffff\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n@@ -2932,7 +2932,7 @@\n \t\t     (match_operand:SI 3 \"mask_operand\" \"T\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{rl%I2nm.|rlw%I2nm.} %4,%1,%h2,%m3,%M3\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n@@ -2945,7 +2945,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (rotate:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{rl%I2nm.|rlw%I2nm.} %0,%1,%h2,%m3,%M3\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n@@ -3072,7 +3072,7 @@\n \t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r\"))]\n-  \"! TARGET_POWER\"\n+  \"! TARGET_POWER && ! TARGET_POWERPC64\"\n   \"{sl|slw}%I2. %3,%1,%h2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n@@ -3097,7 +3097,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWER\"\n+  \"! TARGET_POWER && ! TARGET_POWERPC64\"\n   \"{sl|slw}%I2. %0,%1,%h2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n@@ -3117,7 +3117,7 @@\n \t\t (match_operand:SI 3 \"mask_operand\" \"T\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=r\"))]\n-  \"includes_lshift_p (operands[2], operands[3])\"\n+  \"! TARGET_POWERPC64 && includes_lshift_p (operands[2], operands[3])\"\n   \"{rlinm.|rlwinm.} %4,%1,%h2,%m3,%M3\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n@@ -3130,7 +3130,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (ashift:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"includes_lshift_p (operands[2], operands[3])\"\n+  \"! TARGET_POWERPC64 && includes_lshift_p (operands[2], operands[3])\"\n   \"{rlinm.|rlwinm.} %0,%1,%h2,%m3,%M3\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n@@ -3190,7 +3190,7 @@\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"O,ri\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=X,r\"))]\n-  \"! TARGET_POWER\"\n+  \"! TARGET_POWER && ! TARGET_POWERPC64\"\n   \"@\n    mr. %1,%1\n    {sr|srw}%I2. %3,%1,%h2\"\n@@ -3218,7 +3218,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWER\"\n+  \"! TARGET_POWER && ! TARGET_POWERPC64\"\n   \"@\n    mr. %0,%1\n    {sr|srw}%I2. %0,%1,%h2\"\n@@ -3240,7 +3240,7 @@\n \t\t (match_operand:SI 3 \"mask_operand\" \"T\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=r\"))]\n-  \"includes_rshift_p (operands[2], operands[3])\"\n+  \"! TARGET_POWERPC64 && includes_rshift_p (operands[2], operands[3])\"\n   \"{rlinm.|rlwinm.} %4,%1,%s2,%m3,%M3\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n@@ -3253,7 +3253,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (lshiftrt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"includes_rshift_p (operands[2], operands[3])\"\n+  \"! TARGET_POWERPC64 && includes_rshift_p (operands[2], operands[3])\"\n   \"{rlinm.|rlwinm.} %0,%1,%s2,%m3,%M3\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n@@ -3745,10 +3745,10 @@\n   \"\")\n \n (define_expand \"movsfcc\"\n-   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t (if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n-\t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n+\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"\")\n+\t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"\")))]\n   \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"\n {\n@@ -3992,10 +3992,10 @@\n   \"\")\n \n (define_expand \"movdfcc\"\n-   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t (if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n-\t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n+\t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"\")\n+\t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"\")))]\n   \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"\n {\n@@ -5775,14 +5775,14 @@\n (define_insn \"elf_high\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n-  \"TARGET_ELF && !TARGET_64BIT\"\n+  \"TARGET_ELF && ! TARGET_64BIT\"\n   \"{liu|lis} %0,%1@ha\")\n \n (define_insn \"elf_low\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n \t\t   (match_operand 2 \"\" \"\")))]\n-   \"TARGET_ELF && !TARGET_64BIT\"\n+   \"TARGET_ELF && ! TARGET_64BIT\"\n    \"{cal|la} %0,%2@l(%1)\")\n \n ;; Set up a register with a value from the GOT table\n@@ -6015,7 +6015,7 @@\n \t(compare:CC (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\") (match_dup 1))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"mr. %0,%1\"\n   [(set_attr \"type\" \"compare\")])\n \f\n@@ -6896,7 +6896,7 @@\n   [(set (match_operand:TI 0 \"reg_or_mem_operand\" \"=m,????r,????r\")\n \t(match_operand:TI 1 \"reg_or_mem_operand\" \"r,r,m\"))\n    (clobber (match_scratch:SI 2 \"=X,X,X\"))]\n-  \"TARGET_STRING && !TARGET_POWER && ! TARGET_POWERPC64\n+  \"TARGET_STRING && ! TARGET_POWER && ! TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], TImode) || gpc_reg_operand (operands[1], TImode))\"\n   \"*\n {\n@@ -7126,7 +7126,7 @@\n \t\t   [(set (mem:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\"))\n \t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n \t\t    (clobber (match_scratch:SI 3 \"X\"))])]\n-  \"TARGET_STRING && !TARGET_POWER\"\n+  \"TARGET_STRING && ! TARGET_POWER\"\n   \"{stsi|stswi} %2,%1,%O0\"\n   [(set_attr \"type\" \"store\")])\n \n@@ -7207,7 +7207,7 @@\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n    (clobber (match_scratch:SI 5 \"X\"))]\n-  \"TARGET_STRING && !TARGET_POWER\n+  \"TARGET_STRING && ! TARGET_POWER\n    && ((INTVAL (operands[2]) > 24 && INTVAL (operands[2]) < 32) || INTVAL (operands[2]) == 0)\n    && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 12)\n@@ -7266,7 +7266,7 @@\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n    (clobber (match_scratch:SI 5 \"X\"))]\n-  \"TARGET_STRING && !TARGET_POWER\n+  \"TARGET_STRING && ! TARGET_POWER\n    && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 32\n    && (REGNO (operands[0]) < 7 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 7 || REGNO (operands[1]) > 12)\n@@ -7319,7 +7319,7 @@\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n    (clobber (match_scratch:SI 5 \"X\"))]\n-  \"TARGET_STRING && !TARGET_POWER\n+  \"TARGET_STRING && ! TARGET_POWER\n    && INTVAL (operands[2]) > 8 && INTVAL (operands[2]) <= 16\n    && (REGNO (operands[0]) < 9 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 9 || REGNO (operands[1]) > 12)\n@@ -7336,7 +7336,7 @@\n \t      (use (match_operand 3 \"\" \"\"))\n \t      (clobber (match_scratch:DI 4 \"\"))\n \t      (clobber (match_scratch:SI 5 \"\"))])]\n-  \"TARGET_STRING && !TARGET_64BIT\"\n+  \"TARGET_STRING && ! TARGET_64BIT\"\n   \"\")\n \n (define_insn \"\"\n@@ -7346,7 +7346,7 @@\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_scratch:DI 4 \"=&r\"))\n    (clobber (match_scratch:SI 5 \"=q\"))]\n-  \"TARGET_STRING && TARGET_POWER && !TARGET_64BIT\n+  \"TARGET_STRING && TARGET_POWER && ! TARGET_64BIT\n    && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"load\")\n@@ -7359,7 +7359,7 @@\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_scratch:DI 4 \"=&r\"))\n    (clobber (match_scratch:SI 5 \"X\"))]\n-  \"TARGET_STRING && !TARGET_POWER && !TARGET_64BIT\n+  \"TARGET_STRING && ! TARGET_POWER && ! TARGET_64BIT\n    && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"load\")\n@@ -7396,7 +7396,7 @@\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_scratch:SI 4 \"=&r\"))\n    (clobber (match_scratch:SI 5 \"X\"))]\n-  \"TARGET_STRING && !TARGET_POWER\n+  \"TARGET_STRING && ! TARGET_POWER\n    && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 4\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"load\")\n@@ -8881,7 +8881,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 3 \"gpc_reg_operand\" \"=r\")\n \t(match_op_dup 1 [(match_dup 2) (const_int 0)]))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"%D1mfcr %3\\;{rlinm.|rlwinm.} %3,%3,%J1,1\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"12\")])\n@@ -10124,17 +10124,29 @@\n   \"{br|blr}\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n-(define_insn \"indirect_jump\"\n-  [(set (pc) (match_operand:SI 0 \"register_operand\" \"c,l\"))]\n+(define_expand \"indirect_jump\"\n+  [(set (pc) (match_operand 0 \"register_operand\" \"\"))]\n   \"\"\n+  \"\n+{\n+  if (TARGET_32BIT)\n+    emit_jump_insn (gen_indirect_jumpsi (operands[0]));\n+  else\n+    emit_jump_insn (gen_indirect_jumpdi (operands[0]));\n+  DONE;\n+}\")\n+\n+(define_insn \"indirect_jumpsi\"\n+  [(set (pc) (match_operand:SI 0 \"register_operand\" \"c,l\"))]\n+  \"TARGET_32BIT\"\n   \"@\n    bctr\n    {br|blr}\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n-(define_insn \"\"\n+(define_insn \"indirect_jumpdi\"\n   [(set (pc) (match_operand:DI 0 \"register_operand\" \"c,l\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    bctr\n    {br|blr}\"\n@@ -10160,7 +10172,7 @@\n \t\t (match_dup 2)))\n    (parallel [(set (pc) (match_dup 3))\n \t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n-  \"\"\n+  \"TARGET_32BIT\"\n   \"\n { operands[0] = force_reg (SImode, operands[0]);\n   operands[2] = force_reg (SImode, gen_rtx_LABEL_REF (VOIDmode, operands[1]));\n@@ -10173,7 +10185,7 @@\n \t\t (match_dup 2)))\n    (parallel [(set (pc) (match_dup 3))\n \t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n-  \"\"\n+  \"TARGET_64BIT\"\n   \"\n { operands[0] = force_reg (DImode, operands[0]);\n   operands[2] = force_reg (DImode, gen_rtx_LABEL_REF (VOIDmode, operands[1]));\n@@ -10184,7 +10196,7 @@\n   [(set (pc)\n \t(match_operand:SI 0 \"register_operand\" \"c,l\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n-  \"\"\n+  \"TARGET_32BIT\"\n   \"@\n    bctr\n    {br|blr}\"\n@@ -10194,7 +10206,7 @@\n   [(set (pc)\n \t(match_operand:DI 0 \"register_operand\" \"c,l\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    bctr\n    {br|blr}\"\n@@ -10209,6 +10221,19 @@\n ;; so loop.c knows what to generate.\n \n (define_expand \"decrement_and_branch_on_count\"\n+  [(use (match_operand 0 \"register_operand\" \"\"))\n+   (use (label_ref (match_operand 1 \"\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (TARGET_POWERPC64)\n+    emit_jump_insn (gen_ctrdi (operands[0], operands[1]));\n+  else\n+    emit_jump_insn (gen_ctrsi (operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+(define_expand \"ctrsi\"\n   [(parallel [(set (pc) (if_then_else (ne (match_operand:SI 0 \"register_operand\" \"\")\n \t\t\t\t\t  (const_int 1))\n \t\t\t\t      (label_ref (match_operand 1 \"\" \"\"))\n@@ -10218,16 +10243,29 @@\n \t\t\t    (const_int -1)))\n \t      (clobber (match_scratch:CC 2 \"\"))\n \t      (clobber (match_scratch:SI 3 \"\"))])]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n+  \"\")\n+\n+(define_expand \"ctrdi\"\n+  [(parallel [(set (pc) (if_then_else (ne (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t\t\t\t  (const_int 1))\n+\t\t\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t\t\t      (pc)))\n+\t      (set (match_dup 0)\n+\t\t   (plus:DI (match_dup 0)\n+\t\t\t    (const_int -1)))\n+\t      (clobber (match_scratch:CC 2 \"\"))\n+\t      (clobber (match_scratch:DI 3 \"\"))])]\n+  \"TARGET_POWERPC64\"\n   \"\")\n \n ;; We need to be able to do this for any operand, including MEM, or we\n ;; will cause reload to blow up since we don't allow output reloads on\n ;; JUMP_INSNs.\n-;; In order that the length attribute is calculated correctly, the\n+;; For the length attribute to be calculated correctly, the\n ;; label MUST be operand 0.\n \n-(define_insn \"\"\n+(define_insn \"*ctrsi_internal1\"\n   [(set (pc)\n \t(if_then_else (ne (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 1))\n@@ -10238,7 +10276,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -10251,7 +10289,7 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,12,16\")])\n \n-(define_insn \"\"\n+(define_insn \"*ctrsi_internal2\"\n   [(set (pc)\n \t(if_then_else (ne (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 1))\n@@ -10262,7 +10300,55 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n+  \"*\n+{\n+  if (which_alternative != 0)\n+    return \\\"#\\\";\n+  else if (get_attr_length (insn) == 8)\n+    return \\\"bdz %l0\\\";\n+  else\n+    return \\\"{bdn|bdnz} %$+8\\;b %l0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"*,12,16\")])\n+\n+(define_insn \"*ctrdi_internal1\"\n+  [(set (pc)\n+\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t\t\t  (const_int 1))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:DI (match_dup 1)\n+\t\t (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"*\n+{\n+  if (which_alternative != 0)\n+    return \\\"#\\\";\n+  else if (get_attr_length (insn) == 8)\n+    return \\\"{bdn|bdnz} %l0\\\";\n+  else\n+    return \\\"bdz %$+8\\;b %l0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"*,12,16\")])\n+\n+(define_insn \"*ctrdi_internal2\"\n+  [(set (pc)\n+\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t\t\t  (const_int 1))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:DI (match_dup 1)\n+\t\t (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+  \"TARGET_POWERPC64\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -10276,7 +10362,8 @@\n    (set_attr \"length\" \"*,12,16\")])\n \n ;; Similar, but we can use GE since we have a REG_NONNEG.\n-(define_insn \"\"\n+\n+(define_insn \"*ctrsi_internal3\"\n   [(set (pc)\n \t(if_then_else (ge (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 0))\n@@ -10287,7 +10374,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&X\"))\n    (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n-  \"find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"! TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -10300,7 +10387,7 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,12,16\")])\n \n-(define_insn \"\"\n+(define_insn \"*ctrsi_internal4\"\n   [(set (pc)\n \t(if_then_else (ge (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 0))\n@@ -10311,7 +10398,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&X\"))\n    (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n-  \"find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"! TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -10324,7 +10411,57 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,12,16\")])\n \n-(define_insn \"\"\n+(define_insn \"*ctrdi_internal3\"\n+  [(set (pc)\n+\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:DI (match_dup 1)\n+\t\t (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"=X,&x,&X\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+  \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"*\n+{\n+  if (which_alternative != 0)\n+    return \\\"#\\\";\n+  else if (get_attr_length (insn) == 8)\n+    return \\\"{bdn|bdnz} %l0\\\";\n+  else\n+    return \\\"bdz %$+8\\;b %l0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"*,12,16\")])\n+\n+(define_insn \"*ctrdi_internal4\"\n+  [(set (pc)\n+\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t\t\t  (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:DI (match_dup 1)\n+\t\t (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"=X,&x,&X\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+  \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"*\n+{\n+  if (which_alternative != 0)\n+    return \\\"#\\\";\n+  else if (get_attr_length (insn) == 8)\n+    return \\\"bdz %l0\\\";\n+  else\n+    return \\\"{bdn|bdnz} %$+8\\;b %l0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"*,12,16\")])\n+\n+;; Similar but use EQ\n+\n+(define_insn \"*ctrsi_internal5\"\n   [(set (pc)\n \t(if_then_else (eq (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 1))\n@@ -10335,7 +10472,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -10348,7 +10485,7 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,12,16\")])\n \n-(define_insn \"\"\n+(define_insn \"*ctrsi_internal6\"\n   [(set (pc)\n \t(if_then_else (eq (match_operand:SI 1 \"register_operand\" \"c,*r,*r\")\n \t\t\t  (const_int 1))\n@@ -10359,7 +10496,55 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n+  \"*\n+{\n+  if (which_alternative != 0)\n+    return \\\"#\\\";\n+  else if (get_attr_length (insn) == 8)\n+    return \\\"{bdn|bdnz} %l0\\\";\n+  else\n+    return \\\"bdz %$+8\\;b %l0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"*,12,16\")])\n+\n+(define_insn \"*ctrdi_internal5\"\n+  [(set (pc)\n+\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t\t\t  (const_int 1))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:DI (match_dup 1)\n+\t\t (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"*\n+{\n+  if (which_alternative != 0)\n+    return \\\"#\\\";\n+  else if (get_attr_length (insn) == 8)\n+    return \\\"bdz %l0\\\";\n+  else\n+    return \\\"{bdn|bdnz} %$+8\\;b %l0\\\";\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"*,12,16\")])\n+\n+(define_insn \"*ctrdi_internal6\"\n+  [(set (pc)\n+\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t\t\t  (const_int 1))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+\t(plus:DI (match_dup 1)\n+\t\t (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+  \"TARGET_POWERPC64\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -10372,6 +10557,8 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,12,16\")])\n \n+;; Now the splitters if we could not allocate the CTR register\n+\n (define_split\n   [(set (pc)\n \t(if_then_else (match_operator 2 \"comparison_operator\"\n@@ -10384,7 +10571,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n    (clobber (match_scratch:SI 4 \"\"))]\n-  \"reload_completed\"\n+  \"! TARGET_POWERPC64 && reload_completed\"\n   [(parallel [(set (match_dup 3)\n \t\t   (compare:CC (plus:SI (match_dup 1)\n \t\t\t\t\t(const_int -1))\n@@ -10410,7 +10597,8 @@\n \t(plus:SI (match_dup 1) (const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n    (clobber (match_scratch:SI 4 \"\"))]\n-  \"reload_completed && ! gpc_reg_operand (operands[0], SImode)\"\n+  \"! TARGET_POWERPC64 && reload_completed\n+   && ! gpc_reg_operand (operands[0], SImode)\"\n   [(parallel [(set (match_dup 3)\n \t\t   (compare:CC (plus:SI (match_dup 1)\n \t\t\t\t\t(const_int -1))\n@@ -10426,6 +10614,61 @@\n   \"\n { operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n+(define_split\n+  [(set (pc)\n+\t(if_then_else (match_operator 2 \"comparison_operator\"\n+\t\t\t\t      [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t\t       (const_int 1)])\n+\t\t      (match_operand 5 \"\" \"\")\n+\t\t      (match_operand 6 \"\" \"\")))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(plus:DI (match_dup 1)\n+\t\t (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"\"))\n+   (clobber (match_scratch:DI 4 \"\"))]\n+  \"TARGET_POWERPC64 && reload_completed\"\n+  [(parallel [(set (match_dup 3)\n+\t\t   (compare:CC (plus:DI (match_dup 1)\n+\t\t\t\t\t(const_int -1))\n+\t\t\t       (const_int 0)))\n+\t      (set (match_dup 0)\n+\t\t   (plus:DI (match_dup 1)\n+\t\t\t    (const_int -1)))])\n+   (set (pc) (if_then_else (match_dup 7)\n+\t\t\t   (match_dup 5)\n+\t\t\t   (match_dup 6)))]\n+  \"\n+{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+\t\t\t const0_rtx); }\")\n+\n+(define_split\n+  [(set (pc)\n+\t(if_then_else (match_operator 2 \"comparison_operator\"\n+\t\t\t\t      [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t\t       (const_int 1)])\n+\t\t      (match_operand 5 \"\" \"\")\n+\t\t      (match_operand 6 \"\" \"\")))\n+   (set (match_operand:DI 0 \"general_operand\" \"\")\n+\t(plus:DI (match_dup 1) (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"\"))\n+   (clobber (match_scratch:DI 4 \"\"))]\n+  \"TARGET_POWERPC64 && reload_completed\n+   && ! gpc_reg_operand (operands[0], DImode)\"\n+  [(parallel [(set (match_dup 3)\n+\t\t   (compare:CC (plus:DI (match_dup 1)\n+\t\t\t\t\t(const_int -1))\n+\t\t\t       (const_int 0)))\n+\t      (set (match_dup 4)\n+\t\t   (plus:DI (match_dup 1)\n+\t\t\t    (const_int -1)))])\n+   (set (match_dup 0)\n+\t(match_dup 4))\n+   (set (pc) (if_then_else (match_dup 7)\n+\t\t\t   (match_dup 5)\n+\t\t\t   (match_dup 6)))]\n+  \"\n+{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+\t\t\t const0_rtx); }\")\n \f\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 0))]"}]}