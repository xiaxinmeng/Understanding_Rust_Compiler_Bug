{"sha": "967d1506d5c209c3a83160dc2f775cc4fef982eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY3ZDE1MDZkNWMyMDljM2E4MzE2MGRjMmY3NzVjYzRmZWY5ODJlYg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-08-12T21:16:23Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-08-12T21:16:23Z"}, "message": "Add -m{,no-}underscore support.\n\nFrom-SVN: r5147", "tree": {"sha": "5d708ccb22e34730c4570676433574f4f0328571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d708ccb22e34730c4570676433574f4f0328571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/967d1506d5c209c3a83160dc2f775cc4fef982eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967d1506d5c209c3a83160dc2f775cc4fef982eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967d1506d5c209c3a83160dc2f775cc4fef982eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967d1506d5c209c3a83160dc2f775cc4fef982eb/comments", "author": null, "committer": null, "parents": [{"sha": "6e026f481e0d99c6aadef102be92604c15d49fa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e026f481e0d99c6aadef102be92604c15d49fa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e026f481e0d99c6aadef102be92604c15d49fa5"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "d9727409cf718647b68e725ec6e3968174badee7", "filename": "gcc/config/i386/osfelf.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967d1506d5c209c3a83160dc2f775cc4fef982eb/gcc%2Fconfig%2Fi386%2Fosfelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967d1506d5c209c3a83160dc2f775cc4fef982eb/gcc%2Fconfig%2Fi386%2Fosfelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfelf.h?ref=967d1506d5c209c3a83160dc2f775cc4fef982eb", "patch": "@@ -26,6 +26,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef  CPP_SPEC\n #define CPP_SPEC \"\\\n %{!mrose: %{!mno-elf: -D__ELF__}} %{mrose: -D__ROSE__} %{mno-elf: -D__ROSE__} \\\n+%{mno-underscores: -D__NO_UNDERSCORES__} \\\n %{.S:\t%{!ansi:%{!traditional:%{!traditional-cpp:%{!ftraditional: -traditional}}}}} \\\n %{.S:\t-D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n %{.cc:\t-D__LANGUAGE_C_PLUS_PLUS} \\"}, {"sha": "b6abb81bb9288efbd709800767e5a40846313557", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967d1506d5c209c3a83160dc2f775cc4fef982eb/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967d1506d5c209c3a83160dc2f775cc4fef982eb/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=967d1506d5c209c3a83160dc2f775cc4fef982eb", "patch": "@@ -37,24 +37,29 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define MASK_HALF_PIC_DEBUG\t0x20000000\t/* Debug flag */\n #define MASK_ELF\t\t0x10000000\t/* ELF not rose */\n #define MASK_NO_IDENT\t\t0x08000000\t/* suppress .ident */\n+#define MASK_NO_UNDERSCORES\t0x04000000\t/* suppress leading _ */\n \n-#define TARGET_HALF_PIC\t(target_flags & MASK_HALF_PIC)\n-#define TARGET_DEBUG\t(target_flags & MASK_HALF_PIC_DEBUG)\n-#define HALF_PIC_DEBUG\tTARGET_DEBUG\n-#define TARGET_ELF\t(target_flags & MASK_ELF)\n-#define TARGET_ROSE\t((target_flags & MASK_ELF) == 0)\n-#define TARGET_IDENT\t((target_flags & MASK_NO_IDENT) == 0)\n+#define TARGET_HALF_PIC\t\t(target_flags & MASK_HALF_PIC)\n+#define TARGET_DEBUG\t\t(target_flags & MASK_HALF_PIC_DEBUG)\n+#define HALF_PIC_DEBUG\t\tTARGET_DEBUG\n+#define TARGET_ELF\t\t(target_flags & MASK_ELF)\n+#define TARGET_ROSE\t\t((target_flags & MASK_ELF) == 0)\n+#define TARGET_IDENT\t\t((target_flags & MASK_NO_IDENT) == 0)\n+#define TARGET_UNDERSCORES\t((target_flags & MASK_NO_UNDERSCORES) == 0)\n \n #undef\tSUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n      { \"half-pic\",\t MASK_HALF_PIC},\t\t\t\t\\\n      { \"no-half-pic\",\t-MASK_HALF_PIC},\t\t\t\t\\\n+     { \"debug-half-pic\", MASK_HALF_PIC_DEBUG},\t\t\t\t\\\n      { \"debugb\",\t MASK_HALF_PIC_DEBUG},\t\t\t\t\\\n      { \"elf\",\t\t MASK_ELF},\t\t\t\t\t\\\n      { \"no-elf\",\t-MASK_ELF},\t\t\t\t\t\\\n      { \"rose\",\t\t-MASK_ELF},\t\t\t\t\t\\\n      { \"ident\",\t\t-MASK_NO_IDENT},\t\t\t\t\\\n-     { \"no-ident\",\t MASK_NO_IDENT},\n+     { \"no-ident\",\t MASK_NO_IDENT},\t\t\t\t\\\n+     { \"underscores\",\t-MASK_NO_UNDERSCORES},\t\t\t\t\\\n+     { \"no-underscores\", MASK_NO_UNDERSCORES},\n \n /* OSF/rose uses stabs, not dwarf.  */\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n@@ -74,6 +79,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef  CPP_SPEC\n #define CPP_SPEC \"\\\n %{!melf: -D__ROSE__} %{melf: -D__ELF__} \\\n+%{mno-underscores: -D__NO_UNDERSCORES__} \\\n %{.S:\t%{!ansi:%{!traditional:%{!traditional-cpp:%{!ftraditional: -traditional}}}}} \\\n %{.S:\t-D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n %{.cc:\t-D__LANGUAGE_C_PLUS_PLUS} \\\n@@ -145,6 +151,36 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef  FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO) fprintf (FILE, \"\\tcall _mcount\\n\")\n \n+/* Prefix for internally generated assembler labels.  If we aren't using\n+   underscores, we are using prefix `.'s to identify labels that should\n+   be ignored, as in `i386/gas.h' --karl@cs.umb.edu  */\n+#undef\tLPREFIX\n+#define\tLPREFIX ((TARGET_UNDERSCORES) ? \"L\" : \".L\")\n+\n+/* This is how to store into the string BUF\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#undef\tASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\t\t\\\n+    sprintf ((BUF), \"*%s%s%d\", (TARGET_UNDERSCORES) ? \"\" : \".\",\t\t\\\n+\t     (PREFIX), (NUMBER))\n+\n+/* This is how to output an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#undef\tASM_OUTPUT_INTERNAL_LABEL\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\t\t\\\n+  fprintf (FILE, \"%s%s%d:\\n\", (TARGET_UNDERSCORES) ? \"\" : \".\",\t\t\\\n+\t   PREFIX, NUM)\n+\n+/* This is how to output a reference to a user-level label named NAME.  */\n+\n+#undef\tASM_OUTPUT_LABELREF\n+#define ASM_OUTPUT_LABELREF(FILE,NAME)\t\t\t\t\t\\\n+  fprintf (FILE, \"%s%s\", (TARGET_UNDERSCORES) ? \"_\" : \"\", NAME)\n+\n /* A C expression that is 1 if the RTX X is a constant which is a\n    valid address.  On most machines, this can be defined as\n    `CONSTANT_P (X)', but a few machines are more restrictive in"}]}