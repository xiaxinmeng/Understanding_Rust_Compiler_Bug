{"sha": "25c65938c8794115531d09a37e17d3bc469f6269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVjNjU5MzhjODc5NDExNTUzMWQwOWEzN2UxN2QzYmM0NjlmNjI2OQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-08-25T20:22:47Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-08-25T20:22:47Z"}, "message": "Revert my change to commit with PR reference again.\n\nFrom-SVN: r227187", "tree": {"sha": "7c25723be55ff12a9a21251046c38733e1f1587b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c25723be55ff12a9a21251046c38733e1f1587b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25c65938c8794115531d09a37e17d3bc469f6269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c65938c8794115531d09a37e17d3bc469f6269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25c65938c8794115531d09a37e17d3bc469f6269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c65938c8794115531d09a37e17d3bc469f6269/comments", "author": null, "committer": null, "parents": [{"sha": "2f40eaca146906d75e95630f7bb3e5a27c3a5613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f40eaca146906d75e95630f7bb3e5a27c3a5613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f40eaca146906d75e95630f7bb3e5a27c3a5613"}], "stats": {"total": 428, "additions": 24, "deletions": 404}, "files": [{"sha": "f6f68a813016260f16edb3bc3eec1f38eb8f758b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=25c65938c8794115531d09a37e17d3bc469f6269", "patch": "@@ -1,58 +1,3 @@\n-2015-08-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n-\n-\t* include/debug/formatter.h (_Debug_msg_id::__msg_irreflexive_ordering):\n-\tNew enum entry.\n-\t* include/debug/functions.h (_Irreflexive_checker): New.\n-\t(__is_irreflexive, __is_irreflexive_pred): New.\n-\t* include/debug/macros.h\n-\t(__glibcxx_check_irreflexive, __glibcxx_check_irreflexive_pred): New\n-\tmacros.\n-\t(__glibcxx_check_irreflexive2, __glibcxx_check_irreflexive_pred2): New\n-\tmacros limited to post-C++11 mode.\n-\t* include/debug/debug.h\n-\t(__glibcxx_requires_irreflexive, __glibcxx_requires_irreflexive_pred):\n-\tNew macros, use latter.\n-\t(__glibcxx_requires_irreflexive2, __glibcxx_requires_irreflexive_pred2):\n-\tLikewise.\n-\t* include/bits/stl_algo.h\n-\t(partial_sort_copy): Add irreflexive debug check.\n-\t(partial_sort_copy): Likewise.\n-\t(lower_bound): Likewise.\n-\t(upper_bound): Likewise.\n-\t(equal_range): Likewise.\n-\t(binary_search): Likewise.\n-\t(inplace_merge): Likewise.\n-\t(includes): Likewise.\n-\t(next_permutation): Likewise.\n-\t(prev_permutation): Likewise.\n-\t(is_sorted_until): Likewise.\n-\t(minmax_element): Likewise.\n-\t(partial_sort): Likewise.\n-\t(nth_element): Likewise.\n-\t(sort): Likewise.\n-\t(merge): Likewise.\n-\t(stable_sort): Likewise.\n-\t(set_union): Likewise.\n-\t(set_intersection): Likewise.\n-\t(set_difference): Likewise.\n-\t(set_symmetric_difference): Likewise.\n-\t(min_element): Likewise.\n-\t(max_element): Likewise.\n-\t* include/bits/stl_algobase.h\n-\t(lower_bound): Likewise.\n-\t(lexicographical_compare): Likewise.\n-\t* include/bits/stl_heap.h\n-\t(push_heap): Likewise.\n-\t(pop_heap): Likewise.\n-\t(make_heap): Likewise.\n-\t(sort_heap): Likewise.\n-\t(is_heap_until): Likewise.\n-\t* testsuite/25_algorithms/lexicographical_compare/debug/\n-\tirreflexive_neg.cc: New.\n-\t* testsuite/25_algorithms/lower_bound/debug/irreflexive.cc: New.\n-\t* testsuite/25_algorithms/partial_sort_copy/debug/irreflexive_neg.cc:\n-\tNew.\n-\n 2015-08-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/65049"}, {"sha": "93e834abeb7889cbc3aa2b6255bacead6c24bfcc", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 56, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=25c65938c8794115531d09a37e17d3bc469f6269", "patch": "@@ -1750,7 +1750,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t                     _OutputValueType>)\n       __glibcxx_function_requires(_LessThanComparableConcept<_OutputValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n       __glibcxx_requires_valid_range(__result_first, __result_last);\n \n       return std::__partial_sort_copy(__first, __last,\n@@ -1804,7 +1803,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _OutputValueType, _OutputValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n       __glibcxx_requires_valid_range(__result_first, __result_last);\n \n       return std::__partial_sort_copy(__first, __last,\n@@ -2029,7 +2027,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t  _ValueType, _Tp>)\n       __glibcxx_requires_partitioned_lower_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       return std::__lower_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_val(__comp));\n@@ -2085,7 +2082,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n       __glibcxx_requires_partitioned_upper(__first, __last, __val);\n-      __glibcxx_requires_irreflexive2(__first, __last);\n \n       return std::__upper_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__val_less_iter());\n@@ -2120,7 +2116,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t  _Tp, _ValueType>)\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       return std::__upper_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__val_comp_iter(__comp));\n@@ -2194,8 +2189,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)\n       __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n       __glibcxx_requires_partitioned_lower(__first, __last, __val);\n-      __glibcxx_requires_partitioned_upper(__first, __last, __val);\n-      __glibcxx_requires_irreflexive2(__first, __last);\n+      __glibcxx_requires_partitioned_upper(__first, __last, __val);      \n \n       return std::__equal_range(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_less_val(),\n@@ -2237,7 +2231,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t__val, __comp);\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       return std::__equal_range(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_val(__comp),\n@@ -2269,7 +2262,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n       __glibcxx_requires_partitioned_lower(__first, __last, __val);\n       __glibcxx_requires_partitioned_upper(__first, __last, __val);\n-      __glibcxx_requires_irreflexive2(__first, __last);\n \n       _ForwardIterator __i\n \t= std::__lower_bound(__first, __last, __val,\n@@ -2308,7 +2300,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t__val, __comp);\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       _ForwardIterator __i\n \t= std::__lower_bound(__first, __last, __val,\n@@ -2603,7 +2594,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_sorted(__first, __middle);\n       __glibcxx_requires_sorted(__middle, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       std::__inplace_merge(__first, __middle, __last,\n \t\t\t   __gnu_cxx::__ops::__iter_less_iter());\n@@ -2646,7 +2636,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_sorted_pred(__first, __middle, __comp);\n       __glibcxx_requires_sorted_pred(__middle, __last, __comp);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       std::__inplace_merge(__first, __middle, __last,\n \t\t\t   __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -2858,8 +2847,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n-      __glibcxx_requires_irreflexive2(__first1, __last1);\n-      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return std::__includes(__first1, __last1, __first2, __last2,\n \t\t\t     __gnu_cxx::__ops::__iter_less_iter());\n@@ -2904,8 +2891,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return std::__includes(__first1, __last1, __first2, __last2,\n \t\t\t     __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -2981,7 +2966,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       return std::__next_permutation\n \t(__first, __last, __gnu_cxx::__ops::__iter_less_iter());\n@@ -3014,7 +2998,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_BidirectionalIterator>::value_type,\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return std::__next_permutation\n \t(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -3081,7 +3064,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       return std::__prev_permutation(__first, __last,\n \t\t\t\t     __gnu_cxx::__ops::__iter_less_iter());\n@@ -3114,7 +3096,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_BidirectionalIterator>::value_type,\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return std::__prev_permutation(__first, __last,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -3277,7 +3258,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       return std::__is_sorted_until(__first, __last,\n \t\t\t\t    __gnu_cxx::__ops::__iter_less_iter());\n@@ -3303,7 +3283,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return std::__is_sorted_until(__first, __last,\n \t\t\t\t    __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -3428,7 +3407,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       return std::__minmax_element(__first, __last,\n \t\t\t\t   __gnu_cxx::__ops::__iter_less_iter());\n@@ -3458,7 +3436,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return std::__minmax_element(__first, __last,\n \t\t\t\t   __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -4579,7 +4556,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __middle);\n       __glibcxx_requires_valid_range(__middle, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       std::__partial_sort(__first, __middle, __last,\n \t\t\t  __gnu_cxx::__ops::__iter_less_iter());\n@@ -4619,7 +4595,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __middle);\n       __glibcxx_requires_valid_range(__middle, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       std::__partial_sort(__first, __middle, __last,\n \t\t\t  __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -4652,7 +4627,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __nth);\n       __glibcxx_requires_valid_range(__nth, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       if (__first == __last || __nth == __last)\n \treturn;\n@@ -4692,7 +4666,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __nth);\n       __glibcxx_requires_valid_range(__nth, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       if (__first == __last || __nth == __last)\n \treturn;\n@@ -4726,7 +4699,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());\n     }\n@@ -4758,7 +4730,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type,\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));\n     }\n@@ -4826,8 +4797,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\t\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n-      __glibcxx_requires_irreflexive2(__first1, __last1);\n-      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return _GLIBCXX_STD_A::__merge(__first1, __last1,\n \t\t\t\t     __first2, __last2, __result,\n@@ -4876,8 +4845,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return _GLIBCXX_STD_A::__merge(__first1, __last1,\n \t\t\t\t__first2, __last2, __result,\n@@ -4931,7 +4898,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       _GLIBCXX_STD_A::__stable_sort(__first, __last,\n \t\t\t\t    __gnu_cxx::__ops::__iter_less_iter());\n@@ -4967,7 +4933,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type,\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       _GLIBCXX_STD_A::__stable_sort(__first, __last,\n \t\t\t\t    __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -5045,8 +5010,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n-      __glibcxx_requires_irreflexive2(__first1, __last1);\n-      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return _GLIBCXX_STD_A::__set_union(__first1, __last1,\n \t\t\t\t__first2, __last2, __result,\n@@ -5094,8 +5057,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return _GLIBCXX_STD_A::__set_union(__first1, __last1,\n \t\t\t\t__first2, __last2, __result,\n@@ -5162,8 +5123,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n-      __glibcxx_requires_irreflexive2(__first1, __last1);\n-      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return _GLIBCXX_STD_A::__set_intersection(__first1, __last1,\n \t\t\t\t     __first2, __last2, __result,\n@@ -5210,8 +5169,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return _GLIBCXX_STD_A::__set_intersection(__first1, __last1,\n \t\t\t\t__first2, __last2, __result,\n@@ -5282,8 +5239,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\t\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n-      __glibcxx_requires_irreflexive2(__first1, __last1);\n-      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return _GLIBCXX_STD_A::__set_difference(__first1, __last1,\n \t\t\t\t   __first2, __last2, __result,\n@@ -5332,8 +5287,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return _GLIBCXX_STD_A::__set_difference(__first1, __last1,\n \t\t\t\t   __first2, __last2, __result,\n@@ -5412,8 +5365,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\t\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n-      __glibcxx_requires_irreflexive2(__first1, __last1);\n-      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return _GLIBCXX_STD_A::__set_symmetric_difference(__first1, __last1,\n \t\t\t\t\t__first2, __last2, __result,\n@@ -5463,8 +5414,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return _GLIBCXX_STD_A::__set_symmetric_difference(__first1, __last1,\n \t\t\t\t__first2, __last2, __result,\n@@ -5503,7 +5452,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       return _GLIBCXX_STD_A::__min_element(__first, __last,\n \t\t\t\t__gnu_cxx::__ops::__iter_less_iter());\n@@ -5530,7 +5478,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return _GLIBCXX_STD_A::__min_element(__first, __last,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -5567,7 +5514,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       return _GLIBCXX_STD_A::__max_element(__first, __last,\n \t\t\t\t__gnu_cxx::__ops::__iter_less_iter());\n@@ -5594,7 +5540,6 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return _GLIBCXX_STD_A::__max_element(__first, __last,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_iter(__comp));"}, {"sha": "75a15167e937fb25cc234b6c60bd43365992e7cd", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=25c65938c8794115531d09a37e17d3bc469f6269", "patch": "@@ -985,7 +985,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanOpConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n       __glibcxx_requires_partitioned_lower(__first, __last, __val);\n-      __glibcxx_requires_irreflexive2(__first, __last);\n \n       return std::__lower_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_less_val());\n@@ -1210,9 +1209,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n-      __glibcxx_requires_irreflexive2(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n-      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return std::__lexicographical_compare_aux(std::__niter_base(__first1),\n \t\t\t\t\t\tstd::__niter_base(__last1),\n@@ -1242,9 +1239,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_InputIteratorConcept<_II1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_II2>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n-      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n       __glibcxx_requires_valid_range(__first2, __last2);\n-      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return std::__lexicographical_compare_impl\n \t(__first1, __last1, __first2, __last2,"}, {"sha": "3ab37c757538ba2808125bd8967c77240e7febb5", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=25c65938c8794115531d09a37e17d3bc469f6269", "patch": "@@ -159,7 +159,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _RandomAccessIterator>)\n       __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n       __glibcxx_requires_heap(__first, __last - 1);\n \n       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));\n@@ -194,7 +193,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n       __glibcxx_requires_heap_pred(__first, __last - 1, __comp);\n \n       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));\n@@ -273,7 +271,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n       __glibcxx_requires_non_empty_range(__first, __last);\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n       __glibcxx_requires_heap(__first, __last);\n \n       if (__last - __first > 1)\n@@ -304,7 +301,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n       __glibcxx_requires_non_empty_range(__first, __last);\n       __glibcxx_requires_heap_pred(__first, __last, __comp);\n \n@@ -360,7 +356,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       std::__make_heap(__first, __last,\n \t\t       __gnu_cxx::__ops::__iter_less_iter());\n@@ -385,7 +380,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       std::__make_heap(__first, __last,\n \t\t       __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -421,7 +415,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n       __glibcxx_requires_heap(__first, __last);\n \n       std::__sort_heap(__first, __last,\n@@ -447,7 +440,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n       __glibcxx_requires_heap_pred(__first, __last, __comp);\n \n       std::__sort_heap(__first, __last,\n@@ -475,7 +467,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive(__first, __last);\n \n       return __first + \n \tstd::__is_heap_until(__first, std::distance(__first, __last),\n@@ -502,7 +493,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return __first\n \t+ std::__is_heap_until(__first, std::distance(__first, __last),"}, {"sha": "b6623e62eccf89ee50d3b272857e759a235f048d", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=25c65938c8794115531d09a37e17d3bc469f6269", "patch": "@@ -77,53 +77,41 @@ namespace __gnu_debug\n # define __glibcxx_requires_string(_String)\n # define __glibcxx_requires_string_len(_String,_Len)\n # define __glibcxx_requires_subscript(_N)\n-# define __glibcxx_requires_irreflexive(_First,_Last)\n-# define __glibcxx_requires_irreflexive2(_First,_Last)\n-# define __glibcxx_requires_irreflexive_pred(_First,_Last,_Pred)\n-# define __glibcxx_requires_irreflexive_pred2(_First,_Last,_Pred)\n \n #else\n \n # include <debug/macros.h>\n \n # define __glibcxx_requires_cond(_Cond,_Msg) _GLIBCXX_DEBUG_VERIFY(_Cond,_Msg)\n-# define __glibcxx_requires_valid_range(_First,_Last)\t\\\n-  __glibcxx_check_valid_range(_First,_Last)\n-# define __glibcxx_requires_non_empty_range(_First,_Last)\t\\\n-  __glibcxx_check_non_empty_range(_First,_Last)\n-# define __glibcxx_requires_sorted(_First,_Last)\t\\\n-  __glibcxx_check_sorted(_First,_Last)\n-# define __glibcxx_requires_sorted_pred(_First,_Last,_Pred)\t\\\n-  __glibcxx_check_sorted_pred(_First,_Last,_Pred)\n-# define __glibcxx_requires_sorted_set(_First1,_Last1,_First2)\t\\\n-  __glibcxx_check_sorted_set(_First1,_Last1,_First2)\n+# define __glibcxx_requires_valid_range(_First,_Last) \\\n+     __glibcxx_check_valid_range(_First,_Last)\n+# define __glibcxx_requires_non_empty_range(_First,_Last) \\\n+     __glibcxx_check_non_empty_range(_First,_Last)\n+# define __glibcxx_requires_sorted(_First,_Last) \\\n+     __glibcxx_check_sorted(_First,_Last)\n+# define __glibcxx_requires_sorted_pred(_First,_Last,_Pred) \\\n+     __glibcxx_check_sorted_pred(_First,_Last,_Pred)\n+# define __glibcxx_requires_sorted_set(_First1,_Last1,_First2) \\\n+     __glibcxx_check_sorted_set(_First1,_Last1,_First2)\n # define __glibcxx_requires_sorted_set_pred(_First1,_Last1,_First2,_Pred) \\\n-  __glibcxx_check_sorted_set_pred(_First1,_Last1,_First2,_Pred)\n+     __glibcxx_check_sorted_set_pred(_First1,_Last1,_First2,_Pred)\n # define __glibcxx_requires_partitioned_lower(_First,_Last,_Value)\t\\\n-  __glibcxx_check_partitioned_lower(_First,_Last,_Value)\n+     __glibcxx_check_partitioned_lower(_First,_Last,_Value)\n # define __glibcxx_requires_partitioned_upper(_First,_Last,_Value)\t\\\n-  __glibcxx_check_partitioned_upper(_First,_Last,_Value)\n+     __glibcxx_check_partitioned_upper(_First,_Last,_Value)\n # define __glibcxx_requires_partitioned_lower_pred(_First,_Last,_Value,_Pred) \\\n-  __glibcxx_check_partitioned_lower_pred(_First,_Last,_Value,_Pred)\n+     __glibcxx_check_partitioned_lower_pred(_First,_Last,_Value,_Pred)\n # define __glibcxx_requires_partitioned_upper_pred(_First,_Last,_Value,_Pred) \\\n-  __glibcxx_check_partitioned_upper_pred(_First,_Last,_Value,_Pred)\n-# define __glibcxx_requires_heap(_First,_Last)\t\\\n-  __glibcxx_check_heap(_First,_Last)\n-# define __glibcxx_requires_heap_pred(_First,_Last,_Pred)\t\\\n-  __glibcxx_check_heap_pred(_First,_Last,_Pred)\n+     __glibcxx_check_partitioned_upper_pred(_First,_Last,_Value,_Pred)\n+# define __glibcxx_requires_heap(_First,_Last) \\\n+     __glibcxx_check_heap(_First,_Last)\n+# define __glibcxx_requires_heap_pred(_First,_Last,_Pred) \\\n+     __glibcxx_check_heap_pred(_First,_Last,_Pred)\n # define __glibcxx_requires_nonempty() __glibcxx_check_nonempty()\n # define __glibcxx_requires_string(_String) __glibcxx_check_string(_String)\n # define __glibcxx_requires_string_len(_String,_Len)\t\\\n-  __glibcxx_check_string_len(_String,_Len)\n+     __glibcxx_check_string_len(_String,_Len)\n # define __glibcxx_requires_subscript(_N) __glibcxx_check_subscript(_N)\n-# define __glibcxx_requires_irreflexive(_First,_Last)\t\\\n-  __glibcxx_check_irreflexive(_First,_Last)\n-# define __glibcxx_requires_irreflexive2(_First,_Last)\t\\\n-  __glibcxx_check_irreflexive2(_First,_Last)\n-# define __glibcxx_requires_irreflexive_pred(_First,_Last,_Pred)\t\\\n-  __glibcxx_check_irreflexive_pred(_First,_Last,_Pred)\n-# define __glibcxx_requires_irreflexive_pred2(_First,_Last,_Pred)\t\\\n-  __glibcxx_check_irreflexive_pred2(_First,_Last,_Pred)\n \n # include <debug/functions.h>\n "}, {"sha": "56ee8078681f6d8b72be9056f444a01be0213c4a", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=25c65938c8794115531d09a37e17d3bc469f6269", "patch": "@@ -126,8 +126,7 @@ namespace __gnu_debug\n     __msg_valid_load_factor,\n     // others\n     __msg_equal_allocs,\n-    __msg_insert_range_from_self,\n-    __msg_irreflexive_ordering\n+    __msg_insert_range_from_self\n   };\n \n   class _Error_formatter"}, {"sha": "a9f234b0723513e801d1eb58c3feeed92492acb7", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=25c65938c8794115531d09a37e17d3bc469f6269", "patch": "@@ -445,49 +445,6 @@ namespace __gnu_debug\n       return __first == __last;\n     }\n \n-#if __cplusplus >= 201103L\n-  struct _Irreflexive_checker\n-  {\n-    template<typename _It>\n-      static typename std::iterator_traits<_It>::reference\n-      __deref();\n-\n-    template<typename _It,\n-\t     typename = decltype(__deref<_It>() < __deref<_It>())>\n-      static bool\n-      _S_is_valid(_It __it)\n-      { return !(*__it < *__it); }\n-\n-    // Fallback method if operator doesn't exist.\n-    template<typename... _Args>\n-      static bool\n-      _S_is_valid(_Args...)\n-      { return true; }\n-\n-    template<typename _It, typename _Pred, typename\n-\t= decltype(std::declval<_Pred>()(__deref<_It>(), __deref<_It>()))>\n-      static bool\n-      _S_is_valid_pred(_It __it, _Pred __pred)\n-      { return !__pred(*__it, *__it); }\n-\n-    // Fallback method if predicate can't be invoked.\n-    template<typename... _Args>\n-      static bool\n-      _S_is_valid_pred(_Args...)\n-      { return true; }\n-  };\n-\n-  template<typename _Iterator>\n-    inline bool\n-    __is_irreflexive(_Iterator __it)\n-    { return _Irreflexive_checker::_S_is_valid(__it); }\n-\n-  template<typename _Iterator, typename _Pred>\n-    inline bool\n-    __is_irreflexive_pred(_Iterator __it, _Pred __pred)\n-    { return _Irreflexive_checker::_S_is_valid_pred(__it, __pred); }\n-#endif\n-\n } // namespace __gnu_debug\n \n #endif"}, {"sha": "a4c2649c843f95b00695ea79e6e897871ef6a88e", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=25c65938c8794115531d09a37e17d3bc469f6269", "patch": "@@ -362,37 +362,4 @@ _GLIBCXX_DEBUG_VERIFY(_This.get_allocator() == _Other.get_allocator(),\t\\\n #define __glibcxx_check_string_len(_String,_Len) \\\n   _GLIBCXX_DEBUG_PEDASSERT(_String != 0 || _Len == 0)\n \n-// Verify that a predicate is irreflexive\n-#define __glibcxx_check_irreflexive(_First,_Last)\t\t\t\\\n-  _GLIBCXX_DEBUG_VERIFY(_First == _Last || !(*_First < *_First),\t\\\n-\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n-\t\t\t._M_iterator_value_type(_First, \"< operator type\"))\n-\n-#if __cplusplus >= 201103L\n-# define __glibcxx_check_irreflexive2(_First,_Last)\t\t\t\\\n-  _GLIBCXX_DEBUG_VERIFY(_First == _Last\t\t\t\t\t\\\n-\t\t\t|| __gnu_debug::__is_irreflexive(_First),\t\\\n-\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n-\t\t\t._M_iterator_value_type(_First, \"< operator type\"))\n-#else\n-# define __glibcxx_check_irreflexive2(_First,_Last)\n-#endif\n-\n-#define __glibcxx_check_irreflexive_pred(_First,_Last,_Pred)\t\t\\\n-  _GLIBCXX_DEBUG_VERIFY(_First == _Last\t|| !_Pred(*_First, *_First),\t\t\\\n-\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n-\t\t\t._M_instance(_Pred, \"functor\")\t\t\t\\\n-\t\t\t._M_iterator_value_type(_First, \"ordered type\"))\n-\n-#if __cplusplus >= 201103L\n-# define __glibcxx_check_irreflexive_pred2(_First,_Last,_Pred)\t\t\\\n-  _GLIBCXX_DEBUG_VERIFY(_First == _Last\t\t\t\t\t\\\n-\t\t\t||__gnu_debug::__is_irreflexive_pred(_First, _Pred), \\\n-\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n-\t\t\t._M_instance(_Pred, \"functor\")\t\t\t\\\n-\t\t\t._M_iterator_value_type(_First, \"ordered type\"))\n-#else\n-# define __glibcxx_check_irreflexive_pred2(_First,_Last,_Pred)\n-#endif\n-\n #endif"}, {"sha": "f60e31f845b1d6e72533ca2e46ecb67b12250a80", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25c65938c8794115531d09a37e17d3bc469f6269/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=25c65938c8794115531d09a37e17d3bc469f6269", "patch": "@@ -185,8 +185,7 @@ namespace __gnu_debug\n     \"load factor shall be positive\",\n     \"allocators must be equal\",\n     \"attempt to insert with an iterator range [%1.name;, %2.name;) from this\"\n-    \" container\",\n-    \"comparison doesn't meet irreflexive requirements, assert(!(a < a))\"\n+    \" container\"\n   };\n \n   void\n@@ -593,13 +592,11 @@ namespace\n       {\n \tconst int __bufsize = 64;\n \tchar __buf[__bufsize];\n-\t__formatter->_M_format_word(__buf, __bufsize, \"\\\"%s\\\"\",\n+\t__formatter->_M_format_word(__buf, __bufsize, \"\\\"%s\\\" \",\n \t\t\t\t    __variant._M_name);\n \t__formatter->_M_print_word(__buf);\n       }\n \n-    __formatter->_M_print_word(\" {\\n\");\n-\n     if (__variant._M_type)\n       {\n \t__formatter->_M_print_word(\"  type = \");\n@@ -771,7 +768,6 @@ namespace __gnu_debug\n \t\t\t\t\t_M_variant._M_iterator._M_sequence);\n \t    __formatter->_M_print_word(__buf);\n \t  }\n-\n \t__formatter->_M_print_word(\"}\\n\");\n \tbreak;\n       case __sequence:\n@@ -790,12 +786,10 @@ namespace __gnu_debug\n \tif (_M_variant._M_instance._M_type)\n \t  __formatter->_M_print_word(\";\\n\");\n \n-\t__formatter->_M_print_word(\"}\\n\");\n \tbreak;\n       case __iterator_value_type:\n \t__formatter->_M_print_word(\"iterator::value_type \");\n \tprint_description(__formatter, _M_variant._M_iterator_value_type);\n-\t__formatter->_M_print_word(\"}\\n\");\n \tbreak;\n       default:\n \tbreak;"}, {"sha": "07ee8bef6deed1844289c398c8c46f8cd679488c", "filename": "libstdc++-v3/testsuite/25_algorithms/lexicographical_compare/debug/irreflexive_neg.cc", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f40eaca146906d75e95630f7bb3e5a27c3a5613/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fdebug%2Firreflexive_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f40eaca146906d75e95630f7bb3e5a27c3a5613/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fdebug%2Firreflexive_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fdebug%2Firreflexive_neg.cc?ref=2f40eaca146906d75e95630f7bb3e5a27c3a5613", "patch": "@@ -1,70 +0,0 @@\n-// Copyright (C) 2015 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-//\n-// { dg-options \"-std=gnu++11\" }\n-// { dg-require-debug-mode \"\" }\n-// { dg-do run { xfail *-*-* } }\n-\n-#include <algorithm>\n-#include <testsuite_hooks.h>\n-\n-struct A\n-{\n-  A(int i) : _i(i)\n-  { }\n-\n-  int _i;\n-};\n-\n-bool\n-operator<(A a, int i)\n-{ return a._i < i; }\n-\n-bool\n-operator<(int i, A a)\n-{ return i < a._i; }\n-\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  A as[] { 0, 1, 2, 3 };\n-  int is[] { 0, 1, 2, 3 };\n-  VERIFY( !std::lexicographical_compare(as, as + 4, is, is + 4) );\n-}\n-\n-bool\n-bad_lower(int lhs, int rhs)\n-{\n-  if (lhs == 0)\n-    return true;\n-\n-  return lhs < rhs;\n-}\n-\n-void test02()\n-{\n-  int is[] { 0, 1, 2, 3 };\n-  std::lexicographical_compare(is, is + 4, is, is + 4, bad_lower);\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  return 0;\n-}"}, {"sha": "c87b3e17dbd9feb289e0ad855302012b724496ca", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/debug/irreflexive.cc", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f40eaca146906d75e95630f7bb3e5a27c3a5613/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Firreflexive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f40eaca146906d75e95630f7bb3e5a27c3a5613/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Firreflexive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Firreflexive.cc?ref=2f40eaca146906d75e95630f7bb3e5a27c3a5613", "patch": "@@ -1,47 +0,0 @@\n-// Copyright (C) 2015 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-//\n-// { dg-require-debug-mode \"\" }\n-// { dg-do compile }\n-\n-#include <algorithm>\n-\n-struct A\n-{\n-  A(int i) : _i(i)\n-  { }\n-\n-  int _i;\n-};\n-\n-// Only knowns how to compare an A with an int.\n-struct A_int_comparer\n-{\n-  bool\n-  operator()(A a, int i) const\n-  { return a._i < i; }\n-\n-  bool\n-  operator()(int i, A a) const\n-  { return i < a._i; }\n-};\n-\n-void test01()\n-{\n-  A as[] { 0, 1, 2, 3 };\n-  std::lower_bound(as, as + 4, 1, A_int_comparer());\n-}"}, {"sha": "0218a269e19ea827259100a1d4f7eed18611b692", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort_copy/debug/irreflexive_neg.cc", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f40eaca146906d75e95630f7bb3e5a27c3a5613/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fdebug%2Firreflexive_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f40eaca146906d75e95630f7bb3e5a27c3a5613/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fdebug%2Firreflexive_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fdebug%2Firreflexive_neg.cc?ref=2f40eaca146906d75e95630f7bb3e5a27c3a5613", "patch": "@@ -1,43 +0,0 @@\n-// Copyright (C) 2015 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-//\n-// { dg-require-debug-mode \"\" }\n-// { dg-do run { xfail *-*-* } }\n-\n-#include <algorithm>\n-\n-bool\n-bad_lower(int lhs, int rhs)\n-{\n-  if (lhs == 0)\n-    return true;\n-\n-  return lhs < rhs;\n-}\n-\n-void test01()\n-{\n-  int ins[] { 0, 1, 2, 3 };\n-  int outs[] { 9, 9 };\n-  std::partial_sort_copy(ins, ins + 4, outs, outs + 2, bad_lower);\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}]}