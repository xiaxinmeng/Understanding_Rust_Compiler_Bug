{"sha": "b528fc5cd9d2c9fa13b69e144f630b1ef1bc6862", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyOGZjNWNkOWQyYzlmYTEzYjY5ZTE0NGY2MzBiMWVmMWJjNjg2Mg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2014-06-06T23:15:36Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2014-06-06T23:15:36Z"}, "message": "re PR target/61431 (Powerpc tests pack01.c and p8vector-int128-2.c fail on little endian power8 systems)\n\n2014-06-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/61431\n\t* config/rs6000/vsx.md (VSX_LE): Split VSX_D into 2 separate\n\titerators, VSX_D that handles 64-bit types, and VSX_LE that\n\thandles swapping the two 64-bit double words on little endian\n\tsystems.  Include V1TImode and optionally TImode in VSX_LE so that\n\tthese types are properly swapped.  Change all of the insns and\n\tsplits that do the 64-bit swaps to use VSX_LE.\n\t(vsx_le_perm_load_<mode>): Likewise.\n\t(vsx_le_perm_store_<mode>): Likewise.\n\t(splitters for little endian memory operations): Likewise.\n\t(vsx_xxpermdi2_le_<mode>): Likewise.\n\t(vsx_lxvd2x2_le_<mode>): Likewise.\n\t(vsx_stxvd2x2_le_<mode>): Likewise.\n\nFrom-SVN: r211329", "tree": {"sha": "0482bbe909fbf29d0c45635383b6d6a5752a8203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0482bbe909fbf29d0c45635383b6d6a5752a8203"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b528fc5cd9d2c9fa13b69e144f630b1ef1bc6862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b528fc5cd9d2c9fa13b69e144f630b1ef1bc6862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b528fc5cd9d2c9fa13b69e144f630b1ef1bc6862", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b528fc5cd9d2c9fa13b69e144f630b1ef1bc6862/comments", "author": null, "committer": null, "parents": [{"sha": "6736ef96eab222e58e6294f42be981a5afb59811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6736ef96eab222e58e6294f42be981a5afb59811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6736ef96eab222e58e6294f42be981a5afb59811"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "1966add9a533fa114a2927af2e0df87123ef4474", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b528fc5cd9d2c9fa13b69e144f630b1ef1bc6862/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b528fc5cd9d2c9fa13b69e144f630b1ef1bc6862/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b528fc5cd9d2c9fa13b69e144f630b1ef1bc6862", "patch": "@@ -1,3 +1,19 @@\n+2014-06-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/61431\n+\t* config/rs6000/vsx.md (VSX_LE): Split VSX_D into 2 separate\n+\titerators, VSX_D that handles 64-bit types, and VSX_LE that\n+\thandles swapping the two 64-bit double words on little endian\n+\tsystems.  Include V1TImode and optionally TImode in VSX_LE so that\n+\tthese types are properly swapped.  Change all of the insns and\n+\tsplits that do the 64-bit swaps to use VSX_LE.\n+\t(vsx_le_perm_load_<mode>): Likewise.\n+\t(vsx_le_perm_store_<mode>): Likewise.\n+\t(splitters for little endian memory operations): Likewise.\n+\t(vsx_xxpermdi2_le_<mode>): Likewise.\n+\t(vsx_lxvd2x2_le_<mode>): Likewise.\n+\t(vsx_stxvd2x2_le_<mode>): Likewise.\n+\n 2014-06-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/61423"}, {"sha": "5083466c81cbe6e18dbba3306273922a377245aa", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b528fc5cd9d2c9fa13b69e144f630b1ef1bc6862/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b528fc5cd9d2c9fa13b69e144f630b1ef1bc6862/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=b528fc5cd9d2c9fa13b69e144f630b1ef1bc6862", "patch": "@@ -24,6 +24,13 @@\n ;; Iterator for the 2 64-bit vector types\n (define_mode_iterator VSX_D [V2DF V2DI])\n \n+;; Iterator for the 2 64-bit vector types + 128-bit types that are loaded with\n+;; lxvd2x to properly handle swapping words on little endian\n+(define_mode_iterator VSX_LE [V2DF\n+\t\t\t      V2DI\n+\t\t\t      V1TI\n+\t\t\t      (TI\t\"VECTOR_MEM_VSX_P (TImode)\")])\n+\n ;; Iterator for the 2 32-bit vector types\n (define_mode_iterator VSX_W [V4SF V4SI])\n \n@@ -228,8 +235,8 @@\n ;; The patterns for LE permuted loads and stores come before the general\n ;; VSX moves so they match first.\n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wa\")\n-        (match_operand:VSX_D 1 \"memory_operand\" \"Z\"))]\n+  [(set (match_operand:VSX_LE 0 \"vsx_register_operand\" \"=wa\")\n+        (match_operand:VSX_LE 1 \"memory_operand\" \"Z\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n   \"#\"\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n@@ -342,16 +349,16 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*vsx_le_perm_store_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"memory_operand\" \"=Z\")\n-        (match_operand:VSX_D 1 \"vsx_register_operand\" \"+wa\"))]\n+  [(set (match_operand:VSX_LE 0 \"memory_operand\" \"=Z\")\n+        (match_operand:VSX_LE 1 \"vsx_register_operand\" \"+wa\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n    (set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:VSX_D 0 \"memory_operand\" \"\")\n-        (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:VSX_LE 0 \"memory_operand\" \"\")\n+        (match_operand:VSX_LE 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !reload_completed\"\n   [(set (match_dup 2)\n         (vec_select:<MODE>\n@@ -369,8 +376,8 @@\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split\n-  [(set (match_operand:VSX_D 0 \"memory_operand\" \"\")\n-        (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:VSX_LE 0 \"memory_operand\" \"\")\n+        (match_operand:VSX_LE 1 \"vsx_register_operand\" \"\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && reload_completed\"\n   [(set (match_dup 1)\n         (vec_select:<MODE>\n@@ -1353,9 +1360,9 @@\n ;; xxpermdi for little endian loads and stores.  We need several of\n ;; these since the form of the PARALLEL differs by mode.\n (define_insn \"*vsx_xxpermdi2_le_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wa\")\n-        (vec_select:VSX_D\n-          (match_operand:VSX_D 1 \"vsx_register_operand\" \"wa\")\n+  [(set (match_operand:VSX_LE 0 \"vsx_register_operand\" \"=wa\")\n+        (vec_select:VSX_LE\n+          (match_operand:VSX_LE 1 \"vsx_register_operand\" \"wa\")\n           (parallel [(const_int 1) (const_int 0)])))]\n   \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"xxpermdi %x0,%x1,%x1,2\"\n@@ -1402,9 +1409,9 @@\n ;; lxvd2x for little endian loads.  We need several of\n ;; these since the form of the PARALLEL differs by mode.\n (define_insn \"*vsx_lxvd2x2_le_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wa\")\n-        (vec_select:VSX_D\n-          (match_operand:VSX_D 1 \"memory_operand\" \"Z\")\n+  [(set (match_operand:VSX_LE 0 \"vsx_register_operand\" \"=wa\")\n+        (vec_select:VSX_LE\n+          (match_operand:VSX_LE 1 \"memory_operand\" \"Z\")\n           (parallel [(const_int 1) (const_int 0)])))]\n   \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"lxvd2x %x0,%y1\"\n@@ -1451,9 +1458,9 @@\n ;; stxvd2x for little endian stores.  We need several of\n ;; these since the form of the PARALLEL differs by mode.\n (define_insn \"*vsx_stxvd2x2_le_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"memory_operand\" \"=Z\")\n-        (vec_select:VSX_D\n-          (match_operand:VSX_D 1 \"vsx_register_operand\" \"wa\")\n+  [(set (match_operand:VSX_LE 0 \"memory_operand\" \"=Z\")\n+        (vec_select:VSX_LE\n+          (match_operand:VSX_LE 1 \"vsx_register_operand\" \"wa\")\n           (parallel [(const_int 1) (const_int 0)])))]\n   \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"stxvd2x %x1,%y0\""}]}