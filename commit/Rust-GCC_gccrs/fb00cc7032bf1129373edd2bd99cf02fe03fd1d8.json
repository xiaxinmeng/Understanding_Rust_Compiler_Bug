{"sha": "fb00cc7032bf1129373edd2bd99cf02fe03fd1d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIwMGNjNzAzMmJmMTEyOTM3M2VkZDJiZDk5Y2YwMmZlMDNmZDFkOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2020-09-21T13:37:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-27T09:19:32Z"}, "message": "[Ada] Multidimensional arrays with Iterated_Component_Associations\n\ngcc/ada/\n\n\t* sem_aggr.adb (Resolve_Iterated_Component_Association): new\n\tinternal subprogram Remove_References, to reset semantic\n\tinformation on each reference to the index variable of the\n\tassociation, so that Collect_Aggregate_Bounds can work properly\n\ton multidimensional arrays with nested associations, and\n\tsubsequent expansion into loops can verify that dimensions of\n\teach subaggregate are compatible.", "tree": {"sha": "b14744056790d078177ea830adcac62596d1b206", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b14744056790d078177ea830adcac62596d1b206"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb00cc7032bf1129373edd2bd99cf02fe03fd1d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb00cc7032bf1129373edd2bd99cf02fe03fd1d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb00cc7032bf1129373edd2bd99cf02fe03fd1d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb00cc7032bf1129373edd2bd99cf02fe03fd1d8/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3ad829bd17861251de97b58bb487978b14a0652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ad829bd17861251de97b58bb487978b14a0652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3ad829bd17861251de97b58bb487978b14a0652"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "90ddee27afda86255c5e78970e9db39ae1172cd5", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb00cc7032bf1129373edd2bd99cf02fe03fd1d8/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb00cc7032bf1129373edd2bd99cf02fe03fd1d8/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=fb00cc7032bf1129373edd2bd99cf02fe03fd1d8", "patch": "@@ -452,7 +452,7 @@ package body Sem_Aggr is\n          This_Range : constant Node_Id := Aggregate_Bounds (N);\n          --  The aggregate range node of this specific sub-aggregate\n \n-         This_Low  : constant Node_Id := Low_Bound (Aggregate_Bounds (N));\n+         This_Low  : constant Node_Id := Low_Bound  (Aggregate_Bounds (N));\n          This_High : constant Node_Id := High_Bound (Aggregate_Bounds (N));\n          --  The aggregate bounds of this specific sub-aggregate\n \n@@ -785,7 +785,7 @@ package body Sem_Aggr is\n    -----------------------\n \n    procedure Resolve_Aggregate (N : Node_Id; Typ : Entity_Id) is\n-      Loc   : constant Source_Ptr := Sloc (N);\n+      Loc : constant Source_Ptr := Sloc (N);\n \n       Aggr_Subtyp : Entity_Id;\n       --  The actual aggregate subtype. This is not necessarily the same as Typ\n@@ -816,6 +816,8 @@ package body Sem_Aggr is\n          return False;\n       end Within_Aggregate;\n \n+   --  Start of processing for Resolve_Aggregate\n+\n    begin\n       --  Ignore junk empty aggregate resulting from parser error\n \n@@ -1588,12 +1590,39 @@ package body Sem_Aggr is\n          Index_Typ : Entity_Id)\n       is\n          Loc : constant Source_Ptr := Sloc (N);\n+         Id  : constant Entity_Id  := Defining_Identifier (N);\n+\n+         -----------------------\n+         -- Remove_References --\n+         -----------------------\n+\n+         function Remove_Ref (N : Node_Id) return Traverse_Result;\n+         --  Remove references to the entity Id after analysis, so it can be\n+         --  properly reanalyzed after construct is expanded into a loop.\n+\n+         function Remove_Ref (N : Node_Id) return Traverse_Result is\n+         begin\n+            if Nkind (N) = N_Identifier\n+               and then Present (Entity (N))\n+               and then Entity (N) = Id\n+            then\n+               Set_Entity (N, Empty);\n+               Set_Etype (N, Empty);\n+            end if;\n+            Set_Analyzed (N, False);\n+            return OK;\n+         end Remove_Ref;\n+\n+         procedure Remove_References is new Traverse_Proc (Remove_Ref);\n+\n+         --  Local variables\n \n          Choice : Node_Id;\n          Dummy  : Boolean;\n          Ent    : Entity_Id;\n          Expr   : Node_Id;\n-         Id     : Entity_Id;\n+\n+      --  Start of processing for Resolve_Iterated_Component_Association\n \n       begin\n          --  An element iterator specification cannot appear in\n@@ -1646,26 +1675,28 @@ package body Sem_Aggr is\n          --  The expression has to be analyzed once the index variable is\n          --  directly visible.\n \n-         Id := Defining_Identifier (N);\n          Enter_Name (Id);\n          Set_Etype (Id, Index_Typ);\n          Set_Ekind (Id, E_Variable);\n          Set_Scope (Id, Ent);\n \n-         --  Analyze a copy of the expression, to verify legality. We use\n-         --  a copy because the expression will be analyzed anew when the\n-         --  enclosing aggregate is expanded, and the construct is rewritten\n-         --  as a loop with a new index variable.\n+         --  Analyze the expression without expansion, to verify legality.\n+         --  After analysis we remove references to the index variable because\n+         --  the expression will be analyzed anew when the enclosing aggregate\n+         --  is expanded, and the construct is rewritten as a loop with a new\n+         --  index variable.\n \n-         Expr := New_Copy_Tree (Expression (N));\n-         Set_Parent (Expr, N);\n-         Dummy := Resolve_Aggr_Expr (Expr, False);\n+         Expr := Expression (N);\n+\n+         Expander_Mode_Save_And_Set (False);\n+         Dummy := Resolve_Aggr_Expr (Expr, Single_Elmt => False);\n+         Expander_Mode_Restore;\n+         Remove_References (Expr);\n \n          --  An iterated_component_association may appear in a nested\n          --  aggregate for a multidimensional structure: preserve the bounds\n          --  computed for the expression, as well as the anonymous array\n          --  type generated for it; both are needed during array expansion.\n-         --  This does not work for more than two levels of nesting. ???\n \n          if Nkind (Expr) = N_Aggregate then\n             Set_Aggregate_Bounds (Expression (N), Aggregate_Bounds (Expr));\n@@ -2572,7 +2603,7 @@ package body Sem_Aggr is\n             --  In order to diagnose the semantic error we create a duplicate\n             --  tree to analyze it and perform the check.\n \n-            else\n+            elsif Nkind (Assoc) /= N_Iterated_Component_Association then\n                declare\n                   Save_Analysis : constant Boolean := Full_Analysis;\n                   Expr          : constant Node_Id :="}]}