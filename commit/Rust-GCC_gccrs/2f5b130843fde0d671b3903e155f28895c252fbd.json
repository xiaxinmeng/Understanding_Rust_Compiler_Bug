{"sha": "2f5b130843fde0d671b3903e155f28895c252fbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY1YjEzMDg0M2ZkZTBkNjcxYjM5MDNlMTU1ZjI4ODk1YzI1MmZiZA==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-12-06T17:29:56Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-12-06T17:29:56Z"}, "message": "re PR target/46735 (frv-elf --enable-werror-always build fails for 64 bit host)\n\n\tPR target/46735\n\t* config/frv/predicates.md (gpr_or_int12_operand): Use IN_RANGE.\n\t(gpr_fpr_or_int12_operand, gpr_or_int10_operand): Likewise.\n\t(int12_operand, int_2word_operand, uint16_operand): Likewise.\n\t(fpr_or_int6_operand, int6_operand, int5_operand): Likewise.\n\t(uint5_operand, uint4_operand): Likewise.\n\t* config/frv/frv.h (IN_RANGE_P): Delete.\n\t(GPR_P, FPR_P, CC_P, ICC_P, FCC_P, CR_P, ICR_P, FCR_P): Use IN_RANGE.\n\t(ACC_P, ACCG_P, SPR_P, CONST_OK_FOR_I, CONST_OK_FOR_J): Likewise.\n\t(CONST_OK_FOR_L, CONST_OK_FOR_M, CONST_OK_FOR_N): Likewise.\n\t(CONST_OK_FOR_P): Likewise.\n\t* config/frv/frv.md (*movqicc_internal2_int): Likewise.\n\t(*movqicc_internal2_float, *movhicc_internal2_int): Likewise.\n\t(*movhicc_internal2_float, *movsicc_internal2_int): Likewise.\n\t(*movsicc_internal2_float, casesi): Likewise.\n\t* config/frv/frv.c (frv_frame_offset_rtx): Likewise.\n\t(frv_asm_output_mi_thunk, frv_legitimate_address_p_1): Likewise.\n\t(frv_emit_movsi, output_move_single, frv_emit_cond_move): Likewise.\n\t(frv_split_cond_move, frv_rtx_costs): Likewise.\n\nFrom-SVN: r167508", "tree": {"sha": "1c72aff2c766082674b1b53f77545f5212020b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c72aff2c766082674b1b53f77545f5212020b20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f5b130843fde0d671b3903e155f28895c252fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5b130843fde0d671b3903e155f28895c252fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f5b130843fde0d671b3903e155f28895c252fbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5b130843fde0d671b3903e155f28895c252fbd/comments", "author": null, "committer": null, "parents": [{"sha": "c0f9d583f06a2f8de12079f6ea3775f7cda9f51c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f9d583f06a2f8de12079f6ea3775f7cda9f51c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f9d583f06a2f8de12079f6ea3775f7cda9f51c"}], "stats": {"total": 152, "additions": 84, "deletions": 68}, "files": [{"sha": "c5c988bcf77a22b52e7d636e4274efc8a9906a38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5b130843fde0d671b3903e155f28895c252fbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5b130843fde0d671b3903e155f28895c252fbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f5b130843fde0d671b3903e155f28895c252fbd", "patch": "@@ -1,3 +1,25 @@\n+2010-12-06  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\tPR target/46735\n+\t* config/frv/predicates.md (gpr_or_int12_operand): Use IN_RANGE.\n+\t(gpr_fpr_or_int12_operand, gpr_or_int10_operand): Likewise.\n+\t(int12_operand, int_2word_operand, uint16_operand): Likewise.\n+\t(fpr_or_int6_operand, int6_operand, int5_operand): Likewise.\n+\t(uint5_operand, uint4_operand): Likewise.\n+\t* config/frv/frv.h (IN_RANGE_P): Delete.\n+\t(GPR_P, FPR_P, CC_P, ICC_P, FCC_P, CR_P, ICR_P, FCR_P): Use IN_RANGE.\n+\t(ACC_P, ACCG_P, SPR_P, CONST_OK_FOR_I, CONST_OK_FOR_J): Likewise.\n+\t(CONST_OK_FOR_L, CONST_OK_FOR_M, CONST_OK_FOR_N): Likewise.\n+\t(CONST_OK_FOR_P): Likewise.\n+\t* config/frv/frv.md (*movqicc_internal2_int): Likewise.\n+\t(*movqicc_internal2_float, *movhicc_internal2_int): Likewise.\n+\t(*movhicc_internal2_float, *movsicc_internal2_int): Likewise.\n+\t(*movsicc_internal2_float, casesi): Likewise.\n+\t* config/frv/frv.c (frv_frame_offset_rtx): Likewise.\n+\t(frv_asm_output_mi_thunk, frv_legitimate_address_p_1): Likewise.\n+\t(frv_emit_movsi, output_move_single, frv_emit_cond_move): Likewise.\n+\t(frv_split_cond_move, frv_rtx_costs): Likewise.\n+\n 2010-12-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (m_COREI7): New."}, {"sha": "0f59265532e64a0dfcf2abadacacf119ecc51298", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5b130843fde0d671b3903e155f28895c252fbd/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5b130843fde0d671b3903e155f28895c252fbd/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=2f5b130843fde0d671b3903e155f28895c252fbd", "patch": "@@ -1624,12 +1624,12 @@ static rtx\n frv_frame_offset_rtx (int offset)\n {\n   rtx offset_rtx = GEN_INT (offset);\n-  if (IN_RANGE_P (offset, -2048, 2047))\n+  if (IN_RANGE (offset, -2048, 2047))\n     return offset_rtx;\n   else\n     {\n       rtx reg_rtx = gen_rtx_REG (SImode, OFFSET_REGNO);\n-      if (IN_RANGE_P (offset, -32768, 32767))\n+      if (IN_RANGE (offset, -32768, 32767))\n \temit_insn (gen_movsi (reg_rtx, offset_rtx));\n       else\n \t{\n@@ -2057,7 +2057,7 @@ frv_asm_output_mi_thunk (FILE *file,\n   const char *parallel = (frv_issue_rate () > 1 ? \".p\" : \"\");\n \n   /* Do the add using an addi if possible.  */\n-  if (IN_RANGE_P (delta, -2048, 2047))\n+  if (IN_RANGE (delta, -2048, 2047))\n     fprintf (file, \"\\taddi %s,#%d,%s\\n\", name_arg0, (int) delta, name_arg0);\n   else\n     {\n@@ -3459,13 +3459,13 @@ frv_legitimate_address_p_1 (enum machine_mode mode,\n \tret = FALSE;\n       else\n \t{\n-\t  ret = IN_RANGE_P (INTVAL (x), -2048, 2047);\n+\t  ret = IN_RANGE (INTVAL (x), -2048, 2047);\n \n \t  /* If we can't use load/store double operations, make sure we can\n \t     address the second word.  */\n \t  if (ret && GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n-\t    ret = IN_RANGE_P (INTVAL (x) + GET_MODE_SIZE (mode) - 1,\n-\t\t\t      -2048, 2047);\n+\t    ret = IN_RANGE (INTVAL (x) + GET_MODE_SIZE (mode) - 1,\n+\t\t\t    -2048, 2047);\n \t}\n       break;\n \n@@ -3511,12 +3511,12 @@ frv_legitimate_address_p_1 (enum machine_mode mode,\n \t  else\n \t    {\n \t      value = INTVAL (x1);\n-\t      ret = IN_RANGE_P (value, -2048, 2047);\n+\t      ret = IN_RANGE (value, -2048, 2047);\n \n \t      /* If we can't use load/store double operations, make sure we can\n \t\t address the second word.  */\n \t      if (ret && GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n-\t\tret = IN_RANGE_P (value + GET_MODE_SIZE (mode) - 1, -2048, 2047);\n+\t\tret = IN_RANGE (value + GET_MODE_SIZE (mode) - 1, -2048, 2047);\n \t    }\n \t  break;\n \n@@ -4076,9 +4076,9 @@ frv_emit_movsi (rtx dest, rtx src)\n \t\tadd instruction, so expose this to CSE by copying to\n \t\tan intermediate register.  */\n \t  || (GET_CODE (src) == REG\n-\t      && IN_RANGE_P (REGNO (src),\n-\t\t\t     FIRST_VIRTUAL_REGISTER,\n-\t\t\t     LAST_VIRTUAL_POINTER_REGISTER))))\n+\t      && IN_RANGE (REGNO (src),\n+\t\t\t   FIRST_VIRTUAL_REGISTER,\n+\t\t\t   LAST_VIRTUAL_POINTER_REGISTER))))\n     {\n       emit_insn (gen_rtx_SET (VOIDmode, dest, copy_to_mode_reg (SImode, src)));\n       return TRUE;\n@@ -4380,7 +4380,7 @@ output_move_single (rtx operands[], rtx insn)\n \t      else\n \t\tvalue = CONST_DOUBLE_LOW (src);\n \n-\t      if (IN_RANGE_P (value, -32768, 32767))\n+\t      if (IN_RANGE (value, -32768, 32767))\n \t\treturn \"setlos %1, %0\";\n \n \t      return \"#\";\n@@ -4951,8 +4951,8 @@ frv_emit_cond_move (rtx dest, rtx test_rtx, rtx src1, rtx src2)\n          between the two fits in an addi's range, load up the difference, then\n          conditionally move in 0, and then unconditionally add the first\n \t value.  */\n-      else if (IN_RANGE_P (value1, -2048, 2047)\n-\t       && IN_RANGE_P (value2 - value1, -2048, 2047))\n+      else if (IN_RANGE (value1, -2048, 2047)\n+\t       && IN_RANGE (value2 - value1, -2048, 2047))\n \t;\n \n       /* If neither condition holds, just force the constant into a\n@@ -5046,8 +5046,8 @@ frv_split_cond_move (rtx operands[])\n          between the two fits in an addi's range, load up the difference, then\n          conditionally move in 0, and then unconditionally add the first\n \t value.  */\n-      else if (IN_RANGE_P (value1, -2048, 2047)\n-\t       && IN_RANGE_P (value2 - value1, -2048, 2047))\n+      else if (IN_RANGE (value1, -2048, 2047)\n+\t       && IN_RANGE (value2 - value1, -2048, 2047))\n \t{\n \t  rtx dest_si = ((GET_MODE (dest) == SImode)\n \t\t\t ? dest\n@@ -9611,7 +9611,7 @@ frv_rtx_costs (rtx x,\n     {\n     case CONST_INT:\n       /* Make 12-bit integers really cheap.  */\n-      if (IN_RANGE_P (INTVAL (x), -2048, 2047))\n+      if (IN_RANGE (INTVAL (x), -2048, 2047))\n \t{\n \t  *total = 0;\n \t  return true;"}, {"sha": "f2a103574f10fc26a004dd333f3dfe3522fe8e1d", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5b130843fde0d671b3903e155f28895c252fbd/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5b130843fde0d671b3903e155f28895c252fbd/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=2f5b130843fde0d671b3903e155f28895c252fbd", "patch": "@@ -26,12 +26,6 @@\n /* Frv general purpose macros.  */\n /* Align an address.  */\n #define ADDR_ALIGN(addr,align) (((addr) + (align) - 1) & ~((align) - 1))\n-\n-/* Return true if a value is inside a range.  */\n-#define IN_RANGE_P(VALUE, LOW, HIGH)\t\t\t\t\\\n-  (   (((HOST_WIDE_INT)(VALUE)) >= (HOST_WIDE_INT)(LOW))\t\\\n-   && (((HOST_WIDE_INT)(VALUE)) <= ((HOST_WIDE_INT)(HIGH))))\n-\n \f\n /* Driver configuration.  */\n \n@@ -604,18 +598,18 @@\n #define IACC_FIRST\t(SPR_FIRST + 2)\n #define IACC_LAST\t(SPR_FIRST + 3)\n \n-#define GPR_P(R)\tIN_RANGE_P (R, GPR_FIRST, GPR_LAST)\n+#define GPR_P(R)\tIN_RANGE (R, GPR_FIRST, GPR_LAST)\n #define GPR_OR_AP_P(R)\t(GPR_P (R) || (R) == ARG_POINTER_REGNUM)\n-#define FPR_P(R)\tIN_RANGE_P (R, FPR_FIRST, FPR_LAST)\n-#define CC_P(R)\t\tIN_RANGE_P (R, CC_FIRST, CC_LAST)\n-#define ICC_P(R)\tIN_RANGE_P (R, ICC_FIRST, ICC_LAST)\n-#define FCC_P(R)\tIN_RANGE_P (R, FCC_FIRST, FCC_LAST)\n-#define CR_P(R)\t\tIN_RANGE_P (R, CR_FIRST, CR_LAST)\n-#define ICR_P(R)\tIN_RANGE_P (R, ICR_FIRST, ICR_LAST)\n-#define FCR_P(R)\tIN_RANGE_P (R, FCR_FIRST, FCR_LAST)\n-#define ACC_P(R)\tIN_RANGE_P (R, ACC_FIRST, ACC_LAST)\n-#define ACCG_P(R)\tIN_RANGE_P (R, ACCG_FIRST, ACCG_LAST)\n-#define SPR_P(R)\tIN_RANGE_P (R, SPR_FIRST, SPR_LAST)\n+#define FPR_P(R)\tIN_RANGE (R, FPR_FIRST, FPR_LAST)\n+#define CC_P(R)\t\tIN_RANGE (R, CC_FIRST, CC_LAST)\n+#define ICC_P(R)\tIN_RANGE (R, ICC_FIRST, ICC_LAST)\n+#define FCC_P(R)\tIN_RANGE (R, FCC_FIRST, FCC_LAST)\n+#define CR_P(R)\t\tIN_RANGE (R, CR_FIRST, CR_LAST)\n+#define ICR_P(R)\tIN_RANGE (R, ICR_FIRST, ICR_LAST)\n+#define FCR_P(R)\tIN_RANGE (R, FCR_FIRST, FCR_LAST)\n+#define ACC_P(R)\tIN_RANGE (R, ACC_FIRST, ACC_LAST)\n+#define ACCG_P(R)\tIN_RANGE (R, ACCG_FIRST, ACCG_LAST)\n+#define SPR_P(R)\tIN_RANGE (R, SPR_FIRST, SPR_LAST)\n \n #define GPR_OR_PSEUDO_P(R)\t(GPR_P (R) || (R) >= FIRST_PSEUDO_REGISTER)\n #define FPR_OR_PSEUDO_P(R)\t(FPR_P (R) || (R) >= FIRST_PSEUDO_REGISTER)\n@@ -1166,21 +1160,21 @@ extern enum reg_class reg_class_from_letter[];\n #define ZERO_P(x) (x == CONST0_RTX (GET_MODE (x)))\n \n /* 6-bit signed immediate.  */\n-#define CONST_OK_FOR_I(VALUE) IN_RANGE_P(VALUE, -32, 31)\n+#define CONST_OK_FOR_I(VALUE) IN_RANGE (VALUE, -32, 31)\n /* 10-bit signed immediate.  */\n-#define CONST_OK_FOR_J(VALUE) IN_RANGE_P(VALUE, -512, 511)\n+#define CONST_OK_FOR_J(VALUE) IN_RANGE (VALUE, -512, 511)\n /* Unused */\n #define CONST_OK_FOR_K(VALUE)  0\n /* 16-bit signed immediate.  */\n-#define CONST_OK_FOR_L(VALUE) IN_RANGE_P(VALUE, -32768, 32767)\n+#define CONST_OK_FOR_L(VALUE) IN_RANGE (VALUE, -32768, 32767)\n /* 16-bit unsigned immediate.  */\n-#define CONST_OK_FOR_M(VALUE)  IN_RANGE_P (VALUE, 0, 65535)\n+#define CONST_OK_FOR_M(VALUE) IN_RANGE (VALUE, 0, 65535)\n /* 12-bit signed immediate that is negative.  */\n-#define CONST_OK_FOR_N(VALUE) IN_RANGE_P(VALUE, -2048, -1)\n+#define CONST_OK_FOR_N(VALUE) IN_RANGE (VALUE, -2048, -1)\n /* Zero */\n #define CONST_OK_FOR_O(VALUE) ((VALUE) == 0)\n /* 12-bit signed immediate that is negative.  */\n-#define CONST_OK_FOR_P(VALUE) IN_RANGE_P(VALUE, 1, 2047)\n+#define CONST_OK_FOR_P(VALUE) IN_RANGE (VALUE, 1, 2047)\n \n /* A C expression that defines the machine-dependent operand constraint letters\n    (`I', `J', `K', .. 'P') that specify particular ranges of integer values."}, {"sha": "9b4a11a39dce9fdb5a3fb3332096743f90b2c804", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5b130843fde0d671b3903e155f28895c252fbd/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5b130843fde0d671b3903e155f28895c252fbd/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=2f5b130843fde0d671b3903e155f28895c252fbd", "patch": "@@ -4628,8 +4628,8 @@\n    (clobber (match_operand:CC_CCR 5 \"icr_operand\" \"=v,v,v,v,v\"))]\n   \"(INTVAL (operands[3]) == 0\n     || INTVAL (operands[4]) == 0\n-    || (IN_RANGE_P (INTVAL (operands[3]), -2048, 2047)\n-        && IN_RANGE_P (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n+    || (IN_RANGE (INTVAL (operands[3]), -2048, 2047)\n+        && IN_RANGE (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n   \"#\"\n   [(set_attr \"length\" \"8,12,8,12,12\")\n    (set_attr \"type\" \"multi\")])\n@@ -4645,8 +4645,8 @@\n   \"TARGET_HARD_FLOAT\n    && (INTVAL (operands[3]) == 0\n        || INTVAL (operands[4]) == 0\n-       || (IN_RANGE_P (INTVAL (operands[3]), -2048, 2047)\n-\t   && IN_RANGE_P (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n+       || (IN_RANGE (INTVAL (operands[3]), -2048, 2047)\n+\t   && IN_RANGE (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n   \"#\"\n   [(set_attr \"length\" \"8,12,8,12,12\")\n    (set_attr \"type\" \"multi\")])\n@@ -4713,8 +4713,8 @@\n    (clobber (match_operand:CC_CCR 5 \"icr_operand\" \"=v,v,v,v,v\"))]\n   \"(INTVAL (operands[3]) == 0\n     || INTVAL (operands[4]) == 0\n-    || (IN_RANGE_P (INTVAL (operands[3]), -2048, 2047)\n-        && IN_RANGE_P (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n+    || (IN_RANGE (INTVAL (operands[3]), -2048, 2047)\n+        && IN_RANGE (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n   \"#\"\n   [(set_attr \"length\" \"8,12,8,12,12\")\n    (set_attr \"type\" \"multi\")])\n@@ -4730,8 +4730,8 @@\n   \"TARGET_HARD_FLOAT\n    && (INTVAL (operands[3]) == 0\n        || INTVAL (operands[4]) == 0\n-       || (IN_RANGE_P (INTVAL (operands[3]), -2048, 2047)\n-\t   && IN_RANGE_P (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n+       || (IN_RANGE (INTVAL (operands[3]), -2048, 2047)\n+\t   && IN_RANGE (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n   \"#\"\n   [(set_attr \"length\" \"8,12,8,12,12\")\n    (set_attr \"type\" \"multi\")])\n@@ -4798,8 +4798,8 @@\n    (clobber (match_operand:CC_CCR 5 \"icr_operand\" \"=v,v,v,v,v\"))]\n   \"(INTVAL (operands[3]) == 0\n     || INTVAL (operands[4]) == 0\n-    || (IN_RANGE_P (INTVAL (operands[3]), -2048, 2047)\n-        && IN_RANGE_P (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n+    || (IN_RANGE (INTVAL (operands[3]), -2048, 2047)\n+        && IN_RANGE (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n   \"#\"\n   [(set_attr \"length\" \"8,12,8,12,12\")\n    (set_attr \"type\" \"multi\")])\n@@ -4815,8 +4815,8 @@\n   \"TARGET_HARD_FLOAT\n    && (INTVAL (operands[3]) == 0\n        || INTVAL (operands[4]) == 0\n-       || (IN_RANGE_P (INTVAL (operands[3]), -2048, 2047)\n-\t   && IN_RANGE_P (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n+       || (IN_RANGE (INTVAL (operands[3]), -2048, 2047)\n+\t   && IN_RANGE (INTVAL (operands[4]) - INTVAL (operands[3]), -2048, 2047)))\"\n   \"#\"\n   [(set_attr \"length\" \"8,12,8,12,12\")\n    (set_attr \"type\" \"multi\")])\n@@ -5564,7 +5564,7 @@\n   gcc_assert (GET_CODE (operands[2]) == CONST_INT);\n \n   /* If we can't generate an immediate instruction, promote to register.  */\n-  if (! IN_RANGE_P (INTVAL (range), -2048, 2047))\n+  if (! IN_RANGE (INTVAL (range), -2048, 2047))\n     range = force_reg (SImode, range);\n \n   /* If low bound is 0, we don't have to subtract it.  */\n@@ -5573,7 +5573,7 @@\n   else\n     {\n       indx = gen_reg_rtx (SImode);\n-      if (IN_RANGE_P (INTVAL (low), -2047, 2048))\n+      if (IN_RANGE (INTVAL (low), -2047, 2048))\n \temit_insn (gen_addsi3 (indx, operands[0], GEN_INT (- INTVAL (low))));\n       else\n \temit_insn (gen_subsi3 (indx, operands[0], force_reg (SImode, low)));"}, {"sha": "363c83b5c200ab20e64f2c68ff8dc3b0d895f966", "filename": "gcc/config/frv/predicates.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5b130843fde0d671b3903e155f28895c252fbd/gcc%2Fconfig%2Ffrv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5b130843fde0d671b3903e155f28895c252fbd/gcc%2Fconfig%2Ffrv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fpredicates.md?ref=2f5b130843fde0d671b3903e155f28895c252fbd", "patch": "@@ -110,7 +110,7 @@\n   (match_code \"reg,subreg,const_int,const\")\n {\n   if (GET_CODE (op) == CONST_INT)\n-    return IN_RANGE_P (INTVAL (op), -2048, 2047);\n+    return IN_RANGE (INTVAL (op), -2048, 2047);\n \n   if (got12_operand (op, mode))\n     return true;\n@@ -141,7 +141,7 @@\n   int regno;\n \n   if (GET_CODE (op) == CONST_INT)\n-    return IN_RANGE_P (INTVAL (op), -2048, 2047);\n+    return IN_RANGE (INTVAL (op), -2048, 2047);\n \n   if (GET_MODE (op) != mode && mode != VOIDmode)\n     return FALSE;\n@@ -170,7 +170,7 @@\n   (match_code \"reg,subreg,const_int\")\n {\n   if (GET_CODE (op) == CONST_INT)\n-    return IN_RANGE_P (INTVAL (op), -512, 511);\n+    return IN_RANGE (INTVAL (op), -512, 511);\n \n   if (GET_MODE (op) != mode && mode != VOIDmode)\n     return FALSE;\n@@ -493,7 +493,7 @@\n   if (GET_CODE (op) != CONST_INT)\n     return FALSE;\n \n-  return IN_RANGE_P (INTVAL (op), -2048, 2047);\n+  return IN_RANGE (INTVAL (op), -2048, 2047);\n })\n \n ;; Return 1 if operand is an integer constant that takes 2\n@@ -535,20 +535,20 @@\n       return (flag_pic == 0) && (! SYMBOL_REF_SMALL_P (op));\n \n     case CONST_INT:\n-      return ! IN_RANGE_P (INTVAL (op), -32768, 32767);\n+      return ! IN_RANGE (INTVAL (op), -32768, 32767);\n \n     case CONST_DOUBLE:\n       if (GET_MODE (op) == SFmode)\n \t{\n \t  REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n \t  REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n \t  value = l;\n-\t  return ! IN_RANGE_P (value, -32768, 32767);\n+\t  return ! IN_RANGE (value, -32768, 32767);\n \t}\n       else if (GET_MODE (op) == VOIDmode)\n \t{\n \t  value = CONST_DOUBLE_LOW (op);\n-\t  return ! IN_RANGE_P (value, -32768, 32767);\n+\t  return ! IN_RANGE (value, -32768, 32767);\n \t}\n       break;\n     }\n@@ -1117,7 +1117,7 @@\n   if (GET_CODE (op) != CONST_INT)\n     return FALSE;\n \n-  return IN_RANGE_P (INTVAL (op), 0, 0xffff);\n+  return IN_RANGE (INTVAL (op), 0, 0xffff);\n })\n \n ;; Returns 1 if OP is either a SYMBOL_REF or a constant.\n@@ -1444,7 +1444,7 @@\n   (match_code \"reg,subreg,const_int\")\n {\n   if (GET_CODE (op) == CONST_INT)\n-    return IN_RANGE_P (INTVAL (op), -32, 31);\n+    return IN_RANGE (INTVAL (op), -32, 31);\n \n   if (GET_MODE (op) != mode && mode != VOIDmode)\n     return FALSE;\n@@ -1471,39 +1471,39 @@\n   if (GET_CODE (op) != CONST_INT)\n     return FALSE;\n \n-  return IN_RANGE_P (INTVAL (op), -32, 31);\n+  return IN_RANGE (INTVAL (op), -32, 31);\n })\n \n ;; Return 1 if operand is a 5-bit signed immediate.\n \n (define_predicate \"int5_operand\"\n   (match_code \"const_int\")\n {\n-  return GET_CODE (op) == CONST_INT && IN_RANGE_P (INTVAL (op), -16, 15);\n+  return GET_CODE (op) == CONST_INT && IN_RANGE (INTVAL (op), -16, 15);\n })\n \n ;; Return 1 if operand is a 5-bit unsigned immediate.\n \n (define_predicate \"uint5_operand\"\n   (match_code \"const_int\")\n {\n-  return GET_CODE (op) == CONST_INT && IN_RANGE_P (INTVAL (op), 0, 31);\n+  return GET_CODE (op) == CONST_INT && IN_RANGE (INTVAL (op), 0, 31);\n })\n \n ;; Return 1 if operand is a 4-bit unsigned immediate.\n \n (define_predicate \"uint4_operand\"\n   (match_code \"const_int\")\n {\n-  return GET_CODE (op) == CONST_INT && IN_RANGE_P (INTVAL (op), 0, 15);\n+  return GET_CODE (op) == CONST_INT && IN_RANGE (INTVAL (op), 0, 15);\n })\n \n ;; Return 1 if operand is a 1-bit unsigned immediate (0 or 1).\n \n (define_predicate \"uint1_operand\"\n   (match_code \"const_int\")\n {\n-  return GET_CODE (op) == CONST_INT && IN_RANGE_P (INTVAL (op), 0, 1);\n+  return GET_CODE (op) == CONST_INT && IN_RANGE (INTVAL (op), 0, 1);\n })\n \n ;; Return 1 if operand is a valid ACC register number."}]}