{"sha": "fc9613c640c28ca85ea988f6890d13cb4d912e11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5NjEzYzY0MGMyOGNhODVlYTk4OGY2ODkwZDEzY2I0ZDkxMmUxMQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-02T18:46:38Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-02T18:46:38Z"}, "message": "rs6000: Make debug regnums independent of internal ones\n\nWhere we use \"internal GCC register numbers\" in debug info, that\ndefines an ABI, so we cannot change those numbers.  But we want to\nchange the internal numbers, and sometimes we do that without\nremembering this gotcha anyway; so let's make everything independent\nof the internal numbers.\n\nFor those registers that are not recognised here (we still have MQ for\nexample, but also the GCC-internal frame pointer and arg pointer\nregisters), this just returns the internal register number.  This is a\nbit worrying: that number could be the same as that for a register we\nvalidly want to have in debug info.  I first had a gcc_unreachable ()\nfor that, but this does now work because dwarf2cfi calls\nrs6000_dbx_register_number for every internal register.  Then I just\nreturned 0 for the internal regs, but that causes various regression\ntests to fail.  So now I return the internal register number again,\nas it was before; but this needs to be fixed.\n\n\n\t* config/rs6000/rs6000.c (rs6000_dbx_register_number): Do not use\n\tthe internal register number, for any \"real\" register.\n\nFrom-SVN: r270820", "tree": {"sha": "49d967cb2a1fa94ac724f2836d4bf90d39130ba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49d967cb2a1fa94ac724f2836d4bf90d39130ba1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc9613c640c28ca85ea988f6890d13cb4d912e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9613c640c28ca85ea988f6890d13cb4d912e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc9613c640c28ca85ea988f6890d13cb4d912e11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9613c640c28ca85ea988f6890d13cb4d912e11/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f58bd252753e1c2458dc009a71726fca772643a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58bd252753e1c2458dc009a71726fca772643a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f58bd252753e1c2458dc009a71726fca772643a8"}], "stats": {"total": 90, "additions": 58, "deletions": 32}, "files": [{"sha": "53428649c371dbe81dcb75388170559537904e02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9613c640c28ca85ea988f6890d13cb4d912e11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9613c640c28ca85ea988f6890d13cb4d912e11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc9613c640c28ca85ea988f6890d13cb4d912e11", "patch": "@@ -1,3 +1,8 @@\n+2019-05-02  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_dbx_register_number): Do not use\n+\tthe internal register number, for any \"real\" register.\n+\n 2019-05-02  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (rs6000_dbx_register_number): Return the"}, {"sha": "c75fd863bdb36050282654a223606453ade9fa23", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 53, "deletions": 32, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9613c640c28ca85ea988f6890d13cb4d912e11/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9613c640c28ca85ea988f6890d13cb4d912e11/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fc9613c640c28ca85ea988f6890d13cb4d912e11", "patch": "@@ -36269,53 +36269,74 @@ rs6000_init_dwarf_reg_sizes_extra (tree address)\n unsigned int\n rs6000_dbx_register_number (unsigned int regno, unsigned int format)\n {\n-  /* We use the GCC 7 (and before) internal number for non-DWARF debug\n-     information, and also for .eh_frame.  */\n-  if ((format == 0 && write_symbols != DWARF2_DEBUG) || format == 2)\n+  /* On some platforms, we use the standard DWARF register\n+     numbering for .debug_info and .debug_frame.  */\n+  if ((format == 0 && write_symbols == DWARF2_DEBUG) || format == 1)\n     {\n-      /* Translate the regnos to their numbers in GCC 7 (and before).  */\n+#ifdef RS6000_USE_DWARF_NUMBERING\n+      if (regno <= 31)\n+\treturn regno;\n+      if (FP_REGNO_P (regno))\n+\treturn regno - FIRST_FPR_REGNO + 32;\n+      if (ALTIVEC_REGNO_P (regno))\n+\treturn regno - FIRST_ALTIVEC_REGNO + 1124;\n+      if (regno == LR_REGNO)\n+\treturn 108;\n+      if (regno == CTR_REGNO)\n+\treturn 109;\n+      if (regno == CA_REGNO)\n+\treturn 101;  /* XER */\n+      /* Special handling for CR for .debug_frame: rs6000_emit_prologue has\n+\t translated any combination of CR2, CR3, CR4 saves to a save of CR2.\n+\t The actual code emitted saves the whole of CR, so we map CR2_REGNO\n+\t to the DWARF reg for CR.  */\n+      if (format == 1 && regno == CR2_REGNO)\n+\treturn 64;\n+      if (CR_REGNO_P (regno))\n+\treturn regno - CR0_REGNO + 86;\n+      if (regno == VRSAVE_REGNO)\n+\treturn 356;\n+      if (regno == VSCR_REGNO)\n+\treturn 67;\n       if (regno == TFHAR_REGNO)\n-\tregno = 114;\n-      else if (regno == TFIAR_REGNO)\n-\tregno = 115;\n-      else if (regno == TEXASR_REGNO)\n-\tregno = 116;\n+\treturn 228;\n+      if (regno == TFIAR_REGNO)\n+\treturn 229;\n+      if (regno == TEXASR_REGNO)\n+\treturn 230;\n \n       return regno;\n+#endif\n     }\n \n-  /* On some platforms, we use the standard DWARF register\n-     numbering for .debug_info and .debug_frame.  */\n-#ifdef RS6000_USE_DWARF_NUMBERING\n-  if (regno <= 63)\n+  /* We use the GCC 7 (and before) internal number for non-DWARF debug\n+     information, and also for .eh_frame.  */\n+  /* Translate the regnos to their numbers in GCC 7 (and before).  */\n+  if (regno <= 31)\n     return regno;\n+  if (FP_REGNO_P (regno))\n+    return regno - FIRST_FPR_REGNO + 32;\n+  if (ALTIVEC_REGNO_P (regno))\n+    return regno - FIRST_ALTIVEC_REGNO + 77;\n   if (regno == LR_REGNO)\n-    return 108;\n+    return 65;\n   if (regno == CTR_REGNO)\n-    return 109;\n-  /* Special handling for CR for .debug_frame: rs6000_emit_prologue has\n-     translated any combination of CR2, CR3, CR4 saves to a save of CR2.\n-     The actual code emitted saves the whole of CR, so we map CR2_REGNO\n-     to the DWARF reg for CR.  */\n-  if (format == 1 && regno == CR2_REGNO)\n-    return 64;\n-  if (CR_REGNO_P (regno))\n-    return regno - CR0_REGNO + 86;\n+    return 66;\n   if (regno == CA_REGNO)\n-    return 101;  /* XER */\n-  if (ALTIVEC_REGNO_P (regno))\n-    return regno - FIRST_ALTIVEC_REGNO + 1124;\n+    return 76;  /* XER */\n+  if (CR_REGNO_P (regno))\n+    return regno - CR0_REGNO + 68;\n   if (regno == VRSAVE_REGNO)\n-    return 356;\n+    return 109;\n   if (regno == VSCR_REGNO)\n-    return 67;\n+    return 110;\n   if (regno == TFHAR_REGNO)\n-    return 228;\n+    return 114;\n   if (regno == TFIAR_REGNO)\n-    return 229;\n+    return 115;\n   if (regno == TEXASR_REGNO)\n-    return 230;\n-#endif\n+    return 116;\n+\n   return regno;\n }\n "}]}