{"sha": "d0edd768de548507869ddec157f2e8b3551a6231", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlZGQ3NjhkZTU0ODUwNzg2OWRkZWMxNTdmMmU4YjM1NTFhNjIzMQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-07-06T14:44:30Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-07-06T14:44:30Z"}, "message": "machmode.h (TRULY_NOOP_TRUNCATION_MODES_P): New macro.\n\n\t* machmode.h (TRULY_NOOP_TRUNCATION_MODES_P): New macro.\n\t* combine.c (make_extraction, gen_lowpart_or_truncate,\n\tapply_distributive_law, simplify_comparison,\n\treg_truncated_to_mode, record_truncated_value): Use it.\n\t* cse.c (notreg_cost): Likewise.\n\t* expmed.c (store_bit_field_1, extract_bit_field_1): Likewise.\n\t* expr.c (convert_move, convert_modes): Likewise.\n\t* optabs.c (expand_binop, expand_unop): Likewise.\n\t* postreload.c (move2add_last_label): Likewise.\n\t* regmove.c (optimize_reg_copy_3): Likewise.\n\t* rtlhooks.c (gen_lowpart_general): Likewise.\n\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n\nFrom-SVN: r175921", "tree": {"sha": "95d75bc9dd3fb8ff5d3161011734bcfd2796c8bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95d75bc9dd3fb8ff5d3161011734bcfd2796c8bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0edd768de548507869ddec157f2e8b3551a6231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0edd768de548507869ddec157f2e8b3551a6231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0edd768de548507869ddec157f2e8b3551a6231", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0edd768de548507869ddec157f2e8b3551a6231/comments", "author": null, "committer": null, "parents": [{"sha": "e5cabdfba868da1d67a6fa317846dbd5dfd83ee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5cabdfba868da1d67a6fa317846dbd5dfd83ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5cabdfba868da1d67a6fa317846dbd5dfd83ee5"}], "stats": {"total": 95, "additions": 47, "deletions": 48}, "files": [{"sha": "3156a9be19d5af014dd3376965e337f111ed5d2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -1,3 +1,18 @@\n+2011-07-06  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* machmode.h (TRULY_NOOP_TRUNCATION_MODES_P): New macro.\n+\t* combine.c (make_extraction, gen_lowpart_or_truncate,\n+\tapply_distributive_law, simplify_comparison,\n+\treg_truncated_to_mode, record_truncated_value): Use it.\n+\t* cse.c (notreg_cost): Likewise.\n+\t* expmed.c (store_bit_field_1, extract_bit_field_1): Likewise.\n+\t* expr.c (convert_move, convert_modes): Likewise.\n+\t* optabs.c (expand_binop, expand_unop): Likewise.\n+\t* postreload.c (move2add_last_label): Likewise.\n+\t* regmove.c (optimize_reg_copy_3): Likewise.\n+\t* rtlhooks.c (gen_lowpart_general): Likewise.\n+\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n+\n 2011-07-06  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/rs6000/vxworks.h (WORDS_BIG_ENDIAN): Define."}, {"sha": "9edfdd18b1cc5e29ef8d4cf0c7b78d4e0953fafc", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -7146,8 +7146,7 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n \t   && !MEM_P (inner)\n \t   && (inner_mode == tmode\n \t       || !REG_P (inner)\n-\t       || TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (tmode),\n-\t\t\t\t\t GET_MODE_BITSIZE (inner_mode))\n+\t       || TRULY_NOOP_TRUNCATION_MODES_P (tmode, inner_mode)\n \t       || reg_truncated_to_mode (tmode, inner))\n \t   && (! in_dest\n \t       || (REG_P (inner)\n@@ -7416,8 +7415,8 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n       /* On the LHS, don't create paradoxical subregs implicitely truncating\n \t the register unless TRULY_NOOP_TRUNCATION.  */\n       if (in_dest\n-\t  && !TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (GET_MODE (inner)),\n-\t\t\t\t     GET_MODE_BITSIZE (wanted_inner_mode)))\n+\t  && !TRULY_NOOP_TRUNCATION_MODES_P (GET_MODE (inner),\n+\t\t\t\t\t     wanted_inner_mode))\n \treturn NULL_RTX;\n \n       if (GET_MODE (inner) != wanted_inner_mode\n@@ -8053,8 +8052,7 @@ gen_lowpart_or_truncate (enum machine_mode mode, rtx x)\n {\n   if (!CONST_INT_P (x)\n       && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (x))\n-      && !TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-\t\t\t\t GET_MODE_BITSIZE (GET_MODE (x)))\n+      && !TRULY_NOOP_TRUNCATION_MODES_P (mode, GET_MODE (x))\n       && !(REG_P (x) && reg_truncated_to_mode (mode, x)))\n     {\n       /* Bit-cast X into an integer mode.  */\n@@ -9268,9 +9266,8 @@ apply_distributive_law (rtx x)\n \t  || GET_MODE_SIZE (GET_MODE (SUBREG_REG (lhs))) > UNITS_PER_WORD\n \t  /* Result might need to be truncated.  Don't change mode if\n \t     explicit truncation is needed.  */\n-\t  || !TRULY_NOOP_TRUNCATION\n-\t       (GET_MODE_BITSIZE (GET_MODE (x)),\n-\t\tGET_MODE_BITSIZE (GET_MODE (SUBREG_REG (lhs)))))\n+\t  || !TRULY_NOOP_TRUNCATION_MODES_P (GET_MODE (x),\n+\t\t\t\t\t     GET_MODE (SUBREG_REG (lhs))))\n \treturn x;\n \n       tem = simplify_gen_binary (code, GET_MODE (SUBREG_REG (lhs)),\n@@ -11699,8 +11696,7 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t\t\t\t  + 1)) >= 0\n \t      && const_op >> i == 0\n \t      && (tmode = mode_for_size (i, MODE_INT, 1)) != BLKmode\n-\t      && (TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (tmode),\n-\t\t\t\t\t GET_MODE_BITSIZE (GET_MODE (op0)))\n+\t      && (TRULY_NOOP_TRUNCATION_MODES_P (tmode, GET_MODE (op0))\n \t\t  || (REG_P (XEXP (op0, 0))\n \t\t      && reg_truncated_to_mode (tmode, XEXP (op0, 0)))))\n \t    {\n@@ -12513,8 +12509,7 @@ reg_truncated_to_mode (enum machine_mode mode, const_rtx x)\n     return false;\n   if (GET_MODE_SIZE (truncated) <= GET_MODE_SIZE (mode))\n     return true;\n-  if (TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-\t\t\t     GET_MODE_BITSIZE (truncated)))\n+  if (TRULY_NOOP_TRUNCATION_MODES_P (mode, truncated))\n     return true;\n   return false;\n }\n@@ -12539,8 +12534,7 @@ record_truncated_value (rtx *p, void *data ATTRIBUTE_UNUSED)\n       if (GET_MODE_SIZE (original_mode) <= GET_MODE_SIZE (truncated_mode))\n \treturn -1;\n \n-      if (TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (truncated_mode),\n-\t\t\t\t GET_MODE_BITSIZE (original_mode)))\n+      if (TRULY_NOOP_TRUNCATION_MODES_P (truncated_mode, original_mode))\n \treturn -1;\n \n       x = SUBREG_REG (x);"}, {"sha": "c75fd7b81abdfb155941a1bca6ad67bc746b038a", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -761,8 +761,8 @@ notreg_cost (rtx x, enum rtx_code outer)\n \t   && (GET_MODE_SIZE (GET_MODE (x))\n \t       < GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n \t   && subreg_lowpart_p (x)\n-\t   && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (GET_MODE (x)),\n-\t\t\t\t     GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (x)))))\n+\t   && TRULY_NOOP_TRUNCATION_MODES_P (GET_MODE (x),\n+\t\t\t\t\t     GET_MODE (SUBREG_REG (x))))\n \t  ? 0\n \t  : rtx_cost (x, outer, optimize_this_for_speed_p) * 2);\n }"}, {"sha": "18926b28273da428f8fde5219ac152c168e2b656", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -1722,8 +1722,7 @@ find_shift_sequence (int access_size,\n       /* Try a wider mode if truncating the store mode to NEW_MODE\n \t requires a real instruction.  */\n       if (GET_MODE_BITSIZE (new_mode) < GET_MODE_BITSIZE (store_mode)\n-\t  && !TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (new_mode),\n-\t\t\t\t     GET_MODE_BITSIZE (store_mode)))\n+\t  && !TRULY_NOOP_TRUNCATION_MODES_P (new_mode, store_mode))\n \tcontinue;\n \n       /* Also try a wider mode if the necessary punning is either not"}, {"sha": "567f98d4da858b12c72d7350eedfc061bdcf9047", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -635,9 +635,8 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t X) 0)) is (reg:N X).  */\n       if (GET_CODE (xop0) == SUBREG\n \t  && REG_P (SUBREG_REG (xop0))\n-\t  && (!TRULY_NOOP_TRUNCATION\n-\t      (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (xop0))),\n-\t       GET_MODE_BITSIZE (op_mode))))\n+\t  && (!TRULY_NOOP_TRUNCATION_MODES_P (GET_MODE (SUBREG_REG (xop0)),\n+\t\t\t\t\t      op_mode)))\n \t{\n \t  rtx tem = gen_reg_rtx (op_mode);\n \t  emit_move_insn (tem, xop0);\n@@ -1304,8 +1303,7 @@ extract_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t       ? bitpos + bitsize == BITS_PER_WORD\n \t       : bitpos == 0)))\n       && ((!MEM_P (op0)\n-\t   && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode1),\n-\t\t\t\t     GET_MODE_BITSIZE (GET_MODE (op0)))\n+\t   && TRULY_NOOP_TRUNCATION_MODES_P (mode1, GET_MODE (op0))\n \t   && GET_MODE_SIZE (mode1) != 0\n \t   && byte_offset % GET_MODE_SIZE (mode1) == 0)\n \t  || (MEM_P (op0)\n@@ -1475,8 +1473,7 @@ extract_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t     mode.  Instead, create a temporary and use convert_move to set\n \t     the target.  */\n \t  if (REG_P (xtarget)\n-\t      && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (GET_MODE (xtarget)),\n-\t\t\t\t\tGET_MODE_BITSIZE (ext_mode)))\n+\t      && TRULY_NOOP_TRUNCATION_MODES_P (GET_MODE (xtarget), ext_mode))\n \t    {\n \t      xtarget = gen_lowpart (ext_mode, xtarget);\n \t      if (GET_MODE_SIZE (ext_mode)"}, {"sha": "fd431c2001134c5364f43bcfbc03beb80a09aaba", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -586,8 +586,7 @@ convert_move (rtx to, rtx from, int unsignedp)\n \n   /* For truncation, usually we can just refer to FROM in a narrower mode.  */\n   if (GET_MODE_BITSIZE (to_mode) < GET_MODE_BITSIZE (from_mode)\n-      && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (to_mode),\n-\t\t\t\tGET_MODE_BITSIZE (from_mode)))\n+      && TRULY_NOOP_TRUNCATION_MODES_P (to_mode, from_mode))\n     {\n       if (!((MEM_P (from)\n \t     && ! MEM_VOLATILE_P (from)\n@@ -625,8 +624,7 @@ convert_move (rtx to, rtx from, int unsignedp)\n \t    if (((can_extend_p (to_mode, intermediate, unsignedp)\n \t\t  != CODE_FOR_nothing)\n \t\t || (GET_MODE_SIZE (to_mode) < GET_MODE_SIZE (intermediate)\n-\t\t     && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (to_mode),\n-\t\t\t\t\t       GET_MODE_BITSIZE (intermediate))))\n+\t\t     && TRULY_NOOP_TRUNCATION_MODES_P (to_mode, intermediate)))\n \t\t&& (can_extend_p (intermediate, from_mode, unsignedp)\n \t\t    != CODE_FOR_nothing))\n \t      {\n@@ -754,8 +752,8 @@ convert_modes (enum machine_mode mode, enum machine_mode oldmode, rtx x, int uns\n \t\t      || (REG_P (x)\n \t\t\t  && (! HARD_REGISTER_P (x)\n \t\t\t      || HARD_REGNO_MODE_OK (REGNO (x), mode))\n-\t\t\t  && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-\t\t\t\t\t\t    GET_MODE_BITSIZE (GET_MODE (x)))))))))\n+\t\t\t  && TRULY_NOOP_TRUNCATION_MODES_P (mode,\n+\t\t\t\t\t\t\t    GET_MODE (x))))))))\n     {\n       /* ?? If we don't know OLDMODE, we have to assume here that\n \t X does not need sign- or zero-extension.   This may not be"}, {"sha": "30d1a8ccb38e0709a7f26a716292d003e860864b", "filename": "gcc/machmode.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -275,4 +275,8 @@ extern enum machine_mode ptr_mode;\n /* Target-dependent machine mode initialization - in insn-modes.c.  */\n extern void init_adjust_machine_modes (void);\n \n+#define TRULY_NOOP_TRUNCATION_MODES_P(MODE1, MODE2) \\\n+  TRULY_NOOP_TRUNCATION (GET_MODE_PRECISION (MODE1), \\\n+\t\t\t GET_MODE_PRECISION (MODE2))\n+\n #endif /* not HAVE_MACHINE_MODES */"}, {"sha": "1a8aebd9438ca40987e4d8d17d79b0cbe7bd0e93", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -1440,8 +1440,7 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n       if (temp != 0)\n \t{\n \t  if (GET_MODE_CLASS (mode) == MODE_INT\n-\t      && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-                                        GET_MODE_BITSIZE (GET_MODE (temp))))\n+\t      && TRULY_NOOP_TRUNCATION_MODES_P (mode, GET_MODE (temp)))\n \t    return gen_lowpart (mode, temp);\n \t  else\n \t    return convert_to_mode (mode, temp, unsignedp);\n@@ -1498,8 +1497,7 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n \t    if (temp)\n \t      {\n \t\tif (mclass != MODE_INT\n-                    || !TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-                                               GET_MODE_BITSIZE (wider_mode)))\n+                    || !TRULY_NOOP_TRUNCATION_MODES_P (mode, wider_mode))\n \t\t  {\n \t\t    if (target == 0)\n \t\t      target = gen_reg_rtx (mode);\n@@ -2027,8 +2025,7 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n \t      if (temp)\n \t\t{\n \t\t  if (mclass != MODE_INT\n-\t\t      || !TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-\t\t\t\t\t\t GET_MODE_BITSIZE (wider_mode)))\n+\t\t      || !TRULY_NOOP_TRUNCATION_MODES_P (mode, wider_mode))\n \t\t    {\n \t\t      if (target == 0)\n \t\t\ttarget = gen_reg_rtx (mode);\n@@ -2915,8 +2912,7 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n \t    if (temp)\n \t      {\n \t\tif (mclass != MODE_INT\n-\t\t    || !TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-\t\t\t\t\t       GET_MODE_BITSIZE (wider_mode)))\n+\t\t    || !TRULY_NOOP_TRUNCATION_MODES_P (mode, wider_mode))\n \t\t  {\n \t\t    if (target == 0)\n \t\t      target = gen_reg_rtx (mode);"}, {"sha": "72e487e057ff5abe4957e020500854caf8f1ea60", "filename": "gcc/postreload.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -1643,8 +1643,7 @@ static int move2add_last_label_luid;\n #define MODES_OK_FOR_MOVE2ADD(OUTMODE, INMODE) \\\n   (GET_MODE_SIZE (OUTMODE) == GET_MODE_SIZE (INMODE) \\\n    || (GET_MODE_SIZE (OUTMODE) <= GET_MODE_SIZE (INMODE) \\\n-       && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (OUTMODE), \\\n-\t\t\t\t GET_MODE_BITSIZE (INMODE))))\n+       && TRULY_NOOP_TRUNCATION_MODES_P (OUTMODE, INMODE)))\n \n /* This function is called with INSN that sets REG to (SYM + OFF),\n    while REG is known to already have value (SYM + offset)."}, {"sha": "a2baca1c3bb3d2cb76ef6cafd23e4d5d3d5ef887", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -548,8 +548,7 @@ optimize_reg_copy_3 (rtx insn, rtx dest, rtx src)\n   /* Do not use a SUBREG to truncate from one mode to another if truncation\n      is not a nop.  */\n   if (GET_MODE_BITSIZE (GET_MODE (src_reg)) <= GET_MODE_BITSIZE (GET_MODE (src))\n-      && !TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (GET_MODE (src)),\n-\t\t\t\t GET_MODE_BITSIZE (GET_MODE (src_reg))))\n+      && !TRULY_NOOP_TRUNCATION_MODES_P (GET_MODE (src), GET_MODE (src_reg)))\n     return;\n \n   set_insn = p;"}, {"sha": "60e4d52890e5294c55c6db7481fe35b23d77b885", "filename": "gcc/rtlhooks.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Frtlhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Frtlhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks.c?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -61,8 +61,7 @@ gen_lowpart_general (enum machine_mode mode, rtx x)\n       /* The following exposes the use of \"x\" to CSE.  */\n       if (GET_MODE_SIZE (GET_MODE (x)) <= UNITS_PER_WORD\n \t  && SCALAR_INT_MODE_P (GET_MODE (x))\n-\t  && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-\t\t\t\t    GET_MODE_BITSIZE (GET_MODE (x)))\n+\t  && TRULY_NOOP_TRUNCATION_MODES_P (mode, GET_MODE (x))\n \t  && !reload_completed)\n \treturn gen_lowpart_general (mode, force_reg (GET_MODE (x), x));\n "}, {"sha": "80faaefb3954171f0779aca6cdbfb8f5471d284d", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0edd768de548507869ddec157f2e8b3551a6231/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=d0edd768de548507869ddec157f2e8b3551a6231", "patch": "@@ -852,8 +852,7 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n          truncation.  But don't do this for an (LSHIFTRT (MULT ...))\n          since this will cause problems with the umulXi3_highpart\n          patterns.  */\n-      if ((TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-\t\t\t\t GET_MODE_BITSIZE (GET_MODE (op)))\n+      if ((TRULY_NOOP_TRUNCATION_MODES_P (mode, GET_MODE (op))\n \t   ? (num_sign_bit_copies (op, GET_MODE (op))\n \t      > (unsigned int) (GET_MODE_BITSIZE (GET_MODE (op))\n \t\t\t\t- GET_MODE_BITSIZE (mode)))"}]}