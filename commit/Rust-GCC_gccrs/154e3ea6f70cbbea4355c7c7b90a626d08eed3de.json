{"sha": "154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU0ZTNlYTZmNzBjYmJlYTQzNTVjN2M3YjkwYTYyNmQwOGVlZDNkZQ==", "commit": {"author": {"name": "Monk Chiang", "email": "sh.chiang04@gmail.com", "date": "2018-04-07T07:40:49Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-07T07:40:49Z"}, "message": "[NDS32] Add intrinsic functions for atomic load/store and memory sync.\n\ngcc/\n\t* config/nds32/constants.md (unspec_element, unspec_volatile_element):\n\tAdd enum values for atomic load/store and memory sync.\n\t* config/nds32/nds32-intrinsic.c: Implementation for atomic load/store\n\tand memory sync.\n\t* config/nds32/nds32-intrinsic.md: Likewise.\n\t* config/nds32/nds32_intrinsic.h: Likewise.\n\t* config/nds32/nds32.h (nds32_builtins): Likewise.\n\nFrom-SVN: r259207", "tree": {"sha": "519a0f9cbdc64cce97bc8bc622c2e2daeca63e0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/519a0f9cbdc64cce97bc8bc622c2e2daeca63e0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/comments", "author": {"login": "monkchiang", "id": 62004175, "node_id": "MDQ6VXNlcjYyMDA0MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/62004175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monkchiang", "html_url": "https://github.com/monkchiang", "followers_url": "https://api.github.com/users/monkchiang/followers", "following_url": "https://api.github.com/users/monkchiang/following{/other_user}", "gists_url": "https://api.github.com/users/monkchiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/monkchiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monkchiang/subscriptions", "organizations_url": "https://api.github.com/users/monkchiang/orgs", "repos_url": "https://api.github.com/users/monkchiang/repos", "events_url": "https://api.github.com/users/monkchiang/events{/privacy}", "received_events_url": "https://api.github.com/users/monkchiang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7"}], "stats": {"total": 324, "additions": 324, "deletions": 0}, "files": [{"sha": "ffc87d710327ab369d2a3a77b6394cadb8d65dc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "patch": "@@ -1,3 +1,13 @@\n+2018-04-07  Monk Chiang  <sh.chiang04@gmail.com>\n+\n+\t* config/nds32/constants.md (unspec_element, unspec_volatile_element):\n+\tAdd enum values for atomic load/store and memory sync.\n+\t* config/nds32/nds32-intrinsic.c: Implementation for atomic load/store\n+\tand memory sync.\n+\t* config/nds32/nds32-intrinsic.md: Likewise.\n+\t* config/nds32/nds32_intrinsic.h: Likewise.\n+\t* config/nds32/nds32.h (nds32_builtins): Likewise.\n+\n 2018-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/85257"}, {"sha": "77d96892102579bb5227b6d302eeaf639d22f04d", "filename": "gcc/config/nds32/constants.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2Fconfig%2Fnds32%2Fconstants.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2Fconfig%2Fnds32%2Fconstants.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstants.md?ref=154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "patch": "@@ -40,6 +40,10 @@\n   UNSPEC_FFB\n   UNSPEC_FFMISM\n   UNSPEC_FLMISM\n+  UNSPEC_LWUP\n+  UNSPEC_LBUP\n+  UNSPEC_SWUP\n+  UNSPEC_SBUP\n   UNSPEC_UALOAD_HW\n   UNSPEC_UALOAD_W\n   UNSPEC_UALOAD_DW\n@@ -52,6 +56,10 @@\n (define_c_enum \"unspec_volatile_element\" [\n   UNSPEC_VOLATILE_ISYNC\n   UNSPEC_VOLATILE_ISB\n+  UNSPEC_VOLATILE_DSB\n+  UNSPEC_VOLATILE_MSYNC\n+  UNSPEC_VOLATILE_MSYNC_ALL\n+  UNSPEC_VOLATILE_MSYNC_STORE\n   UNSPEC_VOLATILE_MFSR\n   UNSPEC_VOLATILE_MFUSR\n   UNSPEC_VOLATILE_MTSR\n@@ -61,6 +69,8 @@\n   UNSPEC_VOLATILE_FMFCSR\n   UNSPEC_VOLATILE_FMTCSR\n   UNSPEC_VOLATILE_FMFCFG\n+  UNSPEC_VOLATILE_LLW\n+  UNSPEC_VOLATILE_SCW\n   UNSPEC_VOLATILE_CCTL_L1D_INVALALL\n   UNSPEC_VOLATILE_CCTL_L1D_WBALL_ALVL\n   UNSPEC_VOLATILE_CCTL_L1D_WBALL_ONE_LVL"}, {"sha": "fb67e6fe5d546fd91d9bbf3313e3a771e0c9543e", "filename": "gcc/config/nds32/nds32-intrinsic.c", "status": "modified", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c?ref=154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "patch": "@@ -135,6 +135,23 @@ nds32_check_constant_argument (enum insn_code icode, int opnum, rtx opval,\n   return true;\n }\n \n+/* Expand builtins that return target.  */\n+static rtx\n+nds32_expand_noarg_builtin (enum insn_code icode, rtx target)\n+{\n+  rtx pat;\n+\n+  target = nds32_legitimize_target (icode, target);\n+\n+  /* Emit and return the new instruction. */\n+  pat = GEN_FCN (icode) (target);\n+  if (! pat)\n+    return NULL_RTX;\n+\n+  emit_insn (pat);\n+  return target;\n+}\n+\n /* Expand builtins that take one operand.  */\n static rtx\n nds32_expand_unop_builtin (enum insn_code icode, tree exp, rtx target,\n@@ -222,6 +239,61 @@ nds32_expand_binop_builtin (enum insn_code icode, tree exp, rtx target,\n   return target;\n }\n \n+/* Expand builtins for load.  */\n+static rtx\n+nds32_expand_builtin_load (enum insn_code icode, tree exp, rtx target)\n+{\n+  /* Load address format is [$ra + $rb],\n+     but input arguments not enough,\n+     so we need another temp register as $rb.\n+     Generating assembly code:\n+       movi $temp, 0\n+       llw  $rt, [$ra + $temp] */\n+  rtx pat;\n+  rtx op0 = nds32_read_argument (exp, 0);\n+  rtx addr_helper = gen_reg_rtx (insn_data[icode].operand[1].mode);\n+\n+  target = nds32_legitimize_target (icode, target);\n+  op0 = nds32_legitimize_argument (icode, 1, op0);\n+\n+  /* Emit and return the new instruction. */\n+  pat = GEN_FCN (icode) (target, op0, addr_helper);\n+  if (!pat)\n+    return NULL_RTX;\n+\n+  emit_move_insn (addr_helper, GEN_INT (0));\n+  emit_insn (pat);\n+  return target;\n+}\n+\n+/* Expand builtins for store.  */\n+static rtx\n+nds32_expand_builtin_store (enum insn_code icode, tree exp, rtx target)\n+{\n+  /* Store address format is [$ra + $rb],\n+     but input arguments not enough,\n+     so we need another temp register as $rb.\n+     Generating assembly code:\n+       movi $temp, 0\n+       store  $rt, [$ra + $temp] */\n+  rtx pat;\n+  rtx op0 = nds32_read_argument (exp, 0);\n+  rtx op1 = nds32_read_argument (exp, 1);\n+  rtx addr_helper = gen_reg_rtx (insn_data[icode].operand[1].mode);\n+\n+  op0 = nds32_legitimize_argument (icode, 0, op0);\n+  op1 = nds32_legitimize_argument (icode, 2, op1);\n+\n+  /* Emit and return the new instruction. */\n+  pat = GEN_FCN (icode) (op0, addr_helper, op1);\n+  if (! pat)\n+    return NULL_RTX;\n+\n+  emit_move_insn (addr_helper, GEN_INT (0));\n+  emit_insn (pat);\n+  return target;\n+}\n+\n /* Expand cctl builtins.  */\n static rtx\n nds32_expand_cctl_builtin (enum insn_code icode, tree exp, rtx target,\n@@ -263,6 +335,36 @@ nds32_expand_cctl_builtin (enum insn_code icode, tree exp, rtx target,\n   return target;\n }\n \n+/* Expand scw builtins.  */\n+static rtx\n+nds32_expand_scw_builtin (enum insn_code icode, tree exp, rtx target)\n+{\n+  /* SCW address format is [$ra + $rb], but input arguments not enough,\n+     so we need another temp register as $rb.\n+     Generating assembly code:\n+\tmovi $temp, 0\n+\tscw  $rt, [$ra + $temp] */\n+  rtx pat;\n+  rtx op0 = nds32_read_argument (exp, 0);\n+  rtx op1 = nds32_read_argument (exp, 1);\n+  rtx addr_helper = gen_reg_rtx (insn_data[icode].operand[1].mode);\n+\n+  target = nds32_legitimize_target (icode, target);\n+  op0 = nds32_legitimize_argument (icode, 1, op0);\n+  op1 = nds32_legitimize_argument (icode, 2, op1);\n+\n+  /* Emit and return the new instruction. */\n+  pat = GEN_FCN (icode) (target, op0, addr_helper, target);\n+\n+  if (!pat)\n+    return NULL_RTX;\n+\n+  emit_move_insn (addr_helper, GEN_INT (0));\n+  emit_move_insn (target, op1);\n+  emit_insn (pat);\n+  return target;\n+}\n+\n struct builtin_description\n {\n   const enum insn_code icode;\n@@ -313,6 +415,8 @@ static struct builtin_description bdesc_2arg[] =\n   NDS32_BUILTIN(unspec_ffb, \"ffb\", FFB)\n   NDS32_BUILTIN(unspec_ffmism, \"ffmsim\", FFMISM)\n   NDS32_BUILTIN(unspec_flmism, \"flmism\", FLMISM)\n+  NDS32_NO_TARGET_BUILTIN(mtsr_isb, \"mtsr_isb\", MTSR_ISB)\n+  NDS32_NO_TARGET_BUILTIN(mtsr_dsb, \"mtsr_dsb\", MTSR_DSB)\n   NDS32_NO_TARGET_BUILTIN(unspec_volatile_mtsr, \"mtsr\", MTSR)\n   NDS32_NO_TARGET_BUILTIN(unspec_volatile_mtusr, \"mtusr\", MTUSR)\n   NDS32_NO_TARGET_BUILTIN(unaligned_store_hw, \"unaligned_store_hw\", UASTORE_HW)\n@@ -321,6 +425,20 @@ static struct builtin_description bdesc_2arg[] =\n \n };\n \n+/* Intrinsics that load a value.  */\n+static struct builtin_description bdesc_load[] =\n+{\n+  NDS32_BUILTIN(unspec_volatile_llw, \"llw\", LLW)\n+  NDS32_BUILTIN(unspec_lwup, \"lwup\", LWUP)\n+  NDS32_BUILTIN(unspec_lbup, \"lbup\", LBUP)\n+};\n+\n+/* Intrinsics that store a value.  */\n+static struct builtin_description bdesc_store[] =\n+{\n+  NDS32_BUILTIN(unspec_swup, \"swup\", SWUP)\n+  NDS32_BUILTIN(unspec_sbup, \"sbup\", SBUP)\n+};\n \n static struct builtin_description bdesc_cctl[] =\n {\n@@ -375,6 +493,21 @@ nds32_expand_builtin_impl (tree exp,\n \t  return NULL_RTX;\n \t}\n       break;\n+\n+    /* Load and Store  */\n+    case NDS32_BUILTIN_LLW:\n+    case NDS32_BUILTIN_LWUP:\n+    case NDS32_BUILTIN_LBUP:\n+    case NDS32_BUILTIN_SCW:\n+    case NDS32_BUILTIN_SWUP:\n+    case NDS32_BUILTIN_SBUP:\n+      if (TARGET_ISA_V3M)\n+\t{\n+\t  error (\"this builtin function not support \"\n+\t\t \"on the v3m toolchain\");\n+\t  return NULL_RTX;\n+\t}\n+      break;\n     /* String Extension  */\n     case NDS32_BUILTIN_FFB:\n     case NDS32_BUILTIN_FFMISM:\n@@ -396,6 +529,15 @@ nds32_expand_builtin_impl (tree exp,\n     case NDS32_BUILTIN_ISB:\n       emit_insn (gen_unspec_volatile_isb ());\n       return target;\n+    case NDS32_BUILTIN_DSB:\n+      emit_insn (gen_unspec_dsb ());\n+      return target;\n+    case NDS32_BUILTIN_MSYNC_ALL:\n+      emit_insn (gen_unspec_msync_all ());\n+      return target;\n+    case NDS32_BUILTIN_MSYNC_STORE:\n+      emit_insn (gen_unspec_msync_store ());\n+      return target;\n     case NDS32_BUILTIN_SETGIE_EN:\n       emit_insn (gen_unspec_volatile_setgie_en ());\n       return target;\n@@ -410,6 +552,9 @@ nds32_expand_builtin_impl (tree exp,\n     case NDS32_BUILTIN_CCTL_L1D_WBALL_ONE_LVL:\n       emit_insn (gen_cctl_l1d_wball_one_lvl());\n       return target;\n+    case NDS32_BUILTIN_SCW:\n+      return nds32_expand_scw_builtin (CODE_FOR_unspec_volatile_scw,\n+\t\t\t\t       exp, target);\n       return target;\n     default:\n       break;\n@@ -433,6 +578,14 @@ nds32_expand_builtin_impl (tree exp,\n     if (d->code == fcode)\n       return nds32_expand_binop_builtin (d->icode, exp, target, d->return_p);\n \n+  for (i = 0, d = bdesc_load; i < ARRAY_SIZE (bdesc_load); i++, d++)\n+    if (d->code == fcode)\n+      return nds32_expand_builtin_load (d->icode, exp, target);\n+\n+  for (i = 0, d = bdesc_store; i < ARRAY_SIZE (bdesc_store); i++, d++)\n+    if (d->code == fcode)\n+      return nds32_expand_builtin_store (d->icode, exp, target);\n+\n   for (i = 0, d = bdesc_cctl; i < ARRAY_SIZE (bdesc_cctl); i++, d++)\n     if (d->code == fcode)\n       return nds32_expand_cctl_builtin (d->icode, exp, target,\n@@ -492,18 +645,24 @@ nds32_init_builtins_impl (void)\n \t\t\tNDS32_BUILTIN_ ## CODE, BUILT_IN_MD, NULL, NULL_TREE)\n \n   /* Looking for return type and argument can be found in tree.h file.  */\n+  tree ptr_uchar_type_node = build_pointer_type (unsigned_char_type_node);\n   tree ptr_ushort_type_node = build_pointer_type (short_unsigned_type_node);\n   tree ptr_uint_type_node = build_pointer_type (unsigned_type_node);\n   tree ptr_ulong_type_node = build_pointer_type (long_long_unsigned_type_node);\n \n   /* Cache.  */\n   ADD_NDS32_BUILTIN1 (\"isync\", void, ptr_uint, ISYNC);\n   ADD_NDS32_BUILTIN0 (\"isb\", void, ISB);\n+  ADD_NDS32_BUILTIN0 (\"dsb\", void, DSB);\n+  ADD_NDS32_BUILTIN0 (\"msync_all\", void, MSYNC_ALL);\n+  ADD_NDS32_BUILTIN0 (\"msync_store\", void, MSYNC_STORE);\n \n   /* Register Transfer.  */\n   ADD_NDS32_BUILTIN1 (\"mfsr\", unsigned, integer, MFSR);\n   ADD_NDS32_BUILTIN1 (\"mfusr\", unsigned, integer, MFUSR);\n   ADD_NDS32_BUILTIN2 (\"mtsr\", void, unsigned, integer, MTSR);\n+  ADD_NDS32_BUILTIN2 (\"mtsr_isb\", void, unsigned, integer, MTSR_ISB);\n+  ADD_NDS32_BUILTIN2 (\"mtsr_dsb\", void, unsigned, integer, MTSR_DSB);\n   ADD_NDS32_BUILTIN2 (\"mtusr\", void, unsigned, integer, MTUSR);\n \n   /* FPU Register Transfer.  */\n@@ -519,6 +678,14 @@ nds32_init_builtins_impl (void)\n   ADD_NDS32_BUILTIN0 (\"setgie_en\", void, SETGIE_EN);\n   ADD_NDS32_BUILTIN0 (\"setgie_dis\", void, SETGIE_DIS);\n \n+  /* Load and Store  */\n+  ADD_NDS32_BUILTIN1 (\"llw\", unsigned, ptr_uint, LLW);\n+  ADD_NDS32_BUILTIN1 (\"lwup\", unsigned, ptr_uint, LWUP);\n+  ADD_NDS32_BUILTIN1 (\"lbup\", char, ptr_uchar, LBUP);\n+  ADD_NDS32_BUILTIN2 (\"scw\", unsigned, ptr_uint, unsigned, SCW);\n+  ADD_NDS32_BUILTIN2 (\"swup\", void, ptr_uint, unsigned, SWUP);\n+  ADD_NDS32_BUILTIN2 (\"sbup\", void, ptr_uchar, char, SBUP);\n+\n   /* CCTL  */\n   ADD_NDS32_BUILTIN0 (\"cctl_l1d_invalall\", void, CCTL_L1D_INVALALL);\n   ADD_NDS32_BUILTIN0 (\"cctl_l1d_wball_alvl\", void, CCTL_L1D_WBALL_ALVL);"}, {"sha": "5b58fc9229af1bbc4f833d970f4e865968605d2f", "filename": "gcc/config/nds32/nds32-intrinsic.md", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md?ref=154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "patch": "@@ -40,6 +40,26 @@\n    (set_attr \"length\"    \"4\")]\n )\n \n+(define_expand \"mtsr_isb\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(match_operand:SI 1 \"immediate_operand\" \"\"))]\n+  \"\"\n+{\n+  emit_insn (gen_unspec_volatile_mtsr (operands[0], operands[1]));\n+  emit_insn (gen_unspec_volatile_isb());\n+  DONE;\n+})\n+\n+(define_expand \"mtsr_dsb\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(match_operand:SI 1 \"immediate_operand\" \"\"))]\n+  \"\"\n+{\n+  emit_insn (gen_unspec_volatile_mtsr (operands[0], operands[1]));\n+  emit_insn (gen_unspec_dsb());\n+  DONE;\n+})\n+\n (define_insn \"unspec_volatile_mtsr\"\n   [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t(match_operand:SI 1 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_MTSR)]\n@@ -162,6 +182,90 @@\n   [(set_attr \"type\" \"misc\")]\n )\n \n+(define_insn \"unspec_dsb\"\n+  [(unspec_volatile [(const_int 0)] UNSPEC_VOLATILE_DSB)]\n+  \"\"\n+  \"dsb\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_msync\"\n+  [(unspec_volatile [(match_operand:SI 0 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_MSYNC)]\n+  \"\"\n+  \"msync\\t%0\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_msync_all\"\n+  [(unspec_volatile [(const_int 0)] UNSPEC_VOLATILE_MSYNC_ALL)]\n+  \"\"\n+  \"msync\\tall\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_msync_store\"\n+  [(unspec_volatile [(const_int 0)] UNSPEC_VOLATILE_MSYNC_STORE)]\n+  \"\"\n+  \"msync\\tstore\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+;; Load and Store\n+\n+(define_insn \"unspec_volatile_llw\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t\t      (match_operand:SI 2 \"register_operand\" \"r\")))] UNSPEC_VOLATILE_LLW))]\n+  \"\"\n+  \"llw\\t%0, [%1 + %2]\"\n+  [(set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_lwup\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t\t      (match_operand:SI 2 \"register_operand\" \"r\")))] UNSPEC_LWUP))]\n+  \"\"\n+  \"lwup\\t%0, [%1 + %2]\"\n+  [(set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_lbup\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t\t      (match_operand:SI 2 \"register_operand\" \"r\")))] UNSPEC_LBUP))]\n+  \"\"\n+  \"lbup\\t%0, [%1 + %2]\"\n+  [(set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_volatile_scw\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t\t      (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t\t\t     (match_operand:SI 3 \"register_operand\" \"0\")] UNSPEC_VOLATILE_SCW))]\n+  \"\"\n+  \"scw\\t%0, [%1 + %2]\"\n+  [(set_attr \"length\"     \"4\")]\n+)\n+\n+(define_insn \"unspec_swup\"\n+  [(set (mem:SI (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n+\t(unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")] UNSPEC_SWUP))]\n+  \"\"\n+  \"swup\\t%2, [%0 + %1]\"\n+  [(set_attr \"length\"     \"4\")]\n+)\n+\n+(define_insn \"unspec_sbup\"\n+  [(set (mem:SI (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n+\t(unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")] UNSPEC_SBUP))]\n+  \"\"\n+  \"sbup\\t%2, [%0 + %1]\"\n+  [(set_attr \"length\"     \"4\")]\n+)\n \n ;; CCTL\n "}, {"sha": "8f1ac32c704ab777154a374d800818fd34636cc8", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "patch": "@@ -436,9 +436,14 @@ enum nds32_builtins\n {\n   NDS32_BUILTIN_ISYNC,\n   NDS32_BUILTIN_ISB,\n+  NDS32_BUILTIN_DSB,\n+  NDS32_BUILTIN_MSYNC_ALL,\n+  NDS32_BUILTIN_MSYNC_STORE,\n   NDS32_BUILTIN_MFSR,\n   NDS32_BUILTIN_MFUSR,\n   NDS32_BUILTIN_MTSR,\n+  NDS32_BUILTIN_MTSR_ISB,\n+  NDS32_BUILTIN_MTSR_DSB,\n   NDS32_BUILTIN_MTUSR,\n   NDS32_BUILTIN_SETGIE_EN,\n   NDS32_BUILTIN_SETGIE_DIS,\n@@ -452,6 +457,12 @@ enum nds32_builtins\n   NDS32_BUILTIN_FFB,\n   NDS32_BUILTIN_FFMISM,\n   NDS32_BUILTIN_FLMISM,\n+  NDS32_BUILTIN_LLW,\n+  NDS32_BUILTIN_LWUP,\n+  NDS32_BUILTIN_LBUP,\n+  NDS32_BUILTIN_SCW,\n+  NDS32_BUILTIN_SWUP,\n+  NDS32_BUILTIN_SBUP,\n   NDS32_BUILTIN_CCTL_VA_LCK,\n   NDS32_BUILTIN_CCTL_IDX_WBINVAL,\n   NDS32_BUILTIN_CCTL_VA_WBINVAL_L1,"}, {"sha": "4aa299c88326f095f065025b74805536c7ccc596", "filename": "gcc/config/nds32/nds32_intrinsic.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154e3ea6f70cbbea4355c7c7b90a626d08eed3de/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h?ref=154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "patch": "@@ -411,6 +411,20 @@ enum nds32_cctl_idxwrite\n #define NDS32_CCTL_L1I_IX_WWD           __NDS32_CCTL_L1I_IX_WWD__\n /* ------------------------------------------------------------------------ */\n \n+\n+/* Map __nds32__xxx() to __builtin_xxx() functions for compatibility.  */\n+#define __nds32__llw(a) \\\n+  (__builtin_nds32_llw ((a)))\n+#define __nds32__lwup(a) \\\n+  (__builtin_nds32_lwup ((a)))\n+#define __nds32__lbup(a) \\\n+  (__builtin_nds32_lbup ((a)))\n+#define __nds32__scw(a, b) \\\n+  (__builtin_nds32_scw ((a), (b)))\n+#define __nds32__swup(a, b) \\\n+  (__builtin_nds32_swup ((a), (b)))\n+#define __nds32__sbup(a, b) \\\n+  (__builtin_nds32_sbup ((a), (b)))\n #define __nds32__cctlva_lck(subtype, va) \\\n   (__builtin_nds32_cctl_va_lck ((subtype), (va)))\n #define __nds32__cctlidx_wbinval(subtype, idx) \\\n@@ -430,6 +444,14 @@ enum nds32_cctl_idxwrite\n #define __nds32__cctl_l1d_wball_one_lvl() \\\n   (__builtin_nds32_cctl_l1d_wball_one_lvl())\n \n+#define __nds32__dsb() \\\n+  (__builtin_nds32_dsb())\n+#define __nds32__isb() \\\n+  (__builtin_nds32_isb())\n+#define __nds32__msync_store() \\\n+  (__builtin_nds32_msync_store())\n+#define __nds32__msync_all() \\\n+  (__builtin_nds32_msync_all())\n #define __nds32__fcpynsd(a, b) \\\n   (__builtin_nds32_fcpynsd ((a), (b)))\n #define __nds32__fcpynss(a, b) \\"}]}