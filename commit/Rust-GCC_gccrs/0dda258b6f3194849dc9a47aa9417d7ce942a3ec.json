{"sha": "0dda258b6f3194849dc9a47aa9417d7ce942a3ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRkYTI1OGI2ZjMxOTQ4NDlkYzlhNDdhYTk0MTdkN2NlOTQyYTNlYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-06-13T21:01:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-06-13T21:01:44Z"}, "message": "re PR sanitizer/71498 (ubsan bounds checking influenced by surrounding code)\n\n\tPR sanitizer/71498\n\t* c-gimplify.c (ubsan_walk_array_refs_r): Set *walk_subtrees = 0 on\n\tall BIND_EXPRs, and on all BIND_EXPRs recurse also on BIND_EXPR_BODY.\n\n\t* c-c++-common/ubsan/bounds-13.c: New test.\n\nFrom-SVN: r237409", "tree": {"sha": "fae907821c12aec70cd88accb0a2ed6e5aa80ad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fae907821c12aec70cd88accb0a2ed6e5aa80ad2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dda258b6f3194849dc9a47aa9417d7ce942a3ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dda258b6f3194849dc9a47aa9417d7ce942a3ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dda258b6f3194849dc9a47aa9417d7ce942a3ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dda258b6f3194849dc9a47aa9417d7ce942a3ec/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef7cf206b6f9fd93ac41393829f79164b8adad1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7cf206b6f9fd93ac41393829f79164b8adad1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7cf206b6f9fd93ac41393829f79164b8adad1b"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "a3e1fd8958bed3887fc8bcf5b4cc6341517a7491", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dda258b6f3194849dc9a47aa9417d7ce942a3ec/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dda258b6f3194849dc9a47aa9417d7ce942a3ec/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0dda258b6f3194849dc9a47aa9417d7ce942a3ec", "patch": "@@ -1,5 +1,9 @@\n 2016-06-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/71498\n+\t* c-gimplify.c (ubsan_walk_array_refs_r): Set *walk_subtrees = 0 on\n+\tall BIND_EXPRs, and on all BIND_EXPRs recurse also on BIND_EXPR_BODY.\n+\n \tPR preprocessor/71183\n \t* c-ppoutput.c (init_pp_output): Set cb->get_source_date_epoch\n \tto cb_get_source_date_epoch."}, {"sha": "c18b057727cf33afd5b4617f3cd584e0d41cb623", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dda258b6f3194849dc9a47aa9417d7ce942a3ec/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dda258b6f3194849dc9a47aa9417d7ce942a3ec/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=0dda258b6f3194849dc9a47aa9417d7ce942a3ec", "patch": "@@ -67,23 +67,23 @@ ubsan_walk_array_refs_r (tree *tp, int *walk_subtrees, void *data)\n {\n   hash_set<tree> *pset = (hash_set<tree> *) data;\n \n-  /* Since walk_tree doesn't call the callback function on the decls\n-     in BIND_EXPR_VARS, we have to walk them manually.  */\n   if (TREE_CODE (*tp) == BIND_EXPR)\n     {\n+      /* Since walk_tree doesn't call the callback function on the decls\n+\t in BIND_EXPR_VARS, we have to walk them manually, so we can avoid\n+\t instrumenting DECL_INITIAL of TREE_STATIC vars.  */\n+      *walk_subtrees = 0;\n       for (tree decl = BIND_EXPR_VARS (*tp); decl; decl = DECL_CHAIN (decl))\n \t{\n \t  if (TREE_STATIC (decl))\n-\t    {\n-\t      *walk_subtrees = 0;\n-\t      continue;\n-\t    }\n+\t    continue;\n \t  walk_tree (&DECL_INITIAL (decl), ubsan_walk_array_refs_r, pset,\n \t\t     pset);\n \t  walk_tree (&DECL_SIZE (decl), ubsan_walk_array_refs_r, pset, pset);\n \t  walk_tree (&DECL_SIZE_UNIT (decl), ubsan_walk_array_refs_r, pset,\n \t\t     pset);\n \t}\n+      walk_tree (&BIND_EXPR_BODY (*tp), ubsan_walk_array_refs_r, pset, pset);\n     }\n   else if (TREE_CODE (*tp) == ADDR_EXPR\n \t   && TREE_CODE (TREE_OPERAND (*tp, 0)) == ARRAY_REF)"}, {"sha": "45862f3851cec23018fd14a1a6eaa5dc9472399b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dda258b6f3194849dc9a47aa9417d7ce942a3ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dda258b6f3194849dc9a47aa9417d7ce942a3ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0dda258b6f3194849dc9a47aa9417d7ce942a3ec", "patch": "@@ -1,5 +1,8 @@\n 2016-06-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/71498\n+\t* c-c++-common/ubsan/bounds-13.c: New test.\n+\n \tPR preprocessor/71183\n \t* gcc.dg/cpp/source_date_epoch-3.c: New test.\n "}, {"sha": "25b0467ec67be51d2b66bcc2bafee3831f793c86", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-13.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dda258b6f3194849dc9a47aa9417d7ce942a3ec/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dda258b6f3194849dc9a47aa9417d7ce942a3ec/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-13.c?ref=0dda258b6f3194849dc9a47aa9417d7ce942a3ec", "patch": "@@ -0,0 +1,31 @@\n+/* PR sanitizer/71498 */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=bounds -Wno-array-bounds\" } */\n+\n+struct S { int a[100]; int b, c; } s;\n+\n+__attribute__((noinline, noclone)) int\n+foo (int x)\n+{\n+  return s.a[x];\n+}\n+\n+__attribute__((noinline, noclone)) int\n+bar (int x)\n+{\n+  static int *d = &s.a[99];\n+  asm volatile (\"\" : : \"r\" (&d));\n+  return s.a[x];\n+}\n+\n+int\n+main ()\n+{\n+  volatile int a = 0;\n+  a += foo (100);\n+  a += bar (100);\n+  return 0;\n+}\n+\n+/* { dg-output \"index 100 out of bounds for type 'int \\\\\\[100\\\\\\]'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*index 100 out of bounds for type 'int \\\\\\[100\\\\\\]'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}]}