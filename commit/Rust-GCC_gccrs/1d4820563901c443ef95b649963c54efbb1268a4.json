{"sha": "1d4820563901c443ef95b649963c54efbb1268a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0ODIwNTYzOTAxYzQ0M2VmOTViNjQ5OTYzYzU0ZWZiYjEyNjhhNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-06T16:38:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-06T16:38:18Z"}, "message": "i386.h (FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN): New.\n\n\t* config/i386/i386.h (FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN): New.\n\t* function.c (expand_main_function): Implement it.\n\t* doc/tm.texi: Document it.\n\nFrom-SVN: r44664", "tree": {"sha": "036477bc0564edd805a70401d4b824040095475f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/036477bc0564edd805a70401d4b824040095475f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d4820563901c443ef95b649963c54efbb1268a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4820563901c443ef95b649963c54efbb1268a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4820563901c443ef95b649963c54efbb1268a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4820563901c443ef95b649963c54efbb1268a4/comments", "author": null, "committer": null, "parents": [{"sha": "eac69b8a008bd5426d3410d624aa9d88577fd69f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac69b8a008bd5426d3410d624aa9d88577fd69f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eac69b8a008bd5426d3410d624aa9d88577fd69f"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "da7df11b66dfebcb1b65505f7b74ed1a72adf19e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4820563901c443ef95b649963c54efbb1268a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4820563901c443ef95b649963c54efbb1268a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d4820563901c443ef95b649963c54efbb1268a4", "patch": "@@ -1,3 +1,9 @@\n+2001-08-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.h (FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN): New.\n+\t* function.c (expand_main_function): Implement it.\n+\t* doc/tm.texi: Document it.\n+\n 2001-08-06  Stan Shebs  <shebs@apple.com>\n \n \t* doc/install.texi: Document powerpc-*-darwin* details."}, {"sha": "e145cae3e8d24f1842dcd8f81e137c9f0a5e0714", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4820563901c443ef95b649963c54efbb1268a4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4820563901c443ef95b649963c54efbb1268a4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1d4820563901c443ef95b649963c54efbb1268a4", "patch": "@@ -640,6 +640,13 @@ extern int ix86_arch;\n    aligned; the compiler cannot rely on having this alignment.  */\n #define PREFERRED_STACK_BOUNDARY ix86_preferred_stack_boundary\n \n+/* As of July 2001, many runtimes to not align the stack properly when\n+   entering main.  This causes expand_main_function to forcably align\n+   the stack, which results in aligned frames for functions called from\n+   main, though it does nothing for the alignment of main itself.  */\n+#define FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN \\\n+  (ix86_preferred_stack_boundary > STACK_BOUNDARY)\n+\n /* Allocation boundary for the code of a function. */\n #define FUNCTION_BOUNDARY 16\n "}, {"sha": "4bcf82748b520d519664f76701e612858a509552", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4820563901c443ef95b649963c54efbb1268a4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4820563901c443ef95b649963c54efbb1268a4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1d4820563901c443ef95b649963c54efbb1268a4", "patch": "@@ -1028,6 +1028,12 @@ for the desired alignment (measured in bits).  If @code{STACK_BOUNDARY} is\n also defined, this macro must evaluate to a value equal to or larger\n than @code{STACK_BOUNDARY}.\n \n+@findex FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN\n+@item FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN\n+A C expression that evaluates true if @code{PREFERRED_STACK_BOUNDARY} is\n+not guaranteed by the runtime and we should emit code to align the stack\n+at the beginning of @code{main}.\n+\n @cindex @code{PUSH_ROUNDING}, interaction with @code{PREFERRED_STACK_BOUNDARY}\n If @code{PUSH_ROUNDING} is not defined, the stack will always be aligned\n to the specified boundary.  If @code{PUSH_ROUNDING} is defined and specifies"}, {"sha": "0c4d7126292c973685c7e0e9c0984ae32925631b", "filename": "gcc/function.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4820563901c443ef95b649963c54efbb1268a4/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4820563901c443ef95b649963c54efbb1268a4/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1d4820563901c443ef95b649963c54efbb1268a4", "patch": "@@ -6315,10 +6315,35 @@ mark_varargs ()\n void\n expand_main_function ()\n {\n-#if !defined (HAS_INIT_SECTION)\n+#ifdef FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN\n+  if (FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN)\n+    {\n+      int align = PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT;\n+      rtx tmp;\n+\n+      /* Forcably align the stack.  */\n+#ifdef STACK_GROWS_DOWNWARD\n+      tmp = expand_binop (Pmode, and_optab, stack_pointer_rtx,\n+\t\t\t  GEN_INT (-align), stack_pointer_rtx, 1, OPTAB_WIDEN);\n+#else\n+      tmp = expand_binop (Pmode, add_optab, stack_pointer_rtx,\n+\t\t\t  GEN_INT (align - 1), NULL_RTX, 1, OPTAB_WIDEN);\n+      tmp = expand_binop (Pmode, and_optab, tmp, GEN_INT (-align),\n+\t\t\t  stack_pointer_rtx, 1, OPTAB_WIDEN);\n+#endif\n+      if (tmp != stack_pointer_rtx)\n+\temit_move_insn (stack_pointer_rtx, tmp);\n+      \n+      /* Enlist allocate_dynamic_stack_space to pick up the pieces.  */\n+      tmp = force_reg (Pmode, const0_rtx);\n+      allocate_dynamic_stack_space (tmp, NULL_RTX, BIGGEST_ALIGNMENT);\n+    }\n+#endif\n+\n+#ifndef HAS_INIT_SECTION\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, NAME__MAIN), 0,\n \t\t     VOIDmode, 0);\n-#endif /* not HAS_INIT_SECTION */\n+#endif\n }\n \f\n extern struct obstack permanent_obstack;"}]}