{"sha": "7d187fdfdfcf16441c895625f2d947c7a09a0060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QxODdmZGZkZmNmMTY0NDFjODk1NjI1ZjJkOTQ3YzdhMDlhMDA2MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-05-04T07:30:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-05-04T07:30:50Z"}, "message": "re PR tree-optimization/85627 (ICE in update_phi_components in tree-complex.c)\n\n2018-05-04  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/85627\n\t* tree-complex.c (update_complex_assignment): We are always in SSA form.\n\t(expand_complex_div_wide): Likewise.\n\t(expand_complex_operations_1): Likewise.\n\t(expand_complex_libcall): Preserve EH info of the original stmt.\n\t(tree_lower_complex): Handle removed blocks.\n\t* tree.c (build_common_builtin_nodes): Do not set ECF_NOTRHOW\n\ton complex multiplication and division libcall builtins.\n\n\t* g++.dg/torture/pr85627.C: New testcase.\n\nFrom-SVN: r259923", "tree": {"sha": "934fa97e4e8975a4351d77cb5226f668ac1a3a96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/934fa97e4e8975a4351d77cb5226f668ac1a3a96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d187fdfdfcf16441c895625f2d947c7a09a0060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d187fdfdfcf16441c895625f2d947c7a09a0060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d187fdfdfcf16441c895625f2d947c7a09a0060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d187fdfdfcf16441c895625f2d947c7a09a0060/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b5713f7ce06d6f4c0df7410352623573d2506ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b5713f7ce06d6f4c0df7410352623573d2506ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b5713f7ce06d6f4c0df7410352623573d2506ea"}], "stats": {"total": 136, "additions": 92, "deletions": 44}, "files": [{"sha": "6ea25f8a9b530606bbd78a31c6c2677efe57f3a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187fdfdfcf16441c895625f2d947c7a09a0060/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187fdfdfcf16441c895625f2d947c7a09a0060/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d187fdfdfcf16441c895625f2d947c7a09a0060", "patch": "@@ -1,3 +1,14 @@\n+2018-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/85627\n+\t* tree-complex.c (update_complex_assignment): We are always in SSA form.\n+\t(expand_complex_div_wide): Likewise.\n+\t(expand_complex_operations_1): Likewise.\n+\t(expand_complex_libcall): Preserve EH info of the original stmt.\n+\t(tree_lower_complex): Handle removed blocks.\n+\t* tree.c (build_common_builtin_nodes): Do not set ECF_NOTRHOW\n+\ton complex multiplication and division libcall builtins.\n+\n 2018-05-04  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/85574"}, {"sha": "7bf4cad5fa8e77ed6ccb2b9f34fd74c43eaa32c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187fdfdfcf16441c895625f2d947c7a09a0060/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187fdfdfcf16441c895625f2d947c7a09a0060/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d187fdfdfcf16441c895625f2d947c7a09a0060", "patch": "@@ -1,3 +1,8 @@\n+2018-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/85627\n+\t* g++.dg/torture/pr85627.C: New testcase.\n+\n 2018-05-04  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/85574"}, {"sha": "9be9a8cb9e62ff8a3200a0fe16a082a5dbb5d6ad", "filename": "gcc/testsuite/g++.dg/torture/pr85627.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187fdfdfcf16441c895625f2d947c7a09a0060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85627.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187fdfdfcf16441c895625f2d947c7a09a0060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85627.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85627.C?ref=7d187fdfdfcf16441c895625f2d947c7a09a0060", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+/* { dg-additional-options \"-fnon-call-exceptions -fdump-tree-optimized\" } */\n+\n+__complex double\n+foo (__complex double a, __complex double b)\n+{\n+  __complex res = a;\n+  try {\n+      res = a * b;\n+  }\n+  catch (...) {\n+      res = b;\n+  }\n+  return res;\n+}\n+\n+__complex double\n+bar (__complex double a, __complex double b)\n+{\n+  __complex res = a;\n+  try {\n+      res = a / b;\n+  }\n+  catch (...) {\n+      res = b;\n+  }\n+  return res;\n+}\n+\n+/* Verify EH is preserved by complex lowering.  */\n+\n+/* { dg-final { scan-tree-dump-times \"__cxa_begin_catch\" 2 \"optimized\" } } */"}, {"sha": "93f274cd213cdbe5ce552f8c8ccf11eb2a46352f", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 39, "deletions": 42, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187fdfdfcf16441c895625f2d947c7a09a0060/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187fdfdfcf16441c895625f2d947c7a09a0060/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=7d187fdfdfcf16441c895625f2d947c7a09a0060", "patch": "@@ -703,8 +703,7 @@ update_complex_assignment (gimple_stmt_iterator *gsi, tree r, tree i)\n   if (maybe_clean_eh_stmt (stmt))\n     gimple_purge_dead_eh_edges (gimple_bb (stmt));\n \n-  if (gimple_in_ssa_p (cfun))\n-    update_complex_components (gsi, gsi_stmt (*gsi), r, i);\n+  update_complex_components (gsi, gsi_stmt (*gsi), r, i);\n }\n \n \n@@ -1006,37 +1005,44 @@ expand_complex_libcall (gimple_stmt_iterator *gsi, tree type, tree ar, tree ai,\n   else\n     gcc_unreachable ();\n   fn = builtin_decl_explicit (bcode);\n-\n   stmt = gimple_build_call (fn, 4, ar, ai, br, bi);\n \n-\n   if (inplace_p)\n     {\n       gimple *old_stmt = gsi_stmt (*gsi);\n+      gimple_call_set_nothrow (stmt, !stmt_could_throw_p (old_stmt));\n       lhs = gimple_assign_lhs (old_stmt);\n       gimple_call_set_lhs (stmt, lhs);\n-      update_stmt (stmt);\n-      gsi_replace (gsi, stmt, false);\n-\n-      if (maybe_clean_or_replace_eh_stmt (old_stmt, stmt))\n-\tgimple_purge_dead_eh_edges (gsi_bb (*gsi));\n+      gsi_replace (gsi, stmt, true);\n \n       type = TREE_TYPE (type);\n-      update_complex_components (gsi, stmt,\n-\t\t\t\t  build1 (REALPART_EXPR, type, lhs),\n-\t\t\t\t  build1 (IMAGPART_EXPR, type, lhs));\n+      if (stmt_can_throw_internal (stmt))\n+\t{\n+\t  edge_iterator ei;\n+\t  edge e;\n+\t  FOR_EACH_EDGE (e, ei, gimple_bb (stmt)->succs)\n+\t      if (!(e->flags & EDGE_EH))\n+\t\tbreak;\n+\t  basic_block bb = split_edge (e);\n+\t  gimple_stmt_iterator gsi2 = gsi_start_bb (bb);\n+\t  update_complex_components (&gsi2, stmt,\n+\t\t\t\t     build1 (REALPART_EXPR, type, lhs),\n+\t\t\t\t     build1 (IMAGPART_EXPR, type, lhs));\n+\t  return NULL_TREE;\n+\t}\n+      else\n+\tupdate_complex_components (gsi, stmt,\n+\t\t\t\t   build1 (REALPART_EXPR, type, lhs),\n+\t\t\t\t   build1 (IMAGPART_EXPR, type, lhs));\n       SSA_NAME_DEF_STMT (lhs) = stmt;\n       return NULL_TREE;\n     }\n \n-  lhs = create_tmp_var (type);\n+  gimple_call_set_nothrow (stmt, true);\n+  lhs = make_ssa_name (type);\n   gimple_call_set_lhs (stmt, lhs);\n-\n-  lhs = make_ssa_name (lhs, stmt);\n-  gimple_call_set_lhs (stmt, lhs);\n-\n-  update_stmt (stmt);\n   gsi_insert_before (gsi, stmt, GSI_SAME_STMT);\n+\n   return lhs;\n }\n \n@@ -1265,14 +1271,8 @@ expand_complex_div_wide (gimple_stmt_iterator *gsi, tree inner_type,\n       gimple *stmt;\n       tree cond, tmp;\n \n-      tmp = create_tmp_var (boolean_type_node);\n+      tmp = make_ssa_name (boolean_type_node);\n       stmt = gimple_build_assign (tmp, compare);\n-      if (gimple_in_ssa_p (cfun))\n-\t{\n-\t  tmp = make_ssa_name (tmp, stmt);\n-\t  gimple_assign_set_lhs (stmt, tmp);\n-\t}\n-\n       gsi_insert_before (gsi, stmt, GSI_SAME_STMT);\n \n       cond = fold_build2_loc (gimple_location (stmt),\n@@ -1698,25 +1698,20 @@ expand_complex_operations_1 (gimple_stmt_iterator *gsi)\n   else\n     br = bi = NULL_TREE;\n \n-  if (gimple_in_ssa_p (cfun))\n+  al = find_lattice_value (ac);\n+  if (al == UNINITIALIZED)\n+    al = VARYING;\n+\n+  if (TREE_CODE_CLASS (code) == tcc_unary)\n+    bl = UNINITIALIZED;\n+  else if (ac == bc)\n+    bl = al;\n+  else\n     {\n-      al = find_lattice_value (ac);\n-      if (al == UNINITIALIZED)\n-\tal = VARYING;\n-\n-      if (TREE_CODE_CLASS (code) == tcc_unary)\n-\tbl = UNINITIALIZED;\n-      else if (ac == bc)\n-\tbl = al;\n-      else\n-\t{\n-\t  bl = find_lattice_value (bc);\n-\t  if (bl == UNINITIALIZED)\n-\t    bl = VARYING;\n-\t}\n+      bl = find_lattice_value (bc);\n+      if (bl == UNINITIALIZED)\n+\tbl = VARYING;\n     }\n-  else\n-    al = bl = VARYING;\n \n   switch (code)\n     {\n@@ -1788,6 +1783,8 @@ tree_lower_complex (void)\n   for (i = 0; i < n_bbs; i++)\n     {\n       bb = BASIC_BLOCK_FOR_FN (cfun, rpo[i]);\n+      if (!bb)\n+\tcontinue;\n       update_phi_components (bb);\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \texpand_complex_operations_1 (&gsi);"}, {"sha": "77a73b4495e2ddde469c0d95f234348a19830ce1", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187fdfdfcf16441c895625f2d947c7a09a0060/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187fdfdfcf16441c895625f2d947c7a09a0060/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7d187fdfdfcf16441c895625f2d947c7a09a0060", "patch": "@@ -10386,17 +10386,19 @@ build_common_builtin_nodes (void)\n \t  *q = TOLOWER (*p);\n \t*q = '\\0';\n \n+\t/* For -ftrapping-math these should throw from a former\n+\t   -fnon-call-exception stmt.  */\n \tbuilt_in_names[mcode] = concat (prefix, \"mul\", mode_name_buf, \"3\",\n \t\t\t\t\tNULL);\n         local_define_builtin (built_in_names[mcode], ftype, mcode,\n \t\t\t      built_in_names[mcode],\n-\t\t\t      ECF_CONST | ECF_NOTHROW | ECF_LEAF);\n+\t\t\t      ECF_CONST | ECF_LEAF);\n \n \tbuilt_in_names[dcode] = concat (prefix, \"div\", mode_name_buf, \"3\",\n \t\t\t\t\tNULL);\n         local_define_builtin (built_in_names[dcode], ftype, dcode,\n \t\t\t      built_in_names[dcode],\n-\t\t\t      ECF_CONST | ECF_NOTHROW | ECF_LEAF);\n+\t\t\t      ECF_CONST | ECF_LEAF);\n       }\n   }\n "}]}