{"sha": "3130e70dab1e64a7b014391fe941090d5f3b6b7d", "node_id": "C_kwDOANBUbNoAKDMxMzBlNzBkYWIxZTY0YTdiMDE0MzkxZmU5NDEwOTBkNWYzYjZiN2Q", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-11T18:16:54Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-13T15:01:17Z"}, "message": "c++: ICE with VEC_INIT_EXPR and defarg [PR106925]\n\nSince r12-8066, in cxx_eval_vec_init we perform expand_vec_init_expr\nwhile processing the default argument in this test.  At this point\nstart_preparsed_function hasn't yet set current_function_decl.\nexpand_vec_init_expr then leads to maybe_splice_retval_cleanup which\nchecks DECL_CONSTRUCTOR_P (current_function_decl) without checking that\nc_f_d is non-null first.  It seems correct that c_f_d is null here, so\nit seems to me that maybe_splice_retval_cleanup should check c_f_d as\nin the following patch.\n\n\tPR c++/106925\n\ngcc/cp/ChangeLog:\n\n\t* except.cc (maybe_splice_retval_cleanup): Check current_function_decl.\n\tMake the bool const.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/initlist-defarg3.C: New test.", "tree": {"sha": "9ceab2489a743e7fa3e9429bc67e7ca9ee404878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ceab2489a743e7fa3e9429bc67e7ca9ee404878"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3130e70dab1e64a7b014391fe941090d5f3b6b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3130e70dab1e64a7b014391fe941090d5f3b6b7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3130e70dab1e64a7b014391fe941090d5f3b6b7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3130e70dab1e64a7b014391fe941090d5f3b6b7d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5139d18dfb8130876ea59178e8471fb1b34bb80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5139d18dfb8130876ea59178e8471fb1b34bb80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5139d18dfb8130876ea59178e8471fb1b34bb80"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "2677a9b7678660aa58b88c67af7568580e8e77f4", "filename": "gcc/cp/except.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3130e70dab1e64a7b014391fe941090d5f3b6b7d/gcc%2Fcp%2Fexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3130e70dab1e64a7b014391fe941090d5f3b6b7d/gcc%2Fcp%2Fexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.cc?ref=3130e70dab1e64a7b014391fe941090d5f3b6b7d", "patch": "@@ -1307,9 +1307,12 @@ maybe_splice_retval_cleanup (tree compound_stmt)\n {\n   /* If we need a cleanup for the return value, add it in at the same level as\n      pushdecl_outermost_localscope.  And also in try blocks.  */\n-  bool function_body\n+  const bool function_body\n     = (current_binding_level->level_chain\n-       && current_binding_level->level_chain->kind == sk_function_parms);\n+       && current_binding_level->level_chain->kind == sk_function_parms\n+      /* When we're processing a default argument, c_f_d may not have been\n+\t set.  */\n+       && current_function_decl);\n \n   if ((function_body || current_binding_level->kind == sk_try)\n       && !DECL_CONSTRUCTOR_P (current_function_decl)"}, {"sha": "5c3e886b306a522acc5dffc76f24de94da5aba39", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-defarg3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3130e70dab1e64a7b014391fe941090d5f3b6b7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-defarg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3130e70dab1e64a7b014391fe941090d5f3b6b7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-defarg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-defarg3.C?ref=3130e70dab1e64a7b014391fe941090d5f3b6b7d", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/106925\n+// { dg-do compile { target c++11 } }\n+\n+struct Foo;\n+template <int _Nm> struct __array_traits { typedef Foo _Type[_Nm]; };\n+template <int _Nm> struct array {\n+  typename __array_traits<_Nm>::_Type _M_elems;\n+};\n+template <int size> struct MyVector { array<size> data{}; };\n+struct Foo {\n+  float a{0};\n+};\n+void foo(MyVector<1> = MyVector<1>());"}]}