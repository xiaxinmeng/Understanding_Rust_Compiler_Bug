{"sha": "6385a28ffb2146ff1e7c34d9dc6ba8fdc7640d7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4NWEyOGZmYjIxNDZmZjFlN2MzNGQ5ZGM2YmE4ZmRjNzY0MGQ3Zg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-12-28T02:45:37Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-12-28T02:45:37Z"}, "message": "builtins.c (build_function_call_expr): New function.\n\n\t* builtins.c (build_function_call_expr): New function.  Use it\n\teverywhere in lieu of manually constructing a CALL_EXPR.\n\nFrom-SVN: r38504", "tree": {"sha": "437ee1478c023b39f154ddda2b2740862baa10bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/437ee1478c023b39f154ddda2b2740862baa10bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6385a28ffb2146ff1e7c34d9dc6ba8fdc7640d7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6385a28ffb2146ff1e7c34d9dc6ba8fdc7640d7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6385a28ffb2146ff1e7c34d9dc6ba8fdc7640d7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6385a28ffb2146ff1e7c34d9dc6ba8fdc7640d7f/comments", "author": null, "committer": null, "parents": [{"sha": "57ec4709990925b193319480f1dd4d44ec37e903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ec4709990925b193319480f1dd4d44ec37e903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ec4709990925b193319480f1dd4d44ec37e903"}], "stats": {"total": 78, "additions": 37, "deletions": 41}, "files": [{"sha": "378031629fed129a258cd5c43259c7db4537fd20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6385a28ffb2146ff1e7c34d9dc6ba8fdc7640d7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6385a28ffb2146ff1e7c34d9dc6ba8fdc7640d7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6385a28ffb2146ff1e7c34d9dc6ba8fdc7640d7f", "patch": "@@ -1,3 +1,8 @@\n+2000-12-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (build_function_call_expr): New function.  Use it\n+\teverywhere in lieu of manually constructing a CALL_EXPR.\n+\n 2000-12-27  Chandrakala Chavva  <cchavva@redhat.com>\n \n \t* calls.c (store_one_arg):  If parm is passed both in stack and in"}, {"sha": "ddcaeac48f624041b900e3b594a08113ede1f8ec", "filename": "gcc/builtins.c", "status": "modified", "additions": 32, "deletions": 41, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6385a28ffb2146ff1e7c34d9dc6ba8fdc7640d7f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6385a28ffb2146ff1e7c34d9dc6ba8fdc7640d7f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6385a28ffb2146ff1e7c34d9dc6ba8fdc7640d7f", "patch": "@@ -146,6 +146,7 @@ static rtx expand_builtin_fputs\t\tPARAMS ((tree, int));\n static tree stabilize_va_list\t\tPARAMS ((tree, int));\n static rtx expand_builtin_expect\tPARAMS ((tree, rtx));\n static tree fold_builtin_constant_p\tPARAMS ((tree));\n+static tree build_function_call_expr\tPARAMS ((tree, tree));\n \n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what.\n@@ -1598,7 +1599,7 @@ expand_builtin_strstr (arglist, target, mode)\n   else\n     {\n       tree s1 = TREE_VALUE (arglist), s2 = TREE_VALUE (TREE_CHAIN (arglist));\n-      tree call_expr, fn;\n+      tree fn;\n       const char *p1, *p2;\n \n       p2 = c_getstr (s2);\n@@ -1634,12 +1635,8 @@ expand_builtin_strstr (arglist, target, mode)\n       arglist =\n \tbuild_tree_list (NULL_TREE, build_int_2 (p2[0], 0));\n       arglist = tree_cons (NULL_TREE, s1, arglist);\n-      call_expr = build1 (ADDR_EXPR,\n-\t\t\t  build_pointer_type (TREE_TYPE (fn)), fn);\n-      call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n-\t\t\t call_expr, arglist, NULL_TREE);\n-      TREE_SIDE_EFFECTS (call_expr) = 1;\n-      return expand_expr (call_expr, target, mode, EXPAND_NORMAL);\n+      return expand_expr (build_function_call_expr (fn, arglist),\n+\t\t\t  target, mode, EXPAND_NORMAL);\n     }\n }\n \n@@ -1712,7 +1709,7 @@ expand_builtin_strrchr (arglist, target, mode)\n   else\n     {\n       tree s1 = TREE_VALUE (arglist), s2 = TREE_VALUE (TREE_CHAIN (arglist));\n-      tree call_expr, fn;\n+      tree fn;\n       const char *p1;\n \n       if (TREE_CODE (s2) != INTEGER_CST)\n@@ -1746,12 +1743,8 @@ expand_builtin_strrchr (arglist, target, mode)\n \treturn 0;\n \n       /* Transform strrchr(s1, '\\0') to strchr(s1, '\\0').  */\n-      call_expr = build1 (ADDR_EXPR,\n-\t\t\t  build_pointer_type (TREE_TYPE (fn)), fn);\n-      call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n-\t\t\t call_expr, arglist, NULL_TREE);\n-      TREE_SIDE_EFFECTS (call_expr) = 1;\n-      return expand_expr (call_expr, target, mode, EXPAND_NORMAL);\n+      return expand_expr (build_function_call_expr (fn, arglist),\n+\t\t\t  target, mode, EXPAND_NORMAL);\n     }\n }\n \n@@ -1774,7 +1767,7 @@ expand_builtin_strpbrk (arglist, target, mode)\n   else\n     {\n       tree s1 = TREE_VALUE (arglist), s2 = TREE_VALUE (TREE_CHAIN (arglist));\n-      tree call_expr, fn;\n+      tree fn;\n       const char *p1, *p2;\n \n       p2 = c_getstr (s2);\n@@ -1816,12 +1809,8 @@ expand_builtin_strpbrk (arglist, target, mode)\n       arglist =\n \tbuild_tree_list (NULL_TREE, build_int_2 (p2[0], 0));\n       arglist = tree_cons (NULL_TREE, s1, arglist);\n-      call_expr = build1 (ADDR_EXPR,\n-\t\t\t  build_pointer_type (TREE_TYPE (fn)), fn);\n-      call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n-\t\t\t call_expr, arglist, NULL_TREE);\n-      TREE_SIDE_EFFECTS (call_expr) = 1;\n-      return expand_expr (call_expr, target, mode, EXPAND_NORMAL);\n+      return expand_expr (build_function_call_expr (fn, arglist),\n+\t\t\t  target, mode, EXPAND_NORMAL);\n     }\n }\n \n@@ -2558,7 +2547,7 @@ expand_builtin_strncat (arglist, target, mode)\n       if (TREE_CODE (len) == INTEGER_CST && p\n \t  && compare_tree_int (len, strlen (p)) >= 0)\n         {\n-\t  tree call_expr, newarglist = \n+\t  tree newarglist =\n \t    tree_cons (NULL_TREE, dst, build_tree_list (NULL_TREE, src)),\n \t    fn = built_in_decls[BUILT_IN_STRCAT];\n \t  \n@@ -2567,12 +2556,8 @@ expand_builtin_strncat (arglist, target, mode)\n \t  if (!fn)\n \t    return 0;\n \n-\t  call_expr = build1 (ADDR_EXPR,\n-\t\t\t      build_pointer_type (TREE_TYPE (fn)), fn);\n-\t  call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n-\t\t\t     call_expr, newarglist, NULL_TREE);\n-\t  TREE_SIDE_EFFECTS (call_expr) = 1;\n-\t  return expand_expr (call_expr, target, mode, EXPAND_NORMAL);\n+\t  return expand_expr (build_function_call_expr (fn, newarglist),\n+\t\t\t      target, mode, EXPAND_NORMAL);\n \t}\n       return 0;\n     }\n@@ -2667,20 +2652,16 @@ expand_builtin_strcspn (arglist, target, mode)\n       /* If the second argument is \"\", return __builtin_strlen(s1).  */\n       if (p2 && *p2 == '\\0')\n         {\n-\t  tree call_expr, newarglist = build_tree_list (NULL_TREE, s1),\n+\t  tree newarglist = build_tree_list (NULL_TREE, s1),\n \t    fn = built_in_decls[BUILT_IN_STRLEN];\n \t  \n \t  /* If the replacement _DECL isn't initialized, don't do the\n \t     transformation. */\n \t  if (!fn)\n \t    return 0;\n \n-\t  call_expr = build1 (ADDR_EXPR,\n-\t\t\t      build_pointer_type (TREE_TYPE (fn)), fn);\n-\t  call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n-\t\t\t     call_expr, newarglist, NULL_TREE);\n-\t  TREE_SIDE_EFFECTS (call_expr) = 1;\n-\t  return expand_expr (call_expr, target, mode, EXPAND_NORMAL);\n+\t  return expand_expr (build_function_call_expr (fn, newarglist),\n+\t\t\t      target, mode, EXPAND_NORMAL);\n \t}\n       return 0;\n     }\n@@ -3238,7 +3219,7 @@ expand_builtin_fputs (arglist, ignore)\n      tree arglist;\n      int ignore;\n {\n-  tree call_expr, len, fn, fn_fputc = built_in_decls[BUILT_IN_FPUTC],\n+  tree len, fn, fn_fputc = built_in_decls[BUILT_IN_FPUTC],\n     fn_fwrite = built_in_decls[BUILT_IN_FWRITE];\n \n   /* If the return value is used, or the replacement _DECL isn't\n@@ -3305,11 +3286,8 @@ expand_builtin_fputs (arglist, ignore)\n       abort();\n     }\n   \n-  call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n-  call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n-\t\t     call_expr, arglist, NULL_TREE);\n-  TREE_SIDE_EFFECTS (call_expr) = 1;\n-  return expand_expr (call_expr, (ignore ? const0_rtx : NULL_RTX),\n+  return expand_expr (build_function_call_expr (fn, arglist),\n+\t\t      (ignore ? const0_rtx : NULL_RTX),\n \t\t      VOIDmode, EXPAND_NORMAL);\n }\n \n@@ -3788,3 +3766,16 @@ fold_builtin (exp)\n \n   return 0;\n }\n+\n+static tree\n+build_function_call_expr (fn, arglist)\n+     tree fn, arglist;\n+{\n+  tree call_expr;\n+\n+  call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n+  call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n+\t\t     call_expr, arglist);\n+  TREE_SIDE_EFFECTS (call_expr) = 1;\n+  return fold (call_expr);\n+}"}]}