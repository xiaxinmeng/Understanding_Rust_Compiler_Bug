{"sha": "1366ba411aced82547671901bf20655b40e3dded", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM2NmJhNDExYWNlZDgyNTQ3NjcxOTAxYmYyMDY1NWI0MGUzZGRlZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-05-25T21:12:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-05-25T21:12:39Z"}, "message": "targtyps.c (get_float_words_be): Rename into...\n\n\t* gcc-interface/targtyps.c (get_float_words_be): Rename into...\n\t(get_target_float_words_be): ...this.\n\t(get_words_be): Rename into...\n\t(get_target_words_be): ...this.\n\t(get_bytes_be): Rename into...\n\t(get_target_bytes_be): ...this.\n\t(get_bits_be): Rename into...\n\t(get_target_bits_be): ...this.\n\t* gcc-interface/gigi.h (standard_datatypes): Remove ADT_ptr_void_type.\n\t(ptr_void_type_node): Delete.\n\t(get_target_float_size): Likewise.\n\t(get_target_double_size): Likewise.\n\t(get_target_long_double_size): Likewise.\n\t(get_float_words_be): Likewise.\n\t(get_words_be): Likewise.\n\t(get_bytes_be): Likewise.\n\t(get_bits_be): Likewise.\n\t(get_target_float_words_be): Declare.\n\t(get_target_words_be): Likewise.\n\t(get_target_bytes_be): Likewise.\n\t(get_target_bits_be): Likewise.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Replace ptr_void_type_node\n\twith ptr_type_node.\n\t(intrin_return_compatible_p): Likewise.\n\t* gcc-interface/trans.c (gigi): Likewise.\n\t* gcc-interface/utils2.c (maybe_wrap_malloc): Likewise.\n\t(maybe_wrap_free): Likewise.\n\t* gcc-interface/utils.c (maybe_pad_type): Remove superfluous space.\n\t* gcc-interface/misc.c (gnat_init): Do not set ptr_void_type_node.\n\nFrom-SVN: r223656", "tree": {"sha": "cb1e11c2a5c7282a13eaa3e68c26451675e11594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb1e11c2a5c7282a13eaa3e68c26451675e11594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1366ba411aced82547671901bf20655b40e3dded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1366ba411aced82547671901bf20655b40e3dded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1366ba411aced82547671901bf20655b40e3dded", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1366ba411aced82547671901bf20655b40e3dded/comments", "author": null, "committer": null, "parents": [{"sha": "bf44701f955b9901565dc918d039fe38e8a58099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf44701f955b9901565dc918d039fe38e8a58099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf44701f955b9901565dc918d039fe38e8a58099"}], "stats": {"total": 120, "additions": 70, "deletions": 50}, "files": [{"sha": "05b1edf7bd6caa6a5e277af3afbee62e06a3b2e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1366ba411aced82547671901bf20655b40e3dded", "patch": "@@ -1,3 +1,35 @@\n+2015-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/targtyps.c (get_float_words_be): Rename into...\n+\t(get_target_float_words_be): ...this.\n+\t(get_words_be): Rename into...\n+\t(get_target_words_be): ...this.\n+\t(get_bytes_be): Rename into...\n+\t(get_target_bytes_be): ...this.\n+\t(get_bits_be): Rename into...\n+\t(get_target_bits_be): ...this.\n+\t* gcc-interface/gigi.h (standard_datatypes): Remove ADT_ptr_void_type.\n+\t(ptr_void_type_node): Delete.\n+\t(get_target_float_size): Likewise.\n+\t(get_target_double_size): Likewise.\n+\t(get_target_long_double_size): Likewise.\n+\t(get_float_words_be): Likewise.\n+\t(get_words_be): Likewise.\n+\t(get_bytes_be): Likewise.\n+\t(get_bits_be): Likewise.\n+\t(get_target_float_words_be): Declare.\n+\t(get_target_words_be): Likewise.\n+\t(get_target_bytes_be): Likewise.\n+\t(get_target_bits_be): Likewise.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Replace ptr_void_type_node\n+\twith ptr_type_node.\n+\t(intrin_return_compatible_p): Likewise.\n+\t* gcc-interface/trans.c (gigi): Likewise.\n+\t* gcc-interface/utils2.c (maybe_wrap_malloc): Likewise.\n+\t(maybe_wrap_free): Likewise.\n+\t* gcc-interface/utils.c (maybe_pad_type): Remove superfluous space.\n+\t* gcc-interface/misc.c (gnat_init): Do not set ptr_void_type_node.\n+\n 2015-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (elaborate_expression): Take a const string"}, {"sha": "2d803fa5eb81eca75f6591f59a1b90e5c39f1a48", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=1366ba411aced82547671901bf20655b40e3dded", "patch": "@@ -2055,7 +2055,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   a pointer to the array type since we don't have the array type\n \t   yet (it will reference the fat pointer via the bounds).  */\n \ttem\n-\t  = create_field_decl (get_identifier (\"P_ARRAY\"), ptr_void_type_node,\n+\t  = create_field_decl (get_identifier (\"P_ARRAY\"), ptr_type_node,\n \t\t\t       gnu_fat_type, NULL_TREE, NULL_TREE, 0, 0);\n \tDECL_CHAIN (tem)\n \t  = create_field_decl (get_identifier (\"P_BOUNDS\"), gnu_ptr_template,\n@@ -3889,7 +3889,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t/* If expansion is disabled, the equivalent type of a concurrent type\n \t   is absent, so build a dummy pointer type.  */\n \telse if (type_annotate_only && No (gnat_desig_equiv))\n-\t  gnu_type = ptr_void_type_node;\n+\t  gnu_type = ptr_type_node;\n \n \t/* Finally, handle the default case where we can just elaborate our\n \t   designated type.  */\n@@ -4008,7 +4008,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n     case E_Access_Protected_Subprogram_Type:\n     case E_Anonymous_Access_Protected_Subprogram_Type:\n       if (type_annotate_only && No (gnat_equiv_type))\n-\tgnu_type = ptr_void_type_node;\n+\tgnu_type = ptr_type_node;\n       else\n \t{\n \t  /* The run-time representation is the equivalent type.  */\n@@ -4232,7 +4232,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t       we are only annotating types, break circularities here.  */\n \t    if (type_annotate_only\n \t        && is_from_limited_with_of_main (gnat_return_type))\n-\t      gnu_return_type = ptr_void_type_node;\n+\t      gnu_return_type = void_type_node;\n \t    else\n \t      gnu_return_type = gnat_to_gnu_type (gnat_return_type);\n \n@@ -4343,7 +4343,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    if (type_annotate_only\n \t        && is_from_limited_with_of_main (gnat_param_type))\n \t      {\n-\t\tgnu_param_type = ptr_void_type_node;\n+\t\tgnu_param_type = void_type_node;\n \t\tfake_param_type = true;\n \t      }\n \t    else\n@@ -5681,7 +5681,7 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n   if (Convention (gnat_subprog) == Convention_Intrinsic\n       && Present (Interface_Name (gnat_subprog))\n       && Is_Descendent_Of_Address (Etype (gnat_param)))\n-    gnu_param_type = ptr_void_type_node;\n+    gnu_param_type = ptr_type_node;\n \n   /* Arrays are passed as pointers to element type for foreign conventions.  */\n   if (foreign && mech != By_Copy && TREE_CODE (gnu_param_type) == ARRAY_TYPE)\n@@ -8310,7 +8310,7 @@ intrin_return_compatible_p (intrin_binding_t * inb)\n \n   /* If return type is Address (integer type), map it to void *.  */\n   if (Is_Descendent_Of_Address (Etype (inb->gnat_entity)))\n-    ada_return_type = ptr_void_type_node;\n+    ada_return_type = ptr_type_node;\n \n   /* Check return types compatibility otherwise.  Note that this\n      handles void/void as well.  */"}, {"sha": "f817fbc9785f21afefa80f3503467afd3d458034", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=1366ba411aced82547671901bf20655b40e3dded", "patch": "@@ -373,9 +373,6 @@ enum standard_datatypes\n   /* The type of an exception.  */\n   ADT_except_type,\n \n-  /* Type declaration node  <==> typedef void *T */\n-  ADT_ptr_void_type,\n-\n   /* Function type declaration -- void T() */\n   ADT_void_ftype,\n \n@@ -461,7 +458,6 @@ extern GTY(()) tree gnat_raise_decls_ext[(int) LAST_REASON_CODE + 1];\n \n #define longest_float_type_node gnat_std_decls[(int) ADT_longest_float_type]\n #define except_type_node gnat_std_decls[(int) ADT_except_type]\n-#define ptr_void_type_node gnat_std_decls[(int) ADT_ptr_void_type]\n #define void_ftype gnat_std_decls[(int) ADT_void_ftype]\n #define ptr_void_ftype gnat_std_decls[(int) ADT_ptr_void_ftype]\n #define fdesc_type_node gnat_std_decls[(int) ADT_fdesc_type]\n@@ -1035,18 +1031,15 @@ extern Pos get_target_short_size (void);\n extern Pos get_target_int_size (void);\n extern Pos get_target_long_size (void);\n extern Pos get_target_long_long_size (void);\n-extern Pos get_target_float_size (void);\n-extern Pos get_target_double_size (void);\n-extern Pos get_target_long_double_size (void);\n extern Pos get_target_pointer_size (void);\n extern Pos get_target_maximum_default_alignment (void);\n extern Pos get_target_system_allocator_alignment (void);\n extern Pos get_target_maximum_allowed_alignment (void);\n extern Pos get_target_maximum_alignment (void);\n-extern Nat get_float_words_be (void);\n-extern Nat get_words_be (void);\n-extern Nat get_bytes_be (void);\n-extern Nat get_bits_be (void);\n+extern Nat get_target_float_words_be (void);\n+extern Nat get_target_words_be (void);\n+extern Nat get_target_bytes_be (void);\n+extern Nat get_target_bits_be (void);\n extern Nat get_target_strict_alignment (void);\n extern Nat get_target_double_float_alignment (void);\n extern Nat get_target_double_scalar_alignment (void);"}, {"sha": "cdd546668dd97d46850217428a0fe7d7b84c4630", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=1366ba411aced82547671901bf20655b40e3dded", "patch": "@@ -370,8 +370,6 @@ gnat_init (void)\n   sbitsize_one_node = sbitsize_int (1);\n   sbitsize_unit_node = sbitsize_int (BITS_PER_UNIT);\n \n-  ptr_void_type_node = build_pointer_type (void_type_node);\n-\n   /* Show that REFERENCE_TYPEs are internal and should be Pmode.  */\n   internal_reference_types ();\n "}, {"sha": "b9a6e20f78d078b6dc00402a93f39279abd99b81", "filename": "gcc/ada/gcc-interface/targtyps.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c?ref=1366ba411aced82547671901bf20655b40e3dded", "patch": "@@ -23,7 +23,7 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-/* Functions for retrieving target types. See Ada package Get_Targ */\n+/* Functions for retrieving target types.  See Ada package Get_Targ.  */\n \n #include \"config.h\"\n #include \"system.h\"\n@@ -192,25 +192,25 @@ get_target_maximum_alignment (void)\n #endif\n \n Nat\n-get_float_words_be (void)\n+get_target_float_words_be (void)\n {\n   return FLOAT_WORDS_BIG_ENDIAN;\n }\n \n Nat\n-get_words_be (void)\n+get_target_words_be (void)\n {\n   return WORDS_BIG_ENDIAN;\n }\n \n Nat\n-get_bytes_be (void)\n+get_target_bytes_be (void)\n {\n   return BYTES_BIG_ENDIAN;\n }\n \n Nat\n-get_bits_be (void)\n+get_target_bits_be (void)\n {\n   return BITS_BIG_ENDIAN;\n }"}, {"sha": "2cb830461e89ba11b3fa7b0c56045295a07ccb49", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=1366ba411aced82547671901bf20655b40e3dded", "patch": "@@ -414,7 +414,7 @@ gigi (Node_Id gnat_root,\n   ptr_void_ftype = build_pointer_type (void_ftype);\n \n   /* Now declare run-time functions.  */\n-  ftype = build_function_type_list (ptr_void_type_node, sizetype, NULL_TREE);\n+  ftype = build_function_type_list (ptr_type_node, sizetype, NULL_TREE);\n \n   /* malloc is a function declaration tree for a function to allocate\n      memory.  */\n@@ -428,7 +428,7 @@ gigi (Node_Id gnat_root,\n   free_decl\n     = create_subprog_decl (get_identifier (\"__gnat_free\"), NULL_TREE,\n \t\t\t   build_function_type_list (void_type_node,\n-\t\t\t\t\t\t     ptr_void_type_node,\n+\t\t\t\t\t\t     ptr_type_node,\n \t\t\t\t\t\t     NULL_TREE),\n \t\t\t   NULL_TREE, is_disabled, true, true, true, NULL,\n \t\t\t   Empty);\n@@ -494,8 +494,7 @@ gigi (Node_Id gnat_root,\n   DECL_FUNCTION_CODE (update_setjmp_buf_decl) = BUILT_IN_UPDATE_SETJMP_BUF;\n \n   /* Hooks to call when entering/leaving an exception handler.  */\n-  ftype\n-    = build_function_type_list (void_type_node, ptr_void_type_node, NULL_TREE);\n+  ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n \n   begin_handler_decl\n     = create_subprog_decl (get_identifier (\"__gnat_begin_handler\"), NULL_TREE,\n@@ -576,9 +575,7 @@ gigi (Node_Id gnat_root,\n   set_exception_parameter_decl\n     = create_subprog_decl\n       (get_identifier (\"__gnat_set_exception_parameter\"), NULL_TREE,\n-       build_function_type_list (void_type_node,\n-\t\t\t\t ptr_void_type_node,\n-\t\t\t\t ptr_void_type_node,\n+       build_function_type_list (void_type_node, ptr_type_node, ptr_type_node,\n \t\t\t\t NULL_TREE),\n        NULL_TREE, is_disabled, true, true, true, NULL, Empty);\n "}, {"sha": "c20378ab03504201a3e53815d6ae0b2c67d64f49", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=1366ba411aced82547671901bf20655b40e3dded", "patch": "@@ -1351,8 +1351,8 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n     }\n \n   /* Now create the field with the original size.  */\n-  field  = create_field_decl (get_identifier (\"F\"), type, record, orig_size,\n-\t\t\t      bitsize_zero_node, 0, 1);\n+  field = create_field_decl (get_identifier (\"F\"), type, record, orig_size,\n+\t\t\t     bitsize_zero_node, 0, 1);\n   DECL_INTERNAL_P (field) = 1;\n \n   /* Do not emit debug info until after the auxiliary record is built.  */"}, {"sha": "157a18bf29752dbd27e4b6b1283cdebacd2db74c", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=1366ba411aced82547671901bf20655b40e3dded", "patch": "@@ -833,7 +833,7 @@ tree\n build_binary_op (enum tree_code op_code, tree result_type,\n                  tree left_operand, tree right_operand)\n {\n-  tree left_type  = TREE_TYPE (left_operand);\n+  tree left_type = TREE_TYPE (left_operand);\n   tree right_type = TREE_TYPE (right_operand);\n   tree left_base_type = get_base_type (left_type);\n   tree right_base_type = get_base_type (right_type);\n@@ -2289,14 +2289,14 @@ maybe_wrap_malloc (tree data_size, tree data_type, Node_Id gnat_node)\n       /* Then arrange to store the allocator's return value ahead\n \t and return.  */\n       tree storage_ptr_slot_addr\n-\t= build_binary_op (POINTER_PLUS_EXPR, ptr_void_type_node,\n-\t\t\t   convert (ptr_void_type_node, aligning_field_addr),\n+\t= build_binary_op (POINTER_PLUS_EXPR, ptr_type_node,\n+\t\t\t   convert (ptr_type_node, aligning_field_addr),\n \t\t\t   size_int (-(HOST_WIDE_INT) POINTER_SIZE\n \t\t\t\t     / BITS_PER_UNIT));\n \n       tree storage_ptr_slot\n \t= build_unary_op (INDIRECT_REF, NULL_TREE,\n-\t\t\t  convert (build_pointer_type (ptr_void_type_node),\n+\t\t\t  convert (build_pointer_type (ptr_type_node),\n \t\t\t\t   storage_ptr_slot_addr));\n \n       return\n@@ -2331,15 +2331,15 @@ maybe_wrap_free (tree data_ptr, tree data_type)\n \t = (void *)DATA_PTR - (void *)sizeof (void *))  */\n       tree data_front_ptr\n \t= build_binary_op\n-\t  (POINTER_PLUS_EXPR, ptr_void_type_node,\n-\t   convert (ptr_void_type_node, data_ptr),\n+\t  (POINTER_PLUS_EXPR, ptr_type_node,\n+\t   convert (ptr_type_node, data_ptr),\n \t   size_int (-(HOST_WIDE_INT) POINTER_SIZE / BITS_PER_UNIT));\n \n       /* FREE_PTR (void *) = *(void **)DATA_FRONT_PTR  */\n       free_ptr\n \t= build_unary_op\n \t  (INDIRECT_REF, NULL_TREE,\n-\t   convert (build_pointer_type (ptr_void_type_node), data_front_ptr));\n+\t   convert (build_pointer_type (ptr_type_node), data_front_ptr));\n     }\n   else\n     free_ptr = data_ptr;"}, {"sha": "9a47000d2e7c6096ec592ff8f9d570211b8abbaf", "filename": "gcc/ada/get_targ.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fget_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1366ba411aced82547671901bf20655b40e3dded/gcc%2Fada%2Fget_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_targ.adb?ref=1366ba411aced82547671901bf20655b40e3dded", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,12 +23,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Version for use with gcc\n+--  Version for use with GCC\n \n package body Get_Targ is\n \n-   --  Functions returning individual runtime. For the standard (GCC) back\n-   --  end these come from C interface functions (one for each value).\n+   --  Functions returning individual run-time values. For the standard (GCC)\n+   --  back end, these come from C interface functions (one for each value).\n \n    -----------------------\n    -- Get_Bits_Per_Unit --\n@@ -157,7 +157,7 @@ package body Get_Targ is\n    function Get_Float_Words_BE return Nat is\n       function C_Get_Float_Words_BE return Nat;\n       pragma Import (C, C_Get_Float_Words_BE,\n-                        \"get_float_words_be\");\n+                        \"get_target_float_words_be\");\n    begin\n       return C_Get_Float_Words_BE;\n    end Get_Float_Words_BE;\n@@ -169,7 +169,7 @@ package body Get_Targ is\n    function Get_Words_BE return Nat is\n       function C_Get_Words_BE return Nat;\n       pragma Import (C, C_Get_Words_BE,\n-                        \"get_words_be\");\n+                        \"get_target_words_be\");\n    begin\n       return C_Get_Words_BE;\n    end Get_Words_BE;\n@@ -181,7 +181,7 @@ package body Get_Targ is\n    function Get_Bytes_BE return Nat is\n       function C_Get_Bytes_BE return Nat;\n       pragma Import (C, C_Get_Bytes_BE,\n-                        \"get_bytes_be\");\n+                        \"get_target_bytes_be\");\n    begin\n       return C_Get_Bytes_BE;\n    end Get_Bytes_BE;\n@@ -193,7 +193,7 @@ package body Get_Targ is\n    function Get_Bits_BE return Nat is\n       function C_Get_Bits_BE return Nat;\n       pragma Import (C, C_Get_Bits_BE,\n-                        \"get_bits_be\");\n+                        \"get_target_bits_be\");\n    begin\n       return C_Get_Bits_BE;\n    end Get_Bits_BE;\n@@ -306,7 +306,7 @@ package body Get_Targ is\n    -- Width_From_Size --\n    ---------------------\n \n-   function Width_From_Size  (Size : Pos) return Pos is\n+   function Width_From_Size (Size : Pos) return Pos is\n    begin\n       case Size is\n          when  8     => return  4;"}]}