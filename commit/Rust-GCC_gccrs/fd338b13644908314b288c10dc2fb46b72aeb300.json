{"sha": "fd338b13644908314b288c10dc2fb46b72aeb300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQzMzhiMTM2NDQ5MDgzMTRiMjg4YzEwZGMyZmI0NmI3MmFlYjMwMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-11-15T14:55:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-11-15T14:55:52Z"}, "message": "Allow references in constant-expressions.\n\n\t* decl2.c (decl_maybe_constant_var_p): References qualify.\n\t* constexpr.c (non_const_var_error): Handle references.\n\t* init.c (constant_value_1): Always check decl_constant_var_p.\n\t* cp-gimplify.c (cp_fold_maybe_rvalue): Don't fold references.\n\t* error.c (dump_decl_name): Split out from dump_decl.\n\nFrom-SVN: r242422", "tree": {"sha": "4eeb16c9eebc8c51f8f4cf99cc607d14a9907fe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eeb16c9eebc8c51f8f4cf99cc607d14a9907fe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd338b13644908314b288c10dc2fb46b72aeb300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd338b13644908314b288c10dc2fb46b72aeb300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd338b13644908314b288c10dc2fb46b72aeb300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd338b13644908314b288c10dc2fb46b72aeb300/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f05a874c256b90e0c45815b657ef0b9682e26189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05a874c256b90e0c45815b657ef0b9682e26189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f05a874c256b90e0c45815b657ef0b9682e26189"}], "stats": {"total": 85, "additions": 66, "deletions": 19}, "files": [{"sha": "e8de0c9c991466dbf8c38563eed1a0cfa6b55b65", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd338b13644908314b288c10dc2fb46b72aeb300", "patch": "@@ -1,3 +1,11 @@\n+2016-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl2.c (decl_maybe_constant_var_p): References qualify.\n+\t* constexpr.c (non_const_var_error): Handle references.\n+\t* init.c (constant_value_1): Always check decl_constant_var_p.\n+\t* cp-gimplify.c (cp_fold_maybe_rvalue): Don't fold references.\n+\t* error.c (dump_decl_name): Split out from dump_decl.\n+\n 2016-11-14  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (bitfield_p): New."}, {"sha": "40d1e7be7825e63543f5b9be51dd959b94ebd54f", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=fd338b13644908314b288c10dc2fb46b72aeb300", "patch": "@@ -3153,6 +3153,10 @@ non_const_var_error (tree r)\n       else\n \tgcc_unreachable ();\n     }\n+  else if (TREE_CODE (type) == REFERENCE_TYPE)\n+    inform (DECL_SOURCE_LOCATION (r),\n+\t    \"%qD was not initialized with a constant \"\n+\t    \"expression\", r);\n   else\n     {\n       if (cxx_dialect >= cxx11 && !DECL_DECLARED_CONSTEXPR_P (r))"}, {"sha": "5b5c0bef118476dd030a7c834dddb8880e883414", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=fd338b13644908314b288c10dc2fb46b72aeb300", "patch": "@@ -1977,7 +1977,8 @@ cp_fold_maybe_rvalue (tree x, bool rval)\n   while (true)\n     {\n       x = cp_fold (x);\n-      if (rval && DECL_P (x))\n+      if (rval && DECL_P (x)\n+\t  && TREE_CODE (TREE_TYPE (x)) != REFERENCE_TYPE)\n \t{\n \t  tree v = decl_constant_value (x);\n \t  if (v != x && v != error_mark_node)"}, {"sha": "257d21133c153ea17495c5dce9aebb9691f7385f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fd338b13644908314b288c10dc2fb46b72aeb300", "patch": "@@ -4144,6 +4144,9 @@ decl_maybe_constant_var_p (tree decl)\n   if (DECL_HAS_VALUE_EXPR_P (decl))\n     /* A proxy isn't constant.  */\n     return false;\n+  if (TREE_CODE (type) == REFERENCE_TYPE)\n+    /* References can be constant.  */\n+    return true;\n   return (CP_TYPE_CONST_NON_VOLATILE_P (type)\n \t  && INTEGRAL_OR_ENUMERATION_TYPE_P (type));\n }"}, {"sha": "7bf07c341622103b9752955e41d4306fd9cb1410", "filename": "gcc/cp/error.c", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=fd338b13644908314b288c10dc2fb46b72aeb300", "patch": "@@ -1000,6 +1000,37 @@ dump_simple_decl (cxx_pretty_printer *pp, tree t, tree type, int flags)\n     dump_type_suffix (pp, type, flags);\n }\n \n+/* Print an IDENTIFIER_NODE that is the name of a declaration.  */\n+\n+static void\n+dump_decl_name (cxx_pretty_printer *pp, tree t, int flags)\n+{\n+  /* These special cases are duplicated here so that other functions\n+     can feed identifiers to error and get them demangled properly.  */\n+  if (IDENTIFIER_TYPENAME_P (t))\n+    {\n+      pp_cxx_ws_string (pp, \"operator\");\n+      /* Not exactly IDENTIFIER_TYPE_VALUE.  */\n+      dump_type (pp, TREE_TYPE (t), flags);\n+      return;\n+    }\n+  if (dguide_name_p (t))\n+    {\n+      dump_decl (pp, CLASSTYPE_TI_TEMPLATE (TREE_TYPE (t)),\n+\t\t TFF_PLAIN_IDENTIFIER);\n+      return;\n+    }\n+\n+  const char *str = IDENTIFIER_POINTER (t);\n+  if (!strncmp (str, \"_ZGR\", 3))\n+    {\n+      pp_cxx_ws_string (pp, \"<temporary>\");\n+      return;\n+    }\n+\n+  pp_cxx_tree_identifier (pp, t);\n+}\n+\n /* Dump a human readable string for the decl T under control of FLAGS.  */\n \n static void\n@@ -1155,21 +1186,8 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n       gcc_unreachable ();\n       break;\n \n-      /* These special cases are duplicated here so that other functions\n-\t can feed identifiers to error and get them demangled properly.  */\n     case IDENTIFIER_NODE:\n-      if (IDENTIFIER_TYPENAME_P (t))\n-\t{\n-\t  pp_cxx_ws_string (pp, \"operator\");\n-\t  /* Not exactly IDENTIFIER_TYPE_VALUE.  */\n-\t  dump_type (pp, TREE_TYPE (t), flags);\n-\t  break;\n-\t}\n-      else if (dguide_name_p (t))\n-\tdump_decl (pp, CLASSTYPE_TI_TEMPLATE (TREE_TYPE (t)),\n-\t\t   TFF_PLAIN_IDENTIFIER);\n-      else\n-\tpp_cxx_tree_identifier (pp, t);\n+      dump_decl_name (pp, t, flags);\n       break;\n \n     case OVERLOAD:"}, {"sha": "b4b6cdb0a4c6f00076d007990309f44f3d66b069", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=fd338b13644908314b288c10dc2fb46b72aeb300", "patch": "@@ -2078,10 +2078,9 @@ static tree\n constant_value_1 (tree decl, bool strict_p, bool return_aggregate_cst_ok_p)\n {\n   while (TREE_CODE (decl) == CONST_DECL\n-\t || (strict_p\n-\t     ? decl_constant_var_p (decl)\n-\t     : (VAR_P (decl)\n-\t\t&& CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (decl)))))\n+\t || decl_constant_var_p (decl)\n+\t || (!strict_p && VAR_P (decl)\n+\t     && CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (decl))))\n     {\n       tree init;\n       /* If DECL is a static data member in a template"}, {"sha": "925ac4eb2e44953556db1f9ffe27c6dd3575c498", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ref10.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref10.C?ref=fd338b13644908314b288c10dc2fb46b72aeb300", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile { target c++11 } }\n+\n+int &&r = 42;\n+static_assert (r, \"\");\t\t// { dg-error \"temporary\" }\n+// { dg-prune-output \"assert\" }"}, {"sha": "97f88fefc6e8abd50af8c6fbfbc0177900f83882", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ref9.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd338b13644908314b288c10dc2fb46b72aeb300/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref9.C?ref=fd338b13644908314b288c10dc2fb46b72aeb300", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++11 } }\n+\n+int a[2] = { 1, 2 };\n+\n+int main()\n+{\n+  auto &r = a;\n+  static_assert (&r[0] == &a[0], \"\");\n+}"}]}