{"sha": "9378b06e5c414f565fb2eeff32234c1e5d84491a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM3OGIwNmU1YzQxNGY1NjVmYjJlZWZmMzIyMzRjMWU1ZDg0NDkxYQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2014-07-01T03:13:17Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2014-07-01T03:13:17Z"}, "message": "re PR c++/58781 (Unicode strings broken in a strange way)\n\ncp/\n\n2014-06-28  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR c++/58781\n\tPR c++/60249\n\tPR c++/59867\n\t* parser.c (cp_parser_userdef_string_literal()): Take a tree\n\tnot a cp_token*. (cp_parser_string_literal(): Don't hack\n\tthe token stream!\n\n\ntestsuite/\n\n2014-06-28  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR c++/58781\n\tPR c++/60249\n\tPR c++/59867\n\t* testsuite/g++.dg/cpp0x/pr58781.C: New.\n\t* testsuite/g++.dg/cpp0x/pr60249.C: New.\n\t* testsuite/g++.dg/cpp1y/pr59867.C: New.\n\nFrom-SVN: r212186", "tree": {"sha": "936639ab85de8ce1b38079e49a50992c1f725252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/936639ab85de8ce1b38079e49a50992c1f725252"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9378b06e5c414f565fb2eeff32234c1e5d84491a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9378b06e5c414f565fb2eeff32234c1e5d84491a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9378b06e5c414f565fb2eeff32234c1e5d84491a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9378b06e5c414f565fb2eeff32234c1e5d84491a/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bcb66dffabd20f12fd8392820aa7dd00280091e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcb66dffabd20f12fd8392820aa7dd00280091e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bcb66dffabd20f12fd8392820aa7dd00280091e"}], "stats": {"total": 117, "additions": 108, "deletions": 9}, "files": [{"sha": "ce67fcd7aa8e1654d9c43b79f6a309ba839238ab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9378b06e5c414f565fb2eeff32234c1e5d84491a", "patch": "@@ -1,3 +1,12 @@\n+2014-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/58781\n+\tPR c++/60249\n+\tPR c++/59867\n+\t* parser.c (cp_parser_userdef_string_literal()): Take a tree\n+\tnot a cp_token*. (cp_parser_string_literal(): Don't hack\n+\tthe token stream!\n+\n 2014-06-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/61659"}, {"sha": "8ff57c7658e86dd62e31807a0ab063c09e9d4093", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9378b06e5c414f565fb2eeff32234c1e5d84491a", "patch": "@@ -1899,7 +1899,7 @@ static tree cp_parser_string_literal\n static tree cp_parser_userdef_char_literal\n   (cp_parser *);\n static tree cp_parser_userdef_string_literal\n-  (cp_token *);\n+  (tree);\n static tree cp_parser_userdef_numeric_literal\n   (cp_parser *);\n \n@@ -3721,8 +3721,7 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok)\n \t{\n \t  tree literal = build_userdef_literal (suffix_id, value,\n \t\t\t\t\t\tOT_NONE, NULL_TREE);\n-\t  tok->u.value = literal;\n-\t  return cp_parser_userdef_string_literal (tok);\n+\t  value = cp_parser_userdef_string_literal (literal);\n \t}\n     }\n   else\n@@ -3970,9 +3969,8 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n    as arguments.  */\n \n static tree\n-cp_parser_userdef_string_literal (cp_token *token)\n+cp_parser_userdef_string_literal (tree literal)\n {\n-  tree literal = token->u.value;\n   tree suffix_id = USERDEF_LITERAL_SUFFIX_ID (literal);\n   tree name = cp_literal_operator_id (IDENTIFIER_POINTER (suffix_id));\n   tree value = USERDEF_LITERAL_VALUE (literal);\n@@ -23224,10 +23222,17 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n \t    ok = false;\n \t}\n       if (!ok)\n-\terror (\"literal operator template %qD has invalid parameter list.\"\n-\t       \"  Expected non-type template argument pack <char...>\"\n-\t       \" or <typename CharT, CharT...>\",\n-\t       decl);\n+\t{\n+\t  if (cxx_dialect >= cxx1y)\n+\t    error (\"literal operator template %qD has invalid parameter list.\"\n+\t\t   \"  Expected non-type template argument pack <char...>\"\n+\t\t   \" or <typename CharT, CharT...>\",\n+\t\t   decl);\n+\t  else\n+\t    error (\"literal operator template %qD has invalid parameter list.\"\n+\t\t   \"  Expected non-type template argument pack <char...>\",\n+\t\t   decl);\n+\t}\n     }\n   /* Register member declarations.  */\n   if (member_p && !friend_p && decl && !DECL_CLASS_TEMPLATE_P (decl))"}, {"sha": "6c819425f6e64bd13597ceca140be774f3b2c0ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9378b06e5c414f565fb2eeff32234c1e5d84491a", "patch": "@@ -1,3 +1,12 @@\n+2014-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/58781\n+\tPR c++/60249\n+\tPR c++/59867\n+\t* testsuite/g++.dg/cpp0x/pr58781.C: New.\n+\t* testsuite/g++.dg/cpp0x/pr60249.C: New.\n+\t* testsuite/g++.dg/cpp1y/pr59867.C: New.\n+\n 2014-06-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gfortran.dg/round_4.f90: Skip for powerpc*-*-linux* since the"}, {"sha": "58c972f90f370e37685ecc3b89635d2255674439", "filename": "gcc/testsuite/g++.dg/cpp0x/pr58781.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58781.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58781.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58781.C?ref=9378b06e5c414f565fb2eeff32234c1e5d84491a", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/58781\n+// { dg-do compile { target c++11 } }\n+\n+#include <cstddef>\n+\n+int\n+operator\"\"_s(const char32_t *a, size_t b)\n+{\n+  return 0;\n+}\n+\n+int\n+f()\n+{\n+  using a = decltype(U\"\\x1181\"_s);\n+  using b = decltype(U\"\\x8111\"_s);\n+  using c = decltype(U\" \\x1181\"_s);\n+}"}, {"sha": "e650dcb452bd09a96eb8665d32d3eb915e0740e6", "filename": "gcc/testsuite/g++.dg/cpp0x/pr60249.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr60249.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr60249.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr60249.C?ref=9378b06e5c414f565fb2eeff32234c1e5d84491a", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/60249\n+// { dg-do compile { target c++11 } }\n+\n+decltype(\"\"_) x; // { dg-error \"unable to find string literal operator\" }\n+\n+// { dg-error \"invalid type in declaration before\" \"invalid\" { target *-*-* } 4 }"}, {"sha": "0f27a2056fdd20177eda5e24a1d8a7356a953499", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59867.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59867.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9378b06e5c414f565fb2eeff32234c1e5d84491a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59867.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59867.C?ref=9378b06e5c414f565fb2eeff32234c1e5d84491a", "patch": "@@ -0,0 +1,52 @@\n+// PR c++/59867\n+// { dg-do compile { target c++14 } }\n+\n+#include <iostream>\n+using namespace std;\n+\n+// constant\n+template<typename T, T x>\n+  struct meta_value\n+  {\n+    typedef meta_value type;\n+    typedef T value_type;\n+    static const T value = x;\n+  };\n+\n+// array\n+template<typename T, T... data>\n+  struct meta_array\n+  {\n+    typedef meta_array type;\n+    typedef T item_type;\n+  };\n+\n+// static array -> runtime array conversion utility\n+template<typename T>\n+  struct array_gen;\n+\n+template<typename T, T... xs>\n+  struct array_gen<meta_array<T, xs...>>\n+  {\n+    static const T value[sizeof...(xs)];\n+  };\n+\n+template<typename T, T... xs>\n+  const T\n+  array_gen<meta_array<T, xs...>>::value[sizeof...(xs)] = {xs...};\n+\n+// static string\n+template<typename T, T... xs>\n+  constexpr meta_array<T, xs...>\n+  operator\"\"_s()\n+  {\n+    static_assert(sizeof...(xs) == 3, \"What's wrong with you?\");\n+    return meta_array<T, xs...>();\n+  }\n+\n+int\n+main()\n+{\n+  auto a = \"123\"_s;\n+  const char (& xs)[3] = array_gen<decltype(\"123\"_s)>::value;\n+}"}]}