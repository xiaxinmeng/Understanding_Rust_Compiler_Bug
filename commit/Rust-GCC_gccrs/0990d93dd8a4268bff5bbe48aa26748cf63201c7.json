{"sha": "0990d93dd8a4268bff5bbe48aa26748cf63201c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk5MGQ5M2RkOGE0MjY4YmZmNWJiZTQ4YWEyNjc0OGNmNjMyMDFjNw==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-06-07T11:44:15Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-07-16T10:51:42Z"}, "message": "IBM Z: Use @PLT symbols for local functions in 64-bit mode\n\nThis helps with generating code for kernel hotpatches, which contain\nindividual functions and are loaded more than 2G away from vmlinux.\nThis should not create performance regressions for the normal use\ncases, because for local functions ld replaces @PLT calls with direct\ncalls.\n\ngcc/ChangeLog:\n\n\t* config/s390/predicates.md (bras_sym_operand): Accept all\n\tfunctions in 64-bit mode, use UNSPEC_PLT31.\n\t(larl_operand): Use UNSPEC_PLT31.\n\t* config/s390/s390.c (s390_loadrelative_operand_p): Likewise.\n\t(legitimize_pic_address): Likewise.\n\t(s390_emit_tls_call_insn): Mark __tls_get_offset as function,\n\tuse UNSPEC_PLT31.\n\t(s390_delegitimize_address): Use UNSPEC_PLT31.\n\t(s390_output_addr_const_extra): Likewise.\n\t(print_operand): Add @PLT to TLS calls, handle %K.\n\t(s390_function_profiler): Mark __fentry__/_mcount as function,\n\tuse %K, use UNSPEC_PLT31.\n\t(s390_output_mi_thunk): Use only UNSPEC_GOT, use %K.\n\t(s390_emit_call): Use UNSPEC_PLT31.\n\t(s390_emit_tpf_eh_return): Mark __tpf_eh_return as function.\n\t* config/s390/s390.md (UNSPEC_PLT31): Rename from UNSPEC_PLT.\n\t(*movdi_64): Use %K.\n\t(reload_base_64): Likewise.\n\t(*sibcall_brc): Likewise.\n\t(*sibcall_brcl): Likewise.\n\t(*sibcall_value_brc): Likewise.\n\t(*sibcall_value_brcl): Likewise.\n\t(*bras): Likewise.\n\t(*brasl): Likewise.\n\t(*bras_r): Likewise.\n\t(*brasl_r): Likewise.\n\t(*bras_tls): Likewise.\n\t(*brasl_tls): Likewise.\n\t(main_base_64): Likewise.\n\t(reload_base_64): Likewise.\n\t(@split_stack_call<mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/visibility/noPLT.C: Skip on s390x.\n\t* g++.target/s390/mi-thunk.C: New test.\n\t* gcc.target/s390/nodatarel-1.c: Move foostatic to the new\n\ttests.\n\t* gcc.target/s390/pr80080-4.c: Allow @PLT suffix.\n\t* gcc.target/s390/risbg-ll-3.c: Likewise.\n\t* gcc.target/s390/call.h: Common code for the new tests.\n\t* gcc.target/s390/call-z10-pic-nodatarel.c: New test.\n\t* gcc.target/s390/call-z10-pic.c: New test.\n\t* gcc.target/s390/call-z10.c: New test.\n\t* gcc.target/s390/call-z9-pic-nodatarel.c: New test.\n\t* gcc.target/s390/call-z9-pic.c: New test.\n\t* gcc.target/s390/call-z9.c: New test.\n\t* gcc.target/s390/mfentry-m64-pic.c: New test.\n\t* gcc.target/s390/tls.h: Common code for the new TLS tests.\n\t* gcc.target/s390/tls-pic.c: New test.\n\t* gcc.target/s390/tls.c: New test.", "tree": {"sha": "0501bb3f68bbb3c83e743c49a9e5616f4f2a97d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0501bb3f68bbb3c83e743c49a9e5616f4f2a97d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0990d93dd8a4268bff5bbe48aa26748cf63201c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0990d93dd8a4268bff5bbe48aa26748cf63201c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0990d93dd8a4268bff5bbe48aa26748cf63201c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0990d93dd8a4268bff5bbe48aa26748cf63201c7/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df0d7486ec9bca8a77ca106d9fbb60f819dd9cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0d7486ec9bca8a77ca106d9fbb60f819dd9cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0d7486ec9bca8a77ca106d9fbb60f819dd9cec"}], "stats": {"total": 393, "additions": 320, "deletions": 73}, "files": [{"sha": "99c343aa32c5bf5eeb7479f333793f99ce9d0d93", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -101,10 +101,13 @@\n \n (define_special_predicate \"bras_sym_operand\"\n   (ior (and (match_code \"symbol_ref\")\n-\t    (match_test \"!flag_pic || SYMBOL_REF_LOCAL_P (op)\"))\n+\t    (ior (match_test \"!flag_pic\")\n+\t\t (match_test \"SYMBOL_REF_LOCAL_P (op)\")\n+\t\t (and (match_test \"TARGET_64BIT\")\n+\t\t      (match_test \"SYMBOL_REF_FUNCTION_P (op)\"))))\n        (and (match_code \"const\")\n \t    (and (match_test \"GET_CODE (XEXP (op, 0)) == UNSPEC\")\n-\t\t (match_test \"XINT (XEXP (op, 0), 1) == UNSPEC_PLT\")))))\n+\t\t (match_test \"XINT (XEXP (op, 0), 1) == UNSPEC_PLT31\")))))\n \n ;; Return true if OP is a PLUS that is not a legitimate\n ;; operand for the LA instruction.\n@@ -197,7 +200,7 @@\n       && XINT (op, 1) == UNSPEC_GOTENT)\n     return true;\n   if (GET_CODE (op) == UNSPEC\n-      && XINT (op, 1) == UNSPEC_PLT)\n+      && XINT (op, 1) == UNSPEC_PLT31)\n     return true;\n   if (GET_CODE (op) == UNSPEC\n       && XINT (op, 1) == UNSPEC_INDNTPOFF)"}, {"sha": "b1d3b99784de5be41175e13fb757bb23b8e8ba02", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 57, "deletions": 24, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -3291,7 +3291,7 @@ s390_loadrelative_operand_p (rtx addr, rtx *symref, HOST_WIDE_INT *addend)\n   if (GET_CODE (addr) == SYMBOL_REF\n       || (GET_CODE (addr) == UNSPEC\n \t  && (XINT (addr, 1) == UNSPEC_GOTENT\n-\t      || XINT (addr, 1) == UNSPEC_PLT)))\n+\t      || XINT (addr, 1) == UNSPEC_PLT31)))\n     {\n       if (symref)\n \t*symref = addr;\n@@ -4964,7 +4964,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n        || (SYMBOL_REF_P (addr) && s390_rel_address_ok_p (addr))\n        || (GET_CODE (addr) == UNSPEC &&\n \t   (XINT (addr, 1) == UNSPEC_GOTENT\n-\t    || XINT (addr, 1) == UNSPEC_PLT)))\n+\t    || XINT (addr, 1) == UNSPEC_PLT31)))\n       && GET_CODE (addend) == CONST_INT)\n     {\n       /* This can be locally addressed.  */\n@@ -5125,7 +5125,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n \n \t  /* For @PLT larl is used.  This is handled like local\n \t     symbol refs.  */\n-\tcase UNSPEC_PLT:\n+\tcase UNSPEC_PLT31:\n \t  gcc_unreachable ();\n \t  break;\n \n@@ -5191,7 +5191,10 @@ s390_emit_tls_call_insn (rtx result_reg, rtx tls_call)\n     emit_insn (s390_load_got ());\n \n   if (!s390_tls_symbol)\n-    s390_tls_symbol = gen_rtx_SYMBOL_REF (Pmode, \"__tls_get_offset\");\n+    {\n+      s390_tls_symbol = gen_rtx_SYMBOL_REF (Pmode, \"__tls_get_offset\");\n+      SYMBOL_REF_FLAGS (s390_tls_symbol) |= SYMBOL_FLAG_FUNCTION;\n+    }\n \n   insn = s390_emit_call (s390_tls_symbol, tls_call, result_reg,\n \t\t\t gen_rtx_REG (Pmode, RETURN_REGNUM));\n@@ -7596,7 +7599,7 @@ s390_delegitimize_address (rtx orig_x)\n       y = XEXP (x, 0);\n       if (GET_CODE (y) == UNSPEC\n \t  && (XINT (y, 1) == UNSPEC_GOTENT\n-\t      || XINT (y, 1) == UNSPEC_PLT))\n+\t      || XINT (y, 1) == UNSPEC_PLT31))\n \ty = XVECEXP (y, 0, 0);\n       else\n \treturn orig_x;\n@@ -7849,7 +7852,7 @@ s390_output_addr_const_extra (FILE *file, rtx x)\n \toutput_addr_const (file, XVECEXP (x, 0, 0));\n \tfprintf (file, \"@GOTOFF\");\n \treturn true;\n-      case UNSPEC_PLT:\n+      case UNSPEC_PLT31:\n \toutput_addr_const (file, XVECEXP (x, 0, 0));\n \tfprintf (file, \"@PLT\");\n \treturn true;\n@@ -7943,6 +7946,7 @@ print_operand_address (FILE *file, rtx addr)\n     'E': print opcode suffix for branch on index instruction.\n     'G': print the size of the operand in bytes.\n     'J': print tls_load/tls_gdcall/tls_ldcall suffix\n+    'K': print @PLT suffix for call targets and load address values.\n     'M': print the second word of a TImode operand.\n     'N': print the second word of a DImode operand.\n     'O': print only the displacement of a memory reference or address.\n@@ -8129,6 +8133,29 @@ print_operand (FILE *file, rtx x, int code)\n     case 'Y':\n       print_shift_count_operand (file, x);\n       return;\n+\n+    case 'K':\n+      /* Append @PLT to both local and non-local symbols in order to support\n+\t Linux Kernel livepatching: patches contain individual functions and\n+\t are loaded further than 2G away from vmlinux, and therefore they must\n+\t call even static functions via PLT.  ld will optimize @PLT away for\n+\t normal code, and keep it for patches.\n+\n+\t Do not indiscriminately add @PLT in 31-bit mode due to the %r12\n+\t restriction, use UNSPEC_PLT31 instead.\n+\n+\t @PLT only makes sense for functions, data is taken care of by\n+\t -mno-pic-data-is-text-relative.\n+\n+\t Adding @PLT interferes with handling of weak symbols in non-PIC code,\n+\t since their addresses are loaded with larl, which then always produces\n+\t a non-NULL result, so skip them here as well.  */\n+      if (TARGET_64BIT\n+\t  && GET_CODE (x) == SYMBOL_REF\n+\t  && SYMBOL_REF_FUNCTION_P (x)\n+\t  && !(SYMBOL_REF_WEAK (x) && !flag_pic))\n+\tfprintf (file, \"@PLT\");\n+      return;\n     }\n \n   switch (GET_CODE (x))\n@@ -13125,9 +13152,10 @@ s390_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n   op[3] = GEN_INT (UNITS_PER_LONG);\n \n   op[2] = gen_rtx_SYMBOL_REF (Pmode, flag_fentry ? \"__fentry__\" : \"_mcount\");\n-  if (flag_pic)\n+  SYMBOL_REF_FLAGS (op[2]) |= SYMBOL_FLAG_FUNCTION;\n+  if (flag_pic && !TARGET_64BIT)\n     {\n-      op[2] = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op[2]), UNSPEC_PLT);\n+      op[2] = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op[2]), UNSPEC_PLT31);\n       op[2] = gen_rtx_CONST (Pmode, op[2]);\n     }\n \n@@ -13142,7 +13170,7 @@ s390_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n \twarning (OPT_Wcannot_profile, \"nested functions cannot be profiled \"\n \t\t \"with %<-mfentry%> on s390\");\n       else\n-\toutput_asm_insn (\"brasl\\t0,%2\", op);\n+\toutput_asm_insn (\"brasl\\t0,%2%K2\", op);\n     }\n   else if (TARGET_64BIT)\n     {\n@@ -13154,7 +13182,7 @@ s390_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n \t  output_asm_insn (\"stg\\t%0,%1\", op);\n \t  if (flag_dwarf2_cfi_asm)\n \t    output_asm_insn (\".cfi_rel_offset\\t%0,%3\", op);\n-\t  output_asm_insn (\"brasl\\t%0,%2\", op);\n+\t  output_asm_insn (\"brasl\\t%0,%2%K2\", op);\n \t  output_asm_insn (\"lg\\t%0,%1\", op);\n \t  if (flag_dwarf2_cfi_asm)\n \t    output_asm_insn (\".cfi_restore\\t%0\", op);\n@@ -13170,7 +13198,7 @@ s390_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n \t  output_asm_insn (\"st\\t%0,%1\", op);\n \t  if (flag_dwarf2_cfi_asm)\n \t    output_asm_insn (\".cfi_rel_offset\\t%0,%3\", op);\n-\t  output_asm_insn (\"brasl\\t%0,%2\", op);\n+\t  output_asm_insn (\"brasl\\t%0,%2%K2\", op);\n \t  output_asm_insn (\"l\\t%0,%1\", op);\n \t  if (flag_dwarf2_cfi_asm)\n \t    output_asm_insn (\".cfi_restore\\t%0\", op);\n@@ -13246,9 +13274,11 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   if (flag_pic && !SYMBOL_REF_LOCAL_P (op[0]))\n     {\n       nonlocal = 1;\n-      op[0] = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op[0]),\n-\t\t\t      TARGET_64BIT ? UNSPEC_PLT : UNSPEC_GOT);\n-      op[0] = gen_rtx_CONST (Pmode, op[0]);\n+      if (!TARGET_64BIT)\n+\t{\n+\t  op[0] = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op[0]), UNSPEC_GOT);\n+\t  op[0] = gen_rtx_CONST (Pmode, op[0]);\n+\t}\n     }\n \n   /* Operand 1 is the 'this' pointer.  */\n@@ -13338,7 +13368,7 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t}\n \n       /* Jump to target.  */\n-      output_asm_insn (\"jg\\t%0\", op);\n+      output_asm_insn (\"jg\\t%0%K0\", op);\n \n       /* Output literal pool if required.  */\n       if (op[5])\n@@ -13729,7 +13759,7 @@ rtx_insn *\n s390_emit_call (rtx addr_location, rtx tls_call, rtx result_reg,\n \t\trtx retaddr_reg)\n {\n-  bool plt_call = false;\n+  bool plt31_call_p = false;\n   rtx_insn *insn;\n   rtx vec[4] = { NULL_RTX };\n   int elts = 0;\n@@ -13744,15 +13774,15 @@ s390_emit_call (rtx addr_location, rtx tls_call, rtx result_reg,\n     {\n       /* When calling a global routine in PIC mode, we must\n \t replace the symbol itself with the PLT stub.  */\n-      if (flag_pic && !SYMBOL_REF_LOCAL_P (addr_location))\n+      if (flag_pic && !SYMBOL_REF_LOCAL_P (addr_location) && !TARGET_64BIT)\n \t{\n-\t  if (TARGET_64BIT || retaddr_reg != NULL_RTX)\n+\t  if (retaddr_reg != NULL_RTX)\n \t    {\n \t      addr_location = gen_rtx_UNSPEC (Pmode,\n \t\t\t\t\t      gen_rtvec (1, addr_location),\n-\t\t\t\t\t      UNSPEC_PLT);\n+\t\t\t\t\t      UNSPEC_PLT31);\n \t      addr_location = gen_rtx_CONST (Pmode, addr_location);\n-\t      plt_call = true;\n+\t      plt31_call_p = true;\n \t    }\n \t  else\n \t    /* For -fpic code the PLT entries might use r12 which is\n@@ -13773,15 +13803,15 @@ s390_emit_call (rtx addr_location, rtx tls_call, rtx result_reg,\n      register 1.  */\n   if (retaddr_reg == NULL_RTX\n       && GET_CODE (addr_location) != SYMBOL_REF\n-      && !plt_call)\n+      && !plt31_call_p)\n     {\n       emit_move_insn (gen_rtx_REG (Pmode, SIBCALL_REGNUM), addr_location);\n       addr_location = gen_rtx_REG (Pmode, SIBCALL_REGNUM);\n     }\n \n   if (TARGET_INDIRECT_BRANCH_NOBP_CALL\n       && GET_CODE (addr_location) != SYMBOL_REF\n-      && !plt_call)\n+      && !plt31_call_p)\n     {\n       /* Indirect branch thunks require the target to be a single GPR.  */\n       addr_location = force_reg (Pmode, addr_location);\n@@ -13833,7 +13863,7 @@ s390_emit_call (rtx addr_location, rtx tls_call, rtx result_reg,\n   insn = emit_call_insn (*call);\n \n   /* 31-bit PLT stubs and tls calls use the GOT register implicitly.  */\n-  if ((!TARGET_64BIT && plt_call) || tls_call != NULL_RTX)\n+  if (plt31_call_p || tls_call != NULL_RTX)\n     {\n       /* s390_function_ok_for_sibcall should\n \t have denied sibcalls in this case.  */\n@@ -13889,7 +13919,10 @@ s390_emit_tpf_eh_return (rtx target)\n   rtx reg, orig_ra;\n \n   if (!s390_tpf_eh_return_symbol)\n-    s390_tpf_eh_return_symbol = gen_rtx_SYMBOL_REF (Pmode, \"__tpf_eh_return\");\n+    {\n+      s390_tpf_eh_return_symbol = gen_rtx_SYMBOL_REF (Pmode, \"__tpf_eh_return\");\n+      SYMBOL_REF_FLAGS (s390_tpf_eh_return_symbol) |= SYMBOL_FLAG_FUNCTION;\n+    }\n \n   reg = gen_rtx_REG (Pmode, 2);\n   orig_ra = gen_rtx_REG (Pmode, 3);"}, {"sha": "8ad21b0f4f70080b54a47cfd4663bd4d632bdcbf", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -79,7 +79,7 @@\n    UNSPEC_GOTENT\n    UNSPEC_GOT\n    UNSPEC_GOTOFF\n-   UNSPEC_PLT\n+   UNSPEC_PLT31\n    UNSPEC_PLTOFF\n \n    ; Literal pool\n@@ -1906,7 +1906,7 @@\n    vlgvg\\t%0,%v1,0\n    vleg\\t%v0,%1,0\n    vsteg\\t%v1,%0,0\n-   larl\\t%0,%1\"\n+   larl\\t%0,%1%K1\"\n   [(set_attr \"op_type\" \"RI,RI,RI,RI,RI,RIL,RIL,RIL,RRE,RRE,RRE,RXY,RIL,RRE,RXY,\n                         RXY,RR,RX,RXY,RX,RXY,RIL,SIL,*,*,RS,RS,VRI,VRR,VRS,VRS,\n                         VRX,VRX,RIL\")\n@@ -2180,7 +2180,7 @@\n         (match_operand:SI 1 \"larl_operand\" \"X\"))]\n   \"!TARGET_64BIT\n    && !FP_REG_P (operands[0])\"\n-  \"larl\\t%0,%1\"\n+  \"larl\\t%0,%1%K1\"\n    [(set_attr \"op_type\" \"RIL\")\n     (set_attr \"type\"    \"larl\")\n     (set_attr \"z10prop\" \"z10_fwd_A1\")\n@@ -10373,15 +10373,15 @@\n   [(call (mem:QI (match_operand 0 \"bras_sym_operand\" \"X\"))\n          (match_operand 1 \"const_int_operand\" \"n\"))]\n   \"SIBLING_CALL_P (insn) && TARGET_SMALL_EXEC\"\n-  \"j\\t%0\"\n+  \"j\\t%0%K0\"\n   [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"    \"branch\")])\n \n (define_insn \"*sibcall_brcl\"\n   [(call (mem:QI (match_operand 0 \"bras_sym_operand\" \"X\"))\n          (match_operand 1 \"const_int_operand\" \"n\"))]\n   \"SIBLING_CALL_P (insn)\"\n-  \"jg\\t%0\"\n+  \"jg\\t%0%K0\"\n   [(set_attr \"op_type\" \"RIL\")\n    (set_attr \"type\"    \"branch\")])\n \n@@ -10434,7 +10434,7 @@\n \t(call (mem:QI (match_operand 1 \"bras_sym_operand\" \"X\"))\n \t      (match_operand 2 \"const_int_operand\" \"n\")))]\n   \"SIBLING_CALL_P (insn) && TARGET_SMALL_EXEC\"\n-  \"j\\t%1\"\n+  \"j\\t%1%K1\"\n   [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"    \"branch\")])\n \n@@ -10443,7 +10443,7 @@\n \t(call (mem:QI (match_operand 1 \"bras_sym_operand\" \"X\"))\n \t      (match_operand 2 \"const_int_operand\" \"n\")))]\n   \"SIBLING_CALL_P (insn)\"\n-  \"jg\\t%1\"\n+  \"jg\\t%1%K1\"\n   [(set_attr \"op_type\" \"RIL\")\n    (set_attr \"type\"    \"branch\")])\n \n@@ -10470,7 +10470,7 @@\n   \"!SIBLING_CALL_P (insn)\n    && TARGET_SMALL_EXEC\n    && GET_MODE (operands[2]) == Pmode\"\n-  \"bras\\t%2,%0\"\n+  \"bras\\t%2,%0%K0\"\n   [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"    \"jsr\")\n    (set_attr \"z196prop\" \"z196_cracked\")])\n@@ -10482,7 +10482,7 @@\n   \"!SIBLING_CALL_P (insn)\n \n    && GET_MODE (operands[2]) == Pmode\"\n-  \"brasl\\t%2,%0\"\n+  \"brasl\\t%2,%0%K0\"\n   [(set_attr \"op_type\" \"RIL\")\n    (set_attr \"type\"    \"jsr\")\n    (set_attr \"z196prop\" \"z196_cracked\")\n@@ -10576,7 +10576,7 @@\n   \"!SIBLING_CALL_P (insn)\n    && TARGET_SMALL_EXEC\n    && GET_MODE (operands[3]) == Pmode\"\n-  \"bras\\t%3,%1\"\n+  \"bras\\t%3,%1%K1\"\n   [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"    \"jsr\")\n    (set_attr \"z196prop\" \"z196_cracked\")])\n@@ -10589,7 +10589,7 @@\n   \"!SIBLING_CALL_P (insn)\n \n    && GET_MODE (operands[3]) == Pmode\"\n-  \"brasl\\t%3,%1\"\n+  \"brasl\\t%3,%1%K1\"\n   [(set_attr \"op_type\" \"RIL\")\n    (set_attr \"type\"    \"jsr\")\n    (set_attr \"z196prop\" \"z196_cracked\")\n@@ -10720,7 +10720,7 @@\n   \"!SIBLING_CALL_P (insn)\n    && TARGET_SMALL_EXEC\n    && GET_MODE (operands[3]) == Pmode\"\n-  \"bras\\t%3,%1%J4\"\n+  \"bras\\t%3,%1%K1%J4\"\n   [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"    \"jsr\")\n    (set_attr \"z196prop\" \"z196_cracked\")])\n@@ -10734,7 +10734,7 @@\n   \"!SIBLING_CALL_P (insn)\n \n    && GET_MODE (operands[3]) == Pmode\"\n-  \"brasl\\t%3,%1%J4\"\n+  \"brasl\\t%3,%1%K1%J4\"\n   [(set_attr \"op_type\" \"RIL\")\n    (set_attr \"type\"    \"jsr\")\n    (set_attr \"z196prop\" \"z196_cracked\")\n@@ -11343,7 +11343,7 @@\n   [(set (match_operand 0 \"register_operand\" \"=a\")\n         (unspec [(label_ref (match_operand 1 \"\" \"\"))] UNSPEC_MAIN_BASE))]\n   \"GET_MODE (operands[0]) == Pmode\"\n-  \"larl\\t%0,%1\"\n+  \"larl\\t%0,%1%K1\"\n   [(set_attr \"op_type\" \"RIL\")\n    (set_attr \"type\"    \"larl\")\n    (set_attr \"z10prop\" \"z10_fwd_A1\")\n@@ -11363,7 +11363,7 @@\n   [(set (match_operand 0 \"register_operand\" \"=a\")\n         (unspec [(label_ref (match_operand 1 \"\" \"\"))] UNSPEC_RELOAD_BASE))]\n   \"GET_MODE (operands[0]) == Pmode\"\n-  \"larl\\t%0,%1\"\n+  \"larl\\t%0,%1%K1\"\n   [(set_attr \"op_type\" \"RIL\")\n    (set_attr \"type\"    \"larl\")\n    (set_attr \"z10prop\" \"z10_fwd_A1\")])\n@@ -12220,7 +12220,7 @@\n   \"\"\n {\n   s390_output_split_stack_data (operands[1], operands[2], operands[3], operands[4]);\n-  return \"jg\\t%0\";\n+  return \"jg\\t%0%K0\";\n }\n   [(set_attr \"op_type\" \"RIL\")\n    (set_attr \"type\"  \"branch\")])"}, {"sha": "b888303d56dab23665aa0a36a4eb294129f7cbd6", "filename": "gcc/testsuite/g++.dg/ext/visibility/noPLT.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2FnoPLT.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2FnoPLT.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2FnoPLT.C?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -1,5 +1,5 @@\n /* Test that -fvisibility=hidden prevents PLT. */\n-/* { dg-do compile { target fpic } } */\n+/* { dg-do compile { target { fpic && { ! s390x-*-* } } } } */\n /* { dg-require-visibility \"\" } */\n /* { dg-options \"-fPIC -fvisibility=hidden\" } */\n /* { dg-final { scan-assembler-not \"methodEv@PLT|indirect_symbol.*methodEv\" } } */"}, {"sha": "7c25dc04bba5e22196ff3dd5a8ef458993ff92ed", "filename": "gcc/testsuite/g++.target/s390/mi-thunk.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fmi-thunk.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fmi-thunk.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fs390%2Fmi-thunk.C?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -fPIC\" } */\n+\n+class A {\n+public:\n+  virtual int a (void);\n+};\n+\n+class B {\n+public:\n+  virtual int b (void);\n+};\n+\n+class C : public B, public A {\n+public:\n+  virtual int a (void);\n+};\n+\n+int C::a (void) { return b(); }\n+\n+/* { dg-final { scan-assembler {\\n_ZThn8_N1C1aEv:\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {\\n_ZThn4_N1C1aEv:\\n} { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler {\\n\\tjg\\t.LTHUNK0@PLT\\n} { target lp64 } } } */"}, {"sha": "49984614bc6f718ada64283c41a96ffe13a82575", "filename": "gcc/testsuite/gcc.target/s390/call-z10-pic-nodatarel.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z10-pic-nodatarel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z10-pic-nodatarel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z10-pic-nodatarel.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z10 -mzarch -fPIC -mno-pic-data-is-text-relative\" } */\n+\n+#include \"call.h\"\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foo@PLT\\n} } } */\n+/* { dg-final { scan-assembler {lgrl\\t%r2,foo@GOTENT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {lrl\\t%r2,foo@GOTENT\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic\\n} { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,fooweak@PLT\\n} } } */\n+/* { dg-final { scan-assembler {lgrl\\t%r2,fooweak@GOTENT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {lrl\\t%r2,fooweak@GOTENT\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {foos:\\n\\t.quad\\tfoo\\n\\t.quad\\tfoostatic\\n\\t.quad\\tfooweak\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {foos:\\n\\t.long\\tfoo\\n\\t.long\\tfoostatic\\n\\t.long\\tfooweak\\n} { target { ! lp64 } } } } */"}, {"sha": "210c56cc4cad0a30539948cbc8c4281232306459", "filename": "gcc/testsuite/gcc.target/s390/call-z10-pic.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z10-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z10-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z10-pic.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z10 -mzarch -fPIC\" } */\n+\n+#include \"call.h\"\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foo@PLT\\n} } } */\n+/* { dg-final { scan-assembler {lgrl\\t%r2,foo@GOTENT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {lrl\\t%r2,foo@GOTENT\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic\\n} { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,fooweak@PLT\\n} } } */\n+/* { dg-final { scan-assembler {lgrl\\t%r2,fooweak@GOTENT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {lrl\\t%r2,fooweak@GOTENT\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {foos:\\n\\t.quad\\tfoo\\n\\t.quad\\tfoostatic\\n\\t.quad\\tfooweak\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {foos:\\n\\t.long\\tfoo\\n\\t.long\\tfoostatic\\n\\t.long\\tfooweak\\n} { target { ! lp64 } } } } */"}, {"sha": "2d7dc735df4aa39338b25d89d7179c41935b9c00", "filename": "gcc/testsuite/gcc.target/s390/call-z10.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z10.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z10 -mzarch\" } */\n+\n+#include \"call.h\"\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foo@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foo\\n} { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foo@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foo\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic\\n} { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,fooweak\\n} } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,fooweak\\n} } } */\n+\n+/* { dg-final { scan-assembler {foos:\\n\\t.quad\\tfoo\\n\\t.quad\\tfoostatic\\n\\t.quad\\tfooweak\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {foos:\\n\\t.long\\tfoo\\n\\t.long\\tfoostatic\\n\\t.long\\tfooweak\\n} { target { ! lp64 } } } } */"}, {"sha": "b1ae318d3e99427f6fc254c7847466dbb5833242", "filename": "gcc/testsuite/gcc.target/s390/call-z9-pic-nodatarel.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z9-pic-nodatarel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z9-pic-nodatarel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z9-pic-nodatarel.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z9-ec -fPIC -mno-pic-data-is-text-relative\" } */\n+\n+#include \"call.h\"\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foo@PLT\\n} } } */\n+/* { dg-final { scan-assembler {larl\\t%r\\d+,foo@GOTENT\\n} } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic\\n} { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,fooweak@PLT\\n} } } */\n+/* { dg-final { scan-assembler {larl\\t%r\\d+,fooweak@GOTENT\\n} } } */\n+\n+/* { dg-final { scan-assembler {foos:\\n\\t.quad\\tfoo\\n\\t.quad\\tfoostatic\\n\\t.quad\\tfooweak\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {foos:\\n\\t.long\\tfoo\\n\\t.long\\tfoostatic\\n\\t.long\\tfooweak\\n} { target { ! lp64 } } } } */"}, {"sha": "a89e78d8df8e5a356c2d163ac003b58e633cf0ea", "filename": "gcc/testsuite/gcc.target/s390/call-z9-pic.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z9-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z9-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z9-pic.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z9-ec -fPIC\" } */\n+\n+#include \"call.h\"\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foo@PLT\\n} } } */\n+/* { dg-final { scan-assembler {larl\\t%r\\d+,foo@GOTENT\\n} } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic\\n} { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,fooweak@PLT\\n} } } */\n+/* { dg-final { scan-assembler {larl\\t%r\\d+,fooweak@GOTENT\\n} } } */\n+\n+/* { dg-final { scan-assembler {foos:\\n\\t.quad\\tfoo\\n\\t.quad\\tfoostatic\\n\\t.quad\\tfooweak\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {foos:\\n\\t.long\\tfoo\\n\\t.long\\tfoostatic\\n\\t.long\\tfooweak\\n} { target { ! lp64 } } } } */"}, {"sha": "21d035aecb6b065af2cc7398a41a02b53c91fc4f", "filename": "gcc/testsuite/gcc.target/s390/call-z9.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall-z9.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z9-ec\" } */\n+\n+#include \"call.h\"\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foo@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foo\\n} { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foo@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foo\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,foostatic\\n} { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic@PLT\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,foostatic\\n} { target { ! lp64 } } } } */\n+\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,fooweak\\n} } } */\n+/* { dg-final { scan-assembler {larl\\t%r2,fooweak\\n} } } */\n+\n+/* { dg-final { scan-assembler {foos:\\n\\t.quad\\tfoo\\n\\t.quad\\tfoostatic\\n\\t.quad\\tfooweak\\n} { target lp64 } } } */\n+/* { dg-final { scan-assembler {foos:\\n\\t.long\\tfoo\\n\\t.long\\tfoostatic\\n\\t.long\\tfooweak\\n} { target { ! lp64 } } } } */"}, {"sha": "059a672288739a1e33303e80049b67aa51f440fd", "filename": "gcc/testsuite/gcc.target/s390/call.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fcall.h?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,40 @@\n+/* Common code for testing the function call code generation.  */\n+\n+__attribute__ ((noipa)) void\n+foo (void)\n+{\n+  return;\n+}\n+\n+void *\n+usefoo (void)\n+{\n+  foo ();\n+  return foo;\n+}\n+\n+__attribute__ ((noipa)) static void\n+foostatic (void)\n+{\n+  return;\n+}\n+\n+void *\n+usefoostatic (void)\n+{\n+  foostatic ();\n+  return foostatic;\n+}\n+\n+__attribute__ ((weak)) void fooweak (void);\n+\n+void *\n+usefooweak (void)\n+{\n+  fooweak ();\n+  return fooweak;\n+}\n+\n+__attribute__ ((__used__, section (\".foos\"), aligned (sizeof (void *))))\n+static void\n+*foos[] = { foo, foostatic, fooweak };"}, {"sha": "32d55ce2b75383ecf08e8c8206046d0a7c1a8a49", "filename": "gcc/testsuite/gcc.target/s390/mfentry-m64-pic.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmfentry-m64-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmfentry-m64-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmfentry-m64-pic.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { lp64 } } } */\n+/* { dg-options \"-pg -mfentry -fPIC\" } */\n+\n+void\n+profileme (void)\n+{\n+  /* __fentry__ must be referenced through PLT.  */\n+  /* { dg-final { scan-assembler \"brasl\\t0,__fentry__@PLT\\n\" } } */\n+}"}, {"sha": "02e64c3eddf02e29485c7cb92c9025e0a89aebca", "filename": "gcc/testsuite/gcc.target/s390/nodatarel-1.c", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnodatarel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnodatarel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnodatarel-1.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -15,12 +15,6 @@ foo ()\n   return a;\n }\n \n-static int __attribute__((noinline,noclone))\n-foostatic (void)\n-{\n-  return a;\n-}\n-\n /* Just to make a potentially modified.  */\n \n void\n@@ -29,7 +23,7 @@ bar (int b)\n   a = b;\n }\n \n-/* { dg-final { scan-assembler-times \"\\\\.LANCHOR\\\\d+@GOTENT\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\\\.LANCHOR\\\\d+@GOTENT\" 2 } } */\n \n /* The exrl target is a label_ref which should not be affected at\n    all.  */\n@@ -63,21 +57,3 @@ fooptr ()\n }\n \n /* { dg-final { scan-assembler-times \"foo@GOTENT\" 1 } } */\n-\n-\n-/* A static function can be addressed relatively.  */\n-\n-int\n-callfoostatic ()\n-{\n-  return foostatic ();\n-}\n-\n-void *\n-foostaticptr ()\n-{\n-  return &foostatic;\n-}\n-\n-\n-/* { dg-final { scan-assembler-not \"foostatic@\" } } */"}, {"sha": "3f16a197764eaead1d258d2a544215fccc9bd2dc", "filename": "gcc/testsuite/gcc.target/s390/pr80080-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr80080-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr80080-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr80080-4.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -13,4 +13,4 @@ void foo4(int *mem)\n     }\n }\n \n-/* { dg-final { scan-assembler {(?n)\\n\\tlt\\t.*\\n\\tjne\\t(\\.L\\d+)\\n(.*\\n)*\\tcs\\t.*\\n\\tber\\t%r14\\n\\1:\\n\\tjg\\tbar\\n} } } */\n+/* { dg-final { scan-assembler {(?n)\\n\\tlt\\t.*\\n\\tjne\\t(\\.L\\d+)\\n(.*\\n)*\\tcs\\t.*\\n\\tber\\t%r14\\n\\1:\\n\\tjg\\tbar(@PLT)?\\n} } } */"}, {"sha": "02f6e046eb9d56388c82cf8609f5b7cae7a66989", "filename": "gcc/testsuite/gcc.target/s390/risbg-ll-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-3.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -23,7 +23,7 @@ i64 f1 (i64 v_a, i64 v_b)\n extern i64 f2_foo();\n i64 f2 (i64 v_a, i64 v_b)\n {\n-/* { dg-final { scan-assembler \"f2:\\n\\trisbg\\t%r2,%r3,60,62,0\\n\\tbner\\t%r14\\n\\tjg\\tf2_foo\\n\" { target { lp64 } } } } */\n+/* { dg-final { scan-assembler \"f2:\\n\\trisbg\\t%r2,%r3,60,62,0\\n\\tbner\\t%r14\\n\\tjg\\tf2_foo.*\\n\" { target { lp64 } } } } */\n /* { dg-final { scan-assembler \"f2:\\n\\trisbgn\\t%r3,%r2,0,0\\\\\\+32-1,64-0-32\\n\\trisbg\\t%r3,%r5,60,62,0\" { target { ! lp64 } } } } */\n   i64 v_anda = v_a & -15;\n   i64 v_andb = v_b & 14;\n@@ -37,8 +37,8 @@ i64 f2 (i64 v_a, i64 v_b)\n void f2_bar ();\n void f2_cconly (i64 v_a, i64 v_b)\n {\n-/* { dg-final { scan-assembler \"f2_cconly:\\n\\trisbg\\t%r2,%r3,60,62,0\\n\\tber\\t%r14\\n\\tjg\\tf2_bar\\n\" { target { lp64 } } } } */\n-/* { dg-final { scan-assembler \"f2_cconly:\\n\\trisbgn\\t%r3,%r2,0,0\\\\\\+32-1,64-0-32\\n\\trisbg\\t%r3,%r5,60,62,0\\n\\tber\\t%r14\\n\\tjg\\tf2_bar\\n\" { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler \"f2_cconly:\\n\\trisbg\\t%r2,%r3,60,62,0\\n\\tber\\t%r14\\n\\tjg\\tf2_bar(@PLT)?\\n\" { target { lp64 } } } } */\n+/* { dg-final { scan-assembler \"f2_cconly:\\n\\trisbgn\\t%r3,%r2,0,0\\\\\\+32-1,64-0-32\\n\\trisbg\\t%r3,%r5,60,62,0\\n\\tber\\t%r14\\n\\tjg\\tf2_bar(@PLT)?\\n\" { target { ! lp64 } } } } */\n   if ((v_a & -15) | (v_b & 14))\n     f2_bar();\n }"}, {"sha": "17c5726be4f0a32b510f444d293fac39246f543c", "filename": "gcc/testsuite/gcc.target/s390/tls-pic.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftls-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftls-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftls-pic.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fPIC\" } */\n+\n+#include \"tls.h\"\n+\n+/* foo must use the global dynamic model.\n+   __tls_get_offset must be referenced through PLT.  */\n+\n+/* { dg-final { scan-assembler-times {\\tbrasl\\t%r14,__tls_get_offset@PLT:tls_gdcall:foo\\n} 1 } } */\n+\n+/* foostatic must use the local dynamic model.\n+   __tls_get_offset must be referenced through PLT.  */\n+\n+/* { dg-final { scan-assembler-times {\\tbrasl\\t%r14,__tls_get_offset@PLT:tls_ldcall} 1 } } */"}, {"sha": "3d479d8e48f38a2ab105f76bcda31f8fe6004071", "filename": "gcc/testsuite/gcc.target/s390/tls.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftls.c?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"tls.h\"\n+\n+/* foo must use the initial-exec model, foostatic must use the local-exec\n+   model.  */\n+\n+/* { dg-final { scan-assembler-times {\\tear} 4 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\tear} 2 { target { ! lp64 } } } } */"}, {"sha": "f639bd38c8d74bbe911f0e201f3e6c7afcbcc7ed", "filename": "gcc/testsuite/gcc.target/s390/tls.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0990d93dd8a4268bff5bbe48aa26748cf63201c7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftls.h?ref=0990d93dd8a4268bff5bbe48aa26748cf63201c7", "patch": "@@ -0,0 +1,23 @@\n+/* Common code for testing the TLS code generation.  */\n+\n+__thread int\n+foo;\n+\n+int\n+setfoo (int x)\n+{\n+  int result = foo;\n+  foo = x;\n+  return result;\n+}\n+\n+static __thread int\n+foostatic;\n+\n+int\n+setfoostatic (int x)\n+{\n+  int result = foostatic;\n+  foostatic = x;\n+  return result;\n+}"}]}