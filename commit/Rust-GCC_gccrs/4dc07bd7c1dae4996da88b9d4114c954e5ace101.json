{"sha": "4dc07bd7c1dae4996da88b9d4114c954e5ace101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRjMDdiZDdjMWRhZTQ5OTZkYTg4YjlkNDExNGM5NTRlNWFjZTEwMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "1999-11-16T17:43:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-11-16T17:43:40Z"}, "message": "explow.c (hard_function_value): Add outgoing argument.\n\n        * explow.c (hard_function_value): Add outgoing argument.\n        * expr.h (hard_function_value): Declare it.\n        * calls.c (expand_call, emit_library_call_value): Update callers.\n        * function.c (aggregate_value_p): Ditto.\n        (diddle_return_value): Must look at the outgoing registers\n        on archs with register windows.\n\nFrom-SVN: r30550", "tree": {"sha": "1284fde2a9c3617cfa59b12813b42b4c31d7e35b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1284fde2a9c3617cfa59b12813b42b4c31d7e35b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dc07bd7c1dae4996da88b9d4114c954e5ace101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc07bd7c1dae4996da88b9d4114c954e5ace101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc07bd7c1dae4996da88b9d4114c954e5ace101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc07bd7c1dae4996da88b9d4114c954e5ace101/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95a7b5548cdd92fffb080078fcbef56119410ba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a7b5548cdd92fffb080078fcbef56119410ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95a7b5548cdd92fffb080078fcbef56119410ba5"}], "stats": {"total": 63, "additions": 41, "deletions": 22}, "files": [{"sha": "b03966b282a04d037a9c7a274b33ecdfd68fb5a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc07bd7c1dae4996da88b9d4114c954e5ace101/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc07bd7c1dae4996da88b9d4114c954e5ace101/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dc07bd7c1dae4996da88b9d4114c954e5ace101", "patch": "@@ -1,3 +1,12 @@\n+1999-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* explow.c (hard_function_value): Add outgoing argument.\n+\t* expr.h (hard_function_value): Declare it.\n+\t* calls.c (expand_call, emit_library_call_value): Update callers.\n+\t* function.c (aggregate_value_p): Ditto.\n+\t(diddle_return_value): Must look at the outgoing registers\n+\ton archs with register windows.\n+\n Mon Nov 15 20:46:45 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.c (alpha_build_va_list): Use make_lang_type and\n@@ -35,7 +44,7 @@ Mon Nov 15 15:33:18 1999  Richard Henderson  <rth@cygnus.com>\n \tBased on proposed addition from David Edelsohn.\n \n 1999-11-15  Robert Lipe  <RobertLipe@usa.net>\n-            Bruce Korb  <autogen@linuxbox.com>\n+\t    Bruce Korb  <autogen@linuxbox.com>\n \n \t* fixinc/inclhack.def\n \t(AAB_svr4_replace_byteorder): added.  Takes advantage of GCC features\n@@ -150,7 +159,7 @@ Fri Nov 12 08:54:22 1999  Mark Mitchell  <mark@codesourcery.com>\n Fri Nov 12 08:04:45 1999  Catherine Moore  <clm@cygnus.com>\n \n \t* defaults.h (ASM_OUTPUT_ALTERNATE_LABEL_NAME):  Use\n-        ASM_OUTPUT_LABEL.\n+\tASM_OUTPUT_LABEL.\n \n Fri Nov 12 13:31:54 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n@@ -222,15 +231,15 @@ Wed Nov 10 15:56:16 1999  Jeffrey A Law  (law@cygnus.com)\n \tworklists.  Fix boundary cases. Compute maximal solutions.\n \t(compute_laterin, compute_nearerout): Similarly.\n \n-        * dwarf2out.c (add_AT_location_description): Allow\n-        (mem (plus (pseudo) (...)) too.\n+\t* dwarf2out.c (add_AT_location_description): Allow\n+\t(mem (plus (pseudo) (...)) too.\n \n Wed Nov 10 10:52:42 1999  Tom Tromey  <tromey@cygnus.com>\n \n \t* gcc.c (do_spec_1): Support text between `%u' and `%O'.\n \n Wed Nov 10 12:43:21 1999  Philippe De Muyter  <phdm@macqel.be>\n-                          Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\t                  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cppinit.c: Test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n \n@@ -279,9 +288,9 @@ Wed Nov 10 04:58:09 1999  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n Wed Nov 10 00:02:53 1999  Jeffrey A Law  (law@cygnus.com)\n \n-        * flow.c (compute_flow_dominators): No longer treat basic block 0\n-        or (n_basic_blocks - 1) specially.  Clear the AUX field before\n-        starting computation of doms/pdoms.  Fix initial state for pdoms.\n+\t* flow.c (compute_flow_dominators): No longer treat basic block 0\n+\tor (n_basic_blocks - 1) specially.  Clear the AUX field before\n+\tstarting computation of doms/pdoms.  Fix initial state for pdoms.\n \n Wed Nov 10 03:58:08 1999  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n@@ -445,8 +454,8 @@ Sun Nov  7 20:55:14 1999  Mark Mitchell  <mark@codesourcery.com>\n \t\n Sun Nov  7 19:41:17 1999  Catherine Moore  <clm@cygnus.com>\n \n-        * config/elfos.h (ASM_DECLARE_FUNCTION_NAME): Conditionally define.\n-        (ASM_DECLARE_FUNCTION_SIZE): Conditionally define.\n+\t* config/elfos.h (ASM_DECLARE_FUNCTION_NAME): Conditionally define.\n+\t(ASM_DECLARE_FUNCTION_SIZE): Conditionally define.\n \n Sun Nov  7 10:23:28 1999  Mark P. Mitchell  <mark@codesourcery.com>\n \n@@ -512,9 +521,9 @@ Sat Nov  6 09:52:09 1999  Richard Henderson  <rth@cygnus.com>\n \n Sat Nov  6 07:48:59 1999  Catherine Moore  <clm@cygnus.com>\n \n-        * config/svr4.h (ASM_DECLARE_FUNCTION): Check if already\n-        defined.\n-        (ASM_DECLARE_FUNCTION_SIZE): Likewise.\n+\t* config/svr4.h (ASM_DECLARE_FUNCTION): Check if already\n+\tdefined.\n+\t(ASM_DECLARE_FUNCTION_SIZE): Likewise.\n \n Fri Nov  5 18:33:39 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n "}, {"sha": "48c0d5e09bd34179c44aef1db836a52118236e2d", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc07bd7c1dae4996da88b9d4114c954e5ace101/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc07bd7c1dae4996da88b9d4114c954e5ace101/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=4dc07bd7c1dae4996da88b9d4114c954e5ace101", "patch": "@@ -2211,9 +2211,9 @@ expand_call (exp, target, ignore)\n     {\n       if (pcc_struct_value)\n \tvalreg = hard_function_value (build_pointer_type (TREE_TYPE (exp)),\n-\t\t\t\t      fndecl);\n+\t\t\t\t      fndecl, 0);\n       else\n-\tvalreg = hard_function_value (TREE_TYPE (exp), fndecl);\n+\tvalreg = hard_function_value (TREE_TYPE (exp), fndecl, 0);\n     }\n \n   /* Precompute all register parameters.  It isn't safe to compute anything\n@@ -3138,7 +3138,7 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n #ifdef PCC_STATIC_STRUCT_RETURN\n       rtx pointer_reg\n \t= hard_function_value (build_pointer_type (type_for_mode (outmode, 0)),\n-\t\t\t       0);\n+\t\t\t       0, 0);\n       mem_value = gen_rtx_MEM (outmode, pointer_reg);\n       pcc_struct_value = 1;\n       if (value == 0)"}, {"sha": "437c9352631022249f501c230a1c121a3f2e7984", "filename": "gcc/explow.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc07bd7c1dae4996da88b9d4114c954e5ace101/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc07bd7c1dae4996da88b9d4114c954e5ace101/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=4dc07bd7c1dae4996da88b9d4114c954e5ace101", "patch": "@@ -1541,14 +1541,24 @@ probe_stack_range (first, size)\n    in which a scalar value of data type VALTYPE\n    was returned by a function call to function FUNC.\n    FUNC is a FUNCTION_DECL node if the precise function is known,\n-   otherwise 0.  */\n+   otherwise 0.\n+   OUTGOING is 1 if on a machine with register windows this function\n+   should return the register in which the function will put its result\n+   and 0 otherwise. */\n \n rtx\n-hard_function_value (valtype, func)\n+hard_function_value (valtype, func, outgoing)\n      tree valtype;\n      tree func ATTRIBUTE_UNUSED;\n+     int outgoing ATTRIBUTE_UNUSED;\n {\n-  rtx val = FUNCTION_VALUE (valtype, func);\n+  rtx val;\n+#ifdef FUNCTION_OUTGOING_VALUE\n+  if (outgoing)\n+    val = FUNCTION_OUTGOING_VALUE (valtype, func);\n+  else\n+#endif\n+    val = FUNCTION_VALUE (valtype, func);\n   if (GET_CODE (val) == REG\n       && GET_MODE (val) == BLKmode)\n     {"}, {"sha": "e603d045bb83d02a64fa5e7d7f621c9bf9fea49c", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc07bd7c1dae4996da88b9d4114c954e5ace101/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc07bd7c1dae4996da88b9d4114c954e5ace101/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=4dc07bd7c1dae4996da88b9d4114c954e5ace101", "patch": "@@ -1067,7 +1067,7 @@ extern rtx trampoline_address PROTO((tree));\n \n /* Return an rtx that refers to the value returned by a function\n    in its original home.  This becomes invalid if any more code is emitted.  */\n-extern rtx hard_function_value PROTO((tree, tree));\n+extern rtx hard_function_value PROTO((tree, tree, int));\n \n extern rtx prepare_call_address\tPROTO((rtx, tree, rtx *, int));\n "}, {"sha": "7c491df9158e755544c355c3e1047d871f5241d2", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc07bd7c1dae4996da88b9d4114c954e5ace101/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc07bd7c1dae4996da88b9d4114c954e5ace101/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4dc07bd7c1dae4996da88b9d4114c954e5ace101", "patch": "@@ -3992,7 +3992,7 @@ aggregate_value_p (exp)\n     return 1;\n   /* Make sure we have suitable call-clobbered regs to return\n      the value in; if not, we must return it in memory.  */\n-  reg = hard_function_value (type, 0);\n+  reg = hard_function_value (type, 0, 0);\n \n   /* If we have something other than a REG (e.g. a PARALLEL), then assume\n      it is OK.  */\n@@ -6211,7 +6211,7 @@ diddle_return_value (code)\n \t  /* Use hard_function_value to avoid creating a reference to a BLKmode \n \t     register in the USE/CLOBBER insn.  */\n \t  return_reg = hard_function_value (TREE_TYPE (decl_result),\n-\t\t\t\t\t    current_function_decl);\n+\t\t\t\t\t    current_function_decl, 1);\n \t  REG_FUNCTION_VALUE_P (return_reg) = 1;\n \t  emit_insn (gen_rtx_fmt_e (code, VOIDmode, return_reg));\n \t}"}]}