{"sha": "db84d11edc8b8d0f6edda464532a5d2bf701d88a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI4NGQxMWVkYzhiOGQwZjZlZGRhNDY0NTMyYTVkMmJmNzAxZDg4YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-12-03T07:48:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-03T07:48:58Z"}, "message": "re PR tree-optimization/59362 (Abort in fini_object_sizes)\n\n\tPR tree-optimization/59362\n\t* tree-object-size.c (object_sizes): Change into array of\n\tvec<unsigned HOST_WIDE_INT>.\n\t(compute_builtin_object_size): Check computed bitmap for\n\tnon-NULL instead of object_sizes.  Call safe_grow on object_sizes\n\tvector if new SSA_NAMEs appeared.\n\t(init_object_sizes): Check computed bitmap for non-NULL.\n\tCall safe_grow on object_sizes elements instead of initializing\n\tit with XNEWVEC.\n\t(fini_object_sizes): Call release on object_sizes elements, don't\n\tset it to NULL.\n\n\t* gcc.c-torture/compile/pr59362.c: New test.\n\nFrom-SVN: r205623", "tree": {"sha": "6f36d4e18101a0997e0b5f2847d4bf4a8a9c9d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f36d4e18101a0997e0b5f2847d4bf4a8a9c9d18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db84d11edc8b8d0f6edda464532a5d2bf701d88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db84d11edc8b8d0f6edda464532a5d2bf701d88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db84d11edc8b8d0f6edda464532a5d2bf701d88a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db84d11edc8b8d0f6edda464532a5d2bf701d88a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96ddb7ec9868ac8367a29b3409816f73a8252e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ddb7ec9868ac8367a29b3409816f73a8252e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ddb7ec9868ac8367a29b3409816f73a8252e1c"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "de5799c1a36ded064b11a8b2b2808a0dc4991a18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db84d11edc8b8d0f6edda464532a5d2bf701d88a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db84d11edc8b8d0f6edda464532a5d2bf701d88a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db84d11edc8b8d0f6edda464532a5d2bf701d88a", "patch": "@@ -1,5 +1,17 @@\n 2013-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/59362\n+\t* tree-object-size.c (object_sizes): Change into array of\n+\tvec<unsigned HOST_WIDE_INT>.\n+\t(compute_builtin_object_size): Check computed bitmap for\n+\tnon-NULL instead of object_sizes.  Call safe_grow on object_sizes\n+\tvector if new SSA_NAMEs appeared.\n+\t(init_object_sizes): Check computed bitmap for non-NULL.\n+\tCall safe_grow on object_sizes elements instead of initializing\n+\tit with XNEWVEC.\n+\t(fini_object_sizes): Call release on object_sizes elements, don't\n+\tset it to NULL.\n+\n \tPR middle-end/59011\n \t* gimplify.c (nonlocal_vla_vars): New variable.\n \t(gimplify_var_or_parm_decl): Put VAR_DECLs for VLAs into"}, {"sha": "4fd97ac07afb1e9dd63c64d4ea1d5dfac619ce2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db84d11edc8b8d0f6edda464532a5d2bf701d88a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db84d11edc8b8d0f6edda464532a5d2bf701d88a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db84d11edc8b8d0f6edda464532a5d2bf701d88a", "patch": "@@ -1,5 +1,8 @@\n 2013-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/59362\n+\t* gcc.c-torture/compile/pr59362.c: New test.\n+\n \tPR middle-end/59011\n \t* gcc.dg/pr59011.c: New test.\n "}, {"sha": "3e78f76bc5fecc9d104e92df4961395c968fe861", "filename": "gcc/testsuite/gcc.c-torture/compile/pr59362.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db84d11edc8b8d0f6edda464532a5d2bf701d88a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59362.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db84d11edc8b8d0f6edda464532a5d2bf701d88a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59362.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59362.c?ref=db84d11edc8b8d0f6edda464532a5d2bf701d88a", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/59362 */\n+\n+char *\n+foo (char *r, int s)\n+{\n+  r = __builtin___stpcpy_chk (r, \"abc\", __builtin_object_size (r, 1));\n+  if (s)\n+    r = __builtin___stpcpy_chk (r, \"d\", __builtin_object_size (r, 1));\n+  return r;\n+}\n+\n+char *a;\n+long int b;\n+\n+void\n+bar (void)\n+{\n+  b = __builtin_object_size (0, 0);\n+  a = __builtin___stpcpy_chk (0, \"\", b);\n+  b = __builtin_object_size (a, 0);\n+}"}, {"sha": "6a587e16c98f11ea12838466df2dfa18ef18e920", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db84d11edc8b8d0f6edda464532a5d2bf701d88a/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db84d11edc8b8d0f6edda464532a5d2bf701d88a/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=db84d11edc8b8d0f6edda464532a5d2bf701d88a", "patch": "@@ -78,7 +78,7 @@ static void check_for_plus_in_loops_1 (struct object_size_info *, tree,\n    the subobject (innermost array or field with address taken).\n    object_sizes[2] is lower bound for number of bytes till the end of\n    the object and object_sizes[3] lower bound for subobject.  */\n-static unsigned HOST_WIDE_INT *object_sizes[4];\n+static vec<unsigned HOST_WIDE_INT> object_sizes[4];\n \n /* Bitmaps what object sizes have been computed already.  */\n static bitmap computed[4];\n@@ -506,14 +506,16 @@ compute_builtin_object_size (tree ptr, int object_size_type)\n \n   if (TREE_CODE (ptr) == SSA_NAME\n       && POINTER_TYPE_P (TREE_TYPE (ptr))\n-      && object_sizes[object_size_type] != NULL)\n+      && computed[object_size_type] != NULL)\n     {\n       if (!bitmap_bit_p (computed[object_size_type], SSA_NAME_VERSION (ptr)))\n \t{\n \t  struct object_size_info osi;\n \t  bitmap_iterator bi;\n \t  unsigned int i;\n \n+\t  if (num_ssa_names > object_sizes[object_size_type].length ())\n+\t    object_sizes[object_size_type].safe_grow (num_ssa_names);\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"Computing %s %sobject size for \",\n@@ -1175,12 +1177,12 @@ init_object_sizes (void)\n {\n   int object_size_type;\n \n-  if (object_sizes[0])\n+  if (computed[0])\n     return;\n \n   for (object_size_type = 0; object_size_type <= 3; object_size_type++)\n     {\n-      object_sizes[object_size_type] = XNEWVEC (unsigned HOST_WIDE_INT, num_ssa_names);\n+      object_sizes[object_size_type].safe_grow (num_ssa_names);\n       computed[object_size_type] = BITMAP_ALLOC (NULL);\n     }\n \n@@ -1197,9 +1199,8 @@ fini_object_sizes (void)\n \n   for (object_size_type = 0; object_size_type <= 3; object_size_type++)\n     {\n-      free (object_sizes[object_size_type]);\n+      object_sizes[object_size_type].release ();\n       BITMAP_FREE (computed[object_size_type]);\n-      object_sizes[object_size_type] = NULL;\n     }\n }\n "}]}