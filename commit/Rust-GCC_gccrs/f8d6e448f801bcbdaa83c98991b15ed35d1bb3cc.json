{"sha": "f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkNmU0NDhmODAxYmNiZGFhODNjOTg5OTFiMTVlZDM1ZDFiYjNjYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-04T12:39:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-04T12:39:59Z"}, "message": "libcpp: Diagnose __has_include outside of preprocessor directives [PR93545]\n\nThe standard says http://eel.is/c++draft/cpp.cond#7.sentence-2 that\n__has_include can't appear at arbitrary places in the source.  As we have\nnot recognized __has_include* outside of preprocessing directives in the\npast, accepting it there now would be a regression.  The patch does still\nallow it in #define if it is then used in preprocessing directives, I guess\nthat use isn't strictly valid either, but clang seems to accept it.\n\n2020-02-04  Jakub Jelinek  <jakub@redhat.com>\n\n\t* macro.c (builtin_has_include): Diagnose __has_include* use outside\n\tof preprocessing directives.\n\n\t* c-c++-common/cpp/has-include-1.c: New test.\n\t* c-c++-common/cpp/has-include-next-1.c: New test.\n\t* c-c++-common/gomp/has-include-1.c: New test.", "tree": {"sha": "da66a93daadf495ae458d39c391afc19a358078e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da66a93daadf495ae458d39c391afc19a358078e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04babd9dfa5c63c10d65f1bd3fb8cf503ab739d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04babd9dfa5c63c10d65f1bd3fb8cf503ab739d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04babd9dfa5c63c10d65f1bd3fb8cf503ab739d"}], "stats": {"total": 220, "additions": 220, "deletions": 0}, "files": [{"sha": "25e9595a6f620ad7d55364c4011cd1cbeb67d7be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc", "patch": "@@ -1,5 +1,9 @@\n 2020-02-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-c++-common/cpp/has-include-1.c: New test.\n+\t* c-c++-common/cpp/has-include-next-1.c: New test.\n+\t* c-c++-common/gomp/has-include-1.c: New test.\n+\n \tPR preprocessor/93545\n \t* c-c++-common/cpp/pr88974.c: Expect another diagnostics during error\n \trecovery."}, {"sha": "1d9f011cba01440dd9321ace7502ed363470dde0", "filename": "gcc/testsuite/c-c++-common/cpp/has-include-1.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-include-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-include-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-include-1.c?ref=f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc", "patch": "@@ -0,0 +1,104 @@\n+/* { dg-do preprocess } */\n+\n+#if __has_include (\"stdlib.h\")\n+#else\n+#error error 1\n+#endif\n+#if __has_include (<stdlib.h>)\n+#else\n+#error error 2\n+#endif\n+#if !__has_include (\"stdlib.h\")\n+#error error 3\n+#elif !__has_include (<stdlib.h>)\n+#error error 4\n+#endif\n+#if __has_include (\"stdlib.h\") && __has_include (<stdlib.h>)\n+#else\n+#error error 5\n+#endif\n+#if !defined(__has_include)\n+#error error 6\n+#endif\n+#ifndef __has_include\n+#error error 7\n+#endif\n+#ifdef __has_include\n+#else\n+#error error 8\n+#endif\n+#define m1 __has_include(\"stdlib.h\")\n+#define m2 (\"stdlib.h\")\n+#define m3 (\"has-include-1-nonexistent.h\")\n+#define m4 has-include-1-nonexistent-2.h>)\n+#define m5 <stdlib.h>\n+#if !m1\n+#error error 9\n+#endif\n+#if !__has_include m2\n+#error error 10\n+#endif\n+#if __has_include m3\n+#error error 11\n+#endif\n+#if __has_include (<m4\n+#error error 12\n+#endif\n+#if !__has_include (m5)\n+#error error 13\n+#endif\n+__has_include (<stdlib.h>)\t\t/* { dg-error \"used outside of preprocessing directive\" } */\n+m1\t\t\t\t\t/* { dg-error \"used outside of preprocessing directive\" } */\n+#if 1\n+m1\t\t\t\t\t/* { dg-error \"used outside of preprocessing directive\" } */\n+#endif\n+#if 0\n+#elif 1\n+m1\t\t\t\t\t/* { dg-error \"used outside of preprocessing directive\" } */\n+#endif\n+#if 0\n+m1\n+#endif\n+#if 0\n+#elif 0\n+m1\n+#endif\n+#if __has_include \"stdlib.h\")\t\t/* { dg-error \"missing\" } */\n+#endif\n+#if __has_include (stdlib.h)\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include ()\t\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include )\t\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include (\"stdlib.h)\n+#endif\n+/* { dg-error \"operator|missing\\[^\\n\\r]*after\" \"\" { target *-*-* } .-2 } */\n+/* { dg-warning \"missing terminating\" \"\" { target *-*-* } .-3 } */\n+#if __has_include (stdlib.h>)\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include (\"stdlib.h\"\t\t/* { dg-error \"missing\" } */\n+#endif\n+#if __has_include (\t\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include\t\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include\"stdlib.h\"\t\t/* { dg-error \"missing\" } */\n+#endif\n+#if __has_include'h'\t\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include('h'\t\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include('h')\t\t\t/* { dg-error \"operator\" } */\n+#endif\n+#define H(h) __has_include(h)\n+#if H(<stdlib.h>)\n+#else\n+#error error 14\n+#endif\n+void\n+foo ()\n+{\n+#pragma omp parallel if (__has_include (\"<stdlib.h>\"))\n+  ;\n+}"}, {"sha": "79e528da66750bd28bfc5eb2552ea374475feefe", "filename": "gcc/testsuite/c-c++-common/cpp/has-include-next-1.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-include-next-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-include-next-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-include-next-1.c?ref=f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc", "patch": "@@ -0,0 +1,104 @@\n+/* { dg-do preprocess } */\n+\n+#if __has_include_next (\"stdlib.h\")\n+#else\n+#error error 1\n+#endif\n+#if __has_include_next (<stdlib.h>)\n+#else\n+#error error 2\n+#endif\n+#if !__has_include_next (\"stdlib.h\")\n+#error error 3\n+#elif !__has_include_next (<stdlib.h>)\n+#error error 4\n+#endif\n+#if __has_include_next (\"stdlib.h\") && __has_include_next (<stdlib.h>)\n+#else\n+#error error 5\n+#endif\n+#if !defined(__has_include_next)\n+#error error 6\n+#endif\n+#ifndef __has_include_next\n+#error error 7\n+#endif\n+#ifdef __has_include_next\n+#else\n+#error error 8\n+#endif\n+#define m1 __has_include_next(\"stdlib.h\")\n+#define m2 (\"stdlib.h\")\n+#define m3 (\"has-include-1-nonexistent.h\")\n+#define m4 has-include-1-nonexistent-2.h>)\n+#define m5 <stdlib.h>\n+#if !m1\n+#error error 9\n+#endif\n+#if !__has_include_next m2\n+#error error 10\n+#endif\n+#if __has_include_next m3\n+#error error 11\n+#endif\n+#if __has_include_next (<m4\n+#error error 12\n+#endif\n+#if !__has_include_next (m5)\n+#error error 13\n+#endif\n+__has_include_next (<stdlib.h>)\t\t/* { dg-error \"used outside of preprocessing directive\" } */\n+m1\t\t\t\t\t/* { dg-error \"used outside of preprocessing directive\" } */\n+#if 1\n+m1\t\t\t\t\t/* { dg-error \"used outside of preprocessing directive\" } */\n+#endif\n+#if 0\n+#elif 1\n+m1\t\t\t\t\t/* { dg-error \"used outside of preprocessing directive\" } */\n+#endif\n+#if 0\n+m1\n+#endif\n+#if 0\n+#elif 0\n+m1\n+#endif\n+#if __has_include_next \"stdlib.h\")\t/* { dg-error \"missing\" } */\n+#endif\n+#if __has_include_next (stdlib.h)\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include_next ()\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include_next )\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include_next (\"stdlib.h)\n+#endif\n+/* { dg-error \"operator|missing\\[^\\n\\r]*after\" \"\" { target *-*-* } .-2 } */\n+/* { dg-warning \"missing terminating\" \"\" { target *-*-* } .-3 } */\n+#if __has_include_next (stdlib.h>)\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include_next (\"stdlib.h\"\t/* { dg-error \"missing\" } */\n+#endif\n+#if __has_include_next (\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include_next\t\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include_next\"stdlib.h\"\t/* { dg-error \"missing\" } */\n+#endif\n+#if __has_include_next'h'\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include_next('h'\t\t/* { dg-error \"operator|missing\" } */\n+#endif\n+#if __has_include_next('h')\t\t/* { dg-error \"operator\" } */\n+#endif\n+#define H(h) __has_include_next(h)\n+#if H(<stdlib.h>)\n+#else\n+#error error 14\n+#endif\n+void\n+foo ()\n+{\n+#pragma omp parallel if (__has_include_next (\"<stdlib.h>\"))\n+  ;\n+}"}, {"sha": "cc5c575ca83e64b65adbcbbb3942a2564098c4b4", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc", "patch": "@@ -1,5 +1,8 @@\n 2020-02-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* macro.c (builtin_has_include): Diagnose __has_include* use outside\n+\tof preprocessing directives.\n+\n \tPR preprocessor/93545\n \t* macro.c (cpp_get_token_no_padding): New function.\n \t(builtin_has_include): Use it instead of cpp_get_token.  Don't check"}, {"sha": "ec0030742c09b46f438c06c1392f26a0c56f48a5", "filename": "libcpp/macro.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=f8d6e448f801bcbdaa83c98991b15ed35d1bb3cc", "patch": "@@ -359,6 +359,11 @@ builtin_has_include (cpp_reader *pfile, cpp_hashnode *op, bool has_next)\n {\n   int result = 0;\n \n+  if (!pfile->state.in_directive)\n+    cpp_error (pfile, CPP_DL_ERROR,\n+\t       \"\\\"%s\\\" used outside of preprocessing directive\",\n+\t       NODE_NAME (op));\n+\n   pfile->state.angled_headers = true;\n   const cpp_token *token = cpp_get_token_no_padding (pfile);\n   bool paren = token->type == CPP_OPEN_PAREN;"}]}