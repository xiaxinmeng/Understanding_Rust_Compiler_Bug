{"sha": "fa65696761c167412262779e37fc15306e08dd1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE2NTY5Njc2MWMxNjc0MTIyNjI3NzllMzdmYzE1MzA2ZTA4ZGQxYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-10-02T15:20:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-24T10:16:03Z"}, "message": "[Ada] Wrong resolution of universal_access = operators\n\ngcc/ada/\n\n\t* sem_type.adb (Add_One_Interp.Is_Universal_Operation): Account\n\tfor universal_access = operator.\n\t(Disambiguate): Take into account preference on universal_access\n\t= operator when relevant.\n\t(Disambiguate.Is_User_Defined_Anonymous_Access_Equality): New.", "tree": {"sha": "94b1a92c0a50b089ceeab521f1fc42730010db49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94b1a92c0a50b089ceeab521f1fc42730010db49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa65696761c167412262779e37fc15306e08dd1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa65696761c167412262779e37fc15306e08dd1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa65696761c167412262779e37fc15306e08dd1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa65696761c167412262779e37fc15306e08dd1b/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13209acd6488700a9c754e0ecff7d654941698ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13209acd6488700a9c754e0ecff7d654941698ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13209acd6488700a9c754e0ecff7d654941698ef"}], "stats": {"total": 112, "additions": 88, "deletions": 24}, "files": [{"sha": "4b5224938afddd11ee7474c47cb6e21bcbc6f9b7", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 88, "deletions": 24, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa65696761c167412262779e37fc15306e08dd1b/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa65696761c167412262779e37fc15306e08dd1b/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=fa65696761c167412262779e37fc15306e08dd1b", "patch": "@@ -326,8 +326,19 @@ package body Sem_Type is\n             return False;\n \n          elsif Nkind (N) in N_Binary_Op then\n-            return Present (Universal_Interpretation (Left_Opnd (N)))\n-              and then Present (Universal_Interpretation (Right_Opnd (N)));\n+            if Present (Universal_Interpretation (Left_Opnd (N)))\n+              and then Present (Universal_Interpretation (Right_Opnd (N)))\n+            then\n+               return True;\n+            elsif Nkind (N) in N_Op_Eq | N_Op_Ne\n+              and then\n+                (Is_Anonymous_Access_Type (Etype (Left_Opnd (N)))\n+                  or else Is_Anonymous_Access_Type (Etype (Right_Opnd (N))))\n+            then\n+               return True;\n+            else\n+               return False;\n+            end if;\n \n          elsif Nkind (N) in N_Unary_Op then\n             return Present (Universal_Interpretation (Right_Opnd (N)));\n@@ -1338,6 +1349,13 @@ package body Sem_Type is\n       --  for special handling of expressions with universal operands, see\n       --  comments to Has_Abstract_Interpretation below.\n \n+      function Is_User_Defined_Anonymous_Access_Equality\n+        (User_Subp, Predef_Subp : Entity_Id) return Boolean;\n+      --  Check for Ada 2005, AI-020: If the context involves an anonymous\n+      --  access operand, recognize a user-defined equality (User_Subp) with\n+      --  the proper signature, declared in the same declarative list as the\n+      --  type and not hiding a predefined equality Predef_Subp.\n+\n       ---------------------------\n       -- Inherited_From_Actual --\n       ---------------------------\n@@ -1743,6 +1761,37 @@ package body Sem_Type is\n          end if;\n       end Standard_Operator;\n \n+      -----------------------------------------------\n+      -- Is_User_Defined_Anonymous_Access_Equality --\n+      -----------------------------------------------\n+\n+      function Is_User_Defined_Anonymous_Access_Equality\n+        (User_Subp, Predef_Subp : Entity_Id) return Boolean is\n+      begin\n+         return Present (User_Subp)\n+\n+         --  Check for Ada 2005 and use of anonymous access\n+\n+           and then Ada_Version >= Ada_2005\n+           and then Etype (User_Subp) = Standard_Boolean\n+           and then Is_Anonymous_Access_Type (Operand_Type)\n+\n+         --  This check is only relevant if User_Subp is visible and not in\n+         --  an instance\n+\n+           and then (In_Open_Scopes (Scope (User_Subp))\n+                      or else Is_Potentially_Use_Visible (User_Subp))\n+           and then not In_Instance\n+           and then not Hides_Op (User_Subp, Predef_Subp)\n+\n+         --  Is User_Subp declared in the same declarative list as the type?\n+\n+           and then\n+             In_Same_Declaration_List\n+               (Designated_Type (Operand_Type),\n+                Unit_Declaration_Node (User_Subp));\n+      end Is_User_Defined_Anonymous_Access_Equality;\n+\n    --  Start of processing for Disambiguate\n \n    begin\n@@ -1856,17 +1905,41 @@ package body Sem_Type is\n                   Arg2 := Next_Actual (Arg1);\n                end if;\n \n-               if Present (Arg2)\n-                 and then Present (Universal_Interpretation (Arg1))\n-                 and then Universal_Interpretation (Arg2) =\n-                          Universal_Interpretation (Arg1)\n-               then\n-                  Get_First_Interp (N, I, It);\n-                  while Scope (It.Nam) /= Standard_Standard loop\n-                     Get_Next_Interp (I, It);\n-                  end loop;\n+               if Present (Arg2) then\n+                  if Ekind (Nam1) = E_Operator then\n+                     Predef_Subp := Nam1;\n+                     User_Subp   := Nam2;\n+                  elsif Ekind (Nam2) = E_Operator then\n+                     Predef_Subp := Nam2;\n+                     User_Subp   := Nam1;\n+                  else\n+                     Predef_Subp := Empty;\n+                     User_Subp   := Empty;\n+                  end if;\n \n-                  return It;\n+                  --  Take into account universal interpretation as well as\n+                  --  universal_access equality, as long as AI05-0020 does not\n+                  --  trigger.\n+\n+                  if (Present (Universal_Interpretation (Arg1))\n+                       and then Universal_Interpretation (Arg2) =\n+                                Universal_Interpretation (Arg1))\n+                    or else\n+                      (Nkind (N) in N_Op_Eq | N_Op_Ne\n+                        and then (Is_Anonymous_Access_Type (Etype (Arg1))\n+                                    or else\n+                                  Is_Anonymous_Access_Type (Etype (Arg2)))\n+                        and then not\n+                          Is_User_Defined_Anonymous_Access_Equality\n+                            (User_Subp, Predef_Subp))\n+                  then\n+                     Get_First_Interp (N, I, It);\n+                     while Scope (It.Nam) /= Standard_Standard loop\n+                        Get_Next_Interp (I, It);\n+                     end loop;\n+\n+                     return It;\n+                  end if;\n                end if;\n             end;\n          end if;\n@@ -2117,20 +2190,11 @@ package body Sem_Type is\n                   return It2;\n                end if;\n \n-            --  Ada 2005, AI-420: preference rule for \"=\" on Universal_Access\n-            --  states that the operator defined in Standard is not available\n-            --  if there is a user-defined equality with the proper signature,\n-            --  declared in the same declarative list as the type. The node\n-            --  may be an operator or a function call.\n+            --  Check for AI05-020\n \n             elsif Chars (Nam1) in Name_Op_Eq | Name_Op_Ne\n-              and then Ada_Version >= Ada_2005\n-              and then Etype (User_Subp) = Standard_Boolean\n-              and then Is_Anonymous_Access_Type (Operand_Type)\n-              and then\n-                In_Same_Declaration_List\n-                  (Designated_Type (Operand_Type),\n-                   Unit_Declaration_Node (User_Subp))\n+              and then Is_User_Defined_Anonymous_Access_Equality\n+                         (User_Subp, Predef_Subp)\n             then\n                if It2.Nam = Predef_Subp then\n                   return It1;"}]}