{"sha": "23878536a6b359865599d300c214bbb8fef83a43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM4Nzg1MzZhNmIzNTk4NjU1OTlkMzAwYzIxNGJiYjhmZWY4M2E0Mw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-25T14:26:44Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-25T14:26:44Z"}, "message": "re PR fortran/41139 (a procedure pointer call as actual argument)\n\n2009-08-25  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41139\n\t* primary.c (gfc_match_varspec): Make sure EXPR_PPC is only used for\n\tcalls to procedure pointer components, other references to procedure\n\tpointer components are EXPR_VARIABLE.\n\t* resolve.c (resolve_actual_arglist): Bugfix (there can be calls without\n\tactual arglist).\n\t* trans-expr.c (gfc_get_proc_ptr_comp): Renamed to 'get_proc_ptr_comp',\n\tremoved argument 'se' and made static. Avoid inserting a temporary\n\tvariable for calling the PPC.\n\t(conv_function_val): Renamed gfc_get_proc_ptr_comp.\n\t(gfc_conv_procedure_call): Distinguish functions returning a procedure\n\tpointer from calls to a procedure pointer. Distinguish calls to\n\tprocedure pointer components from procedure pointer components as\n\tactual arguments.\n\t* trans-stmt.h (gfc_get_proc_ptr_comp): Make it static.\n\n\n2009-08-25  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41139\n\t* gfortran.dg/proc_ptr_25.f90: New.\n\t* gfortran.dg/proc_ptr_comp_18.f90: New.\n\t* gfortran.dg/proc_ptr_comp_19.f90: New.\n\nFrom-SVN: r151081", "tree": {"sha": "3af99476a57f873526e5deb43b0c56abfcee584b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3af99476a57f873526e5deb43b0c56abfcee584b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23878536a6b359865599d300c214bbb8fef83a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23878536a6b359865599d300c214bbb8fef83a43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23878536a6b359865599d300c214bbb8fef83a43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23878536a6b359865599d300c214bbb8fef83a43/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4df62c77fe216dd68b85f09d20910203e035efb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df62c77fe216dd68b85f09d20910203e035efb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4df62c77fe216dd68b85f09d20910203e035efb2"}], "stats": {"total": 176, "additions": 150, "deletions": 26}, "files": [{"sha": "16a046dc958e430cd68c6ea7c946b33895380d9d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=23878536a6b359865599d300c214bbb8fef83a43", "patch": "@@ -1,3 +1,21 @@\n+2009-08-25  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41139\n+\t* primary.c (gfc_match_varspec): Make sure EXPR_PPC is only used for\n+\tcalls to procedure pointer components, other references to procedure\n+\tpointer components are EXPR_VARIABLE.\n+\t* resolve.c (resolve_actual_arglist): Bugfix (there can be calls without\n+\tactual arglist).\n+\t* trans-expr.c (gfc_get_proc_ptr_comp): Renamed to 'get_proc_ptr_comp',\n+\tremoved argument 'se' and made static. Avoid inserting a temporary\n+\tvariable for calling the PPC.\n+\t(conv_function_val): Renamed gfc_get_proc_ptr_comp.\n+\t(gfc_conv_procedure_call): Distinguish functions returning a procedure\n+\tpointer from calls to a procedure pointer. Distinguish calls to\n+\tprocedure pointer components from procedure pointer components as\n+\tactual arguments.\n+\t* trans-stmt.h (gfc_get_proc_ptr_comp): Make it static.\n+\n 2009-08-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/41162"}, {"sha": "79db19510f22dbaad35458c69dd78b68a486e1f0", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=23878536a6b359865599d300c214bbb8fef83a43", "patch": "@@ -1839,13 +1839,12 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n       if (component->attr.proc_pointer && ppc_arg\n \t  && !gfc_matching_procptr_assignment)\n \t{\n-\t  primary->expr_type = EXPR_PPC;\n-\t  m = gfc_match_actual_arglist (component->attr.subroutine,\n+\t  m = gfc_match_actual_arglist (sub_flag,\n \t\t\t\t\t&primary->value.compcall.actual);\n \t  if (m == MATCH_ERROR)\n \t    return MATCH_ERROR;\n-\t  if (m == MATCH_NO)\n-\t    primary->value.compcall.actual = NULL;\n+\t  if (m == MATCH_YES)\n+\t    primary->expr_type = EXPR_PPC;\n \n           break;\n \t}"}, {"sha": "3bc4c587da307ca751a8537aee0f3eb698a04016", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=23878536a6b359865599d300c214bbb8fef83a43", "patch": "@@ -1279,9 +1279,7 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype,\n       if (gfc_is_proc_ptr_comp (e, &comp))\n \t{\n \t  e->ts = comp->ts;\n-\t  if (e->value.compcall.actual == NULL)\n-\t    e->expr_type = EXPR_VARIABLE;\n-\t  else\n+\t  if (e->expr_type == EXPR_PPC)\n \t    {\n \t      if (comp->as != NULL)\n \t\te->rank = comp->as->rank;"}, {"sha": "a5677f70d8d17ac0c4005eb64946126fbb613d23", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=23878536a6b359865599d300c214bbb8fef83a43", "patch": "@@ -1502,13 +1502,29 @@ gfc_build_compare_string (tree len1, tree str1, tree len2, tree str2, int kind)\n   return tmp;\n }\n \n+\n+/* Return the backend_decl for a procedure pointer component.  */\n+\n+static tree\n+get_proc_ptr_comp (gfc_expr *e)\n+{\n+  gfc_se comp_se;\n+  gfc_expr *e2;\n+  gfc_init_se (&comp_se, NULL);\n+  e2 = gfc_copy_expr (e);\n+  e2->expr_type = EXPR_VARIABLE;\n+  gfc_conv_expr (&comp_se, e2);\n+  return build_fold_addr_expr_loc (input_location, comp_se.expr);\n+}\n+\n+\n static void\n conv_function_val (gfc_se * se, gfc_symbol * sym, gfc_expr * expr)\n {\n   tree tmp;\n \n   if (gfc_is_proc_ptr_comp (expr, NULL))\n-    tmp = gfc_get_proc_ptr_comp (se, expr);\n+    tmp = get_proc_ptr_comp (expr);\n   else if (sym->attr.dummy)\n     {\n       tmp = gfc_get_symbol_decl (sym);\n@@ -2679,6 +2695,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t}\n \t      else if (e->expr_type == EXPR_FUNCTION\n \t\t       && e->symtree->n.sym->result\n+\t\t       && e->symtree->n.sym->result != e->symtree->n.sym\n \t\t       && e->symtree->n.sym->result->attr.proc_pointer)\n \t\t{\n \t\t  /* Functions returning procedure pointers.  */\n@@ -2695,7 +2712,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t  || (fsym->attr.proc_pointer\n \t\t\t      && !(e->expr_type == EXPR_VARIABLE\n \t\t\t      && e->symtree->n.sym->attr.dummy))\n-\t\t\t  || gfc_is_proc_ptr_comp (e, NULL)))\n+\t\t\t  || (e->expr_type == EXPR_VARIABLE\n+\t\t\t      && gfc_is_proc_ptr_comp (e, NULL))))\n \t\t    {\n \t\t      /* Scalar pointer dummy args require an extra level of\n \t\t\t indirection. The null pointer already contains\n@@ -3501,22 +3519,6 @@ gfc_conv_statement_function (gfc_se * se, gfc_expr * expr)\n }\n \n \n-/* Return the backend_decl for a procedure pointer component.  */\n-\n-tree\n-gfc_get_proc_ptr_comp (gfc_se *se, gfc_expr *e)\n-{\n-  gfc_se comp_se;\n-  gfc_expr *e2;\n-  gfc_init_se (&comp_se, NULL);\n-  e2 = gfc_copy_expr (e);\n-  e2->expr_type = EXPR_VARIABLE;\n-  gfc_conv_expr (&comp_se, e2);\n-  comp_se.expr = build_fold_addr_expr_loc (input_location, comp_se.expr);\n-  return gfc_evaluate_now (comp_se.expr, &se->pre);  \n-}\n-\n-\n /* Translate a function expression.  */\n \n static void"}, {"sha": "d7307df2a82c6866d57a0ab2d0f18b9e6c10d792", "filename": "gcc/fortran/trans-stmt.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ffortran%2Ftrans-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ffortran%2Ftrans-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.h?ref=23878536a6b359865599d300c214bbb8fef83a43", "patch": "@@ -29,7 +29,6 @@ tree gfc_trans_code (gfc_code *);\n tree gfc_trans_assign (gfc_code *);\n tree gfc_trans_pointer_assign (gfc_code *);\n tree gfc_trans_init_assign (gfc_code *);\n-tree gfc_get_proc_ptr_comp (gfc_se *, gfc_expr *);\n \n /* trans-stmt.c */\n tree gfc_trans_cycle (gfc_code *);"}, {"sha": "23f669b9645fce8fa2b12f649e3ceec0f6e2d982", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23878536a6b359865599d300c214bbb8fef83a43", "patch": "@@ -1,3 +1,10 @@\n+2009-08-25  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41139\n+\t* gfortran.dg/proc_ptr_25.f90: New.\n+\t* gfortran.dg/proc_ptr_comp_18.f90: New.\n+\t* gfortran.dg/proc_ptr_comp_19.f90: New.\n+\n 2009-08-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/41154"}, {"sha": "cfa0d443478662e979b3a71219fe725c1f48ee71", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_25.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_25.f90?ref=23878536a6b359865599d300c214bbb8fef83a43", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+!\n+! PR 41139: [4.5 Regression] a procedure pointer call as actual argument\n+!\n+! Original test case by Barron Bichon <barron.bichon@swri.org>\n+! Modified by Janus Weil <janus@gcc.gnu.org>\n+\n+PROGRAM test\n+\n+ PROCEDURE(add), POINTER :: f\n+ logical :: g\n+\n+ ! Passing the function works\n+ g=greater(4.,add(1.,2.))\n+ if (.not. g) call abort()\n+\n+ ! Passing the procedure pointer fails\n+ f => add\n+ g=greater(4.,f(1.,2.))\n+ if (.not. g) call abort()\n+\n+CONTAINS\n+\n+ REAL FUNCTION add(x,y)\n+   REAL, INTENT(in) :: x,y\n+   print *,\"add:\",x,y\n+   add = x+y\n+ END FUNCTION add\n+\n+ LOGICAL FUNCTION greater(x,y)\n+   REAL, INTENT(in) :: x, y\n+   greater = (x > y)\n+ END FUNCTION greater\n+\n+END PROGRAM test\n+"}, {"sha": "4b849b64e1846129a8d1db570a255e93cda9b053", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_18.f90?ref=23878536a6b359865599d300c214bbb8fef83a43", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+!\n+! PR 41139: [4.5 Regression] a procedure pointer call as actual argument\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+PROGRAM test\n+\n+ type :: t\n+   PROCEDURE(add), POINTER, nopass :: f\n+ end type\n+ type(t) :: o\n+ logical :: g\n+\n+ o%f => add\n+ g=greater(4.,o%f(1.,2.))\n+ if (.not. g) call abort()\n+\n+CONTAINS\n+\n+ REAL FUNCTION add(x,y)\n+   REAL, INTENT(in) :: x,y\n+   add = x+y\n+ END FUNCTION add\n+\n+ LOGICAL FUNCTION greater(x,y)\n+   REAL, INTENT(in) :: x, y\n+   print *,\"greater:\",x,y\n+   greater = (x > y)\n+ END FUNCTION greater\n+\n+END PROGRAM test\n+"}, {"sha": "8027c82d39bb7e97b83528987c4bf9cf51fcf243", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23878536a6b359865599d300c214bbb8fef83a43/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_19.f90?ref=23878536a6b359865599d300c214bbb8fef83a43", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+!\n+! PR 41139: [4.5 Regression] a procedure pointer call as actual argument\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+PROGRAM test\n+\n+ type :: t\n+   PROCEDURE(three), POINTER, nopass :: f\n+ end type\n+ type(t) :: o\n+ logical :: g\n+\n+ o%f => three\n+ g=greater(4.,o%f())\n+ if (.not. g) call abort()\n+\n+CONTAINS\n+\n+ REAL FUNCTION three()\n+   three = 3.\n+ END FUNCTION\n+\n+ LOGICAL FUNCTION greater(x,y)\n+   REAL, INTENT(in) :: x, y\n+   print *,\"greater:\",x,y\n+   greater = (x > y)\n+ END FUNCTION greater\n+\n+END PROGRAM test\n+"}]}