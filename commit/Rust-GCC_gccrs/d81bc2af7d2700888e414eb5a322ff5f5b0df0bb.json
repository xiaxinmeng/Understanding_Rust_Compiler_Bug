{"sha": "d81bc2af7d2700888e414eb5a322ff5f5b0df0bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgxYmMyYWY3ZDI3MDA4ODhlNDE0ZWI1YTMyMmZmNWY1YjBkZjBiYg==", "commit": {"author": {"name": "Haijian Zhang", "email": "z.zhanghaijian@huawei.com", "date": "2020-04-29T08:23:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-29T08:23:11Z"}, "message": "pr94780.c fails with ICE on aarch64 [PR94820]\n\nThis is a simple fix for pr94820.\nThe PR was only fixed on i386, the same error was also reported on aarch64.\nThis function, because it is sometimes called even outside of function bodies, uses create_tmp_var_raw rather than create_tmp_var.\nBut in order for that to work, when first referenced, the VAR_DECLs need to appear in a TARGET_EXPR so that during gimplification\nthe var gets the right DECL_CONTEXT and is added to local decls. Without that, e.g. tree-nested.c ICEs on those.\n\n2020-04-29  Haijian Zhang  <z.zhanghaijian@huawei.com>\n\n\tPR target/94820\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_atomic_assign_expand_fenv): Use TARGET_EXPR instead of\n\tMODIFY_EXPR for first assignment to fenv_cr, fenv_sr and\n\tnew_fenv_var.", "tree": {"sha": "2ba7735877adce981a59c2f7bd3b525c356001e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ba7735877adce981a59c2f7bd3b525c356001e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d81bc2af7d2700888e414eb5a322ff5f5b0df0bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81bc2af7d2700888e414eb5a322ff5f5b0df0bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81bc2af7d2700888e414eb5a322ff5f5b0df0bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81bc2af7d2700888e414eb5a322ff5f5b0df0bb/comments", "author": null, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d0bc12e1bfa956941cd9c49d5b978256bd11ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d0bc12e1bfa956941cd9c49d5b978256bd11ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d0bc12e1bfa956941cd9c49d5b978256bd11ec"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "93d509710b738040a39ce8a388bd997ba3c9ec2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc2af7d2700888e414eb5a322ff5f5b0df0bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc2af7d2700888e414eb5a322ff5f5b0df0bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d81bc2af7d2700888e414eb5a322ff5f5b0df0bb", "patch": "@@ -1,3 +1,11 @@\n+2020-04-29  Haijian Zhang  <z.zhanghaijian@huawei.com>\n+\n+\tPR target/94820\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_atomic_assign_expand_fenv): Use TARGET_EXPR instead of\n+\tMODIFY_EXPR for first assignment to fenv_cr, fenv_sr and\n+\tnew_fenv_var.\n+\n 2020-04-29  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* configure.ac <$enable_offload_targets>: Do parsing as done"}, {"sha": "95213cd70c841bf89fd791c2e7d4bcb05d56fa1a", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc2af7d2700888e414eb5a322ff5f5b0df0bb/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc2af7d2700888e414eb5a322ff5f5b0df0bb/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=d81bc2af7d2700888e414eb5a322ff5f5b0df0bb", "patch": "@@ -2313,10 +2313,12 @@ aarch64_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n   mask_sr = build_int_cst (unsigned_type_node,\n \t\t\t   ~(AARCH64_FE_ALL_EXCEPT));\n \n-  ld_fenv_cr = build2 (MODIFY_EXPR, unsigned_type_node,\n-\t\t       fenv_cr, build_call_expr (get_fpcr, 0));\n-  ld_fenv_sr = build2 (MODIFY_EXPR, unsigned_type_node,\n-\t\t       fenv_sr, build_call_expr (get_fpsr, 0));\n+  ld_fenv_cr = build4 (TARGET_EXPR, unsigned_type_node,\n+\t\t       fenv_cr, build_call_expr (get_fpcr, 0),\n+\t\t       NULL_TREE, NULL_TREE);\n+  ld_fenv_sr = build4 (TARGET_EXPR, unsigned_type_node,\n+\t\t       fenv_sr, build_call_expr (get_fpsr, 0),\n+\t\t       NULL_TREE, NULL_TREE);\n \n   masked_fenv_cr = build2 (BIT_AND_EXPR, unsigned_type_node, fenv_cr, mask_cr);\n   masked_fenv_sr = build2 (BIT_AND_EXPR, unsigned_type_node, fenv_sr, mask_sr);\n@@ -2348,8 +2350,9 @@ aarch64_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n        __atomic_feraiseexcept (new_fenv_var);  */\n \n   new_fenv_var = create_tmp_var_raw (unsigned_type_node);\n-  reload_fenv = build2 (MODIFY_EXPR, unsigned_type_node,\n-\t\t\tnew_fenv_var, build_call_expr (get_fpsr, 0));\n+  reload_fenv = build4 (TARGET_EXPR, unsigned_type_node,\n+\t\t\tnew_fenv_var, build_call_expr (get_fpsr, 0),\n+\t\t\tNULL_TREE, NULL_TREE);\n   restore_fnenv = build_call_expr (set_fpsr, 1, fenv_sr);\n   atomic_feraiseexcept = builtin_decl_implicit (BUILT_IN_ATOMIC_FERAISEEXCEPT);\n   update_call = build_call_expr (atomic_feraiseexcept, 1,"}]}