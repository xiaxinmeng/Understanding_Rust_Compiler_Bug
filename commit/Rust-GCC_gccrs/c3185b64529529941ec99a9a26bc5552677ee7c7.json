{"sha": "c3185b64529529941ec99a9a26bc5552677ee7c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMxODViNjQ1Mjk1Mjk5NDFlYzk5YTlhMjZiYzU1NTI2NzdlZTdjNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-03T18:52:06Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-03T18:52:06Z"}, "message": "i386: Use plus_constant instead of gen_rtx_PLUS\n\nReplace gen_rtx_PLUS with a GEN_INT with plus_constant.\n\n2020-05-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\n        * config/i386/i386-expand.c (ix86_expand_int_movcc):\n\tUse plus_constant instead of gen_rtx_PLUS with GEN_INT.\n\t(emit_memmov): Ditto.\n\t(emit_memset): Ditto.\n\t(ix86_expand_strlensi_unroll_1): Ditto.\n\t(release_scratch_register_on_entry): Ditto.\n\t(gen_frame_set): Ditto.\n\t(ix86_emit_restore_reg_using_pop): Ditto.\n\t(ix86_emit_outlined_ms2sysv_restore): Ditto.\n\t(ix86_expand_epilogue): Ditto.\n\t(ix86_expand_split_stack_prologue): Ditto.\n\t* config/i386/i386.md (push immediate splitter): Ditto.\n\t(strmov): Ditto.\n\t(strset): Ditto.", "tree": {"sha": "99db0210dca9dcb89a2448eee0dc35929f5e33d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99db0210dca9dcb89a2448eee0dc35929f5e33d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3185b64529529941ec99a9a26bc5552677ee7c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3185b64529529941ec99a9a26bc5552677ee7c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3185b64529529941ec99a9a26bc5552677ee7c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3185b64529529941ec99a9a26bc5552677ee7c7/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22b6b5d6cfb76deb68ca5bc0bcae8b4245df946d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b6b5d6cfb76deb68ca5bc0bcae8b4245df946d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22b6b5d6cfb76deb68ca5bc0bcae8b4245df946d"}], "stats": {"total": 82, "additions": 49, "deletions": 33}, "files": [{"sha": "fae2fb2cbac95a2c2563c5c5387cba6df1ca5714", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3185b64529529941ec99a9a26bc5552677ee7c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3185b64529529941ec99a9a26bc5552677ee7c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3185b64529529941ec99a9a26bc5552677ee7c7", "patch": "@@ -1,3 +1,20 @@\n+2020-05-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+        * config/i386/i386-expand.c (ix86_expand_int_movcc):\n+\tUse plus_constant instead of gen_rtx_PLUS with GEN_INT.\n+\t(emit_memmov): Ditto.\n+\t(emit_memset): Ditto.\n+\t(ix86_expand_strlensi_unroll_1): Ditto.\n+\t(release_scratch_register_on_entry): Ditto.\n+\t(gen_frame_set): Ditto.\n+\t(ix86_emit_restore_reg_using_pop): Ditto.\n+\t(ix86_emit_outlined_ms2sysv_restore): Ditto.\n+\t(ix86_expand_epilogue): Ditto.\n+\t(ix86_expand_split_stack_prologue): Ditto.\n+\t* config/i386/i386.md (push immediate splitter): Ditto.\n+\t(strmov): Ditto.\n+\t(strset): Ditto.\n+\n 2020-05-02  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR translation/93861"}, {"sha": "26531585c5fb39b2e0968555f6137ddb5f1f56e3", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3185b64529529941ec99a9a26bc5552677ee7c7/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3185b64529529941ec99a9a26bc5552677ee7c7/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=c3185b64529529941ec99a9a26bc5552677ee7c7", "patch": "@@ -3170,7 +3170,7 @@ ix86_expand_int_movcc (rtx operands[])\n \t    }\n \t  if (cf != 0)\n \t    {\n-\t      tmp = gen_rtx_PLUS (mode, tmp, GEN_INT (cf));\n+\t      tmp = plus_constant (mode, tmp, cf);\n \t      nops++;\n \t    }\n \t  if (!rtx_equal_p (tmp, out))\n@@ -5986,7 +5986,7 @@ static rtx\n emit_memmov (rtx destmem, rtx *srcmem, rtx destptr, rtx srcptr,\n \t     HOST_WIDE_INT size_to_move)\n {\n-  rtx dst = destmem, src = *srcmem, adjust, tempreg;\n+  rtx dst = destmem, src = *srcmem, tempreg;\n   enum insn_code code;\n   machine_mode move_mode;\n   int piece_size, i;\n@@ -6022,7 +6022,7 @@ emit_memmov (rtx destmem, rtx *srcmem, rtx destptr, rtx srcptr,\n \n   /* Emit moves.  We'll need SIZE_TO_MOVE/PIECE_SIZES moves.  */\n   gcc_assert (size_to_move % piece_size == 0);\n-  adjust = GEN_INT (piece_size);\n+\n   for (i = 0; i < size_to_move; i += piece_size)\n     {\n       /* We move from memory to memory, so we'll need to do it via\n@@ -6032,9 +6032,9 @@ emit_memmov (rtx destmem, rtx *srcmem, rtx destptr, rtx srcptr,\n       emit_insn (GEN_FCN (code) (dst, tempreg));\n \n       emit_move_insn (destptr,\n-\t\t      gen_rtx_PLUS (Pmode, copy_rtx (destptr), adjust));\n+\t\t      plus_constant (Pmode, copy_rtx (destptr), piece_size));\n       emit_move_insn (srcptr,\n-\t\t      gen_rtx_PLUS (Pmode, copy_rtx (srcptr), adjust));\n+\t\t      plus_constant (Pmode, copy_rtx (srcptr), piece_size));\n \n       dst = adjust_automodify_address_nv (dst, move_mode, destptr,\n \t\t\t\t\t  piece_size);\n@@ -6191,7 +6191,7 @@ static rtx\n emit_memset (rtx destmem, rtx destptr, rtx promoted_val,\n \t     HOST_WIDE_INT size_to_move)\n {\n-  rtx dst = destmem, adjust;\n+  rtx dst = destmem;\n   enum insn_code code;\n   machine_mode move_mode;\n   int piece_size, i;\n@@ -6216,7 +6216,7 @@ emit_memset (rtx destmem, rtx destptr, rtx promoted_val,\n \n   /* Emit moves.  We'll need SIZE_TO_MOVE/PIECE_SIZES moves.  */\n   gcc_assert (size_to_move % piece_size == 0);\n-  adjust = GEN_INT (piece_size);\n+\n   for (i = 0; i < size_to_move; i += piece_size)\n     {\n       if (piece_size <= GET_MODE_SIZE (word_mode))\n@@ -6230,7 +6230,7 @@ emit_memset (rtx destmem, rtx destptr, rtx promoted_val,\n       emit_insn (GEN_FCN (code) (dst, promoted_val));\n \n       emit_move_insn (destptr,\n-\t\t      gen_rtx_PLUS (Pmode, copy_rtx (destptr), adjust));\n+\t\t      plus_constant (Pmode, copy_rtx (destptr), piece_size));\n \n       dst = adjust_automodify_address_nv (dst, move_mode, destptr,\n \t\t\t\t\t  piece_size);\n@@ -7783,7 +7783,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \t\t\t\t\t\t     reg,\n \t\t\t\t\t\t     tmpreg)));\n        /* Emit lea manually to avoid clobbering of flags.  */\n-       emit_insn (gen_rtx_SET (reg2, gen_rtx_PLUS (Pmode, out, const2_rtx)));\n+       emit_insn (gen_rtx_SET (reg2, plus_constant (Pmode, out, 2)));\n \n        tmp = gen_rtx_REG (CCNOmode, FLAGS_REG);\n        tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);"}, {"sha": "b4ecc3ce832be1d4714534fd92fb1159c5c8f644", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3185b64529529941ec99a9a26bc5552677ee7c7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3185b64529529941ec99a9a26bc5552677ee7c7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c3185b64529529941ec99a9a26bc5552677ee7c7", "patch": "@@ -7101,14 +7101,14 @@ release_scratch_register_on_entry (struct scratch_reg *sr, HOST_WIDE_INT offset,\n \n \t  /* The RX FRAME_RELATED_P mechanism doesn't know about pop.  */\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  x = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (UNITS_PER_WORD));\n+\t  x = plus_constant (Pmode, stack_pointer_rtx, UNITS_PER_WORD);\n \t  x = gen_rtx_SET (stack_pointer_rtx, x);\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, x);\n \t  m->fs.sp_offset -= UNITS_PER_WORD;\n \t}\n       else\n \t{\n-\t  rtx x = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (offset));\n+\t  rtx x = plus_constant (Pmode, stack_pointer_rtx, offset);\n \t  x = gen_rtx_SET (sr->reg, gen_rtx_MEM (word_mode, x));\n \t  emit_insn (x);\n \t}\n@@ -7895,7 +7895,7 @@ gen_frame_set (rtx reg, rtx frame_reg, int offset, bool store)\n   rtx addr, mem;\n \n   if (offset)\n-    addr = gen_rtx_PLUS (Pmode, frame_reg, GEN_INT (offset));\n+    addr = plus_constant (Pmode, frame_reg, offset);\n   mem = gen_frame_mem (GET_MODE (reg), offset ? addr : frame_reg);\n   return gen_rtx_SET (store ? mem : reg, store ? reg : mem);\n }\n@@ -8591,8 +8591,8 @@ ix86_emit_restore_reg_using_pop (rtx reg)\n \t  m->fs.cfa_offset -= UNITS_PER_WORD;\n \n \t  add_reg_note (insn, REG_CFA_DEF_CFA,\n-\t\t\tgen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t      GEN_INT (m->fs.cfa_offset)));\n+\t\t\tplus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t       m->fs.cfa_offset));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n     }\n@@ -8776,7 +8776,7 @@ ix86_emit_outlined_ms2sysv_restore (const struct ix86_frame &frame,\n \t  gcc_assert (m->fs.fp_valid);\n \t  gcc_assert (m->fs.cfa_reg == hard_frame_pointer_rtx);\n \n-\t  tmp = gen_rtx_PLUS (DImode, rbp, GEN_INT (8));\n+\t  tmp = plus_constant (DImode, rbp, 8);\n \t  RTVEC_ELT (v, vi++) = gen_rtx_SET (stack_pointer_rtx, tmp);\n \t  RTVEC_ELT (v, vi++) = gen_rtx_SET (rbp, gen_rtx_MEM (DImode, rbp));\n \t  tmp = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode));\n@@ -8790,7 +8790,7 @@ ix86_emit_outlined_ms2sysv_restore (const struct ix86_frame &frame,\n \t  gcc_assert (m->fs.sp_valid);\n \n \t  r10 = gen_rtx_REG (DImode, R10_REG);\n-\t  tmp = gen_rtx_PLUS (Pmode, rsi, GEN_INT (stub_ptr_offset));\n+\t  tmp = plus_constant (Pmode, rsi, stub_ptr_offset);\n \t  emit_insn (gen_rtx_SET (r10, tmp));\n \n \t  RTVEC_ELT (v, vi++) = gen_rtx_SET (stack_pointer_rtx, r10);\n@@ -9187,17 +9187,16 @@ ix86_expand_epilogue (int style)\n \n       insn = emit_insn (gen_rtx_SET\n \t\t\t(stack_pointer_rtx,\n-\t\t\t gen_rtx_PLUS (Pmode,\n-\t\t\t\t       crtl->drap_reg,\n-\t\t\t\t       GEN_INT (-param_ptr_offset))));\n+\t\t\t plus_constant (Pmode, crtl->drap_reg,\n+\t\t\t\t\t-param_ptr_offset)));\n       m->fs.cfa_reg = stack_pointer_rtx;\n       m->fs.cfa_offset = param_ptr_offset;\n       m->fs.sp_offset = param_ptr_offset;\n       m->fs.realigned = false;\n \n       add_reg_note (insn, REG_CFA_DEF_CFA,\n-\t\t    gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t  GEN_INT (param_ptr_offset)));\n+\t\t    plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t   param_ptr_offset));\n       RTX_FRAME_RELATED_P (insn) = 1;\n \n       if (!call_used_or_fixed_reg_p (REGNO (crtl->drap_reg)))\n@@ -9709,8 +9708,8 @@ ix86_expand_split_stack_prologue (void)\n       */\n       words = TARGET_64BIT ? 3 : 5;\n       emit_insn (gen_rtx_SET (scratch_reg,\n-\t\t\t      gen_rtx_PLUS (Pmode, frame_reg,\n-\t\t\t\t\t    GEN_INT (words * UNITS_PER_WORD))));\n+\t\t\t      plus_constant (Pmode, frame_reg,\n+\t\t\t\t\t     words * UNITS_PER_WORD)));\n \n       varargs_label = gen_label_rtx ();\n       emit_jump_insn (gen_jump (varargs_label));\n@@ -9728,8 +9727,8 @@ ix86_expand_split_stack_prologue (void)\n   if (cfun->machine->split_stack_varargs_pointer != NULL_RTX)\n     {\n       emit_insn (gen_rtx_SET (scratch_reg,\n-\t\t\t      gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t    GEN_INT (UNITS_PER_WORD))));\n+\t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t     UNITS_PER_WORD)));\n \n       emit_label (varargs_label);\n       LABEL_NUSES (varargs_label) = 1;"}, {"sha": "6f3ac3ad5552e070738d1e94f9ce7108423a4af3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3185b64529529941ec99a9a26bc5552677ee7c7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3185b64529529941ec99a9a26bc5552677ee7c7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c3185b64529529941ec99a9a26bc5552677ee7c7", "patch": "@@ -1711,8 +1711,8 @@\n   split_double_mode (DImode, &operands[1], 1, &operands[2], &operands[3]);\n \n   operands[1] = gen_lowpart (DImode, operands[2]);\n-  operands[2] = gen_rtx_MEM (SImode, gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t\t   GEN_INT (4)));\n+  operands[2] = gen_rtx_MEM (SImode,\n+\t\t\t     plus_constant (Pmode, stack_pointer_rtx, 4));\n })\n \n (define_insn \"*pushsi2\"\n@@ -17223,12 +17223,12 @@\n   if (!ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (operands[3])))\n     FAIL;\n \n-  rtx adjust = GEN_INT (GET_MODE_SIZE (GET_MODE (operands[1])));\n+  int piece_size = GET_MODE_SIZE (GET_MODE (operands[1]));\n \n   /* If .md ever supports :P for Pmode, these can be directly\n      in the pattern above.  */\n-  operands[5] = gen_rtx_PLUS (Pmode, operands[0], adjust);\n-  operands[6] = gen_rtx_PLUS (Pmode, operands[2], adjust);\n+  operands[5] = plus_constant (Pmode, operands[0], piece_size);\n+  operands[6] = plus_constant (Pmode, operands[2], piece_size);\n \n   /* Can't use this if the user has appropriated esi or edi.  */\n   if ((TARGET_SINGLE_STRINGOP || optimize_insn_for_size_p ())\n@@ -17442,9 +17442,9 @@\n \n   /* If .md ever supports :P for Pmode, this can be directly\n      in the pattern above.  */\n-  operands[3] = gen_rtx_PLUS (Pmode, operands[0],\n-\t\t\t      GEN_INT (GET_MODE_SIZE (GET_MODE\n-\t\t\t\t\t\t      (operands[2]))));\n+  operands[3] = plus_constant (Pmode, operands[0],\n+\t\t\t       GET_MODE_SIZE (GET_MODE (operands[2])));\n+\n   /* Can't use this if the user has appropriated eax or edi.  */\n   if ((TARGET_SINGLE_STRINGOP || optimize_insn_for_size_p ())\n       && !(fixed_regs[AX_REG] || fixed_regs[DI_REG]))"}]}