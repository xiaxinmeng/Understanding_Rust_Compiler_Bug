{"sha": "69a2d125d6071769f9ae2b98d35b0e2c4674d935", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlhMmQxMjVkNjA3MTc2OWY5YWUyYjk4ZDM1YjBlMmM0Njc0ZDkzNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-05-21T06:44:50Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-05-21T06:44:50Z"}, "message": "configure.ac: Check for trunc and truncf in libm.\n\n\t* configure.ac: Check for trunc and truncf in libm.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\t* intrinsics/c99_functions.c (trunc, truncf): New functions.\n\t* c99_protos.h (trunc, truncf): Declare them.\n\nFrom-SVN: r100040", "tree": {"sha": "e0800c58d9a0cf8ee2e6fb295ce7e5093a94bfd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0800c58d9a0cf8ee2e6fb295ce7e5093a94bfd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69a2d125d6071769f9ae2b98d35b0e2c4674d935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a2d125d6071769f9ae2b98d35b0e2c4674d935", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69a2d125d6071769f9ae2b98d35b0e2c4674d935", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a2d125d6071769f9ae2b98d35b0e2c4674d935/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "542b52ddb28497f5888a56fbf240cb40c7146714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/542b52ddb28497f5888a56fbf240cb40c7146714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/542b52ddb28497f5888a56fbf240cb40c7146714"}], "stats": {"total": 192, "additions": 191, "deletions": 1}, "files": [{"sha": "7e34ec8648305190a60cd5390e5c59130b1a5741", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=69a2d125d6071769f9ae2b98d35b0e2c4674d935", "patch": "@@ -1,3 +1,11 @@\n+2005-05-21  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* configure.ac: Check for trunc and truncf in libm.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* intrinsics/c99_functions.c (trunc, truncf): New functions.\n+\t* c99_protos.h (trunc, truncf): Declare them.\n+\n 2005-05-18  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/21127"}, {"sha": "521f205399a659a52fdbde6d1e782013e6c214e4", "filename": "libgfortran/c99_protos.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2Fc99_protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2Fc99_protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fc99_protos.h?ref=69a2d125d6071769f9ae2b98d35b0e2c4674d935", "patch": "@@ -113,6 +113,14 @@ extern float tanf(float);\n extern float tanhf(float);\n #endif\n \n+#ifndef HAVE_TRUNC\n+extern double trunc(double x);\n+#endif\n+\n+#ifndef HAVE_TRUNCF\n+extern float truncf(float x);\n+#endif\n+\n #ifndef HAVE_NEXTAFTERF\n extern float nextafterf(float, float);\n #endif"}, {"sha": "f1a5628a02086ca5e6e9b9af06366a6fab44f943", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=69a2d125d6071769f9ae2b98d35b0e2c4674d935", "patch": "@@ -264,6 +264,12 @@\n /* Define to 1 if you have the <time.h> header file. */\n #undef HAVE_TIME_H\n \n+/* libm includes trunc */\n+#undef HAVE_TRUNC\n+\n+/* libm includes truncf */\n+#undef HAVE_TRUNCF\n+\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n "}, {"sha": "463791ed4b585a47735643639ad724e0daf19e27", "filename": "libgfortran/configure", "status": "modified", "additions": 145, "deletions": 1, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=69a2d125d6071769f9ae2b98d35b0e2c4674d935", "patch": "@@ -2937,7 +2937,7 @@ if test \"x$GCC\" = \"xyes\"; then\n   AM_FCFLAGS=\"-Wall\"\n   ## We like to use C99 routines when available.  This makes sure that\n   ## __STDC_VERSION__ is set such that libc includes make them available.\n-  AM_CFLAGS=\"-std=gnu99 -Wall -Wstrict-prototypes  -Wmissing-prototypes -Wold-style-definition -Wextra -Wwrite-strings\"\n+  AM_CFLAGS=\"-std=gnu99 -Wall -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition -Wextra -Wwrite-strings\"\n fi\n \n \n@@ -9570,6 +9570,150 @@ _ACEOF\n \n fi\n \n+echo \"$as_me:$LINENO: checking for trunc in -lm\" >&5\n+echo $ECHO_N \"checking for trunc in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_trunc+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char trunc ();\n+int\n+main ()\n+{\n+trunc ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_trunc=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_trunc=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_trunc\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_trunc\" >&6\n+if test $ac_cv_lib_m_trunc = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_TRUNC 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for truncf in -lm\" >&5\n+echo $ECHO_N \"checking for truncf in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_truncf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char truncf ();\n+int\n+main ()\n+{\n+truncf ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_truncf=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_truncf=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_truncf\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_truncf\" >&6\n+if test $ac_cv_lib_m_truncf = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_TRUNCF 1\n+_ACEOF\n+\n+fi\n+\n echo \"$as_me:$LINENO: checking for erf in -lm\" >&5\n echo $ECHO_N \"checking for erf in -lm... $ECHO_C\" >&6\n if test \"${ac_cv_lib_m_erf+set}\" = set; then"}, {"sha": "efda28009d282e8a878bfea6945ed713f84ad908", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=69a2d125d6071769f9ae2b98d35b0e2c4674d935", "patch": "@@ -206,6 +206,8 @@ AC_CHECK_LIB([m],[sinhf],[AC_DEFINE([HAVE_SINHF],[1],[libm includes sinhf])])\n AC_CHECK_LIB([m],[sqrtf],[AC_DEFINE([HAVE_SQRTF],[1],[libm includes sqrtf])])\n AC_CHECK_LIB([m],[tanf],[AC_DEFINE([HAVE_TANF],[1],[libm includes tanf])])\n AC_CHECK_LIB([m],[tanhf],[AC_DEFINE([HAVE_TANHF],[1],[libm includes tanhf])])\n+AC_CHECK_LIB([m],[trunc],[AC_DEFINE([HAVE_TRUNC],[1],[libm includes trunc])])\n+AC_CHECK_LIB([m],[truncf],[AC_DEFINE([HAVE_TRUNCF],[1],[libm includes truncf])])\n AC_CHECK_LIB([m],[erf],[AC_DEFINE([HAVE_ERF],[1],[libm includes erf])])\n AC_CHECK_LIB([m],[erfc],[AC_DEFINE([HAVE_ERFC],[1],[libm includes erfc])])\n AC_CHECK_LIB([m],[erfcf],[AC_DEFINE([HAVE_ERFCF],[1],[libm includes erfcf])])"}, {"sha": "6296904b56da55687e613e233f683f35a7ab3f7a", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a2d125d6071769f9ae2b98d35b0e2c4674d935/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=69a2d125d6071769f9ae2b98d35b0e2c4674d935", "patch": "@@ -202,6 +202,28 @@ tanhf(float x)\n }\n #endif\n \n+#ifndef HAVE_TRUNC\n+double\n+trunc(double x)\n+{\n+  if (!isfinite (x))\n+    return x;\n+\n+  if (x < 0.0)\n+    return - floor (-x);\n+  else\n+    return floor (x);\n+}\n+#endif\n+\n+#ifndef HAVE_TRUNCF\n+float\n+truncf(float x)\n+{\n+  return (float) trunc (x);\n+}\n+#endif\n+\n #ifndef HAVE_NEXTAFTERF\n /* This is a portable implementation of nextafterf that is intended to be\n    independent of the floating point format or its in memory representation."}]}