{"sha": "7df9b6f12abfa68c13d9485855dbe22da3167d49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RmOWI2ZjEyYWJmYTY4YzEzZDk0ODU4NTVkYmUyMmRhMzE2N2Q0OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-20T12:56:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-20T12:56:32Z"}, "message": "poly_int: get_object_alignment_2\n\nThis patch makes get_object_alignment_2 track polynomial offsets\nand sizes.  The real work is done by get_inner_reference, but we\nthen need to handle the alignment correctly.\n\n2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* builtins.c (get_object_alignment_2): Track polynomial offsets\n\tand sizes.  Update the alignment handling.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255893", "tree": {"sha": "0fa30a79b53135aaf28e24184ec7b99dcb0c15f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fa30a79b53135aaf28e24184ec7b99dcb0c15f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7df9b6f12abfa68c13d9485855dbe22da3167d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df9b6f12abfa68c13d9485855dbe22da3167d49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7df9b6f12abfa68c13d9485855dbe22da3167d49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df9b6f12abfa68c13d9485855dbe22da3167d49/comments", "author": null, "committer": null, "parents": [{"sha": "06889da8cc1feb59b65058c51e224bf78248781a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06889da8cc1feb59b65058c51e224bf78248781a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06889da8cc1feb59b65058c51e224bf78248781a"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "c0c6c81b572da1a464e55ad17c52ef47f42b2d27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df9b6f12abfa68c13d9485855dbe22da3167d49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df9b6f12abfa68c13d9485855dbe22da3167d49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7df9b6f12abfa68c13d9485855dbe22da3167d49", "patch": "@@ -1,3 +1,10 @@\n+2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* builtins.c (get_object_alignment_2): Track polynomial offsets\n+\tand sizes.  Update the alignment handling.\n+\n 2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "277bbe8db269d69791251a66d49ecff8e0d9e43a", "filename": "gcc/builtins.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df9b6f12abfa68c13d9485855dbe22da3167d49/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df9b6f12abfa68c13d9485855dbe22da3167d49/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7df9b6f12abfa68c13d9485855dbe22da3167d49", "patch": "@@ -248,7 +248,7 @@ static bool\n get_object_alignment_2 (tree exp, unsigned int *alignp,\n \t\t\tunsigned HOST_WIDE_INT *bitposp, bool addr_p)\n {\n-  HOST_WIDE_INT bitsize, bitpos;\n+  poly_int64 bitsize, bitpos;\n   tree offset;\n   machine_mode mode;\n   int unsignedp, reversep, volatilep;\n@@ -373,8 +373,17 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n \t}\n     }\n \n+  /* Account for the alignment of runtime coefficients, so that the constant\n+     bitpos is guaranteed to be accurate.  */\n+  unsigned int alt_align = ::known_alignment (bitpos - bitpos.coeffs[0]);\n+  if (alt_align != 0 && alt_align < align)\n+    {\n+      align = alt_align;\n+      known_alignment = false;\n+    }\n+\n   *alignp = align;\n-  *bitposp = bitpos & (*alignp - 1);\n+  *bitposp = bitpos.coeffs[0] & (align - 1);\n   return known_alignment;\n }\n "}]}