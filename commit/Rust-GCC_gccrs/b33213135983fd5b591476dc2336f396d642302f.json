{"sha": "b33213135983fd5b591476dc2336f396d642302f", "node_id": "C_kwDOANBUbNoAKGIzMzIxMzEzNTk4M2ZkNWI1OTE0NzZkYzIzMzZmMzk2ZDY0MjMwMmY", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2023-03-21T22:35:49Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2023-03-21T22:35:49Z"}, "message": "stor-layout: Set TYPE_TYPELESS_STORAGE consistently for type variants\n\nI've observed an LTO wrong-code bug with a large testcase in GCC 12,\nthat results from TYPE_TYPELESS_STORAGE not being set consistently on\ntype variants.\n\nSpecifically, in the LTO stage of compilation, there is an aggregate\ntype passed to get_alias_set, whose TYPE_MAIN_VARIANT does not have\nTYPE_TYPELESS_STORAGE set.  However, the TYPE_CANONICAL of that main\nvariant *does* have have TYPE_TYPELESS_STORAGE set; note that the use\nof TYPE_CANONICAL in get_alias_set comes after the check of\nTYPE_TYPELESS_STORAGE.  The effect is that when (one-argument)\nrecord_component_aliases is called, the recursive call to\nget_alias_set gives alias set 0, and the aggregate type ends up not\nbeing considered to alias its members, with wrong-code consequences.\n\nI haven't managed to produce a self-contained executable testcase to\ndemonstrate this, but it clearly seems appropriate for\nTYPE_TYPELESS_STORAGE to be consistent on type variants, so this patch\nmakes it so, which appears to be sufficient to resolve the bug.  I've\nattached a reduced test to\n<https://gcc.gnu.org/pipermail/gcc-patches/2023-March/614278.html>\nthat does at least demonstrate main-variant versions of a type (SB in\nthis test) being written out to LTO IR both with and without\nTYPE_TYPELESS_STORAGE, although not the subsequent consequences of a\ntype without TYPE_TYPELESS_STORAGE with a TYPE_CANONICAL (as\nconstructed after LTO type merging) with TYPE_TYPELESS_STORAGE and\nfollowing wrong-code.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\n\t* stor-layout.cc (finalize_type_size): Copy TYPE_TYPELESS_STORAGE\n\tto variants.", "tree": {"sha": "43256c1469714e489baf042f32ba38a82b211b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43256c1469714e489baf042f32ba38a82b211b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b33213135983fd5b591476dc2336f396d642302f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33213135983fd5b591476dc2336f396d642302f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33213135983fd5b591476dc2336f396d642302f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33213135983fd5b591476dc2336f396d642302f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fac64bf456cf56f0c6309d21286b7eaf170f668e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac64bf456cf56f0c6309d21286b7eaf170f668e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fac64bf456cf56f0c6309d21286b7eaf170f668e"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "023de8c37db8593b7f694294f9d0b71415420857", "filename": "gcc/stor-layout.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33213135983fd5b591476dc2336f396d642302f/gcc%2Fstor-layout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33213135983fd5b591476dc2336f396d642302f/gcc%2Fstor-layout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.cc?ref=b33213135983fd5b591476dc2336f396d642302f", "patch": "@@ -1996,6 +1996,7 @@ finalize_type_size (tree type)\n       unsigned int user_align = TYPE_USER_ALIGN (type);\n       machine_mode mode = TYPE_MODE (type);\n       bool empty_p = TYPE_EMPTY_P (type);\n+      bool typeless = AGGREGATE_TYPE_P (type) && TYPE_TYPELESS_STORAGE (type);\n \n       /* Copy it into all variants.  */\n       for (variant = TYPE_MAIN_VARIANT (type);\n@@ -2020,6 +2021,8 @@ finalize_type_size (tree type)\n \t  TYPE_PRECISION (variant) = precision;\n \t  SET_TYPE_MODE (variant, mode);\n \t  TYPE_EMPTY_P (variant) = empty_p;\n+\t  if (AGGREGATE_TYPE_P (variant))\n+\t    TYPE_TYPELESS_STORAGE (variant) = typeless;\n \t}\n     }\n }"}]}