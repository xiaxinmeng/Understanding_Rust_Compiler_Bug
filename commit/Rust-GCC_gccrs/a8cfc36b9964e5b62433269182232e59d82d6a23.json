{"sha": "a8cfc36b9964e5b62433269182232e59d82d6a23", "node_id": "C_kwDOANBUbNoAKGE4Y2ZjMzZiOTk2NGU1YjYyNDMzMjY5MTgyMjMyZTU5ZDgyZDZhMjM", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-07-06T15:22:29Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-07-10T03:36:22Z"}, "message": "loongarch: avoid unnecessary sign-extend after 32-bit division\n\nLike add.w/sub.w/mul.w, div.w/mod.w/div.wu/mod.wu also sign-extend the\noutput on LA64.  But, LoongArch v1.00 mandates that the inputs of 32-bit\ndivision to be sign-extended so we have to expand 32-bit division into\nRTL sequences.\n\nWe defined div.w/mod.w/div.wu/mod.wu as a (DI, DI) -> SI instruction.\nThis definition does not indicate the fact that these instructions will\nstore the result as sign-extended value in a 64-bit GR.  Then the\ncompiler would emit unnecessary sign-extend operations.  For example:\n\n    int div(int a, int b) { return a / b; }\n\nwas compiled to:\n\n    div.w  $r4, $r4, $r5\n    slli.w $r4, $r4, 0    # this is unnecessary\n    jr     $r1\n\nTo remove this unnecessary operation, we change the division\ninstructions to (DI, DI) -> DI and describe the sign-extend behavior\nexplicitly in the RTL template.  In the expander for 32-bit division we\nthen use simplify_gen_subreg to extract the lower 32 bits.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (<any_div>di3_fake): Describe\n\tthe sign-extend of result in the RTL template.\n\t(<any_div><mode>3): Adjust for <any_div>di3_fake change.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/div-4.c: New test.", "tree": {"sha": "dc93a0730ef26fb08ad70198cb3098c12ac87426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc93a0730ef26fb08ad70198cb3098c12ac87426"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8cfc36b9964e5b62433269182232e59d82d6a23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYspJNgAKCRCsqtIOGecQ\n448QAQDds1JWNPPbs1Arw6RkOTKC/sZyX39tjXV1IKHXU0t7cgD8DBROGjc+5JO4\nmmo7lNjVnp6pGZI3mCWk9t+4CmfmPgw=\n=PLJC\n-----END PGP SIGNATURE-----", "payload": "tree dc93a0730ef26fb08ad70198cb3098c12ac87426\nparent a5d3826f7648c4c7763dba8882e6722deae0c116\nauthor Xi Ruoyao <xry111@xry111.site> 1657120949 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1657424182 +0800\n\nloongarch: avoid unnecessary sign-extend after 32-bit division\n\nLike add.w/sub.w/mul.w, div.w/mod.w/div.wu/mod.wu also sign-extend the\noutput on LA64.  But, LoongArch v1.00 mandates that the inputs of 32-bit\ndivision to be sign-extended so we have to expand 32-bit division into\nRTL sequences.\n\nWe defined div.w/mod.w/div.wu/mod.wu as a (DI, DI) -> SI instruction.\nThis definition does not indicate the fact that these instructions will\nstore the result as sign-extended value in a 64-bit GR.  Then the\ncompiler would emit unnecessary sign-extend operations.  For example:\n\n    int div(int a, int b) { return a / b; }\n\nwas compiled to:\n\n    div.w  $r4, $r4, $r5\n    slli.w $r4, $r4, 0    # this is unnecessary\n    jr     $r1\n\nTo remove this unnecessary operation, we change the division\ninstructions to (DI, DI) -> DI and describe the sign-extend behavior\nexplicitly in the RTL template.  In the expander for 32-bit division we\nthen use simplify_gen_subreg to extract the lower 32 bits.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (<any_div>di3_fake): Describe\n\tthe sign-extend of result in the RTL template.\n\t(<any_div><mode>3): Adjust for <any_div>di3_fake change.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/div-4.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8cfc36b9964e5b62433269182232e59d82d6a23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8cfc36b9964e5b62433269182232e59d82d6a23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8cfc36b9964e5b62433269182232e59d82d6a23/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d3826f7648c4c7763dba8882e6722deae0c116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d3826f7648c4c7763dba8882e6722deae0c116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d3826f7648c4c7763dba8882e6722deae0c116"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "5c0445dd879538aacb521a23bf5a61e4a1d6c627", "filename": "gcc/config/loongarch/loongarch.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8cfc36b9964e5b62433269182232e59d82d6a23/gcc%2Fconfig%2Floongarch%2Floongarch.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8cfc36b9964e5b62433269182232e59d82d6a23/gcc%2Fconfig%2Floongarch%2Floongarch.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.md?ref=a8cfc36b9964e5b62433269182232e59d82d6a23", "patch": "@@ -752,14 +752,17 @@\n   {\n     rtx reg1 = gen_reg_rtx (DImode);\n     rtx reg2 = gen_reg_rtx (DImode);\n+    rtx rd = gen_reg_rtx (DImode);\n \n     operands[1] = gen_rtx_SIGN_EXTEND (word_mode, operands[1]);\n     operands[2] = gen_rtx_SIGN_EXTEND (word_mode, operands[2]);\n \n     emit_insn (gen_rtx_SET (reg1, operands[1]));\n     emit_insn (gen_rtx_SET (reg2, operands[2]));\n \n-    emit_insn (gen_<optab>di3_fake (operands[0], reg1, reg2));\n+    emit_insn (gen_<optab>di3_fake (rd, reg1, reg2));\n+    emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t    simplify_gen_subreg (SImode, rd, DImode, 0)));\n     DONE;\n   }\n })\n@@ -781,9 +784,10 @@\n \t(const_string \"no\")))])\n \n (define_insn \"<optab>di3_fake\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,&r,&r\")\n-\t(any_div:SI (match_operand:DI 1 \"register_operand\" \"r,r,0\")\n-\t\t    (match_operand:DI 2 \"register_operand\" \"r,r,r\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,&r,&r\")\n+\t(sign_extend:DI\n+\t  (any_div:SI (match_operand:DI 1 \"register_operand\" \"r,r,0\")\n+\t\t      (match_operand:DI 2 \"register_operand\" \"r,r,r\"))))]\n   \"\"\n {\n   return loongarch_output_division (\"<insn>.w<u>\\t%0,%1,%2\", operands);"}, {"sha": "a52f87d6caf9ad3d44ff46495c17e82191e353d7", "filename": "gcc/testsuite/gcc.target/loongarch/div-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8cfc36b9964e5b62433269182232e59d82d6a23/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8cfc36b9964e5b62433269182232e59d82d6a23/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fdiv-4.c?ref=a8cfc36b9964e5b62433269182232e59d82d6a23", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"slli\" } } */\n+\n+int\n+div(int a, int b)\n+{\n+  return a / b;\n+}"}]}