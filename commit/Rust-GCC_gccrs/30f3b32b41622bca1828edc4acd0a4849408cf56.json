{"sha": "30f3b32b41622bca1828edc4acd0a4849408cf56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBmM2IzMmI0MTYyMmJjYTE4MjhlZGM0YWNkMGE0ODQ5NDA4Y2Y1Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-03-19T15:08:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-03-19T15:08:45Z"}, "message": "[multiple changes]\n\n2004-03-19  Arnaud Charlet  <charlet@act-europe.fr>\n\n\t* ada-tree.h: Update copyright notice.\n\tMinor reformatting.\n\n2004-03-19  Olivier Hainque  <hainque@act-europe.fr>\n\n\t* decl.c (gnat_to_gnu_entity, case E_Exception): Handle VMS exceptions\n\tas regular exception objects and not as mere integers representing the\n\tcondition code.  The latter approach required some dynamics to mask off\n\tseverity bits, which did not fit well into the GCC table based model.\n\t(gnat_to_gnu_entity, objects): Don't supply an external name for VMS\n\texception data objects. We don't it and it would conflict with the other\n\texternal symbol we have to generate for such exceptions.\n\n\t* trans.c (tree_transform, case N_Exception_Handler): Remove part of\n\tthe special code for VMS exceptions, since these are now represented\n\tas regular exceptions objects.\n\nFrom-SVN: r79686", "tree": {"sha": "e181864591b43e4b8cf43a1659ca70d4bdb4ddb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e181864591b43e4b8cf43a1659ca70d4bdb4ddb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30f3b32b41622bca1828edc4acd0a4849408cf56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f3b32b41622bca1828edc4acd0a4849408cf56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f3b32b41622bca1828edc4acd0a4849408cf56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f3b32b41622bca1828edc4acd0a4849408cf56/comments", "author": null, "committer": null, "parents": [{"sha": "ab7ac2227a53d6c5f602958c1e1a60762da03899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab7ac2227a53d6c5f602958c1e1a60762da03899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab7ac2227a53d6c5f602958c1e1a60762da03899"}], "stats": {"total": 122, "additions": 57, "deletions": 65}, "files": [{"sha": "d7d614a70168c8b5dd5f4e19d31ea63e655d8078", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f3b32b41622bca1828edc4acd0a4849408cf56/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f3b32b41622bca1828edc4acd0a4849408cf56/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=30f3b32b41622bca1828edc4acd0a4849408cf56", "patch": "@@ -1,3 +1,22 @@\n+2004-03-19  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\t* ada-tree.h: Update copyright notice.\n+\tMinor reformatting.\n+\n+2004-03-19  Olivier Hainque  <hainque@act-europe.fr>\n+\n+\t* decl.c (gnat_to_gnu_entity, case E_Exception): Handle VMS exceptions\n+\tas regular exception objects and not as mere integers representing the\n+\tcondition code.  The latter approach required some dynamics to mask off\n+\tseverity bits, which did not fit well into the GCC table based model.\n+\t(gnat_to_gnu_entity, objects): Don't supply an external name for VMS\n+\texception data objects. We don't it and it would conflict with the other\n+\texternal symbol we have to generate for such exceptions.\n+\n+\t* trans.c (tree_transform, case N_Exception_Handler): Remove part of\n+\tthe special code for VMS exceptions, since these are now represented\n+\tas regular exceptions objects.\n+\n 2004-03-19 Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* decl.c (debug_no_type_hash): Remove."}, {"sha": "aa256dc51e1e516ffd68069e0ef209426ba28d65", "filename": "gcc/ada/ada-tree.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f3b32b41622bca1828edc4acd0a4849408cf56/gcc%2Fada%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f3b32b41622bca1828edc4acd0a4849408cf56/gcc%2Fada%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada-tree.h?ref=30f3b32b41622bca1828edc4acd0a4849408cf56", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2003 Free Software Foundation, Inc.          *\n+ *          Copyright (C) 1992-2004 Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -34,32 +34,32 @@ enum gnat_tree_code {\n #undef DEFTREECODE\n \n /* A tree to hold a loop ID.  */\n-struct tree_loop_id GTY(()) \n+struct tree_loop_id GTY(())\n {\n   struct tree_common common;\n   struct nesting *loop_id;\n };\n \n /* The language-specific tree.  */\n-union lang_tree_node \n+union lang_tree_node\n   GTY((desc (\"TREE_CODE (&%h.generic) == GNAT_LOOP_ID\"),\n        chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n {\n-  union tree_node GTY ((tag (\"0\"), \n-\t\t\tdesc (\"tree_node_structure (&%h)\"))) \n+  union tree_node GTY ((tag (\"0\"),\n+\t\t\tdesc (\"tree_node_structure (&%h)\")))\n     generic;\n   struct tree_loop_id GTY ((tag (\"1\"))) loop_id;\n };\n \n /* Ada uses the lang_decl and lang_type fields to hold more trees.  */\n-struct lang_decl GTY(()) \n+struct lang_decl GTY(())\n {\n-  union lang_tree_node \n+  union lang_tree_node\n     GTY((desc (\"TREE_CODE (&%h.generic) == GNAT_LOOP_ID\"))) t;\n };\n struct lang_type GTY(())\n {\n-  union lang_tree_node \n+  union lang_tree_node\n     GTY((desc (\"TREE_CODE (&%h.generic) == GNAT_LOOP_ID\"))) t;\n };\n "}, {"sha": "fd82da9c87b59875de0ff5331593ae14b9dbf051", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f3b32b41622bca1828edc4acd0a4849408cf56/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f3b32b41622bca1828edc4acd0a4849408cf56/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=30f3b32b41622bca1828edc4acd0a4849408cf56", "patch": "@@ -365,34 +365,16 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n       goto object;\n \n     case E_Exception:\n-      /* If this is not a VMS exception, treat it as a normal object.\n-\t Otherwise, make an object at the specific address of character\n-\t type, point to it, and convert it to integer, and mask off\n-\t the lower 3 bits.  */\n-      if (! Is_VMS_Exception (gnat_entity))\n-\tgoto object;\n-\n-      /* Allocate the global object that we use to get the value of the\n-\t exception.  */\n-      gnu_decl = create_var_decl (gnu_entity_id,\n-\t\t\t\t  (Present (Interface_Name (gnat_entity))\n-\t\t\t\t   ? create_concat_name (gnat_entity, 0)\n-\t\t\t\t   : NULL_TREE),\n-\t\t\t\t  char_type_node, NULL_TREE, 0, 0, 1, 1,\n-\t\t\t\t  0);\n-\n-      /* Now return the expression giving the desired value.  */\n-      gnu_decl\n-\t= build_binary_op (BIT_AND_EXPR, integer_type_node,\n-\t\t\t   convert (integer_type_node,\n-\t\t\t\t    build_unary_op (ADDR_EXPR, NULL_TREE,\n-\t\t\t\t\t\t    gnu_decl)),\n-\t\t\t   build_unary_op (NEGATE_EXPR, integer_type_node,\n-\t\t\t\t\t   build_int_2 (7, 0)));\n-\n-      save_gnu_tree (gnat_entity, gnu_decl, 1);\n-      saved = 1;\n-      break;\n+      /* We used to special case VMS exceptions here to directly map them to\n+\t their associated condition code.  Since this code had to be masked\n+\t dynamically to strip off the severity bits, this caused trouble in\n+\t the GCC/ZCX case because the \"type\" pointers we store in the tables\n+\t have to be static.  We now don't special case here anymore, and let\n+\t the regular processing take place, which leaves us with a regular\n+\t exception data object for VMS exceptions too.  The condition code\n+\t mapping is taken care of by the front end and the bitmasking by the\n+\t runtime library.   */\n+      goto object;\n \n     case E_Discriminant:\n     case E_Component:\n@@ -1017,13 +999,17 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t      (TYPE_SIZE (TREE_TYPE (TYPE_FIELDS (gnu_type)))))))\n \t  gnu_expr = convert (gnu_type, gnu_expr);\n \n-\t/* This name is external or there was a name specified, use it.\n-\t   Don't use the Interface_Name if there is an address clause.\n-\t   (see CD30005).  */\n-\tif ((Present (Interface_Name (gnat_entity))\n-\t     && No (Address_Clause (gnat_entity)))\n-\t    || (Is_Public (gnat_entity)\n-\t\t&& (! Is_Imported (gnat_entity) || Is_Exported (gnat_entity))))\n+\t/* If this name is external or there was a name specified, use it,\n+\t   unless this is a VMS exception object since this would conflict\n+\t   with the symbol we need to export in addition.  Don't use the\n+\t   Interface_Name if there is an address clause (see CD30005).  */\n+\tif (! Is_VMS_Exception (gnat_entity)\n+\t    &&\n+\t    ((Present (Interface_Name (gnat_entity))\n+\t      && No (Address_Clause (gnat_entity)))\n+\t     ||\n+\t     (Is_Public (gnat_entity)\n+\t      && (! Is_Imported (gnat_entity) || Is_Exported (gnat_entity)))))\n \t  gnu_ext_name = create_concat_name (gnat_entity, 0);\n \n \tif (const_flag)"}, {"sha": "dc7c404d6e63c23aa605947e65ce2443fc002283", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f3b32b41622bca1828edc4acd0a4849408cf56/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f3b32b41622bca1828edc4acd0a4849408cf56/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=30f3b32b41622bca1828edc4acd0a4849408cf56", "patch": "@@ -3636,30 +3636,14 @@ tree_transform (Node_Id gnat_node)\n \t\t  if (Present (Renamed_Object (gnat_ex_id)))\n \t\t    gnat_ex_id = Renamed_Object (gnat_ex_id);\n \n-\t\t  /* ??? Note that we have to use gnat_to_gnu_entity here\n-\t\t     since the type of the exception will be wrong in the\n-\t\t     VMS case and that's exactly what this test is for.  */\n \t\t  gnu_expr = gnat_to_gnu_entity (gnat_ex_id, NULL_TREE, 0);\n \n-\t\t  /* If this was a VMS exception, check import_code\n-\t\t     against the value of the exception.  */\n-\t\t  if (TREE_CODE (TREE_TYPE (gnu_expr)) == INTEGER_TYPE)\n-\t\t    this_choice\n-\t\t      = build_binary_op\n-\t\t\t(EQ_EXPR, integer_type_node,\n-\t\t\t build_component_ref\n-\t\t\t (build_unary_op\n-\t\t\t  (INDIRECT_REF, NULL_TREE,\n-\t\t\t   TREE_VALUE (gnu_except_ptr_stack)),\n-\t\t\t  get_identifier (\"import_code\"), NULL_TREE, 0),\n-\t\t\t gnu_expr);\n-\t\t  else\n-\t\t    this_choice\n-\t\t      = build_binary_op\n-\t\t\t(EQ_EXPR, integer_type_node,\n-\t\t\t TREE_VALUE (gnu_except_ptr_stack),\n-\t\t\t convert\n-\t\t\t (TREE_TYPE (TREE_VALUE (gnu_except_ptr_stack)),\n+\t\t  this_choice\n+\t\t    = build_binary_op\n+\t\t      (EQ_EXPR, integer_type_node,\n+\t\t       TREE_VALUE (gnu_except_ptr_stack),\n+\t\t       convert\n+\t\t         (TREE_TYPE (TREE_VALUE (gnu_except_ptr_stack)),\n \t\t\t  build_unary_op (ADDR_EXPR, NULL_TREE, gnu_expr)));\n \n \t\t  /* If this is the distinguished exception \"Non_Ada_Error\"\n@@ -3742,6 +3726,9 @@ tree_transform (Node_Id gnat_node)\n \n  \t\t  gnu_etype\n \t\t    = build_unary_op (ADDR_EXPR, NULL_TREE, gnu_expr);\n+\n+\t\t  /* The Non_Ada_Error case for VMS exceptions is handled\n+\t\t     by the personality routine.  */\n  \t\t}\n  \t      else\n  \t\tgigi_abort (337);"}]}