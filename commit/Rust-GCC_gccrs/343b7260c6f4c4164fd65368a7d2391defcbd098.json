{"sha": "343b7260c6f4c4164fd65368a7d2391defcbd098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQzYjcyNjBjNmY0YzQxNjRmZDY1MzY4YTdkMjM5MWRlZmNiZDA5OA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-08-25T15:27:57Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-08-25T15:27:57Z"}, "message": "c-common.c (time_char_table): Don't allow width and flags with \"z\" format.\n\n\t* c-common.c (time_char_table): Don't allow width and flags with\n\t\"z\" format.\n\ntestsuite:\n\t* gcc.dg/format-ext-3.c, gcc.dg/format-ext-4.c,\n\tgcc.dg/format-ext-5.c: New tests.\n\nFrom-SVN: r35984", "tree": {"sha": "518850ff2e272e9d5d1d8fe45cb19896c30927f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/518850ff2e272e9d5d1d8fe45cb19896c30927f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/343b7260c6f4c4164fd65368a7d2391defcbd098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343b7260c6f4c4164fd65368a7d2391defcbd098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/343b7260c6f4c4164fd65368a7d2391defcbd098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343b7260c6f4c4164fd65368a7d2391defcbd098/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22efd68702b68b1f7577b1d96867ebb550dd1c5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22efd68702b68b1f7577b1d96867ebb550dd1c5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22efd68702b68b1f7577b1d96867ebb550dd1c5b"}], "stats": {"total": 271, "additions": 270, "deletions": 1}, "files": [{"sha": "ae8f0cac843ec0c7f85fa8469053ab02c027e992", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=343b7260c6f4c4164fd65368a7d2391defcbd098", "patch": "@@ -1,3 +1,8 @@\n+2000-08-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (time_char_table): Don't allow width and flags with\n+\t\"z\" format.\n+\n 2000-08-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.c (ix86_expand_branch): Treat GE and GEU the same"}, {"sha": "cf145ca1ecbce79575ed1035b5f5406f5e2cc6e7", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=343b7260c6f4c4164fd65368a7d2391defcbd098", "patch": "@@ -1294,7 +1294,8 @@ static format_char_info time_char_table[] = {\n   { \"e\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0Ow9\" },\n   { \"j\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0Oow\" },\n   { \"Vu\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0Ow9\" },\n-  { \"Gz\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0Oow9\" },\n+  { \"G\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0Oow9\" },\n+  { \"z\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"Oo9\" },\n   { \"kls\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0OGw\" },\n   { \"ABZa\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"^#\" },\n   { \"p\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"#\" },"}, {"sha": "b1b52726d3f241b61ce4ba826ae85ce351e4d93c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=343b7260c6f4c4164fd65368a7d2391defcbd098", "patch": "@@ -1,3 +1,8 @@\n+2000-08-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/format-ext-3.c, gcc.dg/format-ext-4.c,\n+\tgcc.dg/format-ext-5.c: New tests.\n+\n 2000-08-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/g++.old-deja/g++.other/crash22.C: New test."}, {"sha": "54ae6f3f9cddf762b2a6f95ba9890ff9b5bfd427", "filename": "gcc/testsuite/gcc.dg/format-ext-3.c", "status": "added", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-3.c?ref=343b7260c6f4c4164fd65368a7d2391defcbd098", "patch": "@@ -0,0 +1,217 @@\n+/* Test for format extensions beyond the C standard and X/Open standard.\n+   Test for strftime formats.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct tm;\n+\n+extern size_t strftime (char *, size_t, const char *, const struct tm *);\n+\n+void\n+foo (char *s, size_t m, const struct tm *tp)\n+{\n+  /* GCC accepts the \"-\", \"_\" and \"0\" flags to control padding on numeric\n+     formats.  It also accepts width on these formats.\n+  */\n+  /* Basic tests of parts on their own.  */\n+  strftime (s, m, \"%5C%-C%_C%0C\", tp);\n+  /* Correct usages.  */\n+  strftime (s, m, \"%-5C%_5C%05C%-5d%_5d%05d%-5e%_5e%05e%-5G%_5G%05G\", tp);\n+  strftime (s, m, \"%-5H%_5H%05H%-5I%_5I%05I%-5j%_5j%05j%-5m%_5m%05m\", tp);\n+  strftime (s, m, \"%-5M%_5M%05M%-5S%_5S%05S%-5u%_5u%05u%-5U%_5U%05U\", tp);\n+  strftime (s, m, \"%-5V%_5V%05V%-5w%_5w%05w%-5W%_5W%05W%-5Y%_5Y%05Y\", tp);\n+  /* Correct usages with GNU extension conversion characters.  */\n+  strftime (s, m, \"%-5k%_5k%05k%-5l%_5l%05l%-20s%_20s%020s\", tp);\n+  /* Correct usages with Y2K problems.  */\n+  strftime (s, m, \"%-5g%_5g%05g%-5y%_5y%05y\", tp); /* { dg-warning \"only last 2\" \"2-digit year\" } */\n+  /* Incorrect usages.  */\n+  strftime (s, m, \"%5a\", tp); /* { dg-warning \"width\" \"bad %a\" } */\n+  strftime (s, m, \"%-a\", tp); /* { dg-warning \"flag\" \"bad %a\" } */\n+  strftime (s, m, \"%_a\", tp); /* { dg-warning \"flag\" \"bad %a\" } */\n+  strftime (s, m, \"%0a\", tp); /* { dg-warning \"flag\" \"bad %a\" } */\n+  strftime (s, m, \"%5A\", tp); /* { dg-warning \"width\" \"bad %A\" } */\n+  strftime (s, m, \"%-A\", tp); /* { dg-warning \"flag\" \"bad %A\" } */\n+  strftime (s, m, \"%_A\", tp); /* { dg-warning \"flag\" \"bad %A\" } */\n+  strftime (s, m, \"%0A\", tp); /* { dg-warning \"flag\" \"bad %A\" } */\n+  strftime (s, m, \"%5b\", tp); /* { dg-warning \"width\" \"bad %b\" } */\n+  strftime (s, m, \"%-b\", tp); /* { dg-warning \"flag\" \"bad %b\" } */\n+  strftime (s, m, \"%_b\", tp); /* { dg-warning \"flag\" \"bad %b\" } */\n+  strftime (s, m, \"%0b\", tp); /* { dg-warning \"flag\" \"bad %b\" } */\n+  strftime (s, m, \"%5B\", tp); /* { dg-warning \"width\" \"bad %B\" } */\n+  strftime (s, m, \"%-B\", tp); /* { dg-warning \"flag\" \"bad %B\" } */\n+  strftime (s, m, \"%_B\", tp); /* { dg-warning \"flag\" \"bad %B\" } */\n+  strftime (s, m, \"%0B\", tp); /* { dg-warning \"flag\" \"bad %B\" } */\n+  strftime (s, m, \"%5F\", tp); /* { dg-warning \"width\" \"bad %F\" } */\n+  strftime (s, m, \"%-F\", tp); /* { dg-warning \"flag\" \"bad %F\" } */\n+  strftime (s, m, \"%_F\", tp); /* { dg-warning \"flag\" \"bad %F\" } */\n+  strftime (s, m, \"%0F\", tp); /* { dg-warning \"flag\" \"bad %F\" } */\n+  strftime (s, m, \"%5h\", tp); /* { dg-warning \"width\" \"bad %h\" } */\n+  strftime (s, m, \"%-h\", tp); /* { dg-warning \"flag\" \"bad %h\" } */\n+  strftime (s, m, \"%_h\", tp); /* { dg-warning \"flag\" \"bad %h\" } */\n+  strftime (s, m, \"%0h\", tp); /* { dg-warning \"flag\" \"bad %h\" } */\n+  strftime (s, m, \"%5n\", tp); /* { dg-warning \"width\" \"bad %n\" } */\n+  strftime (s, m, \"%-n\", tp); /* { dg-warning \"flag\" \"bad %n\" } */\n+  strftime (s, m, \"%_n\", tp); /* { dg-warning \"flag\" \"bad %n\" } */\n+  strftime (s, m, \"%0n\", tp); /* { dg-warning \"flag\" \"bad %n\" } */\n+  strftime (s, m, \"%5p\", tp); /* { dg-warning \"width\" \"bad %p\" } */\n+  strftime (s, m, \"%-p\", tp); /* { dg-warning \"flag\" \"bad %p\" } */\n+  strftime (s, m, \"%_p\", tp); /* { dg-warning \"flag\" \"bad %p\" } */\n+  strftime (s, m, \"%0p\", tp); /* { dg-warning \"flag\" \"bad %p\" } */\n+  strftime (s, m, \"%5r\", tp); /* { dg-warning \"width\" \"bad %r\" } */\n+  strftime (s, m, \"%-r\", tp); /* { dg-warning \"flag\" \"bad %r\" } */\n+  strftime (s, m, \"%_r\", tp); /* { dg-warning \"flag\" \"bad %r\" } */\n+  strftime (s, m, \"%0r\", tp); /* { dg-warning \"flag\" \"bad %r\" } */\n+  strftime (s, m, \"%5R\", tp); /* { dg-warning \"width\" \"bad %R\" } */\n+  strftime (s, m, \"%-R\", tp); /* { dg-warning \"flag\" \"bad %R\" } */\n+  strftime (s, m, \"%_R\", tp); /* { dg-warning \"flag\" \"bad %R\" } */\n+  strftime (s, m, \"%0R\", tp); /* { dg-warning \"flag\" \"bad %R\" } */\n+  strftime (s, m, \"%5t\", tp); /* { dg-warning \"width\" \"bad %t\" } */\n+  strftime (s, m, \"%-t\", tp); /* { dg-warning \"flag\" \"bad %t\" } */\n+  strftime (s, m, \"%_t\", tp); /* { dg-warning \"flag\" \"bad %t\" } */\n+  strftime (s, m, \"%0t\", tp); /* { dg-warning \"flag\" \"bad %t\" } */\n+  strftime (s, m, \"%5T\", tp); /* { dg-warning \"width\" \"bad %T\" } */\n+  strftime (s, m, \"%-T\", tp); /* { dg-warning \"flag\" \"bad %T\" } */\n+  strftime (s, m, \"%_T\", tp); /* { dg-warning \"flag\" \"bad %T\" } */\n+  strftime (s, m, \"%0T\", tp); /* { dg-warning \"flag\" \"bad %T\" } */\n+  strftime (s, m, \"%5X\", tp); /* { dg-warning \"width\" \"bad %X\" } */\n+  strftime (s, m, \"%-X\", tp); /* { dg-warning \"flag\" \"bad %X\" } */\n+  strftime (s, m, \"%_X\", tp); /* { dg-warning \"flag\" \"bad %X\" } */\n+  strftime (s, m, \"%0X\", tp); /* { dg-warning \"flag\" \"bad %X\" } */\n+  strftime (s, m, \"%5z\", tp); /* { dg-warning \"width\" \"bad %z\" } */\n+  strftime (s, m, \"%-z\", tp); /* { dg-warning \"flag\" \"bad %z\" } */\n+  strftime (s, m, \"%_z\", tp); /* { dg-warning \"flag\" \"bad %z\" } */\n+  strftime (s, m, \"%0z\", tp); /* { dg-warning \"flag\" \"bad %z\" } */\n+  strftime (s, m, \"%5Z\", tp); /* { dg-warning \"width\" \"bad %Z\" } */\n+  strftime (s, m, \"%-Z\", tp); /* { dg-warning \"flag\" \"bad %Z\" } */\n+  strftime (s, m, \"%_Z\", tp); /* { dg-warning \"flag\" \"bad %Z\" } */\n+  strftime (s, m, \"%0Z\", tp); /* { dg-warning \"flag\" \"bad %Z\" } */\n+  /* Incorrect usages with Y2K problems.  */\n+  strftime (s, m, \"%5c\", tp); /* { dg-warning \"width\" \"bad %c\" } */\n+  strftime (s, m, \"%-c\", tp); /* { dg-warning \"flag\" \"bad %c\" } */\n+  strftime (s, m, \"%_c\", tp); /* { dg-warning \"flag\" \"bad %c\" } */\n+  strftime (s, m, \"%0c\", tp); /* { dg-warning \"flag\" \"bad %c\" } */\n+  strftime (s, m, \"%5D\", tp); /* { dg-warning \"width\" \"bad %D\" } */\n+  strftime (s, m, \"%-D\", tp); /* { dg-warning \"flag\" \"bad %D\" } */\n+  strftime (s, m, \"%_D\", tp); /* { dg-warning \"flag\" \"bad %D\" } */\n+  strftime (s, m, \"%0D\", tp); /* { dg-warning \"flag\" \"bad %D\" } */\n+  strftime (s, m, \"%5x\", tp); /* { dg-warning \"width\" \"bad %x\" } */\n+  strftime (s, m, \"%-x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n+  strftime (s, m, \"%_x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n+  strftime (s, m, \"%0x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 93 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 94 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 95 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 96 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 97 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 98 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 99 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 100 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 101 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 102 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 103 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 104 } */\n+  /* Incorrect usages with GNU extension conversion characters.  */\n+  strftime (s, m, \"%5P\", tp); /* { dg-warning \"width\" \"bad %P\" } */\n+  strftime (s, m, \"%-P\", tp); /* { dg-warning \"flag\" \"bad %P\" } */\n+  strftime (s, m, \"%_P\", tp); /* { dg-warning \"flag\" \"bad %P\" } */\n+  strftime (s, m, \"%0P\", tp); /* { dg-warning \"flag\" \"bad %P\" } */\n+  /* The \"^\" and \"#\" flags control the case of the output.\n+     ^ (uppercase) makes sense on aAbBhZ; # (change case) makes sense\n+     on the same (though glibc ignores it on bh for some reason; for now our\n+     implementation in GCC follows glibc) and on p.\n+  */\n+  strftime (s, m, \"%^a%#a%^A%#A%^b%^B%#B%^h%^Z%#Z%#p\", tp);\n+  /* Bad usages.  */\n+  strftime (s, m, \"%#b\", tp); /* { dg-warning \"flag\" \"bad %b\" } */\n+  strftime (s, m, \"%^C\", tp); /* { dg-warning \"flag\" \"bad %C\" } */\n+  strftime (s, m, \"%#C\", tp); /* { dg-warning \"flag\" \"bad %C\" } */\n+  strftime (s, m, \"%^d\", tp); /* { dg-warning \"flag\" \"bad %d\" } */\n+  strftime (s, m, \"%#d\", tp); /* { dg-warning \"flag\" \"bad %d\" } */\n+  strftime (s, m, \"%^e\", tp); /* { dg-warning \"flag\" \"bad %e\" } */\n+  strftime (s, m, \"%#e\", tp); /* { dg-warning \"flag\" \"bad %e\" } */\n+  strftime (s, m, \"%^F\", tp); /* { dg-warning \"flag\" \"bad %F\" } */\n+  strftime (s, m, \"%#F\", tp); /* { dg-warning \"flag\" \"bad %F\" } */\n+  strftime (s, m, \"%^G\", tp); /* { dg-warning \"flag\" \"bad %G\" } */\n+  strftime (s, m, \"%#G\", tp); /* { dg-warning \"flag\" \"bad %G\" } */\n+  strftime (s, m, \"%#h\", tp); /* { dg-warning \"flag\" \"bad %h\" } */\n+  strftime (s, m, \"%^H\", tp); /* { dg-warning \"flag\" \"bad %H\" } */\n+  strftime (s, m, \"%#H\", tp); /* { dg-warning \"flag\" \"bad %H\" } */\n+  strftime (s, m, \"%^I\", tp); /* { dg-warning \"flag\" \"bad %I\" } */\n+  strftime (s, m, \"%#I\", tp); /* { dg-warning \"flag\" \"bad %I\" } */\n+  strftime (s, m, \"%^j\", tp); /* { dg-warning \"flag\" \"bad %j\" } */\n+  strftime (s, m, \"%#j\", tp); /* { dg-warning \"flag\" \"bad %j\" } */\n+  strftime (s, m, \"%^m\", tp); /* { dg-warning \"flag\" \"bad %m\" } */\n+  strftime (s, m, \"%#m\", tp); /* { dg-warning \"flag\" \"bad %m\" } */\n+  strftime (s, m, \"%^M\", tp); /* { dg-warning \"flag\" \"bad %M\" } */\n+  strftime (s, m, \"%#M\", tp); /* { dg-warning \"flag\" \"bad %M\" } */\n+  strftime (s, m, \"%^n\", tp); /* { dg-warning \"flag\" \"bad %n\" } */\n+  strftime (s, m, \"%#n\", tp); /* { dg-warning \"flag\" \"bad %n\" } */\n+  strftime (s, m, \"%^p\", tp); /* { dg-warning \"flag\" \"bad %p\" } */\n+  strftime (s, m, \"%^r\", tp); /* { dg-warning \"flag\" \"bad %r\" } */\n+  strftime (s, m, \"%#r\", tp); /* { dg-warning \"flag\" \"bad %r\" } */\n+  strftime (s, m, \"%^R\", tp); /* { dg-warning \"flag\" \"bad %R\" } */\n+  strftime (s, m, \"%#R\", tp); /* { dg-warning \"flag\" \"bad %R\" } */\n+  strftime (s, m, \"%^S\", tp); /* { dg-warning \"flag\" \"bad %S\" } */\n+  strftime (s, m, \"%#S\", tp); /* { dg-warning \"flag\" \"bad %S\" } */\n+  strftime (s, m, \"%^t\", tp); /* { dg-warning \"flag\" \"bad %t\" } */\n+  strftime (s, m, \"%#t\", tp); /* { dg-warning \"flag\" \"bad %t\" } */\n+  strftime (s, m, \"%^T\", tp); /* { dg-warning \"flag\" \"bad %T\" } */\n+  strftime (s, m, \"%#T\", tp); /* { dg-warning \"flag\" \"bad %T\" } */\n+  strftime (s, m, \"%^u\", tp); /* { dg-warning \"flag\" \"bad %u\" } */\n+  strftime (s, m, \"%#u\", tp); /* { dg-warning \"flag\" \"bad %u\" } */\n+  strftime (s, m, \"%^U\", tp); /* { dg-warning \"flag\" \"bad %U\" } */\n+  strftime (s, m, \"%#U\", tp); /* { dg-warning \"flag\" \"bad %U\" } */\n+  strftime (s, m, \"%^V\", tp); /* { dg-warning \"flag\" \"bad %V\" } */\n+  strftime (s, m, \"%#V\", tp); /* { dg-warning \"flag\" \"bad %V\" } */\n+  strftime (s, m, \"%^w\", tp); /* { dg-warning \"flag\" \"bad %w\" } */\n+  strftime (s, m, \"%#w\", tp); /* { dg-warning \"flag\" \"bad %w\" } */\n+  strftime (s, m, \"%^W\", tp); /* { dg-warning \"flag\" \"bad %W\" } */\n+  strftime (s, m, \"%#W\", tp); /* { dg-warning \"flag\" \"bad %W\" } */\n+  strftime (s, m, \"%^X\", tp); /* { dg-warning \"flag\" \"bad %X\" } */\n+  strftime (s, m, \"%#X\", tp); /* { dg-warning \"flag\" \"bad %X\" } */\n+  strftime (s, m, \"%^Y\", tp); /* { dg-warning \"flag\" \"bad %Y\" } */\n+  strftime (s, m, \"%#Y\", tp); /* { dg-warning \"flag\" \"bad %Y\" } */\n+  strftime (s, m, \"%^z\", tp); /* { dg-warning \"flag\" \"bad %z\" } */\n+  strftime (s, m, \"%#z\", tp); /* { dg-warning \"flag\" \"bad %z\" } */\n+  strftime (s, m, \"%^P\", tp); /* { dg-warning \"flag\" \"bad %P\" } */\n+  strftime (s, m, \"%#P\", tp); /* { dg-warning \"flag\" \"bad %P\" } */\n+  strftime (s, m, \"%^k\", tp); /* { dg-warning \"flag\" \"bad %k\" } */\n+  strftime (s, m, \"%#k\", tp); /* { dg-warning \"flag\" \"bad %k\" } */\n+  strftime (s, m, \"%^l\", tp); /* { dg-warning \"flag\" \"bad %l\" } */\n+  strftime (s, m, \"%#l\", tp); /* { dg-warning \"flag\" \"bad %l\" } */\n+  strftime (s, m, \"%^s\", tp); /* { dg-warning \"flag\" \"bad %s\" } */\n+  strftime (s, m, \"%#s\", tp); /* { dg-warning \"flag\" \"bad %s\" } */\n+  /* Bad usages with Y2K problems.  */\n+  strftime (s, m, \"%^c\", tp); /* { dg-warning \"flag\" \"bad %c\" } */\n+  strftime (s, m, \"%#c\", tp); /* { dg-warning \"flag\" \"bad %c\" } */\n+  strftime (s, m, \"%^D\", tp); /* { dg-warning \"flag\" \"bad %D\" } */\n+  strftime (s, m, \"%#D\", tp); /* { dg-warning \"flag\" \"bad %D\" } */\n+  strftime (s, m, \"%^g\", tp); /* { dg-warning \"flag\" \"bad %g\" } */\n+  strftime (s, m, \"%#g\", tp); /* { dg-warning \"flag\" \"bad %g\" } */\n+  strftime (s, m, \"%^x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n+  strftime (s, m, \"%#x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n+  strftime (s, m, \"%^y\", tp); /* { dg-warning \"flag\" \"bad %y\" } */\n+  strftime (s, m, \"%#y\", tp); /* { dg-warning \"flag\" \"bad %y\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 189 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 190 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 191 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 192 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 193 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 194 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 195 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 196 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 197 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 198 } */\n+  /* GCC also accepts the glibc format extensions %P, %k, %l, %s.  */\n+  strftime (s, m, \"%P%k%l%s\", tp);\n+  /* GCC also accepts the glibc extension of the \"O\" modifier on some\n+     more formats.  The cases where it is rejected altogether are\n+     covered in c99-strftime-1.c, except for the extension %P.\n+  */\n+  strftime (s, m, \"%OC%Og%OG%Oj%OY%Oz%Ok%Ol%Os\", tp); /* { dg-warning \"only last 2\" \"2-digit year\" } */\n+  strftime (s, m, \"%OP\", tp); /* { dg-warning \"flag\" \"bad %OP\" } */\n+}"}, {"sha": "c0cf740a9e604a5bbf7f5a9ea7fe61fdb26e8e4e", "filename": "gcc/testsuite/gcc.dg/format-ext-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-4.c?ref=343b7260c6f4c4164fd65368a7d2391defcbd098", "patch": "@@ -0,0 +1,20 @@\n+/* Test for scanf formats.  %a extensions.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89 -Wformat\" } */\n+\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+extern int scanf (const char *, ...);\n+\n+void\n+foo (char **sp, wchar_t **lsp)\n+{\n+  /* %a formats for allocation, only recognised in C90 mode, are a\n+     GNU extension.  Followed by other characters, %a is not treated\n+     specially.\n+  */\n+  scanf (\"%as\", sp);\n+  scanf (\"%aS\", lsp);\n+  scanf (\"%a[bcd]\", sp);\n+}"}, {"sha": "e3cce44b4463f5a1329ac50bff016fb2f5333989", "filename": "gcc/testsuite/gcc.dg/format-ext-5.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343b7260c6f4c4164fd65368a7d2391defcbd098/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-5.c?ref=343b7260c6f4c4164fd65368a7d2391defcbd098", "patch": "@@ -0,0 +1,21 @@\n+/* Test for gettext default attributes.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+extern int printf (const char *, ...);\n+\n+extern char *gettext (const char *);\n+extern char *dgettext (const char *, const char *);\n+extern char *dcgettext (const char *, const char *, int);\n+\n+void\n+foo (int i, long l)\n+{\n+  printf (gettext (\"%d\"), i);\n+  printf (gettext (\"%ld\"), i); /* { dg-warning \"format\" \"gettext\" } */\n+  printf (dgettext (\"\", \"%d\"), i);\n+  printf (dgettext (\"\", \"%ld\"), i); /* { dg-warning \"format\" \"dgettext\" } */\n+  printf (dcgettext (\"\", \"%d\", 0), i);\n+  printf (dcgettext (\"\", \"%ld\", 0), i); /* { dg-warning \"format\" \"dcgettext\" } */\n+}"}]}