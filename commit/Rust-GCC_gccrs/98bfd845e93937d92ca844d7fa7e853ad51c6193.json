{"sha": "98bfd845e93937d92ca844d7fa7e853ad51c6193", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThiZmQ4NDVlOTM5MzdkOTJjYTg0NGQ3ZmE3ZTg1M2FkNTFjNjE5Mw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-07-07T07:19:42Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-07-07T07:29:17Z"}, "message": "Add avx512 tests for MADDSUB and FMSUBADD SLP vectorization patterns.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512f-vect-fmaddsubXXXpd.c: New test.\n\t* gcc.target/i386/avx512f-vect-fmaddsubXXXps.c: New test.\n\t* gcc.target/i386/avx512f-vect-fmsubaddXXXpd.c: New test.\n\t* gcc.target/i386/avx512f-vect-fmsubaddXXXps.c: New test.", "tree": {"sha": "4a32a06c2289ef1c925528bd3b3d6c92ce5a7e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a32a06c2289ef1c925528bd3b3d6c92ce5a7e7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98bfd845e93937d92ca844d7fa7e853ad51c6193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98bfd845e93937d92ca844d7fa7e853ad51c6193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98bfd845e93937d92ca844d7fa7e853ad51c6193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98bfd845e93937d92ca844d7fa7e853ad51c6193/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fba0eea8d6464966ac6d37af98a7487a9a03d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fba0eea8d6464966ac6d37af98a7487a9a03d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fba0eea8d6464966ac6d37af98a7487a9a03d19"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "734f9e014436ba27fee622136dcc51d5f09408b1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vect-fmaddsubXXXpd.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98bfd845e93937d92ca844d7fa7e853ad51c6193/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmaddsubXXXpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98bfd845e93937d92ca844d7fa7e853ad51c6193/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmaddsubXXXpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmaddsubXXXpd.c?ref=98bfd845e93937d92ca844d7fa7e853ad51c6193", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O3 -mfma -save-temps -mavx512f -mprefer-vector-width=512\" } */\n+\n+#include \"fma-check.h\"\n+void __attribute__((noipa))\n+check_fmaddsub (double * __restrict a, double *b, double *c, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      a[8*i + 0] = b[8*i + 0] * c[8*i + 0] - a[8*i + 0];\n+      a[8*i + 1] = b[8*i + 1] * c[8*i + 1] + a[8*i + 1];\n+      a[8*i + 2] = b[8*i + 2] * c[8*i + 2] - a[8*i + 2];\n+      a[8*i + 3] = b[8*i + 3] * c[8*i + 3] + a[8*i + 3];\n+      a[8*i + 4] = b[8*i + 4] * c[8*i + 4] - a[8*i + 4];\n+      a[8*i + 5] = b[8*i + 5] * c[8*i + 5] + a[8*i + 5];\n+      a[8*i + 6] = b[8*i + 6] * c[8*i + 6] - a[8*i + 6];\n+      a[8*i + 7] = b[8*i + 7] * c[8*i + 7] + a[8*i + 7];\n+    }\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  if (!__builtin_cpu_supports (\"avx512f\"))\n+    return;\n+  double a[8], b[8], c[8];\n+  for (int i = 0; i < 8; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = 3*i;\n+      c[i] = 7*i;\n+    }\n+  check_fmaddsub (a, b, c, 1);\n+  const double d[8] = { 0., 22., 82., 192., 332., 530., 750., 1036.};\n+  for (int i = 0; i < 8; ++i)\n+    if (a[i] != d[i])\n+      __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-assembler {(?n)fmaddsub...pd[ \\t].*%zmm[0-9]} } } */"}, {"sha": "ae196c5ef48d22401efc554200897b98d9acbcb5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vect-fmaddsubXXXps.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98bfd845e93937d92ca844d7fa7e853ad51c6193/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmaddsubXXXps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98bfd845e93937d92ca844d7fa7e853ad51c6193/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmaddsubXXXps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmaddsubXXXps.c?ref=98bfd845e93937d92ca844d7fa7e853ad51c6193", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O3 -mavx512f -mprefer-vector-width=512 -save-temps\" } */\n+\n+#include \"fma-check.h\"\n+void __attribute__((noipa))\n+check_fmaddsub (float * __restrict a, float *b, float *c, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      a[16*i + 0] = b[16*i + 0] * c[16*i + 0] - a[16*i + 0];\n+      a[16*i + 1] = b[16*i + 1] * c[16*i + 1] + a[16*i + 1];\n+      a[16*i + 2] = b[16*i + 2] * c[16*i + 2] - a[16*i + 2];\n+      a[16*i + 3] = b[16*i + 3] * c[16*i + 3] + a[16*i + 3];\n+      a[16*i + 4] = b[16*i + 4] * c[16*i + 4] - a[16*i + 4];\n+      a[16*i + 5] = b[16*i + 5] * c[16*i + 5] + a[16*i + 5];\n+      a[16*i + 6] = b[16*i + 6] * c[16*i + 6] - a[16*i + 6];\n+      a[16*i + 7] = b[16*i + 7] * c[16*i + 7] + a[16*i + 7];\n+      a[16*i + 8] = b[16*i + 8] * c[16*i + 8] - a[16*i + 8];\n+      a[16*i + 9] = b[16*i + 9] * c[16*i + 9] + a[16*i + 9];\n+      a[16*i + 10] = b[16*i + 10] * c[16*i + 10] - a[16*i + 10];\n+      a[16*i + 11] = b[16*i + 11] * c[16*i + 11] + a[16*i + 11];\n+      a[16*i + 12] = b[16*i + 12] * c[16*i + 12] - a[16*i + 12];\n+      a[16*i + 13] = b[16*i + 13] * c[16*i + 13] + a[16*i + 13];\n+      a[16*i + 14] = b[16*i + 14] * c[16*i + 14] - a[16*i + 14];\n+      a[16*i + 15] = b[16*i + 15] * c[16*i + 15] + a[16*i + 15];\n+    }\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  if (!__builtin_cpu_supports (\"avx512f\"))\n+    return;\n+  float a[16], b[16], c[16];\n+  for (int i = 0; i < 16; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = 3*i;\n+      c[i] = 7*i;\n+    }\n+  check_fmaddsub (a, b, c, 1);\n+  const float d[16] = { 0., 22., 82., 192., 332., 530., 750., 1036.,\n+\t\t\t1336, 1710., 2090., 2552., 3012., 3562., 4102., 4740.};\n+  for (int i = 0; i < 16; ++i)\n+    if (a[i] != d[i])\n+      __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-assembler {(?n)fmaddsub...ps[ \\t].*%zmm[0-9]} } } */"}, {"sha": "cde76db17556db9b0e743af2973136795b197d85", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vect-fmsubaddXXXpd.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98bfd845e93937d92ca844d7fa7e853ad51c6193/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmsubaddXXXpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98bfd845e93937d92ca844d7fa7e853ad51c6193/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmsubaddXXXpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmsubaddXXXpd.c?ref=98bfd845e93937d92ca844d7fa7e853ad51c6193", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O3 -mavx512f -mprefer-vector-width=512 -save-temps\" } */\n+\n+#include \"fma-check.h\"\n+void __attribute__((noipa))\n+check_fmaddsub (double * __restrict a, double *b, double *c, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      a[8*i + 0] = b[8*i + 0] * c[8*i + 0] + a[8*i + 0];\n+      a[8*i + 1] = b[8*i + 1] * c[8*i + 1] - a[8*i + 1];\n+      a[8*i + 2] = b[8*i + 2] * c[8*i + 2] + a[8*i + 2];\n+      a[8*i + 3] = b[8*i + 3] * c[8*i + 3] - a[8*i + 3];\n+      a[8*i + 4] = b[8*i + 4] * c[8*i + 4] + a[8*i + 4];\n+      a[8*i + 5] = b[8*i + 5] * c[8*i + 5] - a[8*i + 5];\n+      a[8*i + 6] = b[8*i + 6] * c[8*i + 6] + a[8*i + 6];\n+      a[8*i + 7] = b[8*i + 7] * c[8*i + 7] - a[8*i + 7];\n+    }\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  if (!__builtin_cpu_supports (\"avx512f\"))\n+    return;\n+  double a[8], b[8], c[8];\n+  for (int i = 0; i < 8; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = 3*i;\n+      c[i] = 7*i;\n+    }\n+  check_fmaddsub (a, b, c, 1);\n+  const double d[8] = { 0., 20., 86., 186., 340., 520., 762., 1022.};\n+  for (int i = 0; i < 8; ++i)\n+    if (a[i] != d[i])\n+      __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-assembler {(?n)fmsubadd...pd[ \\t].*%zmm[0-9]} } } */"}, {"sha": "59de39f411225a7569d3df8137be723125a14eeb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vect-fmsubaddXXXps.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98bfd845e93937d92ca844d7fa7e853ad51c6193/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmsubaddXXXps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98bfd845e93937d92ca844d7fa7e853ad51c6193/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmsubaddXXXps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-fmsubaddXXXps.c?ref=98bfd845e93937d92ca844d7fa7e853ad51c6193", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O3 -mavx512f -mprefer-vector-width=512 -save-temps\" } */\n+\n+#include \"fma-check.h\"\n+void __attribute__((noipa))\n+check_fmaddsub (float * __restrict a, float *b, float *c, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      a[16*i + 0] = b[16*i + 0] * c[16*i + 0] + a[16*i + 0];\n+      a[16*i + 1] = b[16*i + 1] * c[16*i + 1] - a[16*i + 1];\n+      a[16*i + 2] = b[16*i + 2] * c[16*i + 2] + a[16*i + 2];\n+      a[16*i + 3] = b[16*i + 3] * c[16*i + 3] - a[16*i + 3];\n+      a[16*i + 4] = b[16*i + 4] * c[16*i + 4] + a[16*i + 4];\n+      a[16*i + 5] = b[16*i + 5] * c[16*i + 5] - a[16*i + 5];\n+      a[16*i + 6] = b[16*i + 6] * c[16*i + 6] + a[16*i + 6];\n+      a[16*i + 7] = b[16*i + 7] * c[16*i + 7] - a[16*i + 7];\n+      a[16*i + 8] = b[16*i + 8] * c[16*i + 8] + a[16*i + 8];\n+      a[16*i + 9] = b[16*i + 9] * c[16*i + 9] - a[16*i + 9];\n+      a[16*i + 10] = b[16*i + 10] * c[16*i + 10] + a[16*i + 10];\n+      a[16*i + 11] = b[16*i + 11] * c[16*i + 11] - a[16*i + 11];\n+      a[16*i + 12] = b[16*i + 12] * c[16*i + 12] + a[16*i + 12];\n+      a[16*i + 13] = b[16*i + 13] * c[16*i + 13] - a[16*i + 13];\n+      a[16*i + 14] = b[16*i + 14] * c[16*i + 14] + a[16*i + 14];\n+      a[16*i + 15] = b[16*i + 15] * c[16*i + 15] - a[16*i + 15];\n+    }\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  if (!__builtin_cpu_supports (\"avx512f\"))\n+    return;\n+  float a[16], b[16], c[16];\n+  for (int i = 0; i < 16; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = 3*i;\n+      c[i] = 7*i;\n+    }\n+  check_fmaddsub (a, b, c, 1);\n+  const float d[16] = { 0., 20., 86., 186., 340., 520., 762., 1022.,\n+\t\t\t1352, 1692., 2110., 2530., 3036., 3536., 4130., 4710.};\n+  for (int i = 0; i < 16; ++i)\n+    if (a[i] != d[i])\n+      __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-assembler {(?n)fmsubadd...ps[ \\t].*%zmm[0-9]} } } */"}]}