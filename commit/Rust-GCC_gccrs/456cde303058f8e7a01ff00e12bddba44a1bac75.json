{"sha": "456cde303058f8e7a01ff00e12bddba44a1bac75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2Y2RlMzAzMDU4ZjhlN2EwMWZmMDBlMTJiZGRiYTQ0YTFiYWM3NQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-11-30T15:30:01Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-11-30T15:30:01Z"}, "message": "tree-ssa-operands.h (struct ssa_operands): New.\n\n\t* tree-ssa-operands.h (struct ssa_operands): New.\n\t* tree-flow-inline.h (gimple_ssa_operands): New function.\n\t* tree-flow.h: (struct gimple_df): Add ssa_operands.\n\t* Makefile.in: Remove gt-tree-ssa-operands.h\n\t* tree-ssa-operands.c: Do not include gt-tree-ssa-operands.h\n\t(free_defs, free_uses, free_vuses, free_maydefs, free_mustdefs,\n\toperand_memory, operand_memory_index, ops_active): Remove statics.\n\t(ALLOC_OPTYPE): Update.\n\t(operand_build_sort_virtual): Update.\n\t(ssa_operands_active): Update.\n\t(init_ssa_operands): Update.\n\t(fini_ssa_operands): Update.\n\t(ssa_operand_alloc): Update.\n\t(INITIALIZE_USE): Update.\n\t(finalize_ssa_use_ops): Update.\n\t(finalize_ssa_v_may_def_ops): Update.\n\t(finalize_ssa_vuse_ops): Update.\n\t(finalize_ssa_v_must_def_ops): Update.\n\nFrom-SVN: r119363", "tree": {"sha": "b063e9194250c0c9d4b41caadabed3f1f5175e80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b063e9194250c0c9d4b41caadabed3f1f5175e80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/456cde303058f8e7a01ff00e12bddba44a1bac75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456cde303058f8e7a01ff00e12bddba44a1bac75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/456cde303058f8e7a01ff00e12bddba44a1bac75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456cde303058f8e7a01ff00e12bddba44a1bac75/comments", "author": null, "committer": null, "parents": [{"sha": "c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b1b49b1ecf3ef95fcdf98c2ed41edefd4c8991"}], "stats": {"total": 161, "additions": 102, "deletions": 59}, "files": [{"sha": "2da6dab388159a684b920dcdc476db2e394e0ee0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=456cde303058f8e7a01ff00e12bddba44a1bac75", "patch": "@@ -1,3 +1,24 @@\n+2006-11-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-operands.h (struct ssa_operands): New.\n+\t* tree-flow-inline.h (gimple_ssa_operands): New function.\n+\t* tree-flow.h: (struct gimple_df): Add ssa_operands.\n+\t* Makefile.in: Remove gt-tree-ssa-operands.h\n+\t* tree-ssa-operands.c: Do not include gt-tree-ssa-operands.h\n+\t(free_defs, free_uses, free_vuses, free_maydefs, free_mustdefs,\n+\toperand_memory, operand_memory_index, ops_active): Remove statics.\n+\t(ALLOC_OPTYPE): Update.\n+\t(operand_build_sort_virtual): Update.\n+\t(ssa_operands_active): Update.\n+\t(init_ssa_operands): Update.\n+\t(fini_ssa_operands): Update.\n+\t(ssa_operand_alloc): Update.\n+\t(INITIALIZE_USE): Update.\n+\t(finalize_ssa_use_ops): Update.\n+\t(finalize_ssa_v_may_def_ops): Update.\n+\t(finalize_ssa_vuse_ops): Update.\n+\t(finalize_ssa_v_must_def_ops): Update.\n+\n 2006-11-30  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (vectorizable_function): Export."}, {"sha": "4c46cd3865f7c49c70ebd2a11d2b00b46a4e2160", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=456cde303058f8e7a01ff00e12bddba44a1bac75", "patch": "@@ -1972,7 +1972,7 @@ tree-dfa.o : tree-dfa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n tree-ssa-operands.o : tree-ssa-operands.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) errors.h $(TREE_INLINE_H) \\\n    $(FLAGS_H) $(FUNCTION_H) $(TM_H) $(TIMEVAR_H) tree-pass.h toplev.h \\\n-   gt-tree-ssa-operands.h coretypes.h langhooks.h $(IPA_REFERENCE_H)\n+   coretypes.h langhooks.h $(IPA_REFERENCE_H)\n tree-eh.o : tree-eh.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_H) $(FLAGS_H) $(FUNCTION_H) except.h langhooks.h \\\n    $(GGC_H) tree-pass.h coretypes.h $(TIMEVAR_H) $(TM_P_H) \\\n@@ -2868,7 +2868,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/tree-dfa.c $(srcdir)/tree-ssa-propagate.c \\\n   $(srcdir)/tree-iterator.c $(srcdir)/gimplify.c \\\n   $(srcdir)/tree-chrec.h $(srcdir)/tree-vect-generic.c \\\n-  $(srcdir)/tree-ssa-operands.h $(srcdir)/tree-ssa-operands.c \\\n+  $(srcdir)/tree-ssa-operands.h \\\n   $(srcdir)/tree-profile.c $(srcdir)/tree-nested.c \\\n   $(srcdir)/ipa-reference.c $(srcdir)/tree-ssa-structalias.h \\\n   $(srcdir)/tree-ssa-structalias.c \\\n@@ -2903,7 +2903,7 @@ gt-tree-mudflap.h gt-tree-vect-generic.h \\\n gt-tree-profile.h gt-tree-ssa-address.h \\\n gt-tree-iterator.h gt-gimplify.h \\\n gt-tree-phinodes.h gt-tree-nested.h \\\n-gt-tree-ssa-operands.h gt-tree-ssa-propagate.h \\\n+gt-tree-ssa-propagate.h \\\n gt-tree-ssa-structalias.h gt-ipa-inline.h gt-cgraphunit.h \\\n gt-stringpool.h gt-targhooks.h gt-omp-low.h : s-gtype ; @true\n "}, {"sha": "5040375bf76f107b960c87e7cfb1a45dd3213096", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=456cde303058f8e7a01ff00e12bddba44a1bac75", "patch": "@@ -1726,4 +1726,10 @@ get_value_handle (tree expr)\n     gcc_unreachable ();\n }\n \n+/* Accessor to tree-ssa-operands.c caches.  */\n+static inline struct ssa_operands *\n+gimple_ssa_operands (struct function *fun)\n+{\n+  return &fun->gimple_df->ssa_operands;\n+}\n #endif /* _TREE_FLOW_INLINE_H  */"}, {"sha": "fb7b02fa82e81e751c3c9a2d2193effd254df87e", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=456cde303058f8e7a01ff00e12bddba44a1bac75", "patch": "@@ -88,6 +88,8 @@ struct gimple_df GTY(()) {\n \n   /* True if the code is in ssa form.  */\n   unsigned int in_ssa_p : 1;\n+\n+  struct ssa_operands ssa_operands;\n };\n \n /* Accessors for internal use only.  Generic code should use abstraction"}, {"sha": "a3c453d667b0056ef920027e98358ae5bf91cf83", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 57, "deletions": 56, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=456cde303058f8e7a01ff00e12bddba44a1bac75", "patch": "@@ -116,29 +116,22 @@ static VEC(tree,heap) *build_vuses;\n /* Array for building all the V_MUST_DEF operands.  */\n static VEC(tree,heap) *build_v_must_defs;\n \n-/* These arrays are the cached operand vectors for call clobbered calls.  */\n-static bool ops_active = false;\n-\n-static GTY (()) struct ssa_operand_memory_d *operand_memory = NULL;\n-static unsigned operand_memory_index;\n-\n static void get_expr_operands (tree, tree *, int);\n \n-static def_optype_p free_defs = NULL;\n-static use_optype_p free_uses = NULL;\n-static vuse_optype_p free_vuses = NULL;\n-static maydef_optype_p free_maydefs = NULL;\n-static mustdef_optype_p free_mustdefs = NULL;\n+/* Number of functions with initialized ssa_operands.  */\n+static int n_initialized = 0;\n \n /* Allocates operand OP of given TYPE from the appropriate free list,\n    or of the new value if the list is empty.  */\n \n #define ALLOC_OPTYPE(OP, TYPE)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      TYPE##_optype_p ret = free_##TYPE##s;\t\t\\\n+      TYPE##_optype_p ret\t\t\t\t\\\n+\t = gimple_ssa_operands (cfun)->free_##TYPE##s;\t\\\n       if (ret)\t\t\t\t\t\t\\\n-\tfree_##TYPE##s = ret->next;\t\t\t\\\n+\tgimple_ssa_operands (cfun)->free_##TYPE##s \t\\\n+\t = ret->next;\t\t\t\t\t\\\n       else\t\t\t\t\t\t\\\n \tret = ssa_operand_alloc (sizeof (*ret));\t\\\n       (OP) = ret;\t\t\t\t\t\\\n@@ -212,7 +205,7 @@ operand_build_sort_virtual (VEC(tree,heap) *list)\n bool\n ssa_operands_active (void)\n {\n-  return ops_active;\n+  return cfun->gimple_df && gimple_ssa_operands (cfun)->ops_active;\n }\n \n \n@@ -250,15 +243,18 @@ static struct\n void\n init_ssa_operands (void)\n {\n-  build_defs = VEC_alloc (tree, heap, 5);\n-  build_uses = VEC_alloc (tree, heap, 10);\n-  build_vuses = VEC_alloc (tree, heap, 25);\n-  build_v_may_defs = VEC_alloc (tree, heap, 25);\n-  build_v_must_defs = VEC_alloc (tree, heap, 25);\n-\n-  gcc_assert (operand_memory == NULL);\n-  operand_memory_index = SSA_OPERAND_MEMORY_SIZE;\n-  ops_active = true;\n+  if (!n_initialized++)\n+    {\n+      build_defs = VEC_alloc (tree, heap, 5);\n+      build_uses = VEC_alloc (tree, heap, 10);\n+      build_vuses = VEC_alloc (tree, heap, 25);\n+      build_v_may_defs = VEC_alloc (tree, heap, 25);\n+      build_v_must_defs = VEC_alloc (tree, heap, 25);\n+    }\n+\n+  gcc_assert (gimple_ssa_operands (cfun)->operand_memory == NULL);\n+  gimple_ssa_operands (cfun)->operand_memory_index = SSA_OPERAND_MEMORY_SIZE;\n+  gimple_ssa_operands (cfun)->ops_active = true;\n   memset (&clobber_stats, 0, sizeof (clobber_stats));\n }\n \n@@ -269,23 +265,27 @@ void\n fini_ssa_operands (void)\n {\n   struct ssa_operand_memory_d *ptr;\n-  VEC_free (tree, heap, build_defs);\n-  VEC_free (tree, heap, build_uses);\n-  VEC_free (tree, heap, build_v_must_defs);\n-  VEC_free (tree, heap, build_v_may_defs);\n-  VEC_free (tree, heap, build_vuses);\n-  free_defs = NULL;\n-  free_uses = NULL;\n-  free_vuses = NULL;\n-  free_maydefs = NULL;\n-  free_mustdefs = NULL;\n-  while ((ptr = operand_memory) != NULL)\n+  if (!--n_initialized)\n+    {\n+      VEC_free (tree, heap, build_defs);\n+      VEC_free (tree, heap, build_uses);\n+      VEC_free (tree, heap, build_v_must_defs);\n+      VEC_free (tree, heap, build_v_may_defs);\n+      VEC_free (tree, heap, build_vuses);\n+    }\n+  gimple_ssa_operands (cfun)->free_defs = NULL;\n+  gimple_ssa_operands (cfun)->free_uses = NULL;\n+  gimple_ssa_operands (cfun)->free_vuses = NULL;\n+  gimple_ssa_operands (cfun)->free_maydefs = NULL;\n+  gimple_ssa_operands (cfun)->free_mustdefs = NULL;\n+  while ((ptr = gimple_ssa_operands (cfun)->operand_memory) != NULL)\n     {\n-      operand_memory = operand_memory->next;\n+      gimple_ssa_operands (cfun)->operand_memory\n+\t= gimple_ssa_operands (cfun)->operand_memory->next;\n       ggc_free (ptr);\n     }\n \n-  ops_active = false;\n+  gimple_ssa_operands (cfun)->ops_active = false;\n   \n   if (dump_file && (dump_flags & TDF_STATS))\n     {\n@@ -311,16 +311,18 @@ static inline void *\n ssa_operand_alloc (unsigned size)\n {\n   char *ptr;\n-  if (operand_memory_index + size >= SSA_OPERAND_MEMORY_SIZE)\n+  if (gimple_ssa_operands (cfun)->operand_memory_index + size\n+        >= SSA_OPERAND_MEMORY_SIZE)\n     {\n       struct ssa_operand_memory_d *ptr;\n       ptr = GGC_NEW (struct ssa_operand_memory_d);\n-      ptr->next = operand_memory;\n-      operand_memory = ptr;\n-      operand_memory_index = 0;\n+      ptr->next = gimple_ssa_operands (cfun)->operand_memory;\n+      gimple_ssa_operands (cfun)->operand_memory = ptr;\n+      gimple_ssa_operands (cfun)->operand_memory_index = 0;\n     }\n-  ptr = &(operand_memory->mem[operand_memory_index]);\n-  operand_memory_index += size;\n+  ptr = &(gimple_ssa_operands (cfun)->operand_memory\n+\t  ->mem[gimple_ssa_operands (cfun)->operand_memory_index]);\n+  gimple_ssa_operands (cfun)->operand_memory_index += size;\n   return ptr;\n }\n \n@@ -366,8 +368,9 @@ set_virtual_use_link (use_operand_p ptr, tree stmt)\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       TYPE##_optype_p next = (OP)->next;\t\t\\\n-      (OP)->next = free_##TYPE##s;\t\t\t\\\n-      free_##TYPE##s = (OP);\t\t\t\t\\\n+      (OP)->next\t\t\t\t\t\\\n+\t = gimple_ssa_operands (cfun)->free_##TYPE##s;\t\\\n+      gimple_ssa_operands (cfun)->free_##TYPE##s = (OP);\\\n       (OP) = next;\t\t\t\t\t\\\n     } while (0)\n \n@@ -503,8 +506,8 @@ finalize_ssa_def_ops (tree stmt)\n   /* If there is anything in the old list, free it.  */\n   if (old_ops)\n     {\n-      old_ops->next = free_defs;\n-      free_defs = old_ops;\n+      old_ops->next = gimple_ssa_operands (cfun)->free_defs;\n+      gimple_ssa_operands (cfun)->free_defs = old_ops;\n     }\n \n   /* Now set the stmt's operands.  */\n@@ -558,8 +561,8 @@ finalize_ssa_use_ops (tree stmt)\n     {\n       for (ptr = old_ops; ptr; ptr = ptr->next)\n \tdelink_imm_use (USE_OP_PTR (ptr));\n-      old_ops->next = free_uses;\n-      free_uses = old_ops;\n+      old_ops->next = gimple_ssa_operands (cfun)->free_uses;\n+      gimple_ssa_operands (cfun)->free_uses = old_ops;\n     }\n \n   /* Now create nodes for all the new nodes.  */\n@@ -661,8 +664,8 @@ finalize_ssa_v_may_def_ops (tree stmt)\n     {\n       for (ptr = old_ops; ptr; ptr = ptr->next)\n \tdelink_imm_use (MAYDEF_OP_PTR (ptr));\n-      old_ops->next = free_maydefs;\n-      free_maydefs = old_ops;\n+      old_ops->next = gimple_ssa_operands (cfun)->free_maydefs;\n+      gimple_ssa_operands (cfun)->free_maydefs = old_ops;\n     }\n \n   /* Now set the stmt's operands.  */\n@@ -763,8 +766,8 @@ finalize_ssa_vuse_ops (tree stmt)\n     {\n       for (ptr = old_ops; ptr; ptr = ptr->next)\n \tdelink_imm_use (VUSE_OP_PTR (ptr));\n-      old_ops->next = free_vuses;\n-      free_vuses = old_ops;\n+      old_ops->next = gimple_ssa_operands (cfun)->free_vuses;\n+      gimple_ssa_operands (cfun)->free_vuses = old_ops;\n     }\n \n   /* Now set the stmt's operands.  */\n@@ -904,8 +907,8 @@ finalize_ssa_v_must_def_ops (tree stmt)\n     {\n       for (ptr = old_ops; ptr; ptr = ptr->next)\n \tdelink_imm_use (MUSTDEF_KILL_PTR (ptr));\n-      old_ops->next = free_mustdefs;\n-      free_mustdefs = old_ops;\n+      old_ops->next = gimple_ssa_operands (cfun)->free_mustdefs;\n+      gimple_ssa_operands (cfun)->free_mustdefs = old_ops;\n     }\n \n   /* Now set the stmt's operands.  */\n@@ -2582,5 +2585,3 @@ debug_immediate_uses_for (tree var)\n {\n   dump_immediate_uses_for (stderr, var);\n }\n-\n-#include \"gt-tree-ssa-operands.h\""}, {"sha": "aecbcdc314dcc8fe06d95e63a54b21de8ff5a469", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456cde303058f8e7a01ff00e12bddba44a1bac75/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=456cde303058f8e7a01ff00e12bddba44a1bac75", "patch": "@@ -88,6 +88,19 @@ struct ssa_operand_memory_d GTY((chain_next(\"%h.next\")))\n   char mem[SSA_OPERAND_MEMORY_SIZE];\n };\n \n+/* Per-function operand caches.  */\n+struct ssa_operands GTY(()) {\n+   struct ssa_operand_memory_d *operand_memory;\n+   unsigned operand_memory_index;\n+\n+   bool ops_active;\n+\n+   struct def_optype_d * GTY ((skip (\"\"))) free_defs;\n+   struct use_optype_d * GTY ((skip (\"\"))) free_uses;\n+   struct vuse_optype_d * GTY ((skip (\"\"))) free_vuses;\n+   struct maydef_optype_d * GTY ((skip (\"\"))) free_maydefs;\n+   struct mustdef_optype_d * GTY ((skip (\"\"))) free_mustdefs;\n+};\n \n /* This represents the operand cache for a stmt.  */\n struct stmt_operands_d"}]}