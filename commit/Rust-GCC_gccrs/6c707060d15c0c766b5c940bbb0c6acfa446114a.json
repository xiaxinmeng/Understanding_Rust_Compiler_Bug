{"sha": "6c707060d15c0c766b5c940bbb0c6acfa446114a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM3MDcwNjBkMTVjMGM3NjZiNWM5NDBiYmIwYzZhY2ZhNDQ2MTE0YQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-01T00:24:40Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-01T00:24:40Z"}, "message": "Rewrite to use EXTRA_SPECS.\n\nFrom-SVN: r11148", "tree": {"sha": "b1f7827c82b9dda7087d4501af01d0b0173edb2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1f7827c82b9dda7087d4501af01d0b0173edb2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c707060d15c0c766b5c940bbb0c6acfa446114a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c707060d15c0c766b5c940bbb0c6acfa446114a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c707060d15c0c766b5c940bbb0c6acfa446114a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c707060d15c0c766b5c940bbb0c6acfa446114a/comments", "author": null, "committer": null, "parents": [{"sha": "db99e93ece56298aadc994ba43ed25f90283e564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db99e93ece56298aadc994ba43ed25f90283e564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db99e93ece56298aadc994ba43ed25f90283e564"}], "stats": {"total": 203, "additions": 144, "deletions": 59}, "files": [{"sha": "5f115c5fb70d01f16220404f974d1a9243612c8a", "filename": "gcc/config/m68k/m68k-none.h", "status": "modified", "additions": 144, "deletions": 59, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c707060d15c0c766b5c940bbb0c6acfa446114a/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c707060d15c0c766b5c940bbb0c6acfa446114a/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-none.h?ref=6c707060d15c0c766b5c940bbb0c6acfa446114a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  \"naked\" 68020.\n-   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1996 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -20,88 +20,173 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"m68k/m68k.h\"\n \n-/* See m68k.h.  7 means 68020 with 68881.  */\n+/* Default to m68k (m68020).  */\n+#ifndef TARGET_CPU_DEFAULT\n+#define TARGET_CPU_DEFAULT M68K_CPU_m68k\n+#endif\n \n+/* These are values set by the configure script in TARGET_CPU_DEFAULT.\n+   They are ((desired value for TARGET_DEFAULT) << 4) + sequential integer.\n+   See m68k.h for the values (it should really define MASK_FOO so we can\n+   use them).  */\n+#define M68K_CPU_m68k\t((7 << 4) + 0)\n+#define M68K_CPU_m68000 ((0 << 4) + 1)\n+#define M68K_CPU_m68010 ((0 << 4) + 1) /* make same as m68000 */\n+#define M68K_CPU_m68020 ((7 << 4) + 2)\n+#define M68K_CPU_m68030 ((7 << 4) + 3)\n+#define M68K_CPU_m68040 ((01007 << 4) + 4)\n+#define M68K_CPU_m68302 ((0 << 4) + 5)\n+#define M68K_CPU_m68332 ((1 << 4) + 6)\n+\n+/* This is tested for below, so if target wants to override this, it\n+   just set this first in cover file.  */\n #ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT 7\n+#define TARGET_DEFAULT (TARGET_CPU_DEFAULT >> 4)\n #endif\n-\n-/* Names to predefine in the preprocessor for this target machine.\n-   Always define mc68000.  Other definitions depend on switches given\n-   to the compiler:\n-\n-   -m68000: define nothing else\n-   default, -m68020, -mc68020: define mc68020\n-   -m68030: define mc68030\n-   -m68040: define mc68040\n-   -m68020-40: define mc68020 mc68030 mc68040\n-   -m68302: define mc68302\n-   -m68332: define mc68332\n-   */\n-\n-#ifndef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dmc68000\"\n+\f\n+/* Defaults for the various specs below.\n+   These are collected here so we only test TARGET_CPU_DEFAULT once.  */\n+/* ??? CC1_CPU_DEFAULT_SPEC was copied over from the earlier version of\n+   this file.  However, it's not used anywhere here because it doesn't\n+   seem to be necessary.  */\n+#if TARGET_CPU_DEFAULT == M68K_CPU_m68k || TARGET_CPU_DEFAULT == M68K_CPU_m68020\n+#define CPP_CPU_DEFAULT_SPEC \"%{!ansi:-Dmc68020 } -D__mc68020 -D__mc68020__\"\n+#define ASM_CPU_DEFAULT_SPEC \"-mc68020\"\n+#define CC1_CPU_DEFAULT_SPEC \"-m68020\"\n+#else\n+#if TARGET_CPU_DEFAULT == M68K_CPU_m68000\n+#define CPP_CPU_DEFAULT_SPEC \"%{!ansi:-Dmc68000 } -D__mc68000 -D__mc68000__\"\n+#define ASM_CPU_DEFAULT_SPEC \"-mc68000\"\n+#define CC1_CPU_DEFAULT_SPEC \"-m68000\"\n+#else\n+#if TARGET_CPU_DEFAULT == M68K_CPU_m68030\n+#define CPP_CPU_DEFAULT_SPEC \"%{!ansi:-Dmc68030 } -D__mc68030 -D__mc68030__\"\n+#define ASM_CPU_DEFAULT_SPEC \"-mc68030\"\n+#define CC1_CPU_DEFAULT_SPEC \"-m68030\"\n+#else\n+#if TARGET_CPU_DEFAULT == M68K_CPU_m68040\n+#define CPP_CPU_DEFAULT_SPEC \"%{!ansi:-Dmc68040 } -D__mc68040 -D__mc68040__\"\n+#define ASM_CPU_DEFAULT_SPEC \"-mc68040\"\n+#define CC1_CPU_DEFAULT_SPEC \"-m68040\"\n+#else\n+#if TARGET_CPU_DEFAULT == M68K_CPU_m68302\n+#define CPP_CPU_DEFAULT_SPEC \"%{!ansi:-Dmc68302 } -D__mc68302 -D__mc68302__\"\n+#define ASM_CPU_DEFAULT_SPEC \"-mc68302\"\n+#define CC1_CPU_DEFAULT_SPEC \"-m68000\"\n+#else\n+#if TARGET_CPU_DEFAULT == M68K_CPU_m68332\n+#define CPP_CPU_DEFAULT_SPEC \"%{!ansi:-Dmc68332 } -D__mc68332 -D__mc68332__\"\n+#define ASM_CPU_DEFAULT_SPEC \"-mc68332\"\n+#define CC1_CPU_DEFAULT_SPEC \"-m68020 -mnobitfield %{!m68881:-msoft-float}\"\n+#else\n+Unrecognized value in TARGET_CPU_DEFAULT.\n #endif\n+#endif\n+#endif\n+#endif\n+#endif\n+#endif\n+\f\n+/* Always define mc68000.\n+   Remember that GCC will automatically add __mc68000 and __mc68000__.  */\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dmc68000\"\n \n-#ifndef CPP_SPEC\n-\n+/* Define one of __HAVE_68881__, __HAVE_FPA__, or nothing (soft float), appropriately.  */\n+#undef CPP_FPU_SPEC\n #if TARGET_DEFAULT & 02\n-\n-/* -m68881 is the default */\n-#define CPP_SPEC \\\n-\"%{!mc68000:%{!m68000:%{!m68332:%{!msoft-float:%{mfpa:-D__HAVE_FPA__ }%{!mfpa:-D__HAVE_68881__ }}}}}\\\n-%{!ansi:%{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68302:-Dmc68302 }%{m68332:-Dmc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-Dmc68020 }}}}}}}}}}}\\\n-%{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{m68302:-D__mc68302__ -D__mc68302 }%{m68332:-D__mc68332__ -D__mc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-D__mc68020__ -D__mc68020 }}}}}}}}}}\"\n-\n+/* ??? Why isn't m68302 treated like m68000 here?  */\n+#define CPP_FPU_SPEC \\\n+\"%{!mc68000:%{!m68000:%{!m68332:%{!msoft-float:%{mfpa:-D__HAVE_FPA__ }%{!mfpa:-D__HAVE_68881__ }}}}}\"\n #else\n+/* This can't currently happen, but we code it anyway to show how it's done.  */\n #if TARGET_DEFAULT & 0100\n-\n-/* -mfpa is the default */\n-#define CPP_SPEC \\\n-\"%{!msoft-float:%{m68881:-D__HAVE_68881__ }%{!m68881:-D__HAVE_FPA__ }}\\\n-%{!ansi:%{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68302:-Dmc68302 }%{m68332:-Dmc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-Dmc68020 }}}}}}}}}}}\\\n-%{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{m68302:-D__mc68302__ -D__mc68302 }%{m68332:-D__mc68332__ -D__mc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-D__mc68020__ -D__mc68020 }}}}}}}}}}\"\n-\n+#define CPP_FPU_SPEC \\\n+\"%{!msoft-float:%{m68881:-D__HAVE_68881__ }%{!m68881:-D__HAVE_FPA__ }}\"\n #else\n-\n-/* -msoft-float is the default */\n-#define CPP_SPEC \\\n-\"%{m68881:-D__HAVE_68881__ }%{mfpa:-D__HAVE_FPA__ }\\\n-%{!ansi:%{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68302:-Dmc68302 }%{m68332:-Dmc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-Dmc68020 }}}}}}}}}}}\\\n-%{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{m68302:-D__mc68302__ -D__mc68302 }%{m68332:-D__mc68332__ -D__mc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-D__mc68020__ -D__mc68020 }}}}}}}}}}\"\n-\n+#define CPP_FPU_SPEC \\\n+\"%{m68881:-D__HAVE_68881__ }%{mfpa:-D__HAVE_FPA__ }\"\n #endif\n #endif\n \n-#endif\n-\n-/* Pass flags to gas indicating which type of processor we have.  */\n-\n-#ifndef ASM_SPEC\n-\n-#define ASM_SPEC \\\n-\"%{m68851}%{mno-68851}%{m68881}%{mno-68881}%{msoft-float:-mno-68881 }\\\n-%{m68000}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}%{m68040}%{m68020-40:-mc68040}%{m68302}%{m68332}%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-mc68020}}}}}}}}}}\"\n+/* Names to predefine in the preprocessor for this target machine.\n+   Other definitions depend on what the default cpu is and switches\n+   given to the compiler:\n \n-#endif\n+   -m68000: define nothing else\n+   -m68020, -mc68020: define mc68020\n+   -m68030: define mc68030\n+   -m68040: define mc68040\n+   -m68020-40: define mc68020 mc68030 mc68040\n+   -m68302: define mc68302\n+   -m68332: define mc68332\n+   default: define as above appropriately\n \n-#ifndef CC1_SPEC\n+   GCC won't automatically add __'d versions, we have to mention them\n+   explicitly.  */\n \n-#define CC1_SPEC \\\n- \"%{m68000:%{!m68881:-msoft-float }}%{m68302:-m68000}%{m68332:-m68020 -mnobitfield %{!m68881:-msoft-float}}%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-m68020}}}}}}}}}}\"\n+#undef CPP_SPEC\n+#define CPP_SPEC \"\\\n+%(cpp_fpu) \\\n+%{!ansi:%{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68302:-Dmc68302 }%{m68332:-Dmc68332 }} \\\n+%{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{m68302:-D__mc68302__ -D__mc68302 }%{m68332:-D__mc68332__ -D__mc68332 } \\\n+%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:%(cpp_cpu_default)}}}}}}}}}} \\\n+%(cpp_subtarget) \\\n+\"\n \n-#endif\n+/* Pass flags to gas indicating which type of processor we have.  */\n \n+#undef ASM_SPEC\n+#define ASM_SPEC \"\\\n+%{m68851}%{mno-68851}%{m68881}%{mno-68881}%{msoft-float:-mno-68881 } \\\n+%{m68000}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}%{m68040}%{m68020-40:-mc68040 }%{m68302}%{m68332} \\\n+%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:%(asm_cpu_default)}}}}}}}}}} \\\n+\"\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC \"\\\n+%{m68000:%{!m68881:-msoft-float }}%{m68302:-m68000 }%{m68332:-m68020 -mnobitfield %{!m68881:-msoft-float }} \\\n+\"\n+/* ??? Is this needed?\n+%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:%(cc1_cpu_default)}}}}}}}}}}\n+*/\n+\n+/* This macro defines names of additional specifications to put in the specs\n+   that can be used in various specifications like CC1_SPEC.  Its definition\n+   is an initializer with a subgrouping for each command option.\n+\n+   Each subgrouping contains a string constant, that defines the\n+   specification name, and a string constant that used by the GNU CC driver\n+   program.\n+\n+   Do not define this macro if it does not need to do anything.  */\n+\n+#define EXTRA_SPECS\t\t\t\t\t\\\n+  { \"cpp_cpu_default\",\tCPP_CPU_DEFAULT_SPEC },\t\t\\\n+  { \"cpp_fpu\",\t\tCPP_FPU_SPEC },\t\t\t\\\n+  { \"cpp_subtarget\",\tCPP_SUBTARGET_SPEC },\t\t\\\n+  { \"asm_cpu_default\",\tASM_CPU_DEFAULT_SPEC },\t\t\\\n+/*{ \"cc1_cpu_default\",\tCC1_CPU_DEFAULT__SPEC },*/\t\\\n+  SUBTARGET_EXTRA_SPECS\n+\n+#define CPP_SUBTARGET_SPEC \"\"\n+#define SUBTARGET_EXTRA_SPECS\n+\f\n /* Avoid building multilib libraries for the defaults.\n    t-m68kbare doesn't support -mfpa in the multilib'd libraries, so we don't\n-   either.  */\n-#if (TARGET_DEFAULT & 5) == 5\n+   either.\n+   For targets not handled here, just build the full set of multilibs.\n+   The default is m68k 99.9% of the time anyway.  */\n+\n+#if TARGET_CPU_DEFAULT == M68K_CPU_m68k || TARGET_CPU_DEFAULT == M68K_CPU_m68020\n #if TARGET_DEFAULT & 2\n #define MULTILIB_DEFAULTS { \"m68020\", \"m68881\" }\n #else\n #define MULTILIB_DEFAULTS { \"m68020\", \"msoft-float\" }\n #endif\n-#else\n+#endif\n+\n+#if TARGET_CPU_DEFAULT == M68K_CPU_m68000 || TARGET_CPU_DEFAULT == M68K_CPU_m68302\n #if TARGET_DEFAULT & 2\n #define MULTILIB_DEFAULTS { \"m68000\", \"m68881\" }\n #else"}]}