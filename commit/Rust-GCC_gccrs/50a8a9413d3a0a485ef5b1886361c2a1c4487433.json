{"sha": "50a8a9413d3a0a485ef5b1886361c2a1c4487433", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBhOGE5NDEzZDNhMGE0ODVlZjViMTg4NjM2MWMyYTFjNDQ4NzQzMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-12-15T13:25:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-12-15T13:25:22Z"}, "message": "PR59161 make pretty printers always return strings\n\n\tPR libstdc++/59161\n\t* python/libstdcxx/v6/printers.py (StdListIteratorPrinter.to_string)\n\t(StdSlistIteratorPrinter.to_string, StdVectorIteratorPrinter.to_string)\n\t(StdRbtreeIteratorPrinter.to_string, StdDequeIteratorPrinter.to_string)\n\t(StdDebugIteratorPrinter.to_string): Return string instead of\n\tgdb.Value.\n\t* testsuite/libstdc++-prettyprinters/59161.cc: New test.\n\nFrom-SVN: r243690", "tree": {"sha": "89179b409860041c2cc9c9cac49b6ee9a618ed29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89179b409860041c2cc9c9cac49b6ee9a618ed29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50a8a9413d3a0a485ef5b1886361c2a1c4487433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a8a9413d3a0a485ef5b1886361c2a1c4487433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a8a9413d3a0a485ef5b1886361c2a1c4487433", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a8a9413d3a0a485ef5b1886361c2a1c4487433/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7224c6a997c32d3b4f7a2a22d27459ca58ee2587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7224c6a997c32d3b4f7a2a22d27459ca58ee2587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7224c6a997c32d3b4f7a2a22d27459ca58ee2587"}], "stats": {"total": 90, "additions": 84, "deletions": 6}, "files": [{"sha": "7b5bd2591734f5bccf383fed6c99e4d69b00eea2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a8a9413d3a0a485ef5b1886361c2a1c4487433/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a8a9413d3a0a485ef5b1886361c2a1c4487433/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=50a8a9413d3a0a485ef5b1886361c2a1c4487433", "patch": "@@ -1,5 +1,13 @@\n 2016-12-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/59161\n+\t* python/libstdcxx/v6/printers.py (StdListIteratorPrinter.to_string)\n+\t(StdSlistIteratorPrinter.to_string, StdVectorIteratorPrinter.to_string)\n+\t(StdRbtreeIteratorPrinter.to_string, StdDequeIteratorPrinter.to_string)\n+\t(StdDebugIteratorPrinter.to_string): Return string instead of\n+\tgdb.Value.\n+\t* testsuite/libstdc++-prettyprinters/59161.cc: New test.\n+\n \t* python/libstdcxx/v6/printers.py (UniquePointerPrinter.to_string):\n \tRemove redundant parentheses.\n \t(RbtreeIterator, StdRbtreeIteratorPrinter): Add docstrings."}, {"sha": "ab3592a7e67a27cfc4719f1f558f45ab882d3b70", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a8a9413d3a0a485ef5b1886361c2a1c4487433/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a8a9413d3a0a485ef5b1886361c2a1c4487433/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=50a8a9413d3a0a485ef5b1886361c2a1c4487433", "patch": "@@ -203,7 +203,7 @@ def to_string(self):\n         nodetype = find_type(self.val.type, '_Node')\n         nodetype = nodetype.strip_typedefs().pointer()\n         node = self.val['_M_node'].cast(nodetype).dereference()\n-        return get_value_from_list_node(node)\n+        return str(get_value_from_list_node(node))\n \n class StdSlistPrinter:\n     \"Print a __gnu_cxx::slist\"\n@@ -248,7 +248,7 @@ def __init__(self, typename, val):\n     def to_string(self):\n         nodetype = find_type(self.val.type, '_Node')\n         nodetype = nodetype.strip_typedefs().pointer()\n-        return self.val['_M_node'].cast(nodetype).dereference()['_M_data']\n+        return str(self.val['_M_node'].cast(nodetype).dereference()['_M_data'])\n \n class StdVectorPrinter:\n     \"Print a std::vector\"\n@@ -333,7 +333,7 @@ def __init__(self, typename, val):\n         self.val = val\n \n     def to_string(self):\n-        return self.val['_M_current'].dereference()\n+        return str(self.val['_M_current'].dereference())\n \n class StdTuplePrinter:\n     \"Print a std::tuple\"\n@@ -495,7 +495,7 @@ def __init__ (self, typename, val):\n \n     def to_string (self):\n         node = self.val['_M_node'].cast(self.link_type).dereference()\n-        return get_value_from_Rb_tree_node(node)\n+        return str(get_value_from_Rb_tree_node(node))\n \n class StdDebugIteratorPrinter:\n     \"Print a debug enabled version of an iterator\"\n@@ -511,7 +511,7 @@ def to_string (self):\n         if not safe_seq or self.val['_M_version'] != safe_seq['_M_version']:\n             return \"invalid iterator\"\n         itype = self.val.type.template_argument(0)\n-        return self.val.cast(itype)\n+        return str(self.val.cast(itype))\n \n def num_elements(num):\n     \"\"\"Return either \"1 element\" or \"N elements\" depending on the argument.\"\"\"\n@@ -708,7 +708,7 @@ def __init__(self, typename, val):\n         self.val = val\n \n     def to_string(self):\n-        return self.val['_M_cur'].dereference()\n+        return str(self.val['_M_cur'].dereference())\n \n class StdStringPrinter:\n     \"Print a std::basic_string of some kind\""}, {"sha": "d8fef27bbb5f4db263047abe33070a162f2305f1", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/59161.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a8a9413d3a0a485ef5b1886361c2a1c4487433/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F59161.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a8a9413d3a0a485ef5b1886361c2a1c4487433/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F59161.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F59161.cc?ref=50a8a9413d3a0a485ef5b1886361c2a1c4487433", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do run }\n+// { dg-options \"-g -O0\" }\n+\n+// Copyright (C) 2011-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <deque>\n+#include <list>\n+#include <ext/slist>\n+#include <set>\n+#include <vector>\n+#include <debug/vector>\n+#include <iostream>\n+\n+struct C {\n+  C(int& i) : ref(i) { }\n+  int& ref;\n+  bool operator<(const C& c) const { return ref < c.ref; }\n+};\n+\n+int main()\n+{\n+  int i = 1;\n+  C c(i);\n+\n+  std::deque<C> d;\n+  d.push_back(c);\n+  std::deque<C>::iterator diter = d.begin();\n+// { dg-final { regexp-test diter {ref = @0x.*} } }\n+\n+  std::list<C> l;\n+  l.push_back(c);\n+  std::list<C>::iterator liter = l.begin();\n+  // Need to ensure the list<C>::iterator::_Node typedef is in the debuginfo:\n+  int tmp __attribute__((unused)) = (*liter).ref;\n+// { dg-final { regexp-test liter {ref = @0x.*} } }\n+\n+  __gnu_cxx::slist<C> sl;\n+  sl.push_front(c);\n+  __gnu_cxx::slist<C>::iterator sliter = sl.begin();\n+// { dg-final { regexp-test sliter {ref = @0x.*} } }\n+\n+  std::set<C> s;\n+  s.insert(c);\n+  std::set<C>::iterator siter = s.begin();\n+// { dg-final { regexp-test siter {ref = @0x.*} } }\n+\n+  std::vector<C> v;\n+  v.push_back(c);\n+  std::vector<C>::iterator viter = v.begin();\n+// { dg-final { regexp-test viter {ref = @0x.*} } }\n+\n+  std::cout << \"\\n\";\n+  return 0;\t\t\t// Mark SPOT\n+}\n+// { dg-final { gdb-test SPOT } }"}]}