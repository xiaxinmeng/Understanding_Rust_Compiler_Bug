{"sha": "c4fcf531ae0b236cf8ba7b3f664da08e858bfc89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRmY2Y1MzFhZTBiMjM2Y2Y4YmE3YjNmNjY0ZGEwOGU4NThiZmM4OQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-30T02:55:23Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-30T02:55:23Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r632", "tree": {"sha": "c1c0916a9d721ca778b3da049fd34f635e307b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1c0916a9d721ca778b3da049fd34f635e307b9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4fcf531ae0b236cf8ba7b3f664da08e858bfc89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fcf531ae0b236cf8ba7b3f664da08e858bfc89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4fcf531ae0b236cf8ba7b3f664da08e858bfc89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fcf531ae0b236cf8ba7b3f664da08e858bfc89/comments", "author": null, "committer": null, "parents": [{"sha": "77395be632139b8dcba8b3491ed4f91350721e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77395be632139b8dcba8b3491ed4f91350721e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77395be632139b8dcba8b3491ed4f91350721e19"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "744666454a47762e0b70c02ea308bd4ebd568f6e", "filename": "gcc/stmt.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fcf531ae0b236cf8ba7b3f664da08e858bfc89/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fcf531ae0b236cf8ba7b3f664da08e858bfc89/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=c4fcf531ae0b236cf8ba7b3f664da08e858bfc89", "patch": "@@ -3650,15 +3650,19 @@ expand_end_case (orig_index)\n #ifdef HAVE_casesi\n \t  if (HAVE_casesi)\n \t    {\n+\t      enum machine_mode index_mode = SImode;\n+\t      tree index_type = GET_MODE_BITSIZE (index_mode);\n+\n \t      /* Convert the index to SImode.  */\n-\t      if (TYPE_MODE (TREE_TYPE (index_expr)) == DImode)\n+\t      if (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (index_expr)))\n+\t\t  > GET_MODE_BITSIZE (index_mode))\n \t\t{\n \t\t  index_expr = build (MINUS_EXPR, TREE_TYPE (index_expr),\n \t\t\t\t      index_expr, minval);\n \t\t  minval = integer_zero_node;\n \t\t}\n-\t      if (TYPE_MODE (TREE_TYPE (index_expr)) != SImode)\n-\t\tindex_expr = convert (type_for_size (GET_MODE_BITSIZE (SImode), 0),\n+\t      if (TYPE_MODE (TREE_TYPE (index_expr)) != index_mode)\n+\t\tindex_expr = convert (type_for_size (index_type, 0),\n \t\t\t\t      index_expr);\n \t      index = expand_expr (index_expr, 0, VOIDmode, 0);\n \t      emit_queue ();"}]}