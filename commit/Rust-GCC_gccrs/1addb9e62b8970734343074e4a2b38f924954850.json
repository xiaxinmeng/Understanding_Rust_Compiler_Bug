{"sha": "1addb9e62b8970734343074e4a2b38f924954850", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkZGI5ZTYyYjg5NzA3MzQzNDMwNzRlNGEyYjM4ZjkyNDk1NDg1MA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-08-05T17:21:00Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-08-05T17:21:00Z"}, "message": "re PR tree-optimization/72810 (error: type mismatch for case label in switch statement)\n\nFix PR tree-optimization/72810\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/72810\n\t* tree-vrp.c (simplify_switch_using_ranges): Avoid changing\n\tthe type of the case labels when truncating.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/72810\n\t* gcc.dg/tree-ssa/vrp110.c: New test.\n\nFrom-SVN: r239174", "tree": {"sha": "3bdef0765785dff4bd123426fdbb1fc37f9af477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bdef0765785dff4bd123426fdbb1fc37f9af477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1addb9e62b8970734343074e4a2b38f924954850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1addb9e62b8970734343074e4a2b38f924954850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1addb9e62b8970734343074e4a2b38f924954850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1addb9e62b8970734343074e4a2b38f924954850/comments", "author": null, "committer": null, "parents": [{"sha": "1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b62ed4f2638c59f30ff9480789b4cdeb740ddbe"}], "stats": {"total": 78, "additions": 59, "deletions": 19}, "files": [{"sha": "10d7224b36a786e423028eb241ef798c916a868e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1addb9e62b8970734343074e4a2b38f924954850/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1addb9e62b8970734343074e4a2b38f924954850/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1addb9e62b8970734343074e4a2b38f924954850", "patch": "@@ -1,3 +1,9 @@\n+2016-08-05  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR tree-optimization/72810\n+\t* tree-vrp.c (simplify_switch_using_ranges): Avoid changing\n+\tthe type of the case labels when truncating.\n+\n 2016-08-05  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \tPR Target/72819"}, {"sha": "25af7832a593d9a6745fc88e1c4fe9433c7b8433", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1addb9e62b8970734343074e4a2b38f924954850/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1addb9e62b8970734343074e4a2b38f924954850/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1addb9e62b8970734343074e4a2b38f924954850", "patch": "@@ -1,3 +1,8 @@\n+2016-08-05  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR tree-optimization/72810\n+\t* gcc.dg/tree-ssa/vrp110.c: New test.\n+\n 2016-08-05  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \tPR Target/72819"}, {"sha": "34d7eb4e76955ed1f27df16eb52ef38fb423e897", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp110.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1addb9e62b8970734343074e4a2b38f924954850/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp110.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1addb9e62b8970734343074e4a2b38f924954850/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp110.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp110.c?ref=1addb9e62b8970734343074e4a2b38f924954850", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-options \"-O2\" }  */\n+\n+extern void foo (void);\n+extern void bar (void);\n+\n+void\n+test (int i)\n+{\n+  if (i == 1)\n+    return;\n+\n+  typedef int t;\n+  t j = i;\n+  switch (j)\n+    {\n+    case 1:\n+    case 2:\n+      foo ();\n+      break;\n+    case 7:\n+      bar ();\n+      break;\n+    }\n+}"}, {"sha": "5573023da76f4b1ba2514efddc267e4268fb0b91", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1addb9e62b8970734343074e4a2b38f924954850/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1addb9e62b8970734343074e4a2b38f924954850/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1addb9e62b8970734343074e4a2b38f924954850", "patch": "@@ -9644,61 +9644,66 @@ simplify_switch_using_ranges (gswitch *stmt)\n       tree min_label = gimple_switch_label (stmt, min_idx);\n       tree max_label = gimple_switch_label (stmt, max_idx);\n \n+      /* Avoid changing the type of the case labels when truncating.  */\n+      tree case_label_type = TREE_TYPE (CASE_LOW (min_label));\n+      tree vr_min = fold_convert (case_label_type, vr->min);\n+      tree vr_max = fold_convert (case_label_type, vr->max);\n+\n       if (vr->type == VR_RANGE)\n \t{\n \t  /* If OP's value range is [2,8] and the low label range is\n \t     0 ... 3, truncate the label's range to 2 .. 3.  */\n-\t  if (tree_int_cst_compare (CASE_LOW (min_label), vr->min) < 0\n+\t  if (tree_int_cst_compare (CASE_LOW (min_label), vr_min) < 0\n \t      && CASE_HIGH (min_label) != NULL_TREE\n-\t      && tree_int_cst_compare (CASE_HIGH (min_label), vr->min) >= 0)\n-\t    CASE_LOW (min_label) = vr->min;\n+\t      && tree_int_cst_compare (CASE_HIGH (min_label), vr_min) >= 0)\n+\t    CASE_LOW (min_label) = vr_min;\n \n \t  /* If OP's value range is [2,8] and the high label range is\n \t     7 ... 10, truncate the label's range to 7 .. 8.  */\n-\t  if (tree_int_cst_compare (CASE_LOW (max_label), vr->max) <= 0\n+\t  if (tree_int_cst_compare (CASE_LOW (max_label), vr_max) <= 0\n \t      && CASE_HIGH (max_label) != NULL_TREE\n-\t      && tree_int_cst_compare (CASE_HIGH (max_label), vr->max) > 0)\n-\t    CASE_HIGH (max_label) = vr->max;\n+\t      && tree_int_cst_compare (CASE_HIGH (max_label), vr_max) > 0)\n+\t    CASE_HIGH (max_label) = vr_max;\n \t}\n       else if (vr->type == VR_ANTI_RANGE)\n \t{\n-\t  tree one_cst = build_one_cst (TREE_TYPE (op));\n+\t  tree one_cst = build_one_cst (case_label_type);\n \n \t  if (min_label == max_label)\n \t    {\n \t      /* If OP's value range is ~[7,8] and the label's range is\n \t\t 7 ... 10, truncate the label's range to 9 ... 10.  */\n-\t      if (tree_int_cst_compare (CASE_LOW (min_label), vr->min) == 0\n+\t      if (tree_int_cst_compare (CASE_LOW (min_label), vr_min) == 0\n \t\t  && CASE_HIGH (min_label) != NULL_TREE\n-\t\t  && tree_int_cst_compare (CASE_HIGH (min_label), vr->max) > 0)\n+\t\t  && tree_int_cst_compare (CASE_HIGH (min_label), vr_max) > 0)\n \t\tCASE_LOW (min_label)\n-\t\t  = int_const_binop (PLUS_EXPR, vr->max, one_cst);\n+\t\t  = int_const_binop (PLUS_EXPR, vr_max, one_cst);\n \n \t      /* If OP's value range is ~[7,8] and the label's range is\n \t\t 5 ... 8, truncate the label's range to 5 ... 6.  */\n-\t      if (tree_int_cst_compare (CASE_LOW (min_label), vr->min) < 0\n+\t      if (tree_int_cst_compare (CASE_LOW (min_label), vr_min) < 0\n \t\t  && CASE_HIGH (min_label) != NULL_TREE\n-\t\t  && tree_int_cst_compare (CASE_HIGH (min_label), vr->max) == 0)\n+\t\t  && tree_int_cst_compare (CASE_HIGH (min_label), vr_max) == 0)\n \t\tCASE_HIGH (min_label)\n-\t\t  = int_const_binop (MINUS_EXPR, vr->min, one_cst);\n+\t\t  = int_const_binop (MINUS_EXPR, vr_min, one_cst);\n \t    }\n \t  else\n \t    {\n \t      /* If OP's value range is ~[2,8] and the low label range is\n \t\t 0 ... 3, truncate the label's range to 0 ... 1.  */\n-\t      if (tree_int_cst_compare (CASE_LOW (min_label), vr->min) < 0\n+\t      if (tree_int_cst_compare (CASE_LOW (min_label), vr_min) < 0\n \t\t  && CASE_HIGH (min_label) != NULL_TREE\n-\t\t  && tree_int_cst_compare (CASE_HIGH (min_label), vr->min) >= 0)\n+\t\t  && tree_int_cst_compare (CASE_HIGH (min_label), vr_min) >= 0)\n \t\tCASE_HIGH (min_label)\n-\t\t  = int_const_binop (MINUS_EXPR, vr->min, one_cst);\n+\t\t  = int_const_binop (MINUS_EXPR, vr_min, one_cst);\n \n \t      /* If OP's value range is ~[2,8] and the high label range is\n \t\t 7 ... 10, truncate the label's range to 9 ... 10.  */\n-\t      if (tree_int_cst_compare (CASE_LOW (max_label), vr->max) <= 0\n+\t      if (tree_int_cst_compare (CASE_LOW (max_label), vr_max) <= 0\n \t\t  && CASE_HIGH (max_label) != NULL_TREE\n-\t\t  && tree_int_cst_compare (CASE_HIGH (max_label), vr->max) > 0)\n+\t\t  && tree_int_cst_compare (CASE_HIGH (max_label), vr_max) > 0)\n \t\tCASE_LOW (max_label)\n-\t\t  = int_const_binop (PLUS_EXPR, vr->max, one_cst);\n+\t\t  = int_const_binop (PLUS_EXPR, vr_max, one_cst);\n \t    }\n \t}\n "}]}