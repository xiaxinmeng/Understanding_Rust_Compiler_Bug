{"sha": "a20cc01679040fb3b069285a638e3a469c688159", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIwY2MwMTY3OTA0MGZiM2IwNjkyODVhNjM4ZTNhNDY5YzY4ODE1OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:10Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:10Z"}, "message": "rtlanal: Add simple_regno_set\n\nThis patch adds a routine for finding a \u201csimple\u201d SET for a register\ndefinition.  See the comment in the patch for details.\n\ngcc/\n\t* rtl.h (simple_regno_set): Declare.\n\t* rtlanal.c (simple_regno_set): New function.", "tree": {"sha": "3ebd7235e422ff4188b800acebed59a3b9e83d93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ebd7235e422ff4188b800acebed59a3b9e83d93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a20cc01679040fb3b069285a638e3a469c688159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20cc01679040fb3b069285a638e3a469c688159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a20cc01679040fb3b069285a638e3a469c688159", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20cc01679040fb3b069285a638e3a469c688159/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04ee46ed1c06cbbffcd8eb0626b4ab6c3a5082d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ee46ed1c06cbbffcd8eb0626b4ab6c3a5082d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ee46ed1c06cbbffcd8eb0626b4ab6c3a5082d9"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "3915fae61e730eca147bb375d2c0eef856ebdd4e", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20cc01679040fb3b069285a638e3a469c688159/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20cc01679040fb3b069285a638e3a469c688159/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a20cc01679040fb3b069285a638e3a469c688159", "patch": "@@ -3539,6 +3539,7 @@ extern void set_insn_deleted (rtx_insn *);\n /* Functions in rtlanal.c */\n \n extern rtx single_set_2 (const rtx_insn *, const_rtx);\n+extern rtx simple_regno_set (rtx, unsigned int);\n extern bool contains_symbol_ref_p (const_rtx);\n extern bool contains_symbolic_reference_p (const_rtx);\n extern bool contains_constant_pool_address_p (const_rtx);"}, {"sha": "80e72d6049d55c486f08c9a1c97b1d1590280e3c", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20cc01679040fb3b069285a638e3a469c688159/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20cc01679040fb3b069285a638e3a469c688159/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=a20cc01679040fb3b069285a638e3a469c688159", "patch": "@@ -1455,6 +1455,39 @@ set_of (const_rtx pat, const_rtx insn)\n   return data.found;\n }\n \n+/* Check whether instruction pattern PAT contains a SET with the following\n+   properties:\n+\n+   - the SET is executed unconditionally;\n+   - the destination of the SET is write-only rather than read-write; and\n+   - either:\n+     - the destination of the SET is a REG that contains REGNO; or\n+     - the destination of the SET is a SUBREG of such a REG.\n+\n+   If PAT does have a SET like that, return the set, otherwise return null.\n+\n+   This is intended to be an alternative to single_set for passes that\n+   can handle patterns with multiple_sets.  */\n+rtx\n+simple_regno_set (rtx pat, unsigned int regno)\n+{\n+  if (GET_CODE (pat) == PARALLEL)\n+    {\n+      int last = XVECLEN (pat, 0) - 1;\n+      for (int i = 0; i < last; ++i)\n+\tif (rtx set = simple_regno_set (XVECEXP (pat, 0, i), regno))\n+\t  return set;\n+\n+      pat = XVECEXP (pat, 0, last);\n+    }\n+\n+  if (GET_CODE (pat) == SET\n+      && covers_regno_no_parallel_p (SET_DEST (pat), regno))\n+    return pat;\n+\n+  return nullptr;\n+}\n+\n /* Add all hard register in X to *PSET.  */\n void\n find_all_hard_regs (const_rtx x, HARD_REG_SET *pset)"}]}