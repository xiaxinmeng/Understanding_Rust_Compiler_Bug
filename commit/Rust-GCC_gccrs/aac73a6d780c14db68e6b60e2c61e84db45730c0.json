{"sha": "aac73a6d780c14db68e6b60e2c61e84db45730c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFjNzNhNmQ3ODBjMTRkYjY4ZTZiNjBlMmM2MWU4NGRiNDU3MzBjMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-05-11T20:53:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-05-11T20:53:36Z"}, "message": "re PR c++/34272 (ICE with invalid template specialization)\n\n/cp\n2010-05-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/34272\n\tPR c++/43630\n\tPR c++/34491\n\t* pt.c (process_partial_specialization): Return error_mark_node\n\tin case of unused template parameters in partial specialization.\n\n/testsuite\n2010-05-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/34272\n\tPR c++/43630\n\tPR c++/34491\n\t* g++.dg/template/crash97.C: New.\n\t* g++.dg/template/crash98.C: Likewise.\n\t* g++.dg/template/crash99.C: Likewise.\n\t* g++.dg/cpp0x/pr31439.C: Adjust.\n\t* g++.dg/template/crash95.C: Likewise.\n\nFrom-SVN: r159295", "tree": {"sha": "040db5f6dc7e26684be2b811a89480533f592ff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/040db5f6dc7e26684be2b811a89480533f592ff5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aac73a6d780c14db68e6b60e2c61e84db45730c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac73a6d780c14db68e6b60e2c61e84db45730c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac73a6d780c14db68e6b60e2c61e84db45730c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac73a6d780c14db68e6b60e2c61e84db45730c0/comments", "author": null, "committer": null, "parents": [{"sha": "9d000e830050e5157a159b531c1f6a564e7fff29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d000e830050e5157a159b531c1f6a564e7fff29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d000e830050e5157a159b531c1f6a564e7fff29"}], "stats": {"total": 72, "additions": 66, "deletions": 6}, "files": [{"sha": "58a57e05e5144d4223090b65655cf17b6c1e4f66", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aac73a6d780c14db68e6b60e2c61e84db45730c0", "patch": "@@ -1,3 +1,11 @@\n+2010-05-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/34272\n+\tPR c++/43630\n+\tPR c++/34491\n+\t* pt.c (process_partial_specialization): Return error_mark_node\n+\tin case of unused template parameters in partial specialization.\n+\n 2010-05-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/44062"}, {"sha": "1ff1fe2b5770030c771775e85f94c7393f07bf07", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=aac73a6d780c14db68e6b60e2c61e84db45730c0", "patch": "@@ -1,6 +1,6 @@\n /* Handle parameterized types (templates) for GNU C++.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Written by Ken Raeburn (raeburn@cygnus.com) while at Watchmaker Computing.\n    Rewritten by Jason Merrill (jason@cygnus.com).\n@@ -3837,7 +3837,7 @@ process_partial_specialization (tree decl)\n   int nargs = TREE_VEC_LENGTH (inner_args);\n   int ntparms;\n   int  i;\n-  int did_error_intro = 0;\n+  bool did_error_intro = false;\n   struct template_parm_data tpd;\n   struct template_parm_data tpd2;\n \n@@ -3899,12 +3899,15 @@ process_partial_specialization (tree decl)\n \tif (!did_error_intro)\n \t  {\n \t    error (\"template parameters not used in partial specialization:\");\n-\t    did_error_intro = 1;\n+\t    did_error_intro = true;\n \t  }\n \n \terror (\"        %qD\", TREE_VALUE (TREE_VEC_ELT (inner_parms, i)));\n       }\n \n+  if (did_error_intro)\n+    return error_mark_node;\n+\n   /* [temp.class.spec]\n \n      The argument list of the specialization shall not be identical to"}, {"sha": "11d07465150fa4efe2896f544aa50d746c7385af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aac73a6d780c14db68e6b60e2c61e84db45730c0", "patch": "@@ -1,3 +1,14 @@\n+2010-05-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/34272\n+\tPR c++/43630\n+\tPR c++/34491\n+\t* g++.dg/template/crash97.C: New.\n+\t* g++.dg/template/crash98.C: Likewise.\n+\t* g++.dg/template/crash99.C: Likewise.\n+\t* g++.dg/cpp0x/pr31439.C: Adjust.\n+\t* g++.dg/template/crash95.C: Likewise.\n+\n 2010-05-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/44071"}, {"sha": "9d22b56c2f8bc95b8bfc038d09dbf5dcd635efaa", "filename": "gcc/testsuite/g++.dg/cpp0x/pr31439.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31439.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31439.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31439.C?ref=aac73a6d780c14db68e6b60e2c61e84db45730c0", "patch": "@@ -1,8 +1,8 @@\n // { dg-options \"-std=c++0x\" }\n-template<typename...> struct A;\n+template<typename...> struct A; // { dg-error \"declaration\" }\n \n template<char> struct A<> {}; // { dg-error \"not used in partial specialization|anonymous\" }\n \n-template<typename T, typename... U> struct A<T, U...> : A<U...> {};\n+template<typename T, typename... U> struct A<T, U...> : A<U...> {}; // { dg-error \"incomplete type\" }\n \n A<int> a;"}, {"sha": "2ad9e9816666fd5fc98d8fda3ca00ab48e4a5bb8", "filename": "gcc/testsuite/g++.dg/template/crash95.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash95.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash95.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash95.C?ref=aac73a6d780c14db68e6b60e2c61e84db45730c0", "patch": "@@ -8,4 +8,4 @@ template < typename > struct S\n   };\n };\n \n-S < int > s(0);\n+S < int > s(0); // { dg-error \"incomplete type\" }"}, {"sha": "3d177f4e53412ffb74bba5a706bd858028e4c1fa", "filename": "gcc/testsuite/g++.dg/template/crash97.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash97.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash97.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash97.C?ref=aac73a6d780c14db68e6b60e2c61e84db45730c0", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/34272\n+\n+template<typename> struct A {};\n+\n+template<typename> struct A<int> // { dg-error \"not used|template\\\\-parameter\" }\n+{\n+  template<int> void foo();\n+};\n+\n+void bar()\n+{\n+  A<int> a; // { dg-error \"incomplete type\" }\n+  a.foo<0>(); // { dg-error \"expected\" }\n+}"}, {"sha": "e3c224df1d9c7ad8eb944382adfc40777ce021f2", "filename": "gcc/testsuite/g++.dg/template/crash98.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash98.C?ref=aac73a6d780c14db68e6b60e2c61e84db45730c0", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/43630\n+\n+template < typename > struct A; // { dg-error \"declaration\" }\n+\n+template < typename > struct A < int > // { dg-error \"not used|template\\\\-parameter\" }\n+{\n+  int i;\n+  int f ();\n+};\n+\n+int A < int >::f () // { dg-error \"incomplete type\" }\n+{\n+  return i;\n+}"}, {"sha": "606d3e3049b2e034334066ceb0932104881c5dc0", "filename": "gcc/testsuite/g++.dg/template/crash99.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash99.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac73a6d780c14db68e6b60e2c61e84db45730c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash99.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash99.C?ref=aac73a6d780c14db68e6b60e2c61e84db45730c0", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/34491\n+\n+template<typename> struct A;\n+\n+template<0> struct A<int> // { dg-error \"expected|template|anonymous\" }\n+{\n+  static const int i = 0;\n+};\n+\n+int n = A<int>::i; // { dg-error \"incomplete type\" }"}]}