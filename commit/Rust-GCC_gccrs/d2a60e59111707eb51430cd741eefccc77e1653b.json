{"sha": "d2a60e59111707eb51430cd741eefccc77e1653b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJhNjBlNTkxMTE3MDdlYjUxNDMwY2Q3NDFlZWZjY2M3N2UxNjUzYg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-08-21T14:46:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-08-21T14:46:49Z"}, "message": "[Ada] Improper copying of limited arrays with default initialization\n\nThis patch fixes an improper expansion of aggregates for limited array\ntypes in an object declaration. Prior to this patch, The presence of the\naggregate (which can only consist of box initializations) would create a\ntemporary that was then assigned to the object in the declaration.\nApart from a violation of the semantics of build-in-place limited\nobjects, this can also lead to out-of-scope access in LLVM.\n\nExecuting the following;\n\n   gcc -c -gnatDG nocopy.adb\n   grep quintet nocopy.adb.dg | wc -l\n\nmust yield:\n\n   5\n\n----\nprocedure NoCopy is\n\n  --  Task used in this example to test that the limited component\n  --  is properly initialized.\n\n  task type T_Task (Disc : Natural);\n\n  task body T_Task is\n  begin\n     null;\n  end T_Task;\n\n  type My_Rec (D : Natural := 9999) is record\n\n     --  Components initialized by means of the current value\n     --  of the record discriminant\n\n     T : T_Task (D);\n  end record;\n\n  type TR is array (1 .. 5) of My_Rec;\n  Quintet : TR := (others => (others => <>));\nbegin\n   null;\nend NoCopy;\n\n2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Expand_Array_Aggregate): If the component type\n\tis limited, the array must be constructed in place, so set flag\n\tIn_Place_Assign_OK_For_Declaration accordingly. This prevents\n\timproper copying of an array of tasks during initialization.\n\nFrom-SVN: r263719", "tree": {"sha": "80601006a85d4cf8561d94abfe5040a34c154df1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80601006a85d4cf8561d94abfe5040a34c154df1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2a60e59111707eb51430cd741eefccc77e1653b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a60e59111707eb51430cd741eefccc77e1653b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2a60e59111707eb51430cd741eefccc77e1653b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a60e59111707eb51430cd741eefccc77e1653b/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ab1c4ee18d7866249fb99bcc9d073fcb475dc9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab1c4ee18d7866249fb99bcc9d073fcb475dc9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab1c4ee18d7866249fb99bcc9d073fcb475dc9d"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "d0ad28d3ebadc998ce639727c7822c77d583f285", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a60e59111707eb51430cd741eefccc77e1653b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a60e59111707eb51430cd741eefccc77e1653b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d2a60e59111707eb51430cd741eefccc77e1653b", "patch": "@@ -1,3 +1,10 @@\n+2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Array_Aggregate): If the component type\n+\tis limited, the array must be constructed in place, so set flag\n+\tIn_Place_Assign_OK_For_Declaration accordingly. This prevents\n+\timproper copying of an array of tasks during initialization.\n+\n 2018-08-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Call_to_gnu): Always suppress an"}, {"sha": "d1d9c12d4585184b4850e778b9f0e762bd30bf94", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a60e59111707eb51430cd741eefccc77e1653b/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a60e59111707eb51430cd741eefccc77e1653b/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=d2a60e59111707eb51430cd741eefccc77e1653b", "patch": "@@ -6195,10 +6195,11 @@ package body Exp_Aggr is\n       --  Look if in place aggregate expansion is possible\n \n       --  For object declarations we build the aggregate in place, unless\n-      --  the array is bit-packed or the component is controlled.\n+      --  the array is bit-packed.\n \n       --  For assignments we do the assignment in place if all the component\n-      --  associations have compile-time known values. For other cases we\n+      --  associations have compile-time known values, or are default-\n+      --  initialized limited components, e.g. tasks. For other cases we\n       --  create a temporary. The analysis for safety of on-line assignment\n       --  is delicate, i.e. we don't know how to do it fully yet ???\n \n@@ -6211,7 +6212,12 @@ package body Exp_Aggr is\n          Establish_Transient_Scope (N, Manage_Sec_Stack => False);\n       end if;\n \n-      if Has_Default_Init_Comps (N) then\n+      --  An array of limited components is built in place.\n+\n+      if Is_Limited_Type (Typ) then\n+         Maybe_In_Place_OK := True;\n+\n+      elsif Has_Default_Init_Comps (N) then\n          Maybe_In_Place_OK := False;\n \n       elsif Is_Bit_Packed_Array (Typ)\n@@ -6247,15 +6253,17 @@ package body Exp_Aggr is\n       --  expected to appear in qualified form. In-place expansion eliminates\n       --  the qualification and eventually violates this SPARK 05 restiction.\n \n-      --  Should document the rest of the guards ???\n+      --  Arrays of limited components must be built in place. The code\n+      --  previously excluded controlled components but this is an old\n+      --  oversight: the rules in 7.6 (17) are clear.\n \n-      if not Has_Default_Init_Comps (N)\n+      if (not Has_Default_Init_Comps (N)\n+            or else Is_Limited_Type (Etype (N)))\n         and then Comes_From_Source (Parent_Node)\n         and then Parent_Kind = N_Object_Declaration\n         and then Present (Expression (Parent_Node))\n         and then not\n           Must_Slide (Etype (Defining_Identifier (Parent_Node)), Typ)\n-        and then not Has_Controlled_Component (Typ)\n         and then not Is_Bit_Packed_Array (Typ)\n         and then not Restriction_Check_Required (SPARK_05)\n       then\n@@ -6292,6 +6300,15 @@ package body Exp_Aggr is\n          Set_Expansion_Delayed (N);\n          return;\n \n+      --  Limited arrays in return statements are expanded when\n+      --  enclosing construct is expanded.\n+\n+      elsif Maybe_In_Place_OK\n+        and then Nkind (Parent (N)) = N_Simple_Return_Statement\n+      then\n+         Set_Expansion_Delayed (N);\n+         return;\n+\n       --  In the remaining cases the aggregate is the RHS of an assignment\n \n       elsif Maybe_In_Place_OK\n@@ -6365,7 +6382,9 @@ package body Exp_Aggr is\n             Target := New_Occurrence_Of (Tmp, Loc);\n \n          else\n-            if Has_Default_Init_Comps (N) then\n+            if Has_Default_Init_Comps (N)\n+              and then not Maybe_In_Place_OK\n+            then\n \n                --  Ada 2005 (AI-287): This case has not been analyzed???\n "}]}