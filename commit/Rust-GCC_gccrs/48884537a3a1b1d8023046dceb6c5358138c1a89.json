{"sha": "48884537a3a1b1d8023046dceb6c5358138c1a89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg4ODQ1MzdhM2ExYjFkODAyMzA0NmRjZWI2YzUzNTgxMzhjMWE4OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-10-05T09:15:47Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-10-05T09:15:47Z"}, "message": "re PR c++/23513 (overload resolution fails to select a more specialized template)\n\ncp:\n\tPR c++/23513\n\t* call.c (joust): Adjust length count to more_specialized_fn.\n\t* pt.c (more_specialized_fn): Cope with non-static member vs\n\tnon-member.\ntestsuite:\n\tPR c++/23513\n\t* g++.dg/template/spec22.C: Robustify test.\n\t* g++.dg/template/spec26.C: New.\n\nFrom-SVN: r104981", "tree": {"sha": "e8b6e32abd9c1307b81f84ce281459c250722933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8b6e32abd9c1307b81f84ce281459c250722933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48884537a3a1b1d8023046dceb6c5358138c1a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48884537a3a1b1d8023046dceb6c5358138c1a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48884537a3a1b1d8023046dceb6c5358138c1a89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48884537a3a1b1d8023046dceb6c5358138c1a89/comments", "author": null, "committer": null, "parents": [{"sha": "410e268ccec9d2c227cc12f3d081557ce2096c65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410e268ccec9d2c227cc12f3d081557ce2096c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410e268ccec9d2c227cc12f3d081557ce2096c65"}], "stats": {"total": 116, "additions": 85, "deletions": 31}, "files": [{"sha": "c79a926c136c49d674f0d6ae403f08feb509e71b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=48884537a3a1b1d8023046dceb6c5358138c1a89", "patch": "@@ -1,3 +1,10 @@\n+2005-10-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/23513\n+\t* call.c (joust): Adjust length count to more_specialized_fn.\n+\t* pt.c (more_specialized_fn): Cope with non-static member vs\n+\tnon-member.\n+\n 2005-10-04  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/23125"}, {"sha": "2843b16703153f0a5de543abba667185e23db567", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=48884537a3a1b1d8023046dceb6c5358138c1a89", "patch": "@@ -6133,17 +6133,11 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn)\n       winner = more_specialized_fn\n \t(TI_TEMPLATE (cand1->template_decl),\n \t TI_TEMPLATE (cand2->template_decl),\n-\t /* Tell the deduction code how many real function arguments\n-\t    we saw, not counting the implicit 'this' argument.  But,\n-\t    add_function_candidate() suppresses the \"this\" argument\n-\t    for constructors.\n-\n-\t    [temp.func.order]: The presence of unused ellipsis and default\n+\t /* [temp.func.order]: The presence of unused ellipsis and default\n \t    arguments has no effect on the partial ordering of function\n-\t    templates.  */\n-\t cand1->num_convs\n-\t - (DECL_NONSTATIC_MEMBER_FUNCTION_P (cand1->fn)\n-\t    - DECL_CONSTRUCTOR_P (cand1->fn)));\n+\t    templates.   add_function_candidate() will not have\n+\t    counted the \"this\" argument for constructors.  */\n+\t cand1->num_convs + DECL_CONSTRUCTOR_P (cand1->fn));\n       if (winner)\n \treturn winner;\n     }"}, {"sha": "317d17f3633f7ee817bcd93d438b3f865e5d1cd7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=48884537a3a1b1d8023046dceb6c5358138c1a89", "patch": "@@ -10491,17 +10491,30 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n   tree args2 = TYPE_ARG_TYPES (TREE_TYPE (decl2));\n   int better1 = 0;\n   int better2 = 0;\n-\n-  /* If only one is a member function, they are unordered.  */\n-  if (DECL_FUNCTION_MEMBER_P (decl1) != DECL_FUNCTION_MEMBER_P (decl2))\n-    return 0;\n-\n-  /* Don't consider 'this' parameter.  */\n+  \n+  /* Remove the this parameter from non-static member functions.  If\n+     one is a non-static member function and the other is not a static\n+     member function, remove the first parameter from that function\n+     also.  This situation occurs for operator functions where we\n+     locate both a member function (with this pointer) and non-member\n+     operator (with explicit first operand).  */\n   if (DECL_NONSTATIC_MEMBER_FUNCTION_P (decl1))\n-    args1 = TREE_CHAIN (args1);\n-  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (decl2))\n-    args2 = TREE_CHAIN (args2);\n-\n+    {\n+      len--; /* LEN is the number of significant arguments for DECL1 */\n+      args1 = TREE_CHAIN (args1);\n+      if (!DECL_STATIC_FUNCTION_P (decl2))\n+\targs2 = TREE_CHAIN (args2);\n+    }\n+  else if (DECL_NONSTATIC_MEMBER_FUNCTION_P (decl2))\n+    {\n+      args2 = TREE_CHAIN (args2);\n+      if (!DECL_STATIC_FUNCTION_P (decl1))\n+\t{\n+\t  len--;\n+\t  args1 = TREE_CHAIN (args1);\n+\t}\n+    }\n+    \n   /* If only one is a conversion operator, they are unordered.  */\n   if (DECL_CONV_FN_P (decl1) != DECL_CONV_FN_P (decl2))\n     return 0;"}, {"sha": "6790aa87479ac6b40737ce6369e4bf54928196fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48884537a3a1b1d8023046dceb6c5358138c1a89", "patch": "@@ -1,3 +1,9 @@\n+2005-10-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/23513\n+\t* g++.dg/template/spec22.C: Robustify test.\n+\t* g++.dg/template/spec26.C: New.\n+\n 2005-10-05  Uros Bizjak  <uros@kss-loka.si>\n \n \t* gcc.dg/vect/vect-shift-1.c: Include tree-vect.h header. Check"}, {"sha": "a091b0f36bf6517062bd680b8e9fd0a530f7226f", "filename": "gcc/testsuite/g++.dg/template/spec22.C", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec22.C?ref=48884537a3a1b1d8023046dceb6c5358138c1a89", "patch": "@@ -5,18 +5,17 @@\n // Origin: Andrew Pinski <pinskia@gcc.gnu.org>\n //         Nathan Sidwell <nathan@gcc.gnu.org>\n \n-template <typename T>\n-int operator+ (T const &, int); // { dg-error \"T = Foo\" \"\" }\n-\n-struct Foo \n+template <typename T> class srp;\n+template <typename T> struct ptr\n {\n-  template <typename T>\n-  int operator+ (T) const; // { dg-error \"T = int\" \"\" }\n+  template <typename U> ptr(const srp<U> &other); // { dg-error \"ptr<T>::ptr\" }\n };\n-\n-int main ()\n+template <typename T> struct srp\n {\n-  Foo f;\n-\n-  return f + 0; // { dg-error \"ambiguous overload\" \"\" }\n+  template <typename U> operator ptr<U>(void) const; // { dg-error \"srp<T>::operator\" }\n+};\n+ptr<int> parent_get()\n+{\n+  srp<int> parent;\n+  return parent; // { dg-error \"is ambiguous\" }\n }"}, {"sha": "3d187071afe1d9c2051405db19415ebfbbb08b6a", "filename": "gcc/testsuite/g++.dg/template/spec26.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48884537a3a1b1d8023046dceb6c5358138c1a89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec26.C?ref=48884537a3a1b1d8023046dceb6c5358138c1a89", "patch": "@@ -0,0 +1,35 @@\n+// dg-do run\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 16 Sep 2005 <nathan@codesourcery.com>\n+\n+// PR 23519  template specialization ordering (DR214)\n+// Origin:  Maxim Yegorushkin <maxim.yegorushkin@gmail.com>\n+\n+struct A\n+{\n+    template<class T> int operator+(T&) { return 1;}\n+};\n+\n+template<class T> struct B\n+{\n+  int operator-(A&) {return 2;}\n+  template<typename R> int operator*(R&) {return 3;}\n+};\n+\n+template <typename T, typename R> int operator-(B<T>, R&) {return 4;}\n+template<class T> int operator+(A&, B<T>&) { return 5;}\n+template <typename T> int operator*(T &, A&){return 6;}\n+\n+int main()\n+{\n+  A a;\n+  B<A> b;\n+  if ((a + b) != 5)\n+    return 1;\n+  \n+  if ((b - a) != 2)\n+    return 2;\n+  \n+  if ((b * a) != 6)\n+    return 3;\n+}"}]}