{"sha": "d0c4285986ccce7996149b5dfca7f0b968f6ff46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBjNDI4NTk4NmNjY2U3OTk2MTQ5YjVkZmNhN2YwYjk2OGY2ZmY0Ng==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-04-23T13:37:16Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-04-23T13:37:16Z"}, "message": "sh.c (gen_ashift_hi): Implement right shifts via gen_ashift.\n\n\t* sh.c (gen_ashift_hi): Implement right shifts via gen_ashift.\n\t* sh.md (ashrhi3_k, lshrhi3_k, lshrhi3_m, lshrhi3, lshrhi3+1): Delete.\n\nFrom-SVN: r19385", "tree": {"sha": "c7477b9c40c3c53934a0ea2b458d6c3ea1dcf454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7477b9c40c3c53934a0ea2b458d6c3ea1dcf454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0c4285986ccce7996149b5dfca7f0b968f6ff46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c4285986ccce7996149b5dfca7f0b968f6ff46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0c4285986ccce7996149b5dfca7f0b968f6ff46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c4285986ccce7996149b5dfca7f0b968f6ff46/comments", "author": null, "committer": null, "parents": [{"sha": "6df38d6ddc7aa57eb359f1d6fdc102f8905920ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df38d6ddc7aa57eb359f1d6fdc102f8905920ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df38d6ddc7aa57eb359f1d6fdc102f8905920ad"}], "stats": {"total": 77, "additions": 16, "deletions": 61}, "files": [{"sha": "126e635dc7277036ef06674b7f33a5e79f21e164", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c4285986ccce7996149b5dfca7f0b968f6ff46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c4285986ccce7996149b5dfca7f0b968f6ff46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0c4285986ccce7996149b5dfca7f0b968f6ff46", "patch": "@@ -1,3 +1,8 @@\n+Thu Apr 23 20:21:06 1997  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* sh.c (gen_ashift_hi): Implement right shifts via gen_ashift.\n+\t* sh.md (ashrhi3_k, lshrhi3_k, lshrhi3_m, lshrhi3, lshrhi3+1): Delete.\n+\n Wed Apr 22 17:07:35 1998  Michael Meissner  <meissner@cygnus.com>\n \n \t* loop.c (note_addr_stored): Correct function to take 2 arguments,"}, {"sha": "447716cb763bc39f19a2f7f7f84c56f693853c39", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c4285986ccce7996149b5dfca7f0b968f6ff46/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c4285986ccce7996149b5dfca7f0b968f6ff46/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d0c4285986ccce7996149b5dfca7f0b968f6ff46", "patch": "@@ -916,13 +916,13 @@ gen_ashift_hi (type, n, reg)\n   switch (type)\n     {\n     case ASHIFTRT:\n-      emit_insn (gen_ashrhi3_k (reg, reg, GEN_INT (n)));\n-      break;\n     case LSHIFTRT:\n-      if (n == 1)\n-\temit_insn (gen_lshrhi3_m (reg, reg, GEN_INT (n)));\n-      else\n-\temit_insn (gen_lshrhi3_k (reg, reg, GEN_INT (n)));\n+      /* We don't have HImode right shift operations because using the\n+\t ordinary 32 bit shift instructions for that doesn't generate proper\n+\t zero/sign extension.\n+\t gen_ashift_hi is only called in contexts where we know that the\n+\t sign extension works out correctly.  */\n+      gen_ashift (type, n, gen_rtx_SUBREG (SImode, reg, 0));\n       break;\n     case ASHIFT:\n       emit_insn (gen_ashlhi3_k (reg, reg, GEN_INT (n)));"}, {"sha": "e25f2b72c6afb88a7a2c80ecf31f05b083557a22", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 5, "deletions": 55, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0c4285986ccce7996149b5dfca7f0b968f6ff46/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0c4285986ccce7996149b5dfca7f0b968f6ff46/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=d0c4285986ccce7996149b5dfca7f0b968f6ff46", "patch": "@@ -1208,14 +1208,11 @@\n   \"shar\t%0\"\n   [(set_attr \"type\" \"arith\")])\n \n-(define_insn \"ashrhi3_k\"\n-  [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n-\t(ashiftrt:HI (match_operand:HI 1 \"arith_reg_operand\" \"0\")\n-\t\t     (match_operand:HI 2 \"const_int_operand\" \"M\")))\n-   (clobber (reg:SI 18))]\n-  \"INTVAL (operands[2]) == 1\"\n-  \"shar\t%0\"\n-  [(set_attr \"type\" \"arith\")])\n+;; We can't do HImode right shifts correctly unless we start out with an\n+;; explicit zero / sign extension; doing that would result in worse overall\n+;; code, so just let the machine independent code widen the mode.\n+;; That's why we don't have ashrhi3_k / lshrhi3_k / lshrhi3_m / lshrhi3 .\n+\n \n ;; ??? This should be a define expand.\n \n@@ -1328,24 +1325,6 @@\n   \"shlr%O2\t%0\"\n   [(set_attr \"type\" \"arith\")])\n \n-(define_insn \"lshrhi3_m\"\n-  [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n-\t(lshiftrt:HI (match_operand:HI 1 \"arith_reg_operand\" \"0\")\n-\t\t     (match_operand:HI 2 \"const_int_operand\" \"M\")))\n-   (clobber (reg:SI 18))]\n-  \"CONST_OK_FOR_M (INTVAL (operands[2]))\"\n-  \"shlr\t%0\"\n-  [(set_attr \"type\" \"arith\")])\n-\n-(define_insn \"lshrhi3_k\"\n-  [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n-\t(lshiftrt:HI (match_operand:HI 1 \"arith_reg_operand\" \"0\")\n-\t\t     (match_operand:HI 2 \"const_int_operand\" \"K\")))]\n-  \"CONST_OK_FOR_K (INTVAL (operands[2]))\n-   && ! CONST_OK_FOR_M (INTVAL (operands[2]))\"\n-  \"shlr%O2\t%0\"\n-  [(set_attr \"type\" \"arith\")])\n-\n (define_insn \"lshrsi3_n\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n@@ -1398,35 +1377,6 @@\n     FAIL;\n }\")\n \n-(define_insn \"lshrhi3\"\n-  [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n-\t(lshiftrt:HI (match_operand:HI 1 \"arith_reg_operand\" \"0\")\n-\t\t     (match_operand:HI 2 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI 18))]\n-  \"\"\n-  \"#\"\n-;; ??? length attribute is sometimes six instead of four.\n-  [(set (attr \"length\")\n-\t(cond [(eq (symbol_ref \"shift_insns_rtx (insn)\") (const_int 1))\n-\t       (const_string \"2\")\n-\t       (eq (symbol_ref \"shift_insns_rtx (insn)\") (const_int 2))\n-\t       (const_string \"4\")]\n-\t      (const_string \"6\")))\n-   (set_attr \"type\" \"arith\")])\n-\n-(define_split\n-  [(set (match_operand:HI 0 \"arith_reg_operand\" \"\")\n-\t(lshiftrt:HI (match_operand:HI 1 \"arith_reg_operand\" \"\")\n-\t\t     (match_operand:HI 2 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI 18))]\n-  \"\"\n-  [(use (reg:SI 0))]\n-  \"\n-{\n-  gen_shifty_hi_op (LSHIFTRT, operands);\n-  DONE;\n-}\")\n-\n ;; ??? This should be a define expand.\n \n (define_insn \"ashldi3_k\""}]}