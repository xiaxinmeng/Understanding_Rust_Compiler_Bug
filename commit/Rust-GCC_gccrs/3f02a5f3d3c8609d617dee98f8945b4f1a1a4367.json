{"sha": "3f02a5f3d3c8609d617dee98f8945b4f1a1a4367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YwMmE1ZjNkM2M4NjA5ZDYxN2RlZTk4Zjg5NDViNGYxYTFhNDM2Nw==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-12T10:09:39Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-12T10:09:39Z"}, "message": "re PR target/46430 (avr-elf --enable-werror-always build fails)\n\n\tPR target/46430\n\t* config/avr/avr-protos.h (avr_return_addr_rtx): Update prototype.\n\t* config/avr/driver-avr.c (avr_device_to_arch): Always return value.\n\t(avr_device_to_data_start, avr_device_to_startfiles): Likewise.\n\t(avr_device_to_devicelib): Likewise.\n\t* config/avr/avr.md (zero_extendqihi2): Put variable declarations\n\tinto block.\n\t(zero_extendqisi2, zero_extendhisi2, zero_extendqidi2): Likewise.\n\t(zero_extendhidi2, zero_extendsidi2): Likewise.\n\t* config/avr/avr.c (avr_num_arg_regs): Constify type.\n\t(avr_return_addr_rtx): De-constify tem.\n\t(avr_rotate_bytes): Move declarations to start of block.\n\tDon't use variable length array.\n\tPut nested if/else into block.\n\nFrom-SVN: r166647", "tree": {"sha": "fefbbb6697b3066a3b199ee42edf4a9c0280cf77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fefbbb6697b3066a3b199ee42edf4a9c0280cf77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367/comments", "author": null, "committer": null, "parents": [{"sha": "4e0084e4383a20c08ddc72177aca77c195261137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e0084e4383a20c08ddc72177aca77c195261137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e0084e4383a20c08ddc72177aca77c195261137"}], "stats": {"total": 153, "additions": 92, "deletions": 61}, "files": [{"sha": "b6afd940fd87109c0229793ee605cb8e0e9bb956", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f02a5f3d3c8609d617dee98f8945b4f1a1a4367", "patch": "@@ -1,3 +1,20 @@\n+2010-11-12  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\tPR target/46430\n+\t* config/avr/avr-protos.h (avr_return_addr_rtx): Update prototype.\n+\t* config/avr/driver-avr.c (avr_device_to_arch): Always return value.\n+\t(avr_device_to_data_start, avr_device_to_startfiles): Likewise.\n+\t(avr_device_to_devicelib): Likewise.\n+\t* config/avr/avr.md (zero_extendqihi2): Put variable declarations\n+\tinto block.\n+\t(zero_extendqisi2, zero_extendhisi2, zero_extendqidi2): Likewise.\n+\t(zero_extendhidi2, zero_extendsidi2): Likewise.\n+\t* config/avr/avr.c (avr_num_arg_regs): Constify type.\n+\t(avr_return_addr_rtx): De-constify tem.\n+\t(avr_rotate_bytes): Move declarations to start of block.\n+\tDon't use variable length array.\n+\tPut nested if/else into block.\n+\n 2010-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR debug/46375"}, {"sha": "45693597b290a56810ab6828ef052bba341d7137", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=3f02a5f3d3c8609d617dee98f8945b4f1a1a4367", "patch": "@@ -33,7 +33,7 @@ extern int avr_simple_epilogue (void);\n extern void gas_output_limited_string (FILE *file, const char *str);\n extern void gas_output_ascii (FILE *file, const char *str, size_t length);\n extern int avr_hard_regno_rename_ok (unsigned int, unsigned int);\n-extern rtx avr_return_addr_rtx (int count, const_rtx tem);\n+extern rtx avr_return_addr_rtx (int count, rtx tem);\n \n #ifdef TREE_CODE\n extern void asm_output_external (FILE *file, tree decl, char *name);"}, {"sha": "9e18b00d48267f10dcde0f3c881ee96b73649494", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=3f02a5f3d3c8609d617dee98f8945b4f1a1a4367", "patch": "@@ -60,7 +60,7 @@ static int get_sequence_length (rtx insns);\n static int sequent_regs_live (void);\n static const char *ptrreg_to_str (int);\n static const char *cond_string (enum rtx_code);\n-static int avr_num_arg_regs (enum machine_mode, tree);\n+static int avr_num_arg_regs (enum machine_mode, const_tree);\n \n static RTX_CODE compare_condition (rtx insn);\n static rtx avr_legitimize_address (rtx, rtx, enum machine_mode);\n@@ -436,7 +436,7 @@ rtx avr_builtin_setjmp_frame_value (void)\n /* Return contents of MEM at frame pointer + stack size + 1 (+2 if 3 byte PC).\n    This is return address of function.  */\n rtx \n-avr_return_addr_rtx (int count, const_rtx tem)\n+avr_return_addr_rtx (int count, rtx tem)\n {\n   rtx r;\n     \n@@ -1566,7 +1566,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype, rtx libname,\n /* Returns the number of registers to allocate for a function argument.  */\n \n static int\n-avr_num_arg_regs (enum machine_mode mode, tree type)\n+avr_num_arg_regs (enum machine_mode mode, const_tree type)\n {\n   int size;\n \n@@ -4256,6 +4256,8 @@ avr_rotate_bytes (rtx operands[])\n     /* Work out if byte or word move is needed.  Odd byte rotates need QImode.\n        Word move if no scratch is needed, otherwise use size of scratch.  */\n     enum machine_mode move_mode = QImode;\n+    int move_size, offset, size;\n+\n     if (num & 0xf)\n       move_mode = QImode;\n     else if ((mode == SImode && !same_reg) || !overlapped)\n@@ -4271,11 +4273,11 @@ avr_rotate_bytes (rtx operands[])\n     if (GET_MODE (scratch) == HImode && move_mode == QImode)\n       scratch = simplify_gen_subreg (move_mode, scratch, HImode, 0); \n \n-    int move_size = GET_MODE_SIZE (move_mode);\n+    move_size = GET_MODE_SIZE (move_mode);\n     /* Number of bytes/words to rotate.  */\n-    int offset = (num  >> 3) / move_size;\n+    offset = (num  >> 3) / move_size;\n     /* Number of moves needed.  */\n-    int size = GET_MODE_SIZE (mode) / move_size;\n+    size = GET_MODE_SIZE (mode) / move_size;\n     /* Himode byte swap is special case to avoid a scratch register.  */\n     if (mode == HImode && same_reg)\n       {\n@@ -4292,12 +4294,15 @@ avr_rotate_bytes (rtx operands[])\n       }    \n     else  \n       {\n+#define MAX_SIZE 8 /* GET_MODE_SIZE (DImode) / GET_MODE_SIZE (QImode)  */\n \t/* Create linked list of moves to determine move order.  */\n \tstruct {\n \t  rtx src, dst;\n \t  int links;\n-\t} move[size + 8];\n+\t} move[MAX_SIZE + 8];\n+\tint blocked, moves;\n \n+\tgcc_assert (size <= MAX_SIZE);\n \t/* Generate list of subreg moves.  */\n \tfor (i = 0; i < size; i++)\n \t  {\n@@ -4323,8 +4328,8 @@ avr_rotate_bytes (rtx operands[])\n \t\t    break;\n \t\t  }\n \n-\tint blocked = -1;\n-\tint moves = 0;\n+\tblocked = -1;\n+\tmoves = 0;\n \t/* Go through move list and perform non-conflicting moves.  As each\n \t   non-overlapping move is made, it may remove other conflicts\n \t   so the process is repeated until no conflicts remain.  */\n@@ -4336,18 +4341,21 @@ avr_rotate_bytes (rtx operands[])\n \t       src already.  */\n \t    for (i = 0; i < size; i++)\n \t      if (move[i].src != NULL_RTX)\n-\t\tif  (move[i].links == -1 || move[move[i].links].src == NULL_RTX)\n-\t\t  {\n-\t\t    moves++;\n-\t\t    /* Ignore NOP moves to self.  */\n-\t\t    if (!rtx_equal_p (move[i].dst, move[i].src))\n-\t\t      emit_move_insn (move[i].dst, move[i].src);\n+\t\t{\n+\t\t  if (move[i].links == -1\n+\t\t      || move[move[i].links].src == NULL_RTX)\n+\t\t    {\n+\t\t      moves++;\n+\t\t      /* Ignore NOP moves to self.  */\n+\t\t      if (!rtx_equal_p (move[i].dst, move[i].src))\n+\t\t\temit_move_insn (move[i].dst, move[i].src);\n \n-\t\t    /* Remove  conflict from list.  */\n-\t\t    move[i].src = NULL_RTX;\n-\t\t  }\n-\t\telse\n-\t\t  blocked = i;\n+\t\t      /* Remove  conflict from list.  */\n+\t\t      move[i].src = NULL_RTX;\n+\t\t    }\n+\t\t  else\n+\t\t    blocked = i;\n+\t\t}\n \n \t    /* Check for deadlock. This is when no moves occurred and we have\n \t       at least one blocked move.  */"}, {"sha": "f086e8028ed097b1d222006397f78dee7d56c6ca", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 42, "deletions": 36, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=3f02a5f3d3c8609d617dee98f8945b4f1a1a4367", "patch": "@@ -2077,12 +2077,13 @@\n   \"reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 3) (const_int 0))]\n-  \"unsigned int low_off = subreg_lowpart_offset (QImode, HImode);\n-   unsigned int high_off = subreg_highpart_offset (QImode, HImode);\n-   \n-   operands[2] = simplify_gen_subreg (QImode, operands[0], HImode, low_off);\n-   operands[3] = simplify_gen_subreg (QImode, operands[0], HImode, high_off);\n-  \")\n+{\n+  unsigned int low_off = subreg_lowpart_offset (QImode, HImode);\n+  unsigned int high_off = subreg_highpart_offset (QImode, HImode);\n+\n+  operands[2] = simplify_gen_subreg (QImode, operands[0], HImode, low_off);\n+  operands[3] = simplify_gen_subreg (QImode, operands[0], HImode, high_off);\n+})\n \n (define_insn_and_split \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2092,12 +2093,13 @@\n   \"reload_completed\"\n   [(set (match_dup 2) (zero_extend:HI (match_dup 1)))\n    (set (match_dup 3) (const_int 0))]\n-  \"unsigned int low_off = subreg_lowpart_offset (HImode, SImode);\n-   unsigned int high_off = subreg_highpart_offset (HImode, SImode);\n-   \n-   operands[2] = simplify_gen_subreg (HImode, operands[0], SImode, low_off);\n-   operands[3] = simplify_gen_subreg (HImode, operands[0], SImode, high_off);\n-  \")\n+{\n+  unsigned int low_off = subreg_lowpart_offset (HImode, SImode);\n+  unsigned int high_off = subreg_highpart_offset (HImode, SImode);\n+\n+  operands[2] = simplify_gen_subreg (HImode, operands[0], SImode, low_off);\n+  operands[3] = simplify_gen_subreg (HImode, operands[0], SImode, high_off);\n+})\n \n (define_insn_and_split \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2107,12 +2109,13 @@\n   \"reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 3) (const_int 0))]\n-  \"unsigned int low_off = subreg_lowpart_offset (HImode, SImode);\n-   unsigned int high_off = subreg_highpart_offset (HImode, SImode);\n-   \n-   operands[2] = simplify_gen_subreg (HImode, operands[0], SImode, low_off);\n-   operands[3] = simplify_gen_subreg (HImode, operands[0], SImode, high_off);\n-  \")\n+{\n+  unsigned int low_off = subreg_lowpart_offset (HImode, SImode);\n+  unsigned int high_off = subreg_highpart_offset (HImode, SImode);\n+\n+  operands[2] = simplify_gen_subreg (HImode, operands[0], SImode, low_off);\n+  operands[3] = simplify_gen_subreg (HImode, operands[0], SImode, high_off);\n+})\n \n (define_insn_and_split \"zero_extendqidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2122,12 +2125,13 @@\n   \"reload_completed\"\n   [(set (match_dup 2) (zero_extend:SI (match_dup 1)))\n    (set (match_dup 3) (const_int 0))]\n-  \"unsigned int low_off = subreg_lowpart_offset (SImode, DImode);\n-   unsigned int high_off = subreg_highpart_offset (SImode, DImode);\n-   \n-   operands[2] = simplify_gen_subreg (SImode, operands[0], DImode, low_off);\n-   operands[3] = simplify_gen_subreg (SImode, operands[0], DImode, high_off);\n-  \")\n+{\n+  unsigned int low_off = subreg_lowpart_offset (SImode, DImode);\n+  unsigned int high_off = subreg_highpart_offset (SImode, DImode);\n+\n+  operands[2] = simplify_gen_subreg (SImode, operands[0], DImode, low_off);\n+  operands[3] = simplify_gen_subreg (SImode, operands[0], DImode, high_off);\n+})\n \n (define_insn_and_split \"zero_extendhidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2137,12 +2141,13 @@\n   \"reload_completed\"\n   [(set (match_dup 2) (zero_extend:SI (match_dup 1)))\n    (set (match_dup 3) (const_int 0))]\n-  \"unsigned int low_off = subreg_lowpart_offset (SImode, DImode);\n-   unsigned int high_off = subreg_highpart_offset (SImode, DImode);\n-   \n-   operands[2] = simplify_gen_subreg (SImode, operands[0], DImode, low_off);\n-   operands[3] = simplify_gen_subreg (SImode, operands[0], DImode, high_off);\n-  \")\n+{\n+  unsigned int low_off = subreg_lowpart_offset (SImode, DImode);\n+  unsigned int high_off = subreg_highpart_offset (SImode, DImode);\n+\n+  operands[2] = simplify_gen_subreg (SImode, operands[0], DImode, low_off);\n+  operands[3] = simplify_gen_subreg (SImode, operands[0], DImode, high_off);\n+})\n \n (define_insn_and_split \"zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2152,12 +2157,13 @@\n   \"reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 3) (const_int 0))]\n-  \"unsigned int low_off = subreg_lowpart_offset (SImode, DImode);\n-   unsigned int high_off = subreg_highpart_offset (SImode, DImode);\n-   \n-   operands[2] = simplify_gen_subreg (SImode, operands[0], DImode, low_off);\n-   operands[3] = simplify_gen_subreg (SImode, operands[0], DImode, high_off);\n-  \")\n+{\n+  unsigned int low_off = subreg_lowpart_offset (SImode, DImode);\n+  unsigned int high_off = subreg_highpart_offset (SImode, DImode);\n+\n+  operands[2] = simplify_gen_subreg (SImode, operands[0], DImode, low_off);\n+  operands[3] = simplify_gen_subreg (SImode, operands[0], DImode, high_off);\n+})\n \n ;;<=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=><=>\n ;; compare"}, {"sha": "55af6516d2938be9090a00ae23f1314e8027f89f", "filename": "gcc/config/avr/driver-avr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f02a5f3d3c8609d617dee98f8945b4f1a1a4367/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fdriver-avr.c?ref=3f02a5f3d3c8609d617dee98f8945b4f1a1a4367", "patch": "@@ -55,7 +55,7 @@ const char *\n avr_device_to_arch (int argc, const char **argv)\n {\n   if (0 == argc)\n-    return;\n+    return NULL;\n \n   avr_set_current_device (argv[0]);\n \n@@ -71,7 +71,7 @@ avr_device_to_data_start (int argc, const char **argv)\n   char data_section_start_str[16];\n \n   if (0 == argc)\n-    return;  \n+    return NULL;\n \n   avr_set_current_device (argv[0]);\n   \n@@ -93,7 +93,7 @@ const char *\n avr_device_to_startfiles (int argc, const char **argv)\n {\n   if (0 == argc)\n-    return;\n+    return NULL;\n \n   avr_set_current_device (argv[0]);\n \n@@ -106,7 +106,7 @@ const char *\n avr_device_to_devicelib (int argc, const char **argv)\n {\n   if (0 == argc)\n-    return;\n+    return NULL;\n \n   avr_set_current_device (argv[0]);\n "}]}