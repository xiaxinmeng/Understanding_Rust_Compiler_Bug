{"sha": "52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlZjI4NzRkMjUxZTdhYWZhMjY3YjllYWY5ZDVjNmIyNGQyOWY0Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-01-12T22:39:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-01-12T22:39:49Z"}, "message": "re PR ada/33788 (GNAT bug box in expand_expr_addr_expr_1, at expr.c:6862)\n\n\tPR ada/33788\n\t* fold-const.c (fold_unary) <VIEW_CONVERT_EXPR>: Fold an existing\n\tNOP_EXPR if it is between integral types with the same precision.\n\nFrom-SVN: r131493", "tree": {"sha": "9fbe6956653b449d127488655bf8fc317363e50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fbe6956653b449d127488655bf8fc317363e50d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/comments", "author": null, "committer": null, "parents": [{"sha": "a60b56a48842de242a7d71cb32bcf5b9e0482e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a60b56a48842de242a7d71cb32bcf5b9e0482e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a60b56a48842de242a7d71cb32bcf5b9e0482e4a"}], "stats": {"total": 81, "additions": 72, "deletions": 9}, "files": [{"sha": "a3370c4c40bcd16008c6c667bf84240843b7a930", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b", "patch": "@@ -1,3 +1,9 @@\n+2008-01-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/33788\n+\t* fold-const.c (fold_unary) <VIEW_CONVERT_EXPR>: Fold an existing\n+\tNOP_EXPR if it is between integral types with the same precision.\n+\n 2008-01-12  Jan Hubicka  <jh@suse.cz>\n \n \tPR other/28023"}, {"sha": "7b1745cffa9ed241f497ce7d8f5d2c718dec266a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b", "patch": "@@ -1,3 +1,7 @@\n+2008-01-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* utils.c (unchecked_convert): Fold the VIEW_CONVERT_EXPR expression.\n+\n 2008-01-10  John David Anglin  <dave.anglin.@nrc-cnrc.gc.ca>\n \n \tPR ada/34466"}, {"sha": "f34816b09d67f25849d2c1afddb6e3fdbc087dcd", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b", "patch": "@@ -3842,8 +3842,8 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n \n       expr = convert (rtype, expr);\n       if (type != rtype)\n-\texpr = build1 (final_unchecked ? VIEW_CONVERT_EXPR : NOP_EXPR,\n-\t\t       type, expr);\n+\texpr = fold_build1 (final_unchecked ? VIEW_CONVERT_EXPR : NOP_EXPR,\n+\t\t\t    type, expr);\n     }\n \n   /* If we are converting TO an integral type whose precision is not the\n@@ -3894,13 +3894,8 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n   else\n     {\n       expr = maybe_unconstrained_array (expr);\n-\n-      /* There's no point in doing two unchecked conversions in a row.  */\n-      if (TREE_CODE (expr) == VIEW_CONVERT_EXPR)\n-\texpr = TREE_OPERAND (expr, 0);\n-\n       etype = TREE_TYPE (expr);\n-      expr = build1 (VIEW_CONVERT_EXPR, type, expr);\n+      expr = fold_build1 (VIEW_CONVERT_EXPR, type, expr);\n     }\n \n   /* If the result is an integral type whose size is not equal to"}, {"sha": "22350b98bf4189d747c6e42f7c40fe3231fd2656", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b", "patch": "@@ -8247,7 +8247,12 @@ fold_unary (enum tree_code code, tree type, tree op0)\n     case VIEW_CONVERT_EXPR:\n       if (TREE_TYPE (op0) == type)\n \treturn op0;\n-      if (TREE_CODE (op0) == VIEW_CONVERT_EXPR)\n+      if (TREE_CODE (op0) == VIEW_CONVERT_EXPR\n+\t  || (TREE_CODE (op0) == NOP_EXPR\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (op0))\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (op0, 0)))\n+\t      && TYPE_PRECISION (TREE_TYPE (op0))\n+\t\t == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op0, 0)))))\n \treturn fold_build1 (VIEW_CONVERT_EXPR, type, TREE_OPERAND (op0, 0));\n       return fold_view_convert_expr (type, op0);\n "}, {"sha": "dd1f5a1cd4078f2ac88c658e98446c719d88b423", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b", "patch": "@@ -1,3 +1,7 @@\n+2008-01-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/bit_packed_array.ad[sb]: New test.\n+\n 2008-01-12  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/34432"}, {"sha": "fcdd69eb47bd62e1fd6a23a98b7b859c3c9adaa1", "filename": "gcc/testsuite/gnat.dg/bit_packed_array.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array.adb?ref=52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b", "patch": "@@ -0,0 +1,16 @@\n+-- PR ada/33788\n+-- Origin: Oliver Kellogg <oliver.kellogg@eads.com>\n+\n+-- { dg-do compile }\n+\n+package body Bit_Packed_Array is\n+\n+  procedure Generate_Callforward is\n+      Compiler_Crash : String :=\n+          Laser_Illuminator_Code_Group_T'Image\n+                (MADR.ISF.Laser_Illuminator_Code (0));\n+  begin\n+      null;\n+  end Generate_Callforward;\n+\n+end Bit_Packed_Array;"}, {"sha": "525536ee646026592b58e368f1f1d3e288c49278", "filename": "gcc/testsuite/gnat.dg/bit_packed_array.ads", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array.ads?ref=52ef2874d251e7aafa267b9eaf9d5c6b24d29f4b", "patch": "@@ -0,0 +1,33 @@\n+with Interfaces;\n+\n+package Bit_Packed_Array is\n+\n+   type laser_illuminator_code_group_t is (zero, one);\n+   pragma Convention (C, laser_illuminator_code_group_t);\n+\n+   subtype lic_array_index_t is Interfaces.Unsigned_8 range 0 .. 3;\n+\n+   type lic_array_t is array (lic_array_index_t) of laser_illuminator_code_group_t;\n+   pragma Convention (C, lic_array_t);\n+\n+   type Eighty_Bytes_T is array (1 .. 80) of Interfaces.Unsigned_8;\n+\n+   type Mission_Assignment_T is record\n+      Eighty_Bytes           : Eighty_Bytes_T;\n+      Laser_Illuminator_Code : lic_array_t;\n+   end record;\n+\n+   for Mission_Assignment_T use record\n+      Eighty_Bytes           at 0 range   0 .. 639;\n+      Laser_Illuminator_Code at 0 range 653 .. 780;\n+   end record;\n+\n+   type Mission_Assignment_Dbase_Rec_T is record\n+      ISF : Mission_Assignment_T;\n+   end record;\n+\n+   MADR : Mission_Assignment_Dbase_Rec_T;\n+\n+   procedure Generate_Callforward;\n+\n+end Bit_Packed_Array; "}]}