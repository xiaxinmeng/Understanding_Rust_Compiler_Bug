{"sha": "2ec399d8a6c9c26d69b73faf77c694fa3915dcec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVjMzk5ZDhhNmM5YzI2ZDY5YjczZmFmNzdjNjk0ZmEzOTE1ZGNlYw==", "commit": {"author": {"name": "Joerg Sonnenberger", "email": "joerg@bec.de", "date": "2017-09-01T16:26:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-09-01T16:26:00Z"}, "message": "varasm.c (bss_initializer_p): Do not put constants into .bss\n\n\t* varasm.c (bss_initializer_p): Do not put constants into .bss\n\t(categorize_decl_for_section): Handle bss_initializer_p returning\n\tfalse when DECL_INITIAL is NULL.\n\n\t* gcc.target/i386/const-in-bss.c: New test.\n\nFrom-SVN: r251602", "tree": {"sha": "bfc2df7ff0476e32664d7b7175de7f5c2f04cd02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfc2df7ff0476e32664d7b7175de7f5c2f04cd02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ec399d8a6c9c26d69b73faf77c694fa3915dcec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec399d8a6c9c26d69b73faf77c694fa3915dcec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec399d8a6c9c26d69b73faf77c694fa3915dcec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec399d8a6c9c26d69b73faf77c694fa3915dcec/comments", "author": {"login": "jsonn", "id": 296817, "node_id": "MDQ6VXNlcjI5NjgxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/296817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsonn", "html_url": "https://github.com/jsonn", "followers_url": "https://api.github.com/users/jsonn/followers", "following_url": "https://api.github.com/users/jsonn/following{/other_user}", "gists_url": "https://api.github.com/users/jsonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsonn/subscriptions", "organizations_url": "https://api.github.com/users/jsonn/orgs", "repos_url": "https://api.github.com/users/jsonn/repos", "events_url": "https://api.github.com/users/jsonn/events{/privacy}", "received_events_url": "https://api.github.com/users/jsonn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db6bb1ec036f180584d221cdc66dff7bb7180d7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6bb1ec036f180584d221cdc66dff7bb7180d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db6bb1ec036f180584d221cdc66dff7bb7180d7a"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "f9d9eb74a3aa28b2d01b3a324d62d19be106d48e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec399d8a6c9c26d69b73faf77c694fa3915dcec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec399d8a6c9c26d69b73faf77c694fa3915dcec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ec399d8a6c9c26d69b73faf77c694fa3915dcec", "patch": "@@ -1,3 +1,10 @@\n+2017-09-01  Joerg Sonnenberger  <joerg@bec.de>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\t* varasm.c (bss_initializer_p): Do not put constants into .bss\n+\t(categorize_decl_for_section): Handle bss_initializer_p returning\n+\tfalse when DECL_INITIAL is NULL.\n+\n 2017-09-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR target/82012"}, {"sha": "e82751438d65691971f65aba6903679652b9a29a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec399d8a6c9c26d69b73faf77c694fa3915dcec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec399d8a6c9c26d69b73faf77c694fa3915dcec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ec399d8a6c9c26d69b73faf77c694fa3915dcec", "patch": "@@ -5,6 +5,8 @@\n \n 2017-09-01  Jeff Law  <law@redhat.com>\n \n+\t* gcc.target/i386/const-in-bss.c: New test.\n+\n \tPR tree-optimization/82052\n \t* gcc.c-torture/compile/pr82052.c: New test.\n "}, {"sha": "c70aa0bcb4ebf834365a51a0ca744e2e084d5e19", "filename": "gcc/testsuite/gcc.target/i386/const-in-bss.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec399d8a6c9c26d69b73faf77c694fa3915dcec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fconst-in-bss.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec399d8a6c9c26d69b73faf77c694fa3915dcec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fconst-in-bss.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fconst-in-bss.c?ref=2ec399d8a6c9c26d69b73faf77c694fa3915dcec", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+\n+__attribute__((section(\"readonly1\"))) const int foo1c;\n+\n+/* { dg-final { scan-assembler \"readonly1,\\\"a\\\"\" } } */\n+/* { dg-final { scan-assembler-not \"readonly1,\\\"aw\\\"\" } } */"}, {"sha": "d38d2c2721b1f44927fbdbe966b7fe3b4b5911bc", "filename": "gcc/varasm.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec399d8a6c9c26d69b73faf77c694fa3915dcec/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec399d8a6c9c26d69b73faf77c694fa3915dcec/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2ec399d8a6c9c26d69b73faf77c694fa3915dcec", "patch": "@@ -976,16 +976,16 @@ decode_reg_name (const char *name)\n bool\n bss_initializer_p (const_tree decl)\n {\n-  return (DECL_INITIAL (decl) == NULL\n-\t  /* In LTO we have no errors in program; error_mark_node is used\n-\t     to mark offlined constructors.  */\n-\t  || (DECL_INITIAL (decl) == error_mark_node\n-\t      && !in_lto_p)\n-\t  || (flag_zero_initialized_in_bss\n-\t      /* Leave constant zeroes in .rodata so they\n-\t\t can be shared.  */\n-\t      && !TREE_READONLY (decl)\n-\t      && initializer_zerop (DECL_INITIAL (decl))));\n+  /* Do not put constants into the .bss section, they belong in a readonly\n+     section.  */\n+  return (!TREE_READONLY (decl)\n+\t  && (DECL_INITIAL (decl) == NULL\n+\t      /* In LTO we have no errors in program; error_mark_node is used\n+\t         to mark offlined constructors.  */\n+\t      || (DECL_INITIAL (decl) == error_mark_node\n+\t          && !in_lto_p)\n+\t      || (flag_zero_initialized_in_bss\n+\t          && initializer_zerop (DECL_INITIAL (decl)))));\n }\n \n /* Compute the alignment of variable specified by DECL.\n@@ -6517,7 +6517,8 @@ categorize_decl_for_section (const_tree decl, int reloc)\n \tret = SECCAT_BSS;\n       else if (! TREE_READONLY (decl)\n \t       || TREE_SIDE_EFFECTS (decl)\n-\t       || ! TREE_CONSTANT (DECL_INITIAL (decl)))\n+\t       || (DECL_INITIAL (decl)\n+\t\t   && ! TREE_CONSTANT (DECL_INITIAL (decl))))\n \t{\n \t  /* Here the reloc_rw_mask is not testing whether the section should\n \t     be read-only or not, but whether the dynamic link will have to\n@@ -6537,7 +6538,8 @@ categorize_decl_for_section (const_tree decl, int reloc)\n \t   location.  -fmerge-all-constants allows even that (at the\n \t   expense of not conforming).  */\n \tret = SECCAT_RODATA;\n-      else if (TREE_CODE (DECL_INITIAL (decl)) == STRING_CST)\n+      else if (DECL_INITIAL (decl)\n+\t       && TREE_CODE (DECL_INITIAL (decl)) == STRING_CST)\n \tret = SECCAT_RODATA_MERGE_STR_INIT;\n       else\n \tret = SECCAT_RODATA_MERGE_CONST;"}]}