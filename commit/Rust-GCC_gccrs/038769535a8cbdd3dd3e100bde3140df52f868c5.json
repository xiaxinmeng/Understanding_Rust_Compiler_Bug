{"sha": "038769535a8cbdd3dd3e100bde3140df52f868c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM4NzY5NTM1YThjYmRkM2RkM2UxMDBiZGUzMTQwZGY1MmY4NjhjNQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-03-17T12:58:14Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-03-27T17:11:02Z"}, "message": "amdgcn: refactor mode iterators\n\nThe iterative addition of 8 and 16 bit vectors has left the mode iterators in a\nbit of a mess.  Also, the original names were rather verbose leading to\nformatting difficulties.\n\nThis patch renames all the vector modes such that they are shorter and tidier.\nIt does not change the output machine description at all.\n\n2020-03-27  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-valu.md:\n\t(VEC_SUBDWORD_MODE): Rename to V_QIHI throughout.\n\t(VEC_1REG_MODE): Delete.\n\t(VEC_1REG_ALT): Delete.\n\t(VEC_ALL1REG_MODE): Rename to V_1REG throughout.\n\t(VEC_1REG_INT_MODE): Delete.\n\t(VEC_ALL1REG_INT_MODE): Rename to V_INT_1REG throughout.\n\t(VEC_ALL1REG_INT_ALT): Rename to V_INT_1REG_ALT throughout.\n\t(VEC_2REG_MODE): Rename to V_2REG throughout.\n\t(VEC_REG_MODE): Rename to V_noHI throughout.\n\t(VEC_ALLREG_MODE): Rename to V_ALL throughout.\n\t(VEC_ALLREG_ALT):  Rename to V_ALL_ALT throughout.\n\t(VEC_ALLREG_INT_MODE): Rename to V_INT throughout.\n\t(VEC_INT_MODE): Delete.\n\t(VEC_FP_MODE): Rename to V_FP throughout and move to top.\n\t(VEC_FP_1REG_MODE): Rename to V_FP_1REG throughout and move to top.\n\t(FP_MODE): Delete and replace with FP throughout.\n\t(FP_1REG_MODE): Delete and replace with FP_1REG throughout.\n\t(VCMP_MODE): Rename to V_noQI throughout and move to top.\n\t(VCMP_MODE_INT): Rename to V_INT_noQI throughout and move to top.\n\t* config/gcn/gcn.md (FP): New mode iterator.\n\t(FP_1REG): New mode iterator.", "tree": {"sha": "b7baf1a495dedfa4f079cad78b95cedb739342df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7baf1a495dedfa4f079cad78b95cedb739342df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/038769535a8cbdd3dd3e100bde3140df52f868c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038769535a8cbdd3dd3e100bde3140df52f868c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038769535a8cbdd3dd3e100bde3140df52f868c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038769535a8cbdd3dd3e100bde3140df52f868c5/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04dd734b52de121853e1ea6b3c197a598b294e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04dd734b52de121853e1ea6b3c197a598b294e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04dd734b52de121853e1ea6b3c197a598b294e23"}], "stats": {"total": 825, "additions": 411, "deletions": 414}, "files": [{"sha": "3a52840eff1a47917e658c44ec7bfe5ac71a3700", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038769535a8cbdd3dd3e100bde3140df52f868c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038769535a8cbdd3dd3e100bde3140df52f868c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=038769535a8cbdd3dd3e100bde3140df52f868c5", "patch": "@@ -1,3 +1,28 @@\n+2020-03-27  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md:\n+\t(VEC_SUBDWORD_MODE): Rename to V_QIHI throughout.\n+\t(VEC_1REG_MODE): Delete.\n+\t(VEC_1REG_ALT): Delete.\n+\t(VEC_ALL1REG_MODE): Rename to V_1REG throughout.\n+\t(VEC_1REG_INT_MODE): Delete.\n+\t(VEC_ALL1REG_INT_MODE): Rename to V_INT_1REG throughout.\n+\t(VEC_ALL1REG_INT_ALT): Rename to V_INT_1REG_ALT throughout.\n+\t(VEC_2REG_MODE): Rename to V_2REG throughout.\n+\t(VEC_REG_MODE): Rename to V_noHI throughout.\n+\t(VEC_ALLREG_MODE): Rename to V_ALL throughout.\n+\t(VEC_ALLREG_ALT):  Rename to V_ALL_ALT throughout.\n+\t(VEC_ALLREG_INT_MODE): Rename to V_INT throughout.\n+\t(VEC_INT_MODE): Delete.\n+\t(VEC_FP_MODE): Rename to V_FP throughout and move to top.\n+\t(VEC_FP_1REG_MODE): Rename to V_FP_1REG throughout and move to top.\n+\t(FP_MODE): Delete and replace with FP throughout.\n+\t(FP_1REG_MODE): Delete and replace with FP_1REG throughout.\n+\t(VCMP_MODE): Rename to V_noQI throughout and move to top.\n+\t(VCMP_MODE_INT): Rename to V_INT_noQI throughout and move to top.\n+\t* config/gcn/gcn.md (FP): New mode iterator.\n+\t(FP_1REG): New mode iterator.\n+\n 2020-03-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* doc/invoke.texi (-fdump-analyzer-supergraph): Document that this"}, {"sha": "475d2d4e61e234d3ddb03a0907188851a9a818c5", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 384, "deletions": 414, "changes": 798, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038769535a8cbdd3dd3e100bde3140df52f868c5/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038769535a8cbdd3dd3e100bde3140df52f868c5/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=038769535a8cbdd3dd3e100bde3140df52f868c5", "patch": "@@ -17,41 +17,43 @@\n ;; {{{ Vector iterators\n \n ; Vector modes for sub-dword modes\n-(define_mode_iterator VEC_SUBDWORD_MODE\n+(define_mode_iterator V_QIHI\n \t\t      [V64QI V64HI])\n \n ; Vector modes for one vector register\n-(define_mode_iterator VEC_1REG_MODE\n-\t\t      [V64SI V64HF V64SF])\n-(define_mode_iterator VEC_1REG_ALT\n-\t\t      [V64SI V64HF V64SF])\n-(define_mode_iterator VEC_ALL1REG_MODE\n+(define_mode_iterator V_1REG\n \t\t      [V64QI V64HI V64SI V64HF V64SF])\n \n-(define_mode_iterator VEC_1REG_INT_MODE\n-\t\t      [V64SI])\n-(define_mode_iterator VEC_ALL1REG_INT_MODE\n+(define_mode_iterator V_INT_1REG\n \t\t      [V64QI V64HI V64SI])\n-(define_mode_iterator VEC_ALL1REG_INT_ALT\n+(define_mode_iterator V_INT_1REG_ALT\n \t\t      [V64QI V64HI V64SI])\n+(define_mode_iterator V_FP_1REG\n+\t\t      [V64HF V64SF])\n \n ; Vector modes for two vector registers\n-(define_mode_iterator VEC_2REG_MODE\n+(define_mode_iterator V_2REG\n \t\t      [V64DI V64DF])\n \n+; Vector modes with native support\n+(define_mode_iterator V_noQI\n+\t\t      [V64HI V64HF V64SI V64SF V64DI V64DF])\n+(define_mode_iterator V_noHI\n+\t\t      [V64HF V64SI V64SF V64DI V64DF])\n+\n+(define_mode_iterator V_INT_noQI\n+\t\t      [V64HI V64SI V64DI])\n+\n ; All of above\n-(define_mode_iterator VEC_REG_MODE\n-\t\t      [V64SI V64HF V64SF\t        ; Single reg\n-\t\t       V64DI V64DF])\t\t        ; Double reg\n-(define_mode_iterator VEC_ALLREG_MODE\n-\t\t      [V64QI V64HI V64SI V64HF V64SF    ; Single reg\n-\t\t       V64DI V64DF])\t\t        ; Double reg\n-(define_mode_iterator VEC_ALLREG_ALT\n-\t\t      [V64QI V64HI V64SI V64HF V64SF    ; Single reg\n-\t\t       V64DI V64DF])\t\t        ; Double reg\n-(define_mode_iterator VEC_ALLREG_INT_MODE\n-\t\t      [V64QI V64HI V64SI\t        ; Single reg\n-\t\t       V64DI])\t\t\t        ; Double reg\n+(define_mode_iterator V_ALL\n+\t\t      [V64QI V64HI V64HF V64SI V64SF V64DI V64DF])\n+(define_mode_iterator V_ALL_ALT\n+\t\t      [V64QI V64HI V64HF V64SI V64SF V64DI V64DF])\n+\n+(define_mode_iterator V_INT\n+\t\t      [V64QI V64HI V64SI V64DI])\n+(define_mode_iterator V_FP\n+\t\t      [V64HF V64SF V64DF])\n \n (define_mode_attr scalar_mode\n   [(V64QI \"qi\") (V64HI \"hi\") (V64SI \"si\")\n@@ -76,41 +78,38 @@\n \t\t   \"\" \"_exec\")\n \n (define_subst \"vec_merge\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0)\n-\t(match_operand:VEC_ALLREG_MODE 1))]\n+  [(set (match_operand:V_ALL 0)\n+\t(match_operand:V_ALL 1))]\n   \"\"\n   [(set (match_dup 0)\n-\t(vec_merge:VEC_ALLREG_MODE\n+\t(vec_merge:V_ALL\n \t  (match_dup 1)\n-\t  (match_operand:VEC_ALLREG_MODE 3\n-\t\t\t\t\t \"gcn_register_or_unspec_operand\" \"U0\")\n+\t  (match_operand:V_ALL 3 \"gcn_register_or_unspec_operand\" \"U0\")\n \t  (match_operand:DI 4 \"gcn_exec_reg_operand\" \"e\")))])\n \n (define_subst \"vec_merge_with_clobber\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0)\n-\t(match_operand:VEC_ALLREG_MODE 1))\n+  [(set (match_operand:V_ALL 0)\n+\t(match_operand:V_ALL 1))\n    (clobber (match_operand 2))]\n   \"\"\n   [(set (match_dup 0)\n-\t(vec_merge:VEC_ALLREG_MODE\n+\t(vec_merge:V_ALL\n \t  (match_dup 1)\n-\t  (match_operand:VEC_ALLREG_MODE 3\n-\t\t\t\t\t \"gcn_register_or_unspec_operand\" \"U0\")\n+\t  (match_operand:V_ALL 3 \"gcn_register_or_unspec_operand\" \"U0\")\n \t  (match_operand:DI 4 \"gcn_exec_reg_operand\" \"e\")))\n    (clobber (match_dup 2))])\n \n (define_subst \"vec_merge_with_vcc\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0)\n-\t(match_operand:VEC_ALLREG_MODE 1))\n+  [(set (match_operand:V_ALL 0)\n+\t(match_operand:V_ALL 1))\n    (set (match_operand:DI 2)\n \t(match_operand:DI 3))]\n   \"\"\n   [(parallel\n      [(set (match_dup 0)\n-\t   (vec_merge:VEC_ALLREG_MODE\n+\t   (vec_merge:V_ALL\n \t     (match_dup 1)\n-\t     (match_operand:VEC_ALLREG_MODE 4\n-\t\t\t\t\t \"gcn_register_or_unspec_operand\" \"U0\")\n+\t     (match_operand:V_ALL 4 \"gcn_register_or_unspec_operand\" \"U0\")\n \t     (match_operand:DI 5 \"gcn_exec_reg_operand\" \"e\")))\n       (set (match_dup 2)\n \t   (and:DI (match_dup 3)\n@@ -142,8 +141,8 @@\n ; gather/scatter, maskload/store, etc.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"nonimmediate_operand\")\n-\t(match_operand:VEC_ALLREG_MODE 1 \"general_operand\"))]\n+  [(set (match_operand:V_ALL 0 \"nonimmediate_operand\")\n+\t(match_operand:V_ALL 1 \"general_operand\"))]\n   \"\"\n   {\n     if (MEM_P (operands[0]) && !lra_in_progress && !reload_completed)\n@@ -181,28 +180,26 @@\n ; A pseudo instruction that helps LRA use the \"U0\" constraint.\n \n (define_insn \"mov<mode>_unspec\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"nonimmediate_operand\" \"=v\")\n-\t(match_operand:VEC_ALLREG_MODE 1 \"gcn_unspec_operand\"   \" U\"))]\n+  [(set (match_operand:V_ALL 0 \"nonimmediate_operand\" \"=v\")\n+\t(match_operand:V_ALL 1 \"gcn_unspec_operand\"   \" U\"))]\n   \"\"\n   \"\"\n   [(set_attr \"type\" \"unknown\")\n    (set_attr \"length\" \"0\")])\n \n (define_insn \"*mov<mode>\"\n-  [(set (match_operand:VEC_ALL1REG_MODE 0 \"nonimmediate_operand\" \"=v,v\")\n-\t(match_operand:VEC_ALL1REG_MODE 1 \"general_operand\"      \"vA,B\"))]\n+  [(set (match_operand:V_1REG 0 \"nonimmediate_operand\" \"=v,v\")\n+\t(match_operand:V_1REG 1 \"general_operand\"      \"vA,B\"))]\n   \"\"\n   \"v_mov_b32\\t%0, %1\"\n   [(set_attr \"type\" \"vop1,vop1\")\n    (set_attr \"length\" \"4,8\")])\n \n (define_insn \"mov<mode>_exec\"\n-  [(set (match_operand:VEC_ALL1REG_MODE 0 \"nonimmediate_operand\"\n-\t\t\t\t\t\t\t \"=v, v, v, v, v, m\")\n-\t(vec_merge:VEC_ALL1REG_MODE\n-\t  (match_operand:VEC_ALL1REG_MODE 1 \"general_operand\"\n-\t\t\t\t\t\t\t \"vA, B, v,vA, m, v\")\n-\t  (match_operand:VEC_ALL1REG_MODE 3 \"gcn_alu_or_unspec_operand\"\n+  [(set (match_operand:V_1REG 0 \"nonimmediate_operand\"\t \"=v, v, v, v, v, m\")\n+\t(vec_merge:V_1REG\n+\t  (match_operand:V_1REG 1 \"general_operand\"\t \"vA, B, v,vA, m, v\")\n+\t  (match_operand:V_1REG 3 \"gcn_alu_or_unspec_operand\"\n \t\t\t\t\t\t\t \"U0,U0,vA,vA,U0,U0\")\n \t  (match_operand:DI 2 \"register_operand\"\t \" e, e,cV,Sv, e, e\")))\n    (clobber (match_scratch:V64DI 4\t\t\t \"=X, X, X, X,&v,&v\"))]\n@@ -221,13 +218,12 @@\n ; read/modify/write which is necessary for maskstore.\n \n ;(define_insn \"*mov<mode>_exec_match\"\n-;  [(set (match_operand:VEC_ALL1REG_MODE 0 \"nonimmediate_operand\"\n-;\t\t\t\t\t\t\t      \"=v,v, v, m\")\n-;\t(vec_merge:VEC_ALL1REG_MODE\n-;\t  (match_operand:VEC_ALL1REG_MODE 1 \"general_operand\" \"vA,B, m, v\")\n+;  [(set (match_operand:V_1REG 0 \"nonimmediate_operand\" \"=v,v, v, m\")\n+;\t(vec_merge:V_1REG\n+;\t  (match_operand:V_1REG 1 \"general_operand\"\t\"vA,B, m, v\")\n ;\t  (match_dup 0)\n-;\t  (match_operand:DI 2 \"gcn_exec_reg_operand\"\t      \" e,e, e, e\")))\n-;   (clobber (match_scratch:V64DI 3\t\t\t      \"=X,X,&v,&v\"))]\n+;\t  (match_operand:DI 2 \"gcn_exec_reg_operand\"\t\" e,e, e, e\")))\n+;   (clobber (match_scratch:V64DI 3\t\t\t\"=X,X,&v,&v\"))]\n ;  \"!MEM_P (operands[0]) || REG_P (operands[1])\"\n ;  \"@\n ;  v_mov_b32\\t%0, %1\n@@ -238,8 +234,8 @@\n ;   (set_attr \"length\" \"4,8,16,16\")])\n \n (define_insn \"*mov<mode>\"\n-  [(set (match_operand:VEC_2REG_MODE 0 \"nonimmediate_operand\"  \"=v\")\n-\t(match_operand:VEC_2REG_MODE 1 \"general_operand\"      \"vDB\"))]\n+  [(set (match_operand:V_2REG 0 \"nonimmediate_operand\" \"=v\")\n+\t(match_operand:V_2REG 1 \"general_operand\"      \"vDB\"))]\n   \"\"\n   {\n     if (!REG_P (operands[1]) || REGNO (operands[0]) <= REGNO (operands[1]))\n@@ -251,12 +247,10 @@\n    (set_attr \"length\" \"16\")])\n \n (define_insn \"mov<mode>_exec\"\n-  [(set (match_operand:VEC_2REG_MODE 0 \"nonimmediate_operand\"\n-\t\t\t\t\t\t       \"= v,   v,   v, v, m\")\n-\t(vec_merge:VEC_2REG_MODE\n-\t  (match_operand:VEC_2REG_MODE 1 \"general_operand\"\n-\t\t\t\t\t\t       \"vDB,  v0,  v0, m, v\")\n-\t  (match_operand:VEC_2REG_MODE 3 \"gcn_alu_or_unspec_operand\"\n+  [(set (match_operand:V_2REG 0 \"nonimmediate_operand\" \"= v,   v,   v, v, m\")\n+\t(vec_merge:V_2REG\n+\t  (match_operand:V_2REG 1 \"general_operand\"    \"vDB,  v0,  v0, m, v\")\n+\t  (match_operand:V_2REG 3 \"gcn_alu_or_unspec_operand\"\n \t\t\t\t\t\t       \" U0,vDA0,vDA0,U0,U0\")\n \t  (match_operand:DI 2 \"register_operand\"       \"  e,  cV,  Sv, e, e\")))\n    (clobber (match_scratch:V64DI 4\t\t       \"= X,   X,   X,&v,&v\"))]\n@@ -296,12 +290,12 @@\n ; read/modify/write which is necessary for maskstore.\n \n ;(define_insn \"*mov<mode>_exec_match\"\n-;  [(set (match_operand:VEC_2REG_MODE 0 \"nonimmediate_operand\" \"=v, v, m\")\n-;\t(vec_merge:VEC_2REG_MODE\n-;\t  (match_operand:VEC_2REG_MODE 1 \"general_operand\"   \"vDB, m, v\")\n+;  [(set (match_operand:V_2REG 0 \"nonimmediate_operand\" \"=v, v, m\")\n+;\t(vec_merge:V_2REG\n+;\t  (match_operand:V_2REG 1 \"general_operand\"\t\"vDB, m, v\")\n ;\t  (match_dup 0)\n-;\t  (match_operand:DI 2 \"gcn_exec_reg_operand\"\t      \" e, e, e\")))\n-;   (clobber (match_scratch:V64DI 3\t\t\t      \"=X,&v,&v\"))]\n+;\t  (match_operand:DI 2 \"gcn_exec_reg_operand\"\t\" e, e, e\")))\n+;   (clobber (match_scratch:V64DI 3\t\t\t\"=X,&v,&v\"))]\n ;  \"!MEM_P (operands[0]) || REG_P (operands[1])\"\n ;  \"@\n ;   * if (!REG_P (operands[1]) || REGNO (operands[0]) <= REGNO (operands[1])) \\\n@@ -326,13 +320,11 @@\n ;   flat_load v, vT\n \n (define_insn \"mov<mode>_sgprbase\"\n-  [(set (match_operand:VEC_ALL1REG_MODE 0 \"nonimmediate_operand\"\n-\t\t\t\t\t\t\t      \"= v, v, v, m\")\n-\t(unspec:VEC_ALL1REG_MODE\n-\t  [(match_operand:VEC_ALL1REG_MODE 1 \"general_operand\"\n-\t\t\t\t\t\t\t      \" vA,vB, m, v\")]\n+  [(set (match_operand:V_1REG 0 \"nonimmediate_operand\" \"= v, v, v, m\")\n+\t(unspec:V_1REG\n+\t  [(match_operand:V_1REG 1 \"general_operand\"   \" vA,vB, m, v\")]\n \t  UNSPEC_SGPRBASE))\n-   (clobber (match_operand:V64DI 2 \"register_operand\"\t      \"=&v,&v,&v,&v\"))]\n+   (clobber (match_operand:V64DI 2 \"register_operand\"  \"=&v,&v,&v,&v\"))]\n   \"lra_in_progress || reload_completed\"\n   \"@\n    v_mov_b32\\t%0, %1\n@@ -343,11 +335,11 @@\n    (set_attr \"length\" \"4,8,12,12\")])\n \n (define_insn \"mov<mode>_sgprbase\"\n-  [(set (match_operand:VEC_2REG_MODE 0 \"nonimmediate_operand\" \"= v, v, m\")\n-\t(unspec:VEC_2REG_MODE\n-\t  [(match_operand:VEC_2REG_MODE 1 \"general_operand\"   \"vDB, m, v\")]\n+  [(set (match_operand:V_2REG 0 \"nonimmediate_operand\" \"= v, v, m\")\n+\t(unspec:V_2REG\n+\t  [(match_operand:V_2REG 1 \"general_operand\"   \"vDB, m, v\")]\n \t  UNSPEC_SGPRBASE))\n-   (clobber (match_operand:V64DI 2 \"register_operand\"\t      \"=&v,&v,&v\"))]\n+   (clobber (match_operand:V64DI 2 \"register_operand\"  \"=&v,&v,&v\"))]\n   \"lra_in_progress || reload_completed\"\n   \"@\n    * if (!REG_P (operands[1]) || REGNO (operands[0]) <= REGNO (operands[1])) \\\n@@ -363,9 +355,9 @@\n ; gcn_secondary_reload.  It allows a reload with a scratch register.\n \n (define_expand \"reload_in<mode>\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\" \"= v\")\n-\t(match_operand:VEC_ALLREG_MODE 1 \"memory_operand\"   \"  m\"))\n-   (clobber (match_operand:V64DI 2 \"register_operand\"    \"=&v\"))]\n+  [(set (match_operand:V_ALL 0 \"register_operand\"     \"= v\")\n+\t(match_operand:V_ALL 1 \"memory_operand\"\t      \"  m\"))\n+   (clobber (match_operand:V64DI 2 \"register_operand\" \"=&v\"))]\n   \"\"\n   {\n     emit_insn (gen_mov<mode>_sgprbase (operands[0], operands[1], operands[2]));\n@@ -375,9 +367,9 @@\n ; reload_out is similar to reload_in, above.\n \n (define_expand \"reload_out<mode>\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"memory_operand\"   \"= m\")\n-\t(match_operand:VEC_ALLREG_MODE 1 \"register_operand\" \"  v\"))\n-   (clobber (match_operand:V64DI 2 \"register_operand\"    \"=&v\"))]\n+  [(set (match_operand:V_ALL 0 \"memory_operand\"\t      \"= m\")\n+\t(match_operand:V_ALL 1 \"register_operand\"     \"  v\"))\n+   (clobber (match_operand:V64DI 2 \"register_operand\" \"=&v\"))]\n   \"\"\n   {\n     emit_insn (gen_mov<mode>_sgprbase (operands[0], operands[1], operands[2]));\n@@ -387,9 +379,9 @@\n ; Expand scalar addresses into gather/scatter patterns\n \n (define_split\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"memory_operand\")\n-\t(unspec:VEC_ALLREG_MODE\n-\t  [(match_operand:VEC_ALLREG_MODE 1 \"general_operand\")]\n+  [(set (match_operand:V_ALL 0 \"memory_operand\")\n+\t(unspec:V_ALL\n+\t  [(match_operand:V_ALL 1 \"general_operand\")]\n \t  UNSPEC_SGPRBASE))\n    (clobber (match_scratch:V64DI 2))]\n   \"\"\n@@ -405,10 +397,10 @@\n   })\n \n (define_split\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"memory_operand\")\n-\t(vec_merge:VEC_ALLREG_MODE\n-\t  (match_operand:VEC_ALLREG_MODE 1 \"general_operand\")\n-\t  (match_operand:VEC_ALLREG_MODE 2 \"\")\n+  [(set (match_operand:V_ALL 0 \"memory_operand\")\n+\t(vec_merge:V_ALL\n+\t  (match_operand:V_ALL 1 \"general_operand\")\n+\t  (match_operand:V_ALL 2 \"\")\n \t  (match_operand:DI 3 \"gcn_exec_reg_operand\")))\n    (clobber (match_scratch:V64DI 4))]\n   \"\"\n@@ -426,16 +418,16 @@\n   })\n \n (define_split\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"nonimmediate_operand\")\n-\t(unspec:VEC_ALLREG_MODE\n-\t  [(match_operand:VEC_ALLREG_MODE 1 \"memory_operand\")]\n+  [(set (match_operand:V_ALL 0 \"nonimmediate_operand\")\n+\t(unspec:V_ALL\n+\t  [(match_operand:V_ALL 1 \"memory_operand\")]\n \t  UNSPEC_SGPRBASE))\n    (clobber (match_scratch:V64DI 2))]\n   \"\"\n   [(set (match_dup 0)\n-\t(unspec:VEC_ALLREG_MODE [(match_dup 5) (match_dup 6) (match_dup 7)\n-\t\t\t      (mem:BLK (scratch))]\n-\t\t\t     UNSPEC_GATHER))]\n+\t(unspec:V_ALL [(match_dup 5) (match_dup 6) (match_dup 7)\n+\t\t       (mem:BLK (scratch))]\n+\t\t      UNSPEC_GATHER))]\n   {\n     operands[5] = gcn_expand_scalar_to_vector_address (<MODE>mode, NULL,\n \t\t\t\t\t\t       operands[1],\n@@ -445,18 +437,18 @@\n   })\n \n (define_split\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"nonimmediate_operand\")\n-\t(vec_merge:VEC_ALLREG_MODE\n-\t  (match_operand:VEC_ALLREG_MODE 1 \"memory_operand\")\n-\t  (match_operand:VEC_ALLREG_MODE 2 \"\")\n+  [(set (match_operand:V_ALL 0 \"nonimmediate_operand\")\n+\t(vec_merge:V_ALL\n+\t  (match_operand:V_ALL 1 \"memory_operand\")\n+\t  (match_operand:V_ALL 2 \"\")\n \t  (match_operand:DI 3 \"gcn_exec_reg_operand\")))\n    (clobber (match_scratch:V64DI 4))]\n   \"\"\n   [(set (match_dup 0)\n-\t(vec_merge:VEC_ALLREG_MODE\n-\t  (unspec:VEC_ALLREG_MODE [(match_dup 5) (match_dup 6) (match_dup 7)\n-\t\t\t\t   (mem:BLK (scratch))]\n-\t\t\t\t  UNSPEC_GATHER)\n+\t(vec_merge:V_ALL\n+\t  (unspec:V_ALL [(match_dup 5) (match_dup 6) (match_dup 7)\n+\t\t\t (mem:BLK (scratch))]\n+\t\t\t UNSPEC_GATHER)\n \t  (match_dup 2)\n \t  (match_dup 3)))]\n   {\n@@ -479,14 +471,13 @@\n ; FIXME these should take A immediates\n \n (define_insn \"*vec_set<mode>\"\n-  [(set (match_operand:VEC_ALL1REG_MODE 0 \"register_operand\"         \"= v\")\n-\t(vec_merge:VEC_ALL1REG_MODE\n-\t  (vec_duplicate:VEC_ALL1REG_MODE\n-\t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"\t     \" Sv\"))\n-\t  (match_operand:VEC_ALL1REG_MODE 3 \"gcn_register_or_unspec_operand\"\n-\t\t\t\t\t\t\t\t     \" U0\")\n+  [(set (match_operand:V_1REG 0 \"register_operand\"\t\t   \"= v\")\n+\t(vec_merge:V_1REG\n+\t  (vec_duplicate:V_1REG\n+\t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"\t   \" Sv\"))\n+\t  (match_operand:V_1REG 3 \"gcn_register_or_unspec_operand\" \" U0\")\n \t  (ashift (const_int 1)\n-\t\t  (match_operand:SI 2 \"gcn_alu_operand\"\t\t     \"SvB\"))))]\n+\t\t  (match_operand:SI 2 \"gcn_alu_operand\"\t\t   \"SvB\"))))]\n   \"\"\n   \"v_writelane_b32 %0, %1, %2\"\n   [(set_attr \"type\" \"vop3a\")\n@@ -497,14 +488,13 @@\n ; FIXME: 64bit operations really should be splitters, but I am not sure how\n ; to represent vertical subregs.\n (define_insn \"*vec_set<mode>\"\n-  [(set (match_operand:VEC_2REG_MODE 0 \"register_operand\"\t     \"= v\")\n-\t(vec_merge:VEC_2REG_MODE\n-\t  (vec_duplicate:VEC_2REG_MODE\n-\t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"\t     \" Sv\"))\n-\t  (match_operand:VEC_2REG_MODE 3 \"gcn_register_or_unspec_operand\"\n-\t\t\t\t\t\t\t\t     \" U0\")\n+  [(set (match_operand:V_2REG 0 \"register_operand\"\t\t   \"= v\")\n+\t(vec_merge:V_2REG\n+\t  (vec_duplicate:V_2REG\n+\t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"\t   \" Sv\"))\n+\t  (match_operand:V_2REG 3 \"gcn_register_or_unspec_operand\" \" U0\")\n \t  (ashift (const_int 1)\n-\t\t  (match_operand:SI 2 \"gcn_alu_operand\"\t\t     \"SvB\"))))]\n+\t\t  (match_operand:SI 2 \"gcn_alu_operand\"\t\t   \"SvB\"))))]\n   \"\"\n   \"v_writelane_b32 %L0, %L1, %2\\;v_writelane_b32 %H0, %H1, %2\"\n   [(set_attr \"type\" \"vmult\")\n@@ -513,22 +503,21 @@\n    (set_attr \"laneselect\" \"yes\")])\n \n (define_expand \"vec_set<mode>\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n-\t(vec_merge:VEC_ALLREG_MODE\n-\t  (vec_duplicate:VEC_ALLREG_MODE\n+  [(set (match_operand:V_ALL 0 \"register_operand\")\n+\t(vec_merge:V_ALL\n+\t  (vec_duplicate:V_ALL\n \t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"))\n \t  (match_dup 0)\n \t  (ashift (const_int 1) (match_operand:SI 2 \"gcn_alu_operand\"))))]\n   \"\")\n \n (define_insn \"*vec_set<mode>_1\"\n-  [(set (match_operand:VEC_ALL1REG_MODE 0 \"register_operand\"\t       \"=v\")\n-\t(vec_merge:VEC_ALL1REG_MODE\n-\t  (vec_duplicate:VEC_ALL1REG_MODE\n-\t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"\t       \"Sv\"))\n-\t  (match_operand:VEC_ALL1REG_MODE 3 \"gcn_register_or_unspec_operand\"\n-\t\t\t\t\t\t\t\t       \"U0\")\n-\t  (match_operand:SI 2 \"const_int_operand\"\t               \" i\")))]\n+  [(set (match_operand:V_1REG 0 \"register_operand\"\t\t   \"=v\")\n+\t(vec_merge:V_1REG\n+\t  (vec_duplicate:V_1REG\n+\t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"\t   \"Sv\"))\n+\t  (match_operand:V_1REG 3 \"gcn_register_or_unspec_operand\" \"U0\")\n+\t  (match_operand:SI 2 \"const_int_operand\"\t\t   \" i\")))]\n   \"((unsigned) exact_log2 (INTVAL (operands[2])) < 64)\"\n   {\n     operands[2] = GEN_INT (exact_log2 (INTVAL (operands[2])));\n@@ -540,13 +529,12 @@\n    (set_attr \"laneselect\" \"yes\")])\n \n (define_insn \"*vec_set<mode>_1\"\n-  [(set (match_operand:VEC_2REG_MODE 0 \"register_operand\"\t       \"=v\")\n-\t(vec_merge:VEC_2REG_MODE\n-\t  (vec_duplicate:VEC_2REG_MODE\n-\t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"\t       \"Sv\"))\n-\t  (match_operand:VEC_2REG_MODE 3 \"gcn_register_or_unspec_operand\"\n-\t\t\t\t\t\t\t\t       \"U0\")\n-\t  (match_operand:SI 2 \"const_int_operand\"\t\t       \" i\")))]\n+  [(set (match_operand:V_2REG 0 \"register_operand\"\t\t   \"=v\")\n+\t(vec_merge:V_2REG\n+\t  (vec_duplicate:V_2REG\n+\t    (match_operand:<SCALAR_MODE> 1 \"register_operand\"\t   \"Sv\"))\n+\t  (match_operand:V_2REG 3 \"gcn_register_or_unspec_operand\" \"U0\")\n+\t  (match_operand:SI 2 \"const_int_operand\"\t\t   \" i\")))]\n   \"((unsigned) exact_log2 (INTVAL (operands[2])) < 64)\"\n   {\n     operands[2] = GEN_INT (exact_log2 (INTVAL (operands[2])));\n@@ -558,28 +546,28 @@\n    (set_attr \"laneselect\" \"yes\")])\n \n (define_insn \"vec_duplicate<mode><exec>\"\n-  [(set (match_operand:VEC_ALL1REG_MODE 0 \"register_operand\"  \"=v\")\n-\t(vec_duplicate:VEC_ALL1REG_MODE\n-\t  (match_operand:<SCALAR_MODE> 1 \"gcn_alu_operand\"    \"SvB\")))]\n+  [(set (match_operand:V_1REG 0 \"register_operand\"\t   \"=v\")\n+\t(vec_duplicate:V_1REG\n+\t  (match_operand:<SCALAR_MODE> 1 \"gcn_alu_operand\" \"SvB\")))]\n   \"\"\n   \"v_mov_b32\\t%0, %1\"\n   [(set_attr \"type\" \"vop3a\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"vec_duplicate<mode><exec>\"\n-  [(set (match_operand:VEC_2REG_MODE 0 \"register_operand\"  \"=  v\")\n-\t(vec_duplicate:VEC_2REG_MODE\n+  [(set (match_operand:V_2REG 0 \"register_operand\"\t   \"=  v\")\n+\t(vec_duplicate:V_2REG\n \t  (match_operand:<SCALAR_MODE> 1 \"gcn_alu_operand\" \"SvDB\")))]\n   \"\"\n   \"v_mov_b32\\t%L0, %L1\\;v_mov_b32\\t%H0, %H1\"\n   [(set_attr \"type\" \"vop3a\")\n    (set_attr \"length\" \"16\")])\n \n (define_insn \"vec_extract<mode><scalar_mode>\"\n-  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\"   \"=Sg\")\n+  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\"  \"=Sg\")\n \t(vec_select:<SCALAR_MODE>\n-\t  (match_operand:VEC_ALL1REG_MODE 1 \"register_operand\" \"  v\")\n-\t  (parallel [(match_operand:SI 2 \"gcn_alu_operand\"     \"SvB\")])))]\n+\t  (match_operand:V_1REG 1 \"register_operand\"\t   \"  v\")\n+\t  (parallel [(match_operand:SI 2 \"gcn_alu_operand\" \"SvB\")])))]\n   \"\"\n   \"v_readlane_b32 %0, %1, %2\"\n   [(set_attr \"type\" \"vop3a\")\n@@ -588,10 +576,10 @@\n    (set_attr \"laneselect\" \"yes\")])\n \n (define_insn \"vec_extract<mode><scalar_mode>\"\n-  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\"   \"=&Sg\")\n+  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\"  \"=&Sg\")\n \t(vec_select:<SCALAR_MODE>\n-\t  (match_operand:VEC_2REG_MODE 1 \"register_operand\" \"   v\")\n-\t  (parallel [(match_operand:SI 2 \"gcn_alu_operand\"  \" SvB\")])))]\n+\t  (match_operand:V_2REG 1 \"register_operand\"\t   \"   v\")\n+\t  (parallel [(match_operand:SI 2 \"gcn_alu_operand\" \" SvB\")])))]\n   \"\"\n   \"v_readlane_b32 %L0, %L1, %2\\;v_readlane_b32 %H0, %H1, %2\"\n   [(set_attr \"type\" \"vmult\")\n@@ -602,7 +590,7 @@\n (define_expand \"extract_last_<mode>\"\n   [(match_operand:<SCALAR_MODE> 0 \"register_operand\")\n    (match_operand:DI 1 \"gcn_alu_operand\")\n-   (match_operand:VEC_ALLREG_MODE 2 \"register_operand\")]\n+   (match_operand:V_ALL 2 \"register_operand\")]\n   \"can_create_pseudo_p ()\"\n   {\n     rtx dst = operands[0];\n@@ -620,7 +608,7 @@\n   [(match_operand:<SCALAR_MODE> 0 \"register_operand\")\n    (match_operand:<SCALAR_MODE> 1 \"gcn_alu_operand\")\n    (match_operand:DI 2 \"gcn_alu_operand\")\n-   (match_operand:VEC_ALLREG_MODE 3 \"register_operand\")]\n+   (match_operand:V_ALL 3 \"register_operand\")]\n   \"can_create_pseudo_p ()\"\n   {\n     rtx dst = operands[0];\n@@ -642,7 +630,7 @@\n   })\n \n (define_expand \"vec_init<mode><scalar_mode>\"\n-  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n+  [(match_operand:V_ALL 0 \"register_operand\")\n    (match_operand 1)]\n   \"\"\n   {\n@@ -684,7 +672,7 @@\n ;; - Multiple forms of address expression are supported, below.\n \n (define_expand \"gather_load<mode>v64si\"\n-  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n+  [(match_operand:V_ALL 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")\n    (match_operand:V64SI 2 \"register_operand\")\n    (match_operand 3 \"immediate_operand\")\n@@ -707,8 +695,8 @@\n \n ; Allow any address expression\n (define_expand \"gather<mode>_expr<exec>\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n-\t(unspec:VEC_ALLREG_MODE\n+  [(set (match_operand:V_ALL 0 \"register_operand\")\n+\t(unspec:V_ALL\n \t  [(match_operand 1 \"\")\n \t   (match_operand 2 \"immediate_operand\")\n \t   (match_operand 3 \"immediate_operand\")\n@@ -718,8 +706,8 @@\n     {})\n \n (define_insn \"gather<mode>_insn_1offset<exec>\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\"\t \"=v\")\n-\t(unspec:VEC_ALLREG_MODE\n+  [(set (match_operand:V_ALL 0 \"register_operand\"\t\t \"=v\")\n+\t(unspec:V_ALL\n \t  [(plus:V64DI (match_operand:V64DI 1 \"register_operand\" \" v\")\n \t\t       (vec_duplicate:V64DI\n \t\t\t (match_operand 2 \"immediate_operand\"\t \" n\")))\n@@ -757,8 +745,8 @@\n    (set_attr \"length\" \"12\")])\n \n (define_insn \"gather<mode>_insn_1offset_ds<exec>\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\"\t \"=v\")\n-\t(unspec:VEC_ALLREG_MODE\n+  [(set (match_operand:V_ALL 0 \"register_operand\"\t\t \"=v\")\n+\t(unspec:V_ALL\n \t  [(plus:V64SI (match_operand:V64SI 1 \"register_operand\" \" v\")\n \t\t       (vec_duplicate:V64SI\n \t\t\t (match_operand 2 \"immediate_operand\"\t \" n\")))\n@@ -779,8 +767,8 @@\n    (set_attr \"length\" \"12\")])\n \n (define_insn \"gather<mode>_insn_2offsets<exec>\"\n-  [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\"\t       \"=v\")\n-\t(unspec:VEC_ALLREG_MODE\n+  [(set (match_operand:V_ALL 0 \"register_operand\"\t\t       \"=v\")\n+\t(unspec:V_ALL\n \t  [(plus:V64DI\n \t     (plus:V64DI\n \t       (vec_duplicate:V64DI\n@@ -820,7 +808,7 @@\n    (match_operand:V64SI 1 \"register_operand\")\n    (match_operand 2 \"immediate_operand\")\n    (match_operand:SI 3 \"gcn_alu_operand\")\n-   (match_operand:VEC_ALLREG_MODE 4 \"register_operand\")]\n+   (match_operand:V_ALL 4 \"register_operand\")]\n   \"\"\n   {\n     rtx addr = gcn_expand_scaled_offsets (DEFAULT_ADDR_SPACE, operands[0],\n@@ -842,7 +830,7 @@\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK\n \t  [(match_operand:V64DI 0 \"\")\n-\t   (match_operand:VEC_ALLREG_MODE 1 \"register_operand\")\n+\t   (match_operand:V_ALL 1 \"register_operand\")\n \t   (match_operand 2 \"immediate_operand\")\n \t   (match_operand 3 \"immediate_operand\")]\n \t  UNSPEC_SCATTER))]\n@@ -855,7 +843,7 @@\n \t  [(plus:V64DI (match_operand:V64DI 0 \"register_operand\" \"v\")\n \t\t       (vec_duplicate:V64DI\n \t\t\t (match_operand 1 \"immediate_operand\"\t \"n\")))\n-\t   (match_operand:VEC_ALLREG_MODE 2 \"register_operand\"\t \"v\")\n+\t   (match_operand:V_ALL 2 \"register_operand\"\t\t \"v\")\n \t   (match_operand 3 \"immediate_operand\"\t\t\t \"n\")\n \t   (match_operand 4 \"immediate_operand\"\t\t\t \"n\")]\n \t  UNSPEC_SCATTER))]\n@@ -893,7 +881,7 @@\n \t  [(plus:V64SI (match_operand:V64SI 0 \"register_operand\" \"v\")\n \t\t       (vec_duplicate:V64SI\n \t\t\t (match_operand 1 \"immediate_operand\"\t \"n\")))\n-\t   (match_operand:VEC_ALLREG_MODE 2 \"register_operand\"\t \"v\")\n+\t   (match_operand:V_ALL 2 \"register_operand\"\t\t \"v\")\n \t   (match_operand 3 \"immediate_operand\"\t\t\t \"n\")\n \t   (match_operand 4 \"immediate_operand\"\t\t\t \"n\")]\n \t  UNSPEC_SCATTER))]\n@@ -915,14 +903,13 @@\n \t  [(plus:V64DI\n \t     (plus:V64DI\n \t       (vec_duplicate:V64DI\n-\t\t (match_operand:DI 0 \"register_operand\"\t\t    \"Sv\"))\n+\t\t (match_operand:DI 0 \"register_operand\"\t\t       \"Sv\"))\n \t       (sign_extend:V64DI\n-\t\t (match_operand:V64SI 1 \"register_operand\"\t    \" v\")))\n-\t     (vec_duplicate:V64DI (match_operand 2 \"immediate_operand\"\n-\t\t\t\t\t\t\t\t    \" n\")))\n-\t   (match_operand:VEC_ALLREG_MODE 3 \"register_operand\"\t    \" v\")\n-\t   (match_operand 4 \"immediate_operand\"\t\t\t    \" n\")\n-\t   (match_operand 5 \"immediate_operand\"\t\t\t    \" n\")]\n+\t\t (match_operand:V64SI 1 \"register_operand\"\t       \" v\")))\n+\t     (vec_duplicate:V64DI (match_operand 2 \"immediate_operand\" \" n\")))\n+\t   (match_operand:V_ALL 3 \"register_operand\"\t\t       \" v\")\n+\t   (match_operand 4 \"immediate_operand\"\t\t\t       \" n\")\n+\t   (match_operand 5 \"immediate_operand\"\t\t\t       \" n\")]\n \t  UNSPEC_SCATTER))]\n   \"(AS_GLOBAL_P (INTVAL (operands[4]))\n     && (((unsigned HOST_WIDE_INT)INTVAL(operands[2]) + 0x1000) < 0x2000))\"\n@@ -951,23 +938,23 @@\n ;; {{{ Permutations\n \n (define_insn \"ds_bpermute<mode>\"\n-  [(set (match_operand:VEC_ALL1REG_MODE 0 \"register_operand\"\t\"=v\")\n-\t(unspec:VEC_ALL1REG_MODE\n-\t  [(match_operand:VEC_ALL1REG_MODE 2 \"register_operand\" \" v\")\n-\t   (match_operand:V64SI 1 \"register_operand\"\t\t\" v\")\n-\t   (match_operand:DI 3 \"gcn_exec_reg_operand\"\t\t\" e\")]\n+  [(set (match_operand:V_1REG 0 \"register_operand\"    \"=v\")\n+\t(unspec:V_1REG\n+\t  [(match_operand:V_1REG 2 \"register_operand\" \" v\")\n+\t   (match_operand:V64SI 1 \"register_operand\"  \" v\")\n+\t   (match_operand:DI 3 \"gcn_exec_reg_operand\" \" e\")]\n \t  UNSPEC_BPERMUTE))]\n   \"\"\n   \"ds_bpermute_b32\\t%0, %1, %2\\;s_waitcnt\\tlgkmcnt(0)\"\n   [(set_attr \"type\" \"vop2\")\n    (set_attr \"length\" \"12\")])\n \n (define_insn_and_split \"ds_bpermute<mode>\"\n-  [(set (match_operand:VEC_2REG_MODE 0 \"register_operand\"    \"=&v\")\n-\t(unspec:VEC_2REG_MODE\n-\t  [(match_operand:VEC_2REG_MODE 2 \"register_operand\" \" v0\")\n-\t   (match_operand:V64SI 1 \"register_operand\"\t     \"  v\")\n-\t   (match_operand:DI 3 \"gcn_exec_reg_operand\"\t     \"  e\")]\n+  [(set (match_operand:V_2REG 0 \"register_operand\"    \"=&v\")\n+\t(unspec:V_2REG\n+\t  [(match_operand:V_2REG 2 \"register_operand\" \" v0\")\n+\t   (match_operand:V64SI 1 \"register_operand\"  \"  v\")\n+\t   (match_operand:DI 3 \"gcn_exec_reg_operand\" \"  e\")]\n \t  UNSPEC_BPERMUTE))]\n   \"\"\n   \"#\"\n@@ -986,10 +973,10 @@\n    (set_attr \"length\" \"24\")])\n \n (define_insn \"@dpp_move<mode>\"\n-  [(set (match_operand:VEC_REG_MODE 0 \"register_operand\"    \"=v\")\n-\t(unspec:VEC_REG_MODE\n-\t  [(match_operand:VEC_REG_MODE 1 \"register_operand\" \" v\")\n-\t   (match_operand:SI 2 \"const_int_operand\"\t    \" n\")]\n+  [(set (match_operand:V_noHI 0 \"register_operand\"    \"=v\")\n+\t(unspec:V_noHI\n+\t  [(match_operand:V_noHI 1 \"register_operand\" \" v\")\n+\t   (match_operand:SI 2 \"const_int_operand\"    \" n\")]\n \t  UNSPEC_MOV_DPP_SHR))]\n   \"\"\n   {\n@@ -1003,22 +990,22 @@\n ;; {{{ ALU special case: add/sub\n \n (define_insn \"add<mode>3<exec_clobber>\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\"   \"=  v\")\n-\t(plus:VEC_ALL1REG_INT_MODE\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 1 \"register_operand\" \"%  v\")\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 2 \"gcn_alu_operand\"  \"vSvB\")))\n+  [(set (match_operand:V_INT_1REG 0 \"register_operand\"   \"=  v\")\n+\t(plus:V_INT_1REG\n+\t  (match_operand:V_INT_1REG 1 \"register_operand\" \"%  v\")\n+\t  (match_operand:V_INT_1REG 2 \"gcn_alu_operand\"  \"vSvB\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"v_add%^_u32\\t%0, vcc, %2, %1\"\n   [(set_attr \"type\" \"vop2\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"add<mode>3_dup<exec_clobber>\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\"   \"= v\")\n-\t(plus:VEC_ALL1REG_INT_MODE\n-\t  (vec_duplicate:VEC_ALL1REG_INT_MODE\n-\t    (match_operand:<SCALAR_MODE> 2 \"gcn_alu_operand\"       \"SvB\"))\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 1 \"register_operand\" \"  v\")))\n+  [(set (match_operand:V_INT_1REG 0 \"register_operand\"\t     \"= v\")\n+\t(plus:V_INT_1REG\n+\t  (vec_duplicate:V_INT_1REG\n+\t    (match_operand:<SCALAR_MODE> 2 \"gcn_alu_operand\" \"SvB\"))\n+\t  (match_operand:V_INT_1REG 1 \"register_operand\"     \"  v\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"v_add%^_u32\\t%0, vcc, %2, %1\"\n@@ -1093,10 +1080,10 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_insn \"sub<mode>3<exec_clobber>\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\"  \"=  v,   v\")\n-\t(minus:VEC_ALL1REG_INT_MODE\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 1 \"gcn_alu_operand\" \"vSvB,   v\")\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 2 \"gcn_alu_operand\" \"   v,vSvB\")))\n+  [(set (match_operand:V_INT_1REG 0 \"register_operand\"  \"=  v,   v\")\n+\t(minus:V_INT_1REG\n+\t  (match_operand:V_INT_1REG 1 \"gcn_alu_operand\" \"vSvB,   v\")\n+\t  (match_operand:V_INT_1REG 2 \"gcn_alu_operand\" \"   v,vSvB\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"@\n@@ -1649,21 +1636,21 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"mul<mode>3<exec>\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\"  \"=   v\")\n-\t(mult:VEC_ALL1REG_INT_MODE\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 1 \"gcn_alu_operand\" \"%vSvA\")\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 2 \"gcn_alu_operand\" \" vSvA\")))]\n+  [(set (match_operand:V_INT_1REG 0 \"register_operand\"  \"=   v\")\n+\t(mult:V_INT_1REG\n+\t  (match_operand:V_INT_1REG 1 \"gcn_alu_operand\" \"%vSvA\")\n+\t  (match_operand:V_INT_1REG 2 \"gcn_alu_operand\" \" vSvA\")))]\n   \"\"\n   \"v_mul_lo_u32\\t%0, %1, %2\"\n   [(set_attr \"type\" \"vop3a\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"mul<mode>3_dup<exec>\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\"  \"=   v\")\n-\t(mult:VEC_ALL1REG_INT_MODE\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 1 \"gcn_alu_operand\" \"%vSvA\")\n-\t  (vec_duplicate:VEC_ALL1REG_INT_MODE\n-\t    (match_operand:<SCALAR_MODE> 2 \"gcn_alu_operand\"\t  \"  SvA\"))))]\n+  [(set (match_operand:V_INT_1REG 0 \"register_operand\"\t     \"=   v\")\n+\t(mult:V_INT_1REG\n+\t  (match_operand:V_INT_1REG 1 \"gcn_alu_operand\"\t     \"%vSvA\")\n+\t  (vec_duplicate:V_INT_1REG\n+\t    (match_operand:<SCALAR_MODE> 2 \"gcn_alu_operand\" \"  SvA\"))))]\n   \"\"\n   \"v_mul_lo_u32\\t%0, %1, %2\"\n   [(set_attr \"type\" \"vop3a\")\n@@ -1892,28 +1879,24 @@\n ;; }}}\n ;; {{{ ALU generic case\n \n-(define_mode_iterator VEC_INT_MODE [V64SI V64DI])\n-\n (define_code_iterator bitop [and ior xor])\n (define_code_iterator shiftop [ashift lshiftrt ashiftrt])\n (define_code_iterator minmaxop [smin smax umin umax])\n \n (define_insn \"<expander><mode>2<exec>\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"gcn_valu_dst_operand\"    \"=  v\")\n-\t(bitunop:VEC_ALL1REG_INT_MODE\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 1 \"gcn_valu_src0_operand\" \"vSvB\")))]\n+  [(set (match_operand:V_INT_1REG 0 \"gcn_valu_dst_operand\"    \"=  v\")\n+\t(bitunop:V_INT_1REG\n+\t  (match_operand:V_INT_1REG 1 \"gcn_valu_src0_operand\" \"vSvB\")))]\n   \"\"\n   \"v_<mnemonic>0\\t%0, %1\"\n   [(set_attr \"type\" \"vop1\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"<expander><mode>3<exec>\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"gcn_valu_dst_operand\" \"=  v,RD\")\n-\t(bitop:VEC_ALL1REG_INT_MODE\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 1 \"gcn_valu_src0_operand\"\n-\t\t\t\t\t\t\t\t  \"%  v, 0\")\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 2 \"gcn_valu_src1com_operand\"\n-\t\t\t\t\t\t\t\t  \"vSvB, v\")))]\n+  [(set (match_operand:V_INT_1REG 0 \"gcn_valu_dst_operand\"\t \"=  v,RD\")\n+\t(bitop:V_INT_1REG\n+\t  (match_operand:V_INT_1REG 1 \"gcn_valu_src0_operand\"\t \"%  v, 0\")\n+\t  (match_operand:V_INT_1REG 2 \"gcn_valu_src1com_operand\" \"vSvB, v\")))]\n   \"\"\n   \"@\n    v_<mnemonic>0\\t%0, %2, %1\n@@ -1986,11 +1969,11 @@\n    (set_attr \"length\" \"16,8\")])\n \n (define_expand \"<expander><mode>3\"\n-  [(set (match_operand:VEC_SUBDWORD_MODE 0 \"register_operand\"  \"= v\")\n-\t(shiftop:VEC_SUBDWORD_MODE\n-\t  (match_operand:VEC_SUBDWORD_MODE 1 \"gcn_alu_operand\" \"  v\")\n-\t  (vec_duplicate:VEC_SUBDWORD_MODE\n-\t    (match_operand:SI 2 \"gcn_alu_operand\"\t       \"SvB\"))))]\n+  [(set (match_operand:V_QIHI 0 \"register_operand\"  \"= v\")\n+\t(shiftop:V_QIHI\n+\t  (match_operand:V_QIHI 1 \"gcn_alu_operand\" \"  v\")\n+\t  (vec_duplicate:V_QIHI\n+\t    (match_operand:SI 2 \"gcn_alu_operand\"   \"SvB\"))))]\n   \"\"\n   {\n     enum {ashift, lshiftrt, ashiftrt};\n@@ -2018,10 +2001,10 @@\n    (set_attr \"length\" \"8\")])\n \n (define_expand \"v<expander><mode>3\"\n-  [(set (match_operand:VEC_SUBDWORD_MODE 0 \"register_operand\"  \"=v\")\n-\t(shiftop:VEC_SUBDWORD_MODE\n-\t  (match_operand:VEC_SUBDWORD_MODE 1 \"gcn_alu_operand\" \" v\")\n-\t  (match_operand:VEC_SUBDWORD_MODE 2 \"gcn_alu_operand\" \"vB\")))]\n+  [(set (match_operand:V_QIHI 0 \"register_operand\"  \"=v\")\n+\t(shiftop:V_QIHI\n+\t  (match_operand:V_QIHI 1 \"gcn_alu_operand\" \" v\")\n+\t  (match_operand:V_QIHI 2 \"gcn_alu_operand\" \"vB\")))]\n   \"\"\n   {\n     enum {ashift, lshiftrt, ashiftrt};\n@@ -2048,10 +2031,10 @@\n    (set_attr \"length\" \"8\")])\n \n (define_expand \"<expander><mode>3\"\n-  [(set (match_operand:VEC_SUBDWORD_MODE 0 \"gcn_valu_dst_operand\")\n-\t(minmaxop:VEC_SUBDWORD_MODE\n-\t  (match_operand:VEC_SUBDWORD_MODE 1 \"gcn_valu_src0_operand\")\n-\t  (match_operand:VEC_SUBDWORD_MODE 2 \"gcn_valu_src1com_operand\")))]\n+  [(set (match_operand:V_QIHI 0 \"gcn_valu_dst_operand\")\n+\t(minmaxop:V_QIHI\n+\t  (match_operand:V_QIHI 1 \"gcn_valu_src0_operand\")\n+\t  (match_operand:V_QIHI 2 \"gcn_valu_src1com_operand\")))]\n   \"\"\n   {\n     enum {smin, umin, smax, umax};\n@@ -2112,30 +2095,25 @@\n ;; }}}\n ;; {{{ FP binops - generic\n \n-(define_mode_iterator VEC_FP_MODE [V64HF V64SF V64DF])\n-(define_mode_iterator VEC_FP_1REG_MODE [V64HF V64SF])\n-(define_mode_iterator FP_MODE [HF SF DF])\n-(define_mode_iterator FP_1REG_MODE [HF SF])\n-\n (define_code_iterator comm_fp [plus mult smin smax])\n (define_code_iterator nocomm_fp [minus])\n (define_code_iterator all_fp [plus mult minus smin smax])\n \n (define_insn \"<expander><mode>3<exec>\"\n-  [(set (match_operand:VEC_FP_MODE 0 \"register_operand\"  \"=  v\")\n-\t(comm_fp:VEC_FP_MODE\n-\t  (match_operand:VEC_FP_MODE 1 \"gcn_alu_operand\" \"%  v\")\n-\t  (match_operand:VEC_FP_MODE 2 \"gcn_alu_operand\" \"vSvB\")))]\n+  [(set (match_operand:V_FP 0 \"register_operand\"  \"=  v\")\n+\t(comm_fp:V_FP\n+\t  (match_operand:V_FP 1 \"gcn_alu_operand\" \"%  v\")\n+\t  (match_operand:V_FP 2 \"gcn_alu_operand\" \"vSvB\")))]\n   \"\"\n   \"v_<mnemonic>0\\t%0, %2, %1\"\n   [(set_attr \"type\" \"vop2\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"<expander><mode>3\"\n-  [(set (match_operand:FP_MODE 0 \"gcn_valu_dst_operand\"    \"=  v,  RL\")\n-\t(comm_fp:FP_MODE\n-\t  (match_operand:FP_MODE 1 \"gcn_valu_src0_operand\" \"%  v,   0\")\n-\t  (match_operand:FP_MODE 2 \"gcn_valu_src1_operand\" \"vSvB,vSvB\")))]\n+  [(set (match_operand:FP 0 \"gcn_valu_dst_operand\"    \"=  v,  RL\")\n+\t(comm_fp:FP\n+\t  (match_operand:FP 1 \"gcn_valu_src0_operand\" \"%  v,   0\")\n+\t  (match_operand:FP 2 \"gcn_valu_src1_operand\" \"vSvB,vSvB\")))]\n   \"\"\n   \"@\n   v_<mnemonic>0\\t%0, %2, %1\n@@ -2144,10 +2122,10 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"<expander><mode>3<exec>\"\n-  [(set (match_operand:VEC_FP_1REG_MODE 0 \"register_operand\"  \"=  v,   v\")\n-\t(nocomm_fp:VEC_FP_1REG_MODE\n-\t  (match_operand:VEC_FP_1REG_MODE 1 \"gcn_alu_operand\" \"vSvB,   v\")\n-\t  (match_operand:VEC_FP_1REG_MODE 2 \"gcn_alu_operand\" \"   v,vSvB\")))]\n+  [(set (match_operand:V_FP_1REG 0 \"register_operand\"  \"=  v,   v\")\n+\t(nocomm_fp:V_FP_1REG\n+\t  (match_operand:V_FP_1REG 1 \"gcn_alu_operand\" \"vSvB,   v\")\n+\t  (match_operand:V_FP_1REG 2 \"gcn_alu_operand\" \"   v,vSvB\")))]\n   \"\"\n   \"@\n    v_<mnemonic>0\\t%0, %1, %2\n@@ -2156,10 +2134,10 @@\n    (set_attr \"length\" \"8,8\")])\n \n (define_insn \"<expander><mode>3\"\n-  [(set (match_operand:FP_1REG_MODE 0 \"register_operand\"  \"=  v,   v\")\n-\t(nocomm_fp:FP_1REG_MODE\n-\t  (match_operand:FP_1REG_MODE 1 \"gcn_alu_operand\" \"vSvB,   v\")\n-\t  (match_operand:FP_1REG_MODE 2 \"gcn_alu_operand\" \"   v,vSvB\")))]\n+  [(set (match_operand:FP_1REG 0 \"register_operand\"  \"=  v,   v\")\n+\t(nocomm_fp:FP_1REG\n+\t  (match_operand:FP_1REG 1 \"gcn_alu_operand\" \"vSvB,   v\")\n+\t  (match_operand:FP_1REG 2 \"gcn_alu_operand\" \"   v,vSvB\")))]\n   \"\"\n   \"@\n    v_<mnemonic>0\\t%0, %1, %2\n@@ -2171,44 +2149,44 @@\n ;; {{{ FP unops\n \n (define_insn \"abs<mode>2\"\n-  [(set (match_operand:FP_MODE 0 \"register_operand\"\t\t \"=v\")\n-\t(abs:FP_MODE (match_operand:FP_MODE 1 \"register_operand\" \" v\")))]\n+  [(set (match_operand:FP 0 \"register_operand\"\t\t \"=v\")\n+\t(abs:FP (match_operand:FP 1 \"register_operand\" \" v\")))]\n   \"\"\n   \"v_add%i0\\t%0, 0, |%1|\"\n   [(set_attr \"type\" \"vop3a\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"abs<mode>2<exec>\"\n-  [(set (match_operand:VEC_FP_MODE 0 \"register_operand\"\t  \"=v\")\n-\t(abs:VEC_FP_MODE\n-\t  (match_operand:VEC_FP_MODE 1 \"register_operand\" \" v\")))]\n+  [(set (match_operand:V_FP 0 \"register_operand\"   \"=v\")\n+\t(abs:V_FP\n+\t  (match_operand:V_FP 1 \"register_operand\" \" v\")))]\n   \"\"\n   \"v_add%i0\\t%0, 0, |%1|\"\n   [(set_attr \"type\" \"vop3a\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"neg<mode>2<exec>\"\n-  [(set (match_operand:VEC_FP_MODE 0 \"register_operand\"\t  \"=v\")\n-\t(neg:VEC_FP_MODE\n-\t  (match_operand:VEC_FP_MODE 1 \"register_operand\" \" v\")))]\n+  [(set (match_operand:V_FP 0 \"register_operand\"   \"=v\")\n+\t(neg:V_FP\n+\t  (match_operand:V_FP 1 \"register_operand\" \" v\")))]\n   \"\"\n   \"v_add%i0\\t%0, 0, -%1\"\n   [(set_attr \"type\" \"vop3a\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"sqrt<mode>2<exec>\"\n-  [(set (match_operand:VEC_FP_MODE 0 \"register_operand\"\t \"=  v\")\n-\t(sqrt:VEC_FP_MODE\n-\t  (match_operand:VEC_FP_MODE 1 \"gcn_alu_operand\" \"vSvB\")))]\n+  [(set (match_operand:V_FP 0 \"register_operand\"  \"=  v\")\n+\t(sqrt:V_FP\n+\t  (match_operand:V_FP 1 \"gcn_alu_operand\" \"vSvB\")))]\n   \"flag_unsafe_math_optimizations\"\n   \"v_sqrt%i0\\t%0, %1\"\n   [(set_attr \"type\" \"vop1\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"sqrt<mode>2\"\n-  [(set (match_operand:FP_MODE 0 \"register_operand\"  \"=  v\")\n-\t(sqrt:FP_MODE\n-\t  (match_operand:FP_MODE 1 \"gcn_alu_operand\" \"vSvB\")))]\n+  [(set (match_operand:FP 0 \"register_operand\"  \"=  v\")\n+\t(sqrt:FP\n+\t  (match_operand:FP 1 \"gcn_alu_operand\" \"vSvB\")))]\n   \"flag_unsafe_math_optimizations\"\n   \"v_sqrt%i0\\t%0, %1\"\n   [(set_attr \"type\" \"vop1\")\n@@ -2218,46 +2196,46 @@\n ;; {{{ FP fused multiply and add\n \n (define_insn \"fma<mode>4<exec>\"\n-  [(set (match_operand:VEC_FP_MODE 0 \"register_operand\"\t \"=  v,   v\")\n-\t(fma:VEC_FP_MODE\n-\t  (match_operand:VEC_FP_MODE 1 \"gcn_alu_operand\" \"% vA,  vA\")\n-\t  (match_operand:VEC_FP_MODE 2 \"gcn_alu_operand\" \"  vA,vSvA\")\n-\t  (match_operand:VEC_FP_MODE 3 \"gcn_alu_operand\" \"vSvA,  vA\")))]\n+  [(set (match_operand:V_FP 0 \"register_operand\"  \"=  v,   v\")\n+\t(fma:V_FP\n+\t  (match_operand:V_FP 1 \"gcn_alu_operand\" \"% vA,  vA\")\n+\t  (match_operand:V_FP 2 \"gcn_alu_operand\" \"  vA,vSvA\")\n+\t  (match_operand:V_FP 3 \"gcn_alu_operand\" \"vSvA,  vA\")))]\n   \"\"\n   \"v_fma%i0\\t%0, %1, %2, %3\"\n   [(set_attr \"type\" \"vop3a\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"fma<mode>4_negop2<exec>\"\n-  [(set (match_operand:VEC_FP_MODE 0 \"register_operand\"\t   \"=  v,   v,   v\")\n-\t(fma:VEC_FP_MODE\n-\t  (match_operand:VEC_FP_MODE 1 \"gcn_alu_operand\"   \"  vA,  vA,vSvA\")\n-\t  (neg:VEC_FP_MODE\n-\t    (match_operand:VEC_FP_MODE 2 \"gcn_alu_operand\" \"  vA,vSvA,  vA\"))\n-\t  (match_operand:VEC_FP_MODE 3 \"gcn_alu_operand\"   \"vSvA,  vA,  vA\")))]\n+  [(set (match_operand:V_FP 0 \"register_operand\"    \"=  v,   v,   v\")\n+\t(fma:V_FP\n+\t  (match_operand:V_FP 1 \"gcn_alu_operand\"   \"  vA,  vA,vSvA\")\n+\t  (neg:V_FP\n+\t    (match_operand:V_FP 2 \"gcn_alu_operand\" \"  vA,vSvA,  vA\"))\n+\t  (match_operand:V_FP 3 \"gcn_alu_operand\"   \"vSvA,  vA,  vA\")))]\n   \"\"\n   \"v_fma%i0\\t%0, %1, -%2, %3\"\n   [(set_attr \"type\" \"vop3a\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"fma<mode>4\"\n-  [(set (match_operand:FP_MODE 0 \"register_operand\"  \"=  v,   v\")\n-\t(fma:FP_MODE\n-\t  (match_operand:FP_MODE 1 \"gcn_alu_operand\" \"% vA,  vA\")\n-\t  (match_operand:FP_MODE 2 \"gcn_alu_operand\" \"  vA,vSvA\")\n-\t  (match_operand:FP_MODE 3 \"gcn_alu_operand\" \"vSvA,  vA\")))]\n+  [(set (match_operand:FP 0 \"register_operand\"  \"=  v,   v\")\n+\t(fma:FP\n+\t  (match_operand:FP 1 \"gcn_alu_operand\" \"% vA,  vA\")\n+\t  (match_operand:FP 2 \"gcn_alu_operand\" \"  vA,vSvA\")\n+\t  (match_operand:FP 3 \"gcn_alu_operand\" \"vSvA,  vA\")))]\n   \"\"\n   \"v_fma%i0\\t%0, %1, %2, %3\"\n   [(set_attr \"type\" \"vop3a\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"fma<mode>4_negop2\"\n-  [(set (match_operand:FP_MODE 0 \"register_operand\"    \"=  v,   v,   v\")\n-\t(fma:FP_MODE\n-\t  (match_operand:FP_MODE 1 \"gcn_alu_operand\"   \"  vA,  vA,vSvA\")\n-\t  (neg:FP_MODE\n-\t    (match_operand:FP_MODE 2 \"gcn_alu_operand\" \"  vA,vSvA,  vA\"))\n-\t  (match_operand:FP_MODE 3 \"gcn_alu_operand\"   \"vSvA,  vA,  vA\")))]\n+  [(set (match_operand:FP 0 \"register_operand\"    \"=  v,   v,   v\")\n+\t(fma:FP\n+\t  (match_operand:FP 1 \"gcn_alu_operand\"   \"  vA,  vA,vSvA\")\n+\t  (neg:FP\n+\t    (match_operand:FP 2 \"gcn_alu_operand\" \"  vA,vSvA,  vA\"))\n+\t  (match_operand:FP 3 \"gcn_alu_operand\"   \"vSvA,  vA,  vA\")))]\n   \"\"\n   \"v_fma%i0\\t%0, %1, -%2, %3\"\n   [(set_attr \"type\" \"vop3a\")\n@@ -2267,20 +2245,20 @@\n ;; {{{ FP division\n \n (define_insn \"recip<mode>2<exec>\"\n-  [(set (match_operand:VEC_FP_MODE 0 \"register_operand\"\t   \"=  v\")\n-\t(div:VEC_FP_MODE\n-\t  (vec_duplicate:VEC_FP_MODE (float:<SCALAR_MODE> (const_int 1)))\n-\t  (match_operand:VEC_FP_MODE 1 \"gcn_alu_operand\"   \"vSvB\")))]\n+  [(set (match_operand:V_FP 0 \"register_operand\"  \"=  v\")\n+\t(div:V_FP\n+\t  (vec_duplicate:V_FP (float:<SCALAR_MODE> (const_int 1)))\n+\t  (match_operand:V_FP 1 \"gcn_alu_operand\" \"vSvB\")))]\n   \"\"\n   \"v_rcp%i0\\t%0, %1\"\n   [(set_attr \"type\" \"vop1\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"recip<mode>2\"\n-  [(set (match_operand:FP_MODE 0 \"register_operand\"\t \"=  v\")\n-\t(div:FP_MODE\n-\t  (float:FP_MODE (const_int 1))\n-\t  (match_operand:FP_MODE 1 \"gcn_alu_operand\"\t \"vSvB\")))]\n+  [(set (match_operand:FP 0 \"register_operand\"\t \"=  v\")\n+\t(div:FP\n+\t  (float:FP (const_int 1))\n+\t  (match_operand:FP 1 \"gcn_alu_operand\"\t \"vSvB\")))]\n   \"\"\n   \"v_rcp%i0\\t%0, %1\"\n   [(set_attr \"type\" \"vop1\")\n@@ -2294,9 +2272,9 @@\n ;; FIXME: This does not handle denormals, NaNs, division-by-zero etc.\n \n (define_expand \"div<mode>3\"\n-  [(match_operand:VEC_FP_MODE 0 \"gcn_valu_dst_operand\")\n-   (match_operand:VEC_FP_MODE 1 \"gcn_valu_src0_operand\")\n-   (match_operand:VEC_FP_MODE 2 \"gcn_valu_src0_operand\")]\n+  [(match_operand:V_FP 0 \"gcn_valu_dst_operand\")\n+   (match_operand:V_FP 1 \"gcn_valu_src0_operand\")\n+   (match_operand:V_FP 2 \"gcn_valu_src0_operand\")]\n   \"flag_reciprocal_math\"\n   {\n     rtx two = gcn_vec_constant (<MODE>mode,\n@@ -2326,9 +2304,9 @@\n   })\n \n (define_expand \"div<mode>3\"\n-  [(match_operand:FP_MODE 0 \"gcn_valu_dst_operand\")\n-   (match_operand:FP_MODE 1 \"gcn_valu_src0_operand\")\n-   (match_operand:FP_MODE 2 \"gcn_valu_src0_operand\")]\n+  [(match_operand:FP 0 \"gcn_valu_dst_operand\")\n+   (match_operand:FP 1 \"gcn_valu_src0_operand\")\n+   (match_operand:FP 2 \"gcn_valu_src0_operand\")]\n   \"flag_reciprocal_math\"\n   {\n     rtx two = const_double_from_real_value (dconst2, <MODE>mode);\n@@ -2415,21 +2393,21 @@\n \t(zero_extend \"zero_extend\")\n \t(truncate \"trunc\")])\n \n-(define_insn \"<convop><VEC_ALL1REG_INT_ALT:mode><VEC_ALL1REG_INT_MODE:mode>2<exec>\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\" \"=v\")\n-        (zero_convert:VEC_ALL1REG_INT_MODE\n-\t  (match_operand:VEC_ALL1REG_INT_ALT 1 \"gcn_alu_operand\" \" v\")))]\n+(define_insn \"<convop><V_INT_1REG_ALT:mode><V_INT_1REG:mode>2<exec>\"\n+  [(set (match_operand:V_INT_1REG 0 \"register_operand\"      \"=v\")\n+        (zero_convert:V_INT_1REG\n+\t  (match_operand:V_INT_1REG_ALT 1 \"gcn_alu_operand\" \" v\")))]\n   \"\"\n-  \"v_mov_b32_sdwa\\t%0, %1 dst_sel:<VEC_ALL1REG_INT_MODE:sdwa> dst_unused:UNUSED_PAD src0_sel:<VEC_ALL1REG_INT_ALT:sdwa>\"\n+  \"v_mov_b32_sdwa\\t%0, %1 dst_sel:<V_INT_1REG:sdwa> dst_unused:UNUSED_PAD src0_sel:<V_INT_1REG_ALT:sdwa>\"\n   [(set_attr \"type\" \"vop_sdwa\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"extend<VEC_ALL1REG_INT_ALT:mode><VEC_ALL1REG_INT_MODE:mode>2<exec>\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\" \"=v\")\n-        (sign_extend:VEC_ALL1REG_INT_MODE\n-\t  (match_operand:VEC_ALL1REG_INT_ALT 1 \"gcn_alu_operand\" \" v\")))]\n+(define_insn \"extend<V_INT_1REG_ALT:mode><V_INT_1REG:mode>2<exec>\"\n+  [(set (match_operand:V_INT_1REG 0 \"register_operand\"\t    \"=v\")\n+        (sign_extend:V_INT_1REG\n+\t  (match_operand:V_INT_1REG_ALT 1 \"gcn_alu_operand\" \" v\")))]\n   \"\"\n-  \"v_mov_b32_sdwa\\t%0, sext(%1) src0_sel:<VEC_ALL1REG_INT_ALT:sdwa>\"\n+  \"v_mov_b32_sdwa\\t%0, sext(%1) src0_sel:<V_INT_1REG_ALT:sdwa>\"\n   [(set_attr \"type\" \"vop_sdwa\")\n    (set_attr \"length\" \"8\")])\n \n@@ -2438,9 +2416,9 @@\n ;; so there must be a few tricks here.\n \n (define_insn_and_split \"truncv64di<mode>2\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\" \"=v\")\n-\t(truncate:VEC_ALL1REG_INT_MODE\n-\t  (match_operand:V64DI 1 \"gcn_alu_operand\"\t\t \" v\")))]\n+  [(set (match_operand:V_INT_1REG 0 \"register_operand\" \"=v\")\n+\t(truncate:V_INT_1REG\n+\t  (match_operand:V64DI 1 \"gcn_alu_operand\"     \" v\")))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n@@ -2458,13 +2436,12 @@\n    (set_attr \"length\" \"4\")])\n \n (define_insn_and_split \"truncv64di<mode>2_exec\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\"       \"=v\")\n-\t(vec_merge:VEC_ALL1REG_INT_MODE\n-\t  (truncate:VEC_ALL1REG_INT_MODE\n-\t    (match_operand:V64DI 1 \"gcn_alu_operand\"\t\t       \" v\"))\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 2 \"gcn_alu_or_unspec_operand\" \n-\t\t\t\t\t\t\t\t       \"U0\")\n-\t  (match_operand:DI 3 \"gcn_exec_operand\"\t\t       \" e\")))]\n+  [(set (match_operand:V_INT_1REG 0 \"register_operand\"\t\t  \"=v\")\n+\t(vec_merge:V_INT_1REG\n+\t  (truncate:V_INT_1REG\n+\t    (match_operand:V64DI 1 \"gcn_alu_operand\"\t\t  \" v\"))\n+\t  (match_operand:V_INT_1REG 2 \"gcn_alu_or_unspec_operand\" \"U0\")\n+\t  (match_operand:DI 3 \"gcn_exec_operand\"\t\t  \" e\")))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n@@ -2484,9 +2461,9 @@\n    (set_attr \"length\" \"4\")])\n \n (define_insn_and_split \"<convop><mode>v64di2\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t  \"=v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\"=v\")\n \t(any_extend:V64DI\n-\t  (match_operand:VEC_ALL1REG_INT_MODE 1 \"gcn_alu_operand\" \" v\")))]\n+\t  (match_operand:V_INT_1REG 1 \"gcn_alu_operand\" \" v\")))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n@@ -2509,12 +2486,12 @@\n    (set_attr \"length\" \"12\")])\n \n (define_insn_and_split \"<convop><mode>v64di2_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t    \"=v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t     \"=v\")\n \t(vec_merge:V64DI\n \t  (any_extend:V64DI\n-\t    (match_operand:VEC_ALL1REG_INT_MODE 1 \"gcn_alu_operand\" \" v\"))\n-\t  (match_operand:V64DI 2 \"gcn_alu_or_unspec_operand\"\t    \"U0\")\n-\t  (match_operand:DI 3 \"gcn_exec_operand\"\t\t    \" e\")))]\n+\t    (match_operand:V_INT_1REG 1 \"gcn_alu_operand\"    \" v\"))\n+\t  (match_operand:V64DI 2 \"gcn_alu_or_unspec_operand\" \"U0\")\n+\t  (match_operand:DI 3 \"gcn_exec_operand\"\t     \" e\")))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n@@ -2544,16 +2521,11 @@\n ;; }}}\n ;; {{{ Vector comparison/merge\n \n-(define_mode_iterator VCMP_MODE [V64HI V64SI V64DI V64HF V64SF V64DF])\n-(define_mode_iterator VCMP_MODE_INT [V64HI V64SI V64DI])\n-\n (define_insn \"vec_cmp<mode>di\"\n   [(set (match_operand:DI 0 \"register_operand\"\t      \"=cV,cV,  e, e,Sg,Sg\")\n \t(match_operator:DI 1 \"gcn_fp_compare_operator\"\n-\t  [(match_operand:VCMP_MODE 2 \"gcn_alu_operand\"\n-\t\t\t\t\t\t      \"vSv, B,vSv, B, v,vA\")\n-\t   (match_operand:VCMP_MODE 3 \"gcn_vop3_operand\"\n-\t\t\t\t\t\t      \"  v, v,  v, v,vA, v\")]))\n+\t  [(match_operand:V_noQI 2 \"gcn_alu_operand\"  \"vSv, B,vSv, B, v,vA\")\n+\t   (match_operand:V_noQI 3 \"gcn_vop3_operand\" \"  v, v,  v, v,vA, v\")]))\n    (clobber (match_scratch:DI 4\t\t\t      \"= X, X, cV,cV, X, X\"))]\n   \"\"\n   \"@\n@@ -2569,8 +2541,8 @@\n (define_expand \"vec_cmpu<mode>di\"\n   [(match_operand:DI 0 \"register_operand\")\n    (match_operator 1 \"gcn_compare_operator\"\n-     [(match_operand:VCMP_MODE_INT 2 \"gcn_alu_operand\")\n-      (match_operand:VCMP_MODE_INT 3 \"gcn_vop3_operand\")])]\n+     [(match_operand:V_INT_noQI 2 \"gcn_alu_operand\")\n+      (match_operand:V_INT_noQI 3 \"gcn_vop3_operand\")])]\n   \"\"\n   {\n     /* Unsigned comparisons use the same patterns as signed comparisons,\n@@ -2602,10 +2574,8 @@\n   [(set (match_operand:DI 0 \"register_operand\"\t       \"=cV,cV,  e, e,Sg,Sg\")\n \t(and:DI\n \t  (match_operator 1 \"gcn_fp_compare_operator\"\n-\t    [(match_operand:VCMP_MODE 2 \"gcn_alu_operand\"\n-\t\t\t\t\t\t       \"vSv, B,vSv, B, v,vA\")\n-\t     (match_operand:VCMP_MODE 3 \"gcn_vop3_operand\"\n-\t\t\t\t\t\t       \"  v, v,  v, v,vA, v\")])\n+\t    [(match_operand:V_noQI 2 \"gcn_alu_operand\" \"vSv, B,vSv, B, v,vA\")\n+\t     (match_operand:V_noQI 3 \"gcn_vop3_operand\" \" v, v,  v, v,vA, v\")])\n \t  (match_operand:DI 4 \"gcn_exec_reg_operand\"   \"  e, e,  e, e, e, e\")))\n    (clobber (match_scratch:DI 5\t\t\t       \"= X, X, cV,cV, X, X\"))]\n   \"\"\n@@ -2622,8 +2592,8 @@\n (define_expand \"vec_cmpu<mode>di_exec\"\n   [(match_operand:DI 0 \"register_operand\")\n    (match_operator 1 \"gcn_compare_operator\"\n-     [(match_operand:VCMP_MODE_INT 2 \"gcn_alu_operand\")\n-      (match_operand:VCMP_MODE_INT 3 \"gcn_vop3_operand\")])\n+     [(match_operand:V_INT_noQI 2 \"gcn_alu_operand\")\n+      (match_operand:V_INT_noQI 3 \"gcn_vop3_operand\")])\n    (match_operand:DI 4 \"gcn_exec_reg_operand\")]\n   \"\"\n   {\n@@ -2659,10 +2629,10 @@\n (define_insn \"vec_cmp<mode>di_dup\"\n   [(set (match_operand:DI 0 \"register_operand\"\t\t   \"=cV,cV, e,e,Sg\")\n \t(match_operator:DI 1 \"gcn_fp_compare_operator\"\n-\t  [(vec_duplicate:VCMP_MODE\n+\t  [(vec_duplicate:V_noQI\n \t     (match_operand:<SCALAR_MODE> 2 \"gcn_alu_operand\"\n \t\t\t\t\t\t\t   \" Sv, B,Sv,B, A\"))\n-\t   (match_operand:VCMP_MODE 3 \"gcn_vop3_operand\"   \"  v, v, v,v, v\")]))\n+\t   (match_operand:V_noQI 3 \"gcn_vop3_operand\"\t   \"  v, v, v,v, v\")]))\n    (clobber (match_scratch:DI 4\t\t\t\t   \"= X,X,cV,cV, X\"))]\n   \"\"\n   \"@\n@@ -2678,10 +2648,10 @@\n   [(set (match_operand:DI 0 \"register_operand\"\t\t    \"=cV,cV, e,e,Sg\")\n \t(and:DI\n \t  (match_operator 1 \"gcn_fp_compare_operator\"\n-\t    [(vec_duplicate:VCMP_MODE\n+\t    [(vec_duplicate:V_noQI\n \t       (match_operand:<SCALAR_MODE> 2 \"gcn_alu_operand\"\n \t\t\t\t\t\t\t    \" Sv, B,Sv,B, A\"))\n-\t     (match_operand:VCMP_MODE 3 \"gcn_vop3_operand\"  \"  v, v, v,v, v\")])\n+\t     (match_operand:V_noQI 3 \"gcn_vop3_operand\"\t    \"  v, v, v,v, v\")])\n \t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t    \"  e, e, e,e, e\")))\n    (clobber (match_scratch:DI 5\t\t\t\t    \"= X,X,cV,cV, X\"))]\n   \"\"\n@@ -2696,81 +2666,81 @@\n \n (define_expand \"vcond_mask_<mode>di\"\n   [(parallel\n-    [(set (match_operand:VEC_ALLREG_MODE 0   \"register_operand\" \"\")\n-\t  (vec_merge:VEC_ALLREG_MODE\n-\t    (match_operand:VEC_ALLREG_MODE 1 \"gcn_vop3_operand\" \"\")\n-\t    (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\" \"\")\n+    [(set (match_operand:V_ALL 0   \"register_operand\" \"\")\n+\t  (vec_merge:V_ALL\n+\t    (match_operand:V_ALL 1 \"gcn_vop3_operand\" \"\")\n+\t    (match_operand:V_ALL 2 \"gcn_alu_operand\" \"\")\n \t    (match_operand:DI 3\t\t     \"register_operand\" \"\")))\n      (clobber (scratch:V64DI))])]\n   \"\"\n   \"\")\n \n-(define_expand \"vcond<VEC_ALLREG_MODE:mode><VEC_ALLREG_ALT:mode>\"\n-  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_ALLREG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcond<V_ALL:mode><V_ALL_ALT:mode>\"\n+  [(match_operand:V_ALL 0 \"register_operand\")\n+   (match_operand:V_ALL 1 \"gcn_vop3_operand\")\n+   (match_operand:V_ALL 2 \"gcn_alu_operand\")\n    (match_operator 3 \"gcn_fp_compare_operator\"\n-     [(match_operand:VEC_ALLREG_ALT 4 \"gcn_alu_operand\")\n-      (match_operand:VEC_ALLREG_ALT 5 \"gcn_vop3_operand\")])]\n+     [(match_operand:V_ALL_ALT 4 \"gcn_alu_operand\")\n+      (match_operand:V_ALL_ALT 5 \"gcn_vop3_operand\")])]\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmp<VEC_ALLREG_ALT:mode>di\n+    emit_insn (gen_vec_cmp<V_ALL_ALT:mode>di\n \t       (tmp, operands[3], operands[4], operands[5]));\n-    emit_insn (gen_vcond_mask_<VEC_ALLREG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<V_ALL:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n-(define_expand \"vcond<VEC_ALLREG_MODE:mode><VEC_ALLREG_ALT:mode>_exec\"\n-  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_ALLREG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcond<V_ALL:mode><V_ALL_ALT:mode>_exec\"\n+  [(match_operand:V_ALL 0 \"register_operand\")\n+   (match_operand:V_ALL 1 \"gcn_vop3_operand\")\n+   (match_operand:V_ALL 2 \"gcn_alu_operand\")\n    (match_operator 3 \"gcn_fp_compare_operator\"\n-     [(match_operand:VEC_ALLREG_ALT 4 \"gcn_alu_operand\")\n-      (match_operand:VEC_ALLREG_ALT 5 \"gcn_vop3_operand\")])\n+     [(match_operand:V_ALL_ALT 4 \"gcn_alu_operand\")\n+      (match_operand:V_ALL_ALT 5 \"gcn_vop3_operand\")])\n    (match_operand:DI 6 \"gcn_exec_reg_operand\" \"e\")]\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmp<VEC_ALLREG_ALT:mode>di_exec\n+    emit_insn (gen_vec_cmp<V_ALL_ALT:mode>di_exec\n \t       (tmp, operands[3], operands[4], operands[5], operands[6]));\n-    emit_insn (gen_vcond_mask_<VEC_ALLREG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<V_ALL:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n-(define_expand \"vcondu<VEC_ALLREG_MODE:mode><VEC_ALLREG_INT_MODE:mode>\"\n-  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_ALLREG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcondu<V_ALL:mode><V_INT:mode>\"\n+  [(match_operand:V_ALL 0 \"register_operand\")\n+   (match_operand:V_ALL 1 \"gcn_vop3_operand\")\n+   (match_operand:V_ALL 2 \"gcn_alu_operand\")\n    (match_operator 3 \"gcn_fp_compare_operator\"\n-     [(match_operand:VEC_ALLREG_INT_MODE 4 \"gcn_alu_operand\")\n-      (match_operand:VEC_ALLREG_INT_MODE 5 \"gcn_vop3_operand\")])]\n+     [(match_operand:V_INT 4 \"gcn_alu_operand\")\n+      (match_operand:V_INT 5 \"gcn_vop3_operand\")])]\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmpu<VEC_ALLREG_INT_MODE:mode>di\n+    emit_insn (gen_vec_cmpu<V_INT:mode>di\n \t       (tmp, operands[3], operands[4], operands[5]));\n-    emit_insn (gen_vcond_mask_<VEC_ALLREG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<V_ALL:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n-(define_expand \"vcondu<VEC_ALLREG_MODE:mode><VEC_ALLREG_INT_MODE:mode>_exec\"\n-  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_ALLREG_MODE 1 \"gcn_vop3_operand\")\n-   (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\")\n+(define_expand \"vcondu<V_ALL:mode><V_INT:mode>_exec\"\n+  [(match_operand:V_ALL 0 \"register_operand\")\n+   (match_operand:V_ALL 1 \"gcn_vop3_operand\")\n+   (match_operand:V_ALL 2 \"gcn_alu_operand\")\n    (match_operator 3 \"gcn_fp_compare_operator\"\n-     [(match_operand:VEC_ALLREG_INT_MODE 4 \"gcn_alu_operand\")\n-      (match_operand:VEC_ALLREG_INT_MODE 5 \"gcn_vop3_operand\")])\n+     [(match_operand:V_INT 4 \"gcn_alu_operand\")\n+      (match_operand:V_INT 5 \"gcn_vop3_operand\")])\n    (match_operand:DI 6 \"gcn_exec_reg_operand\" \"e\")]\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmpu<VEC_ALLREG_INT_MODE:mode>di_exec\n+    emit_insn (gen_vec_cmpu<V_INT:mode>di_exec\n \t       (tmp, operands[3], operands[4], operands[5], operands[6]));\n-    emit_insn (gen_vcond_mask_<VEC_ALLREG_MODE:mode>di\n+    emit_insn (gen_vcond_mask_<V_ALL:mode>di\n \t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n@@ -2810,8 +2780,8 @@\n   })\n \n (define_expand \"maskload<mode>di\"\n-  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n-   (match_operand:VEC_ALLREG_MODE 1 \"memory_operand\")\n+  [(match_operand:V_ALL 0 \"register_operand\")\n+   (match_operand:V_ALL 1 \"memory_operand\")\n    (match_operand 2 \"\")]\n   \"\"\n   {\n@@ -2830,8 +2800,8 @@\n   })\n \n (define_expand \"maskstore<mode>di\"\n-  [(match_operand:VEC_ALLREG_MODE 0 \"memory_operand\")\n-   (match_operand:VEC_ALLREG_MODE 1 \"register_operand\")\n+  [(match_operand:V_ALL 0 \"memory_operand\")\n+   (match_operand:V_ALL 1 \"register_operand\")\n    (match_operand 2 \"\")]\n   \"\"\n   {\n@@ -2845,7 +2815,7 @@\n   })\n \n (define_expand \"mask_gather_load<mode>v64si\"\n-  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n+  [(match_operand:V_ALL 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")\n    (match_operand:V64SI 2 \"register_operand\")\n    (match_operand 3 \"immediate_operand\")\n@@ -2880,7 +2850,7 @@\n    (match_operand:V64SI 1 \"register_operand\")\n    (match_operand 2 \"immediate_operand\")\n    (match_operand:SI 3 \"gcn_alu_operand\")\n-   (match_operand:VEC_ALLREG_MODE 4 \"register_operand\")\n+   (match_operand:V_ALL 4 \"register_operand\")\n    (match_operand:DI 5 \"\")]\n   \"\"\n   {\n@@ -2906,12 +2876,12 @@\n (define_code_iterator cond_op [plus minus mult])\n \n (define_expand \"cond_<expander><mode>\"\n-  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n+  [(match_operand:V_ALL 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")\n-   (cond_op:VEC_ALLREG_MODE\n-     (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\")\n-     (match_operand:VEC_ALLREG_MODE 3 \"gcn_alu_operand\"))\n-   (match_operand:VEC_ALLREG_MODE 4 \"register_operand\")]\n+   (cond_op:V_ALL\n+     (match_operand:V_ALL 2 \"gcn_alu_operand\")\n+     (match_operand:V_ALL 3 \"gcn_alu_operand\"))\n+   (match_operand:V_ALL 4 \"register_operand\")]\n   \"\"\n   {\n     operands[1] = force_reg (DImode, operands[1]);\n@@ -2927,12 +2897,12 @@\n (define_code_iterator cond_bitop [and ior xor])\n \n (define_expand \"cond_<expander><mode>\"\n-  [(match_operand:VEC_ALLREG_INT_MODE 0 \"register_operand\")\n+  [(match_operand:V_INT 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")\n-   (cond_bitop:VEC_ALLREG_INT_MODE\n-     (match_operand:VEC_ALLREG_INT_MODE 2 \"gcn_alu_operand\")\n-     (match_operand:VEC_ALLREG_INT_MODE 3 \"gcn_alu_operand\"))\n-   (match_operand:VEC_ALLREG_INT_MODE 4 \"register_operand\")]\n+   (cond_bitop:V_INT\n+     (match_operand:V_INT 2 \"gcn_alu_operand\")\n+     (match_operand:V_INT 3 \"gcn_alu_operand\"))\n+   (match_operand:V_INT 4 \"register_operand\")]\n   \"\"\n   {\n     operands[1] = force_reg (DImode, operands[1]);\n@@ -2988,7 +2958,7 @@\n (define_expand \"reduc_<reduc_op>_scal_<mode>\"\n   [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\")\n \t(unspec:<SCALAR_MODE>\n-\t  [(match_operand:VEC_ALLREG_MODE 1 \"register_operand\")]\n+\t  [(match_operand:V_ALL 1 \"register_operand\")]\n \t  REDUC_UNSPEC))]\n   \"\"\n   {\n@@ -3003,11 +2973,11 @@\n \n \n (define_insn \"*<reduc_op>_dpp_shr_<mode>\"\n-  [(set (match_operand:VEC_ALL1REG_MODE 0 \"register_operand\"   \"=v\")\n-\t(unspec:VEC_ALL1REG_MODE\n-\t  [(match_operand:VEC_ALL1REG_MODE 1 \"register_operand\" \"v\")\n-\t   (match_operand:VEC_ALL1REG_MODE 2 \"register_operand\" \"v\")\n-\t   (match_operand:SI 3 \"const_int_operand\"\t\t\"n\")]\n+  [(set (match_operand:V_1REG 0 \"register_operand\"   \"=v\")\n+\t(unspec:V_1REG\n+\t  [(match_operand:V_1REG 1 \"register_operand\" \"v\")\n+\t   (match_operand:V_1REG 2 \"register_operand\" \"v\")\n+\t   (match_operand:SI 3 \"const_int_operand\"    \"n\")]\n \t  REDUC_UNSPEC))]\n   ; GCN3 requires a carry out, GCN5 not\n   \"!(TARGET_GCN3 && SCALAR_INT_MODE_P (<SCALAR_MODE>mode)\n@@ -3049,11 +3019,11 @@\n ; Special cases for addition.\n \n (define_insn \"*plus_carry_dpp_shr_<mode>\"\n-  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\"   \"=v\")\n-\t(unspec:VEC_ALL1REG_INT_MODE\n-\t  [(match_operand:VEC_ALL1REG_INT_MODE 1 \"register_operand\" \"v\")\n-\t   (match_operand:VEC_ALL1REG_INT_MODE 2 \"register_operand\" \"v\")\n-\t   (match_operand:SI 3 \"const_int_operand\"\t\t    \"n\")]\n+  [(set (match_operand:V_INT_1REG 0 \"register_operand\"   \"=v\")\n+\t(unspec:V_INT_1REG\n+\t  [(match_operand:V_INT_1REG 1 \"register_operand\" \"v\")\n+\t   (match_operand:V_INT_1REG 2 \"register_operand\" \"v\")\n+\t   (match_operand:SI 3 \"const_int_operand\"\t  \"n\")]\n \t  UNSPEC_PLUS_CARRY_DPP_SHR))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n@@ -3117,9 +3087,9 @@\n \n ; Instructions to move a scalar value from lane 63 of a vector register.\n (define_insn \"mov_from_lane63_<mode>\"\n-  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\"\t\"=Sg,v\")\n+  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\" \"=Sg,v\")\n \t(unspec:<SCALAR_MODE>\n-\t  [(match_operand:VEC_ALL1REG_MODE 1 \"register_operand\" \"v,v\")]\n+\t  [(match_operand:V_1REG 1 \"register_operand\"\t  \"  v,v\")]\n \t  UNSPEC_MOV_FROM_LANE63))]\n   \"\"\n   \"@\n@@ -3130,9 +3100,9 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"mov_from_lane63_<mode>\"\n-  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\"  \"=Sg,v\")\n+  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\" \"=Sg,v\")\n \t(unspec:<SCALAR_MODE>\n-\t  [(match_operand:VEC_2REG_MODE 1 \"register_operand\" \"v,v\")]\n+\t  [(match_operand:V_2REG 1 \"register_operand\"\t  \"  v,v\")]\n \t  UNSPEC_MOV_FROM_LANE63))]\n   \"\"\n   \"@"}, {"sha": "702ba55c11a2d31f4e40cce5977872bde2e4272e", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038769535a8cbdd3dd3e100bde3140df52f868c5/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038769535a8cbdd3dd3e100bde3140df52f868c5/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=038769535a8cbdd3dd3e100bde3140df52f868c5", "patch": "@@ -299,6 +299,8 @@\n (define_mode_iterator SISF [SI SF])\n (define_mode_iterator QIHI [QI HI])\n (define_mode_iterator DIDF [DI DF])\n+(define_mode_iterator FP [HF SF DF])\n+(define_mode_iterator FP_1REG [HF SF])\n \n ;; }}}\n ;; {{{ Attributes."}]}