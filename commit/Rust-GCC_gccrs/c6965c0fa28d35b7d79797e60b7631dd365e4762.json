{"sha": "c6965c0fa28d35b7d79797e60b7631dd365e4762", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY5NjVjMGZhMjhkMzViN2Q3OTc5N2U2MGI3NjMxZGQzNjVlNDc2Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-27T22:47:38Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-27T22:47:38Z"}, "message": "(nonzero_bits): Fix reversed test for when we need to insert extra bits when sizes differ.\n\n(nonzero_bits): Fix reversed test for when we need to insert extra bits when\nsizes differ.\n(nonzero_bits, case EQ): Always return STORE_FLAG_VALUE when returning integer\nmode; remove now-redundant test.\n\nFrom-SVN: r5221", "tree": {"sha": "a4519065638e6e566364a4fd403cf59275c6ecc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4519065638e6e566364a4fd403cf59275c6ecc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6965c0fa28d35b7d79797e60b7631dd365e4762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6965c0fa28d35b7d79797e60b7631dd365e4762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6965c0fa28d35b7d79797e60b7631dd365e4762", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6965c0fa28d35b7d79797e60b7631dd365e4762/comments", "author": null, "committer": null, "parents": [{"sha": "561260fe8008a156728f311e04d3c0fff1caef53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561260fe8008a156728f311e04d3c0fff1caef53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561260fe8008a156728f311e04d3c0fff1caef53"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "777cce41b40645152f3dbe3d6528e9c6f5df2aaf", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6965c0fa28d35b7d79797e60b7631dd365e4762/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6965c0fa28d35b7d79797e60b7631dd365e4762/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c6965c0fa28d35b7d79797e60b7631dd365e4762", "patch": "@@ -6381,7 +6381,7 @@ nonzero_bits (x, mode)\n     return nonzero;\n \n #ifndef BYTE_LOADS_EXTEND\n-  /* If X is wider than MODE, but both are a single word for both the host\n+  /* If MODE is wider than X, but both are a single word for both the host\n      and target machines, we can compute this from which bits of the \n      object might be nonzero in its own mode, taking into account the fact\n      that on many CISC machines, accessing an object in a wider mode\n@@ -6391,7 +6391,7 @@ nonzero_bits (x, mode)\n   if (GET_MODE (x) != VOIDmode && GET_MODE (x) != mode\n       && GET_MODE_BITSIZE (GET_MODE (x)) <= BITS_PER_WORD\n       && GET_MODE_BITSIZE (GET_MODE (x)) <= HOST_BITS_PER_WIDE_INT\n-      && GET_MODE_BITSIZE (mode) < GET_MODE_BITSIZE (GET_MODE (x)))\n+      && GET_MODE_BITSIZE (mode) > GET_MODE_BITSIZE (GET_MODE (x)))\n     {\n       nonzero &= nonzero_bits (x, GET_MODE (x));\n       nonzero |= GET_MODE_MASK (mode) & ~ GET_MODE_MASK (GET_MODE (x));\n@@ -6485,22 +6485,20 @@ nonzero_bits (x, mode)\n       break;\n #endif\n \n-#if STORE_FLAG_VALUE == 1\n     case EQ:  case NE:\n     case GT:  case GTU:\n     case LT:  case LTU:\n     case GE:  case GEU:\n     case LE:  case LEU:\n \n-      if (GET_MODE_CLASS (mode) == MODE_INT)\n-\tnonzero = 1;\n+      /* If this produces an integer result, we know which bits are set.\n+\t Code here used to clear bits outside the mode of X, but that is\n+\t now done above.  */\n \n-      /* A comparison operation only sets the bits given by its mode.  The\n-\t rest are set undefined.  */\n-      if (GET_MODE_SIZE (GET_MODE (x)) < mode_width)\n-\tnonzero |= (GET_MODE_MASK (mode) & ~ GET_MODE_MASK (GET_MODE (x)));\n+      if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  && mode_width <= HOST_BITS_PER_WIDE_INT)\n+\tnonzero = STORE_FLAG_VALUE;\n       break;\n-#endif\n \n     case NEG:\n       if (num_sign_bit_copies (XEXP (x, 0), GET_MODE (x))"}]}