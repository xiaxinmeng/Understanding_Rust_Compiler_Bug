{"sha": "be591d00ed6cf8ac13850d5490749651acf10139", "node_id": "C_kwDOANBUbNoAKGJlNTkxZDAwZWQ2Y2Y4YWMxMzg1MGQ1NDkwNzQ5NjUxYWNmMTAxMzk", "commit": {"author": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-11-17T09:08:36Z"}, "committer": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-11-28T02:38:02Z"}, "message": "LoongArch: Optimize immediate load.\n\nThe immediate number is split in the Split pass, not in the expand pass.\n\nBecause loop2_invariant pass will extract the instructions that do not change\nin the loop out of the loop, some instructions will not meet the extraction\nconditions if the machine performs immediate decomposition while expand pass,\nso the immediate decomposition will be transferred to the split process.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.cc (enum loongarch_load_imm_method):\n\tRemove the member METHOD_INSV that is not currently used.\n\t(struct loongarch_integer_op): Define a new member curr_value,\n\tthat records the value of the number stored in the destination\n\tregister immediately after the current instruction has run.\n\t(loongarch_build_integer): Assign a value to the curr_value member variable.\n\t(loongarch_move_integer): Adds information for the immediate load instruction.\n\t* config/loongarch/loongarch.md (*movdi_32bit): Redefine as define_insn_and_split.\n\t(*movdi_64bit): Likewise.\n\t(*movsi_internal): Likewise.\n\t(*movhi_internal): Likewise.\n\t* config/loongarch/predicates.md: Return true as long as it is CONST_INT, ensure\n\tthat the immediate number is not optimized by decomposition during expand\n\toptimization loop.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/imm-load.c: New test.\n\t* gcc.target/loongarch/imm-load1.c: New test.", "tree": {"sha": "19a0c705f4224595bb40e7b0712fab1d965d9dda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a0c705f4224595bb40e7b0712fab1d965d9dda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be591d00ed6cf8ac13850d5490749651acf10139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be591d00ed6cf8ac13850d5490749651acf10139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be591d00ed6cf8ac13850d5490749651acf10139", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be591d00ed6cf8ac13850d5490749651acf10139/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1ecc5600464f6a62faab246d522b6328badda90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ecc5600464f6a62faab246d522b6328badda90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ecc5600464f6a62faab246d522b6328badda90"}], "stats": {"total": 144, "additions": 110, "deletions": 34}, "files": [{"sha": "9e0d6c7c3eadf1fc4719e6611b3b4198fbe0bdfb", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be591d00ed6cf8ac13850d5490749651acf10139/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be591d00ed6cf8ac13850d5490749651acf10139/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=be591d00ed6cf8ac13850d5490749651acf10139", "patch": "@@ -139,22 +139,21 @@ struct loongarch_address_info\n \n    METHOD_LU52I:\n      Load 52-63 bit of the immediate number.\n-\n-   METHOD_INSV:\n-     immediate like 0xfff00000fffffxxx\n-   */\n+*/\n enum loongarch_load_imm_method\n {\n   METHOD_NORMAL,\n   METHOD_LU32I,\n-  METHOD_LU52I,\n-  METHOD_INSV\n+  METHOD_LU52I\n };\n \n struct loongarch_integer_op\n {\n   enum rtx_code code;\n   HOST_WIDE_INT value;\n+  /* Represent the result of the immediate count of the load instruction at\n+     each step.  */\n+  HOST_WIDE_INT curr_value;\n   enum loongarch_load_imm_method method;\n };\n \n@@ -1475,24 +1474,27 @@ loongarch_build_integer (struct loongarch_integer_op *codes,\n     {\n       /* The value of the lower 32 bit be loaded with one instruction.\n \t lu12i.w.  */\n-      codes[0].code = UNKNOWN;\n-      codes[0].method = METHOD_NORMAL;\n-      codes[0].value = low_part;\n+      codes[cost].code = UNKNOWN;\n+      codes[cost].method = METHOD_NORMAL;\n+      codes[cost].value = low_part;\n+      codes[cost].curr_value = low_part;\n       cost++;\n     }\n   else\n     {\n       /* lu12i.w + ior.  */\n-      codes[0].code = UNKNOWN;\n-      codes[0].method = METHOD_NORMAL;\n-      codes[0].value = low_part & ~(IMM_REACH - 1);\n+      codes[cost].code = UNKNOWN;\n+      codes[cost].method = METHOD_NORMAL;\n+      codes[cost].value = low_part & ~(IMM_REACH - 1);\n+      codes[cost].curr_value = codes[cost].value;\n       cost++;\n       HOST_WIDE_INT iorv = low_part & (IMM_REACH - 1);\n       if (iorv != 0)\n \t{\n-\t  codes[1].code = IOR;\n-\t  codes[1].method = METHOD_NORMAL;\n-\t  codes[1].value = iorv;\n+\t  codes[cost].code = IOR;\n+\t  codes[cost].method = METHOD_NORMAL;\n+\t  codes[cost].value = iorv;\n+\t  codes[cost].curr_value = low_part;\n \t  cost++;\n \t}\n     }\n@@ -1515,11 +1517,14 @@ loongarch_build_integer (struct loongarch_integer_op *codes,\n \t{\n \t  codes[cost].method = METHOD_LU52I;\n \t  codes[cost].value = value & LU52I_B;\n+\t  codes[cost].curr_value = value;\n \t  return cost + 1;\n \t}\n \n       codes[cost].method = METHOD_LU32I;\n       codes[cost].value = (value & LU32I_B) | (sign51 ? LU52I_B : 0);\n+      codes[cost].curr_value = (value & 0xfffffffffffff)\n+\t| (sign51 ? LU52I_B : 0);\n       cost++;\n \n       /* Determine whether the 52-61 bits are sign-extended from the low order,\n@@ -1528,6 +1533,7 @@ loongarch_build_integer (struct loongarch_integer_op *codes,\n \t{\n \t  codes[cost].method = METHOD_LU52I;\n \t  codes[cost].value = value & LU52I_B;\n+\t  codes[cost].curr_value = value;\n \t  cost++;\n \t}\n     }\n@@ -2911,29 +2917,27 @@ loongarch_move_integer (rtx temp, rtx dest, unsigned HOST_WIDE_INT value)\n       else\n \tx = force_reg (mode, x);\n \n+      set_unique_reg_note (get_last_insn (), REG_EQUAL,\n+\t\t\t   GEN_INT (codes[i-1].curr_value));\n+\n       switch (codes[i].method)\n \t{\n \tcase METHOD_NORMAL:\n \t  x = gen_rtx_fmt_ee (codes[i].code, mode, x,\n \t\t\t      GEN_INT (codes[i].value));\n \t  break;\n \tcase METHOD_LU32I:\n-\t  emit_insn (\n-\t    gen_rtx_SET (x,\n-\t\t\t gen_rtx_IOR (DImode,\n-\t\t\t\t      gen_rtx_ZERO_EXTEND (\n-\t\t\t\t\tDImode, gen_rtx_SUBREG (SImode, x, 0)),\n-\t\t\t\t      GEN_INT (codes[i].value))));\n+\t  gcc_assert (mode == DImode);\n+\t  x = gen_rtx_IOR (DImode,\n+\t\t\t   gen_rtx_ZERO_EXTEND (DImode,\n+\t\t\t\t\t\tgen_rtx_SUBREG (SImode, x, 0)),\n+\t\t\t   GEN_INT (codes[i].value));\n \t  break;\n \tcase METHOD_LU52I:\n-\t  emit_insn (gen_lu52i_d (x, x, GEN_INT (0xfffffffffffff),\n-\t\t\t\t  GEN_INT (codes[i].value)));\n-\t  break;\n-\tcase METHOD_INSV:\n-\t  emit_insn (\n-\t    gen_rtx_SET (gen_rtx_ZERO_EXTRACT (DImode, x, GEN_INT (20),\n-\t\t\t\t\t       GEN_INT (32)),\n-\t\t\t gen_rtx_REG (DImode, 0)));\n+\t  gcc_assert (mode == DImode);\n+\t  x = gen_rtx_IOR (DImode,\n+\t\t\t   gen_rtx_AND (DImode, x, GEN_INT (0xfffffffffffff)),\n+\t\t\t   GEN_INT (codes[i].value));\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();"}, {"sha": "f61db66d5359b1ffcefba6eab9cdad1dd4bc2dff", "filename": "gcc/config/loongarch/loongarch.md", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be591d00ed6cf8ac13850d5490749651acf10139/gcc%2Fconfig%2Floongarch%2Floongarch.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be591d00ed6cf8ac13850d5490749651acf10139/gcc%2Fconfig%2Floongarch%2Floongarch.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.md?ref=be591d00ed6cf8ac13850d5490749651acf10139", "patch": "@@ -1718,23 +1718,41 @@\n     DONE;\n })\n \n-(define_insn \"*movdi_32bit\"\n+(define_insn_and_split \"*movdi_32bit\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,w,*f,*f,*r,*m\")\n        (match_operand:DI 1 \"move_operand\" \"r,i,w,r,*J*r,*m,*f,*f\"))]\n   \"!TARGET_64BIT\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n   { return loongarch_output_move (operands[0], operands[1]); }\n+  \"CONST_INT_P (operands[1]) && REG_P (operands[0]) && GP_REG_P (REGNO\n+  (operands[0]))\"\n+  [(const_int 0)]\n+  \"\n+{\n+  loongarch_move_integer (operands[0], operands[0], INTVAL (operands[1]));\n+  DONE;\n+}\n+  \"\n   [(set_attr \"move_type\" \"move,const,load,store,mgtf,fpload,mftg,fpstore\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*movdi_64bit\"\n+(define_insn_and_split \"*movdi_64bit\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,w,*f,*f,*r,*m\")\n \t(match_operand:DI 1 \"move_operand\" \"r,Yd,w,rJ,*r*J,*m,*f,*f\"))]\n   \"TARGET_64BIT\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n   { return loongarch_output_move (operands[0], operands[1]); }\n+  \"CONST_INT_P (operands[1]) && REG_P (operands[0]) && GP_REG_P (REGNO\n+  (operands[0]))\"\n+  [(const_int 0)]\n+  \"\n+{\n+  loongarch_move_integer (operands[0], operands[0], INTVAL (operands[1]));\n+  DONE;\n+}\n+  \"\n   [(set_attr \"move_type\" \"move,const,load,store,mgtf,fpload,mftg,fpstore\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -1749,12 +1767,21 @@\n     DONE;\n })\n \n-(define_insn \"*movsi_internal\"\n+(define_insn_and_split \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,w,*f,*f,*r,*m,*r,*z\")\n \t(match_operand:SI 1 \"move_operand\" \"r,Yd,w,rJ,*r*J,*m,*f,*f,*z,*r\"))]\n   \"(register_operand (operands[0], SImode)\n     || reg_or_0_operand (operands[1], SImode))\"\n   { return loongarch_output_move (operands[0], operands[1]); }\n+  \"CONST_INT_P (operands[1]) && REG_P (operands[0]) && GP_REG_P (REGNO\n+  (operands[0]))\"\n+  [(const_int 0)]\n+  \"\n+{\n+  loongarch_move_integer (operands[0], operands[0], INTVAL (operands[1]));\n+  DONE;\n+}\n+  \"\n   [(set_attr \"move_type\" \"move,const,load,store,mgtf,fpload,mftg,fpstore,mftg,mgtf\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -1774,12 +1801,21 @@\n     DONE;\n })\n \n-(define_insn \"*movhi_internal\"\n+(define_insn_and_split \"*movhi_internal\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,r,k\")\n \t(match_operand:HI 1 \"move_operand\" \"r,Yd,I,m,rJ,k,rJ\"))]\n   \"(register_operand (operands[0], HImode)\n        || reg_or_0_operand (operands[1], HImode))\"\n   { return loongarch_output_move (operands[0], operands[1]); }\n+  \"CONST_INT_P (operands[1]) && REG_P (operands[0]) && GP_REG_P (REGNO\n+  (operands[0]))\"\n+  [(const_int 0)]\n+  \"\n+{\n+  loongarch_move_integer (operands[0], operands[0], INTVAL (operands[1]));\n+  DONE;\n+}\n+  \"\n   [(set_attr \"move_type\" \"move,const,const,load,store,load,store\")\n    (set_attr \"mode\" \"HI\")])\n "}, {"sha": "58c3dc2261c94b29187559667de09cd766dbcf3c", "filename": "gcc/config/loongarch/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be591d00ed6cf8ac13850d5490749651acf10139/gcc%2Fconfig%2Floongarch%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be591d00ed6cf8ac13850d5490749651acf10139/gcc%2Fconfig%2Floongarch%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fpredicates.md?ref=be591d00ed6cf8ac13850d5490749651acf10139", "patch": "@@ -226,7 +226,7 @@\n   switch (GET_CODE (op))\n     {\n     case CONST_INT:\n-      return !splittable_const_int_operand (op, mode);\n+      return true;\n \n     case CONST:\n     case SYMBOL_REF:"}, {"sha": "c04ca33996f00a0a540f6daad6a317c7183fa1c0", "filename": "gcc/testsuite/gcc.target/loongarch/imm-load.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be591d00ed6cf8ac13850d5490749651acf10139/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fimm-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be591d00ed6cf8ac13850d5490749651acf10139/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fimm-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fimm-load.c?ref=be591d00ed6cf8ac13850d5490749651acf10139", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O2 -fdump-rtl-split1\" } */\n+\n+long int\n+test (void)\n+{\n+  return 0x1234567890abcdef;\n+}\n+/* { dg-final { scan-rtl-dump-times \"scanning new insn with uid\" 6 \"split1\" } } */\n+"}, {"sha": "2ff029712391f90132ec80a0b48300a2751d12e7", "filename": "gcc/testsuite/gcc.target/loongarch/imm-load1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be591d00ed6cf8ac13850d5490749651acf10139/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fimm-load1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be591d00ed6cf8ac13850d5490749651acf10139/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fimm-load1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fimm-load1.c?ref=be591d00ed6cf8ac13850d5490749651acf10139", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O2\" } */\n+/* { dg-final { scan-assembler \"test:.*lu52i\\.d.*\\n\\taddi\\.w.*\\n\\.L2:\" } } */\n+\n+\n+extern long long b[10];\n+static inline long long\n+repeat_bytes (void)\n+{\n+  long long r = 0x0101010101010101;\n+\n+  return r;\n+}\n+\n+static inline long long\n+highbit_mask (long long m)\n+{\n+  return m & repeat_bytes ();\n+}\n+\n+void test(long long *a)\n+{\n+  for (int i = 0; i < 10; i++)\n+    b[i] = highbit_mask (a[i]);\n+\n+}"}]}