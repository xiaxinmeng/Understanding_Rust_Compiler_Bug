{"sha": "4164579308306672bbc5c1b8f6261d2cae352320", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2NDU3OTMwODMwNjY3MmJiYzVjMWI4ZjYyNjFkMmNhZTM1MjMyMA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T23:06:22Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T23:06:22Z"}, "message": "trans-array.h (gfc_trans_create_temp_array): Remove loop argument.\n\n\t* trans-array.h (gfc_trans_create_temp_array): Remove loop argument.\n\t* trans-array.c (gfc_trans_create_temp_array): Ditto.  Get loop from ss.\n\tUpdate reference to loop.  Remove loop argument.\n\t(gfc_trans_array_constructor, gfc_conv_loop_setup): Update calls to\n\tgfc_trans_create_temp_array.\n\t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Ditto.\n\t* trans-stmt.c (gfc_conv_elemental_dependencies): Ditto.\n\tSet loop before calling gfc_trans_create_temp_array.\n\nFrom-SVN: r180888", "tree": {"sha": "51c3fe31f362d2c9861287758a54438d290a3b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51c3fe31f362d2c9861287758a54438d290a3b4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4164579308306672bbc5c1b8f6261d2cae352320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4164579308306672bbc5c1b8f6261d2cae352320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4164579308306672bbc5c1b8f6261d2cae352320", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4164579308306672bbc5c1b8f6261d2cae352320/comments", "author": null, "committer": null, "parents": [{"sha": "d35335e315c101657e9d735142ceff0daf6325fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d35335e315c101657e9d735142ceff0daf6325fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d35335e315c101657e9d735142ceff0daf6325fc"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "ce4e619b77833351e5c85d929222d3ee1b46ca0e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4164579308306672bbc5c1b8f6261d2cae352320", "patch": "@@ -1,3 +1,15 @@\n+2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-array.h (gfc_trans_create_temp_array): Remove loop argument.\n+\t* trans-array.c (gfc_trans_create_temp_array): Ditto.  Get loop from ss.\n+\tUpdate reference to loop.  Remove loop argument.\n+\t(gfc_trans_array_constructor, gfc_conv_loop_setup): Update calls to\n+\tgfc_trans_create_temp_array.\n+\t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Ditto.\n+\t* trans-stmt.c (gfc_conv_elemental_dependencies): Ditto.\n+\tSet loop before calling gfc_trans_create_temp_array.\n+\n 2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-array.c (gfc_trans_create_temp_array): New variable total_dim."}, {"sha": "d386a228a0e4a4b97fa6f71c477340ecee2ebd52", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=4164579308306672bbc5c1b8f6261d2cae352320", "patch": "@@ -888,15 +888,14 @@ get_array_ref_dim (gfc_ss *ss, int loop_dim)\n    callee allocated array.\n \n    PRE, POST, INITIAL, DYNAMIC and DEALLOC are as for\n-   gfc_trans_allocate_array_storage.\n- */\n+   gfc_trans_allocate_array_storage.  */\n \n tree\n-gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n-\t\t\t     gfc_loopinfo * loop, gfc_ss * ss,\n+gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post, gfc_ss * ss,\n \t\t\t     tree eltype, tree initial, bool dynamic,\n \t\t\t     bool dealloc, bool callee_alloc, locus * where)\n {\n+  gfc_loopinfo *loop;\n   gfc_array_info *info;\n   tree from[GFC_MAX_DIMENSIONS], to[GFC_MAX_DIMENSIONS];\n   tree type;\n@@ -915,11 +914,12 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n   info = &ss->info->data.array;\n \n   gcc_assert (ss->dimen > 0);\n-  gcc_assert (loop->dimen == ss->dimen);\n+  gcc_assert (ss->loop->dimen == ss->dimen);\n \n   if (gfc_option.warn_array_temp && where)\n     gfc_warning (\"Creating array temporary at %L\", where);\n \n+  loop = ss->loop;\n   total_dim = loop->dimen;\n   /* Set the lower bound to zero.  */\n   for (n = 0; n < loop->dimen; n++)\n@@ -1065,8 +1065,8 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n   gfc_trans_allocate_array_storage (pre, post, info, size, nelem, initial,\n \t\t\t\t    dynamic, dealloc);\n \n-  if (ss->dimen > loop->temp_dim)\n-    loop->temp_dim = ss->dimen;\n+  if (ss->dimen > ss->loop->temp_dim)\n+    ss->loop->temp_dim = ss->dimen;\n \n   return size;\n }\n@@ -2113,8 +2113,8 @@ trans_array_constructor (gfc_ss * ss, locus * where)\n   if (TREE_CODE (loop->to[0]) == VAR_DECL)\n     dynamic = true;\n \n-  gfc_trans_create_temp_array (&loop->pre, &loop->post, loop, ss,\n-\t\t\t       type, NULL_TREE, dynamic, true, false, where);\n+  gfc_trans_create_temp_array (&loop->pre, &loop->post, ss, type, NULL_TREE,\n+\t\t\t       dynamic, true, false, where);\n \n   desc = ss_info->data.array.descriptor;\n   offset = gfc_index_zero_node;\n@@ -4211,9 +4211,8 @@ gfc_conv_loop_setup (gfc_loopinfo * loop, locus * where)\n \n       gcc_assert (tmp_ss->dimen != 0);\n \n-      gfc_trans_create_temp_array (&loop->pre, &loop->post, loop,\n-\t\t\t\t   tmp_ss, tmp, NULL_TREE,\n-\t\t\t\t   false, true, false, where);\n+      gfc_trans_create_temp_array (&loop->pre, &loop->post, tmp_ss, tmp,\n+\t\t\t\t   NULL_TREE, false, true, false, where);\n     }\n \n   /* For array parameters we don't have loop variables, so don't calculate the"}, {"sha": "aad8c47b6f13ea6ba5ab17c677d44e26ce0aee60", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=4164579308306672bbc5c1b8f6261d2cae352320", "patch": "@@ -31,9 +31,8 @@ void gfc_set_loop_bounds_from_array_spec (gfc_interface_mapping *,\n \t\t\t\t\t  gfc_se *, gfc_array_spec *);\n \n /* Generate code to create a temporary array.  */\n-tree gfc_trans_create_temp_array (stmtblock_t *, stmtblock_t *, gfc_loopinfo *,\n-\t\t\t\t  gfc_ss *, tree, tree, bool, bool, bool,\n-\t\t\t\t  locus *);\n+tree gfc_trans_create_temp_array (stmtblock_t *, stmtblock_t *, gfc_ss *,\n+\t\t\t\t  tree, tree, bool, bool, bool, locus *);\n \n /* Generate function entry code for allocation of compiler allocated array\n    variables.  */"}, {"sha": "e091c89d6962b5fca7febb268ce16e2f7a2a7118", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=4164579308306672bbc5c1b8f6261d2cae352320", "patch": "@@ -3606,7 +3606,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t     returns a pointer, the temporary will be a shallow copy and\n \t     mustn't be deallocated.  */\n \t  callee_alloc = comp->attr.allocatable || comp->attr.pointer;\n-\t  gfc_trans_create_temp_array (&se->pre, &se->post, se->loop, se->ss,\n+\t  gfc_trans_create_temp_array (&se->pre, &se->post, se->ss,\n \t\t\t\t       tmp, NULL_TREE, false,\n \t\t\t\t       !comp->attr.pointer, callee_alloc,\n \t\t\t\t       &se->ss->info->expr->where);\n@@ -3642,7 +3642,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t     returns a pointer, the temporary will be a shallow copy and\n \t     mustn't be deallocated.  */\n \t  callee_alloc = sym->attr.allocatable || sym->attr.pointer;\n-\t  gfc_trans_create_temp_array (&se->pre, &se->post, se->loop, se->ss,\n+\t  gfc_trans_create_temp_array (&se->pre, &se->post, se->ss,\n \t\t\t\t       tmp, NULL_TREE, false,\n \t\t\t\t       !sym->attr.pointer, callee_alloc,\n \t\t\t\t       &se->ss->info->expr->where);"}, {"sha": "c3a414b789b1ffa9b65c4af99b734af11e88f67e", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=4164579308306672bbc5c1b8f6261d2cae352320", "patch": "@@ -5501,9 +5501,8 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n \n   /* Build a destination descriptor, using the pointer, source, as the\n      data field.  */\n-  gfc_trans_create_temp_array (&se->pre, &se->post, se->loop,\n-\t\t\t       se->ss, mold_type, NULL_TREE, false, true, false,\n-\t\t\t       &expr->where);\n+  gfc_trans_create_temp_array (&se->pre, &se->post, se->ss, mold_type,\n+\t\t\t       NULL_TREE, false, true, false, &expr->where);\n \n   /* Cast the pointer to the result.  */\n   tmp = gfc_conv_descriptor_data_get (info->descriptor);"}, {"sha": "2e023207e0eede6cdcc0239c072dce85b9d5218a", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4164579308306672bbc5c1b8f6261d2cae352320/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=4164579308306672bbc5c1b8f6261d2cae352320", "patch": "@@ -309,11 +309,10 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n \t  size = gfc_create_var (gfc_array_index_type, NULL);\n \t  data = gfc_create_var (pvoid_type_node, NULL);\n \t  gfc_init_block (&temp_post);\n-\t  tmp = gfc_trans_create_temp_array (&se->pre, &temp_post,\n-\t\t\t\t\t     &tmp_loop, ss, temptype,\n-\t\t\t\t\t     initial,\n-\t\t\t\t\t     false, true, false,\n-\t\t\t\t\t     &arg->expr->where);\n+\t  ss->loop = &tmp_loop;\n+\t  tmp = gfc_trans_create_temp_array (&se->pre, &temp_post, ss,\n+\t\t\t\t\t     temptype, initial, false, true,\n+\t\t\t\t\t     false, &arg->expr->where);\n \t  gfc_add_modify (&se->pre, size, tmp);\n \t  tmp = fold_convert (pvoid_type_node, info->data);\n \t  gfc_add_modify (&se->pre, data, tmp);"}]}