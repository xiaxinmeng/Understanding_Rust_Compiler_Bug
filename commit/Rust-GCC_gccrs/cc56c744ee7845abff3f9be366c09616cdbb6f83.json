{"sha": "cc56c744ee7845abff3f9be366c09616cdbb6f83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M1NmM3NDRlZTc4NDVhYmZmM2Y5YmUzNjZjMDk2MTZjZGJiNmY4Mw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-03-31T18:59:56Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-03-31T18:59:56Z"}, "message": "* libiberty.h (alloca): Handle setting C_ALLOCA.\n\nFrom-SVN: r40978", "tree": {"sha": "68ea74209b9d94ef6a9ffafe09d4fb89a5bfce2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68ea74209b9d94ef6a9ffafe09d4fb89a5bfce2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc56c744ee7845abff3f9be366c09616cdbb6f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc56c744ee7845abff3f9be366c09616cdbb6f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc56c744ee7845abff3f9be366c09616cdbb6f83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc56c744ee7845abff3f9be366c09616cdbb6f83/comments", "author": null, "committer": null, "parents": [{"sha": "7656d28aed3bb0d61a9eff78a43475f47e53376f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7656d28aed3bb0d61a9eff78a43475f47e53376f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7656d28aed3bb0d61a9eff78a43475f47e53376f"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "93342812d6b806486a0a059f149c318f578d7c10", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc56c744ee7845abff3f9be366c09616cdbb6f83/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc56c744ee7845abff3f9be366c09616cdbb6f83/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=cc56c744ee7845abff3f9be366c09616cdbb6f83", "patch": "@@ -1,3 +1,7 @@\n+2001-03-31  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libiberty.h (alloca): Handle setting C_ALLOCA.\n+\n 2001-03-20  Jim Blandy  <jimb@redhat.com>\n \n \t* demangle.h (enum gnu_v3_constructor_kinds,"}, {"sha": "effe5f628cc2c919ff971a8412383748e8f28125", "filename": "include/libiberty.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc56c744ee7845abff3f9be366c09616cdbb6f83/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc56c744ee7845abff3f9be366c09616cdbb6f83/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=cc56c744ee7845abff3f9be366c09616cdbb6f83", "patch": "@@ -238,15 +238,20 @@ extern int vasprintf PARAMS ((char **, const char *, va_list))\n /* Drastically simplified alloca configurator.  If we're using GCC,\n    we use __builtin_alloca; otherwise we use the C alloca.  The C\n    alloca is always available.  You can override GCC by defining\n-   USE_C_ALLOCA yourself.  */\n+   USE_C_ALLOCA yourself.  The canonical autoconf macro C_ALLOCA is\n+   also set/unset as it is often used to indicate whether code needs\n+   to call alloca(0).  */\n extern PTR C_alloca PARAMS((size_t));\n #undef alloca\n #if GCC_VERSION >= 2000 && !defined USE_C_ALLOCA\n # define alloca(x) __builtin_alloca(x)\n+# undef C_ALLOCA\n #else\n # define alloca(x) C_alloca(x)\n # undef USE_C_ALLOCA\n # define USE_C_ALLOCA 1\n+# undef C_ALLOCA\n+# define C_ALLOCA 1\n #endif\n \n #ifdef __cplusplus"}]}