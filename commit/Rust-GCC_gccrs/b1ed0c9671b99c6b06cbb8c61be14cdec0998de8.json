{"sha": "b1ed0c9671b99c6b06cbb8c61be14cdec0998de8", "node_id": "C_kwDOANBUbNoAKGIxZWQwYzk2NzFiOTljNmIwNmNiYjhjNjFiZTE0Y2RlYzA5OThkZTg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-09T08:31:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-09T08:31:55Z"}, "message": "c++: Mangle EXCESS_PRECISION_EXPR <REAL_CST> as fold_convert REAL_CST [PR108698]\n\nFor standard excess precision, like the C FE we parse floating\npoint constants as EXCESS_PRECISION_EXPR of promoted REAL_CST\nrather than the nominal REAL_CST, and as the following testcase\nshows the constants might need mangling.\n\nThe following patch mangles those as fold_convert of the REAL_CST\nto EXCESS_PRECISION_EXPR type, i.e. how they were mangled before.\n\nI'm not really sure EXCESS_PRECISION_EXPR can appear elsewhere\nin expressions that would need mangling, tried various testcases\nbut haven't managed to come up with one.  If that is possible,\nwe'd keep ICEing on it without/with this patch, and the big question\nis how to mangle those; they could be mangled as casts from the\npromoted type back to nominal, but then in the mangled expressions\none could see the effects of excess precision.  Until we have\na reproducer, that is just theoretical though.\n\n2023-02-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/108698\n\t* mangle.cc (write_expression, write_template_arg): Handle\n\tEXCESS_PRECISION_EXPR with REAL_CST operand as\n\twrite_template_arg_literal on fold_convert of the REAL_CST\n\tto EXCESS_PRECISION_EXPR type.\n\n\t* g++.dg/cpp0x/pr108698.C: New test.", "tree": {"sha": "7a46c33514034237e89ba76bafdc03a36e961840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a46c33514034237e89ba76bafdc03a36e961840"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1ed0c9671b99c6b06cbb8c61be14cdec0998de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ed0c9671b99c6b06cbb8c61be14cdec0998de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1ed0c9671b99c6b06cbb8c61be14cdec0998de8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ed0c9671b99c6b06cbb8c61be14cdec0998de8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b19ff1b5ef684c2d9ccd4fb275aeef0a4b0b980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b19ff1b5ef684c2d9ccd4fb275aeef0a4b0b980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b19ff1b5ef684c2d9ccd4fb275aeef0a4b0b980"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "f2761d22bba02889d35b9218c95ae0b014680003", "filename": "gcc/cp/mangle.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ed0c9671b99c6b06cbb8c61be14cdec0998de8/gcc%2Fcp%2Fmangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ed0c9671b99c6b06cbb8c61be14cdec0998de8/gcc%2Fcp%2Fmangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.cc?ref=b1ed0c9671b99c6b06cbb8c61be14cdec0998de8", "patch": "@@ -3107,6 +3107,10 @@ write_expression (tree expr)\n   else if (TREE_CODE_CLASS (code) == tcc_constant\n \t   || code == CONST_DECL)\n     write_template_arg_literal (expr);\n+  else if (code == EXCESS_PRECISION_EXPR\n+\t   && TREE_CODE (TREE_OPERAND (expr, 0)) == REAL_CST)\n+    write_template_arg_literal (fold_convert (TREE_TYPE (expr),\n+\t\t\t\t\t      TREE_OPERAND (expr, 0)));\n   else if (code == PARM_DECL && DECL_ARTIFICIAL (expr))\n     {\n       gcc_assert (id_equal (DECL_NAME (expr), \"this\"));\n@@ -3815,6 +3819,10 @@ write_template_arg (tree node)\n \t   || code == CONST_DECL\n \t   || null_member_pointer_value_p (node))\n     write_template_arg_literal (node);\n+  else if (code == EXCESS_PRECISION_EXPR\n+\t   && TREE_CODE (TREE_OPERAND (node, 0)) == REAL_CST)\n+    write_template_arg_literal (fold_convert (TREE_TYPE (node),\n+\t\t\t\t\t      TREE_OPERAND (node, 0)));\n   else if (DECL_P (node))\n     {\n       write_char ('L');"}, {"sha": "30fd8cff943e2e86af7c6e97cb12b0103e9c87af", "filename": "gcc/testsuite/g++.dg/cpp0x/pr108698.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ed0c9671b99c6b06cbb8c61be14cdec0998de8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr108698.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ed0c9671b99c6b06cbb8c61be14cdec0998de8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr108698.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr108698.C?ref=b1ed0c9671b99c6b06cbb8c61be14cdec0998de8", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/108698\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+decltype (T () * T () + 1.0) foo ()\n+{\n+  return T () * T () + 1.0;\n+}\n+\n+void\n+bar ()\n+{\n+  foo <float> ();\n+  foo <double> ();\n+  foo <long double> ();\n+}"}]}