{"sha": "375c3b863cfa30db17df0259a423ade00961c974", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1YzNiODYzY2ZhMzBkYjE3ZGYwMjU5YTQyM2FkZTAwOTYxYzk3NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-11-20T14:09:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-11-20T14:09:27Z"}, "message": "re PR lto/87997 (ICE in cp_var_mod_type_p at gcc/cp/cp-objcp-common.c:107 since r265870)\n\n\n\tPR lto/87997\n\t* tree.c (free_lang_data_in_cgraph): Add argument fld; break out\n\ttype checking to...\n\t(free_lang_data) ... here; update call of free_lang_data_in_cgraph.\n\nFrom-SVN: r266316", "tree": {"sha": "01ea04cf57eb05dac491fd59b2b0d328f93e3a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01ea04cf57eb05dac491fd59b2b0d328f93e3a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/375c3b863cfa30db17df0259a423ade00961c974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375c3b863cfa30db17df0259a423ade00961c974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/375c3b863cfa30db17df0259a423ade00961c974", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375c3b863cfa30db17df0259a423ade00961c974/comments", "author": null, "committer": null, "parents": [{"sha": "12485662c00914ed132d950f1329fdaf32c11a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12485662c00914ed132d950f1329fdaf32c11a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12485662c00914ed132d950f1329fdaf32c11a3c"}], "stats": {"total": 78, "additions": 62, "deletions": 16}, "files": [{"sha": "042075e628b6eaa22a71fe598beeadf610669ed9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375c3b863cfa30db17df0259a423ade00961c974/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375c3b863cfa30db17df0259a423ade00961c974/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=375c3b863cfa30db17df0259a423ade00961c974", "patch": "@@ -1,3 +1,10 @@\n+2018-11-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/87997\n+\t* tree.c (free_lang_data_in_cgraph): Add argument fld; break out\n+\ttype checking to...\n+\t(free_lang_data) ... here; update call of free_lang_data_in_cgraph.\n+\n 2018-11-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/87706"}, {"sha": "23e22eb20a38fc3cab4464a267b9f8351b30536a", "filename": "gcc/testsuite/g++.dg/torture/pr87997.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375c3b863cfa30db17df0259a423ade00961c974/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr87997.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375c3b863cfa30db17df0259a423ade00961c974/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr87997.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr87997.C?ref=375c3b863cfa30db17df0259a423ade00961c974", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+template <typename, typename> struct a;\n+template <template <typename> class b, typename c, typename f, typename... d>\n+struct a<b<f, d...>, c> {\n+  using e = b<c>;\n+};\n+template <typename f> class h {\n+public:\n+  typedef f g;\n+};\n+template <typename j, typename c> using k = typename a<j, c>::e;\n+template <typename j> struct l { template <typename f> using m = k<j, f>; };\n+template <typename j> struct n {\n+  typedef typename j::g o;\n+  template <typename f> struct p {\n+    typedef typename l<j>::template m<f> other;\n+  };\n+};\n+template <typename f, typename j> struct F {\n+  typedef typename n<j>::template p<f>::other q;\n+};\n+template <typename f, typename j = h<f>> class r {\n+public:\n+  typename n<typename F<f, j>::q>::o operator[](long);\n+  f *t() noexcept;\n+};\n+class s {\n+  void m_fn2();\n+  r<int (s::*)()> u;\n+};\n+void s::m_fn2() try {\n+  for (int i;;)\n+    (this->*u[i])();\n+} catch (...) {\n+}"}, {"sha": "a9720e5b5be8bc7d66deab027fc2e293b3706738", "filename": "gcc/tree.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375c3b863cfa30db17df0259a423ade00961c974/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375c3b863cfa30db17df0259a423ade00961c974/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=375c3b863cfa30db17df0259a423ade00961c974", "patch": "@@ -6021,44 +6021,38 @@ assign_assembler_name_if_needed (tree t)\n    been set up.  */\n \n static void\n-free_lang_data_in_cgraph (void)\n+free_lang_data_in_cgraph (struct free_lang_data_d *fld)\n {\n   struct cgraph_node *n;\n   varpool_node *v;\n-  struct free_lang_data_d fld;\n   tree t;\n   unsigned i;\n   alias_pair *p;\n \n   /* Find decls and types in the body of every function in the callgraph.  */\n   FOR_EACH_FUNCTION (n)\n-    find_decls_types_in_node (n, &fld);\n+    find_decls_types_in_node (n, fld);\n \n   FOR_EACH_VEC_SAFE_ELT (alias_pairs, i, p)\n-    find_decls_types (p->decl, &fld);\n+    find_decls_types (p->decl, fld);\n \n   /* Find decls and types in every varpool symbol.  */\n   FOR_EACH_VARIABLE (v)\n-    find_decls_types_in_var (v, &fld);\n+    find_decls_types_in_var (v, fld);\n \n   /* Set the assembler name on every decl found.  We need to do this\n      now because free_lang_data_in_decl will invalidate data needed\n      for mangling.  This breaks mangling on interdependent decls.  */\n-  FOR_EACH_VEC_ELT (fld.decls, i, t)\n+  FOR_EACH_VEC_ELT (fld->decls, i, t)\n     assign_assembler_name_if_needed (t);\n \n   /* Traverse every decl found freeing its language data.  */\n-  FOR_EACH_VEC_ELT (fld.decls, i, t)\n-    free_lang_data_in_decl (t, &fld);\n+  FOR_EACH_VEC_ELT (fld->decls, i, t)\n+    free_lang_data_in_decl (t, fld);\n \n   /* Traverse every type found freeing its language data.  */\n-  FOR_EACH_VEC_ELT (fld.types, i, t)\n-    free_lang_data_in_type (t, &fld);\n-  if (flag_checking)\n-    {\n-      FOR_EACH_VEC_ELT (fld.types, i, t)\n-\tverify_type (t);\n-    }\n+  FOR_EACH_VEC_ELT (fld->types, i, t)\n+    free_lang_data_in_type (t, fld);\n }\n \n \n@@ -6068,6 +6062,7 @@ static unsigned\n free_lang_data (void)\n {\n   unsigned i;\n+  struct free_lang_data_d fld;\n \n   /* If we are the LTO frontend we have freed lang-specific data already.  */\n   if (in_lto_p\n@@ -6088,7 +6083,7 @@ free_lang_data (void)\n \n   /* Traverse the IL resetting language specific information for\n      operands, expressions, etc.  */\n-  free_lang_data_in_cgraph ();\n+  free_lang_data_in_cgraph (&fld);\n \n   /* Create gimple variants for common types.  */\n   for (unsigned i = 0;\n@@ -6109,6 +6104,15 @@ free_lang_data (void)\n \n   lang_hooks.tree_inlining.var_mod_type_p = hook_bool_tree_tree_false;\n \n+  if (flag_checking)\n+    {\n+      int i;\n+      tree t;\n+\n+      FOR_EACH_VEC_ELT (fld.types, i, t)\n+\tverify_type (t);\n+    }\n+\n   /* We do not want the default decl_assembler_name implementation,\n      rather if we have fixed everything we want a wrapper around it\n      asserting that all non-local symbols already got their assembler"}]}