{"sha": "eb98bd16ce5ada9df54e4340b8cbf86b45d385f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI5OGJkMTZjZTVhZGE5ZGY1NGU0MzQwYjhjYmY4NmI0NWQzODVmMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-03-31T18:24:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-03-31T18:24:13Z"}, "message": "std_streambuf.h (_M_out_buf_size()): Remove.\n\n2003-03-31  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/std/std_streambuf.h (_M_out_buf_size()): Remove.\n\t* include/bits/fstream.tcc (_M_allocate_internal_buffer):\n\tDon't set _M_out_end.\n\t(basic_filebuf::overflow): Replace _M_out_buf_size() with\n\tthis->_M_out_cur && this->_M_out_cur < this->_M_out_end.\n\t* include/bits/sstream.tcc (basic_stringbuf::overflow):\n\tReplace _M_out_buf_size() with this->_M_out_cur < this->_M_out_end;\n\t* include/bits/streambuf.tcc (basic_streambuf::sputc):\n\tReplace _M_out_buf_size() with _M_out_cur && _M_out_cur < _M_out_end.\n\t(basic_streambuf::xsputn): Replace _M_out_buf_size() with\n\t_M_out_end - _M_out_cur.\n\t(__copy_streambufs): Likewise.\n\t* include/std/std_fstream.h (_M_set_determinate): Set\n\t_M_out_end here.\n\nFrom-SVN: r65093", "tree": {"sha": "73484defd3a0008256a22e753fae73b6b37914c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73484defd3a0008256a22e753fae73b6b37914c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/comments", "author": null, "committer": null, "parents": [{"sha": "c8ae788f59f209e7015fdf6c5933fcb8ef558700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ae788f59f209e7015fdf6c5933fcb8ef558700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8ae788f59f209e7015fdf6c5933fcb8ef558700"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "833755a8f38450b3574c01576e8752e05c482d9b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eb98bd16ce5ada9df54e4340b8cbf86b45d385f2", "patch": "@@ -1,3 +1,20 @@\n+2003-03-31  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/std/std_streambuf.h (_M_out_buf_size()): Remove.\n+\t* include/bits/fstream.tcc (_M_allocate_internal_buffer):\n+\tDon't set _M_out_end.\n+\t(basic_filebuf::overflow): Replace _M_out_buf_size() with\n+\tthis->_M_out_cur && this->_M_out_cur < this->_M_out_end.\n+\t* include/bits/sstream.tcc (basic_stringbuf::overflow):\n+\tReplace _M_out_buf_size() with this->_M_out_cur < this->_M_out_end;\n+\t* include/bits/streambuf.tcc (basic_streambuf::sputc):\n+\tReplace _M_out_buf_size() with _M_out_cur && _M_out_cur < _M_out_end.\n+\t(basic_streambuf::xsputn): Replace _M_out_buf_size() with\n+\t_M_out_end - _M_out_cur.\n+\t(__copy_streambufs): Likewise.\n+\t* include/std/std_fstream.h (_M_set_determinate): Set\n+\t_M_out_end here.\n+\t\n 2003-03-30  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/fstream.tcc (basic_filebuf::showmanyc,"}, {"sha": "64f5d1d7703356167f435ac46f4e9e188b5bba97", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=eb98bd16ce5ada9df54e4340b8cbf86b45d385f2", "patch": "@@ -48,10 +48,8 @@ namespace std\n \t{\n \t  this->_M_buf_size = this->_M_buf_size_opt;\n \n-\t  // Allocate internal buffer...\n+\t  // Allocate internal buffer.\n \t  this->_M_buf = new char_type[this->_M_buf_size];\n-\t  // ... and consistently set the end of buffer pointer.\n-\t  this->_M_out_end = this->_M_buf + this->_M_buf_size;\n \t  _M_buf_allocated = true;\n \t}\n     }\n@@ -255,7 +253,8 @@ namespace std\n     overflow(int_type __c)\n     {\n       int_type __ret = traits_type::eof();\n-      bool __testput = _M_out_buf_size();\n+      bool __testput =\n+\tthis->_M_out_cur && this->_M_out_cur < this->_M_out_end;\n       bool __testout = this->_M_mode & ios_base::out;\n       \n       if (__testout)"}, {"sha": "991cb13ef98250a36fb83641a230f92836c486fd", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=eb98bd16ce5ada9df54e4340b8cbf86b45d385f2", "patch": "@@ -92,7 +92,7 @@ namespace std\n       __size_type __len =\n \tstd::max(_M_string.capacity() + 1, this->_M_buf_size_opt);\n \n-      bool __testwrite = _M_out_buf_size();\n+      bool __testwrite = this->_M_out_cur < this->_M_out_end;\n       if (__builtin_expect(!__testwrite && __len > _M_string.max_size(), false))\n \treturn traits_type::eof();\n "}, {"sha": "47fc4ece18440cc30e9e970768a6e7e59b76af7a", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=eb98bd16ce5ada9df54e4340b8cbf86b45d385f2", "patch": "@@ -99,7 +99,7 @@ namespace std\n     sputc(char_type __c)\n     {\n       int_type __ret;\n-      if (_M_out_buf_size())\n+      if (_M_out_cur && _M_out_cur < _M_out_end)\n \t{\n \t  *_M_out_cur = __c;\n \t  _M_out_cur_move(1);\n@@ -152,7 +152,7 @@ namespace std\n       streamsize __ret = 0;\n       while (__ret < __n)\n \t{\n-\t  off_type __buf_len = _M_out_buf_size();\n+\t  off_type __buf_len = _M_out_end - _M_out_cur;\n \t  if (__buf_len > 0)\n \t    {\n \t      off_type __remaining = __n - __ret;\n@@ -189,11 +189,12 @@ namespace std\n \t\t      basic_streambuf<_CharT, _Traits>* __sbout) \n   {\n       typedef typename _Traits::int_type\tint_type;\n+      typedef typename _Traits::off_type\toff_type;\n \n       streamsize __ret = 0;\n       streamsize __bufsize = __sbin->in_avail();\n       streamsize __xtrct;\n-      const typename _Traits::off_type __size_opt =\n+      const off_type __size_opt =\n \t__sbin->_M_buf_size_opt > 0 ? __sbin->_M_buf_size_opt : 1;\n \n       try \n@@ -213,7 +214,8 @@ namespace std\n \t\t{\n \t\t  streamsize __charsread;\n \t\t  const streamsize __size =\n-\t\t    std::min(__size_opt, __sbout->_M_out_buf_size());\n+\t\t    std::min(__size_opt, off_type(__sbout->_M_out_end -\n+\t\t\t\t\t\t  __sbout->_M_out_cur));\n \t\t  if (__size > 1)\n \t\t    {\n \t\t      _CharT* __buf ="}, {"sha": "c5e34808d16a8b7ee3004e44e86e3a9b88b8218c", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=eb98bd16ce5ada9df54e4340b8cbf86b45d385f2", "patch": "@@ -409,13 +409,10 @@ namespace std\n \tbool __testin = this->_M_mode & ios_base::in;\n \tbool __testout = this->_M_mode & ios_base::out;\n \tif (__testin)\n-\t  {\n-\t    this->_M_in_beg = this->_M_in_cur = this->_M_buf;\n-\t    this->_M_in_end = this->_M_buf + __off;\n-\t  }\n+\t  this->setg(this->_M_buf, this->_M_buf, this->_M_buf + __off);\n \tif (__testout)\n \t  {\n-\t    this->_M_out_beg = this->_M_out_cur = this->_M_buf;\n+\t    this->setp(this->_M_buf, this->_M_buf + this->_M_buf_size);\n \t    this->_M_out_lim = this->_M_buf + __off;\n \t  }\n \t_M_filepos = this->_M_buf + __off;"}, {"sha": "10687d2975198fb1900705f85e608a9ebd27160d", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb98bd16ce5ada9df54e4340b8cbf86b45d385f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=eb98bd16ce5ada9df54e4340b8cbf86b45d385f2", "patch": "@@ -333,16 +333,6 @@ namespace std\n \t  }\n       }\n \n-      // Returns zero if the output buffer is full (-> overflow).\n-      off_type\n-      _M_out_buf_size()\n-      {\n-\tif (_M_out_cur)\n-\t  return _M_out_end - _M_out_cur;\n-\telse\n-\t  return off_type(0);\n-      }\n-\n   public:\n       /// Destructor deallocates no buffer space.\n       virtual "}]}