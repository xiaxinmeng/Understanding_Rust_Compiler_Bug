{"sha": "5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1ZmJiNTUwYWY3ZDlkNmNiNTZhZThmNjA3ZmVhMGVjY2FhOTI5NQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-12T07:24:27Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-12T07:27:57Z"}, "message": "PR tree-optimization/101403: Incorrect folding of ((T)bswap(x))>>C\n\nMy sincere apologies for the breakage.  My recent patch to fold\nbswapN(x)>>C where the constant C was large enough that the result\nonly contains bits from the low byte, and can therefore avoid\nthe byte swap contains a minor logic error.  The pattern contains\na convert? allowing an extension to occur between the bswap and\nthe shift.  The logic is correct if there's no extension, or the\nextension has the same sign as the shift, but I'd mistakenly\nconvinced myself that these couldn't have different signedness.\n\n(T)bswap16(x)>>12 is (T)((unsigned char)x>>4) or (T)((signed char)x>>4).\nThe bug is that for zero-extensions to signed type T, we need to use\nthe unsigned char variant [the signedness of the byte shift is not\n(always) the same as the signedness of T and the original shift].\n\nThen because I'm now paranoid, I've also added a clause to handle\nthe hypothetical (but in practice impossible) sign-extension to an\nunsigned type T, which can implemented as (T)(x<<8)>>12.\n\n2021-07-12  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR tree-optimization/101403\n\t* match.pd ((T)bswap(X)>>C): Correctly handle cases where\n\tsignedness of the shift is not the same as the signedness of\n\tthe type extension.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/101403\n\t* gcc.dg/pr101403.c: New test case.", "tree": {"sha": "8b92e6fbc3230412e2950effaa2fa31386d39f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b92e6fbc3230412e2950effaa2fa31386d39f7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d55eee24a9f5e04d2b71e98b77347924a3cebd05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55eee24a9f5e04d2b71e98b77347924a3cebd05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d55eee24a9f5e04d2b71e98b77347924a3cebd05"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "beb8d27535eb318d1c4bb4e18c8216ec5ca60893", "filename": "gcc/match.pd", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295", "patch": "@@ -3659,19 +3659,31 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      {\n       unsigned HOST_WIDE_INT prec = TYPE_PRECISION (TREE_TYPE (@2));\n       unsigned HOST_WIDE_INT bits = tree_to_uhwi (@1);\n+      /* If the bswap was extended before the original shift, this\n+\t byte (shift) has the sign of the extension, not the sign of\n+\t the original shift.  */\n+      tree st = TYPE_PRECISION (type) > prec ? TREE_TYPE (@2) : type;\n      }\n-     (if (bits + 8 == prec)\n-      (if (TYPE_UNSIGNED (type))\n-       (convert (convert:unsigned_char_type_node @0))\n-       (convert (convert:signed_char_type_node @0)))\n-      (if (bits < prec && bits + 8 > prec)\n-       (with \n-\t{\n-\t tree nst = build_int_cst (integer_type_node, bits & 7);\n-\t tree bt = TYPE_UNSIGNED (type) ? unsigned_char_type_node\n-\t\t\t\t\t: signed_char_type_node;\n-\t}\n-\t(convert (rshift:bt (convert:bt @0) {nst;}))))))))\n+     /* Special case: logical right shift of sign-extended bswap.\n+\t(unsigned)(short)bswap16(x)>>12 is (unsigned)((short)x<<8)>>12. */\n+     (if (TYPE_PRECISION (type) > prec\n+\t  && !TYPE_UNSIGNED (TREE_TYPE (@2))\n+\t  && TYPE_UNSIGNED (type)\n+\t  && bits < prec && bits + 8 >= prec)\n+      (with { tree nst = build_int_cst (integer_type_node, prec - 8); }\n+       (rshift (convert (lshift:st (convert:st @0) {nst;})) @1))\n+      (if (bits + 8 == prec)\n+       (if (TYPE_UNSIGNED (st))\n+\t(convert (convert:unsigned_char_type_node @0))\n+\t(convert (convert:signed_char_type_node @0)))\n+       (if (bits < prec && bits + 8 > prec)\n+\t(with \n+\t {\n+\t  tree nst = build_int_cst (integer_type_node, bits & 7);\n+\t  tree bt = TYPE_UNSIGNED (st) ? unsigned_char_type_node\n+\t\t\t\t       : signed_char_type_node;\n+\t }\n+\t (convert (rshift:bt (convert:bt @0) {nst;})))))))))\n  /* bswap(x) & C1 can sometimes be simplified to (x >> C2) & C1.  */\n  (simplify\n   (bit_and (convert? (bswap@2 @0)) INTEGER_CST@1)"}, {"sha": "ac5fa7944dc290e1b6ebb16bfecc2153b93d2e58", "filename": "gcc/testsuite/gcc.dg/pr101403.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101403.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101403.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101403.c?ref=5f5fbb550af7d9d6cb56ae8f607fea0eccaa9295", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+unsigned int foo (unsigned int a)\n+{\n+  unsigned int u;\n+  unsigned short b = __builtin_bswap16 (a);\n+  return b >> (u, 12);\n+}\n+\n+int main (void)\n+{\n+  unsigned int x = foo (0x80);\n+  if (x != 0x0008)\n+    __builtin_abort ();\n+  return 0;\n+}\n+"}]}