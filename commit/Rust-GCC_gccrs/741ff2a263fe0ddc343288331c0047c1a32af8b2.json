{"sha": "741ff2a263fe0ddc343288331c0047c1a32af8b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQxZmYyYTI2M2ZlMGRkYzM0MzI4ODMzMWMwMDQ3YzFhMzJhZjhiMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-17T09:43:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-17T09:43:46Z"}, "message": "strlen: Punt on UB reads past end of string literal [PR94187]\n\nThe gcc.dg/pr68785.c test which contains:\nint\nfoo (void)\n{\n  return *(int *) \"\";\n}\nhas UB in the program if it is ever called, but causes UB in the compiler\nas well as at least in theory non-reproduceable code generation.\nThe problem is that nbytes is in this case 4, prep is the\nTREE_STRING_POINTER of a \"\" string literal with TREE_STRING_LENGTH of 1 and\nwe do:\n4890              for (const char *p = prep; p != prep + nbytes; ++p)\n4891                if (*p)\n4892                  {\n4893                    *allnul = false;\n4894                    break;\n4895                  }\nand so read the bytes after the STRING_CST payload, which can be random.\nI think we should just punt in this case.\n\n2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94187\n\t* tree-ssa-strlen.c (count_nonzero_bytes): Punt if\n\tnchars - offset < nbytes.", "tree": {"sha": "5f23860deb1fa9ac97df7afceeefdfb065f5cfd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f23860deb1fa9ac97df7afceeefdfb065f5cfd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/741ff2a263fe0ddc343288331c0047c1a32af8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741ff2a263fe0ddc343288331c0047c1a32af8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/741ff2a263fe0ddc343288331c0047c1a32af8b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741ff2a263fe0ddc343288331c0047c1a32af8b2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7afa3b82918a75a486aad7818f11df9ea7504368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afa3b82918a75a486aad7818f11df9ea7504368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7afa3b82918a75a486aad7818f11df9ea7504368"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "f8105ccc67d9584894184aad0424fee9e2501fc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ff2a263fe0ddc343288331c0047c1a32af8b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ff2a263fe0ddc343288331c0047c1a32af8b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=741ff2a263fe0ddc343288331c0047c1a32af8b2", "patch": "@@ -1,5 +1,9 @@\n 2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94187\n+\t* tree-ssa-strlen.c (count_nonzero_bytes): Punt if\n+\tnchars - offset < nbytes.\n+\n \tPR middle-end/94189\n \t* builtins.c (expand_builtin_strnlen): Do return NULL_RTX if we would\n \temit a warning if it was enabled and don't depend on TREE_NO_WARNING"}, {"sha": "ec33d7c4baf2c9839cbc3b60fb8735a5b131c31b", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741ff2a263fe0ddc343288331c0047c1a32af8b2/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741ff2a263fe0ddc343288331c0047c1a32af8b2/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=741ff2a263fe0ddc343288331c0047c1a32af8b2", "patch": "@@ -4822,6 +4822,8 @@ count_nonzero_bytes (tree exp, unsigned HOST_WIDE_INT offset,\n \t   of the access), set it here to the size of the string, including\n \t   all internal and trailing nuls if the string has any.  */\n \tnbytes = nchars - offset;\n+      else if (nchars - offset < nbytes)\n+\treturn false;\n \n       prep = TREE_STRING_POINTER (exp) + offset;\n     }"}]}