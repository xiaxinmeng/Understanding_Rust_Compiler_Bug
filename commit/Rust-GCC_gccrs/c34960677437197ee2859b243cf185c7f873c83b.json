{"sha": "c34960677437197ee2859b243cf185c7f873c83b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM0OTYwNjc3NDM3MTk3ZWUyODU5YjI0M2NmMTg1YzdmODczYzgzYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-21T11:14:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-21T11:14:56Z"}, "message": "Move vector_type_mode to tree.c\n\n...so that it's possible to use TYPE_MODE in tree.h.\n\n2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* stor-layout.h (vector_type_mode): Move to...\n\t* tree.h (vector_type_mode): ...here.\n\t* stor-layout.c (vector_type_mode): Move to...\n\t* tree.c (vector_type_mode): ...here.  Include rtl.h and regs.h.\n\nFrom-SVN: r251221", "tree": {"sha": "fb7a8b55c4a33c93113444dc8e97c38e7d662cc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb7a8b55c4a33c93113444dc8e97c38e7d662cc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c34960677437197ee2859b243cf185c7f873c83b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34960677437197ee2859b243cf185c7f873c83b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34960677437197ee2859b243cf185c7f873c83b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34960677437197ee2859b243cf185c7f873c83b/comments", "author": null, "committer": null, "parents": [{"sha": "1ea85365b430b5ade1d0b824e5406c006e6ffdb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea85365b430b5ade1d0b824e5406c006e6ffdb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea85365b430b5ade1d0b824e5406c006e6ffdb7"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "eaacdca6fa92e30069f71001ce2d69422a94b8cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34960677437197ee2859b243cf185c7f873c83b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34960677437197ee2859b243cf185c7f873c83b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c34960677437197ee2859b243cf185c7f873c83b", "patch": "@@ -1,3 +1,10 @@\n+2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* stor-layout.h (vector_type_mode): Move to...\n+\t* tree.h (vector_type_mode): ...here.\n+\t* stor-layout.c (vector_type_mode): Move to...\n+\t* tree.c (vector_type_mode): ...here.  Include rtl.h and regs.h.\n+\n 2017-08-21  Richard Biener  <rguenther@suse.de>\n \n         * debug.h (struct gcc_debug_hooks): Add die_ref_for_decl and"}, {"sha": "2275bfc3df129deabc0c316e339bde832920d759", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34960677437197ee2859b243cf185c7f873c83b/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34960677437197ee2859b243cf185c7f873c83b/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=c34960677437197ee2859b243cf185c7f873c83b", "patch": "@@ -2494,45 +2494,6 @@ min_align_of_type (tree type)\n     }\n   return align / BITS_PER_UNIT;\n }\n-\n-/* Vector types need to re-check the target flags each time we report\n-   the machine mode.  We need to do this because attribute target can\n-   change the result of vector_mode_supported_p and have_regs_of_mode\n-   on a per-function basis.  Thus the TYPE_MODE of a VECTOR_TYPE can\n-   change on a per-function basis.  */\n-/* ??? Possibly a better solution is to run through all the types\n-   referenced by a function and re-compute the TYPE_MODE once, rather\n-   than make the TYPE_MODE macro call a function.  */\n-\n-machine_mode\n-vector_type_mode (const_tree t)\n-{\n-  machine_mode mode;\n-\n-  gcc_assert (TREE_CODE (t) == VECTOR_TYPE);\n-\n-  mode = t->type_common.mode;\n-  if (VECTOR_MODE_P (mode)\n-      && (!targetm.vector_mode_supported_p (mode)\n-\t  || !have_regs_of_mode[mode]))\n-    {\n-      machine_mode innermode = TREE_TYPE (t)->type_common.mode;\n-\n-      /* For integers, try mapping it to a same-sized scalar mode.  */\n-      if (GET_MODE_CLASS (innermode) == MODE_INT)\n-\t{\n-\t  mode = mode_for_size (TYPE_VECTOR_SUBPARTS (t)\n-\t\t\t\t* GET_MODE_BITSIZE (innermode), MODE_INT, 0);\n-\n-\t  if (mode != VOIDmode && have_regs_of_mode[mode])\n-\t    return mode;\n-\t}\n-\n-      return BLKmode;\n-    }\n-\n-  return mode;\n-}\n \f\n /* Create and return a type for signed integers of PRECISION bits.  */\n "}, {"sha": "08c37cabd39f64a4d6d821eb26a58111894835aa", "filename": "gcc/stor-layout.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34960677437197ee2859b243cf185c7f873c83b/gcc%2Fstor-layout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34960677437197ee2859b243cf185c7f873c83b/gcc%2Fstor-layout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.h?ref=c34960677437197ee2859b243cf185c7f873c83b", "patch": "@@ -114,7 +114,4 @@ extern void relayout_decl (tree);\n    belongs to a function parameter.  */\n extern tree variable_size (tree);\n \n-/* Vector types need to check target flags to determine type.  */\n-extern machine_mode vector_type_mode (const_tree);\n-\n #endif  // GCC_STOR_LAYOUT_H"}, {"sha": "4f56892bb85dd323389a256e5c881b7cc0fe37f9", "filename": "gcc/tree.c", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34960677437197ee2859b243cf185c7f873c83b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34960677437197ee2859b243cf185c7f873c83b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c34960677437197ee2859b243cf185c7f873c83b", "patch": "@@ -64,6 +64,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"selftest.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"rtl.h\"\n+#include \"regs.h\"\n \n /* Tree code classes.  */\n \n@@ -12610,9 +12612,47 @@ element_mode (const_tree t)\n     t = TREE_TYPE (t);\n   return TYPE_MODE (t);\n }\n- \n \n-/* Veirfy that basic properties of T match TV and thus T can be a variant of\n+/* Vector types need to re-check the target flags each time we report\n+   the machine mode.  We need to do this because attribute target can\n+   change the result of vector_mode_supported_p and have_regs_of_mode\n+   on a per-function basis.  Thus the TYPE_MODE of a VECTOR_TYPE can\n+   change on a per-function basis.  */\n+/* ??? Possibly a better solution is to run through all the types\n+   referenced by a function and re-compute the TYPE_MODE once, rather\n+   than make the TYPE_MODE macro call a function.  */\n+\n+machine_mode\n+vector_type_mode (const_tree t)\n+{\n+  machine_mode mode;\n+\n+  gcc_assert (TREE_CODE (t) == VECTOR_TYPE);\n+\n+  mode = t->type_common.mode;\n+  if (VECTOR_MODE_P (mode)\n+      && (!targetm.vector_mode_supported_p (mode)\n+\t  || !have_regs_of_mode[mode]))\n+    {\n+      machine_mode innermode = TREE_TYPE (t)->type_common.mode;\n+\n+      /* For integers, try mapping it to a same-sized scalar mode.  */\n+      if (GET_MODE_CLASS (innermode) == MODE_INT)\n+\t{\n+\t  mode = mode_for_size (TYPE_VECTOR_SUBPARTS (t)\n+\t\t\t\t* GET_MODE_BITSIZE (innermode), MODE_INT, 0);\n+\n+\t  if (mode != VOIDmode && have_regs_of_mode[mode])\n+\t    return mode;\n+\t}\n+\n+      return BLKmode;\n+    }\n+\n+  return mode;\n+}\n+\n+/* Verify that basic properties of T match TV and thus T can be a variant of\n    TV.  TV should be the more specified variant (i.e. the main variant).  */\n \n static bool"}, {"sha": "47899ce9c7eda57490813469d84e4c9a1616c698", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34960677437197ee2859b243cf185c7f873c83b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34960677437197ee2859b243cf185c7f873c83b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c34960677437197ee2859b243cf185c7f873c83b", "patch": "@@ -1852,7 +1852,8 @@ extern void protected_set_expr_location (tree, location_t);\n #define SET_TYPE_MODE(NODE, MODE) \\\n   (TYPE_CHECK (NODE)->type_common.mode = (MODE))\n \n-extern machine_mode element_mode (const_tree t);\n+extern machine_mode element_mode (const_tree);\n+extern machine_mode vector_type_mode (const_tree);\n \n /* The \"canonical\" type for this type node, which is used by frontends to\n    compare the type for equality with another type.  If two types are"}]}