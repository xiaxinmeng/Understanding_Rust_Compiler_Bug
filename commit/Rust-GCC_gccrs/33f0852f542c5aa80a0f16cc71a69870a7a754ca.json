{"sha": "33f0852f542c5aa80a0f16cc71a69870a7a754ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNmMDg1MmY1NDJjNWFhODBhMGYxNmNjNzFhNjk4NzBhN2E3NTRjYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-01-08T10:14:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-08T10:14:29Z"}, "message": "re PR tree-optimization/69162 (ICE in create_tmp_var, at gimple-expr.c:468)\n\n\tPR tree-optimization/69162\n\t* gimplify.c (gimplify_va_arg_expr): Encode original type of\n\tvalist argument in another argument.\n\t(gimplify_modify_expr): Adjust for the above change.  Cleanup.\n\t* tree-stdarg.c (expand_ifn_va_arg_1): Use new 3rd argument\n\tto determine the va_list type, build a MEM_REF instead of\n\tbuild_fold_indirect_ref.\n\n\t* gcc.dg/pr69162.c: New test.\n\nFrom-SVN: r232156", "tree": {"sha": "471897ffa0e6c19e5d2fe4317257bbfcb593fbf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/471897ffa0e6c19e5d2fe4317257bbfcb593fbf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33f0852f542c5aa80a0f16cc71a69870a7a754ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33f0852f542c5aa80a0f16cc71a69870a7a754ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33f0852f542c5aa80a0f16cc71a69870a7a754ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33f0852f542c5aa80a0f16cc71a69870a7a754ca/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22518428af7aadf1ec1f5ba957e7ac4c8e9a6acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22518428af7aadf1ec1f5ba957e7ac4c8e9a6acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22518428af7aadf1ec1f5ba957e7ac4c8e9a6acb"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "98370d65eeebf9afcd93725bb615598c1c5aa5da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33f0852f542c5aa80a0f16cc71a69870a7a754ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33f0852f542c5aa80a0f16cc71a69870a7a754ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33f0852f542c5aa80a0f16cc71a69870a7a754ca", "patch": "@@ -1,5 +1,13 @@\n 2016-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/69162\n+\t* gimplify.c (gimplify_va_arg_expr): Encode original type of\n+\tvalist argument in another argument.\n+\t(gimplify_modify_expr): Adjust for the above change.  Cleanup.\n+\t* tree-stdarg.c (expand_ifn_va_arg_1): Use new 3rd argument\n+\tto determine the va_list type, build a MEM_REF instead of\n+\tbuild_fold_indirect_ref.\n+\n \tPR tree-optimization/69172\n \t* gimple-fold.c (gimple_fold_builtin_memory_chk): Pass type to\n \tgimple_build."}, {"sha": "ca66402babac14acdeaf9af93848f09ce6f3ea31", "filename": "gcc/gimplify.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33f0852f542c5aa80a0f16cc71a69870a7a754ca/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33f0852f542c5aa80a0f16cc71a69870a7a754ca/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=33f0852f542c5aa80a0f16cc71a69870a7a754ca", "patch": "@@ -4724,12 +4724,12 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  tree type = TREE_TYPE (call);\n \t  tree ap = CALL_EXPR_ARG (call, 0);\n \t  tree tag = CALL_EXPR_ARG (call, 1);\n+\t  tree aptag = CALL_EXPR_ARG (call, 2);\n \t  tree newcall = build_call_expr_internal_loc (EXPR_LOCATION (call),\n \t\t\t\t\t\t       IFN_VA_ARG, type,\n \t\t\t\t\t\t       nargs + 1, ap, tag,\n-\t\t\t\t\t\t       vlasize);\n-\t  tree *call_p = &(TREE_OPERAND (*from_p, 0));\n-\t  *call_p = newcall;\n+\t\t\t\t\t\t       aptag, vlasize);\n+\t  TREE_OPERAND (*from_p, 0) = newcall;\n \t}\n     }\n \n@@ -11501,7 +11501,7 @@ gimplify_va_arg_expr (tree *expr_p, gimple_seq *pre_p,\n   tree promoted_type, have_va_type;\n   tree valist = TREE_OPERAND (*expr_p, 0);\n   tree type = TREE_TYPE (*expr_p);\n-  tree t, tag;\n+  tree t, tag, aptag;\n   location_t loc = EXPR_LOCATION (*expr_p);\n \n   /* Verify that valist is of the proper type.  */\n@@ -11555,7 +11555,10 @@ gimplify_va_arg_expr (tree *expr_p, gimple_seq *pre_p,\n     }\n \n   tag = build_int_cst (build_pointer_type (type), 0);\n-  *expr_p = build_call_expr_internal_loc (loc, IFN_VA_ARG, type, 2, valist, tag);\n+  aptag = build_int_cst (TREE_TYPE (valist), 0);\n+\n+  *expr_p = build_call_expr_internal_loc (loc, IFN_VA_ARG, type, 3,\n+\t\t\t\t\t  valist, tag, aptag);\n \n   /* Clear the tentatively set PROP_gimple_lva, to indicate that IFN_VA_ARG\n      needs to be expanded.  */"}, {"sha": "f455fa22096c44f3c14f18229e4124d7d795fb29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33f0852f542c5aa80a0f16cc71a69870a7a754ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33f0852f542c5aa80a0f16cc71a69870a7a754ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33f0852f542c5aa80a0f16cc71a69870a7a754ca", "patch": "@@ -1,5 +1,8 @@\n 2016-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/69162\n+\t* gcc.dg/pr69162.c: New test.\n+\n \tPR tree-optimization/69172\n \t* gcc.dg/pr69172.c: New test.\n "}, {"sha": "45644bd2fe50b6b7be1fd59393143d267fdb1766", "filename": "gcc/testsuite/gcc.dg/pr69162.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33f0852f542c5aa80a0f16cc71a69870a7a754ca/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69162.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33f0852f542c5aa80a0f16cc71a69870a7a754ca/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69162.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69162.c?ref=33f0852f542c5aa80a0f16cc71a69870a7a754ca", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/69162 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdarg.h>\n+\n+int\n+foo (void *a)\n+{\n+  va_list *b = a;\n+  return va_arg (*b, int);\n+}"}, {"sha": "13b92f05e006f1db17c9c8427add6c99041d9511", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33f0852f542c5aa80a0f16cc71a69870a7a754ca/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33f0852f542c5aa80a0f16cc71a69870a7a754ca/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=33f0852f542c5aa80a0f16cc71a69870a7a754ca", "patch": "@@ -1018,7 +1018,7 @@ expand_ifn_va_arg_1 (function *fun)\n     for (i = gsi_start_bb (bb); !gsi_end_p (i); gsi_next (&i))\n       {\n \tgimple *stmt = gsi_stmt (i);\n-\ttree ap, expr, lhs, type;\n+\ttree ap, aptype, expr, lhs, type;\n \tgimple_seq pre = NULL, post = NULL;\n \n \tif (!gimple_call_ifn_va_arg_p (stmt))\n@@ -1028,9 +1028,12 @@ expand_ifn_va_arg_1 (function *fun)\n \n \ttype = TREE_TYPE (TREE_TYPE (gimple_call_arg (stmt, 1)));\n \tap = gimple_call_arg (stmt, 0);\n+\taptype = TREE_TYPE (gimple_call_arg (stmt, 2));\n+\tgcc_assert (POINTER_TYPE_P (aptype));\n \n \t/* Balanced out the &ap, usually added by build_va_arg.  */\n-\tap = build_fold_indirect_ref (ap);\n+\tap = build2 (MEM_REF, TREE_TYPE (aptype), ap,\n+\t\t     build_int_cst (aptype, 0));\n \n \tpush_gimplify_context (false);\n \tsaved_location = input_location;\n@@ -1053,7 +1056,7 @@ expand_ifn_va_arg_1 (function *fun)\n \t    if (chkp_function_instrumented_p (fun->decl))\n \t      chkp_fixup_inlined_call (lhs, expr);\n \n-\t    if (nargs == 3)\n+\t    if (nargs == 4)\n \t      {\n \t\t/* We've transported the size of with WITH_SIZE_EXPR here as\n \t\t   the last argument of the internal fn call.  Now reinstate"}]}