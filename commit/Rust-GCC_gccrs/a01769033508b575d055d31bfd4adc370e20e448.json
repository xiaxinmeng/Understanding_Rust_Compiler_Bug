{"sha": "a01769033508b575d055d31bfd4adc370e20e448", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxNzY5MDMzNTA4YjU3NWQwNTVkMzFiZmQ0YWRjMzcwZTIwZTQ0OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2016-04-19T13:30:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-19T13:30:03Z"}, "message": "standard_and_implementation_defined_restrictions.rst, [...]: Update documentation.\n\n        * doc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n        gnat_rm.texi: Update documentation.\n\nFrom-SVN: r235205", "tree": {"sha": "a67dd1df13b84d7cade36625b75c8c3a9631f011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a67dd1df13b84d7cade36625b75c8c3a9631f011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a01769033508b575d055d31bfd4adc370e20e448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01769033508b575d055d31bfd4adc370e20e448", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01769033508b575d055d31bfd4adc370e20e448", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01769033508b575d055d31bfd4adc370e20e448/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "009c026845b2e38657c54c21a32985fab828b76c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009c026845b2e38657c54c21a32985fab828b76c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009c026845b2e38657c54c21a32985fab828b76c"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "20f7ed2a33f0d8be3354193104c20eedecf554f1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01769033508b575d055d31bfd4adc370e20e448/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01769033508b575d055d31bfd4adc370e20e448/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a01769033508b575d055d31bfd4adc370e20e448", "patch": "@@ -1,3 +1,8 @@\n+2016-04-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n+\tgnat_rm.texi: Update documentation.\n+\n 2016-04-19  Olivier Hainque  <hainque@adacore.com>\n \n \t* par_sco.adb (Traverse_One, case N_Case_Statement):"}, {"sha": "82a7544a8967d6ec3f9f38d33d5ef15c713757ba", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01769033508b575d055d31bfd4adc370e20e448/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01769033508b575d055d31bfd4adc370e20e448/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=a01769033508b575d055d31bfd4adc370e20e448", "patch": "@@ -524,19 +524,15 @@ No_Multiple_Elaboration\n -----------------------\n .. index:: No_Multiple_Elaboration\n \n-[GNAT] Normally each package contains a 16-bit counter used to check for access\n-before elaboration, and to control multiple elaboration attempts.\n-This counter is eliminated for units compiled with the static model\n-of elaboration if restriction `No_Elaboration_Code`\n-is active but because of\n-the need to check for multiple elaboration in the general case, these\n-counters cannot be eliminated if elaboration code may be present. The\n-restriction `No_Multiple_Elaboration`\n-allows suppression of these counters\n-in static elaboration units even if they do have elaboration code. If this\n-restriction is used, then the situations in which multiple elaboration is\n-possible, including non-Ada main programs, and Stand Alone libraries, are not\n-permitted, and will be diagnosed by the binder.\n+[GNAT] When this restriction is active, we are not requesting control-flow\n+preservation with -fpreserve-control-flow and the static elaboration model is\n+used, the compiler is allowed to suppress the elaboration counter normally\n+associated with the unit, even if the unit has elaboration code. This counter\n+is typically used to check for access before elaboration and to control\n+multiple elaboration attempts. If the restriction is used, then the\n+situations in which multiple elaboration is possible, including non-Ada main\n+programs and Stand Alone libraries, are not permitted and will be diagnosed\n+by the binder.\n \n No_Nested_Finalization\n ----------------------\n@@ -880,6 +876,12 @@ Note that this the implementation of this restriction requires full\n code generation. If it is used in conjunction with \"semantics only\"\n checking, then some cases of violations may be missed.\n \n+When this restriction is active, we are not requesting control-flow\n+preservation with -fpreserve-control-flow and the static elaboration model is\n+used, the compiler is allowed to suppress the elaboration counter normally\n+associated with the unit, used to check for access before elaboration and to\n+control.\n+\n No_Dynamic_Sized_Objects\n ------------------------\n .. index:: No_Dynamic_Sized_Objects"}, {"sha": "4201a56bd80138be043d700d4cce10fb2b8c275f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01769033508b575d055d31bfd4adc370e20e448/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01769033508b575d055d31bfd4adc370e20e448/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=a01769033508b575d055d31bfd4adc370e20e448", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , November 18, 2015\n+GNAT Reference Manual , April 19, 2016\n \n AdaCore\n \n@@ -12112,19 +12112,15 @@ Long_Integer'Size.\n \n @geindex No_Multiple_Elaboration\n \n-[GNAT] Normally each package contains a 16-bit counter used to check for access\n-before elaboration, and to control multiple elaboration attempts.\n-This counter is eliminated for units compiled with the static model\n-of elaboration if restriction @cite{No_Elaboration_Code}\n-is active but because of\n-the need to check for multiple elaboration in the general case, these\n-counters cannot be eliminated if elaboration code may be present. The\n-restriction @cite{No_Multiple_Elaboration}\n-allows suppression of these counters\n-in static elaboration units even if they do have elaboration code. If this\n-restriction is used, then the situations in which multiple elaboration is\n-possible, including non-Ada main programs, and Stand Alone libraries, are not\n-permitted, and will be diagnosed by the binder.\n+[GNAT] When this restriction is active, we are not requesting control-flow\n+preservation with -fpreserve-control-flow and the static elaboration model is\n+used, the compiler is allowed to suppress the elaboration counter normally\n+associated with the unit, even if the unit has elaboration code. This counter\n+is typically used to check for access before elaboration and to control\n+multiple elaboration attempts. If the restriction is used, then the\n+situations in which multiple elaboration is possible, including non-Ada main\n+programs and Stand Alone libraries, are not permitted and will be diagnosed\n+by the binder.\n \n @node No_Nested_Finalization,No_Protected_Type_Allocators,No_Multiple_Elaboration,Partition-Wide Restrictions\n @anchor{gnat_rm/standard_and_implementation_defined_restrictions no-nested-finalization}@anchor{19e}\n@@ -12602,6 +12598,12 @@ Note that this the implementation of this restriction requires full\n code generation. If it is used in conjunction with \"semantics only\"\n checking, then some cases of violations may be missed.\n \n+When this restriction is active, we are not requesting control-flow\n+preservation with -fpreserve-control-flow and the static elaboration model is\n+used, the compiler is allowed to suppress the elaboration counter normally\n+associated with the unit, used to check for access before elaboration and to\n+control.\n+\n @node No_Dynamic_Sized_Objects,No_Entry_Queue,No_Elaboration_Code,Program Unit Level Restrictions\n @anchor{gnat_rm/standard_and_implementation_defined_restrictions no-dynamic-sized-objects}@anchor{1bf}\n @subsection No_Dynamic_Sized_Objects"}]}