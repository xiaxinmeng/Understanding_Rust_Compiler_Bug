{"sha": "229752afe3156a3990dacaedb94c76846cebf132", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5NzUyYWZlMzE1NmEzOTkwZGFjYWVkYjk0Yzc2ODQ2Y2ViZjEzMg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2020-08-05T14:45:33Z"}, "committer": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2020-08-05T14:45:33Z"}, "message": "VEC_COND_EXPR optimizations\n\nWhen vector comparisons were forced to use vec_cond_expr, we lost a number of optimizations (my fault for not adding enough testcases to\nprevent that). This patch tries to unwrap vec_cond_expr a bit so some optimizations can still happen.\n\nI wasn't planning to add all those transformations together, but adding one caused a regression, whose fix introduced a second regression,\netc.\n\nRestricting to constant folding would not be sufficient, we also need at least things like X|0 or X&X. The transformations are quite\nconservative with :s and folding only if everything simplifies, we may want to relax this later. And of course we are going to miss things\nlike a?b:c + a?c:b -> b+c.\n\nIn terms of number of operations, some transformations turning 2 VEC_COND_EXPR into VEC_COND_EXPR + BIT_IOR_EXPR + BIT_NOT_EXPR might not look\nlike a gain... I expect the bit_not disappears in most cases, and VEC_COND_EXPR looks more costly than a simpler BIT_IOR_EXPR.\n\n2020-08-05  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/95906\n\tPR target/70314\n\t* match.pd ((c ? a : b) op d, (c ? a : b) op (c ? d : e),\n\t(v ? w : 0) ? a : b, c1 ? c2 ? a : b : b): New transformations.\n\t(op (c ? a : b)): Update to match the new transformations.\n\n\t* gcc.dg/tree-ssa/andnot-2.c: New file.\n\t* gcc.dg/tree-ssa/pr95906.c: Likewise.\n\t* gcc.target/i386/pr70314.c: Likewise.", "tree": {"sha": "a0e9d74627c6fbfe083b2f8df55a1acaa5538030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0e9d74627c6fbfe083b2f8df55a1acaa5538030"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/229752afe3156a3990dacaedb94c76846cebf132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229752afe3156a3990dacaedb94c76846cebf132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/229752afe3156a3990dacaedb94c76846cebf132", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229752afe3156a3990dacaedb94c76846cebf132/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1a26429038d7cd17abc53f96a6f3e2639b605f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1a26429038d7cd17abc53f96a6f3e2639b605f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe1a26429038d7cd17abc53f96a6f3e2639b605f"}], "stats": {"total": 108, "additions": 96, "deletions": 12}, "files": [{"sha": "d8e3927d3c75491a70df57fcad764fbc33589ecf", "filename": "gcc/match.pd", "status": "modified", "additions": 58, "deletions": 12, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229752afe3156a3990dacaedb94c76846cebf132/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229752afe3156a3990dacaedb94c76846cebf132/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=229752afe3156a3990dacaedb94c76846cebf132", "patch": "@@ -3436,20 +3436,66 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (if (integer_zerop (@0))\n    @2)))\n \n-/* Sink unary operations to constant branches, but only if we do fold it to\n-   constants.  */\n+#if GIMPLE\n+/* Sink unary operations to branches, but only if we do fold both.  */\n (for op (negate bit_not abs absu)\n  (simplify\n-  (op (vec_cond @0 VECTOR_CST@1 VECTOR_CST@2))\n-  (with\n-   {\n-     tree cst1, cst2;\n-     cst1 = const_unop (op, type, @1);\n-     if (cst1)\n-       cst2 = const_unop (op, type, @2);\n-   }\n-   (if (cst1 && cst2)\n-    (vec_cond @0 { cst1; } { cst2; })))))\n+  (op (vec_cond:s @0 @1 @2))\n+  (vec_cond @0 (op! @1) (op! @2))))\n+\n+/* Sink binary operation to branches, but only if we can fold it.  */\n+(for op (tcc_comparison plus minus mult bit_and bit_ior bit_xor\n+\t rdiv trunc_div ceil_div floor_div round_div\n+\t trunc_mod ceil_mod floor_mod round_mod min max)\n+/* (c ? a : b) op (c ? d : e)  -->  c ? (a op d) : (b op e) */\n+ (simplify\n+  (op (vec_cond:s @0 @1 @2) (vec_cond:s @0 @3 @4))\n+  (vec_cond @0 (op! @1 @3) (op! @2 @4)))\n+\n+/* (c ? a : b) op d  -->  c ? (a op d) : (b op d) */\n+ (simplify\n+  (op (vec_cond:s @0 @1 @2) @3)\n+  (vec_cond @0 (op! @1 @3) (op! @2 @3)))\n+ (simplify\n+  (op @3 (vec_cond:s @0 @1 @2))\n+  (vec_cond @0 (op! @3 @1) (op! @3 @2))))\n+#endif\n+\n+/* (v ? w : 0) ? a : b is just (v & w) ? a : b  */\n+(simplify\n+ (vec_cond (vec_cond:s @0 @3 integer_zerop) @1 @2)\n+ (if (types_match (@0, @3))\n+  (vec_cond (bit_and @0 @3) @1 @2)))\n+(simplify\n+ (vec_cond (vec_cond:s @0 integer_all_onesp @3) @1 @2)\n+ (if (types_match (@0, @3))\n+  (vec_cond (bit_ior @0 @3) @1 @2)))\n+(simplify\n+ (vec_cond (vec_cond:s @0 integer_zerop @3) @1 @2)\n+ (if (types_match (@0, @3))\n+  (vec_cond (bit_ior @0 (bit_not @3)) @2 @1)))\n+(simplify\n+ (vec_cond (vec_cond:s @0 @3 integer_all_onesp) @1 @2)\n+ (if (types_match (@0, @3))\n+  (vec_cond (bit_and @0 (bit_not @3)) @2 @1)))\n+\n+/* c1 ? c2 ? a : b : b  -->  (c1 & c2) ? a : b  */\n+(simplify\n+ (vec_cond @0 (vec_cond:s @1 @2 @3) @3)\n+ (if (types_match (@0, @1))\n+  (vec_cond (bit_and @0 @1) @2 @3)))\n+(simplify\n+ (vec_cond @0 @2 (vec_cond:s @1 @2 @3))\n+ (if (types_match (@0, @1))\n+  (vec_cond (bit_ior @0 @1) @2 @3)))\n+(simplify\n+ (vec_cond @0 (vec_cond:s @1 @2 @3) @2)\n+ (if (types_match (@0, @1))\n+  (vec_cond (bit_ior (bit_not @0) @1) @2 @3)))\n+(simplify\n+ (vec_cond @0 @3 (vec_cond:s @1 @2 @3))\n+ (if (types_match (@0, @1))\n+  (vec_cond (bit_and (bit_not @0) @1) @2 @3)))\n \n /* Simplification moved from fold_cond_expr_with_comparison.  It may also\n    be extended.  */"}, {"sha": "e0955ce3ffd9d1cf9bd47e6a5da5b7d5e32c1047", "filename": "gcc/testsuite/gcc.dg/tree-ssa/andnot-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229752afe3156a3990dacaedb94c76846cebf132/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandnot-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229752afe3156a3990dacaedb94c76846cebf132/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandnot-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandnot-2.c?ref=229752afe3156a3990dacaedb94c76846cebf132", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop3-raw -w -Wno-psabi\" } */\n+\n+typedef long vec __attribute__((vector_size(16)));\n+vec f(vec x){\n+  vec y = x < 10;\n+  return y & (y == 0);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"_expr\" \"forwprop3\" } } */"}, {"sha": "3d820a58e9303823e146559ad3dfa1e2d714c81e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr95906.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229752afe3156a3990dacaedb94c76846cebf132/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95906.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229752afe3156a3990dacaedb94c76846cebf132/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95906.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95906.c?ref=229752afe3156a3990dacaedb94c76846cebf132", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop3-raw -w -Wno-psabi\" } */\n+\n+// FIXME: this should further optimize to a MAX_EXPR\n+typedef signed char v16i8 __attribute__((vector_size(16)));\n+v16i8 f(v16i8 a, v16i8 b)\n+{\n+    v16i8 cmp = (a > b);\n+    return (cmp & a) | (~cmp & b);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"bit_(and|ior)_expr\" \"forwprop3\" } } */\n+/* { dg-final { scan-tree-dump-times \"vec_cond_expr\" 1 \"forwprop3\" } } */"}, {"sha": "aad8dd9b57e97559f87ea41327997e24b52ea304", "filename": "gcc/testsuite/gcc.target/i386/pr70314.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/229752afe3156a3990dacaedb94c76846cebf132/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70314.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/229752afe3156a3990dacaedb94c76846cebf132/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70314.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70314.c?ref=229752afe3156a3990dacaedb94c76846cebf132", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=skylake-avx512 -O2\" } */\n+/* { dg-final { scan-assembler-times \"cmp\" 2 } } */\n+/* { dg-final { scan-assembler-not \"and\" } } */\n+\n+typedef long vec __attribute__((vector_size(16)));\n+vec f(vec x, vec y){\n+  return (x < 5) & (y < 8);\n+}\n+\n+/* On x86_64, currently\n+\tvpcmpq\t$2, .LC1(%rip), %xmm1, %k1\n+\tvpcmpq\t$2, .LC0(%rip), %xmm0, %k0{%k1}\n+\tvpmovm2q\t%k0, %xmm0\n+*/"}]}