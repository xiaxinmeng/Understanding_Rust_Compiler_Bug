{"sha": "daca8389efba4b72ee492746f613faa05413dff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFjYTgzODllZmJhNGI3MmVlNDkyNzQ2ZjYxM2ZhYTA1NDEzZGZmMA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2006-10-31T18:05:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:05:47Z"}, "message": "scng.adb (Scan, [...]): Better msg for identifier starting with a digit.\n\n2006-10-31  Robert Dewar  <dewar@adacore.com>\n\n\t* scng.adb (Scan, case of numeric literal): Better msg for identifier\n\tstarting with a digit.\n\nFrom-SVN: r118297", "tree": {"sha": "be795418b7e217fa215dd40df2d2e6621ba8f2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be795418b7e217fa215dd40df2d2e6621ba8f2cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daca8389efba4b72ee492746f613faa05413dff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daca8389efba4b72ee492746f613faa05413dff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daca8389efba4b72ee492746f613faa05413dff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daca8389efba4b72ee492746f613faa05413dff0/comments", "author": null, "committer": null, "parents": [{"sha": "1fa4cb204c83e89ecc77d7e94ce22ccc4562c96e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa4cb204c83e89ecc77d7e94ce22ccc4562c96e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa4cb204c83e89ecc77d7e94ce22ccc4562c96e"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "c4fdd86fbcf823903dd1caf8395725dd37755416", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daca8389efba4b72ee492746f613faa05413dff0/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daca8389efba4b72ee492746f613faa05413dff0/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=daca8389efba4b72ee492746f613faa05413dff0", "patch": "@@ -477,7 +477,6 @@ package body Scng is\n          UI_Int_Value := Uint_0;\n          Scale := 0;\n          Scan_Integer;\n-         Scale := 0;\n          Point_Scanned := False;\n          UI_Num_Value := UI_Int_Value;\n \n@@ -1741,12 +1740,59 @@ package body Scng is\n          --  Digits starting a numeric literal\n \n          when '0' .. '9' =>\n+\n+            --  First a bit of a scan ahead to see if we have a case of an\n+            --  identifier starting with a digit (remembering exponent case).\n+\n+            declare\n+               C : constant Character := Source (Scan_Ptr + 1);\n+\n+            begin\n+               --  OK literal if digit followed by digit or underscore\n+\n+               if C in '0' .. '9' or else C = '_' then\n+                  null;\n+\n+               --  OK literal if digit not followed by identifier char\n+\n+               elsif not Identifier_Char (C) then\n+                  null;\n+\n+               --  OK literal if digit followed by e/E followed by digit/sign.\n+               --  We also allow underscore after the E, which is an error, but\n+               --  better handled by Nlit than deciding this is an identifier.\n+\n+               elsif (C = 'e' or else C = 'E')\n+                 and then (Source (Scan_Ptr + 2) in '0' .. '9'\n+                             or else Source (Scan_Ptr + 2) = '+'\n+                             or else Source (Scan_Ptr + 2) = '-'\n+                             or else Source (Scan_Ptr + 2) = '_')\n+               then\n+                  null;\n+\n+               --  Here we have what really looks like an identifier that\n+               --  starts with a digit, so give error msg.\n+\n+               else\n+                  Error_Msg_S (\"identifier may not start with digit\");\n+                  Name_Len := 1;\n+                  Underline_Found := False;\n+                  Name_Buffer (1) := Source (Scan_Ptr);\n+                  Accumulate_Checksum (Name_Buffer (1));\n+                  Scan_Ptr := Scan_Ptr + 1;\n+                  goto Scan_Identifier;\n+               end if;\n+            end;\n+\n+            --  Here we have an OK integer literal\n+\n             Nlit;\n \n             if Identifier_Char (Source (Scan_Ptr)) then\n                Error_Msg_S\n                  (\"delimiter required between literal and identifier\");\n             end if;\n+\n             Post_Scan;\n             return;\n "}]}