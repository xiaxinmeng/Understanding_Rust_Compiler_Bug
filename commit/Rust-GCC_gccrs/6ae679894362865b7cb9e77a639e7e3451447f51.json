{"sha": "6ae679894362865b7cb9e77a639e7e3451447f51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFlNjc5ODk0MzYyODY1YjdjYjllNzdhNjM5ZTdlMzQ1MTQ0N2Y1MQ==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2018-02-14T21:13:26Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2018-02-14T21:13:26Z"}, "message": "re PR target/83984 (ld: The value 0x8000000000005 does not fit when applying the relocation DIR21L)\n\n\tPR target/83984\n\t* config/pa/pa.md: Load address of PIC label using the linkage table\n\tif the label is nonlocal.\n\nFrom-SVN: r257672", "tree": {"sha": "0f50fd171c46f8b62244e91f2c5f0be168d8bf6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f50fd171c46f8b62244e91f2c5f0be168d8bf6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ae679894362865b7cb9e77a639e7e3451447f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae679894362865b7cb9e77a639e7e3451447f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae679894362865b7cb9e77a639e7e3451447f51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae679894362865b7cb9e77a639e7e3451447f51/comments", "author": null, "committer": null, "parents": [{"sha": "4ce5745cabe5609b50d8ba85cca37d83c7c051ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ce5745cabe5609b50d8ba85cca37d83c7c051ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ce5745cabe5609b50d8ba85cca37d83c7c051ce"}], "stats": {"total": 88, "additions": 59, "deletions": 29}, "files": [{"sha": "97067a3ffe2c798b14f4afaef072a61a6a495fef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae679894362865b7cb9e77a639e7e3451447f51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae679894362865b7cb9e77a639e7e3451447f51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ae679894362865b7cb9e77a639e7e3451447f51", "patch": "@@ -1,3 +1,9 @@\n+2018-02-14  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR target/83984\n+\t* config/pa/pa.md: Load address of PIC label using the linkage table\n+\tif the label is nonlocal.\n+\n 2018-02-14  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_option_override_internal): Issue"}, {"sha": "e748f053651c4615d9f9099282c4aa3dcfa96cbe", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 53, "deletions": 29, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae679894362865b7cb9e77a639e7e3451447f51/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae679894362865b7cb9e77a639e7e3451447f51/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=6ae679894362865b7cb9e77a639e7e3451447f51", "patch": "@@ -2536,24 +2536,40 @@\n \n   xoperands[0] = operands[0];\n   xoperands[1] = operands[1];\n-  xoperands[2] = gen_label_rtx ();\n \n-  (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n-\t\t\t\t     CODE_LABEL_NUMBER (xoperands[2]));\n-  output_asm_insn (\\\"mfia %0\\\", xoperands);\n-\n-  /* If we're trying to load the address of a label that happens to be\n-     close, then we can use a shorter sequence.  */\n   if (GET_CODE (operands[1]) == LABEL_REF\n-      && !LABEL_REF_NONLOCAL_P (operands[1])\n-      && INSN_ADDRESSES_SET_P ()\n-      && abs (INSN_ADDRESSES (INSN_UID (XEXP (operands[1], 0)))\n-\t        - INSN_ADDRESSES (INSN_UID (insn))) < 8100)\n-    output_asm_insn (\\\"ldo %1-%2(%0),%0\\\", xoperands);\n+      && !LABEL_REF_NONLOCAL_P (operands[1]))\n+    {\n+      xoperands[2] = gen_label_rtx ();\n+      (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n+\t\t\t\t\t CODE_LABEL_NUMBER (xoperands[2]));\n+      output_asm_insn (\\\"mfia %0\\\", xoperands);\n+\n+      /* If we're trying to load the address of a label that happens to be\n+\t close, then we can use a shorter sequence.  */\n+      if (INSN_ADDRESSES_SET_P ()\n+\t  && abs (INSN_ADDRESSES (INSN_UID (XEXP (operands[1], 0)))\n+\t\t  - INSN_ADDRESSES (INSN_UID (insn))) < 8100)\n+\toutput_asm_insn (\\\"ldo %1-%2(%0),%0\\\", xoperands);\n+      else\n+\t{\n+\t  output_asm_insn (\\\"addil L%%%1-%2,%0\\\", xoperands);\n+\t  output_asm_insn (\\\"ldo R%%%1-%2(%0),%0\\\", xoperands);\n+\t}\n+    }\n   else\n     {\n-      output_asm_insn (\\\"addil L%%%1-%2,%0\\\", xoperands);\n-      output_asm_insn (\\\"ldo R%%%1-%2(%0),%0\\\", xoperands);\n+      /* Load using linkage table.  */\n+      if (TARGET_64BIT)\n+\t{\n+\t  output_asm_insn (\\\"addil LT%%%1,%%r27\\\", xoperands);\n+\t  output_asm_insn (\\\"ldd RT%%%1(%0),%0\\\", xoperands);\n+\t}\n+      else\n+\t{\n+\t  output_asm_insn (\\\"addil LT%%%1,%%r19\\\", xoperands);\n+\t  output_asm_insn (\\\"ldw RT%%%1(%0),%0\\\", xoperands);\n+\t}\n     }\n   return \\\"\\\";\n }\"\n@@ -2570,25 +2586,33 @@\n \n   xoperands[0] = operands[0];\n   xoperands[1] = operands[1];\n-  xoperands[2] = gen_label_rtx ();\n \n-  output_asm_insn (\\\"bl .+8,%0\\\", xoperands);\n-  output_asm_insn (\\\"depi 0,31,2,%0\\\", xoperands);\n-  (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n-\t\t\t\t     CODE_LABEL_NUMBER (xoperands[2]));\n-\n-  /* If we're trying to load the address of a label that happens to be\n-     close, then we can use a shorter sequence.  */\n   if (GET_CODE (operands[1]) == LABEL_REF\n-      && !LABEL_REF_NONLOCAL_P (operands[1])\n-      && INSN_ADDRESSES_SET_P ()\n-      && abs (INSN_ADDRESSES (INSN_UID (XEXP (operands[1], 0)))\n-\t        - INSN_ADDRESSES (INSN_UID (insn))) < 8100)\n-    output_asm_insn (\\\"ldo %1-%2(%0),%0\\\", xoperands);\n+      && !LABEL_REF_NONLOCAL_P (operands[1]))\n+    {\n+      xoperands[2] = gen_label_rtx ();\n+      output_asm_insn (\\\"bl .+8,%0\\\", xoperands);\n+      output_asm_insn (\\\"depi 0,31,2,%0\\\", xoperands);\n+      (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n+\t\t\t\t\t CODE_LABEL_NUMBER (xoperands[2]));\n+\n+      /* If we're trying to load the address of a label that happens to be\n+\t close, then we can use a shorter sequence.  */\n+      if (INSN_ADDRESSES_SET_P ()\n+\t  && abs (INSN_ADDRESSES (INSN_UID (XEXP (operands[1], 0)))\n+\t\t  - INSN_ADDRESSES (INSN_UID (insn))) < 8100)\n+\toutput_asm_insn (\\\"ldo %1-%2(%0),%0\\\", xoperands);\n+      else\n+\t{\n+\t  output_asm_insn (\\\"addil L%%%1-%2,%0\\\", xoperands);\n+\t  output_asm_insn (\\\"ldo R%%%1-%2(%0),%0\\\", xoperands);\n+\t}\n+    }\n   else\n     {\n-      output_asm_insn (\\\"addil L%%%1-%2,%0\\\", xoperands);\n-      output_asm_insn (\\\"ldo R%%%1-%2(%0),%0\\\", xoperands);\n+      /* Load using linkage table.  */\n+      output_asm_insn (\\\"addil LT%%%1,%%r19\\\", xoperands);\n+      output_asm_insn (\\\"ldw RT%%%1(%0),%0\\\", xoperands);\n     }\n   return \\\"\\\";\n }\""}]}