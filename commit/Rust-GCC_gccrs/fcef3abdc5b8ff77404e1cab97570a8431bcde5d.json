{"sha": "fcef3abdc5b8ff77404e1cab97570a8431bcde5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNlZjNhYmRjNWI4ZmY3NzQwNGUxY2FiOTc1NzBhODQzMWJjZGU1ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2017-09-28T13:08:28Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2017-09-28T13:08:28Z"}, "message": "Avoid assembler warnings from AArch64 constructor/destructor priorities.\n\nMany GCC tests fail for AArch64 with current binutils because of\nassembler warnings of the form \"Warning: ignoring incorrect section\ntype for .init_array.00100\".  The same issue was fixed for ARM in\nr247015 by using SECTION_NOTYPE when creating those sections; this\npatch applies the same fix to AArch64.\n\nTested with no regressions with cross to aarch64-linux-gnu.\n\n\t* config/aarch64/aarch64.c (aarch64_elf_asm_constructor)\n\t(aarch64_elf_asm_destructor): Pass SECTION_NOTYPE to get_section\n\twhen creating .init_array and .fini_array sections with priority\n\tspecified.\n\nFrom-SVN: r253252", "tree": {"sha": "45878272f006c8d8b063fce30c9a5010c4817f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45878272f006c8d8b063fce30c9a5010c4817f6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcef3abdc5b8ff77404e1cab97570a8431bcde5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcef3abdc5b8ff77404e1cab97570a8431bcde5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcef3abdc5b8ff77404e1cab97570a8431bcde5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcef3abdc5b8ff77404e1cab97570a8431bcde5d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78c98bf2d98bba45b128e1461f79b85ba12d2775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c98bf2d98bba45b128e1461f79b85ba12d2775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78c98bf2d98bba45b128e1461f79b85ba12d2775"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "718f0426368db8eb37144fe7903b6125576b0104", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcef3abdc5b8ff77404e1cab97570a8431bcde5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcef3abdc5b8ff77404e1cab97570a8431bcde5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcef3abdc5b8ff77404e1cab97570a8431bcde5d", "patch": "@@ -1,3 +1,10 @@\n+2017-09-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_elf_asm_constructor)\n+\t(aarch64_elf_asm_destructor): Pass SECTION_NOTYPE to get_section\n+\twhen creating .init_array and .fini_array sections with priority\n+\tspecified.\n+\n 2017-09-27  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \tPR target/71727"}, {"sha": "23f5afff95a312138e0090125a4be8b5cdb59090", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcef3abdc5b8ff77404e1cab97570a8431bcde5d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcef3abdc5b8ff77404e1cab97570a8431bcde5d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fcef3abdc5b8ff77404e1cab97570a8431bcde5d", "patch": "@@ -6095,7 +6095,7 @@ aarch64_elf_asm_constructor (rtx symbol, int priority)\n          -Wformat-truncation false positive, use a larger size.  */\n       char buf[23];\n       snprintf (buf, sizeof (buf), \".init_array.%.5u\", priority);\n-      s = get_section (buf, SECTION_WRITE, NULL);\n+      s = get_section (buf, SECTION_WRITE | SECTION_NOTYPE, NULL);\n       switch_to_section (s);\n       assemble_align (POINTER_SIZE);\n       assemble_aligned_integer (POINTER_BYTES, symbol);\n@@ -6115,7 +6115,7 @@ aarch64_elf_asm_destructor (rtx symbol, int priority)\n          -Wformat-truncation false positive, use a larger size.  */\n       char buf[23];\n       snprintf (buf, sizeof (buf), \".fini_array.%.5u\", priority);\n-      s = get_section (buf, SECTION_WRITE, NULL);\n+      s = get_section (buf, SECTION_WRITE | SECTION_NOTYPE, NULL);\n       switch_to_section (s);\n       assemble_align (POINTER_SIZE);\n       assemble_aligned_integer (POINTER_BYTES, symbol);"}]}