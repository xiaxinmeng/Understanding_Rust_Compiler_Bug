{"sha": "3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E2OWI1ZmZlNmI3MDdkZDZlOTZiYzVjMjFmNWRiNTNkYjUwMDFmZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-22T10:14:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-22T10:14:53Z"}, "message": "[multiple changes]\n\n2009-04-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* gnat1drv.adb: Fix typo\n\n2009-04-22  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Assignment): Code cleanup.\n\tAdd a call to Move_Final_List when the target of the assignment is a\n\treturn object that needs finalization and the expression is a\n\tcontrolled build-in-place function.\n\n2009-04-22  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Gnatmake, Bind_Step): call Set_Ada_Paths with\n\tIncluding_Libraries set to True.\n\nFrom-SVN: r146560", "tree": {"sha": "2770d3c466c22efaba1f9cc7a57315098841a943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2770d3c466c22efaba1f9cc7a57315098841a943"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe/comments", "author": null, "committer": null, "parents": [{"sha": "f3a67cfc20021148306054463c9654199ba901d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a67cfc20021148306054463c9654199ba901d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3a67cfc20021148306054463c9654199ba901d5"}], "stats": {"total": 154, "additions": 118, "deletions": 36}, "files": [{"sha": "37133323623a251026285c10a8d7584c12782830", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe", "patch": "@@ -1,3 +1,15 @@\n+2009-04-22  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Assignment): Code cleanup.\n+\tAdd a call to Move_Final_List when the target of the assignment is a\n+\treturn object that needs finalization and the expression is a\n+\tcontrolled build-in-place function.\n+\n+2009-04-22  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Gnatmake, Bind_Step): call Set_Ada_Paths with\n+\tIncluding_Libraries set to True.\n+\n 2009-04-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* lib-load.ads, lib-load.adb (Make_Child_Decl_Unit): New subprogram, to"}, {"sha": "200693bd7d66b6b8b16df22777330e154a6dbb33", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 103, "deletions": 33, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -5243,15 +5243,16 @@ package body Exp_Ch6 is\n      (Assign        : Node_Id;\n       Function_Call : Node_Id)\n    is\n-      Lhs             : constant Node_Id := Name (Assign);\n-      Loc             : Source_Ptr;\n-      Func_Call       : Node_Id := Function_Call;\n-      Function_Id     : Entity_Id;\n-      Result_Subt     : Entity_Id;\n-      Ref_Type        : Entity_Id;\n-      Ptr_Typ_Decl    : Node_Id;\n-      Def_Id          : Entity_Id;\n-      New_Expr        : Node_Id;\n+      Lhs          : constant Node_Id := Name (Assign);\n+      Func_Call    : Node_Id := Function_Call;\n+      Func_Id      : Entity_Id;\n+      Loc          : Source_Ptr;\n+      Obj_Decl     : Node_Id;\n+      Obj_Id       : Entity_Id;\n+      Ptr_Typ      : Entity_Id;\n+      Ptr_Typ_Decl : Node_Id;\n+      Result_Subt  : Entity_Id;\n+      Target       : Node_Id;\n \n    begin\n       --  Step past qualification or unchecked conversion (the latter can occur\n@@ -5278,16 +5279,16 @@ package body Exp_Ch6 is\n       Loc := Sloc (Function_Call);\n \n       if Is_Entity_Name (Name (Func_Call)) then\n-         Function_Id := Entity (Name (Func_Call));\n+         Func_Id := Entity (Name (Func_Call));\n \n       elsif Nkind (Name (Func_Call)) = N_Explicit_Dereference then\n-         Function_Id := Etype (Name (Func_Call));\n+         Func_Id := Etype (Name (Func_Call));\n \n       else\n          raise Program_Error;\n       end if;\n \n-      Result_Subt := Etype (Function_Id);\n+      Result_Subt := Etype (Func_Id);\n \n       --  When the result subtype is unconstrained, an additional actual must\n       --  be passed to indicate that the caller is providing the return object.\n@@ -5296,67 +5297,136 @@ package body Exp_Ch6 is\n       --  to be treated effectively the same as calls to class-wide functions.\n \n       Add_Alloc_Form_Actual_To_Build_In_Place_Call\n-        (Func_Call, Function_Id, Alloc_Form => Caller_Allocation);\n+        (Func_Call, Func_Id, Alloc_Form => Caller_Allocation);\n \n       --  If Lhs is a selected component, then pass it along so that its prefix\n       --  object will be used as the source of the finalization list.\n \n       if Nkind (Lhs) = N_Selected_Component then\n          Add_Final_List_Actual_To_Build_In_Place_Call\n-           (Func_Call, Function_Id, Acc_Type => Empty, Sel_Comp => Lhs);\n+           (Func_Call, Func_Id, Acc_Type => Empty, Sel_Comp => Lhs);\n       else\n          Add_Final_List_Actual_To_Build_In_Place_Call\n-           (Func_Call, Function_Id, Acc_Type => Empty);\n+           (Func_Call, Func_Id, Acc_Type => Empty);\n       end if;\n \n       Add_Task_Actuals_To_Build_In_Place_Call\n-        (Func_Call, Function_Id, Make_Identifier (Loc, Name_uMaster));\n+        (Func_Call, Func_Id, Make_Identifier (Loc, Name_uMaster));\n \n       --  Add an implicit actual to the function call that provides access to\n       --  the caller's return object.\n \n       Add_Access_Actual_To_Build_In_Place_Call\n         (Func_Call,\n-         Function_Id,\n+         Func_Id,\n          Make_Unchecked_Type_Conversion (Loc,\n            Subtype_Mark => New_Reference_To (Result_Subt, Loc),\n            Expression   => Relocate_Node (Lhs)));\n \n       --  Create an access type designating the function's result subtype\n \n-      Ref_Type :=\n+      Ptr_Typ :=\n         Make_Defining_Identifier (Loc, New_Internal_Name ('A'));\n \n       Ptr_Typ_Decl :=\n         Make_Full_Type_Declaration (Loc,\n-          Defining_Identifier => Ref_Type,\n+          Defining_Identifier => Ptr_Typ,\n           Type_Definition =>\n             Make_Access_To_Object_Definition (Loc,\n               All_Present => True,\n               Subtype_Indication =>\n                 New_Reference_To (Result_Subt, Loc)));\n-\n       Insert_After_And_Analyze (Assign, Ptr_Typ_Decl);\n \n       --  Finally, create an access object initialized to a reference to the\n       --  function call.\n \n-      Def_Id :=\n-        Make_Defining_Identifier (Loc,\n-          Chars => New_Internal_Name ('R'));\n-      Set_Etype (Def_Id, Ref_Type);\n-\n-      New_Expr :=\n-        Make_Reference (Loc,\n-          Prefix => Relocate_Node (Func_Call));\n+      Obj_Id := Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n+      Set_Etype (Obj_Id, Ptr_Typ);\n \n-      Insert_After_And_Analyze (Ptr_Typ_Decl,\n+      Obj_Decl :=\n         Make_Object_Declaration (Loc,\n-          Defining_Identifier => Def_Id,\n-          Object_Definition   => New_Reference_To (Ref_Type, Loc),\n-          Expression          => New_Expr));\n+          Defining_Identifier => Obj_Id,\n+          Object_Definition =>\n+            New_Reference_To (Ptr_Typ, Loc),\n+          Expression =>\n+            Make_Reference (Loc,\n+              Prefix => Relocate_Node (Func_Call)));\n+      Insert_After_And_Analyze (Ptr_Typ_Decl, Obj_Decl);\n \n       Rewrite (Assign, Make_Null_Statement (Loc));\n+\n+      --  Retrieve the target of the assignment\n+\n+      if Nkind (Lhs) = N_Selected_Component then\n+         Target := Selector_Name (Lhs);\n+      elsif Nkind (Lhs) = N_Type_Conversion then\n+         Target := Expression (Lhs);\n+      else\n+         Target := Lhs;\n+      end if;\n+\n+      --  If we are assigning to a return object or this is an expression of\n+      --  an extension aggregate, the target should either be an identifier\n+      --  or a simple expression. All other cases imply a different scenario.\n+\n+      if Nkind (Target) in N_Has_Entity then\n+         Target := Entity (Target);\n+      else\n+         return;\n+      end if;\n+\n+      --  When the target of the assignment is a return object of an enclosing\n+      --  build-in-place function and also requires finalization, the list\n+      --  generated for the assignment must be moved to that of the enclosing\n+      --  function.\n+\n+      --    function Enclosing_BIP_Function return Ctrl_Typ is\n+      --    begin\n+      --       return (Ctrl_Parent_Part => BIP_Function with ...);\n+      --    end Enclosing_BIP_Function;\n+\n+      if Is_Return_Object (Target)\n+        and then Needs_Finalization (Etype (Target))\n+        and then Needs_Finalization (Result_Subt)\n+      then\n+         declare\n+            Obj_List  : constant Node_Id := Find_Final_List (Obj_Id);\n+            Encl_List : Node_Id;\n+            Encl_Scop : Entity_Id;\n+\n+         begin\n+            Encl_Scop := Scope (Target);\n+\n+            --  Locate the scope of the extended return statement\n+\n+            while Present (Encl_Scop)\n+              and then Ekind (Encl_Scop) /= E_Return_Statement\n+            loop\n+               Encl_Scop := Scope (Encl_Scop);\n+            end loop;\n+\n+            --  A return object should always be enclosed by a return statement\n+            --  scope at some level.\n+\n+            pragma Assert (Present (Encl_Scop));\n+\n+            Encl_List :=\n+              Make_Attribute_Reference (Loc,\n+                Prefix =>\n+                  New_Reference_To (\n+                    Finalization_Chain_Entity (Encl_Scop), Loc),\n+                Attribute_Name => Name_Unrestricted_Access);\n+\n+            --  Generate a call to move final list\n+\n+            Insert_After_And_Analyze (Obj_Decl,\n+              Make_Procedure_Call_Statement (Loc,\n+                Name =>\n+                  New_Reference_To (RTE (RE_Move_Final_List), Loc),\n+                Parameter_Associations => New_List (Obj_List, Encl_List)));\n+         end;\n+      end if;\n    end Make_Build_In_Place_Call_In_Assignment;\n \n    ----------------------------------------------------"}, {"sha": "f8fb53ab9a1db2ec0d82480574d5656dfa217607", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe", "patch": "@@ -517,7 +517,7 @@ begin\n       if Nkind (Unit (Main_Unit_Node)) in N_Unit_Body\n         and then not Acts_As_Spec (Main_Unit_Node)\n       then\n-         if Nkind (Main_Unit_Node) = N_Subprogram_Body\n+         if Nkind (Unit (Main_Unit_Node)) = N_Subprogram_Body\n            and then not Comes_From_Source (Library_Unit (Main_Unit_Node))\n          then\n             null;"}, {"sha": "49896cb05b357c78456a0993ef67af5584ab4f8c", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=3a69b5ffe6b707dd6e96bc5c21f5db53db5001fe", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -6213,7 +6213,7 @@ package body Make is\n                   --  Put all the source directories in ADA_INCLUDE_PATH,\n                   --  and all the object directories in ADA_OBJECTS_PATH.\n \n-                  Prj.Env.Set_Ada_Paths (Main_Project, Project_Tree, False);\n+                  Prj.Env.Set_Ada_Paths (Main_Project, Project_Tree, True);\n \n                   --  If switch -C was specified, create a binder mapping file\n "}]}