{"sha": "c4e5b5a8bf81daa9e21c17149a4943b96c8099b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRlNWI1YThiZjgxZGFhOWUyMWMxNzE0OWE0OTQzYjk2YzgwOTliMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-17T14:34:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-17T14:34:21Z"}, "message": "re PR tree-optimization/19637 (Missed VRP and FRE opportunities in the presence of casts)\n\n2008-03-17  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/19637\n\t* fold-const.c (fold_unary): Remove restrictions of removing\n\tintermediate pointer-conversions (P2)(P1)P0.\n\t* tree-ssa-ccp.c (maybe_fold_stmt_addition): Recover from\n\tconversion to void pointer.\n\t(get_maxval_strlen): Handle addresses of the form &(*p)[0].\n\n\t* g++.dg/tree-ssa/pr19637.C: New testcase.\n\nFrom-SVN: r133291", "tree": {"sha": "953f8e21808467a87b2490c396b2f654c4d588ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/953f8e21808467a87b2490c396b2f654c4d588ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec286fe7ab26dbfeeb7e7d05d9d747745c108393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec286fe7ab26dbfeeb7e7d05d9d747745c108393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec286fe7ab26dbfeeb7e7d05d9d747745c108393"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "28309279b79362d5a1464d070624404135cc60b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4e5b5a8bf81daa9e21c17149a4943b96c8099b3", "patch": "@@ -1,3 +1,12 @@\n+2008-03-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/19637\n+\t* fold-const.c (fold_unary): Remove restrictions of removing\n+\tintermediate pointer-conversions (P2)(P1)P0.\n+\t* tree-ssa-ccp.c (maybe_fold_stmt_addition): Recover from\n+\tconversion to void pointer.\n+\t(get_maxval_strlen): Handle addresses of the form &(*p)[0].\n+\n 2008-03-16  James E. Wilson  <wilson@tuliptree.org>\n \n \tPR debug/31510"}, {"sha": "3bfe52e0081f1eeee75e08cfe192b7222dacf8ab", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c4e5b5a8bf81daa9e21c17149a4943b96c8099b3", "patch": "@@ -7784,9 +7784,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t     - the initial type is a pointer type and the precisions of the\n \t       intermediate and final types differ, or\n \t     - the final type is a pointer type and the precisions of the\n-\t       initial and intermediate types differ.\n-\t     - the initial type is a pointer to an array and the final type\n-\t       not.  */\n+\t       initial and intermediate types differ.  */\n \t  if (! inside_float && ! inter_float && ! final_float\n \t      && ! inside_vec && ! inter_vec && ! final_vec\n \t      && (inter_prec >= inside_prec || inter_prec >= final_prec)\n@@ -7798,10 +7796,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t      && ! (inside_ptr && inter_prec != final_prec)\n \t      && ! (final_ptr && inside_prec != inter_prec)\n \t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (type))\n-\t\t    && TYPE_MODE (type) == TYPE_MODE (inter_type))\n-\t      && ! (inside_ptr && final_ptr\n-\t\t    && TREE_CODE (TREE_TYPE (inside_type)) == ARRAY_TYPE\n-\t\t    && TREE_CODE (TREE_TYPE (type)) != ARRAY_TYPE))\n+\t\t    && TYPE_MODE (type) == TYPE_MODE (inter_type)))\n \t    return fold_build1 (code, type, TREE_OPERAND (op0, 0));\n \t}\n "}, {"sha": "9242eca671cd7997edc08df8adba6d21e94388d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4e5b5a8bf81daa9e21c17149a4943b96c8099b3", "patch": "@@ -1,3 +1,8 @@\n+2008-03-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/19637\n+\t* g++.dg/tree-ssa/pr19637.C: New testcase.\n+\n 2008-03-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/35470"}, {"sha": "2d1dcceba42f59b286e210d8e1086ef730b845fa", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr19637.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19637.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19637.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19637.C?ref=c4e5b5a8bf81daa9e21c17149a4943b96c8099b3", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dom1\" } */\n+\n+#include <new>\n+\n+struct Foo {\n+  Foo() { i[0] = 1; }\n+  int i[2];\n+};\n+\n+int foo_char(void)\n+{\n+  int i[2];\n+  new (reinterpret_cast<char *>(i)) Foo();\n+  return reinterpret_cast<Foo *>(i)->i[0];\n+}\n+\n+int foo_void(void)\n+{\n+  int i[2];\n+  new (reinterpret_cast<void *>(i)) Foo();\n+  return reinterpret_cast<Foo *>(i)->i[0];\n+}\n+\n+int foo_void_offset(void)\n+{\n+  int i[2];\n+  new (reinterpret_cast<void *>(&i[0])) Foo();\n+  return reinterpret_cast<Foo *>(&i[0])->i[0];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 3 \"dom1\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom1\" } } */"}, {"sha": "7e519264f7a619dde9c8d800325293626be07015", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e5b5a8bf81daa9e21c17149a4943b96c8099b3/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=c4e5b5a8bf81daa9e21c17149a4943b96c8099b3", "patch": "@@ -2105,6 +2105,12 @@ maybe_fold_stmt_addition (tree expr)\n     }\n \n   ptd_type = TREE_TYPE (ptr_type);\n+  /* If we want a pointer to void, reconstruct the reference from the\n+     array element type.  A pointer to that can be trivially converted\n+     to void *.  This happens as we fold (void *)(ptr p+ off).  */\n+  if (VOID_TYPE_P (ptd_type)\n+      && TREE_CODE (TREE_TYPE (op0)) == ARRAY_TYPE)\n+    ptd_type = TREE_TYPE (TREE_TYPE (op0));\n \n   /* At which point we can try some of the same things as for indirects.  */\n   t = maybe_fold_offset_to_array_ref (op0, op1, ptd_type, true);\n@@ -2292,6 +2298,17 @@ get_maxval_strlen (tree arg, tree *length, bitmap visited, int type)\n       if (TREE_CODE (arg) == COND_EXPR)\n         return get_maxval_strlen (COND_EXPR_THEN (arg), length, visited, type)\n                && get_maxval_strlen (COND_EXPR_ELSE (arg), length, visited, type);\n+      /* We can end up with &(*iftmp_1)[0] here as well, so handle it.  */\n+      else if (TREE_CODE (arg) == ADDR_EXPR\n+\t       && TREE_CODE (TREE_OPERAND (arg, 0)) == ARRAY_REF\n+\t       && integer_zerop (TREE_OPERAND (TREE_OPERAND (arg, 0), 1)))\n+\t{\n+\t  tree aop0 = TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n+\t  if (TREE_CODE (aop0) == INDIRECT_REF\n+\t      && TREE_CODE (TREE_OPERAND (aop0, 0)) == SSA_NAME)\n+\t    return get_maxval_strlen (TREE_OPERAND (aop0, 0),\n+\t\t\t\t      length, visited, type);\n+\t}\n \n       if (type == 2)\n \t{"}]}