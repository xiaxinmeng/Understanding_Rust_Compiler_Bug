{"sha": "07a971b28c880938bb7e070465ab8ee6ccdad1fb", "node_id": "C_kwDOANBUbNoAKDA3YTk3MWIyOGM4ODA5MzhiYjdlMDcwNDY1YWI4ZWU2Y2NkYWQxZmI", "commit": {"author": {"name": "Thomas Rodgers", "email": "rodgert@appliantology.com", "date": "2022-01-31T21:39:44Z"}, "committer": {"name": "Thomas Rodgers", "email": "rodgert@appliantology.com", "date": "2022-02-01T17:04:10Z"}, "message": "Strengthen memory order for atomic<T>::wait/notify\n\nThis matches the memory order in libc++.\n\nlibstdc++-v3/ChangeLog:\n\t* include/bits/atomic_wait.h: Change memory order from\n\tAcquire/Release with relaxed loads to SeqCst+Release for\n\taccesses to the waiter's count.", "tree": {"sha": "886b29ece6dc762233e7832e28ca6f6038d22e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/886b29ece6dc762233e7832e28ca6f6038d22e2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07a971b28c880938bb7e070465ab8ee6ccdad1fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a971b28c880938bb7e070465ab8ee6ccdad1fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07a971b28c880938bb7e070465ab8ee6ccdad1fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a971b28c880938bb7e070465ab8ee6ccdad1fb/comments", "author": null, "committer": null, "parents": [{"sha": "3ad29854f0b2b1f468ea87e8cbd2a5c5a72ba5fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad29854f0b2b1f468ea87e8cbd2a5c5a72ba5fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad29854f0b2b1f468ea87e8cbd2a5c5a72ba5fe"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "d7de0d7eb9e666b0eb4bce27f4fd2cb62d2da3b8", "filename": "libstdc++-v3/include/bits/atomic_wait.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a971b28c880938bb7e070465ab8ee6ccdad1fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a971b28c880938bb7e070465ab8ee6ccdad1fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h?ref=07a971b28c880938bb7e070465ab8ee6ccdad1fb", "patch": "@@ -209,18 +209,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       _M_enter_wait() noexcept\n-      { __atomic_fetch_add(&_M_wait, 1, __ATOMIC_ACQ_REL); }\n+      { __atomic_fetch_add(&_M_wait, 1, __ATOMIC_SEQ_CST); }\n \n       void\n       _M_leave_wait() noexcept\n-      { __atomic_fetch_sub(&_M_wait, 1, __ATOMIC_ACQ_REL); }\n+      { __atomic_fetch_sub(&_M_wait, 1, __ATOMIC_RELEASE); }\n \n       bool\n       _M_waiting() const noexcept\n       {\n \t__platform_wait_t __res;\n-\t__atomic_load(&_M_wait, &__res, __ATOMIC_ACQUIRE);\n-\treturn __res > 0;\n+\t__atomic_load(&_M_wait, &__res, __ATOMIC_SEQ_CST);\n+\treturn __res != 0;\n       }\n \n       void\n@@ -258,7 +258,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__platform_wait(__addr, __old);\n #else\n \t__platform_wait_t __val;\n-\t__atomic_load(__addr, &__val, __ATOMIC_RELAXED);\n+\t__atomic_load(__addr, &__val, __ATOMIC_SEQ_CST);\n \tif (__val == __old)\n \t  {\n \t    lock_guard<mutex> __l(_M_mtx);\n@@ -309,7 +309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  if (_M_laundered())\n \t    {\n-\t      __atomic_fetch_add(_M_addr, 1, __ATOMIC_ACQ_REL);\n+\t      __atomic_fetch_add(_M_addr, 1, __ATOMIC_SEQ_CST);\n \t      __all = true;\n \t    }\n \t  _M_w._M_notify(_M_addr, __all, __bare);"}]}