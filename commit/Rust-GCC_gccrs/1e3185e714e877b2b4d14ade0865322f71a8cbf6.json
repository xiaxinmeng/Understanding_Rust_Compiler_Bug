{"sha": "1e3185e714e877b2b4d14ade0865322f71a8cbf6", "node_id": "C_kwDOANBUbNoAKDFlMzE4NWU3MTRlODc3YjJiNGQxNGFkZTA4NjUzMjJmNzFhOGNiZjY", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2022-02-08T13:56:29Z"}, "committer": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2022-02-08T14:28:53Z"}, "message": "s390: Increase costs for load on condition and change movqicc expander.\n\nThis patch changes the costs for a load on condition from 5 to 6 in\norder to ensure that we only if-convert two and not three or more SETS like\n\nif (cond)\n{\n  a = b;\n  c = d;\n  e = f;\n}\n\nIn the movqicc expander we emit a paradoxical subreg directly that\ncombine would otherwise try to create by using a non-optimal sequence\n(which would be too expensive).\n\nAlso, fix two oversights in ifcvt testcases.\n\ngcc/ChangeLog:\n\n\t* config/s390/s390.cc (s390_rtx_costs): Increase costs for load\n\ton condition.\n\t* config/s390/s390.md: Use paradoxical subreg.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/ifcvt-two-insns-int.c: Fix array size.\n\t* gcc.target/s390/ifcvt-two-insns-long.c: Dito.", "tree": {"sha": "189545d046eac4085f79dd745f925d88ec4a9e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/189545d046eac4085f79dd745f925d88ec4a9e61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e3185e714e877b2b4d14ade0865322f71a8cbf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3185e714e877b2b4d14ade0865322f71a8cbf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e3185e714e877b2b4d14ade0865322f71a8cbf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3185e714e877b2b4d14ade0865322f71a8cbf6/comments", "author": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38a177fa4c2fd1ce75581145b3b8f12592b4aacd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a177fa4c2fd1ce75581145b3b8f12592b4aacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38a177fa4c2fd1ce75581145b3b8f12592b4aacd"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "d2af6d8813d26d7eb5614387eaa628c7b61eb1e4", "filename": "gcc/config/s390/s390.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3185e714e877b2b4d14ade0865322f71a8cbf6/gcc%2Fconfig%2Fs390%2Fs390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3185e714e877b2b4d14ade0865322f71a8cbf6/gcc%2Fconfig%2Fs390%2Fs390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.cc?ref=1e3185e714e877b2b4d14ade0865322f71a8cbf6", "patch": "@@ -3636,7 +3636,7 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \n \t/* It is going to be a load/store on condition.  Make it\n \t   slightly more expensive than a normal load.  */\n-\t*total = COSTS_N_INSNS (1) + 1;\n+\t*total = COSTS_N_INSNS (1) + 2;\n \n \trtx dst = SET_DEST (x);\n \trtx then = XEXP (SET_SRC (x), 1);"}, {"sha": "5eee8e86b423bc3cb778087bed8ecdda6d2479c3", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3185e714e877b2b4d14ade0865322f71a8cbf6/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3185e714e877b2b4d14ade0865322f71a8cbf6/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=1e3185e714e877b2b4d14ade0865322f71a8cbf6", "patch": "@@ -7003,9 +7003,9 @@\n   if (!CONSTANT_P (els))\n     els = simplify_gen_subreg (E_SImode, els, <MODE>mode, 0);\n \n-  rtx tmp_target = gen_reg_rtx (E_SImode);\n+  rtx tmp_target = simplify_gen_subreg (E_SImode, operands[0], <MODE>mode, 0);\n+\n   emit_insn (gen_movsicc (tmp_target, operands[1], then, els));\n-  emit_move_insn (operands[0], gen_lowpart (<MODE>mode, tmp_target));\n   DONE;\n })\n "}, {"sha": "031cc433f567c6b82a2985c6fdfdbe4242c61608", "filename": "gcc/testsuite/gcc.target/s390/ifcvt-two-insns-int.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3185e714e877b2b4d14ade0865322f71a8cbf6/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fifcvt-two-insns-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3185e714e877b2b4d14ade0865322f71a8cbf6/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fifcvt-two-insns-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fifcvt-two-insns-int.c?ref=1e3185e714e877b2b4d14ade0865322f71a8cbf6", "patch": "@@ -5,7 +5,6 @@\n \n /* { dg-final { scan-assembler \"lochinle\\t%r.?,1\" } } */\n /* { dg-final { scan-assembler \"locrnle\\t.*\" } } */\n-#include <stdbool.h>\n #include <limits.h>\n #include <stdio.h>\n #include <assert.h>\n@@ -33,7 +32,7 @@ int main()\n {\n   int a[] = {2, 1, -13, INT_MAX, INT_MIN, 0};\n \n-  int res = foo (a, sizeof (a));\n+  int res = foo (a, sizeof (a) / sizeof (a[0]));\n \n   assert (res == (INT_MIN + 1));\n }"}, {"sha": "cd04d2ad33ebb83429684f5c289535eb4c74a342", "filename": "gcc/testsuite/gcc.target/s390/ifcvt-two-insns-long.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3185e714e877b2b4d14ade0865322f71a8cbf6/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fifcvt-two-insns-long.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3185e714e877b2b4d14ade0865322f71a8cbf6/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fifcvt-two-insns-long.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fifcvt-two-insns-long.c?ref=1e3185e714e877b2b4d14ade0865322f71a8cbf6", "patch": "@@ -5,7 +5,6 @@\n \n /* { dg-final { scan-assembler \"locghinle\\t%r.?,1\" } } */\n /* { dg-final { scan-assembler \"locgrnle\\t.*\" } } */\n-#include <stdbool.h>\n #include <limits.h>\n #include <stdio.h>\n #include <assert.h>\n@@ -33,7 +32,7 @@ int main()\n {\n   long a[] = {2, 1, -13, LONG_MAX, LONG_MIN, 0};\n \n-  long res = foo (a, sizeof (a));\n+  long res = foo (a, sizeof (a) / sizeof (a[0]));\n \n   assert (res == (LONG_MIN + 1));\n }"}]}