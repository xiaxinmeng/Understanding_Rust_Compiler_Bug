{"sha": "6b4f5050a9a5156eb23b9174ff576a77b1149465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI0ZjUwNTBhOWE1MTU2ZWIyM2I5MTc0ZmY1NzZhNzdiMTE0OTQ2NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-12-01T07:27:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-01T07:27:58Z"}, "message": "re PR target/54589 (struct offset add should be folded into address calculation)\n\n\tPR target/54589\n\t* combine.c (find_split_point): For invalid memory address\n\tnonobj + obj + const, if reg + obj + const is valid addressing\n\tmode, split at nonobj.  Use if rather than else if for the\n\tfallback.  Comment fixes.\n\n\t* gcc.target/i386/pr54589.c: New test.\n\nFrom-SVN: r266707", "tree": {"sha": "aee5b5dee90397d7a4c1d9984482cdc9fbcfc202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aee5b5dee90397d7a4c1d9984482cdc9fbcfc202"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b4f5050a9a5156eb23b9174ff576a77b1149465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b4f5050a9a5156eb23b9174ff576a77b1149465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b4f5050a9a5156eb23b9174ff576a77b1149465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b4f5050a9a5156eb23b9174ff576a77b1149465/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1072cfdf34f5fda7091282a4780f4974cac306d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1072cfdf34f5fda7091282a4780f4974cac306d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1072cfdf34f5fda7091282a4780f4974cac306d3"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "b215a9c635776365520e94deaa42575ca419035f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4f5050a9a5156eb23b9174ff576a77b1149465/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4f5050a9a5156eb23b9174ff576a77b1149465/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b4f5050a9a5156eb23b9174ff576a77b1149465", "patch": "@@ -1,3 +1,11 @@\n+2018-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/54589\n+\t* combine.c (find_split_point): For invalid memory address\n+\tnonobj + obj + const, if reg + obj + const is valid addressing\n+\tmode, split at nonobj.  Use if rather than else if for the\n+\tfallback.  Comment fixes.\n+\n 2018-11-30  Indu Bhagat  <indu.bhagat@oracle.com>\n \n \t* coverage.c (get_coverage_counts): Use from_function_decl for precise"}, {"sha": "7e611399f2cd7a7ab60b780a2f6a24cb317004cb", "filename": "gcc/combine.c", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4f5050a9a5156eb23b9174ff576a77b1149465/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4f5050a9a5156eb23b9174ff576a77b1149465/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6b4f5050a9a5156eb23b9174ff576a77b1149465", "patch": "@@ -4945,7 +4945,7 @@ find_split_point (rtx *loc, rtx_insn *insn, bool set_src)\n \t}\n \n       /* If we have a PLUS whose second operand is a constant and the\n-\t address is not valid, perhaps will can split it up using\n+\t address is not valid, perhaps we can split it up using\n \t the machine-specific way to split large constants.  We use\n \t the first pseudo-reg (one of the virtual regs) as a placeholder;\n \t it will not remain in the result.  */\n@@ -4960,7 +4960,7 @@ find_split_point (rtx *loc, rtx_insn *insn, bool set_src)\n \n \t  /* This should have produced two insns, each of which sets our\n \t     placeholder.  If the source of the second is a valid address,\n-\t     we can make put both sources together and make a split point\n+\t     we can put both sources together and make a split point\n \t     in the middle.  */\n \n \t  if (seq\n@@ -5001,14 +5001,51 @@ find_split_point (rtx *loc, rtx_insn *insn, bool set_src)\n \t\t}\n \t    }\n \n+\t  /* If that didn't work and we have a nested plus, like:\n+\t     ((REG1 * CONST1) + REG2) + CONST2 and (REG1 + REG2) + CONST2\n+\t     is valid address, try to split (REG1 * CONST1).  */\n+\t  if (GET_CODE (XEXP (XEXP (x, 0), 0)) == PLUS\n+\t      && !OBJECT_P (XEXP (XEXP (XEXP (x, 0), 0), 0))\n+\t      && OBJECT_P (XEXP (XEXP (XEXP (x, 0), 0), 1))\n+\t      && ! (GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 0)) == SUBREG\n+\t\t    && OBJECT_P (SUBREG_REG (XEXP (XEXP (XEXP (x, 0),\n+\t\t\t\t\t\t\t 0), 0)))))\n+\t    {\n+\t      rtx tem = XEXP (XEXP (XEXP (x, 0), 0), 0);\n+\t      XEXP (XEXP (XEXP (x, 0), 0), 0) = reg;\n+\t      if (memory_address_addr_space_p (GET_MODE (x), XEXP (x, 0),\n+\t\t\t\t\t       MEM_ADDR_SPACE (x)))\n+\t\t{\n+\t\t  XEXP (XEXP (XEXP (x, 0), 0), 0) = tem;\n+\t\t  return &XEXP (XEXP (XEXP (x, 0), 0), 0);\n+\t\t}\n+\t      XEXP (XEXP (XEXP (x, 0), 0), 0) = tem;\n+\t    }\n+\t  else if (GET_CODE (XEXP (XEXP (x, 0), 0)) == PLUS\n+\t\t   && OBJECT_P (XEXP (XEXP (XEXP (x, 0), 0), 0))\n+\t\t   && !OBJECT_P (XEXP (XEXP (XEXP (x, 0), 0), 1))\n+\t\t   && ! (GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 1)) == SUBREG\n+\t\t\t && OBJECT_P (SUBREG_REG (XEXP (XEXP (XEXP (x, 0),\n+\t\t\t\t\t\t\t      0), 1)))))\n+\t    {\n+\t      rtx tem = XEXP (XEXP (XEXP (x, 0), 0), 1);\n+\t      XEXP (XEXP (XEXP (x, 0), 0), 1) = reg;\n+\t      if (memory_address_addr_space_p (GET_MODE (x), XEXP (x, 0),\n+\t\t\t\t\t       MEM_ADDR_SPACE (x)))\n+\t\t{\n+\t\t  XEXP (XEXP (XEXP (x, 0), 0), 1) = tem;\n+\t\t  return &XEXP (XEXP (XEXP (x, 0), 0), 1);\n+\t\t}\n+\t      XEXP (XEXP (XEXP (x, 0), 0), 1) = tem;\n+\t    }\n+\n \t  /* If that didn't work, perhaps the first operand is complex and\n \t     needs to be computed separately, so make a split point there.\n \t     This will occur on machines that just support REG + CONST\n \t     and have a constant moved through some previous computation.  */\n-\n-\t  else if (!OBJECT_P (XEXP (XEXP (x, 0), 0))\n-\t\t   && ! (GET_CODE (XEXP (XEXP (x, 0), 0)) == SUBREG\n-\t\t\t && OBJECT_P (SUBREG_REG (XEXP (XEXP (x, 0), 0)))))\n+\t  if (!OBJECT_P (XEXP (XEXP (x, 0), 0))\n+\t      && ! (GET_CODE (XEXP (XEXP (x, 0), 0)) == SUBREG\n+\t\t    && OBJECT_P (SUBREG_REG (XEXP (XEXP (x, 0), 0)))))\n \t    return &XEXP (XEXP (x, 0), 0);\n \t}\n "}, {"sha": "c5ca4be86c49fbe7450f0927f00cb079d1e15371", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4f5050a9a5156eb23b9174ff576a77b1149465/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4f5050a9a5156eb23b9174ff576a77b1149465/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b4f5050a9a5156eb23b9174ff576a77b1149465", "patch": "@@ -1,3 +1,8 @@\n+2018-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/54589\n+\t* gcc.target/i386/pr54589.c: New test.\n+\n 2018-11-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/85368"}, {"sha": "c1032d71c29bef006762433b36d9a014b6f10c45", "filename": "gcc/testsuite/gcc.target/i386/pr54589.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4f5050a9a5156eb23b9174ff576a77b1149465/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54589.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4f5050a9a5156eb23b9174ff576a77b1149465/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54589.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54589.c?ref=6b4f5050a9a5156eb23b9174ff576a77b1149465", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/54589 */\n+/* { dg-do compile { target { *-*-linux* && lp64 } } } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t]+(?:t\\\\+336\\\\(%r..\\\\)|336\\\\(%r..,%r..\\\\)), %eax\" } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t]+340\\\\(%r..,%r..\\\\), %eax\" } } */\n+/* { dg-final { scan-assembler-times \"salq\\[^\\n\\r]*4, %\" 2 } } */\n+/* { dg-final { scan-assembler-not \"addq\\[ \\t]\" } } */\n+\n+struct S { int a, b, c, d; };\n+struct T { struct S e[16]; struct S f[1024]; } t;\n+\n+int\n+foo (unsigned long x)\n+{\n+  return t.f[x + 5].a;\n+}\n+\n+int\n+bar (struct T *x, unsigned long y)\n+{\n+  return x->f[y + 5].b;\n+}"}]}