{"sha": "451dcc6693e5e489f9f5bf6ba90cedf8f335ad00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxZGNjNjY5M2U1ZTQ4OWY5ZjViZjZiYTkwY2VkZjhmMzM1YWQwMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-21T06:05:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-21T06:05:39Z"}, "message": "PR c++/65168 - -Waddress in unevaluated context.\n\ngcc/c-family/\n\t* c-common.c (c_common_truthvalue_conversion): Check\n\tc_inhibit_evaluation_warnings for warning about address of\n\treference.\ngcc/cp/\n\t* typeck.c (cp_truthvalue_conversion): Compare pointers to nullptr.\n\tDon't set c_inhibit_evaluation_warnings.\n\nFrom-SVN: r238560", "tree": {"sha": "ad779ad8440332e26e9a3100fdf1370031d7ddd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad779ad8440332e26e9a3100fdf1370031d7ddd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e96fe88c518ddc2d8917355d1781de3f8714c348", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96fe88c518ddc2d8917355d1781de3f8714c348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e96fe88c518ddc2d8917355d1781de3f8714c348"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "e244e8aea014cc61fb1ed91f97d4cc81aab6c960", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=451dcc6693e5e489f9f5bf6ba90cedf8f335ad00", "patch": "@@ -1,3 +1,10 @@\n+2016-07-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/65168\n+\t* c-common.c (c_common_truthvalue_conversion): Check\n+\tc_inhibit_evaluation_warnings for warning about address of\n+\treference.\n+\n 2016-07-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.h (lookup_name_fuzzy): Convert return type from tree to"}, {"sha": "9900e93ffc29a79ef4d255cd06d2f6dd8df0ca63", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=451dcc6693e5e489f9f5bf6ba90cedf8f335ad00", "patch": "@@ -4551,6 +4551,7 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n \ttree fromtype = TREE_TYPE (TREE_OPERAND (expr, 0));\n \n \tif (POINTER_TYPE_P (totype)\n+\t    && !c_inhibit_evaluation_warnings\n \t    && TREE_CODE (fromtype) == REFERENCE_TYPE)\n \t  {\n \t    tree inner = expr;"}, {"sha": "be223f2c17799be3c180e556d96fd67c6d86287c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=451dcc6693e5e489f9f5bf6ba90cedf8f335ad00", "patch": "@@ -1,5 +1,9 @@\n 2016-07-21  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/65168\n+\t* typeck.c (cp_truthvalue_conversion): Compare pointers to nullptr.\n+\tDon't set c_inhibit_evaluation_warnings.\n+\n \tPR c++/71121\n \t* cp-gimplify.c (cp_fully_fold): First call maybe_constant_value.\n "}, {"sha": "d4bfb112a534972d7c7303a934c098e998a523d3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=451dcc6693e5e489f9f5bf6ba90cedf8f335ad00", "patch": "@@ -5459,21 +5459,10 @@ tree\n cp_truthvalue_conversion (tree expr)\n {\n   tree type = TREE_TYPE (expr);\n-  if (TYPE_PTRDATAMEM_P (type)\n+  if (TYPE_PTR_OR_PTRMEM_P (type)\n       /* Avoid ICE on invalid use of non-static member function.  */\n       || TREE_CODE (expr) == FUNCTION_DECL)\n-    return build_binary_op (EXPR_LOCATION (expr),\n-\t\t\t    NE_EXPR, expr, nullptr_node, 1);\n-  else if (TYPE_PTR_P (type) || TYPE_PTRMEMFUNC_P (type))\n-    {\n-      /* With -Wzero-as-null-pointer-constant do not warn for an\n-\t 'if (p)' or a 'while (!p)', where p is a pointer.  */\n-      tree ret;\n-      ++c_inhibit_evaluation_warnings;\n-      ret = c_common_truthvalue_conversion (input_location, expr);\n-      --c_inhibit_evaluation_warnings;\n-      return ret;\n-    }\n+    return build_binary_op (input_location, NE_EXPR, expr, nullptr_node, 1);\n   else\n     return c_common_truthvalue_conversion (input_location, expr);\n }"}, {"sha": "13d7cd2c0019a23054d98c5cfbe997d70e671213", "filename": "gcc/testsuite/g++.dg/warn/Waddress-3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-3.C?ref=451dcc6693e5e489f9f5bf6ba90cedf8f335ad00", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/65168\n+// { dg-do compile { target c++11 } }\n+// { dg-options -Waddress }\n+// We shouldn't warn in unevaluated context about the address of a reference\n+// always being true.\n+\n+template <class T, class U>\n+auto f(U&& u) -> decltype(T(u)) { }\n+\n+int main()\n+{\n+  bool ar[4];\n+  f<bool>(ar);\n+}"}, {"sha": "48b9f728bfdc0df2d650d158d04888c98a59bb4b", "filename": "gcc/testsuite/g++.dg/warn/Walways-true-1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-1.C?ref=451dcc6693e5e489f9f5bf6ba90cedf8f335ad00", "patch": "@@ -12,19 +12,19 @@ void\n bar (int a)\n {\n  lab:\n-  if (foo)\t// { dg-warning \"always evaluate as\" \"correct warning\" }\n+  if (foo)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n     foo (0);\n   if (foo (1))\n     ;\n-  if (&i)\t// { dg-warning \"always evaluate as\" \"correct warning\" }\n+  if (&i)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n     foo (2);\n   if (i)\n     foo (3);\n-  if (&a)\t// { dg-warning \"always evaluate as\" \"correct warning\" }\n+  if (&a)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n     foo (4);\n   if (a)\n     foo (5);\n-  if (&&lab)\t// { dg-warning \"always evaluate as\" \"correct warning\" }\n+  if (&&lab)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n     foo (6);\n   if (foo == 0)\t// { dg-warning \"never be NULL\" \"correct warning\" }\n     foo (7);"}, {"sha": "e4b5713c88fdd419657bd7bab613556dceb98915", "filename": "gcc/testsuite/g++.dg/warn/Walways-true-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451dcc6693e5e489f9f5bf6ba90cedf8f335ad00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C?ref=451dcc6693e5e489f9f5bf6ba90cedf8f335ad00", "patch": "@@ -23,11 +23,11 @@ bar (int a)\n     foo (2);\n   if (i)\n     foo (3);\n-  if (&a)\t// { dg-warning \"always evaluate as\" \"correct warning\" }\n+  if (&a)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n     foo (4);\n   if (a)\n     foo (5);\n-  if (&&lab)\t// { dg-warning \"always evaluate as\" \"correct warning\" }\n+  if (&&lab)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n     foo (6);\n   if (foo == 0)\n     foo (7);"}]}