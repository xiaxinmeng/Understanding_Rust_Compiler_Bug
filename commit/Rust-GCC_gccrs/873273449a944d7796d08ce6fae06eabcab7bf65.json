{"sha": "873273449a944d7796d08ce6fae06eabcab7bf65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODczMjczNDQ5YTk0NGQ3Nzk2ZDA4Y2U2ZmFlMDZlYWJjYWI3YmY2NQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-08-11T19:59:17Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-08-11T21:34:33Z"}, "message": "rs6000: Add available-everywhere and ancient builtins\n\n2021-08-11  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-builtin-new.def: Add always, power5, and\n\tpower6 stanzas.", "tree": {"sha": "52c4d65814d700de095411e2a2e69d92c1527305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52c4d65814d700de095411e2a2e69d92c1527305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/873273449a944d7796d08ce6fae06eabcab7bf65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873273449a944d7796d08ce6fae06eabcab7bf65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873273449a944d7796d08ce6fae06eabcab7bf65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873273449a944d7796d08ce6fae06eabcab7bf65/comments", "author": null, "committer": null, "parents": [{"sha": "ba6aa47470550065d1ff8a8acb40654cdc85fbd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6aa47470550065d1ff8a8acb40654cdc85fbd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6aa47470550065d1ff8a8acb40654cdc85fbd9"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "61f5b94401ba35b9b3de57c66a18bac238a75975", "filename": "gcc/config/rs6000/rs6000-builtin-new.def", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873273449a944d7796d08ce6fae06eabcab7bf65/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873273449a944d7796d08ce6fae06eabcab7bf65/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def?ref=873273449a944d7796d08ce6fae06eabcab7bf65", "patch": "@@ -184,6 +184,82 @@\n \n \n \n+; Builtins that have been around since time immemorial or are just\n+; considered available everywhere.\n+[always]\n+  void __builtin_cpu_init ();\n+    CPU_INIT nothing {cpu}\n+\n+  bool __builtin_cpu_is (string);\n+    CPU_IS nothing {cpu}\n+\n+  bool __builtin_cpu_supports (string);\n+    CPU_SUPPORTS nothing {cpu}\n+\n+  unsigned long long __builtin_ppc_get_timebase ();\n+    GET_TB rs6000_get_timebase {}\n+\n+  double __builtin_mffs ();\n+    MFFS rs6000_mffs {}\n+\n+; This thing really assumes long double == __ibm128, and I'm told it has\n+; been used as such within libgcc.  Given that __builtin_pack_ibm128\n+; exists for the same purpose, this should really not be used at all.\n+; TODO: Consider adding special handling for this to warn whenever\n+; long double is not __ibm128.\n+  const long double __builtin_pack_longdouble (double, double);\n+    PACK_TF packtf {}\n+\n+  unsigned long __builtin_ppc_mftb ();\n+    MFTB rs6000_mftb_di {32bit}\n+\n+  void __builtin_mtfsb0 (const int<5>);\n+    MTFSB0 rs6000_mtfsb0 {}\n+\n+  void __builtin_mtfsb1 (const int<5>);\n+    MTFSB1 rs6000_mtfsb1 {}\n+\n+  void __builtin_mtfsf (const int<8>, double);\n+    MTFSF rs6000_mtfsf {}\n+\n+  const __ibm128 __builtin_pack_ibm128 (double, double);\n+    PACK_IF packif {}\n+\n+  void __builtin_set_fpscr_rn (const int[0,3]);\n+    SET_FPSCR_RN rs6000_set_fpscr_rn {}\n+\n+  const double __builtin_unpack_ibm128 (__ibm128, const int<1>);\n+    UNPACK_IF unpackif {}\n+\n+; See above comments for __builtin_pack_longdouble.\n+  const double __builtin_unpack_longdouble (long double, const int<1>);\n+    UNPACK_TF unpacktf {}\n+\n+\n+; Builtins that have been around just about forever, but not quite.\n+[power5]\n+  fpmath double __builtin_recipdiv (double, double);\n+    RECIP recipdf3 {}\n+\n+  fpmath float __builtin_recipdivf (float, float);\n+    RECIPF recipsf3 {}\n+\n+  fpmath double __builtin_rsqrt (double);\n+    RSQRT rsqrtdf2 {}\n+\n+  fpmath float __builtin_rsqrtf (float);\n+    RSQRTF rsqrtsf2 {}\n+\n+\n+; Power6 builtins (ISA 2.05).\n+[power6]\n+  const signed long __builtin_p6_cmpb (signed long, signed long);\n+    CMPB cmpbdi3 {}\n+\n+  const signed int __builtin_p6_cmpb_32 (signed int, signed int);\n+    CMPB_32 cmpbsi3 {}\n+\n+\n ; AltiVec builtins.\n [altivec]\n   const vsc __builtin_altivec_abs_v16qi (vsc);"}]}