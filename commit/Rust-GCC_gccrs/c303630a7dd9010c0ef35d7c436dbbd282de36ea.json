{"sha": "c303630a7dd9010c0ef35d7c436dbbd282de36ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMwMzYzMGE3ZGQ5MDEwYzBlZjM1ZDdjNDM2ZGJiZDI4MmRlMzZlYQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-07-22T02:35:54Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-07-22T02:35:54Z"}, "message": "c-typeck.c (parser_build_binary_op): Add warning control to warning calls.\n\n* c-typeck.c (parser_build_binary_op): Add warning control to warning\ncalls.\n(c_finish_if_stmt): Likewise.\n\nFrom-SVN: r102265", "tree": {"sha": "29118f904433adbc3ffaf6f91fc9687a4f887285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29118f904433adbc3ffaf6f91fc9687a4f887285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c303630a7dd9010c0ef35d7c436dbbd282de36ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c303630a7dd9010c0ef35d7c436dbbd282de36ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c303630a7dd9010c0ef35d7c436dbbd282de36ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c303630a7dd9010c0ef35d7c436dbbd282de36ea/comments", "author": null, "committer": null, "parents": [{"sha": "30c54de9f2eb46d6f0bd9b2f4f2fdd4b875b904b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c54de9f2eb46d6f0bd9b2f4f2fdd4b875b904b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c54de9f2eb46d6f0bd9b2f4f2fdd4b875b904b"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "01322a4d753657e082705a90d2761f1425c4226b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c303630a7dd9010c0ef35d7c436dbbd282de36ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c303630a7dd9010c0ef35d7c436dbbd282de36ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c303630a7dd9010c0ef35d7c436dbbd282de36ea", "patch": "@@ -2,6 +2,8 @@\n \n \t* toplev.c (warn_deprecated_use): Add warning control to warning\n \tcall.\n+\t* c-typeck.c (parser_build_binary_op): Likewise.\n+\t(c_finish_if_stmt): Likewise.\n \n 2005-07-21  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "cb28838ffd02bc00cc016eedc09101636b23611f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c303630a7dd9010c0ef35d7c436dbbd282de36ea/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c303630a7dd9010c0ef35d7c436dbbd282de36ea/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c303630a7dd9010c0ef35d7c436dbbd282de36ea", "patch": "@@ -2363,14 +2363,16 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n \t{\n \t  if (code1 == PLUS_EXPR || code1 == MINUS_EXPR\n \t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (0, \"suggest parentheses around + or - inside shift\");\n+\t    warning (OPT_Wparentheses,\n+\t\t     \"suggest parentheses around + or - inside shift\");\n \t}\n \n       if (code == TRUTH_ORIF_EXPR)\n \t{\n \t  if (code1 == TRUTH_ANDIF_EXPR\n \t      || code2 == TRUTH_ANDIF_EXPR)\n-\t    warning (0, \"suggest parentheses around && within ||\");\n+\t    warning (OPT_Wparentheses,\n+\t\t     \"suggest parentheses around && within ||\");\n \t}\n \n       if (code == BIT_IOR_EXPR)\n@@ -2379,11 +2381,13 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n \t      || code1 == PLUS_EXPR || code1 == MINUS_EXPR\n \t      || code2 == BIT_AND_EXPR || code2 == BIT_XOR_EXPR\n \t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (0, \"suggest parentheses around arithmetic in operand of |\");\n+\t    warning (OPT_Wparentheses,\n+\t\t     \"suggest parentheses around arithmetic in operand of |\");\n \t  /* Check cases like x|y==z */\n \t  if (TREE_CODE_CLASS (code1) == tcc_comparison\n \t      || TREE_CODE_CLASS (code2) == tcc_comparison)\n-\t    warning (0, \"suggest parentheses around comparison in operand of |\");\n+\t    warning (OPT_Wparentheses,\n+\t\t     \"suggest parentheses around comparison in operand of |\");\n \t}\n \n       if (code == BIT_XOR_EXPR)\n@@ -2392,28 +2396,33 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n \t      || code1 == PLUS_EXPR || code1 == MINUS_EXPR\n \t      || code2 == BIT_AND_EXPR\n \t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (0, \"suggest parentheses around arithmetic in operand of ^\");\n+\t    warning (OPT_Wparentheses,\n+\t\t     \"suggest parentheses around arithmetic in operand of ^\");\n \t  /* Check cases like x^y==z */\n \t  if (TREE_CODE_CLASS (code1) == tcc_comparison\n \t      || TREE_CODE_CLASS (code2) == tcc_comparison)\n-\t    warning (0, \"suggest parentheses around comparison in operand of ^\");\n+\t    warning (OPT_Wparentheses,\n+\t\t     \"suggest parentheses around comparison in operand of ^\");\n \t}\n \n       if (code == BIT_AND_EXPR)\n \t{\n \t  if (code1 == PLUS_EXPR || code1 == MINUS_EXPR\n \t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (0, \"suggest parentheses around + or - in operand of &\");\n+\t    warning (OPT_Wparentheses,\n+\t\t     \"suggest parentheses around + or - in operand of &\");\n \t  /* Check cases like x&y==z */\n \t  if (TREE_CODE_CLASS (code1) == tcc_comparison\n \t      || TREE_CODE_CLASS (code2) == tcc_comparison)\n-\t    warning (0, \"suggest parentheses around comparison in operand of &\");\n+\t    warning (OPT_Wparentheses,\n+\t\t     \"suggest parentheses around comparison in operand of &\");\n \t}\n       /* Similarly, check for cases like 1<=i<=10 that are probably errors.  */\n       if (TREE_CODE_CLASS (code) == tcc_comparison\n \t  && (TREE_CODE_CLASS (code1) == tcc_comparison\n \t      || TREE_CODE_CLASS (code2) == tcc_comparison))\n-\twarning (0, \"comparisons like X<=Y<=Z do not have their mathematical meaning\");\n+\twarning (OPT_Wparentheses, \"comparisons like X<=Y<=Z do not \"\n+\t\t \"have their mathematical meaning\");\n \n     }\n \n@@ -6979,7 +6988,8 @@ c_finish_if_stmt (location_t if_locus, tree cond, tree then_block,\n     found:\n \n       if (COND_EXPR_ELSE (inner_if))\n-\t warning (0, \"%Hsuggest explicit braces to avoid ambiguous %<else%>\",\n+\t warning (OPT_Wparentheses,\n+\t\t  \"%Hsuggest explicit braces to avoid ambiguous %<else%>\",\n \t\t  &if_locus);\n     }\n "}]}