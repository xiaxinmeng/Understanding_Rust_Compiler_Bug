{"sha": "5066927d9ebedf0098887901674e576413312848", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA2NjkyN2Q5ZWJlZGYwMDk4ODg3OTAxNjc0ZTU3NjQxMzMxMjg0OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-04-22T20:28:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-04-22T20:28:05Z"}, "message": "re PR libstdc++/4150 (catastrophic performance decrease in C++ code)\n\n        PR libstdc++/4150\n        * include/std/std_streambuf.h (basic_streambuf::_M_set_indeterminate):\n        Move to filebuf.\n        (basic_streambuf::_M_set_determinate): Likewise.\n        (basic_streambuf::_M_is_indeterminate): Likewise.\n        * include/bits/std_fstream.h (basic_filebuf::_M_filepos): New\n        non-static data member.\n        (basic_filebuf::_M_underflow_common): New non-static member function.\n        (basic_filebuf::_M_underflow, _M_uflow): Call it.\n        (basic_filebuf::sync): Avoid useless seeking.\n        (basic_filebuf::_M_set_indeterminate): Move here from streambuf.\n        Set _M_filepos.\n        (basic_filebuf::_M_set_determinate): Likewise.\n        (basic_filebuf::_M_is_indeterminate): Likewise.\n        * include/bits/fstream.tcc (basic_filebuf::_M_really_overflow): Seek\n        back to _M_out_beg if necessary.\n        (basic_filebuf::seekoff): Likewise.\n        (basic_filebuf::_M_underflow_common): Generalization of old\n        underflow().  Don't seek back to _M_in_beg.\n        * src/ios.cc: Lose _GLIBCPP_AVOID_FSEEK stuff.\n        * config/os/solaris/solaris2.?/bits/os_defines.h: Likewise.\n        * config/os/bsd/freebsd/bits/os_defines.h: Likewise.\n        * config/os/mingw32/bits/os_defines.h: Likewise.\n        * testsuite/27_io/filebuf_virtuals.cc (test05): Don't overspecify\n        ungetc test.\n\nFrom-SVN: r52634", "tree": {"sha": "a33a1f81577d6fbf44ec2eca41aa87ca71f31743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a33a1f81577d6fbf44ec2eca41aa87ca71f31743"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5066927d9ebedf0098887901674e576413312848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5066927d9ebedf0098887901674e576413312848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5066927d9ebedf0098887901674e576413312848", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5066927d9ebedf0098887901674e576413312848/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f942d7a5df511c42fe0af6edb0138bd806684561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f942d7a5df511c42fe0af6edb0138bd806684561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f942d7a5df511c42fe0af6edb0138bd806684561"}], "stats": {"total": 204, "additions": 118, "deletions": 86}, "files": [{"sha": "61788e081c9485aaae86d3c52a35e45efb757557", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5066927d9ebedf0098887901674e576413312848", "patch": "@@ -1,3 +1,31 @@\n+2002-04-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR libstdc++/4150\n+\t* include/std/std_streambuf.h (basic_streambuf::_M_set_indeterminate): \n+\tMove to filebuf.\n+\t(basic_streambuf::_M_set_determinate): Likewise.\n+\t(basic_streambuf::_M_is_indeterminate): Likewise.\n+\t* include/bits/std_fstream.h (basic_filebuf::_M_filepos): New \n+\tnon-static data member.\n+\t(basic_filebuf::_M_underflow_common): New non-static member function.\n+\t(basic_filebuf::_M_underflow, _M_uflow): Call it.\n+\t(basic_filebuf::sync): Avoid useless seeking.\n+\t(basic_filebuf::_M_set_indeterminate): Move here from streambuf.\n+\tSet _M_filepos.\n+\t(basic_filebuf::_M_set_determinate): Likewise.\n+\t(basic_filebuf::_M_is_indeterminate): Likewise.\n+\t* include/bits/fstream.tcc (basic_filebuf::_M_really_overflow): Seek\n+\tback to _M_out_beg if necessary.\n+\t(basic_filebuf::seekoff): Likewise.\n+\t(basic_filebuf::_M_underflow_common): Generalization of old \n+\tunderflow().  Don't seek back to _M_in_beg.\n+\t* src/ios.cc: Lose _GLIBCPP_AVOID_FSEEK stuff.\n+\t* config/os/solaris/solaris2.?/bits/os_defines.h: Likewise.\n+\t* config/os/bsd/freebsd/bits/os_defines.h: Likewise.\n+\t* config/os/mingw32/bits/os_defines.h: Likewise.\n+\t* testsuite/27_io/filebuf_virtuals.cc (test05): Don't overspecify \n+\tungetc test.\n+\n 2002-04-22  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/istream.tcc (istream::read): Fix."}, {"sha": "cfc917f58731a0d713e0c8a004a0309c2947a393", "filename": "libstdc++-v3/config/os/bsd/freebsd/bits/os_defines.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fos_defines.h?ref=5066927d9ebedf0098887901674e576413312848", "patch": "@@ -36,6 +36,4 @@\n \n #define __glibcpp_long_double_bits __glibcpp_double_bits\n \n-#define _GLIBCPP_AVOID_FSEEK 1\n-\n #endif"}, {"sha": "5c99e09428cb89e2389c55640d55d2e07d33657f", "filename": "libstdc++-v3/config/os/mingw32/bits/os_defines.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fbits%2Fos_defines.h?ref=5066927d9ebedf0098887901674e576413312848", "patch": "@@ -34,7 +34,4 @@\n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n \n-#define _GLIBCPP_AVOID_FSEEK 1\n-\n-\n #endif"}, {"sha": "145ae66bf95d22e04285726462fc62175dc36df3", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/os_defines.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h?ref=5066927d9ebedf0098887901674e576413312848", "patch": "@@ -33,8 +33,6 @@\n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n \n-#define _GLIBCPP_AVOID_FSEEK 1\n-\n // These are typedefs which libio assumes are already in place (because\n // they really are, under Linux).\n #define __off_t     off_t"}, {"sha": "7aa9a7e8c62d95e0eaa247989034934c2fe2d906", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/bits/os_defines.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h?ref=5066927d9ebedf0098887901674e576413312848", "patch": "@@ -33,8 +33,6 @@\n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n \n-#define _GLIBCPP_AVOID_FSEEK 1\n-\n // These are typedefs which libio assumes are already in place (because\n // they really are, under Linux).\n #define __off_t     off_t"}, {"sha": "356c55c19544ee5b339c15e4e9ad108fdd1a41a5", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/bits/os_defines.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fos_defines.h?ref=5066927d9ebedf0098887901674e576413312848", "patch": "@@ -33,8 +33,6 @@\n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n \n-#define _GLIBCPP_AVOID_FSEEK 1\n-\n // These are typedefs which libio assumes are already in place (because\n // they really are, under Linux).\n #define __off_t     off_t"}, {"sha": "235b4a83fd386859304f0ba972a5ef2f1bb9b369", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=5066927d9ebedf0098887901674e576413312848", "patch": "@@ -206,7 +206,7 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::int_type \n     basic_filebuf<_CharT, _Traits>::\n-    underflow()\n+    _M_underflow_common(bool __bump)\n     {\n       int_type __ret = traits_type::eof();\n       bool __testin = _M_mode & ios_base::in;\n@@ -232,12 +232,8 @@ namespace std\n \t    {\n \t      if (__testout)\n \t\t_M_really_overflow();\n-#if _GLIBCPP_AVOID_FSEEK\n-\t      else if ((_M_in_cur - _M_in_beg) == 1)\n-\t\t_M_file.sys_getc();\n-#endif\n-\t      else \n-\t\t_M_file.seekoff(_M_in_cur - _M_in_beg, \n+\t      else if (_M_in_cur != _M_filepos)\n+\t\t_M_file.seekoff(_M_in_cur - _M_filepos,\n \t\t\t\tios_base::cur, ios_base::in);\n \t    }\n \n@@ -280,16 +276,16 @@ namespace std\n \t\t  if (__testout)\n \t\t    _M_out_cur = _M_in_cur;\n \t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n-#if _GLIBCPP_AVOID_FSEEK\n-\t\t  if (__elen == 1)\n-\t\t    _M_file.sys_ungetc(*_M_in_cur);\n-\t\t  else\n+\t\t  if (__bump)\n+\t\t    _M_in_cur_move(1);\n+\t\t  else if (_M_buf_size == 1)\n \t\t    {\n-#endif\n-\t\t      _M_file.seekoff(-__elen, ios_base::cur, ios_base::in);\n-#if _GLIBCPP_AVOID_FSEEK\n+\t\t      // If we are synced with stdio, we have to unget the\n+\t\t      // character we just read so that the file pointer\n+\t\t      // doesn't move.\n+\t\t      _M_file.sys_ungetc(*_M_in_cur);\n+\t\t      _M_set_indeterminate();\n \t\t    }\n-#endif\n \t\t}\t   \n \t    }\n \t}\n@@ -464,6 +460,15 @@ namespace std\n \t  streamsize __elen = 0;\n \t  streamsize __plen = 0;\n \n+\t  // Need to restore current position. The position of the external\n+\t  // byte sequence (_M_file) corresponds to _M_filepos, and we need\n+\t  // to move it to _M_out_beg for the write.\n+\t  if (_M_filepos && _M_filepos != _M_out_beg)\n+\t    {\n+\t      off_type __off = _M_out_beg - _M_filepos;\n+\t      _M_file.seekoff(__off, ios_base::cur);\n+\t    }\n+\n \t  // Convert internal buffer to external representation, output.\n \t  // NB: In the unbuffered case, no internal buffer exists. \n \t  if (!__testunbuffered)\n@@ -551,9 +556,8 @@ namespace std\n \t\t  _M_output_unshift();\n \t\t}\n \t      //in\n-\t      // NB: underflow() rewinds the external buffer.\n \t      else if (__testget && __way == ios_base::cur)\n-\t\t__computed_off += _M_in_cur - _M_in_beg;\n+\t\t__computed_off += _M_in_cur - _M_filepos;\n \t  \n \t      __ret = _M_file.seekoff(__computed_off, __way, __mode);\n \t      _M_set_indeterminate();"}, {"sha": "c0d80da37c4c270ba0b79d69522b818a184921fe", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 66, "deletions": 8, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=5066927d9ebedf0098887901674e576413312848", "patch": "@@ -93,6 +93,10 @@ namespace std\n       // XXX Needed?\n       bool\t\t\t_M_last_overflowed;\n \n+      // The position in the buffer corresponding to the external file\n+      // pointer.\n+      char_type*\t\t_M_filepos;\n+\n     public:\n       // Constructors/destructor:\n       basic_filebuf();\n@@ -137,8 +141,21 @@ namespace std\n       // underflow() and uflow() functions are called to get the next\n       // charater from the real input source when the buffer is empty.\n       // Buffered input uses underflow()\n+\n+      // The only difference between underflow() and uflow() is that the\n+      // latter bumps _M_in_cur after the read.  In the sync_with_stdio\n+      // case, this is important, as we need to unget the read character in\n+      // the underflow() case in order to maintain synchronization.  So\n+      // instead of calling underflow() from uflow(), we create a common\n+      // subroutine to do the real work.\n+      int_type\n+      _M_underflow_common(bool __bump);\n+\n+      virtual int_type\n+      underflow() { return _M_underflow_common(false); }\n+\n       virtual int_type\n-      underflow();\n+      uflow() { return _M_underflow_common(true); }\n \n       virtual int_type\n       pbackfail(int_type __c = _Traits::eof());\n@@ -189,14 +206,11 @@ namespace std\n \t// the file position with the external file.\n \tif (__testput && !_M_file.sync())\n \t  {\n-\t    // Need to restore current position. This interpreted as\n-\t    // the position of the external byte sequence (_M_file)\n-\t    // plus the offset in the current internal buffer\n-\t    // (_M_out_beg - _M_out_cur)\n-\t    streamoff __cur = _M_file.seekoff(0, ios_base::cur);\n-\t    off_type __off = _M_out_cur - _M_out_beg;\n+\t    // Need to restore current position after the write.\n+\t    off_type __off = _M_out_cur - _M_out_end;\n \t    _M_really_overflow();\n-\t    _M_file.seekpos(__cur + __off);\n+\t    if (__off)\n+\t      _M_file.seekoff(__off, ios_base::cur);\n \t  }\n \t_M_last_overflowed = false;\n \treturn 0;\n@@ -235,6 +249,50 @@ namespace std\n \n       void\n       _M_output_unshift();\n+\n+      // These three functions are used to clarify internal buffer\n+      // maintenance. After an overflow, or after a seekoff call that\n+      // started at beg or end, or possibly when the stream becomes\n+      // unbuffered, and a myrid other obscure corner cases, the\n+      // internal buffer does not truly reflect the contents of the\n+      // external buffer. At this point, for whatever reason, it is in\n+      // an indeterminate state.\n+      void\n+      _M_set_indeterminate(void)\n+      {\n+\tif (_M_mode & ios_base::in)\n+\t  this->setg(_M_buf, _M_buf, _M_buf);\n+\tif (_M_mode & ios_base::out)\n+\t  this->setp(_M_buf, _M_buf);\n+\t_M_filepos = _M_in_end;\n+      }\n+\n+      void\n+      _M_set_determinate(off_type __off)\n+      {\n+\tbool __testin = _M_mode & ios_base::in;\n+\tbool __testout = _M_mode & ios_base::out;\n+\tif (__testin)\n+\t  this->setg(_M_buf, _M_buf, _M_buf + __off);\n+\tif (__testout)\n+\t  this->setp(_M_buf, _M_buf + __off);\n+\t_M_filepos = _M_in_end;\n+      }\n+\n+      bool\n+      _M_is_indeterminate(void)\n+      { \n+\tbool __ret = false;\n+\t// Don't return true if unbuffered.\n+\tif (_M_buf)\n+\t  {\n+\t    if (_M_mode & ios_base::in)\n+\t      __ret = _M_in_beg == _M_in_cur && _M_in_cur == _M_in_end;\n+\t    if (_M_mode & ios_base::out)\n+\t      __ret = _M_out_beg == _M_out_cur && _M_out_cur == _M_out_end;\n+\t  }\n+\treturn __ret;\n+      }\n     };\n \n "}, {"sha": "012bf4e6cf6bfe1e2f35e78f93d439c6e3b1bfcc", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=5066927d9ebedf0098887901674e576413312848", "patch": "@@ -231,48 +231,6 @@ namespace std\n \treturn __ret;\n       }\n \n-      // These three functions are used to clarify internal buffer\n-      // maintenance. After an overflow, or after a seekoff call that\n-      // started at beg or end, or possibly when the stream becomes\n-      // unbuffered, and a myrid other obscure corner cases, the\n-      // internal buffer does not truly reflect the contents of the\n-      // external buffer. At this point, for whatever reason, it is in\n-      // an indeterminate state.\n-      void\n-      _M_set_indeterminate(void)\n-      {\n-\tif (_M_mode & ios_base::in)\n-\t  this->setg(_M_buf, _M_buf, _M_buf);\n-\tif (_M_mode & ios_base::out)\n-\t  this->setp(_M_buf, _M_buf);\n-      }\n-\n-      void\n-      _M_set_determinate(off_type __off)\n-      {\n-\tbool __testin = _M_mode & ios_base::in;\n-\tbool __testout = _M_mode & ios_base::out;\n-\tif (__testin)\n-\t  this->setg(_M_buf, _M_buf, _M_buf + __off);\n-\tif (__testout)\n-\t  this->setp(_M_buf, _M_buf + __off);\n-      }\n-\n-      bool\n-      _M_is_indeterminate(void)\n-      { \n-\tbool __ret = false;\n-\t// Don't return true if unbuffered.\n-\tif (_M_buf)\n-\t  {\n-\t    if (_M_mode & ios_base::in)\n-\t      __ret = _M_in_beg == _M_in_cur && _M_in_cur == _M_in_end;\n-\t    if (_M_mode & ios_base::out)\n-\t      __ret = _M_out_beg == _M_out_cur && _M_out_cur == _M_out_end;\n-\t  }\n-\treturn __ret;\n-      }\n-\n   public:\n       virtual \n       ~basic_streambuf() "}, {"sha": "1d97bf9e7a8c1ed94c365366926b3f252bbcd57a", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=5066927d9ebedf0098887901674e576413312848", "patch": "@@ -150,14 +150,6 @@ namespace std\n     int __out_bufsize = __sync ? 0 : static_cast<int>(BUFSIZ);\n     int __in_bufsize = __sync ? 1 : static_cast<int>(BUFSIZ);\n \n-#if _GLIBCPP_AVOID_FSEEK\n-    // Platforms that prefer to avoid fseek() calls on streams only\n-    // get their desire when the C++-layer input buffer size is 1.\n-    // This hack hurts performance but keeps correctness across\n-    // all types of streams that might be attached to (e.g.) cin.\n-    __in_bufsize = 1;\n-#endif\n-\n     // NB: The file globals.cc creates the four standard files\n     // with NULL buffers. At this point, we swap out the dummy NULL\n     // [io]stream objects and buffers with the real deal."}, {"sha": "fb370c36e50ea787567d96908b4522a15d02ea4d", "filename": "libstdc++-v3/testsuite/27_io/filebuf_virtuals.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5066927d9ebedf0098887901674e576413312848/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc?ref=5066927d9ebedf0098887901674e576413312848", "patch": "@@ -444,6 +444,9 @@ void test05()\n   strmsz_1 = fb_03.sputn(\"because because because. . .\", 28);  \n   VERIFY( strmsz_1 == 28 );\n   c1 = fb_03.sungetc();\n+  // Defect?  retval of sungetc is not necessarily the character ungotten.\n+  // So re-get it.\n+  c1 = fb_03.sgetc();\n   fb_03.pubsync(); \n   c3 = fb_03.sgetc();\n   VERIFY( c1 == c3 );"}]}