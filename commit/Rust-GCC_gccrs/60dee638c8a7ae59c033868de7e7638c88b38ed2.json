{"sha": "60dee638c8a7ae59c033868de7e7638c88b38ed2", "node_id": "C_kwDOANBUbNoAKDYwZGVlNjM4YzhhN2FlNTljMDMzODY4ZGU3ZTc2MzhjODhiMzhlZDI", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:55Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:55Z"}, "message": "aarch64: Tweak constness of option-related data\n\nSome of the option structures have all-const member variables.\nThat doesn't seem necessary: we can just use const on the objects\nthat are supposed to be read-only.\n\nAlso, with the new, more C++-heavy option handling, it seems\nbetter to use constexpr for the static data, to make sure that\nwe're not adding unexpected overhead.\n\ngcc/\n\t* common/config/aarch64/aarch64-common.cc (aarch64_option_extension)\n\t(processor_name_to_arch, arch_to_arch_name): Remove const from\n\tmember variables.\n\t(all_extensions, all_cores, all_architectures): Make a constexpr.\n\t* config/aarch64/aarch64.cc (processor): Remove const from\n\tmember variables.\n\t(all_architectures): Make a constexpr.\n\t* config/aarch64/driver-aarch64.cc (aarch64_core_data)\n\t(aarch64_arch_driver_info): Remove const from member variables.\n\t(aarch64_cpu_data, aarch64_arches): Make a constexpr.\n\t(get_arch_from_id): Return a pointer to const.\n\t(host_detect_local_cpu): Update accordingly.", "tree": {"sha": "f28201e0da3ce9629fb953074d75fa19e8640c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f28201e0da3ce9629fb953074d75fa19e8640c7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60dee638c8a7ae59c033868de7e7638c88b38ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60dee638c8a7ae59c033868de7e7638c88b38ed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60dee638c8a7ae59c033868de7e7638c88b38ed2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60dee638c8a7ae59c033868de7e7638c88b38ed2/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13af9e9fda391f4f0566ad8f0b4d0448a7e984d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13af9e9fda391f4f0566ad8f0b4d0448a7e984d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13af9e9fda391f4f0566ad8f0b4d0448a7e984d0"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "918ac844dcf08f510558a955ab9e099c1f5d3a16", "filename": "gcc/common/config/aarch64/aarch64-common.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60dee638c8a7ae59c033868de7e7638c88b38ed2/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60dee638c8a7ae59c033868de7e7638c88b38ed2/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc?ref=60dee638c8a7ae59c033868de7e7638c88b38ed2", "patch": "@@ -127,14 +127,14 @@ aarch64_handle_option (struct gcc_options *opts,\n /* An ISA extension in the co-processor and main instruction set space.  */\n struct aarch64_option_extension\n {\n-  const char *const name;\n-  const uint64_t flag_canonical;\n-  const uint64_t flags_on;\n-  const uint64_t flags_off;\n+  const char *name;\n+  uint64_t flag_canonical;\n+  uint64_t flags_on;\n+  uint64_t flags_off;\n };\n \n /* ISA extensions in AArch64.  */\n-static const struct aarch64_option_extension all_extensions[] =\n+static constexpr aarch64_option_extension all_extensions[] =\n {\n #define AARCH64_OPT_EXTENSION(NAME, IDENT, C, D, E, F) \\\n   {NAME, AARCH64_FL_##IDENT, \\\n@@ -147,21 +147,21 @@ static const struct aarch64_option_extension all_extensions[] =\n \n struct processor_name_to_arch\n {\n-  const char *const processor_name;\n-  const enum aarch64_arch arch;\n-  const uint64_t flags;\n+  const char *processor_name;\n+  aarch64_arch arch;\n+  uint64_t flags;\n };\n \n struct arch_to_arch_name\n {\n-  const enum aarch64_arch arch;\n-  const char *const arch_name;\n-  const uint64_t flags;\n+  aarch64_arch arch;\n+  const char *arch_name;\n+  uint64_t flags;\n };\n \n /* Map processor names to the architecture revision they implement and\n    the default set of architectural feature flags they support.  */\n-static const struct processor_name_to_arch all_cores[] =\n+static constexpr processor_name_to_arch all_cores[] =\n {\n #define AARCH64_CORE(NAME, CORE_IDENT, C, ARCH_IDENT, E, F, G, H, I) \\\n   {NAME, AARCH64_ARCH_##ARCH_IDENT, feature_deps::cpu_##CORE_IDENT},\n@@ -171,7 +171,7 @@ static const struct processor_name_to_arch all_cores[] =\n };\n \n /* Map architecture revisions to their string representation.  */\n-static const struct arch_to_arch_name all_architectures[] =\n+static constexpr arch_to_arch_name all_architectures[] =\n {\n #define AARCH64_ARCH(NAME, B, ARCH_IDENT, D, E)\t\\\n   {AARCH64_ARCH_##ARCH_IDENT, NAME, feature_deps::ARCH_IDENT ().enable},"}, {"sha": "70371afd1c50bd67f520353d93a3aec0c522ca83", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60dee638c8a7ae59c033868de7e7638c88b38ed2/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60dee638c8a7ae59c033868de7e7638c88b38ed2/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=60dee638c8a7ae59c033868de7e7638c88b38ed2", "patch": "@@ -2671,16 +2671,16 @@ aarch64_tuning_override_functions[] =\n /* A processor implementing AArch64.  */\n struct processor\n {\n-  const char *const name;\n-  enum aarch64_processor ident;\n-  enum aarch64_processor sched_core;\n-  enum aarch64_arch arch;\n-  const uint64_t flags;\n-  const struct tune_params *const tune;\n+  const char *name;\n+  aarch64_processor ident;\n+  aarch64_processor sched_core;\n+  aarch64_arch arch;\n+  uint64_t flags;\n+  const tune_params *tune;\n };\n \n /* Architectures implementing AArch64.  */\n-static const struct processor all_architectures[] =\n+static constexpr processor all_architectures[] =\n {\n #define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, D, E) \\\n   {NAME, CORE, CORE, AARCH64_ARCH_##ARCH_IDENT, \\"}, {"sha": "be41e2923db8108e6daa689a0235e9443b23fc96", "filename": "gcc/config/aarch64/driver-aarch64.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60dee638c8a7ae59c033868de7e7638c88b38ed2/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60dee638c8a7ae59c033868de7e7638c88b38ed2/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc?ref=60dee638c8a7ae59c033868de7e7638c88b38ed2", "patch": "@@ -50,7 +50,7 @@ struct aarch64_core_data\n   unsigned char implementer_id; /* Exactly 8 bits */\n   unsigned int part_no; /* 12 bits + 12 bits */\n   unsigned variant;\n-  const uint64_t flags;\n+  uint64_t flags;\n };\n \n #define AARCH64_BIG_LITTLE(BIG, LITTLE) \\\n@@ -64,7 +64,7 @@ struct aarch64_core_data\n #define AARCH64_CORE(CORE_NAME, CORE_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART, VARIANT) \\\n   { CORE_NAME, #ARCH, IMP, PART, VARIANT, feature_deps::cpu_##CORE_IDENT },\n \n-static struct aarch64_core_data aarch64_cpu_data[] =\n+static constexpr aarch64_core_data aarch64_cpu_data[] =\n {\n #include \"aarch64-cores.def\"\n   { NULL, NULL, INVALID_IMP, INVALID_CORE, ALL_VARIANTS, 0 }\n@@ -75,14 +75,14 @@ struct aarch64_arch_driver_info\n {\n   const char* id;\n   const char* name;\n-  const uint64_t flags;\n+  uint64_t flags;\n };\n \n /* Skip the leading \"V\" in the architecture name.  */\n #define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH_REV, FLAGS) \\\n   { #ARCH_IDENT + 1, NAME, feature_deps::ARCH_IDENT ().enable },\n \n-static struct aarch64_arch_driver_info aarch64_arches[] =\n+static constexpr aarch64_arch_driver_info aarch64_arches[] =\n {\n #include \"aarch64-arches.def\"\n   {NULL, NULL, 0}\n@@ -92,7 +92,7 @@ static struct aarch64_arch_driver_info aarch64_arches[] =\n /* Return an aarch64_arch_driver_info for the architecture described\n    by ID, or NULL if ID describes something we don't know about.  */\n \n-static struct aarch64_arch_driver_info*\n+static const aarch64_arch_driver_info *\n get_arch_from_id (const char* id)\n {\n   unsigned int i = 0;\n@@ -396,8 +396,7 @@ host_detect_local_cpu (int argc, const char **argv)\n \n       if (aarch64_cpu_data[i].name == NULL)\n \t{\n-\t  aarch64_arch_driver_info* arch_info\n-\t    = get_arch_from_id (DEFAULT_ARCH);\n+\t  auto arch_info = get_arch_from_id (DEFAULT_ARCH);\n \n \t  gcc_assert (arch_info);\n \n@@ -407,7 +406,7 @@ host_detect_local_cpu (int argc, const char **argv)\n       else if (arch)\n \t{\n \t  const char *arch_id = aarch64_cpu_data[i].arch;\n-\t  aarch64_arch_driver_info* arch_info = get_arch_from_id (arch_id);\n+\t  auto arch_info = get_arch_from_id (arch_id);\n \n \t  /* We got some arch indentifier that's not in aarch64-arches.def?  */\n \t  if (!arch_info)"}]}