{"sha": "f8b0665445bee8673b62c0a40ae257fe8c75a9b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhiMDY2NTQ0NWJlZTg2NzNiNjJjMGE0MGFlMjU3ZmU4Yzc1YTliNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-15T08:02:00Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-15T08:02:00Z"}, "message": "i386: Add V2SFmode hadd/hsub instructions [PR95046]\n\nPFACC/PFNACC 3dNow! instructions got their corresponding SSE alternative\nin SSE3, so these can't be implemented with TARGET_MMX_WITH_SSE, which\nimplies SSE2.  These instructions are only generated via builtins, and\nsince several 3dNow! insns have no corresponding SSE alternative,\nwe can't avoid MMX registers with 3dNow! builtins anyway.\n\nAdd SSE3/AVX alternatives to the insn pattern, so compiler will be able\nto use XMM registers when available, but don't prevent MMX registers,\nsince they are needed when SSE3 is not active.\n\nAdd additional generic insn patterns, used by the combiner to\nsynthesize horizontal V2SFmode add/sub instructions.  These patterns\nare active for TARGET_MMX_WITH_SSE only, and use only XMM registers.\n\ngcc/ChangeLog:\n\n\tPR target/95046\n\t* config/i386/i386.md (isa): Add sse3_noavx.\n\t(enabled): Handle sse3_noavx.\n\n\t* config/i386/mmx.md (mmx_haddv2sf3): New expander.\n\t(*mmx_haddv2sf3): Rename from mmx_haddv2sf3.  Add SSE/AVX\n\talternatives.  Match commutative vec_select selector operands.\n\t(*mmx_haddv2sf3_low): New insn pattern.\n\n\t(*mmx_hsubv2sf3): Add SSE/AVX alternatives.\n\t(*mmx_hsubv2sf3_low): New insn pattern.\n\ntestsuite/ChangeLog:\n\n\tPR target/95046\n\t* gcc.target/i386/pr95046-8.c: New test.", "tree": {"sha": "72a557800029112ec1e34a99d1ab98944c7ae5c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72a557800029112ec1e34a99d1ab98944c7ae5c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8b0665445bee8673b62c0a40ae257fe8c75a9b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b0665445bee8673b62c0a40ae257fe8c75a9b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b0665445bee8673b62c0a40ae257fe8c75a9b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b0665445bee8673b62c0a40ae257fe8c75a9b6/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4356120ba88c083dd5987376aab7590dd1e0e13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4356120ba88c083dd5987376aab7590dd1e0e13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4356120ba88c083dd5987376aab7590dd1e0e13"}], "stats": {"total": 129, "additions": 108, "deletions": 21}, "files": [{"sha": "587db3969cd94857b686e73a067fe01106395cf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b0665445bee8673b62c0a40ae257fe8c75a9b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b0665445bee8673b62c0a40ae257fe8c75a9b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8b0665445bee8673b62c0a40ae257fe8c75a9b6", "patch": "@@ -1,3 +1,17 @@\n+2020-05-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95046\n+\t* config/i386/i386.md (isa): Add sse3_noavx.\n+\t(enabled): Handle sse3_noavx.\n+\n+\t* config/i386/mmx.md (mmx_haddv2sf3): New expander.\n+\t(*mmx_haddv2sf3): Rename from mmx_haddv2sf3.  Add SSE/AVX\n+\talternatives.  Match commutative vec_select selector operands.\n+\t(*mmx_haddv2sf3_low): New insn pattern.\n+\n+\t(*mmx_hsubv2sf3): Add SSE/AVX alternatives.\n+\t(*mmx_hsubv2sf3_low): New insn pattern.\n+\n 2020-05-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/33315"}, {"sha": "b555c16564748d6ac7af9cac93662541644641ca", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b0665445bee8673b62c0a40ae257fe8c75a9b6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b0665445bee8673b62c0a40ae257fe8c75a9b6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f8b0665445bee8673b62c0a40ae257fe8c75a9b6", "patch": "@@ -803,8 +803,8 @@\n \n ;; Used to control the \"enabled\" attribute on a per-instruction basis.\n (define_attr \"isa\" \"base,x64,x64_sse2,x64_sse4,x64_sse4_noavx,x64_avx,nox64,\n-\t\t    sse_noavx,sse2,sse2_noavx,sse3,sse4,sse4_noavx,avx,noavx,\n-\t\t    avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n+\t\t    sse_noavx,sse2,sse2_noavx,sse3,sse3_noavx,sse4,sse4_noavx,\n+\t\t    avx,noavx,avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n \t\t    avx512bw,noavx512bw,avx512dq,noavx512dq,\n \t\t    avx512vl,noavx512vl,x64_avx512dq,x64_avx512bw\"\n   (const_string \"base\"))\n@@ -834,6 +834,8 @@\n \t (eq_attr \"isa\" \"sse2_noavx\")\n \t   (symbol_ref \"TARGET_SSE2 && !TARGET_AVX\")\n \t (eq_attr \"isa\" \"sse3\") (symbol_ref \"TARGET_SSE3\")\n+\t (eq_attr \"isa\" \"sse3_noavx\")\n+\t   (symbol_ref \"TARGET_SSE3 && !TARGET_AVX\")\n \t (eq_attr \"isa\" \"sse4\") (symbol_ref \"TARGET_SSE4_1\")\n \t (eq_attr \"isa\" \"sse4_noavx\")\n \t   (symbol_ref \"TARGET_SSE4_1 && !TARGET_AVX\")"}, {"sha": "f73c845265176b00dff590553a5481444c98313e", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 85, "deletions": 19, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b0665445bee8673b62c0a40ae257fe8c75a9b6/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b0665445bee8673b62c0a40ae257fe8c75a9b6/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=f8b0665445bee8673b62c0a40ae257fe8c75a9b6", "patch": "@@ -530,43 +530,109 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n-(define_insn \"mmx_haddv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+(define_expand \"mmx_haddv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n \t(vec_concat:V2SF\n \t  (plus:SF\n \t    (vec_select:SF\n-\t      (match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t      (parallel [(const_int  0)]))\n+\t      (match_operand:V2SF 1 \"register_operand\")\n+\t      (parallel [(const_int 0)]))\n \t    (vec_select:SF (match_dup 1) (parallel [(const_int 1)])))\n \t  (plus:SF\n-            (vec_select:SF\n-\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")\n-\t      (parallel [(const_int  0)]))\n+\t    (vec_select:SF\n+\t      (match_operand:V2SF 2 \"nonimmediate_operand\")\n+\t      (parallel [(const_int 0)]))\n \t    (vec_select:SF (match_dup 2) (parallel [(const_int 1)])))))]\n-  \"TARGET_3DNOW\"\n-  \"pfacc\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"mode\" \"V2SF\")])\n+  \"TARGET_3DNOW\")\n+\n+(define_insn \"*mmx_haddv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,x\")\n+\t(vec_concat:V2SF\n+\t  (plus:SF\n+\t    (vec_select:SF\n+\t      (match_operand:V2SF 1 \"register_operand\" \"0,0,x\")\n+\t      (parallel [(match_operand:SI 3 \"const_0_to_1_operand\")]))\n+\t    (vec_select:SF (match_dup 1)\n+\t    (parallel [(match_operand:SI 4 \"const_0_to_1_operand\")])))\n+\t  (plus:SF\n+            (vec_select:SF\n+\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym,x,x\")\n+\t      (parallel [(match_operand:SI 5 \"const_0_to_1_operand\")]))\n+\t    (vec_select:SF (match_dup 2)\n+\t    (parallel [(match_operand:SI 6 \"const_0_to_1_operand\")])))))]\n+  \"TARGET_3DNOW\n+   && INTVAL (operands[3]) != INTVAL (operands[4])\n+   && INTVAL (operands[5]) != INTVAL (operands[6])\"\n+  \"@\n+   pfacc\\t{%2, %0|%0, %2}\n+   haddps\\t{%2, %0|%0, %2}\n+   vhaddps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,sse3_noavx,avx\")\n+   (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n+   (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"prefix\" \"*,orig,vex\")\n+   (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n+\n+(define_insn \"*mmx_haddv2sf3_low\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x,x\")\n+\t(plus:SF\n+\t  (vec_select:SF\n+\t    (match_operand:V2SF 1 \"register_operand\" \"0,x\")\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_1_operand\")]))\n+\t  (vec_select:SF\n+\t    (match_dup 1)\n+\t    (parallel [(match_operand:SI 3 \"const_0_to_1_operand\")]))))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSE3\n+   && INTVAL (operands[2]) != INTVAL (operands[3])\"\n+  \"@\n+   haddps\\t{%0, %0|%0, %0}\n+   vhaddps\\t{%1, %1, %0|%0, %1, %1}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseadd1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"mmx_hsubv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,x\")\n \t(vec_concat:V2SF\n \t  (minus:SF\n \t    (vec_select:SF\n-\t      (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t      (match_operand:V2SF 1 \"register_operand\" \"0,0,x\")\n \t      (parallel [(const_int  0)]))\n \t    (vec_select:SF (match_dup 1) (parallel [(const_int 1)])))\n \t  (minus:SF\n             (vec_select:SF\n-\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")\n+\t      (match_operand:V2SF 2 \"register_mmxmem_operand\" \"ym,x,x\")\n \t      (parallel [(const_int  0)]))\n \t    (vec_select:SF (match_dup 2) (parallel [(const_int 1)])))))]\n   \"TARGET_3DNOW_A\"\n-  \"pfnacc\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"mode\" \"V2SF\")])\n+  \"@\n+   pfnacc\\t{%2, %0|%0, %2}\n+   hsubps\\t{%2, %0|%0, %2}\n+   vhsubps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,sse3_noavx,avx\")\n+   (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n+   (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"prefix\" \"*,orig,vex\")\n+   (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n+\n+(define_insn \"*mmx_hsubv2sf3_low\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x,x\")\n+\t(minus:SF\n+\t  (vec_select:SF\n+\t    (match_operand:V2SF 1 \"register_operand\" \"0,x\")\n+\t    (parallel [(const_int 0)]))\n+\t  (vec_select:SF\n+\t    (match_dup 1)\n+\t    (parallel [(const_int 1)]))))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSE3\"\n+  \"@\n+   hsubps\\t{%0, %0|%0, %0}\n+   vhsubps\\t{%1, %1, %0|%0, %1, %1}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseadd1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"mmx_addsubv2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")"}, {"sha": "4a7988f8a5c7f3dee2f6e2c333f3ca075e50ee6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b0665445bee8673b62c0a40ae257fe8c75a9b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b0665445bee8673b62c0a40ae257fe8c75a9b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8b0665445bee8673b62c0a40ae257fe8c75a9b6", "patch": "@@ -1,3 +1,8 @@\n+2020-05-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95046\n+\t* gcc.target/i386/pr95046-8.c: New test.\n+\n 2020-05-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/33315"}]}