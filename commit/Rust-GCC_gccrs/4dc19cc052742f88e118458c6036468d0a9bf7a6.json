{"sha": "4dc19cc052742f88e118458c6036468d0a9bf7a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRjMTljYzA1Mjc0MmY4OGUxMTg0NThjNjAzNjQ2OGQwYTliZjdhNg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2006-03-29T11:55:53Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2006-03-29T11:55:53Z"}, "message": "config.gcc (s390-*-linux-*, [...]): Add t-dfprules to tmake_file.\n\n2006-03-29  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config.gcc (s390-*-linux-*, s390x-*-linux*): Add t-dfprules to \n\ttmake_file.\n\t* config/s390/s390.c (S390_scalar_mode_supported_p): New function.\n\t(NR_C_MODES): Add TDmode, DDmode and SDmode.\n\t(s390_output_pool_entry, ): Accept MODE_DECIMAL_FLOAT.\n\t(s390_hard_regno_mode_ok): Disallow TDmode in integer regs.\n\t(s390_function_arg_float): Allow SDmode and DDmode values to be\n\tpassed in floating point registers.\n\t(s390_function_arg_integer, s390_function_value): Replace MODE_FLOAT \n\tcheck with SCALAR_FLOAT_MODE_P.\n\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define target macro.\n\nFrom-SVN: r112491", "tree": {"sha": "d8d134d3bae1ae04863febb7e4b3e1647676337e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8d134d3bae1ae04863febb7e4b3e1647676337e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dc19cc052742f88e118458c6036468d0a9bf7a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc19cc052742f88e118458c6036468d0a9bf7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc19cc052742f88e118458c6036468d0a9bf7a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc19cc052742f88e118458c6036468d0a9bf7a6/comments", "author": null, "committer": null, "parents": [{"sha": "f08ac361ee42e760b09453404da81d76a62a68b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08ac361ee42e760b09453404da81d76a62a68b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f08ac361ee42e760b09453404da81d76a62a68b0"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "1dbe439459bce6df1a4367b2434add39435d4aba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc19cc052742f88e118458c6036468d0a9bf7a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc19cc052742f88e118458c6036468d0a9bf7a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dc19cc052742f88e118458c6036468d0a9bf7a6", "patch": "@@ -1,3 +1,17 @@\n+2006-03-29  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config.gcc (s390-*-linux-*, s390x-*-linux*): Add t-dfprules to \n+\ttmake_file.\n+\t* config/s390/s390.c (S390_scalar_mode_supported_p): New function.\n+\t(NR_C_MODES): Add TDmode, DDmode and SDmode.\n+\t(s390_output_pool_entry, ): Accept MODE_DECIMAL_FLOAT.\n+\t(s390_hard_regno_mode_ok): Disallow TDmode in integer regs.\n+\t(s390_function_arg_float): Allow SDmode and DDmode values to be\n+\tpassed in floating point registers.\n+\t(s390_function_arg_integer, s390_function_value): Replace MODE_FLOAT \n+\tcheck with SCALAR_FLOAT_MODE_P.\n+\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define target macro.\n+\n 2006-03-28  Zdenek Dvorak <dvorakz@suse.cz>\n \n \tPR tree-optimization/25985"}, {"sha": "ef6364de7deee0e793560d61625c3ee59d56f501", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc19cc052742f88e118458c6036468d0a9bf7a6/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc19cc052742f88e118458c6036468d0a9bf7a6/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4dc19cc052742f88e118458c6036468d0a9bf7a6", "patch": "@@ -1887,15 +1887,15 @@ rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n \t;;\n s390-*-linux*)\n \ttm_file=\"s390/s390.h dbxelf.h elfos.h svr4.h linux.h s390/linux.h\"\n-\ttmake_file=\"${tmake_file} s390/t-crtstuff s390/t-linux\"\n+\ttmake_file=\"${tmake_file} t-dfprules s390/t-crtstuff s390/t-linux\"\n \t;;\n s390x-*-linux*)\n \ttm_file=\"s390/s390x.h s390/s390.h dbxelf.h elfos.h svr4.h linux.h s390/linux.h\"\n \ttm_p_file=s390/s390-protos.h\n \tmd_file=s390/s390.md\n \textra_modes=s390/s390-modes.def\n \tout_file=s390/s390.c\n-\ttmake_file=\"${tmake_file} s390/t-crtstuff s390/t-linux s390/t-linux64\"\n+\ttmake_file=\"${tmake_file} t-dfprules s390/t-crtstuff s390/t-linux s390/t-linux64\"\n \t;;\n s390x-ibm-tpf*)\n         tm_file=\"s390/s390x.h s390/s390.h dbxelf.h elfos.h svr4.h s390/tpf.h\""}, {"sha": "fdd4b5c54316c74b7265badb96c6ab87d28046aa", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc19cc052742f88e118458c6036468d0a9bf7a6/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc19cc052742f88e118458c6036468d0a9bf7a6/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4dc19cc052742f88e118458c6036468d0a9bf7a6", "patch": "@@ -334,6 +334,16 @@ struct machine_function GTY(())\n #define REGNO_PAIR_OK(REGNO, MODE)                               \\\n   (HARD_REGNO_NREGS ((REGNO), (MODE)) == 1 || !((REGNO) & 1))\n \n+/* Return true if the back end supports mode MODE.  */\n+static bool\n+s390_scalar_mode_supported_p (enum machine_mode mode)\n+{\n+  if (DECIMAL_FLOAT_MODE_P (mode))\n+    return true;\n+  else\n+    return default_scalar_mode_supported_p (mode);\n+}\n+\n /* Set the has_landing_pad_p flag in struct machine_function to VALUE.  */\n \n void\n@@ -5259,12 +5269,12 @@ replace_ltrel_base (rtx *x)\n /* We keep a list of constants which we have to add to internal\n    constant tables in the middle of large functions.  */\n \n-#define NR_C_MODES 8\n+#define NR_C_MODES 11\n enum machine_mode constant_modes[NR_C_MODES] =\n {\n-  TFmode, TImode,\n-  DFmode, DImode,\n-  SFmode, SImode,\n+  TFmode, TImode, TDmode,\n+  DFmode, DImode, DDmode,\n+  SFmode, SImode, SDmode,\n   HImode,\n   QImode\n };\n@@ -6207,6 +6217,7 @@ s390_output_pool_entry (rtx exp, enum machine_mode mode, unsigned int align)\n   switch (GET_MODE_CLASS (mode))\n     {\n     case MODE_FLOAT:\n+    case MODE_DECIMAL_FLOAT:\n       gcc_assert (GET_CODE (exp) == CONST_DOUBLE);\n \n       REAL_VALUE_FROM_CONST_DOUBLE (r, exp);\n@@ -6782,7 +6793,7 @@ s390_hard_regno_mode_ok (unsigned int regno, enum machine_mode mode)\n       if (REGNO_PAIR_OK (regno, mode))\n \t{\n \t  if (TARGET_64BIT \n-\t      || (mode != TFmode && mode != TCmode))\n+\t      || (mode != TFmode && mode != TCmode && mode != TDmode))\n \t    return true;\n \t}\t  \n       break;\n@@ -7601,7 +7612,7 @@ s390_function_arg_float (enum machine_mode mode, tree type)\n \n   /* No type info available for some library calls ...  */\n   if (!type)\n-    return mode == SFmode || mode == DFmode;\n+    return mode == SFmode || mode == DFmode || mode == SDmode || mode == DDmode;\n \n   /* The ABI says that record types with a single member are treated\n      just like that member would be.  */\n@@ -7643,7 +7654,7 @@ s390_function_arg_integer (enum machine_mode mode, tree type)\n   /* No type info available for some library calls ...  */\n   if (!type)\n     return GET_MODE_CLASS (mode) == MODE_INT\n-\t   || (TARGET_SOFT_FLOAT &&  GET_MODE_CLASS (mode) == MODE_FLOAT);\n+\t   || (TARGET_SOFT_FLOAT &&  SCALAR_FLOAT_MODE_P (mode));\n \n   /* We accept small integral (and similar) types.  */\n   if (INTEGRAL_TYPE_P (type)\n@@ -7805,11 +7816,10 @@ s390_function_value (tree type, enum machine_mode mode)\n       mode = promote_mode (type, TYPE_MODE (type), &unsignedp, 1);\n     }\n \n-  gcc_assert (GET_MODE_CLASS (mode) == MODE_INT\n-               || GET_MODE_CLASS (mode) == MODE_FLOAT);\n+  gcc_assert (GET_MODE_CLASS (mode) == MODE_INT || SCALAR_FLOAT_MODE_P (mode));\n   gcc_assert (GET_MODE_SIZE (mode) <= 8);\n \n-  if (TARGET_HARD_FLOAT && GET_MODE_CLASS (mode) == MODE_FLOAT)\n+  if (TARGET_HARD_FLOAT && SCALAR_FLOAT_MODE_P (mode))\n     return gen_rtx_REG (mode, 16);\n   else\n     return gen_rtx_REG (mode, 2);\n@@ -9303,6 +9313,9 @@ s390_reorg (void)\n #define TARGET_MANGLE_FUNDAMENTAL_TYPE s390_mangle_fundamental_type\n #endif\n \n+#undef TARGET_SCALAR_MODE_SUPPORTED_P\n+#define TARGET_SCALAR_MODE_SUPPORTED_P s390_scalar_mode_supported_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}]}