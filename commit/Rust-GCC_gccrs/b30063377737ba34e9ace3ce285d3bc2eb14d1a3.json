{"sha": "b30063377737ba34e9ace3ce285d3bc2eb14d1a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMwMDYzMzc3NzM3YmEzNGU5YWNlM2NlMjg1ZDNiYzJlYjE0ZDFhMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-12-23T05:26:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-12-23T05:26:41Z"}, "message": "re PR c/13382 (Type information for const pointer disappears during optimisation.)\n\n\tPR c/13382\n\t* c-typeck.c (convert_for_assignment): When converting from\n\tintegral type to pointer type, always call convert.\n\nFrom-SVN: r74960", "tree": {"sha": "0cba5018a8b615a6a26dd4931f5fa05526ab6b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cba5018a8b615a6a26dd4931f5fa05526ab6b28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b30063377737ba34e9ace3ce285d3bc2eb14d1a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b30063377737ba34e9ace3ce285d3bc2eb14d1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b30063377737ba34e9ace3ce285d3bc2eb14d1a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b30063377737ba34e9ace3ce285d3bc2eb14d1a3/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "adb83beed2e6048a262cb3b0f76357c8b14f7aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb83beed2e6048a262cb3b0f76357c8b14f7aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb83beed2e6048a262cb3b0f76357c8b14f7aae"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "81b80dff928b3e3bdf9d7048aabb1cbfd2d8592f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30063377737ba34e9ace3ce285d3bc2eb14d1a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30063377737ba34e9ace3ce285d3bc2eb14d1a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b30063377737ba34e9ace3ce285d3bc2eb14d1a3", "patch": "@@ -1,3 +1,9 @@\n+2003-12-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR c/13382\n+\t* c-typeck.c (convert_for_assignment): When converting from\n+\tintegral type to pointer type, always call convert.\n+\n 2003-12-22  Mark Mitchell  <mark@codesourcery.com>\n \n \t* doc/invoke.texi: Deprecate -fwritable-strings."}, {"sha": "682cbc0585fdb32c4ea3dbbe3f8f5622833f8355", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30063377737ba34e9ace3ce285d3bc2eb14d1a3/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30063377737ba34e9ace3ce285d3bc2eb14d1a3/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b30063377737ba34e9ace3ce285d3bc2eb14d1a3", "patch": "@@ -3608,12 +3608,10 @@ convert_for_assignment (tree type, tree rhs, const char *errtype,\n \t     && TREE_CODE (TREE_TYPE (rhs)) == INTEGER_TYPE\n \t     && TREE_CODE (TREE_OPERAND (rhs, 0)) == INTEGER_CST\n \t     && integer_zerop (TREE_OPERAND (rhs, 0))))\n-\t{\n \t  warn_for_assignment (\"%s makes pointer from integer without a cast\",\n \t\t\t       errtype, funname, parmnum);\n-\t  return convert (type, rhs);\n-\t}\n-      return null_pointer_node;\n+\n+      return convert (type, rhs);\n     }\n   else if (codel == INTEGER_TYPE && coder == POINTER_TYPE)\n     {"}, {"sha": "bf06beaf5afa5d8d724fc4342905133c194b706a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30063377737ba34e9ace3ce285d3bc2eb14d1a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30063377737ba34e9ace3ce285d3bc2eb14d1a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b30063377737ba34e9ace3ce285d3bc2eb14d1a3", "patch": "@@ -1,3 +1,7 @@\n+2003-12-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/null-pointer-1.c: New test.\n+\n 2003-12-22  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.old-deja/g++.jason/template18.C: Remove."}, {"sha": "8cc15c6d8662cd42d44e15699745ed6a726d9a2c", "filename": "gcc/testsuite/gcc.dg/null-pointer-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30063377737ba34e9ace3ce285d3bc2eb14d1a3/gcc%2Ftestsuite%2Fgcc.dg%2Fnull-pointer-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30063377737ba34e9ace3ce285d3bc2eb14d1a3/gcc%2Ftestsuite%2Fgcc.dg%2Fnull-pointer-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnull-pointer-1.c?ref=b30063377737ba34e9ace3ce285d3bc2eb14d1a3", "patch": "@@ -0,0 +1,20 @@\n+/* PR c/13382 */\n+/* Origin: Richard Hutchinson <richard.hutchinson@asa.co.uk> */\n+\n+/* Verify that the null initializer is converted to the right\n+   pointer type.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct t\n+{\n+  int aMember;\n+};\n+\n+struct t *const aPointer = 0;\n+\n+void foo()\n+{\n+  int anInt = (aPointer == 0) ? 0 : aPointer->aMember;\n+}"}]}