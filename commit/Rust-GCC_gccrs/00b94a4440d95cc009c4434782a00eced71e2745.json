{"sha": "00b94a4440d95cc009c4434782a00eced71e2745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBiOTRhNDQ0MGQ5NWNjMDA5YzQ0MzQ3ODJhMDBlY2VkNzFlMjc0NQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-06-21T05:29:09Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-06-21T05:29:09Z"}, "message": "cpperror.c (cpp_error): For traditional CPP, default to diagnostics on pfile->line.\n\n\t* cpperror.c (cpp_error): For traditional CPP, default to\n\tdiagnostics on pfile->line.\n\t* cpplib.c (prepare_directive_trad): Set line number for\n\tdiagnostics for #define too.\n\t* cpptrad.c (skip_whitespace): Skip comments properly.\n\t(_cpp_expansions_different_trad): Initialize quote2.\ntestsuite:\n\t* gcc.dg/cpp/trad: New directory with traditional tests copied\n\tfrom parent directory.\n\t* gcc.dg/cpp/assert_trad1.c, gcc.dg/cpp/assert_trad2.c,\n\tgcc.dg/cpp/assert_trad3.c, gcc.dg/cpp/defined_trad.c,\n\tgcc.dg/cpp/hash2.c, gcc.dg/cpp/tr-define.c, gcc.dg/cpp/tr-direct.c,\n\tgcc.dg/cpp/tr-sign.c, gcc.dg/cpp/tr-str.c, gcc.dg/cpp/uchar-2.c:\n\tMove to trad/ and rename.\n\t* gcc.dg/cpp/trad/__STDC__.c, gcc.dg/cpp/trad/comment.c,\n\tgcc.dg/cpp/trad/escaped-eof.c, gcc.dg/cpp/trad/redef1.c,\n\tgcc.dg/cpp/trad/redef2.c: New tests.\n\t* gcc.dg/cpp/trad/trad.exp: New driver.\n\nFrom-SVN: r54870", "tree": {"sha": "2ae1e294673a6d1f03b6b44a932a43d5d3aa422b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ae1e294673a6d1f03b6b44a932a43d5d3aa422b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00b94a4440d95cc009c4434782a00eced71e2745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b94a4440d95cc009c4434782a00eced71e2745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b94a4440d95cc009c4434782a00eced71e2745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b94a4440d95cc009c4434782a00eced71e2745/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c583c5c3f7c5de024850e435db94c1dad2df7c2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c583c5c3f7c5de024850e435db94c1dad2df7c2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c583c5c3f7c5de024850e435db94c1dad2df7c2d"}], "stats": {"total": 413, "additions": 407, "deletions": 6}, "files": [{"sha": "670e0f8ad366951ae4ae153087d1bb4f8d58a252", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -1,3 +1,12 @@\n+2002-06-21  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cpperror.c (cpp_error): For traditional CPP, default to\n+\tdiagnostics on pfile->line.\n+\t* cpplib.c (prepare_directive_trad): Set line number for\n+\tdiagnostics for #define too.\n+\t* cpptrad.c (skip_whitespace): Skip comments properly.\n+\t(_cpp_expansions_different_trad): Initialize quote2.\n+\n 2002-06-21  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/mmix/mmix.md: Change GNU CC to GCC in file header comment."}, {"sha": "0e3b0b631f0c470cb8f70672e8408f9fbb9f6765", "filename": "gcc/cpperror.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -137,8 +137,16 @@ cpp_error VPARAMS ((cpp_reader * pfile, int level, const char *msgid, ...))\n \n   if (pfile->buffer)\n     {\n-      line = pfile->cur_token[-1].line;\n-      column = pfile->cur_token[-1].col;\n+      if (CPP_OPTION (pfile, traditional))\n+\t{\n+\t  line = pfile->line;\n+\t  column = 0;\n+\t}\n+      else\n+\t{\n+\t  line = pfile->cur_token[-1].line;\n+\t  column = pfile->cur_token[-1].col;\n+\t}\n     }\n   else\n     line = column = 0;"}, {"sha": "59e2fe6709a45f09e6d40ff6c4cfdafce865d4b4", "filename": "gcc/cpplib.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -303,10 +303,11 @@ prepare_directive_trad (pfile)\n       pfile->state.skipping = was_skipping;\n       _cpp_overlay_buffer (pfile, pfile->out.base,\n \t\t\t   pfile->out.cur - pfile->out.base);\n-      /* Report diagnostics on the line of the directive.  */\n-      pfile->line = pfile->directive_line;\n     }\n \n+  /* Report diagnostics on the line of the directive.  */\n+  pfile->line = pfile->directive_line;\n+\n   /* Stop ISO C from expanding anything.  */\n   pfile->state.prevent_expansion++;\n }"}, {"sha": "b3413d031f0a2c3ca6acb78542cc814c679f1793", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -266,7 +266,7 @@ skip_whitespace (pfile, cur, skip_comments)\n       if (!c && cur - 1 != RLIMIT (pfile->context))\n \tcontinue;\n \n-      if (*cur == '/' && skip_comments)\n+      if (c == '/' && skip_comments)\n \t{\n \t  const uchar *tmp = skip_escaped_newlines (pfile, cur);\n \t  if (*tmp == '*')\n@@ -1118,7 +1118,7 @@ _cpp_expansions_different_trad (macro1, macro2)\n {\n   uchar *p1 = xmalloc (macro1->count + macro2->count);\n   uchar *p2 = p1 + macro1->count;\n-  uchar quote1 = 0, quote2;\n+  uchar quote1 = 0, quote2 = 0;\n   bool mismatch;\n   size_t len1, len2;\n "}, {"sha": "75b2189769a06baf9403a72a7be9bf160a6c76a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -1,3 +1,17 @@\n+2002-06-21  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/cpp/trad: New directory with traditional tests copied\n+\tfrom parent directory.\n+\t* gcc.dg/cpp/assert_trad1.c, gcc.dg/cpp/assert_trad2.c,\n+\tgcc.dg/cpp/assert_trad3.c, gcc.dg/cpp/defined_trad.c,\n+\tgcc.dg/cpp/hash2.c, gcc.dg/cpp/tr-define.c, gcc.dg/cpp/tr-direct.c,\n+\tgcc.dg/cpp/tr-sign.c, gcc.dg/cpp/tr-str.c, gcc.dg/cpp/uchar-2.c:\n+\tMove to trad/ and rename.\n+\t* gcc.dg/cpp/trad/__STDC__.c, gcc.dg/cpp/trad/comment.c,\n+\tgcc.dg/cpp/trad/escaped-eof.c, gcc.dg/cpp/trad/redef1.c,\n+\tgcc.dg/cpp/trad/redef2.c: New tests.\n+\t* gcc.dg/cpp/trad/trad.exp: New driver.\n+\n 2002-06-20  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* gcc.dg/cpp/assert_trad1.c, gcc.dg/cpp/assert_trad2.c,"}, {"sha": "b25bcb9aa76eae0fafe883a83cbbe2cb42d783af", "filename": "gcc/testsuite/gcc.dg/cpp/trad/__STDC__.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2F__STDC__.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2F__STDC__.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2F__STDC__.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,7 @@\n+/* Test that __STDC__ is not defined.  */\n+\n+/* { dg-do preprocess } */\n+\n+#if defined __STDC__\n+# error __STDC__ defined /* { dg-bogus \"__STDC__\" \"__STDC__ defined\" } */\n+#endif"}, {"sha": "ff7cc620bec9d3504a9524b8998834d6b0010ef7", "filename": "gcc/testsuite/gcc.dg/cpp/trad/assert1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert1.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,46 @@\n+/* Basic tests of the #assert preprocessor extension. */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+#define def unused expansion\n+#define fail  int fail\n+\n+#assert abc (def)\n+#assert abc (ghi)\n+#assert abc (jkl)\n+#assert space ( s p a c e )\n+\n+/* Basic: */\n+#if !#abc (def) || !#abc (ghi) || !#abc (jkl)\n+fail\n+#endif\n+\n+/* any answer for #abc */\n+#if !#abc\n+fail\n+#endif\n+\n+/* internal whitespace is collapsed,\n+   external whitespace is deleted  */\n+#if !#space (s p  a  c e) || !#space (  s p a c e  ) || #space (space)\n+fail\n+#endif\n+\n+/* removing assertions */\n+#unassert abc (jkl)\n+#if !#abc || !#abc (def) || !#abc (ghi) || #abc (jkl)\n+fail\n+#endif\n+\n+#unassert abc\n+#if #abc || #abc (def) || #abc (ghi) || #abc (jkl)\n+fail\n+#endif\n+\n+int gobble\n+\n+/* make sure it can succeed too.\n+   also check space before open paren isn't significant */\n+#if #space(s p a c e)\n+;\n+#endif"}, {"sha": "9838e149cbf0d14eaac6032322cf444a16d589e0", "filename": "gcc/testsuite/gcc.dg/cpp/trad/assert2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert2.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,23 @@\n+/* Malformed assertion tests.  */\n+/* { dg-do preprocess } */\n+\n+#assert\t\t/* { dg-error \"without predicate\" \"assert w/o predicate\" } */\n+#assert %\t/* { dg-error \"an identifier\" \"assert punctuation\" } */\n+#assert 12\t/* { dg-error \"an identifier\" \"assert number\" } */\n+#assert abc\t/* { dg-error \"missing\" \"assert w/o answer\" } */\n+\n+#if #\t\t/* { dg-error \"without predicate\" \"test w/o predicate\" } */\n+#endif\n+\n+#if #%\t\t/* { dg-error \"an identifier\" \"test punctuation\" } */\n+#endif\n+\n+#if #12\t\t/* { dg-error \"an identifier\" \"test number\" } */\n+#endif\n+\n+#if #abc\n+#error\t\t/* { dg-bogus \"error\" \"test w/o answer\" } */\n+#endif\n+\n+#if #abc[def]\t/* { dg-error \"not valid in\" \"bad syntax\" } */\n+#endif"}, {"sha": "df9b19fdaf98f9fadc034d23d1ff5761cde0938e", "filename": "gcc/testsuite/gcc.dg/cpp/trad/assert3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fassert3.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,10 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-A abc=def -A abc\\(ghi\\) \\\"-Aabc = jkl\\\" -A abc=mno -A -abc=mno\" } */\n+\n+/* Test -A command line syntax.  Source Neil Booth.  31 Oct 2000.  */\n+\n+#if !#abc (def) || !#abc (ghi) || !#abc (jkl) || #abc(mno)\n+#error Command line -A assertions\n+#endif"}, {"sha": "ce9d7f18e1c92f1ee8e9dfe4f8e9480a64d8f780", "filename": "gcc/testsuite/gcc.dg/cpp/trad/comment.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcomment.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcomment.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcomment.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,5 @@\n+/* Test for warning of unterminated comment.  */\n+\n+/* { dg-do preprocess } */\n+\n+/* { dg-warning \"unterminated comment\" }"}, {"sha": "d83288df23e48dbd0f5d547253edc83085d5e0e2", "filename": "gcc/testsuite/gcc.dg/cpp/trad/define.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdefine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdefine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdefine.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-traditional-cpp -DDEFINE1DEFINE -DDEFINE2DEFIN=\" } */"}, {"sha": "a24ecd519ea699e45c7ddc284a35d697cf42a5bd", "filename": "gcc/testsuite/gcc.dg/cpp/trad/defined.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdefined.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdefined.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdefined.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,78 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+\n+/* Tests tradcpp0 with defined.  The defined operator in traditional C\n+   works just the same as the defined operator in Standard C.  */\n+\n+/* Source: Zack Weinberg, glibc, Neil Booth 11 Dec 2000.  */\n+\n+#if defined REGPARMS\n+#error REGPARMS should not be defined\n+#endif\n+\n+#define REGPARMS 1\n+#if !defined REGPARMS\n+#error REGPARMS should be defined\n+#endif\n+\n+#define defined\t\t\t/* { dg-error \"defined\" } */\n+\n+/* No diagnostics, though you could argue there should be.  */\n+#if defined defined\n+#error defined is defined!\n+#endif\n+\n+#define is_Z_defined defined Z\n+\n+#if defined Z\n+#error Z is not defined\n+#endif\n+\n+/* The behaviour of \"defined\" when it comes from a macro expansion is\n+   now documented.  */\n+#if is_Z_defined\n+#error Macro expanding into defined operator test 1\n+#endif\n+\n+#define Z\n+\n+#if !defined Z\n+#error Z is defined\n+#endif\n+\n+#if !is_Z_defined\n+#error Macro expanding into defined operator test 2\n+#endif\n+\n+#undef is_Z_defined\n+#undef Z\n+\n+/* Do all the tests over again with the () form of defined.  */\n+\n+/* No diagnostics, though you could argue there should be.  */\n+#if defined(defined)\n+#error defined is defined!\n+#endif\n+\n+#define is_Z_defined defined ( Z )\n+\n+#if defined(Z)\n+#error Z is not defined\n+#endif\n+\n+/* The behaviour of \"defined\" when it comes from a macro expansion is\n+   now documented.  */\n+#if is_Z_defined\n+#error Macro expanding into defined operator test 1\n+#endif\n+\n+#define Z\n+\n+#if !defined(Z)\n+#error Z is defined\n+#endif\n+\n+#if !is_Z_defined\n+#error Macro expanding into defined operator test 2\n+#endif"}, {"sha": "186cb30bbeda8faae4b5fb13bd0ad925ea068346", "filename": "gcc/testsuite/gcc.dg/cpp/trad/directive.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdirective.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdirective.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdirective.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,10 @@\n+/* Test for some basic aspects of -traditional directive processing.  */\n+\n+/* { dg-do preprocess } */\n+\n+/* There is a #error directive.  */\n+\n+#error bad\t/* { dg-error \"bad\" } */\n+\n+/* Directives with their #s indented are not recognized.  */\n+ #if 0\t/* { dg-bogus \"unterminated\" } */"}, {"sha": "37ca95c69182c144458f5d319bf2611ccfceda0b", "filename": "gcc/testsuite/gcc.dg/cpp/trad/escaped-eof.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fescaped-eof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fescaped-eof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fescaped-eof.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,6 @@\n+/* Test for warning of escaped EOF.  */\n+\n+/* { dg-do preprocess } */\n+\n+/* { dg-warning \"backslash-new\" \"escaped EOF warning\" { target *-*-* } 7 } */\n+\\"}, {"sha": "8108c89fbfc4143f9d17fede5e9415bc021e3d52", "filename": "gcc/testsuite/gcc.dg/cpp/trad/hash.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fhash.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,14 @@\n+/* Test for erroneously thinking comments are token-pastes.\n+   From XFree86 4.0.  */\n+/* { dg-do preprocess } */\n+\n+#ifndef foo\n+#define foo\t/**/\n+#endif\n+\n+#ifndef foo\n+#define foo\t/* as nothing */\n+#endif\n+\n+/* { dg-bogus \"(start|end) of macro\" \"paste at end\" { target *-*-* } 7 } */\n+/* { dg-bogus \"(start|end) of macro\" \"comment at end\" { target *-*-* } 11 } */"}, {"sha": "7522bbf41e25027a1ac2c240f6a1d91947ba9a2c", "filename": "gcc/testsuite/gcc.dg/cpp/trad/num-sign.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fnum-sign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fnum-sign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fnum-sign.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,16 @@\n+/* Copyright (C) 2001 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess { target i?86-*-* } } */\n+\n+/* Tests that traditional numbers are signed, unless otherwise\n+   specified.  This test assumes a 32 bit target.\n+\n+   Neil Booth, 5 Aug 2001.  Inspired by PR 3824.  */\n+\n+#if 0xffffffffffffffff >= 0\n+# error\t0xffffffffffffffff /* { dg-bogus \"0xffffffffffffffff\" \"0xffffffffffffffff positive\" } */\n+#endif\n+\n+#if 0xffffffffffffffffU <= 0\n+# error\t0xffffffffffffffffU\t/* { dg-bogus \"0xffffffffffffffffU\" \"0xffffffffffffffffU negative\" } */\n+#endif"}, {"sha": "9f1c0db3291f50f34668994fdc5b6ec1d65a25c7", "filename": "gcc/testsuite/gcc.dg/cpp/trad/paste.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fpaste.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fpaste.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fpaste.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,16 @@\n+/* Test for proper comment elimination semantics from cpplib's -traditional.\n+   This should compile and link with compiled with `gcc -traditional-cpp'.\n+   Test case by Jason R. Thorpe <thorpej@zembu.com>.  */\n+\n+/* { dg-do compile } */\n+\n+#define A(name) X/**/name\n+\n+#define B(name) \\\n+void A(Y/**/name)() { A(name)(); }\n+\n+void Xhello() { printf(\"hello world\\n\"); }\n+\n+B(hello)\n+\n+int main() { XYhello(); return (0); }"}, {"sha": "ce5dde0bb3775160e3340b51ae133404c0dc792d", "filename": "gcc/testsuite/gcc.dg/cpp/trad/redef1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef1.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,36 @@\n+/* Test for redefining traditional macros with insignificant\n+   (i.e. whitespace) differences.  */\n+\n+/* { dg-do preprocess } */\n+\n+\n+#define foo bar\n+#define /* x */ foo /* x */ bar /* x */\n+\n+#define quux(thud) a one and a thud and a two\n+#define /**/ quux( thud ) /**/ a one and a /**/ thud /**/ and /**/ a two\n+#define quux(thud) a one\tand a thud and a \ttwo /* bah */\n+\n+#define f(x, y)x \"x  y z\"  y\n+#define f(x, y) x  \"x  y z\" y\n+\n+#define baz() whiz bang\n+#define baz() whiz  bang\n+\n+#define g foo\n+#undef g\n+#define g\n+\n+/* { dg-bogus \"redefined\" \"foo redefined\"\t{ target *-*-* } 8 } */\n+/* { dg-bogus \"redefined\" \"quux redefined\"\t{ target *-*-* } 11 } */\n+/* { dg-bogus \"redefined\" \"quux redefined\"\t{ target *-*-* } 12 } */\n+/* { dg-bogus \"redefined\" \"f redefined\"\t\t{ target *-*-* } 15 } */\n+/* { dg-bogus \"redefined\" \"baz redefined\"\t{ target *-*-* } 18 } */\n+/* { dg-bogus \"redefined\" \"g redefined\"\t\t{ target *-*-* } 22 } */\n+\n+/* { dg-bogus \"previous def\" \"foo prev def\"\t{ target *-*-* } 7 } */\n+/* { dg-bogus \"previous def\" \"quux prev def\"\t{ target *-*-* } 10 } */\n+/* { dg-bogus \"previous def\" \"quux prev def\"\t{ target *-*-* } 11 } */\n+/* { dg-bogus \"previous def\" \"f prev def\"\t{ target *-*-* } 14 } */\n+/* { dg-bogus \"previous def\" \"baz prev def\"\t{ target *-*-* } 17 } */\n+/* { dg-bogus \"previous def\" \"g prev def\"\t{ target *-*-* } 20 } */"}, {"sha": "269a846266f78e65a09d49e44ac4529eaed5fd77", "filename": "gcc/testsuite/gcc.dg/cpp/trad/redef2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef2.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,32 @@\n+/* Test for redefining traditional macros with significant differences.  */\n+\n+/* { dg-do preprocess } */\n+\n+#define foo bar    /* { dg-warning \"previous def\" \"foo prev def\" } */\n+#define foo barr   /* { dg-warning \"redefined\" \"foo redefined\" } */\n+\n+#undef foo\n+#define foo bar    /* { dg-warning \"previous def\" \"foo prev def 2\" } */\n+#define foo() bar    /* { dg-warning \"redefined\" \"foo redefined 2\" } */\n+\n+#undef foo\n+#define foo() bar    /* { dg-warning \"previous def\" \"foo prev def\" } */\n+#define foo() barr   /* { dg-warning \"redefined\" \"foo redefined\" } */\n+\n+#define quux(thud) a thud b /* { dg-warning \"previous def\" \"quux prev def\" } */\n+#define quux(thu) a thud b   /* { dg-warning \"redefined\" \"quux redefined\" } */\n+\n+#define bar(x, y) x+y /* { dg-warning \"previous def\" \"bar prev def\" } */\n+#define bar(x, y) x+x   /* { dg-warning \"redefined\" \"bar redefined\" } */\n+\n+#define bat(x, y) x+y  /* { dg-warning \"previous def\" \"bat prev def\" } */\n+#define bat(x, y) x+ y   /* { dg-warning \"redefined\" \"bat redefined\" } */\n+\n+#define baz(x, y) x+y  /* { dg-warning \"previous def\" \"baz prev def\" } */\n+#define baz(x, y) x +y   /* { dg-warning \"redefined\" \"baz redefined\" } */\n+\n+#define f(x, y) \"x y\"  /* { dg-warning \"previous def\" \"f prev def\" } */\n+#define f(x, y) \"x  y\"   /* { dg-warning \"redefined\" \"f redefined\" } */\n+\n+#define g(x, y) 'x'  /* { dg-warning \"previous def\" \"g prev def\" } */\n+#define g(x, y) ' x'   /* { dg-warning \"redefined\" \"g redefined\" } */"}, {"sha": "500ef1ea32f227d17275193311d9bfcccbdf1854", "filename": "gcc/testsuite/gcc.dg/cpp/trad/strify.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fstrify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fstrify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fstrify.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,17 @@\n+/* Test whether traditional stringify works.  */\n+/* { dg-do run } */\n+\n+#define foo(a, b) c=\"a\"; d=\"b\";\n+\n+extern void abort ();\n+\n+int main ()\n+{\n+  char *c, *d;\n+\n+  foo (p,q);\n+  if (c[0] != 'p' || d[0] != 'q')\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "60d9002300764cc23946e29cb6154251346a4b95", "filename": "gcc/testsuite/gcc.dg/cpp/trad/trad.exp", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ftrad.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ftrad.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ftrad.exp?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,43 @@\n+#   Copyright (C) 1997, 2000 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# There's a bunch of headers we need.\n+if [is_remote host] {\n+    foreach header [glob -nocomplain $srcdir/$subdir/*.{h,def} ] {\n+\tremote_download host $header\n+    }\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_TRADCPPFLAGS\n+if ![info exists DEFAULT_TRADCPPFLAGS] then {\n+    set DEFAULT_TRADCPPFLAGS \" -traditional-cpp\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_TRADCPPFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "8ea54a1f43c33dcfc3d9ee22bbe5b300dd6d73e8", "filename": "gcc/testsuite/gcc.dg/cpp/trad/uchar.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fuchar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b94a4440d95cc009c4434782a00eced71e2745/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fuchar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fuchar.c?ref=00b94a4440d95cc009c4434782a00eced71e2745", "patch": "@@ -0,0 +1,8 @@\n+/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-funsigned-char -fsigned-char -traditional-cpp\" } */\n+\n+#if defined (__CHAR_UNSIGNED__)\n+# error __CHAR_UNSIGNED__ defined\n+#endif"}]}