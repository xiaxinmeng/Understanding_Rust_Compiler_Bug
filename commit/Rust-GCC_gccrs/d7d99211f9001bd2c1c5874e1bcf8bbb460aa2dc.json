{"sha": "d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdkOTkyMTFmOTAwMWJkMmMxYzU4NzRlMWJjZjhiYmI0NjBhYTJkYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T15:50:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T15:50:29Z"}, "message": "[multiple changes]\n\n2014-11-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-parame-ae653.ads: Update comments.\n\n2014-11-20  Robert Dewar  <dewar@adacore.com>\n\n\t* types.ads, einfo.ads: Minor reformatting.\n\t* sem_elab.adb (Check_A_Call): Add guard for reference to Alias\n\tfor variable case.\n\n2014-11-20  Bob Duff  <duff@adacore.com>\n\n\t* a-cofove.adb (Elems,Elemsc): Use access-to-constrained arrays\n\tinstead of access-to-unconstrained, because the latter doesn't\n\twork with 'Unrestricted_Access when the result is returned from\n\ta function.\n\t* a-cofove.ads (Vector): Move the discriminant-dependent array\n\tafter the other components for efficiency. Otherwise the compiler\n\twill generate a lot of code to calculate the offset of the other\n\tcomponents every time they're accessed.\n\n2014-11-20  Olivier Hainque  <hainque@adacore.com>\n\n\t* opt.ads: Fix comment on Generate_SCO_Instance_Table wrt when\n\tit is set to true.\n\nFrom-SVN: r217879", "tree": {"sha": "ccd228e8d08e9b13241e8a9753c53f579862e463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccd228e8d08e9b13241e8a9753c53f579862e463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/comments", "author": null, "committer": null, "parents": [{"sha": "de4899bb19823f4865b060823eab2bdeba9c6fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4899bb19823f4865b060823eab2bdeba9c6fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4899bb19823f4865b060823eab2bdeba9c6fee"}], "stats": {"total": 93, "additions": 64, "deletions": 29}, "files": [{"sha": "ea570d92791ebede403dfaa61ebf29191209020e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "patch": "@@ -1,3 +1,29 @@\n+2014-11-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-parame-ae653.ads: Update comments.\n+\n+2014-11-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* types.ads, einfo.ads: Minor reformatting.\n+\t* sem_elab.adb (Check_A_Call): Add guard for reference to Alias\n+\tfor variable case.\n+\n+2014-11-20  Bob Duff  <duff@adacore.com>\n+\n+\t* a-cofove.adb (Elems,Elemsc): Use access-to-constrained arrays\n+\tinstead of access-to-unconstrained, because the latter doesn't\n+\twork with 'Unrestricted_Access when the result is returned from\n+\ta function.\n+\t* a-cofove.ads (Vector): Move the discriminant-dependent array\n+\tafter the other components for efficiency. Otherwise the compiler\n+\twill generate a lot of code to calculate the offset of the other\n+\tcomponents every time they're accessed.\n+\n+2014-11-20  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* opt.ads: Fix comment on Generate_SCO_Instance_Table wrt when\n+\tit is set to true.\n+\n 2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch3.adb (Expand_N_Object_Declaration): Handle properly"}, {"sha": "04895432356b9d9af34d1a5166c0375d66a2ec41", "filename": "gcc/ada/a-cofove.adb", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Fa-cofove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Fa-cofove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.adb?ref=d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "patch": "@@ -42,16 +42,24 @@ is\n    type Int is range System.Min_Int .. System.Max_Int;\n    type UInt is mod System.Max_Binary_Modulus;\n \n-   type Elements_Array_Ptr_Const is access constant Elements_Array;\n-\n    procedure Free is\n       new Ada.Unchecked_Deallocation (Elements_Array, Elements_Array_Ptr);\n \n-   function Elems (Container : in out Vector) return Elements_Array_Ptr;\n+   type Maximal_Array_Ptr is access all Elements_Array (Capacity_Range)\n+     with Storage_Size => 0;\n+   type Maximal_Array_Ptr_Const is access constant\n+     Elements_Array (Capacity_Range)\n+       with Storage_Size => 0;\n+\n+   function Elems (Container : in out Vector) return Maximal_Array_Ptr;\n    function Elemsc\n-     (Container : Vector) return Elements_Array_Ptr_Const;\n+     (Container : Vector) return Maximal_Array_Ptr_Const;\n    --  Returns a pointer to the Elements array currently in use -- either\n-   --  Container.Elements_Ptr or a pointer to Container.Elements.\n+   --  Container.Elements_Ptr or a pointer to Container.Elements. We work with\n+   --  pointers to a bogus array subtype that is constrained with the maximum\n+   --  possible bounds. This means that the pointer is a thin pointer. This is\n+   --  necessary because 'Unrestricted_Access doesn't work when it produces\n+   --  access-to-unconstrained and is returned from a function.\n \n    function Get_Element\n      (Container : Vector;\n@@ -257,19 +265,19 @@ is\n    -- Elements --\n    --------------\n \n-   function Elems (Container : in out Vector) return Elements_Array_Ptr is\n+   function Elems (Container : in out Vector) return Maximal_Array_Ptr is\n    begin\n       return (if Container.Elements_Ptr = null\n                 then Container.Elements'Unrestricted_Access\n-                else Container.Elements_Ptr);\n+                else Container.Elements_Ptr.all'Unrestricted_Access);\n    end Elems;\n \n    function Elemsc\n-     (Container : Vector) return Elements_Array_Ptr_Const is\n+     (Container : Vector) return Maximal_Array_Ptr_Const is\n    begin\n       return (if Container.Elements_Ptr = null\n                 then Container.Elements'Unrestricted_Access\n-                else Elements_Array_Ptr_Const (Container.Elements_Ptr));\n+                else Container.Elements_Ptr.all'Unrestricted_Access);\n    end Elemsc;\n \n    ----------------\n@@ -632,8 +640,8 @@ is\n \n          Last := Index_Type (Last_As_Int);\n \n-         return (Length, (others => New_Item), Last => Last,\n-                 others => <>);\n+         return (Capacity => Length, Last => Last, Elements_Ptr => <>,\n+                 Elements => (others => New_Item));\n       end;\n    end To_Vector;\n "}, {"sha": "0f02017a53b84ec7f5c4cebe40d90a2f9bd384d4", "filename": "gcc/ada/a-cofove.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Fa-cofove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Fa-cofove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.ads?ref=d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "patch": "@@ -255,9 +255,9 @@ private\n       --  In the bounded case, the elements are stored in Elements. In the\n       --  unbounded case, the elements are initially stored in Elements, until\n       --  we run out of room, then we switch to Elements_Ptr.\n-      Elements     : aliased Elements_Array (1 .. Capacity);\n       Last         : Extended_Index := No_Index;\n       Elements_Ptr : Elements_Array_Ptr := null;\n+      Elements     : aliased Elements_Array (1 .. Capacity);\n    end record;\n \n    --  The primary reason Vector is limited is that in the unbounded case, once"}, {"sha": "4bb05c45c2cb9c67ad652bed1232ef61575fb787", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "patch": "@@ -148,7 +148,7 @@ package Einfo is\n \n --       The Object_Size for base subtypes reflect the natural hardware\n --       size in bits (see Ttypes and Cstand for integer types). For\n---       enumeration and fixed-point base subtypes have 8. 16. 32 or 64\n+--       enumeration and fixed-point base subtypes have 8, 16, 32, or 64\n --       bits for this size, depending on the range of values to be stored.\n \n --       The Object_Size of a subtype is the same as the Object_Size of"}, {"sha": "8eecbe48215d7e0d9c1a7f0238e670e8fb4ef701", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "patch": "@@ -717,7 +717,7 @@ package Opt is\n \n    Generate_SCO_Instance_Table : Boolean := False;\n    --  GNAT\n-   --  True when switch -fdebug-instances is used. When True, a table of\n+   --  True when switch -fdump-scos is used. When True, a table of\n    --  instances is included in SCOs.\n \n    Generating_Code : Boolean := False;"}, {"sha": "d833e5865474166869f41c0fb6eaf4a1a0de81d2", "filename": "gcc/ada/s-parame-ae653.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Fs-parame-ae653.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Fs-parame-ae653.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame-ae653.ads?ref=d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "patch": "@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is the default VxWorks AE 653 version of the package\n+--  Version is used by VxWorks 653, VxWorks MILS, and VxWorks6 cert Ravenscar\n \n --  This package defines some system dependent parameters for GNAT. These\n --  are values that are referenced by the runtime library and are therefore"}, {"sha": "71883350cdfcb136bcd3b3301c3564b0fce288df", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "patch": "@@ -516,6 +516,12 @@ package body Sem_Elab is\n       Access_Case : constant Boolean := Nkind (N) = N_Attribute_Reference;\n       --  Indicates if we have Access attribute case\n \n+      Variable_Case : constant Boolean :=\n+                        Nkind (N) in N_Has_Entity\n+                          and then Present (Entity (N))\n+                          and then Ekind (Entity (N)) = E_Variable;\n+      --  Indicates if we have variable reference case\n+\n       procedure Elab_Warning\n         (Msg_D : String;\n          Msg_S : String;\n@@ -617,10 +623,7 @@ package body Sem_Elab is\n \n       --  For a variable reference, just set Body_Acts_As_Spec to False\n \n-      if Nkind (N) in N_Has_Entity\n-        and then Present (Entity (N))\n-        and then Ekind (Entity (N)) = E_Variable\n-      then\n+      if Variable_Case then\n          Body_Acts_As_Spec := False;\n \n       --  Additional checks for all other cases\n@@ -879,7 +882,9 @@ package body Sem_Elab is\n             --  Loop to carefully follow renamings and derivations one step\n             --  outside the current unit, but not further.\n \n-            if not Inst_Case and then Present (Alias (Ent)) then\n+            if not (Inst_Case or Variable_Case)\n+              and then Present (Alias (Ent))\n+            then\n                E_Scope := Alias (Ent);\n             else\n                E_Scope := Ent;\n@@ -970,11 +975,7 @@ package body Sem_Elab is\n \n             --  Variable reference in SPARK mode\n \n-            elsif SPARK_Mode = On\n-              and then Nkind (N) in N_Has_Entity\n-              and then Present (Entity (N))\n-              and then Ekind (Entity (N)) = E_Variable\n-            then\n+            elsif Variable_Case then\n                Error_Msg_NE\n                  (\"reference to & during elaboration in SPARK\", N, Ent);\n \n@@ -1265,9 +1266,9 @@ package body Sem_Elab is\n       elsif Nkind (N) not in N_Subprogram_Call\n         and then Nkind (N) /= N_Attribute_Reference\n         and then (SPARK_Mode /= On\n-                    or else Nkind (N) not in N_Has_Entity\n-                    or else No (Entity (N))\n-                    or else Ekind (Entity (N)) /= E_Variable)\n+                   or else Nkind (N) not in N_Has_Entity\n+                   or else No (Entity (N))\n+                   or else Ekind (Entity (N)) /= E_Variable)\n       then\n          return;\n "}, {"sha": "29caf1f851d727e0c39dc8fbcae8240a9d6b6e57", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=d7d99211f9001bd2c1c5874e1bcf8bbb460aa2dc", "patch": "@@ -659,7 +659,7 @@ package Types is\n    type Check_Id is new Nat;\n    --  Type used to represent a check id\n \n-   No_Check_Id         : constant := 0;\n+   No_Check_Id : constant := 0;\n    --  Check_Id value used to indicate no check\n \n    Access_Check           : constant :=  1;"}]}