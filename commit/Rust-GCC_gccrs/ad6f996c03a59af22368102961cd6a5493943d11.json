{"sha": "ad6f996c03a59af22368102961cd6a5493943d11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2Zjk5NmMwM2E1OWFmMjIzNjgxMDI5NjFjZDZhNTQ5Mzk0M2QxMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-11-07T10:51:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-11-07T10:51:06Z"}, "message": "re PR middle-end/63770 (ICE on valid code at all optimization levels on x86_64-linux-gnu)\n\n2014-11-07  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/63770\n\t* match.pd: Guard conflicting GENERIC pattern properly.\n\n\t* gcc.dg/pr63770.c: New testcase.\n\nFrom-SVN: r217214", "tree": {"sha": "66e98f1ee6430462487660708a3c49427efcdcd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66e98f1ee6430462487660708a3c49427efcdcd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad6f996c03a59af22368102961cd6a5493943d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6f996c03a59af22368102961cd6a5493943d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad6f996c03a59af22368102961cd6a5493943d11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6f996c03a59af22368102961cd6a5493943d11/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a499aac5dfa5d9be4945c162167d13cfc07b2a81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a499aac5dfa5d9be4945c162167d13cfc07b2a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a499aac5dfa5d9be4945c162167d13cfc07b2a81"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "88b7422e7ee25bdfecf2d86af04e1b8b1a7fe028", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6f996c03a59af22368102961cd6a5493943d11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6f996c03a59af22368102961cd6a5493943d11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad6f996c03a59af22368102961cd6a5493943d11", "patch": "@@ -1,3 +1,8 @@\n+2014-11-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/63770\n+\t* match.pd: Guard conflicting GENERIC pattern properly.\n+\n 2014-11-07  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd: Add patterns for POINTER_PLUS_EXPR association"}, {"sha": "1c8b8db4658c74e72a2171e62167e7801350355c", "filename": "gcc/match.pd", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6f996c03a59af22368102961cd6a5493943d11/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6f996c03a59af22368102961cd6a5493943d11/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ad6f996c03a59af22368102961cd6a5493943d11", "patch": "@@ -129,14 +129,15 @@ along with GCC; see the file COPYING3.  If not see\n   (bitop (convert @0) (convert? @1))\n   (if (((TREE_CODE (@1) == INTEGER_CST\n \t && INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-\t && int_fits_type_p (@1, TREE_TYPE (@0))\n-\t /* ???  This transform conflicts with fold-const.c doing\n-\t    Convert (T)(x & c) into (T)x & (T)c, if c is an integer\n-\t    constants (if x has signed type, the sign bit cannot be set\n-\t    in c).  This folds extension into the BIT_AND_EXPR.\n-\t    Restrict it to GIMPLE to avoid endless recursions.  */\n-\t && (bitop != BIT_AND_EXPR || GIMPLE))\n-\t|| types_compatible_p (TREE_TYPE (@0), TREE_TYPE (@1)))\n+\t && int_fits_type_p (@1, TREE_TYPE (@0)))\n+\t|| (GIMPLE && types_compatible_p (TREE_TYPE (@0), TREE_TYPE (@1)))\n+\t|| (GENERIC && TREE_TYPE (@0) == TREE_TYPE (@1)))\n+       /* ???  This transform conflicts with fold-const.c doing\n+\t  Convert (T)(x & c) into (T)x & (T)c, if c is an integer\n+\t  constants (if x has signed type, the sign bit cannot be set\n+\t  in c).  This folds extension into the BIT_AND_EXPR.\n+\t  Restrict it to GIMPLE to avoid endless recursions.  */\n+       && (bitop != BIT_AND_EXPR || GIMPLE)\n        && (/* That's a good idea if the conversion widens the operand, thus\n \t      after hoisting the conversion the operation will be narrower.  */\n \t   TYPE_PRECISION (TREE_TYPE (@0)) < TYPE_PRECISION (type)"}, {"sha": "5e1581439b8ae590085f290554f7bf558e284c7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6f996c03a59af22368102961cd6a5493943d11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6f996c03a59af22368102961cd6a5493943d11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad6f996c03a59af22368102961cd6a5493943d11", "patch": "@@ -1,3 +1,8 @@\n+2014-11-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/63770\n+\t* gcc.dg/pr63770.c: New testcase.\n+\n 2014-11-07  Terry Guo  <terry.guo@arm.com>\n \n \t* gcc.target/arm/anddi_notdi-1.c: Match with UAL format."}, {"sha": "973df3405743d838d19bd96b050e74de82a2a0ea", "filename": "gcc/testsuite/gcc.dg/pr63770.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6f996c03a59af22368102961cd6a5493943d11/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63770.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6f996c03a59af22368102961cd6a5493943d11/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63770.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63770.c?ref=ad6f996c03a59af22368102961cd6a5493943d11", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+char a;\n+\n+struct S\n+{\n+  int f0:9;\n+};\n+\n+volatile struct S b;\n+\n+int\n+fn1 ()\n+{\n+  return (1 & b.f0) < a;\n+}"}]}