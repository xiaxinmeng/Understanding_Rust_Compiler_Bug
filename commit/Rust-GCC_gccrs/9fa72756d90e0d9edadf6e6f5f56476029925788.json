{"sha": "9fa72756d90e0d9edadf6e6f5f56476029925788", "node_id": "C_kwDOANBUbNoAKDlmYTcyNzU2ZDkwZTBkOWVkYWRmNmU2ZjVmNTY0NzYwMjk5MjU3ODg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-15T08:20:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-15T08:20:52Z"}, "message": "libgomp, nvptx: Honor OpenMP 5.1 num_teams lower bound\n\nHere is a PTX implementation of what I was talking about, that for\nnum_teams_upper 0 or whenever num_teams_lower <= num_blocks, the current\nimplementation is fine but if the user explicitly asks for more\nteams than we can provide in hardware, we need to stop assuming that\nomp_get_team_num () is equal to the hw team id, but instead need to use some\nteam specific memory (it is .shared for PTX), or if none is\nprovided, array indexed by the hw team id and run some teams serially within\nthe same hw thread.\n\n2021-11-15  Jakub Jelinek  <jakub@redhat.com>\n\n\t* config/nvptx/team.c (__gomp_team_num): Define as\n\t__attribute__((shared)) var.\n\t(gomp_nvptx_main): Initialize __gomp_team_num to 0.\n\t* config/nvptx/target.c (__gomp_team_num): Declare as\n\textern __attribute__((shared)) var.\n\t(GOMP_teams4): Use __gomp_team_num as the team number instead of\n\t%ctaid.x.  If first, initialize it to %ctaid.x.  If num_teams_lower\n\tis bigger than num_blocks, use num_teams_lower teams and arrange for\n\tbumping of __gomp_team_num if !first and returning false once we run\n\tout of teams.\n\t* config/nvptx/teams.c (__gomp_team_num): Declare as\n\textern __attribute__((shared)) var.\n\t(omp_get_team_num): Return __gomp_team_num value instead of %ctaid.x.", "tree": {"sha": "e55e4082ec01a42cebfba273a060db50d3fd53c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e55e4082ec01a42cebfba273a060db50d3fd53c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa72756d90e0d9edadf6e6f5f56476029925788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa72756d90e0d9edadf6e6f5f56476029925788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa72756d90e0d9edadf6e6f5f56476029925788", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa72756d90e0d9edadf6e6f5f56476029925788/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d29445972065f54566402b255d76b2567e23d445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29445972065f54566402b255d76b2567e23d445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29445972065f54566402b255d76b2567e23d445"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "2eb545f812f6d830672c4be2f60a542d9f413e85", "filename": "libgomp/config/nvptx/target.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa72756d90e0d9edadf6e6f5f56476029925788/libgomp%2Fconfig%2Fnvptx%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa72756d90e0d9edadf6e6f5f56476029925788/libgomp%2Fconfig%2Fnvptx%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fnvptx%2Ftarget.c?ref=9fa72756d90e0d9edadf6e6f5f56476029925788", "patch": "@@ -26,28 +26,41 @@\n #include \"libgomp.h\"\n #include <limits.h>\n \n+extern int __gomp_team_num __attribute__((shared));\n+\n bool\n GOMP_teams4 (unsigned int num_teams_lower, unsigned int num_teams_upper,\n \t     unsigned int thread_limit, bool first)\n {\n+  unsigned int num_blocks, block_id;\n+  asm (\"mov.u32 %0, %%nctaid.x;\" : \"=r\" (num_blocks));\n   if (!first)\n-    return false;\n+    {\n+      unsigned int team_num;\n+      if (num_blocks > gomp_num_teams_var)\n+\treturn false;\n+      team_num = __gomp_team_num;\n+      if (team_num > gomp_num_teams_var - num_blocks)\n+\treturn false;\n+      __gomp_team_num = team_num + num_blocks;\n+      return true;\n+    }\n   if (thread_limit)\n     {\n       struct gomp_task_icv *icv = gomp_icv (true);\n       icv->thread_limit_var\n \t= thread_limit > INT_MAX ? UINT_MAX : thread_limit;\n     }\n-  unsigned int num_blocks, block_id;\n-  asm (\"mov.u32 %0, %%nctaid.x;\" : \"=r\" (num_blocks));\n-  asm (\"mov.u32 %0, %%ctaid.x;\" : \"=r\" (block_id));\n-  /* FIXME: If num_teams_lower > num_blocks, we want to loop multiple\n-     times for some CTAs.  */\n-  (void) num_teams_lower;\n-  if (!num_teams_upper || num_teams_upper >= num_blocks)\n+  if (!num_teams_upper)\n     num_teams_upper = num_blocks;\n-  else if (block_id >= num_teams_upper)\n+  else if (num_blocks < num_teams_lower)\n+    num_teams_upper = num_teams_lower;\n+  else if (num_blocks < num_teams_upper)\n+    num_teams_upper = num_blocks;\n+  asm (\"mov.u32 %0, %%ctaid.x;\" : \"=r\" (block_id));\n+  if (block_id >= num_teams_upper)\n     return false;\n+  __gomp_team_num = block_id;\n   gomp_num_teams_var = num_teams_upper - 1;\n   return true;\n }"}, {"sha": "cabf01815e94824bf0b85f5566c3c1ac5c9c04c2", "filename": "libgomp/config/nvptx/team.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa72756d90e0d9edadf6e6f5f56476029925788/libgomp%2Fconfig%2Fnvptx%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa72756d90e0d9edadf6e6f5f56476029925788/libgomp%2Fconfig%2Fnvptx%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fnvptx%2Fteam.c?ref=9fa72756d90e0d9edadf6e6f5f56476029925788", "patch": "@@ -32,6 +32,7 @@\n #include <string.h>\n \n struct gomp_thread *nvptx_thrs __attribute__((shared,nocommon));\n+int __gomp_team_num __attribute__((shared,nocommon));\n \n static void gomp_thread_start (struct gomp_thread_pool *);\n \n@@ -57,6 +58,7 @@ gomp_nvptx_main (void (*fn) (void *), void *fn_data)\n       /* Starting additional threads is not supported.  */\n       gomp_global_icv.dyn_var = true;\n \n+      __gomp_team_num = 0;\n       nvptx_thrs = alloca (ntids * sizeof (*nvptx_thrs));\n       memset (nvptx_thrs, 0, ntids * sizeof (*nvptx_thrs));\n "}, {"sha": "60fb11df006abae1fb3020b263880a021d193669", "filename": "libgomp/config/nvptx/teams.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa72756d90e0d9edadf6e6f5f56476029925788/libgomp%2Fconfig%2Fnvptx%2Fteams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa72756d90e0d9edadf6e6f5f56476029925788/libgomp%2Fconfig%2Fnvptx%2Fteams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fnvptx%2Fteams.c?ref=9fa72756d90e0d9edadf6e6f5f56476029925788", "patch": "@@ -28,6 +28,8 @@\n \n #include \"libgomp.h\"\n \n+extern int __gomp_team_num __attribute__((shared));\n+\n void\n GOMP_teams_reg (void (*fn) (void *), void *data, unsigned int num_teams,\n \t\tunsigned int thread_limit, unsigned int flags)\n@@ -48,9 +50,7 @@ omp_get_num_teams (void)\n int\n omp_get_team_num (void)\n {\n-  int ctaid;\n-  asm (\"mov.u32 %0, %%ctaid.x;\" : \"=r\" (ctaid));\n-  return ctaid;\n+  return __gomp_team_num;\n }\n \n ialias (omp_get_num_teams)"}]}