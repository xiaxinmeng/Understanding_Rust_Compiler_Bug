{"sha": "148e45e516e599de2e633a2b066fd773cf4b26e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ4ZTQ1ZTUxNmU1OTlkZTJlNjMzYTJiMDY2ZmQ3NzNjZjRiMjZlNA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-09-11T16:51:15Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-09-11T16:51:15Z"}, "message": "tree-ssa-forwprop.c (simplify_vector_constructor): New function.\n\n2012-09-11  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n        * tree-ssa-forwprop.c (simplify_vector_constructor): New function.\n        (ssa_forward_propagate_and_combine): Call it.\n\ngcc/testsuite/\n        * gcc.dg/tree-ssa/forwprop-22.c: New testcase.\n\nFrom-SVN: r191198", "tree": {"sha": "94fc594e21d2267c11e3369aa8ffccdaa7f0c8be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94fc594e21d2267c11e3369aa8ffccdaa7f0c8be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/148e45e516e599de2e633a2b066fd773cf4b26e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148e45e516e599de2e633a2b066fd773cf4b26e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/148e45e516e599de2e633a2b066fd773cf4b26e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148e45e516e599de2e633a2b066fd773cf4b26e4/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4595475a434a101db9857474d96b88f02b5edf75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4595475a434a101db9857474d96b88f02b5edf75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4595475a434a101db9857474d96b88f02b5edf75"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "b90c1fbf57905a06452e4bb497ba7e6ccd21788f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e45e516e599de2e633a2b066fd773cf4b26e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e45e516e599de2e633a2b066fd773cf4b26e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=148e45e516e599de2e633a2b066fd773cf4b26e4", "patch": "@@ -1,3 +1,8 @@\n+2012-09-11  Marc Glisse  <marc.glisse@inria.fr>\n+\n+        * tree-ssa-forwprop.c (simplify_vector_constructor): New function.\n+        (ssa_forward_propagate_and_combine): Call it.\n+\n 2012-09-11  Diego Novillo  <dnovillo@google.com>\n \n \t* var-tracking.c (vt_add_function_parameter): Adjust for VEC"}, {"sha": "490415e36aff9caf0dbad800ecfc329eb441f3e3", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e45e516e599de2e633a2b066fd773cf4b26e4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e45e516e599de2e633a2b066fd773cf4b26e4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=148e45e516e599de2e633a2b066fd773cf4b26e4", "patch": "@@ -2244,7 +2244,8 @@ tree-ssa-dse.o : tree-ssa-dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n tree-ssa-forwprop.o : tree-ssa-forwprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) $(CFGLOOP_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(DIAGNOSTIC_H) \\\n-   langhooks.h $(FLAGS_H) $(GIMPLE_H) $(GIMPLE_PRETTY_PRINT_H) $(EXPR_H)\n+   langhooks.h $(FLAGS_H) $(GIMPLE_H) $(GIMPLE_PRETTY_PRINT_H) $(EXPR_H) \\\n+   $(TREE_VECTORIZER_H)\n tree-ssa-phiprop.o : tree-ssa-phiprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(DIAGNOSTIC_H) \\"}, {"sha": "7d50fca757be15808646f32d4b78f54172351aa4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e45e516e599de2e633a2b066fd773cf4b26e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e45e516e599de2e633a2b066fd773cf4b26e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=148e45e516e599de2e633a2b066fd773cf4b26e4", "patch": "@@ -1,3 +1,7 @@\n+2012-09-11  Marc Glisse  <marc.glisse@inria.fr>\n+\n+        * gcc.dg/tree-ssa/forwprop-22.c: New testcase.\n+\n 2012-09-11  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n            Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n "}, {"sha": "9c66c997205afa847207be455ae1b0a3d37ab07c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-22.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e45e516e599de2e633a2b066fd773cf4b26e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e45e516e599de2e633a2b066fd773cf4b26e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-22.c?ref=148e45e516e599de2e633a2b066fd773cf4b26e4", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+/* { dg-require-effective-target vect_perm } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+typedef double vec __attribute__((vector_size (2 * sizeof (double))));\n+void f (vec *px, vec *y, vec *z)\n+{\n+  vec x = *px;\n+  vec t1 = { x[1], x[0] };\n+  vec t2 = { x[0], x[1] };\n+  *y = t1;\n+  *z = t2;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"BIT_FIELD_REF\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "ad407269dd7a2128cdf45132db1857e30b023147", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e45e516e599de2e633a2b066fd773cf4b26e4/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e45e516e599de2e633a2b066fd773cf4b26e4/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=148e45e516e599de2e633a2b066fd773cf4b26e4", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"expr.h\"\n #include \"cfgloop.h\"\n+#include \"tree-vectorizer.h\"\n \n /* This pass propagates the RHS of assignment statements into use\n    sites of the LHS of the assignment.  It's basically a specialized\n@@ -2794,6 +2795,84 @@ simplify_permutation (gimple_stmt_iterator *gsi)\n   return 0;\n }\n \n+/* Recognize a VEC_PERM_EXPR.  Returns true if there were any changes.  */\n+\n+static bool\n+simplify_vector_constructor (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  gimple def_stmt;\n+  tree op, op2, orig, type, elem_type;\n+  unsigned elem_size, nelts, i;\n+  enum tree_code code;\n+  constructor_elt *elt;\n+  unsigned char *sel;\n+  bool maybe_ident;\n+\n+  gcc_checking_assert (gimple_assign_rhs_code (stmt) == CONSTRUCTOR);\n+\n+  op = gimple_assign_rhs1 (stmt);\n+  type = TREE_TYPE (op);\n+  gcc_checking_assert (TREE_CODE (type) == VECTOR_TYPE);\n+\n+  nelts = TYPE_VECTOR_SUBPARTS (type);\n+  elem_type = TREE_TYPE (type);\n+  elem_size = TREE_INT_CST_LOW (TYPE_SIZE (elem_type));\n+\n+  sel = XALLOCAVEC (unsigned char, nelts);\n+  orig = NULL;\n+  maybe_ident = true;\n+  FOR_EACH_VEC_ELT (constructor_elt, CONSTRUCTOR_ELTS (op), i, elt)\n+    {\n+      tree ref, op1;\n+\n+      if (i >= nelts)\n+\treturn false;\n+\n+      if (TREE_CODE (elt->value) != SSA_NAME)\n+\treturn false;\n+      def_stmt = SSA_NAME_DEF_STMT (elt->value);\n+      if (!def_stmt || !is_gimple_assign (def_stmt))\n+\treturn false;\n+      code = gimple_assign_rhs_code (def_stmt);\n+      if (code != BIT_FIELD_REF)\n+\treturn false;\n+      op1 = gimple_assign_rhs1 (def_stmt);\n+      ref = TREE_OPERAND (op1, 0);\n+      if (orig)\n+\t{\n+\t  if (ref != orig)\n+\t    return false;\n+\t}\n+      else\n+\t{\n+\t  if (TREE_CODE (ref) != SSA_NAME)\n+\t    return false;\n+\t  orig = ref;\n+\t}\n+      if (TREE_INT_CST_LOW (TREE_OPERAND (op1, 1)) != elem_size)\n+\treturn false;\n+      sel[i] = TREE_INT_CST_LOW (TREE_OPERAND (op1, 2)) / elem_size;\n+      if (sel[i] != i) maybe_ident = false;\n+    }\n+  if (i < nelts)\n+    return false;\n+\n+  if (maybe_ident)\n+    {\n+      gimple_assign_set_rhs_from_tree (gsi, orig);\n+    }\n+  else\n+    {\n+      op2 = vect_gen_perm_mask (type, sel);\n+      if (!op2)\n+\treturn false;\n+      gimple_assign_set_rhs_with_ops_1 (gsi, VEC_PERM_EXPR, orig, orig, op2);\n+    }\n+  update_stmt (gsi_stmt (*gsi));\n+  return true;\n+}\n+\n /* Main entry point for the forward propagation and statement combine\n    optimizer.  */\n \n@@ -2965,6 +3044,9 @@ ssa_forward_propagate_and_combine (void)\n \t\t  }\n \t\telse if (code == BIT_FIELD_REF)\n \t\t  changed = simplify_bitfield_ref (&gsi);\n+                else if (code == CONSTRUCTOR\n+                         && TREE_CODE (TREE_TYPE (rhs1)) == VECTOR_TYPE)\n+                  changed = simplify_vector_constructor (&gsi);\n \t\tbreak;\n \t      }\n "}]}