{"sha": "2d0269f68336b0ca347594bec9d10d804717a76e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQwMjY5ZjY4MzM2YjBjYTM0NzU5NGJlYzlkMTBkODA0NzE3YTc2ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-10-29T23:23:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-29T23:23:29Z"}, "message": "type_traits (__is_int_or_cref): Remove.\n\n2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/type_traits (__is_int_or_cref): Remove.\n\t(__is_convertible_helper): Fix per C++0x and simplify (the hack to\n\tsuppress warnings isn't necessary anymore).\n\t* testsuite/20_util/is_convertible/requirements/typedefs.cc: New.\n\t* testsuite/20_util/is_convertible/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_convertible/value.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n\tdg-error line numbers.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\nFrom-SVN: r153728", "tree": {"sha": "06f6a1ed4e798a4d744ea5690f84a4528af3117e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06f6a1ed4e798a4d744ea5690f84a4528af3117e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d0269f68336b0ca347594bec9d10d804717a76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0269f68336b0ca347594bec9d10d804717a76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d0269f68336b0ca347594bec9d10d804717a76e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0269f68336b0ca347594bec9d10d804717a76e/comments", "author": null, "committer": null, "parents": [{"sha": "28a371ae13e22365d9d46b2ec4222b15bd82fe43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a371ae13e22365d9d46b2ec4222b15bd82fe43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a371ae13e22365d9d46b2ec4222b15bd82fe43"}], "stats": {"total": 221, "additions": 194, "deletions": 27}, "files": [{"sha": "2929d5a7252d08f4008ce5d781407ff32cd9e1bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2d0269f68336b0ca347594bec9d10d804717a76e", "patch": "@@ -1,3 +1,17 @@\n+2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/type_traits (__is_int_or_cref): Remove.\n+\t(__is_convertible_helper): Fix per C++0x and simplify (the hack to\n+\tsuppress warnings isn't necessary anymore).\n+\t* testsuite/20_util/is_convertible/requirements/typedefs.cc: New.\n+\t* testsuite/20_util/is_convertible/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_convertible/value.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n+\tdg-error line numbers.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\n 2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/20_util/pair/40925.cc: Minor comment fix."}, {"sha": "f5666bcc0626eaeb9a078294535fa4352b5cd3ca", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=2d0269f68336b0ca347594bec9d10d804717a76e", "patch": "@@ -253,39 +253,23 @@ namespace std\n       static const bool __value = sizeof(__test(__makeFrom())) == 1;\n     };\n \n-  template<typename _Tp>\n-    struct __is_int_or_cref\n-    {\n-      typedef typename remove_reference<_Tp>::type __rr_Tp;\n-      static const bool __value = (is_integral<_Tp>::value\n-\t\t\t\t   || (is_integral<__rr_Tp>::value\n-\t\t\t\t       && is_const<__rr_Tp>::value\n-\t\t\t\t       && !is_volatile<__rr_Tp>::value));\n-    };\n-\n   template<typename _From, typename _To,\n \t   bool = (is_void<_From>::value || is_void<_To>::value\n-\t\t   || is_function<_To>::value || is_array<_To>::value\n-\t\t   // This special case is here only to avoid warnings.\n-\t\t   || (is_floating_point<typename\n-\t\t       remove_reference<_From>::type>::value\n-\t\t       && __is_int_or_cref<_To>::__value))>\n+\t\t   || is_function<_To>::value || is_array<_To>::value)>\n     struct __is_convertible_helper\n     {\n-      // \"An imaginary lvalue of type From...\".\n       static const bool __value = (__is_convertible_simple<typename\n-\t\t\t\t   add_lvalue_reference<_From>::type,\n+\t\t\t\t   add_rvalue_reference<_From>::type,\n \t\t\t\t   _To>::__value);\n     };\n \n   template<typename _From, typename _To>\n     struct __is_convertible_helper<_From, _To, true>\n-    { static const bool __value = (is_void<_To>::value\n-\t\t\t\t   || (__is_int_or_cref<_To>::__value\n-\t\t\t\t       && !is_void<_From>::value)); };\n+    { static const bool __value = (is_void<_From>::value\n+\t\t\t\t   && is_void<_To>::value); };\n \n   // XXX FIXME\n-  // The C++0x specifications are different, see N2255.\n+  // The C++0x specifications require front-end support, see N2255.\n   /// is_convertible\n   template<typename _From, typename _To>\n     struct is_convertible"}, {"sha": "646c4b25b0a1da5c45fcad496fd1b8b130647d4c", "filename": "libstdc++-v3/testsuite/20_util/is_convertible/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Frequirements%2Fexplicit_instantiation.cc?ref=2d0269f68336b0ca347594bec9d10d804717a76e", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_convertible<test_type, test_type>;\n+}"}, {"sha": "1e8deb511c8f3b6e5fd40fe07e3f6ff358d94970", "filename": "libstdc++-v3/testsuite/20_util/is_convertible/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Frequirements%2Ftypedefs.cc?ref=2d0269f68336b0ca347594bec9d10d804717a76e", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_convertible<int, int>       test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "6ec22d024a9c1e86caf0e264e660d94ab403cd6d", "filename": "libstdc++-v3/testsuite/20_util/is_convertible/value.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Fvalue.cc?ref=2d0269f68336b0ca347594bec9d10d804717a76e", "patch": "@@ -0,0 +1,102 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_convertible;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_relationship<is_convertible, int, int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int, const int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, volatile int, const int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int, float>(true)) );\n+  VERIFY( (test_relationship<is_convertible, double, float>(true)) );\n+  VERIFY( (test_relationship<is_convertible, float, int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int*, const int*>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int*, void*>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int[4], int*>(true)) );\n+  VERIFY( (test_relationship<is_convertible, float&, int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int, const int&>(true)) ); \n+  VERIFY( (test_relationship<is_convertible, const int&, int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, float, const int&>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int(int), int(*)(int)>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int(&)(int), int(*)(int)>(true)) );\n+  VERIFY( (test_relationship<is_convertible, EnumType, int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, ClassType, ClassType>(true)) );\n+  VERIFY( (test_relationship<is_convertible, DerivedType, ClassType>(true)) );\n+  VERIFY( (test_relationship<is_convertible, DerivedType*, ClassType*>(true)) );\n+  VERIFY( (test_relationship<is_convertible, DerivedType&, ClassType&>(true)) );\n+\n+  VERIFY( (test_relationship<is_convertible, const int, const int&>(true)) );\n+\n+  VERIFY( (test_relationship<is_convertible, void, void>(true)) );\n+  VERIFY( (test_relationship<is_convertible, const void, void>(true)) );\n+  VERIFY( (test_relationship<is_convertible, void, volatile void>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_relationship<is_convertible, const int*, int*>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int*, float*>(false)) );\n+  VERIFY( (test_relationship<is_convertible, const int[4], int*>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int[4], int[4]>(false)) );\n+  VERIFY( (test_relationship<is_convertible, const int&, int&>(false)) );\n+  VERIFY( (test_relationship<is_convertible, float&, int&>(false)) );\n+  VERIFY( (test_relationship<is_convertible, float, volatile int&>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int(int), int(int)>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int(int), int(*)(void)>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int(*)(int),\n+\t                                     int(&)(int)>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int, EnumType>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int, ClassType>(false)) );\n+  VERIFY( (test_relationship<is_convertible, ClassType, DerivedType>(false)) );\n+  VERIFY( (test_relationship<is_convertible, ClassType*,\n+\t                                     DerivedType*>(false)) );\n+  VERIFY( (test_relationship<is_convertible, ClassType&,\n+\t                                     DerivedType&>(false)) );\n+\n+  VERIFY( (test_relationship<is_convertible, void, int>(false)) );\n+  VERIFY( (test_relationship<is_convertible, void, float>(false)) );  \n+  VERIFY( (test_relationship<is_convertible, void, int(*)(int)>(false)) );\n+\n+  // C++0x\n+  VERIFY( (test_relationship<is_convertible, int, void>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int[4], void>(false)) );\n+\n+  VERIFY( (test_relationship<is_convertible, int, int&>(false)) );\n+  VERIFY( (test_relationship<is_convertible, float,\n+\t                                     volatile float&>(false)) );\n+  VERIFY( (test_relationship<is_convertible, const volatile int,\n+\t                                     const volatile int&>(false)) );\n+  VERIFY( (test_relationship<is_convertible, volatile int,\n+\t                                     volatile int&>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int(int), int(&)(int)>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5b129e860e8b2cc42df0b4f4054ac3bb74abb787", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=2d0269f68336b0ca347594bec9d10d804717a76e", "patch": "@@ -3,7 +3,7 @@\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 570 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 532 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 554 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 516 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "fc58ffecf70f8cd8a334f9af8a6f4f433d620ff0", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0269f68336b0ca347594bec9d10d804717a76e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=2d0269f68336b0ca347594bec9d10d804717a76e", "patch": "@@ -3,7 +3,7 @@\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 491 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 453 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 475 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 437 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}]}