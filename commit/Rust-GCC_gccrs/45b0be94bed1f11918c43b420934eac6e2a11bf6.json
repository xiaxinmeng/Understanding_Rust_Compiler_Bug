{"sha": "45b0be94bed1f11918c43b420934eac6e2a11bf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDViMGJlOTRiZWQxZjExOTE4YzQzYjQyMDkzNGVhYzZlMmExMWJmNg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-11-12T20:26:43Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-11-12T20:26:43Z"}, "message": "gimple-expr.h (create_tmp_var_name, [...]): Relocate prototypes from gimple.h.\n\n\n2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* gimple-expr.h (create_tmp_var_name, create_tmp_var_raw,\n\tcreate_tmp_var, create_tmp_reg, mark_addressable, is_gimple_reg_rhs):\n\tRelocate prototypes from gimple.h.\n\t* gimplify.h: New File.  Relocate some prototypes from gimple.h here.\n\t(gimple_predicate, enum fallback, enum gimplify_status): Relocate\n\tfrom gimple.h.\n\t* gimple.h: Move some prototypes to gimplify.h.\n\t(gimple_predicate, enum fallback, enum gimplify_status): Move to\n\tgimplify.h.\n\t(gimple_do_not_emit_location_p, gimple_set_do_not_emit_location):\n\tRelocate from gimpify.c.\n\t* gimple-expr.c (remove_suffix, tmp_var_id_num, create_tmp_var_name,\n\tcreate_tmp_var_raw, create_tmp_var, create_tmp_reg, mark_addressable,\n\tis_gimple_reg_rhs) Relocate from gimplify.c.\n\t* gimplify.c (mark_addressable): Move to gimple-expr.c.\n\t(gimple_seq_add_stmt_without_update): Move to gimple.c.\n\t(remove_suffix, tmp_var_id_num, create_tmp_var_name, create_tmp_var_raw,\n\tcreate_tmp_var, create_tmp_reg, is_gimple_reg_rhs): Move to \n\tgimple-expr.c.\n\t(should_carry_location_p): Move to gimple.c.\n\t(gimple_do_not_emit_location_p, gimple_set_do_not_emit_location): Move\n\tto gimple.h.\n\t(annotate_one_with_location, annotate_all_with_location_after,\n\tannotate_all_with_location): Move to gimple.c.\n\t(compare_case_labels, sort_case_labels,\n\tpreprocess_case_label_vec_for_gimple): Move to gimple.c.\n\t(rhs_predicate_for): Make static.\n\t(gimplify_assign): Relocate from gimple.c.\n\t* gimple.c (gimplify_assign): Move to gimplify.c.\n\t(gimple_seq_add_stmt_without_update, should_carry_location_p,\n\tannotate_one_with_location, annotate_all_with_location_after,\n\tannotate_all_with_location, compare_case_labels, sort_case_labels,\n\tpreprocess_case_label_vec_for_gimple): Relocate from gimplify.c.\n\t* tree.h (unshare_expr, unshare_expr_without_location,\n\tmark_addressable): Move prototypes to gimplify.h.\n\t* Makefile.in (GTFILES): gimple-expr.c now has the GTY tag for\n\ttmp_var_id_num\n\t* asan.c: Include gimplify.h rather than gimple.h.\n\t* cfgloopmanip.c: Likewise.\n\t* cgraphunit.c: Likewise.\n\t* cilk-common.c: Likewise.\n\t* dwarf2out.c: Dont include gimple.h.\n\t* fold-const.c: Include gimplify.h rather than gimple.h.\n\t* function.c: Likewise.\n\t* gimple-fold.c: Likewise.\n\t* gimple-ssa-strength-reduction.c: Likewise.\n\t* graphite-clast-to-gimple.c: Likewise.\n\t* graphite-sese-to-poly.c: Likewise.\n\t* ipa-prop.c: Likewise.\n\t* ipa-split.c: Likewise.\n\t* ipa.c: Likewise.\n\t* langhooks.c: Dont include gimple.h.\n\t* loop-init.c: Include gimplify.h rather than gimple.h.\n\t* omp-low.c: Likewise.\n\t* sese.c: Likewise.\n\t* stor-layout.c: Likewise.\n\t* targhooks.c: Likewise.\n\t* trans-mem.c: Likewise.\n\t* tree-affine.c: Likewise.\n\t* tree-cfg.c: Likewise.\n\t* tree-cfgcleanup.c: Likewise.\n\t* tree-complex.c: Likewise.\n\t* tree-if-conv.c: Likewise.\n\t* tree-inline.c: Likewise.\n\t* tree-iterator.c: Likewise.\n\t* tree-loop-distribution.c: Likewise.\n\t* tree-nested.c: Likewise.\n\t* tree-parloops.c: Likewise.\n\t* tree-predcom.c: Likewise.\n\t* tree-profile.c: Likewise.\n\t* tree-scalar-evolution.c: Likewise.\n\t* tree-sra.c: Likewise.\n\t* tree-ssa-address.c: Likewise.\n\t* tree-ssa-ccp.c: Likewise.\n\t* tree-ssa-dce.c: Likewise.\n\t* tree-ssa-forwprop.c: Likewise.\n\t* tree-ssa-ifcombine.c: Likewise.\n\t* tree-ssa-loop-im.c: Likewise.\n\t* tree-ssa-loop-ivopts.c: Likewise.\n\t* tree-ssa-loop-manip.c: Likewise.\n\t* tree-ssa-loop-niter.c: Likewise.\n\t* tree-ssa-loop-prefetch.c: Likewise.\n\t* tree-ssa-loop-unswitch.c: Likewise.\n\t* tree-ssa-math-opts.c: Likewise.\n\t* tree-ssa-phiopt.c: Likewise.\n\t* tree-ssa-phiprop.c: Likewise.\n\t* tree-ssa-pre.c: Likewise.\n\t* tree-ssa-propagate.c: Likewise.\n\t* tree-ssa-reassoc.c: Likewise.\n\t* tree-ssa-sccvn.c: Likewise.\n\t* tree-ssa-strlen.c: Likewise.\n\t* tree-ssa.c: Likewise.\n\t* tree-switch-conversio: Likewise.n.c\n\t* tree-tailcall.c: Likewise.\n\t* tree-vect-data-refs.c: Likewise.\n\t* tree-vect-generic.c: Likewise.\n\t* tree-vect-loop-manip.c: Likewise.\n\t* tree-vect-loop.c: Likewise.\n\t* tree-vect-patterns.c: Likewise.\n\t* tree-vect-stmts.c: Likewise.\n\t* tsan.c: Likewise.\n\t* value-prof.c: Likewise.\n\t* config/aarch64/aarch64.c: Include gimplify.h instead of gimple.h.\n\t* config/alpha/alpha.c: Likewise.\n\t* config/darwin.c: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/mep/mep.c: Likewise.\n\t* config/mips/mips.c: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/s390/s390.c: Likewise.\n\t* config/sh/sh.c: Likewise.\n\t* config/sparc/sparc.c: Likewise.\n\t* config/spu/spu.c: Likewise.\n\t* config/stormy16/stormy16.c: Likewise.\n\t* config/tilegx/tilegx.c: Likewise.\n\t* config/tilepro/tilepro.c: Likewise.\n\t* config/xtensa/xtensa.c: Likewise.\n\n\t* ada/gcc-interface/trans.c: Include gimplify.h.\n\n\t* c/c-typeck.c: Include gimplify.h.\n\n\t* c-family/c-common.c: Include gimplify.h.\n\t* c-family/c-gimplify.c: Likewise.\n\t* c-family/cilk.c: Likewise.\n\t* c-family/c-omp.c: Include gimple-expr.h instead of gimple.h.\n\t* c-family/c-ubsan.c: Don't include gimple.h.\n\n\t* cp/class.c: Include gimplify.h.\n\t* cp/cp-gimplify.c: Likewise.\n\t* cp/error.c: Likewise.\n\t* cp/init.c: Likewise.\n\t* cp/optimize.c: Likewise.\n\t* cp/pt.c: Likewise.\n\t* cp/semantics.c: Likewise.\n\t* cp/tree.c: Likewise.\n\t* cp/vtable-class-hierarchy.c: Likewise.\n\t* cp/decl2.c: Don't include gimple.h.\n\t* cp/except.c: Likewise.\n\t* cp/method.c: Include pointer-set.h instead of gimple.h.\n\n\t* fortran/f95-lang.c: Don't include gimple.h.\n\t* fortran/trans-array.c: Include gimple-expr.h instead of gimple.h.\n\t* fortran/trans.c: Likewise.\n\t* fortran/trans-decl.c: Likewise.\n\t* fortran/trans-expr.c: Include gimplify.h.\n\t* fortran/trans-openmp.c: Likewise.\n\n\t* go/go-lang.c: Include gimplify.h.\n\n\t* java/java-gimplify.c: Include gimplify.h.\n\n\t* objc/objc-act.c: Include gimplify.h.\n\nFrom-SVN: r204717", "tree": {"sha": "ec5ecce5dd0b07212d3416eab7b065b138ed7577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec5ecce5dd0b07212d3416eab7b065b138ed7577"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45b0be94bed1f11918c43b420934eac6e2a11bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b0be94bed1f11918c43b420934eac6e2a11bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45b0be94bed1f11918c43b420934eac6e2a11bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b0be94bed1f11918c43b420934eac6e2a11bf6/comments", "author": null, "committer": null, "parents": [{"sha": "c9a584aa7ab99230c50c659b209195e6b52ccde0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9a584aa7ab99230c50c659b209195e6b52ccde0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9a584aa7ab99230c50c659b209195e6b52ccde0"}], "stats": {"total": 1548, "additions": 870, "deletions": 678}, "files": [{"sha": "a6b572408329d0ad975e451905034435a7d311f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -1,3 +1,124 @@\n+2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-expr.h (create_tmp_var_name, create_tmp_var_raw,\n+\tcreate_tmp_var, create_tmp_reg, mark_addressable, is_gimple_reg_rhs):\n+\tRelocate prototypes from gimple.h.\n+\t* gimplify.h: New File.  Relocate some prototypes from gimple.h here.\n+\t(gimple_predicate, enum fallback, enum gimplify_status): Relocate\n+\tfrom gimple.h.\n+\t* gimple.h: Move some prototypes to gimplify.h.\n+\t(gimple_predicate, enum fallback, enum gimplify_status): Move to\n+\tgimplify.h.\n+\t(gimple_do_not_emit_location_p, gimple_set_do_not_emit_location):\n+\tRelocate from gimpify.c.\n+\t* gimple-expr.c (remove_suffix, tmp_var_id_num, create_tmp_var_name,\n+\tcreate_tmp_var_raw, create_tmp_var, create_tmp_reg, mark_addressable,\n+\tis_gimple_reg_rhs) Relocate from gimplify.c.\n+\t* gimplify.c (mark_addressable): Move to gimple-expr.c.\n+\t(gimple_seq_add_stmt_without_update): Move to gimple.c.\n+\t(remove_suffix, tmp_var_id_num, create_tmp_var_name, create_tmp_var_raw,\n+\tcreate_tmp_var, create_tmp_reg, is_gimple_reg_rhs): Move to \n+\tgimple-expr.c.\n+\t(should_carry_location_p): Move to gimple.c.\n+\t(gimple_do_not_emit_location_p, gimple_set_do_not_emit_location): Move\n+\tto gimple.h.\n+\t(annotate_one_with_location, annotate_all_with_location_after,\n+\tannotate_all_with_location): Move to gimple.c.\n+\t(compare_case_labels, sort_case_labels,\n+\tpreprocess_case_label_vec_for_gimple): Move to gimple.c.\n+\t(rhs_predicate_for): Make static.\n+\t(gimplify_assign): Relocate from gimple.c.\n+\t* gimple.c (gimplify_assign): Move to gimplify.c.\n+\t(gimple_seq_add_stmt_without_update, should_carry_location_p,\n+\tannotate_one_with_location, annotate_all_with_location_after,\n+\tannotate_all_with_location, compare_case_labels, sort_case_labels,\n+\tpreprocess_case_label_vec_for_gimple): Relocate from gimplify.c.\n+\t* tree.h (unshare_expr, unshare_expr_without_location,\n+\tmark_addressable): Move prototypes to gimplify.h.\n+\t* Makefile.in (GTFILES): gimple-expr.c now has the GTY tag for\n+\ttmp_var_id_num\n+\t* asan.c: Include gimplify.h rather than gimple.h.\n+\t* cfgloopmanip.c: Likewise.\n+\t* cgraphunit.c: Likewise.\n+\t* cilk-common.c: Likewise.\n+\t* dwarf2out.c: Dont include gimple.h.\n+\t* fold-const.c: Include gimplify.h rather than gimple.h.\n+\t* function.c: Likewise.\n+\t* gimple-fold.c: Likewise.\n+\t* gimple-ssa-strength-reduction.c: Likewise.\n+\t* graphite-clast-to-gimple.c: Likewise.\n+\t* graphite-sese-to-poly.c: Likewise.\n+\t* ipa-prop.c: Likewise.\n+\t* ipa-split.c: Likewise.\n+\t* ipa.c: Likewise.\n+\t* langhooks.c: Dont include gimple.h.\n+\t* loop-init.c: Include gimplify.h rather than gimple.h.\n+\t* omp-low.c: Likewise.\n+\t* sese.c: Likewise.\n+\t* stor-layout.c: Likewise.\n+\t* targhooks.c: Likewise.\n+\t* trans-mem.c: Likewise.\n+\t* tree-affine.c: Likewise.\n+\t* tree-cfg.c: Likewise.\n+\t* tree-cfgcleanup.c: Likewise.\n+\t* tree-complex.c: Likewise.\n+\t* tree-if-conv.c: Likewise.\n+\t* tree-inline.c: Likewise.\n+\t* tree-iterator.c: Likewise.\n+\t* tree-loop-distribution.c: Likewise.\n+\t* tree-nested.c: Likewise.\n+\t* tree-parloops.c: Likewise.\n+\t* tree-predcom.c: Likewise.\n+\t* tree-profile.c: Likewise.\n+\t* tree-scalar-evolution.c: Likewise.\n+\t* tree-sra.c: Likewise.\n+\t* tree-ssa-address.c: Likewise.\n+\t* tree-ssa-ccp.c: Likewise.\n+\t* tree-ssa-dce.c: Likewise.\n+\t* tree-ssa-forwprop.c: Likewise.\n+\t* tree-ssa-ifcombine.c: Likewise.\n+\t* tree-ssa-loop-im.c: Likewise.\n+\t* tree-ssa-loop-ivopts.c: Likewise.\n+\t* tree-ssa-loop-manip.c: Likewise.\n+\t* tree-ssa-loop-niter.c: Likewise.\n+\t* tree-ssa-loop-prefetch.c: Likewise.\n+\t* tree-ssa-loop-unswitch.c: Likewise.\n+\t* tree-ssa-math-opts.c: Likewise.\n+\t* tree-ssa-phiopt.c: Likewise.\n+\t* tree-ssa-phiprop.c: Likewise.\n+\t* tree-ssa-pre.c: Likewise.\n+\t* tree-ssa-propagate.c: Likewise.\n+\t* tree-ssa-reassoc.c: Likewise.\n+\t* tree-ssa-sccvn.c: Likewise.\n+\t* tree-ssa-strlen.c: Likewise.\n+\t* tree-ssa.c: Likewise.\n+\t* tree-switch-conversio: Likewise.n.c\n+\t* tree-tailcall.c: Likewise.\n+\t* tree-vect-data-refs.c: Likewise.\n+\t* tree-vect-generic.c: Likewise.\n+\t* tree-vect-loop-manip.c: Likewise.\n+\t* tree-vect-loop.c: Likewise.\n+\t* tree-vect-patterns.c: Likewise.\n+\t* tree-vect-stmts.c: Likewise.\n+\t* tsan.c: Likewise.\n+\t* value-prof.c: Likewise.\n+\t* config/aarch64/aarch64.c: Include gimplify.h instead of gimple.h.\n+\t* config/alpha/alpha.c: Likewise.\n+\t* config/darwin.c: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/mep/mep.c: Likewise.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/s390/s390.c: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sparc/sparc.c: Likewise.\n+\t* config/spu/spu.c: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/tilegx/tilegx.c: Likewise.\n+\t* config/tilepro/tilepro.c: Likewise.\n+\t* config/xtensa/xtensa.c: Likewise.\n+\n 2013-11-12  Adam Butcher  <adam@jessamine.co.uk>\n \n \t* tree.c (grow_tree_vec_stat): New function ..."}, {"sha": "031446be5ea625bd2df96bc268b3c0ee63aad735", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -2255,7 +2255,7 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/tree-ssanames.c $(srcdir)/tree-eh.c $(srcdir)/tree-ssa-address.c \\\n   $(srcdir)/tree-cfg.c \\\n   $(srcdir)/tree-dfa.c \\\n-  $(srcdir)/tree-iterator.c $(srcdir)/gimplify.c \\\n+  $(srcdir)/tree-iterator.c $(srcdir)/gimple-expr.c \\\n   $(srcdir)/tree-chrec.h \\\n   $(srcdir)/tree-scalar-evolution.c \\\n   $(srcdir)/tree-ssa-operands.h \\"}, {"sha": "39b0f97c2a4e1310c21556f607cbadfb31bbadaf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -1,3 +1,7 @@\n+2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* ada/gcc-interface/trans.c: Include gimplify.h.\n+\n 2013-11-11  Tristan Gingold  <gingold@adacore.com>\n \t    Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "9336a69abce5aa0a5e18e4d70bc8242e3a4061af", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -33,7 +33,7 @@\n #include \"output.h\"\n #include \"libfuncs.h\"\t/* For set_stack_check_libfunc.  */\n #include \"tree-iterator.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"bitmap.h\"\n #include \"cgraph.h\"\n #include \"diagnostic.h\""}, {"sha": "59e26397cb1a434c3ccd29d724c8a6c8aa75ce0a", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-iterator.h\"\n #include \"cgraph.h\"\n #include \"tree-ssanames.h\""}, {"sha": "57063bc5f76123ae751ff4cc3e70a44e031357a3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -1,3 +1,11 @@\n+2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* c-family/c-common.c: Include gimplify.h.\n+\t* c-family/c-gimplify.c: Likewise.\n+\t* c-family/cilk.c: Likewise.\n+\t* c-family/c-omp.c: Include gimple-expr.h instead of gimple.h.\n+\t* c-family/c-ubsan.c: Don't include gimple.h.\n+\n 2013-11-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (c_common_reswords): Add _Thread_local."}, {"sha": "835d22c6cf90028b7dad2669c96254bdfe13d801", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"cgraph.h\"\n #include \"target-def.h\"\n+#include \"gimplify.h\"\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n "}, {"sha": "a7f29f8b4fc51b0adfc0e5b7d3e0d815b5c6764a", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"c-common.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-inline.h\"\n #include \"diagnostic-core.h\"\n #include \"langhooks.h\""}, {"sha": "b342bd216cbb71be1276f06f227181cf87ef5607", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"c-common.h\"\n #include \"c-pragma.h\"\n-#include \"gimple.h\"\t\t/* For create_tmp_var_raw.  */\n+#include \"gimple-expr.h\"\n #include \"langhooks.h\"\n \n "}, {"sha": "dbac348bc0ee43e1680dde8aa39670f59fb28b1c", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -24,7 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"alloc-pool.h\"\n #include \"cgraph.h\"\n-#include \"gimple.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n #include \"ubsan.h\""}, {"sha": "f6d7dce01ce35df1eeba31575319c57f0cdd2b6a", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"langhooks.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-iterator.h\"\n #include \"tree-inline.h\"\n #include \"c-family/c-common.h\""}, {"sha": "e95c54dd2bee9331b48b6fcbe76f1236fd39066d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -1,3 +1,7 @@\n+2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* c/c-typeck.c: Include gimplify.h.\n+\n 2013-11-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-tree.h (struct c_declspecs): Add thread_gnu_p field."}, {"sha": "1cf9b4563bc2ab670f1bb9ca23540cdafc09d226", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -36,7 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"tree-iterator.h\"\n #include \"bitmap.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-inline.h\"\n #include \"omp-low.h\"\n #include \"c-family/c-objc.h\""}, {"sha": "131c2a043dc0716feaa4f92b630a78acfce7ffeb", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-ssa-loop-manip.h\"\n #include \"dumpfile.h\"\n "}, {"sha": "4765e6abb44bf4e65d3e4bfa236321df5b6c5117", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -164,7 +164,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"output.h\"\n #include \"rtl.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-into-ssa.h\""}, {"sha": "216c7d43607ffe1de904b4ae943b22e59cb2c395", "filename": "gcc/cilk-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcilk-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcilk-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcilk-common.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n #include \"recog.h\"\n #include \"tree-iterator.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"cilk.h\"\n \n /* This structure holds all the important fields of the internal structures,"}, {"sha": "a51bb210850cf9e355347e2b4737536653d60835", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -42,7 +42,7 @@\n #include \"recog.h\"\n #include \"langhooks.h\"\n #include \"diagnostic-core.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"optabs.h\"\n #include \"dwarf2.h\"\n #include \"cfgloop.h\""}, {"sha": "9c8d907cd23b5e7e685a9ebe8bdf9ac7185b2929", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -48,7 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"langhooks.h\"\n #include \"splay-tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-stdarg.h\""}, {"sha": "009e851835c88931517b4e19c53170a2470ce39b", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -45,7 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"debug.h\"\n #include \"obstack.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"lto-streamer.h\"\n \n /* Darwin supports a feature called fix-and-continue, which is used"}, {"sha": "5287b49bfc9a6e020988a7471d46379a9cbed6e6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -47,7 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"reload.h\"\n #include \"cgraph.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"dwarf2.h\"\n #include \"df.h\"\n #include \"tm-constrs.h\""}, {"sha": "2b331873e2444da72b5f34106710f08bb568f693", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -49,7 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"hash-table.h\"\n #include \"langhooks.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"intl.h\"\n #include \"df.h\"\n #include \"debug.h\""}, {"sha": "f67bf855121daf6982945ec7dac41efbb7638cc3", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -47,7 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"langhooks.h\"\n #include \"df.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"opts.h\"\n #include \"dumpfile.h\"\n "}, {"sha": "ece4fec5413f7caca32c9a91ce6d3811b8a5f4b0", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -50,7 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"sched-int.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"bitmap.h\"\n #include \"diagnostic.h\"\n #include \"target-globals.h\""}, {"sha": "33547c41dd60b4e293687a519ef55ac2cf70a4c3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -51,7 +51,7 @@\n #include \"reload.h\"\n #include \"cfgloop.h\"\n #include \"sched-int.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"intl.h\"\n #include \"params.h\"\n #include \"tm-constrs.h\""}, {"sha": "ca6503540b15df49318eeee55f016a1902feccda", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -47,7 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"langhooks.h\"\n #include \"optabs.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"df.h\"\n #include \"params.h\"\n #include \"cfgloop.h\""}, {"sha": "6afeca9d93b9f6580d60cc02c83e77865a731bfd", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -48,7 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sched-int.h\"\n #include \"params.h\"\n #include \"ggc.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"cfgloop.h\"\n #include \"alloc-pool.h\"\n #include \"tm-constrs.h\""}, {"sha": "f2552bea63cfe378348a6c94acd6af9f6e3d0df4", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -46,7 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"common/common-target.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"langhooks.h\"\n #include \"reload.h\"\n #include \"params.h\""}, {"sha": "7dedaed4e104bd45ead26dae4b862d874da904a3", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -45,7 +45,7 @@\n #include \"sched-int.h\"\n #include \"params.h\"\n #include \"machmode.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tm-constrs.h\"\n #include \"ddg.h\"\n #include \"sbitmap.h\""}, {"sha": "7704fff073ac9c2733e20d2e4a6bbeaac736c79d", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -43,7 +43,7 @@\n #include \"target-def.h\"\n #include \"tm_p.h\"\n #include \"langhooks.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"df.h\"\n #include \"reload.h\"\n #include \"ggc.h\""}, {"sha": "d20476f16106a5cb9fcb50aa3e70e0abc36eb8d0", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -40,7 +40,7 @@\n #include \"dwarf2.h\"\n #include \"timevar.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"cfgloop.h\"\n #include \"tilegx-builtins.h\"\n #include \"tilegx-multiply.h\""}, {"sha": "84b3ef53bb8c3b6338ec61031d28daede33e2197", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -41,7 +41,7 @@\n #include \"dwarf2.h\"\n #include \"timevar.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"cfgloop.h\"\n #include \"tilepro-builtins.h\"\n #include \"tilepro-multiply.h\""}, {"sha": "757314d58df2dfe8e27b0aacf904e800683fd4a0", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -46,7 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"langhooks.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"df.h\"\n \n "}, {"sha": "7c6b2319e35c0b028b15dfd26e0f30dbf860c0b6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -1,3 +1,18 @@\n+2013-11-12  Andrew MacLeod <amacleod@redhat.com>\n+\n+\t* cp/class.c: Include gimplify.h.\n+\t* cp/cp-gimplify.c: Likewise.\n+\t* cp/error.c: Likewise.\n+\t* cp/init.c: Likewise.\n+\t* cp/optimize.c: Likewise.\n+\t* cp/pt.c: Likewise.\n+\t* cp/semantics.c: Likewise.\n+\t* cp/tree.c: Likewise.\n+\t* cp/vtable-class-hierarchy.c: Likewise.\n+\t* cp/decl2.c: Don't include gimple.h.\n+\t* cp/except.c: Likewise.\n+\t* cp/method.c: Include pointer-set.h instead of gimple.h.\n+\n 2013-11-12  Adam Butcher  <adam@jessamine.co.uk>\n \n \t* pt.c (convert_generic_types_to_packs): New function to transform"}, {"sha": "b4cab542e2ed2565d3bd0f445b6339727e501b26", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"splay-tree.h\"\n #include \"pointer-set.h\"\n #include \"hash-table.h\"\n+#include \"gimplify.h\"\n \n /* The number of nested classes being processed.  If we are not in the\n    scope of any class, this is zero.  */"}, {"sha": "e8ccf1aa561ba1c18c5d1ea3cf22ccbba378126b", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-tree.h\"\n #include \"c-family/c-common.h\"\n #include \"tree-iterator.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"hashtab.h\"\n #include \"pointer-set.h\"\n #include \"flags.h\""}, {"sha": "18456848492ce859bb353e64c81cca07fa1d5d55", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -45,7 +45,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-pragma.h\"\n #include \"dumpfile.h\"\n #include \"intl.h\"\n-#include \"gimple.h\"\n #include \"pointer-set.h\"\n #include \"splay-tree.h\"\n #include \"langhooks.h\""}, {"sha": "3d72c1340dcf2c62f05cd2ceb1983ac9aa61e8cc", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pointer-set.h\"\n #include \"c-family/c-objc.h\"\n #include \"ubsan.h\"\n+#include \"gimplify.h\"\n \n #include <new>                    // For placement-new.\n "}, {"sha": "ac2128d13b0711752ff347ce1983d7d71832fcbf", "filename": "gcc/cp/except.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -31,7 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"tree-iterator.h\"\n #include \"target.h\"\n-#include \"gimple.h\"\n \n static void push_eh_cleanup (tree);\n static tree prepare_eh_type (tree);"}, {"sha": "1919603a7050058013ea565cdb44c433518dd1d1", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-tree.h\"\n #include \"flags.h\"\n #include \"target.h\"\n+#include \"gimplify.h\"\n \n static bool begin_init_stmts (tree *, tree *);\n static tree finish_init_stmts (bool, tree, tree);"}, {"sha": "272ef42217f2317a26b20a1f05ca0eed13e5816c", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"common/common-target.h\"\n #include \"diagnostic.h\"\n #include \"cgraph.h\"\n-#include \"gimple.h\"\n+#include \"pointer-set.h\"\n \n /* Various flags to control the mangling process.  */\n "}, {"sha": "736dad9bec7289f02a19abf0aa0a62280d124010", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"diagnostic-core.h\"\n #include \"dumpfile.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-iterator.h\"\n #include \"cgraph.h\"\n "}, {"sha": "96a7db58e2312e1f543cc1c7cb6f495b82be0869", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"tree-iterator.h\"\n #include \"type-utils.h\"\n+#include \"gimplify.h\"\n \n /* The type of functions taking a tree, and some additional data, and\n    returning an int.  */"}, {"sha": "202f1cf6854aedd0a36c7a633df4fcffa3b73f11", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -41,7 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"vec.h\"\n #include \"target.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"bitmap.h\"\n #include \"hash-table.h\"\n #include \"omp-low.h\""}, {"sha": "eb7bd876817549ce5d37f7250a1a7ebb75a13a2b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"convert.h\"\n #include \"cgraph.h\"\n #include \"splay-tree.h\"\n-#include \"gimple.h\" /* gimple_has_body_p */\n+#include \"gimplify.h\"\n #include \"hash-table.h\"\n \n static tree bot_manip (tree *, int *, void *);"}, {"sha": "39c75ce5c33ca929b26ba173350232a58f6f32fb", "filename": "gcc/cp/vtable-class-hierarchy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fvtable-class-hierarchy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fcp%2Fvtable-class-hierarchy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvtable-class-hierarchy.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -118,7 +118,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"tree-iterator.h\"\n #include \"vtable-verify.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n \n static int num_calls_to_regset = 0;\n static int num_calls_to_regpair = 0;"}, {"sha": "d661bd7076cd9bfae53bd9edd8060fe575b7afca", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -87,7 +87,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hash-table.h\"\n #include \"cgraph.h\"\n #include \"input.h\"\n-#include \"gimple.h\"\n #include \"ira.h\"\n #include \"lra.h\"\n #include \"dumpfile.h\""}, {"sha": "77f9fb8e581e8f3680f0c1a1794d34aa13dcc77b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -57,7 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hash-table.h\"\n #include \"langhooks.h\"\n #include \"md5.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-dfa.h\"\n \n /* Nonzero if we are folding constants inside an initializer; zero"}, {"sha": "4f75b03bfb058b42d44fdcf07499993e7b85fcb9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -1,3 +1,12 @@\n+2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* fortran/f95-lang.c: Don't include gimple.h.\n+\t* fortran/trans-array.c: Include gimple-expr.h instead of gimple.h.\n+\t* fortran/trans.c: Likewise.\n+\t* fortran/trans-decl.c: Likewise.\n+\t* fortran/trans-expr.c: Include gimplify.h.\n+\t* fortran/trans-openmp.c: Likewise.\n+\n 2013-11-07  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/58471"}, {"sha": "4da5e6913d27df4d7830e021aacb6f7eaab7e716", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -28,7 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n #include \"flags.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\""}, {"sha": "c2bbd0e216dabc82df356f71cc136e5c9e37f64f", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -79,7 +79,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\t\t/* For create_tmp_var_name.  */\n+#include \"gimple-expr.h\"\n #include \"diagnostic-core.h\"\t/* For internal_error/fatal_error.  */\n #include \"flags.h\"\n #include \"gfortran.h\""}, {"sha": "1df3bb44e7a28c393a61c250e42e94b466fa5f77", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"tree-dump.h\"\n-#include \"gimple.h\"\t/* For create_tmp_var_raw.  */\n+#include \"gimple-expr.h\"\t/* For create_tmp_var_raw.  */\n #include \"ggc.h\"\n #include \"diagnostic-core.h\"\t/* For internal_error.  */\n #include \"toplev.h\"\t/* For announce_function.  */"}, {"sha": "8adada6beadc8ce5699dde1844352b7c5a35e6a5", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Only for gfc_trans_assign and gfc_trans_pointer_assign.  */\n #include \"trans-stmt.h\"\n #include \"dependency.h\"\n+#include \"gimplify.h\"\n \n \n /* Convert a scalar to an array descriptor. To be used for assumed-rank"}, {"sha": "9d6d4d4df456caa2de4b7271a30532554b785c90", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\t/* For create_tmp_var_raw.  */\n+#include \"gimplify.h\"\t/* For create_tmp_var_raw.  */\n #include \"diagnostic-core.h\"\t/* For internal_error.  */\n #include \"gfortran.h\"\n #include \"trans.h\""}, {"sha": "ef20a20f0182cd227d233fdd1fa0dc49d2143d9b", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\t/* For create_tmp_var_raw.  */\n+#include \"gimple-expr.h\"\t/* For create_tmp_var_raw.  */\n #include \"tree-iterator.h\"\n #include \"diagnostic-core.h\"  /* For internal_error.  */\n #include \"flags.h\""}, {"sha": "620554d55f3306d8bc60649ac9cc2202104f38a2", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -55,7 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"target.h\"\n #include \"common/common-target.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-pass.h\"\n #include \"predict.h\"\n #include \"df.h\""}, {"sha": "c82abb7adab818536394c264d8cc8889858a3dc8", "filename": "gcc/gimple-expr.c", "status": "modified", "additions": 154, "deletions": 1, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -24,8 +24,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"demangle.h\"\n+#include \"gimple-ssa.h\"\n \n /* ----- Type related -----  */\n \n@@ -406,6 +407,116 @@ gimple_can_coalesce_p (tree name1, tree name2)\n   return false;\n }\n \n+/* Strip off a legitimate source ending from the input string NAME of\n+   length LEN.  Rather than having to know the names used by all of\n+   our front ends, we strip off an ending of a period followed by\n+   up to five characters.  (Java uses \".class\".)  */\n+\n+static inline void\n+remove_suffix (char *name, int len)\n+{\n+  int i;\n+\n+  for (i = 2;  i < 8 && len > i;  i++)\n+    {\n+      if (name[len - i] == '.')\n+\t{\n+\t  name[len - i] = '\\0';\n+\t  break;\n+\t}\n+    }\n+}\n+\n+/* Create a new temporary name with PREFIX.  Return an identifier.  */\n+\n+static GTY(()) unsigned int tmp_var_id_num;\n+\n+tree\n+create_tmp_var_name (const char *prefix)\n+{\n+  char *tmp_name;\n+\n+  if (prefix)\n+    {\n+      char *preftmp = ASTRDUP (prefix);\n+\n+      remove_suffix (preftmp, strlen (preftmp));\n+      clean_symbol_name (preftmp);\n+\n+      prefix = preftmp;\n+    }\n+\n+  ASM_FORMAT_PRIVATE_NAME (tmp_name, prefix ? prefix : \"T\", tmp_var_id_num++);\n+  return get_identifier (tmp_name);\n+}\n+\n+/* Create a new temporary variable declaration of type TYPE.\n+   Do NOT push it into the current binding.  */\n+\n+tree\n+create_tmp_var_raw (tree type, const char *prefix)\n+{\n+  tree tmp_var;\n+\n+  tmp_var = build_decl (input_location,\n+\t\t\tVAR_DECL, prefix ? create_tmp_var_name (prefix) : NULL,\n+\t\t\ttype);\n+\n+  /* The variable was declared by the compiler.  */\n+  DECL_ARTIFICIAL (tmp_var) = 1;\n+  /* And we don't want debug info for it.  */\n+  DECL_IGNORED_P (tmp_var) = 1;\n+\n+  /* Make the variable writable.  */\n+  TREE_READONLY (tmp_var) = 0;\n+\n+  DECL_EXTERNAL (tmp_var) = 0;\n+  TREE_STATIC (tmp_var) = 0;\n+  TREE_USED (tmp_var) = 1;\n+\n+  return tmp_var;\n+}\n+\n+/* Create a new temporary variable declaration of type TYPE.  DO push the\n+   variable into the current binding.  Further, assume that this is called\n+   only from gimplification or optimization, at which point the creation of\n+   certain types are bugs.  */\n+\n+tree\n+create_tmp_var (tree type, const char *prefix)\n+{\n+  tree tmp_var;\n+\n+  /* We don't allow types that are addressable (meaning we can't make copies),\n+     or incomplete.  We also used to reject every variable size objects here,\n+     but now support those for which a constant upper bound can be obtained.\n+     The processing for variable sizes is performed in gimple_add_tmp_var,\n+     point at which it really matters and possibly reached via paths not going\n+     through this function, e.g. after direct calls to create_tmp_var_raw.  */\n+  gcc_assert (!TREE_ADDRESSABLE (type) && COMPLETE_TYPE_P (type));\n+\n+  tmp_var = create_tmp_var_raw (type, prefix);\n+  gimple_add_tmp_var (tmp_var);\n+  return tmp_var;\n+}\n+\n+/* Create a new temporary variable declaration of type TYPE by calling\n+   create_tmp_var and if TYPE is a vector or a complex number, mark the new\n+   temporary as gimple register.  */\n+\n+tree\n+create_tmp_reg (tree type, const char *prefix)\n+{\n+  tree tmp;\n+\n+  tmp = create_tmp_var (type, prefix);\n+  if (TREE_CODE (type) == COMPLEX_TYPE\n+      || TREE_CODE (type) == VECTOR_TYPE)\n+    DECL_GIMPLE_REG_P (tmp) = 1;\n+\n+  return tmp;\n+}\n+\n \n /* ----- Expression related -----  */\n \n@@ -719,3 +830,45 @@ is_gimple_mem_ref_addr (tree t)\n \t      && (CONSTANT_CLASS_P (TREE_OPERAND (t, 0))\n \t\t  || decl_address_invariant_p (TREE_OPERAND (t, 0)))));\n }\n+\n+/* Mark X addressable.  Unlike the langhook we expect X to be in gimple\n+   form and we don't do any syntax checking.  */\n+\n+void\n+mark_addressable (tree x)\n+{\n+  while (handled_component_p (x))\n+    x = TREE_OPERAND (x, 0);\n+  if (TREE_CODE (x) == MEM_REF\n+      && TREE_CODE (TREE_OPERAND (x, 0)) == ADDR_EXPR)\n+    x = TREE_OPERAND (TREE_OPERAND (x, 0), 0);\n+  if (TREE_CODE (x) != VAR_DECL\n+      && TREE_CODE (x) != PARM_DECL\n+      && TREE_CODE (x) != RESULT_DECL)\n+    return;\n+  TREE_ADDRESSABLE (x) = 1;\n+\n+  /* Also mark the artificial SSA_NAME that points to the partition of X.  */\n+  if (TREE_CODE (x) == VAR_DECL\n+      && !DECL_EXTERNAL (x)\n+      && !TREE_STATIC (x)\n+      && cfun->gimple_df != NULL\n+      && cfun->gimple_df->decls_to_pointers != NULL)\n+    {\n+      void *namep\n+\t= pointer_map_contains (cfun->gimple_df->decls_to_pointers, x); \n+      if (namep)\n+\tTREE_ADDRESSABLE (*(tree *)namep) = 1;\n+    }\n+}\n+\n+/* Returns true iff T is a valid RHS for an assignment to a renamed\n+   user -- or front-end generated artificial -- variable.  */\n+\n+bool\n+is_gimple_reg_rhs (tree t)\n+{\n+  return get_gimple_rhs_class (TREE_CODE (t)) != GIMPLE_INVALID_RHS;\n+}\n+\n+#include \"gt-gimple-expr.h\""}, {"sha": "e74be2249df578c3675919e7d99fd62fc4486360", "filename": "gcc/gimple-expr.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.h?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -22,12 +22,18 @@ along with GCC; see the file COPYING3.  If not see\n \n extern bool useless_type_conversion_p (tree, tree);\n \n+\n extern void gimple_set_body (tree, gimple_seq);\n extern gimple_seq gimple_body (tree);\n extern bool gimple_has_body_p (tree);\n extern const char *gimple_decl_printable_name (tree, int);\n extern tree copy_var_decl (tree, tree, tree);\n extern bool gimple_can_coalesce_p (tree, tree);\n+extern tree create_tmp_var_name (const char *);\n+extern tree create_tmp_var_raw (tree, const char *);\n+extern tree create_tmp_var (tree, const char *);\n+extern tree create_tmp_reg (tree, const char *);\n+\n \n extern void extract_ops_from_tree_1 (tree, enum tree_code *, tree *, tree *,\n \t\t\t\t     tree *);\n@@ -46,6 +52,8 @@ extern bool is_gimple_asm_val (tree);\n extern bool is_gimple_min_lval (tree);\n extern bool is_gimple_call_addr (tree);\n extern bool is_gimple_mem_ref_addr (tree);\n+extern void mark_addressable (tree);\n+extern bool is_gimple_reg_rhs (tree);\n \n /* Return true if a conversion from either type of TYPE1 and TYPE2\n    to the other is not required.  Otherwise return false.  */"}, {"sha": "122d1932b94ba2b2a0811c80963bc233d0bc681c", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"dumpfile.h\"\n #include \"bitmap.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-into-ssa.h\""}, {"sha": "41f24cc03e59901a52208d66453f90d0cc9ff1c9", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -37,7 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"basic-block.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\""}, {"sha": "cba3bcedf54de8bbb923298d7c6afe1c7779d146", "filename": "gcc/gimple.c", "status": "modified", "additions": 278, "deletions": 18, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"diagnostic.h\"\n #include \"value-prof.h\"\n #include \"flags.h\"\n@@ -446,24 +447,6 @@ gimple_build_assign_with_ops (enum tree_code subcode, tree lhs, tree op1,\n }\n \n \n-/* Build a new GIMPLE_ASSIGN tuple and append it to the end of *SEQ_P.\n-\n-   DST/SRC are the destination and source respectively.  You can pass\n-   ungimplified trees in DST or SRC, in which case they will be\n-   converted to a gimple operand if necessary.\n-\n-   This function returns the newly created GIMPLE_ASSIGN tuple.  */\n-\n-gimple\n-gimplify_assign (tree dst, tree src, gimple_seq *seq_p)\n-{\n-  tree t = build2 (MODIFY_EXPR, TREE_TYPE (dst), dst, src);\n-  gimplify_and_add (t, seq_p);\n-  ggc_free (t);\n-  return gimple_seq_last_stmt (*seq_p);\n-}\n-\n-\n /* Build a GIMPLE_COND statement.\n \n    PRED is the condition used to compare LHS and the RHS.\n@@ -1172,6 +1155,23 @@ gimple_seq_add_stmt (gimple_seq *seq_p, gimple gs)\n   gsi_insert_after (&si, gs, GSI_NEW_STMT);\n }\n \n+/* Link gimple statement GS to the end of the sequence *SEQ_P.  If\n+   *SEQ_P is NULL, a new sequence is allocated.  This function is\n+   similar to gimple_seq_add_stmt, but does not scan the operands.\n+   During gimplification, we need to manipulate statement sequences\n+   before the def/use vectors have been constructed.  */\n+\n+void\n+gimple_seq_add_stmt_without_update (gimple_seq *seq_p, gimple gs)\n+{\n+  gimple_stmt_iterator si;\n+\n+  if (gs == NULL)\n+    return;\n+\n+  si = gsi_last (*seq_p);\n+  gsi_insert_after_without_update (&si, gs, GSI_NEW_STMT);\n+}\n \n /* Append sequence SRC to the end of sequence *DST_P.  If *DST_P is\n    NULL, a new sequence is allocated.  */\n@@ -1187,6 +1187,64 @@ gimple_seq_add_seq (gimple_seq *dst_p, gimple_seq src)\n   gsi_insert_seq_after (&si, src, GSI_NEW_STMT);\n }\n \n+/* Determine whether to assign a location to the statement GS.  */\n+\n+static bool\n+should_carry_location_p (gimple gs)\n+{\n+  /* Don't emit a line note for a label.  We particularly don't want to\n+     emit one for the break label, since it doesn't actually correspond\n+     to the beginning of the loop/switch.  */\n+  if (gimple_code (gs) == GIMPLE_LABEL)\n+    return false;\n+\n+  return true;\n+}\n+\n+/* Set the location for gimple statement GS to LOCATION.  */\n+\n+static void\n+annotate_one_with_location (gimple gs, location_t location)\n+{\n+  if (!gimple_has_location (gs)\n+      && !gimple_do_not_emit_location_p (gs)\n+      && should_carry_location_p (gs))\n+    gimple_set_location (gs, location);\n+}\n+\n+/* Set LOCATION for all the statements after iterator GSI in sequence\n+   SEQ.  If GSI is pointing to the end of the sequence, start with the\n+   first statement in SEQ.  */\n+\n+void\n+annotate_all_with_location_after (gimple_seq seq, gimple_stmt_iterator gsi,\n+\t\t\t\t  location_t location)\n+{\n+  if (gsi_end_p (gsi))\n+    gsi = gsi_start (seq);\n+  else\n+    gsi_next (&gsi);\n+\n+  for (; !gsi_end_p (gsi); gsi_next (&gsi))\n+    annotate_one_with_location (gsi_stmt (gsi), location);\n+}\n+\n+/* Set the location for all the statements in a sequence STMT_P to LOCATION.  */\n+\n+void\n+annotate_all_with_location (gimple_seq stmt_p, location_t location)\n+{\n+  gimple_stmt_iterator i;\n+\n+  if (gimple_seq_empty_p (stmt_p))\n+    return;\n+\n+  for (i = gsi_start (stmt_p); !gsi_end_p (i); gsi_next (&i))\n+    {\n+      gimple gs = gsi_stmt (i);\n+      annotate_one_with_location (gs, location);\n+    }\n+}\n \n /* Helper function of empty_body_p.  Return true if STMT is an empty\n    statement.  */\n@@ -3428,3 +3486,205 @@ infer_nonnull_range (gimple stmt, tree op)\n \n   return false;\n }\n+\n+/* Compare two case labels.  Because the front end should already have\n+   made sure that case ranges do not overlap, it is enough to only compare\n+   the CASE_LOW values of each case label.  */\n+\n+static int\n+compare_case_labels (const void *p1, const void *p2)\n+{\n+  const_tree const case1 = *(const_tree const*)p1;\n+  const_tree const case2 = *(const_tree const*)p2;\n+\n+  /* The 'default' case label always goes first.  */\n+  if (!CASE_LOW (case1))\n+    return -1;\n+  else if (!CASE_LOW (case2))\n+    return 1;\n+  else\n+    return tree_int_cst_compare (CASE_LOW (case1), CASE_LOW (case2));\n+}\n+\n+/* Sort the case labels in LABEL_VEC in place in ascending order.  */\n+\n+void\n+sort_case_labels (vec<tree> label_vec)\n+{\n+  label_vec.qsort (compare_case_labels);\n+}\n+\f\n+/* Prepare a vector of case labels to be used in a GIMPLE_SWITCH statement.\n+\n+   LABELS is a vector that contains all case labels to look at.\n+\n+   INDEX_TYPE is the type of the switch index expression.  Case labels\n+   in LABELS are discarded if their values are not in the value range\n+   covered by INDEX_TYPE.  The remaining case label values are folded\n+   to INDEX_TYPE.\n+\n+   If a default case exists in LABELS, it is removed from LABELS and\n+   returned in DEFAULT_CASEP.  If no default case exists, but the\n+   case labels already cover the whole range of INDEX_TYPE, a default\n+   case is returned pointing to one of the existing case labels.\n+   Otherwise DEFAULT_CASEP is set to NULL_TREE.\n+\n+   DEFAULT_CASEP may be NULL, in which case the above comment doesn't\n+   apply and no action is taken regardless of whether a default case is\n+   found or not.  */\n+\n+void\n+preprocess_case_label_vec_for_gimple (vec<tree> labels,\n+\t\t\t\t      tree index_type,\n+\t\t\t\t      tree *default_casep)\n+{\n+  tree min_value, max_value;\n+  tree default_case = NULL_TREE;\n+  size_t i, len;\n+\n+  i = 0;\n+  min_value = TYPE_MIN_VALUE (index_type);\n+  max_value = TYPE_MAX_VALUE (index_type);\n+  while (i < labels.length ())\n+    {\n+      tree elt = labels[i];\n+      tree low = CASE_LOW (elt);\n+      tree high = CASE_HIGH (elt);\n+      bool remove_element = FALSE;\n+\n+      if (low)\n+\t{\n+\t  gcc_checking_assert (TREE_CODE (low) == INTEGER_CST);\n+\t  gcc_checking_assert (!high || TREE_CODE (high) == INTEGER_CST);\n+\n+\t  /* This is a non-default case label, i.e. it has a value.\n+\n+\t     See if the case label is reachable within the range of\n+\t     the index type.  Remove out-of-range case values.  Turn\n+\t     case ranges into a canonical form (high > low strictly)\n+\t     and convert the case label values to the index type.\n+\n+\t     NB: The type of gimple_switch_index() may be the promoted\n+\t     type, but the case labels retain the original type.  */\n+\n+\t  if (high)\n+\t    {\n+\t      /* This is a case range.  Discard empty ranges.\n+\t\t If the bounds or the range are equal, turn this\n+\t\t into a simple (one-value) case.  */\n+\t      int cmp = tree_int_cst_compare (high, low);\n+\t      if (cmp < 0)\n+\t\tremove_element = TRUE;\n+\t      else if (cmp == 0)\n+\t\thigh = NULL_TREE;\n+\t    }\n+\n+\t  if (! high)\n+\t    {\n+\t      /* If the simple case value is unreachable, ignore it.  */\n+\t      if ((TREE_CODE (min_value) == INTEGER_CST\n+\t\t   && tree_int_cst_compare (low, min_value) < 0)\n+\t\t  || (TREE_CODE (max_value) == INTEGER_CST\n+\t\t      && tree_int_cst_compare (low, max_value) > 0))\n+\t\tremove_element = TRUE;\n+\t      else\n+\t\tlow = fold_convert (index_type, low);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* If the entire case range is unreachable, ignore it.  */\n+\t      if ((TREE_CODE (min_value) == INTEGER_CST\n+\t\t   && tree_int_cst_compare (high, min_value) < 0)\n+\t\t  || (TREE_CODE (max_value) == INTEGER_CST\n+\t\t      && tree_int_cst_compare (low, max_value) > 0))\n+\t\tremove_element = TRUE;\n+\t      else\n+\t\t{\n+\t\t  /* If the lower bound is less than the index type's\n+\t\t     minimum value, truncate the range bounds.  */\n+\t\t  if (TREE_CODE (min_value) == INTEGER_CST\n+\t\t      && tree_int_cst_compare (low, min_value) < 0)\n+\t\t    low = min_value;\n+\t\t  low = fold_convert (index_type, low);\n+\n+\t\t  /* If the upper bound is greater than the index type's\n+\t\t     maximum value, truncate the range bounds.  */\n+\t\t  if (TREE_CODE (max_value) == INTEGER_CST\n+\t\t      && tree_int_cst_compare (high, max_value) > 0)\n+\t\t    high = max_value;\n+\t\t  high = fold_convert (index_type, high);\n+\n+\t\t  /* We may have folded a case range to a one-value case.  */\n+\t\t  if (tree_int_cst_equal (low, high))\n+\t\t    high = NULL_TREE;\n+\t\t}\n+\t    }\n+\n+\t  CASE_LOW (elt) = low;\n+\t  CASE_HIGH (elt) = high;\n+\t}\n+      else\n+\t{\n+\t  gcc_assert (!default_case);\n+\t  default_case = elt;\n+\t  /* The default case must be passed separately to the\n+\t     gimple_build_switch routine.  But if DEFAULT_CASEP\n+\t     is NULL, we do not remove the default case (it would\n+\t     be completely lost).  */\n+\t  if (default_casep)\n+\t    remove_element = TRUE;\n+\t}\n+\n+      if (remove_element)\n+\tlabels.ordered_remove (i);\n+      else\n+\ti++;\n+    }\n+  len = i;\n+\n+  if (!labels.is_empty ())\n+    sort_case_labels (labels);\n+\n+  if (default_casep && !default_case)\n+    {\n+      /* If the switch has no default label, add one, so that we jump\n+\t around the switch body.  If the labels already cover the whole\n+\t range of the switch index_type, add the default label pointing\n+\t to one of the existing labels.  */\n+      if (len\n+\t  && TYPE_MIN_VALUE (index_type)\n+\t  && TYPE_MAX_VALUE (index_type)\n+\t  && tree_int_cst_equal (CASE_LOW (labels[0]),\n+\t\t\t\t TYPE_MIN_VALUE (index_type)))\n+\t{\n+\t  tree low, high = CASE_HIGH (labels[len - 1]);\n+\t  if (!high)\n+\t    high = CASE_LOW (labels[len - 1]);\n+\t  if (tree_int_cst_equal (high, TYPE_MAX_VALUE (index_type)))\n+\t    {\n+\t      for (i = 1; i < len; i++)\n+\t\t{\n+\t\t  high = CASE_LOW (labels[i]);\n+\t\t  low = CASE_HIGH (labels[i - 1]);\n+\t\t  if (!low)\n+\t\t    low = CASE_LOW (labels[i - 1]);\n+\t\t  if ((TREE_INT_CST_LOW (low) + 1\n+\t\t       != TREE_INT_CST_LOW (high))\n+\t\t      || (TREE_INT_CST_HIGH (low)\n+\t\t\t  + (TREE_INT_CST_LOW (high) == 0)\n+\t\t\t  != TREE_INT_CST_HIGH (high)))\n+\t\t    break;\n+\t\t}\n+\t      if (i == len)\n+\t\t{\n+\t\t  tree label = CASE_LABEL (labels[0]);\n+\t\t  default_case = build_case_label (NULL_TREE, NULL_TREE,\n+\t\t\t\t\t\t   label);\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  if (default_casep)\n+    *default_casep = default_case;\n+}"}, {"sha": "4f34a9eea92264cc32c733b62c13d7e9aedbbbd7", "filename": "gcc/gimple.h", "status": "modified", "additions": 29, "deletions": 87, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -766,7 +766,6 @@ gimple gimple_build_call_valist (tree, unsigned, va_list);\n gimple gimple_build_call_internal (enum internal_fn, unsigned, ...);\n gimple gimple_build_call_internal_vec (enum internal_fn, vec<tree> );\n gimple gimple_build_call_from_tree (tree);\n-gimple gimplify_assign (tree, tree, gimple_seq *);\n gimple gimple_build_cond (enum tree_code, tree, tree, tree, tree);\n gimple gimple_build_label (tree label);\n gimple gimple_build_goto (tree dest);\n@@ -806,8 +805,6 @@ gimple gimple_build_omp_atomic_store (tree);\n gimple gimple_build_transaction (gimple_seq, tree);\n gimple gimple_build_predict (enum br_predictor, enum prediction);\n enum gimple_statement_structure_enum gss_for_assign (enum tree_code);\n-void sort_case_labels (vec<tree> );\n-void preprocess_case_label_vec_for_gimple (vec<tree> , tree, tree *);\n gimple_seq gimple_seq_alloc (void);\n void gimple_seq_free (gimple_seq);\n void gimple_seq_add_seq (gimple_seq *, gimple_seq);\n@@ -834,8 +831,10 @@ bool gimple_has_side_effects (const_gimple);\n bool gimple_could_trap_p (gimple);\n bool gimple_could_trap_p_1 (gimple, bool, bool);\n bool gimple_assign_rhs_could_trap_p (gimple);\n-void gimple_regimplify_operands (gimple, gimple_stmt_iterator *);\n bool empty_body_p (gimple_seq);\n+extern void annotate_all_with_location_after (gimple_seq, gimple_stmt_iterator,\n+\t\t\t\t\t      location_t);\n+extern void annotate_all_with_location (gimple_seq, location_t);\n unsigned get_gimple_rhs_num_ops (enum tree_code);\n #define gimple_alloc(c, n) gimple_alloc_stat (c, n MEM_STAT_INFO)\n gimple gimple_alloc_stat (enum gimple_code, unsigned MEM_STAT_DECL);\n@@ -859,48 +858,8 @@ extern bool gimple_ior_addresses_taken (bitmap, gimple);\n extern bool gimple_call_builtin_p (gimple, enum built_in_class);\n extern bool gimple_call_builtin_p (gimple, enum built_in_function);\n extern bool gimple_asm_clobbers_memory_p (const_gimple);\n-\n-/* In gimplify.c  */\n-extern tree create_tmp_var_raw (tree, const char *);\n-extern tree create_tmp_var_name (const char *);\n-extern tree create_tmp_var (tree, const char *);\n-extern tree create_tmp_reg (tree, const char *);\n-extern tree get_initialized_tmp_var (tree, gimple_seq *, gimple_seq *);\n-extern tree get_formal_tmp_var (tree, gimple_seq *);\n-extern void declare_vars (tree, gimple, bool);\n-extern void annotate_all_with_location (gimple_seq, location_t);\n extern unsigned gimple_call_get_nobnd_arg_index (const_gimple, unsigned);\n \n-/* Validation of GIMPLE expressions.  Note that these predicates only check\n-   the basic form of the expression, they don't recurse to make sure that\n-   underlying nodes are also of the right form.  */\n-typedef bool (*gimple_predicate)(tree);\n-\n-\n-/* FIXME we should deduce this from the predicate.  */\n-enum fallback {\n-  fb_none = 0,\t\t/* Do not generate a temporary.  */\n-\n-  fb_rvalue = 1,\t/* Generate an rvalue to hold the result of a\n-\t\t\t   gimplified expression.  */\n-\n-  fb_lvalue = 2,\t/* Generate an lvalue to hold the result of a\n-\t\t\t   gimplified expression.  */\n-\n-  fb_mayfail = 4,\t/* Gimplification may fail.  Error issued\n-\t\t\t   afterwards.  */\n-  fb_either= fb_rvalue | fb_lvalue\n-};\n-\n-typedef int fallback_t;\n-\n-enum gimplify_status {\n-  GS_ERROR\t= -2,\t/* Something Bad Seen.  */\n-  GS_UNHANDLED\t= -1,\t/* A langhook result for \"I dunno\".  */\n-  GS_OK\t\t= 0,\t/* We did something, maybe more to do.  */\n-  GS_ALL_DONE\t= 1\t/* The expression is fully gimplified.  */\n-};\n-\n /* Formal (expression) temporary table handling: multiple occurrences of\n    the same scalar expression are evaluated into the same temporary.  */\n \n@@ -1010,31 +969,8 @@ inc_gimple_stmt_max_uid (struct function *fn)\n   return fn->last_stmt_uid++;\n }\n \n-extern enum gimplify_status gimplify_expr (tree *, gimple_seq *, gimple_seq *,\n-\t\t\t\t\t   bool (*) (tree), fallback_t);\n-extern void gimplify_type_sizes (tree, gimple_seq *);\n-extern void gimplify_one_sizepos (tree *, gimple_seq *);\n-enum gimplify_status gimplify_self_mod_expr (tree *, gimple_seq *, gimple_seq *,\n-\t\t\t\t\t     bool, tree);\n-extern bool gimplify_stmt (tree *, gimple_seq *);\n-extern gimple gimplify_body (tree, bool);\n-extern void push_gimplify_context (struct gimplify_ctx *);\n-extern void pop_gimplify_context (gimple);\n-extern void gimplify_and_add (tree, gimple_seq *);\n-\n /* Miscellaneous helpers.  */\n-extern void gimple_add_tmp_var (tree);\n-extern gimple gimple_current_bind_expr (void);\n-extern vec<gimple> gimple_bind_expr_stack (void);\n-extern tree voidify_wrapper_expr (tree, tree);\n-extern tree build_and_jump (tree *);\n-extern tree force_labels_r (tree *, int *, void *);\n-extern enum gimplify_status gimplify_va_arg_expr (tree *, gimple_seq *,\n-\t\t\t\t\t\t  gimple_seq *);\n struct gimplify_omp_ctx;\n-extern void omp_firstprivatize_variable (struct gimplify_omp_ctx *, tree);\n-extern tree gimple_boolify (tree);\n-extern gimple_predicate rhs_predicate_for (tree);\n extern tree canonicalize_cond_expr_cond (tree);\n extern void dump_decl_set (FILE *, bitmap);\n extern bool nonfreeing_call_p (gimple);\n@@ -1048,9 +984,6 @@ extern void compute_transaction_bits (void);\n extern void lower_nested_functions (tree);\n extern void insert_field_into_struct (tree, tree);\n \n-/* In gimplify.c.  */\n-extern void gimplify_function_tree (tree);\n-\n /* In cfgexpand.c.  */\n extern tree gimple_assign_rhs_to_tree (gimple);\n \n@@ -1121,14 +1054,8 @@ gimple_seq_empty_p (gimple_seq s)\n   return s == NULL;\n }\n \n-void gimple_seq_add_stmt (gimple_seq *, gimple);\n-\n-/* Link gimple statement GS to the end of the sequence *SEQ_P.  If\n-   *SEQ_P is NULL, a new sequence is allocated.  This function is\n-   similar to gimple_seq_add_stmt, but does not scan the operands.\n-   During gimplification, we need to manipulate statement sequences\n-   before the def/use vectors have been constructed.  */\n-void gimple_seq_add_stmt_without_update (gimple_seq *, gimple);\n+extern void gimple_seq_add_stmt (gimple_seq *, gimple);\n+extern void gimple_seq_add_stmt_without_update (gimple_seq *, gimple);\n \n /* Allocate a new sequence and initialize its first element with STMT.  */\n \n@@ -5563,15 +5490,6 @@ void gsi_commit_one_edge_insert (edge, basic_block *);\n void gsi_commit_edge_inserts (void);\n gimple gimple_call_copy_skip_args (gimple, bitmap);\n \n-/* In gimplify.c.  */\n-tree force_gimple_operand_1 (tree, gimple_seq *, gimple_predicate, tree);\n-tree force_gimple_operand (tree, gimple_seq *, bool, tree);\n-tree force_gimple_operand_gsi_1 (gimple_stmt_iterator *, tree,\n-\t\t\t\t gimple_predicate, tree,\n-\t\t\t\t bool, enum gsi_iterator_update);\n-tree force_gimple_operand_gsi (gimple_stmt_iterator *, tree, bool, tree,\n-\t\t\t       bool, enum gsi_iterator_update);\n-\n /* Convenience routines to walk all statements of a gimple function.\n    Note that this is useful exclusively before the code is converted\n    into SSA form.  Once the program is in SSA form, the standard\n@@ -5684,6 +5602,27 @@ gimple_seq_set_location (gimple_seq seq, location_t loc)\n     gimple_set_location (gsi_stmt (i), loc);\n }\n \n+/* Return true if a location should not be emitted for this statement\n+   by annotate_all_with_location.  */\n+\n+static inline bool\n+gimple_do_not_emit_location_p (gimple g)\n+{\n+  return gimple_plf (g, GF_PLF_1);\n+}\n+\n+/* Mark statement G so a location will not be emitted by\n+   annotate_one_with_location.  */\n+\n+static inline void\n+gimple_set_do_not_emit_location (gimple g)\n+{\n+  /* The PLF flags are initialized to 0 when a new tuple is created,\n+     so no need to initialize it anywhere.  */\n+  gimple_set_plf (g, GF_PLF_1, true);\n+}\n+\n+\n /* Macros for showing usage statistics.  */\n #define SCALE(x) ((unsigned long) ((x) < 1024*10\t\\\n \t\t  ? (x)\t\t\t\t\t\\\n@@ -5695,4 +5634,7 @@ gimple_seq_set_location (gimple_seq seq, location_t loc)\n \n #define PERCENT(x,y) ((float)(x) * 100.0 / (float)(y))\n \n+extern void sort_case_labels (vec<tree> );\n+extern void preprocess_case_label_vec_for_gimple (vec<tree> , tree, tree *);\n+\n #endif  /* GCC_GIMPLE_H */"}, {"sha": "356fc2b91a8587e983d59f67788d0d6edb2c5bf3", "filename": "gcc/gimplify.c", "status": "modified", "additions": 33, "deletions": 463, "changes": 496, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-iterator.h\"\n #include \"tree-inline.h\"\n #include \"tree-pretty-print.h\"\n@@ -108,55 +108,6 @@ static struct gimplify_omp_ctx *gimplify_omp_ctxp;\n /* Forward declaration.  */\n static enum gimplify_status gimplify_compound_expr (tree *, gimple_seq *, bool);\n \n-/* Mark X addressable.  Unlike the langhook we expect X to be in gimple\n-   form and we don't do any syntax checking.  */\n-\n-void\n-mark_addressable (tree x)\n-{\n-  while (handled_component_p (x))\n-    x = TREE_OPERAND (x, 0);\n-  if (TREE_CODE (x) == MEM_REF\n-      && TREE_CODE (TREE_OPERAND (x, 0)) == ADDR_EXPR)\n-    x = TREE_OPERAND (TREE_OPERAND (x, 0), 0);\n-  if (TREE_CODE (x) != VAR_DECL\n-      && TREE_CODE (x) != PARM_DECL\n-      && TREE_CODE (x) != RESULT_DECL)\n-    return;\n-  TREE_ADDRESSABLE (x) = 1;\n-\n-  /* Also mark the artificial SSA_NAME that points to the partition of X.  */\n-  if (TREE_CODE (x) == VAR_DECL\n-      && !DECL_EXTERNAL (x)\n-      && !TREE_STATIC (x)\n-      && cfun->gimple_df != NULL\n-      && cfun->gimple_df->decls_to_pointers != NULL)\n-    {\n-      void *namep\n-\t= pointer_map_contains (cfun->gimple_df->decls_to_pointers, x); \n-      if (namep)\n-\tTREE_ADDRESSABLE (*(tree *)namep) = 1;\n-    }\n-}\n-\n-/* Link gimple statement GS to the end of the sequence *SEQ_P.  If\n-   *SEQ_P is NULL, a new sequence is allocated.  This function is\n-   similar to gimple_seq_add_stmt, but does not scan the operands.\n-   During gimplification, we need to manipulate statement sequences\n-   before the def/use vectors have been constructed.  */\n-\n-void\n-gimple_seq_add_stmt_without_update (gimple_seq *seq_p, gimple gs)\n-{\n-  gimple_stmt_iterator si;\n-\n-  if (gs == NULL)\n-    return;\n-\n-  si = gsi_last (*seq_p);\n-  gsi_insert_after_without_update (&si, gs, GSI_NEW_STMT);\n-}\n-\n /* Shorter alias name for the above function for use in gimplify.c\n    only.  */\n \n@@ -365,125 +316,6 @@ gimplify_and_return_first (tree t, gimple_seq *seq_p)\n     return gimple_seq_first_stmt (*seq_p);\n }\n \n-/* Strip off a legitimate source ending from the input string NAME of\n-   length LEN.  Rather than having to know the names used by all of\n-   our front ends, we strip off an ending of a period followed by\n-   up to five characters.  (Java uses \".class\".)  */\n-\n-static inline void\n-remove_suffix (char *name, int len)\n-{\n-  int i;\n-\n-  for (i = 2;  i < 8 && len > i;  i++)\n-    {\n-      if (name[len - i] == '.')\n-\t{\n-\t  name[len - i] = '\\0';\n-\t  break;\n-\t}\n-    }\n-}\n-\n-/* Create a new temporary name with PREFIX.  Return an identifier.  */\n-\n-static GTY(()) unsigned int tmp_var_id_num;\n-\n-tree\n-create_tmp_var_name (const char *prefix)\n-{\n-  char *tmp_name;\n-\n-  if (prefix)\n-    {\n-      char *preftmp = ASTRDUP (prefix);\n-\n-      remove_suffix (preftmp, strlen (preftmp));\n-      clean_symbol_name (preftmp);\n-\n-      prefix = preftmp;\n-    }\n-\n-  ASM_FORMAT_PRIVATE_NAME (tmp_name, prefix ? prefix : \"T\", tmp_var_id_num++);\n-  return get_identifier (tmp_name);\n-}\n-\n-/* Create a new temporary variable declaration of type TYPE.\n-   Do NOT push it into the current binding.  */\n-\n-tree\n-create_tmp_var_raw (tree type, const char *prefix)\n-{\n-  tree tmp_var;\n-\n-  tmp_var = build_decl (input_location,\n-\t\t\tVAR_DECL, prefix ? create_tmp_var_name (prefix) : NULL,\n-\t\t\ttype);\n-\n-  /* The variable was declared by the compiler.  */\n-  DECL_ARTIFICIAL (tmp_var) = 1;\n-  /* And we don't want debug info for it.  */\n-  DECL_IGNORED_P (tmp_var) = 1;\n-\n-  /* Make the variable writable.  */\n-  TREE_READONLY (tmp_var) = 0;\n-\n-  DECL_EXTERNAL (tmp_var) = 0;\n-  TREE_STATIC (tmp_var) = 0;\n-  TREE_USED (tmp_var) = 1;\n-\n-  return tmp_var;\n-}\n-\n-/* Create a new temporary variable declaration of type TYPE.  DO push the\n-   variable into the current binding.  Further, assume that this is called\n-   only from gimplification or optimization, at which point the creation of\n-   certain types are bugs.  */\n-\n-tree\n-create_tmp_var (tree type, const char *prefix)\n-{\n-  tree tmp_var;\n-\n-  /* We don't allow types that are addressable (meaning we can't make copies),\n-     or incomplete.  We also used to reject every variable size objects here,\n-     but now support those for which a constant upper bound can be obtained.\n-     The processing for variable sizes is performed in gimple_add_tmp_var,\n-     point at which it really matters and possibly reached via paths not going\n-     through this function, e.g. after direct calls to create_tmp_var_raw.  */\n-  gcc_assert (!TREE_ADDRESSABLE (type) && COMPLETE_TYPE_P (type));\n-\n-  tmp_var = create_tmp_var_raw (type, prefix);\n-  gimple_add_tmp_var (tmp_var);\n-  return tmp_var;\n-}\n-\n-/* Create a new temporary variable declaration of type TYPE by calling\n-   create_tmp_var and if TYPE is a vector or a complex number, mark the new\n-   temporary as gimple register.  */\n-\n-tree\n-create_tmp_reg (tree type, const char *prefix)\n-{\n-  tree tmp;\n-\n-  tmp = create_tmp_var (type, prefix);\n-  if (TREE_CODE (type) == COMPLEX_TYPE\n-      || TREE_CODE (type) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (tmp) = 1;\n-\n-  return tmp;\n-}\n-\n-/* Returns true iff T is a valid RHS for an assignment to a renamed\n-   user -- or front-end generated artificial -- variable.  */\n-\n-static bool\n-is_gimple_reg_rhs (tree t)\n-{\n-  return get_gimple_rhs_class (TREE_CODE (t)) != GIMPLE_INVALID_RHS;\n-}\n-\n /* Returns true iff T is a valid RHS for an assignment to an un-renamed\n    LHS, or for a call argument.  */\n \n@@ -750,84 +582,7 @@ gimple_add_tmp_var (tree tmp)\n     }\n }\n \n-/* Determine whether to assign a location to the statement GS.  */\n-\n-static bool\n-should_carry_location_p (gimple gs)\n-{\n-  /* Don't emit a line note for a label.  We particularly don't want to\n-     emit one for the break label, since it doesn't actually correspond\n-     to the beginning of the loop/switch.  */\n-  if (gimple_code (gs) == GIMPLE_LABEL)\n-    return false;\n-\n-  return true;\n-}\n-\n-/* Return true if a location should not be emitted for this statement\n-   by annotate_one_with_location.  */\n-\n-static inline bool\n-gimple_do_not_emit_location_p (gimple g)\n-{\n-  return gimple_plf (g, GF_PLF_1);\n-}\n-\n-/* Mark statement G so a location will not be emitted by\n-   annotate_one_with_location.  */\n-\n-static inline void\n-gimple_set_do_not_emit_location (gimple g)\n-{\n-  /* The PLF flags are initialized to 0 when a new tuple is created,\n-     so no need to initialize it anywhere.  */\n-  gimple_set_plf (g, GF_PLF_1, true);\n-}\n-\n-/* Set the location for gimple statement GS to LOCATION.  */\n-\n-static void\n-annotate_one_with_location (gimple gs, location_t location)\n-{\n-  if (!gimple_has_location (gs)\n-      && !gimple_do_not_emit_location_p (gs)\n-      && should_carry_location_p (gs))\n-    gimple_set_location (gs, location);\n-}\n-\n-/* Set LOCATION for all the statements after iterator GSI in sequence\n-   SEQ.  If GSI is pointing to the end of the sequence, start with the\n-   first statement in SEQ.  */\n \n-static void\n-annotate_all_with_location_after (gimple_seq seq, gimple_stmt_iterator gsi,\n-\t\t\t\t  location_t location)\n-{\n-  if (gsi_end_p (gsi))\n-    gsi = gsi_start (seq);\n-  else\n-    gsi_next (&gsi);\n-\n-  for (; !gsi_end_p (gsi); gsi_next (&gsi))\n-    annotate_one_with_location (gsi_stmt (gsi), location);\n-}\n-\n-/* Set the location for all the statements in a sequence STMT_P to LOCATION.  */\n-\n-void\n-annotate_all_with_location (gimple_seq stmt_p, location_t location)\n-{\n-  gimple_stmt_iterator i;\n-\n-  if (gimple_seq_empty_p (stmt_p))\n-    return;\n-\n-  for (i = gsi_start (stmt_p); !gsi_end_p (i); gsi_next (&i))\n-    {\n-      gimple gs = gsi_stmt (i);\n-      annotate_one_with_location (gs, location);\n-    }\n-}\n \f\n /* This page contains routines to unshare tree nodes, i.e. to duplicate tree\n    nodes that are referenced more than once in GENERIC functions.  This is\n@@ -1441,6 +1196,20 @@ gimplify_vla_decl (tree decl, gimple_seq *seq_p)\n   gimplify_ctxp->save_stack = true;\n }\n \n+/* A helper function to be called via walk_tree.  Mark all labels under *TP\n+   as being forced.  To be called for DECL_INITIAL of static variables.  */\n+\n+static tree\n+force_labels_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n+{\n+  if (TYPE_P (*tp))\n+    *walk_subtrees = 0;\n+  if (TREE_CODE (*tp) == LABEL_DECL)\n+    FORCED_LABEL (*tp) = 1;\n+\n+  return NULL_TREE;\n+}\n+\n /* Gimplify a DECL_EXPR node *STMT_P by making any necessary allocation\n    and initialization explicit.  */\n \n@@ -1557,208 +1326,7 @@ gimplify_statement_list (tree *expr_p, gimple_seq *pre_p)\n \n   return GS_ALL_DONE;\n }\n-\f\n-/* Compare two case labels.  Because the front end should already have\n-   made sure that case ranges do not overlap, it is enough to only compare\n-   the CASE_LOW values of each case label.  */\n-\n-static int\n-compare_case_labels (const void *p1, const void *p2)\n-{\n-  const_tree const case1 = *(const_tree const*)p1;\n-  const_tree const case2 = *(const_tree const*)p2;\n-\n-  /* The 'default' case label always goes first.  */\n-  if (!CASE_LOW (case1))\n-    return -1;\n-  else if (!CASE_LOW (case2))\n-    return 1;\n-  else\n-    return tree_int_cst_compare (CASE_LOW (case1), CASE_LOW (case2));\n-}\n-\n-/* Sort the case labels in LABEL_VEC in place in ascending order.  */\n \n-void\n-sort_case_labels (vec<tree> label_vec)\n-{\n-  label_vec.qsort (compare_case_labels);\n-}\n-\f\n-/* Prepare a vector of case labels to be used in a GIMPLE_SWITCH statement.\n-\n-   LABELS is a vector that contains all case labels to look at.\n-\n-   INDEX_TYPE is the type of the switch index expression.  Case labels\n-   in LABELS are discarded if their values are not in the value range\n-   covered by INDEX_TYPE.  The remaining case label values are folded\n-   to INDEX_TYPE.\n-\n-   If a default case exists in LABELS, it is removed from LABELS and\n-   returned in DEFAULT_CASEP.  If no default case exists, but the\n-   case labels already cover the whole range of INDEX_TYPE, a default\n-   case is returned pointing to one of the existing case labels.\n-   Otherwise DEFAULT_CASEP is set to NULL_TREE.\n-\n-   DEFAULT_CASEP may be NULL, in which case the above comment doesn't\n-   apply and no action is taken regardless of whether a default case is\n-   found or not.  */\n-\n-void\n-preprocess_case_label_vec_for_gimple (vec<tree> labels,\n-\t\t\t\t      tree index_type,\n-\t\t\t\t      tree *default_casep)\n-{\n-  tree min_value, max_value;\n-  tree default_case = NULL_TREE;\n-  size_t i, len;\n-\n-  i = 0;\n-  min_value = TYPE_MIN_VALUE (index_type);\n-  max_value = TYPE_MAX_VALUE (index_type);\n-  while (i < labels.length ())\n-    {\n-      tree elt = labels[i];\n-      tree low = CASE_LOW (elt);\n-      tree high = CASE_HIGH (elt);\n-      bool remove_element = FALSE;\n-\n-      if (low)\n-\t{\n-\t  gcc_checking_assert (TREE_CODE (low) == INTEGER_CST);\n-\t  gcc_checking_assert (!high || TREE_CODE (high) == INTEGER_CST);\n-\n-\t  /* This is a non-default case label, i.e. it has a value.\n-\n-\t     See if the case label is reachable within the range of\n-\t     the index type.  Remove out-of-range case values.  Turn\n-\t     case ranges into a canonical form (high > low strictly)\n-\t     and convert the case label values to the index type.\n-\n-\t     NB: The type of gimple_switch_index() may be the promoted\n-\t     type, but the case labels retain the original type.  */\n-\n-\t  if (high)\n-\t    {\n-\t      /* This is a case range.  Discard empty ranges.\n-\t\t If the bounds or the range are equal, turn this\n-\t\t into a simple (one-value) case.  */\n-\t      int cmp = tree_int_cst_compare (high, low);\n-\t      if (cmp < 0)\n-\t\tremove_element = TRUE;\n-\t      else if (cmp == 0)\n-\t\thigh = NULL_TREE;\n-\t    }\n-\n-\t  if (! high)\n-\t    {\n-\t      /* If the simple case value is unreachable, ignore it.  */\n-\t      if ((TREE_CODE (min_value) == INTEGER_CST\n-\t\t   && tree_int_cst_compare (low, min_value) < 0)\n-\t\t  || (TREE_CODE (max_value) == INTEGER_CST\n-\t\t      && tree_int_cst_compare (low, max_value) > 0))\n-\t\tremove_element = TRUE;\n-\t      else\n-\t\tlow = fold_convert (index_type, low);\n-\t    }\n-\t  else\n-\t    {\n-\t      /* If the entire case range is unreachable, ignore it.  */\n-\t      if ((TREE_CODE (min_value) == INTEGER_CST\n-\t\t   && tree_int_cst_compare (high, min_value) < 0)\n-\t\t  || (TREE_CODE (max_value) == INTEGER_CST\n-\t\t      && tree_int_cst_compare (low, max_value) > 0))\n-\t\tremove_element = TRUE;\n-\t      else\n-\t\t{\n-\t\t  /* If the lower bound is less than the index type's\n-\t\t     minimum value, truncate the range bounds.  */\n-\t\t  if (TREE_CODE (min_value) == INTEGER_CST\n-\t\t      && tree_int_cst_compare (low, min_value) < 0)\n-\t\t    low = min_value;\n-\t\t  low = fold_convert (index_type, low);\n-\n-\t\t  /* If the upper bound is greater than the index type's\n-\t\t     maximum value, truncate the range bounds.  */\n-\t\t  if (TREE_CODE (max_value) == INTEGER_CST\n-\t\t      && tree_int_cst_compare (high, max_value) > 0)\n-\t\t    high = max_value;\n-\t\t  high = fold_convert (index_type, high);\n-\n-\t\t  /* We may have folded a case range to a one-value case.  */\n-\t\t  if (tree_int_cst_equal (low, high))\n-\t\t    high = NULL_TREE;\n-\t\t}\n-\t    }\n-\n-\t  CASE_LOW (elt) = low;\n-\t  CASE_HIGH (elt) = high;\n-\t}\n-      else\n-\t{\n-\t  gcc_assert (!default_case);\n-\t  default_case = elt;\n-\t  /* The default case must be passed separately to the\n-\t     gimple_build_switch routine.  But if DEFAULT_CASEP\n-\t     is NULL, we do not remove the default case (it would\n-\t     be completely lost).  */\n-\t  if (default_casep)\n-\t    remove_element = TRUE;\n-\t}\n-\n-      if (remove_element)\n-\tlabels.ordered_remove (i);\n-      else\n-\ti++;\n-    }\n-  len = i;\n-\n-  if (!labels.is_empty ())\n-    sort_case_labels (labels);\n-\n-  if (default_casep && !default_case)\n-    {\n-      /* If the switch has no default label, add one, so that we jump\n-\t around the switch body.  If the labels already cover the whole\n-\t range of the switch index_type, add the default label pointing\n-\t to one of the existing labels.  */\n-      if (len\n-\t  && TYPE_MIN_VALUE (index_type)\n-\t  && TYPE_MAX_VALUE (index_type)\n-\t  && tree_int_cst_equal (CASE_LOW (labels[0]),\n-\t\t\t\t TYPE_MIN_VALUE (index_type)))\n-\t{\n-\t  tree low, high = CASE_HIGH (labels[len - 1]);\n-\t  if (!high)\n-\t    high = CASE_LOW (labels[len - 1]);\n-\t  if (tree_int_cst_equal (high, TYPE_MAX_VALUE (index_type)))\n-\t    {\n-\t      for (i = 1; i < len; i++)\n-\t\t{\n-\t\t  high = CASE_LOW (labels[i]);\n-\t\t  low = CASE_HIGH (labels[i - 1]);\n-\t\t  if (!low)\n-\t\t    low = CASE_LOW (labels[i - 1]);\n-\t\t  if ((TREE_INT_CST_LOW (low) + 1\n-\t\t       != TREE_INT_CST_LOW (high))\n-\t\t      || (TREE_INT_CST_HIGH (low)\n-\t\t\t  + (TREE_INT_CST_LOW (high) == 0)\n-\t\t\t  != TREE_INT_CST_HIGH (high)))\n-\t\t    break;\n-\t\t}\n-\t      if (i == len)\n-\t\t{\n-\t\t  tree label = CASE_LABEL (labels[0]);\n-\t\t  default_case = build_case_label (NULL_TREE, NULL_TREE,\n-\t\t\t\t\t\t   label);\n-\t\t}\n-\t    }\n-\t}\n-    }\n-\n-  if (default_casep)\n-    *default_casep = default_case;\n-}\n \f\n /* Gimplify a SWITCH_EXPR, and collect the vector of labels it can\n    branch to.  */\n@@ -1882,20 +1450,6 @@ gimplify_exit_expr (tree *expr_p)\n   return GS_OK;\n }\n \n-/* A helper function to be called via walk_tree.  Mark all labels under *TP\n-   as being forced.  To be called for DECL_INITIAL of static variables.  */\n-\n-tree\n-force_labels_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n-{\n-  if (TYPE_P (*tp))\n-    *walk_subtrees = 0;\n-  if (TREE_CODE (*tp) == LABEL_DECL)\n-    FORCED_LABEL (*tp) = 1;\n-\n-  return NULL_TREE;\n-}\n-\n /* *EXPR_P is a COMPONENT_REF being used as an rvalue.  If its type is\n    different from its canonical type, wrap the whole thing inside a\n    NOP_EXPR and force the type of the COMPONENT_REF to be the canonical\n@@ -3838,7 +3392,7 @@ gimplify_init_ctor_eval (tree object, vec<constructor_elt, va_gc> *elts,\n \n /* Return the appropriate RHS predicate for this LHS.  */\n \n-gimple_predicate\n+static gimple_predicate\n rhs_predicate_for (tree lhs)\n {\n   if (is_gimple_reg (lhs))\n@@ -9419,4 +8973,20 @@ gimplify_va_arg_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n     }\n }\n \n-#include \"gt-gimplify.h\"\n+/* Build a new GIMPLE_ASSIGN tuple and append it to the end of *SEQ_P.\n+\n+   DST/SRC are the destination and source respectively.  You can pass\n+   ungimplified trees in DST or SRC, in which case they will be\n+   converted to a gimple operand if necessary.\n+\n+   This function returns the newly created GIMPLE_ASSIGN tuple.  */\n+\n+gimple\n+gimplify_assign (tree dst, tree src, gimple_seq *seq_p)\n+{\n+  tree t = build2 (MODIFY_EXPR, TREE_TYPE (dst), dst, src);\n+  gimplify_and_add (t, seq_p);\n+  ggc_free (t);\n+  return gimple_seq_last_stmt (*seq_p);\n+}\n+"}, {"sha": "5f81cf2fe774d310e381ca9f81e799c6fcf87ab8", "filename": "gcc/gimplify.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimplify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgimplify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.h?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -0,0 +1,92 @@\n+/* Header file for gimplification.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_GIMPLIFY_H\n+#define GCC_GIMPLIFY_H\n+\n+#include \"gimple.h\"\n+\n+/* Validation of GIMPLE expressions.  Note that these predicates only check\n+   the basic form of the expression, they don't recurse to make sure that\n+   underlying nodes are also of the right form.  */\n+typedef bool (*gimple_predicate)(tree);\n+\n+/* FIXME we should deduce this from the predicate.  */\n+enum fallback {\n+  fb_none = 0,\t\t/* Do not generate a temporary.  */\n+\n+  fb_rvalue = 1,\t/* Generate an rvalue to hold the result of a\n+\t\t\t   gimplified expression.  */\n+\n+  fb_lvalue = 2,\t/* Generate an lvalue to hold the result of a\n+\t\t\t   gimplified expression.  */\n+\n+  fb_mayfail = 4,\t/* Gimplification may fail.  Error issued\n+\t\t\t   afterwards.  */\n+  fb_either= fb_rvalue | fb_lvalue\n+};\n+\n+typedef int fallback_t;\n+\n+enum gimplify_status {\n+  GS_ERROR\t= -2,\t/* Something Bad Seen.  */\n+  GS_UNHANDLED\t= -1,\t/* A langhook result for \"I dunno\".  */\n+  GS_OK\t\t= 0,\t/* We did something, maybe more to do.  */\n+  GS_ALL_DONE\t= 1\t/* The expression is fully gimplified.  */\n+};\n+\n+extern void push_gimplify_context (struct gimplify_ctx *);\n+extern void pop_gimplify_context (gimple);\n+extern gimple gimple_current_bind_expr (void);\n+extern vec<gimple> gimple_bind_expr_stack (void);\n+extern void gimplify_and_add (tree, gimple_seq *);\n+extern tree get_formal_tmp_var (tree, gimple_seq *);\n+extern tree get_initialized_tmp_var (tree, gimple_seq *, gimple_seq *);\n+extern void declare_vars (tree, gimple, bool);\n+extern void gimple_add_tmp_var (tree);\n+extern tree unshare_expr (tree);\n+extern tree unshare_expr_without_location (tree);\n+extern tree voidify_wrapper_expr (tree, tree);\n+extern tree build_and_jump (tree *);\n+extern enum gimplify_status gimplify_self_mod_expr (tree *, gimple_seq *,\n+\t\t\t\t\t\t    gimple_seq *, bool, tree);\n+extern tree gimple_boolify (tree);\n+extern bool gimplify_stmt (tree *, gimple_seq *);\n+extern void omp_firstprivatize_variable (struct gimplify_omp_ctx *, tree);\n+extern enum gimplify_status gimplify_expr (tree *, gimple_seq *, gimple_seq *,\n+\t\t\t\t\t   bool (*) (tree), fallback_t);\n+\n+extern void gimplify_type_sizes (tree, gimple_seq *);\n+extern void gimplify_one_sizepos (tree *, gimple_seq *);\n+extern gimple gimplify_body (tree, bool);\n+extern void gimplify_function_tree (tree);\n+extern void gimple_regimplify_operands (gimple, gimple_stmt_iterator *);\n+extern tree force_gimple_operand_1 (tree, gimple_seq *, gimple_predicate, tree);\n+extern tree force_gimple_operand (tree, gimple_seq *, bool, tree);\n+extern tree force_gimple_operand_gsi_1 (gimple_stmt_iterator *, tree,\n+\t\t\t\t\tgimple_predicate, tree,\n+\t\t\t\t\tbool, enum gsi_iterator_update);\n+extern tree force_gimple_operand_gsi (gimple_stmt_iterator *, tree, bool, tree,\n+\t\t\t\t      bool, enum gsi_iterator_update);\n+\n+extern enum gimplify_status gimplify_va_arg_expr (tree *, gimple_seq *,\n+\t\t\t\t\t\t  gimple_seq *);\n+gimple gimplify_assign (tree, tree, gimple_seq *);\n+\n+#endif /* GCC_GIMPLIFY_H */"}, {"sha": "49775b9778c55ce5448088b6dbece252402ff2e6", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -1,3 +1,7 @@\n+2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* go/go-lang.c: Include gimplify.h.\n+\n 2013-11-06  Ian Lance Taylor  <iant@google.com>\n \n \t* go-lang.c (go_langhook_post_options): If"}, {"sha": "90cabb57181e9099cc622bee98f091508157745e", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"opts.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"ggc.h\"\n #include \"toplev.h\"\n #include \"debug.h\""}, {"sha": "207de4f1fe83788c83b71afa1936af64f691d8a9", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -36,7 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"diagnostic-core.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssa-loop-manip.h\"\n #include \"tree-ssa-loop.h\""}, {"sha": "9ee75b87d07d25c9364f1028865d9af90021daed", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "9b38e4b38626c83a9c6dfc09253908e2689d1c9e", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -21,7 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"langhooks.h\"\n #include \"ggc.h\"\n #include \"target.h\""}, {"sha": "df0a44e7d5f34ecdff7701cc3c87f761280f7510", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -78,7 +78,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"target.h\"\n #include \"ipa-prop.h\"\n #include \"gimple-ssa.h\""}, {"sha": "5e81fccbe0a802de32463a25508ef1e75d14e064", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"cgraph.h\"\n #include \"tree-pass.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"ggc.h\"\n #include \"flags.h\"\n #include \"pointer-set.h\""}, {"sha": "04b362973e6913c4c9b910825816f55fbc50e62a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -1,3 +1,7 @@\n+2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* java/java-gimplify.c: Include gimplify.h.\n+\n 2013-11-07  Jeff Law  <law@redhat.com>\n \n \t* builtins.c (initialize_builtins): Provide __builtin_trap."}, {"sha": "d604cf82e97b3c4ad14a67ea9715c67b7d65e663", "filename": "gcc/java/java-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fjava%2Fjava-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fjava%2Fjava-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-gimplify.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -27,7 +27,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tree.h\"\n #include \"java-tree.h\"\n #include \"dumpfile.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n \n static tree java_gimplify_block (tree);\n static enum gimplify_status java_gimplify_modify_expr (tree *);"}, {"sha": "a5be398751d2aabdda08dc474d8ed541ca6fccc2", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"tree.h\"\n #include \"tree-inline.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"rtl.h\"\n #include \"insn-config.h\"\n #include \"flags.h\""}, {"sha": "8cc96af10fd225dfb8dda5a8adf3f39a5870b0df", "filename": "gcc/loop-init.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -31,7 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"df.h\"\n #include \"ggc.h\"\n-#include \"gimple.h\"\n #include \"tree-ssa-loop-niter.h\"\n \n \f"}, {"sha": "7c44fd7e2843cb31cf164799b6cff8b12a33aede", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -1,3 +1,7 @@\n+2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* objc/objc-act.c: Include gimplify.h.\n+\n 2013-11-07  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* objc-act.c (objc_push_parm): Handle atomic qualifier."}, {"sha": "34c528287053f3a13c40abb95fd2538dc9a9d2cc", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -60,7 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n \n /* For enum gimplify_status */\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n \n /* For encode_method_prototype().  */\n #include \"objc-encoding.h\""}, {"sha": "e383f9a97f90240cfc8c4791df1e413bbf114818", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-iterator.h\"\n #include \"tree-inline.h\"\n #include \"langhooks.h\""}, {"sha": "cddd9510e36164bea6cfc0e4d50455bd76fa59d4", "filename": "gcc/sese.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hash-table.h\"\n #include \"tree.h\"\n #include \"tree-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "a4ee040e26cacb0932a8d188212072a488ee07c4", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -37,7 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"tree-inline.h\"\n #include \"tree-dump.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n \n /* Data type for the expressions representing sizes of data types.\n    It is the first integer type laid out.  */"}, {"sha": "352b3c845d5914c56bfb476deade5325981eb3fd", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -68,7 +68,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"intl.h\"\n #include \"opts.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-ssa-alias.h\"\n #include \"insn-codes.h\""}, {"sha": "e821c99c9754ca2d546985485fa3cdb358f96533", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -22,7 +22,7 @@\n #include \"coretypes.h\"\n #include \"hash-table.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "7004a460761e10c15d77c1df3b90d96e8d214db3", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n #include \"pointer-set.h\"\n #include \"tree-affine.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"flags.h\"\n #include \"dumpfile.h\"\n "}, {"sha": "601efd65aa86d9464df645be31cff304c8114a3c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"ggc.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "3ca84c575bca96f7ea4372dbc7cd1a58fb6ab3bf", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"ggc.h\"\n #include \"langhooks.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "b75c732e4f81c2b7d84aa28b11d6ab3102399583", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "98cb6ab606fdbb4132c1ae8f7580d6a2ea8d3e75", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -88,7 +88,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "5d30caa6f6bb333ddb524f96460adbab0546c67f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"tree-iterator.h\"\n #include \"intl.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "713290896570a45613cdec9d179700a1cda5feb0", "filename": "gcc/tree-iterator.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -22,7 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n #include \"tree-iterator.h\"\n #include \"ggc.h\"\n "}, {"sha": "6adea4d7b34df6a47a0c04e853514f54c372f6fe", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -45,7 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "97e4787e3c7c67d4c8d6165e92cce45d182b86db", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -26,7 +26,7 @@\n #include \"function.h\"\n #include \"tree-dump.h\"\n #include \"tree-inline.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-iterator.h\"\n #include \"bitmap.h\"\n #include \"cgraph.h\""}, {"sha": "a17085c869244f8ab240b79ddeca0453498a6b30", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "15aadb03eca75672633ebfcfa8c2f4c1d24d0743", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -191,7 +191,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"cfgloop.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "9253059010831d6f6a14c5038a50110b5d76cc6d", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"coverage.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "3702922d00161a5618481ff668524900cbc037fa", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -259,7 +259,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"hash-table.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "a4f627f23c1fda90ad9d84e0426726fb07f4f525", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -78,7 +78,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alloc-pool.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"bitmap.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\""}, {"sha": "3984e79ce1230b446eaf385ea7d22d5c921f8afe", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-ssa-loop-ivopts.h\"\n #include \"tree-dfa.h\""}, {"sha": "70b22053be7cba419f4b1020c8ed7f03650b0705", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -119,7 +119,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "7a016f6240d58d96da832feb098dc6beacb95c7e", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -50,7 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple-pretty-print.h\"\n #include \"basic-block.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "a6afb47a4dba0f935823b3917f7936678a7d214e", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "1786f9c29d38383f540fb9a8b2d3566773d9a139", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "34a37633a481a1f958ad2a1d445efa79ad4abb89", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "894ff2db521049e95ae00f2257437dc3f70d28e4", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -69,7 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "123a6e19c98584ba828cefae733aba98d440daf9", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "a6adfc2f1a49b33b82d1bc20cdf67cd0e75c7c6e", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"intl.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "85a0b0a6f4418071bced669242211d5891ecedbb", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssa-loop-ivopts.h\"\n #include \"tree-ssa-loop-manip.h\""}, {"sha": "a345a4c6fe3f01ace6dc8b5f4ea7bb03254f3a8f", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "646f8cf1e64089ef7699e5c2b86f80e39f8e7e6e", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -90,7 +90,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "d79e957551616f9b2fd64eaefca7a1f6f7583d79", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "61e38d5e385c0508a21da96d57e49ab2529d0e55", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "7e83967b0723fc2f123517e85e57c277306ed3b5", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "00780b9a74513f0bf03b0c4b249ffe4a89ca18e9", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -30,7 +30,7 @@\n #include \"gimple-pretty-print.h\"\n #include \"dumpfile.h\"\n #include \"sbitmap.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "6e9188457f90531abc2f57cfe27e3ab280ad3b9e", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "36ef0184e7712e4bf9ad1ff1bf913f6089b43f38", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "0a1c4d409194900c4bf4f6c2863df8189f02dcfe", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"hash-table.h\"\n #include \"bitmap.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "ae8939e2ba9179b583db3fda24a6fb8672c67edc", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -31,7 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n #include \"pointer-set.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "7096b3da3de5898751845d4c7a4829647dbf1fa5", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -31,7 +31,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"basic-block.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "38acf7bb3428c0476c6d6af17c358b4156d69d85", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"function.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "c4797755fde35a918db4325966a5e2fcddbfb57b", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "8fca8c14addc8b545b1c60ec7e994acdaebfdf2e", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm.h\"\n #include \"langhooks.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-ssanames.h\""}, {"sha": "15227856033e12b36e1760dd0b6bc01c807e681c", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "292e771040276e642c3549bde492eb65d512b018", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "51b96e15408d8ada913c5231e7349a4861e0841e", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "b0e0fa99b20ec8f85848521444f2f0a9518a5ae7", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "e58b3a5c0c406eb33a8636b8cb7b2f8f757bc792", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -4294,10 +4294,6 @@ extern void cache_integer_cst (tree);\n /* In cgraph.c */\n extern void change_decl_assembler_name (tree, tree);\n \f\n-/* In gimplify.c */\n-extern tree unshare_expr (tree);\n-extern tree unshare_expr_without_location (tree);\n-\f\n /* In stmt.c */\n \n extern void expand_label (tree);\n@@ -4775,7 +4771,6 @@ extern void set_decl_incoming_rtl (tree, rtx, bool);\n \n /* In gimple.c.  */\n extern tree get_base_address (tree t);\n-extern void mark_addressable (tree);\n \n /* In tree.c.  */\n extern tree drop_tree_overflow (tree);"}, {"sha": "1d318ea85274ab1e998e5afcb618fdec792857be", "filename": "gcc/tsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"tm.h\"\n #include \"basic-block.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"function.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\""}, {"sha": "dda302dde53438b35d927ecb226b873126bceaa3", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b0be94bed1f11918c43b420934eac6e2a11bf6/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=45b0be94bed1f11918c43b420934eac6e2a11bf6", "patch": "@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"ggc.h\"\n-#include \"gimple.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}]}