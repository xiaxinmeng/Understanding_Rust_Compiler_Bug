{"sha": "95aa28ae18da65f97b45e1fe45dadff7fd352179", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVhYTI4YWUxOGRhNjVmOTdiNDVlMWZlNDVkYWRmZjdmZDM1MjE3OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T13:52:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-25T13:52:25Z"}, "message": "(fold...\n\n(fold, case EQ_EXPR, NE_EXPR): If COMPLEX_TYPE and at least one arg is\na COMPLEX_EXPR, split into a logical operation on the real and\nimaginary parts.\n\nFrom-SVN: r6313", "tree": {"sha": "7e3ef663770f85f9df9337a041d729d6b0f44d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e3ef663770f85f9df9337a041d729d6b0f44d3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95aa28ae18da65f97b45e1fe45dadff7fd352179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95aa28ae18da65f97b45e1fe45dadff7fd352179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95aa28ae18da65f97b45e1fe45dadff7fd352179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95aa28ae18da65f97b45e1fe45dadff7fd352179/comments", "author": null, "committer": null, "parents": [{"sha": "75326e8c5ab20d07c24cee21e00e7124b7bb136a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75326e8c5ab20d07c24cee21e00e7124b7bb136a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75326e8c5ab20d07c24cee21e00e7124b7bb136a"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "6424737a03eec58bce8932094510357da1b37fbd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95aa28ae18da65f97b45e1fe45dadff7fd352179/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95aa28ae18da65f97b45e1fe45dadff7fd352179/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=95aa28ae18da65f97b45e1fe45dadff7fd352179", "patch": "@@ -4479,6 +4479,28 @@ fold (expr)\n \t  return t1 ? t1 : t;\n \t}\n \n+      /* If this is a comparison of complex values and either or both\n+\t sizes are a COMPLEX_EXPR, it is best to split up the comparisons\n+\t and join them with a TRUTH_ANDIF_EXPR or TRUTH_ORIF_EXPR.  This\n+\t may prevent needless evaluations.  */\n+      if ((code == EQ_EXPR || code == NE_EXPR)\n+\t  && TREE_CODE (TREE_TYPE (arg0)) == COMPLEX_TYPE\n+\t  && (TREE_CODE (arg0) == COMPLEX_EXPR\n+\t      || TREE_CODE (arg1) == COMPLEX_EXPR))\n+\t{\n+\t  tree subtype = TREE_TYPE (TREE_TYPE (arg0));\n+\t  tree real0 = fold (build1 (REALPART_EXPR, subtype, arg0));\n+\t  tree imag0 = fold (build1 (IMAGPART_EXPR, subtype, arg0));\n+\t  tree real1 = fold (build1 (REALPART_EXPR, subtype, arg1));\n+\t  tree imag1 = fold (build1 (IMAGPART_EXPR, subtype, arg1));\n+\n+\t  return fold (build ((code == EQ_EXPR ? TRUTH_ANDIF_EXPR\n+\t\t\t       : TRUTH_ORIF_EXPR),\n+\t\t\t      type,\n+\t\t\t      fold (build (code, type, real0, real1)),\n+\t\t\t      fold (build (code, type, imag0, imag1))));\n+\t}\n+\n       /* From here on, the only cases we handle are when the result is\n \t known to be a constant.\n "}]}