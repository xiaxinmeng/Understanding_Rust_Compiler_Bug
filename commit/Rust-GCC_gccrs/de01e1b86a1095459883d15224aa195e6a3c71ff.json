{"sha": "de01e1b86a1095459883d15224aa195e6a3c71ff", "node_id": "C_kwDOANBUbNoAKGRlMDFlMWI4NmExMDk1NDU5ODgzZDE1MjI0YWExOTVlNmEzYzcxZmY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-08-24T19:52:32Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-12T08:16:50Z"}, "message": "[Ada] Do not mark user parameters of protected subprograms as artificial\n\nThis occurs because protected subprograms are not translated directly into\nobject code but first rewritten as a pair of subprograms by the front-end.\n\ngcc/ada/\n\n\t* exp_ch9.adb (Build_Protected_Spec): Tidy up and propagate the\n\tComes_From_Source flag onto the new formal parameters.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Do not check\n\treferences for subprograms generated for protected subprograms.", "tree": {"sha": "187d9ae6cd9a898e51169f2920702566000bcbff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/187d9ae6cd9a898e51169f2920702566000bcbff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de01e1b86a1095459883d15224aa195e6a3c71ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de01e1b86a1095459883d15224aa195e6a3c71ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de01e1b86a1095459883d15224aa195e6a3c71ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de01e1b86a1095459883d15224aa195e6a3c71ff/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d2bc28c41b6ddf0b11a7a3d7d312ff45cb2cb7d"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "757f492f605be855f91975b6429f600773108683", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de01e1b86a1095459883d15224aa195e6a3c71ff/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de01e1b86a1095459883d15224aa195e6a3c71ff/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=de01e1b86a1095459883d15224aa195e6a3c71ff", "patch": "@@ -3868,32 +3868,35 @@ package body Exp_Ch9 is\n       Ident       : Entity_Id;\n       Unprotected : Boolean := False) return List_Id\n    is\n-      Loc       : constant Source_Ptr := Sloc (N);\n-      Decl      : Node_Id;\n-      Formal    : Entity_Id;\n-      New_Plist : List_Id;\n-      New_Param : Node_Id;\n+      Loc : constant Source_Ptr := Sloc (N);\n+\n+      Decl       : Node_Id;\n+      Formal     : Entity_Id;\n+      New_Formal : Entity_Id;\n+      New_Plist  : List_Id;\n \n    begin\n       New_Plist := New_List;\n \n       Formal := First_Formal (Ident);\n       while Present (Formal) loop\n-         New_Param :=\n+         New_Formal :=\n+           Make_Defining_Identifier (Sloc (Formal), Chars (Formal));\n+         Set_Comes_From_Source (New_Formal, Comes_From_Source (Formal));\n+\n+         if Unprotected then\n+            Mutate_Ekind (New_Formal, Ekind (Formal));\n+            Set_Protected_Formal (Formal, New_Formal);\n+         end if;\n+\n+         Append_To (New_Plist,\n            Make_Parameter_Specification (Loc,\n-             Defining_Identifier =>\n-               Make_Defining_Identifier (Sloc (Formal), Chars (Formal)),\n+             Defining_Identifier => New_Formal,\n              Aliased_Present     => Aliased_Present (Parent (Formal)),\n              In_Present          => In_Present      (Parent (Formal)),\n              Out_Present         => Out_Present     (Parent (Formal)),\n-             Parameter_Type      => New_Occurrence_Of (Etype (Formal), Loc));\n-\n-         if Unprotected then\n-            Set_Protected_Formal (Formal, Defining_Identifier (New_Param));\n-            Mutate_Ekind (Defining_Identifier (New_Param), Ekind (Formal));\n-         end if;\n+             Parameter_Type      => New_Occurrence_Of (Etype (Formal), Loc)));\n \n-         Append (New_Param, New_Plist);\n          Next_Formal (Formal);\n       end loop;\n "}, {"sha": "93eeecba1d9e965089b761de2e2c3c6b196eb485", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de01e1b86a1095459883d15224aa195e6a3c71ff/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de01e1b86a1095459883d15224aa195e6a3c71ff/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=de01e1b86a1095459883d15224aa195e6a3c71ff", "patch": "@@ -5511,12 +5511,22 @@ package body Sem_Ch6 is\n \n          --  Check references of the subprogram spec when we are dealing with\n          --  an expression function due to it having a generated body.\n-         --  Otherwise, we simply check the formals of the subprogram body.\n \n          if Present (Spec_Id)\n            and then Is_Expression_Function (Spec_Id)\n          then\n             Check_References (Spec_Id);\n+\n+         --  Skip the check for subprograms generated for protected subprograms\n+         --  because it is also done for the protected subprograms themselves.\n+\n+         elsif Present (Spec_Id)\n+           and then Present (Protected_Subprogram (Spec_Id))\n+         then\n+            null;\n+\n+         --  Otherwise, we simply check the formals of the subprogram body.\n+\n          else\n             Check_References (Body_Id);\n          end if;"}]}