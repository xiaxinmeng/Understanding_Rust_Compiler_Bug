{"sha": "691571d285aefbe5dbc80202fa5e7ffb7d95be9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkxNTcxZDI4NWFlZmJlNWRiYzgwMjAyZmE1ZTdmZmI3ZDk1YmU5Yg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2009-09-03T18:33:25Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2009-09-03T18:33:25Z"}, "message": "re PR bootstrap/41241 (bootstrap comparison failure)\n\n2009-09-03  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR bootstrap/41241\n\t* ira.c (update_equiv_reg): Remove check on class likely spill.\n\nFrom-SVN: r151388", "tree": {"sha": "e27c07f57199ff5f91cca9b2886d35f348e9bc06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e27c07f57199ff5f91cca9b2886d35f348e9bc06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/691571d285aefbe5dbc80202fa5e7ffb7d95be9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691571d285aefbe5dbc80202fa5e7ffb7d95be9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/691571d285aefbe5dbc80202fa5e7ffb7d95be9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691571d285aefbe5dbc80202fa5e7ffb7d95be9b/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10e1bc0371938bdc3951e43947253c490353a947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e1bc0371938bdc3951e43947253c490353a947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e1bc0371938bdc3951e43947253c490353a947"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "fc0ff822f937dc8a5e4a1f331fed2844c3b8d7a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691571d285aefbe5dbc80202fa5e7ffb7d95be9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691571d285aefbe5dbc80202fa5e7ffb7d95be9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=691571d285aefbe5dbc80202fa5e7ffb7d95be9b", "patch": "@@ -1,3 +1,8 @@\n+2009-09-03  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR bootstrap/41241\n+\t* ira.c (update_equiv_reg): Remove check on class likely spill.\n+\n 2009-09-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/41236"}, {"sha": "b9b10dc9d3c8be46c7bdcd075dc41db61ef271a2", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691571d285aefbe5dbc80202fa5e7ffb7d95be9b/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691571d285aefbe5dbc80202fa5e7ffb7d95be9b/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=691571d285aefbe5dbc80202fa5e7ffb7d95be9b", "patch": "@@ -2384,21 +2384,9 @@ update_equiv_regs (void)\n \n \t  /* We only handle the case of a pseudo register being set\n \t     once, or always to the same value.  */\n-\t  /* ??? The mn10200 port breaks if we add equivalences for\n-\t     values that need an ADDRESS_REGS register and set them equivalent\n-\t     to a MEM of a pseudo.  The actual problem is in the over-conservative\n-\t     handling of INPADDR_ADDRESS / INPUT_ADDRESS / INPUT triples in\n-\t     calculate_needs, but we traditionally work around this problem\n-\t     here by rejecting equivalences when the destination is in a register\n-\t     that's likely spilled.  This is fragile, of course, since the\n-\t     preferred class of a pseudo depends on all instructions that set\n-\t     or use it.  */\n-\n \t  if (!REG_P (dest)\n \t      || (regno = REGNO (dest)) < FIRST_PSEUDO_REGISTER\n-\t      || reg_equiv[regno].init_insns == const0_rtx\n-\t      || (CLASS_LIKELY_SPILLED_P (reg_preferred_class (regno))\n-\t\t  && MEM_P (src) && ! reg_equiv[regno].is_arg_equivalence))\n+\t      || reg_equiv[regno].init_insns == const0_rtx)\n \t    {\n \t      /* This might be setting a SUBREG of a pseudo, a pseudo that is\n \t\t also set somewhere else to a constant.  */"}]}