{"sha": "4b341aaa63a14bba18c0c335e65b5437923c6bc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIzNDFhYWE2M2ExNGJiYTE4YzBjMzM1ZTY1YjU0Mzc5MjNjNmJjMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-10T22:48:15Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-10T22:48:15Z"}, "message": "(FUNCTION_{PRO,EPI}LOGUE): Don't define.\n\n(IMMEDIATE_PREFIX, REGISTER_PREFIX): Define.\n\nFrom-SVN: r8410", "tree": {"sha": "c4e51c71b5b3b8ff3ca78f6dc1a20f3593c1eef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4e51c71b5b3b8ff3ca78f6dc1a20f3593c1eef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b341aaa63a14bba18c0c335e65b5437923c6bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b341aaa63a14bba18c0c335e65b5437923c6bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b341aaa63a14bba18c0c335e65b5437923c6bc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b341aaa63a14bba18c0c335e65b5437923c6bc0/comments", "author": null, "committer": null, "parents": [{"sha": "2cedb812b400a0fa4ab04b84a24b54fbdcefe266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cedb812b400a0fa4ab04b84a24b54fbdcefe266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cedb812b400a0fa4ab04b84a24b54fbdcefe266"}], "stats": {"total": 96, "additions": 4, "deletions": 92}, "files": [{"sha": "81529767e84cd3de5d5eea99273de1fb58e7112c", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 4, "deletions": 92, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b341aaa63a14bba18c0c335e65b5437923c6bc0/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b341aaa63a14bba18c0c335e65b5437923c6bc0/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=4b341aaa63a14bba18c0c335e65b5437923c6bc0", "patch": "@@ -156,8 +156,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #undef TARGET_VERSION\n #undef REGISTER_NAMES\n-#undef FUNCTION_PROLOGUE\n-#undef FUNCTION_EPILOGUE\n #undef ASM_OUTPUT_REG_PUSH\n #undef ASM_OUTPUT_REG_POP\n #undef ASM_FILE_START\n@@ -184,6 +182,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef FUNCTION_PROFILER\n #undef ASM_OUTPUT_INTERNAL_LABEL\n #undef GLOBAL_ASM_OP\n+#undef IMMEDIATE_PREFIX\n+#undef REGISTER_PREFIX\n \n #define TARGET_VERSION fprintf (stderr, \" (68k, SGS/hpux syntax)\");\n \n@@ -192,100 +192,12 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n  \"%a0\", \"%a1\", \"%a2\", \"%a3\", \"%a4\", \"%a5\", \"%fp\", \"%sp\",\t\\\n  \"%fp0\", \"%fp1\", \"%fp2\", \"%fp3\", \"%fp4\", \"%fp5\", \"%fp6\", \"%fp7\"}\n \n-#define FUNCTION_PROLOGUE(FILE, SIZE)     \\\n-{ register int regno;\t\t\t\t\t\t\\\n-  register int mask = 0;\t\t\t\t\t\\\n-  extern char call_used_regs[];\t\t\t\t\t\\\n-  int fsize = (SIZE);\t\t\t\t\t\t\\\n-  if (frame_pointer_needed)\t\t\t\t\t\\\n-    { if (fsize < 0x8000)\t\t\t\t\t\\\n-        fprintf (FILE, \"\\tlink.w %%a6,&%d\\n\", -fsize);\t\t\\\n-      else if (TARGET_68020)\t\t\t\t\t\\\n-        fprintf (FILE, \"\\tlink.l %%a6,&%d\\n\", -fsize);\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\tlink.w %%a6,&0\\n\\tsub.l &%d,%%sp\\n\", fsize); }  \\\n-  for (regno = 16; regno < FIRST_PSEUDO_REGISTER; regno++)\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-       mask |= 1 << (regno - 16);\t\t\t\t\\\n-  if (mask != 0)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tfmovem &0x%x,-(%%sp)\\n\", mask & 0xff);       \\\n-  mask = 0;\t\t\t\t\t\t\t\\\n-  for (regno = 0; regno < 16; regno++)\t\t\t\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-       mask |= 1 << (15 - regno);\t\t\t\t\\\n-  if (frame_pointer_needed)\t\t\t\t\t\\\n-    mask &= ~ (1 << (15-FRAME_POINTER_REGNUM));\t\t\t\\\n-  if (exact_log2 (mask) >= 0)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tmov.l %s,-(%%sp)\\n\", reg_names[15 - exact_log2 (mask)]);  \\\n-  else if (mask) fprintf (FILE, \"\\tmovm.l &0x%x,-(%%sp)\\n\", mask); }\\\n-  if (flag_pic && current_function_uses_pic_offset_table)       \\\n-    {                                                           \\\n-      fprintf (FILE, \"\\tmov.l &DLT, %s\\n\",\\\n-\t\t   reg_names[PIC_OFFSET_TABLE_REGNUM]);         \\\n-      fprintf (FILE, \"\\tlea.l -0x6(%%pc,%s.l),%s\\n\",          \\\n-\t\t   reg_names[PIC_OFFSET_TABLE_REGNUM],          \\\n-\t\t   reg_names[PIC_OFFSET_TABLE_REGNUM]);         \\\n-    }\n+#define IMMEDIATE_PREFIX        \"&\"\n+#define REGISTER_PREFIX         \"%\"\n \n #define FUNCTION_PROFILER(FILE, LABEL_NO) \\\n    fprintf (FILE, \"\\tmov.l &LP%d,%%a0\\n\\tjsr mcount\\n\", (LABEL_NO));\n \n-#define FUNCTION_EPILOGUE(FILE, SIZE) \\\n-{ register int regno;\t\t\t\t\t\t\\\n-  register int mask, fmask;\t\t\t\t\t\\\n-  register int nregs;\t\t\t\t\t\t\\\n-  int offset, foffset;\t\t\t\t\t\t\\\n-  extern char call_used_regs[];\t\t\t\t\t\\\n-  int fsize = (SIZE);\t\t\t\t\t\t\\\n-  int big = 0;\t\t\t\t\t\t\t\\\n-  nregs = 0;  fmask = 0;\t\t\t\t\t\\\n-  for (regno = 16; regno < FIRST_PSEUDO_REGISTER; regno++)\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-      { nregs++; fmask |= 1 << (23 - regno); }\t\t\t\\\n-  foffset = nregs * 12;\t\t\t\t\t\t\\\n-  nregs = 0;  mask = 0;\t\t\t\t\t\t\\\n-  if (frame_pointer_needed) regs_ever_live[FRAME_POINTER_REGNUM] = 0; \\\n-  for (regno = 0; regno < 16; regno++)\t\t\t\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-      { nregs++; mask |= 1 << regno; }\t\t\t\t\\\n-  offset = foffset + nregs * 4;\t\t\t\t\t\\\n-  if (offset + fsize >= 0x8000 && frame_pointer_needed)\t\t\\\n-    { fprintf (FILE, \"\\tmov.l &%d,%%a0\\n\", -fsize);\t\t\\\n-      fsize = 0, big = 1; }\t\t\t\t\t\\\n-  if (exact_log2 (mask) >= 0) {\t\t\t\t\t\\\n-    if (big)\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tmov.l -%d(%%a6,%%a0.l),%s\\n\",\t\t\\\n-\t       offset + fsize, reg_names[exact_log2 (mask)]);\t\\\n-    else if (! frame_pointer_needed)\t\t\t\t\\\n-      fprintf (FILE, \"\\tmov.l (%%sp)+,%s\\n\",\t\t\t\\\n-\t       reg_names[exact_log2 (mask)]);\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tmov.l -%d(%%a6),%s\\n\",\t\t\t\\\n-\t       offset + fsize, reg_names[exact_log2 (mask)]); }\t\\\n-  else if (mask) {\t\t\t\t\t\t\\\n-    if (big)\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tmovm.l -%d(%%a6,%%a0.l),&0x%x\\n\",\t\\\n-\t       offset + fsize, mask);\t\t\t\t\\\n-    else if (! frame_pointer_needed)\t\t\t\t\\\n-      fprintf (FILE, \"\\tmovm.l (%%sp)+,&0x%x\\n\", mask);\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tmovm.l -%d(%%a6),&0x%x\\n\",\t\t\\\n-\t       offset + fsize, mask); }\t\t\t\t\\\n-  if (fmask) {\t\t\t\t\t\t\t\\\n-    if (big)\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tfmovem -%d(%%a6,%%a0.l),&0x%x\\n\",\t\\\n-\t       foffset + fsize, fmask);\t\t\t\t\\\n-    else if (! frame_pointer_needed)\t\t\t\t\\\n-      fprintf (FILE, \"\\tfmovem (%%sp)+,&0x%x\\n\", fmask);\t\\\n-    else\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tfmovem -%d(%%a6),&0x%x\\n\",\t\t\\\n-\t       foffset + fsize, fmask); }\t\t\t\\\n-  if (frame_pointer_needed)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tunlk %%a6\\n\");\t\t\t\t\\\n-  if (current_function_pops_args)\t\t\t\t\\\n-    fprintf (FILE, \"\\trtd &%d\\n\", current_function_pops_args);\t\\\n-  else fprintf (FILE, \"\\trts\\n\"); }\n-\n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */\n "}]}