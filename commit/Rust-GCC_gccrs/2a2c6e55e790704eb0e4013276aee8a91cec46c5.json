{"sha": "2a2c6e55e790704eb0e4013276aee8a91cec46c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEyYzZlNTVlNzkwNzA0ZWIwZTQwMTMyNzZhZWU4YTkxY2VjNDZjNQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-02-17T19:17:08Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-02-17T19:17:08Z"}, "message": "Class.h (_Jv_GetMethodString): Updated declaration.\n\n\t* java/lang/Class.h (_Jv_GetMethodString): Updated declaration.\n\t* java/lang/reflect/natMethod.cc (_Jv_CallAnyMethodA): Updated.\n\t* java/lang/natClass.cc (_Jv_LookupInterfaceMethod): Updated.\n\t* link.cc (_Jv_GetMethodString): Added 'derived' argument.\n\tChanged type of second argument.  Rewrote.\n\t(make_vtable): Use it.\n\t(append_partial_itable): Updated.\n\t(layout_vtable_methods): Updated.\n\nFrom-SVN: r95181", "tree": {"sha": "247aeb11c899ea6580277539cb710a77d1b1f610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247aeb11c899ea6580277539cb710a77d1b1f610"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a2c6e55e790704eb0e4013276aee8a91cec46c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2c6e55e790704eb0e4013276aee8a91cec46c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2c6e55e790704eb0e4013276aee8a91cec46c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2c6e55e790704eb0e4013276aee8a91cec46c5/comments", "author": null, "committer": null, "parents": [{"sha": "51615fd6cd97605e975ead59ca7780bc1bb92805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51615fd6cd97605e975ead59ca7780bc1bb92805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51615fd6cd97605e975ead59ca7780bc1bb92805"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "49a0b6e4f29bcf5c788efae2df838f4710add755", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c6e55e790704eb0e4013276aee8a91cec46c5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c6e55e790704eb0e4013276aee8a91cec46c5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2a2c6e55e790704eb0e4013276aee8a91cec46c5", "patch": "@@ -1,3 +1,14 @@\n+2005-02-17  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/Class.h (_Jv_GetMethodString): Updated declaration.\n+\t* java/lang/reflect/natMethod.cc (_Jv_CallAnyMethodA): Updated.\n+\t* java/lang/natClass.cc (_Jv_LookupInterfaceMethod): Updated.\n+\t* link.cc (_Jv_GetMethodString): Added 'derived' argument.\n+\tChanged type of second argument.  Rewrote.\n+\t(make_vtable): Use it.\n+\t(append_partial_itable): Updated.\n+\t(layout_vtable_methods): Updated.\n+\n 2005-02-17  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/PlainSocketImpl.java"}, {"sha": "d7b21e76b05bc613dbfa776a8e71719f8e7a5a00", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c6e55e790704eb0e4013276aee8a91cec46c5/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c6e55e790704eb0e4013276aee8a91cec46c5/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=2a2c6e55e790704eb0e4013276aee8a91cec46c5", "patch": "@@ -228,7 +228,7 @@ void _Jv_InitNewClassFields (jclass klass);\n \n // Friend functions and classes in prims.cc\n void _Jv_InitPrimClass (jclass, char *, char, int);\n-jstring _Jv_GetMethodString (jclass, _Jv_Utf8Const *);\n+jstring _Jv_GetMethodString (jclass, _Jv_Method *, jclass = NULL);\n \n jboolean _Jv_CheckAccess (jclass self_klass, jclass other_klass,\n \t\t\t  jint flags);\n@@ -454,7 +454,7 @@ class java::lang::Class : public java::lang::Object\n   // in prims.cc\n   friend void ::_Jv_InitPrimClass (jclass, char *, char, int);\n \n-  friend jstring (::_Jv_GetMethodString) (jclass, _Jv_Utf8Const *);\n+  friend jstring (::_Jv_GetMethodString) (jclass, _Jv_Method *, jclass);\n \n   friend jboolean (::_Jv_CheckAccess) (jclass self_klass, jclass other_klass,\n \t\t\t\t   jint flags);"}, {"sha": "f29f66747649c7db984ab6309a769d24fd82bd5c", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c6e55e790704eb0e4013276aee8a91cec46c5/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c6e55e790704eb0e4013276aee8a91cec46c5/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=2a2c6e55e790704eb0e4013276aee8a91cec46c5", "patch": "@@ -1,6 +1,6 @@\n // natClass.cc - Implementation of java.lang.Class native methods.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004  \n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005  \n    Free Software Foundation\n \n    This file is part of libgcj.\n@@ -973,13 +973,13 @@ _Jv_LookupInterfaceMethod (jclass klass, _Jv_Utf8Const *name,\n \n       if (Modifier::isStatic(meth->accflags))\n \tthrow new java::lang::IncompatibleClassChangeError\n-\t  (_Jv_GetMethodString (klass, meth->name));\n+\t  (_Jv_GetMethodString (klass, meth));\n       if (Modifier::isAbstract(meth->accflags))\n \tthrow new java::lang::AbstractMethodError\n-\t  (_Jv_GetMethodString (klass, meth->name));\n+\t  (_Jv_GetMethodString (klass, meth));\n       if (! Modifier::isPublic(meth->accflags))\n \tthrow new java::lang::IllegalAccessError\n-\t  (_Jv_GetMethodString (klass, meth->name));\n+\t  (_Jv_GetMethodString (klass, meth));\n \n       _Jv_AddMethodToCache (klass, meth);\n "}, {"sha": "27c26e19ac740fc588fc5e9a278172d6ff41ec7b", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c6e55e790704eb0e4013276aee8a91cec46c5/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c6e55e790704eb0e4013276aee8a91cec46c5/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=2a2c6e55e790704eb0e4013276aee8a91cec46c5", "patch": "@@ -1,6 +1,6 @@\n // natMethod.cc - Native code for Method class.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001 , 2002, 2003, 2004 Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001 , 2002, 2003, 2004, 2005 Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -496,7 +496,7 @@ _Jv_CallAnyMethodA (jobject obj,\n \t\t  || concrete_meth->ncode == NULL\n \t\t  || Modifier::isAbstract(concrete_meth->accflags))\n \t\tthrow new java::lang::IncompatibleClassChangeError\n-\t\t  (_Jv_GetMethodString (vtable->clas, meth->name));\n+\t\t  (_Jv_GetMethodString (vtable->clas, meth));\n \t      ncode = concrete_meth->ncode;\n \t    }\n \t  else"}, {"sha": "8dd809b868787f6eee9adb87a38b6e0b8c95c96a", "filename": "libjava/link.cc", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c6e55e790704eb0e4013276aee8a91cec46c5/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c6e55e790704eb0e4013276aee8a91cec46c5/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=2a2c6e55e790704eb0e4013276aee8a91cec46c5", "patch": "@@ -665,12 +665,21 @@ _Jv_Linker::generate_itable (jclass klass, _Jv_ifaces *ifaces,\n \n // Format method name for use in error messages.\n jstring\n-_Jv_GetMethodString (jclass klass, _Jv_Utf8Const *name)\n+_Jv_GetMethodString (jclass klass, _Jv_Method *meth,\n+\t\t     jclass derived)\n {\n-  jstring r = klass->name->toString();\n-  r = r->concat (JvNewStringUTF (\".\"));\n-  r = r->concat (name->toString());\n-  return r;\n+  using namespace java::lang;\n+  StringBuffer *buf = new StringBuffer (klass->name->toString());\n+  buf->append (jchar ('.'));\n+  buf->append (meth->name->toString());\n+  buf->append ((jchar) ' ');\n+  buf->append (meth->signature->toString());\n+  if (derived)\n+    {\n+      buf->append(JvNewStringLatin1(\" in \"));\n+      buf->append(derived->name->toString());\n+    }\n+  return buf->toString();\n }\n \n void \n@@ -720,13 +729,13 @@ _Jv_Linker::append_partial_itable (jclass klass, jclass iface,\n         {\n \t  if ((meth->accflags & Modifier::STATIC) != 0)\n \t    throw new java::lang::IncompatibleClassChangeError\n-\t      (_Jv_GetMethodString (klass, meth->name));\n+\t      (_Jv_GetMethodString (klass, meth));\n \t  if ((meth->accflags & Modifier::ABSTRACT) != 0)\n \t    throw new java::lang::AbstractMethodError\n-\t      (_Jv_GetMethodString (klass, meth->name));\n+\t      (_Jv_GetMethodString (klass, meth));\n \t  if ((meth->accflags & Modifier::PUBLIC) == 0)\n \t    throw new java::lang::IllegalAccessError\n-\t      (_Jv_GetMethodString (klass, meth->name));\n+\t      (_Jv_GetMethodString (klass, meth));\n \n \t  itable[pos] = meth->ncode;\n \t}\n@@ -1161,9 +1170,9 @@ _Jv_Linker::layout_vtable_methods (jclass klass)\n \t\t  using namespace java::lang;\n \t\t  StringBuffer *sb = new StringBuffer();\n \t\t  sb->append(JvNewStringLatin1(\"method \"));\n-\t\t  sb->append(_Jv_GetMethodString(klass, meth->name));\n+\t\t  sb->append(_Jv_GetMethodString(klass, meth));\n \t\t  sb->append(JvNewStringLatin1(\" overrides final method \"));\n-\t\t  sb->append(_Jv_GetMethodString(declarer, super_meth->name));\n+\t\t  sb->append(_Jv_GetMethodString(declarer, super_meth));\n \t\t  throw new VerifyError(sb->toString());\n \t\t}\n \t    }\n@@ -1245,18 +1254,15 @@ _Jv_Linker::make_vtable (jclass klass)\n \tif (vtable->get_method(i) == (void *) &_Jv_abstractMethodError)\n \t  {\n \t    using namespace java::lang;\n+\t    jclass orig = klass;\n \t    while (klass != NULL)\n \t      {\n \t\tfor (int j = 0; j < klass->method_count; ++j)\n \t\t  {\n \t\t    if (klass->methods[j].index == i)\n-\t\t      {\n-\t\t\tStringBuffer *buf = new StringBuffer ();\n-\t\t\tbuf->append (_Jv_NewStringUtf8Const (klass->methods[j].name));\n-\t\t\tbuf->append ((jchar) ' ');\n-\t\t\tbuf->append (_Jv_NewStringUtf8Const (klass->methods[j].signature));\n-\t\t\tthrow new AbstractMethodError (buf->toString ());\n-\t\t      }\n+\t\t      throw new AbstractMethodError(_Jv_GetMethodString(klass,\n+\t\t\t\t\t\t\t\t\t&klass->methods[j],\n+\t\t\t\t\t\t\t\t\torig));\n \t\t  }\n \t\tklass = klass->getSuperclass ();\n \t      }"}]}