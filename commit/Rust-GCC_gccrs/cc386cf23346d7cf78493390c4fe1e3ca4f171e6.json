{"sha": "cc386cf23346d7cf78493390c4fe1e3ca4f171e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MzODZjZjIzMzQ2ZDdjZjc4NDkzMzkwYzRmZTFlM2NhNGYxNzFlNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-09T15:59:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-09T15:59:56Z"}, "message": "PR libstdc++/91057 set locale::id::_M_index atomically\n\nIf two threads see _M_index==0 concurrently they will both try to set\nit, potentially storing the facet at two different indices in the array.\n\nEither set the _M_index data member using an atomic compare-exchange\noperation or while holding a mutex.\n\nAlso move the LONG_DOUBLE_COMPAT code into a separate function to remove\nthe visual noise it creates.\n\n\tPR libstdc++/91057\n\t* src/c++98/locale.cc (locale::id::_M_id()) [__GTHREADS]: Use atomic\n\tcompare-exchange or double-checked lock to ensure only one thread sets\n\tthe _M_index variable.\n\t[_GLIBCXX_LONG_DOUBLE_COMPAT]: Call find_ldbl_sync_facet to detect\n\tfacets that share another facet's ID.\n\t[_GLIBCXX_LONG_DOUBLE_COMPAT] (find_ldbl_sync_facet): New function.\n\nFrom-SVN: r276762", "tree": {"sha": "aa639bd1f2716137d71ac6507663d9e968c549e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa639bd1f2716137d71ac6507663d9e968c549e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc386cf23346d7cf78493390c4fe1e3ca4f171e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc386cf23346d7cf78493390c4fe1e3ca4f171e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc386cf23346d7cf78493390c4fe1e3ca4f171e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc386cf23346d7cf78493390c4fe1e3ca4f171e6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8841c0413d52261a8d024577381582d07a866a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8841c0413d52261a8d024577381582d07a866a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8841c0413d52261a8d024577381582d07a866a"}], "stats": {"total": 80, "additions": 62, "deletions": 18}, "files": [{"sha": "045fbe3e9184cb48149daf6da8a1bffdb5cfca5a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc386cf23346d7cf78493390c4fe1e3ca4f171e6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc386cf23346d7cf78493390c4fe1e3ca4f171e6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc386cf23346d7cf78493390c4fe1e3ca4f171e6", "patch": "@@ -1,5 +1,13 @@\n 2019-10-09  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/91057\n+\t* src/c++98/locale.cc (locale::id::_M_id()) [__GTHREADS]: Use atomic\n+\tcompare-exchange or double-checked lock to ensure only one thread sets\n+\tthe _M_index variable.\n+\t[_GLIBCXX_LONG_DOUBLE_COMPAT]: Call find_ldbl_sync_facet to detect\n+\tfacets that share another facet's ID.\n+\t[_GLIBCXX_LONG_DOUBLE_COMPAT] (find_ldbl_sync_facet): New function.\n+\n \tPR libstdc++/78552\n \t* src/c++98/locale_init.cc (locale::classic()): Do not construct a new\n \tlocale object for every call."}, {"sha": "1d00edc6f5143d1bacc3654251c3f89c20ba99b9", "filename": "libstdc++-v3/src/c++98/locale.cc", "status": "modified", "additions": 54, "deletions": 18, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc386cf23346d7cf78493390c4fe1e3ca4f171e6/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc386cf23346d7cf78493390c4fe1e3ca4f171e6/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc?ref=cc386cf23346d7cf78493390c4fe1e3ca4f171e6", "patch": "@@ -474,33 +474,69 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Definitions for static const data members of locale::id\n   _Atomic_word locale::id::_S_refcount;  // init'd to 0 by linker\n \n+  // XXX GLIBCXX_ABI Deprecated\n+#ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+namespace {\n+  inline locale::id*\n+  find_ldbl_sync_facet(locale::id* __idp)\n+  {\n+# define _GLIBCXX_SYNC_ID(facet, mangled) \\\n+    if (__idp == &::mangled)\t\t  \\\n+      return &facet::id\n+\n+    _GLIBCXX_SYNC_ID (num_get<char>, _ZNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+    _GLIBCXX_SYNC_ID (num_put<char>, _ZNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+    _GLIBCXX_SYNC_ID (money_get<char>, _ZNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+    _GLIBCXX_SYNC_ID (money_put<char>, _ZNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+# ifdef _GLIBCXX_USE_WCHAR_T\n+    _GLIBCXX_SYNC_ID (num_get<wchar_t>, _ZNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+    _GLIBCXX_SYNC_ID (num_put<wchar_t>, _ZNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+    _GLIBCXX_SYNC_ID (money_get<wchar_t>, _ZNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+    _GLIBCXX_SYNC_ID (money_put<wchar_t>, _ZNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+# endif\n+  }\n+} // namespace\n+#endif\n+\n   size_t\n   locale::id::_M_id() const throw()\n   {\n     if (!_M_index)\n       {\n \t// XXX GLIBCXX_ABI Deprecated\n #ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n-\tlocale::id *f = 0;\n-# define _GLIBCXX_SYNC_ID(facet, mangled) \\\n-\tif (this == &::mangled)\t\t\t\t\\\n-\t  f = &facet::id\n-\t_GLIBCXX_SYNC_ID (num_get<char>, _ZNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n-\t_GLIBCXX_SYNC_ID (num_put<char>, _ZNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n-\t_GLIBCXX_SYNC_ID (money_get<char>, _ZNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n-\t_GLIBCXX_SYNC_ID (money_put<char>, _ZNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n-# ifdef _GLIBCXX_USE_WCHAR_T\n-\t_GLIBCXX_SYNC_ID (num_get<wchar_t>, _ZNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n-\t_GLIBCXX_SYNC_ID (num_put<wchar_t>, _ZNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n-\t_GLIBCXX_SYNC_ID (money_get<wchar_t>, _ZNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n-\t_GLIBCXX_SYNC_ID (money_put<wchar_t>, _ZNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n-# endif\n-\tif (f)\n-\t  _M_index = 1 + f->_M_id();\n+\tif (locale::id* f = find_ldbl_sync_facet(this))\n+\t{\n+\t  const size_t sync_id = f->_M_id();\n+\t  _M_index = 1 + sync_id;\n+\t  return sync_id;\n+\t}\n+#endif\n+\n+#ifdef __GTHREADS\n+\tif (__gthread_active_p())\n+\t  {\n+\t    if (__atomic_always_lock_free(sizeof(_M_index), &_M_index))\n+\t      {\n+\t\tconst _Atomic_word next\n+\t\t  = 1 + __gnu_cxx::__exchange_and_add(&_S_refcount, 1);\n+\t\tsize_t expected = 0;\n+\t\t__atomic_compare_exchange_n(&_M_index, &expected, next,\n+\t\t\t\t\t    /* weak = */ false,\n+\t\t\t\t\t    /* success = */ __ATOMIC_ACQ_REL,\n+\t\t\t\t\t    /* failure = */ __ATOMIC_ACQUIRE);\n+\t      }\n+\t    else\n+\t      {\n+\t\tstatic __gnu_cxx::__mutex m;\n+\t\t__gnu_cxx::__scoped_lock l(m);\n+\t\tif (!_M_index)\n+\t\t  _M_index = ++_S_refcount;\n+\t      }\n+\t  }\n \telse\n #endif\n-\t  _M_index = 1 + __gnu_cxx::__exchange_and_add_dispatch(&_S_refcount,\n-\t\t\t\t\t\t\t\t1);\n+\t_M_index = ++_S_refcount; // single-threaded case\n       }\n     return _M_index - 1;\n   }"}]}