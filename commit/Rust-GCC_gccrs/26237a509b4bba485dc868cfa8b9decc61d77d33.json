{"sha": "26237a509b4bba485dc868cfa8b9decc61d77d33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYyMzdhNTA5YjRiYmE0ODVkYzg2OGNmYThiOWRlY2M2MWQ3N2QzMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-11-16T17:05:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-11-16T17:05:34Z"}, "message": "sparc.c (function_arg_vector_value): Remove 'base_mode' parameter.\n\n\t* config/sparc/sparc.c (function_arg_vector_value): Remove 'base_mode'\n\tparameter. \u00a0Use DImode for computing the number of registers.\n\t(function_arg): Adjust for above change.\n\t(function_value): Likewise.\n\nFrom-SVN: r141921", "tree": {"sha": "5b7086f3a03d1400971b31c31545b41ac317e1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b7086f3a03d1400971b31c31545b41ac317e1f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26237a509b4bba485dc868cfa8b9decc61d77d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26237a509b4bba485dc868cfa8b9decc61d77d33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26237a509b4bba485dc868cfa8b9decc61d77d33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26237a509b4bba485dc868cfa8b9decc61d77d33/comments", "author": null, "committer": null, "parents": [{"sha": "dfc1a404f251f8f08d117f4af416d84ff1af59cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfc1a404f251f8f08d117f4af416d84ff1af59cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfc1a404f251f8f08d117f4af416d84ff1af59cb"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "4d91368a418a727c5ea089c8d4c7a3a644022fa1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26237a509b4bba485dc868cfa8b9decc61d77d33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26237a509b4bba485dc868cfa8b9decc61d77d33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26237a509b4bba485dc868cfa8b9decc61d77d33", "patch": "@@ -1,3 +1,10 @@\n+2008-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (function_arg_vector_value): Remove 'base_mode'\n+\tparameter. \ufffdUse DImode for computing the number of registers.\n+\t(function_arg): Adjust for above change.\n+\t(function_value): Likewise.\n+\n 2008-11-15  Zdenek Dvorak  <ook@ucw.cz>\n \n \tPR tree-optimization/37950"}, {"sha": "d3d1af0479ef814a1795f1d070891af9a7542ba8", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26237a509b4bba485dc868cfa8b9decc61d77d33/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26237a509b4bba485dc868cfa8b9decc61d77d33/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=26237a509b4bba485dc868cfa8b9decc61d77d33", "patch": "@@ -5138,15 +5138,13 @@ function_arg_union_value (int size, enum machine_mode mode, int slotno,\n    Return an expression valid as a return value for the two macros\n    FUNCTION_ARG and FUNCTION_VALUE.\n \n-   SIZE is the size in bytes of the vector.\n-   BASE_MODE is the argument's base machine mode.\n+   SIZE is the size in bytes of the vector (at least 8 bytes).\n    REGNO is the FP hard register the vector will be passed in.  */\n \n static rtx\n-function_arg_vector_value (int size, enum machine_mode base_mode, int regno)\n+function_arg_vector_value (int size, int regno)\n {\n-  unsigned short base_mode_size = GET_MODE_SIZE (base_mode);\n-  int nregs = size / base_mode_size, i;\n+  int i, nregs = size / 8;\n   rtx regs;\n \n   regs = gen_rtx_PARALLEL (BLKmode, rtvec_alloc (nregs));\n@@ -5155,9 +5153,8 @@ function_arg_vector_value (int size, enum machine_mode base_mode, int regno)\n     {\n       XVECEXP (regs, 0, i)\n \t= gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t     gen_rtx_REG (base_mode, regno),\n-\t\t\t     GEN_INT (base_mode_size * i));\n-      regno += base_mode_size / 4;\n+\t\t\t     gen_rtx_REG (DImode, regno + 2*i),\n+\t\t\t     GEN_INT (i*8));\n     }\n \n   return regs;\n@@ -5203,7 +5200,6 @@ function_arg (const struct sparc_args *cum, enum machine_mode mode,\n \n       if (mode == BLKmode)\n \treturn function_arg_vector_value (size,\n-\t\t\t\t\t  TYPE_MODE (TREE_TYPE (type)),\n \t\t\t\t\t  SPARC_FP_ARG_FIRST + 2*slotno);\n       else\n \tmclass = MODE_FLOAT;\n@@ -5619,7 +5615,6 @@ function_value (const_tree type, enum machine_mode mode, int incoming_p)\n \n       if (mode == BLKmode)\n \treturn function_arg_vector_value (size,\n-\t\t\t\t\t  TYPE_MODE (TREE_TYPE (type)),\n \t\t\t\t\t  SPARC_FP_ARG_FIRST);\n       else\n \tmclass = MODE_FLOAT;"}]}