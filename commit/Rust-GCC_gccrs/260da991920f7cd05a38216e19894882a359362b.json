{"sha": "260da991920f7cd05a38216e19894882a359362b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYwZGE5OTE5MjBmN2NkMDVhMzgyMTZlMTk4OTQ4ODJhMzU5MzYyYg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-09-06T16:34:54Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-09-06T16:34:54Z"}, "message": "PR78468 - add alloca alignment test\n\nAdd an alignment test to check that aligned alloca's really do get\ncorrectly aligned.  Some targets may not ensure SP is always a multiple\nof STACK_BOUNDARY (particularly with outgoing arguments), which means\naligned alloca does not get correctly aligned.  This can be fixed either\nby aligning the outgoing arguments or setting STACK_BOUNDARY correctly.\n\n    testsuite/\n        PR middle-end/78468\n\t* gcc.dg/pr78468.c: Add alignment test.\n\nFrom-SVN: r251811", "tree": {"sha": "72e5ed596ac4dba29645a91623384eb83e335fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72e5ed596ac4dba29645a91623384eb83e335fab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/260da991920f7cd05a38216e19894882a359362b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260da991920f7cd05a38216e19894882a359362b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/260da991920f7cd05a38216e19894882a359362b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260da991920f7cd05a38216e19894882a359362b/comments", "author": null, "committer": null, "parents": [{"sha": "4a40b308ef56696a3a33dc8dc8bce31895681897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a40b308ef56696a3a33dc8dc8bce31895681897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a40b308ef56696a3a33dc8dc8bce31895681897"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "3b850fb5b107245b6c40657bc85df1a08d29362e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260da991920f7cd05a38216e19894882a359362b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260da991920f7cd05a38216e19894882a359362b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=260da991920f7cd05a38216e19894882a359362b", "patch": "@@ -1,3 +1,8 @@\n+2017-09-06  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR middle-end/78468\n+\t* gcc.dg/pr78468.c: Add alignment test.\n+\n 2017-09-06  Wish Wu  <wishwu007@gmail.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "a882d9a7deea8943d8babaa00259b048e96a508a", "filename": "gcc/testsuite/gcc.dg/pr78468.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260da991920f7cd05a38216e19894882a359362b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78468.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260da991920f7cd05a38216e19894882a359362b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78468.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78468.c?ref=260da991920f7cd05a38216e19894882a359362b", "patch": "@@ -0,0 +1,102 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target alloca } */\n+/* { dg-options \"-O2 -fno-inline\" } */\n+\n+/* Test that targets correctly round the size of the outgoing arguments\n+   to a multiple of STACK_BOUNDARY.  There is a serious alignment bug if\n+   aligned alloca does not get aligned!  */\n+\n+__extension__ typedef __UINTPTR_TYPE__ uintptr_t;\n+extern void abort (void);\n+\n+volatile int xx;\n+volatile int x = 16;\n+\n+void\n+t1 (int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7,\n+    void *p, int align)\n+{\n+  xx = x0 + x1 + x2 + x3 + x4 + x4 + x6 + x7;\n+  if ((int)(uintptr_t)p & (align-1))\n+    abort ();\n+}\n+\n+void\n+t2 (int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7,\n+    void *p, int align, int dummy)\n+{\n+  xx = x0 + x1 + x2 + x3 + x4 + x4 + x6 + x7;\n+  if ((int)(uintptr_t)p & (align-1))\n+    abort ();\n+}\n+\n+void\n+t1_a4 (int size)\n+{\n+  void *p = __builtin_alloca_with_align (size, 32);\n+  t1 (0, 0, 0, 0, 0, 0, 0, 0, p, 4);\n+}\n+\n+void\n+t2_a4 (int size)\n+{\n+  void *p = __builtin_alloca_with_align (size, 32);\n+  t2 (0, 0, 0, 0, 0, 0, 0, 0, p, 4, 0);\n+}\n+\n+void\n+t1_a8 (int size)\n+{\n+  void *p = __builtin_alloca_with_align (size, 64);\n+  t1 (0, 0, 0, 0, 0, 0, 0, 0, p, 8);\n+}\n+\n+void\n+t2_a8 (int size)\n+{\n+  void *p = __builtin_alloca_with_align (size, 64);\n+  t2 (0, 0, 0, 0, 0, 0, 0, 0, p, 8, 0);\n+}\n+\n+void\n+t1_a16 (int size)\n+{\n+  void *p = __builtin_alloca_with_align (size, 128);\n+  t1 (0, 0, 0, 0, 0, 0, 0, 0, p, 16);\n+}\n+\n+void\n+t2_a16 (int size)\n+{\n+  void *p = __builtin_alloca_with_align (size, 128);\n+  t2 (0, 0, 0, 0, 0, 0, 0, 0, p, 16, 0);\n+}\n+\n+void\n+t1_a32 (int size)\n+{\n+  void *p = __builtin_alloca_with_align (size, 256);\n+  t1 (0, 0, 0, 0, 0, 0, 0, 0, p, 32);\n+}\n+\n+void\n+t2_a32 (int size)\n+{\n+  void *p = __builtin_alloca_with_align (size, 256);\n+  t2 (0, 0, 0, 0, 0, 0, 0, 0, p, 32, 0);\n+}\n+\n+\n+int\n+main ()\n+{\n+  t1_a4 (x);\n+  t2_a4 (x);\n+  t1_a8 (x);\n+  t2_a8 (x);\n+  t1_a16 (x);\n+  t2_a16 (x);\n+  t1_a32 (x);\n+  t2_a32 (x);\n+  return 0;\n+}"}]}