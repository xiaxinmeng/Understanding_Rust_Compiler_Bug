{"sha": "2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e", "node_id": "C_kwDOANBUbNoAKDIyNzNmZDVhNmZkYmU4ZjdkYTJjMGUyMTdjMjc5YmNiYWFhN2RmOWU", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-04-11T19:44:20Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-04-12T09:08:59Z"}, "message": "Fortran: fix functions with entry and pointer/allocatable result [PR104312]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/104312\n\t* resolve.cc (resolve_entries): Handle functions with ENTRY and\n\tALLOCATABLE results.\n\t* trans-expr.cc (gfc_conv_procedure_call): Functions with a result\n\twith the POINTER or ALLOCATABLE attribute shall not get any special\n\ttreatment with -ff2c, as they cannot be written in Fortran 77.\n\t* trans-types.cc (gfc_return_by_reference): Likewise.\n\t(gfc_get_function_type): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/104312\n\t* gfortran.dg/entry_26.f90: New test.\n\t* gfortran.dg/entry_27.f90: New test.", "tree": {"sha": "c05ecfb6ca5f331aa0d68229c84e817cecaf1615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c05ecfb6ca5f331aa0d68229c84e817cecaf1615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c482995cc5bac4a2168ea0049041e712544e474b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c482995cc5bac4a2168ea0049041e712544e474b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c482995cc5bac4a2168ea0049041e712544e474b"}], "stats": {"total": 153, "additions": 152, "deletions": 1}, "files": [{"sha": "58013d48dff65c9c2fe70c92d9e104bf30ea224d", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e", "patch": "@@ -702,7 +702,8 @@ resolve_entries (gfc_namespace *ns)\n   gfc_code *c;\n   gfc_symbol *proc;\n   gfc_entry_list *el;\n-  char name[GFC_MAX_SYMBOL_LEN + 1];\n+  /* Provide sufficient space to hold \"master.%d.%s\".  */\n+  char name[GFC_MAX_SYMBOL_LEN + 1 + 18];\n   static int master_count = 0;\n \n   if (ns->proc_name == NULL)\n@@ -827,6 +828,9 @@ resolve_entries (gfc_namespace *ns)\n \t\t\t    \"entries returning variables of different \"\n \t\t\t    \"string lengths\", ns->entries->sym->name,\n \t\t\t    &ns->entries->sym->declared_at);\n+\t  else if (el->sym->result->attr.allocatable\n+\t\t   != ns->entries->sym->result->attr.allocatable)\n+\t    break;\n \t}\n \n       if (el == NULL)\n@@ -838,6 +842,8 @@ resolve_entries (gfc_namespace *ns)\n \t    gfc_set_array_spec (proc, gfc_copy_array_spec (sym->as), NULL);\n \t  if (sym->attr.pointer)\n \t    gfc_add_pointer (&proc->attr, NULL);\n+\t  if (sym->attr.allocatable)\n+\t    gfc_add_allocatable (&proc->attr, NULL);\n \t}\n       else\n \t{\n@@ -869,6 +875,17 @@ resolve_entries (gfc_namespace *ns)\n \t\t\t       \"FUNCTION %s at %L\", sym->name,\n \t\t\t       ns->entries->sym->name, &sym->declared_at);\n \t\t}\n+\t      else if (sym->attr.allocatable)\n+\t\t{\n+\t\t  if (el == ns->entries)\n+\t\t    gfc_error (\"FUNCTION result %s cannot be ALLOCATABLE in \"\n+\t\t\t       \"FUNCTION %s at %L\", sym->name,\n+\t\t\t       ns->entries->sym->name, &sym->declared_at);\n+\t\t  else\n+\t\t    gfc_error (\"ENTRY result %s cannot be ALLOCATABLE in \"\n+\t\t\t       \"FUNCTION %s at %L\", sym->name,\n+\t\t\t       ns->entries->sym->name, &sym->declared_at);\n+\t\t}\n \t      else\n \t\t{\n \t\t  ts = &sym->ts;"}, {"sha": "79367fa2ae0fd4196c44f7f2ad1b7cc891a3963b", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e", "patch": "@@ -7800,6 +7800,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n   */\n   if (flag_f2c && sym->ts.type == BT_REAL\n       && sym->ts.kind == gfc_default_real_kind\n+      && !sym->attr.pointer\n+      && !sym->attr.allocatable\n       && !sym->attr.always_explicit)\n     se->expr = fold_convert (gfc_get_real_type (sym->ts.kind), se->expr);\n "}, {"sha": "fc5c221a3017bb2e585bdb7e2b56c84e23f575d8", "filename": "gcc/fortran/trans-types.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e/gcc%2Ffortran%2Ftrans-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e/gcc%2Ffortran%2Ftrans-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.cc?ref=2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e", "patch": "@@ -2962,6 +2962,8 @@ gfc_return_by_reference (gfc_symbol * sym)\n      require an explicit interface, as no compatibility problems can\n      arise there.  */\n   if (flag_f2c && sym->ts.type == BT_COMPLEX\n+      && !sym->attr.pointer\n+      && !sym->attr.allocatable\n       && !sym->attr.intrinsic && !sym->attr.always_explicit)\n     return 1;\n \n@@ -3273,6 +3275,8 @@ gfc_get_function_type (gfc_symbol * sym, gfc_actual_arglist *actual_args,\n     type = gfc_get_mixed_entry_union (sym->ns);\n   else if (flag_f2c && sym->ts.type == BT_REAL\n \t   && sym->ts.kind == gfc_default_real_kind\n+\t   && !sym->attr.pointer\n+\t   && !sym->attr.allocatable\n \t   && !sym->attr.always_explicit)\n     {\n       /* Special case: f2c calling conventions require that (scalar)"}, {"sha": "018aedc7854bc7fad8b07b72afcf2fe16b6cf188", "filename": "gcc/testsuite/gfortran.dg/entry_26.f90", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_26.f90?ref=2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e", "patch": "@@ -0,0 +1,64 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fno-f2c\" }\n+!\n+! PR fortran/104312 - ICE in fold_convert_loc with entry, -ff2c: control\n+! Contributed by G.Steinmetz\n+\n+module m\n+  implicit none\n+contains\n+  function f()\n+    real, pointer :: f, e\n+    real, target  :: a(2) = [1,2]\n+    f => a(1)\n+    return\n+    entry e()\n+    e => a(2)\n+  end\n+  function g()\n+    complex, pointer :: g,h\n+    complex, target  :: a(2) = [3,4]\n+    g => a(1)\n+    return\n+    entry h()\n+    h => a(2)\n+  end\n+  function f3()\n+    real, allocatable :: f3, e3\n+    allocate (f3, source=1.0)\n+    return\n+    entry e3()\n+    allocate (e3, source=2.0)\n+  end\n+  function g3()\n+    complex, allocatable :: g3, h3\n+    allocate (g3, source=(3.0,0.0))\n+    return\n+    entry h3()\n+    allocate (h3, source=(4.0,0.0))\n+  end\n+end\n+\n+program p\n+  use m\n+  real,    pointer :: x\n+  complex, pointer :: c\n+  real    :: y\n+  complex :: d\n+  x => f()\n+  if (x /= 1.0) stop 1\n+  x => e()\n+  if (x /= 2.0) stop 2\n+  c => g()\n+  if (c /= (3.0,0.0)) stop 3\n+  c => h()\n+  if (c /= (4.0,0.0)) stop 4\n+  y = f3()\n+  if (y /= 1.0) stop 5\n+  y = e3()\n+  if (y /= 2.0) stop 6\n+  d = g3()\n+  if (d /= (3.0,0.0)) stop 7\n+  d = h3()\n+  if (d /= (4.0,0.0)) stop 8\n+end"}, {"sha": "f1e28fda93570f8d7b819dd38c90396fe3ae14cd", "filename": "gcc/testsuite/gfortran.dg/entry_27.f90", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_27.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_27.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_27.f90?ref=2273fd5a6fdbe8f7da2c0e217c279bcbaaa7df9e", "patch": "@@ -0,0 +1,64 @@\n+! { dg-do run }\n+! { dg-additional-options \"-ff2c\" }\n+!\n+! PR fortran/104312 - ICE in fold_convert_loc with entry, -ff2c: test\n+! Contributed by G.Steinmetz\n+\n+module m\n+  implicit none\n+contains\n+  function f()\n+    real, pointer :: f, e\n+    real, target  :: a(2) = [1,2]\n+    f => a(1)\n+    return\n+    entry e()\n+    e => a(2)\n+  end\n+  function g()\n+    complex, pointer :: g,h\n+    complex, target  :: a(2) = [3,4]\n+    g => a(1)\n+    return\n+    entry h()\n+    h => a(2)\n+  end\n+  function f3()\n+    real, allocatable :: f3, e3\n+    allocate (f3, source=1.0)\n+    return\n+    entry e3()\n+    allocate (e3, source=2.0)\n+  end\n+  function g3()\n+    complex, allocatable :: g3, h3\n+    allocate (g3, source=(3.0,0.0))\n+    return\n+    entry h3()\n+    allocate (h3, source=(4.0,0.0))\n+  end\n+end\n+\n+program p\n+  use m\n+  real,    pointer :: x\n+  complex, pointer :: c\n+  real    :: y\n+  complex :: d\n+  x => f()\n+  if (x /= 1.0) stop 1\n+  x => e()\n+  if (x /= 2.0) stop 2\n+  c => g()\n+  if (c /= (3.0,0.0)) stop 3\n+  c => h()\n+  if (c /= (4.0,0.0)) stop 4\n+  y = f3()\n+  if (y /= 1.0) stop 5\n+  y = e3()\n+  if (y /= 2.0) stop 6\n+  d = g3()\n+  if (d /= (3.0,0.0)) stop 7\n+  d = h3()\n+  if (d /= (4.0,0.0)) stop 8\n+end"}]}