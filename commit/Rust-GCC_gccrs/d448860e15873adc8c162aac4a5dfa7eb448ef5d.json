{"sha": "d448860e15873adc8c162aac4a5dfa7eb448ef5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ0ODg2MGUxNTg3M2FkYzhjMTYyYWFjNGE1ZGZhN2ViNDQ4ZWY1ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-12-19T01:03:13Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-12-19T01:03:13Z"}, "message": "expmed.c (expand_mult_const): Force operand to constant.\n\n\t* expmed.c (expand_mult_const): Force operand to constant.\n\t* rs6000.c (rs6000_emit_set_const, rs6000_emit_set_long_const): Add\n\tcopy_rtx to arguments.\n\nFrom-SVN: r120037", "tree": {"sha": "890b4d30ea68b1357366c5208fe59e0d265c722e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/890b4d30ea68b1357366c5208fe59e0d265c722e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d448860e15873adc8c162aac4a5dfa7eb448ef5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d448860e15873adc8c162aac4a5dfa7eb448ef5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d448860e15873adc8c162aac4a5dfa7eb448ef5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d448860e15873adc8c162aac4a5dfa7eb448ef5d/comments", "author": null, "committer": null, "parents": [{"sha": "a629c8218e30a6dc8387518dbe6ffccab95f7cb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a629c8218e30a6dc8387518dbe6ffccab95f7cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a629c8218e30a6dc8387518dbe6ffccab95f7cb0"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "5e7bd5ce94b5b89d025414b16303734f8507070e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d448860e15873adc8c162aac4a5dfa7eb448ef5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d448860e15873adc8c162aac4a5dfa7eb448ef5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d448860e15873adc8c162aac4a5dfa7eb448ef5d", "patch": "@@ -1,3 +1,9 @@\n+2006-12-19  Jan Hubicka  <jh@suse.cz>\n+\n+\t* expmed.c (expand_mult_const): Force operand to constant.\n+\t* rs6000.c (rs6000_emit_set_const, rs6000_emit_set_long_const): Add\n+\tcopy_rtx to arguments.\n+\n 2006-12-19  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/spu/spu.h (HANDLE_PRAGMA_PACK_PUSH_POP): Define."}, {"sha": "3b175e373293133eff5549bbacebd34cbc0c9784", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d448860e15873adc8c162aac4a5dfa7eb448ef5d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d448860e15873adc8c162aac4a5dfa7eb448ef5d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d448860e15873adc8c162aac4a5dfa7eb448ef5d", "patch": "@@ -3936,11 +3936,11 @@ rs6000_emit_set_const (rtx dest, enum machine_mode mode,\n     case SImode:\n       result = no_new_pseudos ? dest : gen_reg_rtx (SImode);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, result,\n+      emit_insn (gen_rtx_SET (VOIDmode, copy_rtx (result),\n \t\t\t      GEN_INT (INTVAL (source)\n \t\t\t\t       & (~ (HOST_WIDE_INT) 0xffff))));\n       emit_insn (gen_rtx_SET (VOIDmode, dest,\n-\t\t\t      gen_rtx_IOR (SImode, result,\n+\t\t\t      gen_rtx_IOR (SImode, copy_rtx (result),\n \t\t\t\t\t   GEN_INT (INTVAL (source) & 0xffff))));\n       result = dest;\n       break;\n@@ -3995,7 +3995,7 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n \n       operand1 = operand_subword_force (dest, WORDS_BIG_ENDIAN == 0,\n \t\t\t\t\tDImode);\n-      operand2 = operand_subword_force (dest, WORDS_BIG_ENDIAN != 0,\n+      operand2 = operand_subword_force (copy_rtx (dest), WORDS_BIG_ENDIAN != 0,\n \t\t\t\t\tDImode);\n       emit_move_insn (operand1, GEN_INT (c1));\n       emit_move_insn (operand2, GEN_INT (c2));\n@@ -4030,7 +4030,9 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n \t  else\n \t    emit_move_insn (dest, GEN_INT (ud2 << 16));\n \t  if (ud1 != 0)\n-\t    emit_move_insn (dest, gen_rtx_IOR (DImode, dest, GEN_INT (ud1)));\n+\t    emit_move_insn (copy_rtx (dest),\n+\t\t\t    gen_rtx_IOR (DImode, copy_rtx (dest),\n+\t\t\t\t\t GEN_INT (ud1)));\n \t}\n       else if ((ud4 == 0xffff && (ud3 & 0x8000))\n \t       || (ud4 == 0 && ! (ud3 & 0x8000)))\n@@ -4042,10 +4044,16 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n \t    emit_move_insn (dest, GEN_INT (ud3 << 16));\n \n \t  if (ud2 != 0)\n-\t    emit_move_insn (dest, gen_rtx_IOR (DImode, dest, GEN_INT (ud2)));\n-\t  emit_move_insn (dest, gen_rtx_ASHIFT (DImode, dest, GEN_INT (16)));\n+\t    emit_move_insn (copy_rtx (dest),\n+\t\t\t    gen_rtx_IOR (DImode, copy_rtx (dest),\n+\t\t\t\t\t GEN_INT (ud2)));\n+\t  emit_move_insn (copy_rtx (dest),\n+\t\t\t  gen_rtx_ASHIFT (DImode, copy_rtx (dest),\n+\t\t\t\t\t  GEN_INT (16)));\n \t  if (ud1 != 0)\n-\t    emit_move_insn (dest, gen_rtx_IOR (DImode, dest, GEN_INT (ud1)));\n+\t    emit_move_insn (copy_rtx (dest),\n+\t\t\t    gen_rtx_IOR (DImode, copy_rtx (dest),\n+\t\t\t\t\t GEN_INT (ud1)));\n \t}\n       else\n \t{\n@@ -4056,14 +4064,20 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n \t    emit_move_insn (dest, GEN_INT (ud4 << 16));\n \n \t  if (ud3 != 0)\n-\t    emit_move_insn (dest, gen_rtx_IOR (DImode, dest, GEN_INT (ud3)));\n+\t    emit_move_insn (copy_rtx (dest),\n+\t\t\t    gen_rtx_IOR (DImode, copy_rtx (dest),\n+\t\t\t\t\t GEN_INT (ud3)));\n \n-\t  emit_move_insn (dest, gen_rtx_ASHIFT (DImode, dest, GEN_INT (32)));\n+\t  emit_move_insn (copy_rtx (dest),\n+\t\t\t  gen_rtx_ASHIFT (DImode, copy_rtx (dest),\n+\t\t\t\t\t  GEN_INT (32)));\n \t  if (ud2 != 0)\n-\t    emit_move_insn (dest, gen_rtx_IOR (DImode, dest,\n-\t\t\t\t\t       GEN_INT (ud2 << 16)));\n+\t    emit_move_insn (copy_rtx (dest),\n+\t\t\t    gen_rtx_IOR (DImode, copy_rtx (dest),\n+\t\t\t\t\t GEN_INT (ud2 << 16)));\n \t  if (ud1 != 0)\n-\t    emit_move_insn (dest, gen_rtx_IOR (DImode, dest, GEN_INT (ud1)));\n+\t    emit_move_insn (copy_rtx (dest),\n+\t\t\t    gen_rtx_IOR (DImode, copy_rtx (dest), GEN_INT (ud1)));\n \t}\n     }\n   return dest;\n@@ -4134,8 +4148,8 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n     {\n       emit_move_insn (adjust_address (operands[0], SImode, 0),\n \t\t      adjust_address (operands[1], SImode, 0));\n-      emit_move_insn (adjust_address (operands[0], SImode, 4),\n-\t\t      adjust_address (operands[1], SImode, 4));\n+      emit_move_insn (adjust_address (copy_rtx (operands[0]), SImode, 4),\n+\t\t      adjust_address (copy_rtx (operands[1]), SImode, 4));\n       return;\n     }\n \n@@ -4162,7 +4176,8 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n       if (FP_REGNO_P (regnum) || regnum >= FIRST_PSEUDO_REGISTER)\n \t{\n \t  rtx newreg;\n-\t  newreg = (no_new_pseudos ? operands[1] : gen_reg_rtx (mode));\n+\t  newreg = (no_new_pseudos ? copy_rtx (operands[1])\n+\t\t    : gen_reg_rtx (mode));\n \t  emit_insn (gen_aux_truncdfsf2 (newreg, operands[1]));\n \t  operands[1] = newreg;\n \t}"}, {"sha": "e12fdfbb103464f6eb78a03b2c842e99641992e7", "filename": "gcc/expmed.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d448860e15873adc8c162aac4a5dfa7eb448ef5d/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d448860e15873adc8c162aac4a5dfa7eb448ef5d/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=d448860e15873adc8c162aac4a5dfa7eb448ef5d", "patch": "@@ -2981,10 +2981,9 @@ expand_mult_const (enum machine_mode mode, rtx op0, HOST_WIDE_INT val,\n   int opno;\n   enum machine_mode nmode;\n \n-  /* Avoid referencing memory over and over.\n-     For speed, but also for correctness when mem is volatile.  */\n-  if (MEM_P (op0))\n-    op0 = force_reg (mode, op0);\n+  /* Avoid referencing memory over and over and invalid sharing\n+     on SUBREGs.  */\n+  op0 = force_reg (mode, op0);\n \n   /* ACCUM starts out either as OP0 or as a zero, depending on\n      the first operation.  */\n@@ -3095,7 +3094,8 @@ expand_mult_const (enum machine_mode mode, rtx op0, HOST_WIDE_INT val,\n \n       insn = get_last_insn ();\n       set_unique_reg_note (insn, REG_EQUAL,\n-\t\t\t   gen_rtx_MULT (nmode, tem, GEN_INT (val_so_far)));\n+\t\t\t   gen_rtx_MULT (nmode, tem,\n+\t\t\t\t\t GEN_INT (val_so_far)));\n     }\n \n   if (variant == negate_variant)"}]}