{"sha": "a7eb97ad269b6509bd7b31ca373daea98e4d7e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlYjk3YWQyNjliNjUwOWJkN2IzMWNhMzczZGFlYTk4ZTRkN2U4NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-03T10:39:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-03T10:39:56Z"}, "message": "re PR middle-end/88963 (gcc generates terrible code for vectors of 64+ length which are not natively supported)\n\n2019-05-03  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88963\n\t* tree-ssa-forwprop.c (pass_forwprop::execute): Rewrite\n\tvector loads feeding only BIT_FIELD_REFs to component\n\tloads.  Rewrite stores fed by CONSTRUCTORs to component\n\tstores.\n\n\t* gcc.dg/tree-ssa/ssa-fre-31.c: Disable forwprop.\n\t* gcc.target/i386/pr88963-1.c: New testcase.\n\t* gcc.target/i386/pr88963-2.c: Likewise.\n\nFrom-SVN: r270844", "tree": {"sha": "a29da7cddfeb73ebddf097156d20dfb4b360880c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a29da7cddfeb73ebddf097156d20dfb4b360880c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7eb97ad269b6509bd7b31ca373daea98e4d7e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7eb97ad269b6509bd7b31ca373daea98e4d7e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7eb97ad269b6509bd7b31ca373daea98e4d7e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7a89a659afeaae763761dab0a7fd3f2f7ddcbe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a89a659afeaae763761dab0a7fd3f2f7ddcbe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a89a659afeaae763761dab0a7fd3f2f7ddcbe2"}], "stats": {"total": 169, "additions": 168, "deletions": 1}, "files": [{"sha": "80c34bea46695629a49eaa0813f0ac60ff549e93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7eb97ad269b6509bd7b31ca373daea98e4d7e85", "patch": "@@ -1,3 +1,11 @@\n+2019-05-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88963\n+\t* tree-ssa-forwprop.c (pass_forwprop::execute): Rewrite\n+\tvector loads feeding only BIT_FIELD_REFs to component\n+\tloads.  Rewrite stores fed by CONSTRUCTORs to component\n+\tstores.\n+\n 2019-05-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* opts.h (finish_options): Remove lang_mask argument."}, {"sha": "57a07d167e55670534b02880bae74bdf25574a5d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7eb97ad269b6509bd7b31ca373daea98e4d7e85", "patch": "@@ -1,3 +1,10 @@\n+2019-05-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88963\n+\t* gcc.dg/tree-ssa/ssa-fre-31.c: Disable forwprop.\n+\t* gcc.target/i386/pr88963-1.c: New testcase.\n+\t* gcc.target/i386/pr88963-2.c: Likewise.\n+\n 2019-05-03  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n \n \tPR target/88809"}, {"sha": "3d429ab1538f4dd55cbf3e2cc3604f0eea8dea05", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-31.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-31.c?ref=a7eb97ad269b6509bd7b31ca373daea98e4d7e85", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fdump-tree-fre1-details -fno-tree-forwprop\" } */\n /* { dg-additional-options \"-fno-common\" { target hppa*-*-hpux* } } */\n \n typedef double d128 __attribute__((vector_size(16)));"}, {"sha": "e6f15259e72b89fee4b84af5210f00c8c3d08e3d", "filename": "gcc/testsuite/gcc.target/i386/pr88963-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88963-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88963-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88963-1.c?ref=a7eb97ad269b6509bd7b31ca373daea98e4d7e85", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64 -mavx2 -fdump-tree-optimized\" } */\n+\n+typedef int VInt __attribute__((vector_size(64)));\n+\n+void test(VInt*__restrict a, VInt*__restrict b, \n+\t  VInt*__restrict c)\n+{\n+  *a = *b + *c;\n+}\n+\n+/* Vector loads and stores should be split.  */\n+/* { dg-final { scan-tree-dump-not \"vector\\\\(16\\\\)\" \"optimized\" } } */"}, {"sha": "114f1f5c33c896235489170e025fe626c0999520", "filename": "gcc/testsuite/gcc.target/i386/pr88963-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88963-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88963-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88963-2.c?ref=a7eb97ad269b6509bd7b31ca373daea98e4d7e85", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64 -msse2 -fdump-tree-optimized\" } */\n+\n+typedef int VInt __attribute__((vector_size(64)));\n+\n+void test(VInt*__restrict a, VInt*__restrict b, \n+\t  VInt*__restrict c)\n+{\n+  *a = *b + *c;\n+}\n+\n+/* Vector loads and stores should be split.  */\n+/* { dg-final { scan-tree-dump-not \"vector\\\\(16\\\\)\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"vector\\\\(8\\\\)\" \"optimized\" } } */"}, {"sha": "1553c9e70ac1fd51627f351f75ba2d5f01eb719a", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7eb97ad269b6509bd7b31ca373daea98e4d7e85/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=a7eb97ad269b6509bd7b31ca373daea98e4d7e85", "patch": "@@ -2400,6 +2400,72 @@ pass_forwprop::execute (function *fun)\n \t      else\n \t\tgsi_next (&gsi);\n \t    }\n+\t  else if (TREE_CODE (TREE_TYPE (lhs)) == VECTOR_TYPE\n+\t\t   && TYPE_MODE (TREE_TYPE (lhs)) == BLKmode\n+\t\t   && gimple_assign_load_p (stmt)\n+\t\t   && !gimple_has_volatile_ops (stmt)\n+\t\t   && (TREE_CODE (gimple_assign_rhs1 (stmt))\n+\t\t       != TARGET_MEM_REF)\n+\t\t   && !stmt_can_throw_internal (cfun, stmt))\n+\t    {\n+\t      /* Rewrite loads used only in BIT_FIELD_REF extractions to\n+\t         component-wise loads.  */\n+\t      use_operand_p use_p;\n+\t      imm_use_iterator iter;\n+\t      bool rewrite = true;\n+\t      FOR_EACH_IMM_USE_FAST (use_p, iter, lhs)\n+\t\t{\n+\t\t  gimple *use_stmt = USE_STMT (use_p);\n+\t\t  if (is_gimple_debug (use_stmt))\n+\t\t    continue;\n+\t\t  if (!is_gimple_assign (use_stmt)\n+\t\t      || gimple_assign_rhs_code (use_stmt) != BIT_FIELD_REF)\n+\t\t    {\n+\t\t      rewrite = false;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t      if (rewrite)\n+\t\t{\n+\t\t  gimple *use_stmt;\n+\t\t  FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n+\t\t    {\n+\t\t      if (is_gimple_debug (use_stmt))\n+\t\t\t{\n+\t\t\t  if (gimple_debug_bind_p (use_stmt))\n+\t\t\t    {\n+\t\t\t      gimple_debug_bind_reset_value (use_stmt);\n+\t\t\t      update_stmt (use_stmt);\n+\t\t\t    }\n+\t\t\t  continue;\n+\t\t\t}\n+\n+\t\t      tree bfr = gimple_assign_rhs1 (use_stmt);\n+\t\t      tree new_rhs = fold_build3 (BIT_FIELD_REF,\n+\t\t\t\t\t\t  TREE_TYPE (bfr),\n+\t\t\t\t\t\t  unshare_expr (rhs),\n+\t\t\t\t\t\t  TREE_OPERAND (bfr, 1),\n+\t\t\t\t\t\t  TREE_OPERAND (bfr, 2));\n+\t\t      gimple *new_stmt\n+\t\t\t= gimple_build_assign (gimple_assign_lhs (use_stmt),\n+\t\t\t\t\t       new_rhs);\n+\n+\t\t      location_t loc = gimple_location (use_stmt);\n+\t\t      gimple_set_location (new_stmt, loc);\n+\t\t      gimple_stmt_iterator gsi2 = gsi_for_stmt (use_stmt);\n+\t\t      unlink_stmt_vdef (use_stmt);\n+\t\t      gsi_remove (&gsi2, true);\n+\n+\t\t      gsi_insert_before (&gsi, new_stmt, GSI_SAME_STMT);\n+\t\t    }\n+\n+\t\t  release_defs (stmt);\n+\t\t  gsi_remove (&gsi, true);\n+\t\t}\n+\t      else\n+\t\tgsi_next (&gsi);\n+\t    }\n+\n \t  else if (code == COMPLEX_EXPR)\n \t    {\n \t      /* Rewrite stores of a single-use complex build expression\n@@ -2440,6 +2506,65 @@ pass_forwprop::execute (function *fun)\n \t      else\n \t\tgsi_next (&gsi);\n \t    }\n+\t  else if (code == CONSTRUCTOR\n+\t\t   && VECTOR_TYPE_P (TREE_TYPE (rhs))\n+\t\t   && TYPE_MODE (TREE_TYPE (rhs)) == BLKmode\n+\t\t   && CONSTRUCTOR_NELTS (rhs) > 0\n+\t\t   && (!VECTOR_TYPE_P (TREE_TYPE (CONSTRUCTOR_ELT (rhs, 0)->value))\n+\t\t       || (TYPE_MODE (TREE_TYPE (CONSTRUCTOR_ELT (rhs, 0)->value))\n+\t\t\t   != BLKmode)))\n+\t    {\n+\t      /* Rewrite stores of a single-use vector constructors\n+\t         to component-wise stores if the mode isn't supported.  */\n+\t      use_operand_p use_p;\n+\t      gimple *use_stmt;\n+\t      if (single_imm_use (lhs, &use_p, &use_stmt)\n+\t\t  && gimple_store_p (use_stmt)\n+\t\t  && !gimple_has_volatile_ops (use_stmt)\n+\t\t  && is_gimple_assign (use_stmt)\n+\t\t  && (TREE_CODE (gimple_assign_lhs (use_stmt))\n+\t\t      != TARGET_MEM_REF))\n+\t\t{\n+\t\t  tree elt_t = TREE_TYPE (CONSTRUCTOR_ELT (rhs, 0)->value);\n+\t\t  unsigned HOST_WIDE_INT elt_w\n+\t\t    = tree_to_uhwi (TYPE_SIZE (elt_t));\n+\t\t  unsigned HOST_WIDE_INT n\n+\t\t    = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (rhs)));\n+\t\t  for (unsigned HOST_WIDE_INT bi = 0; bi < n; bi += elt_w)\n+\t\t    {\n+\t\t      unsigned HOST_WIDE_INT ci = bi / elt_w;\n+\t\t      tree new_rhs;\n+\t\t      if (ci < CONSTRUCTOR_NELTS (rhs))\n+\t\t\tnew_rhs = CONSTRUCTOR_ELT (rhs, ci)->value;\n+\t\t      else\n+\t\t\tnew_rhs = build_zero_cst (elt_t);\n+\t\t      tree use_lhs = gimple_assign_lhs (use_stmt);\n+\t\t      tree new_lhs = build3 (BIT_FIELD_REF,\n+\t\t\t\t\t     elt_t,\n+\t\t\t\t\t     unshare_expr (use_lhs),\n+\t\t\t\t\t     bitsize_int (elt_w),\n+\t\t\t\t\t     bitsize_int (bi));\n+\t\t      gimple *new_stmt = gimple_build_assign (new_lhs, new_rhs);\n+\t\t      location_t loc = gimple_location (use_stmt);\n+\t\t      gimple_set_location (new_stmt, loc);\n+\t\t      gimple_set_vuse (new_stmt, gimple_vuse (use_stmt));\n+\t\t      gimple_set_vdef (new_stmt,\n+\t\t\t\t       make_ssa_name (gimple_vop (cfun)));\n+\t\t      SSA_NAME_DEF_STMT (gimple_vdef (new_stmt)) = new_stmt;\n+\t\t      gimple_set_vuse (use_stmt, gimple_vdef (new_stmt));\n+\t\t      gimple_stmt_iterator gsi2 = gsi_for_stmt (use_stmt);\n+\t\t      gsi_insert_before (&gsi2, new_stmt, GSI_SAME_STMT);\n+\t\t    }\n+\t\t  gimple_stmt_iterator gsi2 = gsi_for_stmt (use_stmt);\n+\t\t  unlink_stmt_vdef (use_stmt);\n+\t\t  release_defs (use_stmt);\n+\t\t  gsi_remove (&gsi2, true);\n+\t\t  release_defs (stmt);\n+\t\t  gsi_remove (&gsi, true);\n+\t\t}\n+\t      else\n+\t\tgsi_next (&gsi);\n+\t    }\n \t  else\n \t    gsi_next (&gsi);\n \t}"}]}