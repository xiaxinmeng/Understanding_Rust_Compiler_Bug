{"sha": "36105dbdab0fe4a20682d6d8efc6da7fceccef07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYxMDVkYmRhYjBmZTRhMjA2ODJkNmQ4ZWZjNmRhN2ZjZWNjZWYwNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-09-30T18:28:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-09-30T18:28:53Z"}, "message": "libstdc++/77795 Only declare ::gets for C++98 and C++11\n\n\tPR libstdc++/77795\n\t* acinclude.m4 (GLIBCXX_CHECK_STDIO_PROTO): Use -std=gnu++11 to check\n\tfor gets.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* include/c_global/cstdio [!_GLIBCXX_HAVE_GETS] (gets): Only declare\n\tfor C++98 and C++11.\n\t* include/c_std/cstdio [!_GLIBCXX_HAVE_GETS] (gets): Likewise.\n\t* testsuite/27_io/headers/cstdio/functions_neg.cc: New test.\n\nFrom-SVN: r240672", "tree": {"sha": "8511f47ee755991195e78dd04a9517d9681e2667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8511f47ee755991195e78dd04a9517d9681e2667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36105dbdab0fe4a20682d6d8efc6da7fceccef07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36105dbdab0fe4a20682d6d8efc6da7fceccef07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36105dbdab0fe4a20682d6d8efc6da7fceccef07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36105dbdab0fe4a20682d6d8efc6da7fceccef07/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2861325a9bd0760aa921c0b76554785a9d2a46b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2861325a9bd0760aa921c0b76554785a9d2a46b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2861325a9bd0760aa921c0b76554785a9d2a46b"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "be41539547da0bfba94f22600c77a8b97c4501ad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=36105dbdab0fe4a20682d6d8efc6da7fceccef07", "patch": "@@ -1,5 +1,15 @@\n 2016-09-30  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/77795\n+\t* acinclude.m4 (GLIBCXX_CHECK_STDIO_PROTO): Use -std=gnu++11 to check\n+\tfor gets.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* include/c_global/cstdio [!_GLIBCXX_HAVE_GETS] (gets): Only declare\n+\tfor C++98 and C++11.\n+\t* include/c_std/cstdio [!_GLIBCXX_HAVE_GETS] (gets): Likewise.\n+\t* testsuite/27_io/headers/cstdio/functions_neg.cc: New test.\n+\n \t* doc/xml/manual/intro.xml: Document LWG 2192 changes.\n \t* doc/html/*: Regenerate.\n \t* include/Makefile.am: Add bits/std_abs.h."}, {"sha": "d0ee45fb49b6a7145bd84a2fee08578e1ac71177", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=36105dbdab0fe4a20682d6d8efc6da7fceccef07", "patch": "@@ -2153,6 +2153,10 @@ AC_DEFUN([GLIBCXX_CHECK_STDIO_PROTO], [\n \n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n+  # Use C++11 because a conforming <stdio.h> won't define gets for C++14,\n+  # and we don't need a declaration for C++14 anyway.\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++11\"\n \n   AC_MSG_CHECKING([for gets declaration])\n   AC_CACHE_VAL(glibcxx_cv_gets, [\n@@ -2168,10 +2172,11 @@ AC_DEFUN([GLIBCXX_CHECK_STDIO_PROTO], [\n       )])\n \n   if test $glibcxx_cv_gets = yes; then\n-    AC_DEFINE(HAVE_GETS, 1, [Define if gets is available in <stdio.h>.])\n+    AC_DEFINE(HAVE_GETS, 1, [Define if gets is available in <stdio.h> before C++14.])\n   fi\n   AC_MSG_RESULT($glibcxx_cv_gets)\n \n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   AC_LANG_RESTORE\n ])\n "}, {"sha": "63996709ad49a28d2e4d26d967e84ce51e4f33ea", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=36105dbdab0fe4a20682d6d8efc6da7fceccef07", "patch": "@@ -183,7 +183,7 @@\n /* Define if _Unwind_GetIPInfo is available. */\n #undef HAVE_GETIPINFO\n \n-/* Define if gets is available in <stdio.h>. */\n+/* Define if gets is available in <stdio.h> before C++14. */\n #undef HAVE_GETS\n \n /* Define to 1 if you have the `hypot' function. */"}, {"sha": "09b73b8589123b3404c7574347f6e02f63fc333f", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=36105dbdab0fe4a20682d6d8efc6da7fceccef07", "patch": "@@ -18176,6 +18176,10 @@ ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n+  # Use C++11 because a conforming <stdio.h> won't define gets for C++14,\n+  # and we don't need a declaration for C++14 anyway.\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++11\"\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for gets declaration\" >&5\n $as_echo_n \"checking for gets declaration... \" >&6; }\n@@ -18210,6 +18214,7 @@ $as_echo \"#define HAVE_GETS 1\" >>confdefs.h\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_gets\" >&5\n $as_echo \"$glibcxx_cv_gets\" >&6; }\n \n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'"}, {"sha": "86d524f96a626d231dac925eb3890060f53694de", "filename": "libstdc++-v3/include/c_global/cstdio", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio?ref=36105dbdab0fe4a20682d6d8efc6da7fceccef07", "patch": "@@ -44,7 +44,7 @@\n #ifndef _GLIBCXX_CSTDIO\n #define _GLIBCXX_CSTDIO 1\n \n-#ifndef _GLIBCXX_HAVE_GETS\n+#if __cplusplus <= 201103L && !defined(_GLIBCXX_HAVE_GETS)\n extern \"C\" char* gets (char* __s) __attribute__((__deprecated__));\n #endif\n "}, {"sha": "549004c0a165ee615b16ccaab8e3e454b40d5909", "filename": "libstdc++-v3/include/c_std/cstdio", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio?ref=36105dbdab0fe4a20682d6d8efc6da7fceccef07", "patch": "@@ -44,7 +44,7 @@\n #include <bits/c++config.h>\n #include <stdio.h>\n \n-#ifndef _GLIBCXX_HAVE_GETS\n+#if __cplusplus <= 201103L && !defined(_GLIBCXX_HAVE_GETS)\n extern \"C\" char* gets (char* __s) __attribute__((__deprecated__));\n #endif\n "}, {"sha": "f9e5f86ed3784d00f6b59c0a6a3c91c5e551c689", "filename": "libstdc++-v3/testsuite/27_io/headers/cstdio/functions_neg.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcstdio%2Ffunctions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36105dbdab0fe4a20682d6d8efc6da7fceccef07/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcstdio%2Ffunctions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcstdio%2Ffunctions_neg.cc?ref=36105dbdab0fe4a20682d6d8efc6da7fceccef07", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile  { target c++14 } }\n+\n+// Copyright (C) 2007-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <cstdio>\n+\n+namespace gnu\n+{\n+  using std::gets; // { dg-error \"has not been declared\" }\n+}"}]}