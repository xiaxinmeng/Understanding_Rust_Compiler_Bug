{"sha": "fc6af6e322072f2cbf63d79ae32050db3b08deab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM2YWY2ZTMyMjA3MmYyY2JmNjNkNzlhZTMyMDUwZGIzYjA4ZGVhYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-05T16:21:30Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-05T16:21:30Z"}, "message": "Makefile.in (parse.o): Depend on ggc.h.\n\n\t* Makefile.in (parse.o): Depend on ggc.h.\n\t(decl2.o): Depend on ggc.h.\n\t(init.o): Depend on ggc.h.\n\t* cp-tree.h (init_decl2): Declare.\n\t(cp_parse_init): Likewise.\n\t* decl.c (ggc_p): Define to zero.\n\t(mark_saved_scope): New function.\n\t(init_decl_processing): Call cp_parse_init, and cp_decl2.\n\tRegister GC roots.\n\t(expand_static_init): Add GC roots.\n\t* decl2.c: Include ggc.h.\n\t(init_decl2): New function.\n\t* init.c: Include ggc.h.\n\t(init_init_processing): Add GC roots.\n\t* parse.y: Include ggc.h.\n\t(cp_parse_init): New function.\n\nCo-Authored-By: Bernd Schmidt <bernds@cygnus.co.uk>\nCo-Authored-By: Mark Mitchell <mark@codesourcery.com>\n\nFrom-SVN: r29126", "tree": {"sha": "5f0c5f13fe467ac17975e0c40cdce38e1e3be420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f0c5f13fe467ac17975e0c40cdce38e1e3be420"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc6af6e322072f2cbf63d79ae32050db3b08deab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6af6e322072f2cbf63d79ae32050db3b08deab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6af6e322072f2cbf63d79ae32050db3b08deab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6af6e322072f2cbf63d79ae32050db3b08deab/comments", "author": null, "committer": null, "parents": [{"sha": "a3770a813002ceaedfe097ea46c8ddc09b9c289c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3770a813002ceaedfe097ea46c8ddc09b9c289c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3770a813002ceaedfe097ea46c8ddc09b9c289c"}], "stats": {"total": 137, "additions": 134, "deletions": 3}, "files": [{"sha": "3bb762bcd4d649aceedabc99497b542b063dce8b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc6af6e322072f2cbf63d79ae32050db3b08deab", "patch": "@@ -1,3 +1,24 @@\n+1999-09-05  Richard Henderson  <rth@cygnus.com>\n+            Bernd Schmidt <bernds@cygnus.co.uk>\n+            Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* Makefile.in (parse.o): Depend on ggc.h.\n+\t(decl2.o): Depend on ggc.h.\n+\t(init.o): Depend on ggc.h.\n+\t* cp-tree.h (init_decl2): Declare.\n+\t(cp_parse_init): Likewise.\n+\t* decl.c (ggc_p): Define to zero.\n+\t(mark_saved_scope): New function.\n+\t(init_decl_processing): Call cp_parse_init, and cp_decl2.\n+\tRegister GC roots.\n+\t(expand_static_init): Add GC roots.\n+\t* decl2.c: Include ggc.h.\n+\t(init_decl2): New function.\n+\t* init.c: Include ggc.h.\n+\t(init_init_processing): Add GC roots.\n+\t* parse.y: Include ggc.h.\n+\t(cp_parse_init): New function.\n+\t\n 1999-09-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (init_decl_processing): Set mark_lang_status."}, {"sha": "c01bd5e45f84b59fbacdeb69156406dd066947a4", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=fc6af6e322072f2cbf63d79ae32050db3b08deab", "patch": "@@ -209,7 +209,7 @@ EXPR_H = $(srcdir)/../expr.h ../insn-codes.h\n \n parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \\\n \t$(srcdir)/../except.h $(srcdir)/../output.h $(srcdir)/../system.h \\\n-\t$(srcdir)/../toplev.h\n+\t$(srcdir)/../toplev.h $(srcdir)/../ggc.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n@@ -250,7 +250,8 @@ decl2.o : decl2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   lex.h decl.h $(EXPR_H) $(srcdir)/../except.h \\\n   $(srcdir)/../output.h $(srcdir)/../except.h $(srcdir)/../system.h \\\n   $(srcdir)/../toplev.h $(srcdir)/../dwarf2out.h $(srcdir)/../dwarfout.h \\\n-  $(srcdir)/../../include/splay-tree.h $(srcdir)/../varray.h\n+  $(srcdir)/../../include/splay-tree.h $(srcdir)/../varray.h \\\n+  $(srcdir)/../ggc.h\n typeck2.o : typeck2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   $(srcdir)/../system.h $(srcdir)/../toplev.h\n typeck.o : typeck.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n@@ -263,7 +264,7 @@ call.o : call.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n friend.o : friend.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n   $(srcdir)/../system.h $(srcdir)/../toplev.h\n init.o : init.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n-  $(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h \n+  $(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h $(srcdir)/../ggc.h\n method.o : method.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h \\\n   $(srcdir)/../toplev.h\n cvt.o : cvt.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h decl.h \\"}, {"sha": "cdb93e3ecc665dc92724a6bb0ac6e5a373686d1c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fc6af6e322072f2cbf63d79ae32050db3b08deab", "patch": "@@ -3101,6 +3101,7 @@ extern tree create_implicit_typedef             PROTO((tree, tree));\n extern tree maybe_push_decl                     PROTO((tree));\n \n /* in decl2.c */\n+extern void init_decl2\t\t\t\tPROTO((void));\n extern int check_java_method\t\t\tPROTO((tree));\n extern int lang_decode_option\t\t\tPROTO((int, char **));\n extern tree grok_method_quals\t\t\tPROTO((tree, tree, tree));\n@@ -3161,6 +3162,9 @@ extern tree handle_class_head\t\t\tPROTO((tree, tree, tree));\n extern tree lookup_arg_dependent                PROTO((tree, tree, tree));\n extern void finish_static_data_member_decl      PROTO((tree, tree, tree, int, int));\n \n+/* in parse.y */\n+extern void cp_parse_init\t\t\tPROTO((void));\n+\n /* in errfn.c */\n /* The cp_* functions aren't suitable for ATTRIBUTE_PRINTF. */\n extern void cp_error\t\t\t\tPVPROTO((const char *, ...));"}, {"sha": "5f5e72f24be21274774bfdb945a8c4ac98531b72", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fc6af6e322072f2cbf63d79ae32050db3b08deab", "patch": "@@ -60,6 +60,10 @@ extern tree global_namespace;\n \n extern int (*valid_lang_attribute) PROTO ((tree, tree, tree, tree));\n \n+/* Don't use garbage collection.  */\n+\n+int ggc_p = 0;\n+\n /* Obstack used for remembering local class declarations (like\n    enums and static (const) members.  */\n #include \"stack.h\"\n@@ -2002,6 +2006,8 @@ wrapup_globals_for_namespace (namespace, data)\n }\n \n \f\n+/* Mark ARG (which is really a struct binding_level **) for GC.  */\n+\n static void\n mark_binding_level (arg)\n      void *arg;\n@@ -2447,6 +2453,36 @@ struct saved_scope {\n };\n static struct saved_scope *current_saved_scope;\n \n+/* Mark ARG (which is really a struct saved_scoipe **) for GC.  */\n+\n+static void\n+mark_saved_scope (arg)\n+     void *arg;\n+{\n+  struct saved_scope *t = *(struct saved_scope **)arg;\n+  while (t)\n+    {\n+      mark_binding_level (&t->old_binding_level);\n+      mark_binding_level (&t->class_bindings);\n+      ggc_mark_tree (t->old_bindings);\n+      ggc_mark_tree (t->old_namespace);\n+      ggc_mark_tree (t->class_name);\n+      ggc_mark_tree (t->class_type);\n+      ggc_mark_tree (t->access_specifier);\n+      ggc_mark_tree (t->function_decl);\n+      if (t->lang_base)\n+\tggc_mark_tree (*t->lang_base);\n+      if (t->lang_stack)\n+\tggc_mark_tree (*t->lang_stack);\n+      ggc_mark_tree (t->lang_name);\n+      ggc_mark_tree (t->last_function_parms);\n+      ggc_mark_tree (t->template_parms);\n+      ggc_mark_tree (t->previous_class_type);\n+      ggc_mark_tree (t->previous_class_values);\n+      t = t->prev;\n+    }\n+}\n+\n /* A chain of the binding vecs created by store_bindings.  We create a\n    whole bunch of these during compilation, on permanent_obstack, so we\n    can't just throw them away.  */\n@@ -6207,6 +6243,9 @@ init_decl_processing ()\n   restore_lang_status = &pop_cp_function_context;\n   mark_lang_status = &mark_cp_function_context;\n \n+  cp_parse_init ();\n+  init_decl2 ();\n+\n   /* Create the global per-function variables.  */\n   push_function_context_to (NULL_TREE);\n \n@@ -6660,6 +6699,44 @@ init_decl_processing ()\n      say -fwritable-strings?  */\n   if (flag_writable_strings)\n     flag_const_strings = 0;\n+\n+  /* Add GC roots for all of our global variables.  */\n+  ggc_add_tree_root (c_global_trees, sizeof c_global_trees / sizeof(tree));\n+  ggc_add_tree_root (cp_global_trees, sizeof cp_global_trees / sizeof(tree));\n+  ggc_add_tree_root (&char_type_node, 1);\n+  ggc_add_tree_root (&current_function_decl, 1);\n+  ggc_add_tree_root (&error_mark_node, 1);\n+  ggc_add_tree_root (&integer_type_node, 1);\n+  ggc_add_tree_root (&integer_three_node, 1);\n+  ggc_add_tree_root (&integer_two_node, 1);\n+  ggc_add_tree_root (&integer_one_node, 1);\n+  ggc_add_tree_root (&integer_zero_node, 1);\n+  ggc_add_tree_root (&signed_size_zero_node, 1);\n+  ggc_add_tree_root (&named_labels, 1);\n+  ggc_add_tree_root (&null_pointer_node, 1);\n+  ggc_add_tree_root (&size_one_node, 1);\n+  ggc_add_tree_root (&size_zero_node, 1);\n+  ggc_add_tree_root (&unsigned_type_node, 1);\n+  ggc_add_tree_root (&void_type_node, 1);\n+  ggc_add_root (&global_binding_level, 1, sizeof global_binding_level,\n+\t\tmark_binding_level);\n+  ggc_add_root (&current_saved_scope, 1, sizeof current_saved_scope,\n+\t\t&mark_saved_scope);\n+  ggc_add_tree_root (&static_ctors, 1);\n+  ggc_add_tree_root (&static_dtors, 1);\n+\n+  ggc_add_tree_root (&enum_next_value, 1);\n+  ggc_add_tree_root (&last_function_parms, 1);\n+  ggc_add_tree_root (&last_function_parm_tags, 1);\n+  ggc_add_tree_root (&current_function_return_value, 1);\n+  ggc_add_tree_root (&current_function_parms, 1);\n+  ggc_add_tree_root (&current_function_parm_tags, 1);\n+  ggc_add_tree_root (&error_mark_list, 1);\n+  ggc_add_tree_root (&void_list_node, 1);\n+  ggc_add_tree_root (&global_namespace, 1);\n+  ggc_add_tree_root (&current_namespace, 1);\n+  ggc_add_tree_root (&global_type_node, 1);\n+  ggc_add_tree_root (&anonymous_namespace_name, 1);\n }\n \n /* Function to print any language-specific context for an error message.  */\n@@ -8252,6 +8329,9 @@ expand_static_init (decl, init)\n \t  if (Atexit == 0)\n \t    {\n \t      tree atexit_fndecl, PFV, pfvlist;\n+\n+\t      ggc_add_tree_root (&Atexit, 1);\n+\n \t      /* Remember this information until end of file.  */\n \t      push_obstacks (&permanent_obstack, &permanent_obstack);\n \t      PFV = build_pointer_type (build_function_type"}, {"sha": "76cebf8963a502575b1e120905df300e6bc35de1", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fc6af6e322072f2cbf63d79ae32050db3b08deab", "patch": "@@ -44,6 +44,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"dwarfout.h\"\n #include \"splay-tree.h\"\n #include \"varray.h\"\n+#include \"ggc.h\"\n \n #if USE_CPPLIB\n #include \"cpplib.h\"\n@@ -5267,3 +5268,12 @@ handle_class_head (aggr, scope, id)\n \n   return decl;\n }\n+\n+/* Initialize decl2.c.  */\n+\n+void\n+init_decl2 ()\n+{\n+  ggc_add_tree_root (&decl_namespace_list, 1);\n+  ggc_add_tree_varray_root (&saved_inlines, 1);\n+}"}, {"sha": "e2e082ba5dd51df9074741e9058312e1e1778ff3", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=fc6af6e322072f2cbf63d79ae32050db3b08deab", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"except.h\"\n #include \"expr.h\"\n #include \"toplev.h\"\n+#include \"ggc.h\"\n \n static void expand_aggr_vbase_init_1 PROTO((tree, tree, tree, tree));\n static void construct_virtual_bases PROTO((tree, tree, tree, tree, tree));\n@@ -73,6 +74,10 @@ void init_init_processing ()\n   finish_builtin_type (BI_header_type, \"__new_cookie\", fields,\n \t\t       0, double_type_node);\n   BI_header_size = size_in_bytes (BI_header_type);\n+\n+  ggc_add_tree_root (&current_base_init_list, 1);\n+  ggc_add_tree_root (&current_member_init_list, 1);\n+  ggc_add_tree_root (&minus_one, 1);\n }\n \n /* Subroutine of emit_base_init.  For BINFO, initialize all the"}, {"sha": "bed84abb00de36a441e5b6a272e32236892bd1a1", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6af6e322072f2cbf63d79ae32050db3b08deab/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=fc6af6e322072f2cbf63d79ae32050db3b08deab", "patch": "@@ -42,6 +42,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"except.h\"\n #include \"toplev.h\"\n+#include \"ggc.h\"\n \n /* Since parsers are distinct for each language, put the language string\n    definition here.  (fnf) */\n@@ -335,6 +336,15 @@ parse_decl(declarator, specs_attrs, attributes, initialized, decl)\n \t\t      attributes, prefix_attributes);\n   return sm;\n }\n+\n+void\n+cp_parse_init ()\n+{\n+  ggc_add_tree_root (&current_declspecs, 1);\n+  ggc_add_tree_root (&prefix_attributes, 1);\n+  ggc_add_tree_root (&current_aggr, 1);\n+  ggc_add_tree_root (&current_enum_type, 1);\n+}\n %}\n \f\n %%"}]}