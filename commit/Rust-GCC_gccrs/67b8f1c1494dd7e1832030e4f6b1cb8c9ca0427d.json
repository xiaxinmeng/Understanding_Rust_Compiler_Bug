{"sha": "67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiOGYxYzE0OTRkZDdlMTgzMjAzMGU0ZjZiMWNiOGM5Y2EwNDI3ZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-04-07T12:26:23Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-04-07T12:26:23Z"}, "message": "i386.c (ix86_compare_emitted): Remove.\n\n2009-04-07  Paolo Bonzini  <bonzini@gnu.org>\n\n        * config/i386/i386.c (ix86_compare_emitted): Remove.\n        (ix86_expand_compare, ix86_expand_branch): Handle MODE_CC\n        ix86_compare_op0 like ix86_compare_emitted used to be handled.\n        * config/i386/i386.h (ix86_compare_emitted): Remove.\n        * config/i386/i386.md (stack_protect_test): Set ix86_compare_op0\n        instead of ix86_compare_emitted.\n        * config/i386/sync.md (sync_compare_and_swap_cc): Likewise.\n\nFrom-SVN: r145665", "tree": {"sha": "914800b7eea5389951113beed1ebb3595432ea04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/914800b7eea5389951113beed1ebb3595432ea04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5859bf49d3745d613c621bacf6a06f49fda593e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5859bf49d3745d613c621bacf6a06f49fda593e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5859bf49d3745d613c621bacf6a06f49fda593e"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "1830f9df2556f7f88895f9b1dc2d9256c465a4d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d", "patch": "@@ -1,3 +1,13 @@\n+2009-04-07  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * config/i386/i386.c (ix86_compare_emitted): Remove.\n+        (ix86_expand_compare, ix86_expand_branch): Handle MODE_CC\n+        ix86_compare_op0 like ix86_compare_emitted used to be handled.\n+        * config/i386/i386.h (ix86_compare_emitted): Remove.\n+        * config/i386/i386.md (stack_protect_test): Set ix86_compare_op0\n+        instead of ix86_compare_emitted.\n+        * config/i386/sync.md (sync_compare_and_swap_cc): Likewise.\n+\n 2009-04-07  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config.gcc (sh-*-*): Add sysroot-suffix.h to tm_file."}, {"sha": "d87e853265f7263d311fb55a94dff607c84c3333", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d", "patch": "@@ -1702,7 +1702,6 @@ int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER] =\n \n rtx ix86_compare_op0 = NULL_RTX;\n rtx ix86_compare_op1 = NULL_RTX;\n-rtx ix86_compare_emitted = NULL_RTX;\n \n /* Define parameter passing and return registers.  */\n \n@@ -14271,11 +14270,9 @@ ix86_expand_compare (enum rtx_code code, rtx *second_test, rtx *bypass_test)\n   if (bypass_test)\n     *bypass_test = NULL_RTX;\n \n-  if (ix86_compare_emitted)\n-    {\n-      ret = gen_rtx_fmt_ee (code, VOIDmode, ix86_compare_emitted, const0_rtx);\n-      ix86_compare_emitted = NULL_RTX;\n-    }\n+  if (GET_MODE_CLASS (GET_MODE (ix86_compare_op0)) == MODE_CC)\n+    ret = gen_rtx_fmt_ee (code, VOIDmode, ix86_compare_op0, ix86_compare_op1);\n+\n   else if (SCALAR_FLOAT_MODE_P (GET_MODE (op0)))\n     {\n       gcc_assert (!DECIMAL_FLOAT_MODE_P (GET_MODE (op0)));\n@@ -14304,12 +14301,6 @@ ix86_expand_branch (enum rtx_code code, rtx label)\n {\n   rtx tmp;\n \n-  /* If we have emitted a compare insn, go straight to simple.\n-     ix86_expand_compare won't emit anything if ix86_compare_emitted\n-     is non NULL.  */\n-  if (ix86_compare_emitted)\n-    goto simple;\n-\n   switch (GET_MODE (ix86_compare_op0))\n     {\n     case QImode:\n@@ -14510,7 +14501,11 @@ ix86_expand_branch (enum rtx_code code, rtx label)\n       }\n \n     default:\n-      gcc_unreachable ();\n+      /* If we have already emitted a compare insn, go straight to simple.\n+         ix86_expand_compare won't emit anything if ix86_compare_emitted\n+         is non NULL.  */\n+      gcc_assert (GET_MODE_CLASS (GET_MODE (ix86_compare_op0)) == MODE_CC);\n+      goto simple;\n     }\n }\n "}, {"sha": "1f87d10571b7a773e88f426f7d9691edcd23529c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d", "patch": "@@ -2333,7 +2333,6 @@ extern enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER];\n \n extern rtx ix86_compare_op0;\t/* operand 0 for comparisons */\n extern rtx ix86_compare_op1;\t/* operand 1 for comparisons */\n-extern rtx ix86_compare_emitted;\n \f\n /* To properly truncate FP values into integers, we need to set i387 control\n    word.  We can't emit proper mode switching code before reload, as spills"}, {"sha": "b388cd16bfb5fa4362ab07c92a24f6e49681adab", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d", "patch": "@@ -21954,9 +21954,6 @@\n   \"\"\n {\n   rtx flags = gen_rtx_REG (CCZmode, FLAGS_REG);\n-  ix86_compare_op0 = operands[0];\n-  ix86_compare_op1 = operands[1];\n-  ix86_compare_emitted = flags;\n \n #ifdef TARGET_THREAD_SSP_OFFSET\n   if (TARGET_64BIT)\n@@ -21971,6 +21968,9 @@\n   else\n     emit_insn (gen_stack_protect_test_si (flags, operands[0], operands[1]));\n #endif\n+\n+  ix86_compare_op0 = flags;\n+  ix86_compare_op1 = const0_rtx;\n   emit_jump_insn (gen_beq (operands[2]));\n   DONE;\n })"}, {"sha": "7f92c14b3c52dc3b6c46465105581bfd53d2804c", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=67b8f1c1494dd7e1832030e4f6b1cb8c9ca0427d", "patch": "@@ -168,9 +168,8 @@\n   \"TARGET_CMPXCHG\"\n {\n   operands[4] = gen_rtx_REG (CCZmode, FLAGS_REG);\n-  ix86_compare_op0 = operands[3];\n-  ix86_compare_op1 = NULL;\n-  ix86_compare_emitted = operands[4];\n+  ix86_compare_op0 = operands[4];\n+  ix86_compare_op1 = const0_rtx;\n   if ((<MODE>mode == DImode && !TARGET_64BIT) || <MODE>mode == TImode)\n     {\n       enum machine_mode hmode = <MODE>mode == DImode ? SImode : DImode;"}]}