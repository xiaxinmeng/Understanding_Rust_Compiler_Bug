{"sha": "b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3MDRmYzVmNjhmMWRhM2YwYmQ0OTY3NWE5YmRmODlkMDBiNGFkMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-02-18T00:59:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-02-18T00:59:36Z"}, "message": "* decl.c, tree.c: Fix comment typos.\n\nFrom-SVN: r122081", "tree": {"sha": "32d703b686a19950e6fe907aefebcc7064c84059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32d703b686a19950e6fe907aefebcc7064c84059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3/comments", "author": null, "committer": null, "parents": [{"sha": "ea2c620c644121eb9596d47c182453475f5dc559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2c620c644121eb9596d47c182453475f5dc559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2c620c644121eb9596d47c182453475f5dc559"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "a1f948d8fe97a6d29f6abcd078bb804ec8c4260e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3", "patch": "@@ -1,3 +1,7 @@\n+2007-02-18  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* decl.c, tree.c: Fix comment typos.\n+\n 2007-02-15  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR C++/30158"}, {"sha": "9ad9e3a0ee2292d331fdc57c8658bcaa575ba657", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3", "patch": "@@ -1065,7 +1065,7 @@ warn_extern_redeclared_static (tree newdecl, tree olddecl)\n \n /* NEW_DECL is a redeclaration of OLD_DECL; both are functions or\n    function templates.  If their exception specifications do not\n-   match, issue an a diagnostic.  */\n+   match, issue a diagnostic.  */\n \n static void\n check_redeclaration_exception_specification (tree new_decl,\n@@ -4729,7 +4729,7 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n \t  error (\"elements of array %q#D have incomplete type\", decl);\n \t  return NULL_TREE;\n \t}\n-      /* It is not valid to initialize an a VLA.  */\n+      /* It is not valid to initialize a VLA.  */\n       if (init\n \t  && ((COMPLETE_TYPE_P (type) && !TREE_CONSTANT (TYPE_SIZE (type)))\n \t      || !TREE_CONSTANT (TYPE_SIZE (element_type))))"}, {"sha": "a5fac298007133ccae24eb30b0cae1f2abe48d65", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3", "patch": "@@ -1033,7 +1033,7 @@ build_qualified_name (tree type, tree scope, tree name, bool template_p)\n    function.  If \"f\" is a function or function template, \"f\", \"c->f\",\n    \"c.f\", \"C::f\", and \"f<int>\" will all be considered possibly\n    overloaded functions.  Returns 2 if the function is actually\n-   overloaded, i.e., if it is impossible to know the the type of the\n+   overloaded, i.e., if it is impossible to know the type of the\n    function without performing overload resolution.  */\n  \n int"}]}