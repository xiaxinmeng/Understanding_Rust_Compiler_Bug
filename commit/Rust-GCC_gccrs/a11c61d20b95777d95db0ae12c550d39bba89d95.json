{"sha": "a11c61d20b95777d95db0ae12c550d39bba89d95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExYzYxZDIwYjk1Nzc3ZDk1ZGIwYWUxMmM1NTBkMzliYmE4OWQ5NQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-07-03T13:08:10Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-07-03T13:08:10Z"}, "message": "re PR target/10700 (ICE in copy_to_mode_reg on 64-bit targets)\n\n\n\tPR target/10700\n\t* fold-const.c (extract_muldiv_1): There's nothing that can be done\n\tif the expression is a SAVE_EXPR.\n\n\t* gcc.c-torture/compile/20030703-1.c: New test case.\n\nFrom-SVN: r68877", "tree": {"sha": "90ec82e089b4e9a934a87786055ab19202f526fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90ec82e089b4e9a934a87786055ab19202f526fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a11c61d20b95777d95db0ae12c550d39bba89d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11c61d20b95777d95db0ae12c550d39bba89d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11c61d20b95777d95db0ae12c550d39bba89d95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11c61d20b95777d95db0ae12c550d39bba89d95/comments", "author": null, "committer": null, "parents": [{"sha": "dab66575b48e837d71b2d2363c1b8aea1eb268a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab66575b48e837d71b2d2363c1b8aea1eb268a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dab66575b48e837d71b2d2363c1b8aea1eb268a1"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "1bd44b8d020e34361937ed40fa3131d910781b4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11c61d20b95777d95db0ae12c550d39bba89d95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11c61d20b95777d95db0ae12c550d39bba89d95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a11c61d20b95777d95db0ae12c550d39bba89d95", "patch": "@@ -1,3 +1,9 @@\n+2003-07-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/10700\n+\t* fold-const.c (extract_muldiv_1): There's nothing that can be done\n+\tif the expression is a SAVE_EXPR.\n+\n 2003-07-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/m32r/m32r.c: Fix comment typos."}, {"sha": "c4826c784af919ecfa1fcf3cc393e60e1bf89042", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11c61d20b95777d95db0ae12c550d39bba89d95/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11c61d20b95777d95db0ae12c550d39bba89d95/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a11c61d20b95777d95db0ae12c550d39bba89d95", "patch": "@@ -4150,25 +4150,6 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type)\n \t\t      TREE_OPERAND (t, 1));\n       break;\n \n-    case SAVE_EXPR:\n-      /* If this has not been evaluated and the operand has no side effects,\n-\t we can see if we can do something inside it and make a new one.\n-\t Note that this test is overly conservative since we can do this\n-\t if the only reason it had side effects is that it was another\n-\t similar SAVE_EXPR, but that isn't worth bothering with.  */\n-      if (SAVE_EXPR_RTL (t) == 0 && ! TREE_SIDE_EFFECTS (TREE_OPERAND (t, 0))\n-\t  && 0 != (t1 = extract_muldiv (TREE_OPERAND (t, 0), c, code,\n-\t\t\t\t\twide_type)))\n-\t{\n-\t  t1 = save_expr (t1);\n-\t  if (SAVE_EXPR_PERSISTENT_P (t) && TREE_CODE (t1) == SAVE_EXPR)\n-\t    SAVE_EXPR_PERSISTENT_P (t1) = 1;\n-\t  if (is_pending_size (t))\n-\t    put_pending_size (t1);\n-\t  return t1;\n-\t}\n-      break;\n-\n     case LSHIFT_EXPR:  case RSHIFT_EXPR:\n       /* If the second operand is constant, this is a multiplication\n \t or floor division, by a power of two, so we can treat it that"}, {"sha": "70bc1834e9ab8f76f3f0c08aa6596b85e446a3bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11c61d20b95777d95db0ae12c550d39bba89d95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11c61d20b95777d95db0ae12c550d39bba89d95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a11c61d20b95777d95db0ae12c550d39bba89d95", "patch": "@@ -1,3 +1,8 @@\n+2003-07-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/10700\n+\t* gcc.c-torture/compile/20030703-1.c: New test case.\n+\n 2003-07-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/template/local3.C: Remove extra semicolon."}, {"sha": "4b45f5e574b2bcb76f74620fd288bee6a4534b6b", "filename": "gcc/testsuite/gcc.c-torture/compile/20030703-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11c61d20b95777d95db0ae12c550d39bba89d95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030703-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11c61d20b95777d95db0ae12c550d39bba89d95/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030703-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030703-1.c?ref=a11c61d20b95777d95db0ae12c550d39bba89d95", "patch": "@@ -0,0 +1,10 @@\n+/* Extracted from PR target/10700.  */\n+/* The following code used to cause an ICE on 64-bit targets.  */\n+\n+int SAD_Block(int *);\n+void MBMotionEstimation(int *act_block, int block)\n+{\n+    SAD_Block(act_block + (  (8 * (block == 1 || block == 3))\n+                          + (8 * (block == 2 || block == 3))));\n+}\n+"}]}