{"sha": "b38bab94858f24f15530017dc934a3ec973442ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM4YmFiOTQ4NThmMjRmMTU1MzAwMTdkYzkzNGEzZWM5NzM0NDJjYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-05-01T17:54:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-05-01T17:54:15Z"}, "message": "constraints.md: New.\n\n\t* config/m68k/constraints.md: New.\n\t* config/m68k/m68k.h (REG_CLASS_FROM_LETTER,\n\tCONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P,\n\tEXTRA_CONSTRAINT): Remove.\n\t* config/m68k/m68k.md: Include constraints.md.\n\t* expr.c (expand_expr_real_1): Copy DECL_RTL before using it.\n\nFrom-SVN: r124335", "tree": {"sha": "3c07188d587ad6bf3e787df017d76cbbac1270a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c07188d587ad6bf3e787df017d76cbbac1270a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b38bab94858f24f15530017dc934a3ec973442ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38bab94858f24f15530017dc934a3ec973442ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b38bab94858f24f15530017dc934a3ec973442ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38bab94858f24f15530017dc934a3ec973442ca/comments", "author": null, "committer": null, "parents": [{"sha": "e1f28918efd6b999478fa903e355115aa6e2bff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f28918efd6b999478fa903e355115aa6e2bff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1f28918efd6b999478fa903e355115aa6e2bff8"}], "stats": {"total": 186, "additions": 118, "deletions": 68}, "files": [{"sha": "6eb7ba053cab5f6766a322706be107007bcccd48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38bab94858f24f15530017dc934a3ec973442ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38bab94858f24f15530017dc934a3ec973442ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b38bab94858f24f15530017dc934a3ec973442ca", "patch": "@@ -1,3 +1,12 @@\n+2007-05-01  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/m68k/constraints.md: New.\n+\t* config/m68k/m68k.h (REG_CLASS_FROM_LETTER,\n+\tCONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P,\n+\tEXTRA_CONSTRAINT): Remove.\n+\t* config/m68k/m68k.md: Include constraints.md.\n+\t* expr.c (expand_expr_real_1): Copy DECL_RTL before using it.\n+\n 2007-05-01  Ian Lance Taylor  <iant@google.com>\n \n \tPR tree-optimization/31739"}, {"sha": "17c49893828a668275fc42d03e8b5e3324d0f18a", "filename": "gcc/config/m68k/constraints.md", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38bab94858f24f15530017dc934a3ec973442ca/gcc%2Fconfig%2Fm68k%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38bab94858f24f15530017dc934a3ec973442ca/gcc%2Fconfig%2Fm68k%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fconstraints.md?ref=b38bab94858f24f15530017dc934a3ec973442ca", "patch": "@@ -0,0 +1,107 @@\n+;; Constraint definitions for m68k\n+;; Copyright (C) 2007 Free Software Foundation, Inc.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 2, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+;; Boston, MA 02110-1301, USA.\n+\n+(define_register_constraint \"a\" \"ADDR_REGS\"\n+  \"Address register.\")\n+\n+(define_register_constraint \"d\" \"DATA_REGS\"\n+  \"Data register.\")\n+\n+(define_register_constraint \"f\" \"TARGET_HARD_FLOAT ? FP_REGS : NO_REGS\"\n+  \"Floating point register.\")\n+\n+(define_constraint \"I\"\n+  \"Integer constant in the range 1 @dots 8, for immediate shift counts and addq.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival > 0 && ival <= 8\")))\n+\n+(define_constraint \"J\"\n+  \"Signed 16-bit integer constant.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= -0x8000 && ival <= 0x7fff\")))\n+\n+(define_constraint \"K\"\n+  \"Integer constant that moveq can't handle.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival < -0x80 || ival >= 0x80\")))\n+\n+(define_constraint \"L\"\n+  \"Integer constant in the range -8 @dots -1, for subq.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival < 0 && ival >= -8\")))\n+\n+(define_constraint \"M\"\n+  \"Integer constant that moveq+notb can't handle.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival < -0x100 || ival >= 0x100\")))\n+\n+(define_constraint \"N\"\n+  \"Integer constant in the range 24 @dots 31, for rotatert:SI 8 to 1 expressed as rotate.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 24 && ival <= 31\")))\n+\n+(define_constraint \"O\"\n+  \"Integer constant 16, for rotate using swap.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 16\")))\n+\n+(define_constraint \"P\"\n+  \"Integer constant in the range 8 @dots 15, for rotatert:HI 8 to 1 expressed as rotate.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 8 && ival <= 15\")))\n+\n+(define_constraint \"R\"\n+  \"Integer constant that mov3q can handle.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"valid_mov3q_const (ival)\")))\n+\n+(define_constraint \"G\"\n+  \"Defines all of the floating constants that are *NOT* 68881\n+   constants.  This is so 68881 constants get reloaded and the fpmovecr\n+   is used.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"!(TARGET_68881 && standard_68881_constant_p (op))\")))\n+\n+(define_constraint \"S\"\n+  \"Used for operands that satisfy 'm' when -mpcrel is in effect.\"\n+  (and (match_code \"mem\")\n+       (match_test \"TARGET_PCREL\n+\t\t    && (GET_CODE (XEXP (op, 0)) == SYMBOL_REF\n+\t\t\t|| GET_CODE (XEXP (op, 0)) == LABEL_REF\n+\t\t\t|| GET_CODE (XEXP (op, 0)) == CONST)\")))\n+\n+(define_constraint \"T\"\n+  \"Used for operands that satisfy 's' when -mpcrel is not in effect.\"\n+  (and (match_code \"symbol_ref,label_ref,const\")\n+       (match_test \"!flag_pic\")))\n+\n+(define_memory_constraint \"Q\"\n+  \"Means address register indirect addressing mode.\"\n+  (and (match_code \"mem\")\n+       (match_test \"m68k_matches_q_p (op)\")))\n+\n+(define_constraint \"U\"\n+  \"Used for register offset addressing.\"\n+  (and (match_code \"mem\")\n+       (match_test \"m68k_matches_u_p (op)\")))\n+\n+(define_constraint \"W\"\n+  \"Used for const_call_operands.\"\n+  (match_operand 0 \"const_call_operand\"))"}, {"sha": "baa5bcb66514cf9c9690b3ca698aae32706f9177", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38bab94858f24f15530017dc934a3ec973442ca/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38bab94858f24f15530017dc934a3ec973442ca/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=b38bab94858f24f15530017dc934a3ec973442ca", "patch": "@@ -485,74 +485,6 @@ extern enum reg_class regno_reg_class[];\n #define INDEX_REG_CLASS GENERAL_REGS\n #define BASE_REG_CLASS ADDR_REGS\n \n-/* We do a trick here to modify the effective constraints on the\n-   machine description; we zorch the constraint letters that aren't\n-   appropriate for a specific target.  This allows us to guarantee\n-   that a specific kind of register will not be used for a given target\n-   without fiddling with the register classes above.  */\n-#define REG_CLASS_FROM_LETTER(C) \\\n-  ((C) == 'a' ? ADDR_REGS :\t\t\t\\\n-   ((C) == 'd' ? DATA_REGS :\t\t\t\\\n-    ((C) == 'f' ? (TARGET_HARD_FLOAT ?\t\t\\\n-\t\t   FP_REGS : NO_REGS) :\t\t\\\n-     NO_REGS)))\n-\n-/* For the m68k, `I' is used for the range 1 to 8\n-   allowed as immediate shift counts and in addq.\n-   `J' is used for the range of signed numbers that fit in 16 bits.\n-   `K' is for numbers that moveq can't handle.\n-   `L' is for range -8 to -1, range of values that can be added with subq.\n-   `M' is for numbers that moveq+notb can't handle.\n-   'N' is for range 24 to 31, rotatert:SI 8 to 1 expressed as rotate.\n-   'O' is for 16 (for rotate using swap).\n-   'P' is for range 8 to 15, rotatert:HI 8 to 1 expressed as rotate.\n-   'R' is for numbers that mov3q can handle.  */\n-#define CONST_OK_FOR_LETTER_P(VALUE, C) \\\n-  ((C) == 'I' ? (VALUE) > 0 && (VALUE) <= 8 : \\\n-   (C) == 'J' ? (VALUE) >= -0x8000 && (VALUE) <= 0x7FFF : \\\n-   (C) == 'K' ? (VALUE) < -0x80 || (VALUE) >= 0x80 : \\\n-   (C) == 'L' ? (VALUE) < 0 && (VALUE) >= -8 : \\\n-   (C) == 'M' ? (VALUE) < -0x100 || (VALUE) >= 0x100 : \\\n-   (C) == 'N' ? (VALUE) >= 24 && (VALUE) <= 31 : \\\n-   (C) == 'O' ? (VALUE) == 16 : \\\n-   (C) == 'P' ? (VALUE) >= 8 && (VALUE) <= 15 : \\\n-   (C) == 'R' ? valid_mov3q_const (VALUE) : 0)\n-\n-/* \"G\" defines all of the floating constants that are *NOT* 68881\n-   constants.  This is so 68881 constants get reloaded and the\n-   fpmovecr is used.  */\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  \\\n-  ((C) == 'G' ? ! (TARGET_68881 && standard_68881_constant_p (VALUE)) : 0 )\n-\n-/* `Q' means address register indirect addressing mode.\n-   `S' is for operands that satisfy 'm' when -mpcrel is in effect.\n-   `T' is for operands that satisfy 's' when -mpcrel is not in effect.\n-   `U' is for register offset addressing.\n-   `W' is for const_call_operands.  */\n-#define EXTRA_CONSTRAINT(OP,CODE)\t\t\t\\\n-  ((CODE) == 'S'\t\t\t\t\t\\\n-   ? (TARGET_PCREL\t\t\t\t\t\\\n-      && GET_CODE (OP) == MEM\t\t\t\t\\\n-      && (GET_CODE (XEXP (OP, 0)) == SYMBOL_REF\t\t\\\n-\t  || GET_CODE (XEXP (OP, 0)) == LABEL_REF\t\\\n-\t  || GET_CODE (XEXP (OP, 0)) == CONST))\t\t\\\n-   : \t\t\t\t\t\t\t\\\n-   (CODE) == 'T'\t\t\t\t\t\\\n-   ? (!flag_pic\t\t\t\t\t\t\\\n-      && (GET_CODE (OP) == SYMBOL_REF\t\t\t\\\n-\t  || GET_CODE (OP) == LABEL_REF\t\t\t\\\n-\t  || GET_CODE (OP) == CONST))\t\t\t\\\n-   :\t\t\t\t\t\t\t\\\n-   (CODE) == 'Q'\t\t\t\t\t\\\n-   ? m68k_matches_q_p (OP)\t\t\t\t\\\n-   :\t\t\t\t\t\t\t\\\n-   (CODE) == 'U'\t\t\t\t\t\\\n-   ? m68k_matches_u_p (OP)\t\t\t\t\\\n-   :\t\t\t\t\t\t\t\\\n-   (CODE) == 'W'\t\t\t\t\t\\\n-   ? const_call_operand (OP, VOIDmode)\t\t\t\\\n-   : 0)\n-\n #define PREFERRED_RELOAD_CLASS(X,CLASS) \\\n   m68k_preferred_reload_class (X, CLASS)\n "}, {"sha": "78ddf58f71e7d377921b7c1baca314d91670c2a0", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38bab94858f24f15530017dc934a3ec973442ca/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38bab94858f24f15530017dc934a3ec973442ca/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=b38bab94858f24f15530017dc934a3ec973442ca", "patch": "@@ -135,6 +135,7 @@\n   ])\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \f\n ;; Mode macros for floating point operations.\n ;; Valid floating point modes"}, {"sha": "5a618c983986ab2f4d75e4f9fc5ec6e5ecba7b61", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38bab94858f24f15530017dc934a3ec973442ca/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38bab94858f24f15530017dc934a3ec973442ca/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b38bab94858f24f15530017dc934a3ec973442ca", "patch": "@@ -6968,6 +6968,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n     case RESULT_DECL:\n       decl_rtl = DECL_RTL (exp);\n       gcc_assert (decl_rtl);\n+      decl_rtl = copy_rtx (decl_rtl);\n \n       /* Ensure variable marked as used even if it doesn't go through\n \t a parser.  If it hasn't be used yet, write out an external"}]}