{"sha": "fdf89bf57ced4684503675d29089cbd893fcf85c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmODliZjU3Y2VkNDY4NDUwMzY3NWQyOTA4OWNiZDg5M2ZjZjg1Yw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-02T04:55:00Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-02T04:55:00Z"}, "message": "system.h (DBX_OUTPUT_STANDARD_TYPES): Poison.\n\n\t* system.h (DBX_OUTPUT_STANDARD_TYPES): Poison.\n\t* doc/tm.texi (DBX_OUTPUT_STANDARD_TYPES): Remove.\n\nFrom-SVN: r78744", "tree": {"sha": "296c600965f14557660f1b0e6c500650bdfd7404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/296c600965f14557660f1b0e6c500650bdfd7404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdf89bf57ced4684503675d29089cbd893fcf85c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf89bf57ced4684503675d29089cbd893fcf85c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf89bf57ced4684503675d29089cbd893fcf85c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf89bf57ced4684503675d29089cbd893fcf85c/comments", "author": null, "committer": null, "parents": [{"sha": "0e26895cf293d1772713d09fe0ca660bfc3ec3db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e26895cf293d1772713d09fe0ca660bfc3ec3db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e26895cf293d1772713d09fe0ca660bfc3ec3db"}], "stats": {"total": 67, "additions": 7, "deletions": 60}, "files": [{"sha": "3c698f812bcfaaf634e25ded1c7ee8c4634e5572", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf89bf57ced4684503675d29089cbd893fcf85c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf89bf57ced4684503675d29089cbd893fcf85c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdf89bf57ced4684503675d29089cbd893fcf85c", "patch": "@@ -1,3 +1,8 @@\n+2004-03-01  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* system.h (DBX_OUTPUT_STANDARD_TYPES): Poison.\n+\t* doc/tm.texi (DBX_OUTPUT_STANDARD_TYPES): Remove.\n+\n 2004-03-01  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (gtle_operator): Accept GT and LE."}, {"sha": "1658c27b232ef04b70a1d8f3635dbc373e21f187", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf89bf57ced4684503675d29089cbd893fcf85c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf89bf57ced4684503675d29089cbd893fcf85c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=fdf89bf57ced4684503675d29089cbd893fcf85c", "patch": "@@ -7846,65 +7846,6 @@ to @var{stream}.  @var{function} is the @code{FUNCTION_DECL} node for\n the function.\n @end defmac\n \n-@defmac DBX_OUTPUT_STANDARD_TYPES (@var{syms})\n-Define this macro if you need to control the order of output of the\n-standard data types at the beginning of compilation.  The argument\n-@var{syms} is a @code{tree} which is a chain of all the predefined\n-global symbols, including names of data types.\n-\n-Normally, DBX output starts with definitions of the types for integers\n-and characters, followed by all the other predefined types of the\n-particular language in no particular order.\n-\n-On some machines, it is necessary to output different particular types\n-first.  To do this, define @code{DBX_OUTPUT_STANDARD_TYPES} to output\n-those symbols in the necessary order.  Any predefined types that you\n-don't explicitly output will be output afterward in no particular order.\n-\n-Be careful not to define this macro so that it works only for C@.  There\n-are no global variables to access most of the built-in types, because\n-another language may have another set of types.  The way to output a\n-particular type is to look through @var{syms} to see if you can find it.\n-Here is an example:\n-\n-@smallexample\n-@{\n-  tree decl;\n-  for (decl = syms; decl; decl = TREE_CHAIN (decl))\n-    if (!strcmp (IDENTIFIER_POINTER (DECL_NAME (decl)),\n-                 \"long int\"))\n-      dbxout_symbol (decl);\n-  @dots{}\n-@}\n-@end smallexample\n-\n-@noindent\n-This does nothing if the expected type does not exist.\n-\n-See the function @code{init_decl_processing} in @file{c-decl.c} to find\n-the names to use for all the built-in C types.\n-\n-Here is another way of finding a particular type:\n-\n-@c this is still overfull.  --mew 10feb93\n-@smallexample\n-@{\n-  tree decl;\n-  for (decl = syms; decl; decl = TREE_CHAIN (decl))\n-    if (TREE_CODE (decl) == TYPE_DECL\n-        && (TREE_CODE (TREE_TYPE (decl))\n-            == INTEGER_CST)\n-        && TYPE_PRECISION (TREE_TYPE (decl)) == 16\n-        && TYPE_UNSIGNED (TREE_TYPE (decl)))\n-@group\n-      /* @r{This must be @code{unsigned short}.}  */\n-      dbxout_symbol (decl);\n-  @dots{}\n-@}\n-@end group\n-@end smallexample\n-@end defmac\n-\n @defmac NO_DBX_FUNCTION_END\n Some stabs encapsulation formats (in particular ECOFF), cannot handle the\n @code{.stabs \"\",N_FUN,,0,0,Lscope-function-1} gdb dbx extension construct."}, {"sha": "599435429d9535cf877653b96fa163f463036733", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf89bf57ced4684503675d29089cbd893fcf85c/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf89bf57ced4684503675d29089cbd893fcf85c/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=fdf89bf57ced4684503675d29089cbd893fcf85c", "patch": "@@ -639,7 +639,8 @@ typedef char _Bool;\n \tGIV_SORT_CRITERION MAX_LONG_TYPE_SIZE MAX_LONG_DOUBLE_TYPE_SIZE\t   \\\n \tMAX_WCHAR_TYPE_SIZE GCOV_TYPE_SIZE SHARED_SECTION_ASM_OP\t   \\\n \tFINAL_REG_PARM_STACK_SPACE MAYBE_REG_PARM_STACK_SPACE\t\t   \\\n-\tTRADITIONAL_PIPELINE_INTERFACE DFA_PIPELINE_INTERFACE\n+\tTRADITIONAL_PIPELINE_INTERFACE DFA_PIPELINE_INTERFACE\t\t   \\\n+\tDBX_OUTPUT_STANDARD_TYPES\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}