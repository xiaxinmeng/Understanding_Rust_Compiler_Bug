{"sha": "dc3ba671806b4012bb9a907a2116d0cb5e62eccc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMzYmE2NzE4MDZiNDAxMmJiOWE5MDdhMjExNmQwY2I1ZTYyZWNjYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-10-10T18:28:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-10-10T18:28:25Z"}, "message": "sh.h (PREFERRED_RELOAD_CLASS): Test PIC_ADDR_P instead of PIC_DIRECT_ADDR_P.\n\ngcc/\n\t* config/sh/sh.h (PREFERRED_RELOAD_CLASS): Test PIC_ADDR_P\n\tinstead of PIC_DIRECT_ADDR_P.\n\t(SECONDARY_INPUT_RELOAD_CLASS): Likewise.\n\t(IS_LITERAL_OR_SYMBOLIC_S16_P, IS_LITERAL_OR_SYMBOLIC_U16_P): Delete.\n\t(IS_NON_EXPLICIT_CONSTANT_P): Don't test PIC_OFFSET_P.\n\t(PIC_OFFSET_P): Rename to...\n\t(PCREL_SYMOFF_P): ...this.\n\t(PIC_DIRECT_ADDR_P): Delete.\n\t(MOVI_SHORI_BASE_OPERAND_P): Check PCREL_SYMOFF_P instead of\n\tPIC_OFFSET_P.\n\t(OUTPUT_ADDR_CONST_EXTRA): Don't require unspecs to have a\n\tsingle argument.  Handle UNSPEC_EXTRACT_S16, UNSPEC_EXTRACT_U16,\n\tUNSPEC_SYMOFF and UNSPEC_PCREL_SYMOFF.\n\t* config/sh/sh.c (print_operand): Remove CONST handling.\n\t(unspec_caller_rtx_p): Rewrite to use split_const and check\n\tthe operands of UNSPEC bases.\n\t(fixup_mova): Replace (unspec [(minus A B)] UNSPEC_PIC)\n\twith (unspec [A B] UNSPEC_SYMOFF).\n\t(nonpic_symbol_mentioned_p): Check for UNSPEC_SYMOFF and\n\tUNSPEC_PCREL_SYMOFF.\n\t(sh_secondary_reload): Test PIC_ADDR_P instead of PIC_DIRECT_ADDR_P.\n\t* config/sh/sh.md (UNSPEC_EXTRACT_S16): New unspec.\n\t(UNSPEC_EXTRACT_U16): Likewise.\n\t(UNSPEC_SYMOFF): Likewise.\n\t(UNSPEC_PCREL_SYMOFF): Likewise.\n\t(movsi_const): Use UNSPEC_EXTRACT_*16s to extract 16-bit portions\n\tof constants.\n\t(movsi_const_16bit): Likewise.\n\t(movdi_const, movdi_const_32bit, movdi_const_16bit): Likewise.\n\t(GOTaddr2picreg): Replace (unspec [(minus A (minus B pc))] UNSPEC_PIC)\n\twith (unspec [A B] UNSPEC_PCREL_SYMOFF).\n\t(sym_label2reg): Replace (minus (const (unspec [A] UNSPEC_PIC)) B)\n\twith (unspec [A B] UNSPEC_SYMOFF).\n\t(symPLT_label2reg): Replace (minus A (minus B pc)) with\n\t (unspec [A B] PCREL_UNSPEC_SYMOFF).\n\t* config/sh/constraints.md (Css): Check for an UNSPEC_EXTRACT_S16.\n\t(Csu): Likewise UNSPEC_EXTRACT_U16.\n\t(Csy): Test PIC_ADDR_P instead of PIC_DIRECT_ADDR_P.\n\t(Cpg): Update after changes to IS_NON_EXPLICIT_CONSTANT_P.\n\nFrom-SVN: r141046", "tree": {"sha": "c77425c337dcddd03e29bdc90005e382a62b34e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c77425c337dcddd03e29bdc90005e382a62b34e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc3ba671806b4012bb9a907a2116d0cb5e62eccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3ba671806b4012bb9a907a2116d0cb5e62eccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3ba671806b4012bb9a907a2116d0cb5e62eccc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3ba671806b4012bb9a907a2116d0cb5e62eccc/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbdf56821d76d939438fc91d7b921a387ac4e498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdf56821d76d939438fc91d7b921a387ac4e498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdf56821d76d939438fc91d7b921a387ac4e498"}], "stats": {"total": 333, "additions": 164, "deletions": 169}, "files": [{"sha": "c3c59084ee591e90d7e45df0e01f0a7a1c346aea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3ba671806b4012bb9a907a2116d0cb5e62eccc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3ba671806b4012bb9a907a2116d0cb5e62eccc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc3ba671806b4012bb9a907a2116d0cb5e62eccc", "patch": "@@ -1,3 +1,45 @@\n+2008-10-10  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/sh/sh.h (PREFERRED_RELOAD_CLASS): Test PIC_ADDR_P\n+\tinstead of PIC_DIRECT_ADDR_P.\n+\t(SECONDARY_INPUT_RELOAD_CLASS): Likewise.\n+\t(IS_LITERAL_OR_SYMBOLIC_S16_P, IS_LITERAL_OR_SYMBOLIC_U16_P): Delete.\n+\t(IS_NON_EXPLICIT_CONSTANT_P): Don't test PIC_OFFSET_P.\n+\t(PIC_OFFSET_P): Rename to...\n+\t(PCREL_SYMOFF_P): ...this.\n+\t(PIC_DIRECT_ADDR_P): Delete.\n+\t(MOVI_SHORI_BASE_OPERAND_P): Check PCREL_SYMOFF_P instead of\n+\tPIC_OFFSET_P.\n+\t(OUTPUT_ADDR_CONST_EXTRA): Don't require unspecs to have a\n+\tsingle argument.  Handle UNSPEC_EXTRACT_S16, UNSPEC_EXTRACT_U16,\n+\tUNSPEC_SYMOFF and UNSPEC_PCREL_SYMOFF.\n+\t* config/sh/sh.c (print_operand): Remove CONST handling.\n+\t(unspec_caller_rtx_p): Rewrite to use split_const and check\n+\tthe operands of UNSPEC bases.\n+\t(fixup_mova): Replace (unspec [(minus A B)] UNSPEC_PIC)\n+\twith (unspec [A B] UNSPEC_SYMOFF).\n+\t(nonpic_symbol_mentioned_p): Check for UNSPEC_SYMOFF and\n+\tUNSPEC_PCREL_SYMOFF.\n+\t(sh_secondary_reload): Test PIC_ADDR_P instead of PIC_DIRECT_ADDR_P.\n+\t* config/sh/sh.md (UNSPEC_EXTRACT_S16): New unspec.\n+\t(UNSPEC_EXTRACT_U16): Likewise.\n+\t(UNSPEC_SYMOFF): Likewise.\n+\t(UNSPEC_PCREL_SYMOFF): Likewise.\n+\t(movsi_const): Use UNSPEC_EXTRACT_*16s to extract 16-bit portions\n+\tof constants.\n+\t(movsi_const_16bit): Likewise.\n+\t(movdi_const, movdi_const_32bit, movdi_const_16bit): Likewise.\n+\t(GOTaddr2picreg): Replace (unspec [(minus A (minus B pc))] UNSPEC_PIC)\n+\twith (unspec [A B] UNSPEC_PCREL_SYMOFF).\n+\t(sym_label2reg): Replace (minus (const (unspec [A] UNSPEC_PIC)) B)\n+\twith (unspec [A B] UNSPEC_SYMOFF).\n+\t(symPLT_label2reg): Replace (minus A (minus B pc)) with\n+\t (unspec [A B] PCREL_UNSPEC_SYMOFF).\n+\t* config/sh/constraints.md (Css): Check for an UNSPEC_EXTRACT_S16.\n+\t(Csu): Likewise UNSPEC_EXTRACT_U16.\n+\t(Csy): Test PIC_ADDR_P instead of PIC_DIRECT_ADDR_P.\n+\t(Cpg): Update after changes to IS_NON_EXPLICIT_CONSTANT_P.\n+\n 2008-10-10  Stepan Kasal  <skasal@redhat.com>\n \n \t* gcc/doc/invoke.texi (Optimize Options): Fix typo in examples"}, {"sha": "6b374d1b070c7378ff9a72aa556bce81b6c3a57d", "filename": "gcc/config/sh/constraints.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3ba671806b4012bb9a907a2116d0cb5e62eccc/gcc%2Fconfig%2Fsh%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3ba671806b4012bb9a907a2116d0cb5e62eccc/gcc%2Fconfig%2Fsh%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fconstraints.md?ref=dc3ba671806b4012bb9a907a2116d0cb5e62eccc", "patch": "@@ -27,7 +27,7 @@\n ;;  Csy: label or symbol\n ;;  Cpg: non-explicit constants that can be directly loaded into a general\n ;;       purpose register in PIC code.  like 's' except we don't allow\n-;;       PIC_DIRECT_ADDR_P\n+;;       PIC_ADDR_P\n ;; IJKLMNOP: CONT_INT constants\n ;;  Ixx: signed xx bit\n ;;  J16: 0xffffffff00000000 | 0x00000000ffffffff\n@@ -186,17 +186,19 @@\n (define_constraint \"Css\"\n   \"A signed 16-bit constant, literal or symbolic.\"\n   (and (match_code \"const\")\n-       (match_test \"IS_LITERAL_OR_SYMBOLIC_S16_P (XEXP (op, 0))\")))\n+       (match_test \"GET_CODE (XEXP (op, 0)) == UNSPEC\")\n+       (match_test \"XINT (XEXP (op, 0), 1) == UNSPEC_EXTRACT_S16\")))\n \n (define_constraint \"Csu\"\n   \"An unsigned 16-bit constant, literal or symbolic.\"\n   (and (match_code \"const\")\n-       (match_test \"IS_LITERAL_OR_SYMBOLIC_U16_P (XEXP (op, 0))\")))\n+       (match_test \"GET_CODE (XEXP (op, 0)) == UNSPEC\")\n+       (match_test \"XINT (XEXP (op, 0), 1) == UNSPEC_EXTRACT_U16\")))\n \n (define_constraint \"Csy\"\n   \"A label or a symbol.\"\n   (ior (match_test \"NON_PIC_REFERENCE_P (op)\")\n-       (match_test \"PIC_DIRECT_ADDR_P (op)\")))\n+       (match_test \"PIC_ADDR_P (op)\")))\n \n (define_constraint \"Z\"\n   \"A zero in any shape or form.\"\n@@ -213,7 +215,7 @@\n (define_constraint \"Cpg\"\n   \"A non-explicit constant that can be loaded directly into a general\n    purpose register.  This is like 's' except we don't allow\n-   PIC_DIRECT_ADDR_P.\"\n+   PIC_ADDR_P.\"\n   (match_test \"IS_NON_EXPLICIT_CONSTANT_P (op)\"))\n \n (define_constraint \"Pso\""}, {"sha": "7c0bdd4a72f4ecae71e026e7e62ad16b7275a246", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 17, "deletions": 58, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3ba671806b4012bb9a907a2116d0cb5e62eccc/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3ba671806b4012bb9a907a2116d0cb5e62eccc/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=dc3ba671806b4012bb9a907a2116d0cb5e62eccc", "patch": "@@ -1031,45 +1031,6 @@ print_operand (FILE *stream, rtx x, int code)\n \t  output_address (XEXP (x, 0));\n \t  break;\n \n-\tcase CONST:\n-\t  if (TARGET_SHMEDIA\n-\t      && (GET_CODE (XEXP (x, 0)) == SIGN_EXTEND\n-\t\t  || GET_CODE (XEXP (x, 0)) == ZERO_EXTEND)\n-\t      && (GET_MODE (XEXP (x, 0)) == DImode\n-\t\t  || GET_MODE (XEXP (x, 0)) == SImode)\n-\t      && GET_CODE (XEXP (XEXP (x, 0), 0)) == TRUNCATE\n-\t      && GET_MODE (XEXP (XEXP (x, 0), 0)) == HImode)\n-\t    {\n-\t      rtx val = XEXP (XEXP (XEXP (x, 0), 0), 0);\n-\t      rtx val2 = val;\n-\t      bool nested_expr = false;\n-\n-\t      fputc ('(', stream);\n-\t      if (GET_CODE (val) == ASHIFTRT)\n-\t\t{\n-\t\t  fputc ('(', stream);\n-\t\t  val2 = XEXP (val, 0);\n-\t\t}\n-\t      if (GET_CODE (val2) == CONST\n-\t\t  || GET_RTX_CLASS (GET_CODE (val2)) != RTX_OBJ)\n-\t\t{\n-\t\t  fputc ('(', stream);\n-\t\t  nested_expr = true;\n-\t\t}\n-\t      output_addr_const (stream, val2);\n-\t      if (nested_expr)\n-\t\tfputc (')', stream);\n-\t      if (GET_CODE (val) == ASHIFTRT)\n-\t\t{\n-\t\t  fputs (\" >> \", stream);\n-\t\t  output_addr_const (stream, XEXP (val, 1));\n-\t\t  fputc (')', stream);\n-\t\t}\n-\t      fputs (\" & 65535)\", stream);\n-\t      break;\n-\t    }\n-\n-\t  /* Fall through.  */\n \tdefault:\n \t  if (TARGET_SH1)\n \t    fputc ('#', stream);\n@@ -2191,22 +2152,18 @@ sh_file_start (void)\n static bool\n unspec_caller_rtx_p (rtx pat)\n {\n-  switch (GET_CODE (pat))\n+  rtx base, offset;\n+  int i;\n+\n+  split_const (pat, &base, &offset);\n+  if (GET_CODE (base) == UNSPEC)\n     {\n-    case CONST:\n-      return unspec_caller_rtx_p (XEXP (pat, 0));\n-    case PLUS:\n-    case MINUS:\n-      if (unspec_caller_rtx_p (XEXP (pat, 0)))\n+      if (XINT (base, 1) == UNSPEC_CALLER)\n \treturn true;\n-      return unspec_caller_rtx_p (XEXP (pat, 1));\n-    case UNSPEC:\n-      if (XINT (pat, 1) == UNSPEC_CALLER)\n-\treturn true;\n-    default:\n-      break;\n+      for (i = 0; i < XVECLEN (base, 0); i++)\n+\tif (unspec_caller_rtx_p (XVECEXP (base, 0, i)))\n+\t  return true;\n     }\n-\n   return false;\n }\n \n@@ -3830,7 +3787,7 @@ fixup_mova (rtx mova)\n     {\n       rtx worker = mova;\n       rtx lab = gen_label_rtx ();\n-      rtx wpat, wpat0, wpat1, wsrc, diff;\n+      rtx wpat, wpat0, wpat1, wsrc, target, base, diff;\n \n       do\n \t{\n@@ -3849,9 +3806,9 @@ fixup_mova (rtx mova)\n \t\t\t   XEXP (XVECEXP (wsrc, 0, 2), 0), lab,\n \t\t\t   XEXP (wpat1, 0)));\n       INSN_CODE (worker) = -1;\n-      diff = gen_rtx_MINUS (Pmode, XVECEXP (SET_SRC (PATTERN (mova)), 0, 0),\n-\t\t\t    gen_rtx_LABEL_REF (Pmode, lab));\n-      diff = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, diff), UNSPEC_PIC);\n+      target = XVECEXP (SET_SRC (PATTERN (mova)), 0, 0);\n+      base = gen_rtx_LABEL_REF (Pmode, lab);\n+      diff = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, target, base), UNSPEC_SYMOFF);\n       SET_SRC (PATTERN (mova)) = gen_rtx_CONST (Pmode, diff);\n       INSN_CODE (mova) = -1;\n     }\n@@ -8853,7 +8810,9 @@ nonpic_symbol_mentioned_p (rtx x)\n \t  || XINT (x, 1) == UNSPEC_GOTPLT\n \t  || XINT (x, 1) == UNSPEC_GOTTPOFF\n \t  || XINT (x, 1) == UNSPEC_DTPOFF\n-\t  || XINT (x, 1) == UNSPEC_PLT))\n+\t  || XINT (x, 1) == UNSPEC_PLT\n+\t  || XINT (x, 1) == UNSPEC_SYMOFF\n+\t  || XINT (x, 1) == UNSPEC_PCREL_SYMOFF))\n     return 0;\n \n   fmt = GET_RTX_FORMAT (GET_CODE (x));\n@@ -11224,7 +11183,7 @@ sh_secondary_reload (bool in_p, rtx x, enum reg_class rclass,\n \t  return NO_REGS;\n \t}\n       if (TARGET_SHMEDIA && rclass == GENERAL_REGS\n-          && (GET_CODE (x) == LABEL_REF || PIC_DIRECT_ADDR_P (x)))\n+          && (GET_CODE (x) == LABEL_REF || PIC_ADDR_P (x)))\n         return TARGET_REGS;\n     } /* end of input-only processing.  */\n "}, {"sha": "8b9ec86ceef8e34d33acbd7e58d82ea8d68a2d69", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 55, "deletions": 36, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3ba671806b4012bb9a907a2116d0cb5e62eccc/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3ba671806b4012bb9a907a2116d0cb5e62eccc/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=dc3ba671806b4012bb9a907a2116d0cb5e62eccc", "patch": "@@ -1588,7 +1588,7 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n   ((CLASS) == NO_REGS && TARGET_SHMEDIA \\\n    && (GET_CODE (X) == CONST_DOUBLE \\\n        || GET_CODE (X) == SYMBOL_REF \\\n-       || PIC_DIRECT_ADDR_P (X)) \\\n+       || PIC_ADDR_P (X)) \\\n    ? GENERAL_REGS \\\n    : (CLASS)) \\\n \n@@ -1661,7 +1661,7 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n       && TARGET_SHMEDIA && inqhi_operand ((X), (MODE)))\t\t\t\\\n    ? GENERAL_REGS\t\t\t\t\t\t\t\\\n    : (TARGET_SHMEDIA && (CLASS) == GENERAL_REGS\t\t\t\t\\\n-      && (GET_CODE (X) == LABEL_REF || PIC_DIRECT_ADDR_P (X)))\t\t\\\n+      && (GET_CODE (X) == LABEL_REF || PIC_ADDR_P (X)))\t\t\t\\\n    ? TARGET_REGS\t\t\t\t\t\t\t\\\n    : SECONDARY_INOUT_RELOAD_CLASS((CLASS),(MODE),(X), NO_REGS))\n #endif\n@@ -2288,37 +2288,13 @@ struct sh_args {\n        && GET_CODE (XEXP (XEXP ((OP), 0), 0)) == LABEL_REF\t\t\\\n        && GET_CODE (XEXP (XEXP ((OP), 0), 1)) == CONST_INT))\n \n-#define IS_LITERAL_OR_SYMBOLIC_S16_P(OP)\t\t\t\t\\\n-  (GET_CODE ((OP)) == SIGN_EXTEND\t\t\t\t\t\\\n-   && (GET_MODE ((OP)) == DImode\t\t\t\t\t\\\n-       || GET_MODE ((OP)) == SImode)\t\t\t\t\t\\\n-   && GET_CODE (XEXP ((OP), 0)) == TRUNCATE\t\t\t\t\\\n-   && GET_MODE (XEXP ((OP), 0)) == HImode\t\t\t\t\\\n-   && (MOVI_SHORI_BASE_OPERAND_P (XEXP (XEXP ((OP), 0), 0))\t\t\\\n-       || (GET_CODE (XEXP (XEXP ((OP), 0), 0)) == ASHIFTRT\t\t\\\n-\t   && (MOVI_SHORI_BASE_OPERAND_P\t\t\t\t\\\n-\t       (XEXP (XEXP (XEXP ((OP), 0), 0), 0)))\t\t\t\\\n-\t   && GET_CODE (XEXP (XEXP (XEXP ((OP), 0), 0), 1)) == CONST_INT)))\n-\n-#define IS_LITERAL_OR_SYMBOLIC_U16_P(OP)\t\t\t\t\\\n-  (GET_CODE ((OP)) == ZERO_EXTEND\t\t\t\t\t\\\n-   && (GET_MODE ((OP)) == DImode\t\t\t\t\t\\\n-       || GET_MODE ((OP)) == SImode)\t\t\t\t\t\\\n-   && GET_CODE (XEXP ((OP), 0)) == TRUNCATE\t\t\t\t\\\n-   && GET_MODE (XEXP ((OP), 0)) == HImode\t\t\t\t\\\n-   && (MOVI_SHORI_BASE_OPERAND_P (XEXP (XEXP ((OP), 0), 0))\t\t\\\n-       || (GET_CODE (XEXP (XEXP ((OP), 0), 0)) == ASHIFTRT\t\t\\\n-\t   && (MOVI_SHORI_BASE_OPERAND_P\t\t\t\t\\\n-\t       (XEXP (XEXP (XEXP ((OP), 0), 0), 0)))\t\t\t\\\n-\t   && GET_CODE (XEXP (XEXP (XEXP ((OP), 0), 0), 1)) == CONST_INT)))\n-\n #define IS_NON_EXPLICIT_CONSTANT_P(OP)\t\t\t\t\t\\\n   (CONSTANT_P (OP)\t\t\t\t\t\t\t\\\n    && GET_CODE (OP) != CONST_INT\t\t\t\t\t\\\n    && GET_CODE (OP) != CONST_DOUBLE\t\t\t\t\t\\\n    && (!flag_pic\t\t\t\t\t\t\t\\\n        || (LEGITIMATE_PIC_OPERAND_P (OP)\t\t\t\t\\\n-\t   && (! PIC_ADDR_P (OP) || PIC_OFFSET_P (OP))\t\t\t\\\n+\t   && !PIC_ADDR_P (OP)\t\t\t\t\t\t\\\n \t   && GET_CODE (OP) != LABEL_REF)))\n \n /* Check whether OP is a datalabel unspec.  */\n@@ -2350,13 +2326,10 @@ struct sh_args {\n   (GET_CODE (OP) == CONST && GET_CODE (XEXP ((OP), 0)) == UNSPEC \\\n    && XINT (XEXP ((OP), 0), 1) == UNSPEC_PIC)\n \n-#define PIC_OFFSET_P(OP) \\\n-  (PIC_ADDR_P (OP) \\\n-   && GET_CODE (XVECEXP (XEXP ((OP), 0), 0, 0)) == MINUS \\\n-   && reg_mentioned_p (pc_rtx, XEXP (XVECEXP (XEXP ((OP), 0), 0, 0), 1)))\n-\n-#define PIC_DIRECT_ADDR_P(OP) \\\n-  (PIC_ADDR_P (OP) && GET_CODE (XVECEXP (XEXP ((OP), 0), 0, 0)) != MINUS)\n+#define PCREL_SYMOFF_P(OP) \\\n+  (GET_CODE (OP) == CONST \\\n+   && GET_CODE (XEXP ((OP), 0)) == UNSPEC \\\n+   && XINT (XEXP ((OP), 0), 1) == UNSPEC_PCREL_SYMOFF)\n \n #define NON_PIC_REFERENCE_P(OP) \\\n   (GET_CODE (OP) == LABEL_REF || GET_CODE (OP) == SYMBOL_REF \\\n@@ -2377,7 +2350,7 @@ struct sh_args {\n #define MOVI_SHORI_BASE_OPERAND_P(OP) \\\n   (flag_pic \\\n    ? (GOT_ENTRY_P (OP) || GOTPLT_ENTRY_P (OP)  || GOTOFF_P (OP) \\\n-      || PIC_OFFSET_P (OP)) \\\n+      || PCREL_SYMOFF_P (OP)) \\\n    : NON_PIC_REFERENCE_P (OP))\n \f\n /* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression\n@@ -3106,7 +3079,7 @@ struct sh_args {\n    constants.  Used for PIC-specific UNSPECs.  */\n #define OUTPUT_ADDR_CONST_EXTRA(STREAM, X, FAIL) \\\n   do\t\t\t\t\t\t\t\t\t\\\n-    if (GET_CODE (X) == UNSPEC && XVECLEN ((X), 0) == 1)\t\\\n+    if (GET_CODE (X) == UNSPEC)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tswitch (XINT ((X), 1))\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n@@ -3155,6 +3128,52 @@ struct sh_args {\n \t      assemble_name ((STREAM), name);\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t    break;\t\t\t\t\t\t\t\\\n+\t  case UNSPEC_EXTRACT_S16:\t\t\t\t\t\\\n+\t  case UNSPEC_EXTRACT_U16:\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      rtx val, shift;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t      val = XVECEXP (X, 0, 0);\t\t\t\t\t\\\n+\t      shift = XVECEXP (X, 0, 1);\t\t\t\t\\\n+\t      fputc ('(', STREAM);\t\t\t\t\t\\\n+\t      if (shift != const0_rtx)\t\t\t\t\t\\\n+\t\tfputc ('(', STREAM);\t\t\t\t\t\\\n+\t      if (GET_CODE (val) == CONST\t\t\t\t\\\n+\t\t  || GET_RTX_CLASS (GET_CODE (val)) != RTX_OBJ)\t\t\\\n+\t\t{\t\t\t\t\t\t\t\\\n+\t\t  fputc ('(', STREAM);\t\t\t\t\t\\\n+\t\t  output_addr_const (STREAM, val);\t\t\t\\\n+\t\t  fputc (')', STREAM);\t\t\t\t\t\\\n+\t\t}\t\t\t\t\t\t\t\\\n+\t      else\t\t\t\t\t\t\t\\\n+\t\toutput_addr_const (STREAM, val);\t\t\t\\\n+\t      if (shift != const0_rtx)\t\t\t\t\t\\\n+\t\t{\t\t\t\t\t\t\t\\\n+\t\t  fputs (\" >> \", STREAM);\t\t\t\t\\\n+\t\t  output_addr_const (STREAM, shift);\t\t\t\\\n+\t\t  fputc (')', STREAM);\t\t\t\t\t\\\n+\t\t}\t\t\t\t\t\t\t\\\n+\t      fputs (\" & 65535)\", STREAM);\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+\t  case UNSPEC_SYMOFF:\t\t\t\t\t\t\\\n+\t    output_addr_const (STREAM, XVECEXP (X, 0, 0));\t\t\\\n+\t    fputc ('-', STREAM);\t\t\t\t\t\\\n+\t    if (GET_CODE (XVECEXP (X, 0, 1)) == CONST)\t\t\t\\\n+\t      {\t\t\t\t\t\t\t\t\\\n+\t\tfputc ('(', STREAM);\t\t\t\t\t\\\n+\t\toutput_addr_const (STREAM, XVECEXP (X, 0, 1));\t\t\\\n+\t\tfputc (')', STREAM);\t\t\t\t\t\\\n+\t      }\t\t\t\t\t\t\t\t\\\n+\t    else\t\t\t\t\t\t\t\\\n+\t      output_addr_const (STREAM, XVECEXP (X, 0, 1));\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+\t  case UNSPEC_PCREL_SYMOFF:\t\t\t\t\t\\\n+\t    output_addr_const (STREAM, XVECEXP (X, 0, 0));\t\t\\\n+\t    fputs (\"-(\", STREAM);\t\t\t\t\t\\\n+\t    output_addr_const (STREAM, XVECEXP (X, 0, 1));\t\t\\\n+\t    fputs (\"-.)\", STREAM);\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n \t  default:\t\t\t\t\t\t\t\\\n \t    goto FAIL;\t\t\t\t\t\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\"}, {"sha": "68bb197c07021037db7fb9e0ac482733e84287a5", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 43, "deletions": 70, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3ba671806b4012bb9a907a2116d0cb5e62eccc/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3ba671806b4012bb9a907a2116d0cb5e62eccc/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=dc3ba671806b4012bb9a907a2116d0cb5e62eccc", "patch": "@@ -153,6 +153,17 @@\n   (UNSPEC_SP_TEST\t41)\n   (UNSPEC_MOVUA\t\t42)\n \n+  ;; (unspec [VAL SHIFT] UNSPEC_EXTRACT_S16) computes (short) (VAL >> SHIFT).\n+  ;; UNSPEC_EXTRACT_U16 is the unsigned equivalent.\n+  (UNSPEC_EXTRACT_S16\t43)\n+  (UNSPEC_EXTRACT_U16\t44)\n+\n+  ;; (unspec [TARGET ANCHOR] UNSPEC_SYMOFF) == TARGET - ANCHOR.\n+  (UNSPEC_SYMOFF\t45)\n+\n+  ;; (unspec [OFFSET ANCHOR] UNSPEC_PCREL_SYMOFF) == OFFSET - (ANCHOR - .).\n+  (UNSPEC_PCREL_SYMOFF\t46)\n+\n   ;; These are used with unspec_volatile.\n   (UNSPECV_BLOCKAGE\t0)\n   (UNSPECV_ALIGN\t1)\n@@ -5134,16 +5145,12 @@ label:\n \n (define_expand \"movsi_const\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-\t(const:SI (sign_extend:SI\n-\t\t   (truncate:HI\n-\t\t    (ashiftrt:SI\n-\t\t     (match_operand:DI 1 \"immediate_operand\" \"s\")\n-\t\t     (const_int 16))))))\n+\t(const:SI (unspec:SI [(match_operand:DI 1 \"immediate_operand\" \"s\")\n+\t\t\t      (const_int 16)] UNSPEC_EXTRACT_S16)))\n    (set (match_dup 0)\n \t(ior:SI (ashift:SI (match_dup 0) (const_int 16))\n-\t\t(const:SI\n-\t\t  (zero_extend:SI\n- \t\t   (truncate:HI (match_dup 1))))))]\n+\t\t(const:SI (unspec:SI [(match_dup 1)\n+\t\t\t\t      (const_int 0)] UNSPEC_EXTRACT_U16))))]\n   \"TARGET_SHMEDIA && reload_completed\n    && MOVI_SHORI_BASE_OPERAND_P (operands[1])\"\n   \"\n@@ -5169,9 +5176,8 @@ label:\n \n (define_expand \"movsi_const_16bit\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-\t(const:SI (sign_extend:SI\n-\t\t   (truncate:HI\n-\t\t    (match_operand:DI 1 \"immediate_operand\" \"s\")))))]\n+\t(const:SI (unspec:SI [(match_operand:DI 1 \"immediate_operand\" \"s\")\n+\t\t\t      (const_int 0)] UNSPEC_EXTRACT_S16)))]\n   \"TARGET_SHMEDIA && flag_pic && reload_completed\n    && GET_CODE (operands[1]) == SYMBOL_REF\"\n   \"\")\n@@ -5588,33 +5594,20 @@ label:\n \n (define_expand \"movdi_const\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(const:DI (sign_extend:DI\n-\t\t   (truncate:HI\n-\t\t    (ashiftrt:DI\n-\t\t     (match_operand:DI 1 \"immediate_operand\" \"s\")\n-\t\t     (const_int 48))))))\n+\t(const:DI (unspec:DI [(match_operand:DI 1 \"immediate_operand\" \"s\")\n+\t\t  \t      (const_int 48)] UNSPEC_EXTRACT_S16)))\n    (set (match_dup 0)\n \t(ior:DI (ashift:DI (match_dup 0) (const_int 16))\n-\t\t(const:DI\n-\t\t (zero_extend:DI\n-\t\t  (truncate:HI\n-\t\t   (ashiftrt:SI\n-\t\t    (match_dup 1)\n-\t\t    (const_int 32)))))))\n+\t\t(const:DI (unspec:DI [(match_dup 1)\n+\t\t\t\t      (const_int 32)] UNSPEC_EXTRACT_U16))))\n    (set (match_dup 0)\n \t(ior:DI (ashift:DI (match_dup 0) (const_int 16))\n-\t\t(const:DI\n-\t\t (zero_extend:DI\n-\t\t  (truncate:HI\n-\t\t   (ashiftrt:SI\n-\t\t    (match_dup 1)\n-\t\t    (const_int 16)))))))\n+\t\t(const:DI (unspec:DI [(match_dup 1)\n+\t\t\t\t      (const_int 16)] UNSPEC_EXTRACT_U16))))\n    (set (match_dup 0)\n \t(ior:DI (ashift:DI (match_dup 0) (const_int 16))\n-\t\t(const:DI\n-\t\t (zero_extend:DI\n-\t\t  (truncate:HI\n-\t\t   (match_dup 1))))))]\n+\t\t(const:DI (unspec:DI [(match_dup 1)\n+\t\t\t\t      (const_int 0)] UNSPEC_EXTRACT_U16))))]\n   \"TARGET_SHMEDIA64 && reload_completed\n    && MOVI_SHORI_BASE_OPERAND_P (operands[1])\"\n   \"\n@@ -5624,17 +5617,12 @@ label:\n \n (define_expand \"movdi_const_32bit\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(const:DI (sign_extend:DI\n-\t\t   (truncate:HI\n-\t\t    (ashiftrt:DI\n-\t\t     (match_operand:DI 1 \"immediate_operand\" \"s\")\n-\t\t     (const_int 16))))))\n+\t(const:DI (unspec:DI [(match_operand:DI 1 \"immediate_operand\" \"s\")\n+\t\t\t      (const_int 16)] UNSPEC_EXTRACT_S16)))\n    (set (match_dup 0)\n \t(ior:DI (ashift:DI (match_dup 0) (const_int 16))\n-\t\t(const:DI\n-\t\t (zero_extend:DI\n-\t\t  (truncate:HI\n-\t\t   (match_dup 1))))))]\n+\t\t(const:DI (unspec:DI [(match_dup 1)\n+\t\t\t\t      (const_int 0)] UNSPEC_EXTRACT_U16))))]\n   \"TARGET_SHMEDIA32 && reload_completed\n    && MOVI_SHORI_BASE_OPERAND_P (operands[1])\"\n   \"\n@@ -5644,9 +5632,8 @@ label:\n \n (define_expand \"movdi_const_16bit\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(const:DI (sign_extend:DI\n-\t\t   (truncate:HI\n-\t\t    (match_operand:DI 1 \"immediate_operand\" \"s\")))))]\n+\t(const:DI (unspec:DI [(match_operand:DI 1 \"immediate_operand\" \"s\")\n+\t\t\t      (const_int 0)] UNSPEC_EXTRACT_S16)))]\n   \"TARGET_SHMEDIA && flag_pic && reload_completed\n    && GET_CODE (operands[1]) == SYMBOL_REF\"\n   \"\")\n@@ -8724,16 +8711,9 @@ label:\n       rtx insn, equiv;\n \n       equiv = operands[1];\n-      operands[1] = gen_rtx_MINUS (Pmode,\n-\t\t\t\t   operands[1],\n-\t\t\t\t   gen_rtx_CONST\n-\t\t\t\t   (Pmode,\n-\t\t\t\t    gen_rtx_MINUS (Pmode,\n-\t\t\t\t\t\t   gen_rtx_CONST (Pmode,\n-\t\t\t\t\t\t\t\t  lab),\n-\t\t\t\t\t\t   pc_rtx)));\n-      operands[1] = gen_sym2PIC (operands[1]);\n-      PUT_MODE (operands[1], Pmode);\n+      operands[1] = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, operands[1], lab),\n+\t\t\t\t    UNSPEC_PCREL_SYMOFF);\n+      operands[1] = gen_rtx_CONST (Pmode, operands[1]);\n \n       if (Pmode == SImode)\n \t{\n@@ -8819,13 +8799,10 @@ label:\n \n (define_expand \"sym_label2reg\"\n   [(set (match_operand:SI 0 \"\" \"\")\n-\t(const:SI (minus:SI\n-\t\t   (const:SI\n-\t\t    (unspec:SI [(match_operand:SI 1 \"\" \"\")] UNSPEC_PIC))\n-\t\t   (const:SI\n-\t\t    (plus:SI\n-\t\t     (match_operand:SI 2 \"\" \"\")\n-\t\t     (const_int 2))))))]\n+\t(const:SI (unspec:SI [(match_operand:SI 1 \"\" \"\")\n+\t\t\t      (const (plus:SI (match_operand:SI 2 \"\" \"\")\n+\t\t\t\t\t      (const_int 2)))]\n+\t\t\t     UNSPEC_SYMOFF)))]\n   \"TARGET_SH1\" \"\")\n \n (define_expand \"symGOT_load\"\n@@ -8952,15 +8929,11 @@ label:\n \n (define_expand \"symPLT_label2reg\"\n   [(set (match_operand:SI 0 \"\" \"\")\n-\t(const:SI (minus:SI\n-\t\t   (const:SI\n-\t\t    (unspec:SI [(match_operand:SI 1 \"\" \"\")] UNSPEC_PLT))\n-\t\t   (const:SI\n-\t\t    (minus:SI\n-\t\t     (const:SI (plus:SI\n-\t\t\t\t(match_operand:SI 2 \"\" \"\")\n-\t\t\t\t(const_int 2)))\n-\t\t     (const:SI (unspec:SI [(pc)] UNSPEC_PIC)))))))\n+\t(const:SI\n+\t (unspec:SI\n+\t  [(const:SI (unspec:SI [(match_operand:SI 1 \"\" \"\")] UNSPEC_PLT))\n+\t   (const:SI (plus:SI (match_operand:SI 2 \"\" \"\")\n+\t\t\t      (const_int 2)))] UNSPEC_PCREL_SYMOFF)))\n    ;; Even though the PIC register is not really used by the call\n    ;; sequence in which this is expanded, the PLT code assumes the PIC\n    ;; register is set, so we must not skip its initialization.  Since"}]}