{"sha": "6e34d3a39f0ce48e95a2853df4be8d01eb745850", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUzNGQzYTM5ZjBjZTQ4ZTk1YTI4NTNkZjRiZThkMDFlYjc0NTg1MA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-07-17T19:35:04Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-07-17T19:35:04Z"}, "message": "langhooks.h (builtin_function): New langhook.\n\n\t* langhooks.h (builtin_function): New langhook.\n\t* langhooks-def.h (LANG_HOOKS_BUILTIN_FUNCTION): New.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* tree.h (builtin_function): Remove.\n\t* doc/tm.texi: Update.\n\t* c-tree.h (builtin_function): Declare.\n\t* c-common.c, config/alpha/alpha.c, config/arm/arm.c,\n\tconfig/c4x/c4x.c, config/frv/frv.c, config/i386/i386.c,\n\tconfig/ia64/ia64.c, config/iq2000/iq2000.c,\n\tconfig/rs6000/rs6000.c, config/s390/s390.c, config/sh/sh.c,\n\tconfig/stormy16/stormy16.c: All callers of builtin_function\n\tchanged.\n\nada:\n\t* gigi.h (builtin_function): Declare.\n\ncp:\n\t* cp-tree.h (builtin_function): Declare.\n\nfortran:\n\t* trans.h (builtin_function): Declare.\n\njava:\n\t* java-tree.h (builtin_function): Declare.\n\nFrom-SVN: r84878", "tree": {"sha": "da217fba5f52589b72af2ded549bf9b898b28326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da217fba5f52589b72af2ded549bf9b898b28326"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e34d3a39f0ce48e95a2853df4be8d01eb745850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e34d3a39f0ce48e95a2853df4be8d01eb745850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e34d3a39f0ce48e95a2853df4be8d01eb745850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e34d3a39f0ce48e95a2853df4be8d01eb745850/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac83f770155974ae069a59d73303eb7f4f19b827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac83f770155974ae069a59d73303eb7f4f19b827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac83f770155974ae069a59d73303eb7f4f19b827"}], "stats": {"total": 238, "additions": 156, "deletions": 82}, "files": [{"sha": "f71c9050dc3720b2ce98987037a78ec23fcc33c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -1,3 +1,18 @@\n+2004-07-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* langhooks.h (builtin_function): New langhook.\n+\t* langhooks-def.h (LANG_HOOKS_BUILTIN_FUNCTION): New.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* tree.h (builtin_function): Remove.\n+\t* doc/tm.texi: Update.\n+\t* c-tree.h (builtin_function): Declare.\n+\t* c-common.c, config/alpha/alpha.c, config/arm/arm.c,\n+\tconfig/c4x/c4x.c, config/frv/frv.c, config/i386/i386.c,\n+\tconfig/ia64/ia64.c, config/iq2000/iq2000.c,\n+\tconfig/rs6000/rs6000.c, config/s390/s390.c, config/sh/sh.c,\n+\tconfig/stormy16/stormy16.c: All callers of builtin_function\n+\tchanged.\n+\n 2004-07-17  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR target/16556"}, {"sha": "5af5ee3142012e4bd438dc4d8397328bdac41060", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -1,3 +1,7 @@\n+2004-07-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gigi.h (builtin_function): Declare.\n+\n 2004-07-15  Robert Dewar  <dewar@gnat.com>\n \n \t* makegpr.adb, s-secsta.ads, sem_ch3.adb, sem_case.adb: Minor"}, {"sha": "78a2f2b6f7322764bb853abdaf03118473bb0610", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -693,6 +693,10 @@ extern tree fill_vms_descriptor (tree, Entity_Id);\n    should not be allocated in a register.  Return true if successful.  */\n extern bool gnat_mark_addressable (tree);\n \n+/* Implementation of the builtin_function langhook.  */\n+extern tree builtin_function (const char *, tree, int, enum built_in_class,\n+\t\t\t      const char *, tree);\n+\n /* This function is called by the front end to enumerate all the supported\n    modes for the machine.  We pass a function which is called back with\n    the following integer parameters:"}, {"sha": "cc743cc9da82d1a3951f66d51a4e022eadf2cce7", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -3106,7 +3106,8 @@ c_common_nodes_and_builtins (void)\n \tabort ();\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       if (!BOTH_P)\t\t\t\t\t\t\t\\\n-\tdecl = builtin_function (NAME, builtin_types[TYPE], ENUM,\t\\\n+\tdecl = lang_hooks.builtin_function (NAME, builtin_types[TYPE],\t\\\n+\t\t\t\t ENUM,\t\t\t\t\t\\\n \t\t\t\t CLASS,\t\t\t\t\t\\\n \t\t\t\t (FALLBACK_P\t\t\t\t\\\n \t\t\t\t  ? (NAME + strlen (\"__builtin_\"))\t\\\n@@ -3214,12 +3215,14 @@ builtin_function_2 (const char *builtin_name, const char *name,\n   tree decl = NULL_TREE;\n \n   if (builtin_name != 0)\n-    bdecl = builtin_function (builtin_name, builtin_type, function_code,\n-\t\t\t      class, library_name_p ? name : NULL, attrs);\n+    bdecl = lang_hooks.builtin_function (builtin_name, builtin_type,\n+\t\t\t\t\t function_code, class,\n+\t\t\t\t\t library_name_p ? name : NULL, attrs);\n \n   if (name != 0 && !flag_no_builtin && !builtin_function_disabled_p (name)\n       && !(nonansi_p && flag_no_nonansi_builtin))\n-    decl = builtin_function (name, type, function_code, class, NULL, attrs);\n+    decl = lang_hooks.builtin_function (name, type, function_code, class,\n+\t\t\t\t\tNULL, attrs);\n \n   return (bdecl != 0 ? bdecl : decl);\n }"}, {"sha": "7cb69baf41558c93cdae96d1337d44d9bb6d0ac2", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -180,6 +180,8 @@ extern void c_pop_function_context (struct function *);\n extern void push_parm_decl (tree);\n extern tree pushdecl_top_level (tree);\n extern tree set_array_declarator_type (tree, tree, int);\n+extern tree builtin_function (const char *, tree, int, enum built_in_class,\n+\t\t\t      const char *, tree);\n extern void shadow_tag (tree);\n extern void shadow_tag_warned (tree, int);\n extern tree start_enum (tree);"}, {"sha": "102cbb1b2b9b5a92ce807858cd0fb1e97d1e4340", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -6532,17 +6532,17 @@ alpha_init_builtins (void)\n   p = zero_arg_builtins;\n   for (i = 0; i < ARRAY_SIZE (zero_arg_builtins); ++i, ++p)\n     if ((target_flags & p->target_mask) == p->target_mask)\n-      builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n-\t\t\tNULL, NULL_TREE);\n+      lang_hooks.builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n+\t\t\t\t   NULL, NULL_TREE);\n \n   ftype = build_function_type_list (long_integer_type_node,\n \t\t\t\t    long_integer_type_node, NULL_TREE);\n \n   p = one_arg_builtins;\n   for (i = 0; i < ARRAY_SIZE (one_arg_builtins); ++i, ++p)\n     if ((target_flags & p->target_mask) == p->target_mask)\n-      builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n-\t\t\tNULL, NULL_TREE);\n+      lang_hooks.builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n+\t\t\t\t   NULL, NULL_TREE);\n \n   ftype = build_function_type_list (long_integer_type_node,\n \t\t\t\t    long_integer_type_node,\n@@ -6551,18 +6551,18 @@ alpha_init_builtins (void)\n   p = two_arg_builtins;\n   for (i = 0; i < ARRAY_SIZE (two_arg_builtins); ++i, ++p)\n     if ((target_flags & p->target_mask) == p->target_mask)\n-      builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n-\t\t\tNULL, NULL_TREE);\n+      lang_hooks.builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n+\t\t\t\t   NULL, NULL_TREE);\n \n   ftype = build_function_type (ptr_type_node, void_list_node);\n-  builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t    ALPHA_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n-\t\t    NULL, NULL_TREE);\n+  lang_hooks.builtin_function (\"__builtin_thread_pointer\", ftype,\n+\t\t\t       ALPHA_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\t       NULL, NULL_TREE);\n \n   ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n-  builtin_function (\"__builtin_set_thread_pointer\", ftype,\n-\t\t    ALPHA_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n-\t\t    NULL, NULL_TREE);\n+  lang_hooks.builtin_function (\"__builtin_set_thread_pointer\", ftype,\n+\t\t\t       ALPHA_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\t       NULL, NULL_TREE);\n }\n \n /* Expand an expression EXP that calls a built-in function,"}, {"sha": "f342a802453492470d6cdb0410948591bdf6423b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -51,6 +51,7 @@\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"debug.h\"\n+#include \"langhooks.h\"\n \n /* Forward definitions of types.  */\n typedef struct minipool_node    Mnode;\n@@ -11591,7 +11592,8 @@ arm_debugger_arg_offset (int value, rtx addr)\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if ((MASK) & insn_flags)\t\t\t\t\t\t\\\n-        builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL, NULL_TREE);\t\\\n+        lang_hooks.builtin_function ((NAME), (TYPE), (CODE),\t\t\\\n+\t\t\t\t     BUILT_IN_MD, NULL, NULL_TREE);\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "4011a51591aed718fe2c822966affc111a6ae24e", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -50,6 +50,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"langhooks.h\"\n \n rtx smulhi3_libfunc;\n rtx umulhi3_libfunc;\n@@ -4767,41 +4768,52 @@ c4x_init_builtins (void)\n {\n   tree endlink = void_list_node;\n \n-  builtin_function (\"fast_ftoi\",\n-\t\t    build_function_type \n-\t\t    (integer_type_node,\n-\t\t     tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t    C4X_BUILTIN_FIX, BUILT_IN_MD, NULL, NULL_TREE);\n-  builtin_function (\"ansi_ftoi\",\n-\t\t    build_function_type \n-\t\t    (integer_type_node, \n-\t\t     tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t    C4X_BUILTIN_FIX_ANSI, BUILT_IN_MD, NULL, NULL_TREE);\n+  lang_hooks.builtin_function (\"fast_ftoi\",\n+\t\t\t       build_function_type \n+\t\t\t       (integer_type_node,\n+\t\t\t\ttree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t\t   endlink)),\n+\t\t\t       C4X_BUILTIN_FIX, BUILT_IN_MD, NULL, NULL_TREE);\n+  lang_hooks.builtin_function (\"ansi_ftoi\",\n+\t\t\t       build_function_type \n+\t\t\t       (integer_type_node, \n+\t\t\t\ttree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t\t   endlink)),\n+\t\t\t       C4X_BUILTIN_FIX_ANSI, BUILT_IN_MD, NULL,\n+\t\t\t       NULL_TREE);\n   if (TARGET_C3X)\n-    builtin_function (\"fast_imult\",\n-\t\t      build_function_type\n-\t\t      (integer_type_node, \n-\t\t       tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t  tree_cons (NULL_TREE,\n-\t\t\t\t\t     integer_type_node, endlink))),\n-\t\t      C4X_BUILTIN_MPYI, BUILT_IN_MD, NULL, NULL_TREE);\n+    lang_hooks.builtin_function (\"fast_imult\",\n+\t\t\t\t build_function_type\n+\t\t\t\t (integer_type_node, \n+\t\t\t\t  tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t     tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\tinteger_type_node,\n+\t\t\t\t\t\t\tendlink))),\n+\t\t\t\t C4X_BUILTIN_MPYI, BUILT_IN_MD, NULL,\n+\t\t\t\t NULL_TREE);\n   else\n     {\n-      builtin_function (\"toieee\",\n-\t\t        build_function_type \n-\t\t\t(double_type_node,\n-\t\t\t tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t        C4X_BUILTIN_TOIEEE, BUILT_IN_MD, NULL, NULL_TREE);\n-      builtin_function (\"frieee\",\n-\t\t        build_function_type\n-\t\t\t(double_type_node, \n-\t\t\t tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t        C4X_BUILTIN_FRIEEE, BUILT_IN_MD, NULL, NULL_TREE);\n-      builtin_function (\"fast_invf\",\n-\t\t        build_function_type \n-\t\t\t(double_type_node, \n-\t\t\t tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t        C4X_BUILTIN_RCPF, BUILT_IN_MD, NULL, NULL_TREE);\n+      lang_hooks.builtin_function (\"toieee\",\n+\t\t\t\t   build_function_type \n+\t\t\t\t   (double_type_node,\n+\t\t\t\t    tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t\t       endlink)),\n+\t\t\t\t   C4X_BUILTIN_TOIEEE, BUILT_IN_MD, NULL,\n+\t\t\t\t   NULL_TREE);\n+      lang_hooks.builtin_function (\"frieee\",\n+\t\t\t\t   build_function_type\n+\t\t\t\t   (double_type_node, \n+\t\t\t\t    tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t\t       endlink)),\n+\t\t\t\t   C4X_BUILTIN_FRIEEE, BUILT_IN_MD, NULL,\n+\t\t\t\t   NULL_TREE);\n+      lang_hooks.builtin_function (\"fast_invf\",\n+\t\t\t\t   build_function_type \n+\t\t\t\t   (double_type_node, \n+\t\t\t\t    tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t\t       endlink)),\n+\t\t\t\t   C4X_BUILTIN_RCPF, BUILT_IN_MD, NULL,\n+\t\t\t\t   NULL_TREE);\n     }\n }\n "}, {"sha": "d9355408110253022b6010b483256b21bed3205b", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -50,6 +50,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"target-def.h\"\n #include \"targhooks.h\"\n #include \"integrate.h\"\n+#include \"langhooks.h\"\n \n #ifndef FRV_INLINE\n #define FRV_INLINE inline\n@@ -8888,7 +8889,7 @@ frv_pack_insns (void)\n \n \f\n #define def_builtin(name, type, code) \\\n-  builtin_function ((name), (type), (code), BUILT_IN_MD, NULL, NULL)\n+  lang_hooks.builtin_function ((name), (type), (code), BUILT_IN_MD, NULL, NULL)\n \n struct builtin_description\n {"}, {"sha": "b8aa661fdafadbd2a155f3d04f88a7306cf9012d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -12665,12 +12665,12 @@ x86_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n #endif\n }\n \f\n-#define def_builtin(MASK, NAME, TYPE, CODE)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  if ((MASK) & target_flags\t\t\t\t\t\\\n-      && (!((MASK) & MASK_64BIT) || TARGET_64BIT))\t\t\\\n-    builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n-\t\t      NULL, NULL_TREE);\t\t\t\t\\\n+#define def_builtin(MASK, NAME, TYPE, CODE)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if ((MASK) & target_flags\t\t\t\t\t\t\\\n+      && (!((MASK) & MASK_64BIT) || TARGET_64BIT))\t\t\t\\\n+    lang_hooks.builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n+\t\t\t\t NULL, NULL_TREE);\t\t\t\\\n } while (0)\n \n struct builtin_description"}, {"sha": "bee9720d443b84f287ad175359bd4c15b8a37145", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -8184,8 +8184,9 @@ ia64_init_builtins (void)\n     (*lang_hooks.types.register_builtin_type) (long_double_type_node,\n \t\t\t\t\t       \"__float128\");\n \n-#define def_builtin(name, type, code) \\\n-  builtin_function ((name), (type), (code), BUILT_IN_MD, NULL, NULL_TREE)\n+#define def_builtin(name, type, code)\t\t\t\t\t\\\n+  lang_hooks.builtin_function ((name), (type), (code), BUILT_IN_MD,\t\\\n+\t\t\t       NULL, NULL_TREE)\n \n   def_builtin (\"__sync_val_compare_and_swap_si\", si_ftype_psi_si_si,\n \t       IA64_BUILTIN_VAL_COMPARE_AND_SWAP_SI);"}, {"sha": "b2156d678a6655ab6643c709bcb698aa7d041a95", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -45,6 +45,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"debug.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"langhooks.h\"\n \n /* Enumeration for all of the relational tests, so that we can build\n    arrays indexed by the test type, and not worry about the order\n@@ -2690,8 +2691,9 @@ iq2000_output_conditional_branch (rtx insn, rtx * operands, int two_operands_p,\n   return 0;\n }\n \n-#define def_builtin(NAME, TYPE, CODE) \\\n-  builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL, NULL_TREE)\n+#define def_builtin(NAME, TYPE, CODE)\t\t\t\t\t\\\n+  lang_hooks.builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n+\t\t\t       NULL, NULL_TREE)\n \n static void\n iq2000_init_builtins (void)"}, {"sha": "e81e1b379009c535fda4019bc4a96a34007df71b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -5618,11 +5618,11 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n \n /* Builtins.  */\n \n-#define def_builtin(MASK, NAME, TYPE, CODE)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  if ((MASK) & target_flags)\t\t\t\t\t\\\n-    builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n-\t\t      NULL, NULL_TREE);\t\t\t\t\\\n+#define def_builtin(MASK, NAME, TYPE, CODE)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if ((MASK) & target_flags)\t\t\t\t\t\t\\\n+    lang_hooks.builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n+\t\t\t\t NULL, NULL_TREE);\t\t\t\\\n } while (0)\n \n /* Simple ternary operations: VECd = foo (VECa, VECb, VECc).  */"}, {"sha": "9de035051e2cea8e0419dcffa9da35175b5b6566", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -6802,14 +6802,14 @@ s390_init_builtins (void)\n   tree ftype;\n \n   ftype = build_function_type (ptr_type_node, void_list_node);\n-  builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t    S390_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n-\t\t    NULL, NULL_TREE);\n+  lang_hooks.builtin_function (\"__builtin_thread_pointer\", ftype,\n+\t\t\t       S390_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\t       NULL, NULL_TREE);\n \n   ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n-  builtin_function (\"__builtin_set_thread_pointer\", ftype,\n-\t\t    S390_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n-\t\t    NULL, NULL_TREE);\n+  lang_hooks.builtin_function (\"__builtin_set_thread_pointer\", ftype,\n+\t\t\t       S390_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\t       NULL, NULL_TREE);\n }\n \n /* Expand an expression EXP that calls a built-in function,"}, {"sha": "d8e3e610f959889175ce081a2300e8b9865c9503", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -9291,8 +9291,8 @@ sh_media_init_builtins (void)\n \t  if (signature < SH_BLTIN_NUM_SHARED_SIGNATURES)\n \t    shared[signature] = type;\n \t}\n-      builtin_function (d->name, type, d - bdesc, BUILT_IN_MD,\n-\t\t\tNULL, NULL_TREE);\n+      lang_hooks.builtin_function (d->name, type, d - bdesc, BUILT_IN_MD,\n+\t\t\t\t   NULL, NULL_TREE);\n     }\n }\n "}, {"sha": "a5ee896ee56b94d7156f029bf0edf0d44753e0a9", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -2109,9 +2109,9 @@ xstormy16_init_builtins (void)\n \t  else\n \t    args = tree_cons (NULL_TREE, arg, args);\n \t}\n-      builtin_function (s16builtins[i].name,\n-\t\t\tbuild_function_type (ret_type, args),\n-\t\t\ti, BUILT_IN_MD, NULL, NULL);\n+      lang_hooks.builtin_function (s16builtins[i].name,\n+\t\t\t\t   build_function_type (ret_type, args),\n+\t\t\t\t   i, BUILT_IN_MD, NULL, NULL);\n     }\n }\n "}, {"sha": "1e0bec12ccbf61ae95d2083c421eb21027392f8a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -1,3 +1,7 @@\n+2004-07-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* cp-tree.h (builtin_function): Declare.\n+\n 2004-07-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (finish_struct_methods): Remove unncessary code."}, {"sha": "7ed1d5f0de4b2a31a4b93fc26ecfffde64366365", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -3763,6 +3763,8 @@ extern tree declare_global_var                  (tree, tree);\n extern void register_dtor_fn                    (tree);\n extern tmpl_spec_kind current_tmpl_spec_kind    (int);\n extern tree cp_fname_init\t\t\t(const char *, tree *);\n+extern tree builtin_function (const char *, tree, int, enum built_in_class,\n+\t\t\t      const char *, tree);\n extern tree check_elaborated_type_specifier     (enum tag_types, tree, bool);\n extern void warn_extern_redeclared_static (tree, tree);\n extern bool cp_missing_noreturn_ok_p\t\t(tree);"}, {"sha": "ca5c995528727c0f68e5aaa78044b5989b083bfc", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -9110,7 +9110,8 @@ instructions that would otherwise not normally be generated because\n they have no equivalent in the source language (for example, SIMD vector\n instructions or prefetch instructions).\n \n-To create a built-in function, call the function @code{builtin_function}\n+To create a built-in function, call the function\n+@code{lang_hooks.builtin_function}\n which is defined by the language front end.  You can use any type nodes set\n up by @code{build_common_tree_nodes} and @code{build_common_tree_nodes_2};\n only language front ends that use those two functions will call"}, {"sha": "819d7357feabe43913556d2a80045d58a1372af0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -1,3 +1,7 @@\n+2004-07-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* trans.h (builtin_function): Declare.\n+\n 2004-07-16  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/16404"}, {"sha": "9d6473486c28ff2b5f1fd0f647fb524412d45ff4", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -427,6 +427,8 @@ void pushlevel (int);\n tree poplevel (int, int, int);\n tree getdecls (void);\n tree gfc_truthvalue_conversion (tree);\n+tree builtin_function (const char *, tree, int, enum built_in_class,\n+\t\t       const char *, tree);\n \n /* Runtime library function decls.  */\n extern GTY(()) tree gfor_fndecl_internal_malloc;"}, {"sha": "f06412333cb22b16034d126ed740fcc1c46fb511", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -1,3 +1,7 @@\n+2004-07-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* java-tree.h (builtin_function): Declare.\n+\n 2004-07-16  Steven Bosscher  <stevenb@suse.de>\n \n \t* parse.y (java_complete_expand_methods, java_expand_classes): Don't"}, {"sha": "5f33ec5a54d9a2e30356612be44cac7dfc20ee34", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -1355,6 +1355,8 @@ extern void gen_indirect_dispatch_tables (tree type);\n extern int split_qualified_name (tree *left, tree *right, tree source);\n extern int in_same_package (tree, tree);\n \n+extern tree builtin_function (const char *, tree, int, enum built_in_class,\n+\t\t\t      const char *, tree);\n \n #define DECL_FINAL(DECL) DECL_LANG_FLAG_3 (DECL)\n "}, {"sha": "1f7f32c6b76501f778d957fb895e40581f49ff84", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -126,6 +126,7 @@ extern int lhd_gimplify_expr (tree *, tree *, tree *);\n #define LANG_HOOKS_EXPR_SIZE\t\tlhd_expr_size\n #define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p\n+#define LANG_HOOKS_BUILTIN_FUNCTION\tbuiltin_function\n \n #define LANG_HOOKS_FUNCTION_INIT\tlhd_do_nothing_f\n #define LANG_HOOKS_FUNCTION_FINAL\tlhd_do_nothing_f\n@@ -301,6 +302,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_FOR_TYPES_INITIALIZER, \\\n   LANG_HOOKS_GIMPLIFY_EXPR, \\\n   LANG_HOOKS_FOLD_OBJ_TYPE_REF, \\\n+  LANG_HOOKS_BUILTIN_FUNCTION, \\\n }\n \n #endif /* GCC_LANG_HOOKS_DEF_H */"}, {"sha": "349c450a0cd11a72172867117f7ced1843e35812", "filename": "gcc/langhooks.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -407,6 +407,18 @@ struct lang_hooks\n      KNOWN_TYPE carries the true type of the OBJ_TYPE_REF_OBJECT.  */\n   tree (*fold_obj_type_ref) (tree, tree);\n \n+  /* Return a definition for a builtin function named NAME and whose data type\n+     is TYPE.  TYPE should be a function type with argument types.\n+     FUNCTION_CODE tells later passes how to compile calls to this function.\n+     See tree.h for its possible values.\n+\n+     If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n+     the name to be called if we can't opencode the function.  If\n+     ATTRS is nonzero, use that for the function's attribute list.  */\n+  tree (*builtin_function) (const char *name, tree type, int function_code,\n+\t\t\t    enum built_in_class class,\n+\t\t\t    const char *library_name, tree attrs);\n+\n   /* Whenever you add entries here, make sure you adjust langhooks-def.h\n      and langhooks.c accordingly.  */\n };"}, {"sha": "31e117312fa8e2d6b71971dafa66ab00e3fa556f", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e34d3a39f0ce48e95a2853df4be8d01eb745850/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6e34d3a39f0ce48e95a2853df4be8d01eb745850", "patch": "@@ -3306,11 +3306,6 @@ extern GTY(()) tree current_function_func_begin_label;\n    chain of FILE_DECLs; currently only C uses it.  */\n \n extern GTY(()) tree current_file_decl;\n-\n-/* Declare a predefined function.  Return the declaration.  This function is\n-   provided by each language frontend.  */\n-extern tree builtin_function (const char *, tree, int, enum built_in_class,\n-\t\t\t      const char *, tree);\n \f\n /* In tree.c */\n extern unsigned crc32_string (unsigned, const char *);"}]}