{"sha": "9d5321624b105f7f265254568ecab29e330e1ec7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ1MzIxNjI0YjEwNWY3ZjI2NTI1NDU2OGVjYWIyOWUzMzBlMWVjNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-09-19T12:43:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-09-19T12:43:57Z"}, "message": "i386.h (TARGET_GENERIC32, [...]): Remove.\n\n\n\t* i386.h (TARGET_GENERIC32, TARGET_GENERIC64): Remove.\n\t(TARGET_GENERIC): Use PROCESOR_GENERIC\n\t(enum processor_type): Unify generic32 and 64.\n\t* i386.md (cpu): Likewise.\n\t* x86-tune.def (use_leave): Enable for generic32.\n\t(avoid_vector_decode, slow_imul_imm32_mem, slow_imul_imm8): Likewise.\n\t* athlon.md: Change generic64 to generic in all occurences.\n\t* i386-c.c (ix86_target_macros_internal): Unify generic64 and 32.\n\t(ix86_target_macros_internal): Likewise.\n\t* driver-i386.c (host_detect_local_cpu): Likewise.\n\t* i386.c (generic64_memcpy, generic64_memset, generic64_cost): Rename to ..\n\t(generic_memcpy, generic_memset, generic_cost): This one.\n\t(generic32_memcpy, generic32_memset, generic32_cost): Remove.\n\t(m_GENERIC32, m_GENERIC64): Remove.\n\t(m_GENERIC): Turn into one flag.\n\t(processor_target): Unify generic tunnings.\n\t(ix86_option_override_internal): Replace generic32/64 by generic.\n\t(ix86_issue_rate): Likewise.\n\t(ix86_adjust_cost): Likewise.\n\nFrom-SVN: r202741", "tree": {"sha": "eb18a578c739212a182b40864add04db72862e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb18a578c739212a182b40864add04db72862e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d5321624b105f7f265254568ecab29e330e1ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5321624b105f7f265254568ecab29e330e1ec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d5321624b105f7f265254568ecab29e330e1ec7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5321624b105f7f265254568ecab29e330e1ec7/comments", "author": null, "committer": null, "parents": [{"sha": "188c7d00e6feb3946e5610acd68cc19e46a5a8a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188c7d00e6feb3946e5610acd68cc19e46a5a8a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188c7d00e6feb3946e5610acd68cc19e46a5a8a3"}], "stats": {"total": 387, "additions": 147, "deletions": 240}, "files": [{"sha": "3fa40f6e7b9308d20d8bce318e7c70ac69de1fd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d5321624b105f7f265254568ecab29e330e1ec7", "patch": "@@ -1,3 +1,25 @@\n+2013-09-19  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.h (TARGET_GENERIC32, TARGET_GENERIC64): Remove.\n+\t(TARGET_GENERIC): Use PROCESOR_GENERIC\n+\t(enum processor_type): Unify generic32 and 64.\n+\t* i386.md (cpu): Likewise.\n+\t* x86-tune.def (use_leave): Enable for generic32.\n+\t(avoid_vector_decode, slow_imul_imm32_mem, slow_imul_imm8): Likewise.\n+\t* athlon.md: Change generic64 to generic in all occurences.\n+\t* i386-c.c (ix86_target_macros_internal): Unify generic64 and 32.\n+\t(ix86_target_macros_internal): Likewise.\n+\t* driver-i386.c (host_detect_local_cpu): Likewise.\n+\t* i386.c (generic64_memcpy, generic64_memset, generic64_cost): Rename to ..\n+\t(generic_memcpy, generic_memset, generic_cost): This one.\n+\t(generic32_memcpy, generic32_memset, generic32_cost): Remove.\n+\t(m_GENERIC32, m_GENERIC64): Remove.\n+\t(m_GENERIC): Turn into one flag.\n+\t(processor_target): Unify generic tunnings.\n+\t(ix86_option_override_internal): Replace generic32/64 by generic.\n+\t(ix86_issue_rate): Likewise.\n+\t(ix86_adjust_cost): Likewise.\n+\n 2013-09-19  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_create_edge_1): Avoid uninitialized read"}, {"sha": "8bbde33dc1c908a79185daf42dfd6877593834bf", "filename": "gcc/config/i386/athlon.md", "status": "modified", "additions": 93, "deletions": 93, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fathlon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fathlon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fathlon.md?ref=9d5321624b105f7f265254568ecab29e330e1ec7", "patch": "@@ -151,11 +151,11 @@\n \n ;; Jump instructions are executed in the branch unit completely transparent to us\n (define_insn_reservation \"athlon_branch\" 0\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"ibr\"))\n \t\t\t \"athlon-direct,athlon-ieu\")\n (define_insn_reservation \"athlon_call\" 0\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (eq_attr \"type\" \"call,callv\"))\n \t\t\t \"athlon-vector,athlon-ieu\")\n (define_insn_reservation \"athlon_call_amdfam10\" 0\n@@ -166,15 +166,15 @@\n ;; Latency of push operation is 3 cycles, but ESP value is available\n ;; earlier\n (define_insn_reservation \"athlon_push\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"push\"))\n \t\t\t \"athlon-direct,athlon-agu,athlon-store\")\n (define_insn_reservation \"athlon_pop\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (eq_attr \"type\" \"pop\"))\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu\")\n (define_insn_reservation \"athlon_pop_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (eq_attr \"type\" \"pop\"))\n \t\t\t \"athlon-double,(athlon-ieu+athlon-load)\")\n (define_insn_reservation \"athlon_pop_amdfam10\" 3\n@@ -186,13 +186,13 @@\n \t\t\t      (eq_attr \"type\" \"leave\"))\n \t\t\t \"athlon-vector,(athlon-ieu+athlon-load)\")\n (define_insn_reservation \"athlon_leave_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"leave\"))\n \t\t\t \"athlon-double,(athlon-ieu+athlon-load)\")\n \n ;; Lea executes in AGU unit with 2 cycles latency.\n (define_insn_reservation \"athlon_lea\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (eq_attr \"type\" \"lea\"))\n \t\t\t \"athlon-direct,athlon-agu,nothing\")\n ;; Lea executes in AGU unit with 1 cycle latency on AMDFAM10\n@@ -209,13 +209,13 @@\n \t\t\t \"athlon-vector,athlon-ieu0,athlon-mult,nothing,nothing,athlon-ieu0\")\n ;; ??? Widening multiply is vector or double.\n (define_insn_reservation \"athlon_imul_k8_DI\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"imul\")\n \t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n \t\t\t\t\t(eq_attr \"memory\" \"none,unknown\"))))\n \t\t\t \"athlon-direct0,athlon-ieu0,athlon-mult,nothing,athlon-ieu0\")\n (define_insn_reservation \"athlon_imul_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"imul\")\n \t\t\t\t   (eq_attr \"memory\" \"none,unknown\")))\n \t\t\t \"athlon-direct0,athlon-ieu0,athlon-mult,athlon-ieu0\")\n@@ -231,13 +231,13 @@\n \t\t\t\t   (eq_attr \"memory\" \"load,both\")))\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu,athlon-mult,nothing,nothing,athlon-ieu\")\n (define_insn_reservation \"athlon_imul_mem_k8_DI\" 7\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"imul\")\n \t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load,both\"))))\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu,athlon-mult,nothing,athlon-ieu\")\n (define_insn_reservation \"athlon_imul_mem_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"imul\")\n \t\t\t\t   (eq_attr \"memory\" \"load,both\")))\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu,athlon-mult,athlon-ieu\")\n@@ -251,26 +251,26 @@\n ;; Using the same heuristics for amdfam10 as K8 with idiv\n \n (define_insn_reservation \"athlon_idiv\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"idiv\")\n \t\t\t\t   (eq_attr \"memory\" \"none,unknown\")))\n \t\t\t \"athlon-vector,(athlon-ieu0*6+(athlon-fpsched,athlon-fvector))\")\n (define_insn_reservation \"athlon_idiv_mem\" 9\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"idiv\")\n \t\t\t\t   (eq_attr \"memory\" \"load,both\")))\n \t\t\t \"athlon-vector,((athlon-load,athlon-ieu0*6)+(athlon-fpsched,athlon-fvector))\")\n ;; The parallelism of string instructions is not documented.  Model it same way\n ;; as idiv to create smaller automata.  This probably does not matter much.\n ;; Using the same heuristics for amdfam10 as K8 with idiv\n (define_insn_reservation \"athlon_str\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"str\")\n \t\t\t\t   (eq_attr \"memory\" \"load,both,store\")))\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu0*6\")\n \n (define_insn_reservation \"athlon_idirect\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"none,unknown\"))))\n@@ -282,7 +282,7 @@\n \t\t\t\t\t(eq_attr \"memory\" \"none,unknown\"))))\n \t\t\t \"athlon-direct,athlon-ieu\")\n (define_insn_reservation \"athlon_ivector\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"none,unknown\"))))\n@@ -295,13 +295,13 @@\n \t\t\t \"athlon-vector,athlon-ieu,athlon-ieu\")\n \n (define_insn_reservation \"athlon_idirect_loadmov\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"imov\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-load\")\n \n (define_insn_reservation \"athlon_idirect_load\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n@@ -313,7 +313,7 @@\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-load,athlon-ieu\")\n (define_insn_reservation \"athlon_ivector_load\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n@@ -326,13 +326,13 @@\n \t\t\t \"athlon-vector,athlon-load,athlon-ieu,athlon-ieu\")\n \n (define_insn_reservation \"athlon_idirect_movstore\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"imov\")\n \t\t\t\t   (eq_attr \"memory\" \"store\")))\n \t\t\t \"athlon-direct,athlon-agu,athlon-store\")\n \n (define_insn_reservation \"athlon_idirect_both\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"both\"))))\n@@ -349,7 +349,7 @@\n \t\t\t  athlon-store\")\n \n (define_insn_reservation \"athlon_ivector_both\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"both\"))))\n@@ -368,7 +368,7 @@\n \t\t\t  athlon-store\")\n \n (define_insn_reservation \"athlon_idirect_store\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"store\"))))\n@@ -383,7 +383,7 @@\n \t\t\t  athlon-store\")\n \n (define_insn_reservation \"athlon_ivector_store\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t   (and (eq_attr \"unit\" \"integer,unknown\")\n \t\t\t\t\t(eq_attr \"memory\" \"store\"))))\n@@ -405,7 +405,7 @@\n \t\t\t\t\t(eq_attr \"mode\" \"XF\"))))\n \t\t\t \"athlon-vector,athlon-fpload2,athlon-fvector*9\")\n (define_insn_reservation \"athlon_fldxf_k8\" 13\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"fmov\")\n \t\t\t\t   (and (eq_attr \"memory\" \"load\")\n \t\t\t\t\t(eq_attr \"mode\" \"XF\"))))\n@@ -417,7 +417,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fany\")\n (define_insn_reservation \"athlon_fld_k8\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"fmov\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fstore\")\n@@ -429,7 +429,7 @@\n \t\t\t\t\t(eq_attr \"mode\" \"XF\"))))\n \t\t\t \"athlon-vector,(athlon-fpsched+athlon-agu),(athlon-store2+(athlon-fvector*7))\")\n (define_insn_reservation \"athlon_fstxf_k8\" 8\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"fmov\")\n \t\t\t\t   (and (eq_attr \"memory\" \"store,both\")\n \t\t\t\t\t(eq_attr \"mode\" \"XF\"))))\n@@ -440,16 +440,16 @@\n \t\t\t\t   (eq_attr \"memory\" \"store,both\")))\n \t\t\t \"athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)\")\n (define_insn_reservation \"athlon_fst_k8\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"fmov\")\n \t\t\t\t   (eq_attr \"memory\" \"store,both\")))\n \t\t\t \"athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)\")\n (define_insn_reservation \"athlon_fist\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"fistp,fisttp\"))\n \t\t\t \"athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)\")\n (define_insn_reservation \"athlon_fmov\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"fmov\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-faddmul\")\n (define_insn_reservation \"athlon_fadd_load\" 4\n@@ -458,12 +458,12 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_fadd_load_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"fop\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_fadd\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"fop\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fadd\")\n (define_insn_reservation \"athlon_fmul_load\" 4\n@@ -472,16 +472,16 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fmul\")\n (define_insn_reservation \"athlon_fmul_load_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"fmul\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fmul\")\n (define_insn_reservation \"athlon_fmul\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"fmul\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_fsgn\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"fsgn\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_fdiv_load\" 24\n@@ -490,7 +490,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fmul\")\n (define_insn_reservation \"athlon_fdiv_load_k8\" 13\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"fdiv\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fmul\")\n@@ -499,16 +499,16 @@\n \t\t\t      (eq_attr \"type\" \"fdiv\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_fdiv_k8\" 11\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"fdiv\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_fpspc_load\" 103\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"fpspc\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload,athlon-fvector\")\n (define_insn_reservation \"athlon_fpspc\" 100\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"fpspc\"))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fvector\")\n (define_insn_reservation \"athlon_fcmov_load\" 7\n@@ -521,12 +521,12 @@\n \t\t\t      (eq_attr \"type\" \"fcmov\"))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fvector\")\n (define_insn_reservation \"athlon_fcmov_load_k8\" 17\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"fcmov\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fploadk8,athlon-fvector\")\n (define_insn_reservation \"athlon_fcmov_k8\" 15\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"fcmov\"))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fvector\")\n ;; fcomi is vector decoded by uses only one pipe.\n@@ -537,13 +537,13 @@\n \t\t\t\t        (eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-vector,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_fcomi_load_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"fcmp\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t        (eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-vector,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_fcomi\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t   (eq_attr \"type\" \"fcmp\")))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fadd\")\n@@ -553,18 +553,18 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_fcom_load_k8\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"fcmp\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_fcom\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (eq_attr \"type\" \"fcmp\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fadd\")\n ;; Never seen by the scheduler because we still don't do post reg-stack\n ;; scheduling.\n ;(define_insn_reservation \"athlon_fxch\" 2\n-;\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+;\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n ;\t\t\t      (eq_attr \"type\" \"fxch\"))\n ;\t\t\t \"athlon-direct,athlon-fpsched,athlon-fany\")\n \n@@ -580,13 +580,13 @@\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n \t\t\t\t   (match_operand:DF 1 \"memory_operand\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fstore\")\n-(define_insn_reservation \"athlon_movsd_load_generic64\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"generic64\")\n+(define_insn_reservation \"athlon_movsd_load_generic\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n \t\t\t\t   (match_operand:DF 1 \"memory_operand\")))\n \t\t\t \"athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fmul)\")\n (define_insn_reservation \"athlon_movaps_load_k8\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n@@ -604,7 +604,7 @@\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-vector,athlon-fpload,(athlon-fany*2)\")\n (define_insn_reservation \"athlon_movss_load_k8\" 1\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n@@ -615,7 +615,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fany\")\n (define_insn_reservation \"athlon_mmxsseld_k8\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"mmxmov,ssemov\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fstore\")\n@@ -637,19 +637,19 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8, athlon-fany\")\n (define_insn_reservation \"athlon_mmxssest\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"mmxmov,ssemov\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n \t\t\t\t\t(eq_attr \"memory\" \"store,both\"))))\n \t\t\t \"athlon-vector,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2)*2)\")\n (define_insn_reservation \"athlon_mmxssest_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"mmxmov,ssemov\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n \t\t\t\t\t(eq_attr \"memory\" \"store,both\"))))\n \t\t\t \"athlon-double,(athlon-fpsched+athlon-agu),((athlon-fstore+athlon-store2)*2)\")\n (define_insn_reservation \"athlon_mmxssest_short\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"mmxmov,ssemov\")\n \t\t\t\t   (eq_attr \"memory\" \"store,both\")))\n \t\t\t \"athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)\")\n@@ -673,7 +673,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"store,both\")))\n \t\t\t \"athlon-direct,(athlon-fpsched+athlon-agu),(athlon-fstore+athlon-store)\")\n (define_insn_reservation \"athlon_movaps_k8\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n \t\t\t\t   (eq_attr \"mode\" \"V4SF,V2DF,TI\")))\n \t\t\t \"athlon-double,athlon-fpsched,((athlon-faddmul+athlon-faddmul) | (athlon-faddmul, athlon-faddmul))\")\n@@ -683,25 +683,25 @@\n \t\t\t\t   (eq_attr \"mode\" \"V4SF,V2DF,TI\")))\n \t\t\t \"athlon-vector,athlon-fpsched,(athlon-faddmul+athlon-faddmul)\")\n (define_insn_reservation \"athlon_mmxssemov\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (eq_attr \"type\" \"mmxmov,ssemov\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-faddmul\")\n (define_insn_reservation \"athlon_mmxmul_load\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"mmxmul\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fmul\")\n (define_insn_reservation \"athlon_mmxmul\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (eq_attr \"type\" \"mmxmul\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_mmx_load\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"unit\" \"mmx\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-faddmul\")\n (define_insn_reservation \"athlon_mmx\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (eq_attr \"unit\" \"mmx\"))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-faddmul\")\n ;; SSE operations are handled by the i387 unit as well.  The latency\n@@ -713,7 +713,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,(athlon-fmul*2)\")\n (define_insn_reservation \"athlon_sselog_load_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,(athlon-fmul*2)\")\n@@ -727,7 +727,7 @@\n \t\t\t      (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\"))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fmul*2\")\n (define_insn_reservation \"athlon_sselog_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\"))\n \t\t\t \"athlon-double,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_sselog_amdfam10\" 2\n@@ -743,13 +743,13 @@\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecmp_load_k8\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"ssecmp\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DF,DI,TI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecmp\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"ssecmp\")\n \t\t\t\t   (eq_attr \"mode\" \"SF,DF,DI,TI\")))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fadd\")\n@@ -759,7 +759,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_ssecmpvector_load_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssecmp\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,(athlon-fadd*2)\")\n@@ -773,7 +773,7 @@\n \t\t\t      (eq_attr \"type\" \"ssecmp\"))\n \t\t\t \"athlon-vector,athlon-fpsched,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_ssecmpvector_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (eq_attr \"type\" \"ssecmp\"))\n \t\t\t \"athlon-double,athlon-fpsched,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_ssecmpvector_amdfam10\" 2\n@@ -786,7 +786,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecomi_load_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssecomi\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fploadk8,athlon-fadd\")\n@@ -796,7 +796,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecomi\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (eq_attr \"type\" \"ssecomi\"))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fadd\")\n (define_insn_reservation \"athlon_ssecomi_amdfam10\" 3\n@@ -811,13 +811,13 @@\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fadd\")\n (define_insn_reservation \"athlon_sseadd_load_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"sseadd,sseadd1\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DF,DI\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fadd\")\n (define_insn_reservation \"athlon_sseadd\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"sseadd,sseadd1\")\n \t\t\t\t   (eq_attr \"mode\" \"SF,DF,DI\")))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fadd\")\n@@ -827,7 +827,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_sseaddvector_load_k8\" 7\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"sseadd,sseadd1\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,(athlon-fadd*2)\")\n@@ -841,7 +841,7 @@\n \t\t\t      (eq_attr \"type\" \"sseadd,sseadd1\"))\n \t\t\t \"athlon-vector,athlon-fpsched,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_sseaddvector_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (eq_attr \"type\" \"sseadd,sseadd1\"))\n \t\t\t \"athlon-double,athlon-fpsched,(athlon-fadd*2)\")\n (define_insn_reservation \"athlon_sseaddvector_amdfam10\" 4\n@@ -855,7 +855,7 @@\n \n ;; cvtss2sd\n (define_insn_reservation \"athlon_ssecvt_cvtss2sd_load_k8\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"DF\")\n@@ -869,7 +869,7 @@\n \t\t\t\t\t     (eq_attr \"memory\" \"load\")))))\n \t\t\t \"athlon-double,athlon-fploadk8,(athlon-faddmul+athlon-fstore)\")\n (define_insn_reservation \"athlon_ssecvt_cvtss2sd\" 2\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"direct\")\n \t\t\t\t\t(eq_attr \"mode\" \"DF\"))))\n@@ -882,7 +882,7 @@\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-faddmul,(athlon-fstore*2)\")\n ;; cvtps2pd.  Model same way the other double decoded FP conversions.\n (define_insn_reservation \"athlon_ssecvt_cvtps2pd_load_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"V2DF,V4SF,TI\")\n@@ -896,7 +896,7 @@\n \t\t\t\t\t     (eq_attr \"memory\" \"load\")))))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fstore\")\n (define_insn_reservation \"athlon_ssecvt_cvtps2pd_k8\" 3\n-\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(eq_attr \"mode\" \"V2DF,V4SF,TI\"))))\n@@ -932,7 +932,7 @@\n \t\t\t\t\t     (eq_attr \"memory\" \"load\")))))\n \t\t\t \"athlon-vector,athlon-fpload,(athlon-fstore*2)\")\n (define_insn_reservation \"athlon_sseicvt_cvtsi2ss_load_k8\" 9\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"sseicvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SF,DF\")\n@@ -947,7 +947,7 @@\n \t\t\t \"athlon-double,athlon-fploadk8,(athlon-faddmul+athlon-fstore)\")\n ;; cvtsi2sd reg,reg is double decoded (vector on Athlon)\n (define_insn_reservation \"athlon_sseicvt_cvtsi2sd_k8\" 11\n-\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic\")\n \t\t\t      (and (eq_attr \"type\" \"sseicvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SF,DF\")\n@@ -962,7 +962,7 @@\n \t\t\t \"athlon-vector,athlon-fploadk8,(athlon-faddmul+athlon-fstore)\")\n ;; cvtsi2ss reg, reg is doublepath\n (define_insn_reservation \"athlon_sseicvt_cvtsi2ss\" 14\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"sseicvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SF,DF\")\n@@ -977,7 +977,7 @@\n \t\t\t \"athlon-vector,athlon-fploadk8,(athlon-faddmul+athlon-fstore)\")\n ;; cvtsd2ss mem,reg is doublepath, troughput unknown, latency 9\n (define_insn_reservation \"athlon_ssecvt_cvtsd2ss_load_k8\" 9\n-\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,athlon,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SF\")\n@@ -992,7 +992,7 @@\n \t\t\t \"athlon-double,athlon-fploadk8,(athlon-faddmul+athlon-fstore)\")\n ;; cvtsd2ss reg,reg is vectorpath, troughput unknown, latency 12\n (define_insn_reservation \"athlon_ssecvt_cvtsd2ss\" 12\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SF\")\n@@ -1006,7 +1006,7 @@\n \t\t\t\t\t     (eq_attr \"memory\" \"none\")))))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-faddmul,(athlon-fstore*2)\")\n (define_insn_reservation \"athlon_ssecvt_cvtpd2ps_load_k8\" 8\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n@@ -1022,7 +1022,7 @@\n ;; cvtpd2ps mem,reg is vectorpath, troughput unknown, latency 10\n ;; ??? Why it is fater than cvtsd2ss?\n (define_insn_reservation \"athlon_ssecvt_cvtpd2ps\" 8\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n@@ -1037,7 +1037,7 @@\n \t\t\t \"athlon-double,athlon-fpsched,(athlon-faddmul+athlon-fstore)\")\n ;; cvtsd2si mem,reg is doublepath, troughput 1, latency 9\n (define_insn_reservation \"athlon_secvt_cvtsX2si_load\" 9\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"sseicvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"vector\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SI,DI\")\n@@ -1059,7 +1059,7 @@\n \t\t\t\t\t     (eq_attr \"memory\" \"none\")))))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fvector\")\n (define_insn_reservation \"athlon_ssecvt_cvtsX2si_k8\" 9\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"sseicvt\")\n \t\t\t\t   (and (eq_attr \"athlon_decode\" \"double\")\n \t\t\t\t\t(and (eq_attr \"mode\" \"SI,DI\")\n@@ -1097,13 +1097,13 @@\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fmul\")\n (define_insn_reservation \"athlon_ssemul_load_k8\" 6\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"ssemul\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DF\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fmul\")\n (define_insn_reservation \"athlon_ssemul\" 4\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"ssemul\")\n \t\t\t\t   (eq_attr \"mode\" \"SF,DF\")))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul\")\n@@ -1113,7 +1113,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,(athlon-fmul*2)\")\n (define_insn_reservation \"athlon_ssemulvector_load_k8\" 7\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssemul\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,(athlon-fmul*2)\")\n@@ -1127,7 +1127,7 @@\n \t\t\t      (eq_attr \"type\" \"ssemul\"))\n \t\t\t \"athlon-vector,athlon-fpsched,(athlon-fmul*2)\")\n (define_insn_reservation \"athlon_ssemulvector_k8\" 5\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (eq_attr \"type\" \"ssemul\"))\n \t\t\t \"athlon-double,athlon-fpsched,(athlon-fmul*2)\")\n (define_insn_reservation \"athlon_ssemulvector_amdfam10\" 4\n@@ -1142,13 +1142,13 @@\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fmul*17\")\n (define_insn_reservation \"athlon_ssediv_load_k8\" 22\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"ssediv\")\n \t\t\t\t   (and (eq_attr \"mode\" \"SF,DF\")\n \t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fmul*17\")\n (define_insn_reservation \"athlon_ssediv\" 20\n-\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic64,amdfam10\")\n+\t\t\t (and (eq_attr \"cpu\" \"athlon,k8,generic,amdfam10\")\n \t\t\t      (and (eq_attr \"type\" \"ssediv\")\n \t\t\t\t   (eq_attr \"mode\" \"SF,DF\")))\n \t\t\t \"athlon-direct,athlon-fpsched,athlon-fmul*17\")\n@@ -1158,7 +1158,7 @@\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,athlon-fmul*34\")\n (define_insn_reservation \"athlon_ssedivvector_load_k8\" 35\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (and (eq_attr \"type\" \"ssediv\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,athlon-fmul*34\")\n@@ -1172,7 +1172,7 @@\n \t\t\t      (eq_attr \"type\" \"ssediv\"))\n \t\t\t \"athlon-vector,athlon-fmul*34\")\n (define_insn_reservation \"athlon_ssedivvector_k8\" 39\n-\t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n+\t\t\t (and (eq_attr \"cpu\" \"k8,generic\")\n \t\t\t      (eq_attr \"type\" \"ssediv\"))\n \t\t\t \"athlon-double,athlon-fmul*34\")\n (define_insn_reservation \"athlon_ssedivvector_amdfam10\" 20"}, {"sha": "823f92da8c3384c4580ac2cca5915c000c80af18", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=9d5321624b105f7f265254568ecab29e330e1ec7", "patch": "@@ -578,25 +578,25 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t    case 6:\n \t      if (model > 9)\n \t\t/* Use the default detection procedure.  */\n-\t\tprocessor = PROCESSOR_GENERIC32;\n+\t\tprocessor = PROCESSOR_GENERIC;\n \t      else if (model == 9)\n \t\tcpu = \"c3-2\";\n \t      else if (model >= 6)\n \t\tcpu = \"c3\";\n \t      else\n-\t\tprocessor = PROCESSOR_GENERIC32;\n+\t\tprocessor = PROCESSOR_GENERIC;\n \t      break;\n \t    case 5:\n \t      if (has_3dnow)\n \t\tcpu = \"winchip2\";\n \t      else if (has_mmx)\n \t\tcpu = \"winchip2-c6\";\n \t      else\n-\t\tprocessor = PROCESSOR_GENERIC32;\n+\t\tprocessor = PROCESSOR_GENERIC;\n \t      break;\n \t    default:\n \t      /* We have no idea.  */\n-\t      processor = PROCESSOR_GENERIC32;\n+\t      processor = PROCESSOR_GENERIC;\n \t    }\n \t}\n     }\n@@ -618,7 +618,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t  break;\n \tdefault:\n \t  /* We have no idea.  */\n-\t  processor = PROCESSOR_GENERIC32;\n+\t  processor = PROCESSOR_GENERIC;\n \t}\n     }\n "}, {"sha": "2e764e799873e053f6748e2c2ffce3b8e6aed3f8", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=9d5321624b105f7f265254568ecab29e330e1ec7", "patch": "@@ -156,8 +156,7 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     /* use PROCESSOR_max to not set/unset the arch macro.  */\n     case PROCESSOR_max:\n       break;\n-    case PROCESSOR_GENERIC32:\n-    case PROCESSOR_GENERIC64:\n+    case PROCESSOR_GENERIC:\n       gcc_unreachable ();\n     }\n \n@@ -248,8 +247,7 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     case PROCESSOR_SLM:\n       def_or_undef (parse_in, \"__tune_slm__\");\n       break;\n-    case PROCESSOR_GENERIC32:\n-    case PROCESSOR_GENERIC64:\n+    case PROCESSOR_GENERIC:\n       break;\n     /* use PROCESSOR_max to not set/unset the tune macro.  */\n     case PROCESSOR_max:"}, {"sha": "b6f3c2d748f00d73d217c66723e4cc4be22cd40c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 124, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9d5321624b105f7f265254568ecab29e330e1ec7", "patch": "@@ -1644,18 +1644,19 @@ struct processor_costs slm_cost = {\n   1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n };\n \n-/* Generic64 should produce code tuned for Nocona and K8.  */\n+/* Generic should produce code tuned for Core-i7 (and newer chips)\n+   and btver1 (and newer chips).  */\n \n-static stringop_algs generic64_memcpy[2] = {\n+static stringop_algs generic_memcpy[2] = {\n   DUMMY_STRINGOP_ALGS,\n   {libcall, {{32, loop, false}, {8192, rep_prefix_8_byte, false},\n              {-1, libcall, false}}}};\n-static stringop_algs generic64_memset[2] = {\n+static stringop_algs generic_memset[2] = {\n   DUMMY_STRINGOP_ALGS,\n   {libcall, {{32, loop, false}, {8192, rep_prefix_8_byte, false},\n              {-1, libcall, false}}}};\n static const\n-struct processor_costs generic64_cost = {\n+struct processor_costs generic_cost = {\n   COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n   /* On all chips taken into consideration lea is 2 cycles and more.  With\n      this cost however our current implementation of synth_mult results in\n@@ -1713,8 +1714,8 @@ struct processor_costs generic64_cost = {\n   COSTS_N_INSNS (8),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (8),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (40),\t\t\t/* cost of FSQRT instruction.  */\n-  generic64_memcpy,\n-  generic64_memset,\n+  generic_memcpy,\n+  generic_memset,\n   1,\t\t\t\t\t/* scalar_stmt_cost.  */\n   1,\t\t\t\t\t/* scalar load_cost.  */\n   1,\t\t\t\t\t/* scalar_store_cost.  */\n@@ -1814,83 +1815,6 @@ struct processor_costs core_cost = {\n   1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n };\n \n-/* Generic32 should produce code tuned for PPro, Pentium4, Nocona,\n-   Athlon and K8.  */\n-static stringop_algs generic32_memcpy[2] = {\n-  {libcall, {{32, loop, false}, {8192, rep_prefix_4_byte, false},\n-             {-1, libcall, false}}},\n-  DUMMY_STRINGOP_ALGS};\n-static stringop_algs generic32_memset[2] = {\n-  {libcall, {{32, loop, false}, {8192, rep_prefix_4_byte, false},\n-             {-1, libcall, false}}},\n-  DUMMY_STRINGOP_ALGS};\n-static const\n-struct processor_costs generic32_cost = {\n-  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n-  COSTS_N_INSNS (1) + 1,\t\t/* cost of a lea instruction */\n-  COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n-  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n-  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n-   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t HI */\n-   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t SI */\n-   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t DI */\n-   COSTS_N_INSNS (2)},\t\t\t/*\t\t\t      other */\n-  0,\t\t\t\t\t/* cost of multiply per each bit set */\n-  {COSTS_N_INSNS (18),\t\t\t/* cost of a divide/mod for QI */\n-   COSTS_N_INSNS (26),\t\t\t/*\t\t\t    HI */\n-   COSTS_N_INSNS (42),\t\t\t/*\t\t\t    SI */\n-   COSTS_N_INSNS (74),\t\t\t/*\t\t\t    DI */\n-   COSTS_N_INSNS (74)},\t\t\t/*\t\t\t    other */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of movzx */\n-  8,\t\t\t\t\t/* \"large\" insn */\n-  17,\t\t\t\t\t/* MOVE_RATIO */\n-  4,\t\t\t\t     /* cost for loading QImode using movzbl */\n-  {4, 4, 4},\t\t\t\t/* cost of loading integer registers\n-\t\t\t\t\t   in QImode, HImode and SImode.\n-\t\t\t\t\t   Relative to reg-reg move (2).  */\n-  {4, 4, 4},\t\t\t\t/* cost of storing integer registers */\n-  4,\t\t\t\t\t/* cost of reg,reg fld/fst */\n-  {12, 12, 12},\t\t\t\t/* cost of loading fp registers\n-\t\t\t\t\t   in SFmode, DFmode and XFmode */\n-  {6, 6, 8},\t\t\t\t/* cost of storing fp registers\n-\t\t\t\t\t   in SFmode, DFmode and XFmode */\n-  2,\t\t\t\t\t/* cost of moving MMX register */\n-  {8, 8},\t\t\t\t/* cost of loading MMX registers\n-\t\t\t\t\t   in SImode and DImode */\n-  {8, 8},\t\t\t\t/* cost of storing MMX registers\n-\t\t\t\t\t   in SImode and DImode */\n-  2,\t\t\t\t\t/* cost of moving SSE register */\n-  {8, 8, 8},\t\t\t\t/* cost of loading SSE registers\n-\t\t\t\t\t   in SImode, DImode and TImode */\n-  {8, 8, 8},\t\t\t\t/* cost of storing SSE registers\n-\t\t\t\t\t   in SImode, DImode and TImode */\n-  5,\t\t\t\t\t/* MMX or SSE register to integer */\n-  32,\t\t\t\t\t/* size of l1 cache.  */\n-  256,\t\t\t\t\t/* size of l2 cache.  */\n-  64,\t\t\t\t\t/* size of prefetch block */\n-  6,\t\t\t\t\t/* number of parallel prefetches */\n-  3,\t\t\t\t\t/* Branch cost */\n-  COSTS_N_INSNS (8),\t\t\t/* cost of FADD and FSUB insns.  */\n-  COSTS_N_INSNS (8),\t\t\t/* cost of FMUL instruction.  */\n-  COSTS_N_INSNS (20),\t\t\t/* cost of FDIV instruction.  */\n-  COSTS_N_INSNS (8),\t\t\t/* cost of FABS instruction.  */\n-  COSTS_N_INSNS (8),\t\t\t/* cost of FCHS instruction.  */\n-  COSTS_N_INSNS (40),\t\t\t/* cost of FSQRT instruction.  */\n-  generic32_memcpy,\n-  generic32_memset,\n-  1,\t\t\t\t\t/* scalar_stmt_cost.  */\n-  1,\t\t\t\t\t/* scalar load_cost.  */\n-  1,\t\t\t\t\t/* scalar_store_cost.  */\n-  1,\t\t\t\t\t/* vec_stmt_cost.  */\n-  1,\t\t\t\t\t/* vec_to_scalar_cost.  */\n-  1,\t\t\t\t\t/* scalar_to_vec_cost.  */\n-  1,\t\t\t\t\t/* vec_align_load_cost.  */\n-  2,\t\t\t\t\t/* vec_unalign_load_cost.  */\n-  1,\t\t\t\t\t/* vec_store_cost.  */\n-  3,\t\t\t\t\t/* cond_taken_branch_cost.  */\n-  1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n-};\n \n /* Set by -mtune.  */\n const struct processor_costs *ix86_tune_cost = &pentium_cost;\n@@ -1929,12 +1853,7 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_BTVER (m_BTVER1 | m_BTVER2)\n #define m_AMD_MULTIPLE (m_ATHLON_K8 | m_AMDFAM10 | m_BDVER | m_BTVER)\n \n-#define m_GENERIC32 (1<<PROCESSOR_GENERIC32)\n-#define m_GENERIC64 (1<<PROCESSOR_GENERIC64)\n-\n-/* Generic instruction choice should be common subset of supported CPUs\n-   (PPro/PENT4/NOCONA/CORE2/Athlon/K8).  */\n-#define m_GENERIC (m_GENERIC32 | m_GENERIC64)\n+#define m_GENERIC (1<<PROCESSOR_GENERIC)\n \n const char* ix86_tune_feature_names[X86_TUNE_LAST] = {\n #undef DEF_TUNE\n@@ -2384,8 +2303,7 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {&core_cost, 16, 10, 16, 10, 16},\n   /* Core avx2  */\n   {&core_cost, 16, 10, 16, 10, 16},\n-  {&generic32_cost, 16, 7, 16, 7, 16},\n-  {&generic64_cost, 16, 10, 16, 10, 16},\n+  {&generic_cost, 16, 10, 16, 10, 16},\n   {&amdfam10_cost, 32, 24, 32, 7, 32},\n   {&bdver1_cost, 16, 10, 16, 7, 11},\n   {&bdver2_cost, 16, 10, 16, 7, 11},\n@@ -3182,7 +3100,7 @@ ix86_option_override_internal (bool main_args_p)\n \t| PTA_XOP | PTA_LWP | PTA_BMI | PTA_TBM | PTA_F16C\n \t| PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE \n \t| PTA_XSAVEOPT | PTA_FSGSBASE},\n-      {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC64,\n+      {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC,\n \tPTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_PRFCHW\n \t| PTA_FXSR | PTA_XSAVE},\n@@ -3193,9 +3111,7 @@ ix86_option_override_internal (bool main_args_p)\n \t| PTA_BMI | PTA_F16C | PTA_MOVBE | PTA_PRFCHW\n \t| PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n \n-      {\"generic32\", PROCESSOR_GENERIC32, CPU_PENTIUMPRO,\n-\tPTA_HLE /* flags are only used for -march switch.  */ },\n-      {\"generic64\", PROCESSOR_GENERIC64, CPU_GENERIC64,\n+      {\"generic\", PROCESSOR_GENERIC, CPU_GENERIC,\n \tPTA_64BIT\n \t| PTA_HLE /* flags are only used for -march switch.  */ },\n     };\n@@ -3295,16 +3211,12 @@ ix86_option_override_internal (bool main_args_p)\n \t     -mtune=native, as it was changed by the driver.  */\n \t  || !strcmp (ix86_tune_string, \"native\"))\n \t{\n-\t  if (TARGET_64BIT)\n-\t    ix86_tune_string = \"generic64\";\n-\t  else\n-\t    ix86_tune_string = \"generic32\";\n+\t  ix86_tune_string = \"generic\";\n \t}\n       /* If this call is for setting the option attribute, allow the\n-\t generic32/generic64 that was previously set.  */\n+\t generic that was previously set.  */\n       else if (!main_args_p\n-\t       && (!strcmp (ix86_tune_string, \"generic32\")\n-\t\t   || !strcmp (ix86_tune_string, \"generic64\")))\n+\t       && !strcmp (ix86_tune_string, \"generic\"))\n \t;\n       else if (!strncmp (ix86_tune_string, \"generic\", 7))\n         error (\"bad value (%s) for %stune=%s %s\",\n@@ -3330,10 +3242,7 @@ ix86_option_override_internal (bool main_args_p)\n \t  || !strcmp (ix86_tune_string, \"x86-64\")\n \t  || !strcmp (ix86_tune_string, \"i686\"))\n \t{\n-\t  if (TARGET_64BIT)\n-\t    ix86_tune_string = \"generic64\";\n-\t  else\n-\t    ix86_tune_string = \"generic32\";\n+\t  ix86_tune_string = \"generic\";\n \t}\n     }\n \n@@ -3630,20 +3539,6 @@ ix86_option_override_internal (bool main_args_p)\n \t\t\t \"instruction set\");\n \t      }\n \t  }\n-\telse\n-\t  {\n-\t    /* Adjust tuning when compiling for 32-bit ABI.  */\n-\t    switch (ix86_tune)\n-\t      {\n-\t      case PROCESSOR_GENERIC64:\n-\t\tix86_tune = PROCESSOR_GENERIC32;\n-\t\tix86_schedule = CPU_PENTIUMPRO;\n-\t\tbreak;\n-\n-\t      default:\n-\t\tbreak;\n-\t      }\n-\t  }\n \t/* Intel CPUs have always interpreted SSE prefetch instructions as\n \t   NOPs; so, we can enable SSE prefetch instructions even when\n \t   -mtune (rather than -march) points us to a processor that has them.\n@@ -24503,8 +24398,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_K8:\n     case PROCESSOR_AMDFAM10:\n     case PROCESSOR_NOCONA:\n-    case PROCESSOR_GENERIC32:\n-    case PROCESSOR_GENERIC64:\n+    case PROCESSOR_GENERIC:\n     case PROCESSOR_BDVER1:\n     case PROCESSOR_BDVER2:\n     case PROCESSOR_BDVER3:\n@@ -24768,8 +24662,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n     case PROCESSOR_BTVER1:\n     case PROCESSOR_BTVER2:\n     case PROCESSOR_ATOM:\n-    case PROCESSOR_GENERIC32:\n-    case PROCESSOR_GENERIC64:\n+    case PROCESSOR_GENERIC:\n       memory = get_attr_memory (insn);\n \n       /* Show ability of reorder buffer to hide latency of load by executing"}, {"sha": "440844e77359f736a7bfabc321c4417dcd82c82a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9d5321624b105f7f265254568ecab29e330e1ec7", "patch": "@@ -251,9 +251,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_CORE2 (ix86_tune == PROCESSOR_CORE2)\n #define TARGET_COREI7 (ix86_tune == PROCESSOR_COREI7)\n #define TARGET_HASWELL (ix86_tune == PROCESSOR_HASWELL)\n-#define TARGET_GENERIC32 (ix86_tune == PROCESSOR_GENERIC32)\n-#define TARGET_GENERIC64 (ix86_tune == PROCESSOR_GENERIC64)\n-#define TARGET_GENERIC (TARGET_GENERIC32 || TARGET_GENERIC64)\n+#define TARGET_GENERIC (ix86_tune == PROCESSOR_GENERIC)\n #define TARGET_AMDFAM10 (ix86_tune == PROCESSOR_AMDFAM10)\n #define TARGET_BDVER1 (ix86_tune == PROCESSOR_BDVER1)\n #define TARGET_BDVER2 (ix86_tune == PROCESSOR_BDVER2)\n@@ -2141,8 +2139,7 @@ enum processor_type\n   PROCESSOR_CORE2,\n   PROCESSOR_COREI7,\n   PROCESSOR_HASWELL,\n-  PROCESSOR_GENERIC32,\n-  PROCESSOR_GENERIC64,\n+  PROCESSOR_GENERIC,\n   PROCESSOR_AMDFAM10,\n   PROCESSOR_BDVER1,\n   PROCESSOR_BDVER2,"}, {"sha": "e009bc96fc2b8b8a0be96c8248b5b4dbc506db6d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9d5321624b105f7f265254568ecab29e330e1ec7", "patch": "@@ -349,7 +349,7 @@\n \f\n ;; Processor type.\n (define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,corei7,\n-\t\t    atom,slm,generic64,amdfam10,bdver1,bdver2,bdver3,btver1,btver2\"\n+\t\t    atom,slm,generic,amdfam10,bdver1,bdver2,bdver3,btver1,btver2\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be"}, {"sha": "fc19df19d79420e4466473a1ae9690e7256748f2", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5321624b105f7f265254568ecab29e330e1ec7/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=9d5321624b105f7f265254568ecab29e330e1ec7", "patch": "@@ -23,7 +23,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    tradeoff.  We can't enable it for 32bit generic because it does not\n    work well with PPro base chips.  */\n DEF_TUNE (X86_TUNE_USE_LEAVE, \"use_leave\", \n-\t  m_386 | m_CORE_ALL | m_K6_GEODE | m_AMD_MULTIPLE | m_GENERIC64)\n+\t  m_386 | m_CORE_ALL | m_K6_GEODE | m_AMD_MULTIPLE | m_GENERIC)\n DEF_TUNE (X86_TUNE_PUSH_MEMORY, \"push_memory\", \n           m_386 | m_P4_NOCONA | m_CORE_ALL | m_K6_GEODE | m_AMD_MULTIPLE \n           | m_GENERIC)\n@@ -49,10 +49,7 @@ DEF_TUNE (X86_TUNE_MOVX, \"movx\",\n    register stalls on Generic32 compilation setting as well.  However\n    in current implementation the partial register stalls are not eliminated\n    very well - they can be introduced via subregs synthesized by combine\n-   and can happen in caller/callee saving sequences.  Because this option\n-   pays back little on PPro based chips and is in conflict with partial reg\n-   dependencies used by Athlon/P4 based chips, it is better to leave it off\n-   for generic32 for now.  */\n+   and can happen in caller/callee saving sequences.  */\n DEF_TUNE (X86_TUNE_PARTIAL_REG_STALL, \"partial_reg_stall\", m_PPRO)\n DEF_TUNE (X86_TUNE_PARTIAL_FLAG_REG_STALL, \"partial_flag_reg_stall\",\n           m_CORE_ALL | m_GENERIC)\n@@ -163,19 +160,19 @@ DEF_TUNE (X86_TUNE_EXT_80387_CONSTANTS, \"ext_80387_constants\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_ATOM | m_SLM | m_K6_GEODE\n           | m_ATHLON_K8 | m_GENERIC)\n DEF_TUNE (X86_TUNE_AVOID_VECTOR_DECODE, \"avoid_vector_decode\",\n-          m_CORE_ALL | m_K8 | m_GENERIC64)\n+          m_CORE_ALL | m_K8 | m_GENERIC)\n /* X86_TUNE_PROMOTE_HIMODE_IMUL: Modern CPUs have same latency for HImode\n    and SImode multiply, but 386 and 486 do HImode multiply faster.  */\n DEF_TUNE (X86_TUNE_PROMOTE_HIMODE_IMUL, \"promote_himode_imul\",\n           ~(m_386 | m_486))\n /* X86_TUNE_SLOW_IMUL_IMM32_MEM: Imul of 32-bit constant and memory is\n    vector path on AMD machines.  */\n DEF_TUNE (X86_TUNE_SLOW_IMUL_IMM32_MEM, \"slow_imul_imm32_mem\",\n-          m_CORE_ALL | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER | m_GENERIC64)\n+          m_CORE_ALL | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER | m_GENERIC)\n /* X86_TUNE_SLOW_IMUL_IMM8: Imul of 8-bit constant is vector path on AMD\n    machines.  */\n DEF_TUNE (X86_TUNE_SLOW_IMUL_IMM8, \"slow_imul_imm8\",\n-          m_CORE_ALL | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER | m_GENERIC64)\n+          m_CORE_ALL | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER | m_GENERIC)\n /* X86_TUNE_MOVE_M1_VIA_OR: On pentiums, it is faster to load -1 via OR\n    than a MOV.  */\n DEF_TUNE (X86_TUNE_MOVE_M1_VIA_OR, \"move_m1_via_or\", m_PENT)"}]}