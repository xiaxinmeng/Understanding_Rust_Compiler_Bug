{"sha": "d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlZjc5MjEwNzRlMmRlOGY2ZDRmOTZiOTk3M2VkMzJlNjNjMDA2MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-24T14:47:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-24T14:47:12Z"}, "message": "[multiple changes]\n\n2014-01-24  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch7.adb: Minor change of Indices to Indexes (preferred\n\tterminology in compiler).\n\n2014-01-24  Robert Dewar  <dewar@adacore.com>\n\n\t* scans.ads: Remove Tok_Raise from Sterm, Eterm, After_SM\n\tcategories, now that Ada 95 supports raise expressions.\n\n2014-01-24  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb (Freeze_Enumeration_Type): Use new target parameter\n\tShort_Enums_On_Target.\n\t* sem_ch13.adb (Set_Enum_Esize): Take Short_Enums_On_Target\n\tinto account.\n\t* targparm.ads, targparm.adb: Add new target parameter Short_Enums.\n\n2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iterator_Specification): If subtype\n\tindication is given explicity, check that it matches the array\n\tcomponent type or the container element type of the domain\n\tof iteration.\n\n2014-01-24  Tristan Gingold  <gingold@adacore.com>\n\n\t* back_end.adb (Scan_Compiler_Arguments): Set Short_Enums_On_Target.\n\n2014-01-24  Vincent Celier  <celier@adacore.com>\n\n\t* prj-env.adb (Ada_Objects_Path): Use Ada_Objects_Path_No_Libs\n\tto cache the result when Including_Libraries is False.\n\t* prj-env.ads (Ada_Objects_Path): Update documentation\n\t* prj.adb (Free (Project_Id)): Also free Ada_Objects_Path_No_Libs\n\t(Get_Object_Directory): Return the Library_Ali_Dir only when\n\twhen Including_Libraries is True.\n\t* prj.ads (Get_Object_Directory): Fix and complete documentation\n\t(Project_Data): New component Ada_Objects_Path_No_Libs\n\nFrom-SVN: r207036", "tree": {"sha": "43cae609c633bc42287b42a5bbe2fef41a7a770b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43cae609c633bc42287b42a5bbe2fef41a7a770b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/comments", "author": null, "committer": null, "parents": [{"sha": "162c21d9985ea765ff74de0a465a6119363f1dcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162c21d9985ea765ff74de0a465a6119363f1dcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162c21d9985ea765ff74de0a465a6119363f1dcd"}], "stats": {"total": 234, "additions": 193, "deletions": 41}, "files": [{"sha": "351b9ed6bfab62478d0e7e3a4fe808481c388556", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -1,3 +1,43 @@\n+2014-01-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch7.adb: Minor change of Indices to Indexes (preferred\n+\tterminology in compiler).\n+\n+2014-01-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* scans.ads: Remove Tok_Raise from Sterm, Eterm, After_SM\n+\tcategories, now that Ada 95 supports raise expressions.\n+\n+2014-01-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb (Freeze_Enumeration_Type): Use new target parameter\n+\tShort_Enums_On_Target.\n+\t* sem_ch13.adb (Set_Enum_Esize): Take Short_Enums_On_Target\n+\tinto account.\n+\t* targparm.ads, targparm.adb: Add new target parameter Short_Enums.\n+\n+2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): If subtype\n+\tindication is given explicity, check that it matches the array\n+\tcomponent type or the container element type of the domain\n+\tof iteration.\n+\n+2014-01-24  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* back_end.adb (Scan_Compiler_Arguments): Set Short_Enums_On_Target.\n+\n+2014-01-24  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-env.adb (Ada_Objects_Path): Use Ada_Objects_Path_No_Libs\n+\tto cache the result when Including_Libraries is False.\n+\t* prj-env.ads (Ada_Objects_Path): Update documentation\n+\t* prj.adb (Free (Project_Id)): Also free Ada_Objects_Path_No_Libs\n+\t(Get_Object_Directory): Return the Library_Ali_Dir only when\n+\twhen Including_Libraries is True.\n+\t* prj.ads (Get_Object_Directory): Fix and complete documentation\n+\t(Project_Data): New component Ada_Objects_Path_No_Libs\n+\n 2014-01-24  Robert Dewar  <dewar@adacore.com>\n \n \t* checks.adb (Expr_Known_Valid): Result of fpt operator never"}, {"sha": "59f7bb40065c4ecf4d69bacaf71caf89d97e7bb7", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -40,6 +40,7 @@ with Switch;    use Switch;\n with Switch.C;  use Switch.C;\n with System;    use System;\n with Types;     use Types;\n+with Targparm;\n \n with System.OS_Lib; use System.OS_Lib;\n \n@@ -53,6 +54,10 @@ package body Back_End is\n    pragma Import (C, flag_stack_check);\n    --  Indicates if stack checking is enabled, imported from misc.c\n \n+   flag_short_enums : Int;\n+   pragma Import (C, flag_short_enums);\n+   --  Indicates if C enumerations are packed, imported from misc.c\n+\n    save_argc : Nat;\n    pragma Import (C, save_argc);\n    --  Saved value of argc (number of arguments), imported from misc.c\n@@ -262,6 +267,10 @@ package body Back_End is\n \n       Opt.Stack_Checking_Enabled := (flag_stack_check /= 0);\n \n+      --  Acquire short enums flag directly from GCC\n+\n+      Targparm.Short_Enums_On_Target := (flag_short_enums /= 0);\n+\n       --  Put the arguments in Args\n \n       for Arg in Pos range 1 .. save_argc - 1 loop"}, {"sha": "7479436122e4c08f4410745c72f020ac616421a5", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -5157,14 +5157,14 @@ package body Exp_Ch7 is\n          Exceptions_OK : constant Boolean :=\n                            not Restriction_Active (No_Exception_Propagation);\n \n-         procedure Build_Indices;\n-         --  Generate the indices used in the dimension loops\n+         procedure Build_Indexes;\n+         --  Generate the indexes used in the dimension loops\n \n          -------------------\n-         -- Build_Indices --\n+         -- Build_Indexes --\n          -------------------\n \n-         procedure Build_Indices is\n+         procedure Build_Indexes is\n          begin\n             --  Generate the following identifiers:\n             --    Jnn  -  for initialization\n@@ -5173,14 +5173,14 @@ package body Exp_Ch7 is\n                Append_To (Index_List,\n                  Make_Defining_Identifier (Loc, New_External_Name ('J', Dim)));\n             end loop;\n-         end Build_Indices;\n+         end Build_Indexes;\n \n       --  Start of processing for Build_Adjust_Or_Finalize_Statements\n \n       begin\n          Finalizer_Decls := New_List;\n \n-         Build_Indices;\n+         Build_Indexes;\n          Build_Object_Declarations (Finalizer_Data, Finalizer_Decls, Loc);\n \n          Comp_Ref :=\n@@ -5335,8 +5335,8 @@ package body Exp_Ch7 is\n          function Build_Finalization_Call return Node_Id;\n          --  Generate a deep finalization call for an array element\n \n-         procedure Build_Indices;\n-         --  Generate the initialization and finalization indices used in the\n+         procedure Build_Indexes;\n+         --  Generate the initialization and finalization indexes used in the\n          --  dimension loops.\n \n          function Build_Initialization_Call return Node_Id;\n@@ -5411,10 +5411,10 @@ package body Exp_Ch7 is\n          end Build_Finalization_Call;\n \n          -------------------\n-         -- Build_Indices --\n+         -- Build_Indexes --\n          -------------------\n \n-         procedure Build_Indices is\n+         procedure Build_Indexes is\n          begin\n             --  Generate the following identifiers:\n             --    Jnn  -  for initialization\n@@ -5427,7 +5427,7 @@ package body Exp_Ch7 is\n                Append_To (Final_List,\n                  Make_Defining_Identifier (Loc, New_External_Name ('F', Dim)));\n             end loop;\n-         end Build_Indices;\n+         end Build_Indexes;\n \n          -------------------------------\n          -- Build_Initialization_Call --\n@@ -5454,7 +5454,7 @@ package body Exp_Ch7 is\n          Counter_Id := Make_Temporary (Loc, 'C');\n          Finalizer_Decls := New_List;\n \n-         Build_Indices;\n+         Build_Indexes;\n          Build_Object_Declarations (Finalizer_Data, Finalizer_Decls, Loc);\n \n          --  Generate the block which houses the finalization call, the index"}, {"sha": "ece601f2598f8ff1370dc531bca3ddb556dc1cbb", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -5275,10 +5275,16 @@ package body Freeze is\n         and then not Has_Size_Clause (Typ)\n         and then not Has_Size_Clause (Base_Type (Typ))\n         and then Esize (Typ) < Standard_Integer_Size\n+\n+        --  Don't do this if Short_Enums on target\n+\n+        and then not Short_Enums_On_Target\n       then\n          Init_Esize (Typ, Standard_Integer_Size);\n          Set_Alignment (Typ, Alignment (Standard_Integer));\n \n+      --  Normal Ada case or size clause present or not Long_C_Enums on target\n+\n       else\n          --  If the enumeration type interfaces to C, and it has a size clause\n          --  that specifies less than int size, it warrants a warning. The\n@@ -5292,6 +5298,10 @@ package body Freeze is\n            and then Esize (Typ) /= Esize (Standard_Integer)\n            and then not Is_Boolean_Type (Typ)\n            and then not Is_Character_Type (Typ)\n+\n+           --  Don't do this if Short_Enums on target\n+\n+           and then not Short_Enums_On_Target\n          then\n             Error_Msg_N\n               (\"C enum types have the size of a C int??\", Size_Clause (Typ));"}, {"sha": "e6c23469a75d0c939f94f2e44a02e58e14697df4", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -219,21 +219,37 @@ package body Prj.Env is\n \n       Dummy : Boolean := False;\n \n+      Result : String_Access;\n+\n    --  Start of processing for Ada_Objects_Path\n \n    begin\n       --  If it is the first time we call this function for\n       --  this project, compute the objects path\n \n-      if Project.Ada_Objects_Path = null then\n+      if Including_Libraries and then Project.Ada_Objects_Path /= null then\n+         return Project.Ada_Objects_Path;\n+\n+      elsif not Including_Libraries\n+        and then Project.Ada_Objects_Path_No_Libs /= null\n+      then\n+         return Project.Ada_Objects_Path_No_Libs;\n+\n+      else\n          Buffer := new String (1 .. 4096);\n          For_All_Projects (Project, In_Tree, Dummy);\n-\n-         Project.Ada_Objects_Path := new String'(Buffer (1 .. Buffer_Last));\n+         Result := new String'(Buffer (1 .. Buffer_Last));\n          Free (Buffer);\n-      end if;\n \n-      return Project.Ada_Objects_Path;\n+         if Including_Libraries then\n+            Project.Ada_Objects_Path := Result;\n+\n+         else\n+            Project.Ada_Objects_Path_No_Libs := Result;\n+         end if;\n+\n+         return Result;\n+      end if;\n    end Ada_Objects_Path;\n \n    -------------------"}, {"sha": "831ce8c4a2b9e83ce1ce0c4ae96adf085076bd28", "filename": "gcc/ada/prj-env.ads", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fprj-env.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fprj-env.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.ads?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -90,9 +90,12 @@ package Prj.Env is\n      (Project             : Project_Id;\n       In_Tree             : Project_Tree_Ref;\n       Including_Libraries : Boolean := True) return String_Access;\n-   --  Get the ADA_OBJECTS_PATH of a Project file. For the first call, compute\n-   --  it and cache it. When Including_Libraries is False, do not include the\n-   --  object directories of the library projects, and do not cache the result.\n+   --  Get the ADA_OBJECTS_PATH of a Project file. For the first call with the\n+   --  exact same parameters, compute it and cache it. When Including_Libraries\n+   --  is False, the object directory of a library project is replaced with the\n+   --  library ALI directory of this project (usually the library directory of\n+   --  the project, except when attribute Library_ALI_Dir is declared) except\n+   --  when the library ALI directory does not contain any ALI file.\n \n    procedure Set_Ada_Paths\n      (Project             : Project_Id;"}, {"sha": "5768e1afca09fe3fc64ef3704ac9c397646a85dd", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -1105,6 +1105,7 @@ package body Prj is\n          Free (Project.Ada_Include_Path);\n          Free (Project.Objects_Path);\n          Free (Project.Ada_Objects_Path);\n+         Free (Project.Ada_Objects_Path_No_Libs);\n          Free_List (Project.Imported_Projects, Free_Project => False);\n          Free_List (Project.All_Imported_Projects, Free_Project => False);\n          Free_List (Project.Languages);\n@@ -1485,7 +1486,10 @@ package body Prj is\n \n          if Project.Library then\n             if Project.Object_Directory = No_Path_Information\n-              or else Contains_ALI_Files (Project.Library_ALI_Dir.Display_Name)\n+              or else\n+                (Including_Libraries\n+                 and then\n+                 Contains_ALI_Files (Project.Library_ALI_Dir.Display_Name))\n             then\n                return Project.Library_ALI_Dir.Display_Name;\n             else"}, {"sha": "bcfb6d01182d2ebe9a75e2148aad120983a9bef2", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -973,11 +973,12 @@ package Prj is\n       Only_If_Ada         : Boolean := False) return Path_Name_Type;\n    --  Return the object directory to use for the project. This depends on\n    --  whether we have a library project or a standard project. This function\n-   --  might return No_Name when no directory applies.\n-   --  If we have a library project file and Including_Libraries is True then\n-   --  the library dir is returned instead of the object dir.\n-   --  If Only_If_Ada is True, then No_Name will be returned when the project\n-   --  doesn't Ada sources.\n+   --  might return No_Name when no directory applies. If the project is a\n+   --  library project file and Including_Libraries is True then the library\n+   --  ALI dir is returned instead of the object dir, except when there is no\n+   --  ALI files in the Library ALI dir and the object directory exists. If\n+   --  Only_If_Ada is True, then No_Name is returned when the project doesn't\n+   --  include any Ada source.\n \n    procedure Compute_All_Imported_Projects\n      (Root_Project : Project_Id;\n@@ -1400,9 +1401,14 @@ package Prj is\n       -------------------\n \n       Ada_Objects_Path : String_Access := null;\n-      --  The cached value of ADA_OBJECTS_PATH for this project file. Do not\n-      --  use this field directly outside of the compiler, use\n-      --  Prj.Env.Ada_Objects_Path instead.\n+      --  The cached value of ADA_OBJECTS_PATH for this project file, with\n+      --  library ALI directories for library projects instead of object\n+      --  directories. Do not use this field directly outside of the\n+      --  compiler, use Prj.Env.Ada_Objects_Path instead.\n+\n+      Ada_Objects_Path_No_Libs : String_Access := null;\n+      --  The cached value of ADA_OBJECTS_PATH for this project file with all\n+      --  object directories (no library ALI dir for library projects).\n \n       Libgnarl_Needed : Yes_No_Unknown := Unknown;\n       --  Set to True when libgnarl is needed to link"}, {"sha": "ff05953d2c53d4bd5725a55bab5d36bc6a4e39d6", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -82,6 +82,15 @@ package Scans is\n       Tok_Others,          -- OTHERS\n       Tok_Null,            -- NULL\n \n+      --  Note: Tok_Raise is in no categories now, it used to be Cterm, Eterm,\n+      --  After_SM, but now that Ada 2012 has added raise expressions, the\n+      --  raise token can appear anywhere. Note in particular that Tok_Raise\n+      --  being in Eterm stopped the parser from recognizing \"return raise\n+      --  exception-name\". This degrades error recovery slightly, and perhaps\n+      --  we could do better, but not worth the effort.\n+\n+      Tok_Raise,           -- RAISE\n+\n       Tok_Dot,             -- .            Namext\n       Tok_Apostrophe,      -- '            Namext\n \n@@ -148,7 +157,6 @@ package Scans is\n       Tok_Goto,            -- GOTO         Eterm, Sterm, After_SM\n       Tok_If,              -- IF           Eterm, Sterm, After_SM\n       Tok_Pragma,          -- PRAGMA       Eterm, Sterm, After_SM\n-      Tok_Raise,           -- RAISE        Eterm, Sterm, After_SM\n       Tok_Requeue,         -- REQUEUE      Eterm, Sterm, After_SM\n       Tok_Return,          -- RETURN       Eterm, Sterm, After_SM\n       Tok_Select,          -- SELECT       Eterm, Sterm, After_SM"}, {"sha": "032528738d8a8e5c210c0d9ab6c491fbb5326494", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -6109,23 +6109,25 @@ package body Sem_Attr is\n                         --  dimensional array.\n \n                         Index_Type := First_Index (P_Type);\n+\n                         Index := First (Choices (Assoc));\n                         while Present (Index) loop\n                            if Nkind (Index) = N_Range then\n-                              Analyze_And_Resolve (\n-                                Low_Bound (Index), Etype (Index_Type));\n-                              Analyze_And_Resolve (\n-                               High_Bound (Index), Etype (Index_Type));\n+                              Analyze_And_Resolve\n+                                (Low_Bound (Index), Etype (Index_Type));\n+                              Analyze_And_Resolve\n+                                (High_Bound (Index), Etype (Index_Type));\n \n                            else\n                               Analyze_And_Resolve (Index, Etype (Index_Type));\n                            end if;\n+\n                            Next (Index);\n                         end loop;\n \n-                     else\n-                        --  Choice is a sequence of indices for each dimension\n+                     --  Choice is a sequence of indexes for each dimension\n \n+                     else\n                         Index_Type := First_Index (P_Type);\n                         Index := First (Expressions (First (Choices (Assoc))));\n                         while Present (Index_Type)\n@@ -6137,8 +6139,8 @@ package body Sem_Attr is\n                         end loop;\n \n                         if Present (Index) or else Present (Index_Type) then\n-                           Error_Msg_N (\n-                            \"dimension mismatch in index list\", Assoc);\n+                           Error_Msg_N\n+                             (\"dimension mismatch in index list\", Assoc);\n                         end if;\n                      end if;\n                   end;"}, {"sha": "1a0aa5222846c1541e6ccab27458086227a2769c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -10790,6 +10790,10 @@ package body Sem_Ch13 is\n \n       if Has_Foreign_Convention (T)\n         and then Esize (T) < Standard_Integer_Size\n+\n+        --  Don't do this if Short_Enums on target\n+\n+        and then not Short_Enums_On_Target\n       then\n          Init_Esize (T, Standard_Integer_Size);\n       else"}, {"sha": "c90be0cc5022f01434aef1cf9d3b65fa21680870", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -9686,7 +9686,7 @@ package body Sem_Ch3 is\n                then\n                   --  If an inherited subprogram is implemented by a protected\n                   --  procedure or an entry, then the first parameter of the\n-                  --  inherited subprogram shall be of mode out or in out, or\n+                  --  inherited subprogram shall be of mode OUT or IN OUT, or\n                   --  an access-to-variable parameter (RM 9.4(11.9/3))\n \n                   if Is_Protected_Type (Corresponding_Concurrent_Type (T))"}, {"sha": "a5be2903819515e4b955f1d241f5c9c37e8ca3de", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -1680,12 +1680,21 @@ package body Sem_Ch5 is\n \n       Ent : Entity_Id;\n       Typ : Entity_Id;\n+      Bas : Entity_Id;\n \n    begin\n       Enter_Name (Def_Id);\n \n       if Present (Subt) then\n          Analyze (Subt);\n+\n+         --  Save type of subtype indication for subsequent check.\n+\n+         if Nkind (Subt) = N_Subtype_Indication then\n+            Bas := Entity (Subtype_Mark (Subt));\n+         else\n+            Bas := Entity (Subt);\n+         end if;\n       end if;\n \n       Preanalyze_Range (Iter_Name);\n@@ -1804,6 +1813,13 @@ package body Sem_Ch5 is\n          if Of_Present (N) then\n             Set_Etype (Def_Id, Component_Type (Typ));\n \n+            if Present (Subt)\n+              and then Bas /= Base_Type (Component_Type (Typ))\n+            then\n+               Error_Msg_N\n+                 (\"subtype indication does not match component type\", Subt);\n+            end if;\n+\n          --  Here we have a missing Range attribute\n \n          else\n@@ -1849,6 +1865,17 @@ package body Sem_Ch5 is\n                else\n                   Set_Etype (Def_Id, Entity (Element));\n \n+                  --  If subtype indication was given, verify that it matches\n+                  --  element type of container.\n+\n+                  if Present (Subt)\n+                     and then Bas /= Base_Type (Etype (Def_Id))\n+                  then\n+                     Error_Msg_N\n+                       (\"subtype indication does not match element type\",\n+                          Subt);\n+                  end if;\n+\n                   --  If the container has a variable indexing aspect, the\n                   --  element is a variable and is modifiable in the loop.\n "}, {"sha": "b59f58b79f0beb6c4e8fcc3b9980c4dbdf2f39de", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -63,6 +63,7 @@ package body Targparm is\n       SCD,  --   Stack_Check_Default\n       SCL,  --   Stack_Check_Limits\n       SCP,  --   Stack_Check_Probes\n+      SHE,  --   Short_Enums\n       SLS,  --   Support_Long_Shifts\n       SNZ,  --   Signed_Zeros\n       SSL,  --   Suppress_Standard_Library\n@@ -101,6 +102,7 @@ package body Targparm is\n    SCD_Str : aliased constant Source_Buffer := \"Stack_Check_Default\";\n    SCL_Str : aliased constant Source_Buffer := \"Stack_Check_Limits\";\n    SCP_Str : aliased constant Source_Buffer := \"Stack_Check_Probes\";\n+   SHE_Str : aliased constant Source_Buffer := \"Short_Enums\";\n    SLS_Str : aliased constant Source_Buffer := \"Support_Long_Shifts\";\n    SNZ_Str : aliased constant Source_Buffer := \"Signed_Zeros\";\n    SSL_Str : aliased constant Source_Buffer := \"Suppress_Standard_Library\";\n@@ -139,6 +141,7 @@ package body Targparm is\n       SCD_Str'Access,\n       SCL_Str'Access,\n       SCP_Str'Access,\n+      SHE_Str'Access,\n       SLS_Str'Access,\n       SNZ_Str'Access,\n       SSL_Str'Access,\n@@ -587,6 +590,7 @@ package body Targparm is\n                      when EXS => Exit_Status_Supported_On_Target     := Result;\n                      when FEL => Frontend_Layout_On_Target           := Result;\n                      when FFO => Fractional_Fixed_Ops_On_Target      := Result;\n+\n                      when JVM =>\n                         if Result then\n                            VM_Target := JVM_Target;\n@@ -608,6 +612,7 @@ package body Targparm is\n                      when SCD => Stack_Check_Default_On_Target       := Result;\n                      when SCL => Stack_Check_Limits_On_Target        := Result;\n                      when SCP => Stack_Check_Probes_On_Target        := Result;\n+                     when SHE => Short_Enums_On_Target               := Result;\n                      when SLS => Support_Long_Shifts_On_Target       := Result;\n                      when SSL => Suppress_Standard_Library_On_Target := Result;\n                      when SNZ => Signed_Zeros_On_Target              := Result;"}, {"sha": "f89ebfe97cc9bd94b2c95d3b9b1a531016292321", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ef7921074e2de8f6d4f96b9973ed32e63c0060/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=d0ef7921074e2de8f6d4f96b9973ed32e63c0060", "patch": "@@ -197,7 +197,7 @@ package Targparm is\n    ----------------------------\n \n    --  The great majority of GNAT ports are based on GCC. The switches in\n-   --  This section indicate the use of some non-standard target back end\n+   --  this section indicate the use of some non-standard target back end\n    --  or other special targetting requirements.\n \n    AAMP_On_Target : Boolean := False;\n@@ -605,6 +605,24 @@ package Targparm is\n    Frontend_Layout_On_Target : Boolean := False;\n    --  Set True if front end does layout\n \n+   Short_Enums_On_Target : Boolean := False;\n+   --  In most C ABI's, enumeration types always have int size. If this switch\n+   --  is False, which is the default, that's what the front end implements for\n+   --  enumeration types with a foreign convention (includ C and C++). However\n+   --  on some ABI's (notably the ARM-EABI), enumeration types have sizes that\n+   --  are minimal for the range of values. For such cases this switch is set\n+   --  True (in the appropriate System file), and the front-end uses the normal\n+   --  Ada rules for sizing enumeration types (which correspond to this method\n+   --  of selecting the shortest signed or unsigned integer representation that\n+   --  can accomodate the number of items in the type, or the range of values\n+   --  if an enumeration representation clause is used.\n+   --  the same size as C int, or Ada Integer. That's the most common case, but\n+   --  there are targets (most notably those following the ARM-EABI) where the\n+   --  size for enumeration types is the same as in Ada (i.e. the smallest\n+   --  integer type that accomodates the number of enumeration choices, or the\n+   --  range of values in an enumeration-representation clause). For such cases\n+   --  this switch is set to False in the corresponding System file.\n+\n    -----------------\n    -- Subprograms --\n    -----------------"}]}