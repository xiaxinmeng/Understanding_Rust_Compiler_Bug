{"sha": "6cb68ff4c175e12489c52cadb0af799b36327075", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiNjhmZjRjMTc1ZTEyNDg5YzUyY2FkYjBhZjc5OWIzNjMyNzA3NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-06T18:08:35Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-06T18:08:35Z"}, "message": "Initial revision\n\nFrom-SVN: r15841", "tree": {"sha": "82223dd2612de22ce050b2f49852692606d6551c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82223dd2612de22ce050b2f49852692606d6551c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cb68ff4c175e12489c52cadb0af799b36327075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb68ff4c175e12489c52cadb0af799b36327075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb68ff4c175e12489c52cadb0af799b36327075", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb68ff4c175e12489c52cadb0af799b36327075/comments", "author": null, "committer": null, "parents": [{"sha": "dc84d7bca16667ac2d2935a166c0cfc67913b832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc84d7bca16667ac2d2935a166c0cfc67913b832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc84d7bca16667ac2d2935a166c0cfc67913b832"}], "stats": {"total": 318, "additions": 318, "deletions": 0}, "files": [{"sha": "a2a2177a94ffc7bdf5c5fcab130cdf0fedd6d656", "filename": "gcc/testsuite/g77.f-torture/compile/compile.exp", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2Fcompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2Fcompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2Fcompile.exp?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,44 @@\n+# Expect driver script for GCC Regression Tests\n+# Copyright (C) 1993, 1995, 1997 Free Software Foundation\n+#\n+# This file is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. \n+\n+# These tests come from Torbjorn Granlund's (tege@cygnus.com)\n+# F torture test suite, and other contributors.\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# load support procs\n+load_lib f-torture.exp\n+\n+foreach testcase [glob -nocomplain $srcdir/$subdir/*.f] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+\n+    f-torture $testcase\n+}\n+\n+foreach testcase [glob -nocomplain $srcdir/$subdir/*.F] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+\n+    f-torture $testcase\n+}"}, {"sha": "6b6847c4de5616f2edc96cc8c2a3fac6d51803d2", "filename": "gcc/testsuite/g77.f-torture/compile/toon_1.f", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2Ftoon_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2Ftoon_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2Ftoon_1.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,3 @@\n+      SUBROUTINE AAP(NOOT)\n+      DIMENSION NOOT(*)\n+      END"}, {"sha": "7cda74ebd45f0f1bbdff9a3157d231f4497a1f21", "filename": "gcc/testsuite/g77.f-torture/execute/alpha1.f", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Falpha1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Falpha1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Falpha1.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,10 @@\n+      REAL*8 A,B,C\n+      REAL*4 RARRAY(19)/19*(-1)/\n+      INTEGER BOTTOM,RIGHT\n+      INTEGER IARRAY(19)/0,0,0,0,0,0,0,0,0,0,0,0,13,14,0,0,0,0,0/\n+      EQUIVALENCE (RARRAY(13),BOTTOM),(RARRAY(14),RIGHT)\n+C\n+      IF(I.NE.0) call exit(1)\n+C gcc: Internal compiler error: program f771 got fatal signal 11\n+C  at this point!\n+      END"}, {"sha": "c22417137028e57aa842111b98014f99aec7766c", "filename": "gcc/testsuite/g77.f-torture/execute/alpha2.f", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Falpha2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Falpha2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Falpha2.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,9 @@\n+      IMPLICIT REAL*8 (A-H,O-Z)\n+      COMMON /C/   A(9), INT\n+      DATA A      /\n+     1                 0.49999973986348730D01, 0.40000399113084100D01,\n+     2                 0.29996921166596490D01, 0.20016917082678680D01,\n+     3                 0.99126390351864390D00, 0.97963256554443300D-01,\n+     4                -0.87360964813570100D-02, 0.16917082678692080D-02,\n+     5                -0.26013651283774820D-05                         /\n+      END"}, {"sha": "85ee44e573cd166e2eb59d35e55ee499b453b94a", "filename": "gcc/testsuite/g77.f-torture/execute/cabs.f", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fcabs.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fcabs.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fcabs.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,14 @@\n+      program cabs_1\n+      complex      z0\n+      real         r0\n+      complex*16   z1\n+      real*8       r1\n+\n+      z0 = cmplx(3.,4.)\n+      r0 = cabs(z0)\n+      if (r0 .ne. 5.) call exit(1)\n+\n+      z1 = dcmplx(3.d0,4.d0)\n+      r1 = zabs(z1)\n+      if (r1 .ne. 5.d0) call exit(1)\n+      end"}, {"sha": "051fdff59a9f6a1ba9dc0d3cb7e98907033ff9eb", "filename": "gcc/testsuite/g77.f-torture/execute/claus.f", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fclaus.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fclaus.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fclaus.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,13 @@\n+        PROGRAM TEST\n+        REAL AB(3)\n+        do i=1,3\n+         AB(i)=i\n+        enddo\n+        k=1\n+        n=2\n+        ind=k-n+2\n+\tif (ind /= 1) call exit(1)\n+\tif (ab(ind) /= 1) call exit(1)\n+\tif (k-n+2 /= 1) call exit(1)\n+\tif (ab(k-n+2) /= 1) call exit(1)\n+        END"}, {"sha": "0569be0cdfc307ea8afd46e85c98e42c06fc3ef3", "filename": "gcc/testsuite/g77.f-torture/execute/complex_1.f", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fcomplex_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fcomplex_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fcomplex_1.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,18 @@\n+      program complex_1\n+      complex      z0, z1, z2\n+\n+      z0 = cmplx(0.,.5)\n+      z1 = 1./z0\n+      if (z1 .ne. cmplx(0.,-2)) call exit(1)\n+\n+      z0 = 10.*z0\n+      if (z0 .ne. cmplx(0.,5.)) call exit(1)\n+\n+      z2 = cmplx(1.,2.)\n+      z1 = z0/z2\n+      if (z1 .ne. cmplx(2.,1.)) call exit(1)\n+\n+      z1 = z0*z2\n+      if (z1 .ne. cmplx(-10.,5.)) call exit(1)\n+      end\n+"}, {"sha": "9156cd5b6b1e6d57f390e0a13ae6db4c9a737729", "filename": "gcc/testsuite/g77.f-torture/execute/cpp.F", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fcpp.F", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fcpp.F", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fcpp.F?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,5 @@\n+!  Some versions of cpp will delete \"//'World' as a C++ comment.\n+      character*40    title\n+      title = 'Hello '//'World'\n+      if (title .ne. 'Hello World') stop 1\n+      end"}, {"sha": "7848ab38f99c38bb12dcfa589cee2bdae02517ca", "filename": "gcc/testsuite/g77.f-torture/execute/dcomplex.f", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fdcomplex.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fdcomplex.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fdcomplex.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,18 @@\n+      program foo\n+      complex*16      z0, z1, z2\n+\n+      z0 = dcmplx(0.,.5)\n+      z1 = 1./z0\n+      if (z1 .ne. dcmplx(0.,-2)) call exit(1)\n+\n+      z0 = 10.*z0\n+      if (z0 .ne. dcmplx(0.,5.)) call exit(1)\n+\n+      z2 = cmplx(1.,2.)\n+      z1 = z0/z2\n+      if (z1 .ne. dcmplx(2.,1.)) call exit(1)\n+\n+      z1 = z0*z2\n+      if (z1 .ne. dcmplx(-10.,5.)) call exit(1)\n+      end\n+"}, {"sha": "b3cf7f6b36f23581436bd16782130b0ddef46e7a", "filename": "gcc/testsuite/g77.f-torture/execute/erfc.f", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Ferfc.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Ferfc.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Ferfc.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,37 @@\n+c============================================== test.f\n+                real x, y\n+\t\treal*8 x1, y1\n+\t\tx=0.\n+\t\ty = erfc(x)\n+\t\tif (y .ne. 1.) call exit(1)\n+\n+\t\tx=1.1\n+\t\ty = erfc(x)\n+\t\tif (abs(y - .1197949) .ge. 1.e-6) call exit(1)\n+\n+\t\tx=10\n+\t\ty = erfc(x)\n+\t\tif (y .gt. 1.5e-44) call exit(1)\n+\n+\t\tx1=0.\n+\t\ty1 = erfc(x1)\n+\t\tif (y1 .ne. 1.) call exit(1)\n+\n+\t\tx1=1.1d0\n+\t\ty1 = erfc(x1)\n+\t\tif (abs(y1 - .1197949d0) .ge. 1.d-6) call exit(1)\n+\n+\t\tx1=10\n+\t\ty1 = erfc(x1)\n+\t\tif (y1 .gt. 1.5d-44) call exit(1)\n+\t\tend\n+c=================================================\n+!output:\n+!  0.  1.875\n+!  1.10000002  1.48958981\n+!  10.  5.00220949E-06\n+!\n+!The values should be:\n+!erfc(0)=1\n+!erfc(1.1)= 0.1197949\n+!erfc(10)<1.543115467311259E-044"}, {"sha": "31608eed4f95e698c5728b1a5a30439644d1fe7c", "filename": "gcc/testsuite/g77.f-torture/execute/execute.exp", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fexecute.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fexecute.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fexecute.exp?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,55 @@\n+# Copyright (C) 1991, 1992, 1993, 1995, 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. \n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# bug-g77@prep.ai.mit.edu\n+\n+# This file was written by Rob Savoye. (rob@cygnus.com)\n+# Modified and maintained by Jeffrey Wheat (cassidy@cygnus.com)\n+\n+#\n+# These tests come from Torbjorn Granlund (tege@cygnus.com)\n+# Fortran torture test suite.\n+#\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# load support procs\n+load_lib f-torture.exp\n+\n+#\n+# main test loop\n+#\n+\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.f]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+\tcontinue\n+    }\n+\n+    f-torture-execute $src\n+}\n+\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.F]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+\tcontinue\n+    }\n+\n+    f-torture-execute $src\n+}"}, {"sha": "6ae7ae354f9aadc5ef772e03e3c25fe79c38ad5e", "filename": "gcc/testsuite/g77.f-torture/execute/exp.f", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fexp.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fexp.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fexp.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,3 @@\n+      a = 2**-2*1.\n+      if (a .ne. .25) call exit(1)\n+      end"}, {"sha": "0af5b1b0b3f016e0ef7e65390f4e84eb7f5abc37", "filename": "gcc/testsuite/g77.f-torture/execute/large_vec.f", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Flarge_vec.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Flarge_vec.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Flarge_vec.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,3 @@\n+      parameter (nmax=165000)\n+      double precision x(nmax)\n+      end"}, {"sha": "e315671760ec2ca72e7a53f7fa08406b81cebbe0", "filename": "gcc/testsuite/g77.f-torture/execute/le.f", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fle.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fle.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fle.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,29 @@\n+      program fool\n+\n+      real     foo\n+      integer  n\n+      logical  t\n+\n+      foo = 2.5\n+      n = 5\n+\n+      t = (n > foo)\n+      if (t .neqv. .true.) call exit(1)\n+      t = (n >= foo)\n+      if (t .neqv. .true.) call exit(1)\n+      t = (n < foo)\n+      if (t .neqv. .false.) call exit(1)\n+      t = (n <= 5)\n+      if (t .neqv. .true.) call exit(1)\n+      t = (n >= 5 )\n+      if (t .neqv. .true.) call exit(1)\n+      t = (n == 5)\n+      if (t .neqv. .true.) call exit(1)\n+      t = (n /= 5)\n+      if (t .neqv. .false.) call exit(1)\n+      t = (n /= foo)\n+      if (t .neqv. .true.) call exit(1)\n+      t = (n == foo)\n+      if (t .neqv. .false.) call exit(1)\n+\n+      end"}, {"sha": "b5964b51489c1d02d2836e213200755782e85950", "filename": "gcc/testsuite/g77.f-torture/execute/short.f", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fshort.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb68ff4c175e12489c52cadb0af799b36327075/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fshort.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fshort.f?ref=6cb68ff4c175e12489c52cadb0af799b36327075", "patch": "@@ -0,0 +1,57 @@\n+      program short\n+\n+      parameter   (   N=2  )\n+      common /chb/    pi,sig(0:N)\n+      common /parm/   h(2,2)\n+\n+c  initialize some variables\n+      h(2,2) = 1117\n+      h(2,1) = 1178\n+      h(1,2) = 1568\n+      h(1,1) = 1621\n+      sig(0) = -1.\n+      sig(1) = 0.\n+      sig(2) = 1.\n+\n+      call printout\n+      stop\n+      end\n+\n+c ******************************************************************\n+\n+      subroutine printout\n+      parameter   (   N=2  )\n+      common /chb/    pi,sig(0:N)\n+      common /parm/   h(2,2)\n+      dimension       yzin1(0:N), yzin2(0:N)\n+\n+c  function subprograms\n+      z(i,j,k) = 0.5*h(i,j)*(sig(k)-1.)\n+\n+c  a four-way average of rhobar\n+      do 260  k=0,N\n+        yzin1(k) = 0.25 * \n+     &       ( z(2,2,k) + z(1,2,k) +\n+     &         z(2,1,k) + z(1,1,k) )\n+  260       continue\n+\n+c  another four-way average of rhobar\n+      do 270  k=0,N\n+\trtmp1 = z(2,2,k)\n+\trtmp2 = z(1,2,k)\n+\trtmp3 = z(2,1,k)\n+\trtmp4 = z(1,1,k)\n+        yzin2(k) = 0.25 * \n+     &       ( rtmp1 + rtmp2 + rtmp3 + rtmp4 )\n+  270       continue\n+\n+      do k=0,N\n+\tif (yzin1(k) .ne. yzin2(k)) call exit(1)\n+      enddo\n+      if (yzin1(0) .ne. -1371.) call exit(1)\n+      if (yzin1(1) .ne. -685.5) call exit(1)\n+      if (yzin1(2) .ne. 0.) call exit(1)\n+\n+      return\n+      end\n+"}]}