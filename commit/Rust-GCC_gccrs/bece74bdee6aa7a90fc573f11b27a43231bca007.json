{"sha": "bece74bdee6aa7a90fc573f11b27a43231bca007", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVjZTc0YmRlZTZhYTdhOTBmYzU3M2YxMWIyN2E0MzIzMWJjYTAwNw==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "2000-06-30T15:25:33Z"}, "committer": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "2000-06-30T15:25:33Z"}, "message": "in libiberty/ChangeLog:\n\n\t* cp-demangle.c (demangle_encoding): Accept no substitutions.\n\t(demangle_name): Handle <substitution> followed by\n\t<unqualified-template-name>.\n\t(demangle_type): Follow special substitutions with\n\t<class-enum-type>\n\t(demangle_subtitution): Set template_p for special substitutions.\n\t(main): Fix typos.\n\nin gcc/cp/ChangeLog:\n\n\t* mangle.c (find_substitution): Use same_type_p.\n\t(write_encoding): Don't check for substitutions.\n\nin libio/ChangeLog:\n\n\t* libioP.h (VTABLE_LABEL): Update for new vtable mangling.\n\t* stdstrbufs.cc (filebuf_vtable): Likewise.\n\t(stdiobuf_vtable): Likewise.\n\nFrom-SVN: r34811", "tree": {"sha": "67c66f46e7f0fe9c54e0629a21c96199e0fae8f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67c66f46e7f0fe9c54e0629a21c96199e0fae8f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bece74bdee6aa7a90fc573f11b27a43231bca007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bece74bdee6aa7a90fc573f11b27a43231bca007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bece74bdee6aa7a90fc573f11b27a43231bca007", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bece74bdee6aa7a90fc573f11b27a43231bca007/comments", "author": null, "committer": null, "parents": [{"sha": "af80d489916e279bdb3f75ca458b1d323205120f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af80d489916e279bdb3f75ca458b1d323205120f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af80d489916e279bdb3f75ca458b1d323205120f"}], "stats": {"total": 107, "additions": 61, "deletions": 46}, "files": [{"sha": "6d75cde691bf6426308a698398ab87651f07280e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bece74bdee6aa7a90fc573f11b27a43231bca007/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bece74bdee6aa7a90fc573f11b27a43231bca007/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bece74bdee6aa7a90fc573f11b27a43231bca007", "patch": "@@ -1,3 +1,8 @@\n+2000-06-28  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* mangle.c (find_substitution): Use same_type_p.\n+\t(write_encoding): Don't check for substitutions.\n+\n 2000-06-30  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* parse.y (expr_no_comma_rangle): New non-terminal.\n@@ -78,6 +83,7 @@\n \t(overloaded_template_name): Adjust.\n \t* semantics.c (finish_template_template_parm): Adjust.\n \n+>>>>>>> 1.1867\n 2000-06-28  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (CLEAR_BINFO_NEW_VTABLE_MARKED): Remove."}, {"sha": "594e25c5a711c70cf928fecaf6989b3c483f8ad6", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bece74bdee6aa7a90fc573f11b27a43231bca007/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bece74bdee6aa7a90fc573f11b27a43231bca007/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=bece74bdee6aa7a90fc573f11b27a43231bca007", "patch": "@@ -463,7 +463,7 @@ find_substitution (node)\n \t    {\n \t      tree args = CLASSTYPE_TI_ARGS (type);\n \t      if (TREE_VEC_LENGTH (args) == 3\n-\t\t  && TREE_VEC_ELT (args, 0) == char_type_node\n+\t\t  && same_type_p (TREE_VEC_ELT (args, 0), char_type_node)\n \t\t  && is_std_substitution_char (TREE_VEC_ELT (args, 1),\n \t\t\t\t\t       SUBID_CHAR_TRAITS)\n \t\t  && is_std_substitution_char (TREE_VEC_ELT (args, 2),\n@@ -493,7 +493,7 @@ find_substitution (node)\n \t args <char, std::char_traits<char> > .  */\n       tree args = CLASSTYPE_TI_ARGS (type);\n       if (TREE_VEC_LENGTH (args) == 2\n-\t  && TREE_VEC_ELT (args, 0) == char_type_node\n+\t  && same_type_p (TREE_VEC_ELT (args, 0), char_type_node)\n \t  && is_std_substitution_char (TREE_VEC_ELT (args, 1),\n \t\t\t\t       SUBID_CHAR_TRAITS))\n \t{\n@@ -570,18 +570,14 @@ write_mangled_name (decl)\n }\n \n /*   <encoding>\t\t::= <function name> <bare-function-type>\n-\t\t\t::= <data name>\n-\t\t\t::= <substitution>  */\n+\t\t\t::= <data name>  */\n \n static void\n write_encoding (decl)\n      tree decl;\n {\n   MANGLE_TRACE_TREE (\"encoding\", decl);\n \n-  if (find_substitution (decl))\n-    return;\n-\n   if (DECL_LANG_SPECIFIC (decl) && DECL_EXTERN_C_FUNCTION_P (decl))\n     {\n       write_source_name (DECL_NAME (decl));\n@@ -600,8 +596,6 @@ write_encoding (decl)\n \n       write_bare_function_type (fn_type, DECL_TEMPLATE_ID_P (decl));\n     }\n-\n-  add_substitution (decl);\n }\n \n /* <name> ::= <unscoped-name>"}, {"sha": "323a6915a4053358637d45961a8318099ec423fa", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bece74bdee6aa7a90fc573f11b27a43231bca007/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bece74bdee6aa7a90fc573f11b27a43231bca007/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=bece74bdee6aa7a90fc573f11b27a43231bca007", "patch": "@@ -1,3 +1,13 @@\n+2000-06-28  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* cp-demangle.c (demangle_encoding): Accept no substitutions.\n+\t(demangle_name): Handle <substitution> followed by\n+\t<unqualified-template-name>.\n+\t(demangle_type): Follow special substitutions with\n+\t<class-enum-type>\n+\t(demangle_subtitution): Set template_p for special substitutions.\n+\t(main): Fix typos.\n+\t\n 2000-06-27  Alex Samuel  <samuel@codesourcery.com>\n \n \t* cp-demangle.c (demangle_special_name): Swap base and derived"}, {"sha": "de70b8963bdcbfe5d170097cc2177f681bf460c5", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bece74bdee6aa7a90fc573f11b27a43231bca007/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bece74bdee6aa7a90fc573f11b27a43231bca007/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=bece74bdee6aa7a90fc573f11b27a43231bca007", "patch": "@@ -902,16 +902,14 @@ demangle_mangled_name (dm)\n \n     <encoding>\t\t::= <function name> <bare-function-type>\n \t\t\t::= <data name>\n-\t\t\t::= <substitution>  */\n+\t\t\t::= <special-name>  */\n \n static status_t\n demangle_encoding (dm)\n      demangling_t dm;\n {\n   int template_p;\n-  int special_std_substitution;\n   int start_position;\n-  int start = substitution_start (dm);\n   template_arg_list_t old_arg_list = current_template_arg_list (dm);\n   char peek = peek_char (dm);\n \n@@ -921,18 +919,7 @@ demangle_encoding (dm)\n      function, we'll have to insert the return type here.  */\n   start_position = result_length (dm);\n \n-  if (peek == 'S')\n-    {\n-      RETURN_IF_ERROR (demangle_substitution (dm, &template_p,\n-\t\t\t\t\t      &special_std_substitution));\n-      if (special_std_substitution)\n-\t{\n-\t  /* This was the magic `std::' substitution.  */\n-\t  RETURN_IF_ERROR (result_append (dm, \"::\"));\n-\t  RETURN_IF_ERROR (demangle_encoding (dm));\n-\t}\n-    }\n-  else if (peek == 'G' || peek == 'T')\n+  if (peek == 'G' || peek == 'T')\n     RETURN_IF_ERROR (demangle_special_name (dm));\n   else\n     {\n@@ -955,9 +942,6 @@ demangle_encoding (dm)\n \t    RETURN_IF_ERROR \n \t      (demangle_bare_function_type (dm, BFT_NO_RETURN_TYPE)); \n \t}\n-\n-      RETURN_IF_ERROR (substitution_add (dm, start, template_p, \n-\t\t\t\t\t NOT_TEMPLATE_PARM));\n     }\n \n   /* Pop off template argument lists that were built during the\n@@ -1004,8 +988,7 @@ demangle_name (dm, template_p)\n \n     case 'S':\n       /* The `St' substitution allows a name nested in std:: to appear\n-\t without being enclosed in a nested name.\n-\t   <name> ::= St <unqualified-name>     # ::std::  */\n+\t without being enclosed in a nested name.  */\n       if (peek_char_next (dm) == 't') \n \t{\n \t  (void) next_char (dm);\n@@ -1026,6 +1009,14 @@ demangle_name (dm, template_p)\n \t      RETURN_IF_ERROR (demangle_name (dm, template_p));\n \t    }\n \t}\n+      /* Check if a template argument list immediately follows.\n+\t If so, then we just demangled an <unqualified-template-name>.  */\n+      if (peek_char (dm) == 'I') \n+\t{\n+\t  RETURN_IF_ERROR (substitution_add (dm, start, 0, \n+\t\t\t\t\t     NOT_TEMPLATE_PARM));\n+\t  RETURN_IF_ERROR (demangle_template_args (dm));\n+\t}\n       break;\n \n     default:\n@@ -1947,6 +1938,7 @@ demangle_type (dm)\n {\n   int start = substitution_start (dm);\n   char peek = peek_char (dm);\n+  char peek_next;\n   int template_p = 0;\n   int special_std_substitution;\n   int is_builtin_type = 0;\n@@ -2016,15 +2008,16 @@ demangle_type (dm)\n \tbreak;\n \n       case 'S':\n-\tRETURN_IF_ERROR (demangle_substitution (dm, &template_p,\n-\t\t\t\t\t\t&special_std_substitution));\n-\tif (special_std_substitution)\n-\t  {\n-\t    /* This was the magic `std::' substitution.  What follows\n-\t       must be a class name in that namespace.  */\n-\t    RETURN_IF_ERROR (result_append (dm, \"::\"));\n-\t    RETURN_IF_ERROR (demangle_class_enum_type (dm, &template_p));\n-\t  }\n+\t/* First check if this is a special substitution.  If it is,\n+\t   this is a <class-enum-type>.  Special substitutions have a\n+\t   letter following the `S'; other substitutions have a digit\n+\t   or underscore.  */\n+\tpeek_next = peek_char_next (dm);\n+\tif (IS_DIGIT (peek_next) || peek_next == '_')\n+\t  RETURN_IF_ERROR (demangle_substitution (dm, &template_p,\n+\t\t\t\t\t\t  &special_std_substitution));\n+\telse\n+\t  demangle_class_enum_type (dm, &template_p);\n \tbreak;\n \n       case 'P':\n@@ -2792,11 +2785,13 @@ demangle_substitution (dm, template_p, special_std_substitution)\n \tcase 'a':\n \t  RETURN_IF_ERROR (result_append (dm, \"std::allocator\"));\n \t  new_last_source_name = \"allocator\";\n+\t  *template_p = 1;\n \t  break;\n \n \tcase 'b':\n \t  RETURN_IF_ERROR (result_append (dm, \"std::basic_string\"));\n \t  new_last_source_name = \"basic_string\";\n+\t  *template_p = 1;\n \t  break;\n \t  \n \tcase 's':\n@@ -2810,6 +2805,7 @@ demangle_substitution (dm, template_p, special_std_substitution)\n \t      RETURN_IF_ERROR (result_append (dm, \"std::basic_string<char, std::char_traits<char>, std::allocator<char> >\"));\n \t      new_last_source_name = \"basic_string\";\n \t    }\n+\t  *template_p = 0;\n \t  break;\n \n \tcase 'i':\n@@ -2823,6 +2819,7 @@ demangle_substitution (dm, template_p, special_std_substitution)\n \t      RETURN_IF_ERROR (result_append (dm, \"std::basic_istream<char, std::char_traints<char> >\"));\n \t      new_last_source_name = \"basic_istream\";\n \t    }\n+\t  *template_p = 0;\n \t  break;\n \n \tcase 'o':\n@@ -2836,6 +2833,7 @@ demangle_substitution (dm, template_p, special_std_substitution)\n \t      RETURN_IF_ERROR (result_append (dm, \"std::basic_ostream<char, std::char_traits<char> >\"));\n \t      new_last_source_name = \"basic_ostream\";\n \t    }\n+\t  *template_p = 0;\n \t  break;\n \n \tcase 'd':\n@@ -2849,6 +2847,7 @@ demangle_substitution (dm, template_p, special_std_substitution)\n \t      RETURN_IF_ERROR (result_append (dm, \"std::basic_iostream<char, std::char_traits<char> >\"));\n \t      new_last_source_name = \"basic_iostream\";\n \t    }\n+\t  *template_p = 0;\n \t  break;\n \n \tdefault:\n@@ -2872,7 +2871,7 @@ demangle_substitution (dm, template_p, special_std_substitution)\n      substitution, `S0_' is the second-most-recent, etc., shift the\n      numbering by one.  */\n   text = substitution_get (dm, seq_id + 1, template_p);\n-  if (text == NULL)\n+  if (text == NULL) \n     return \"Substitution number out of range.\";\n \n   /* Emit the substitution text.  */\n@@ -3390,10 +3389,10 @@ main (argc, argv)\n \t  if (STATUS_NO_ERROR (status))\n \t    printf (\"%s\\n\", dyn_string_buf (result));\n \t  /* Abort on allocaiton failures.  */\n-\t  if (status == STATUS_ALLOCATION_FAILED)\n+\t  else if (status == STATUS_ALLOCATION_FAILED)\n \t    {\n \t      fprintf (stderr, \"Memory allocaiton failed.\\n\");\n-\t      abort ():\n+\t      abort ();\n \t    }\n \t  /* If not, print the error message to stderr instead.  */\n \t  else "}, {"sha": "1ac3f6231451998a7cd65c4e35317e97e0543399", "filename": "libio/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bece74bdee6aa7a90fc573f11b27a43231bca007/libio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bece74bdee6aa7a90fc573f11b27a43231bca007/libio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FChangeLog?ref=bece74bdee6aa7a90fc573f11b27a43231bca007", "patch": "@@ -1,3 +1,9 @@\n+2000-06-28  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* libioP.h (VTABLE_LABEL): Update for new vtable mangling.\n+\t* stdstrbufs.cc (filebuf_vtable): Likewise.\n+\t(stdiobuf_vtable): Likewise.\n+\t\n 2000-06-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* libioP.h: Handle new ABI mangling."}, {"sha": "0dee72d577edf2b9b3bcc33ea66d5017964bd723", "filename": "libio/libioP.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bece74bdee6aa7a90fc573f11b27a43231bca007/libio%2FlibioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bece74bdee6aa7a90fc573f11b27a43231bca007/libio%2FlibioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FlibioP.h?ref=bece74bdee6aa7a90fc573f11b27a43231bca007", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1993, 1997 Free Software Foundation, Inc.\n+/* Copyright (C) 1993, 1997, 2000 Free Software Foundation, Inc.\n    This file is part of the GNU IO Library.\n \n    This library is free software; you can redistribute it and/or\n@@ -603,7 +603,7 @@ extern int _IO_vscanf __P ((const char *, _IO_va_list));\n #  endif\n # else\n #  define VTABLE_LABEL(NAME, CLASS, CNLENGTH) \\\n-  extern char NAME[] asm (\"_ZN\" #CNLENGTH #CLASS \"TVE\");\n+  extern char NAME[] asm (\"_ZTV\" #CNLENGTH #CLASS);\n # endif /* (!defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100) */\n #endif /* __GNUC__ */\n "}, {"sha": "2425a56eec69a5fc954f31f1a7f6d968d3a46f56", "filename": "libio/stdstrbufs.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bece74bdee6aa7a90fc573f11b27a43231bca007/libio%2Fstdstrbufs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bece74bdee6aa7a90fc573f11b27a43231bca007/libio%2Fstdstrbufs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fstdstrbufs.cc?ref=bece74bdee6aa7a90fc573f11b27a43231bca007", "patch": "@@ -1,5 +1,5 @@\n /*\n-Copyright (C) 1994 Free Software Foundation\n+Copyright (C) 1994, 2000 Free Software Foundation\n \n This file is part of the GNU IO Library.  This library is free\n software; you can redistribute it and/or modify it under the\n@@ -42,7 +42,7 @@ extern char filebuf_vtable[]\n #endif\n        \"filebuf\");\n #else\n-  asm ( \"_ZN7filebufTVE\" );\n+  asm ( \"_ZTV7filebuf\" );\n #endif /* (!defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100) */\n #else /* !__GNUC__ */\n #if _G_VTABLE_LABEL_HAS_LENGTH\n@@ -98,7 +98,7 @@ extern struct _IO_jump_t stdiobuf_vtable\n #endif\n        \"stdiobuf\");\n #else\n-  asm ( \"_ZN15stdiobuf_vtableTVE\" );\n+  asm ( \"_ZTV15stdiobuf_vtable\" );\n #endif /* (!defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100) */\n #else /* !__GNUC__ */\n #if _G_VTABLE_LABEL_HAS_LENGTH"}]}