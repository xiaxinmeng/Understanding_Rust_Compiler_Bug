{"sha": "fb3bc97798b9a2a0e5602c097319dc22d1dba708", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIzYmM5Nzc5OGI5YTJhMGU1NjAyYzA5NzMxOWRjMjJkMWRiYTcwOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-06-14T20:43:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-06-14T20:43:07Z"}, "message": "any (any_cast): Combine duplicate doxygen comments.\n\n\t* include/experimental/any (any_cast): Combine duplicate doxygen\n\tcomments.\n\t* include/experimental/string_view (basic_string_view): Update\n\tdoxygen comment.\n\t* include/std/bitset (bitset): Move to Doxygen 'utilities' group.\n\t* include/tr2/dynamic_bitset (_Bool2UChar): Remove unused templates.\n\t(dynamic_bitset): Improve Doxygen comments.\n\t* include/tr2/dynamic_bitset.tcc (operator>>): Improve Doxygen\n\tcomment.\n\nFrom-SVN: r211672", "tree": {"sha": "76f4e4c9cd8ed6b352d9995c285742b80ab928ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76f4e4c9cd8ed6b352d9995c285742b80ab928ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb3bc97798b9a2a0e5602c097319dc22d1dba708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb3bc97798b9a2a0e5602c097319dc22d1dba708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb3bc97798b9a2a0e5602c097319dc22d1dba708", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb3bc97798b9a2a0e5602c097319dc22d1dba708/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10d43d2fb4653d630df47b34d6e4595774559226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d43d2fb4653d630df47b34d6e4595774559226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10d43d2fb4653d630df47b34d6e4595774559226"}], "stats": {"total": 117, "additions": 37, "deletions": 80}, "files": [{"sha": "5f23ef09e16b6277b6ea4bd1d95c53c763188d63", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb3bc97798b9a2a0e5602c097319dc22d1dba708", "patch": "@@ -49,6 +49,16 @@\n \t* include/std/streambuf: Likewise.\n \t* doc/html/*: Regenerate.\n \n+\t* include/experimental/any (any_cast): Combine duplicate doxygen\n+\tcomments.\n+\t* include/experimental/string_view (basic_string_view): Update\n+\tdoxygen comment.\n+\t* include/std/bitset (bitset): Move to Doxygen 'utilities' group.\n+\t* include/tr2/dynamic_bitset (_Bool2UChar): Remove unused templates.\n+\t(dynamic_bitset): Improve Doxygen comments.\n+\t* include/tr2/dynamic_bitset.tcc (operator>>): Improve Doxygen\n+\tcomment.\n+\n 2014-06-11  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \t* testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/4402.cc"}, {"sha": "1e8d9b2f7d12af52b7fda50c1ccfd2c8ef62a841", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=fb3bc97798b9a2a0e5602c097319dc22d1dba708", "patch": "@@ -81,11 +81,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   /**\n-    * @brief A type-safe container of any type.\n-    *\n-    * An @c any object's state is either empty or it stores a contained object\n-    * of CopyConstructible type.\n-    */\n+   *  @brief A type-safe container of any type.\n+   * \n+   *  An @c any object's state is either empty or it stores a contained object\n+   *  of CopyConstructible type.\n+   */\n   class any\n   {\n     // Holds either pointer to a heap object or the contained object itself.\n@@ -391,6 +391,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @throw   bad_any_cast If <code>\n    *          __any.type() != typeid(remove_reference_t<_ValueType>)\n    *          </code>\n+   *\n+   * @{\n    */\n   template<typename _ValueType>\n     inline _ValueType any_cast(any& __any)\n@@ -403,16 +405,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __throw_bad_any_cast();\n     }\n \n-  /**\n-   * @brief Access the contained object.\n-   *\n-   * @tparam  _ValueType  A reference or CopyConstructible type.\n-   * @param   __any       The object to access.\n-   * @return  The contained object.\n-   * @throw   bad_any_cast If <code>\n-   *          __any.type() != typeid(remove_reference_t<_ValueType>)\n-   *          </code>\n-   */\n   template<typename _ValueType>\n     inline _ValueType any_cast(any&& __any)\n     {\n@@ -423,6 +415,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *__p;\n       __throw_bad_any_cast();\n     }\n+  // @}\n \n   /**\n    * @brief Access the contained object.\n@@ -432,6 +425,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @return  The address of the contained object if <code>\n    *          __any != nullptr && __any.type() == typeid(_ValueType)\n    *          </code>, otherwise a null pointer.\n+   *\n+   * @{\n    */\n   template<typename _ValueType>\n     inline const _ValueType* any_cast(const any* __any) noexcept\n@@ -441,22 +436,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return nullptr;\n     }\n \n-  /**\n-   * @brief Access the contained object.\n-   *\n-   * @tparam  _ValueType  The type of the contained object.\n-   * @param   __any       A pointer to the object to access.\n-   * @return  The address of the contained object if <code>\n-   *          __any != nullptr && __any.type() == typeid(_ValueType)\n-   *          </code>, otherwise a null pointer.\n-   */\n   template<typename _ValueType>\n     inline _ValueType* any_cast(any* __any) noexcept\n     {\n       if (__any)\n \treturn static_cast<_ValueType*>(__any_caster<_ValueType>(__any));\n       return nullptr;\n     }\n+  // @}\n \n #ifdef __GXX_RTTI\n   template<typename _Tp, typename _Alloc>"}, {"sha": "b54c9e85db8aacaf2ecadcf24ae2f4b1bc96e646", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=fb3bc97798b9a2a0e5602c097319dc22d1dba708", "patch": "@@ -49,11 +49,12 @@ namespace experimental\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n-   *  @class basic_string_view <string_view>\n+   *  @class basic_string_view <experimental/string_view>\n    *  @brief  A non-owning reference to a string.\n    *\n    *  @ingroup strings\n    *  @ingroup sequences\n+   *  @ingroup experimental\n    *\n    *  @tparam _CharT  Type of character\n    *  @tparam _Traits  Traits for character type, defaults to"}, {"sha": "c58da822493ab027b755aa29857c7225c9895e49", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=fb3bc97798b9a2a0e5602c097319dc22d1dba708", "patch": "@@ -681,9 +681,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n   /**\n-   *  The %bitset class represents a @e fixed-size sequence of bits.\n+   *  @class bitset <bitset>\n    *\n-   *  @ingroup containers\n+   *  @brief The %bitset class represents a @e fixed-size sequence of bits.\n+   *  @ingroup utilities\n    *\n    *  (Note that %bitset does @e not meet the formal requirements of a\n    *  <a href=\"tables.html#65\">container</a>.  Mainly, it lacks iterators.)"}, {"sha": "755584fdcef133e1b278f286fbf003e3547a1839", "filename": "libstdc++-v3/include/tr2/dynamic_bitset", "status": "modified", "additions": 7, "deletions": 43, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset?ref=fb3bc97798b9a2a0e5602c097319dc22d1dba708", "patch": "@@ -47,28 +47,11 @@ namespace tr2\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n-   *  Dynamic Bitset.\n+   *  @defgroup dynamic_bitset Dynamic Bitset.\n+   *  @ingroup extensions\n    *\n-   *  See N2050,\n-   *  Proposal to Add a Dynamically Sizeable Bitset to the Standard Library.\n+   *  @{\n    */\n-namespace __detail\n-{\n-\n-template<typename T>\n-class _Bool2UChar\n-{\n-  typedef T type;\n-};\n-\n-template<>\n-class _Bool2UChar<bool>\n-{\n-public:\n-  typedef unsigned char type;\n-};\n-\n-}\n \n   /**\n    *  Base class, general case.\n@@ -372,14 +355,8 @@ public:\n   /**\n    *  @brief  The %dynamic_bitset class represents a sequence of bits.\n    *\n-   *  @ingroup containers\n-   *\n-   *  (Note that %dynamic_bitset does @e not meet the formal\n-   *  requirements of a <a href=\"tables.html#65\">container</a>.\n-   *  Mainly, it lacks iterators.)\n-   *\n-   *  The template argument, @a Nb, may be any non-negative number,\n-   *  specifying the number of bits (e.g., \"0\", \"12\", \"1024*1024\").\n+   *  See N2050,\n+   *  Proposal to Add a Dynamically Sizeable Bitset to the Standard Library.\n    *\n    *  In the general unoptimized case, storage is allocated in\n    *  word-sized blocks.  Let B be the number of bits in a word, then\n@@ -409,7 +386,7 @@ public:\n    *     int main()\n    *     {\n    *         long         a = 'a';\n-   *         dynamic_bitset   b(a);\n+   *         dynamic_bitset<> b(a);\n    *\n    *         cout << \"b('a') is \" << b << endl;\n    *\n@@ -421,10 +398,6 @@ public:\n    *     }\n    *  @endcode\n    *\n-   *  Also see:\n-   *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt12ch33s02.html\n-   *  for a description of extensions.\n-   *\n    *  Most of the actual code isn't contained in %dynamic_bitset<>\n    *  itself, but in the base class __dynamic_bitset_base.  The base\n    *  class works with whole words, not with individual bits.  This\n@@ -1228,16 +1201,7 @@ public:\n     }\n   //@}\n \n-  /**\n-   *  @defgroup Global I/O operators for bitsets.\n-   *  @{\n-   *  @brief Global I/O operators for bitsets.\n-   *\n-   *  Direct I/O between streams and bitsets is supported.  Output is\n-   *  straightforward.  Input will skip whitespace and only accept '0'\n-   *  and '1' characters.  The %dynamic_bitset will grow as necessary\n-   *  to hold the string of bits.\n-   */\n+  /// Stream output operator for dynamic_bitset.\n   template <typename _CharT, typename _Traits,\n \t    typename _WordT, typename _Alloc>\n     inline std::basic_ostream<_CharT, _Traits>&"}, {"sha": "25f897e17d474a05f626cd2df8b6823e028b8009", "filename": "libstdc++-v3/include/tr2/dynamic_bitset.tcc", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3bc97798b9a2a0e5602c097319dc22d1dba708/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset.tcc?ref=fb3bc97798b9a2a0e5602c097319dc22d1dba708", "patch": "@@ -195,14 +195,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   /**\n-   *  @defgroup Global I/O operators for bitsets.\n-   *  @{\n-   *  @brief Global I/O operators for bitsets.\n+   *  @brief Stream input operator for dynamic_bitset.\n+   *  @ingroup dynamic_bitset\n    *\n-   *  Direct I/O between streams and bitsets is supported.  Output is\n-   *  straightforward.  Input will skip whitespace and only accept '0'\n-   *  and '1' characters.  The %dynamic_bitset will grow as necessary\n-   *  to hold the string of bits.\n+   *  Input will skip whitespace and only accept '0' and '1' characters.\n+   *  The %dynamic_bitset will grow as necessary to hold the string of bits.\n    */\n   template<typename _CharT, typename _Traits,\n \t   typename _WordT, typename _Alloc>\n@@ -275,9 +272,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__is.setstate(__state);\n       return __is;\n     }\n-  /**\n-   *  @}\n-   */\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // tr2"}]}