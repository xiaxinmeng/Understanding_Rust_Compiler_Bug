{"sha": "7a75edb707a02506432d73b93b38c8a4f10de79e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E3NWVkYjcwN2EwMjUwNjQzMmQ3M2I5M2IzOGM4YTRmMTBkZTc5ZQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2001-08-27T06:48:43Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-08-27T06:48:43Z"}, "message": "emit-rtl.c: Use VA_OPEN/VA_CLOSE/VA_FIXEDARG throughout.\n\n\t* emit-rtl.c: Use VA_OPEN/VA_CLOSE/VA_FIXEDARG throughout.\n\t* errors.c: Likewise.\n\t* final.c: Likewise.\n\t* dwarf2asm.c: Likewise.\n\t* doprint.c (checkit): Likewise.\n\t* diagnostic.c: Likewise.\n\t* collect2.c: Likewise.\n\t* calls.c: Likewise.\n\t* c-semantics.c (build_stmt): Likewise.\n\t* c-format.c (status_warning): Likewise.\n\t* c-errors.c (pedwarn_c99): Likewise.\n\t* builtins.c (validate_arglist): Likewise.\n\t* config/pj/pj.c (pj_printf): Likewise.\n\t* fix-header.c: Likewise.\n\t* gcc.c: Likewise.\n\t* gcov.c (fnotice): Likewise.\n\t* gensupport.c (message_with_line): Likewise.\n\t* mips-tfile.c: Likewise.\n\t* protoize.c (notice): Likewise.\n\t* read-rtl.c (fatal_with_file_and_line): Likewise.\n\t* rtl-error.c: Likewise.\n\t* tradcpp.c: Likewise.\n\t* tree.c: Likewise.\n\t* cp/tree.c (build_min_nt): Likewise.\n\t(build_min): Likewise.\n\t* cp/lex.c: Likewise.\n\t* cp/errfn.c: Likewise.\n\t* cp/rtti.c (create_pseudo_type_info): Likewise.\n\nFrom-SVN: r45185", "tree": {"sha": "58234e1acd4f13f4f073a6ad3b59cad11faacb33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58234e1acd4f13f4f073a6ad3b59cad11faacb33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a75edb707a02506432d73b93b38c8a4f10de79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a75edb707a02506432d73b93b38c8a4f10de79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a75edb707a02506432d73b93b38c8a4f10de79e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a75edb707a02506432d73b93b38c8a4f10de79e/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6baff4c1e804d360bf220142a24212f2e5759ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6baff4c1e804d360bf220142a24212f2e5759ad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6baff4c1e804d360bf220142a24212f2e5759ad1"}], "stats": {"total": 976, "additions": 267, "deletions": 709}, "files": [{"sha": "ebcf81d78d25d47b8c432ac2ab7a0bde3724c752", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -1,3 +1,34 @@\n+2001-08-27  Andreas Jaeger  <aj@suse.de>\n+\n+\t* emit-rtl.c: Use VA_OPEN/VA_CLOSE/VA_FIXEDARG throughout.\n+\t* errors.c: Likewise.\n+\t* final.c: Likewise.\n+\t* dwarf2asm.c: Likewise.\n+\t* doprint.c (checkit): Likewise.\n+\t* diagnostic.c: Likewise.\n+\t* collect2.c: Likewise.\n+\t* calls.c: Likewise.\n+\t* c-semantics.c (build_stmt): Likewise.\n+\t* c-format.c (status_warning): Likewise.\n+\t* c-errors.c (pedwarn_c99): Likewise.\n+\t* builtins.c (validate_arglist): Likewise.\n+\t* config/pj/pj.c (pj_printf): Likewise.\n+\t* fix-header.c: Likewise.\n+\t* gcc.c: Likewise.\n+\t* gcov.c (fnotice): Likewise.\n+\t* gensupport.c (message_with_line): Likewise.\n+\t* mips-tfile.c: Likewise.\n+\t* protoize.c (notice): Likewise.\n+\t* read-rtl.c (fatal_with_file_and_line): Likewise.\n+\t* rtl-error.c: Likewise.\n+\t* tradcpp.c: Likewise.\n+\t* tree.c: Likewise.\n+\t* cp/tree.c (build_min_nt): Likewise.\n+\t(build_min): Likewise.\n+\t* cp/lex.c: Likewise.\n+\t* cp/errfn.c: Likewise.\n+\t* cp/rtti.c (create_pseudo_type_info): Likewise.\n+\n Sun Aug 26 20:25:44 2001  Denis Chertykov  <denisc@overta.ru>\n \n \t* df.c (df_uses_record): Return after recording all uses"}, {"sha": "53f6fa006b61fd0f5703fb08a4dd99054fb65f0a", "filename": "gcc/builtins.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -3864,44 +3864,42 @@ build_function_call_expr (fn, arglist)\n static int\n validate_arglist VPARAMS ((tree arglist, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  tree arglist;\n-#endif\n   enum tree_code code;\n-  va_list ap;\n-\n-  VA_START (ap, arglist);\n+  int res = 0;\n \n-#ifndef ANSI_PROTOTYPES\n-  arglist = va_arg (ap, tree);\n-#endif\n+  VA_OPEN (ap, arglist);\n+  VA_FIXEDARG (ap, tree, arglist);\n \n   do {\n     code = va_arg (ap, enum tree_code);\n     switch (code)\n     {\n     case 0:\n       /* This signifies an ellipses, any further arguments are all ok.  */\n-      va_end (ap);\n-      return 1;\n+      res = 1;\n+      goto end;\n     case VOID_TYPE:\n       /* This signifies an endlink, if no arguments remain, return\n          true, otherwise return false.  */\n-      va_end (ap);\n-      return arglist == 0;\n+      res = arglist == 0;\n+      goto end;\n     default:\n       /* If no parameters remain or the parameter's code does not\n          match the specified code, return false.  Otherwise continue\n          checking any remaining arguments.  */\n       if (arglist == 0 || code != TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))))\n-        {\n-\t  va_end (ap);\n-\t  return 0;\n-\t}\n+\tgoto end;\n       break;\n     }\n     arglist = TREE_CHAIN (arglist);\n   } while (1);\n+\n+  /* We need gotos here since we can only have one VA_CLOSE in a\n+     function.  */\n+ end: ;\n+  VA_CLOSE (ap);\n+\n+  return res;\n }\n \n /* Default version of target-specific builtin setup that does nothing.  */"}, {"sha": "3f030f9a255fe00504fd1a39412a1cc10480fea1", "filename": "gcc/c-errors.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-errors.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -1,5 +1,5 @@\n /* Various diagnostic subroutines for the GNU C language.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n \n This file is part of GCC.\n@@ -32,20 +32,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n void\n pedwarn_c99 VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   diagnostic_context dc;\n \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   set_diagnostic_context (&dc, msgid, &ap, input_filename, lineno,\n                           !flag_isoc99 || !flag_pedantic_errors);\n   report_diagnostic (&dc);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }"}, {"sha": "d7ef210e4d4402e107e6689fedb56ae4b66935fe", "filename": "gcc/c-format.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -1149,19 +1149,11 @@ check_function_format (status, name, assembler_name, params)\n static void\n status_warning VPARAMS ((int *status, const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  int *status;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n   diagnostic_context dc;\n \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  status = va_arg (ap, int *);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, int *, status);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   if (status)\n     *status = 1;\n@@ -1173,7 +1165,7 @@ status_warning VPARAMS ((int *status, const char *msgid, ...))\n       report_diagnostic (&dc);\n     }\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Variables used by the checking of $ operand number formats.  */"}, {"sha": "84000b9f853819dd54be4ca8f2e869def40a3e4b", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -170,19 +170,12 @@ finish_stmt_tree (t)\n tree\n build_stmt VPARAMS ((enum tree_code code, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  enum tree_code code;\n-#endif\n-  va_list p;\n   register tree t;\n   register int length;\n   register int i;\n \n-  VA_START (p, code);\n-\n-#ifndef ANSI_PROTOTYPES\n-  code = va_arg (p, enum tree_code);\n-#endif\n+  VA_OPEN (p, code);\n+  VA_FIXEDARG (p, enum tree_code, code);\n \n   t = make_node (code);\n   length = TREE_CODE_LENGTH (code);\n@@ -191,7 +184,7 @@ build_stmt VPARAMS ((enum tree_code code, ...))\n   for (i = 0; i < length; i++)\n     TREE_OPERAND (t, i) = va_arg (p, tree);\n \n-  va_end (p);\n+  VA_CLOSE (p);\n   return t;\n }\n "}, {"sha": "3405f6ed1077019f64c5eb6b4518573efb544d00", "filename": "gcc/collect2.c", "status": "modified", "additions": 12, "deletions": 43, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -363,42 +363,27 @@ collect_exit (status)\n void\n notice VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   vfprintf (stderr, _(msgid), ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Die when sys call fails.  */\n \n void\n fatal_perror VPARAMS ((const char * msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n   int e = errno;\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n \n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   fprintf (stderr, \"collect2: \");\n   vfprintf (stderr, _(msgid), ap);\n   fprintf (stderr, \": %s\\n\", xstrerror (e));\n-  va_end (ap);\n+  VA_CLOSE (ap);\n \n   collect_exit (FATAL_EXIT_CODE);\n }\n@@ -408,21 +393,13 @@ fatal_perror VPARAMS ((const char * msgid, ...))\n void\n fatal VPARAMS ((const char * msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-  \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n   \n   fprintf (stderr, \"collect2: \");\n   vfprintf (stderr, _(msgid), ap);\n   fprintf (stderr, \"\\n\");\n-  va_end (ap);\n+  VA_CLOSE (ap);\n \n   collect_exit (FATAL_EXIT_CODE);\n }\n@@ -432,21 +409,13 @@ fatal VPARAMS ((const char * msgid, ...))\n void\n error VPARAMS ((const char * msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char * msgid;\n-#endif\n-  va_list ap;\n- \n-  VA_START (ap, msgid);\n-  \n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   fprintf (stderr, \"collect2: \");\n   vfprintf (stderr, _(msgid), ap);\n   fprintf (stderr, \"\\n\");\n-  va_end(ap);\n+  VA_CLOSE(ap);\n }\n \n /* In case obstack is linked in, and abort is defined to fancy_abort,"}, {"sha": "18525ce690de91a79df98e54f7c12bd2800407f4", "filename": "gcc/config/pj/pj.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fconfig%2Fpj%2Fpj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fconfig%2Fpj%2Fpj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -1,5 +1,5 @@\n /* Output routines for GCC for picoJava II\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -140,18 +140,12 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n static void\n pj_printf VPARAMS ((const char *template, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *template;\n-#endif\n   register int c;\n-\n-  va_list argptr;\n   int ops_read = 0;\n   rtx operands[10];\n-  VA_START (argptr, template);\n-#ifndef ANSI_PROTOTYPES\n-  template = va_arg (argptr, const char *);\n-#endif\n+\n+  VA_OPEN (argptr, template);\n+  VA_FIXEDARG (argptr, const char *, template);\n \n   while ((c = *template++))\n     {\n@@ -229,7 +223,7 @@ pj_printf VPARAMS ((const char *template, ...))\n \t  }\n \t}\n     }\n-  va_end (argptr);\n+  VA_CLOSE (argptr);\n }\n \n /* Output code to efficiently push a single word integer constant onto"}, {"sha": "84ad1f5e20f3f3210dced845140b02e49be5219e", "filename": "gcc/cp/errfn.c", "status": "modified", "additions": 25, "deletions": 89, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fcp%2Ferrfn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fcp%2Ferrfn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferrfn.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -1,5 +1,5 @@\n /* Provide a call-back mechanism for handling error output.\n-   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n    Contributed by Jason Merrill (jason@cygnus.com)\n \n@@ -185,77 +185,45 @@ cp_thing (errfn, atarg1, format, ap)\n void\n cp_error VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   if (! cp_silent)\n     cp_thing ((errorfn *) error, 0, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n cp_warning VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   if (! cp_silent)\n     cp_thing ((errorfn *) warning, 0, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n cp_pedwarn VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   if (! cp_silent)\n     cp_thing ((errorfn *) pedwarn, 0, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n cp_compiler_error VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   if (! cp_silent)\n     cp_thing ((errorfn *) compiler_error, 0, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n@@ -271,74 +239,42 @@ cp_deprecated (msg)\n void\n cp_sprintf VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   cp_thing ((errorfn *) sprintf, 0, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n cp_error_at VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   if (! cp_silent)\n     cp_thing ((errorfn *) error_with_file_and_line, 1, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n cp_warning_at VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   if (! cp_silent)\n     cp_thing ((errorfn *) warning_with_file_and_line, 1, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n cp_pedwarn_at VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   if (! cp_silent)\n     cp_thing ((errorfn *) pedwarn_with_file_and_line, 1, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }"}, {"sha": "a05dd37b50c9b2e54bf22b415e05ca9e740c42bb", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -1636,20 +1636,14 @@ make_aggr_type (code)\n void\n compiler_error VPARAMS ((const char *msg, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msg;\n-#endif\n   char buf[1024];\n-  va_list ap;\n-\n-  VA_START (ap, msg);\n \n-#ifndef ANSI_PROTOTYPES\n-  msg = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msg);\n+  VA_FIXEDARG (ap, const char *, msg);\n \n   vsprintf (buf, msg, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n+\n   error_with_file_and_line (input_filename, lineno, \"%s (compiler error)\", buf);\n }\n "}, {"sha": "6cdac79ac6af8dad51b3c9b20e775776b7de1fe6", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -1154,24 +1154,17 @@ create_real_tinfo_var (target_type, name, type, init, non_public)\n static tree\n create_pseudo_type_info VPARAMS((const char *real_name, int ident, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  char const *real_name;\n-  int ident;\n-#endif\n-  va_list ap;\n   tree real_type, pseudo_type;\n   char *pseudo_name;\n   tree vtable_decl;\n   int ix;\n   tree fields[10];\n   tree field_decl;\n   tree result;\n-  \n-  VA_START (ap, ident);\n-#ifndef ANSI_PROTOTYPES\n-  real_name = va_arg (ap, char const *);\n-  ident = va_arg (ap, int);\n-#endif\n+\n+  VA_OPEN (ap, ident);\n+  VA_FIXEDARG (ap, const char *, real_name);\n+  VA_FIXEDARG (ap, int, ident);\n \n   /* Generate the pseudo type name. */\n   pseudo_name = (char *)alloca (strlen (real_name) + 30);\n@@ -1205,8 +1198,8 @@ create_pseudo_type_info VPARAMS((const char *real_name, int ident, ...))\n   pseudo_type = make_aggr_type (RECORD_TYPE);\n   finish_builtin_type (pseudo_type, pseudo_name, fields, ix, ptr_type_node);\n   TYPE_HAS_CONSTRUCTOR (pseudo_type) = 1;\n-  va_end (ap);\n-  \n+  VA_CLOSE (ap);\n+\n   result = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE);\n   TINFO_VTABLE_DECL (result) = vtable_decl;\n   TINFO_PSEUDO_TYPE (result) = pseudo_type;"}, {"sha": "04e8add6a0d40764abcad65d54fcb5354bb02da1", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -1724,19 +1724,12 @@ break_out_target_exprs (t)\n tree\n build_min_nt VPARAMS ((enum tree_code code, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  enum tree_code code;\n-#endif\n-  va_list p;\n   register tree t;\n   register int length;\n   register int i;\n \n-  VA_START (p, code);\n-\n-#ifndef ANSI_PROTOTYPES\n-  code = va_arg (p, enum tree_code);\n-#endif\n+  VA_OPEN (p, code);\n+  VA_FIXEDARG (p, enum tree_code, code);\n \n   t = make_node (code);\n   length = TREE_CODE_LENGTH (code);\n@@ -1748,7 +1741,7 @@ build_min_nt VPARAMS ((enum tree_code code, ...))\n       TREE_OPERAND (t, i) = x;\n     }\n \n-  va_end (p);\n+  VA_CLOSE (p);\n   return t;\n }\n \n@@ -1758,21 +1751,13 @@ build_min_nt VPARAMS ((enum tree_code code, ...))\n tree\n build_min VPARAMS ((enum tree_code code, tree tt, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  enum tree_code code;\n-  tree tt;\n-#endif\n-  va_list p;\n   register tree t;\n   register int length;\n   register int i;\n \n-  VA_START (p, tt);\n-\n-#ifndef ANSI_PROTOTYPES\n-  code = va_arg (p, enum tree_code);\n-  tt = va_arg (p, tree);\n-#endif\n+  VA_OPEN (p, tt);\n+  VA_FIXEDARG (p, enum tree_code, code);\n+  VA_FIXEDARG (p, tree, tt);\n \n   t = make_node (code);\n   length = TREE_CODE_LENGTH (code);\n@@ -1785,7 +1770,7 @@ build_min VPARAMS ((enum tree_code code, tree tt, ...))\n       TREE_OPERAND (t, i) = x;\n     }\n \n-  va_end (p);\n+  VA_CLOSE (p);\n   return t;\n }\n "}, {"sha": "bc43b0322f0e080e4054104ce6deeba28cb27142", "filename": "gcc/doprint.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fdoprint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fdoprint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoprint.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -1,5 +1,5 @@\n /* Provide a version _doprnt in terms of fprintf.\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001   Free Software Foundation, Inc.\n    Contributed by Kaveh Ghazi  (ghazi@caip.rutgers.edu)  3/29/98\n \n This program is free software; you can redistribute it and/or modify it\n@@ -209,21 +209,12 @@ static int checkit PARAMS ((const char * format, ...)) ATTRIBUTE_PRINTF_1;\n static int\n checkit VPARAMS ((const char* format, ...))\n {\n-  va_list args;\n   int result;\n-\n-#ifndef ANSI_PROTOTYPES\n-  char *format;\n-#endif\n-\n-  VA_START (args, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (args, char *);\n-#endif\n+  VA_OPEN (args, format);\n+  VA_FIXEDARG (args, char *, format);\n \n   result = _doprnt (format, args, stdout);\n-  va_end(args);\n+  VA_CLOSE (args);\n \n   return result;\n }"}, {"sha": "f9158cfa5c8cd59af8475f2d8ae118258ff849f0", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 61, "deletions": 173, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -84,20 +84,10 @@ void\n dw2_asm_output_data VPARAMS ((int size, unsigned HOST_WIDE_INT value,\n \t\t\t      const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  int size;\n-  unsigned HOST_WIDE_INT value;\n-  const char *comment;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, comment);\n-\n-#ifndef ANSI_PROTOTYPES\n-  size = va_arg (ap, int);\n-  value = va_arg (ap, unsigned HOST_WIDE_INT);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, int, size);\n+  VA_FIXEDARG (ap, unsigned HOST_WIDE_INT, value);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n   if (size * 8 < HOST_BITS_PER_WIDE_INT)\n     value &= ~(~(unsigned HOST_WIDE_INT)0 << (size * 8));\n@@ -116,7 +106,7 @@ dw2_asm_output_data VPARAMS ((int size, unsigned HOST_WIDE_INT value,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Output the difference between two symbols in a given size.  */\n@@ -129,21 +119,11 @@ void\n dw2_asm_output_delta VPARAMS ((int size, const char *lab1, const char *lab2,\n \t\t\t       const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  int size;\n-  const char *lab1, *lab2;\n-  const char *comment;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, comment);\n-\n-#ifndef ANSI_PROTOTYPES\n-  size = va_arg (ap, int);\n-  lab1 = va_arg (ap, const char *);\n-  lab2 = va_arg (ap, const char *);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, int, size);\n+  VA_FIXEDARG (ap, const char *, lab1);\n+  VA_FIXEDARG (ap, const char *, lab2);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n #ifdef UNALIGNED_INT_ASM_OP\n   fputs (unaligned_integer_asm_op (size), asm_out_file);\n@@ -163,7 +143,7 @@ dw2_asm_output_delta VPARAMS ((int size, const char *lab1, const char *lab2,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Output a section-relative reference to a label.  In general this\n@@ -176,20 +156,10 @@ void\n dw2_asm_output_offset VPARAMS ((int size, const char *label,\n \t\t\t       const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  int size;\n-  const char *label;\n-  const char *comment;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, comment);\n-\n-#ifndef ANSI_PROTOTYPES\n-  size = va_arg (ap, int);\n-  label = va_arg (ap, const char *);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, int, size);\n+  VA_FIXEDARG (ap, const char *, label);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n #ifdef ASM_OUTPUT_DWARF_OFFSET\n   ASM_OUTPUT_DWARF_OFFSET (asm_out_file, size, label);\n@@ -209,7 +179,7 @@ dw2_asm_output_offset VPARAMS ((int size, const char *label,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Output a self-relative reference to a label, possibly in a\n@@ -219,20 +189,10 @@ void\n dw2_asm_output_pcrel VPARAMS ((int size, const char *label,\n \t\t\t       const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  int size;\n-  const char *label;\n-  const char *comment;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, comment);\n-\n-#ifndef ANSI_PROTOTYPES\n-  size = va_arg (ap, int);\n-  label = va_arg (ap, const char *);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, int, size);\n+  VA_FIXEDARG (ap, const char *, label);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n #ifdef ASM_OUTPUT_DWARF_PCREL\n   ASM_OUTPUT_DWARF_PCREL (asm_out_file, size, label);\n@@ -254,7 +214,7 @@ dw2_asm_output_pcrel VPARAMS ((int size, const char *label,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Output an absolute reference to a label.  */\n@@ -263,20 +223,10 @@ void\n dw2_asm_output_addr VPARAMS ((int size, const char *label,\n \t\t\t      const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  int size;\n-  const char *label;\n-  const char *comment;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, comment);\n-\n-#ifndef ANSI_PROTOTYPES\n-  size = va_arg (ap, int);\n-  label = va_arg (ap, const char *);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, int, size);\n+  VA_FIXEDARG (ap, const char *, label);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n #ifdef UNALIGNED_INT_ASM_OP\n   fputs (unaligned_integer_asm_op (size), asm_out_file);\n@@ -292,7 +242,7 @@ dw2_asm_output_addr VPARAMS ((int size, const char *label,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Similar, but use an RTX expression instead of a text label.  */\n@@ -301,20 +251,10 @@ void\n dw2_asm_output_addr_rtx VPARAMS ((int size, rtx addr,\n \t\t\t\t  const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  int size;\n-  rtx addr;\n-  const char *comment;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, comment);\n-\n-#ifndef ANSI_PROTOTYPES\n-  size = va_arg (ap, int);\n-  addr = va_arg (ap, rtx);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, int, size);\n+  VA_FIXEDARG (ap, rtx, addr);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n #ifdef UNALIGNED_INT_ASM_OP\n   fputs (unaligned_integer_asm_op (size), asm_out_file);\n@@ -330,28 +270,21 @@ dw2_asm_output_addr_rtx VPARAMS ((int size, rtx addr,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n dw2_asm_output_nstring VPARAMS ((const char *str, size_t orig_len,\n \t\t\t\t const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *str;\n-  size_t orig_len;\n-  const char *comment;\n-#endif\n-  va_list ap;\n-  size_t i, len = orig_len;\n+  size_t i, len;\n \n-  VA_START (ap, comment);\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, const char *, str);\n+  VA_FIXEDARG (ap, size_t, len);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n-#ifndef ANSI_PROTOTYPES\n-  str = va_arg (ap, const char *);\n-  len = va_arg (ap, size_t);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  len = orig_len;\n \n   if (len == (size_t) -1)\n     len = strlen (str);\n@@ -384,7 +317,7 @@ dw2_asm_output_nstring VPARAMS ((const char *str, size_t orig_len,\n \tfprintf (asm_out_file, \"%s0\\n\", ASM_BYTE_OP);\n     }\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \f\n \n@@ -617,18 +550,9 @@ void\n dw2_asm_output_data_uleb128 VPARAMS ((unsigned HOST_WIDE_INT value,\n \t\t\t\t      const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  unsigned HOST_WIDE_INT value;\n-  const char *comment;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, comment);\n-\n-#ifndef ANSI_PROTOTYPES\n-  value = va_arg (ap, unsigned HOST_WIDE_INT);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, unsigned HOST_WIDE_INT, value);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n #ifdef HAVE_AS_LEB128\n   fputs (\"\\t.uleb128 \", asm_out_file);\n@@ -672,7 +596,7 @@ dw2_asm_output_data_uleb128 VPARAMS ((unsigned HOST_WIDE_INT value,\n #endif\n   fputc ('\\n', asm_out_file);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* Output an signed LEB128 quantity.  */\n@@ -681,18 +605,9 @@ void\n dw2_asm_output_data_sleb128 VPARAMS ((HOST_WIDE_INT value,\n \t\t\t\t      const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  HOST_WIDE_INT value;\n-  const char *comment;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, comment);\n-\n-#ifndef ANSI_PROTOTYPES\n-  value = va_arg (ap, HOST_WIDE_INT);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, HOST_WIDE_INT, value);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n #ifdef HAVE_AS_LEB128\n   fputs (\"\\t.sleb128 \", asm_out_file);\n@@ -739,27 +654,18 @@ dw2_asm_output_data_sleb128 VPARAMS ((HOST_WIDE_INT value,\n #endif\n   fputc ('\\n', asm_out_file);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n dw2_asm_output_delta_uleb128 VPARAMS ((const char *lab1 ATTRIBUTE_UNUSED,\n \t\t\t\t       const char *lab2 ATTRIBUTE_UNUSED,\n \t\t\t\t       const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *lab1, *lab2;\n-  const char *comment;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, comment);\n-\n-#ifndef ANSI_PROTOTYPES\n-  lab1 = va_arg (ap, const char *);\n-  lab2 = va_arg (ap, const char *);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, const char *, lab1);\n+  VA_FIXEDARG (ap, const char *, lab2);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n #ifdef HAVE_AS_LEB128\n   fputs (\"\\t.uleb128 \", asm_out_file);\n@@ -777,27 +683,18 @@ dw2_asm_output_delta_uleb128 VPARAMS ((const char *lab1 ATTRIBUTE_UNUSED,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n dw2_asm_output_delta_sleb128 VPARAMS ((const char *lab1 ATTRIBUTE_UNUSED,\n \t\t\t\t       const char *lab2 ATTRIBUTE_UNUSED,\n \t\t\t\t       const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *lab1, *lab2;\n-  const char *comment;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, comment);\n-\n-#ifndef ANSI_PROTOTYPES\n-  lab1 = va_arg (ap, const char *);\n-  lab2 = va_arg (ap, const char *);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, const char *, lab1);\n+  VA_FIXEDARG (ap, const char *, lab2);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n #ifdef HAVE_AS_LEB128\n   fputs (\"\\t.sleb128 \", asm_out_file);\n@@ -815,7 +712,7 @@ dw2_asm_output_delta_sleb128 VPARAMS ((const char *lab1 ATTRIBUTE_UNUSED,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \f\n static rtx dw2_force_const_mem PARAMS ((rtx));\n@@ -912,21 +809,12 @@ dw2_asm_output_encoded_addr_rtx VPARAMS ((int encoding,\n \t\t\t\t\t  rtx addr,\n \t\t\t\t\t  const char *comment, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  int encoding;\n-  rtx addr;\n-  const char *comment;\n-#endif\n-  va_list ap;\n   int size;\n \n-  VA_START (ap, comment);\n-\n-#ifndef ANSI_PROTOTYPES\n-  encoding = va_arg (ap, int);\n-  addr = va_arg (ap, rtx);\n-  comment = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, comment);\n+  VA_FIXEDARG (ap, int, encoding);\n+  VA_FIXEDARG (ap, rtx, addr);\n+  VA_FIXEDARG (ap, const char *, comment);\n \n   size = size_of_encoded_value (encoding);\n \n@@ -1010,5 +898,5 @@ dw2_asm_output_encoded_addr_rtx VPARAMS ((int encoding,\n     }\n   fputc ('\\n', asm_out_file);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }"}, {"sha": "379bfb6b80932a739f593f2feb71f7b0ebc6c879", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -424,21 +424,13 @@ gen_lowpart_SUBREG (mode, reg)\n rtx\n gen_rtx VPARAMS ((enum rtx_code code, enum machine_mode mode, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  enum rtx_code code;\n-  enum machine_mode mode;\n-#endif\n-  va_list p;\n   register int i;\t\t/* Array indices...\t\t\t*/\n   register const char *fmt;\t/* Current rtx's format...\t\t*/\n   register rtx rt_val;\t\t/* RTX to return to caller...\t\t*/\n \n-  VA_START (p, mode);\n-\n-#ifndef ANSI_PROTOTYPES\n-  code = va_arg (p, enum rtx_code);\n-  mode = va_arg (p, enum machine_mode);\n-#endif\n+  VA_OPEN (p, mode);\n+  VA_FIXEDARG (p, enum rtx_code, code);\n+  VA_FIXEDARG (p, enum machine_mode, mode);\n \n   switch (code)\n     {\n@@ -511,7 +503,7 @@ gen_rtx VPARAMS ((enum rtx_code code, enum machine_mode mode, ...))\n       break;\n     }\n \n-  va_end (p);\n+  VA_CLOSE (p);\n   return rt_val;\n }\n \n@@ -525,18 +517,11 @@ gen_rtx VPARAMS ((enum rtx_code code, enum machine_mode mode, ...))\n rtvec\n gen_rtvec VPARAMS ((int n, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  int n;\n-#endif\n   int i;\n-  va_list p;\n   rtx *vector;\n \n-  VA_START (p, n);\n-\n-#ifndef ANSI_PROTOTYPES\n-  n = va_arg (p, int);\n-#endif\n+  VA_OPEN (p, n);\n+  VA_FIXEDARG (p, int, n);\n \n   if (n == 0)\n     return NULL_RTVEC;\t\t/* Don't allocate an empty rtvec...\t*/\n@@ -545,7 +530,7 @@ gen_rtvec VPARAMS ((int n, ...))\n \n   for (i = 0; i < n; i++)\n     vector[i] = va_arg (p, rtx);\n-  va_end (p);\n+  VA_CLOSE (p);\n \n   return gen_rtvec_v (n, vector);\n }"}, {"sha": "8d072979c351bd9623c12084f02533cd24960fb3", "filename": "gcc/errors.c", "status": "modified", "additions": 12, "deletions": 44, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -39,20 +39,12 @@ int have_error = 0;\n void\n warning VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   fprintf (stderr, \"%s: warning: \", progname);\n   vfprintf (stderr, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n   fputc('\\n', stderr);\n }\n \n@@ -62,20 +54,12 @@ warning VPARAMS ((const char *format, ...))\n void\n error VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   fprintf (stderr, \"%s: \", progname);\n   vfprintf (stderr, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n   fputc('\\n', stderr);\n \n   have_error = 1;\n@@ -87,20 +71,12 @@ error VPARAMS ((const char *format, ...))\n void\n fatal VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   fprintf (stderr, \"%s: \", progname);\n   vfprintf (stderr, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n   fputc('\\n', stderr);\n   exit (FATAL_EXIT_CODE);\n }\n@@ -110,20 +86,12 @@ fatal VPARAMS ((const char *format, ...))\n void\n internal_error VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   fprintf (stderr, \"%s: Internal error: \", progname);\n   vfprintf (stderr, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n   fputc ('\\n', stderr);\n   exit (FATAL_EXIT_CODE);\n }"}, {"sha": "d524ccb934574cb7537b416f8608cf9b530ddbaa", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -3651,20 +3651,12 @@ output_addr_const (file, x)\n void\n asm_fprintf VPARAMS ((FILE *file, const char *p, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  FILE *file;\n-  const char *p;\n-#endif\n-  va_list argptr;\n   char buf[10];\n   char *q, c;\n \n-  VA_START (argptr, p);\n-\n-#ifndef ANSI_PROTOTYPES\n-  file = va_arg (argptr, FILE *);\n-  p = va_arg (argptr, const char *);\n-#endif\n+  VA_OPEN (argptr, p);\n+  VA_FIXEDARG (argptr, FILE *, file);\n+  VA_FIXEDARG (argptr, const char *, p);\n \n   buf[0] = '%';\n \n@@ -3812,7 +3804,7 @@ asm_fprintf VPARAMS ((FILE *file, const char *p, ...))\n       default:\n \tfputc (c, file);\n       }\n-  va_end (argptr);\n+  VA_CLOSE (argptr);\n }\n \f\n /* Split up a CONST_DOUBLE or integer constant rtx"}, {"sha": "24cbfef35e7bd0c81d4042bb467d9c5cffd3f2c6", "filename": "gcc/fix-header.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -1,6 +1,6 @@\n /* fix-header.c - Make C header file suitable for C++.\n    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -1317,17 +1317,9 @@ v_fatal (str, ap)\n static void\n fatal VPARAMS ((const char *str, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *str;\n-#endif\n-  va_list ap;\n-  \n-  VA_START (ap, str);\n-\n-#ifndef ANSI_PROTOTYPES\n-  str = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, str);\n+  VA_FIXEDARG (ap, const char *, str);\n \n   v_fatal (str, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }"}, {"sha": "fcb0d8483ce83587fa71ff507c423e39faabd99b", "filename": "gcc/gcc.c", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -6204,20 +6204,12 @@ fancy_abort ()\n void\n fatal VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   fprintf (stderr, \"%s: \", programname);\n   vfprintf (stderr, _(msgid), ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n   fprintf (stderr, \"\\n\");\n   delete_temp_files ();\n   exit (1);\n@@ -6226,40 +6218,24 @@ fatal VPARAMS ((const char *msgid, ...))\n void\n error VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   fprintf (stderr, \"%s: \", programname);\n   vfprintf (stderr, _(msgid), ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n \n   fprintf (stderr, \"\\n\");\n }\n \n static void\n notice VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   vfprintf (stderr, _(msgid), ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \f\n static void"}, {"sha": "b88bf093fc04dc1a39de2e83da99d88be2d30ca4", "filename": "gcc/gcov.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -273,21 +273,12 @@ static void fnotice PARAMS ((FILE *, const char *, ...)) ATTRIBUTE_PRINTF_2;\n static void\n fnotice VPARAMS ((FILE *file, const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  FILE *file;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  file = va_arg (ap, FILE *);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, FILE *, file);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   vfprintf (file, _(msgid), ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n /* More 'friendly' abort that prints the line and file."}, {"sha": "bc18866ceb681f1807100caa12deb5fe0511d9d4", "filename": "gcc/gensupport.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -79,24 +79,15 @@ static void process_define_cond_exec PARAMS ((void));\n void\n message_with_line VPARAMS ((int lineno, const char *msg, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  int lineno;\n-  const char *msg;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msg);\n-\n-#ifndef ANSI_PROTOTYPES\n-  lineno = va_arg (ap, int);\n-  msg = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msg);\n+  VA_FIXEDARG (ap, int, lineno);\n+  VA_FIXEDARG (ap, const char *, msg);\n \n   fprintf (stderr, \"%s:%d: \", read_rtx_filename, lineno);\n   vfprintf (stderr, msg, ap);\n   fputc ('\\n', stderr);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \f\n /* Queue PATTERN on LIST_TAIL.  */"}, {"sha": "bc191db55765df62c0640889791bab48b7ca550f", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -5561,24 +5561,16 @@ free_thead (ptr)\n void\n fatal VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, const char *, format);\n \n   if (line_number > 0)\n     fprintf (stderr, \"%s, %s:%ld \", progname, input_name, line_number);\n   else\n     fprintf (stderr, \"%s:\", progname);\n \n   vfprintf (stderr, format, ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n   fprintf (stderr, \"\\n\");\n   if (line_number > 0)\n     fprintf (stderr, \"line:\\t%s\\n\", cur_line_start);\n@@ -5591,16 +5583,8 @@ fatal VPARAMS ((const char *format, ...))\n void\n error VPARAMS ((const char *format, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, char *);\n-#endif\n+  VA_OPEN (ap, format);\n+  VA_FIXEDARG (ap, char *, format);\n \n   if (line_number > 0)\n     fprintf (stderr, \"%s, %s:%ld \", progname, input_name, line_number);\n@@ -5613,7 +5597,7 @@ error VPARAMS ((const char *format, ...))\n     fprintf (stderr, \"line:\\t%s\\n\", cur_line_start);\n \n   had_errors++;\n-  va_end (ap);\n+  VA_CLOSE (ap);\n \n   saber_stop ();\n }"}, {"sha": "98a0940c17240f29b5a39a360db2e899bdbaeed2", "filename": "gcc/protoize.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -1,6 +1,6 @@\n /* Protoize program - Original version by Ron Guilmette (rfg@segfault.us.com).\n    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -564,19 +564,11 @@ static char * saved_repl_write_ptr;\n static void\n notice VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   vfprintf (stderr, _(msgid), ap);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n \f"}, {"sha": "9342a279a8e31fa026fb48f47b79f730bc2ba74c", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -53,21 +53,13 @@ const char *read_rtx_filename = \"<unknown>\";\n static void\n fatal_with_file_and_line VPARAMS ((FILE *infile, const char *msg, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  FILE *infile;\n-  const char *msg;\n-#endif\n-  va_list ap;\n   char context[64];\n   size_t i;\n   int c;\n \n-  VA_START (ap, msg);\n-\n-#ifndef ANSI_PROTOTYPES\n-  infile = va_arg (ap, FILE *);\n-  msg = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msg);\n+  VA_FIXEDARG (ap, FILE *, infile);\n+  VA_FIXEDARG (ap, const char *, msg);\n \n   fprintf (stderr, \"%s:%d: \", read_rtx_filename, read_rtx_lineno);\n   vfprintf (stderr, msg, ap);\n@@ -88,7 +80,7 @@ fatal_with_file_and_line VPARAMS ((FILE *infile, const char *msg, ...))\n   fprintf (stderr, \"%s:%d: following context is `%s'\\n\",\n \t   read_rtx_filename, read_rtx_lineno, context);\n \n-  va_end (ap);\n+  VA_CLOSE (ap);\n   exit (1);\n }\n "}, {"sha": "7515f527f92a5f47c65519bc2e24aad5500221fc", "filename": "gcc/rtl-error.c", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Frtl-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Frtl-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-error.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -91,41 +91,23 @@ diagnostic_for_asm (insn, msg, args_ptr, warn)\n void\n error_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  rtx insn;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  insn = va_arg (ap, rtx);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, rtx, insn);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   diagnostic_for_asm (insn, msgid, &ap, /* warn = */ 0);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void\n warning_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  rtx insn;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  insn = va_arg (ap, rtx);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN (ap, msgid);\n+  VA_FIXEDARG (ap, rtx, insn);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   diagnostic_for_asm (insn, msgid, &ap, /* warn = */ 1);\n-  va_end (ap);\n+  VA_CLOSE (ap);\n }\n \n void"}, {"sha": "69848860dc5173a46c627581bd9d6629641887c1", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 13, "deletions": 42, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -4686,37 +4686,22 @@ v_message (mtype, line, msgid, ap)\n void\n error VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START(ap, msgid);\n-  \n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN(ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   v_message (ERROR, 0, msgid, ap);\n+  VA_CLOSE (ap);\n }\n \n void\n error_with_line VPARAMS ((int line, const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  int line;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START(ap, msgid);\n-  \n-#ifndef ANSI_PROTOTYPES\n-  line = va_arg (ap, int);\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN(ap, msgid);\n+  VA_FIXEDARG (ap, int, line);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   v_message (ERROR, line, msgid, ap);\n+  VA_CLOSE (ap);\n }\n \n /* Error including a message from `errno'.  */\n@@ -4731,35 +4716,21 @@ error_from_errno (name)\n void\n warning VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START(ap, msgid);\n-  \n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN(ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   v_message (WARNING, 0, msgid, ap);\n+  VA_CLOSE (ap);\n }\n \n void\n fatal VPARAMS ((const char *msgid, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START(ap, msgid);\n-  \n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, const char *);\n-#endif\n+  VA_OPEN(ap, msgid);\n+  VA_FIXEDARG (ap, const char *, msgid);\n \n   v_message (FATAL, 0, msgid, ap);\n+  VA_CLOSE (ap);\n   exit (FATAL_EXIT_CODE);\n }\n "}, {"sha": "e5bc8d8dba9cbcbd2812f9ab2f908aee88f0b1a4", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a75edb707a02506432d73b93b38c8a4f10de79e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7a75edb707a02506432d73b93b38c8a4f10de79e", "patch": "@@ -2334,23 +2334,15 @@ stabilize_reference_1 (e)\n tree\n build VPARAMS ((enum tree_code code, tree tt, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  enum tree_code code;\n-  tree tt;\n-#endif\n-  va_list p;\n   register tree t;\n   register int length;\n   register int i;\n   int fro;\n   int constant;\n \n-  VA_START (p, tt);\n-\n-#ifndef ANSI_PROTOTYPES\n-  code = va_arg (p, enum tree_code);\n-  tt = va_arg (p, tree);\n-#endif\n+  VA_OPEN (p, tt);\n+  VA_FIXEDARG (p, enum tree_code, code);\n+  VA_FIXEDARG (p, tree, tt);\n \n   t = make_node (code);\n   length = TREE_CODE_LENGTH (code);\n@@ -2427,7 +2419,7 @@ build VPARAMS ((enum tree_code code, tree tt, ...))\n \t    }\n \t}\n     }\n-  va_end (p);\n+  VA_CLOSE (p);\n \n   TREE_CONSTANT (t) = constant;\n   return t;\n@@ -2518,27 +2510,20 @@ build1 (code, type, node)\n tree\n build_nt VPARAMS ((enum tree_code code, ...))\n {\n-#ifndef ANSI_PROTOTYPES\n-  enum tree_code code;\n-#endif\n-  va_list p;\n   register tree t;\n   register int length;\n   register int i;\n \n-  VA_START (p, code);\n-\n-#ifndef ANSI_PROTOTYPES\n-  code = va_arg (p, enum tree_code);\n-#endif\n+  VA_OPEN (p, code);\n+  VA_FIXEDARG (p, enum tree_code, code);\n \n   t = make_node (code);\n   length = TREE_CODE_LENGTH (code);\n \n   for (i = 0; i < length; i++)\n     TREE_OPERAND (t, i) = va_arg (p, tree);\n \n-  va_end (p);\n+  VA_CLOSE (p);\n   return t;\n }\n "}]}