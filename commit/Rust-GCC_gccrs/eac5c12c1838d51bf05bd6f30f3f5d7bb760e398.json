{"sha": "eac5c12c1838d51bf05bd6f30f3f5d7bb760e398", "node_id": "C_kwDOANBUbNoAKGVhYzVjMTJjMTgzOGQ1MWJmMDViZDZmMzBmM2Y1ZDdiYjc2MGUzOTg", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@mengyan1223.wang", "date": "2022-04-06T12:18:37Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@mengyan1223.wang", "date": "2022-04-06T14:55:36Z"}, "message": "mips: Fix C++14 vs. C++17 ABI incompatibility on mips64\n\nThis fixes tmpdir-g++.dg-struct-layout-1/{t032,t059} failure.  Clang++\nalso ignores C++17 empty bases in return values.\n\ngcc/\n\t* config/mips/mips.cc (mips_fpr_return_fields): Ignore\n\tcxx17_empty_base_field_p fields and set an indicator.\n\t(mips_return_in_msb): Adjust for mips_fpr_return_fields change.\n\t(mips_function_value_1): Inform psABI change about C++17 empty\n\tbases.\n\ngcc/testsuite/\n\t* g++.target/mips/cxx17_empty_base.C: New test.", "tree": {"sha": "385632f55d063bce3fb3099ef66fc288a5213fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/385632f55d063bce3fb3099ef66fc288a5213fe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eac5c12c1838d51bf05bd6f30f3f5d7bb760e398", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEEunTLnZqV9wGnXaw2V5HFsy7NNwFAmJNqegACgkQ2V5HFsy7\nNNxVGBAAi4jebj8rnmWNJX2clg0zAzbMZyULdovGOZxv+NXZxIh6odY2TTX6hbvr\nQK2u9M9gL9Lh31PWPSCV24gZ/l3xfTcEWBpkOhEwXrK0N7b9NI5kutr9oqHqTQzr\niV3kD64xdlyLi5ogRmaL6+tNZetDYadgUpaSjaG50R8amDN1YeARUYiCOIDd1vlE\nstYav4yc/g0dUyCuOlEmuEfNxxLlZlMRyQ7rQuxuzpdoVRXDsMZvOAWptaLs4Fvr\n3TVOP4EZPMEYN1fdTQtyMbEGratOcs9zPeWZgj4CG0pX4QvZWBCJAx12btBtLK6G\n3B1SWm45DqzmkxjtuFbCVSthvsQnLyhZkuJSgX/6o96zUhA5Q0foLb8EAAsEsv+w\nNONLuE7jRUwfY4fMOHEYu77TAQ8kgRaIIsjK2pl5LlaehMzkzExnLQB2jx9LeMJi\nb9GFbX2b0rzipkWfiXbLa4Q1q/Bm0rcxbDdqNeDrNpwsIcL9GYLnmGkdHD0F1HLC\nDqJF7A8bH79Aeff7fZgO4NihEApOJS4RBolrG84b23PdZ87P2RnZvX5WZy5UTKdG\nYkBfwzaeIQ4emkRatfCR/lOtDoHEzZjkQh4QaVA1v+My64EUQn2VYanHhvjKTMQC\nK0prkgvuc03jYepvPEv1QONHjo54wFMW14fP6wMCMbA5a8R8jj8=\n=HYAO\n-----END PGP SIGNATURE-----", "payload": "tree 385632f55d063bce3fb3099ef66fc288a5213fe8\nparent 5df29fe79df659617793f955a1ea6c23a0617fe2\nauthor Xi Ruoyao <xry111@mengyan1223.wang> 1649247517 +0800\ncommitter Xi Ruoyao <xry111@mengyan1223.wang> 1649256936 +0800\n\nmips: Fix C++14 vs. C++17 ABI incompatibility on mips64\n\nThis fixes tmpdir-g++.dg-struct-layout-1/{t032,t059} failure.  Clang++\nalso ignores C++17 empty bases in return values.\n\ngcc/\n\t* config/mips/mips.cc (mips_fpr_return_fields): Ignore\n\tcxx17_empty_base_field_p fields and set an indicator.\n\t(mips_return_in_msb): Adjust for mips_fpr_return_fields change.\n\t(mips_function_value_1): Inform psABI change about C++17 empty\n\tbases.\n\ngcc/testsuite/\n\t* g++.target/mips/cxx17_empty_base.C: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac5c12c1838d51bf05bd6f30f3f5d7bb760e398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eac5c12c1838d51bf05bd6f30f3f5d7bb760e398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac5c12c1838d51bf05bd6f30f3f5d7bb760e398/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5df29fe79df659617793f955a1ea6c23a0617fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5df29fe79df659617793f955a1ea6c23a0617fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5df29fe79df659617793f955a1ea6c23a0617fe2"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "e64928f41131c1a934a0783c9c2b1230b6424fe4", "filename": "gcc/config/mips/mips.cc", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eac5c12c1838d51bf05bd6f30f3f5d7bb760e398/gcc%2Fconfig%2Fmips%2Fmips.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eac5c12c1838d51bf05bd6f30f3f5d7bb760e398/gcc%2Fconfig%2Fmips%2Fmips.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.cc?ref=eac5c12c1838d51bf05bd6f30f3f5d7bb760e398", "patch": "@@ -6318,12 +6318,21 @@ mips_callee_copies (cumulative_args_t, const function_arg_info &arg)\n    The C++ FE used to remove zero-width bit-fields in GCC 11 and earlier.\n    To make a proper diagnostic, this function will set\n    HAS_CXX_ZERO_WIDTH_BF to true once a C++ zero-width bit-field shows up,\n-   and then ignore it. Then the caller can determine if this zero-width\n-   bit-field will make a difference and emit a -Wpsabi inform.  */\n+   and then ignore it.\n+\n+   We had failed to ignore C++17 empty bases in GCC 7, 8, 9, 10, and 11.\n+   This caused an ABI incompatibility between C++14 and C++17.  This is\n+   fixed now and to make a proper diagnostic, this function will set\n+   HAS_CXX17_EMPTY_BASE to true once a C++17 empty base shows up, and\n+   then ignore it.\n+\n+   The caller should use the value of HAS_CXX17_EMPTY_BASE and/or\n+   HAS_CXX_ZERO_WIDTH_BF to emit a proper -Wpsabi inform.  */\n \n static int\n mips_fpr_return_fields (const_tree valtype, tree *fields,\n-\t\t\tbool *has_cxx_zero_width_bf)\n+\t\t\tbool *has_cxx_zero_width_bf,\n+\t\t\tbool *has_cxx17_empty_base)\n {\n   tree field;\n   int i;\n@@ -6340,6 +6349,12 @@ mips_fpr_return_fields (const_tree valtype, tree *fields,\n       if (TREE_CODE (field) != FIELD_DECL)\n \tcontinue;\n \n+      if (cxx17_empty_base_field_p (field))\n+\t{\n+\t  *has_cxx17_empty_base = true;\n+\t  continue;\n+\t}\n+\n       if (DECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD (field))\n \t{\n \t  *has_cxx_zero_width_bf = true;\n@@ -6375,8 +6390,13 @@ mips_return_in_msb (const_tree valtype)\n \n   tree fields[2];\n   bool has_cxx_zero_width_bf = false;\n+\n+  /* Its value is not used.  */\n+  bool has_cxx17_empty_base = false;\n+\n   return (mips_fpr_return_fields (valtype, fields,\n-\t\t\t\t  &has_cxx_zero_width_bf) == 0\n+\t\t\t\t  &has_cxx_zero_width_bf,\n+\t\t\t\t  &has_cxx17_empty_base) == 0\n \t  || has_cxx_zero_width_bf);\n }\n \n@@ -6473,11 +6493,18 @@ mips_function_value_1 (const_tree valtype, const_tree fn_decl_or_type,\n       mode = promote_function_mode (valtype, mode, &unsigned_p, func, 1);\n \n       bool has_cxx_zero_width_bf = false;\n+      bool has_cxx17_empty_base = false;\n       int use_fpr = mips_fpr_return_fields (valtype, fields,\n-\t\t\t\t\t    &has_cxx_zero_width_bf);\n+\t\t\t\t\t    &has_cxx_zero_width_bf,\n+\t\t\t\t\t    &has_cxx17_empty_base);\n+\n+      /* If has_cxx_zero_width_bf and has_cxx17_empty_base are both\n+\t true, it *happens* that there is no ABI change.  So we won't\n+\t inform in this case.  */\n       if (TARGET_HARD_FLOAT\n \t  && warn_psabi\n \t  && has_cxx_zero_width_bf\n+\t  && !has_cxx17_empty_base\n \t  && use_fpr != 0)\n \t{\n \t  static unsigned last_reported_type_uid;\n@@ -6499,6 +6526,27 @@ mips_function_value_1 (const_tree valtype, const_tree fn_decl_or_type,\n       if (has_cxx_zero_width_bf)\n \tuse_fpr = 0;\n \n+      if (TARGET_HARD_FLOAT\n+\t  && warn_psabi\n+\t  && use_fpr != 0\n+\t  && has_cxx17_empty_base)\n+\t{\n+\t  static unsigned last_reported_type_uid;\n+\t  unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (valtype));\n+\t  if (uid != last_reported_type_uid)\n+\t    {\n+\t      static const char *url\n+\t\t= CHANGES_ROOT_URL\n+\t\t  \"gcc-12/changes.html#mips_cxx17_empty_bases\";\n+\t      inform (input_location,\n+\t\t      \"the ABI for returning a value with C++17 empty \"\n+\t\t      \"bases but otherwise an aggregate with only one or \"\n+\t\t      \"two floating-point fields was changed in GCC \"\n+\t\t      \"%{12.1%}\", url);\n+\t      last_reported_type_uid = uid;\n+\t    }\n+\t}\n+\n       /* Handle structures whose fields are returned in $f0/$f2.  */\n       switch (use_fpr)\n \t{"}, {"sha": "343375cf939f3b5b397f0f8af90644bf6d777953", "filename": "gcc/testsuite/g++.target/mips/cxx17_empty_base.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eac5c12c1838d51bf05bd6f30f3f5d7bb760e398/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmips%2Fcxx17_empty_base.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eac5c12c1838d51bf05bd6f30f3f5d7bb760e398/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmips%2Fcxx17_empty_base.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmips%2Fcxx17_empty_base.C?ref=eac5c12c1838d51bf05bd6f30f3f5d7bb760e398", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++17 -mabi=64 -mhard-float\" }\n+// { dg-final { scan-assembler \"\\\\\\$f0\" } }\n+\n+struct empty {};\n+\n+struct foo : empty\n+{\n+  double a;\n+  double b;\n+};\n+\n+struct foo\n+make_foo(void) // { dg-message \"the ABI for returning a value with C\\\\\\+\\\\\\+17 empty bases but otherwise an aggregate with only one or two floating-point fields was changed in GCC 12.1\" }\n+{\n+  struct foo ret;\n+  ret.a = 114;\n+  ret.b = 514;\n+  return ret;\n+}"}]}