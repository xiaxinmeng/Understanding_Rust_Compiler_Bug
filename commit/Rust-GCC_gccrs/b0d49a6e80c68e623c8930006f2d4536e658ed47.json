{"sha": "b0d49a6e80c68e623c8930006f2d4536e658ed47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBkNDlhNmU4MGM2OGU2MjNjODkzMDAwNmYyZDQ1MzZlNjU4ZWQ0Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-11-27T15:58:50Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-11-27T15:58:50Z"}, "message": "sse.md (vec_interleave_highv16qi, [...]): Remove expanders.\n\n\t* config/i386/sse.md (vec_interleave_highv16qi,\n\tvec_interleave_lowv16qi, vec_interleave_highv8hi,\n\tvec_interleave_lowv8hi, vec_interleave_highv4si,\n\tvec_interleave_lowv4si, vec_interleave_highv2di,\n\tvec_interleave_lowv2di, vec_interleave_highv4sf,\n\tvec_interleave_lowv4sf, vec_interleave_highv2df,\n\tvec_interleave_lowv2df): Remove expanders.\n\t(sse_unpcklps, sse_unpckhps, sse2_unpckhpd_exp, sse2_unpcklpd_exp,\n\tsse2_punpckhqdq, sse2_punpcklqdq, sse2_punpckhbw, sse2_punpcklbw,\n\tsse2_punpckhwd, sse2_punpcklwd, sse2_punpckhdq, sse2_punpckldq):\n\tRename to their proper vec_interleave equivalent.  Update all users\n\tto the new name.\n\t* config/i386/i386.c, config/i386/i386.md: Update all users.\n\nFrom-SVN: r154711", "tree": {"sha": "c9133c447b0c99c9125d9fb22569fa8b15c6d6c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9133c447b0c99c9125d9fb22569fa8b15c6d6c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0d49a6e80c68e623c8930006f2d4536e658ed47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d49a6e80c68e623c8930006f2d4536e658ed47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0d49a6e80c68e623c8930006f2d4536e658ed47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d49a6e80c68e623c8930006f2d4536e658ed47/comments", "author": null, "committer": null, "parents": [{"sha": "315adedaf3f2072b55095f101d7df04c39d4e3ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315adedaf3f2072b55095f101d7df04c39d4e3ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315adedaf3f2072b55095f101d7df04c39d4e3ae"}], "stats": {"total": 347, "additions": 103, "deletions": 244}, "files": [{"sha": "c38e9705c736972e6789fda5157f8b4170b51428", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d49a6e80c68e623c8930006f2d4536e658ed47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d49a6e80c68e623c8930006f2d4536e658ed47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0d49a6e80c68e623c8930006f2d4536e658ed47", "patch": "@@ -1,3 +1,19 @@\n+2009-11-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/sse.md (vec_interleave_highv16qi,\n+\tvec_interleave_lowv16qi, vec_interleave_highv8hi,\n+\tvec_interleave_lowv8hi, vec_interleave_highv4si,\n+\tvec_interleave_lowv4si, vec_interleave_highv2di,\n+\tvec_interleave_lowv2di, vec_interleave_highv4sf,\n+\tvec_interleave_lowv4sf, vec_interleave_highv2df,\n+\tvec_interleave_lowv2df): Remove expanders.\n+\t(sse_unpcklps, sse_unpckhps, sse2_unpckhpd_exp, sse2_unpcklpd_exp,\n+\tsse2_punpckhqdq, sse2_punpcklqdq, sse2_punpckhbw, sse2_punpcklbw,\n+\tsse2_punpckhwd, sse2_punpcklwd, sse2_punpckhdq, sse2_punpckldq):\n+\tRename to their proper vec_interleave equivalent.  Update all users\n+\tto the new name.\n+\t* config/i386/i386.c, config/i386/i386.md: Update all users.\n+\n 2009-11-27  Michael Matz  <matz@suse.de>\n \n \tPR rtl-optimization/42084"}, {"sha": "443b4eb80b3d40e328ebb33e62cc4105c90423b1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d49a6e80c68e623c8930006f2d4536e658ed47/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d49a6e80c68e623c8930006f2d4536e658ed47/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b0d49a6e80c68e623c8930006f2d4536e658ed47", "patch": "@@ -13944,7 +13944,7 @@ ix86_expand_convert_uns_didf_sse (rtx target, rtx input)\n   exponents = validize_mem (force_const_mem (V4SImode, x));\n \n   /* int_xmm = {0x45300000UL, fp_xmm/hi, 0x43300000, fp_xmm/lo } */\n-  emit_insn (gen_sse2_punpckldq (int_xmm, int_xmm, exponents));\n+  emit_insn (gen_vec_interleave_lowv4si (int_xmm, int_xmm, exponents));\n \n   /* Concatenating (juxtaposing) (0x43300000UL ## fp_value_low_xmm)\n      yields a valid DF value equal to (0x1.0p52 + double(fp_value_lo_xmm)).\n@@ -13970,7 +13970,7 @@ ix86_expand_convert_uns_didf_sse (rtx target, rtx input)\n   else\n     {\n       x = copy_to_mode_reg (V2DFmode, fp_xmm);\n-      emit_insn (gen_sse2_unpckhpd (fp_xmm, fp_xmm, fp_xmm));\n+      emit_insn (gen_vec_interleave_highv2df (fp_xmm, fp_xmm, fp_xmm));\n       emit_insn (gen_addv2df3 (fp_xmm, fp_xmm, x));\n     }\n \n@@ -21690,8 +21690,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movss,  \"__builtin_ia32_movss\", IX86_BUILTIN_MOVSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movhlps_exp,  \"__builtin_ia32_movhlps\", IX86_BUILTIN_MOVHLPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movlhps_exp,  \"__builtin_ia32_movlhps\", IX86_BUILTIN_MOVLHPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_unpckhps, \"__builtin_ia32_unpckhps\", IX86_BUILTIN_UNPCKHPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_unpcklps, \"__builtin_ia32_unpcklps\", IX86_BUILTIN_UNPCKLPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_vec_interleave_highv4sf, \"__builtin_ia32_unpckhps\", IX86_BUILTIN_UNPCKHPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_vec_interleave_lowv4sf, \"__builtin_ia32_unpcklps\", IX86_BUILTIN_UNPCKLPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n \n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtpi2ps, \"__builtin_ia32_cvtpi2ps\", IX86_BUILTIN_CVTPI2PS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V2SI },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtsi2ss, \"__builtin_ia32_cvtsi2ss\", IX86_BUILTIN_CVTSI2SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_SI },\n@@ -21799,8 +21799,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_copysignv2df3,  \"__builtin_ia32_copysignpd\", IX86_BUILTIN_CPYSGNPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movsd,  \"__builtin_ia32_movsd\", IX86_BUILTIN_MOVSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_unpckhpd_exp, \"__builtin_ia32_unpckhpd\", IX86_BUILTIN_UNPCKHPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_unpcklpd_exp, \"__builtin_ia32_unpcklpd\", IX86_BUILTIN_UNPCKLPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_interleave_highv2df, \"__builtin_ia32_unpckhpd\", IX86_BUILTIN_UNPCKHPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_interleave_lowv2df, \"__builtin_ia32_unpcklpd\", IX86_BUILTIN_UNPCKLPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_pack_sfix_v2df, \"__builtin_ia32_vec_pack_sfix\", IX86_BUILTIN_VEC_PACK_SFIX, UNKNOWN, (int) V4SI_FTYPE_V2DF_V2DF },\n \n@@ -21845,14 +21845,14 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_uminv16qi3, \"__builtin_ia32_pminub128\", IX86_BUILTIN_PMINUB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sminv8hi3, \"__builtin_ia32_pminsw128\", IX86_BUILTIN_PMINSW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhbw, \"__builtin_ia32_punpckhbw128\", IX86_BUILTIN_PUNPCKHBW128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhwd, \"__builtin_ia32_punpckhwd128\", IX86_BUILTIN_PUNPCKHWD128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI  },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhdq, \"__builtin_ia32_punpckhdq128\", IX86_BUILTIN_PUNPCKHDQ128, UNKNOWN,  (int) V4SI_FTYPE_V4SI_V4SI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhqdq, \"__builtin_ia32_punpckhqdq128\", IX86_BUILTIN_PUNPCKHQDQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpcklbw, \"__builtin_ia32_punpcklbw128\", IX86_BUILTIN_PUNPCKLBW128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpcklwd, \"__builtin_ia32_punpcklwd128\", IX86_BUILTIN_PUNPCKLWD128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckldq, \"__builtin_ia32_punpckldq128\", IX86_BUILTIN_PUNPCKLDQ128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpcklqdq, \"__builtin_ia32_punpcklqdq128\", IX86_BUILTIN_PUNPCKLQDQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_interleave_highv16qi, \"__builtin_ia32_punpckhbw128\", IX86_BUILTIN_PUNPCKHBW128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_interleave_highv8hi, \"__builtin_ia32_punpckhwd128\", IX86_BUILTIN_PUNPCKHWD128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI  },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_interleave_highv4si, \"__builtin_ia32_punpckhdq128\", IX86_BUILTIN_PUNPCKHDQ128, UNKNOWN,  (int) V4SI_FTYPE_V4SI_V4SI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_interleave_highv2di, \"__builtin_ia32_punpckhqdq128\", IX86_BUILTIN_PUNPCKHQDQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_interleave_lowv16qi, \"__builtin_ia32_punpcklbw128\", IX86_BUILTIN_PUNPCKLBW128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_interleave_lowv8hi, \"__builtin_ia32_punpcklwd128\", IX86_BUILTIN_PUNPCKLWD128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_interleave_lowv4si, \"__builtin_ia32_punpckldq128\", IX86_BUILTIN_PUNPCKLDQ128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_interleave_lowv2di, \"__builtin_ia32_punpcklqdq128\", IX86_BUILTIN_PUNPCKLQDQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_packsswb, \"__builtin_ia32_packsswb128\", IX86_BUILTIN_PACKSSWB128, UNKNOWN, (int) V16QI_FTYPE_V8HI_V8HI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_packssdw, \"__builtin_ia32_packssdw128\", IX86_BUILTIN_PACKSSDW128, UNKNOWN, (int) V8HI_FTYPE_V4SI_V4SI },\n@@ -26483,6 +26483,7 @@ x86_emit_floatuns (rtx operands[2])\n \f\n /* A subroutine of ix86_expand_vector_init.  Store into TARGET a vector\n    with all elements equal to VAR.  Return true if successful.  */\n+/* ??? Call into the vec_perm support to implement the broadcast.  */\n \n static bool\n ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n@@ -26552,7 +26553,7 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n \t  tmp1 = gen_reg_rtx (V8HImode);\n \t  emit_move_insn (tmp1, gen_lowpart (V8HImode, tmp2));\n \t  /* Duplicate the low short through the whole low SImode word.  */\n-\t  emit_insn (gen_sse2_punpcklwd (tmp1, tmp1, tmp1));\n+\t  emit_insn (gen_vec_interleave_lowv8hi (tmp1, tmp1, tmp1));\n \t  /* Cast the V8HImode vector back to a V4SImode vector.  */\n \t  tmp2 = gen_reg_rtx (V4SImode);\n \t  emit_move_insn (tmp2, gen_lowpart (V4SImode, tmp1));\n@@ -26584,8 +26585,8 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n \t  tmp1 = gen_reg_rtx (V16QImode);\n \t  emit_move_insn (tmp1, gen_lowpart (V16QImode, tmp2));\n \t  /* Duplicate the low byte through the whole low SImode word.  */\n-\t  emit_insn (gen_sse2_punpcklbw (tmp1, tmp1, tmp1));\n-\t  emit_insn (gen_sse2_punpcklbw (tmp1, tmp1, tmp1));\n+\t  emit_insn (gen_vec_interleave_lowv16qi (tmp1, tmp1, tmp1));\n+\t  emit_insn (gen_vec_interleave_lowv16qi (tmp1, tmp1, tmp1));\n \t  /* Cast the V16QImode vector back to a V4SImode vector.  */\n \t  tmp2 = gen_reg_rtx (V4SImode);\n \t  emit_move_insn (tmp2, gen_lowpart (V4SImode, tmp1));\n@@ -27417,7 +27418,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t  /* tmp = target = A B C D */\n \t  tmp = copy_to_reg (target);\n \t  /* target = A A B B */\n-\t  emit_insn (gen_sse_unpcklps (target, target, target));\n+\t  emit_insn (gen_vec_interleave_lowv4sf (target, target, target));\n \t  /* target = X A B B */\n \t  ix86_expand_vector_set (false, target, val, 0);\n \t  /* target = A X C D  */\n@@ -27627,7 +27628,7 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n \n \tcase 2:\n \t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_sse_unpckhps (tmp, vec, vec));\n+\t  emit_insn (gen_vec_interleave_highv4sf (tmp, vec, vec));\n \t  break;\n \n \tdefault:\n@@ -27661,7 +27662,7 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n \n \t    case 2:\n \t      tmp = gen_reg_rtx (mode);\n-\t      emit_insn (gen_sse2_punpckhdq (tmp, vec, vec));\n+\t      emit_insn (gen_vec_interleave_highv4si (tmp, vec, vec));\n \t      break;\n \n \t    default:\n@@ -29730,14 +29731,15 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n \t     with interleave. */\n \t  t1 = gen_reg_rtx (V8HImode);\n \t  t2 = gen_reg_rtx (V8HImode);\n-\t  emit_insn (gen_sse2_punpckhwd (t1, d->op0, d->op1));\n-\t  emit_insn (gen_sse2_punpcklwd (d->target, d->op0, d->op1));\n-\t  emit_insn (gen_sse2_punpckhwd (t2, d->target, t1));\n-\t  emit_insn (gen_sse2_punpcklwd (d->target, d->target, t1));\n+\t  emit_insn (gen_vec_interleave_highv8hi (t1, d->op0, d->op1));\n+\t  emit_insn (gen_vec_interleave_lowv8hi (d->target, d->op0, d->op1));\n+\t  emit_insn (gen_vec_interleave_highv8hi (t2, d->target, t1));\n+\t  emit_insn (gen_vec_interleave_lowv8hi (d->target, d->target, t1));\n \t  if (odd)\n-\t    emit_insn (gen_sse2_punpckhwd (d->target, d->target, t2));\n+\t    t3 = gen_vec_interleave_highv8hi (d->target, d->target, t2);\n \t  else\n-\t    emit_insn (gen_sse2_punpcklwd (d->target, d->target, t2));\n+\t    t3 = gen_vec_interleave_lowv8hi (d->target, d->target, t2);\n+\t  emit_insn (t3);\n \t}\n       break;\n \n@@ -29749,16 +29751,17 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n \t  t1 = gen_reg_rtx (V16QImode);\n \t  t2 = gen_reg_rtx (V16QImode);\n \t  t3 = gen_reg_rtx (V16QImode);\n-\t  emit_insn (gen_sse2_punpckhbw (t1, d->op0, d->op1));\n-\t  emit_insn (gen_sse2_punpcklbw (d->target, d->op0, d->op1));\n-\t  emit_insn (gen_sse2_punpckhbw (t2, d->target, t1));\n-\t  emit_insn (gen_sse2_punpcklbw (d->target, d->target, t1));\n-\t  emit_insn (gen_sse2_punpckhbw (t3, d->target, t2));\n-\t  emit_insn (gen_sse2_punpcklbw (d->target, d->target, t2));\n+\t  emit_insn (gen_vec_interleave_highv16qi (t1, d->op0, d->op1));\n+\t  emit_insn (gen_vec_interleave_lowv16qi (d->target, d->op0, d->op1));\n+\t  emit_insn (gen_vec_interleave_highv16qi (t2, d->target, t1));\n+\t  emit_insn (gen_vec_interleave_lowv16qi (d->target, d->target, t1));\n+\t  emit_insn (gen_vec_interleave_highv16qi (t3, d->target, t2));\n+\t  emit_insn (gen_vec_interleave_lowv16qi (d->target, d->target, t2));\n \t  if (odd)\n-\t    emit_insn (gen_sse2_punpckhbw (d->target, d->target, t3));\n+\t    t3 = gen_vec_interleave_highv16qi (d->target, d->target, t3);\n \t  else\n-\t    emit_insn (gen_sse2_punpcklbw (d->target, d->target, t3));\n+\t    t3 = gen_vec_interleave_lowv16qi (d->target, d->target, t3);\n+\t  emit_insn (t3);\n \t}\n       break;\n "}, {"sha": "d401f92950f16f45540fdfc90a4662fc00bd43ec", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d49a6e80c68e623c8930006f2d4536e658ed47/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d49a6e80c68e623c8930006f2d4536e658ed47/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b0d49a6e80c68e623c8930006f2d4536e658ed47", "patch": "@@ -4372,7 +4372,8 @@\n \t}\n       else\n \toperands[3] = simplify_gen_subreg (V4SFmode, operands[1], SFmode, 0);\n-      emit_insn (gen_sse_unpcklps (operands[3], operands[3], operands[3]));\n+      emit_insn (gen_vec_interleave_lowv4sf (operands[3], operands[3],\n+      \t\t \t\t\t     operands[3]));\n     }\n   else\n     emit_insn (gen_vec_setv4sf_0 (operands[3],\n@@ -5769,7 +5770,8 @@\n \t\t\t      gen_rtx_SUBREG (SImode, operands[1], 0)));\n   emit_insn (gen_sse2_loadld (operands[4], CONST0_RTX (V4SImode),\n \t\t\t      gen_rtx_SUBREG (SImode, operands[1], 4)));\n-  emit_insn (gen_sse2_punpckldq (operands[3], operands[3], operands[4]));\n+  emit_insn (gen_vec_interleave_lowv4si (operands[3], operands[3],\n+  \t    \t\t\t\t operands[4]));\n \n   operands[3] = gen_rtx_REG (DImode, REGNO (operands[3]));\n })"}, {"sha": "27c7a8b48426372fc8490cb6d2678b9f34d5833a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 46, "deletions": 208, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d49a6e80c68e623c8930006f2d4536e658ed47/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d49a6e80c68e623c8930006f2d4536e658ed47/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b0d49a6e80c68e623c8930006f2d4536e658ed47", "patch": "@@ -279,12 +279,14 @@\n       \t\t\t\t  gen_rtx_SUBREG (SImode, operands[1], 0)));\n       emit_insn (gen_sse2_loadld (operands[2], CONST0_RTX (V4SImode),\n \t\t\t\t  gen_rtx_SUBREG (SImode, operands[1], 4)));\n-      emit_insn (gen_sse2_punpckldq (operands[0], operands[0], operands[2]));\n+      emit_insn (gen_vec_interleave_lowv4si (operands[0], operands[0],\n+      \t\t\t\t\t     operands[2]));\n     }\n  else if (memory_operand (operands[1], DImode))\n-      emit_insn (gen_vec_concatv2di (gen_lowpart (V2DImode, operands[0]), operands[1], const0_rtx));\n+   emit_insn (gen_vec_concatv2di (gen_lowpart (V2DImode, operands[0]),\n+   \t     \t\t\t  operands[1], const0_rtx));\n  else\n-      gcc_unreachable ();\n+   gcc_unreachable ();\n })\n \n (define_split\n@@ -3453,9 +3455,9 @@\n \n   emit_insn (gen_sse2_cvttpd2dq (r1, operands[1]));\n   emit_insn (gen_sse2_cvttpd2dq (r2, operands[2]));\n-  emit_insn (gen_sse2_punpcklqdq (gen_lowpart (V2DImode, operands[0]),\n-\t\t\t\t  gen_lowpart (V2DImode, r1),\n-\t\t\t\t  gen_lowpart (V2DImode, r2)));\n+  emit_insn (gen_vec_interleave_lowv2di (gen_lowpart (V2DImode, operands[0]),\n+  \t    \t\t\t\t gen_lowpart (V2DImode, r1),\n+ \t\t\t\t\t gen_lowpart (V2DImode, r2)));\n   DONE;\n })\n \n@@ -3472,9 +3474,9 @@\n \n   emit_insn (gen_sse2_cvtpd2dq (r1, operands[1]));\n   emit_insn (gen_sse2_cvtpd2dq (r2, operands[2]));\n-  emit_insn (gen_sse2_punpcklqdq (gen_lowpart (V2DImode, operands[0]),\n-\t\t\t\t  gen_lowpart (V2DImode, r1),\n-\t\t\t\t  gen_lowpart (V2DImode, r2)));\n+  emit_insn (gen_vec_interleave_lowv2di (gen_lowpart (V2DImode, operands[0]),\n+  \t    \t\t\t\t gen_lowpart (V2DImode, r1),\n+ \t\t\t\t\t gen_lowpart (V2DImode, r2)));\n   DONE;\n })\n \n@@ -3584,6 +3586,7 @@\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"V4SF,V2SF,V2SF\")])\n \n+;; Recall that the 256-bit unpck insns only shuffle within their lanes.\n (define_insn \"avx_unpckhps256\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n \t(vec_select:V8SF\n@@ -3600,7 +3603,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"*avx_unpckhps\"\n+(define_insn \"*avx_interleave_highv4sf\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n@@ -3614,7 +3617,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"sse_unpckhps\"\n+(define_insn \"vec_interleave_highv4sf\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n@@ -3627,6 +3630,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+;; Recall that the 256-bit unpck insns only shuffle within their lanes.\n (define_insn \"avx_unpcklps256\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n \t(vec_select:V8SF\n@@ -3643,7 +3647,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"*avx_unpcklps\"\n+(define_insn \"*avx_interleave_lowv4sf\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n@@ -3657,7 +3661,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"sse_unpcklps\"\n+(define_insn \"vec_interleave_lowv4sf\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n@@ -4464,6 +4468,7 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n+;; Recall that the 256-bit unpck insns only shuffle within their lanes.\n (define_insn \"avx_unpckhpd256\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n \t(vec_select:V4DF\n@@ -4478,7 +4483,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4DF\")])\n \n-(define_expand \"sse2_unpckhpd_exp\"\n+(define_expand \"vec_interleave_highv2df\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n@@ -4489,7 +4494,7 @@\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\")\n \n-(define_insn \"*avx_unpckhpd\"\n+(define_insn \"*avx_interleave_highv2df\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,m\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n@@ -4506,7 +4511,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V2DF,V1DF,V1DF\")])\n \n-(define_insn \"sse2_unpckhpd\"\n+(define_insn \"*sse2_interleave_highv2df\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,m\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n@@ -4585,6 +4590,7 @@\n   DONE;\n })\n \n+;; Recall that the 256-bit unpck insns only shuffle within their lanes.\n (define_insn \"avx_unpcklpd256\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n \t(vec_select:V4DF\n@@ -4599,7 +4605,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4DF\")])\n \n-(define_expand \"sse2_unpcklpd_exp\"\n+(define_expand \"vec_interleave_lowv2df\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n@@ -4610,7 +4616,7 @@\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\")\n \n-(define_insn \"*avx_unpcklpd\"\n+(define_insn \"*avx_interleave_lowv2df\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,o\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n@@ -4627,7 +4633,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V2DF,V1DF,V1DF\")])\n \n-(define_insn \"sse2_unpcklpd\"\n+(define_insn \"*sse2_interleave_lowv2df\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,o\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n@@ -4721,7 +4727,7 @@\n })\n \n ;; punpcklqdq and punpckhqdq are shorter than shufpd.\n-(define_insn \"*avx_punpckhqdq\"\n+(define_insn \"*avx_interleave_highv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(vec_select:V2DI\n \t  (vec_concat:V4DI\n@@ -4735,7 +4741,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_punpckhqdq\"\n+(define_insn \"vec_interleave_highv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(vec_select:V2DI\n \t  (vec_concat:V4DI\n@@ -4749,7 +4755,7 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx_punpcklqdq\"\n+(define_insn \"*avx_interleave_lowv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(vec_select:V2DI\n \t  (vec_concat:V4DI\n@@ -4763,7 +4769,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_punpcklqdq\"\n+(define_insn \"vec_interleave_lowv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(vec_select:V2DI\n \t  (vec_concat:V4DI\n@@ -5247,10 +5253,10 @@\n      each word.  We don't care what goes into the high byte of each word.\n      Rather than trying to get zero in there, most convenient is to let\n      it be a copy of the low byte.  */\n-  emit_insn (gen_sse2_punpckhbw (t[0], operands[1], operands[1]));\n-  emit_insn (gen_sse2_punpckhbw (t[1], operands[2], operands[2]));\n-  emit_insn (gen_sse2_punpcklbw (t[2], operands[1], operands[1]));\n-  emit_insn (gen_sse2_punpcklbw (t[3], operands[2], operands[2]));\n+  emit_insn (gen_vec_interleave_highv16qi (t[0], operands[1], operands[1]));\n+  emit_insn (gen_vec_interleave_highv16qi (t[1], operands[2], operands[2]));\n+  emit_insn (gen_vec_interleave_lowv16qi (t[2], operands[1], operands[1]));\n+  emit_insn (gen_vec_interleave_lowv16qi (t[3], operands[2], operands[2]));\n \n   /* Multiply words.  The end-of-line annotations here give a picture of what\n      the output of that instruction looks like.  Dot means don't care; the\n@@ -5670,7 +5676,7 @@\n \t\t\t\tconst0_rtx, const0_rtx));\n \n   /* Merge the parts back together.  */\n-  emit_insn (gen_sse2_punpckldq (op0, t5, t6));\n+  emit_insn (gen_vec_interleave_lowv4si (op0, t5, t6));\n   DONE;\n })\n \n@@ -6589,174 +6595,6 @@\n   DONE;\n })\n \n-(define_expand \"vec_interleave_highv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n-        (vec_select:V16QI\n-          (vec_concat:V32QI\n-            (match_operand:V16QI 1 \"register_operand\" \"\")\n-            (match_operand:V16QI 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 8)  (const_int 24)\n-                     (const_int 9)  (const_int 25)\n-                     (const_int 10) (const_int 26)\n-                     (const_int 11) (const_int 27)\n-                     (const_int 12) (const_int 28)\n-                     (const_int 13) (const_int 29)\n-                     (const_int 14) (const_int 30)\n-                     (const_int 15) (const_int 31)])))]\n-  \"TARGET_SSE2\"\n-{\n-  emit_insn (gen_sse2_punpckhbw (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"vec_interleave_lowv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n-        (vec_select:V16QI\n-          (vec_concat:V32QI\n-            (match_operand:V16QI 1 \"register_operand\" \"\")\n-            (match_operand:V16QI 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 0) (const_int 16)\n-                     (const_int 1) (const_int 17)\n-                     (const_int 2) (const_int 18)\n-                     (const_int 3) (const_int 19)\n-                     (const_int 4) (const_int 20)\n-                     (const_int 5) (const_int 21)\n-                     (const_int 6) (const_int 22)\n-                     (const_int 7) (const_int 23)])))]\n-  \"TARGET_SSE2\"\n-{\n-  emit_insn (gen_sse2_punpcklbw (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"vec_interleave_highv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=\")\n-        (vec_select:V8HI\n-          (vec_concat:V16HI\n-            (match_operand:V8HI 1 \"register_operand\" \"\")\n-            (match_operand:V8HI 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 4) (const_int 12)\n-                     (const_int 5) (const_int 13)\n-                     (const_int 6) (const_int 14)\n-                     (const_int 7) (const_int 15)])))]\n-  \"TARGET_SSE2\"\n-{\n-  emit_insn (gen_sse2_punpckhwd (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"vec_interleave_lowv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n-        (vec_select:V8HI\n-          (vec_concat:V16HI\n-            (match_operand:V8HI 1 \"register_operand\" \"\")\n-            (match_operand:V8HI 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 0) (const_int 8)\n-                     (const_int 1) (const_int 9)\n-                     (const_int 2) (const_int 10)\n-                     (const_int 3) (const_int 11)])))]\n-  \"TARGET_SSE2\"\n-{\n-  emit_insn (gen_sse2_punpcklwd (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"vec_interleave_highv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n-        (vec_select:V4SI\n-          (vec_concat:V8SI\n-            (match_operand:V4SI 1 \"register_operand\" \"\")\n-            (match_operand:V4SI 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 2) (const_int 6)\n-                     (const_int 3) (const_int 7)])))]\n-  \"TARGET_SSE2\"\n-{\n-  emit_insn (gen_sse2_punpckhdq (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"vec_interleave_lowv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n-        (vec_select:V4SI\n-          (vec_concat:V8SI\n-            (match_operand:V4SI 1 \"register_operand\" \"\")\n-            (match_operand:V4SI 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 0) (const_int 4)\n-                     (const_int 1) (const_int 5)])))]\n-  \"TARGET_SSE2\"\n-{\n-  emit_insn (gen_sse2_punpckldq (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"vec_interleave_highv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-        (vec_select:V2DI\n-          (vec_concat:V4DI\n-            (match_operand:V2DI 1 \"register_operand\" \"\")\n-            (match_operand:V2DI 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 1)\n-                     (const_int 3)])))]\n-  \"TARGET_SSE2\"\n-{\n-  emit_insn (gen_sse2_punpckhqdq (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"vec_interleave_lowv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-        (vec_select:V2DI\n-          (vec_concat:V4DI\n-            (match_operand:V2DI 1 \"register_operand\" \"\")\n-            (match_operand:V2DI 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 0)\n-                     (const_int 2)])))]\n-  \"TARGET_SSE2\"\n-{\n-  emit_insn (gen_sse2_punpcklqdq (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"vec_interleave_highv4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-        (vec_select:V4SF\n-          (vec_concat:V8SF\n-            (match_operand:V4SF 1 \"register_operand\" \"\")\n-            (match_operand:V4SF 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 2) (const_int 6)\n-                     (const_int 3) (const_int 7)])))]\n-  \"TARGET_SSE\")\n-\n-(define_expand \"vec_interleave_lowv4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-        (vec_select:V4SF\n-          (vec_concat:V8SF\n-            (match_operand:V4SF 1 \"register_operand\" \"\")\n-            (match_operand:V4SF 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 0) (const_int 4)\n-                     (const_int 1) (const_int 5)])))]\n-  \"TARGET_SSE\")\n-\n-(define_expand \"vec_interleave_highv2df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n-        (vec_select:V2DF\n-          (vec_concat:V4DF\n-            (match_operand:V2DF 1 \"register_operand\" \"\")\n-            (match_operand:V2DF 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 1)\n-                     (const_int 3)])))]\n-  \"TARGET_SSE2\")\n-\n-(define_expand \"vec_interleave_lowv2df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n-        (vec_select:V2DF\n-          (vec_concat:V4DF\n-            (match_operand:V2DF 1 \"register_operand\" \"\")\n-            (match_operand:V2DF 2 \"nonimmediate_operand\" \"\"))\n-          (parallel [(const_int 0)\n-                     (const_int 2)])))]\n-  \"TARGET_SSE2\")\n-\n (define_insn \"*avx_packsswb\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n \t(vec_concat:V16QI\n@@ -6835,7 +6673,7 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx_punpckhbw\"\n+(define_insn \"*avx_interleave_highv16qi\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n@@ -6855,7 +6693,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_punpckhbw\"\n+(define_insn \"vec_interleave_highv16qi\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n@@ -6875,7 +6713,7 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx_punpcklbw\"\n+(define_insn \"*avx_interleave_lowv16qi\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n@@ -6895,7 +6733,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_punpcklbw\"\n+(define_insn \"vec_interleave_lowv16qi\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n@@ -6915,7 +6753,7 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx_punpckhwd\"\n+(define_insn \"*avx_interleave_highv8hi\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n \t(vec_select:V8HI\n \t  (vec_concat:V16HI\n@@ -6931,7 +6769,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_punpckhwd\"\n+(define_insn \"vec_interleave_highv8hi\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n \t(vec_select:V8HI\n \t  (vec_concat:V16HI\n@@ -6947,7 +6785,7 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx_punpcklwd\"\n+(define_insn \"*avx_interleave_lowv8hi\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n \t(vec_select:V8HI\n \t  (vec_concat:V16HI\n@@ -6963,7 +6801,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_punpcklwd\"\n+(define_insn \"vec_interleave_lowv8hi\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n \t(vec_select:V8HI\n \t  (vec_concat:V16HI\n@@ -6979,7 +6817,7 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx_punpckhdq\"\n+(define_insn \"*avx_interleave_highv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(vec_select:V4SI\n \t  (vec_concat:V8SI\n@@ -6993,7 +6831,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_punpckhdq\"\n+(define_insn \"vec_interleave_highv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(vec_select:V4SI\n \t  (vec_concat:V8SI\n@@ -7007,7 +6845,7 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx_punpckldq\"\n+(define_insn \"*avx_interleave_lowv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(vec_select:V4SI\n \t  (vec_concat:V8SI\n@@ -7021,7 +6859,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_punpckldq\"\n+(define_insn \"vec_interleave_lowv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(vec_select:V4SI\n \t  (vec_concat:V8SI"}]}