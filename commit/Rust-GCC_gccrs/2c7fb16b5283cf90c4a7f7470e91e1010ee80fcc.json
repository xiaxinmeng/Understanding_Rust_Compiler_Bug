{"sha": "2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc", "node_id": "C_kwDOANBUbNoAKDJjN2ZiMTZiNTI4M2NmOTBjNGE3Zjc0NzBlOTFlMTAxMGVlODBmY2M", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-09T22:22:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-09T23:19:03Z"}, "message": "libstdc++: Fix ambiguous comparisons for iterators in C++20\n\nSince r11-1571 (c++: Refinements to \"more constrained\") was changed in\nthe front end, the following comment from stl_iterator.h stopped being\ntrue:\n\n  // These extra overloads are not needed in C++20, because the ones above\n  // are constrained with a requires-clause and so overload resolution will\n  // prefer them to greedy unconstrained function templates.\n\nThe requires-clause is no longer considered when comparing unrelated\nfunction templates. That means that the constrained operator== specified\nin the standard is no longer more constrained than the pathological\ncomparison operators defined in the testsuite_greedy_ops.h header. This\nwas causing several tests to FAIL in C++20 mode:\n\nFAIL: 23_containers/deque/types/1.cc (test for excess errors)\nFAIL: 23_containers/vector/types/1.cc (test for excess errors)\nFAIL: 24_iterators/move_iterator/greedy_ops.cc (test for excess errors)\nFAIL: 24_iterators/normal_iterator/greedy_ops.cc (test for excess errors)\nFAIL: 24_iterators/reverse_iterator/greedy_ops.cc (test for excess errors)\n\nThe solution is to restore some of the non-standard comparison operators\nthat are more specialized than the greedy operators in the testsuite.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator.h (operator==, operator<=>): Define\n\toverloads for homogeneous specializations of reverse_iterator,\n\t__normal_iterator and move_iterator.", "tree": {"sha": "6d1c7f042ac1628d654528582fe02310903f4d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d1c7f042ac1628d654528582fe02310903f4d75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9042302ef06dc8484ee188ebd6c4164ba67d347d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9042302ef06dc8484ee188ebd6c4164ba67d347d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9042302ef06dc8484ee188ebd6c4164ba67d347d"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "6bd860b803eb9a73a4d09afba178ad656381cc76", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc", "patch": "@@ -574,6 +574,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator<=>(const reverse_iterator<_IteratorL>& __x,\n \t\tconst reverse_iterator<_IteratorR>& __y)\n     { return __y.base() <=> __x.base(); }\n+\n+  // Additional, non-standard overloads to avoid ambiguities with greedy,\n+  // unconstrained overloads in associated namespaces.\n+\n+  template<typename _Iterator>\n+    [[nodiscard]]\n+    constexpr bool\n+    operator==(const reverse_iterator<_Iterator>& __x,\n+\t       const reverse_iterator<_Iterator>& __y)\n+    requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }\n+    { return __x.base() == __y.base(); }\n+\n+  template<three_way_comparable _Iterator>\n+    [[nodiscard]]\n+    constexpr compare_three_way_result_t<_Iterator, _Iterator>\n+    operator<=>(const reverse_iterator<_Iterator>& __x,\n+\t\tconst reverse_iterator<_Iterator>& __y)\n+    { return __y.base() <=> __x.base(); }\n #endif // C++20\n   ///@}\n \n@@ -1161,6 +1179,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\tconst __normal_iterator<_IteratorR, _Container>& __rhs)\n     noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))\n     { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }\n+\n+  template<typename _Iterator, typename _Container>\n+    [[nodiscard]]\n+    constexpr bool\n+    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,\n+\t       const __normal_iterator<_Iterator, _Container>& __rhs)\n+    noexcept(noexcept(__lhs.base() == __rhs.base()))\n+    requires requires {\n+      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;\n+    }\n+    { return __lhs.base() == __rhs.base(); }\n+\n+  template<typename _Iterator, typename _Container>\n+    [[nodiscard]]\n+    constexpr std::__detail::__synth3way_t<_Iterator>\n+    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,\n+\t\tconst __normal_iterator<_Iterator, _Container>& __rhs)\n+    noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))\n+    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }\n #else\n    // Forward iterator requirements\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n@@ -1689,21 +1726,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     { return !(__x < __y); }\n \n-#if ! (__cplusplus > 201703L && __cpp_lib_concepts)\n   // Note: See __normal_iterator operators note from Gaby to understand\n   // why we have these extra overloads for some move_iterator operators.\n \n-  // These extra overloads are not needed in C++20, because the ones above\n-  // are constrained with a requires-clause and so overload resolution will\n-  // prefer them to greedy unconstrained function templates.\n-\n   template<typename _Iterator>\n     [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const move_iterator<_Iterator>& __x,\n \t       const move_iterator<_Iterator>& __y)\n     { return __x.base() == __y.base(); }\n \n+#if __cpp_lib_three_way_comparison\n+  template<three_way_comparable _Iterator>\n+    [[__nodiscard__]]\n+    constexpr compare_three_way_result_t<_Iterator>\n+    operator<=>(const move_iterator<_Iterator>& __x,\n+\t\tconst move_iterator<_Iterator>& __y)\n+    { return __x.base() <=> __y.base(); }\n+#else\n   template<typename _Iterator>\n     [[__nodiscard__]]\n     inline _GLIBCXX17_CONSTEXPR bool"}]}