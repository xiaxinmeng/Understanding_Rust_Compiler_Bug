{"sha": "5ebfd7ba2f612283656de4e7b8082bf82ef2b957", "node_id": "C_kwDOANBUbNoAKDVlYmZkN2JhMmY2MTIyODM2NTZkZTRlN2I4MDgyYmY4MmVmMmI5NTc", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2023-02-03T09:06:06Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2023-02-06T13:40:40Z"}, "message": "LoongArch: Generate bytepick.[wd] for suitable bit operation pattern\n\nWe can use bytepick.[wd] for\n\n    a << (8 * x) | b >> (8 * (sizeof(a) - x))\n\nwhile a and b are uint32_t or uint64_t.  This is useful for some cases,\nfor example:\nhttps://sourceware.org/pipermail/libc-alpha/2023-February/145203.html\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (bytepick_w_ashift_amount):\n\tNew define_int_iterator.\n\t(bytepick_d_ashift_amount): Likewise.\n\t(bytepick_imm): New define_int_attr.\n\t(bytepick_w_lshiftrt_amount): Likewise.\n\t(bytepick_d_lshiftrt_amount): Likewise.\n\t(bytepick_w_<bytepick_imm>): New define_insn template.\n\t(bytepick_w_<bytepick_imm>_extend): Likewise.\n\t(bytepick_d_<bytepick_imm>): Likewise.\n\t(bytepick_w): Remove unused define_insn.\n\t(bytepick_d): Likewise.\n\t(UNSPEC_BYTEPICK_W): Remove unused unspec.\n\t(UNSPEC_BYTEPICK_D): Likewise.\n\t* config/loongarch/predicates.md (const_0_to_3_operand):\n\tRemove unused define_predicate.\n\t(const_0_to_7_operand): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/loongarch/bytepick.C: New test.", "tree": {"sha": "a3f622584cdcdb2025d5d1e924f75cedf0f0daad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3f622584cdcdb2025d5d1e924f75cedf0f0daad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ebfd7ba2f612283656de4e7b8082bf82ef2b957", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCY+EDXAAKCRCsqtIOGecQ\n406jAQCDt31CeLMZtu/oOBbajgV+hX3TWIbNohGYA8Tdn0GbswD/R0ffprS0CI9x\nPujB1G9x9FFtRzT+GMIU27gXl+t5UAU=\n=GdB1\n-----END PGP SIGNATURE-----", "payload": "tree a3f622584cdcdb2025d5d1e924f75cedf0f0daad\nparent c490c7c0ef34113ee8de7fd4cd4a424498541891\nauthor Xi Ruoyao <xry111@xry111.site> 1675415166 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1675690840 +0800\n\nLoongArch: Generate bytepick.[wd] for suitable bit operation pattern\n\nWe can use bytepick.[wd] for\n\n    a << (8 * x) | b >> (8 * (sizeof(a) - x))\n\nwhile a and b are uint32_t or uint64_t.  This is useful for some cases,\nfor example:\nhttps://sourceware.org/pipermail/libc-alpha/2023-February/145203.html\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (bytepick_w_ashift_amount):\n\tNew define_int_iterator.\n\t(bytepick_d_ashift_amount): Likewise.\n\t(bytepick_imm): New define_int_attr.\n\t(bytepick_w_lshiftrt_amount): Likewise.\n\t(bytepick_d_lshiftrt_amount): Likewise.\n\t(bytepick_w_<bytepick_imm>): New define_insn template.\n\t(bytepick_w_<bytepick_imm>_extend): Likewise.\n\t(bytepick_d_<bytepick_imm>): Likewise.\n\t(bytepick_w): Remove unused define_insn.\n\t(bytepick_d): Likewise.\n\t(UNSPEC_BYTEPICK_W): Remove unused unspec.\n\t(UNSPEC_BYTEPICK_D): Likewise.\n\t* config/loongarch/predicates.md (const_0_to_3_operand):\n\tRemove unused define_predicate.\n\t(const_0_to_7_operand): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/loongarch/bytepick.C: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ebfd7ba2f612283656de4e7b8082bf82ef2b957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ebfd7ba2f612283656de4e7b8082bf82ef2b957", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ebfd7ba2f612283656de4e7b8082bf82ef2b957/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c490c7c0ef34113ee8de7fd4cd4a424498541891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c490c7c0ef34113ee8de7fd4cd4a424498541891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c490c7c0ef34113ee8de7fd4cd4a424498541891"}], "stats": {"total": 100, "additions": 77, "deletions": 23}, "files": [{"sha": "3509c3c21c175db4964577be2be0dd94d3b0debb", "filename": "gcc/config/loongarch/loongarch.md", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ebfd7ba2f612283656de4e7b8082bf82ef2b957/gcc%2Fconfig%2Floongarch%2Floongarch.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ebfd7ba2f612283656de4e7b8082bf82ef2b957/gcc%2Fconfig%2Floongarch%2Floongarch.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.md?ref=5ebfd7ba2f612283656de4e7b8082bf82ef2b957", "patch": "@@ -48,8 +48,6 @@\n   UNSPEC_EH_RETURN\n \n   ;; Bit operation\n-  UNSPEC_BYTEPICK_W\n-  UNSPEC_BYTEPICK_D\n   UNSPEC_BITREV_4B\n   UNSPEC_BITREV_8B\n \n@@ -544,6 +542,27 @@\n \t\t\t\t      (UNSPEC_FTINTRM \"0\")\n \t\t\t\t      (UNSPEC_FTINTRP \"0\")])\n \n+;; Iterator and attributes for bytepick.d\n+(define_int_iterator bytepick_w_ashift_amount [8 16 24])\n+(define_int_attr bytepick_w_lshiftrt_amount [(8 \"24\")\n+\t\t\t\t\t     (16 \"16\")\n+\t\t\t\t\t     (24 \"8\")])\n+(define_int_iterator bytepick_d_ashift_amount [8 16 24 32 40 48 56])\n+(define_int_attr bytepick_d_lshiftrt_amount [(8 \"56\")\n+\t\t\t\t\t     (16 \"48\")\n+\t\t\t\t\t     (24 \"40\")\n+\t\t\t\t\t     (32 \"32\")\n+\t\t\t\t\t     (40 \"24\")\n+\t\t\t\t\t     (48 \"16\")\n+\t\t\t\t\t     (56 \"8\")])\n+(define_int_attr bytepick_imm [(8 \"1\")\n+\t\t\t\t (16 \"2\")\n+\t\t\t\t (24 \"3\")\n+\t\t\t\t (32 \"4\")\n+\t\t\t\t (40 \"5\")\n+\t\t\t\t (48 \"6\")\n+\t\t\t\t (56 \"7\")])\n+\n ;;\n ;;  ....................\n ;;\n@@ -3364,24 +3383,35 @@\n   [(set_attr \"type\" \"unknown\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"bytepick_w\"\n+(define_insn \"bytepick_w_<bytepick_imm>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t    (match_operand:SI 3 \"const_0_to_3_operand\" \"n\")]\n-\t\t    UNSPEC_BYTEPICK_W))]\n+\t(ior:SI (lshiftrt (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t  (const_int <bytepick_w_lshiftrt_amount>))\n+\t\t(ashift (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t(const_int bytepick_w_ashift_amount))))]\n   \"\"\n-  \"bytepick.w\\t%0,%1,%2,%z3\"\n+  \"bytepick.w\\t%0,%1,%2,<bytepick_imm>\"\n   [(set_attr \"mode\" \"SI\")])\n \n-(define_insn \"bytepick_d\"\n+(define_insn \"bytepick_w_<bytepick_imm>_extend\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t    (match_operand:DI 3 \"const_0_to_7_operand\" \"n\")]\n-\t\t    UNSPEC_BYTEPICK_D))]\n-  \"\"\n-  \"bytepick.d\\t%0,%1,%2,%z3\"\n+\t(sign_extend:DI\n+\t  (ior:SI (lshiftrt (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t    (const_int <bytepick_w_lshiftrt_amount>))\n+\t\t  (ashift (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t  (const_int bytepick_w_ashift_amount)))))]\n+  \"TARGET_64BIT\"\n+  \"bytepick.w\\t%0,%1,%2,<bytepick_imm>\"\n+  [(set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"bytepick_d_<bytepick_imm>\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(ior:DI (lshiftrt (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t  (const_int <bytepick_d_lshiftrt_amount>))\n+\t\t(ashift (match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t(const_int bytepick_d_ashift_amount))))]\n+  \"TARGET_64BIT\"\n+  \"bytepick.d\\t%0,%1,%2,<bytepick_imm>\"\n   [(set_attr \"mode\" \"DI\")])\n \n (define_insn \"bitrev_4b\""}, {"sha": "95140280f1e648d2589733d0b00f74cb6a82841b", "filename": "gcc/config/loongarch/predicates.md", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ebfd7ba2f612283656de4e7b8082bf82ef2b957/gcc%2Fconfig%2Floongarch%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ebfd7ba2f612283656de4e7b8082bf82ef2b957/gcc%2Fconfig%2Floongarch%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fpredicates.md?ref=5ebfd7ba2f612283656de4e7b8082bf82ef2b957", "patch": "@@ -91,14 +91,6 @@\n   (ior (match_operand 0 \"const_1_operand\")\n        (match_operand 0 \"register_operand\")))\n \n-(define_predicate \"const_0_to_3_operand\"\n-  (and (match_code \"const_int\")\n-       (match_test \"IN_RANGE (INTVAL (op), 0, 3)\")))\n-\n-(define_predicate \"const_0_to_7_operand\"\n-  (and (match_code \"const_int\")\n-       (match_test \"IN_RANGE (INTVAL (op), 0, 7)\")))\n-\n (define_predicate \"lu52i_mask_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"UINTVAL (op) == 0xfffffffffffff\")))"}, {"sha": "a39e2fa65b7ebd42d3fec60b3ece315ea7345160", "filename": "gcc/testsuite/g++.target/loongarch/bytepick.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ebfd7ba2f612283656de4e7b8082bf82ef2b957/gcc%2Ftestsuite%2Fg%2B%2B.target%2Floongarch%2Fbytepick.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ebfd7ba2f612283656de4e7b8082bf82ef2b957/gcc%2Ftestsuite%2Fg%2B%2B.target%2Floongarch%2Fbytepick.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Floongarch%2Fbytepick.C?ref=5ebfd7ba2f612283656de4e7b8082bf82ef2b957", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mabi=lp64d\" } */\n+/* { dg-final { scan-assembler-times \"bytepick.w\\t\\\\\\$r4,\\\\\\$r5,\\\\\\$r4\" 3 } } */\n+/* { dg-final { scan-assembler-times \"bytepick.d\\t\\\\\\$r4,\\\\\\$r5,\\\\\\$r4\" 7 } } */\n+/* { dg-final { scan-assembler-not \"slli.w\" } } */\n+\n+template <class T, int offs>\n+T\n+merge (T a, T b)\n+{\n+  return a << offs | b >> (8 * sizeof (T) - offs);\n+}\n+\n+using u32 = __UINT32_TYPE__;\n+using u64 = __UINT64_TYPE__;\n+using i64 = __INT64_TYPE__;\n+\n+template u32 merge<u32, 8> (u32, u32);\n+template u32 merge<u32, 16> (u32, u32);\n+template u32 merge<u32, 24> (u32, u32);\n+\n+template u64 merge<u64, 8> (u64, u64);\n+template u64 merge<u64, 16> (u64, u64);\n+template u64 merge<u64, 24> (u64, u64);\n+template u64 merge<u64, 32> (u64, u64);\n+template u64 merge<u64, 40> (u64, u64);\n+template u64 merge<u64, 48> (u64, u64);\n+template u64 merge<u64, 56> (u64, u64);\n+\n+/* we cannot use bytepick for the following cases */\n+template i64 merge<i64, 8> (i64, i64);\n+template u64 merge<u64, 42> (u64, u64);"}]}