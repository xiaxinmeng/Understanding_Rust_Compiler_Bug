{"sha": "cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q1YTk3NTA5NGQwZWY3MmNhY2QyOGU1MzM0YjZmODNiNmMxZWFkZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T06:39:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T06:39:36Z"}, "message": "[multiple changes]\n\n2010-06-23  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb: Minor reformatting.\n\n2010-06-23  Bob Duff  <duff@adacore.com>\n\n\t* g-pehage.adb (Trim_Trailing_Nuls): Fix the code to match the comment.\n\n2010-06-23  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Compile_Sources): Complete previous change.\n\n2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Add_Extra_Formal): Use suffix \"C\" in the name of the\n\tConstrained extra formal.\n\n2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch13.adb (Expand_Freeze_Actions): If validity checks and\n\tInitialize_Scalars are enabled, compile the generated equality function\n\tfor a composite type with full checks enabled, so that validity checks\n\tare performed on individual components.\n\nFrom-SVN: r161250", "tree": {"sha": "c4111d0cf04a3fbaafe28dc59388d2a63c26f0ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4111d0cf04a3fbaafe28dc59388d2a63c26f0ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/comments", "author": null, "committer": null, "parents": [{"sha": "3aee21ef61bb90e6806563e326837316023185e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aee21ef61bb90e6806563e326837316023185e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aee21ef61bb90e6806563e326837316023185e8"}], "stats": {"total": 80, "additions": 71, "deletions": 9}, "files": [{"sha": "638e4e64d8b6cc105dfa18b055cef4cb5cfbd760", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "patch": "@@ -1,3 +1,27 @@\n+2010-06-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb: Minor reformatting.\n+\n+2010-06-23  Bob Duff  <duff@adacore.com>\n+\n+\t* g-pehage.adb (Trim_Trailing_Nuls): Fix the code to match the comment.\n+\n+2010-06-23  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Compile_Sources): Complete previous change.\n+\n+2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Add_Extra_Formal): Use suffix \"C\" in the name of the\n+\tConstrained extra formal.\n+\n+2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch13.adb (Expand_Freeze_Actions): If validity checks and\n+\tInitialize_Scalars are enabled, compile the generated equality function\n+\tfor a composite type with full checks enabled, so that validity checks\n+\tare performed on individual components.\n+\n 2010-06-23  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj.adb, prj.ads, prj-nmsc.adb (Processing_Flags): New flag"}, {"sha": "6633ffb48f5ab4640b984472da9d51d6c6a6cfb6", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,6 +46,7 @@ with Snames;   use Snames;\n with Stand;    use Stand;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n+with Validsw;  use Validsw;\n \n package body Exp_Ch13 is\n \n@@ -346,6 +347,24 @@ package body Exp_Ch13 is\n                Analyze (Decl, Suppress => All_Checks);\n                Pop_Scope;\n \n+            --  We treat generated equality specially, if validity checks are\n+            --  enabled, in order to detect components default-initialized\n+            --  with invalid values.\n+\n+            elsif Nkind (Decl) = N_Subprogram_Body\n+              and then Chars (Defining_Entity (Decl)) = Name_Op_Eq\n+              and then Validity_Checks_On\n+              and then Initialize_Scalars\n+            then\n+               declare\n+                  Save_Force : constant Boolean := Force_Validity_Checks;\n+\n+               begin\n+                  Force_Validity_Checks := True;\n+                  Analyze (Decl);\n+                  Force_Validity_Checks := Save_Force;\n+               end;\n+\n             else\n                Analyze (Decl, Suppress => All_Checks);\n             end if;"}, {"sha": "e32114ab9c0acc98e01fd4fa41037a09cfbc1665", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "patch": "@@ -4440,8 +4440,8 @@ package body Freeze is\n                   Scope_Stack.Table (Pos).Pending_Freeze_Actions :=\n                       Freeze_Nodes;\n                else\n-                  Append_List (Freeze_Nodes, Scope_Stack.Table\n-                                   (Pos).Pending_Freeze_Actions);\n+                  Append_List (Freeze_Nodes,\n+                    Scope_Stack.Table (Pos).Pending_Freeze_Actions);\n                end if;\n             end if;\n          end;"}, {"sha": "46b6d7c324788e844e26c5220f56a7e927739b54", "filename": "gcc/ada/g-pehage.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2Fg-pehage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2Fg-pehage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-pehage.adb?ref=cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "patch": "@@ -2514,9 +2514,9 @@ package body GNAT.Perfect_Hash_Generators is\n \n    function Trim_Trailing_Nuls (Str : String) return String is\n    begin\n-      for J in Str'Range loop\n-         if Str (J) = ASCII.NUL then\n-            return Str (Str'First .. J - 1);\n+      for J in reverse Str'Range loop\n+         if Str (J) /= ASCII.NUL then\n+            return Str (Str'First .. J);\n          end if;\n       end loop;\n       return Str;"}, {"sha": "d1cafbf32d3172f1a6094a819b6a5b4f96328350", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "patch": "@@ -2449,7 +2449,7 @@ package body Make is\n \n       Need_To_Check_Standard_Library : Boolean :=\n                                          (Check_Readonly_Files or Must_Compile)\n-                                           and Unique_Compile;\n+                                           and not Unique_Compile;\n \n       procedure Add_Process\n         (Pid           : Process_Id;"}, {"sha": "04242c37ffff3a36d65728b2c52b79fcfa2d3dc8", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a975094d0ef72cacd28e5334b6f83b6c1eadd/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=cd5a975094d0ef72cacd28e5334b6f83b6c1eadd", "patch": "@@ -774,6 +774,11 @@ package body Sem_Ch6 is\n                          & \"null-excluding return?\",\n                Reason => CE_Null_Not_Allowed);\n          end if;\n+\n+         --  Apply checks suggested by AI05-0144 (dangerous order dependence)\n+         --  (Disabled for now)\n+\n+         --  Check_Order_Dependence;\n       end if;\n    end Analyze_Function_Return;\n \n@@ -1039,6 +1044,7 @@ package body Sem_Ch6 is\n \n       procedure Analyze_Call_And_Resolve;\n       --  Do Analyze and Resolve calls for procedure call\n+      --  At end, check illegal order dependence.\n \n       ------------------------------\n       -- Analyze_Call_And_Resolve --\n@@ -1049,6 +1055,11 @@ package body Sem_Ch6 is\n          if Nkind (N) = N_Procedure_Call_Statement then\n             Analyze_Call (N);\n             Resolve (N, Standard_Void_Type);\n+\n+            --  Apply checks suggested by AI05-0144 (Disabled for now)\n+\n+            --  Check_Order_Dependence;\n+\n          else\n             Analyze (N);\n          end if;\n@@ -5420,6 +5431,14 @@ package body Sem_Ch6 is\n       --  and also returned as the result. These formals are always of mode IN.\n       --  The new formal has the type Typ, is declared in Scope, and its name\n       --  is given by a concatenation of the name of Assoc_Entity and Suffix.\n+      --  The following suffixes are currently used. They should not be changed\n+      --  without coordinating with CodePeer, which makes use of these to\n+      --  provide better messages.\n+\n+      --  C denotes the Constrained bit.\n+      --  A denotes the accessibility level.\n+      --  BIP_xxx denotes an extra formal for a build-in-place function. See\n+      --  the full list in exp_ch6.BIP_Formal_Kind.\n \n       ----------------------\n       -- Add_Extra_Formal --\n@@ -5546,7 +5565,7 @@ package body Sem_Ch6 is\n               and then not Is_Indefinite_Subtype (Formal_Type)\n             then\n                Set_Extra_Constrained\n-                 (Formal, Add_Extra_Formal (Formal, Standard_Boolean, E, \"F\"));\n+                 (Formal, Add_Extra_Formal (Formal, Standard_Boolean, E, \"C\"));\n             end if;\n          end if;\n \n@@ -5579,7 +5598,7 @@ package body Sem_Ch6 is\n                or else Present (Extra_Accessibility (P_Formal)))\n          then\n             Set_Extra_Accessibility\n-              (Formal, Add_Extra_Formal (Formal, Standard_Natural, E, \"F\"));\n+              (Formal, Add_Extra_Formal (Formal, Standard_Natural, E, \"A\"));\n          end if;\n \n          --  This label is required when skipping extra formal generation for"}]}