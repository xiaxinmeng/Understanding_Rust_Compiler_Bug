{"sha": "39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzllZTdmYTk1NTM1MzM3YWI4ZTdhMDQyM2YzY2YwMGMxYmQ0ZWE4NA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@act-europe.fr", "date": "2003-03-06T00:32:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-03-06T00:32:29Z"}, "message": "alpha.h (PRINT_OPERAND_PUNCT_VALID_P): Add '+'.\n\n\t* config/alpha/alpha.h (PRINT_OPERAND_PUNCT_VALID_P): Add '+'.\n\t* config/alpha/alpha.c (print_operand, case '+'): New.\n\t* config/alpha/alpha.md (call_osf_1_noreturn): Document and use.\n\t(call_value_osf_1_noreturn): Likewise.\n\nFrom-SVN: r63882", "tree": {"sha": "fdc5929c54a284741c985108be1c6e50bb82f91f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdc5929c54a284741c985108be1c6e50bb82f91f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84/comments", "author": null, "committer": null, "parents": [{"sha": "99a86ee1e2f9dd165167bf57bbd756d288dd3640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a86ee1e2f9dd165167bf57bbd756d288dd3640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99a86ee1e2f9dd165167bf57bbd756d288dd3640"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "5d76f719e8f9b6063a8d7668efb45945e43c2fd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84", "patch": "@@ -1,3 +1,10 @@\n+Wed Mar  5 19:34:18 2003  Olivier Hainque <hainque@act-europe.fr>\n+\n+\t* config/alpha/alpha.h (PRINT_OPERAND_PUNCT_VALID_P): Add '+'.\n+\t* config/alpha/alpha.c (print_operand, case '+'): New.\n+\t* config/alpha/alpha.md (call_osf_1_noreturn): Document and use.\n+\t(call_value_osf_1_noreturn): Likewise.\n+\n Wed Mar  5 18:55:02 2003  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* stmt.c (fixup_gotos): Change meaning of DONT_JUMP_IN."}, {"sha": "28b98735bf2c73c25c87ac76d8b69b3823967ad3", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84", "patch": "@@ -5916,6 +5916,13 @@ print_operand (file, x, code)\n       fputc ((TARGET_FLOAT_VAX ? 'g' : 't'), file);\n       break;\n \n+    case '+':\n+      /* Generates a nop after a noreturn call at the very end of the\n+\t function.  */\n+      if (next_real_insn (current_output_insn) == 0)\n+\tfprintf (file, \"\\n\\tnop\");\n+      break;\n+\n     case '#':\n       if (alpha_this_literal_sequence_number == 0)\n \talpha_this_literal_sequence_number = alpha_next_sequence_number++;"}, {"sha": "27f28228fcb5c42f4be105d6416ec8fcc7559496", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84", "patch": "@@ -1720,11 +1720,14 @@ do {\t\t\t\t\t\t\\\n \n    -\tGenerates double precision suffix for floating point\n \tinstructions (t for IEEE, g for VAX)\n+\n+   +\tGenerates a nop instruction after a noreturn call at the very end\n+\tof the function\n    */\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE) \\\n   ((CODE) == '/' || (CODE) == ',' || (CODE) == '-' || (CODE) == '~' \\\n-   || (CODE) == '#' || (CODE) == '*' || (CODE) == '&')\n+   || (CODE) == '#' || (CODE) == '*' || (CODE) == '&' || (CODE) == '+')\n \f\n /* Print a memory address as an operand to reference that memory location.  */\n "}, {"sha": "667464175f8ba95b6b831391af1c8cbae05bdd75", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=39ee7fa95535337ab8e7a0423f3cf00c1bd4ea84", "patch": "@@ -4687,6 +4687,16 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   \"jsr $26,(%0),%2%J3\"\n   [(set_attr \"type\" \"jsr\")])\n \n+;; We output a nop after noreturn calls at the very end of the function to\n+;; ensure that the return address always remains in the caller's code range,\n+;; as not doing so might confuse unwinding engines.\n+;;\n+;; The potential change in insn length is not reflected in the length\n+;; attributes at this stage. Since the extra space is only actually added at\n+;; the very end of the compilation process (via final/print_operand), it\n+;; really seems harmless and not worth the trouble of some extra computation\n+;; cost and complexity.\n+\n (define_insn \"*call_osf_1_noreturn\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"c,R,s\"))\n \t (match_operand 1 \"\" \"\"))\n@@ -4695,9 +4705,9 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   \"! TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\n    && find_reg_note (insn, REG_NORETURN, NULL_RTX)\"\n   \"@\n-   jsr $26,($27),0\n-   bsr $26,$%0..ng\n-   jsr $26,%0\"\n+   jsr $26,($27),0%+\n+   bsr $26,$%0..ng%+\n+   jsr $26,%0%+\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,*,8\")])\n \n@@ -7920,9 +7930,9 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   \"! TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\n    && find_reg_note (insn, REG_NORETURN, NULL_RTX)\"\n   \"@\n-   jsr $26,($27),0\n-   bsr $26,$%1..ng\n-   jsr $26,%1\"\n+   jsr $26,($27),0%+\n+   bsr $26,$%1..ng%+\n+   jsr $26,%1%+\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,*,8\")])\n "}]}