{"sha": "70582b3afe47248d2b70c5731fb7cf44fa17dc16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA1ODJiM2FmZTQ3MjQ4ZDJiNzBjNTczMWZiN2NmNDRmYTE3ZGMxNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-02-27T09:50:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-02-27T09:50:04Z"}, "message": "re PR middle-end/34971 (bitfield rotates are folded and expanded wrong)\n\n2008-02-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/34971\n\t* expr.c (expand_expr_real_1): Assert on rotates that operate\n\ton partial modes.\n\t* fold-const.c (fold_binary): Use the types precision, not the\n\tbitsize of the mode if folding rotate expressions.  Build rotates\n\tonly for full modes.\n\n\t* gcc.c-torture/execute/pr34971.c: New testcase.\n\nFrom-SVN: r132706", "tree": {"sha": "ef16ed7af638323b496055d922dbdc8e19ef42aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef16ed7af638323b496055d922dbdc8e19ef42aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70582b3afe47248d2b70c5731fb7cf44fa17dc16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70582b3afe47248d2b70c5731fb7cf44fa17dc16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70582b3afe47248d2b70c5731fb7cf44fa17dc16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70582b3afe47248d2b70c5731fb7cf44fa17dc16/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15f0fd02870fef9742d517d0894e02bdd0bbdb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15f0fd02870fef9742d517d0894e02bdd0bbdb3"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "c8e74f5c58a076906f4c9d843aa00fd772a03b36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70582b3afe47248d2b70c5731fb7cf44fa17dc16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70582b3afe47248d2b70c5731fb7cf44fa17dc16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70582b3afe47248d2b70c5731fb7cf44fa17dc16", "patch": "@@ -1,3 +1,12 @@\n+2008-02-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34971\n+\t* expr.c (expand_expr_real_1): Assert on rotates that operate\n+\ton partial modes.\n+\t* fold-const.c (fold_binary): Use the types precision, not the\n+\tbitsize of the mode if folding rotate expressions.  Build rotates\n+\tonly for full modes.\n+\n 2008-02-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-ppoutput.c (scan_translation_unit): Handle CPP_PRAGMA"}, {"sha": "79a039a529f104eaf75cdd51cfbb31d157c7a834", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70582b3afe47248d2b70c5731fb7cf44fa17dc16/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70582b3afe47248d2b70c5731fb7cf44fa17dc16/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=70582b3afe47248d2b70c5731fb7cf44fa17dc16", "patch": "@@ -8898,10 +8898,16 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n     case BIT_XOR_EXPR:\n       goto binop;\n \n-    case LSHIFT_EXPR:\n-    case RSHIFT_EXPR:\n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n+      /* The expansion code only handles expansion of mode precision\n+\t rotates.  */\n+      gcc_assert (GET_MODE_PRECISION (TYPE_MODE (type))\n+\t\t  == TYPE_PRECISION (type));\n+\n+      /* Falltrough.  */\n+    case LSHIFT_EXPR:\n+    case RSHIFT_EXPR:\n       /* If this is a fixed-point operation, then we cannot use the code\n \t below because \"expand_shift\" doesn't support sat/no-sat fixed-point\n          shifts.   */"}, {"sha": "f6a73efe9ad40164999261f0749c0984c0bcfdf0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70582b3afe47248d2b70c5731fb7cf44fa17dc16/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70582b3afe47248d2b70c5731fb7cf44fa17dc16/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=70582b3afe47248d2b70c5731fb7cf44fa17dc16", "patch": "@@ -9886,13 +9886,18 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t is a rotate of A by B bits.  */\n       {\n \tenum tree_code code0, code1;\n+\ttree rtype;\n \tcode0 = TREE_CODE (arg0);\n \tcode1 = TREE_CODE (arg1);\n \tif (((code0 == RSHIFT_EXPR && code1 == LSHIFT_EXPR)\n \t     || (code1 == RSHIFT_EXPR && code0 == LSHIFT_EXPR))\n \t    && operand_equal_p (TREE_OPERAND (arg0, 0),\n \t\t\t        TREE_OPERAND (arg1, 0), 0)\n-\t    && TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (arg0, 0))))\n+\t    && (rtype = TREE_TYPE (TREE_OPERAND (arg0, 0)),\n+\t        TYPE_UNSIGNED (rtype))\n+\t    /* Only create rotates in complete modes.  Other cases are not\n+\t       expanded properly.  */\n+\t    && TYPE_PRECISION (rtype) == GET_MODE_PRECISION (TYPE_MODE (rtype)))\n \t  {\n \t    tree tree01, tree11;\n \t    enum tree_code code01, code11;\n@@ -11636,7 +11641,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       if (code == LROTATE_EXPR && TREE_CODE (arg1) == INTEGER_CST)\n \t{\n \t  tree tem = build_int_cst (TREE_TYPE (arg1),\n-\t\t\t\t    GET_MODE_BITSIZE (TYPE_MODE (type)));\n+\t\t\t\t    TYPE_PRECISION (type));\n \t  tem = const_binop (MINUS_EXPR, tem, arg1, 0);\n \t  return fold_build2 (RROTATE_EXPR, type, op0, tem);\n \t}\n@@ -11655,16 +11660,16 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t    fold_build2 (code, type,\n \t\t\t\t\t TREE_OPERAND (arg0, 1), arg1));\n \n-      /* Two consecutive rotates adding up to the width of the mode can\n-\t be ignored.  */\n+      /* Two consecutive rotates adding up to the precision of the\n+\t type can be ignored.  */\n       if (code == RROTATE_EXPR && TREE_CODE (arg1) == INTEGER_CST\n \t  && TREE_CODE (arg0) == RROTATE_EXPR\n \t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n \t  && TREE_INT_CST_HIGH (arg1) == 0\n \t  && TREE_INT_CST_HIGH (TREE_OPERAND (arg0, 1)) == 0\n \t  && ((TREE_INT_CST_LOW (arg1)\n \t       + TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1)))\n-\t      == (unsigned int) GET_MODE_BITSIZE (TYPE_MODE (type))))\n+\t      == (unsigned int) TYPE_PRECISION (type)))\n \treturn TREE_OPERAND (arg0, 0);\n \n       /* Fold (X & C2) << C1 into (X << C1) & (C2 << C1)"}, {"sha": "3435b5bfb422b5bbc678cfcf150751c39704017c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70582b3afe47248d2b70c5731fb7cf44fa17dc16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70582b3afe47248d2b70c5731fb7cf44fa17dc16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70582b3afe47248d2b70c5731fb7cf44fa17dc16", "patch": "@@ -1,3 +1,8 @@\n+2008-02-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34971\n+\t* gcc.c-torture/execute/pr34971.c: New testcase.\n+\n 2008-02-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/gomp/preprocess-1.c: New test."}, {"sha": "3299aee22c994082f5b162bf0a31c540cf18ba3b", "filename": "gcc/testsuite/gcc.c-torture/execute/pr34971.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70582b3afe47248d2b70c5731fb7cf44fa17dc16/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34971.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70582b3afe47248d2b70c5731fb7cf44fa17dc16/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34971.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34971.c?ref=70582b3afe47248d2b70c5731fb7cf44fa17dc16", "patch": "@@ -0,0 +1,22 @@\n+struct foo\n+{\n+  unsigned long long b:40;\n+} x;\n+\n+extern void abort (void);\n+\n+void test1(unsigned long long res)\n+{\n+  /* Build a rotate expression on a 40 bit argument.  */\n+  if ((x.b<<8) + (x.b>>32) != res)\n+    abort ();\n+}\n+\n+int main()\n+{\n+  x.b = 0x0100000001;\n+  test1(0x0000000101);\n+  x.b = 0x0100000000;\n+  test1(0x0000000001);\n+  return 0;\n+}"}]}