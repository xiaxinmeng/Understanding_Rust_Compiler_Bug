{"sha": "715a572a8a19d90b8dc02601adbae32a1a78652d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1YTU3MmE4YTE5ZDkwYjhkYzAyNjAxYWRiYWUzMmExYTc4NjUyZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-08-14T21:42:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-08-14T21:42:54Z"}, "message": "re PR c++/51912 ([C++11] G++ accepts floating point case labels)\n\n/cp\n2013-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51912\n\t* cp-tree.h (LOOKUP_NO_NON_INTEGRAL): Add.\n\t* decl.c (case_conversion): Use it.\n\t* call.c (standard_conversion): Likewise.\n\t(implicit_conversion): Adjust.\n\n/testsuite\n2013-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51912\n\t* g++.dg/cpp0x/enum28.C: New.\n\t* g++.dg/cpp0x/enum15.C: Adjust.\n\nFrom-SVN: r201754", "tree": {"sha": "518cedf423597dcc1735e32bfb64b1b80c3f8b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/518cedf423597dcc1735e32bfb64b1b80c3f8b2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/715a572a8a19d90b8dc02601adbae32a1a78652d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715a572a8a19d90b8dc02601adbae32a1a78652d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715a572a8a19d90b8dc02601adbae32a1a78652d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715a572a8a19d90b8dc02601adbae32a1a78652d/comments", "author": null, "committer": null, "parents": [{"sha": "1869217f8819f72a210026e7d4ede7b88f40ac9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1869217f8819f72a210026e7d4ede7b88f40ac9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1869217f8819f72a210026e7d4ede7b88f40ac9e"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "502eecb812e1a6cc7f3444d0dd3ad07b2b2b11d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=715a572a8a19d90b8dc02601adbae32a1a78652d", "patch": "@@ -1,3 +1,11 @@\n+2013-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51912\n+\t* cp-tree.h (LOOKUP_NO_NON_INTEGRAL): Add.\n+\t* decl.c (case_conversion): Use it.\n+\t* call.c (standard_conversion): Likewise.\n+\t(implicit_conversion): Adjust.\n+\n 2013-08-13  Adam Butcher  <adam@jessamine.co.uk>\n \n \t* pt.c: Grammar fix in comments (\"it's\" to \"its\")."}, {"sha": "e493a7947be5c67bd1a4a33f6a147fbef11a69d9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=715a572a8a19d90b8dc02601adbae32a1a78652d", "patch": "@@ -1314,7 +1314,8 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n   /* As an extension, allow conversion to complex type.  */\n   else if (ARITHMETIC_TYPE_P (to))\n     {\n-      if (! (INTEGRAL_CODE_P (fcode) || fcode == REAL_TYPE)\n+      if (! (INTEGRAL_CODE_P (fcode)\n+\t     || (fcode == REAL_TYPE && !(flags & LOOKUP_NO_NON_INTEGRAL)))\n           || SCOPED_ENUM_P (from))\n \treturn NULL;\n       conv = build_conv (ck_std, to, conv);\n@@ -1681,7 +1682,7 @@ implicit_conversion (tree to, tree from, tree expr, bool c_cast_p,\n      resolution, or after we've chosen one.  */\n   flags &= (LOOKUP_ONLYCONVERTING|LOOKUP_NO_CONVERSION|LOOKUP_COPY_PARM\n \t    |LOOKUP_NO_TEMP_BIND|LOOKUP_NO_RVAL_BIND|LOOKUP_PREFER_RVALUE\n-\t    |LOOKUP_NO_NARROWING|LOOKUP_PROTECT);\n+\t    |LOOKUP_NO_NARROWING|LOOKUP_PROTECT|LOOKUP_NO_NON_INTEGRAL);\n \n   /* FIXME: actually we don't want warnings either, but we can't just\n      have 'complain &= ~(tf_warning|tf_error)' because it would cause"}, {"sha": "51dab8aa4f34aafc85b63aaf5b43f1ed60a5197d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=715a572a8a19d90b8dc02601adbae32a1a78652d", "patch": "@@ -4510,6 +4510,8 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n #define LOOKUP_EXPLICIT_TMPL_ARGS (LOOKUP_ALREADY_DIGESTED << 1)\n /* Like LOOKUP_NO_TEMP_BIND, but also prevent binding to xvalues.  */\n #define LOOKUP_NO_RVAL_BIND (LOOKUP_EXPLICIT_TMPL_ARGS << 1)\n+/* Used by case_conversion to disregard non-integral conversions.  */\n+#define LOOKUP_NO_NON_INTEGRAL (LOOKUP_NO_RVAL_BIND << 1)\n \n #define LOOKUP_NAMESPACES_ONLY(F)  \\\n   (((F) & LOOKUP_PREFER_NAMESPACES) && !((F) & LOOKUP_PREFER_TYPES))"}, {"sha": "95d5bbda785e53ec6c6915abc06df5ce3776fa7e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=715a572a8a19d90b8dc02601adbae32a1a78652d", "patch": "@@ -3103,7 +3103,9 @@ case_conversion (tree type, tree value)\n     {\n       if (INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (type))\n \ttype = type_promotes_to (type);\n-      value = perform_implicit_conversion (type, value, tf_warning_or_error);\n+      value = (perform_implicit_conversion_flags\n+\t       (type, value, tf_warning_or_error,\n+\t\tLOOKUP_IMPLICIT | LOOKUP_NO_NON_INTEGRAL));\n     }\n   return cxx_constant_value (value);\n }"}, {"sha": "9b115a48df313b2ea4303d52d2d56728f660ba2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=715a572a8a19d90b8dc02601adbae32a1a78652d", "patch": "@@ -1,3 +1,9 @@\n+2013-08-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51912\n+\t* g++.dg/cpp0x/enum28.C: New.\n+\t* g++.dg/cpp0x/enum15.C: Adjust.\n+\n 2013-08-14  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR target/57949"}, {"sha": "1d33f90290f6db7eeb7c0a289dcfb07667d65528", "filename": "gcc/testsuite/g++.dg/cpp0x/enum15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum15.C?ref=715a572a8a19d90b8dc02601adbae32a1a78652d", "patch": "@@ -15,6 +15,6 @@ void foo (A a, int i)\n     {\n     case A::Val0: break;\t// { dg-error \"\" }\n     case 1: break;\n-    case 2.0: break;\n+    case 2.0: break;            // { dg-error \"\" }\n     }\n }"}, {"sha": "3967699dd0362dbff61a7fad81ed91f5f9c789f4", "filename": "gcc/testsuite/g++.dg/cpp0x/enum28.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715a572a8a19d90b8dc02601adbae32a1a78652d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum28.C?ref=715a572a8a19d90b8dc02601adbae32a1a78652d", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/51912\n+// { dg-do compile { target c++11 } }\n+\n+constexpr double g() { return 2.0; }\n+\n+void f(int i)\n+{\n+  switch (i)\n+    {\n+    case 1.0:;    // { dg-error \"could not convert\" }\n+    }\n+\n+  switch (i)\n+    {\n+    case g():;    // { dg-error \"could not convert\" }\n+    }\n+}"}]}