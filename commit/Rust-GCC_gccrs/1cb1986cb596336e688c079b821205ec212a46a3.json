{"sha": "1cb1986cb596336e688c079b821205ec212a46a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNiMTk4NmNiNTk2MzM2ZTY4OGMwNzliODIxMjA1ZWMyMTJhNDZhMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-30T20:55:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-30T20:55:36Z"}, "message": "c++: Fix handling of internal fn calls in statement expressions [PR94385]\n\nThe following testcase ICEs, because the FE when processing the statement\nexpression changes the .VEC_CONVERT internal fn CALL_EXPR into .PHI call.\nThat is because the internal fn call is recorded in the base.u.ifn\nfield, which overlaps base.u.bits.lang_flag_1 which is used for\nSTMT_IS_FULL_EXPR_P, so this essentially does ifn |= 2 on little-endian.\nSTMT_IS_FULL_EXPR_P bit is used in:\ncp-gimplify.c-  if (STATEMENT_CODE_P (code))\ncp-gimplify.c-    {\ncp-gimplify.c-      saved_stmts_are_full_exprs_p = stmts_are_full_exprs_p ();\ncp-gimplify.c-      current_stmt_tree ()->stmts_are_full_exprs_p\ncp-gimplify.c:        = STMT_IS_FULL_EXPR_P (*expr_p);\ncp-gimplify.c-    }\nand\npt.c-  if (STATEMENT_CODE_P (TREE_CODE (t)))\npt.c:    current_stmt_tree ()->stmts_are_full_exprs_p = STMT_IS_FULL_EXPR_P (t);\nso besides being wrong on some other codes, it actually isn't beneficial at\nall to set it on anything else, so the following patch restricts it to\ntrees with STATEMENT_CODE_P TREE_CODE.\n\n2020-03-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/94385\n\t* semantics.c (add_stmt): Only set STMT_IS_FULL_EXPR_P on trees with\n\tSTATEMENT_CODE_P code.\n\n\t* c-c++-common/pr94385.c: New test.", "tree": {"sha": "57cc305c98471cdb9b06d0655f52c101704f5050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57cc305c98471cdb9b06d0655f52c101704f5050"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cb1986cb596336e688c079b821205ec212a46a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb1986cb596336e688c079b821205ec212a46a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb1986cb596336e688c079b821205ec212a46a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb1986cb596336e688c079b821205ec212a46a3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48e331d63827a0500670d685c0fe7d609e0a807a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e331d63827a0500670d685c0fe7d609e0a807a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e331d63827a0500670d685c0fe7d609e0a807a"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "be22bc091dd21ee8c6d2c0cc99fd5d87ce7f8c11", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1986cb596336e688c079b821205ec212a46a3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1986cb596336e688c079b821205ec212a46a3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1cb1986cb596336e688c079b821205ec212a46a3", "patch": "@@ -1,3 +1,9 @@\n+2020-03-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/94385\n+\t* semantics.c (add_stmt): Only set STMT_IS_FULL_EXPR_P on trees with\n+\tSTATEMENT_CODE_P code.\n+\n 2020-03-28  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94306"}, {"sha": "c7a6064e9f338bdf5a12b421c4e15ba5b6f7f492", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1986cb596336e688c079b821205ec212a46a3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1986cb596336e688c079b821205ec212a46a3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1cb1986cb596336e688c079b821205ec212a46a3", "patch": "@@ -380,7 +380,8 @@ add_stmt (tree t)\n \n       /* When we expand a statement-tree, we must know whether or not the\n \t statements are full-expressions.  We record that fact here.  */\n-      STMT_IS_FULL_EXPR_P (t) = stmts_are_full_exprs_p ();\n+      if (STATEMENT_CODE_P (TREE_CODE (t)))\n+\tSTMT_IS_FULL_EXPR_P (t) = stmts_are_full_exprs_p ();\n     }\n \n   if (code == LABEL_EXPR || code == CASE_LABEL_EXPR)"}, {"sha": "66c71f1c15fabc80c7b72ed163cdcb69a18c1238", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1986cb596336e688c079b821205ec212a46a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1986cb596336e688c079b821205ec212a46a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cb1986cb596336e688c079b821205ec212a46a3", "patch": "@@ -1,3 +1,8 @@\n+2020-03-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/94385\n+\t* c-c++-common/pr94385.c: New test.\n+\n 2020-03-30  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/pragma_power6.c: New."}, {"sha": "0611921295c5af928e525c9a5d4b27ea884bf10f", "filename": "gcc/testsuite/c-c++-common/pr94385.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1986cb596336e688c079b821205ec212a46a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr94385.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1986cb596336e688c079b821205ec212a46a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr94385.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr94385.c?ref=1cb1986cb596336e688c079b821205ec212a46a3", "patch": "@@ -0,0 +1,12 @@\n+/* PR c++/94385 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef int V __attribute__((__vector_size__(16)));\n+typedef float W __attribute__((__vector_size__(16)));\n+\n+void\n+foo (W *x, V *y)\n+{\n+  *y = (({ __builtin_convertvector (*x, V); }));\n+}"}]}