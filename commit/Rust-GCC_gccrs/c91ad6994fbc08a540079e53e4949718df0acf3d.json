{"sha": "c91ad6994fbc08a540079e53e4949718df0acf3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkxYWQ2OTk0ZmJjMDhhNTQwMDc5ZTUzZTQ5NDk3MThkZjBhY2YzZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@merlin.codesourcery.com", "date": "2000-07-13T10:37:41Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-07-13T10:37:41Z"}, "message": "diagnostic.c (vline_wrapper_message_with_location, [...]): Remove.\n\n2000-07-12  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n        * diagnostic.c (vline_wrapper_message_with_location,\n        v_message_with_file_and_line, v_error_with_file_and_file,\n        v_error_for_asm, v_warning_for_asm, vfatal,\n        v_warning_with_file_and_line, v_pedwarn_with_file_and_line,\n        vsorry, verror, vwarning, vpedwarn): Remove.\n        (diagnostic_for_asm): New function.\n        (pedwarn, error, warning, pedwarn_with_file_and_line,\n        error_with_file_and_line, warning_with_file_and_line, sorry,\n        error_for_asm, warning_for_asm, fatal): Reimplement.\n        (finish_diagnostic): Clear diagnostic info as well.\n\nFrom-SVN: r35011", "tree": {"sha": "c33826876362d51a5c301a1fa486342e73ee3789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33826876362d51a5c301a1fa486342e73ee3789"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c91ad6994fbc08a540079e53e4949718df0acf3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91ad6994fbc08a540079e53e4949718df0acf3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c91ad6994fbc08a540079e53e4949718df0acf3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91ad6994fbc08a540079e53e4949718df0acf3d/comments", "author": null, "committer": null, "parents": [{"sha": "530d0ba53bd732d20f274308da997fdb12697602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530d0ba53bd732d20f274308da997fdb12697602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530d0ba53bd732d20f274308da997fdb12697602"}], "stats": {"total": 288, "additions": 62, "deletions": 226}, "files": [{"sha": "ed91cb7bc557399853e03dfc969d31aa52dbe664", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91ad6994fbc08a540079e53e4949718df0acf3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91ad6994fbc08a540079e53e4949718df0acf3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c91ad6994fbc08a540079e53e4949718df0acf3d", "patch": "@@ -1,3 +1,16 @@\n+2000-07-12  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+\n+\t* diagnostic.c (vline_wrapper_message_with_location,\n+\tv_message_with_file_and_line, v_error_with_file_and_file,\n+\tv_error_for_asm, v_warning_for_asm, vfatal,\n+\tv_warning_with_file_and_line, v_pedwarn_with_file_and_line,\n+\tvsorry, verror, vwarning, vpedwarn): Remove.\n+\t(diagnostic_for_asm): New function.\n+\t(pedwarn, error, warning, pedwarn_with_file_and_line,\n+\terror_with_file_and_line, warning_with_file_and_line, sorry,\n+\terror_for_asm, warning_for_asm, fatal): Reimplement.\n+\t(finish_diagnostic): Clear diagnostic info as well.\n+\t\n 2000-07-13  Neil Booth  <NeilB@earthling.net>\n \n \t* c-common.h (flag_digraphs): New."}, {"sha": "d354f81507fc633cff279469223a6240e2b5f59b", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 49, "deletions": 226, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91ad6994fbc08a540079e53e4949718df0acf3d/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91ad6994fbc08a540079e53e4949718df0acf3d/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=c91ad6994fbc08a540079e53e4949718df0acf3d", "patch": "@@ -77,30 +77,13 @@ static char *context_as_prefix PARAMS ((const char *, int, int));\n static void output_do_printf PARAMS ((output_buffer *, const char *));\n static void line_wrapper_printf PARAMS ((FILE *, const char *, ...))\n      ATTRIBUTE_PRINTF_2;\n-static void vline_wrapper_message_with_location PARAMS ((const char *, int,\n-\t\t\t\t\t\t\t int, const char *,\n-\t\t\t\t\t\t\t va_list));\n static void notice PARAMS ((const char *s, ...)) ATTRIBUTE_PRINTF_1;\n-static void v_message_with_file_and_line PARAMS ((const char *, int, int,\n-\t\t\t\t\t\t  const char *, va_list));\n static void v_message_with_decl PARAMS ((tree, int, const char *, va_list));\n static void file_and_line_for_asm PARAMS ((rtx, const char **, int *));\n-static void v_error_with_file_and_line PARAMS ((const char *, int,\n-\t\t\t\t\t\tconst char *, va_list));\n+static void diagnostic_for_asm PARAMS ((rtx, const char *, va_list, int));\n static void v_error_with_decl PARAMS ((tree, const char *, va_list));\n-static void v_error_for_asm PARAMS ((rtx, const char *, va_list));\n-static void vfatal PARAMS ((const char *, va_list)) ATTRIBUTE_NORETURN;\n-static void v_warning_with_file_and_line PARAMS ((const char *, int,\n-\t\t\t\t\t\t  const char *, va_list));\n static void v_warning_with_decl PARAMS ((tree, const char *, va_list));\n-static void v_warning_for_asm PARAMS ((rtx, const char *, va_list));\n static void v_pedwarn_with_decl PARAMS ((tree, const char *, va_list));\n-static void v_pedwarn_with_file_and_line PARAMS ((const char *, int,\n-\t\t\t\t\t\t  const char *, va_list));\n-static void vsorry PARAMS ((const char *, va_list));\n-static void verror PARAMS ((const char *, va_list));\n-static void vwarning PARAMS ((const char *, va_list));\n-static void vpedwarn PARAMS ((const char *, va_list));\n static void report_file_and_line PARAMS ((const char *, int, int));\n static void vnotice PARAMS ((FILE *, const char *, va_list));\n static void set_real_maximum_length PARAMS ((output_buffer *));\n@@ -834,27 +817,6 @@ line_wrapper_printf VPARAMS ((FILE *file, const char *msgid, ...))\n   va_end (ap);\n }\n \n-\n-static void\n-vline_wrapper_message_with_location (file, line, warn, msgid, ap)\n-     const char *file;\n-     int line;\n-     int warn;\n-     const char *msgid;\n-     va_list ap;\n-{\n-  output_buffer buffer;\n-  \n-  init_output_buffer (&buffer, context_as_prefix (file, line, warn),\n-\t\t      diagnostic_message_length_per_line);\n-  output_buffer_ptr_to_format_args (&buffer) = &ap;\n-  output_do_printf (&buffer, msgid);\n-  output_to_stream (&buffer, stderr);\n-  fputc ('\\n', stderr);\n-  output_destroy_prefix (&buffer);\n-}\n-\n-\n /* Print the message MSGID in FILE.  */\n \n static void\n@@ -903,21 +865,6 @@ report_file_and_line (file, line, warn)\n     notice (\"warning: \");\n }\n \n-/* Print a message relevant to line LINE of file FILE.  */\n-\n-static void\n-v_message_with_file_and_line (file, line, warn, msgid, ap)\n-     const char *file;\n-     int line;\n-     int warn;\n-     const char *msgid;\n-     va_list ap;\n-{\n-  report_file_and_line (file, line, warn);\n-  vnotice (stderr, msgid, ap);\n-  fputc ('\\n', stderr);\n-}\n-\n /* Print a message relevant to the given DECL.  */\n \n static void\n@@ -1040,21 +987,21 @@ file_and_line_for_asm (insn, pfile, pline)\n     }\n }\n \n-/* Report an error at line LINE of file FILE.  */\n-\n+/* Report a diagnostic MESSAGE (an errror or a WARNING) at the line number\n+   of the insn INSN.  This is used only when INSN is an `asm' with operands,\n+   and each ASM_OPERANDS records its own source file and line.  */\n static void\n-v_error_with_file_and_line (file, line, msgid, ap)\n-     const char *file;\n-     int line;\n-     const char *msgid;\n-     va_list ap;\n+diagnostic_for_asm (insn, msg, args, warn)\n+     rtx insn;\n+     const char *msg;\n+     va_list args;\n+     int warn;\n {\n-  count_error (0);\n-  report_error_function (file);\n-  if (doing_line_wrapping ())\n-    vline_wrapper_message_with_location (file, line, 0, msgid, ap);\n-  else\n-    v_message_with_file_and_line (file, line, 0, msgid, ap);\n+  const char *file;\n+  int line;\n+\n+  file_and_line_for_asm (insn, &file, &line);\n+  report_diagnostic (msg, args, file, line, warn);\n }\n \n /* Report an error at the declaration DECL.\n@@ -1072,75 +1019,6 @@ v_error_with_decl (decl, msgid, ap)\n   v_message_with_decl (decl, 0, msgid, ap);\n }\n \n-\n-/* Report an error at the line number of the insn INSN.\n-   This is used only when INSN is an `asm' with operands,\n-   and each ASM_OPERANDS records its own source file and line.  */\n-\n-static void\n-v_error_for_asm (insn, msgid, ap)\n-     rtx insn;\n-     const char *msgid;\n-     va_list ap;\n-{\n-  const char *file;\n-  int line;\n-\n-  count_error (0);\n-  file_and_line_for_asm (insn, &file, &line);\n-  report_error_function (file);\n-  v_message_with_file_and_line (file, line, 0, msgid, ap);\n-}\n-\n-\n-/* Report an error at the current line number.  */\n-\n-static void\n-verror (msgid, ap)\n-     const char *msgid;\n-     va_list ap;\n-{\n-  v_error_with_file_and_line (input_filename, lineno, msgid, ap);\n-}\n-\n-\n-/* Report a fatal error at the current line number.  Allow a front end to\n-   intercept the message.  */\n-\n-static void (*fatal_function) PARAMS ((const char *, va_list));\n-\n-static void\n-vfatal (msgid, ap)\n-     const char *msgid;\n-     va_list ap;\n-{\n-   if (fatal_function != 0)\n-     (*fatal_function) (_(msgid), ap);\n-\n-  verror (msgid, ap);\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n-/* Report a warning at line LINE of file FILE.  */\n-\n-static void\n-v_warning_with_file_and_line (file, line, msgid, ap)\n-     const char *file;\n-     int line;\n-     const char *msgid;\n-     va_list ap;\n-{\n-  if (count_error (1))\n-    {\n-      report_error_function (file);\n-      if (doing_line_wrapping ())\n-        vline_wrapper_message_with_location (file, line, 1, msgid, ap);\n-      else\n-        v_message_with_file_and_line (file, line, 1, msgid, ap);\n-    }\n-}\n-\n-\n /* Report a warning at the declaration DECL.\n    MSGID is a format string which uses %s to substitute the declaration\n    name; subsequent substitutions are a la printf.  */\n@@ -1158,54 +1036,9 @@ v_warning_with_decl (decl, msgid, ap)\n     }\n }\n \n-\n-/* Report a warning at the line number of the insn INSN.\n-   This is used only when INSN is an `asm' with operands,\n-   and each ASM_OPERANDS records its own source file and line.  */\n-\n-static void\n-v_warning_for_asm (insn, msgid, ap)\n-     rtx insn;\n-     const char *msgid;\n-     va_list ap;\n-{\n-  if (count_error (1))\n-    {\n-      const char *file;\n-      int line;\n-\n-      file_and_line_for_asm (insn, &file, &line);\n-      report_error_function (file);\n-      v_message_with_file_and_line (file, line, 1, msgid, ap);\n-    }\n-}\n-\n-\n-/* Report a warning at the current line number.  */\n-\n-static void\n-vwarning (msgid, ap)\n-     const char *msgid;\n-     va_list ap;\n-{\n-  v_warning_with_file_and_line (input_filename, lineno, msgid, ap);\n-}\n-\n /* These functions issue either warnings or errors depending on\n    -pedantic-errors.  */\n \n-static void\n-vpedwarn (msgid, ap)\n-     const char *msgid;\n-     va_list ap;\n-{\n-  if (flag_pedantic_errors)\n-    verror (msgid, ap);\n-  else\n-    vwarning (msgid, ap);\n-}\n-\n-\n static void\n v_pedwarn_with_decl (decl, msgid, ap)\n      tree decl;\n@@ -1228,38 +1061,6 @@ v_pedwarn_with_decl (decl, msgid, ap)\n     }\n }\n \n-\n-static void\n-v_pedwarn_with_file_and_line (file, line, msgid, ap)\n-     const char *file;\n-     int line;\n-     const char *msgid;\n-     va_list ap;\n-{\n-  if (flag_pedantic_errors)\n-    v_error_with_file_and_line (file, line, msgid, ap);\n-  else\n-    v_warning_with_file_and_line (file, line, msgid, ap);\n-}\n-\n-\n-/* Apologize for not implementing some feature.  */\n-\n-static void\n-vsorry (msgid, ap)\n-     const char *msgid;\n-     va_list ap;\n-{\n-  sorrycount++;\n-  if (input_filename)\n-    fprintf (stderr, \"%s:%d: \", input_filename, lineno);\n-  else\n-    fprintf (stderr, \"%s: \", progname);\n-  notice (\"sorry, not implemented: \");\n-  vnotice (stderr, msgid, ap);\n-  fputc ('\\n', stderr);\n-}\n-\n \f\n /* Count an error or warning.  Return 1 if the message should be printed.  */\n \n@@ -1344,7 +1145,7 @@ pedwarn VPARAMS ((const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  vpedwarn (msgid, ap);\n+  report_diagnostic (msgid, ap, input_filename, lineno, !flag_pedantic_errors);\n   va_end (ap);\n }\n \n@@ -1389,7 +1190,7 @@ pedwarn_with_file_and_line VPARAMS ((const char *file, int line,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  v_pedwarn_with_file_and_line (file, line, msgid, ap);\n+  report_diagnostic (msgid, ap, file, line, !flag_pedantic_errors);\n   va_end (ap);\n }\n \n@@ -1401,14 +1202,23 @@ sorry VPARAMS ((const char *msgid, ...))\n   const char *msgid;\n #endif\n   va_list ap;\n+  output_state os;\n \n+  os = diagnostic_buffer->state;\n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n   msgid = va_arg (ap, const char *);\n #endif\n-\n-  vsorry (msgid, ap);\n+  ++sorrycount;\n+  output_set_prefix\n+    (diagnostic_buffer, context_as_prefix (input_filename, lineno, 0));\n+  output_printf (diagnostic_buffer, \"sorry, not implemented: \");\n+  output_buffer_ptr_to_format_args (diagnostic_buffer) = &ap;\n+  output_buffer_text_cursor (diagnostic_buffer) = msgid;\n+  output_format (diagnostic_buffer);\n+  finish_diagnostic ();\n+  diagnostic_buffer->state = os;\n   va_end (ap);\n }\n \n@@ -1551,7 +1361,7 @@ error_with_file_and_line VPARAMS ((const char *file, int line,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  v_error_with_file_and_line (file, line, msgid, ap);\n+  report_diagnostic (msgid, ap, file, line, /* warn = */ 0);\n   va_end (ap);\n }\n \n@@ -1591,7 +1401,7 @@ error_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  v_error_for_asm (insn, msgid, ap);\n+  diagnostic_for_asm (insn, msgid, ap, /* warn = */ 0);\n   va_end (ap);\n }\n \n@@ -1609,35 +1419,45 @@ error VPARAMS ((const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  verror (msgid, ap);\n+  report_diagnostic (msgid, ap, input_filename, lineno, /* warn = */ 0);\n   va_end (ap);\n }\n \n /* Set the function to call when a fatal error occurs.  */\n \n+static void (*fatal_function) PARAMS ((const char *, va_list));\n+\n void\n set_fatal_function (f)\n      void (*f) PARAMS ((const char *, va_list));\n {\n   fatal_function = f;\n }\n \n+/* Report a fatal error at the current line number.  Allow a front end to\n+   intercept the message.  */\n void\n fatal VPARAMS ((const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   const char *msgid;\n #endif\n   va_list ap;\n+  va_list args_for_fatal_msg;\n \n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n   msgid = va_arg (ap, const char *);\n #endif\n+  va_copy (args_for_fatal_msg, ap);\n \n-  vfatal (msgid, ap);\n+  if (fatal_function != NULL)\n+    (*fatal_function) (_(msgid), args_for_fatal_msg);\n+  va_end (args_for_fatal_msg);\n+  report_diagnostic (msgid, ap, input_filename, lineno, 0);\n   va_end (ap);\n+  exit (FATAL_EXIT_CODE);\n }\n \n void\n@@ -1686,7 +1506,7 @@ warning_with_file_and_line VPARAMS ((const char *file, int line,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  v_warning_with_file_and_line (file, line, msgid, ap);\n+  report_diagnostic (msgid, ap, file, line, /* warn = */ 1);\n   va_end (ap);\n }\n \n@@ -1726,7 +1546,7 @@ warning_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  v_warning_for_asm (insn, msgid, ap);\n+  diagnostic_for_asm (insn, msgid, ap, /* warn = */ 1);\n   va_end (ap);\n }\n \n@@ -1744,7 +1564,7 @@ warning VPARAMS ((const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  vwarning (msgid, ap);\n+  report_diagnostic (msgid, ap, input_filename, lineno, /* warn = */ 1);\n   va_end (ap);\n }\n \n@@ -1753,6 +1573,7 @@ static void\n finish_diagnostic ()\n {\n   output_to_stream (diagnostic_buffer, stderr);\n+  clear_diagnostic_info (diagnostic_buffer);\n   fputc ('\\n', stderr);\n   fflush (stderr);\n }\n@@ -1765,8 +1586,9 @@ output_do_verbatim (buffer, msg, args)\n      const char *msg;\n      va_list args;\n {\n-  output_state os = buffer->state;\n+  output_state os;\n \n+  os = buffer->state;\n   output_prefix (buffer) = NULL;\n   prefixing_policy (buffer) = DIAGNOSTICS_SHOW_PREFIX_NEVER;\n   output_buffer_text_cursor (buffer) = msg;\n@@ -1827,8 +1649,9 @@ report_diagnostic (msg, args, file, line, warn)\n      int line;\n      int warn;\n {\n-  output_state os = diagnostic_buffer->state;\n+  output_state os;\n \n+  os = diagnostic_buffer->state;\n   diagnostic_msg = msg;\n   diagnostic_args = &args;\n   if (count_error (warn))"}]}