{"sha": "4e30cb71f94c2874b93f2c27a839d816e11f81e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUzMGNiNzFmOTRjMjg3NGI5M2YyYzI3YTgzOWQ4MTZlMTFmODFlNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-07-25T21:24:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-07-25T21:24:07Z"}, "message": "complex (pow(const complex<>&, int)): Enable in C++11 mode too.\n\n2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/complex (pow(const complex<>&, int)): Enable in\n\tC++11 mode too.\n\t* testsuite/26_numerics/complex/dr844.cc: Adjust.\n\t* doc/xml/manual/intro.xml: Update.\n\nFrom-SVN: r201253", "tree": {"sha": "a039de12bfd4eeff34cc614e672b47db2b9744e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a039de12bfd4eeff34cc614e672b47db2b9744e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e30cb71f94c2874b93f2c27a839d816e11f81e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e30cb71f94c2874b93f2c27a839d816e11f81e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e30cb71f94c2874b93f2c27a839d816e11f81e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e30cb71f94c2874b93f2c27a839d816e11f81e5/comments", "author": null, "committer": null, "parents": [{"sha": "41a7c2158dd2e6a2e34fe11b0c147eac4b760850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a7c2158dd2e6a2e34fe11b0c147eac4b760850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a7c2158dd2e6a2e34fe11b0c147eac4b760850"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "ac2cb45ba07dc15b21c292d1ddea84c4ea7440e9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e30cb71f94c2874b93f2c27a839d816e11f81e5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e30cb71f94c2874b93f2c27a839d816e11f81e5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4e30cb71f94c2874b93f2c27a839d816e11f81e5", "patch": "@@ -1,11 +1,18 @@\n+2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/complex (pow(const complex<>&, int)): Enable in\n+\tC++11 mode too.\n+\t* testsuite/26_numerics/complex/dr844.cc: Adjust.\n+\t* doc/xml/manual/intro.xml: Update.\n+\n 2013-07-25  Tim Shen  <timshen91@gmail.com>\n \n \tAdd documents and comments.\n \t* include/bits/regex.h: Documents and comments.\n \t* include/bits/regex_grep_matcher.h: Likewise.\n \t* include/bits/regex_grep_matcher.tcc: Likewise.\n-\t* testsuite/28_regex/iterators/regex_iterator/char/string_position_01.cc:\n-\tNew.\n+\t* testsuite/28_regex/iterators/regex_iterator/char/\n+\tstring_position_01.cc: New.\n \n 2013-07-24  Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "cb141865780f6c7570de0b43196a8e19081456e7", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e30cb71f94c2874b93f2c27a839d816e11f81e5/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e30cb71f94c2874b93f2c27a839d816e11f81e5/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=4e30cb71f94c2874b93f2c27a839d816e11f81e5", "patch": "@@ -791,12 +791,6 @@ requirements of the license of GCC.\n     <listitem><para>Add the overload.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#844\">844</link>:\n-\t<emphasis>complex pow return type is ambiguous</emphasis>\n-    </term>\n-    <listitem><para>In C++11 mode, remove the pow(complex&lt;T&gt;, int) signature.\n-    </para></listitem></varlistentry>\n-\n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#853\">853</link>:\n \t<emphasis>to_string needs updating with zero and one</emphasis>\n     </term>"}, {"sha": "58edb4f54dda7e1b91f56ab1612194cf59b72113", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e30cb71f94c2874b93f2c27a839d816e11f81e5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e30cb71f94c2874b93f2c27a839d816e11f81e5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=4e30cb71f94c2874b93f2c27a839d816e11f81e5", "patch": "@@ -88,11 +88,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp> complex<_Tp> log(const complex<_Tp>&);\n   /// Return complex base 10 logarithm of @a z.\n   template<typename _Tp> complex<_Tp> log10(const complex<_Tp>&);\n-#if __cplusplus < 201103L\n-  // DR 844.\n   /// Return @a x to the @a y'th power.\n   template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, int);\n-#endif\n   /// Return @a x to the @a y'th power.\n   template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, const _Tp&);\n   /// Return @a x to the @a y'th power.\n@@ -955,7 +952,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 26.2.8/9  pow(__x, __y): Returns the complex power base of __x\n   //                          raised to the __y-th power.  The branch\n   //                          cut is on the negative axis.\n-#if __cplusplus < 201103L\n   template<typename _Tp>\n     complex<_Tp>\n     __complex_pow_unsigned(complex<_Tp> __x, unsigned __n)\n@@ -972,8 +968,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __y;\n     }\n \n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // In C++11 mode we used to implement the resolution of\n   // DR 844. complex pow return type is ambiguous.\n+  // thus the following overload was disabled in that mode.  However, doing\n+  // that causes all sorts of issues, see, for example:\n+  //   http://gcc.gnu.org/ml/libstdc++/2013-01/msg00058.html\n+  // and also PR57974.\n   template<typename _Tp>\n     inline complex<_Tp>\n     pow(const complex<_Tp>& __z, int __n)\n@@ -982,7 +982,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t? complex<_Tp>(1) / std::__complex_pow_unsigned(__z, -(unsigned)__n)\n         : std::__complex_pow_unsigned(__z, __n);\n     }\n-#endif\n \n   template<typename _Tp>\n     complex<_Tp>"}, {"sha": "8eb72ec5f9b130947d0a9efe720c1fbc756f4006", "filename": "libstdc++-v3/testsuite/26_numerics/complex/dr844.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e30cb71f94c2874b93f2c27a839d816e11f81e5/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr844.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e30cb71f94c2874b93f2c27a839d816e11f81e5/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr844.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr844.cc?ref=4e30cb71f94c2874b93f2c27a839d816e11f81e5", "patch": "@@ -22,7 +22,11 @@\n #include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n+// In C++11 mode we used to implement the resolution of\n // DR 844. complex pow return type is ambiguous.\n+// However, doing that causes all sorts of issues, see, for example:\n+//   http://gcc.gnu.org/ml/libstdc++/2013-01/msg00058.html\n+// and also PR57974.\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n@@ -37,9 +41,7 @@ void test01()\n   const double       d1 = 1.0;\n   const long double ld1 = 1.0l;\n \n-  check_ret_type<cmplx_d_type>(std::pow(cmplx_f_type(f1, f1), i1));\n-  VERIFY( std::pow(cmplx_f_type(f1, f1), i1)\n-\t  == std::pow(cmplx_d_type(f1, f1), double(i1)) );\n+  check_ret_type<cmplx_f_type>(std::pow(cmplx_f_type(f1, f1), i1));\n   check_ret_type<cmplx_d_type>(std::pow(cmplx_d_type(d1, d1), i1));\n   check_ret_type<cmplx_ld_type>(std::pow(cmplx_ld_type(ld1, ld1), i1));\n }"}]}