{"sha": "5f5126d6cebce545eafd8754f76d27adeb13575a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1MTI2ZDZjZWJjZTU0NWVhZmQ4NzU0Zjc2ZDI3YWRlYjEzNTc1YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-05T00:06:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-05T00:06:25Z"}, "message": "tree-ssa-pre.c (get_or_alloc_expr_for_name): Avoid redundant allocation and lookup.\n\n2010-01-05  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (get_or_alloc_expr_for_name): Avoid redundant\n\tallocation and lookup.\n\t(get_or_alloc_expr_for_constant): Likewise.\n\t(phi_translate): Sink allocation.\n\nFrom-SVN: r155635", "tree": {"sha": "79d76208a630292f89ca222030df6db82375a0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79d76208a630292f89ca222030df6db82375a0a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f5126d6cebce545eafd8754f76d27adeb13575a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5126d6cebce545eafd8754f76d27adeb13575a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5126d6cebce545eafd8754f76d27adeb13575a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5126d6cebce545eafd8754f76d27adeb13575a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed945ad9f1f88786284ce27883755b0d371140f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed945ad9f1f88786284ce27883755b0d371140f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed945ad9f1f88786284ce27883755b0d371140f2"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "da9ed1af3373fa90ef12294258f0749e4e05dfbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5126d6cebce545eafd8754f76d27adeb13575a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5126d6cebce545eafd8754f76d27adeb13575a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f5126d6cebce545eafd8754f76d27adeb13575a", "patch": "@@ -1,3 +1,10 @@\n+2010-01-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (get_or_alloc_expr_for_name): Avoid redundant\n+\tallocation and lookup.\n+\t(get_or_alloc_expr_for_constant): Likewise.\n+\t(phi_translate): Sink allocation.\n+\n 2010-01-04  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (get_or_alloc_constant_value_id): Allocate"}, {"sha": "124ba3b6766a2241921eeee5007e56144a6ea84e", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5126d6cebce545eafd8754f76d27adeb13575a/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5126d6cebce545eafd8754f76d27adeb13575a/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=5f5126d6cebce545eafd8754f76d27adeb13575a", "patch": "@@ -308,20 +308,21 @@ static alloc_pool pre_expr_pool;\n static pre_expr\n get_or_alloc_expr_for_name (tree name)\n {\n-  pre_expr result = (pre_expr) pool_alloc (pre_expr_pool);\n+  struct pre_expr_d expr;\n+  pre_expr result;\n   unsigned int result_id;\n \n+  expr.kind = NAME;\n+  expr.id = 0;\n+  PRE_EXPR_NAME (&expr) = name;\n+  result_id = lookup_expression_id (&expr);\n+  if (result_id != 0)\n+    return expression_for_id (result_id);\n+\n+  result = (pre_expr) pool_alloc (pre_expr_pool);\n   result->kind = NAME;\n-  result->id = 0;\n   PRE_EXPR_NAME (result) = name;\n-  result_id = lookup_expression_id (result);\n-  if (result_id != 0)\n-    {\n-      pool_free (pre_expr_pool, result);\n-      result = expression_for_id (result_id);\n-      return result;\n-    }\n-  get_or_alloc_expression_id (result);\n+  alloc_expression_id (result);\n   return result;\n }\n \n@@ -1023,18 +1024,20 @@ get_or_alloc_expr_for_constant (tree constant)\n {\n   unsigned int result_id;\n   unsigned int value_id;\n-  pre_expr newexpr = (pre_expr) pool_alloc (pre_expr_pool);\n+  struct pre_expr_d expr;\n+  pre_expr newexpr;\n+\n+  expr.kind = CONSTANT;\n+  PRE_EXPR_CONSTANT (&expr) = constant;\n+  result_id = lookup_expression_id (&expr);\n+  if (result_id != 0)\n+    return expression_for_id (result_id);\n+\n+  newexpr = (pre_expr) pool_alloc (pre_expr_pool);\n   newexpr->kind = CONSTANT;\n   PRE_EXPR_CONSTANT (newexpr) = constant;\n-  result_id = lookup_expression_id (newexpr);\n-  if (result_id != 0)\n-    {\n-      pool_free (pre_expr_pool, newexpr);\n-      newexpr = expression_for_id (result_id);\n-      return newexpr;\n-    }\n+  alloc_expression_id (newexpr);\n   value_id = get_or_alloc_constant_value_id (constant);\n-  get_or_alloc_expression_id (newexpr);\n   add_to_value (value_id, newexpr);\n   return newexpr;\n }\n@@ -1499,6 +1502,7 @@ phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \tif (changed)\n \t  {\n \t    pre_expr constant;\n+\t    unsigned int new_val_id;\n \n \t    tree result = vn_nary_op_lookup_pieces (newnary.length,\n \t\t\t\t\t\t    newnary.opcode,\n@@ -1508,15 +1512,12 @@ phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\t\t\t\t\t    newnary.op[2],\n \t\t\t\t\t\t    newnary.op[3],\n \t\t\t\t\t\t    &nary);\n-\t    unsigned int new_val_id;\n+\t    if (result && is_gimple_min_invariant (result))\n+\t      return get_or_alloc_expr_for_constant (result);\n \n \t    expr = (pre_expr) pool_alloc (pre_expr_pool);\n \t    expr->kind = NARY;\n \t    expr->id = 0;\n-\t    if (result && is_gimple_min_invariant (result))\n-\t      return get_or_alloc_expr_for_constant (result);\n-\n-\n \t    if (nary)\n \t      {\n \t\tPRE_EXPR_NARY (expr) = nary;"}]}