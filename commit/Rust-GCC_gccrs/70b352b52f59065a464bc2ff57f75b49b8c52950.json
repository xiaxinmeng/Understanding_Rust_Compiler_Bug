{"sha": "70b352b52f59065a464bc2ff57f75b49b8c52950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBiMzUyYjUyZjU5MDY1YTQ2NGJjMmZmNTdmNzViNDliOGM1Mjk1MA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-11-15T14:00:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T14:00:09Z"}, "message": "interfac.ads: Change declarations of IEEE float types so that we no longer need a separate...\n\n2005-11-14  Robert Dewar  <dewar@adacore.com>\n\n\t* interfac.ads: Change declarations of IEEE float types so that we no\n\tlonger need a separate version of this package for VMS.\n\nFrom-SVN: r106987", "tree": {"sha": "45c557a5c80271852e09a250de095534ff9943f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45c557a5c80271852e09a250de095534ff9943f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70b352b52f59065a464bc2ff57f75b49b8c52950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b352b52f59065a464bc2ff57f75b49b8c52950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b352b52f59065a464bc2ff57f75b49b8c52950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b352b52f59065a464bc2ff57f75b49b8c52950/comments", "author": null, "committer": null, "parents": [{"sha": "ec210799885849f60e0c156ba52ee088d6b26da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec210799885849f60e0c156ba52ee088d6b26da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec210799885849f60e0c156ba52ee088d6b26da1"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "38e5cdab736e9498da255ae8b06f79beedbd5f66", "filename": "gcc/ada/interfac.ads", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b352b52f59065a464bc2ff57f75b49b8c52950/gcc%2Fada%2Finterfac.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b352b52f59065a464bc2ff57f75b49b8c52950/gcc%2Fada%2Finterfac.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finterfac.ads?ref=70b352b52f59065a464bc2ff57f75b49b8c52950", "patch": "@@ -35,11 +35,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Assumes integer sizes of 8, 16, 32 and 64 are available, and that the\n---  floating-point formats are IEEE compatible.\n-\n---  Note: There is a specialized version of this package for OpenVMS\n-\n package Interfaces is\n    pragma Pure;\n \n@@ -153,17 +148,26 @@ package Interfaces is\n    pragma Import (Intrinsic, Rotate_Left);\n    pragma Import (Intrinsic, Rotate_Right);\n \n-   --  Floating point types. We assume that we are on an IEEE machine, and\n-   --  that the types Short_Float and Long_Float in Standard refer to the\n-   --  32-bit short and 64-bit long IEEE forms. Furthermore, if there is\n-   --  an extended float, we assume that it is available as Long_Long_Float.\n+   --  IEEE Floating point types. Note that the form of these definitions\n+   --  ensures that the work on VMS, even if the standard library is compiled\n+   --  using a Float_Representation pragma for Vax_Float.\n+\n+   pragma Warnings (Off);\n+   --  Turn off warnings for targets not providing IEEE floating-point types\n+\n+   type IEEE_Float_32 is digits 6;\n+   pragma Float_Representation (IEEE_Float, IEEE_Float_32);\n+\n+   type IEEE_Float_64 is digits 15;\n+   pragma Float_Representation (IEEE_Float, IEEE_Float_64);\n+\n+   --  If there is an IEEE extended float available on the machine, we assume\n+   --  that it is available as Long_Long_Float.\n \n    --  Note: it is harmless, and explicitly permitted, to include additional\n    --  types in interfaces, so it is not wrong to have IEEE_Extended_Float\n    --  defined even if the extended format is not available.\n \n-   type IEEE_Float_32       is new Short_Float;\n-   type IEEE_Float_64       is new Long_Float;\n    type IEEE_Extended_Float is new Long_Long_Float;\n \n end Interfaces;"}]}