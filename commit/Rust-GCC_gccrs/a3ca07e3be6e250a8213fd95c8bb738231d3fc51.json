{"sha": "a3ca07e3be6e250a8213fd95c8bb738231d3fc51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNjYTA3ZTNiZTZlMjUwYTgyMTNmZDk1YzhiYjczODIzMWQzZmM1MQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-05-16T16:51:40Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-05-16T16:51:40Z"}, "message": "mmix.h (FUNCTION_VALUE, [...]): Remove macros.\n\n\t* config/mmix/mmix.h (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n\tLIBCALL_VALUE, FUNCTION_VALUE_REGNO_P): Remove macros.\n\t* config/mmix/mmix.c (TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n\t(mmix_function_outgoing_value): Rename to...\n\t(mmix_function_value): ...this. Make static. Add 'outgoing' argument.\n\t(mmix_function_value_regno_p): Make static.\n\t(mmix_libcall_value): New function.\n\t* config/mmix/mmix-protos.h (mmix_function_outgoing_value,\n\tmmix_function_value_regno_p): Remove declaration.\n\nFrom-SVN: r159458", "tree": {"sha": "2b494a0df5ef94b559741e27e693686bedd609d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b494a0df5ef94b559741e27e693686bedd609d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ca07e3be6e250a8213fd95c8bb738231d3fc51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ca07e3be6e250a8213fd95c8bb738231d3fc51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ca07e3be6e250a8213fd95c8bb738231d3fc51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ca07e3be6e250a8213fd95c8bb738231d3fc51/comments", "author": null, "committer": null, "parents": [{"sha": "29d1748506a81fedf0659c07a67905b883d6e808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d1748506a81fedf0659c07a67905b883d6e808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d1748506a81fedf0659c07a67905b883d6e808"}], "stats": {"total": 74, "additions": 47, "deletions": 27}, "files": [{"sha": "f3e83122d1d208b133d2195f30176606cba75679", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca07e3be6e250a8213fd95c8bb738231d3fc51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca07e3be6e250a8213fd95c8bb738231d3fc51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3ca07e3be6e250a8213fd95c8bb738231d3fc51", "patch": "@@ -1,3 +1,16 @@\n+2010-05-16  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/mmix/mmix.h (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n+\tLIBCALL_VALUE, FUNCTION_VALUE_REGNO_P): Remove macros.\n+\t* config/mmix/mmix.c (TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n+\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\t(mmix_function_outgoing_value): Rename to...\n+\t(mmix_function_value): ...this. Make static. Add 'outgoing' argument.\n+\t(mmix_function_value_regno_p): Make static.\n+\t(mmix_libcall_value): New function.\n+\t* config/mmix/mmix-protos.h (mmix_function_outgoing_value,\n+\tmmix_function_value_regno_p): Remove declaration.\n+\n 2010-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree.c (build_common_builtin_nodes): Always clear TREE_NOTHROW on"}, {"sha": "18d21f1650eb9282a93586d5b44520905b164dbd", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca07e3be6e250a8213fd95c8bb738231d3fc51/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca07e3be6e250a8213fd95c8bb738231d3fc51/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=a3ca07e3be6e250a8213fd95c8bb738231d3fc51", "patch": "@@ -1,5 +1,6 @@\n /* Prototypes for exported functions defined in mmix.c\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2007, 2010\n+   Free Software Foundation, Inc.\n    Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n \n This file is part of GCC.\n@@ -52,8 +53,6 @@ extern int mmix_local_regno (int);\n extern int mmix_dbx_register_number (int);\n extern int mmix_use_simple_return (void);\n extern void mmix_make_decl_one_only (tree);\n-extern rtx mmix_function_outgoing_value (const_tree, const_tree);\n-extern int mmix_function_value_regno_p (int);\n extern int mmix_data_alignment (tree, int);\n extern int mmix_constant_alignment (tree, int);\n extern int mmix_local_alignment (tree, int);"}, {"sha": "7179301432199378b90b4c6133051a9e5a01d6b2", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca07e3be6e250a8213fd95c8bb738231d3fc51/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca07e3be6e250a8213fd95c8bb738231d3fc51/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a3ca07e3be6e250a8213fd95c8bb738231d3fc51", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler, for MMIX.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+   2010\n    Free Software Foundation, Inc.\n    Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n \n@@ -138,6 +139,9 @@ static rtx mmix_struct_value_rtx (tree, int);\n static enum machine_mode mmix_promote_function_mode (const_tree,\n \t\t\t\t\t\t     enum machine_mode,\n \t                                             int *, const_tree, int);\n+static rtx mmix_function_value (const_tree, const_tree, bool);\n+static rtx mmix_libcall_value (enum machine_mode, const_rtx);\n+static bool mmix_function_value_regno_p (const unsigned int);\n static bool mmix_pass_by_reference (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, const_tree, bool);\n static bool mmix_frame_pointer_required (void);\n@@ -196,6 +200,12 @@ static void mmix_trampoline_init (rtx, tree, rtx);\n #undef TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE mmix_promote_function_mode\n \n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE mmix_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE mmix_libcall_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P mmix_function_value_regno_p\n \n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX mmix_struct_value_rtx\n@@ -654,10 +664,12 @@ mmix_function_arg_regno_p (int regno, int incoming)\n     && regno < first_arg_regnum + MMIX_MAX_ARGS_IN_REGS;\n }\n \n-/* FUNCTION_OUTGOING_VALUE.  */\n+/* Implements TARGET_FUNCTION_VALUE.  */\n \n-rtx\n-mmix_function_outgoing_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n+static rtx\n+mmix_function_value (const_tree valtype,\n+\t\t     const_tree func ATTRIBUTE_UNUSED,\n+\t\t     bool outgoing)\n {\n   enum machine_mode mode = TYPE_MODE (valtype);\n   enum machine_mode cmode;\n@@ -666,6 +678,9 @@ mmix_function_outgoing_value (const_tree valtype, const_tree func ATTRIBUTE_UNUS\n   int i;\n   int nregs;\n \n+  if (!outgoing)\n+    return gen_rtx_REG (mode, MMIX_RETURN_VALUE_REGNUM);\n+  \n   /* Return values that fit in a register need no special handling.\n      There's no register hole when parameters are passed in global\n      registers.  */\n@@ -717,10 +732,19 @@ mmix_function_outgoing_value (const_tree valtype, const_tree func ATTRIBUTE_UNUS\n   return gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nregs, vec));\n }\n \n-/* FUNCTION_VALUE_REGNO_P.  */\n+/* Implements TARGET_LIBCALL_VALUE.  */\n \n-int\n-mmix_function_value_regno_p (int regno)\n+static rtx\n+mmix_libcall_value (enum machine_mode mode,\n+\t\t    const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (mode, MMIX_RETURN_VALUE_REGNUM);\n+}\n+\n+/* Implements TARGET_FUNCTION_VALUE_REGNO_P.  */\n+\n+static bool\n+mmix_function_value_regno_p (const unsigned int regno)\n {\n   return regno == MMIX_RETURN_VALUE_REGNUM;\n }"}, {"sha": "2886443c66da7018116c3e17f69ac7bc2f054fa3", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ca07e3be6e250a8213fd95c8bb738231d3fc51/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ca07e3be6e250a8213fd95c8bb738231d3fc51/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=a3ca07e3be6e250a8213fd95c8bb738231d3fc51", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for MMIX.\n-   Copyright (C) 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009\n+   Copyright (C) 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n \n@@ -613,22 +613,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n  mmix_function_arg_regno_p (REGNO, 0)\n \n \n-/* Node: Register Arguments */\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC)  \\\n- gen_rtx_REG (TYPE_MODE (VALTYPE), MMIX_RETURN_VALUE_REGNUM)\n-\n-/* This needs to take care of the register hole for complex return values.  */\n-#define FUNCTION_OUTGOING_VALUE(VALTYPE, FUNC)  \\\n- mmix_function_outgoing_value (VALTYPE, FUNC)\n-\n-#define LIBCALL_VALUE(MODE) \\\n- gen_rtx_REG (MODE, MMIX_RETURN_VALUE_REGNUM)\n-\n-#define FUNCTION_VALUE_REGNO_P(REGNO) \\\n- mmix_function_value_regno_p (REGNO)\n-\n-\n /* Node: Caller Saves */\n /* (empty) */\n "}]}