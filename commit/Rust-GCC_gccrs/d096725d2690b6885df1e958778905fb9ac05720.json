{"sha": "d096725d2690b6885df1e958778905fb9ac05720", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5NjcyNWQyNjkwYjY4ODVkZjFlOTU4Nzc4OTA1ZmI5YWMwNTcyMA==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-05-10T20:43:36Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-05-10T20:43:36Z"}, "message": "s390.c: (s390_const_double_ok_for_constraint_p): New function.\n\n2005-05-10  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* config/s390/s390.c: (s390_const_double_ok_for_constraint_p): New\n\tfunction.\n\t(legitimate_reload_constant_p): Add check for const double zero.\n\t* config/s390/s390.md: Add comment for constraint letter 'G'.\n\t(\"*movdf_64\", \"*movdf_31\", \"movsf\"): Add constraint and proper\n\tattributes for new case.\n\t* config/s390/s390.h: (CONST_DOUBLE_OK_FOR_CONSTRAINT_P): Define it as\n\ts390_const_double_ok_for_constraint_p.\n\t* config/s390/s390-protos.h (s390_const_double_ok_for_constraint_p):\n\tAdd prototype.\n\nFrom-SVN: r99541", "tree": {"sha": "4b5e99f52cd20e36a2770b2103471f6db4dd9205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b5e99f52cd20e36a2770b2103471f6db4dd9205"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d096725d2690b6885df1e958778905fb9ac05720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d096725d2690b6885df1e958778905fb9ac05720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d096725d2690b6885df1e958778905fb9ac05720", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d096725d2690b6885df1e958778905fb9ac05720/comments", "author": null, "committer": null, "parents": [{"sha": "31117a5ce2887fe2524f6fbb8b4621c8d2046279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31117a5ce2887fe2524f6fbb8b4621c8d2046279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31117a5ce2887fe2524f6fbb8b4621c8d2046279"}], "stats": {"total": 71, "additions": 58, "deletions": 13}, "files": [{"sha": "59f058bcc63522925e7abc1c8eacc39ae1069466", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096725d2690b6885df1e958778905fb9ac05720/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096725d2690b6885df1e958778905fb9ac05720/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d096725d2690b6885df1e958778905fb9ac05720", "patch": "@@ -1,3 +1,16 @@\n+2005-05-10  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/s390/s390.c: (s390_const_double_ok_for_constraint_p): New\n+\tfunction.\n+\t(legitimate_reload_constant_p): Add check for const double zero.\n+\t* config/s390/s390.md: Add comment for constraint letter 'G'.\n+\t(\"*movdf_64\", \"*movdf_31\", \"movsf\"): Add constraint and proper\n+\tattributes for new case.\n+\t* config/s390/s390.h: (CONST_DOUBLE_OK_FOR_CONSTRAINT_P): Define it as\n+\ts390_const_double_ok_for_constraint_p.\n+\t* config/s390/s390-protos.h (s390_const_double_ok_for_constraint_p):\n+\tAdd prototype.\n+\n 2005-05-10  Kazu Hirata  <kazu@cs.umass.edu>\n \n \tPR tree-optimization/21170"}, {"sha": "3d3ca0cc3e539f415e117d68e60965bdf0167c99", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096725d2690b6885df1e958778905fb9ac05720/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096725d2690b6885df1e958778905fb9ac05720/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=d096725d2690b6885df1e958778905fb9ac05720", "patch": "@@ -33,6 +33,7 @@ extern void s390_conditional_register_usage (void);\n #ifdef RTX_CODE\n extern int s390_extra_constraint_str (rtx, int, const char *);\n extern int s390_const_ok_for_constraint_p (HOST_WIDE_INT, int, const char *);\n+extern int s390_const_double_ok_for_constraint_p (rtx, int, const char *);\n extern int s390_single_part (rtx, enum machine_mode, enum machine_mode, int);\n extern unsigned HOST_WIDE_INT s390_extract_part (rtx, enum machine_mode, int);\n extern bool s390_split_ok_p (rtx, rtx, enum machine_mode, int);"}, {"sha": "7cf56cc13a314e0c6c7c136878fc58f5a8e92fd3", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096725d2690b6885df1e958778905fb9ac05720/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096725d2690b6885df1e958778905fb9ac05720/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d096725d2690b6885df1e958778905fb9ac05720", "patch": "@@ -1679,6 +1679,27 @@ s390_extra_constraint_str (rtx op, int c, const char * str)\n \n /* Return true if VALUE matches the constraint STR.  */\n \n+int\n+s390_const_double_ok_for_constraint_p (rtx value,\n+\t\t\t\t       int c,\n+\t\t\t\t       const char * str)\n+{\n+  gcc_assert (c == str[0]);\n+\n+  switch (str[0])\n+    {\n+    case 'G':\n+      /* The floating point zero constant.  */\n+      return (GET_MODE_CLASS (GET_MODE (value)) == MODE_FLOAT\n+              && value == CONST0_RTX (GET_MODE (value)));\n+      \n+    default:\n+      return 0;\n+    }\n+}\n+\n+/* Return true if VALUE matches the constraint STR.  */\n+\n int\n s390_const_ok_for_constraint_p (HOST_WIDE_INT value,\n \t\t\t\tint c,\n@@ -2190,6 +2211,11 @@ legitimate_reload_constant_p (rtx op)\n       && larl_operand (op, VOIDmode))\n     return true;\n \n+  /* Accept lzXX operands.  */\n+  if (GET_CODE (op) == CONST_DOUBLE\n+      && CONST_DOUBLE_OK_FOR_CONSTRAINT_P (op, 'G', \"G\"))\n+    return true;\n+\n   /* Everything else cannot be handled without reload.  */\n   return false;\n }"}, {"sha": "84d035357b72d2b0af8716fc31251ae7a9dbac00", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096725d2690b6885df1e958778905fb9ac05720/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096725d2690b6885df1e958778905fb9ac05720/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=d096725d2690b6885df1e958778905fb9ac05720", "patch": "@@ -485,7 +485,8 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n #define CONST_OK_FOR_CONSTRAINT_P(VALUE, C, STR)                          \\\n   s390_const_ok_for_constraint_p ((VALUE), (C), (STR))\n \n-#define CONST_DOUBLE_OK_FOR_CONSTRAINT_P(VALUE, C, STR)  1\n+#define CONST_DOUBLE_OK_FOR_CONSTRAINT_P(VALUE, C, STR)\t\t\t\\\n+  s390_const_double_ok_for_constraint_p ((VALUE), (C), (STR))\n \n #define EXTRA_CONSTRAINT_STR(OP, C, STR)                               \t\\\n   s390_extra_constraint_str ((OP), (C), (STR))"}, {"sha": "d853f8a556cfec8f006c35b48ae20fb0d4248bfe", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d096725d2690b6885df1e958778905fb9ac05720/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d096725d2690b6885df1e958778905fb9ac05720/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=d096725d2690b6885df1e958778905fb9ac05720", "patch": "@@ -29,6 +29,7 @@\n ;;    d -- Any register from 0 to 15.\n ;;    f -- Floating point registers.\n ;;    t -- Access registers 36 and 37.\n+;;    G -- Const double zero operand\n ;;    I -- An 8-bit constant (0..255).\n ;;    J -- A 12-bit constant (0..4095).\n ;;    K -- A 16-bit constant (-32768..32767).\n@@ -1364,10 +1365,11 @@\n   \"\")\n \n (define_insn \"*movdf_64\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,R,T,d,d,m,?Q\")\n-        (match_operand:DF 1 \"general_operand\" \"f,R,T,f,f,d,m,d,?Q\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d,d,m,?Q\")\n+        (match_operand:DF 1 \"general_operand\" \"G,f,R,T,f,f,d,m,d,?Q\"))]\n   \"TARGET_64BIT\"\n   \"@\n+   lzdr\\t%0\n    ldr\\t%0,%1\n    ld\\t%0,%1\n    ldy\\t%0,%1\n@@ -1377,14 +1379,15 @@\n    lg\\t%0,%1\n    stg\\t%1,%0\n    #\"\n-  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RRE,RXY,RXY,SS\")\n-   (set_attr \"type\" \"floaddf,floaddf,floaddf,fstoredf,fstoredf,lr,load,store,*\")])\n+  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RRE,RXY,RXY,SS\")\n+   (set_attr \"type\" \"fsimpdf,floaddf,floaddf,floaddf,fstoredf,fstoredf,lr,load,store,*\")])\n \n (define_insn \"*movdf_31\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,R,T,d,Q,d,o,Q\")\n-        (match_operand:DF 1 \"general_operand\" \"f,R,T,f,f,Q,d,dKm,d,Q\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d,Q,d,o,Q\")\n+        (match_operand:DF 1 \"general_operand\" \"G,f,R,T,f,f,Q,d,dKm,d,Q\"))]\n   \"!TARGET_64BIT\"\n   \"@\n+   lzdr\\t%0\n    ldr\\t%0,%1\n    ld\\t%0,%1\n    ldy\\t%0,%1\n@@ -1395,8 +1398,8 @@\n    #\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RS,RS,*,*,SS\")\n-   (set_attr \"type\" \"floaddf,floaddf,floaddf,fstoredf,fstoredf,lm,stm,*,*,*\")])\n+  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RS,RS,*,*,SS\")\n+   (set_attr \"type\" \"fsimpdf,floaddf,floaddf,floaddf,fstoredf,fstoredf,lm,stm,*,*,*\")])\n \n (define_split\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n@@ -1457,10 +1460,11 @@\n ;\n \n (define_insn \"movsf\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f,R,T,d,d,d,R,T,?Q\")\n-        (match_operand:SF 1 \"general_operand\" \"f,R,T,f,f,d,R,T,d,d,?Q\"))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d,d,d,R,T,?Q\")\n+        (match_operand:SF 1 \"general_operand\" \"G,f,R,T,f,f,d,R,T,d,d,?Q\"))]\n   \"\"\n   \"@\n+   lzer\\t%0\n    ler\\t%0,%1\n    le\\t%0,%1\n    ley\\t%0,%1\n@@ -1472,8 +1476,8 @@\n    st\\t%1,%0\n    sty\\t%1,%0\n    #\"\n-  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RR,RX,RXY,RX,RXY,SS\")\n-   (set_attr \"type\" \"floadsf,floadsf,floadsf,fstoresf,fstoresf,\n+  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RR,RX,RXY,RX,RXY,SS\")\n+   (set_attr \"type\" \"fsimpsf,floadsf,floadsf,floadsf,fstoresf,fstoresf,\n                      lr,load,load,store,store,*\")])\n \n ;"}]}