{"sha": "9bacd7af2e3bba9ddad17e7de4e2d299419d819d", "node_id": "C_kwDOANBUbNoAKDliYWNkN2FmMmUzYmJhOWRkYWQxN2U3ZGU0ZTJkMjk5NDE5ZDgxOWQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-04T03:13:53Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-10T08:01:54Z"}, "message": "PR target/104345: Use nvptx \"set\" instruction for cond ? -1 : 0\n\nThis patch addresses the \"increased register pressure\" regression on\nnvptx-none caused by my change to transition the backend to a\nSTORE_FLAG_VALUE = 1 target.  This improved code generation for the\nmore common case of producing 0/1 Boolean values, but unfortunately\nmade things marginally worse when a 0/-1 mask value is desired.\nUnfortunately, nvptx kernels are extremely sensitive to changes in\nregister usage, which was observable in the reported PR.\n\nThis patch provides optimizations for -(cond ? 1 : 0), effectively\nsimplify this into cond ? -1 : 0, where these ternary operators are\nprovided by nvptx's selp instruction, and for the specific case of\nSImode, using (restoring) nvptx's \"set\" instruction (which avoids\nthe need for a predicate register).\n\nThis patch has been tested on nvptx-none hosted on x86_64-pc-linux-gnu\nwith a \"make\" and \"make -k check\" with no new failures.  Unfortunately,\nthe exact register usage of a nvptx kernel depends upon the version of\nthe Cuda drivers being used (and the hardware), but I believe this\nchange should resolve the PR (for Thomas) by improving code generation\nfor the cases that regressed.\n\ngcc/ChangeLog:\n\n\tPR target/104345\n\t* config/nvptx/nvptx.md (sel_true<mode>): Fix indentation.\n\t(sel_false<mode>): Likewise.\n\t(define_code_iterator eqne): New code iterator for EQ and NE.\n\t(*selp<mode>_neg_<code>): New define_insn_and_split to optimize\n\tthe negation of a selp instruction.\n\t(*selp<mode>_not_<code>): New define_insn_and_split to optimize\n\tthe bitwise not of a selp instruction.\n\t(*setcc_int<mode>): Use set instruction for neg:SI of a selp.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/104345\n\t* gcc.target/nvptx/neg-selp.c: New test case.", "tree": {"sha": "dcaa5a85b4ee43e818edd22d0b05953252b4935f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcaa5a85b4ee43e818edd22d0b05953252b4935f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bacd7af2e3bba9ddad17e7de4e2d299419d819d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bacd7af2e3bba9ddad17e7de4e2d299419d819d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bacd7af2e3bba9ddad17e7de4e2d299419d819d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bacd7af2e3bba9ddad17e7de4e2d299419d819d/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f68c3de7fc9065d8c9ac75b3736ea27abffdce45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68c3de7fc9065d8c9ac75b3736ea27abffdce45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f68c3de7fc9065d8c9ac75b3736ea27abffdce45"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "ad642e78ae333c9a237104f1c99276ccc7378c90", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bacd7af2e3bba9ddad17e7de4e2d299419d819d/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bacd7af2e3bba9ddad17e7de4e2d299419d819d/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=9bacd7af2e3bba9ddad17e7de4e2d299419d819d", "patch": "@@ -977,7 +977,7 @@\n \n (define_insn \"sel_true<mode>\"\n   [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n-        (if_then_else:HSDIM\n+\t(if_then_else:HSDIM\n \t  (ne (match_operand:BI 1 \"nvptx_register_operand\" \"R\") (const_int 0))\n \t  (match_operand:HSDIM 2 \"nvptx_nonmemory_operand\" \"Ri\")\n \t  (match_operand:HSDIM 3 \"nvptx_nonmemory_operand\" \"Ri\")))]\n@@ -986,7 +986,7 @@\n \n (define_insn \"sel_true<mode>\"\n   [(set (match_operand:SDFM 0 \"nvptx_register_operand\" \"=R\")\n-        (if_then_else:SDFM\n+\t(if_then_else:SDFM\n \t  (ne (match_operand:BI 1 \"nvptx_register_operand\" \"R\") (const_int 0))\n \t  (match_operand:SDFM 2 \"nvptx_nonmemory_operand\" \"RF\")\n \t  (match_operand:SDFM 3 \"nvptx_nonmemory_operand\" \"RF\")))]\n@@ -995,7 +995,7 @@\n \n (define_insn \"sel_false<mode>\"\n   [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n-        (if_then_else:HSDIM\n+\t(if_then_else:HSDIM\n \t  (eq (match_operand:BI 1 \"nvptx_register_operand\" \"R\") (const_int 0))\n \t  (match_operand:HSDIM 2 \"nvptx_nonmemory_operand\" \"Ri\")\n \t  (match_operand:HSDIM 3 \"nvptx_nonmemory_operand\" \"Ri\")))]\n@@ -1004,13 +1004,63 @@\n \n (define_insn \"sel_false<mode>\"\n   [(set (match_operand:SDFM 0 \"nvptx_register_operand\" \"=R\")\n-        (if_then_else:SDFM\n+\t(if_then_else:SDFM\n \t  (eq (match_operand:BI 1 \"nvptx_register_operand\" \"R\") (const_int 0))\n \t  (match_operand:SDFM 2 \"nvptx_nonmemory_operand\" \"RF\")\n \t  (match_operand:SDFM 3 \"nvptx_nonmemory_operand\" \"RF\")))]\n   \"\"\n   \"%.\\\\tselp%t0\\\\t%0, %3, %2, %1;\")\n \n+(define_code_iterator eqne [eq ne])\n+\n+;; Split negation of a predicate into a conditional move.\n+(define_insn_and_split \"*selp<mode>_neg_<code>\"\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(neg:HSDIM (eqne:HSDIM\n+\t\t     (match_operand:BI 1 \"nvptx_register_operand\" \"R\")\n+\t\t     (const_int 0))))]\n+  \"\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(if_then_else:HSDIM\n+\t  (eqne (match_dup 1) (const_int 0))\n+\t  (const_int -1)\n+\t  (const_int 0)))])\n+\n+;; Split bitwise not of a predicate into a conditional move.\n+(define_insn_and_split \"*selp<mode>_not_<code>\"\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(not:HSDIM (eqne:HSDIM\n+\t\t     (match_operand:BI 1 \"nvptx_register_operand\" \"R\")\n+\t\t     (const_int 0))))]\n+  \"\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(if_then_else:HSDIM\n+\t  (eqne (match_dup 1) (const_int 0))\n+\t  (const_int -2)\n+\t  (const_int -1)))])\n+\n+(define_insn \"*setcc_int<mode>\"\n+  [(set (match_operand:SI 0 \"nvptx_register_operand\" \"=R\")\n+\t(neg:SI\n+\t  (match_operator:SI 1 \"nvptx_comparison_operator\"\n+\t    [(match_operand:HSDIM 2 \"nvptx_register_operand\" \"R\")\n+\t     (match_operand:HSDIM 3 \"nvptx_nonmemory_operand\" \"Ri\")])))]\n+  \"\"\n+  \"%.\\\\tset%t0%c1\\\\t%0, %2, %3;\")\n+\n+(define_insn \"*setcc_int<mode>\"\n+  [(set (match_operand:SI 0 \"nvptx_register_operand\" \"=R\")\n+\t(neg:SI\n+\t  (match_operator:SI 1 \"nvptx_float_comparison_operator\"\n+\t    [(match_operand:SDFM 2 \"nvptx_register_operand\" \"R\")\n+\t     (match_operand:SDFM 3 \"nvptx_nonmemory_operand\" \"RF\")])))]\n+  \"\"\n+  \"%.\\\\tset%t0%c1\\\\t%0, %2, %3;\")\n+\n (define_insn \"setcc_float<mode>\"\n   [(set (match_operand:SF 0 \"nvptx_register_operand\" \"=R\")\n \t(match_operator:SF 1 \"nvptx_comparison_operator\""}, {"sha": "a8f0118dd5ee3b9ddb6b16da79ea8c9f50570a48", "filename": "gcc/testsuite/gcc.target/nvptx/neg-selp.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bacd7af2e3bba9ddad17e7de4e2d299419d819d/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fneg-selp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bacd7af2e3bba9ddad17e7de4e2d299419d819d/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fneg-selp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fneg-selp.c?ref=9bacd7af2e3bba9ddad17e7de4e2d299419d819d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int neg(int x, int y)\n+{\n+  int t = (x == y) ? 1 : 0;\n+  return -t;\n+}\n+\n+int not(int x, int y)\n+{\n+  int t = (x == y) ? 1 : 0;\n+  return ~t;\n+}\n+\n+/* { dg-final { scan-assembler-not \"neg.s32\" } } */\n+/* { dg-final { scan-assembler-not \"not.b32\" } } */"}]}