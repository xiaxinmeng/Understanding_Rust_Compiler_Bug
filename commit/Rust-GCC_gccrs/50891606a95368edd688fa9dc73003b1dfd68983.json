{"sha": "50891606a95368edd688fa9dc73003b1dfd68983", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA4OTE2MDZhOTUzNjhlZGQ2ODhmYTlkYzczMDAzYjFkZmQ2ODk4Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-05-03T10:29:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-05-03T10:29:55Z"}, "message": "PR 70687: Use wide_int in combine.c:change_zero_ext\n\nPR 70687 reports a case where combine.c mishandles integer modes\nwider than unsigned HOST_WIDE_INT.  I don't have a testcase since\nthe PR is just pointing out the hole.\n\nAlso, I think a ZERO_EXTEND of a vector mode could in principle satisfy\nthe subreg condition but wouldn't be equivalent to an AND.  E.g.:\n\n      (zero_extend:V4DI (subreg:V4SI (reg:V4DI R) 0))\n\nTested on x86_64-linux-gnu.\n\ngcc/\n\tPR rtl-optimization/70687\n\t* combine.c (change_zero_ext): Check for scalar modes.  Use wide_int\n\tinstead of unsigned HOST_WIDE_INT.\n\nFrom-SVN: r235811", "tree": {"sha": "6ec5e9118f563242bcd6663e613ba47f0e2d5557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ec5e9118f563242bcd6663e613ba47f0e2d5557"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50891606a95368edd688fa9dc73003b1dfd68983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50891606a95368edd688fa9dc73003b1dfd68983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50891606a95368edd688fa9dc73003b1dfd68983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50891606a95368edd688fa9dc73003b1dfd68983/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f80041efb991e4326971dea550157192f912d9a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80041efb991e4326971dea550157192f912d9a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f80041efb991e4326971dea550157192f912d9a4"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "cc520e895efa7f0c9a43e97a2bfa5da311a63e53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50891606a95368edd688fa9dc73003b1dfd68983/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50891606a95368edd688fa9dc73003b1dfd68983/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50891606a95368edd688fa9dc73003b1dfd68983", "patch": "@@ -1,3 +1,9 @@\n+2016-05-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/70687\n+\t* combine.c (change_zero_ext): Check for scalar modes.  Use wide_int\n+\tinstead of unsigned HOST_WIDE_INT.\n+\n 2016-05-03  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR rtl-optimization/44281"}, {"sha": "0ab3f97db697b723dbfcfda0537269c0367cf0b3", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50891606a95368edd688fa9dc73003b1dfd68983/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50891606a95368edd688fa9dc73003b1dfd68983/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=50891606a95368edd688fa9dc73003b1dfd68983", "patch": "@@ -11096,6 +11096,7 @@ change_zero_ext (rtx *src)\n \t\t\t\t   XEXP (x, 0), GEN_INT (start));\n \t}\n       else if (GET_CODE (x) == ZERO_EXTEND\n+\t       && SCALAR_INT_MODE_P (mode)\n \t       && GET_CODE (XEXP (x, 0)) == SUBREG\n \t       && GET_MODE (SUBREG_REG (XEXP (x, 0))) == mode\n \t       && subreg_lowpart_p (XEXP (x, 0)))\n@@ -11106,11 +11107,8 @@ change_zero_ext (rtx *src)\n       else\n \tcontinue;\n \n-      unsigned HOST_WIDE_INT mask = 1;\n-      mask <<= size;\n-      mask--;\n-\n-      x = gen_rtx_AND (mode, x, GEN_INT (mask));\n+      wide_int mask = wi::mask (size, false, GET_MODE_PRECISION (mode));\n+      x = gen_rtx_AND (mode, x, immed_wide_int_const (mask, mode));\n \n       SUBST (**iter, x);\n       changed = true;"}]}