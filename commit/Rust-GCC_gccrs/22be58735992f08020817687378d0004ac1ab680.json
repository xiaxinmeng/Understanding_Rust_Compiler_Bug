{"sha": "22be58735992f08020817687378d0004ac1ab680", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJiZTU4NzM1OTkyZjA4MDIwODE3Njg3Mzc4ZDAwMDRhYzFhYjY4MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-04-07T10:34:19Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-04-07T10:34:19Z"}, "message": "c-ada-spec.c (is_float128): New predicate extracted from...\n\nc-family/\n\t* c-ada-spec.c (is_float128): New predicate extracted from...\n\t(dump_ada_node) <COMPLEX_TYPE>: Use it to recognize __cfloat128.\n\t<REAL_TYPE>: ...here.  Call it.\nada/\n\t* libgnat/i-cexten.ads (CFloat_128): New type.\n\nFrom-SVN: r270188", "tree": {"sha": "f7685048ade4a559854dcf189e5653bf957c7bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7685048ade4a559854dcf189e5653bf957c7bcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22be58735992f08020817687378d0004ac1ab680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22be58735992f08020817687378d0004ac1ab680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22be58735992f08020817687378d0004ac1ab680", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22be58735992f08020817687378d0004ac1ab680/comments", "author": null, "committer": null, "parents": [{"sha": "db9860b1dfce8d2ee7ada8defcff94315dce21c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9860b1dfce8d2ee7ada8defcff94315dce21c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db9860b1dfce8d2ee7ada8defcff94315dce21c6"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "7e36b01e9b2ca22089c6f651ffef539c80ff96a6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22be58735992f08020817687378d0004ac1ab680/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22be58735992f08020817687378d0004ac1ab680/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=22be58735992f08020817687378d0004ac1ab680", "patch": "@@ -1,3 +1,7 @@\n+2019-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/i-cexten.ads (CFloat_128): New type.\n+\n 2019-03-22  Dmitriy Anisimkov  <anisimko@adacore.com>\n \n \tPR ada/89583"}, {"sha": "d0a07474662a0c8d92674ebef48d43cf615ebe0a", "filename": "gcc/ada/libgnat/i-cexten.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22be58735992f08020817687378d0004ac1ab680/gcc%2Fada%2Flibgnat%2Fi-cexten.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22be58735992f08020817687378d0004ac1ab680/gcc%2Fada%2Flibgnat%2Fi-cexten.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fi-cexten.ads?ref=22be58735992f08020817687378d0004ac1ab680", "patch": "@@ -74,14 +74,22 @@ package Interfaces.C.Extensions is\n    for Signed_128'Alignment use unsigned_long_long'Alignment * 2;\n \n    --  128-bit floating-point type available on x86:\n-   --  typedef long_double float_128 __attribute__ ((mode (TF)));\n+   --  typedef float float_128 __attribute__ ((mode (TF)));\n \n    type Float_128 is record\n       low, high : unsigned_long_long;\n    end record;\n    pragma Convention (C_Pass_By_Copy, Float_128);\n    for Float_128'Alignment use unsigned_long_long'Alignment * 2;\n \n+   --  128-bit complex floating-point type available on x86:\n+   --  typedef _Complex float cfloat_128 __attribute__ ((mode (TC)));\n+\n+   type CFloat_128 is record\n+      re, im : Float_128;\n+   end record;\n+   pragma Convention (C_Pass_By_Copy, CFloat_128);\n+\n    --  Types for bitfields\n \n    type Unsigned_1 is mod 2 ** 1;"}, {"sha": "c62395f2acf2c5d14d1904a289f27a64321bed68", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22be58735992f08020817687378d0004ac1ab680/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22be58735992f08020817687378d0004ac1ab680/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=22be58735992f08020817687378d0004ac1ab680", "patch": "@@ -1,3 +1,9 @@\n+2019-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (is_float128): New predicate extracted from...\n+\t(dump_ada_node) <COMPLEX_TYPE>: Use it to recognize __cfloat128.\n+\t<REAL_TYPE>: ...here.  Call it.\n+\n 2019-04-05  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/89985"}, {"sha": "2ca8bdaeaa306cfc4e291a31a2a2f1caff0e4d9d", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22be58735992f08020817687378d0004ac1ab680/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22be58735992f08020817687378d0004ac1ab680/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=22be58735992f08020817687378d0004ac1ab680", "patch": "@@ -2014,6 +2014,22 @@ dump_ada_enum_type (pretty_printer *buffer, tree node, int spc)\n     }\n }\n \n+/* Return true if NODE is the __float128/_Float128 type.  */\n+\n+static bool\n+is_float128 (tree node)\n+{\n+  if (!TYPE_NAME (node) || TREE_CODE (TYPE_NAME (node)) != TYPE_DECL)\n+    return false;\n+\n+  tree name = DECL_NAME (TYPE_NAME (node));\n+\n+  if (IDENTIFIER_POINTER (name) [0] != '_')\n+    return false;\n+\n+  return id_equal (name, \"__float128\") || id_equal (name, \"_Float128\");\n+}\n+\n static bool bitfield_used = false;\n \n /* Recursively dump in BUFFER Ada declarations corresponding to NODE of type\n@@ -2067,7 +2083,13 @@ dump_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n       break;\n \n     case COMPLEX_TYPE:\n-      pp_string (buffer, \"<complex>\");\n+      if (is_float128 (TREE_TYPE (node)))\n+\t{\n+\t  append_withs (\"Interfaces.C.Extensions\", false);\n+\t  pp_string (buffer, \"Extensions.CFloat_128\");\n+\t}\n+      else\n+\tpp_string (buffer, \"<complex>\");\n       break;\n \n     case ENUMERAL_TYPE:\n@@ -2078,11 +2100,7 @@ dump_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n       break;\n \n     case REAL_TYPE:\n-      if (TYPE_NAME (node)\n-\t  && TREE_CODE (TYPE_NAME (node)) == TYPE_DECL\n-\t  && IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (node))) [0] == '_'\n-\t  && (id_equal (DECL_NAME (TYPE_NAME (node)), \"_Float128\")\n-\t      || id_equal (DECL_NAME (TYPE_NAME (node)), \"__float128\")))\n+      if (is_float128 (node))\n \t{\n \t  append_withs (\"Interfaces.C.Extensions\", false);\n \t  pp_string (buffer, \"Extensions.Float_128\");"}]}