{"sha": "1913c8f63fba23103dff324669f581cb2248d98f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkxM2M4ZjYzZmJhMjMxMDNkZmYzMjQ2NjlmNTgxY2IyMjQ4ZDk4Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-04-25T17:45:22Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-04-25T17:45:22Z"}, "message": "re PR target/70799 (STV pass does not convert DImode shifts)\n\n\tPR target/70799\n\t* config/i386/i386.c (dimode_scalar_to_vector_candidate_p):\n\tHandle ASHIFTRT.\n\t(dimode_scalar_chain::compute_convert_gain): Ditto.\n\t(dimode_scalar_chain::make_vector_copies): Ditto.\n\t(dimode_scalar_chain::convert_reg): Ditto.\n\t(dimode_scalar_chain::convert_insn): Ditto.\n\t* config/i386/sse.md (VI24_AVX512BW_1): Remove mode iterator.\n\t(VI248_AVX512BW_1): New mode iterator.\n\t(<mask_codefor>ashr<mode>3<mask_name>): Merge insn pattern with\n\t<mask_codefor>ashrv2di3<mask_name> insn using VI248_AVX512BW_1\n\tmode iterator.\n\ntestsuite/ChangeLog:\n\n\tPR target/70799\n\t* gcc.target/i386/pr70799-5.c: New test.\n\nFrom-SVN: r247263", "tree": {"sha": "1fb47ede6b9255b5a1caa8acc2e339475776c3c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fb47ede6b9255b5a1caa8acc2e339475776c3c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1913c8f63fba23103dff324669f581cb2248d98f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1913c8f63fba23103dff324669f581cb2248d98f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1913c8f63fba23103dff324669f581cb2248d98f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1913c8f63fba23103dff324669f581cb2248d98f/comments", "author": null, "committer": null, "parents": [{"sha": "e602bbfc30cd7d40509edaba120429dc4a92cbce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e602bbfc30cd7d40509edaba120429dc4a92cbce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e602bbfc30cd7d40509edaba120429dc4a92cbce"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "729d0676f62702f06126bd14ba5b78ff4a5d7011", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1913c8f63fba23103dff324669f581cb2248d98f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1913c8f63fba23103dff324669f581cb2248d98f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1913c8f63fba23103dff324669f581cb2248d98f", "patch": "@@ -1,3 +1,18 @@\n+2017-04-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/70799\n+\t* config/i386/i386.c (dimode_scalar_to_vector_candidate_p):\n+\tHandle ASHIFTRT.\n+\t(dimode_scalar_chain::compute_convert_gain): Ditto.\n+\t(dimode_scalar_chain::make_vector_copies): Ditto.\n+\t(dimode_scalar_chain::convert_reg): Ditto.\n+\t(dimode_scalar_chain::convert_insn): Ditto.\n+\t* config/i386/sse.md (VI24_AVX512BW_1): Remove mode iterator.\n+\t(VI248_AVX512BW_1): New mode iterator.\n+\t(<mask_codefor>ashr<mode>3<mask_name>): Merge insn pattern with\n+\t<mask_codefor>ashrv2di3<mask_name> insn using VI248_AVX512BW_1\n+\tmode iterator.\n+\n 2017-04-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/80497"}, {"sha": "d9856573db7b5041acf0f4fe89b5c6265cb5e9e4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1913c8f63fba23103dff324669f581cb2248d98f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1913c8f63fba23103dff324669f581cb2248d98f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1913c8f63fba23103dff324669f581cb2248d98f", "patch": "@@ -2809,6 +2809,11 @@ dimode_scalar_to_vector_candidate_p (rtx_insn *insn)\n \n   switch (GET_CODE (src))\n     {\n+    case ASHIFTRT:\n+      if (!TARGET_AVX512VL)\n+\treturn false;\n+      /* FALLTHRU */\n+\n     case ASHIFT:\n     case LSHIFTRT:\n       if (!REG_P (XEXP (src, 1))\n@@ -3412,6 +3417,7 @@ dimode_scalar_chain::compute_convert_gain ()\n       else if (MEM_P (src) && REG_P (dst))\n \tgain += 2 * ix86_cost->int_load[2] - ix86_cost->sse_load[1];\n       else if (GET_CODE (src) == ASHIFT\n+\t       || GET_CODE (src) == ASHIFTRT\n \t       || GET_CODE (src) == LSHIFTRT)\n \t{\n     \t  if (CONST_INT_P (XEXP (src, 0)))\n@@ -3560,6 +3566,7 @@ dimode_scalar_chain::make_vector_copies (unsigned regno)\n \t      rtx src = SET_SRC (def_set);\n \n \t      if ((GET_CODE (src) == ASHIFT\n+\t\t   || GET_CODE (src) == ASHIFTRT\n \t\t   || GET_CODE (src) == LSHIFTRT)\n \t\t  && !CONST_INT_P (XEXP (src, 1))\n \t\t  && reg_or_subregno (XEXP (src, 1)) == regno)\n@@ -3648,6 +3655,7 @@ dimode_scalar_chain::make_vector_copies (unsigned regno)\n \t    rtx src = SET_SRC (def_set);\n \n \t    if ((GET_CODE (src) == ASHIFT\n+\t\t || GET_CODE (src) == ASHIFTRT\n \t\t || GET_CODE (src) == LSHIFTRT)\n \t\t&& !CONST_INT_P (XEXP (src, 1))\n \t\t&& reg_or_subregno (XEXP (src, 1)) == regno)\n@@ -3758,6 +3766,7 @@ dimode_scalar_chain::convert_reg (unsigned regno)\n \t    rtx dst = SET_DEST (def_set);\n \n \t    if ((GET_CODE (src) == ASHIFT\n+\t\t || GET_CODE (src) == ASHIFTRT\n \t\t || GET_CODE (src) == LSHIFTRT)\n \t\t&& !CONST_INT_P (XEXP (src, 1))\n \t\t&& reg_or_subregno (XEXP (src, 1)) == regno)\n@@ -3902,6 +3911,7 @@ dimode_scalar_chain::convert_insn (rtx_insn *insn)\n   switch (GET_CODE (src))\n     {\n     case ASHIFT:\n+    case ASHIFTRT:\n     case LSHIFTRT:\n       convert_op (&XEXP (src, 0), insn);\n       PUT_MODE (src, V2DImode);"}, {"sha": "e8ccb1e10c35586f88506c77f874f93df5f1616b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1913c8f63fba23103dff324669f581cb2248d98f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1913c8f63fba23103dff324669f581cb2248d98f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1913c8f63fba23103dff324669f581cb2248d98f", "patch": "@@ -413,9 +413,10 @@\n    (V4DI \"TARGET_AVX512VL\") V16SI V8DI])\n \n ;; Suppose TARGET_AVX512VL as baseline\n-(define_mode_iterator VI24_AVX512BW_1\n+(define_mode_iterator VI248_AVX512BW_1\n  [(V16HI \"TARGET_AVX512BW\") (V8HI \"TARGET_AVX512BW\")\n-  V8SI V4SI])\n+  V8SI V4SI\n+  V2DI])\n    \n (define_mode_iterator VI48_AVX512F\n   [(V16SI \"TARGET_AVX512F\") V8SI V4SI\n@@ -10617,9 +10618,9 @@\n })\n \n (define_insn \"<mask_codefor>ashr<mode>3<mask_name>\"\n-  [(set (match_operand:VI24_AVX512BW_1 0 \"register_operand\" \"=v,v\")\n-\t(ashiftrt:VI24_AVX512BW_1\n-\t  (match_operand:VI24_AVX512BW_1 1 \"nonimmediate_operand\" \"v,vm\")\n+  [(set (match_operand:VI248_AVX512BW_1 0 \"register_operand\" \"=v,v\")\n+\t(ashiftrt:VI248_AVX512BW_1\n+\t  (match_operand:VI248_AVX512BW_1 1 \"nonimmediate_operand\" \"v,vm\")\n \t  (match_operand:DI 2 \"nonmemory_operand\" \"v,N\")))]\n   \"TARGET_AVX512VL\"\n   \"vpsra<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n@@ -10649,20 +10650,6 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<mask_codefor>ashrv2di3<mask_name>\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=v,v\")\n-\t(ashiftrt:V2DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"v,vm\")\n-\t  (match_operand:DI 2 \"nonmemory_operand\" \"v,N\")))]\n-  \"TARGET_AVX512VL\"\n-  \"vpsraq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set (attr \"length_immediate\")\n-     (if_then_else (match_operand 2 \"const_int_operand\")\n-       (const_string \"1\")\n-       (const_string \"0\")))\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"ashr<mode>3<mask_name>\"\n   [(set (match_operand:VI248_AVX512BW_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(ashiftrt:VI248_AVX512BW_AVX512VL"}, {"sha": "f6dfd5e16c5c37da485b827b6dc0e0e6d2c79817", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1913c8f63fba23103dff324669f581cb2248d98f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1913c8f63fba23103dff324669f581cb2248d98f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1913c8f63fba23103dff324669f581cb2248d98f", "patch": "@@ -1,3 +1,8 @@\n+2017-04-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/70799\n+\t* gcc.target/i386/pr70799-5.c: New test.\n+\n 2017-04-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/80497\n@@ -173,7 +178,7 @@\n 2017-04-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/70799\n-\t* gcc.target/i186/pr70799-4.c: New test.\n+\t* gcc.target/i386/pr70799-4.c: New test.\n \n 2017-04-21  Janus Weil  <janus@gcc.gnu.org>\n \n@@ -279,7 +284,7 @@\n \t* gcc.dg/torture/pr80341.c: Require int32plus.\n \n 2017-04-19  Eric Botcazou  <ebotcazou@adacore.com>\n-            Jeff Law  <law@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n \n \t* gcc.c-torture/compile/20170419-1.c: New test.\n "}, {"sha": "4dc127a5502b1ab9755dd57055c49947c3158c43", "filename": "gcc/testsuite/gcc.target/i386/pr70799-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1913c8f63fba23103dff324669f581cb2248d98f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1913c8f63fba23103dff324669f581cb2248d98f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-5.c?ref=1913c8f63fba23103dff324669f581cb2248d98f", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/pr70799 */\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2 -march=slm -mavx512vl -mno-stackrealign\" } */\n+/* { dg-final { scan-assembler \"psllq\" } } */\n+/* { dg-final { scan-assembler \"psraq\" } } */\n+\n+long long a, b;\n+\n+void test1 (int c)\n+{\n+  a = b << c;\n+}\n+\n+void test2 (int c)\n+{\n+  a = b >> c;\n+}"}]}