{"sha": "6c3ae88d1e13b71665d1b27821159dcbea410267", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzYWU4OGQxZTEzYjcxNjY1ZDFiMjc4MjExNTlkY2JlYTQxMDI2Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-07T16:45:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-07T16:45:42Z"}, "message": "libstdc++: Replace some VERIFY tests with static_assert\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/18_support/comparisons/algorithms/partial_order.cc:\n\tReplace VERIFY with static_assert where the compiler now\n\tallows it.\n\t* testsuite/18_support/comparisons/algorithms/weak_order.cc:\n\tLikewise.", "tree": {"sha": "f25a7ff15aabe048eb767c5da71a8f65b99bd129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f25a7ff15aabe048eb767c5da71a8f65b99bd129"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c3ae88d1e13b71665d1b27821159dcbea410267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c3ae88d1e13b71665d1b27821159dcbea410267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c3ae88d1e13b71665d1b27821159dcbea410267", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c3ae88d1e13b71665d1b27821159dcbea410267/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4ebad20a064d10df451cfb2cea9853d339a898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e4ebad20a064d10df451cfb2cea9853d339a898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e4ebad20a064d10df451cfb2cea9853d339a898"}], "stats": {"total": 118, "additions": 61, "deletions": 57}, "files": [{"sha": "62b379a98cbed15e93a1d07c51d695c1677399f1", "filename": "libstdc++-v3/testsuite/18_support/comparisons/algorithms/partial_order.cc", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3ae88d1e13b71665d1b27821159dcbea410267/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Falgorithms%2Fpartial_order.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3ae88d1e13b71665d1b27821159dcbea410267/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Falgorithms%2Fpartial_order.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Falgorithms%2Fpartial_order.cc?ref=6c3ae88d1e13b71665d1b27821159dcbea410267", "patch": "@@ -28,11 +28,11 @@ using std::partial_ordering;\n void\n test01()\n {\n-  int one = 1, two = 2;\n+  const int one = 1, two = 2;\n \n-  VERIFY( partial_order(one, two) == partial_ordering::less );\n-  VERIFY( partial_order(one, one) == partial_ordering::equivalent );\n-  VERIFY( partial_order(two, one) == partial_ordering::greater );\n+  static_assert( partial_order(one, two) == partial_ordering::less );\n+  static_assert( partial_order(one, one) == partial_ordering::equivalent );\n+  static_assert( partial_order(two, one) == partial_ordering::greater );\n   static_assert( noexcept(partial_order(1, 1)) );\n }\n \n@@ -44,44 +44,45 @@ constexpr partial_ordering different_cv_quals(int i, const int j)\n void\n test02()\n {\n-  int fortytwo = 42, nines = 999, lots = 1000;\n-  VERIFY( different_cv_quals(fortytwo, nines) == partial_ordering::less );\n-  VERIFY( different_cv_quals(-nines, -nines) == partial_ordering::equivalent );\n-  VERIFY( different_cv_quals(-nines, -lots) == partial_ordering::greater );\n+  const int fortytwo = 42, nines = 999, lots = 1000;\n+  static_assert( different_cv_quals(fortytwo, nines) == partial_ordering::less );\n+  static_assert( different_cv_quals(-nines, -nines) == partial_ordering::equivalent );\n+  static_assert( different_cv_quals(-nines, -lots) == partial_ordering::greater );\n }\n \n void\n test03()\n {\n-  double zero = 0.0;\n-  VERIFY( partial_order(zero, zero) == partial_ordering::equivalent );\n-  VERIFY( partial_order(-zero, -zero) == partial_ordering::equivalent );\n-  VERIFY( partial_order(-zero, zero) == partial_ordering::equivalent );\n-  VERIFY( partial_order(zero, -zero) == partial_ordering::equivalent );\n+  constexpr double zero = 0.0;\n+  static_assert( partial_order(zero, zero) == partial_ordering::equivalent );\n+  static_assert( partial_order(-zero, -zero) == partial_ordering::equivalent );\n+  static_assert( partial_order(-zero, zero) == partial_ordering::equivalent );\n+  static_assert( partial_order(zero, -zero) == partial_ordering::equivalent );\n   static_assert( noexcept(partial_order(zero, 1.0)) );\n   static_assert( partial_order(0.0, 1.0) == std::partial_ordering::less );\n \n-  double min = std::numeric_limits<double>::lowest();\n-  double max = std::numeric_limits<double>::max();\n-  double nan = std::numeric_limits<double>::quiet_NaN();\n-  double inf = std::numeric_limits<double>::infinity();\n-  double denorm = std::numeric_limits<double>::denorm_min();\n-  double smallest = std::numeric_limits<double>::min();\n-  double epsilon = std::numeric_limits<double>::epsilon();\n-  VERIFY( partial_order(denorm, smallest) == partial_ordering::less );\n-  VERIFY( partial_order(denorm, 0.0) == partial_ordering::greater );\n+  constexpr double min = std::numeric_limits<double>::lowest();\n+  constexpr double max = std::numeric_limits<double>::max();\n+  constexpr double nan = std::numeric_limits<double>::quiet_NaN();\n+  constexpr double inf = std::numeric_limits<double>::infinity();\n+  constexpr double denorm = std::numeric_limits<double>::denorm_min();\n+  constexpr double smallest = std::numeric_limits<double>::min();\n+  constexpr double epsilon = std::numeric_limits<double>::epsilon();\n+  static_assert( partial_order(denorm, smallest) == partial_ordering::less );\n+  static_assert( partial_order(denorm, 0.0) == partial_ordering::greater );\n+  // FIXME: these should all use static_assert\n   VERIFY( partial_order(0.0, nan) == partial_ordering::unordered );\n   VERIFY( partial_order(nan, nan) == partial_ordering::unordered );\n   VERIFY( partial_order(nan, 0.0) == partial_ordering::unordered );\n   VERIFY( partial_order(-nan, 0.0) == partial_ordering::unordered );\n   VERIFY( partial_order(-nan, min) == partial_ordering::unordered );\n-  VERIFY( partial_order(-inf, min) == partial_ordering::less );\n+  static_assert( partial_order(-inf, min) == partial_ordering::less );\n   VERIFY( partial_order(-nan, -inf) == partial_ordering::unordered );\n   VERIFY( partial_order(-inf, -nan) == partial_ordering::unordered );\n-  VERIFY( partial_order(max, inf) == partial_ordering::less );\n-  VERIFY( partial_order(inf, max) == partial_ordering::greater );\n-  VERIFY( partial_order(inf, nan) == partial_ordering::unordered );\n-  VERIFY( partial_order(1.0, 1.0+epsilon) == partial_ordering::less );\n+  static_assert( partial_order(max, inf) == partial_ordering::less );\n+  static_assert( partial_order(inf, max) == partial_ordering::greater );\n+  static_assert( partial_order(inf, nan) == partial_ordering::unordered );\n+  static_assert( partial_order(1.0, 1.0+epsilon) == partial_ordering::less );\n }\n \n namespace N\n@@ -107,6 +108,7 @@ test04()\n   X one{1};\n   X negone{-1};\n \n+  // FIXME: these should all use static_assert\n   VERIFY( partial_order(one, X{1}) == partial_ordering::equivalent );\n   VERIFY( partial_order(negone, X{-2}) == partial_ordering::equivalent );\n   VERIFY( partial_order(one, X{2}) == partial_ordering::greater );"}, {"sha": "f417f562389f027fa82406e4fadd89481a4a0a28", "filename": "libstdc++-v3/testsuite/18_support/comparisons/algorithms/weak_order.cc", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c3ae88d1e13b71665d1b27821159dcbea410267/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Falgorithms%2Fweak_order.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c3ae88d1e13b71665d1b27821159dcbea410267/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Falgorithms%2Fweak_order.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Falgorithms%2Fweak_order.cc?ref=6c3ae88d1e13b71665d1b27821159dcbea410267", "patch": "@@ -28,11 +28,11 @@ using std::weak_ordering;\n void\n test01()\n {\n-  int one = 1, two = 2;\n+  const int one = 1, two = 2;\n \n-  VERIFY( weak_order(one, two) == weak_ordering::less );\n-  VERIFY( weak_order(one, one) == weak_ordering::equivalent );\n-  VERIFY( weak_order(two, one) == weak_ordering::greater );\n+  static_assert( weak_order(one, two) == weak_ordering::less );\n+  static_assert( weak_order(one, one) == weak_ordering::equivalent );\n+  static_assert( weak_order(two, one) == weak_ordering::greater );\n   static_assert( noexcept(weak_order(1, 1)) );\n }\n \n@@ -44,45 +44,46 @@ constexpr weak_ordering different_cv_quals(int i, const int j)\n void\n test02()\n {\n-  int fortytwo = 42, nines = 999, lots = 1000;\n+  const int fortytwo = 42, nines = 999, lots = 1000;\n \n-  VERIFY( different_cv_quals(fortytwo, nines) == weak_ordering::less );\n-  VERIFY( different_cv_quals(-nines, -nines) == weak_ordering::equivalent );\n-  VERIFY( different_cv_quals(-nines, -lots) == weak_ordering::greater );\n+  static_assert( different_cv_quals(fortytwo, nines) == weak_ordering::less );\n+  static_assert( different_cv_quals(-nines, -nines) == weak_ordering::equivalent );\n+  static_assert( different_cv_quals(-nines, -lots) == weak_ordering::greater );\n }\n \n void\n test03()\n {\n-  double zero = 0.0;\n-  VERIFY( weak_order(zero, zero) == weak_ordering::equivalent );\n-  VERIFY( weak_order(-zero, -zero) == weak_ordering::equivalent );\n-  VERIFY( weak_order(-zero, zero) == weak_ordering::equivalent );\n-  VERIFY( weak_order(zero, -zero) == weak_ordering::equivalent );\n-\n-  double min = std::numeric_limits<double>::lowest();\n-  double max = std::numeric_limits<double>::max();\n-  double nan = std::numeric_limits<double>::quiet_NaN();\n-  double inf = std::numeric_limits<double>::infinity();\n-  double denorm = std::numeric_limits<double>::denorm_min();\n-  double smallest = std::numeric_limits<double>::min();\n-  double epsilon = std::numeric_limits<double>::epsilon();\n-  VERIFY( weak_order(denorm, smallest) == weak_ordering::less );\n-  VERIFY( weak_order(denorm, 0.0) == weak_ordering::greater );\n+  constexpr double zero = 0.0;\n+  static_assert( weak_order(zero, zero) == weak_ordering::equivalent );\n+  static_assert( weak_order(-zero, -zero) == weak_ordering::equivalent );\n+  static_assert( weak_order(-zero, zero) == weak_ordering::equivalent );\n+  static_assert( weak_order(zero, -zero) == weak_ordering::equivalent );\n+\n+  constexpr double min = std::numeric_limits<double>::lowest();\n+  constexpr double max = std::numeric_limits<double>::max();\n+  constexpr double nan = std::numeric_limits<double>::quiet_NaN();\n+  constexpr double inf = std::numeric_limits<double>::infinity();\n+  constexpr double denorm = std::numeric_limits<double>::denorm_min();\n+  constexpr double smallest = std::numeric_limits<double>::min();\n+  constexpr double epsilon = std::numeric_limits<double>::epsilon();\n+  static_assert( weak_order(denorm, smallest) == weak_ordering::less );\n+  static_assert( weak_order(denorm, 0.0) == weak_ordering::greater );\n+  // FIXME: these should all use static_assert\n   VERIFY( weak_order(0.0, nan) == weak_ordering::less );\n-  VERIFY( weak_order(nan, nan) == weak_ordering::equivalent );\n-  VERIFY( weak_order(nan, -nan) == weak_ordering::greater );\n-  VERIFY( weak_order(-nan, nan) == weak_ordering::less );\n+  static_assert( weak_order(nan, nan) == weak_ordering::equivalent );\n+  static_assert( weak_order(nan, -nan) == weak_ordering::greater );\n+  static_assert( weak_order(-nan, nan) == weak_ordering::less );\n   VERIFY( weak_order(nan, 0.0) == weak_ordering::greater );\n   VERIFY( weak_order(-nan, 0.0) == weak_ordering::less );\n   VERIFY( weak_order(-nan, min) == weak_ordering::less );\n-  VERIFY( weak_order(-inf, min) == weak_ordering::less );\n+  static_assert( weak_order(-inf, min) == weak_ordering::less );\n   VERIFY( weak_order(-nan, -inf) == weak_ordering::less );\n   VERIFY( weak_order(-inf, -nan) == weak_ordering::greater );\n-  VERIFY( weak_order(max, inf) == weak_ordering::less );\n-  VERIFY( weak_order(inf, max) == weak_ordering::greater );\n+  static_assert( weak_order(max, inf) == weak_ordering::less );\n+  static_assert( weak_order(inf, max) == weak_ordering::greater );\n   VERIFY( weak_order(inf, nan) == weak_ordering::less );\n-  VERIFY( weak_order(1.0, 1.0+epsilon) == weak_ordering::less );\n+  static_assert( weak_order(1.0, 1.0+epsilon) == weak_ordering::less );\n }\n \n namespace N\n@@ -108,6 +109,7 @@ test04()\n   X one{1};\n   X negone{-1};\n \n+  // FIXME: these should all use static_assert\n   VERIFY( weak_order(one, X{1}) == weak_ordering::equivalent );\n   VERIFY( weak_order(negone, X{-2}) == weak_ordering::equivalent );\n   VERIFY( weak_order(one, X{2}) == weak_ordering::greater );"}]}