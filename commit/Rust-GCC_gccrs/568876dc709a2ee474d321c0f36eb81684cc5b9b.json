{"sha": "568876dc709a2ee474d321c0f36eb81684cc5b9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY4ODc2ZGM3MDlhMmVlNDc0ZDMyMWMwZjM2ZWI4MTY4NGNjNWI5Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-06-08T14:11:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-06-08T14:11:51Z"}, "message": "invoke.texi (max-loop-headers-insns): Document.\n\n\n\t* invoke.texi (max-loop-headers-insns): Document.\n\t* params.def (PARAM_MAX_LOOP_HEADER_INSNS): New.\n\t* tree-ssa-loop-ch.c (should_duplicate_loop_header_p): Update comment.\n\t(ch_base::copy_headers): Use PARAM_MAX_LOOP_HEADER_INSNS.\n\nFrom-SVN: r237219", "tree": {"sha": "91aebe6452474922006a1d37af8afb3dfbac16d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91aebe6452474922006a1d37af8afb3dfbac16d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/568876dc709a2ee474d321c0f36eb81684cc5b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568876dc709a2ee474d321c0f36eb81684cc5b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568876dc709a2ee474d321c0f36eb81684cc5b9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568876dc709a2ee474d321c0f36eb81684cc5b9b/comments", "author": null, "committer": null, "parents": [{"sha": "b2ae281460cad49e85ba533aef075685ed5430ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ae281460cad49e85ba533aef075685ed5430ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2ae281460cad49e85ba533aef075685ed5430ea"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "359c1d7bb43bba2dc0c0a5bfb0ad3a7ebcfa3690", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568876dc709a2ee474d321c0f36eb81684cc5b9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568876dc709a2ee474d321c0f36eb81684cc5b9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=568876dc709a2ee474d321c0f36eb81684cc5b9b", "patch": "@@ -1,3 +1,10 @@\n+2016-06-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* invoke.texi (max-loop-headers-insns): Document.\n+\t* params.def (PARAM_MAX_LOOP_HEADER_INSNS): New.\n+\t* tree-ssa-loop-ch.c (should_duplicate_loop_header_p): Update comment.\n+\t(ch_base::copy_headers): Use PARAM_MAX_LOOP_HEADER_INSNS.\n+\n 2016-06-08  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-stmts.c (vectorizable_load): Remove restrictions"}, {"sha": "2e92dcb44ca2736dae070fb4ab1ac8a65f7ddf0d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568876dc709a2ee474d321c0f36eb81684cc5b9b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568876dc709a2ee474d321c0f36eb81684cc5b9b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=568876dc709a2ee474d321c0f36eb81684cc5b9b", "patch": "@@ -9066,6 +9066,10 @@ The maximum number of insns of an unswitched loop.\n @item max-unswitch-level\n The maximum number of branches unswitched in a single loop.\n \n+@item max-loop-headers-insns\n+The maximum number of insns in loop header duplicated by he copy loop headers\n+pass.\n+\n @item lim-expensive\n The minimum cost of an expensive expression in the loop invariant motion.\n "}, {"sha": "2f552eb4abf421f8eb30ea3161cc32b5e13dbc0d", "filename": "gcc/params.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568876dc709a2ee474d321c0f36eb81684cc5b9b/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568876dc709a2ee474d321c0f36eb81684cc5b9b/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=568876dc709a2ee474d321c0f36eb81684cc5b9b", "patch": "@@ -344,6 +344,13 @@ DEFPARAM(PARAM_MAX_UNSWITCH_LEVEL,\n \t\"The maximum number of unswitchings in a single loop.\",\n \t3, 0, 0)\n \n+/* The maximum number of insns in loop header duplicated by he copy loop\n+   headers pass.  */\n+DEFPARAM(PARAM_MAX_LOOP_HEADER_INSNS,\n+\t\"max-loop-header-insns\",\n+\t\"The maximum number of insns in loop header duplicated by he copy loop headers pass.\",\n+\t20, 0, 0)\n+\n /* The maximum number of iterations of a loop the brute force algorithm\n    for analysis of # of iterations of the loop tries to evaluate.  */\n DEFPARAM(PARAM_MAX_ITERATIONS_TO_TRACK,"}, {"sha": "9a8136968de141c2e25bc41619c0138bd4a7dfa3", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568876dc709a2ee474d321c0f36eb81684cc5b9b/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568876dc709a2ee474d321c0f36eb81684cc5b9b/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=568876dc709a2ee474d321c0f36eb81684cc5b9b", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"tree-ssa-scopedtables.h\"\n #include \"tree-ssa-threadedge.h\"\n+#include \"params.h\"\n \n /* Duplicates headers of loops if they are small enough, so that the statements\n    in the loop body are always executed when the loop is entered.  This\n@@ -106,8 +107,7 @@ should_duplicate_loop_header_p (basic_block header, struct loop *loop,\n       return false;\n     }\n \n-  /* Approximately copy the conditions that used to be used in jump.c --\n-     at most 20 insns and no calls.  */\n+  /* Count number of instructions and punt on calls.  */\n   for (bsi = gsi_start_bb (header); !gsi_end_p (bsi); gsi_next (&bsi))\n     {\n       last = gsi_stmt (bsi);\n@@ -290,8 +290,8 @@ ch_base::copy_headers (function *fun)\n \n   FOR_EACH_LOOP (loop, 0)\n     {\n-      /* Copy at most 20 insns.  */\n-      int limit = 20;\n+      int initial_limit = PARAM_VALUE (PARAM_MAX_LOOP_HEADER_INSNS);\n+      int remaining_limit = initial_limit;\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\n \t\t \"Analyzing loop %i\\n\", loop->num);\n@@ -313,7 +313,7 @@ ch_base::copy_headers (function *fun)\n \n       exit = NULL;\n       n_bbs = 0;\n-      while (should_duplicate_loop_header_p (header, loop, &limit))\n+      while (should_duplicate_loop_header_p (header, loop, &remaining_limit))\n \t{\n \t  /* Find a successor of header that is inside a loop; i.e. the new\n \t     header after the condition is copied.  */\n@@ -333,7 +333,8 @@ ch_base::copy_headers (function *fun)\n \tfprintf (dump_file,\n \t\t \"Duplicating header of the loop %d up to edge %d->%d,\"\n \t\t \" %i insns.\\n\",\n-\t\t loop->num, exit->src->index, exit->dest->index, 20 - limit);\n+\t\t loop->num, exit->src->index, exit->dest->index,\n+\t\t initial_limit - remaining_limit);\n \n       /* Ensure that the header will have just the latch as a predecessor\n \t inside the loop.  */"}]}