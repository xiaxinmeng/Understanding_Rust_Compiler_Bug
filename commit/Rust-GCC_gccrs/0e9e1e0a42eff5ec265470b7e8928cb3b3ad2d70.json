{"sha": "0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU5ZTFlMGE0MmVmZjVlYzI2NTQ3MGI3ZTg5MjhjYjNiM2FkMmQ3MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-09-27T12:48:07Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-27T12:48:07Z"}, "message": "LANGUAGES: Follow spelling conventions.\n\n\t* LANGUAGES: Follow spelling conventions.\n\t* rtl.def: Likewise.\n\t* sbitmap.c: Likewise.\n\t* sched-int.h: Likewise.\n\t* sched-rgn.c: Likewise.\n\t* sibcall.c: Likewise.\n\t* simplify-rtx.c: Likewise.\n\t* ssa.c: Likewise.\n\t* stab.def: Likewise.\n\t* stmt.c: Likewise.\n\t* stor-layout.c: Likewise.\n\t* target.h: Likewise.\n\t* timevar.c: Likewise.\n\t* toplev.c: Likewise.\n\t* tree-dump.c: Likewise.\n\t* tree-inline.c: Likewise.\n\t* tree.c: Likewise.\n\t* tree.def: Likewise.\n\t* tree.h: Likewise.\n\t* unroll.c: Likewise.\n\t* varasm.c: Likewise.\n\t* vmsdbgout.c: Likewise.\n\t* treelang/treelang.texi: Likewise.\n\t* treelang/treetree.c: Likewise.\n\nFrom-SVN: r57587", "tree": {"sha": "c2f7682329bf354ca96d9ae19d6a6cfe4312c16a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2f7682329bf354ca96d9ae19d6a6cfe4312c16a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/comments", "author": null, "committer": null, "parents": [{"sha": "b9b575e6b5d26806b2d45c1d5c392fa2c2734de2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b575e6b5d26806b2d45c1d5c392fa2c2734de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b575e6b5d26806b2d45c1d5c392fa2c2734de2"}], "stats": {"total": 173, "additions": 100, "deletions": 73}, "files": [{"sha": "8029dd1fdd8267aa20399b3863eb58898d730767", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -1,3 +1,30 @@\n+2002-09-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* LANGUAGES: Follow spelling conventions.\n+\t* rtl.def: Likewise.\n+\t* sbitmap.c: Likewise.\n+\t* sched-int.h: Likewise.\n+\t* sched-rgn.c: Likewise.\n+\t* sibcall.c: Likewise.\n+\t* simplify-rtx.c: Likewise.\n+\t* ssa.c: Likewise.\n+\t* stab.def: Likewise.\n+\t* stmt.c: Likewise.\n+\t* stor-layout.c: Likewise.\n+\t* target.h: Likewise.\n+\t* timevar.c: Likewise.\n+\t* toplev.c: Likewise.\n+\t* tree-dump.c: Likewise.\n+\t* tree-inline.c: Likewise.\n+\t* tree.c: Likewise.\n+\t* tree.def: Likewise.\n+\t* tree.h: Likewise.\n+\t* unroll.c: Likewise.\n+\t* varasm.c: Likewise.\n+\t* vmsdbgout.c: Likewise.\n+\t* treelang/treelang.texi: Likewise.\n+\t* treelang/treetree.c: Likewise.\n+\n 2002-09-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (compute_saved_regs): Use a macro"}, {"sha": "d1e07198e6424941513b4dbcd530235f3679caf8", "filename": "gcc/LANGUAGES", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2FLANGUAGES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2FLANGUAGES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FLANGUAGES?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -18,7 +18,7 @@ Aug 31, 1998:\n   from the input stream, and to push them back into the input stream respectively.\n   The third argument is a pointer to a null terminate string which is the first\n   word after #pragma.  The expression supplied by HANDLE_PRAGMA should return\n-  non-zero if it parsed and implemented the pragma.  Otherwise it should return\n+  nonzero if it parsed and implemented the pragma.  Otherwise it should return\n   zero, and leave the input stream as it was before the expression was evaluated.\n \n   A new back-end definable macro has been added: INSERT_ATTRIBUTES.  This macro"}, {"sha": "0de96df4550df40e74e6efb82092ab7286dcf160", "filename": "gcc/rtl.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -864,7 +864,7 @@ DEF_RTL_EXPR(IF_THEN_ELSE, \"if_then_else\", \"eee\", '3')\n /* General conditional. The first operand is a vector composed of pairs of\n    expressions.  The first element of each pair is evaluated, in turn.\n    The value of the conditional is the second expression of the first pair\n-   whose first expression evaluates non-zero.  If none of the expressions is\n+   whose first expression evaluates nonzero.  If none of the expressions is\n    true, the second operand will be used as the value of the conditional.\n \n    This should be replaced with use of IF_THEN_ELSE.  */"}, {"sha": "74aa7cd1b4e40caa419d691fc59611095a3f85e6", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -241,7 +241,7 @@ sbitmap_difference (dst, a, b)\n }\n \n /* Set DST to be (A and B).\n-   Return non-zero if any change is made.  */\n+   Return nonzero if any change is made.  */\n \n bool\n sbitmap_a_and_b_cg (dst, a, b)\n@@ -277,7 +277,7 @@ sbitmap_a_and_b (dst, a, b)\n }\n \n /* Set DST to be (A xor B)).\n-   Return non-zero if any change is made.  */\n+   Return nonzero if any change is made.  */\n \n bool\n sbitmap_a_xor_b_cg (dst, a, b)\n@@ -313,7 +313,7 @@ sbitmap_a_xor_b (dst, a, b)\n }\n \n /* Set DST to be (A or B)).\n-   Return non-zero if any change is made.  */\n+   Return nonzero if any change is made.  */\n \n bool\n sbitmap_a_or_b_cg (dst, a, b)\n@@ -348,7 +348,7 @@ sbitmap_a_or_b (dst, a, b)\n     *dstp++ = *ap++ | *bp++;\n }\n \n-/* Return non-zero if A is a subset of B.  */\n+/* Return nonzero if A is a subset of B.  */\n \n bool\n sbitmap_a_subset_b_p (a, b)\n@@ -365,7 +365,7 @@ sbitmap_a_subset_b_p (a, b)\n }\n \n /* Set DST to be (A or (B and C)).\n-   Return non-zero if any change is made.  */\n+   Return nonzero if any change is made.  */\n \n bool\n sbitmap_a_or_b_and_c_cg (dst, a, b, c)\n@@ -403,7 +403,7 @@ sbitmap_a_or_b_and_c (dst, a, b, c)\n }\n \n /* Set DST to be (A and (B or C)).\n-   Return non-zero if any change is made.  */\n+   Return nonzero if any change is made.  */\n \n bool\n sbitmap_a_and_b_or_c_cg (dst, a, b, c)"}, {"sha": "1b196562b184f772c0db6e5dad5943b2ba883451", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -109,7 +109,7 @@ struct deps\n       int clobbers_length;\n     } *reg_last;\n \n-  /* Element N is set for each register that has any non-zero element\n+  /* Element N is set for each register that has any nonzero element\n      in reg_last[N].{uses,sets,clobbers}.  */\n   regset_head reg_last_in_use;\n };"}, {"sha": "6853a2e6a0a23f6b388b6b45cda568323e4b410b", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -3001,7 +3001,7 @@ schedule_insns (dump_file)\n      first so that we can verify that live_at_start didn't change.  Then\n      do all other blocks.  */\n   /* ??? There is an outside possibility that update_life_info, or more\n-     to the point propagate_block, could get called with non-zero flags\n+     to the point propagate_block, could get called with nonzero flags\n      more than once for one basic block.  This would be kinda bad if it\n      were to happen, since REG_INFO would be accumulated twice for the\n      block, and we'd have twice the REG_DEAD notes."}, {"sha": "90863b7142b3e778b6f2a69562d45490d59e7a85", "filename": "gcc/sibcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -54,7 +54,7 @@ static rtx skip_unreturned_value \tPARAMS ((rtx));\n /* Examine a CALL_PLACEHOLDER pattern and determine where the call's\n    return value is located.  P_HARD_RETURN receives the hard register\n    that the function used; P_SOFT_RETURN receives the pseudo register\n-   that the sequence used.  Return non-zero if the values were located.  */\n+   that the sequence used.  Return nonzero if the values were located.  */\n \n static int\n identify_call_return_value (cp, p_hard_return, p_soft_return)"}, {"sha": "c49ad634bd55faf2478056f0bd93afa5897c179b", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -903,7 +903,7 @@ simplify_binary_operation (code, mode, op0, op1)\n \t{\n \tcase PLUS:\n \t  /* Maybe simplify x + 0 to x.  The two expressions are equivalent\n-\t     when x is NaN, infinite, or finite and non-zero.  They aren't\n+\t     when x is NaN, infinite, or finite and nonzero.  They aren't\n \t     when x is -0 and the rounding mode is not towards -infinity,\n \t     since (-0) + 0 is then 0.  */\n \t  if (!HONOR_SIGNED_ZEROS (mode) && trueop1 == CONST0_RTX (mode))\n@@ -1051,7 +1051,7 @@ simplify_binary_operation (code, mode, op0, op1)\n \t    return CONST0_RTX (mode);\n \n \t  /* Change subtraction from zero into negation.  (0 - x) is the\n-\t     same as -x when x is NaN, infinite, or finite and non-zero.\n+\t     same as -x when x is NaN, infinite, or finite and nonzero.\n \t     But if the mode has signed zeros, and does not round towards\n \t     -infinity, then 0 - 0 is 0, not -0.  */\n \t  if (!HONOR_SIGNED_ZEROS (mode) && trueop0 == CONST0_RTX (mode))"}, {"sha": "b5c4992148e31a58121684e6b3ab2fa040fc018a", "filename": "gcc/ssa.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -78,7 +78,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    the same hard register in the same machine mode are in the same\n    class.  */\n \n-/* If conservative_reg_partition is non-zero, use a conservative\n+/* If conservative_reg_partition is nonzero, use a conservative\n    register partitioning algorithm (which leaves more regs after\n    emerging from SSA) instead of the coalescing one.  This is being\n    left in for a limited time only, as a debugging tool until the\n@@ -420,7 +420,7 @@ phi_alternative (set, c)\n }\n \n /* Given the SET of a phi node, remove the alternative for predecessor\n-   block C.  Return non-zero on success, or zero if no alternative is\n+   block C.  Return nonzero on success, or zero if no alternative is\n    found for C.  */\n \n int\n@@ -1496,7 +1496,7 @@ eliminate_phi (e, reg_partition)\n      and C is the ith predecessor of B,\n      then T0 and Ti must be equivalent.\n \n-   Return non-zero iff any such cases were found for which the two\n+   Return nonzero iff any such cases were found for which the two\n    regs were not already in the same class.  */\n \n static int\n@@ -2252,7 +2252,7 @@ convert_from_ssa ()\n    destination, the regno of the phi argument corresponding to BB,\n    and DATA.\n \n-   If FN ever returns non-zero, stops immediately and returns this\n+   If FN ever returns nonzero, stops immediately and returns this\n    value.  Otherwise, returns zero.  */\n \n int"}, {"sha": "e0191cabab23cadd391c7e9eb67d0644862269ac", "filename": "gcc/stab.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fstab.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fstab.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstab.def?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -84,7 +84,7 @@ __define_stab (N_BSLINE, 0x48, \"BSLINE\")\n __define_stab (N_BROWS, 0x48, \"BROWS\")\n \n /* GNU Modula-2 definition module dependency.  Value is the modification time\n-   of the definition file.  Other is non-zero if it is imported with the\n+   of the definition file.  Other is nonzero if it is imported with the\n    GNU M2 keyword %INITIALIZE.  Perhaps N_M2C can be used if there\n    are enough empty fields? */\n __define_stab(N_DEFD, 0x4a, \"DEFD\")"}, {"sha": "45ac3506b821c7e6eb6fdd5e0d42ed3983d3f716", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -2821,7 +2821,7 @@ stmt_loop_nest_empty ()\n   return (cfun->stmt == NULL || loop_stack == NULL);\n }\n \n-/* Return non-zero if we should preserve sub-expressions as separate\n+/* Return nonzero if we should preserve sub-expressions as separate\n    pseudos.  We never do so if we aren't optimizing.  We always do so\n    if -fexpensive-optimizations.\n \n@@ -3434,7 +3434,7 @@ expand_end_target_temps ()\n   pop_temp_slots ();\n }\n \n-/* Given a pointer to a BLOCK node return non-zero if (and only if) the node\n+/* Given a pointer to a BLOCK node return nonzero if (and only if) the node\n    in question represents the outermost pair of curly braces (i.e. the \"body\n    block\") of a function or method.\n \n@@ -4234,7 +4234,7 @@ expand_anon_union_decl (decl, cleanup, decl_elts)\n    This is sometimes used to avoid a cleanup associated with\n    a value that is being returned out of the scope.\n \n-   If IN_FIXUP is non-zero, we are generating this cleanup for a fixup\n+   If IN_FIXUP is nonzero, we are generating this cleanup for a fixup\n    goto and handle protection regions specially in that case.\n \n    If REACHABLE, we emit code, otherwise just inform the exception handling"}, {"sha": "67b657908eefab3cffe62bf4da419f9f5c23172f", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -48,7 +48,7 @@ tree sizetype_tab[(int) TYPE_KIND_LAST];\n    The value is measured in bits.  */\n unsigned int maximum_field_alignment;\n \n-/* If non-zero, the alignment of a bitstring or (power-)set value, in bits.\n+/* If nonzero, the alignment of a bitstring or (power-)set value, in bits.\n    May be overridden by front-ends.  */\n unsigned int set_alignment = 0;\n \n@@ -96,7 +96,7 @@ get_pending_sizes ()\n   return chain;\n }\n \n-/* Return non-zero if EXPR is present on the pending sizes list.  */\n+/* Return nonzero if EXPR is present on the pending sizes list.  */\n \n int\n is_pending_size (expr)\n@@ -807,7 +807,7 @@ place_field (rli, field)\n \t affect the alignment of a record; even a zero-sized field\n \t can do this.  The alignment should be to the alignment of\n \t the type, except that for zero-size bitfields this only\n-\t applies if there was an immediately prior, non-zero-size\n+\t applies if there was an immediately prior, nonzero-size\n \t bitfield.  (That's the way it is, experimentally.) */\n       if (! integer_zerop (DECL_SIZE (field))\n  \t  ? ! DECL_PACKED (field)"}, {"sha": "130f387c9f1af0fafd7b8664658bbc63086bcbd9", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -99,7 +99,7 @@ struct gcc_target\n     void (* eh_frame_section) PARAMS ((void));\n \n     /* Select and switch to a section for EXP.  It may be a DECL or a\n-       constant for which TREE_CST_RTL is valid.  RELOC is non-zero if\n+       constant for which TREE_CST_RTL is valid.  RELOC is nonzero if\n        runtime relocations must be applied; bit 1 will be set if the\n        runtime relocations require non-local name resolution.  ALIGN is\n        the required alignment of the data.  */"}, {"sha": "0d7fc61faf9872c2b950e199f4e02e687b50dc13", "filename": "gcc/timevar.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -114,7 +114,7 @@ static float clocks_to_msec;\n \n /* See timevar.h for an explanation of timing variables.  */\n \n-/* This macro evaluates to non-zero if timing variables are enabled.  */\n+/* This macro evaluates to nonzero if timing variables are enabled.  */\n #define TIMEVAR_ENABLE (time_report)\n \n /* A timing variable.  */"}, {"sha": "9121c212b12d74fb226a8589be2582c0b5dd3f51", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -346,8 +346,8 @@ int use_gnu_debug_info_extensions = 0;\n int optimize = 0;\n \n /* Nonzero means optimize for size.  -Os.\n-   The only valid values are zero and non-zero. When optimize_size is\n-   non-zero, optimize defaults to 2, but certain individual code\n+   The only valid values are zero and nonzero. When optimize_size is\n+   nonzero, optimize defaults to 2, but certain individual code\n    bloating optimizations are disabled.  */\n \n int optimize_size = 0;\n@@ -1893,7 +1893,7 @@ close_dump_file (index, func, insns)\n /* Do any final processing required for the declarations in VEC, of\n    which there are LEN.  We write out inline functions and variables\n    that have been deferred until this point, but which are required.\n-   Returns non-zero if anything was put out.  */\n+   Returns nonzero if anything was put out.  */\n \n int\n wrapup_global_declarations (vec, len)\n@@ -4732,7 +4732,7 @@ general_init (argv0)\n    minimal options processing.  Outputting diagnostics is OK, but GC\n    and identifier hashtables etc. are not initialized yet.\n \n-   Return non-zero to suppress compiler back end initialization.  */\n+   Return nonzero to suppress compiler back end initialization.  */\n static void\n parse_options_and_default_flags (argc, argv)\n      int argc;\n@@ -5180,7 +5180,7 @@ backend_init ()\n   expand_dummy_function_end ();\n }\n \f\n-/* Language-dependent initialization.  Returns non-zero on success.  */\n+/* Language-dependent initialization.  Returns nonzero on success.  */\n static int\n lang_dependent_init (name)\n      const char *name;"}, {"sha": "5b9f4f58ab6f87a7ad55affed3adf016ac2c5b7f", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -592,7 +592,7 @@ dequeue_and_dump (di)\n   fprintf (di->stream, \"\\n\");\n }\n \n-/* Return non-zero if FLAG has been specified for the dump, and NODE\n+/* Return nonzero if FLAG has been specified for the dump, and NODE\n    is not the root node of the dump.  */\n \n int dump_flag (di, flag, node)\n@@ -709,7 +709,7 @@ dump_begin (phase, flag_ptr)\n   return stream;\n }\n \n-/* Returns non-zero if tree dump PHASE is enabled.  */\n+/* Returns nonzero if tree dump PHASE is enabled.  */\n \n int\n dump_enabled_p (phase)\n@@ -738,7 +738,7 @@ dump_end (phase, stream)\n   fclose (stream);\n }\n \n-/* Parse ARG as a dump switch. Return non-zero if it is, and store the\n+/* Parse ARG as a dump switch. Return nonzero if it is, and store the\n    relevant details in the dump_files array.  */\n \n int"}, {"sha": "cf4754cad091014b3014839cf22882c90bb008e4", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -831,7 +831,7 @@ declare_return_variable (id, var)\n     return NULL_TREE;\n }\n \n-/* Returns non-zero if a function can be inlined as a tree.  */\n+/* Returns nonzero if a function can be inlined as a tree.  */\n \n int\n tree_inlinable_function_p (fn)\n@@ -840,7 +840,7 @@ tree_inlinable_function_p (fn)\n   return inlinable_function_p (fn, NULL);\n }\n \n-/* Returns non-zero if FN is a function that can be inlined into the\n+/* Returns nonzero if FN is a function that can be inlined into the\n    inlining context ID_.  If ID_ is NULL, check whether the function\n    can be inlined at all.  */\n "}, {"sha": "3be8579a9c3fa0a82b78a027ad0bedfc72558ca7", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -2599,7 +2599,7 @@ default_ms_bitfield_layout_p (record)\n   return false;\n }\n \n-/* Return non-zero if IDENT is a valid name for attribute ATTR,\n+/* Return nonzero if IDENT is a valid name for attribute ATTR,\n    or zero if not.\n \n    We try both `text' and `__text__', ATTR may be either one.  */"}, {"sha": "ea607fe13e72026a3372817111bd944ce19ad0b9", "filename": "gcc/tree.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -76,10 +76,10 @@ DEFTREECODE (TREE_VEC, \"tree_vec\", 'x', 2)\n    could either point to another BLOCK node or it could point to a\n    FUNCTION_DECL node (e.g. in the case of a block representing the\n    outermost scope of a particular inlining of a function).\n-   BLOCK_ABSTRACT is non-zero if the block represents an abstract\n+   BLOCK_ABSTRACT is nonzero if the block represents an abstract\n    instance of a block (i.e. one which is nested within an abstract\n    instance of an inline function). \n-   TREE_ASM_WRITTEN is non-zero if the block was actually referenced\n+   TREE_ASM_WRITTEN is nonzero if the block was actually referenced\n    in the generated assembly.  */\n DEFTREECODE (BLOCK, \"block\", 'b', 0)\n \f\n@@ -329,7 +329,7 @@ DEFTREECODE (STRING_CST, \"string_cst\", 'c', 3)\n    holds a line number.  In some cases these can be the location of\n    a reference, if no definition has been seen.\n \n-   DECL_ABSTRACT is non-zero if the decl represents an abstract instance\n+   DECL_ABSTRACT is nonzero if the decl represents an abstract instance\n    of a decl (i.e. one which is nested within an abstract instance of a\n    inline function.  */\n "}, {"sha": "ad3409849cfeafe9cc894843e8f29cab0076953d", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -53,7 +53,7 @@ enum tree_code {\n extern const char tree_code_type[];\n #define TREE_CODE_CLASS(CODE)\ttree_code_type[(int) (CODE)]\n \n-/* Returns non-zero iff CLASS is the tree-code class of an\n+/* Returns nonzero iff CLASS is the tree-code class of an\n    expression.  */\n \n #define IS_EXPR_CODE_CLASS(CLASS) \\\n@@ -1375,7 +1375,7 @@ struct tree_type GTY(())\n    as DECL_NAME.  It is an IDENTIFIER_NODE.  */\n #define DECL_ASSEMBLER_NAME(NODE) decl_assembler_name (NODE)\n \n-/* Returns non-zero if the DECL_ASSEMBLER_NAME for NODE has been set.  If zero,\n+/* Returns nonzero if the DECL_ASSEMBLER_NAME for NODE has been set.  If zero,\n    the NODE might still have a DECL_ASSEMBLER_NAME -- it just hasn't been set\n    yet.  */\n #define DECL_ASSEMBLER_NAME_SET_P(NODE) \\\n@@ -1495,7 +1495,7 @@ struct tree_type GTY(())\n    : (make_decl_rtl (NODE, NULL), (NODE)->decl.rtl))\n /* Set the DECL_RTL for NODE to RTL.  */\n #define SET_DECL_RTL(NODE, RTL) (DECL_CHECK (NODE)->decl.rtl = (RTL))\n-/* Returns non-zero if the DECL_RTL for NODE has already been set.  */\n+/* Returns nonzero if the DECL_RTL for NODE has already been set.  */\n #define DECL_RTL_SET_P(NODE)  (DECL_CHECK (NODE)->decl.rtl != NULL)\n /* Copy the RTL from NODE1 to NODE2.  If the RTL was not set for\n    NODE1, it will not be set for NODE2; this is a lazy copy.  */\n@@ -1608,7 +1608,7 @@ struct tree_type GTY(())\n /* In a FIELD_DECL, indicates this field should be bit-packed.  */\n #define DECL_PACKED(NODE) (FIELD_DECL_CHECK (NODE)->decl.regdecl_flag)\n \n-/* In a FUNCTION_DECL with a non-zero DECL_CONTEXT, indicates that a\n+/* In a FUNCTION_DECL with a nonzero DECL_CONTEXT, indicates that a\n    static chain is not needed.  */\n #define DECL_NO_STATIC_CHAIN(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->decl.regdecl_flag)\n@@ -2317,7 +2317,7 @@ extern tree strip_attrs\t\t\tPARAMS ((tree));\n \n extern int valid_machine_attribute\tPARAMS ((tree, tree, tree, tree));\n \n-/* Given a tree node and a string, return non-zero if the tree node is\n+/* Given a tree node and a string, return nonzero if the tree node is\n    a valid attribute name for the string.  */\n \n extern int is_attribute_p\t\tPARAMS ((const char *, tree));\n@@ -2516,7 +2516,7 @@ extern void put_pending_sizes\t\tPARAMS ((tree));\n /* If nonzero, an upper limit on alignment of structure fields, in bits.  */\n extern unsigned int maximum_field_alignment;\n \n-/* If non-zero, the alignment of a bitstring or (power-)set value, in bits.  */\n+/* If nonzero, the alignment of a bitstring or (power-)set value, in bits.  */\n extern unsigned int set_alignment;\n \n /* Concatenate two lists (chains of TREE_LIST nodes) X and Y"}, {"sha": "52bcb7ddd235c18400651d54fb0836d6c091165c", "filename": "gcc/treelang/treelang.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftreelang%2Ftreelang.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftreelang%2Ftreelang.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreelang.texi?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -601,7 +601,7 @@ statement: if_statement OR expression_statement OR return_statement\n if_statement: if (expression) @{ statements @} else @{ statements @}\n \n The first lot of statements is executed if the expression is\n-non-zero. Otherwise the second lot of statements is executed. Either\n+nonzero. Otherwise the second lot of statements is executed. Either\n list of statements may be empty, but both sets of braces and the else must be present. \n \n @smallexample"}, {"sha": "248d4870b313baf4a0202111279158819a77fe67", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -199,7 +199,7 @@ tree_code_if_start (tree exp, unsigned char* filename, int lineno)\n                  exp, \n                  build1 (CONVERT_EXPR, TREE_TYPE (exp), integer_zero_node));\n   emit_line_note ((const char *)filename, lineno); /* Output the line number information.  */\n-  expand_start_cond (cond_exp, /* Exit-able if non zero.  */ 0);\n+  expand_start_cond (cond_exp, /* Exit-able if nonzero.  */ 0);\n }\n \n /* Output the code for the else of an if statement.  The else occurred"}, {"sha": "c1c0059e573fc85c3a0d7edd66c639748a1da0c9", "filename": "gcc/unroll.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -170,7 +170,7 @@ enum unroll_types\n   UNROLL_NAIVE\n };\n \n-/* Indexed by register number, if non-zero, then it contains a pointer\n+/* Indexed by register number, if nonzero, then it contains a pointer\n    to a struct induction for a DEST_REG giv which has been combined with\n    one of more address givs.  This is needed because whenever such a DEST_REG\n    giv is modified, we must modify the value of all split address givs\n@@ -2482,7 +2482,7 @@ find_splittable_regs (loop, unroll_type, unroll_number)\n \t it is unsafe to split the biv since it may not have the proper\n \t value on loop exit.  */\n \n-      /* loop_number_exit_count is non-zero if the loop has an exit other than\n+      /* loop_number_exit_count is nonzero if the loop has an exit other than\n \t a fall through at the end.  */\n \n       biv_splittable = 1;\n@@ -2507,7 +2507,7 @@ find_splittable_regs (loop, unroll_type, unroll_number)\n \t    || GET_CODE (SET_SRC (tem)) != PLUS)\n \t  biv_splittable = 0;\n \n-      /* If final value is non-zero, then must emit an instruction which sets\n+      /* If final value is nonzero, then must emit an instruction which sets\n \t the value of the biv to the proper value.  This is done after\n \t handling all of the givs, since some of them may need to use the\n \t biv's value in their initialization code.  */\n@@ -2567,7 +2567,7 @@ find_splittable_regs (loop, unroll_type, unroll_number)\n       result += find_splittable_givs (loop, bl, unroll_type, increment,\n \t\t\t\t      unroll_number);\n \n-      /* If final value is non-zero, then must emit an instruction which sets\n+      /* If final value is nonzero, then must emit an instruction which sets\n \t the value of the biv to the proper value.  This is done after\n \t handling all of the givs, since some of them may need to use the\n \t biv's value in their initialization code.  */\n@@ -2696,7 +2696,7 @@ find_splittable_givs (loop, bl, unroll_type, increment, unroll_number)\n       /* Should emit insns after the loop if possible, as the biv final value\n \t code below does.  */\n \n-      /* If the final value is non-zero, and the giv has not been reduced,\n+      /* If the final value is nonzero, and the giv has not been reduced,\n \t then must emit an instruction to set the final value.  */\n       if (final_value && !v->new_reg)\n \t{"}, {"sha": "0ff605f7b13ec9c2f0b54a1b1395e4c116ab38be", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -195,7 +195,7 @@ static enum in_section { no_section, in_text, in_data, in_named\n #endif\n } in_section = no_section;\n \n-/* Return a non-zero value if DECL has a section attribute.  */\n+/* Return a nonzero value if DECL has a section attribute.  */\n #ifndef IN_NAMED_SECTION\n #define IN_NAMED_SECTION(DECL) \\\n   ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL) \\\n@@ -1138,7 +1138,7 @@ default_ctor_section_asm_out_constructor (symbol, priority)\n #endif\n \f\n /* CONSTANT_POOL_BEFORE_FUNCTION may be defined as an expression with\n-   a non-zero value if the constant pool should be output before the\n+   a nonzero value if the constant pool should be output before the\n    start of the function, or a zero value if the pool should output\n    after the end of the function.  The default is to put it before the\n    start.  */\n@@ -1945,7 +1945,7 @@ default_assemble_integer (x, size, aligned_p)\n \n /* Assemble the integer constant X into an object of SIZE bytes.  ALIGN is\n    the alignment of the integer in bits.  Return 1 if we were able to output\n-   the constant, otherwise 0.  If FORCE is non-zero, abort if we can't output\n+   the constant, otherwise 0.  If FORCE is nonzero, abort if we can't output\n    the constant.  */\n \n bool\n@@ -2228,7 +2228,7 @@ const_str_htab_hash (x)\n   return STRHASH (((const struct deferred_string *) x)->label);\n }\n \n-/* Returns non-zero if the value represented by X (which is really a\n+/* Returns nonzero if the value represented by X (which is really a\n    struct deferred_string *) is the same as that given by Y\n    (which is really a char *).  */\n \n@@ -2648,7 +2648,7 @@ copy_constant (exp)\n    Otherwise, output such a constant in memory (or defer it for later)\n    and generate an rtx for it.\n \n-   If DEFER is non-zero, the output of string constants can be deferred\n+   If DEFER is nonzero, the output of string constants can be deferred\n    and output only if referenced in the function after all optimizations.\n \n    The TREE_CST_RTL of EXP is set up to point to that rtx."}, {"sha": "81653f2916d7547780160890672a2535515c3306", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "patch": "@@ -526,7 +526,7 @@ addr_const_to_string (str, x)\n \n /* Output the debug header HEADER.  Also output COMMENT if flag_verbose_asm is\n    set.  Return the header size.  Just return the size if DOSIZEONLY is\n-   non-zero.  */\n+   nonzero.  */\n \n static int\n write_debug_header (header, comment, dosizeonly)\n@@ -558,7 +558,7 @@ write_debug_header (header, comment, dosizeonly)\n \n /* Output the address of SYMBOL.  Also output COMMENT if flag_verbose_asm is\n    set.  Return the address size.  Just return the size if DOSIZEONLY is\n-   non-zero.  */\n+   nonzero.  */\n \n static int\n write_debug_addr (symbol, comment, dosizeonly)\n@@ -579,7 +579,7 @@ write_debug_addr (symbol, comment, dosizeonly)\n \n /* Output the single byte DATA1.  Also output COMMENT if flag_verbose_asm is\n    set.  Return the data size.  Just return the size if DOSIZEONLY is\n-   non-zero.  */\n+   nonzero.  */\n \n static int\n write_debug_data1 (data1, comment, dosizeonly)\n@@ -600,7 +600,7 @@ write_debug_data1 (data1, comment, dosizeonly)\n \n /* Output the single word DATA2.  Also output COMMENT if flag_verbose_asm is\n    set.  Return the data size.  Just return the size if DOSIZEONLY is\n-   non-zero.  */\n+   nonzero.  */\n \n static int\n write_debug_data2 (data2, comment, dosizeonly)\n@@ -620,7 +620,7 @@ write_debug_data2 (data2, comment, dosizeonly)\n }\n \n /* Output double word DATA4.  Also output COMMENT if flag_verbose_asm is set.\n-   Return the data size.  Just return the size if DOSIZEONLY is non-zero.  */\n+   Return the data size.  Just return the size if DOSIZEONLY is nonzero.  */\n \n static int\n write_debug_data4 (data4, comment, dosizeonly)\n@@ -640,7 +640,7 @@ write_debug_data4 (data4, comment, dosizeonly)\n }\n \n /* Output quad word DATA8.  Also output COMMENT if flag_verbose_asm is set.\n-   Return the data size.  Just return the size if DOSIZEONLY is non-zero.  */\n+   Return the data size.  Just return the size if DOSIZEONLY is nonzero.  */\n \n static int\n write_debug_data8 (data8, comment, dosizeonly)\n@@ -661,7 +661,7 @@ write_debug_data8 (data8, comment, dosizeonly)\n \n /* Output the difference between LABEL1 and LABEL2.  Also output COMMENT if\n    flag_verbose_asm is set.  Return the data size.  Just return the size if\n-   DOSIZEONLY is non-zero.  */\n+   DOSIZEONLY is nonzero.  */\n \n static int\n write_debug_delta4 (label1, label2, comment, dosizeonly)\n@@ -683,7 +683,7 @@ write_debug_delta4 (label1, label2, comment, dosizeonly)\n \n /* Output a character string STRING.  Also write COMMENT if flag_verbose_asm is\n    set.  Return the string length.  Just return the length if DOSIZEONLY is\n-   non-zero.  */\n+   nonzero.  */\n \n static int\n write_debug_string (string, comment, dosizeonly)\n@@ -703,7 +703,7 @@ write_debug_string (string, comment, dosizeonly)\n }\n \n /* Output a module begin header and return the header size.  Just return the\n-   size if DOSIZEONLY is non-zero.  */\n+   size if DOSIZEONLY is nonzero.  */\n \n static int\n write_modbeg (dosizeonly)\n@@ -767,7 +767,7 @@ write_modbeg (dosizeonly)\n }\n \n /* Output a module end trailer and return the trailer size.   Just return\n-   the size if DOSIZEONLY is non-zero.  */\n+   the size if DOSIZEONLY is nonzero.  */\n \n static int\n write_modend (dosizeonly)\n@@ -787,7 +787,7 @@ write_modend (dosizeonly)\n }\n \n /* Output a routine begin header routine RTNNUM and return the header size.\n-   Just return the size if DOSIZEONLY is non-zero.  */\n+   Just return the size if DOSIZEONLY is nonzero.  */\n \n static int\n write_rtnbeg (rtnnum, dosizeonly)\n@@ -882,7 +882,7 @@ write_rtnbeg (rtnnum, dosizeonly)\n }\n \n /* Output a routine end trailer for routine RTNNUM and return the header size.\n-   Just return the size if DOSIZEONLY is non-zero.  */\n+   Just return the size if DOSIZEONLY is nonzero.  */\n \n static int\n write_rtnend (rtnnum, dosizeonly)\n@@ -926,7 +926,7 @@ write_rtnend (rtnnum, dosizeonly)\n   : (I) < 65536 ? DST_K_INCR_LINUM_W : DST_K_INCR_LINUM_L)\n \n /* Output the PC to line number correlations and return the size.  Just return\n-   the size if DOSIZEONLY is non-zero */\n+   the size if DOSIZEONLY is nonzero */\n \n static int\n write_pclines (dosizeonly)\n@@ -1057,7 +1057,7 @@ write_pclines (dosizeonly)\n \n /* Output a source correlation for file FILEID using information saved in\n    FILE_INFO_ENTRY and return the size.  Just return the size if DOSIZEONLY is\n-   non-zero.  */\n+   nonzero.  */\n \n static int\n write_srccorr (fileid, file_info_entry, dosizeonly)\n@@ -1252,7 +1252,7 @@ write_srccorr (fileid, file_info_entry, dosizeonly)\n }\n \n /* Output all the source correlation entries and return the size.  Just return\n-   the size if DOSIZEONLY is non-zero.  */\n+   the size if DOSIZEONLY is nonzero.  */\n \n static int\n write_srccorrs (dosizeonly)"}]}