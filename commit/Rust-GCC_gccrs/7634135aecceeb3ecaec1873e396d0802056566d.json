{"sha": "7634135aecceeb3ecaec1873e396d0802056566d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYzNDEzNWFlY2NlZWIzZWNhZWMxODczZTM5NmQwODAyMDU2NTY2ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-11-19T17:49:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-11-19T17:49:11Z"}, "message": "re PR ada/34098 (xgcc: Internal error: Segmentation fault (program gnat1))\n\n        PR ada/34098\nada/\n        * misc.c (gnat_adjust_rli): Delete.\n        (gnat_init): Do not initialize the translation code here.\n        Do not call set_lang_adjust_rli.\n        * trans.c (init_code_table): Make static.\n        (gnat_init_stmt_group): Delete.\n        (gigi): Initialize the translation code entirely here.\n        Emit debug info for the common types here instead of...\n        * utils.c (gnat_init_decl_processing): ...here.\n        * gigi.h (init_code_table): Delete.\n        (gnat_init_stmt_group): Likewise.\n\n        * stor-layout.c (lang_adjust_rli): Delete.\n        (set_lang_adjust_rli): Likewise.\n        (layout_type): Do not call lang_adjust_rli hook.\n        * tree.h (set_lang_adjust_rli): Delete.\n\nFrom-SVN: r130294", "tree": {"sha": "7bf8a6ef5dd30d212402f8afc3d2286823ccd8b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bf8a6ef5dd30d212402f8afc3d2286823ccd8b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7634135aecceeb3ecaec1873e396d0802056566d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7634135aecceeb3ecaec1873e396d0802056566d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7634135aecceeb3ecaec1873e396d0802056566d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7634135aecceeb3ecaec1873e396d0802056566d/comments", "author": null, "committer": null, "parents": [{"sha": "921d313fd5472454b07f684d59634b738216ed49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/921d313fd5472454b07f684d59634b738216ed49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/921d313fd5472454b07f684d59634b738216ed49"}], "stats": {"total": 113, "additions": 33, "deletions": 80}, "files": [{"sha": "bf19108be22ffa91a57cf64131ec1132f310ae37", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7634135aecceeb3ecaec1873e396d0802056566d", "patch": "@@ -1,3 +1,17 @@\n+2007-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/34098\n+\t* misc.c (gnat_adjust_rli): Delete.\n+\t(gnat_init): Do not initialize the translation code here.\n+\tDo not call set_lang_adjust_rli.\n+\t* trans.c (init_code_table): Make static.\n+\t(gnat_init_stmt_group): Delete.\n+\t(gigi): Initialize the translation code entirely here.\n+\tEmit debug info for the common types here instead of...\n+\t* utils.c (gnat_init_decl_processing): ...here.\n+\t* gigi.h (init_code_table): Delete.\n+\t(gnat_init_stmt_group): Likewise.\n+\n 2007-11-16  Olivier Hainque  <hainque@adacore.com>\n \n \t* utils2.c (build_call_alloc_dealloc) <if gnu_obj>: Move the code"}, {"sha": "f4acd146b51a37569df5eb6d0eb4049770958d5b", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=7634135aecceeb3ecaec1873e396d0802056566d", "patch": "@@ -271,10 +271,6 @@ extern void post_error_ne_tree_2 (const char *msg, Node_Id node, Entity_Id ent,\n /* Protect EXP from multiple evaluation.  This may make a SAVE_EXPR.  */\n extern tree protect_multiple_eval (tree exp);\n \n-/* Initialize the table that maps GNAT codes to GCC codes for simple\n-   binary and unary operations.  */\n-extern void init_code_table (void);\n-\n /* Return a label to branch to for the exception type in KIND or NULL_TREE\n    if none.  */\n extern tree get_exception_label (char);\n@@ -455,7 +451,6 @@ extern void insert_block (tree block);\n    and uses GNAT_NODE for location information.  */\n extern void gnat_pushdecl (tree decl, Node_Id gnat_node);\n \n-extern void gnat_init_stmt_group (void);\n extern void gnat_init_decl_processing (void);\n extern void init_gigi_decls (tree long_long_float_type, tree exception_type);\n extern void gnat_init_gcc_eh (void);"}, {"sha": "c54bd9f7b9066dff59b1827d65754eadaec80117", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=7634135aecceeb3ecaec1873e396d0802056566d", "patch": "@@ -101,7 +101,6 @@ static void gnat_parse_file\t\t(int);\n static rtx gnat_expand_expr\t\t(tree, rtx, enum machine_mode, int,\n \t\t\t\t\t rtx *);\n static void internal_error_function\t(const char *, va_list *);\n-static void gnat_adjust_rli\t\t(record_layout_info);\n static tree gnat_type_max_size\t\t(const_tree);\n \n /* Definitions for our language-specific hooks.  */\n@@ -433,9 +432,6 @@ internal_error_function (const char *msgid, va_list *ap)\n static bool\n gnat_init (void)\n {\n-  /* Initialize translations and the outer statement group.  */\n-  gnat_init_stmt_group ();\n-\n   /* Performs whatever initialization steps needed by the language-dependent\n      lexical analyzer.  */\n   gnat_init_decl_processing ();\n@@ -450,8 +446,6 @@ gnat_init (void)\n   /* Show that REFERENCE_TYPEs are internal and should be Pmode.  */\n   internal_reference_types ();\n \n-  set_lang_adjust_rli (gnat_adjust_rli);\n-\n   return true;\n }\n \n@@ -675,35 +669,6 @@ gnat_expand_expr (tree exp, rtx target, enum machine_mode tmode,\n   return expand_expr_real (new, target, tmode, modifier, alt_rtl);\n }\n \n-/* Adjusts the RLI used to layout a record after all the fields have been\n-   added.  We only handle the packed case and cause it to use the alignment\n-   that will pad the record at the end.  */\n-\n-static void\n-gnat_adjust_rli (record_layout_info rli ATTRIBUTE_UNUSED)\n-{\n-#if 0\n-  /* ??? This code seems to have no actual effect; record_align should already\n-     reflect the largest alignment desired by a field.  jason 2003-04-01  */\n-  unsigned int record_align = rli->unpadded_align;\n-  tree field;\n-\n-  /* If an alignment has been specified, don't use anything larger unless we\n-     have to.  */\n-  if (TYPE_ALIGN (rli->t) != 0 && TYPE_ALIGN (rli->t) < record_align)\n-    record_align = MAX (rli->record_align, TYPE_ALIGN (rli->t));\n-\n-  /* If any fields have variable size, we need to force the record to be at\n-     least as aligned as the alignment of that type.  */\n-  for (field = TYPE_FIELDS (rli->t); field; field = TREE_CHAIN (field))\n-    if (TREE_CODE (DECL_SIZE_UNIT (field)) != INTEGER_CST)\n-      record_align = MAX (record_align, DECL_ALIGN (field));\n-\n-  if (TYPE_PACKED (rli->t))\n-    rli->record_align = record_align;\n-#endif\n-}\n-\n /* Do nothing (return the tree node passed).  */\n \n static tree"}, {"sha": "df6ab75bf04929c10450ad48a24bf593c12a1143", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=7634135aecceeb3ecaec1873e396d0802056566d", "patch": "@@ -181,6 +181,7 @@ static enum tree_code gnu_codes[Number_Node_Kinds];\n /* Current node being treated, in case abort called.  */\n Node_Id error_gnat_node;\n \n+static void init_code_table (void);\n static void Compilation_Unit_to_gnu (Node_Id);\n static void record_code_position (Node_Id);\n static void insert_code_for (Node_Id);\n@@ -269,6 +270,8 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n     }\n #endif\n \n+  /* Initialize ourselves.  */\n+  init_code_table ();\n   init_gnat_to_gnu ();\n   gnat_compute_largest_alignment ();\n   init_dummy_type ();\n@@ -281,6 +284,20 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n       TYPE_SIZE_UNIT (void_type_node) = size_zero_node;\n     }\n \n+  /* Enable GNAT stack checking method if needed */\n+  if (!Stack_Check_Probes_On_Target)\n+    set_stack_check_libfunc (gen_rtx_SYMBOL_REF (Pmode, \"_gnat_stack_check\"));\n+\n+  /* Give names and make TYPE_DECLs for common types.  */\n+  create_type_decl (get_identifier (SIZE_TYPE), sizetype,\n+\t\t    NULL, false, true, Empty);\n+  create_type_decl (get_identifier (\"integer\"), integer_type_node,\n+\t\t    NULL, false, true, Empty);\n+  create_type_decl (get_identifier (\"unsigned char\"), char_type_node,\n+\t\t    NULL, false, true, Empty);\n+  create_type_decl (get_identifier (\"long integer\"), long_integer_type_node,\n+\t\t    NULL, false, true, Empty);\n+\n   /* Save the type we made for integer as the type for Standard.Integer.\n      Then make the rest of the standard types.  Note that some of these\n      may be subtypes.  */\n@@ -313,6 +330,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n     gnat_init_gcc_eh ();\n \n   gcc_assert (Nkind (gnat_root) == N_Compilation_Unit);\n+  start_stmt_group ();\n   Compilation_Unit_to_gnu (gnat_root);\n \n   /* Now see if we have any elaboration procedures to deal with. */\n@@ -361,20 +379,6 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n   error_gnat_node = Empty;\n }\n \f\n-/* Perform initializations for this module.  */\n-\n-void\n-gnat_init_stmt_group (void)\n-{\n-  /* Initialize ourselves.  */\n-  init_code_table ();\n-  start_stmt_group ();\n-\n-  /* Enable GNAT stack checking method if needed */\n-  if (!Stack_Check_Probes_On_Target)\n-    set_stack_check_libfunc (gen_rtx_SYMBOL_REF (Pmode, \"_gnat_stack_check\"));\n-}\n-\f\n /* Returns a positive value if GNAT_NODE requires an lvalue for an\n    operand of OPERAND_TYPE, whose aliasing is specified by ALIASED,\n    zero otherwise.  This is int instead of bool to facilitate usage\n@@ -6763,7 +6767,7 @@ post_error_ne_tree_2 (const char *msg,\n /* Initialize the table that maps GNAT codes to GCC codes for simple\n    binary and unary operations.  */\n \n-void\n+static void\n init_code_table (void)\n {\n   gnu_codes[N_And_Then] = TRUTH_ANDIF_EXPR;"}, {"sha": "9fed4a9cb5eaa335bdaf981898f6278408851abd", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=7634135aecceeb3ecaec1873e396d0802056566d", "patch": "@@ -495,16 +495,6 @@ gnat_init_decl_processing (void)\n   set_sizetype (size_type_node);\n   build_common_tree_nodes_2 (0);\n \n-  /* Give names and make TYPE_DECLs for common types.  */\n-  create_type_decl (get_identifier (SIZE_TYPE), sizetype,\n-\t\t    NULL, false, true, Empty);\n-  create_type_decl (get_identifier (\"integer\"), integer_type_node,\n-\t\t    NULL, false, true, Empty);\n-  create_type_decl (get_identifier (\"unsigned char\"), char_type_node,\n-\t\t    NULL, false, true, Empty);\n-  create_type_decl (get_identifier (\"long integer\"), long_integer_type_node,\n-\t\t    NULL, false, true, Empty);\n-\n   ptr_void_type_node = build_pointer_type (void_type_node);\n \n   gnat_install_builtins ();"}, {"sha": "1ae2db5ca002730d3f12c0bd64d8aba5fc65f974", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=7634135aecceeb3ecaec1873e396d0802056566d", "patch": "@@ -496,17 +496,6 @@ relayout_decl (tree decl)\n   layout_decl (decl, 0);\n }\n \f\n-/* Hook for a front-end function that can modify the record layout as needed\n-   immediately before it is finalized.  */\n-\n-static void (*lang_adjust_rli) (record_layout_info) = 0;\n-\n-void\n-set_lang_adjust_rli (void (*f) (record_layout_info))\n-{\n-  lang_adjust_rli = f;\n-}\n-\n /* Begin laying out type T, which may be a RECORD_TYPE, UNION_TYPE, or\n    QUAL_UNION_TYPE.  Return a pointer to a struct record_layout_info which\n    is to be passed to all other layout functions for this record.  It is the\n@@ -1866,9 +1855,6 @@ layout_type (tree type)\n \tif (TREE_CODE (type) == QUAL_UNION_TYPE)\n \t  TYPE_FIELDS (type) = nreverse (TYPE_FIELDS (type));\n \n-\tif (lang_adjust_rli)\n-\t  (*lang_adjust_rli) (rli);\n-\n \t/* Finish laying out the record.  */\n \tfinish_record_layout (rli, /*free_p=*/true);\n       }"}, {"sha": "75702ec060668a4bd7a7a1559cb2c3e53fe85dff", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7634135aecceeb3ecaec1873e396d0802056566d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7634135aecceeb3ecaec1873e396d0802056566d", "patch": "@@ -4274,7 +4274,6 @@ typedef struct record_layout_info_s\n   int packed_maybe_necessary;\n } *record_layout_info;\n \n-extern void set_lang_adjust_rli (void (*) (record_layout_info));\n extern record_layout_info start_record_layout (tree);\n extern tree bit_from_pos (tree, tree);\n extern tree byte_from_pos (tree, tree);"}]}