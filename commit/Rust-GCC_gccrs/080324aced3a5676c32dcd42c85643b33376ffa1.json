{"sha": "080324aced3a5676c32dcd42c85643b33376ffa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgwMzI0YWNlZDNhNTY3NmMzMmRjZDQyYzg1NjQzYjMzMzc2ZmZhMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-09T18:01:47Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-09T18:01:47Z"}, "message": "re PR target/52530 (Many 64-bit execution failures on Solaris 10/11 with Sun as)\n\n\tPR target/52530\n\t* config/i386/i386.c (ix86_print_operand): Handle 'E' operand modifier.\n\t(ix86_print_operand_address): Handle UNSPEC_LEA_ADDR. Do not fallback\n\tto set code to 'q'.\n\t* config/i386/i386.md (UNSPEC_LEA_ADDR): New unspec.\n\t(*movdi_internal_rex64): Use %E operand modifier for lea.\n\t(*movsi_internal): Ditto.\n\t(*lea_1): Ditto.\n\t(*lea<mode>_2): Ditto.\n\t(*lea_{3,4,5,6}_zext): Ditto.\n\t(*tls_global_dynamic_32_gnu): Ditto.\n\t(*tls_global_dynamic_64): Ditto.\n\t(*tls_dynamic_gnu2_lea_32): Ditto.\n\t(*tls_dynamic_gnu2_lea_64): Ditto.\n\t(pro_epilogue_adjust_stack_<mode>_add): Ditto.\n\nFrom-SVN: r185148", "tree": {"sha": "cdf90d1d9ec8667797388882f2eb1c700f15e0cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdf90d1d9ec8667797388882f2eb1c700f15e0cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/080324aced3a5676c32dcd42c85643b33376ffa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080324aced3a5676c32dcd42c85643b33376ffa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/080324aced3a5676c32dcd42c85643b33376ffa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080324aced3a5676c32dcd42c85643b33376ffa1/comments", "author": null, "committer": null, "parents": [{"sha": "45cfa18d29bc5a59845d7254eec5458c8272530f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45cfa18d29bc5a59845d7254eec5458c8272530f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45cfa18d29bc5a59845d7254eec5458c8272530f"}], "stats": {"total": 89, "additions": 61, "deletions": 28}, "files": [{"sha": "5020eddc11104e4432047f9c523b9cd06bdbc7c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080324aced3a5676c32dcd42c85643b33376ffa1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080324aced3a5676c32dcd42c85643b33376ffa1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=080324aced3a5676c32dcd42c85643b33376ffa1", "patch": "@@ -1,3 +1,21 @@\n+2012-03-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/52530\n+\t* config/i386/i386.c (ix86_print_operand): Handle 'E' operand modifier.\n+\t(ix86_print_operand_address): Handle UNSPEC_LEA_ADDR. Do not fallback\n+\tto set code to 'q'.\n+\t* config/i386/i386.md (UNSPEC_LEA_ADDR): New unspec.\n+\t(*movdi_internal_rex64): Use %E operand modifier for lea.\n+\t(*movsi_internal): Ditto.\n+\t(*lea_1): Ditto.\n+\t(*lea<mode>_2): Ditto.\n+\t(*lea_{3,4,5,6}_zext): Ditto.\n+\t(*tls_global_dynamic_32_gnu): Ditto.\n+\t(*tls_global_dynamic_64): Ditto.\n+\t(*tls_dynamic_gnu2_lea_32): Ditto.\n+\t(*tls_dynamic_gnu2_lea_64): Ditto.\n+\t(pro_epilogue_adjust_stack_<mode>_add): Ditto.\n+\n 2012-03-09  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/linux64.h (OPTION_TARGET_CPU_DEFAULT): Do not\n@@ -64,8 +82,7 @@\n 2012-03-08  Jie Zhang  <jzhang918@gmail.com>\n \n \tPR target/49862\n-\t* config/bfin/bfin.c (hwloop_optimize): Fix unused variable\n-\twarnings.\n+\t* config/bfin/bfin.c (hwloop_optimize): Fix unused variable warnings.\n \t(hwloop_pattern_reg): Fix set but not used warning.\n \t(bfin_reorg_loops): Remove unused parameter.\n \t(bfin_reorg): Update use of bfin_reorg_loops.\n@@ -76,8 +93,7 @@\n \twith integer parameters in registers.\n \t(gen_push): Push register in word_mode instead of Pmode.\n \t(ix86_emit_save_regs): Likewise.\n-\t(ix86_emit_save_regs_using_mov): Save integer registers in\n-\tword_mode.\n+\t(ix86_emit_save_regs_using_mov): Save integer registers in word_mode.\n \t(gen_pop): Pop register in word_mode instead of Pmode.\n \t(ix86_emit_restore_regs_using_pop): Likewise.\n \t(ix86_expand_prologue): Replace Pmode with word_mode for push"}, {"sha": "567a41de70afee7ac182b4af634786e18a8920ca", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080324aced3a5676c32dcd42c85643b33376ffa1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080324aced3a5676c32dcd42c85643b33376ffa1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=080324aced3a5676c32dcd42c85643b33376ffa1", "patch": "@@ -13730,6 +13730,7 @@ get_some_local_dynamic_name (void)\n    Z -- likewise, with special suffixes for x87 instructions.\n    * -- print a star (in certain assembler syntax)\n    A -- print an absolute memory reference.\n+   E -- print address with DImode register names if TARGET_64BIT.\n    w -- print the operand as if it's a \"word\" (HImode) even if it isn't.\n    s -- print a shift double count, followed by the assemblers argument\n \tdelimiter.\n@@ -13806,7 +13807,14 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t  ix86_print_operand (file, x, 0);\n \t  return;\n \n+\tcase 'E':\n+\t  /* Wrap address in an UNSPEC to declare special handling.  */\n+\t  if (TARGET_64BIT)\n+\t    x = gen_rtx_UNSPEC (DImode, gen_rtvec (1, x), UNSPEC_LEA_ADDR);\n \n+\t  output_address (x);\n+\t  return;\n+\t    \n \tcase 'L':\n \t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('l', file);\n@@ -14418,6 +14426,7 @@ ix86_print_operand_address (FILE *file, rtx addr)\n   int scale;\n   int ok;\n   bool vsib = false;\n+  int code = 0;\n \n   if (GET_CODE (addr) == UNSPEC && XINT (addr, 1) == UNSPEC_VSIBADDR)\n     {\n@@ -14428,6 +14437,12 @@ ix86_print_operand_address (FILE *file, rtx addr)\n       addr = XVECEXP (addr, 0, 0);\n       vsib = true;\n     }\n+  else if (GET_CODE (addr) == UNSPEC && XINT (addr, 1) == UNSPEC_LEA_ADDR)\n+    {\n+      gcc_assert (TARGET_64BIT);\n+      ok = ix86_decompose_address (XVECEXP (addr, 0, 0), &parts);\n+      code = 'q';\n+    }\n   else\n     ok = ix86_decompose_address (addr, &parts);\n \n@@ -14498,15 +14513,15 @@ ix86_print_operand_address (FILE *file, rtx addr)\n     }\n   else\n     {\n-      int code = 0;\n-\n-      /* Print SImode registers for zero-extended addresses to force\n-\t addr32 prefix.  Otherwise print DImode registers to avoid it.  */\n-      if (TARGET_64BIT)\n-\tcode = ((GET_CODE (addr) == ZERO_EXTEND\n-\t\t || GET_CODE (addr) == AND)\n-\t\t? 'l'\n-\t\t: 'q');\n+      /* Print SImode register names for zero-extended\n+\t addresses to force addr32 prefix.  */\n+      if (TARGET_64BIT\n+\t  && (GET_CODE (addr) == ZERO_EXTEND\n+\t      || GET_CODE (addr) == AND))\n+\t{\n+\t  gcc_assert (!code);\n+\t  code = 'l';\n+\t}\n \n       if (ASSEMBLER_DIALECT == ASM_ATT)\n \t{"}, {"sha": "a4a7d3ab1b8d1cc270efa35f666278bb6ca6da75", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080324aced3a5676c32dcd42c85643b33376ffa1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080324aced3a5676c32dcd42c85643b33376ffa1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=080324aced3a5676c32dcd42c85643b33376ffa1", "patch": "@@ -38,6 +38,7 @@\n ;; Z -- likewise, with special suffixes for x87 instructions.\n ;; * -- print a star (in certain assembler syntax)\n ;; A -- print an absolute memory reference.\n+;; E -- print address with DImode register names if TARGET_64BIT.\n ;; w -- print the operand as if it's a \"word\" (HImode) even if it isn't.\n ;; s -- print a shift double count, followed by the assemblers argument\n ;;\tdelimiter.\n@@ -111,6 +112,7 @@\n   UNSPEC_MS_TO_SYSV_CALL\n   UNSPEC_CALL_NEEDS_VZEROUPPER\n   UNSPEC_PAUSE\n+  UNSPEC_LEA_ADDR\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n@@ -1965,7 +1967,7 @@\n       return \"#\";\n \n     case TYPE_LEA:\n-      return \"lea{q}\\t{%a1, %0|%0, %a1}\";\n+      return \"lea{q}\\t{%E1, %0|%0, %E1}\";\n \n     default:\n       gcc_assert (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[1]));\n@@ -1974,7 +1976,7 @@\n       else if (which_alternative == 2)\n \treturn \"movabs{q}\\t{%1, %0|%0, %1}\";\n       else if (ix86_use_lea_for_mov (insn, operands))\n-\treturn \"lea{q}\\t{%a1, %0|%0, %a1}\";\n+\treturn \"lea{q}\\t{%E1, %0|%0, %E1}\";\n       else\n \treturn \"mov{q}\\t{%1, %0|%0, %1}\";\n     }\n@@ -2206,12 +2208,12 @@\n       return \"movd\\t{%1, %0|%0, %1}\";\n \n     case TYPE_LEA:\n-      return \"lea{l}\\t{%a1, %0|%0, %a1}\";\n+      return \"lea{l}\\t{%E1, %0|%0, %E1}\";\n \n     default:\n       gcc_assert (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[1]));\n       if (ix86_use_lea_for_mov (insn, operands))\n-\treturn \"lea{l}\\t{%a1, %0|%0, %a1}\";\n+\treturn \"lea{l}\\t{%E1, %0|%0, %E1}\";\n       else\n \treturn \"mov{l}\\t{%1, %0|%0, %1}\";\n     }\n@@ -5426,7 +5428,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"p\") 0))]\n   \"TARGET_64BIT\"\n-  \"lea{l}\\t{%a1, %0|%0, %a1}\"\n+  \"lea{l}\\t{%E1, %0|%0, %E1}\"\n   \"&& reload_completed && ix86_avoid_lea_for_addr (insn, operands)\"\n   [(const_int 0)]\n {\n@@ -5440,7 +5442,7 @@\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(match_operand:SWI48 1 \"lea_address_operand\" \"p\"))]\n   \"\"\n-  \"lea{<imodesuffix>}\\t{%a1, %0|%0, %a1}\"\n+  \"lea{<imodesuffix>}\\t{%E1, %0|%0, %E1}\"\n   \"reload_completed && ix86_avoid_lea_for_addr (insn, operands)\"\n   [(const_int 0)]\n {\n@@ -5455,7 +5457,7 @@\n \t(zero_extend:DI\n \t  (subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"j\") 0)))]\n   \"TARGET_64BIT\"\n-  \"lea{l}\\t{%a1, %k0|%k0, %a1}\"\n+  \"lea{l}\\t{%E1, %k0|%k0, %E1}\"\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -5464,7 +5466,7 @@\n \t(zero_extend:DI\n \t  (match_operand:SI 1 \"lea_address_operand\" \"j\")))]\n   \"TARGET_64BIT\"\n-  \"lea{l}\\t{%a1, %k0|%k0, %a1}\"\n+  \"lea{l}\\t{%E1, %k0|%k0, %E1}\"\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -5474,7 +5476,7 @@\n \t  (subreg:DI (match_operand:SI 1 \"lea_address_operand\" \"p\") 0)\n \t  (match_operand:DI 2 \"const_32bit_mask\" \"n\")))]\n   \"TARGET_64BIT\"\n-  \"lea{l}\\t{%a1, %k0|%k0, %a1}\"\n+  \"lea{l}\\t{%E1, %k0|%k0, %E1}\"\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -5484,7 +5486,7 @@\n \t  (match_operand:DI 1 \"lea_address_operand\" \"p\")\n \t  (match_operand:DI 2 \"const_32bit_mask\" \"n\")))]\n   \"TARGET_64BIT\"\n-  \"lea{l}\\t{%a1, %k0|%k0, %a1}\"\n+  \"lea{l}\\t{%E1, %k0|%k0, %E1}\"\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -12541,7 +12543,7 @@\n   \"!TARGET_64BIT && TARGET_GNU_TLS\"\n {\n   output_asm_insn\n-    (\"lea{l}\\t{%a2@tlsgd(,%1,1), %0|%0, %a2@tlsgd[%1*1]}\", operands);\n+    (\"lea{l}\\t{%E2@tlsgd(,%1,1), %0|%0, %E2@tlsgd[%1*1]}\", operands);\n   if (TARGET_SUN_TLS)\n #ifdef HAVE_AS_IX86_TLSGDPLT\n     return \"call\\t%a2@tlsgdplt\";\n@@ -12576,7 +12578,7 @@\n   if (!TARGET_X32)\n     fputs (ASM_BYTE \"0x66\\n\", asm_out_file);\n   output_asm_insn\n-    (\"lea{q}\\t{%a1@tlsgd(%%rip), %%rdi|rdi, %a1@tlsgd[rip]}\", operands);\n+    (\"lea{q}\\t{%E1@tlsgd(%%rip), %%rdi|rdi, %E1@tlsgd[rip]}\", operands);\n   fputs (ASM_SHORT \"0x6666\\n\", asm_out_file);\n   fputs (\"\\trex64\\n\", asm_out_file);\n   if (TARGET_SUN_TLS)\n@@ -12802,7 +12804,7 @@\n \t\t  (unspec:SI [(match_operand:SI 2 \"tls_symbolic_operand\" \"\")]\n \t\t\t      UNSPEC_TLSDESC))))]\n   \"!TARGET_64BIT && TARGET_GNU2_TLS\"\n-  \"lea{l}\\t{%a2@TLSDESC(%1), %0|%0, %a2@TLSDESC[%1]}\"\n+  \"lea{l}\\t{%E2@TLSDESC(%1), %0|%0, %E2@TLSDESC[%1]}\"\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"length\" \"6\")\n@@ -12864,7 +12866,7 @@\n \t(unspec:DI [(match_operand 1 \"tls_symbolic_operand\" \"\")]\n \t\t   UNSPEC_TLSDESC))]\n   \"TARGET_64BIT && TARGET_GNU2_TLS\"\n-  \"lea{q}\\t{%a1@TLSDESC(%%rip), %0|%0, %a1@TLSDESC[rip]}\"\n+  \"lea{q}\\t{%E1@TLSDESC(%%rip), %0|%0, %E1@TLSDESC[rip]}\"\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"DI\")\n    (set_attr \"length\" \"7\")\n@@ -16614,7 +16616,7 @@\n \n     default:\n       operands[2] = SET_SRC (XVECEXP (PATTERN (insn), 0, 0));\n-      return \"lea{<imodesuffix>}\\t{%a2, %0|%0, %a2}\";\n+      return \"lea{<imodesuffix>}\\t{%E2, %0|%0, %E2}\";\n     }\n }\n   [(set (attr \"type\")"}]}