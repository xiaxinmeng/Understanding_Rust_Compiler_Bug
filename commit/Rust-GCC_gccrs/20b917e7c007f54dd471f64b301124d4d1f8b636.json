{"sha": "20b917e7c007f54dd471f64b301124d4d1f8b636", "node_id": "C_kwDOANBUbNoAKDIwYjkxN2U3YzAwN2Y1NGRkNDcxZjY0YjMwMTEyNGQ0ZDFmOGI2MzY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-11T21:48:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-13T12:32:22Z"}, "message": "libstdc++: Improve doxygen docs for <system_error>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/system_error: Improve doxygen comments.", "tree": {"sha": "7c8d73806657b330e41b212f972eca5d509573eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c8d73806657b330e41b212f972eca5d509573eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20b917e7c007f54dd471f64b301124d4d1f8b636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b917e7c007f54dd471f64b301124d4d1f8b636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b917e7c007f54dd471f64b301124d4d1f8b636", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b917e7c007f54dd471f64b301124d4d1f8b636/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "757146fb1c82b49e78ee82c882677814f25c2429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757146fb1c82b49e78ee82c882677814f25c2429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/757146fb1c82b49e78ee82c882677814f25c2429"}], "stats": {"total": 136, "additions": 107, "deletions": 29}, "files": [{"sha": "95508da73dd819e4773a4b12c474dd8e5f76c302", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 107, "deletions": 29, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b917e7c007f54dd471f64b301124d4d1f8b636/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b917e7c007f54dd471f64b301124d4d1f8b636/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=20b917e7c007f54dd471f64b301124d4d1f8b636", "patch": "@@ -85,13 +85,20 @@ _GLIBCXX_BEGIN_INLINE_ABI_NAMESPACE(_V2)\n \n   /** Abstract base class for types defining a category of error codes.\n    *\n-   * An error category defines a context that give meaning to the integer\n+   * An error category defines a context that gives meaning to the integer\n    * stored in an `error_code` or `error_condition` object. For example,\n    * the standard `errno` constants such a `EINVAL` and `ENOMEM` are\n    * associated with the \"generic\" category and other OS-specific error\n    * numbers are associated with the \"system\" category, but a user-defined\n    * category might give different meanings to the same numerical values.\n    *\n+   * A user-defined category can override the `equivalent` member functions\n+   * to define correspondence between errors in different categories.\n+   * For example, a category for errors from disk I/O could consider some\n+   * of its error numbers equivalent to ENOSPC and ENOENT in the generic\n+   * category.\n+   *\n+   * @headerfile system_error\n    * @since C++11\n    */\n   class error_category\n@@ -104,6 +111,7 @@ _GLIBCXX_BEGIN_INLINE_ABI_NAMESPACE(_V2)\n     error_category(const error_category&) = delete;\n     error_category& operator=(const error_category&) = delete;\n \n+    /// A string that identifies the error category.\n     virtual const char*\n     name() const noexcept = 0;\n \n@@ -118,6 +126,7 @@ _GLIBCXX_BEGIN_INLINE_ABI_NAMESPACE(_V2)\n     _M_message(int) const;\n \n   public:\n+    /// A description of the error condition corresponding to the number.\n     _GLIBCXX_DEFAULT_ABI_TAG\n     virtual string\n     message(int) const = 0;\n@@ -131,31 +140,36 @@ _GLIBCXX_BEGIN_INLINE_ABI_NAMESPACE(_V2)\n #endif\n \n   public:\n+    /// Return an error_condition corresponding to `i` in this category.\n     virtual error_condition\n     default_error_condition(int __i) const noexcept;\n \n+    /// Test whether `cond` corresponds to `i` for this category.\n     virtual bool\n     equivalent(int __i, const error_condition& __cond) const noexcept;\n \n+    /// Test whether `code` corresponds to `i` for this category.\n     virtual bool\n     equivalent(const error_code& __code, int __i) const noexcept;\n \n+    /// An error_category only compares equal to itself.\n     bool\n     operator==(const error_category& __other) const noexcept\n     { return this == &__other; }\n \n+    /// Ordered comparison that defines a total order for error categories.\n #if __cpp_lib_three_way_comparison\n     strong_ordering\n     operator<=>(const error_category& __rhs) const noexcept\n     { return std::compare_three_way()(this, &__rhs); }\n #else\n-    bool\n-    operator!=(const error_category& __other) const noexcept\n-    { return this != &__other; }\n-\n     bool\n     operator<(const error_category& __other) const noexcept\n     { return less<const error_category*>()(this, &__other); }\n+\n+    bool\n+    operator!=(const error_category& __other) const noexcept\n+    { return this != &__other; }\n #endif\n   };\n \n@@ -191,8 +205,8 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    * library might be represented by an HTTP response status code (e.g. 404)\n    * and a custom category defined by the library.\n    *\n+   * @headerfile system_error\n    * @since C++11\n-   * @ingroup diagnostics\n    */\n   class error_code\n   {\n@@ -226,20 +240,25 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n       operator=(_ErrorCodeEnum __e) noexcept\n       { return *this = make_error_code(__e); }\n \n+    /// The error value.\n     int\n     value() const noexcept { return _M_value; }\n \n+    /// The error category that this error belongs to.\n     const error_category&\n     category() const noexcept { return *_M_cat; }\n \n+    /// An `error_condition` for this error's category and value.\n     error_condition\n     default_error_condition() const noexcept;\n \n+    /// The category's description of the value.\n     _GLIBCXX_DEFAULT_ABI_TAG\n     string\n     message() const\n     { return category().message(value()); }\n \n+    /// Test whether `value()` is non-zero.\n     explicit operator bool() const noexcept\n     { return _M_value != 0; }\n \n@@ -249,14 +268,28 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     const error_category* \t_M_cat;\n   };\n \n-  // 19.4.2.6 non-member functions\n-\n-  /// @relates error_code @{\n+  // C++11 19.5.2.5 non-member functions\n \n+  /** Create an `error_code` representing a standard `errc` condition.\n+   *\n+   * The `std::errc` constants correspond to `errno` macros and so use the\n+   * generic category.\n+   *\n+   * @relates error_code\n+   * @since C++11\n+   */\n   inline error_code\n   make_error_code(errc __e) noexcept\n   { return error_code(static_cast<int>(__e), generic_category()); }\n \n+  /** Ordered comparison for std::error_code.\n+   *\n+   * This defines a total order by comparing the categories, and then\n+   * if they are equal comparing the values.\n+   *\n+   * @relates error_code\n+   * @since C++11\n+   */\n #if __cpp_lib_three_way_comparison\n   inline strong_ordering\n   operator<=>(const error_code& __lhs, const error_code& __rhs) noexcept\n@@ -275,13 +308,16 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n   }\n #endif\n \n+  /** Write a std::error_code to an ostream.\n+   *\n+   * @relates error_code\n+   * @since C++11\n+   */\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)\n     { return (__os << __e.category().name() << ':' << __e.value()); }\n \n-  /// @}\n-\n   error_condition make_error_condition(errc) noexcept;\n \n   /** Class error_condition\n@@ -293,14 +329,17 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    * An `error_condition` represents something that the program can test for,\n    * and subsequently take appropriate action.\n    *\n+   * @headerfile system_error\n    * @since C++11\n    */\n   class error_condition\n   {\n   public:\n+    /// Initialize with a zero (no error) value and the generic category.\n     error_condition() noexcept\n     : _M_value(0), _M_cat(&generic_category()) { }\n \n+    /// Initialize with the specified value and category.\n     error_condition(int __v, const error_category& __cat) noexcept\n     : _M_value(__v), _M_cat(&__cat) { }\n \n@@ -309,6 +348,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n       error_condition(_ErrorConditionEnum __e) noexcept\n       { *this = make_error_condition(__e); }\n \n+    /// Set the value and category.\n     void\n     assign(int __v, const error_category& __cat) noexcept\n     {\n@@ -323,22 +363,28 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n       operator=(_ErrorConditionEnum __e) noexcept\n       { return *this = make_error_condition(__e); }\n \n+    /// Reset the value and category to the default-constructed state.\n     void\n     clear() noexcept\n     { assign(0, generic_category()); }\n \n-    // 19.4.3.4 observers\n+    // C++11 19.5.3.4 observers\n+\n+    /// The error value.\n     int\n     value() const noexcept { return _M_value; }\n \n+    /// The error category that this error belongs to.\n     const error_category&\n     category() const noexcept { return *_M_cat; }\n \n+    /// The category's description of the value.\n     _GLIBCXX_DEFAULT_ABI_TAG\n     string\n     message() const\n     { return category().message(value()); }\n \n+    /// Test whether `value()` is non-zero.\n     explicit operator bool() const noexcept\n     { return _M_value != 0; }\n \n@@ -348,42 +394,75 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     const error_category* \t_M_cat;\n   };\n \n-  // 19.4.3.6 non-member functions\n+  // C++11 19.5.3.5 non-member functions\n \n-  /// Create an `error_condition` representing a standard `errc` condition.\n-  /// @relates error_condition\n+  /** Create an `error_condition` representing a standard `errc` condition.\n+   *\n+   * The `std::errc` constants correspond to `errno` macros and so use the\n+   * generic category.\n+   *\n+   * @relates error_condition\n+   * @since C++11\n+   */\n   inline error_condition\n   make_error_condition(errc __e) noexcept\n   { return error_condition(static_cast<int>(__e), generic_category()); }\n \n-  // 19.4.4 Comparison operators\n+  // C++11 19.5.4 Comparison operators\n \n-  /// @relates error_code\n+  /** Equality comparison for std::error_code.\n+   *\n+   * Returns true only if they have the same category and the same value.\n+   *\n+   * @relates error_condition\n+   * @since C++11\n+   */\n   inline bool\n   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n-  { return (__lhs.category() == __rhs.category()\n-\t    && __lhs.value() == __rhs.value()); }\n+  {\n+    return __lhs.category() == __rhs.category()\n+\t     && __lhs.value() == __rhs.value();\n+  }\n \n-  /// @relates error_code\n+  /** Equality comparison for std::error_code and std::error_condition.\n+   *\n+   * Uses each category's `equivalent` member function to check whether\n+   * the values correspond to an equivalent error in that category.\n+   *\n+   * @relates error_condition\n+   * @since C++11\n+   */\n   inline bool\n   operator==(const error_code& __lhs, const error_condition& __rhs) noexcept\n   {\n-    return (__lhs.category().equivalent(__lhs.value(), __rhs)\n-\t    || __rhs.category().equivalent(__lhs, __rhs.value()));\n+    return __lhs.category().equivalent(__lhs.value(), __rhs)\n+\t     || __rhs.category().equivalent(__lhs, __rhs.value());\n   }\n \n-  /// @relates error_condition\n+  /** Equality comparison for std::error_condition.\n+   *\n+   * Returns true only if they have the same category and the same value.\n+   *\n+   * @relates error_condition\n+   * @since C++11\n+   */\n   inline bool\n   operator==(const error_condition& __lhs,\n \t     const error_condition& __rhs) noexcept\n   {\n-    return (__lhs.category() == __rhs.category()\n-\t    && __lhs.value() == __rhs.value());\n+    return __lhs.category() == __rhs.category()\n+\t     && __lhs.value() == __rhs.value();\n   }\n \n+  /** Ordered comparison for std::error_condition.\n+   *\n+   * This defines a total order by comparing the categories, and then\n+   * if they are equal comparing the values.\n+   *\n+   * @relates error_condition\n+   * @since C++11\n+   */\n #if __cpp_lib_three_way_comparison\n-  /// Define an ordering for error_condition objects.\n-  /// @relates error_condition\n   inline strong_ordering\n   operator<=>(const error_condition& __lhs,\n \t      const error_condition& __rhs) noexcept\n@@ -393,8 +472,6 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     return __lhs.value() <=> __rhs.value();\n   }\n #else\n-  /// Define an ordering for error_condition objects.\n-  /// @relates error_condition\n   inline bool\n   operator<(const error_condition& __lhs,\n \t    const error_condition& __rhs) noexcept\n@@ -441,6 +518,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    * Typically used to report errors from the operating system and other\n    * low-level APIs.\n    *\n+   * @headerfile system_error\n    * @since C++11\n    * @ingroup exceptions\n    */"}]}