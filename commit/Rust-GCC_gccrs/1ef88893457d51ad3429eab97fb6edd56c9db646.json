{"sha": "1ef88893457d51ad3429eab97fb6edd56c9db646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVmODg4OTM0NTdkNTFhZDM0MjllYWI5N2ZiNmVkZDU2YzlkYjY0Ng==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-10-16T15:48:47Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-10-16T15:48:47Z"}, "message": "re PR tree-optimization/58697 (wrong code (segfaults) at -O3)\n\n\n\tPR tree-optimization/58697\n\t* cfgloop.c (get_estimated_loop_iterations_int): Rename from \n\testimated_loop_iterations_int.\n\t(max_stmt_executions_int): Call get_max_loop_iterations_int.\n\t(get_max_loop_iterations_int): New.  HWINT version of \n\tget_max_loop_iterations.\n\t* cfgloop.h: Add prototypes.\n\t* loop-iv.c (find_simple_exit): call get_estimated_loop_iterations_int.\n\t* loop-unroll.c (decide_peel_once_rolling): Call \n\tget_estimated_loop_iterations_int.\n\t* tree-ssa-loop-niter.c (estimated_loop_iterations_int): Add back.\n\t* tree-ssa-loop-niter.h: Tweak prototypes.\n\nFrom-SVN: r203709", "tree": {"sha": "8477f2ad269e9d4ebe53cbc7799f7b5a6c9dc5ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8477f2ad269e9d4ebe53cbc7799f7b5a6c9dc5ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ef88893457d51ad3429eab97fb6edd56c9db646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef88893457d51ad3429eab97fb6edd56c9db646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef88893457d51ad3429eab97fb6edd56c9db646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef88893457d51ad3429eab97fb6edd56c9db646/comments", "author": null, "committer": null, "parents": [{"sha": "c22df64f91c2f4fcd22eb94ed55af08095e3ad78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c22df64f91c2f4fcd22eb94ed55af08095e3ad78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c22df64f91c2f4fcd22eb94ed55af08095e3ad78"}], "stats": {"total": 78, "additions": 69, "deletions": 9}, "files": [{"sha": "237a2124ca8d34dba7d881d96753d103cabb959e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ef88893457d51ad3429eab97fb6edd56c9db646", "patch": "@@ -1,3 +1,18 @@\n+2013-10-16  Andrew MacLeod  <amacleod@redhat.com>\n+\t\n+\tPR tree-optimization/58697\n+\t* cfgloop.c (get_estimated_loop_iterations_int): Rename from \n+\testimated_loop_iterations_int.\n+\t(max_stmt_executions_int): Call get_max_loop_iterations_int.\n+\t(get_max_loop_iterations_int): New.  HWINT version of \n+\tget_max_loop_iterations.\n+\t* cfgloop.h: Add prototypes.\n+\t* loop-iv.c (find_simple_exit): call get_estimated_loop_iterations_int.\n+\t* loop-unroll.c (decide_peel_once_rolling): Call \n+\tget_estimated_loop_iterations_int.\n+\t* tree-ssa-loop-niter.c (estimated_loop_iterations_int): Add back.\n+\t* tree-ssa-loop-niter.h: Tweak prototypes.\n+\n 2013-10-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gengtype-parse.c (struct_field_seq): Ignore access-control"}, {"sha": "28e30eaa905ebb76b1ed2da053c3591a82decf7f", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=1ef88893457d51ad3429eab97fb6edd56c9db646", "patch": "@@ -1815,12 +1815,12 @@ record_niter_bound (struct loop *loop, double_int i_bound, bool realistic,\n     loop->nb_iterations_estimate = loop->nb_iterations_upper_bound;\n }\n \n-/* Similar to estimated_loop_iterations, but returns the estimate only\n+/* Similar to get_estimated_loop_iterations, but returns the estimate only\n    if it fits to HOST_WIDE_INT.  If this is not the case, or the estimate\n    on the number of iterations of LOOP could not be derived, returns -1.  */\n \n HOST_WIDE_INT\n-estimated_loop_iterations_int (struct loop *loop)\n+get_estimated_loop_iterations_int (struct loop *loop)\n {\n   double_int nit;\n   HOST_WIDE_INT hwi_nit;\n@@ -1842,7 +1842,7 @@ estimated_loop_iterations_int (struct loop *loop)\n HOST_WIDE_INT\n max_stmt_executions_int (struct loop *loop)\n {\n-  HOST_WIDE_INT nit = max_loop_iterations_int (loop);\n+  HOST_WIDE_INT nit = get_max_loop_iterations_int (loop);\n   HOST_WIDE_INT snit;\n \n   if (nit == -1)\n@@ -1891,3 +1891,25 @@ get_max_loop_iterations (struct loop *loop, double_int *nit)\n   *nit = loop->nb_iterations_upper_bound;\n   return true;\n }\n+\n+/* Similar to get_max_loop_iterations, but returns the estimate only\n+   if it fits to HOST_WIDE_INT.  If this is not the case, or the estimate\n+   on the number of iterations of LOOP could not be derived, returns -1.  */\n+\n+HOST_WIDE_INT\n+get_max_loop_iterations_int (struct loop *loop)\n+{\n+  double_int nit;\n+  HOST_WIDE_INT hwi_nit;\n+\n+  if (!get_max_loop_iterations (loop, &nit))\n+    return -1;\n+\n+  if (!nit.fits_shwi ())\n+    return -1;\n+  hwi_nit = nit.to_shwi ();\n+\n+  return hwi_nit < 0 ? -1 : hwi_nit;\n+}\n+\n+"}, {"sha": "b9676ec02514dba70a222be1ace7e1d20a2555f8", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=1ef88893457d51ad3429eab97fb6edd56c9db646", "patch": "@@ -740,8 +740,8 @@ loop_outermost (struct loop *loop)\n }\n \n extern void record_niter_bound (struct loop *, double_int, bool, bool);\n-extern HOST_WIDE_INT estimated_loop_iterations_int (struct loop *);\n-extern HOST_WIDE_INT max_loop_iterations_int (struct loop *);\n+extern HOST_WIDE_INT get_estimated_loop_iterations_int (struct loop *);\n+extern HOST_WIDE_INT get_max_loop_iterations_int (struct loop *);\n extern bool get_estimated_loop_iterations (struct loop *loop, double_int *nit);\n extern bool get_max_loop_iterations (struct loop *loop, double_int *nit);\n "}, {"sha": "b9bc3348733d1bf5e08e3f1e8518049fb0f66d6a", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=1ef88893457d51ad3429eab97fb6edd56c9db646", "patch": "@@ -3001,9 +3001,9 @@ find_simple_exit (struct loop *loop, struct niter_desc *desc)\n       \t  fprintf (dump_file, \"\\n\");\n \n \t  fprintf (dump_file, \"  upper bound: %li\\n\",\n-\t\t   (long)max_loop_iterations_int (loop));\n+\t\t   (long)get_max_loop_iterations_int (loop));\n \t  fprintf (dump_file, \"  realistic bound: %li\\n\",\n-\t\t   (long)estimated_loop_iterations_int (loop));\n+\t\t   (long)get_estimated_loop_iterations_int (loop));\n \t}\n       else\n \tfprintf (dump_file, \"Loop %d is not simple.\\n\", loop->num);"}, {"sha": "568fd7bdab41fd304c9454ce8ed1e03328de2e62", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=1ef88893457d51ad3429eab97fb6edd56c9db646", "patch": "@@ -469,7 +469,7 @@ decide_peel_once_rolling (struct loop *loop, int flags ATTRIBUTE_UNUSED)\n       || desc->infinite\n       || !desc->const_iter\n       || (desc->niter != 0\n-\t  && max_loop_iterations_int (loop) != 0))\n+\t  && get_max_loop_iterations_int (loop) != 0))\n     {\n       if (dump_file)\n \tfprintf (dump_file,"}, {"sha": "3bdb10a4373f1b2a08f11bb78e24d1448f6a05b6", "filename": "gcc/loop-unswitch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Floop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Floop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unswitch.c?ref=1ef88893457d51ad3429eab97fb6edd56c9db646", "patch": "@@ -304,7 +304,7 @@ unswitch_single_loop (struct loop *loop, rtx cond_checked, int num)\n     }\n \n   /* Nor if the loop usually does not roll.  */\n-  iterations = estimated_loop_iterations_int (loop);\n+  iterations = get_estimated_loop_iterations_int (loop);\n   if (iterations >= 0 && iterations <= 1)\n     {\n       if (dump_file)"}, {"sha": "113c7d103be618c96b28822e07d1d2e4e4f43acf", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=1ef88893457d51ad3429eab97fb6edd56c9db646", "patch": "@@ -3388,6 +3388,27 @@ estimated_loop_iterations (struct loop *loop, double_int *nit)\n   return (get_estimated_loop_iterations (loop, nit));\n }\n \n+/* Similar to estimated_loop_iterations, but returns the estimate only\n+   if it fits to HOST_WIDE_INT.  If this is not the case, or the estimate\n+   on the number of iterations of LOOP could not be derived, returns -1.  */\n+\n+HOST_WIDE_INT\n+estimated_loop_iterations_int (struct loop *loop)\n+{\n+  double_int nit;\n+  HOST_WIDE_INT hwi_nit;\n+\n+  if (!estimated_loop_iterations (loop, &nit))\n+    return -1;\n+\n+  if (!nit.fits_shwi ())\n+    return -1;\n+  hwi_nit = nit.to_shwi ();\n+\n+  return hwi_nit < 0 ? -1 : hwi_nit;\n+}\n+\n+\n /* Sets NIT to an upper bound for the maximum number of executions of the\n    latch of the LOOP.  If we have no reliable estimate, the function returns\n    false, otherwise returns true.  */"}, {"sha": "194550762d8d534a850173fadfb2026b16b4b216", "filename": "gcc/tree-ssa-loop-niter.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Ftree-ssa-loop-niter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef88893457d51ad3429eab97fb6edd56c9db646/gcc%2Ftree-ssa-loop-niter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.h?ref=1ef88893457d51ad3429eab97fb6edd56c9db646", "patch": "@@ -30,7 +30,9 @@ extern bool finite_loop_p (struct loop *);\n extern tree loop_niter_by_eval (struct loop *, edge);\n extern tree find_loop_niter_by_eval (struct loop *, edge *);\n extern bool estimated_loop_iterations (struct loop *, double_int *);\n+extern HOST_WIDE_INT estimated_loop_iterations_int (struct loop *);\n extern bool max_loop_iterations (struct loop *, double_int *);\n+extern HOST_WIDE_INT max_loop_iterations_int (struct loop *);\n extern HOST_WIDE_INT max_stmt_executions_int (struct loop *);\n extern HOST_WIDE_INT estimated_stmt_executions_int (struct loop *);\n extern bool max_stmt_executions (struct loop *, double_int *);"}]}