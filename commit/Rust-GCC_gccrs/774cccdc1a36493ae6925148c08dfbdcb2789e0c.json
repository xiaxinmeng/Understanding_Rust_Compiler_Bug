{"sha": "774cccdc1a36493ae6925148c08dfbdcb2789e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc0Y2NjZGMxYTM2NDkzYWU2OTI1MTQ4YzA4ZGZiZGNiMjc4OWUwYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-25T13:35:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-25T13:35:17Z"}, "message": "re PR target/81532 (insn does not satisfy its constraints: extract_constrain_insn, at recog.c:2213)\n\n\tPR target/81532\n\t* config/i386/constraints.md (Yd, Ye): Use ALL_SSE_REGS for\n\tTARGET_AVX512DQ rather than TARGET_AVX512BW.\n\n\t* gcc.target/i386/pr80833-3.c: New test.\n\t* gcc.target/i386/avx512dq-pr81532.c: New test.\n\t* gcc.target/i386/avx512bw-pr81532.c: New test.\n\nFrom-SVN: r250520", "tree": {"sha": "df9284c91a2cdb772aea9ba75ef021025723d3b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df9284c91a2cdb772aea9ba75ef021025723d3b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/774cccdc1a36493ae6925148c08dfbdcb2789e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774cccdc1a36493ae6925148c08dfbdcb2789e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/774cccdc1a36493ae6925148c08dfbdcb2789e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774cccdc1a36493ae6925148c08dfbdcb2789e0c/comments", "author": null, "committer": null, "parents": [{"sha": "b3afe7922ac31f1cec1f200e1259287938cbd7e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3afe7922ac31f1cec1f200e1259287938cbd7e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3afe7922ac31f1cec1f200e1259287938cbd7e9"}], "stats": {"total": 98, "additions": 71, "deletions": 27}, "files": [{"sha": "047f9218e0fd66f811a4feefc21f131f81adb864", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=774cccdc1a36493ae6925148c08dfbdcb2789e0c", "patch": "@@ -1,3 +1,9 @@\n+2017-07-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/81532\n+\t* config/i386/constraints.md (Yd, Ye): Use ALL_SSE_REGS for\n+\tTARGET_AVX512DQ rather than TARGET_AVX512BW.\n+\n 2017-07-25  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/arm/parsecpu.awk (all_cores): Remove duplicates.\n@@ -799,7 +805,7 @@\n \n 2017-07-17  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n-\t*  gcc/config/sparc/rtemself.h (TARGET_OS_CPP_BUILTINS): Add\n+\t* config/sparc/rtemself.h (TARGET_OS_CPP_BUILTINS): Add\n \tconditional builtin define __FIX_LEON3FT_B2BST.\n \n 2017-07-17  Daniel Cederman  <cederman@gaisler.com>\n@@ -1903,7 +1909,7 @@\n \n 2017-07-06  Julia Koval  <julia.koval@intel.com>\n \n-\t* gcc/config/i386/i386.c (ix86_erase_embedded_rounding):\n+\t* config/i386/i386.c (ix86_erase_embedded_rounding):\n \tRemove code for old rounding pattern.\n \n 2017-07-06  Richard Earnshaw  <rearnsha@arm.com>\n@@ -15356,7 +15362,7 @@\n 2017-02-06  Palmer Dabbelt  <palmer@dabbelt.com>\n \n \t* config/riscv/riscv.c: New file.\n-\t* gcc/common/config/riscv/riscv-common.c: Likewise.\n+\t* common/config/riscv/riscv-common.c: Likewise.\n \t* config.gcc: Likewise.\n \t* config/riscv/constraints.md: Likewise.\n \t* config/riscv/elf.h: Likewise.\n@@ -16619,7 +16625,7 @@\n \t* config/i386/avx512bwintrin.h: Add k-mask test, kortest intrinsics.\n \t* config/i386/avx512dqintrin.h: Ditto.\n \t* config/i386/avx512fintrin.h: Ditto.\n-\t* gcc/config/i386/i386.c: Handle new builtins.\n+\t* config/i386/i386.c: Handle new builtins.\n \t* config/i386/i386-builtin.def: Add new builtins.\n \t* config/i386/sse.md (ktest<mode>, kortest<mode>): New.\n \t(UNSPEC_KORTEST, UNSPEC_KTEST): New.\n@@ -16800,7 +16806,7 @@\n \t* config/i386/avx512dqintrin.h: Ditto.\n \t* config/i386/avx512fintrin.h: Ditto.\n \t* config/i386/i386-builtin-types.def: Add new types.\n-\t* gcc/config/i386/i386.c: Handle new types.\n+\t* config/i386/i386.c: Handle new types.\n \t* config/i386/i386-builtin.def (__builtin_ia32_kshiftliqi)\n \t(__builtin_ia32_kshiftlihi, __builtin_ia32_kshiftlisi)\n \t(__builtin_ia32_kshiftlidi, __builtin_ia32_kshiftriqi)\n@@ -16823,14 +16829,14 @@\n \t(with_madd4): Add validation.\n \t(all_defaults): Add madd4.\n \t* config/mips/mips.opt (mmadd4): New option.\n-\t* gcc/config/mips/mips.h (OPTION_DEFAULT_SPECS): Add a default for\n+\t* config/mips/mips.h (OPTION_DEFAULT_SPECS): Add a default for\n \tmmadd4.\n \t(TARGET_CPU_CPP_BUILTINS): Add builtin_define for\n \t__mips_no_madd4.\n \t(ISA_HAS_UNFUSED_MADD4): Gate with mips_madd4.\n \t(ISA_HAS_FUSED_MADD4): Likewise.\n-\t* gcc/doc/invoke.texi (-mmadd4): Document the new option.\n-\t* gcc/doc/install.texi (--with-madd4): Document the new option.\n+\t* doc/invoke.texi (-mmadd4): Document the new option.\n+\t* doc/install.texi (--with-madd4): Document the new option.\n \n 2017-01-19  Jiong Wang  <jiong.wang@arm.com>\n \n@@ -16968,12 +16974,12 @@\n \t(with_lxc1_sxc1): Add validation.\n \t(all_defaults): Add lxc1-sxc1.\n \t* config/mips/mips.opt (mlxc1-sxc1): New option.\n-\t* gcc/config/mips/mips.h (OPTION_DEFAULT_SPECS): Add a default for\n+\t* config/mips/mips.h (OPTION_DEFAULT_SPECS): Add a default for\n \tmlxc1-sxc1.\n \t(TARGET_CPU_CPP_BUILTINS): Add builtin_define for\n \t__mips_no_lxc1_sxc1.\n \t(ISA_HAS_LXC1_SXC1): Gate with mips_lxc1_sxc1.\n-\t* gcc/doc/invoke.texi (-mlxc1-sxc1): Document the new option.\n+\t* doc/invoke.texi (-mlxc1-sxc1): Document the new option.\n \t* doc/install.texi (--with-lxc1-sxc1): Document the new option.\n \n 2017-01-19  Richard Biener  <rguenther@suse.de>\n@@ -18390,8 +18396,8 @@\n \t'arm_const_bounds'.\n \t* config/arm/types.md (coproc): New.\n \t* config/arm/unspecs.md (VUNSPEC_CDP, VUNSPEC_CDP2): New.\n-\t* gcc/doc/extend.texi (ACLE): Add a mention of Coprocessor intrinsics.\n-\t* gcc/doc/sourcebuild.texi (arm_coproc1_ok, arm_coproc2_ok,\n+\t* doc/extend.texi (ACLE): Add a mention of Coprocessor intrinsics.\n+\t* doc/sourcebuild.texi (arm_coproc1_ok, arm_coproc2_ok,\n \tarm_coproc3_ok, arm_coproc4_ok): Document new effective targets.\n \n 2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>"}, {"sha": "98c05c9ebabfb2aac782d87d935ffa8b1b89156d", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=774cccdc1a36493ae6925148c08dfbdcb2789e0c", "patch": "@@ -138,19 +138,19 @@\n \n (define_register_constraint \"Yd\"\n  \"TARGET_INTER_UNIT_MOVES_TO_VEC\n-  ? (TARGET_AVX512BW\n+  ? (TARGET_AVX512DQ\n      ? ALL_SSE_REGS\n      : (TARGET_SSE4_1 ? SSE_REGS : NO_REGS))\n   : NO_REGS\"\n- \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512BW target or any SSE register for SSE4_1 target, when inter-unit moves to vector registers are enabled.\")\n+ \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512DQ target or any SSE register for SSE4_1 target, when inter-unit moves to vector registers are enabled.\")\n \n (define_register_constraint \"Ye\"\n  \"TARGET_INTER_UNIT_MOVES_FROM_VEC\n-  ? (TARGET_AVX512BW\n+  ? (TARGET_AVX512DQ\n      ? ALL_SSE_REGS\n      : (TARGET_SSE4_1 ? SSE_REGS : NO_REGS))\n   : NO_REGS\"\n- \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512BW target or any SSE register for SSE4_1 target, when inter-unit moves from vector registers are enabled.\")\n+ \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512DQ target or any SSE register for SSE4_1 target, when inter-unit moves from vector registers are enabled.\")\n \n (define_register_constraint \"Ym\"\n  \"TARGET_MMX && TARGET_INTER_UNIT_MOVES_TO_VEC ? MMX_REGS : NO_REGS\""}, {"sha": "90a73a135295826e4b61c2e6b04330bf8012a932", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=774cccdc1a36493ae6925148c08dfbdcb2789e0c", "patch": "@@ -1,3 +1,10 @@\n+2017-07-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/81532\n+\t* gcc.target/i386/pr80833-3.c: New test.\n+\t* gcc.target/i386/avx512dq-pr81532.c: New test.\n+\t* gcc.target/i386/avx512bw-pr81532.c: New test.\n+\n 2017-07-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81455\n@@ -10,7 +17,7 @@\n \n 2017-07-25  Wilco Dijkstra  <wdijkstr@arm.com>\n \n-\t* testsuite/gcc.target/aarch64/pr79041-2.c: Improve test.\n+\t* gcc.target/aarch64/pr79041-2.c: Improve test.\n \n 2017-07-25  Richard Biener  <rguenther@suse.de>\n \n@@ -545,7 +552,7 @@\n \n 2017-07-11  Michael Collison  <michael.collison@arm.com>\n \n-\t* testsuite/gcc.target/aarch64/cmp-2.c: New testcase.\n+\t* gcc.target/aarch64/cmp-2.c: New testcase.\n \n 2017-07-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -1721,7 +1728,7 @@\n \t* gcc.dg/fold-bcopy.c: New test.\n \t* gcc.dg/tree-ssa/ssa-dse-30.c: Likewise..\n \t* gcc.dg/tree-ssa/alias-36.c: Likewise.\n-\t* gcc/testsuite/gcc.dg/pr79214.c: Adjust.\n+\t* gcc.dg/pr79214.c: Adjust.\n \t* gcc.dg/tree-prof/val-prof-7.c: Likewise.\n \t* gcc.dg/Wsizeof-pointer-memaccess1.c: Likewise.\n \t* gcc.dg/builtins-nonnull.c: Likewise.\n@@ -2062,12 +2069,12 @@\n \n 2017-06-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n-\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-char.c: New.\n-\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-float.c: New.\n-\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-floatdouble.c: New.\n-\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-int.c: New.\n-\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-longlong.c: New.\n-\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-short.c: New.\n+\t* gcc.target/powerpc/fold-vec-logical-eqv-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-logical-eqv-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-logical-eqv-floatdouble.c: New.\n+\t* gcc.target/powerpc/fold-vec-logical-eqv-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-logical-eqv-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-logical-eqv-short.c: New.\n \n 2017-06-08  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -3790,8 +3797,8 @@\n \n 2017-05-08  Wilco Dijkstra  <wdijkstr@arm.com>\n \n-\t* testsuite/gcc.dg/vect/vect-44.c: Add -fno-vect-cost-model.\n-\t* gcc/testsuite/gcc.dg/vect/vect-50.c: Likewise.\n+\t* gcc.dg/vect/vect-44.c: Add -fno-vect-cost-model.\n+\t* gcc.dg/vect/vect-50.c: Likewise.\n \n 2017-05-07  Jeff Law  <law@redhat.com>\n "}, {"sha": "6ebaed6f715e11ea48188f3c58bfb5fb37c2e4a2", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr81532.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr81532.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr81532.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr81532.c?ref=774cccdc1a36493ae6925148c08dfbdcb2789e0c", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/81532 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -mno-avx512dq\" } */\n+\n+#include \"avx512dq-pr81532.c\""}, {"sha": "39632a2c482287cb5426683824220e1b11e4448c", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-pr81532.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr81532.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr81532.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr81532.c?ref=774cccdc1a36493ae6925148c08dfbdcb2789e0c", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/81532 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -mavx512dq -mavx512vl -mno-avx512bw\" } */\n+\n+typedef unsigned __int128 V __attribute__ ((vector_size (64)));\n+\n+V\n+foo (V c)\n+{\n+  c >>= 0 != c;\n+  return c;\n+}"}, {"sha": "6d5b8bb6b69d35fdad5dce61404e47bd54ff1c0f", "filename": "gcc/testsuite/gcc.target/i386/pr80833-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80833-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774cccdc1a36493ae6925148c08dfbdcb2789e0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80833-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80833-3.c?ref=774cccdc1a36493ae6925148c08dfbdcb2789e0c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -mavx512dq -mavx512vl -mno-avx512bw -mtune=intel\" } */\n+\n+__int128 test (__int128 a)\n+{\n+  asm (\"\" : \"+v\" (a) : : \"xmm0\", \"xmm1\", \"xmm2\", \"xmm3\",\n+\t\t\t \"xmm4\", \"xmm5\", \"xmm6\", \"xmm7\",\n+\t\t\t \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\",\n+\t\t\t \"xmm12\", \"xmm13\", \"xmm14\", \"xmm15\");\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"pinsrq\" } } */\n+/* { dg-final { scan-assembler \"pextrq\" } } */"}]}