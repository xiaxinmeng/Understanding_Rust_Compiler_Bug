{"sha": "4bfcf87914b412f8fa56cd46f7c3081365b7e647", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJmY2Y4NzkxNGI0MTJmOGZhNTZjZDQ2ZjdjMzA4MTM2NWI3ZTY0Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-26T11:52:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-26T11:52:10Z"}, "message": "tree-vect-slp.c (vect_mark_slp_stmts): Add visited hash_set and wrapper.\n\n2018-10-26  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_mark_slp_stmts): Add visited hash_set\n\tand wrapper.\n\t(vect_mark_slp_stmts_relevant): Likewise.\n\t(vect_detect_hybrid_slp_stmts): Likewise.\n\t(vect_bb_slp_scalar_cost): Likewise.\n\t(vect_remove_slp_scalar_calls): Likewise.\n\nFrom-SVN: r265528", "tree": {"sha": "7415c5e11ef87d6428ef4a8d81b9f2225ca83d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7415c5e11ef87d6428ef4a8d81b9f2225ca83d8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bfcf87914b412f8fa56cd46f7c3081365b7e647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bfcf87914b412f8fa56cd46f7c3081365b7e647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bfcf87914b412f8fa56cd46f7c3081365b7e647", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bfcf87914b412f8fa56cd46f7c3081365b7e647/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d2027241f22a2af2ce5e5455388044a912f7449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2027241f22a2af2ce5e5455388044a912f7449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d2027241f22a2af2ce5e5455388044a912f7449"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "5307ec7353125ada4b7dc586cc43bcf7fd8aa954", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfcf87914b412f8fa56cd46f7c3081365b7e647/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfcf87914b412f8fa56cd46f7c3081365b7e647/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bfcf87914b412f8fa56cd46f7c3081365b7e647", "patch": "@@ -1,3 +1,12 @@\n+2018-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_mark_slp_stmts): Add visited hash_set\n+\tand wrapper.\n+\t(vect_mark_slp_stmts_relevant): Likewise.\n+\t(vect_detect_hybrid_slp_stmts): Likewise.\n+\t(vect_bb_slp_scalar_cost): Likewise.\n+\t(vect_remove_slp_scalar_calls): Likewise.\n+\n 2018-10-26  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-devirt.c (odr_subtypes_equivalent_p): Fix recursion."}, {"sha": "5b925be80f4d1f013622030ebc83caae5921c8ae", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfcf87914b412f8fa56cd46f7c3081365b7e647/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfcf87914b412f8fa56cd46f7c3081365b7e647/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=4bfcf87914b412f8fa56cd46f7c3081365b7e647", "patch": "@@ -1483,7 +1483,8 @@ vect_print_slp_tree (dump_flags_t dump_kind, dump_location_t loc,\n    stmts in NODE are to be marked.  */\n \n static void\n-vect_mark_slp_stmts (slp_tree node, enum slp_vect_type mark, int j)\n+vect_mark_slp_stmts (slp_tree node, enum slp_vect_type mark, int j,\n+\t\t     hash_set<slp_tree> &visited)\n {\n   int i;\n   stmt_vec_info stmt_info;\n@@ -1492,19 +1493,28 @@ vect_mark_slp_stmts (slp_tree node, enum slp_vect_type mark, int j)\n   if (SLP_TREE_DEF_TYPE (node) != vect_internal_def)\n     return;\n \n+  if (visited.add (node))\n+    return;\n+\n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n     if (j < 0 || i == j)\n       STMT_SLP_TYPE (stmt_info) = mark;\n \n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n-    vect_mark_slp_stmts (child, mark, j);\n+    vect_mark_slp_stmts (child, mark, j, visited);\n }\n \n+static void\n+vect_mark_slp_stmts (slp_tree node, enum slp_vect_type mark, int j)\n+{\n+  hash_set<slp_tree> visited;\n+  vect_mark_slp_stmts (node, mark, j, visited);\n+}\n \n /* Mark the statements of the tree rooted at NODE as relevant (vect_used).  */\n \n static void\n-vect_mark_slp_stmts_relevant (slp_tree node)\n+vect_mark_slp_stmts_relevant (slp_tree node, hash_set<slp_tree> &visited)\n {\n   int i;\n   stmt_vec_info stmt_info;\n@@ -1513,6 +1523,9 @@ vect_mark_slp_stmts_relevant (slp_tree node)\n   if (SLP_TREE_DEF_TYPE (node) != vect_internal_def)\n     return;\n \n+  if (visited.add (node))\n+    return;\n+\n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n     {\n       gcc_assert (!STMT_VINFO_RELEVANT (stmt_info)\n@@ -1521,7 +1534,14 @@ vect_mark_slp_stmts_relevant (slp_tree node)\n     }\n \n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n-    vect_mark_slp_stmts_relevant (child);\n+    vect_mark_slp_stmts_relevant (child, visited);\n+}\n+\n+static void\n+vect_mark_slp_stmts_relevant (slp_tree node)\n+{\n+  hash_set<slp_tree> visited;\n+  vect_mark_slp_stmts_relevant (node, visited);\n }\n \n \n@@ -2200,7 +2220,8 @@ vect_make_slp_decision (loop_vec_info loop_vinfo)\n    can't be SLPed) in the tree rooted at NODE.  Mark such stmts as HYBRID.  */\n \n static void\n-vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype)\n+vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype,\n+\t\t\t      hash_set<slp_tree> &visited)\n {\n   stmt_vec_info stmt_vinfo = SLP_TREE_SCALAR_STMTS (node)[i];\n   imm_use_iterator imm_iter;\n@@ -2210,6 +2231,9 @@ vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype)\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n   int j;\n \n+  if (visited.add (node))\n+    return;\n+\n   /* Propagate hybrid down the SLP tree.  */\n   if (stype == hybrid)\n     ;\n@@ -2259,7 +2283,14 @@ vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype)\n \n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n     if (SLP_TREE_DEF_TYPE (child) != vect_external_def)\n-      vect_detect_hybrid_slp_stmts (child, i, stype);\n+      vect_detect_hybrid_slp_stmts (child, i, stype, visited);\n+}\n+\n+static void\n+vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype)\n+{\n+  hash_set<slp_tree> visited;\n+  vect_detect_hybrid_slp_stmts (node, i, stype, visited);\n }\n \n /* Helpers for vect_detect_hybrid_slp walking pattern stmt uses.  */\n@@ -2571,12 +2602,16 @@ vect_slp_analyze_operations (vec_info *vinfo)\n static void \n vect_bb_slp_scalar_cost (basic_block bb,\n \t\t\t slp_tree node, vec<bool, va_heap> *life,\n-\t\t\t stmt_vector_for_cost *cost_vec)\n+\t\t\t stmt_vector_for_cost *cost_vec,\n+\t\t\t hash_set<slp_tree> &visited)\n {\n   unsigned i;\n   stmt_vec_info stmt_info;\n   slp_tree child;\n \n+  if (visited.add (node))\n+    return; \n+\n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n     {\n       gimple *stmt = stmt_info->stmt;\n@@ -2636,12 +2671,22 @@ vect_bb_slp_scalar_cost (basic_block bb,\n \t  /* Do not directly pass LIFE to the recursive call, copy it to\n \t     confine changes in the callee to the current child/subtree.  */\n \t  subtree_life.safe_splice (*life);\n-\t  vect_bb_slp_scalar_cost (bb, child, &subtree_life, cost_vec);\n+\t  vect_bb_slp_scalar_cost (bb, child, &subtree_life, cost_vec,\n+\t\t\t\t   visited);\n \t  subtree_life.truncate (0);\n \t}\n     }\n }\n \n+static void \n+vect_bb_slp_scalar_cost (basic_block bb,\n+\t\t\t slp_tree node, vec<bool, va_heap> *life,\n+\t\t\t stmt_vector_for_cost *cost_vec)\n+{\n+  hash_set<slp_tree> visited;\n+  vect_bb_slp_scalar_cost (bb, node, life, cost_vec, visited);\n+}\n+\n /* Check if vectorization of the basic block is profitable.  */\n \n static bool\n@@ -3930,7 +3975,7 @@ vect_schedule_slp_instance (slp_tree node, slp_instance instance,\n    SLP instances may refer to the same scalar stmt.  */\n \n static void\n-vect_remove_slp_scalar_calls (slp_tree node)\n+vect_remove_slp_scalar_calls (slp_tree node, hash_set<slp_tree> &visited)\n {\n   gimple *new_stmt;\n   gimple_stmt_iterator gsi;\n@@ -3942,8 +3987,11 @@ vect_remove_slp_scalar_calls (slp_tree node)\n   if (SLP_TREE_DEF_TYPE (node) != vect_internal_def)\n     return;\n \n+  if (visited.add (node))\n+    return;\n+\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n-    vect_remove_slp_scalar_calls (child);\n+    vect_remove_slp_scalar_calls (child, visited);\n \n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n     {\n@@ -3961,6 +4009,13 @@ vect_remove_slp_scalar_calls (slp_tree node)\n     }\n }\n \n+static void\n+vect_remove_slp_scalar_calls (slp_tree node)\n+{\n+  hash_set<slp_tree> visited;\n+  vect_remove_slp_scalar_calls (node, visited);\n+}\n+\n /* Generate vector code for all SLP instances in the loop/basic block.  */\n \n void"}]}