{"sha": "a53c56136d37b424f4f6b89e903763b82c33cfb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzYzU2MTM2ZDM3YjQyNGY0ZjZiODllOTAzNzYzYjgyYzMzY2ZiOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:59:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:59:09Z"}, "message": "[multiple changes]\n\n2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): Handle properly\n\tthe generation of discriminant checks when the left-hand side\n\thas a type with hidden discriminants.\n\t* sem_ch3.ads (Is_Visible_Component): Add defaulted parameter to\n\tspecify the node on which component visibility is being checked.\n\t* sem_ch3.adb (Is_Visible_Component): Use new parameter to\n\tdetermine whether the reference comes from a type conversion to\n\ta full view of a private type with unknown discriminants.\n\t* sem_ch4.adb (Analyze_Selected_Component): Call\n\tIs_Visible_Component with added parameter.\n\n2012-12-05  Arnaud Charlet  <charlet@adacore.com>\n\n\t* make.adb: Minor comment update.\n\n2012-12-05  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnatlink.adb: Also use -x adascil in CodePeer mode when\n\tcalling gcc.\n\t* exp_ch5.adb: Minor reformatting.\n\n2012-12-05  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch4.adb: Minor comment.\n\n2012-12-05  Bob Duff  <duff@adacore.com>\n\n\t* par-ch4.adb: Set Paren_Count correctly for a parenthesized expression\n\tcontaining a conditional expression or quantified expression.\n\t* sprint.adb: Update comment.\n\n2012-12-05  Bob Duff  <duff@adacore.com>\n\n\t* style.adb, scans.ads, styleg.adb: Update comments.\n\n2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Find_Selected_Component): Handle properly an\n\texpanded name whose prefix is the expanded name of an enclosing\n\tentry,\tthat is to say a construct such as T.E.X, where T is an\n\tenclosing concurrent type and E is an enclosing entry.\n\nFrom-SVN: r194204", "tree": {"sha": "4c0fa6b38c44a576559169d8ac21ad008797f8bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c0fa6b38c44a576559169d8ac21ad008797f8bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a53c56136d37b424f4f6b89e903763b82c33cfb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53c56136d37b424f4f6b89e903763b82c33cfb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53c56136d37b424f4f6b89e903763b82c33cfb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53c56136d37b424f4f6b89e903763b82c33cfb9/comments", "author": null, "committer": null, "parents": [{"sha": "5e29ae8259c54bdc25e82b3e71c956cde0a49a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e29ae8259c54bdc25e82b3e71c956cde0a49a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e29ae8259c54bdc25e82b3e71c956cde0a49a99"}], "stats": {"total": 164, "additions": 128, "deletions": 36}, "files": [{"sha": "8f486e4d7d95c5e2fc01a1dcaf95d84ee09ac4cc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -1,3 +1,47 @@\n+2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Handle properly\n+\tthe generation of discriminant checks when the left-hand side\n+\thas a type with hidden discriminants.\n+\t* sem_ch3.ads (Is_Visible_Component): Add defaulted parameter to\n+\tspecify the node on which component visibility is being checked.\n+\t* sem_ch3.adb (Is_Visible_Component): Use new parameter to\n+\tdetermine whether the reference comes from a type conversion to\n+\ta full view of a private type with unknown discriminants.\n+\t* sem_ch4.adb (Analyze_Selected_Component): Call\n+\tIs_Visible_Component with added parameter.\n+\n+2012-12-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* make.adb: Minor comment update.\n+\n+2012-12-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnatlink.adb: Also use -x adascil in CodePeer mode when\n+\tcalling gcc.\n+\t* exp_ch5.adb: Minor reformatting.\n+\n+2012-12-05  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch4.adb: Minor comment.\n+\n+2012-12-05  Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch4.adb: Set Paren_Count correctly for a parenthesized expression\n+\tcontaining a conditional expression or quantified expression.\n+\t* sprint.adb: Update comment.\n+\n+2012-12-05  Bob Duff  <duff@adacore.com>\n+\n+\t* style.adb, scans.ads, styleg.adb: Update comments.\n+\n+2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Selected_Component): Handle properly an\n+\texpanded name whose prefix is the expanded name of an enclosing\n+\tentry,\tthat is to say a construct such as T.E.X, where T is an\n+\tenclosing concurrent type and E is an enclosing entry.\n+\n 2012-12-05  Robert Dewar  <dewar@adacore.com>\n \n \t* lib-writ.adb (Write_ALI): Output T lines."}, {"sha": "07e7ab8b4b8956e5797f0923cbfc695b4fcf1182", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -5207,6 +5207,8 @@ package body Exp_Ch4 is\n       New_If  : Node_Id;\n       New_N   : Node_Id;\n \n+   --  Start of processing for Expand_N_If_Expression\n+\n    begin\n       --  Check for MINIMIZED/ELIMINATED overflow mode\n "}, {"sha": "74acb3493a09318267b1a73d54b11cea1ddec986", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -2117,10 +2117,12 @@ package body Exp_Ch5 is\n       end if;\n \n       --  Apply discriminant check if required. If Lhs is an access type to a\n-      --  designated type with discriminants, we must always check.\n-\n-      if Has_Discriminants (Etype (Lhs)) then\n+      --  designated type with discriminants, we must always check. If the\n+      --  type has unknown discriminants, more elaborate processing below.\n \n+      if Has_Discriminants (Etype (Lhs))\n+        and then not Has_Unknown_Discriminants (Etype (Lhs))\n+      then\n          --  Skip discriminant check if change of representation. Will be\n          --  done when the change of representation is expanded out.\n "}, {"sha": "f83a03ed284d323ba755351c0d6c3747d82d89da", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -1649,7 +1649,7 @@ begin\n    --             because bindgen uses brackets encoding for all upper\n    --             half and wide characters in identifier names.\n \n-   --  In addition, in CodePeer mode compile with -gnatcC\n+   --  In addition, in CodePeer mode compile with -x adascil -gnatcC\n \n    Binder_Options_From_ALI.Increment_Last;\n    Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n@@ -1664,7 +1664,13 @@ begin\n    if Opt.CodePeer_Mode then\n       Binder_Options_From_ALI.Increment_Last;\n       Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n-           new String'(\"-gnatcC\");\n+        new String'(\"-x\");\n+      Binder_Options_From_ALI.Increment_Last;\n+      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n+        new String'(\"adascil\");\n+      Binder_Options_From_ALI.Increment_Last;\n+      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n+        new String'(\"-gnatcC\");\n    end if;\n \n    --  Locate all the necessary programs and verify required files are present"}, {"sha": "97d4278c32be08b54aa3c465f102273bd5bbfa45", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -7841,12 +7841,8 @@ package body Make is\n             Operating_Mode           := Check_Semantics;\n             Check_Object_Consistency := False;\n \n-            --  Except in CodePeer mode, where we do want to call bind/link\n-            --  in CodePeer mode (-P switch).\n-\n-            --  This is testing for -gnatcC, what is that??? Also why do we\n-            --  want to call bind/link in the codepeer case with -gnatc\n-            --  specified, seems odd.\n+            --  Except in CodePeer mode (set by -gnatcC), where we do want to\n+            --  call bind/link in CodePeer mode (-P switch).\n \n             if Argv'Last >= 7 and then Argv (7) = 'C' then\n                CodePeer_Mode := True;"}, {"sha": "019d5fbc99636d892b9b66ca3abd512daadcf105", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -1233,25 +1233,32 @@ package body Ch4 is\n       Lparen_Sloc := Token_Ptr;\n       T_Left_Paren;\n \n+      --  Note on parentheses count. For cases like an if expression, the\n+      --  parens here really count as real parentheses for the paren count,\n+      --  so we adjust the paren count accordingly after scanning the expr.\n+\n       --  If expression\n \n       if Token = Tok_If then\n          Expr_Node := P_If_Expression;\n          T_Right_Paren;\n+         Set_Paren_Count (Expr_Node, Paren_Count (Expr_Node) + 1);\n          return Expr_Node;\n \n       --  Case expression\n \n       elsif Token = Tok_Case then\n          Expr_Node := P_Case_Expression;\n          T_Right_Paren;\n+         Set_Paren_Count (Expr_Node, Paren_Count (Expr_Node) + 1);\n          return Expr_Node;\n \n       --  Quantified expression\n \n       elsif Token = Tok_For then\n          Expr_Node := P_Quantified_Expression;\n          T_Right_Paren;\n+         Set_Paren_Count (Expr_Node, Paren_Count (Expr_Node) + 1);\n          return Expr_Node;\n \n       --  Note: the mechanism used here of rescanning the initial expression"}, {"sha": "c0e589d6a31b9113e35da03cdf1a3675f8f26a4c", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -201,7 +201,7 @@ package Scans is\n       --  This entry is used when scanning project files (where it represents\n       --  an entire comment), and in preprocessing with the -C switch set\n       --  (where it represents just the \"--\" of a comment). For the project\n-      --  file case, the text of the comment is stored in\n+      --  file case, the text of the comment is stored in Comment_Id.\n \n       Tok_End_Of_Line,\n       --  Represents an end of line. Not used during normal compilation scans"}, {"sha": "ea4e4e93ce4020b3167bc8ca2a2704104fe8661b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -16316,7 +16316,10 @@ package body Sem_Ch3 is\n    -- Is_Visible_Component --\n    --------------------------\n \n-   function Is_Visible_Component (C : Entity_Id) return Boolean is\n+   function Is_Visible_Component\n+     (C : Entity_Id;\n+      N : Node_Id := Empty) return Boolean\n+   is\n       Original_Comp  : Entity_Id := Empty;\n       Original_Scope : Entity_Id;\n       Type_Scope     : Entity_Id;\n@@ -16376,10 +16379,17 @@ package body Sem_Ch3 is\n       elsif not Comes_From_Source (Original_Comp) then\n          return True;\n \n-      --  Discriminants are always visible\n+      --  Discriminants are visible unless the (private) type has unknown\n+      --  discriminants. If the discriminant reference is inserted for a\n+      --  discriminant check on a full view it is also visible.\n \n       elsif Ekind (Original_Comp) = E_Discriminant\n-        and then not Has_Unknown_Discriminants (Original_Scope)\n+        and then\n+          (not Has_Unknown_Discriminants (Original_Scope)\n+            or else (Present (N)\n+                      and then Nkind (N) = N_Selected_Component\n+                      and then Nkind (Prefix (N)) = N_Type_Conversion\n+                      and then not Comes_From_Source (Prefix (N))))\n       then\n          return True;\n "}, {"sha": "98a8dbc8ce3894f14882162e2a1b1e645f2c0ee1", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -185,12 +185,18 @@ package Sem_Ch3 is\n    --  is a null extension, meaning that it has an extension part without any\n    --  components and does not have a known discriminant part.\n \n-   function Is_Visible_Component (C : Entity_Id) return Boolean;\n+   function Is_Visible_Component\n+     (C : Entity_Id;\n+      N : Node_Id := Empty) return Boolean;\n    --  Determines if a record component C is visible in the present context.\n    --  Note that even though component C could appear in the entity chain\n    --  of a record type, C may not be visible in the current context. For\n    --  instance, C may be a component inherited in the full view of a private\n    --  extension which is not visible in the current context.\n+   --\n+   --  If present, N is the selected component of which C is the selector. If\n+   --  the prefix of N is a type conversion inserted for a discriminant check,\n+   --  C is automatically visible.\n \n    procedure Make_Index\n      (I            : Node_Id;"}, {"sha": "12d25c996086bfca37de8019b7d2b1f0678ba642", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -3938,7 +3938,7 @@ package body Sem_Ch4 is\n \n          while Present (Comp) and then not Is_Prefixed_Call (N) loop\n             if Chars (Comp) = Chars (Sel)\n-              and then Is_Visible_Component (Comp)\n+              and then Is_Visible_Component (Comp, N)\n             then\n                Set_Entity_With_Style_Check (Sel, Comp);\n                Set_Etype (Sel, Etype (Comp));"}, {"sha": "ae12e46681137b7071391c3c2292dbe9178f640a", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -5426,11 +5426,21 @@ package body Sem_Ch8 is\n                       and then\n                         Nkind (Parent (Parent (N))) /= N_Attribute_Reference))\n       then\n-         --  It is an entry call after all, either to the current task (which\n-         --  will deadlock) or to an enclosing task.\n+         --  If both the task type and the entry are in scope, this may still\n+         --  be the expanded name of an entry formal.\n \n-         Analyze_Selected_Component (N);\n-         return;\n+         if In_Open_Scopes (Id)\n+           and then Nkind (Parent (N)) = N_Selected_Component\n+         then\n+            null;\n+\n+         else\n+            --  It is an entry call after all, either to the current task\n+            --  (which will deadlock) or to an enclosing task.\n+\n+            Analyze_Selected_Component (N);\n+            return;\n+         end if;\n       end if;\n \n       Change_Selected_Component_To_Expanded_Name (N);"}, {"sha": "e80708e67b05253d2451471c992372098ed90300", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -1162,6 +1162,10 @@ package body Sprint is\n                Alt : Node_Id;\n \n             begin\n+               --  The syntax for case_expression does not include parentheses,\n+               --  but sometimes parentheses are required, so unconditionally\n+               --  generate them here.\n+\n                Write_Str_With_Col_Check_Sloc (\"(case \");\n                Sprint_Node (Expression (Node));\n                Write_Str_With_Col_Check (\" is\");\n@@ -1963,6 +1967,10 @@ package body Sprint is\n                Then_Expr : constant Node_Id := Next (Condition);\n \n             begin\n+               --  The syntax for if_expression does not include parentheses,\n+               --  but sometimes parentheses are required, so unconditionally\n+               --  generate them here.\n+\n                Write_Str_With_Col_Check_Sloc (\"(if \");\n                Sprint_Node (Condition);\n                Write_Str_With_Col_Check (\" then \");"}, {"sha": "fd8665909a20fa1302ff858b37993fb6966c4578", "filename": "gcc/ada/style.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fstyle.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fstyle.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyle.adb?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -41,8 +41,8 @@ package body Style is\n    -----------------------\n \n    --  If the check specs mode (-gnatys) is set, then all subprograms must\n-   --  have specs unless they are parameterless procedures that are not child\n-   --  units at the library level (i.e. they are possible main programs).\n+   --  have specs unless they are parameterless procedures at the library\n+   --  level (i.e. they are possible main programs).\n \n    procedure Body_With_No_Spec (N : Node_Id) is\n    begin"}, {"sha": "b24c1c0739fd3588eb2363df01ce78fa13f7af4e", "filename": "gcc/ada/styleg.adb", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fstyleg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c56136d37b424f4f6b89e903763b82c33cfb9/gcc%2Fada%2Fstyleg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.adb?ref=a53c56136d37b424f4f6b89e903763b82c33cfb9", "patch": "@@ -81,7 +81,8 @@ package body Styleg is\n \n    function Is_White_Space (C : Character) return Boolean;\n    pragma Inline (Is_White_Space);\n-   --  Returns True for space, HT, VT or FF, False otherwise\n+   --  Returns True for space or HT, False otherwise\n+   --  What about VT and FF, should they return True ???\n \n    procedure Require_Following_Space;\n    pragma Inline (Require_Following_Space);\n@@ -97,12 +98,12 @@ package body Styleg is\n    -- Check_Abs_Or_Not --\n    ----------------------\n \n-   --  In check tokens mode (-gnatyt), ABS/NOT must be followed by a space\n+   --  In check token mode (-gnatyt), ABS/NOT must be followed by a space\n \n    procedure Check_Abs_Not is\n    begin\n       if Style_Check_Tokens then\n-         if Source (Scan_Ptr) > ' ' then\n+         if Source (Scan_Ptr) > ' ' then -- ???\n             Error_Space_Required (Scan_Ptr);\n          end if;\n       end if;\n@@ -112,7 +113,7 @@ package body Styleg is\n    -- Check_Apostrophe --\n    ----------------------\n \n-   --  Do not allow space before or after apostrophe\n+   --  Do not allow space before or after apostrophe -- OR AFTER???\n \n    procedure Check_Apostrophe is\n    begin\n@@ -546,7 +547,7 @@ package body Styleg is\n    -- Check_Dot_Dot --\n    -------------------\n \n-   --  In check token mode (-gnatyt), colon must be surrounded by spaces\n+   --  In check token mode (-gnatyt), \"..\" must be surrounded by spaces\n \n    procedure Check_Dot_Dot is\n    begin\n@@ -630,9 +631,9 @@ package body Styleg is\n    -- Check_Left_Paren --\n    ----------------------\n \n-   --  In tone check mode (-gnatyt), left paren must not be preceded by an\n-   --  identifier character or digit (a separating space is required) and\n-   --  may never be followed by a space.\n+   --  In check token mode (-gnatyt), left paren must not be preceded by an\n+   --  identifier character or digit (a separating space is required) and may\n+   --  never be followed by a space.\n \n    procedure Check_Left_Paren is\n    begin\n@@ -707,9 +708,9 @@ package body Styleg is\n \n       if Style_Check_DOS_Line_Terminator then\n \n-      --  Ignore EOF, since we only get called with an EOF if it is the last\n-      --  character in the buffer (and was therefore not in the source file),\n-      --  since the terminating EOF is added to stop the scan.\n+         --  Ignore EOF, since we only get called with an EOF if it is the last\n+         --  character in the buffer (and was therefore not in the source\n+         --  file), since the terminating EOF is added to stop the scan.\n \n          if Source (Scan_Ptr) = EOF then\n             null;\n@@ -846,7 +847,7 @@ package body Styleg is\n    -- Check_Right_Paren --\n    -----------------------\n \n-   --  In check tokens mode (-gnatyt), right paren must not be immediately\n+   --  In check token mode (-gnatyt), right paren must not be immediately\n    --  followed by an identifier character, and must never be preceded by\n    --  a space unless it is the initial non-blank character on the line.\n \n@@ -865,7 +866,7 @@ package body Styleg is\n    -- Check_Semicolon --\n    ---------------------\n \n-   --  In check tokens mode (-gnatyt), semicolon does not permit a preceding\n+   --  In check token mode (-gnatyt), semicolon does not permit a preceding\n    --  space and a following space is required.\n \n    procedure Check_Semicolon is"}]}