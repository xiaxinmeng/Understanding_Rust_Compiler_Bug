{"sha": "9a3277660593535784174ac188b09a151ca9aaee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEzMjc3NjYwNTkzNTM1Nzg0MTc0YWMxODhiMDlhMTUxY2E5YWFlZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-03T11:57:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-03T11:57:15Z"}, "message": "tree-ssa-sccvn.c (visit_reference_op_store): Do not insert struct copies into the expression table.\n\n2008-03-03  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (visit_reference_op_store): Do not insert\n\tstruct copies into the expression table.\n\t(simplify_unary_expression): Handle VIEW_CONVERT_EXPR.\n\t(try_to_simplify): Likewise.\n\t* fold-const.c (fold_unary): Fold VIEW_CONVERT_EXPR of\n\tintegral and pointer arguments which do not change the\n\tprecision to NOP_EXPRs.\n\t* tree-ssa-loop-ivopts.c (may_be_nonaddressable_p): Adjust\n\tVIEW_CONVERT_EXPR case.\n\nFrom-SVN: r132836", "tree": {"sha": "ce54fd8c85046ba566eb8d22fa71e375248c6f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce54fd8c85046ba566eb8d22fa71e375248c6f70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a3277660593535784174ac188b09a151ca9aaee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3277660593535784174ac188b09a151ca9aaee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a3277660593535784174ac188b09a151ca9aaee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3277660593535784174ac188b09a151ca9aaee/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a732743bdccfe0eac5e67d90ef5ee5fe70dfe35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a732743bdccfe0eac5e67d90ef5ee5fe70dfe35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a732743bdccfe0eac5e67d90ef5ee5fe70dfe35"}], "stats": {"total": 55, "additions": 44, "deletions": 11}, "files": [{"sha": "d35d6ed60e1c200a43f0a6cef9fa011569339d4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3277660593535784174ac188b09a151ca9aaee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3277660593535784174ac188b09a151ca9aaee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a3277660593535784174ac188b09a151ca9aaee", "patch": "@@ -1,3 +1,15 @@\n+2008-03-03  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (visit_reference_op_store): Do not insert\n+\tstruct copies into the expression table.\n+\t(simplify_unary_expression): Handle VIEW_CONVERT_EXPR.\n+\t(try_to_simplify): Likewise.\n+\t* fold-const.c (fold_unary): Fold VIEW_CONVERT_EXPR of\n+\tintegral and pointer arguments which do not change the\n+\tprecision to NOP_EXPRs.\n+\t* tree-ssa-loop-ivopts.c (may_be_nonaddressable_p): Adjust\n+\tVIEW_CONVERT_EXPR case.\n+\n 2008-03-02  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-scalar-evolution.c (instantiate_parameters_1): An SSA_NAME"}, {"sha": "6a70e179aa2223bb62e3d4195b16cd24925429bd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3277660593535784174ac188b09a151ca9aaee/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3277660593535784174ac188b09a151ca9aaee/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9a3277660593535784174ac188b09a151ca9aaee", "patch": "@@ -8277,13 +8277,28 @@ fold_unary (enum tree_code code, tree type, tree op0)\n     case VIEW_CONVERT_EXPR:\n       if (TREE_TYPE (op0) == type)\n \treturn op0;\n-      if (TREE_CODE (op0) == VIEW_CONVERT_EXPR\n-\t  || (TREE_CODE (op0) == NOP_EXPR\n-\t      && INTEGRAL_TYPE_P (TREE_TYPE (op0))\n-\t      && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (op0, 0)))\n-\t      && TYPE_PRECISION (TREE_TYPE (op0))\n-\t\t == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op0, 0)))))\n+      if (TREE_CODE (op0) == VIEW_CONVERT_EXPR)\n \treturn fold_build1 (VIEW_CONVERT_EXPR, type, TREE_OPERAND (op0, 0));\n+\n+      /* For integral conversions with the same precision or pointer\n+\t conversions use a NOP_EXPR instead.  */\n+      if ((INTEGRAL_TYPE_P (type) && INTEGRAL_TYPE_P (TREE_TYPE (op0))\n+\t   && TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (op0))\n+\t   /* Do not muck with VIEW_CONVERT_EXPRs that convert from\n+\t      a sub-type to its base type as generated by the Ada FE.  */\n+\t   && !TREE_TYPE (TREE_TYPE (op0)))\n+\t  || (POINTER_TYPE_P (type) && POINTER_TYPE_P (TREE_TYPE (op0))))\n+\treturn fold_convert (type, op0);\n+\n+      /* Strip inner integral conversions that do not change the precision.  */\n+      if ((TREE_CODE (op0) == NOP_EXPR\n+\t   || TREE_CODE (op0) == CONVERT_EXPR)\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (op0))\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (op0, 0)))\n+\t  && (TYPE_PRECISION (TREE_TYPE (op0))\n+\t      == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op0, 0)))))\n+\treturn fold_build1 (VIEW_CONVERT_EXPR, type, TREE_OPERAND (op0, 0));\n+\n       return fold_view_convert_expr (type, op0);\n \n     case NEGATE_EXPR:"}, {"sha": "02fe707fb3fd8c762c914de2cbb049842dcc4904", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3277660593535784174ac188b09a151ca9aaee/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3277660593535784174ac188b09a151ca9aaee/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=9a3277660593535784174ac188b09a151ca9aaee", "patch": "@@ -1525,8 +1525,8 @@ may_be_nonaddressable_p (tree expr)\n \t and make them look addressable.  After some processing the\n \t non-addressability may be uncovered again, causing ADDR_EXPRs\n \t of inappropriate objects to be built.  */\n-      if (AGGREGATE_TYPE_P (TREE_TYPE (expr))\n-\t  && !AGGREGATE_TYPE_P (TREE_TYPE (TREE_OPERAND (expr, 0))))\n+      if (is_gimple_reg (TREE_OPERAND (expr, 0))\n+\t  || is_gimple_min_invariant (TREE_OPERAND (expr, 0)))\n \treturn true;\n \n       /* ... fall through ... */"}, {"sha": "ce4a401fe2b3d97f9119162d3d4ce823b5229ba3", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3277660593535784174ac188b09a151ca9aaee/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3277660593535784174ac188b09a151ca9aaee/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=9a3277660593535784174ac188b09a151ca9aaee", "patch": "@@ -1259,7 +1259,10 @@ visit_reference_op_store (tree lhs, tree op, tree stmt)\n \t  changed |= set_ssa_val_to (vdef, vdef);\n \t}\n \n-      vn_reference_insert (lhs, op, vdefs);\n+      /* Do not insert structure copies into the tables.  */\n+      if (is_gimple_min_invariant (op)\n+\t  || is_gimple_reg (op))\n+        vn_reference_insert (lhs, op, vdefs);\n     }\n   else\n     {\n@@ -1497,13 +1500,15 @@ simplify_unary_expression (tree rhs)\n   else if (TREE_CODE (rhs) == NOP_EXPR\n \t   || TREE_CODE (rhs) == CONVERT_EXPR\n \t   || TREE_CODE (rhs) == REALPART_EXPR\n-\t   || TREE_CODE (rhs) == IMAGPART_EXPR)\n+\t   || TREE_CODE (rhs) == IMAGPART_EXPR\n+\t   || TREE_CODE (rhs) == VIEW_CONVERT_EXPR)\n     {\n       /* We want to do tree-combining on conversion-like expressions.\n          Make sure we feed only SSA_NAMEs or constants to fold though.  */\n       tree tem = valueize_expr (VN_INFO (op0)->expr);\n       if (UNARY_CLASS_P (tem)\n \t  || BINARY_CLASS_P (tem)\n+\t  || TREE_CODE (tem) == VIEW_CONVERT_EXPR\n \t  || TREE_CODE (tem) == SSA_NAME\n \t  || is_gimple_min_invariant (tem))\n \top0 = tem;\n@@ -1555,7 +1560,8 @@ try_to_simplify (tree stmt, tree rhs)\n \n \t  /* Fallthrough for some codes that can operate on registers.  */\n \t  if (!(TREE_CODE (rhs) == REALPART_EXPR\n-\t        || TREE_CODE (rhs) == IMAGPART_EXPR))\n+\t        || TREE_CODE (rhs) == IMAGPART_EXPR\n+\t\t|| TREE_CODE (rhs) == VIEW_CONVERT_EXPR))\n \t    break;\n \t  /* We could do a little more with unary ops, if they expand\n \t     into binary ops, but it's debatable whether it is worth it. */"}]}