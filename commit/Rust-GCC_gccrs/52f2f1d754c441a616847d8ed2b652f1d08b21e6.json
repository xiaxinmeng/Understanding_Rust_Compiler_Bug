{"sha": "52f2f1d754c441a616847d8ed2b652f1d08b21e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJmMmYxZDc1NGM0NDFhNjE2ODQ3ZDhlZDJiNjUyZjFkMDhiMjFlNg==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2007-03-27T00:41:27Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-03-27T00:41:27Z"}, "message": "gfc-internals.texi: New file,\n\n* gfc-internals.texi: New file,\n* Make-lang.in: Add rules to convert it to dvi, pdf, and info.\n\nFrom-SVN: r123251", "tree": {"sha": "abea5f20b6b7a1eac0a33ddf79ca5f411208a902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abea5f20b6b7a1eac0a33ddf79ca5f411208a902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52f2f1d754c441a616847d8ed2b652f1d08b21e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f2f1d754c441a616847d8ed2b652f1d08b21e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f2f1d754c441a616847d8ed2b652f1d08b21e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f2f1d754c441a616847d8ed2b652f1d08b21e6/comments", "author": null, "committer": null, "parents": [{"sha": "24bfafbc9d95153f4ad59d6618eae963a83723a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bfafbc9d95153f4ad59d6618eae963a83723a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24bfafbc9d95153f4ad59d6618eae963a83723a0"}], "stats": {"total": 398, "additions": 395, "deletions": 3}, "files": [{"sha": "eb8729e1d3e01a22cc87fe080832ddf5a955d843", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f2f1d754c441a616847d8ed2b652f1d08b21e6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f2f1d754c441a616847d8ed2b652f1d08b21e6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=52f2f1d754c441a616847d8ed2b652f1d08b21e6", "patch": "@@ -1,3 +1,8 @@\n+2007-03-26  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* gfc-internals.texi: New file,\n+\t* Make-lang.in: Add rules to convert it to dvi, pdf, and info.\n+\n 2007-03-26  Brooks Moses  <brooks.moses@codesourcery.com>\n  \n \t* error.c (show_locus): Remove always-false test."}, {"sha": "4c707716b4297899f460f3898535c649e2b2d136", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f2f1d754c441a616847d8ed2b652f1d08b21e6/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f2f1d754c441a616847d8ed2b652f1d08b21e6/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=52f2f1d754c441a616847d8ed2b652f1d08b21e6", "patch": "@@ -121,13 +121,13 @@ fortran.tags: force\n \tcd $(srcdir)/fortran; etags -o TAGS.sub *.c *.h; \\\n \tetags --include TAGS.sub --include ../TAGS.sub\n \n-fortran.info: doc/gfortran.info\n-fortran.dvi: doc/gfortran.dvi\n+fortran.info: doc/gfortran.info doc/gfc-internals.info\n+fortran.dvi: doc/gfortran.dvi doc/gfc-internals.dvi\n fortran.html: $(build_htmldir)/gfortran/index.html\n \n F95_PDFFILES = doc/gfortran.pdf\n \n-fortran.pdf: $(F95_PDFFILES)\n+fortran.pdf: $(F95_PDFFILES) doc/gfc-internals.pdf\n \n fortran.install-pdf: $(F95_PDFFILES)\n \t@$(NORMAL_INSTALL)\n@@ -186,6 +186,26 @@ $(build_htmldir)/gfortran/index.html: $(GFORTRAN_TEXI)\n gfortran.pod: $(GFORTRAN_TEXI)\n \t-$(TEXI2POD) < $(srcdir)/fortran/invoke.texi > $@\n \n+# GFORTRAN internals documentation.\n+GFC_INTERNALS_TEXI = \\\n+  $(srcdir)/fortran/gfc-internals.texi \\\n+  $(srcdir)/doc/include/fdl.texi \\\n+  $(srcdir)/doc/include/gcc-common.texi \\\n+  gcc-vers.texi\n+\n+doc/gfc-internals.info: $(GFC_INTERNALS_TEXI)\n+\tif [ x$(BUILD_INFO) = xinfo ]; then \\\n+\t  rm -f doc/gfc-internals.info-*; \\\n+\t  $(MAKEINFO) -I $(srcdir)/doc/include -I $(srcdir)/fortran \\\n+\t    -o $@ $<; \\\n+\telse true; fi\n+\n+doc/gfc-internals.dvi: $(GFC_INTERNALS_TEXI)\n+\t$(TEXI2DVI) -I $(srcdir)/fortran -I $(abs_docdir)/include -o $@ $<\n+\n+doc/gfc-internals.pdf: $(GFC_INTERNALS_TEXI)\n+\t$(TEXI2PDF) -I $(srcdir)/fortran -I $(abs_docdir)/include -o $@ $<\n+\n # Create or recreate the gfortran private include file directory.\n install-finclude-dir: installdirs\n \t-rm -rf $(DESTDIR)$(libsubdir)/finclude"}, {"sha": "219873186bb662eeb99f78bb281a6c4f3de697fd", "filename": "gcc/fortran/gfc-internals.texi", "status": "added", "additions": 367, "deletions": 0, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f2f1d754c441a616847d8ed2b652f1d08b21e6/gcc%2Ffortran%2Fgfc-internals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f2f1d754c441a616847d8ed2b652f1d08b21e6/gcc%2Ffortran%2Fgfc-internals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfc-internals.texi?ref=52f2f1d754c441a616847d8ed2b652f1d08b21e6", "patch": "@@ -0,0 +1,367 @@\n+\\input texinfo  @c -*-texinfo-*-\n+@c %**start of header\n+@setfilename gfortran.info\n+@set copyrights-gfortran 2007\n+\n+@include gcc-common.texi\n+\n+@settitle GNU Fortran Compiler Internals\n+\n+@c %**end of header\n+\n+@c Use with @@smallbook.\n+\n+@c %** start of document\n+\n+@c Cause even numbered pages to be printed on the left hand side of\n+@c the page and odd numbered pages to be printed on the right hand\n+@c side of the page.  Using this, you can print on both sides of a\n+@c sheet of paper and have the text on the same part of the sheet.\n+\n+@c The text on right hand pages is pushed towards the right hand\n+@c margin and the text on left hand pages is pushed toward the left\n+@c hand margin.\n+@c (To provide the reverse effect, set bindingoffset to -0.75in.)\n+\n+@c @tex\n+@c \\global\\bindingoffset=0.75in\n+@c \\global\\normaloffset =0.75in\n+@c @end tex\n+\n+@copying\n+Copyright @copyright{} @value{copyrights-gfortran} Free Software Foundation, Inc.\n+\n+Permission is granted to copy, distribute and/or modify this document\n+under the terms of the GNU Free Documentation License, Version 1.1 or\n+any later version published by the Free Software Foundation; with the\n+Invariant Sections being ``GNU General Public License'' and ``Funding\n+Free Software'', the Front-Cover\n+texts being (a) (see below), and with the Back-Cover Texts being (b)\n+(see below).  A copy of the license is included in the section entitled\n+``GNU Free Documentation License''.\n+\n+(a) The FSF's Front-Cover Text is:\n+\n+     A GNU Manual\n+\n+(b) The FSF's Back-Cover Text is:\n+\n+     You have freedom to copy and modify this GNU Manual, like GNU\n+     software.  Copies published by the Free Software Foundation raise\n+     funds for GNU development.\n+@end copying\n+\n+@ifinfo\n+@dircategory Software development\n+@direntry\n+* gfortran: (gfortran).                  The GNU Fortran Compiler.\n+@end direntry\n+This file documents the internals of the GNU Fortran\n+compiler, (@command{gfortran}).\n+\n+Published by the Free Software Foundation\n+51 Franklin Street, Fifth Floor\n+Boston, MA 02110-1301 USA\n+\n+@insertcopying\n+@end ifinfo\n+\n+\n+@setchapternewpage odd\n+@titlepage\n+@title GNU Fortran Internals\n+@versionsubtitle\n+@author The @t{gfortran} team\n+@page\n+@vskip 0pt plus 1filll\n+Published by the Free Software Foundation@*\n+51 Franklin Street, Fifth Floor@*\n+Boston, MA 02110-1301, USA@*\n+@c Last printed ??ber, 19??.@*\n+@c Printed copies are available for $? each.@*\n+@c ISBN ???\n+@sp 1\n+@insertcopying\n+@end titlepage\n+\n+@summarycontents\n+@contents\n+\n+@page\n+\n+@c ---------------------------------------------------------------------\n+@c TexInfo table of contents.\n+@c ---------------------------------------------------------------------\n+\n+@ifnottex\n+@node Top\n+@top Introduction\n+@cindex Introduction\n+\n+This manual documents the internals of @command{gfortran}, \n+the GNU Fortran compiler.\n+\n+@ifset DEVELOPMENT\n+@emph{Warning:} This document, and the compiler it describes, are still\n+under development.  While efforts are made to keep it up-to-date, it might\n+not accurately reflect the status of the most recent GNU Fortran compiler.\n+@end ifset\n+\n+@comment\n+@comment  When you add a new menu item, please keep the right hand\n+@comment  aligned to the same column.  Do not use tabs.  This provides\n+@comment  better formatting.\n+@comment\n+@menu\n+* Introduction::           About this manual.\n+* User Interface::         Code that Interacts with the User.\n+* LibGFortran::            The LibGFortran Runtime Library.\n+* GNU Free Documentation License::\n+\t\t           How you can copy and share this manual.\n+* Index::                  Index of this documentation.\n+@end menu\n+@end ifnottex\n+\n+@c ---------------------------------------------------------------------\n+@c Introduction\n+@c ---------------------------------------------------------------------\n+\n+@node Introduction\n+@chapter Introduction\n+\n+@c The following duplicates the text on the TexInfo table of contents.\n+@iftex\n+This manual documents the internals of @command{gfortran}, the GNU Fortran\n+compiler.\n+\n+@ifset DEVELOPMENT\n+@emph{Warning:} This document, and the compiler it describes, are still\n+under development.  While efforts are made to keep it up-to-date, it\n+might not accurately reflect the status of the most recent GNU Fortran\n+compiler.\n+@end ifset\n+@end iftex\n+\n+At present, this manual is very much a work in progress, containing \n+miscellaneous notes about the internals of the compiler.  It is hoped\n+that at some point in the future it will become a reasonably complete\n+guide; in the interim, GNU Fortran developers are strongly encouraged to\n+contribute to it as a way of keeping notes while working on the \n+compiler.\n+\n+\n+@c ---------------------------------------------------------------------\n+@c Code that Interacts with the User\n+@c ---------------------------------------------------------------------\n+\n+@node User Interface\n+@chapter Code that Interacts with the User\n+\n+@menu\n+* Command-Line Options::    Command-Line Options.\n+* Error Handling::          Error Handling.\n+@end menu\n+\n+\n+@c ---------------------------------------------------------------------\n+@c Command-Line Options\n+@c ---------------------------------------------------------------------\n+\n+@node Command-Line Options\n+@section Command-Line Options\n+\n+Command-line options for @command{gfortran} involve four interrelated\n+pieces within the Fortran compiler code.\n+\n+The relevant command-line flag is defined in @file{lang.opt}, according\n+to the documentation in @ref{Options,, Options, gccint, GNU Compiler\n+Collection Internals}.  This is then processed by the overall GCC\n+machinery to create the code that enables @command{gfortran} and\n+@command{gcc} to recognize the option in the command-line arguments and\n+call the relevant handler function.\n+\n+This generated code calls the @code{gfc_handle_option} code in\n+@file{options.c} with an enumerator variable indicating which option is\n+to be processed, and the relevant integer or string values associated\n+with that option flag.  Typically, @code{gfc_handle_option} uses these\n+arguments to set global flags which record the option states.\n+\n+The global flags that record the option states are stored in the\n+@code{gfc_option_t} struct, which is defined in @file{gfortran.h}.\n+Before the options are processed, initial values for these flags are set\n+in @code{gfc_init_option} in @file{options.c}; these become the default\n+values for the options.\n+\n+\n+\n+@c ---------------------------------------------------------------------\n+@c Error Handling\n+@c ---------------------------------------------------------------------\n+\n+@node Error Handling\n+@section Error Handling\n+\n+The GNU Fortran compiler's parser operates by testing each piece of\n+source code against a variety of matchers.  In some cases, if these\n+matchers do not match the source code, they will store an error message\n+in a buffer.  If the parser later finds a matcher that does correctly\n+match the source code, then the buffered error is discarded.  However,\n+if the parser cannot find a match, then the buffered error message is\n+reported to the user.  This enables the compiler to provide more\n+meaningful error messages even in the many cases where (erroneous)\n+Fortran syntax is ambiguous due to things like the absence of reserved\n+keywords.\n+\n+As an example of how this works, consider the following line:\n+@smallexample\n+IF = 3\n+@end smallexample\n+Hypothetically, this may get passed to the matcher for an @code{IF}\n+statement.  Since this could plausibly be an erroneous @code{IF}\n+statement, the matcher will buffer an error message reporting the\n+absence of an expected @samp{(} following an @code{IF}.  Since no\n+matchers reported an error-free match, however, the parser will also try\n+matching this against a variable assignment.  When @code{IF} is a valid\n+variable, this will be parsed as an assignment statement, and the error\n+discarded.  However, when @code{IF} is not a valid variable, this\n+buffered error message will be reported to the user.\n+\n+The error handling code is implemented in @file{error.c}.  Errors are\n+normally entered into the buffer with the @code{gfc_error} function.\n+Warnings go through a similar buffering process, and are entered into\n+the buffer with @code{gfc_warning}.  There is also a special-purpose\n+function, @code{gfc_notify_std}, for things which have an error/warning\n+status that depends on the currently-selected language standard.\n+\n+The @code{gfc_error_check} function checks the buffer for errors,\n+reports the error message to the user if one exists, clears the buffer,\n+and returns a flag to the user indicating whether or not an error\n+existed.  To check the state of the buffer without changing its state or\n+reporting the errors, the @code{gfc_error_flag_test} function can be\n+used.  The @code{gfc_clear_error} function will clear out any errors in\n+the buffer, without reporting them.  The @code{gfc_warning_check} and\n+@code{gfc_clear_warning} functions provide equivalent functionality for\n+the warning buffer.\n+\n+Only one error and one warning can be in the buffers at a time, and\n+buffering another will overwrite the existing one.  In cases where one\n+may wish to work on a smaller piece of source code without disturbing an\n+existing error state, the @code{gfc_push_error}, @code{gfc_pop_error},\n+and @code{gfc_free_error} mechanism exists to implement a stack for the\n+error buffer.\n+\n+For cases where an error or warning should be reported immediately\n+rather than buffered, the @code{gfc_error_now} and\n+@code{gfc_warning_now} functions can be used.  Normally, the compiler\n+will continue attempting to parse the program after an error has\n+occurred, but if this is not appropriate, the @code{gfc_fatal_error}\n+function should be used instead.  For errors that are always the result\n+of a bug somewhere in the compiler, the @code{gfc_internal_error}\n+function should be used.\n+\n+The syntax for the strings used to produce the error/warning message in\n+the various error and warning functions is similar to the @code{printf}\n+syntax, with @samp{%}-escapes to insert variable values.  The details,\n+and the allowable codes, are documented in the @code{error_print}\n+function in @file{error.c}.\n+\n+\n+\n+@c ---------------------------------------------------------------------\n+@c LibGFortran\n+@c ---------------------------------------------------------------------\n+\n+@node LibGFortran\n+@chapter The LibGFortran Runtime Library\n+\n+@menu\n+* Symbol Versioning::    Symbol Versioning.\n+@end menu\n+\n+\n+@c ---------------------------------------------------------------------\n+@c Symbol Versioning\n+@c ---------------------------------------------------------------------\n+\n+@node Symbol Versioning\n+@section Symbol Versioning\n+@comment Based on http://gcc.gnu.org/wiki/SymbolVersioning,\n+@comment as of 2006-11-05, written by Janne Blomqvist.\n+\n+In general, this capability exists only on a few platforms, thus there\n+is a need for configure magic so that it is used only on those targets\n+where it is supported. \n+\n+The central concept in symbol versioning is the so-called map file,\n+which specifies the version node(s) exported symbols are labeled with.\n+Also, the map file is used to hide local symbols. \n+\n+Some relevant references:\n+@itemize @bullet\n+@item\n+@uref{http://www.gnu.org/software/binutils/manual/ld-2.9.1/html_node/ld_25.html,\n+GNU @command{ld} manual}\n+\n+@item\n+@uref{http://people.redhat.com/drepper/symbol-versioning, ELF Symbol\n+Versioning - Ulrich Depper}\n+\n+@item\n+@uref{http://people.redhat.com/drepper/dsohowto.pdf, How to Write Shared\n+Libraries - Ulrich Depper (see Chapter 3)}\n+\n+@end itemize\n+\n+If one adds a new symbol to a library that should be exported, the new\n+symbol should be mentioned in the map file and a new version node\n+defined, e.g. if one adds a new symbols @code{foo} and @code{bar} to\n+libgfortran for the next GCC release, the following should be added to\n+the map file: \n+@smallexample\n+GFORTRAN_1.1 @{\n+    global:\n+        foo;\n+        bar;\n+@} GFORTRAN_1.0;\n+@end smallexample\n+@noindent\n+where @code{GFORTRAN_1.0} is the version node of the current release,\n+and @code{GFORTRAN_1.1} is the version node of the next release where\n+foo and bar are made available. \n+\n+If one wants to change an existing interface, it is possible by using\n+some asm trickery (from the @command{ld} manual referenced above): \n+\n+@smallexample\n+__asm__(\".symver original_foo,foo@@\");\n+__asm__(\".symver old_foo,foo@@VERS_1.1\");\n+__asm__(\".symver old_foo1,foo@@VERS_1.2\");\n+__asm__(\".symver new_foo,foo@@VERS_2.0\");\n+@end smallexample\n+\n+In this example, @code{foo@@} represents the symbol @code{foo} bound to\n+the unspecified base version of the symbol. The source file that\n+contains this example would define 4 C functions: @code{original_foo},\n+@code{old_foo}, @code{old_foo1}, and @code{new_foo}. \n+\n+In this case the map file must contain @code{foo} in @code{VERS_1.1}\n+and @code{VERS_1.2} as well as in @code{VERS_2.0}.\n+\n+\n+@c ---------------------------------------------------------------------\n+@c GNU Free Documentation License\n+@c ---------------------------------------------------------------------\n+\n+@include fdl.texi\n+\n+\n+@c ---------------------------------------------------------------------\n+@c Index\n+@c ---------------------------------------------------------------------\n+\n+@node Index\n+@unnumbered Index\n+\n+@printindex cp\n+\n+@bye"}]}