{"sha": "8980b5a34d2d8953f64fe6ca428dd2fa00969aab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk4MGI1YTM0ZDJkODk1M2Y2NGZlNmNhNDI4ZGQyZmEwMDk2OWFhYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-21T12:11:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-21T12:11:06Z"}, "message": "(integer_all_onesp): Test to size of mode, not TYPE_PRECISION.\n\nFrom-SVN: r9427", "tree": {"sha": "1e2d184b6ccdd5110c1c94370f7d0d0b3fa6220c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e2d184b6ccdd5110c1c94370f7d0d0b3fa6220c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8980b5a34d2d8953f64fe6ca428dd2fa00969aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8980b5a34d2d8953f64fe6ca428dd2fa00969aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8980b5a34d2d8953f64fe6ca428dd2fa00969aab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8980b5a34d2d8953f64fe6ca428dd2fa00969aab/comments", "author": null, "committer": null, "parents": [{"sha": "4ac8e06eb12c14af065e0bea11dd5b9d94cb2f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac8e06eb12c14af065e0bea11dd5b9d94cb2f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ac8e06eb12c14af065e0bea11dd5b9d94cb2f94"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "1b32348c7e56aca0924168c9a91c3bedcbd8b6f9", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8980b5a34d2d8953f64fe6ca428dd2fa00969aab/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8980b5a34d2d8953f64fe6ca428dd2fa00969aab/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8980b5a34d2d8953f64fe6ca428dd2fa00969aab", "patch": "@@ -1530,7 +1530,9 @@ integer_all_onesp (expr)\n   if (!uns)\n     return TREE_INT_CST_LOW (expr) == -1 && TREE_INT_CST_HIGH (expr) == -1;\n \n-  prec = TYPE_PRECISION (TREE_TYPE (expr));\n+  /* Note that using TYPE_PRECISION here is wrong.  We care about the\n+     actual bits, not the (arbitrary) range of the type.  */\n+  prec = GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (expr)));\n   if (prec >= HOST_BITS_PER_WIDE_INT)\n     {\n       int high_value, shift_amount;"}]}