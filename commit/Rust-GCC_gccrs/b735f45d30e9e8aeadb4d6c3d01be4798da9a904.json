{"sha": "b735f45d30e9e8aeadb4d6c3d01be4798da9a904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjczNWY0NWQzMGU5ZThhZWFkYjRkNmMzZDAxYmU0Nzk4ZGE5YTkwNA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-09-07T07:52:48Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2005-09-07T07:52:48Z"}, "message": "reload1.c (fixup_eh_region_note): Remove assertion.\n\n2005-09-07  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* reload1.c (fixup_eh_region_note): Remove assertion.\n\t(fixup_abnormal_edges): Reverted removal of call to\n\tfind_many_sub_basic_blocks made on 2005-08-31.\n\nFrom-SVN: r103984", "tree": {"sha": "02fbc8279361958c27d1a90d247dc04030a8e53c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02fbc8279361958c27d1a90d247dc04030a8e53c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b735f45d30e9e8aeadb4d6c3d01be4798da9a904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b735f45d30e9e8aeadb4d6c3d01be4798da9a904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b735f45d30e9e8aeadb4d6c3d01be4798da9a904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b735f45d30e9e8aeadb4d6c3d01be4798da9a904/comments", "author": null, "committer": null, "parents": [{"sha": "30e6f306d3ac23bcf9b1dec1cff32f6009aca913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30e6f306d3ac23bcf9b1dec1cff32f6009aca913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30e6f306d3ac23bcf9b1dec1cff32f6009aca913"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "f97e8558d885f48c5c194bbe53075e2b4a78b03a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b735f45d30e9e8aeadb4d6c3d01be4798da9a904/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b735f45d30e9e8aeadb4d6c3d01be4798da9a904/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b735f45d30e9e8aeadb4d6c3d01be4798da9a904", "patch": "@@ -1,3 +1,9 @@\n+2005-09-07  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* reload1.c (fixup_eh_region_note): Remove assertion.\n+\t(fixup_abnormal_edges): Reverted removal of call to \n+\tfind_many_sub_basic_blocks made on 2005-08-31.\n+\n 2005-09-07  Richard Henderson  <rth@redhat.com>\n \n         * function.c (ARG_POINTER_CFA_OFFSET): Move ..."}, {"sha": "33840b594e00016f71b0bd47884460c3a9b5ab59", "filename": "gcc/reload1.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b735f45d30e9e8aeadb4d6c3d01be4798da9a904/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b735f45d30e9e8aeadb4d6c3d01be4798da9a904/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=b735f45d30e9e8aeadb4d6c3d01be4798da9a904", "patch": "@@ -3788,24 +3788,6 @@ fixup_eh_region_note (rtx insn, rtx prev, rtx next)\n \tREG_NOTES (i)\n \t  = gen_rtx_EXPR_LIST (REG_EH_REGION, XEXP (note, 0), REG_NOTES (i));\n       }\n-\n-  /* ??? Since we entered with one eh insn, we should exit with one eh insn;\n-     otherwise we're unsure that we're not losing an exception.  Except that\n-     the instruction stream incoming to reload doesn't pass the \"if \n-     reg_eh_region is present, may_trap_p is true\" smoke test.\n-\n-     Worse, even if it did, rtx_addr_can_trap_p returns false for some forms\n-     of address that include constants regardless of the actual value of the\n-     constant.  If we decide that \"int a[3]; a[100000]\" should be considered\n-     non-trapping, we should get that story straight across more of the\n-     compiler.  If we decide that it should trap, then we cannot decide\n-     may_trap_p on the basis of rtx_addr_can_trap_p at all.  Which may not\n-     be such a big thing -- it doesn't seem hard to get MEM_NOTRAP_P set\n-     correctly in the first place.\n-\n-     Fixing all that is not in the cards for gcc 4.2, so for the nonce we\n-     allow all eh insns to evaporate.  */\n-  gcc_assert (trap_count <= 1);\n }\n \n /* Reload pseudo-registers into hard regs around each insn as needed.\n@@ -8191,6 +8173,15 @@ fixup_abnormal_edges (void)\n \t}\n     }\n \n+  /* We've possibly turned single trapping insn into multiple ones.  */\n+  if (flag_non_call_exceptions)\n+    {\n+      sbitmap blocks;\n+      blocks = sbitmap_alloc (last_basic_block);\n+      sbitmap_ones (blocks);\n+      find_many_sub_basic_blocks (blocks);\n+    }\n+\n   if (inserted)\n     commit_edge_insertions ();\n "}]}