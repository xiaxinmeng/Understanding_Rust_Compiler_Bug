{"sha": "bf584ca0afc6b5d334bd4f8dc39ee7aec355815c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY1ODRjYTBhZmM2YjVkMzM0YmQ0ZjhkYzM5ZWU3YWVjMzU1ODE1Yw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-10-17T13:16:36Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-10-17T13:16:36Z"}, "message": "AVX-512. 75/n. Update vec_init.\n\ngcc/\n\t* config/i386/i386.c (ix86_expand_vector_init_duplicate): Handle V64QI\n\tand V32HI modes, update V8HI, V16QI, V32QI modes handling.\n\t(ix86_expand_vector_init_general): Handle V64QI and V32HI modes.\n\t* config/i386/sse.md (define_mode_iterator VI48F_512): Rename to ...\n\t(define_mode_iterator VF48_I1248): ... this. Extend to AVX-512 modes.\n\t(define_expand \"vec_init<mode>\"): Use VF48_I1248.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r216401", "tree": {"sha": "cb7fe34e564c5fc7aff4806d111e2b2a80ddc93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb7fe34e564c5fc7aff4806d111e2b2a80ddc93f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf584ca0afc6b5d334bd4f8dc39ee7aec355815c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf584ca0afc6b5d334bd4f8dc39ee7aec355815c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf584ca0afc6b5d334bd4f8dc39ee7aec355815c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf584ca0afc6b5d334bd4f8dc39ee7aec355815c/comments", "author": null, "committer": null, "parents": [{"sha": "fde2c35121b2622e00896cf12475946f483a7a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde2c35121b2622e00896cf12475946f483a7a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fde2c35121b2622e00896cf12475946f483a7a74"}], "stats": {"total": 87, "additions": 76, "deletions": 11}, "files": [{"sha": "ba84c3295f7e4843201f87b9958b4d8a0c482164", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf584ca0afc6b5d334bd4f8dc39ee7aec355815c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf584ca0afc6b5d334bd4f8dc39ee7aec355815c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf584ca0afc6b5d334bd4f8dc39ee7aec355815c", "patch": "@@ -1,3 +1,19 @@\n+2014-10-17  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.c (ix86_expand_vector_init_duplicate): Handle V64QI\n+\tand V32HI modes, update V8HI, V16QI, V32QI modes handling.\n+\t(ix86_expand_vector_init_general): Handle V64QI and V32HI modes.\n+\t* config/i386/sse.md (define_mode_iterator VI48F_512): Rename to ...\n+\t(define_mode_iterator VF48_I1248): ... this. Extend to AVX-512 modes.\n+\t(define_expand \"vec_init<mode>\"): Use VF48_I1248.\n+\n 2014-10-17  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "7040200b2653db769a171db6dd917c8e9be1910e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf584ca0afc6b5d334bd4f8dc39ee7aec355815c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf584ca0afc6b5d334bd4f8dc39ee7aec355815c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bf584ca0afc6b5d334bd4f8dc39ee7aec355815c", "patch": "@@ -39764,6 +39764,8 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n     case V8SFmode:\n     case V8SImode:\n     case V2DFmode:\n+    case V64QImode:\n+    case V32HImode:\n     case V2DImode:\n     case V4SFmode:\n     case V4SImode:\n@@ -39794,6 +39796,9 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n       goto widen;\n \n     case V8HImode:\n+      if (TARGET_AVX512VL && TARGET_AVX512BW)\n+        return ix86_vector_duplicate_value (mode, target, val);\n+\n       if (TARGET_SSE2)\n \t{\n \t  struct expand_vec_perm_d dperm;\n@@ -39824,6 +39829,9 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n       goto widen;\n \n     case V16QImode:\n+      if (TARGET_AVX512VL && TARGET_AVX512BW)\n+        return ix86_vector_duplicate_value (mode, target, val);\n+\n       if (TARGET_SSE2)\n \tgoto permute;\n       goto widen;\n@@ -39853,16 +39861,19 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n \n     case V16HImode:\n     case V32QImode:\n-      {\n-\tenum machine_mode hvmode = (mode == V16HImode ? V8HImode : V16QImode);\n-\trtx x = gen_reg_rtx (hvmode);\n+      if (TARGET_AVX512VL && TARGET_AVX512BW)\n+        return ix86_vector_duplicate_value (mode, target, val);\n+      else\n+\t{\n+\t  enum machine_mode hvmode = (mode == V16HImode ? V8HImode : V16QImode);\n+\t  rtx x = gen_reg_rtx (hvmode);\n \n-\tok = ix86_expand_vector_init_duplicate (false, hvmode, x, val);\n-\tgcc_assert (ok);\n+\t  ok = ix86_expand_vector_init_duplicate (false, hvmode, x, val);\n+\t  gcc_assert (ok);\n \n-\tx = gen_rtx_VEC_CONCAT (mode, x, x);\n-\temit_insn (gen_rtx_SET (VOIDmode, target, x));\n-      }\n+\t  x = gen_rtx_VEC_CONCAT (mode, x, x);\n+\t  emit_insn (gen_rtx_SET (VOIDmode, target, x));\n+\t}\n       return true;\n \n     default:\n@@ -40424,8 +40435,9 @@ static void\n ix86_expand_vector_init_general (bool mmx_ok, enum machine_mode mode,\n \t\t\t\t rtx target, rtx vals)\n {\n-  rtx ops[64], op0, op1;\n+  rtx ops[64], op0, op1, op2, op3, op4, op5;\n   enum machine_mode half_mode = VOIDmode;\n+  enum machine_mode quarter_mode = VOIDmode;\n   int n, i;\n \n   switch (mode)\n@@ -40476,6 +40488,42 @@ ix86_expand_vector_init_general (bool mmx_ok, enum machine_mode mode,\n \t\t\t      gen_rtx_VEC_CONCAT (mode, op0, op1)));\n       return;\n \n+    case V64QImode:\n+      quarter_mode = V16QImode;\n+      half_mode = V32QImode;\n+      goto quarter;\n+\n+    case V32HImode:\n+      quarter_mode = V8HImode;\n+      half_mode = V16HImode;\n+      goto quarter;\n+\n+quarter:\n+      n = GET_MODE_NUNITS (mode);\n+      for (i = 0; i < n; i++)\n+\tops[i] = XVECEXP (vals, 0, i);\n+      op0 = gen_reg_rtx (quarter_mode);\n+      op1 = gen_reg_rtx (quarter_mode);\n+      op2 = gen_reg_rtx (quarter_mode);\n+      op3 = gen_reg_rtx (quarter_mode);\n+      op4 = gen_reg_rtx (half_mode);\n+      op5 = gen_reg_rtx (half_mode);\n+      ix86_expand_vector_init_interleave (quarter_mode, op0, ops,\n+\t\t\t\t\t  n >> 3);\n+      ix86_expand_vector_init_interleave (quarter_mode, op1,\n+\t\t\t\t\t  &ops [n >> 2], n >> 3);\n+      ix86_expand_vector_init_interleave (quarter_mode, op2,\n+\t\t\t\t\t  &ops [n >> 1], n >> 3);\n+      ix86_expand_vector_init_interleave (quarter_mode, op3,\n+\t\t\t\t\t  &ops [(n >> 1) | (n >> 2)], n >> 3);\n+      emit_insn (gen_rtx_SET (VOIDmode, op4,\n+\t\t\t      gen_rtx_VEC_CONCAT (half_mode, op0, op1)));\n+      emit_insn (gen_rtx_SET (VOIDmode, op5,\n+\t\t\t      gen_rtx_VEC_CONCAT (half_mode, op2, op3)));\n+      emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t      gen_rtx_VEC_CONCAT (mode, op4, op5)));\n+      return;\n+\n     case V16QImode:\n       if (!TARGET_SSE4_1)\n \tbreak;"}, {"sha": "f5ad23c4f7644b89066cb9ab538e7054ff13ac73", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf584ca0afc6b5d334bd4f8dc39ee7aec355815c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf584ca0afc6b5d334bd4f8dc39ee7aec355815c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bf584ca0afc6b5d334bd4f8dc39ee7aec355815c", "patch": "@@ -524,7 +524,8 @@\n   (V16SI \"TARGET_AVX512F\") (V16SF \"TARGET_AVX512F\")\n   (V8DI  \"TARGET_AVX512F\") (V8DF  \"TARGET_AVX512F\")\n   (V4DI  \"TARGET_AVX512VL\") (V4DF  \"TARGET_AVX512VL\")])\n-(define_mode_iterator VI48F_512 [V16SI V16SF V8DI V8DF])\n+(define_mode_iterator VF48_I1248\n+  [V16SI V16SF V8DI V8DF V32HI V64QI])\n (define_mode_iterator VI48F\n   [V16SI V16SF V8DI V8DF\n    (V8SI \"TARGET_AVX512VL\") (V8SF \"TARGET_AVX512VL\")\n@@ -17475,7 +17476,7 @@\n })\n \n (define_expand \"vec_init<mode>\"\n-  [(match_operand:VI48F_512 0 \"register_operand\")\n+  [(match_operand:VF48_I1248 0 \"register_operand\")\n    (match_operand 1)]\n   \"TARGET_AVX512F\"\n {"}]}