{"sha": "bed852cf7a299422a8454b6a26e2fa87aaffabf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVkODUyY2Y3YTI5OTQyMmE4NDU0YjZhMjZlMmZhODdhYWZmYWJmNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-22T18:40:13Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-22T18:40:13Z"}, "message": "sse.md (*mov<mode>_internal): Merge with *mov<mode>_internal_rex64.\n\n\t* config/i386/sse.md (*mov<mode>_internal): Merge with\n\t*mov<mode>_internal_rex64.  Use x64 and nox64 isa attributes.\n\tEmit insn template depending on type attribute.  Use\n\tHAVE_AS_IX86_INTERUNIT_MOVQ to handle broken assemblers that require\n\tmovd instead of movq mnemonic for interunit moves.  Rewrite mode\n\tattribute calculation.  Remove unit attribute calculation.\n\tSet prefix attribute to maybe_vex for sselog1 and ssemov types.\n\tSet prefix_data16 attribute for DImode ssemov types.\n\tUse Ym instead of y for SSE-MMX conversion alternatives.\n\tReorder operand constraints.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/pr22152.c (dg-options): Add -mtune=core2.\n\nFrom-SVN: r196981", "tree": {"sha": "1cde0866aec706acba4b18ad3f8856bd3a275178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cde0866aec706acba4b18ad3f8856bd3a275178"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bed852cf7a299422a8454b6a26e2fa87aaffabf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed852cf7a299422a8454b6a26e2fa87aaffabf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed852cf7a299422a8454b6a26e2fa87aaffabf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed852cf7a299422a8454b6a26e2fa87aaffabf5/comments", "author": null, "committer": null, "parents": [{"sha": "1e8a79379d8ff958f8a2eab8a3176e239e9b47a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e8a79379d8ff958f8a2eab8a3176e239e9b47a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e8a79379d8ff958f8a2eab8a3176e239e9b47a6"}], "stats": {"total": 230, "additions": 122, "deletions": 108}, "files": [{"sha": "6677a776df4986c2a647ca19b2183c5990cf6fb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed852cf7a299422a8454b6a26e2fa87aaffabf5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed852cf7a299422a8454b6a26e2fa87aaffabf5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bed852cf7a299422a8454b6a26e2fa87aaffabf5", "patch": "@@ -1,3 +1,16 @@\n+2013-03-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (*mov<mode>_internal): Merge with\n+\t*mov<mode>_internal_rex64.  Use x64 and nox64 isa attributes.\n+\tEmit insn template depending on type attribute.  Use\n+\tHAVE_AS_IX86_INTERUNIT_MOVQ to handle broken assemblers that require\n+\tmovd instead of movq mnemonic for interunit moves.  Rewrite mode\n+\tattribute calculation.  Remove unit attribute calculation.\n+\tSet prefix attribute to maybe_vex for sselog1 and ssemov types.\n+\tSet prefix_data16 attribute for DImode ssemov types.\n+\tUse Ym instead of y for SSE-MMX conversion alternatives.\n+\tReorder operand constraints.\n+\n 2013-03-22  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* df.h (df_insn_delete): Adjust prototype.\n@@ -31,7 +44,7 @@\n 2013-03-22  Richard Biener  <rguenther@suse.de>\n \n \t* is-a.h (as_a): Use gcc_checking_assert.\n- \n+\n 2013-03-22  Ian Bolton  <ian.bolton@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_print_operand): New\n@@ -47,8 +60,7 @@\n \t(create_vop_ref_mapping_loop): Remove.\n \t(create_vop_ref_mapping): Likewise.\n \t(analyze_memory_references): Initialize refs_stored_in_loop.\n-\t(LOOP_DEP_BIT): New define to map to bits in (in)dep_loop\n-\tbitmaps.\n+\t(LOOP_DEP_BIT): New define to map to bits in (in)dep_loop bitmaps.\n \t(record_indep_loop): Remove.\n \t(record_dep_loop): New function.\n \t(ref_indep_loop_p_1): Adjust to only walk over references"}, {"sha": "1c50faa1051551070f0b9d0e64cc6f32f4c87962", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 101, "deletions": 103, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed852cf7a299422a8454b6a26e2fa87aaffabf5/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed852cf7a299422a8454b6a26e2fa87aaffabf5/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=bed852cf7a299422a8454b6a26e2fa87aaffabf5", "patch": "@@ -76,128 +76,126 @@\n   DONE;\n })\n \n-;; movd instead of movq is required to handle broken assemblers.\n-(define_insn \"*mov<mode>_internal_rex64\"\n+(define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n-\t \"=rm,r,!?y,!y,!?y,m  ,!y ,*x,x,x ,m,r ,Yi\")\n+\t \"=r ,o ,r,r ,m ,!?y,!y,!?y,m  ,x,x,x,m,*x,*x,*x,m ,r ,Yi,!Ym,*Yi\")\n \t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n-\t \"Cr ,m,C  ,!y,m  ,!?y,*x,!y ,C,xm,x,Yi,r\"))]\n-  \"TARGET_64BIT && TARGET_MMX\n+\t \"rCo,rC,C,rm,rC,C  ,!y,m  ,!?y,C,x,m,x,C ,*x,m ,*x,Yi,r ,*Yi,!Ym\"))]\n+  \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-    mov{q}\\t{%1, %0|%0, %1}\n-    mov{q}\\t{%1, %0|%0, %1}\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    %vpxor\\t%0, %d0\n-    %vmovq\\t{%1, %0|%0, %1}\n-    %vmovq\\t{%1, %0|%0, %1}\n-    %vmovd\\t{%1, %0|%0, %1}\n-    %vmovd\\t{%1, %0|%0, %1}\"\n-  [(set (attr \"type\")\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_MULTI:\n+      return \"#\";\n+\n+    case TYPE_IMOV:\n+      if (get_attr_mode (insn) == MODE_SI)\n+\treturn \"mov{l}\\t{%1, %k0|%k0, %1}\";\n+      else\n+\treturn \"mov{q}\\t{%1, %0|%0, %1}\";\n+\n+    case TYPE_MMX:\n+      return \"pxor\\t%0, %0\";\n+\n+    case TYPE_MMXMOV:\n+#ifndef HAVE_AS_IX86_INTERUNIT_MOVQ\n+      /* Handle broken assemblers that require movd instead of movq.  */\n+      if (GENERAL_REG_P (operands[0]) || GENERAL_REG_P (operands[1]))\n+\treturn \"movd\\t{%1, %0|%0, %1}\";\n+#endif\n+      return \"movq\\t{%1, %0|%0, %1}\";\n+\n+    case TYPE_SSECVT:\n+      if (SSE_REG_P (operands[0]))\n+\treturn \"movq2dq\\t{%1, %0|%0, %1}\";\n+      else\n+\treturn \"movdq2q\\t{%1, %0|%0, %1}\";\n+\n+    case TYPE_SSELOG1:\n+      return standard_sse_constant_opcode (insn, operands[1]);\n+\n+    case TYPE_SSEMOV:\n+      switch (get_attr_mode (insn))\n+\t{\n+\tcase MODE_DI:\n+#ifndef HAVE_AS_IX86_INTERUNIT_MOVQ\n+\t  /* Handle broken assemblers that require movd instead of movq.  */\n+\t  if (GENERAL_REG_P (operands[0]) || GENERAL_REG_P (operands[1]))\n+\t    return \"%vmovd\\t{%1, %0|%0, %1}\";\n+#endif\n+\t  return \"%vmovq\\t{%1, %0|%0, %1}\";\n+\tcase MODE_TI:\n+\t  return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n+\n+\tcase MODE_V2SF:\n+\t  gcc_assert (!TARGET_AVX);\n+\t  return \"movlps\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V4SF:\n+\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set (attr \"isa\")\n      (cond [(eq_attr \"alternative\" \"0,1\")\n+\t      (const_string \"nox64\")\n+\t    (eq_attr \"alternative\" \"2,3,4,9,10,11,12,17,18\")\n+\t      (const_string \"x64\")\n+\t   ]\n+\t   (const_string \"*\")))\n+   (set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"0,1\")\n+\t      (const_string \"multi\")\n+\t    (eq_attr \"alternative\" \"2,3,4\")\n \t      (const_string \"imov\")\n-\t    (eq_attr \"alternative\" \"2\")\n+\t    (eq_attr \"alternative\" \"5\")\n \t      (const_string \"mmx\")\n-\t    (eq_attr \"alternative\" \"3,4,5\")\n+\t    (eq_attr \"alternative\" \"6,7,8\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"6,7\")\n-\t      (const_string \"ssecvt\")\n-\t    (eq_attr \"alternative\" \"8\")\n+\t    (eq_attr \"alternative\" \"9,13\")\n \t      (const_string \"sselog1\")\n+\t    (eq_attr \"alternative\" \"19,20\")\n+\t      (const_string \"ssecvt\")\n \t   ]\n \t   (const_string \"ssemov\")))\n-   (set (attr \"unit\")\n-     (if_then_else (eq_attr \"alternative\" \"6,7\")\n-       (const_string \"mmx\")\n-       (const_string \"*\")))\n-   (set (attr \"prefix_rep\")\n-     (if_then_else (eq_attr \"alternative\" \"6,7,9\")\n-       (const_string \"1\")\n-       (const_string \"*\")))\n-   (set (attr \"prefix_data16\")\n-     (if_then_else (eq_attr \"alternative\" \"10,11,12\")\n-       (const_string \"1\")\n-       (const_string \"*\")))\n    (set (attr \"prefix_rex\")\n-     (if_then_else (eq_attr \"alternative\" \"9,10\")\n-       (symbol_ref \"x86_extended_reg_mentioned_p (insn)\")\n+     (if_then_else (eq_attr \"alternative\" \"17,18\")\n+       (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"8,9,10,11,12\")\n+     (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n        (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*mov<mode>_internal\"\n-  [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n-\t \"=!?y,!y,!?y,m  ,!y,*x,*x,*x ,m ,*x,*x,*x,m ,r  ,m\")\n-\t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n-\t \"C   ,!y,m  ,!?y,*x,!y,C ,*xm,*x,C ,*x,m ,*x,irm,r\"))]\n-  \"!TARGET_64BIT && TARGET_MMX\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    %vpxor\\t%0, %d0\n-    %vmovq\\t{%1, %0|%0, %1}\n-    %vmovq\\t{%1, %0|%0, %1}\n-    xorps\\t%0, %0\n-    movaps\\t{%1, %0|%0, %1}\n-    movlps\\t{%1, %0|%0, %1}\n-    movlps\\t{%1, %0|%0, %1}\n-    #\n-    #\"\n-  [(set (attr \"isa\")\n-     (cond [(eq_attr \"alternative\" \"4,5,6,7,8\")\n-\t      (const_string \"sse2\")\n-\t    (eq_attr \"alternative\" \"9,10,11,12\")\n-\t      (const_string \"noavx\")\n-\t   ]\n-           (const_string \"*\")))\n-   (set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"0\")\n-\t      (const_string \"mmx\")\n-\t    (eq_attr \"alternative\" \"1,2,3\")\n-\t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"4,5\")\n-\t      (const_string \"ssecvt\")\n-\t    (eq_attr \"alternative\" \"6,9\")\n-\t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"13,14\")\n-\t      (const_string \"multi\")\n-\t   ]\n-\t   (const_string \"ssemov\")))\n-   (set (attr \"unit\")\n-     (if_then_else (eq_attr \"alternative\" \"4,5\")\n-       (const_string \"mmx\")\n-       (const_string \"*\")))\n-   (set (attr \"prefix_rep\")\n-     (if_then_else\n-       (ior (eq_attr \"alternative\" \"4,5\")\n-\t    (and (eq_attr \"alternative\" \"7\")\n-\t\t (not (match_test \"TARGET_AVX\"))))\n-       (const_string \"1\")\n-       (const_string \"*\")))\n    (set (attr \"prefix_data16\")\n      (if_then_else\n-       (and (eq_attr \"alternative\" \"8\")\n-\t    (not (match_test \"TARGET_AVX\")))\n+       (and (eq_attr \"type\" \"ssemov\") (eq_attr \"mode\" \"DI\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n-   (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"6,7,8\")\n-       (const_string \"maybe_vex\")\n-       (const_string \"orig\")))\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,TI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n+   (set (attr \"mode\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n+\t      (const_string \"SI\")\n+\t    (eq_attr \"alternative\" \"9,10,13,14\")\n+\t      (cond [(ior (not (match_test \"TARGET_SSE2\"))\n+\t\t\t  (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n+\t\t       (const_string \"V4SF\")\n+\t\t     (match_test \"TARGET_AVX\")\n+\t\t       (const_string \"TI\")\n+\t\t     (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t       (const_string \"V4SF\")\n+\t\t    ]\n+\t\t    (const_string \"TI\"))\n+\n+\t    (and (eq_attr \"alternative\" \"11,12,15,16\")\n+\t\t (not (match_test \"TARGET_SSE2\")))\n+\t      (const_string \"V2SF\")\n+\t   ]\n+\t   (const_string \"DI\")))])\n \n (define_expand \"movv2sf\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\")"}, {"sha": "d383deffec85af1bf0a865a3c47ea4602f8c20cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed852cf7a299422a8454b6a26e2fa87aaffabf5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed852cf7a299422a8454b6a26e2fa87aaffabf5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bed852cf7a299422a8454b6a26e2fa87aaffabf5", "patch": "@@ -1,3 +1,7 @@\n+2013-03-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/pr22152.c (dg-options): Add -mtune=core2.\n+\n 2013-03-22  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \tPR testsuite/55994"}, {"sha": "b20a22a4c9088a4ca2cbe8ea347224c290b91603", "filename": "gcc/testsuite/gcc.target/i386/pr22152.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed852cf7a299422a8454b6a26e2fa87aaffabf5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed852cf7a299422a8454b6a26e2fa87aaffabf5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c?ref=bed852cf7a299422a8454b6a26e2fa87aaffabf5", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse2\" } */\n-/* { dg-options \"-O2 -msse2 -mno-vect8-ret-in-mem\" { target i?86-*-solaris2.9 *-*-vxworks* } } */\n+/* { dg-options \"-O2 -msse2 -mtune=core2\" } */\n+/* { dg-additional-options \"-mno-vect8-ret-in-mem\" { target i?86-*-solaris2.9 *-*-vxworks* } } */\n /* { dg-additional-options \"-mabi=sysv\" { target x86_64-*-mingw* } } */\n \n #include <mmintrin.h>"}]}