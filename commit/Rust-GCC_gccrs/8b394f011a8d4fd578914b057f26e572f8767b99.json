{"sha": "8b394f011a8d4fd578914b057f26e572f8767b99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIzOTRmMDExYThkNGZkNTc4OTE0YjA1N2YyNmU1NzJmODc2N2I5OQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-28T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-28T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "b77e4551a04ef50f929a80d6feb99120325325d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b77e4551a04ef50f929a80d6feb99120325325d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b394f011a8d4fd578914b057f26e572f8767b99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b394f011a8d4fd578914b057f26e572f8767b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b394f011a8d4fd578914b057f26e572f8767b99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b394f011a8d4fd578914b057f26e572f8767b99/comments", "author": null, "committer": null, "parents": [{"sha": "cad843c7e7aeee32d41a56282bd1024b5cebf531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad843c7e7aeee32d41a56282bd1024b5cebf531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cad843c7e7aeee32d41a56282bd1024b5cebf531"}], "stats": {"total": 390, "additions": 389, "deletions": 1}, "files": [{"sha": "d0759b8f50d496a8b95b3d3682d7c5682448409d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b394f011a8d4fd578914b057f26e572f8767b99", "patch": "@@ -1,3 +1,211 @@\n+2020-08-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/65146\n+\t* config/i386/i386.c (iamcu_alignment): Don't decrease alignment\n+\tfor TYPE_ATOMIC types.\n+\t(ix86_local_alignment): Likewise.\n+\t(ix86_minimum_alignment): Likewise.\n+\t(x86_field_alignment): Likewise, and emit a -Wpsabi diagnostic\n+\tfor it.\n+\n+2020-08-27  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/96787\n+\t* config/rs6000/rs6000.c (rs6000_sibcall_aix): Support\n+\tindirect call for ELFv2.\n+\n+2020-08-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96522\n+\t* tree-ssa-address.c (copy_ref_info): Reset flow-sensitive\n+\tinfo of the copied points-to.  Transfer bigger alignment\n+\tvia the access type.\n+\t* tree-ssa-sccvn.c (eliminate_dom_walker::eliminate_stmt):\n+\tReset all flow-sensitive info.\n+\n+2020-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* alias.c (init_alias_analysis): Set exact argument of a vector\n+\tgrowth function to true.\n+\t* calls.c (internal_arg_pointer_based_exp_scan): Likewise.\n+\t* cfgbuild.c (find_many_sub_basic_blocks): Likewise.\n+\t* cfgexpand.c (expand_asm_stmt): Likewise.\n+\t* cfgrtl.c (rtl_create_basic_block): Likewise.\n+\t* combine.c (combine_split_insns): Likewise.\n+\t(combine_instructions): Likewise.\n+\t* config/aarch64/aarch64-sve-builtins.cc (function_expander::add_output_operand): Likewise.\n+\t(function_expander::add_input_operand): Likewise.\n+\t(function_expander::add_integer_operand): Likewise.\n+\t(function_expander::add_address_operand): Likewise.\n+\t(function_expander::add_fixed_operand): Likewise.\n+\t* df-core.c (df_worklist_dataflow_doublequeue): Likewise.\n+\t* dwarf2cfi.c (update_row_reg_save): Likewise.\n+\t* early-remat.c (early_remat::init_block_info): Likewise.\n+\t(early_remat::finalize_candidate_indices): Likewise.\n+\t* except.c (sjlj_build_landing_pads): Likewise.\n+\t* final.c (compute_alignments): Likewise.\n+\t(grow_label_align): Likewise.\n+\t* function.c (temp_slots_at_level): Likewise.\n+\t* fwprop.c (build_single_def_use_links): Likewise.\n+\t(update_uses): Likewise.\n+\t* gcc.c (insert_wrapper): Likewise.\n+\t* genautomata.c (create_state_ainsn_table): Likewise.\n+\t(add_vect): Likewise.\n+\t(output_dead_lock_vect): Likewise.\n+\t* genmatch.c (capture_info::capture_info): Likewise.\n+\t(parser::finish_match_operand): Likewise.\n+\t* genrecog.c (optimize_subroutine_group): Likewise.\n+\t(merge_pattern_info::merge_pattern_info): Likewise.\n+\t(merge_into_decision): Likewise.\n+\t(print_subroutine_start): Likewise.\n+\t(main): Likewise.\n+\t* gimple-loop-versioning.cc (loop_versioning::loop_versioning): Likewise.\n+\t* gimple.c (gimple_set_bb): Likewise.\n+\t* graphite-isl-ast-to-gimple.c (translate_isl_ast_node_user): Likewise.\n+\t* haifa-sched.c (sched_extend_luids): Likewise.\n+\t(extend_h_i_d): Likewise.\n+\t* insn-addr.h (insn_addresses_new): Likewise.\n+\t* ipa-cp.c (gather_context_independent_values): Likewise.\n+\t(find_more_contexts_for_caller_subset): Likewise.\n+\t* ipa-devirt.c (final_warning_record::grow_type_warnings): Likewise.\n+\t(ipa_odr_read_section): Likewise.\n+\t* ipa-fnsummary.c (evaluate_properties_for_edge): Likewise.\n+\t(ipa_fn_summary_t::duplicate): Likewise.\n+\t(analyze_function_body): Likewise.\n+\t(ipa_merge_fn_summary_after_inlining): Likewise.\n+\t(read_ipa_call_summary): Likewise.\n+\t* ipa-icf.c (sem_function::bb_dict_test): Likewise.\n+\t* ipa-prop.c (ipa_alloc_node_params): Likewise.\n+\t(parm_bb_aa_status_for_bb): Likewise.\n+\t(ipa_compute_jump_functions_for_edge): Likewise.\n+\t(ipa_analyze_node): Likewise.\n+\t(update_jump_functions_after_inlining): Likewise.\n+\t(ipa_read_edge_info): Likewise.\n+\t(read_ipcp_transformation_info): Likewise.\n+\t(ipcp_transform_function): Likewise.\n+\t* ipa-reference.c (ipa_reference_write_optimization_summary): Likewise.\n+\t* ipa-split.c (execute_split_functions): Likewise.\n+\t* ira.c (find_moveable_pseudos): Likewise.\n+\t* lower-subreg.c (decompose_multiword_subregs): Likewise.\n+\t* lto-streamer-in.c (input_eh_regions): Likewise.\n+\t(input_cfg): Likewise.\n+\t(input_struct_function_base): Likewise.\n+\t(input_function): Likewise.\n+\t* modulo-sched.c (set_node_sched_params): Likewise.\n+\t(extend_node_sched_params): Likewise.\n+\t(schedule_reg_moves): Likewise.\n+\t* omp-general.c (omp_construct_simd_compare): Likewise.\n+\t* passes.c (pass_manager::create_pass_tab): Likewise.\n+\t(enable_disable_pass): Likewise.\n+\t* predict.c (determine_unlikely_bbs): Likewise.\n+\t* profile.c (compute_branch_probabilities): Likewise.\n+\t* read-rtl-function.c (function_reader::parse_block): Likewise.\n+\t* read-rtl.c (rtx_reader::read_rtx_code): Likewise.\n+\t* reg-stack.c (stack_regs_mentioned): Likewise.\n+\t* regrename.c (regrename_init): Likewise.\n+\t* rtlanal.c (T>::add_single_to_queue): Likewise.\n+\t* sched-deps.c (init_deps_data_vector): Likewise.\n+\t* sel-sched-ir.c (sel_extend_global_bb_info): Likewise.\n+\t(extend_region_bb_info): Likewise.\n+\t(extend_insn_data): Likewise.\n+\t* symtab.c (symtab_node::create_reference): Likewise.\n+\t* tracer.c (tail_duplicate): Likewise.\n+\t* trans-mem.c (tm_region_init): Likewise.\n+\t(get_bb_regions_instrumented): Likewise.\n+\t* tree-cfg.c (init_empty_tree_cfg_for_function): Likewise.\n+\t(build_gimple_cfg): Likewise.\n+\t(create_bb): Likewise.\n+\t(move_block_to_fn): Likewise.\n+\t* tree-complex.c (tree_lower_complex): Likewise.\n+\t* tree-if-conv.c (predicate_rhs_code): Likewise.\n+\t* tree-inline.c (copy_bb): Likewise.\n+\t* tree-into-ssa.c (get_ssa_name_ann): Likewise.\n+\t(mark_phi_for_rewrite): Likewise.\n+\t* tree-object-size.c (compute_builtin_object_size): Likewise.\n+\t(init_object_sizes): Likewise.\n+\t* tree-predcom.c (initialize_root_vars_store_elim_1): Likewise.\n+\t(initialize_root_vars_store_elim_2): Likewise.\n+\t(prepare_initializers_chain_store_elim): Likewise.\n+\t* tree-ssa-address.c (addr_for_mem_ref): Likewise.\n+\t(multiplier_allowed_in_address_p): Likewise.\n+\t* tree-ssa-coalesce.c (ssa_conflicts_new): Likewise.\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Likewise.\n+\t* tree-ssa-loop-ivopts.c (addr_offset_valid_p): Likewise.\n+\t(get_address_cost_ainc): Likewise.\n+\t* tree-ssa-loop-niter.c (discover_iteration_bound_by_body_walk): Likewise.\n+\t* tree-ssa-pre.c (add_to_value): Likewise.\n+\t(phi_translate_1): Likewise.\n+\t(do_pre_regular_insertion): Likewise.\n+\t(do_pre_partial_partial_insertion): Likewise.\n+\t(init_pre): Likewise.\n+\t* tree-ssa-propagate.c (ssa_prop_init): Likewise.\n+\t(update_call_from_tree): Likewise.\n+\t* tree-ssa-reassoc.c (optimize_range_tests_cmp_bitwise): Likewise.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Likewise.\n+\t(vn_reference_lookup_pieces): Likewise.\n+\t(eliminate_dom_walker::eliminate_push_avail): Likewise.\n+\t* tree-ssa-strlen.c (set_strinfo): Likewise.\n+\t(get_stridx_plus_constant): Likewise.\n+\t(zero_length_string): Likewise.\n+\t(find_equal_ptrs): Likewise.\n+\t(printf_strlen_execute): Likewise.\n+\t* tree-ssa-threadedge.c (set_ssa_name_value): Likewise.\n+\t* tree-ssanames.c (make_ssa_name_fn): Likewise.\n+\t* tree-streamer-in.c (streamer_read_tree_bitfields): Likewise.\n+\t* tree-vect-loop.c (vect_record_loop_mask): Likewise.\n+\t(vect_get_loop_mask): Likewise.\n+\t(vect_record_loop_len): Likewise.\n+\t(vect_get_loop_len): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern): Likewise.\n+\t* tree-vect-slp.c (vect_slp_convert_to_external): Likewise.\n+\t(vect_bb_slp_scalar_cost): Likewise.\n+\t(vect_bb_vectorization_profitable_p): Likewise.\n+\t(vectorizable_slp_permutation): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_call): Likewise.\n+\t(vectorizable_simd_clone_call): Likewise.\n+\t(scan_store_can_perm_p): Likewise.\n+\t(vectorizable_store): Likewise.\n+\t* expr.c: Likewise.\n+\t* vec.c (test_safe_grow_cleared): Likewise.\n+\t* vec.h (vec_safe_grow): Likewise.\n+\t(vec_safe_grow_cleared): Likewise.\n+\t(vl_ptr>::safe_grow): Likewise.\n+\t(vl_ptr>::safe_grow_cleared): Likewise.\n+\t* config/c6x/c6x.c (insn_set_clock): Likewise.\n+\n+2020-08-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-pretty-print.c (dump_mem_ref): Handle TARGET_MEM_REFs.\n+\t(dump_generic_node): Use dump_mem_ref also for TARGET_MEM_REF.\n+\n+2020-08-27  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* lra-constraints.c (canonicalize_reload_addr): New.\n+\t(curr_insn_transform): Use canonicalize_reload_addr to ensure we\n+\tgenerate canonical RTL for an address reload.\n+\n+2020-08-27  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n+\tfor rounding intrinsics.\n+\n+2020-08-27  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n+\tfor min/max intrinsics.\n+\n+2020-08-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96579\n+\t* tree-ssa-reassoc.c (linearize_expr_tree): If we expand\n+\trhs via special ops make sure to swap operands.\n+\n+2020-08-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96565\n+\t* tree-ssa-dse.c (dse_classify_store): Remove defs with\n+\tno uses from further processing.\n+\n 2020-08-26  G\u00f6ran Uddeborg  <goeran@uddeborg.se>\n \n \tPR gcov-profile/96285"}, {"sha": "7cd20fae38d896353001fbde7582498f33993d2d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8b394f011a8d4fd578914b057f26e572f8767b99", "patch": "@@ -1 +1 @@\n-20200827\n+20200828"}, {"sha": "d021af7e2918d1be689c21370e9e636970ea6897", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8b394f011a8d4fd578914b057f26e572f8767b99", "patch": "@@ -1,3 +1,9 @@\n+2020-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-interface/trans.c (gigi): Set exact argument of a vector\n+\tgrowth function to true.\n+\t(Attribute_to_gnu): Likewise.\n+\n 2020-07-27  Alexandre Oliva  <oliva@adacore.com>\n \n \t* switch.adb (Is_Internal_GCC_Switch): Revert accidental"}, {"sha": "91a278e542bdc7667ceff9dbf366ef0d00f6db00", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8b394f011a8d4fd578914b057f26e572f8767b99", "patch": "@@ -1,3 +1,8 @@\n+2020-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* gimple-parser.c (c_parser_gimple_compound_statement): Set exact argument of a vector\n+\tgrowth function to true.\n+\n 2020-08-25  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR c/96678"}, {"sha": "5f341e2c0a9147bd9876fd8af9d11ff154126994", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8b394f011a8d4fd578914b057f26e572f8767b99", "patch": "@@ -1,3 +1,14 @@\n+2020-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* class.c (build_vtbl_initializer): Set exact argument of a vector\n+\tgrowth function to true.\n+\t* constraint.cc (get_mapped_args): Likewise.\n+\t* decl.c (cp_maybe_mangle_decomp): Likewise.\n+\t(cp_finish_decomp): Likewise.\n+\t* parser.c (cp_parser_omp_for_loop): Likewise.\n+\t* pt.c (canonical_type_parameter): Likewise.\n+\t* rtti.c (get_pseudo_ti_init): Likewise.\n+\n 2020-08-26  Nathan Sidwell  <nathan@acm.org>\n \n \t* decl.c (poplevel): A local-binding tree list holds the name in"}, {"sha": "29d6103b1ae340c541379e95738fbf549e703f84", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8b394f011a8d4fd578914b057f26e572f8767b99", "patch": "@@ -1,3 +1,14 @@\n+2020-08-27  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/95882\n+\t* decl.c (char_len_param_value): Check gfc_seen_div0 and\n+\tif it is set return MATCH_ERROR.\n+\n+2020-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* trans-openmp.c (gfc_trans_omp_do): Set exact argument of a vector\n+\tgrowth function to true.\n+\n 2020-08-26  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gfortran.h (enum gfc_omp_device_type): New."}, {"sha": "1fe3248a26203b41c363ed28b5c58444f5e86422", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=8b394f011a8d4fd578914b057f26e572f8767b99", "patch": "@@ -1,3 +1,8 @@\n+2020-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-common.c (lto_file_finalize): Set exact argument of a vector\n+\tgrowth function to true.\n+\n 2020-06-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-common.c (compare_tree_sccs_1): Do not compare TYPE_VALUES."}, {"sha": "d54bb9bd54fe38ae6f64a9de61412b50f9627189", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b394f011a8d4fd578914b057f26e572f8767b99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b394f011a8d4fd578914b057f26e572f8767b99", "patch": "@@ -1,3 +1,53 @@\n+2020-08-27  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* gcc.target/hppa/shadd-2.c: Adjust times to 4.\n+\n+2020-08-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/65146\n+\t* gcc.target/i386/pr65146.c: New test.\n+\n+2020-08-27  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/96787\n+\t* gcc.target/powerpc/pr96787-1.c: New.\n+\t* gcc.target/powerpc/pr96787-2.c: New.\n+\n+2020-08-27  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/95882\n+\t* gfortran.dg/pr95882_1.f90: New test.\n+\t* gfortran.dg/pr95882_2.f90: New test.\n+\t* gfortran.dg/pr95882_3.f90: New test.\n+\t* gfortran.dg/pr95882_4.f90: New test.\n+\t* gfortran.dg/pr95882_5.f90: New test.\n+\n+2020-08-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96522\n+\t* gcc.dg/torture/pr96522.c: New testcase.\n+\n+2020-08-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/loop-19.c: Adjust.\n+\t* gcc.dg/tree-ssa/loop-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-3.c: Likewise.\n+\n+2020-08-27  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* gcc.target/aarch64/mem-shift-canonical.c: New test.\n+\n+2020-08-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96579\n+\t* gcc.dg/pr96579.c: New testcase.\n+\n+2020-08-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96565\n+\t* gcc.dg/tree-ssa/ssa-dse-40.c: New testcase.\n+\t* gcc.dg/builtin-object-size-4.c: Adjust.\n+\n 2020-08-26  Jeff Law  <law@redhat.com>\n \n \t* gcc.target/i386/387-7.c: Add dg-require-effective-target c99_runtime."}, {"sha": "05f47b99f4388e2302dfc0adc0cc518a165f5f05", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b394f011a8d4fd578914b057f26e572f8767b99/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b394f011a8d4fd578914b057f26e572f8767b99/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b394f011a8d4fd578914b057f26e572f8767b99", "patch": "@@ -1,3 +1,95 @@\n+2020-08-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/chrono (__duration_common_type): Ensure the\n+\treduced ratio is used. Remove unused partial specialization\n+\tusing __failure_type.\n+\t(common_type): Pass reduced ratios to __duration_common_type.\n+\tAdd partial specializations for simple cases involving a single\n+\tduration or time_point type.\n+\t(duration::period): Use reduced ratio.\n+\t(duration::operator+(), duration::operator-()): Return duration\n+\ttype using the reduced ratio.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc:\n+\tAdjust expected errors.\n+\t* testsuite/20_util/duration/requirements/reduced_period.cc: New test.\n+\n+2020-08-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/chrono (year_month::operator+): Properly handle a\n+\tmonth value of 0 by casting the month value to int before\n+\tsubtracting 1 from it so that the difference is sign-extended in\n+\tthe subsequent addition.\n+\t* testsuite/std/time/year_month/1.cc: Test adding months to a\n+\tyear_month whose month component is below or above the\n+\tnormalized range of [1,12].\n+\n+2020-08-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/chrono\n+\t(__detail::__months_years_conversion_disambiguator): Define.\n+\t(year_month::operator+=): Templatize the 'months'-based overload\n+\tso that the 'years'-based overload is selected in case of\n+\tequally-ranked implicit conversion sequences to both 'months'\n+\tand 'years' from the supplied argument.\n+\t(year_month::operator-=): Likewise.\n+\t(year_month::operator+): Likewise.\n+\t(year_month::operator-): Likewise.\n+\t(year_month_day::operator+=): Likewise.\n+\t(year_month_day::operator-=): Likewise.\n+\t(year_month_day::operator+): Likewise.\n+\t(year_month_day::operator-): Likewise.\n+\t(year_month_day_last::operator+=): Likewise.\n+\t(year_month_day_last::operator-=): Likewise.\n+\t(year_month_day_last::operator+): Likewise\n+\t(year_month_day_last::operator-): Likewise.\n+\t(year_month_day_weekday::operator+=): Likewise\n+\t(year_month_day_weekday::operator-=): Likewise.\n+\t(year_month_day_weekday::operator+): Likewise.\n+\t(year_month_day_weekday::operator-): Likewise.\n+\t(year_month_day_weekday_last::operator+=): Likewise\n+\t(year_month_day_weekday_last::operator-=): Likewise.\n+\t(year_month_day_weekday_last::operator+): Likewise.\n+\t(year_month_day_weekday_last::operator-): Likewise.\n+\t(testsuite/std/time/year_month/2.cc): New test.\n+\t(testsuite/std/time/year_month_day/2.cc): New test.\n+\t(testsuite/std/time/year_month_day_last/2.cc): New test.\n+\t(testsuite/std/time/year_month_weekday/2.cc): New test.\n+\t(testsuite/std/time/year_month_weekday_last/2.cc): New test.\n+\t* testsuite/std/time/year_month/2.cc: New file.\n+\t* testsuite/std/time/year_month_day/2.cc: New file.\n+\t* testsuite/std/time/year_month_day_last/2.cc: New file.\n+\t* testsuite/std/time/year_month_weekday/2.cc: New file.\n+\t* testsuite/std/time/year_month_weekday_last/2.cc: New file.\n+\n+2020-08-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/95322\n+\t* include/std/ranges (transform_view::sentinel::__distance_from):\n+\tGive this a deduced return type.\n+\t(transform_view::sentinel::operator-): Adjust the return type so\n+\tthat it's based on the constness of the iterator rather than\n+\tthat of the sentinel.\n+\t* testsuite/std/ranges/adaptors/95322.cc: Refer to LWG 3488.\n+\n+2020-08-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (elements_view::begin): Adjust constraints.\n+\t(elements_view::end): Likewise.\n+\t(elements_view::_Sentinel::operator==): Templatize to take both\n+\t_Iterator<true> and _Iterator<false>.\n+\t(elements_view::_Sentinel::operator-): Likewise.\n+\t* testsuite/std/ranges/adaptors/elements.cc: Add testcase for\n+\tthe example from P1994R1.\n+\t* testsuite/std/ranges/adaptors/lwg3406.cc: New test.\n+\n+2020-08-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (elements_view::end): Replace these two\n+\toverloads with four new overloads.\n+\t(elements_view::_Iterator::operator==): Remove.\n+\t(elements_view::_Iterator::operator-): Likewise.\n+\t(elements_view::_Sentinel): Define.\n+\n 2020-08-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/tuple (_Tuple_impl): Whitespaces changes for"}]}