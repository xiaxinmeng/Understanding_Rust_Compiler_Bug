{"sha": "4f40164a9322105012e9070eebd57ba80c69b873", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0MDE2NGE5MzIyMTA1MDEyZTkwNzBlZWJkNTdiYTgwYzY5Yjg3Mw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-17T22:37:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-18T13:17:43Z"}, "message": "analyzer: fix ICE on failed casts [PR 93777]\n\nPR analyzer/93777 reports ICEs in a Fortran and C++ case involving\na cast of a NULL pointer to a REFERENCE_TYPE.\n\nIn both cases the call to build_cast fails and returns a NULL type, but\nregion_model::maybe_cast_1 asserts that a non-NULL type was returned.\n\nThis patch fixes the ICEs by converting the assertion to a conditional.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93777\n\t* region-model.cc (region_model::maybe_cast_1): Replace assertion\n\tthat build_cast returns non-NULL with a conditional, falling\n\tthrough to the logic which returns a new unknown value of the\n\tdesired type if it fails.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93777\n\t* g++.dg/analyzer/pr93777.C: New test.\n\t* gfortran.dg/analyzer/pr93777.f90: New test.", "tree": {"sha": "79427a7450ddd0c840b14ea072e7f7818459067e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79427a7450ddd0c840b14ea072e7f7818459067e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f40164a9322105012e9070eebd57ba80c69b873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f40164a9322105012e9070eebd57ba80c69b873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f40164a9322105012e9070eebd57ba80c69b873", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f40164a9322105012e9070eebd57ba80c69b873/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6233935c77b56a68e939c629702f960b8e6fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6233935c77b56a68e939c629702f960b8e6fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6233935c77b56a68e939c629702f960b8e6fb2"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "f4c620034dd56e787db6919a03b80af2f5a233b5", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f40164a9322105012e9070eebd57ba80c69b873/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f40164a9322105012e9070eebd57ba80c69b873/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=4f40164a9322105012e9070eebd57ba80c69b873", "patch": "@@ -1,3 +1,11 @@\n+2020-02-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93777\n+\t* region-model.cc (region_model::maybe_cast_1): Replace assertion\n+\tthat build_cast returns non-NULL with a conditional, falling\n+\tthrough to the logic which returns a new unknown value of the\n+\tdesired type if it fails.\n+\n 2020-02-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93778"}, {"sha": "d061552da379292728238d4964b29420e41da7f4", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f40164a9322105012e9070eebd57ba80c69b873/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f40164a9322105012e9070eebd57ba80c69b873/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=4f40164a9322105012e9070eebd57ba80c69b873", "patch": "@@ -5089,10 +5089,9 @@ region_model::maybe_cast_1 (tree dst_type, svalue_id sid)\n   /* Attempt to cast constants.  */\n   if (tree src_cst = sval->maybe_get_constant ())\n     {\n-      tree dst = build_cast (dst_type, src_cst);\n-      gcc_assert (dst != NULL_TREE);\n-      if (CONSTANT_CLASS_P (dst))\n-\treturn get_or_create_constant_svalue (dst);\n+      if (tree dst = build_cast (dst_type, src_cst))\n+\tif (CONSTANT_CLASS_P (dst))\n+\t  return get_or_create_constant_svalue (dst);\n     }\n \n   /* Otherwise, return a new unknown value.  */"}, {"sha": "55e2e6eaa4327046cc7abb5f1d615b51c7ceab80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f40164a9322105012e9070eebd57ba80c69b873/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f40164a9322105012e9070eebd57ba80c69b873/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f40164a9322105012e9070eebd57ba80c69b873", "patch": "@@ -1,3 +1,9 @@\n+2020-02-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93777\n+\t* g++.dg/analyzer/pr93777.C: New test.\n+\t* gfortran.dg/analyzer/pr93777.f90: New test.\n+\n 2020-02-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93778"}, {"sha": "e94e75f5e83435389ca033a36b386039cecef17f", "filename": "gcc/testsuite/g++.dg/analyzer/pr93777.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f40164a9322105012e9070eebd57ba80c69b873/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93777.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f40164a9322105012e9070eebd57ba80c69b873/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93777.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93777.C?ref=4f40164a9322105012e9070eebd57ba80c69b873", "patch": "@@ -0,0 +1 @@\n+#include \"../../g++.old-deja/g++.pt/spec36.C\""}, {"sha": "1c198358829b374753c9408f2bb6fd2d7d181b57", "filename": "gcc/testsuite/gfortran.dg/analyzer/pr93777.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f40164a9322105012e9070eebd57ba80c69b873/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr93777.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f40164a9322105012e9070eebd57ba80c69b873/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr93777.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr93777.f90?ref=4f40164a9322105012e9070eebd57ba80c69b873", "patch": "@@ -0,0 +1,22 @@\n+! { dg-additional-options \"-O0 -Wno-analyzer-possible-null-dereference -Wno-analyzer-null-dereference -Wno-analyzer-malloc-leak\" }\n+\n+program cb\n+  implicit none\n+  type :: jn\n+     real, allocatable :: ie\n+     character(len = :), allocatable :: e5\n+  end type jn\n+  real, parameter :: gm = 5.0\n+\n+  block\n+    type(jn) :: r2\n+\n+    r2 = jn (gm, \"\")\n+    call vz (r2%ie, gm)\n+  end block\n+contains\n+  subroutine vz (arg1, arg2)\n+    real :: arg1, arg2\n+    if (arg1 .ne. arg2) STOP 1\n+  end subroutine vz\n+end program cb"}]}