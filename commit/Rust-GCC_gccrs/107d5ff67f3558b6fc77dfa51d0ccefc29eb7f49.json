{"sha": "107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA3ZDVmZjY3ZjM1NThiNmZjNzdkZmE1MWQwY2NlZmMyOWViN2Y0OQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-12-23T18:17:08Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-12-23T18:17:08Z"}, "message": "re PR fortran/34421 (ENTRY functions: Character with different stringlength not rejected)\n\n2007-12-23  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34421\n        * resolve.c (resolve_entries): Add standard error for functions\n        returning characters with different length.\n\n2007-12-23  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34421\n        * gfortran.dg/entry_17.f90: New.\n\nFrom-SVN: r131150", "tree": {"sha": "6d94f9d12e63cdb537bbdf4ef60b0ba7f3f36654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d94f9d12e63cdb537bbdf4ef60b0ba7f3f36654"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c65fb59c62beb1cbe6db6be2e42c0a9a077915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c65fb59c62beb1cbe6db6be2e42c0a9a077915"}], "stats": {"total": 87, "additions": 85, "deletions": 2}, "files": [{"sha": "9db44b24da5b42700854b96406afe73e9ac55674", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49", "patch": "@@ -1,3 +1,9 @@\n+2007-12-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34421\n+\t* resolve.c (resolve_entries): Add standard error for functions\n+\treturning characters with different length.\n+\n 2007-12-23  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/34536 "}, {"sha": "8fc679d91454cb28f50c4d4a0c244295bf17f563", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49", "patch": "@@ -488,11 +488,28 @@ resolve_entries (gfc_namespace *ns)\n \t      || (el->sym->result->attr.pointer\n \t\t  != ns->entries->sym->result->attr.pointer))\n \t    break;\n-\n \t  else if (as && fas && gfc_compare_array_spec (as, fas) == 0)\n-\t    gfc_error (\"Procedure %s at %L has entries with mismatched \"\n+\t    gfc_error (\"Function %s at %L has entries with mismatched \"\n \t\t       \"array specifications\", ns->entries->sym->name,\n \t\t       &ns->entries->sym->declared_at);\n+\t  /* The characteristics need to match and thus both need to have\n+\t     the same string length, i.e. both len=*, or both len=4.\n+\t     Having both len=<variable> is also possible, but difficult to\n+\t     check at compile time.  */\n+\t  else if (ts->type == BT_CHARACTER && ts->cl && fts->cl\n+\t\t   && (((ts->cl->length && !fts->cl->length)\n+\t\t\t||(!ts->cl->length && fts->cl->length))\n+\t\t       || (ts->cl->length\n+\t\t\t   && ts->cl->length->expr_type\n+\t\t\t      != fts->cl->length->expr_type)\n+\t\t       || (ts->cl->length\n+\t\t\t   && ts->cl->length->expr_type == EXPR_CONSTANT\n+\t\t           && mpz_cmp (ts->cl->length->value.integer,\n+\t\t\t\t       fts->cl->length->value.integer) != 0)))\n+\t    gfc_notify_std (GFC_STD_GNU, \"Extension: Function %s at %L with \"\n+\t\t\t    \"entries returning variables of different \"\n+\t\t\t    \"string lengths\", ns->entries->sym->name,\n+\t\t\t    &ns->entries->sym->declared_at);\n \t}\n \n       if (el == NULL)"}, {"sha": "9f5aa260888d37918e2fb070f3e12f1bc050f2e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49", "patch": "@@ -1,3 +1,8 @@\n+2007-12-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34421\n+\t* gfortran.dg/entry_17.f90: New.\n+\n 2007-12-23  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/34536"}, {"sha": "d466266cec3d3168505d92da80080da1ed227553", "filename": "gcc/testsuite/gfortran.dg/entry_17.f90", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_17.f90?ref=107d5ff67f3558b6fc77dfa51d0ccefc29eb7f49", "patch": "@@ -0,0 +1,55 @@\n+function test1(n)\n+  integer  :: n\n+  character(n) :: test1\n+  character(n) :: bar1\n+  test1 = \"\"\n+  return\n+entry bar1()\n+  bar1 = \"\"\n+end function test1\n+\n+function test2()\n+  character(1) :: test2\n+  character(1) :: bar2\n+  test2 = \"\"\n+  return\n+entry bar2()\n+  bar2 = \"\"\n+end function test2\n+\n+function test3() ! { dg-warning \"is obsolescent\" }\n+  character(*) :: test3\n+  character(*) :: bar3 ! { dg-warning \"is obsolescent\" }\n+  test3 = \"\"\n+  return\n+entry bar3()\n+  bar3 = \"\"\n+end function test3 ! { dg-warning \"is obsolescent\" }\n+\n+function test4(n) ! { dg-error \"returning variables of different string lengths\" }\n+  integer  :: n\n+  character(n) :: test4\n+  character(*) :: bar4 ! { dg-warning \"is obsolescent\" }\n+  test4 = \"\"\n+  return\n+entry bar4()\n+  bar4 = \"\"\n+end function test4\n+\n+function test5() ! { dg-error \"returning variables of different string lengths\" }\n+  character(1) :: test5\n+  character(2) :: bar5\n+  test5 = \"\"\n+  return\n+entry bar5()\n+  bar5 = \"\"\n+end function test5\n+\n+function test6() ! { dg-warning \"is obsolescent|returning variables of different string lengths\" }\n+  character(*) :: test6\n+  character(2) :: bar6\n+  test6 = \"\"\n+  return\n+entry bar6()\n+  bar6 = \"\"\n+end function test6 ! { dg-warning \"is obsolescent\" }"}]}