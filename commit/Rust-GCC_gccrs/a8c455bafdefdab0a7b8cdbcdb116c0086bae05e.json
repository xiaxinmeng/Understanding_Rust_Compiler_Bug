{"sha": "a8c455bafdefdab0a7b8cdbcdb116c0086bae05e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThjNDU1YmFmZGVmZGFiMGE3YjhjZGJjZGIxMTZjMDA4NmJhZTA1ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-29T09:23:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-29T11:01:58Z"}, "message": "rtl-optimization/98144 - tame REE memory usage\n\nThis changes the REE dataflow to change the explicit all-ones\nstarting solution to be implicit via a visited flag, removing\nthe need to initially start with fully populated bitmaps for\nall basic-blocks.  That reduces peak memory use when compiling\nthe RTL checking enabled insn-extract.c testcase from PR98144\nfrom 6GB to less than 2GB.\n\n2021-01-29  Richard Biener  <rguenther@suse.de>\n\n\tPR rtl-optimization/98144\n\t* df.h (df_mir_bb_info): Add con_visited member.\n\t* df-problems.c (df_mir_alloc): Initialize con_visited,\n\tdo not fully populate IN and OUT.\n\t(df_mir_reset): Likewise.\n\t(df_mir_confluence_0): Set con_visited.\n\t(df_mir_confluence_n): Properly handle implicitely\n\tfully populated IN and OUT as designated by con_visited\n\tand update con_visited accordingly.", "tree": {"sha": "c318bcce8af65f7e9d2ad4a93cbea2376baa146a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c318bcce8af65f7e9d2ad4a93cbea2376baa146a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8c455bafdefdab0a7b8cdbcdb116c0086bae05e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c455bafdefdab0a7b8cdbcdb116c0086bae05e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c455bafdefdab0a7b8cdbcdb116c0086bae05e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c455bafdefdab0a7b8cdbcdb116c0086bae05e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7429bc9d60c0cb9809a8040bb63dbb9390f40f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7429bc9d60c0cb9809a8040bb63dbb9390f40f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7429bc9d60c0cb9809a8040bb63dbb9390f40f1"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "8fe58581f3272e94ff83bd8f1a2e4c58384c11dc", "filename": "gcc/df-problems.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c455bafdefdab0a7b8cdbcdb116c0086bae05e/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c455bafdefdab0a7b8cdbcdb116c0086bae05e/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=a8c455bafdefdab0a7b8cdbcdb116c0086bae05e", "patch": "@@ -1917,8 +1917,7 @@ df_mir_alloc (bitmap all_blocks)\n \t  bitmap_initialize (&bb_info->gen, &problem_data->mir_bitmaps);\n \t  bitmap_initialize (&bb_info->in, &problem_data->mir_bitmaps);\n \t  bitmap_initialize (&bb_info->out, &problem_data->mir_bitmaps);\n-\t  bitmap_set_range (&bb_info->in, 0, DF_REG_SIZE (df));\n-\t  bitmap_set_range (&bb_info->out, 0, DF_REG_SIZE (df));\n+\t  bb_info->con_visited = false;\n \t}\n     }\n \n@@ -1941,9 +1940,8 @@ df_mir_reset (bitmap all_blocks)\n       gcc_assert (bb_info);\n \n       bitmap_clear (&bb_info->in);\n-      bitmap_set_range (&bb_info->in, 0, DF_REG_SIZE (df));\n       bitmap_clear (&bb_info->out);\n-      bitmap_set_range (&bb_info->out, 0, DF_REG_SIZE (df));\n+      bb_info->con_visited = false;\n     }\n }\n \n@@ -2021,6 +2019,7 @@ df_mir_confluence_0 (basic_block bb)\n   class df_mir_bb_info *bb_info = df_mir_get_bb_info (bb->index);\n \n   bitmap_clear (&bb_info->in);\n+  bb_info->con_visited = true;\n }\n \n \n@@ -2029,12 +2028,27 @@ df_mir_confluence_0 (basic_block bb)\n static bool\n df_mir_confluence_n (edge e)\n {\n-  bitmap op1 = &df_mir_get_bb_info (e->dest->index)->in;\n-  bitmap op2 = &df_mir_get_bb_info (e->src->index)->out;\n-\n   if (e->flags & EDGE_FAKE)\n     return false;\n \n+  df_mir_bb_info *src_info = df_mir_get_bb_info (e->src->index);\n+  /* If SRC was not visited yet then we'll and with all-ones which\n+     means no changes.  Do not consider DST con_visited by this\n+     operation alone either.  */\n+  if (!src_info->con_visited)\n+    return false;\n+\n+  df_mir_bb_info *dst_info = df_mir_get_bb_info (e->dest->index);\n+  bitmap op1 = &dst_info->in;\n+  bitmap op2 = &src_info->out;\n+  /* If DEST was not visited yet just copy the SRC bitmap.  */\n+  if (!dst_info->con_visited)\n+    {\n+      dst_info->con_visited = true;\n+      bitmap_copy (op1, op2);\n+      return true;\n+    }\n+\n   /* A register is must-initialized at the entry of a basic block iff it is\n      must-initialized at the exit of all the predecessors.  */\n   return bitmap_and_into (op1, op2);"}, {"sha": "5effefaa6e3d961cb05c4ac5157fdacd29ec16f4", "filename": "gcc/df.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c455bafdefdab0a7b8cdbcdb116c0086bae05e/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c455bafdefdab0a7b8cdbcdb116c0086bae05e/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=a8c455bafdefdab0a7b8cdbcdb116c0086bae05e", "patch": "@@ -929,6 +929,7 @@ class df_mir_bb_info\n   /* The results of the dataflow problem.  */\n   bitmap_head in;    /* At the top of the block.  */\n   bitmap_head out;   /* At the bottom of the block.  */\n+  bool con_visited;  /* Visited by con_fun_{0,n}.  */\n };\n \n "}]}