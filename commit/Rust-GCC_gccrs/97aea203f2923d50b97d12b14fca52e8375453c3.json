{"sha": "97aea203f2923d50b97d12b14fca52e8375453c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdhZWEyMDNmMjkyM2Q1MGI5N2QxMmIxNGZjYTUyZTgzNzU0NTNjMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T18:22:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T18:22:43Z"}, "message": "(alpha_emit_set_long_const): New function.\n\nFrom-SVN: r12358", "tree": {"sha": "65c27832cf75c830648b7225d0ccbacfa8dd0baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65c27832cf75c830648b7225d0ccbacfa8dd0baf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97aea203f2923d50b97d12b14fca52e8375453c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97aea203f2923d50b97d12b14fca52e8375453c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97aea203f2923d50b97d12b14fca52e8375453c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97aea203f2923d50b97d12b14fca52e8375453c3/comments", "author": null, "committer": null, "parents": [{"sha": "d0f8fcea2689a8c9c32648370c14e0ce40288bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f8fcea2689a8c9c32648370c14e0ce40288bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0f8fcea2689a8c9c32648370c14e0ce40288bfa"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "71989decc93ead1ea324f02b46b2b3920fc29951", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97aea203f2923d50b97d12b14fca52e8375453c3/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97aea203f2923d50b97d12b14fca52e8375453c3/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=97aea203f2923d50b97d12b14fca52e8375453c3", "patch": "@@ -965,6 +965,64 @@ alpha_emit_set_const_1 (target, mode, c, n)\n   return 0;\n }\n \n+#if HOST_BITS_PER_WIDE_INT == 64\n+/* Having failed to find a 3 insn sequence in alpha_emit_set_const,\n+   fall back to a straight forward decomposition.  We do this to avoid\n+   exponential run times encountered when looking for longer sequences\n+   with alpha_emit_set_const.  */\n+\n+rtx\n+alpha_emit_set_long_const (target, c)\n+     rtx target;\n+     HOST_WIDE_INT c;\n+{\n+  /* Use a pseudo if highly optimizing and still generating RTL.  */\n+  rtx subtarget\n+    = (flag_expensive_optimizations && rtx_equal_function_value_matters\n+       ? 0 : target);\n+  HOST_WIDE_INT d1, d2, d3, d4;\n+  rtx r;\n+\n+  /* Decompose the entire word */\n+  d1 = ((c & 0xffff) ^ 0x8000) - 0x8000;\n+  c -= d1;\n+  d2 = ((c & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+  c = (c - d2) >> 32;\n+  d3 = ((c & 0xffff) ^ 0x8000) - 0x8000;\n+  c -= d3;\n+  d4 = ((c & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+\n+  if (c - d4 != 0)\n+    abort();\n+\n+  /* Construct the high word */\n+  if (d3 == 0)\n+    r = copy_to_suggested_reg (GEN_INT (d4), subtarget, DImode);\n+  else if (d4 == 0)\n+    r = copy_to_suggested_reg (GEN_INT (d3), subtarget, DImode);\n+  else\n+    r = expand_binop (DImode, add_optab, GEN_INT (d3), GEN_INT (d4),\n+\t\t      subtarget, 0, OPTAB_WIDEN);\n+\n+  /* Shift it into place */\n+  r = expand_binop (DImode, ashl_optab, r, GEN_INT (32), \n+\t\t    subtarget, 0, OPTAB_WIDEN);\n+\n+  /* Add in the low word */\n+  if (d2 != 0)\n+    r = expand_binop (DImode, add_optab, r, GEN_INT (d2),\n+\t\t      subtarget, 0, OPTAB_WIDEN);\n+  if (d1 != 0)\n+    r = expand_binop (DImode, add_optab, r, GEN_INT (d1),\n+\t\t      subtarget, 0, OPTAB_WIDEN);\n+\n+  if (subtarget == 0)\n+    r = copy_to_suggested_reg(r, target, DImode);\n+\n+  return r;\n+}\n+#endif /* HOST_BITS_PER_WIDE_INT == 64 */\n+\n /* Rewrite a comparison against zero CMP of the form\n    (CODE (cc0) (const_int 0)) so it can be written validly in\n    a conditional move (if_then_else CMP ...)."}]}