{"sha": "626d0d1d01fdc27cc167beb7e28dd6f916428492", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI2ZDBkMWQwMWZkYzI3Y2MxNjdiZWI3ZTI4ZGQ2ZjkxNjQyODQ5Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-20T18:48:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-20T18:48:17Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1030", "tree": {"sha": "7b0e39fcfc04616ea3fa664695fa8b684f0b760b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b0e39fcfc04616ea3fa664695fa8b684f0b760b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/626d0d1d01fdc27cc167beb7e28dd6f916428492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626d0d1d01fdc27cc167beb7e28dd6f916428492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/626d0d1d01fdc27cc167beb7e28dd6f916428492", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626d0d1d01fdc27cc167beb7e28dd6f916428492/comments", "author": null, "committer": null, "parents": [{"sha": "09a1d02802daa8b6af99ad44b065ee7643e17bef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a1d02802daa8b6af99ad44b065ee7643e17bef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a1d02802daa8b6af99ad44b065ee7643e17bef"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "b7660fffefa824f562b826e3c5fb81f31dc9b5bd", "filename": "gcc/jump.c", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626d0d1d01fdc27cc167beb7e28dd6f916428492/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626d0d1d01fdc27cc167beb7e28dd6f916428492/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=626d0d1d01fdc27cc167beb7e28dd6f916428492", "patch": "@@ -952,16 +952,37 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t      && (temp3 = get_condition (insn, &temp4)) != 0\n \t      && can_reverse_comparison_p (temp3, insn))\n \t    {\n-\t      rtx target, seq;\n+\t      rtx temp6, target = 0, seq, init_insn = 0, init = temp2;\n \t      enum rtx_code code = reverse_condition (GET_CODE (temp3));\n \n \t      start_sequence ();\n \n-\t      target = emit_store_flag (gen_reg_rtx (GET_MODE (temp2)), code,\n-\t\t\t\t\tXEXP (temp3, 0), XEXP (temp3, 1),\n-\t\t\t\t\tVOIDmode,\n-\t\t\t\t\t(code == LTU || code == LEU\n-\t\t\t\t\t || code == GTU || code == GEU), 1);\n+\t      /* It must be the case that TEMP2 is not modified in the range\n+\t\t [TEMP4, INSN).  The one exception we make is if the insn\n+\t\t before INSN sets TEMP2 to something which is also unchanged\n+\t\t in that range.  In that case, we can move the initialization\n+\t\t into our sequence.  */\n+\n+\t      if ((temp5 = prev_active_insn (insn)) != 0\n+\t\t  && GET_CODE (temp5) == INSN\n+\t\t  && (temp6 = single_set (temp5)) != 0\n+\t\t  && rtx_equal_p (temp2, SET_DEST (temp6))\n+\t\t  && (CONSTANT_P (SET_SRC (temp6))\n+\t\t      || GET_CODE (SET_SRC (temp6)) == REG\n+\t\t      || GET_CODE (SET_SRC (temp6)) == SUBREG))\n+\t\t{\n+\t\t  emit_insn (PATTERN (temp5));\n+\t\t  init_insn = temp5;\n+\t\t  init = SET_SRC (temp6);\n+\t\t}\n+\n+\t      if (CONSTANT_P (init)\n+\t\t  || ! reg_set_between_p (init, PREV_INSN (temp4), insn))\n+\t\ttarget = emit_store_flag (gen_reg_rtx (GET_MODE (temp2)), code,\n+\t\t\t\t\t  XEXP (temp3, 0), XEXP (temp3, 1),\n+\t\t\t\t\t  VOIDmode,\n+\t\t\t\t\t  (code == LTU || code == LEU\n+\t\t\t\t\t   || code == GTU || code == GEU), 1);\n \n \t      /* If we can do the store-flag, do the addition or\n \t\t subtraction.  */\n@@ -987,6 +1008,10 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \n \t\t  emit_insns_before (seq, temp4);\n \t\t  delete_insn (temp);\n+\n+\t\t  if (init_insn)\n+\t\t    delete_insn (init_insn);\n+\n \t\t  next = NEXT_INSN (insn);\n #ifdef HAVE_cc0\n \t\t  delete_insn (prev_nonnote_insn (insn));"}]}