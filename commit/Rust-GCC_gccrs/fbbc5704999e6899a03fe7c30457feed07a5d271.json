{"sha": "fbbc5704999e6899a03fe7c30457feed07a5d271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJiYzU3MDQ5OTllNjg5OWEwM2ZlN2MzMDQ1N2ZlZWQwN2E1ZDI3MQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2010-07-23T05:25:46Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2010-07-23T05:25:46Z"}, "message": "lto-coff.c (hash_name, eq_name): Move.\n\n2010-07-10  Andi Kleen <ak@linux.intel.com>\n\n\t* lto-coff.c (hash_name, eq_name): Move.\n\t(lto_obj_build_section_table): Call lto_obj_create_section_hash_table.\n\t* lto-elf.c: (hash_name, eq_name): Move.\n\t(lto_obj_build_section_table): Call lto_obj_create_section_hash_table.\n\t* lto-macho.c: (hash_name, eq_name): Move.\n\t(lto_obj_build_section_table): Call lto_obj_create_section_hash_table.\n\t* lto.c: (hash_name, eq_name): Move from lto-*.c\n\t(lto_obj_create_section_hash_table): Add.\n\t(free_with_string): Add.\n\nFrom-SVN: r162441", "tree": {"sha": "15e4e6705d75286482d09221c412ff80c1a6ae9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15e4e6705d75286482d09221c412ff80c1a6ae9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbbc5704999e6899a03fe7c30457feed07a5d271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbbc5704999e6899a03fe7c30457feed07a5d271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbbc5704999e6899a03fe7c30457feed07a5d271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbbc5704999e6899a03fe7c30457feed07a5d271/comments", "author": null, "committer": null, "parents": [{"sha": "0b394350ab1dfa58c6399b9683b034fddaeaa44f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b394350ab1dfa58c6399b9683b034fddaeaa44f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b394350ab1dfa58c6399b9683b034fddaeaa44f"}], "stats": {"total": 118, "additions": 45, "deletions": 73}, "files": [{"sha": "f5aaff8bcaaa685145e5a2eb160cdb782076db36", "filename": "gcc/lto/lto-coff.c", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbbc5704999e6899a03fe7c30457feed07a5d271/gcc%2Flto%2Flto-coff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbbc5704999e6899a03fe7c30457feed07a5d271/gcc%2Flto%2Flto-coff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-coff.c?ref=fbbc5704999e6899a03fe7c30457feed07a5d271", "patch": "@@ -134,29 +134,6 @@ lto_file_init (lto_file *file, const char *filename, off_t offset)\n   file->offset = offset;\n }\n \n-/* Returns a hash code for P.  */\n-\n-static hashval_t\n-hash_name (const void *p)\n-{\n-  const struct lto_section_slot *ds = (const struct lto_section_slot *) p;\n-  return (hashval_t) htab_hash_string (ds->name);\n-}\n-\n-/* Returns nonzero if P1 and P2 are equal.  */\n-\n-static int\n-eq_name (const void *p1, const void *p2)\n-{\n-  const struct lto_section_slot *s1 =\n-    (const struct lto_section_slot *) p1;\n-  const struct lto_section_slot *s2 =\n-    (const struct lto_section_slot *) p2;\n-\n-  return strcmp (s1->name, s2->name) == 0;\n-}\n-\n-\n /* Build a hash table whose key is the section names and whose data is\n    the start and size of each section in the .o file.  */\n \n@@ -169,7 +146,7 @@ lto_obj_build_section_table (lto_file *lto_file)\n   ssize_t strtab_size;\n   char *strtab;\n \n-  section_hash_table = htab_create (37, hash_name, eq_name, free);\n+  section_hash_table = lto_obj_create_section_hash_table ();\n \n   /* Seek to start of string table.  */\n   if (coff_file->strtab_offs != lseek (coff_file->fd,"}, {"sha": "ad496217edea753394475d33ea1c35768f86192d", "filename": "gcc/lto/lto-elf.c", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbbc5704999e6899a03fe7c30457feed07a5d271/gcc%2Flto%2Flto-elf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbbc5704999e6899a03fe7c30457feed07a5d271/gcc%2Flto%2Flto-elf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-elf.c?ref=fbbc5704999e6899a03fe7c30457feed07a5d271", "patch": "@@ -158,31 +158,6 @@ lto_elf_free_shdr (Elf64_Shdr *shdr)\n     free (shdr);\n }\n \n-\n-/* Returns a hash code for P.  */\n-\n-static hashval_t\n-hash_name (const void *p)\n-{\n-  const struct lto_section_slot *ds = (const struct lto_section_slot *) p;\n-  return (hashval_t) htab_hash_string (ds->name);\n-}\n-\n-\n-/* Returns nonzero if P1 and P2 are equal.  */\n-\n-static int\n-eq_name (const void *p1, const void *p2)\n-{\n-  const struct lto_section_slot *s1 =\n-    (const struct lto_section_slot *) p1;\n-  const struct lto_section_slot *s2 =\n-    (const struct lto_section_slot *) p2;\n-\n-  return strcmp (s1->name, s2->name) == 0;\n-}\n-\n-\n /* Build a hash table whose key is the section names and whose data is\n    the start and size of each section in the .o file.  */\n \n@@ -194,7 +169,7 @@ lto_obj_build_section_table (lto_file *lto_file)\n   Elf_Scn *section;\n   size_t base_offset;\n \n-  section_hash_table = htab_create (37, hash_name, eq_name, free);\n+  section_hash_table = lto_obj_create_section_hash_table ();\n \n   base_offset = elf_getbase (elf_file->elf);\n   /* We are reasonably sure that elf_getbase does not fail at this"}, {"sha": "9f89e8e9bb31cd5e0eab246f1111f71957cc444c", "filename": "gcc/lto/lto-macho.c", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbbc5704999e6899a03fe7c30457feed07a5d271/gcc%2Flto%2Flto-macho.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbbc5704999e6899a03fe7c30457feed07a5d271/gcc%2Flto%2Flto-macho.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-macho.c?ref=fbbc5704999e6899a03fe7c30457feed07a5d271", "patch": "@@ -141,28 +141,6 @@ lto_file_init (lto_file *file, const char *filename, off_t offset)\n   file->offset = offset;\n }\n \n-/* Returns a hash code for P.  */\n-\n-static hashval_t\n-hash_name (const void *p)\n-{\n-  const struct lto_section_slot *s = (const struct lto_section_slot *) p;\n-  return (hashval_t) htab_hash_string (s->name);\n-}\n-\n-/* Returns nonzero if P1 and P2 are equal.  */\n-\n-static int\n-eq_name (const void *p1, const void *p2)\n-{\n-  const struct lto_section_slot *s1 =\n-    (const struct lto_section_slot *) p1;\n-  const struct lto_section_slot *s2 =\n-    (const struct lto_section_slot *) p2;\n-\n-  return strcmp (s1->name, s2->name) == 0;\n-}\n-\n /* Build a hash table whose key is the section names and whose data is\n    the start and size of each section in the .o file.  */\n \n@@ -177,7 +155,7 @@ lto_obj_build_section_table (lto_file *lto_file)\n   char *strtab = NULL;\n   int i;\n \n-  section_hash_table = htab_create (37, hash_name, eq_name, free);\n+  section_hash_table = lto_obj_create_section_hash_table ();\n \n   /* Seek the string table.  */\n   /* FIXME The segment name should be in darwin.h, but can we include it"}, {"sha": "2a0049494ca0456a7f2d9dec5dbb0709ab11f42f", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbbc5704999e6899a03fe7c30457feed07a5d271/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbbc5704999e6899a03fe7c30457feed07a5d271/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=fbbc5704999e6899a03fe7c30457feed07a5d271", "patch": "@@ -60,6 +60,47 @@ along with GCC; see the file COPYING3.  If not see\n \n static GTY(()) tree first_personality_decl;\n \n+/* Returns a hash code for P.  */\n+\n+static hashval_t\n+hash_name (const void *p)\n+{\n+  const struct lto_section_slot *ds = (const struct lto_section_slot *) p;\n+  return (hashval_t) htab_hash_string (ds->name);\n+}\n+\n+\n+/* Returns nonzero if P1 and P2 are equal.  */\n+\n+static int\n+eq_name (const void *p1, const void *p2)\n+{\n+  const struct lto_section_slot *s1 =\n+    (const struct lto_section_slot *) p1;\n+  const struct lto_section_slot *s2 =\n+    (const struct lto_section_slot *) p2;\n+\n+  return strcmp (s1->name, s2->name) == 0;\n+}\n+\n+/* Free lto_section_slot */\n+\n+static void\n+free_with_string (void *arg)\n+{\n+  struct lto_section_slot *s = (struct lto_section_slot *)arg;\n+\n+  free (CONST_CAST (char *, s->name));\n+  free (arg);\n+}\n+\n+/* Create section hash table */\n+\n+htab_t \n+lto_obj_create_section_hash_table (void)\n+{\n+  return htab_create (37, hash_name, eq_name, free_with_string);\n+}\n \n /* Read the constructors and inits.  */\n "}, {"sha": "47d9973b31fe34290f0f71b5ade5d3a551576999", "filename": "gcc/lto/lto.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbbc5704999e6899a03fe7c30457feed07a5d271/gcc%2Flto%2Flto.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbbc5704999e6899a03fe7c30457feed07a5d271/gcc%2Flto%2Flto.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.h?ref=fbbc5704999e6899a03fe7c30457feed07a5d271", "patch": "@@ -44,6 +44,7 @@ extern void lto_read_all_file_options (void);\n extern lto_file *lto_obj_file_open (const char *filename, bool writable);\n extern void lto_obj_file_close (lto_file *file);\n extern htab_t lto_obj_build_section_table (lto_file *file);\n+extern htab_t lto_obj_create_section_hash_table (void);\n extern void lto_obj_begin_section (const char *name);\n extern void lto_obj_append_data (const void *data, size_t len, void *block);\n extern void lto_obj_end_section (void);"}]}