{"sha": "a4a7631d2bc892a85adc648c2eb1baaf58c205a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRhNzYzMWQyYmM4OTJhODVhZGM2NDhjMmViMWJhYWY1OGMyMDVhOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-10-07T11:23:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-10-07T11:23:07Z"}, "message": "locale_facets_nonio.tcc (time_get<>:: _M_extract_via_format): Tighten somewhat error checking.\n\n2010-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/locale_facets_nonio.tcc (time_get<>::\n\t_M_extract_via_format): Tighten somewhat error checking.\n\t* testsuite/22_locale/time_get/get_time/char/6.cc: New.\n\t* testsuite/22_locale/time_get/get_time/wchar_t/6.cc: Likewise.\n\nFrom-SVN: r165094", "tree": {"sha": "e747ba3e4e2d6406461d5342919c50632c6d45a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e747ba3e4e2d6406461d5342919c50632c6d45a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4a7631d2bc892a85adc648c2eb1baaf58c205a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a7631d2bc892a85adc648c2eb1baaf58c205a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4a7631d2bc892a85adc648c2eb1baaf58c205a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a7631d2bc892a85adc648c2eb1baaf58c205a9/comments", "author": null, "committer": null, "parents": [{"sha": "2169830c85bc48c43ae14fc0317206a7b7b2fb44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2169830c85bc48c43ae14fc0317206a7b7b2fb44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2169830c85bc48c43ae14fc0317206a7b7b2fb44"}], "stats": {"total": 154, "additions": 152, "deletions": 2}, "files": [{"sha": "7b4750ca6a4702baaf8e2a46a810be79be8cd98e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a7631d2bc892a85adc648c2eb1baaf58c205a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a7631d2bc892a85adc648c2eb1baaf58c205a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a4a7631d2bc892a85adc648c2eb1baaf58c205a9", "patch": "@@ -1,3 +1,10 @@\n+2010-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/locale_facets_nonio.tcc (time_get<>::\n+\t_M_extract_via_format): Tighten somewhat error checking.\n+\t* testsuite/22_locale/time_get/get_time/char/6.cc: New.\n+\t* testsuite/22_locale/time_get/get_time/wchar_t/6.cc: Likewise.\n+\n 2010-10-07  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/45924"}, {"sha": "039cce297abb010abe7676de555c2b64b409d78c", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a7631d2bc892a85adc648c2eb1baaf58c205a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a7631d2bc892a85adc648c2eb1baaf58c205a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=a4a7631d2bc892a85adc648c2eb1baaf58c205a9", "patch": "@@ -633,7 +633,8 @@ _GLIBCXX_END_LDBL_NAMESPACE\n       const size_t __len = char_traits<_CharT>::length(__format);\n \n       ios_base::iostate __tmperr = ios_base::goodbit;\n-      for (size_t __i = 0; __beg != __end && __i < __len && !__tmperr; ++__i)\n+      size_t __i = 0;\n+      for (; __beg != __end && __i < __len && !__tmperr; ++__i)\n \t{\n \t  if (__ctype.narrow(__format[__i], 0) == '%')\n \t    {\n@@ -827,7 +828,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \t    }\n \t}\n \n-      if (__tmperr)\n+      if (__tmperr || __i != __len)\n \t__err |= ios_base::failbit;\n   \n       return __beg;"}, {"sha": "9ecd93ff47965c9410781039f80173f55c6d9069", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/char/6.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a7631d2bc892a85adc648c2eb1baaf58c205a9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a7631d2bc892a85adc648c2eb1baaf58c205a9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F6.cc?ref=a4a7631d2bc892a85adc648c2eb1baaf58c205a9", "patch": "@@ -0,0 +1,71 @@\n+// 2010-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef string::const_iterator iter_type;\n+  typedef time_get<char, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  istringstream iss;\n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const string str0 = \"12\";\n+  tg.get_time(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm0.tm_sec == 0 );\n+  VERIFY( tm0.tm_min == 0 );\n+  // This is quite hard to guarantee now, revisit together with DR 461\n+  // in the C++0x context.\n+  // VERIFY( tm0.tm_hour == 0 );\n+\n+  const string str1 = \"12:30 \";\n+  err = goodbit;\n+  iter_type end1 = tg.get_time(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == failbit );\n+  VERIFY( *end1 == ' ' );\n+  VERIFY( tm1.tm_sec == 0 );\n+  // See above...\n+  // VERIFY( tm1.tm_min == 0 );\n+  // VERIFY( tm1.tm_hour == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f544422f1620dab17c8d24d1be4604f101923bd7", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/wchar_t/6.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a7631d2bc892a85adc648c2eb1baaf58c205a9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a7631d2bc892a85adc648c2eb1baaf58c205a9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F6.cc?ref=a4a7631d2bc892a85adc648c2eb1baaf58c205a9", "patch": "@@ -0,0 +1,71 @@\n+// 2010-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef wstring::const_iterator iter_type;\n+  typedef time_get<wchar_t, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  wistringstream iss;\n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const wstring str0 = L\"12\";\n+  tg.get_time(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm0.tm_sec == 0 );\n+  VERIFY( tm0.tm_min == 0 );\n+  // This is quite hard to guarantee now, revisit together with DR 461\n+  // in the C++0x context.\n+  // VERIFY( tm0.tm_hour == 0 );\n+\n+  const wstring str1 = L\"12:30 \";\n+  err = goodbit;\n+  iter_type end1 = tg.get_time(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == failbit );\n+  VERIFY( *end1 == ' ' );\n+  VERIFY( tm1.tm_sec == 0 );\n+  // See above...\n+  // VERIFY( tm1.tm_min == 0 );\n+  // VERIFY( tm1.tm_hour == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}