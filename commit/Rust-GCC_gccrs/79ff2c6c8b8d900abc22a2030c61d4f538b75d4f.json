{"sha": "79ff2c6c8b8d900abc22a2030c61d4f538b75d4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlmZjJjNmM4YjhkOTAwYWJjMjJhMjAzMGM2MWQ0ZjUzOGI3NWQ0Zg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-04-09T11:41:24Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-04-09T11:41:24Z"}, "message": "64th Cygnus<->FSF merge\n\nFrom-SVN: r9341", "tree": {"sha": "affdf28a98304305e737299defa9b9b42cbd8a65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/affdf28a98304305e737299defa9b9b42cbd8a65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/comments", "author": null, "committer": null, "parents": [{"sha": "aba892c44f2414e7dab1d8b049566b80f39147b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba892c44f2414e7dab1d8b049566b80f39147b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aba892c44f2414e7dab1d8b049566b80f39147b2"}], "stats": {"total": 182, "additions": 145, "deletions": 37}, "files": [{"sha": "719db74a7ae1d24ef734f8c46c90e8bcb6db667f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=79ff2c6c8b8d900abc22a2030c61d4f538b75d4f", "patch": "@@ -1,3 +1,53 @@\n+Sat Apr  8 17:45:41 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* gc.c (build_headof): Use ptrdiff_type_node instead of\n+\tinteger_type_node on pointer arithmetic.\n+\n+Sat Apr  8 11:57:04 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* typeck.c (build_modify_expr): Undo previous change.\n+\n+Thu Apr  6 01:23:50 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* Makefile.in (compiler): Remove ../cc1plus before rebuilding it.\n+\n+\t* repo.c (get_base_filename): Put the .rpo file in the directory\n+\twith the object file, not the source.\n+\n+\t* typeck.c (build_conditional_expr): Handle pmf's better.\n+\n+\t* repo.c (finish_repo): Also use ASM_OUTPUT_LABELREF to print out\n+\tthe name of the symbol.\n+\n+Wed Apr  5 15:24:12 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* repo.c (open_repo_file): Make repo filename DOS-compliant.\n+\t(*): Also write a new repo file if some previously-used\n+\ttemplates are no longer used.  Only remember the identifier.\n+\n+\t* lex.c (cons_up_default_function): If this function belongs to a\n+\ttemplate class, call repo_template_used for it.\n+\n+\t* repo.c (repo_template_used): Using a class means using its vtable,\n+\tif any.\n+\t(finish_repo): Ditto.\n+\n+\t* typeck.c (build_modify_expr): Only wrap TARGET_EXPRs in RTL_EXPRs\n+\tif the type has a complex copy constructor.\n+\n+\t* decl2.c (lang_decode_option): -frepo implies\n+\t-fno-implicit-templates.\n+\n+\t* decl.c (start_function): Clear current_{base,member}_init_list.\n+\n+\t* lex.c (init_lex): Also unset *_eq if ! flag_operator_names.\n+\n+Tue Apr  4 16:11:08 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* decl.c (struct cp_function): Add {base,member}_init_list.\n+\t(push_cp_function_context): Save current_{base,member}_init_list.\n+\t(pop_cp_function_context): Restore them.\n+\n Mon Apr  3 16:55:08 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n \n \t* repo.c (get_base_filename): Take filename parm, fix logic bug."}, {"sha": "711985b0cceda194a5b95562bf3fc76fea675163", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=79ff2c6c8b8d900abc22a2030c61d4f538b75d4f", "patch": "@@ -167,7 +167,7 @@ OBJDEPS = ../stamp-objlist ../c-common.o ../c-pragma.o\n \n compiler: ../cc1plus\n ../cc1plus: $(P) $(CXX_OBJS) $(OBJDEPS) $(LIBDEPS)\n-\trm -f $@\n+\trm -f ../cc1plus\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o ../cc1plus \\\n \t      $(CXX_OBJS) $(OBJS) $(LIBS)\n "}, {"sha": "86534edeff84d00b16311908c29db7225b4cf46d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=79ff2c6c8b8d900abc22a2030c61d4f538b75d4f", "patch": "@@ -10653,6 +10653,8 @@ start_function (declspecs, declarator, raises, pre_parsed_p)\n   current_function_obstack_usage = 0;\n   base_init_insns = NULL_RTX;\n   protect_list = NULL_TREE;\n+  current_base_init_list = NULL_TREE;\n+  current_member_init_list = NULL_TREE;\n \n   clear_temp_name ();\n \n@@ -12137,6 +12139,8 @@ struct cp_function\n   tree ctor_label;\n   tree dtor_label;\n   tree protect_list;\n+  tree base_init_list;\n+  tree member_init_list;\n   rtx result_rtx;\n   rtx base_init_insns;\n   struct cp_function *next;\n@@ -12177,6 +12181,8 @@ push_cp_function_context (context)\n   p->base_init_insns = base_init_insns;\n   p->protect_list = protect_list;\n   p->temp_name_counter = temp_name_counter;\n+  p->base_init_list = current_base_init_list;\n+  p->member_init_list = current_member_init_list;\n }\n \n /* Restore the variables used during compilation of a C++ function.  */\n@@ -12224,6 +12230,8 @@ pop_cp_function_context (context)\n   original_result_rtx = p->result_rtx;\n   base_init_insns = p->base_init_insns;\n   temp_name_counter = p->temp_name_counter;\n+  current_base_init_list = p->base_init_list;\n+  current_member_init_list = p->member_init_list;\n \n   free (p);\n }"}, {"sha": "bb2bf538c42d866c5df4222bfe6b05bc83fc0e5d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=79ff2c6c8b8d900abc22a2030c61d4f538b75d4f", "patch": "@@ -494,6 +494,13 @@ lang_decode_option (p)\n       else if (!strcmp (p, \"ansi-overloading\"))\n \t{\n \t  warning (\"-fansi-overloading is no longer meaningful\");\n+\t  found = 1;\n+\t}\n+      else if (!strcmp (p, \"repo\"))\n+\t{\n+\t  flag_use_repository = 1;\n+\t  flag_implicit_templates = 0;\n+\t  found = 1;\n \t}\n       else for (j = 0;\n \t\t!found && j < sizeof (lang_f_options) / sizeof (lang_f_options[0]);"}, {"sha": "2392599ec8d0d3ac550493b5eb5a77f4300fb946", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=79ff2c6c8b8d900abc22a2030c61d4f538b75d4f", "patch": "@@ -809,12 +809,16 @@ init_lex ()\n     {\n       /* These are new ANSI keywords that may break code.  */\n       UNSET_RESERVED_WORD (\"and\");\n+      UNSET_RESERVED_WORD (\"and_eq\");\n       UNSET_RESERVED_WORD (\"bitand\");\n       UNSET_RESERVED_WORD (\"bitor\");\n       UNSET_RESERVED_WORD (\"compl\");\n       UNSET_RESERVED_WORD (\"not\");\n+      UNSET_RESERVED_WORD (\"not_eq\");\n       UNSET_RESERVED_WORD (\"or\");\n+      UNSET_RESERVED_WORD (\"or_eq\");\n       UNSET_RESERVED_WORD (\"xor\");\n+      UNSET_RESERVED_WORD (\"xor_eq\");\n     }\n   if (! flag_traditional)\n     UNSET_RESERVED_WORD (\"overload\");\n@@ -1784,7 +1788,10 @@ cons_up_default_function (type, full_name, kind)\n     return fn;\n \n   if (processing_template_defn)\n-    SET_DECL_IMPLICIT_INSTANTIATION (fn);\n+    {\n+      SET_DECL_IMPLICIT_INSTANTIATION (fn);\n+      repo_template_used (fn);\n+    }\n \n   if (CLASSTYPE_INTERFACE_KNOWN (type))\n     {"}, {"sha": "bc27a27cbcbdd77bd484fd0141a41a31c6396f24", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 67, "deletions": 35, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=79ff2c6c8b8d900abc22a2030c61d4f538b75d4f", "patch": "@@ -29,19 +29,19 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"input.h\"\n+#include \"obstack.h\"\n \n extern char * rindex ();\n extern char * getenv ();\n \n static tree pending_repo;\n+static tree original_repo;\n static char repo_name[1024];\n static FILE *repo_file;\n \n extern int flag_use_repository;\n extern int errorcount, sorrycount;\n \n-static int repo_changed;\n-\n #define IDENTIFIER_REPO_USED(NODE)   (TREE_LANG_FLAG_3 (NODE))\n #define IDENTIFIER_REPO_CHOSEN(NODE) (TREE_LANG_FLAG_4 (NODE))\n \n@@ -93,7 +93,10 @@ repo_template_used (t)\n \n   if (TREE_CODE_CLASS (TREE_CODE (t)) == 't')\n     {\n-      id = DECL_ASSEMBLER_NAME (TYPE_MAIN_DECL (t));\n+      id = TYPE_BINFO_VTABLE (t);\n+      if (id == NULL_TREE)\n+\treturn;\n+      id = DECL_ASSEMBLER_NAME (id);\n       if (IDENTIFIER_REPO_CHOSEN (id))\n \tmark_class_instantiated (t, 0);\n     }\n@@ -108,10 +111,9 @@ repo_template_used (t)\n \n   if (! IDENTIFIER_REPO_USED (id))\n     {\n-      repo_changed = 1;\n       IDENTIFIER_REPO_USED (id) = 1;\n+      pending_repo = perm_tree_cons (NULL_TREE, id, pending_repo);\n     }\n-  pending_repo = perm_tree_cons (NULL_TREE, t, pending_repo);\n }\n \n /* Note that the vtable for a class has been used, and offer to emit it.  */\n@@ -160,11 +162,8 @@ save_string (s, len)\n      char *s;\n      int len;\n {\n-  register char *result = xmalloc (len + 1);\n-\n-  bcopy (s, result, len);\n-  result[len] = 0;\n-  return result;\n+  extern struct obstack temporary_obstack;\n+  return obstack_copy0 (&temporary_obstack, s, len);\n }\n \n static char *\n@@ -201,7 +200,18 @@ get_base_filename (filename)\n   if (compiling && output)\n     return output;\n \n-  return save_string (filename, strlen (filename));\n+  if (p && ! compiling)\n+    {\n+      warning (\"-frepo must be used with -c\");\n+      flag_use_repository = 0;\n+      return NULL;\n+    }\n+\n+  p = rindex (filename, '/');\n+  if (p)\n+    return p+1;\n+  else\n+    return filename;\n }        \n \n static void\n@@ -210,24 +220,28 @@ open_repo_file (filename)\n {\n   register char *p, *q;\n   char *file = get_base_filename (filename);\n-  char *s = rindex (file, '/');\n+  char *s;\n+\n+  if (file == NULL)\n+    return;\n+\n+  s = rindex (file, '/');\n   if (s == NULL)\n     s = file;\n   else\n     ++s;\n \n   for (p = repo_name, q = file; q < s; )\n     *p++ = *q++;\n-  *p++ = '.';\n+/*  *p++ = '.'; */\n   if ((s = rindex (q, '.')) == NULL)\n     strcpy (p, q);\n   else\n     for (; q < s;)\n       *p++ = *q++;\n-  strcat (p, \".repo\");\n+  strcat (p, \".rpo\");\n \n   repo_file = fopen (repo_name, \"r\");\n-  free (file);\n }\n \n void\n@@ -239,18 +253,13 @@ init_repo (filename)\n   if (! flag_use_repository)\n     return;\n \n-  open_repo_file ();\n+  open_repo_file (filename);\n \n   if (repo_file == 0)\n     return;\n \n   while (fgets (buf, 1024, repo_file))\n     {\n-      int len = strlen (buf) - 1;\n-      if (buf[len] != '\\n')\n-\terror (\"repository info line too long in %s\", repo_name);\n-      buf[len] = '\\0';\n-\n       switch (buf[0])\n \t{\n \tcase 'A':\n@@ -260,10 +269,16 @@ init_repo (filename)\n \tcase 'C':\n \tcase 'O':\n \t  {\n-\t    tree id = get_identifier (&buf[2]);\n-\t    IDENTIFIER_REPO_USED (id) = 1;\n+\t    char *q;\n+\t    tree id;\n+\n+\t    for (q = &buf[2]; *q && *q != ' ' && *q != '\\n'; ++q) ;\n+\t    q = save_string (&buf[2], q - &buf[2]);\n+\t    id = get_identifier (q);\n+\n \t    if (buf[0] == 'C')\n \t      IDENTIFIER_REPO_CHOSEN (id) = 1;\n+\t    original_repo = perm_tree_cons (NULL_TREE, id, original_repo);\n \t  }\n \t  break;\n \tdefault:\n@@ -293,12 +308,37 @@ finish_repo ()\n {\n   tree t;\n   char *p;\n+  int repo_changed = 0;\n \n   if (! flag_use_repository)\n     return;\n \n   /* Do we have to write out a new info file?  */\n \n+  /* Are there any old templates that aren't used any longer?  */\n+  \n+  for (t = original_repo; t; t = TREE_CHAIN (t))\n+    {\n+      if (! IDENTIFIER_REPO_USED (TREE_VALUE (t)))\n+\t{\n+\t  repo_changed = 1;\n+\t  break;\n+\t}\n+      IDENTIFIER_REPO_USED (TREE_VALUE (t)) = 0;\n+    }\n+\n+  /* Are there any templates that are newly used?  */\n+  \n+  if (! repo_changed)\n+    for (t = pending_repo; t; t = TREE_CHAIN (t))\n+      {\n+\tif (IDENTIFIER_REPO_USED (TREE_VALUE (t)))\n+\t  {\n+\t    repo_changed = 1;\n+\t    break;\n+\t  }\n+      }\n+\n   if (! repo_changed || errorcount || sorrycount)\n     goto out;\n \n@@ -320,19 +360,11 @@ finish_repo ()\n   for (t = pending_repo; t; t = TREE_CHAIN (t))\n     {\n       tree val = TREE_VALUE (t);\n-      char type;\n-\n-      if (TREE_CODE_CLASS (TREE_CODE (val)) == 't')\n-\tval = TYPE_MAIN_DECL (val);\n-      val = DECL_ASSEMBLER_NAME (val);\n-\n-      if (! IDENTIFIER_REPO_USED (val))\n-\tcontinue;\n-      IDENTIFIER_REPO_USED (val) = 0;\n-\n-      type = IDENTIFIER_REPO_CHOSEN (val) ? 'C' : 'O';\n+      char type = IDENTIFIER_REPO_CHOSEN (val) ? 'C' : 'O';\n \n-      fprintf (repo_file, \"%c %s\\n\", type, IDENTIFIER_POINTER (val));\n+      fprintf (repo_file, \"%c %s \", type, IDENTIFIER_POINTER (val));\n+      ASM_OUTPUT_LABELREF (repo_file, IDENTIFIER_POINTER (val));\n+      putc ('\\n', repo_file);\n     }\n \n  out:"}, {"sha": "d26be49265239b5e1f7265c9326e28e4cddb6c10", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ff2c6c8b8d900abc22a2030c61d4f538b75d4f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=79ff2c6c8b8d900abc22a2030c61d4f538b75d4f", "patch": "@@ -4769,6 +4769,10 @@ build_conditional_expr (ifexp, op1, op2)\n \t}\n     }\n \n+  if (TREE_CODE (result_type) == POINTER_TYPE\n+      && TREE_CODE (TREE_TYPE (result_type)) == METHOD_TYPE)\n+    result_type = build_ptrmemfunc_type (result_type);\n+\n   if (result_type != TREE_TYPE (op1))\n     op1 = convert_and_check (result_type, op1);\n   if (result_type != TREE_TYPE (op2))"}]}