{"sha": "d95f258e9027e7d797bde4eace3e29ab7d9382db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk1ZjI1OGU5MDI3ZTdkNzk3YmRlNGVhY2UzZTI5YWI3ZDkzODJkYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-25T21:51:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-25T21:51:33Z"}, "message": "re PR c++/48707 ([c++0x] ICE initializing static const int)\n\n\tPR c++/48707\n\t* decl.c (type_dependent_init_p): New.\n\t(cp_finish_decl): Check it.\n\t* pt.c (any_type_dependent_elements_p): New.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r172941", "tree": {"sha": "85e95790d9e34a31798f2d73b8ff70073b0ff6ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85e95790d9e34a31798f2d73b8ff70073b0ff6ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d95f258e9027e7d797bde4eace3e29ab7d9382db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95f258e9027e7d797bde4eace3e29ab7d9382db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d95f258e9027e7d797bde4eace3e29ab7d9382db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95f258e9027e7d797bde4eace3e29ab7d9382db/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d583bb9fcd52dfe308a438bf31433ad8f23c0d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d583bb9fcd52dfe308a438bf31433ad8f23c0d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d583bb9fcd52dfe308a438bf31433ad8f23c0d5"}], "stats": {"total": 94, "additions": 85, "deletions": 9}, "files": [{"sha": "d2dbe4ea2e81f191f782a6b0de426c7141ca870b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d95f258e9027e7d797bde4eace3e29ab7d9382db", "patch": "@@ -1,3 +1,11 @@\n+2011-04-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/48707\n+\t* decl.c (type_dependent_init_p): New.\n+\t(cp_finish_decl): Check it.\n+\t* pt.c (any_type_dependent_elements_p): New.\n+\t* cp-tree.h: Declare it.\n+\n 2011-04-20  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (finish_compound_literal): Don't put an array"}, {"sha": "66ac4e8d26dc31c06440fff74af8f565a0dc00bb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d95f258e9027e7d797bde4eace3e29ab7d9382db", "patch": "@@ -5105,6 +5105,7 @@ extern bool dependent_template_p\t\t(tree);\n extern bool dependent_template_id_p\t\t(tree, tree);\n extern bool type_dependent_expression_p\t\t(tree);\n extern bool any_type_dependent_arguments_p      (const VEC(tree,gc) *);\n+extern bool any_type_dependent_elements_p       (const_tree);\n extern bool type_dependent_expression_p_push\t(tree);\n extern bool value_dependent_expression_p\t(tree);\n extern bool any_value_dependent_elements_p      (const_tree);"}, {"sha": "dcd18ab5b8884d7a9b242aea0132d2c37e1d7dee", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d95f258e9027e7d797bde4eace3e29ab7d9382db", "patch": "@@ -5700,6 +5700,36 @@ initialize_artificial_var (tree decl, VEC(constructor_elt,gc) *v)\n   make_rtl_for_nonlocal_decl (decl, init, /*asmspec=*/NULL);\n }\n \n+/* INIT is the initializer for a variable, as represented by the\n+   parser.  Returns true iff INIT is type-dependent.  */\n+\n+static bool\n+type_dependent_init_p (tree init)\n+{\n+  if (TREE_CODE (init) == TREE_LIST)\n+    /* A parenthesized initializer, e.g.: int i (3, 2); ? */\n+    return any_type_dependent_elements_p (init);\n+  else if (TREE_CODE (init) == CONSTRUCTOR)\n+  /* A brace-enclosed initializer, e.g.: int i = { 3 }; ? */\n+    {\n+      VEC(constructor_elt, gc) *elts;\n+      size_t nelts;\n+      size_t i;\n+\n+      elts = CONSTRUCTOR_ELTS (init);\n+      nelts = VEC_length (constructor_elt, elts);\n+      for (i = 0; i < nelts; ++i)\n+\tif (type_dependent_init_p (VEC_index (constructor_elt,\n+\t\t\t\t\t      elts, i)->value))\n+\t  return true;\n+    }\n+  else\n+    /* It must be a simple expression, e.g., int i = 3;  */\n+    return type_dependent_expression_p (init);\n+\n+  return false;\n+}\n+\n /* INIT is the initializer for a variable, as represented by the\n    parser.  Returns true iff INIT is value-dependent.  */\n \n@@ -5876,19 +5906,25 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t template is instantiated.  But, if DECL is a variable constant\n \t then it can be used in future constant expressions, so its value\n \t must be available. */\n-      if (init\n-\t  && init_const_expr_p\n-\t  && !type_dependent_p\n-\t  && decl_maybe_constant_var_p (decl)\n-\t  && !value_dependent_init_p (init))\n-\t{\n+\n+      if (TREE_CODE (decl) != VAR_DECL || dependent_type_p (type))\n+\t/* We can't do anything if the decl has dependent type.  */;\n+      else if (init\n+\t       && init_const_expr_p\n+\t       && !type_dependent_p\n+\t       && decl_maybe_constant_var_p (decl)\n+\t       && !type_dependent_init_p (init)\n+\t       && !value_dependent_init_p (init))\n+\t{\n+\t  /* This variable seems to be a non-dependent constant, so process\n+\t     its initializer.  If check_initializer returns non-null the\n+\t     initialization wasn't constant after all.  */\n \t  tree init_code = check_initializer (decl, init, flags, &cleanup);\n \t  if (init_code == NULL_TREE)\n \t    init = NULL_TREE;\n \t}\n-      else if (TREE_CODE (decl) == VAR_DECL\n-\t       && !DECL_PRETTY_FUNCTION_P (decl)\n-\t       && !type_dependent_p)\n+      else if (!DECL_PRETTY_FUNCTION_P (decl))\n+\t/* Deduce array size even if the initializer is dependent.  */\n \tmaybe_deduce_size_from_array_init (decl, init);\n \n       if (init)"}, {"sha": "70fcbba73955cc4dc5c126b3f5f54216c8792147", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d95f258e9027e7d797bde4eace3e29ab7d9382db", "patch": "@@ -18456,6 +18456,19 @@ any_type_dependent_arguments_p (const VEC(tree,gc) *args)\n   return false;\n }\n \n+/* Returns TRUE if LIST (a TREE_LIST whose TREE_VALUEs are\n+   expressions) contains any type-dependent expressions.  */\n+\n+bool\n+any_type_dependent_elements_p (const_tree list)\n+{\n+  for (; list; list = TREE_CHAIN (list))\n+    if (value_dependent_expression_p (TREE_VALUE (list)))\n+      return true;\n+\n+  return false;\n+}\n+\n /* Returns TRUE if LIST (a TREE_LIST whose TREE_VALUEs are\n    expressions) contains any value-dependent expressions.  */\n "}, {"sha": "cd361e7e18c766666f63f35e4fe0e16a3b36f386", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d95f258e9027e7d797bde4eace3e29ab7d9382db", "patch": "@@ -1,3 +1,7 @@\n+2011-04-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/regress/template-const2.C: New.\n+\n 2011-04-25  Jeff Law <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/vrp56.c: new test."}, {"sha": "25354b3a54a5faa0915ae4ab7f2acbfaa87432ce", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/template-const2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-const2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95f258e9027e7d797bde4eace3e29ab7d9382db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-const2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-const2.C?ref=d95f258e9027e7d797bde4eace3e29ab7d9382db", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/48707\n+// { dg-options -std=c++0x }\n+\n+struct A {\n+  static int a();\n+};\n+\n+template<typename X>\n+struct B: A {\n+  static int const b;\n+};\n+\n+template<typename X>\n+int const B<X>::b=B<X>::a();"}]}