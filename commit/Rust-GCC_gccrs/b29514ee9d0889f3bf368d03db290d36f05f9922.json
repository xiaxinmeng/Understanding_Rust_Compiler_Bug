{"sha": "b29514ee9d0889f3bf368d03db290d36f05f9922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5NTE0ZWU5ZDA4ODlmM2JmMzY4ZDAzZGIyOTBkMzZmMDVmOTkyMg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-09-24T13:58:43Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-09-24T13:58:43Z"}, "message": "reload1.c (choose_reload_regs): Also try inheritance when reload_in is a stack slot of a pseudo...\n\n\t* reload1.c (choose_reload_regs): Also try inheritance when\n\treload_in is a stack slot of a pseudo, even if we already got a\n\treload reg.\n\nFrom-SVN: r22571", "tree": {"sha": "16b3b4606cc4c408ef87c448b94886678964d256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16b3b4606cc4c408ef87c448b94886678964d256"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b29514ee9d0889f3bf368d03db290d36f05f9922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29514ee9d0889f3bf368d03db290d36f05f9922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b29514ee9d0889f3bf368d03db290d36f05f9922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29514ee9d0889f3bf368d03db290d36f05f9922/comments", "author": null, "committer": null, "parents": [{"sha": "5adf6da0eb8b7cf355e5db02e8266637e24a5d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5adf6da0eb8b7cf355e5db02e8266637e24a5d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5adf6da0eb8b7cf355e5db02e8266637e24a5d25"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "0b9d673dc94be82a58af7e67cd7fe326a024be55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29514ee9d0889f3bf368d03db290d36f05f9922/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29514ee9d0889f3bf368d03db290d36f05f9922/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b29514ee9d0889f3bf368d03db290d36f05f9922", "patch": "@@ -1,3 +1,9 @@\n+Thu Sep 24 21:48:51 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload1.c (choose_reload_regs): Also try inheritance when\n+\treload_in is a stack slot of a pseudo, even if we already got a\n+\treload reg.\n+\n Thu Sep 24 21:22:39 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* reload1.c (reload_cse_regs_1): Renamed from reload_cse_regs."}, {"sha": "bb7aa3fcfd805a5fd72c22fe1866dd40d9c05c86", "filename": "gcc/reload1.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29514ee9d0889f3bf368d03db290d36f05f9922/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29514ee9d0889f3bf368d03db290d36f05f9922/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=b29514ee9d0889f3bf368d03db290d36f05f9922", "patch": "@@ -5675,13 +5675,16 @@ choose_reload_regs (insn, avoid_return_reg)\n \t      && ! reload_secondary_p[r])\n \t    continue;\n \n-\t  /* If find_reloads chose a to use reload_in or reload_out as a reload\n+\t  /* If find_reloads chose to use reload_in or reload_out as a reload\n \t     register, we don't need to chose one.  Otherwise, try even if it\n \t     found one since we might save an insn if we find the value lying\n-\t     around.  */\n+\t     around.\n+\t     Try also when reload_in is a pseudo without a hard reg.  */\n \t  if (reload_in[r] != 0 && reload_reg_rtx[r] != 0\n \t      && (rtx_equal_p (reload_in[r], reload_reg_rtx[r])\n-\t\t  || rtx_equal_p (reload_out[r], reload_reg_rtx[r])))\n+\t\t  || (rtx_equal_p (reload_out[r], reload_reg_rtx[r])\n+\t\t      && GET_CODE (reload_in[r]) != MEM\n+\t\t      && true_regnum (reload_in[r]) < FIRST_PSEUDO_REGISTER)))\n \t    continue;\n \n #if 0 /* No longer needed for correct operation.\n@@ -5827,7 +5830,13 @@ choose_reload_regs (insn, avoid_return_reg)\n \t\t\t      /* Don't really use the inherited spill reg\n \t\t\t\t if we need it wider than we've got it.  */\n \t\t\t      || (GET_MODE_SIZE (reload_mode[r])\n-\t\t\t\t  > GET_MODE_SIZE (mode)))\n+\t\t\t\t  > GET_MODE_SIZE (mode))\n+\t\t\t      /* If find_reloads chose reload_out as reload\n+\t\t\t\t register, stay with it - that leaves the\n+\t\t\t\t inherited register for subsequent reloads.  */\n+\t\t\t      || (reload_reg_rtx\n+\t\t\t\t  && rtx_equal_p (reload_out[r],\n+\t\t\t\t\t\t  reload_reg_rtx[r])))\n \t\t\t    reload_override_in[r] = reg_last_reload_reg[regno];\n \t\t\t  else\n \t\t\t    {"}]}