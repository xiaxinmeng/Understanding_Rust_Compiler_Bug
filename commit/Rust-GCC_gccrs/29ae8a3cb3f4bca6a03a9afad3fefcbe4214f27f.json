{"sha": "29ae8a3cb3f4bca6a03a9afad3fefcbe4214f27f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlhZThhM2NiM2Y0YmNhNmEwM2E5YWZhZDNmZWZjYmU0MjE0ZjI3Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-07-14T11:41:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-07-14T11:41:24Z"}, "message": "(output_{and,ior,xor}si3): New functions from patterns bodies.\n\nFrom-SVN: r14431", "tree": {"sha": "3c165ea9afed8ad7afb32fe40b426125cee4f8d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c165ea9afed8ad7afb32fe40b426125cee4f8d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29ae8a3cb3f4bca6a03a9afad3fefcbe4214f27f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ae8a3cb3f4bca6a03a9afad3fefcbe4214f27f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ae8a3cb3f4bca6a03a9afad3fefcbe4214f27f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ae8a3cb3f4bca6a03a9afad3fefcbe4214f27f/comments", "author": null, "committer": null, "parents": [{"sha": "5f24901c296f7f44acddd2f4ea0556ef9df55bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f24901c296f7f44acddd2f4ea0556ef9df55bf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f24901c296f7f44acddd2f4ea0556ef9df55bf5"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "781e11cf65cb3e31cf6f471e127cfe5b0556fc6d", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ae8a3cb3f4bca6a03a9afad3fefcbe4214f27f/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ae8a3cb3f4bca6a03a9afad3fefcbe4214f27f/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=29ae8a3cb3f4bca6a03a9afad3fefcbe4214f27f", "patch": "@@ -3148,3 +3148,122 @@ const_sint32_operand (op, mode)\n   return (GET_CODE (op) == CONST_INT\n \t  && (INTVAL (op) >= (-0x7fffffff - 1) && INTVAL (op) <= 0x7fffffff));\n }\n+\n+char *\n+output_andsi3 (operands)\n+     rtx *operands;\n+{\n+  int logval;\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && (INTVAL (operands[2]) | 0xffff) == 0xffffffff\n+      && (DATA_REG_P (operands[0])\n+\t  || offsettable_memref_p (operands[0]))\n+      && !TARGET_5200)\n+    {\n+      if (GET_CODE (operands[0]) != REG)\n+        operands[0] = adj_offsettable_operand (operands[0], 2);\n+      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t     INTVAL (operands[2]) & 0xffff);\n+      /* Do not delete a following tstl %0 insn; that would be incorrect.  */\n+      CC_STATUS_INIT;\n+      if (operands[2] == const0_rtx)\n+        return \"clr%.w %0\";\n+      return \"and%.w %2,%0\";\n+    }\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && (logval = exact_log2 (~ INTVAL (operands[2]))) >= 0\n+      && (DATA_REG_P (operands[0])\n+          || offsettable_memref_p (operands[0])))\n+    {\n+      if (DATA_REG_P (operands[0]))\n+        {\n+          operands[1] = gen_rtx (CONST_INT, VOIDmode, logval);\n+        }\n+      else\n+        {\n+\t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n+\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval % 8);\n+        }\n+      /* This does not set condition codes in a standard way.  */\n+      CC_STATUS_INIT;\n+      return \"bclr %1,%0\";\n+    }\n+  return \"and%.l %2,%0\";\n+}\n+\n+char *\n+output_iorsi3 (operands)\n+     rtx *operands;\n+{\n+  register int logval;\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && INTVAL (operands[2]) >> 16 == 0\n+      && (DATA_REG_P (operands[0])\n+\t  || offsettable_memref_p (operands[0]))\n+      && !TARGET_5200)\n+    {\n+      if (GET_CODE (operands[0]) != REG)\n+        operands[0] = adj_offsettable_operand (operands[0], 2);\n+      /* Do not delete a following tstl %0 insn; that would be incorrect.  */\n+      CC_STATUS_INIT;\n+      if (INTVAL (operands[2]) == 0xffff)\n+\treturn \"mov%.w %2,%0\";\n+      return \"or%.w %2,%0\";\n+    }\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && (logval = exact_log2 (INTVAL (operands[2]))) >= 0\n+      && (DATA_REG_P (operands[0])\n+\t  || offsettable_memref_p (operands[0])))\n+    {\n+      if (DATA_REG_P (operands[0]))\n+\t{\n+\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval);\n+\t}\n+      else\n+        {\n+\t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n+\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval % 8);\n+\t}\n+      CC_STATUS_INIT;\n+      return \"bset %1,%0\";\n+    }\n+  return \"or%.l %2,%0\";\n+}\n+\n+char *\n+output_xorsi3 (operands)\n+     rtx *operands;\n+{\n+  register int logval;\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && INTVAL (operands[2]) >> 16 == 0\n+      && (offsettable_memref_p (operands[0]) || DATA_REG_P (operands[0]))\n+      && !TARGET_5200)\n+    {\n+      if (! DATA_REG_P (operands[0]))\n+\toperands[0] = adj_offsettable_operand (operands[0], 2);\n+      /* Do not delete a following tstl %0 insn; that would be incorrect.  */\n+      CC_STATUS_INIT;\n+      if (INTVAL (operands[2]) == 0xffff)\n+\treturn \"not%.w %0\";\n+      return \"eor%.w %2,%0\";\n+    }\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && (logval = exact_log2 (INTVAL (operands[2]))) >= 0\n+      && (DATA_REG_P (operands[0])\n+\t  || offsettable_memref_p (operands[0])))\n+    {\n+      if (DATA_REG_P (operands[0]))\n+\t{\n+\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval);\n+\t}\n+      else\n+        {\n+\t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n+\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval % 8);\n+\t}\n+      CC_STATUS_INIT;\n+      return \"bchg %1,%0\";\n+    }\n+  return \"eor%.l %2,%0\";\n+}"}]}