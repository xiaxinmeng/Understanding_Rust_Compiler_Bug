{"sha": "fc52f99da8f58e11eadd3d6ff668cc949d120917", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1MmY5OWRhOGY1OGUxMWVhZGQzZDZmZjY2OGNjOTQ5ZDEyMDkxNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-09-11T13:47:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-09-11T13:47:36Z"}, "message": "re PR libstdc++/41316 ([C++0x] forward_list::sort violates strict aliasing rules)\n\n2009-09-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/41316\n\t* include/bits/forward_list.h (_Fwd_list_node_base<>::_M_sort_after):\n\tRemove.\n\t(forward_list<>::sort(_Comp)): Only declare.\n\t(forward_list<>::sort()): Forward to the latter.\n\t* include/bits/forward_list.tcc (_Fwd_list_node_base<>::_M_sort_after):\n\tRemove definition.\n\t(forward_list<>::sort(_Comp)): Define.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: Adjust dg-error line number.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r151635", "tree": {"sha": "dec4567db8a428eae579faa2d0d8dfb0c421b037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dec4567db8a428eae579faa2d0d8dfb0c421b037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc52f99da8f58e11eadd3d6ff668cc949d120917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc52f99da8f58e11eadd3d6ff668cc949d120917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc52f99da8f58e11eadd3d6ff668cc949d120917", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc52f99da8f58e11eadd3d6ff668cc949d120917/comments", "author": null, "committer": null, "parents": [{"sha": "db689ed6ab4971e329c405bf9701e0605e98e059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db689ed6ab4971e329c405bf9701e0605e98e059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db689ed6ab4971e329c405bf9701e0605e98e059"}], "stats": {"total": 254, "additions": 130, "deletions": 124}, "files": [{"sha": "7d1ce936f708708da88a62e98998a422bff129ba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fc52f99da8f58e11eadd3d6ff668cc949d120917", "patch": "@@ -1,3 +1,22 @@\n+2009-09-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/41316\n+\t* include/bits/forward_list.h (_Fwd_list_node_base<>::_M_sort_after):\n+\tRemove.\n+\t(forward_list<>::sort(_Comp)): Only declare.\n+\t(forward_list<>::sort()): Forward to the latter.\n+\t* include/bits/forward_list.tcc (_Fwd_list_node_base<>::_M_sort_after):\n+\tRemove definition.\n+\t(forward_list<>::sort(_Comp)): Define.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: Adjust dg-error line number.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2009-09-11  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* src/Makefile.am (libstdc___la_LINK): New."}, {"sha": "0ec5a1141a99aa440f3ecee11aacaf7cf438a322", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=fc52f99da8f58e11eadd3d6ff668cc949d120917", "patch": "@@ -92,10 +92,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         : _Fwd_list_node_base<_Alloc>(), \n           _M_value(std::forward<_Args>(__args)...) { }\n \n-      template<typename _Comp>\n-        void\n-        _M_sort_after(_Comp __comp);\n-\n       _Tp _M_value;\n     };\n \n@@ -1149,7 +1145,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       void\n       merge(forward_list&& __list)\n-      { this->merge(std::forward<forward_list>(__list), std::less<_Tp>()); }\n+      { this->merge(std::move(__list), std::less<_Tp>()); }\n \n       /**\n        *  @brief  Merge sorted lists according to comparison function.\n@@ -1174,10 +1170,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       void\n       sort()\n-      {\n-        _Node* __tmp = __static_pointer_cast<_Node*>(&this->_M_impl._M_head);\n-        __tmp->_M_sort_after(std::less<_Tp>());\n-      }\n+      { this->sort(std::less<_Tp>()); }\n \n       /**\n        *  @brief  Sort the forward_list using a comparison function.\n@@ -1187,11 +1180,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       template<typename _Comp>\n         void\n-        sort(_Comp __comp)\n-        {\n-          _Node* __tmp = __static_pointer_cast<_Node*>(&this->_M_impl._M_head);\n-          __tmp->_M_sort_after(__comp);\n-        }\n+        sort(_Comp __comp);\n \n       /**\n        *  @brief  Reverse the elements in list.\n@@ -1285,7 +1274,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(forward_list<_Tp, _Alloc>& __lx,\n-         forward_list<_Tp, _Alloc>& __ly)\n+\t forward_list<_Tp, _Alloc>& __ly)\n     { __lx.swap(__ly); }\n \n _GLIBCXX_END_NAMESPACE // namespace std"}, {"sha": "135736990619bebbb071021245184179ed85d587", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 103, "deletions": 105, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=fc52f99da8f58e11eadd3d6ff668cc949d120917", "patch": "@@ -75,111 +75,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n- /**\n-  *  @brief  Sort the singly linked list starting after this node.\n-  *          This node is assumed to be an empty head node (of type\n-  *          _Fwd_list_node_base).\n-  */\n-  template<typename _Tp, class _Alloc>\n-    template<typename _Comp>\n-      void\n-      _Fwd_list_node<_Tp, _Alloc>::\n-      _M_sort_after(_Comp __comp)\n-      {\n-        // If `next' is 0, return immediately.\n-        _Pointer __list = __static_pointer_cast<_Pointer>(this->_M_next);\n-        if (!__list)\n-          return;\n-\n-        unsigned long __insize = 1;\n-\n-        while (1)\n-          {\n-            _Pointer __p = __list;\n-            __list = 0;\n-            _Pointer __tail = 0;\n-\n-            // Count number of merges we do in this pass.\n-            unsigned long __nmerges = 0;\n-\n-            while (__p)\n-              {\n-                ++__nmerges;\n-                // There exists a merge to be done.\n-                // Step `insize' places along from p.\n-                _Pointer __q = __p;\n-                unsigned long __psize = 0;\n-                for (unsigned long __i = 0; __i < __insize; ++__i)\n-                  {\n-                    ++__psize;\n-                    __q = __static_pointer_cast<_Pointer>(__q->_M_next);\n-                    if (!__q)\n-                      break;\n-                  }\n-\n-                // If q hasn't fallen off end, we have two lists to merge.\n-                unsigned long __qsize = __insize;\n-\n-                // Now we have two lists; merge them.\n-                while (__psize > 0 || (__qsize > 0 && __q))\n-                  {\n-                    // Decide whether next node of merge comes from p or q.\n-                    _Pointer __e;\n-                    if (__psize == 0)\n-                      {\n-                        // p is empty; e must come from q.\n-                        __e = __q;\n-                        __q = __static_pointer_cast<_Pointer>(__q->_M_next);\n-                        --__qsize;\n-                      }\n-                    else if (__qsize == 0 || !__q)\n-                      {\n-                        // q is empty; e must come from p.\n-                        __e = __p;\n-                        __p = __static_pointer_cast<_Pointer>(__p->_M_next);\n-                        --__psize;\n-                      }\n-                    else if (__comp(__p->_M_value, __q->_M_value))\n-                      {\n-                        // First node of p is lower; e must come from p.\n-                        __e = __p;\n-                        __p = __static_pointer_cast<_Pointer>(__p->_M_next);\n-                        --__psize;\n-                      }\n-                    else\n-                      {\n-                        // First node of q is lower; e must come from q.\n-                        __e = __q;\n-                        __q = __static_pointer_cast<_Pointer>(__q->_M_next);\n-                        --__qsize;\n-                      }\n-\n-                    // Add the next node to the merged list.\n-                    if (__tail)\n-                      __tail->_M_next = __e;\n-                    else\n-                      __list = __e;\n-                    __tail = __e;\n-                  }\n-\n-                // Now p has stepped `insize' places along, and q has too.\n-                __p = __q;\n-              }\n-            __tail->_M_next = 0;\n-\n-            // If we have done only one merge, we're finished.\n-            // Allow for nmerges == 0, the empty list case.\n-            if (__nmerges <= 1)\n-              {\n-                this->_M_next = __list;\n-                return;\n-              }\n-\n-            // Otherwise repeat, merging lists twice the size.\n-            __insize *= 2;\n-          }\n-      }\n- \n   template<typename _Tp, typename _Alloc>\n     _Fwd_list_base<_Tp, _Alloc>::\n     _Fwd_list_base(const _Fwd_list_base& __lst, const _Alloc& __a)\n@@ -472,6 +367,109 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         return false;\n     }\n \n+  template<typename _Tp, class _Alloc>\n+    template<typename _Comp>\n+      void\n+      forward_list<_Tp, _Alloc>::\n+      sort(_Comp __comp)\n+      {\n+\ttypedef typename _Node::_Pointer _Pointer;\n+\n+        // If `next' is 0, return immediately.\n+        _Pointer __list =\n+\t  __static_pointer_cast<_Pointer>(this->_M_impl._M_head._M_next);\n+        if (!__list)\n+          return;\n+\n+        unsigned long __insize = 1;\n+\n+        while (1)\n+          {\n+            _Pointer __p = __list;\n+            __list = 0;\n+            _Pointer __tail = 0;\n+\n+            // Count number of merges we do in this pass.\n+            unsigned long __nmerges = 0;\n+\n+            while (__p)\n+              {\n+                ++__nmerges;\n+                // There exists a merge to be done.\n+                // Step `insize' places along from p.\n+                _Pointer __q = __p;\n+                unsigned long __psize = 0;\n+                for (unsigned long __i = 0; __i < __insize; ++__i)\n+                  {\n+                    ++__psize;\n+                    __q = __static_pointer_cast<_Pointer>(__q->_M_next);\n+                    if (!__q)\n+                      break;\n+                  }\n+\n+                // If q hasn't fallen off end, we have two lists to merge.\n+                unsigned long __qsize = __insize;\n+\n+                // Now we have two lists; merge them.\n+                while (__psize > 0 || (__qsize > 0 && __q))\n+                  {\n+                    // Decide whether next node of merge comes from p or q.\n+                    _Pointer __e;\n+                    if (__psize == 0)\n+                      {\n+                        // p is empty; e must come from q.\n+                        __e = __q;\n+                        __q = __static_pointer_cast<_Pointer>(__q->_M_next);\n+                        --__qsize;\n+                      }\n+                    else if (__qsize == 0 || !__q)\n+                      {\n+                        // q is empty; e must come from p.\n+                        __e = __p;\n+                        __p = __static_pointer_cast<_Pointer>(__p->_M_next);\n+                        --__psize;\n+                      }\n+                    else if (__comp(__p->_M_value, __q->_M_value))\n+                      {\n+                        // First node of p is lower; e must come from p.\n+                        __e = __p;\n+                        __p = __static_pointer_cast<_Pointer>(__p->_M_next);\n+                        --__psize;\n+                      }\n+                    else\n+                      {\n+                        // First node of q is lower; e must come from q.\n+                        __e = __q;\n+                        __q = __static_pointer_cast<_Pointer>(__q->_M_next);\n+                        --__qsize;\n+                      }\n+\n+                    // Add the next node to the merged list.\n+                    if (__tail)\n+                      __tail->_M_next = __e;\n+                    else\n+                      __list = __e;\n+                    __tail = __e;\n+                  }\n+\n+                // Now p has stepped `insize' places along, and q has too.\n+                __p = __q;\n+              }\n+            __tail->_M_next = 0;\n+\n+            // If we have done only one merge, we're finished.\n+            // Allow for nmerges == 0, the empty list case.\n+            if (__nmerges <= 1)\n+              {\n+                this->_M_impl._M_head._M_next = __list;\n+                return;\n+              }\n+\n+            // Otherwise repeat, merging lists twice the size.\n+            __insize *= 2;\n+          }\n+      }\n+ \n _GLIBCXX_END_NAMESPACE // namespace std\n \n #endif /* _FORWARD_LIST_TCC */"}, {"sha": "5062ddfa234af6cae57d2b56aa33496ffecd8ede", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=fc52f99da8f58e11eadd3d6ff668cc949d120917", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1209 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009 Free Software Foundation"}, {"sha": "6347d964a4676e41081e1fd4ed433e958d1ea34d", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=fc52f99da8f58e11eadd3d6ff668cc949d120917", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1209 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009 Free Software Foundation"}, {"sha": "af668527dfbc8ad0d1aa015355d1a7c77ce82f60", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=fc52f99da8f58e11eadd3d6ff668cc949d120917", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1209 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009 Free Software Foundation"}, {"sha": "bc8a62d54ab0aec45af59f83ee802d0279ae94c2", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc52f99da8f58e11eadd3d6ff668cc949d120917/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=fc52f99da8f58e11eadd3d6ff668cc949d120917", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1209 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1198 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009 Free Software Foundation"}]}