{"sha": "35771d345fbe800cb3769316ffe874909bccdc4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3NzFkMzQ1ZmJlODAwY2IzNzY5MzE2ZmZlODc0OTA5YmNjZGM0Yg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-02-02T13:05:36Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-02-02T13:05:36Z"}, "message": "tree-flow-inline.h (bsi_after_labels): Rewrite, return what its name says.\n\n2006-02-02  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* tree-flow-inline.h (bsi_after_labels): Rewrite, return\n\twhat its name says.\n\t* lambda-code.c (perfect_nestify): Use bsi_insert_before on\n\tbsi_after_labels iterator.\n\t* tree-if-conv.c (find_phi_replacement_condition,\n\treplace_phi_with_cond_modify_expr): Likewise.\n\t* tree-scalar-evolution.c (scev_const_prop): Likewise.\n\t* tree-ssa-loop-ivopts.c (compute_phi_arg_on_exit): Likewise.\n\nFrom-SVN: r110514", "tree": {"sha": "e16c886c00e7c4c7bd7f6e4ba89378213ccc7f6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e16c886c00e7c4c7bd7f6e4ba89378213ccc7f6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35771d345fbe800cb3769316ffe874909bccdc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35771d345fbe800cb3769316ffe874909bccdc4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35771d345fbe800cb3769316ffe874909bccdc4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35771d345fbe800cb3769316ffe874909bccdc4b/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8843c120f1f0a562b0250c59ec66317feae2fb0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8843c120f1f0a562b0250c59ec66317feae2fb0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8843c120f1f0a562b0250c59ec66317feae2fb0c"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "078ea9d8afdfffcfc2208101150924bc233164a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35771d345fbe800cb3769316ffe874909bccdc4b", "patch": "@@ -1,3 +1,14 @@\n+2006-02-02  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* tree-flow-inline.h (bsi_after_labels): Rewrite, return\n+\twhat its name says.\n+\t* lambda-code.c (perfect_nestify): Use bsi_insert_before on\n+\tbsi_after_labels iterator.\n+\t* tree-if-conv.c (find_phi_replacement_condition,\n+\treplace_phi_with_cond_modify_expr): Likewise.\n+\t* tree-scalar-evolution.c (scev_const_prop): Likewise.\n+\t* tree-ssa-loop-ivopts.c (compute_phi_arg_on_exit): Likewise.\n+\n 2006-02-02  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-inline.c (copy_tree_r): Also copy OMP_CLAUSE nodes."}, {"sha": "ee1d1692e47d04964cacbf04c55569ba1589443d", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=35771d345fbe800cb3769316ffe874909bccdc4b", "patch": "@@ -2556,7 +2556,7 @@ perfect_nestify (struct loops *loops,\n \t\t\t  newname = make_ssa_name (newname, newstmt);\n \t\t\t  TREE_OPERAND (newstmt, 0) = newname;\n \t\t\t  SET_USE (use_p, TREE_OPERAND (newstmt, 0));\n-\t\t\t  bsi_insert_after (&tobsi, newstmt, BSI_SAME_STMT);\n+\t\t\t  bsi_insert_before (&tobsi, newstmt, BSI_SAME_STMT);\n \t\t\t  update_stmt (newstmt);\n \t\t\t  update_stmt (imm_stmt);\n \t\t\t} "}, {"sha": "0ae99b9f0d421b25781407670ff1c9e60f5ae3b8", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=35771d345fbe800cb3769316ffe874909bccdc4b", "patch": "@@ -734,37 +734,15 @@ bsi_start (basic_block bb)\n }\n \n /* Return a block statement iterator that points to the first non-label\n-   block BB.  */\n+   statement in block BB.  */\n \n static inline block_stmt_iterator\n bsi_after_labels (basic_block bb)\n {\n-  block_stmt_iterator bsi;\n-  tree_stmt_iterator next;\n-\n-  bsi.bb = bb;\n-\n-  if (!bb->stmt_list)\n-    {\n-      gcc_assert (bb->index < NUM_FIXED_BLOCKS);\n-      bsi.tsi.ptr = NULL;\n-      bsi.tsi.container = NULL;\n-      return bsi;\n-    }\n-\n-  bsi.tsi = tsi_start (bb->stmt_list);\n-  if (tsi_end_p (bsi.tsi))\n-    return bsi;\n+  block_stmt_iterator bsi = bsi_start (bb);\n \n-  next = bsi.tsi;\n-  tsi_next (&next);\n-\n-  while (!tsi_end_p (next)\n-\t && TREE_CODE (tsi_stmt (next)) == LABEL_EXPR)\n-    {\n-      bsi.tsi = next;\n-      tsi_next (&next);\n-    }\n+  while (!bsi_end_p (bsi) && TREE_CODE (bsi_stmt (bsi)) == LABEL_EXPR)\n+    bsi_next (&bsi);\n \n   return bsi;\n }"}, {"sha": "97deb2843f28d0c5b1fd59efb514db946de74017", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=35771d345fbe800cb3769316ffe874909bccdc4b", "patch": "@@ -737,8 +737,7 @@ find_phi_replacement_condition (struct loop *loop,\n       tree new_stmt;\n \n       new_stmt = ifc_temp_var (TREE_TYPE (*cond), unshare_expr (*cond));\n-      bsi_insert_after (bsi, new_stmt, BSI_SAME_STMT);\n-      bsi_next (bsi);\n+      bsi_insert_before (bsi, new_stmt, BSI_SAME_STMT);\n       *cond = TREE_OPERAND (new_stmt, 0);\n     }\n \n@@ -804,9 +803,7 @@ replace_phi_with_cond_modify_expr (tree phi, tree cond, basic_block true_bb,\n   SSA_NAME_DEF_STMT (PHI_RESULT (phi)) = new_stmt;\n \n   /* Insert using iterator.  */\n-  bsi_insert_after (bsi, new_stmt, BSI_SAME_STMT);\n-  bsi_next (bsi);\n-\n+  bsi_insert_before (bsi, new_stmt, BSI_SAME_STMT);\n   update_stmt (new_stmt);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "462d78fb39e4cccfac0ab159a025952b49c8d0c9", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=35771d345fbe800cb3769316ffe874909bccdc4b", "patch": "@@ -2793,8 +2793,11 @@ scev_const_prop (void)\n \n \t  ass = build2 (MODIFY_EXPR, void_type_node, rslt, NULL_TREE);\n \t  SSA_NAME_DEF_STMT (rslt) = ass;\n-\t  bsi_insert_after (&bsi, ass, BSI_NEW_STMT);\n-\t  def = force_gimple_operand_bsi (&bsi, def, false, NULL_TREE);\n+\t  {\n+\t    block_stmt_iterator dest = bsi;\n+\t    bsi_insert_before (&dest, ass, BSI_NEW_STMT);\n+\t    def = force_gimple_operand_bsi (&dest, def, false, NULL_TREE);\n+\t  }\n \t  TREE_OPERAND (ass, 1) = def;\n \t  update_stmt (ass);\n \t}"}, {"sha": "4925d45272623b0f14e1fd7e2456cba160ee3a09", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35771d345fbe800cb3769316ffe874909bccdc4b/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=35771d345fbe800cb3769316ffe874909bccdc4b", "patch": "@@ -5695,14 +5695,15 @@ compute_phi_arg_on_exit (edge exit, tree stmts, tree op)\n     {\n       for (tsi = tsi_start (stmts); !tsi_end_p (tsi); tsi_next (&tsi))\n         {\n-\t  bsi_insert_after (&bsi, tsi_stmt (tsi), BSI_NEW_STMT);\n-\t  protect_loop_closed_ssa_form (exit, bsi_stmt (bsi));\n+\t  tree stmt = tsi_stmt (tsi);\n+\t  bsi_insert_before (&bsi, stmt, BSI_SAME_STMT);\n+\t  protect_loop_closed_ssa_form (exit, stmt);\n \t}\n     }\n   else\n     {\n-      bsi_insert_after (&bsi, stmts, BSI_NEW_STMT);\n-      protect_loop_closed_ssa_form (exit, bsi_stmt (bsi));\n+      bsi_insert_before (&bsi, stmts, BSI_SAME_STMT);\n+      protect_loop_closed_ssa_form (exit, stmts);\n     }\n \n   if (!op)\n@@ -5719,7 +5720,7 @@ compute_phi_arg_on_exit (edge exit, tree stmts, tree op)\n \t  stmt = build2 (MODIFY_EXPR, TREE_TYPE (op),\n \t\t\tdef, op);\n \t  SSA_NAME_DEF_STMT (def) = stmt;\n-\t  bsi_insert_after (&bsi, stmt, BSI_CONTINUE_LINKING);\n+\t  bsi_insert_before (&bsi, stmt, BSI_SAME_STMT);\n \t}\n     }\n }"}]}