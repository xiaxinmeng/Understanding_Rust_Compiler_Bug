{"sha": "a23b64d54870b13c4399d92f86d49ecef829b968", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIzYjY0ZDU0ODcwYjEzYzQzOTlkOTJmODZkNDllY2VmODI5Yjk2OA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-20T19:35:52Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-20T19:35:52Z"}, "message": "Compare enums (preds.\n\nCompare enums (preds. codes, mem_mode)\nexplicitly to 0 in conditionals to work-around a VAXC bug that\ndisallows enum as arguments to && and || operators.\n\nFrom-SVN: r1916", "tree": {"sha": "6b3f3150fb9970c8dc8304c78b9a59892b0d2857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b3f3150fb9970c8dc8304c78b9a59892b0d2857"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a23b64d54870b13c4399d92f86d49ecef829b968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23b64d54870b13c4399d92f86d49ecef829b968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23b64d54870b13c4399d92f86d49ecef829b968", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23b64d54870b13c4399d92f86d49ecef829b968/comments", "author": null, "committer": null, "parents": [{"sha": "106d7d7de857f613209718cae33a2da5a922bf59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106d7d7de857f613209718cae33a2da5a922bf59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/106d7d7de857f613209718cae33a2da5a922bf59"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "bb12d069a91f475d806c8bffc122681d9f234a1f", "filename": "gcc/genrecog.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23b64d54870b13c4399d92f86d49ecef829b968/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23b64d54870b13c4399d92f86d49ecef829b968/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=a23b64d54870b13c4399d92f86d49ecef829b968", "patch": "@@ -588,7 +588,7 @@ not_both_true (d1, d2, toplevel)\n \t for D1's predicate.  */\n       if (d2->code != UNKNOWN)\n \t{\n-\t  for (i = 0; i < NUM_RTX_CODE && preds[d1->pred].codes[i]; i++)\n+\t  for (i = 0; i < NUM_RTX_CODE && preds[d1->pred].codes[i] != 0; i++)\n \t    if (preds[d1->pred].codes[i] == d2->code)\n \t      break;\n \n@@ -600,7 +600,7 @@ not_both_true (d1, d2, toplevel)\n \n       else if (d2->pred >= 0)\n \t{\n-\t  for (i = 0; i < NUM_RTX_CODE && preds[d1->pred].codes[i]; i++)\n+\t  for (i = 0; i < NUM_RTX_CODE && preds[d1->pred].codes[i] != 0; i++)\n \t    {\n \t      for (j = 0; j < NUM_RTX_CODE; j++)\n \t\tif (preds[d2->pred].codes[j] == 0\n@@ -1117,7 +1117,7 @@ write_tree_1 (tree, prevpos, afterward, type)\n \n \t  if (p->pred >= 0)\n \t    {\n-\t      for (i = 0; i < NUM_RTX_CODE && preds[p->pred].codes[i]; i++)\n+\t      for (i = 0; i < NUM_RTX_CODE && preds[p->pred].codes[i] != 0; i++)\n \t\tif (codemap[(int) preds[p->pred].codes[i]])\n \t\t  break;\n \n@@ -1140,7 +1140,7 @@ write_tree_1 (tree, prevpos, afterward, type)\n \n \t      if (code == MATCH_OPERAND)\n \t\t{\n-\t\t  for (i = 0; i < NUM_RTX_CODE && preds[p->pred].codes[i]; i++)\n+\t\t  for (i = 0; i < NUM_RTX_CODE && preds[p->pred].codes[i] != 0; i++)\n \t\t    {\n \t\t      printf (\"%scase \", indents[indent - 2]);\n \t\t      print_code (preds[p->pred].codes[i]);"}, {"sha": "8eee024c7f02508ebb478c72f4d1bcfd2e62a78a", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23b64d54870b13c4399d92f86d49ecef829b968/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23b64d54870b13c4399d92f86d49ecef829b968/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a23b64d54870b13c4399d92f86d49ecef829b968", "patch": "@@ -2496,7 +2496,7 @@ eliminate_regs (x, mem_mode, insn)\n \t\t   We special-case the commonest situation in\n \t\t   eliminate_regs_in_insn, so just replace a PLUS with a\n \t\t   PLUS here, unless inside a MEM.  */\n-\t\tif (mem_mode && GET_CODE (XEXP (x, 1)) == CONST_INT\n+\t\tif (mem_mode != 0 && GET_CODE (XEXP (x, 1)) == CONST_INT\n \t\t    && INTVAL (XEXP (x, 1)) == - ep->previous_offset)\n \t\t  return ep->to_rtx;\n \t\telse"}]}