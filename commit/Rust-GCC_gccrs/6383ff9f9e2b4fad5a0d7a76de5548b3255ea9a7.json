{"sha": "6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4M2ZmOWY5ZTJiNGZhZDVhMGQ3YTc2ZGU1NTQ4YjMyNTVlYTlhNw==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2016-11-28T12:47:02Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2016-11-28T12:47:02Z"}, "message": "2016-11-28  Tamar Christina  <tamar.christina@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(BSL_P): Added di and v2di mode.\n\t* config/aarch64/arm_neon.h\n\t(vsriq_n_p64, vsri_n_p64): Added poly type.\n\t(vextq_p64, vext_p64): Likewise.\n\t(vceq_p64, vbslq_p64, vbsl_p64): Likewise.\n\nFrom-SVN: r242916", "tree": {"sha": "fb7bcaabf86578b663cc578ce29f24561b65f88c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb7bcaabf86578b663cc578ce29f24561b65f88c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "159b872453784875c18c30bbb0bb3c2512679e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159b872453784875c18c30bbb0bb3c2512679e61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/159b872453784875c18c30bbb0bb3c2512679e61"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "5cf1698ad67788ac231b88f3d5622e22960b66c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7", "patch": "@@ -1,3 +1,12 @@\n+2016-11-28  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(BSL_P): Added di and v2di mode.\n+\t* config/aarch64/arm_neon.h\n+\t(vsriq_n_p64, vsri_n_p64): Added poly type.\n+\t(vextq_p64, vext_p64): Likewise.\n+\t(vceq_p64, vbslq_p64, vbsl_p64): Likewise.\n+\n 2016-11-28  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c (TYPES_SETREGP): Added poly type."}, {"sha": "76cb4844f87e50b50c34a9573f9a9d694c747641", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7", "patch": "@@ -442,6 +442,7 @@\n \n   /* Implemented by aarch64_simd_bsl<mode>.  */\n   BUILTIN_VDQQH (BSL_P, simd_bsl, 0)\n+  VAR2 (BSL_P, simd_bsl,0, di, v2di)\n   BUILTIN_VSDQ_I_DI (BSL_U, simd_bsl, 0)\n   BUILTIN_VALLDIF (BSL_S, simd_bsl, 0)\n "}, {"sha": "7d4d2a25ab80ae2daa9c8f8f004b07d2a64111ad", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7", "patch": "@@ -10609,6 +10609,19 @@ vrsqrteq_u32 (uint32x4_t a)\n        result;                                                          \\\n      })\n \n+#define vsri_n_p64(a, b, c)\t\t\t\t\t\t\\\n+  __extension__\t\t\t\t\t\t\t\t\\\n+    ({\t\t\t\t\t\t\t\t\t\\\n+       poly64x1_t b_ = (b);\t\t\t\t\t\t\\\n+       poly64x1_t a_ = (a);\t\t\t\t\t\t\\\n+       poly64x1_t result;\t\t\t\t\t\t\\\n+       __asm__ (\"sri %d0,%d2,%3\"\t\t\t\t\t\\\n+\t\t: \"=w\"(result)\t\t\t\t\t\t\\\n+\t\t: \"0\"(a_), \"w\"(b_), \"i\"(c)\t\t\t\t\\\n+\t\t: /* No clobbers.  */);\t\t\t\t\t\\\n+       result;\t\t\t\t\t\t\t\t\\\n+     })\n+\n #define vsriq_n_p8(a, b, c)                                             \\\n   __extension__                                                         \\\n     ({                                                                  \\\n@@ -10635,6 +10648,19 @@ vrsqrteq_u32 (uint32x4_t a)\n        result;                                                          \\\n      })\n \n+#define vsriq_n_p64(a, b, c)\t\t\t\t\t\t\\\n+  __extension__\t\t\t\t\t\t\t\t\\\n+    ({\t\t\t\t\t\t\t\t\t\\\n+       poly64x2_t b_ = (b);\t\t\t\t\t\t\\\n+       poly64x2_t a_ = (a);\t\t\t\t\t\t\\\n+       poly64x2_t result;\t\t\t\t\t\t\\\n+       __asm__ (\"sri %0.2d,%2.2d,%3\"\t\t\t\t\t\\\n+\t\t: \"=w\"(result)\t\t\t\t\t\t\\\n+\t\t: \"0\"(a_), \"w\"(b_), \"i\"(c)\t\t\t\t\\\n+\t\t: /* No clobbers.  */);\t\t\t\t\t\\\n+       result;\t\t\t\t\t\t\t\t\\\n+     })\n+\n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtst_p8 (poly8x8_t a, poly8x8_t b)\n@@ -11774,6 +11800,13 @@ vbsl_p16 (uint16x4_t __a, poly16x4_t __b, poly16x4_t __c)\n {\n   return __builtin_aarch64_simd_bslv4hi_pupp (__a, __b, __c);\n }\n+__extension__ extern __inline poly64x1_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbsl_p64 (uint64x1_t __a, poly64x1_t __b, poly64x1_t __c)\n+{\n+  return (poly64x1_t)\n+      {__builtin_aarch64_simd_bsldi_pupp (__a[0], __b[0], __c[0])};\n+}\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n@@ -11882,6 +11915,13 @@ vbslq_s16 (uint16x8_t __a, int16x8_t __b, int16x8_t __c)\n   return __builtin_aarch64_simd_bslv8hi_suss (__a, __b, __c);\n }\n \n+__extension__ extern __inline poly64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbslq_p64 (uint64x2_t __a, poly64x2_t __b, poly64x2_t __c)\n+{\n+  return __builtin_aarch64_simd_bslv2di_pupp (__a, __b, __c);\n+}\n+\n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vbslq_s32 (uint32x4_t __a, int32x4_t __b, int32x4_t __c)\n@@ -12413,6 +12453,13 @@ vceq_p8 (poly8x8_t __a, poly8x8_t __b)\n   return (uint8x8_t) (__a == __b);\n }\n \n+__extension__ extern __inline uint64x1_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vceq_p64 (poly64x1_t __a, poly64x1_t __b)\n+{\n+  return (uint64x1_t) (__a == __b);\n+}\n+\n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vceq_s8 (int8x8_t __a, int8x8_t __b)\n@@ -16152,6 +16199,15 @@ vext_p16 (poly16x4_t __a, poly16x4_t __b, __const int __c)\n #endif\n }\n \n+__extension__ extern __inline poly64x1_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vext_p64 (poly64x1_t __a, poly64x1_t __b, __const int __c)\n+{\n+  __AARCH64_LANE_CHECK (__a, __c);\n+  /* The only possible index to the assembler instruction returns element 0.  */\n+  return __a;\n+}\n+\n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vext_s8 (int8x8_t __a, int8x8_t __b, __const int __c)\n@@ -16320,6 +16376,18 @@ vextq_p16 (poly16x8_t __a, poly16x8_t __b, __const int __c)\n #endif\n }\n \n+__extension__ extern __inline poly64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vextq_p64 (poly64x2_t __a, poly64x2_t __b, __const int __c)\n+{\n+  __AARCH64_LANE_CHECK (__a, __c);\n+#ifdef __AARCH64EB__\n+  return __builtin_shuffle (__b, __a, (uint64x2_t) {2-__c, 3-__c});\n+#else\n+  return __builtin_shuffle (__a, __b, (uint64x2_t) {__c, __c+1});\n+#endif\n+}\n+\n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vextq_s8 (int8x16_t __a, int8x16_t __b, __const int __c)"}]}