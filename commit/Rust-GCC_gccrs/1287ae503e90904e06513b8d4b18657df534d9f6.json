{"sha": "1287ae503e90904e06513b8d4b18657df534d9f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4N2FlNTAzZTkwOTA0ZTA2NTEzYjhkNGIxODY1N2RmNTM0ZDlmNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-02-13T16:47:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-02-13T16:47:35Z"}, "message": "sse.md (xop_vmfrcz<mode>2): Generate const0 in operands[2], not operands[3].\n\n\t* config/i386/sse.md (xop_vmfrcz<mode>2): Generate const0 in\n\toperands[2], not operands[3].\n\nFrom-SVN: r207764", "tree": {"sha": "40de1ff418a605d9a966cb3fb3cf6e3950b70d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40de1ff418a605d9a966cb3fb3cf6e3950b70d7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1287ae503e90904e06513b8d4b18657df534d9f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1287ae503e90904e06513b8d4b18657df534d9f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1287ae503e90904e06513b8d4b18657df534d9f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1287ae503e90904e06513b8d4b18657df534d9f6/comments", "author": null, "committer": null, "parents": [{"sha": "30255340f644e560f84b0563a1bd3d97ef38c069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30255340f644e560f84b0563a1bd3d97ef38c069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30255340f644e560f84b0563a1bd3d97ef38c069"}], "stats": {"total": 84, "additions": 39, "deletions": 45}, "files": [{"sha": "1b9a6e423ace95de10a3fbb2cf327f56874c1f87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 43, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1287ae503e90904e06513b8d4b18657df534d9f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1287ae503e90904e06513b8d4b18657df534d9f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1287ae503e90904e06513b8d4b18657df534d9f6", "patch": "@@ -1,3 +1,8 @@\n+2014-02-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (xop_vmfrcz<mode>2): Generate const0 in\n+\toperands[2], not operands[3].\n+\n 2014-02-13  Richard Biener  <rguenther@suse.de>\n \n \tPR bootstrap/59878\n@@ -31,8 +36,7 @@\n \t    Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/60151\n-\t* configure.ac (HAVE_AS_GOTOFF_IN_DATA): Pass --32 to GNU\n-\tassembler.\n+\t* configure.ac (HAVE_AS_GOTOFF_IN_DATA): Pass --32 to GNU assembler.\n \t* configure: Regenerated.\n \n 2014-02-12  Richard Biener  <rguenther@suse.de>\n@@ -78,8 +82,7 @@\n \t* config/arm/aarch-cost-tables.h (generic_extra_costs): Fix\n \tidentifiers in comments.\n \t(cortexa53_extra_costs): Likewise.\n-\t* config/arm/arm.c (cortexa9_extra_costs): Fix identifiers in\n-\tcomments.\n+\t* config/arm/arm.c (cortexa9_extra_costs): Fix identifiers in comments.\n \t(cortexa7_extra_costs): Likewise.\n \t(cortexa12_extra_costs): Likewise.\n \t(cortexa15_extra_costs): Likewise.\n@@ -123,8 +126,8 @@\n \tfix COMPLETEP updating.\n \t(possible_polymorphic_call_targets): Add NONCONSTRUTION_TARGETSP\n \tparameter, fix computing of COMPLETEP.\n-\t(dump_possible_polymorphic_call_targets): Imrove readability of dump; at\n-\tLTO time do demangling.\n+\t(dump_possible_polymorphic_call_targets): Imrove readability of dump;\n+\tat LTO time do demangling.\n \t(ipa_devirt): Use nonconstruction_targets; Improve dumps.\n \t* gimple-fold.c (gimple_get_virt_method_for_vtable): Add can_refer\n \tparameter.\n@@ -221,8 +224,7 @@\n \n \tPR middle-end/52306\n \t* reload1.c (emit_input_reload_insns): Do not create invalid RTL\n-\twhen changing the SET_DEST of a prior insn to avoid an input\n-\treload.\n+\twhen changing the SET_DEST of a prior insn to avoid an input reload.\n \n 2014-02-10  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n@@ -321,11 +323,9 @@\n \tassume_aligned or alloc_align attributes.\n \t(bit_value_assume_aligned): Add ATTR, PTRVAL and ALLOC_ALIGN\n \targuments.  Handle also assume_aligned and alloc_align attributes.\n-\t(evaluate_stmt): Adjust bit_value_assume_aligned caller.\n-\tHandle calls to functions with assume_aligned or alloc_align\n-\tattributes.\n-\t* doc/extend.texi: Document assume_aligned and alloc_align\n-\tattributes.\n+\t(evaluate_stmt): Adjust bit_value_assume_aligned caller.  Handle\n+\tcalls to functions with assume_aligned or alloc_align attributes.\n+\t* doc/extend.texi: Document assume_aligned and alloc_align attributes.\n \n 2014-02-08  Terry Guo  <terry.guo@arm.com>\n \n@@ -414,8 +414,7 @@\n \n 2014-02-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n-\t* optabs.c (expand_atomic_compare_and_swap): Allow expander to\n-\tfail.\n+\t* optabs.c (expand_atomic_compare_and_swap): Allow expander to fail.\n \n 2014-02-07  Richard Biener  <rguenther@suse.de>\n \n@@ -444,7 +443,8 @@\n 2014-02-06  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/59918\n-\t* ipa-devirt.c (record_target_from_binfo): Remove overactive sanity check.\n+\t* ipa-devirt.c (record_target_from_binfo): Remove overactive\n+\tsanity check.\n \n 2014-02-06  Jan Hubicka  <hubicka@ucw.cz>\n \n@@ -477,8 +477,7 @@\n \tix86_expand_push.\n \t(FP push expanders): Preserve memory attributes.\n \t* config/i386/sse.md (push<mode>1): Remove.\n-\t* config/i386/i386.c (ix86_expand_vector_move): Handle push\n-\toperation.\n+\t* config/i386/i386.c (ix86_expand_vector_move): Handle push operation.\n \t(ix86_expand_push): Remove.\n \t* config/i386/mmx.md (push<mode>1): Remove.\n \n@@ -510,9 +509,8 @@\n \tXEXP.\n \n \tPR debug/59992\n-\t* var-tracking.c (adjust_mems): Before adding a SET\n-\tto amd->side_effects, adjust it's SET_SRC using\n-\tsimplify_replace_fn_rtx.\n+\t* var-tracking.c (adjust_mems): Before adding a SET to\n+\tamd->side_effects, adjust it's SET_SRC using simplify_replace_fn_rtx.\n \n 2014-02-06  Alan Modra  <amodra@gmail.com>\n \n@@ -608,13 +606,11 @@\n \t(altivec_vupkhs<VU_char>): Emit vupkls* instead of vupkhs* when\n \ttarget is little endian and -maltivec=be is not specified.\n \t(*altivec_vupkhs<VU_char>_direct): New (copy of\n-\taltivec_vupkhs<VU_char> that always emits vupkhs*, for internal\n-\tuse).\n+\taltivec_vupkhs<VU_char> that always emits vupkhs*, for internal use).\n \t(altivec_vupkls<VU_char>): Emit vupkhs* instead of vupkls* when\n \ttarget is little endian and -maltivec=be is not specified.\n \t(*altivec_vupkls<VU_char>_direct): New (copy of\n-\taltivec_vupkls<VU_char> that always emits vupkls*, for internal\n-\tuse).\n+\taltivec_vupkls<VU_char> that always emits vupkls*, for internal use).\n \t(altivec_vupkhpx): Emit vupklpx instead of vupkhpx when target is\n \tlittle endian and -maltivec=be is not specified.\n \t(altivec_vupklpx): Emit vupkhpx instead of vupklpx when target is\n@@ -633,8 +629,7 @@\n \n \t* lto-cgraph.c (asm_nodes_output): Make global.\n \t* lto-wrapper.c (run_gcc): Pass down paralelizm to WPA.\n-\t* gcc.c (AS_NEEDS_DASH_FOR_PIPED_INPUT): Allow WPA\n-\tparameter\n+\t* gcc.c (AS_NEEDS_DASH_FOR_PIPED_INPUT): Allow WPA parameter\n \t(driver_handle_option): Handle OPT_fwpa.\n \n 2014-02-05  Jakub Jelinek  <jakub@redhat.com>\n@@ -665,8 +660,7 @@\n 2014-02-05  Nick Clifton  <nickc@redhat.com>\n \n \t* config/mn10300/mn10300.c (mn10300_hard_regno_mode_ok): Do not\n-\taccept extended registers in any mode when compiling for the\n-\tMN10300.\n+\taccept extended registers in any mode when compiling for the MN10300.\n \n 2014-02-05  Yury Gribov  <y.gribov@samsung.com>\n \n@@ -703,7 +697,7 @@\n 2014-02-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* config/host-linux.c (linux_gt_pch_use_address): Don't\n-\tuse SSIZE_MAX because it is not always defined. \n+\tuse SSIZE_MAX because it is not always defined.\n \n 2014-02-04  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -725,7 +719,8 @@\n \n 2014-02-04  Jan Hubicka  <hubicka@ucw.cz>\n \n-\t* gimple-fold.c (can_refer_decl_in_current_unit_p): Default visibility is safe.\n+\t* gimple-fold.c (can_refer_decl_in_current_unit_p): Default\n+\tvisibility is safe.\n \n 2014-02-04  Marek Polacek  <polacek@redhat.com>\n \n@@ -818,9 +813,8 @@\n \tlookup via vtable pointer; check for type consistency\n \tand turn inconsitent facts into UNREACHABLE.\n \t* ipa-prop.c (try_make_edge_direct_virtual_call): Likewise.\n-\t* gimple-fold.c (gimple_get_virt_method_for_vtable): \n-\tDo not ICE on type inconsistent querries; return UNREACHABLE\n-\tinstead.\n+\t* gimple-fold.c (gimple_get_virt_method_for_vtable): Do not ICE on\n+\ttype inconsistent querries; return UNREACHABLE instead.\n \n 2014-02-03  Richard Henderson  <rth@twiddle.net>\n \n@@ -834,16 +828,16 @@\n 2014-02-03  Laurent Aflonsi  <laurent.alfonsi@st.com>\n \n \tPR gcov-profile/58602\n-\t* gcc/gcov-io.c (gcov_open): Open with truncation when mode<0\n+\t* gcc/gcov-io.c (gcov_open): Open with truncation when mode < 0.\n \n 2014-02-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/59831\n-\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Give up on -fno-devirtualize;\n-\tTry to devirtualize by the knowledge of virtual table pointer given by\n-\taggregate propagation.\n+\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Give up on\n+\t-fno-devirtualize; try to devirtualize by the knowledge of\n+\tvirtual table pointer given by aggregate propagation.\n \t* ipa-prop.c (try_make_edge_direct_virtual_call): Likewise.\n-\tipa_print_node_jump_functions): Dump also offset that\n+\t(ipa_print_node_jump_functions): Dump also offset that\n \tis relevant for polymorphic calls.\n \t(determine_known_aggregate_parts): Add arg_type parameter; use it\n \tinstead of determining the type from pointer type.\n@@ -854,7 +848,7 @@\n \tvtable_pointer_value_to_vtable.\n \t* gimple-fold.h (gimple_get_virt_method_for_vtable): Declare.\n \t* ipa-devirt.c (subbinfo_with_vtable_at_offset): Turn OFFSET parameter\n-\tto unsigned HOST_WIDE_INT; Use vtable_pointer_value_to_vtable.\n+\tto unsigned HOST_WIDE_INT; use vtable_pointer_value_to_vtable.\n \t(vtable_pointer_value_to_vtable): Break out from ...; handle also\n \tPOINTER_PLUS_EXPR.\n \t(vtable_pointer_value_to_binfo): ... here.\n@@ -904,7 +898,7 @@\n \n 2014-02-03  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n-\t* doc/invoke.texi: (fprofile-reorder-functions): Fix typo.\n+\t* doc/invoke.texi (fprofile-reorder-functions): Fix typo.\n \n 2014-02-03  Andrey Belevantsev  <abel@ispras.ru>\n \n@@ -1602,7 +1596,7 @@\n \n 2014-01-27  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-        * config/i386/avx512pfintrin.h (_mm512_mask_prefetch_i32gather_pd):\n+\t* config/i386/avx512pfintrin.h (_mm512_mask_prefetch_i32gather_pd):\n \tNew.\n \t(_mm512_mask_prefetch_i64gather_pd): Ditto.\n \t(_mm512_prefetch_i32scatter_pd): Ditto.\n@@ -2650,7 +2644,7 @@\n \tloads out of the loop.\n \n 2014-01-15  Matthew Gretton-Dann  <matthew.gretton-dann@linaro.org>\n-            Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\t    Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR target/59695\n \t* config/aarch64/aarch64.c (aarch64_build_constant): Fix incorrect"}, {"sha": "5595767bd98bdbecf308acf0f23d0a59eabec463", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1287ae503e90904e06513b8d4b18657df534d9f6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1287ae503e90904e06513b8d4b18657df534d9f6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1287ae503e90904e06513b8d4b18657df534d9f6", "patch": "@@ -13618,10 +13618,10 @@\n \t  (unspec:VF_128\n \t   [(match_operand:VF_128 1 \"nonimmediate_operand\")]\n \t   UNSPEC_FRCZ)\n-\t  (match_dup 3)\n+\t  (match_dup 2)\n \t  (const_int 1)))]\n   \"TARGET_XOP\"\n-  \"operands[3] = CONST0_RTX (<MODE>mode);\")\n+  \"operands[2] = CONST0_RTX (<MODE>mode);\")\n \n (define_insn \"*xop_vmfrcz<mode>2\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x\")"}]}