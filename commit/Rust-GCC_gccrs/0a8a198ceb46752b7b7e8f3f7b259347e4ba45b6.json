{"sha": "0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE4YTE5OGNlYjQ2NzUyYjdiN2U4ZjNmN2IyNTkzNDdlNGJhNDViNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-09T18:55:37Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-09T18:55:37Z"}, "message": "function.h (free_after_compilation): Remove decl parameter.\n\n\t* function.h (free_after_compilation): Remove decl parameter.\n\t(free_varasm_status0: Likewise.\n\t(free_emit_status): Likewise.\n\t(free_stmt_status): Likewise.\n\t(free_after_compilation): Likewise.\n\t(init_lang_status): New variable.\n\t(free_lang_status): Likewise.\n\t* emit-rtl.c (free_emit_status): Make decl parameter implicit.\n\t* function.c (init_lang_status): New variable.\n\t(free_lang_status): Likewise.\n\t(push_function_context_to): Don't set function::decl here.\n\t(free_after_copmilation): Make decl parameter implicit.  Call\n\tfree_lang_status if defined.\n\t(prepare_function_start): Call init_lang_status if defined.\n\t(init_function_start): Set function::decl here.\n\t* profile.c (output_func_start_profiler): Don't call pushdecl\n\tuntil we've actually started the function.\n\t* stmt.c (free_stmt_status): Make decl parameter implicit.\n\t* toplev.c (rest_of_compilation): Don't pass decl to\n\tfree_after_compilation.\n\t* varasm.c (free_varasm_status): Likewise.\n\nFrom-SVN: r29239", "tree": {"sha": "f84e1f0ecc0286b75e180998f1568a69a03904ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f84e1f0ecc0286b75e180998f1568a69a03904ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/comments", "author": null, "committer": null, "parents": [{"sha": "1814b96be23b7a080f89c548287e4a311b6b96b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1814b96be23b7a080f89c548287e4a311b6b96b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1814b96be23b7a080f89c548287e4a311b6b96b6"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "5e26b572a7e0ac570363153a9483975201befdd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "patch": "@@ -1,3 +1,27 @@\n+Thu Sep  9 09:40:58 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* function.h (free_after_compilation): Remove decl parameter.\n+\t(free_varasm_status0: Likewise.\n+\t(free_emit_status): Likewise.\n+\t(free_stmt_status): Likewise.\n+\t(free_after_compilation): Likewise.\n+\t(init_lang_status): New variable.\n+\t(free_lang_status): Likewise.\n+\t* emit-rtl.c (free_emit_status): Make decl parameter implicit.\n+\t* function.c (init_lang_status): New variable.\n+\t(free_lang_status): Likewise.\n+\t(push_function_context_to): Don't set function::decl here.\n+\t(free_after_copmilation): Make decl parameter implicit.  Call\n+\tfree_lang_status if defined. \n+\t(prepare_function_start): Call init_lang_status if defined.\n+\t(init_function_start): Set function::decl here.\n+\t* profile.c (output_func_start_profiler): Don't call pushdecl\n+\tuntil we've actually started the function.\n+\t* stmt.c (free_stmt_status): Make decl parameter implicit.\n+\t* toplev.c (rest_of_compilation): Don't pass decl to\n+\tfree_after_compilation.\n+\t* varasm.c (free_varasm_status): Likewise.\n+\t\n Thu Sep  9 17:23:19 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* except.c (call_get_eh_context): Add root when allocating static"}, {"sha": "e7150c296ab52931d1722aa00f54eccccdf5861f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "patch": "@@ -1609,15 +1609,13 @@ restore_emit_status (p)\n \n /* Clear out all parts of the state in F that can safely be discarded\n    after the function has been compiled, to let garbage collection\n-   reclaim the memory.  D is the declaration for the function just\n-   compiled.  Its output may have been deferred.  */\n+   reclaim the memory.  */\n \n void\n-free_emit_status (f, d)\n+free_emit_status (f)\n      struct function *f;\n-     tree d;\n {\n-  if (DECL_DEFER_OUTPUT (d))\n+  if (DECL_DEFER_OUTPUT (f->decl))\n     return;\n \n   free (f->emit->x_regno_reg_rtx);"}, {"sha": "b6e4f87b20325c82f7621b06e6af8bdac5b2b089", "filename": "gcc/function.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "patch": "@@ -124,9 +124,11 @@ void (*restore_machine_status) PROTO((struct function *));\n void (*mark_machine_status) PROTO((struct function *));\n \n /* Likewise, but for language-specific data.  */\n+void (*init_lang_status) PROTO((struct function *));\n void (*save_lang_status) PROTO((struct function *));\n void (*restore_lang_status) PROTO((struct function *));\n void (*mark_lang_status) PROTO((struct function *));\n+void (*free_lang_status) PROTO((struct function *));\n \n /* The FUNCTION_DECL for an inline function currently being expanded.  */\n tree inline_function_decl;\n@@ -323,7 +325,6 @@ push_function_context_to (context)\n \n   p->next = outer_function_chain;\n   outer_function_chain = p;\n-  p->decl = current_function_decl;\n   p->fixup_var_refs_queue = 0;\n \n   save_tree_status (p);\n@@ -390,19 +391,19 @@ pop_function_context ()\n \n /* Clear out all parts of the state in F that can safely be discarded\n    after the function has been compiled, to let garbage collection\n-   reclaim the memory.  D is the declaration for the function just\n-   compiled.  Its output may have been deferred.  */\n+   reclaim the memory.  */\n \n void\n-free_after_compilation (f, d)\n+free_after_compilation (f)\n      struct function *f;\n-     tree d;\n {\n-  free_emit_status (f, d);\n-  free_varasm_status (f, d);\n-  free_stmt_status (f, d);\n+  free_emit_status (f);\n+  free_varasm_status (f);\n+  free_stmt_status (f);\n+  if (free_lang_status)\n+    (*free_lang_status) (f);\n \n-  if (!DECL_DEFER_OUTPUT (d))\n+  if (!DECL_DEFER_OUTPUT (f->decl))\n     {\n       free (f->x_parm_reg_stack_loc);\n       f->can_garbage_collect = 1;\n@@ -5621,6 +5622,8 @@ prepare_function_start ()\n \n   current_function_outgoing_args_size = 0;\n \n+  if (init_lang_status)\n+    (*init_lang_status) (current_function);\n   if (init_machine_status)\n     (*init_machine_status) (current_function);\n }\n@@ -5651,6 +5654,7 @@ init_function_start (subr, filename, line)\n   all_functions = current_function;\n   \n   current_function_name = (*decl_printable_name) (subr, 2);\n+  current_function->decl = subr;\n \n   /* Nonzero if this is a nested function that uses a static chain.  */\n "}, {"sha": "789fdbf164716378c2c49005818702144f5c51b2", "filename": "gcc/function.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "patch": "@@ -541,24 +541,22 @@ extern void (*save_machine_status)\tPROTO((struct function *));\n extern void (*restore_machine_status)\tPROTO((struct function *));\n \n /* Likewise, but for language-specific data.  */\n+extern void (*init_lang_status)         PROTO((struct function *));\n extern void (*mark_lang_status)\t\tPROTO((struct function *));\n extern void (*save_lang_status)\t\tPROTO((struct function *));\n extern void (*restore_lang_status)\tPROTO((struct function *));\n+extern void (*free_lang_status)         PROTO((struct function *));\n \n /* Save and restore status information for a nested function.  */\n extern void save_tree_status\t\tPROTO((struct function *));\n extern void restore_tree_status\t\tPROTO((struct function *));\n extern void restore_emit_status\t\tPROTO((struct function *));\n-extern void free_after_compilation\tPROTO((struct function *,\n-\t\t\t\t\t       tree));\n+extern void free_after_compilation\tPROTO((struct function *));\n \n extern void init_varasm_status\t\tPROTO((struct function *));\n-extern void free_varasm_status\t\tPROTO((struct function *,\n-\t\t\t\t\t       tree));\n-extern void free_emit_status\t\tPROTO((struct function *,\n-\t\t\t\t\t       tree));\n-extern void free_stmt_status            PROTO((struct function *,\n-\t\t\t\t\t       tree));\n+extern void free_varasm_status\t\tPROTO((struct function *));\n+extern void free_emit_status\t\tPROTO((struct function *));\n+extern void free_stmt_status            PROTO((struct function *));\n extern rtx get_first_block_beg\t\tPROTO((void));\n \n extern void init_virtual_regs\t\tPROTO((struct emit_status *));"}, {"sha": "871f55789cd2a9bfd2c6e98f5809b1ea9ed6769d", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "patch": "@@ -1672,9 +1672,9 @@ output_func_start_profiler ()\n   current_function_decl = fndecl;\n   DECL_INITIAL (fndecl) = error_mark_node;\n   temporary_allocation ();\n-  pushlevel (0);\n   make_function_rtl (fndecl);\n   init_function_start (fndecl, input_filename, lineno);\n+  pushlevel (0);\n   expand_function_start (fndecl, 0);\n \n   /* Actually generate the code to call __bb_init_func. */"}, {"sha": "ad45fddcc334c17240200f780c216ec00c2fbd97", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "patch": "@@ -552,13 +552,11 @@ mark_goto_fixup (g)\n \n /* Clear out all parts of the state in F that can safely be discarded\n    after the function has been compiled, to let garbage collection\n-   reclaim the memory.  D is the declaration for the function just\n-   compiled.  Its output may have been deferred.  */\n+   reclaim the memory.  */\n \n void\n-free_stmt_status (f, d)\n+free_stmt_status (f)\n      struct function *f;\n-     tree d ATTRIBUTE_UNUSED;\n {\n   /* We're about to free the function obstack.  If we hold pointers to\n      things allocated there, then we'll try to mark them when we do"}, {"sha": "29c4a3c1e689ebd94e7a9582f5b73cd26029cc1a", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "patch": "@@ -4469,7 +4469,7 @@ rest_of_compilation (decl)\n   init_recog_no_volatile ();\n \n   /* We're done with this function.  Free up memory if we can.  */\n-  free_after_compilation (current_function, decl);\n+  free_after_compilation (current_function);\n \n   current_function = 0;\n "}, {"sha": "b3817ccd09e066eac12d8564fb42faf573cea1dd", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0a8a198ceb46752b7b7e8f3f7b259347e4ba45b6", "patch": "@@ -3235,17 +3235,15 @@ mark_varasm_state (p)\n \n /* Clear out all parts of the state in F that can safely be discarded\n    after the function has been compiled, to let garbage collection\n-   reclaim the memory.  D is the declaration for the function just\n-   compiled.  Its output may have been deferred.  */\n+   reclaim the memory.  */\n \n void\n-free_varasm_status (f, d)\n+free_varasm_status (f)\n      struct function *f;\n-     tree d;\n {\n   struct varasm_status *p;\n \n-  if (DECL_DEFER_OUTPUT (d))\n+  if (DECL_DEFER_OUTPUT (f->decl))\n     return;\n \n   p = f->varasm;"}]}