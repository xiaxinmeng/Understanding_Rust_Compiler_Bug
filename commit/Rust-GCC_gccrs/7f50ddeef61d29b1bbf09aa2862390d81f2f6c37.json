{"sha": "7f50ddeef61d29b1bbf09aa2862390d81f2f6c37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y1MGRkZWVmNjFkMjliMWJiZjA5YWEyODYyMzkwZDgxZjJmNmMzNw==", "commit": {"author": {"name": "Dave Odell", "email": "evilalias@hotmail.com", "date": "2005-07-25T22:46:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-07-25T22:46:48Z"}, "message": "re PR libstdc++/23053 (Const-correctness issue in TR1 hashtable)\n\n2005-07-25  Dave Odell  <evilalias@hotmail.com>\n\n\tPR libstdc++/23053\n\t* include/tr1/hashtable (hashtable<>::find_node): Const-ify.\n\t* testsuite/tr1/6_containers/unordered/hashtable/23053.cc: New.\n\nFrom-SVN: r102372", "tree": {"sha": "5d2372c7e0928f28666239e77fe86518bfde6819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d2372c7e0928f28666239e77fe86518bfde6819"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f50ddeef61d29b1bbf09aa2862390d81f2f6c37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f50ddeef61d29b1bbf09aa2862390d81f2f6c37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f50ddeef61d29b1bbf09aa2862390d81f2f6c37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f50ddeef61d29b1bbf09aa2862390d81f2f6c37/comments", "author": null, "committer": null, "parents": [{"sha": "bfa653b3998cd5a4e6818c633a80ed9080d39274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa653b3998cd5a4e6818c633a80ed9080d39274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfa653b3998cd5a4e6818c633a80ed9080d39274"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "e3bf41c4207b5c583b92e80b8142fc4512cb901c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f50ddeef61d29b1bbf09aa2862390d81f2f6c37/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f50ddeef61d29b1bbf09aa2862390d81f2f6c37/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7f50ddeef61d29b1bbf09aa2862390d81f2f6c37", "patch": "@@ -1,3 +1,9 @@\n+2005-07-25  Dave Odell  <evilalias@hotmail.com>\n+\n+\tPR libstdc++/23053\n+\t* include/tr1/hashtable (hashtable<>::find_node): Const-ify.\n+\t* testsuite/tr1/6_containers/unordered/hashtable/23053.cc: New.\n+\n 2005-07-25  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/22515"}, {"sha": "e94f3bb65fdb3284baf2fbc8f1fa0ea21016960f", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f50ddeef61d29b1bbf09aa2862390d81f2f6c37/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f50ddeef61d29b1bbf09aa2862390d81f2f6c37/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=7f50ddeef61d29b1bbf09aa2862390d81f2f6c37", "patch": "@@ -1055,14 +1055,14 @@ namespace tr1\n         Insert_Return_Type;\n \n       node*\n-      find_node(node* p, const key_type& k, typename hashtable::hash_code_t c);\n+      find_node(node* p, const key_type& k,\n+\t\ttypename hashtable::hash_code_t c) const;\n \n       std::pair<iterator, bool>\n       insert(const value_type&, std::tr1::true_type);\n   \n       iterator\n-      insert\n-      (const value_type&, std::tr1::false_type);\n+      insert(const value_type&, std::tr1::false_type);\n \n     public:\t\t\t\t// Insert and erase\n       Insert_Return_Type\n@@ -1464,7 +1464,8 @@ namespace tr1\n \t   bool c, bool m, bool u>\n     typename hashtable<K, V, A, Ex, Eq, H1, H2, H, RP, c, m, u>::node* \n     hashtable<K, V, A, Ex, Eq, H1, H2, H, RP, c, m, u>::\n-    find_node(node* p, const key_type& k, typename hashtable::hash_code_t code)\n+    find_node(node* p, const key_type& k,\n+\t      typename hashtable::hash_code_t code) const\n     {\n       for ( ; p ; p = p->m_next)\n \tif (this->compare (k, code, p))"}, {"sha": "1f9d0e76a64496f42fc5c4123b6197145d70d67d", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/hashtable/23053.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f50ddeef61d29b1bbf09aa2862390d81f2f6c37/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F23053.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f50ddeef61d29b1bbf09aa2862390d81f2f6c37/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F23053.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F23053.cc?ref=7f50ddeef61d29b1bbf09aa2862390d81f2f6c37", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.3 Unordered associative containers\n+\n+#include <tr1/unordered_set>\n+\n+// libstdc++/23053\n+void test01()\n+{\n+  std::tr1::unordered_set<int> s;\n+\n+  const std::tr1::unordered_set<int> &s_ref = s;\n+\n+  s_ref.find(27);\n+}  \n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}