{"sha": "464186fb60d6479e5561ddcab0d0337a5d222bff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY0MTg2ZmI2MGQ2NDc5ZTU1NjFkZGNhYjBkMDMzN2E1ZDIyMmJmZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-17T18:37:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-17T18:37:25Z"}, "message": "integrate.h (struct inline_remap): Add local_return_label.\n\n        * integrate.h (struct inline_remap): Add local_return_label.\n        * integrate.c (expand_inline_function): Initialize it and emit\n        it after copy_insn_notes.\n        (copy_insn_list): Don't store local_return_label here.\n        (copy_insn_notes): New function split out from copy_insn_list.\n\nFrom-SVN: r40581", "tree": {"sha": "daf230a555971819896de93fc75fed34b21916d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daf230a555971819896de93fc75fed34b21916d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/464186fb60d6479e5561ddcab0d0337a5d222bff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464186fb60d6479e5561ddcab0d0337a5d222bff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/464186fb60d6479e5561ddcab0d0337a5d222bff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464186fb60d6479e5561ddcab0d0337a5d222bff/comments", "author": null, "committer": null, "parents": [{"sha": "e72dd89c988d971f1dac8f6763bbd23d9de502e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72dd89c988d971f1dac8f6763bbd23d9de502e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e72dd89c988d971f1dac8f6763bbd23d9de502e3"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "cfc0e9418523fefc49e2562efb2c47552c1d9239", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464186fb60d6479e5561ddcab0d0337a5d222bff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464186fb60d6479e5561ddcab0d0337a5d222bff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=464186fb60d6479e5561ddcab0d0337a5d222bff", "patch": "@@ -1,3 +1,11 @@\n+2001-03-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* integrate.h (struct inline_remap): Add local_return_label.\n+\t* integrate.c (expand_inline_function): Initialize it and emit\n+\tit after copy_insn_notes.\n+\t(copy_insn_list): Don't store local_return_label here.\n+\t(copy_insn_notes): New function split out from copy_insn_list.\n+\n 2001-03-17  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (lookup_filename): Emit .file if the assembler"}, {"sha": "f26a44613120472199acd3cbf427f3cd1671fdd4", "filename": "gcc/integrate.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464186fb60d6479e5561ddcab0d0337a5d222bff/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464186fb60d6479e5561ddcab0d0337a5d222bff/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=464186fb60d6479e5561ddcab0d0337a5d222bff", "patch": "@@ -87,6 +87,7 @@ static void mark_stores                 PARAMS ((rtx, rtx, void *));\n static void save_parm_insns\t\tPARAMS ((rtx, rtx));\n static void copy_insn_list              PARAMS ((rtx, struct inline_remap *,\n \t\t\t\t\t\t rtx));\n+static void copy_insn_notes\t\tPARAMS ((rtx, struct inline_remap *));\n static int compare_blocks               PARAMS ((const PTR, const PTR));\n static int find_block                   PARAMS ((const PTR, const PTR));\n \n@@ -778,6 +779,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n   real_label_map\n     = (rtx *) xmalloc ((max_labelno) * sizeof (rtx));\n   map->label_map = real_label_map;\n+  map->local_return_label = NULL_RTX;\n \n   inl_max_uid = (inl_f->emit->x_cur_insn_uid + 1);\n   map->insn_map = (rtx *) xcalloc (inl_max_uid, sizeof (rtx));\n@@ -1142,6 +1144,13 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n   /* Now copy the insns one by one.  */\n   copy_insn_list (insns, map, static_chain_value);\n \n+  /* Now copy the REG_NOTES for those insns.  */\n+  copy_insn_notes (insns, map);\n+\n+  /* If the insn sequence required one, emit the return label.  */\n+  if (map->local_return_label)\n+    emit_label (map->local_return_label);\n+\n   /* Restore the stack pointer if we saved it above.  */\n   if (inl_f->calls_alloca)\n     emit_stack_restore (SAVE_BLOCK, stack_save, NULL_RTX);\n@@ -1226,7 +1235,6 @@ copy_insn_list (insns, map, static_chain_value)\n   register int i;\n   rtx insn;\n   rtx temp;\n-  rtx local_return_label = NULL_RTX;\n #ifdef HAVE_cc0\n   rtx cc0_insn = 0;\n #endif\n@@ -1391,9 +1399,9 @@ copy_insn_list (insns, map, static_chain_value)\n \t      || (GET_CODE (PATTERN (insn)) == PARALLEL\n \t\t  && GET_CODE (XVECEXP (PATTERN (insn), 0, 0)) == RETURN))\n \t    {\n-\t      if (local_return_label == 0)\n-\t\tlocal_return_label = gen_label_rtx ();\n-\t      pattern = gen_jump (local_return_label);\n+\t      if (map->local_return_label == 0)\n+\t\tmap->local_return_label = gen_label_rtx ();\n+\t      pattern = gen_jump (map->local_return_label);\n \t    }\n \t  else\n \t    pattern = copy_rtx_and_substitute (PATTERN (insn), map, 0);\n@@ -1578,10 +1586,19 @@ copy_insn_list (insns, map, static_chain_value)\n \n       map->insn_map[INSN_UID (insn)] = copy;\n     }\n+}\n+\n+/* Copy the REG_NOTES.  Increment const_age, so that only constants\n+   from parameters can be substituted in.  These are the only ones\n+   that are valid across the entire function.  */\n+\n+static void\n+copy_insn_notes (insns, map)\n+     rtx insns;\n+     struct inline_remap *map;\n+{\n+  rtx insn;\n \n-  /* Now copy the REG_NOTES.  Increment const_age, so that only constants\n-     from parameters can be substituted in.  These are the only ones that\n-     are valid across the entire function.  */\n   map->const_age++;\n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n     if (INSN_P (insn)\n@@ -1604,9 +1621,6 @@ copy_insn_list (insns, map, static_chain_value)\n \t      remove_note (map->insn_map[INSN_UID (insn)], note);\n \t  }\n       }\n-\n-  if (local_return_label)\n-    emit_label (local_return_label);\n }\n \f\n /* Given a chain of PARM_DECLs, ARGS, copy each decl into a VAR_DECL,"}, {"sha": "14606a6c1b64512a728a4b76ad76059c079d180e", "filename": "gcc/integrate.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464186fb60d6479e5561ddcab0d0337a5d222bff/gcc%2Fintegrate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464186fb60d6479e5561ddcab0d0337a5d222bff/gcc%2Fintegrate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.h?ref=464186fb60d6479e5561ddcab0d0337a5d222bff", "patch": "@@ -93,6 +93,9 @@ struct inline_remap\n   /* Likewise, this is the copied constraints vector.  */\n   rtvec copy_asm_constraints_vector;\n \n+  /* Target of a return insn, if needed and inlining.  */\n+  rtx local_return_label;\n+\n   /* Indications for regs being pointers and their alignment.  */\n   unsigned char *regno_pointer_align;\n   rtx *x_regno_reg_rtx;"}]}