{"sha": "ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM3ZmQ3ODA3ZDVlMWEwNmE4ZmU5NTdkMGUxMmRmMDc1M2FjYjZjNA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-06-03T22:33:11Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-06-03T22:33:11Z"}, "message": "rs6000: Delete wg\n\nThe \"wg\" constraint is used for the floating point side on mfpgpr\ninstructions.  Those instructions do not exist on any relevant\nhardware.  This patch deletes the constraint and the insns using it.\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wg\"):\n\tDelete.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wg.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.md (*mov<mode>_softfloat32, *movdi_internal64):\n\tDelete \"wg\" alternatives.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271888", "tree": {"sha": "70d855c8c2cb0c88e6d46dc4a8dae53e3f810c89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70d855c8c2cb0c88e6d46dc4a8dae53e3f810c89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51b2b05a85f02f4ab10000f278d796b27778ccf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b2b05a85f02f4ab10000f278d796b27778ccf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51b2b05a85f02f4ab10000f278d796b27778ccf6"}], "stats": {"total": 53, "additions": 24, "deletions": 29}, "files": [{"sha": "80561d7fd6f99bc30df4e8202fcf5256b258b2de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4", "patch": "@@ -1,3 +1,15 @@\n+2019-06-03  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wg\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wg.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.md (*mov<mode>_softfloat32, *movdi_internal64):\n+\tDelete \"wg\" alternatives.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-06-03  Alan Modra  <amodra@gmail.com>\n \n \t* bb-reorder.c (copy_bb_p): Don't overflow size calculation."}, {"sha": "844e947ece6b53ceeab3a8870c9cc2ad0e4ead8e", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4", "patch": "@@ -68,9 +68,6 @@\n (define_register_constraint \"wf\" \"rs6000_constraints[RS6000_CONSTRAINT_wf]\"\n   \"VSX vector register to hold vector float data or NO_REGS.\")\n \n-(define_register_constraint \"wg\" \"rs6000_constraints[RS6000_CONSTRAINT_wg]\"\n-  \"If -mmfpgpr was used, a floating point register or NO_REGS.\")\n-\n (define_register_constraint \"wi\" \"rs6000_constraints[RS6000_CONSTRAINT_wi]\"\n   \"FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\")\n "}, {"sha": "ba4053650663c4caa1dc3919def570bf53d2ad99", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4", "patch": "@@ -2511,7 +2511,6 @@ rs6000_debug_reg_global (void)\n \t   \"wd reg_class = %s\\n\"\n \t   \"we reg_class = %s\\n\"\n \t   \"wf reg_class = %s\\n\"\n-\t   \"wg reg_class = %s\\n\"\n \t   \"wi reg_class = %s\\n\"\n \t   \"wp reg_class = %s\\n\"\n \t   \"wq reg_class = %s\\n\"\n@@ -2530,7 +2529,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wd]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_we]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wf]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wg]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wi]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wq]],\n@@ -3150,7 +3148,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twc - Reserved to represent individual CR bits (used in LLVM).\n \twd - Preferred register class for V2DFmode.\n \twf - Preferred register class for V4SFmode.\n-\twg - Float register for power6x move insns.\n \twi - FP or VSX register to hold 64-bit integers for VSX insns.\n \twn - always NO_REGS.\n \twr - GPR if 64-bit mode is permitted.\n@@ -3182,9 +3179,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n   if (TARGET_ALTIVEC)\n     rs6000_constraints[RS6000_CONSTRAINT_v] = ALTIVEC_REGS;\n \n-  if (TARGET_MFPGPR)\t\t\t\t\t\t/* DFmode  */\n-    rs6000_constraints[RS6000_CONSTRAINT_wg] = FLOAT_REGS;\n-\n   if (TARGET_POWERPC64)\n     {\n       rs6000_constraints[RS6000_CONSTRAINT_wr] = GENERAL_REGS;"}, {"sha": "8ec1f352751ba292df89189fa9aaccf74143abd9", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4", "patch": "@@ -1260,7 +1260,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wd,\t\t/* VSX register for V2DF */\n   RS6000_CONSTRAINT_we,\t\t/* VSX register if ISA 3.0 vector. */\n   RS6000_CONSTRAINT_wf,\t\t/* VSX register for V4SF */\n-  RS6000_CONSTRAINT_wg,\t\t/* FPR register for -mmfpgpr */\n   RS6000_CONSTRAINT_wi,\t\t/* FPR/VSX register to hold DImode */\n   RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */\n   RS6000_CONSTRAINT_wq,\t\t/* VSX reg for IEEE 128-bit fp KFmode.  */"}, {"sha": "c8e43c5ced7f721f149636d3052d8efce7b97982", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4", "patch": "@@ -7641,19 +7641,19 @@\n ;;           STFD         LFD         FMR         LXSD        STXSD\n ;;           LXSDX        STXSDX      XXLOR       XXLXOR      LI 0\n ;;           STD          LD          MR          MT{CTR,LR}  MF{CTR,LR}\n-;;           NOP          MFTGPR      MFFGPR      MFVSRD      MTVSRD\n+;;           NOP          MFVSRD      MTVSRD\n \n (define_insn \"*mov<mode>_hardfloat64\"\n   [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\"\n            \"=m,           d,          d,          <f64_p9>,   wY,\n              <f64_av>,    Z,          <f64_vsx>,  <f64_vsx>,  !r,\n              YZ,          r,          !r,         *c*l,       !r,\n-            *h,           r,          wg,         r,          <f64_dm>\")\n+            *h,           r,          <f64_dm>\")\n \t(match_operand:FMOVE64 1 \"input_operand\"\n             \"d,           m,          d,          wY,         <f64_p9>,\n              Z,           <f64_av>,   <f64_vsx>,  <zero_fp>,  <zero_fp>,\n              r,           YZ,         r,          r,          *h,\n-             0,           wg,         r,          <f64_dm>,   r\"))]\n+             0,           <f64_dm>,   r\"))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n@@ -7674,21 +7674,19 @@\n    mt%0 %1\n    mf%1 %0\n    nop\n-   mftgpr %0,%1\n-   mffgpr %0,%1\n    mfvsrd %0,%x1\n    mtvsrd %x0,%1\"\n   [(set_attr \"type\"\n             \"fpstore,     fpload,     fpsimple,   fpload,     fpstore,\n              fpload,      fpstore,    veclogical, veclogical, integer,\n              store,       load,       *,          mtjmpr,     mfjmpr,\n-             *,           mftgpr,     mffgpr,     mftgpr,     mffgpr\")\n+             *,           mftgpr,     mffgpr\")\n    (set_attr \"size\" \"64\")\n    (set_attr \"isa\"\n             \"*,           *,          *,          p9v,        p9v,\n              *,           *,          *,          *,          *,\n              *,           *,          *,          *,          *,\n-             *,           *,          *,          p8v,        p8v\")])\n+             *,           p8v,        p8v\")])\n \n ;;           STD      LD       MR      MT<SPR> MF<SPR> G-const\n ;;           H-const  F-const  Special\n@@ -8825,20 +8823,20 @@\n ;;              FPR store  FPR load   FPR move   AVX store  AVX store   AVX load\n ;;              AVX load   VSX move   P9 0       P9 -1      AVX 0/-1    VSX 0\n ;;              VSX -1     P9 const   AVX const  From SPR   To SPR      SPR<->SPR\n-;;              FPR->GPR   GPR->FPR   VSX->GPR   GPR->VSX\n+;;              VSX->GPR   GPR->VSX\n (define_insn \"*movdi_internal64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n                \"=YZ,       r,         r,         r,         r,          r,\n                 m,         ^d,        ^d,        wY,        Z,          $v,\n                 $wv,       ^wi,       wa,        wa,        wv,         wi,\n                 wi,        wv,        wv,        r,         *h,         *h,\n-                ?r,        ?wg,       ?r,        ?wi\")\n+                ?r,        ?wi\")\n \t(match_operand:DI 1 \"input_operand\"\n                \"r,         YZ,        r,         I,         L,          nF,\n                 ^d,        m,         ^d,        ^v,        $wv,        wY,\n                 Z,         ^wi,       Oj,        wM,        OjwM,       Oj,\n                 wM,        wS,        wB,        *h,        r,          0,\n-                wg,        r,         wi,        r\"))]\n+                wi,        r\"))]\n   \"TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n        || gpc_reg_operand (operands[1], DImode))\"\n@@ -8867,29 +8865,27 @@\n    mf%1 %0\n    mt%0 %1\n    nop\n-   mftgpr %0,%1\n-   mffgpr %0,%1\n    mfvsrd %0,%x1\n    mtvsrd %x0,%1\"\n   [(set_attr \"type\"\n                \"store,      load,\t*,         *,         *,         *,\n                 fpstore,    fpload,     fpsimple,  fpstore,   fpstore,   fpload,\n                 fpload,     veclogical, vecsimple, vecsimple, vecsimple, veclogical,\n                 veclogical, vecsimple,  vecsimple, mfjmpr,    mtjmpr,    *,\n-                mftgpr,     mffgpr,     mftgpr,    mffgpr\")\n+                mftgpr,    mffgpr\")\n    (set_attr \"size\" \"64\")\n    (set_attr \"length\"\n                \"4,         4,         4,         4,         4,          20,\n                 4,         4,         4,         4,         4,          4,\n                 4,         4,         4,         4,         4,          4,\n                 4,         8,         4,         4,         4,          4,\n-                4,         4,         4,         4\")\n+                4,         4\")\n    (set_attr \"isa\"\n                \"*,         *,         *,         *,         *,          *,\n                 *,         *,         *,         p9v,       *,          p9v,\n                 *,         *,         p9v,       p9v,       *,          *,\n                 *,         *,         *,         *,         *,          *,\n-                *,         *,         p8v,       p8v\")])\n+                p8v,       p8v\")])\n \n ; Some DImode loads are best done as a load of -1 followed by a mask\n ; instruction."}, {"sha": "cf513261d78995168e763bface02acd3224c4d45", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=ec7fd7807d5e1a06a8fe957d0e12df0753acb6c4", "patch": "@@ -3197,7 +3197,7 @@ Altivec vector register\n Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa}, @code{wd},\n-@code{wf}, @code{wg}, @code{wi},\n+@code{wf}, @code{wi},\n @code{wp}, @code{wq}, @code{ws},\n @code{wt}, @code{wv}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n@@ -3256,9 +3256,6 @@ were used or NO_REGS.\n @item wf\n VSX vector register to hold vector float data or NO_REGS.\n \n-@item wg\n-If @option{-mmfpgpr} was used, a floating point register or NO_REGS.\n-\n @item wi\n FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\n "}]}