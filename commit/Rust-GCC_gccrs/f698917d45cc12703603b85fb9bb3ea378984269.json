{"sha": "f698917d45cc12703603b85fb9bb3ea378984269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY5ODkxN2Q0NWNjMTI3MDM2MDNiODVmYjliYjNlYTM3ODk4NDI2OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-12-04T19:41:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-04T19:41:52Z"}, "message": "re PR target/88188 (ICE in print_operand, at config/rs6000/rs6000.c)\n\n\tPR target/88188\n\t* config/rs6000/rs6000.c (ccr_bit): Return -1 instead of assertion\n\tfailures.\n\t(print_operand): Use REG_P instead of GET_CODE == REG.\n\t<case 'D'>: Also check CR_REGNO_P (REGNO (x)).\n\t<case 't'>: Likewise.  Remove GET_MODE check.\n\t* config/rs6000/rs6000.md (scc patterns): Assert ccr_bit didn't\n\treturn -1.\n\n\t* gcc.target/powerpc/pr88188-2.c: New test.\n\nFrom-SVN: r266794", "tree": {"sha": "dbaaaf710169dfa637848913a8c25bd3a678e231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbaaaf710169dfa637848913a8c25bd3a678e231"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f698917d45cc12703603b85fb9bb3ea378984269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f698917d45cc12703603b85fb9bb3ea378984269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f698917d45cc12703603b85fb9bb3ea378984269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f698917d45cc12703603b85fb9bb3ea378984269/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22f309bc29de788fc686f9f98b194996b109b218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f309bc29de788fc686f9f98b194996b109b218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f309bc29de788fc686f9f98b194996b109b218"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "add8fbae1fcae881c6ecf31571255da2cb081228", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f698917d45cc12703603b85fb9bb3ea378984269/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f698917d45cc12703603b85fb9bb3ea378984269/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f698917d45cc12703603b85fb9bb3ea378984269", "patch": "@@ -1,3 +1,14 @@\n+2018-12-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/88188\n+\t* config/rs6000/rs6000.c (ccr_bit): Return -1 instead of assertion\n+\tfailures.\n+\t(print_operand): Use REG_P instead of GET_CODE == REG.\n+\t<case 'D'>: Also check CR_REGNO_P (REGNO (x)).\n+\t<case 't'>: Likewise.  Remove GET_MODE check.\n+\t* config/rs6000/rs6000.md (scc patterns): Assert ccr_bit didn't\n+\treturn -1.\n+\n 2018-12-04  Martin Sebor  <msebor@redhat.com>\n \n \t* doc/extend.texi (attribute aligned): Expand."}, {"sha": "4f12558b0a872cbb2b5adea066cc2cc61a42ba37", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f698917d45cc12703603b85fb9bb3ea378984269/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f698917d45cc12703603b85fb9bb3ea378984269/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f698917d45cc12703603b85fb9bb3ea378984269", "patch": "@@ -20626,7 +20626,8 @@ ccr_bit (rtx op, int scc_p)\n \n   reg = XEXP (op, 0);\n \n-  gcc_assert (GET_CODE (reg) == REG && CR_REGNO_P (REGNO (reg)));\n+  if (!REG_P (reg) || !CR_REGNO_P (REGNO (reg)))\n+    return -1;\n \n   cc_mode = GET_MODE (reg);\n   cc_regnum = REGNO (reg);\n@@ -20636,9 +20637,19 @@ ccr_bit (rtx op, int scc_p)\n \n   /* When generating a sCOND operation, only positive conditions are\n      allowed.  */\n-  gcc_assert (!scc_p\n-\t      || code == EQ || code == GT || code == LT || code == UNORDERED\n-\t      || code == GTU || code == LTU);\n+  if (scc_p)\n+    switch (code)\n+      {\n+      case EQ:\n+      case GT:\n+      case LT:\n+      case UNORDERED:\n+      case GTU:\n+      case LTU:\n+\tbreak;\n+      default:\n+\treturn -1;\n+      }\n \n   switch (code)\n     {\n@@ -20663,7 +20674,7 @@ ccr_bit (rtx op, int scc_p)\n       return scc_p ? base_bit + 3 : base_bit + 1;\n \n     default:\n-      gcc_unreachable ();\n+      return -1;\n     }\n }\n \f\n@@ -20756,7 +20767,7 @@ print_operand (FILE *file, rtx x, int code)\n \n     case 'D':\n       /* Like 'J' but get to the GT bit only.  */\n-      if (!REG_P (x))\n+      if (!REG_P (x) || !CR_REGNO_P (REGNO (x)))\n \t{\n \t  output_operand_lossage (\"invalid %%D value\");\n \t  return;\n@@ -20784,7 +20795,7 @@ print_operand (FILE *file, rtx x, int code)\n \n     case 'E':\n       /* X is a CR register.  Print the number of the EQ bit of the CR */\n-      if (GET_CODE (x) != REG || ! CR_REGNO_P (REGNO (x)))\n+      if (!REG_P (x) || !CR_REGNO_P (REGNO (x)))\n \toutput_operand_lossage (\"invalid %%E value\");\n       else\n \tfprintf (file, \"%d\", 4 * (REGNO (x) - CR0_REGNO) + 2);\n@@ -20793,7 +20804,7 @@ print_operand (FILE *file, rtx x, int code)\n     case 'f':\n       /* X is a CR register.  Print the shift count needed to move it\n \t to the high-order four bits.  */\n-      if (GET_CODE (x) != REG || ! CR_REGNO_P (REGNO (x)))\n+      if (!REG_P (x) || !CR_REGNO_P (REGNO (x)))\n \toutput_operand_lossage (\"invalid %%f value\");\n       else\n \tfprintf (file, \"%d\", 4 * (REGNO (x) - CR0_REGNO));\n@@ -20802,7 +20813,7 @@ print_operand (FILE *file, rtx x, int code)\n     case 'F':\n       /* Similar, but print the count for the rotate in the opposite\n \t direction.  */\n-      if (GET_CODE (x) != REG || ! CR_REGNO_P (REGNO (x)))\n+      if (!REG_P (x) || !CR_REGNO_P (REGNO (x)))\n \toutput_operand_lossage (\"invalid %%F value\");\n       else\n \tfprintf (file, \"%d\", 32 - 4 * (REGNO (x) - CR0_REGNO));\n@@ -21000,7 +21011,7 @@ print_operand (FILE *file, rtx x, int code)\n \n     case 'R':\n       /* X is a CR register.  Print the mask for `mtcrf'.  */\n-      if (GET_CODE (x) != REG || ! CR_REGNO_P (REGNO (x)))\n+      if (!REG_P (x) || !CR_REGNO_P (REGNO (x)))\n \toutput_operand_lossage (\"invalid %%R value\");\n       else\n \tfprintf (file, \"%d\", 128 >> (REGNO (x) - CR0_REGNO));\n@@ -21016,7 +21027,7 @@ print_operand (FILE *file, rtx x, int code)\n \n     case 't':\n       /* Like 'J' but get to the OVERFLOW/UNORDERED bit.  */\n-      if (!REG_P (x) || GET_MODE (x) != CCmode)\n+      if (!REG_P (x) || !CR_REGNO_P (REGNO (x)))\n \t{\n \t  output_operand_lossage (\"invalid %%t value\");\n \t  return;"}, {"sha": "18987cd720723391f2aeca04d1762675defd704d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f698917d45cc12703603b85fb9bb3ea378984269/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f698917d45cc12703603b85fb9bb3ea378984269/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f698917d45cc12703603b85fb9bb3ea378984269", "patch": "@@ -11676,6 +11676,7 @@\n   int put_bit = 31 - (INTVAL (operands[3]) & 31);\n   int count;\n \n+  gcc_assert (is_bit != -1);\n   if (is_bit >= put_bit)\n     count = is_bit - put_bit;\n   else\n@@ -11710,6 +11711,7 @@\n   int put_bit = 31 - (INTVAL (operands[3]) & 31);\n   int count;\n \n+  gcc_assert (is_bit != -1);\n   /* Force split for non-cc0 compare.  */\n   if (which_alternative == 1)\n      return \"#\";"}, {"sha": "6daa60cf8a2c466f6d695235177eae86abd96a01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f698917d45cc12703603b85fb9bb3ea378984269/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f698917d45cc12703603b85fb9bb3ea378984269/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f698917d45cc12703603b85fb9bb3ea378984269", "patch": "@@ -1,3 +1,8 @@\n+2018-12-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/88188\n+\t* gcc.target/powerpc/pr88188-2.c: New test.\n+\n 2018-12-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88184 - ICE when treating name as template-name."}, {"sha": "8c3267b95628866b8e62f72f62636aaf28722c37", "filename": "gcc/testsuite/gcc.target/powerpc/pr88188-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f698917d45cc12703603b85fb9bb3ea378984269/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88188-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f698917d45cc12703603b85fb9bb3ea378984269/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88188-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88188-2.c?ref=f698917d45cc12703603b85fb9bb3ea378984269", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/88188 */\n+/* { dg-do compile } */\n+\n+void\n+foo (void)\n+{\n+  __asm volatile (\"%D0\" : : \"r\" (0));\t/* { dg-error \"invalid %D value\" } */\n+}"}]}