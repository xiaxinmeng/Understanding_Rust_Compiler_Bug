{"sha": "207bf79d7f23a3883694578f431c08960c348e38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA3YmY3OWQ3ZjIzYTM4ODM2OTQ1NzhmNDMxYzA4OTYwYzM0OGUzOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-03-31T20:30:31Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-03-31T20:30:31Z"}, "message": "re PR c/448 (<stdint.h>-related issues (C99 issues))\n\n\tPR c/448\nfixincludes:\n\t* inclhack.def (newlib_stdint_1, newlib_stdint_2): New fixes.\n\t* fixincl.x: Regenerate.\n\t* tests/base/stdint.h: Update.\n\ngcc:\n\t* Makefile.in (USE_GCC_STDINT): Define.\n\t(stmp-int-hdrs): Install stdint.h if applicable.\n\t* c-common.c (CHAR16_TYPE): Define in terms of UINT_LEAST16_TYPE\n\tif known.\n\t(CHAR32_TYPE): Define in terms of UINT_LEAST32_TYPE if known.\n\t(SIG_ATOMIC_TYPE, INT8_TYPE, INT16_TYPE, INT32_TYPE, INT64_TYPE,\n\tUINT8_TYPE, UINT16_TYPE, UINT32_TYPE, UINT64_TYPE,\n\tINT_LEAST8_TYPE, INT_LEAST16_TYPE, INT_LEAST32_TYPE,\n\tINT_LEAST64_TYPE, UINT_LEAST8_TYPE, UINT_LEAST16_TYPE,\n\tUINT_LEAST32_TYPE, UINT_LEAST64_TYPE, INT_FAST8_TYPE,\n\tINT_FAST16_TYPE, INT_FAST32_TYPE, INT_FAST64_TYPE,\n\tUINT_FAST8_TYPE, UINT_FAST16_TYPE, UINT_FAST32_TYPE,\n\tUINT_FAST64_TYPE, INTPTR_TYPE, UINTPTR_TYPE): Define.\n\t(c_common_nodes_and_builtins): Initialize\n\tunderlying_wchar_type_node.  Do not initialize\n\tsigned_wchar_type_node or unsigned_wchar_type_node.  Initialize\n\tnodes for new types.\n\t(c_stddef_cpp_builtins): Define macros for new types.\n\t* c-common.h (CTI_SIGNED_WCHAR_TYPE, CTI_UNSIGNED_WCHAR_TYPE):\n\tRemove.\n\t(CTI_UNDERLYING_WCHAR_TYPE, CTI_SIG_ATOMIC_TYPE, CTI_INT8_TYPE,\n\tCTI_INT16_TYPE, CTI_INT32_TYPE, CTI_INT64_TYPE, CTI_UINT8_TYPE,\n\tCTI_UINT16_TYPE, CTI_UINT32_TYPE, CTI_UINT64_TYPE,\n\tCTI_INT_LEAST8_TYPE, CTI_INT_LEAST16_TYPE, CTI_INT_LEAST32_TYPE,\n\tCTI_INT_LEAST64_TYPE, CTI_UINT_LEAST8_TYPE, CTI_UINT_LEAST16_TYPE,\n\tCTI_UINT_LEAST32_TYPE, CTI_UINT_LEAST64_TYPE, CTI_INT_FAST8_TYPE,\n\tCTI_INT_FAST16_TYPE, CTI_INT_FAST32_TYPE, CTI_INT_FAST64_TYPE,\n\tCTI_UINT_FAST8_TYPE, CTI_UINT_FAST16_TYPE, CTI_UINT_FAST32_TYPE,\n\tCTI_UINT_FAST64_TYPE, CTI_INTPTR_TYPE, CTI_UINTPTR_TYPE): Define.\n\t(signed_wchar_type_node, unsigned_wchar_type_node): Remove.\n\t(underlying_wchar_type_node, sig_atomic_type_node, int8_type_node,\n\tint16_type_node, int32_type_node, int64_type_node,\n\tuint8_type_node, uint16_type_node, c_uint32_type_node,\n\tc_uint64_type_node, int_least8_type_node, int_least16_type_node,\n\tint_least32_type_node, int_least64_type_node,\n\tuint_least8_type_node, uint_least16_type_node,\n\tuint_least32_type_node, uint_least64_type_node,\n\tint_fast8_type_node, int_fast16_type_node, int_fast32_type_node,\n\tint_fast64_type_node, uint_fast8_type_node, uint_fast16_type_node,\n\tuint_fast32_type_node, uint_fast64_type_node, intptr_type_node,\n\tuintptr_type_node): Define.\n\t* c-cppbuiltin.c (builtin_define_constants,\n\tbuiltin_define_type_minmax): New.\n\t(builtin_define_stdint_macros): Define more macros.\n\t(c_cpp_builtins): Define more limit macros.\n\t(type_suffix): New.\n\t(builtin_define_type_max): Define in terms of\n\tbuiltin_define_type_minmax.  Remove is_long parameter.  All\n\tcallers changed.\n\t* config.gcc (use_gcc_stdint): Define.\n\t(tm_file): Add glibc-stdint.h for targets using glibc or uClibc.\n\tAdd newlib-stdint.h for generic targets.\n\t* config/glibc-stdint.h, config/newlib-stdint.h,\n\tginclude/stdint-gcc.h, ginclude/stdint-wrap.h: New.\n\t* config/m32c/m32c.h (UINTPTR_TYPE): Define.\n\t* config/score/score.h (UINTPTR_TYPE): Define.\n\t* config/sol2.h (SIG_ATOMIC_TYPE, INT8_TYPE, INT16_TYPE,\n\tINT32_TYPE, INT64_TYPE, UINT8_TYPE, UINT16_TYPE, UINT32_TYPE,\n\tUINT64_TYPE, INT_LEAST8_TYPE, INT_LEAST16_TYPE, INT_LEAST32_TYPE,\n\tINT_LEAST64_TYPE, UINT_LEAST8_TYPE, UINT_LEAST16_TYPE,\n\tUINT_LEAST32_TYPE, UINT_LEAST64_TYPE, INT_FAST8_TYPE,\n\tINT_FAST16_TYPE, INT_FAST32_TYPE, INT_FAST64_TYPE,\n\tUINT_FAST8_TYPE, UINT_FAST16_TYPE, UINT_FAST32_TYPE,\n\tUINT_FAST64_TYPE, INTPTR_TYPE, UINTPTR_TYPE): Define.\n\t* config/spu/spu.h (STDINT_LONG32): Define.\n\t* configure.ac (use_gcc_stdint): Substitute.\n\t* configure: Regenerate.\n\t* doc/cpp.texi (__SIG_ATOMIC_TYPE__, __INT8_TYPE__,\n\t__INT16_TYPE__, __INT32_TYPE__, __INT64_TYPE__, __UINT8_TYPE__,\n\t__UINT16_TYPE__, __UINT32_TYPE__, __UINT64_TYPE__,\n\t__INT_LEAST8_TYPE__, __INT_LEAST16_TYPE__, __INT_LEAST32_TYPE__,\n\t__INT_LEAST64_TYPE__, __UINT_LEAST8_TYPE__, __UINT_LEAST16_TYPE__,\n\t__UINT_LEAST32_TYPE_, __UINT_LEAST64_TYPE__, __INT_FAST8_TYPE__,\n\t__INT_FAST16_TYPE__, __INT_FAST32_TYPE__, __INT_FAST64_TYPE__,\n\t__UINT_FAST8_TYPE__, __UINT_FAST16_TYPE__, __UINT_FAST32_TYPE__,\n\t__UINT_FAST64_TYPE__, __INTPTR_TYPE__, __UINTPTR_TYPE__,\n\t__WINT_MAX__, __SIZE_MAX__, __PTRDIFF_MAX__, __UINTMAX_MAX__,\n\t__SIG_ATOMIC_MAX__, __INT8_MAX__, __INT16_MAX__, __INT32_MAX__,\n\t__INT64_MAX__, __UINT8_MAX__, __UINT16_MAX__, __UINT32_MAX__,\n\t__UINT64_MAX__, __INT_LEAST8_MAX__, __INT_LEAST16_MAX__,\n\t__INT_LEAST32_MAX__, __INT_LEAST64_MAX__, __UINT_LEAST8_MAX__,\n\t__UINT_LEAST16_MAX__, __UINT_LEAST32_MAX__, __UINT_LEAST64_MAX__,\n\t__INT_FAST8_MAX__, __INT_FAST16_MAX__, __INT_FAST32_MAX__,\n\t__INT_FAST64_MAX__, __UINT_FAST8_MAX__, __UINT_FAST16_MAX__,\n\t__UINT_FAST32_MAX__, __UINT_FAST64_MAX__, __INTPTR_MAX__,\n\t__UINTPTR_MAX__, __WCHAR_MIN__, __WINT_MIN__, __SIG_ATOMIC_MIN__,\n\t__INT8_C, __INT16_C, __INT32_C, __INT64_C, __UINT8_C, __UINT16_C,\n\t__UINT32_C, __UINT64_C, __INTMAX_C, __UINTMAX_C): Document.\n\t* doc/tm.texi (SIG_ATOMIC_TYPE, INT8_TYPE, INT16_TYPE, INT32_TYPE,\n\tINT64_TYPE, UINT8_TYPE, UINT16_TYPE, UINT32_TYPE, UINT64_TYPE,\n\tINT_LEAST8_TYPE, INT_LEAST16_TYPE, INT_LEAST32_TYPE,\n\tINT_LEAST64_TYPE, UINT_LEAST8_TYPE, UINT_LEAST16_TYPE,\n\tUINT_LEAST32_TYPE, UINT_LEAST64_TYPE, INT_FAST8_TYPE,\n\tINT_FAST16_TYPE, INT_FAST32_TYPE, INT_FAST64_TYPE,\n\tUINT_FAST8_TYPE, UINT_FAST16_TYPE, UINT_FAST32_TYPE,\n\tUINT_FAST64_TYPE, INTPTR_TYPE, UINTPTR_TYPE): Document.\n\ngcc/testsuite:\n\t* lib/target-supports.exp (check_effective_target_stdint_types):\n\tUpdate comment.\n\t(check_effective_target_inttypes_types): New.\n\t* gcc.dg/c99-stdint-1.c, gcc.dg/c99-stdint-2.c,\n\tgcc.dg/c99-stdint-3.c, gcc.dg/c99-stdint-4.c,\n\tgcc.dg/c99-stdint-5.c, gcc.dg/c99-stdint-6.c: New tests.\n\nFrom-SVN: r145372", "tree": {"sha": "95ebe0a942d710ca9a7eb0e922e458a37ecf6a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95ebe0a942d710ca9a7eb0e922e458a37ecf6a02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/207bf79d7f23a3883694578f431c08960c348e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207bf79d7f23a3883694578f431c08960c348e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/207bf79d7f23a3883694578f431c08960c348e38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207bf79d7f23a3883694578f431c08960c348e38/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e49be8f7c371881733a0f9b0c7ecccef5232f10e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49be8f7c371881733a0f9b0c7ecccef5232f10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49be8f7c371881733a0f9b0c7ecccef5232f10e"}], "stats": {"total": 2239, "additions": 2069, "deletions": 170}, "files": [{"sha": "f5f0c4993b032f147a2893c7c067573b56cb6f0f", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -1,3 +1,10 @@\n+2009-03-31  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/448\n+\t* inclhack.def (newlib_stdint_1, newlib_stdint_2): New fixes.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/stdint.h: Update.\n+\n 2009-03-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* tests/base/math.h, tests/base/pthread.h, tests/base/sys/wait.h:"}, {"sha": "505e2e875b7e306b012ec78f522d9ea523424282", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 107, "deletions": 5, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Sunday March 29, 2009 at 01:30:25 AM UTC\n+ * It has been AutoGen-ed  Tuesday March 31, 2009 at 05:01:22 PM UTC\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sun Mar 29 01:30:25 UTC 2009\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Tue Mar 31 17:01:22 UTC 2009\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 178 fixup descriptions.\n+ * This file contains 180 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4516,6 +4516,96 @@ static const char* apzNetbsd_Extra_SemicolonPatch[] = {\n     \"#define __END_DECLS }\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Newlib_Stdint_1 fix\n+ */\n+tSCC zNewlib_Stdint_1Name[] =\n+     \"newlib_stdint_1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zNewlib_Stdint_1List[] =\n+  \"stdint.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzNewlib_Stdint_1Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zNewlib_Stdint_1Select0[] =\n+       \"@todo - Add support for wint_t types\";\n+\n+#define    NEWLIB_STDINT_1_TEST_CT  1\n+static tTestDesc aNewlib_Stdint_1Tests[] = {\n+  { TT_EGREP,    zNewlib_Stdint_1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Newlib_Stdint_1\n+ */\n+static const char* apzNewlib_Stdint_1Patch[] = { sed_cmd_z,\n+    \"-e\", \"s@#define INT32_MIN.*@#define INT32_MIN (-INT32_MAX - 1)@\",\n+    \"-e\", \"s@#define INT32_MAX.*@#define INT32_MAX __INT32_MAX__@\",\n+    \"-e\", \"s@#define UINT32_MAX.*@#define UINT32_MAX __UINT32_MAX__@\",\n+    \"-e\", \"s@#define INT_LEAST32_MIN.*@#define INT_LEAST32_MIN (-INT_LEAST32_MAX - 1)@\",\n+    \"-e\", \"s@#define INT_LEAST32_MAX.*@#define INT_LEAST32_MAX __INT_LEAST32_MAX__@\",\n+    \"-e\", \"s@#define UINT_LEAST32_MAX.*@#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__@\",\n+    \"-e\", \"s@#define INT_FAST\\\\([0-9]*\\\\)_MIN.*@#define INT_FAST\\\\1_MIN (-INT_FAST\\\\1_MAX - 1)@\",\n+    \"-e\", \"s@#define INT_FAST\\\\([0-9]*\\\\)_MAX.*@#define INT_FAST\\\\1_MAX __INT_FAST\\\\1_MAX__@\",\n+    \"-e\", \"s@#define UINT_FAST\\\\([0-9]*\\\\)_MAX.*@#define UINT_FAST\\\\1_MAX __UINT_FAST\\\\1_MAX__@\",\n+    \"-e\", \"s@#define SIZE_MAX.*@#define SIZE_MAX __SIZE_MAX__@\",\n+    \"-e\", \"s@#define PTRDIFF_MIN.*@#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)@\",\n+    \"-e\", \"s@#define PTRDIFF_MAX.*@#define PTRDIFF_MAX __PTRDIFF_MAX__@\",\n+    \"-e\", \"s@#define UINT8_C.*@#define UINT8_C(c) __UINT8_C(c)@\",\n+    \"-e\", \"s@#define UINT16_C.*@#define UINT16_C(c) __UINT16_C(c)@\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Newlib_Stdint_2 fix\n+ */\n+tSCC zNewlib_Stdint_2Name[] =\n+     \"newlib_stdint_2\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zNewlib_Stdint_2List[] =\n+  \"stdint.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzNewlib_Stdint_2Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zNewlib_Stdint_2Select0[] =\n+       \"@todo - Add support for wint_t types\";\n+\n+#define    NEWLIB_STDINT_2_TEST_CT  1\n+static tTestDesc aNewlib_Stdint_2Tests[] = {\n+  { TT_EGREP,    zNewlib_Stdint_2Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Newlib_Stdint_2\n+ */\n+static const char* apzNewlib_Stdint_2Patch[] = {\n+    \"format\",\n+    \"#define INTMAX_MAX __INTMAX_MAX__\\n\\\n+#define INTMAX_MIN (-INTMAX_MAX - 1)\\n\\\n+#define UINTMAX_MAX __UINTMAX_MAX__\\n\\\n+#define WCHAR_MAX __WCHAR_MAX__\\n\\\n+#define WCHAR_MIN __WCHAR_MIN__\\n\\\n+#define WINT_MAX __WINT_MAX__\\n\\\n+#define WINT_MIN __WINT_MIN__\\n\\n\\\n+%0\",\n+    \"/\\\\*\\\\* Macros for minimum-width integer constant expressions \\\\*/\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Next_Math_Prefix fix\n@@ -7235,9 +7325,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          223\n+#define REGEX_COUNT          225\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            178\n+#define FIX_COUNT            180\n \n /*\n  *  Enumerate the fixes\n@@ -7354,6 +7444,8 @@ typedef enum {\n     NETBSD_C99_INLINE_1_FIXIDX,\n     NETBSD_C99_INLINE_2_FIXIDX,\n     NETBSD_EXTRA_SEMICOLON_FIXIDX,\n+    NEWLIB_STDINT_1_FIXIDX,\n+    NEWLIB_STDINT_2_FIXIDX,\n     NEXT_MATH_PREFIX_FIXIDX,\n     NEXT_TEMPLATE_FIXIDX,\n     NEXT_VOLITILE_FIXIDX,\n@@ -7979,6 +8071,16 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      NETBSD_EXTRA_SEMICOLON_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aNetbsd_Extra_SemicolonTests,   apzNetbsd_Extra_SemicolonPatch, 0 },\n \n+  {  zNewlib_Stdint_1Name,    zNewlib_Stdint_1List,\n+     apzNewlib_Stdint_1Machs,\n+     NEWLIB_STDINT_1_TEST_CT, FD_MACH_ONLY,\n+     aNewlib_Stdint_1Tests,   apzNewlib_Stdint_1Patch, 0 },\n+\n+  {  zNewlib_Stdint_2Name,    zNewlib_Stdint_2List,\n+     apzNewlib_Stdint_2Machs,\n+     NEWLIB_STDINT_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aNewlib_Stdint_2Tests,   apzNewlib_Stdint_2Patch, 0 },\n+\n   {  zNext_Math_PrefixName,    zNext_Math_PrefixList,\n      apzNext_Math_PrefixMachs,\n      NEXT_MATH_PREFIX_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "e1d413cc8db6f02159739efbb03ca5d7fa570148", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -2430,6 +2430,64 @@ fix = {\n };\n \n \n+/* newlib's stdint.h has several failures to conform to C99.  The fix\n+   for these removed a comment that can be matched to identify unfixed\n+   versions.  */\n+fix = {\n+    hackname  = newlib_stdint_1;\n+    files     = stdint.h;\n+    select    = \"@todo - Add support for wint_t types\";\n+    sed       = \"s@#define INT32_MIN.*@#define INT32_MIN (-INT32_MAX - 1)@\";\n+    sed       = \"s@#define INT32_MAX.*@#define INT32_MAX __INT32_MAX__@\";\n+    sed       = \"s@#define UINT32_MAX.*@#define UINT32_MAX __UINT32_MAX__@\";\n+    sed       = \"s@#define INT_LEAST32_MIN.*@#define INT_LEAST32_MIN (-INT_LEAST32_MAX - 1)@\";\n+    sed       = \"s@#define INT_LEAST32_MAX.*@#define INT_LEAST32_MAX __INT_LEAST32_MAX__@\";\n+    sed       = \"s@#define UINT_LEAST32_MAX.*@#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__@\";\n+    sed       = 's@#define INT_FAST\\([0-9]*\\)_MIN.*@#define INT_FAST\\1_MIN (-INT_FAST\\1_MAX - 1)@';\n+    sed       = 's@#define INT_FAST\\([0-9]*\\)_MAX.*@#define INT_FAST\\1_MAX __INT_FAST\\1_MAX__@';\n+    sed       = 's@#define UINT_FAST\\([0-9]*\\)_MAX.*@#define UINT_FAST\\1_MAX __UINT_FAST\\1_MAX__@';\n+    sed       = \"s@#define SIZE_MAX.*@#define SIZE_MAX __SIZE_MAX__@\";\n+    sed       = \"s@#define PTRDIFF_MIN.*@#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)@\";\n+    sed       = \"s@#define PTRDIFF_MAX.*@#define PTRDIFF_MAX __PTRDIFF_MAX__@\";\n+    sed       = \"s@#define UINT8_C.*@#define UINT8_C(c) __UINT8_C(c)@\";\n+    sed       = \"s@#define UINT16_C.*@#define UINT16_C(c) __UINT16_C(c)@\";\n+    test_text = \"/* @todo - Add support for wint_t types. */\\n\"\n+                \"#define INT32_MIN (-2147483647-1)\\n\"\n+                \"#define INT32_MAX 2147483647\\n\"\n+                \"#define UINT32_MAX 4294967295U\\n\"\n+                \"#define INT_LEAST32_MIN (-2147483647-1)\\n\"\n+                \"#define INT_LEAST32_MAX 2147483647\\n\"\n+                \"#define UINT_LEAST32_MAX 4294967295U\\n\"\n+                \"#define INT_FAST8_MIN INT8_MIN\\n\"\n+                \"#define INT_FAST8_MAX INT8_MAX\\n\"\n+                \"#define UINT_FAST8_MAX UINT8_MAX\\n\"\n+                \"#define SIZE_MAX (__STDINT_EXP(LONG_MAX) * 2UL + 1)\\n\"\n+                \"#define PTRDIFF_MIN (-__STDINT_EXP(LONG_MAX) - 1L)\\n\"\n+                \"#define PTRDIFF_MAX __STDINT_EXP(LONG_MAX)\\n\"\n+                \"#define UINT8_C(x) x##U\\n\"\n+                \"#define UINT16_C(x) x##U\";\n+};\n+\n+\n+fix = {\n+    hackname  = newlib_stdint_2;\n+    files     = stdint.h;\n+    select    = \"@todo - Add support for wint_t types\";\n+    c_fix     = format;\n+    c_fix_arg = \"#define INTMAX_MAX __INTMAX_MAX__\\n\"\n+                \"#define INTMAX_MIN (-INTMAX_MAX - 1)\\n\"\n+                \"#define UINTMAX_MAX __UINTMAX_MAX__\\n\"\n+                \"#define WCHAR_MAX __WCHAR_MAX__\\n\"\n+                \"#define WCHAR_MIN __WCHAR_MIN__\\n\"\n+                \"#define WINT_MAX __WINT_MAX__\\n\"\n+                \"#define WINT_MIN __WINT_MIN__\\n\\n\"\n+                \"%0\";\n+    c_fix_arg = '/\\*\\* Macros for minimum-width integer constant expressions \\*/';\n+    test_text = \"/* @todo - Add support for wint_t types. */\\n\"\n+                \"/** Macros for minimum-width integer constant expressions */\";\n+};\n+\n+\n /*\n  *  NeXT 3.2 adds const prefix to some math functions.\n  *  These conflict with the built-in functions."}, {"sha": "9ca62aea785404eb1622e31fe6fc32f4c407ff58", "filename": "fixincludes/tests/base/stdint.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/fixincludes%2Ftests%2Fbase%2Fstdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/fixincludes%2Ftests%2Fbase%2Fstdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstdint.h?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -14,3 +14,36 @@\n #error This header file is to be used only for c99 mode compilations\n #else\n #endif  /* IRIX_STDINT_C99_CHECK */\n+\n+\n+#if defined( NEWLIB_STDINT_1_CHECK )\n+/* @todo - Add support for wint_t types. */\n+#define INT32_MIN (-INT32_MAX - 1)\n+#define INT32_MAX __INT32_MAX__\n+#define UINT32_MAX __UINT32_MAX__\n+#define INT_LEAST32_MIN (-INT_LEAST32_MAX - 1)\n+#define INT_LEAST32_MAX __INT_LEAST32_MAX__\n+#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__\n+#define INT_FAST8_MIN (-INT_FAST8_MAX - 1)\n+#define INT_FAST8_MAX __INT_FAST8_MAX__\n+#define UINT_FAST8_MAX __UINT_FAST8_MAX__\n+#define SIZE_MAX __SIZE_MAX__\n+#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)\n+#define PTRDIFF_MAX __PTRDIFF_MAX__\n+#define UINT8_C(c) __UINT8_C(c)\n+#define UINT16_C(c) __UINT16_C(c)\n+#endif  /* NEWLIB_STDINT_1_CHECK */\n+\n+\n+#if defined( NEWLIB_STDINT_2_CHECK )\n+/* @todo - Add support for wint_t types. */\n+#define INTMAX_MAX __INTMAX_MAX__\n+#define INTMAX_MIN (-INTMAX_MAX - 1)\n+#define UINTMAX_MAX __UINTMAX_MAX__\n+#define WCHAR_MAX __WCHAR_MAX__\n+#define WCHAR_MIN __WCHAR_MIN__\n+#define WINT_MAX __WINT_MAX__\n+#define WINT_MIN __WINT_MIN__\n+\n+/** Macros for minimum-width integer constant expressions */\n+#endif  /* NEWLIB_STDINT_2_CHECK */"}, {"sha": "ec44d8a6468c2f20fdb734d84dc02fa616b0b7fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -1,3 +1,103 @@\n+2009-03-31  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/448\n+\t* Makefile.in (USE_GCC_STDINT): Define.\n+\t(stmp-int-hdrs): Install stdint.h if applicable.\n+\t* c-common.c (CHAR16_TYPE): Define in terms of UINT_LEAST16_TYPE\n+\tif known.\n+\t(CHAR32_TYPE): Define in terms of UINT_LEAST32_TYPE if known.\n+\t(SIG_ATOMIC_TYPE, INT8_TYPE, INT16_TYPE, INT32_TYPE, INT64_TYPE,\n+\tUINT8_TYPE, UINT16_TYPE, UINT32_TYPE, UINT64_TYPE,\n+\tINT_LEAST8_TYPE, INT_LEAST16_TYPE, INT_LEAST32_TYPE,\n+\tINT_LEAST64_TYPE, UINT_LEAST8_TYPE, UINT_LEAST16_TYPE,\n+\tUINT_LEAST32_TYPE, UINT_LEAST64_TYPE, INT_FAST8_TYPE,\n+\tINT_FAST16_TYPE, INT_FAST32_TYPE, INT_FAST64_TYPE,\n+\tUINT_FAST8_TYPE, UINT_FAST16_TYPE, UINT_FAST32_TYPE,\n+\tUINT_FAST64_TYPE, INTPTR_TYPE, UINTPTR_TYPE): Define.\n+\t(c_common_nodes_and_builtins): Initialize\n+\tunderlying_wchar_type_node.  Do not initialize\n+\tsigned_wchar_type_node or unsigned_wchar_type_node.  Initialize\n+\tnodes for new types.\n+\t(c_stddef_cpp_builtins): Define macros for new types.\n+\t* c-common.h (CTI_SIGNED_WCHAR_TYPE, CTI_UNSIGNED_WCHAR_TYPE):\n+\tRemove.\n+\t(CTI_UNDERLYING_WCHAR_TYPE, CTI_SIG_ATOMIC_TYPE, CTI_INT8_TYPE,\n+\tCTI_INT16_TYPE, CTI_INT32_TYPE, CTI_INT64_TYPE, CTI_UINT8_TYPE,\n+\tCTI_UINT16_TYPE, CTI_UINT32_TYPE, CTI_UINT64_TYPE,\n+\tCTI_INT_LEAST8_TYPE, CTI_INT_LEAST16_TYPE, CTI_INT_LEAST32_TYPE,\n+\tCTI_INT_LEAST64_TYPE, CTI_UINT_LEAST8_TYPE, CTI_UINT_LEAST16_TYPE,\n+\tCTI_UINT_LEAST32_TYPE, CTI_UINT_LEAST64_TYPE, CTI_INT_FAST8_TYPE,\n+\tCTI_INT_FAST16_TYPE, CTI_INT_FAST32_TYPE, CTI_INT_FAST64_TYPE,\n+\tCTI_UINT_FAST8_TYPE, CTI_UINT_FAST16_TYPE, CTI_UINT_FAST32_TYPE,\n+\tCTI_UINT_FAST64_TYPE, CTI_INTPTR_TYPE, CTI_UINTPTR_TYPE): Define.\n+\t(signed_wchar_type_node, unsigned_wchar_type_node): Remove.\n+\t(underlying_wchar_type_node, sig_atomic_type_node, int8_type_node,\n+\tint16_type_node, int32_type_node, int64_type_node,\n+\tuint8_type_node, uint16_type_node, c_uint32_type_node,\n+\tc_uint64_type_node, int_least8_type_node, int_least16_type_node,\n+\tint_least32_type_node, int_least64_type_node,\n+\tuint_least8_type_node, uint_least16_type_node,\n+\tuint_least32_type_node, uint_least64_type_node,\n+\tint_fast8_type_node, int_fast16_type_node, int_fast32_type_node,\n+\tint_fast64_type_node, uint_fast8_type_node, uint_fast16_type_node,\n+\tuint_fast32_type_node, uint_fast64_type_node, intptr_type_node,\n+\tuintptr_type_node): Define.\n+\t* c-cppbuiltin.c (builtin_define_constants,\n+\tbuiltin_define_type_minmax): New.\n+\t(builtin_define_stdint_macros): Define more macros.\n+\t(c_cpp_builtins): Define more limit macros.\n+\t(type_suffix): New.\n+\t(builtin_define_type_max): Define in terms of\n+\tbuiltin_define_type_minmax.  Remove is_long parameter.  All\n+\tcallers changed.\n+\t* config.gcc (use_gcc_stdint): Define.\n+\t(tm_file): Add glibc-stdint.h for targets using glibc or uClibc.\n+\tAdd newlib-stdint.h for generic targets.\n+\t* config/glibc-stdint.h, config/newlib-stdint.h,\n+\tginclude/stdint-gcc.h, ginclude/stdint-wrap.h: New.\n+\t* config/m32c/m32c.h (UINTPTR_TYPE): Define.\n+\t* config/score/score.h (UINTPTR_TYPE): Define.\n+\t* config/sol2.h (SIG_ATOMIC_TYPE, INT8_TYPE, INT16_TYPE,\n+\tINT32_TYPE, INT64_TYPE, UINT8_TYPE, UINT16_TYPE, UINT32_TYPE,\n+\tUINT64_TYPE, INT_LEAST8_TYPE, INT_LEAST16_TYPE, INT_LEAST32_TYPE,\n+\tINT_LEAST64_TYPE, UINT_LEAST8_TYPE, UINT_LEAST16_TYPE,\n+\tUINT_LEAST32_TYPE, UINT_LEAST64_TYPE, INT_FAST8_TYPE,\n+\tINT_FAST16_TYPE, INT_FAST32_TYPE, INT_FAST64_TYPE,\n+\tUINT_FAST8_TYPE, UINT_FAST16_TYPE, UINT_FAST32_TYPE,\n+\tUINT_FAST64_TYPE, INTPTR_TYPE, UINTPTR_TYPE): Define.\n+\t* config/spu/spu.h (STDINT_LONG32): Define.\n+\t* configure.ac (use_gcc_stdint): Substitute.\n+\t* configure: Regenerate.\n+\t* doc/cpp.texi (__SIG_ATOMIC_TYPE__, __INT8_TYPE__,\n+\t__INT16_TYPE__, __INT32_TYPE__, __INT64_TYPE__, __UINT8_TYPE__,\n+\t__UINT16_TYPE__, __UINT32_TYPE__, __UINT64_TYPE__,\n+\t__INT_LEAST8_TYPE__, __INT_LEAST16_TYPE__, __INT_LEAST32_TYPE__,\n+\t__INT_LEAST64_TYPE__, __UINT_LEAST8_TYPE__, __UINT_LEAST16_TYPE__,\n+\t__UINT_LEAST32_TYPE_, __UINT_LEAST64_TYPE__, __INT_FAST8_TYPE__,\n+\t__INT_FAST16_TYPE__, __INT_FAST32_TYPE__, __INT_FAST64_TYPE__,\n+\t__UINT_FAST8_TYPE__, __UINT_FAST16_TYPE__, __UINT_FAST32_TYPE__,\n+\t__UINT_FAST64_TYPE__, __INTPTR_TYPE__, __UINTPTR_TYPE__,\n+\t__WINT_MAX__, __SIZE_MAX__, __PTRDIFF_MAX__, __UINTMAX_MAX__,\n+\t__SIG_ATOMIC_MAX__, __INT8_MAX__, __INT16_MAX__, __INT32_MAX__,\n+\t__INT64_MAX__, __UINT8_MAX__, __UINT16_MAX__, __UINT32_MAX__,\n+\t__UINT64_MAX__, __INT_LEAST8_MAX__, __INT_LEAST16_MAX__,\n+\t__INT_LEAST32_MAX__, __INT_LEAST64_MAX__, __UINT_LEAST8_MAX__,\n+\t__UINT_LEAST16_MAX__, __UINT_LEAST32_MAX__, __UINT_LEAST64_MAX__,\n+\t__INT_FAST8_MAX__, __INT_FAST16_MAX__, __INT_FAST32_MAX__,\n+\t__INT_FAST64_MAX__, __UINT_FAST8_MAX__, __UINT_FAST16_MAX__,\n+\t__UINT_FAST32_MAX__, __UINT_FAST64_MAX__, __INTPTR_MAX__,\n+\t__UINTPTR_MAX__, __WCHAR_MIN__, __WINT_MIN__, __SIG_ATOMIC_MIN__,\n+\t__INT8_C, __INT16_C, __INT32_C, __INT64_C, __UINT8_C, __UINT16_C,\n+\t__UINT32_C, __UINT64_C, __INTMAX_C, __UINTMAX_C): Document.\n+\t* doc/tm.texi (SIG_ATOMIC_TYPE, INT8_TYPE, INT16_TYPE, INT32_TYPE,\n+\tINT64_TYPE, UINT8_TYPE, UINT16_TYPE, UINT32_TYPE, UINT64_TYPE,\n+\tINT_LEAST8_TYPE, INT_LEAST16_TYPE, INT_LEAST32_TYPE,\n+\tINT_LEAST64_TYPE, UINT_LEAST8_TYPE, UINT_LEAST16_TYPE,\n+\tUINT_LEAST32_TYPE, UINT_LEAST64_TYPE, INT_FAST8_TYPE,\n+\tINT_FAST16_TYPE, INT_FAST32_TYPE, INT_FAST64_TYPE,\n+\tUINT_FAST8_TYPE, UINT_FAST16_TYPE, UINT_FAST32_TYPE,\n+\tUINT_FAST64_TYPE, INTPTR_TYPE, UINTPTR_TYPE): Document.\n+\n 2009-03-31  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* loop-iv.c (suitable_set_for_replacement): Renamed from"}, {"sha": "5d0e4a820a59674f9cbb4bd707001b11bcc4ffb8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -634,6 +634,9 @@ EXTRA_GCC_OBJS =@extra_gcc_objs@\n # List of additional header files to install.\n EXTRA_HEADERS =@extra_headers_list@\n \n+# How to handle <stdint.h>.\n+USE_GCC_STDINT = @use_gcc_stdint@\n+\n # The configure script will set this to collect2$(exeext), except on a\n # (non-Unix) host which can not build collect2, for which it will be\n # set to empty.\n@@ -3533,6 +3536,14 @@ stmp-int-hdrs: $(STMP_FIXINC) $(USER_H) $(UNWIND_H) fixinc_list\n \tdone\n \trm -f include/unwind.h\n \tcp $(UNWIND_H) include/unwind.h\n+\trm -f include/stdint.h\n+\tif [ $(USE_GCC_STDINT) = wrap ]; then \\\n+\t  rm -f include/stdint-gcc.h; \\\n+\t  cp $(srcdir)/ginclude/stdint-gcc.h include/stdint-gcc.h; \\\n+\t  cp $(srcdir)/ginclude/stdint-wrap.h include/stdint.h; \\\n+\telif [ $(USE_GCC_STDINT) = provide ]; then \\\n+\t  cp $(srcdir)/ginclude/stdint-gcc.h include/stdint.h; \\\n+\tfi\n \tset -e; for ml in `cat fixinc_list`; do \\\n \t  sysroot_headers_suffix=`echo $${ml} | sed -e 's/;.*$$//'`; \\\n \t  multi_dir=`echo $${ml} | sed -e 's/^[^;]*;//'`; \\"}, {"sha": "8b05a40ef72dc139afeae320301b097844fcb9d7", "filename": "gcc/c-common.c", "status": "modified", "additions": 261, "deletions": 11, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -69,11 +69,21 @@ cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n #define PID_TYPE \"int\"\n #endif\n \n-#ifndef CHAR16_TYPE\n+/* If GCC knows the exact uint_least16_t and uint_least32_t types from\n+   <stdint.h>, use them for char16_t and char32_t.  Otherwise, use\n+   these guesses; getting the wrong type of a given width will not\n+   affect C++ name mangling because in C++ these are distinct types\n+   not typedefs.  */\n+\n+#ifdef UINT_LEAST16_TYPE\n+#define CHAR16_TYPE UINT_LEAST16_TYPE\n+#else\n #define CHAR16_TYPE \"short unsigned int\"\n #endif\n \n-#ifndef CHAR32_TYPE\n+#ifdef UINT_LEAST32_TYPE\n+#define CHAR32_TYPE UINT_LEAST32_TYPE\n+#else\n #define CHAR32_TYPE \"unsigned int\"\n #endif\n \n@@ -109,6 +119,116 @@ cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \t\t\t: \"long long unsigned int\"))\n #endif\n \n+/* There are no default definitions of these <stdint.h> types.  */\n+\n+#ifndef SIG_ATOMIC_TYPE\n+#define SIG_ATOMIC_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT8_TYPE\n+#define INT8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT16_TYPE\n+#define INT16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT32_TYPE\n+#define INT32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT64_TYPE\n+#define INT64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT8_TYPE\n+#define UINT8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT16_TYPE\n+#define UINT16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT32_TYPE\n+#define UINT32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT64_TYPE\n+#define UINT64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_LEAST8_TYPE\n+#define INT_LEAST8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_LEAST16_TYPE\n+#define INT_LEAST16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_LEAST32_TYPE\n+#define INT_LEAST32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_LEAST64_TYPE\n+#define INT_LEAST64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_LEAST8_TYPE\n+#define UINT_LEAST8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_LEAST16_TYPE\n+#define UINT_LEAST16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_LEAST32_TYPE\n+#define UINT_LEAST32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_LEAST64_TYPE\n+#define UINT_LEAST64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_FAST8_TYPE\n+#define INT_FAST8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_FAST16_TYPE\n+#define INT_FAST16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_FAST32_TYPE\n+#define INT_FAST32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_FAST64_TYPE\n+#define INT_FAST64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_FAST8_TYPE\n+#define UINT_FAST8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_FAST16_TYPE\n+#define UINT_FAST16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_FAST32_TYPE\n+#define UINT_FAST32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_FAST64_TYPE\n+#define UINT_FAST64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INTPTR_TYPE\n+#define INTPTR_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINTPTR_TYPE\n+#define UINTPTR_TYPE ((const char *) NULL)\n+#endif\n+\n /* The following symbols are subsumed in the c_global_trees array, and\n    listed here individually for documentation purposes.\n \n@@ -131,8 +251,6 @@ cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \ttree unsigned_char_type_node;\n \ttree signed_char_type_node;\n \ttree wchar_type_node;\n-\ttree signed_wchar_type_node;\n-\ttree unsigned_wchar_type_node;\n \n \ttree char16_type_node;\n \ttree char32_type_node;\n@@ -4762,6 +4880,7 @@ c_common_nodes_and_builtins (void)\n   wchar_type_node = get_identifier (MODIFIED_WCHAR_TYPE);\n   wchar_type_node = TREE_TYPE (identifier_global_value (wchar_type_node));\n   wchar_type_size = TYPE_PRECISION (wchar_type_node);\n+  underlying_wchar_type_node = wchar_type_node;\n   if (c_dialect_cxx ())\n     {\n       if (TYPE_UNSIGNED (wchar_type_node))\n@@ -4770,11 +4889,6 @@ c_common_nodes_and_builtins (void)\n \twchar_type_node = make_signed_type (wchar_type_size);\n       record_builtin_type (RID_WCHAR, \"wchar_t\", wchar_type_node);\n     }\n-  else\n-    {\n-      signed_wchar_type_node = c_common_signed_type (wchar_type_node);\n-      unsigned_wchar_type_node = c_common_unsigned_type (wchar_type_node);\n-    }\n \n   /* This is for wide string constants.  */\n   wchar_array_type_node\n@@ -4820,6 +4934,88 @@ c_common_nodes_and_builtins (void)\n   uintmax_type_node =\n     TREE_TYPE (identifier_global_value (get_identifier (UINTMAX_TYPE)));\n \n+  if (SIG_ATOMIC_TYPE)\n+    sig_atomic_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (SIG_ATOMIC_TYPE)));\n+  if (INT8_TYPE)\n+    int8_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT8_TYPE)));\n+  if (INT16_TYPE)\n+    int16_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT16_TYPE)));\n+  if (INT32_TYPE)\n+    int32_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT32_TYPE)));\n+  if (INT64_TYPE)\n+    int64_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT64_TYPE)));\n+  if (UINT8_TYPE)\n+    uint8_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT8_TYPE)));\n+  if (UINT16_TYPE)\n+    uint16_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT16_TYPE)));\n+  if (UINT32_TYPE)\n+    c_uint32_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT32_TYPE)));\n+  if (UINT64_TYPE)\n+    c_uint64_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT64_TYPE)));\n+  if (INT_LEAST8_TYPE)\n+    int_least8_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT_LEAST8_TYPE)));\n+  if (INT_LEAST16_TYPE)\n+    int_least16_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT_LEAST16_TYPE)));\n+  if (INT_LEAST32_TYPE)\n+    int_least32_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT_LEAST32_TYPE)));\n+  if (INT_LEAST64_TYPE)\n+    int_least64_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT_LEAST64_TYPE)));\n+  if (UINT_LEAST8_TYPE)\n+    uint_least8_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT_LEAST8_TYPE)));\n+  if (UINT_LEAST16_TYPE)\n+    uint_least16_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT_LEAST16_TYPE)));\n+  if (UINT_LEAST32_TYPE)\n+    uint_least32_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT_LEAST32_TYPE)));\n+  if (UINT_LEAST64_TYPE)\n+    uint_least64_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT_LEAST64_TYPE)));\n+  if (INT_FAST8_TYPE)\n+    int_fast8_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT_FAST8_TYPE)));\n+  if (INT_FAST16_TYPE)\n+    int_fast16_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT_FAST16_TYPE)));\n+  if (INT_FAST32_TYPE)\n+    int_fast32_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT_FAST32_TYPE)));\n+  if (INT_FAST64_TYPE)\n+    int_fast64_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INT_FAST64_TYPE)));\n+  if (UINT_FAST8_TYPE)\n+    uint_fast8_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT_FAST8_TYPE)));\n+  if (UINT_FAST16_TYPE)\n+    uint_fast16_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT_FAST16_TYPE)));\n+  if (UINT_FAST32_TYPE)\n+    uint_fast32_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT_FAST32_TYPE)));\n+  if (UINT_FAST64_TYPE)\n+    uint_fast64_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINT_FAST64_TYPE)));\n+  if (INTPTR_TYPE)\n+    intptr_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (INTPTR_TYPE)));\n+  if (UINTPTR_TYPE)\n+    uintptr_type_node =\n+      TREE_TYPE (identifier_global_value (get_identifier (UINTPTR_TYPE)));\n+\n   default_function_type = build_function_type (integer_type_node, NULL_TREE);\n   ptrdiff_type_node\n     = TREE_TYPE (identifier_global_value (get_identifier (PTRDIFF_TYPE)));\n@@ -5522,8 +5718,8 @@ boolean_increment (enum tree_code code, tree arg)\n   return val;\n }\n \f\n-/* Built-in macros for stddef.h, that require macros defined in this\n-   file.  */\n+/* Built-in macros for stddef.h and stdint.h, that require macros\n+   defined in this file.  */\n void\n c_stddef_cpp_builtins(void)\n {\n@@ -5535,6 +5731,60 @@ c_stddef_cpp_builtins(void)\n   builtin_define_with_value (\"__UINTMAX_TYPE__\", UINTMAX_TYPE, 0);\n   builtin_define_with_value (\"__CHAR16_TYPE__\", CHAR16_TYPE, 0);\n   builtin_define_with_value (\"__CHAR32_TYPE__\", CHAR32_TYPE, 0);\n+  if (SIG_ATOMIC_TYPE)\n+    builtin_define_with_value (\"__SIG_ATOMIC_TYPE__\", SIG_ATOMIC_TYPE, 0);\n+  if (INT8_TYPE)\n+    builtin_define_with_value (\"__INT8_TYPE__\", INT8_TYPE, 0);\n+  if (INT16_TYPE)\n+    builtin_define_with_value (\"__INT16_TYPE__\", INT16_TYPE, 0);\n+  if (INT32_TYPE)\n+    builtin_define_with_value (\"__INT32_TYPE__\", INT32_TYPE, 0);\n+  if (INT64_TYPE)\n+    builtin_define_with_value (\"__INT64_TYPE__\", INT64_TYPE, 0);\n+  if (UINT8_TYPE)\n+    builtin_define_with_value (\"__UINT8_TYPE__\", UINT8_TYPE, 0);\n+  if (UINT16_TYPE)\n+    builtin_define_with_value (\"__UINT16_TYPE__\", UINT16_TYPE, 0);\n+  if (UINT32_TYPE)\n+    builtin_define_with_value (\"__UINT32_TYPE__\", UINT32_TYPE, 0);\n+  if (UINT64_TYPE)\n+    builtin_define_with_value (\"__UINT64_TYPE__\", UINT64_TYPE, 0);\n+  if (INT_LEAST8_TYPE)\n+    builtin_define_with_value (\"__INT_LEAST8_TYPE__\", INT_LEAST8_TYPE, 0);\n+  if (INT_LEAST16_TYPE)\n+    builtin_define_with_value (\"__INT_LEAST16_TYPE__\", INT_LEAST16_TYPE, 0);\n+  if (INT_LEAST32_TYPE)\n+    builtin_define_with_value (\"__INT_LEAST32_TYPE__\", INT_LEAST32_TYPE, 0);\n+  if (INT_LEAST64_TYPE)\n+    builtin_define_with_value (\"__INT_LEAST64_TYPE__\", INT_LEAST64_TYPE, 0);\n+  if (UINT_LEAST8_TYPE)\n+    builtin_define_with_value (\"__UINT_LEAST8_TYPE__\", UINT_LEAST8_TYPE, 0);\n+  if (UINT_LEAST16_TYPE)\n+    builtin_define_with_value (\"__UINT_LEAST16_TYPE__\", UINT_LEAST16_TYPE, 0);\n+  if (UINT_LEAST32_TYPE)\n+    builtin_define_with_value (\"__UINT_LEAST32_TYPE__\", UINT_LEAST32_TYPE, 0);\n+  if (UINT_LEAST64_TYPE)\n+    builtin_define_with_value (\"__UINT_LEAST64_TYPE__\", UINT_LEAST64_TYPE, 0);\n+  if (INT_FAST8_TYPE)\n+    builtin_define_with_value (\"__INT_FAST8_TYPE__\", INT_FAST8_TYPE, 0);\n+  if (INT_FAST16_TYPE)\n+    builtin_define_with_value (\"__INT_FAST16_TYPE__\", INT_FAST16_TYPE, 0);\n+  if (INT_FAST32_TYPE)\n+    builtin_define_with_value (\"__INT_FAST32_TYPE__\", INT_FAST32_TYPE, 0);\n+  if (INT_FAST64_TYPE)\n+    builtin_define_with_value (\"__INT_FAST64_TYPE__\", INT_FAST64_TYPE, 0);\n+  if (UINT_FAST8_TYPE)\n+    builtin_define_with_value (\"__UINT_FAST8_TYPE__\", UINT_FAST8_TYPE, 0);\n+  if (UINT_FAST16_TYPE)\n+    builtin_define_with_value (\"__UINT_FAST16_TYPE__\", UINT_FAST16_TYPE, 0);\n+  if (UINT_FAST32_TYPE)\n+    builtin_define_with_value (\"__UINT_FAST32_TYPE__\", UINT_FAST32_TYPE, 0);\n+  if (UINT_FAST64_TYPE)\n+    builtin_define_with_value (\"__UINT_FAST64_TYPE__\", UINT_FAST64_TYPE, 0);\n+  if (INTPTR_TYPE)\n+    builtin_define_with_value (\"__INTPTR_TYPE__\", INTPTR_TYPE, 0);\n+  if (UINTPTR_TYPE)\n+    builtin_define_with_value (\"__UINTPTR_TYPE__\", UINTPTR_TYPE, 0);\n }\n \n static void"}, {"sha": "26423a8cc9ec94f0592d5286d4f748aa9e5134cf", "filename": "gcc/c-common.h", "status": "modified", "additions": 75, "deletions": 4, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -153,8 +153,7 @@ enum c_tree_index\n     CTI_CHAR16_TYPE,\n     CTI_CHAR32_TYPE,\n     CTI_WCHAR_TYPE,\n-    CTI_SIGNED_WCHAR_TYPE,\n-    CTI_UNSIGNED_WCHAR_TYPE,\n+    CTI_UNDERLYING_WCHAR_TYPE,\n     CTI_WINT_TYPE,\n     CTI_SIGNED_SIZE_TYPE, /* For format checking only.  */\n     CTI_UNSIGNED_PTRDIFF_TYPE, /* For format checking only.  */\n@@ -163,6 +162,36 @@ enum c_tree_index\n     CTI_WIDEST_INT_LIT_TYPE,\n     CTI_WIDEST_UINT_LIT_TYPE,\n \n+    /* Types for <stdint.h>, that may not be defined on all\n+       targets.  */\n+    CTI_SIG_ATOMIC_TYPE,\n+    CTI_INT8_TYPE,\n+    CTI_INT16_TYPE,\n+    CTI_INT32_TYPE,\n+    CTI_INT64_TYPE,\n+    CTI_UINT8_TYPE,\n+    CTI_UINT16_TYPE,\n+    CTI_UINT32_TYPE,\n+    CTI_UINT64_TYPE,\n+    CTI_INT_LEAST8_TYPE,\n+    CTI_INT_LEAST16_TYPE,\n+    CTI_INT_LEAST32_TYPE,\n+    CTI_INT_LEAST64_TYPE,\n+    CTI_UINT_LEAST8_TYPE,\n+    CTI_UINT_LEAST16_TYPE,\n+    CTI_UINT_LEAST32_TYPE,\n+    CTI_UINT_LEAST64_TYPE,\n+    CTI_INT_FAST8_TYPE,\n+    CTI_INT_FAST16_TYPE,\n+    CTI_INT_FAST32_TYPE,\n+    CTI_INT_FAST64_TYPE,\n+    CTI_UINT_FAST8_TYPE,\n+    CTI_UINT_FAST16_TYPE,\n+    CTI_UINT_FAST32_TYPE,\n+    CTI_UINT_FAST64_TYPE,\n+    CTI_INTPTR_TYPE,\n+    CTI_UINTPTR_TYPE,\n+\n     CTI_CHAR_ARRAY_TYPE,\n     CTI_CHAR16_ARRAY_TYPE,\n     CTI_CHAR32_ARRAY_TYPE,\n@@ -239,8 +268,7 @@ extern const unsigned int num_c_common_reswords;\n #define char16_type_node\t\tc_global_trees[CTI_CHAR16_TYPE]\n #define char32_type_node\t\tc_global_trees[CTI_CHAR32_TYPE]\n #define wchar_type_node\t\t\tc_global_trees[CTI_WCHAR_TYPE]\n-#define signed_wchar_type_node\t\tc_global_trees[CTI_SIGNED_WCHAR_TYPE]\n-#define unsigned_wchar_type_node\tc_global_trees[CTI_UNSIGNED_WCHAR_TYPE]\n+#define underlying_wchar_type_node\tc_global_trees[CTI_UNDERLYING_WCHAR_TYPE]\n #define wint_type_node\t\t\tc_global_trees[CTI_WINT_TYPE]\n #define signed_size_type_node\t\tc_global_trees[CTI_SIGNED_SIZE_TYPE]\n #define unsigned_ptrdiff_type_node\tc_global_trees[CTI_UNSIGNED_PTRDIFF_TYPE]\n@@ -249,6 +277,34 @@ extern const unsigned int num_c_common_reswords;\n #define widest_integer_literal_type_node c_global_trees[CTI_WIDEST_INT_LIT_TYPE]\n #define widest_unsigned_literal_type_node c_global_trees[CTI_WIDEST_UINT_LIT_TYPE]\n \n+#define sig_atomic_type_node\t\tc_global_trees[CTI_SIG_ATOMIC_TYPE]\n+#define int8_type_node\t\t\tc_global_trees[CTI_INT8_TYPE]\n+#define int16_type_node\t\t\tc_global_trees[CTI_INT16_TYPE]\n+#define int32_type_node\t\t\tc_global_trees[CTI_INT32_TYPE]\n+#define int64_type_node\t\t\tc_global_trees[CTI_INT64_TYPE]\n+#define uint8_type_node\t\t\tc_global_trees[CTI_UINT8_TYPE]\n+#define uint16_type_node\t\tc_global_trees[CTI_UINT16_TYPE]\n+#define c_uint32_type_node\t\tc_global_trees[CTI_UINT32_TYPE]\n+#define c_uint64_type_node\t\tc_global_trees[CTI_UINT64_TYPE]\n+#define int_least8_type_node\t\tc_global_trees[CTI_INT_LEAST8_TYPE]\n+#define int_least16_type_node\t\tc_global_trees[CTI_INT_LEAST16_TYPE]\n+#define int_least32_type_node\t\tc_global_trees[CTI_INT_LEAST32_TYPE]\n+#define int_least64_type_node\t\tc_global_trees[CTI_INT_LEAST64_TYPE]\n+#define uint_least8_type_node\t\tc_global_trees[CTI_UINT_LEAST8_TYPE]\n+#define uint_least16_type_node\t\tc_global_trees[CTI_UINT_LEAST16_TYPE]\n+#define uint_least32_type_node\t\tc_global_trees[CTI_UINT_LEAST32_TYPE]\n+#define uint_least64_type_node\t\tc_global_trees[CTI_UINT_LEAST64_TYPE]\n+#define int_fast8_type_node\t\tc_global_trees[CTI_INT_FAST8_TYPE]\n+#define int_fast16_type_node\t\tc_global_trees[CTI_INT_FAST16_TYPE]\n+#define int_fast32_type_node\t\tc_global_trees[CTI_INT_FAST32_TYPE]\n+#define int_fast64_type_node\t\tc_global_trees[CTI_INT_FAST64_TYPE]\n+#define uint_fast8_type_node\t\tc_global_trees[CTI_UINT_FAST8_TYPE]\n+#define uint_fast16_type_node\t\tc_global_trees[CTI_UINT_FAST16_TYPE]\n+#define uint_fast32_type_node\t\tc_global_trees[CTI_UINT_FAST32_TYPE]\n+#define uint_fast64_type_node\t\tc_global_trees[CTI_UINT_FAST64_TYPE]\n+#define intptr_type_node\t\tc_global_trees[CTI_INTPTR_TYPE]\n+#define uintptr_type_node\t\tc_global_trees[CTI_UINTPTR_TYPE]\n+\n #define truthvalue_type_node\t\tc_global_trees[CTI_TRUTHVALUE_TYPE]\n #define truthvalue_true_node\t\tc_global_trees[CTI_TRUTHVALUE_TRUE]\n #define truthvalue_false_node\t\tc_global_trees[CTI_TRUTHVALUE_FALSE]\n@@ -818,6 +874,21 @@ extern void finish_file\t(void);\n        || (TREE_CODE (EXPR) == C_MAYBE_CONST_EXPR\t\\\n \t   && C_MAYBE_CONST_EXPR_INT_OPERANDS (EXPR))))\n \n+/* C_MAYBE_CONST_EXPR accessors.  */\n+#define C_MAYBE_CONST_EXPR_PRE(NODE)\t\t\t\\\n+  TREE_OPERAND (C_MAYBE_CONST_EXPR_CHECK (NODE), 0)\n+#define C_MAYBE_CONST_EXPR_EXPR(NODE)\t\t\t\\\n+  TREE_OPERAND (C_MAYBE_CONST_EXPR_CHECK (NODE), 1)\n+#define C_MAYBE_CONST_EXPR_INT_OPERANDS(NODE)\t\t\\\n+  TREE_LANG_FLAG_0 (C_MAYBE_CONST_EXPR_CHECK (NODE))\n+#define C_MAYBE_CONST_EXPR_NON_CONST(NODE)\t\t\\\n+  TREE_LANG_FLAG_1 (C_MAYBE_CONST_EXPR_CHECK (NODE))\n+#define EXPR_INT_CONST_OPERANDS(EXPR)\t\t\t\\\n+  (INTEGRAL_TYPE_P (TREE_TYPE (EXPR))\t\t\t\\\n+   && (TREE_CODE (EXPR) == INTEGER_CST\t\t\t\\\n+       || (TREE_CODE (EXPR) == C_MAYBE_CONST_EXPR\t\\\n+\t   && C_MAYBE_CONST_EXPR_INT_OPERANDS (EXPR))))\n+\n /* In a FIELD_DECL, nonzero if the decl was originally a bitfield.  */\n #define DECL_C_BIT_FIELD(NODE) \\\n   (DECL_LANG_FLAG_4 (FIELD_DECL_CHECK (NODE)) == 1)"}, {"sha": "8b776b15dbcf121026315831d9db5d1043e973f9", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 190, "deletions": 29, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -55,7 +55,9 @@ static void builtin_define_with_hex_fp_value (const char *, tree,\n \t\t\t\t\t      const char *,\n \t\t\t\t\t      const char *);\n static void builtin_define_stdint_macros (void);\n-static void builtin_define_type_max (const char *, tree, int);\n+static void builtin_define_constants (const char *, tree);\n+static void builtin_define_type_max (const char *, tree);\n+static void builtin_define_type_minmax (const char *, const char *, tree);\n static void builtin_define_type_precision (const char *, tree);\n static void builtin_define_type_sizeof (const char *, tree);\n static void builtin_define_float_constants (const char *, \n@@ -394,21 +396,93 @@ define__GNUC__ (void)\n     cpp_define_formatted (parse_in, \"__GNUG__=%d\", major);\n }\n \n-/* Define macros used by <stdint.h>.  Currently only defines limits\n-   for intmax_t, used by the testsuite.  */\n+/* Define macros used by <stdint.h>.  */\n static void\n builtin_define_stdint_macros (void)\n {\n-  int intmax_long;\n-  if (intmax_type_node == long_long_integer_type_node)\n-    intmax_long = 2;\n-  else if (intmax_type_node == long_integer_type_node)\n-    intmax_long = 1;\n-  else if (intmax_type_node == integer_type_node)\n-    intmax_long = 0;\n-  else\n-    gcc_unreachable ();\n-  builtin_define_type_max (\"__INTMAX_MAX__\", intmax_type_node, intmax_long);\n+  builtin_define_type_max (\"__INTMAX_MAX__\", intmax_type_node);\n+  builtin_define_constants (\"__INTMAX_C\", intmax_type_node);\n+  builtin_define_type_max (\"__UINTMAX_MAX__\", uintmax_type_node);\n+  builtin_define_constants (\"__UINTMAX_C\", uintmax_type_node);\n+  if (sig_atomic_type_node)\n+    builtin_define_type_minmax (\"__SIG_ATOMIC_MIN__\", \"__SIG_ATOMIC_MAX__\",\n+\t\t\t\tsig_atomic_type_node);\n+  if (int8_type_node)\n+    builtin_define_type_max (\"__INT8_MAX__\", int8_type_node);\n+  if (int16_type_node)\n+    builtin_define_type_max (\"__INT16_MAX__\", int16_type_node);\n+  if (int32_type_node)\n+    builtin_define_type_max (\"__INT32_MAX__\", int32_type_node);\n+  if (int64_type_node)\n+    builtin_define_type_max (\"__INT64_MAX__\", int64_type_node);\n+  if (uint8_type_node)\n+    builtin_define_type_max (\"__UINT8_MAX__\", uint8_type_node);\n+  if (uint16_type_node)\n+    builtin_define_type_max (\"__UINT16_MAX__\", uint16_type_node);\n+  if (c_uint32_type_node)\n+    builtin_define_type_max (\"__UINT32_MAX__\", c_uint32_type_node);\n+  if (c_uint64_type_node)\n+    builtin_define_type_max (\"__UINT64_MAX__\", c_uint64_type_node);\n+  if (int_least8_type_node)\n+    {\n+      builtin_define_type_max (\"__INT_LEAST8_MAX__\", int_least8_type_node);\n+      builtin_define_constants (\"__INT8_C\", int_least8_type_node);\n+    }\n+  if (int_least16_type_node)\n+    {\n+      builtin_define_type_max (\"__INT_LEAST16_MAX__\", int_least16_type_node);\n+      builtin_define_constants (\"__INT16_C\", int_least16_type_node);\n+    }\n+  if (int_least32_type_node)\n+    {\n+      builtin_define_type_max (\"__INT_LEAST32_MAX__\", int_least32_type_node);\n+      builtin_define_constants (\"__INT32_C\", int_least32_type_node);\n+    }\n+  if (int_least64_type_node)\n+    {\n+      builtin_define_type_max (\"__INT_LEAST64_MAX__\", int_least64_type_node);\n+      builtin_define_constants (\"__INT64_C\", int_least64_type_node);\n+    }\n+  if (uint_least8_type_node)\n+    {\n+      builtin_define_type_max (\"__UINT_LEAST8_MAX__\", uint_least8_type_node);\n+      builtin_define_constants (\"__UINT8_C\", uint_least8_type_node);\n+    }\n+  if (uint_least16_type_node)\n+    {\n+      builtin_define_type_max (\"__UINT_LEAST16_MAX__\", uint_least16_type_node);\n+      builtin_define_constants (\"__UINT16_C\", uint_least16_type_node);\n+    }\n+  if (uint_least32_type_node)\n+    {\n+      builtin_define_type_max (\"__UINT_LEAST32_MAX__\", uint_least32_type_node);\n+      builtin_define_constants (\"__UINT32_C\", uint_least32_type_node);\n+    }\n+  if (uint_least64_type_node)\n+    {\n+      builtin_define_type_max (\"__UINT_LEAST64_MAX__\", uint_least64_type_node);\n+      builtin_define_constants (\"__UINT64_C\", uint_least64_type_node);\n+    }\n+  if (int_fast8_type_node)\n+    builtin_define_type_max (\"__INT_FAST8_MAX__\", int_fast8_type_node);\n+  if (int_fast16_type_node)\n+    builtin_define_type_max (\"__INT_FAST16_MAX__\", int_fast16_type_node);\n+  if (int_fast32_type_node)\n+    builtin_define_type_max (\"__INT_FAST32_MAX__\", int_fast32_type_node);\n+  if (int_fast64_type_node)\n+    builtin_define_type_max (\"__INT_FAST64_MAX__\", int_fast64_type_node);\n+  if (uint_fast8_type_node)\n+    builtin_define_type_max (\"__UINT_FAST8_MAX__\", uint_fast8_type_node);\n+  if (uint_fast16_type_node)\n+    builtin_define_type_max (\"__UINT_FAST16_MAX__\", uint_fast16_type_node);\n+  if (uint_fast32_type_node)\n+    builtin_define_type_max (\"__UINT_FAST32_MAX__\", uint_fast32_type_node);\n+  if (uint_fast64_type_node)\n+    builtin_define_type_max (\"__UINT_FAST64_MAX__\", uint_fast64_type_node);\n+  if (intptr_type_node)\n+    builtin_define_type_max (\"__INTPTR_MAX__\", intptr_type_node);\n+  if (uintptr_type_node)\n+    builtin_define_type_max (\"__UINTPTR_MAX__\", uintptr_type_node);\n }\n \n /* Adjust the optimization macros when a #pragma GCC optimization is done to\n@@ -518,17 +592,21 @@ c_cpp_builtins (cpp_reader *pfile)\n   if (USING_SJLJ_EXCEPTIONS)\n     cpp_define (pfile, \"__USING_SJLJ_EXCEPTIONS__\");\n \n-  /* limits.h needs to know these.  */\n-  builtin_define_type_max (\"__SCHAR_MAX__\", signed_char_type_node, 0);\n-  builtin_define_type_max (\"__SHRT_MAX__\", short_integer_type_node, 0);\n-  builtin_define_type_max (\"__INT_MAX__\", integer_type_node, 0);\n-  builtin_define_type_max (\"__LONG_MAX__\", long_integer_type_node, 1);\n-  builtin_define_type_max (\"__LONG_LONG_MAX__\", long_long_integer_type_node, 2);\n-  builtin_define_type_max (\"__WCHAR_MAX__\", wchar_type_node, 0);\n+  /* limits.h and stdint.h need to know these.  */\n+  builtin_define_type_max (\"__SCHAR_MAX__\", signed_char_type_node);\n+  builtin_define_type_max (\"__SHRT_MAX__\", short_integer_type_node);\n+  builtin_define_type_max (\"__INT_MAX__\", integer_type_node);\n+  builtin_define_type_max (\"__LONG_MAX__\", long_integer_type_node);\n+  builtin_define_type_max (\"__LONG_LONG_MAX__\", long_long_integer_type_node);\n+  builtin_define_type_minmax (\"__WCHAR_MIN__\", \"__WCHAR_MAX__\",\n+\t\t\t      underlying_wchar_type_node);\n+  builtin_define_type_minmax (\"__WINT_MIN__\", \"__WINT_MAX__\", wint_type_node);\n+  builtin_define_type_max (\"__PTRDIFF_MAX__\", ptrdiff_type_node);\n+  builtin_define_type_max (\"__SIZE_MAX__\", size_type_node);\n \n   builtin_define_type_precision (\"__CHAR_BIT__\", char_type_node);\n \n-  /* stdint.h (eventually) and the testsuite need to know these.  */\n+  /* stdint.h and the testsuite need to know these.  */\n   builtin_define_stdint_macros ();\n \n   /* float.h needs to know these.  */\n@@ -891,12 +969,80 @@ builtin_define_with_hex_fp_value (const char *macro,\n   cpp_define (parse_in, buf1);\n }\n \n-/* Define MAX for TYPE based on the precision of the type.  IS_LONG is\n-   1 for type \"long\" and 2 for \"long long\".  We have to handle\n-   unsigned types, since wchar_t might be unsigned.  */\n+/* Return a string constant for the suffix for a value of type TYPE\n+   promoted according to the integer promotions.  The type must be one\n+   of the standard integer type nodes.  */\n+\n+static const char *\n+type_suffix (tree type)\n+{\n+  static const char *const suffixes[] = { \"\", \"U\", \"L\", \"UL\", \"LL\", \"ULL\" };\n+  int unsigned_suffix;\n+  int is_long;\n+\n+  if (type == long_long_integer_type_node\n+      || type == long_long_unsigned_type_node)\n+    is_long = 2;\n+  else if (type == long_integer_type_node\n+\t   || type == long_unsigned_type_node)\n+    is_long = 1;\n+  else if (type == integer_type_node\n+\t   || type == unsigned_type_node\n+\t   || type == short_integer_type_node\n+\t   || type == short_unsigned_type_node\n+\t   || type == signed_char_type_node\n+\t   || type == unsigned_char_type_node\n+\t   /* ??? \"char\" is not a signed or unsigned integer type and\n+\t      so is not permitted for the standard typedefs, but some\n+\t      systems use it anyway.  */\n+\t   || type == char_type_node)\n+    is_long = 0;\n+  else\n+    gcc_unreachable ();\n+\n+  unsigned_suffix = TYPE_UNSIGNED (type);\n+  if (TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node))\n+    unsigned_suffix = 0;\n+  return suffixes[is_long * 2 + unsigned_suffix];\n+}\n+\n+/* Define MACRO as a <stdint.h> constant-suffix macro for TYPE.  */\n+static void\n+builtin_define_constants (const char *macro, tree type)\n+{\n+  const char *suffix;\n+  char *buf;\n+\n+  suffix = type_suffix (type);\n+\n+  if (suffix[0] == 0)\n+    {\n+      buf = (char *) alloca (strlen (macro) + 6);\n+      sprintf (buf, \"%s(c)=c\", macro);\n+    }\n+  else\n+    {\n+      buf = (char *) alloca (strlen (macro) + 9 + strlen (suffix) + 1);\n+      sprintf (buf, \"%s(c)=c ## %s\", macro, suffix);\n+    }\n+\n+  cpp_define (parse_in, buf);\n+}\n+\n+/* Define MAX for TYPE based on the precision of the type.  */\n+\n+static void\n+builtin_define_type_max (const char *macro, tree type)\n+{\n+  builtin_define_type_minmax (NULL, macro, type);\n+}\n+\n+/* Define MIN_MACRO (if not NULL) and MAX_MACRO for TYPE based on the\n+   precision of the type.  */\n \n static void\n-builtin_define_type_max (const char *macro, tree type, int is_long)\n+builtin_define_type_minmax (const char *min_macro, const char *max_macro,\n+\t\t\t    tree type)\n {\n   static const char *const values[]\n     = { \"127\", \"255\",\n@@ -905,7 +1051,6 @@ builtin_define_type_max (const char *macro, tree type, int is_long)\n \t\"9223372036854775807\", \"18446744073709551615\",\n \t\"170141183460469231731687303715884105727\",\n \t\"340282366920938463463374607431768211455\" };\n-  static const char *const suffixes[] = { \"\", \"U\", \"L\", \"UL\", \"LL\", \"ULL\" };\n \n   const char *value, *suffix;\n   char *buf;\n@@ -925,11 +1070,27 @@ builtin_define_type_max (const char *macro, tree type, int is_long)\n     }\n \n   value = values[idx + TYPE_UNSIGNED (type)];\n-  suffix = suffixes[is_long * 2 + TYPE_UNSIGNED (type)];\n+  suffix = type_suffix (type);\n \n-  buf = (char *) alloca (strlen (macro) + 1 + strlen (value)\n+  buf = (char *) alloca (strlen (max_macro) + 1 + strlen (value)\n                          + strlen (suffix) + 1);\n-  sprintf (buf, \"%s=%s%s\", macro, value, suffix);\n+  sprintf (buf, \"%s=%s%s\", max_macro, value, suffix);\n \n   cpp_define (parse_in, buf);\n+\n+  if (min_macro)\n+    {\n+      if (TYPE_UNSIGNED (type))\n+\t{\n+\t  buf = (char *) alloca (strlen (min_macro) + 2 + strlen (suffix) + 1);\n+\t  sprintf (buf, \"%s=0%s\", min_macro, suffix);\n+\t}\n+      else\n+\t{\n+\t  buf = (char *) alloca (strlen (min_macro) + 3\n+\t\t\t\t + strlen (max_macro) + 6);\n+\t  sprintf (buf, \"%s=(-%s - 1)\", min_macro, max_macro);\n+\t}\n+      cpp_define (parse_in, buf);\n+    }\n }"}, {"sha": "5617065fe2a9120f31d8b3e5dedff10643352151", "filename": "gcc/config.gcc", "status": "modified", "additions": 160, "deletions": 104, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -104,6 +104,12 @@\n #  use_gcc_tgmath\tIf set, add tgmath.h to the list of used header\n #\t\t\tfiles.\n #\n+#  use_gcc_stdint\tIf \"wrap\", install a version of stdint.h that\n+#\t\t\twraps the system's copy for hosted compilations;\n+#\t\t\tif \"provide\", provide a version of systems without\n+#\t\t\tsuch a system header; otherwise \"none\", do not\n+#\t\t\tprovide such a header at all.\n+#\n #  extra_passes\t\tList of extra executables compiled for this target\n #\t\t\tmachine, used for compiling from source to object.\n #\n@@ -166,6 +172,7 @@ out_file=\n tmake_file=\n extra_headers=\n use_gcc_tgmath=yes\n+use_gcc_stdint=none\n extra_passes=\n extra_parts=\n extra_programs=\n@@ -494,6 +501,7 @@ case ${target} in\n   # Assume that glibc or uClibc are being used and so __cxa_atexit is provided.\n   default_use_cxa_atexit=yes\n   use_gcc_tgmath=no\n+  use_gcc_stdint=wrap\n   ;;\n *-*-netbsd*)\n   tmake_file=\"t-slibgcc-elf-ver t-libc-ok t-netbsd t-libgcc-pic\"\n@@ -551,6 +559,10 @@ case ${target} in\n   case ${enable_threads} in\n     yes) thread_file='rtems' ;;\n   esac\n+  use_gcc_stdint=wrap\n+  ;;\n+*-*-uclinux*)\n+  use_gcc_stdint=wrap\n   ;;\n *-*-vxworks*)\n   tmake_file=t-vxworks\n@@ -566,6 +578,7 @@ case ${target} in\n *-*-elf)\n   # Assume that newlib is being used and so __cxa_atexit is provided.\n   default_use_cxa_atexit=yes\n+  use_gcc_stdint=wrap\n   ;;\n esac\n \n@@ -582,12 +595,12 @@ case ${target} in\n \tfi\n \t;;\n alpha*-*-linux*)\n-\ttm_file=\"${tm_file} alpha/elf.h alpha/linux.h alpha/linux-elf.h\"\n+\ttm_file=\"${tm_file} alpha/elf.h alpha/linux.h alpha/linux-elf.h glibc-stdint.h\"\n \ttarget_cpu_default=\"MASK_GAS\"\n \ttmake_file=\"${tmake_file} alpha/t-crtfm alpha/t-alpha alpha/t-ieee alpha/t-linux\"\n \t;;\n alpha*-*-gnu*)\n-\ttm_file=\"$tm_file alpha/elf.h alpha/linux.h alpha/linux-elf.h gnu.h alpha/gnu.h\"\n+\ttm_file=\"$tm_file alpha/elf.h alpha/linux.h alpha/linux-elf.h gnu.h glibc-stdint.h alpha/gnu.h\"\n \ttarget_cpu_default=\"MASK_GAS\"\n \ttmake_file=\"${tmake_file} alpha/t-crtfm alpha/t-alpha alpha/t-ieee\"\n \t;;\n@@ -657,7 +670,7 @@ alpha*-dec-*vms*)\n \tlocal_prefix=/gnu\n \t;;\n arc-*-elf*)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file}\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h ${tm_file}\"\n \textra_parts=\"crtinit.o crtfini.o\"\n \t;;\n arm-wrs-vxworks)\n@@ -679,7 +692,7 @@ arm*-*-netbsd*)\n \tuse_collect2=yes\n \t;;\n arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n-\ttm_file=\"dbxelf.h elfos.h linux.h arm/elf.h arm/linux-gas.h arm/linux-elf.h\"\n+\ttm_file=\"dbxelf.h elfos.h linux.h glibc-stdint.h arm/elf.h arm/linux-gas.h arm/linux-elf.h\"\n \tcase $target in\n \tarm*b-*)\n \t\ttm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\"\n@@ -705,7 +718,7 @@ arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n arm*-*-uclinux*)\t\t# ARM ucLinux\n-\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/linux-gas.h arm/uclinux-elf.h\"\n+\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/linux-gas.h arm/uclinux-elf.h glibc-stdint.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n \tcase ${target} in\n \tarm*-*-uclinux*eabi)\n@@ -722,7 +735,7 @@ arm*-*-uclinux*)\t\t# ARM ucLinux\n \ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n arm*-*-ecos-elf)\n-\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/ecos-elf.h\"\n+\ttm_file=\"dbxelf.h elfos.h newlib-stdint.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/ecos-elf.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n \ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n@@ -736,9 +749,10 @@ arm*-*-eabi* | arm*-*-symbianelf* )\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n \tcase ${target} in\n \tarm*-*-eabi*)\n-\t  tm_file=\"$tm_file arm/eabi.h\"\n+\t  tm_file=\"$tm_file arm/eabi.h newlib-stdint.h\"\n \t  tmake_file=\"${tmake_file} arm/t-bpabi\"\n \t  extra_options=\"${extra_options} arm/eabi.opt\"\n+\t  use_gcc_stdint=wrap\n \t  ;;\n \tarm*-*-symbianelf*)\n \t  tm_file=\"${tm_file} arm/symbian.h\"\n@@ -751,12 +765,12 @@ arm*-*-eabi* | arm*-*-symbianelf* )\n \ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n arm*-*-rtems*)\n-\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/rtems-elf.h rtems.h\"\n+\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/rtems-elf.h rtems.h newlib-stdint.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf t-rtems arm/t-rtems\"\n \ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n arm*-*-elf)\n-\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h\"\n+\ttm_file=\"dbxelf.h elfos.h newlib-stdint.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n \ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n@@ -767,32 +781,34 @@ arm*-wince-pe*)\n \textra_objs=\"pe.o\"\n \t;;\n arm-*-pe*)\n-\ttm_file=\"arm/semi.h arm/aout.h arm/arm.h arm/coff.h dbxcoff.h arm/pe.h\"\n+\ttm_file=\"arm/semi.h arm/aout.h arm/arm.h arm/coff.h dbxcoff.h arm/pe.h newlib-stdint.h\"\n \ttmake_file=\"arm/t-arm arm/t-pe\"\n+\tuse_gcc_stdint=wrap\n \textra_options=\"${extra_options} arm/pe.opt\"\n \textra_objs=\"pe.o\"\n \t;;\n avr-*-rtems*)\n-\ttm_file=\"avr/avr.h dbxelf.h avr/rtems.h rtems.h\"\n+\ttm_file=\"avr/avr.h dbxelf.h avr/rtems.h rtems.h newlib-stdint.h\"\n \ttmake_file=\"avr/t-avr t-rtems avr/t-rtems\"\n \t;;\n avr-*-*)\n-\ttm_file=\"avr/avr.h dbxelf.h\"\n+\ttm_file=\"avr/avr.h dbxelf.h newlib-stdint.h\"\n+\tuse_gcc_stdint=wrap\n \t;;\n bfin*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h bfin/elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h bfin/elf.h\"\n \ttmake_file=bfin/t-bfin-elf\n \tuse_collect2=no\n \t;;\n bfin*-uclinux*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h bfin/elf.h linux.h bfin/uclinux.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h bfin/elf.h linux.h glibc-stdint.h bfin/uclinux.h\"\n \ttmake_file=bfin/t-bfin-uclinux\n \ttm_defines=\"${tm_defines} UCLIBC_DEFAULT=1\"\n \textra_options=\"${extra_options} linux.opt\"\n \tuse_collect2=no\n \t;;\n bfin*-linux-uclibc*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h bfin/elf.h linux.h bfin/linux.h ./linux-sysroot-suffix.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h bfin/elf.h linux.h glibc-stdint.h bfin/linux.h ./linux-sysroot-suffix.h\"\n \ttmake_file=\"t-slibgcc-elf-ver bfin/t-bfin-linux\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tuse_collect2=no\n@@ -802,25 +818,28 @@ bfin*-rtems*)\n \ttmake_file=\"bfin/t-bfin t-rtems bfin/t-rtems\"\n \t;;\n bfin*-*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h bfin/elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h bfin/elf.h\"\n \ttmake_file=bfin/t-bfin\n \tuse_collect2=no\n+\tuse_gcc_stdint=wrap\n \t;;\n crisv32-*-elf | crisv32-*-none)\n-\ttm_file=\"dbxelf.h elfos.h ${tm_file}\"\n+\ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n \ttmake_file=\"cris/t-cris\"\n \ttarget_cpu_default=32\n \tgas=yes\n \textra_options=\"${extra_options} cris/elf.opt\"\n+\tuse_gcc_stdint=wrap\n \t;;\n cris-*-elf | cris-*-none)\n-\ttm_file=\"dbxelf.h elfos.h ${tm_file}\"\n+\ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n \ttmake_file=\"cris/t-cris cris/t-elfmulti\"\n \tgas=yes\n \textra_options=\"${extra_options} cris/elf.opt\"\n+\tuse_gcc_stdint=wrap\n \t;;\n crisv32-*-linux* | cris-*-linux*)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} linux.h cris/linux.h\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} linux.h glibc-stdint.h cris/linux.h\"\n \t# We need to avoid using t-linux, so override default tmake_file\n \ttmake_file=\"cris/t-cris t-slibgcc-elf-ver cris/t-linux\"\n \textra_options=\"${extra_options} cris/linux.opt\"\n@@ -834,43 +853,44 @@ crisv32-*-linux* | cris-*-linux*)\n \tesac\n \t;;\n crx-*-elf)\n-\ttm_file=\"elfos.h ${tm_file}\"\n+\ttm_file=\"elfos.h newlib-stdint.h ${tm_file}\"\n \textra_parts=\"crtbegin.o crtend.o\"\n \tuse_collect2=no\n \t;;\n fr30-*-elf)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file}\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h ${tm_file}\"\n \ttmake_file=fr30/t-fr30\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t;;\n frv-*-elf)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} frv/frv-abi.h\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h ${tm_file} frv/frv-abi.h\"\n \ttmake_file=frv/t-frv\n \t;;\n frv-*-*linux*)\n \ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} \\\n-\t         linux.h frv/linux.h frv/frv-abi.h\"\n+\t         linux.h glibc-stdint.h frv/linux.h frv/frv-abi.h\"\n \ttmake_file=\"${tmake_file} frv/t-frv frv/t-linux\"\n \t;;\n h8300-*-rtems*)\n \ttmake_file=\"h8300/t-h8300 h8300/t-elf t-rtems h8300/t-rtems\"\n-\ttm_file=\"h8300/h8300.h dbxelf.h elfos.h h8300/elf.h h8300/rtems.h rtems.h\"\n+\ttm_file=\"h8300/h8300.h dbxelf.h elfos.h h8300/elf.h h8300/rtems.h rtems.h newlib-stdint.h\"\n \t;;\n h8300-*-elf*)\n \ttmake_file=\"h8300/t-h8300 h8300/t-elf\"\n-\ttm_file=\"h8300/h8300.h dbxelf.h elfos.h h8300/elf.h\"\n+\ttm_file=\"h8300/h8300.h dbxelf.h elfos.h newlib-stdint.h h8300/elf.h\"\n \t;;\n hppa*64*-*-linux*)\n \ttarget_cpu_default=\"MASK_PA_11|MASK_PA_20\"\n \ttm_file=\"pa/pa64-start.h ${tm_file} dbxelf.h elfos.h svr4.h linux.h \\\n-\t\t pa/pa-linux.h pa/pa64-regs.h pa/pa-64.h pa/pa64-linux.h\"\n+\t\t glibc-stdint.h pa/pa-linux.h pa/pa64-regs.h pa/pa-64.h \\\n+\t\t pa/pa64-linux.h\"\n \ttmake_file=\"${tmake_file} pa/t-linux64\"\n \tgas=yes gnu_ld=yes\n \tneed_64bit_hwint=yes\n \t;;\n hppa*-*-linux*)\n \ttarget_cpu_default=\"MASK_PA_11|MASK_NO_SPACE_REGS\"\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h pa/pa-linux.h \\\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h pa/pa-linux.h \\\n \t\t pa/pa32-regs.h pa/pa32-linux.h\"\n \ttmake_file=\"${tmake_file} pa/t-linux\"\n \t# Set the libgcc version number\n@@ -1002,11 +1022,11 @@ x86_64-*-darwin*)\n \ttm_file=\"${tm_file} ${cpu_type}/darwin64.h\"\n \t;;\n i[34567]86-*-elf*)\n-\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h\"\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h newlib-stdint.h i386/i386elf.h\"\n \ttmake_file=\"${tmake_file} i386/t-i386elf t-svr4\"\n \t;;\n x86_64-*-elf*)\n-\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h i386/x86-64.h\"\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h newlib-stdint.h i386/i386elf.h i386/x86-64.h\"\n \ttmake_file=\"${tmake_file} i386/t-i386elf t-svr4\"\n \t;;\n i[34567]86-*-freebsd*)\n@@ -1045,7 +1065,7 @@ i[34567]86-*-openbsd*)\n i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i[34567]86-*-gnu* | i[34567]86-*-kopensolaris*-gnu)\n \t\t\t# Intel 80386's running GNU/*\n \t\t\t# with ELF format using glibc 2\n-\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h\"\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h\"\n \tcase ${target} in\n \ti[34567]86-*-linux*)\n \t\tif test x$enable_targets = xall; then\n@@ -1079,7 +1099,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \ttmake_file=\"${tmake_file} i386/t-crtstuff i386/t-crtpc i386/t-crtfm t-dfprules\"\n \t;;\n x86_64-*-linux* | x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n-\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h \\\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h \\\n \t\t i386/x86-64.h i386/linux64.h\"\n \tcase ${target} in\n \tx86_64-*-kfreebsd*-gnu) tm_file=\"${tm_file} kfreebsd-gnu.h\" ;;\n@@ -1131,7 +1151,7 @@ i[34567]86-*-nto-qnx*)\n \tgas=yes\n \t;;\n i[34567]86-*-rtems*)\n-\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h i386/rtemself.h rtems.h\"\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h i386/rtemself.h rtems.h newlib-stdint.h\"\n \textra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n \ttmake_file=\"${tmake_file} i386/t-rtems-i386 i386/t-crtstuff t-rtems\"\n \t;;\n@@ -1167,6 +1187,7 @@ i[34567]86-*-solaris2*)\n \t\t# depends on a runtime test and is thus performed in\n \t\t# libgcc/configure.ac instead.\n \t\tneed_64bit_hwint=yes\n+\t\tuse_gcc_stdint=wrap\n \t\tcase X\"${with_cpu}\" in\n \t\tXgeneric|Xcore2|Xnocona|Xx86-64|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx)\n \t\t\t;;\n@@ -1182,6 +1203,9 @@ i[34567]86-*-solaris2*)\n \t\t\t;;\n \t\tesac\n \t\t;;\n+\t*)\n+\t\tuse_gcc_stdint=provide\n+\t\t;;\n \tesac\n \tcase ${enable_threads}:${have_pthread_h}:${have_thread_h} in\n \t  \"\":yes:* | yes:yes:* )\n@@ -1275,7 +1299,7 @@ i[34567]86-*-interix3*)\n \tfi\n \t;;\n ia64*-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h ia64/sysv4.h ia64/elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h ia64/sysv4.h ia64/elf.h\"\n \ttmake_file=\"ia64/t-ia64\"\n \ttarget_cpu_default=\"0\"\n \tif test x$gas = xyes\n@@ -1295,7 +1319,7 @@ ia64*-*-freebsd*)\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n \t;;\n ia64*-*-linux*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h ia64/sysv4.h ia64/linux.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h ia64/sysv4.h ia64/linux.h\"\n \ttmake_file=\"${tmake_file} ia64/t-ia64 t-libunwind ia64/t-glibc\"\n \tif test x$with_system_libunwind != xyes ; then\n \t\ttmake_file=\"${tmake_file} t-libunwind-elf ia64/t-glibc-libunwind\"\n@@ -1318,26 +1342,26 @@ ia64*-*-hpux*)\n \textra_options=\"${extra_options} ia64/ilp32.opt\"\n \t;;\n iq2000*-*-elf*)\n-        tm_file=\"svr4.h elfos.h iq2000/iq2000.h\"\n+        tm_file=\"svr4.h elfos.h newlib-stdint.h iq2000/iq2000.h\"\n         tmake_file=iq2000/t-iq2000\n         out_file=iq2000/iq2000.c\n         md_file=iq2000/iq2000.md\n         ;;\n m32r-*-elf*)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file}\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h ${tm_file}\"\n \textra_parts=\"crtinit.o crtfini.o\"\n  \t;;\n m32rle-*-elf*)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h m32r/little.h ${tm_file}\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h m32r/little.h ${tm_file}\"\n \textra_parts=\"crtinit.o crtfini.o m32rx/crtinit.o m32rx/crtfini.o\"\n \t;;\n m32r-*-rtems*)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} m32r/rtems.h rtems.h\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} m32r/rtems.h rtems.h newlib-stdint.h\"\n \ttmake_file=\"m32r/t-m32r t-rtems\"\n \textra_parts=\"crtinit.o crtfini.o\"\n  \t;;\n m32r-*-linux*)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h linux.h ${tm_file} m32r/linux.h\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h ${tm_file} m32r/linux.h\"\n \t# We override the tmake_file for linux -- why?\n \ttmake_file=\"t-slibgcc-elf-ver m32r/t-linux\"\n \tgnu_ld=yes\n@@ -1346,7 +1370,7 @@ m32r-*-linux*)\n \tfi\n  \t;;\n m32rle-*-linux*)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h linux.h m32r/little.h ${tm_file} m32r/linux.h\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h m32r/little.h ${tm_file} m32r/linux.h\"\n \t# We override the tmake_file for linux -- why?\n \ttmake_file=\"t-slibgcc-elf-ver m32r/t-linux\"\n \tgnu_ld=yes\n@@ -1356,19 +1380,21 @@ m32rle-*-linux*)\n \t;;\n # m68hc11 and m68hc12 share the same machine description.\n m68hc11-*-*|m6811-*-*)\n-\ttm_file=\"dbxelf.h elfos.h usegas.h m68hc11/m68hc11.h\"\n+\ttm_file=\"dbxelf.h elfos.h usegas.h newlib-stdint.h m68hc11/m68hc11.h\"\n \ttm_p_file=\"m68hc11/m68hc11-protos.h\"\n \tmd_file=\"m68hc11/m68hc11.md\"\n \tout_file=\"m68hc11/m68hc11.c\"\n \ttmake_file=\"m68hc11/t-m68hc11\"\n+\tuse_gcc_stdint=wrap\n         ;;\n m68hc12-*-*|m6812-*-*)\n-\ttm_file=\"m68hc11/m68hc12.h dbxelf.h elfos.h usegas.h m68hc11/m68hc11.h\"\n+\ttm_file=\"m68hc11/m68hc12.h dbxelf.h elfos.h usegas.h newlib-stdint.h m68hc11/m68hc11.h\"\n \ttm_p_file=\"m68hc11/m68hc11-protos.h\"\n \tmd_file=\"m68hc11/m68hc11.md\"\n \tout_file=\"m68hc11/m68hc11.c\"\n \ttmake_file=\"m68hc11/t-m68hc11\"\n \textra_options=\"${extra_options} m68hc11/m68hc11.opt\"\n+\tuse_gcc_stdint=wrap\n         ;;\n m68k-*-elf* | fido-*-elf*)\n \tcase ${target} in\n@@ -1389,7 +1415,7 @@ m68k-*-elf* | fido-*-elf*)\n \t\tdefault_cf_cpu=5206\n \t\t;;\n \tesac\n-\ttm_file=\"${tm_file} m68k/m68k-none.h m68k/m68kelf.h dbxelf.h elfos.h m68k/m68kemb.h m68k/m68020-elf.h\"\n+\ttm_file=\"${tm_file} m68k/m68k-none.h m68k/m68kelf.h dbxelf.h elfos.h newlib-stdint.h m68k/m68kemb.h m68k/m68020-elf.h\"\n \ttm_defines=\"${tm_defines} MOTOROLA=1\"\n \ttmake_file=\"m68k/t-floatlib m68k/t-m68kbare m68k/t-m68kelf\"\n \t# Add multilibs for targets other than fido.\n@@ -1423,7 +1449,7 @@ m68k-*-uclinuxoldabi*)\t\t# Motorola m68k/ColdFire running uClinux\n \t\t\t\t# m68k-elf-based ABI\n \tdefault_m68k_cpu=68020\n \tdefault_cf_cpu=5206\n-\ttm_file=\"${tm_file} m68k/m68k-none.h m68k/m68kelf.h dbxelf.h elfos.h m68k/uclinux-oldabi.h\"\n+\ttm_file=\"${tm_file} m68k/m68k-none.h m68k/m68kelf.h dbxelf.h elfos.h m68k/uclinux-oldabi.h glibc-stdint.h\"\n  \ttm_defines=\"${tm_defines} MOTOROLA=1\"\n \ttmake_file=\"m68k/t-floatlib m68k/t-uclinux\"\n \t;;\n@@ -1432,7 +1458,7 @@ m68k-*-uclinux*)\t\t# Motorola m68k/ColdFire running uClinux\n \t\t\t\t# ABI.\n \tdefault_m68k_cpu=68020\n \tdefault_cf_cpu=5206\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h flat.h m68k/linux.h m68k/uclinux.h ./sysroot-suffix.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h flat.h m68k/linux.h m68k/uclinux.h ./sysroot-suffix.h\"\n  \ttm_defines=\"${tm_defines} MOTOROLA=1 UCLIBC_DEFAULT=1\"\n \textra_options=\"${extra_options} linux.opt\"\n \ttmake_file=\"m68k/t-floatlib m68k/t-uclinux m68k/t-mlibs\"\n@@ -1443,7 +1469,7 @@ m68k-*-linux*)\t\t# Motorola m68k's running GNU/Linux\n \tdefault_m68k_cpu=68020\n \tdefault_cf_cpu=5475\n \twith_arch=${with_arch:-m68k}\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h m68k/linux.h ./sysroot-suffix.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h m68k/linux.h ./sysroot-suffix.h\"\n \textra_options=\"${extra_options} m68k/ieee.opt\"\n \ttm_defines=\"${tm_defines} MOTOROLA=1\"\n \ttmake_file=\"${tmake_file} m68k/t-floatlib m68k/t-linux m68k/t-mlibs\"\n@@ -1457,19 +1483,20 @@ m68k-*-rtems*)\n \tdefault_m68k_cpu=68020\n \tdefault_cf_cpu=5206\n \ttmake_file=\"m68k/t-floatlib m68k/t-m68kbare m68k/t-crtstuff t-rtems m68k/t-rtems m68k/t-mlibs\"\n-\ttm_file=\"${tm_file} m68k/m68k-none.h m68k/m68kelf.h dbxelf.h elfos.h m68k/m68kemb.h m68k/m68020-elf.h m68k/rtemself.h rtems.h\"\n+\ttm_file=\"${tm_file} m68k/m68k-none.h m68k/m68kelf.h dbxelf.h elfos.h m68k/m68kemb.h m68k/m68020-elf.h m68k/rtemself.h rtems.h newlib-stdint.h\"\n \ttm_defines=\"${tm_defines} MOTOROLA=1\"\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n mcore-*-elf)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} mcore/mcore-elf.h\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h ${tm_file} mcore/mcore-elf.h\"\n \ttmake_file=mcore/t-mcore\n \tinhibit_libc=true\n \t;;\n mcore-*-pe*)\n-\ttm_file=\"svr3.h dbxcoff.h ${tm_file} mcore/mcore-pe.h\"\n+\ttm_file=\"svr3.h dbxcoff.h newlib-stdint.h ${tm_file} mcore/mcore-pe.h\"\n \ttmake_file=mcore/t-mcore-pe\n \tinhibit_libc=true\n+\tuse_gcc_stdint=wrap\n \t;;\n mips-sgi-irix[56]*)\n \ttm_file=\"elfos.h ${tm_file} mips/iris.h\"\n@@ -1503,7 +1530,7 @@ mips*-*-netbsd*)\t\t\t# NetBSD/mips, either endian.\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h netbsd.h netbsd-elf.h mips/netbsd.h\"\n \t;;\n mips64*-*-linux* | mipsisa64*-*-linux*)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h linux.h ${tm_file} mips/linux.h mips/linux64.h\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h ${tm_file} mips/linux.h mips/linux64.h\"\n \ttmake_file=\"${tmake_file} mips/t-linux64 mips/t-libgcc-mips16\"\n \ttm_defines=\"${tm_defines} MIPS_ABI_DEFAULT=ABI_N32\"\n \tcase ${target} in\n@@ -1524,7 +1551,7 @@ mips64*-*-linux* | mipsisa64*-*-linux*)\n \ttest x$with_llsc != x || with_llsc=yes\n \t;;\n mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n-        tm_file=\"dbxelf.h elfos.h svr4.h linux.h ${tm_file} mips/linux.h\"\n+        tm_file=\"dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h ${tm_file} mips/linux.h\"\n \ttmake_file=\"${tmake_file} mips/t-libgcc-mips16\"\n \tcase ${target} in\n         mipsisa32r2*)\n@@ -1546,7 +1573,7 @@ mips*-*-openbsd*)\n         esac\n \t;;\n mips*-sde-elf*)\n-\ttm_file=\"elfos.h ${tm_file} mips/elf.h mips/sde.h\"\n+\ttm_file=\"elfos.h newlib-stdint.h ${tm_file} mips/elf.h mips/sde.h\"\n \ttmake_file=\"mips/t-sde mips/t-libgcc-mips16\"\n \tcase \"${with_newlib}\" in\n \t  yes)\n@@ -1583,7 +1610,7 @@ mipsisa32-*-elf* | mipsisa32el-*-elf* | \\\n mipsisa32r2-*-elf* | mipsisa32r2el-*-elf* | \\\n mipsisa64-*-elf* | mipsisa64el-*-elf* | \\\n mipsisa64r2-*-elf* | mipsisa64r2el-*-elf*)\n-\ttm_file=\"elfos.h ${tm_file} mips/elf.h\"\n+\ttm_file=\"elfos.h newlib-stdint.h ${tm_file} mips/elf.h\"\n \ttmake_file=\"mips/t-isa3264 mips/t-libgcc-mips16\"\n \tcase ${target} in\n \t  mipsisa32r2*)\n@@ -1614,64 +1641,70 @@ mipsisa64r2-*-elf* | mipsisa64r2el-*-elf*)\n \tesac\n \t;;\n mipsisa64sr71k-*-elf*)\n-        tm_file=\"elfos.h ${tm_file} mips/elf.h\"\n+        tm_file=\"elfos.h newlib-stdint.h ${tm_file} mips/elf.h\"\n         tmake_file=mips/t-sr71k\n \ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=64 MIPS_CPU_STRING_DEFAULT=\\\\\\\"sr71000\\\\\\\" MIPS_ABI_DEFAULT=ABI_EABI\"\n         ;;\n mipsisa64sb1-*-elf* | mipsisa64sb1el-*-elf*)\n-\ttm_file=\"elfos.h ${tm_file} mips/elf.h\"\n+\ttm_file=\"elfos.h newlib-stdint.h ${tm_file} mips/elf.h\"\n \ttmake_file=\"mips/t-elf mips/t-libgcc-mips16 mips/t-sb1\"\n \ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=64 MIPS_CPU_STRING_DEFAULT=\\\\\\\"sb1\\\\\\\" MIPS_ABI_DEFAULT=ABI_O64\"\n \t;;\n mips-*-elf* | mipsel-*-elf*)\n-\ttm_file=\"elfos.h ${tm_file} mips/elf.h\"\n+\ttm_file=\"elfos.h newlib-stdint.h ${tm_file} mips/elf.h\"\n \ttmake_file=\"mips/t-elf mips/t-libgcc-mips16\"\n \t;;\n mips64-*-elf* | mips64el-*-elf*)\n-\ttm_file=\"elfos.h ${tm_file} mips/elf.h\"\n+\ttm_file=\"elfos.h newlib-stdint.h ${tm_file} mips/elf.h\"\n \ttmake_file=\"mips/t-elf mips/t-libgcc-mips16\"\n \ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_O64\"\n \t;;\n mips64vr-*-elf* | mips64vrel-*-elf*)\n-        tm_file=\"elfos.h ${tm_file} mips/vr.h mips/elf.h\"\n+        tm_file=\"elfos.h newlib-stdint.h ${tm_file} mips/vr.h mips/elf.h\"\n         tmake_file=mips/t-vr\n         ;;\n mips64orion-*-elf* | mips64orionel-*-elf*)\n-\ttm_file=\"elfos.h ${tm_file} mips/elforion.h mips/elf.h\"\n+\ttm_file=\"elfos.h newlib-stdint.h ${tm_file} mips/elforion.h mips/elf.h\"\n \ttmake_file=\"mips/t-elf mips/t-libgcc-mips16\"\n \ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_O64\"\n \t;;\n mips*-*-rtems*)\n-\ttm_file=\"elfos.h ${tm_file} mips/elf.h mips/rtems.h rtems.h\"\n+\ttm_file=\"elfos.h newlib-stdint.h ${tm_file} mips/elf.h mips/rtems.h rtems.h\"\n \ttmake_file=\"mips/t-elf mips/t-libgcc-mips16 t-rtems mips/t-rtems\"\n \t;;\n mips-wrs-vxworks)\n \ttm_file=\"elfos.h ${tm_file} svr4.h mips/elf.h vx-common.h vxworks.h mips/vxworks.h\"\n \ttmake_file=\"${tmake_file} mips/t-vxworks\"\n \t;;\n mipstx39-*-elf* | mipstx39el-*-elf*)\n-\ttm_file=\"elfos.h ${tm_file} mips/r3900.h mips/elf.h\"\n+\ttm_file=\"elfos.h newlib-stdint.h ${tm_file} mips/r3900.h mips/elf.h\"\n \ttmake_file=\"mips/t-r3900 mips/t-libgcc-mips16\"\n \t;;\n mmix-knuth-mmixware)\n+\ttm_file=\"${tm_file} newlib-stdint.h\"\n \tneed_64bit_hwint=yes\n+\tuse_gcc_stdint=wrap\n \t;;\n mn10300-*-*)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file}\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h ${tm_file}\"\n \tif test x$stabs = xyes\n \tthen\n \t\ttm_file=\"${tm_file} dbx.h\"\n \tfi\n \tuse_collect2=no\n+\tuse_gcc_stdint=wrap\n \t;;\n pdp11-*-*)\n+\ttm_file=\"${tm_file} newlib-stdint.h\"\n+\tuse_gcc_stdint=wrap\n \t;;\n picochip-*)\n-        # Nothing special\n+\ttm_file=\"${tm_file} newlib-stdint.h\"\n+\tuse_gcc_stdint=wrap\n         ;;\n # port not yet contributed\n #powerpc-*-openbsd*)\n@@ -1682,15 +1715,15 @@ powerpc64-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h\"\n \ttest x$with_cpu != x || cpu_is_64bit=yes\n \ttest x$cpu_is_64bit != xyes || tm_file=\"${tm_file} rs6000/default64.h\"\n-\ttm_file=\"rs6000/biarch64.h ${tm_file} rs6000/linux64.h\"\n+\ttm_file=\"rs6000/biarch64.h ${tm_file} rs6000/linux64.h glibc-stdint.h\"\n \tif test x${enable_secureplt} = xyes; then\n \t\ttm_file=\"rs6000/secureplt.h ${tm_file}\"\n \tfi\n \textra_options=\"${extra_options} rs6000/sysv4.opt rs6000/linux64.opt\"\n \ttmake_file=\"t-dfprules rs6000/t-fprules ${tmake_file} rs6000/t-ppccomm rs6000/t-linux64 rs6000/t-fprules-softfp soft-fp/t-softfp\"\n \t;;\n powerpc64-*-gnu*)\n-\ttm_file=\"${cpu_type}/${cpu_type}.h elfos.h svr4.h freebsd-spec.h gnu.h rs6000/sysv4.h rs6000/linux64.h rs6000/gnu.h\"\n+\ttm_file=\"${cpu_type}/${cpu_type}.h elfos.h svr4.h freebsd-spec.h gnu.h rs6000/sysv4.h rs6000/linux64.h rs6000/gnu.h glibc-stdint.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt rs6000/linux64.opt\"\n \ttmake_file=\"rs6000/t-fprules t-slibgcc-elf-ver t-gnu rs6000/t-linux64 rs6000/t-fprules-softfp soft-fp/t-softfp\"\n \t;;\n@@ -1727,57 +1760,63 @@ powerpc-*-netbsd*)\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \t;;\n powerpc-*-eabispe*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabispe.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabispe.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-spe rs6000/t-ppccomm\"\n+\tuse_gcc_stdint=wrap\n \t;;\n powerpc-*-eabisimaltivec*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabisim.h rs6000/eabialtivec.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabisim.h rs6000/eabialtivec.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcendian rs6000/t-ppccomm\"\n+\tuse_gcc_stdint=wrap\n \t;;\n powerpc-*-eabisim*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabisim.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabisim.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+\tuse_gcc_stdint=wrap\n \t;;\n powerpc-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h rs6000/sysv4.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n \t;;\n powerpc-*-eabialtivec*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabialtivec.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabialtivec.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcendian rs6000/t-ppccomm\"\n+\tuse_gcc_stdint=wrap\n \t;;\n powerpc-xilinx-eabi*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/singlefp.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/singlefp.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+\tuse_gcc_stdint=wrap\n \t;;\n powerpc-*-eabi*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+\tuse_gcc_stdint=wrap\n \t;;\n powerpc-*-rtems*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/rtems.h rtems.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/rtems.h rtems.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-rtems t-rtems rs6000/t-ppccomm\"\n \t;;\n powerpc-*-linux*altivec*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/linux.h rs6000/linuxaltivec.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/linux.h rs6000/linuxaltivec.h glibc-stdint.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-softfp soft-fp/t-softfp rs6000/t-ppcos ${tmake_file} rs6000/t-ppccomm\"\n \t;;\n powerpc-*-linux*spe*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/linux.h rs6000/linuxspe.h rs6000/e500.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/linux.h rs6000/linuxspe.h rs6000/e500.h glibc-stdint.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"t-dfprules rs6000/t-fprules rs6000/t-fprules-softfp soft-fp/t-softfp rs6000/t-ppcos ${tmake_file} rs6000/t-ppccomm\"\n \t;;\n powerpc-*-linux*paired*)\n-        tm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/linux.h rs6000/750cl.h\"\n+        tm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/linux.h rs6000/750cl.h glibc-stdint.h\"\n         extra_options=\"${extra_options} rs6000/sysv4.opt\"\n         tmake_file=\"rs6000/t-fprules rs6000/t-fprules-softfp soft-fp/t-softfp rs6000/t-ppcos ${tmake_file} rs6000/t-ppccomm\"\n         ;;\n@@ -1790,28 +1829,28 @@ powerpc-*-linux*)\n \t\tif test x$cpu_is_64bit = xyes; then\n \t\t    tm_file=\"${tm_file} rs6000/default64.h\"\n \t\tfi\n-\t\ttm_file=\"rs6000/biarch64.h ${tm_file} rs6000/linux64.h\"\n+\t\ttm_file=\"rs6000/biarch64.h ${tm_file} rs6000/linux64.h glibc-stdint.h\"\n \t\ttmake_file=\"$tmake_file rs6000/t-linux64\"\n \t\textra_options=\"${extra_options} rs6000/linux64.opt\"\n \t\t;;\n \t    *)\n-\t\ttm_file=\"${tm_file} rs6000/linux.h\"\n+\t\ttm_file=\"${tm_file} rs6000/linux.h glibc-stdint.h\"\n \t\t;;\n \tesac\n \tif test x${enable_secureplt} = xyes; then\n \t\ttm_file=\"rs6000/secureplt.h ${tm_file}\"\n \tfi\n \t;;\n powerpc-*-gnu-gnualtivec*)\n-\ttm_file=\"${cpu_type}/${cpu_type}.h elfos.h svr4.h freebsd-spec.h gnu.h rs6000/sysv4.h rs6000/linux.h rs6000/linuxaltivec.h rs6000/gnu.h\"\n+\ttm_file=\"${cpu_type}/${cpu_type}.h elfos.h svr4.h freebsd-spec.h gnu.h rs6000/sysv4.h rs6000/linux.h rs6000/linuxaltivec.h rs6000/gnu.h glibc-stdint.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcos t-slibgcc-elf-ver t-gnu rs6000/t-ppccomm\"\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n \tfi\n \t;;\n powerpc-*-gnu*)\n-\ttm_file=\"${cpu_type}/${cpu_type}.h elfos.h svr4.h freebsd-spec.h gnu.h rs6000/sysv4.h rs6000/linux.h rs6000/gnu.h\"\n+\ttm_file=\"${cpu_type}/${cpu_type}.h elfos.h svr4.h freebsd-spec.h gnu.h rs6000/sysv4.h rs6000/linux.h rs6000/gnu.h glibc-stdint.h\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcos t-slibgcc-elf-ver t-gnu rs6000/t-ppccomm\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \tif test x$enable_threads = xyes; then\n@@ -1845,24 +1884,27 @@ powerpc-*-lynxos*)\n \tgas=yes\n \t;;\n powerpcle-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/sysv4le.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/sysv4le.h\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \t;;\n powerpcle-*-eabisim*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/sysv4le.h rs6000/eabi.h rs6000/e500.h rs6000/eabisim.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/sysv4le.h rs6000/eabi.h rs6000/e500.h rs6000/eabisim.h\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n+\tuse_gcc_stdint=wrap\n \t;;\n powerpcle-*-eabi*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/sysv4le.h rs6000/eabi.h rs6000/e500.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/sysv4le.h rs6000/eabi.h rs6000/e500.h\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n+\tuse_gcc_stdint=wrap\n \t;;\n powerpc-xilinx-eabi*)\n- \ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/singlefp.h rs6000/xfpu.h\"\n+ \ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h svr4.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/singlefp.h rs6000/xfpu.h\"\n   \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n   \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+\tuse_gcc_stdint=wrap\n   \t;;\n rs6000-ibm-aix4.[3456789]* | powerpc-ibm-aix4.[3456789]*)\n \ttm_file=\"rs6000/biarch64.h ${tm_file} rs6000/aix.h rs6000/aix43.h rs6000/xcoff.h\"\n@@ -1905,11 +1947,11 @@ rs6000-ibm-aix[6789].* | powerpc-ibm-aix[6789].*)\n \textra_headers=altivec.h\n \t;;\n s390-*-linux*)\n-\ttm_file=\"s390/s390.h dbxelf.h elfos.h svr4.h linux.h s390/linux.h\"\n+\ttm_file=\"s390/s390.h dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h s390/linux.h\"\n \ttmake_file=\"${tmake_file} t-dfprules s390/t-crtstuff s390/t-linux\"\n \t;;\n s390x-*-linux*)\n-\ttm_file=\"s390/s390x.h s390/s390.h dbxelf.h elfos.h svr4.h linux.h s390/linux.h\"\n+\ttm_file=\"s390/s390x.h s390/s390.h dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h s390/linux.h\"\n \ttm_p_file=s390/s390-protos.h\n \tmd_file=s390/s390.md\n \textra_modes=s390/s390-modes.def\n@@ -1928,7 +1970,7 @@ s390x-ibm-tpf*)\n \textra_options=\"${extra_options} s390/tpf.opt\"\n \t;;\n score-*-elf)\n-        tm_file=\"dbxelf.h elfos.h score/elf.h score/score.h\"\n+        tm_file=\"dbxelf.h elfos.h score/elf.h score/score.h newlib-stdint.h\"\n         tmake_file=score/t-score-elf\n         extra_objs=\"score7.o score3.o\"\n         ;;\n@@ -1965,7 +2007,7 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \ttm_file=\"${tm_file} sh/elf.h\"\n \tcase ${target} in\n \tsh*-*-linux*)\ttmake_file=\"${tmake_file} sh/t-linux\"\n-\t\t\ttm_file=\"${tm_file} linux.h sh/linux.h\" ;;\n+\t\t\ttm_file=\"${tm_file} linux.h glibc-stdint.h sh/linux.h\" ;;\n \tsh*-*-netbsd*)\ttm_file=\"${tm_file} netbsd.h netbsd-elf.h sh/netbsd-elf.h\" ;;\n \tsh*-superh-elf)\tif test x$with_libgloss != xno; then\n \t\t\t\twith_libgloss=yes\n@@ -2008,6 +2050,9 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \t\textra_objs=\"symbian.o\"\n \t\textra_parts=\"crt1.o crti.o crtn.o crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n \t\t;;\n+\t*-*-elf*)\n+\t\ttm_file=\"${tm_file} newlib-stdint.h\"\n+\t\t;;\n \tesac\n \t# sed el/eb endian suffixes away to avoid confusion with sh[23]e\n \tcase `echo ${target} | sed 's/e[lb]-/-/'` in\n@@ -2099,7 +2144,7 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \t;;\n sh-*-rtems*)\n \ttmake_file=\"sh/t-sh sh/t-elf t-rtems sh/t-rtems\"\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sh/elf.h sh/embed-elf.h sh/rtemself.h rtems.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sh/elf.h sh/embed-elf.h sh/rtemself.h rtems.h newlib-stdint.h\"\n \t;;\n sh-wrs-vxworks)\n \ttmake_file=\"$tmake_file sh/t-sh sh/t-elf sh/t-vxworks\"\n@@ -2116,12 +2161,12 @@ sparc64-*-openbsd*)\n \twith_cpu=ultrasparc\n \t;;\n sparc-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp-elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h svr4.h sparc/sysv4.h sparc/sp-elf.h\"\n \ttmake_file=\"sparc/t-elf sparc/t-crtfm\"\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t;;\n sparc-*-linux*)\t\t# SPARC's running GNU/Linux, libc6\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h linux.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h linux.h glibc-stdint.h\"\n \textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n \ttmake_file=\"${tmake_file} sparc/t-linux\"\n \tif test x$enable_targets = xall; then\n@@ -2133,7 +2178,7 @@ sparc-*-linux*)\t\t# SPARC's running GNU/Linux, libc6\n \ttmake_file=\"${tmake_file} sparc/t-crtfm\"\n \t;;\n sparc-*-rtems*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp-elf.h sparc/rtemself.h rtems.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp-elf.h sparc/rtemself.h rtems.h newlib-stdint.h\"\n \ttmake_file=\"sparc/t-elf sparc/t-crtfm t-rtems\"\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t;;\n@@ -2142,6 +2187,10 @@ sparc64-*-solaris2* | sparcv9-*-solaris2*)\n \tcase ${target} in\n \t*-*-solaris2.1[0-9]*)\n \t\ttm_file=\"${tm_file} sol2-10.h\"\n+\t\tuse_gcc_stdint=wrap\n+\t\t;;\n+\t*)\n+\t\tuse_gcc_stdint=provide\n \t\t;;\n \tesac\n \ttm_file=\"${tm_file} sparc/sol2.h sparc/sol2-64.h sparc/sol2-bi.h\"\n@@ -2173,6 +2222,10 @@ sparc-*-solaris2*)\n \tcase ${target} in\n \t*-*-solaris2.1[0-9]*)\n \t\ttm_file=\"${tm_file} sol2-10.h\"\n+\t\tuse_gcc_stdint=wrap\n+\t\t;;\n+\t*)\n+\t\tuse_gcc_stdint=provide\n \t\t;;\n \tesac\n \ttm_file=\"${tm_file} sparc/sol2.h\"\n@@ -2217,7 +2270,7 @@ sparc-wrs-vxworks)\n \ttmake_file=\"${tmake_file} sparc/t-vxworks\"\n \t;;\n sparc64-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp64-elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h newlib-stdint.h sparc/sysv4.h sparc/sp64-elf.h\"\n \textra_options=\"${extra_options} sparc/little-endian.opt\"\n \ttmake_file=\"${tmake_file} sparc/t-crtfm\"\n \textra_parts=\"crtbegin.o crtend.o\"\n@@ -2233,7 +2286,7 @@ sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n \tesac\n \t;;\n sparc64-*-linux*)\t\t# 64-bit SPARC's running GNU/Linux\n-\ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h linux.h sparc/linux64.h\"\n+\ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h linux.h glibc-stdint.h sparc/linux64.h\"\n \textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n \ttmake_file=\"${tmake_file} sparc/t-linux sparc/t-linux64 sparc/t-crtfm\"\n \t;;\n@@ -2244,7 +2297,7 @@ sparc64-*-netbsd*)\n \ttmake_file=\"${tmake_file} sparc/t-netbsd64\"\n \t;;\n spu-*-elf*)\n-\ttm_file=\"dbxelf.h elfos.h spu/spu-elf.h spu/spu.h\"\n+\ttm_file=\"dbxelf.h elfos.h spu/spu-elf.h spu/spu.h newlib-stdint.h\"\n \ttmake_file=\"spu/t-spu-elf\"\n \textra_headers=\"spu_intrinsics.h spu_internals.h vmx2spu.h spu_mfcio.h vec_types.h\"\n \textra_modes=spu/spu-modes.def\n@@ -2253,7 +2306,7 @@ spu-*-elf*)\n \t;;\n v850e1-*-*)\n \ttarget_cpu_default=\"TARGET_CPU_v850e1\"\n-\ttm_file=\"dbxelf.h elfos.h svr4.h v850/v850.h\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h v850/v850.h\"\n \ttm_p_file=v850/v850-protos.h\n \ttmake_file=v850/t-v850e\n \tmd_file=v850/v850.md\n@@ -2266,10 +2319,11 @@ v850e1-*-*)\n \tuse_collect2=no\n \tc_target_objs=\"v850-c.o\"\n \tcxx_target_objs=\"v850-c.o\"\n+\tuse_gcc_stdint=wrap\n \t;;\n v850e-*-*)\n \ttarget_cpu_default=\"TARGET_CPU_v850e\"\n-\ttm_file=\"dbxelf.h elfos.h svr4.h v850/v850.h\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h v850/v850.h\"\n \ttm_p_file=v850/v850-protos.h\n \ttmake_file=v850/t-v850e\n \tmd_file=v850/v850.md\n@@ -2282,10 +2336,11 @@ v850e-*-*)\n \tuse_collect2=no\n \tc_target_objs=\"v850-c.o\"\n \tcxx_target_objs=\"v850-c.o\"\n+\tuse_gcc_stdint=wrap\n \t;;\n v850-*-*)\n \ttarget_cpu_default=\"TARGET_CPU_generic\"\n-\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file}\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h ${tm_file}\"\n \ttmake_file=v850/t-v850\n \tif test x$stabs = xyes\n \tthen\n@@ -2294,6 +2349,7 @@ v850-*-*)\n \tuse_collect2=no\n \tc_target_objs=\"v850-c.o\"\n \tcxx_target_objs=\"v850-c.o\"\n+\tuse_gcc_stdint=wrap\n \t;;\n vax-*-netbsdelf*)\n \ttm_file=\"${tm_file} elfos.h netbsd.h netbsd-elf.h vax/elf.h vax/netbsd-elf.h\"\n@@ -2310,7 +2366,7 @@ vax-*-openbsd*)\n \t;;\n xstormy16-*-elf)\n \t# For historical reasons, the target files omit the 'x'.\n-\ttm_file=\"dbxelf.h elfos.h svr4.h stormy16/stormy16.h\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h stormy16/stormy16.h\"\n \ttm_p_file=stormy16/stormy16-protos.h\n \tmd_file=stormy16/stormy16.md\n \tout_file=stormy16/stormy16.c\n@@ -2319,28 +2375,28 @@ xstormy16-*-elf)\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n xtensa*-*-elf*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h xtensa/elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h newlib-stdint.h xtensa/elf.h\"\n \ttmake_file=\"xtensa/t-xtensa xtensa/t-elf\"\n \t;;\n xtensa*-*-linux*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h xtensa/linux.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h xtensa/linux.h\"\n \ttmake_file=\"${tmake_file} xtensa/t-xtensa xtensa/t-linux\"\n \t;;\n am33_2.0-*-linux*)\n-\ttm_file=\"mn10300/mn10300.h dbxelf.h elfos.h linux.h mn10300/linux.h\"\n+\ttm_file=\"mn10300/mn10300.h dbxelf.h elfos.h linux.h glibc-stdint.h mn10300/linux.h\"\n \ttmake_file=\"${tmake_file} mn10300/t-linux\"\n \tgas=yes gnu_ld=yes\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n \tuse_collect2=no\n \t;;\n m32c-*-rtems*)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} m32c/rtems.h rtems.h\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} m32c/rtems.h rtems.h newlib-stdint.h\"\n \ttmake_file=\"${tmake_file} t-rtems\"\n \tc_target_objs=\"m32c-pragma.o\"\n \tcxx_target_objs=\"m32c-pragma.o\"\n  \t;;\n m32c-*-elf*)\n-\ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file}\"\n+\ttm_file=\"dbxelf.h elfos.h svr4.h newlib-stdint.h ${tm_file}\"\n \tc_target_objs=\"m32c-pragma.o\"\n \tcxx_target_objs=\"m32c-pragma.o\"\n  \t;;"}, {"sha": "7772d1aa0941790b98788d31994e649c00d33753", "filename": "gcc/config/glibc-stdint.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fglibc-stdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fglibc-stdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fglibc-stdint.h?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -0,0 +1,50 @@\n+/* Definitions for <stdint.h> types on systems using GNU libc or uClibc.\n+   Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define SIG_ATOMIC_TYPE \"int\"\n+\n+#define INT8_TYPE \"signed char\"\n+#define INT16_TYPE \"short int\"\n+#define INT32_TYPE \"int\"\n+#define INT64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT8_TYPE \"unsigned char\"\n+#define UINT16_TYPE \"short unsigned int\"\n+#define UINT32_TYPE \"unsigned int\"\n+#define UINT64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+\n+#define INT_LEAST8_TYPE \"signed char\"\n+#define INT_LEAST16_TYPE \"short int\"\n+#define INT_LEAST32_TYPE \"int\"\n+#define INT_LEAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT_LEAST8_TYPE \"unsigned char\"\n+#define UINT_LEAST16_TYPE \"short unsigned int\"\n+#define UINT_LEAST32_TYPE \"unsigned int\"\n+#define UINT_LEAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+\n+#define INT_FAST8_TYPE \"signed char\"\n+#define INT_FAST16_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"int\")\n+#define INT_FAST32_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"int\")\n+#define INT_FAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT_FAST8_TYPE \"unsigned char\"\n+#define UINT_FAST16_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"unsigned int\")\n+#define UINT_FAST32_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"unsigned int\")\n+#define UINT_FAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+\n+#define INTPTR_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"int\")\n+#define UINTPTR_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"unsigned int\")"}, {"sha": "632993c2b15fd30d3a27ea19ee0e28f2ee28aa97", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -189,6 +189,9 @@ machine_function;\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE (TARGET_A16 ? \"int\" : \"long int\")\n \n+#undef UINTPTR_TYPE\n+#define UINTPTR_TYPE (TARGET_A16 ? \"unsigned int\" : \"long unsigned int\")\n+\n /* REGISTER USAGE */\n \n /* Register Basics */"}, {"sha": "3bc8a59130900a0514890d29169e15c8ab18d469", "filename": "gcc/config/newlib-stdint.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fnewlib-stdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fnewlib-stdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnewlib-stdint.h?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -0,0 +1,64 @@\n+/* Definitions for <stdint.h> types on systems using newlib.\n+   Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* newlib uses 32-bit long in certain cases for all non-SPU\n+   targets.  */\n+#ifndef STDINT_LONG32\n+#define STDINT_LONG32 (LONG_TYPE_SIZE == 32)\n+#endif\n+\n+#define SIG_ATOMIC_TYPE \"int\"\n+\n+/* The newlib logic actually checks for sizes greater than 32 rather\n+   than equal to 64 for various 64-bit types.  */\n+\n+#define INT8_TYPE (CHAR_TYPE_SIZE == 8 ? \"signed char\" : 0)\n+#define INT16_TYPE (SHORT_TYPE_SIZE == 16 ? \"short int\" : INT_TYPE_SIZE == 16 ? \"int\" : CHAR_TYPE_SIZE == 16 ? \"signed char\" : 0)\n+#define INT32_TYPE (STDINT_LONG32 ? \"long int\" : INT_TYPE_SIZE == 32 ? \"int\" : SHORT_TYPE_SIZE == 32 ? \"short int\" : CHAR_TYPE_SIZE == 32 ? \"signed char\" : 0)\n+#define INT64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : LONG_LONG_TYPE_SIZE == 64 ? \"long long int\" : INT_TYPE_SIZE == 64 ? \"int\" : 0)\n+#define UINT8_TYPE (CHAR_TYPE_SIZE == 8 ? \"unsigned char\" : 0)\n+#define UINT16_TYPE (SHORT_TYPE_SIZE == 16 ? \"short unsigned int\" : INT_TYPE_SIZE == 16 ? \"unsigned int\" : CHAR_TYPE_SIZE == 16 ? \"unsigned char\" : 0)\n+#define UINT32_TYPE (STDINT_LONG32 ? \"long unsigned int\" : INT_TYPE_SIZE == 32 ? \"unsigned int\" : SHORT_TYPE_SIZE == 32 ? \"short unsigned int\" : CHAR_TYPE_SIZE == 32 ? \"unsigned char\" : 0)\n+#define UINT64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : LONG_LONG_TYPE_SIZE == 64 ? \"long long unsigned int\" : INT_TYPE_SIZE == 64 ? \"unsigned int\" : 0)\n+\n+#define INT_LEAST8_TYPE (INT8_TYPE ? INT8_TYPE : INT16_TYPE ? INT16_TYPE : INT32_TYPE ? INT32_TYPE : INT64_TYPE ? INT64_TYPE : 0)\n+#define INT_LEAST16_TYPE (INT16_TYPE ? INT16_TYPE : INT32_TYPE ? INT32_TYPE : INT64_TYPE ? INT64_TYPE : 0)\n+#define INT_LEAST32_TYPE (INT32_TYPE ? INT32_TYPE : INT64_TYPE ? INT64_TYPE : 0)\n+#define INT_LEAST64_TYPE INT64_TYPE\n+#define UINT_LEAST8_TYPE (UINT8_TYPE ? UINT8_TYPE : UINT16_TYPE ? UINT16_TYPE : UINT32_TYPE ? UINT32_TYPE : UINT64_TYPE ? UINT64_TYPE : 0)\n+#define UINT_LEAST16_TYPE (UINT16_TYPE ? UINT16_TYPE : UINT32_TYPE ? UINT32_TYPE : UINT64_TYPE ? UINT64_TYPE : 0)\n+#define UINT_LEAST32_TYPE (UINT32_TYPE ? UINT32_TYPE : UINT64_TYPE ? UINT64_TYPE : 0)\n+#define UINT_LEAST64_TYPE UINT64_TYPE\n+\n+#define INT_FAST8_TYPE (INT_TYPE_SIZE >= 8 ? \"int\" : INT_LEAST8_TYPE)\n+#define INT_FAST16_TYPE (INT_TYPE_SIZE >= 16 ? \"int\" : INT_LEAST16_TYPE)\n+#define INT_FAST32_TYPE (INT_TYPE_SIZE >= 32 ? \"int\" : INT_LEAST32_TYPE)\n+#define INT_FAST64_TYPE (INT_TYPE_SIZE >= 64 ? \"int\" : INT_LEAST64_TYPE)\n+#define UINT_FAST8_TYPE (INT_TYPE_SIZE >= 8 ? \"unsigned int\" : UINT_LEAST8_TYPE)\n+#define UINT_FAST16_TYPE (INT_TYPE_SIZE >= 16 ? \"unsigned int\" : UINT_LEAST16_TYPE)\n+#define UINT_FAST32_TYPE (INT_TYPE_SIZE >= 32 ? \"unsigned int\" : UINT_LEAST32_TYPE)\n+#define UINT_FAST64_TYPE (INT_TYPE_SIZE >= 64 ? \"unsigned int\" : UINT_LEAST64_TYPE)\n+\n+/* Newlib uses the unsigned type corresponding to ptrdiff_t for\n+   uintptr_t; this is the same as size_t for most newlib-using\n+   targets.  */\n+#define INTPTR_TYPE PTRDIFF_TYPE\n+#ifndef UINTPTR_TYPE\n+#define UINTPTR_TYPE SIZE_TYPE\n+#endif"}, {"sha": "3196344d39fbae0a237841523de3016cbc85817b", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -1,5 +1,5 @@\n /* score.h for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Sunnorth.\n \n    This file is part of GCC.\n@@ -216,6 +216,8 @@\n /* Default definitions for size_t and ptrdiff_t.  */\n #define SIZE_TYPE                       \"unsigned int\"\n \n+#define UINTPTR_TYPE\t\t\t\"long unsigned int\"\n+\n /* Register Usage\n \n    S+core have:"}, {"sha": "e3e59fdf0b8f20999dd6ca0a88d255628bae95a9", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -1,6 +1,6 @@\n /* Operating system specific defines to be used when targeting GCC for any\n    Solaris 2 system.\n-   Copyright 2002, 2003, 2004, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright 2002, 2003, 2004, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -38,6 +38,40 @@ along with GCC; see the file COPYING3.  If not see\n #undef\tWINT_TYPE_SIZE\n #define\tWINT_TYPE_SIZE BITS_PER_WORD\n \n+#define SIG_ATOMIC_TYPE \"int\"\n+\n+/* ??? This definition of int8_t follows the system header but does\n+   not conform to C99.  Likewise int_fast8_t, int_least8_t.  */\n+#define INT8_TYPE \"char\"\n+#define INT16_TYPE \"short int\"\n+#define INT32_TYPE \"int\"\n+#define INT64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT8_TYPE \"unsigned char\"\n+#define UINT16_TYPE \"short unsigned int\"\n+#define UINT32_TYPE \"unsigned int\"\n+#define UINT64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+\n+#define INT_LEAST8_TYPE \"char\"\n+#define INT_LEAST16_TYPE \"short int\"\n+#define INT_LEAST32_TYPE \"int\"\n+#define INT_LEAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT_LEAST8_TYPE \"unsigned char\"\n+#define UINT_LEAST16_TYPE \"short unsigned int\"\n+#define UINT_LEAST32_TYPE \"unsigned int\"\n+#define UINT_LEAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+\n+#define INT_FAST8_TYPE \"char\"\n+#define INT_FAST16_TYPE \"int\"\n+#define INT_FAST32_TYPE \"int\"\n+#define INT_FAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT_FAST8_TYPE \"unsigned char\"\n+#define UINT_FAST16_TYPE \"unsigned int\"\n+#define UINT_FAST32_TYPE \"unsigned int\"\n+#define UINT_FAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+\n+#define INTPTR_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"int\")\n+#define UINTPTR_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"unsigned int\")\n+\n #define TARGET_HANDLE_PRAGMA_REDEFINE_EXTNAME 1\n \n /* ??? Note: in order for -compat-bsd to work fully,"}, {"sha": "50e09c96b81a44777bce0377b1946494b8212802", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n+/* Copyright (C) 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n    This file is free software; you can redistribute it and/or modify it under\n    the terms of the GNU General Public License as published by the Free\n@@ -142,6 +142,8 @@ extern GTY(()) int spu_tune;\n \n #define DEFAULT_SIGNED_CHAR 0\n \n+#define STDINT_LONG32 0\n+\n \f\n /* Register Basics */\n "}, {"sha": "190dd3c45f71f2b91c6d1d4467e0dfca0e1adcb0", "filename": "gcc/configure", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -458,7 +458,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical build_libsubdir build_subdir host_subdir target_subdir GENINSRC CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT GNATBIND ac_ct_GNATBIND GNATMAKE ac_ct_GNATMAKE NO_MINUS_C_MINUS_O OUTPUT_OPTION CPP EGREP loose_warn strict_warn warn_cflags nocommon_flag TREEBROWSER valgrind_path valgrind_path_defines valgrind_command coverage_flags enable_multilib enable_decimal_float enable_fixed_point enable_shared TARGET_SYSTEM_ROOT TARGET_SYSTEM_ROOT_DEFINE CROSS_SYSTEM_HEADER_DIR onestep PKGVERSION REPORT_BUGS_TO REPORT_BUGS_TEXI datarootdir docdir htmldir SET_MAKE AWK LN_S LN RANLIB ac_ct_RANLIB ranlib_flags INSTALL INSTALL_PROGRAM INSTALL_DATA make_compare_target have_mktemp_command MAKEINFO BUILD_INFO GENERATED_MANPAGES FLEX BISON NM AR COLLECT2_LIBS GNAT_LIBEXC LDEXP_LIB LIBICONV LTLIBICONV LIBICONV_DEP manext objext gthread_flags extra_modes_file extra_opt_files USE_NLS LIBINTL LIBINTL_DEP INCINTL XGETTEXT GMSGFMT POSUB CATALOGS DATADIRNAME INSTOBJEXT GENCAT CATOBJEXT CROSS ALL SYSTEM_HEADER_DIR inhibit_libc CC_FOR_BUILD BUILD_CFLAGS BUILD_LDFLAGS STMP_FIXINC collect2 LIBTOOL SED FGREP GREP LD DUMPBIN ac_ct_DUMPBIN OBJDUMP ac_ct_OBJDUMP ac_ct_AR STRIP ac_ct_STRIP lt_ECHO DSYMUTIL ac_ct_DSYMUTIL NMEDIT ac_ct_NMEDIT LIPO ac_ct_LIPO OTOOL ac_ct_OTOOL OTOOL64 ac_ct_OTOOL64 objdir enable_fast_install gcc_cv_as ORIGINAL_AS_FOR_TARGET gcc_cv_ld ORIGINAL_LD_FOR_TARGET gcc_cv_nm ORIGINAL_NM_FOR_TARGET gcc_cv_objdump gcc_cv_readelf libgcc_visibility GGC zlibdir zlibinc MAINT gcc_tooldir dollar slibdir subdirs srcdir all_compilers all_gtfiles all_lang_makefrags all_lang_makefiles all_languages all_selected_languages build_exeext build_install_headers_dir build_xm_file_list build_xm_include_list build_xm_defines build_file_translate check_languages cpp_install_dir xmake_file tmake_file extra_gcc_objs extra_headers_list extra_objs extra_parts extra_passes extra_programs float_h_file gcc_config_arguments gcc_gxx_include_dir host_exeext host_xm_file_list host_xm_include_list host_xm_defines out_host_hook_obj install lang_opt_files lang_specs_files lang_tree_files local_prefix md_file objc_boehm_gc out_file out_object_file thread_file tm_file_list tm_include_list tm_defines tm_p_file_list tm_p_include_list xm_file_list xm_include_list xm_defines c_target_objs cxx_target_objs fortran_target_objs target_cpu_default GMPLIBS GMPINC PPLLIBS PPLINC CLOOGLIBS CLOOGINC LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical build_libsubdir build_subdir host_subdir target_subdir GENINSRC CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT GNATBIND ac_ct_GNATBIND GNATMAKE ac_ct_GNATMAKE NO_MINUS_C_MINUS_O OUTPUT_OPTION CPP EGREP loose_warn strict_warn warn_cflags nocommon_flag TREEBROWSER valgrind_path valgrind_path_defines valgrind_command coverage_flags enable_multilib enable_decimal_float enable_fixed_point enable_shared TARGET_SYSTEM_ROOT TARGET_SYSTEM_ROOT_DEFINE CROSS_SYSTEM_HEADER_DIR onestep PKGVERSION REPORT_BUGS_TO REPORT_BUGS_TEXI datarootdir docdir htmldir SET_MAKE AWK LN_S LN RANLIB ac_ct_RANLIB ranlib_flags INSTALL INSTALL_PROGRAM INSTALL_DATA make_compare_target have_mktemp_command MAKEINFO BUILD_INFO GENERATED_MANPAGES FLEX BISON NM AR COLLECT2_LIBS GNAT_LIBEXC LDEXP_LIB LIBICONV LTLIBICONV LIBICONV_DEP manext objext gthread_flags extra_modes_file extra_opt_files USE_NLS LIBINTL LIBINTL_DEP INCINTL XGETTEXT GMSGFMT POSUB CATALOGS DATADIRNAME INSTOBJEXT GENCAT CATOBJEXT CROSS ALL SYSTEM_HEADER_DIR inhibit_libc CC_FOR_BUILD BUILD_CFLAGS BUILD_LDFLAGS STMP_FIXINC collect2 LIBTOOL SED FGREP GREP LD DUMPBIN ac_ct_DUMPBIN OBJDUMP ac_ct_OBJDUMP ac_ct_AR STRIP ac_ct_STRIP lt_ECHO DSYMUTIL ac_ct_DSYMUTIL NMEDIT ac_ct_NMEDIT LIPO ac_ct_LIPO OTOOL ac_ct_OTOOL OTOOL64 ac_ct_OTOOL64 objdir enable_fast_install gcc_cv_as ORIGINAL_AS_FOR_TARGET gcc_cv_ld ORIGINAL_LD_FOR_TARGET gcc_cv_nm ORIGINAL_NM_FOR_TARGET gcc_cv_objdump gcc_cv_readelf libgcc_visibility GGC zlibdir zlibinc MAINT gcc_tooldir dollar slibdir subdirs srcdir all_compilers all_gtfiles all_lang_makefrags all_lang_makefiles all_languages all_selected_languages build_exeext build_install_headers_dir build_xm_file_list build_xm_include_list build_xm_defines build_file_translate check_languages cpp_install_dir xmake_file tmake_file extra_gcc_objs extra_headers_list extra_objs extra_parts extra_passes extra_programs float_h_file gcc_config_arguments gcc_gxx_include_dir host_exeext host_xm_file_list host_xm_include_list host_xm_defines out_host_hook_obj install lang_opt_files lang_specs_files lang_tree_files local_prefix md_file objc_boehm_gc out_file out_object_file thread_file tm_file_list tm_include_list tm_defines tm_p_file_list tm_p_include_list xm_file_list xm_include_list xm_defines use_gcc_stdint c_target_objs cxx_target_objs fortran_target_objs target_cpu_default GMPLIBS GMPINC PPLLIBS PPLINC CLOOGLIBS CLOOGINC LIBOBJS LTLIBOBJS'\n ac_subst_files='language_hooks'\n ac_pwd=`pwd`\n \n@@ -23337,7 +23337,7 @@ if test \"${gcc_cv_as_powerpc_tls_markers+set}\" = set; then\n else\n   gcc_cv_as_powerpc_tls_markers=no\n     if test $in_tree_gas = yes; then\n-    if test $gcc_cv_gas_vers -ge `expr \\( \\( 9 \\* 1000 \\) + 99 \\) \\* 1000 + 0`\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 20 \\) \\* 1000 + 0`\n   then gcc_cv_as_powerpc_tls_markers=yes\n fi\n   elif test x$gcc_cv_as != x; then\n@@ -24643,6 +24643,7 @@ fi;\n \n \n \n+\n \n \n # Echo link setup.\n@@ -25512,6 +25513,7 @@ s,@tm_p_include_list@,$tm_p_include_list,;t t\n s,@xm_file_list@,$xm_file_list,;t t\n s,@xm_include_list@,$xm_include_list,;t t\n s,@xm_defines@,$xm_defines,;t t\n+s,@use_gcc_stdint@,$use_gcc_stdint,;t t\n s,@c_target_objs@,$c_target_objs,;t t\n s,@cxx_target_objs@,$cxx_target_objs,;t t\n s,@fortran_target_objs@,$fortran_target_objs,;t t"}, {"sha": "0b72bcb24d2f8ec20dc492d3b762ce81cd593101", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -3911,6 +3911,7 @@ AC_SUBST(tm_p_include_list)\n AC_SUBST(xm_file_list)\n AC_SUBST(xm_include_list)\n AC_SUBST(xm_defines)\n+AC_SUBST(use_gcc_stdint)\n AC_SUBST(c_target_objs)\n AC_SUBST(cxx_target_objs)\n AC_SUBST(fortran_target_objs)"}, {"sha": "d79991c16f7f6073f70cf59363d98aa4ba2aa47d", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 112, "deletions": 11, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -11,7 +11,8 @@\n @copying\n @c man begin COPYRIGHT\n Copyright @copyright{} 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,\n-1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n+2008, 2009\n Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n@@ -2117,13 +2118,50 @@ OSF/rose @option{-mno-underscores} option).\n @itemx __WINT_TYPE__\n @itemx __INTMAX_TYPE__\n @itemx __UINTMAX_TYPE__\n+@itemx __SIG_ATOMIC_TYPE__\n+@itemx __INT8_TYPE__\n+@itemx __INT16_TYPE__\n+@itemx __INT32_TYPE__\n+@itemx __INT64_TYPE__\n+@itemx __UINT8_TYPE__\n+@itemx __UINT16_TYPE__\n+@itemx __UINT32_TYPE__\n+@itemx __UINT64_TYPE__\n+@itemx __INT_LEAST8_TYPE__\n+@itemx __INT_LEAST16_TYPE__\n+@itemx __INT_LEAST32_TYPE__\n+@itemx __INT_LEAST64_TYPE__\n+@itemx __UINT_LEAST8_TYPE__\n+@itemx __UINT_LEAST16_TYPE__\n+@itemx __UINT_LEAST32_TYPE__\n+@itemx __UINT_LEAST64_TYPE__\n+@itemx __INT_FAST8_TYPE__\n+@itemx __INT_FAST16_TYPE__\n+@itemx __INT_FAST32_TYPE__\n+@itemx __INT_FAST64_TYPE__\n+@itemx __UINT_FAST8_TYPE__\n+@itemx __UINT_FAST16_TYPE__\n+@itemx __UINT_FAST32_TYPE__\n+@itemx __UINT_FAST64_TYPE__\n+@itemx __INTPTR_TYPE__\n+@itemx __UINTPTR_TYPE__\n These macros are defined to the correct underlying types for the\n @code{size_t}, @code{ptrdiff_t}, @code{wchar_t}, @code{wint_t},\n-@code{intmax_t}, and @code{uintmax_t}\n-typedefs, respectively.  They exist to make the standard header files\n-@file{stddef.h} and @file{wchar.h} work correctly.  You should not use\n-these macros directly; instead, include the appropriate headers and use\n-the typedefs.\n+@code{intmax_t}, @code{uintmax_t}, @code{sig_atomic_t}, @code{int8_t},\n+@code{int16_t}, @code{int32_t}, @code{int64_t}, @code{uint8_t},\n+@code{uint16_t}, @code{uint32_t}, @code{uint64_t},\n+@code{int_least8_t}, @code{int_least16_t}, @code{int_least32_t},\n+@code{int_least64_t}, @code{uint_least8_t}, @code{uint_least16_t},\n+@code{uint_least32_t}, @code{uint_least64_t}, @code{int_fast8_t},\n+@code{int_fast16_t}, @code{int_fast32_t}, @code{int_fast64_t},\n+@code{uint_fast8_t}, @code{uint_fast16_t}, @code{uint_fast32_t},\n+@code{uint_fast64_t}, @code{intptr_t}, and @code{uintptr_t} typedefs,\n+respectively.  They exist to make the standard header files\n+@file{stddef.h}, @file{stdint.h}, and @file{wchar.h} work correctly.\n+You should not use these macros directly; instead, include the\n+appropriate headers and use the typedefs.  Some of these macros may\n+not be defined on particular systems if GCC does not provide a\n+@file{stdint.h} header on those systems.\n \n @item __CHAR_BIT__\n Defined to the number of bits used in the representation of the\n@@ -2137,14 +2175,77 @@ this macro directly; instead, include the appropriate headers.\n @itemx __INT_MAX__\n @itemx __LONG_MAX__\n @itemx __LONG_LONG_MAX__\n+@itemx __WINT_MAX__\n+@itemx __SIZE_MAX__\n+@itemx __PTRDIFF_MAX__\n @itemx __INTMAX_MAX__\n+@itemx __UINTMAX_MAX__\n+@itemx __SIG_ATOMIC_MAX__\n+@itemx __INT8_MAX__\n+@itemx __INT16_MAX__\n+@itemx __INT32_MAX__\n+@itemx __INT64_MAX__\n+@itemx __UINT8_MAX__\n+@itemx __UINT16_MAX__\n+@itemx __UINT32_MAX__\n+@itemx __UINT64_MAX__\n+@itemx __INT_LEAST8_MAX__\n+@itemx __INT_LEAST16_MAX__\n+@itemx __INT_LEAST32_MAX__\n+@itemx __INT_LEAST64_MAX__\n+@itemx __UINT_LEAST8_MAX__\n+@itemx __UINT_LEAST16_MAX__\n+@itemx __UINT_LEAST32_MAX__\n+@itemx __UINT_LEAST64_MAX__\n+@itemx __INT_FAST8_MAX__\n+@itemx __INT_FAST16_MAX__\n+@itemx __INT_FAST32_MAX__\n+@itemx __INT_FAST64_MAX__\n+@itemx __UINT_FAST8_MAX__\n+@itemx __UINT_FAST16_MAX__\n+@itemx __UINT_FAST32_MAX__\n+@itemx __UINT_FAST64_MAX__\n+@itemx __INTPTR_MAX__\n+@itemx __UINTPTR_MAX__\n+@itemx __WCHAR_MIN__\n+@itemx __WINT_MIN__\n+@itemx __SIG_ATOMIC_MIN__\n Defined to the maximum value of the @code{signed char}, @code{wchar_t},\n @code{signed short},\n-@code{signed int}, @code{signed long}, @code{signed long long}, and\n-@code{intmax_t} types\n-respectively.  They exist to make the standard header given numerical limits\n-work correctly.  You should not use these macros directly; instead, include\n-the appropriate headers.\n+@code{signed int}, @code{signed long}, @code{signed long long},\n+@code{wint_t}, @code{size_t}, @code{ptrdiff_t},\n+@code{intmax_t}, @code{uintmax_t}, @code{sig_atomic_t}, @code{int8_t},\n+@code{int16_t}, @code{int32_t}, @code{int64_t}, @code{uint8_t},\n+@code{uint16_t}, @code{uint32_t}, @code{uint64_t},\n+@code{int_least8_t}, @code{int_least16_t}, @code{int_least32_t},\n+@code{int_least64_t}, @code{uint_least8_t}, @code{uint_least16_t},\n+@code{uint_least32_t}, @code{uint_least64_t}, @code{int_fast8_t},\n+@code{int_fast16_t}, @code{int_fast32_t}, @code{int_fast64_t},\n+@code{uint_fast8_t}, @code{uint_fast16_t}, @code{uint_fast32_t},\n+@code{uint_fast64_t}, @code{intptr_t}, and @code{uintptr_t} types and\n+to the minimum value of the @code{wchar_t}, @code{wint_t}, and\n+@code{sig_atomic_t} types respectively.  They exist to make the\n+standard header given numerical limits work correctly.  You should not\n+use these macros directly; instead, include the appropriate headers.\n+Some of these macros may not be defined on particular systems if GCC\n+does not provide a @file{stdint.h} header on those systems.\n+\n+@item __INT8_C\n+@itemx __INT16_C\n+@itemx __INT32_C\n+@itemx __INT64_C\n+@itemx __UINT8_C\n+@itemx __UINT16_C\n+@itemx __UINT32_C\n+@itemx __UINT64_C\n+@itemx __INTMAX_C\n+@itemx __UINTMAX_C\n+Defined to implementations of the standard @file{stdint.h} macros with\n+the same names without the leading @code{__}.  They exist the make the\n+implementation of that header work correctly.  You should not use\n+these macros directly; instead, include the appropriate headers.  Some\n+of these macros may not be defined on particular systems if GCC does\n+not provide a @file{stdint.h} header on those systems.\n \n @item __SIZEOF_INT__\n @itemx __SIZEOF_LONG__"}, {"sha": "665b2693e2f07f6169b3dddb54f1ea4913db6404", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -1782,6 +1782,51 @@ unsigned int\"} that has as much precision as @code{long long unsigned\n int}.\n @end defmac\n \n+@defmac SIG_ATOMIC_TYPE\n+@defmacx INT8_TYPE\n+@defmacx INT16_TYPE\n+@defmacx INT32_TYPE\n+@defmacx INT64_TYPE\n+@defmacx UINT8_TYPE\n+@defmacx UINT16_TYPE\n+@defmacx UINT32_TYPE\n+@defmacx UINT64_TYPE\n+@defmacx INT_LEAST8_TYPE\n+@defmacx INT_LEAST16_TYPE\n+@defmacx INT_LEAST32_TYPE\n+@defmacx INT_LEAST64_TYPE\n+@defmacx UINT_LEAST8_TYPE\n+@defmacx UINT_LEAST16_TYPE\n+@defmacx UINT_LEAST32_TYPE\n+@defmacx UINT_LEAST64_TYPE\n+@defmacx INT_FAST8_TYPE\n+@defmacx INT_FAST16_TYPE\n+@defmacx INT_FAST32_TYPE\n+@defmacx INT_FAST64_TYPE\n+@defmacx UINT_FAST8_TYPE\n+@defmacx UINT_FAST16_TYPE\n+@defmacx UINT_FAST32_TYPE\n+@defmacx UINT_FAST64_TYPE\n+@defmacx INTPTR_TYPE\n+@defmacx UINTPTR_TYPE\n+C expressions for the standard types @code{sig_atomic_t},\n+@code{int8_t}, @code{int16_t}, @code{int32_t}, @code{int64_t},\n+@code{uint8_t}, @code{uint16_t}, @code{uint32_t}, @code{uint64_t},\n+@code{int_least8_t}, @code{int_least16_t}, @code{int_least32_t},\n+@code{int_least64_t}, @code{uint_least8_t}, @code{uint_least16_t},\n+@code{uint_least32_t}, @code{uint_least64_t}, @code{int_fast8_t},\n+@code{int_fast16_t}, @code{int_fast32_t}, @code{int_fast64_t},\n+@code{uint_fast8_t}, @code{uint_fast16_t}, @code{uint_fast32_t},\n+@code{uint_fast64_t}, @code{intptr_t}, and @code{uintptr_t}.  See\n+@code{SIZE_TYPE} above for more information.\n+\n+If any of these macros evaluates to a null pointer, the corresponding\n+type is not supported; if GCC is configured to provide\n+@code{<stdint.h>} in such a case, the header provided may not conform\n+to C99, depending on the type in question.  The defaults for all of\n+these macros are null pointers.\n+@end defmac\n+\n @defmac TARGET_PTRMEMFUNC_VBIT_LOCATION\n The C++ compiler represents a pointer-to-member-function with a struct\n that looks like:"}, {"sha": "9c0a44c28a24535acfd685f7e2dbb1f50b638b48", "filename": "gcc/ginclude/stdint-gcc.h", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fginclude%2Fstdint-gcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fginclude%2Fstdint-gcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdint-gcc.h?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -0,0 +1,262 @@\n+/* Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+/* As a special exception, if you include this header file into source\n+   files compiled by GCC, this header file does not by itself cause\n+   the resulting executable to be covered by the GNU General Public\n+   License.  This exception does not however invalidate any other\n+   reasons why the executable file might be covered by the GNU General\n+   Public License.  */\n+\n+/*\n+ * ISO C Standard:  7.18  Integer types  <stdint.h>\n+ */\n+\n+#ifndef _GCC_STDINT_H\n+#define _GCC_STDINT_H\n+\n+/* 7.8.1.1 Exact-width integer types */\n+\n+#ifdef __INT8_TYPE__\n+typedef __INT8_TYPE__ int8_t;\n+#endif\n+#ifdef __INT16_TYPE__\n+typedef __INT16_TYPE__ int16_t;\n+#endif\n+#ifdef __INT32_TYPE__\n+typedef __INT32_TYPE__ int32_t;\n+#endif\n+#ifdef __INT64_TYPE__\n+typedef __INT64_TYPE__ int64_t;\n+#endif\n+#ifdef __UINT8_TYPE__\n+typedef __UINT8_TYPE__ uint8_t;\n+#endif\n+#ifdef __UINT16_TYPE__\n+typedef __UINT16_TYPE__ uint16_t;\n+#endif\n+#ifdef __UINT32_TYPE__\n+typedef __UINT32_TYPE__ uint32_t;\n+#endif\n+#ifdef __UINT64_TYPE__\n+typedef __UINT64_TYPE__ uint64_t;\n+#endif\n+\n+/* 7.8.1.2 Minimum-width integer types */\n+\n+typedef __INT_LEAST8_TYPE__ int_least8_t;\n+typedef __INT_LEAST16_TYPE__ int_least16_t;\n+typedef __INT_LEAST32_TYPE__ int_least32_t;\n+typedef __INT_LEAST64_TYPE__ int_least64_t;\n+typedef __UINT_LEAST8_TYPE__ uint_least8_t;\n+typedef __UINT_LEAST16_TYPE__ uint_least16_t;\n+typedef __UINT_LEAST32_TYPE__ uint_least32_t;\n+typedef __UINT_LEAST64_TYPE__ uint_least64_t;\n+\n+/* 7.8.1.3 Fastest minimum-width integer types */\n+\n+typedef __INT_FAST8_TYPE__ int_fast8_t;\n+typedef __INT_FAST16_TYPE__ int_fast16_t;\n+typedef __INT_FAST32_TYPE__ int_fast32_t;\n+typedef __INT_FAST64_TYPE__ int_fast64_t;\n+typedef __UINT_FAST8_TYPE__ uint_fast8_t;\n+typedef __UINT_FAST16_TYPE__ uint_fast16_t;\n+typedef __UINT_FAST32_TYPE__ uint_fast32_t;\n+typedef __UINT_FAST64_TYPE__ uint_fast64_t;\n+\n+/* 7.8.1.4 Integer types capable of holding object pointers */\n+\n+#ifdef __INTPTR_TYPE__\n+typedef __INTPTR_TYPE__ intptr_t;\n+#endif\n+#ifdef __UINTPTR_TYPE__\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+#endif\n+\n+/* 7.8.1.5 Greatest-width integer types */\n+\n+typedef __INTMAX_TYPE__ intmax_t;\n+typedef __UINTMAX_TYPE__ uintmax_t;\n+\n+#if !defined __cplusplus || defined __STDC_LIMIT_MACROS\n+\n+/* 7.18.2 Limits of specified-width integer types */\n+\n+#ifdef __INT8_MAX__\n+# undef INT8_MAX\n+# define INT8_MAX __INT8_MAX__\n+# undef INT8_MIN\n+# define INT8_MIN (-INT8_MAX - 1)\n+#endif\n+#ifdef __UINT8_MAX__\n+# undef UINT8_MAX\n+# define UINT8_MAX __UINT8_MAX__\n+#endif\n+#ifdef __INT16_MAX__\n+# undef INT16_MAX\n+# define INT16_MAX __INT16_MAX__\n+# undef INT16_MIN\n+# define INT16_MIN (-INT16_MAX - 1)\n+#endif\n+#ifdef __UINT16_MAX__\n+# undef UINT16_MAX\n+# define UINT16_MAX __UINT16_MAX__\n+#endif\n+#ifdef __INT32_MAX__\n+# undef INT32_MAX\n+# define INT32_MAX __INT32_MAX__\n+# undef INT32_MIN\n+# define INT32_MIN (-INT32_MAX - 1)\n+#endif\n+#ifdef __UINT32_MAX__\n+# undef UINT32_MAX\n+# define UINT32_MAX __UINT32_MAX__\n+#endif\n+#ifdef __INT64_MAX__\n+# undef INT64_MAX\n+# define INT64_MAX __INT64_MAX__\n+# undef INT64_MIN\n+# define INT64_MIN (-INT64_MAX - 1)\n+#endif\n+#ifdef __UINT64_MAX__\n+# undef UINT64_MAX\n+# define UINT64_MAX __UINT64_MAX__\n+#endif\n+\n+#undef INT_LEAST8_MAX\n+#define INT_LEAST8_MAX __INT_LEAST8_MAX__\n+#undef INT_LEAST8_MIN\n+#define INT_LEAST8_MIN (-INT_LEAST8_MAX - 1)\n+#undef UINT_LEAST8_MAX\n+#define UINT_LEAST8_MAX __UINT_LEAST8_MAX__\n+#undef INT_LEAST16_MAX\n+#define INT_LEAST16_MAX __INT_LEAST16_MAX__\n+#undef INT_LEAST16_MIN\n+#define INT_LEAST16_MIN (-INT_LEAST16_MAX - 1)\n+#undef UINT_LEAST16_MAX\n+#define UINT_LEAST16_MAX __UINT_LEAST16_MAX__\n+#undef INT_LEAST32_MAX\n+#define INT_LEAST32_MAX __INT_LEAST32_MAX__\n+#undef INT_LEAST32_MIN\n+#define INT_LEAST32_MIN (-INT_LEAST32_MAX - 1)\n+#undef UINT_LEAST32_MAX\n+#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__\n+#undef INT_LEAST64_MAX\n+#define INT_LEAST64_MAX __INT_LEAST64_MAX__\n+#undef INT_LEAST64_MIN\n+#define INT_LEAST64_MIN (-INT_LEAST64_MAX - 1)\n+#undef UINT_LEAST64_MAX\n+#define UINT_LEAST64_MAX __UINT_LEAST64_MAX__\n+\n+#undef INT_FAST8_MAX\n+#define INT_FAST8_MAX __INT_FAST8_MAX__\n+#undef INT_FAST8_MIN\n+#define INT_FAST8_MIN (-INT_FAST8_MAX - 1)\n+#undef UINT_FAST8_MAX\n+#define UINT_FAST8_MAX __UINT_FAST8_MAX__\n+#undef INT_FAST16_MAX\n+#define INT_FAST16_MAX __INT_FAST16_MAX__\n+#undef INT_FAST16_MIN\n+#define INT_FAST16_MIN (-INT_FAST16_MAX - 1)\n+#undef UINT_FAST16_MAX\n+#define UINT_FAST16_MAX __UINT_FAST16_MAX__\n+#undef INT_FAST32_MAX\n+#define INT_FAST32_MAX __INT_FAST32_MAX__\n+#undef INT_FAST32_MIN\n+#define INT_FAST32_MIN (-INT_FAST32_MAX - 1)\n+#undef UINT_FAST32_MAX\n+#define UINT_FAST32_MAX __UINT_FAST32_MAX__\n+#undef INT_FAST64_MAX\n+#define INT_FAST64_MAX __INT_FAST64_MAX__\n+#undef INT_FAST64_MIN\n+#define INT_FAST64_MIN (-INT_FAST64_MAX - 1)\n+#undef UINT_FAST64_MAX\n+#define UINT_FAST64_MAX __UINT_FAST64_MAX__\n+\n+#ifdef __INTPTR_MAX__\n+# undef INTPTR_MAX\n+# define INTPTR_MAX __INTPTR_MAX__\n+# undef INTPTR_MIN\n+# define INTPTR_MIN (-INTPTR_MAX - 1)\n+#endif\n+#ifdef __UINTPTR_MAX__\n+# undef UINTPTR_MAX\n+# define UINTPTR_MAX __UINTPTR_MAX__\n+#endif\n+\n+#undef INTMAX_MAX\n+#define INTMAX_MAX __INTMAX_MAX__\n+#undef INTMAX_MIN\n+#define INTMAX_MIN (-INTMAX_MAX - 1)\n+#undef UINTMAX_MAX\n+#define UINTMAX_MAX __UINTMAX_MAX__\n+\n+/* 7.18.3 Limits of other integer types */\n+\n+#undef PTRDIFF_MAX\n+#define PTRDIFF_MAX __PTRDIFF_MAX__\n+#undef PTRDIFF_MIN\n+#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)\n+\n+#undef SIG_ATOMIC_MAX\n+#define SIG_ATOMIC_MAX __SIG_ATOMIC_MAX__\n+#undef SIG_ATOMIC_MIN\n+#define SIG_ATOMIC_MIN __SIG_ATOMIC_MIN__\n+\n+#undef SIZE_MAX\n+#define SIZE_MAX __SIZE_MAX__\n+\n+#undef WCHAR_MAX\n+#define WCHAR_MAX __WCHAR_MAX__\n+#undef WCHAR_MIN\n+#define WCHAR_MIN __WCHAR_MIN__\n+\n+#undef WINT_MAX\n+#define WINT_MAX __WINT_MAX__\n+#undef WINT_MIN\n+#define WINT_MIN __WINT_MIN__\n+\n+#endif /* !defined __cplusplus || defined __STDC_LIMIT_MACROS */\n+\n+#if !defined __cplusplus || defined __STDC_CONSTANT_MACROS\n+\n+#undef INT8_C\n+#define INT8_C(c) __INT8_C(c)\n+#undef INT16_C\n+#define INT16_C(c) __INT16_C(c)\n+#undef INT32_C\n+#define INT32_C(c) __INT32_C(c)\n+#undef INT64_C\n+#define INT64_C(c) __INT64_C(c)\n+#undef UINT8_C\n+#define UINT8_C(c) __UINT8_C(c)\n+#undef UINT16_C\n+#define UINT16_C(c) __UINT16_C(c)\n+#undef UINT32_C\n+#define UINT32_C(c) __UINT32_C(c)\n+#undef UINT64_C\n+#define UINT64_C(c) __UINT64_C(c)\n+#undef INTMAX_C\n+#define INTMAX_C(c) __INTMAX_C(c)\n+#undef UINTMAX_C\n+#define UINTMAX_C(c) __UINTMAX_C(c)\n+\n+#endif /* !defined __cplusplus || defined __STDC_CONSTANT_MACROS */\n+\n+#endif /* _GCC_STDINT_H */"}, {"sha": "e45f8198b97e147c326311964c531dd04bd3e4f4", "filename": "gcc/ginclude/stdint-wrap.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fginclude%2Fstdint-wrap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Fginclude%2Fstdint-wrap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdint-wrap.h?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -0,0 +1,8 @@\n+#ifndef _GCC_WRAP_STDINT_H\n+#if __STDC_HOSTED__\n+# include_next <stdint.h>\n+#else\n+# include \"stdint-gcc.h\"\n+#endif\n+#define _GCC_WRAP_STDINT_H\n+#endif"}, {"sha": "c845ed97f0f1eea388a1f98e375fb217b91ef648", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -1,3 +1,13 @@\n+2009-03-31  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/448\n+\t* lib/target-supports.exp (check_effective_target_stdint_types):\n+\tUpdate comment.\n+\t(check_effective_target_inttypes_types): New.\n+\t* gcc.dg/c99-stdint-1.c, gcc.dg/c99-stdint-2.c,\n+\tgcc.dg/c99-stdint-3.c, gcc.dg/c99-stdint-4.c,\n+\tgcc.dg/c99-stdint-5.c, gcc.dg/c99-stdint-6.c: New tests.\n+\n 2009-03-31  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/38917"}, {"sha": "5dcac41276ebda1424dc81281951b83402526fdc", "filename": "gcc/testsuite/gcc.dg/c99-stdint-1.c", "status": "added", "additions": 265, "deletions": 0, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-1.c?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -0,0 +1,265 @@\n+/* Verify that <stdint.h> is present and follows the C99 requirements.\n+   If this test fails because of the header being missing on a\n+   particular target, this indicates GCC has not been correctly\n+   configured regarding what version of <stdint.h> to install or what\n+   the <stdint.h> types are on that target.  If GCC is wrapping a\n+   system copy of the header and some tests fail because of bugs in\n+   that copy, they should be fixed with fixincludes (and the bugs\n+   reported to maintainer of that copy if still present in the latest\n+   version).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors -fhosted\" } */\n+\n+#include <limits.h>\n+#include <stdint.h>\n+/* This and the later SIG_ATOMIC_* tests should be appropriately\n+   conditioned for any freestanding targets with no <signal.h>.  */\n+#include <signal.h>\n+\n+/* Note that some of these conditions assume two's complement and no\n+   padding bits; GCC only supports two's complement, and no supported\n+   target has padding bits in any integer type of the standard\n+   widths.  */\n+#define CHECK_SIGNED(TYPE) \\\n+  do { TYPE a; int b[(TYPE)-1 < 0 ? 1 : -1]; } while (0)\n+#define CHECK_UNSIGNED(TYPE) \\\n+  do { TYPE a; int b[(TYPE)-1 < 0 ? -1 : 1]; } while (0)\n+#define CHECK_WIDTH_EQUALS(TYPE, WIDTH) \\\n+  do { int a[sizeof(TYPE) * CHAR_BIT == (WIDTH) ? 1 : -1]; } while (0)\n+#define CHECK_WIDTH_AT_LEAST(TYPE, WIDTH) \\\n+  do { int a[sizeof(TYPE) * CHAR_BIT >= (WIDTH) ? 1 : -1]; } while (0)\n+#define CHECK_WIDTH_ORDER(TYPE1, TYPE2) \\\n+  do { int a[sizeof(TYPE2) >= sizeof(TYPE1) ? 1 : -1]; } while (0)\n+#define CHECK_EXPR_TYPE(TYPE, EXPR) \\\n+  do { __typeof__(EXPR) a; __typeof__((TYPE)0 + 0) *b = &a; } while (0)\n+#define UNSIGNED_MAX_COND(TYPE, EXPR) \\\n+  ((EXPR) == (TYPE)-1)\n+#define SIGNED_MIN_MAX_COND(TYPE, MIN, MAX)\t\t\t\t\\\n+  ((MIN) == -(MAX)-1\t\t\t\t\t\t\t\\\n+   && ((MAX) & 1)\t\t\t\t\t\t\t\\\n+   && ((((MAX) >> 1) + 1) >> (sizeof(TYPE) * CHAR_BIT - 2)) == 1)\n+#define MIN_MAX_COND(TYPE, MIN, MAX)\t\t\t\\\n+  ((TYPE)-1 < 0\t\t\t\t\t\t\\\n+   ? SIGNED_MIN_MAX_COND(TYPE, (MIN), (MAX))\t\t\\\n+   : ((MIN) == 0 && UNSIGNED_MAX_COND(TYPE, (MAX))))\n+#define CHECK_SIGNED_LIMITS(TYPE, MIN, MAX)\t\t\t\t\\\n+  CHECK_SIGNED(TYPE);\t\t\t\t\t\t\t\\\n+  CHECK_EXPR_TYPE(TYPE, (MIN));\t\t\t\t\t\t\\\n+  CHECK_EXPR_TYPE(TYPE, (MAX));\t\t\t\t\t\t\\\n+  do { int a[SIGNED_MIN_MAX_COND(TYPE, (MIN), (MAX)) ? 1 : -1]; } while (0)\n+#define CHECK_SIGNED_LIMITS_2(TYPE, MIN, MAX, MINBD, MAXBD)\t\\\n+  CHECK_SIGNED(TYPE);\t\t\t\t\t\t\\\n+  CHECK_EXPR_TYPE(TYPE, (MIN));\t\t\t\t\t\\\n+  CHECK_EXPR_TYPE(TYPE, (MAX));\t\t\t\t\t\\\n+  do { int a[(SIGNED_MIN_MAX_COND(TYPE, (MIN), (MAX))\t\t\\\n+\t      && (MIN) <= (MINBD)\t\t\t\t\\\n+\t      && (MAX) >= (MAXBD)) ? 1 : -1]; } while (0)\n+#define CHECK_UNSIGNED_LIMITS(TYPE, MAX)\t\t\t\t\\\n+  CHECK_UNSIGNED(TYPE);\t\t\t\t\t\t\t\\\n+  CHECK_EXPR_TYPE(TYPE, (MAX));\t\t\t\t\t\t\\\n+  do { int a[UNSIGNED_MAX_COND(TYPE, (MAX)) ? 1 : -1]; } while (0)\n+#define CHECK_UNSIGNED_LIMITS_2(TYPE, MAX, MAXBD)\t\t\\\n+  CHECK_UNSIGNED(TYPE);\t\t\t\t\t\t\\\n+  CHECK_EXPR_TYPE(TYPE, (MAX));\t\t\t\t\t\\\n+  do { int a[(UNSIGNED_MAX_COND(TYPE, (MAX))\t\t\t\\\n+\t      && (MAX) >= (MAXBD)) ? 1 : -1]; } while (0)\n+#define CHECK_LIMITS_2(TYPE, MIN, MAX, SMINBD, SMAXBD, UMAXBD)\t\\\n+  do { int a[(MIN_MAX_COND(TYPE, (MIN), (MAX))\t\t\t\\\n+\t      && ((TYPE)-1 < 0\t\t\t\t\t\\\n+\t\t  ? ((MIN) <= (SMINBD) && (MAX) >= (SMAXBD))\t\\\n+\t\t  : (MAX) >= (UMAXBD))) ? 1 : -1]; } while (0)\n+#define CHECK_CONSTS(TYPE, MACRO)\t\t\t\t\\\n+  CHECK_EXPR_TYPE(TYPE, MACRO(01));\t\t\t\t\\\n+  CHECK_EXPR_TYPE(TYPE, MACRO(2));\t\t\t\t\\\n+  CHECK_EXPR_TYPE(TYPE, MACRO(0x3));\t\t\t\t\\\n+  do { int a[(MACRO(12) == 12\t\t\t\t\t\\\n+\t      && MACRO(012) == 012\t\t\t\t\\\n+\t      && MACRO(0x12) == 0x12) ? 1 : -1]; } while (0);\n+\n+void\n+test_exact (void)\n+{\n+#ifdef INT8_MIN\n+  CHECK_WIDTH_EQUALS(int8_t, 8);\n+  CHECK_SIGNED_LIMITS(int8_t, INT8_MIN, INT8_MAX);\n+#else\n+  CHECK_WIDTH_AT_LEAST(int_least8_t, 9);\n+#endif\n+#ifdef INT16_MIN\n+  CHECK_WIDTH_EQUALS(int16_t, 16);\n+  CHECK_SIGNED_LIMITS(int16_t, INT16_MIN, INT16_MAX);\n+#else\n+  CHECK_WIDTH_AT_LEAST(int_least8_t, 17);\n+#endif\n+#ifdef INT32_MIN\n+  CHECK_WIDTH_EQUALS(int32_t, 32);\n+  CHECK_SIGNED_LIMITS(int32_t, INT32_MIN, INT32_MAX);\n+#else\n+  CHECK_WIDTH_AT_LEAST(int_least8_t, 33);\n+#endif\n+#ifdef INT64_MIN\n+  CHECK_WIDTH_EQUALS(int64_t, 64);\n+  CHECK_SIGNED_LIMITS(int64_t, INT64_MIN, INT64_MAX);\n+#else\n+  CHECK_WIDTH_AT_LEAST(int_least8_t, 65);\n+#endif\n+#ifdef UINT8_MAX\n+  CHECK_WIDTH_EQUALS(uint8_t, 8);\n+  CHECK_UNSIGNED_LIMITS(uint8_t, UINT8_MAX);\n+#else\n+  CHECK_WIDTH_AT_LEAST(uint_least8_t, 9);\n+#endif\n+#ifdef UINT16_MAX\n+  CHECK_WIDTH_EQUALS(uint16_t, 16);\n+  CHECK_UNSIGNED_LIMITS(uint16_t, UINT16_MAX);\n+#else\n+  CHECK_WIDTH_AT_LEAST(uint_least8_t, 17);\n+#endif\n+#ifdef UINT32_MAX\n+  CHECK_WIDTH_EQUALS(uint32_t, 32);\n+  CHECK_UNSIGNED_LIMITS(uint32_t, UINT32_MAX);\n+#else\n+  CHECK_WIDTH_AT_LEAST(uint_least8_t, 33);\n+#endif\n+#ifdef UINT64_MAX\n+  CHECK_WIDTH_EQUALS(uint64_t, 64);\n+  CHECK_UNSIGNED_LIMITS(uint64_t, UINT64_MAX);\n+#else\n+  CHECK_WIDTH_AT_LEAST(uint_least8_t, 65);\n+#endif\n+}\n+\n+void\n+test_least (void)\n+{\n+  CHECK_WIDTH_AT_LEAST(int_least8_t, 8);\n+  CHECK_WIDTH_ORDER(int_least8_t, int_fast8_t);\n+  CHECK_SIGNED_LIMITS(int_least8_t, INT_LEAST8_MIN, INT_LEAST8_MAX);\n+  CHECK_WIDTH_AT_LEAST(int_least16_t, 16);\n+  CHECK_WIDTH_ORDER(int_least16_t, int_fast16_t);\n+  CHECK_SIGNED_LIMITS(int_least16_t, INT_LEAST16_MIN, INT_LEAST16_MAX);\n+  CHECK_WIDTH_AT_LEAST(int_least32_t, 32);\n+  CHECK_WIDTH_ORDER(int_least32_t, int_fast32_t);\n+  CHECK_SIGNED_LIMITS(int_least32_t, INT_LEAST32_MIN, INT_LEAST32_MAX);\n+  CHECK_WIDTH_AT_LEAST(int_least64_t, 64);\n+  CHECK_WIDTH_ORDER(int_least64_t, int_fast64_t);\n+  CHECK_SIGNED_LIMITS(int_least64_t, INT_LEAST64_MIN, INT_LEAST64_MAX);\n+  CHECK_WIDTH_AT_LEAST(uint_least8_t, 8);\n+  CHECK_WIDTH_ORDER(uint_least8_t, uint_fast8_t);\n+  CHECK_UNSIGNED_LIMITS(uint_least8_t, UINT_LEAST8_MAX);\n+  CHECK_WIDTH_AT_LEAST(uint_least16_t, 16);\n+  CHECK_WIDTH_ORDER(uint_least16_t, uint_fast16_t);\n+  CHECK_UNSIGNED_LIMITS(uint_least16_t, UINT_LEAST16_MAX);\n+  CHECK_WIDTH_AT_LEAST(uint_least32_t, 32);\n+  CHECK_WIDTH_ORDER(uint_least32_t, uint_fast32_t);\n+  CHECK_UNSIGNED_LIMITS(uint_least32_t, UINT_LEAST32_MAX);\n+  CHECK_WIDTH_AT_LEAST(uint_least64_t, 64);\n+  CHECK_WIDTH_ORDER(uint_least64_t, uint_fast64_t);\n+  CHECK_UNSIGNED_LIMITS(uint_least64_t, UINT_LEAST64_MAX);\n+}\n+\n+void\n+test_fast (void)\n+{\n+  CHECK_WIDTH_AT_LEAST(int_fast8_t, 8);\n+  CHECK_SIGNED_LIMITS(int_fast8_t, INT_FAST8_MIN, INT_FAST8_MAX);\n+  CHECK_WIDTH_AT_LEAST(int_fast16_t, 16);\n+  CHECK_SIGNED_LIMITS(int_fast16_t, INT_FAST16_MIN, INT_FAST16_MAX);\n+  CHECK_WIDTH_AT_LEAST(int_fast32_t, 32);\n+  CHECK_SIGNED_LIMITS(int_fast32_t, INT_FAST32_MIN, INT_FAST32_MAX);\n+  CHECK_WIDTH_AT_LEAST(int_fast64_t, 64);\n+  CHECK_SIGNED_LIMITS(int_fast64_t, INT_FAST64_MIN, INT_FAST64_MAX);\n+  CHECK_WIDTH_AT_LEAST(uint_fast8_t, 8);\n+  CHECK_UNSIGNED_LIMITS(uint_fast8_t, UINT_FAST8_MAX);\n+  CHECK_WIDTH_AT_LEAST(uint_fast16_t, 16);\n+  CHECK_UNSIGNED_LIMITS(uint_fast16_t, UINT_FAST16_MAX);\n+  CHECK_WIDTH_AT_LEAST(uint_fast32_t, 32);\n+  CHECK_UNSIGNED_LIMITS(uint_fast32_t, UINT_FAST32_MAX);\n+  CHECK_WIDTH_AT_LEAST(uint_fast64_t, 64);\n+  CHECK_UNSIGNED_LIMITS(uint_fast64_t, UINT_FAST64_MAX);\n+}\n+\n+void\n+test_ptr (void)\n+{\n+#ifdef INTPTR_MIN\n+  CHECK_SIGNED_LIMITS_2(intptr_t, INTPTR_MIN, INTPTR_MAX, -0x7fff, 0x7fff);\n+#endif\n+#ifdef UINTPTR_MAX\n+  CHECK_UNSIGNED_LIMITS_2(uintptr_t, UINTPTR_MAX, 0xffffU);\n+#endif\n+}\n+\n+void\n+test_max (void)\n+{\n+  CHECK_WIDTH_AT_LEAST(intmax_t, 64);\n+  CHECK_WIDTH_ORDER(long long, intmax_t);\n+  CHECK_WIDTH_ORDER(int_fast8_t, intmax_t);\n+  CHECK_WIDTH_ORDER(int_fast16_t, intmax_t);\n+  CHECK_WIDTH_ORDER(int_fast32_t, intmax_t);\n+  CHECK_WIDTH_ORDER(int_fast64_t, intmax_t);\n+  CHECK_SIGNED_LIMITS(intmax_t, INTMAX_MIN, INTMAX_MAX);\n+  CHECK_WIDTH_AT_LEAST(uintmax_t, 64);\n+  CHECK_WIDTH_ORDER(unsigned long long, uintmax_t);\n+  CHECK_WIDTH_ORDER(uint_fast8_t, uintmax_t);\n+  CHECK_WIDTH_ORDER(uint_fast16_t, uintmax_t);\n+  CHECK_WIDTH_ORDER(uint_fast32_t, uintmax_t);\n+  CHECK_WIDTH_ORDER(uint_fast64_t, uintmax_t);\n+  CHECK_UNSIGNED_LIMITS(uintmax_t, UINTMAX_MAX);\n+}\n+\n+void\n+test_misc_limits (void)\n+{\n+  CHECK_SIGNED_LIMITS_2(__PTRDIFF_TYPE__, PTRDIFF_MIN, PTRDIFF_MAX, -65535L, 65535L);\n+  CHECK_LIMITS_2(sig_atomic_t, SIG_ATOMIC_MIN, SIG_ATOMIC_MAX, -127, 127, 255);\n+  CHECK_UNSIGNED_LIMITS_2(__SIZE_TYPE__, SIZE_MAX, 65535U);\n+  CHECK_LIMITS_2(__WCHAR_TYPE__, WCHAR_MIN, WCHAR_MAX, -127, 127, 255);\n+  CHECK_LIMITS_2(__WINT_TYPE__, WINT_MIN, WINT_MAX, -32767, 32767, 65535);\n+}\n+\n+void\n+test_constants (void)\n+{\n+  CHECK_CONSTS(int_least8_t, INT8_C);\n+  CHECK_CONSTS(int_least16_t, INT16_C);\n+  CHECK_CONSTS(int_least32_t, INT32_C);\n+  CHECK_CONSTS(int_least64_t, INT64_C);\n+  CHECK_CONSTS(intmax_t, INTMAX_C);\n+  CHECK_CONSTS(uint_least8_t, UINT8_C);\n+  CHECK_CONSTS(uint_least16_t, UINT16_C);\n+  CHECK_CONSTS(uint_least32_t, UINT32_C);\n+  CHECK_CONSTS(uint_least64_t, UINT64_C);\n+  CHECK_CONSTS(uintmax_t, UINTMAX_C);\n+#if INT8_C(12) != 12\n+#error \"INT8_C not usable in #if\"\n+#endif\n+#if INT16_C(12) != 12\n+#error \"INT16_C not usable in #if\"\n+#endif\n+#if INT32_C(12) != 12\n+#error \"INT32_C not usable in #if\"\n+#endif\n+#if INT64_C(12) != 12\n+#error \"INT64_C not usable in #if\"\n+#endif\n+#if INTMAX_C(12) != 12\n+#error \"INTMAX_C not usable in #if\"\n+#endif\n+#if UINT8_C(12) != 12\n+#error \"UINT8_C not usable in #if\"\n+#endif\n+#if UINT16_C(12) != 12\n+#error \"UINT16_C not usable in #if\"\n+#endif\n+#if UINT32_C(12) != 12\n+#error \"UINT32_C not usable in #if\"\n+#endif\n+#if UINT64_C(12) != 12\n+#error \"UINT64_C not usable in #if\"\n+#endif\n+#if UINTMAX_C(12) != 12\n+#error \"UINTMAX_C not usable in #if\"\n+#endif\n+}"}, {"sha": "0187b034c997a53e8328a6e6eebb813e76baefa8", "filename": "gcc/testsuite/gcc.dg/c99-stdint-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-2.c?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -0,0 +1,8 @@\n+/* Verify that <stdint.h> is present and follows the C99 requirements.\n+   Freestanding version.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors -ffreestanding\" } */\n+\n+/* The test is that there are no diagnostics, so just include the\n+   hosted version.  */\n+#include \"c99-stdint-1.c\""}, {"sha": "c42ac8b9c2cf47755f9796b2bc07d3d1cd172e38", "filename": "gcc/testsuite/gcc.dg/c99-stdint-3.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-3.c?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -0,0 +1,39 @@\n+/* Verify that pairs of types in <stdint.h> are corresponding types\n+   (requires no pointer sign warnings, so separate from\n+   c99-stdint-1.c).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -fhosted\" } */\n+\n+#include <stdint.h>\n+\n+#define CHECK_CORRESPONDING(TYPE1, TYPE2) \\\n+  do { TYPE1 a; TYPE2 *b = &a; TYPE2 c; TYPE1 *d = &c; } while (0)\n+\n+void\n+check_corresponding (void)\n+{\n+#if defined(INT8_MAX) && defined(UINT8_MAX)\n+  CHECK_CORRESPONDING(int8_t, uint8_t);\n+#endif\n+#if defined(INT16_MAX) && defined(UINT16_MAX)\n+  CHECK_CORRESPONDING(int16_t, uint16_t);\n+#endif\n+#if defined(INT32_MAX) && defined(UINT32_MAX)\n+  CHECK_CORRESPONDING(int32_t, uint32_t);\n+#endif\n+#if defined(INT64_MAX) && defined(UINT64_MAX)\n+  CHECK_CORRESPONDING(int64_t, uint64_t);\n+#endif\n+  CHECK_CORRESPONDING(int_least8_t, uint_least8_t);\n+  CHECK_CORRESPONDING(int_least16_t, uint_least16_t);\n+  CHECK_CORRESPONDING(int_least32_t, uint_least32_t);\n+  CHECK_CORRESPONDING(int_least64_t, uint_least64_t);\n+  CHECK_CORRESPONDING(int_fast8_t, uint_fast8_t);\n+  CHECK_CORRESPONDING(int_fast16_t, uint_fast16_t);\n+  CHECK_CORRESPONDING(int_fast32_t, uint_fast32_t);\n+  CHECK_CORRESPONDING(int_fast64_t, uint_fast64_t);\n+#if defined(INTPTR_MAX) && defined(UINTPTR_MAX)\n+  CHECK_CORRESPONDING(intptr_t, uintptr_t);\n+#endif\n+  CHECK_CORRESPONDING(intmax_t, uintmax_t);\n+}"}, {"sha": "469df8cd8e44f996a1baaffd461cf8cffcfec512", "filename": "gcc/testsuite/gcc.dg/c99-stdint-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-4.c?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -0,0 +1,8 @@\n+/* Verify that pairs of types in <stdint.h> are corresponding types.\n+   Freestanding version.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -ffreestanding\" } */\n+\n+/* The test is that there are no diagnostics, so just include the\n+   hosted version.  */\n+#include \"c99-stdint-3.c\""}, {"sha": "da2f356643bdf95a88107492026a90963e3e04f0", "filename": "gcc/testsuite/gcc.dg/c99-stdint-5.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-5.c?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -0,0 +1,65 @@\n+/* Verify that GCC's internal notions of types in <stdint.h> agree\n+   with any system header (which GCC will use by default for hosted\n+   compilations).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+#include <stdint.h>\n+#include <signal.h>\n+\n+#define CHECK_TYPES(TYPE1, TYPE2) \\\n+  do { TYPE1 a; TYPE2 *b = &a; TYPE2 c; TYPE1 *d = &c; } while (0)\n+\n+void\n+check_types (void)\n+{\n+#ifdef __INT8_TYPE__\n+  CHECK_TYPES(__INT8_TYPE__, int8_t);\n+#endif\n+#ifdef __INT16_TYPE__\n+  CHECK_TYPES(__INT16_TYPE__, int16_t);\n+#endif\n+#ifdef __INT32_TYPE__\n+  CHECK_TYPES(__INT32_TYPE__, int32_t);\n+#endif\n+#ifdef __INT64_TYPE__\n+  CHECK_TYPES(__INT64_TYPE__, int64_t);\n+#endif\n+#ifdef __UINT8_TYPE__\n+  CHECK_TYPES(__UINT8_TYPE__, uint8_t);\n+#endif\n+#ifdef __UINT16_TYPE__\n+  CHECK_TYPES(__UINT16_TYPE__, uint16_t);\n+#endif\n+#ifdef __UINT32_TYPE__\n+  CHECK_TYPES(__UINT32_TYPE__, uint32_t);\n+#endif\n+#ifdef __UINT64_TYPE__\n+  CHECK_TYPES(__UINT64_TYPE__, uint64_t);\n+#endif\n+  CHECK_TYPES(__INT_LEAST8_TYPE__, int_least8_t);\n+  CHECK_TYPES(__INT_LEAST16_TYPE__, int_least16_t);\n+  CHECK_TYPES(__INT_LEAST32_TYPE__, int_least32_t);\n+  CHECK_TYPES(__INT_LEAST64_TYPE__, int_least64_t);\n+  CHECK_TYPES(__UINT_LEAST8_TYPE__, uint_least8_t);\n+  CHECK_TYPES(__UINT_LEAST16_TYPE__, uint_least16_t);\n+  CHECK_TYPES(__UINT_LEAST32_TYPE__, uint_least32_t);\n+  CHECK_TYPES(__UINT_LEAST64_TYPE__, uint_least64_t);\n+  CHECK_TYPES(__INT_FAST8_TYPE__, int_fast8_t);\n+  CHECK_TYPES(__INT_FAST16_TYPE__, int_fast16_t);\n+  CHECK_TYPES(__INT_FAST32_TYPE__, int_fast32_t);\n+  CHECK_TYPES(__INT_FAST64_TYPE__, int_fast64_t);\n+  CHECK_TYPES(__UINT_FAST8_TYPE__, uint_fast8_t);\n+  CHECK_TYPES(__UINT_FAST16_TYPE__, uint_fast16_t);\n+  CHECK_TYPES(__UINT_FAST32_TYPE__, uint_fast32_t);\n+  CHECK_TYPES(__UINT_FAST64_TYPE__, uint_fast64_t);\n+#ifdef __INTPTR_TYPE__\n+  CHECK_TYPES(__INTPTR_TYPE__, intptr_t);\n+#endif\n+#ifdef __UINTPTR_TYPE__\n+  CHECK_TYPES(__UINTPTR_TYPE__, uintptr_t);\n+#endif\n+  CHECK_TYPES(__INTMAX_TYPE__, intmax_t);\n+  CHECK_TYPES(__UINTMAX_TYPE__, uintmax_t);\n+  CHECK_TYPES(__SIG_ATOMIC_TYPE__, sig_atomic_t);\n+}"}, {"sha": "5007f54163bb75c1d9e9f51592a449e62e8761b5", "filename": "gcc/testsuite/gcc.dg/c99-stdint-6.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-stdint-6.c?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -0,0 +1,67 @@\n+/* Verify that GCC's internal notions of types in <stdint.h> agree\n+   with any system <inttypes.h> header.  */\n+/* { dg-do compile { target inttypes_types } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+/* { dg-options \"-std=gnu99 -pedantic-errors -DNO_FAST_TYPES\" { target *-*-solaris2.[789]* } } */\n+\n+#include <inttypes.h>\n+#include <signal.h>\n+\n+#define CHECK_TYPES(TYPE1, TYPE2) \\\n+  do { TYPE1 a; TYPE2 *b = &a; TYPE2 c; TYPE1 *d = &c; } while (0)\n+\n+void\n+check_types (void)\n+{\n+#ifdef __INT8_TYPE__\n+  CHECK_TYPES(__INT8_TYPE__, int8_t);\n+#endif\n+#ifdef __INT16_TYPE__\n+  CHECK_TYPES(__INT16_TYPE__, int16_t);\n+#endif\n+#ifdef __INT32_TYPE__\n+  CHECK_TYPES(__INT32_TYPE__, int32_t);\n+#endif\n+#ifdef __INT64_TYPE__\n+  CHECK_TYPES(__INT64_TYPE__, int64_t);\n+#endif\n+#ifdef __UINT8_TYPE__\n+  CHECK_TYPES(__UINT8_TYPE__, uint8_t);\n+#endif\n+#ifdef __UINT16_TYPE__\n+  CHECK_TYPES(__UINT16_TYPE__, uint16_t);\n+#endif\n+#ifdef __UINT32_TYPE__\n+  CHECK_TYPES(__UINT32_TYPE__, uint32_t);\n+#endif\n+#ifdef __UINT64_TYPE__\n+  CHECK_TYPES(__UINT64_TYPE__, uint64_t);\n+#endif\n+  CHECK_TYPES(__INT_LEAST8_TYPE__, int_least8_t);\n+  CHECK_TYPES(__INT_LEAST16_TYPE__, int_least16_t);\n+  CHECK_TYPES(__INT_LEAST32_TYPE__, int_least32_t);\n+  CHECK_TYPES(__INT_LEAST64_TYPE__, int_least64_t);\n+  CHECK_TYPES(__UINT_LEAST8_TYPE__, uint_least8_t);\n+  CHECK_TYPES(__UINT_LEAST16_TYPE__, uint_least16_t);\n+  CHECK_TYPES(__UINT_LEAST32_TYPE__, uint_least32_t);\n+  CHECK_TYPES(__UINT_LEAST64_TYPE__, uint_least64_t);\n+#ifndef NO_FAST_TYPES\n+  CHECK_TYPES(__INT_FAST8_TYPE__, int_fast8_t);\n+  CHECK_TYPES(__INT_FAST16_TYPE__, int_fast16_t);\n+  CHECK_TYPES(__INT_FAST32_TYPE__, int_fast32_t);\n+  CHECK_TYPES(__INT_FAST64_TYPE__, int_fast64_t);\n+  CHECK_TYPES(__UINT_FAST8_TYPE__, uint_fast8_t);\n+  CHECK_TYPES(__UINT_FAST16_TYPE__, uint_fast16_t);\n+  CHECK_TYPES(__UINT_FAST32_TYPE__, uint_fast32_t);\n+  CHECK_TYPES(__UINT_FAST64_TYPE__, uint_fast64_t);\n+#endif\n+#ifdef __INTPTR_TYPE__\n+  CHECK_TYPES(__INTPTR_TYPE__, intptr_t);\n+#endif\n+#ifdef __UINTPTR_TYPE__\n+  CHECK_TYPES(__UINTPTR_TYPE__, uintptr_t);\n+#endif\n+  CHECK_TYPES(__INTMAX_TYPE__, intmax_t);\n+  CHECK_TYPES(__UINTMAX_TYPE__, uintmax_t);\n+  CHECK_TYPES(__SIG_ATOMIC_TYPE__, sig_atomic_t);\n+}"}, {"sha": "884e743d4058e81415aef7384a2fe223be69ffd3", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207bf79d7f23a3883694578f431c08960c348e38/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=207bf79d7f23a3883694578f431c08960c348e38", "patch": "@@ -2620,7 +2620,8 @@ proc check_effective_target_string_merging { } {\n }\n \n # Return 1 if target has the basic signed and unsigned types in\n-# <stdint.h>, 0 otherwise.\n+# <stdint.h>, 0 otherwise.  This will be obsolete when GCC ensures a\n+# working <stdint.h> for all targets.\n \n proc check_effective_target_stdint_types { } {\n     return [check_no_compiler_messages stdint_types assembly {\n@@ -2630,6 +2631,19 @@ proc check_effective_target_stdint_types { } {\n     }]\n }\n \n+# Return 1 if target has the basic signed and unsigned types in\n+# <inttypes.h>, 0 otherwise.  This is for tests that GCC's notions of\n+# these types agree with those in the header, as some systems have\n+# only <inttypes.h>.\n+\n+proc check_effective_target_inttypes_types { } {\n+    return [check_no_compiler_messages inttypes_types assembly {\n+\t#include <inttypes.h>\n+\tint8_t a; int16_t b; int32_t c; int64_t d;\n+\tuint8_t e; uint16_t f; uint32_t g; uint64_t h;\n+    }]\n+}\n+\n # Return 1 if programs are intended to be run on a simulator\n # (i.e. slowly) rather than hardware (i.e. fast).\n "}]}