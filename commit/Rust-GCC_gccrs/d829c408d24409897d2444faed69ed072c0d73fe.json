{"sha": "d829c408d24409897d2444faed69ed072c0d73fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgyOWM0MDhkMjQ0MDk4OTdkMjQ0NGZhZWQ2OWVkMDcyYzBkNzNmZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-12-06T09:02:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-12-06T09:02:17Z"}, "message": "re PR tree-optimization/51363 (ICE: in gimple_rhs_has_side_effects, at gimple.c:2530 with -O -fno-tree-ccp)\n\n2011-12-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/51363\n\t* gimple.c (gimple_rhs_has_side_effects): Remove.\n\t* gimple.h (gimple_rhs_has_side_effects): Likewise.\n\t* tree-ssa-dom.c (optimize_stmt): Simplify conditional.\n\nFrom-SVN: r182041", "tree": {"sha": "84166cf1fe0e2bf39bec0a5b5c73e24040f13a0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84166cf1fe0e2bf39bec0a5b5c73e24040f13a0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d829c408d24409897d2444faed69ed072c0d73fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d829c408d24409897d2444faed69ed072c0d73fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d829c408d24409897d2444faed69ed072c0d73fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d829c408d24409897d2444faed69ed072c0d73fe/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59b719ec82d2d84286d8fdf86153a3261de0139e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b719ec82d2d84286d8fdf86153a3261de0139e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b719ec82d2d84286d8fdf86153a3261de0139e"}], "stats": {"total": 79, "additions": 10, "deletions": 69}, "files": [{"sha": "e27962f03d57283d4369a8dc8a4c9b699861f38e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d829c408d24409897d2444faed69ed072c0d73fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d829c408d24409897d2444faed69ed072c0d73fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d829c408d24409897d2444faed69ed072c0d73fe", "patch": "@@ -1,3 +1,10 @@\n+2011-12-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51363\n+\t* gimple.c (gimple_rhs_has_side_effects): Remove.\n+\t* gimple.h (gimple_rhs_has_side_effects): Likewise.\n+\t* tree-ssa-dom.c (optimize_stmt): Simplify conditional.\n+\n 2011-12-06  Alan Modra  <amodra@gmail.com>\n \n \tPR target/50906"}, {"sha": "81c119048f2346a6b4cfd3553040587cbfe5b3c1", "filename": "gcc/gimple.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d829c408d24409897d2444faed69ed072c0d73fe/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d829c408d24409897d2444faed69ed072c0d73fe/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=d829c408d24409897d2444faed69ed072c0d73fe", "patch": "@@ -2484,69 +2484,6 @@ gimple_has_side_effects (const_gimple s)\n   return false;\n }\n \n-/* Return true if the RHS of statement S has side effects.\n-   We may use it to determine if it is admissable to replace\n-   an assignment or call with a copy of a previously-computed\n-   value.  In such cases, side-effects due to the LHS are\n-   preserved.  */\n-\n-bool\n-gimple_rhs_has_side_effects (const_gimple s)\n-{\n-  unsigned i;\n-\n-  if (is_gimple_call (s))\n-    {\n-      unsigned nargs = gimple_call_num_args (s);\n-      tree fn;\n-\n-      if (!(gimple_call_flags (s) & (ECF_CONST | ECF_PURE)))\n-        return true;\n-\n-      /* We cannot use gimple_has_volatile_ops here,\n-         because we must ignore a volatile LHS.  */\n-      fn = gimple_call_fn (s);\n-      if (fn && (TREE_SIDE_EFFECTS (fn) || TREE_THIS_VOLATILE (fn)))\n-\t{\n-\t  gcc_assert (gimple_has_volatile_ops (s));\n-\t  return true;\n-\t}\n-\n-      for (i = 0; i < nargs; i++)\n-        if (TREE_SIDE_EFFECTS (gimple_call_arg (s, i))\n-            || TREE_THIS_VOLATILE (gimple_call_arg (s, i)))\n-          return true;\n-\n-      return false;\n-    }\n-  else if (is_gimple_assign (s))\n-    {\n-      /* Skip the first operand, the LHS. */\n-      for (i = 1; i < gimple_num_ops (s); i++)\n-\tif (TREE_SIDE_EFFECTS (gimple_op (s, i))\n-            || TREE_THIS_VOLATILE (gimple_op (s, i)))\n-\t  {\n-\t    gcc_assert (gimple_has_volatile_ops (s));\n-\t    return true;\n-\t  }\n-    }\n-  else if (is_gimple_debug (s))\n-    return false;\n-  else\n-    {\n-      /* For statements without an LHS, examine all arguments.  */\n-      for (i = 0; i < gimple_num_ops (s); i++)\n-\tif (TREE_SIDE_EFFECTS (gimple_op (s, i))\n-            || TREE_THIS_VOLATILE (gimple_op (s, i)))\n-\t  {\n-\t    gcc_assert (gimple_has_volatile_ops (s));\n-\t    return true;\n-\t  }\n-    }\n-\n-  return false;\n-}\n-\n /* Helper for gimple_could_trap_p and gimple_assign_rhs_could_trap_p.\n    Return true if S can trap.  When INCLUDE_MEM is true, check whether\n    the memory operations could trap.  When INCLUDE_STORES is true and"}, {"sha": "487b516cbd3e82557fd33b7b3a53a09de86dea56", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d829c408d24409897d2444faed69ed072c0d73fe/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d829c408d24409897d2444faed69ed072c0d73fe/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=d829c408d24409897d2444faed69ed072c0d73fe", "patch": "@@ -948,7 +948,6 @@ void gimple_cond_get_ops_from_tree (tree, enum tree_code *, tree *, tree *);\n gimple gimple_build_cond_from_tree (tree, tree, tree);\n void gimple_cond_set_condition_from_tree (gimple, tree);\n bool gimple_has_side_effects (const_gimple);\n-bool gimple_rhs_has_side_effects (const_gimple);\n bool gimple_could_trap_p (gimple);\n bool gimple_could_trap_p_1 (gimple, bool, bool);\n bool gimple_assign_rhs_could_trap_p (gimple);"}, {"sha": "f8207e078e4c24d5bf85b7a8d83176e2f2c04975", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d829c408d24409897d2444faed69ed072c0d73fe/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d829c408d24409897d2444faed69ed072c0d73fe/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=d829c408d24409897d2444faed69ed072c0d73fe", "patch": "@@ -2154,12 +2154,10 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \n   /* Check for redundant computations.  Do this optimization only\n      for assignments that have no volatile ops and conditionals.  */\n-  may_optimize_p = (!gimple_has_volatile_ops (stmt)\n-                    && ((is_gimple_assign (stmt)\n-                         && !gimple_rhs_has_side_effects (stmt))\n+  may_optimize_p = (!gimple_has_side_effects (stmt)\n+                    && (is_gimple_assign (stmt)\n                         || (is_gimple_call (stmt)\n-                            && gimple_call_lhs (stmt) != NULL_TREE\n-                            && !gimple_rhs_has_side_effects (stmt))\n+                            && gimple_call_lhs (stmt) != NULL_TREE)\n                         || gimple_code (stmt) == GIMPLE_COND\n                         || gimple_code (stmt) == GIMPLE_SWITCH));\n "}]}