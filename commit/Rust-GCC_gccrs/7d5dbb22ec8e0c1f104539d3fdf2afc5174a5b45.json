{"sha": "7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1ZGJiMjJlYzhlMGMxZjEwNDUzOWQzZmRmMmFmYzUxNzRhNWI0NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-04-25T13:34:50Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-04-25T13:34:50Z"}, "message": "Fix spelling suggestions for reserved words (PR c++/80177)\n\ngcc/cp/ChangeLog:\n\tPR c++/80177\n\t* name-lookup.c (suggest_alternative_in_explicit_scope): Convert\n\tcandidate type of bm from tree to const char *.\n\t(consider_binding_level): Likewise.\n\t(lookup_name_fuzzy): Likewise, using this to merge the best\n\tresult from the preprocessor into bm, rather than immediately\n\treturning, so that better matches from reserved words can \"win\".\n\tGuard the rejection of keywords that don't start decl-specifiers\n\tso it only happens for FUZZY_LOOKUP_TYPENAME.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/80177\n\t* g++.dg/spellcheck-pr80177.C: New test case.\n\nFrom-SVN: r247233", "tree": {"sha": "cb97cfa4afc5343f61e406a573fd5fe602802a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb97cfa4afc5343f61e406a573fd5fe602802a4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f168ccca1bb7a72e5456f9a6ff82a256e774073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f168ccca1bb7a72e5456f9a6ff82a256e774073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f168ccca1bb7a72e5456f9a6ff82a256e774073"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "b04894dc370d4d2226d1b500d7c5372102e002fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45", "patch": "@@ -1,3 +1,15 @@\n+2017-04-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/80177\n+\t* name-lookup.c (suggest_alternative_in_explicit_scope): Convert\n+\tcandidate type of bm from tree to const char *.\n+\t(consider_binding_level): Likewise.\n+\t(lookup_name_fuzzy): Likewise, using this to merge the best\n+\tresult from the preprocessor into bm, rather than immediately\n+\treturning, so that better matches from reserved words can \"win\".\n+\tGuard the rejection of keywords that don't start decl-specifiers\n+\tso it only happens for FUZZY_LOOKUP_TYPENAME.\n+\n 2017-04-24  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \t* decl.c (grokdeclarator): Use %qT instead of %<%T%> in diagnostics."}, {"sha": "eda6db22a32f8e06342457296282e8a515bdf2fe", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45", "patch": "@@ -48,7 +48,8 @@ static bool lookup_using_namespace (tree, struct scope_binding *, tree,\n \t\t\t\t    tree, int);\n static bool qualified_lookup_using_namespace (tree, tree,\n \t\t\t\t\t      struct scope_binding *, int);\n-static void consider_binding_level (tree name, best_match <tree, tree> &bm,\n+static void consider_binding_level (tree name,\n+\t\t\t\t    best_match <tree, const char *> &bm,\n \t\t\t\t    cp_binding_level *lvl,\n \t\t\t\t    bool look_within_fields,\n \t\t\t\t    enum lookup_name_fuzzy_kind kind);\n@@ -4550,14 +4551,13 @@ suggest_alternative_in_explicit_scope (location_t location, tree name,\n \n   cp_binding_level *level = NAMESPACE_LEVEL (scope);\n \n-  best_match <tree, tree> bm (name);\n+  best_match <tree, const char *> bm (name);\n   consider_binding_level (name, bm, level, false, FUZZY_LOOKUP_NAME);\n \n   /* See if we have a good suggesion for the user.  */\n-  tree best_id = bm.get_best_meaningful_candidate ();\n-  if (best_id)\n+  const char *fuzzy_name = bm.get_best_meaningful_candidate ();\n+  if (fuzzy_name)\n     {\n-      const char *fuzzy_name = IDENTIFIER_POINTER (best_id);\n       gcc_rich_location richloc (location);\n       richloc.add_fixit_replace (fuzzy_name);\n       inform_at_rich_loc (&richloc, \"suggested alternative: %qs\",\n@@ -4797,7 +4797,7 @@ qualified_lookup_using_namespace (tree name, tree scope,\n    Traverse binding level LVL, looking for good name matches for NAME\n    (and BM).  */\n static void\n-consider_binding_level (tree name, best_match <tree, tree> &bm,\n+consider_binding_level (tree name, best_match <tree, const char *> &bm,\n \t\t\tcp_binding_level *lvl, bool look_within_fields,\n \t\t\tenum lookup_name_fuzzy_kind kind)\n {\n@@ -4809,7 +4809,7 @@ consider_binding_level (tree name, best_match <tree, tree> &bm,\n \ttree best_matching_field\n \t  = lookup_member_fuzzy (type, name, want_type_p);\n \tif (best_matching_field)\n-\t  bm.consider (best_matching_field);\n+\t  bm.consider (IDENTIFIER_POINTER (best_matching_field));\n       }\n \n   for (tree t = lvl->names; t; t = TREE_CHAIN (t))\n@@ -4838,7 +4838,7 @@ consider_binding_level (tree name, best_match <tree, tree> &bm,\n       if (tree name = DECL_NAME (d))\n \t/* Ignore internal names with spaces in them.  */\n \tif (!strchr (IDENTIFIER_POINTER (name), ' '))\n-\t  bm.consider (DECL_NAME (d));\n+\t  bm.consider (IDENTIFIER_POINTER (name));\n     }\n }\n \n@@ -4851,7 +4851,7 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind)\n {\n   gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n \n-  best_match <tree, tree> bm (name);\n+  best_match <tree, const char *> bm (name);\n \n   cp_binding_level *lvl;\n   for (lvl = scope_chain->class_bindings; lvl; lvl = lvl->level_chain)\n@@ -4874,18 +4874,19 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind)\n      the identifiers already checked.  */\n   best_macro_match bmm (name, bm.get_best_distance (), parse_in);\n   cpp_hashnode *best_macro = bmm.get_best_meaningful_candidate ();\n-  /* If a macro is the closest so far to NAME, suggest it.  */\n+  /* If a macro is the closest so far to NAME, consider it.  */\n   if (best_macro)\n-    return (const char *)best_macro->ident.str;\n+    bm.consider ((const char *)best_macro->ident.str);\n \n   /* Try the \"starts_decl_specifier_p\" keywords to detect\n      \"singed\" vs \"signed\" typos.  */\n   for (unsigned i = 0; i < num_c_common_reswords; i++)\n     {\n       const c_common_resword *resword = &c_common_reswords[i];\n \n-      if (!cp_keyword_starts_decl_specifier_p (resword->rid))\n-\tcontinue;\n+      if (kind == FUZZY_LOOKUP_TYPENAME)\n+\tif (!cp_keyword_starts_decl_specifier_p (resword->rid))\n+\t  continue;\n \n       tree resword_identifier = ridpointers [resword->rid];\n       if (!resword_identifier)\n@@ -4897,16 +4898,10 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind)\n       if (!C_IS_RESERVED_WORD (resword_identifier))\n \tcontinue;\n \n-      bm.consider (resword_identifier);\n+      bm.consider (IDENTIFIER_POINTER (resword_identifier));\n     }\n \n-  /* See if we have a good suggesion for the user.  */\n-  tree best_id = bm.get_best_meaningful_candidate ();\n-  if (best_id)\n-    return IDENTIFIER_POINTER (best_id);\n-\n-  /* No meaningful suggestion available.  */\n-  return NULL;\n+  return bm.get_best_meaningful_candidate ();\n }\n \n /* Subroutine of outer_binding."}, {"sha": "9fce4f7c78202f989c82c176c8aba45129d74888", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45", "patch": "@@ -1,3 +1,8 @@\n+2017-04-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/80177\n+\t* g++.dg/spellcheck-pr80177.C: New test case.\n+\n 2017-04-25  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/dg.exp (find-cxx-tests): New function."}, {"sha": "2ff24e8b288fbb81d87731779d7e76dd118736fc", "filename": "gcc/testsuite/g++.dg/spellcheck-pr80177.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr80177.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr80177.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr80177.C?ref=7d5dbb22ec8e0c1f104539d3fdf2afc5174a5b45", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+\n+void pr80177 ()\n+{\n+  static_assertion (1 == 0, \"1 == 0\"); // { dg-error \"3: 'static_assertion' was not declared in this scope\" }\n+  // { dg-message \"3: suggested alternative: 'static_assert'\" \"\" { target *-*-* } .-1 }\n+}"}]}