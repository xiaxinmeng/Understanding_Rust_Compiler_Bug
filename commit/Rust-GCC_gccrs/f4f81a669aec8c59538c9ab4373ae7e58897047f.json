{"sha": "f4f81a669aec8c59538c9ab4373ae7e58897047f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRmODFhNjY5YWVjOGM1OTUzOGM5YWI0MzczYWU3ZTU4ODk3MDQ3Zg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2007-02-15T04:47:23Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-02-15T04:47:23Z"}, "message": "frv.md (reload_incc, [...]): Remove invalid patterns.\n\n* config/frv/frv.md (reload_incc, reload_outcc, reload_incc_uns,\nreload_outcc_uns, reload_incc_nz, reload_outcc_nz): Remove\ninvalid patterns.\n\nFrom-SVN: r121981", "tree": {"sha": "ced52ed6f928fc969f71452ac1b8fc9b41f43ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ced52ed6f928fc969f71452ac1b8fc9b41f43ffc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4f81a669aec8c59538c9ab4373ae7e58897047f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4f81a669aec8c59538c9ab4373ae7e58897047f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4f81a669aec8c59538c9ab4373ae7e58897047f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4f81a669aec8c59538c9ab4373ae7e58897047f/comments", "author": null, "committer": null, "parents": [{"sha": "45f94ec73059ead706d765e6ab20c081dcc252d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f94ec73059ead706d765e6ab20c081dcc252d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45f94ec73059ead706d765e6ab20c081dcc252d3"}], "stats": {"total": 66, "additions": 6, "deletions": 60}, "files": [{"sha": "cff4aef72994541e6ffa811082357e3049f5b282", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4f81a669aec8c59538c9ab4373ae7e58897047f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4f81a669aec8c59538c9ab4373ae7e58897047f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4f81a669aec8c59538c9ab4373ae7e58897047f", "patch": "@@ -1,3 +1,9 @@\n+2007-02-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/frv/frv.md (reload_incc, reload_outcc, reload_incc_uns,\n+\treload_outcc_uns, reload_incc_nz, reload_outcc_nz): Remove\n+\tinvalid patterns.\n+\n 2007-02-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* tree-sra.c (instantiate_missing_elements): Canonicalize"}, {"sha": "d393204216b0ef817e2963579c73190e5a36771f", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4f81a669aec8c59538c9ab4373ae7e58897047f/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4f81a669aec8c59538c9ab4373ae7e58897047f/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=f4f81a669aec8c59538c9ab4373ae7e58897047f", "patch": "@@ -2256,26 +2256,6 @@\n   end_sequence ();\n }\")\n \n-(define_expand \"reload_incc\"\n-  [(parallel [(set (match_operand:CC 2 \"integer_register_operand\" \"=&d\")\n-\t\t   (match_operand:CC 1 \"memory_operand\" \"m\"))\n-\t      (clobber (match_scratch:CC_CCR 3 \"\"))])\n-   (parallel [(set (match_operand:CC 0 \"icc_operand\" \"=t\")\n-\t\t   (match_dup 2))\n-\t      (clobber (match_scratch:CC_CCR 4 \"\"))])]\n-  \"\"\n-  \"\")\n-\n-(define_expand \"reload_outcc\"\n-  [(parallel [(set (match_operand:CC 2 \"integer_register_operand\" \"=&d\")\n-\t\t   (match_operand:CC 1 \"icc_operand\" \"t\"))\n-\t      (clobber (match_dup 3))])\n-   (parallel [(set (match_operand:CC 0 \"memory_operand\" \"=m\")\n-\t\t   (match_dup 2))\n-\t      (clobber (match_scratch:CC_CCR 4 \"\"))])]\n-  \"\"\n-  \"operands[3] = gen_rtx_REG (CC_CCRmode, ICR_TEMP);\")\n-\n ;; Reload CC_UNSmode for unsigned integer comparisons\n ;; Use define_expand so that cse/gcse/combine can't create movcc_uns insns\n \n@@ -2343,26 +2323,6 @@\n   end_sequence ();\n }\")\n \n-(define_expand \"reload_incc_uns\"\n-  [(parallel [(set (match_operand:CC_UNS 2 \"integer_register_operand\" \"=&d\")\n-\t\t   (match_operand:CC_UNS 1 \"memory_operand\" \"m\"))\n-\t      (clobber (match_scratch:CC_CCR 3 \"\"))])\n-   (parallel [(set (match_operand:CC_UNS 0 \"icc_operand\" \"=t\")\n-\t\t   (match_dup 2))\n-\t      (clobber (match_scratch:CC_CCR 4 \"\"))])]\n-  \"\"\n-  \"\")\n-\n-(define_expand \"reload_outcc_uns\"\n-  [(parallel [(set (match_operand:CC_UNS 2 \"integer_register_operand\" \"=&d\")\n-\t\t   (match_operand:CC_UNS 1 \"icc_operand\" \"t\"))\n-\t      (clobber (match_dup 3))])\n-   (parallel [(set (match_operand:CC_UNS 0 \"memory_operand\" \"=m\")\n-\t\t   (match_dup 2))\n-\t      (clobber (match_scratch:CC_CCR 4 \"\"))])]\n-  \"\"\n-  \"operands[3] = gen_rtx_REG (CC_CCRmode, ICR_TEMP);\")\n-\n ;; Reload CC_NZmode.  This is mostly the same as the CCmode and CC_UNSmode\n ;; handling, but it uses different sequences for moving between GPRs and ICCs.\n \n@@ -2423,26 +2383,6 @@\n \t      (set (match_dup 3) (const_int 0)))]\n   \"operands[3] = simplify_gen_subreg (SImode, operands[0], CC_NZmode, 0);\")\n \n-(define_expand \"reload_incc_nz\"\n-  [(parallel [(set (match_operand:CC_NZ 2 \"integer_register_operand\" \"=&d\")\n-\t\t   (match_operand:CC_NZ 1 \"memory_operand\" \"m\"))\n-\t      (clobber (match_scratch:CC_CCR 3 \"\"))])\n-   (parallel [(set (match_operand:CC_NZ 0 \"icc_operand\" \"=t\")\n-\t\t   (match_dup 2))\n-\t      (clobber (match_scratch:CC_CCR 4 \"\"))])]\n-  \"\"\n-  \"\")\n-\n-(define_expand \"reload_outcc_nz\"\n-  [(parallel [(set (match_operand:CC_NZ 2 \"integer_register_operand\" \"=&d\")\n-\t\t   (match_operand:CC_NZ 1 \"icc_operand\" \"t\"))\n-\t      (clobber (match_dup 3))])\n-   (parallel [(set (match_operand:CC_NZ 0 \"memory_operand\" \"=m\")\n-\t\t   (match_dup 2))\n-\t      (clobber (match_scratch:CC_CCR 4 \"\"))])]\n-  \"\"\n-  \"operands[3] = gen_rtx_REG (CC_CCRmode, ICR_TEMP);\")\n-\n ;; Reload CC_FPmode for floating point comparisons\n ;; We use a define_expand here so that cse/gcse/combine can't accidentally\n ;; create movcc insns.  If this was a named define_insn, we would not be able"}]}