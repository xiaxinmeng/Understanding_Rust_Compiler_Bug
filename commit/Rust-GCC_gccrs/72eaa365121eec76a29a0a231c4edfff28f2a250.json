{"sha": "72eaa365121eec76a29a0a231c4edfff28f2a250", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJlYWEzNjUxMjFlZWM3NmEyOWEwYTIzMWM0ZWRmZmYyOGYyYTI1MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T09:24:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T09:24:33Z"}, "message": "[multiple changes]\n\n2015-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* s-valllu.adb, a-tiinau.adb, a-timoau.adb, a-ztinau.adb, a-ztmoau.adb,\n\ts-valuns.adb, s-valrea.adb, a-wtflau.adb, a-tiflau.adb, a-ztflau.adb,\n\ta-wtinau.adb, a-wtmoau.adb: Document recognition of : in place of #.\n\n2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): For aspects\n\tthat specify stream subprograms, if the prefix is a class-wide\n\ttype then the generated attribute definition clause must apply\n\tto the same class-wide type.\n\t(Default_Iterator): An iterator defined by an aspect of some\n\tcontainer type T must have a first parameter of type T, T'class,\n\tor an access to such (from code reading RM 5.5.1 (2/3)).\n\n2015-01-06  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat1drv.adb: Minor: complete previous change.\n\n2015-01-06  Olivier Hainque  <hainque@adacore.com>\n\n\t* set_targ.ads (C_Type_For): New function. Return the name of\n\ta C type supported by the back-end and suitable as a basis to\n\tconstruct the standard Ada floating point type identified by\n\tthe T parameter. This is used as a common ground to feed both\n\tttypes values and the GNAT tree nodes for the standard floating\n\tpoint types.\n\t* set_targ.adb (Long_Double_Index): The index at which \"long\n\tdouble\" gets registered in the FPT_Mode_Table. This is useful to\n\tknow whether we have a \"long double\" available at all and get at\n\tit's characteristics without having to search the FPT_Mode_Table\n\twhen we need to decide which C type should be used as the\n\tbasis for Long_Long_Float in Ada.\n\t(Register_Float_Type): Fill Long_Double_Index.\n\t(FPT_Mode_Index_For): New function. Return the index in\n\tFPT_Mode_Table that designates the entry corresponding to the\n\tprovided C type name.\n\t(FPT_Mode_Index_For): New function. Return the index in\n\tFPT_Mode_Table that designates the entry for a back-end type\n\tsuitable as a basis to construct the standard Ada floating point\n\ttype identified by the input T parameter.\n\t(elaboration code): Register_Back_End_Types unconditionally,\n\tso C_Type_For can operate regardless of -gnateT. Do it\n\tearly so we can query it for the floating point sizes, via\n\tFPT_Mode_Index_For. Initialize Float_Size, Double_Size and\n\tLong_Double_Size from the FPT_Mode_Table, as cstand will do.\n\t* cstand.adb (Create_Float_Types): Use C_Type_For to determine\n\twhich C type should be used as the basis for the construction\n\tof the Standard Ada floating point types.\n\t* get_targ.ads (Get_Float_Size, Get_Double_Size,\n\tGet_Long_Double_Size): Remove.\n\t* get_targ.adb: Likewise.\n\n2015-01-06  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_cat.adb (In_RCI_Declaration): Remove unnecessary\n\tparameter and rename to...\n\t(In_RCI_Visible_Declarations): Fix handling of private part of nested\n\tpackage.\n\t(Validate_RCI_Subprogram_Declaration): Reject illegal function\n\treturning anonymous access in RCI unit.\n\nFrom-SVN: r219233", "tree": {"sha": "26c263a3f5d23231b08326e828fe33ae2ddfe2bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26c263a3f5d23231b08326e828fe33ae2ddfe2bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72eaa365121eec76a29a0a231c4edfff28f2a250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72eaa365121eec76a29a0a231c4edfff28f2a250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72eaa365121eec76a29a0a231c4edfff28f2a250", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72eaa365121eec76a29a0a231c4edfff28f2a250/comments", "author": null, "committer": null, "parents": [{"sha": "948ed277461760a367678c9afbd55e45eda8707e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948ed277461760a367678c9afbd55e45eda8707e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948ed277461760a367678c9afbd55e45eda8707e"}], "stats": {"total": 501, "additions": 346, "deletions": 155}, "files": [{"sha": "695747b781792812a8734fc79a958917ab7ad5d9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -1,3 +1,66 @@\n+2015-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-valllu.adb, a-tiinau.adb, a-timoau.adb, a-ztinau.adb, a-ztmoau.adb,\n+\ts-valuns.adb, s-valrea.adb, a-wtflau.adb, a-tiflau.adb, a-ztflau.adb,\n+\ta-wtinau.adb, a-wtmoau.adb: Document recognition of : in place of #.\n+\n+2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): For aspects\n+\tthat specify stream subprograms, if the prefix is a class-wide\n+\ttype then the generated attribute definition clause must apply\n+\tto the same class-wide type.\n+\t(Default_Iterator): An iterator defined by an aspect of some\n+\tcontainer type T must have a first parameter of type T, T'class,\n+\tor an access to such (from code reading RM 5.5.1 (2/3)).\n+\n+2015-01-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb: Minor: complete previous change.\n+\n+2015-01-06  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* set_targ.ads (C_Type_For): New function. Return the name of\n+\ta C type supported by the back-end and suitable as a basis to\n+\tconstruct the standard Ada floating point type identified by\n+\tthe T parameter. This is used as a common ground to feed both\n+\tttypes values and the GNAT tree nodes for the standard floating\n+\tpoint types.\n+\t* set_targ.adb (Long_Double_Index): The index at which \"long\n+\tdouble\" gets registered in the FPT_Mode_Table. This is useful to\n+\tknow whether we have a \"long double\" available at all and get at\n+\tit's characteristics without having to search the FPT_Mode_Table\n+\twhen we need to decide which C type should be used as the\n+\tbasis for Long_Long_Float in Ada.\n+\t(Register_Float_Type): Fill Long_Double_Index.\n+\t(FPT_Mode_Index_For): New function. Return the index in\n+\tFPT_Mode_Table that designates the entry corresponding to the\n+\tprovided C type name.\n+\t(FPT_Mode_Index_For): New function. Return the index in\n+\tFPT_Mode_Table that designates the entry for a back-end type\n+\tsuitable as a basis to construct the standard Ada floating point\n+\ttype identified by the input T parameter.\n+\t(elaboration code): Register_Back_End_Types unconditionally,\n+\tso C_Type_For can operate regardless of -gnateT. Do it\n+\tearly so we can query it for the floating point sizes, via\n+\tFPT_Mode_Index_For. Initialize Float_Size, Double_Size and\n+\tLong_Double_Size from the FPT_Mode_Table, as cstand will do.\n+\t* cstand.adb (Create_Float_Types): Use C_Type_For to determine\n+\twhich C type should be used as the basis for the construction\n+\tof the Standard Ada floating point types.\n+\t* get_targ.ads (Get_Float_Size, Get_Double_Size,\n+\tGet_Long_Double_Size): Remove.\n+\t* get_targ.adb: Likewise.\n+\n+2015-01-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_cat.adb (In_RCI_Declaration): Remove unnecessary\n+\tparameter and rename to...\n+\t(In_RCI_Visible_Declarations): Fix handling of private part of nested\n+\tpackage.\n+\t(Validate_RCI_Subprogram_Declaration): Reject illegal function\n+\treturning anonymous access in RCI unit.\n+\n 2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (New_Overloaded_Entity): In GNATprove mode, a"}, {"sha": "c7115f6576889fe7c6951eb436d6e17910651c7a", "filename": "gcc/ada/a-tiflau.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-tiflau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-tiflau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tiflau.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -124,7 +124,8 @@ package body Ada.Text_IO.Float_Aux is\n             return;\n          end if;\n \n-         --  Based cases\n+         --  Based cases. We recognize either the standard '#' or the\n+         --  allowed alternative replacement ':' (see RM J.2(3)).\n \n          Load (File, Buf, Ptr, '#', ':', Loaded);\n "}, {"sha": "5d08dc09f7c4ed31819cc3df6c55bda5d7e71a7d", "filename": "gcc/ada/a-tiinau.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-tiinau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-tiinau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tiinau.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -166,7 +166,8 @@ package body Ada.Text_IO.Integer_Aux is\n \n       if Loaded then\n \n-         --  Deal with based literal (note : is ok replacement for #)\n+         --  Deal with based literal. We recognize either the standard '#' or\n+         --  the allowed alternative replacement ':' (see RM J.2(3)).\n \n          Load (File, Buf, Ptr, '#', ':', Loaded);\n "}, {"sha": "2fceb8a96ac49c8f38b452096c0f13d5b5da9d21", "filename": "gcc/ada/a-timoau.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-timoau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-timoau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-timoau.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -173,6 +173,10 @@ package body Ada.Text_IO.Modular_Aux is\n       Load_Digits (File, Buf, Ptr, Loaded);\n \n       if Loaded then\n+\n+         --  Deal with based case. We recognize either the standard '#' or the\n+         --  allowed alternative replacement ':' (see RM J.2(3)).\n+\n          Load (File, Buf, Ptr, '#', ':', Loaded);\n \n          if Loaded then"}, {"sha": "718ec660bfaf305820d4eb9ca94e996a2bfb1f4e", "filename": "gcc/ada/a-wtflau.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-wtflau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-wtflau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtflau.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -124,7 +124,8 @@ package body Ada.Wide_Text_IO.Float_Aux is\n             return;\n          end if;\n \n-         --  Based cases\n+         --  Deal with based case. We recognize either the standard '#' or the\n+         --  allowed alternative replacement ':' (see RM J.2(3)).\n \n          Load (File, Buf, Ptr, '#', ':', Loaded);\n "}, {"sha": "8b4b1e65a1e73ca4210536adc215a5b41bcdd357", "filename": "gcc/ada/a-wtinau.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-wtinau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-wtinau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtinau.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -165,6 +165,10 @@ package body Ada.Wide_Text_IO.Integer_Aux is\n       Load_Digits (File, Buf, Ptr, Loaded);\n \n       if Loaded then\n+\n+         --  Deal with based case. We recognize either the standard '#' or the\n+         --  allowed alternative replacement ':' (see RM J.2(3)).\n+\n          Load (File, Buf, Ptr, '#', ':', Loaded);\n \n          if Loaded then"}, {"sha": "25c72ecfcd76df528418dbb81266289f1e5d7989", "filename": "gcc/ada/a-wtmoau.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-wtmoau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-wtmoau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtmoau.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -173,6 +173,10 @@ package body Ada.Wide_Text_IO.Modular_Aux is\n       Load_Digits (File, Buf, Ptr, Loaded);\n \n       if Loaded then\n+\n+         --  Deal with based case. We recognize either the standard '#' or the\n+         --  allowed alternative replacement ':' (see RM J.2(3)).\n+\n          Load (File, Buf, Ptr, '#', ':', Loaded);\n \n          if Loaded then"}, {"sha": "55dd2da548458f6bed0747a548d94bc6b9ac2cbf", "filename": "gcc/ada/a-ztflau.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-ztflau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-ztflau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztflau.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -124,7 +124,8 @@ package body Ada.Wide_Wide_Text_IO.Float_Aux is\n             return;\n          end if;\n \n-         --  Based cases\n+         --  Deal with based case. We recognize either the standard '#' or the\n+         --  allowed alternative replacement ':' (see RM J.2(3)).\n \n          Load (File, Buf, Ptr, '#', ':', Loaded);\n "}, {"sha": "735e51fc4e3b4b465bf397fd72ee8c850fd98d84", "filename": "gcc/ada/a-ztinau.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-ztinau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-ztinau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztinau.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -165,6 +165,10 @@ package body Ada.Wide_Wide_Text_IO.Integer_Aux is\n       Load_Digits (File, Buf, Ptr, Loaded);\n \n       if Loaded then\n+\n+         --  Deal with based case. We recognize either the standard '#' or the\n+         --  allowed alternative replacement ':' (see RM J.2(3)).\n+\n          Load (File, Buf, Ptr, '#', ':', Loaded);\n \n          if Loaded then"}, {"sha": "dbcf37808eec38584f1ab21cbff8bfb01a88acd5", "filename": "gcc/ada/a-ztmoau.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-ztmoau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fa-ztmoau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztmoau.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -173,6 +173,10 @@ package body Ada.Wide_Wide_Text_IO.Modular_Aux is\n       Load_Digits (File, Buf, Ptr, Loaded);\n \n       if Loaded then\n+\n+         --  Deal with based case. We recognize either the standard '#' or the\n+         --  allowed alternative replacement ':' (see RM J.2(3)).\n+\n          Load (File, Buf, Ptr, '#', ':', Loaded);\n \n          if Loaded then"}, {"sha": "a86397cb9ba1200aa022f1e6aab4dfd9f7ce90a8", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -504,45 +504,26 @@ package body CStand is\n \n          Copy_Float_Type\n            (Standard_Short_Float,\n-            Find_Back_End_Float_Type (\"float\"));\n+            Find_Back_End_Float_Type (C_Type_For (S_Short_Float)));\n          Set_Is_Implementation_Defined (Standard_Short_Float);\n \n          Copy_Float_Type (Standard_Float, Standard_Short_Float);\n \n-         Copy_Float_Type (Standard_Long_Float,\n-           Find_Back_End_Float_Type (\"double\"));\n+         Copy_Float_Type\n+           (Standard_Long_Float,\n+            Find_Back_End_Float_Type (C_Type_For (S_Long_Float)));\n+\n+         Copy_Float_Type\n+           (Standard_Long_Long_Float,\n+            Find_Back_End_Float_Type (C_Type_For (S_Long_Long_Float)));\n+         Set_Is_Implementation_Defined (Standard_Long_Long_Float);\n \n          Predefined_Float_Types := New_Elmt_List;\n+\n          Append_Elmt (Standard_Short_Float, Predefined_Float_Types);\n          Append_Elmt (Standard_Float, Predefined_Float_Types);\n          Append_Elmt (Standard_Long_Float, Predefined_Float_Types);\n-\n-         --  ??? For now, we don't have a good way to tell the widest float\n-         --  type with hardware support. Basically, GCC knows the size of that\n-         --  type, but on x86-64 there often are two or three 128-bit types,\n-         --  one double extended that has 18 decimal digits, a 128-bit quad\n-         --  precision type with 33 digits and possibly a 128-bit decimal float\n-         --  type with 34 digits. As a workaround, we define Long_Long_Float as\n-         --  C's \"long double\" if that type exists and has at most 18 digits,\n-         --  or otherwise the same as Long_Float.\n-\n-         declare\n-            Max_HW_Digs : constant := 18;\n-            --  Maximum hardware digits supported\n-\n-            LLF : Entity_Id := Find_Back_End_Float_Type (\"long double\");\n-            --  Entity for long double type\n-\n-         begin\n-            if No (LLF) or else Digits_Value (LLF) > Max_HW_Digs then\n-               LLF := Standard_Long_Float;\n-            end if;\n-\n-            Set_Is_Implementation_Defined (Standard_Long_Long_Float);\n-            Copy_Float_Type (Standard_Long_Long_Float, LLF);\n-\n-            Append_Elmt (Standard_Long_Long_Float, Predefined_Float_Types);\n-         end;\n+         Append_Elmt (Standard_Long_Long_Float, Predefined_Float_Types);\n \n          --  Any other back end types are appended at the end of the list of\n          --  predefined float types, and will only be selected if the none of"}, {"sha": "e1dfb26ff2d2728b7f3d053e771a312c3f3dcfbb", "filename": "gcc/ada/get_targ.adb", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fget_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fget_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_targ.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -126,42 +126,6 @@ package body Get_Targ is\n       return C_Get_Long_Long_Size;\n    end Get_Long_Long_Size;\n \n-   --------------------\n-   -- Get_Float_Size --\n-   --------------------\n-\n-   function Get_Float_Size return Pos is\n-      function C_Get_Float_Size return Pos;\n-      pragma Import (C, C_Get_Float_Size,\n-                        \"get_target_float_size\");\n-   begin\n-      return C_Get_Float_Size;\n-   end Get_Float_Size;\n-\n-   ---------------------\n-   -- Get_Double_Size --\n-   ---------------------\n-\n-   function Get_Double_Size return Pos is\n-      function C_Get_Double_Size return Pos;\n-      pragma Import (C, C_Get_Double_Size,\n-                        \"get_target_double_size\");\n-   begin\n-      return C_Get_Double_Size;\n-   end Get_Double_Size;\n-\n-   --------------------------\n-   -- Get_Long_Double_Size --\n-   --------------------------\n-\n-   function Get_Long_Double_Size return Pos is\n-      function C_Get_Long_Double_Size return Pos;\n-      pragma Import (C, C_Get_Long_Double_Size,\n-                        \"get_target_long_double_size\");\n-   begin\n-      return C_Get_Long_Double_Size;\n-   end Get_Long_Double_Size;\n-\n    ----------------------\n    -- Get_Pointer_Size --\n    ----------------------"}, {"sha": "62333b9dfea40093617562d7b9f90503da7e27f5", "filename": "gcc/ada/get_targ.ads", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fget_targ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fget_targ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_targ.ads?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -68,15 +68,6 @@ package Get_Targ is\n    function Get_Long_Long_Size             return Pos;\n    --  Size of Standard.Long_Long_Integer\n \n-   function Get_Float_Size                 return Pos;\n-   --  Size of Standard.Float\n-\n-   function Get_Double_Size                return Pos;\n-   --  Size of Standard.Long_Float\n-\n-   function Get_Long_Double_Size           return Pos;\n-   --  Size of Standard.Long_Long_Float\n-\n    function Get_Pointer_Size               return Pos;\n    --  Size of System.Address\n "}, {"sha": "adb145c744552da2e2fa59f5f3d42521f872eb38", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -182,10 +182,11 @@ procedure Gnat1drv is\n \n       if CodePeer_Mode then\n \n-         --  Turn off gnatprove mode (if set via e.g. -gnatd.F), not compatible\n-         --  with CodePeer mode.\n+         --  Turn off gnatprove mode (which can be set via e.g. -gnatd.F), not\n+         --  compatible with CodePeer mode.\n \n          GNATprove_Mode := False;\n+         Debug_Flag_Dot_FF := False;\n \n          --  Turn off inlining, confuses CodePeer output and gains nothing\n "}, {"sha": "3315b1d7c7ff9fe12a08b8c815ccca5be11ae2f4", "filename": "gcc/ada/s-valllu.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fs-valllu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fs-valllu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valllu.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -119,9 +119,10 @@ package body System.Val_LLU is\n \n       Ptr.all := P;\n \n-      --  Deal with based case\n+      --  Deal with based case. We recognize either the standard '#' or the\n+      --  allowed alternative replacement ':' (see RM J.2(3)).\n \n-      if P < Max and then (Str (P) = ':' or else Str (P) = '#') then\n+      if P < Max and then (Str (P) = '#' or else Str (P) = ':') then\n          Base_Char := Str (P);\n          P := P + 1;\n          Base := Uval;"}, {"sha": "5d6960df1d503d211b81e7de2804fa9256c07680", "filename": "gcc/ada/s-valrea.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valrea.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -183,9 +183,10 @@ package body System.Val_Real is\n          Bad_Value (Str);\n       end if;\n \n-      --  Deal with based case\n+      --  Deal with based case. We reognize either the standard '#' or the\n+      --  allowed alternative replacement ':' (see RM J.2(3)).\n \n-      if P < Max and then (Str (P) = ':' or else Str (P) = '#') then\n+      if P < Max and then (Str (P) = '#' or else Str (P) = ':') then\n          declare\n             Base_Char : constant Character := Str (P);\n             Digit     : Natural;"}, {"sha": "44754cf39b9540e2af4e1c19e7a93587984d24af", "filename": "gcc/ada/s-valuns.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fs-valuns.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fs-valuns.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuns.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -119,9 +119,10 @@ package body System.Val_Uns is\n \n       Ptr.all := P;\n \n-      --  Deal with based case\n+      --  Deal with based case. We recognize either the standard '#' or the\n+      --  allowed alternative replacement ':' (see RM J.2(3)).\n \n-      if P < Max and then (Str (P) = ':' or else Str (P) = '#') then\n+      if P < Max and then (Str (P) = '#' or else Str (P) = ':') then\n          Base_Char := Str (P);\n          P := P + 1;\n          Base := Uval;"}, {"sha": "e03d00ebfc8fa252532228b6ac841a94c4bd564c", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 43, "deletions": 29, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -86,10 +86,10 @@ package body Sem_Cat is\n    --  Return True if the entity or one of its subcomponents does not support\n    --  external streaming.\n \n-   function In_RCI_Declaration (N : Node_Id) return Boolean;\n-   --  Determines if a declaration is  within the visible part of a Remote\n-   --  Call Interface compilation unit, for semantic checking purposes only\n-   --  (returns false within an instance and within the package body).\n+   function In_RCI_Visible_Declarations return Boolean;\n+   --  Determines if the visible part of a remote call interface library unit\n+   --  is being compiled, for semantic checking purposes (returns False within\n+   --  an instance and within the package body).\n \n    function In_RT_Declaration return Boolean;\n    --  Determines if current scope is within the declaration of a Remote Types\n@@ -544,30 +544,39 @@ package body Sem_Cat is\n       return Is_Pure (Current_Scope);\n    end In_Pure_Unit;\n \n-   ------------------------\n-   -- In_RCI_Declaration --\n-   ------------------------\n+   ---------------------------------\n+   -- In_RCI_Visible_Declarations --\n+   ---------------------------------\n \n-   function In_RCI_Declaration (N : Node_Id) return Boolean is\n-      Unit_Entity : constant Entity_Id := Current_Scope;\n+   function In_RCI_Visible_Declarations return Boolean is\n+      Unit_Entity : Entity_Id := Current_Scope;\n       Unit_Kind   : constant Node_Kind :=\n                       Nkind (Unit (Cunit (Current_Sem_Unit)));\n \n    begin\n-      --  There are no restrictions on the private part or body\n-      --  of an RCI unit.\n+      --  There are no restrictions on the private part or body of an RCI unit\n \n-      return Is_Remote_Call_Interface (Unit_Entity)\n+      if not (Is_Remote_Call_Interface (Unit_Entity)\n         and then Is_Package_Or_Generic_Package (Unit_Entity)\n         and then Unit_Kind /= N_Package_Body\n-        and then List_Containing (N) =\n-                   Visible_Declarations (Package_Specification (Unit_Entity))\n-        and then not In_Package_Body (Unit_Entity)\n-        and then not In_Instance;\n+        and then not In_Instance)\n+      then\n+         return False;\n+      end if;\n+\n+      while Unit_Entity /= Standard_Standard loop\n+         if In_Private_Part (Unit_Entity) then\n+            return False;\n+         end if;\n+\n+         Unit_Entity := Scope (Unit_Entity);\n+      end loop;\n+\n+      --  Here if in RCI declaration, and not in private part of any open\n+      --  scope.\n \n-      --  What about the case of a nested package in the visible part???\n-      --  This case is missed by the List_Containing check above???\n-   end In_RCI_Declaration;\n+      return True;\n+   end In_RCI_Visible_Declarations;\n \n    -----------------------\n    -- In_RT_Declaration --\n@@ -1371,7 +1380,7 @@ package body Sem_Cat is\n       --  The visible part of an RCI library unit must not contain the\n       --  declaration of a variable (RM E.1.3(9))\n \n-      elsif In_RCI_Declaration (N) then\n+      elsif In_RCI_Visible_Declarations then\n          Error_Msg_N (\"visible variable not allowed in 'R'C'I unit\", N);\n \n       --  The visible part of a Shared Passive library unit must not contain\n@@ -1609,7 +1618,7 @@ package body Sem_Cat is\n       --    1. from Analyze_Subprogram_Declaration.\n       --    2. from Validate_Object_Declaration (access to subprogram).\n \n-      if not (Comes_From_Source (N) and then In_RCI_Declaration (N)) then\n+      if not (Comes_From_Source (N) and then In_RCI_Visible_Declarations) then\n          return;\n       end if;\n \n@@ -1652,12 +1661,10 @@ package body Sem_Cat is\n \n                --  Report error only if declaration is in source program\n \n-               if Comes_From_Source\n-                 (Defining_Entity (Specification (N)))\n-               then\n+               if Comes_From_Source (Id) then\n                   Error_Msg_N\n                     (\"subprogram in 'R'C'I unit cannot have access parameter\",\n-                      Error_Node);\n+                     Error_Node);\n                end if;\n \n             --  For a limited private type parameter, we check only the private\n@@ -1680,8 +1687,15 @@ package body Sem_Cat is\n \n             Next (Param_Spec);\n          end loop;\n+      end if;\n \n-         --  No check on return type???\n+      if Ekind (Id) = E_Function\n+        and then Ekind (Etype (Id)) = E_Anonymous_Access_Type\n+        and then Comes_From_Source (Id)\n+      then\n+         Error_Msg_N\n+           (\"function in 'R'C'I unit cannot have access result\",\n+             Error_Node);\n       end if;\n    end Validate_RCI_Subprogram_Declaration;\n \n@@ -1698,8 +1712,8 @@ package body Sem_Cat is\n       --  the given node is N_Access_To_Object_Definition.\n \n       if not Comes_From_Source (T)\n-        or else (not In_RCI_Declaration (Parent (T))\n-                  and then not In_RT_Declaration)\n+        or else (not In_RCI_Visible_Declarations\n+                   and then not In_RT_Declaration)\n       then\n          return;\n       end if;\n@@ -1721,7 +1735,7 @@ package body Sem_Cat is\n       if Ekind (T) /= E_General_Access_Type\n         or else not Is_Class_Wide_Type (Designated_Type (T))\n       then\n-         if In_RCI_Declaration (Parent (T)) then\n+         if In_RCI_Visible_Declarations then\n             Error_Msg_N\n               (\"error in access type in Remote_Call_Interface unit\", T);\n          else"}, {"sha": "f489cb8d814b71d57e95ac8f821e28664d8b7864", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 43, "deletions": 13, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -1699,15 +1699,26 @@ package body Sem_Ch13 is\n                   --  illegal specification of this aspect for a subtype now,\n                   --  to prevent malformed rep_item chains.\n \n-                  if (A_Id = Aspect_Input  or else\n-                      A_Id = Aspect_Output or else\n-                      A_Id = Aspect_Read   or else\n-                      A_Id = Aspect_Write)\n-                    and not Is_First_Subtype (E)\n+                  if A_Id = Aspect_Input  or else\n+                     A_Id = Aspect_Output or else\n+                     A_Id = Aspect_Read   or else\n+                     A_Id = Aspect_Write\n                   then\n-                     Error_Msg_N\n-                       (\"local name must be a first subtype\", Aspect);\n-                     goto Continue;\n+                     if not Is_First_Subtype (E) then\n+                        Error_Msg_N\n+                          (\"local name must be a first subtype\", Aspect);\n+                        goto Continue;\n+\n+                     --  If stream aspect applies to the class-wide type,\n+                     --  the generated attribute definition applies to the\n+                     --  class-wide type as well.\n+\n+                     elsif Class_Present (Aspect) then\n+                        Ent :=\n+                          Make_Attribute_Reference (Loc,\n+                            Prefix         => Ent,\n+                            Attribute_Name => Name_Class);\n+                     end if;\n                   end if;\n \n                   --  Construct the attribute definition clause\n@@ -3556,6 +3567,8 @@ package body Sem_Ch13 is\n             if  Base_Type (Typ) = Base_Type (Ent)\n               or else (Is_Class_Wide_Type (Typ)\n                         and then Typ = Class_Wide_Type (Base_Type (Ent)))\n+              or else (Is_Class_Wide_Type (Ent)\n+                        and then Ent = Class_Wide_Type (Base_Type (Typ)))\n             then\n                null;\n             else\n@@ -4794,6 +4807,7 @@ package body Sem_Ch13 is\n \n          when Attribute_Default_Iterator =>  Default_Iterator : declare\n             Func : Entity_Id;\n+            Typ  : Entity_Id;\n \n          begin\n             if not Is_Tagged_Type (U_Ent) then\n@@ -4813,9 +4827,26 @@ package body Sem_Ch13 is\n                Func := Entity (Expr);\n             end if;\n \n-            if No (First_Formal (Func))\n-              or else Etype (First_Formal (Func)) /= U_Ent\n+            --  The type of the first parameter must be T, T'class, or a\n+            --  corresponding access type (5.5.1 (8/3)\n+\n+            if No (First_Formal (Func)) then\n+               Typ := Empty;\n+            else\n+               Typ := Etype (First_Formal (Func));\n+            end if;\n+\n+            if Typ = U_Ent\n+              or else Typ = Class_Wide_Type (U_Ent)\n+              or else (Is_Access_Type (Typ)\n+                        and then Designated_Type (Typ) = U_Ent)\n+              or else (Is_Access_Type (Typ)\n+                        and then Designated_Type (Typ) =\n+                                          Class_Wide_Type (U_Ent))\n             then\n+               null;\n+\n+            else\n                Error_Msg_NE\n                  (\"Default Iterator must be a primitive of&\", Func, U_Ent);\n             end if;\n@@ -4832,9 +4863,8 @@ package body Sem_Ch13 is\n \n             if From_Aspect_Specification (N) then\n                if not Is_Task_Type (U_Ent) then\n-                  Error_Msg_N (\"Dispatching_Domain can only be defined\" &\n-                               \"for task\",\n-                               Nam);\n+                  Error_Msg_N\n+                    (\"Dispatching_Domain can only be defined for task\", Nam);\n \n                elsif Duplicate_Clause then\n                   null;"}, {"sha": "0f063e52bb844bb4fb3b418c1897a8beae9b2029", "filename": "gcc/ada/set_targ.adb", "status": "modified", "additions": 125, "deletions": 15, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fset_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fset_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.adb?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -159,8 +159,64 @@ package body Set_Targ is\n    --  floating-point type, and Precision, Size and Alignment are the precision\n    --  size and alignment in bits.\n    --\n-   --  So to summarize, the only types that are actually registered have Digs\n-   --  non-zero, Complex zero (false), and Count zero (not a vector).\n+   --  The only types that are actually registered have Digs non-zero, Complex\n+   --  zero (false), and Count zero (not a vector). The Long_Double_Index\n+   --  variable below is updated to indicate the index at which a \"long double\"\n+   --  type can be found if it gets registered at all.\n+\n+   Long_Double_Index : Integer := -1;\n+   --  Once all the back-end types have been registered, the index in\n+   --  FPT_Mode_Table at which \"long double\" can be found, if anywhere. A\n+   --  negative value means that no \"long double\" has been registered. This\n+   --  is useful to know whether we have a \"long double\" available at all and\n+   --  get at it's characteristics without having to search the FPT_Mode_Table\n+   --  when we need to decide which C type should be used as the basis for\n+   --  Long_Long_Float in Ada.\n+\n+   function FPT_Mode_Index_For (Name : String) return Natural;\n+   --  Return the index in FPT_Mode_Table that designates the entry\n+   --  corresponding to the C type named Name. Raise Program_Error if\n+   --  there is no such entry.\n+\n+   function FPT_Mode_Index_For (T : S_Float_Types) return Natural;\n+   --  Return the index in FPT_Mode_Table that designates the entry for\n+   --  a back-end type suitable as a basis to construct the standard Ada\n+   --  floating point type identified by T.\n+\n+   ----------------\n+   -- C_Type_For --\n+   ----------------\n+\n+   function C_Type_For (T : S_Float_Types) return String is\n+\n+      --  ??? For now, we don't have a good way to tell the widest float\n+      --  type with hardware support. Basically, GCC knows the size of that\n+      --  type, but on x86-64 there often are two or three 128-bit types,\n+      --  one double extended that has 18 decimal digits, a 128-bit quad\n+      --  precision type with 33 digits and possibly a 128-bit decimal float\n+      --  type with 34 digits. As a workaround, we define Long_Long_Float as\n+      --  C's \"long double\" if that type exists and has at most 18 digits,\n+      --  or otherwise the same as Long_Float.\n+\n+      Max_HW_Digs : constant := 18;\n+      --  Maximum hardware digits supported\n+\n+   begin\n+      case T is\n+         when S_Short_Float | S_Float =>\n+            return \"float\";\n+         when S_Long_Float =>\n+            return \"double\";\n+         when S_Long_Long_Float =>\n+            if Long_Double_Index >= 0\n+              and then FPT_Mode_Table (Long_Double_Index).DIGS <= Max_HW_Digs\n+            then\n+               return \"long double\";\n+            else\n+               return \"double\";\n+            end if;\n+      end case;\n+   end C_Type_For;\n \n    ----------\n    -- Fail --\n@@ -169,12 +225,33 @@ package body Set_Targ is\n    procedure Fail (E : String) is\n       E_Fatal : constant := 4;\n       --  Code for fatal error\n+\n    begin\n       Write_Str (E);\n       Write_Eol;\n       OS_Exit (E_Fatal);\n    end Fail;\n \n+   ------------------------\n+   -- FPT_Mode_Index_For --\n+   ------------------------\n+\n+   function FPT_Mode_Index_For (Name : String) return Natural is\n+   begin\n+      for J in FPT_Mode_Table'First .. Num_FPT_Modes loop\n+         if FPT_Mode_Table (J).NAME.all = Name then\n+            return J;\n+         end if;\n+      end loop;\n+\n+      raise Program_Error;\n+   end FPT_Mode_Index_For;\n+\n+   function FPT_Mode_Index_For (T : S_Float_Types) return Natural is\n+   begin\n+      return FPT_Mode_Index_For (C_Type_For (T));\n+   end FPT_Mode_Index_For;\n+\n    -------------------------\n    -- Register_Float_Type --\n    -------------------------\n@@ -281,14 +358,23 @@ package body Set_Targ is\n       --  Acquire entry if non-vector non-complex fpt type (digits non-zero)\n \n       if Digs > 0 and then not Complex and then Count = 0 then\n-         Num_FPT_Modes := Num_FPT_Modes + 1;\n-         FPT_Mode_Table (Num_FPT_Modes) :=\n-           (NAME      => new String'(T (1 .. Last)),\n-            DIGS      => Digs,\n-            FLOAT_REP => Float_Rep,\n-            PRECISION => Precision,\n-            SIZE      => Size,\n-            ALIGNMENT => Alignment);\n+\n+         declare\n+            This_Name : constant String := T (1 .. Last);\n+         begin\n+            Num_FPT_Modes := Num_FPT_Modes + 1;\n+            FPT_Mode_Table (Num_FPT_Modes) :=\n+              (NAME      => new String'(This_Name),\n+               DIGS      => Digs,\n+               FLOAT_REP => Float_Rep,\n+               PRECISION => Precision,\n+               SIZE      => Size,\n+               ALIGNMENT => Alignment);\n+\n+            if Long_Double_Index < 0 and then This_Name = \"long double\" then\n+               Long_Double_Index := Num_FPT_Modes;\n+            end if;\n+         end;\n       end if;\n    end Register_Float_Type;\n \n@@ -801,6 +887,13 @@ begin\n       end loop;\n    end;\n \n+   --  Register floating-point types from the back end. We do this\n+   --  unconditionally so C_Type_For may be called regardless of -gnateT, for\n+   --  which cstand has a use, and early so we can use FPT_Mode_Table below to\n+   --  compute some FP attributes.\n+\n+   Register_Back_End_Types (Register_Float_Type'Access);\n+\n    --  Case of reading the target dependent values from file\n \n    --  This is bit more complex than might be expected, because it has to be\n@@ -832,11 +925,8 @@ begin\n             Char_Size                  := Get_Char_Size;\n             Double_Float_Alignment     := Get_Double_Float_Alignment;\n             Double_Scalar_Alignment    := Get_Double_Scalar_Alignment;\n-            Double_Size                := Get_Double_Size;\n-            Float_Size                 := Get_Float_Size;\n             Float_Words_BE             := Get_Float_Words_BE;\n             Int_Size                   := Get_Int_Size;\n-            Long_Double_Size           := Get_Long_Double_Size;\n             Long_Long_Size             := Get_Long_Long_Size;\n             Long_Size                  := Get_Long_Size;\n             Maximum_Alignment          := Get_Maximum_Alignment;\n@@ -849,9 +939,29 @@ begin\n             Wchar_T_Size               := Get_Wchar_T_Size;\n             Words_BE                   := Get_Words_BE;\n \n-            --  Register floating-point types from the back end\n+            --  Compute the sizes of floating point types\n+\n+            declare\n+               T : FPT_Mode_Entry renames\n+                 FPT_Mode_Table (FPT_Mode_Index_For (S_Float));\n+            begin\n+               Float_Size := Int (T.SIZE);\n+            end;\n+\n+            declare\n+               T : FPT_Mode_Entry renames\n+                 FPT_Mode_Table (FPT_Mode_Index_For (S_Long_Float));\n+            begin\n+               Double_Size := Int (T.SIZE);\n+            end;\n+\n+            declare\n+               T : FPT_Mode_Entry renames\n+                 FPT_Mode_Table (FPT_Mode_Index_For (S_Long_Long_Float));\n+            begin\n+               Long_Double_Size := Int (T.SIZE);\n+            end;\n \n-            Register_Back_End_Types (Register_Float_Type'Access);\n          end if;\n       end;\n    end if;"}, {"sha": "f3eccfbfa7e444e1a90b7dc7a1dede51743c97e7", "filename": "gcc/ada/set_targ.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fset_targ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa365121eec76a29a0a231c4edfff28f2a250/gcc%2Fada%2Fset_targ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.ads?ref=72eaa365121eec76a29a0a231c4edfff28f2a250", "patch": "@@ -37,6 +37,7 @@\n --  size of wchar_t, since this corresponds to expected Ada usage.\n \n with Einfo; use Einfo;\n+with Stand; use Stand;\n with Types; use Types;\n \n package Set_Targ is\n@@ -107,6 +108,15 @@ package Set_Targ is\n    -- Subprograms --\n    -----------------\n \n+   subtype S_Float_Types is\n+     Standard_Entity_Type range S_Short_Float .. S_Long_Long_Float;\n+\n+   function C_Type_For (T : S_Float_Types) return String;\n+   --  Return the name of a C type supported by the back-end and suitable as\n+   --  a basis to construct the standard Ada floating point type identified by\n+   --  T. This is used as a common ground to feed both ttypes values and the\n+   --  GNAT tree nodes for the standard floating point types.\n+\n    procedure Write_Target_Dependent_Values;\n    --  This routine writes the file target.atp in the current directory with\n    --  the values of the global target parameters as listed above, and as set"}]}