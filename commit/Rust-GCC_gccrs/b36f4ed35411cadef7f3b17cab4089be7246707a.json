{"sha": "b36f4ed35411cadef7f3b17cab4089be7246707a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM2ZjRlZDM1NDExY2FkZWY3ZjNiMTdjYWI0MDg5YmU3MjQ2NzA3YQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "2000-04-25T21:10:26Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-04-25T21:10:26Z"}, "message": "Define FUNCTION_ATTRIBUTE_INLINABLE_P, a target macro to allow functions with\ntarget specific attributes to be inlined.\n\nFrom-SVN: r33421", "tree": {"sha": "66352391a75daac1edb0b4115f2fae562f8b2e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66352391a75daac1edb0b4115f2fae562f8b2e8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b36f4ed35411cadef7f3b17cab4089be7246707a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36f4ed35411cadef7f3b17cab4089be7246707a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b36f4ed35411cadef7f3b17cab4089be7246707a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36f4ed35411cadef7f3b17cab4089be7246707a/comments", "author": null, "committer": null, "parents": [{"sha": "119d24d17a770d4a535c5da3897469d1c7dba354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119d24d17a770d4a535c5da3897469d1c7dba354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/119d24d17a770d4a535c5da3897469d1c7dba354"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "a20f78b4185eba48d40eedfd7eb38bf15cecee2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36f4ed35411cadef7f3b17cab4089be7246707a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36f4ed35411cadef7f3b17cab4089be7246707a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b36f4ed35411cadef7f3b17cab4089be7246707a", "patch": "@@ -1,3 +1,16 @@\n+2000-04-25  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* integrate.c (FUNCTION_ATTRIBUTE_INLINABLE_P): If not\n+\tdefined, define to return zero.\n+\t(function_cannot_inline_p): If a function has any target\n+\tspecific attributes, then use the macro\n+\tFUNCTION_ATTRIBUTE_INLINABLE_P to allow the target to decide\n+\twhether it can be inlined.  If it cannot, issue a suitable\n+\texplanation.\n+\n+\t* tm.texi: Add a new node 'Inlining' to document the new macro\n+\tFUNCTION_ATTRIBUTE_INLINABLE_P. \n+\n 2000-04-25  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpplib.h (struct cpp_buffer): Add 'mapped' flag; fix"}, {"sha": "6fa0be17fc73e59dc496ba7f3e3e008fba5ccff4", "filename": "gcc/integrate.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36f4ed35411cadef7f3b17cab4089be7246707a/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36f4ed35411cadef7f3b17cab4089be7246707a/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=b36f4ed35411cadef7f3b17cab4089be7246707a", "patch": "@@ -62,6 +62,12 @@ extern struct obstack *function_maybepermanent_obstack;\n    ? (1 + (3 * list_length (DECL_ARGUMENTS (DECL))) / 2) \\\n    : (8 * (8 + list_length (DECL_ARGUMENTS (DECL)))))\n #endif\n+\n+/* Decide whether a function with a target specific attribute \n+   attached can be inlined.  By default we disallow this.  */\n+#ifndef FUNCTION_ATTRIBUTE_INLINABLE_P\n+#define FUNCTION_ATTRIBUTE_INLINABLE_P(FNDECL) 0\n+#endif\n \f\n static rtvec initialize_for_inline\tPARAMS ((tree));\n static void note_modified_parmregs\tPARAMS ((rtx, rtx, void *));\n@@ -240,7 +246,14 @@ function_cannot_inline_p (fndecl)\n   if (result && GET_CODE (result) == PARALLEL)\n     return N_(\"inline functions not supported for this return value type\");\n \n-  return 0;\n+  /* If the function has a target specific attribute attached to it,\n+     then we assume that we should not inline it.  This can be overriden\n+     by the target if it defines FUNCTION_ATTRIBUTE_INLINABLE_P.  */\n+  if (DECL_MACHINE_ATTRIBUTES (fndecl)\n+      && ! FUNCTION_ATTRIBUTE_INLINABLE_P (fndecl))\n+    return N_(\"function with target specific attribute(s) cannot be inlined\");\n+\n+  return NULL;\n }\n \f\n /* Map pseudo reg number into the PARM_DECL for the parm living in the reg."}, {"sha": "d9560ac98ca596089d712d8bf6da8719c1c44b5e", "filename": "gcc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36f4ed35411cadef7f3b17cab4089be7246707a/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36f4ed35411cadef7f3b17cab4089be7246707a/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=b36f4ed35411cadef7f3b17cab4089be7246707a", "patch": "@@ -2169,6 +2169,7 @@ This describes the stack layout and calling conventions.\n * Caller Saves::\n * Function Entry::\n * Profiling::\n+* Inlining::\n @end menu\n \n @node Frame Layout\n@@ -3671,6 +3672,17 @@ A C function or functions which are needed in the library to\n support block profiling.\n @end table\n \n+@node Inlining\n+@subsection Permitting inlining of functions with attributes\n+@cindex inlining\n+\n+By default if a function has a target specific attribute attached to it,\n+it will not be inlined.  This behaviour can be overridden if the target\n+defines the @samp{FUNCTION_ATTRIBUTE_INLINABLE_P} macro.  This macro\n+takes one argument, a @samp{DECL} describing the function.  It should\n+return non-zero if the function can be inlined, otherwise it should\n+return 0.\n+\n @node Varargs\n @section Implementing the Varargs Macros\n @cindex varargs implementation"}]}