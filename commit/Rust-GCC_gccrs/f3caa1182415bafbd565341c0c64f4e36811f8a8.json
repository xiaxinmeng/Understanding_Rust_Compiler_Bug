{"sha": "f3caa1182415bafbd565341c0c64f4e36811f8a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNjYWExMTgyNDE1YmFmYmQ1NjUzNDFjMGM2NGY0ZTM2ODExZjhhOA==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2017-01-06T17:49:12Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2017-01-06T17:49:12Z"}, "message": "[ARM] Implement support for ACLE Coprocessor MCRR and MRRC intrinsics\n\ngcc/ChangeLog:\n2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/arm.md (<mcrr>): New.\n\t(<mrrc>): New.\n\t* config/arm/arm.c (arm_arch5te): New.\n\t(arm_option_override): Set arm_arch5te.\n\t(arm_coproc_builtin_available): Add support for mcrr, mcrr2, mrrc\n\tand mrrc2.\n\t* config/arm/arm-builtins.c (MCRR_QUALIFIERS): Define to...\n\t(arm_mcrr_qualifiers): ... this. New.\n\t(MRRC_QUALIFIERS): Define to...\n\t(arm_mrrc_qualifiers): ... this. New.\n\t* config/arm/arm_acle.h (__arm_mcrr, __arm_mcrr2, __arm_mrrc,\n\t__arm_mrrc2): New.\n\t* config/arm/arm_acle_builtins.def (mcrr, mcrr2, mrrc, mrrc2): New.\n\t* config/arm/iterators.md (MCRRI, mcrr, MCRR): New.\n\t(MRRCI, mrrc, MRRC): New.\n\t* config/arm/unspecs.md (VUNSPEC_MCRR, VUNSPEC_MCRR2, VUNSPEC_MRRC,\n\tVUNSPEC_MRRC2): New.\n\ngcc/testsuite/ChangeLog:\n2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* gcc.target/arm/acle/mcrr: New.\n\t* gcc.target/arm/acle/mcrr2: New.\n\t* gcc.target/arm/acle/mrrc: New.\n\t* gcc.target/arm/acle/mrrc2: New.\n\nFrom-SVN: r244175", "tree": {"sha": "4d45643fda25f7067abfeacf4ed9b7683cd5232b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d45643fda25f7067abfeacf4ed9b7683cd5232b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3caa1182415bafbd565341c0c64f4e36811f8a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3caa1182415bafbd565341c0c64f4e36811f8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3caa1182415bafbd565341c0c64f4e36811f8a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3caa1182415bafbd565341c0c64f4e36811f8a8/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc"}], "stats": {"total": 209, "additions": 208, "deletions": 1}, "files": [{"sha": "5f4577d47358a7ad60a58ac23cbddb83c8c8e14f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -1,3 +1,23 @@\n+2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm.md (<mcrr>): New.\n+\t(<mrrc>): New.\n+\t* config/arm/arm.c (arm_arch5te): New.\n+\t(arm_option_override): Set arm_arch5te.\n+\t(arm_coproc_builtin_available): Add support for mcrr, mcrr2, mrrc\n+\tand mrrc2.\n+\t* config/arm/arm-builtins.c (MCRR_QUALIFIERS): Define to...\n+\t(arm_mcrr_qualifiers): ... this. New.\n+\t(MRRC_QUALIFIERS): Define to...\n+\t(arm_mrrc_qualifiers): ... this. New.\n+\t* config/arm/arm_acle.h (__arm_mcrr, __arm_mcrr2, __arm_mrrc,\n+\t__arm_mrrc2): New.\n+\t* config/arm/arm_acle_builtins.def (mcrr, mcrr2, mrrc, mrrc2): New.\n+\t* config/arm/iterators.md (MCRRI, mcrr, MCRR): New.\n+\t(MRRCI, mrrc, MRRC): New.\n+\t* config/arm/unspecs.md (VUNSPEC_MCRR, VUNSPEC_MCRR2, VUNSPEC_MRRC,\n+\tVUNSPEC_MRRC2): New.\n+\n 2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm.md (<mcr>): New."}, {"sha": "689219c1923bc0f720f70870bfde8b60f7514167", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -217,6 +217,24 @@ arm_mrc_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned_immediate, qualifier_unsigned_immediate };\n #define MRC_QUALIFIERS \\\n   (arm_mrc_qualifiers)\n+\n+/* void (unsigned immediate, unsigned immediate,  T, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_mcrr_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate, qualifier_none,\n+      qualifier_unsigned_immediate };\n+#define MCRR_QUALIFIERS \\\n+  (arm_mcrr_qualifiers)\n+\n+/* T (unsigned immediate, unsigned immediate, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_mrrc_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate, qualifier_unsigned_immediate };\n+#define MRRC_QUALIFIERS \\\n+  (arm_mrrc_qualifiers)\n+\n /* The first argument (return type) of a store should be void type,\n    which we represent with qualifier_void.  Their first operand will be\n    a DImode pointer to the location to store to, so we must use"}, {"sha": "ccdf1ab80242b996d5770a5b4da2c669491c00aa", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -814,6 +814,9 @@ int arm_arch5 = 0;\n /* Nonzero if this chip supports the ARM Architecture 5E extensions.  */\n int arm_arch5e = 0;\n \n+/* Nonzero if this chip supports the ARM Architecture 5TE extensions.  */\n+int arm_arch5te = 0;\n+\n /* Nonzero if this chip supports the ARM Architecture 6 extensions.  */\n int arm_arch6 = 0;\n \n@@ -3372,6 +3375,8 @@ arm_option_override (void)\n   arm_arch4t = arm_arch4 && bitmap_bit_p (arm_active_target.isa, isa_bit_thumb);\n   arm_arch5 = bitmap_bit_p (arm_active_target.isa, isa_bit_ARMv5);\n   arm_arch5e = bitmap_bit_p (arm_active_target.isa, isa_bit_ARMv5e);\n+  arm_arch5te = arm_arch5e\n+    && bitmap_bit_p (arm_active_target.isa, isa_bit_thumb);\n   arm_arch6 = bitmap_bit_p (arm_active_target.isa, isa_bit_ARMv6);\n   arm_arch6k = bitmap_bit_p (arm_active_target.isa, isa_bit_ARMv6k);\n   arm_arch_notm = bitmap_bit_p (arm_active_target.isa, isa_bit_notm);\n@@ -30925,6 +30930,18 @@ arm_coproc_builtin_available (enum unspecv builtin)\n \tif (arm_arch5)\n \t  return true;\n \tbreak;\n+      case VUNSPEC_MCRR:\n+      case VUNSPEC_MRRC:\n+\t/* Only present in ARMv5TE, ARMv6 (but not ARMv6-M), ARMv7* and\n+\t   ARMv8-{A,M}.  */\n+\tif (arm_arch6 || arm_arch5te)\n+\t  return true;\n+\tbreak;\n+      case VUNSPEC_MCRR2:\n+      case VUNSPEC_MRRC2:\n+\tif (arm_arch6)\n+\t  return true;\n+\tbreak;\n       default:\n \tgcc_unreachable ();\n     }"}, {"sha": "446fb226f6a48755786da73f621ef8d433d001cb", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -12016,6 +12016,37 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"coproc\")])\n \n+(define_insn \"<mcrr>\"\n+  [(unspec_volatile [(match_operand:SI 0 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 1 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:DI 2 \"s_register_operand\" \"r\")\n+\t\t     (match_operand:SI 3 \"immediate_operand\" \"n\")] MCRRI)\n+   (use (match_dup 2))]\n+  \"arm_coproc_builtin_available (VUNSPEC_<MCRR>)\"\n+{\n+  arm_const_bounds (operands[0], 0, 16);\n+  arm_const_bounds (operands[1], 0, 8);\n+  arm_const_bounds (operands[3], 0, (1 << 5));\n+  return \"<mcrr>\\\\tp%c0, %1, %Q2, %R2, CR%c3\";\n+}\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"coproc\")])\n+\n+(define_insn \"<mrrc>\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec_volatile [(match_operand:SI 1 \"immediate_operand\" \"n\")\n+\t\t\t  (match_operand:SI 2 \"immediate_operand\" \"n\")\n+\t\t\t  (match_operand:SI 3 \"immediate_operand\" \"n\")] MRRCI))]\n+  \"arm_coproc_builtin_available (VUNSPEC_<MRRC>)\"\n+{\n+  arm_const_bounds (operands[1], 0, 16);\n+  arm_const_bounds (operands[2], 0, 8);\n+  arm_const_bounds (operands[3], 0, (1 << 5));\n+  return \"<mrrc>\\\\tp%c1, %2, %Q0, %R0, CR%c3\";\n+}\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"coproc\")])\n+\n ;; Vector bits common to IWMMXT and Neon\n (include \"vec-common.md\")\n ;; Load the Intel Wireless Multimedia Extension patterns"}, {"sha": "972e28edb86c1f137e16982acc6f346e0eac04fb", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -136,6 +136,40 @@ __arm_mrc2 (const unsigned int __coproc, const unsigned int __opc1,\n {\n   return __builtin_arm_mrc2 (__coproc, __opc1, __CRn, __CRm, __opc2);\n }\n+\n+#if __ARM_ARCH >= 6 ||  defined (__ARM_ARCH_5TE__)\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_mcrr (const unsigned int __coproc, const unsigned int __opc1,\n+\t    uint64_t __value, const unsigned int __CRm)\n+{\n+  return __builtin_arm_mcrr (__coproc, __opc1, __value, __CRm);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+__arm_mrrc (const unsigned int __coproc, const unsigned int __opc1,\n+\t    const unsigned int __CRm)\n+{\n+  return __builtin_arm_mrrc (__coproc, __opc1, __CRm);\n+}\n+\n+#if __ARM_ARCH >= 6\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_mcrr2 (const unsigned int __coproc, const unsigned int __opc1,\n+\t    uint64_t __value, const unsigned int __CRm)\n+{\n+  return __builtin_arm_mcrr2 (__coproc, __opc1, __value, __CRm);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+__arm_mrrc2 (const unsigned int __coproc, const unsigned int __opc1,\n+\t     const unsigned int __CRm)\n+{\n+  return __builtin_arm_mrrc2 (__coproc, __opc1,  __CRm);\n+}\n+#endif /* __ARM_ARCH >= 6.  */\n+#endif /* __ARM_ARCH >= 6 ||  defined (__ARM_ARCH_5TE__).  */\n #endif /*  __ARM_ARCH >= 5.  */\n #endif /* (!__thumb__ || __thumb2__) &&  __ARM_ARCH >= 4.  */\n "}, {"sha": "bd1f66272c9c9832a74081838ee81be26bd8ee50", "filename": "gcc/config/arm/arm_acle_builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -38,3 +38,7 @@ VAR1 (MCR, mcr, void)\n VAR1 (MCR, mcr2, void)\n VAR1 (MRC, mrc, si)\n VAR1 (MRC, mrc2, si)\n+VAR1 (MCRR, mcrr, void)\n+VAR1 (MCRR, mcrr2, void)\n+VAR1 (MRRC, mrrc, di)\n+VAR1 (MRRC, mrrc2, di)"}, {"sha": "e2e588688eb04c158d1c146bca12d84cfb5ff130", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -976,3 +976,15 @@\n \n (define_int_attr mrc [(VUNSPEC_MRC \"mrc\") (VUNSPEC_MRC2 \"mrc2\")])\n (define_int_attr MRC [(VUNSPEC_MRC \"MRC\") (VUNSPEC_MRC2 \"MRC2\")])\n+\n+;; An iterator for the MCRR coprocessor instructions\n+(define_int_iterator MCRRI [VUNSPEC_MCRR VUNSPEC_MCRR2])\n+\n+(define_int_attr mcrr [(VUNSPEC_MCRR \"mcrr\") (VUNSPEC_MCRR2 \"mcrr2\")])\n+(define_int_attr MCRR [(VUNSPEC_MCRR \"MCRR\") (VUNSPEC_MCRR2 \"MCRR2\")])\n+\n+;; An iterator for the MRRC coprocessor instructions\n+(define_int_iterator MRRCI [VUNSPEC_MRRC VUNSPEC_MRRC2])\n+\n+(define_int_attr mrrc [(VUNSPEC_MRRC \"mrrc\") (VUNSPEC_MRRC2 \"mrrc2\")])\n+(define_int_attr MRRC [(VUNSPEC_MRRC \"MRRC\") (VUNSPEC_MRRC2 \"MRRC2\")])"}, {"sha": "99cfa41b08dad24a85e78f069331e83c03c8bce1", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -164,6 +164,10 @@\n   VUNSPEC_MCR2\t\t; Represent the coprocessor mcr2 instruction.\n   VUNSPEC_MRC\t\t; Represent the coprocessor mrc instruction.\n   VUNSPEC_MRC2\t\t; Represent the coprocessor mrc2 instruction.\n+  VUNSPEC_MCRR\t\t; Represent the coprocessor mcrr instruction.\n+  VUNSPEC_MCRR2\t\t; Represent the coprocessor mcrr2 instruction.\n+  VUNSPEC_MRRC\t\t; Represent the coprocessor mrrc instruction.\n+  VUNSPEC_MRRC2\t\t; Represent the coprocessor mrrc2 instruction.\n ])\n \n ;; Enumerators for NEON unspecs."}, {"sha": "213f434a567f563d1e58b2ccfb1fa51b8d20685d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -1,3 +1,10 @@\n+2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/acle/mcrr: New.\n+\t* gcc.target/arm/acle/mcrr2: New.\n+\t* gcc.target/arm/acle/mrrc: New.\n+\t* gcc.target/arm/acle/mrrc2: New.\n+\n 2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc.target/arm/acle/mcr.c: New."}, {"sha": "dcc223c713d8aabb1d51c1d3bb3a7ed817a4be30", "filename": "gcc/testsuite/gcc.target/arm/acle/mcrr.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcrr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcrr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcrr.c?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -0,0 +1,16 @@\n+/* Test the mcrr ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc3_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_mcrr (uint64_t a)\n+{\n+  a += 77;\n+  __arm_mcrr (10, 5, a, 3);\n+}\n+\n+/* { dg-final { scan-assembler \"add\\[^\\n\\]*#77\\n\" } } */\n+/* { dg-final { scan-assembler \"mcrr\\tp10, #5, r\\[r0-9\\]*, r\\[r0-9\\]*, CR3\\n\" } } */"}, {"sha": "10f2014d4474c0d78862894023dd8672a80a9189", "filename": "gcc/testsuite/gcc.target/arm/acle/mcrr2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcrr2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcrr2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcrr2.c?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -0,0 +1,16 @@\n+/* Test the mcrr2 ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc4_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_mcrr2 (uint64_t a)\n+{\n+  a += 77;\n+  __arm_mcrr2 (10, 5, a, 3);\n+}\n+\n+/* { dg-final { scan-assembler \"add\\[^\\n\\]*#77\\n\" } } */\n+/* { dg-final { scan-assembler \"mcrr2\\tp10, #5, r\\[r0-9\\]*, r\\[r0-9\\]*, CR3\\n\" } } */"}, {"sha": "28c3b8ea6b53f7e8cf95d86d4d0eda367fca2041", "filename": "gcc/testsuite/gcc.target/arm/acle/mrrc.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrrc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrrc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrrc.c?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -0,0 +1,14 @@\n+/* Test the mrrc ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc3_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+uint64_t test_mrrc (void)\n+{\n+  return __arm_mrrc (10, 5, 3);\n+}\n+\n+/* { dg-final { scan-assembler \"mrrc\\tp10, #5, r\\[r0-9\\]*, r\\[r0-9\\]*, CR3\\n\" } } */"}, {"sha": "5b7aab06222e07bf37a46edb02b189ed5b796388", "filename": "gcc/testsuite/gcc.target/arm/acle/mrrc2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrrc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrrc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrrc2.c?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -0,0 +1,14 @@\n+/* Test the mrrc2 ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc4_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+uint64_t test_mrrc2 (void)\n+{\n+  return __arm_mrrc2 (10, 5, 3);\n+}\n+\n+/* { dg-final { scan-assembler \"mrrc2\\tp10, #5, r\\[r0-9\\]*, r\\[r0-9\\]*, CR3\\n\" } } */"}, {"sha": "b88d13c13f277e8cdb88b5dc8545ffa01408a0fa", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3caa1182415bafbd565341c0c64f4e36811f8a8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=f3caa1182415bafbd565341c0c64f4e36811f8a8", "patch": "@@ -8279,7 +8279,7 @@ proc check_effective_target_arm_coproc2_ok { } {\n \n # Return 1 if the target supports all coprocessor instructions checked by\n # check_effective_target_arm_coproc2_ok in addition the following: mcrr and\n-mrrc.\n+# mrrc.\n proc check_effective_target_arm_coproc3_ok_nocache { } {\n     if { ![check_effective_target_arm_coproc2_ok] } {\n \treturn 0"}]}