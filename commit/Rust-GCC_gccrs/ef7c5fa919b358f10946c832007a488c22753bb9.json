{"sha": "ef7c5fa919b358f10946c832007a488c22753bb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3YzVmYTkxOWIzNThmMTA5NDZjODMyMDA3YTQ4OGMyMjc1M2JiOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T11:06:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T11:06:15Z"}, "message": "[multiple changes]\n\n2013-01-02  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat1drv.adb, targparm.adb, targparm.ads: Minor name change: add\n\tOn_Target to Atomic_Sync_Default.\n\n2013-01-02  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_warn.adb (Warn_On_Known_Condition): Suppress warning for\n\tcomparison of attribute result with constant\n\t* a-ststio.adb, s-direio.adb, s-rannum.adb: Remove unnecessary pragma\n\tWarnings (Off, \"..\");\n\n2013-01-02  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.ads: Minor correction of comment.\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb (Traverse_Package_Declaration): The first\n\tdeclaration in a nested package is dominated by the preceding\n\tdeclaration in the enclosing scope.\n\n2013-01-02  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c, adaint.h (__gnat_get_module_name): Return the actual\n\tmodule containing a given address.\n\nFrom-SVN: r194798", "tree": {"sha": "0c40dcc14b5b2a9a02d9d7e8d295aa78b373e396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c40dcc14b5b2a9a02d9d7e8d295aa78b373e396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef7c5fa919b358f10946c832007a488c22753bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7c5fa919b358f10946c832007a488c22753bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7c5fa919b358f10946c832007a488c22753bb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7c5fa919b358f10946c832007a488c22753bb9/comments", "author": null, "committer": null, "parents": [{"sha": "e9f80612564876fc089ae96504e0ceaa0c33e0e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f80612564876fc089ae96504e0ceaa0c33e0e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f80612564876fc089ae96504e0ceaa0c33e0e8"}], "stats": {"total": 119, "additions": 96, "deletions": 23}, "files": [{"sha": "87ed68df6cadbcd3734c0cabc13385ab4f9d1893", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -1,3 +1,30 @@\n+2013-01-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat1drv.adb, targparm.adb, targparm.ads: Minor name change: add\n+\tOn_Target to Atomic_Sync_Default.\n+\n+2013-01-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Known_Condition): Suppress warning for\n+\tcomparison of attribute result with constant\n+\t* a-ststio.adb, s-direio.adb, s-rannum.adb: Remove unnecessary pragma\n+\tWarnings (Off, \"..\");\n+\n+2013-01-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.ads: Minor correction of comment.\n+\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb (Traverse_Package_Declaration): The first\n+\tdeclaration in a nested package is dominated by the preceding\n+\tdeclaration in the enclosing scope.\n+\n+2013-01-02  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c, adaint.h (__gnat_get_module_name): Return the actual\n+\tmodule containing a given address.\n+\n 2013-01-02  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_ch3.adb: Minor reformatting."}, {"sha": "ef8af62d2063fa3939e9f420e6cf75e6dc2acf63", "filename": "gcc/ada/a-ststio.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fa-ststio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fa-ststio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ststio.adb?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -367,13 +367,11 @@ package body Ada.Streams.Stream_IO is\n       FIO.Append_Set (AP (File));\n \n       if File.Mode = FCB.Append_File then\n-         pragma Warnings (Off, \"*condition is always*\");\n          if Standard'Address_Size = 64 then\n             File.Index := Count (ftell64 (File.Stream)) + 1;\n          else\n             File.Index := Count (ftell (File.Stream)) + 1;\n          end if;\n-         pragma Warnings (On, \"*condition is always*\");\n       end if;\n \n       File.Last_Op := Op_Other;\n@@ -388,15 +386,13 @@ package body Ada.Streams.Stream_IO is\n       use type System.CRTL.ssize_t;\n       R : int;\n    begin\n-      pragma Warnings (Off, \"*condition is always*\");\n       if Standard'Address_Size = 64 then\n          R := fseek64 (File.Stream,\n                        System.CRTL.ssize_t (File.Index) - 1, SEEK_SET);\n       else\n          R := fseek (File.Stream,\n                      System.CRTL.long (File.Index) - 1, SEEK_SET);\n       end if;\n-      pragma Warnings (On, \"*condition is always*\");\n \n       if R /= 0 then\n          raise Use_Error;\n@@ -418,13 +414,11 @@ package body Ada.Streams.Stream_IO is\n             raise Device_Error;\n          end if;\n \n-         pragma Warnings (Off, \"*condition is always*\");\n          if Standard'Address_Size = 64 then\n             File.File_Size := Stream_Element_Offset (ftell64 (File.Stream));\n          else\n             File.File_Size := Stream_Element_Offset (ftell (File.Stream));\n          end if;\n-         pragma Warnings (On, \"*condition is always*\");\n       end if;\n \n       return Count (File.File_Size);"}, {"sha": "e67c4df2ecd7d8b855115fbab9cd19140bbb0e6b", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -2960,6 +2960,45 @@ __gnat_locate_exec_on_path (char *exec_name)\n #endif\n }\n \n+/* __gnat_get_module_name returns the module name (executable or shared\n+   library) in which the code at addr is. This is used to properly\n+   report the symbolic tracebacks.  If the module cannot be located\n+   it returns the empty string. The returned value must not be freed.  */\n+\n+char *__gnat_get_module_name (void *addr ATTRIBUTE_UNUSED)\n+{\n+  extern char **gnat_argv;\n+\n+#ifdef _WIN32\n+  static char lpFilename[MAX_PATH];\n+  HMODULE hModule;\n+\n+  lpFilename[0] = '\\0';\n+\n+  /* Get the module handle in which the code running at the specified\n+     address is contained.  */\n+\n+  if (GetModuleHandleEx\n+      (GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS, addr, &hModule) == FALSE)\n+    return __gnat_locate_exec_on_path (gnat_argv[0]);\n+\n+  /* Get the corresponding module full path name.  We really want the\n+     standard ASCII version of this routine as the name is passed to\n+     the BFD library.  */\n+\n+  if (GetModuleFileNameA (hModule, lpFilename, MAX_PATH) == 0)\n+    return __gnat_locate_exec_on_path (gnat_argv[0]);\n+\n+  return lpFilename;\n+\n+#else\n+  /* On all other platforms we just return the full path name of the\n+     main executable.  */\n+\n+  return __gnat_locate_exec_on_path (gnat_argv[0]);\n+#endif\n+}\n+\n #ifdef VMS\n \n /* These functions are used to translate to and from VMS and Unix syntax"}, {"sha": "217ce6c48e14472b51cbd4aff11f1f7e11839b16", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -186,6 +186,7 @@ extern int    __gnat_portable_wait                 (int *);\n extern char  *__gnat_locate_exec                   (char *, char *);\n extern char  *__gnat_locate_exec_on_path\t   (char *);\n extern char  *__gnat_locate_regular_file           (char *, char *);\n+extern char  *__gnat_get_module_name               (void *);\n extern void   __gnat_maybe_glob_args               (int *, char ***);\n extern void   __gnat_os_exit\t\t\t   (int);\n extern char  *__gnat_get_libraries_from_registry   (void);"}, {"sha": "4cfc3392f24832587dd55a1acda8b58a4def2813", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -518,7 +518,7 @@ procedure Gnat1drv is\n       --  off. Note Atomic Synchronization is implemented as check.\n \n       Suppress_Options.Suppress (Atomic_Synchronization) :=\n-        not Atomic_Sync_Default;\n+        not Atomic_Sync_Default_On_Target;\n \n       --  Set switch indicating if we can use N_Expression_With_Actions\n "}, {"sha": "6253be1913433e514cc445c66eed56c01bbd59a0", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -174,7 +174,9 @@ package body Par_SCO is\n      (N : Node_Id;\n       D : Dominant_Info := No_Dominant);\n    procedure Traverse_Package_Body        (N : Node_Id);\n-   procedure Traverse_Package_Declaration (N : Node_Id);\n+   procedure Traverse_Package_Declaration\n+     (N : Node_Id;\n+      D : Dominant_Info := No_Dominant);\n    procedure Traverse_Subprogram_Or_Task_Body\n      (N : Node_Id;\n       D : Dominant_Info := No_Dominant);\n@@ -1522,7 +1524,7 @@ package body Par_SCO is\n \n             when N_Package_Declaration =>\n                Set_Statement_Entry;\n-               Traverse_Package_Declaration (N);\n+               Traverse_Package_Declaration (N, Current_Dominant);\n \n             --  Generic package declaration\n \n@@ -2162,14 +2164,19 @@ package body Par_SCO is\n    -- Traverse_Package_Declaration --\n    ----------------------------------\n \n-   procedure Traverse_Package_Declaration (N : Node_Id) is\n+   procedure Traverse_Package_Declaration\n+     (N : Node_Id;\n+      D : Dominant_Info := No_Dominant)\n+   is\n       Spec : constant Node_Id := Specification (N);\n       Dom  : Dominant_Info;\n    begin\n+      Dom := Traverse_Declarations_Or_Statements\n+               (Visible_Declarations (Spec), D);\n+\n       --  The first private declaration is dominated by the last visible\n       --  declaration.\n \n-      Dom := Traverse_Declarations_Or_Statements (Visible_Declarations (Spec));\n       Traverse_Declarations_Or_Statements (Private_Declarations (Spec), Dom);\n    end Traverse_Package_Declaration;\n "}, {"sha": "99f8ddf7722d02ed4e99ec425efe6a91eca8b531", "filename": "gcc/ada/s-direio.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fs-direio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fs-direio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-direio.adb?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -283,7 +283,6 @@ package body System.Direct_IO is\n       use type System.CRTL.ssize_t;\n       R : int;\n    begin\n-      pragma Warnings (Off, \"*condition is always*\");\n       if Standard'Address_Size = 64 then\n          R := fseek64\n            (File.Stream, ssize_t (File.Bytes) *\n@@ -293,7 +292,6 @@ package body System.Direct_IO is\n            (File.Stream, long (File.Bytes) *\n               long (File.Index - 1), SEEK_SET);\n       end if;\n-      pragma Warnings (On, \"*condition is always*\");\n \n       if R /= 0 then\n          raise Use_Error;\n@@ -314,13 +312,11 @@ package body System.Direct_IO is\n          raise Device_Error;\n       end if;\n \n-      pragma Warnings (Off, \"*condition is always*\");\n       if Standard'Address_Size = 64 then\n          return Count (ftell64 (File.Stream) / ssize_t (File.Bytes));\n       else\n          return Count (ftell (File.Stream) / long (File.Bytes));\n       end if;\n-      pragma Warnings (On, \"*condition is always*\");\n    end Size;\n \n    -----------"}, {"sha": "bfcea5569443cc44347bcdbf439d12656b8ff49b", "filename": "gcc/ada/s-rannum.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rannum.adb?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -406,7 +406,7 @@ package body System.Random_Numbers is\n             --  Ignore different-size warnings here since GNAT's handling\n             --  is correct.\n \n-            pragma Warnings (\"Z\");  -- better to use msg string! ???\n+            pragma Warnings (\"Z\");\n             function Conv_To_Unsigned is\n                new Unchecked_Conversion (Result_Subtype'Base, Unsigned_64);\n             function Conv_To_Result is\n@@ -496,7 +496,6 @@ package body System.Random_Numbers is\n \n    procedure Reset (Gen : Generator; Initiator : Integer) is\n    begin\n-      pragma Warnings (Off, \"condition is always *\");\n       --  This is probably an unnecessary precaution against future change, but\n       --  since the test is a static expression, no extra code is involved.\n \n@@ -515,8 +514,6 @@ package body System.Random_Numbers is\n             Reset (Gen, Initialization_Vector'(Init0, Init1));\n          end;\n       end if;\n-\n-      pragma Warnings (On, \"condition is always *\");\n    end Reset;\n \n    procedure Reset (Gen : Generator; Initiator : Initialization_Vector) is"}, {"sha": "9df7d5ab711e2a6febf505239e86885c45eda883", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -58,7 +58,8 @@ package Sem_Prag is\n    --  This function is used in connection with pragmas Assertion, Check,\n    --  Precondition, and Postcondition, to determine if Check pragmas (or\n    --  corresponding Assert, Precondition, or Postcondition pragmas) are\n-   --  currently disabled (as set by a Policy pragma with the Disabled\n+   --  currently disabled (as set by a Check_Policy or Assertion_Policy pragma\n+   --  with the Disable argument).\n \n    function Check_Enabled (Nam : Name_Id) return Boolean;\n    --  This function is used in connection with pragmas Assertion, Check,"}, {"sha": "e24e72901dd8d0b50e3896f5099ef21679a00d5f", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -3175,9 +3175,20 @@ package body Sem_Warn is\n \n       if Constant_Condition_Warnings\n         and then Is_Known_Branch\n-        and then Comes_From_Source (Original_Node (C))\n+        and then Comes_From_Source (Orig)\n         and then not In_Instance\n       then\n+         --  Don't warn if comparison of result of attribute against a constant\n+         --  value, since this is likely legitimate conditional compilation.\n+\n+         if Nkind (Orig) in N_Op_Compare\n+           and then Compile_Time_Known_Value (Right_Opnd (Orig))\n+           and then Nkind (Original_Node (Left_Opnd (Orig))) =\n+                                                     N_Attribute_Reference\n+         then\n+            return;\n+         end if;\n+\n          --  See if this is in a statement or a declaration\n \n          P := Parent (C);"}, {"sha": "5ed84083a8a65996ad8c7028c0d59f346dab2f7c", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -554,7 +554,7 @@ package body Targparm is\n                   case K is\n                      when AAM => AAMP_On_Target                      := Result;\n                      when ACR => Always_Compatible_Rep_On_Target     := Result;\n-                     when ASD => Atomic_Sync_Default                 := Result;\n+                     when ASD => Atomic_Sync_Default_On_Target       := Result;\n                      when BDC => Backend_Divide_Checks_On_Target     := Result;\n                      when BOC => Backend_Overflow_Checks_On_Target   := Result;\n                      when CLA => Command_Line_Args_On_Target         := Result;"}, {"sha": "5869f0c10135418ed44d75d0befe2251f95de8ea", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7c5fa919b358f10946c832007a488c22753bb9/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=ef7c5fa919b358f10946c832007a488c22753bb9", "patch": "@@ -388,7 +388,7 @@ package Targparm is\n    --  used at the source level, and the corresponding flag is false, then an\n    --  error message will be issued saying the feature is not supported.\n \n-   Atomic_Sync_Default : Boolean := True;\n+   Atomic_Sync_Default_On_Target : Boolean := True;\n    --  Access to atomic variables requires memory barrier synchronization in\n    --  the general case to ensure proper behavior when such accesses are used\n    --  on a multi-processor to synchronize tasks (e.g. by using spin locks)."}]}