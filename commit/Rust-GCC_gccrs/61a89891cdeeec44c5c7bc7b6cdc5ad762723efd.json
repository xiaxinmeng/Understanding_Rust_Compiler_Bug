{"sha": "61a89891cdeeec44c5c7bc7b6cdc5ad762723efd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFhODk4OTFjZGVlZWM0NGM1YzdiYzdiNmNkYzVhZDc2MjcyM2VmZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-01-31T03:33:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-01-31T03:33:15Z"}, "message": "* class.c, jcf-parse.c: Fix comment typos.\n\nFrom-SVN: r121372", "tree": {"sha": "10ccd35ad99af1c2e37b87f6d1d775f79dc6e8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10ccd35ad99af1c2e37b87f6d1d775f79dc6e8dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61a89891cdeeec44c5c7bc7b6cdc5ad762723efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61a89891cdeeec44c5c7bc7b6cdc5ad762723efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61a89891cdeeec44c5c7bc7b6cdc5ad762723efd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61a89891cdeeec44c5c7bc7b6cdc5ad762723efd/comments", "author": null, "committer": null, "parents": [{"sha": "5e203bf88350d60801814a1993db77e2dc7c98e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e203bf88350d60801814a1993db77e2dc7c98e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e203bf88350d60801814a1993db77e2dc7c98e2"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "bd11ee369532b83427f5a260aa5c4732069c7912", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61a89891cdeeec44c5c7bc7b6cdc5ad762723efd/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61a89891cdeeec44c5c7bc7b6cdc5ad762723efd/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=61a89891cdeeec44c5c7bc7b6cdc5ad762723efd", "patch": "@@ -1,3 +1,7 @@\n+2007-01-31  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* class.c, jcf-parse.c: Fix comment typos.\n+\n 2007-01-30  Tom Tromey  <tromey@redhat.com>\n \n \t* gcj.texi (Strings): Fix documentation for JvNewString."}, {"sha": "28b0dfe58d76f8d836ea82f334961deaec3f0804", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61a89891cdeeec44c5c7bc7b6cdc5ad762723efd/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61a89891cdeeec44c5c7bc7b6cdc5ad762723efd/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=61a89891cdeeec44c5c7bc7b6cdc5ad762723efd", "patch": "@@ -1671,7 +1671,7 @@ make_class_data (tree type)\n   /* gcj sorts fields so that static fields come first, followed by\n      instance fields.  Unfortunately, by the time this takes place we\n      have already generated the reflection_data for this class, and\n-     that data contians indexes into the fields.  So, we generate a\n+     that data contains indexes into the fields.  So, we generate a\n      permutation that maps each original field index to its final\n      position.  Then we pass this permutation to\n      rewrite_reflection_indexes(), which fixes up the reflection"}, {"sha": "0e2ba8c167bb72dce4dd3ec251241a35ca876b10", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61a89891cdeeec44c5c7bc7b6cdc5ad762723efd/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61a89891cdeeec44c5c7bc7b6cdc5ad762723efd/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=61a89891cdeeec44c5c7bc7b6cdc5ad762723efd", "patch": "@@ -91,7 +91,7 @@ static location_t file_start_location;\n /* The Java archive that provides main_class;  the main input file. */\n static GTY(()) struct JCF * main_jcf;\n \n-/* The number of source files passd to us by -fsource-filename and an\n+/* The number of source files passed to us by -fsource-filename and an\n    array of pointers to each name.  Used by find_sourcefile().  */\n static int num_files = 0;\n static char **filenames;\n@@ -381,15 +381,15 @@ set_source_filename (JCF *jcf, int index)\n /* Annotation handling.  \n \n    The technique we use here is to copy the annotation data directly\n-   from the input class file into the ouput file.  We don't decode the\n+   from the input class file into the output file.  We don't decode the\n    data at all, merely rewriting constant indexes whenever we come\n-   across them: this is necessary becasue the constant pool in the\n+   across them: this is necessary because the constant pool in the\n    output file isn't the same as the constant pool in in the input.\n \n    The main advantage of this technique is that the resulting\n    annotation data is pointer-free, so it doesn't have to be relocated\n    at startup time.  As a consequence of this, annotations have no\n-   peformance impact unless they are used.  Also, this representation\n+   performance impact unless they are used.  Also, this representation\n    is very dense.  */\n \n \n@@ -723,7 +723,7 @@ handle_annotation (JCF *jcf, int level)\n }\n \n /* Read an annotation count from JCF, and write the following\n-   annotatons to the reflection_data field of the outgoing class.  */\n+   annotations to the reflection_data field of the outgoing class.  */\n \n static void\n handle_annotations (JCF *jcf, int level)"}]}