{"sha": "b4da704c6ea9e69c6733fe86b5045b00f2775462", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRkYTcwNGM2ZWE5ZTY5YzY3MzNmZTg2YjUwNDViMDBmMjc3NTQ2Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-06-13T12:52:29Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-06-13T12:52:29Z"}, "message": "cgraph.c (cgraph_node::get_untransformed_body): Dump function bodies streamed in with -Q.\n\n\n\t* cgraph.c (cgraph_node::get_untransformed_body): Dump function\n\tbodies streamed in with -Q.\n\t* dumpfile.c (dump_files): Add lto-stream-out dump file.\n\t* dumpfile.h (tree_dump_index): Add lto_stream_out.\n\t* gimple-streamer-out.c: Include gimple-pretty-print.h\n\t(output_bb): Dump stmts streamed.\n\t* lto-section-out.c: Include print-tree.h\n\t(lto_begin_section): Dump sections created.\n\t(lto_output_decl_index): Dump decl encoded.\n\t* lto-streamer-out.c: Include print-tree.h\n\t(create_output_block): Dump output block created.\n\t(DFS::DFS_write_tree_body): Dump DFS SCCs streamed.\n\t(output_function): Dump function output.\n\t(output_constructor): Dump constructor streamed.\n\t(write_global_stream): Output indexes encoded.\n\t(produce_asm_for_decls): Dump streams encoded.\n\t* lto-streamer.c (streamer_dump_file): New global var.\n\t* lto-streamer.h (streamer_dump_file): Declare.\n\t* passes.c (ipa_write_summaries): Initialize streamer dump.\n\t* varpool.c (varpool_node::get_constructor): Dump constructors streamed\n\tin.\n\nFrom-SVN: r261546", "tree": {"sha": "286664089f83791dda5d4e8d3f44b19193700875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/286664089f83791dda5d4e8d3f44b19193700875"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4da704c6ea9e69c6733fe86b5045b00f2775462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4da704c6ea9e69c6733fe86b5045b00f2775462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4da704c6ea9e69c6733fe86b5045b00f2775462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4da704c6ea9e69c6733fe86b5045b00f2775462/comments", "author": null, "committer": null, "parents": [{"sha": "70e18df76ed2ccce4f6695b7f848d25dfa31ce0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e18df76ed2ccce4f6695b7f848d25dfa31ce0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e18df76ed2ccce4f6695b7f848d25dfa31ce0e"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "fc462248e781fa444c18dfe2de5d0d61b526b370", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4da704c6ea9e69c6733fe86b5045b00f2775462", "patch": "@@ -1,3 +1,27 @@\n+2018-06-13  Jan Hubicka  <hubicka@gcc.gnu.org>\n+\n+\t* cgraph.c (cgraph_node::get_untransformed_body): Dump function\n+\tbodies streamed in with -Q.\n+\t* dumpfile.c (dump_files): Add lto-stream-out dump file.\n+\t* dumpfile.h (tree_dump_index): Add lto_stream_out.\n+\t* gimple-streamer-out.c: Include gimple-pretty-print.h\n+\t(output_bb): Dump stmts streamed.\n+\t* lto-section-out.c: Include print-tree.h\n+\t(lto_begin_section): Dump sections created.\n+\t(lto_output_decl_index): Dump decl encoded.\n+\t* lto-streamer-out.c: Include print-tree.h\n+\t(create_output_block): Dump output block created.\n+\t(DFS::DFS_write_tree_body): Dump DFS SCCs streamed.\n+\t(output_function): Dump function output.\n+\t(output_constructor): Dump constructor streamed.\n+\t(write_global_stream): Output indexes encoded.\n+\t(produce_asm_for_decls): Dump streams encoded.\n+\t* lto-streamer.c (streamer_dump_file): New global var.\n+\t* lto-streamer.h (streamer_dump_file): Declare.\n+\t* passes.c (ipa_write_summaries): Initialize streamer dump.\n+\t* varpool.c (varpool_node::get_constructor): Dump constructors streamed\n+\tin.\n+\n 2018-06-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/86048"}, {"sha": "3899467f94d3c54869ddbd68f2ea7687347a46fe", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=b4da704c6ea9e69c6733fe86b5045b00f2775462", "patch": "@@ -3543,6 +3543,8 @@ cgraph_node::get_untransformed_body (void)\n \n   gcc_assert (DECL_STRUCT_FUNCTION (decl) == NULL);\n \n+  if (!quiet_flag)\n+    fprintf (stderr, \" in:%s\", IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n   lto_input_function_body (file_data, this, data);\n   lto_stats.num_function_bodies++;\n   lto_free_section_data (file_data, LTO_section_function_body, name,"}, {"sha": "2f11284d488479a0c0fc4b5853d276b97b1f6f39", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=b4da704c6ea9e69c6733fe86b5045b00f2775462", "patch": "@@ -64,6 +64,7 @@ static struct dump_file_info dump_files[TDI_end] =\n   DUMP_FILE_INFO (\".original\", \"tree-original\", DK_tree, 0),\n   DUMP_FILE_INFO (\".gimple\", \"tree-gimple\", DK_tree, 0),\n   DUMP_FILE_INFO (\".nested\", \"tree-nested\", DK_tree, 0),\n+  DUMP_FILE_INFO (\".lto-stream-out\", \"ipa-lto-stream-out\", DK_ipa, 0),\n #define FIRST_AUTO_NUMBERED_DUMP 1\n #define FIRST_ME_AUTO_NUMBERED_DUMP 4\n "}, {"sha": "f6ad670f0e430eff10de54bf55531251718a9e54", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=b4da704c6ea9e69c6733fe86b5045b00f2775462", "patch": "@@ -33,6 +33,7 @@ enum tree_dump_index\n   TDI_original,\t\t\t/* dump each function before optimizing it */\n   TDI_gimple,\t\t\t/* dump each function after gimplifying it */\n   TDI_nested,\t\t\t/* dump each function after unnesting it */\n+  TDI_lto_stream_out,\t\t/* dump information about lto streaming */\n \n   TDI_lang_all,\t\t\t/* enable all the language dumps.  */\n   TDI_tree_all,\t\t\t/* enable all the GENERIC/GIMPLE dumps.  */"}, {"sha": "d120aa902952ab5db8f795f694915a25f8913de4", "filename": "gcc/gimple-streamer-out.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fgimple-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fgimple-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-out.c?ref=b4da704c6ea9e69c6733fe86b5045b00f2775462", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-iterator.h\"\n #include \"cgraph.h\"\n #include \"value-prof.h\"\n+#include \"gimple-pretty-print.h\"\n \n /* Output PHI function PHI to the main stream in OB.  */\n \n@@ -220,6 +221,11 @@ output_bb (struct output_block *ob, basic_block bb, struct function *fn)\n \t{\n \t  int region;\n \t  gimple *stmt = gsi_stmt (bsi);\n+\t  if (streamer_dump_file)\n+\t    {\n+\t      fprintf (streamer_dump_file, \"  Streaming gimple stmt \");\n+\t      print_gimple_stmt (streamer_dump_file, stmt, 0, TDF_SLIM);\n+\t    }\n \n \t  output_gimple_stmt (ob, stmt);\n "}, {"sha": "2dfe64c049a6ff3ffe05d71ef41d8efa6e33f333", "filename": "gcc/lto-section-out.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Flto-section-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Flto-section-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-out.c?ref=b4da704c6ea9e69c6733fe86b5045b00f2775462", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"data-streamer.h\"\n #include \"langhooks.h\"\n #include \"lto-compress.h\"\n+#include \"print-tree.h\"\n \n static vec<lto_out_decl_state_ptr> decl_state_stack;\n \n@@ -66,6 +67,9 @@ lto_begin_section (const char *name, bool compress)\n {\n   lang_hooks.lto.begin_section (name);\n \n+  if (streamer_dump_file)\n+    fprintf (streamer_dump_file, \"Creating %ssection %s\\n\",\n+\t     compress ? \"compressed \" : \"\", name);\n   gcc_assert (compression_stream == NULL);\n   if (compress)\n     compression_stream = lto_start_compression (lto_append_data, NULL);\n@@ -158,6 +162,12 @@ lto_output_decl_index (struct lto_output_stream *obs,\n   if (!existed_p)\n     {\n       index = encoder->trees.length ();\n+      if (streamer_dump_file)\n+\t{\n+\t  print_node_brief (streamer_dump_file, \"    Encoding indexable \",\n+\t\t\t    name, 4);\n+\t  fprintf (streamer_dump_file, \"  as %i \\n\", index);\n+\t}\n       encoder->trees.safe_push (name);\n       new_entry_p = TRUE;\n     }"}, {"sha": "49f72e98501b549e26d0bcbea57b6997823f2c67", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=b4da704c6ea9e69c6733fe86b5045b00f2775462", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"debug.h\"\n #include \"omp-offload.h\"\n+#include \"print-tree.h\"\n \n \n static void lto_write_tree (struct output_block*, tree, bool);\n@@ -65,6 +66,9 @@ struct output_block *\n create_output_block (enum lto_section_type section_type)\n {\n   struct output_block *ob = XCNEW (struct output_block);\n+  if (streamer_dump_file)\n+    fprintf (streamer_dump_file, \"Creating output block for %s\\n\",\n+\t     lto_section_name [section_type]);\n \n   ob->section_type = section_type;\n   ob->decl_state = lto_get_out_decl_state ();\n@@ -738,6 +742,14 @@ DFS::DFS_write_tree_body (struct output_block *ob,\n \n   enum tree_code code;\n \n+  if (streamer_dump_file)\n+    {\n+      print_node_brief (streamer_dump_file, \"    Streaming \",\n+\t \t\texpr, 4);\n+      fprintf (streamer_dump_file, \"  to %s\\n\",\n+\t       lto_section_name [ob->section_type]);\n+    }\n+\n   code = TREE_CODE (expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPED))\n@@ -1635,6 +1647,13 @@ lto_output_tree (struct output_block *ob, tree expr,\n \t we stream out.  */\n       gcc_assert (!in_dfs_walk);\n \n+      if (streamer_dump_file)\n+\t{\n+\t  print_node_brief (streamer_dump_file, \"   Streaming SCC of \",\n+\t\t\t    expr, 4);\n+          fprintf (streamer_dump_file, \"\\n\");\n+\t}\n+\n       /* Start the DFS walk.  */\n       /* Save ob state ... */\n       /* let's see ... */\n@@ -1651,6 +1670,12 @@ lto_output_tree (struct output_block *ob, tree expr,\n       streamer_write_uhwi (ob, ix);\n       streamer_write_enum (ob->main_stream, LTO_tags, LTO_NUM_TAGS,\n \t\t\t   lto_tree_code_to_tag (TREE_CODE (expr)));\n+      if (streamer_dump_file)\n+\t{\n+\t  print_node_brief (streamer_dump_file, \"   Finished SCC of \",\n+\t\t\t    expr, 4);\n+          fprintf (streamer_dump_file, \"\\n\\n\");\n+\t}\n       lto_stats.num_pickle_refs_output++;\n     }\n }\n@@ -2072,6 +2097,10 @@ output_function (struct cgraph_node *node)\n   basic_block bb;\n   struct output_block *ob;\n \n+  if (streamer_dump_file)\n+    fprintf (streamer_dump_file, \"\\nStreaming body of %s\\n\",\n+\t     node->name ());\n+\n   function = node->decl;\n   fn = DECL_STRUCT_FUNCTION (function);\n   ob = create_output_block (LTO_section_function_body);\n@@ -2190,6 +2219,9 @@ output_function (struct cgraph_node *node)\n   produce_asm (ob, function);\n \n   destroy_output_block (ob);\n+  if (streamer_dump_file)\n+    fprintf (streamer_dump_file, \"Finished streaming %s\\n\",\n+\t     node->name ());\n }\n \n /* Output the body of function NODE->DECL.  */\n@@ -2200,6 +2232,10 @@ output_constructor (struct varpool_node *node)\n   tree var = node->decl;\n   struct output_block *ob;\n \n+  if (streamer_dump_file)\n+    fprintf (streamer_dump_file, \"\\nStreaming constructor of %s\\n\",\n+\t     node->name ());\n+\n   ob = create_output_block (LTO_section_function_body);\n \n   clear_line_info (ob);\n@@ -2216,6 +2252,9 @@ output_constructor (struct varpool_node *node)\n   produce_asm (ob, var);\n \n   destroy_output_block (ob);\n+  if (streamer_dump_file)\n+    fprintf (streamer_dump_file, \"Finished streaming %s\\n\",\n+\t     node->name ());\n }\n \n \n@@ -2485,6 +2524,12 @@ write_global_stream (struct output_block *ob,\n   for (index = 0; index < size; index++)\n     {\n       t = lto_tree_ref_encoder_get_tree (encoder, index);\n+      if (streamer_dump_file)\n+\t{\n+          fprintf (streamer_dump_file, \" %i:\", (int)index);\n+\t  print_node_brief (streamer_dump_file, \"\", t, 4);\n+          fprintf (streamer_dump_file, \"\\n\");\n+\t}\n       if (!streamer_tree_cache_lookup (ob->writer_cache, t, NULL))\n \tstream_write_tree (ob, t, false);\n     }\n@@ -2860,12 +2905,18 @@ produce_asm_for_decls (void)\n       }\n \n   /* Write the global symbols.  */\n+  if (streamer_dump_file)\n+    fprintf (streamer_dump_file, \"Outputting global stream\\n\");\n   lto_output_decl_state_streams (ob, out_state);\n   num_fns = lto_function_decl_states.length ();\n   for (idx = 0; idx < num_fns; idx++)\n     {\n       fn_out_state =\n \tlto_function_decl_states[idx];\n+      if (streamer_dump_file)\n+        fprintf (streamer_dump_file, \"Outputting stream for %s\\n\",\n+\t\t IDENTIFIER_POINTER\n+\t\t    (DECL_ASSEMBLER_NAME (fn_out_state->fn_decl)));\n       lto_output_decl_state_streams (ob, fn_out_state);\n     }\n "}, {"sha": "f51d66574614e5e68022a410484c53b2a60908cd", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=b4da704c6ea9e69c6733fe86b5045b00f2775462", "patch": "@@ -44,6 +44,8 @@ const char *section_name_prefix = LTO_SECTION_NAME_PREFIX;\n /* Set when streaming LTO for offloading compiler.  */\n bool lto_stream_offload_p;\n \n+FILE *streamer_dump_file;\n+\n /* Return a string representing LTO tag TAG.  */\n \n const char *"}, {"sha": "236fcc4480bb4f421cca35851773264beb264d28", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=b4da704c6ea9e69c6733fe86b5045b00f2775462", "patch": "@@ -1221,5 +1221,6 @@ struct dref_entry {\n \n extern vec<dref_entry> dref_queue;\n \n+extern FILE *streamer_dump_file;\n \n #endif /* GCC_LTO_STREAMER_H  */"}, {"sha": "832f0b3e5f2df80863852f8d0f76cecc46cd83f2", "filename": "gcc/passes.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=b4da704c6ea9e69c6733fe86b5045b00f2775462", "patch": "@@ -2641,6 +2641,9 @@ ipa_write_summaries (void)\n   if ((!flag_generate_lto && !flag_generate_offload) || seen_error ())\n     return;\n \n+  gcc_assert (!dump_file);\n+  streamer_dump_file = dump_begin (TDI_lto_stream_out, NULL);\n+\n   select_what_to_stream ();\n \n   encoder = lto_symtab_encoder_new (false);\n@@ -2683,6 +2686,11 @@ ipa_write_summaries (void)\n   ipa_write_summaries_1 (compute_ltrans_boundary (encoder));\n \n   free (order);\n+  if (streamer_dump_file)\n+    {\n+      dump_end (TDI_lto_stream_out, streamer_dump_file);\n+      streamer_dump_file = NULL;\n+    }\n }\n \n /* Same as execute_pass_list but assume that subpasses of IPA passes"}, {"sha": "4c90eead390715a333d68495bf21c8d65eccf993", "filename": "gcc/varpool.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4da704c6ea9e69c6733fe86b5045b00f2775462/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=b4da704c6ea9e69c6733fe86b5045b00f2775462", "patch": "@@ -307,6 +307,8 @@ varpool_node::get_constructor (void)\n \t\t file_data->file_name,\n \t\t name);\n \n+  if (!quiet_flag)\n+    fprintf (stderr, \" in:%s\", IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n   lto_input_variable_constructor (file_data, this, data);\n   gcc_assert (DECL_INITIAL (decl) != error_mark_node);\n   lto_stats.num_function_bodies++;"}]}