{"sha": "be1ea09b13ab5de0aed1ea8f507565bfc64be116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxZWEwOWIxM2FiNWRlMGFlZDFlYThmNTA3NTY1YmZjNjRiZTExNg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-09-29T14:57:23Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-09-29T14:57:23Z"}, "message": "Revert this patch:\n\n2005-09-15  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* optabs.c (expand_binop): Use swap_commutative_operands_with_target\n\tto order operands.\n\t(swap_commutative_operands_with_target): New.\n\nFrom-SVN: r104775", "tree": {"sha": "f39404b786d3f5d670d3c1a1b3c6147a9b23ea3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f39404b786d3f5d670d3c1a1b3c6147a9b23ea3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be1ea09b13ab5de0aed1ea8f507565bfc64be116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1ea09b13ab5de0aed1ea8f507565bfc64be116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be1ea09b13ab5de0aed1ea8f507565bfc64be116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1ea09b13ab5de0aed1ea8f507565bfc64be116/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02eb875fcf9775463bd0f7b26d09e6fc41d09893", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02eb875fcf9775463bd0f7b26d09e6fc41d09893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02eb875fcf9775463bd0f7b26d09e6fc41d09893"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "ebedfcacf59dcb806d1435ec52ce8127a6aa7c1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1ea09b13ab5de0aed1ea8f507565bfc64be116/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1ea09b13ab5de0aed1ea8f507565bfc64be116/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be1ea09b13ab5de0aed1ea8f507565bfc64be116", "patch": "@@ -1,3 +1,13 @@\n+2005-09-29  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tRevert this patch:\n+\n+\t2005-09-15  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* optabs.c (expand_binop): Use swap_commutative_operands_with_target\n+\tto order operands.\n+\t(swap_commutative_operands_with_target): New.\n+\n 2005-09-29  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR c/21419"}, {"sha": "70cf2b4de2e5252bf090d411d75fcd4d99fbe798", "filename": "gcc/optabs.c", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1ea09b13ab5de0aed1ea8f507565bfc64be116/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1ea09b13ab5de0aed1ea8f507565bfc64be116/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=be1ea09b13ab5de0aed1ea8f507565bfc64be116", "patch": "@@ -998,28 +998,6 @@ expand_simple_binop (enum machine_mode mode, enum rtx_code code, rtx op0,\n   return expand_binop (mode, binop, op0, op1, target, unsignedp, methods);\n }\n \n-\n-/* Return whether OP0 and OP1 should be swapped when expanding a commutative\n-   binop.  Order them according to commutative_operand_precedence and, if\n-   possible, try to put TARGET first.  */\n-static bool\n-swap_commutative_operands_with_target (rtx target, rtx op0, rtx op1)\n-{\n-  int op0_prec = commutative_operand_precedence (op0);\n-  int op1_prec = commutative_operand_precedence (op1);\n-\n-  if (op0_prec < op1_prec)\n-    return true;\n-\n-  if (op0_prec > op1_prec)\n-    return false;\n-\n-  /* With equal precedence, both orders are ok, but try to put the\n-     target first.  */\n-  return target && rtx_equal_p (op1, target);\n-}\n-\n-\n /* Generate code to perform an operation specified by BINOPTAB\n    on operands OP0 and OP1, with result having machine-mode MODE.\n \n@@ -1083,15 +1061,24 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n   /* Record where to delete back to if we backtrack.  */\n   last = get_last_insn ();\n \n-  /* If operation is commutative, canonicalize the order of the operands.  */\n+  /* If operation is commutative,\n+     try to make the first operand a register.\n+     Even better, try to make it the same as the target.\n+     Also try to make the last operand a constant.  */\n   if (GET_RTX_CLASS (binoptab->code) == RTX_COMM_ARITH\n       || binoptab == smul_widen_optab\n       || binoptab == umul_widen_optab\n       || binoptab == smul_highpart_optab\n       || binoptab == umul_highpart_optab)\n     {\n       commutative_op = 1;\n-      if (swap_commutative_operands_with_target (target, op0, op1))\n+\n+      if (((target == 0 || REG_P (target))\n+\t   ? ((REG_P (op1)\n+\t       && !REG_P (op0))\n+\t      || target == op1)\n+\t   : rtx_equal_p (op1, target))\n+\t  || GET_CODE (op0) == CONST_INT)\n \t{\n \t  temp = op1;\n \t  op1 = op0;"}]}