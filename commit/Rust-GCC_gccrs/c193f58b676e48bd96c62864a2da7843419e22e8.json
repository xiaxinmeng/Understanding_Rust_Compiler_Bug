{"sha": "c193f58b676e48bd96c62864a2da7843419e22e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5M2Y1OGI2NzZlNDhiZDk2YzYyODY0YTJkYTc4NDM0MTllMjJlOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-11-29T10:36:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-11-29T10:36:10Z"}, "message": "re PR lto/59326 (FAIL: gcc.dg/vect/vect-simd-clone-*.c)\n\n\tPR lto/59326\n\t* tree-core.h (enum omp_clause_schedule_kind): Add\n\tOMP_CLAUSE_SCHEDULE_LAST.\n\t(enum omp_clause_default_kind): Add OMP_CLAUSE_DEFAULT_LAST.\n\t(enum omp_clause_depend_kind): Add OMP_CLAUSE_DEPEND_LAST.\n\t(enum omp_clause_map_kind): Add OMP_CLAUSE_MAP_LAST.\n\t(enum omp_clause_proc_bind_kind): Add OMP_CLAUSE_PROC_BIND_LAST.\n\t* lto-streamer-out.c (lto_is_streamable): Allow streaming\n\tOMP_CLAUSE.\n\t(DFS_write_tree_body): Handle OMP_CLAUSE.\n\t* tree-streamer-out.c (pack_ts_omp_clause_value_fields): New\n\tfunction.\n\t(streamer_pack_tree_bitfields): Call it for OMP_CLAUSE.\n\t(write_ts_omp_clause_tree_pointers): New function.\n\t(streamer_write_tree_body): Call it for OMP_CLAUSE.\n\t(streamer_write_tree_header): For OMP_CLAUSE stream OMP_CLAUSE_CODE.\n\t* tree-streamer-in.c (unpack_ts_omp_clause_value_fields): New\n\tfunction.\n\t(unpack_value_fields): Call it for OMP_CLAUSE.\n\t(streamer_alloc_tree): Handle OMP_CLAUSE.\n\t(lto_input_ts_omp_clause_tree_pointers): New function.\n\t(streamer_read_tree_body): Call it for OMP_CLAUSE.\nlto/\n\t* lto.c (mentions_vars_p_omp_clause): New function.\n\t(mentions_vars_p): Call it for OMP_CLAUSE.  Remove break;\n\tafter return stmts.\n\nFrom-SVN: r205512", "tree": {"sha": "03e83d5dac4b9d1257c9b47f47f7a4c745098503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e83d5dac4b9d1257c9b47f47f7a4c745098503"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c193f58b676e48bd96c62864a2da7843419e22e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c193f58b676e48bd96c62864a2da7843419e22e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c193f58b676e48bd96c62864a2da7843419e22e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c193f58b676e48bd96c62864a2da7843419e22e8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fad7652e6e9077252612963bc5a0e35015df3753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad7652e6e9077252612963bc5a0e35015df3753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fad7652e6e9077252612963bc5a0e35015df3753"}], "stats": {"total": 221, "additions": 207, "deletions": 14}, "files": [{"sha": "791eaef31642cefcf4ef8b745217a4ae77ed5a99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c193f58b676e48bd96c62864a2da7843419e22e8", "patch": "@@ -1,3 +1,28 @@\n+2013-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR lto/59326\n+\t* tree-core.h (enum omp_clause_schedule_kind): Add\n+\tOMP_CLAUSE_SCHEDULE_LAST.\n+\t(enum omp_clause_default_kind): Add OMP_CLAUSE_DEFAULT_LAST.\n+\t(enum omp_clause_depend_kind): Add OMP_CLAUSE_DEPEND_LAST.\n+\t(enum omp_clause_map_kind): Add OMP_CLAUSE_MAP_LAST.\n+\t(enum omp_clause_proc_bind_kind): Add OMP_CLAUSE_PROC_BIND_LAST.\n+\t* lto-streamer-out.c (lto_is_streamable): Allow streaming\n+\tOMP_CLAUSE.\n+\t(DFS_write_tree_body): Handle OMP_CLAUSE.\n+\t* tree-streamer-out.c (pack_ts_omp_clause_value_fields): New\n+\tfunction.\n+\t(streamer_pack_tree_bitfields): Call it for OMP_CLAUSE.\n+\t(write_ts_omp_clause_tree_pointers): New function.\n+\t(streamer_write_tree_body): Call it for OMP_CLAUSE.\n+\t(streamer_write_tree_header): For OMP_CLAUSE stream OMP_CLAUSE_CODE.\n+\t* tree-streamer-in.c (unpack_ts_omp_clause_value_fields): New\n+\tfunction.\n+\t(unpack_value_fields): Call it for OMP_CLAUSE.\n+\t(streamer_alloc_tree): Handle OMP_CLAUSE.\n+\t(lto_input_ts_omp_clause_tree_pointers): New function.\n+\t(streamer_read_tree_body): Call it for OMP_CLAUSE.\n+\n 2013-11-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/implement-c.texi: Document C11 implementation-defined"}, {"sha": "2821001aa0e079a0bee0afcceec08d9adee80396", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=c193f58b676e48bd96c62864a2da7843419e22e8", "patch": "@@ -299,7 +299,6 @@ lto_is_streamable (tree expr)\n \t && code != BIND_EXPR\n \t && code != WITH_CLEANUP_EXPR\n \t && code != STATEMENT_LIST\n-\t && code != OMP_CLAUSE\n \t && (code == CASE_LABEL_EXPR\n \t     || code == DECL_EXPR\n \t     || TREE_CODE_CLASS (code) != tcc_statement);\n@@ -669,6 +668,14 @@ DFS_write_tree_body (struct output_block *ob,\n \t}\n     }\n \n+  if (code == OMP_CLAUSE)\n+    {\n+      int i;\n+      for (i = 0; i < omp_clause_num_ops[OMP_CLAUSE_CODE (expr)]; i++)\n+\tDFS_follow_tree_edge (OMP_CLAUSE_OPERAND (expr, i));\n+      DFS_follow_tree_edge (OMP_CLAUSE_CHAIN (expr));\n+    }\n+\n #undef DFS_follow_tree_edge\n }\n "}, {"sha": "3ce3a32c16474127961970933b31558871289572", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=c193f58b676e48bd96c62864a2da7843419e22e8", "patch": "@@ -1,3 +1,10 @@\n+2013-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR lto/59326\n+\t* lto.c (mentions_vars_p_omp_clause): New function.\n+\t(mentions_vars_p): Call it for OMP_CLAUSE.  Remove break;\n+\tafter return stmts.\n+\n 2013-11-22  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* lto.c: Add required include files from gimple.h."}, {"sha": "26084bf7d4119e0bf2a5aceb843458d0c91cb46d", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=c193f58b676e48bd96c62864a2da7843419e22e8", "patch": "@@ -904,6 +904,19 @@ mentions_vars_p_expr (tree t)\n   return false;\n }\n \n+/* Check presence of pointers to decls in fields of an OMP_CLAUSE T.  */\n+\n+static bool\n+mentions_vars_p_omp_clause (tree t)\n+{\n+  int i;\n+  if (mentions_vars_p_common (t))\n+    return true;\n+  for (i = omp_clause_num_ops[OMP_CLAUSE_CODE (t)] - 1; i >= 0; --i)\n+    CHECK_VAR (OMP_CLAUSE_OPERAND (t, i));\n+  return false;\n+}\n+\n /* Check presence of pointers to decls that needs later fixup in T.  */\n \n static bool\n@@ -922,7 +935,6 @@ mentions_vars_p (tree t)\n \n     case FIELD_DECL:\n       return mentions_vars_p_field_decl (t);\n-      break;\n \n     case LABEL_DECL:\n     case CONST_DECL:\n@@ -931,27 +943,21 @@ mentions_vars_p (tree t)\n     case IMPORTED_DECL:\n     case NAMESPACE_DECL:\n       return mentions_vars_p_decl_common (t);\n-      break;\n \n     case VAR_DECL:\n       return mentions_vars_p_decl_with_vis (t);\n-      break;\n \n     case TYPE_DECL:\n       return mentions_vars_p_decl_non_common (t);\n-      break;\n \n     case FUNCTION_DECL:\n       return mentions_vars_p_function (t);\n-      break;\n \n     case TREE_BINFO:\n       return mentions_vars_p_binfo (t);\n-      break;\n \n     case PLACEHOLDER_EXPR:\n       return mentions_vars_p_common (t);\n-      break;\n \n     case BLOCK:\n     case TRANSLATION_UNIT_DECL:\n@@ -961,7 +967,9 @@ mentions_vars_p (tree t)\n \n     case CONSTRUCTOR:\n       return mentions_vars_p_constructor (t);\n-      break;\n+\n+    case OMP_CLAUSE:\n+      return mentions_vars_p_omp_clause (t);\n \n     default:\n       if (TYPE_P (t))"}, {"sha": "6d23d979f72899198b0cc2d983f032295b9a2e13", "filename": "gcc/tree-core.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=c193f58b676e48bd96c62864a2da7843419e22e8", "patch": "@@ -350,15 +350,17 @@ enum omp_clause_schedule_kind {\n   OMP_CLAUSE_SCHEDULE_DYNAMIC,\n   OMP_CLAUSE_SCHEDULE_GUIDED,\n   OMP_CLAUSE_SCHEDULE_AUTO,\n-  OMP_CLAUSE_SCHEDULE_RUNTIME\n+  OMP_CLAUSE_SCHEDULE_RUNTIME,\n+  OMP_CLAUSE_SCHEDULE_LAST\n };\n \n enum omp_clause_default_kind {\n   OMP_CLAUSE_DEFAULT_UNSPECIFIED,\n   OMP_CLAUSE_DEFAULT_SHARED,\n   OMP_CLAUSE_DEFAULT_NONE,\n   OMP_CLAUSE_DEFAULT_PRIVATE,\n-  OMP_CLAUSE_DEFAULT_FIRSTPRIVATE\n+  OMP_CLAUSE_DEFAULT_FIRSTPRIVATE,\n+  OMP_CLAUSE_DEFAULT_LAST\n };\n \n /* There is a TYPE_QUAL value for each type qualifier.  They can be\n@@ -1110,7 +1112,8 @@ enum omp_clause_depend_kind\n {\n   OMP_CLAUSE_DEPEND_IN,\n   OMP_CLAUSE_DEPEND_OUT,\n-  OMP_CLAUSE_DEPEND_INOUT\n+  OMP_CLAUSE_DEPEND_INOUT,\n+  OMP_CLAUSE_DEPEND_LAST\n };\n \n enum omp_clause_map_kind\n@@ -1122,7 +1125,8 @@ enum omp_clause_map_kind\n   /* The following kind is an internal only map kind, used for pointer based\n      array sections.  OMP_CLAUSE_SIZE for these is not the pointer size,\n      which is implicitly POINTER_SIZE / BITS_PER_UNIT, but the bias.  */\n-  OMP_CLAUSE_MAP_POINTER\n+  OMP_CLAUSE_MAP_POINTER,\n+  OMP_CLAUSE_MAP_LAST\n };\n \n enum omp_clause_proc_bind_kind\n@@ -1132,7 +1136,8 @@ enum omp_clause_proc_bind_kind\n   OMP_CLAUSE_PROC_BIND_TRUE = 1,\n   OMP_CLAUSE_PROC_BIND_MASTER = 2,\n   OMP_CLAUSE_PROC_BIND_CLOSE = 3,\n-  OMP_CLAUSE_PROC_BIND_SPREAD = 4\n+  OMP_CLAUSE_PROC_BIND_SPREAD = 4,\n+  OMP_CLAUSE_PROC_BIND_LAST\n };\n \n struct GTY(()) tree_exp {"}, {"sha": "af7549f65ab899a2b4824f7b7903585943fff6c8", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=c193f58b676e48bd96c62864a2da7843419e22e8", "patch": "@@ -425,6 +425,48 @@ unpack_ts_optimization (struct bitpack_d *bp, tree expr)\n }\n \n \n+/* Unpack all the non-pointer fields of the TS_OMP_CLAUSE\n+   structure of expression EXPR from bitpack BP.  */\n+\n+static void\n+unpack_ts_omp_clause_value_fields (struct data_in *data_in,\n+\t\t\t\t   struct bitpack_d *bp, tree expr)\n+{\n+  OMP_CLAUSE_LOCATION (expr) = stream_input_location (bp, data_in);\n+  switch (OMP_CLAUSE_CODE (expr))\n+    {\n+    case OMP_CLAUSE_DEFAULT:\n+      OMP_CLAUSE_DEFAULT_KIND (expr)\n+\t= bp_unpack_enum (bp, omp_clause_default_kind,\n+\t\t\t  OMP_CLAUSE_DEFAULT_LAST);\n+      break;\n+    case OMP_CLAUSE_SCHEDULE:\n+      OMP_CLAUSE_SCHEDULE_KIND (expr)\n+\t= bp_unpack_enum (bp, omp_clause_schedule_kind,\n+\t\t\t  OMP_CLAUSE_SCHEDULE_LAST);\n+      break;\n+    case OMP_CLAUSE_DEPEND:\n+      OMP_CLAUSE_DEPEND_KIND (expr)\n+\t= bp_unpack_enum (bp, omp_clause_depend_kind, OMP_CLAUSE_DEPEND_LAST);\n+      break;\n+    case OMP_CLAUSE_MAP:\n+      OMP_CLAUSE_MAP_KIND (expr)\n+\t= bp_unpack_enum (bp, omp_clause_map_kind, OMP_CLAUSE_MAP_LAST);\n+      break;\n+    case OMP_CLAUSE_PROC_BIND:\n+      OMP_CLAUSE_PROC_BIND_KIND (expr)\n+\t= bp_unpack_enum (bp, omp_clause_proc_bind_kind,\n+\t\t\t  OMP_CLAUSE_PROC_BIND_LAST);\n+      break;\n+    case OMP_CLAUSE_REDUCTION:\n+      OMP_CLAUSE_REDUCTION_CODE (expr)\n+\t= bp_unpack_enum (bp, tree_code, MAX_TREE_CODES);\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n /* Unpack all the non-pointer fields in EXPR into a bit pack.  */\n \n static void\n@@ -493,6 +535,9 @@ unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n       if (length > 0)\n \tvec_safe_grow (CONSTRUCTOR_ELTS (expr), length);\n     }\n+\n+  if (code == OMP_CLAUSE)\n+    unpack_ts_omp_clause_value_fields (data_in, bp, expr);\n }\n \n \n@@ -578,6 +623,12 @@ streamer_alloc_tree (struct lto_input_block *ib, struct data_in *data_in,\n       unsigned HOST_WIDE_INT nargs = streamer_read_uhwi (ib);\n       return build_vl_exp (CALL_EXPR, nargs + 3);\n     }\n+  else if (code == OMP_CLAUSE)\n+    {\n+      enum omp_clause_code subcode\n+\t= (enum omp_clause_code) streamer_read_uhwi (ib);\n+      return build_omp_clause (UNKNOWN_LOCATION, subcode);\n+    }\n   else\n     {\n       /* For all other nodes, materialize the tree with a raw\n@@ -960,6 +1011,22 @@ lto_input_ts_constructor_tree_pointers (struct lto_input_block *ib,\n }\n \n \n+/* Read all pointer fields in the TS_OMP_CLAUSE structure of EXPR from\n+   input block IB.  DATA_IN contains tables and descriptors for the\n+   file being read.  */\n+\n+static void\n+lto_input_ts_omp_clause_tree_pointers (struct lto_input_block *ib,\n+\t\t\t\t       struct data_in *data_in, tree expr)\n+{\n+  int i;\n+\n+  for (i = 0; i < omp_clause_num_ops[OMP_CLAUSE_CODE (expr)]; i++)\n+    OMP_CLAUSE_OPERAND (expr, i) = stream_read_tree (ib, data_in);\n+  OMP_CLAUSE_CHAIN (expr) = stream_read_tree (ib, data_in);\n+}\n+\n+\n /* Read all pointer fields in EXPR from input block IB.  DATA_IN\n    contains tables and descriptors for the file being read.  */\n \n@@ -1021,6 +1088,9 @@ streamer_read_tree_body (struct lto_input_block *ib, struct data_in *data_in,\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     lto_input_ts_constructor_tree_pointers (ib, data_in, expr);\n+\n+  if (code == OMP_CLAUSE)\n+    lto_input_ts_omp_clause_tree_pointers (ib, data_in, expr);\n }\n \n "}, {"sha": "b86092aef4ef11702ed5bbe41ba5f5bdcc2abf65", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c193f58b676e48bd96c62864a2da7843419e22e8/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=c193f58b676e48bd96c62864a2da7843419e22e8", "patch": "@@ -390,6 +390,46 @@ pack_ts_optimization (struct bitpack_d *bp, tree expr)\n }\n \n \n+/* Pack all the non-pointer fields of the TS_OMP_CLAUSE structure\n+   of expression EXPR into bitpack BP.  */\n+\n+static void\n+pack_ts_omp_clause_value_fields (struct output_block *ob,\n+\t\t\t\t struct bitpack_d *bp, tree expr)\n+{\n+  stream_output_location (ob, bp, OMP_CLAUSE_LOCATION (expr));\n+  switch (OMP_CLAUSE_CODE (expr))\n+    {\n+    case OMP_CLAUSE_DEFAULT:\n+      bp_pack_enum (bp, omp_clause_default_kind, OMP_CLAUSE_DEFAULT_LAST,\n+\t\t    OMP_CLAUSE_DEFAULT_KIND (expr));\n+      break;\n+    case OMP_CLAUSE_SCHEDULE:\n+      bp_pack_enum (bp, omp_clause_schedule_kind, OMP_CLAUSE_SCHEDULE_LAST,\n+\t\t    OMP_CLAUSE_SCHEDULE_KIND (expr));\n+      break;\n+    case OMP_CLAUSE_DEPEND:\n+      bp_pack_enum (bp, omp_clause_depend_kind, OMP_CLAUSE_DEPEND_LAST,\n+\t\t    OMP_CLAUSE_DEPEND_KIND (expr));\n+      break;\n+    case OMP_CLAUSE_MAP:\n+      bp_pack_enum (bp, omp_clause_map_kind, OMP_CLAUSE_MAP_LAST,\n+\t\t    OMP_CLAUSE_MAP_KIND (expr));\n+      break;\n+    case OMP_CLAUSE_PROC_BIND:\n+      bp_pack_enum (bp, omp_clause_proc_bind_kind, OMP_CLAUSE_PROC_BIND_LAST,\n+\t\t    OMP_CLAUSE_PROC_BIND_KIND (expr));\n+      break;\n+    case OMP_CLAUSE_REDUCTION:\n+      bp_pack_enum (bp, tree_code, MAX_TREE_CODES,\n+\t\t    OMP_CLAUSE_REDUCTION_CODE (expr));\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n+\n /* Pack all the bitfields in EXPR into a bit pack.  */\n \n void\n@@ -451,6 +491,9 @@ streamer_pack_tree_bitfields (struct output_block *ob,\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     bp_pack_var_len_unsigned (bp, CONSTRUCTOR_NELTS (expr));\n+\n+  if (code == OMP_CLAUSE)\n+    pack_ts_omp_clause_value_fields (ob, bp, expr);\n }\n \n \n@@ -853,6 +896,29 @@ write_ts_constructor_tree_pointers (struct output_block *ob, tree expr,\n     }\n }\n \n+\n+/* Write all pointer fields in the TS_OMP_CLAUSE structure of EXPR\n+   to output block OB.  If REF_P is true, write a reference to EXPR's\n+   pointer fields.  */\n+\n+static void\n+write_ts_omp_clause_tree_pointers (struct output_block *ob, tree expr,\n+\t\t\t\t   bool ref_p)\n+{\n+  int i;\n+  for (i = 0; i < omp_clause_num_ops[OMP_CLAUSE_CODE (expr)]; i++)\n+    stream_write_tree (ob, OMP_CLAUSE_OPERAND (expr, i), ref_p);\n+  if (OMP_CLAUSE_CODE (expr) == OMP_CLAUSE_REDUCTION)\n+    {\n+      /* We don't stream these right now, handle it if streaming\n+\t of them is needed.  */\n+      gcc_assert (OMP_CLAUSE_REDUCTION_GIMPLE_INIT (expr) == NULL);\n+      gcc_assert (OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (expr) == NULL);\n+    }\n+  stream_write_tree (ob, OMP_CLAUSE_CHAIN (expr), ref_p);\n+}\n+\n+\n /* Write all pointer fields in EXPR to output block OB.  If REF_P is true,\n    the leaves of EXPR are emitted as references.  */\n \n@@ -915,6 +981,9 @@ streamer_write_tree_body (struct output_block *ob, tree expr, bool ref_p)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     write_ts_constructor_tree_pointers (ob, expr, ref_p);\n+\n+  if (code == OMP_CLAUSE)\n+    write_ts_omp_clause_tree_pointers (ob, expr, ref_p);\n }\n \n \n@@ -963,6 +1032,8 @@ streamer_write_tree_header (struct output_block *ob, tree expr)\n     streamer_write_uhwi (ob, BINFO_N_BASE_BINFOS (expr));\n   else if (TREE_CODE (expr) == CALL_EXPR)\n     streamer_write_uhwi (ob, call_expr_nargs (expr));\n+  else if (TREE_CODE (expr) == OMP_CLAUSE)\n+    streamer_write_uhwi (ob, OMP_CLAUSE_CODE (expr));\n }\n \n "}]}