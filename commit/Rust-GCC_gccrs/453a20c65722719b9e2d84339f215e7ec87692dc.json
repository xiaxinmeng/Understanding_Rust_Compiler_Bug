{"sha": "453a20c65722719b9e2d84339f215e7ec87692dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUzYTIwYzY1NzIyNzE5YjllMmQ4NDMzOWYyMTVlN2VjODc2OTJkYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-09-14T15:52:27Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-09-16T12:26:19Z"}, "message": "rtl_data: Add sp_is_clobbered_by_asm\n\nAdd sp_is_clobbered_by_asm to rtl_data to inform backends that the stack\npointer is clobbered by asm statement.\n\ngcc/\n\n\tPR target/97032\n\t* cfgexpand.c (asm_clobber_reg_kind): Set sp_is_clobbered_by_asm\n\tto true if the stack pointer is clobbered by asm statement.\n\t* emit-rtl.h (rtl_data): Add sp_is_clobbered_by_asm.\n\t* config/i386/i386.c (ix86_get_drap_rtx): Set need_drap to true\n\tif the stack pointer is clobbered by asm statement.\n\ngcc/testsuite/\n\n\tPR target/97032\n\t* gcc.target/i386/pr97032.c: New test.", "tree": {"sha": "8daea27aac33fe804d008a44c3286bd5e13fcbc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8daea27aac33fe804d008a44c3286bd5e13fcbc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/453a20c65722719b9e2d84339f215e7ec87692dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453a20c65722719b9e2d84339f215e7ec87692dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453a20c65722719b9e2d84339f215e7ec87692dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453a20c65722719b9e2d84339f215e7ec87692dc/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f419a0158950034ed9996ae860b0c8df03731119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f419a0158950034ed9996ae860b0c8df03731119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f419a0158950034ed9996ae860b0c8df03731119"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "1eaa1da11b9714dacfc51f3ffb774a62500bfa6c", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453a20c65722719b9e2d84339f215e7ec87692dc/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453a20c65722719b9e2d84339f215e7ec87692dc/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=453a20c65722719b9e2d84339f215e7ec87692dc", "patch": "@@ -2868,11 +2868,15 @@ asm_clobber_reg_is_valid (int regno, int nregs, const char *regname)\n      as it was before, so no asm can validly clobber the stack pointer in\n      the usual sense.  Adding the stack pointer to the clobber list has\n      traditionally had some undocumented and somewhat obscure side-effects.  */\n-  if (overlaps_hard_reg_set_p (regset, Pmode, STACK_POINTER_REGNUM)\n-      && warning (OPT_Wdeprecated, \"listing the stack pointer register\"\n-\t\t  \" %qs in a clobber list is deprecated\", regname))\n-    inform (input_location, \"the value of the stack pointer after an %<asm%>\"\n-\t    \" statement must be the same as it was before the statement\");\n+  if (overlaps_hard_reg_set_p (regset, Pmode, STACK_POINTER_REGNUM))\n+    {\n+      crtl->sp_is_clobbered_by_asm = true;\n+      if (warning (OPT_Wdeprecated, \"listing the stack pointer register\"\n+\t\t   \" %qs in a clobber list is deprecated\", regname))\n+\tinform (input_location, \"the value of the stack pointer after\"\n+\t\t\" an %<asm%> statement must be the same as it was before\"\n+\t\t\" the statement\");\n+    }\n \n   return is_valid;\n }"}, {"sha": "c890a73329398eb4fdb02db1184651932c893356", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453a20c65722719b9e2d84339f215e7ec87692dc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453a20c65722719b9e2d84339f215e7ec87692dc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=453a20c65722719b9e2d84339f215e7ec87692dc", "patch": "@@ -6968,10 +6968,12 @@ ix86_update_stack_boundary (void)\n static rtx\n ix86_get_drap_rtx (void)\n {\n-  /* We must use DRAP if there are outgoing arguments on stack and\n+  /* We must use DRAP if there are outgoing arguments on stack or\n+     the stack pointer register is clobbered by asm statment and\n      ACCUMULATE_OUTGOING_ARGS is false.  */\n   if (ix86_force_drap\n-      || (cfun->machine->outgoing_args_on_stack\n+      || ((cfun->machine->outgoing_args_on_stack\n+\t   || crtl->sp_is_clobbered_by_asm)\n \t  && !ACCUMULATE_OUTGOING_ARGS))\n     crtl->need_drap = true;\n "}, {"sha": "92ad0dd6fc0e1b010d053b8e6c18492489b9b785", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453a20c65722719b9e2d84339f215e7ec87692dc/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453a20c65722719b9e2d84339f215e7ec87692dc/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=453a20c65722719b9e2d84339f215e7ec87692dc", "patch": "@@ -281,6 +281,9 @@ struct GTY(()) rtl_data {\n      pass_stack_ptr_mod has run.  */\n   bool sp_is_unchanging;\n \n+  /* True if the stack pointer is clobbered by asm statement.  */\n+  bool sp_is_clobbered_by_asm;\n+\n   /* Nonzero if function being compiled doesn't contain any calls\n      (ignoring the prologue and epilogue).  This is set prior to\n      register allocation in IRA and is valid for the remaining"}, {"sha": "7cbbe9bc22aa8fbc9b24c90bcde1dfd08a0dc0bd", "filename": "gcc/testsuite/gcc.target/i386/pr97032.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453a20c65722719b9e2d84339f215e7ec87692dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97032.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453a20c65722719b9e2d84339f215e7ec87692dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97032.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97032.c?ref=453a20c65722719b9e2d84339f215e7ec87692dc", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target { ia32 && fstack_protector } } } */\n+/* { dg-options \"-O2 -mincoming-stack-boundary=2 -fstack-protector-all\" } */\n+\n+#include <stdarg.h>\n+\n+extern int *__errno_location (void);\n+\n+long\n+sys_socketcall (int op, ...)\n+{\n+  long int res;\n+  va_list ap;\n+  va_start (ap, op);\n+  asm volatile (\"push %%ebx; movl %2, %%ebx; int $0x80; pop %%ebx\"\n+  /* { dg-warning \"listing the stack pointer register\" \"\" { target *-*-* } .-1 } */\n+\t\t: \"=a\" (res) : \"0\" (102), \"ri\" (16), \"c\" (ap) : \"memory\", \"esp\");\n+  if (__builtin_expect (res > 4294963200UL, 0))\n+    *__errno_location () = -res;\n+  va_end (ap);\n+  return res;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*_?__errno_location\" } } */"}]}