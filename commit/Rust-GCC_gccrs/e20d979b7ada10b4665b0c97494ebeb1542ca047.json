{"sha": "e20d979b7ada10b4665b0c97494ebeb1542ca047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIwZDk3OWI3YWRhMTBiNDY2NWIwYzk3NDk0ZWJlYjE1NDJjYTA0Nw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2018-09-04T11:58:14Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2018-09-04T11:58:14Z"}, "message": "tree-vrp.c (vrp_can_optimize_bit_op): Remove.\n\n\t* tree-vrp.c (vrp_can_optimize_bit_op): Remove.\n\t(extract_range_from_binary_expr_1): Do not call\n\tvrp_can_optimize_bit_op.\n\t* wide-int-range.cc (wide_int_range_can_optimize_bit_op): Make\n\tstatic.\n\t(wide_int_range_get_mask_and_bounds): New.\n\t(wide_int_range_optimize_bit_op): New.\n\t(wide_int_range_bit_ior): Call wide_int_range_optimize_bit_op.\n\t(wide_int_range_bit_and): Same.\n\t* wide-int-range.h (wide_int_range_can_optimize_bit_op): Remove.\n\t(wide_int_range_optimize_bit_op): New.\n\t(wide_int_range_get_mask_and_bounds): New.\n\nFrom-SVN: r264078", "tree": {"sha": "3be8845280bfbb517dc9181b72b69a9121603092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3be8845280bfbb517dc9181b72b69a9121603092"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e20d979b7ada10b4665b0c97494ebeb1542ca047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e20d979b7ada10b4665b0c97494ebeb1542ca047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e20d979b7ada10b4665b0c97494ebeb1542ca047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e20d979b7ada10b4665b0c97494ebeb1542ca047/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2c51a3e358294b5ddfa522fa4d973c3360699b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2c51a3e358294b5ddfa522fa4d973c3360699b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2c51a3e358294b5ddfa522fa4d973c3360699b4"}], "stats": {"total": 151, "additions": 100, "deletions": 51}, "files": [{"sha": "afa7e5bf69e5d2bc0a52d2324d97be9e21199141", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e20d979b7ada10b4665b0c97494ebeb1542ca047/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e20d979b7ada10b4665b0c97494ebeb1542ca047/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e20d979b7ada10b4665b0c97494ebeb1542ca047", "patch": "@@ -1,3 +1,18 @@\n+2018-09-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (vrp_can_optimize_bit_op): Remove.\n+\t(extract_range_from_binary_expr_1): Do not call\n+\tvrp_can_optimize_bit_op.\n+\t* wide-int-range.cc (wide_int_range_can_optimize_bit_op): Make\n+\tstatic.\n+\t(wide_int_range_get_mask_and_bounds): New.\n+\t(wide_int_range_optimize_bit_op): New.\n+\t(wide_int_range_bit_ior): Call wide_int_range_optimize_bit_op.\n+\t(wide_int_range_bit_and): Same.\n+\t* wide-int-range.h (wide_int_range_can_optimize_bit_op): Remove.\n+\t(wide_int_range_optimize_bit_op): New.\n+\t(wide_int_range_get_mask_and_bounds): New.\n+\n 2018-09-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87176"}, {"sha": "d29a2c9b507757bbd65f604b7e650bf14dd4d3dc", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e20d979b7ada10b4665b0c97494ebeb1542ca047/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e20d979b7ada10b4665b0c97494ebeb1542ca047/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=e20d979b7ada10b4665b0c97494ebeb1542ca047", "patch": "@@ -1067,49 +1067,6 @@ extract_range_from_multiplicative_op (value_range *vr,\n     set_value_range_to_varying (vr);\n }\n \n-/* Value range wrapper for wide_int_range_can_optimize_bit_op.\n-\n-   If a bit operation on two ranges can be easily optimized in terms\n-   of a mask, store the optimized new range in VR and return TRUE.  */\n-\n-static bool\n-vrp_can_optimize_bit_op (value_range *vr, enum tree_code code,\n-\t\t\t const value_range *vr0, const value_range *vr1)\n-{\n-  tree lower_bound, upper_bound, mask;\n-  if (code != BIT_AND_EXPR && code != BIT_IOR_EXPR)\n-    return false;\n-  if (range_int_cst_singleton_p (vr1))\n-    {\n-      if (!range_int_cst_p (vr0))\n-\treturn false;\n-      mask = vr1->min;\n-      lower_bound = vr0->min;\n-      upper_bound = vr0->max;\n-    }\n-  else if (range_int_cst_singleton_p (vr0))\n-    {\n-      if (!range_int_cst_p (vr1))\n-\treturn false;\n-      mask = vr0->min;\n-      lower_bound = vr1->min;\n-      upper_bound = vr1->max;\n-    }\n-  else\n-    return false;\n-  if (wide_int_range_can_optimize_bit_op (code,\n-\t\t\t\t\t  wi::to_wide (lower_bound),\n-\t\t\t\t\t  wi::to_wide (upper_bound),\n-\t\t\t\t\t  wi::to_wide (mask)))\n-    {\n-      tree min = int_const_binop (code, lower_bound, mask);\n-      tree max = int_const_binop (code, upper_bound, mask);\n-      set_value_range (vr, VR_RANGE, min, max, NULL);\n-      return true;\n-    }\n-  return false;\n-}\n-\n /* If BOUND will include a symbolic bound, adjust it accordingly,\n    otherwise leave it as is.\n \n@@ -1704,9 +1661,6 @@ extract_range_from_binary_expr_1 (value_range *vr,\n     }\n   else if (code == BIT_AND_EXPR || code == BIT_IOR_EXPR || code == BIT_XOR_EXPR)\n     {\n-      if (vrp_can_optimize_bit_op (vr, code, &vr0, &vr1))\n-\treturn;\n-\n       wide_int may_be_nonzero0, may_be_nonzero1;\n       wide_int must_be_nonzero0, must_be_nonzero1;\n       wide_int wmin, wmax;"}, {"sha": "04d391b33d5ed3dd9a0b820f5a0e428f4eee033a", "filename": "gcc/wide-int-range.cc", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e20d979b7ada10b4665b0c97494ebeb1542ca047/gcc%2Fwide-int-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e20d979b7ada10b4665b0c97494ebeb1542ca047/gcc%2Fwide-int-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-range.cc?ref=e20d979b7ada10b4665b0c97494ebeb1542ca047", "patch": "@@ -403,7 +403,7 @@ wide_int_range_lshift (wide_int &res_lb, wide_int &res_ub,\n \n    It is up to the caller to perform the actual folding above.  */\n \n-bool\n+static bool\n wide_int_range_can_optimize_bit_op (tree_code code,\n \t\t\t\t    const wide_int &lb, const wide_int &ub,\n \t\t\t\t    const wide_int &mask)\n@@ -443,6 +443,68 @@ wide_int_range_can_optimize_bit_op (tree_code code,\n   return false;\n }\n \n+/* Helper function for wide_int_range_optimize_bit_op.\n+\n+   Calculates bounds and mask for a pair of ranges.  The mask is the\n+   singleton range among the ranges, if any.  The bounds are the\n+   bounds for the remaining range.  */\n+\n+bool\n+wide_int_range_get_mask_and_bounds (wide_int &mask,\n+\t\t\t\t    wide_int &lower_bound,\n+\t\t\t\t    wide_int &upper_bound,\n+\t\t\t\t    const wide_int &vr0_min,\n+\t\t\t\t    const wide_int &vr0_max,\n+\t\t\t\t    const wide_int &vr1_min,\n+\t\t\t\t    const wide_int &vr1_max)\n+{\n+  if (wi::eq_p (vr1_min, vr1_max))\n+    {\n+      mask = vr1_min;\n+      lower_bound = vr0_min;\n+      upper_bound = vr0_max;\n+      return true;\n+    }\n+  else if (wi::eq_p (vr0_min, vr0_max))\n+    {\n+      mask = vr0_min;\n+      lower_bound = vr1_min;\n+      upper_bound = vr1_max;\n+      return true;\n+    }\n+  return false;\n+}\n+\n+/* Optimize a bit operation (BIT_AND_EXPR or BIT_IOR_EXPR) if\n+   possible.  If so, return TRUE and store the result in\n+   [RES_LB, RES_UB].  */\n+\n+bool\n+wide_int_range_optimize_bit_op (wide_int &res_lb, wide_int &res_ub,\n+\t\t\t\tenum tree_code code,\n+\t\t\t\tsignop sign,\n+\t\t\t\tconst wide_int &vr0_min,\n+\t\t\t\tconst wide_int &vr0_max,\n+\t\t\t\tconst wide_int &vr1_min,\n+\t\t\t\tconst wide_int &vr1_max)\n+{\n+  gcc_assert (code == BIT_AND_EXPR || code == BIT_IOR_EXPR);\n+\n+  wide_int lower_bound, upper_bound, mask;\n+  if (!wide_int_range_get_mask_and_bounds (mask, lower_bound, upper_bound,\n+\t\t\t\t\t   vr0_min, vr0_max, vr1_min, vr1_max))\n+    return false;\n+  if (wide_int_range_can_optimize_bit_op (code,\n+\t\t\t\t\t  lower_bound, upper_bound, mask))\n+    {\n+      wi::overflow_type ovf;\n+      wide_int_binop (res_lb, code, lower_bound, mask, sign, &ovf);\n+      wide_int_binop (res_ub, code, upper_bound, mask, sign, &ovf);\n+      return true;\n+    }\n+  return false;\n+}\n+\n /* Calculate the XOR of two ranges and store the result in [WMIN,WMAX].\n    The two input ranges are described by their MUST_BE_NONZERO and\n    MAY_BE_NONZERO bit masks.\n@@ -489,6 +551,10 @@ wide_int_range_bit_ior (wide_int &wmin, wide_int &wmax,\n \t\t\tconst wide_int &must_be_nonzero1,\n \t\t\tconst wide_int &may_be_nonzero1)\n {\n+  if (wide_int_range_optimize_bit_op (wmin, wmax, BIT_IOR_EXPR, sign,\n+\t\t\t\t      vr0_min, vr0_max,\n+\t\t\t\t      vr1_min, vr1_max))\n+    return true;\n   wmin = must_be_nonzero0 | must_be_nonzero1;\n   wmax = may_be_nonzero0 | may_be_nonzero1;\n   /* If the input ranges contain only positive values we can\n@@ -530,6 +596,10 @@ wide_int_range_bit_and (wide_int &wmin, wide_int &wmax,\n \t\t\tconst wide_int &must_be_nonzero1,\n \t\t\tconst wide_int &may_be_nonzero1)\n {\n+  if (wide_int_range_optimize_bit_op (wmin, wmax, BIT_AND_EXPR, sign,\n+\t\t\t\t      vr0_min, vr0_max,\n+\t\t\t\t      vr1_min, vr1_max))\n+    return true;\n   wmin = must_be_nonzero0 & must_be_nonzero1;\n   wmax = may_be_nonzero0 & may_be_nonzero1;\n   /* If both input ranges contain only negative values we can"}, {"sha": "eaf47bca44911bfede8bb9d9946b77b54f800a95", "filename": "gcc/wide-int-range.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e20d979b7ada10b4665b0c97494ebeb1542ca047/gcc%2Fwide-int-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e20d979b7ada10b4665b0c97494ebeb1542ca047/gcc%2Fwide-int-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-range.h?ref=e20d979b7ada10b4665b0c97494ebeb1542ca047", "patch": "@@ -55,10 +55,20 @@ extern void wide_int_range_set_zero_nonzero_bits (signop,\n \t\t\t\t\t\t  const wide_int &ub,\n \t\t\t\t\t\t  wide_int &may_be_nonzero,\n \t\t\t\t\t\t  wide_int &must_be_nonzero);\n-extern bool wide_int_range_can_optimize_bit_op (tree_code,\n-\t\t\t\t\t\tconst wide_int &lb,\n-\t\t\t\t\t\tconst wide_int &ub,\n-\t\t\t\t\t\tconst wide_int &mask);\n+extern bool wide_int_range_optimize_bit_op (wide_int &res_lb, wide_int &res_ub,\n+\t\t\t\t\t    enum tree_code code,\n+\t\t\t\t\t    signop sign,\n+\t\t\t\t\t    const wide_int &vr0_lb,\n+\t\t\t\t\t    const wide_int &vr0_ub,\n+\t\t\t\t\t    const wide_int &vr1_lb,\n+\t\t\t\t\t    const wide_int &vr1_ub);\n+extern bool wide_int_range_get_mask_and_bounds (wide_int &mask,\n+\t\t\t\t\t\twide_int &lower_bound,\n+\t\t\t\t\t\twide_int &upper_bound,\n+\t\t\t\t\t\tconst wide_int &vr0_min,\n+\t\t\t\t\t\tconst wide_int &vr0_max,\n+\t\t\t\t\t\tconst wide_int &vr1_min,\n+\t\t\t\t\t\tconst wide_int &vr1_max);\n extern bool wide_int_range_bit_xor (wide_int &wmin, wide_int &wmax,\n \t\t\t\t    signop sign,\n \t\t\t\t    unsigned prec,"}]}