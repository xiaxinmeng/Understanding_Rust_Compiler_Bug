{"sha": "2c80712872be90ceda8afb904e3b1f8d6501d070", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4MDcxMjg3MmJlOTBjZWRhOGFmYjkwNGUzYjFmOGQ2NTAxZDA3MA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-10-26T17:38:42Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-10-26T17:38:42Z"}, "message": "re PR fortran/42647 ([F03] Missed initialization/dealloc of allocatable scalar DT with allocatable component)\n\n2010-10-26  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42647\n\t* trans.h (gfc_deallocate_scalar_with_status): New prototype.\n\t* trans.c (gfc_deallocate_scalar_with_status): New function for\n\tdeallocation of allocatable scalars.\n\t* trans-array.c (structure_alloc_comps): Call it here ...\n\t* trans-decl.c (gfc_trans_deferred_vars): ... here ...\n\t* trans-stmt.c (gfc_trans_deallocate): ... and here.\n\n2010-10-26  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42647\n\t* gfortran.dg/allocatable_scalar_9.f90: Extended.\n\t* gfortran.dg/allocatable_scalar_10.f90: New.\n\t* gfortran.dg/class_19.f03: Extended.\n\nFrom-SVN: r165973", "tree": {"sha": "94b46a9fc603f6f0d3a211f16ef784d84c96bfaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94b46a9fc603f6f0d3a211f16ef784d84c96bfaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c80712872be90ceda8afb904e3b1f8d6501d070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c80712872be90ceda8afb904e3b1f8d6501d070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c80712872be90ceda8afb904e3b1f8d6501d070", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c80712872be90ceda8afb904e3b1f8d6501d070/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "530f3a1bf62964c0c52d6fcf4ca0d321ce9d5156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530f3a1bf62964c0c52d6fcf4ca0d321ce9d5156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530f3a1bf62964c0c52d6fcf4ca0d321ce9d5156"}], "stats": {"total": 210, "additions": 174, "deletions": 36}, "files": [{"sha": "c4c3608a76d76549c5e1ab801bfa5f417e4e237f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2c80712872be90ceda8afb904e3b1f8d6501d070", "patch": "@@ -1,3 +1,13 @@\n+2010-10-26  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42647\n+\t* trans.h (gfc_deallocate_scalar_with_status): New prototype.\n+\t* trans.c (gfc_deallocate_scalar_with_status): New function for\n+\tdeallocation of allocatable scalars.\n+\t* trans-array.c (structure_alloc_comps): Call it here ...\n+\t* trans-decl.c (gfc_trans_deferred_vars): ... here ...\n+\t* trans-stmt.c (gfc_trans_deallocate): ... and here.\n+\n 2010-10-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45451"}, {"sha": "47ee8fdf83d417dbc995f4c9c536fa5f4f1388c5", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=2c80712872be90ceda8afb904e3b1f8d6501d070", "patch": "@@ -6281,22 +6281,18 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n       switch (purpose)\n \t{\n \tcase DEALLOCATE_ALLOC_COMP:\n-\t  /* Do not deallocate the components of ultimate pointer\n-\t     components.  */\n-\t  if (cmp_has_alloc_comps && !c->attr.pointer)\n-\t    {\n-\t      comp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n-\t\t\t\t      decl, cdecl, NULL_TREE);\n-\t      rank = c->as ? c->as->rank : 0;\n-\t      tmp = structure_alloc_comps (c->ts.u.derived, comp, NULL_TREE,\n-\t\t\t\t\t   rank, purpose);\n-\t      gfc_add_expr_to_block (&fnblock, tmp);\n-\t    }\n-\n \t  if (c->attr.allocatable && c->attr.dimension)\n \t    {\n \t      comp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n \t\t\t\t      decl, cdecl, NULL_TREE);\n+\t      if (cmp_has_alloc_comps && !c->attr.pointer)\n+\t\t{\n+\t\t  /* Do not deallocate the components of ultimate pointer\n+\t\t     components.  */\n+\t\t  tmp = structure_alloc_comps (c->ts.u.derived, comp, NULL_TREE,\n+\t\t\t\t\t       c->as->rank, purpose);\n+\t\t  gfc_add_expr_to_block (&fnblock, tmp);\n+\t\t}\n \t      tmp = gfc_trans_dealloc_allocated (comp);\n \t      gfc_add_expr_to_block (&fnblock, tmp);\n \t    }\n@@ -6306,7 +6302,8 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t      comp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n \t\t\t\t      decl, cdecl, NULL_TREE);\n \n-\t      tmp = gfc_deallocate_with_status (comp, NULL_TREE, true, NULL);\n+\t      tmp = gfc_deallocate_scalar_with_status (comp, NULL, true, NULL,\n+\t\t\t\t\t\t       c->ts);\n \t      gfc_add_expr_to_block (&fnblock, tmp);\n \n \t      tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n@@ -6325,7 +6322,8 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t      comp = fold_build3_loc (input_location, COMPONENT_REF,\n \t\t\t\t      TREE_TYPE (tmp), comp, tmp, NULL_TREE);\n \n-\t      tmp = gfc_deallocate_with_status (comp, NULL_TREE, true, NULL);\n+\t      tmp = gfc_deallocate_scalar_with_status (comp, NULL, true, NULL,\n+\t\t\t\t\t\t       CLASS_DATA (c)->ts);\n \t      gfc_add_expr_to_block (&fnblock, tmp);\n \n \t      tmp = fold_build2_loc (input_location, MODIFY_EXPR,"}, {"sha": "2c4ebbbee05fbe671795dc626c2adc4103eaadad", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=2c80712872be90ceda8afb904e3b1f8d6501d070", "patch": "@@ -3408,10 +3408,11 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \n \t      /* Deallocate when leaving the scope. Nullifying is not\n \t\t needed.  */\n-\t      tmp = NULL;\n \t      if (!sym->attr.result)\n-\t\ttmp = gfc_deallocate_with_status (se.expr, NULL_TREE,\n-\t\t\t\t\t\t  true, NULL);\n+\t\ttmp = gfc_deallocate_scalar_with_status (se.expr, NULL, true,\n+\t\t\t\t\t\t\t NULL, sym->ts);\n+\t      else\n+\t\ttmp = NULL;\n \t      gfc_add_init_cleanup (block, gfc_finish_block (&init), tmp);\n \t    }\n \t}"}, {"sha": "da790d8c49e57d1289ab86672fc21982cf54dae3", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=2c80712872be90ceda8afb904e3b1f8d6501d070", "patch": "@@ -4676,30 +4676,32 @@ gfc_trans_deallocate (gfc_code *code)\n       se.descriptor_only = 1;\n       gfc_conv_expr (&se, expr);\n \n-      if (expr->ts.type == BT_DERIVED && expr->ts.u.derived->attr.alloc_comp)\n-        {\n-\t  gfc_ref *ref;\n-\t  gfc_ref *last = NULL;\n-\t  for (ref = expr->ref; ref; ref = ref->next)\n-\t    if (ref->type == REF_COMPONENT)\n-\t      last = ref;\n-\n-\t  /* Do not deallocate the components of a derived type\n-\t     ultimate pointer component.  */\n-\t  if (!(last && last->u.c.component->attr.pointer)\n-\t\t&& !(!last && expr->symtree->n.sym->attr.pointer))\n+      if (expr->rank)\n+\t{\n+\t  if (expr->ts.type == BT_DERIVED && expr->ts.u.derived->attr.alloc_comp)\n \t    {\n-\t      tmp = gfc_deallocate_alloc_comp (expr->ts.u.derived, se.expr,\n-\t\t\t\t\t       expr->rank);\n-\t      gfc_add_expr_to_block (&se.pre, tmp);\n+\t      gfc_ref *ref;\n+\t      gfc_ref *last = NULL;\n+\t      for (ref = expr->ref; ref; ref = ref->next)\n+\t\tif (ref->type == REF_COMPONENT)\n+\t\t  last = ref;\n+\n+\t      /* Do not deallocate the components of a derived type\n+\t\tultimate pointer component.  */\n+\t      if (!(last && last->u.c.component->attr.pointer)\n+\t\t    && !(!last && expr->symtree->n.sym->attr.pointer))\n+\t\t{\n+\t\t  tmp = gfc_deallocate_alloc_comp (expr->ts.u.derived, se.expr,\n+\t\t\t\t\t\t  expr->rank);\n+\t\t  gfc_add_expr_to_block (&se.pre, tmp);\n+\t\t}\n \t    }\n+\t  tmp = gfc_array_deallocate (se.expr, pstat, expr);\n \t}\n-\n-      if (expr->rank)\n-\ttmp = gfc_array_deallocate (se.expr, pstat, expr);\n       else\n \t{\n-\t  tmp = gfc_deallocate_with_status (se.expr, pstat, false, expr);\n+\t  tmp = gfc_deallocate_scalar_with_status (se.expr, pstat, false,\n+\t\t\t\t\t\t   expr, expr->ts);\n \t  gfc_add_expr_to_block (&se.pre, tmp);\n \n \t  tmp = fold_build2_loc (input_location, MODIFY_EXPR, void_type_node,"}, {"sha": "a899f22dd0e58fa84a172b9391357cec0d4c5bfd", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=2c80712872be90ceda8afb904e3b1f8d6501d070", "patch": "@@ -945,6 +945,103 @@ gfc_deallocate_with_status (tree pointer, tree status, bool can_fail,\n }\n \n \n+/* Generate code for deallocation of allocatable scalars (variables or\n+   components). Before the object itself is freed, any allocatable\n+   subcomponents are being deallocated.  */\n+\n+tree\n+gfc_deallocate_scalar_with_status (tree pointer, tree status, bool can_fail,\n+\t\t\t\t   gfc_expr* expr, gfc_typespec ts)\n+{\n+  stmtblock_t null, non_null;\n+  tree cond, tmp, error;\n+\n+  cond = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node, pointer,\n+\t\t\t  build_int_cst (TREE_TYPE (pointer), 0));\n+\n+  /* When POINTER is NULL, we set STATUS to 1 if it's present, otherwise\n+     we emit a runtime error.  */\n+  gfc_start_block (&null);\n+  if (!can_fail)\n+    {\n+      tree varname;\n+\n+      gcc_assert (expr && expr->expr_type == EXPR_VARIABLE && expr->symtree);\n+\n+      varname = gfc_build_cstring_const (expr->symtree->name);\n+      varname = gfc_build_addr_expr (pchar_type_node, varname);\n+\n+      error = gfc_trans_runtime_error (true, &expr->where,\n+\t\t\t\t       \"Attempt to DEALLOCATE unallocated '%s'\",\n+\t\t\t\t       varname);\n+    }\n+  else\n+    error = build_empty_stmt (input_location);\n+\n+  if (status != NULL_TREE && !integer_zerop (status))\n+    {\n+      tree status_type = TREE_TYPE (TREE_TYPE (status));\n+      tree cond2;\n+\n+      cond2 = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n+\t\t\t       status, build_int_cst (TREE_TYPE (status), 0));\n+      tmp = fold_build2_loc (input_location, MODIFY_EXPR, status_type,\n+\t\t\t     fold_build1_loc (input_location, INDIRECT_REF,\n+\t\t\t\t\t      status_type, status),\n+\t\t\t     build_int_cst (status_type, 1));\n+      error = fold_build3_loc (input_location, COND_EXPR, void_type_node,\n+\t\t\t       cond2, tmp, error);\n+    }\n+\n+  gfc_add_expr_to_block (&null, error);\n+\n+  /* When POINTER is not NULL, we free it.  */\n+  gfc_start_block (&non_null);\n+  \n+  /* Free allocatable components.  */\n+  if (ts.type == BT_DERIVED && ts.u.derived->attr.alloc_comp)\n+    {\n+      tmp = build_fold_indirect_ref_loc (input_location, pointer);\n+      tmp = gfc_deallocate_alloc_comp (ts.u.derived, tmp, 0);\n+      gfc_add_expr_to_block (&non_null, tmp);\n+    }\n+  else if (ts.type == BT_CLASS\n+\t   && ts.u.derived->components->ts.u.derived->attr.alloc_comp)\n+    {\n+      tmp = build_fold_indirect_ref_loc (input_location, pointer);\n+      tmp = gfc_deallocate_alloc_comp (ts.u.derived->components->ts.u.derived,\n+\t\t\t\t       tmp, 0);\n+      gfc_add_expr_to_block (&non_null, tmp);\n+    }\n+  \n+  tmp = build_call_expr_loc (input_location,\n+\t\t\t built_in_decls[BUILT_IN_FREE], 1,\n+\t\t\t fold_convert (pvoid_type_node, pointer));\n+  gfc_add_expr_to_block (&non_null, tmp);\n+\n+  if (status != NULL_TREE && !integer_zerop (status))\n+    {\n+      /* We set STATUS to zero if it is present.  */\n+      tree status_type = TREE_TYPE (TREE_TYPE (status));\n+      tree cond2;\n+\n+      cond2 = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n+\t\t\t       status, build_int_cst (TREE_TYPE (status), 0));\n+      tmp = fold_build2_loc (input_location, MODIFY_EXPR, status_type,\n+\t\t\t     fold_build1_loc (input_location, INDIRECT_REF,\n+\t\t\t\t\t      status_type, status),\n+\t\t\t     build_int_cst (status_type, 0));\n+      tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node, cond2,\n+\t\t\t     tmp, build_empty_stmt (input_location));\n+      gfc_add_expr_to_block (&non_null, tmp);\n+    }\n+\n+  return fold_build3_loc (input_location, COND_EXPR, void_type_node, cond,\n+\t\t\t  gfc_finish_block (&null),\n+\t\t\t  gfc_finish_block (&non_null));\n+}\n+\n+\n /* Reallocate MEM so it has SIZE bytes of data.  This behaves like the\n    following pseudo-code:\n "}, {"sha": "6c944df762be2cc68a30379f47a9ee2325a5fc45", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=2c80712872be90ceda8afb904e3b1f8d6501d070", "patch": "@@ -532,6 +532,7 @@ tree gfc_allocate_with_status (stmtblock_t *, tree, tree);\n \n /* Generate code to deallocate an array.  */\n tree gfc_deallocate_with_status (tree, tree, bool, gfc_expr*);\n+tree gfc_deallocate_scalar_with_status (tree, tree, bool, gfc_expr*, gfc_typespec);\n \n /* Generate code to call realloc().  */\n tree gfc_call_realloc (stmtblock_t *, tree, tree);"}, {"sha": "b048d8ce27611e9254ee63cae92f86d2838b977d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c80712872be90ceda8afb904e3b1f8d6501d070", "patch": "@@ -1,3 +1,10 @@\n+2010-10-26  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42647\n+\t* gfortran.dg/allocatable_scalar_9.f90: Extended.\n+\t* gfortran.dg/allocatable_scalar_10.f90: New.\n+\t* gfortran.dg/class_19.f03: Extended.\n+\n 2010-10-26  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/45736"}, {"sha": "0d3be8845f92c8185100b1b6a322b0e3fc0b9676", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_10.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_10.f90?ref=2c80712872be90ceda8afb904e3b1f8d6501d070", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do run }\n+!\n+! PR 42647: Missed initialization/dealloc of allocatable scalar DT with allocatable component\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+type t\n+ integer, allocatable :: p\n+end type t\n+type(t), allocatable :: a\n+\n+deallocate(a,stat=istat)\n+if (istat == 0) call abort()\n+end "}, {"sha": "f4c6599b02c4bb472bbecfa1a29a83d7cc8b4b13", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_9.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_9.f90?ref=2c80712872be90ceda8afb904e3b1f8d6501d070", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n !\n ! PR 42647: Missed initialization/dealloc of allocatable scalar DT with allocatable component\n !\n@@ -48,4 +49,7 @@ end module m\n if(allocated(na4%b4)) call abort()\n end\n \n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 32 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }\n+\n ! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "78e5652a871ac524659ec8b8afe1bb0106018b91", "filename": "gcc/testsuite/gfortran.dg/class_19.f03", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_19.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c80712872be90ceda8afb904e3b1f8d6501d070/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_19.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_19.f03?ref=2c80712872be90ceda8afb904e3b1f8d6501d070", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n !\n ! PR 43969: [OOP] ALLOCATED() with polymorphic variables\n !\n@@ -38,4 +39,7 @@ program main\n \n end program main\n \n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 8 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }\n+\n ! { dg-final { cleanup-modules \"foo_mod\" } }"}]}