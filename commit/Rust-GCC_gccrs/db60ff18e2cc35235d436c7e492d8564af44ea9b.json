{"sha": "db60ff18e2cc35235d436c7e492d8564af44ea9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI2MGZmMThlMmNjMzUyMzVkNDM2YzdlNDkyZDg1NjRhZjQ0ZWE5Yg==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2007-12-04T19:27:14Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2007-12-04T19:27:14Z"}, "message": "re PR c++/33091 ([c++0x] ICE using remove_reference on variadic param pack)\n\n2007-12-04  Douglas Gregor  <doug.gregor@gmail.com>\n\n       PR c++/33091\n       * pt.c (unify_pack_expansion): If we didn't deduce any actual\n       bindings for the template parameter pack, don't try to keep the\n       empty deduced arguments.\n       (unify): If a parameter is a template-id whose template argument\n       list contains a pack expansion that is not at the end, then we\n       cannot unify against that template-id.\n\n2007-12-04  Douglas Gregor  <doug.gregor@gmail.com>\n\n       PR c++/33091\n       * g++.dg/cpp0x/variadic-unify.C: New.\n\nFrom-SVN: r130604", "tree": {"sha": "c478f5de91e148280be2fea7572e582a5530a765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c478f5de91e148280be2fea7572e582a5530a765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db60ff18e2cc35235d436c7e492d8564af44ea9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db60ff18e2cc35235d436c7e492d8564af44ea9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db60ff18e2cc35235d436c7e492d8564af44ea9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db60ff18e2cc35235d436c7e492d8564af44ea9b/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54b7b17d73286a19d9a8f218f6ecf4d75e680046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b7b17d73286a19d9a8f218f6ecf4d75e680046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54b7b17d73286a19d9a8f218f6ecf4d75e680046"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "9b99ba8cd984b8d632df823671acac31b108e420", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db60ff18e2cc35235d436c7e492d8564af44ea9b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db60ff18e2cc35235d436c7e492d8564af44ea9b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db60ff18e2cc35235d436c7e492d8564af44ea9b", "patch": "@@ -1,3 +1,13 @@\n+2007-12-04  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       PR c++/33091\n+       * pt.c (unify_pack_expansion): If we didn't deduce any actual\n+       bindings for the template parameter pack, don't try to keep the\n+       empty deduced arguments.\n+       (unify): If a parameter is a template-id whose template argument\n+       list contains a pack expansion that is not at the end, then we\n+       cannot unify against that template-id.\n+\n 2007-12-02  Paolo Carlini  <pcarlini@suse.de>\n \n         PR c++/34061"}, {"sha": "f7d694613c78ad1a20e1477ee45fac8fc09836b3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db60ff18e2cc35235d436c7e492d8564af44ea9b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db60ff18e2cc35235d436c7e492d8564af44ea9b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=db60ff18e2cc35235d436c7e492d8564af44ea9b", "patch": "@@ -12464,6 +12464,16 @@ unify_pack_expansion (tree tparms, tree targs, tree packed_parms,\n     {\n       tree old_pack = TREE_VALUE (pack);\n       tree new_args = TREE_TYPE (pack);\n+      int i, len = TREE_VEC_LENGTH (new_args);\n+      bool nondeduced_p = false;\n+\n+      /* If NEW_ARGS contains any NULL_TREE entries, we didn't\n+\t actually deduce anything.  */\n+      for (i = 0; i < len && !nondeduced_p; ++i)\n+\tif (TREE_VEC_ELT (new_args, i) == NULL_TREE)\n+\t  nondeduced_p = true;\n+      if (nondeduced_p)\n+\tcontinue;\n \n       if (old_pack && ARGUMENT_PACK_INCOMPLETE_P (old_pack))\n         {\n@@ -13156,10 +13166,22 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n         int argslen = TREE_VEC_LENGTH (packed_args);\n         int parm_variadic_p = 0;\n \n-        /* Check if the parameters end in a pack, making them variadic.  */\n-        if (len > 0 \n-\t    && PACK_EXPANSION_P (TREE_VEC_ELT (packed_parms, len - 1)))\n-          parm_variadic_p = 1;\n+\tfor (i = 0; i < len; ++i)\n+\t  {\n+\t    if (PACK_EXPANSION_P (TREE_VEC_ELT (packed_parms, i)))\n+\t      {\n+\t\tif (i == len - 1)\n+\t\t  /* We can unify against something with a trailing\n+\t\t     parameter pack.  */\n+\t\t  parm_variadic_p = 1;\n+\t\telse\n+\t\t  /* Since there is something following the pack\n+\t\t     expansion, we cannot unify this template argument\n+\t\t     list.  */\n+\t\t  return 0;\n+\t      }\n+\t  }\n+\t  \n \n         /* If we don't have enough arguments to satisfy the parameters\n            (not counting the pack expression at the end), or we have"}, {"sha": "38c24c0c4ce9763f67fdc3721c702dc7ef42b5f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db60ff18e2cc35235d436c7e492d8564af44ea9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db60ff18e2cc35235d436c7e492d8564af44ea9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db60ff18e2cc35235d436c7e492d8564af44ea9b", "patch": "@@ -1,3 +1,8 @@\n+2007-12-04  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       PR c++/33091\n+       * g++.dg/cpp0x/variadic-unify.C: New.\n+\n 2007-12-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/34334"}, {"sha": "54234391e64d2e6a7569eddebc62f3a8bfb8f944", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-unify.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db60ff18e2cc35235d436c7e492d8564af44ea9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-unify.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db60ff18e2cc35235d436c7e492d8564af44ea9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-unify.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-unify.C?ref=db60ff18e2cc35235d436c7e492d8564af44ea9b", "patch": "@@ -0,0 +1,15 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename...> struct tuple { };\n+\n+template<typename... Args1, typename... Args2>\n+void foo(tuple<Args1..., Args2...>, tuple<Args1...>, tuple<Args2...>);\n+\n+struct X{ };\n+\n+void bar()\n+{\n+  tuple<int, float> tif;\n+  tuple<double, X> tdx;\n+  tuple<int, float, double, X> tall;\n+  foo(tall, tif, tdx);\n+}"}]}