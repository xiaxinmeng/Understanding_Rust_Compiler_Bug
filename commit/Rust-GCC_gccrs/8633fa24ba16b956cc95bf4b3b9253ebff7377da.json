{"sha": "8633fa24ba16b956cc95bf4b3b9253ebff7377da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzM2ZhMjRiYTE2Yjk1NmNjOTViZjRiM2I5MjUzZWJmZjczNzdkYQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-01-12T11:26:45Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-01-12T11:26:45Z"}, "message": "[multiple changes]\n\nTue Jan 12 14:05:37 1999   David Edelsohn  <edelsohn@mhpcc.edu>\n        * rs6000.c (print_operand, cases 'm' and 'M'): Do not depend on\n        HOST_WIDE_INT word-size.\n        (rs6000_stack_info): Remove redundant alignment of fpmem.\nTue Jan 12 14:05:37 1999   Richard Henderson  <rth@cygnus.com>\n        * rs6000.c (short_cint_operand): Remove CONSTANT_P_RTX handling.\n        (u_short_cint_operand, reg_or_cint_operand, logical_operand): Likewise.\n        (input_operand): Adjust CONSTANT_P_RTX handling.\n        * rs6000.h (PREDICATE_CODES): Remove CONSTANT_P_RTX references.\n        * rs6000.md (movsi): Adjust CONSTANT_P_RTX handling.\n        (movhi, movqi): Remove CONSANT_P_RTX handling.\n        (movdi): Adjust CONSTANT_P_RTX handling.\n\nFrom-SVN: r24640", "tree": {"sha": "b679f3a62e1abdac0a90ed2eabefcdf6e42afa3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b679f3a62e1abdac0a90ed2eabefcdf6e42afa3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8633fa24ba16b956cc95bf4b3b9253ebff7377da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8633fa24ba16b956cc95bf4b3b9253ebff7377da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8633fa24ba16b956cc95bf4b3b9253ebff7377da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8633fa24ba16b956cc95bf4b3b9253ebff7377da/comments", "author": null, "committer": null, "parents": [{"sha": "6d4503c3100cdf9e9c38cf0889f4c118a7c1cb76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4503c3100cdf9e9c38cf0889f4c118a7c1cb76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4503c3100cdf9e9c38cf0889f4c118a7c1cb76"}], "stats": {"total": 102, "additions": 60, "deletions": 42}, "files": [{"sha": "ed6a9aca33d8e25f52eb4ea1fee1b995bb791330", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8633fa24ba16b956cc95bf4b3b9253ebff7377da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8633fa24ba16b956cc95bf4b3b9253ebff7377da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8633fa24ba16b956cc95bf4b3b9253ebff7377da", "patch": "@@ -1,3 +1,19 @@\n+Tue Jan 12 14:05:37 1999   David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.c (print_operand, cases 'm' and 'M'): Do not depend on\n+\tHOST_WIDE_INT word-size.\n+\t(rs6000_stack_info): Remove redundant alignment of fpmem.\n+\n+Tue Jan 12 14:05:37 1999   Richard Henderson  <rth@cygnus.com>\n+\n+\t* rs6000.c (short_cint_operand): Remove CONSTANT_P_RTX handling.\n+\t(u_short_cint_operand, reg_or_cint_operand, logical_operand): Likewise.\n+\t(input_operand): Adjust CONSTANT_P_RTX handling.\n+\t* rs6000.h (PREDICATE_CODES): Remove CONSTANT_P_RTX references.\n+\t* rs6000.md (movsi): Adjust CONSTANT_P_RTX handling.\n+\t(movhi, movqi): Remove CONSANT_P_RTX handling.\n+\t(movdi): Adjust CONSTANT_P_RTX handling.\n+\n Tue Jan 12 10:23:24 1999  Stan Cox  <scox@cygnus.com>\n \n \t* mips.md (call_value_internal3c): New pattern for -mips16 -mlong-calls."}, {"sha": "ac5efe5d2fd2670daafe575b87d75b05bf8db6be", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8633fa24ba16b956cc95bf4b3b9253ebff7377da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8633fa24ba16b956cc95bf4b3b9253ebff7377da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8633fa24ba16b956cc95bf4b3b9253ebff7377da", "patch": "@@ -497,8 +497,7 @@ short_cint_operand (op, mode)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return ((GET_CODE (op) == CONST_INT\n-\t   && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) < 0x10000)\n-\t  || GET_CODE (op) == CONSTANT_P_RTX);\n+\t   && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) < 0x10000));\n }\n \n /* Similar for a unsigned D field.  */\n@@ -509,8 +508,7 @@ u_short_cint_operand (op, mode)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return ((GET_CODE (op) == CONST_INT\n-\t   && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0)\n-\t  || GET_CODE (op) == CONSTANT_P_RTX);\n+\t   && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0));\n }\n \n /* Return 1 if OP is a CONST_INT that cannot fit in a signed D field.  */\n@@ -598,7 +596,6 @@ reg_or_cint_operand (op, mode)\n     enum machine_mode mode;\n {\n      return (GET_CODE (op) == CONST_INT\n-\t     || GET_CODE (op) == CONSTANT_P_RTX\n \t     || gpc_reg_operand (op, mode));\n }\n \n@@ -883,8 +880,7 @@ logical_operand (op, mode)\n   return (gpc_reg_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT\n \t      && ((INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0\n-\t\t  || (INTVAL (op) & 0xffff) == 0))\n-\t  || GET_CODE (op) == CONSTANT_P_RTX);\n+\t\t  || (INTVAL (op) & 0xffff) == 0)));\n }\n \n /* Return 1 if C is a constant that is not a logical operand (as\n@@ -1110,6 +1106,10 @@ input_operand (op, mode)\n   if (memory_operand (op, mode))\n     return 1;\n \n+  /* Only a tiny bit of handling for CONSTANT_P_RTX is necessary.  */\n+  if (GET_CODE (op) == CONST && GET_CODE (XEXP (op, 0)) == CONSTANT_P_RTX)\n+    return 1;\n+\n   /* For floating-point, easy constants are valid.  */\n   if (GET_MODE_CLASS (mode) == MODE_FLOAT\n       && CONSTANT_P (op)\n@@ -1119,7 +1119,6 @@ input_operand (op, mode)\n   /* Allow any integer constant.  */\n   if (GET_MODE_CLASS (mode) == MODE_INT\n       && (GET_CODE (op) == CONST_INT\n-\t  || GET_CODE (op) == CONSTANT_P_RTX\n \t  || GET_CODE (op) == CONST_DOUBLE))\n     return 1;\n \n@@ -2747,15 +2746,15 @@ print_operand (file, x, code)\n       /* If the high bit is set and the low bit is not, the value is zero.\n \t If the high bit is zero, the value is the first 1 bit we find from\n \t the left.  */\n-      if (val < 0 && (val & 1) == 0)\n+      if ((val & 0x80000000) && ((val & 1) == 0))\n \t{\n \t  putc ('0', file);\n \t  return;\n \t}\n-      else if (val >= 0)\n+      else if ((val & 0x80000000) == 0)\n \t{\n \t  for (i = 1; i < 32; i++)\n-\t    if ((val <<= 1) < 0)\n+\t    if ((val <<= 1) & 0x80000000)\n \t      break;\n \t  fprintf (file, \"%d\", i);\n \t  return;\n@@ -2782,7 +2781,7 @@ print_operand (file, x, code)\n       /* If the low bit is set and the high bit is not, the value is 31.\n \t If the low bit is zero, the value is the first 1 bit we find from\n \t the right.  */\n-      if ((val & 1) && val >= 0)\n+      if ((val & 1) && ((val & 0x80000000) == 0))\n \t{\n \t  fputs (\"31\", file);\n \t  return;\n@@ -2802,7 +2801,7 @@ print_operand (file, x, code)\n       /* Otherwise, look for the first 0 bit from the left.  The result is its\n \t number minus 1. We know the high-order bit is one.  */\n       for (i = 0; i < 32; i++)\n-\tif ((val <<= 1) >= 0)\n+\tif (((val <<= 1) & 0x80000000) == 0)\n \t  break;\n \n       fprintf (file, \"%d\", i);\n@@ -3448,7 +3447,6 @@ rs6000_stack_info ()\n \t}\n     }\n \n-\n   /* Determine if we need to save the link register */\n   if (regs_ever_live[65]\n       || (DEFAULT_ABI == ABI_AIX && profile_flag)\n@@ -3475,13 +3473,6 @@ rs6000_stack_info ()\n \tinfo_ptr->cr_size = reg_size;\n     }\n \n-  /* Ensure that fp_save_offset will be aligned to an 8-byte boundary. */\n-  if (info_ptr->fpmem_p)\n-    {\n-      info_ptr->gp_size = RS6000_ALIGN (info_ptr->gp_size, 8);\n-      info_ptr->main_size = RS6000_ALIGN (info_ptr->main_size, 8);\n-    }\n-\n   /* Determine various sizes */\n   info_ptr->reg_size     = reg_size;\n   info_ptr->fixed_size   = RS6000_SAVE_AREA;\n@@ -3535,6 +3526,7 @@ rs6000_stack_info ()\n       break;\n     }\n \n+  /* Ensure that fpmem_offset will be aligned to an 8-byte boundary. */\n   if (info_ptr->fpmem_p\n       && (info_ptr->main_save_offset - info_ptr->fpmem_size) % 8)\n     info_ptr->fpmem_size += reg_size;"}, {"sha": "889ef98be4e93672424651360795f34d7ff1df5f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8633fa24ba16b956cc95bf4b3b9253ebff7377da/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8633fa24ba16b956cc95bf4b3b9253ebff7377da/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=8633fa24ba16b956cc95bf4b3b9253ebff7377da", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for IBM RS/6000.\n-   Copyright (C) 1992, 93-7, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93-8, 1999 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GNU CC.\n@@ -3169,15 +3169,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Define the codes that are matched by predicates in rs6000.c.  */\n \n #define PREDICATE_CODES\t\t\t\t\t\t\\\n-  {\"short_cint_operand\", {CONST_INT, CONSTANT_P_RTX}},\t\t\\\n-  {\"u_short_cint_operand\", {CONST_INT, CONSTANT_P_RTX}},\t\\\n+  {\"short_cint_operand\", {CONST_INT}},\t\t\t\t\\\n+  {\"u_short_cint_operand\", {CONST_INT}},\t\t\t\\\n   {\"non_short_cint_operand\", {CONST_INT}},\t\t\t\\\n   {\"gpc_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"cc_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n-  {\"reg_or_short_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}}, \\\n+  {\"reg_or_short_operand\", {SUBREG, REG, CONST_INT}}, \t\t\\\n   {\"reg_or_neg_short_operand\", {SUBREG, REG, CONST_INT}},\t\\\n-  {\"reg_or_u_short_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}}, \\\n-  {\"reg_or_cint_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}}, \\\n+  {\"reg_or_u_short_operand\", {SUBREG, REG, CONST_INT}}, \t\\\n+  {\"reg_or_cint_operand\", {SUBREG, REG, CONST_INT}}, \t\t\\\n   {\"got_operand\", {SYMBOL_REF, CONST, LABEL_REF}},\t\t\\\n   {\"got_no_const_operand\", {SYMBOL_REF, LABEL_REF}},\t\t\\\n   {\"easy_fp_constant\", {CONST_DOUBLE}},\t\t\t\t\\\n@@ -3186,20 +3186,19 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"volatile_mem_operand\", {MEM}},\t\t\t\t\\\n   {\"offsettable_addr_operand\", {REG, SUBREG, PLUS}},\t\t\\\n   {\"mem_or_easy_const_operand\", {SUBREG, MEM, CONST_DOUBLE}},\t\\\n-  {\"add_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n+  {\"add_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"non_add_cint_operand\", {CONST_INT}},\t\t\t\\\n-  {\"and_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n-  {\"and64_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX,\t\\\n-\t\t     CONST_DOUBLE}},\t\t\t\t\\\n-  {\"logical_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}}, \\\n+  {\"and_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n+  {\"and64_operand\", {SUBREG, REG, CONST_INT, CONST_DOUBLE}},\t\\\n+  {\"logical_operand\", {SUBREG, REG, CONST_INT}}, \t\t\\\n   {\"non_logical_cint_operand\", {CONST_INT}},\t\t\t\\\n   {\"mask_operand\", {CONST_INT}},\t\t\t\t\\\n   {\"mask64_operand\", {CONST_INT, CONST_DOUBLE}},\t\t\\\n   {\"count_register_operand\", {REG}},\t\t\t\t\\\n   {\"fpmem_operand\", {REG}},\t\t\t\t\t\\\n   {\"call_operand\", {SYMBOL_REF, REG}},\t\t\t\t\\\n   {\"current_file_function_operand\", {SYMBOL_REF}},\t\t\\\n-  {\"input_operand\", {SUBREG, MEM, REG, CONST_INT, CONSTANT_P_RTX, \\\n+  {\"input_operand\", {SUBREG, MEM, REG, CONST_INT, \t\t\\\n \t\t     CONST_DOUBLE, SYMBOL_REF}}, \t\t\\\n   {\"load_multiple_operation\", {PARALLEL}},\t\t\t\\\n   {\"store_multiple_operation\", {PARALLEL}},\t\t\t\\"}, {"sha": "ac7008f8699deb993be4d82b687e9beff28ac661", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8633fa24ba16b956cc95bf4b3b9253ebff7377da/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8633fa24ba16b956cc95bf4b3b9253ebff7377da/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=8633fa24ba16b956cc95bf4b3b9253ebff7377da", "patch": "@@ -1,5 +1,5 @@\n ;; Machine description for IBM RISC System 6000 (POWER) for GNU C compiler\n-;; Copyright (C) 1990, 91-97, 1998 Free Software Foundation, Inc.\n+;; Copyright (C) 1990, 91-98, 1999 Free Software Foundation, Inc.\n ;; Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n ;; This file is part of GNU CC.\n@@ -5399,6 +5399,14 @@\n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n     operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n \n+  /* Only a tiny bit of handling for CONSTANT_P_RTX is necessary.  */\n+  if (GET_CODE (operands[1]) == CONST\n+      && GET_CODE (XEXP (operands[1], 0)) == CONSTANT_P_RTX)\n+    {\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+      DONE;\n+    }\n+\n   /* Use default pattern for address of ELF small data */\n   if (TARGET_ELF\n       && (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n@@ -5420,8 +5428,7 @@\n       && !flag_pic\n       && CONSTANT_P (operands[1])\n       && GET_CODE (operands[1]) != HIGH\n-      && GET_CODE (operands[1]) != CONST_INT\n-      && GET_CODE (operands[1]) != CONSTANT_P_RTX)\n+      && GET_CODE (operands[1]) != CONST_INT)\n     {\n       rtx target = (reload_completed || reload_in_progress)\n \t\t\t? operands[0] : gen_reg_rtx (SImode);\n@@ -5475,7 +5482,6 @@\n   if ((!TARGET_WINDOWS_NT || DEFAULT_ABI != ABI_NT)\n       && CONSTANT_P (operands[1])\n       && GET_CODE (operands[1]) != CONST_INT\n-      && GET_CODE (operands[1]) != CONSTANT_P_RTX\n       && GET_CODE (operands[1]) != HIGH\n       && ! LEGITIMATE_CONSTANT_POOL_ADDRESS_P (operands[1]))\n     {\n@@ -5574,8 +5580,7 @@\n     operands[1] = force_reg (HImode, operands[1]);\n \n   if (CONSTANT_P (operands[1])\n-      && GET_CODE (operands[1]) != CONST_INT\n-      && GET_CODE (operands[1]) != CONSTANT_P_RTX)\n+      && GET_CODE (operands[1]) != CONST_INT)\n     {\n       operands[1] = force_const_mem (HImode, operands[1]);\n       if (! memory_address_p (HImode, XEXP (operands[1], 0))\n@@ -5611,8 +5616,7 @@\n     operands[1] = force_reg (QImode, operands[1]);\n \n   if (CONSTANT_P (operands[1])\n-      && GET_CODE (operands[1]) != CONST_INT\n-      && GET_CODE (operands[1]) != CONSTANT_P_RTX)\n+      && GET_CODE (operands[1]) != CONST_INT)\n     {\n       operands[1] = force_const_mem (QImode, operands[1]);\n       if (! memory_address_p (QImode, XEXP (operands[1], 0))\n@@ -6012,11 +6016,18 @@\n \t )\n     operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n \n+  /* Only a tiny bit of handling for CONSTANT_P_RTX is necessary.  */\n+  if (GET_CODE (operands[1]) == CONST\n+      && GET_CODE (XEXP (operands[1], 0)) == CONSTANT_P_RTX)\n+    {\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+      DONE;\n+    }\n+\n   if (TARGET_64BIT\n       && CONSTANT_P (operands[1])\n #if HOST_BITS_PER_WIDE_INT == 32\n       && GET_CODE (operands[1]) != CONST_INT\n-      && GET_CODE (operands[1]) != CONSTANT_P_RTX\n #endif\n       && ! easy_fp_constant (operands[1], DImode)\n       && ! LEGITIMATE_CONSTANT_POOL_ADDRESS_P (operands[1]))"}]}