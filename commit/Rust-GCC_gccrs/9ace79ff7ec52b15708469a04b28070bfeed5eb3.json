{"sha": "9ace79ff7ec52b15708469a04b28070bfeed5eb3", "node_id": "C_kwDOANBUbNoAKDlhY2U3OWZmN2VjNTJiMTU3MDg0NjlhMDRiMjgwNzBiZmVlZDVlYjM", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-13T16:49:36Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-17T10:34:36Z"}, "message": "gccrs: Remove solve_missing_mappings_from_this to handle covariants\n\nchange how we monomorphize dyn-items when we need to compute the generics\n\nWe might have a trait item such as:\n\n  impl<'a, T> FnLike<&'a T, &'a T> for Identity {\n      fn call(&self, arg: &'a T) -> &'a T { ... }\n  }\n\nWhich ended up monomorphized badly to:\n\n  const isize & const &\n    <example::Identity as example::FnLike::<& T, & T>>::call<& isize>\n    (const struct example::Identity & const self,\n     const isize & const & const arg)\n\nThis is wrong because it turned into a double reference type becasuse this\nbug was consistent bugs were not picked up but this is not correct. We now\nreuse our type inference infrastructure to solve the parameters instead.\n\nFixes #1984\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile.cc: use unify_and instead\n\t* typecheck/rust-tyty-subst.cc (SubstitutionRef::solve_missing_mappings_from_this): remove\n\t* typecheck/rust-tyty-subst.h: update header\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "6c1fa63a24cbd41748c7776670cfe076ca1a12d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c1fa63a24cbd41748c7776670cfe076ca1a12d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ace79ff7ec52b15708469a04b28070bfeed5eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ace79ff7ec52b15708469a04b28070bfeed5eb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ace79ff7ec52b15708469a04b28070bfeed5eb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ace79ff7ec52b15708469a04b28070bfeed5eb3/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85a5abeb3748ef0fc18973e9139d9a18b7809661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a5abeb3748ef0fc18973e9139d9a18b7809661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a5abeb3748ef0fc18973e9139d9a18b7809661"}], "stats": {"total": 81, "additions": 16, "deletions": 65}, "files": [{"sha": "2c4699264f06acb644bbc74b96faa72d83049036", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ace79ff7ec52b15708469a04b28070bfeed5eb3/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ace79ff7ec52b15708469a04b28070bfeed5eb3/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=9ace79ff7ec52b15708469a04b28070bfeed5eb3", "patch": "@@ -21,6 +21,8 @@\n #include \"rust-compile-implitem.h\"\n #include \"rust-hir-type-bounds.h\"\n #include \"rust-compile-type.h\"\n+#include \"rust-substitution-mapper.h\"\n+#include \"rust-type-util.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -299,11 +301,6 @@ HIRCompileBase::compute_address_for_trait_item (\n     = self_bound->lookup_associated_item (ref->get_identifier ());\n   rust_assert (!associated_self_item.is_error ());\n \n-  TyTy::BaseType *mono1 = associated_self_item.get_tyty_for_receiver (self);\n-  rust_assert (mono1 != nullptr);\n-  rust_assert (mono1->get_kind () == TyTy::TypeKind::FNDEF);\n-  TyTy::FnType *assocated_item_ty1 = static_cast<TyTy::FnType *> (mono1);\n-\n   // Lookup the impl-block for the associated impl_item if it exists\n   HIR::Function *associated_function = nullptr;\n   for (auto &impl_item : associated_impl_block->get_impl_items ())\n@@ -333,10 +330,14 @@ HIRCompileBase::compute_address_for_trait_item (\n \n       if (lookup_fntype->needs_substitution ())\n \t{\n-\t  TyTy::SubstitutionArgumentMappings mappings\n-\t    = assocated_item_ty1->solve_missing_mappings_from_this (\n-\t      *trait_item_fntype, *lookup_fntype);\n-\t  lookup_fntype = lookup_fntype->handle_substitions (mappings);\n+\t  TyTy::BaseType *infer\n+\t    = Resolver::SubstMapper::InferSubst (lookup_fntype, Location ());\n+\t  infer\n+\t    = Resolver::unify_site (infer->get_ref (),\n+\t\t\t\t    TyTy::TyWithLocation (trait_item_fntype),\n+\t\t\t\t    TyTy::TyWithLocation (infer), Location ());\n+\t  rust_assert (infer->get_kind () == TyTy::TypeKind::FNDEF);\n+\t  lookup_fntype = static_cast<TyTy::FnType *> (infer);\n \t}\n \n       return CompileInherentImplItem::Compile (associated_function, ctx,"}, {"sha": "db31ff9323f35505701347a791007b6b10d88337", "filename": "gcc/rust/typecheck/rust-tyty-subst.cc", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ace79ff7ec52b15708469a04b28070bfeed5eb3/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ace79ff7ec52b15708469a04b28070bfeed5eb3/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc?ref=9ace79ff7ec52b15708469a04b28070bfeed5eb3", "patch": "@@ -821,57 +821,6 @@ SubstitutionRef::solve_mappings_from_receiver_for_self (\n \t\t\t\t       mappings.get_locus ());\n }\n \n-SubstitutionArgumentMappings\n-SubstitutionRef::solve_missing_mappings_from_this (SubstitutionRef &ref,\n-\t\t\t\t\t\t   SubstitutionRef &to)\n-{\n-  rust_assert (!ref.needs_substitution ());\n-  rust_assert (needs_substitution ());\n-  rust_assert (get_num_substitutions () == ref.get_num_substitutions ());\n-\n-  Location locus = used_arguments.get_locus ();\n-  std::vector<SubstitutionArg> resolved_mappings;\n-\n-  std::map<HirId, std::pair<ParamType *, BaseType *>> substs;\n-  for (size_t i = 0; i < get_num_substitutions (); i++)\n-    {\n-      SubstitutionParamMapping &a = substitutions.at (i);\n-      SubstitutionParamMapping &b = ref.substitutions.at (i);\n-\n-      if (a.need_substitution ())\n-\t{\n-\t  const BaseType *root = a.get_param_ty ()->resolve ()->get_root ();\n-\t  rust_assert (root->get_kind () == TyTy::TypeKind::PARAM);\n-\t  const ParamType *p = static_cast<const TyTy::ParamType *> (root);\n-\n-\t  substs[p->get_ty_ref ()] = {static_cast<ParamType *> (p->clone ()),\n-\t\t\t\t      b.get_param_ty ()->resolve ()};\n-\t}\n-    }\n-\n-  for (auto it = substs.begin (); it != substs.end (); it++)\n-    {\n-      HirId param_id = it->first;\n-      BaseType *arg = it->second.second;\n-\n-      const SubstitutionParamMapping *associate_param = nullptr;\n-      for (SubstitutionParamMapping &p : to.substitutions)\n-\t{\n-\t  if (p.get_param_ty ()->get_ty_ref () == param_id)\n-\t    {\n-\t      associate_param = &p;\n-\t      break;\n-\t    }\n-\t}\n-\n-      rust_assert (associate_param != nullptr);\n-      SubstitutionArg argument (associate_param, arg);\n-      resolved_mappings.push_back (std::move (argument));\n-    }\n-\n-  return SubstitutionArgumentMappings (resolved_mappings, {}, locus);\n-}\n-\n Resolver::AssociatedImplTrait *\n SubstitutionRef::lookup_associated_impl (const SubstitutionParamMapping &subst,\n \t\t\t\t\t const TypeBoundPredicate &bound,"}, {"sha": "b5a41819fd49f7200ba70c5988795b9153aae175", "filename": "gcc/rust/typecheck/rust-tyty-subst.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ace79ff7ec52b15708469a04b28070bfeed5eb3/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ace79ff7ec52b15708469a04b28070bfeed5eb3/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.h?ref=9ace79ff7ec52b15708469a04b28070bfeed5eb3", "patch": "@@ -291,11 +291,12 @@ class SubstitutionRef\n   SubstitutionArgumentMappings solve_mappings_from_receiver_for_self (\n     SubstitutionArgumentMappings &mappings) const;\n \n-  // TODO comment\n-  SubstitutionArgumentMappings\n-  solve_missing_mappings_from_this (SubstitutionRef &ref, SubstitutionRef &to);\n-\n-  // TODO comment\n+  // Given a type such as:\n+  //\n+  //   fn<X,Y>(a:&X, b:Y) -> (...)\n+  //\n+  // This function will inject implicit inference variables for the type\n+  // parameters X and Y\n   BaseType *infer_substitions (Location locus);\n \n   // this clears any possible projections from higher ranked trait bounds which"}]}