{"sha": "aae0390e20fec7d53bb9ba5597928df554c10a82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlMDM5MGUyMGZlYzdkNTNiYjliYTU1OTc5MjhkZjU1NGMxMGE4Mg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-10-17T21:27:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-10-17T21:27:56Z"}, "message": "haifa-sched.c (add_dependence): Only check/update the cache if it exists.\n\n        * haifa-sched.c (add_dependence): Only check/update the cache\n        if it exists.\n        (remove_dependence): Likewise.\n        (schedule_insns): Only create the true_dependency_cache if the\n        average number of instructions in a basic block is very large.\n\nFrom-SVN: r30058", "tree": {"sha": "c0a94172c67a3c129ecf60256c13ef06eebbb444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0a94172c67a3c129ecf60256c13ef06eebbb444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aae0390e20fec7d53bb9ba5597928df554c10a82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae0390e20fec7d53bb9ba5597928df554c10a82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae0390e20fec7d53bb9ba5597928df554c10a82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae0390e20fec7d53bb9ba5597928df554c10a82/comments", "author": null, "committer": null, "parents": [{"sha": "81631c486ea7b8a6909e40e5f7f9c560a1039f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81631c486ea7b8a6909e40e5f7f9c560a1039f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81631c486ea7b8a6909e40e5f7f9c560a1039f54"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "e4feac5d4fe6b9faa1636dbcb6407ed694b07558", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae0390e20fec7d53bb9ba5597928df554c10a82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae0390e20fec7d53bb9ba5597928df554c10a82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aae0390e20fec7d53bb9ba5597928df554c10a82", "patch": "@@ -1,3 +1,11 @@\n+Sun Oct 17 15:22:50 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* haifa-sched.c (add_dependence): Only check/update the cache\n+\tif it exists.\n+\t(remove_dependence): Likewise.\n+\t(schedule_insns): Only create the true_dependency_cache if the\n+\taverage number of instructions in a basic block is very large.\n+\n Sun Oct 17 11:02:52 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (ggc-common.o): Depend on genrtl.h."}, {"sha": "9fd844b78227a86f2e821470f7c95a32b2886b13", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae0390e20fec7d53bb9ba5597928df554c10a82/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae0390e20fec7d53bb9ba5597928df554c10a82/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=aae0390e20fec7d53bb9ba5597928df554c10a82", "patch": "@@ -248,8 +248,14 @@ static int *insn_luid;\n #define INSN_LUID(INSN) (insn_luid[INSN_UID (INSN)])\n \n /* To speed up the test for duplicate dependency links we keep a record\n-   of true dependencies created by add_dependence.\n+   of true dependencies created by add_dependence when the average number\n+   of instructions in a basic block is very large.\n \n+   Studies have shown that there is typically around 5 instructions between\n+   branches for typical C code.  So we can make a guess that the average\n+   basic block is approximately 5 instructions long; we will choose 100X\n+   the average size as a very large basic block.\n+  \n    Each insn has an associated bitmap for its dependencies.  Each bitmap\n    has enough entries to represent a dependency on any other insn in the\n    insn chain.  */\n@@ -794,7 +800,8 @@ add_dependence (insn, elem, dep_type)\n   /* If we already have a true dependency for ELEM, then we do not\n      need to do anything.  Avoiding the list walk below can cut\n      compile times dramatically for some code.  */\n-  if (TEST_BIT (true_dependency_cache[INSN_LUID (insn)], INSN_LUID (elem)))\n+  if (true_dependency_cache\n+      && TEST_BIT (true_dependency_cache[INSN_LUID (insn)], INSN_LUID (elem)))\n     return;\n \n   /* Check that we don't already have this dependence.  */\n@@ -808,7 +815,7 @@ add_dependence (insn, elem, dep_type)\n \n \t/* If we are adding a true dependency to INSN's LOG_LINKs, then\n \t   note that in the bitmap cache of true dependency information.  */\n-\tif ((int)dep_type == 0)\n+\tif ((int)dep_type == 0 && true_dependency_cache)\n \t  SET_BIT (true_dependency_cache[INSN_LUID (insn)], INSN_LUID (elem));\n \treturn;\n       }\n@@ -844,7 +851,7 @@ remove_dependence (insn, elem)\n \n \t  /* If we are removing a true dependency from the LOG_LINKS list,\n \t     make sure to remove it from the cache too.  */\n-\t  if (REG_NOTE_KIND (link) == 0)\n+\t  if (REG_NOTE_KIND (link) == 0 && true_dependency_cache)\n \t    RESET_BIT (true_dependency_cache[INSN_LUID (insn)],\n \t\t       INSN_LUID (elem));\n \n@@ -6876,9 +6883,15 @@ schedule_insns (dump_file)\n   \n   /* ?!? We could save some memory by computing a per-region luid mapping\n      which could reduce both the number of vectors in the cache and the size\n-     of each vector.  */\n-  true_dependency_cache = sbitmap_vector_alloc (luid, luid);\n-  sbitmap_vector_zero (true_dependency_cache, luid);\n+     of each vector.  Instead we just avoid the cache entirely unless the\n+     average number of instructions in a basic block is very high.  See\n+     the comment before the declaration of true_dependency_cache for\n+     what we consider \"very high\".  */\n+  if (luid / n_basic_blocks > 100 * 5)\n+    {\n+      true_dependency_cache = sbitmap_vector_alloc (luid, luid);\n+      sbitmap_vector_zero (true_dependency_cache, luid);\n+    }\n \n   nr_regions = 0;\n   rgn_table = (region *) alloca ((n_basic_blocks) * sizeof (region));\n@@ -7047,7 +7060,11 @@ schedule_insns (dump_file)\n       fprintf (dump, \"\\n\\n\");\n     }\n \n-  free (true_dependency_cache);\n+  if (true_dependency_cache)\n+    {\n+      free (true_dependency_cache);\n+      true_depdency_cache = NULL;\n+    }\n   free (cant_move);\n   free (fed_by_spec_load);\n   free (is_load_insn);"}]}