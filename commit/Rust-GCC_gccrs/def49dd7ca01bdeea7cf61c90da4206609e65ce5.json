{"sha": "def49dd7ca01bdeea7cf61c90da4206609e65ce5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmNDlkZDdjYTAxYmRlZWE3Y2Y2MWM5MGRhNDIwNjYwOWU2NWNlNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-01-09T14:17:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-01-09T14:17:13Z"}, "message": "re PR tree-optimization/34458 (ICE in int_cst_value, at tree.c:8047 at -O3)\n\n2008-01-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/34458\n\t* tree-data-ref.c (initialize_matrix_A): Use tree_low_cst,\n\tadjust return type.\n\n\t* gcc.c-torture/compile/pr34458.c: New testcase.\n\nFrom-SVN: r131429", "tree": {"sha": "b9e9de55fd4ad29e9b516c6c58f4bcbe2723fb0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9e9de55fd4ad29e9b516c6c58f4bcbe2723fb0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/def49dd7ca01bdeea7cf61c90da4206609e65ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def49dd7ca01bdeea7cf61c90da4206609e65ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def49dd7ca01bdeea7cf61c90da4206609e65ce5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def49dd7ca01bdeea7cf61c90da4206609e65ce5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cbad2e09260a2898b3384dded5f3ce2651e17425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbad2e09260a2898b3384dded5f3ce2651e17425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbad2e09260a2898b3384dded5f3ce2651e17425"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "acfca73d9e810cd62f758ef04ddb4ef1e85ef684", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def49dd7ca01bdeea7cf61c90da4206609e65ce5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def49dd7ca01bdeea7cf61c90da4206609e65ce5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=def49dd7ca01bdeea7cf61c90da4206609e65ce5", "patch": "@@ -1,3 +1,9 @@\n+2008-01-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34458\n+\t* tree-data-ref.c (initialize_matrix_A): Use tree_low_cst,\n+\tadjust return type.\n+\n 2008-01-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/34679"}, {"sha": "78f54391a06f611cc19e988dcb5d1aedc1b4d2dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def49dd7ca01bdeea7cf61c90da4206609e65ce5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def49dd7ca01bdeea7cf61c90da4206609e65ce5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=def49dd7ca01bdeea7cf61c90da4206609e65ce5", "patch": "@@ -1,3 +1,8 @@\n+2008-01-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34458\n+\t* gcc.c-torture/compile/pr34458.c: New testcase.\n+\n 2008-01-08  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR testsuite/30459"}, {"sha": "096cc0c9b89e7d37146dad1e4c75d342aff18126", "filename": "gcc/testsuite/gcc.c-torture/compile/pr34458.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def49dd7ca01bdeea7cf61c90da4206609e65ce5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34458.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def49dd7ca01bdeea7cf61c90da4206609e65ce5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34458.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34458.c?ref=def49dd7ca01bdeea7cf61c90da4206609e65ce5", "patch": "@@ -0,0 +1,16 @@\n+/* Testcase by Martin Michlmayr <tbm@cyrius.com> */\n+\n+typedef struct\n+{\n+  int data[1024];\n+}\n+Lint;\n+Lint lint_operate (Lint a, long long ammount)\n+{\n+  int index;\n+  Lint ret;\n+  for (index = 0; index < 24; index++)\n+    ret.data[index] =\n+      a.data[index + ammount / 32 + 1] << a.data[index + ammount / 32];\n+  return ret;\n+}"}, {"sha": "e4ac89a67b0748b6ebb25bded7dfdcc39c6134bb", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def49dd7ca01bdeea7cf61c90da4206609e65ce5/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def49dd7ca01bdeea7cf61c90da4206609e65ce5/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=def49dd7ca01bdeea7cf61c90da4206609e65ce5", "patch": "@@ -1820,15 +1820,24 @@ analyze_siv_subscript_cst_affine (tree chrec_a,\n /* Helper recursive function for initializing the matrix A.  Returns\n    the initial value of CHREC.  */\n \n-static int\n+static HOST_WIDE_INT\n initialize_matrix_A (lambda_matrix A, tree chrec, unsigned index, int mult)\n {\n+  tree type;\n+\n   gcc_assert (chrec);\n \n+  type = TREE_TYPE (chrec);\n   if (TREE_CODE (chrec) != POLYNOMIAL_CHREC)\n-    return int_cst_value (chrec);\n-\n-  A[index][0] = mult * int_cst_value (CHREC_RIGHT (chrec));\n+    return tree_low_cst (chrec, TYPE_UNSIGNED (type)\n+\t\t\t\t&& !(TREE_CODE (type) == INTEGER_TYPE\n+\t\t\t\t     && TYPE_IS_SIZETYPE (type)));\n+\n+  type = TREE_TYPE (CHREC_RIGHT (chrec));\n+  A[index][0] = mult * tree_low_cst (CHREC_RIGHT (chrec),\n+\t\t\t\t     TYPE_UNSIGNED (type)\n+\t\t\t\t     && !(TREE_CODE (type) == INTEGER_TYPE\n+\t\t\t\t\t  && TYPE_IS_SIZETYPE (type)));\n   return initialize_matrix_A (A, CHREC_LEFT (chrec), index + 1, mult);\n }\n "}]}