{"sha": "ca4938fa8e0e72fd59307f1f058db800c1e4a8f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E0OTM4ZmE4ZTBlNzJmZDU5MzA3ZjFmMDU4ZGI4MDBjMWU0YThmMw==", "commit": {"author": {"name": "zhengnannan", "email": "zhengnannan@huawei.com", "date": "2020-10-13T08:05:52Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-10-13T08:05:52Z"}, "message": "AArch64: Add FLAG for mul/mla/mls intrinsics [PR94442]\n\n2020-10-13  Zhiheng Xie  <xiezhiheng@huawei.com>\n\t    Nannan Zheng  <zhengnannan@huawei.com>\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n\tfor mul/mla/mls intrinsics.", "tree": {"sha": "9ffdc14e6a868e849c54a806fa116c68c1478015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ffdc14e6a868e849c54a806fa116c68c1478015"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca4938fa8e0e72fd59307f1f058db800c1e4a8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4938fa8e0e72fd59307f1f058db800c1e4a8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4938fa8e0e72fd59307f1f058db800c1e4a8f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4938fa8e0e72fd59307f1f058db800c1e4a8f3/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14707c896a207606f13886d3b3251e8db1f3c9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14707c896a207606f13886d3b3251e8db1f3c9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14707c896a207606f13886d3b3251e8db1f3c9c0"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "4c23328a5755147790af89afbcef6882e9e43787", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4938fa8e0e72fd59307f1f058db800c1e4a8f3/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4938fa8e0e72fd59307f1f058db800c1e4a8f3/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=ca4938fa8e0e72fd59307f1f058db800c1e4a8f3", "patch": "@@ -45,8 +45,8 @@\n \n   BUILTIN_VDC (COMBINE, combine, 0, ALL)\n   VAR1 (COMBINEP, combine, 0, ALL, di)\n-  BUILTIN_VB (BINOP, pmul, 0, ALL)\n-  BUILTIN_VHSDF_HSDF (BINOP, fmulx, 0, ALL)\n+  BUILTIN_VB (BINOP, pmul, 0, NONE)\n+  BUILTIN_VHSDF_HSDF (BINOP, fmulx, 0, FP)\n   BUILTIN_VHSDF_DF (UNOP, sqrt, 2, ALL)\n   BUILTIN_VD_BHSI (BINOP, addp, 0, NONE)\n   VAR1 (UNOP, addp, 0, NONE, di)\n@@ -189,11 +189,11 @@\n   BUILTIN_VQ_HSI (TERNOP, sqdmlal2_n, 0, ALL)\n   BUILTIN_VQ_HSI (TERNOP, sqdmlsl2_n, 0, ALL)\n \n-  BUILTIN_VD_BHSI (BINOP, intrinsic_vec_smult_lo_, 0, ALL)\n-  BUILTIN_VD_BHSI (BINOPU, intrinsic_vec_umult_lo_, 0, ALL)\n+  BUILTIN_VD_BHSI (BINOP, intrinsic_vec_smult_lo_, 0, NONE)\n+  BUILTIN_VD_BHSI (BINOPU, intrinsic_vec_umult_lo_, 0, NONE)\n \n-  BUILTIN_VQW (BINOP, vec_widen_smult_hi_, 10, ALL)\n-  BUILTIN_VQW (BINOPU, vec_widen_umult_hi_, 10, ALL)\n+  BUILTIN_VQW (BINOP, vec_widen_smult_hi_, 10, NONE)\n+  BUILTIN_VQW (BINOPU, vec_widen_umult_hi_, 10, NONE)\n \n   BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_lane_, 0, ALL)\n   BUILTIN_VD_HSI (QUADOP_LANE, vec_smlal_lane_, 0, ALL)\n@@ -246,10 +246,10 @@\n   BUILTIN_VHSDF (BINOP, fcadd270, 0, FP)\n \n   /* Implemented by aarch64_fcmla{_lane}{q}<rot><mode>.   */\n-  BUILTIN_VHSDF (TERNOP, fcmla0, 0, ALL)\n-  BUILTIN_VHSDF (TERNOP, fcmla90, 0, ALL)\n-  BUILTIN_VHSDF (TERNOP, fcmla180, 0, ALL)\n-  BUILTIN_VHSDF (TERNOP, fcmla270, 0, ALL)\n+  BUILTIN_VHSDF (TERNOP, fcmla0, 0, FP)\n+  BUILTIN_VHSDF (TERNOP, fcmla90, 0, FP)\n+  BUILTIN_VHSDF (TERNOP, fcmla180, 0, FP)\n+  BUILTIN_VHSDF (TERNOP, fcmla270, 0, FP)\n   BUILTIN_VHSDF (QUADOP_LANE_PAIR, fcmla_lane0, 0, ALL)\n   BUILTIN_VHSDF (QUADOP_LANE_PAIR, fcmla_lane90, 0, ALL)\n   BUILTIN_VHSDF (QUADOP_LANE_PAIR, fcmla_lane180, 0, ALL)\n@@ -534,8 +534,8 @@\n   VAR1 (TERNOPU, crypto_sha256su1, 0, ALL, v4si)\n \n   /* Implemented by aarch64_crypto_pmull<mode>.  */\n-  VAR1 (BINOPP, crypto_pmull, 0, ALL, di)\n-  VAR1 (BINOPP, crypto_pmull, 0, ALL, v2di)\n+  VAR1 (BINOPP, crypto_pmull, 0, NONE, di)\n+  VAR1 (BINOPP, crypto_pmull, 0, NONE, v2di)\n \n   /* Implemented by aarch64_tbl3<mode>.  */\n   VAR1 (BINOP, tbl3, 0, ALL, v8qi)\n@@ -666,15 +666,15 @@\n   BUILTIN_VQ_I (TERNOP, bcaxq, 4, ALL)\n \n   /* Implemented by aarch64_fml<f16mac1>l<f16quad>_low<mode>.  */\n-  VAR1 (TERNOP, fmlal_low, 0, ALL, v2sf)\n-  VAR1 (TERNOP, fmlsl_low, 0, ALL, v2sf)\n-  VAR1 (TERNOP, fmlalq_low, 0, ALL, v4sf)\n-  VAR1 (TERNOP, fmlslq_low, 0, ALL, v4sf)\n+  VAR1 (TERNOP, fmlal_low, 0, FP, v2sf)\n+  VAR1 (TERNOP, fmlsl_low, 0, FP, v2sf)\n+  VAR1 (TERNOP, fmlalq_low, 0, FP, v4sf)\n+  VAR1 (TERNOP, fmlslq_low, 0, FP, v4sf)\n   /* Implemented by aarch64_fml<f16mac1>l<f16quad>_high<mode>.  */\n-  VAR1 (TERNOP, fmlal_high, 0, ALL, v2sf)\n-  VAR1 (TERNOP, fmlsl_high, 0, ALL, v2sf)\n-  VAR1 (TERNOP, fmlalq_high, 0, ALL, v4sf)\n-  VAR1 (TERNOP, fmlslq_high, 0, ALL, v4sf)\n+  VAR1 (TERNOP, fmlal_high, 0, FP, v2sf)\n+  VAR1 (TERNOP, fmlsl_high, 0, FP, v2sf)\n+  VAR1 (TERNOP, fmlalq_high, 0, FP, v4sf)\n+  VAR1 (TERNOP, fmlslq_high, 0, FP, v4sf)\n   /* Implemented by aarch64_fml<f16mac1>l_lane_lowv2sf.  */\n   VAR1 (QUADOP_LANE, fmlal_lane_low, 0, ALL, v2sf)\n   VAR1 (QUADOP_LANE, fmlsl_lane_low, 0, ALL, v2sf)\n@@ -712,20 +712,20 @@\n   VAR2 (QUADOP_LANE_PAIR, bfdot_laneq, 0, ALL, v2sf, v4sf)\n \n   /* Implemented by aarch64_bfmmlaqv4sf  */\n-  VAR1 (TERNOP, bfmmlaq, 0, ALL, v4sf)\n+  VAR1 (TERNOP, bfmmlaq, 0, AUTO_FP, v4sf)\n \n   /* Implemented by aarch64_bfmlal<bt>{_lane{q}}v4sf  */\n-  VAR1 (TERNOP, bfmlalb, 0, ALL, v4sf)\n-  VAR1 (TERNOP, bfmlalt, 0, ALL, v4sf)\n+  VAR1 (TERNOP, bfmlalb, 0, FP, v4sf)\n+  VAR1 (TERNOP, bfmlalt, 0, FP, v4sf)\n   VAR1 (QUADOP_LANE, bfmlalb_lane, 0, ALL, v4sf)\n   VAR1 (QUADOP_LANE, bfmlalt_lane, 0, ALL, v4sf)\n   VAR1 (QUADOP_LANE, bfmlalb_lane_q, 0, ALL, v4sf)\n   VAR1 (QUADOP_LANE, bfmlalt_lane_q, 0, ALL, v4sf)\n \n   /* Implemented by aarch64_simd_<sur>mmlav16qi.  */\n-  VAR1 (TERNOP, simd_smmla, 0, ALL, v16qi)\n-  VAR1 (TERNOPU, simd_ummla, 0, ALL, v16qi)\n-  VAR1 (TERNOP_SSUS, simd_usmmla, 0, ALL, v16qi)\n+  VAR1 (TERNOP, simd_smmla, 0, NONE, v16qi)\n+  VAR1 (TERNOPU, simd_ummla, 0, NONE, v16qi)\n+  VAR1 (TERNOP_SSUS, simd_usmmla, 0, NONE, v16qi)\n \n   /* Implemented by aarch64_bfcvtn{q}{2}<mode>  */\n   VAR1 (UNOP, bfcvtn, 0, ALL, v4bf)"}]}