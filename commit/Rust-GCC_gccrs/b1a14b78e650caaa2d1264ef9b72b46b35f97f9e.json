{"sha": "b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhMTRiNzhlNjUwY2FhYTJkMTI2NGVmOWI3MmI0NmIzNWY5N2Y5ZQ==", "commit": {"author": {"name": "David Ung", "email": "davidu@mips.com", "date": "2007-07-04T16:50:38Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-07-04T16:50:38Z"}, "message": "mips.md (type): Add logical, signext and move.\n\n2007-07-04  David Ung  <davidu@mips.com>\n            Joseph Myers  <joseph@codesourcery.com>\n\n\t* config/mips/mips.md (type): Add logical, signext and move.\n\t(one_cmpl<mode>2, *and<mode>3, *and<mode>3_mips16, *ior<mode>3,\n\t*ior<mode>3_mips16, two unnamed insns after *ior<mode>3_mips16,\n\t*nor<mode>3, \"Combiner patterns to optimize truncate/zero_extend\n\tcombinations\", *zero_extend<SHORT:mode><GPR:mode>2,\n\t*zero_extendqihi2, *extend<SHORT:mode><GPR:mode>2_mips16e,\n\t*extend<SHORT:mode><GPR:mode>2_se<SHORT:size>, *movdi_64bit,\n\t*movdi_64bit_mips16, *movsi_internal, *movsi_mips16, movcc,\n\t*movhi_internal, *movhi_mips16, *movqi_internal, *movqi_mips16,\n\t*movsf_hardfloat, *movsf_softfloat, *movsf_mips16,\n\t*movdf_hardfloat_64bit, *movdf_hardfloat_32bit,\n\tmovv2sf_hardfloat_64bit): Use the new types.\n\t(*movdi_32bit, *movdi_gp32_fp64, *movdi_32bit_mips16,\n\t*movdf_softfloat, *movdf_mips16): Use \"multi\".\n\t(extendqihi2): Replace with a define_expand.\n\t(*extendqihi2_mips16e, *extendqihi2, *extendqihi2_seb): New.\n\tBased on extend<SHORT:mode><GPR:mode>2 patterns.\n\t* config/mips/74k.md (r74k_int_logical): New reservation and\n\tbypasses.\n\t(r74k_int_arith): Remove \"slt\".\n\t* config/mips/24k.md, config/mips/4130.md, config/mips/4k.md,\n\tconfig/mips/5400.md, config/mips/5500.md, config/mips/5k.md,\n\tconfig/mips/7000.md, config/mips/9000.md, config/mips/generic.md,\n\tconfig/mips/sb1.md, config/mips/sr71k.md: Add new types to\n\treservations for \"arith\".\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r126327", "tree": {"sha": "c160ca119e481152ec935d2a712c621bc591611d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c160ca119e481152ec935d2a712c621bc591611d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/comments", "author": null, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fc669451b1d89a52bc12096eb38d7393c0b98ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc669451b1d89a52bc12096eb38d7393c0b98ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc669451b1d89a52bc12096eb38d7393c0b98ce"}], "stats": {"total": 203, "additions": 139, "deletions": 64}, "files": [{"sha": "278b3a31b0e217c37958929198b10572cc590696", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -1,3 +1,32 @@\n+2007-07-04  David Ung  <davidu@mips.com>\n+            Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/mips/mips.md (type): Add logical, signext and move.\n+\t(one_cmpl<mode>2, *and<mode>3, *and<mode>3_mips16, *ior<mode>3,\n+\t*ior<mode>3_mips16, two unnamed insns after *ior<mode>3_mips16,\n+\t*nor<mode>3, \"Combiner patterns to optimize truncate/zero_extend\n+\tcombinations\", *zero_extend<SHORT:mode><GPR:mode>2,\n+\t*zero_extendqihi2, *extend<SHORT:mode><GPR:mode>2_mips16e,\n+\t*extend<SHORT:mode><GPR:mode>2_se<SHORT:size>, *movdi_64bit,\n+\t*movdi_64bit_mips16, *movsi_internal, *movsi_mips16, movcc,\n+\t*movhi_internal, *movhi_mips16, *movqi_internal, *movqi_mips16,\n+\t*movsf_hardfloat, *movsf_softfloat, *movsf_mips16,\n+\t*movdf_hardfloat_64bit, *movdf_hardfloat_32bit,\n+\tmovv2sf_hardfloat_64bit): Use the new types.\n+\t(*movdi_32bit, *movdi_gp32_fp64, *movdi_32bit_mips16,\n+\t*movdf_softfloat, *movdf_mips16): Use \"multi\".\n+\t(extendqihi2): Replace with a define_expand.\n+\t(*extendqihi2_mips16e, *extendqihi2, *extendqihi2_seb): New.\n+\tBased on extend<SHORT:mode><GPR:mode>2 patterns.\n+\t* config/mips/74k.md (r74k_int_logical): New reservation and\n+\tbypasses.\n+\t(r74k_int_arith): Remove \"slt\".\n+\t* config/mips/24k.md, config/mips/4130.md, config/mips/4k.md,\n+\tconfig/mips/5400.md, config/mips/5500.md, config/mips/5k.md,\n+\tconfig/mips/7000.md, config/mips/9000.md, config/mips/generic.md,\n+\tconfig/mips/sb1.md, config/mips/sr71k.md: Add new types to\n+\treservations for \"arith\".\n+\n 2007-07-04  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa.c (useless_type_conversion_p): Add handling for"}, {"sha": "7de816f42994a9e96ec24b6e4db046e1eddc016d", "filename": "gcc/config/mips/24k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F24k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F24k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F24k.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -55,7 +55,7 @@\n ;;  differentiate between integer/float moves)\n (define_insn_reservation \"r24k_int_arith\" 1\n   (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n-       (eq_attr \"type\" \"arith,const,nop,shift,slt\"))\n+       (eq_attr \"type\" \"arith,const,logical,move,nop,shift,signext,slt\"))\n   \"r24k_iss+r24k_ixu_arith\")\n \n "}, {"sha": "c1d9d1bddba24aac369e0b9b579a2dd57c0f66a0", "filename": "gcc/config/mips/4130.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F4130.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F4130.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F4130.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -66,7 +66,7 @@\n \n (define_insn_reservation \"vr4130_int\" 1\n   (and (eq_attr \"cpu\" \"r4130\")\n-       (eq_attr \"type\" \"const,arith,shift,slt,nop\"))\n+       (eq_attr \"type\" \"arith,const,logical,move,nop,shift,signext,slt\"))\n   \"vr4130_alu1 | vr4130_alu2\")\n \n (define_insn_reservation \"vr4130_load\" 3"}, {"sha": "b24444196812d5b6dc08187f2878206a1c57afbb", "filename": "gcc/config/mips/4k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F4k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F4k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F4k.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -127,7 +127,7 @@\n ;; All other integer insns.\n (define_insn_reservation \"r4k_int_alu\" 1\n   (and (eq_attr \"cpu\" \"4kc,4kp\")\n-       (eq_attr \"type\" \"arith,condmove,shift,const,nop,slt\"))\n+       (eq_attr \"type\" \"arith,condmove,const,logical,move,nop,shift,signext,slt\"))\n   \"r4k_ixu_arith\")\n \n (define_insn_reservation \"r4k_int_branch\" 1"}, {"sha": "072894dba76eb37323851b86af8cd0768da32f70", "filename": "gcc/config/mips/5400.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F5400.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F5400.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5400.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -60,7 +60,7 @@\n \n (define_insn_reservation \"ir_vr54_arith\" 1\n   (and (eq_attr \"cpu\" \"r5400\")\n-       (eq_attr \"type\" \"arith,shift,slt,clz,const,nop,trap\"))\n+       (eq_attr \"type\" \"arith,shift,signext,slt,clz,const,logical,move,nop,trap\"))\n   \"vr54_dp0|vr54_dp1\")\n \n (define_insn_reservation \"ir_vr54_imul_si\" 3"}, {"sha": "5f2480506681ed641341cd0a7ec628beefe5a213", "filename": "gcc/config/mips/5500.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F5500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F5500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5500.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -56,7 +56,7 @@\n \n (define_insn_reservation \"ir_vr55_arith\" 1\n   (and (eq_attr \"cpu\" \"r5500\")\n-       (eq_attr \"type\" \"arith,shift,slt,clz,const,nop,trap\"))\n+       (eq_attr \"type\" \"arith,shift,signext,slt,clz,const,logical,move,nop,trap\"))\n   \"vr55_dp0|vr55_dp1\")\n \n (define_bypass 2"}, {"sha": "b8a5a0197399c58d47a82cc2253eb3e405dd4d35", "filename": "gcc/config/mips/5k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F5k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F5k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5k.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -101,7 +101,7 @@\n ;; All other integer insns.\n (define_insn_reservation \"r5k_int_alu\" 1\n   (and (eq_attr \"cpu\" \"5kc,5kf\")\n-       (eq_attr \"type\" \"arith,condmove,shift,const,nop,slt\"))\n+       (eq_attr \"type\" \"arith,condmove,const,logical,move,nop,shift,signext,slt\"))\n   \"r5k_ixu_arith\")\n \n (define_insn_reservation \"r5k_int_branch\" 1"}, {"sha": "91209bfa43fdd032ff2c1d6fb606cd225c12048d", "filename": "gcc/config/mips/7000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F7000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F7000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F7000.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -88,7 +88,7 @@\n \n (define_insn_reservation \"rm7_int_other\" 1\n   (and (eq_attr \"cpu\" \"r7000\")\n-       (eq_attr \"type\" \"arith,shift,slt,clz,const,condmove,nop,trap\"))\n+       (eq_attr \"type\" \"arith,shift,signext,slt,clz,const,condmove,logical,move,nop,trap\"))\n   \"rm7_iaddsub\")\n \n (define_insn_reservation \"rm7_ld\" 2"}, {"sha": "e4d1e413821bc738dacfadb34079627686d6fd6b", "filename": "gcc/config/mips/74k.md", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F74k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F74k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F74k.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -35,13 +35,18 @@\n ;; Producers\n ;; --------------------------------------------------------------\n \n-;; Arithmetic: add, addi, addiu, addiupc, addu, and, andi, clo, clz,\n-;;    ext, ins, lui, movn, movz, nor, or, ori, rotr, rotrv, seb, seh, sll,\n-;;    sllv, slt, slti, sltiu, sltu, sra, srav, srl, srlv, sub, subu, wsbh,\n-;;    xor, xori\n+;; ALU: Logicals/Arithmetics\n+;; - Logicals, move (addu/addiu with rt = 0), Set less than, \n+;;   sign extend - 1 cycle\n+(define_insn_reservation \"r74k_int_logical\" 1\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n+       (eq_attr \"type\" \"logical,move,signext,slt\"))\n+  \"r74k_alu\")\n+\n+;; - Arithmetics - 2 cycles\n (define_insn_reservation \"r74k_int_arith\" 2\n   (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n-       (eq_attr \"type\" \"arith,const,shift,slt,clz\"))\n+       (eq_attr \"type\" \"arith,const,shift,clz\"))\n   \"r74k_alu\")\n \n (define_insn_reservation \"r74k_int_nop\" 0\n@@ -137,6 +142,12 @@\n (define_bypass 4 \"r74k_int_load\" \"r74k_int_load\")\n (define_bypass 4 \"r74k_int_load\" \"r74k_int_store\" \"!store_data_bypass_p\")\n \n+;; logical/move/slt/signext->next use :  1 cycles (Default)\n+;; logical/move/slt/signext->load base:  2 cycles\n+;; logical/move/slt/signext->store base: 2 cycles\n+(define_bypass 2 \"r74k_int_logical\" \"r74k_int_load\")\n+(define_bypass 2 \"r74k_int_logical\" \"r74k_int_store\" \"!store_data_bypass_p\")\n+\n ;; arith->next use :  2 cycles (Default)\n ;; arith->load base:  3 cycles\n ;; arith->store base: 3 cycles"}, {"sha": "de95a572e4dd2f72cb82b1d7dd1a7d303dc43e0e", "filename": "gcc/config/mips/9000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F9000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2F9000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F9000.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -52,7 +52,7 @@\n \n (define_insn_reservation \"rm9k_int\" 1\n   (and (eq_attr \"cpu\" \"r9000\")\n-       (eq_attr \"type\" \"arith,shift,slt,clz,const,nop,trap\"))\n+       (eq_attr \"type\" \"arith,shift,signext,slt,clz,const,logical,move,nop,trap\"))\n   \"rm9k_any1 | rm9k_any2\")\n \n (define_insn_reservation \"rm9k_int_cmove\" 2"}, {"sha": "fdfbffa46f6d60a93ace6244f829786d07be01fe", "filename": "gcc/config/mips/generic.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2Fgeneric.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2Fgeneric.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgeneric.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -24,7 +24,7 @@\n \n (define_insn_reservation \"generic_alu\" 1\n   (eq_attr \"type\" \"unknown,prefetch,prefetchx,condmove,const,arith,\n-\t\t   shift,slt,clz,trap,multi,nop\")\n+\t\t   shift,slt,clz,trap,multi,nop,logical,signext,move\")\n   \"alu\")\n \n (define_insn_reservation \"generic_load\" 3"}, {"sha": "905b365dfa7bf1a7a86afafb4cb58dce0eeb48d6", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 82, "deletions": 47, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -252,15 +252,18 @@\n ;; mthilo\ttransfer to hi/lo registers\n ;; mfhilo\ttransfer from hi/lo registers\n ;; const\tload constant\n-;; arith\tinteger arithmetic and logical instructions\n+;; arith\tinteger arithmetic instructions\n+;; logical      integer logical instructions\n ;; shift\tinteger shift instructions\n ;; slt\t\tset less than instructions\n+;; signext      sign extend instuctions\n ;; clz\t\tthe clz and clo instructions\n ;; trap\t\ttrap if instructions\n ;; imul\t\tinteger multiply 2 operands\n ;; imul3\tinteger multiply 3 operands\n ;; imadd\tinteger multiply-add\n ;; idiv\t\tinteger divide\n+;; move\t\tinteger register move ({,D}ADD{,U} with rt = 0)\n ;; fmove\tfloating point register move\n ;; fadd\t\tfloating point add/subtract\n ;; fmul\t\tfloating point multiply\n@@ -280,7 +283,7 @@\n ;; multi\tmultiword sequence (or user asm statements)\n ;; nop\t\tno operation\n (define_attr \"type\"\n-  \"unknown,branch,jump,call,load,fpload,fpidxload,store,fpstore,fpidxstore,prefetch,prefetchx,condmove,mfc,mtc,mthilo,mfhilo,const,arith,shift,slt,clz,trap,imul,imul3,imadd,idiv,fmove,fadd,fmul,fmadd,fdiv,frdiv,frdiv1,frdiv2,fabs,fneg,fcmp,fcvt,fsqrt,frsqrt,frsqrt1,frsqrt2,multi,nop\"\n+  \"unknown,branch,jump,call,load,fpload,fpidxload,store,fpstore,fpidxstore,prefetch,prefetchx,condmove,mfc,mtc,mthilo,mfhilo,const,arith,logical,shift,slt,signext,clz,trap,imul,imul3,imadd,idiv,move,fmove,fadd,fmul,fmadd,fdiv,frdiv,frdiv1,frdiv2,fabs,fneg,fcmp,fcvt,fsqrt,frsqrt,frsqrt1,frsqrt2,multi,nop\"\n   (cond [(eq_attr \"jal\" \"!unset\") (const_string \"call\")\n \t (eq_attr \"got\" \"load\") (const_string \"load\")]\n \t(const_string \"unknown\")))\n@@ -2110,7 +2113,7 @@\n   else\n     return \"nor\\t%0,%.,%1\";\n }\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \f\n ;;\n@@ -2142,7 +2145,7 @@\n   \"@\n    and\\t%0,%1,%2\n    andi\\t%0,%1,%x2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*and<mode>3_mips16\"\n@@ -2151,7 +2154,7 @@\n \t\t (match_operand:GPR 2 \"register_operand\" \"d\")))]\n   \"TARGET_MIPS16\"\n   \"and\\t%0,%2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"ior<mode>3\"\n@@ -2172,7 +2175,7 @@\n   \"@\n    or\\t%0,%1,%2\n    ori\\t%0,%1,%x2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*ior<mode>3_mips16\"\n@@ -2181,7 +2184,7 @@\n \t\t (match_operand:GPR 2 \"register_operand\" \"d\")))]\n   \"TARGET_MIPS16\"\n   \"or\\t%0,%2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"xor<mode>3\"\n@@ -2199,7 +2202,7 @@\n   \"@\n    xor\\t%0,%1,%2\n    xori\\t%0,%1,%x2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"\"\n@@ -2211,7 +2214,7 @@\n    xor\\t%0,%2\n    cmpi\\t%1,%2\n    cmp\\t%1,%2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"type\" \"logical,arith,arith\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n@@ -2226,7 +2229,7 @@\n \t\t (not:GPR (match_operand:GPR 2 \"register_operand\" \"d\"))))]\n   \"!TARGET_MIPS16\"\n   \"nor\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \f\n ;;\n@@ -2357,7 +2360,7 @@\n                          (match_operand:DI 1 \"register_operand\" \"d\"))))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"andi\\t%0,%1,0xffff\"\n-  [(set_attr \"type\"     \"arith\")\n+  [(set_attr \"type\"     \"logical\")\n    (set_attr \"mode\"     \"SI\")])\n \n (define_insn \"\"\n@@ -2366,7 +2369,7 @@\n                          (match_operand:DI 1 \"register_operand\" \"d\"))))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"andi\\t%0,%1,0xff\"\n-  [(set_attr \"type\"     \"arith\")\n+  [(set_attr \"type\"     \"logical\")\n    (set_attr \"mode\"     \"SI\")])\n \n (define_insn \"\"\n@@ -2375,7 +2378,7 @@\n                          (match_operand:DI 1 \"register_operand\" \"d\"))))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"andi\\t%0,%1,0xff\"\n-  [(set_attr \"type\"     \"arith\")\n+  [(set_attr \"type\"     \"logical\")\n    (set_attr \"mode\"     \"HI\")])\n \f\n ;;\n@@ -2453,7 +2456,7 @@\n   \"@\n    andi\\t%0,%1,<SHORT:mask>\n    l<SHORT:size>u\\t%0,%1\"\n-  [(set_attr \"type\" \"arith,load\")\n+  [(set_attr \"type\" \"logical,load\")\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n \n (define_insn \"*zero_extend<SHORT:mode><GPR:mode>2_mips16e\"\n@@ -2492,7 +2495,7 @@\n   \"@\n    andi\\t%0,%1,0x00ff\n    lbu\\t%0,%1\"\n-  [(set_attr \"type\" \"arith,load\")\n+  [(set_attr \"type\" \"logical,load\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*zero_extendqihi2_mips16\"\n@@ -2549,7 +2552,7 @@\n   \"@\n    se<SHORT:size>\\t%0\n    l<SHORT:size>\\t%0,%1\"\n-  [(set_attr \"type\" \"arith,load\")\n+  [(set_attr \"type\" \"signext,load\")\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n \n (define_insn_and_split \"*extend<SHORT:mode><GPR:mode>2\"\n@@ -2580,23 +2583,55 @@\n   \"@\n    se<SHORT:size>\\t%0,%1\n    l<SHORT:size>\\t%0,%1\"\n-  [(set_attr \"type\" \"arith,load\")\n+  [(set_attr \"type\" \"signext,load\")\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n \n-;; This pattern generates the same code as extendqisi2; split it into\n-;; that form after reload.\n-(define_insn_and_split \"extendqihi2\"\n+(define_expand \"extendqihi2\"\n+  [(set (match_operand:HI 0 \"register_operand\")\n+        (sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\")))]\n+  \"\")\n+\n+(define_insn \"*extendqihi2_mips16e\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d\")\n-        (sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n-  \"\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(set (match_dup 0) (sign_extend:SI (match_dup 1)))]\n-  { operands[0] = gen_lowpart (SImode, operands[0]); }\n-  [(set_attr \"type\" \"arith,load\")\n+        (sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"0,m\")))]\n+  \"GENERATE_MIPS16E\"\n+  \"@\n+   seb\\t%0\n+   lb\\t%0,%1\"\n+  [(set_attr \"type\" \"signext,load\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn_and_split \"*extendqihi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d,d\")\n+        (sign_extend:HI\n+\t     (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n+  \"!ISA_HAS_SEB_SEH && !GENERATE_MIPS16E\"\n+  \"@\n+   #\n+   lb\\t%0,%1\"\n+  \"&& reload_completed && REG_P (operands[1])\"\n+  [(set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (ashiftrt:SI (match_dup 0) (match_dup 2)))]\n+{\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = GEN_INT (GET_MODE_BITSIZE (SImode)\n+\t\t\t - GET_MODE_BITSIZE (QImode));\n+}\n+  [(set_attr \"type\" \"multi,load\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"length\" \"8,*\")])\n \n+(define_insn \"*extendqihi2_seb\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d,d\")\n+        (sign_extend:HI\n+\t     (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n+  \"ISA_HAS_SEB_SEH\"\n+  \"@\n+   seb\\t%0,%1\n+   lb\\t%0,%1\"\n+  [(set_attr \"type\" \"signext,load\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\")))]\n@@ -3320,7 +3355,7 @@\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"arith,arith,load,store,mthilo,mfhilo,mtc,load,mfc,store\")\n+  [(set_attr \"type\"\t\"multi,multi,load,store,mthilo,mfhilo,mtc,load,mfc,store\")\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr \"length\"   \"8,16,*,*,8,8,8,*,8,*\")])\n \n@@ -3331,7 +3366,7 @@\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"arith,arith,load,store,mthilo,mfhilo,fmove,mtc,fpload,mfc,fpstore\")\n+  [(set_attr \"type\"\t\"multi,multi,load,store,mthilo,mfhilo,fmove,mtc,fpload,mfc,fpstore\")\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr \"length\"   \"8,16,*,*,8,8,4,8,*,8,*\")])\n \n@@ -3342,7 +3377,7 @@\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"arith,arith,arith,arith,arith,load,store,mfhilo\")\n+  [(set_attr \"type\"\t\"multi,multi,multi,multi,multi,load,store,mfhilo\")\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr \"length\"\t\"8,8,8,8,12,*,*,8\")])\n \n@@ -3353,7 +3388,7 @@\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"arith,const,const,load,store,fmove,mtc,fpload,mfc,fpstore,mthilo,mtc,load,mfc,store\")\n+  [(set_attr \"type\"\t\"move,const,const,load,store,fmove,mtc,fpload,mfc,fpstore,mthilo,mtc,load,mfc,store\")\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr \"length\"\t\"4,*,*,*,*,4,4,*,4,*,4,8,*,8,*\")])\n \n@@ -3364,7 +3399,7 @@\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"arith,arith,arith,arith,arith,const,load,store\")\n+  [(set_attr \"type\"\t\"move,move,move,arith,arith,const,load,store\")\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n@@ -3449,7 +3484,7 @@\n    && (register_operand (operands[0], SImode)\n        || reg_or_0_operand (operands[1], SImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"arith,const,const,load,store,fmove,mtc,fpload,mfc,fpstore,mfc,mtc,mthilo,mfhilo,mtc,load,mfc,store\")\n+  [(set_attr \"type\"\t\"move,const,const,load,store,fmove,mtc,fpload,mfc,fpstore,mfc,mtc,mthilo,mfhilo,mtc,load,mfc,store\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"4,*,*,*,*,4,4,*,4,*,4,4,4,4,4,*,4,*\")])\n \n@@ -3460,7 +3495,7 @@\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"arith,arith,arith,arith,arith,const,load,store\")\n+  [(set_attr \"type\"\t\"move,move,move,arith,arith,const,load,store\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n@@ -3550,7 +3585,7 @@\n \t(match_operand:CC 1 \"general_operand\" \"z,*d,*m,*d,*f,*d,*f,*m,*f\"))]\n   \"ISA_HAS_8CC && TARGET_HARD_FLOAT\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"multi,arith,load,store,mfc,mtc,fmove,fpload,fpstore\")\n+  [(set_attr \"type\"\t\"multi,move,load,store,mfc,mtc,fmove,fpload,fpstore\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"8,4,*,*,4,4,4,*,*\")])\n \n@@ -3650,7 +3685,7 @@\n     mtc1\\t%1,%0\n     mov.s\\t%0,%1\n     mt%0\\t%1\"\n-  [(set_attr \"type\"\t\"arith,arith,load,store,mfc,mtc,fmove,mthilo\")\n+  [(set_attr \"type\"\t\"move,arith,load,store,mfc,mtc,fmove,mthilo\")\n    (set_attr \"mode\"\t\"HI\")\n    (set_attr \"length\"\t\"4,4,*,*,4,4,4,4\")])\n \n@@ -3668,7 +3703,7 @@\n     #\n     lhu\\t%0,%1\n     sh\\t%1,%0\"\n-  [(set_attr \"type\"\t\"arith,arith,arith,arith,arith,load,store\")\n+  [(set_attr \"type\"\t\"move,move,move,arith,arith,load,store\")\n    (set_attr \"mode\"\t\"HI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n@@ -3757,7 +3792,7 @@\n     mtc1\\t%1,%0\n     mov.s\\t%0,%1\n     mt%0\\t%1\"\n-  [(set_attr \"type\"\t\"arith,arith,load,store,mfc,mtc,fmove,mthilo\")\n+  [(set_attr \"type\"\t\"move,arith,load,store,mfc,mtc,fmove,mthilo\")\n    (set_attr \"mode\"\t\"QI\")\n    (set_attr \"length\"\t\"4,4,*,*,4,4,4,4\")])\n \n@@ -3775,7 +3810,7 @@\n     #\n     lbu\\t%0,%1\n     sb\\t%1,%0\"\n-  [(set_attr \"type\"\t\"arith,arith,arith,arith,arith,load,store\")\n+  [(set_attr \"type\"\t\"move,move,move,arith,arith,load,store\")\n    (set_attr \"mode\"\t\"QI\")\n    (set_attr \"length\"\t\"4,4,4,4,8,*,*\")])\n \n@@ -3827,7 +3862,7 @@\n    && (register_operand (operands[0], SFmode)\n        || reg_or_0_operand (operands[1], SFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"fmove,mtc,fpload,fpstore,store,mtc,mfc,arith,load,store\")\n+  [(set_attr \"type\"\t\"fmove,mtc,fpload,fpstore,store,mtc,mfc,move,load,store\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"4,4,*,*,*,4,4,4,*,*\")])\n \n@@ -3838,7 +3873,7 @@\n    && (register_operand (operands[0], SFmode)\n        || reg_or_0_operand (operands[1], SFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"arith,load,store\")\n+  [(set_attr \"type\"\t\"move,load,store\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"4,*,*\")])\n \n@@ -3849,7 +3884,7 @@\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"arith,arith,arith,load,store\")\n+  [(set_attr \"type\"\t\"move,move,move,load,store\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"4,4,4,*,*\")])\n \n@@ -3872,7 +3907,7 @@\n    && (register_operand (operands[0], DFmode)\n        || reg_or_0_operand (operands[1], DFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"fmove,mtc,fpload,fpstore,store,mtc,mfc,arith,load,store\")\n+  [(set_attr \"type\"\t\"fmove,mtc,fpload,fpstore,store,mtc,mfc,move,load,store\")\n    (set_attr \"mode\"\t\"DF\")\n    (set_attr \"length\"\t\"4,4,*,*,*,4,4,4,*,*\")])\n \n@@ -3884,7 +3919,7 @@\n    && (register_operand (operands[0], DFmode)\n        || reg_or_0_operand (operands[1], DFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"fmove,mtc,fpload,fpstore,store,mtc,mfc,arith,load,store\")\n+  [(set_attr \"type\"\t\"fmove,mtc,fpload,fpstore,store,mtc,mfc,move,load,store\")\n    (set_attr \"mode\"\t\"DF\")\n    (set_attr \"length\"\t\"4,8,*,*,*,8,8,8,*,*\")])\n \n@@ -3895,7 +3930,7 @@\n    && (register_operand (operands[0], DFmode)\n        || reg_or_0_operand (operands[1], DFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"arith,load,store,mfc,mtc,fmove\")\n+  [(set_attr \"type\"\t\"multi,load,store,mfc,mtc,fmove\")\n    (set_attr \"mode\"\t\"DF\")\n    (set_attr \"length\"\t\"8,*,*,4,4,4\")])\n \n@@ -3906,7 +3941,7 @@\n    && (register_operand (operands[0], DFmode)\n        || register_operand (operands[1], DFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"arith,arith,arith,load,store\")\n+  [(set_attr \"type\"\t\"multi,multi,multi,load,store\")\n    (set_attr \"mode\"\t\"DF\")\n    (set_attr \"length\"\t\"8,8,8,*,*\")])\n \n@@ -3966,7 +4001,7 @@\n    && (register_operand (operands[0], V2SFmode)\n        || reg_or_0_operand (operands[1], V2SFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\" \"fmove,mtc,fpload,fpstore,store,mtc,mfc,arith,load,store\")\n+  [(set_attr \"type\" \"fmove,mtc,fpload,fpstore,store,mtc,mfc,move,load,store\")\n    (set_attr \"mode\" \"SF\")\n    (set_attr \"length\" \"4,4,*,*,*,4,4,4,*,*\")])\n "}, {"sha": "2d8e2fe3bf725fd91349b53580da3f6e7c6d77ab", "filename": "gcc/config/mips/sb1.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2Fsb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2Fsb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsb1.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -236,15 +236,15 @@\n \n (define_insn_reservation \"ir_sb1_simple_alu\" 2\n   (and (eq_attr \"cpu\" \"sb1\")\n-       (eq_attr \"type\" \"const,arith\"))\n+       (eq_attr \"type\" \"const,arith,logical,move,signext\"))\n   \"sb1_ls1 | sb1_ex1 | sb1_ex0\")\n \n ;; On SB-1A, simple alu instructions can not execute on the LS1 unit, and we\n ;; have none of the above problems.\n \n (define_insn_reservation \"ir_sb1a_simple_alu\" 1\n   (and (eq_attr \"cpu\" \"sb1a\")\n-       (eq_attr \"type\" \"const,arith\"))\n+       (eq_attr \"type\" \"const,arith,logical,move,signext\"))\n   \"sb1_ex1 | sb1_ex0\")\n \n ;; ??? condmove also includes some FP instructions that execute on the FP"}, {"sha": "c69a946301b933f97b924b2d9adeb54cd4839235", "filename": "gcc/config/mips/sr71k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2Fsr71k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a14b78e650caaa2d1264ef9b72b46b35f97f9e/gcc%2Fconfig%2Fmips%2Fsr71k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsr71k.md?ref=b1a14b78e650caaa2d1264ef9b72b46b35f97f9e", "patch": "@@ -188,7 +188,7 @@\n \n (define_insn_reservation \"ir_sr70_arith\" 1\n   (and (eq_attr \"cpu\" \"sr71000\")\n-       (eq_attr \"type\" \"arith,shift,slt,clz,const,trap\"))\n+       (eq_attr \"type\" \"arith,shift,signext,slt,clz,const,logical,move,trap\"))\n   \"ri_insns\")\n \n ;; emulate repeat (dispatch stall) by spending extra cycle(s) in"}]}