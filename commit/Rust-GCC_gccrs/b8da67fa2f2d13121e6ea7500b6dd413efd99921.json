{"sha": "b8da67fa2f2d13121e6ea7500b6dd413efd99921", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhkYTY3ZmEyZjJkMTMxMjFlNmVhNzUwMGI2ZGQ0MTNlZmQ5OTkyMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-28T12:13:15Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-28T12:13:15Z"}, "message": "pool_allocator.h (class __pool_alloc): Use operator new and operator delete.\n\n2003-12-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/pool_allocator.h (class __pool_alloc): Use\n\toperator new and operator delete.\n\nFrom-SVN: r75181", "tree": {"sha": "27dc566b1a35f09df17779e46b2361e4da54a75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27dc566b1a35f09df17779e46b2361e4da54a75a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8da67fa2f2d13121e6ea7500b6dd413efd99921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8da67fa2f2d13121e6ea7500b6dd413efd99921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8da67fa2f2d13121e6ea7500b6dd413efd99921", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8da67fa2f2d13121e6ea7500b6dd413efd99921/comments", "author": null, "committer": null, "parents": [{"sha": "920be544c9470f7606623a82b1ca8b5ace4d58cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920be544c9470f7606623a82b1ca8b5ace4d58cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/920be544c9470f7606623a82b1ca8b5ace4d58cd"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "dec3de63a34bce6a28067b858cde70e1d4101b65", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8da67fa2f2d13121e6ea7500b6dd413efd99921/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8da67fa2f2d13121e6ea7500b6dd413efd99921/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b8da67fa2f2d13121e6ea7500b6dd413efd99921", "patch": "@@ -1,3 +1,8 @@\n+2003-12-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/pool_allocator.h (class __pool_alloc): Use\n+\toperator new and operator delete.\n+\n 2003-12-24  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* config/cpu/i386/atomicity.h (__exchange_and_add): Fix output "}, {"sha": "02303de31fd73164d7acfa09ff3d5d27a724c2ff", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8da67fa2f2d13121e6ea7500b6dd413efd99921/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8da67fa2f2d13121e6ea7500b6dd413efd99921/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=b8da67fa2f2d13121e6ea7500b6dd413efd99921", "patch": "@@ -200,7 +200,7 @@ namespace __gnu_cxx\n               ((_Obj*)(void*)_S_start_free)->_M_free_list_link = *__free_list;\n               *__free_list = (_Obj*)(void*)_S_start_free;\n             }\n-          _S_start_free = new char[__bytes_to_get];\n+          _S_start_free = static_cast<char*>(::operator new(__bytes_to_get));\n           if (_S_start_free == 0)\n             {\n               size_t __i;\n@@ -225,7 +225,7 @@ namespace __gnu_cxx\n                     }\n                 }\n               _S_end_free = 0;        // In case of exception.\n-              _S_start_free = new char[__bytes_to_get];\n+              _S_start_free = static_cast<char*>(::operator new(__bytes_to_get));\n               // This should either throw an exception or remedy the situation.\n               // Thus we assume it succeeded.\n             }\n@@ -290,7 +290,7 @@ namespace __gnu_cxx\n \t}\n \n       if ((__n > (size_t) _S_max_bytes) || (_S_force_new > 0))\n-\t__ret = new char[__n];\n+\t__ret = ::operator new(__n);\n       else\n \t{\n \t  _Obj* volatile* __free_list = _S_free_list + _S_freelist_index(__n);\n@@ -317,7 +317,7 @@ namespace __gnu_cxx\n     __pool_alloc<__threads, __inst>::deallocate(void* __p, size_t __n)\n     {\n       if ((__n > (size_t) _S_max_bytes) || (_S_force_new > 0))\n-\tdelete [] __p;\n+\t::operator delete(__p);\n       else\n \t{\n \t  _Obj* volatile* __free_list = _S_free_list + _S_freelist_index(__n);"}]}