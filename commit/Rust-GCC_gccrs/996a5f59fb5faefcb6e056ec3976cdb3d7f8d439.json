{"sha": "996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2YTVmNTlmYjVmYWVmY2I2ZTA1NmVjMzk3NmNkYjNkN2Y4ZDQzOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-10T11:13:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-10T11:13:16Z"}, "message": "Remove references to LSHIFT and lshlsi3.\n\nFrom-SVN: r7016", "tree": {"sha": "d8afeb52a2270dc0735207fb9d836241cc3da073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8afeb52a2270dc0735207fb9d836241cc3da073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/comments", "author": null, "committer": null, "parents": [{"sha": "edd2e9fe0bdd048e91cb134c89a5c310f616ac82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edd2e9fe0bdd048e91cb134c89a5c310f616ac82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edd2e9fe0bdd048e91cb134c89a5c310f616ac82"}], "stats": {"total": 596, "additions": 112, "deletions": 484}, "files": [{"sha": "e8775493dc479a28d4ab71d16b19218fd14ae5a1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,5 +1,5 @@\n /* Output routines for GCC for ARM/RISCiX.\n-   Copyright (C) 1991, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1993, 1994 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    \t      and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rwe11@cl.cam.ac.uk)\n@@ -443,8 +443,7 @@ shift_operator (x, mode)\n \n       if (code == MULT)\n \treturn power_of_two_operand (XEXP (x, 1));\n-      return (code == ASHIFT || code == LSHIFT\n-\t      || code == ASHIFTRT || code == LSHIFTRT);\n+      return (code == ASHIFT || code == ASHIFTRT || code == LSHIFTRT);\n     }\n } /* shift_operator */\n \n@@ -1344,9 +1343,6 @@ shift_instr (op, shift_ptr)\n     case ASHIFT:\n       mnem = \"asl\";\n       break;\n-    case LSHIFT:\n-      mnem = \"lsl\";\n-      break;\n     case ASHIFTRT:\n       mnem = \"asr\";\n       max_shift = 32;"}, {"sha": "8d9e4463ba2b85c6524d4f5d188b372a29e6b615", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for Acorn RISC Machine.\n-   Copyright (C) 1991, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1993, 1994 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n               and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rwe11@cl.cam.ac.uk)\n@@ -998,7 +998,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \t    goto LABEL;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       if (GET_MODE_SIZE (MODE) <= 4\t\t\t\t\t\\\n-\t  && (code == LSHIFTRT || code == ASHIFTRT || code == LSHIFT\t\\\n+\t  && (code == LSHIFTRT || code == ASHIFTRT\t\t\t\\\n \t      || code == ASHIFT || code == ROTATERT))\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  rtx op = XEXP (INDEX, 1);\t\t\t\t\t\\\n@@ -1239,7 +1239,6 @@ do\t\t\t\t\t\t\t\t\t\\\n         && exact_log2 (INTVAL (XEXP (X, 1))) >= 0)                      \\\n       return rtx_cost (XEXP (X, 0), GET_CODE (X))+1;                    \\\n     return COSTS_N_INSNS (9);                                           \\\n-  case LSHIFT:\t\t\t\t\t\t\t\t\\\n   case ASHIFT:\t\t\t\t\t\t\t\t\\\n   case LSHIFTRT:\t\t\t\t\t\t\t\\\n   case ASHIFTRT:\t\t\t\t\t\t\t\\\n@@ -1256,8 +1255,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \t  return COSTS_N_INSNS (1);\t\t\t\t\t\\\n \tbreak;\t\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n-    else if (code == ASHIFT || code == LSHIFT || code == ASHIFTRT\t\\\n-\t     || code == LSHIFTRT)\t\t\t\t\t\\\n+    else if (code == ASHIFT || code == ASHIFTRT || code == LSHIFTRT)\t\\\n       return COSTS_N_INSNS (1);\t\t\t\t\t\t\\\n   } /* fall through */\t\t\t\t\t\t\t\\\n   case PLUS:\t\t\t\t\t\t\t\t\\\n@@ -1275,8 +1273,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \t  return COSTS_N_INSNS (12);\t\t\t\t\t\\\n \tbreak;\t\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n-    else if (code == ASHIFT || code == LSHIFT || code == ASHIFTRT\t\\\n-\t     || code == LSHIFTRT)\t\t\t\t\t\\\n+    else if (code == ASHIFT || code == ASHIFTRT || code == LSHIFTRT)\t\\\n       return COSTS_N_INSNS (1);\t\t\t\t\t\t\\\n     break;\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n@@ -1342,7 +1339,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \t  || GET_CODE (X) == AND || GET_CODE (X) == IOR\t\t\t\\\n \t  || GET_CODE (X) == XOR || GET_CODE (X) == MULT\t\t\\\n \t  || GET_CODE (X) == NOT || GET_CODE (X) == NEG\t\t\t\\\n-\t  || GET_CODE (X) == LSHIFT || GET_CODE (X) == LSHIFTRT\t\t\\\n+\t  || GET_CODE (X) == LSHIFTRT\t\t\t\t\t\\\n \t  || GET_CODE (X) == ASHIFT || GET_CODE (X) == ASHIFTRT\t\t\\\n \t  || GET_CODE (X) == ROTATERT || GET_CODE (X) == ZERO_EXTRACT)\t\\\n       ? CC_NOOVmode\t\t\t\t\t\t\t\\\n@@ -1367,7 +1364,7 @@ extern int arm_compare_fp;\n   {\"arm_not_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"shiftable_operator\", {PLUS, MINUS, AND, IOR, XOR}},\t\t\t\\\n   {\"minmax_operator\", {SMIN, SMAX, UMIN, UMAX}},\t\t\t\\\n-  {\"shift_operator\", {ASHIFT, LSHIFT, ASHIFTRT, LSHIFTRT, MULT}},\t\\\n+  {\"shift_operator\", {ASHIFT, ASHIFTRT, LSHIFTRT, MULT}},\t\\\n   {\"di_operand\", {SUBREG, REG, CONST_INT, CONST_DOUBLE, MEM}},\t\t\\\n   {\"load_multiple_operation\", {PARALLEL}},\t\t\t\t\\\n   {\"store_multiple_operation\", {PARALLEL}},\t\t\t\t\\\n@@ -1780,7 +1777,6 @@ do { char dstr[30];\t\t\t\t\t\t\t\\\n \t  case ASHIFTRT:\t\t\t\t\t\t\\\n \t  case LSHIFTRT:\t\t\t\t\t\t\\\n \t  case ASHIFT:\t\t\t\t\t\t\t\\\n-\t  case LSHIFT:\t\t\t\t\t\t\t\\\n \t  case ROTATERT:\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    char *shift_type = shift_instr (GET_CODE (index),\t\t\\"}, {"sha": "e25c674bad0f822b9f67b50f6f7dd15beb3f7076", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description Acorn RISC Machine for GNU compiler\n-;;  Copyright (C) 1991, 1993 Free Software Foundation, Inc.\n+;;  Copyright (C) 1991, 1993, 1994 Free Software Foundation, Inc.\n ;;  Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n ;;             and Martin Simmons (@harleqn.co.uk).\n ;;  More major hacks by Richard Earnshaw (rwe11@cl.cam.ac.uk)\n@@ -1472,18 +1472,6 @@\n   return (output_shifted_move (ASHIFTRT, operands));\n \")\n \n-;; lshlsi3 is not defined because shift counts cannot be negative\n-;; An unnamed pattern is needed for expansion of zero_extend.\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(lshift:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rn\")))]\n-  \"\"\n-  \"*\n-  return (output_shifted_move (LSHIFT, operands));\n-\")\n-\n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"r\")"}, {"sha": "1e3adb69607e0350fa5d13a899ab56b43c176796", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,6 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Clipper version.\n-   Copyright (C) 1987, 1988, 1991, 1993 Free Software Foundation, Inc.\n-\n+   Copyright (C) 1987, 1988, 1991, 1993, 1994 Free Software Foundation, Inc.\n    Contributed by Holger Teutsch (holger@hotbso.rhein-main.de)\n \n This file is part of GNU CC.\n@@ -879,7 +878,6 @@ do\t\t\t\t\t\t\t\t\t      \\\n   case MOD:\t\t\t\t\t\t\\\n   case UMOD:\t\t\t\t\t\t\\\n     return COSTS_N_INSNS (40);\t\t\t\t\\\n-  case LSHIFT:\t\t\t\t\t\t\\\n   case ASHIFT:\t\t\t\t\t\t\\\n   case LSHIFTRT:\t\t\t\t\t\\\n   case ASHIFTRT:\t\t\t\t\t\\"}, {"sha": "40ba6c907c37167afedb8e621a15da588d439697", "filename": "gcc/config/clipper/clipper.md", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fclipper%2Fclipper.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fclipper%2Fclipper.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,6 +1,5 @@\n ;;- Machine description for GNU compiler, Clipper Version\n-;;   Copyright (C) 1987, 1988, 1991, 1993 Free Software Foundation, Inc.\n-\n+;;   Copyright (C) 1987, 1988, 1991, 1993, 1994 Free Software Foundation, Inc.\n ;; Contributed by Holger Teutsch (holger@hotbso.rhein-main.de)\n \n ;; This file is part of GNU CC.\n@@ -1129,25 +1128,6 @@\n   \"shlw   %2,%0\"\n  [(set_attr \"type\" \"arith\")])\n \n-(define_insn \"lshldi3\"\n-  [(set (match_operand:DI 0 \"int_reg_operand\" \"=r,r\")\n-\t(lshift:DI (match_operand:DI 1 \"int_reg_operand\" \"0,0\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n-  \"\"\n-  \"@\n-   shll   %2,%0\n-   shlli  %2,%0\"\n- [(set_attr \"type\" \"arith\")])\n-\n-(define_insn \"lshlsi3\"\n-  [(set (match_operand:SI 0 \"int_reg_operand\" \"=r,r\")\n-\t(lshift:SI (match_operand:SI 1 \"int_reg_operand\" \"0,0\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n-  \"\"\n-  \"@\n-   shlw   %2,%0\n-   shli   %2,%0\"\n- [(set_attr \"type\" \"arith\")])\n \n ;;\n ;; rotate insn"}, {"sha": "2787d2435da8ec7a3989074bbee67b7cf17c0443", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1119,7 +1119,6 @@ enum reg_class {\n     else break;\t\t\t\t\t\t\t\t\\\n   case MULT:\t\t\t\t\t\t\t\t\\\n     return 4 * (char) (0x03060403 >> target_cpu * 8);\t\t\t\\\n-  case LSHIFT:\t\t\t\t\t\t\t\t\\\n   case ASHIFT:\t\t\t\t\t\t\t\t\\\n   case LSHIFTRT:\t\t\t\t\t\t\t\\\n   case ASHIFTRT:\t\t\t\t\t\t\t\\"}, {"sha": "e008fe0e2e050acac758982bf40dfcfaa1cd843d", "filename": "gcc/config/convex/convex.md", "status": "modified", "additions": 2, "deletions": 97, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fconvex%2Fconvex.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fconvex%2Fconvex.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,6 +1,5 @@\n-;;- Machine description for GNU compiler\n-;;- Convex Version\n-;;   Copyright (C) 1988, 1993 Free Software Foundation, Inc.\n+;;- Machine description for GNU compiler, Convex Version\n+;;  Copyright (C) 1988, 1993, 1994 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -1040,81 +1039,6 @@\n \n ;; SImode\n \n-;; Logical left 1, 1 cycle on all machines via add\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t   (const_int 1)))]\n-  \"\"\n-  \"add.w %0,%0\")\n-\n-;; C34 general shift is 1 cycle\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,a\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"di,ai\")))]\n-  \"TARGET_C34\"\n-  \"@\n-   shf.w %2,%0\n-   shf %2,%0\"\n-  [(set_attr \"type\" \"shfw,shfw\")])\n-\n-;; else shift left 0..7 is 1 cycle if we use an A register\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a,?d\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t\t   (match_operand:SI 2 \"immediate_operand\" \"ai,di\")))]\n-  \"TARGET_C1 && INTVAL (operands[2]) < (unsigned) 8\"\n-  \"@\n-   shf %2,%0\n-   shf %2,%0\"\n-  [(set_attr \"type\" \"alu,shfl\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a,?d\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t\t   (match_operand:SI 2 \"immediate_operand\" \"ai,di\")))]\n-  \"INTVAL (operands[2]) < (unsigned) 8\"\n-  \"@\n-   shf %2,%0\n-   shf.w %2,%0\"\n-  [(set_attr \"type\" \"alu,shfw\")])\n-\n-;; else general left shift\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,a\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"di,ai\")))]\n-  \"TARGET_C1\"\n-  \"@\n-   shf %2,%0\n-   shf %2,%0\"\n-  [(set_attr \"type\" \"shfl,shfw\")])\n-\n-;; (but C2 shift left by a constant can is faster via multiply)\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"const_int_operand\" \"i\")))]\n-  \"TARGET_C2 && INTVAL (operands[2]) < (unsigned) 32\"\n-  \"mul.w %z2,%0\"\n-  [(set_attr \"type\" \"mulw\")])\n-\n-(define_insn \"lshlsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,a\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"di,ai\")))]\n-  \"\"\n-  \"@\n-   shf.w %2,%0\n-   shf %2,%0\"\n-  [(set_attr \"type\" \"shfw,shfw\")])\n-\n ;; Arithmetic left 1, 1 cycle on all machines via add\n \n (define_insn \"\"\n@@ -1276,25 +1200,6 @@\n   [(set_attr \"type\" \"shfl\")])\n \n ;; DImode\n-;; Logical left, 1-cycle\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(lshift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t   (const_int 1)))]\n-  \"\"\n-  \"add.l %0,%0\")\n-\n-;; Logical left, general\n-\n-(define_insn \"lshldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(lshift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"di\")))]\n-  \"\"\n-  \"shf %2,%0\"\n-  [(set_attr \"type\" \"shfl\")])\n-\n ;; Arithmetic left, 1-cycle\n \n (define_insn \"\""}, {"sha": "eadba1db418990c2a202d074f2cfb9056da16247", "filename": "gcc/config/elxsi/elxsi.md", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Felxsi%2Felxsi.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Felxsi%2Felxsi.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,7 +1,6 @@\n-;;- Machine description for GNU compiler\n-;;- Elxsi Version\n-;;   Copyright (C) 1987, 1988, 1992 Free Software Foundation, Inc.\n-;;  This port done by Mike Stump <mrs@cygnus.com> in 1988, and is the first\n+;;- Machine description for GNU compiler, Elxsi Version\n+;;  Copyright (C) 1987, 1988, 1992, 1994 Free Software Foundation, Inc.\n+;;  Contributed by Mike Stump <mrs@cygnus.com> in 1988, and is the first\n ;;  64 bit port of GNU CC.\n ;;  Based upon the VAX port.\n \n@@ -792,14 +791,6 @@\n \")\n \n \f\n-\n-(define_insn \"lshldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(lshift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"rn\")))]\n-  \"\"\n-  \"sll\\\\t%0,%1,%2\")\n-\n (define_insn \"ashrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")"}, {"sha": "9482c836db12ccfab903e3f9b15bc9dd088a0d26", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -983,7 +983,7 @@ extern enum reg_class regno_reg_class[];\n     switch (GET_CODE (cc_status.value2))\t\t\t\\\n       { case PLUS: case MINUS: case MULT:\t\t\t\\\n \tcase DIV: case UDIV: case MOD: case UMOD: case NEG:\t\\\n-\tcase ASHIFT: case LSHIFT: case ASHIFTRT: case LSHIFTRT:\t\\\n+\tcase ASHIFT:  case ASHIFTRT: case LSHIFTRT:\t\t\\\n \tcase ROTATE: case ROTATERT:\t\t\t\t\\\n \t  if (GET_MODE (cc_status.value2) != VOIDmode)\t\t\\\n \t    cc_status.flags |= CC_NO_OVERFLOW;\t\t\t\\"}, {"sha": "b0c6beccc23d5947dc58d3c7cea0a56a59ebc1a7", "filename": "gcc/config/fx80/fx80.md", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Ffx80%2Ffx80.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Ffx80%2Ffx80.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,7 +1,7 @@\n ;;- Machine description for GNU C compiler for Alliant FX systems\n-;;   Copyright (C) 1989 Free Software Foundation, Inc.\n-;;   Adapted from m68k.md by Paul Petersen (petersen@uicsrd.csrd.uiuc.edu)\n-;;   and Joe Weening (weening@gang-of-four.stanford.edu).\n+;;  Copyright (C) 1989, 1994 Free Software Foundation, Inc.\n+;;  Adapted from m68k.md by Paul Petersen (petersen@uicsrd.csrd.uiuc.edu)\n+;;  and Joe Weening (weening@gang-of-four.stanford.edu).\n \n ;; This file is part of GNU CC.\n \n@@ -1584,27 +1584,6 @@\n \f\n ;; logical shift instructions\n \n-(define_insn \"lshlsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n-\t(lshift:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n-  \"lsl%.l %2,%0\")\n-\n-(define_insn \"lshlhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n-\t(lshift:HI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:HI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n-  \"lsl%.w %2,%0\")\n-\n-(define_insn \"lshlqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=d\")\n-\t(lshift:QI (match_operand:QI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n-  \"lsl%.b %2,%0\")\n-\n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n \t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"0\")"}, {"sha": "b405ec21540fe4252c599f4cd56938c4a0823b3d", "filename": "gcc/config/gmicro/gmicro.md", "status": "modified", "additions": 68, "deletions": 34, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fgmicro%2Fgmicro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fgmicro%2Fgmicro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,8 +1,6 @@\n-;;- Machine description for GNU compiler\n-;;- Fujitsu Gmicro Version\n-;;- Ported by M.Yuhara, Fujitsu Laboratories LTD.\n-;;\n-;;   Copyright (C) 1990 Free Software Foundation, Inc.\n+;;- Machine description for GNU compiler, Fujitsu Gmicro Version\n+;;  Copyright (C) 1990, 1994 Free Software Foundation, Inc.\n+;;  Contributed by M.Yuhara, Fujitsu Laboratories LTD.\n \n ;; This file is part of GNU CC.\n \n@@ -1858,50 +1856,86 @@\n \f\n ;; logical shift instructions\n \n-(define_insn \"lshlsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(lshift:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"rmi\")))]\n-  \"\"\n-  \"shl.w %2,%0\")\n+;; Logical right shift on the gmicro works by negating the shift count,\n+;; then emitting a right shift with the shift count negated.  This means\n+;; that all actual shift counts in the RTL will be positive.  This \n+;; prevents converting shifts to ZERO_EXTRACTs with negative positions,\n+;; which isn't valid.\n \n-(define_insn \"lshlhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm\")\n-\t(lshift:HI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:HI 2 \"general_operand\" \"rmi\")))]\n+(define_expand \"lshrsi3\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"g\")\n+\t\t     (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n-  \"shl.h %2,%0\")\n+  \"\n+{\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    operands[2] = gen_rtx (NEG, SImode, negate_rtx (SImode, operands[2]));\n+}\")\n \n-(define_insn \"lshlqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=rm\")\n-\t(lshift:QI (match_operand:QI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"rmi\")))]\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"\"\n-  \"shl.b %2,%0\")\n+  \"shl.w %n2,%0\")\n \n-;; lshiftrt -> lshift\n-(define_expand \"lshrsi3\"\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(lshift:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"general_operand\" \"rmi\")))]\n+\t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+\t\t     (neg:SI (match_operand:SI 2 \"general_operand\" \"rm\"))))]\n   \"\"\n-  \" { operands[2] = negate_rtx (SImode, operands[2]); }\")\n+  \"shl.w %2,%0\")\n \n-;; lshiftrt -> lshift\n (define_expand \"lshrhi3\"\n+  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+\t(lshiftrt:HI (match_operand:HI 1 \"general_operand\" \"g\")\n+\t\t     (match_operand:HI 2 \"general_operand\" \"g\")))]\n+  \"\"\n+  \"\n+{\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    operands[2] = gen_rtx (NEG, HImode, negate_rtx (HImode, operands[2]));\n+}\")\n+\n+(define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=rm\")\n-\t(lshift:HI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t     (match_operand:HI 2 \"general_operand\" \"rmi\")))]\n+\t(lshiftrt:HI (match_operand:HI 1 \"general_operand\" \"0\")\n+\t\t     (match_operand:HI 2 \"const_int_operand\" \"n\")))]\n   \"\"\n-  \" { operands[2] = negate_rtx (HImode, operands[2]); }\")\n+  \"shl.h %n2,%0\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"general_operand\" \"=rm\")\n+\t(lshiftrt:HI (match_operand:HI 1 \"general_operand\" \"0\")\n+\t\t     (neg:HI (match_operand:HI 2 \"general_operand\" \"rm\"))))]\n+  \"\"\n+  \"shl.h %2,%0\")\n \n-;; lshiftrt -> lshift\n (define_expand \"lshrqi3\"\n+  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+\t(lshiftrt:QI (match_operand:QI 1 \"general_operand\" \"g\")\n+\t\t     (match_operand:QI 2 \"general_operand\" \"g\")))]\n+  \"\"\n+  \"\n+{\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    operands[2] = gen_rtx (NEG, QImode, negate_rtx (QImode, operands[2]));\n+}\")\n+\n+(define_insn \"\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=rm\")\n-\t(lshift:QI (match_operand:QI 1 \"general_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"general_operand\" \"rmi\")))]\n+\t(lshiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_operand\" \"n\")))]\n   \"\"\n-  \" { operands[2] = negate_rtx (QImode, operands[2]); }\")\n+  \"shl.b %n2,%0\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"general_operand\" \"=rm\")\n+\t(lshiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n+\t\t     (neg:QI (match_operand:QI 2 \"general_operand\" \"rm\"))))]\n+  \"\"\n+  \"shl.b %2,%0\")\n \f\n ;; rotate instructions\n "}, {"sha": "6da31ee2edc4b4beee16b306f79832e3aa48aa17", "filename": "gcc/config/i370/i370.md", "status": "modified", "additions": 3, "deletions": 75, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fi370%2Fi370.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fi370%2Fi370.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,7 +1,7 @@\n ;;- Machine description for GNU compiler -- System/370 version.\n-;;   Copyright (C) 1989, 1993 Free Software Foundation, Inc.\n-;;   Contributed by Jan Stein (jan@cd.chalmers.se).\n-;;   Modifed for MVS C/370 by Dave Pitts (pitts@mcdata.com)\n+;;  Copyright (C) 1989, 1993, 1994 Free Software Foundation, Inc.\n+;;  Contributed by Jan Stein (jan@cd.chalmers.se).\n+;;  Modifed for MVS C/370 by Dave Pitts (pitts@mcdata.com)\n \n ;; This file is part of GNU CC.\n \n@@ -3371,24 +3371,6 @@ check_label_emit ();\n ;;- Logical shift instructions.\n ;;\n \n-;\n-; lshldi3 instruction pattern(s).\n-;\n-\n-(define_insn \"lshldi3\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=d\")\n-\t(lshift:DI (match_operand:DI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"Ja\")))]\n-  \"\"\n-  \"*\n-{\n-  check_label_emit ();\n-  mvs_check_page (0, 4, 0);\n-  if (REG_P (operands[2])) \n-    return \\\"SLDL\t%0,0(%2)\\\";\n-  return \\\"SLDL\t%0,%c2\\\";\n-}\")\n-\n ;\n ; lshrdi3 instruction pattern(s).\n ;\n@@ -3407,23 +3389,6 @@ check_label_emit ();\n   return \\\"SRDL\t%0,%c2\\\";\n }\")\n \n-;\n-; lshlsi3 instruction pattern(s).\n-;\n-\n-(define_insn \"lshlsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n-\t(lshift:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"Ja\")))]\n-  \"\"\n-  \"*\n-{\n-  check_label_emit ();\n-  mvs_check_page (0, 4, 0);\n-  if (REG_P (operands[2])) \n-    return \\\"SLL\t%0,0(%2)\\\";\n-  return \\\"SLL\t%0,%c2\\\";\n-}\")\n \n ;\n ; lshrsi3 instruction pattern(s).\n@@ -3443,25 +3408,6 @@ check_label_emit ();\n   return \\\"SRL\t%0,%c2\\\";\n }\")\n \n-;\n-; lshlhi3 instruction pattern(s).\n-;\n-\n-(define_insn \"lshlhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=d\")\n-\t(lshift:HI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"Ja\")))]\n-  \"\"\n-  \"*\n-{\n-  check_label_emit ();\n-  CC_STATUS_INIT;\n-  mvs_check_page (0, 4, 0);\n-  if (REG_P (operands[2])) \n-    return \\\"SLL\t%0,0(%2)\\\";\n-  return \\\"SLL\t%0,%c2\\\";\n-}\")\n-\n ;\n ; lshrhi3 instruction pattern(s).\n ;\n@@ -3484,24 +3430,6 @@ check_label_emit ();\n   return \\\"N\t%0,=X'0000FFFF'\\;SRL\t%0,%c2\\\";\n }\")\n \n-;\n-; lshlqi3 instruction pattern(s).\n-;\n-\n-(define_insn \"lshlqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=d\")\n-\t(lshift:QI (match_operand:QI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"Ja\")))]\n-  \"\"\n-  \"*\n-{\n-  check_label_emit ();\n-  mvs_check_page (0, 4, 0);\n-  if (REG_P (operands[2])) \n-    return \\\"SLL\t%0,0(%2)\\\";\n-  return \\\"SLL\t%0,%c2\\\";\n-}\")\n-\n ;\n ; lshrqi3 instruction pattern(s).\n ;"}, {"sha": "08171a7a3d48b38ae8dd4647da488c6bb3ef3769", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1361,7 +1361,7 @@ notice_update_cc (exp, insn)\n       {\n       case PLUS: case MINUS: case MULT:\n       case DIV: case UDIV: case MOD: case UMOD: case NEG:\n-      case ASHIFT: case LSHIFT: case ASHIFTRT: case LSHIFTRT:\n+      case ASHIFT: case ASHIFTRT: case LSHIFTRT:\n       case ROTATE: case ROTATERT:\n \tif (GET_MODE (cc_status.value2) != VOIDmode)\n \t  cc_status.flags |= CC_NO_OVERFLOW;"}, {"sha": "c7ce888f1e39de8f381b97f934febb1524a5b50b", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,7 +1,6 @@\n /* Definitions of target machine for GNU compiler.  Sun 68000/68020 version.\n    Copyright (C) 1987, 1988, 1993, 1994 Free Software Foundation, Inc.\n \n-\n This file is part of GNU CC.\n \n GNU CC is free software; you can redistribute it and/or modify\n@@ -1391,7 +1390,6 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n     break;\t\t\t\t\t\t\t\\\n   case ASHIFT:\t\t\t\t\t\t\t\\\n   case ASHIFTRT:\t\t\t\t\t\t\\\n-  case LSHIFT:\t\t\t\t\t\t\t\\\n   case LSHIFTRT:\t\t\t\t\t\t\\\n     /* A shift by a big integer takes an extra instruction.  */ \\\n     if (GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\\"}, {"sha": "436582709a84179750ba2054865f172540571b6c", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 2, "deletions": 72, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,6 +1,5 @@\n-;;- Machine description for GNU compiler\n-;;- Motorola 68000 Version\n-;;   Copyright (C) 1987, 1988, 1993, 1994 Free Software Foundation, Inc.\n+;;- Machine description for GNU compiler, Motorola 68000 Version\n+;;  Copyright (C) 1987, 1988, 1993, 1994 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -3552,75 +3551,6 @@\n \n ;; On all 68k models, this makes faster code in a special case.\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n-  \"(GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) == 16)\"\n-  \"*\n-{\n-  CC_STATUS_INIT;\n-  return \\\"swap %0\\;clr%.w %0\\\";\n-}\")\n-\n-;; On the 68000, this makes faster code in a special case.\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n-  \"(! TARGET_68020 && GET_CODE (operands[2]) == CONST_INT\n-    && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 24)\"\n-  \"*\n-{\n-  CC_STATUS_INIT;\n-\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 16);\n-  return \\\"lsl%.w %2,%0\\;swap %0\\;clr%.w %0\\\";\n-}\")\n-\n-(define_insn \"lshlsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n-  \"*\n-{\n-  if (operands[2] == const1_rtx)\n-    return \\\"add%.l %0,%0\\\";\n-  return \\\"lsl%.l %2,%0\\\";\n-}\")\n-\n-(define_insn \"lshlhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-\t(lshift:HI (match_operand:HI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:HI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n-  \"lsl%.w %2,%0\")\n-\n-(define_insn \"\"\n-  [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+d\"))\n-\t(lshift:HI (match_dup 0)\n-\t\t   (match_operand:HI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n-  \"lsl%.w %1,%0\")\n-\n-(define_insn \"lshlqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n-\t(lshift:QI (match_operand:QI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"dI\")))]\n-  \"\"\n-  \"lsl%.b %2,%0\")\n-\n-(define_insn \"\"\n-  [(set (strict_low_part (match_operand:QI 0 \"register_operand\" \"+d\"))\n-\t(lshift:QI (match_dup 0)\n-\t\t   (match_operand:QI 1 \"general_operand\" \"dI\")))]\n-  \"\"\n-  \"lsl%.b %1,%0\")\n-\n-;; On all 68k models, this makes faster code in a special case.\n-\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")"}, {"sha": "2267e4d4abd03330bdd0b1b3e6568fd933eab252", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Motorola 88000.\n-   Copyright (C) 1988, 1989, 1990, 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1989, 1990, 1991, 1994 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@mcc.com)\n    Enhanced by Michael Meissner (meissner@osf.org)\n    Version 2 port by Tom Wood (twood@pets.sps.mot.com)\n@@ -3059,12 +3059,6 @@ print_operand_address (file, addr)\n \t       reg_names[0], reg_names[REGNO (XEXP (addr, 0))]);\n       break;\n \n-    case LSHIFT:\n-      fprintf (file, \"%s,%shi16(\", reg_names[0], m88k_pound_sign);\n-      output_addr_const (file, XEXP (addr, 0));\n-      fputc (')', file);\n-      break;\n-\n     case CONST_INT:\n       fprintf (file, \"%s,%d\", reg_names[0], INTVAL (addr));\n       break;"}, {"sha": "45075172d51a25d6045faad57103aa44efb5aa4f", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for the Motorola 88000 for GNU C compiler\n-;;  Copyright (C) 1988, 1989, 1990, 1991, 1993 Free Software Foundation, Inc.\n+;;  Copyright (C) 1988, 89, 90, 91, 93, 1994 Free Software Foundation, Inc.\n ;;  Contributed by Michael Tiemann (tiemann@mcc.com)\n ;;  Additional changes by Michael Meissner (meissner@osf.org)\n ;;  Version 2 port by Tom Wood (twood@pets.sps.mot.com)\n@@ -325,8 +325,7 @@\n ;; (tege@sics.se).  They've changed since then, so don't complain to him\n ;; if they don't work right.\n \n-;; Regarding shifts, gen_lshlsi3 generates ASHIFT.  LSHIFT opcodes are\n-;; not produced and should not normally occur.  Also, the gen functions\n+;; Regarding shifts, gen_lshlsi3 generates ASHIFT.  The gen functions\n ;; produce the necessary insns to support TARGET_*_LARGE_SHIFT, so nothing\n ;; special needs to be done here.\n \n@@ -3564,28 +3563,7 @@\n   [(set_attr \"type\" \"bit\")])\n \f\n ;;- logical shift instructions.  Logical shift left becomes arithmetic\n-;; shift left.  LSHIFT is not normally produced, but is supported.\n-\n-(define_expand \"lshlsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"arith32_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  emit_insn (gen_ashlsi3 (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(lshift:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n-\t\t   (match_operand:SI 2 \"arith5_operand\" \"r,K\")))]\n-  \"\"\n-  \"@\n-   mak %0,%1,%2\n-   mak %0,%1,0<%2>\"\n-  [(set_attr \"type\" \"bit\")])\n+;; shift left.  \n \n (define_expand \"lshrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")"}, {"sha": "3a32e2fa8ee978b6f8ecdbe3f37bcfbaf30ed73d", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,6 +1,6 @@\n ;;- Machine description for GNU compiler, ns32000 Version\n-;;   Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n-;;   Contributed by Michael Tiemann (tiemann@mcc.com)\n+;;  Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n+;;  Contributed by Michael Tiemann (tiemann@mcc.com)\n \n ;; This file is part of GNU CC.\n \n@@ -1549,27 +1549,6 @@\n \n ;; logical shift instructions\n \n-(define_insn \"lshlsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n-\t(lshift:SI (match_operand:SI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"rmn\")))]\n-  \"\"\n-  \"lshd %2,%0\")\n-\n-(define_insn \"lshlhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n-\t(lshift:HI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"rmn\")))]\n-  \"\"\n-  \"lshw %2,%0\")\n-\n-(define_insn \"lshlqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n-\t(lshift:QI (match_operand:QI 1 \"general_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"general_operand\" \"rmn\")))]\n-  \"\"\n-  \"lshb %2,%0\")\n-\n ;; Logical right shift on the 32k works by negating the shift count.\n (define_expand \"lshrsi3\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g\")"}, {"sha": "0642f2c75dd15e17c1d655397777f3f9fbe4ef24", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,6 +1,6 @@\n-;;- Machine description for IBM RISC System 6000 (POWER) for GNU C compiler\n-;;   Copyright (C) 1990, 1991, 1992, 1993, 1994 Free Software Foundation, Inc.\n-;;   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n+;; Machine description for IBM RISC System 6000 (POWER) for GNU C compiler\n+;; Copyright (C) 1990, 1991, 1992, 1993, 1994 Free Software Foundation, Inc.\n+;; Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n ;; This file is part of GNU CC.\n \n@@ -859,14 +859,14 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(udiv:SI\n-\t (plus:DI (lshift:DI\n+\t (plus:DI (ashift:DI\n \t\t   (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n \t\t   (const_int 32))\n \t\t  (zero_extend:DI (match_operand:SI 4 \"register_operand\" \"2\")))\n \t (match_operand:SI 3 \"gpc_reg_operand\" \"r\")))\n    (set (match_operand:SI 2 \"register_operand\" \"=*q\")\n \t(umod:SI\n-\t (plus:DI (lshift:DI\n+\t (plus:DI (ashift:DI\n \t\t   (zero_extend:DI (match_dup 1)) (const_int 32))\n \t\t  (zero_extend:DI (match_dup 4)))\n \t (match_dup 3)))]\n@@ -883,12 +883,12 @@\n (define_expand \"udivmodsi4_normal\"\n   [(set (match_dup 4) (const_int 0))\n    (parallel [(set (match_operand:SI 0 \"\" \"\")\n-\t\t   (udiv:SI (plus:DI (lshift:DI (zero_extend:DI (match_dup 4))\n+\t\t   (udiv:SI (plus:DI (ashift:DI (zero_extend:DI (match_dup 4))\n \t\t\t\t\t\t(const_int 32))\n \t\t\t\t     (zero_extend:DI (match_operand:SI 1 \"\" \"\")))\n \t\t\t    (match_operand:SI 2 \"\" \"\")))\n \t      (set (match_operand:SI 3 \"\" \"\")\n-\t\t   (umod:SI (plus:DI (lshift:DI (zero_extend:DI (match_dup 4))\n+\t\t   (umod:SI (plus:DI (ashift:DI (zero_extend:DI (match_dup 4))\n \t\t\t\t\t\t(const_int 32))\n \t\t\t\t     (zero_extend:DI (match_dup 1)))\n \t\t\t    (match_dup 2)))])]"}, {"sha": "efb3fbec827331ad8eedc0ae8b8c58c4e1e0eeb2", "filename": "gcc/config/tahoe/tahoe.md", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Ftahoe%2Ftahoe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Ftahoe%2Ftahoe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,6 +1,5 @@\n-;;- Machine description for GNU compiler\n-;;- Tahoe version\n-;;   Copyright (C) 1989 Free Software Foundation, Inc.\n+;; Machine description for GNU compiler, Tahoe version\n+;; Copyright (C) 1989, 1994 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -850,42 +849,6 @@\n \n ; shifts are very expensive, try some magic first...\n \n-(define_insn \"lshlsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n-\t(lshift:SI (match_operand:SI 1 \"general_operand\" \"g\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"g\")))]\n-  \"\"\n-  \"*\n-{\n-  if (GET_CODE(operands[2]) == REG)\n-      return \\\"mull3 ___shtab[%2],%1,%0\\\";\n-  /* if (GET_CODE(operands[2]) == REG)\n-  if (rtx_equal_p (operands[0], operands[1]))\n-    return \\\"mull2 ___shtab[%2],%1\\\";\n-  else\n-    return \\\"mull3 ___shtab[%2],%1,%0\\\"; */\n-  if (GET_CODE(operands[1]) == REG)\n-    {\n-      if (operands[2] == const1_rtx)\n-        {\n-\t  CC_STATUS_INIT;\n-\t  return \\\"movaw 0[%1],%0\\\";\n-\t}\n-      if (GET_CODE(operands[2]) == CONST_INT && INTVAL(operands[2]) == 2)\n-        {\n-\t  CC_STATUS_INIT;\n-\t  return \\\"moval 0[%1],%0\\\";\n-\t}\n-    }\n-  if (GET_CODE(operands[2]) != CONST_INT || INTVAL(operands[2]) == 1)\n-    return \\\"shll %2,%1,%0\\\";\n-  if (rtx_equal_p (operands[0], operands[1]))\n-    return \\\"mull2 %s2,%1\\\";\n-  else\n-    return \\\"mull3 %s2,%1,%0\\\";\n-}\")\n-\n-\n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n \t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"g\")"}, {"sha": "07f66355b7e3852f578603e3879e29612c483b58", "filename": "gcc/config/we32k/we32k.md", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fwe32k%2Fwe32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996a5f59fb5faefcb6e056ec3976cdb3d7f8d439/gcc%2Fconfig%2Fwe32k%2Fwe32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.md?ref=996a5f59fb5faefcb6e056ec3976cdb3d7f8d439", "patch": "@@ -1,7 +1,6 @@\n-;;- Machine description for GNU compiler\n-;;- AT&T we32000 Version\n-;;  Contributed by John Wehle (john@feith1.uucp)\n-;;   Copyright (C) 1991-1992 Free Software Foundation, Inc.\n+;; Machine description for GNU compiler, AT&T we32000 Version\n+;; Copyright (C) 1991, 1992, 1994 Free Software Foundation, Inc.\n+;; Contributed by John Wehle (john@feith1.uucp)\n \n ;; This file is part of GNU CC.\n \n@@ -682,13 +681,6 @@\n \n ;; logical shift instructions\n \n-;; (define_insn \"lshlsi3\"\n-;;   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=mr\")\n-;;         (lshift:SI (match_operand:SI 1 \"general_operand\" \"mri\")\n-;;                    (match_operand:SI 2 \"general_operand\" \"mri\")))]\n-;;   \"\"\n-;;   \"LLSW3 %2, %1, %0\")\n-\n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=mr\")\n         (lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"mri\")"}]}