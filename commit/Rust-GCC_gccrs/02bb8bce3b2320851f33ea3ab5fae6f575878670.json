{"sha": "02bb8bce3b2320851f33ea3ab5fae6f575878670", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJiYjhiY2UzYjIzMjA4NTFmMzNlYTNhYjVmYWU2ZjU3NTg3ODY3MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-09-18T10:17:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-09-18T10:17:42Z"}, "message": "re PR rtl-optimization/37544 (Conversion double -> unsigned long long -> unsigned -> double gives wrong results)\n\n\tPR rtl-optimization/37544\n\t* regrename.c (maybe_mode_change): Exit early when copy_mode\n\tis narrower than orig_mode and narrower than new_mode.\n\ntestsuite/ChangeLog:\n\n\tPR rtl-optimization/37544\n\t* gcc.dg/pr37544.c: New test.\n\nFrom-SVN: r140446", "tree": {"sha": "d51fb55aa9413a7aeb275dc45346fdedf41db963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d51fb55aa9413a7aeb275dc45346fdedf41db963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02bb8bce3b2320851f33ea3ab5fae6f575878670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02bb8bce3b2320851f33ea3ab5fae6f575878670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02bb8bce3b2320851f33ea3ab5fae6f575878670", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02bb8bce3b2320851f33ea3ab5fae6f575878670/comments", "author": null, "committer": null, "parents": [{"sha": "d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1"}], "stats": {"total": 172, "additions": 122, "deletions": 50}, "files": [{"sha": "26d38e4a58722fdcd97062280f8d979d4ad4c2dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 74, "deletions": 50, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb8bce3b2320851f33ea3ab5fae6f575878670/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb8bce3b2320851f33ea3ab5fae6f575878670/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02bb8bce3b2320851f33ea3ab5fae6f575878670", "patch": "@@ -1,3 +1,9 @@\n+2008-09-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/37544\n+\t* regrename.c (maybe_mode_change): Exit early when copy_mode\n+\tis narrower than orig_mode and narrower than new_mode.\n+\n 2008-09-18  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR middle-end/37499\n@@ -234,8 +240,8 @@\n \n 2008-09-13  Jan Hubicka  <jh@suse.cz>\n \n-\t* i386.c (ix86_expand_movmem, ix86_expand_movstr): Avoid processing too\n-\tmany bytes on misalligned blocks.\n+\t* i386.c (ix86_expand_movmem, ix86_expand_movstr): Avoid processing\n+\ttoo many bytes on misalligned blocks.\n \n 2008-09-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n@@ -316,7 +322,8 @@\n \n 2008-09-12  Sebastian Pop  <sebastian.pop@amd.com>\n \n-\t* tree-scalar-evolution.c (set_instantiated_value): Set instantiated_below.\n+\t* tree-scalar-evolution.c (set_instantiated_value): Set\n+\tinstantiated_below.\n \n 2008-09-12  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -459,7 +466,8 @@\n \tTRUTH_AND_EXPR for boolean (1-bit precision) expressions.\n \t(do_jump) [BIT_IOR_EXPR]: Compile as TRUTH_OR_EXPR.\n \n-\t* tree-flow.h (simplify_stmt_using_ranges): Accept a GSI, return a bool.\n+\t* tree-flow.h (simplify_stmt_using_ranges): Accept a GSI, return\n+\ta bool.\n \t* tree-ssa-propagate.c (substitute_and_fold): Pass a GSI to\n \tVRP's simplify_stmt_using_ranges.  Do simplify_stmt_using_ranges\n \tbefore finalizing the changes.\n@@ -480,8 +488,8 @@\n 2008-09-11  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_release_function_body): Plug memory leak on\n-\tipa_transforms_to_apply and CFG; ggc_free gimple df and struct function\n-\tso we are sure we do not dangle it forever.\n+\tipa_transforms_to_apply and CFG; ggc_free gimple df and struct\n+\tfunction so we are sure we do not dangle it forever.\n \t* function.c (outer_function_chain, find_function_data): Remove.\n \t(function_context_stack): New.\n \t(push_function_context, pop_function_context): Update.\n@@ -538,7 +546,8 @@\n \tregister_overhead, free_overhead, vec_heap_free): New functions.\n \t(vec_gc_o_reserve_1): ggc_free when resizing to 0.\n \t(vec_heap_o_reserve_1): free when resizing to 0; add statistics.\n-\t(cmp_statistic, add_statistics, dump_vec_loc_statistics): New functions.\n+\t(cmp_statistic, add_statistics, dump_vec_loc_statistics):\n+\tNew functions.\n \n 2008-09-11  Ira Rosen  <irar@il.ibm.com>\n \n@@ -692,8 +701,8 @@\n \tcalls.\n \n \tPR target/37438\n-\t* config/i386/i386.md (zero_extendqihi2_movzbl): Enable when optimizing\n-\tfor size, not speed.\n+\t* config/i386/i386.md (zero_extendqihi2_movzbl): Enable when\n+\toptimizing for size, not speed.\n \n \tPR rtl-optimization/37408\n \t* function.c (assign_parm_find_stack_rtl): Set correct MEM_SIZE\n@@ -702,18 +711,20 @@\n 2008-09-09  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/37375\n-\t* tree-scalar-evolution.c (scev_info_str): Add field instantiated_below.\n+\t* tree-scalar-evolution.c (scev_info_str): Add field\n+\tinstantiated_below.\n \t(new_scev_info_str, eq_scev_info, find_var_scev_info,\n \tset_scalar_evolution, get_scalar_evolution, get_instantiated_value,\n \tset_instantiated_value): Pass instantiated_below.\n-\t(analyze_scalar_evolution_1, analyze_scalar_evolution): Update calls to\n-\tabove functions.\n+\t(analyze_scalar_evolution_1, analyze_scalar_evolution): Update calls\n+\tto above functions.\n \t(instantiate_scev_1, instantiate_scev): Pass a basic block above which\n \tthe definitions are not instantiated.\n \n \t* tree-scalar-evolution.h (instantiate_scev): Update declaration.\n \t(block_before_loop): New.\n-\t* tree-data-ref.c (dr_analyze_indices): Update uses of instantiate_scev.\n+\t* tree-data-ref.c (dr_analyze_indices): Update uses of\n+\tinstantiate_scev.\n \t* graphite.c (block_before_scop): New.\n \t(loop_affine_expr, stmt_simple_for_scop_p, harmful_stmt_in_bb): Pass a\n \tbasic block, not a loop for determining the parameters.\n@@ -1671,8 +1682,8 @@\n \topenmp applications.\n \t* pa-hpux11.h (LIB_SPEC): Likewise.\n \n-\t* ira.c (setup_eliminable_regset): Only declare i if ELIMINABLE_REGS is\n-\tdefined.\n+\t* ira.c (setup_eliminable_regset): Only declare i if ELIMINABLE_REGS\n+\tis defined.\n \n 2008-09-01  Jan Hubicka  <jh@suse.cz>\n \n@@ -1782,8 +1793,7 @@\n \n \t* sel-sched.h, sel-sched-dump.h, sel-sched-ir.h, sel-sched.c,\n \tsel-sched-dump.c, sel-sched-ir.c: New files.\n-\t* Makefile.in (OBJS-common): Add selective scheduling object\n-\tfiles.\n+\t* Makefile.in (OBJS-common): Add selective scheduling object files.\n \t(sel-sched.o, sel-sched-dump.o, sel-sched-ir.o): New entries.\n \t(SEL_SCHED_IR_H, SEL_SCHED_DUMP_H): New entries.\n \t(sched-vis.o): Add dependency on $(INSN_ATTR_H).\n@@ -1905,8 +1915,7 @@\n \t(setup_sched_dump): New function.\n \t(haifa_init_only_bb): New static function.\n \t(haifa_speculate_insn): New static function.\n-\t(try_ready): Use haifa_* instead of speculate_insn and\n-\tchange_pattern.\n+\t(try_ready): Use haifa_* instead of speculate_insn and change_pattern.\n \t(extend_ready, extend_all): Remove.\n \t(sched_extend_ready_list, sched_finish_ready_list): New functions.\n \t(create_check_block_twin, add_to_speculative_block): Use\n@@ -1936,8 +1945,7 @@\n \t(current_sched_info_var): Remove.\n \t(move_block_after_check): Use common_sched_info.\n \t(haifa_luid_for_non_insn): New static function.\n-\t(init_before_recovery): Use haifa_init_only_bb instead of\n-\tadd_block.\n+\t(init_before_recovery): Use haifa_init_only_bb instead of add_block.\n \t(increase_insn_priority): New.\n \t* modulo-sched.c: (issue_rate): Remove static declaration.\n \t(sms_sched_info): Change type to haifa_sched_info.\n@@ -2351,7 +2359,8 @@\n \t(noce_try_cmove_arith): Likewise.\n \t(noce_try_sign_mask): LIkewise.\n \t* expr.c (compress_float_constant): Update rtx_cost calls.\n-\t* tree-ssa-address.c (most_expensive_mult_to_index): Add speed argument.\n+\t* tree-ssa-address.c (most_expensive_mult_to_index): Add speed\n+\targument.\n \t(addr_to_parts): Likewise.\n \t(create_mem_ref): Likewise.\n \t* dse.c (find_shift_sequence): Add speed argument.\n@@ -2370,7 +2379,8 @@\n \t(expand_mult_highpart): Use profile.\n \t(expand_smod_pow2): Use profile.\n \t(expand_divmod): Use profile.\n-\t* simplify-rtx.c (simplify_binary_operation_1): Update call of rtx_cost.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Update call of\n+\trtx_cost.\n \t* loop-invariant.c (create_new_invariant): Use profile.\n \t(gain_for_invariant): Add speed parameter.\n \t(best_gain_for_invariant): Likewise.\n@@ -2638,7 +2648,8 @@\n \t* config/sparc/sparc.h (BRANCH_COST): Update.\n \t* config/m32r/m32r.h (BRANCH_COST): Update.\n \t* config/i386/i386.h (BRANCH_COST): Update.\n-\t* config/i386/i386.c (ix86_expand_int_movcc): Update use of BRANCH_COST.\n+\t* config/i386/i386.c (ix86_expand_int_movcc): Update use of\n+\tBRANCH_COST.\n \t* config/sh/sh.h (BRANCH_COST): Update.\n \t* config/pdp11/pdp11.h (BRANCH_COST): Update.\n \t* config/avr/avr.h (BRANCH_COST): Update.\n@@ -2688,7 +2699,8 @@\n \t* tree-ssa-pre.c (do_pre): Use optimize_function_for_speed_p.\n \t* tree-predcom.c (tree_predictive_commoning): Use\n \toptimize_loop_for_speed_p.\n-\t* varasm.c (assemble_start_function): Use optimize_function_for_speed_p.\n+\t* varasm.c (assemble_start_function): Use\n+\toptimize_function_for_speed_p.\n \t* bb-reorder.c (rest_of_handle_reorder_blocks): Likewise.\n \t* predict.c (optimize_loop_for_speed_p): Fix walk.\n \n@@ -2909,16 +2921,17 @@\n \n 2008-08-29  Jan Hubicka  <jh@suse.cz>\n \n-\t* tree.c (build_function_type_skip_args, build_function_decl_skip_args):\n-\tNew functions.\n-\t* tree.h (build_function_type_skip_args, build_function_decl_skip_args):\n-\tDeclare.\n+\t* tree.c (build_function_type_skip_args,\n+\tbuild_function_decl_skip_args): New functions.\n+\t* tree.h (build_function_type_skip_args,\n+\tbuild_function_decl_skip_args): Declare.\n \t* gimple.c (giple_copy_call_skip_args): New function.\n \t(giple_copy_call_skip_args): Declare.\n \n \t* cgraph.h (cgraph_function_versioning): Add skip_args arugmnet\n \t* ipa-cp.c (ipcp_node_not_modifiable_p): Rename to ...\n-\t(ipcp_node_modifiable_p): ... this one; use tree_versionable_function_p.\n+\t(ipcp_node_modifiable_p): ... this one; use\n+\ttree_versionable_function_p.\n \t(ipcp_create_replace_map): Improve debug output.\n \t(ipcp_need_redirect_p): Return false when not clonning.\n \t(ipcp_update_callgraph): Skip args.\n@@ -2927,13 +2940,15 @@\n \t* cgraphunit.c (cgraph_function_versioning): Add skip_args argument.\n \t(save_inline_function_body): Update call of tree_function_versioning.\n \t* ipa-prop.c (ipa_edge_removal_hook): Do not ICE on unanalyzed nodes.\n-\t* tree-inline.c (copy_arguments_for_versioning): Add skip_args argument.\n+\t* tree-inline.c (copy_arguments_for_versioning): Add skip_args\n+\targument.\n \t(tree_function_versioning): Likewise.\n \t* tree-inline.h (tree_function_versioning): Update prototype.\n \n 2008-08-29  Jan Hubicka  <jh@suse.cz>\n \n-\t* loop-unswitch.c (unswitch_single_loop): Use optimize_loop_for_speed_p.\n+\t* loop-unswitch.c (unswitch_single_loop): Use\n+\toptimize_loop_for_speed_p.\n \t* tree-ssa-threadupdate.c (mark_threaded_blocks):\n \tUse optimize_function_for_size_p.\n \t* tracer.c (ignore_bb_p): Use optimize_bb_for_size_p.\n@@ -2947,7 +2962,8 @@\n \t* builtins.c (fold_builtin_cabs): Use optimize_function_for_speed_p.\n \t(fold_builtin_strcpy, fold_builtin_fputs): Use\n \toptimize_function_for_size_p.\n-\t* fold-const.c (tree_swap_operands_p): Use optimize_function_for_size_p.\n+\t* fold-const.c (tree_swap_operands_p): Use\n+\toptimize_function_for_size_p.\n \t* recog.c (relax_delay_slots): Likewise.\n \t* tree-ssa-math-opts.c (replace_reciprocal):\n \tUse optimize_bb_for_speed_p.\n@@ -2963,11 +2979,12 @@\n \twork it out from profile.\n \t* tree-ssa-loop-ivcanon.c (tree_unroll_loops_completely): Use\n \toptimize_loop_for_speed_p.\n-\t* predict.c (optimize_bb_for_size_p, optimize_bb_for_speed_p): Constify\n-\targument.\n+\t* predict.c (optimize_bb_for_size_p, optimize_bb_for_speed_p):\n+\tConstify argument.\n \t(optimize_loop_nest_for_size_p, optimize_loop_nest_for_speed_p): New.\n \t* tree-parloops.c (parallelize_loops): Use optimize_loop_for_size_p.\n-\t* tree-eh.c (decide_copy_try_finally): Use optimize_function_for_size_p.\n+\t* tree-eh.c (decide_copy_try_finally): Use\n+\toptimize_function_for_size_p.\n \t* local-alloc.c (block_alloc): Pass BB pointer.\n \t(find_free_reg): Add BB pointer, use optimize_bb_for_size_p.\n \t* gcse.c (gcse_main): Use optimize_function_for_size_p.\n@@ -4365,8 +4382,8 @@\n \t(update_call_notes_after_inlining): Expect ADDR_EXPR in operand.\n \t* ipa-prop.h (jump_func_type): Remove IPA_CONST_REF.\n \t(jump_func_type): Remove IPA_CONST_VALUE_REF.\n-\t* tree-inline.c (tree_function_versioning): Add variables referenced by\n-\treplacing trees.\n+\t* tree-inline.c (tree_function_versioning): Add variables referenced\n+\tby replacing trees.\n \n 2008-08-23  Jan Hubicka  <jh@suse.cz>\n \n@@ -4766,9 +4783,9 @@\n \t(vect_get_and_check_slp_defs): Detect patterns.\n \t(vect_build_slp_tree): Add an argument, don't fail in case of multiple\n \ttypes.\n-\t(vect_analyze_slp_instance): Don't fail in case of multiple types. Call\n-\tvect_build_slp_tree with correct arguments. Calculate unrolling factor\n-\taccording to the smallest type in the loop.\n+\t(vect_analyze_slp_instance): Don't fail in case of multiple types.\n+\tCall vect_build_slp_tree with correct arguments. Calculate unrolling\n+\tfactor according to the smallest type in the loop.\n \t(vect_detect_hybrid_slp_stmts): Include statements from patterns.\n \t* tree-vect-patterns.c (vect_recog_widen_mult_pattern): Call\n \tsupportable_widening_operation with correct arguments.\n@@ -5581,7 +5598,8 @@\n \n 2008-08-09  Richard Sandiford  <rdsandiford@googlemail.com>\n \n-\t* config/mips/mips.c (mips_unspec_address_offset): Move earlier in file.\n+\t* config/mips/mips.c (mips_unspec_address_offset): Move earlier\n+\tin file.\n \t(mips_unspec_address, mips_unspec_offset_high): Likewise.\n \t(mips_ok_for_lazy_binding_p, mips_load_call_address): Likewise.\n \t(mips16_cfun_returns_in_fpr_p): Likewise.\n@@ -6150,7 +6168,8 @@\n \t* configure.ac (HAVE_GAS_CFI_DIRECTIVE): New.\n \t* config.in, configure: Rebuild.\n \t* dwarf2asm.c (dw2_asm_output_data_raw): New.\n-\t(dw2_asm_output_data_uleb128_raw, dw2_asm_output_data_sleb128_raw): New.\n+\t(dw2_asm_output_data_uleb128_raw, dw2_asm_output_data_sleb128_raw):\n+\tNew.\n \t(dw2_force_const_mem): Externalize.\n \t* dwarf2asm.h: Update.\n \t* dwarf2out.c (dwarf2out_cfi_label): If flag_dwarf2_cfi_asm, don't\n@@ -6185,8 +6204,10 @@\n \n \t(MFC_MIN_DMA_LIST_ELEMENTS): New define.\n \t(MFC_MAX_DMA_LIST_ELEMENTS): Likewise.\n-\t(MFC_MIN_DMA_LIST_SIZE): Redefine in terms of MFC_MIN_DMA_LIST_ELEMENTS.\n-\t(MFC_MAX_DMA_LIST_SIZE): Redefine in terms of MFC_MAX_DMA_LIST_ELEMENTS.\n+\t(MFC_MIN_DMA_LIST_SIZE): Redefine in terms of\n+\tMFC_MIN_DMA_LIST_ELEMENTS.\n+\t(MFC_MAX_DMA_LIST_SIZE): Redefine in terms of\n+\tMFC_MAX_DMA_LIST_ELEMENTS.\n \n \t(MFC_START_ENABLE): Remove PPU-only define.\n \t(MFC_PUTS_CMD, MFC_PUTFS_CMD, MFC_PUTBS_CMD): Likewise.\n@@ -6861,7 +6882,8 @@\n \n \t* configure.ac: Use the m4_do macro to concatenate the warnings into\n \tone string in ACX_PROG_CC_WARNING_OPTS,\n-\tACX_PROG_CC_WARNING_ALMOST_PEDANTIC and ACX_PROG_CC_WARNINGS_ARE_ERRORS.\n+\tACX_PROG_CC_WARNING_ALMOST_PEDANTIC and\n+\tACX_PROG_CC_WARNINGS_ARE_ERRORS.\n \t* configure: Regenerate.\n \n 2008-07-28  Richard Guenther  <rguenther@suse.de>\n@@ -7363,7 +7385,8 @@\n \t(ipa_analyze_params_uses): New function.\n \t(ipa_free_node_params_substructures): Also free the param_calls linked\n \tlist.\n-\t(ipa_node_duplication_hook): Also duplicate the param_calls linked list.\n+\t(ipa_node_duplication_hook): Also duplicate the param_calls\n+\tlinked list.\n \t(ipa_print_node_param_flags): New function.\n \t(ipa_print_all_params_modified): Renamed to ipa_print_all_param_flags.\n \t(ipa_print_all_param_flags): Calls ipa_print_node_param_flags.\n@@ -7912,15 +7935,16 @@\n \tnot optimizing so unused user vars remains visible.\n \t* common.opt (flag_tree_ter): Always enable by default.\n \t* tree-ssa-ter.c: Include flags.h\n-\t(is_replaceable_p): Check that locations match; when aliasing is missing\n-\tbe conservative about loads.\n+\t(is_replaceable_p): Check that locations match; when aliasing\n+\tis missing be conservative about loads.\n \t* tree-optimize.c (gate_init_datastructures): Remove.\n \t(pass_init_datastructures): New.\n \t* passes.c: Reorder passes so we always go into SSA.\n \n 2008-07-19  Jan Hubicka  <jh@suse.cz>\n \n-\t* doc/extend.texi (flatten attribute): Remove note about unit-at-a-time\n+\t* doc/extend.texi (flatten attribute): Remove note about\n+\tunit-at-a-time.\n \t* doc/invoke.texi (--combine): Likewise.\n \t(-finline-functions-called-once): Update levels when enabled.\n \t(-funit-at-a-time): Document new behaviour."}, {"sha": "e70dae8d139d19d8a525c76084bab1c248f92d90", "filename": "gcc/regrename.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb8bce3b2320851f33ea3ab5fae6f575878670/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb8bce3b2320851f33ea3ab5fae6f575878670/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=02bb8bce3b2320851f33ea3ab5fae6f575878670", "patch": "@@ -1314,6 +1314,10 @@ maybe_mode_change (enum machine_mode orig_mode, enum machine_mode copy_mode,\n \t\t   enum machine_mode new_mode, unsigned int regno,\n \t\t   unsigned int copy_regno ATTRIBUTE_UNUSED)\n {\n+  if (GET_MODE_SIZE (copy_mode) < GET_MODE_SIZE (orig_mode)\n+      && GET_MODE_SIZE (copy_mode) < GET_MODE_SIZE (new_mode))\n+    return NULL_RTX;\n+\n   if (orig_mode == new_mode)\n     return gen_rtx_raw_REG (new_mode, regno);\n   else if (mode_change_ok (orig_mode, new_mode, regno))"}, {"sha": "7bbee66143a963a9dfeaebb202bd86147162363b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb8bce3b2320851f33ea3ab5fae6f575878670/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb8bce3b2320851f33ea3ab5fae6f575878670/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02bb8bce3b2320851f33ea3ab5fae6f575878670", "patch": "@@ -1,3 +1,8 @@\n+2008-09-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/37544\n+\t* gcc.dg/pr37544.c: New test.\n+\n 2008-09-17  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR testsuite/25241"}, {"sha": "6393d2f89d8c74b650b6de970f8da750f74a5a4e", "filename": "gcc/testsuite/gcc.dg/pr37544.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb8bce3b2320851f33ea3ab5fae6f575878670/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37544.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb8bce3b2320851f33ea3ab5fae6f575878670/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37544.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37544.c?ref=02bb8bce3b2320851f33ea3ab5fae6f575878670", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -msse2 -mtune=core2 -mfpmath=387\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+#ifdef __i386__\n+#include \"cpuid.h\"\n+#endif\n+\n+extern void abort (void);\n+\n+int main(void)\n+{\n+  double arr[1000];\n+  double a, b;\n+\n+  int i;\n+\n+#ifdef __i386__\n+  unsigned int eax, ebx, ecx, edx;\n+ \n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run SSE2 test only if host has SSE2 support.  */\n+  if (!(edx & bit_SSE2))\n+    return 0;\n+#endif\n+\n+  for (i = 0; i < 1000; i++)\n+    arr[i] = 4294967296.0 + (double)i;\n+\n+  a = arr[0];\n+  b = (unsigned int)((unsigned long long int)a % 4294967296ULL);\n+\n+  if (b >= 4294967296.0)\n+    abort ();\n+\n+  return 0;\n+}"}]}