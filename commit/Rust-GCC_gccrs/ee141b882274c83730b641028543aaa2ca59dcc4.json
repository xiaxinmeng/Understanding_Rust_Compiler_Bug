{"sha": "ee141b882274c83730b641028543aaa2ca59dcc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxNDFiODgyMjc0YzgzNzMwYjY0MTAyODU0M2FhYTJjYTU5ZGNjNA==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-25T19:48:35Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-25T19:48:35Z"}, "message": "[multiple changes]\n\n2005-04-25  Archie Cobbs  <archie@dellroad.org>\n\n\t* java/lang/Throwable.java: simplify initializing cause in constructor\n\n2005-04-25  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/classpath/SystemProperties.java: New file.\n\t* gnu/classpath/natSystemProperties.cc: New file.\n\t* java/lang/Runtime.java\n\t(defaultProperties): Removed.\n\t(static): Likewise.\n\t(): Made thrown exceptions more verbose.\n\t(insertSystemProperties): Removed.\n\t* java/lang/System.java\n\t(static): Likewise.\n\t(properties): Likewise.\n\t(setSecurityManager): Reordered modifiers.\n\t(getenv): Improved javadoc.\n\t(): Likewise.\n\t(isWordsBigEndian): Removed.\n\t* java/lang/natRuntime.cc\n\t(_Jv_SetDLLSearchPath): Likewise.\n\t(file_encoding): Likewise.\n\t(default_file_encoding): Likewise.\n\t(getpwuid_adaptor): Likewise.\n\t(insertSystemProperties): Likewise.\n\t* java/lang/natSystem.cc\n\t(isWordsBigEndian): Likewise.\n\t* Makefile.am\n\t(ordinary_java_source_files):\n\tAdded gnu/classpath/SystemProperties.java.\n\t(nat_source_files): Added gnu/classpath/natSystemProperties.cc.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r98734", "tree": {"sha": "b5b9489b56407d7dd7458dfb66e0c427e65d010b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b9489b56407d7dd7458dfb66e0c427e65d010b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee141b882274c83730b641028543aaa2ca59dcc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee141b882274c83730b641028543aaa2ca59dcc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee141b882274c83730b641028543aaa2ca59dcc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee141b882274c83730b641028543aaa2ca59dcc4/comments", "author": null, "committer": null, "parents": [{"sha": "8efae6bbfa04f662589bbfc64dbbe68935f973d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efae6bbfa04f662589bbfc64dbbe68935f973d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8efae6bbfa04f662589bbfc64dbbe68935f973d2"}], "stats": {"total": 1195, "additions": 641, "deletions": 554}, "files": [{"sha": "9e7922aa28bf20770e5509c7ccb22ee7728f3389", "filename": "libjava/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ee141b882274c83730b641028543aaa2ca59dcc4", "patch": "@@ -1,3 +1,37 @@\n+2005-04-25  Archie Cobbs  <archie@dellroad.org>\n+\n+\t* java/lang/Throwable.java: simplify initializing cause in constructor\n+\n+2005-04-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/classpath/SystemProperties.java: New file.\n+\t* gnu/classpath/natSystemProperties.cc: New file.\n+\t* java/lang/Runtime.java\n+\t(defaultProperties): Removed.\n+\t(static): Likewise.\n+\t(): Made thrown exceptions more verbose.\n+\t(insertSystemProperties): Removed.\n+\t* java/lang/System.java\n+\t(static): Likewise.\n+\t(properties): Likewise.\n+\t(setSecurityManager): Reordered modifiers.\n+\t(getenv): Improved javadoc.\n+\t(): Likewise.\n+\t(isWordsBigEndian): Removed.\n+\t* java/lang/natRuntime.cc\n+\t(_Jv_SetDLLSearchPath): Likewise.\n+\t(file_encoding): Likewise.\n+\t(default_file_encoding): Likewise.\n+\t(getpwuid_adaptor): Likewise.\n+\t(insertSystemProperties): Likewise.\n+\t* java/lang/natSystem.cc\n+\t(isWordsBigEndian): Likewise.\n+\t* Makefile.am\n+\t(ordinary_java_source_files):\n+\tAdded gnu/classpath/SystemProperties.java.\n+\t(nat_source_files): Added gnu/classpath/natSystemProperties.cc.\n+\t* Makefile.in: Regenerated.\n+\n 2005-04-25  Roman Kennke  <roman@kennke.org>\n \n \t* javax/swing/plaf/basic/BasicScrollBarUI.java"}, {"sha": "ec82b73e7ecd07175a37db177555a471939b85b0", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=ee141b882274c83730b641028543aaa2ca59dcc4", "patch": "@@ -3122,6 +3122,7 @@ java/util/regex/PatternSyntaxException.java\n ordinary_java_source_files = $(core_java_source_files) \\\n gnu/classpath/ServiceFactory.java \\\n gnu/classpath/ServiceProviderLoadingAction.java \\\n+gnu/classpath/SystemProperties.java \\\n gnu/gcj/Core.java \\\n gnu/gcj/RawData.java \\\n gnu/gcj/RawDataManaged.java \\\n@@ -3884,6 +3885,7 @@ math_c_source_files = \\\n \n ## This lists all the C++ source files in subdirectories.\n nat_source_files = \\\n+gnu/classpath/natSystemProperties.cc \\\n gnu/gcj/natCore.cc \\\n gnu/gcj/convert/JIS0208_to_Unicode.cc \\\n gnu/gcj/convert/JIS0212_to_Unicode.cc \\"}, {"sha": "926b5dace7dbd5e0b0f19bdaa20b32aa06e6a8aa", "filename": "libjava/Makefile.in", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=ee141b882274c83730b641028543aaa2ca59dcc4", "patch": "@@ -238,7 +238,8 @@ libgcj0_convenience_la_DEPENDENCIES = gnu-xml.lo javax-imageio.lo \\\n \texternal/w3c_dom/libw3c-gcj.la\n am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tstacktrace.cc link.cc defineclass.cc interpret.cc verify.cc \\\n-\tgnu/gcj/natCore.cc gnu/gcj/convert/JIS0208_to_Unicode.cc \\\n+\tgnu/classpath/natSystemProperties.cc gnu/gcj/natCore.cc \\\n+\tgnu/gcj/convert/JIS0208_to_Unicode.cc \\\n \tgnu/gcj/convert/JIS0212_to_Unicode.cc \\\n \tgnu/gcj/convert/Unicode_to_JIS.cc gnu/gcj/convert/natIconv.cc \\\n \tgnu/gcj/convert/natInput_EUCJIS.cc \\\n@@ -453,9 +454,10 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tjava/util/regex/PatternSyntaxException.java \\\n \tgnu/classpath/ServiceFactory.java \\\n \tgnu/classpath/ServiceProviderLoadingAction.java \\\n-\tgnu/gcj/Core.java gnu/gcj/RawData.java \\\n-\tgnu/gcj/RawDataManaged.java gnu/gcj/io/DefaultMimeTypes.java \\\n-\tgnu/gcj/io/MimeTypes.java gnu/gcj/io/SimpleSHSStream.java \\\n+\tgnu/classpath/SystemProperties.java gnu/gcj/Core.java \\\n+\tgnu/gcj/RawData.java gnu/gcj/RawDataManaged.java \\\n+\tgnu/gcj/io/DefaultMimeTypes.java gnu/gcj/io/MimeTypes.java \\\n+\tgnu/gcj/io/SimpleSHSStream.java \\\n \tgnu/gcj/runtime/BootClassLoader.java \\\n \tgnu/gcj/runtime/ExtensionClassLoader.java \\\n \tgnu/gcj/runtime/FileDeleter.java \\\n@@ -2281,8 +2283,8 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tgnu/classpath/Configuration.java boehm.cc nogc.cc \\\n \tsysdep/dwarf2-backtrace.cc posix.cc win32.cc darwin.cc \\\n \tposix-threads.cc win32-threads.cc no-threads.cc\n-am__objects_5 = gnu/gcj/natCore.lo \\\n-\tgnu/gcj/convert/JIS0208_to_Unicode.lo \\\n+am__objects_5 = gnu/classpath/natSystemProperties.lo \\\n+\tgnu/gcj/natCore.lo gnu/gcj/convert/JIS0208_to_Unicode.lo \\\n \tgnu/gcj/convert/JIS0212_to_Unicode.lo \\\n \tgnu/gcj/convert/Unicode_to_JIS.lo gnu/gcj/convert/natIconv.lo \\\n \tgnu/gcj/convert/natInput_EUCJIS.lo \\\n@@ -3585,7 +3587,8 @@ am__objects_13 = org/ietf/jgss/GSSManager.lo \\\n \torg/ietf/jgss/Oid.lo org/ietf/jgss/GSSCredential.lo \\\n \torg/ietf/jgss/ChannelBinding.lo\n am__objects_14 = $(am__objects_8) gnu/classpath/ServiceFactory.lo \\\n-\tgnu/classpath/ServiceProviderLoadingAction.lo gnu/gcj/Core.lo \\\n+\tgnu/classpath/ServiceProviderLoadingAction.lo \\\n+\tgnu/classpath/SystemProperties.lo gnu/gcj/Core.lo \\\n \tgnu/gcj/RawData.lo gnu/gcj/RawDataManaged.lo \\\n \tgnu/gcj/io/DefaultMimeTypes.lo gnu/gcj/io/MimeTypes.lo \\\n \tgnu/gcj/io/SimpleSHSStream.lo \\\n@@ -6911,6 +6914,7 @@ java/util/regex/PatternSyntaxException.java\n ordinary_java_source_files = $(core_java_source_files) \\\n gnu/classpath/ServiceFactory.java \\\n gnu/classpath/ServiceProviderLoadingAction.java \\\n+gnu/classpath/SystemProperties.java \\\n gnu/gcj/Core.java \\\n gnu/gcj/RawData.java \\\n gnu/gcj/RawDataManaged.java \\\n@@ -7668,6 +7672,7 @@ math_c_source_files = \\\n   java/lang/k_cos.c       java/lang/s_sin.c       java/lang/sf_fabs.c\n \n nat_source_files = \\\n+gnu/classpath/natSystemProperties.cc \\\n gnu/gcj/natCore.cc \\\n gnu/gcj/convert/JIS0208_to_Unicode.cc \\\n gnu/gcj/convert/JIS0212_to_Unicode.cc \\\n@@ -8194,6 +8199,14 @@ jni/classpath/lib_gnu_java_awt_peer_gtk_la-native_state.lo:  \\\n \tjni/classpath/$(DEPDIR)/$(am__dirstamp)\n lib-gnu-java-awt-peer-gtk.la: $(lib_gnu_java_awt_peer_gtk_la_OBJECTS) $(lib_gnu_java_awt_peer_gtk_la_DEPENDENCIES) \n \t$(lib_gnu_java_awt_peer_gtk_la_LINK) $(am_lib_gnu_java_awt_peer_gtk_la_rpath) $(lib_gnu_java_awt_peer_gtk_la_LDFLAGS) $(lib_gnu_java_awt_peer_gtk_la_OBJECTS) $(lib_gnu_java_awt_peer_gtk_la_LIBADD) $(LIBS)\n+gnu/classpath/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/classpath\n+\t@: > gnu/classpath/$(am__dirstamp)\n+gnu/classpath/$(DEPDIR)/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/classpath/$(DEPDIR)\n+\t@: > gnu/classpath/$(DEPDIR)/$(am__dirstamp)\n+gnu/classpath/natSystemProperties.lo: gnu/classpath/$(am__dirstamp) \\\n+\tgnu/classpath/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/$(am__dirstamp):\n \t@$(mkdir_p) gnu/gcj\n \t@: > gnu/gcj/$(am__dirstamp)\n@@ -9041,17 +9054,13 @@ java/util/regex/Pattern.lo: java/util/regex/$(am__dirstamp) \\\n java/util/regex/PatternSyntaxException.lo:  \\\n \tjava/util/regex/$(am__dirstamp) \\\n \tjava/util/regex/$(DEPDIR)/$(am__dirstamp)\n-gnu/classpath/$(am__dirstamp):\n-\t@$(mkdir_p) gnu/classpath\n-\t@: > gnu/classpath/$(am__dirstamp)\n-gnu/classpath/$(DEPDIR)/$(am__dirstamp):\n-\t@$(mkdir_p) gnu/classpath/$(DEPDIR)\n-\t@: > gnu/classpath/$(DEPDIR)/$(am__dirstamp)\n gnu/classpath/ServiceFactory.lo: gnu/classpath/$(am__dirstamp) \\\n \tgnu/classpath/$(DEPDIR)/$(am__dirstamp)\n gnu/classpath/ServiceProviderLoadingAction.lo:  \\\n \tgnu/classpath/$(am__dirstamp) \\\n \tgnu/classpath/$(DEPDIR)/$(am__dirstamp)\n+gnu/classpath/SystemProperties.lo: gnu/classpath/$(am__dirstamp) \\\n+\tgnu/classpath/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/Core.lo: gnu/gcj/$(am__dirstamp) \\\n \tgnu/gcj/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/RawData.lo: gnu/gcj/$(am__dirstamp) \\\n@@ -15017,6 +15026,10 @@ mostlyclean-compile:\n \t-rm -f gnu/classpath/ServiceFactory.lo\n \t-rm -f gnu/classpath/ServiceProviderLoadingAction.$(OBJEXT)\n \t-rm -f gnu/classpath/ServiceProviderLoadingAction.lo\n+\t-rm -f gnu/classpath/SystemProperties.$(OBJEXT)\n+\t-rm -f gnu/classpath/SystemProperties.lo\n+\t-rm -f gnu/classpath/natSystemProperties.$(OBJEXT)\n+\t-rm -f gnu/classpath/natSystemProperties.lo\n \t-rm -f gnu/gcj/Core.$(OBJEXT)\n \t-rm -f gnu/gcj/Core.lo\n \t-rm -f gnu/gcj/RawData.$(OBJEXT)\n@@ -20071,6 +20084,8 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/classpath/$(DEPDIR)/Configuration.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/classpath/$(DEPDIR)/ServiceFactory.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/classpath/$(DEPDIR)/ServiceProviderLoadingAction.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/classpath/$(DEPDIR)/SystemProperties.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/classpath/$(DEPDIR)/natSystemProperties.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/$(DEPDIR)/Core.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/$(DEPDIR)/RawData.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/$(DEPDIR)/RawDataManaged.Plo@am__quote@"}, {"sha": "ee642804378287a1fe71b6156ec23f73db4bbd32", "filename": "libjava/gnu/classpath/SystemProperties.java", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fgnu%2Fclasspath%2FSystemProperties.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fgnu%2Fclasspath%2FSystemProperties.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2FSystemProperties.java?ref=ee141b882274c83730b641028543aaa2ca59dcc4", "patch": "@@ -0,0 +1,154 @@\n+/* SystemProperties.java -- Manage the System properties.\n+   Copyright (C) 2004, 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath;\n+\n+import java.util.Properties;\n+\n+/**\n+ * The class manages the System properties. This class is only available to\n+ * privileged code (i.e. code loaded by the bootstrap class loader) and\n+ * therefore doesn't do any security checks.\n+ * This class is separated out from java.lang.System to simplify bootstrap\n+ * dependencies and to allow trusted code a simple and efficient mechanism\n+ * to access the system properties.\n+ */\n+public class SystemProperties\n+{\n+  /**\n+   * Stores the current system properties. This can be modified by\n+   * {@link #setProperties(Properties)}, but will never be null, because\n+   * setProperties(null) sucks in the default properties.\n+   */\n+  private static Properties properties;\n+\n+  /**\n+   * The default properties. Once the default is stabilized,\n+   * it should not be modified;\n+   * instead it is cloned when calling <code>setProperties(null)</code>.\n+   */\n+  private static final Properties defaultProperties = new Properties();\n+\n+  private static native void insertSystemProperties(Properties properties);\n+\n+  static\n+  {\n+    insertSystemProperties(defaultProperties);\n+\n+    // Set base URL if not already set.\n+    if (defaultProperties.get(\"gnu.classpath.home.url\") == null)\n+      defaultProperties.put(\"gnu.classpath.home.url\",\n+\t\t\t    \"file://\"\n+\t\t\t    + defaultProperties.get(\"gnu.classpath.home\")\n+\t                    + \"/lib\");\n+\n+    // Set short name if not already set.\n+    if (defaultProperties.get(\"gnu.classpath.vm.shortname\") == null)\n+      {\n+\tString value = defaultProperties.getProperty(\"java.vm.name\");\n+\tint index = value.lastIndexOf(' ');\n+\tif (index != -1)\n+\t  value = value.substring(index + 1);\n+\tdefaultProperties.put(\"gnu.classpath.vm.shortname\", value);\n+      }\n+\n+    // Network properties\n+    if (defaultProperties.get(\"http.agent\") == null)\n+      {\n+\tString userAgent = (\"gnu-classpath/\"\n+\t                    + defaultProperties.getProperty(\"gnu.classpath.version\")\n+\t                    + \" (\"\n+\t                    + defaultProperties.getProperty(\"gnu.classpath.vm.shortname\")\n+\t                    + \"/\"\n+\t                    + defaultProperties.getProperty(\"java.vm.version\")\n+\t                    + \")\");\n+\t defaultProperties.put(\"http.agent\", userAgent);\n+      }\n+\n+    defaultProperties.put(\"gnu.cpu.endian\",\n+\t\t\t  isWordsBigEndian() ? \"big\" : \"little\");\n+\n+    // XXX FIXME - Temp hack for old systems that set the wrong property\n+    if (defaultProperties.get(\"java.io.tmpdir\") == null)\n+      defaultProperties.put(\"java.io.tmpdir\",\n+                            defaultProperties.get(\"java.tmpdir\"));\n+\n+    // Note that we use clone here and not new.  Some programs assume\n+    // that the system properties do not have a parent.\n+    properties = (Properties) defaultProperties.clone();\n+  }\n+\n+  public static String getProperty(String name)\n+  {\n+    return properties.getProperty(name);\n+  }\n+\n+  public static String getProperty(String name, String defaultValue)\n+  {\n+    return properties.getProperty(name, defaultValue);\n+  }\n+\n+  public static String setProperty(String name, String value)\n+  {\n+    return (String) properties.setProperty(name, value);\n+  }\n+\n+  public static Properties getProperties()\n+  {\n+    return properties;\n+  }\n+\n+  public static void setProperties(Properties properties)\n+  {\n+    if (properties == null)\n+      {\n+        // Note that we use clone here and not new.  Some programs\n+        // assume that the system properties do not have a parent.\n+        properties = (Properties)defaultProperties.clone();\n+      }\n+\n+    SystemProperties.properties = properties;\n+  }\n+\n+  /**\n+   * Detect big-endian systems.\n+   *\n+   * @return true if the system is big-endian.\n+   */\n+  private static native boolean isWordsBigEndian();\n+}"}, {"sha": "d4f610951afbe2cde7a8feca83e2e88a5b74c20a", "filename": "libjava/gnu/classpath/natSystemProperties.cc", "status": "added", "additions": 390, "deletions": 0, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fgnu%2Fclasspath%2FnatSystemProperties.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fgnu%2Fclasspath%2FnatSystemProperties.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2FnatSystemProperties.cc?ref=ee141b882274c83730b641028543aaa2ca59dcc4", "patch": "@@ -0,0 +1,390 @@\n+// natSystemProperties.cc - Implementation of native side of\n+// SystemProperties class.\n+\n+/* Copyright (C) 2005  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <platform.h>\n+\n+#include <stdlib.h>\n+#include <errno.h>\n+\n+#ifdef HAVE_PWD_H\n+#include <pwd.h>\n+#endif\n+\n+#ifdef HAVE_UNAME\n+#include <sys/utsname.h>\n+#endif\n+\n+#ifdef HAVE_LOCALE_H\n+#include <locale.h>\n+#endif\n+\n+#ifdef HAVE_LANGINFO_H\n+#include <langinfo.h>\n+#endif\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+#include <java-props.h>\n+#include <gnu/classpath/SystemProperties.h>\n+#include <java/lang/String.h>\n+#include <jni.h>\n+\n+#ifdef USE_LTDL\n+#include <ltdl.h>\n+\n+void\n+_Jv_SetDLLSearchPath (const char *path)\n+{\n+  lt_dlsetsearchpath (path);\n+}\n+\n+#else\n+\n+void\n+_Jv_SetDLLSearchPath (const char *)\n+{\n+  // Nothing.\n+}\n+\n+#endif /* USE_LTDL */\n+\n+#if ! defined (DEFAULT_FILE_ENCODING) && defined (HAVE_ICONV) \\\n+    && defined (HAVE_NL_LANGINFO)\n+\n+static char *\n+file_encoding ()\n+{\n+  setlocale (LC_CTYPE, \"\");\n+  char *e = nl_langinfo (CODESET);\n+  if (e == NULL || *e == '\\0')\n+    e = \"8859_1\";\n+  return e;\n+}\n+\n+#define DEFAULT_FILE_ENCODING file_encoding ()\n+\n+#endif\n+\n+#ifndef DEFAULT_FILE_ENCODING\n+#define DEFAULT_FILE_ENCODING \"8859_1\"\n+#endif\n+\n+static char *default_file_encoding = DEFAULT_FILE_ENCODING;\n+\n+#if HAVE_GETPWUID_R\n+/* Use overload resolution to find out the signature of getpwuid_r.  */\n+\n+  /* This is Posix getpwuid_r.  */\n+template <typename T_uid, typename T_passwd, typename T_buf, typename T_len>\n+static inline int\n+getpwuid_adaptor(int (*getpwuid_r)(T_uid user_id, T_passwd *pwd_r,\n+\t\t\t\t   T_buf *buf_r, T_len len_r,\n+\t\t\t\t   T_passwd **pwd_entry_ptr),\n+\t\t uid_t user_id, struct passwd *pwd_r,\n+\t\t char *buf_r, size_t len_r, struct passwd **pwd_entry)\n+{\n+  return getpwuid_r (user_id, pwd_r, buf_r, len_r, pwd_entry);\n+}\n+\n+/* This is used on HPUX 10.20 */\n+template <typename T_uid, typename T_passwd, typename T_buf, typename T_len>\n+static inline int\n+getpwuid_adaptor(int (*getpwuid_r)(T_uid user_id, T_passwd *pwd_r,\n+\t\t\t\t   T_buf *buf_r, T_len len_r),\n+\t\t uid_t user_id, struct passwd *pwd_r,\n+\t\t char *buf_r, size_t len_r, struct passwd **pwd_entry)\n+{\n+  return getpwuid_r (user_id, pwd_r, buf_r, len_r);\n+}\n+\n+/* This is used on IRIX 5.2.  */\n+template <typename T_uid, typename T_passwd, typename T_buf, typename T_len>\n+static inline int\n+getpwuid_adaptor(T_passwd * (*getpwuid_r)(T_uid user_id, T_passwd *pwd_r,\n+\t\t\t\t\t  T_buf *buf_r, T_len len_r),\n+\t\t uid_t user_id, struct passwd *pwd_r,\n+\t\t char *buf_r, size_t len_r, struct passwd **pwd_entry)\n+{\n+  *pwd_entry = getpwuid_r (user_id, pwd_r, buf_r, len_r);\n+  return (*pwd_entry == NULL) ? errno : 0;\n+}\n+#endif\n+\n+void\n+gnu::classpath::SystemProperties::insertSystemProperties (java::util::Properties *newprops)\n+{\n+  // A convenience define.\n+#define SET(Prop,Val) \\\n+\tnewprops->put(JvNewStringLatin1 (Prop), JvNewStringLatin1 (Val))\n+\n+  // A mixture of the Java Product Versioning Specification\n+  // (introduced in 1.2), and earlier versioning properties.  Some\n+  // programs rely on seeing values that they expect, so we claim to\n+  // be a 1.4-ish VM for their sake.\n+  SET (\"java.version\", JV_VERSION);\n+  SET (\"java.runtime.version\", JV_VERSION);\n+  SET (\"java.vendor\", \"Free Software Foundation, Inc.\");\n+  SET (\"java.vendor.url\", \"http://gcc.gnu.org/java/\");\n+  SET (\"java.class.version\", \"46.0\");\n+  SET (\"java.vm.specification.version\", \"1.0\");\n+  SET (\"java.vm.specification.name\", \"Java(tm) Virtual Machine Specification\");\n+  SET (\"java.vm.specification.vendor\", \"Sun Microsystems Inc.\");\n+  SET (\"java.vm.version\", __VERSION__);\n+  SET (\"java.vm.vendor\", \"Free Software Foundation, Inc.\");\n+  SET (\"java.vm.name\", \"GNU libgcj\");\n+  SET (\"java.specification.version\", JV_API_VERSION);\n+  SET (\"java.specification.name\", \"Java(tm) Platform API Specification\");\n+  SET (\"java.specification.vendor\", \"Sun Microsystems Inc.\");\n+\n+  char value[100];\n+#define NAME \"GNU libgcj \"\n+  strcpy (value, NAME);\n+  strncpy (value + sizeof (NAME) - 1, __VERSION__,\n+\t   sizeof(value) - sizeof(NAME));\n+  value[sizeof (value) - 1] = '\\0';\n+  jstring version = JvNewStringLatin1 (value);\n+  newprops->put (JvNewStringLatin1 (\"java.fullversion\"), version);\n+  newprops->put (JvNewStringLatin1 (\"java.vm.info\"), version);\n+\n+  // This definition is rather arbitrary: we choose $(prefix).  In\n+  // part we do this because most people specify only --prefix and\n+  // nothing else when installing gcj.  Plus, people are free to\n+  // redefine `java.home' with `-D' if necessary.\n+  SET (\"java.home\", JAVA_HOME);\n+  SET (\"gnu.classpath.home\", PREFIX);\n+  // This is set to $(libdir) because we use this to find .security\n+  // files at runtime.\n+  char val2[sizeof (\"file://\") + sizeof (LIBDIR) + 1];\n+  strcpy (val2, \"file://\");\n+  strcat (val2, LIBDIR);\n+  SET (\"gnu.classpath.home.url\", val2);\n+\n+  SET (\"file.encoding\", default_file_encoding);\n+\n+#ifdef HAVE_UNAME\n+  struct utsname u;\n+  if (! uname (&u))\n+    {\n+      SET (\"os.name\", u.sysname);\n+      SET (\"os.version\", u.release);\n+\n+      // Normalize x86 architecture names to \"i386\" (except on Windows, which \n+      // is handled in win32.cc).\n+      if (u.machine[0] == 'i'\n+\t  && u.machine[1] != 0\n+\t  && u.machine[2] == '8'\n+\t  && u.machine[3] == '6'\n+\t  && u.machine[4] == 0)\n+\tSET (\"os.arch\", \"i386\");\n+      else\n+\tSET (\"os.arch\", u.machine);\n+    }\n+  else\n+    {\n+      SET (\"os.name\", \"unknown\");\n+      SET (\"os.arch\", \"unknown\");\n+      SET (\"os.version\", \"unknown\");\n+    }\n+#endif /* HAVE_UNAME */\n+\n+#ifndef NO_GETUID\n+#ifdef HAVE_PWD_H\n+  uid_t user_id = getuid ();\n+  struct passwd *pwd_entry;\n+\n+#ifdef HAVE_GETPWUID_R\n+  struct passwd pwd_r;\n+  size_t len_r = 200;\n+  char *buf_r = (char *) _Jv_AllocBytes (len_r);\n+\n+  while (buf_r != NULL)\n+    {\n+      int r = getpwuid_adaptor (getpwuid_r, user_id, &pwd_r,\n+\t\t\t\tbuf_r, len_r, &pwd_entry);\n+      if (r == 0)\n+\tbreak;\n+      else if (r != ERANGE)\n+\t{\n+\t  pwd_entry = NULL;\n+\t  break;\n+\t}\n+      len_r *= 2;\n+      buf_r = (char *) _Jv_AllocBytes (len_r);\n+    }\n+#else\n+  pwd_entry = getpwuid (user_id);\n+#endif /* HAVE_GETPWUID_R */\n+\n+  if (pwd_entry != NULL)\n+    {\n+      SET (\"user.name\", pwd_entry->pw_name);\n+      SET (\"user.home\", pwd_entry->pw_dir);\n+    }\n+#endif /* HAVE_PWD_H */\n+#endif /* NO_GETUID */\n+\n+#ifdef HAVE_GETCWD\n+#ifdef HAVE_UNISTD_H\n+  /* Use getcwd to set \"user.dir\". */\n+  int buflen = 250;\n+  char *buffer = (char *) malloc (buflen);\n+  while (buffer != NULL)\n+    {\n+      if (getcwd (buffer, buflen) != NULL)\n+\t{\n+\t  SET (\"user.dir\", buffer);\n+\t  break;\n+\t}\n+      if (errno != ERANGE)\n+\tbreak;\n+      buflen = 2 * buflen;\n+      buffer = (char *) realloc (buffer, buflen);\n+    }\n+  if (buffer != NULL)\n+    free (buffer);\n+#endif /* HAVE_UNISTD_H */\n+#endif /* HAVE_GETCWD */\n+\n+  // Set user locale properties based on setlocale()\n+#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)\n+  // We let the user choose the locale.  However, since Java differs\n+  // from POSIX, we arbitrarily pick LC_MESSAGES as determining the\n+  // Java locale.  We can't use LC_ALL because it might return a full\n+  // list of all the settings.  If we don't have LC_MESSAGES then we\n+  // just default to `en_US'.\n+  setlocale (LC_ALL, \"\");\n+  char *locale = setlocale (LC_MESSAGES, \"\");\n+  if (locale && strlen (locale) >= 2)\n+    {\n+      char buf[3];\n+      buf[2] = '\\0';\n+      // copy the first two chars to user.language\n+      strncpy (buf, locale, 2);\n+      SET (\"user.language\", buf);\n+      // if the next char is a '_', copy the two after that to user.region\n+      locale += 2;\n+      if (locale[0] == '_')\n+        {\n+\t  locale++;\n+\t  strncpy (buf, locale, 2);\n+\t  SET (\"user.region\", buf);\n+        }\n+    }\n+  else\n+#endif /* HAVE_SETLOCALE and HAVE_LC_MESSAGES */\n+    {\n+      SET (\"user.language\", \"en\");\n+      SET (\"user.region\", \"US\");\n+    }  \n+\n+  // The java extensions directory.\n+  SET (\"java.ext.dirs\", JAVA_EXT_DIRS);\n+\n+  // The endorsed directories that libgcj knows about by default.\n+  // This is a way to get other jars into the boot class loader\n+  // without overriding java.endorsed.dirs.\n+  SET (\"gnu.gcj.runtime.endorsed.dirs\", GCJ_ENDORSED_DIRS);\n+\n+  // The path to libgcj's boot classes\n+  SET (\"sun.boot.class.path\", BOOT_CLASS_PATH);\n+\n+  // If there is a default system database, set it.\n+  SET (\"gnu.gcj.precompiled.db.path\", LIBGCJ_DEFAULT_DATABASE);\n+\n+  // Set some properties according to whatever was compiled in with\n+  // `-D'.  Important: after this point, the only properties that\n+  // should be set are those which either the user cannot meaningfully\n+  // override, or which augment whatever value the user has provided.\n+  for (int i = 0; i < _Jv_Properties_Count; ++i)\n+    {\n+      const char *s, *p;\n+      // Find the `='.\n+      for (s = p = _Jv_Compiler_Properties[i]; *s && *s != '='; ++s)\n+\t;\n+      jstring name = JvNewStringLatin1 (p, s - p);\n+      jstring val = JvNewStringLatin1 (*s == '=' ? s + 1 : s);\n+      newprops->put (name, val);\n+    }\n+\n+  // Set the system properties from the user's environment.\n+#ifndef DISABLE_GETENV_PROPERTIES\n+  if (_Jv_Environment_Properties)\n+    {\n+      size_t i = 0;\n+\n+      while (_Jv_Environment_Properties[i].key)\n+\t{\n+\t  SET (_Jv_Environment_Properties[i].key, \n+\t       _Jv_Environment_Properties[i].value);\n+\t  i++;\n+\t}\n+    }\n+#endif\n+\n+  // The name used to invoke this process (argv[0] in C).\n+  SET (\"gnu.gcj.progname\", _Jv_GetSafeArg (0));\n+\n+  // Allow platform specific settings and overrides.\n+  _Jv_platform_initProperties (newprops);\n+\n+  // If java.library.path is set, tell libltdl so we search the new\n+  // directories as well.  FIXME: does this work properly on Windows?\n+  ::java::lang::String *path = newprops->getProperty(JvNewStringLatin1(\"java.library.path\"));\n+  if (path)\n+    {\n+      char *val = (char *) _Jv_Malloc (JvGetStringUTFLength (path) + 1);\n+      jsize total = JvGetStringUTFRegion (path, 0, path->length(), val);\n+      val[total] = '\\0';\n+      _Jv_SetDLLSearchPath (val);\n+      _Jv_Free (val);\n+    }\n+  else\n+    {\n+      // Set a value for user code to see.\n+      // FIXME: JDK sets this to the actual path used, including\n+      // LD_LIBRARY_PATH, etc.\n+      SET (\"java.library.path\", \"\");\n+    }\n+\n+  // If java.class.path is still not set then set it according to the\n+  // CLASSPATH environment variable if given.  See gij.cc main () and\n+  // prims.cc _Jv_CreateJavaVM () for all the ways this could have\n+  // been set much earlier.\n+  // If CLASSPATH isn't set or if the path is empty fall back to \".\"\n+  path = newprops->getProperty(JvNewStringLatin1(\"java.class.path\"));\n+  if (!path)\n+    {\n+      char *classpath = getenv(\"CLASSPATH\");\n+      if (classpath && classpath[0] != 0)\n+\t{\n+\t  path = JvNewStringLatin1 (classpath);\n+\t  newprops->put(JvNewStringLatin1 (\"java.class.path\"), path);\n+\t}\n+    }\n+\n+  if (!path || path->length() == 0)\n+    SET (\"java.class.path\", \".\");\n+}\n+\n+jboolean\n+gnu::classpath::SystemProperties::isWordsBigEndian (void)\n+{\n+  union\n+  {\n+    long lval;\n+    char cval;\n+  } u;\n+\n+  u.lval = 1;\n+  return u.cval == 0;\n+}\n+"}, {"sha": "858b331c62b4eb9b7c1641cb78d82343ff04313e", "filename": "libjava/java/lang/Runtime.java", "status": "modified", "additions": 8, "deletions": 91, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fjava%2Flang%2FRuntime.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fjava%2Flang%2FRuntime.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FRuntime.java?ref=ee141b882274c83730b641028543aaa2ca59dcc4", "patch": "@@ -1,5 +1,5 @@\n /* Runtime.java -- access to the VM process\n-   Copyright (C) 1998, 2002, 2003, 2004 Free Software Foundation\n+   Copyright (C) 1998, 2002, 2003, 2004, 2005 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -38,13 +38,14 @@\n \n package java.lang;\n \n+import gnu.classpath.SystemProperties;\n+\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.util.HashSet;\n import java.util.Iterator;\n-import java.util.Properties;\n import java.util.Set;\n import java.util.StringTokenizer;\n \n@@ -72,47 +73,9 @@\n    */\n   static SecurityManager securityManager;\n \n-  /**\n-   * The default properties defined by the system. This is likewise located\n-   * here instead of in Runtime, to avoid bootstrap issues; it is package\n-   * visible to avoid overhead in java.lang. Note that System will add a\n-   * few more properties to this collection, but that after that, it is\n-   * treated as read-only.\n-   *\n-   * No matter what class you start initialization with, it defers to the\n-   * superclass, therefore Object.&lt;clinit&gt; will be the first Java code\n-   * executed. From there, the bootstrap sequence, up to the point that\n-   * native libraries are loaded (as of March 24, when I traced this\n-   * manually) is as follows:\n-   *\n-   * Object.&lt;clinit&gt; uses a String literal, possibly triggering initialization\n-   *  String.&lt;clinit&gt; calls WeakHashMap.&lt;init&gt;, triggering initialization\n-   *   AbstractMap, WeakHashMap, WeakHashMap$1 have no dependencies\n-   *  String.&lt;clinit&gt; calls CaseInsensitiveComparator.&lt;init&gt;, triggering\n-   *      initialization\n-   *   CaseInsensitiveComparator has no dependencies\n-   * Object.&lt;clinit&gt; calls System.loadLibrary, triggering initialization\n-   *  System.&lt;clinit&gt; calls System.loadLibrary\n-   *  System.loadLibrary calls Runtime.getRuntime, triggering initialization\n-   *   Runtime.&lt;clinit&gt; calls Properties.&lt;init&gt;, triggering initialization\n-   *    Dictionary, Hashtable, and Properties have no dependencies\n-   *   Runtime.&lt;clinit&gt; calls VMRuntime.insertSystemProperties, triggering\n-   *      initialization of VMRuntime; the VM must make sure that there are\n-   *      not any harmful dependencies\n-   *   Runtime.&lt;clinit&gt; calls Runtime.&lt;init&gt;\n-   *    Runtime.&lt;init&gt; calls StringTokenizer.&lt;init&gt;, triggering initialization\n-   *     StringTokenizer has no dependencies\n-   *  System.loadLibrary calls Runtime.loadLibrary\n-   *   Runtime.loadLibrary should be able to load the library, although it\n-   *       will probably set off another string of initializations from\n-   *       ClassLoader first\n-   */\n-  static Properties defaultProperties = new Properties();\n-\n   static\n   {\n     init();\n-    insertSystemProperties(defaultProperties);\n   }\n \n   /**\n@@ -134,8 +97,7 @@\n   private boolean finalizeOnExit;\n \n   /**\n-   * The one and only runtime instance. This must appear after the default\n-   * properties have been initialized by the VM.\n+   * The one and only runtime instance.\n    */\n   private static final Runtime current = new Runtime();\n \n@@ -146,12 +108,11 @@ private Runtime()\n   {\n     if (current != null)\n       throw new InternalError(\"Attempt to recreate Runtime\");\n-\n+    \n     // We don't use libpath in the libgcj implementation.  We still\n     // set it to something to allow the various synchronizations to\n     // work.\n     libpath = new String[0];\n-\n   }\n \n   /**\n@@ -322,15 +283,15 @@ public void addShutdownHook(Thread hook)\n     if (sm != null)\n       sm.checkPermission(new RuntimePermission(\"shutdownHooks\"));\n     if (hook.isAlive() || hook.getThreadGroup() == null)\n-      throw new IllegalArgumentException();\n+      throw new IllegalArgumentException(\"The hook thread \" + hook + \" must not have been already run or started\");\n     synchronized (libpath)\n       {\n         if (exitSequence != null)\n-          throw new IllegalStateException();\n+          throw new IllegalStateException(\"The Virtual Machine is exiting. It is not possible anymore to add any hooks\");\n         if (shutdownHooks == null)\n           shutdownHooks = new HashSet(); // Lazy initialization.\n         if (! shutdownHooks.add(hook))\n-          throw new IllegalArgumentException();\n+          throw new IllegalArgumentException(hook.toString() + \" had already been inserted\");\n       }\n   }\n \n@@ -740,48 +701,4 @@ public OutputStream getLocalizedOutputStream(OutputStream out)\n    */\n   native Process execInternal(String[] cmd, String[] env, File dir)\n     throws IOException;\n-    \n-\n-  /**\n-   * Get the system properties. This is done here, instead of in System,\n-   * because of the bootstrap sequence. Note that the native code should\n-   * not try to use the Java I/O classes yet, as they rely on the properties\n-   * already existing. The only safe method to use to insert these default\n-   * system properties is {@link Properties#setProperty(String, String)}.\n-   *\n-   * <p>These properties MUST include:\n-   * <dl>\n-   * <dt>java.version         <dd>Java version number\n-   * <dt>java.vendor          <dd>Java vendor specific string\n-   * <dt>java.vendor.url      <dd>Java vendor URL\n-   * <dt>java.home            <dd>Java installation directory\n-   * <dt>java.vm.specification.version <dd>VM Spec version\n-   * <dt>java.vm.specification.vendor  <dd>VM Spec vendor\n-   * <dt>java.vm.specification.name    <dd>VM Spec name\n-   * <dt>java.vm.version      <dd>VM implementation version\n-   * <dt>java.vm.vendor       <dd>VM implementation vendor\n-   * <dt>java.vm.name         <dd>VM implementation name\n-   * <dt>java.specification.version    <dd>Java Runtime Environment version\n-   * <dt>java.specification.vendor     <dd>Java Runtime Environment vendor\n-   * <dt>java.specification.name       <dd>Java Runtime Environment name\n-   * <dt>java.class.version   <dd>Java class version number\n-   * <dt>java.class.path      <dd>Java classpath\n-   * <dt>java.library.path    <dd>Path for finding Java libraries\n-   * <dt>java.io.tmpdir       <dd>Default temp file path\n-   * <dt>java.compiler        <dd>Name of JIT to use\n-   * <dt>java.ext.dirs        <dd>Java extension path\n-   * <dt>os.name              <dd>Operating System Name\n-   * <dt>os.arch              <dd>Operating System Architecture\n-   * <dt>os.version           <dd>Operating System Version\n-   * <dt>file.separator       <dd>File separator (\"/\" on Unix)\n-   * <dt>path.separator       <dd>Path separator (\":\" on Unix)\n-   * <dt>line.separator       <dd>Line separator (\"\\n\" on Unix)\n-   * <dt>user.name            <dd>User account name\n-   * <dt>user.home            <dd>User home directory\n-   * <dt>user.dir             <dd>User's current working directory\n-   * </dl>\n-   *\n-   * @param p the Properties object to insert the system properties into\n-   */\n-  static native void insertSystemProperties(Properties p);\n } // class Runtime"}, {"sha": "b621f265ff90787a412443f4f2c2cc9070c24da9", "filename": "libjava/java/lang/System.java", "status": "modified", "additions": 21, "deletions": 94, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fjava%2Flang%2FSystem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fjava%2Flang%2FSystem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSystem.java?ref=ee141b882274c83730b641028543aaa2ca59dcc4", "patch": "@@ -1,5 +1,5 @@\n /* System.java -- useful methods to interface with the system\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n    Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -39,7 +39,7 @@\n \n package java.lang;\n \n-import gnu.classpath.Configuration;\n+import gnu.classpath.SystemProperties;\n \n import java.io.BufferedInputStream;\n import java.io.BufferedOutputStream;\n@@ -65,77 +65,6 @@\n   // WARNING: System is a CORE class in the bootstrap cycle. See the comments\n   // in vm/reference/java/lang/Runtime for implications of this fact.\n \n-  /**\n-   * Add to the default properties. The field is stored in Runtime, because\n-   * of the bootstrap sequence; but this adds several useful properties to\n-   * the defaults. Once the default is stabilized, it should not be modified;\n-   * instead it is passed as a parent properties for fast setup of the\n-   * defaults when calling <code>setProperties(null)</code>.\n-   */\n-  static\n-  {\n-    // Note that this loadLibrary() takes precedence over the one in Object,\n-    // since Object.<clinit> is waiting for System.<clinit> to complete\n-    // first; but loading a library twice is harmless.\n-    if (Configuration.INIT_LOAD_LIBRARY)\n-      loadLibrary(\"javalang\");\n-\n-    Properties defaultProperties = Runtime.defaultProperties;\n-\n-    // Set base URL if not already set.\n-    if (defaultProperties.get(\"gnu.classpath.home.url\") == null)\n-      defaultProperties.put(\"gnu.classpath.home.url\",\n-\t\t\t    \"file://\"\n-\t\t\t    + defaultProperties.get(\"gnu.classpath.home\")\n-\t\t\t    + \"/lib\");\n-\n-    // Set short name if not already set.\n-    if (defaultProperties.get(\"gnu.classpath.vm.shortname\") == null)\n-      {\n-\tString value = defaultProperties.getProperty(\"java.vm.name\");\n-\tint index = value.lastIndexOf(' ');\n-\tif (index != -1)\n-\t  value = value.substring(index + 1);\n-\tdefaultProperties.put(\"gnu.classpath.vm.shortname\", value);\n-      }\n-\n-    // Network properties\n-    if (defaultProperties.get(\"http.agent\") == null)\n-      {\n-\tString userAgent\n-\t  = (\"gnu-classpath/\"\n-\t     + defaultProperties.getProperty(\"gnu.classpath.version\")\n-\t     + \" (\"\n-\t     + defaultProperties.getProperty(\"gnu.classpath.vm.shortname\")\n-\t     + \"/\"\n-\t     + defaultProperties.getProperty(\"java.vm.version\")\n-\t     + \")\");\n-\tdefaultProperties.put(\"http.agent\", userAgent);\n-      }\n-\n-    defaultProperties.put(\"gnu.cpu.endian\",\n-\t\t\t  isWordsBigEndian() ? \"big\" : \"little\");\n-\n-    // GCJ LOCAL: Classpath sets common encoding aliases here.\n-    // Since we don't (yet) have gnu.java.io.EncodingManager, these\n-    // are a waste of time and just slow down system startup.\n-\n-    // XXX FIXME - Temp hack for old systems that set the wrong property\n-    if (defaultProperties.get(\"java.io.tmpdir\") == null)\n-      defaultProperties.put(\"java.io.tmpdir\",\n-                            defaultProperties.get(\"java.tmpdir\"));\n-  }\n-\n-  /**\n-   * Stores the current system properties. This can be modified by\n-   * {@link #setProperties(Properties)}, but will never be null, because\n-   * setProperties(null) sucks in the default properties.\n-   */\n-  // Note that we use clone here and not new.  Some programs assume\n-  // that the system properties do not have a parent.\n-  static Properties properties\n-    = (Properties) Runtime.defaultProperties.clone();\n-\n   /**\n    * The standard InputStream. This is assigned at startup and starts its\n    * life perfectly valid. Although it is marked final, you can change it\n@@ -246,7 +175,7 @@ public static void setErr(PrintStream err)\n    * @param sm the new SecurityManager\n    * @throws SecurityException if permission is denied\n    */\n-  public synchronized static void setSecurityManager(SecurityManager sm)\n+  public static synchronized void setSecurityManager(SecurityManager sm)\n   {\n     // Implementation note: the field lives in Runtime because of bootstrap\n     // initialization issues. This method is synchronized so that no other\n@@ -383,7 +312,7 @@ public static Properties getProperties()\n     SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n     if (sm != null)\n       sm.checkPropertiesAccess();\n-    return properties;\n+    return SystemProperties.getProperties();\n   }\n \n   /**\n@@ -400,13 +329,7 @@ public static void setProperties(Properties properties)\n     SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n     if (sm != null)\n       sm.checkPropertiesAccess();\n-    if (properties == null)\n-      {\n-\t// Note that we use clone here and not new.  Some programs\n-\t// assume that the system properties do not have a parent.\n-\tproperties = (Properties) Runtime.defaultProperties.clone();\n-      }\n-    System.properties = properties;\n+    SystemProperties.setProperties(properties);\n   }\n \n   /**\n@@ -426,7 +349,7 @@ public static String getProperty(String key)\n       sm.checkPropertyAccess(key);\n     else if (key.length() == 0)\n       throw new IllegalArgumentException(\"key can't be empty\");\n-    return properties.getProperty(key);\n+    return SystemProperties.getProperty(key);\n   }\n \n   /**\n@@ -445,7 +368,7 @@ public static String getProperty(String key, String def)\n     SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n     if (sm != null)\n       sm.checkPropertyAccess(key);\n-    return properties.getProperty(key, def);\n+    return SystemProperties.getProperty(key, def);\n   }\n \n   /**\n@@ -465,25 +388,28 @@ public static String setProperty(String key, String value)\n     SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n     if (sm != null)\n       sm.checkPermission(new PropertyPermission(key, \"write\"));\n-    return (String) properties.setProperty(key, value);\n+    return SystemProperties.setProperty(key, value);\n   }\n \n   /**\n    * Gets the value of an environment variable.\n    *\n    * @param name the name of the environment variable\n-   * @return the string value of the variable\n+   * @return the string value of the variable or null when the\n+   *         environment variable is not defined.\n    * @throws NullPointerException\n    * @throws SecurityException if permission is denied\n    * @since 1.5\n+   * @specnote This method was deprecated in some JDK releases, but\n+   *           was restored in 1.5.\n    */\n   public static String getenv(String name)\n   {\n     if (name == null)\n       throw new NullPointerException();\n     SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n     if (sm != null)\n-      sm.checkPermission(new RuntimePermission(\"getenv.\"+name));\n+      sm.checkPermission(new RuntimePermission(\"getenv.\" + name));\n     return getenv0(name);\n   }\n \n@@ -553,6 +479,10 @@ public static void runFinalizersOnExit(boolean finalizeOnExit)\n    * check may be performed, <code>checkLink</code>. This just calls\n    * <code>Runtime.getRuntime().load(filename)</code>.\n    *\n+   * <p>\n+   * The library is loaded using the class loader associated with the\n+   * class associated with the invoking method.\n+   *\n    * @param filename the code file to load\n    * @throws SecurityException if permission is denied\n    * @throws UnsatisfiedLinkError if the file cannot be loaded\n@@ -568,6 +498,10 @@ public static void load(String filename)\n    * check may be performed, <code>checkLink</code>. This just calls\n    * <code>Runtime.getRuntime().load(filename)</code>.\n    *\n+   * <p>\n+   * The library is loaded using the class loader associated with the\n+   * class associated with the invoking method.\n+   *\n    * @param libname the library file to load\n    * @throws SecurityException if permission is denied\n    * @throws UnsatisfiedLinkError if the file cannot be loaded\n@@ -591,13 +525,6 @@ public static String mapLibraryName(String libname)\n     return Runtime.nativeGetLibname(\"\", libname);\n   }\n \n-  /**\n-   * Detect big-endian systems.\n-   *\n-   * @return true if the system is big-endian.\n-   */\n-  static native boolean isWordsBigEndian();\n-\n   /**\n    * Set {@link #in} to a new InputStream.\n    *"}, {"sha": "d69b543141b7f24649b206ff82d7e5ef4ede73d2", "filename": "libjava/java/lang/Throwable.java", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fjava%2Flang%2FThrowable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fjava%2Flang%2FThrowable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThrowable.java?ref=ee141b882274c83730b641028543aaa2ca59dcc4", "patch": "@@ -37,6 +37,8 @@\n \n package java.lang;\n \n+import gnu.classpath.SystemProperties;\n+\n import java.io.PrintStream;\n import java.io.PrintWriter;\n import java.io.Serializable;\n@@ -170,7 +172,7 @@ public Throwable(String message)\n   public Throwable(String message, Throwable cause)\n   {\n     this(message);\n-    initCause(cause);\n+    this.cause = cause;\n   }\n \n   /**\n@@ -401,13 +403,7 @@ public void printStackTrace (PrintWriter pw)\n    */\n   private static class StaticData\n   {\n-    static final String nl;\n-\n-    static\n-    {\n-      // Access package private properties field to prevent Security check.\n-      nl = System.properties.getProperty(\"line.separator\");\n-    }\n+    static final String nl = SystemProperties.getProperty(\"line.separator\");\n   }\n \n   // Create whole stack trace in a stringbuffer so we don't have to print"}, {"sha": "3df5cdd4d11fd0614af051ff86f56d6fb99bc035", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 0, "deletions": 335, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=ee141b882274c83730b641028543aaa2ca59dcc4", "patch": "@@ -24,7 +24,6 @@ details.  */\n #include <gnu/gcj/runtime/FileDeleter.h>\n #include <gnu/gcj/runtime/FinalizerThread.h>\n #include <java/io/File.h>\n-#include <java/util/Properties.h>\n #include <java/util/TimeZone.h>\n #include <java/lang/StringBuffer.h>\n #include <java/lang/Process.h>\n@@ -38,10 +37,6 @@ details.  */\n #endif\n #include <errno.h>\n \n-#ifdef HAVE_UNAME\n-#include <sys/utsname.h>\n-#endif\n-\n #ifdef HAVE_LOCALE_H\n #include <locale.h>\n #endif\n@@ -83,12 +78,6 @@ _Jv_FindSymbolInExecutable (const char *symname)\n   return data.result;\n }\n \n-void\n-_Jv_SetDLLSearchPath (const char *path)\n-{\n-  lt_dlsetsearchpath (path);\n-}\n-\n #else\n \n void *\n@@ -97,12 +86,6 @@ _Jv_FindSymbolInExecutable (const char *)\n   return NULL;\n }\n \n-void\n-_Jv_SetDLLSearchPath (const char *)\n-{\n-  // Nothing.\n-}\n-\n #endif /* USE_LTDL */\n \n \f\n@@ -296,324 +279,6 @@ java::lang::Runtime::traceMethodCalls (jboolean)\n   // Do nothing.\n }\n \n-#if ! defined (DEFAULT_FILE_ENCODING) && defined (HAVE_ICONV) \\\n-    && defined (HAVE_NL_LANGINFO)\n-\n-static char *\n-file_encoding ()\n-{\n-  setlocale (LC_CTYPE, \"\");\n-  char *e = nl_langinfo (CODESET);\n-  if (e == NULL || *e == '\\0')\n-    e = \"8859_1\";\n-  return e;\n-}\n-\n-#define DEFAULT_FILE_ENCODING file_encoding ()\n-\n-#endif\n-\n-#ifndef DEFAULT_FILE_ENCODING\n-#define DEFAULT_FILE_ENCODING \"8859_1\"\n-#endif\n-\n-static char *default_file_encoding = DEFAULT_FILE_ENCODING;\n-\n-#if HAVE_GETPWUID_R\n-/* Use overload resolution to find out the signature of getpwuid_r.  */\n-\n-  /* This is Posix getpwuid_r.  */\n-template <typename T_uid, typename T_passwd, typename T_buf, typename T_len>\n-static inline int\n-getpwuid_adaptor(int (*getpwuid_r)(T_uid user_id, T_passwd *pwd_r,\n-\t\t\t\t   T_buf *buf_r, T_len len_r,\n-\t\t\t\t   T_passwd **pwd_entry_ptr),\n-\t\t uid_t user_id, struct passwd *pwd_r,\n-\t\t char *buf_r, size_t len_r, struct passwd **pwd_entry)\n-{\n-  return getpwuid_r (user_id, pwd_r, buf_r, len_r, pwd_entry);\n-}\n-\n-/* This is used on HPUX 10.20 */\n-template <typename T_uid, typename T_passwd, typename T_buf, typename T_len>\n-static inline int\n-getpwuid_adaptor(int (*getpwuid_r)(T_uid user_id, T_passwd *pwd_r,\n-\t\t\t\t   T_buf *buf_r, T_len len_r),\n-\t\t uid_t user_id, struct passwd *pwd_r,\n-\t\t char *buf_r, size_t len_r, struct passwd **pwd_entry)\n-{\n-  return getpwuid_r (user_id, pwd_r, buf_r, len_r);\n-}\n-\n-/* This is used on IRIX 5.2.  */\n-template <typename T_uid, typename T_passwd, typename T_buf, typename T_len>\n-static inline int\n-getpwuid_adaptor(T_passwd * (*getpwuid_r)(T_uid user_id, T_passwd *pwd_r,\n-\t\t\t\t\t  T_buf *buf_r, T_len len_r),\n-\t\t uid_t user_id, struct passwd *pwd_r,\n-\t\t char *buf_r, size_t len_r, struct passwd **pwd_entry)\n-{\n-  *pwd_entry = getpwuid_r (user_id, pwd_r, buf_r, len_r);\n-  return (*pwd_entry == NULL) ? errno : 0;\n-}\n-#endif\n-\n-void\n-java::lang::Runtime::insertSystemProperties (java::util::Properties *newprops)\n-{\n-  // A convenience define.\n-#define SET(Prop,Val) \\\n-\tnewprops->put(JvNewStringLatin1 (Prop), JvNewStringLatin1 (Val))\n-\n-  // A mixture of the Java Product Versioning Specification\n-  // (introduced in 1.2), and earlier versioning properties.  Some\n-  // programs rely on seeing values that they expect, so we claim to\n-  // be a 1.4-ish VM for their sake.\n-  SET (\"java.version\", JV_VERSION);\n-  SET (\"java.runtime.version\", JV_VERSION);\n-  SET (\"java.vendor\", \"Free Software Foundation, Inc.\");\n-  SET (\"java.vendor.url\", \"http://gcc.gnu.org/java/\");\n-  SET (\"java.class.version\", \"46.0\");\n-  SET (\"java.vm.specification.version\", \"1.0\");\n-  SET (\"java.vm.specification.name\", \"Java(tm) Virtual Machine Specification\");\n-  SET (\"java.vm.specification.vendor\", \"Sun Microsystems Inc.\");\n-  SET (\"java.vm.version\", __VERSION__);\n-  SET (\"java.vm.vendor\", \"Free Software Foundation, Inc.\");\n-  SET (\"java.vm.name\", \"GNU libgcj\");\n-  SET (\"java.specification.version\", JV_API_VERSION);\n-  SET (\"java.specification.name\", \"Java(tm) Platform API Specification\");\n-  SET (\"java.specification.vendor\", \"Sun Microsystems Inc.\");\n-\n-  char value[100];\n-#define NAME \"GNU libgcj \"\n-  strcpy (value, NAME);\n-  strncpy (value + sizeof (NAME) - 1, __VERSION__,\n-\t   sizeof(value) - sizeof(NAME));\n-  value[sizeof (value) - 1] = '\\0';\n-  jstring version = JvNewStringLatin1 (value);\n-  newprops->put (JvNewStringLatin1 (\"java.fullversion\"), version);\n-  newprops->put (JvNewStringLatin1 (\"java.vm.info\"), version);\n-\n-  // This definition is rather arbitrary: we choose $(prefix).  In\n-  // part we do this because most people specify only --prefix and\n-  // nothing else when installing gcj.  Plus, people are free to\n-  // redefine `java.home' with `-D' if necessary.\n-  SET (\"java.home\", JAVA_HOME);\n-  SET (\"gnu.classpath.home\", PREFIX);\n-  // This is set to $(libdir) because we use this to find .security\n-  // files at runtime.\n-  char val2[sizeof (\"file://\") + sizeof (LIBDIR) + 1];\n-  strcpy (val2, \"file://\");\n-  strcat (val2, LIBDIR);\n-  SET (\"gnu.classpath.home.url\", val2);\n-\n-  SET (\"file.encoding\", default_file_encoding);\n-\n-#ifdef HAVE_UNAME\n-  struct utsname u;\n-  if (! uname (&u))\n-    {\n-      SET (\"os.name\", u.sysname);\n-      SET (\"os.version\", u.release);\n-\n-      // Normalize x86 architecture names to \"i386\" (except on Windows, which \n-      // is handled in win32.cc).\n-      if (u.machine[0] == 'i'\n-\t  && u.machine[1] != 0\n-\t  && u.machine[2] == '8'\n-\t  && u.machine[3] == '6'\n-\t  && u.machine[4] == 0)\n-\tSET (\"os.arch\", \"i386\");\n-      else\n-\tSET (\"os.arch\", u.machine);\n-    }\n-  else\n-    {\n-      SET (\"os.name\", \"unknown\");\n-      SET (\"os.arch\", \"unknown\");\n-      SET (\"os.version\", \"unknown\");\n-    }\n-#endif /* HAVE_UNAME */\n-\n-#ifndef NO_GETUID\n-#ifdef HAVE_PWD_H\n-  uid_t user_id = getuid ();\n-  struct passwd *pwd_entry;\n-\n-#ifdef HAVE_GETPWUID_R\n-  struct passwd pwd_r;\n-  size_t len_r = 200;\n-  char *buf_r = (char *) _Jv_AllocBytes (len_r);\n-\n-  while (buf_r != NULL)\n-    {\n-      int r = getpwuid_adaptor (getpwuid_r, user_id, &pwd_r,\n-\t\t\t\tbuf_r, len_r, &pwd_entry);\n-      if (r == 0)\n-\tbreak;\n-      else if (r != ERANGE)\n-\t{\n-\t  pwd_entry = NULL;\n-\t  break;\n-\t}\n-      len_r *= 2;\n-      buf_r = (char *) _Jv_AllocBytes (len_r);\n-    }\n-#else\n-  pwd_entry = getpwuid (user_id);\n-#endif /* HAVE_GETPWUID_R */\n-\n-  if (pwd_entry != NULL)\n-    {\n-      SET (\"user.name\", pwd_entry->pw_name);\n-      SET (\"user.home\", pwd_entry->pw_dir);\n-    }\n-#endif /* HAVE_PWD_H */\n-#endif /* NO_GETUID */\n-\n-#ifdef HAVE_GETCWD\n-#ifdef HAVE_UNISTD_H\n-  /* Use getcwd to set \"user.dir\". */\n-  int buflen = 250;\n-  char *buffer = (char *) malloc (buflen);\n-  while (buffer != NULL)\n-    {\n-      if (getcwd (buffer, buflen) != NULL)\n-\t{\n-\t  SET (\"user.dir\", buffer);\n-\t  break;\n-\t}\n-      if (errno != ERANGE)\n-\tbreak;\n-      buflen = 2 * buflen;\n-      buffer = (char *) realloc (buffer, buflen);\n-    }\n-  if (buffer != NULL)\n-    free (buffer);\n-#endif /* HAVE_UNISTD_H */\n-#endif /* HAVE_GETCWD */\n-\n-  // Set user locale properties based on setlocale()\n-#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)\n-  // We let the user choose the locale.  However, since Java differs\n-  // from POSIX, we arbitrarily pick LC_MESSAGES as determining the\n-  // Java locale.  We can't use LC_ALL because it might return a full\n-  // list of all the settings.  If we don't have LC_MESSAGES then we\n-  // just default to `en_US'.\n-  setlocale (LC_ALL, \"\");\n-  char *locale = setlocale (LC_MESSAGES, \"\");\n-  if (locale && strlen (locale) >= 2)\n-    {\n-      char buf[3];\n-      buf[2] = '\\0';\n-      // copy the first two chars to user.language\n-      strncpy (buf, locale, 2);\n-      SET (\"user.language\", buf);\n-      // if the next char is a '_', copy the two after that to user.region\n-      locale += 2;\n-      if (locale[0] == '_')\n-        {\n-\t  locale++;\n-\t  strncpy (buf, locale, 2);\n-\t  SET (\"user.region\", buf);\n-        }\n-    }\n-  else\n-#endif /* HAVE_SETLOCALE and HAVE_LC_MESSAGES */\n-    {\n-      SET (\"user.language\", \"en\");\n-      SET (\"user.region\", \"US\");\n-    }  \n-\n-  // The java extensions directory.\n-  SET (\"java.ext.dirs\", JAVA_EXT_DIRS);\n-\n-  // The endorsed directories that libgcj knows about by default.\n-  // This is a way to get other jars into the boot class loader\n-  // without overriding java.endorsed.dirs.\n-  SET (\"gnu.gcj.runtime.endorsed.dirs\", GCJ_ENDORSED_DIRS);\n-\n-  // The path to libgcj's boot classes\n-  SET (\"sun.boot.class.path\", BOOT_CLASS_PATH);\n-\n-  // If there is a default system database, set it.\n-  SET (\"gnu.gcj.precompiled.db.path\", LIBGCJ_DEFAULT_DATABASE);\n-\n-  // Set some properties according to whatever was compiled in with\n-  // `-D'.  Important: after this point, the only properties that\n-  // should be set are those which either the user cannot meaningfully\n-  // override, or which augment whatever value the user has provided.\n-  for (int i = 0; i < _Jv_Properties_Count; ++i)\n-    {\n-      const char *s, *p;\n-      // Find the `='.\n-      for (s = p = _Jv_Compiler_Properties[i]; *s && *s != '='; ++s)\n-\t;\n-      jstring name = JvNewStringLatin1 (p, s - p);\n-      jstring val = JvNewStringLatin1 (*s == '=' ? s + 1 : s);\n-      newprops->put (name, val);\n-    }\n-\n-  // Set the system properties from the user's environment.\n-#ifndef DISABLE_GETENV_PROPERTIES\n-  if (_Jv_Environment_Properties)\n-    {\n-      size_t i = 0;\n-\n-      while (_Jv_Environment_Properties[i].key)\n-\t{\n-\t  SET (_Jv_Environment_Properties[i].key, \n-\t       _Jv_Environment_Properties[i].value);\n-\t  i++;\n-\t}\n-    }\n-#endif\n-\n-  // The name used to invoke this process (argv[0] in C).\n-  SET (\"gnu.gcj.progname\", _Jv_GetSafeArg (0));\n-\n-  // Allow platform specific settings and overrides.\n-  _Jv_platform_initProperties (newprops);\n-\n-  // If java.library.path is set, tell libltdl so we search the new\n-  // directories as well.  FIXME: does this work properly on Windows?\n-  String *path = newprops->getProperty(JvNewStringLatin1(\"java.library.path\"));\n-  if (path)\n-    {\n-      char *val = (char *) _Jv_Malloc (JvGetStringUTFLength (path) + 1);\n-      jsize total = JvGetStringUTFRegion (path, 0, path->length(), val);\n-      val[total] = '\\0';\n-      _Jv_SetDLLSearchPath (val);\n-      _Jv_Free (val);\n-    }\n-  else\n-    {\n-      // Set a value for user code to see.\n-      // FIXME: JDK sets this to the actual path used, including\n-      // LD_LIBRARY_PATH, etc.\n-      SET (\"java.library.path\", \"\");\n-    }\n-\n-  // If java.class.path is still not set then set it according to the\n-  // CLASSPATH environment variable if given.  See gij.cc main () and\n-  // prims.cc _Jv_CreateJavaVM () for all the ways this could have\n-  // been set much earlier.\n-  // If CLASSPATH isn't set or if the path is empty fall back to \".\"\n-  path = newprops->getProperty(JvNewStringLatin1(\"java.class.path\"));\n-  if (!path)\n-    {\n-      char *classpath = getenv(\"CLASSPATH\");\n-      if (classpath && classpath[0] != 0)\n-\t{\n-\t  path = JvNewStringLatin1 (classpath);\n-\t  newprops->put(JvNewStringLatin1 (\"java.class.path\"), path);\n-\t}\n-    }\n-\n-  if (!path || path->length() == 0)\n-    SET (\"java.class.path\", \".\");\n-}\n-\n java::lang::Process *\n java::lang::Runtime::execInternal (jstringArray cmd,\n \t\t\t\t   jstringArray env,"}, {"sha": "0a4c8b9a0f78efd26c5d816689012d7c5fcc165b", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee141b882274c83730b641028543aaa2ca59dcc4/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=ee141b882274c83730b641028543aaa2ca59dcc4", "patch": "@@ -130,19 +130,6 @@ java::lang::System::identityHashCode (jobject obj)\n   return _Jv_HashCode (obj);\n }\n \n-jboolean\n-java::lang::System::isWordsBigEndian (void)\n-{\n-  union\n-  {\n-    long lval;\n-    char cval;\n-  } u;\n-\n-  u.lval = 1;\n-  return u.cval == 0;\n-}\n-\n jstring\n java::lang::System::getenv0 (jstring name)\n {"}]}