{"sha": "64cfdfb8d2970cd392b78601b7a2684a81f22352", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRjZmRmYjhkMjk3MGNkMzkyYjc4NjAxYjdhMjY4NGE4MWYyMjM1Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-02-10T08:24:15Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-02-10T08:24:15Z"}, "message": "class.c (dfs_modify_vtables): Tweak calculation of functions to override.\n\n\t* class.c (dfs_modify_vtables): Tweak calculation of functions to\n\toverride.\n\nFrom-SVN: r31886", "tree": {"sha": "d75884f5bf8a0be173228aea5571f02082ecd474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d75884f5bf8a0be173228aea5571f02082ecd474"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64cfdfb8d2970cd392b78601b7a2684a81f22352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64cfdfb8d2970cd392b78601b7a2684a81f22352", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64cfdfb8d2970cd392b78601b7a2684a81f22352", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64cfdfb8d2970cd392b78601b7a2684a81f22352/comments", "author": null, "committer": null, "parents": [{"sha": "ae32f34a96614b4288d7bc57dd0eba14a618d08b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae32f34a96614b4288d7bc57dd0eba14a618d08b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae32f34a96614b4288d7bc57dd0eba14a618d08b"}], "stats": {"total": 97, "additions": 91, "deletions": 6}, "files": [{"sha": "bd471d28eb5e2437c75a545765262a478afdd8fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64cfdfb8d2970cd392b78601b7a2684a81f22352/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64cfdfb8d2970cd392b78601b7a2684a81f22352/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=64cfdfb8d2970cd392b78601b7a2684a81f22352", "patch": "@@ -1,3 +1,8 @@\n+2000-02-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (dfs_modify_vtables): Tweak calculation of functions to\n+\toverride.\n+\n 2000-02-08  Nathan Sidwell  <nathan@acm.org>\n \n \t* typeck.c (strip_all_pointer_quals): Use TYPE_MAIN_VARIANT, to"}, {"sha": "9b0bae5b360fd6fa91de8869aa20908402534a83", "filename": "gcc/cp/class.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64cfdfb8d2970cd392b78601b7a2684a81f22352/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64cfdfb8d2970cd392b78601b7a2684a81f22352/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=64cfdfb8d2970cd392b78601b7a2684a81f22352", "patch": "@@ -3009,9 +3009,9 @@ dfs_modify_vtables (binfo, data)\n \n       t = (tree) data;\n \n-      /* If we're support RTTI then we always need a new vtable to point\n-\t to the RTTI information.  Under the new ABI we may need a new\n-\t vtable to contain vcall and vbase offsets.  */\n+      /* If we're supporting RTTI then we always need a new vtable to\n+\t point to the RTTI information.  Under the new ABI we may need\n+\t a new vtable to contain vcall and vbase offsets.  */\n       if (flag_rtti || flag_new_abi)\n \tmake_new_vtable (t, binfo);\n       \n@@ -3031,6 +3031,7 @@ dfs_modify_vtables (binfo, data)\n \t  tree overrider;\n \t  tree vindex;\n \t  tree delta;\n+\t  int i;\n \n \t  /* Find the function which originally caused this vtable\n \t     entry to be present.  */\n@@ -3039,9 +3040,12 @@ dfs_modify_vtables (binfo, data)\n \t  b = dfs_walk (binfo, dfs_find_base, NULL, DECL_VIRTUAL_CONTEXT (fn));\n \t  fn = skip_rtti_stuff (TYPE_BINFO (BINFO_TYPE (b)),\n \t\t\t\tBINFO_TYPE (b),\n-\t\t\t\tNULL);\n-\t  while (!tree_int_cst_equal (DECL_VINDEX (BV_FN (fn)), vindex))\n-\t    fn = TREE_CHAIN (fn);\n+\t\t\t\t&i);\n+\t  while (i < TREE_INT_CST_LOW (vindex))\n+\t    {\n+\t      fn = TREE_CHAIN (fn);\n+\t      ++i;\n+\t    }\n \t  fn = BV_FN (fn);\n \n \t  /* Handle the case of a virtual function defined in BINFO"}, {"sha": "c812d30091ada7aaf99ca6a524f21a8ec259f971", "filename": "gcc/testsuite/g++.old-deja/g++.other/vtbl2.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64cfdfb8d2970cd392b78601b7a2684a81f22352/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvtbl2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64cfdfb8d2970cd392b78601b7a2684a81f22352/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvtbl2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvtbl2.C?ref=64cfdfb8d2970cd392b78601b7a2684a81f22352", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 8 Feb 2000 <nathan@acm.org>\n+\n+// vtable construction reorganisation broke this\n+\n+// execution test\n+\n+#include <stdio.h>\n+\n+static int fail = 0;\n+\n+void bad (char const *name)\n+{\n+  printf (\"Bad %s\\n\", name);\n+  fail = 1;\n+}\n+void ok (char const *name)\n+{\n+  printf (\"Ok %s\\n\", name);\n+}\n+\n+struct Core\n+{\n+  virtual ~Core ();\n+  virtual void Wibble () {bad (__PRETTY_FUNCTION__);}\n+  virtual void Wobble () {bad (__PRETTY_FUNCTION__);}\n+  virtual void Bogus  () {bad (__PRETTY_FUNCTION__);}\n+};\n+struct Side\n+{\n+  virtual ~Side ();\n+  virtual void Arfle () {bad (__PRETTY_FUNCTION__);}\n+  virtual void Barfle () {bad (__PRETTY_FUNCTION__);}\n+  virtual void Gloop () {bad (__PRETTY_FUNCTION__);}\n+  virtual void Glorp () {bad (__PRETTY_FUNCTION__);}\n+  virtual void Glump () {bad (__PRETTY_FUNCTION__);}\n+  virtual void Bogus  () {bad (__PRETTY_FUNCTION__);}  \n+};\n+struct Base : Core\n+{\n+  virtual ~Base ();\n+  virtual void Bink () {bad (__PRETTY_FUNCTION__);}\n+  virtual void Bonk () {bad (__PRETTY_FUNCTION__);}\n+  virtual void  Bogus () {bad (__PRETTY_FUNCTION__);}  \n+};\n+struct Multi : Base, Side\n+{\n+  virtual ~Multi ();\n+  virtual void Stomped () {ok (__PRETTY_FUNCTION__);}\n+  virtual void Bunk () {bad (__PRETTY_FUNCTION__);}\n+  virtual void Bogus () {bad (__PRETTY_FUNCTION__);}  \n+};\n+struct Trail : Multi\n+{\n+  virtual ~Trail ();\n+};\n+Core::~Core () {}\n+Side::~Side () {}\n+Base::~Base () {}\n+Multi::~Multi () {}\n+Trail::~Trail () {}\n+\n+void foo (Multi *ptr)\n+{\n+  ptr->Stomped ();\n+}\n+\n+int main ()\n+{\n+  Multi m;\n+  Trail t;\n+  \n+  foo (&m);\n+  foo (&t);\n+  return fail != 0;\n+}"}]}