{"sha": "5d6b3bbaef30f53d73326835c15aa415a1d5c69e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ2YjNiYmFlZjMwZjUzZDczMzI2ODM1YzE1YWE0MTVhMWQ1YzY5ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-06-13T06:10:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-06-13T06:10:49Z"}, "message": "re PR tree-optimization/21994 (complex throwing functions cause ICE)\n\n        PR tree-opt/21994\n        * tree-complex.c (update_complex_components_on_edge): New.\n        (update_parameter_components): Use it.\n        (update_phi_components): Likewise.\n        (expand_complex_move): Likewise for is_ctrl_altering_stmt.\n\nFrom-SVN: r100870", "tree": {"sha": "2cc7fe2ec7b30592e87987c0a3dc3bce61c3446b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cc7fe2ec7b30592e87987c0a3dc3bce61c3446b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d6b3bbaef30f53d73326835c15aa415a1d5c69e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d6b3bbaef30f53d73326835c15aa415a1d5c69e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d6b3bbaef30f53d73326835c15aa415a1d5c69e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d6b3bbaef30f53d73326835c15aa415a1d5c69e/comments", "author": null, "committer": null, "parents": [{"sha": "a165e746471b32ea442c325732f5c2907034db45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a165e746471b32ea442c325732f5c2907034db45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a165e746471b32ea442c325732f5c2907034db45"}], "stats": {"total": 92, "additions": 64, "deletions": 28}, "files": [{"sha": "a7d4228e39725c46655cf60ffb2a102c1977d28a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6b3bbaef30f53d73326835c15aa415a1d5c69e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6b3bbaef30f53d73326835c15aa415a1d5c69e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d6b3bbaef30f53d73326835c15aa415a1d5c69e", "patch": "@@ -1,3 +1,11 @@\n+2005-06-12  Richard Henderson  <rth@redhat.com>\n+\n+\tPR tree-opt/21994\n+\t* tree-complex.c (update_complex_components_on_edge): New.\n+\t(update_parameter_components): Use it.\n+\t(update_phi_components): Likewise.\n+\t(expand_complex_move): Likewise for is_ctrl_altering_stmt.\n+\n 2005-06-12  James A. Morrison  <phython@gcc.gnu.org>\n \n \tPR tree-optimization/14796"}, {"sha": "1fa76a900c3aebc0366af0da0b368a470abe776c", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 56, "deletions": 28, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6b3bbaef30f53d73326835c15aa415a1d5c69e/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6b3bbaef30f53d73326835c15aa415a1d5c69e/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=5d6b3bbaef30f53d73326835c15aa415a1d5c69e", "patch": "@@ -441,6 +441,31 @@ update_complex_components (block_stmt_iterator *bsi, tree stmt, tree r, tree i)\n   bsi_insert_after (bsi, x, BSI_NEW_STMT);\n }\n \n+static void\n+update_complex_components_on_edge (edge e, tree stmt, tree lhs, tree r, tree i)\n+{\n+  unsigned int uid = var_ann (SSA_NAME_VAR (lhs))->uid;\n+  tree v, x;\n+\n+  v = VEC_index (tree, complex_variable_components, 2*uid);\n+  x = build2 (MODIFY_EXPR, TREE_TYPE (v), v, r);\n+  if (stmt)\n+    {\n+      SET_EXPR_LOCUS (x, EXPR_LOCUS (stmt));\n+      TREE_BLOCK (x) = TREE_BLOCK (stmt);\n+    }\n+  bsi_insert_on_edge (e, x);\n+\n+  v = VEC_index (tree, complex_variable_components, 2*uid + 1);\n+  x = build2 (MODIFY_EXPR, TREE_TYPE (v), v, i);\n+  if (stmt)\n+    {\n+      SET_EXPR_LOCUS (x, EXPR_LOCUS (stmt));\n+      TREE_BLOCK (x) = TREE_BLOCK (stmt);\n+    }\n+  bsi_insert_on_edge (e, x);\n+}\n+\n /* Update an assignment to a complex variable in place.  */\n \n static void\n@@ -472,23 +497,17 @@ update_parameter_components (void)\n   for (parm = DECL_ARGUMENTS (cfun->decl); parm ; parm = TREE_CHAIN (parm))\n     {\n       tree type = TREE_TYPE (parm);\n-      tree ssa_name, x, y;\n-      unsigned int uid;\n+      tree ssa_name, r, i;\n \n       if (TREE_CODE (type) != COMPLEX_TYPE || !is_gimple_reg (parm))\n \tcontinue;\n \n       type = TREE_TYPE (type);\n       ssa_name = default_def (parm);\n-      uid = var_ann (parm)->uid;\n-\n-      x = VEC_index (tree, complex_variable_components, 2*uid);\n-      y = build1 (REALPART_EXPR, type, ssa_name);\n-      bsi_insert_on_edge (entry_edge, build2 (MODIFY_EXPR, type, x, y));\n \n-      x = VEC_index (tree, complex_variable_components, 2*uid + 1);\n-      y = build1 (IMAGPART_EXPR, type, ssa_name);\n-      bsi_insert_on_edge (entry_edge, build2 (MODIFY_EXPR, type, x, y));\n+      r = build1 (REALPART_EXPR, type, ssa_name);\n+      i = build1 (IMAGPART_EXPR, type, ssa_name);\n+      update_complex_components_on_edge (entry_edge, NULL, ssa_name, r, i);\n     }\n }\n \n@@ -503,27 +522,18 @@ update_phi_components (basic_block bb)\n   for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     if (is_complex_reg (PHI_RESULT (phi)))\n       {\n-\tunsigned int i, n, uid;\n-\ttree real, imag, type;\n-\n-\tuid = var_ann (SSA_NAME_VAR (PHI_RESULT (phi)))->uid;\n-\treal = VEC_index (tree, complex_variable_components, 2*uid);\n-\timag = VEC_index (tree, complex_variable_components, 2*uid + 1);\n-\ttype = TREE_TYPE (real);\n+\tunsigned int i, n;\n+\ttree lhs = PHI_RESULT (phi);\n \n \tfor (i = 0, n = PHI_NUM_ARGS (phi); i < n; ++i)\n \t  {\n \t    edge e = PHI_ARG_EDGE (phi, i);\n \t    tree arg = PHI_ARG_DEF (phi, i);\n-\t    tree x;\n+\t    tree r, i;\n \n-\t    x = extract_component (NULL, arg, 0, false);\n-\t    if (real != x)\n-\t      bsi_insert_on_edge (e, build2 (MODIFY_EXPR, type, real, x));\n-\n-\t    x = extract_component (NULL, arg, 1, false);\n-\t    if (imag != x)\n-\t      bsi_insert_on_edge (e, build2 (MODIFY_EXPR, type, imag, x));\n+\t    r = extract_component (NULL, arg, 0, false);\n+\t    i = extract_component (NULL, arg, 1, false);\n+\t    update_complex_components_on_edge (e, NULL, lhs, r, i);\n \t  }\n       }\n }\n@@ -555,10 +565,28 @@ expand_complex_move (block_stmt_iterator *bsi, tree stmt, tree type,\n \n   if (TREE_CODE (lhs) == SSA_NAME)\n     {\n-      if (TREE_CODE (rhs) == CALL_EXPR || TREE_SIDE_EFFECTS (rhs))\n+      if (is_ctrl_altering_stmt (bsi_stmt (*bsi)))\n+\t{\n+\t  edge_iterator ei;\n+\t  edge e;\n+\n+\t  /* The value is not assigned on the exception edges, so we need not\n+\t     concern ourselves there.  We do need to update on the fallthru\n+\t     edge.  Find it.  */\n+\t  FOR_EACH_EDGE (e, ei, bsi->bb->succs)\n+\t    if (e->flags & EDGE_FALLTHRU)\n+\t      goto found_fallthru;\n+\t  gcc_unreachable ();\n+\tfound_fallthru:\n+\n+\t  r = build1 (REALPART_EXPR, inner_type, lhs);\n+\t  i = build1 (IMAGPART_EXPR, inner_type, lhs);\n+\t  update_complex_components_on_edge (e, stmt, lhs, r, i);\n+\t}\n+      else if (TREE_CODE (rhs) == CALL_EXPR || TREE_SIDE_EFFECTS (rhs))\n \t{\n-\t  r = build1 (REALPART_EXPR, inner_type, unshare_expr (lhs));\n-\t  i = build1 (IMAGPART_EXPR, inner_type, unshare_expr (lhs));\n+\t  r = build1 (REALPART_EXPR, inner_type, lhs);\n+\t  i = build1 (IMAGPART_EXPR, inner_type, lhs);\n \t  update_complex_components (bsi, stmt, r, i);\n \t}\n       else"}]}