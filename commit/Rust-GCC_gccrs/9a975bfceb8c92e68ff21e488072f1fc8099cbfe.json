{"sha": "9a975bfceb8c92e68ff21e488072f1fc8099cbfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE5NzViZmNlYjhjOTJlNjhmZjIxZTQ4ODA3MmYxZmM4MDk5Y2JmZQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2018-05-24T13:05:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-24T13:05:08Z"}, "message": "[Ada] Memory leak mixing limited and nonlimited functions\n\nThis patch fixes a memory leak. If a build-in-place function with a result\nwhose size is not known at the call site is called, and that function calls a\nnon-build-in-place function that allocates on the secondary stack, the\nsecondary stack was not necessarily cleaned up, which caused a memory leak.\n\nThe following program should print:\n\"Current allocated space :  0 bytes\"\n(among other things) in the loop.\n\n./bip_leak-main > log\ngrep 'Current allocated' log\n  Current allocated space :  0 bytes\n  Current allocated space :  0 bytes\n  Current allocated space :  0 bytes\n\nwith Ada.Finalization;\npackage BIP_Leak is\n   subtype Limited_Controlled is Ada.Finalization.Limited_Controlled;\n\n   type Nonlim_Controlled is new Ada.Finalization.Controlled with null record;\n   type Needs_Fin is record\n      X : Nonlim_Controlled;\n   end record;\n\n   type Lim_Controlled is new Limited_Controlled with null record;\n\n   function Return_Lim_Controlled (Source : Boolean)\n                       return Lim_Controlled;\n\n   procedure Dump_SS;\n\nend BIP_Leak;\n\nwith Ada.Text_IO;\npragma Warnings (Off);\nwith System.Secondary_Stack;\npragma Warnings (On);\npackage body BIP_Leak is\n   function Transform (X : Needs_Fin) return Lim_Controlled is\n   begin\n      return (Limited_Controlled with null record);\n   end;\n\n   function Return_Needs_Fin (I : Boolean) return Needs_Fin is\n     THR : Needs_Fin;\n   begin\n      return THR;\n   end;\n\n   function Return_Lim_Controlled (Source : Boolean)\n                       return Lim_Controlled is\n   begin\n      return Transform (Return_Needs_Fin (Source));\n   end Return_Lim_Controlled;\n\n   procedure Dump_SS_Instance is\n     new System.Secondary_Stack.SS_Info (Ada.Text_IO.Put_Line);\n   procedure Dump_SS renames Dump_SS_Instance;\n\nend BIP_Leak;\n\nprocedure BIP_Leak.Main is\nbegin\n   for Count in 1 .. 350_000 loop\n      declare\n         Msg : constant Lim_Controlled := Return_Lim_Controlled (True);\n      begin\n         if Count mod 100_000 = 0 then\n            Dump_SS;\n         end if;\n      end;\n   end loop;\nend BIP_Leak.Main;\n\n2018-05-24  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch7.adb (Expand_Cleanup_Actions): Create a mark unconditionally\n\tfor build-in-place functions with a caller-unknown-size result.\n\t(Create_Finalizer): For build-in-place functions with a\n\tcaller-unknown-size result, check at run time whether we need to\n\trelease the secondary stack.\n\nFrom-SVN: r260650", "tree": {"sha": "b75ad48607dbc63b9e0928f8a57175450775e213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b75ad48607dbc63b9e0928f8a57175450775e213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a975bfceb8c92e68ff21e488072f1fc8099cbfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a975bfceb8c92e68ff21e488072f1fc8099cbfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a975bfceb8c92e68ff21e488072f1fc8099cbfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a975bfceb8c92e68ff21e488072f1fc8099cbfe/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2bb0bbfc6766d392ab1069de05a9426c80d4efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2bb0bbfc6766d392ab1069de05a9426c80d4efc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2bb0bbfc6766d392ab1069de05a9426c80d4efc"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "7640204749fe7a0404fb831ce6d84f81dfb95896", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a975bfceb8c92e68ff21e488072f1fc8099cbfe/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a975bfceb8c92e68ff21e488072f1fc8099cbfe/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9a975bfceb8c92e68ff21e488072f1fc8099cbfe", "patch": "@@ -1,3 +1,11 @@\n+2018-05-24  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch7.adb (Expand_Cleanup_Actions): Create a mark unconditionally\n+\tfor build-in-place functions with a caller-unknown-size result.\n+\t(Create_Finalizer): For build-in-place functions with a\n+\tcaller-unknown-size result, check at run time whether we need to\n+\trelease the secondary stack.\n+\n 2018-05-24  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma): Use the full view of an internally"}, {"sha": "d27150fa91fb2a0179ee1e3341a788d9106d486d", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a975bfceb8c92e68ff21e488072f1fc8099cbfe/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a975bfceb8c92e68ff21e488072f1fc8099cbfe/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=9a975bfceb8c92e68ff21e488072f1fc8099cbfe", "patch": "@@ -1777,10 +1777,49 @@ package body Exp_Ch7 is\n             Set_At_End_Proc (HSS, Empty);\n          end if;\n \n-         --  Release the secondary stack mark\n+         --  Release the secondary stack\n \n          if Present (Mark_Id) then\n-            Append_To (Finalizer_Stmts, Build_SS_Release_Call (Loc, Mark_Id));\n+            declare\n+               Release : Node_Id :=\n+                 Build_SS_Release_Call (Loc, Mark_Id);\n+            begin\n+               --  If this is a build-in-place function, then we need to\n+               --  release the secondary stack, unless we are returning on the\n+               --  secondary stack. We wrap the release call in:\n+               --    if BIP_Alloc_Form /= Secondary_Stack then ...\n+               --  If we are returning on the secondary stack, then releasing\n+               --  is the caller's responsibility (or caller's caller, or ...).\n+\n+               if Nkind (N) = N_Subprogram_Body then\n+                  declare\n+                     Spec_Id : constant Entity_Id :=\n+                                 Unique_Defining_Entity (N);\n+                     BIP_SS  : constant Boolean :=\n+                                 Is_Build_In_Place_Function (Spec_Id)\n+                                   and then Needs_BIP_Alloc_Form (Spec_Id);\n+                  begin\n+                     if BIP_SS then\n+                        Release :=\n+                          Make_If_Statement (Loc,\n+                            Condition =>\n+                              Make_Op_Ne (Loc,\n+                                Left_Opnd  =>\n+                                  New_Occurrence_Of\n+                                    (Build_In_Place_Formal\n+                                      (Spec_Id, BIP_Alloc_Form), Loc),\n+                                Right_Opnd =>\n+                                  Make_Integer_Literal (Loc,\n+                                    UI_From_Int (BIP_Allocation_Form'Pos\n+                                                   (Secondary_Stack)))),\n+\n+                            Then_Statements => New_List (Release));\n+                     end if;\n+                  end;\n+               end if;\n+\n+               Append_To (Finalizer_Stmts, Release);\n+            end;\n          end if;\n \n          --  Protect the statements with abort defer/undefer. This is only when\n@@ -4327,10 +4366,22 @@ package body Exp_Ch7 is\n                                    and then Is_Task_Allocation_Block (N);\n       Is_Task_Body           : constant Boolean :=\n                                  Nkind (Original_Node (N)) = N_Task_Body;\n+\n+      --  We mark the secondary stack if it is used in this construct, and\n+      --  we're not returning a function result on the secondary stack, except\n+      --  that a build-in-place function that might or might not return on the\n+      --  secondary stack always needs a mark. A run-time test is required in\n+      --  the case where the build-in-place function has a BIP_Alloc extra\n+      --  parameter (see Create_Finalizer).\n+\n       Needs_Sec_Stack_Mark   : constant Boolean :=\n-                                 Uses_Sec_Stack (Scop)\n-                                   and then\n-                                     not Sec_Stack_Needed_For_Return (Scop);\n+                                   (Uses_Sec_Stack (Scop)\n+                                     and then\n+                                       not Sec_Stack_Needed_For_Return (Scop))\n+                                 or else\n+                                   (Is_Build_In_Place_Function (Scop)\n+                                     and then Needs_BIP_Alloc_Form (Scop));\n+\n       Needs_Custom_Cleanup   : constant Boolean :=\n                                  Nkind (N) = N_Block_Statement\n                                    and then Present (Cleanup_Actions (N));"}]}