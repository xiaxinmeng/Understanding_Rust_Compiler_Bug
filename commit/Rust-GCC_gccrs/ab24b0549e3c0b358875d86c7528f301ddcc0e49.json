{"sha": "ab24b0549e3c0b358875d86c7528f301ddcc0e49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIyNGIwNTQ5ZTNjMGIzNTg4NzVkODZjNzUyOGYzMDFkZGNjMGU0OQ==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-27T18:05:17Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:15Z"}, "message": "Fix up returns and call expressions to actually work", "tree": {"sha": "553d8258f093e7ec9b9c03728ed718373e3dc33e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/553d8258f093e7ec9b9c03728ed718373e3dc33e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab24b0549e3c0b358875d86c7528f301ddcc0e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab24b0549e3c0b358875d86c7528f301ddcc0e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab24b0549e3c0b358875d86c7528f301ddcc0e49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab24b0549e3c0b358875d86c7528f301ddcc0e49/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f772d22974d1985f0de002437938480f60f01d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f772d22974d1985f0de002437938480f60f01d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f772d22974d1985f0de002437938480f60f01d7"}], "stats": {"total": 197, "additions": 165, "deletions": 32}, "files": [{"sha": "d759ffcb33da23d5285a143cedff9d330cc06f76", "filename": "gcc/rust/backend/cscope.h", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab24b0549e3c0b358875d86c7528f301ddcc0e49/gcc%2Frust%2Fbackend%2Fcscope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab24b0549e3c0b358875d86c7528f301ddcc0e49/gcc%2Frust%2Fbackend%2Fcscope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Fcscope.h?ref=ab24b0549e3c0b358875d86c7528f301ddcc0e49", "patch": "@@ -28,21 +28,39 @@ class Scope\n     types.Pop ();\n   }\n \n-  void PushCurrentFunction (std::string name, Bfunction *fn)\n+  void PushCurrentFunction (std::string name, Bfunction *fn, Btype *retType,\n+\t\t\t    Bvariable *retDecl)\n   {\n-    InsertFunction (name, fn);\n     fns.push_back (fn);\n+    fnRetType.push_back (retType);\n+    fnRetDecl.push_back (retDecl);\n   }\n \n   Bfunction *PopCurrentFunction ()\n   {\n     auto ret = fns.back ();\n     fns.pop_back ();\n+    fnRetType.pop_back ();\n+    fnRetDecl.pop_back ();\n     return ret;\n   }\n \n   Bfunction *GetCurrentFndecl () { return fns.back (); }\n \n+  Btype *GetCurrentFnRetType () { return fnRetType.back (); }\n+\n+  Bvariable *GetCurrentFnRetDecl () { return fnRetDecl.back (); }\n+\n+  Btype *GetFnRetType (Bfunction *fn)\n+  {\n+    auto it = fnRetTypeMapping.find (fn);\n+    if (it == fnRetTypeMapping.end ())\n+      {\n+\treturn NULL;\n+      }\n+    return it->second;\n+  }\n+\n   void PushBlock (Bblock *block)\n   {\n     blocks.push_back (block);\n@@ -63,11 +81,14 @@ class Scope\n     return ret;\n   }\n \n+  Bblock *CurBlock () { return blocks.back (); }\n+\n   void AddStatement (Bstatement *stmt) { context.back ().push_back (stmt); }\n \n-  void InsertFunction (std::string name, Bfunction *fn)\n+  void InsertFunction (std::string name, Bfunction *fn, Btype *retType)\n   {\n     fndecls.Insert (name, fn);\n+    fnRetTypeMapping[fn] = retType;\n   }\n \n   bool LookupFunction (std::string name, Bfunction **fn)\n@@ -95,6 +116,9 @@ class Scope\n   ::std::vector<Bfunction *> fns;\n   ::std::vector<Bblock *> blocks;\n   ::std::vector< ::std::vector<Bstatement *> > context;\n+  ::std::vector< ::Btype *> fnRetType;\n+  ::std::vector< ::Bvariable *> fnRetDecl;\n+  ::std::map<Bfunction *, Btype *> fnRetTypeMapping;\n \n   Analysis::Scope<Bfunction *> fndecls;\n   Analysis::Scope<Bvariable *> vars;"}, {"sha": "480fa9f75de64b3dbc95accbed5046e26f8ba1dd", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 138, "deletions": 29, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab24b0549e3c0b358875d86c7528f301ddcc0e49/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab24b0549e3c0b358875d86c7528f301ddcc0e49/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=ab24b0549e3c0b358875d86c7528f301ddcc0e49", "patch": "@@ -35,17 +35,41 @@ Compilation::go ()\n   scope.Push ();\n \n   // builtin primitives\n-  scope.InsertType (\"i64\", backend->integer_type (false, 64));\n-  scope.InsertType (\"i32\", backend->integer_type (false, 32));\n-  scope.InsertType (\"i16\", backend->integer_type (false, 16));\n-  scope.InsertType (\"i8\", backend->integer_type (false, 8));\n-  scope.InsertType (\"u64\", backend->integer_type (true, 64));\n-  scope.InsertType (\"u32\", backend->integer_type (true, 32));\n-  scope.InsertType (\"u16\", backend->integer_type (true, 16));\n-  scope.InsertType (\"u8\", backend->integer_type (true, 8));\n+  scope.InsertType (\"bool\",\n+\t\t    backend->named_type (\"bool\", backend->bool_type (),\n+\t\t\t\t\t Linemap::predeclared_location ()));\n+  scope.InsertType (\"i64\",\n+\t\t    backend->named_type (\"i64\",\n+\t\t\t\t\t backend->integer_type (false, 64),\n+\t\t\t\t\t Linemap::predeclared_location ()));\n+  scope.InsertType (\"i32\",\n+\t\t    backend->named_type (\"i32\",\n+\t\t\t\t\t backend->integer_type (false, 32),\n+\t\t\t\t\t Linemap::predeclared_location ()));\n+  scope.InsertType (\"i16\",\n+\t\t    backend->named_type (\"i16\",\n+\t\t\t\t\t backend->integer_type (false, 16),\n+\t\t\t\t\t Linemap::predeclared_location ()));\n+  scope.InsertType (\"i8\",\n+\t\t    backend->named_type (\"i8\", backend->integer_type (false, 8),\n+\t\t\t\t\t Linemap::predeclared_location ()));\n+  scope.InsertType (\"u64\",\n+\t\t    backend->named_type (\"u64\",\n+\t\t\t\t\t backend->integer_type (true, 64),\n+\t\t\t\t\t Linemap::predeclared_location ()));\n+  scope.InsertType (\"u32\",\n+\t\t    backend->named_type (\"u32\",\n+\t\t\t\t\t backend->integer_type (true, 32),\n+\t\t\t\t\t Linemap::predeclared_location ()));\n+  scope.InsertType (\"u16\",\n+\t\t    backend->named_type (\"u16\",\n+\t\t\t\t\t backend->integer_type (true, 16),\n+\t\t\t\t\t Linemap::predeclared_location ()));\n+  scope.InsertType (\"u8\",\n+\t\t    backend->named_type (\"u8\", backend->integer_type (true, 8),\n+\t\t\t\t\t Linemap::predeclared_location ()));\n   scope.InsertType (\"f64\", backend->float_type (64));\n   scope.InsertType (\"f32\", backend->float_type (32));\n-  scope.InsertType (\"bool\", backend->bool_type ());\n \n   for (auto &item : crate.items)\n     item->accept_vis (*this);\n@@ -178,6 +202,7 @@ Compilation::visit (AST::PathInExpression &path)\n       auto expr\n \t= backend->function_code_expression (fn, path.get_locus_slow ());\n       exprs.push_back (expr);\n+      translatedType = scope.GetFnRetType (fn);\n       return;\n     }\n }\n@@ -293,11 +318,35 @@ Compilation::visit (AST::ArithmeticOrLogicalExpr &expr)\n     case AST::ArithmeticOrLogicalExpr::ADD:\n       op = OPERATOR_PLUS;\n       break;\n-\n-      // TODO fill in the other operators\n-\n+    case AST::ArithmeticOrLogicalExpr::SUBTRACT:\n+      op = OPERATOR_MINUS;\n+      break;\n+    case AST::ArithmeticOrLogicalExpr::MULTIPLY:\n+      op = OPERATOR_MULT;\n+      break;\n+    case AST::ArithmeticOrLogicalExpr::DIVIDE:\n+      op = OPERATOR_DIV;\n+      break;\n+    case AST::ArithmeticOrLogicalExpr::MODULUS:\n+      op = OPERATOR_MOD;\n+      break;\n+    case AST::ArithmeticOrLogicalExpr::BITWISE_AND:\n+      op = OPERATOR_AND;\n+      break;\n+    case AST::ArithmeticOrLogicalExpr::BITWISE_OR:\n+      op = OPERATOR_OR;\n+      break;\n+    case AST::ArithmeticOrLogicalExpr::BITWISE_XOR:\n+      op = OPERATOR_XOR;\n+      break;\n+    case AST::ArithmeticOrLogicalExpr::LEFT_SHIFT:\n+      op = OPERATOR_LSHIFT;\n+      break;\n+    case AST::ArithmeticOrLogicalExpr::RIGHT_SHIFT:\n+      op = OPERATOR_RSHIFT;\n+      break;\n     default:\n-      rust_error_at (expr.get_locus_slow (), \"failed to compile expression\");\n+      rust_fatal_error (expr.get_locus_slow (), \"failed to compile operator\");\n       return;\n     }\n \n@@ -414,13 +463,14 @@ void\n Compilation::visit (AST::CallExpr &expr)\n {\n   Bexpression *fn = NULL;\n+  translatedType = NULL;\n   VISIT_POP (expr.function->get_locus_slow (), expr.function, fn, exprs);\n   if (fn == NULL)\n     {\n-      printf (\"expr.function = %s\\n\", expr.function->as_string ().c_str ());\n       rust_error_at (expr.function->get_locus_slow (), \"failed to resolve\");\n       return;\n     }\n+  Btype *returnType = translatedType; // can be NULL\n \n   std::vector<Bexpression *> args;\n   for (auto &param : expr.params)\n@@ -491,7 +541,8 @@ Compilation::visit (AST::ReturnExpr &expr)\n   VISIT_POP (expr.return_expr->get_locus_slow (), expr.return_expr, ret, exprs);\n   if (ret == NULL)\n     {\n-      rust_error_at (expr.return_expr->get_locus_slow (), \"failed to compile\");\n+      rust_fatal_error (expr.return_expr->get_locus_slow (),\n+\t\t\t\"failed to compile\");\n       return;\n     }\n \n@@ -505,42 +556,65 @@ Compilation::visit (AST::ReturnExpr &expr)\n void\n Compilation::visit (AST::UnsafeBlockExpr &expr)\n {}\n+\n void\n Compilation::visit (AST::LoopExpr &expr)\n {}\n+\n void\n Compilation::visit (AST::WhileLoopExpr &expr)\n {}\n+\n void\n Compilation::visit (AST::WhileLetLoopExpr &expr)\n {}\n void\n Compilation::visit (AST::ForLoopExpr &expr)\n {}\n+\n void\n Compilation::visit (AST::IfExpr &expr)\n-{}\n+{\n+  printf (\"IfExpr %s\\n\", expr.as_string ().c_str ());\n+}\n void\n Compilation::visit (AST::IfExprConseqElse &expr)\n-{}\n+{\n+  printf (\"IfExprConseqElse %s\\n\", expr.as_string ().c_str ());\n+}\n void\n Compilation::visit (AST::IfExprConseqIf &expr)\n-{}\n+{\n+  printf (\"IfExprConseqIf %s\\n\", expr.as_string ().c_str ());\n+}\n void\n Compilation::visit (AST::IfExprConseqIfLet &expr)\n-{}\n+{\n+  printf (\"IfExprConseqIfLet %s\\n\", expr.as_string ().c_str ());\n+}\n void\n Compilation::visit (AST::IfLetExpr &expr)\n-{}\n+{\n+  printf (\"IfLetExpr %s\\n\", expr.as_string ().c_str ());\n+}\n void\n Compilation::visit (AST::IfLetExprConseqElse &expr)\n-{}\n+{\n+  printf (\"IfLetExprConseqElse %s\\n\", expr.as_string ().c_str ());\n+}\n+\n void\n Compilation::visit (AST::IfLetExprConseqIf &expr)\n-{}\n+{\n+  printf (\"IfLetExprConseqIf %s\\n\", expr.as_string ().c_str ());\n+}\n+\n void\n Compilation::visit (AST::IfLetExprConseqIfLet &expr)\n-{}\n+{\n+  printf (\"IfLetExprConseqIfLet %s\\n\", expr.as_string ().c_str ());\n+}\n+\n // void Compilation::visit(MatchCase& match_case) {}\n void\n Compilation::visit (AST::MatchCaseBlockExpr &match_case)\n@@ -639,19 +713,24 @@ Compilation::visit (AST::Function &function)\n       function.return_type->accept_vis (*this);\n       if (translatedType == NULL)\n \t{\n-\t  rust_error_at (function.locus,\n-\t\t\t \"failed to generate type for function\");\n+\t  rust_fatal_error (function.locus,\n+\t\t\t    \"failed to generate type for function\");\n \t  return;\n \t}\n+      returnType = translatedType;\n+\n+      // add into the results:\n+      results.push_back (\n+\tBackend::Btyped_identifier (\"_\", translatedType, Location ()));\n     }\n \n-  Btype *fntype = backend->function_type (receiver, parameters, results,\n-\t\t\t\t\t  returnType, function.locus);\n+  Btype *fntype = backend->function_type (receiver, parameters, results, NULL,\n+\t\t\t\t\t  function.locus);\n   Bfunction *fndecl\n     = backend->function (fntype, function.function_name, \"\" /* asm_name */,\n \t\t\t 0 /* flags */, function.locus);\n \n-  scope.PushCurrentFunction (function.function_name, fndecl);\n+  scope.InsertFunction (function.function_name, fndecl, returnType);\n   scope.Push ();\n \n   // setup the params\n@@ -695,8 +774,22 @@ Compilation::visit (AST::Function &function)\n \n   auto code_block = backend->block (fndecl, enclosingScope, vars,\n \t\t\t\t    start_location, end_location);\n+\n   scope.PushBlock (code_block);\n \n+  Bvariable *retDecl = NULL;\n+  if (function.has_function_return_type ())\n+    {\n+      bool address_is_taken = false;\n+      Bstatement *ret_var_stmt = NULL;\n+      retDecl = backend->temporary_variable (fndecl, code_block, returnType,\n+\t\t\t\t\t     NULL, address_is_taken,\n+\t\t\t\t\t     function.locus, &ret_var_stmt);\n+      scope.AddStatement (ret_var_stmt);\n+    }\n+  scope.PushCurrentFunction (function.function_name, fndecl, returnType,\n+\t\t\t     retDecl);\n+\n   for (auto &stmt : function.function_body->statements)\n     stmt->accept_vis (*this);\n \n@@ -933,7 +1026,23 @@ Compilation::visit (AST::ExprStmtWithoutBlock &stmt)\n void\n Compilation::visit (AST::ExprStmtWithBlock &stmt)\n {\n-  rust_fatal_error (stmt.get_locus_slow (), \"need new block to continue\");\n+  printf (\"ExprStmtWithBlock: %s\\n\", stmt.as_string ().c_str ());\n+\n+  Bblock *enclosingScope = NULL;\n+  Location start_location; /* = stmt.locus; FIXME */\n+  Location end_location;   // FIXME\n+\n+  std::vector<Bvariable *> vars;\n+  auto code_block\n+    = backend->block (scope.GetCurrentFndecl (), scope.CurBlock (), vars,\n+\t\t      start_location, end_location);\n+\n+  scope.PushBlock (code_block);\n+  stmt.expr->accept_vis (*this);\n+  scope.PopBlock ();\n+\n+  auto body = backend->block_statement (code_block);\n+  scope.AddStatement (body);\n }\n \n // rust-type.h"}]}