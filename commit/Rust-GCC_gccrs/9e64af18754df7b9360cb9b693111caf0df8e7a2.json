{"sha": "9e64af18754df7b9360cb9b693111caf0df8e7a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU2NGFmMTg3NTRkZjdiOTM2MGNiOWI2OTMxMTFjYWYwZGY4ZTdhMg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2015-12-11T11:27:11Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2015-12-11T11:27:11Z"}, "message": "Add an asssert and testcase for PR 68064\n\n2015-12-11  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/68064\n\t* ipa-prop.c (ipa_compute_jump_functions_for_edge): Add checking\n\tassert that align is nonzero.\n\ntestsuite/\n\t* g++.dg/torture/pr68064.C: New test.\n\nFrom-SVN: r231559", "tree": {"sha": "96d2c0c0834139ec38bc420965962410743d5f59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96d2c0c0834139ec38bc420965962410743d5f59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e64af18754df7b9360cb9b693111caf0df8e7a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e64af18754df7b9360cb9b693111caf0df8e7a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e64af18754df7b9360cb9b693111caf0df8e7a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e64af18754df7b9360cb9b693111caf0df8e7a2/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da0dcab1848db83728e0549c14bdacfc47321f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0dcab1848db83728e0549c14bdacfc47321f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0dcab1848db83728e0549c14bdacfc47321f5a"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "6df230bed9e8e9910bd1b083b4c1270e868fa0b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e64af18754df7b9360cb9b693111caf0df8e7a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e64af18754df7b9360cb9b693111caf0df8e7a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e64af18754df7b9360cb9b693111caf0df8e7a2", "patch": "@@ -1,3 +1,9 @@\n+2015-12-11  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/68064\n+\t* ipa-prop.c (ipa_compute_jump_functions_for_edge): Add checking\n+\tassert that align is nonzero.\n+\n 2015-12-11  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_expand_setmem): Use new expanders."}, {"sha": "72c2fed63ff9efc4dd6648ab741c4c2aff4e08f1", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e64af18754df7b9360cb9b693111caf0df8e7a2/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e64af18754df7b9360cb9b693111caf0df8e7a2/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=9e64af18754df7b9360cb9b693111caf0df8e7a2", "patch": "@@ -1646,6 +1646,7 @@ ipa_compute_jump_functions_for_edge (struct ipa_func_body_info *fbi,\n \t      && align % BITS_PER_UNIT == 0\n \t      && hwi_bitpos % BITS_PER_UNIT == 0)\n \t    {\n+\t      gcc_checking_assert (align != 0);\n \t      jfunc->alignment.known = true;\n \t      jfunc->alignment.align = align / BITS_PER_UNIT;\n \t      jfunc->alignment.misalign = hwi_bitpos / BITS_PER_UNIT;"}, {"sha": "c1a05791a3aa8a2dc520a6911062d82ca25ea88a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e64af18754df7b9360cb9b693111caf0df8e7a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e64af18754df7b9360cb9b693111caf0df8e7a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e64af18754df7b9360cb9b693111caf0df8e7a2", "patch": "@@ -1,3 +1,8 @@\n+2015-12-11  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/68064\n+\t* g++.dg/torture/pr68064.C: New test.\n+\n 2015-12-11  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/md/setmem_long-1.c: New test."}, {"sha": "59b68973f38bfd0163dccf020504eb273df099cc", "filename": "gcc/testsuite/g++.dg/torture/pr68064.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e64af18754df7b9360cb9b693111caf0df8e7a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr68064.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e64af18754df7b9360cb9b693111caf0df8e7a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr68064.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr68064.C?ref=9e64af18754df7b9360cb9b693111caf0df8e7a2", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+\n+template <class Config> class A {\n+public:\n+  class B;\n+  typedef typename Config::template D<A>::type TypeHandle;\n+  static A *Tagged() { return B::New(B::kTagged); }\n+  static TypeHandle Union(TypeHandle);\n+  static TypeHandle Representation(TypeHandle, typename Config::Region *);\n+  bool Is();\n+};\n+\n+template <class Config> class A<Config>::B {\n+  friend A;\n+  enum { kTaggedPointer = 1 << 31, kTagged = kTaggedPointer };\n+  static A *New(int p1) { return Config::from_bitset(p1); }\n+};\n+\n+struct C {\n+  typedef int Region;\n+  template <class> struct D { typedef A<C> *type; };\n+  static A<C> *from_bitset(unsigned);\n+};\n+A<C> *C::from_bitset(unsigned p1) { return reinterpret_cast<A<C> *>(p1); }\n+\n+namespace {\n+int *a;\n+void fn1(A<C> *p1) { A<C>::Union(A<C>::Representation(p1, a)); }\n+}\n+\n+void fn2() {\n+  A<C> b;\n+  A<C> *c = b.Is() ? 0 : A<C>::Tagged();\n+  fn1(c);\n+}"}]}