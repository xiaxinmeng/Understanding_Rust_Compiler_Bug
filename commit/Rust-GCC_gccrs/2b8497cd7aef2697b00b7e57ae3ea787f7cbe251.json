{"sha": "2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4NDk3Y2Q3YWVmMjY5N2IwMGI3ZTU3YWUzZWE3ODdmN2NiZTI1MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-07T21:47:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-07T21:47:10Z"}, "message": "re PR c++/48449 ([C++0x][SFINAE] Hard errors during value-initialization expressions)\n\n\tPR c++/48449\n\t* typeck2.c (build_functional_cast): Check complain consistently.\n\tUse build_value_init and abstract_virtuals_error_sfinae.\n\t(abstract_virtuals_error_sfinae): Split out.\n\t* cp-tree.h: Declare it.\n\t* init.c (build_new_1): Use it.\n\t(build_value_init_noctor): Handle FUNCTION_TYPE.\n\nFrom-SVN: r172141", "tree": {"sha": "283bd508dcdce7684a9caf0e7849659f2fbe008e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/283bd508dcdce7684a9caf0e7849659f2fbe008e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cdb14286db4ace59759757ce2b1fab2d03a04c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cdb14286db4ace59759757ce2b1fab2d03a04c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cdb14286db4ace59759757ce2b1fab2d03a04c2"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "7e0a596884afa848e57a8354de61d47be5a30829", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "patch": "@@ -1,5 +1,13 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48449\n+\t* typeck2.c (build_functional_cast): Check complain consistently.\n+\tUse build_value_init and abstract_virtuals_error_sfinae.\n+\t(abstract_virtuals_error_sfinae): Split out.\n+\t* cp-tree.h: Declare it.\n+\t* init.c (build_new_1): Use it.\n+\t(build_value_init_noctor): Handle FUNCTION_TYPE.\n+\n \t* semantics.c (finish_decltype_type): Simplify handling of unknown\n \ttype.\n "}, {"sha": "94bd3cee016cf35de68c4b5225665e31ceee56e3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "patch": "@@ -5596,6 +5596,7 @@ extern tree binfo_or_else\t\t\t(tree, tree);\n extern void cxx_readonly_error\t\t\t(tree, enum lvalue_use);\n extern void complete_type_check_abstract\t(tree);\n extern int abstract_virtuals_error\t\t(tree, tree);\n+extern int abstract_virtuals_error_sfinae\t(tree, tree, tsubst_flags_t);\n \n extern tree store_init_value\t\t\t(tree, tree, int);\n extern void check_narrowing\t\t\t(tree, tree);"}, {"sha": "2e9eb68079948d40c5b64358023a5aaf87deebcf", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "patch": "@@ -458,6 +458,12 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n       /* Build a constructor to contain the initializations.  */\n       return build_constructor (type, v);\n     }\n+  else if (TREE_CODE (type) == FUNCTION_TYPE)\n+    {\n+      if (complain & tf_error)\n+\terror (\"value-initialization of function type %qT\", type);\n+      return error_mark_node;\n+    }\n \n   return build_zero_init (type, NULL_TREE, /*static_storage_p=*/false);\n }\n@@ -2030,7 +2036,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n       return error_mark_node;\n     }\n \n-  if (abstract_virtuals_error (NULL_TREE, elt_type))\n+  if (abstract_virtuals_error_sfinae (NULL_TREE, elt_type, complain))\n     return error_mark_node;\n \n   is_initialized = (TYPE_NEEDS_CONSTRUCTING (elt_type) || *init != NULL);"}, {"sha": "f2046f7e221bf855dcb82af7f09ea1f37611c9c1", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "patch": "@@ -250,7 +250,7 @@ complete_type_check_abstract (tree type)\n    occurred; zero if all was well.  */\n \n int\n-abstract_virtuals_error (tree decl, tree type)\n+abstract_virtuals_error_sfinae (tree decl, tree type, tsubst_flags_t complain)\n {\n   VEC(tree,gc) *pure;\n \n@@ -301,11 +301,14 @@ abstract_virtuals_error (tree decl, tree type)\n   if (!pure)\n     return 0;\n \n+  if (decl && TREE_CODE (decl) == RESULT_DECL)\n+    return 0;\n+\n+  if (!(complain & tf_error))\n+    return 1;\n+\n   if (decl)\n     {\n-      if (TREE_CODE (decl) == RESULT_DECL)\n-\treturn 0;\n-\n       if (TREE_CODE (decl) == VAR_DECL)\n \terror (\"cannot declare variable %q+D to be of abstract \"\n \t       \"type %qT\", decl, type);\n@@ -354,6 +357,14 @@ abstract_virtuals_error (tree decl, tree type)\n   return 1;\n }\n \n+/* Wrapper for the above function in the common case of wanting errors.  */\n+\n+int\n+abstract_virtuals_error (tree decl, tree type)\n+{\n+  return abstract_virtuals_error_sfinae (decl, type, tf_warning_or_error);\n+}\n+\n /* Print an error message for invalid use of an incomplete type.\n    VALUE is the expression that was used (or 0 if that isn't known)\n    and TYPE is the type that was invalid.  DIAG_KIND indicates the\n@@ -1527,7 +1538,8 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n \n   if (TREE_CODE (type) == REFERENCE_TYPE && !parms)\n     {\n-      error (\"invalid value-initialization of reference type\");\n+      if (complain & tf_error)\n+\terror (\"invalid value-initialization of reference type\");\n       return error_mark_node;\n     }\n \n@@ -1542,7 +1554,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n   if (! MAYBE_CLASS_TYPE_P (type))\n     {\n       if (parms == NULL_TREE)\n-\treturn cp_convert (type, integer_zero_node);\n+\treturn build_value_init (type, complain);\n \n       /* This must build a C cast.  */\n       parms = build_x_compound_expr_from_list (parms, ELK_FUNC_CAST, complain);\n@@ -1558,7 +1570,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n \n   if (!complete_type_or_maybe_complain (type, NULL_TREE, complain))\n     return error_mark_node;\n-  if (abstract_virtuals_error (NULL_TREE, type))\n+  if (abstract_virtuals_error_sfinae (NULL_TREE, type, complain))\n     return error_mark_node;\n \n   /* [expr.type.conv]"}, {"sha": "7aace9fd007292a638383b5b01dd7bd9d8db1c16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "patch": "@@ -1,5 +1,7 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/sfinae8.C: New.\n+\n \t* g++.dg/cpp0x/sfinae7.C: New.\n \n \t* g++.dg/cpp0x/enum9.C: New."}, {"sha": "7f3012f94df140c8450448813c1e9da87e8bae3e", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae8.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8497cd7aef2697b00b7e57ae3ea787f7cbe251/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae8.C?ref=2b8497cd7aef2697b00b7e57ae3ea787f7cbe251", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/48449\n+// { dg-options -std=c++0x }\n+\n+template<class T, class = decltype(T())>\n+char f(int);\n+\n+template<class>\n+char (&f(...))[2];\n+\n+struct A { virtual ~A() = 0; };\n+\n+static_assert(sizeof(f<int&>(0)) != 1, \"Error\");\n+static_assert(sizeof(f<void()>(0)) != 1, \"Error\");\n+static_assert(sizeof(f<A>(0)) != 1, \"Error\");"}]}