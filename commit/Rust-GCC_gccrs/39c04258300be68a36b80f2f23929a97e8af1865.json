{"sha": "39c04258300be68a36b80f2f23929a97e8af1865", "node_id": "C_kwDOANBUbNoAKDM5YzA0MjU4MzAwYmU2OGEzNmI4MGYyZjIzOTI5YTk3ZThhZjE4NjU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-08T16:31:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-08T16:31:51Z"}, "message": "Merge #994 #997\n\n994: Parse macro patterns properly in repetitions r=CohenArthur a=CohenArthur\n\nCloses #966 \r\n\r\nWe actually cannot reuse functions from the parser since we're expanding a macro transcriber. This is fine as the \"algorithm\" is extremely simple\n\n997: macros: Allow any delimiters for invocation r=CohenArthur a=CohenArthur\n\nCloses #946 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "aa9ba4fbc2509bf2b0cbb247d918656c262aba29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa9ba4fbc2509bf2b0cbb247d918656c262aba29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39c04258300be68a36b80f2f23929a97e8af1865", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJ4T3CRBK7hj4Ov3rIwAAC80IAA1/qS1bu5Ka2YDR6/8YLWkk\nL1Nu6yY+LCZCQQfDbXERThoSxMtu4glJ3Nfi8sEIIuAuUJ+Z27g5ZqMP40mp2hpp\n4lIDOqLLWRxQONLKlfUWlqTPY6PLKOqI28x6Hf72eP9U8bjOCsJCwdSHG2g1i566\nQMySUYrhkj+5CSWNiFQ2qmpybSN7paN4kRa3TyXTtyFJI1+Qx1Pmm285Oo0IDBsR\nC05DnbI6LCEEhJnNlRcBnJKlZ65EokJoIrQ3PMAdpFf2wko0w75P8EBHKvKZgsS1\nlX/AvBLVOl7HFcPW5g+znitXQq1RkIyNE3GD+tVlL+DxyzWg9+Kvx9M6paZEHsQ=\n=Vg0M\n-----END PGP SIGNATURE-----\n", "payload": "tree aa9ba4fbc2509bf2b0cbb247d918656c262aba29\nparent 865b6090a8f8981cdfc050ea2ee44abbe92de141\nparent dc2eab39525f0ccac46497f84818c6f5d612b7d0\nparent d2a6a5eef46296a8b5b2f4c39059a7d55ff22941\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646757111 +0000\ncommitter GitHub <noreply@github.com> 1646757111 +0000\n\nMerge #994 #997\n\n994: Parse macro patterns properly in repetitions r=CohenArthur a=CohenArthur\n\nCloses #966 \r\n\r\nWe actually cannot reuse functions from the parser since we're expanding a macro transcriber. This is fine as the \"algorithm\" is extremely simple\n\n997: macros: Allow any delimiters for invocation r=CohenArthur a=CohenArthur\n\nCloses #946 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c04258300be68a36b80f2f23929a97e8af1865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39c04258300be68a36b80f2f23929a97e8af1865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c04258300be68a36b80f2f23929a97e8af1865/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "865b6090a8f8981cdfc050ea2ee44abbe92de141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865b6090a8f8981cdfc050ea2ee44abbe92de141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/865b6090a8f8981cdfc050ea2ee44abbe92de141"}, {"sha": "dc2eab39525f0ccac46497f84818c6f5d612b7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2eab39525f0ccac46497f84818c6f5d612b7d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2eab39525f0ccac46497f84818c6f5d612b7d0"}, {"sha": "d2a6a5eef46296a8b5b2f4c39059a7d55ff22941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a6a5eef46296a8b5b2f4c39059a7d55ff22941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2a6a5eef46296a8b5b2f4c39059a7d55ff22941"}], "stats": {"total": 116, "additions": 87, "deletions": 29}, "files": [{"sha": "84a526c0c0c8219081727530a95bf3a1a756b1f7", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39c04258300be68a36b80f2f23929a97e8af1865/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39c04258300be68a36b80f2f23929a97e8af1865/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=39c04258300be68a36b80f2f23929a97e8af1865", "patch": "@@ -3493,26 +3493,30 @@ MacroExpander::match_matcher (Parser<MacroInvocLexer> &parser,\n       return false;\n     }\n \n+  auto delimiter = parser.peek_current_token ();\n+\n   // this is used so we can check that we delimit the stream correctly.\n-  switch (matcher.get_delim_type ())\n+  switch (delimiter->get_id ())\n     {\n-      case AST::DelimType::PARENS: {\n+      case LEFT_PAREN: {\n \tif (!parser.skip_token (LEFT_PAREN))\n \t  return false;\n       }\n       break;\n \n-      case AST::DelimType::SQUARE: {\n+      case LEFT_SQUARE: {\n \tif (!parser.skip_token (LEFT_SQUARE))\n \t  return false;\n       }\n       break;\n \n-      case AST::DelimType::CURLY: {\n+      case LEFT_CURLY: {\n \tif (!parser.skip_token (LEFT_CURLY))\n \t  return false;\n       }\n       break;\n+    default:\n+      gcc_unreachable ();\n     }\n \n   const MacroInvocLexer &source = parser.get_token_source ();\n@@ -3566,25 +3570,27 @@ MacroExpander::match_matcher (Parser<MacroInvocLexer> &parser,\n \t}\n     }\n \n-  switch (matcher.get_delim_type ())\n+  switch (delimiter->get_id ())\n     {\n-      case AST::DelimType::PARENS: {\n+      case LEFT_PAREN: {\n \tif (!parser.skip_token (RIGHT_PAREN))\n \t  return false;\n       }\n       break;\n \n-      case AST::DelimType::SQUARE: {\n+      case LEFT_SQUARE: {\n \tif (!parser.skip_token (RIGHT_SQUARE))\n \t  return false;\n       }\n       break;\n \n-      case AST::DelimType::CURLY: {\n+      case LEFT_CURLY: {\n \tif (!parser.skip_token (RIGHT_CURLY))\n \t  return false;\n       }\n       break;\n+    default:\n+      gcc_unreachable ();\n     }\n \n   return true;"}, {"sha": "61ab626f101e7fea7b2a9646eb97d93cf2f364ae", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 47, "deletions": 21, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39c04258300be68a36b80f2f23929a97e8af1865/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39c04258300be68a36b80f2f23929a97e8af1865/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=39c04258300be68a36b80f2f23929a97e8af1865", "patch": "@@ -39,9 +39,6 @@ SubstituteCtx::substitute_repetition (\n {\n   rust_assert (pattern_end < macro.size ());\n \n-  rust_debug (\"pattern start: %lu\", pattern_start);\n-  rust_debug (\"pattern end: %lu\", pattern_end);\n-\n   std::vector<std::unique_ptr<AST::Token>> expanded;\n \n   // Find the first fragment and get the amount of repetitions that we should\n@@ -154,19 +151,57 @@ SubstituteCtx::substitute_token (size_t token_idx)\n \t// We need to parse up until the closing delimiter and expand this\n \t// fragment->n times.\n \trust_debug (\"expanding repetition\");\n-\tstd::vector<std::unique_ptr<AST::Token>> repetition_pattern;\n+\n+\t// We're in a context where macro repetitions have already been\n+\t// parsed and validated: This means that\n+\t// 1/ There will be no delimiters as that is an error\n+\t// 2/ There are no fragment specifiers anymore, which prevents us\n+\t// from reusing parser functions.\n+\t//\n+\t// Repetition patterns are also special in that they cannot contain\n+\t// \"rogue\" delimiters: For example, this is invalid, as they are\n+\t// parsed as MacroMatches and must contain a correct amount of\n+\t// delimiters.\n+\t// `$($e:expr ) )`\n+\t//            ^ rogue closing parenthesis\n+\t//\n+\t// With all of that in mind, we can simply skip ahead from one\n+\t// parenthesis to the other to find the pattern to expand. Of course,\n+\t// pairs of delimiters, including parentheses, are allowed.\n+\t// `$($e:expr ( ) )`\n+\t// Parentheses are the sole delimiter for which we need a special\n+\t// behavior since they delimit the repetition pattern\n+\n \tsize_t pattern_start = token_idx + 1;\n \tsize_t pattern_end = pattern_start;\n-\tfor (; pattern_end < macro.size ()\n-\t       && macro.at (pattern_end)->get_id () != RIGHT_PAREN;\n-\t     pattern_end++)\n-\t  ;\n+\tauto parentheses_stack = 0;\n+\tfor (size_t idx = pattern_start; idx < macro.size (); idx++)\n+\t  {\n+\t    if (macro.at (idx)->get_id () == LEFT_PAREN)\n+\t      {\n+\t\tparentheses_stack++;\n+\t      }\n+\t    else if (macro.at (idx)->get_id () == RIGHT_PAREN)\n+\t      {\n+\t\tif (parentheses_stack == 0)\n+\t\t  {\n+\t\t    pattern_end = idx;\n+\t\t    break;\n+\t\t  }\n+\t\tparentheses_stack--;\n+\t      }\n+\t  }\n+\n+\t// Unreachable case, but let's make sure we don't ever run into it\n+\trust_assert (pattern_end != pattern_start);\n \n \tstd::unique_ptr<AST::Token> separator_token = nullptr;\n-\t// FIXME: Can this go out of bounds?\n-\tauto &post_pattern_token = macro.at (pattern_end + 1);\n-\tif (!is_rep_op (post_pattern_token))\n-\t  separator_token = post_pattern_token->clone_token ();\n+\tif (pattern_end + 1 <= macro.size ())\n+\t  {\n+\t    auto &post_pattern_token = macro.at (pattern_end + 1);\n+\t    if (!is_rep_op (post_pattern_token))\n+\t      separator_token = post_pattern_token->clone_token ();\n+\t  }\n \n \t// Amount of tokens to skip\n \tauto to_skip = 0;\n@@ -178,15 +213,6 @@ SubstituteCtx::substitute_token (size_t token_idx)\n \tif (separator_token)\n \t  to_skip += 1;\n \n-\t// FIXME: This skips whitespaces... Is that okay??\n-\t// FIXME: Is there any existing parsing function that allows us to\n-\t// parse a macro pattern?\n-\n-\t// FIXME: Add error handling in the case we haven't found a matching\n-\t// closing delimiter\n-\n-\t// FIXME: We need to parse the repetition token now\n-\n \treturn {substitute_repetition (pattern_start, pattern_end,\n \t\t\t\t       std::move (separator_token)),\n \t\tpattern_end - pattern_start + to_skip};"}, {"sha": "3f1453e2eda9ee446e848abfc902774abf383476", "filename": "gcc/testsuite/rust/compile/macro10.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39c04258300be68a36b80f2f23929a97e8af1865/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39c04258300be68a36b80f2f23929a97e8af1865/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro10.rs?ref=39c04258300be68a36b80f2f23929a97e8af1865", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options \"-w\" }\n+macro_rules! foo {\n+    {} => {\n+        15\n+    };\n+}\n+\n+fn main() {\n+    let a = foo!();\n+    let b = foo![];\n+}"}, {"sha": "2508be1a6fdca6c0241fbcc7cda8f2cba7613f33", "filename": "gcc/testsuite/rust/execute/torture/macros21.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39c04258300be68a36b80f2f23929a97e8af1865/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros21.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39c04258300be68a36b80f2f23929a97e8af1865/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros21.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros21.rs?ref=39c04258300be68a36b80f2f23929a97e8af1865", "patch": "@@ -0,0 +1,15 @@\n+macro_rules! add_parens {\n+    ($($rep:ident ( ) )*) => {\n+        { 0 $(+ $rep ( ))* }\n+    };\n+}\n+\n+fn f() -> i32 {\n+    1\n+}\n+\n+fn main() -> i32 {\n+    let a = add_parens!(f() f() f());\n+\n+    a - 3\n+}"}]}