{"sha": "712b182a8bc2d7510d7a2fbede43bf134c539f25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyYjE4MmE4YmMyZDc1MTBkN2EyZmJlZGU0M2JmMTM0YzUzOWYyNQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-03T21:16:05Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-04T03:46:39Z"}, "message": "libstdc++: Fix incorrect use of memset in ranges::fill_n (PR 94017)\n\nWhen deciding whether to perform the memset optimization in ranges::fill_n, we\nwere crucially neglecting to check that the output pointer's value type is a\nbyte type.  This patch adds such a check to the problematic condition in\nranges::fill_n.\n\nAt the same time, this patch relaxes the overly conservative\n__is_byte<_Tp>::__value check that requires the fill type be a byte type.  It's\noverly conservative because it means we won't enable the memset optimization in\nthe following example\n\n  char c[100];\n  ranges::fill(c, 37);\n\nbecause the fill type is deduced to be int here.  Rather than requiring that the\nfill type be a byte type, it seems safe to just require the fill type be an\nintegral type, which is what this patch does.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/94017\n\t* include/bits/ranges_algobase.h (__fill_n_fn::operator()): Refine\n\tcondition for when to use memset, making sure to additionally check that\n\tthe output pointer's value type is a non-volatile byte type.  Instead of\n\trequiring that the fill type is a byte type, just require that it's an\n\tintegral type.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/94017.cc:\n\tNew test.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/94017.cc:\n\tNew test.\n\t* testsuite/25_algorithms/fill/94013.cc: Uncomment part that was blocked\n\tby PR 94017.\n\t* testsuite/25_algorithms/fill/94017.cc: New test.\n\t* testsuite/25_algorithms/fill_n/94017.cc: New test.", "tree": {"sha": "92ab96c69c5f708552c8c4fbc2d2198d13941a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92ab96c69c5f708552c8c4fbc2d2198d13941a19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/712b182a8bc2d7510d7a2fbede43bf134c539f25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712b182a8bc2d7510d7a2fbede43bf134c539f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712b182a8bc2d7510d7a2fbede43bf134c539f25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712b182a8bc2d7510d7a2fbede43bf134c539f25/comments", "author": null, "committer": null, "parents": [{"sha": "144dfc68d0c0f5b99a0cd0a14b211f82afed88c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6"}], "stats": {"total": 333, "additions": 328, "deletions": 5}, "files": [{"sha": "ff8ae64d477dfee54b3f6cd8e714cb82caa5c82b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=712b182a8bc2d7510d7a2fbede43bf134c539f25", "patch": "@@ -1,5 +1,20 @@\n 2020-03-04  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR libstdc++/94017\n+\t* include/bits/ranges_algobase.h (__fill_n_fn::operator()): Refine\n+\tcondition for when to use memset, making sure to additionally check that\n+\tthe output pointer's value type is a non-volatile byte type.  Instead of\n+\trequiring that the fill type is a byte type, just require that it's an\n+\tintegral type.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/94017.cc:\n+\tNew test.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/94017.cc:\n+\tNew test.\n+\t* testsuite/25_algorithms/fill/94013.cc: Uncomment part of test that was\n+\tblocked by PR 94017.\n+\t* testsuite/25_algorithms/fill/94017.cc: New test.\n+\t* testsuite/25_algorithms/fill_n/94017.cc: New test.\n+\n \tLWG 3355 The memory algorithms should support move-only input iterators\n \tintroduced by P1207\n \t* include/bits/ranges_uninitialized.h"}, {"sha": "80c9a7743014134d3e0f6147e9b7edcc621efb5e", "filename": "libstdc++-v3/include/bits/ranges_algobase.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h?ref=712b182a8bc2d7510d7a2fbede43bf134c539f25", "patch": "@@ -516,8 +516,11 @@ namespace ranges\n \tif (__n <= 0)\n \t  return __first;\n \n-\t// TODO: is __is_byte the best condition?\n-\tif constexpr (is_pointer_v<_Out> && __is_byte<_Tp>::__value)\n+\t// TODO: Generalize this optimization to contiguous iterators.\n+\tif constexpr (is_pointer_v<_Out>\n+\t\t      // Note that __is_byte already implies !is_volatile.\n+\t\t      && __is_byte<remove_pointer_t<_Out>>::__value\n+\t\t      && integral<_Tp>)\n \t  {\n \t    __builtin_memset(__first, static_cast<unsigned char>(__value), __n);\n \t    return __first + __n;"}, {"sha": "1686d1ba8d50e7facb6d76a0a2fa1e84090ae8ca", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_fill/94017.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F94017.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F94017.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F94017.cc?ref=712b182a8bc2d7510d7a2fbede43bf134c539f25", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <algorithm>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_output_range;\n+\n+namespace ranges = std::ranges;\n+\n+template<typename Out, auto value>\n+void\n+test01()\n+{\n+    {\n+      Out x[5];\n+      ranges::uninitialized_fill(x, value);\n+      VERIFY( ranges::count(x, static_cast<Out>(value)) == ranges::size(x) );\n+    }\n+\n+    {\n+      Out x[5];\n+      test_output_range<Out> rx(x);\n+      ranges::uninitialized_fill(x, value);\n+      VERIFY( ranges::count(x, static_cast<Out>(value)) == ranges::size(x) );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01<char, 'a'>();\n+  test01<char, 100>();\n+  test01<char, 150>();\n+  test01<char, 300>();\n+  test01<char, 1000>();\n+  test01<char, -10000L>();\n+\n+  test01<signed char, 'a'>();\n+  test01<signed char, 100>();\n+  test01<signed char, 150>();\n+  test01<signed char, 300>();\n+\n+  test01<unsigned char, 'a'>();\n+  test01<unsigned char, 100>();\n+  test01<unsigned char, 150>();\n+  test01<unsigned char, 300>();\n+\n+  test01<int, 'a'>();\n+  test01<int, u8'a'>();\n+  test01<int, (signed char)'a'>();\n+  test01<int, (unsigned char)'a'>();\n+\n+  test01<volatile int, 'a'>();\n+  test01<volatile int, 'a'>();\n+  test01<volatile int, 500>();\n+  test01<volatile char, 500>();\n+}"}, {"sha": "b5325080e020ec2f9627c194dd99cf70f5098ff6", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_fill_n/94017.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F94017.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F94017.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F94017.cc?ref=712b182a8bc2d7510d7a2fbede43bf134c539f25", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <algorithm>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_output_range;\n+\n+namespace ranges = std::ranges;\n+\n+template<typename Out, auto value>\n+void\n+test01()\n+{\n+    {\n+      Out x[5];\n+      ranges::uninitialized_fill_n(x, 5, value);\n+      VERIFY( ranges::count(x, static_cast<Out>(value)) == ranges::size(x) );\n+    }\n+\n+    {\n+      Out x[5];\n+      test_output_range<Out> rx(x);\n+      ranges::uninitialized_fill_n(x, 5, value);\n+      VERIFY( ranges::count(x, static_cast<Out>(value)) == ranges::size(x) );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01<char, 'a'>();\n+  test01<char, 100>();\n+  test01<char, 150>();\n+  test01<char, 300>();\n+  test01<char, 1000>();\n+  test01<char, -10000L>();\n+\n+  test01<signed char, 'a'>();\n+  test01<signed char, 100>();\n+  test01<signed char, 150>();\n+  test01<signed char, 300>();\n+\n+  test01<unsigned char, 'a'>();\n+  test01<unsigned char, 100>();\n+  test01<unsigned char, 150>();\n+  test01<unsigned char, 300>();\n+\n+  test01<int, 'a'>();\n+  test01<int, u8'a'>();\n+  test01<int, (signed char)'a'>();\n+  test01<int, (unsigned char)'a'>();\n+\n+  test01<volatile int, 'a'>();\n+  test01<volatile int, 'a'>();\n+  test01<volatile int, 500>();\n+  test01<volatile char, 500>();\n+}"}, {"sha": "9785d740a358fee262e27c16afb83515ad68cd1f", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/94013.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F94013.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F94013.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F94013.cc?ref=712b182a8bc2d7510d7a2fbede43bf134c539f25", "patch": "@@ -33,9 +33,8 @@ test01()\n   c = 4;\n   std::ranges::fill(a, c);\n   VERIFY( a[0] == 4 && a[1] == 4 );\n-  // currently fails, see PR 94017\n-  // unsigned char c2 = 5;\n-  // std::ranges::fill(a, c2);\n+  unsigned char c2 = 5;\n+  std::ranges::fill(a, c2);\n #endif\n }\n "}, {"sha": "ace4cc9c87fcced1e50a638e02273fd51d9196b1", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/94017.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F94017.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F94017.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F94017.cc?ref=712b182a8bc2d7510d7a2fbede43bf134c539f25", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_output_range;\n+\n+namespace ranges = std::ranges;\n+\n+template<typename Out, auto value>\n+void\n+test01()\n+{\n+    {\n+      Out x[5];\n+      ranges::fill(x, value);\n+      VERIFY( ranges::count(x, static_cast<Out>(value)) == ranges::size(x) );\n+    }\n+\n+    {\n+      Out x[5];\n+      test_output_range<Out> rx(x);\n+      ranges::fill(x, value);\n+      VERIFY( ranges::count(x, static_cast<Out>(value)) == ranges::size(x) );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01<char, 'a'>();\n+  test01<char, 100>();\n+  test01<char, 150>();\n+  test01<char, 300>();\n+  test01<char, 1000>();\n+  test01<char, -10000L>();\n+\n+  test01<signed char, 'a'>();\n+  test01<signed char, 100>();\n+  test01<signed char, 150>();\n+  test01<signed char, 300>();\n+\n+  test01<unsigned char, 'a'>();\n+  test01<unsigned char, 100>();\n+  test01<unsigned char, 150>();\n+  test01<unsigned char, 300>();\n+\n+  test01<int, 'a'>();\n+  test01<int, u8'a'>();\n+  test01<int, (signed char)'a'>();\n+  test01<int, (unsigned char)'a'>();\n+\n+  test01<volatile int, 'a'>();\n+  test01<volatile int, 'a'>();\n+  test01<volatile int, 500>();\n+  test01<volatile char, 500>();\n+}"}, {"sha": "fc93dd5ab26a5dd97d0ae9ceca5fc5f62b7a911b", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/94017.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F94017.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712b182a8bc2d7510d7a2fbede43bf134c539f25/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F94017.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F94017.cc?ref=712b182a8bc2d7510d7a2fbede43bf134c539f25", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_output_range;\n+\n+namespace ranges = std::ranges;\n+\n+template<typename Out, auto value>\n+void\n+test01()\n+{\n+    {\n+      Out x[5];\n+      ranges::fill_n(x, 5, value);\n+      VERIFY( ranges::count(x, static_cast<Out>(value)) == ranges::size(x) );\n+    }\n+\n+    {\n+      Out x[5];\n+      test_output_range<Out> rx(x);\n+      ranges::fill_n(x, 5, value);\n+      VERIFY( ranges::count(x, static_cast<Out>(value)) == ranges::size(x) );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01<char, 'a'>();\n+  test01<char, 100>();\n+  test01<char, 150>();\n+  test01<char, 300>();\n+  test01<char, 1000>();\n+  test01<char, -10000L>();\n+\n+  test01<signed char, 'a'>();\n+  test01<signed char, 100>();\n+  test01<signed char, 150>();\n+  test01<signed char, 300>();\n+\n+  test01<unsigned char, 'a'>();\n+  test01<unsigned char, 100>();\n+  test01<unsigned char, 150>();\n+  test01<unsigned char, 300>();\n+\n+  test01<int, 'a'>();\n+  test01<int, u8'a'>();\n+  test01<int, (signed char)'a'>();\n+  test01<int, (unsigned char)'a'>();\n+\n+  test01<volatile int, 'a'>();\n+  test01<volatile int, 'a'>();\n+  test01<volatile int, 500>();\n+  test01<volatile char, 500>();\n+}"}]}