{"sha": "2cf0ff9806714eacef91f759b3c7422a4491e695", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNmMGZmOTgwNjcxNGVhY2VmOTFmNzU5YjNjNzQyMmE0NDkxZTY5NQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2016-09-08T22:33:10Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2016-09-08T22:33:10Z"}, "message": "re PR fortran/69514 (ICE with nested array constructor)\n\n2016-09-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/69514\n\t* array.c (gfc_match_array_constructor):  If type-spec is present,\n\twalk the array constructor performing possible conversions for \n\tnumeric types.\n\n2016-09-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n\t    Louis Krupp      <lkrupp@gcc.gnu.org>\n\n\tPR fortran/69514\n\t* gfortran.dg/pr69514_1.f90: New test.\n\t* gfortran.dg/pr69514_2.f90: New test.\n\nCo-Authored-By: Louis Krupp <lkrupp@gcc.gnu.org>\n\nFrom-SVN: r240039", "tree": {"sha": "6c5ce11b8f25d62eea31762763a992aed00e4ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c5ce11b8f25d62eea31762763a992aed00e4ed6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cf0ff9806714eacef91f759b3c7422a4491e695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf0ff9806714eacef91f759b3c7422a4491e695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cf0ff9806714eacef91f759b3c7422a4491e695", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf0ff9806714eacef91f759b3c7422a4491e695/comments", "author": null, "committer": null, "parents": [{"sha": "20b6cf0194331045a8afa61ebf6432bb18f1ae87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b6cf0194331045a8afa61ebf6432bb18f1ae87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b6cf0194331045a8afa61ebf6432bb18f1ae87"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "53c6e2d50a989db8e52b90df94b0de3a21af6655", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf0ff9806714eacef91f759b3c7422a4491e695/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf0ff9806714eacef91f759b3c7422a4491e695/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2cf0ff9806714eacef91f759b3c7422a4491e695", "patch": "@@ -1,3 +1,10 @@\n+2016-09-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/69514\n+\t* array.c (gfc_match_array_constructor):  If type-spec is present,\n+\twalk the array constructor performing possible conversions for \n+\tnumeric types.\n+\n 2016-09-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/77500"}, {"sha": "48a7250d108d6926fae18443bb939a25f7ba7cf0", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf0ff9806714eacef91f759b3c7422a4491e695/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf0ff9806714eacef91f759b3c7422a4491e695/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=2cf0ff9806714eacef91f759b3c7422a4491e695", "patch": "@@ -1089,6 +1089,7 @@ match_array_cons_element (gfc_constructor_base *result)\n match\n gfc_match_array_constructor (gfc_expr **result)\n {\n+  gfc_constructor *c;\n   gfc_constructor_base head, new_cons;\n   gfc_undo_change_set changed_syms;\n   gfc_expr *expr;\n@@ -1194,8 +1195,6 @@ gfc_match_array_constructor (gfc_expr **result)\n \t be converted.  See PR fortran/67803.  */\n       if (ts.type == BT_CHARACTER)\n \t{\n-\t  gfc_constructor *c;\n-\n \t  c = gfc_constructor_first (head);\n \t  for (; c; c = gfc_constructor_next (c))\n \t    {\n@@ -1218,6 +1217,14 @@ gfc_match_array_constructor (gfc_expr **result)\n \t\t}\n \t    }\n \t}\n+\n+      /* Walk the constructor and ensure type conversion for numeric types.  */\n+      if (gfc_numeric_ts (&ts))\n+\t{\n+\t  c = gfc_constructor_first (head);\n+\t  for (; c; c = gfc_constructor_next (c))\n+\t    gfc_convert_type (c->expr, &ts, 1);\n+\t}\n     }\n   else\n     expr = gfc_get_array_expr (BT_UNKNOWN, 0, &where);"}, {"sha": "d841cac1f66021891089976d4dcd41ee4a707d04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf0ff9806714eacef91f759b3c7422a4491e695/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf0ff9806714eacef91f759b3c7422a4491e695/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2cf0ff9806714eacef91f759b3c7422a4491e695", "patch": "@@ -1,3 +1,10 @@\n+2016-09-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Louis Krupp      <lkrupp@gcc.gnu.org>\n+\n+\tPR fortran/69514\n+\t* gfortran.dg/pr69514_1.f90: New test.\n+\t* gfortran.dg/pr69514_2.f90: New test.\n+\n 2016-09-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/77500"}, {"sha": "d72a450dc58d858541c4e1cc1781557611c401ed", "filename": "gcc/testsuite/gfortran.dg/pr69514_1.f90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf0ff9806714eacef91f759b3c7422a4491e695/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69514_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf0ff9806714eacef91f759b3c7422a4491e695/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69514_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69514_1.f90?ref=2cf0ff9806714eacef91f759b3c7422a4491e695", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do run }\n+program foo\n+   real, parameter :: x(3) = 2.0 * [real :: 1, 2, 3 ]\n+   if (any(x /= [2., 4., 6.])) call abort\n+end program foo"}, {"sha": "0a5e8166a0174bbf69c1f1ee7948ef7af0bb71bd", "filename": "gcc/testsuite/gfortran.dg/pr69514_2.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf0ff9806714eacef91f759b3c7422a4491e695/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69514_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf0ff9806714eacef91f759b3c7422a4491e695/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69514_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69514_2.f90?ref=2cf0ff9806714eacef91f759b3c7422a4491e695", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do run }\n+program p\n+ implicit none\n+\n+ real   , parameter :: arr(3) = [ real    :: 2, 2.5, (1.5, 2.5) ]\n+ real   , parameter :: ari(3) = [ integer :: 2, 2.5, (1.5, 2.5) ]\n+ real   , parameter :: arc(3) = [ complex :: 2, 2.5, (1.5, 2.5) ]\n+ integer, parameter :: air(3) = [ real    :: 2, 2.5, (1.5, 2.5) ]\n+ integer, parameter :: aii(3) = [ integer :: 2, 2.5, (1.5, 2.5) ]\n+ integer, parameter :: aic(3) = [ complex :: 2, 2.5, (1.5, 2.5) ]\n+ complex, parameter :: acr(3) = [ real    :: 2, 2.5, (1.5, 2.5) ]\n+ complex, parameter :: aci(3) = [ integer :: 2, 2.5, (1.5, 2.5) ]\n+ complex, parameter :: acc(3) = [ complex :: 2, 2.5, (1.5, 2.5) ]\n+\n+ real   , parameter :: mrr(3) =  4.5       * [ real    :: 2, 2.5, (3.5, 4.0) ]\n+ real   , parameter :: mri(3) =  4.5       * [ integer :: 2, 2.5, (3.5, 4.0) ]\n+ real   , parameter :: mrc(3) =  4.5       * [ complex :: 2, 2.5, (3.5, 4.0) ]\n+ integer, parameter :: mir(3) =  4         * [ real    :: 2, 2.5, (3.5, 4.0) ]\n+ integer, parameter :: mii(3) =  4         * [ integer :: 2, 2.5, (3.5, 4.0) ]\n+ integer, parameter :: mic(3) =  4         * [ complex :: 2, 2.5, (3.5, 4.0) ]\n+ complex, parameter :: mcr(3) = (4.5, 5.5) * [ real    :: 2, 2.5, (3.5, 4.0) ]\n+ complex, parameter :: mci(3) = (4.5, 5.5) * [ integer :: 2, 2.5, (3.5, 4.0) ]\n+ complex, parameter :: mcc(3) = (4.5, 5.5) * [ complex :: 2, 2.5, (3.5, 4.0) ]\n+\n+ if (any(arr /= [2.00, 2.50, 1.50])) call abort\n+ if (any(ari /= [2.00, 2.00, 1.00])) call abort\n+ if (any(arc /= [2.00, 2.50, 1.50])) call abort\n+\n+ if (any(air /= [2, 2, 1])) call abort\n+ if (any(aii /= [2, 2, 1])) call abort\n+ if (any(aic /= [2, 2, 1])) call abort\n+\n+ if (any(acr /= [(2.00, 0.00), (2.50, 0.00), (1.50, 0.00)])) call abort\n+ if (any(aci /= [(2.00, 0.00), (2.00, 0.00), (1.00, 0.00)])) call abort\n+ if (any(acc /= [(2.00, 0.00), (2.50, 0.00), (1.50, 2.50)])) call abort\n+\n+ if (any(mrr /= [9.00, 11.25, 15.75])) call abort\n+ if (any(mri /= [9.00,  9.00, 13.50])) call abort\n+ if (any(mrc /= [9.00, 11.25, 15.75])) call abort\n+\n+ if (any(mir /= [8, 10, 14])) call abort\n+ if (any(mii /= [8,  8, 12])) call abort\n+ if (any(mic /= [8, 10, 14])) call abort\n+\n+ if (any(mcr /= [(9.00, 11.00), (11.25, 13.75), (15.75, 19.25)])) call abort\n+ if (any(mci /= [(9.00, 11.00), ( 9.00, 11.00), (13.50, 16.50)])) call abort\n+ if (any(mcc /= [(9.00, 11.00), (11.25, 13.75), (-6.25, 37.25)])) call abort\n+\n+end program p"}]}