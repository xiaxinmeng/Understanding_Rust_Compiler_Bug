{"sha": "41543739cd3813a7e593fc4f61b558ecf6cffaf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE1NDM3MzljZDM4MTNhN2U1OTNmYzRmNjFiNTU4ZWNmNmNmZmFmMw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-12-02T08:29:23Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-12-02T08:29:23Z"}, "message": "In gcc/:\n\n\t* config/rs6000/rs6000.h (SLOW_UNALIGNED_ACCESS): Simplify.\n\t* config/rs6000/rs6000.c (rs6000_emit_move): Use adjust_address\n\trather than simplify_subreg.  Check for volatile-ness.  Check that\n\twe're not splitting one slow operation into two slow operations.\nIn gcc/testsuite/:\n\t* gcc.c-torture/compile/structs.c: New testcase from GDB.\n\nFrom-SVN: r47524", "tree": {"sha": "b6335589792084a6ee2cbfe89743a136d023fccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6335589792084a6ee2cbfe89743a136d023fccc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41543739cd3813a7e593fc4f61b558ecf6cffaf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41543739cd3813a7e593fc4f61b558ecf6cffaf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41543739cd3813a7e593fc4f61b558ecf6cffaf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41543739cd3813a7e593fc4f61b558ecf6cffaf3/comments", "author": null, "committer": null, "parents": [{"sha": "e42a7c94a27cfb75cf7a87acab09ffdb85c74b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42a7c94a27cfb75cf7a87acab09ffdb85c74b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e42a7c94a27cfb75cf7a87acab09ffdb85c74b00"}], "stats": {"total": 313, "additions": 292, "deletions": 21}, "files": [{"sha": "daadea523024b0b7ae7018fbe15cd6b4b95ced28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41543739cd3813a7e593fc4f61b558ecf6cffaf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41543739cd3813a7e593fc4f61b558ecf6cffaf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41543739cd3813a7e593fc4f61b558ecf6cffaf3", "patch": "@@ -1,3 +1,10 @@\n+2001-12-02  Geoff Keating  <geoffk@redhat.com>\n+\n+\t* config/rs6000/rs6000.h (SLOW_UNALIGNED_ACCESS): Simplify.\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Use adjust_address\n+\trather than simplify_subreg.  Check for volatile-ness.  Check that\n+\twe're not splitting one slow operation into two slow operations.\n+\n 2001-12-02  David Edelsohn  <edelsohn@gnu.org>\n \n \t* emit-rtl.c (gen_lowpart_common): Cast array element to HOST_WIDE_INT"}, {"sha": "d4d43120b51d14109819be4c992db74bc4d57042", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41543739cd3813a7e593fc4f61b558ecf6cffaf3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41543739cd3813a7e593fc4f61b558ecf6cffaf3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=41543739cd3813a7e593fc4f61b558ecf6cffaf3", "patch": "@@ -1878,23 +1878,20 @@ rs6000_emit_move (dest, source, mode)\n   if (GET_CODE (operands[0]) == MEM\n       && GET_CODE (operands[1]) == MEM\n       && mode == DImode\n-      && (SLOW_UNALIGNED_ACCESS(DImode, MEM_ALIGN(operands[0]))\n-\t  || SLOW_UNALIGNED_ACCESS(DImode, MEM_ALIGN(operands[1]))))\n-    {\n-      if (!TARGET_POWERPC64)\n-\t{\n-\t  emit_move_insn (simplify_subreg (SImode, operands[0], DImode, 0),\n-\t\t\t  simplify_subreg (SImode, operands[1], DImode, 0));\n-\t  emit_move_insn (simplify_subreg (SImode, operands[0], DImode, 4),\n-\t\t\t  simplify_subreg (SImode, operands[1], DImode, 4));\n-\t}\n-      else\n-\t{\n-\t  emit_move_insn (gen_lowpart (SImode, operands[0]),\n-\t\t\t  gen_lowpart (SImode, operands[1]));\n-\t  emit_move_insn (gen_highpart (SImode, operands[0]),\n-\t\t\t  gen_highpart (SImode, operands[1]));\n-\t}\n+      && (SLOW_UNALIGNED_ACCESS (DImode, MEM_ALIGN (operands[0]))\n+\t  || SLOW_UNALIGNED_ACCESS (DImode, MEM_ALIGN (operands[1])))\n+      && ! (SLOW_UNALIGNED_ACCESS (SImode, (MEM_ALIGN (operands[0]) > 32\n+\t\t\t\t\t    ? 32 : MEM_ALIGN (operands[0])))\n+\t    || SLOW_UNALIGNED_ACCESS (SImode, (MEM_ALIGN (operands[1]) > 32\n+\t\t\t\t\t       ? 32 \n+\t\t\t\t\t       : MEM_ALIGN (operands[1]))))\n+      && ! MEM_VOLATILE_P (operands [0])\n+      && ! MEM_VOLATILE_P (operands [1]))\n+    {\n+      emit_move_insn (adjust_address (operands[0], SImode, 0),\n+\t\t      adjust_address (operands[1], SImode, 0));\n+      emit_move_insn (adjust_address (operands[0], SImode, 4),\n+\t\t      adjust_address (operands[1], SImode, 4));\n       return;\n     }\n   "}, {"sha": "afe1a9bdc018765df323b4a07bbf48b34d11f8a1", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41543739cd3813a7e593fc4f61b558ecf6cffaf3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41543739cd3813a7e593fc4f61b558ecf6cffaf3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=41543739cd3813a7e593fc4f61b558ecf6cffaf3", "patch": "@@ -651,10 +651,10 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n /* Define this macro to be the value 1 if unaligned accesses have a cost\n    many times greater than aligned accesses, for example if they are\n    emulated in a trap handler.  */\n-#define SLOW_UNALIGNED_ACCESS(MODE, ALIGN)\t\t\t\\\n-   ((STRICT_ALIGNMENT\t\t\t\t\t\t\\\n-     || (((MODE) == SFmode || (MODE) == DFmode || (MODE) == DImode) \\\n-         && (ALIGN) < 32)) ? 1 : 0)\n+#define SLOW_UNALIGNED_ACCESS(MODE, ALIGN)\t\t\t\t\\\n+  (STRICT_ALIGNMENT\t\t\t\t\t\t\t\\\n+   || (((MODE) == SFmode || (MODE) == DFmode || (MODE) == DImode)\t\\\n+       && (ALIGN) < 32))\n \f\n /* Standard register usage.  */\n "}, {"sha": "d3a4df6b5a1ee55ce818d2b2e05cc8ac5a99fa95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41543739cd3813a7e593fc4f61b558ecf6cffaf3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41543739cd3813a7e593fc4f61b558ecf6cffaf3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41543739cd3813a7e593fc4f61b558ecf6cffaf3", "patch": "@@ -1,3 +1,7 @@\n+2001-12-01  Geoff Keating  <geoffk@redhat.com>\n+\n+\t* gcc.c-torture/compile/structs.c: New testcase from GDB.\n+\n 2001-12-02  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* objc.dg/alias.m: Update."}, {"sha": "356f0729f1e36e8171c057962fbe679b077a1500", "filename": "gcc/testsuite/gcc.c-torture/compile/structs.c", "status": "added", "additions": 263, "deletions": 0, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41543739cd3813a7e593fc4f61b558ecf6cffaf3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fstructs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41543739cd3813a7e593fc4f61b558ecf6cffaf3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fstructs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fstructs.c?ref=41543739cd3813a7e593fc4f61b558ecf6cffaf3", "patch": "@@ -0,0 +1,263 @@\n+/* Copyright 1996, 1999 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+ \n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+   Please email any bugs, comments, and/or additions to this file to:\n+   bug-gdb@prep.ai.mit.edu  */\n+\n+struct struct1 { char a;};\n+struct struct2 { char a, b;};\n+struct struct3 { char a, b, c; };\n+struct struct4 { char a, b, c, d; };\n+struct struct5 { char a, b, c, d, e; };\n+struct struct6 { char a, b, c, d, e, f; };\n+struct struct7 { char a, b, c, d, e, f, g; };\n+struct struct8 { char a, b, c, d, e, f, g, h; };\n+struct struct9 { char a, b, c, d, e, f, g, h, i; };\n+struct struct10 { char a, b, c, d, e, f, g, h, i, j; };\n+struct struct11 { char a, b, c, d, e, f, g, h, i, j, k; };\n+struct struct12 { char a, b, c, d, e, f, g, h, i, j, k, l; };\n+struct struct16 { char a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p; };\n+\n+struct struct1 foo1 = {'1'},  L1;\n+struct struct2 foo2 = { 'a', 'b'},  L2;\n+struct struct3 foo3 = { 'A', 'B', 'C'},  L3;\n+struct struct4 foo4 = {'1', '2', '3', '4'},  L4;\n+struct struct5 foo5 = {'a', 'b', 'c', 'd', 'e'},  L5;\n+struct struct6 foo6 = {'A', 'B', 'C', 'D', 'E', 'F'},  L6;\n+struct struct7 foo7 = {'1', '2', '3', '4', '5', '6', '7'},  L7;\n+struct struct8 foo8 = {'1', '2', '3', '4', '5', '6', '7', '8'},  L8;\n+struct struct9 foo9 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'},  L9;\n+struct struct10 foo10 = {\n+  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'},  L10;\n+struct struct11 foo11 = {\n+  '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B'}, L11;\n+struct struct12 foo12 = {\n+  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'}, L12;\n+struct struct16 foo16 = {\n+  'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p'}, L16;\n+\n+struct struct1  fun1()\n+{\n+  return foo1;  \n+}\n+struct struct2  fun2()\n+{\n+  return foo2;\n+}\n+struct struct3  fun3()\n+{\n+  return foo3;\n+}\n+struct struct4  fun4()\n+{\n+  return foo4;\n+}\n+struct struct5  fun5()\n+{\n+  return foo5;\n+}\n+struct struct6  fun6()\n+{\n+  return foo6;\n+}\n+struct struct7  fun7()\n+{\n+  return foo7;\n+}\n+struct struct8  fun8()\n+{\n+  return foo8;\n+}\n+struct struct9  fun9()\n+{\n+  return foo9;\n+}\n+struct struct10 fun10()\n+{\n+  return foo10; \n+}\n+struct struct11 fun11()\n+{\n+  return foo11; \n+}\n+struct struct12 fun12()\n+{\n+  return foo12; \n+}\n+struct struct16 fun16()\n+{\n+  return foo16; \n+}\n+\n+#ifdef PROTOTYPES\n+void Fun1(struct struct1 foo1)\n+#else\n+void Fun1(foo1)\n+     struct struct1 foo1;\n+#endif\n+{\n+  L1 = foo1;\n+}\n+#ifdef PROTOTYPES\n+void Fun2(struct struct2 foo2)\n+#else\n+void Fun2(foo2)\n+     struct struct2 foo2;\n+#endif\n+{\n+  L2 = foo2;\n+}\n+#ifdef PROTOTYPES\n+void Fun3(struct struct3 foo3)\n+#else\n+void Fun3(foo3)\n+     struct struct3 foo3;\n+#endif\n+{\n+  L3 = foo3;\n+}\n+#ifdef PROTOTYPES\n+void Fun4(struct struct4 foo4)\n+#else\n+void Fun4(foo4)\n+     struct struct4 foo4;\n+#endif\n+{\n+  L4 = foo4;\n+}\n+#ifdef PROTOTYPES\n+void Fun5(struct struct5 foo5)\n+#else\n+void Fun5(foo5)\n+     struct struct5 foo5;\n+#endif\n+{\n+  L5 = foo5;\n+}\n+#ifdef PROTOTYPES\n+void Fun6(struct struct6 foo6)\n+#else\n+void Fun6(foo6)\n+     struct struct6 foo6;\n+#endif\n+{\n+  L6 = foo6;\n+}\n+#ifdef PROTOTYPES\n+void Fun7(struct struct7 foo7)\n+#else\n+void Fun7(foo7)\n+     struct struct7 foo7;\n+#endif\n+{\n+  L7 = foo7;\n+}\n+#ifdef PROTOTYPES\n+void Fun8(struct struct8 foo8)\n+#else\n+void Fun8(foo8)\n+     struct struct8 foo8;\n+#endif\n+{\n+  L8 = foo8;\n+}\n+#ifdef PROTOTYPES\n+void Fun9(struct struct9 foo9)\n+#else\n+void Fun9(foo9)\n+     struct struct9 foo9;\n+#endif\n+{\n+  L9 = foo9;\n+}\n+#ifdef PROTOTYPES\n+void Fun10(struct struct10 foo10)\n+#else\n+void Fun10(foo10)\n+     struct struct10 foo10;\n+#endif\n+{\n+  L10 = foo10; \n+}\n+#ifdef PROTOTYPES\n+void Fun11(struct struct11 foo11)\n+#else\n+void Fun11(foo11)\n+     struct struct11 foo11;\n+#endif\n+{\n+  L11 = foo11; \n+}\n+#ifdef PROTOTYPES\n+void Fun12(struct struct12 foo12)\n+#else\n+void Fun12(foo12)\n+     struct struct12 foo12;\n+#endif\n+{\n+  L12 = foo12; \n+}\n+#ifdef PROTOTYPES\n+void Fun16(struct struct16 foo16)\n+#else\n+void Fun16(foo16)\n+     struct struct16 foo16;\n+#endif\n+{\n+  L16 = foo16; \n+}\n+\n+int main()\n+{\n+#ifdef usestubs\n+  set_debug_traps();\n+  breakpoint();\n+#endif\n+\n+  /* TEST C FUNCTIONS */\n+  L1  = fun1();\t\n+  L2  = fun2();\t\n+  L3  = fun3();\t\n+  L4  = fun4();\t\n+  L5  = fun5();\t\n+  L6  = fun6();\t\n+  L7  = fun7();\t\n+  L8  = fun8();\t\n+  L9  = fun9();\t\n+  L10 = fun10();\n+  L11 = fun11();\n+  L12 = fun12();\n+  L16 = fun16();\n+\n+  foo1.a = foo2.a = foo3.a = foo4.a = foo5.a = foo6.a = foo7.a = foo8.a =\n+    foo9.a = foo10.a = foo11.a = foo12.a = foo16.a = '$';\n+\n+  Fun1(foo1);\t\n+  Fun2(foo2);\t\n+  Fun3(foo3);\t\n+  Fun4(foo4);\t\n+  Fun5(foo5);\t\n+  Fun6(foo6);\t\n+  Fun7(foo7);\t\n+  Fun8(foo8);\t\n+  Fun9(foo9);\t\n+  Fun10(foo10);\n+  Fun11(foo11);\n+  Fun12(foo12);\n+  Fun16(foo16);\n+\n+  return 0;\n+}"}]}