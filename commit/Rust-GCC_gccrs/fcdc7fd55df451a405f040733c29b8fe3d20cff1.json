{"sha": "fcdc7fd55df451a405f040733c29b8fe3d20cff1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNkYzdmZDU1ZGY0NTFhNDA1ZjA0MDczM2MyOWI4ZmUzZDIwY2ZmMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-12-14T10:53:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-12-14T10:53:41Z"}, "message": "dwarf2out.c (analyze_discr_in_predicate): Simplify.\n\n\t* dwarf2out.c (analyze_discr_in_predicate): Simplify.\n\t(analyze_variants_discr): Deal with naked boolean discriminants.\nada/\n\t* gcc-interface/decl.c (choices_to_gnu): Directly use a naked boolean\n\tdiscriminant if the value is the boolean true.\n\nFrom-SVN: r267130", "tree": {"sha": "4df96b3c4eb8310d8d483978186ec49bb6cb75de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4df96b3c4eb8310d8d483978186ec49bb6cb75de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcdc7fd55df451a405f040733c29b8fe3d20cff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcdc7fd55df451a405f040733c29b8fe3d20cff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcdc7fd55df451a405f040733c29b8fe3d20cff1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcdc7fd55df451a405f040733c29b8fe3d20cff1/comments", "author": null, "committer": null, "parents": [{"sha": "544a4843e8873ce0dc08b2e1cde8978b15d23628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544a4843e8873ce0dc08b2e1cde8978b15d23628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544a4843e8873ce0dc08b2e1cde8978b15d23628"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "3e3402201cdb63b7dde555a8711c42d6dafe076c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcdc7fd55df451a405f040733c29b8fe3d20cff1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcdc7fd55df451a405f040733c29b8fe3d20cff1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcdc7fd55df451a405f040733c29b8fe3d20cff1", "patch": "@@ -1,3 +1,8 @@\n+2018-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.c (analyze_discr_in_predicate): Simplify.\n+\t(analyze_variants_discr): Deal with naked boolean discriminants.\n+\n 2018-12-14  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_restore_callee_milli) Don't clobber off"}, {"sha": "9fa05898b2db15cdaf28228a1d73f109d9ea0eb8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcdc7fd55df451a405f040733c29b8fe3d20cff1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcdc7fd55df451a405f040733c29b8fe3d20cff1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fcdc7fd55df451a405f040733c29b8fe3d20cff1", "patch": "@@ -1,3 +1,8 @@\n+2018-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (choices_to_gnu): Directly use a naked boolean\n+\tdiscriminant if the value is the boolean true.\n+\n 2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/88429\n@@ -170,8 +175,8 @@\n \tretrieve directly its RM size.\n \t(components_to_record): Minor tweak.\n \t(set_rm_size): Remove useless test.\n-\t* gcc-interface/trans.c (gnat_to_gnu): Do wrap the instance of a\n-\tboolean discriminant attached to a variant part.\n+\t* gcc-interface/trans.c (gnat_to_gnu): Do not wrap the instance of\n+\ta boolean discriminant attached to a variant part.\n \n 2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n \n@@ -289,8 +294,7 @@\n \n \t* fe.h (Is_Atomic_Object): Declare.\n \t(Is_Volatile_Object): Likewise.\n-\t* gcc-interface/trans.c (atomic_or_volatile_copy_required_p):\n-\tNew.\n+\t* gcc-interface/trans.c (atomic_or_volatile_copy_required_p): New.\n \t(Call_to_gnu): Generate a copy for an actual parameter passed by\n \treference if the conditions set forth by RM C.6(19) are met and\n \tspecificially deal with an atomic actual parameter."}, {"sha": "0ad06f1a9f1149efc9217d6f55cef4e8d3a84b03", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcdc7fd55df451a405f040733c29b8fe3d20cff1/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcdc7fd55df451a405f040733c29b8fe3d20cff1/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=fcdc7fd55df451a405f040733c29b8fe3d20cff1", "patch": "@@ -6848,6 +6848,9 @@ choices_to_gnu (tree gnu_operand, Node_Id gnat_choices)\n \t\t\t     build_binary_op (LE_EXPR, boolean_type_node,\n \t\t\t\t\t      gnu_operand, gnu_high, true),\n \t\t\t     true);\n+      else if (gnu_low == boolean_true_node\n+\t       && TREE_TYPE (gnu_operand) == boolean_type_node)\n+\tgnu_test = gnu_operand;\n       else if (gnu_low)\n \tgnu_test\n \t  = build_binary_op (EQ_EXPR, boolean_type_node, gnu_operand, gnu_low,"}, {"sha": "cb5cc0129e1f622a183aa2c9c67c46d4d1127964", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcdc7fd55df451a405f040733c29b8fe3d20cff1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcdc7fd55df451a405f040733c29b8fe3d20cff1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fcdc7fd55df451a405f040733c29b8fe3d20cff1", "patch": "@@ -24537,6 +24537,7 @@ gen_inheritance_die (tree binfo, tree access, tree type,\n \n /* Return whether DECL is a FIELD_DECL that represents the variant part of a\n    structure.  */\n+\n static bool\n is_variant_part (tree decl)\n {\n@@ -24550,17 +24551,8 @@ is_variant_part (tree decl)\n static tree\n analyze_discr_in_predicate (tree operand, tree struct_type)\n {\n-  bool continue_stripping = true;\n-  while (continue_stripping)\n-    switch (TREE_CODE (operand))\n-      {\n-      CASE_CONVERT:\n-\toperand = TREE_OPERAND (operand, 0);\n-\tbreak;\n-      default:\n-\tcontinue_stripping = false;\n-\tbreak;\n-      }\n+  while (CONVERT_EXPR_P (operand))\n+    operand = TREE_OPERAND (operand, 0);\n \n   /* Match field access to members of struct_type only.  */\n   if (TREE_CODE (operand) == COMPONENT_REF\n@@ -24780,6 +24772,19 @@ analyze_variants_discr (tree variant_part_decl,\n \t      new_node->dw_discr_range = true;\n \t    }\n \n+\t  else if ((candidate_discr\n+\t\t      = analyze_discr_in_predicate (match_expr, struct_type))\n+\t\t   && TREE_TYPE (candidate_discr) == boolean_type_node)\n+\t    {\n+\t      /* We are matching:  <discr_field> for a boolean discriminant.\n+\t\t This sub-expression matches boolean_true_node.  */\n+\t      new_node = ggc_cleared_alloc<dw_discr_list_node> ();\n+\t      if (!get_discr_value (boolean_true_node,\n+\t\t\t\t    &new_node->dw_discr_lower_bound))\n+\t\tgoto abort;\n+\t      new_node->dw_discr_range = false;\n+\t    }\n+\n \t  else\n \t    /* Unsupported sub-expression: we cannot determine the set of\n \t       matching discriminant values.  Abort everything.  */"}]}