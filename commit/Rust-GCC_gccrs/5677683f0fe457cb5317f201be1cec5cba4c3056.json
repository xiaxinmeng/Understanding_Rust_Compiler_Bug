{"sha": "5677683f0fe457cb5317f201be1cec5cba4c3056", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY3NzY4M2YwZmU0NTdjYjUzMTdmMjAxYmUxY2VjNWNiYTRjMzA1Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-03-14T17:26:38Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-03-14T17:26:38Z"}, "message": "Add test-case (PR ipa/84805).\n\n2018-03-14  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/8480\n\t* g++.dg/lto/pr84805_0.C: New test.\n\t* g++.dg/lto/pr84805_1.C: New test.\n\t* g++.dg/lto/pr84805_2.C: New test.\n\nFrom-SVN: r258529", "tree": {"sha": "0d9f059872f7b99431c33117976c219dff483499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d9f059872f7b99431c33117976c219dff483499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5677683f0fe457cb5317f201be1cec5cba4c3056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5677683f0fe457cb5317f201be1cec5cba4c3056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5677683f0fe457cb5317f201be1cec5cba4c3056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5677683f0fe457cb5317f201be1cec5cba4c3056/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "082284da9d8069290a749218b6aebecab0da2868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082284da9d8069290a749218b6aebecab0da2868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/082284da9d8069290a749218b6aebecab0da2868"}], "stats": {"total": 304, "additions": 304, "deletions": 0}, "files": [{"sha": "7217468eb73185feea20e354b73fab36b5b59c67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5677683f0fe457cb5317f201be1cec5cba4c3056/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5677683f0fe457cb5317f201be1cec5cba4c3056/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5677683f0fe457cb5317f201be1cec5cba4c3056", "patch": "@@ -1,3 +1,10 @@\n+2018-03-14  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/8480\n+\t* g++.dg/lto/pr84805_0.C: New test.\n+\t* g++.dg/lto/pr84805_1.C: New test.\n+\t* g++.dg/lto/pr84805_2.C: New test.\n+\n 2018-03-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/84852"}, {"sha": "c34c6340201c8d80282e2db03f2ff7744ead5075", "filename": "gcc/testsuite/g++.dg/lto/pr84805_0.C", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5677683f0fe457cb5317f201be1cec5cba4c3056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5677683f0fe457cb5317f201be1cec5cba4c3056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C?ref=5677683f0fe457cb5317f201be1cec5cba4c3056", "patch": "@@ -0,0 +1,151 @@\n+// { dg-lto-do link }\n+// { dg-lto-options {{-O2 -fPIC -shared -flto}} }\n+\n+template < typename _Tp, _Tp __v > struct integral_constant {\n+  static constexpr _Tp value = __v;\n+};\n+typedef integral_constant< bool, false > false_type;\n+struct __is_void_helper : false_type {};\n+struct is_void : __is_void_helper {};\n+template < typename > struct is_array : false_type {};\n+namespace __gnu_cxx {\n+enum _Lock_policy { _S_single, _S_mutex, _S_atomic };\n+const _Lock_policy __default_lock_policy = _S_atomic;\n+} namespace std {\n+using __gnu_cxx::_Lock_policy;\n+using __gnu_cxx::__default_lock_policy;\n+template < _Lock_policy = __default_lock_policy > class _Sp_counted_base;\n+template < typename, _Lock_policy = __default_lock_policy > class __shared_ptr;\n+template < _Lock_policy > class __shared_count { _Sp_counted_base<> *_M_pi; };\n+template < typename _Tp, _Lock_policy, bool = is_array< _Tp >::value,\n+           bool = is_void::value >\n+class __shared_ptr_access {};\n+template < typename _Tp, _Lock_policy _Lp >\n+class __shared_ptr : __shared_ptr_access< _Tp, _Lp > {\n+  using element_type = _Tp;\n+  element_type *_M_ptr;\n+  __shared_count< _Lp > _M_refcount;\n+};\n+template < typename _Tp > class shared_ptr : __shared_ptr< _Tp > {};\n+} typedef struct _rtl_String rtl_String;\n+typedef struct _rtl_uString rtl_uString;\n+namespace rtl {\n+class OString {\n+  rtl_String *pData;\n+};\n+} using rtl::OString;\n+namespace rtl {\n+class OUString {\n+  rtl_uString *pData;\n+};\n+} using rtl::OUString;\n+namespace tools {\n+template < typename T > class SvRef {\n+T *pObj;\n+};\n+} class SvRefBase {\n+  unsigned nRefCount : 31;\n+  unsigned bNoDelete : 1;\n+\n+protected:\n+  virtual ~SvRefBase();\n+};\n+class ErrCode {\n+  unsigned m_value;\n+};\n+class SvStream;\n+class SfxMedium;\n+struct strong_int {\n+  unsigned short m_value;\n+};\n+typedef strong_int LanguageType;\n+class SotObject : virtual SvRefBase {\n+  unsigned short nOwnerLockCount;\n+  bool bInClose;\n+};\n+class BaseStorage;\n+class SotStorage : virtual SotObject {\n+  BaseStorage *m_pOwnStg;\n+  SvStream *m_pStorStm;\n+  ErrCode m_nError;\n+  OUString m_aName;\n+  bool m_bIsRoot;\n+  bool m_bDelStm;\n+  OString m_aKey;\n+  int m_nVersion;\n+};\n+class ScDocument;\n+class ScAddress {\n+  int nRow;\n+  short nCol;\n+  short nTab;\n+};\n+enum XclBiff {};\n+enum XclOutput {};\n+enum BiffTyp {};\n+class SharedFormulaBuffer;\n+class ExtNameBuff;\n+class ExtSheetBuffer;\n+class ExcelToSc;\n+class XclImpColRowSettings;\n+struct RootData {\n+  BiffTyp eDateiTyp;\n+  ExtSheetBuffer *pExtSheetBuff;\n+  SharedFormulaBuffer *pShrfmlaBuff;\n+  ExtNameBuff *pExtNameBuff;\n+  ExcelToSc *pFmlaConverter;\n+  XclImpColRowSettings *pColRowBuff;\n+};\n+class ScEditEngineDefaulter;\n+class ScHeaderEditEngine;\n+class EditEngine;\n+class ScExtDocOptions;\n+class XclFontPropSetHelper;\n+class XclChPropSetHelper;\n+class XclTracer;\n+struct XclRootData { // { dg-lto-warning \"8: type 'struct XclRootData' violates the C\\\\+\\\\+ One Definition Rule\" }\n+  typedef std::shared_ptr< ScEditEngineDefaulter > ScEEDefaulterRef;\n+  typedef std::shared_ptr< ScHeaderEditEngine > ScHeaderEERef;\n+  typedef std::shared_ptr< EditEngine > EditEngineRef;\n+  typedef std::shared_ptr< XclFontPropSetHelper > XclFontPropSetHlpRef;\n+  typedef std::shared_ptr< XclChPropSetHelper > XclChPropSetHlpRef;\n+  typedef std::shared_ptr< ScExtDocOptions > ScExtDocOptRef;\n+  typedef std::shared_ptr< XclTracer > XclTracerRef;\n+  typedef std::shared_ptr< RootData > RootDataRef;\n+  XclBiff meBiff;\n+  XclOutput meOutput;\n+  SfxMedium &mrMedium;\n+  tools::SvRef< SotStorage > mxRootStrg;\n+  ScDocument &mrDoc;\n+  OUString maDocUrl;\n+  OUString maBasePath;\n+  OUString maUserName;\n+  OUString maDefPassword;\n+  unsigned short meTextEnc;\n+  LanguageType meSysLang;\n+  LanguageType meDocLang;\n+  LanguageType meUILang;\n+  short mnDefApiScript;\n+  ScAddress maScMaxPos;\n+  ScAddress maXclMaxPos;\n+  ScAddress maMaxPos;\n+  ScEEDefaulterRef mxEditEngine;\n+  ScHeaderEERef mxHFEditEngine;\n+  EditEngineRef mxDrawEditEng;\n+  XclFontPropSetHlpRef mxFontPropSetHlp;\n+  XclChPropSetHlpRef mxChPropSetHlp;\n+  ScExtDocOptRef mxExtDocOpt;\n+  XclTracerRef mxTracer;\n+  RootDataRef mxRD;\n+  virtual ~XclRootData();\n+};\n+class XclRoot { // { dg-lto-warning \"7: type 'struct XclRoot' violates the C\\\\+\\\\+ One Definition Rule\" }\n+public:\n+  virtual ~XclRoot();\n+  XclRootData &mrData;\n+};\n+class XclImpRoot : XclRoot {}; // { dg-lto-warning \"7: type 'struct XclImpRoot' violates the C\\\\+\\\\+ One Definition Rule\" }\n+class XclImpColRowSettings : XclImpRoot {};\n+void lcl_ExportExcelBiff() {\n+XclRootData aExpData();\n+}"}, {"sha": "c59a37c5fc0a15aac40d2c4528332cb7c095cef8", "filename": "gcc/testsuite/g++.dg/lto/pr84805_1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5677683f0fe457cb5317f201be1cec5cba4c3056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5677683f0fe457cb5317f201be1cec5cba4c3056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_1.C?ref=5677683f0fe457cb5317f201be1cec5cba4c3056", "patch": "@@ -0,0 +1,15 @@\n+class XclRoot {\n+public:\n+  virtual ~XclRoot();\n+};\n+class XclImpRoot : XclRoot {};\n+struct RootData { // { dg-lto-warning \"8: type 'struct RootData' violates the C\\\\+\\\\+ One Definition Rule\" }\n+  XclImpRoot pIR;\n+};\n+class ExcRoot {\n+RootData pExcRoot;\n+};\n+class XclImpAutoFilterData : ExcRoot {\n+  void SetExtractPos(const int &);\n+};\n+void XclImpAutoFilterData::SetExtractPos(const int &) {}"}, {"sha": "a043dac66749bcc288ed85f721792a0e84eb7ded", "filename": "gcc/testsuite/g++.dg/lto/pr84805_2.C", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5677683f0fe457cb5317f201be1cec5cba4c3056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5677683f0fe457cb5317f201be1cec5cba4c3056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_2.C?ref=5677683f0fe457cb5317f201be1cec5cba4c3056", "patch": "@@ -0,0 +1,131 @@\n+template < typename a, a b > struct c { static constexpr a d = b; };\n+typedef c< bool, false > e;\n+struct f : e {};\n+struct t : f {};\n+template < typename > struct g : e {};\n+namespace __gnu_cxx {\n+enum _Lock_policy { h, i, j } const k = j;\n+}\n+namespace std {\n+using __gnu_cxx::_Lock_policy;\n+using __gnu_cxx::k;\n+template < _Lock_policy = k > class _Sp_counted_base;\n+template < typename, _Lock_policy = k > class __shared_ptr;\n+template < _Lock_policy > class __shared_count { _Sp_counted_base<> *_M_pi; };\n+template < typename a, _Lock_policy, bool = g< a >::d, bool = t::d >\n+class __shared_ptr_access {};\n+template < typename a, _Lock_policy l >\n+class __shared_ptr : __shared_ptr_access< a, l > { // { dg-lto-warning \"7: type 'struct __shared_ptr' violates the C\\\\+\\\\+ One Definition Rule\" }\n+  using m = a;\n+  m *_M_ptr;\n+  __shared_count< l > _M_refcount;\n+};\n+template < typename a > class n : __shared_ptr< a > {};\n+} namespace rtl {\n+class OString {\n+  struct o *pData;\n+};\n+} using rtl::OString;\n+namespace rtl {\n+class OUString {\n+  struct p *pData;\n+};\n+} using rtl::OUString;\n+struct q {\n+  unsigned short m_value;\n+};\n+namespace tools {\n+template < typename r > class SvRef { r *pObj; };\n+} class SvRefBase {\n+  unsigned nRefCount : 31;\n+  unsigned bNoDelete : 1;\n+\n+protected:\n+  virtual ~SvRefBase();\n+};\n+class SotObject : virtual SvRefBase {\n+  unsigned short nOwnerLockCount;\n+  bool bInClose;\n+};\n+class ErrCode {\n+  unsigned m_value;\n+};\n+class SvStream;\n+class BaseStorage;\n+class SotStorage : virtual SotObject {\n+  BaseStorage *m_pOwnStg;\n+  SvStream *m_pStorStm;\n+  ErrCode m_nError;\n+  OUString m_aName;\n+  bool m_bIsRoot;\n+  bool m_bDelStm;\n+  OString m_aKey;\n+  int m_nVersion;\n+};\n+class ScDocument;\n+class ScAddress {\n+  int nRow;\n+  short nCol;\n+  short nTab;\n+};\n+enum XclBiff {};\n+enum XclOutput {};\n+class SfxMedium;\n+class ScEditEngineDefaulter;\n+class ScHeaderEditEngine;\n+class EditEngine;\n+class ScExtDocOptions;\n+class XclFontPropSetHelper;\n+class XclChPropSetHelper;\n+class XclTracer;\n+struct RootData;\n+struct XclRootData {\n+  XclBiff meBiff;\n+  XclOutput meOutput;\n+  SfxMedium &mrMedium;\n+  tools::SvRef< SotStorage > mxRootStrg;\n+  ScDocument &mrDoc;\n+  OUString maDocUrl;\n+  OUString maBasePath;\n+  OUString maUserName;\n+  OUString maDefPassword;\n+  unsigned short meTextEnc;\n+  q meSysLang;\n+  q meDocLang;\n+  q meUILang;\n+  short mnDefApiScript;\n+  ScAddress maScMaxPos;\n+  ScAddress maXclMaxPos;\n+  ScAddress maMaxPos;\n+  std::n< ScEditEngineDefaulter > mxEditEngine;\n+  std::n< ScHeaderEditEngine > mxHFEditEngine;\n+  std::n< EditEngine > mxDrawEditEng;\n+  std::n< XclFontPropSetHelper > mxFontPropSetHlp;\n+  std::n< XclChPropSetHelper > mxChPropSetHlp;\n+  std::n< ScExtDocOptions > mxExtDocOpt;\n+  std::n< XclTracer > mxTracer;\n+  std::n< RootData > mxRD;\n+  virtual ~XclRootData();\n+};\n+class XclRoot {\n+  virtual ~XclRoot();\n+  XclRootData &mrData;\n+};\n+enum BiffTyp {};\n+class SharedFormulaBuffer;\n+class ExtNameBuff;\n+class ExtSheetBuffer;\n+class ExcelToSc;\n+class XclImpColRowSettings;\n+class XclImpRoot;\n+struct RootData {\n+  BiffTyp eDateiTyp;\n+  ExtSheetBuffer *pExtSheetBuff;\n+  SharedFormulaBuffer *pShrfmlaBuff;\n+  ExtNameBuff *pExtNameBuff;\n+  ExcelToSc *pFmlaConverter;\n+  XclImpColRowSettings *pColRowBuff;\n+  XclImpRoot *s;\n+};\n+XclRootData::~XclRootData() {}\n+XclRoot::~XclRoot() {}"}]}