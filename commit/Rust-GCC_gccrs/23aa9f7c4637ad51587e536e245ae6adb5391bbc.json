{"sha": "23aa9f7c4637ad51587e536e245ae6adb5391bbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNhYTlmN2M0NjM3YWQ1MTU4N2U1MzZlMjQ1YWU2YWRiNTM5MWJiYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-08-13T17:57:51Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-08-13T17:57:51Z"}, "message": "PR tree-optimization/71625 - missing strlen optimization on different array initialization style\n\ngcc/c/ChangeLog:\n\n\tPR tree-optimization/71625\n\t* c-parser.c (c_parser_declaration_or_fndef): Call\n\tbraced_list_to_string.\n\ngcc/c-family/ChangeLog:\n\n\tPR tree-optimization/71625\n\t* c-common.c (braced_list_to_string): New function.\n\t* c-common.h (braced_list_to_string): Declare it.\n\ngcc/cp/ChangeLog:\n\n\tPR tree-optimization/71625\n\t* decl.c (check_initializer):  Call braced_list_to_string.\n\t(eval_check_narrowing): New function.\n\t* gcc/cp/typeck2.c (digest_init_r): Accept strings literals\n\tas initilizers for all narrow character types.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/71625\n\n\t* g++.dg/init/string2.C: New test.\n\t* g++.dg/init/string3.C: New test.\n\t* g++.dg/init/string4.C: New test.\n\t* gcc.dg/init-string-3.c: New test.\n\t* gcc.dg/strlenopt-55.c: New test.\n\t* gcc.dg/strlenopt-56.c: New test.\n\nFrom-SVN: r263511", "tree": {"sha": "f8eac004f5eeb0fa8a2376e0ab0e5fb0844532e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8eac004f5eeb0fa8a2376e0ab0e5fb0844532e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23aa9f7c4637ad51587e536e245ae6adb5391bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23aa9f7c4637ad51587e536e245ae6adb5391bbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23aa9f7c4637ad51587e536e245ae6adb5391bbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23aa9f7c4637ad51587e536e245ae6adb5391bbc/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6a1e5fe7346458208ede97741382061a6191024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a1e5fe7346458208ede97741382061a6191024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a1e5fe7346458208ede97741382061a6191024"}], "stats": {"total": 712, "additions": 709, "deletions": 3}, "files": [{"sha": "3aec883dd1a5855c64fc2504ecd672097284d0aa", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -1,3 +1,9 @@\n+2018-08-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/71625\n+\t* c-common.c (braced_list_to_string): New function.\n+\t* c-common.h (braced_list_to_string): Declare it.\n+\n 2018-08-08  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-common.c (try_to_locate_new_include_inertion_point): Use"}, {"sha": "55b2e5049c09be8b18319a2d7aae07220c1a6bf3", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -8509,4 +8509,96 @@ maybe_add_include_fixit (rich_location *richloc, const char *header)\n   free (text);\n }\n \n+/* Attempt to convert a braced array initializer list CTOR for array\n+   TYPE into a STRING_CST for convenience and efficiency.  When non-null,\n+   use EVAL to attempt to evalue constants (used by C++).  Return\n+   the converted string on success or null on failure.  */\n+\n+tree\n+braced_list_to_string (tree type, tree ctor, tree (*eval)(tree, tree))\n+{\n+  unsigned HOST_WIDE_INT nelts = CONSTRUCTOR_NELTS (ctor);\n+\n+  /* If the array has an explicit bound, use it to constrain the size\n+     of the string.  If it doesn't, be sure to create a string that's\n+     as long as implied by the index of the last zero specified via\n+     a designator, as in:\n+       const char a[] = { [7] = 0 };  */\n+  unsigned HOST_WIDE_INT maxelts = HOST_WIDE_INT_M1U;\n+  if (tree size = TYPE_SIZE_UNIT (type))\n+    {\n+      if (tree_fits_uhwi_p (size))\n+\t{\n+\t  maxelts = tree_to_uhwi (size);\n+\t  maxelts /= tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (type)));\n+\n+\t  /* Avoid converting initializers for zero-length arrays.  */\n+\t  if (!maxelts)\n+\t    return NULL_TREE;\n+\t}\n+    }\n+  else if (!nelts)\n+    /* Avoid handling the undefined/erroneous case of an empty\n+       initializer for an arrays with unspecified bound.  */\n+    return NULL_TREE;\n+\n+  tree eltype = TREE_TYPE (type);\n+\n+  auto_vec<char> str;\n+  str.reserve (nelts + 1);\n+\n+  unsigned HOST_WIDE_INT i;\n+  tree index, value;\n+\n+  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), i, index, value)\n+    {\n+      unsigned HOST_WIDE_INT idx = index ? tree_to_uhwi (index) : i;\n+\n+      /* auto_vec is limited to UINT_MAX elements.  */\n+      if (idx > UINT_MAX)\n+\treturn NULL_TREE;\n+\n+      /* Attempt to evaluate constants.  */\n+      if (eval)\n+\tvalue = eval (eltype, value);\n+\n+      /* Avoid non-constant initializers.  */\n+     if (!tree_fits_shwi_p (value))\n+\treturn NULL_TREE;\n+\n+      /* Skip over embedded nuls except the last one (initializer\n+\t elements are in ascending order of indices).  */\n+      HOST_WIDE_INT val = tree_to_shwi (value);\n+      if (!val && i + 1 < nelts)\n+\tcontinue;\n+\n+      /* Bail if the CTOR has a block of more than 256 embedded nuls\n+\t due to implicitly initialized elements.  */\n+      unsigned nchars = (idx - str.length ()) + 1;\n+      if (nchars > 256)\n+\treturn NULL_TREE;\n+\n+      if (nchars > 1)\n+\t{\n+\t  str.reserve (idx);\n+\t  str.quick_grow_cleared (idx);\n+\t}\n+\n+      if (idx > maxelts)\n+\treturn NULL_TREE;\n+\n+      str.safe_insert (idx, val);\n+    }\n+\n+  if (!nelts)\n+    /* Append a nul for the empty initializer { }.  */\n+    str.safe_push (0);\n+\n+  /* Build a STRING_CST with the same type as the array, which\n+     may be an array of unknown bound.  */\n+  tree res = build_string (str.length (), str.begin ());\n+  TREE_TYPE (res) = type;\n+  return res;\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "8a802bbb09c787ba6d7c4287ef03e0828bba1484", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -1331,6 +1331,7 @@ extern void maybe_add_include_fixit (rich_location *, const char *);\n extern void maybe_suggest_missing_token_insertion (rich_location *richloc,\n \t\t\t\t\t\t   enum cpp_ttype token_type,\n \t\t\t\t\t\t   location_t prev_token_loc);\n+extern tree braced_list_to_string (tree, tree, tree (*)(tree, tree) = NULL);\n \n #if CHECKING_P\n namespace selftest {"}, {"sha": "be2ffbd2adebf11618241a2e21f737751d1c3c86", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -1,3 +1,9 @@\n+2018-08-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/71625\n+\t* c-parser.c (c_parser_declaration_or_fndef): Call\n+\tbraced_list_to_string.\n+\n 2018-08-03  Bogdan Harjoc  <harjoc@gmail.com>\n \n \tPR c/86690"}, {"sha": "5ad4f57a4fe7883651cb46c44e60128c64ca16ed", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -2126,6 +2126,15 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t      if (d != error_mark_node)\n \t\t{\n \t\t  maybe_warn_string_init (init_loc, TREE_TYPE (d), init);\n+\n+\t\t  /* Try to convert a string CONSTRUCTOR into a STRING_CST.  */\n+\t\t  tree valtype = TREE_TYPE (init.value);\n+\t\t  if (TREE_CODE (init.value) == CONSTRUCTOR\n+\t\t      && TREE_CODE (valtype) == ARRAY_TYPE\n+\t\t      && TYPE_STRING_FLAG (TREE_TYPE (valtype)))\n+\t\t    if (tree str = braced_list_to_string (valtype, init.value))\n+\t\t      init.value = str;\n+\n \t\t  finish_decl (d, init_loc, init.value,\n \t\t\t       init.original_type, asm_name);\n \t\t}"}, {"sha": "e4984bdb17be9d60f25bfdb47020e3b8e2af571e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -1,3 +1,11 @@\n+2018-08-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/71625\n+\t* decl.c (check_initializer):  Call braced_list_to_string.\n+\t(eval_check_narrowing): New function.\n+\t* gcc/cp/typeck2.c (digest_init_r): Accept strings literals\n+\tas initilizers for all narrow character types.\n+\n 2018-08-13  Marek Polacek  <polacek@redhat.com>\n \n \tP0806R2 - Deprecate implicit capture of this via [=]"}, {"sha": "97f1cfb792e76e7b05c865ee80cbd0b933557678", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -6282,6 +6282,30 @@ build_aggr_init_full_exprs (tree decl, tree init, int flags)\n   return build_aggr_init (decl, init, flags, tf_warning_or_error);\n }\n \n+/* Attempt to determine the constant VALUE of integral type and convert\n+   it to TYPE, issuing narrowing warnings/errors as necessary.  Return\n+   the constant result or null on failure.  Callback for\n+   braced_list_to_string.  */\n+\n+static tree\n+eval_check_narrowing (tree type, tree value)\n+{\n+  if (tree valtype = TREE_TYPE (value))\n+    {\n+      if (TREE_CODE (valtype) != INTEGER_TYPE)\n+\treturn NULL_TREE;\n+    }\n+  else\n+    return NULL_TREE;\n+\n+  value = scalar_constant_value (value);\n+  if (!value)\n+    return NULL_TREE;\n+\n+  check_narrowing (type, value, tf_warning_or_error);\n+  return value;\n+}\n+\n /* Verify INIT (the initializer for DECL), and record the\n    initialization in DECL_INITIAL, if appropriate.  CLEANUP is as for\n    grok_reference_init.\n@@ -6397,7 +6421,17 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t    }\n \t  else\n \t    {\n-\t      init = reshape_init (type, init, tf_warning_or_error);\n+\t      /* Try to convert a string CONSTRUCTOR into a STRING_CST.  */\n+\t      tree valtype = TREE_TYPE (decl);\n+\t      if (TREE_CODE (valtype) == ARRAY_TYPE\n+\t\t  && TYPE_STRING_FLAG (TREE_TYPE (valtype))\n+\t\t  && BRACE_ENCLOSED_INITIALIZER_P (init))\n+\t\tif (tree str = braced_list_to_string (valtype, init,\n+\t\t\t\t\t\t      eval_check_narrowing))\n+\t\t  init = str;\n+\n+\t      if (TREE_CODE (init) != STRING_CST)\n+\t\tinit = reshape_init (type, init, tf_warning_or_error);\n \t      flags |= LOOKUP_NO_NARROWING;\n \t    }\n \t}"}, {"sha": "72515d9ece718561f9fca2c4d0410f358b69587f", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -1056,7 +1056,9 @@ digest_init_r (tree type, tree init, int nested, int flags,\n \n \t  if (TYPE_PRECISION (typ1) == BITS_PER_UNIT)\n \t    {\n-\t      if (char_type != char_type_node)\n+\t      if (char_type != char_type_node\n+\t\t  && char_type != signed_char_type_node\n+\t\t  && char_type != unsigned_char_type_node)\n \t\t{\n \t\t  if (complain & tf_error)\n \t\t    error_at (loc, \"char-array initialized from wide string\");"}, {"sha": "ad2610b91b5e7a9bc6829b89e2eec8a23189c2a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -1,3 +1,14 @@\n+2018-08-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/71625\n+\t* c-c++-common/attr-nonstring-3.c: Temporarily xfail a test case.\n+\t* g++.dg/init/string2.C: New test.\n+\t* g++.dg/init/string3.C: New test.\n+\t* g++.dg/init/string4.C: New test.\n+\t* gcc.dg/init-string-3.c: New test.\n+\t* gcc.dg/strlenopt-55.c: New test.\n+\t* gcc.dg/strlenopt-56.c: New test.\n+\n 2018-08-13  Marek Polacek  <polacek@redhat.com>\n \n \tP0806R2 - Deprecate implicit capture of this via [=]"}, {"sha": "a2aaf7bda109b3ea1ecb7b3461563fa7770e3da3", "filename": "gcc/testsuite/c-c++-common/attr-nonstring-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nonstring-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nonstring-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nonstring-3.c?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -406,7 +406,7 @@ void test_strlen (struct MemArrays *p, char *s NONSTRING, size_t n)\n   {\n     char a[] __attribute__ ((nonstring)) = { 1, 2, 3 };\n \n-    T (strlen (a));             /* { dg-warning \"argument 1 declared attribute .nonstring.\" } */\n+    T (strlen (a));             /* { dg-warning \"argument 1 declared attribute .nonstring.\" \"pr86688\" { xfail *-*-* } } */\n   }\n \n   {"}, {"sha": "5da13bd81b073767abb273f680f6d319c8b96bd3", "filename": "gcc/testsuite/g++.dg/init/string2.C", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring2.C?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -0,0 +1,104 @@\n+// PR tree-optimization/71625 - missing strlen optimization on different\n+// array initialization style\n+//\n+// Verify that strlen() calls with constant character array arguments\n+// initialized with string constants are folded.  (This is a small\n+// subset of pr71625).\n+// { dg-do compile }\n+// { dg-options \"-O0 -Wno-error=narrowing -fdump-tree-gimple\" }\n+\n+#define A(expr) do { typedef char A[-1 + 2 * !!(expr)]; } while (0)\n+\n+/* This is undefined but accepted without -Wpedantic.  Verify that\n+   the size is zero.  */\n+const char ax[] = { };\n+\n+void size0 ()\n+{\n+  A (sizeof ax == 0);\n+}\n+\n+const char a0[] = { 'a', 'b', 'c', '\\0' };\n+\n+int len0 ()\n+{\n+  return __builtin_strlen (a0);\n+}\n+\n+// Verify that narrowing warnings are preserved.\n+const signed char\n+sa0[] = { 'a', 'b', 255, '\\0' };    // { dg-warning \"\\\\\\[\\(-Wnarrowing|-Woverflow\\)\" \"\" { target { ! c++98_only } } }\n+\n+int lens0 ()\n+{\n+  return __builtin_strlen ((const char*)sa0);\n+}\n+\n+const unsigned char\n+ua0[] = { 'a', 'b', -1, '\\0' };     // { dg-warning \"\\\\\\[\\(-Wnarrowing|-Woverflow\\)\" \"\" { target { ! c++98_only } } }\n+\n+int lenu0 ()\n+{\n+  return __builtin_strlen ((const char*)ua0);\n+}\n+\n+const char c = 0;\n+const char a1[] = { 'a', 'b', 'c', c };\n+\n+int len1 ()\n+{\n+  return __builtin_strlen (a1);\n+}\n+\n+template <class T>\n+int tmplen ()\n+{\n+  static const T\n+    a[] = { 1, 2, 333, 0 };         // { dg-warning \"\\\\\\[\\(-Wnarrowing|-Woverflow\\)\" \"\" { target { ! c++98_only } } }\n+  return __builtin_strlen (a);\n+}\n+\n+template int tmplen<char>();\n+\n+const wchar_t ws4[] = { 1, 2, 3, 4 };\n+const wchar_t ws7[] = { 1, 2, 3, 4, 0, 0, 0 };\n+const wchar_t ws9[9] = { 1, 2, 3, 4, 0 };\n+\n+void wsize ()\n+{\n+  A (sizeof ws4 == 4 * sizeof *ws4);\n+  A (ws4[0] == 1 && ws4[1] == 2 && ws4[2] == 3 && ws4[3] == 4);\n+\n+  A (sizeof ws7 == 7 * sizeof *ws7);\n+  A (ws7[0] == 1 && ws7[1] == 2 && ws7[2] == 3 && ws7[4] == 4\n+     && !ws7[5] && !ws7[6]);\n+\n+  A (sizeof ws9 == 9 * sizeof *ws9);\n+  A (ws9[0] == 1 && ws9[1] == 2 && ws9[2] == 3 && ws9[4] == 4\n+     && !ws9[5] && !ws9[6] && !ws9[7] && !ws9[8]);\n+}\n+\n+#if 0\n+\n+// The following aren't handled.\n+\n+const char &cref = c;\n+const char a2[] = { 'a', 'b', 'c', cref };\n+\n+int len2 ()\n+{\n+  return __builtin_strlen (a2);\n+}\n+\n+\n+const char* const cptr = &cref;\n+const char a3[] = { 'a', 'b', 'c', *cptr };\n+\n+int len3 ()\n+{\n+  return __builtin_strlen (a3);\n+}\n+\n+#endif\n+\n+// { dg-final { scan-tree-dump-times \"strlen\" 0 \"gimple\" } }"}, {"sha": "8212e81dcdeddbf9935bd7a35d7dc09c98105856", "filename": "gcc/testsuite/g++.dg/init/string3.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring3.C?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -0,0 +1,35 @@\n+// PR tree-optimization/71625 - missing strlen optimization on different\n+// array initialization style\n+//\n+// Verify that strlen() call with a constant character array argument\n+// initialized with non-constant elements isn't folded.\n+//\n+// { dg-do compile }\n+// { dg-options \"-O2 -fdump-tree-optimized\" }\n+\n+\n+extern const char c;\n+const char a0[] = { 'a', 'b', 'c', c };\n+\n+int len0 ()\n+{\n+  return __builtin_strlen (a0);\n+}\n+\n+const char &ref = c;\n+const char a1[] = { 'a', 'b', 'c', ref };\n+\n+int len1 ()\n+{\n+  return __builtin_strlen (a1);\n+}\n+\n+const char* const ptr = &c;\n+const char a2[] = { 'a', 'b', 'c', *ptr };\n+\n+int len2 ()\n+{\n+  return __builtin_strlen (a2);\n+}\n+\n+// { dg-final { scan-tree-dump-times \"strlen\" 3 \"optimized\" } }"}, {"sha": "5df417607cb28611e287cfe127f47f5d22eca616", "filename": "gcc/testsuite/g++.dg/init/string4.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstring4.C?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -0,0 +1,60 @@\n+// PR tree-optimization/71625 - missing strlen optimization on different\n+// array initialization style\n+\n+// Verify that zero-length array initialization results in the expected\n+// array sizes and in the expected diagnostics.  See init-string-3.c\n+// for the corresponding C test.\n+\n+// { dg-do compile }\n+// { dg-options \"-Wall -Wno-unused-local-typedefs -fpermissive\" }\n+\n+#define A(expr) typedef char A[-1 + 2 * !!(expr)];\n+\n+const char a[] = { };\n+\n+A (sizeof a == 0);\n+\n+\n+const char b[0] = { };\n+\n+A (sizeof b == 0);\n+\n+// Also verify that the error is \"too many initializers for\n+// 'const char [0]'\" and not \"initializer-string is too long.\"\n+const char c[0] = { 1 };      // { dg-error \"too many initializers for .const char \\\\\\[0]\" }\n+\n+A (sizeof c == 0);\n+\n+\n+void test_auto_empty (void)\n+{\n+  const char a[] = { };\n+\n+  A (sizeof a == 0);\n+}\n+\n+void test_auto_zero_length (void)\n+{\n+  const char a[0] = { };\n+\n+  A (sizeof a == 0);\n+\n+  const char b[0] = { 0 };    // { dg-error \"too many initializers\" }\n+\n+  A (sizeof b == 0);\n+\n+  const char c[0] = \"\";       // { dg-warning \"too long\" }\n+\n+  A (sizeof c == 0);\n+}\n+\n+\n+void test_compound_zero_length (void)\n+{\n+  A (sizeof (const char[]){ } == 0);\n+  A (sizeof (const char[0]){ } == 0);\n+  A (sizeof (const char[0]){ 0 } == 0);    // { dg-error \"too many\" }\n+  A (sizeof (const char[0]){ 1 } == 0);    // { dg-error \"too many\" }\n+  A (sizeof (const char[0]){ \"\" } == 0);   // { dg-warning \"too long\" }\n+  A (sizeof (const char[0]){ \"1\" } == 0);  // { dg-warning \"too long\" }\n+}"}, {"sha": "e955f2e6ce13c6e7a8ac86e4e1ef523af0ecb6a0", "filename": "gcc/testsuite/gcc.dg/init-string-3.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-3.c?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -0,0 +1,58 @@\n+/* PR tree-optimization/71625 - missing strlen optimization on different\n+   array initialization style\n+\n+   Verify that zero-length array initialization results in the expected\n+   array sizes.\n+\n+   { dg-do compile }\n+   { dg-options \"-Wall -Wno-unused-local-typedefs\" }  */\n+\n+#define A(expr) typedef char A[-1 + 2 * !!(expr)];\n+\n+const char a[] = { };\n+\n+A (sizeof a == 0);\n+\n+\n+const char b[0] = { };\n+\n+A (sizeof b == 0);\n+\n+\n+const char c[0] = { 1 };    /* { dg-warning \"excess elements\" } */\n+\n+A (sizeof c == 0);\n+\n+\n+void test_auto_empty (void)\n+{\n+  const char a[] = { };\n+\n+  A (sizeof a == 0);\n+}\n+\n+void test_auto_zero_length (void)\n+{\n+  const char a[0] = { };\n+\n+  A (sizeof a == 0);\n+\n+  const char b[0] = { 0 };    /* { dg-warning \"excess elements\" } */\n+\n+  A (sizeof b == 0);\n+\n+  const char c[0] = \"\";\n+\n+  A (sizeof c == 0);\n+}\n+\n+\n+void test_compound_zero_length (void)\n+{\n+  A (sizeof (const char[]){ } == 0);\n+  A (sizeof (const char[0]){ } == 0);\n+  A (sizeof (const char[0]){ 0 } == 0);   /* { dg-warning \"excess elements\" } */\n+  A (sizeof (const char[0]){ 1 } == 0);   /* { dg-warning \"excess elements\" } */\n+  A (sizeof (const char[0]){ \"\" } == 0);\n+  A (sizeof (const char[0]){ \"1\" } == 0);  /* { dg-warning \"too long\" } */\n+}"}, {"sha": "d5a02953d36ff747a3625e18d9b618b034568d50", "filename": "gcc/testsuite/gcc.dg/strlenopt-55.c", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-55.c?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -0,0 +1,230 @@\n+/* PR tree-optimization/71625 - missing strlen optimization on different\n+   array initialization style\n+\n+   Verify that strlen() of braced initialized array is folded\n+   { dg-do compile }\n+   { dg-options \"-O1 -Wall -fdump-tree-gimple -fdump-tree-optimized\" } */\n+\n+#include \"strlenopt.h\"\n+\n+#define S\t\t\t\t\t\t\t\t\\\n+  \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\"\t\\\n+  \"\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\"\t\\\n+  \"\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\"\t\\\n+  \"\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\"\t\\\n+  \"\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\"\t\\\n+  \"\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\"\t\\\n+  \"\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\"\t\\\n+  \"\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\"\t\\\n+  \"\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\"\t\\\n+  \"\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\"\t\\\n+  \"\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\"\t\\\n+  \"\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\"\t\\\n+  \"\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\"\t\\\n+  \"\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\"\t\\\n+  \"\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\"\t\\\n+  \"\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\"\n+\n+/* Arrays of char, signed char, and unsigned char to verify that\n+   the length and contents of all are the same as that of the string\n+   literal above.  */\n+\n+const char c256[] = {\n+  S[0], S[1], S[2], S[3], S[4], S[5], S[6], S[7], S[8], S[9], S[10],\n+  S[11], S[12], S[13], S[14], S[15], S[16], S[17], S[18], S[19], S[20],\n+  S[21], S[22], S[23], S[24], S[25], S[26], S[27], S[28], S[29], S[30],\n+  S[31], S[32], S[33], S[34], S[35], S[36], S[37], S[38], S[39], S[40],\n+  S[41], S[42], S[43], S[44], S[45], S[46], S[47], S[48], S[49], S[50],\n+  S[51], S[52], S[53], S[54], S[55], S[56], S[57], S[58], S[59], S[60],\n+  S[61], S[62], S[63], S[64], S[65], S[66], S[67], S[68], S[69], S[70],\n+  S[71], S[72], S[73], S[74], S[75], S[76], S[77], S[78], S[79], S[80],\n+  S[81], S[82], S[83], S[84], S[85], S[86], S[87], S[88], S[89], S[90],\n+  S[91], S[92], S[93], S[94], S[95], S[96], S[97], S[98], S[99], S[100],\n+  S[101], S[102], S[103], S[104], S[105], S[106], S[107], S[108], S[109],\n+  S[110], S[111], S[112], S[113], S[114], S[115], S[116], S[117], S[118],\n+  S[119], S[120], S[121], S[122], S[123], S[124], S[125], S[126], S[127],\n+  S[128], S[129], S[130], S[131], S[132], S[133], S[134], S[135], S[136],\n+  S[137], S[138], S[139], S[140], S[141], S[142], S[143], S[144], S[145],\n+  S[146], S[147], S[148], S[149], S[150], S[151], S[152], S[153], S[154],\n+  S[155], S[156], S[157], S[158], S[159], S[160], S[161], S[162], S[163],\n+  S[164], S[165], S[166], S[167], S[168], S[169], S[170], S[171], S[172],\n+  S[173], S[174], S[175], S[176], S[177], S[178], S[179], S[180], S[181],\n+  S[182], S[183], S[184], S[185], S[186], S[187], S[188], S[189], S[190],\n+  S[191], S[192], S[193], S[194], S[195], S[196], S[197], S[198], S[199],\n+  S[200], S[201], S[202], S[203], S[204], S[205], S[206], S[207], S[208],\n+  S[209], S[210], S[211], S[212], S[213], S[214], S[215], S[216], S[217],\n+  S[218], S[219], S[220], S[221], S[222], S[223], S[224], S[225], S[226],\n+  S[227], S[228], S[229], S[230], S[231], S[232], S[233], S[234], S[235],\n+  S[236], S[237], S[238], S[239], S[240], S[241], S[242], S[243], S[244],\n+  S[245], S[246], S[247], S[248], S[249], S[250], S[251], S[252], S[253],\n+  S[254], S[255] /* = NUL */\n+};\n+\n+const signed char sc256[] = {\n+  S[0], S[1], S[2], S[3], S[4], S[5], S[6], S[7], S[8], S[9], S[10],\n+  S[11], S[12], S[13], S[14], S[15], S[16], S[17], S[18], S[19], S[20],\n+  S[21], S[22], S[23], S[24], S[25], S[26], S[27], S[28], S[29], S[30],\n+  S[31], S[32], S[33], S[34], S[35], S[36], S[37], S[38], S[39], S[40],\n+  S[41], S[42], S[43], S[44], S[45], S[46], S[47], S[48], S[49], S[50],\n+  S[51], S[52], S[53], S[54], S[55], S[56], S[57], S[58], S[59], S[60],\n+  S[61], S[62], S[63], S[64], S[65], S[66], S[67], S[68], S[69], S[70],\n+  S[71], S[72], S[73], S[74], S[75], S[76], S[77], S[78], S[79], S[80],\n+  S[81], S[82], S[83], S[84], S[85], S[86], S[87], S[88], S[89], S[90],\n+  S[91], S[92], S[93], S[94], S[95], S[96], S[97], S[98], S[99], S[100],\n+  S[101], S[102], S[103], S[104], S[105], S[106], S[107], S[108], S[109],\n+  S[110], S[111], S[112], S[113], S[114], S[115], S[116], S[117], S[118],\n+  S[119], S[120], S[121], S[122], S[123], S[124], S[125], S[126], S[127],\n+  S[128], S[129], S[130], S[131], S[132], S[133], S[134], S[135], S[136],\n+  S[137], S[138], S[139], S[140], S[141], S[142], S[143], S[144], S[145],\n+  S[146], S[147], S[148], S[149], S[150], S[151], S[152], S[153], S[154],\n+  S[155], S[156], S[157], S[158], S[159], S[160], S[161], S[162], S[163],\n+  S[164], S[165], S[166], S[167], S[168], S[169], S[170], S[171], S[172],\n+  S[173], S[174], S[175], S[176], S[177], S[178], S[179], S[180], S[181],\n+  S[182], S[183], S[184], S[185], S[186], S[187], S[188], S[189], S[190],\n+  S[191], S[192], S[193], S[194], S[195], S[196], S[197], S[198], S[199],\n+  S[200], S[201], S[202], S[203], S[204], S[205], S[206], S[207], S[208],\n+  S[209], S[210], S[211], S[212], S[213], S[214], S[215], S[216], S[217],\n+  S[218], S[219], S[220], S[221], S[222], S[223], S[224], S[225], S[226],\n+  S[227], S[228], S[229], S[230], S[231], S[232], S[233], S[234], S[235],\n+  S[236], S[237], S[238], S[239], S[240], S[241], S[242], S[243], S[244],\n+  S[245], S[246], S[247], S[248], S[249], S[250], S[251], S[252], S[253],\n+  S[254], S[255] /* = NUL */\n+};\n+\n+const unsigned char uc256[] = {\n+  S[0], S[1], S[2], S[3], S[4], S[5], S[6], S[7], S[8], S[9], S[10],\n+  S[11], S[12], S[13], S[14], S[15], S[16], S[17], S[18], S[19], S[20],\n+  S[21], S[22], S[23], S[24], S[25], S[26], S[27], S[28], S[29], S[30],\n+  S[31], S[32], S[33], S[34], S[35], S[36], S[37], S[38], S[39], S[40],\n+  S[41], S[42], S[43], S[44], S[45], S[46], S[47], S[48], S[49], S[50],\n+  S[51], S[52], S[53], S[54], S[55], S[56], S[57], S[58], S[59], S[60],\n+  S[61], S[62], S[63], S[64], S[65], S[66], S[67], S[68], S[69], S[70],\n+  S[71], S[72], S[73], S[74], S[75], S[76], S[77], S[78], S[79], S[80],\n+  S[81], S[82], S[83], S[84], S[85], S[86], S[87], S[88], S[89], S[90],\n+  S[91], S[92], S[93], S[94], S[95], S[96], S[97], S[98], S[99], S[100],\n+  S[101], S[102], S[103], S[104], S[105], S[106], S[107], S[108], S[109],\n+  S[110], S[111], S[112], S[113], S[114], S[115], S[116], S[117], S[118],\n+  S[119], S[120], S[121], S[122], S[123], S[124], S[125], S[126], S[127],\n+  S[128], S[129], S[130], S[131], S[132], S[133], S[134], S[135], S[136],\n+  S[137], S[138], S[139], S[140], S[141], S[142], S[143], S[144], S[145],\n+  S[146], S[147], S[148], S[149], S[150], S[151], S[152], S[153], S[154],\n+  S[155], S[156], S[157], S[158], S[159], S[160], S[161], S[162], S[163],\n+  S[164], S[165], S[166], S[167], S[168], S[169], S[170], S[171], S[172],\n+  S[173], S[174], S[175], S[176], S[177], S[178], S[179], S[180], S[181],\n+  S[182], S[183], S[184], S[185], S[186], S[187], S[188], S[189], S[190],\n+  S[191], S[192], S[193], S[194], S[195], S[196], S[197], S[198], S[199],\n+  S[200], S[201], S[202], S[203], S[204], S[205], S[206], S[207], S[208],\n+  S[209], S[210], S[211], S[212], S[213], S[214], S[215], S[216], S[217],\n+  S[218], S[219], S[220], S[221], S[222], S[223], S[224], S[225], S[226],\n+  S[227], S[228], S[229], S[230], S[231], S[232], S[233], S[234], S[235],\n+  S[236], S[237], S[238], S[239], S[240], S[241], S[242], S[243], S[244],\n+  S[245], S[246], S[247], S[248], S[249], S[250], S[251], S[252], S[253],\n+  S[254], S[255] /* = NUL */\n+};\n+\n+const __CHAR16_TYPE__ c16_4[] = {\n+  1, 0x7fff, 0x8000, 0xffff,\n+  0x10000   /* { dg-warning \"\\\\\\[-Woverflow]\" } */\n+};\n+\n+const char a2_implicit[2] = { };\n+const char a3_implicit[3] = { };\n+\n+const char a3_nul[3] = { 0 };\n+const char a5_nul1[3] = { [1] = 0 };\n+const char a7_nul2[3] = { [2] = 0 };\n+\n+const char ax_2_nul[] = { '1', '2', '\\0' };\n+const char ax_3_nul[] = { '1', '2', '3', '\\0' };\n+\n+const char ax_3_des_nul[] = { [3] = 0, [2] = '3', [1] = '2', [0] = '1' };\n+\n+const char ax_3[] = { '1', '2', '3' };\n+const char a3_3[3] = { '1', '2', '3' };\n+\n+const char ax_100_3[] = { '1', '2', '3', [100] = '\\0' };\n+\n+#define CONCAT(x, y) x ## y\n+#define CAT(x, y) CONCAT (x, y)\n+#define FAILNAME(name) CAT (call_ ## name ##_on_line_, __LINE__)\n+\n+#define FAIL(name) do {\t\t\t\t\\\n+    extern void FAILNAME (name) (void);\t\t\\\n+    FAILNAME (name)();\t\t\t\t\\\n+  } while (0)\n+\n+/* Macro to emit a call to funcation named\n+   call_in_true_branch_not_eliminated_on_line_NNN()\n+   for each call that's expected to be eliminated.  The dg-final\n+   scan-tree-dump-time directive at the bottom of the test verifies\n+   that no such call appears in output.  */\n+#define ELIM(expr)\t\t\t\t\t\t\t\\\n+  if (!(expr)) FAIL (in_true_branch_not_eliminated); else (void)0\n+\n+#define T(s, n) ELIM (strlen (s) == n)\n+\n+void test_nulstring (void)\n+{\n+  T (a2_implicit, 0);\n+  T (a3_implicit, 0);\n+\n+  T (a3_nul, 0);\n+  T (a5_nul1, 0);\n+  T (a7_nul2, 0);\n+\n+  T (ax_2_nul, 2);\n+  T (ax_3_nul, 3);\n+  T (ax_3_des_nul, 3);\n+\n+  T (ax_100_3, 3);\n+  T (ax_100_3 + 4, 0);\n+  ELIM (101 == sizeof ax_100_3);\n+  ELIM ('\\0' == ax_100_3[100]);\n+\n+  /* Verify that all three character arrays have the same length\n+     as the string literal they are initialized with.  */\n+  T (S, 255);\n+  T (c256, 255);\n+  T ((const char*)sc256, 255);\n+  T ((const char*)uc256, 255);\n+\n+  /* Verify that all three character arrays have the same contents\n+     as the string literal they are initialized with.  */\n+  ELIM (0 == memcmp (c256, S, sizeof c256));\n+  ELIM (0 == memcmp (c256, (const char*)sc256, sizeof c256));\n+  ELIM (0 == memcmp (c256, (const char*)uc256, sizeof c256));\n+\n+  ELIM (0 == strcmp (c256, (const char*)sc256));\n+  ELIM (0 == strcmp (c256, (const char*)uc256));\n+\n+  /* Verify that the char16_t array has the expected contents.  */\n+  ELIM (c16_4[0] == 1 && c16_4[1] == 0x7fff\n+\t&& c16_4[2] == 0x8000 && c16_4[3] == 0xffff\n+\t&& c16_4[4] == 0);\n+}\n+\n+/* Verify that excessively large initializers don't run out of\n+   memory.  Also verify that the they have the expected size and\n+   contents.  */\n+\n+#define MAX (__PTRDIFF_MAX__ - 1)\n+\n+const char large_string[] = { 'a', [1234] = 'b', [MAX] = '\\0' };\n+\n+const void test_large_string_size (void)\n+{\n+  ELIM (sizeof large_string == MAX + 1);\n+\n+  /* The following expressions are not folded without optimization.  */\n+  ELIM ('a'  == large_string[0]);\n+  ELIM ('\\0' == large_string[1233]);\n+  ELIM ('b'  == large_string[1234]);\n+  ELIM ('\\0' == large_string[1235]);\n+  ELIM ('\\0' == large_string[MAX - 1]);\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"strlen\" 0 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"memcmp\" 0 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"strcmp\" 0 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"call_in_true_branch_not_eliminated\" 0 \"optimized\" } } */"}, {"sha": "39a532bf8d4892babcacd3d81cb8952cdf1f82b6", "filename": "gcc/testsuite/gcc.dg/strlenopt-56.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23aa9f7c4637ad51587e536e245ae6adb5391bbc/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-56.c?ref=23aa9f7c4637ad51587e536e245ae6adb5391bbc", "patch": "@@ -0,0 +1,50 @@\n+/* PR tree-optimization/71625 - conversion of braced initializers to strings\n+   Verify that array elements have the expected values regardless of sign\n+   and non-ASCII execution character set.\n+   { dg-do compile }\n+   { dg-require-iconv \"IBM1047\" }\n+   { dg-options \"-O -Wall -fexec-charset=IBM1047 -fdump-tree-gimple -fdump-tree-optimized\" } */\n+\n+#include \"strlenopt.h\"\n+\n+const char a[] = { 'a', 129, 0 };\n+const signed char b[] = { 'b', 130, 0 };\n+const unsigned char c[] = { 'c', 131, 0 };\n+\n+const char s[] = \"a\\201\";\n+const signed char ss[] = \"b\\202\";\n+const unsigned char us[] = \"c\\203\";\n+\n+\n+#define A(expr)   ((expr) ? (void)0 : __builtin_abort ())\n+\n+void test_values (void)\n+{\n+  A (a[0] == a[1]);\n+  A (a[1] == 'a');\n+\n+  A (b[0] == b[1]);\n+  A (b[1] == (signed char)'b');\n+\n+  A (c[0] == c[1]);\n+  A (c[1] == (unsigned char)'c');\n+}\n+\n+void test_lengths (void)\n+{\n+  A (2 == strlen (a));\n+  A (2 == strlen ((const char*)b));\n+  A (2 == strlen ((const char*)c));\n+}\n+\n+void test_contents (void)\n+{\n+  A (0 == strcmp (a, s));\n+  A (0 == strcmp ((const char*)b, (const char*)ss));\n+  A (0 == strcmp ((const char*)c, (const char*)us));\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"strlen\" 0 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"strcmp\" 0 \"gimple\" } }\n+   { dg-final { scan-tree-dump-times \"abort\" 0 \"optimized\" } } */"}]}