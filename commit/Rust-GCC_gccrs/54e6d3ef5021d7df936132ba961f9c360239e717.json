{"sha": "54e6d3ef5021d7df936132ba961f9c360239e717", "node_id": "C_kwDOANBUbNoAKDU0ZTZkM2VmNTAyMWQ3ZGY5MzYxMzJiYTk2MWY5YzM2MDIzOWU3MTc", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-12-16T12:33:00Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-12-16T16:49:59Z"}, "message": "opts: do not do sanity check when an error is seen\n\n\tPR target/103709\n\ngcc/c-family/ChangeLog:\n\n\t* c-pragma.c (handle_pragma_pop_options): Do not check\n\tglobal options modification when an error is seen in parsing\n\tof options (pragmas or attributes).", "tree": {"sha": "0ba86c8e94fbcddc3049acde5746c589e2f5f924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ba86c8e94fbcddc3049acde5746c589e2f5f924"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54e6d3ef5021d7df936132ba961f9c360239e717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e6d3ef5021d7df936132ba961f9c360239e717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e6d3ef5021d7df936132ba961f9c360239e717", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e6d3ef5021d7df936132ba961f9c360239e717/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b8f5a50a93c5fd44fa1ecb6f431fee1df267571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8f5a50a93c5fd44fa1ecb6f431fee1df267571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8f5a50a93c5fd44fa1ecb6f431fee1df267571"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "0772c34342a74c58ed95df8499080d79ed058b65", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e6d3ef5021d7df936132ba961f9c360239e717/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e6d3ef5021d7df936132ba961f9c360239e717/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=54e6d3ef5021d7df936132ba961f9c360239e717", "patch": "@@ -1132,7 +1132,7 @@ handle_pragma_pop_options (cpp_reader *ARG_UNUSED(dummy))\n \t\t\t\t      p->optimize_binary);\n       optimization_current_node = p->optimize_binary;\n     }\n-  if (flag_checking)\n+  if (flag_checking && !seen_error ())\n     {\n       cl_optimization_compare (p->saved_global_options, &global_options);\n       free (p->saved_global_options);"}]}