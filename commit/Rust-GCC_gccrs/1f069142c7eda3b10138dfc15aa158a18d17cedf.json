{"sha": "1f069142c7eda3b10138dfc15aa158a18d17cedf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwNjkxNDJjN2VkYTNiMTAxMzhkZmMxNWFhMTU4YTE4ZDE3Y2VkZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-03-14T23:28:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-03-14T23:28:11Z"}, "message": "re PR libstdc++/56613 (map::operator[](key_type&&) fails with custom allocator)\n\n\tPR libstdc++/56613\n\t* include/bits/stl_tree.h (_Rb_tree::_M_create_node): Use\n\tallocator_traits instead of calling construct directly.\n\t* testsuite/23_containers/map/56613.cc: New.\n\nFrom-SVN: r196666", "tree": {"sha": "0b9c753ade38d319ebf9d143e87b32de623d3d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b9c753ade38d319ebf9d143e87b32de623d3d43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f069142c7eda3b10138dfc15aa158a18d17cedf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f069142c7eda3b10138dfc15aa158a18d17cedf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f069142c7eda3b10138dfc15aa158a18d17cedf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f069142c7eda3b10138dfc15aa158a18d17cedf/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cc9a5a584a57e06f1e2c83cb8ccd18a02a1bc91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc9a5a584a57e06f1e2c83cb8ccd18a02a1bc91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cc9a5a584a57e06f1e2c83cb8ccd18a02a1bc91"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "65ed5fca38c0ae4733dc89d2c2f0fe5790af614d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f069142c7eda3b10138dfc15aa158a18d17cedf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f069142c7eda3b10138dfc15aa158a18d17cedf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f069142c7eda3b10138dfc15aa158a18d17cedf", "patch": "@@ -1,3 +1,10 @@\n+2013-03-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/56613\n+\t* include/bits/stl_tree.h (_Rb_tree::_M_create_node): Use\n+\tallocator_traits instead of calling construct directly.\n+\t* testsuite/23_containers/map/56613.cc: New.\n+\n 2013-03-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/html/*: Regenerate."}, {"sha": "cb5a8eff800e7ea414020deb5ba81b9b7bc15594", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f069142c7eda3b10138dfc15aa158a18d17cedf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f069142c7eda3b10138dfc15aa158a18d17cedf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=1f069142c7eda3b10138dfc15aa158a18d17cedf", "patch": "@@ -62,6 +62,9 @@\n #include <bits/allocator.h>\n #include <bits/stl_function.h>\n #include <bits/cpp_type_traits.h>\n+#if __cplusplus >= 201103L\n+#include <bits/alloc_traits.h>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -400,8 +403,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _Link_type __tmp = _M_get_node();\n \t  __try\n \t    {\n-\t      _M_get_Node_allocator().construct(__tmp,\n-\t\t\t\t\t     std::forward<_Args>(__args)...);\n+\t      allocator_traits<_Node_allocator>::\n+\t\tconstruct(_M_get_Node_allocator(), __tmp,\n+\t\t\t  std::forward<_Args>(__args)...);\n \t    }\n \t  __catch(...)\n \t    {"}, {"sha": "98433598c6be90291b0d3f59a45dbe9fc9121592", "filename": "libstdc++-v3/testsuite/23_containers/map/56613.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f069142c7eda3b10138dfc15aa158a18d17cedf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F56613.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f069142c7eda3b10138dfc15aa158a18d17cedf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F56613.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F56613.cc?ref=1f069142c7eda3b10138dfc15aa158a18d17cedf", "patch": "@@ -0,0 +1,74 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_hooks.h>\n+#include <map>\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// libstdc++/56613\n+#include <map>\n+\n+// A conforming C++03 allocator, should still work in C++11 mode.\n+template<typename T>\n+struct alloc\n+{\n+    typedef T value_type;\n+    typedef T* pointer;\n+    typedef const T* const_pointer;\n+    typedef T& reference;\n+    typedef const T& const_reference;\n+    typedef unsigned size_type;\n+    typedef int difference_type;\n+\n+    template<typename U>\n+        struct rebind {\n+            typedef alloc<U> other;\n+        };\n+\n+    alloc() { }\n+    template<typename U>\n+        alloc(const alloc<U>&) { }\n+\n+    pointer allocate(size_type n, const void* = 0) { return\n+std::allocator<T>().allocate(n); }\n+    void deallocate(pointer p, size_type n) { std::allocator<T>().deallocate(p,\n+n); }\n+\n+    size_type max_size() const { return -1; }\n+\n+    void construct(pointer p, const T& t) { new ((void*) p) T(t); }\n+    void destroy(pointer p) { p->~T(); }\n+\n+    pointer address(reference x) const throw() { return &x; }\n+    const_pointer address(const_reference x) const throw() { return &x; }\n+};\n+\n+template<typename T, typename U>\n+bool operator==(alloc<T>, alloc<U>) { return true; }\n+\n+template<typename T, typename U>\n+bool operator!=(alloc<T>, alloc<U>) { return false; }\n+\n+int main()\n+{\n+  std::map<int, int, std::less<int>, alloc<int> > m;\n+  m[1];\n+}"}]}