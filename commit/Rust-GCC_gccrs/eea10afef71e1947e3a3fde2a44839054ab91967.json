{"sha": "eea10afef71e1947e3a3fde2a44839054ab91967", "node_id": "C_kwDOANBUbNoAKGVlYTEwYWZlZjcxZTE5NDdlM2EzZmRlMmE0NDgzOTA1NGFiOTE5Njc", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-07-15T05:31:24Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-09-28T08:39:32Z"}, "message": "AVX512FP16: Support basic 64/32bit vector type and operation.\n\nFor 32bit target, V4HF vector is parsed same as __m64 type, V2HF\nis parsed by stack and returned from GPR since it is not specified\nby ABI.\n\ngcc/ChangeLog:\n\n\tPR target/102230\n\t* config/i386/i386.h (VALID_AVX512FP16_REG_MODE): Add\n\tV2HF mode check.\n\t(VALID_SSE2_REG_VHF_MODE): Add V4HFmode and V2HFmode.\n\t(VALID_MMX_REG_MODE): Add V4HFmode.\n\t(SSE_REG_MODE_P): Replace VALID_AVX512FP16_REG_MODE with\n\tvector mode condition.\n\t* config/i386/i386.c (classify_argument): Parse V4HF/V2HF\n\tvia sse regs.\n\t(function_arg_32): Add V4HFmode.\n\t(function_arg_advance_32): Likewise.\n\t* config/i386/i386.md (mode): Add V4HF/V2HF.\n\t(MODE_SIZE): Likewise.\n\t* config/i386/mmx.md (MMXMODE): Add V4HF mode.\n\t(V_32): Add V2HF mode.\n\t(VHF_32_64): New mode iterator.\n\t(*mov<mode>_internal): Adjust sse alternatives to support\n\tV4HF mode move.\n\t(*mov<mode>_internal): Adjust sse alternatives to support\n\tV2HF mode move.\n\t(<insn><mode>3): New define_insn for add/sub/mul/div.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/102230\n\t* gcc.target/i386/avx512fp16-floatvnhf.c: Remove xfail.\n\t* gcc.target/i386/avx512fp16-trunc-extendvnhf.c: Ditto.\n\t* gcc.target/i386/avx512fp16-truncvnhf.c: Ditto.\n\t* gcc.target/i386/avx512fp16-64-32-vecop-1.c: New test.\n\t* gcc.target/i386/avx512fp16-64-32-vecop-2.c: Ditto.\n\t* gcc.target/i386/pr102230.c: Ditto.", "tree": {"sha": "afd7e449fa6e097abacd0c9303df0cab63e61eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afd7e449fa6e097abacd0c9303df0cab63e61eef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eea10afef71e1947e3a3fde2a44839054ab91967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea10afef71e1947e3a3fde2a44839054ab91967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea10afef71e1947e3a3fde2a44839054ab91967", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea10afef71e1947e3a3fde2a44839054ab91967/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dadd5110f8b9ac65c53207c9bda612c3309f96b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dadd5110f8b9ac65c53207c9bda612c3309f96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dadd5110f8b9ac65c53207c9bda612c3309f96b"}], "stats": {"total": 253, "additions": 220, "deletions": 33}, "files": [{"sha": "b3e4add4b9e85bcfaaf2907e194092cfee8e46d7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=eea10afef71e1947e3a3fde2a44839054ab91967", "patch": "@@ -2462,6 +2462,8 @@ classify_argument (machine_mode mode, const_tree type,\n     case E_V2SFmode:\n     case E_V2SImode:\n     case E_V4HImode:\n+    case E_V4HFmode:\n+    case E_V2HFmode:\n     case E_V8QImode:\n       classes[0] = X86_64_SSE_CLASS;\n       return 1;\n@@ -2902,6 +2904,7 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n \n     case E_V8QImode:\n     case E_V4HImode:\n+    case E_V4HFmode:\n     case E_V2SImode:\n     case E_V2SFmode:\n     case E_V1TImode:\n@@ -3149,6 +3152,7 @@ function_arg_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n \n     case E_V8QImode:\n     case E_V4HImode:\n+    case E_V4HFmode:\n     case E_V2SImode:\n     case E_V2SFmode:\n     case E_V1TImode:"}, {"sha": "cba6d83591066b0a2c333e6cb841853c1089696c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=eea10afef71e1947e3a3fde2a44839054ab91967", "patch": "@@ -1033,15 +1033,17 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == TImode)\n \n #define VALID_AVX512FP16_REG_MODE(MODE)\t\t\t\t\t\\\n-  ((MODE) == V8HFmode || (MODE) == V16HFmode || (MODE) == V32HFmode)\n+  ((MODE) == V8HFmode || (MODE) == V16HFmode || (MODE) == V32HFmode\t\\\n+   || (MODE) == V2HFmode)\n \n #define VALID_SSE2_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n    || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n    || (MODE) == V2DImode || (MODE) == DFmode || (MODE) == HFmode)\n \n #define VALID_SSE2_REG_VHF_MODE(MODE)\t\t\t\\\n-  (VALID_SSE2_REG_MODE (MODE) || (MODE) == V8HFmode)\n+  (VALID_SSE2_REG_MODE (MODE) || (MODE) == V8HFmode\t\\\n+   || (MODE) == V4HFmode || (MODE) == V2HFmode)\n \n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V1TImode || (MODE) == TImode\t\t\t\t\\\n@@ -1051,10 +1053,12 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define VALID_MMX_REG_MODE_3DNOW(MODE) \\\n   ((MODE) == V2SFmode || (MODE) == SFmode)\n \n+/* To match ia32 psABI, V4HFmode should be added here.  */\n #define VALID_MMX_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V1DImode || (MODE) == DImode\t\t\t\t\\\n    || (MODE) == V2SImode || (MODE) == SImode\t\t\t\t\\\n-   || (MODE) == V4HImode || (MODE) == V8QImode)\n+   || (MODE) == V4HImode || (MODE) == V8QImode\t\t\t\t\\\n+   || (MODE) == V4HFmode)\n \n #define VALID_MASK_REG_MODE(MODE) ((MODE) == HImode || (MODE) == QImode)\n \n@@ -1087,7 +1091,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == V4DImode || (MODE) == V8SFmode || (MODE) == V4DFmode\t\\\n    || (MODE) == V2TImode || (MODE) == V8DImode || (MODE) == V64QImode\t\\\n    || (MODE) == V16SImode || (MODE) == V32HImode || (MODE) == V8DFmode\t\\\n-   || (MODE) == V16SFmode || VALID_AVX512FP16_REG_MODE (MODE))\n+   || (MODE) == V16SFmode || (MODE) == V32HFmode || (MODE) == V16HFmode \\\n+   || (MODE) == V8HFmode)\n \n #define X87_FLOAT_MODE_P(MODE)\t\\\n   (TARGET_80387 && ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode))"}, {"sha": "758d7d1e3c0bf614f62070f9f52f4de1d5923e70", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=eea10afef71e1947e3a3fde2a44839054ab91967", "patch": "@@ -498,7 +498,7 @@\n ;; Main data type used by the insn\n (define_attr \"mode\"\n   \"unknown,none,QI,HI,SI,DI,TI,OI,XI,HF,SF,DF,XF,TF,V32HF,V16HF,V8HF,\n-   V16SF,V8SF,V4DF,V4SF,V2DF,V2SF,V1DF,V8DF\"\n+   V16SF,V8SF,V4DF,V4SF,V2DF,V2SF,V1DF,V8DF,V4HF,V2HF\"\n   (const_string \"unknown\"))\n \n ;; The CPU unit operations uses.\n@@ -1106,7 +1106,8 @@\n \t\t\t     (V1TI \"16\") (V2TI \"32\") (V4TI \"64\")\n \t\t\t     (V2DF \"16\") (V4DF \"32\") (V8DF \"64\")\n \t\t\t     (V4SF \"16\") (V8SF \"32\") (V16SF \"64\")\n-\t\t\t     (V8HF \"16\") (V16HF \"32\") (V32HF \"64\")])\n+\t\t\t     (V8HF \"16\") (V16HF \"32\") (V32HF \"64\")\n+\t\t\t     (V4HF \"8\") (V2HF \"4\")])\n \n ;; Double word integer modes as mode attribute.\n (define_mode_attr DWI [(QI \"HI\") (HI \"SI\") (SI \"DI\") (DI \"TI\") (TI \"OI\")])"}, {"sha": "c9467bc095ab12efb27b6cab481e1a33fd5b6586", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=eea10afef71e1947e3a3fde2a44839054ab91967", "patch": "@@ -48,7 +48,7 @@\n (define_mode_iterator MMXMODEI8 [V8QI V4HI V2SI (V1DI \"TARGET_SSE2\")])\n \n ;; All 8-byte vector modes handled by MMX\n-(define_mode_iterator MMXMODE [V8QI V4HI V2SI V1DI V2SF])\n+(define_mode_iterator MMXMODE [V8QI V4HI V2SI V1DI V2SF V4HF])\n (define_mode_iterator MMXMODE124 [V8QI V4HI V2SI V2SF])\n \n ;; Mix-n-match\n@@ -57,15 +57,18 @@\n (define_mode_iterator MMXMODE24 [V4HI V2SI])\n (define_mode_iterator MMXMODE248 [V4HI V2SI V1DI])\n \n-;; All 4-byte integer vector modes\n-(define_mode_iterator V_32 [V4QI V2HI V1SI])\n+;; All 4-byte integer/float16 vector modes\n+(define_mode_iterator V_32 [V4QI V2HI V1SI V2HF])\n \n ;; 4-byte integer vector modes\n (define_mode_iterator VI_32 [V4QI V2HI])\n \n ;; V2S* modes\n (define_mode_iterator V2FI [V2SF V2SI])\n \n+;; 4-byte and 8-byte float16 vector modes\n+(define_mode_iterator VHF_32_64 [V4HF V2HF])\n+\n ;; Mapping from integer vector mode to mnemonic suffix\n (define_mode_attr mmxvecsize\n   [(V8QI \"b\") (V4QI \"b\") (V4HI \"w\") (V2HI \"w\") (V2SI \"d\") (V1DI \"q\")])\n@@ -191,21 +194,25 @@\n \t    (eq_attr \"alternative\" \"11,12\")\n \t      (cond [(match_test \"<MODE>mode == V2SFmode\")\n \t\t       (const_string \"V4SF\")\n+\t\t     (match_test \"<MODE>mode == V4HFmode\")\n+\t\t       (const_string \"V4SF\")\n \t\t     (ior (not (match_test \"TARGET_SSE2\"))\n \t\t\t  (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t       (const_string \"V4SF\")\n \t\t    ]\n \t\t    (const_string \"TI\"))\n \n \t    (and (eq_attr \"alternative\" \"13\")\n-\t\t (ior (and (match_test \"<MODE>mode == V2SFmode\")\n-\t\t\t   (not (match_test \"TARGET_MMX_WITH_SSE\")))\n-\t\t      (not (match_test \"TARGET_SSE2\"))))\n+\t\t (ior (ior (and (match_test \"<MODE>mode == V2SFmode\")\n+\t\t\t\t(not (match_test \"TARGET_MMX_WITH_SSE\")))\n+\t\t\t   (not (match_test \"TARGET_SSE2\")))\n+\t\t      (match_test \"<MODE>mode == V4HFmode\")))\n \t      (const_string \"V2SF\")\n \n \t    (and (eq_attr \"alternative\" \"14\")\n-\t    \t (ior (match_test \"<MODE>mode == V2SFmode\")\n-\t\t      (not (match_test \"TARGET_SSE2\"))))\n+\t\t (ior (ior (match_test \"<MODE>mode == V2SFmode\")\n+\t\t\t   (not (match_test \"TARGET_SSE2\")))\n+\t\t      (match_test \"<MODE>mode == V4HFmode\")))\n \t      (const_string \"V2SF\")\n \t   ]\n \t   (const_string \"DI\")))\n@@ -289,12 +296,17 @@\n        (const_string \"*\")))\n    (set (attr \"mode\")\n      (cond [(eq_attr \"alternative\" \"2,3\")\n-\t      (cond [(match_test \"TARGET_AVX\")\n+\t      (cond [(match_test \"<MODE>mode == V2HFmode\")\n+\t\t       (const_string \"V4SF\")\n+\t\t     (match_test \"TARGET_AVX\")\n \t\t       (const_string \"TI\")\n \t\t     (match_test \"optimize_function_for_size_p (cfun)\")\n \t\t       (const_string \"V4SF\")\n \t\t    ]\n \t\t    (const_string \"TI\"))\n+\t    (and (eq_attr \"alternative\" \"4,5\")\n+\t\t (match_test \"<MODE>mode == V2HFmode\"))\n+\t      (const_string \"SF\")\n \t   ]\n \t   (const_string \"SI\")))\n    (set (attr \"preferred_for_speed\")\n@@ -1391,6 +1403,28 @@\n   DONE;\n })\n \n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel half-precision floating point arithmetic\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"<insn><mode>3\"\n+  [(set (match_operand:VHF_32_64 0 \"register_operand\" \"=v\")\n+\t(plusminusmultdiv:VHF_32_64\n+\t  (match_operand:VHF_32_64 1 \"register_operand\" \"<comm>v\")\n+\t  (match_operand:VHF_32_64 2 \"register_operand\" \"v\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"v<insn>ph\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set (attr \"type\")\n+      (cond [(match_test \"<CODE> == MULT\")\n+\t\t(const_string \"ssemul\")\n+\t     (match_test \"<CODE> == DIV\")\n+\t\t(const_string \"ssediv\")]\n+\t     (const_string \"sseadd\")))\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V8HF\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral arithmetic"}, {"sha": "754e909d77b7151511d203f4dbc73680fb1aa57c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-64-32-vecop-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-64-32-vecop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-64-32-vecop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-64-32-vecop-1.c?ref=eea10afef71e1947e3a3fde2a44839054ab91967", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+/* { dg-final { scan-assembler-times \"vaddph\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsubph\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmulph\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vdivph\" 2 } } */\n+\n+#define DO_PRAGMA(X) _Pragma(#X)\n+\n+#define VEC_OP_VV(size, op, name)       \\\n+void \\\n+__attribute__ ((noinline, noclone, optimize(\"tree-slp-vectorize\"))) \\\n+vecop_v##size##hf##name (_Float16 * restrict dst,  \\\n+ _Float16 * restrict src1, _Float16 * restrict src2)   \\\n+{ \\\n+    int i;  \\\n+    DO_PRAGMA (GCC unroll size)   \\\n+    for (i = 0; i < size; i++)  \\\n+      dst[i] = src1[i] op src2[i];  \\\n+}\n+\n+VEC_OP_VV(4, +, add)\n+VEC_OP_VV(2, +, add)\n+VEC_OP_VV(4, -, sub)\n+VEC_OP_VV(2, -, sub)\n+VEC_OP_VV(4, *, mul)\n+VEC_OP_VV(2, *, mul)\n+VEC_OP_VV(4, /, div)\n+VEC_OP_VV(2, /, div)"}, {"sha": "4dc6f9fb92eb0425f2e7e471485283ff1a7aa88a", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-64-32-vecop-2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-64-32-vecop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-64-32-vecop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-64-32-vecop-2.c?ref=eea10afef71e1947e3a3fde2a44839054ab91967", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+static void vec_op_test (void);\n+#define DO_TEST vec_op_test\n+#define AVX512FP16\n+#define AVX512VL\n+#include \"avx512f-check.h\"\n+#include \"avx512fp16-64-32-vecop-1.c\"\n+\n+_Float16 a[4], b[4], fexp[4], fref[4];\n+\n+#define EMULATE_VEC_OP_VV(size, op, name) \\\n+void \\\n+__attribute__ ((noinline, noclone)) \\\n+scalar_vecop_v##size##hf##name ( \\\n+  _Float16 * restrict dst, _Float16 * restrict src1,  \\\n+  _Float16 * restrict src2)  \\\n+{ \\\n+  int i;  \\\n+  for (i = 0; i < size; i++)  \\\n+    dst[i] = src1[i] op src2[i];  \\\n+}\n+\n+EMULATE_VEC_OP_VV (4, +, add)\n+EMULATE_VEC_OP_VV (2, +, add)\n+EMULATE_VEC_OP_VV (4, -, sub)\n+EMULATE_VEC_OP_VV (2, -, sub)\n+EMULATE_VEC_OP_VV (4, *, mul)\n+EMULATE_VEC_OP_VV (2, *, mul)\n+EMULATE_VEC_OP_VV (4, /, div)\n+EMULATE_VEC_OP_VV (2, /, div)\n+\n+void init()\n+{\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    {\n+      a[i] = i + 0.5; \n+      b[i] = i * 1.5;\n+      fexp[i] = fref[i] = 2.75 * i;\n+    }\n+}\n+\n+int check_cond(void *a, void *b, int size)\n+{\n+  int i;\n+  unsigned short *pa = (unsigned short *)a,\n+\t\t *pb = (unsigned short *)b;\n+  for (i = 0; i < size; i++)\n+    if (pa[i] != pb[i])\n+      return 0;\n+  return 1;\n+}\n+\n+#define TEST_VEC_OP_VV(size, name)\t\\\n+{ \\\n+  init ();  \\\n+  scalar_vecop_v##size##hf##name (a, b, fexp);  \\\n+  vecop_v##size##hf##name (a, b, fref);  \\\n+  if (!check_cond ((void *)fexp, (void *)fref, size)) \\\n+    abort();  \\\n+}\n+\n+static void vec_op_test()\n+{\n+  TEST_VEC_OP_VV (4, add)\n+  TEST_VEC_OP_VV (2, add)\n+  TEST_VEC_OP_VV (4, sub)\n+  TEST_VEC_OP_VV (2, sub)\n+  TEST_VEC_OP_VV (4, mul)\n+  TEST_VEC_OP_VV (2, mul)\n+  TEST_VEC_OP_VV (4, div)\n+  TEST_VEC_OP_VV (2, div)\n+}"}, {"sha": "8471a1d1d10307170d02e6406a64f9d1932e654f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-floatvnhf.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-floatvnhf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-floatvnhf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-floatvnhf.c?ref=eea10afef71e1947e3a3fde2a44839054ab91967", "patch": "@@ -43,16 +43,16 @@ FLOATHFVV(2, udi)\n \n /* { dg-final { scan-assembler-times \"vcvtqq2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtuqq2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtqq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vcvtuqq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vcvtqq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vcvtuqq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtdq2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtudq2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtdq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtudq2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtdq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vcvtudq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtdq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtudq2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtuw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtw2ph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "2ef901a0375b270bf8fc9dc6d25f6af84cc03f28", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-trunc-extendvnhf.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-trunc-extendvnhf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-trunc-extendvnhf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-trunc-extendvnhf.c?ref=eea10afef71e1947e3a3fde2a44839054ab91967", "patch": "@@ -41,15 +41,15 @@ EXTENDHFVV(8, sf)\n EXTENDHFVV(4, sf)\n \n /* { dg-final { scan-assembler-times \"vcvtpd2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtpd2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vcvtpd2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtps2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtps2phxy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtps2phxx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phxx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n "}, {"sha": "7a51c9dd0776904f4af2f1dc44ff1629adcf3603", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-truncvnhf.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-truncvnhf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-truncvnhf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-truncvnhf.c?ref=eea10afef71e1947e3a3fde2a44839054ab91967", "patch": "@@ -43,16 +43,16 @@ FIX_TRUNCHFVV(2, udi)\n \n /* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "ad37f4f265a9c3b4669c25378f7bf482760b6572", "filename": "gcc/testsuite/gcc.target/i386/pr102230.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102230.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea10afef71e1947e3a3fde2a44839054ab91967/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102230.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102230.c?ref=eea10afef71e1947e3a3fde2a44839054ab91967", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+typedef _Float16 v4hf __attribute__ ((vector_size (8)));\n+typedef _Float16 v2hf __attribute__ ((vector_size (4)));\n+\n+v4hf\n+v4hf_abi_1 (v4hf a)\n+{\n+  return a;\n+}\n+\n+v4hf\n+v4hf_abi_3 (v4hf a, v4hf b, v4hf c)\n+{\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]*%mm2, %mm0\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[\\\\t \\]*%xmm2, %xmm0\" 1 { target { ! ia32 } } } } */\n+\n+v4hf\n+v4hf_abi_4 (v4hf a, v4hf b, v4hf c, v4hf d)\n+{\n+  return d;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]*4\\\\(%esp\\\\), %mm0\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[\\\\t \\]*%xmm3, %xmm0\" 1 { target { ! ia32 } } } } */\n+\n+v2hf\n+v2hf_test (v2hf a, v2hf b, v2hf c, v2hf d)\n+{\n+  return b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]*8\\\\(%esp\\\\), %eax\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[\\\\t \\]*%xmm1, %xmm0\" 1 { target { ! ia32 } } } } */"}]}