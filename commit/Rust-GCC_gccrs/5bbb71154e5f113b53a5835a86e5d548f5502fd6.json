{"sha": "5bbb71154e5f113b53a5835a86e5d548f5502fd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiYjcxMTU0ZTVmMTEzYjUzYTU4MzVhODZlNWQ1NDhmNTUwMmZkNg==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2018-09-19T13:25:42Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2018-09-19T13:25:42Z"}, "message": "Remove constant vec_select restriction.\n\nThe vec_select operator is documented to require a const_int for the lane\nselector operand, but GCN has an instruction that can select the lane at\nruntime, so it seems reasonable to remove this restriction.\n\nThis patch simply replaces assertions that the operand is constant with early\nexits from the optimizers.  I think it's reasonable that vec_select with a\nnon-constant operand cannot be optimized, yet.\n\nAlso included is the necessary documentation tweak.\n\n2018-09-19  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* doc/rtl.texi: Adjust vec_select description.\n\t* simplify-rtx.c (simplify_binary_operation_1): Allow VEC_SELECT to use\n\tnon-constant selectors.\n\nFrom-SVN: r264423", "tree": {"sha": "9e07681483f902c00e17ec88d0fb16422b2d7a08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e07681483f902c00e17ec88d0fb16422b2d7a08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bbb71154e5f113b53a5835a86e5d548f5502fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bbb71154e5f113b53a5835a86e5d548f5502fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bbb71154e5f113b53a5835a86e5d548f5502fd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bbb71154e5f113b53a5835a86e5d548f5502fd6/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc9acaa99b9e6b3553f64b362cd22f32e961d3dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9acaa99b9e6b3553f64b362cd22f32e961d3dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc9acaa99b9e6b3553f64b362cd22f32e961d3dc"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "6ff707401b4fa5abd89db0a3e3a32c63d498eb76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb71154e5f113b53a5835a86e5d548f5502fd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb71154e5f113b53a5835a86e5d548f5502fd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bbb71154e5f113b53a5835a86e5d548f5502fd6", "patch": "@@ -1,3 +1,9 @@\n+2018-09-19  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* doc/rtl.texi: Adjust vec_select description.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Allow VEC_SELECT to use\n+\tnon-constant selectors.\n+\n 2018-09-19  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* config/aarch64/aarch64-protos.h"}, {"sha": "0695ad2df9b225a49fbde5c25f4c77729f893103", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb71154e5f113b53a5835a86e5d548f5502fd6/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb71154e5f113b53a5835a86e5d548f5502fd6/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=5bbb71154e5f113b53a5835a86e5d548f5502fd6", "patch": "@@ -2939,11 +2939,12 @@ a set bit indicates it is taken from @var{vec1}.\n @item (vec_select:@var{m} @var{vec1} @var{selection})\n This describes an operation that selects parts of a vector.  @var{vec1} is\n the source vector, and @var{selection} is a @code{parallel} that contains a\n-@code{const_int} for each of the subparts of the result vector, giving the\n-number of the source subpart that should be stored into it.\n-The result mode @var{m} is either the submode for a single element of\n-@var{vec1} (if only one subpart is selected), or another vector mode\n-with that element submode (if multiple subparts are selected).\n+@code{const_int} (or another expression, if the selection can be made at\n+runtime) for each of the subparts of the result vector, giving the number of\n+the source subpart that should be stored into it.  The result mode @var{m} is\n+either the submode for a single element of @var{vec1} (if only one subpart is\n+selected), or another vector mode with that element submode (if multiple\n+subparts are selected).\n \n @findex vec_concat\n @item (vec_concat:@var{m} @var{x1} @var{x2})"}, {"sha": "b4c6883d65de8cf163e9e6a797115d254b238adc", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb71154e5f113b53a5835a86e5d548f5502fd6/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb71154e5f113b53a5835a86e5d548f5502fd6/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=5bbb71154e5f113b53a5835a86e5d548f5502fd6", "patch": "@@ -3604,7 +3604,10 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  gcc_assert (mode == GET_MODE_INNER (GET_MODE (trueop0)));\n \t  gcc_assert (GET_CODE (trueop1) == PARALLEL);\n \t  gcc_assert (XVECLEN (trueop1, 0) == 1);\n-\t  gcc_assert (CONST_INT_P (XVECEXP (trueop1, 0, 0)));\n+\n+\t  /* We can't reason about selections made at runtime.  */\n+\t  if (!CONST_INT_P (XVECEXP (trueop1, 0, 0)))\n+\t    return 0;\n \n \t  if (vec_duplicate_p (trueop0, &elt0))\n \t    return elt0;\n@@ -3703,7 +3706,9 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t\t{\n \t\t  rtx x = XVECEXP (trueop1, 0, i);\n \n-\t\t  gcc_assert (CONST_INT_P (x));\n+\t\t  if (!CONST_INT_P (x))\n+\t\t    return 0;\n+\n \t\t  RTVEC_ELT (v, i) = CONST_VECTOR_ELT (trueop0,\n \t\t\t\t\t\t       INTVAL (x));\n \t\t}"}]}