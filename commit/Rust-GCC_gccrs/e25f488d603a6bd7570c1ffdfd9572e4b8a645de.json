{"sha": "e25f488d603a6bd7570c1ffdfd9572e4b8a645de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1ZjQ4OGQ2MDNhNmJkNzU3MGMxZmZkZmQ5NTcyZTRiOGE2NDVkZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-14T11:17:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-14T11:17:18Z"}, "message": "Fix unique_ptr pretty printer for empty classes\n\nThe printer was confused when unique_ptr<T,D>::pointer is an empty\nclass, or the deleter is not empty. Instead of assuming the tuple has a\nsingle _M_head_impl member manually inspect the tuple base classes to\nget the first element.\n\n\t* python/libstdcxx/v6/printers.py (UniquePointerPrinter.__init__): Do\n\tnot assume field called _M_head_impl is the first tuple element.\n\t* testsuite/libstdc++-prettyprinters/compat.cc: Make tuple\n\timplementation more accurate.\n\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Check unique_ptr with\n\tempty pointer type and non-empty deleter.\n\nFrom-SVN: r271159", "tree": {"sha": "ff1a79dec41d39f4ee7792d10c198606b8877d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff1a79dec41d39f4ee7792d10c198606b8877d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e25f488d603a6bd7570c1ffdfd9572e4b8a645de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25f488d603a6bd7570c1ffdfd9572e4b8a645de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e25f488d603a6bd7570c1ffdfd9572e4b8a645de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25f488d603a6bd7570c1ffdfd9572e4b8a645de/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b18663e0fbd6e253feca9e1f29e6f5b5538408d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b18663e0fbd6e253feca9e1f29e6f5b5538408d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b18663e0fbd6e253feca9e1f29e6f5b5538408d"}], "stats": {"total": 62, "additions": 57, "deletions": 5}, "files": [{"sha": "b6061f406cb84a2dba2f6e4d09d296b0d0dac1f4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25f488d603a6bd7570c1ffdfd9572e4b8a645de/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25f488d603a6bd7570c1ffdfd9572e4b8a645de/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e25f488d603a6bd7570c1ffdfd9572e4b8a645de", "patch": "@@ -1,5 +1,12 @@\n 2019-05-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* python/libstdcxx/v6/printers.py (UniquePointerPrinter.__init__): Do\n+\tnot assume field called _M_head_impl is the first tuple element.\n+\t* testsuite/libstdc++-prettyprinters/compat.cc: Make tuple\n+\timplementation more accurate.\n+\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Check unique_ptr with\n+\tempty pointer type and non-empty deleter.\n+\n \tLWG 2899 - Make is_move_constructible correct for unique_ptr\n \t* include/bits/unique_ptr.h (__uniq_ptr_impl): Add move constructor,\n \tmove assignment operator."}, {"sha": "162b00760e65e358d33836ababea8e855313d76a", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25f488d603a6bd7570c1ffdfd9572e4b8a645de/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25f488d603a6bd7570c1ffdfd9572e4b8a645de/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=e25f488d603a6bd7570c1ffdfd9572e4b8a645de", "patch": "@@ -185,11 +185,18 @@ def __init__ (self, typename, val):\n         # Check for new implementations first:\n         if is_specialization_of(impl_type, '__uniq_ptr_data') \\\n             or is_specialization_of(impl_type, '__uniq_ptr_impl'):\n-            self.pointer = val['_M_t']['_M_t']['_M_head_impl']\n+            tuple_member = val['_M_t']['_M_t']\n         elif is_specialization_of(impl_type, 'tuple'):\n-            self.pointer = val['_M_t']['_M_head_impl']\n+            tuple_member = val['_M_t']\n         else:\n             raise ValueError(\"Unsupported implementation for unique_ptr: %s\" % impl_type)\n+        tuple_impl_type = tuple_member.type.fields()[0].type # _Tuple_impl\n+        tuple_head_type = tuple_impl_type.fields()[1].type   # _Head_base\n+        head_field = tuple_head_type.fields()[0]\n+        if head_field.name == '_M_head_impl':\n+            self.pointer = tuple_member['_M_head_impl']\n+        elif head_field.is_base_class:\n+            self.pointer = tuple_member.cast(head_field.type)\n \n     def children (self):\n         return SmartPtrIterator(self.pointer)"}, {"sha": "28b0c2154d7aa9233d6a5b25ebf5f6b1012c02fd", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/compat.cc", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25f488d603a6bd7570c1ffdfd9572e4b8a645de/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcompat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25f488d603a6bd7570c1ffdfd9572e4b8a645de/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcompat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcompat.cc?ref=e25f488d603a6bd7570c1ffdfd9572e4b8a645de", "patch": "@@ -22,12 +22,30 @@\n \n namespace std\n {\n-  template<typename T, typename U>\n-    struct tuple\n+  template<typename T>\n+    struct _Head_base : T\n+    { };\n+\n+  template<typename T>\n+    struct _Head_base<T*>\n     {\n-      T _M_head_impl;\n+      T* _M_head_impl;\n     };\n \n+  template<unsigned long, typename ...> struct _Tuple_impl;\n+\n+  template<typename T, typename U>\n+    struct _Tuple_impl<0, T, U> : _Tuple_impl<1, U>, _Head_base<T>\n+    { };\n+\n+  template<typename U>\n+    struct _Tuple_impl<1, U> : _Head_base<U>\n+    { };\n+\n+  template<typename T, typename U>\n+    struct tuple : _Tuple_impl<0, T, U>\n+    { };\n+\n   template<typename T> struct default_delete { };\n \n   template<typename T, typename D = default_delete<T>>"}, {"sha": "cc588125bdcc89d486432346ab8ee05816f50661", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx11.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25f488d603a6bd7570c1ffdfd9572e4b8a645de/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25f488d603a6bd7570c1ffdfd9572e4b8a645de/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc?ref=e25f488d603a6bd7570c1ffdfd9572e4b8a645de", "patch": "@@ -59,6 +59,21 @@ struct datum\n \n std::unique_ptr<datum> global;\n \n+struct Deleter\n+{\n+  // Deleter is not an empty class:\n+  int deleter_member = -1;\n+  // But pointer is an empty class:\n+  struct pointer\n+  {\n+    pointer(const void* = nullptr) { }\n+    explicit operator bool() const noexcept { return false; }\n+    friend bool operator==(pointer, pointer) noexcept { return true; }\n+    friend bool operator!=(pointer, pointer) noexcept { return false; }\n+  };\n+  void operator()(pointer) const noexcept { }\n+};\n+\n int\n main()\n {\n@@ -136,6 +151,11 @@ main()\n   std::unique_ptr<data>& rarrptr = arrptr;\n // { dg-final { regexp-test rarrptr {std::unique_ptr.datum \\[\\]. = {get\\(\\) = 0x.*}} } }\n \n+  std::unique_ptr<int, Deleter> empty_ptr;\n+// { dg-final { note-test empty_ptr {std::unique_ptr<int> = {get() = {<No data fields>}}} } }\n+  std::unique_ptr<int, Deleter>& rempty_ptr = empty_ptr;\n+// { dg-final { note-test rempty_ptr {std::unique_ptr<int> = {get() = {<No data fields>}}} } }\n+\n   ExTuple tpl(6,7);\n // { dg-final { note-test tpl {std::tuple containing = {[1] = 6, [2] = 7}} } }\n   ExTuple &rtpl = tpl;"}]}