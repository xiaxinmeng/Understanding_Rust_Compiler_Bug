{"sha": "a081ded4df03e30cd4aefa1e946eb31aa423bfb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA4MWRlZDRkZjAzZTMwY2Q0YWVmYTFlOTQ2ZWIzMWFhNDIzYmZiMg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-11T08:01:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-11T08:01:54Z"}, "message": "[Ada] Compile-time evaluation of predicate checks\n\nThis patch recognizes case of dynamic predicates on integer subtypes\nthat are simple enough to be evaluated statically when the argument is\nitself a literal. Even though in many cases such predicate checks will\nbe removed by the back-end with any level of optimization, it is\npreferable to perform this constant folding in the front-end, wich also\ncleans up the output of CCG, as well as producing explicit warnings when\nthe test will fail.\n\n2019-07-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (Can_Fold_Predicate_Call): New function,\n\tsubsidiary of Expand_Call_Helper, to compute statically a\n\tpredicate check when the argument is a static integer.\n\ngcc/testsuite/\n\n\t* gnat.dg/predicate11.adb: New testcase.\n\nFrom-SVN: r273386", "tree": {"sha": "013e6f55feb3e4e9d186337e498d82b74d5e482c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/013e6f55feb3e4e9d186337e498d82b74d5e482c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a081ded4df03e30cd4aefa1e946eb31aa423bfb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a081ded4df03e30cd4aefa1e946eb31aa423bfb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a081ded4df03e30cd4aefa1e946eb31aa423bfb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a081ded4df03e30cd4aefa1e946eb31aa423bfb2/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd8b4c118e15b03a9f8ca748be0c3415e8df788a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd8b4c118e15b03a9f8ca748be0c3415e8df788a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd8b4c118e15b03a9f8ca748be0c3415e8df788a"}], "stats": {"total": 130, "additions": 130, "deletions": 0}, "files": [{"sha": "b79a8173388af00973fca6e983555cecf105e812", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a081ded4df03e30cd4aefa1e946eb31aa423bfb2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a081ded4df03e30cd4aefa1e946eb31aa423bfb2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a081ded4df03e30cd4aefa1e946eb31aa423bfb2", "patch": "@@ -1,3 +1,9 @@\n+2019-07-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Can_Fold_Predicate_Call): New function,\n+\tsubsidiary of Expand_Call_Helper, to compute statically a\n+\tpredicate check when the argument is a static integer.\n+\n 2019-07-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_res.adb (Resolve_Op_Not): Do not rewrite an equality"}, {"sha": "0251d008eea295342c495242987c008e82fbceee", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a081ded4df03e30cd4aefa1e946eb31aa423bfb2/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a081ded4df03e30cd4aefa1e946eb31aa423bfb2/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a081ded4df03e30cd4aefa1e946eb31aa423bfb2", "patch": "@@ -2319,6 +2319,13 @@ package body Exp_Ch6 is\n       --  Adds invariant checks for every intermediate type between the range\n       --  of a view converted argument to its ancestor (from parent to child).\n \n+      function Can_Fold_Predicate_Call (P : Entity_Id) return Boolean;\n+      --  Try to constant-fold a predicate check, which often enough is a\n+      --  simple arithmetic expression that can be computed statically if\n+      --  its argument is static. This cleans up the output of CCG, even\n+      --  though useless predicate checks will be generally removed by\n+      --  back-end optimizations.\n+\n       function Inherited_From_Formal (S : Entity_Id) return Entity_Id;\n       --  Within an instance, a type derived from an untagged formal derived\n       --  type inherits from the original parent, not from the actual. The\n@@ -2467,6 +2474,89 @@ package body Exp_Ch6 is\n          end if;\n       end Add_View_Conversion_Invariants;\n \n+      -----------------------------\n+      -- Can_Fold_Predicate_Call --\n+      -----------------------------\n+\n+      function Can_Fold_Predicate_Call (P : Entity_Id) return Boolean is\n+         Actual : constant Node_Id :=\n+                    First (Parameter_Associations (Call_Node));\n+         Subt : constant Entity_Id := Etype (First_Entity (P));\n+         Pred : Node_Id;\n+\n+         function May_Fold (N : Node_Id) return Traverse_Result;\n+         --  The predicate expression is foldable if it only contains operators\n+         --  and literals. During this check, we also replace occurrences of\n+         --  the formal of the constructed predicate function with the static\n+         --  value of the actual. This is done on a copy of the analyzed\n+         --  expression for the predicate.\n+\n+         function May_Fold (N : Node_Id) return Traverse_Result is\n+         begin\n+            case Nkind (N) is\n+               when N_Binary_Op | N_Unary_Op  =>\n+                  return OK;\n+\n+               when N_Identifier | N_Expanded_Name =>\n+                  if Ekind (Entity (N)) = E_In_Parameter\n+                    and then Entity (N) = First_Entity (P)\n+                  then\n+                     Rewrite (N, New_Copy (Actual));\n+                     Set_Is_Static_Expression (N);\n+                     return OK;\n+\n+                  elsif Ekind (Entity (N)) = E_Enumeration_Literal then\n+                     return OK;\n+\n+                  else\n+                     return Abandon;\n+                  end if;\n+\n+               when N_If_Expression | N_Case_Expression =>\n+                  return OK;\n+\n+               when N_Integer_Literal =>\n+                  return OK;\n+\n+               when others =>\n+                  return Abandon;\n+            end case;\n+         end May_Fold;\n+\n+         function Try_Fold is new Traverse_Func (May_Fold);\n+\n+      --  Start of processing for Can_Fold_Predicate_Call\n+\n+      begin\n+         --  Folding is only interesting if the actual is static and its type\n+         --  has a Dynamic_Predicate aspect. For CodePeer we preserve the\n+         --  function call.\n+\n+         if Nkind (Actual) /= N_Integer_Literal\n+           or else not Has_Dynamic_Predicate_Aspect (Subt)\n+           or else CodePeer_Mode\n+         then\n+            return False;\n+         end if;\n+\n+         --  Retrieve the analyzed expression for the predicate\n+\n+         Pred :=\n+            New_Copy_Tree\n+              (Expression (Find_Aspect (Subt, Aspect_Dynamic_Predicate)));\n+\n+         if Try_Fold (Pred) = OK then\n+            Rewrite (Call_Node, Pred);\n+            Analyze_And_Resolve (Call_Node, Standard_Boolean);\n+            return True;\n+\n+         else\n+            --  Continue expansion of function call\n+\n+            return False;\n+         end if;\n+      end Can_Fold_Predicate_Call;\n+\n       ---------------------------\n       -- Inherited_From_Formal --\n       ---------------------------\n@@ -2815,6 +2905,17 @@ package body Exp_Ch6 is\n          end;\n       end if;\n \n+      --  if this is a call to a predicate function, try to constant\n+      --  fold it.\n+\n+      if Nkind (Call_Node) = N_Function_Call\n+        and then Is_Entity_Name (Name (Call_Node))\n+        and then Is_Predicate_Function (Subp)\n+        and then Can_Fold_Predicate_Call (Subp)\n+      then\n+         return;\n+      end if;\n+\n       if Modify_Tree_For_C\n         and then Nkind (Call_Node) = N_Function_Call\n         and then Is_Entity_Name (Name (Call_Node))"}, {"sha": "bbfada284f969f6698de6f8c6b71a5d09aad5732", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a081ded4df03e30cd4aefa1e946eb31aa423bfb2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a081ded4df03e30cd4aefa1e946eb31aa423bfb2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a081ded4df03e30cd4aefa1e946eb31aa423bfb2", "patch": "@@ -1,3 +1,7 @@\n+2019-07-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/predicate11.adb: New testcase.\n+\n 2019-07-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* gnat.dg/equal9.adb: New testcase."}, {"sha": "dc92a9182dc1115479ece1bbe44e47957de5146f", "filename": "gcc/testsuite/gnat.dg/predicate11.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a081ded4df03e30cd4aefa1e946eb31aa423bfb2/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a081ded4df03e30cd4aefa1e946eb31aa423bfb2/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate11.adb?ref=a081ded4df03e30cd4aefa1e946eb31aa423bfb2", "patch": "@@ -0,0 +1,19 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnata\" }\n+\n+procedure Predicate11 is\n+   type T_BYTES  is new Integer range 0 .. 2**15 - 1  with Size => 32;\n+   subtype TYPE5_SCALAR is T_BYTES\n+     with Dynamic_Predicate => TYPE5_SCALAR mod 4 = 0;\n+   subtype Cond is Integer\n+     with dynamic_predicate => (if cond < 5 then false else True);\n+\n+   Thing1 : Type5_Scalar := 7;  --  { dg-warning \"check will fail at run time\" }\n+   function OK (C :Type5_scalar) return Boolean is (True);\n+   Thing2 : Type5_Scalar;\n+   Thing3 : Cond;\n+begin\n+   if not OK (7) then raise Program_Error; end if;  --  { dg-warning \"check will fail at run time\" }\n+   Thing2 := 8;\n+   Thing3 := 1;  --  { dg-warning \"check will fail at run time\" }\n+end;"}]}