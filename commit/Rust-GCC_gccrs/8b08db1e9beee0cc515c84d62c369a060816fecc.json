{"sha": "8b08db1e9beee0cc515c84d62c369a060816fecc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwOGRiMWU5YmVlZTBjYzUxNWM4NGQ2MmMzNjlhMDYwODE2ZmVjYw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-12-18T08:18:22Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-12-18T08:18:22Z"}, "message": "sse.md (*fma_fmadd_<mode>): Extend to support masking.\n\n        * config/i386/sse.md (*fma_fmadd_<mode>): Extend to support masking.\n        (*fma_fmsub_<mode>): Ditto.\n        (*fma_fnmadd_<mode>): Ditto.\n        (*fma_fnmsub_<mode>): Ditto.\n        (*fma_fmaddsub_<mode>): Ditto.\n        (*fma_fmsubadd_<mode>): Ditto.\n        (avx512f_vternlog<mode>): Ditto.\n        (avx512f_fixupimm<mode>): Ditto.\n        (avx512f_sfixupimm<mode>): Ditto.\n        (avx512f_vpermi2var<mode>3): Ditto.\n        (avx512f_vpermt2var<mode>3): Ditto.\n        (avx512f_fmaddsub_<mode>_maskz): New.\n        (avx512f_vternlog<mode>_maskz): Ditto.\n        (avx512f_fixupimm<mode>_maskz): Ditto.\n        (avx512f_sfixupimm<mode>_maskz): Ditto.\n        (avx512f_vpermi2var<mode>3_maskz): Ditto.\n        (avx512f_vpermt2var<mode>3_maskz): Ditto.\n        (avx512f_expand<mode>_maskz): Ditto.\n        * config/i386/subst.md (sd_maskz_name): Ditto.\n        (sd_mask_op4): Ditto.\n        (sd_mask_op5): Ditto.\n        (sd_mask_codefor): Ditto.\n        (sd_mask_mode512bit_condition): Ditto.\n        (sd): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r206081", "tree": {"sha": "a6d58997fc2a55f8b89ab9563904829ed116bf02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6d58997fc2a55f8b89ab9563904829ed116bf02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b08db1e9beee0cc515c84d62c369a060816fecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b08db1e9beee0cc515c84d62c369a060816fecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b08db1e9beee0cc515c84d62c369a060816fecc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b08db1e9beee0cc515c84d62c369a060816fecc/comments", "author": null, "committer": null, "parents": [{"sha": "a95ec51797e17c3967fdfa17eee1c9c03b904414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95ec51797e17c3967fdfa17eee1c9c03b904414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a95ec51797e17c3967fdfa17eee1c9c03b904414"}], "stats": {"total": 232, "additions": 191, "deletions": 41}, "files": [{"sha": "7bf07cc56f090bb655f7629c41294278301e20c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b08db1e9beee0cc515c84d62c369a060816fecc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b08db1e9beee0cc515c84d62c369a060816fecc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b08db1e9beee0cc515c84d62c369a060816fecc", "patch": "@@ -1,4 +1,39 @@\n-2013-11-13  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+2013-12-18  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (*fma_fmadd_<mode>): Extend to support masking.\n+\t(*fma_fmsub_<mode>): Ditto.\n+\t(*fma_fnmadd_<mode>): Ditto.\n+\t(*fma_fnmsub_<mode>): Ditto.\n+\t(*fma_fmaddsub_<mode>): Ditto.\n+\t(*fma_fmsubadd_<mode>): Ditto.\n+\t(avx512f_vternlog<mode>): Ditto.\n+\t(avx512f_fixupimm<mode>): Ditto.\n+\t(avx512f_sfixupimm<mode>): Ditto.\n+\t(avx512f_vpermi2var<mode>3): Ditto.\n+\t(avx512f_vpermt2var<mode>3): Ditto.\n+\t(avx512f_fmaddsub_<mode>_maskz): New.\n+\t(avx512f_vternlog<mode>_maskz): Ditto.\n+\t(avx512f_fixupimm<mode>_maskz): Ditto.\n+\t(avx512f_sfixupimm<mode>_maskz): Ditto.\n+\t(avx512f_vpermi2var<mode>3_maskz): Ditto.\n+\t(avx512f_vpermt2var<mode>3_maskz): Ditto.\n+\t(avx512f_expand<mode>_maskz): Ditto.\n+\t* config/i386/subst.md (sd_maskz_name): Ditto.\n+\t(sd_mask_op4): Ditto.\n+\t(sd_mask_op5): Ditto.\n+\t(sd_mask_codefor): Ditto.\n+\t(sd_mask_mode512bit_condition): Ditto.\n+\t(sd): Ditto.\n+\n+2013-12-18  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "adedf44fc3146390408eb53466f41a3d8f7b5805", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 138, "deletions": 40, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b08db1e9beee0cc515c84d62c369a060816fecc/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b08db1e9beee0cc515c84d62c369a060816fecc/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8b08db1e9beee0cc515c84d62c369a060816fecc", "patch": "@@ -2698,17 +2698,17 @@\n \t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n   \"\")\n \n-(define_insn \"*fma_fmadd_<mode>\"\n+(define_insn \"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(fma:FMAMODE\n \t  (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0, 0, v, x,x\")\n \t  (match_operand:FMAMODE 2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n \t  (match_operand:FMAMODE 3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\")))]\n-  \"\"\n+  \"<sd_mask_mode512bit_condition>\"\n   \"@\n-   vfmadd132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n-   vfmadd213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n-   vfmadd231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n+   vfmadd132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n+   vfmadd213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n+   vfmadd231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n    vfmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n@@ -2747,18 +2747,18 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*fma_fmsub_<mode>\"\n+(define_insn \"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(fma:FMAMODE\n \t  (match_operand:FMAMODE   1 \"nonimmediate_operand\" \"%0, 0, v, x,x\")\n \t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n \t  (neg:FMAMODE\n \t    (match_operand:FMAMODE 3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\"))))]\n-  \"\"\n+  \"<sd_mask_mode512bit_condition>\"\n   \"@\n-   vfmsub132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n-   vfmsub213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n-   vfmsub231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n+   vfmsub132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n+   vfmsub213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n+   vfmsub231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n    vfmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n@@ -2799,18 +2799,18 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*fma_fnmadd_<mode>\"\n+(define_insn \"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(fma:FMAMODE\n \t  (neg:FMAMODE\n \t    (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0, 0, v, x,x\"))\n \t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n \t  (match_operand:FMAMODE   3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\")))]\n-  \"\"\n+  \"<sd_mask_mode512bit_condition>\"\n   \"@\n-   vfnmadd132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n-   vfnmadd213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n-   vfnmadd231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n+   vfnmadd132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n+   vfnmadd213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n+   vfnmadd231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n    vfnmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfnmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n@@ -2851,19 +2851,19 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*fma_fnmsub_<mode>\"\n+(define_insn \"<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(fma:FMAMODE\n \t  (neg:FMAMODE\n \t    (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0, 0, v, x,x\"))\n \t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n \t  (neg:FMAMODE\n \t    (match_operand:FMAMODE 3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\"))))]\n-  \"\"\n+  \"<sd_mask_mode512bit_condition>\"\n   \"@\n-   vfnmsub132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n-   vfnmsub213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n-   vfnmsub231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n+   vfnmsub132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n+   vfnmsub213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n+   vfnmsub231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n    vfnmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfnmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n@@ -2926,18 +2926,32 @@\n \t  UNSPEC_FMADDSUB))]\n   \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n \n-(define_insn \"*fma_fmaddsub_<mode>\"\n+(define_expand \"avx512f_fmaddsub_<mode>_maskz\"\n+  [(match_operand:VF_512 0 \"register_operand\")\n+   (match_operand:VF_512 1 \"nonimmediate_operand\")\n+   (match_operand:VF_512 2 \"nonimmediate_operand\")\n+   (match_operand:VF_512 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_fma_fmaddsub_<mode>_maskz_1 (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(unspec:VF\n \t  [(match_operand:VF 1 \"nonimmediate_operand\" \"%0, 0, v, x,x\")\n \t   (match_operand:VF 2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n \t   (match_operand:VF 3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\")]\n \t  UNSPEC_FMADDSUB))]\n-  \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F)\"\n+  \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && <sd_mask_mode512bit_condition>\"\n   \"@\n-   vfmaddsub132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n-   vfmaddsub213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n-   vfmaddsub231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n+   vfmaddsub132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n+   vfmaddsub213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n+   vfmaddsub231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n    vfmaddsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmaddsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n@@ -2978,19 +2992,19 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*fma_fmsubadd_<mode>\"\n+(define_insn \"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(unspec:VF\n \t  [(match_operand:VF   1 \"nonimmediate_operand\" \"%0, 0, v, x,x\")\n \t   (match_operand:VF   2 \"nonimmediate_operand\" \"vm, v,vm, x,m\")\n \t   (neg:VF\n \t     (match_operand:VF 3 \"nonimmediate_operand\" \" v,vm, 0,xm,x\"))]\n \t  UNSPEC_FMADDSUB))]\n-  \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F)\"\n+  \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && <sd_mask_mode512bit_condition>\"\n   \"@\n-   vfmsubadd132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n-   vfmsubadd213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n-   vfmsubadd231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n+   vfmsubadd132<ssemodesuffix>\\t{%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2}\n+   vfmsubadd213<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\n+   vfmsubadd231<ssemodesuffix>\\t{%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2}\n    vfmsubadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmsubadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n@@ -6443,7 +6457,22 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\"  \"<MODE>\")])\n \n-(define_insn \"avx512f_vternlog<mode>\"\n+(define_expand \"avx512f_vternlog<mode>_maskz\"\n+  [(match_operand:VI48_512 0 \"register_operand\")\n+   (match_operand:VI48_512 1 \"register_operand\")\n+   (match_operand:VI48_512 2 \"register_operand\")\n+   (match_operand:VI48_512 3 \"nonimmediate_operand\")\n+   (match_operand:SI 4 \"const_0_to_255_operand\")\n+   (match_operand:<avx512fmaskmode> 5 \"register_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_avx512f_vternlog<mode>_maskz_1 (\n+    operands[0], operands[1], operands[2], operands[3],\n+    operands[4], CONST0_RTX (<MODE>mode), operands[5]));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_vternlog<mode><sd_maskz_name>\"\n   [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n \t(unspec:VI48_512\n \t  [(match_operand:VI48_512 1 \"register_operand\" \"0\")\n@@ -6452,7 +6481,7 @@\n \t   (match_operand:SI 4 \"const_0_to_255_operand\")]\n \t  UNSPEC_VTERNLOG))]\n   \"TARGET_AVX512F\"\n-  \"vpternlog<ssemodesuffix>\\t{%4, %3, %2, %0|%0, %2, %3, %4}\"\n+  \"vpternlog<ssemodesuffix>\\t{%4, %3, %2, %0<sd_mask_op5>|%0<sd_mask_op5>, %2, %3, %4}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -6539,7 +6568,23 @@\n   DONE;\n })\n \n-(define_insn \"avx512f_fixupimm<mode>\"\n+\n+(define_expand \"avx512f_fixupimm<mode>_maskz\"\n+  [(match_operand:VF_512 0 \"register_operand\")\n+   (match_operand:VF_512 1 \"register_operand\")\n+   (match_operand:VF_512 2 \"register_operand\")\n+   (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\")\n+   (match_operand:SI 4 \"const_0_to_255_operand\")\n+   (match_operand:<avx512fmaskmode> 5 \"register_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_avx512f_fixupimm<mode>_maskz_1 (\n+\toperands[0], operands[1], operands[2], operands[3],\n+\toperands[4], CONST0_RTX (<MODE>mode), operands[5]));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_fixupimm<mode><sd_maskz_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n         (unspec:VF_512\n           [(match_operand:VF_512 1 \"register_operand\" \"0\")\n@@ -6548,7 +6593,7 @@\n            (match_operand:SI 4 \"const_0_to_255_operand\")]\n            UNSPEC_FIXUPIMM))]\n   \"TARGET_AVX512F\"\n-  \"vfixupimm<ssemodesuffix>\\t{%4, %3, %2, %0|%0, %2, %3, %4}\";\n+  \"vfixupimm<ssemodesuffix>\\t{%4, %3, %2, %0<sd_mask_op5>|%0<sd_mask_op5>, %2, %3, %4}\";\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -6568,7 +6613,22 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_sfixupimm<mode>\"\n+(define_expand \"avx512f_sfixupimm<mode>_maskz\"\n+  [(match_operand:VF_128 0 \"register_operand\")\n+   (match_operand:VF_128 1 \"register_operand\")\n+   (match_operand:VF_128 2 \"register_operand\")\n+   (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\")\n+   (match_operand:SI 4 \"const_0_to_255_operand\")\n+   (match_operand:<avx512fmaskmode> 5 \"register_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_avx512f_sfixupimm<mode>_maskz_1 (\n+\toperands[0], operands[1], operands[2], operands[3],\n+\toperands[4], CONST0_RTX (<MODE>mode), operands[5]));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_sfixupimm<mode><sd_maskz_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n           (unspec:VF_128\n@@ -6580,7 +6640,7 @@\n \t  (match_dup 1)\n \t  (const_int 1)))]\n    \"TARGET_AVX512F\"\n-   \"vfixupimm<ssescalarmodesuffix>\\t{%4, %3, %2, %0|%0, %2, %3, %4}\";\n+   \"vfixupimm<ssescalarmodesuffix>\\t{%4, %3, %2, %0<sd_mask_op5>|%0<sd_mask_op5>, %2, %3, %4}\";\n    [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n@@ -13892,15 +13952,29 @@\n    (set_attr \"prefix\" \"<mask_prefix>\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_vpermi2var<mode>3\"\n+(define_expand \"avx512f_vpermi2var<mode>3_maskz\"\n+  [(match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n+   (match_operand:VI48F_512 1 \"register_operand\" \"v\")\n+   (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n+   (match_operand:VI48F_512 3 \"nonimmediate_operand\" \"vm\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_avx512f_vpermi2var<mode>3_maskz_1 (\n+\toperands[0], operands[1], operands[2], operands[3],\n+\tCONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_vpermi2var<mode>3<sd_maskz_name>\"\n   [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n \t(unspec:VI48F_512\n \t  [(match_operand:VI48F_512 1 \"register_operand\" \"v\")\n \t   (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n \t   (match_operand:VI48F_512 3 \"nonimmediate_operand\" \"vm\")]\n \t  UNSPEC_VPERMI2))]\n   \"TARGET_AVX512F\"\n-  \"vpermi2<ssemodesuffix>\\t{%3, %1, %0|%0, %1, %3}\"\n+  \"vpermi2<ssemodesuffix>\\t{%3, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -13921,15 +13995,29 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_vpermt2var<mode>3\"\n+(define_expand \"avx512f_vpermt2var<mode>3_maskz\"\n+  [(match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n+   (match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n+   (match_operand:VI48F_512 2 \"register_operand\" \"0\")\n+   (match_operand:VI48F_512 3 \"nonimmediate_operand\" \"vm\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_avx512f_vpermt2var<mode>3_maskz_1 (\n+\toperands[0], operands[1], operands[2], operands[3],\n+\tCONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_vpermt2var<mode>3<sd_maskz_name>\"\n   [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n \t(unspec:VI48F_512\n \t  [(match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n \t   (match_operand:VI48F_512 2 \"register_operand\" \"0\")\n \t   (match_operand:VI48F_512 3 \"nonimmediate_operand\" \"vm\")]\n \t  UNSPEC_VPERMT2))]\n   \"TARGET_AVX512F\"\n-  \"vpermt2<ssemodesuffix>\\t{%3, %1, %0|%0, %1, %3}\"\n+  \"vpermt2<ssemodesuffix>\\t{%3, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -14938,6 +15026,16 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"avx512f_expand<mode>_maskz\"\n+  [(set (match_operand:VI48F_512 0 \"register_operand\")\n+\t(unspec:VI48F_512\n+\t  [(match_operand:VI48F_512 1 \"nonimmediate_operand\")\n+\t   (match_operand:VI48F_512 2 \"vector_move_operand\")\n+\t   (match_operand:<avx512fmaskmode> 3 \"register_operand\")]\n+\t  UNSPEC_EXPAND))]\n+  \"TARGET_AVX512F\"\n+  \"operands[2] = CONST0_RTX (<MODE>mode);\")\n+\n (define_insn \"avx512f_expand<mode>_mask\"\n   [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v,v\")\n \t(unspec:VI48F_512"}, {"sha": "594dc438922a98c1290475f7710205fced786cd0", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b08db1e9beee0cc515c84d62c369a060816fecc/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b08db1e9beee0cc515c84d62c369a060816fecc/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=8b08db1e9beee0cc515c84d62c369a060816fecc", "patch": "@@ -70,3 +70,20 @@\n         (and:SUBST_S\n \t  (match_dup 1)\n \t  (match_operand:SUBST_S 3 \"register_operand\" \"k\")))])\n+\n+(define_subst_attr \"sd_maskz_name\" \"sd\" \"\" \"_maskz_1\")\n+(define_subst_attr \"sd_mask_op4\" \"sd\" \"\" \"%{%5%}%N4\")\n+(define_subst_attr \"sd_mask_op5\" \"sd\" \"\" \"%{%6%}%N5\")\n+(define_subst_attr \"sd_mask_codefor\" \"sd\" \"*\" \"\")\n+(define_subst_attr \"sd_mask_mode512bit_condition\" \"sd\" \"1\" \"(GET_MODE_SIZE (GET_MODE (operands[0])) == 64)\")\n+\n+(define_subst \"sd\"\n+ [(set (match_operand:SUBST_V 0)\n+       (match_operand:SUBST_V 1))]\n+ \"\"\n+ [(set (match_dup 0)\n+       (vec_merge:SUBST_V\n+\t (match_dup 1)\n+\t (match_operand:SUBST_V 2 \"const0_operand\" \"C\")\n+\t (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"k\")))\n+])"}]}