{"sha": "dbcd32f889365695b3ed835a3a7de5d23048f43b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJjZDMyZjg4OTM2NTY5NWIzZWQ4MzVhM2E3ZGU1ZDIzMDQ4ZjQzYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-05T22:17:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-05T22:17:13Z"}, "message": "re PR c++/86485 (\"anonymous\" maybe-uninitialized false positive with ternary operator)\n\n\t* class.c (is_really_empty_class): Add ignore_vptr parm.\n\nWhile looking at PR86485, I noticed that many uses of is_really_empty_class\nwere overlooking that it returned true for a class with only a vptr;\ninitialization of such a class is not trivial.  Marek's P1064 patch fixed\none place in constexpr.c to also check for a vtable, but there are several\nothers that still don't.\n\nThis patch requires callers to explicitly choose which behavior they want.\nCurrently the uses in constexpr.c want to consider the vptr, and other uses\ndon't.\n\n\t* class.c (is_really_empty_class): Add ignore_vptr parm.\n\t(trivial_default_constructor_is_constexpr): Pass it.\n\t* call.c (build_over_call): Pass it.\n\t* constexpr.c (cxx_eval_constant_expression): Pass it instead of\n\tchecking TYPE_POLYMORPHIC_P.\n\t(cxx_eval_component_reference, potential_constant_expression_1):\n\tPass it.\n\t* cp-gimplify.c (simple_empty_class_p): Pass it.\n\t* init.c (expand_aggr_init_1): Pass it.\n\nFrom-SVN: r269402", "tree": {"sha": "96f919af96a1d63fd5318191f716d125ff4b1c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96f919af96a1d63fd5318191f716d125ff4b1c04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbcd32f889365695b3ed835a3a7de5d23048f43b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbcd32f889365695b3ed835a3a7de5d23048f43b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbcd32f889365695b3ed835a3a7de5d23048f43b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbcd32f889365695b3ed835a3a7de5d23048f43b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9bf54c938ab8ab79a92a5f354686e103d66f1a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf54c938ab8ab79a92a5f354686e103d66f1a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf54c938ab8ab79a92a5f354686e103d66f1a1a"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "d2cb7fd1132d78357d3b18afc9c0b0113e2ebcfc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dbcd32f889365695b3ed835a3a7de5d23048f43b", "patch": "@@ -1,3 +1,15 @@\n+2019-03-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* class.c (is_really_empty_class): Add ignore_vptr parm.\n+\t(trivial_default_constructor_is_constexpr): Pass it.\n+\t* call.c (build_over_call): Pass it.\n+\t* constexpr.c (cxx_eval_constant_expression): Pass it instead of\n+\tchecking TYPE_POLYMORPHIC_P.\n+\t(cxx_eval_component_reference, potential_constant_expression_1):\n+\tPass it.\n+\t* cp-gimplify.c (simple_empty_class_p): Pass it.\n+\t* init.c (expand_aggr_init_1): Pass it.\n+\n 2019-03-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84605"}, {"sha": "04516eb967c2b982ad7138111058daa3feafd050", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=dbcd32f889365695b3ed835a3a7de5d23048f43b", "patch": "@@ -8566,7 +8566,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       tree arg = argarray[1];\n       location_t loc = cp_expr_loc_or_loc (arg, input_location);\n \n-      if (is_really_empty_class (type))\n+      if (is_really_empty_class (type, /*ignore_vptr*/true))\n \t{\n \t  /* Avoid copying empty classes.  */\n \t  val = build2 (COMPOUND_EXPR, type, arg, to);"}, {"sha": "0d4d35bd690acdd69d0d2e9c5ea560dc1863f503", "filename": "gcc/cp/class.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=dbcd32f889365695b3ed835a3a7de5d23048f43b", "patch": "@@ -5137,7 +5137,8 @@ trivial_default_constructor_is_constexpr (tree t)\n   /* A defaulted trivial default constructor is constexpr\n      if there is nothing to initialize.  */\n   gcc_assert (!TYPE_HAS_COMPLEX_DFLT (t));\n-  return is_really_empty_class (t);\n+  /* A class with a vptr doesn't have a trivial default ctor.  */\n+  return is_really_empty_class (t, /*ignore_vptr*/true);\n }\n \n /* Returns true iff class T has a constexpr default constructor.  */\n@@ -8310,10 +8311,12 @@ is_empty_class (tree type)\n }\n \n /* Returns true if TYPE contains no actual data, just various\n-   possible combinations of empty classes and possibly a vptr.  */\n+   possible combinations of empty classes.  If IGNORE_VPTR is true,\n+   a vptr doesn't prevent the class from being considered empty.  Typically\n+   we want to ignore the vptr on assignment, and not on initialization.  */\n \n bool\n-is_really_empty_class (tree type)\n+is_really_empty_class (tree type, bool ignore_vptr)\n {\n   if (CLASS_TYPE_P (type))\n     {\n@@ -8327,22 +8330,25 @@ is_really_empty_class (tree type)\n       if (COMPLETE_TYPE_P (type) && is_empty_class (type))\n \treturn true;\n \n+      if (!ignore_vptr && TYPE_CONTAINS_VPTR_P (type))\n+\treturn false;\n+\n       for (binfo = TYPE_BINFO (type), i = 0;\n \t   BINFO_BASE_ITERATE (binfo, i, base_binfo); ++i)\n-\tif (!is_really_empty_class (BINFO_TYPE (base_binfo)))\n+\tif (!is_really_empty_class (BINFO_TYPE (base_binfo), ignore_vptr))\n \t  return false;\n       for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n \tif (TREE_CODE (field) == FIELD_DECL\n \t    && !DECL_ARTIFICIAL (field)\n \t    /* An unnamed bit-field is not a data member.  */\n \t    && !DECL_UNNAMED_BIT_FIELD (field)\n-\t    && !is_really_empty_class (TREE_TYPE (field)))\n+\t    && !is_really_empty_class (TREE_TYPE (field), ignore_vptr))\n \t  return false;\n       return true;\n     }\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n     return (integer_zerop (array_type_nelts_top (type))\n-\t    || is_really_empty_class (TREE_TYPE (type)));\n+\t    || is_really_empty_class (TREE_TYPE (type), ignore_vptr));\n   return false;\n }\n "}, {"sha": "1c3c7252807164ba808abe8411131587730f03b7", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=dbcd32f889365695b3ed835a3a7de5d23048f43b", "patch": "@@ -2714,7 +2714,7 @@ cxx_eval_component_reference (const constexpr_ctx *ctx, tree t,\n \n   /* We only create a CONSTRUCTOR for a subobject when we modify it, so empty\n      classes never get represented; throw together a value now.  */\n-  if (is_really_empty_class (TREE_TYPE (t)))\n+  if (is_really_empty_class (TREE_TYPE (t), /*ignore_vptr*/false))\n     return build_constructor (TREE_TYPE (t), NULL);\n \n   gcc_assert (DECL_CONTEXT (part) == TYPE_MAIN_VARIANT (TREE_TYPE (whole)));\n@@ -4427,12 +4427,8 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t CONST_DECL for aggregate constants.  */\n       if (lval)\n \treturn t;\n-      /* is_really_empty_class doesn't take into account _vptr, so initializing\n-\t otherwise empty class with { } would overwrite the initializer that\n-\t initialize_vtable created for us.  */\n       if (COMPLETE_TYPE_P (TREE_TYPE (t))\n-\t  && !TYPE_POLYMORPHIC_P (TREE_TYPE (t))\n-\t  && is_really_empty_class (TREE_TYPE (t)))\n+\t  && is_really_empty_class (TREE_TYPE (t), /*ignore_vptr*/false))\n \t{\n \t  /* If the class is empty, we aren't actually loading anything.  */\n \t  r = build_constructor (TREE_TYPE (t), NULL);\n@@ -4480,7 +4476,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       else if (TYPE_REF_P (TREE_TYPE (t)))\n \t/* Defer, there's no lvalue->rvalue conversion.  */;\n       else if (COMPLETE_TYPE_P (TREE_TYPE (t))\n-\t       && is_really_empty_class (TREE_TYPE (t)))\n+\t       && is_really_empty_class (TREE_TYPE (t), /*ignore_vptr*/false))\n \t{\n \t  /* If the class is empty, we aren't actually loading anything.  */\n \t  r = build_constructor (TREE_TYPE (t), NULL);\n@@ -5956,7 +5952,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t      || (DECL_INITIAL (t)\n \t\t  && !DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (t)))\n \t  && COMPLETE_TYPE_P (TREE_TYPE (t))\n-\t  && !is_really_empty_class (TREE_TYPE (t)))\n+\t  && !is_really_empty_class (TREE_TYPE (t), /*ignore_vptr*/false))\n         {\n           if (flags & tf_error)\n             non_const_var_error (t);"}, {"sha": "26be1fd15223eb14e5bb8dfd08a3cc1e3595f908", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=dbcd32f889365695b3ed835a3a7de5d23048f43b", "patch": "@@ -584,7 +584,7 @@ simple_empty_class_p (tree type, tree op)\n \t && !TREE_CLOBBER_P (op))\n      || (TREE_CODE (op) == CALL_EXPR\n \t && !CALL_EXPR_RETURN_SLOT_OPT (op)))\n-    && is_really_empty_class (type);\n+    && is_really_empty_class (type, /*ignore_vptr*/true);\n }\n \n /* Returns true if evaluating E as an lvalue has side-effects;"}, {"sha": "15e39e1b5453f1ab1d389cbbe10b6310666b24e5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=dbcd32f889365695b3ed835a3a7de5d23048f43b", "patch": "@@ -6267,7 +6267,7 @@ extern void finish_struct_1\t\t\t(tree);\n extern int resolves_to_fixed_type_p\t\t(tree, int *);\n extern void init_class_processing\t\t(void);\n extern int is_empty_class\t\t\t(tree);\n-extern bool is_really_empty_class\t\t(tree);\n+extern bool is_really_empty_class\t\t(tree, bool);\n extern void pushclass\t\t\t\t(tree);\n extern void popclass\t\t\t\t(void);\n extern void push_nested_class\t\t\t(tree);"}, {"sha": "eb3b504d708d7b80b780f7f4c677d26ab629b708", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcd32f889365695b3ed835a3a7de5d23048f43b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=dbcd32f889365695b3ed835a3a7de5d23048f43b", "patch": "@@ -2058,7 +2058,7 @@ expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags,\n       /* If the type has data but no user-provided ctor, we need to zero\n \t out the object.  */\n       if (!type_has_user_provided_constructor (type)\n-\t  && !is_really_empty_class (type))\n+\t  && !is_really_empty_class (type, /*ignore_vptr*/true))\n \t{\n \t  tree field_size = NULL_TREE;\n \t  if (exp != true_exp && CLASSTYPE_AS_BASE (type) != type)"}]}