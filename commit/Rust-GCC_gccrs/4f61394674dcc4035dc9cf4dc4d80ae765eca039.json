{"sha": "4f61394674dcc4035dc9cf4dc4d80ae765eca039", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY2MTM5NDY3NGRjYzQwMzVkYzljZjRkYzRkODBhZTc2NWVjYTAzOQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-08-13T17:24:09Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-08-13T17:24:09Z"}, "message": "gfortran.h: Add comments.\n\n2004-08-13  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n\n\t* gfortran.h: Add comments.\n\t* parse.c (parse_contained): Fix comment typo.\n\t* resolve.c (was_declared): Ditto.\n\t* symbol.c: Ditto.\n\nFrom-SVN: r85950", "tree": {"sha": "7c75f659408f702b4a26ba44d1c92d87b6e579c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c75f659408f702b4a26ba44d1c92d87b6e579c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f61394674dcc4035dc9cf4dc4d80ae765eca039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f61394674dcc4035dc9cf4dc4d80ae765eca039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f61394674dcc4035dc9cf4dc4d80ae765eca039", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f61394674dcc4035dc9cf4dc4d80ae765eca039/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b13de673b1fee82b3864646ab6a77a31ce393bd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13de673b1fee82b3864646ab6a77a31ce393bd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b13de673b1fee82b3864646ab6a77a31ce393bd0"}], "stats": {"total": 64, "additions": 54, "deletions": 10}, "files": [{"sha": "935b748363054beaa4494216e1d11aaaec360b68", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f61394674dcc4035dc9cf4dc4d80ae765eca039/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f61394674dcc4035dc9cf4dc4d80ae765eca039/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4f61394674dcc4035dc9cf4dc4d80ae765eca039", "patch": "@@ -1,3 +1,10 @@\n+2004-08-13  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.h: Add comments.\n+\t* parse.c (parse_contained): Fix comment typo.\n+\t* resolve.c (was_declared): Ditto.\n+\t* symbol.c: Ditto.\n+\n 2004-08-11  Paul Brook  <paul@codeourcery.com>\n \n \tPR fortran/16917"}, {"sha": "80cdbbe9163f7375742bd545c5e943e2b6e93cae", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 44, "deletions": 7, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f61394674dcc4035dc9cf4dc4d80ae765eca039/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f61394674dcc4035dc9cf4dc4d80ae765eca039/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=4f61394674dcc4035dc9cf4dc4d80ae765eca039", "patch": "@@ -528,7 +528,9 @@ gfc_component;\n /* Formal argument lists are lists of symbols.  */\n typedef struct gfc_formal_arglist\n {\n+  /* Symbol representing the argument at this position in the arglist.  */\n   struct gfc_symbol *sym;\n+  /* Points to the next formal argument.  */\n   struct gfc_formal_arglist *next;\n }\n gfc_formal_arglist;\n@@ -712,18 +714,39 @@ gfc_symtree;\n \n typedef struct gfc_namespace\n {\n-  /* Roots of the red/black symbol trees */\n-  gfc_symtree *sym_root, *uop_root, *common_root;\t\n-\n+  /* Tree containing all the symbols in this namespace.  */\n+  gfc_symtree *sym_root;\n+  /* Tree containing all the user-defined operators in the namespace.  */\n+  gfc_symtree *uop_root;\n+  /* Tree containing all the common blocks.  */\n+  gfc_symtree *common_root;\t\n+\n+  /* If set_flag[letter] is set, an implicit type has been set for letter.  */\n   int set_flag[GFC_LETTERS];\n-  gfc_typespec default_type[GFC_LETTERS];\t/* IMPLICIT typespecs */\n+  /* Keeps track of the implicit types associated with the letters.  */\n+  gfc_typespec default_type[GFC_LETTERS];\n \n+  /* If this is a namespace of a procedure, this points to the procedure.  */\n   struct gfc_symbol *proc_name;\n-  gfc_interface *operator[GFC_INTRINSIC_OPS];\n-  struct gfc_namespace *parent, *contained, *sibling;\n+  /* If this is the namespace of a unit which contains executable\n+     code, this points to it.  */\n   struct gfc_code *code;\n-  gfc_common_head blank_common;\n+\n+  /* Points to the equivalences set up in this namespace.  */\n   struct gfc_equiv *equiv;\n+  gfc_interface *operator[GFC_INTRINSIC_OPS];\n+\n+  /* Points to the parent namespace, i.e. the namespace of a module or\n+     procedure in which the procedure belonging to this namespace is\n+     contained. The parent namespace points to this namespace either\n+     directly via CONTAINED, or indirectly via the chain built by\n+     SIBLING.  */\n+  struct gfc_namespace *parent;\n+  /* CONTAINED points to the first contained namespace. Sibling\n+     namespaces are chained via SIBLING.  */\n+  struct gfc_namespace  *contained, *sibling;\n+\n+  gfc_common_head blank_common;\n   gfc_access default_access, operator_access[GFC_INTRINSIC_OPS];\n \n   gfc_st_label *st_labels;\n@@ -850,6 +873,13 @@ typedef struct gfc_intrinsic_arg\n gfc_intrinsic_arg;\n \n \n+/* Specifies the various kinds of check functions used to verify the\n+   argument lists of intrinsic functions. fX with X an integer refer\n+   to check functions of intrinsics with X arguments. f1m is used for\n+   the MAX and MIN intrinsics which can have an arbitrary number of\n+   arguments, f3ml is used for the MINLOC and MAXLOC intrinsics as\n+   these have special semantics.  */\n+\n typedef union\n {\n   try (*f1)(struct gfc_expr *);\n@@ -864,6 +894,9 @@ typedef union\n }\n gfc_check_f;\n \n+/* Like gfc_check_f, these specify the type of the simplification\n+   function associated with an intrinsic. The fX are just like in\n+   gfc_check_f. cc is used for type conversion functions.  */\n \n typedef union\n {\n@@ -880,6 +913,10 @@ typedef union\n }\n gfc_simplify_f;\n \n+/* Again like gfc_check_f, these specify the type of the resolution\n+   function associated with an intrinsic. The fX are juse like in\n+   gfc_check_f. f1m is used for MIN and MAX, s1 is used for abort().\n+   */\n \n typedef union\n {"}, {"sha": "bd74139623d629c896d85d550132822a91a0514c", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f61394674dcc4035dc9cf4dc4d80ae765eca039/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f61394674dcc4035dc9cf4dc4d80ae765eca039/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=4f61394674dcc4035dc9cf4dc4d80ae765eca039", "patch": "@@ -2201,7 +2201,7 @@ parse_contained (int module)\n \t\t      gfc_new_block);\n \n \t  /* For internal procedures, create/update the symbol in the\n-\t   * parent namespace */\n+\t     parent namespace.  */\n \n \t  if (!module)\n \t    {"}, {"sha": "00d9e3daa6347c79c1ad927b66b672dba48d0fc1", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f61394674dcc4035dc9cf4dc4d80ae765eca039/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f61394674dcc4035dc9cf4dc4d80ae765eca039/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=4f61394674dcc4035dc9cf4dc4d80ae765eca039", "patch": "@@ -371,7 +371,7 @@ resolve_structure_cons (gfc_expr * expr)\n /****************** Expression name resolution ******************/\n \n /* Returns 0 if a symbol was not declared with a type or\n-   or attribute declaration statement, nonzero otherwise.  */\n+   attribute declaration statement, nonzero otherwise.  */\n \n static int\n was_declared (gfc_symbol * sym)"}, {"sha": "4b6c6e416dcb8eb860dfedb0b4eda7dea9cfed73", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f61394674dcc4035dc9cf4dc4d80ae765eca039/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f61394674dcc4035dc9cf4dc4d80ae765eca039/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=4f61394674dcc4035dc9cf4dc4d80ae765eca039", "patch": "@@ -1560,7 +1560,7 @@ gfc_reference_st_label (gfc_st_label * lp, gfc_sl_type type)\n    symbols are kept in a singly linked list so that we can commit or\n    undo the changes at a later time.\n \n-   A symtree may point to a symbol node outside of it's namespace.  In\n+   A symtree may point to a symbol node outside of its namespace.  In\n    this case, that symbol has been used as a host associated variable\n    at some previous time.  */\n "}]}