{"sha": "07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdlYmM5MzA5ZGQyZGVhYmM1NjhjM2M4ZWE2ZmMwYWI3ZWRjN2ZlNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-09-05T21:57:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-09-05T21:57:56Z"}, "message": "rtl.h (enum reg_note): Add REG_FRAME_RELATED_EXPR.\n\n        * rtl.h (enum reg_note): Add REG_FRAME_RELATED_EXPR.\n        * rtl.c (reg_note_name): Likewise.\n        * rtl.texi (REG_NOTES): Likewise.\n        * dwarf2out.c (dwarf2out_frame_debug): Use it.  Recognize a store\n        without an offset.\n\nFrom-SVN: r22273", "tree": {"sha": "52930dedd01fd3b5a404a92454a487c37b16e941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52930dedd01fd3b5a404a92454a487c37b16e941"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7/comments", "author": null, "committer": null, "parents": [{"sha": "6c30752f0916390d06be4a7e46d8aea7407dd4c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c30752f0916390d06be4a7e46d8aea7407dd4c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c30752f0916390d06be4a7e46d8aea7407dd4c1"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "dd5d66499ddba44af7dbf418c1507c0138fcd997", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7", "patch": "@@ -1,3 +1,11 @@\n+Sat Sep  5 22:05:25 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* rtl.h (enum reg_note): Add REG_FRAME_RELATED_EXPR.\n+\t* rtl.c (reg_note_name): Likewise.\n+\t* rtl.texi (REG_NOTES): Likewise.\n+\t* dwarf2out.c (dwarf2out_frame_debug): Use it.  Recognize a store\n+\twithout an offset.\n+\n Sat Sep  5 14:47:17 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* i386.h (PREFERRED_RELOAD_CLASS): Standard fp constants load to TOS."}, {"sha": "e3acb98d530b5d7ea3eeb0c38f8d5d2e6893aacb", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7", "patch": "@@ -1223,7 +1223,12 @@ dwarf2out_frame_debug (insn)\n \n   label = dwarf2out_cfi_label ();\n     \n-  insn = PATTERN (insn);\n+  src = find_reg_note (insn, REG_FRAME_RELATED_EXPR, NULL_RTX);\n+  if (src)\n+    insn = XEXP (src, 0);\n+  else\n+    insn = PATTERN (insn);\n+\n   /* Assume that in a PARALLEL prologue insn, only the first elt is\n      significant.  Currently this is true.  */\n   if (GET_CODE (insn) == PARALLEL)\n@@ -1392,6 +1397,13 @@ dwarf2out_frame_debug (insn)\n \t  offset -= cfa_store_offset;\n \t  break;\n \n+\t  /* Without an offset.  */\n+\tcase REG:\n+\t  if (cfa_store_reg != REGNO (XEXP (dest, 0)))\n+\t    abort();\n+\t  offset = -cfa_store_offset;\n+\t  break;\n+\n \tdefault:\n \t  abort ();\n \t}"}, {"sha": "26ffc9a2a10da3cd05b23db18d1a3e7836d914a3", "filename": "gcc/rtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7", "patch": "@@ -181,7 +181,8 @@ char *reg_note_name[] = { \"\", \"REG_DEAD\", \"REG_INC\", \"REG_EQUIV\", \"REG_WAS_0\",\n \t\t\t  \"REG_CC_SETTER\", \"REG_CC_USER\", \"REG_LABEL\",\n \t\t\t  \"REG_DEP_ANTI\", \"REG_DEP_OUTPUT\", \"REG_BR_PROB\",\n \t\t\t  \"REG_EXEC_COUNT\", \"REG_NOALIAS\", \"REG_SAVE_AREA\",\n-\t\t\t  \"REG_BR_PRED\", \"REG_EH_CONTEXT\" };\n+\t\t\t  \"REG_BR_PRED\", \"REG_EH_CONTEXT\",\n+\t\t\t  \"REG_FRAME_RELATED_EXPR\" };\n \n static void dump_and_abort\tPROTO((int, int, FILE *));\n static void read_name\t\tPROTO((char *, FILE *));"}, {"sha": "6f4e73dcb38872e0895b168d51cb6d541440848b", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7", "patch": "@@ -338,8 +338,10 @@ typedef struct rtvec_def{\n      REG_SAVE_AREA is used to optimize rtl generated by dynamic stack\n    allocations for targets where SETJMP_VIA_SAVE_AREA is true.\n      REG_BR_PRED is attached to JUMP_INSNs only, it holds the branch prediction\n-   flags computed by get_jump_flags() after dbr scheduling is complete.  */\n-\n+   flags computed by get_jump_flags() after dbr scheduling is complete.\n+     REG_FRAME_RELATED_EXPR is attached to insns that are RTX_FRAME_RELATED_P,\n+   but are too complex for DWARF to interpret what they imply.  The attached\n+   rtx is used instead of intuition.  */\n \n #define REG_NOTES(INSN)\t((INSN)->fld[6].rtx)\n \n@@ -352,7 +354,8 @@ enum reg_note { REG_DEAD = 1, REG_INC = 2, REG_EQUIV = 3, REG_WAS_0 = 4,\n \t\tREG_CC_SETTER = 11, REG_CC_USER = 12, REG_LABEL = 13,\n \t\tREG_DEP_ANTI = 14, REG_DEP_OUTPUT = 15, REG_BR_PROB = 16,\n \t\tREG_EXEC_COUNT = 17, REG_NOALIAS = 18, REG_SAVE_AREA = 19,\n-\t\tREG_BR_PRED = 20, REG_EH_CONTEXT = 21 };\n+\t\tREG_BR_PRED = 20, REG_EH_CONTEXT = 21,\n+\t\tREG_FRAME_RELATED_EXPR = 22 };\n /* The base value for branch probability notes.  */\n #define REG_BR_PROB_BASE  10000\n \n@@ -969,6 +972,7 @@ extern int rtx_addr_varies_p\t\tPROTO((rtx));\n extern HOST_WIDE_INT get_integer_term\tPROTO((rtx));\n extern rtx get_related_value\t\tPROTO((rtx));\n extern int reg_mentioned_p\t\tPROTO((rtx, rtx));\n+extern int reg_mentioned_between_p\tPROTO((rtx, rtx, rtx));\n extern int reg_referenced_p\t\tPROTO((rtx, rtx));\n extern int reg_used_between_p\t\tPROTO((rtx, rtx, rtx));\n extern int reg_referenced_between_p\tPROTO((rtx, rtx, rtx));\n@@ -1065,7 +1069,7 @@ extern rtx struct_value_rtx;\n extern rtx struct_value_incoming_rtx;\n extern rtx static_chain_rtx;\n extern rtx static_chain_incoming_rtx;\n-\n+extern rtx return_address_pointer_rtx;\n \n /* Include the RTL generation functions.  */\n "}, {"sha": "9b69eaebabacc60e874819c8c08ef245f501d88d", "filename": "gcc/rtl.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7/gcc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7/gcc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.texi?ref=07ebc9309dd2deabc568c3c8ea6fc0ab7edc7fe7", "patch": "@@ -2691,6 +2691,12 @@ probability that the branch will be taken.\n These notes are found in JUMP insns after delayed branch scheduling\n has taken place.  They indicate both the direction and the likelyhood\n of the JUMP.  The format is a bitmask of ATTR_FLAG_* values.\n+\n+@findex REG_FRAME_RELATED_EXPR\n+@item REG_FRAME_RELATED_EXPR\n+This is used on an RTX_FRAME_RELATED_P insn wherein the attached expression\n+is used in place of the actual insn pattern.  This is done in cases where\n+the pattern is either complex or misleading.\n @end table\n \n For convenience, the machine mode in an @code{insn_list} or"}]}