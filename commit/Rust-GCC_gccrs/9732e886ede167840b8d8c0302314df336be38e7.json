{"sha": "9732e886ede167840b8d8c0302314df336be38e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczMmU4ODZlZGUxNjc4NDBiOGQ4YzAzMDIzMTRkZjMzNmJlMzhlNw==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2011-08-02T14:41:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T14:41:13Z"}, "message": "exp_disp.ads (Build_VM_TSDs): Build the runtime Type Specific Data record of all the tagged types declared...\n\n2011-08-02  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.ads (Build_VM_TSDs): Build the runtime Type Specific Data\n\trecord of all the tagged types declared inside library level package\n\tdeclarations, library level package bodies or library level subprograms.\n\t* exp_disp.adb (Make_VM_TSD): New subprogram that builds the TSD\n\tassociated with a given tagged type.\n\t(Build_VM_TSDs): New subprogram.\n\t* exp_ch6.adb (Expand_N_Subprogram_Body): Generate TSDs records of main\n\tcompilation units that are subprograms.\n\t* exp_ch7.adb (Expand_N_Package_Body): Generate TSDs of main\n\tcompilation units that are package bodies.\n\t(Expand_N_Package_Declaration): Generate TSDs of the main compilation\n\tunits that are a package declaration or a package instantiation.\n\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): Minor code\n\treorganization to improve the error generated by the frontend when the\n\tfunction Ada.Tags.Secondary_Tag is not available.\n\t* rtsfind.ads (RE_Register_TSD): New runtime entity.\n\t* exp_ch4.adb (Expand_N_Type_Conversion): Minor code cleanup.\n\nFrom-SVN: r177163", "tree": {"sha": "da702c5ed32a3bb7f2b98f32918a110fe1e52652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da702c5ed32a3bb7f2b98f32918a110fe1e52652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9732e886ede167840b8d8c0302314df336be38e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9732e886ede167840b8d8c0302314df336be38e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9732e886ede167840b8d8c0302314df336be38e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9732e886ede167840b8d8c0302314df336be38e7/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e526d0c765b77d4f41ce36ef42eda5a12c275e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e526d0c765b77d4f41ce36ef42eda5a12c275e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e526d0c765b77d4f41ce36ef42eda5a12c275e15"}], "stats": {"total": 532, "additions": 509, "deletions": 23}, "files": [{"sha": "e401f48668d4ea1b2c146a5d948e5a8e2eafd5d7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9732e886ede167840b8d8c0302314df336be38e7", "patch": "@@ -1,3 +1,23 @@\n+2011-08-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.ads (Build_VM_TSDs): Build the runtime Type Specific Data\n+\trecord of all the tagged types declared inside library level package\n+\tdeclarations, library level package bodies or library level subprograms.\n+\t* exp_disp.adb (Make_VM_TSD): New subprogram that builds the TSD\n+\tassociated with a given tagged type.\n+\t(Build_VM_TSDs): New subprogram.\n+\t* exp_ch6.adb (Expand_N_Subprogram_Body): Generate TSDs records of main\n+\tcompilation units that are subprograms.\n+\t* exp_ch7.adb (Expand_N_Package_Body): Generate TSDs of main\n+\tcompilation units that are package bodies.\n+\t(Expand_N_Package_Declaration): Generate TSDs of the main compilation\n+\tunits that are a package declaration or a package instantiation.\n+\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): Minor code\n+\treorganization to improve the error generated by the frontend when the\n+\tfunction Ada.Tags.Secondary_Tag is not available.\n+\t* rtsfind.ads (RE_Register_TSD): New runtime entity.\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Minor code cleanup.\n+\n 2011-08-02  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_disp.adb (Make_DT): Generate call to Check_TSD in Ada 2005 mode."}, {"sha": "ebf1a381aaaafa71f6c23e2e50c8ec9df5d63258", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=9732e886ede167840b8d8c0302314df336be38e7", "patch": "@@ -8606,16 +8606,19 @@ package body Exp_Ch4 is\n          --  Start of processing for Tagged_Conversion\n \n          begin\n-            if Is_Access_Type (Target_Type) then\n-\n-               --  Handle entities from the limited view\n+            --  Handle entities from the limited view\n \n+            if Is_Access_Type (Operand_Type) then\n                Actual_Op_Typ :=\n                  Available_View (Designated_Type (Operand_Type));\n+            else\n+               Actual_Op_Typ := Operand_Type;\n+            end if;\n+\n+            if Is_Access_Type (Target_Type) then\n                Actual_Targ_Typ :=\n                  Available_View (Designated_Type (Target_Type));\n             else\n-               Actual_Op_Typ   := Operand_Type;\n                Actual_Targ_Typ := Target_Type;\n             end if;\n "}, {"sha": "aa8775c3dbf2c04836222a667ba56e8b6bf8cfe1", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=9732e886ede167840b8d8c0302314df336be38e7", "patch": "@@ -5121,6 +5121,16 @@ package body Exp_Ch6 is\n    --  Start of processing for Expand_N_Subprogram_Body\n \n    begin\n+      --  If this is the main compilation unit and we are generating code for\n+      --  VM targets we generate now the Type Specific Data record of all the\n+      --  enclosing tagged type declarations\n+\n+      if not Tagged_Type_Expansion\n+        and then Unit (Cunit (Main_Unit)) = N\n+      then\n+         Build_VM_TSDs (N);\n+      end if;\n+\n       --  Set L to either the list of declarations if present, or to the list\n       --  of statements if no declarations are present. This is used to insert\n       --  new stuff at the start."}, {"sha": "d52740a659beb27e3891b8e86d8085f131e13a2c", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=9732e886ede167840b8d8c0302314df336be38e7", "patch": "@@ -1553,7 +1553,15 @@ package body Exp_Ch7 is\n          --  Build dispatch tables of library level tagged types\n \n          if Is_Library_Level_Entity (Ent) then\n-            Build_Static_Dispatch_Tables (N);\n+            if Tagged_Type_Expansion then\n+               Build_Static_Dispatch_Tables (N);\n+\n+            --  In VM targets there is no need to build dispatch tables but\n+            --  we must generate the corresponding Type Specific Data record\n+\n+            elsif Unit (Cunit (Main_Unit)) = N then\n+               Build_VM_TSDs (N);\n+            end if;\n          end if;\n \n          Build_Task_Activation_Call (N);\n@@ -1654,7 +1662,31 @@ package body Exp_Ch7 is\n         or else (Is_Generic_Instance (Id)\n                    and then Is_Library_Level_Entity (Id))\n       then\n-         Build_Static_Dispatch_Tables (N);\n+         if Tagged_Type_Expansion then\n+            Build_Static_Dispatch_Tables (N);\n+\n+         --  In VM targets there is no need to build dispatch tables but\n+         --  we must generate the corresponding Type Specific Data record\n+\n+         elsif Unit (Cunit (Main_Unit)) = N then\n+\n+            --  Enter the scope of the package because the new declarations\n+            --  are appended at the end of the package and must be analyzed\n+            --  in that context.\n+\n+            Push_Scope (Id);\n+\n+            if Is_Generic_Instance (Main_Unit_Entity) then\n+               if Package_Instantiation (Main_Unit_Entity) = N then\n+                  Build_VM_TSDs (N);\n+               end if;\n+\n+            else\n+               Build_VM_TSDs (N);\n+            end if;\n+\n+            Pop_Scope;\n+         end if;\n       end if;\n \n       --  Note: it is not necessary to worry about generating a subprogram"}, {"sha": "88f4b80b11d71b344534e7054b9649ac97a9f9c2", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 404, "deletions": 0, "changes": 404, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=9732e886ede167840b8d8c0302314df336be38e7", "patch": "@@ -83,6 +83,10 @@ package body Exp_Disp is\n    --  Returns true if Prim is not a predefined dispatching primitive but it is\n    --  an alias of a predefined dispatching primitive (i.e. through a renaming)\n \n+   function Make_VM_TSD (Typ : Entity_Id) return List_Id;\n+   --  Build the Type Specific Data record associated with tagged type Typ.\n+   --  Invoked only when generating code for VM targets.\n+\n    function New_Value (From : Node_Id) return Node_Id;\n    --  From is the original Expression. New_Value is equivalent to a call\n    --  to Duplicate_Subexpr with an explicit dereference when From is an\n@@ -465,6 +469,140 @@ package body Exp_Disp is\n       end if;\n    end Build_Static_Dispatch_Tables;\n \n+   -------------------\n+   -- Build_VM_TSDs --\n+   -------------------\n+\n+   procedure Build_VM_TSDs (N : Entity_Id) is\n+      Target_List : List_Id;\n+\n+      procedure Build_TSDs (List : List_Id);\n+      --  Build the static dispatch table of tagged types found in the list of\n+      --  declarations. The generated nodes are added at the end of Target_List\n+\n+      procedure Build_Package_TSDs (N : Node_Id);\n+      --  Build static dispatch tables associated with package declaration N\n+\n+      ---------------------------\n+      -- Build_Dispatch_Tables --\n+      ---------------------------\n+\n+      procedure Build_TSDs (List : List_Id) is\n+         D : Node_Id;\n+\n+      begin\n+         D := First (List);\n+         while Present (D) loop\n+\n+            --  Handle nested packages and package bodies recursively. The\n+            --  generated code is placed on the Target_List established for\n+            --  the enclosing compilation unit.\n+\n+            if Nkind (D) = N_Package_Declaration then\n+               Build_Package_TSDs (D);\n+\n+            elsif Nkind_In (D, N_Package_Body,\n+                               N_Subprogram_Body)\n+            then\n+               Build_TSDs (Declarations (D));\n+\n+            elsif Nkind (D) = N_Package_Body_Stub\n+              and then Present (Library_Unit (D))\n+            then\n+               Build_TSDs\n+                 (Declarations (Proper_Body (Unit (Library_Unit (D)))));\n+\n+            --  Handle full type declarations and derivations of library\n+            --  level tagged types\n+\n+            elsif Nkind_In (D, N_Full_Type_Declaration,\n+                               N_Derived_Type_Definition)\n+              and then Ekind (Defining_Entity (D)) /= E_Record_Subtype\n+              and then Is_Tagged_Type (Defining_Entity (D))\n+              and then not Is_Private_Type (Defining_Entity (D))\n+            then\n+               --  Do not generate TSDs for the internal types created for\n+               --  a type extension with unknown discriminants. The needed\n+               --  information is shared with the source type.\n+               --  See Expand_N_Record_Extension.\n+\n+               if Is_Underlying_Record_View (Defining_Entity (D))\n+                 or else\n+                  (not Comes_From_Source (Defining_Entity (D))\n+                     and then\n+                       Has_Unknown_Discriminants (Etype (Defining_Entity (D)))\n+                     and then\n+                       not Comes_From_Source\n+                             (First_Subtype (Defining_Entity (D))))\n+               then\n+                  null;\n+\n+               else\n+                  Append_List_To (Target_List,\n+                    Make_VM_TSD (Defining_Entity (D)));\n+               end if;\n+            end if;\n+\n+            Next (D);\n+         end loop;\n+      end Build_TSDs;\n+\n+      ------------------------\n+      -- Build_Package_TSDs --\n+      ------------------------\n+\n+      procedure Build_Package_TSDs (N : Node_Id) is\n+         Spec       : constant Node_Id   := Specification (N);\n+         Vis_Decls  : constant List_Id   := Visible_Declarations (Spec);\n+         Priv_Decls : constant List_Id   := Private_Declarations (Spec);\n+\n+      begin\n+         if Present (Priv_Decls) then\n+            Build_TSDs (Vis_Decls);\n+            Build_TSDs (Priv_Decls);\n+\n+         elsif Present (Vis_Decls) then\n+            Build_TSDs (Vis_Decls);\n+         end if;\n+      end Build_Package_TSDs;\n+\n+   --  Start of processing for Build_VM_TSDs\n+\n+   begin\n+      if not Expander_Active or else No_Run_Time_Mode then\n+         return;\n+      end if;\n+\n+      if Nkind (N) = N_Package_Declaration then\n+         declare\n+            Spec       : constant Node_Id := Specification (N);\n+            Vis_Decls  : constant List_Id := Visible_Declarations (Spec);\n+            Priv_Decls : constant List_Id := Private_Declarations (Spec);\n+\n+         begin\n+            Target_List := New_List;\n+            Build_Package_TSDs (N);\n+            Analyze_List (Target_List);\n+\n+            if Present (Priv_Decls)\n+              and then Is_Non_Empty_List (Priv_Decls)\n+            then\n+               Append_List (Target_List, Priv_Decls);\n+            else\n+               Append_List (Target_List, Vis_Decls);\n+            end if;\n+         end;\n+\n+      elsif Nkind_In (N, N_Package_Body, N_Subprogram_Body) then\n+         if Is_Non_Empty_List (Declarations (N)) then\n+            Target_List := New_List;\n+            Build_TSDs   (Declarations (N));\n+            Analyze_List (Target_List);\n+            Append_List  (Target_List, Declarations (N));\n+         end if;\n+      end if;\n+   end Build_VM_TSDs;\n+\n    ------------------------------\n    -- Convert_Tag_To_Interface --\n    ------------------------------\n@@ -6109,6 +6247,272 @@ package body Exp_Disp is\n       return Result;\n    end Make_DT;\n \n+   -----------------\n+   -- Make_VM_TSD --\n+   -----------------\n+\n+   function Make_VM_TSD (Typ : Entity_Id) return List_Id is\n+      Loc              : constant Source_Ptr := Sloc (Typ);\n+      Result           : constant List_Id := New_List;\n+      AI               : Elmt_Id;\n+      I_Depth          : Nat := 0;\n+      Iface_Table_Node : Node_Id;\n+      Num_Ifaces       : Nat := 0;\n+      TSD_Aggr_List    : List_Id;\n+      Typ_Ifaces       : Elist_Id;\n+      TSD_Tags_List    : List_Id;\n+\n+      Tname    : constant Name_Id := Chars (Typ);\n+      Name_TSD : constant Name_Id :=\n+                   New_External_Name (Tname, 'B', Suffix_Index => -1);\n+      TSD      : constant Entity_Id :=\n+                   Make_Defining_Identifier (Loc, Name_TSD);\n+   begin\n+      --  Generate code to create the storage for the type specific data object\n+      --  with enough space to store the tags of the ancestors plus the tags\n+      --  of all the implemented interfaces (as described in a-tags.ads).\n+\n+      --   TSD : Type_Specific_Data (I_Depth) :=\n+      --           (Idepth                => I_Depth,\n+      --            T                     => T'Tag,\n+      --            Access_Level          => Type_Access_Level (Typ),\n+      --            HT_Link               => null,\n+      --            Type_Is_Abstract      => <<boolean-value>>,\n+      --            Type_Is_Library_Level => <<boolean-value>>,\n+      --            Interfaces_Table      => <<access-value>>\n+      --            Tags_Table            => (0 => Typ'Tag,\n+      --                                      1 => Parent'Tag\n+      --                                      ...));\n+\n+      TSD_Aggr_List := New_List;\n+\n+      --  Idepth: Count ancestors to compute the inheritance depth. For private\n+      --  extensions, always go to the full view in order to compute the real\n+      --  inheritance depth.\n+\n+      declare\n+         Current_Typ : Entity_Id;\n+         Parent_Typ  : Entity_Id;\n+\n+      begin\n+         I_Depth     := 0;\n+         Current_Typ := Typ;\n+         loop\n+            Parent_Typ := Etype (Current_Typ);\n+\n+            if Is_Private_Type (Parent_Typ) then\n+               Parent_Typ := Full_View (Base_Type (Parent_Typ));\n+            end if;\n+\n+            exit when Parent_Typ = Current_Typ;\n+\n+            I_Depth := I_Depth + 1;\n+            Current_Typ := Parent_Typ;\n+         end loop;\n+      end;\n+\n+      Append_To (TSD_Aggr_List,\n+        Make_Integer_Literal (Loc, I_Depth));\n+\n+      --  Access_Level\n+\n+      Append_To (TSD_Aggr_List,\n+        Make_Integer_Literal (Loc, Type_Access_Level (Typ)));\n+\n+      --  HT_Link\n+\n+      Append_To (TSD_Aggr_List,\n+        Make_Null (Loc));\n+\n+      --  Type_Is_Abstract (Ada 2012: AI05-0173)\n+\n+      declare\n+         Type_Is_Abstract : Entity_Id;\n+\n+      begin\n+         Type_Is_Abstract :=\n+           Boolean_Literals (Is_Abstract_Type (Typ));\n+\n+         Append_To (TSD_Aggr_List,\n+            New_Occurrence_Of (Type_Is_Abstract, Loc));\n+      end;\n+\n+      --  Type_Is_Library_Level\n+\n+      declare\n+         Type_Is_Library_Level : Entity_Id;\n+\n+      begin\n+         Type_Is_Library_Level :=\n+           Boolean_Literals (Is_Library_Level_Entity (Typ));\n+\n+         Append_To (TSD_Aggr_List,\n+            New_Occurrence_Of (Type_Is_Library_Level, Loc));\n+      end;\n+\n+      --  Interfaces_Table (required for AI-405)\n+\n+      if RTE_Record_Component_Available (RE_Interfaces_Table) then\n+\n+         --  Count the number of interface types implemented by Typ\n+\n+         Collect_Interfaces (Typ, Typ_Ifaces);\n+\n+         AI := First_Elmt (Typ_Ifaces);\n+         while Present (AI) loop\n+            Num_Ifaces := Num_Ifaces + 1;\n+            Next_Elmt (AI);\n+         end loop;\n+\n+         if Num_Ifaces = 0 then\n+            Iface_Table_Node := Make_Null (Loc);\n+\n+         --  Generate the Interface_Table object\n+\n+         else\n+            declare\n+               TSD_Ifaces_List : constant List_Id := New_List;\n+               ITable          : Node_Id;\n+\n+            begin\n+               AI := First_Elmt (Typ_Ifaces);\n+               while Present (AI) loop\n+                  Append_To (TSD_Ifaces_List,\n+                     Make_Aggregate (Loc,\n+                       Expressions => New_List (\n+                         Make_Attribute_Reference (Loc,\n+                           Prefix => New_Reference_To (Node (AI), Loc),\n+                           Attribute_Name => Name_Tag)\n+                        )));\n+\n+                  Next_Elmt (AI);\n+               end loop;\n+\n+               ITable := Make_Temporary (Loc, 'I');\n+\n+               Append_To (Result,\n+                 Make_Object_Declaration (Loc,\n+                   Defining_Identifier => ITable,\n+                   Aliased_Present     => True,\n+                   Constant_Present    => True,\n+                   Object_Definition   =>\n+                     Make_Subtype_Indication (Loc,\n+                       Subtype_Mark =>\n+                         New_Reference_To (RTE (RE_Interface_Data), Loc),\n+                       Constraint => Make_Index_Or_Discriminant_Constraint\n+                         (Loc,\n+                          Constraints => New_List (\n+                            Make_Integer_Literal (Loc, Num_Ifaces)))),\n+\n+                   Expression => Make_Aggregate (Loc,\n+                     Expressions => New_List (\n+                       Make_Integer_Literal (Loc, Num_Ifaces),\n+                       Make_Aggregate (Loc,\n+                         Expressions => TSD_Ifaces_List)))));\n+\n+               Iface_Table_Node :=\n+                 Make_Attribute_Reference (Loc,\n+                   Prefix         => New_Reference_To (ITable, Loc),\n+                   Attribute_Name => Name_Unchecked_Access);\n+            end;\n+         end if;\n+\n+         Append_To (TSD_Aggr_List, Iface_Table_Node);\n+      end if;\n+\n+      --  Initialize the table of ancestor tags. In case of interface types\n+      --  this table is not needed.\n+\n+      TSD_Tags_List := New_List;\n+\n+      --  Fill position 0 with Typ'Tag\n+\n+      Append_To (TSD_Tags_List,\n+        Make_Attribute_Reference (Loc,\n+          Prefix => New_Reference_To (Typ, Loc),\n+          Attribute_Name => Name_Tag));\n+\n+      --  Fill the rest of the table with the tags of the ancestors\n+\n+      declare\n+         Current_Typ : Entity_Id;\n+         Parent_Typ  : Entity_Id;\n+         Pos         : Nat;\n+\n+      begin\n+         Pos := 1;\n+         Current_Typ := Typ;\n+\n+         loop\n+            Parent_Typ := Etype (Current_Typ);\n+\n+            if Is_Private_Type (Parent_Typ) then\n+               Parent_Typ := Full_View (Base_Type (Parent_Typ));\n+            end if;\n+\n+            exit when Parent_Typ = Current_Typ;\n+\n+            Append_To (TSD_Tags_List,\n+              Make_Attribute_Reference (Loc,\n+                Prefix => New_Reference_To (Parent_Typ, Loc),\n+                Attribute_Name => Name_Tag));\n+\n+            Pos := Pos + 1;\n+            Current_Typ := Parent_Typ;\n+         end loop;\n+\n+         pragma Assert (Pos = I_Depth + 1);\n+      end;\n+\n+      Append_To (TSD_Aggr_List,\n+        Make_Aggregate (Loc,\n+          Expressions => TSD_Tags_List));\n+\n+      --  Build the TSD object\n+\n+      Append_To (Result,\n+        Make_Object_Declaration (Loc,\n+          Defining_Identifier => TSD,\n+          Aliased_Present     => True,\n+          Constant_Present    => True,\n+          Object_Definition   =>\n+            Make_Subtype_Indication (Loc,\n+              Subtype_Mark => New_Reference_To (\n+                RTE (RE_Type_Specific_Data), Loc),\n+              Constraint =>\n+                Make_Index_Or_Discriminant_Constraint (Loc,\n+                  Constraints => New_List (\n+                    Make_Integer_Literal (Loc, I_Depth)))),\n+\n+          Expression => Make_Aggregate (Loc,\n+            Expressions => TSD_Aggr_List)));\n+\n+      --  Generate:\n+      --     Check_TSD\n+      --       (TSD => TSD'Unrestricted_Access);\n+\n+      Append_To (Result,\n+        Make_Procedure_Call_Statement (Loc,\n+          Name => New_Reference_To (RTE (RE_Check_TSD), Loc),\n+          Parameter_Associations => New_List (\n+            Make_Attribute_Reference (Loc,\n+              Prefix => New_Reference_To (TSD, Loc),\n+              Attribute_Name => Name_Unrestricted_Access))));\n+\n+      --  Generate:\n+      --     Register_TSD (TSD'Unrestricted_Access);\n+\n+      Append_To (Result,\n+        Make_Procedure_Call_Statement (Loc,\n+          Name => New_Reference_To (RTE (RE_Register_TSD), Loc),\n+          Parameter_Associations => New_List (\n+            Make_Attribute_Reference (Loc,\n+              Prefix => New_Reference_To (TSD, Loc),\n+              Attribute_Name => Name_Unrestricted_Access))));\n+\n+      return Result;\n+   end Make_VM_TSD;\n+\n    -------------------------------------\n    -- Make_Select_Specific_Data_Table --\n    -------------------------------------"}, {"sha": "82a9d9abc15df7a6277b6718b056ed4800fd2792", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=9732e886ede167840b8d8c0302314df336be38e7", "patch": "@@ -186,6 +186,11 @@ package Exp_Disp is\n    --  bodies they are added to the end of the list of declarations of the\n    --  package body.\n \n+   procedure Build_VM_TSDs (N : Entity_Id);\n+   --  N is a library level package declaration, a library level package body\n+   --  or a library level subprogram body. Build the runtime Type Specific\n+   --  Data record of all the tagged types declared inside N.\n+\n    function Convert_Tag_To_Interface\n      (Typ : Entity_Id; Expr : Node_Id) return Node_Id;\n    pragma Inline (Convert_Tag_To_Interface);"}, {"sha": "0dfbac1079c2884dbea56d7f34a9bfda17cff62f", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=9732e886ede167840b8d8c0302314df336be38e7", "patch": "@@ -234,23 +234,33 @@ package body Exp_Intr is\n          if not Is_Ancestor (Etype (Result_Typ), Etype (Tag_Arg),\n                              Use_Full_View => True)\n          then\n-            pragma Assert (not Is_Interface (Etype (Tag_Arg)));\n-\n-            Iface_Tag :=\n-              Make_Object_Declaration (Loc,\n-                Defining_Identifier => Make_Temporary (Loc, 'V'),\n-                Object_Definition   =>\n-                  New_Reference_To (RTE (RE_Tag), Loc),\n-                Expression          =>\n-                  Make_Function_Call (Loc,\n-                    Name => New_Reference_To (RTE (RE_Secondary_Tag), Loc),\n-                    Parameter_Associations => New_List (\n-                      Relocate_Node (Tag_Arg),\n-                      New_Reference_To\n-                        (Node (First_Elmt (Access_Disp_Table\n-                                            (Etype (Etype (Act_Constr))))),\n-                         Loc))));\n-            Insert_Action (N, Iface_Tag);\n+            --  Obtain the reference to the Ada.Tags service before generating\n+            --  the Object_Declaration node to ensure that if this service is\n+            --  not available in the runtime then we generate a clear error.\n+\n+            declare\n+               Fname : constant Node_Id :=\n+                         New_Reference_To (RTE (RE_Secondary_Tag), Loc);\n+\n+            begin\n+               pragma Assert (not Is_Interface (Etype (Tag_Arg)));\n+\n+               Iface_Tag :=\n+                 Make_Object_Declaration (Loc,\n+                   Defining_Identifier => Make_Temporary (Loc, 'V'),\n+                   Object_Definition   =>\n+                     New_Reference_To (RTE (RE_Tag), Loc),\n+                   Expression          =>\n+                     Make_Function_Call (Loc,\n+                       Name => Fname,\n+                       Parameter_Associations => New_List (\n+                         Relocate_Node (Tag_Arg),\n+                         New_Reference_To\n+                           (Node (First_Elmt (Access_Disp_Table\n+                                               (Etype (Etype (Act_Constr))))),\n+                            Loc))));\n+               Insert_Action (N, Iface_Tag);\n+            end;\n          end if;\n       end if;\n "}, {"sha": "e4fb3830ae75d63fa68c19aaedbc848415572a0b", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9732e886ede167840b8d8c0302314df336be38e7/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=9732e886ede167840b8d8c0302314df336be38e7", "patch": "@@ -607,6 +607,7 @@ package Rtsfind is\n      RE_Type_Specific_Data,              -- Ada.Tags\n      RE_Register_Interface_Offset,       -- Ada.Tags\n      RE_Register_Tag,                    -- Ada.Tags\n+     RE_Register_TSD,                    -- Ada.Tags\n      RE_Transportable,                   -- Ada.Tags\n      RE_Secondary_DT,                    -- Ada.Tags\n      RE_Secondary_Tag,                   -- Ada.Tags\n@@ -1786,6 +1787,7 @@ package Rtsfind is\n      RE_Type_Specific_Data               => Ada_Tags,\n      RE_Register_Interface_Offset        => Ada_Tags,\n      RE_Register_Tag                     => Ada_Tags,\n+     RE_Register_TSD                     => Ada_Tags,\n      RE_Transportable                    => Ada_Tags,\n      RE_Secondary_DT                     => Ada_Tags,\n      RE_Secondary_Tag                    => Ada_Tags,"}]}