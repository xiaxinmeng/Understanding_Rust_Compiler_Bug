{"sha": "cf8829194fb63dc0c25253934e1cff4bf4c7f6ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y4ODI5MTk0ZmI2M2RjMGMyNTI1MzkzNGUxY2ZmNGJmNGM3ZjZjYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-12-05T00:32:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-12-05T00:32:31Z"}, "message": "vstring.h (__versa_string<>::operator+, [...]): Move out of line...\n\n2005-12-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/vstring.h (__versa_string<>::operator+, all\n\tversions): Move out of line...\n\t* include/ext/vstring.tcc (__versa_string<>::operator+): ...\n\there; consistently use reserve for the benefit of sso_string_base;\n\tprefer push_back to single-char append when appropriate.\n\n\t* include/ext/vstring.h (__versa_string<>::push_back): Don't\n\tcall _M_reserve, _M_mutate instead.\n\t(reserve): Just forward to _M_reserve.\n\t* include/ext/vstring.tcc (__versa_string<>::_M_reserve): Remove.\n\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_reserve): Also\n\tdo the initial checks (first on length, in case __res == capacity).\n\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_reserve:\n\tLikewise; don't call _M_set_length unnecessarily.\n\n2005-12-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/vstring.h (__versa_string<>::_M_append): New.\n\t(append(const __versa_string&), append(const __versa_string&,\n\tsize_type, size_type), append(const _CharT*, size_type),\n\tappend(const _CharT*)): Use it.\n\t(append(size_type, _CharT)): Delegate to _M_replace_aux.\n\t(assign(const __versa_string&, size_type, size_type),\n\tassign(const _CharT*), replace(size_type, size_type,\n\tconst _CharT*, size_type)): Forward to _M_replace.\n\t* include/ext/vstring.tcc (__versa_string<>::_M_append):\n\tDefine, core append functionality.\n\t(_M_replace): Simplify, move __s == 0 case to _M_replace_aux.\n\t(_M_replace_aux): Reorganize, don't call _M_replace.\n\n2005-12-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/vstring.tcc (__versa_string<>::_M_replace):\n\tPerform _M_check_length at the beginning and remove it from ...\n\t(replace, _M_replace_dispatch, _M_replace_aux, assign): ... here.\n\t(assign): Now move inline.\n\t(resize): Don't call _M_check_length redundantly, append does.\n\n2005-12-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_get_allocator):\n\tAdd non const version.\n\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_get_allocator):\n\tLikewise.\n\t\n\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_erase): Add.\n\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_erase): Likewise.\n\t(_M_leak_hard): Use it.\n\t* include/ext/vstring.h (__versa_string<>::clear, erase, all\n\tversions): Use it.\n\t* include/ext/vstring.tcc (__versa_string<>::resize): Likewise.\n\n\t* include/ext/vstring.h (__versa_string<>::_M_replace_safe):\n\tRemove.\n\t* include/ext/vstring.h (__versa_string<>::_M_replace): New, does\n\tthe in-place work or delegates to _M_mutate in case of reallocation.\n\t* include/ext/vstring.tcc (__versa_string<>::_M_replace_safe):\n\tRemove.\n\t* include/ext/vstring.tcc (__versa_string<>::_M_replace): Define.\n\t(assign, replace, _M_replace_dispatch, _M_replace_aux): Use it.\n\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_mutate):\n\tChange to manage only reallocations.\n\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_mutate):\n\tLikewise.\n\n\t* include/ext/vstring.h (__versa_string<>::insert(size_type,\n\tconst __versa_string&), insert(size_type, const __versa_string&,\n\tsize_type, size_type), insert(size_type, const _CharT*, size_type),\n\tinsert(size_type, const _CharT*)): Delegate to replace.\n\n\t* include/ext/vstring.h (__versa_string<>::reserve): Move out of\n\tline.\n\t* include/ext/vstring.tcc (__versa_string<>::reserve): Do the\n\tchecks and call _M_reserve.\n\t* include/ext/vstring.h (__versa_string<>::append): Call _M_reserve\n\tinstead of reserve.\n\t* include/ext/vstring.tcc (__versa_string<>::append, all versions):\n\tLikewise.\n\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_reserve):\n\tAdjust.\n\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_reserve):\n\tLikewise.\n\nFrom-SVN: r108034", "tree": {"sha": "92c651354a9a4c8882011f990f958ea570368aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92c651354a9a4c8882011f990f958ea570368aaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca/comments", "author": null, "committer": null, "parents": [{"sha": "7343398692a7c9fbdeea485e51d34ef0a5be9c5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7343398692a7c9fbdeea485e51d34ef0a5be9c5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7343398692a7c9fbdeea485e51d34ef0a5be9c5b"}], "stats": {"total": 675, "additions": 374, "deletions": 301}, "files": [{"sha": "3dcd4d8544051686afd42707b13a430e8f57200d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cf8829194fb63dc0c25253934e1cff4bf4c7f6ca", "patch": "@@ -1,3 +1,88 @@\n+2005-12-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/vstring.h (__versa_string<>::operator+, all\n+\tversions): Move out of line...\n+\t* include/ext/vstring.tcc (__versa_string<>::operator+): ...\n+\there; consistently use reserve for the benefit of sso_string_base;\n+\tprefer push_back to single-char append when appropriate.\n+\n+\t* include/ext/vstring.h (__versa_string<>::push_back): Don't\n+\tcall _M_reserve, _M_mutate instead.\n+\t(reserve): Just forward to _M_reserve.\n+\t* include/ext/vstring.tcc (__versa_string<>::_M_reserve): Remove.\n+\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_reserve): Also\n+\tdo the initial checks (first on length, in case __res == capacity).\n+\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_reserve:\n+\tLikewise; don't call _M_set_length unnecessarily.\n+\n+2005-12-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/vstring.h (__versa_string<>::_M_append): New.\n+\t(append(const __versa_string&), append(const __versa_string&,\n+\tsize_type, size_type), append(const _CharT*, size_type),\n+\tappend(const _CharT*)): Use it.\n+\t(append(size_type, _CharT)): Delegate to _M_replace_aux.\n+\t(assign(const __versa_string&, size_type, size_type),\n+\tassign(const _CharT*), replace(size_type, size_type,\n+\tconst _CharT*, size_type)): Forward to _M_replace.\n+\t* include/ext/vstring.tcc (__versa_string<>::_M_append):\n+\tDefine, core append functionality.\n+\t(_M_replace): Simplify, move __s == 0 case to _M_replace_aux.\n+\t(_M_replace_aux): Reorganize, don't call _M_replace.\n+\n+2005-12-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/vstring.tcc (__versa_string<>::_M_replace):\n+\tPerform _M_check_length at the beginning and remove it from ...\n+\t(replace, _M_replace_dispatch, _M_replace_aux, assign): ... here.\n+\t(assign): Now move inline.\n+\t(resize): Don't call _M_check_length redundantly, append does.\n+\n+2005-12-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_get_allocator):\n+\tAdd non const version.\n+\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_get_allocator):\n+\tLikewise.\n+\t\n+\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_erase): Add.\n+\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_erase): Likewise.\n+\t(_M_leak_hard): Use it.\n+\t* include/ext/vstring.h (__versa_string<>::clear, erase, all\n+\tversions): Use it.\n+\t* include/ext/vstring.tcc (__versa_string<>::resize): Likewise.\n+\n+\t* include/ext/vstring.h (__versa_string<>::_M_replace_safe):\n+\tRemove.\n+\t* include/ext/vstring.h (__versa_string<>::_M_replace): New, does\n+\tthe in-place work or delegates to _M_mutate in case of reallocation.\n+\t* include/ext/vstring.tcc (__versa_string<>::_M_replace_safe):\n+\tRemove.\n+\t* include/ext/vstring.tcc (__versa_string<>::_M_replace): Define.\n+\t(assign, replace, _M_replace_dispatch, _M_replace_aux): Use it.\n+\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_mutate):\n+\tChange to manage only reallocations.\n+\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_mutate):\n+\tLikewise.\n+\n+\t* include/ext/vstring.h (__versa_string<>::insert(size_type,\n+\tconst __versa_string&), insert(size_type, const __versa_string&,\n+\tsize_type, size_type), insert(size_type, const _CharT*, size_type),\n+\tinsert(size_type, const _CharT*)): Delegate to replace.\n+\n+\t* include/ext/vstring.h (__versa_string<>::reserve): Move out of\n+\tline.\n+\t* include/ext/vstring.tcc (__versa_string<>::reserve): Do the\n+\tchecks and call _M_reserve.\n+\t* include/ext/vstring.h (__versa_string<>::append): Call _M_reserve\n+\tinstead of reserve.\n+\t* include/ext/vstring.tcc (__versa_string<>::append, all versions):\n+\tLikewise.\n+\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_reserve):\n+\tAdjust.\n+\t* include/ext/rc_string_base.h (__rc_string_base<>::_M_reserve):\n+\tLikewise.\n+\n 2005-12-02  David Billinghurst (David.Billinghurst@riotinto.com)\n \n \tPR testsuite/25193"}, {"sha": "9636a813a02fde8adc7a574dc58d9a0b3eceb156", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 51, "deletions": 20, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=cf8829194fb63dc0c25253934e1cff4bf4c7f6ca", "patch": "@@ -311,6 +311,10 @@ namespace __gnu_cxx\n       ~__rc_string_base()\n       { _M_dispose(); }      \n \n+      allocator_type&\n+      _M_get_allocator()\n+      { return _M_dataplus; }\n+\n       const allocator_type&\n       _M_get_allocator() const\n       { return _M_dataplus; }\n@@ -325,7 +329,11 @@ namespace __gnu_cxx\n       _M_reserve(size_type __res);\n \n       void\n-      _M_mutate(size_type __pos, size_type __len1, size_type __len2);\n+      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\n+\t\tsize_type __len2);\n+      \n+      void\n+      _M_erase(size_type __pos, size_type __n);\n     };\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -377,8 +385,8 @@ namespace __gnu_cxx\n \n       // NB: Need an array of char_type[__capacity], plus a terminating\n       // null char_type() element, plus enough for the _Rep data structure,\n-      // plus sizeof(size_type) - 1 to upper round to a size multiple\n-      // of sizeof(size_type).\n+      // plus sizeof(_Rep) - 1 to upper round to a size multiple of\n+      // sizeof(_Rep).\n       // Whew. Seemingly so needy, yet so elemental.\n       size_type __size = ((__capacity + 1) * sizeof(_CharT)\n \t\t\t  + 2 * sizeof(_Rep) - 1);\n@@ -458,7 +466,7 @@ namespace __gnu_cxx\n     _M_leak_hard()\n     {\n       if (_M_is_shared())\n-\t_M_mutate(0, 0, 0);\n+\t_M_erase(0, 0);\n       _M_set_leaked();\n     }\n \n@@ -490,7 +498,7 @@ namespace __gnu_cxx\n \t  {\n \t    while (__beg != __end)\n \t      {\n-\t\tif (__len == __r->_M_capacity)\n+\t\tif (__len == __r->_M_info._M_capacity)\n \t\t  {\n \t\t    // Allocate more space.\n \t\t    _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);\n@@ -594,12 +602,12 @@ namespace __gnu_cxx\n     __rc_string_base<_CharT, _Traits, _Alloc>::\n     _M_reserve(size_type __res)\n     {\n+      // Make sure we don't shrink below the current size.\n+      if (__res < _M_length())\n+\t__res = _M_length();\n+      \n       if (__res != _M_capacity() || _M_is_shared())\n \t{\n-\t  // Make sure we don't shrink below the current size.\n-\t  if (__res < _M_length())\n-\t    __res = _M_length();\n-\t  \n \t  _CharT* __tmp = _M_rep()->_M_clone(_M_get_allocator(),\n \t\t\t\t\t     __res - _M_length());\n \t  _M_dispose();\n@@ -610,13 +618,35 @@ namespace __gnu_cxx\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n     __rc_string_base<_CharT, _Traits, _Alloc>::\n-    _M_mutate(size_type __pos, size_type __len1, size_type __len2)\n+    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\n+\t      size_type __len2)\n     {\n-      const size_type __old_size = _M_length();\n-      const size_type __new_size = __old_size + __len2 - __len1;\n-      const size_type __how_much = __old_size - __pos - __len1;\n+      const size_type __how_much = _M_length() - __pos - __len1;\n+      \n+      _Rep* __r = _Rep::_S_create(_M_length() + __len2 - __len1,\n+\t\t\t\t  _M_capacity(), _M_get_allocator());\n       \n-      if (__new_size > _M_capacity() || _M_is_shared())\n+      if (__pos)\n+\t_S_copy(__r->_M_refdata(), _M_data(), __pos);\n+      if (__s && __len2)\n+\t_S_copy(__r->_M_refdata() + __pos, __s, __len2);\n+      if (__how_much)\n+\t_S_copy(__r->_M_refdata() + __pos + __len2,\n+\t\t_M_data() + __pos + __len1, __how_much);\n+      \n+      _M_dispose();\n+      _M_data(__r->_M_refdata());\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __rc_string_base<_CharT, _Traits, _Alloc>::\n+    _M_erase(size_type __pos, size_type __n)\n+    {\n+      const size_type __new_size = _M_length() - __n;\n+      const size_type __how_much = _M_length() - __pos - __n;\n+      \n+      if (_M_is_shared())\n \t{\n \t  // Must reallocate.\n \t  _Rep* __r = _Rep::_S_create(__new_size, _M_capacity(),\n@@ -625,19 +655,20 @@ namespace __gnu_cxx\n \t  if (__pos)\n \t    _S_copy(__r->_M_refdata(), _M_data(), __pos);\n \t  if (__how_much)\n-\t    _S_copy(__r->_M_refdata() + __pos + __len2,\n-\t\t    _M_data() + __pos + __len1, __how_much);\n+\t    _S_copy(__r->_M_refdata() + __pos,\n+\t\t    _M_data() + __pos + __n, __how_much);\n \n \t  _M_dispose();\n \t  _M_data(__r->_M_refdata());\n \t}\n-      else if (__how_much && __len1 != __len2)\n+      else if (__how_much && __n)\n \t{\n \t  // Work in-place.\n-\t  _S_move(_M_data() + __pos + __len2,\n-\t\t  _M_data() + __pos + __len1, __how_much);\n+\t  _S_move(_M_data() + __pos,\n+\t\t  _M_data() + __pos + __n, __how_much);\n \t}\n-      _M_rep()->_M_set_length(__new_size);\n+\n+      _M_rep()->_M_set_length(__new_size);      \n     }\n } // namespace __gnu_cxx\n "}, {"sha": "e552a57c5e3479a08653aa6d31462ecc9b0ab3bb", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 44, "deletions": 37, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=cf8829194fb63dc0c25253934e1cff4bf4c7f6ca", "patch": "@@ -202,6 +202,10 @@ namespace __gnu_cxx\n       ~__sso_string_base()\n       { _M_dispose(); }\n \n+      allocator_type&\n+      _M_get_allocator()\n+      { return _M_dataplus; }\n+\n       const allocator_type&\n       _M_get_allocator() const\n       { return _M_dataplus; }\n@@ -216,7 +220,11 @@ namespace __gnu_cxx\n       _M_reserve(size_type __res);\n \n       void\n-      _M_mutate(size_type __pos, size_type __len1, size_type __len2);\n+      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\n+\t\tsize_type __len2);\n+\n+      void\n+      _M_erase(size_type __pos, size_type __n);\n     };\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -471,69 +479,68 @@ namespace __gnu_cxx\n     __sso_string_base<_CharT, _Traits, _Alloc>::\n     _M_reserve(size_type __res)\n     {\n+      // Make sure we don't shrink below the current size.\n+      if (__res < _M_length())\n+\t__res = _M_length();\n+\n       const size_type __capacity = _M_capacity();\n       if (__res != __capacity)\n \t{\n-\t  // Make sure we don't shrink below the current size.\n-\t  if (__res < _M_length())\n-\t    __res = _M_length();\n-\n \t  if (__res > __capacity\n \t      || __res > size_type(_S_local_capacity))\n \t    {\n \t      _CharT* __tmp = _M_create(__res, __capacity);\n-\t      if (_M_length())\n-\t\t_S_copy(__tmp, _M_data(), _M_length());\n+\t      _S_copy(__tmp, _M_data(), _M_length() + 1);\n \t      _M_dispose();\n \t      _M_data(__tmp);\n \t      _M_capacity(__res);\n \t    }\n \t  else if (!_M_is_local())\n \t    {\n \t      const size_type __tmp_capacity = _M_allocated_capacity;\n-\t      if (_M_length())\n-\t\t_S_copy(_M_local_data, _M_data(), _M_length());\n+\t      _S_copy(_M_local_data, _M_data(), _M_length() + 1);\n \t      _M_destroy(__tmp_capacity + 1);\n \t      _M_data(_M_local_data);\n-\t    }\t  \n-\t  \n-\t  _M_set_length(_M_length());\n+\t    }\n \t}\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n     __sso_string_base<_CharT, _Traits, _Alloc>::\n-    _M_mutate(size_type __pos, size_type __len1, size_type __len2)\n+    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\n+\t      const size_type __len2)\n     {\n-      const size_type __old_size = _M_length();\n-      const size_type __new_size = __old_size + __len2 - __len1;\n-      const size_type __how_much = __old_size - __pos - __len1;\n+      const size_type __how_much = _M_length() - __pos - __len1;\n       \n-      if (__new_size > _M_capacity())\n-\t{\n-\t  // Must reallocate.\n-\t  size_type __new_capacity = __new_size;\n-\t  _CharT* __r = _M_create(__new_capacity, _M_capacity());\n+      size_type __new_capacity = _M_length() + __len2 - __len1;\n+      _CharT* __r = _M_create(__new_capacity, _M_capacity());\n+\n+      if (__pos)\n+\t_S_copy(__r, _M_data(), __pos);\n+      if (__s && __len2)\n+\t_S_copy(__r + __pos, __s, __len2);\n+      if (__how_much)\n+\t_S_copy(__r + __pos + __len2,\n+\t\t_M_data() + __pos + __len1, __how_much);\n+      \n+      _M_dispose();\n+      _M_data(__r);\n+      _M_capacity(__new_capacity);\n+    }\n \n-\t  if (__pos)\n-\t    _S_copy(__r, _M_data(), __pos);\n-\t  if (__how_much)\n-\t    _S_copy(__r + __pos + __len2,\n-\t\t    _M_data() + __pos + __len1, __how_much);\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    _M_erase(size_type __pos, size_type __n)\n+    {\n+      const size_type __how_much = _M_length() - __pos - __n;\n \n-\t  _M_dispose();\n-\t  _M_data(__r);\n-\t  _M_capacity(__new_capacity);\n-\t}\n-      else if (__how_much && __len1 != __len2)\n-\t{\n-\t  // Work in-place.\n-\t  _S_move(_M_data() + __pos + __len2,\n-\t\t  _M_data() + __pos + __len1, __how_much);\n-\t}\n+      if (__how_much && __n)\n+\t_S_move(_M_data() + __pos, _M_data() + __pos + __n,\n+\t\t__how_much);\n \n-      _M_set_length(__new_size);\n+      _M_set_length(_M_length() - __n);\n     }\n } // namespace __gnu_cxx\n "}, {"sha": "4a5228518d7e61769d86b0a61c3c90d771d9cb5f", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 66, "deletions": 56, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=cf8829194fb63dc0c25253934e1cff4bf4c7f6ca", "patch": "@@ -402,14 +402,14 @@ namespace __gnu_cxx\n        */\n       void\n       reserve(size_type __res_arg = 0)\n-      {\tthis->_M_reserve(__res_arg); }\n+      { this->_M_reserve(__res_arg); }\n \n       /**\n        *  Erases the string, making it empty.\n        */\n       void\n       clear()\n-      { this->_M_mutate(0, this->size(), 0); }\n+      { this->_M_erase(size_type(0), this->size()); }\n \n       /**\n        *  Returns true if the %string is empty.  Equivalent to *this == \"\".\n@@ -529,7 +529,8 @@ namespace __gnu_cxx\n        *  @return  Reference to this string.\n        */\n       __versa_string&\n-      append(const __versa_string& __str);\n+      append(const __versa_string& __str)\n+      { return _M_append(__str._M_data(), __str.size()); }\n \n       /**\n        *  @brief  Append a substring.\n@@ -544,7 +545,10 @@ namespace __gnu_cxx\n        *  characters in @a str, the remainder of @a str is appended.\n        */\n       __versa_string&\n-      append(const __versa_string& __str, size_type __pos, size_type __n);\n+      append(const __versa_string& __str, size_type __pos, size_type __n)\n+      { return _M_append(__str._M_data()\n+\t\t\t + __str._M_check(__pos, \"__versa_string::append\"),\n+\t\t\t __str._M_limit(__pos, __n)); }\n \n       /**\n        *  @brief  Append a C substring.\n@@ -553,7 +557,12 @@ namespace __gnu_cxx\n        *  @return  Reference to this string.\n        */\n       __versa_string&\n-      append(const _CharT* __s, size_type __n);\n+      append(const _CharT* __s, size_type __n)\n+      {\n+\t__glibcxx_requires_string_len(__s, __n);\n+\t_M_check_length(size_type(0), __n, \"__versa_string::append\");\n+\treturn _M_append(__s, __n);\n+      }\n \n       /**\n        *  @brief  Append a C string.\n@@ -564,7 +573,9 @@ namespace __gnu_cxx\n       append(const _CharT* __s)\n       {\n \t__glibcxx_requires_string(__s);\n-\treturn this->append(__s, traits_type::length(__s));\n+\tconst size_type __n = traits_type::length(__s);\n+\t_M_check_length(size_type(0), __n, \"__versa_string::append\");\n+\treturn _M_append(__s, __n);\n       }\n \n       /**\n@@ -576,7 +587,8 @@ namespace __gnu_cxx\n        *  Appends n copies of c to this string.\n        */\n       __versa_string&\n-      append(size_type __n, _CharT __c);\n+      append(size_type __n, _CharT __c)\n+      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }\n \n       /**\n        *  @brief  Append a range of characters.\n@@ -598,11 +610,11 @@ namespace __gnu_cxx\n       void\n       push_back(_CharT __c)\n       { \n-\tconst size_type __len = 1 + this->size();\n-\tif (__len > this->capacity() || this->_M_is_shared())\n-\t  this->reserve(__len);\n-\ttraits_type::assign(this->_M_data()[this->size()], __c);\n-\tthis->_M_set_length(__len);\n+\tconst size_type __size = this->size();\n+\tif (__size + 1 > this->capacity() || this->_M_is_shared())\n+\t  this->_M_mutate(__size, size_type(0), 0, size_type(1));\n+\ttraits_type::assign(this->_M_data()[__size], __c);\n+\tthis->_M_set_length(__size + 1);\n       }\n \n       /**\n@@ -631,9 +643,9 @@ namespace __gnu_cxx\n        */\n       __versa_string&\n       assign(const __versa_string& __str, size_type __pos, size_type __n)\n-      { return this->assign(__str._M_data()\n-\t\t\t    + __str._M_check(__pos, \"__versa_string::assign\"),\n-\t\t\t    __str._M_limit(__pos, __n)); }\n+      { return _M_replace(size_type(0), this->size(), __str._M_data()\n+\t\t\t  + __str._M_check(__pos, \"__versa_string::assign\"),\n+\t\t\t  __str._M_limit(__pos, __n)); }\n \n       /**\n        *  @brief  Set value to a C substring.\n@@ -646,7 +658,11 @@ namespace __gnu_cxx\n        *  available characters in @a s, the remainder of @a s is used.\n        */\n       __versa_string&\n-      assign(const _CharT* __s, size_type __n);\n+      assign(const _CharT* __s, size_type __n)\n+      {\n+\t__glibcxx_requires_string_len(__s, __n);\n+\treturn _M_replace(size_type(0), this->size(), __s, __n);\n+      }\n \n       /**\n        *  @brief  Set value to contents of a C string.\n@@ -661,7 +677,8 @@ namespace __gnu_cxx\n       assign(const _CharT* __s)\n       {\n \t__glibcxx_requires_string(__s);\n-\treturn this->assign(__s, traits_type::length(__s));\n+\treturn _M_replace(size_type(0), this->size(), __s,\n+\t\t\t  traits_type::length(__s));\n       }\n \n       /**\n@@ -735,7 +752,8 @@ namespace __gnu_cxx\n       */\n       __versa_string&\n       insert(size_type __pos1, const __versa_string& __str)\n-      { return this->insert(__pos1, __str, size_type(0), __str.size()); }\n+      { return this->replace(__pos1, size_type(0),\n+\t\t\t     __str._M_data(), __str.size()); }\n \n       /**\n        *  @brief  Insert a substring.\n@@ -758,9 +776,9 @@ namespace __gnu_cxx\n       __versa_string&\n       insert(size_type __pos1, const __versa_string& __str,\n \t     size_type __pos2, size_type __n)\n-      { return this->insert(__pos1, __str._M_data()\n-\t\t\t    + __str._M_check(__pos2, \"__versa_string::insert\"),\n-\t\t\t    __str._M_limit(__pos2, __n)); }\n+      { return this->replace(__pos1, size_type(0), __str._M_data()\n+\t\t\t     + __str._M_check(__pos2, \"__versa_string::insert\"),\n+\t\t\t     __str._M_limit(__pos2, __n)); }\n \n       /**\n        *  @brief  Insert a C substring.\n@@ -779,7 +797,8 @@ namespace __gnu_cxx\n        *  thrown.\n       */\n       __versa_string&\n-      insert(size_type __pos, const _CharT* __s, size_type __n);\n+      insert(size_type __pos, const _CharT* __s, size_type __n)\n+      { return this->replace(__pos, size_type(0), __s, __n); }\n \n       /**\n        *  @brief  Insert a C string.\n@@ -800,7 +819,8 @@ namespace __gnu_cxx\n       insert(size_type __pos, const _CharT* __s)\n       {\n \t__glibcxx_requires_string(__s);\n-\treturn this->insert(__pos, __s, traits_type::length(__s));\n+\treturn this->replace(__pos, size_type(0), __s,\n+\t\t\t     traits_type::length(__s));\n       }\n \n       /**\n@@ -843,7 +863,7 @@ namespace __gnu_cxx\n \tconst size_type __pos = __p - _M_ibegin();\n \t_M_replace_aux(__pos, size_type(0), size_type(1), __c);\n \tthis->_M_set_leaked();\n-\treturn _M_ibegin() + __pos;\n+\treturn iterator(this->_M_data() + __pos);\n       }\n \n       /**\n@@ -863,8 +883,8 @@ namespace __gnu_cxx\n       __versa_string&\n       erase(size_type __pos = 0, size_type __n = npos)\n       { \n-\tthis->_M_mutate(_M_check(__pos, \"__versa_string::erase\"),\n-\t\t\t_M_limit(__pos, __n), size_type(0));\n+\tthis->_M_erase(_M_check(__pos, \"__versa_string::erase\"),\n+\t\t       _M_limit(__pos, __n));\n \treturn *this;\n       }\n \n@@ -882,9 +902,9 @@ namespace __gnu_cxx\n \t_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()\n \t\t\t\t && __position < _M_iend());\n \tconst size_type __pos = __position - _M_ibegin();\n-\tthis->_M_mutate(__pos, size_type(1), size_type(0));\n+\tthis->_M_erase(__pos, size_type(1));\n \tthis->_M_set_leaked();\n-\treturn _M_ibegin() + __pos;\n+\treturn iterator(this->_M_data() + __pos);\n       }\n \n       /**\n@@ -902,9 +922,9 @@ namespace __gnu_cxx\n \t_GLIBCXX_DEBUG_PEDASSERT(__first >= _M_ibegin() && __first <= __last\n \t\t\t\t && __last <= _M_iend());\n         const size_type __pos = __first - _M_ibegin();\n-\tthis->_M_mutate(__pos, __last - __first, size_type(0));\n+\tthis->_M_erase(__pos, __last - __first);\n \tthis->_M_set_leaked();\n-\treturn _M_ibegin() + __pos;\n+\treturn iterator(this->_M_data() + __pos);\n       }\n \n       /**\n@@ -974,7 +994,12 @@ namespace __gnu_cxx\n       */\n       __versa_string&\n       replace(size_type __pos, size_type __n1, const _CharT* __s,\n-\t      size_type __n2);\n+\t      size_type __n2)\n+      {\n+\t__glibcxx_requires_string_len(__s, __n2);\n+\treturn _M_replace(_M_check(__pos, \"__versa_string::replace\"),\n+\t\t\t  _M_limit(__pos, __n1), __s, __n2);\n+      }\n \n       /**\n        *  @brief  Replace characters with value of a C string.\n@@ -1187,8 +1212,11 @@ namespace __gnu_cxx\n \t\t     _CharT __c);\n \n       __versa_string&\n-      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,\n-\t\t      size_type __n2);\n+      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,\n+\t\t const size_type __len2);\n+\n+      __versa_string&\n+      _M_append(const _CharT* __s, size_type __n);\n \n     public:\n \n@@ -1771,12 +1799,7 @@ namespace __gnu_cxx\n \t   template <typename, typename, typename> class _Base>\n     __versa_string<_CharT, _Traits, _Alloc, _Base>\n     operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n-\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n-    {\n-      __versa_string<_CharT, _Traits, _Alloc, _Base> __str(__lhs);\n-      __str.append(__rhs);\n-      return __str;\n-    }\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs);\n \n   /**\n    *  @brief  Concatenate C string and string.\n@@ -1810,14 +1833,9 @@ namespace __gnu_cxx\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n-    inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>\n     operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n-\t      const _CharT* __rhs)\n-    {\n-      __versa_string<_CharT, _Traits, _Alloc, _Base> __str(__lhs);\n-      __str.append(__rhs);\n-      return __str;\n-    }\n+\t      const _CharT* __rhs);\n \n   /**\n    *  @brief  Concatenate string and character.\n@@ -1827,17 +1845,9 @@ namespace __gnu_cxx\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n-    inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>\n     operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n-\t      _CharT __rhs)\n-    {\n-      typedef __versa_string<_CharT, _Traits, _Alloc, _Base>\n-\t                                                __string_type;\n-      typedef typename __string_type::size_type\t\t__size_type;\n-      __string_type __str(__lhs);\n-      __str.append(__size_type(1), __rhs);\n-      return __str;\n-    }\n+\t      _CharT __rhs);\n \n   // operator ==\n   /**"}, {"sha": "2fed7e2e14dc26fc2d588cc17348ff74b2629d42", "filename": "libstdc++-v3/include/ext/vstring.tcc", "status": "modified", "additions": 128, "deletions": 188, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8829194fb63dc0c25253934e1cff4bf4c7f6ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc?ref=cf8829194fb63dc0c25253934e1cff4bf4c7f6ca", "patch": "@@ -47,192 +47,37 @@ namespace __gnu_cxx\n \n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n-    __versa_string<_CharT, _Traits, _Alloc, _Base>&\n-    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-    assign(const _CharT* __s, size_type __n)\n-    {\n-      __glibcxx_requires_string_len(__s, __n);\n-      _M_check_length(this->size(), __n, \"__versa_string::assign\");\n-      if (_M_disjunct(__s) || this->_M_is_shared())\n-\treturn _M_replace_safe(size_type(0), this->size(), __s, __n);\n-      else\n-\t{\n-\t  // Work in-place.\n-\t  const size_type __pos = __s - this->_M_data();\n-\t  if (__pos >= __n)\n-\t    this->_S_copy(this->_M_data(), __s, __n);\n-\t  else if (__pos)\n-\t    this->_S_move(this->_M_data(), __s, __n);\n-\t  this->_M_set_length(__n);\n-\t  return *this;\n-\t}\n-     }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc,\n-\t   template <typename, typename, typename> class _Base>\n-    __versa_string<_CharT, _Traits, _Alloc, _Base>&\n+    void\n     __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-    append(size_type __n, _CharT __c)\n+    resize(size_type __n, _CharT __c)\n     {\n-      if (__n)\n-\t{\n-\t  _M_check_length(size_type(0), __n, \"__versa_string::append\");\t  \n-\t  const size_type __len = __n + this->size();\n-\t  if (__len > this->capacity() || this->_M_is_shared())\n-\t    this->reserve(__len);\n-\t  this->_S_assign(this->_M_data() + this->size(), __n, __c);\n-\t  this->_M_set_length(__len);\n-\t}\n-      return *this;\n+      const size_type __size = this->size();\n+      if (__size < __n)\n+\tthis->append(__n - __size, __c);\n+      else if (__n < __size)\n+\tthis->_M_erase(__n, __size - __n);\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n     __versa_string<_CharT, _Traits, _Alloc, _Base>&\n     __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-    append(const _CharT* __s, size_type __n)\n+    _M_append(const _CharT* __s, size_type __n)\n     {\n-      __glibcxx_requires_string_len(__s, __n);\n-      if (__n)\n-\t{\n-\t  _M_check_length(size_type(0), __n, \"__versa_string::append\");\n-\t  const size_type __len = __n + this->size();\n-\t  if (__len > this->capacity() || this->_M_is_shared())\n-\t    {\n-\t      if (_M_disjunct(__s))\n-\t\tthis->reserve(__len);\n-\t      else\n-\t\t{\n-\t\t  const size_type __off = __s - this->_M_data();\n-\t\t  this->reserve(__len);\n-\t\t  __s = this->_M_data() + __off;\n-\t\t}\n-\t    }\n-\t  this->_S_copy(this->_M_data() + this->size(), __s, __n);\n-\t  this->_M_set_length(__len);\n-\t}\n-      return *this;\n-    }\n+      const size_type __len = __n + this->size();\n \n-  template<typename _CharT, typename _Traits, typename _Alloc,\n-\t   template <typename, typename, typename> class _Base>\n-    __versa_string<_CharT, _Traits, _Alloc, _Base>&\n-    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-    append(const __versa_string& __str)\n-    {\n-      const size_type __size = __str.size();\n-      if (__size)\n+      if (__len <= this->capacity() && !this->_M_is_shared())\n \t{\n-\t  const size_type __len = __size + this->size();\n-\t  if (__len > this->capacity() || this->_M_is_shared())\n-\t    this->reserve(__len);\n-\t  this->_S_copy(this->_M_data() + this->size(), __str._M_data(),\n-\t\t\t__size);\n-\t  this->_M_set_length(__len);\n+\t  if (__n)\n+\t    this->_S_copy(this->_M_data() + this->size(), __s, __n);\n \t}\n-      return *this;\n-    }    \n+      else\n+\tthis->_M_mutate(this->size(), size_type(0), __s, __n);\n \n-  template<typename _CharT, typename _Traits, typename _Alloc,\n-\t   template <typename, typename, typename> class _Base>\n-    __versa_string<_CharT, _Traits, _Alloc, _Base>&\n-    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-    append(const __versa_string& __str, size_type __pos, size_type __n)\n-    {\n-      __str._M_check(__pos, \"__versa_string::append\");\n-      __n = __str._M_limit(__pos, __n);\n-      if (__n)\n-\t{\n-\t  const size_type __len = __n + this->size();\n-\t  if (__len > this->capacity() || this->_M_is_shared())\n-\t    this->reserve(__len);\n-\t  this->_S_copy(this->_M_data() + this->size(),\n-\t\t\t__str._M_data() + __pos, __n);\n-\t  this->_M_set_length(__len);\t  \n-\t}\n+      this->_M_set_length(__len);\n       return *this;\n     }\n \n-   template<typename _CharT, typename _Traits, typename _Alloc,\n-\t    template <typename, typename, typename> class _Base>\n-     __versa_string<_CharT, _Traits, _Alloc, _Base>&\n-     __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-     insert(size_type __pos, const _CharT* __s, size_type __n)\n-     {\n-       __glibcxx_requires_string_len(__s, __n);\n-       _M_check(__pos, \"__versa_string::insert\");\n-       _M_check_length(size_type(0), __n, \"__versa_string::insert\");\n-       if (_M_disjunct(__s) || this->_M_is_shared())\n-         return _M_replace_safe(__pos, size_type(0), __s, __n);\n-       else\n-         {\n-           // Work in-place.\n-           const size_type __off = __s - this->_M_data();\n-           this->_M_mutate(__pos, 0, __n);\n-           __s = this->_M_data() + __off;\n-           _CharT* __p = this->_M_data() + __pos;\n-           if (__s  + __n <= __p)\n-             this->_S_copy(__p, __s, __n);\n-           else if (__s >= __p)\n-             this->_S_copy(__p, __s + __n, __n);\n-           else\n-             {\n-\t       const size_type __nleft = __p - __s;\n-               this->_S_copy(__p, __s, __nleft);\n-               this->_S_copy(__p + __nleft, __p + __n, __n - __nleft);\n-             }\n-           return *this;\n-         }\n-     }\n-\n-   template<typename _CharT, typename _Traits, typename _Alloc,\n-\t    template <typename, typename, typename> class _Base>\n-     __versa_string<_CharT, _Traits, _Alloc, _Base>&\n-     __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-     replace(size_type __pos, size_type __n1, const _CharT* __s,\n-\t     size_type __n2)\n-     {\n-       __glibcxx_requires_string_len(__s, __n2);\n-       _M_check(__pos, \"__versa_string::replace\");\n-       __n1 = _M_limit(__pos, __n1);\n-       _M_check_length(__n1, __n2, \"__versa_string::replace\");\n-       bool __left;\n-       if (_M_disjunct(__s) || this->_M_is_shared())\n-         return _M_replace_safe(__pos, __n1, __s, __n2);\n-       else if ((__left = __s + __n2 <= this->_M_data() + __pos)\n-\t\t|| this->_M_data() + __pos + __n1 <= __s)\n-\t {\n-\t   // Work in-place: non-overlapping case.\n-\t   size_type __off = __s - this->_M_data();\n-\t   __left ? __off : (__off += __n2 - __n1);\n-\t   this->_M_mutate(__pos, __n1, __n2);\n-\t   this->_S_copy(this->_M_data() + __pos,\n-\t\t\t this->_M_data() + __off, __n2);\n-\t   return *this;\n-\t }\n-       else\n-\t {\n-\t   // Todo: overlapping case.\n-\t   const __versa_string __tmp(__s, __n2);\n-\t   return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);\n-\t }\n-     }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc,\n-\t   template <typename, typename, typename> class _Base>\n-    void\n-    __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-    resize(size_type __n, _CharT __c)\n-    {\n-      const size_type __size = this->size();\n-      _M_check_length(__size, __n, \"__versa_string::resize\");\n-      if (__size < __n)\n-\tthis->append(__n - __size, __c);\n-      else if (__n < __size)\n-\tthis->erase(__n);\n-      // else nothing (in particular, avoid calling _M_mutate() unnecessarily.)\n-    }\n-\n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n     template<typename _InputIterator>\n@@ -243,10 +88,8 @@ namespace __gnu_cxx\n       {\n \tconst __versa_string __s(__k1, __k2);\n \tconst size_type __n1 = __i2 - __i1;\n-\t_M_check_length(__n1, __s.size(),\n-\t\t\t\"__versa_string::_M_replace_dispatch\");\n-\treturn _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),\n-\t\t\t       __s.size());\n+\treturn _M_replace(__i1 - _M_ibegin(), __n1, __s._M_data(),\n+\t\t\t  __s.size());\n       }\n \n   template<typename _CharT, typename _Traits, typename _Alloc,\n@@ -257,33 +100,103 @@ namespace __gnu_cxx\n \t\t   _CharT __c)\n     {\n       _M_check_length(__n1, __n2, \"__versa_string::_M_replace_aux\");\n-      this->_M_mutate(__pos1, __n1, __n2);\n+\n+      const size_type __old_size = this->size();\n+      const size_type __new_size = __old_size + __n2 - __n1;\n+\n+      if (__new_size <= this->capacity() && !this->_M_is_shared())\n+\t{\n+\t  _CharT* __p = this->_M_data() + __pos1;\n+\n+\t  const size_type __how_much = __old_size - __pos1 - __n1;\n+\t  if (__how_much && __n1 != __n2)\n+\t    this->_S_move(__p + __n2, __p + __n1, __how_much);\n+\t}\n+      else\n+\tthis->_M_mutate(__pos1, __n1, 0, __n2);\n+\n       if (__n2)\n \tthis->_S_assign(this->_M_data() + __pos1, __n2, __c);\n+\n+      this->_M_set_length(__new_size);\n       return *this;\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n     __versa_string<_CharT, _Traits, _Alloc, _Base>&\n     __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,\n-\t\t    size_type __n2)\n+    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,\n+\t       const size_type __len2)\n     {\n-      this->_M_mutate(__pos1, __n1, __n2);\n-      if (__n2)\n-\tthis->_S_copy(this->_M_data() + __pos1, __s, __n2);\n+      _M_check_length(__len1, __len2, \"__versa_string::_M_replace\");\n+\n+      const size_type __old_size = this->size();\n+      const size_type __new_size = __old_size + __len2 - __len1;\n+      \n+      if (__new_size <= this->capacity() && !this->_M_is_shared())\n+\t{\n+\t  _CharT* __p = this->_M_data() + __pos;\n+\n+\t  const size_type __how_much = __old_size - __pos - __len1;\n+\t  if (_M_disjunct(__s))\n+\t    {\n+\t      if (__how_much && __len1 != __len2)\n+\t\tthis->_S_move(__p + __len2, __p + __len1, __how_much);\n+\t      if (__len2)\n+\t\tthis->_S_copy(__p, __s, __len2);\n+\t    }\n+\t  else\n+\t    {\n+\t      // Work in-place.\n+\t      if (__len2 && __len2 <= __len1)\n+\t\tthis->_S_move(__p, __s, __len2);\n+\t      if (__how_much && __len1 != __len2)\n+\t\tthis->_S_move(__p + __len2, __p + __len1, __how_much);\n+\t      if (__len2 > __len1)\n+\t\t{\n+\t\t  if (__s + __len2 <= __p + __len1)\n+\t\t    this->_S_move(__p, __s, __len2);\n+\t\t  else if (__s >= __p + __len1)\n+\t\t    this->_S_copy(__p, __s + __len2 - __len1, __len2);\n+\t\t  else\n+\t\t    {\n+\t\t      const size_type __nleft = (__p + __len1) - __s;\n+\t\t      this->_S_move(__p, __s, __nleft);\n+\t\t      this->_S_copy(__p + __nleft, __p + __len2,\n+\t\t\t\t    __len2 - __nleft);\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+      else\n+\tthis->_M_mutate(__pos, __len1, __s, __len2);\n+\n+      this->_M_set_length(__new_size);\n       return *this;\n     }\n-   \n+  \n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    {\n+      __versa_string<_CharT, _Traits, _Alloc, _Base> __str;\n+      __str.reserve(__lhs.size() + __rhs.size());\n+      __str.append(__lhs);\n+      __str.append(__rhs);\n+      return __str;\n+    }\n+\n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n     __versa_string<_CharT, _Traits, _Alloc, _Base>\n     operator+(const _CharT* __lhs,\n-\t      const __versa_string<_CharT, _Traits, _Alloc>& __rhs)\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n     {\n       __glibcxx_requires_string(__lhs);\n-      typedef __versa_string<_CharT, _Traits, _Alloc> __string_type;\n+      typedef __versa_string<_CharT, _Traits, _Alloc, _Base> __string_type;\n       typedef typename __string_type::size_type\t  __size_type;\n       const __size_type __len = _Traits::length(__lhs);\n       __string_type __str;\n@@ -299,13 +212,40 @@ namespace __gnu_cxx\n     operator+(_CharT __lhs,\n \t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n     {\n-      typedef __versa_string<_CharT, _Traits, _Alloc> __string_type;\n+      __versa_string<_CharT, _Traits, _Alloc, _Base> __str;\n+      __str.reserve(__rhs.size() + 1);\n+      __str.push_back(__lhs);\n+      __str.append(__rhs);\n+      return __str;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t      const _CharT* __rhs)\n+    {\n+      __glibcxx_requires_string(__rhs);\n+      typedef __versa_string<_CharT, _Traits, _Alloc, _Base> __string_type;\n       typedef typename __string_type::size_type\t  __size_type;\n+      const __size_type __len = _Traits::length(__rhs);\n       __string_type __str;\n-      const __size_type __len = __rhs.size();\n-      __str.reserve(__len + 1);\n-      __str.append(__size_type(1), __lhs);\n-      __str.append(__rhs);\n+      __str.reserve(__lhs.size() + __len);\n+      __str.append(__lhs);\n+      __str.append(__rhs, __len);\n+      return __str;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t      _CharT __rhs)\n+    {\n+      __versa_string<_CharT, _Traits, _Alloc, _Base> __str;\n+      __str.reserve(__lhs.size() + 1);\n+      __str.append(__lhs);\n+      __str.push_back(__rhs);\n       return __str;\n     }\n "}]}