{"sha": "023cee968b768ec0dfcbd35373d6195332d5dd76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIzY2VlOTY4Yjc2OGVjMGRmY2JkMzUzNzNkNjE5NTMzMmQ1ZGQ3Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-01-29T22:46:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-29T22:46:31Z"}, "message": "condition_variable (condition_variable_any:: __wait_until_impl): Add.\n\n2010-01-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/condition_variable (condition_variable_any::\n\t__wait_until_impl): Add.\n\t(condition_variable_any::wait_until): Provide definitions.\n\t* testsuite/30_threads/condition_variable_any/members/2.cc: New.\n\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc:\n\tLikewise.\n\n\t* testsuite/30_threads/condition_variable/members/1.cc: Minor\n\tstylistic changes.\n\t* testsuite/30_threads/condition_variable/members/1.cc: Likewise.\n\nFrom-SVN: r156367", "tree": {"sha": "25adc7b9103aa9b46f13d1c6466e073100f0fe0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25adc7b9103aa9b46f13d1c6466e073100f0fe0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/023cee968b768ec0dfcbd35373d6195332d5dd76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/023cee968b768ec0dfcbd35373d6195332d5dd76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/023cee968b768ec0dfcbd35373d6195332d5dd76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/023cee968b768ec0dfcbd35373d6195332d5dd76/comments", "author": null, "committer": null, "parents": [{"sha": "55eb4dab2793417e583d02c2ceaa20955442818b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55eb4dab2793417e583d02c2ceaa20955442818b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55eb4dab2793417e583d02c2ceaa20955442818b"}], "stats": {"total": 149, "additions": 136, "deletions": 13}, "files": [{"sha": "5dddc099294413eb4dece6e40d908bbef04a66a5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=023cee968b768ec0dfcbd35373d6195332d5dd76", "patch": "@@ -1,3 +1,18 @@\n+2010-01-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/condition_variable (condition_variable_any::\n+\t__wait_until_impl): Add.\n+\t(condition_variable_any::wait_until): Provide definitions.\n+\t* testsuite/30_threads/condition_variable_any/members/2.cc: New.\n+\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc:\n+\tLikewise.\n+\n+\t* testsuite/30_threads/condition_variable/members/1.cc: Minor\n+\tstylistic changes.\n+\t* testsuite/30_threads/condition_variable/members/1.cc: Likewise.\n+\n 2010-01-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/condition_variable (enum class cv_status): Add and"}, {"sha": "329b9722d04800738d330523ec98bc107679faa6", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=023cee968b768ec0dfcbd35373d6195332d5dd76", "patch": "@@ -98,10 +98,10 @@ namespace std\n \t\t const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n \t// DR 887 - Sync unknown clock to known clock.\n-\ttypename _Clock::time_point __c_entry = _Clock::now();\n-\t__clock_t::time_point __s_entry = __clock_t::now();\n-\tchrono::nanoseconds __delta = __atime - __c_entry;\n-\t__clock_t::time_point __s_atime = __s_entry + __delta;\n+\tconst typename _Clock::time_point __c_entry = _Clock::now();\n+\tconst __clock_t::time_point __s_entry = __clock_t::now();\n+\tconst chrono::nanoseconds __delta = __atime - __c_entry;\n+\tconst __clock_t::time_point __s_atime = __s_entry + __delta;\n \n \treturn __wait_until_impl(__lock, __s_atime);\n       }\n@@ -165,6 +165,7 @@ namespace std\n   // Like above, only mutex may not have try_lock.\n   class condition_variable_any\n   {\n+    typedef chrono::system_clock\t__clock_t;\n     typedef __gthread_cond_t\t\t__native_type;\n     __native_type\t\t\t_M_cond;\n \n@@ -201,10 +202,25 @@ namespace std\n \t  wait(__lock);\n       }\n \n+    template<typename _Lock, typename _Duration>\n+      cv_status\n+      wait_until(_Lock& __lock,\n+\t\t const chrono::time_point<__clock_t, _Duration>& __atime)\n+      { return __wait_until_impl(__lock, __atime); }\n+\n     template<typename _Lock, typename _Clock, typename _Duration>\n       cv_status\n       wait_until(_Lock& __lock,\n-\t\t const chrono::time_point<_Clock, _Duration>& __atime);\n+\t\t const chrono::time_point<_Clock, _Duration>& __atime)\n+      {\n+\t// DR 887 - Sync unknown clock to known clock.\n+\tconst typename _Clock::time_point __c_entry = _Clock::now();\n+\tconst __clock_t::time_point __s_entry = __clock_t::now();\n+\tconst chrono::nanoseconds __delta = __atime - __c_entry;\n+\tconst __clock_t::time_point __s_atime = __s_entry + __delta;\n+\n+\treturn __wait_until_impl(__lock, __s_atime);\n+      }\n \n     template<typename _Lock, typename _Clock,\n \t     typename _Duration, typename _Predicate>\n@@ -232,6 +248,31 @@ namespace std\n     native_handle_type\n     native_handle()\n     { return &_M_cond; }\n+\n+  private:\n+    template<typename _Lock, typename _Clock, typename _Duration>\n+      cv_status\n+      __wait_until_impl(_Lock& __lock,\n+\t\t\tconst chrono::time_point<_Clock, _Duration>& __atime)\n+      {\n+\tchrono::time_point<__clock_t, chrono::seconds> __s =\n+\t  chrono::time_point_cast<chrono::seconds>(__atime);\n+\n+\tchrono::nanoseconds __ns =\n+\t  chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n+\n+\t__gthread_time_t __ts =\n+\t  {\n+\t    static_cast<std::time_t>(__s.time_since_epoch().count()),\n+\t    static_cast<long>(__ns.count())\n+\t  };\n+\n+\t__gthread_cond_timedwait(&_M_cond, __lock.mutex()->native_handle(),\n+\t\t\t\t &__ts);\n+\n+\treturn (_Clock::now() < __atime\n+\t\t? cv_status::no_timeout : cv_status::timeout);\n+      }\n   };\n \n   // @} group condition_variables"}, {"sha": "3b94c236f5135a83d21516ade4b74ebac01ddf4b", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/1.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc?ref=023cee968b768ec0dfcbd35373d6195332d5dd76", "patch": "@@ -5,7 +5,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,13 +22,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <chrono>\n #include <condition_variable>\n #include <system_error>\n #include <testsuite_hooks.h>\n \n-int main()\n+void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n@@ -53,6 +52,10 @@ int main()\n     {\n       VERIFY( false );\n     }\n+}\n \n+int main()\n+{\n+  test01();\n   return 0;\n }"}, {"sha": "f4904ada547606d122b04dd28c6116c79afa0b9c", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/2.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc?ref=023cee968b768ec0dfcbd35373d6195332d5dd76", "patch": "@@ -5,7 +5,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,13 +22,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <chrono>\n #include <condition_variable>\n #include <system_error>\n #include <testsuite_hooks.h>\n \n-int main()\n+void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n@@ -53,6 +52,10 @@ int main()\n     {\n       VERIFY( false );\n     }\n+}\n \n+int main()\n+{\n+  test01();\n   return 0;\n }"}, {"sha": "8fa79a2cf1a65b4e5b9ca4500bfef9e7adaaa812", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc?ref=023cee968b768ec0dfcbd35373d6195332d5dd76", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 178 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 179 }"}, {"sha": "344f90c961ceddf915060547275d95ac9c69d4b9", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc?ref=023cee968b768ec0dfcbd35373d6195332d5dd76", "patch": "@@ -31,4 +31,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 30 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 177 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 178 }"}, {"sha": "2cb21ed49c753fa7bdf5d66424fdac94661d2ba4", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/members/2.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023cee968b768ec0dfcbd35373d6195332d5dd76/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc?ref=023cee968b768ec0dfcbd35373d6195332d5dd76", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <chrono>\n+#include <condition_variable>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::chrono::microseconds ms(500);\n+      std::condition_variable_any c1;\n+      std::mutex m;\n+      std::unique_lock<std::mutex> l(m);\n+\n+      auto then = std::chrono::monotonic_clock::now();\n+      std::cv_status result = c1.wait_until(l, then + ms);\n+      VERIFY( result == std::cv_status::timeout );\n+      VERIFY( (std::chrono::monotonic_clock::now() - then) >= ms );\n+      VERIFY( l.owns_lock() );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}