{"sha": "0e6057c691f5629eadcceee9fb8f373ac5167dc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU2MDU3YzY5MWY1NjI5ZWFkY2NlZWU5ZmI4ZjM3M2FjNTE2N2RjNw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-01-26T15:48:57Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-01-26T15:48:57Z"}, "message": "[ARM/AArch64][testsuite] Add vmovl tests.\n\n2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t    * gcc.target/aarch64/advsimd-intrinsics/vmovl.c: New file.\n\nFrom-SVN: r220121", "tree": {"sha": "bb266cd4afe5cb25b1e3f9984c843a54292674f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb266cd4afe5cb25b1e3f9984c843a54292674f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e6057c691f5629eadcceee9fb8f373ac5167dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6057c691f5629eadcceee9fb8f373ac5167dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e6057c691f5629eadcceee9fb8f373ac5167dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6057c691f5629eadcceee9fb8f373ac5167dc7/comments", "author": null, "committer": null, "parents": [{"sha": "cbe6988630c3f8d45eafe5d185617d7f88c4a581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbe6988630c3f8d45eafe5d185617d7f88c4a581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbe6988630c3f8d45eafe5d185617d7f88c4a581"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "aa4b0c97318b856e95b6a280871959cd8264bd32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6057c691f5629eadcceee9fb8f373ac5167dc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6057c691f5629eadcceee9fb8f373ac5167dc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e6057c691f5629eadcceee9fb8f373ac5167dc7", "patch": "@@ -1,3 +1,7 @@\n+2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t    * gcc.target/aarch64/advsimd-intrinsics/vmovl.c: New file.\n+\n 2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vpXXX.inc: New file."}, {"sha": "fd94d72ebd75ef56a6a9df29036b6a533f0e6562", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmovl.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6057c691f5629eadcceee9fb8f373ac5167dc7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmovl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6057c691f5629eadcceee9fb8f373ac5167dc7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmovl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmovl.c?ref=0e6057c691f5629eadcceee9fb8f373ac5167dc7", "patch": "@@ -0,0 +1,52 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffff0, 0xfffffff1 };\n+\n+#define TEST_MSG \"VMOVL\"\n+void exec_vmovl (void)\n+{\n+  /* Basic test: vec128=vmovl(vec64), then store the result.  */\n+#define TEST_VMOVL(T1, T2, W, W2, N)\t\t\t\t\t\\\n+  VECT_VAR(vector128, T1, W2, N) =\t\t\t\t\t\\\n+    vmovl_##T2##W(VECT_VAR(vector64, T1, W, N));\t\t\t\\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N), VECT_VAR(vector128, T1, W2, N))\n+\n+  DECL_VARIABLE_64BITS_VARIANTS(vector64);\n+  DECL_VARIABLE_128BITS_VARIANTS(vector128);\n+\n+  TEST_MACRO_64BITS_VARIANTS_2_5(VLOAD, vector64, buffer);\n+\n+  clean_results ();\n+\n+  TEST_VMOVL(int, s, 8, 16, 8);\n+  TEST_VMOVL(int, s, 16, 32, 4);\n+  TEST_VMOVL(int, s, 32, 64, 2);\n+  TEST_VMOVL(uint, u, 8, 16, 8);\n+  TEST_VMOVL(uint, u, 16, 32, 4);\n+  TEST_VMOVL(uint, u, 32, 64, 2);\n+\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vmovl ();\n+  return 0;\n+}"}]}