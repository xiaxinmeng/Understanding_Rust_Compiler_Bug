{"sha": "3a8de233f78933a19a8b736bc12d989f9bfaf5a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E4ZGUyMzNmNzg5MzNhMTlhOGI3MzZiYzEyZDk4OWY5YmZhZjVhNw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-10-28T08:22:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-10-28T08:22:34Z"}, "message": "arm.md (adddi3, [...]): Add splitters for these patterns.\n\n        * arm.md (adddi3, adddi_sesidi_di, adddi_sesidi_di): Add\n        splitters for these patterns.  Use \"#\" for output templates.\n        (addsi3_carryin_shift): New pattern.\n\nFrom-SVN: r30227", "tree": {"sha": "a88155fbdf28baf594cdac3cd4cbec7e667debdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a88155fbdf28baf594cdac3cd4cbec7e667debdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a8de233f78933a19a8b736bc12d989f9bfaf5a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a8de233f78933a19a8b736bc12d989f9bfaf5a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a8de233f78933a19a8b736bc12d989f9bfaf5a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a8de233f78933a19a8b736bc12d989f9bfaf5a7/comments", "author": null, "committer": null, "parents": [{"sha": "dfc42584a878708ebc917a801ef7b2ea93495d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfc42584a878708ebc917a801ef7b2ea93495d17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfc42584a878708ebc917a801ef7b2ea93495d17"}], "stats": {"total": 103, "additions": 100, "deletions": 3}, "files": [{"sha": "0d344096d9a4d2da7b4bd944a00c5c9e824f3d86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a8de233f78933a19a8b736bc12d989f9bfaf5a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a8de233f78933a19a8b736bc12d989f9bfaf5a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a8de233f78933a19a8b736bc12d989f9bfaf5a7", "patch": "@@ -1,3 +1,9 @@\n+Thu Oct 28 02:15:22 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* arm.md (adddi3, adddi_sesidi_di, adddi_sesidi_di): Add\n+\tsplitters for these patterns.  Use \"#\" for output templates.\n+\t(addsi3_carryin_shift): New pattern.\n+\n Thu Oct 28 10:20:02 1999  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* config/rs6000/rs6000.md (movsf): Don't convert a SUBREG"}, {"sha": "b59e5353cf324d97d23e84e1be318b726d60f5ad", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 94, "deletions": 3, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a8de233f78933a19a8b736bc12d989f9bfaf5a7/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a8de233f78933a19a8b736bc12d989f9bfaf5a7/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3a8de233f78933a19a8b736bc12d989f9bfaf5a7", "patch": "@@ -287,6 +287,84 @@\n ;; not be in the same register, what we don't want is for something being\n ;; written to partially overlap something that is an input.\n \n+;; Split up 64bit addition so that the component insns can schedule\n+;; independently.\n+(define_split\n+  [(set (match_operand:DI          0 \"s_register_operand\" \"\")\n+\t(plus:DI (match_operand:DI 1 \"s_register_operand\"  \"\")\n+\t\t (match_operand:DI 2 \"s_register_operand\"   \"\")))\n+   (clobber (reg:CC 24))]\n+  \"reload_completed\"\n+  [(parallel [(set (reg:CC_C 24)\n+\t\t      (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t    (match_dup 1)))\n+\t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n+   (set (match_dup 3) (plus:SI (ltu:SI (reg:CC_C 24) (const_int 0))\n+\t\t\t       (plus:SI (match_dup 4) (match_dup 5))))]\n+  \"\n+{\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_highpart (SImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[5] = gen_highpart (SImode, operands[2]);\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+}\")\n+\n+;; The first insn created by this splitter must set the low part of\n+;; operand0 as well as the carry bit in the CC register.  The second\n+;; insn must compute the sum of the carry bit, the sign extension of\n+;; operand 2 from 32 to 64 bits and the high part of operand 1.\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(plus:DI (sign_extend:DI\n+\t\t  (match_operand:SI 2 \"s_register_operand\" \"\"))\n+\t\t  (match_operand:DI 1 \"s_register_operand\" \"\")))\n+   (clobber (reg:CC 24))]\n+  \"reload_completed\"\n+  [(parallel [(set (reg:CC_C 24)\n+\t\t      (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t    (match_dup 1)))\n+\t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n+   (set (match_dup 3) (plus:SI (ltu:SI (reg:CC_C 24) (const_int 0))\n+\t\t\t       (plus:SI (ashiftrt:SI (match_dup 2)\n+\t\t\t\t\t\t     (const_int 31))\n+\t\t\t\t\t(match_dup 4))))]\n+  \"\n+{\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_highpart (SImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+}\")\n+\n+;; The first insn created by this splitter must set the low part of\n+;; operand0 as well as the carry bit in the CC register.  The second\n+;; insn must compute the sum of the carry bit and the high bits from\n+;; operand 1\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(plus:DI (zero_extend:DI\n+\t\t  (match_operand:SI 2 \"s_register_operand\" \"\"))\n+\t\t  (match_operand:DI 1 \"s_register_operand\" \"\")))\n+   (clobber (reg:CC 24))]\n+  \"reload_completed\"\n+  [(parallel [(set (reg:CC_C 24)\n+\t\t      (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t    (match_dup 1)))\n+\t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n+   (set (match_dup 3) (plus:SI (ltu:SI (reg:CC_C 24) (const_int 0))\n+\t\t\t       (plus:SI (match_dup 4) (const_int 0))))]\n+  \"\n+{\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_highpart (SImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+}\")\n+\n ;; Addition insns.\n \n (define_insn \"adddi3\"\n@@ -295,7 +373,7 @@\n \t\t (match_operand:DI 2 \"s_register_operand\" \"r,0\")))\n    (clobber (reg:CC 24))]\n   \"\"\n-  \"adds\\\\t%Q0, %Q1, %Q2\\;adc\\\\t%R0, %R1, %R2\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n@@ -306,7 +384,7 @@\n \t\t (match_operand:DI 1 \"s_register_operand\" \"r,0\")))\n    (clobber (reg:CC 24))]\n   \"\"\n-  \"adds\\\\t%Q0, %Q1, %2\\;adc\\\\t%R0, %R1, %2, asr #31\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n@@ -317,7 +395,7 @@\n \t\t (match_operand:DI 1 \"s_register_operand\" \"r,0\")))\n    (clobber (reg:CC 24))]\n   \"\"\n-  \"adds\\\\t%Q0, %Q1, %2\\;adc\\\\t%R0, %R1, #0\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n@@ -452,6 +530,19 @@\n   \"adc%?\\\\t%0, %1, %2\"\n [(set_attr \"conds\" \"use\")])\n \n+(define_insn \"*addsi3_carryin_shift\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(plus:SI (ltu:SI (reg:CC_C 24) (const_int 0))\n+\t\t (plus:SI\n+\t\t   (match_operator:SI 2 \"shift_operator\"\n+\t\t      [(match_operand:SI 3 \"s_register_operand\" \"\")\n+\t\t       (match_operand:SI 4 \"reg_or_int_operand\" \"\")])\n+\t\t    (match_operand:SI 1 \"s_register_operand\" \"\"))))]\n+  \"\"\n+  \"adc%?\\\\t%0, %1, %3%S2\"\n+  [(set_attr \"conds\" \"use\")]\n+)\n+\n (define_insn \"*addsi3_carryin_alt1\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(plus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")"}]}