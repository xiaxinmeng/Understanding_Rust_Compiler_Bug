{"sha": "f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNiNTY5Y2E3ZTcyNGIyZmM5YjgzOTNhZjVlZGUzYWI5ZThhNDZlYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-09T16:43:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-09T16:43:43Z"}, "message": "dominance.c, [...]: Fix comment typos.\n\n\t* dominance.c, gthr-win32.h, reg-stack.c, tree-ssa-copy.c,\n\ttree-ssa-operands.c, tree-ssa.c, tree-vrp.c, varasm.c,\n\tconfig/alpha/alpha.c, config/arm/arm.c, config/m32r/m32r.h,\n\tconfig/rs6000/predicates.md: Fix comment typos.\n\nFrom-SVN: r97904", "tree": {"sha": "01d7f445c0b42a47b3a2d065df15bc21f86579b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01d7f445c0b42a47b3a2d065df15bc21f86579b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/comments", "author": null, "committer": null, "parents": [{"sha": "7b0cab995daec07d1fddae14c57918ae0c30fb21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b0cab995daec07d1fddae14c57918ae0c30fb21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b0cab995daec07d1fddae14c57918ae0c30fb21"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "1a09539dba875eeb36209a1a4901ebe5b3fce413", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -1,3 +1,10 @@\n+2005-04-09  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* dominance.c, gthr-win32.h, reg-stack.c, tree-ssa-copy.c,\n+\ttree-ssa-operands.c, tree-ssa.c, tree-vrp.c, varasm.c,\n+\tconfig/alpha/alpha.c, config/arm/arm.c, config/m32r/m32r.h,\n+\tconfig/rs6000/predicates.md: Fix comment typos.\n+\n 2005-04-09  Jan Hubicka  <jh@suse.cz>\n \t    Steven Bosscher  <stevenb@suse.de>\n "}, {"sha": "777e62e85e5bc22db9f084b6809487af77be2986", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -8418,7 +8418,7 @@ alphaev4_next_group (rtx insn, int *pin_use, int *plen)\n \t  if (in_use)\n \t    goto done;\n \n-\t  /* If this is a completely unrecognized insn, its an asm.\n+\t  /* If this is a completely unrecognized insn, it's an asm.\n \t     We don't know how long it is, so record length as -1 to\n \t     signal a needed realignment.  */\n \t  if (recog_memoized (insn) < 0)\n@@ -8516,7 +8516,7 @@ alphaev5_next_group (rtx insn, int *pin_use, int *plen)\n \t  if (in_use)\n \t    goto done;\n \n-\t  /* If this is a completely unrecognized insn, its an asm.\n+\t  /* If this is a completely unrecognized insn, it's an asm.\n \t     We don't know how long it is, so record length as -1 to\n \t     signal a needed realignment.  */\n \t  if (recog_memoized (insn) < 0)"}, {"sha": "669ec646c6e01311da556b03ce352a58d2525196", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -7420,7 +7420,7 @@ arm_const_double_inline_cost (rtx val)\n \t\t\t      NULL_RTX, NULL_RTX, 0, 0));\n }\n \n-/* Return true if it is worthwile to split a 64-bit constant into two\n+/* Return true if it is worthwhile to split a 64-bit constant into two\n    32-bit operations.  This is the case if optimizing for size, or\n    if we have load delay slots, or if one 32-bit part can be done with\n    a single data operation.  */"}, {"sha": "2720eb77a8ed7a60d676caa0bf98a3ab46a3ef2f", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -1609,7 +1609,7 @@ extern char m32r_punct_chars[256];\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */\n /* ??? The M32R doesn't have full 32 bit pointers, but making this PSImode has\n-   it's own problems (you have to add extendpsisi2 and truncsipsi2).\n+   its own problems (you have to add extendpsisi2 and truncsipsi2).\n    Try to avoid it.  */\n #define Pmode SImode\n "}, {"sha": "24b00bab118e1bbb6e32658544e7d4a99b75c999", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -339,7 +339,7 @@\n ;; Return 1 if the operand is in volatile memory.  Note that during the\n ;; RTL generation phase, memory_operand does not return TRUE for volatile\n ;; memory references.  So this function allows us to recognize volatile\n-;; references where its safe.\n+;; references where it's safe.\n (define_predicate \"volatile_mem_operand\"\n   (and (and (match_code \"mem\")\n \t    (match_test \"MEM_VOLATILE_P (op)\"))"}, {"sha": "a3b01a59c4f20865df586632a175ebaaed010260", "filename": "gcc/dominance.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -30,7 +30,7 @@\n \n    The algorithm computes this dominator tree implicitly by computing for\n    each block its immediate dominator.  We use tree balancing and path\n-   compression, so its the O(e*a(e,v)) variant, where a(e,v) is the very\n+   compression, so it's the O(e*a(e,v)) variant, where a(e,v) is the very\n    slowly growing functional inverse of the Ackerman function.  */\n \n #include \"config.h\""}, {"sha": "e9daf3d89d86e1f2d9f210ef6d6d77ef20d0e2ed", "filename": "gcc/gthr-win32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fgthr-win32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fgthr-win32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-win32.h?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -71,7 +71,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifdef _LIBOBJC\n \n /* This is necessary to prevent windef.h (included from windows.h) from\n-   defining it's own BOOL as a typedef.  */\n+   defining its own BOOL as a typedef.  */\n #ifndef __OBJC__\n #define __OBJC__\n #endif"}, {"sha": "8ae4d3760b720ebac11253b82cb30450696df5e7", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -1424,7 +1424,7 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t    if (pat != PATTERN (insn))\n \t      {\n \t\t/* The fix_truncdi_1 pattern wants to be able to allocate\n-\t\t   it's own scratch register.  It does this by clobbering\n+\t\t   its own scratch register.  It does this by clobbering\n \t\t   an fp reg so that it is assured of an empty reg-stack\n \t\t   register.  If the register is live, kill it now.\n \t\t   Remove the DEAD/UNUSED note so we don't try to kill it"}, {"sha": "91d80a7aef90b9a0cc7fe4b1255a2603257e633b", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -430,7 +430,7 @@ get_last_copy_of (tree var)\n \n \n /* Set FIRST to be the first variable in the copy-of chain for DEST.\n-   If DEST's copy-of value or its copy-of chain have changed, return\n+   If DEST's copy-of value or its copy-of chain has changed, return\n    true.\n \n    MEM_REF is the memory reference where FIRST is stored.  This is"}, {"sha": "9c009f74773371ec83337d0910f6576809123f59", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -67,7 +67,7 @@ Boston, MA 02111-1307, USA.  */\n    on each of the 5 operand vectors which have been built up.\n \n    If the stmt had a previous operand cache, the finalization routines \n-   attempt to match up the new operands with the old ones.  If its a perfect \n+   attempt to match up the new operands with the old ones.  If it's a perfect \n    match, the old vector is simply reused.  If it isn't a perfect match, then \n    a new vector is created and the new operands are placed there.  For \n    virtual operands, if the previous cache had SSA_NAME version of a \n@@ -473,7 +473,7 @@ correct_use_link (ssa_imm_use_t *ptr, tree stmt)\n   if (prev)\n     {\n       bool stmt_mod = true;\n-      /* Find the first element which isn't a SAFE iterator, is in a sifferent\n+      /* Find the first element which isn't a SAFE iterator, is in a different\n \t stmt, and is not a a modified stmt,  That node is in the correct list,\n \t see if we are too.  */\n \n@@ -493,7 +493,7 @@ correct_use_link (ssa_imm_use_t *ptr, tree stmt)\n \troot = prev->stmt;\n       else\n \troot = *(prev->use);\n-      /* If its the right list, simply return.  */\n+      /* If it's the right list, simply return.  */\n       if (root == *(ptr->use))\n \treturn;\n     }"}, {"sha": "c152f824afec1b77a8ce51385ec5d8783afbc03e", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -261,7 +261,7 @@ verify_use (basic_block bb, basic_block def_bb, use_operand_p use_p,\n     }\n \n   /* Make sure the use is in an appropriate list by checking the previous \n-     element to make sure its the same.  */\n+     element to make sure it's the same.  */\n   if (use_p->prev == NULL)\n     {\n       error (\"No immediate_use list\");"}, {"sha": "3a3260a7f4bfccec00c5392cfad3f3fa7a885cb4", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -2000,7 +2000,7 @@ vrp_meet (value_range *vr0, value_range *vr1)\n \t  if (compare_values (vr0->min, vr1->min) == 1)\n \t    min = vr1->min;\n \n-\t  /* The upper limit of the new range is the maximium of the\n+\t  /* The upper limit of the new range is the maximum of the\n \t     two ranges.  */\n \t  if (compare_values (vr0->max, vr1->max) == -1)\n \t    max = vr1->max;"}, {"sha": "d9bcbacb7d3e9da1df385ee79684f01832f4484f", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f3b569ca7e724b2fc9b8393af5ede3ab9e8a46ea", "patch": "@@ -5402,7 +5402,7 @@ default_valid_pointer_mode (enum machine_mode mode)\n }\n \n /* Default function to output code that will globalize a label.  A\n-   target must define GLOBAL_ASM_OP or provide it's own function to\n+   target must define GLOBAL_ASM_OP or provide its own function to\n    globalize a label.  */\n #ifdef GLOBAL_ASM_OP\n void"}]}