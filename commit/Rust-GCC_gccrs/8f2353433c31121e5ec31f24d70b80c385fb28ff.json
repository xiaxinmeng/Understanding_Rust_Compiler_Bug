{"sha": "8f2353433c31121e5ec31f24d70b80c385fb28ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyMzUzNDMzYzMxMTIxZTVlYzMxZjI0ZDcwYjgwYzM4NWZiMjhmZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-09-20T20:38:29Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-09-20T20:38:29Z"}, "message": "re PR middle-end/16460 (ICE when compiling glibc (ld-ctype.c))\n\n\tPR middle-end/16460\n\n\t* cgraph.c (cgraph_unnest_node): New function.\n\t(c_finalize): Rename to ....\n\t(c_warn_unused_result_recursivly): ... this one; do only the warning\n\t(finish_function): Finalize the toplevel function; do not lower nested tree.\n\t* cgraph.h (cgraph_unnest_node): Declare.\n\t* cgraphunit.c (decide_is_function_needed): Do not use cgraph\n\tnestedness datastructure.\n\t* cse.c (cse_insn): Do not cprop nonlocal LABEL_REFs.\n\t* reload1.c (set_label_offsets): Fix call of set_label_offsets.\n\t* tree-nested.c (finlize_nesting_tree_1):  Use un-nesting code.\n\n\t* utils.c (gnat_finalize): Remove.\n\t(end_subprog_body): Directly call cgraph_finalize_function;\n\tdo not lower the nested functions.\n\n\t* trans-decl.c (build_entry_thunks): Finalize the function; do not lower\n\ttree.\n\t(gfc_generate_function_code): Likewise.\n\nFrom-SVN: r87770", "tree": {"sha": "25c6e4482c10189121acfa2bf0f54130a9876b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25c6e4482c10189121acfa2bf0f54130a9876b63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f2353433c31121e5ec31f24d70b80c385fb28ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2353433c31121e5ec31f24d70b80c385fb28ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2353433c31121e5ec31f24d70b80c385fb28ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2353433c31121e5ec31f24d70b80c385fb28ff/comments", "author": null, "committer": null, "parents": [{"sha": "04161e2bde5dee7dbe9c7863f3cb6f262c8d059c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04161e2bde5dee7dbe9c7863f3cb6f262c8d059c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04161e2bde5dee7dbe9c7863f3cb6f262c8d059c"}], "stats": {"total": 107, "additions": 64, "deletions": 43}, "files": [{"sha": "79e80a517fe8f43d228de43cc776696fcd84fc40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f2353433c31121e5ec31f24d70b80c385fb28ff", "patch": "@@ -1,3 +1,18 @@\n+2004-09-20  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/16460\n+\n+\t* cgraph.c (cgraph_unnest_node): New function.\n+\t(c_finalize): Rename to ....\n+\t(c_warn_unused_result_recursivly): ... this one; do only the warning\n+\t(finish_function): Finalize the toplevel function; do not lower nested tree.\n+\t* cgraph.h (cgraph_unnest_node): Declare.\n+\t* cgraphunit.c (decide_is_function_needed): Do not use cgraph\n+\tnestedness datastructure.\n+\t* cse.c (cse_insn): Do not cprop nonlocal LABEL_REFs.\n+\t* reload1.c (set_label_offsets): Fix call of set_label_offsets.\n+\t* tree-nested.c (finlize_nesting_tree_1):  Use un-nesting code.\n+\n 2004-09-20  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (some_small_symbolic_operand_int): Rename"}, {"sha": "d55030262b356468f98941cd501e9247fa849886", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8f2353433c31121e5ec31f24d70b80c385fb28ff", "patch": "@@ -1,3 +1,9 @@\n+2004-09-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* utils.c (gnat_finalize): Remove.\n+\t(end_subprog_body): Directly call cgraph_finalize_function;\n+\tdo not lower the nested functions.\n+\n 2004-09-20  Robert Dewar  <dewar@gnat.com>\n \n \tPR ada/17540"}, {"sha": "e09c83e7ff8c4aa0d2cf32f22fe1899170cb32ba", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=8f2353433c31121e5ec31f24d70b80c385fb28ff", "patch": "@@ -125,7 +125,6 @@ static tree compute_related_constant (tree, tree);\n static tree split_plus (tree, tree *);\n static bool value_zerop (tree);\n static void gnat_gimplify_function (tree);\n-static void gnat_finalize (tree);\n static tree float_type_for_precision (int, enum machine_mode);\n static tree convert_to_fat_pointer (tree, tree);\n static tree convert_to_thin_pointer (tree, tree);\n@@ -1793,8 +1792,7 @@ end_subprog_body (tree body)\n   if (!DECL_CONTEXT (fndecl))\n     {\n       gnat_gimplify_function (fndecl);\n-      lower_nested_functions (fndecl);\n-      gnat_finalize (fndecl);\n+      cgraph_finalize_function (fndecl, false);\n     }\n   else\n     /* Register this function with cgraph just far enough to get it\n@@ -1820,21 +1818,6 @@ gnat_gimplify_function (tree fndecl)\n   for (cgn = cgn->nested; cgn; cgn = cgn->next_nested)\n     gnat_gimplify_function (cgn->decl);\n }\n-\n-/* Give FNDECL and all its nested functions to cgraph for compilation.  */\n-\n-static void\n-gnat_finalize (tree fndecl)\n-{\n-  struct cgraph_node *cgn;\n-\n-  /* Finalize all nested functions now.  */\n-  cgn = cgraph_node (fndecl);\n-  for (cgn = cgn->nested; cgn ; cgn = cgn->next_nested)\n-    gnat_finalize (cgn->decl);\n-\n-  cgraph_finalize_function (fndecl, false);\n-}\n \f\n /* Return a definition for a builtin function named NAME and whose data type\n    is TYPE.  TYPE should be a function type with argument types."}, {"sha": "7206251ac547e765a9de57e8e6e205855ae5e514", "filename": "gcc/cgraph.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=8f2353433c31121e5ec31f24d70b80c385fb28ff", "patch": "@@ -693,4 +693,17 @@ cgraph_clone_node (struct cgraph_node *n)\n \n   return new;\n }\n+\n+/* NODE is no longer nested function; update cgraph accordingly.  */\n+void\n+cgraph_unnest_node (struct cgraph_node *node)\n+{\n+  struct cgraph_node **node2 = &node->origin->nested;\n+  gcc_assert (node->origin);\n+\n+  while (*node2 != node)\n+    node2 = &(*node2)->next_nested;\n+  *node2 = node->next_nested;\n+  node->origin = NULL;\n+}\n #include \"gt-cgraph.h\""}, {"sha": "33209f6284b83e25032d780e3cff5989ef0e2541", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=8f2353433c31121e5ec31f24d70b80c385fb28ff", "patch": "@@ -266,6 +266,7 @@ bool cgraph_varpool_assemble_pending_decls (void);\n void cgraph_redirect_edge_callee (struct cgraph_edge *, struct cgraph_node *);\n \n bool cgraph_function_possibly_inlined_p (tree);\n+void cgraph_unnest_node (struct cgraph_node *node);\n \n /* In cgraphunit.c  */\n bool cgraph_assemble_pending_functions (void);"}, {"sha": "7da68540108db8e867067409b9c11bd82efbd993", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=8f2353433c31121e5ec31f24d70b80c385fb28ff", "patch": "@@ -263,7 +263,7 @@ static tree memory_identifier;\n static bool\n decide_is_function_needed (struct cgraph_node *node, tree decl)\n {\n-  struct cgraph_node *origin;\n+  tree origin;\n \n   /* If we decided it was needed before, but at the time we didn't have\n      the body of the function available, then it's still needed.  We have\n@@ -303,8 +303,9 @@ decide_is_function_needed (struct cgraph_node *node, tree decl)\n     return false;\n   /* Nested functions of extern inline function shall not be emit unless\n      we inlined the origin.  */\n-  for (origin = node->origin; origin; origin = origin->origin)\n-    if (DECL_EXTERNAL (origin->decl))\n+  for (origin = decl_function_context (decl); origin;\n+       origin = decl_function_context (origin))\n+    if (DECL_EXTERNAL (origin))\n       return false;\n   /* We want to emit COMDAT functions only when absolutely necessary.  */\n   if (DECL_COMDAT (decl))\n@@ -586,6 +587,9 @@ cgraph_finalize_function (tree decl, bool nested)\n   notice_global_symbol (decl);\n   node->decl = decl;\n   node->local.finalized = true;\n+  if (node->nested)\n+    lower_nested_functions (decl);\n+  gcc_assert (!node->nested);\n \n   /* If not unit at a time, then we need to create the call graph\n      now, so that called functions can be queued and emitted now.  */"}, {"sha": "b7da8a349788735f2495fa388b7f8457366008e7", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=8f2353433c31121e5ec31f24d70b80c385fb28ff", "patch": "@@ -5623,7 +5623,8 @@ cse_insn (rtx insn, rtx libcall_insn)\n \n       /* If this SET is now setting PC to a label, we know it used to\n \t be a conditional or computed branch.  */\n-      else if (dest == pc_rtx && GET_CODE (src) == LABEL_REF)\n+      else if (dest == pc_rtx && GET_CODE (src) == LABEL_REF\n+\t       && !LABEL_REF_NONLOCAL_P (src))\n \t{\n \t  /* Now emit a BARRIER after the unconditional jump.  */\n \t  if (NEXT_INSN (insn) == 0"}, {"sha": "c0dfa23fadb071ab771e30abd4ea1a15d4a259b7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8f2353433c31121e5ec31f24d70b80c385fb28ff", "patch": "@@ -1,3 +1,9 @@\n+2004-09-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* trans-decl.c (build_entry_thunks): Finalize the function; do not lower\n+\ttree.\n+\t(gfc_generate_function_code): Likewise.\n+\n 2004-09-20  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/15957"}, {"sha": "cbe36f72c38fc1ec0c3ce044760484e44b9196db", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=8f2353433c31121e5ec31f24d70b80c385fb28ff", "patch": "@@ -1255,22 +1255,6 @@ create_function_arglist (gfc_symbol * sym)\n   DECL_ARGUMENTS (fndecl) = arglist;\n }\n \n-\n-/* Finalize DECL and all nested functions with cgraph.  */\n-\n-static void\n-gfc_finalize (tree decl)\n-{\n-  struct cgraph_node *cgn;\n-\n-  cgn = cgraph_node (decl);\n-  for (cgn = cgn->nested; cgn ; cgn = cgn->next_nested)\n-    gfc_finalize (cgn->decl);\n-\n-  cgraph_finalize_function (decl, false);\n-}\n-\n-\n /* Convert FNDECL's code to GIMPLE and handle any nested functions.  */\n \n static void\n@@ -1431,8 +1415,7 @@ build_entry_thunks (gfc_namespace * ns)\n       current_function_decl = NULL_TREE;\n \n       gfc_gimplify_function (thunk_fndecl);\n-      lower_nested_functions (thunk_fndecl);\n-      gfc_finalize (thunk_fndecl);\n+      cgraph_finalize_function (thunk_fndecl, false);\n \n       /* We share the symbols in the formal argument list with other entry\n \t points and the master function.  Clear them so that they are\n@@ -2313,8 +2296,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n   else\n     {\n       gfc_gimplify_function (fndecl);\n-      lower_nested_functions (fndecl);\n-      gfc_finalize (fndecl);\n+      cgraph_finalize_function (fndecl, false);\n     }\n }\n "}, {"sha": "052acc092fffbe3ee6f39df996b3ca65705f6432", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=8f2353433c31121e5ec31f24d70b80c385fb28ff", "patch": "@@ -2185,7 +2185,7 @@ set_label_offsets (rtx x, rtx insn, int initial_p)\n \t  return;\n \n \tcase LABEL_REF:\n-\t  set_label_offsets (XEXP (SET_SRC (x), 0), insn, initial_p);\n+\t  set_label_offsets (SET_SRC (x), insn, initial_p);\n \t  return;\n \n \tcase IF_THEN_ELSE:"}, {"sha": "d2608a837f0eed415dfaa1cbe39ad2c44ce6dc50", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2353433c31121e5ec31f24d70b80c385fb28ff/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=8f2353433c31121e5ec31f24d70b80c385fb28ff", "patch": "@@ -1207,6 +1207,7 @@ finalize_nesting_tree_1 (struct nesting_info *root)\n   tree stmt_list = NULL;\n   tree context = root->context;\n   struct function *sf;\n+  struct cgraph_node *node;\n \n   /* If we created a non-local frame type or decl, we need to lay them\n      out at this time.  */\n@@ -1317,6 +1318,15 @@ finalize_nesting_tree_1 (struct nesting_info *root)\n \n   /* Dump the translated tree function.  */\n   dump_function (TDI_nested, root->context);\n+  node = cgraph_node (root->context);\n+\n+  /* For nested functions update the cgraph to reflect unnesting.\n+     We also delay finalizing of these functions up to this point.  */\n+  if (node->origin)\n+    {\n+       cgraph_unnest_node (cgraph_node (root->context));\n+       cgraph_finalize_function (root->context, true);\n+    }\n }\n \n static void"}]}