{"sha": "307ca54339bfce88e67f7e446ee4bbf5f1961eba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3Y2E1NDMzOWJmY2U4OGU2N2Y3ZTQ0NmVlNGJiZjVmMTk2MWViYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-11-16T14:47:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-11-16T14:47:28Z"}, "message": "compiler: separate incomparable types from comparable ones\n    \n    Otherwise we can accidentally and incorrectly mark an actual user type\n    as incomparable.  This fixes the gccgo version of\n    https://golang.org/issue/17752.  The test case for gccgo is\n    https://golang.org/cl/33249.\n    \n    Reviewed-on: https://go-review.googlesource.com/33292\n\nFrom-SVN: r242494", "tree": {"sha": "b1c978d18b740b9a10085a389e495460535445aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1c978d18b740b9a10085a389e495460535445aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/307ca54339bfce88e67f7e446ee4bbf5f1961eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307ca54339bfce88e67f7e446ee4bbf5f1961eba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/307ca54339bfce88e67f7e446ee4bbf5f1961eba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307ca54339bfce88e67f7e446ee4bbf5f1961eba/comments", "author": null, "committer": null, "parents": [{"sha": "711188895e4d910aef399ac37084627e003433a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711188895e4d910aef399ac37084627e003433a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/711188895e4d910aef399ac37084627e003433a8"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "56ba8a56a0f06a167b4d2f83a6dd2576cd36bc16", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307ca54339bfce88e67f7e446ee4bbf5f1961eba/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307ca54339bfce88e67f7e446ee4bbf5f1961eba/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=307ca54339bfce88e67f7e446ee4bbf5f1961eba", "patch": "@@ -1,4 +1,4 @@\n-eb716b515356166d3177e6244619be5901f31162\n+31ff8c31d33c3e77cae4fd55445f12825eb92af5\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "bc6e3c628380a1270d6158ac774836b9e40de64d", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307ca54339bfce88e67f7e446ee4bbf5f1961eba/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307ca54339bfce88e67f7e446ee4bbf5f1961eba/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=307ca54339bfce88e67f7e446ee4bbf5f1961eba", "patch": "@@ -4792,6 +4792,8 @@ bool\n Struct_type::is_identical(const Struct_type* t,\n \t\t\t  bool errors_are_identical) const\n {\n+  if (this->is_struct_incomparable_ != t->is_struct_incomparable_)\n+    return false;\n   const Struct_field_list* fields1 = this->fields();\n   const Struct_field_list* fields2 = t->fields();\n   if (fields1 == NULL || fields2 == NULL)\n@@ -4929,7 +4931,10 @@ Struct_type::do_hash_for_method(Gogo* gogo) const\n \t   ++pf)\n \tret = (ret << 1) + pf->type()->hash_for_method(gogo);\n     }\n-  return ret <<= 2;\n+  ret <<= 2;\n+  if (this->is_struct_incomparable_)\n+    ret <<= 1;\n+  return ret;\n }\n \n // Find the local field NAME.\n@@ -5659,6 +5664,9 @@ Struct_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n \t}\n     }\n \n+  if (this->is_struct_incomparable_)\n+    ret->push_back('x');\n+\n   ret->push_back('e');\n }\n \n@@ -6052,6 +6060,9 @@ Array_type::is_identical(const Array_type* t, bool errors_are_identical) const\n \t\t\t   errors_are_identical, NULL))\n     return false;\n \n+  if (this->is_array_incomparable_ != t->is_array_incomparable_)\n+    return false;\n+\n   Expression* l1 = this->length();\n   Expression* l2 = t->length();\n \n@@ -6216,9 +6227,14 @@ Array_type::do_compare_is_identity(Gogo* gogo)\n unsigned int\n Array_type::do_hash_for_method(Gogo* gogo) const\n {\n+  unsigned int ret;\n+\n   // There is no very convenient way to get a hash code for the\n   // length.\n-  return this->element_type_->hash_for_method(gogo) + 1;\n+  ret = this->element_type_->hash_for_method(gogo) + 1;\n+  if (this->is_array_incomparable_)\n+    ret <<= 1;\n+  return ret;\n }\n \n // Write the hash function for an array which can not use the identify\n@@ -6916,6 +6932,8 @@ Array_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n       ret->append(s);\n       free(s);\n       mpz_clear(val);\n+      if (this->is_array_incomparable_)\n+\tret->push_back('x');\n     }\n   ret->push_back('e');\n }"}]}