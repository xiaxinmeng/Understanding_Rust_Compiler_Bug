{"sha": "c027accb4243ceed83b13982bd08c59f6a3561d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAyN2FjY2I0MjQzY2VlZDgzYjEzOTgyYmQwOGM1OWY2YTM1NjFkMg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-03-13T07:16:03Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:04:28Z"}, "message": "AVX512FP16: Add vcvttph2w/vcvttph2uw/vcvttph2dq/vcvttph2qq/vcvttph2udq/vcvttph2uqq\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm512_cvttph_epi32):\n\tNew intrinsic.\n\t(_mm512_mask_cvttph_epi32): Likewise.\n\t(_mm512_maskz_cvttph_epi32): Likewise.\n\t(_mm512_cvtt_roundph_epi32): Likewise.\n\t(_mm512_mask_cvtt_roundph_epi32): Likewise.\n\t(_mm512_maskz_cvtt_roundph_epi32): Likewise.\n\t(_mm512_cvttph_epu32): Likewise.\n\t(_mm512_mask_cvttph_epu32): Likewise.\n\t(_mm512_maskz_cvttph_epu32): Likewise.\n\t(_mm512_cvtt_roundph_epu32): Likewise.\n\t(_mm512_mask_cvtt_roundph_epu32): Likewise.\n\t(_mm512_maskz_cvtt_roundph_epu32): Likewise.\n\t(_mm512_cvttph_epi64): Likewise.\n\t(_mm512_mask_cvttph_epi64): Likewise.\n\t(_mm512_maskz_cvttph_epi64): Likewise.\n\t(_mm512_cvtt_roundph_epi64): Likewise.\n\t(_mm512_mask_cvtt_roundph_epi64): Likewise.\n\t(_mm512_maskz_cvtt_roundph_epi64): Likewise.\n\t(_mm512_cvttph_epu64): Likewise.\n\t(_mm512_mask_cvttph_epu64): Likewise.\n\t(_mm512_maskz_cvttph_epu64): Likewise.\n\t(_mm512_cvtt_roundph_epu64): Likewise.\n\t(_mm512_mask_cvtt_roundph_epu64): Likewise.\n\t(_mm512_maskz_cvtt_roundph_epu64): Likewise.\n\t(_mm512_cvttph_epi16): Likewise.\n\t(_mm512_mask_cvttph_epi16): Likewise.\n\t(_mm512_maskz_cvttph_epi16): Likewise.\n\t(_mm512_cvtt_roundph_epi16): Likewise.\n\t(_mm512_mask_cvtt_roundph_epi16): Likewise.\n\t(_mm512_maskz_cvtt_roundph_epi16): Likewise.\n\t(_mm512_cvttph_epu16): Likewise.\n\t(_mm512_mask_cvttph_epu16): Likewise.\n\t(_mm512_maskz_cvttph_epu16): Likewise.\n\t(_mm512_cvtt_roundph_epu16): Likewise.\n\t(_mm512_mask_cvtt_roundph_epu16): Likewise.\n\t(_mm512_maskz_cvtt_roundph_epu16): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm_cvttph_epi32):\n\tNew intirnsic.\n\t(_mm_mask_cvttph_epi32): Likewise.\n\t(_mm_maskz_cvttph_epi32): Likewise.\n\t(_mm256_cvttph_epi32): Likewise.\n\t(_mm256_mask_cvttph_epi32): Likewise.\n\t(_mm256_maskz_cvttph_epi32): Likewise.\n\t(_mm_cvttph_epu32): Likewise.\n\t(_mm_mask_cvttph_epu32): Likewise.\n\t(_mm_maskz_cvttph_epu32): Likewise.\n\t(_mm256_cvttph_epu32): Likewise.\n\t(_mm256_mask_cvttph_epu32): Likewise.\n\t(_mm256_maskz_cvttph_epu32): Likewise.\n\t(_mm_cvttph_epi64): Likewise.\n\t(_mm_mask_cvttph_epi64): Likewise.\n\t(_mm_maskz_cvttph_epi64): Likewise.\n\t(_mm256_cvttph_epi64): Likewise.\n\t(_mm256_mask_cvttph_epi64): Likewise.\n\t(_mm256_maskz_cvttph_epi64): Likewise.\n\t(_mm_cvttph_epu64): Likewise.\n\t(_mm_mask_cvttph_epu64): Likewise.\n\t(_mm_maskz_cvttph_epu64): Likewise.\n\t(_mm256_cvttph_epu64): Likewise.\n\t(_mm256_mask_cvttph_epu64): Likewise.\n\t(_mm256_maskz_cvttph_epu64): Likewise.\n\t(_mm_cvttph_epi16): Likewise.\n\t(_mm_mask_cvttph_epi16): Likewise.\n\t(_mm_maskz_cvttph_epi16): Likewise.\n\t(_mm256_cvttph_epi16): Likewise.\n\t(_mm256_mask_cvttph_epi16): Likewise.\n\t(_mm256_maskz_cvttph_epi16): Likewise.\n\t(_mm_cvttph_epu16): Likewise.\n\t(_mm_mask_cvttph_epu16): Likewise.\n\t(_mm_maskz_cvttph_epu16): Likewise.\n\t(_mm256_cvttph_epu16): Likewise.\n\t(_mm256_mask_cvttph_epu16): Likewise.\n\t(_mm256_maskz_cvttph_epu16): Likewise.\n\t* config/i386/i386-builtin.def: Add new builtins.\n\t* config/i386/sse.md\n\t(avx512fp16_fix<fixunssuffix>_trunc<mode>2<mask_name><round_saeonly_name>):\n\tNew.\n\t(avx512fp16_fix<fixunssuffix>_trunc<mode>2<mask_name>): Ditto.\n\t(*avx512fp16_fix<fixunssuffix>_trunc<mode>2_load<mask_name>): Ditto.\n\t(avx512fp16_fix<fixunssuffix>_truncv2di2<mask_name>): Ditto.\n\t(avx512fp16_fix<fixunssuffix>_truncv2di2_load<mask_name>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "ca68b9387257b49903dce811ac02db83e3e30908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca68b9387257b49903dce811ac02db83e3e30908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c027accb4243ceed83b13982bd08c59f6a3561d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c027accb4243ceed83b13982bd08c59f6a3561d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c027accb4243ceed83b13982bd08c59f6a3561d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c027accb4243ceed83b13982bd08c59f6a3561d2/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/babaa0e521c3eaf50227a8c6933c4dc4e2a7ff34"}], "stats": {"total": 1036, "additions": 1036, "deletions": 0}, "files": [{"sha": "762fc8d721665cb98c3d75820badcc47be3d99ea", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 545, "deletions": 0, "changes": 545, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=c027accb4243ceed83b13982bd08c59f6a3561d2", "patch": "@@ -2702,6 +2702,203 @@ _mm512_maskz_cvt_roundph_epu32 (__mmask16 __A, __m256h __B, int __C)\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vcvttph2dq.  */\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvttph_epi32 (__m256h __A)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2dq512_mask_round (__A,\n+\t\t\t\t\t     (__v16si)\n+\t\t\t\t\t     _mm512_setzero_si512 (),\n+\t\t\t\t\t     (__mmask16) -1,\n+\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvttph_epi32 (__m512i __A, __mmask16 __B, __m256h __C)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2dq512_mask_round (__C,\n+\t\t\t\t\t     (__v16si) __A,\n+\t\t\t\t\t     __B,\n+\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvttph_epi32 (__mmask16 __A, __m256h __B)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2dq512_mask_round (__B,\n+\t\t\t\t\t     (__v16si)\n+\t\t\t\t\t     _mm512_setzero_si512 (),\n+\t\t\t\t\t     __A,\n+\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtt_roundph_epi32 (__m256h __A, int __B)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2dq512_mask_round (__A,\n+\t\t\t\t\t     (__v16si)\n+\t\t\t\t\t     _mm512_setzero_si512 (),\n+\t\t\t\t\t     (__mmask16) -1,\n+\t\t\t\t\t     __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtt_roundph_epi32 (__m512i __A, __mmask16 __B,\n+\t\t\t\t__m256h __C, int __D)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2dq512_mask_round (__C,\n+\t\t\t\t\t     (__v16si) __A,\n+\t\t\t\t\t     __B,\n+\t\t\t\t\t     __D);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtt_roundph_epi32 (__mmask16 __A, __m256h __B, int __C)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2dq512_mask_round (__B,\n+\t\t\t\t\t     (__v16si)\n+\t\t\t\t\t     _mm512_setzero_si512 (),\n+\t\t\t\t\t     __A,\n+\t\t\t\t\t     __C);\n+}\n+\n+#else\n+#define _mm512_cvtt_roundph_epi32(A, B)\t\t\t\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vcvttph2dq512_mask_round ((A),\t\t\t\\\n+\t\t\t\t\t    (__v16si)\t\t\t\\\n+\t\t\t\t\t    (_mm512_setzero_si512 ()),\t\\\n+\t\t\t\t\t    (__mmask16)(-1), (B)))\n+\n+#define _mm512_mask_cvtt_roundph_epi32(A, B, C, D)\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vcvttph2dq512_mask_round ((C),\t\t\\\n+\t\t\t\t\t    (__v16si)(A),\t\\\n+\t\t\t\t\t    (B),\t\t\\\n+\t\t\t\t\t    (D)))\n+\n+#define _mm512_maskz_cvtt_roundph_epi32(A, B, C)\t\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vcvttph2dq512_mask_round ((B),\t\t\t\\\n+\t\t\t\t\t    (__v16si)\t\t\t\\\n+\t\t\t\t\t    _mm512_setzero_si512 (),\t\\\n+\t\t\t\t\t    (A),\t\t\t\\\n+\t\t\t\t\t    (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcvttph2udq.  */\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvttph_epu32 (__m256h __A)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2udq512_mask_round (__A,\n+\t\t\t\t\t      (__v16si)\n+\t\t\t\t\t      _mm512_setzero_si512 (),\n+\t\t\t\t\t      (__mmask16) -1,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvttph_epu32 (__m512i __A, __mmask16 __B, __m256h __C)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2udq512_mask_round (__C,\n+\t\t\t\t\t      (__v16si) __A,\n+\t\t\t\t\t      __B,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvttph_epu32 (__mmask16 __A, __m256h __B)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2udq512_mask_round (__B,\n+\t\t\t\t\t      (__v16si)\n+\t\t\t\t\t      _mm512_setzero_si512 (),\n+\t\t\t\t\t      __A,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtt_roundph_epu32 (__m256h __A, int __B)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2udq512_mask_round (__A,\n+\t\t\t\t\t      (__v16si)\n+\t\t\t\t\t      _mm512_setzero_si512 (),\n+\t\t\t\t\t      (__mmask16) -1,\n+\t\t\t\t\t      __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtt_roundph_epu32 (__m512i __A, __mmask16 __B,\n+\t\t\t\t__m256h __C, int __D)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2udq512_mask_round (__C,\n+\t\t\t\t\t      (__v16si) __A,\n+\t\t\t\t\t      __B,\n+\t\t\t\t\t      __D);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtt_roundph_epu32 (__mmask16 __A, __m256h __B, int __C)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2udq512_mask_round (__B,\n+\t\t\t\t\t      (__v16si)\n+\t\t\t\t\t      _mm512_setzero_si512 (),\n+\t\t\t\t\t      __A,\n+\t\t\t\t\t      __C);\n+}\n+\n+#else\n+#define _mm512_cvtt_roundph_epu32(A, B)\t\t\t\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vcvttph2udq512_mask_round ((A),\t\t\t\\\n+\t\t\t\t\t     (__v16si)\t\t\t\\\n+\t\t\t\t\t     _mm512_setzero_si512 (),\t\\\n+\t\t\t\t\t     (__mmask16)-1,\t\t\\\n+\t\t\t\t\t     (B)))\n+\n+#define _mm512_mask_cvtt_roundph_epu32(A, B, C, D)\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vcvttph2udq512_mask_round ((C),\t\t\\\n+\t\t\t\t\t     (__v16si)(A),\t\\\n+\t\t\t\t\t     (B),\t\t\\\n+\t\t\t\t\t     (D)))\n+\n+#define _mm512_maskz_cvtt_roundph_epu32(A, B, C)\t\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vcvttph2udq512_mask_round ((B),\t\t\t\\\n+\t\t\t\t\t     (__v16si)\t\t\t\\\n+\t\t\t\t\t     _mm512_setzero_si512 (),\t\\\n+\t\t\t\t\t     (A),\t\t\t\\\n+\t\t\t\t\t     (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n /* Intrinsics vcvtdq2ph.  */\n extern __inline __m256h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -3019,6 +3216,156 @@ _mm512_maskz_cvt_roundph_epu64 (__mmask8 __A, __m128h __B, int __C)\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vcvttph2qq.  */\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvttph_epi64 (__m128h __A)\n+{\n+  return __builtin_ia32_vcvttph2qq512_mask_round (__A,\n+\t\t\t\t\t\t  _mm512_setzero_si512 (),\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvttph_epi64 (__m512i __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvttph2qq512_mask_round (__C, __A, __B,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvttph_epi64 (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvttph2qq512_mask_round (__B,\n+\t\t\t\t\t\t  _mm512_setzero_si512 (),\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtt_roundph_epi64 (__m128h __A, int __B)\n+{\n+  return __builtin_ia32_vcvttph2qq512_mask_round (__A,\n+\t\t\t\t\t\t  _mm512_setzero_si512 (),\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtt_roundph_epi64 (__m512i __A, __mmask8 __B, __m128h __C, int __D)\n+{\n+  return __builtin_ia32_vcvttph2qq512_mask_round (__C, __A, __B, __D);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtt_roundph_epi64 (__mmask8 __A, __m128h __B, int __C)\n+{\n+  return __builtin_ia32_vcvttph2qq512_mask_round (__B,\n+\t\t\t\t\t\t  _mm512_setzero_si512 (),\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  __C);\n+}\n+\n+#else\n+#define _mm512_cvtt_roundph_epi64(A, B)\t\t\t\t\t\\\n+  (__builtin_ia32_vcvttph2qq512_mask_round ((A),\t\t\t\\\n+\t\t\t\t\t    _mm512_setzero_si512 (),\t\\\n+\t\t\t\t\t    (__mmask8)-1,\t\t\\\n+\t\t\t\t\t    (B)))\n+\n+#define _mm512_mask_cvtt_roundph_epi64(A, B, C, D)\t\t\t\\\n+  __builtin_ia32_vcvttph2qq512_mask_round ((C), (A), (B), (D))\n+\n+#define _mm512_maskz_cvtt_roundph_epi64(A, B, C)\t\t\t\\\n+  (__builtin_ia32_vcvttph2qq512_mask_round ((B),\t\t\t\\\n+\t\t\t\t\t    _mm512_setzero_si512 (),\t\\\n+\t\t\t\t\t    (A),\t\t\t\\\n+\t\t\t\t\t    (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcvttph2uqq.  */\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvttph_epu64 (__m128h __A)\n+{\n+  return __builtin_ia32_vcvttph2uqq512_mask_round (__A,\n+\t\t\t\t\t\t   _mm512_setzero_si512 (),\n+\t\t\t\t\t\t   (__mmask8) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvttph_epu64 (__m512i __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvttph2uqq512_mask_round (__C, __A, __B,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvttph_epu64 (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvttph2uqq512_mask_round (__B,\n+\t\t\t\t\t\t   _mm512_setzero_si512 (),\n+\t\t\t\t\t\t   __A,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtt_roundph_epu64 (__m128h __A, int __B)\n+{\n+  return __builtin_ia32_vcvttph2uqq512_mask_round (__A,\n+\t\t\t\t\t\t   _mm512_setzero_si512 (),\n+\t\t\t\t\t\t   (__mmask8) -1,\n+\t\t\t\t\t\t   __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtt_roundph_epu64 (__m512i __A, __mmask8 __B, __m128h __C, int __D)\n+{\n+  return __builtin_ia32_vcvttph2uqq512_mask_round (__C, __A, __B, __D);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtt_roundph_epu64 (__mmask8 __A, __m128h __B, int __C)\n+{\n+  return __builtin_ia32_vcvttph2uqq512_mask_round (__B,\n+\t\t\t\t\t\t   _mm512_setzero_si512 (),\n+\t\t\t\t\t\t   __A,\n+\t\t\t\t\t\t   __C);\n+}\n+\n+#else\n+#define _mm512_cvtt_roundph_epu64(A, B)\t\t\t\t\t\\\n+  (__builtin_ia32_vcvttph2uqq512_mask_round ((A),\t\t\t\\\n+\t\t\t\t\t     _mm512_setzero_si512 (),\t\\\n+\t\t\t\t\t     (__mmask8)-1,\t\t\\\n+\t\t\t\t\t     (B)))\n+\n+#define _mm512_mask_cvtt_roundph_epu64(A, B, C, D)\t\t\t\\\n+  __builtin_ia32_vcvttph2uqq512_mask_round ((C), (A), (B), (D))\n+\n+#define _mm512_maskz_cvtt_roundph_epu64(A, B, C)\t\t\t\\\n+  (__builtin_ia32_vcvttph2uqq512_mask_round ((B),\t\t\t\\\n+\t\t\t\t\t     _mm512_setzero_si512 (),\t\\\n+\t\t\t\t\t     (A),\t\t\t\\\n+\t\t\t\t\t     (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n /* Intrinsics vcvtqq2ph.  */\n extern __inline __m128h\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -3363,6 +3710,204 @@ _mm512_maskz_cvt_roundph_epu16 (__mmask32 __A, __m512h __B, int __C)\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vcvttph2w.  */\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvttph_epi16 (__m512h __A)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2w512_mask_round (__A,\n+\t\t\t\t\t    (__v32hi)\n+\t\t\t\t\t    _mm512_setzero_si512 (),\n+\t\t\t\t\t    (__mmask32) -1,\n+\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvttph_epi16 (__m512i __A, __mmask32 __B, __m512h __C)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2w512_mask_round (__C,\n+\t\t\t\t\t    (__v32hi) __A,\n+\t\t\t\t\t    __B,\n+\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvttph_epi16 (__mmask32 __A, __m512h __B)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2w512_mask_round (__B,\n+\t\t\t\t\t    (__v32hi)\n+\t\t\t\t\t    _mm512_setzero_si512 (),\n+\t\t\t\t\t    __A,\n+\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtt_roundph_epi16 (__m512h __A, int __B)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2w512_mask_round (__A,\n+\t\t\t\t\t    (__v32hi)\n+\t\t\t\t\t    _mm512_setzero_si512 (),\n+\t\t\t\t\t    (__mmask32) -1,\n+\t\t\t\t\t    __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtt_roundph_epi16 (__m512i __A, __mmask32 __B,\n+\t\t\t\t__m512h __C, int __D)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2w512_mask_round (__C,\n+\t\t\t\t\t    (__v32hi) __A,\n+\t\t\t\t\t    __B,\n+\t\t\t\t\t    __D);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtt_roundph_epi16 (__mmask32 __A, __m512h __B, int __C)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2w512_mask_round (__B,\n+\t\t\t\t\t    (__v32hi)\n+\t\t\t\t\t    _mm512_setzero_si512 (),\n+\t\t\t\t\t    __A,\n+\t\t\t\t\t    __C);\n+}\n+\n+#else\n+#define _mm512_cvtt_roundph_epi16(A, B)\t\t\t\t    \\\n+  ((__m512i)\t\t\t\t\t\t\t    \\\n+   __builtin_ia32_vcvttph2w512_mask_round ((A),\t\t\t    \\\n+\t\t\t\t\t   (__v32hi)\t\t    \\\n+\t\t\t\t\t   _mm512_setzero_si512 (), \\\n+\t\t\t\t\t   (__mmask32)-1,\t    \\\n+\t\t\t\t\t   (B)))\n+\n+#define _mm512_mask_cvtt_roundph_epi16(A, B, C, D)\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vcvttph2w512_mask_round ((C),\t\t\t\\\n+\t\t\t\t\t   (__v32hi)(A),\t\\\n+\t\t\t\t\t   (B),\t\t\t\\\n+\t\t\t\t\t   (D)))\n+\n+#define _mm512_maskz_cvtt_roundph_epi16(A, B, C)\t\t    \\\n+  ((__m512i)\t\t\t\t\t\t\t    \\\n+   __builtin_ia32_vcvttph2w512_mask_round ((B),\t\t\t    \\\n+\t\t\t\t\t   (__v32hi)\t\t    \\\n+\t\t\t\t\t   _mm512_setzero_si512 (), \\\n+\t\t\t\t\t   (A),\t\t\t    \\\n+\t\t\t\t\t   (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcvttph2uw.  */\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvttph_epu16 (__m512h __A)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2uw512_mask_round (__A,\n+\t\t\t\t\t     (__v32hi)\n+\t\t\t\t\t     _mm512_setzero_si512 (),\n+\t\t\t\t\t     (__mmask32) -1,\n+\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvttph_epu16 (__m512i __A, __mmask32 __B, __m512h __C)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2uw512_mask_round (__C,\n+\t\t\t\t\t     (__v32hi) __A,\n+\t\t\t\t\t     __B,\n+\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvttph_epu16 (__mmask32 __A, __m512h __B)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2uw512_mask_round (__B,\n+\t\t\t\t\t     (__v32hi)\n+\t\t\t\t\t     _mm512_setzero_si512 (),\n+\t\t\t\t\t     __A,\n+\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtt_roundph_epu16 (__m512h __A, int __B)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2uw512_mask_round (__A,\n+\t\t\t\t\t     (__v32hi)\n+\t\t\t\t\t     _mm512_setzero_si512 (),\n+\t\t\t\t\t     (__mmask32) -1,\n+\t\t\t\t\t     __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtt_roundph_epu16 (__m512i __A, __mmask32 __B,\n+\t\t\t\t__m512h __C, int __D)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2uw512_mask_round (__C,\n+\t\t\t\t\t     (__v32hi) __A,\n+\t\t\t\t\t     __B,\n+\t\t\t\t\t     __D);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtt_roundph_epu16 (__mmask32 __A, __m512h __B, int __C)\n+{\n+  return (__m512i)\n+    __builtin_ia32_vcvttph2uw512_mask_round (__B,\n+\t\t\t\t\t     (__v32hi)\n+\t\t\t\t\t     _mm512_setzero_si512 (),\n+\t\t\t\t\t     __A,\n+\t\t\t\t\t     __C);\n+}\n+\n+#else\n+#define _mm512_cvtt_roundph_epu16(A, B)\t\t\t\t     \\\n+  ((__m512i)\t\t\t\t\t\t\t     \\\n+   __builtin_ia32_vcvttph2uw512_mask_round ((A),\t\t     \\\n+\t\t\t\t\t    (__v32hi)\t\t     \\\n+\t\t\t\t\t    _mm512_setzero_si512 (), \\\n+\t\t\t\t\t    (__mmask32)-1,\t     \\\n+\t\t\t\t\t    (B)))\n+\n+#define _mm512_mask_cvtt_roundph_epu16(A, B, C, D)\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vcvttph2uw512_mask_round ((C),\t\t\\\n+\t\t\t\t\t    (__v32hi)(A),\t\\\n+\t\t\t\t\t    (B),\t\t\\\n+\t\t\t\t\t    (D)))\n+\n+#define _mm512_maskz_cvtt_roundph_epu16(A, B, C)\t\t     \\\n+  ((__m512i)\t\t\t\t\t\t\t     \\\n+   __builtin_ia32_vcvttph2uw512_mask_round ((B),\t\t     \\\n+\t\t\t\t\t    (__v32hi)\t\t     \\\n+\t\t\t\t\t    _mm512_setzero_si512 (), \\\n+\t\t\t\t\t    (A),\t\t     \\\n+\t\t\t\t\t    (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n /* Intrinsics vcvtw2ph.  */\n extern __inline __m512h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "f54c32fd572b136aa126cdfcb431a623d971d186", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 365, "deletions": 0, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=c027accb4243ceed83b13982bd08c59f6a3561d2", "patch": "@@ -1050,6 +1050,132 @@ _mm256_maskz_cvtph_epu32 (__mmask8 __A, __m128h __B)\n \t\t\t\t       __A);\n }\n \n+/* Intrinsics vcvttph2dq.  */\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvttph_epi32 (__m128h __A)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vcvttph2dq128_mask (__A,\n+\t\t\t\t       (__v4si) _mm_setzero_si128 (),\n+\t\t\t\t       (__mmask8) -1);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvttph_epi32 (__m128i __A, __mmask8 __B, __m128h __C)\n+{\n+  return (__m128i)__builtin_ia32_vcvttph2dq128_mask (__C,\n+\t\t\t\t\t\t     ( __v4si) __A,\n+\t\t\t\t\t\t     __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvttph_epi32 (__mmask8 __A, __m128h __B)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vcvttph2dq128_mask (__B,\n+\t\t\t\t       (__v4si) _mm_setzero_si128 (),\n+\t\t\t\t       __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvttph_epi32 (__m128h __A)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2dq256_mask (__A,\n+\t\t\t\t       (__v8si)\n+\t\t\t\t       _mm256_setzero_si256 (),\n+\t\t\t\t       (__mmask8) -1);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvttph_epi32 (__m256i __A, __mmask8 __B, __m128h __C)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2dq256_mask (__C,\n+\t\t\t\t       ( __v8si) __A,\n+\t\t\t\t       __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvttph_epi32 (__mmask8 __A, __m128h __B)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2dq256_mask (__B,\n+\t\t\t\t       (__v8si)\n+\t\t\t\t       _mm256_setzero_si256 (),\n+\t\t\t\t       __A);\n+}\n+\n+/* Intrinsics vcvttph2udq.  */\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvttph_epu32 (__m128h __A)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vcvttph2udq128_mask (__A,\n+\t\t\t\t\t(__v4si)\n+\t\t\t\t\t_mm_setzero_si128 (),\n+\t\t\t\t\t(__mmask8) -1);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvttph_epu32 (__m128i __A, __mmask8 __B, __m128h __C)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vcvttph2udq128_mask (__C,\n+\t\t\t\t\t( __v4si) __A,\n+\t\t\t\t\t__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvttph_epu32 (__mmask8 __A, __m128h __B)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vcvttph2udq128_mask (__B,\n+\t\t\t\t\t(__v4si)\n+\t\t\t\t\t_mm_setzero_si128 (),\n+\t\t\t\t\t__A);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvttph_epu32 (__m128h __A)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2udq256_mask (__A,\n+\t\t\t\t\t(__v8si)\n+\t\t\t\t\t_mm256_setzero_si256 (), (__mmask8) -1);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvttph_epu32 (__m256i __A, __mmask8 __B, __m128h __C)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2udq256_mask (__C,\n+\t\t\t\t\t( __v8si) __A,\n+\t\t\t\t\t__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvttph_epu32 (__mmask8 __A, __m128h __B)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2udq256_mask (__B,\n+\t\t\t\t\t(__v8si)\n+\t\t\t\t\t_mm256_setzero_si256 (),\n+\t\t\t\t\t__A);\n+}\n+\n /* Intrinsics vcvtdq2ph.  */\n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1257,6 +1383,116 @@ _mm256_maskz_cvtph_epu64 (__mmask8 __A, __m128h __B)\n \t\t\t\t\t    __A);\n }\n \n+/* Intrinsics vcvttph2qq.  */\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvttph_epi64 (__m128h __A)\n+{\n+  return __builtin_ia32_vcvttph2qq128_mask (__A,\n+\t\t\t\t\t    _mm_setzero_si128 (),\n+\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvttph_epi64 (__m128i __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvttph2qq128_mask (__C,\n+\t\t\t\t\t    __A,\n+\t\t\t\t\t    __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvttph_epi64 (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvttph2qq128_mask (__B,\n+\t\t\t\t\t    _mm_setzero_si128 (),\n+\t\t\t\t\t    __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvttph_epi64 (__m128h __A)\n+{\n+  return __builtin_ia32_vcvttph2qq256_mask (__A,\n+\t\t\t\t\t    _mm256_setzero_si256 (),\n+\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvttph_epi64 (__m256i __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvttph2qq256_mask (__C,\n+\t\t\t\t\t    __A,\n+\t\t\t\t\t    __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvttph_epi64 (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvttph2qq256_mask (__B,\n+\t\t\t\t\t    _mm256_setzero_si256 (),\n+\t\t\t\t\t    __A);\n+}\n+\n+/* Intrinsics vcvttph2uqq.  */\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvttph_epu64 (__m128h __A)\n+{\n+  return __builtin_ia32_vcvttph2uqq128_mask (__A,\n+\t\t\t\t\t     _mm_setzero_si128 (),\n+\t\t\t\t\t     (__mmask8) -1);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvttph_epu64 (__m128i __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvttph2uqq128_mask (__C,\n+\t\t\t\t\t     __A,\n+\t\t\t\t\t     __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvttph_epu64 (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvttph2uqq128_mask (__B,\n+\t\t\t\t\t     _mm_setzero_si128 (),\n+\t\t\t\t\t     __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvttph_epu64 (__m128h __A)\n+{\n+  return __builtin_ia32_vcvttph2uqq256_mask (__A,\n+\t\t\t\t\t     _mm256_setzero_si256 (),\n+\t\t\t\t\t     (__mmask8) -1);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvttph_epu64 (__m256i __A, __mmask8 __B, __m128h __C)\n+{\n+  return __builtin_ia32_vcvttph2uqq256_mask (__C,\n+\t\t\t\t\t     __A,\n+\t\t\t\t\t     __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvttph_epu64 (__mmask8 __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcvttph2uqq256_mask (__B,\n+\t\t\t\t\t     _mm256_setzero_si256 (),\n+\t\t\t\t\t     __A);\n+}\n+\n /* Intrinsics vcvtqq2ph.  */\n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1481,6 +1717,135 @@ _mm256_maskz_cvtph_epu16 (__mmask16 __A, __m256h __B)\n \t\t\t\t      __A);\n }\n \n+/* Intrinsics vcvttph2w.  */\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvttph_epi16 (__m128h __A)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vcvttph2w128_mask (__A,\n+\t\t\t\t      (__v8hi)\n+\t\t\t\t      _mm_setzero_si128 (),\n+\t\t\t\t      (__mmask8) -1);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvttph_epi16 (__m128i __A, __mmask8 __B, __m128h __C)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vcvttph2w128_mask (__C,\n+\t\t\t\t      ( __v8hi) __A,\n+\t\t\t\t      __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvttph_epi16 (__mmask8 __A, __m128h __B)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vcvttph2w128_mask (__B,\n+\t\t\t\t      (__v8hi)\n+\t\t\t\t      _mm_setzero_si128 (),\n+\t\t\t\t      __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvttph_epi16 (__m256h __A)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2w256_mask (__A,\n+\t\t\t\t      (__v16hi)\n+\t\t\t\t      _mm256_setzero_si256 (),\n+\t\t\t\t      (__mmask16) -1);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvttph_epi16 (__m256i __A, __mmask16 __B, __m256h __C)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2w256_mask (__C,\n+\t\t\t\t      ( __v16hi) __A,\n+\t\t\t\t      __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvttph_epi16 (__mmask16 __A, __m256h __B)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2w256_mask (__B,\n+\t\t\t\t      (__v16hi)\n+\t\t\t\t      _mm256_setzero_si256 (),\n+\t\t\t\t      __A);\n+}\n+\n+/* Intrinsics vcvttph2uw.  */\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvttph_epu16 (__m128h __A)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vcvttph2uw128_mask (__A,\n+\t\t\t\t       (__v8hi)\n+\t\t\t\t       _mm_setzero_si128 (),\n+\t\t\t\t       (__mmask8) -1);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvttph_epu16 (__m128i __A, __mmask8 __B, __m128h __C)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vcvttph2uw128_mask (__C,\n+\t\t\t\t       ( __v8hi) __A,\n+\t\t\t\t       __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvttph_epu16 (__mmask8 __A, __m128h __B)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vcvttph2uw128_mask (__B,\n+\t\t\t\t       (__v8hi)\n+\t\t\t\t       _mm_setzero_si128 (),\n+\t\t\t\t       __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvttph_epu16 (__m256h __A)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2uw256_mask (__A,\n+\t\t\t\t       (__v16hi)\n+\t\t\t\t       _mm256_setzero_si256 (),\n+\t\t\t\t       (__mmask16) -1);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvttph_epu16 (__m256i __A, __mmask16 __B, __m256h __C)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2uw256_mask (__C,\n+\t\t\t\t       ( __v16hi) __A,\n+\t\t\t\t       __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvttph_epu16 (__mmask16 __A, __m256h __B)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vcvttph2uw256_mask (__B,\n+\t\t\t\t       (__v16hi) _mm256_setzero_si256 (),\n+\t\t\t\t       __A);\n+}\n+\n /* Intrinsics vcvtw2ph.  */\n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "176a3783ad90a28ef6286202564c6a1e970db68f", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=c027accb4243ceed83b13982bd08c59f6a3561d2", "patch": "@@ -2835,14 +2835,26 @@ BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp1\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2dq_v8si_mask, \"__builtin_ia32_vcvtph2dq256_mask\", IX86_BUILTIN_VCVTPH2DQ256_MASK, UNKNOWN, (int) V8SI_FTYPE_V8HF_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2udq_v4si_mask, \"__builtin_ia32_vcvtph2udq128_mask\", IX86_BUILTIN_VCVTPH2UDQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V8HF_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2udq_v8si_mask, \"__builtin_ia32_vcvtph2udq256_mask\", IX86_BUILTIN_VCVTPH2UDQ256_MASK, UNKNOWN, (int) V8SI_FTYPE_V8HF_V8SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fix_truncv4si2_mask, \"__builtin_ia32_vcvttph2dq128_mask\", IX86_BUILTIN_VCVTTPH2DQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V8HF_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fix_truncv8si2_mask, \"__builtin_ia32_vcvttph2dq256_mask\", IX86_BUILTIN_VCVTTPH2DQ256_MASK, UNKNOWN, (int) V8SI_FTYPE_V8HF_V8SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fixuns_truncv4si2_mask, \"__builtin_ia32_vcvttph2udq128_mask\", IX86_BUILTIN_VCVTTPH2UDQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V8HF_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fixuns_truncv8si2_mask, \"__builtin_ia32_vcvttph2udq256_mask\", IX86_BUILTIN_VCVTTPH2UDQ256_MASK, UNKNOWN, (int) V8SI_FTYPE_V8HF_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2qq_v2di_mask, \"__builtin_ia32_vcvtph2qq128_mask\", IX86_BUILTIN_VCVTPH2QQ128_MASK, UNKNOWN, (int) V2DI_FTYPE_V8HF_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2qq_v4di_mask, \"__builtin_ia32_vcvtph2qq256_mask\", IX86_BUILTIN_VCVTPH2QQ256_MASK, UNKNOWN, (int) V4DI_FTYPE_V8HF_V4DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2uqq_v2di_mask, \"__builtin_ia32_vcvtph2uqq128_mask\", IX86_BUILTIN_VCVTPH2UQQ128_MASK, UNKNOWN, (int) V2DI_FTYPE_V8HF_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2uqq_v4di_mask, \"__builtin_ia32_vcvtph2uqq256_mask\", IX86_BUILTIN_VCVTPH2UQQ256_MASK, UNKNOWN, (int) V4DI_FTYPE_V8HF_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fix_truncv2di2_mask, \"__builtin_ia32_vcvttph2qq128_mask\", IX86_BUILTIN_VCVTTPH2QQ128_MASK, UNKNOWN, (int) V2DI_FTYPE_V8HF_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fix_truncv4di2_mask, \"__builtin_ia32_vcvttph2qq256_mask\", IX86_BUILTIN_VCVTTPH2QQ256_MASK, UNKNOWN, (int) V4DI_FTYPE_V8HF_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fixuns_truncv2di2_mask, \"__builtin_ia32_vcvttph2uqq128_mask\", IX86_BUILTIN_VCVTTPH2UQQ128_MASK, UNKNOWN, (int) V2DI_FTYPE_V8HF_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fixuns_truncv4di2_mask, \"__builtin_ia32_vcvttph2uqq256_mask\", IX86_BUILTIN_VCVTTPH2UQQ256_MASK, UNKNOWN, (int) V4DI_FTYPE_V8HF_V4DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2w_v8hi_mask, \"__builtin_ia32_vcvtph2w128_mask\", IX86_BUILTIN_VCVTPH2W128_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HF_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2w_v16hi_mask, \"__builtin_ia32_vcvtph2w256_mask\", IX86_BUILTIN_VCVTPH2W256_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HF_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2uw_v8hi_mask, \"__builtin_ia32_vcvtph2uw128_mask\", IX86_BUILTIN_VCVTPH2UW128_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HF_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2uw_v16hi_mask, \"__builtin_ia32_vcvtph2uw256_mask\", IX86_BUILTIN_VCVTPH2UW256_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HF_V16HI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fix_truncv8hi2_mask, \"__builtin_ia32_vcvttph2w128_mask\", IX86_BUILTIN_VCVTTPH2W128_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HF_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fix_truncv16hi2_mask, \"__builtin_ia32_vcvttph2w256_mask\", IX86_BUILTIN_VCVTTPH2W256_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HF_V16HI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fixuns_truncv8hi2_mask, \"__builtin_ia32_vcvttph2uw128_mask\", IX86_BUILTIN_VCVTTPH2UW128_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HF_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fixuns_truncv16hi2_mask, \"__builtin_ia32_vcvttph2uw256_mask\", IX86_BUILTIN_VCVTTPH2UW256_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HF_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtw2ph_v8hi_mask, \"__builtin_ia32_vcvtw2ph128_mask\", IX86_BUILTIN_VCVTW2PH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HI_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtw2ph_v16hi_mask, \"__builtin_ia32_vcvtw2ph256_mask\", IX86_BUILTIN_VCVTW2PH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HI_V16HF_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtuw2ph_v8hi_mask, \"__builtin_ia32_vcvtuw2ph128_mask\", IX86_BUILTIN_VCVTUW2PH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HI_V8HF_UQI)\n@@ -3084,10 +3096,16 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_getmantv32hf_mask_round\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vgetmantv8hf_mask_round, \"__builtin_ia32_getmantsh_mask_round\", IX86_BUILTIN_GETMANTSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_INT_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2dq_v16si_mask_round, \"__builtin_ia32_vcvtph2dq512_mask_round\", IX86_BUILTIN_VCVTPH2DQ512_MASK_ROUND, UNKNOWN, (int) V16SI_FTYPE_V16HF_V16SI_UHI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2udq_v16si_mask_round, \"__builtin_ia32_vcvtph2udq512_mask_round\", IX86_BUILTIN_VCVTPH2UDQ512_MASK_ROUND, UNKNOWN, (int) V16SI_FTYPE_V16HF_V16SI_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fix_truncv16si2_mask_round, \"__builtin_ia32_vcvttph2dq512_mask_round\", IX86_BUILTIN_VCVTTPH2DQ512_MASK_ROUND, UNKNOWN, (int) V16SI_FTYPE_V16HF_V16SI_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fixuns_truncv16si2_mask_round, \"__builtin_ia32_vcvttph2udq512_mask_round\", IX86_BUILTIN_VCVTTPH2UDQ512_MASK_ROUND, UNKNOWN, (int) V16SI_FTYPE_V16HF_V16SI_UHI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2qq_v8di_mask_round, \"__builtin_ia32_vcvtph2qq512_mask_round\", IX86_BUILTIN_VCVTPH2QQ512_MASK_ROUND, UNKNOWN, (int) V8DI_FTYPE_V8HF_V8DI_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2uqq_v8di_mask_round, \"__builtin_ia32_vcvtph2uqq512_mask_round\", IX86_BUILTIN_VCVTPH2UQQ512_MASK_ROUND, UNKNOWN, (int) V8DI_FTYPE_V8HF_V8DI_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fix_truncv8di2_mask_round, \"__builtin_ia32_vcvttph2qq512_mask_round\", IX86_BUILTIN_VCVTTPH2QQ512_MASK_ROUND, UNKNOWN, (int) V8DI_FTYPE_V8HF_V8DI_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fixuns_truncv8di2_mask_round, \"__builtin_ia32_vcvttph2uqq512_mask_round\", IX86_BUILTIN_VCVTTPH2UQQ512_MASK_ROUND, UNKNOWN, (int) V8DI_FTYPE_V8HF_V8DI_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2w_v32hi_mask_round, \"__builtin_ia32_vcvtph2w512_mask_round\", IX86_BUILTIN_VCVTPH2W512_MASK_ROUND, UNKNOWN, (int) V32HI_FTYPE_V32HF_V32HI_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2uw_v32hi_mask_round, \"__builtin_ia32_vcvtph2uw512_mask_round\", IX86_BUILTIN_VCVTPH2UW512_MASK_ROUND, UNKNOWN, (int) V32HI_FTYPE_V32HF_V32HI_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fix_truncv32hi2_mask_round, \"__builtin_ia32_vcvttph2w512_mask_round\", IX86_BUILTIN_VCVTTPH2W512_MASK_ROUND, UNKNOWN, (int) V32HI_FTYPE_V32HF_V32HI_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fixuns_truncv32hi2_mask_round, \"__builtin_ia32_vcvttph2uw512_mask_round\", IX86_BUILTIN_VCVTTPH2UW512_MASK_ROUND, UNKNOWN, (int) V32HI_FTYPE_V32HF_V32HI_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtw2ph_v32hi_mask_round, \"__builtin_ia32_vcvtw2ph512_mask_round\", IX86_BUILTIN_VCVTW2PH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HI_V32HF_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtuw2ph_v32hi_mask_round, \"__builtin_ia32_vcvtuw2ph512_mask_round\", IX86_BUILTIN_VCVTUW2PH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HI_V32HF_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtdq2ph_v16si_mask_round, \"__builtin_ia32_vcvtdq2ph512_mask_round\", IX86_BUILTIN_VCVTDQ2PH512_MASK_ROUND, UNKNOWN, (int) V16HF_FTYPE_V16SI_V16HF_UHI_INT)"}, {"sha": "60a52b23611465ca5a95ab515634489d14c091a1", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c027accb4243ceed83b13982bd08c59f6a3561d2", "patch": "@@ -5934,6 +5934,60 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"HF\")])\n \n+(define_insn \"avx512fp16_fix<fixunssuffix>_trunc<mode>2<mask_name><round_saeonly_name>\"\n+  [(set (match_operand:VI2H_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(any_fix:VI2H_AVX512VL\n+\t  (match_operand:<ssePHmode> 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvttph2<fixsuffix><sseintconvert>\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512fp16_fix<fixunssuffix>_trunc<mode>2<mask_name>\"\n+  [(set (match_operand:VI4_128_8_256 0 \"register_operand\" \"=v\")\n+\t(any_fix:VI4_128_8_256\n+\t  (vec_select:V4HF\n+\t    (match_operand:V8HF 1 \"register_operand\" \"v\")\n+\t    (parallel [(const_int 0) (const_int 1) (const_int 2) (const_int 3)]))))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvttph2<fixsuffix><sseintconvert>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"*avx512fp16_fix<fixunssuffix>_trunc<mode>2_load<mask_name>\"\n+  [(set (match_operand:VI4_128_8_256 0 \"register_operand\" \"=v\")\n+\t(any_fix:VI4_128_8_256\n+\t  (match_operand:V4HF 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvttph2<fixsuffix><sseintconvert>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512fp16_fix<fixunssuffix>_truncv2di2<mask_name>\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+\t(any_fix:V2DI\n+\t  (vec_select:V2HF\n+\t    (match_operand:V8HF 1 \"nonimmediate_operand\" \"v\")\n+\t    (parallel [(const_int 0) (const_int 1)]))))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvttph2<fixsuffix>qq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*avx512fp16_fix<fixunssuffix>_truncv2di2_load<mask_name>\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+\t(any_fix:V2DI\n+\t  (match_operand:V2HF 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvttph2<fixsuffix>qq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel single-precision floating point conversion operations"}, {"sha": "bd6b9df5842cbbb6f77cc615df6988d999d546e4", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=c027accb4243ceed83b13982bd08c59f6a3561d2", "patch": "@@ -723,8 +723,14 @@\n #define __builtin_ia32_vcvtph2udq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2udq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2qq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2qq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2dq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2dq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2udq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2udq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2qq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2qq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2uqq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2uqq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2w512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2w512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2w512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2w512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2uw512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2uw512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, 8)"}, {"sha": "c58e8acd57f7d49e86179fd1f91788ee889a8a18", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=c027accb4243ceed83b13982bd08c59f6a3561d2", "patch": "@@ -740,8 +740,14 @@\n #define __builtin_ia32_vcvtph2udq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2udq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2qq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2qq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2dq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2dq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2udq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2udq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2qq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2qq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2uqq512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2uqq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2w512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2w512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2w512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2w512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2uw512_mask_round(A, B, C, D) __builtin_ia32_vcvttph2uw512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, 8)"}, {"sha": "98e38fb025a949e25506b0f369736a0d76223edb", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=c027accb4243ceed83b13982bd08c59f6a3561d2", "patch": "@@ -680,8 +680,14 @@ test_1 (_mm512_roundscale_ph, __m512h, __m512h, 123)\n test_1 (_mm512_getexp_round_ph, __m512h, __m512h, 8)\n test_1 (_mm512_cvt_roundph_epi16, __m512i, __m512h, 8)\n test_1 (_mm512_cvt_roundph_epu16, __m512i, __m512h, 8)\n+test_1 (_mm512_cvtt_roundph_epi16, __m512i, __m512h, 8)\n+test_1 (_mm512_cvtt_roundph_epu16, __m512i, __m512h, 8)\n test_1 (_mm512_cvt_roundph_epi32, __m512i, __m256h, 8)\n test_1 (_mm512_cvt_roundph_epu32, __m512i, __m256h, 8)\n+test_1 (_mm512_cvtt_roundph_epi32, __m512i, __m256h, 8)\n+test_1 (_mm512_cvtt_roundph_epu32, __m512i, __m256h, 8)\n+test_1 (_mm512_cvtt_roundph_epi64, __m512i, __m128h, 8)\n+test_1 (_mm512_cvtt_roundph_epu64, __m512i, __m128h, 8)\n test_1 (_mm512_cvt_roundph_epi64, __m512i, __m128h, 8)\n test_1 (_mm512_cvt_roundph_epu64, __m512i, __m128h, 8)\n test_1 (_mm512_cvt_roundepi16_ph, __m512h, __m512i, 8)\n@@ -732,10 +738,16 @@ test_2 (_mm512_maskz_getexp_round_ph, __m512h, __mmask32, __m512h, 8)\n test_2 (_mm_getexp_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epi16, __m512i, __mmask32, __m512h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epu16, __m512i, __mmask32, __m512h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epi16, __m512i, __mmask32, __m512h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epu16, __m512i, __mmask32, __m512h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epi32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epu32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epi64, __m512i, __mmask8, __m128h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epu64, __m512i, __mmask8, __m128h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epi32, __m512i, __mmask16, __m256h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epu32, __m512i, __mmask16, __m256h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epi64, __m512i, __mmask8, __m128h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epu64, __m512i, __mmask8, __m128h, 8)\n test_2 (_mm512_maskz_cvt_roundepi16_ph, __m512h, __mmask32, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu16_ph, __m512h, __mmask32, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepi32_ph, __m256h, __mmask16, __m512i, 8)\n@@ -784,10 +796,16 @@ test_3 (_mm_maskz_getexp_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm512_mask_getexp_round_ph, __m512h, __m512h, __mmask32, __m512h, 8)\n test_3 (_mm512_mask_cvt_roundph_epi16, __m512i, __m512i, __mmask32, __m512h, 8)\n test_3 (_mm512_mask_cvt_roundph_epu16, __m512i, __m512i, __mmask32, __m512h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epi16, __m512i, __m512i, __mmask32, __m512h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epu16, __m512i, __m512i, __mmask32, __m512h, 8)\n test_3 (_mm512_mask_cvt_roundph_epi32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvt_roundph_epu32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvt_roundph_epi64, __m512i, __m512i, __mmask8, __m128h, 8)\n test_3 (_mm512_mask_cvt_roundph_epu64, __m512i, __m512i, __mmask8, __m128h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epi32, __m512i, __m512i, __mmask16, __m256h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epu32, __m512i, __m512i, __mmask16, __m256h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epi64, __m512i, __m512i, __mmask8, __m128h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epu64, __m512i, __m512i, __mmask8, __m128h, 8)\n test_3 (_mm512_mask_cvt_roundepi16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepu16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepi32_ph, __m256h, __m256h, __mmask16, __m512i, 8)"}, {"sha": "3ad10908d49764608e762317b74cb165c06f6a59", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=c027accb4243ceed83b13982bd08c59f6a3561d2", "patch": "@@ -785,10 +785,16 @@ test_1 (_mm512_roundscale_ph, __m512h, __m512h, 123)\n test_1 (_mm512_getexp_round_ph, __m512h, __m512h, 8)\n test_1 (_mm512_cvt_roundph_epi16, __m512i, __m512h, 8)\n test_1 (_mm512_cvt_roundph_epu16, __m512i, __m512h, 8)\n+test_1 (_mm512_cvtt_roundph_epi16, __m512i, __m512h, 8)\n+test_1 (_mm512_cvtt_roundph_epu16, __m512i, __m512h, 8)\n test_1 (_mm512_cvt_roundph_epi32, __m512i, __m256h, 8)\n test_1 (_mm512_cvt_roundph_epu32, __m512i, __m256h, 8)\n test_1 (_mm512_cvt_roundph_epi64, __m512i, __m128h, 8)\n test_1 (_mm512_cvt_roundph_epu64, __m512i, __m128h, 8)\n+test_1 (_mm512_cvtt_roundph_epi32, __m512i, __m256h, 8)\n+test_1 (_mm512_cvtt_roundph_epu32, __m512i, __m256h, 8)\n+test_1 (_mm512_cvtt_roundph_epi64, __m512i, __m128h, 8)\n+test_1 (_mm512_cvtt_roundph_epu64, __m512i, __m128h, 8)\n test_1 (_mm512_cvt_roundepi16_ph, __m512h, __m512i, 8)\n test_1 (_mm512_cvt_roundepu16_ph, __m512h, __m512i, 8)\n test_1 (_mm512_cvt_roundepi32_ph, __m256h, __m512i, 8)\n@@ -836,10 +842,16 @@ test_2 (_mm512_maskz_getexp_round_ph, __m512h, __mmask32, __m512h, 8)\n test_2 (_mm_getexp_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epi16, __m512i, __mmask32, __m512h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epu16, __m512i, __mmask32, __m512h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epi16, __m512i, __mmask32, __m512h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epu16, __m512i, __mmask32, __m512h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epi32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epu32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epi64, __m512i, __mmask8, __m128h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epu64, __m512i, __mmask8, __m128h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epi32, __m512i, __mmask16, __m256h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epu32, __m512i, __mmask16, __m256h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epi64, __m512i, __mmask8, __m128h, 8)\n+test_2 (_mm512_maskz_cvtt_roundph_epu64, __m512i, __mmask8, __m128h, 8)\n test_2 (_mm512_maskz_cvt_roundepi16_ph, __m512h, __mmask32, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepu16_ph, __m512h, __mmask32, __m512i, 8)\n test_2 (_mm512_maskz_cvt_roundepi32_ph, __m256h, __mmask16, __m512i, 8)\n@@ -887,10 +899,16 @@ test_3 (_mm_maskz_getexp_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm512_mask_getexp_round_ph, __m512h, __m512h, __mmask32, __m512h, 8)\n test_3 (_mm512_mask_cvt_roundph_epi16, __m512i, __m512i, __mmask32, __m512h, 8)\n test_3 (_mm512_mask_cvt_roundph_epu16, __m512i, __m512i, __mmask32, __m512h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epi16, __m512i, __m512i, __mmask32, __m512h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epu16, __m512i, __m512i, __mmask32, __m512h, 8)\n test_3 (_mm512_mask_cvt_roundph_epi32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvt_roundph_epu32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvt_roundph_epi64, __m512i, __m512i, __mmask8, __m128h, 8)\n test_3 (_mm512_mask_cvt_roundph_epu64, __m512i, __m512i, __mmask8, __m128h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epi32, __m512i, __m512i, __mmask16, __m256h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epu32, __m512i, __m512i, __mmask16, __m256h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epi64, __m512i, __m512i, __mmask8, __m128h, 8)\n+test_3 (_mm512_mask_cvtt_roundph_epu64, __m512i, __m512i, __mmask8, __m128h, 8)\n test_3 (_mm512_mask_cvt_roundepi16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepu16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n test_3 (_mm512_mask_cvt_roundepi32_ph, __m256h, __m256h, __mmask16, __m512i, 8)"}, {"sha": "7dcaf216043c0c8c7d3af23d6d7113e13d2cd4f2", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c027accb4243ceed83b13982bd08c59f6a3561d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=c027accb4243ceed83b13982bd08c59f6a3561d2", "patch": "@@ -741,8 +741,14 @@\n #define __builtin_ia32_vcvtph2udq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2udq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2qq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2qq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2dq_v16si_mask_round(A, B, C, D) __builtin_ia32_vcvttph2dq_v16si_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2udq_v16si_mask_round(A, B, C, D) __builtin_ia32_vcvttph2udq_v16si_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2qq_v8di_mask_round(A, B, C, D) __builtin_ia32_vcvttph2qq_v8di_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2uqq_v8di_mask_round(A, B, C, D) __builtin_ia32_vcvttph2uqq_v8di_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2w512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2w512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2w_v32hi_mask_round(A, B, C, D) __builtin_ia32_vcvttph2w_v32hi_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvttph2uw_v32hi_mask_round(A, B, C, D) __builtin_ia32_vcvttph2uw_v32hi_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, 8)"}]}