{"sha": "417ea5c02cef7f000e66d1af22b066c2c1cda047", "node_id": "C_kwDOANBUbNoAKDQxN2VhNWMwMmNlZjdmMDAwZTY2ZDFhZjIyYjA2NmMyYzFjZGEwNDc", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-21T06:27:00Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-21T06:28:30Z"}, "message": "Fortran: Fix -Wno-missing-include-dirs handling [PR55534]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/55534\n\t* cpp.c: Define GCC_C_COMMON_C for #include \"options.h\" to make\n\tcpp_reason_option_codes available.\n\t(gfc_cpp_register_include_paths): Make static, set pfile's\n\twarn_missing_include_dirs and move before caller.\n\t(gfc_cpp_init_cb): New, cb code moved from ...\n\t(gfc_cpp_init_0): ... here.\n\t(gfc_cpp_post_options): Call gfc_cpp_init_cb.\n\t(cb_cpp_diagnostic_cpp_option): New. As implemented in c-family\n\tto match CppReason flags to -W... names.\n\t(cb_cpp_diagnostic): Use it to replace single special case.\n\t* cpp.h (gfc_cpp_register_include_paths): Remove as now static.\n\t* gfortran.h (gfc_check_include_dirs): New prototype.\n\t(gfc_add_include_path): Add new bool arg.\n\t* options.c (gfc_init_options): Don't set -Wmissing-include-dirs.\n\t(gfc_post_options): Set it here after commandline processing. Call\n\tgfc_add_include_path with defer_warn=false.\n\t(gfc_handle_option): Call it with defer_warn=true.\n\t* scanner.c (gfc_do_check_include_dir, gfc_do_check_include_dirs,\n\tgfc_check_include_dirs): New. Diagnostic moved from ...\n\t(add_path_to_list): ... here, which came before cmdline processing.\n\tTake additional bool defer_warn argument.\n\t(gfc_add_include_path): Take additional defer_warn arg.\n\t* scanner.h (struct gfc_directorylist): Reorder for alignment issues,\n\tadd new 'bool warn'.\n\nlibgfortran/ChangeLog:\n\tPR fortran/55534\n\t* configure.ac (AM_FCFLAGS): Add -Wno-missing-include-dirs.\n\t* configure: Regenerate.\n\nlibgomp/ChangeLog:\n\tPR fortran/55534\n\t* testsuite/libgomp.fortran/fortran.exp: Add -Wno-missing-include-dirs\n\tto ALWAYS_CFLAGS.\n\t* testsuite/libgomp.oacc-fortran/fortran.exp: Likewise.\n\ngcc/testsuite/ChangeLog:\n\t* gfortran.dg/include_6.f90: Change dg-error to\n\tdg-warning and update pattern.\n\t* gfortran.dg/include_14.f90: New test.\n\t* gfortran.dg/include_15.f90: New test.\n\t* gfortran.dg/include_16.f90: New test.\n\t* gfortran.dg/include_17.f90: New test.\n\t* gfortran.dg/include_18.f90: New test.\n\t* gfortran.dg/include_19.f90: New test.\n\t* gfortran.dg/include_20.f90: New test.\n\t* gfortran.dg/include_21.f90: New test.", "tree": {"sha": "1212ed64ad39e507f11d767384a56c08136a7d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1212ed64ad39e507f11d767384a56c08136a7d36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/417ea5c02cef7f000e66d1af22b066c2c1cda047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417ea5c02cef7f000e66d1af22b066c2c1cda047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/417ea5c02cef7f000e66d1af22b066c2c1cda047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417ea5c02cef7f000e66d1af22b066c2c1cda047/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c6446f77b9001d26f973114450d790749f282b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c6446f77b9001d26f973114450d790749f282b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63c6446f77b9001d26f973114450d790749f282b"}], "stats": {"total": 285, "additions": 206, "deletions": 79}, "files": [{"sha": "3ff895455e95193e91714964d6c37b7a46cd556a", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 66, "deletions": 40, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -19,11 +19,15 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+\n+#define GCC_C_COMMON_C\n+#include \"options.h\"  /* For cpp_reason_option_codes. */\n+#undef GCC_C_COMMON_C\n+\n #include \"target.h\"\n #include \"gfortran.h\"\n #include \"diagnostic.h\"\n \n-\n #include \"toplev.h\"\n \n #include \"../../libcpp/internal.h\"\n@@ -240,6 +244,18 @@ gfc_cpp_temporary_file (void)\n   return gfc_cpp_option.temporary_filename;\n }\n \n+static void\n+gfc_cpp_register_include_paths (void)\n+{\n+  int cxx_stdinc = 0;\n+  cpp_get_options (cpp_in)->warn_missing_include_dirs\n+    = global_options.x_cpp_warn_missing_include_dirs;\n+  register_include_chains (cpp_in, gfc_cpp_option.sysroot,\n+\t\t\t   gfc_cpp_option.prefix, gfc_cpp_option.multilib,\n+\t\t\t   gfc_cpp_option.standard_include_paths, cxx_stdinc,\n+\t\t\t   gfc_cpp_option.verbose);\n+}\n+\n void\n gfc_cpp_init_options (unsigned int decoded_options_count,\n \t\t      struct cl_decoded_option *decoded_options ATTRIBUTE_UNUSED)\n@@ -435,6 +451,37 @@ gfc_cpp_handle_option (size_t scode, const char *arg, int value ATTRIBUTE_UNUSED\n   return result;\n }\n \n+/* This function needs to be called before gfc_cpp_register_include_paths\n+   as the latter may diagnose missing include directories.  */\n+static void\n+gfc_cpp_init_cb (void)\n+{\n+  struct cpp_callbacks *cb;\n+\n+  cb = cpp_get_callbacks (cpp_in);\n+  cb->file_change = cb_file_change;\n+  cb->line_change = cb_line_change;\n+  cb->ident = cb_ident;\n+  cb->def_pragma = cb_def_pragma;\n+  cb->diagnostic = cb_cpp_diagnostic;\n+\n+  if (gfc_cpp_option.dump_includes)\n+    cb->include = cb_include;\n+\n+  if ((gfc_cpp_option.dump_macros == 'D')\n+      || (gfc_cpp_option.dump_macros == 'N'))\n+    {\n+      cb->define = cb_define;\n+      cb->undef  = cb_undef;\n+    }\n+\n+  if (gfc_cpp_option.dump_macros == 'U')\n+    {\n+      cb->before_define = dump_queued_macros;\n+      cb->used_define = cb_used_define;\n+      cb->used_undef = cb_used_undef;\n+    }\n+}\n \n void\n gfc_cpp_post_options (void)\n@@ -498,6 +545,7 @@ gfc_cpp_post_options (void)\n      way libcpp will do it, namely, with no charset conversion but with\n      skipping of a UTF-8 BOM if present.  */\n   diagnostic_initialize_input_context (global_dc, nullptr, true);\n+  gfc_cpp_init_cb ();\n \n   gfc_cpp_register_include_paths ();\n }\n@@ -506,32 +554,6 @@ gfc_cpp_post_options (void)\n void\n gfc_cpp_init_0 (void)\n {\n-  struct cpp_callbacks *cb;\n-\n-  cb = cpp_get_callbacks (cpp_in);\n-  cb->file_change = cb_file_change;\n-  cb->line_change = cb_line_change;\n-  cb->ident = cb_ident;\n-  cb->def_pragma = cb_def_pragma;\n-  cb->diagnostic = cb_cpp_diagnostic;\n-\n-  if (gfc_cpp_option.dump_includes)\n-    cb->include = cb_include;\n-\n-  if ((gfc_cpp_option.dump_macros == 'D')\n-      || (gfc_cpp_option.dump_macros == 'N'))\n-    {\n-      cb->define = cb_define;\n-      cb->undef  = cb_undef;\n-    }\n-\n-  if (gfc_cpp_option.dump_macros == 'U')\n-    {\n-      cb->before_define = dump_queued_macros;\n-      cb->used_define = cb_used_define;\n-      cb->used_undef = cb_used_undef;\n-    }\n-\n   /* Initialize the print structure.  Setting print.src_line to -1 here is\n      a trick to guarantee that the first token of the file will cause\n      a linemarker to be output by maybe_print_line.  */\n@@ -723,17 +745,6 @@ gfc_cpp_add_include_path_after (char *path, bool user_supplied)\n   add_path (path, INC_AFTER, cxx_aware, user_supplied);\n }\n \n-void\n-gfc_cpp_register_include_paths (void)\n-{\n-  int cxx_stdinc = 0;\n-  register_include_chains (cpp_in, gfc_cpp_option.sysroot,\n-\t\t\t   gfc_cpp_option.prefix, gfc_cpp_option.multilib,\n-\t\t\t   gfc_cpp_option.standard_include_paths, cxx_stdinc,\n-\t\t\t   gfc_cpp_option.verbose);\n-}\n-\n-\n \n static void scan_translation_unit_trad (cpp_reader *);\n static void account_for_newlines (const unsigned char *, size_t);\n@@ -1043,6 +1054,21 @@ cb_used_define (cpp_reader *pfile, location_t line ATTRIBUTE_UNUSED,\n   cpp_define_queue = q;\n }\n \n+/* Return the gcc option code associated with the reason for a cpp\n+   message, or 0 if none.  */\n+\n+static int\n+cb_cpp_diagnostic_cpp_option (enum cpp_warning_reason reason)\n+{\n+  const struct cpp_reason_option_codes_t *entry;\n+\n+  for (entry = cpp_reason_option_codes; entry->reason != CPP_W_NONE; entry++)\n+    if (entry->reason == reason)\n+      return entry->option_code;\n+  return 0;\n+}\n+\n+\n /* Callback from cpp_error for PFILE to print diagnostics from the\n    preprocessor.  The diagnostic is of type LEVEL, with REASON set\n    to the reason code if LEVEL is represents a warning, at location\n@@ -1089,8 +1115,8 @@ cb_cpp_diagnostic (cpp_reader *pfile ATTRIBUTE_UNUSED,\n     }\n   diagnostic_set_info_translated (&diagnostic, msg, ap,\n \t\t\t\t  richloc, dlevel);\n-  if (reason == CPP_W_WARNING_DIRECTIVE)\n-    diagnostic_override_option_index (&diagnostic, OPT_Wcpp);\n+  diagnostic_override_option_index (&diagnostic,\n+\t\t\t\t    cb_cpp_diagnostic_cpp_option (reason));\n   ret = diagnostic_report_diagnostic (global_dc, &diagnostic);\n   if (level == CPP_DL_WARNING_SYSHDR)\n     global_dc->dc_warn_system_headers = save_warn_system_headers;"}, {"sha": "5cb7e5a9c342181d85834be6c1b27c5de9766882", "filename": "gcc/fortran/cpp.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Fcpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Fcpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.h?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -50,6 +50,4 @@ void gfc_cpp_done (void);\n void gfc_cpp_add_include_path (char *path, bool user_supplied);\n void gfc_cpp_add_include_path_after (char *path, bool user_supplied);\n \n-void gfc_cpp_register_include_paths (void);\n-\n #endif /* GFC_CPP_H */"}, {"sha": "3c7a8434d07964e1762da7e20d75c13be126e991", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -3029,9 +3029,10 @@ match gfc_get_pdt_instance (gfc_actual_arglist *, gfc_symbol **,\n void gfc_scanner_done_1 (void);\n void gfc_scanner_init_1 (void);\n \n-void gfc_add_include_path (const char *, bool, bool, bool);\n+void gfc_add_include_path (const char *, bool, bool, bool, bool);\n void gfc_add_intrinsic_modules_path (const char *);\n void gfc_release_include_path (void);\n+void gfc_check_include_dirs (void);\n FILE *gfc_open_included_file (const char *, bool, bool);\n \n int gfc_at_end (void);"}, {"sha": "d789397515ade91d8c11f181083add439bb9a84e", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -159,14 +159,7 @@ gfc_init_options (unsigned int decoded_options_count,\n \t\t\t   | GFC_FPE_UNDERFLOW;\n   gfc_option.rtcheck = 0;\n \n-  /* ??? Wmissing-include-dirs is disabled by default in C/C++ but\n-     enabled by default in Fortran.  Ideally, we should express this\n-     in .opt, but that is not supported yet.  */\n-  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n-\t\t       cpp_warn_missing_include_dirs, 1);\n-\n   set_dec_flags (0);\n-\n   set_default_std_flags ();\n \n   /* Initialize cpp-related options.  */\n@@ -260,6 +253,13 @@ gfc_post_options (const char **pfilename)\n   char *source_path;\n   int i;\n \n+  /* This needs to be after the commandline has been processed.\n+     In Fortran, the options is by default enabled, in C/C++\n+     by default disabled.  */\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t       cpp_warn_missing_include_dirs, 1);\n+  gfc_check_include_dirs ();\n+\n   /* Finalize DEC flags.  */\n   post_dec_flags (flag_dec);\n \n@@ -339,10 +339,10 @@ gfc_post_options (const char **pfilename)\n       source_path = (char *) alloca (i + 1);\n       memcpy (source_path, canon_source_file, i);\n       source_path[i] = 0;\n-      gfc_add_include_path (source_path, true, true, true);\n+      gfc_add_include_path (source_path, true, true, true, false);\n     }\n   else\n-    gfc_add_include_path (\".\", true, true, true);\n+    gfc_add_include_path (\".\", true, true, true, false);\n \n   if (canon_source_file != gfc_source_file)\n     free (CONST_CAST (char *, canon_source_file));\n@@ -511,7 +511,7 @@ gfc_handle_module_path_options (const char *arg)\n   gfc_option.module_dir = XCNEWVEC (char, strlen (arg) + 2);\n   strcpy (gfc_option.module_dir, arg);\n \n-  gfc_add_include_path (gfc_option.module_dir, true, false, true);\n+  gfc_add_include_path (gfc_option.module_dir, true, false, true, true);\n \n   strcat (gfc_option.module_dir, \"/\");\n }\n@@ -690,7 +690,7 @@ gfc_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n \t with intrinsic modules.  Do no warn because during testing\n \t without an installed compiler, we would get lots of bogus\n \t warnings for a missing include directory.  */\n-      gfc_add_include_path (arg, false, false, false);\n+      gfc_add_include_path (arg, false, false, false, true);\n \n       gfc_add_intrinsic_modules_path (arg);\n       break;\n@@ -737,7 +737,7 @@ gfc_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       break;\n \n     case OPT_I:\n-      gfc_add_include_path (arg, true, false, true);\n+      gfc_add_include_path (arg, true, false, true, true);\n       break;\n \n     case OPT_J:"}, {"sha": "6fe74bd5b8d26b8962d9d90a9f40fe6d207c01b5", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 62, "deletions": 20, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -298,17 +298,69 @@ gfc_scanner_done_1 (void)\n     }\n }\n \n+static bool\n+gfc_do_check_include_dir (const char *path, bool warn)\n+{\n+  struct stat st;\n+  if (stat (path, &st))\n+    {\n+      if (errno != ENOENT)\n+\tgfc_warning_now (0, \"Include directory %qs: %s\",\n+\t\t\t path, xstrerror(errno));\n+      else if (warn && !gfc_cpp_enabled ())\n+\t  gfc_warning_now (OPT_Wmissing_include_dirs,\n+\t\t\t     \"Nonexistent include directory %qs\", path);\n+      return false;\n+    }\n+  else if (!S_ISDIR (st.st_mode))\n+    {\n+      gfc_fatal_error (\"%qs is not a directory\", path);\n+      return false;\n+    }\n+  return true;\n+}\n+\n+/* In order that -W(no-)missing-include-dirs works, the diagnostic can only be\n+   run after processing the commandline.  */\n+static void\n+gfc_do_check_include_dirs (gfc_directorylist **list)\n+{\n+  gfc_directorylist *prev, *q, *n;\n+  prev = NULL;\n+  n = *list;\n+  while (n)\n+    {\n+      q = n; n = n->next;\n+      if (gfc_do_check_include_dir (q->path, q->warn))\n+\t{\n+\t  prev = q;\n+\t  continue;\n+\t}\n+      if (prev == NULL)\n+\t*list = n;\n+      else\n+\tprev->next = n;\n+      free (q->path);\n+      free (q);\n+    }\n+}\n+\n+void\n+gfc_check_include_dirs ()\n+{\n+  gfc_do_check_include_dirs (&include_dirs);\n+  gfc_do_check_include_dirs (&intrinsic_modules_dirs);\n+}\n \n /* Adds path to the list pointed to by list.  */\n \n static void\n add_path_to_list (gfc_directorylist **list, const char *path,\n-\t\t  bool use_for_modules, bool head, bool warn)\n+\t\t  bool use_for_modules, bool head, bool warn, bool defer_warn)\n {\n   gfc_directorylist *dir;\n   const char *p;\n   char *q;\n-  struct stat st;\n   size_t len;\n   int i;\n   \n@@ -326,21 +378,8 @@ add_path_to_list (gfc_directorylist **list, const char *path,\n   while (i >=0 && IS_DIR_SEPARATOR (q[i]))\n     q[i--] = '\\0';\n \n-  if (stat (q, &st))\n-    {\n-      if (errno != ENOENT)\n-\tgfc_warning_now (0, \"Include directory %qs: %s\", path,\n-\t\t\t xstrerror(errno));\n-      else if (warn)\n-\tgfc_warning_now (OPT_Wmissing_include_dirs,\n-\t\t\t \"Nonexistent include directory %qs\", path);\n-      return;\n-    }\n-  else if (!S_ISDIR (st.st_mode))\n-    {\n-      gfc_fatal_error (\"%qs is not a directory\", path);\n-      return;\n-    }\n+  if (!defer_warn && !gfc_do_check_include_dir (q, warn))\n+    return;\n \n   if (head || *list == NULL)\n     {\n@@ -362,17 +401,20 @@ add_path_to_list (gfc_directorylist **list, const char *path,\n   if (head)\n     *list = dir;\n   dir->use_for_modules = use_for_modules;\n+  dir->warn = warn;\n   dir->path = XCNEWVEC (char, strlen (p) + 2);\n   strcpy (dir->path, p);\n   strcat (dir->path, \"/\");\t/* make '/' last character */\n }\n \n+/* defer_warn is set to true while parsing the commandline.  */\n \n void\n gfc_add_include_path (const char *path, bool use_for_modules, bool file_dir,\n-\t\t      bool warn)\n+\t\t      bool warn, bool defer_warn)\n {\n-  add_path_to_list (&include_dirs, path, use_for_modules, file_dir, warn);\n+  add_path_to_list (&include_dirs, path, use_for_modules, file_dir, warn,\n+\t\t    defer_warn);\n \n   /* For '#include \"...\"' these directories are automatically searched.  */\n   if (!file_dir)\n@@ -383,7 +425,7 @@ gfc_add_include_path (const char *path, bool use_for_modules, bool file_dir,\n void\n gfc_add_intrinsic_modules_path (const char *path)\n {\n-  add_path_to_list (&intrinsic_modules_dirs, path, true, false, false);\n+  add_path_to_list (&intrinsic_modules_dirs, path, true, false, false, false);\n }\n \n "}, {"sha": "8782fe6ccc543e74560085e49a5210fe79cd1e22", "filename": "gcc/fortran/scanner.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Fscanner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ffortran%2Fscanner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.h?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -23,8 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n typedef struct gfc_directorylist\n {\n   char *path;\n-  bool use_for_modules;\n   struct gfc_directorylist *next;\n+  bool use_for_modules, warn;\n }\n gfc_directorylist;\n "}, {"sha": "b306b2c813b9f2179476d24d7096f51759f4bdf2", "filename": "gcc/testsuite/gfortran.dg/include_14.f90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_14.f90?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -0,0 +1,5 @@\n+! { dg-additional-options \"-cpp -idirafter /fdaf/ -I bar\" }\n+end\n+\n+! { dg-warning \"/fdaf/: No such file or directory\" \"\" { target *-*-* } 0 }\n+! { dg-warning \"bar: No such file or directory\" \"\" { target *-*-* } 0 }"}, {"sha": "4944282f931bf2fcdb252c7fcce012bffd8e731c", "filename": "gcc/testsuite/gfortran.dg/include_15.f90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_15.f90?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -0,0 +1,5 @@\n+! { dg-additional-options \"-cpp -idirafter /fdaf/ -I bar -Wmissing-include-dirs\" }\n+end\n+\n+! { dg-warning \"/fdaf/: No such file or directory\" \"\" { target *-*-* } 0 }\n+! { dg-warning \"bar: No such file or directory\" \"\" { target *-*-* } 0 }"}, {"sha": "45794f28e735a35957db69f32d4d2a583ba86055", "filename": "gcc/testsuite/gfortran.dg/include_16.f90", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_16.f90?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -0,0 +1,2 @@\n+! { dg-additional-options \"-cpp -idirafter /fdaf/ -I bar -Wno-missing-include-dirs\" }\n+end"}, {"sha": "0ed5c86d323ccd769306f153a6f55fa421d4c881", "filename": "gcc/testsuite/gfortran.dg/include_17.f90", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_17.f90?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -0,0 +1,4 @@\n+! { dg-do compile }\n+! { dg-options \"-I foo-bar -Wno-missing-include-dirs\" }\n+end \n+"}, {"sha": "ca69df382fede4c890f5541127bdcd92b00c3cd9", "filename": "gcc/testsuite/gfortran.dg/include_18.f90", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_18.f90?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -0,0 +1,3 @@\n+! { dg-do compile }\n+! { dg-options \"-I nothere -Wno-missing-include-dirs\" }\n+end "}, {"sha": "2a068174b7e67a4ca4dd72f28df4d943b5681625", "filename": "gcc/testsuite/gfortran.dg/include_19.f90", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_19.f90?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -0,0 +1,4 @@\n+! { dg-do compile }\n+! { dg-options \"-J foobar/foo -Wno-missing-include-dirs\" }\n+program main\n+end program main"}, {"sha": "4f8fdc6b786b3fd43fccd6f08707117906b6cba0", "filename": "gcc/testsuite/gfortran.dg/include_20.f90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_20.f90?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do compile }\n+! { dg-options \"-J foobar/foo\" }\n+program main\n+end program main\n+! { dg-warning \"Nonexistent include directory\" \"\" { target *-*-* } 0 }"}, {"sha": "40bc5986f7b0c933f49e5afdb47a825754055d3f", "filename": "gcc/testsuite/gfortran.dg/include_21.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_21.f90?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -0,0 +1,26 @@\n+# 1 \"../../../trunk/libgfortran/generated/_abs_c4.F90\"\n+# 1 \"C:\\\\msys\\\\1.0.10\\\\home\\\\FX\\\\ibin\\\\i586-pc-mingw32\\\\libgfortran//\"\n+# 1 \"<built-in>\"\n+# 1 \"<command-line>\"\n+# 1 \"../../../trunk/libgfortran/generated/_abs_c4.F90\"\n+!   Comment here\n+\n+# 1 \"./config.h\" 1\n+\n+# 37 \"../../../trunk/libgfortran/generated/_abs_c4.F90\" 2\n+\n+# 1 \"./kinds.inc\" 1\n+# 38 \"../../../trunk/libgfortran/generated/_abs_c4.F90\" 2\n+\n+# 1 \"./c99_protos.inc\" 1\n+# 39 \"../../../trunk/libgfortran/generated/_abs_c4.F90\" 2\n+\n+elemental function abs_c4 (parm)\n+   complex (kind=4), intent (in) :: parm\n+   real (kind=4) :: abs_c4\n+\n+   abs_c4 = abs (parm)\n+end function\n+\n+! { dg-do compile }\n+! { dg-options \"-fpreprocessed -g3 -Wno-missing-include-dirs\" }"}, {"sha": "3e3be1b7bd5ab515379389732dc7faa64c858d09", "filename": "gcc/testsuite/gfortran.dg/include_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_6.f90?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n ! { dg-options \"-I gfortran.log\" }\n-! { dg-error \"is not a directory\" \"\" { target *-*-* } 0 }\n+! { dg-warning \"Include directory 'gfortran.log/': Not a directory\" \"\" { target *-*-* } 0 }\n ! { dg-prune-output \"compilation terminated.\" }\n end \n "}, {"sha": "350159aa4fed1b6987a7a0c84ff5188642d78d0a", "filename": "libgfortran/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -5985,7 +5985,7 @@ fi\n \n # Add -Wall -fno-repack-arrays -fno-underscoring if we are using GCC.\n if test \"x$GCC\" = \"xyes\"; then\n-  AM_FCFLAGS=\"-I . -Wall -Werror -fimplicit-none -fno-repack-arrays -fno-underscoring\"\n+  AM_FCFLAGS=\"-I . -Wall -Werror -fimplicit-none -fno-repack-arrays -fno-underscoring -Wno-missing-include-dirs\"\n   ## We like to use C11 and C99 routines when available.  This makes\n   ## sure that\n   ## __STDC_VERSION__ is set such that libc includes make them available."}, {"sha": "a3550b4e5d07d802aa346fb34992577aa713dc3e", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -146,7 +146,7 @@ AM_PROG_CC_C_O\n \n # Add -Wall -fno-repack-arrays -fno-underscoring if we are using GCC.\n if test \"x$GCC\" = \"xyes\"; then\n-  AM_FCFLAGS=\"-I . -Wall -Werror -fimplicit-none -fno-repack-arrays -fno-underscoring\"\n+  AM_FCFLAGS=\"-I . -Wall -Werror -fimplicit-none -fno-repack-arrays -fno-underscoring -Wno-missing-include-dirs\"\n   ## We like to use C11 and C99 routines when available.  This makes\n   ## sure that\n   ## __STDC_VERSION__ is set such that libc includes make them available."}, {"sha": "912dd2a743e89fec4378e75943a1e377e96cb87f", "filename": "libgomp/testsuite/libgomp.fortran/fortran.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -20,6 +20,9 @@ dg-init\n \n # Turn on OpenMP.\n lappend ALWAYS_CFLAGS \"additional_flags=-fopenmp\"\n+# Silence warnings due to explicitly passed but nonexisting\n+# -isystem <instdir>/target>/{sys-,}include (gfortran warns by default)\n+lappend ALWAYS_CFLAGS \"additional_flags=-Wno-missing-include-dirs\"\n \n if { $blddir != \"\" } {\n     set lang_source_re {^.*\\.[fF](|90|95|03|08)$}"}, {"sha": "22e91eca256f4c4ddf0becae128a0d1db426d8d7", "filename": "libgomp/testsuite/libgomp.oacc-fortran/fortran.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ea5c02cef7f000e66d1af22b066c2c1cda047/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ea5c02cef7f000e66d1af22b066c2c1cda047/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp?ref=417ea5c02cef7f000e66d1af22b066c2c1cda047", "patch": "@@ -22,6 +22,9 @@ dg-init\n \n # Turn on OpenACC.\n lappend ALWAYS_CFLAGS \"additional_flags=-fopenacc\"\n+# Silence warnings due to explicitly passed but nonexisting\n+# -isystem <instdir>/target>/{sys-,}include (gfortran warns by default)\n+lappend ALWAYS_CFLAGS \"additional_flags=-Wno-missing-include-dirs\"\n \n if { $blddir != \"\" } {\n     set lang_source_re {^.*\\.[fF](|90|95|03|08)$}"}]}