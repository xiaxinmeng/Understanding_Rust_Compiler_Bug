{"sha": "4ffbff5906ce6291c39852f0856b5f6a60a3d3e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZmYmZmNTkwNmNlNjI5MWMzOTg1MmYwODU2YjVmNmE2MGEzZDNlMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-01-18T13:23:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-01-18T13:23:23Z"}, "message": "C++ ABI change: destroy value arguments in caller.\n\n        * calls.c (initialize_argument_information): Pass the address of\n        the TARGET_EXPR temporary rather than storing it into another.\n\nFrom-SVN: r48983", "tree": {"sha": "de62a7ffd9e1ccdbb6bca0943f03d7fb326127a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de62a7ffd9e1ccdbb6bca0943f03d7fb326127a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ffbff5906ce6291c39852f0856b5f6a60a3d3e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ffbff5906ce6291c39852f0856b5f6a60a3d3e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ffbff5906ce6291c39852f0856b5f6a60a3d3e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ffbff5906ce6291c39852f0856b5f6a60a3d3e1/comments", "author": null, "committer": null, "parents": [{"sha": "1c556b2274cfd0e18f8a350f3e385bb857d56856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c556b2274cfd0e18f8a350f3e385bb857d56856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c556b2274cfd0e18f8a350f3e385bb857d56856"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "24e81e387e55d35ca60d529e26aef503abd4ff41", "filename": "gcc/testsuite/g++.dg/init/elide1.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbff5906ce6291c39852f0856b5f6a60a3d3e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbff5906ce6291c39852f0856b5f6a60a3d3e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide1.C?ref=4ffbff5906ce6291c39852f0856b5f6a60a3d3e1", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do run }\n+\n+// Test that the destructor for a temporary passed by value isn't run\n+// until end of full-expression, as per [class.copy]:\n+\n+// Whenever a temporary class object is copied using a copy  constructor,\n+// and  this  object  and  the copy have the same cv-unqualified type, an\n+// implementation is permitted to treat the original and the copy as  two\n+// different  ways of referring to the same object and not perform a copy\n+// at all, even if the class copy constructor  or  destructor  have  side\n+// effects....                                       In these cases,  the\n+// object  is  destroyed  at the later of times when the original and the\n+// copy would have been destroyed without the optimization.\n+\n+// Here, the temporary would be destroyed later than the parm, so either we\n+// must suppress the optimization in this case or destroy value parms in the\n+// caller.\n+\n+int d;\n+\n+struct A {\n+  A () { }\n+  A (const A&) { }\n+  ~A() { ++d; }\n+};\n+\n+void f (A a) { }\n+\n+int main ()\n+{\n+  int r;\n+  f (A ()), r = d;\n+\n+  if (r < d && d)\n+    return 0;\n+  else\n+    return 1;\n+}"}]}