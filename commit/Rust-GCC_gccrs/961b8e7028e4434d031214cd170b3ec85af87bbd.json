{"sha": "961b8e7028e4434d031214cd170b3ec85af87bbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYxYjhlNzAyOGU0NDM0ZDAzMTIxNGNkMTcwYjNlYzg1YWY4N2JiZA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2001-10-26T01:53:56Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-10-26T01:53:56Z"}, "message": "expr.c (expand_java_field_op): Don't special-case references to java.lang.PRIMTYPE.TYPE.\n\n\t* expr.c (expand_java_field_op): Don't special-case references to\n\tjava.lang.PRIMTYPE.TYPE.\n\t(build_primtype_type_ref): Removed.\n\t* java-tree.h (build_primtype_type_ref): Remove prototype.\n\t* parse.y (maybe_build_primttype_type_ref): Removed.\n\t(complete_function_arguments): Don't special-case references to\n\tjava.lang.PRIMTYPE.TYPE.\n\t(patch_assignment): Likewise.\n\t(array_constructor_check_entry): Likewise.\n\nFrom-SVN: r46522", "tree": {"sha": "91722ffb7b8a13491652f4adbc7c3b762d82a185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91722ffb7b8a13491652f4adbc7c3b762d82a185"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/961b8e7028e4434d031214cd170b3ec85af87bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961b8e7028e4434d031214cd170b3ec85af87bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/961b8e7028e4434d031214cd170b3ec85af87bbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961b8e7028e4434d031214cd170b3ec85af87bbd/comments", "author": null, "committer": null, "parents": [{"sha": "839f8204241b26ffd49b18e86af8c8d2c396e923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839f8204241b26ffd49b18e86af8c8d2c396e923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839f8204241b26ffd49b18e86af8c8d2c396e923"}], "stats": {"total": 102, "additions": 14, "deletions": 88}, "files": [{"sha": "7b6b4efa5f28c5e83c301b496f14d2faaa3ce64f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961b8e7028e4434d031214cd170b3ec85af87bbd/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961b8e7028e4434d031214cd170b3ec85af87bbd/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=961b8e7028e4434d031214cd170b3ec85af87bbd", "patch": "@@ -1,3 +1,15 @@\n+2001-10-25  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* expr.c (expand_java_field_op): Don't special-case references to\n+\tjava.lang.PRIMTYPE.TYPE.\n+\t(build_primtype_type_ref): Removed.\n+\t* java-tree.h (build_primtype_type_ref): Remove prototype.\n+\t* parse.y (maybe_build_primttype_type_ref): Removed.\n+\t(complete_function_arguments): Don't special-case references to\n+\tjava.lang.PRIMTYPE.TYPE.\n+\t(patch_assignment): Likewise.\n+\t(array_constructor_check_entry): Likewise.\n+\n 2001-10-24  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* mangle.c (static tree compression_table): Fixed leading comment."}, {"sha": "cf9bef46bf37ab3c7c287e268b917bbdbd3bd7a5", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961b8e7028e4434d031214cd170b3ec85af87bbd/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961b8e7028e4434d031214cd170b3ec85af87bbd/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=961b8e7028e4434d031214cd170b3ec85af87bbd", "patch": "@@ -2266,22 +2266,6 @@ expand_java_field_op (is_static, is_putting, field_ref_index)\n       return;\n     }\n \n-  /* Inline references to java.lang.PRIMTYPE.TYPE.\n-     In addition to being a useful (minor) optimization,\n-     this is also needed to avoid circularities in the implementation\n-     of these fields in libjava. */\n-  if (field_name == TYPE_identifier_node && ! is_putting\n-      && ! flag_emit_class_files && field_type == class_ptr_type\n-      && strncmp (self_name, \"java.lang.\", 10) == 0)\n-    {\n-      tree typ = build_primtype_type_ref (self_name);\n-      if (typ)\n-\t{\n-\t  push_value (typ);\n-\t  return;\n-\t}\n-    }\n-\n   field_ref = build_field_ref (field_ref, self_type, field_name);\n   if (is_static)\n     field_ref = build_class_init (self_type, field_ref);\n@@ -2313,38 +2297,6 @@ expand_java_field_op (is_static, is_putting, field_ref_index)\n     push_value (field_ref);\n }\n \n-tree\n-build_primtype_type_ref (self_name)\n-    const char *self_name;\n-{\n-  const char *class_name = self_name+10;\n-  tree typ;\n-  if (strncmp(class_name, \"Byte\", 4) == 0)\n-    typ = byte_type_node;\n-  else if (strncmp(class_name, \"Short\", 5) == 0)\n-    typ = short_type_node;\n-  else if (strncmp(class_name, \"Integer\", 7) == 0)\n-    typ = int_type_node;\n-  else if (strncmp(class_name, \"Long\", 4) == 0)\n-    typ = long_type_node;\n-  else if (strncmp(class_name, \"Float\", 5) == 0)\n-    typ = float_type_node;\n-  else if (strncmp(class_name, \"Double\", 6) == 0)\n-    typ = double_type_node;\n-  else if (strncmp(class_name, \"Boolean\", 7) == 0)\n-    typ = boolean_type_node;\n-  else if (strncmp(class_name, \"Char\", 4) == 0)\n-    typ = char_type_node;\n-  else if (strncmp(class_name, \"Void\", 4) == 0)\n-    typ = void_type_node;\n-  else\n-    typ = NULL_TREE;\n-  if (typ != NULL_TREE)\n-    return build_class_ref (typ);\n-  else\n-    return NULL_TREE;\n-}\n-\n void\n load_type_state (label)\n      tree label;"}, {"sha": "132cd719730bb0c5d0d27738115c5c6752b1be1a", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961b8e7028e4434d031214cd170b3ec85af87bbd/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961b8e7028e4434d031214cd170b3ec85af87bbd/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=961b8e7028e4434d031214cd170b3ec85af87bbd", "patch": "@@ -1102,7 +1102,6 @@ extern void write_classfile PARAMS ((tree));\n extern char *print_int_node PARAMS ((tree));\n extern void parse_error_context PARAMS ((tree cl, const char *, ...))\n   ATTRIBUTE_PRINTF_2;\n-extern tree build_primtype_type_ref PARAMS ((const char *));\n extern void finish_class PARAMS ((void));\n extern void java_layout_seen_class_methods PARAMS ((void));\n extern unsigned int check_for_initialization PARAMS ((tree));"}, {"sha": "089d2c30f82c997744b129397a44d6be06301247", "filename": "gcc/java/parse.y", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961b8e7028e4434d031214cd170b3ec85af87bbd/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961b8e7028e4434d031214cd170b3ec85af87bbd/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=961b8e7028e4434d031214cd170b3ec85af87bbd", "patch": "@@ -258,7 +258,6 @@ static int check_method_redefinition PARAMS ((tree, tree));\n static int check_method_types_complete PARAMS ((tree));\n static void java_check_regular_methods PARAMS ((tree));\n static void java_check_abstract_methods PARAMS ((tree));\n-static tree maybe_build_primttype_type_ref PARAMS ((tree, tree));\n static void unreachable_stmt_error PARAMS ((tree));\n static tree find_expr_with_wfl PARAMS ((tree));\n static void missing_return_error PARAMS ((tree));\n@@ -3650,7 +3649,7 @@ find_as_inner_class (enclosing, name, cl)\n   /* Otherwise, create a qual for the other part of the resolution. */\n   else\n     qual = build_tree_list (build_expr_wfl (name, NULL, 0, 0), NULL_TREE);\n-\n+  \n   return find_as_inner_class_do (qual, enclosing);\n }\n \n@@ -12247,8 +12246,6 @@ complete_function_arguments (node)\n \t `+' operator. Build `parm.toString()' and expand it. */\n       if ((temp = patch_string (parm)))\n \tparm = temp;\n-      /* Inline PRIMTYPE.TYPE read access */\n-      parm = maybe_build_primttype_type_ref (parm, wfl);\n \n       TREE_VALUE (cn) = parm;\n     }\n@@ -12790,33 +12787,6 @@ check_final_assignment (lvalue, wfl)\n   return 1;\n }\n \n-/* Inline references to java.lang.PRIMTYPE.TYPE when accessed in\n-   read. This is needed to avoid circularities in the implementation\n-   of these fields in libjava. */\n-\n-static tree\n-maybe_build_primttype_type_ref (rhs, wfl)\n-    tree rhs, wfl;\n-{\n-  tree to_return = NULL_TREE;\n-  tree rhs_type = TREE_TYPE (rhs);\n-  if (TREE_CODE (rhs) == COMPOUND_EXPR)\n-    {\n-      tree n = TREE_OPERAND (rhs, 1);\n-      if (TREE_CODE (n) == VAR_DECL \n-\t  && DECL_NAME (n) == TYPE_identifier_node\n-\t  && rhs_type == class_ptr_type\n-\t  && TREE_CODE (wfl) == EXPR_WITH_FILE_LOCATION\n-\t  && TREE_CODE (EXPR_WFL_NODE (wfl)) == IDENTIFIER_NODE)\n-\t{\n-\t  const char *self_name = IDENTIFIER_POINTER (EXPR_WFL_NODE (wfl));\n-\t  if (!strncmp (self_name, \"java.lang.\", 10))\n-\t    to_return = build_primtype_type_ref (self_name);\n-\t}\n-    }\n-  return (to_return ? to_return : rhs );\n-}\n-\n /* 15.25 Assignment operators. */\n \n static tree\n@@ -12927,10 +12897,6 @@ patch_assignment (node, wfl_op1, wfl_op2)\n       error_found = 1;\n     }\n \n-  /* Inline read access to java.lang.PRIMTYPE.TYPE */\n-  if (new_rhs)\n-    new_rhs = maybe_build_primttype_type_ref (new_rhs, wfl_op2);\n-\n   if (error_found)\n     return error_mark_node;\n \n@@ -14875,10 +14841,7 @@ array_constructor_check_entry (type, entry)\n     }\n   \n   if (new_value)\n-    {\n-      new_value = maybe_build_primttype_type_ref (new_value, wfl_value);\n-      TREE_VALUE (entry) = new_value;\n-    }\n+    TREE_VALUE (entry) = new_value;\n \n   if (array_type_string)\n     free (array_type_string);"}]}