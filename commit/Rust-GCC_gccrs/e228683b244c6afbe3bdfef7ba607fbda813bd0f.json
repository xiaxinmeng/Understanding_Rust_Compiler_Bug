{"sha": "e228683b244c6afbe3bdfef7ba607fbda813bd0f", "node_id": "C_kwDOANBUbNoAKGUyMjg2ODNiMjQ0YzZhZmJlM2JkZmVmN2JhNjA3ZmJkYTgxM2JkMGY", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-08-22T07:49:52Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-08-22T07:49:52Z"}, "message": "lto-wrapper.cc: Delete offload_names temp files in case of error [PR106686]\n\nUsually, the caller takes care of the .o files for the offload compilers\n(suffix: \".target.o\"). However, if an error occurs during processing\n(e.g. fatal error by lto1), they were not deleted.\n\ngcc/ChangeLog:\n\n\tPR lto/106686\n\t* lto-wrapper.cc (free_array_of_ptrs): Move before tool_cleanup.\n\t(tool_cleanup): Unlink offload_names.\n\t(compile_offload_image): Take filename argument to set it early.\n\t(compile_images_for_offload_targets): Update call; set\n\toffload_names to NULL after freeing the array.", "tree": {"sha": "e05ef5e10ea703a758b1ba6e4ad0f50c723d9124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e05ef5e10ea703a758b1ba6e4ad0f50c723d9124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e228683b244c6afbe3bdfef7ba607fbda813bd0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e228683b244c6afbe3bdfef7ba607fbda813bd0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e228683b244c6afbe3bdfef7ba607fbda813bd0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e228683b244c6afbe3bdfef7ba607fbda813bd0f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c77fae1ca796d6ea06d5cd437909905c3d3d771c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77fae1ca796d6ea06d5cd437909905c3d3d771c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77fae1ca796d6ea06d5cd437909905c3d3d771c"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "9a764702ffc677e8cef71c0fd08fd43ca73c142f", "filename": "gcc/lto-wrapper.cc", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e228683b244c6afbe3bdfef7ba607fbda813bd0f/gcc%2Flto-wrapper.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e228683b244c6afbe3bdfef7ba607fbda813bd0f/gcc%2Flto-wrapper.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.cc?ref=e228683b244c6afbe3bdfef7ba607fbda813bd0f", "patch": "@@ -89,6 +89,25 @@ static bool xassembler_options_error = false;\n \n const char tool_name[] = \"lto-wrapper\";\n \n+/* Auxiliary function that frees elements of PTR and PTR itself.\n+   N is number of elements to be freed.  If PTR is NULL, nothing is freed.\n+   If an element is NULL, subsequent elements are not freed.  */\n+\n+static void **\n+free_array_of_ptrs (void **ptr, unsigned n)\n+{\n+  if (!ptr)\n+    return NULL;\n+  for (unsigned i = 0; i < n; i++)\n+    {\n+      if (!ptr[i])\n+\tbreak;\n+      free (ptr[i]);\n+    }\n+  free (ptr);\n+  return NULL;\n+}\n+\n /* Delete tempfiles.  Called from utils_cleanup.  */\n \n void\n@@ -114,6 +133,12 @@ tool_cleanup (bool)\n       if (output_names[i])\n \tmaybe_unlink (output_names[i]);\n     }\n+  if (offload_names)\n+    {\n+      for (i = 0; offload_names[i]; i++)\n+\tmaybe_unlink (offload_names[i]);\n+      free_array_of_ptrs ((void **) offload_names, i);\n+    }\n }\n \n static void\n@@ -626,25 +651,6 @@ merge_and_complain (vec<cl_decoded_option> &decoded_options,\n       }\n }\n \n-/* Auxiliary function that frees elements of PTR and PTR itself.\n-   N is number of elements to be freed.  If PTR is NULL, nothing is freed.\n-   If an element is NULL, subsequent elements are not freed.  */\n-\n-static void **\n-free_array_of_ptrs (void **ptr, unsigned n)\n-{\n-  if (!ptr)\n-    return NULL;\n-  for (unsigned i = 0; i < n; i++)\n-    {\n-      if (!ptr[i])\n-\tbreak;\n-      free (ptr[i]);\n-    }\n-  free (ptr);\n-  return NULL;\n-}\n-\n /* Parse STR, saving found tokens into PVALUES and return their number.\n    Tokens are assumed to be delimited by ':'.  If APPEND is non-null,\n    append it to every token we find.  */\n@@ -908,20 +914,21 @@ access_check (const char *name, int mode)\n /* Prepare a target image for offload TARGET, using mkoffload tool from\n    COMPILER_PATH.  Return the name of the resultant object file.  */\n \n-static char *\n+static const char *\n compile_offload_image (const char *target, const char *compiler_path,\n \t\t       unsigned in_argc, char *in_argv[],\n \t\t       vec<cl_decoded_option> compiler_opts,\n-\t\t       vec<cl_decoded_option> linker_opts)\n+\t\t       vec<cl_decoded_option> linker_opts,\n+\t\t       char **filename)\n {\n-  char *filename = NULL;\n   char *dumpbase;\n   char **argv;\n   char *suffix\n     = XALLOCAVEC (char, sizeof (\"/accel//mkoffload\") + strlen (target));\n   strcpy (suffix, \"/accel/\");\n   strcat (suffix, target);\n   strcat (suffix, \"/mkoffload\");\n+  *filename = NULL;\n \n   char **paths = NULL;\n   unsigned n_paths = parse_env_var (compiler_path, &paths, suffix);\n@@ -950,9 +957,9 @@ compile_offload_image (const char *target, const char *compiler_path,\n \n   /* Generate temporary output file name.  */\n   if (save_temps)\n-    filename = concat (dumpbase, \".o\", NULL);\n+    *filename = concat (dumpbase, \".o\", NULL);\n   else\n-    filename = make_temp_file (\".target.o\");\n+    *filename = make_temp_file (\".target.o\");\n \n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n@@ -962,7 +969,7 @@ compile_offload_image (const char *target, const char *compiler_path,\n   if (verbose)\n     obstack_ptr_grow (&argv_obstack, \"-v\");\n   obstack_ptr_grow (&argv_obstack, \"-o\");\n-  obstack_ptr_grow (&argv_obstack, filename);\n+  obstack_ptr_grow (&argv_obstack, *filename);\n \n   /* Append names of input object files.  */\n   for (unsigned i = 0; i < in_argc; i++)\n@@ -986,7 +993,7 @@ compile_offload_image (const char *target, const char *compiler_path,\n   obstack_free (&argv_obstack, NULL);\n \n   free_array_of_ptrs ((void **) paths, n_paths);\n-  return filename;\n+  return *filename;\n }\n \n \n@@ -1016,10 +1023,9 @@ compile_images_for_offload_targets (unsigned in_argc, char *in_argv[],\n   offload_names = XCNEWVEC (char *, num_targets + 1);\n   for (unsigned i = 0; i < num_targets; i++)\n     {\n-      offload_names[next_name_entry]\n-\t= compile_offload_image (names[i], compiler_path, in_argc, in_argv,\n-\t\t\t\t compiler_opts, linker_opts);\n-      if (!offload_names[next_name_entry])\n+      if (!compile_offload_image (names[i], compiler_path, in_argc, in_argv,\n+\t\t\t\t  compiler_opts, linker_opts,\n+\t\t\t\t  &offload_names[next_name_entry]))\n #if OFFLOAD_DEFAULTED\n \tcontinue;\n #else\n@@ -1778,6 +1784,7 @@ run_gcc (unsigned argc, char *argv[])\n \t  for (i = 0; offload_names[i]; i++)\n \t    printf (\"%s\\n\", offload_names[i]);\n \t  free_array_of_ptrs ((void **) offload_names, i);\n+\t  offload_names = NULL;\n \t}\n     }\n "}]}