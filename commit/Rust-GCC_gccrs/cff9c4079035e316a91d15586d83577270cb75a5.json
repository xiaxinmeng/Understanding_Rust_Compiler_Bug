{"sha": "cff9c4079035e316a91d15586d83577270cb75a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmOWM0MDc5MDM1ZTMxNmE5MWQxNTU4NmQ4MzU3NzI3MGNiNzVhNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-08-02T18:15:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-08-02T18:15:29Z"}, "message": "(lvalue_p, case BIND_EXPR, RTL_EXPR): Return 1 if array.\n\nFrom-SVN: r14626", "tree": {"sha": "254401e3dc411a4ab59801fde3ebebc0ae79d228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/254401e3dc411a4ab59801fde3ebebc0ae79d228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff9c4079035e316a91d15586d83577270cb75a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff9c4079035e316a91d15586d83577270cb75a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff9c4079035e316a91d15586d83577270cb75a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff9c4079035e316a91d15586d83577270cb75a5/comments", "author": null, "committer": null, "parents": [{"sha": "5a03c8c4016a7a702d6de2d308bca153a6befb5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a03c8c4016a7a702d6de2d308bca153a6befb5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a03c8c4016a7a702d6de2d308bca153a6befb5d"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "b3b0f1049e3ac559e21e9d2c45c2b2758fcd6941", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff9c4079035e316a91d15586d83577270cb75a5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff9c4079035e316a91d15586d83577270cb75a5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=cff9c4079035e316a91d15586d83577270cb75a5", "patch": "@@ -1016,19 +1016,19 @@ default_conversion (exp)\n   if (TREE_CODE (exp) == COMPONENT_REF\n       && DECL_BIT_FIELD (TREE_OPERAND (exp, 1)))\n     {\n-    tree width = DECL_SIZE (TREE_OPERAND (exp, 1));\n-    HOST_WIDE_INT low = TREE_INT_CST_LOW (width);\n+      tree width = DECL_SIZE (TREE_OPERAND (exp, 1));\n+      HOST_WIDE_INT low = TREE_INT_CST_LOW (width);\n \n-    /* If it's thinner than an int, promote it like a\n-       C_PROMOTING_INTEGER_TYPE_P, otherwise leave it alone.  */\n+      /* If it's thinner than an int, promote it like a\n+\t C_PROMOTING_INTEGER_TYPE_P, otherwise leave it alone.  */\n \n-    if (low < TYPE_PRECISION (integer_type_node))\n-      {\n-\tif ( flag_traditional && TREE_UNSIGNED (type))\n-\t  return convert (unsigned_type_node, exp);\n-\telse\n-\t  return convert (integer_type_node, exp);\n-      }\n+      if (low < TYPE_PRECISION (integer_type_node))\n+\t{\n+\t  if (flag_traditional && TREE_UNSIGNED (type))\n+\t    return convert (unsigned_type_node, exp);\n+\t  else\n+\t    return convert (integer_type_node, exp);\n+\t}\n     }\n \n   if (C_PROMOTING_INTEGER_TYPE_P (type))\n@@ -1085,7 +1085,7 @@ default_conversion (exp)\n \t\t\tTREE_OPERAND (exp, 0), op1);\n \t}\n \n-      if (!lvalue_p (exp)\n+      if (! lvalue_p (exp)\n \t  && ! (TREE_CODE (exp) == CONSTRUCTOR && TREE_STATIC (exp)))\n \t{\n \t  error (\"invalid use of non-lvalue array\");\n@@ -3183,6 +3183,11 @@ lvalue_p (ref)\n \t  && TREE_CODE (TREE_TYPE (ref)) != METHOD_TYPE)\n \treturn 1;\n       break;\n+\n+    case BIND_EXPR:\n+    case RTL_EXPR:\n+      if (TREE_CODE (TREE_TYPE (ref)) == ARRAY_TYPE)\n+\treturn 1;\n     }\n   return 0;\n }"}]}