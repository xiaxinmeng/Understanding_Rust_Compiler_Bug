{"sha": "58a1185978eed474a3ffbd730197b27955b6d022", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhMTE4NTk3OGVlZDQ3NGEzZmZiZDczMDE5N2IyNzk1NWI2ZDAyMg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-05-17T18:16:27Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-05-17T18:16:27Z"}, "message": "tree.h (CALL_EXPR_ARGS): Delete.\n\n\t* tree.h (CALL_EXPR_ARGS): Delete.\n\t(call_expr_arglist): Delete.\n\t* tree.c (call_expr_arglist): Delete.\n\t* builtins.c (fold_call_expr): Pass the whole CALL_EXPR to\n\ttargetm.fold_builtin.\n\t* config/alpha/alpha.c (alpha_fold_builtin): Rename arglist parameter.\n\tRewrite iteration to work on call_expr_nargs rather than TREE_CHAIN.\n\t* config/picochip/picochip.c (picochip_expand_builtin_2op): Rename\n\targlist parameter.  Use CALL_EXPR_ARG.\n\t(picochip_expand_builtin_3op): Likewise.\n\t(picochip_expand_builtin_2opvoid): Likewise.\n\t(picochip_expand_array_get): Likewise.\n\t(picochip_expand_array_put): Likewise.\n\t(picochip_expand_array_testport): Likewise.\n\t(picochip_expand_builtin): Don't call CALL_EXPR_ARGS.  Pass exp\n\trather than arglist.\n\t* config/rx/rx.c (rx_expand_builtin): Call call_expr_nargs instead of\n\tCALL_EXPR_ARGS.\n\t* config/sparc/sparc.c (sparc_fold_builtin): Use CALL_EXPR_ARG rather\n\tthan TREE_VALUE and TREE_CHAIN.\n\t* config/xtensa/xtensa.c (xtensa_fold_builtin): Likewise.\n\t* doc/tm.texi (TARGET_FOLD_BUILTIN): Pass CALL_EXPR tree instead of\n\tthe arglist.\n\nFrom-SVN: r159502", "tree": {"sha": "3d18f55db08e124ce177bd2a78779cbbf3c8412b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d18f55db08e124ce177bd2a78779cbbf3c8412b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58a1185978eed474a3ffbd730197b27955b6d022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a1185978eed474a3ffbd730197b27955b6d022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a1185978eed474a3ffbd730197b27955b6d022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a1185978eed474a3ffbd730197b27955b6d022/comments", "author": null, "committer": null, "parents": [{"sha": "ad13f2299cefa72529059e21385c4c49f1491181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad13f2299cefa72529059e21385c4c49f1491181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad13f2299cefa72529059e21385c4c49f1491181"}], "stats": {"total": 158, "additions": 82, "deletions": 76}, "files": [{"sha": "0d1f713793ea11e005424893b157564679bda7e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58a1185978eed474a3ffbd730197b27955b6d022", "patch": "@@ -1,3 +1,29 @@\n+2010-05-17  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* tree.h (CALL_EXPR_ARGS): Delete.\n+\t(call_expr_arglist): Delete.\n+\t* tree.c (call_expr_arglist): Delete.\n+\t* builtins.c (fold_call_expr): Pass the whole CALL_EXPR to\n+\ttargetm.fold_builtin.\n+\t* config/alpha/alpha.c (alpha_fold_builtin): Rename arglist parameter.\n+\tRewrite iteration to work on call_expr_nargs rather than TREE_CHAIN.\n+\t* config/picochip/picochip.c (picochip_expand_builtin_2op): Rename\n+\targlist parameter.  Use CALL_EXPR_ARG.\n+\t(picochip_expand_builtin_3op): Likewise.\n+\t(picochip_expand_builtin_2opvoid): Likewise.\n+\t(picochip_expand_array_get): Likewise.\n+\t(picochip_expand_array_put): Likewise.\n+\t(picochip_expand_array_testport): Likewise.\n+\t(picochip_expand_builtin): Don't call CALL_EXPR_ARGS.  Pass exp\n+\trather than arglist.\n+\t* config/rx/rx.c (rx_expand_builtin): Call call_expr_nargs instead of\n+\tCALL_EXPR_ARGS.\n+\t* config/sparc/sparc.c (sparc_fold_builtin): Use CALL_EXPR_ARG rather\n+\tthan TREE_VALUE and TREE_CHAIN.\n+\t* config/xtensa/xtensa.c (xtensa_fold_builtin): Likewise.\n+\t* doc/tm.texi (TARGET_FOLD_BUILTIN): Pass CALL_EXPR tree instead of\n+\tthe arglist.\n+\n 2010-05-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/42347"}, {"sha": "8541b829801f7de3647bbb48fb0c1f23f843030d", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=58a1185978eed474a3ffbd730197b27955b6d022", "patch": "@@ -10701,9 +10701,8 @@ fold_call_expr (location_t loc, tree exp, bool ignore)\n       if (avoid_folding_inline_builtin (fndecl))\n \treturn NULL_TREE;\n \n-      /* FIXME: Don't use a list in this interface.  */\n       if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n-\t  return targetm.fold_builtin (fndecl, CALL_EXPR_ARGS (exp), ignore);\n+        return targetm.fold_builtin (fndecl, exp, ignore);\n       else\n \t{\n \t  if (nargs <= MAX_ARGS_TO_FOLD_BUILTIN)"}, {"sha": "764326728e74f42bc30784557083db74a6514534", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=58a1185978eed474a3ffbd730197b27955b6d022", "patch": "@@ -7138,21 +7138,21 @@ alpha_fold_builtin_ctpop (unsigned HOST_WIDE_INT opint[], long op_const)\n /* Fold one of our builtin functions.  */\n \n static tree\n-alpha_fold_builtin (tree fndecl, tree arglist, bool ignore ATTRIBUTE_UNUSED)\n+alpha_fold_builtin (tree fndecl, tree call, bool ignore ATTRIBUTE_UNUSED)\n {\n-  tree op[MAX_ARGS], t;\n+  tree *op = CALL_EXPR_ARGP (call);\n   unsigned HOST_WIDE_INT opint[MAX_ARGS];\n-  long op_const = 0, arity = 0;\n+  long op_const = 0;\n+  int arity;\n \n-  for (t = arglist; t ; t = TREE_CHAIN (t), ++arity)\n+  for (i = 0; i < call_expr_nargs (call); i++)\n     {\n-      tree arg = TREE_VALUE (t);\n+      tree arg = CALL_EXPR_ARG (call, i);\n       if (arg == error_mark_node)\n \treturn NULL;\n       if (arity >= MAX_ARGS)\n \treturn NULL;\n \n-      op[arity] = arg;\n       opint[arity] = 0;\n       if (TREE_CODE (arg) == INTEGER_CST)\n \t{"}, {"sha": "bed06e619c479da3d631a1356245732e1b324c44", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=58a1185978eed474a3ffbd730197b27955b6d022", "patch": "@@ -3773,14 +3773,14 @@ picochip_final_prescan_insn (rtx insn, rtx * opvec ATTRIBUTE_UNUSED,\n /* Given a builtin function taking 2 operands (i.e., target + source),\n    emit the RTL for the underlying instruction. */\n static rtx\n-picochip_expand_builtin_2op (enum insn_code icode, tree arglist, rtx target)\n+picochip_expand_builtin_2op (enum insn_code icode, tree call, rtx target)\n {\n   tree arg0;\n   rtx op0, pat;\n   enum machine_mode tmode, mode0;\n \n   /* Grab the incoming argument and emit its RTL. */\n-  arg0 = TREE_VALUE (arglist);\n+  arg0 = CALL_EXPR_ARG (call, 0);\n   op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n \n   /* Determine the modes of the instruction operands. */\n@@ -3811,15 +3811,15 @@ picochip_expand_builtin_2op (enum insn_code icode, tree arglist, rtx target)\n /* Given a builtin function taking 3 operands (i.e., target + two\n    source), emit the RTL for the underlying instruction. */\n static rtx\n-picochip_expand_builtin_3op (enum insn_code icode, tree arglist, rtx target)\n+picochip_expand_builtin_3op (enum insn_code icode, tree call, rtx target)\n {\n   tree arg0, arg1;\n   rtx op0, op1, pat;\n   enum machine_mode tmode, mode0, mode1;\n \n   /* Grab the function's arguments. */\n-  arg0 = TREE_VALUE (arglist);\n-  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  arg0 = CALL_EXPR_ARG (call, 0);\n+  arg1 = CALL_EXPR_ARG (call, 1);\n \n   /* Emit rtl sequences for the function arguments. */\n   op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -3855,15 +3855,15 @@ picochip_expand_builtin_3op (enum insn_code icode, tree arglist, rtx target)\n \n /* Expand a builtin function which takes two arguments, and returns a void. */\n static rtx\n-picochip_expand_builtin_2opvoid (enum insn_code icode, tree arglist)\n+picochip_expand_builtin_2opvoid (enum insn_code icode, tree call)\n {\n   tree arg0, arg1;\n   rtx op0, op1, pat;\n   enum machine_mode mode0, mode1;\n \n   /* Grab the function's arguments. */\n-  arg0 = TREE_VALUE (arglist);\n-  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  arg0 = CALL_EXPR_ARG (call, 0);\n+  arg1 = CALL_EXPR_ARG (call, 1);\n \n   /* Emit rtl sequences for the function arguments. */\n   op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -3892,15 +3892,15 @@ picochip_expand_builtin_2opvoid (enum insn_code icode, tree arglist)\n \n /* Expand an array get into the corresponding RTL. */\n static rtx\n-picochip_expand_array_get (tree arglist, rtx target)\n+picochip_expand_array_get (tree call, rtx target)\n {\n   tree arg0, arg1, arg2;\n   rtx op0, op1, op2, pat;\n \n   /* Grab the function's arguments. */\n-  arg0 = TREE_VALUE (arglist);\n-  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-  arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+  arg0 = CALL_EXPR_ARG (call, 0);\n+  arg1 = CALL_EXPR_ARG (call, 1);\n+  arg2 = CALL_EXPR_ARG (call, 2) ;\n \n   /* Emit rtl sequences for the function arguments. */\n   op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -3936,16 +3936,16 @@ picochip_expand_array_get (tree arglist, rtx target)\n \n /* Expand an array put into the corresponding RTL. */\n static rtx\n-picochip_expand_array_put (tree arglist, rtx target)\n+picochip_expand_array_put (tree call, rtx target)\n {\n   tree arg0, arg1, arg2, arg3;\n   rtx op0, op1, op2, op3, pat;\n \n   /* Grab the function's arguments. */\n-  arg0 = TREE_VALUE (arglist);\n-  arg1 = TREE_VALUE (arglist->common.chain);\n-  arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-  arg3 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (arglist))));\n+  arg0 = CALL_EXPR_ARG (call, 0);\n+  arg1 = CALL_EXPR_ARG (call, 1);\n+  arg2 = CALL_EXPR_ARG (call, 2);\n+  arg3 = CALL_EXPR_ARG (call, 3);\n \n   /* Emit rtl sequences for the function arguments. */\n   op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -3980,15 +3980,15 @@ picochip_expand_array_put (tree arglist, rtx target)\n \n /* Expand an array testport into the corresponding RTL. */\n static rtx\n-picochip_expand_array_testport (tree arglist, rtx target)\n+picochip_expand_array_testport (tree call, rtx target)\n {\n   tree arg0, arg1, arg2;\n   rtx op0, op1, op2, pat;\n \n   /* Grab the function's arguments. */\n-  arg0 = TREE_VALUE (arglist);\n-  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-  arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+  arg0 = CALL_EXPR_ARG (call, 0);\n+  arg1 = CALL_EXPR_ARG (call, 1);\n+  arg2 = CALL_EXPR_ARG (call, 2);\n \n   /* Emit rtl sequences for the function arguments. */\n   op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -4214,50 +4214,49 @@ picochip_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t\t int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  tree arglist = CALL_EXPR_ARGS(exp);\n   int fcode = DECL_FUNCTION_CODE (fndecl);\n \n   switch (fcode)\n     {\n     case PICOCHIP_BUILTIN_ASRI:\n-      return picochip_expand_builtin_3op (CODE_FOR_builtin_asri, arglist,\n+      return picochip_expand_builtin_3op (CODE_FOR_builtin_asri, exp,\n \t\t\t\t\t  target);\n \n     case PICOCHIP_BUILTIN_ADDS:\n-      return picochip_expand_builtin_3op (CODE_FOR_sataddhi3, arglist,\n+      return picochip_expand_builtin_3op (CODE_FOR_sataddhi3, exp,\n \t\t\t\t\t  target);\n \n     case PICOCHIP_BUILTIN_SUBS:\n-      return picochip_expand_builtin_3op (CODE_FOR_satsubhi3, arglist,\n+      return picochip_expand_builtin_3op (CODE_FOR_satsubhi3, exp,\n \t\t\t\t\t  target);\n \n     case PICOCHIP_BUILTIN_SBC:\n-      return picochip_expand_builtin_2op (CODE_FOR_sbc, arglist, target);\n+      return picochip_expand_builtin_2op (CODE_FOR_sbc, exp, target);\n \n     case PICOCHIP_BUILTIN_BREV:\n-      return picochip_expand_builtin_2op (CODE_FOR_brev, arglist, target);\n+      return picochip_expand_builtin_2op (CODE_FOR_brev, exp, target);\n \n     case PICOCHIP_BUILTIN_BYTESWAP:\n-      return picochip_expand_builtin_2op (CODE_FOR_bswaphi2, arglist, target);\n+      return picochip_expand_builtin_2op (CODE_FOR_bswaphi2, exp, target);\n \n     case PICOCHIP_BUILTIN_GET:\n-      return picochip_expand_builtin_2op (CODE_FOR_commsGet, arglist, target);\n+      return picochip_expand_builtin_2op (CODE_FOR_commsGet, exp, target);\n \n     case PICOCHIP_BUILTIN_PUT:\n-      return picochip_expand_builtin_2opvoid (CODE_FOR_commsPut, arglist);\n+      return picochip_expand_builtin_2opvoid (CODE_FOR_commsPut, exp);\n \n     case PICOCHIP_BUILTIN_TESTPORT:\n-      return picochip_expand_builtin_2op (CODE_FOR_commsTestPort, arglist,\n+      return picochip_expand_builtin_2op (CODE_FOR_commsTestPort, exp,\n \t\t\t\t\t  target);\n \n     case PICOCHIP_BUILTIN_PUT_ARRAY:\n-      return picochip_expand_array_put (arglist, target);\n+      return picochip_expand_array_put (exp, target);\n \n     case PICOCHIP_BUILTIN_GET_ARRAY:\n-      return picochip_expand_array_get (arglist, target);\n+      return picochip_expand_array_get (exp, target);\n \n     case PICOCHIP_BUILTIN_TESTPORT_ARRAY:\n-      return picochip_expand_array_testport (arglist, target);\n+      return picochip_expand_array_testport (exp, target);\n \n     case PICOCHIP_BUILTIN_HALT:\n       return picochip_generate_halt ();"}, {"sha": "ad43791013a1130cc0a6090984a7b76680d02991", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=58a1185978eed474a3ffbd730197b27955b6d022", "patch": "@@ -1995,7 +1995,7 @@ rx_expand_builtin (tree exp,\n \t\t   int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  tree arg    = CALL_EXPR_ARGS (exp) ? CALL_EXPR_ARG (exp, 0) : NULL_TREE;\n+  tree arg    = call_expr_nargs (exp) >= 1 ? CALL_EXPR_ARG (exp, 0) : NULL_TREE;\n   rtx  op     = arg ? expand_normal (arg) : NULL_RTX;\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n "}, {"sha": "856431285df8962101d0acc10e4239cced7eafbb", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=58a1185978eed474a3ffbd730197b27955b6d022", "patch": "@@ -8372,7 +8372,7 @@ sparc_handle_vis_mul8x16 (int fncode, tree inner_type, tree elts0, tree elts1)\n    function could not be folded.  */\n \n static tree\n-sparc_fold_builtin (tree fndecl, tree arglist, bool ignore)\n+sparc_fold_builtin (tree fndecl, tree call, bool ignore)\n {\n   tree arg0, arg1, arg2;\n   tree rtype = TREE_TYPE (TREE_TYPE (fndecl));\n@@ -8386,7 +8386,7 @@ sparc_fold_builtin (tree fndecl, tree arglist, bool ignore)\n   switch (icode)\n     {\n     case CODE_FOR_fexpand_vis:\n-      arg0 = TREE_VALUE (arglist);\n+      arg0 = CALL_EXPR_ARG (call, 0);\n       STRIP_NOPS (arg0);\n \n       if (TREE_CODE (arg0) == VECTOR_CST)\n@@ -8409,8 +8409,8 @@ sparc_fold_builtin (tree fndecl, tree arglist, bool ignore)\n     case CODE_FOR_fmul8x16_vis:\n     case CODE_FOR_fmul8x16au_vis:\n     case CODE_FOR_fmul8x16al_vis:\n-      arg0 = TREE_VALUE (arglist);\n-      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      arg0 = CALL_EXPR_ARG (call, 0);\n+      arg1 = CALL_EXPR_ARG (call, 1);\n       STRIP_NOPS (arg0);\n       STRIP_NOPS (arg1);\n \n@@ -8427,8 +8427,8 @@ sparc_fold_builtin (tree fndecl, tree arglist, bool ignore)\n       break;\n \n     case CODE_FOR_fpmerge_vis:\n-      arg0 = TREE_VALUE (arglist);\n-      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      arg0 = CALL_EXPR_ARG (call, 0);\n+      arg1 = CALL_EXPR_ARG (call, 1);\n       STRIP_NOPS (arg0);\n       STRIP_NOPS (arg1);\n \n@@ -8450,9 +8450,9 @@ sparc_fold_builtin (tree fndecl, tree arglist, bool ignore)\n       break;\n \n     case CODE_FOR_pdist_vis:\n-      arg0 = TREE_VALUE (arglist);\n-      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-      arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+      arg0 = CALL_EXPR_ARG (call, 0);\n+      arg1 = CALL_EXPR_ARG (call, 1);\n+      arg2 = CALL_EXPR_ARG (call, 2);\n       STRIP_NOPS (arg0);\n       STRIP_NOPS (arg1);\n       STRIP_NOPS (arg2);"}, {"sha": "fac7e517ad25d9cfc7042bbd5a0ec52068379a49", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=58a1185978eed474a3ffbd730197b27955b6d022", "patch": "@@ -3000,16 +3000,16 @@ xtensa_init_builtins (void)\n \n \n static tree\n-xtensa_fold_builtin (tree fndecl, tree arglist, bool ignore ATTRIBUTE_UNUSED)\n+xtensa_fold_builtin (tree fndecl, tree call, bool ignore ATTRIBUTE_UNUSED)\n {\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n   tree arg0, arg1;\n \n   switch (fcode)\n     {\n     case XTENSA_BUILTIN_UMULSIDI3:\n-      arg0 = TREE_VALUE (arglist);\n-      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      arg0 = CALL_EXPR_ARG (call, 0);\n+      arg1 = CALL_EXPR_ARG (call, 1);\n       if ((TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == INTEGER_CST)\n \t  || TARGET_MUL32_HIGH)\n \treturn fold_build2 (MULT_EXPR, unsigned_intDI_type_node,"}, {"sha": "8f9bbe7933a2cf77a4e723fbd3baace7f90ae724", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=58a1185978eed474a3ffbd730197b27955b6d022", "patch": "@@ -10784,12 +10784,12 @@ another @code{CALL_EXPR}.\n @var{arglist} really has type @samp{VEC(tree,gc)*}\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_FOLD_BUILTIN (tree @var{fndecl}, tree @var{arglist}, bool @var{ignore})\n+@deftypefn {Target Hook} tree TARGET_FOLD_BUILTIN (tree @var{fndecl}, tree @var{call}, bool @var{ignore})\n \n Fold a call to a machine specific built-in function that was set up by\n @samp{TARGET_INIT_BUILTINS}.  @var{fndecl} is the declaration of the\n-built-in function.  @var{arglist} is the list of arguments passed to\n-the built-in function.  The result is another tree containing a\n+built-in function.  @var{call} is the @code{CALL_EXPR} representing\n+the call.  The result is another tree containing a\n simplified expression for the call's result.  If @var{ignore} is true\n the value will be ignored.\n @end deftypefn"}, {"sha": "8c0ed4e0e15661891f69e924553b50462b95437f", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=58a1185978eed474a3ffbd730197b27955b6d022", "patch": "@@ -10376,22 +10376,6 @@ tree_block (tree t)\n   return NULL;\n }\n \n-/* Build and return a TREE_LIST of arguments in the CALL_EXPR exp.\n-   FIXME: don't use this function.  It exists for compatibility with\n-   the old representation of CALL_EXPRs where a list was used to hold the\n-   arguments.  Places that currently extract the arglist from a CALL_EXPR\n-   ought to be rewritten to use the CALL_EXPR itself.  */\n-tree\n-call_expr_arglist (tree exp)\n-{\n-  tree arglist = NULL_TREE;\n-  int i;\n-  for (i = call_expr_nargs (exp) - 1; i >= 0; i--)\n-    arglist = tree_cons (NULL_TREE, CALL_EXPR_ARG (exp, i), arglist);\n-  return arglist;\n-}\n-\n-\n /* Create a nameless artificial label and put it in the current\n    function context.  The label has a location of LOC.  Returns the\n    newly created label.  */"}, {"sha": "2b10d9a407bb768b8402e8370bdbefa000d7677d", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a1185978eed474a3ffbd730197b27955b6d022/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=58a1185978eed474a3ffbd730197b27955b6d022", "patch": "@@ -1695,7 +1695,6 @@ extern void protected_set_expr_location (tree, location_t);\n  */\n #define CALL_EXPR_FN(NODE) TREE_OPERAND (CALL_EXPR_CHECK (NODE), 1)\n #define CALL_EXPR_STATIC_CHAIN(NODE) TREE_OPERAND (CALL_EXPR_CHECK (NODE), 2)\n-#define CALL_EXPR_ARGS(NODE) call_expr_arglist (NODE)\n #define CALL_EXPR_ARG(NODE, I) TREE_OPERAND (CALL_EXPR_CHECK (NODE), (I) + 3)\n #define call_expr_nargs(NODE) (VL_EXP_OPERAND_LENGTH(NODE) - 3)\n \n@@ -4806,7 +4805,6 @@ extern tree lower_bound_in_type (tree, tree);\n extern int operand_equal_for_phi_arg_p (const_tree, const_tree);\n extern tree call_expr_arg (tree, int);\n extern tree *call_expr_argp (tree, int);\n-extern tree call_expr_arglist (tree);\n extern tree create_artificial_label (location_t);\n extern const char *get_name (tree);\n extern bool stdarg_p (tree);"}]}