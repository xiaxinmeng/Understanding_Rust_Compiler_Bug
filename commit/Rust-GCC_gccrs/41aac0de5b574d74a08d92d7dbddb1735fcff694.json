{"sha": "41aac0de5b574d74a08d92d7dbddb1735fcff694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFhYWMwZGU1YjU3NGQ3NGEwOGQ5MmQ3ZGJkZGIxNzM1ZmNmZjY5NA==", "commit": {"author": {"name": "David Alan Gilbert", "email": "david.gilbert@linaro.org", "date": "2011-10-14T14:39:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-10-14T14:39:10Z"}, "message": "linux-atomic-64bit.c: New (based on linux-atomic.c).\n\ngcc/\n2011-10-14  David Alan Gilbert  <david.gilbert@linaro.org>\n\n\t* config/arm/linux-atomic-64bit.c: New (based on linux-atomic.c).\n\t* config/arm/linux-atomic.c: Change comment to point to 64bit version.\n\t(SYNC_LOCK_RELEASE): Instantiate 64bit version.\n\t* config/arm/t-linux-eabi: Pull in linux-atomic-64bit.c.\n\nFrom-SVN: r179982", "tree": {"sha": "fe170c5fd8338151da895518182f0ed51a7f9846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe170c5fd8338151da895518182f0ed51a7f9846"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41aac0de5b574d74a08d92d7dbddb1735fcff694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41aac0de5b574d74a08d92d7dbddb1735fcff694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41aac0de5b574d74a08d92d7dbddb1735fcff694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41aac0de5b574d74a08d92d7dbddb1735fcff694/comments", "author": null, "committer": null, "parents": [{"sha": "cfe527436c536ff0035a5633a8cab05778c4a4d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfe527436c536ff0035a5633a8cab05778c4a4d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfe527436c536ff0035a5633a8cab05778c4a4d4"}], "stats": {"total": 179, "additions": 177, "deletions": 2}, "files": [{"sha": "59f4ed4a91b43b1a58c988841502c6ca30d346f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41aac0de5b574d74a08d92d7dbddb1735fcff694/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41aac0de5b574d74a08d92d7dbddb1735fcff694/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41aac0de5b574d74a08d92d7dbddb1735fcff694", "patch": "@@ -1,3 +1,10 @@\n+2011-10-14  David Alan Gilbert  <david.gilbert@linaro.org>\n+\n+\t* config/arm/linux-atomic-64bit.c: New (based on linux-atomic.c).\n+\t* config/arm/linux-atomic.c: Change comment to point to 64bit version.\n+\t(SYNC_LOCK_RELEASE): Instantiate 64bit version.\n+\t* config/arm/t-linux-eabi: Pull in linux-atomic-64bit.c.\n+\n 2011-10-14  David Alan Gilbert  <david.gilbert@linaro.org>\n \n \t* config/arm/arm.c (arm_output_ldrex): Support ldrexd."}, {"sha": "af94c7f4ae5b97d4877901c7ac2d01b41bcd2116", "filename": "gcc/config/arm/linux-atomic-64bit.c", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41aac0de5b574d74a08d92d7dbddb1735fcff694/gcc%2Fconfig%2Farm%2Flinux-atomic-64bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41aac0de5b574d74a08d92d7dbddb1735fcff694/gcc%2Fconfig%2Farm%2Flinux-atomic-64bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-atomic-64bit.c?ref=41aac0de5b574d74a08d92d7dbddb1735fcff694", "patch": "@@ -0,0 +1,166 @@\n+/* 64bit Linux-specific atomic operations for ARM EABI.\n+   Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+   Based on linux-atomic.c\n+\n+   64 bit additions david.gilbert@linaro.org\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* 64bit helper functions for atomic operations; the compiler will\n+   call these when the code is compiled for a CPU without ldrexd/strexd.\n+   (If the CPU had those then the compiler inlines the operation).\n+\n+   These helpers require a kernel helper that's only present on newer\n+   kernels; we check for that in an init section and bail out rather\n+   unceremoneously.  */\n+\n+extern unsigned int __write (int fd, const void *buf, unsigned int count);\n+extern void abort (void);\n+\n+/* Kernel helper for compare-and-exchange.  */\n+typedef int (__kernel_cmpxchg64_t) (const long long* oldval,\n+\t\t\t\t\tconst long long* newval,\n+\t\t\t\t\tlong long *ptr);\n+#define __kernel_cmpxchg64 (*(__kernel_cmpxchg64_t *) 0xffff0f60)\n+\n+/* Kernel helper page version number.  */\n+#define __kernel_helper_version (*(unsigned int *)0xffff0ffc)\n+\n+/* Check that the kernel has a new enough version at load.  */\n+static void __check_for_sync8_kernelhelper (void)\n+{\n+  if (__kernel_helper_version < 5)\n+    {\n+      const char err[] = \"A newer kernel is required to run this binary. \"\n+\t\t\t\t\"(__kernel_cmpxchg64 helper)\\n\";\n+      /* At this point we need a way to crash with some information\n+\t for the user - I'm not sure I can rely on much else being\n+\t available at this point, so do the same as generic-morestack.c\n+\t write () and abort ().  */\n+      __write (2 /* stderr.  */, err, sizeof (err));\n+      abort ();\n+    }\n+};\n+\n+static void (*__sync8_kernelhelper_inithook[]) (void)\n+\t\t__attribute__ ((used, section (\".init_array\"))) = {\n+  &__check_for_sync8_kernelhelper\n+};\n+\n+#define HIDDEN __attribute__ ((visibility (\"hidden\")))\n+\n+#define FETCH_AND_OP_WORD64(OP, PFX_OP, INF_OP)\t\t\t\\\n+  long long HIDDEN\t\t\t\t\t\t\\\n+  __sync_fetch_and_##OP##_8 (long long *ptr, long long val)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    int failure;\t\t\t\t\t\t\\\n+    long long tmp,tmp2;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+      tmp = *ptr;\t\t\t\t\t\t\\\n+      tmp2 = PFX_OP (tmp INF_OP val);\t\t\t\t\\\n+      failure = __kernel_cmpxchg64 (&tmp, &tmp2, ptr);\t\t\\\n+    } while (failure != 0);\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    return tmp;\t\t\t\t\t\t\t\\\n+  }\n+\n+FETCH_AND_OP_WORD64 (add,   , +)\n+FETCH_AND_OP_WORD64 (sub,   , -)\n+FETCH_AND_OP_WORD64 (or,    , |)\n+FETCH_AND_OP_WORD64 (and,   , &)\n+FETCH_AND_OP_WORD64 (xor,   , ^)\n+FETCH_AND_OP_WORD64 (nand, ~, &)\n+\n+#define NAME_oldval(OP, WIDTH) __sync_fetch_and_##OP##_##WIDTH\n+#define NAME_newval(OP, WIDTH) __sync_##OP##_and_fetch_##WIDTH\n+\n+/* Implement both __sync_<op>_and_fetch and __sync_fetch_and_<op> for\n+   subword-sized quantities.  */\n+\n+#define OP_AND_FETCH_WORD64(OP, PFX_OP, INF_OP)\t\t\t\\\n+  long long HIDDEN\t\t\t\t\t\t\\\n+  __sync_##OP##_and_fetch_8 (long long *ptr, long long val)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    int failure;\t\t\t\t\t\t\\\n+    long long tmp,tmp2;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+      tmp = *ptr;\t\t\t\t\t\t\\\n+      tmp2 = PFX_OP (tmp INF_OP val);\t\t\t\t\\\n+      failure = __kernel_cmpxchg64 (&tmp, &tmp2, ptr);\t\t\\\n+    } while (failure != 0);\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    return tmp2;\t\t\t\t\t\t\\\n+  }\n+\n+OP_AND_FETCH_WORD64 (add,   , +)\n+OP_AND_FETCH_WORD64 (sub,   , -)\n+OP_AND_FETCH_WORD64 (or,    , |)\n+OP_AND_FETCH_WORD64 (and,   , &)\n+OP_AND_FETCH_WORD64 (xor,   , ^)\n+OP_AND_FETCH_WORD64 (nand, ~, &)\n+\n+long long HIDDEN\n+__sync_val_compare_and_swap_8 (long long *ptr, long long oldval,\n+\t\t\t\tlong long newval)\n+{\n+  int failure;\n+  long long actual_oldval;\n+\n+  while (1)\n+    {\n+      actual_oldval = *ptr;\n+\n+      if (__builtin_expect (oldval != actual_oldval, 0))\n+\treturn actual_oldval;\n+\n+      failure = __kernel_cmpxchg64 (&actual_oldval, &newval, ptr);\n+\n+      if (__builtin_expect (!failure, 1))\n+\treturn oldval;\n+    }\n+}\n+\n+typedef unsigned char bool;\n+\n+bool HIDDEN\n+__sync_bool_compare_and_swap_8 (long long *ptr, long long oldval,\n+\t\t\t\t long long newval)\n+{\n+  int failure = __kernel_cmpxchg64 (&oldval, &newval, ptr);\n+  return (failure == 0);\n+}\n+\n+long long HIDDEN\n+__sync_lock_test_and_set_8 (long long *ptr, long long val)\n+{\n+  int failure;\n+  long long oldval;\n+\n+  do {\n+    oldval = *ptr;\n+    failure = __kernel_cmpxchg64 (&oldval, &val, ptr);\n+  } while (failure != 0);\n+\n+  return oldval;\n+}"}, {"sha": "80f161d06a7c1a2a4ca62163c797c44bad8babe8", "filename": "gcc/config/arm/linux-atomic.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41aac0de5b574d74a08d92d7dbddb1735fcff694/gcc%2Fconfig%2Farm%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41aac0de5b574d74a08d92d7dbddb1735fcff694/gcc%2Fconfig%2Farm%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-atomic.c?ref=41aac0de5b574d74a08d92d7dbddb1735fcff694", "patch": "@@ -32,8 +32,8 @@ typedef void (__kernel_dmb_t) (void);\n #define __kernel_dmb (*(__kernel_dmb_t *) 0xffff0fa0)\n \n /* Note: we implement byte, short and int versions of atomic operations using\n-   the above kernel helpers, but there is no support for \"long long\" (64-bit)\n-   operations as yet.  */\n+   the above kernel helpers; see linux-atomic-64bit.c for \"long long\" (64-bit)\n+   operations.  */\n \n #define HIDDEN __attribute__ ((visibility (\"hidden\")))\n \n@@ -273,6 +273,7 @@ SUBWORD_TEST_AND_SET (unsigned char,  1)\n     *ptr = 0;\t\t\t\t\t\t\t\t\\\n   }\n \n+SYNC_LOCK_RELEASE (long long,   8)\n SYNC_LOCK_RELEASE (int,   4)\n SYNC_LOCK_RELEASE (short, 2)\n SYNC_LOCK_RELEASE (char,  1)"}, {"sha": "3814cc09b8183cfa40ce90b51f6e2a490a3107ee", "filename": "gcc/config/arm/t-linux-eabi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41aac0de5b574d74a08d92d7dbddb1735fcff694/gcc%2Fconfig%2Farm%2Ft-linux-eabi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41aac0de5b574d74a08d92d7dbddb1735fcff694/gcc%2Fconfig%2Farm%2Ft-linux-eabi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-linux-eabi?ref=41aac0de5b574d74a08d92d7dbddb1735fcff694", "patch": "@@ -36,3 +36,4 @@ LIB1ASMFUNCS := $(filter-out _dvmd_tls,$(LIB1ASMFUNCS)) _dvmd_lnx _clear_cache\n EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\n \n LIB2FUNCS_STATIC_EXTRA += $(srcdir)/config/arm/linux-atomic.c\n+LIB2FUNCS_STATIC_EXTRA += $(srcdir)/config/arm/linux-atomic-64bit.c"}]}