{"sha": "a846424359772bfe8d76fae153e1cc21f02876a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg0NjQyNDM1OTc3MmJmZThkNzZmYWUxNTNlMWNjMjFmMDI4NzZhMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2016-09-11T13:23:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-09-11T13:23:27Z"}, "message": "runtime/internal/sys: new package, API copied from Go 1.7\n    \n    Copy over the Go 1.7 runtime/internal/sys package, but instead of having\n    separate files for each GOARCH and GOOS value, set the values in\n    configure.ac and write them out in Makefile.am.  Setting the values in\n    configure.ac should make it easier to add new processors.\n    \n    Remove the automake GOARCH conditionals, which are no longer used.\n    Leave the GOOS conditionals for now, as they are used for the C runtime\n    package.\n    \n    Reviewed-on: https://go-review.googlesource.com/29018\n\nFrom-SVN: r240083", "tree": {"sha": "0815e13095e63e030ca2a15736d99e36938b55cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0815e13095e63e030ca2a15736d99e36938b55cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a846424359772bfe8d76fae153e1cc21f02876a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a846424359772bfe8d76fae153e1cc21f02876a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a846424359772bfe8d76fae153e1cc21f02876a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a846424359772bfe8d76fae153e1cc21f02876a1/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1cd04ace88932053e171a2df5d1c7f41329a851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1cd04ace88932053e171a2df5d1c7f41329a851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1cd04ace88932053e171a2df5d1c7f41329a851"}], "stats": {"total": 1010, "additions": 593, "deletions": 417}, "files": [{"sha": "9351ddafe16f35727a1940b0b6021bb6edf0fce9", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -1,3 +1,8 @@\n+2016-09-11  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go-gcc.cc (Gcc_backend::Gcc_backend): Add builtin versions of\n+\tctz, ctzll, bswap32, bswap64.\n+\n 2016-09-10  Ian Lance Taylor  <iant@golang.org>\n \n \t* go-backend.c (go_trampoline_info): Remove."}, {"sha": "a332831b3107a83ab403f134bd6798c9f50442ca", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -692,6 +692,28 @@ Gcc_backend::Gcc_backend()\n \t\t\t\t\t\tNULL_TREE),\n \t\t       false, false);\n \n+  // Used by runtime/internal/sys.\n+  this->define_builtin(BUILT_IN_CTZ, \"__builtin_ctz\", \"ctz\",\n+\t\t       build_function_type_list(integer_type_node,\n+\t\t\t\t\t\tunsigned_type_node,\n+\t\t\t\t\t\tNULL_TREE),\n+\t\t       true, false);\n+  this->define_builtin(BUILT_IN_CTZLL, \"__builtin_ctzll\", \"ctzll\",\n+\t\t       build_function_type_list(integer_type_node,\n+\t\t\t\t\t\tlong_long_unsigned_type_node,\n+\t\t\t\t\t\tNULL_TREE),\n+\t\t       true, false);\n+  this->define_builtin(BUILT_IN_BSWAP32, \"__builtin_bswap32\", \"bswap32\",\n+\t\t       build_function_type_list(uint32_type_node,\n+\t\t\t\t\t\tuint32_type_node,\n+\t\t\t\t\t\tNULL_TREE),\n+\t\t       true, false);\n+  this->define_builtin(BUILT_IN_BSWAP64, \"__builtin_bswap64\", \"bswap64\",\n+\t\t       build_function_type_list(uint64_type_node,\n+\t\t\t\t\t\tuint64_type_node,\n+\t\t\t\t\t\tNULL_TREE),\n+\t\t       true, false);\n+\n   // We provide some functions for the math library.\n   tree math_function_type = build_function_type_list(double_type_node,\n \t\t\t\t\t\t     double_type_node,"}, {"sha": "65badea861dc9cb61b9f90069c28058b893db6be", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -1,4 +1,4 @@\n-d3a145b111a4f4ea772b812c6a0b3a853c207819\n+841bea960b1f097e2cff5ad2618800296dcd4ec2\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "4ac6a4a7bd5f31e0ad04d8d76f4d645a6abe5edf", "filename": "libgo/Makefile.am", "status": "modified", "additions": 65, "deletions": 7, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -586,12 +586,54 @@ time.c: $(srcdir)/runtime/time.goc goc2c\n version.go: s-version; @true\n s-version: Makefile\n \trm -f version.go.tmp\n-\techo \"package runtime\" > version.go.tmp\n-\techo 'const defaultGoroot = \"$(prefix)\"' >> version.go.tmp\n-\techo 'const theVersion = \"'`cat $(srcdir)/VERSION | sed 1q`' '`$(GOC) --version | sed 1q`'\"' >> version.go.tmp\n-\techo 'const theGoarch = \"'$(GOARCH)'\"' >> version.go.tmp\n-\techo 'const theGoos = \"'$(GOOS)'\"' >> version.go.tmp\n-\techo 'const theGccgoToolDir = \"$(libexecsubdir)\"' >> version.go.tmp\n+\techo \"package sys\" > version.go.tmp\n+\techo 'const DefaultGoroot = \"$(prefix)\"' >> version.go.tmp\n+\techo 'const TheVersion = \"'`cat $(srcdir)/VERSION | sed 1q`' '`$(GOC) --version | sed 1q`'\"' >> version.go.tmp\n+\techo 'const GOARCH = \"'$(GOARCH)'\"' >> version.go.tmp\n+\techo 'const GOOS = \"'$(GOOS)'\"' >> version.go.tmp\n+\techo 'const GccgoToolDir = \"$(libexecsubdir)\"' >> version.go.tmp\n+\techo >> version.go.tmp\n+\techo \"type ArchFamilyType int\" >> version.go.tmp\n+\techo >> version.go.tmp\n+\techo \"const (\" >> version.go.tmp\n+\techo \"\tUNKNOWN ArchFamilyType = iota\" >> version.go.tmp\n+\tfor a in $(ALLGOARCHFAMILY); do \\\n+\t  echo \"\t$${a}\" >> version.go.tmp; \\\n+\tdone\n+\techo \")\" >> version.go.tmp\n+\techo >> version.go.tmp\n+\tfor a in $(ALLGOARCH); do \\\n+\t  f=`echo $${a} | sed -e 's/\\(.\\).*/\\1/' -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`; \\\n+\t  n=\"$${f}`echo $${a} | sed -e 's/.//'`\"; \\\n+\t  if test \"$${a}\" = \"$(GOARCH)\"; then \\\n+\t    echo \"const Goarch$${n} = 1\" >> version.go.tmp; \\\n+\t  else \\\n+\t    echo \"const Goarch$${n} = 0\" >> version.go.tmp; \\\n+\t  fi; \\\n+\tdone\n+\techo >> version.go.tmp\n+\techo \"const (\" >> version.go.tmp\n+\techo \"\tArchFamily = $(GOARCH_FAMILY)\" >> version.go.tmp\n+\techo \"\tBigEndian = $(GOARCH_BIGENDIAN)\" >> version.go.tmp\n+\techo \"\tCacheLineSize = $(GOARCH_CACHELINESIZE)\" >> version.go.tmp\n+\techo \"\tPhysPageSize = $(GOARCH_PHYSPAGESIZE)\" >> version.go.tmp\n+\techo \"\tPCQuantum = $(GOARCH_PCQUANTUM)\" >> version.go.tmp\n+\techo \"\tInt64Align = $(GOARCH_INT64ALIGN)\" >> version.go.tmp\n+\techo \"\tHugePageSize = $(GOARCH_HUGEPAGESIZE)\" >> version.go.tmp\n+\techo \"\tMinFrameSize = $(GOARCH_MINFRAMESIZE)\" >> version.go.tmp\n+\techo \")\" >> version.go.tmp\n+\techo >> version.go.tmp\n+\tfor a in $(ALLGOOS); do \\\n+\t  f=`echo $${a} | sed -e 's/\\(.\\).*/\\1/' -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`; \\\n+\t  n=\"$${f}`echo $${a} | sed -e 's/.//'`\"; \\\n+\t  if test \"$${a}\" = \"$(GOOS)\"; then \\\n+\t    echo \"const Goos$${n} = 1\" >> version.go.tmp; \\\n+\t  else \\\n+\t    echo \"const Goos$${n} = 0\" >> version.go.tmp; \\\n+\t  fi; \\\n+\tdone\n+\techo >> version.go.tmp\n+\techo \"type Uintreg uintptr\" >> version.go.tmp\n \t$(SHELL) $(srcdir)/mvifdiff.sh version.go.tmp version.go\n \t$(STAMP) $@\n \n@@ -845,6 +887,7 @@ libgo_go_objs = \\\n \truntime/pprof.lo \\\n \truntime/internal/atomic.lo \\\n \truntime/internal/atomic_c.lo \\\n+\truntime/internal/sys.lo \\\n \tsync/atomic.lo \\\n \tsync/atomic_c.lo \\\n \ttext/scanner.lo \\\n@@ -1224,7 +1267,7 @@ regexp/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: regexp/check\n \n-extra_go_files_runtime = runtime_sysinfo.go version.go\n+extra_go_files_runtime = runtime_sysinfo.go\n \n @go_include@ runtime-go.lo.dep\n runtime-go.lo.dep: $(srcdir)/go/runtime/*.go $(extra_go_files_runtime)\n@@ -2379,6 +2422,18 @@ runtime/internal/atomic/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: runtime/internal/atomic/check\n \n+extra_go_files_runtime_internal_sys = version.go\n+\n+@go_include@ runtime/internal/sys.lo.dep\n+runtime/internal/sys.lo.dep: $(srcdir)/go/runtime/internal/sys/*.go\n+\t$(BUILDDEPS)\n+runtime_internal_sys_lo_GOCFLAGS = -fgo-compiling-runtime\n+runtime/internal/sys.lo:\n+\t$(BUILDPACKAGE)\n+runtime/internal/sys/check: $(CHECK_DEPS)\n+\t@$(CHECK)\n+.PHONY: runtime/internal/sys/check\n+\n @go_include@ sync/atomic.lo.dep\n sync/atomic.lo.dep: $(srcdir)/go/sync/atomic/*.go\n \t$(BUILDDEPS)\n@@ -2816,6 +2871,8 @@ runtime/pprof.gox: runtime/pprof.lo\n \t$(BUILDGOX)\n runtime/internal/atomic.gox: runtime/internal/atomic.lo\n \t$(BUILDGOX)\n+runtime/internal/sys.gox: runtime/internal/sys.lo\n+\t$(BUILDGOX)\n \n sync/atomic.gox: sync/atomic.lo\n \t$(BUILDGOX)\n@@ -2971,6 +3028,7 @@ TEST_PACKAGES = \\\n \tregexp/syntax/check \\\n \truntime/pprof/check \\\n \truntime/internal/atomic/check \\\n+\truntime/internal/sys/check \\\n \tsync/atomic/check \\\n \ttext/scanner/check \\\n \ttext/tabwriter/check \\"}, {"sha": "2daa83ee443eb73b8d0db3bbe154e6c6b7aa2db6", "filename": "libgo/Makefile.in", "status": "modified", "additions": 79, "deletions": 11, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -213,10 +213,10 @@ am__DEPENDENCIES_1 = bufio.lo bytes.lo bytes/index.lo context.lo \\\n \tos/user.lo path/filepath.lo regexp/syntax.lo \\\n \tnet/rpc/jsonrpc.lo runtime/debug.lo runtime/pprof.lo \\\n \truntime/internal/atomic.lo runtime/internal/atomic_c.lo \\\n-\tsync/atomic.lo sync/atomic_c.lo text/scanner.lo \\\n-\ttext/tabwriter.lo text/template.lo text/template/parse.lo \\\n-\ttesting/iotest.lo testing/quick.lo unicode/utf16.lo \\\n-\tunicode/utf8.lo\n+\truntime/internal/sys.lo sync/atomic.lo sync/atomic_c.lo \\\n+\ttext/scanner.lo text/tabwriter.lo text/template.lo \\\n+\ttext/template/parse.lo testing/iotest.lo testing/quick.lo \\\n+\tunicode/utf16.lo unicode/utf8.lo\n am__DEPENDENCIES_2 =\n am__DEPENDENCIES_3 = $(am__DEPENDENCIES_1) \\\n \t../libbacktrace/libbacktrace.la $(am__DEPENDENCIES_2) \\\n@@ -341,6 +341,9 @@ ETAGS = etags\n CTAGS = ctags\n DIST_SUBDIRS = testsuite\n ACLOCAL = @ACLOCAL@\n+ALLGOARCH = @ALLGOARCH@\n+ALLGOARCHFAMILY = @ALLGOARCHFAMILY@\n+ALLGOOS = @ALLGOOS@\n AMTAR = @AMTAR@\n AR = @AR@\n AUTOCONF = @AUTOCONF@\n@@ -365,6 +368,14 @@ EGREP = @EGREP@\n EXEEXT = @EXEEXT@\n FGREP = @FGREP@\n GOARCH = @GOARCH@\n+GOARCH_BIGENDIAN = @GOARCH_BIGENDIAN@\n+GOARCH_CACHELINESIZE = @GOARCH_CACHELINESIZE@\n+GOARCH_FAMILY = @GOARCH_FAMILY@\n+GOARCH_HUGEPAGESIZE = @GOARCH_HUGEPAGESIZE@\n+GOARCH_INT64ALIGN = @GOARCH_INT64ALIGN@\n+GOARCH_MINFRAMESIZE = @GOARCH_MINFRAMESIZE@\n+GOARCH_PCQUANTUM = @GOARCH_PCQUANTUM@\n+GOARCH_PHYSPAGESIZE = @GOARCH_PHYSPAGESIZE@\n GOC = @GOC@\n GOCFLAGS = $(CFLAGS)\n GOOS = @GOOS@\n@@ -1099,6 +1110,7 @@ libgo_go_objs = \\\n \truntime/pprof.lo \\\n \truntime/internal/atomic.lo \\\n \truntime/internal/atomic_c.lo \\\n+\truntime/internal/sys.lo \\\n \tsync/atomic.lo \\\n \tsync/atomic_c.lo \\\n \ttext/scanner.lo \\\n@@ -1238,7 +1250,7 @@ CHECK_DEPS = $(toolexeclibgo_DATA) $(toolexeclibgoarchive_DATA) \\\n @HAVE_STAT_TIMESPEC_FALSE@@LIBGO_IS_SOLARIS_TRUE@matchargs_os = \n @HAVE_STAT_TIMESPEC_TRUE@@LIBGO_IS_SOLARIS_TRUE@matchargs_os = --tag=solaristag\n @LIBGO_IS_SOLARIS_FALSE@matchargs_os = \n-extra_go_files_runtime = runtime_sysinfo.go version.go\n+extra_go_files_runtime = runtime_sysinfo.go\n runtime_go_lo_GOCFLAGS = -fgo-c-header=runtime.inc.tmp -fgo-compiling-runtime\n @LIBGO_IS_BSD_TRUE@golang_org_x_net_route_lo = \\\n @LIBGO_IS_BSD_TRUE@\tgolang_org/x/net/route/route.lo\n@@ -1251,6 +1263,8 @@ runtime_go_lo_GOCFLAGS = -fgo-c-header=runtime.inc.tmp -fgo-compiling-runtime\n # Also use -fno-inline to get better results from the memory profiler.\n runtime_pprof_check_GOCFLAGS = -static-libgo -fno-inline\n runtime_internal_atomic_lo_GOCFLAGS = -fgo-compiling-runtime\n+extra_go_files_runtime_internal_sys = version.go\n+runtime_internal_sys_lo_GOCFLAGS = -fgo-compiling-runtime\n \n # How to build a .gox file from a .lo file.\n BUILDGOX = \\\n@@ -1389,6 +1403,7 @@ TEST_PACKAGES = \\\n \tregexp/syntax/check \\\n \truntime/pprof/check \\\n \truntime/internal/atomic/check \\\n+\truntime/internal/sys/check \\\n \tsync/atomic/check \\\n \ttext/scanner/check \\\n \ttext/tabwriter/check \\\n@@ -3567,12 +3582,54 @@ time.c: $(srcdir)/runtime/time.goc goc2c\n version.go: s-version; @true\n s-version: Makefile\n \trm -f version.go.tmp\n-\techo \"package runtime\" > version.go.tmp\n-\techo 'const defaultGoroot = \"$(prefix)\"' >> version.go.tmp\n-\techo 'const theVersion = \"'`cat $(srcdir)/VERSION | sed 1q`' '`$(GOC) --version | sed 1q`'\"' >> version.go.tmp\n-\techo 'const theGoarch = \"'$(GOARCH)'\"' >> version.go.tmp\n-\techo 'const theGoos = \"'$(GOOS)'\"' >> version.go.tmp\n-\techo 'const theGccgoToolDir = \"$(libexecsubdir)\"' >> version.go.tmp\n+\techo \"package sys\" > version.go.tmp\n+\techo 'const DefaultGoroot = \"$(prefix)\"' >> version.go.tmp\n+\techo 'const TheVersion = \"'`cat $(srcdir)/VERSION | sed 1q`' '`$(GOC) --version | sed 1q`'\"' >> version.go.tmp\n+\techo 'const GOARCH = \"'$(GOARCH)'\"' >> version.go.tmp\n+\techo 'const GOOS = \"'$(GOOS)'\"' >> version.go.tmp\n+\techo 'const GccgoToolDir = \"$(libexecsubdir)\"' >> version.go.tmp\n+\techo >> version.go.tmp\n+\techo \"type ArchFamilyType int\" >> version.go.tmp\n+\techo >> version.go.tmp\n+\techo \"const (\" >> version.go.tmp\n+\techo \"\tUNKNOWN ArchFamilyType = iota\" >> version.go.tmp\n+\tfor a in $(ALLGOARCHFAMILY); do \\\n+\t  echo \"\t$${a}\" >> version.go.tmp; \\\n+\tdone\n+\techo \")\" >> version.go.tmp\n+\techo >> version.go.tmp\n+\tfor a in $(ALLGOARCH); do \\\n+\t  f=`echo $${a} | sed -e 's/\\(.\\).*/\\1/' -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`; \\\n+\t  n=\"$${f}`echo $${a} | sed -e 's/.//'`\"; \\\n+\t  if test \"$${a}\" = \"$(GOARCH)\"; then \\\n+\t    echo \"const Goarch$${n} = 1\" >> version.go.tmp; \\\n+\t  else \\\n+\t    echo \"const Goarch$${n} = 0\" >> version.go.tmp; \\\n+\t  fi; \\\n+\tdone\n+\techo >> version.go.tmp\n+\techo \"const (\" >> version.go.tmp\n+\techo \"\tArchFamily = $(GOARCH_FAMILY)\" >> version.go.tmp\n+\techo \"\tBigEndian = $(GOARCH_BIGENDIAN)\" >> version.go.tmp\n+\techo \"\tCacheLineSize = $(GOARCH_CACHELINESIZE)\" >> version.go.tmp\n+\techo \"\tPhysPageSize = $(GOARCH_PHYSPAGESIZE)\" >> version.go.tmp\n+\techo \"\tPCQuantum = $(GOARCH_PCQUANTUM)\" >> version.go.tmp\n+\techo \"\tInt64Align = $(GOARCH_INT64ALIGN)\" >> version.go.tmp\n+\techo \"\tHugePageSize = $(GOARCH_HUGEPAGESIZE)\" >> version.go.tmp\n+\techo \"\tMinFrameSize = $(GOARCH_MINFRAMESIZE)\" >> version.go.tmp\n+\techo \")\" >> version.go.tmp\n+\techo >> version.go.tmp\n+\tfor a in $(ALLGOOS); do \\\n+\t  f=`echo $${a} | sed -e 's/\\(.\\).*/\\1/' -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`; \\\n+\t  n=\"$${f}`echo $${a} | sed -e 's/.//'`\"; \\\n+\t  if test \"$${a}\" = \"$(GOOS)\"; then \\\n+\t    echo \"const Goos$${n} = 1\" >> version.go.tmp; \\\n+\t  else \\\n+\t    echo \"const Goos$${n} = 0\" >> version.go.tmp; \\\n+\t  fi; \\\n+\tdone\n+\techo >> version.go.tmp\n+\techo \"type Uintreg uintptr\" >> version.go.tmp\n \t$(SHELL) $(srcdir)/mvifdiff.sh version.go.tmp version.go\n \t$(STAMP) $@\n \n@@ -5003,6 +5060,15 @@ runtime/internal/atomic/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: runtime/internal/atomic/check\n \n+@go_include@ runtime/internal/sys.lo.dep\n+runtime/internal/sys.lo.dep: $(srcdir)/go/runtime/internal/sys/*.go\n+\t$(BUILDDEPS)\n+runtime/internal/sys.lo:\n+\t$(BUILDPACKAGE)\n+runtime/internal/sys/check: $(CHECK_DEPS)\n+\t@$(CHECK)\n+.PHONY: runtime/internal/sys/check\n+\n @go_include@ sync/atomic.lo.dep\n sync/atomic.lo.dep: $(srcdir)/go/sync/atomic/*.go\n \t$(BUILDDEPS)\n@@ -5433,6 +5499,8 @@ runtime/pprof.gox: runtime/pprof.lo\n \t$(BUILDGOX)\n runtime/internal/atomic.gox: runtime/internal/atomic.lo\n \t$(BUILDGOX)\n+runtime/internal/sys.gox: runtime/internal/sys.lo\n+\t$(BUILDGOX)\n \n sync/atomic.gox: sync/atomic.lo\n \t$(BUILDGOX)"}, {"sha": "d3f64d2df53b4ab0d9fd8bdb15b13a92f6fba706", "filename": "libgo/configure", "status": "modified", "additions": 125, "deletions": 324, "changes": 449, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -629,48 +629,19 @@ GO_SYSCALL_OS_ARCH_FILE\n GO_SYSCALL_OS_FILE\n GO_LIBCALL_OS_ARCH_FILE\n GO_LIBCALL_OS_FILE\n+ALLGOARCHFAMILY\n+ALLGOARCH\n+GOARCH_MINFRAMESIZE\n+GOARCH_HUGEPAGESIZE\n+GOARCH_INT64ALIGN\n+GOARCH_PCQUANTUM\n+GOARCH_PHYSPAGESIZE\n+GOARCH_CACHELINESIZE\n+GOARCH_BIGENDIAN\n+GOARCH_FAMILY\n GOARCH\n-LIBGO_IS_X86_64_FALSE\n-LIBGO_IS_X86_64_TRUE\n-LIBGO_IS_SPARC64_FALSE\n-LIBGO_IS_SPARC64_TRUE\n-LIBGO_IS_SPARC_FALSE\n-LIBGO_IS_SPARC_TRUE\n-LIBGO_IS_S390X_FALSE\n-LIBGO_IS_S390X_TRUE\n-LIBGO_IS_S390_FALSE\n-LIBGO_IS_S390_TRUE\n-LIBGO_IS_PPC64LE_FALSE\n-LIBGO_IS_PPC64LE_TRUE\n-LIBGO_IS_PPC64_FALSE\n-LIBGO_IS_PPC64_TRUE\n-LIBGO_IS_PPC_FALSE\n-LIBGO_IS_PPC_TRUE\n-LIBGO_IS_MIPS64_FALSE\n-LIBGO_IS_MIPS64_TRUE\n-LIBGO_IS_MIPSO64_FALSE\n-LIBGO_IS_MIPSO64_TRUE\n-LIBGO_IS_MIPSN64_FALSE\n-LIBGO_IS_MIPSN64_TRUE\n-LIBGO_IS_MIPSN32_FALSE\n-LIBGO_IS_MIPSN32_TRUE\n-LIBGO_IS_MIPSO32_FALSE\n-LIBGO_IS_MIPSO32_TRUE\n-LIBGO_IS_MIPS_FALSE\n-LIBGO_IS_MIPS_TRUE\n-LIBGO_IS_M68K_FALSE\n-LIBGO_IS_M68K_TRUE\n-LIBGO_IS_IA64_FALSE\n-LIBGO_IS_IA64_TRUE\n-LIBGO_IS_ARM64_FALSE\n-LIBGO_IS_ARM64_TRUE\n-LIBGO_IS_ARM_FALSE\n-LIBGO_IS_ARM_TRUE\n-LIBGO_IS_ALPHA_FALSE\n-LIBGO_IS_ALPHA_TRUE\n-LIBGO_IS_386_FALSE\n-LIBGO_IS_386_TRUE\n USE_DEJAGNU\n+ALLGOOS\n GOOS\n LIBGO_IS_BSD_FALSE\n LIBGO_IS_BSD_TRUE\n@@ -11130,7 +11101,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11133 \"configure\"\n+#line 11104 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11236,7 +11207,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11239 \"configure\"\n+#line 11210 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13522,6 +13493,11 @@ fi\n go_include=\"-include\"\n \n \n+# All known GOOS values.  This is the union of all operating systems\n+# supported by the gofrontend and all operating systems supported by\n+# the gc toolchain.\n+ALLGOOS=\"android darwin dragonfly freebsd irix linux netbsd openbsd plan9 rtems solaris windows\"\n+\n is_darwin=no\n is_freebsd=no\n is_irix=no\n@@ -13625,6 +13601,7 @@ fi\n \n \n \n+\n USE_DEJAGNU=no\n case ${host} in\n   *-*-rtems*) USE_DEJAGNU=yes ;;\n@@ -13633,34 +13610,46 @@ case ${host} in\n esac\n \n \n-is_386=no\n-is_alpha=no\n-is_arm=no\n-is_arm64=no\n-is_ia64=no\n-is_m68k=no\n-mips_abi=unknown\n-is_ppc=no\n-is_ppc64=no\n-is_ppc64le=no\n-is_s390=no\n-is_s390x=no\n-is_sparc=no\n-is_sparc64=no\n-is_x86_64=no\n+# All known GOARCH values.  This is the union of all architectures\n+# supported by the gofrontend and all architectures supported by the\n+# gc toolchain.\n+# N.B. Keep in sync with gcc/testsuite/go.test/go-test.exp (go-set-goarch).\n+ALLGOARCH=\"386 alpha amd64 amd64p32 arm armbe arm64 arm64be ia64 m68k mipso32 mipsn32 mipso64 mipsn64 mips mipsle mips64 mips64le mips64p32 mips64pe32le ppc ppc64 ppc64le s390 s390x sparc sparc64\"\n+\n+# All known GOARCH_FAMILY values.\n+ALLGOARCHFAMILY=\"I386 ALPHA AMD64 ARM ARM64 IA64 M68K MIPS MIPS64 PPC PPC64 S390 S390X SPARC SPARC64\"\n+\n GOARCH=unknown\n+GOARCH_FAMILY=unknown\n+GOARCH_BIGENDIAN=0\n+GOARCH_CACHELINESIZE=64\n+GOARCH_PHYSPAGESIZE=4096\n+GOARCH_PCQUANTUM=1\n+GOARCH_INT64ALIGN=8\n+GOARCH_HUGEPAGESIZE=0\n+GOARCH_MINFRAMESIZE=0\n case ${host} in\n   alpha*-*-*)\n-    is_alpha=yes\n     GOARCH=alpha\n+    GOARCH_FAMILY=ALPHA\n+    GOARCH_PHYSPAGESIZE=8192\n+    GOARCH_PCQUANTUM=4\n     ;;\n   aarch64-*-*)\n-    is_arm64=yes\n     GOARCH=arm64\n+    GOARCH_FAMILY=ARM64\n+    GOARCH_CACHELINESIZE=32\n+    GOARCH_PHYSPAGESIZE=65536\n+    GOARCH_PCQUANTUm=4\n+    GOARCH_MINFRAMESIZE=8\n     ;;\n   arm*-*-* | strongarm*-*-* | ep9312*-*-* | xscale-*-*)\n-    is_arm=yes\n     GOARCH=arm\n+    GOARCH_FAMILY=ARM\n+    GOARCH_CACHELINESIZE=32\n+    GOARCH_PCQUANTUM=4\n+    GOARCH_INT64ALIGN=4\n+    GOARCH_MINFRAMESIZE=4\n     ;;\n   i[34567]86-*-* | x86_64-*-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -13671,24 +13660,32 @@ case ${host} in\n #endif\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-  is_386=yes\n+  GOARCH=386\n+GOARCH_FAMILY=I386\n+GOARCH_INT64ALIGN=4\n+GOARCH_HUGEPAGESIZE=\"1 << 21\"\n+\n else\n-  is_x86_64=yes\n+  GOARCH=amd64\n+GOARCH_FAMILY=AMD64\n+GOARCH_HUGEPAGESIZE=\"1 << 21\"\n+\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-    if test \"$is_386\" = \"yes\"; then\n-      GOARCH=386\n-    else\n-      GOARCH=amd64\n-    fi\n     ;;\n   ia64-*-*)\n-    is_ia64=yes\n     GOARCH=ia64\n+    GOARCH_FAMILY=IA64\n+    GOARCH_CACHELINESIZE=16384\n+    GOARCH_PHYSPAGESIZE=8192\n     ;;\n   m68k*-*-*)\n-    is_m68k=yes\n     GOARCH=m68k\n+    GOARCH_FAMILY=M68K\n+    GOARCH_BIGENDIAN=1\n+    GOARCH_CACHELINESIZE=16\n+    GOARCH_PCQUANTUM=4\n+    GOARCH_INT64ALIGN=4\n     ;;\n   mips*-*-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -13747,6 +13744,27 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     \"n64\") GOARCH=mipsn64 ;;\n     \"o64\") GOARCH=mipso64 ;;\n     esac\n+    case \"$mips_abi\" in\n+    \"o32\" | \"n32\")\n+        GOARCH_FAMILY=MIPS\n+\tGOARCH_INT64ALIGN=4\n+\tGOARCH_MINFRAMESIZE=4\n+        ;;\n+    \"n64\" | \"o64\")\n+        GOARCH_FAMILY=MIPS64\n+\tGOARCH_MINFRAMESIZE=8\n+        ;;\n+    esac\n+    case \"${host}\" in\n+    mips*el)\n+        ;;\n+    *)\n+\tGOARCH_BIGENDIAN=1\n+        ;;\n+    esac\n+    GOARCH_CACHELINESIZE=32\n+    GOARCH_PHYSPAGESIZE=16384\n+    GOARCH_PCQUANTUM=4\n     ;;\n   rs6000*-*-* | powerpc*-*-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -13757,30 +13775,35 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n #endif\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-  is_ppc=yes\n+  GOARCH=ppc\n+GOARCH_FAMILY=PPC\n+GOARCH_BIGENDIAN=1\n+GOARCH_INT64ALIGN=4\n+\n else\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+\n+GOARCH_FAMILY=PPC64\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n #if defined(_BIG_ENDIAN) || defined(__BIG_ENDIAN__)\n #error 64be\n #endif\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-  is_ppc64le=yes\n+  GOARCH=ppc64le\n+\n else\n-  is_ppc64=yes\n+  GOARCH=ppc64\n+GOARCH_BIGENDIAN=1\n+\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-    if test \"$is_ppc\" = \"yes\"; then\n-      GOARCH=ppc\n-    elif test \"$is_ppc64\" = \"yes\"; then\n-      GOARCH=ppc64\n-    else\n-      GOARCH=ppc64le\n-    fi\n+    GOARCH_PHYSPAGESIZE=65536\n+    GOARCH_PCQUANTUM=4\n+    GOARCH_MINFRAMESIZE=32\n     ;;\n   s390*-*-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -13791,16 +13814,21 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n #endif\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-  is_s390=yes\n+  GOARCH=s390\n+GOARCH_FAMILY=S390\n+GOARCH_INT64ALIGN=4\n+GOARCH_MINFRAMESIZE=4\n+\n else\n-  is_s390x=yes\n+  GOARCH=s390x\n+GOARCH_FAMILY=S390X\n+GOARCH_MINFRAMESIZE=8\n+\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-    if test \"$is_s390\" = \"yes\"; then\n-      GOARCH=s390\n-    else\n-      GOARCH=s390x\n-    fi\n+    GOARCH_BIGENDIAN=1\n+    GOARCH_CACHELINESIZE=256\n+    GOARCH_PCQUANTUM=2\n     ;;\n   sparc*-*-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -13811,177 +13839,30 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n #endif\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-  is_sparc=yes\n+  GOARCH=sparc\n+GOARCH_FAMILY=SPARC\n+GOARCH_INT64ALIGN=4\n+\n else\n-  is_sparc64=yes\n+  GOARCH=sparc64\n+GOARCH_FAMILY=SPARC64\n+\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-    if test \"$is_sparc\" = \"yes\"; then\n-      GOARCH=sparc\n-    else\n-      GOARCH=sparc64\n-    fi\n+    GOARCH_BIGENDIAN=1\n+    GOARCH_PHYSPAGESIZE=8192\n+    GOARCH_PCQUANTUM=4\n     ;;\n esac\n- if test $is_386 = yes; then\n-  LIBGO_IS_386_TRUE=\n-  LIBGO_IS_386_FALSE='#'\n-else\n-  LIBGO_IS_386_TRUE='#'\n-  LIBGO_IS_386_FALSE=\n-fi\n-\n- if test $is_alpha = yes; then\n-  LIBGO_IS_ALPHA_TRUE=\n-  LIBGO_IS_ALPHA_FALSE='#'\n-else\n-  LIBGO_IS_ALPHA_TRUE='#'\n-  LIBGO_IS_ALPHA_FALSE=\n-fi\n-\n- if test $is_arm = yes; then\n-  LIBGO_IS_ARM_TRUE=\n-  LIBGO_IS_ARM_FALSE='#'\n-else\n-  LIBGO_IS_ARM_TRUE='#'\n-  LIBGO_IS_ARM_FALSE=\n-fi\n-\n- if test $is_arm64 = yes; then\n-  LIBGO_IS_ARM64_TRUE=\n-  LIBGO_IS_ARM64_FALSE='#'\n-else\n-  LIBGO_IS_ARM64_TRUE='#'\n-  LIBGO_IS_ARM64_FALSE=\n-fi\n-\n- if test $is_ia64 = yes; then\n-  LIBGO_IS_IA64_TRUE=\n-  LIBGO_IS_IA64_FALSE='#'\n-else\n-  LIBGO_IS_IA64_TRUE='#'\n-  LIBGO_IS_IA64_FALSE=\n-fi\n-\n- if test $is_m68k = yes; then\n-  LIBGO_IS_M68K_TRUE=\n-  LIBGO_IS_M68K_FALSE='#'\n-else\n-  LIBGO_IS_M68K_TRUE='#'\n-  LIBGO_IS_M68K_FALSE=\n-fi\n-\n- if test $mips_abi != unknown; then\n-  LIBGO_IS_MIPS_TRUE=\n-  LIBGO_IS_MIPS_FALSE='#'\n-else\n-  LIBGO_IS_MIPS_TRUE='#'\n-  LIBGO_IS_MIPS_FALSE=\n-fi\n-\n- if test $mips_abi = o32; then\n-  LIBGO_IS_MIPSO32_TRUE=\n-  LIBGO_IS_MIPSO32_FALSE='#'\n-else\n-  LIBGO_IS_MIPSO32_TRUE='#'\n-  LIBGO_IS_MIPSO32_FALSE=\n-fi\n-\n- if test $mips_abi = n32; then\n-  LIBGO_IS_MIPSN32_TRUE=\n-  LIBGO_IS_MIPSN32_FALSE='#'\n-else\n-  LIBGO_IS_MIPSN32_TRUE='#'\n-  LIBGO_IS_MIPSN32_FALSE=\n-fi\n-\n- if test $mips_abi = n64; then\n-  LIBGO_IS_MIPSN64_TRUE=\n-  LIBGO_IS_MIPSN64_FALSE='#'\n-else\n-  LIBGO_IS_MIPSN64_TRUE='#'\n-  LIBGO_IS_MIPSN64_FALSE=\n-fi\n \n- if test $mips_abi = o64; then\n-  LIBGO_IS_MIPSO64_TRUE=\n-  LIBGO_IS_MIPSO64_FALSE='#'\n-else\n-  LIBGO_IS_MIPSO64_TRUE='#'\n-  LIBGO_IS_MIPSO64_FALSE=\n-fi\n \n- if test $mips_abi = n64 -o $mips_abi = o64; then\n-  LIBGO_IS_MIPS64_TRUE=\n-  LIBGO_IS_MIPS64_FALSE='#'\n-else\n-  LIBGO_IS_MIPS64_TRUE='#'\n-  LIBGO_IS_MIPS64_FALSE=\n-fi\n \n- if test $is_ppc = yes; then\n-  LIBGO_IS_PPC_TRUE=\n-  LIBGO_IS_PPC_FALSE='#'\n-else\n-  LIBGO_IS_PPC_TRUE='#'\n-  LIBGO_IS_PPC_FALSE=\n-fi\n \n- if test $is_ppc64 = yes; then\n-  LIBGO_IS_PPC64_TRUE=\n-  LIBGO_IS_PPC64_FALSE='#'\n-else\n-  LIBGO_IS_PPC64_TRUE='#'\n-  LIBGO_IS_PPC64_FALSE=\n-fi\n \n- if test $is_ppc64le = yes; then\n-  LIBGO_IS_PPC64LE_TRUE=\n-  LIBGO_IS_PPC64LE_FALSE='#'\n-else\n-  LIBGO_IS_PPC64LE_TRUE='#'\n-  LIBGO_IS_PPC64LE_FALSE=\n-fi\n \n- if test $is_s390 = yes; then\n-  LIBGO_IS_S390_TRUE=\n-  LIBGO_IS_S390_FALSE='#'\n-else\n-  LIBGO_IS_S390_TRUE='#'\n-  LIBGO_IS_S390_FALSE=\n-fi\n \n- if test $is_s390x = yes; then\n-  LIBGO_IS_S390X_TRUE=\n-  LIBGO_IS_S390X_FALSE='#'\n-else\n-  LIBGO_IS_S390X_TRUE='#'\n-  LIBGO_IS_S390X_FALSE=\n-fi\n \n- if test $is_sparc = yes; then\n-  LIBGO_IS_SPARC_TRUE=\n-  LIBGO_IS_SPARC_FALSE='#'\n-else\n-  LIBGO_IS_SPARC_TRUE='#'\n-  LIBGO_IS_SPARC_FALSE=\n-fi\n \n- if test $is_sparc64 = yes; then\n-  LIBGO_IS_SPARC64_TRUE=\n-  LIBGO_IS_SPARC64_FALSE='#'\n-else\n-  LIBGO_IS_SPARC64_TRUE='#'\n-  LIBGO_IS_SPARC64_FALSE=\n-fi\n-\n- if test $is_x86_64 = yes; then\n-  LIBGO_IS_X86_64_TRUE=\n-  LIBGO_IS_X86_64_FALSE='#'\n-else\n-  LIBGO_IS_X86_64_TRUE='#'\n-  LIBGO_IS_X86_64_FALSE=\n-fi\n \n \n \n@@ -15798,86 +15679,6 @@ if test -z \"${LIBGO_IS_BSD_TRUE}\" && test -z \"${LIBGO_IS_BSD_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGO_IS_BSD\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n-if test -z \"${LIBGO_IS_386_TRUE}\" && test -z \"${LIBGO_IS_386_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_386\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_ALPHA_TRUE}\" && test -z \"${LIBGO_IS_ALPHA_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_ALPHA\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_ARM_TRUE}\" && test -z \"${LIBGO_IS_ARM_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_ARM\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_ARM64_TRUE}\" && test -z \"${LIBGO_IS_ARM64_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_ARM64\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_IA64_TRUE}\" && test -z \"${LIBGO_IS_IA64_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_IA64\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_M68K_TRUE}\" && test -z \"${LIBGO_IS_M68K_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_M68K\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_MIPS_TRUE}\" && test -z \"${LIBGO_IS_MIPS_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_MIPS\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_MIPSO32_TRUE}\" && test -z \"${LIBGO_IS_MIPSO32_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_MIPSO32\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_MIPSN32_TRUE}\" && test -z \"${LIBGO_IS_MIPSN32_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_MIPSN32\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_MIPSN64_TRUE}\" && test -z \"${LIBGO_IS_MIPSN64_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_MIPSN64\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_MIPSO64_TRUE}\" && test -z \"${LIBGO_IS_MIPSO64_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_MIPSO64\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_MIPS64_TRUE}\" && test -z \"${LIBGO_IS_MIPS64_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_MIPS64\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_PPC_TRUE}\" && test -z \"${LIBGO_IS_PPC_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_PPC\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_PPC64_TRUE}\" && test -z \"${LIBGO_IS_PPC64_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_PPC64\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_PPC64LE_TRUE}\" && test -z \"${LIBGO_IS_PPC64LE_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_PPC64LE\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_S390_TRUE}\" && test -z \"${LIBGO_IS_S390_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_S390\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_S390X_TRUE}\" && test -z \"${LIBGO_IS_S390X_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_S390X\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_SPARC_TRUE}\" && test -z \"${LIBGO_IS_SPARC_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_SPARC\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_SPARC64_TRUE}\" && test -z \"${LIBGO_IS_SPARC64_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_SPARC64\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n-if test -z \"${LIBGO_IS_X86_64_TRUE}\" && test -z \"${LIBGO_IS_X86_64_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_X86_64\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n if test -z \"${USING_SPLIT_STACK_TRUE}\" && test -z \"${USING_SPLIT_STACK_FALSE}\"; then\n   as_fn_error \"conditional \\\"USING_SPLIT_STACK\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "f33854503e3f34cae98f9a2e2a4e67ed38727736", "filename": "libgo/configure.ac", "status": "modified", "additions": 121, "deletions": 69, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -142,6 +142,11 @@ AC_SUBST(LIBATOMIC)\n go_include=\"-include\"\n AC_SUBST(go_include)\n \n+# All known GOOS values.  This is the union of all operating systems\n+# supported by the gofrontend and all operating systems supported by\n+# the gc toolchain.\n+ALLGOOS=\"android darwin dragonfly freebsd irix linux netbsd openbsd plan9 rtems solaris windows\"\n+\n is_darwin=no\n is_freebsd=no\n is_irix=no\n@@ -174,6 +179,7 @@ AM_CONDITIONAL(LIBGO_IS_RTEMS, test $is_rtems = yes)\n AM_CONDITIONAL(LIBGO_IS_SOLARIS, test $is_solaris = yes)\n AM_CONDITIONAL(LIBGO_IS_BSD, test $is_darwin = yes -o $is_dragonfly = yes -o $is_freebsd = yes -o $is_netbsd = yes -o $is_openbsd = yes)\n AC_SUBST(GOOS)\n+AC_SUBST(ALLGOOS)\n \n dnl Test whether we need to use DejaGNU or whether we can use the\n dnl simpler gotest approach.  We can only use gotest for a native\n@@ -186,35 +192,46 @@ case ${host} in\n esac\n AC_SUBST(USE_DEJAGNU)\n \n-dnl N.B. Keep in sync with gcc/testsuite/go.test/go-test.exp (go-set-goarch).\n-is_386=no\n-is_alpha=no\n-is_arm=no\n-is_arm64=no\n-is_ia64=no\n-is_m68k=no\n-mips_abi=unknown\n-is_ppc=no\n-is_ppc64=no\n-is_ppc64le=no\n-is_s390=no\n-is_s390x=no\n-is_sparc=no\n-is_sparc64=no\n-is_x86_64=no\n+# All known GOARCH values.  This is the union of all architectures\n+# supported by the gofrontend and all architectures supported by the\n+# gc toolchain.\n+# N.B. Keep in sync with gcc/testsuite/go.test/go-test.exp (go-set-goarch).\n+ALLGOARCH=\"386 alpha amd64 amd64p32 arm armbe arm64 arm64be ia64 m68k mipso32 mipsn32 mipso64 mipsn64 mips mipsle mips64 mips64le mips64p32 mips64pe32le ppc ppc64 ppc64le s390 s390x sparc sparc64\"\n+\n+# All known GOARCH_FAMILY values.\n+ALLGOARCHFAMILY=\"I386 ALPHA AMD64 ARM ARM64 IA64 M68K MIPS MIPS64 PPC PPC64 S390 S390X SPARC SPARC64\"\n+\n GOARCH=unknown\n+GOARCH_FAMILY=unknown\n+GOARCH_BIGENDIAN=0\n+GOARCH_CACHELINESIZE=64\n+GOARCH_PHYSPAGESIZE=4096\n+GOARCH_PCQUANTUM=1\n+GOARCH_INT64ALIGN=8\n+GOARCH_HUGEPAGESIZE=0\n+GOARCH_MINFRAMESIZE=0\n case ${host} in\n   alpha*-*-*)\n-    is_alpha=yes\n     GOARCH=alpha\n+    GOARCH_FAMILY=ALPHA\n+    GOARCH_PHYSPAGESIZE=8192\n+    GOARCH_PCQUANTUM=4\n     ;;\n   aarch64-*-*)\n-    is_arm64=yes\n     GOARCH=arm64\n+    GOARCH_FAMILY=ARM64\n+    GOARCH_CACHELINESIZE=32\n+    GOARCH_PHYSPAGESIZE=65536\n+    GOARCH_PCQUANTUm=4\n+    GOARCH_MINFRAMESIZE=8\n     ;;\n   arm*-*-* | strongarm*-*-* | ep9312*-*-* | xscale-*-*)\n-    is_arm=yes\n     GOARCH=arm\n+    GOARCH_FAMILY=ARM\n+    GOARCH_CACHELINESIZE=32\n+    GOARCH_PCQUANTUM=4\n+    GOARCH_INT64ALIGN=4\n+    GOARCH_MINFRAMESIZE=4\n     ;;\n changequote(,)dnl\n   i[34567]86-*-* | x86_64-*-*)\n@@ -223,20 +240,29 @@ changequote([,])dnl\n #ifdef __x86_64__\n #error 64-bit\n #endif],\n-[is_386=yes], [is_x86_64=yes])\n-    if test \"$is_386\" = \"yes\"; then\n-      GOARCH=386\n-    else\n-      GOARCH=amd64\n-    fi\n+[GOARCH=386\n+GOARCH_FAMILY=I386\n+GOARCH_INT64ALIGN=4\n+GOARCH_HUGEPAGESIZE=\"1 << 21\"\n+],\n+[GOARCH=amd64\n+GOARCH_FAMILY=AMD64\n+GOARCH_HUGEPAGESIZE=\"1 << 21\"\n+])\n     ;;\n   ia64-*-*)\n-    is_ia64=yes\n     GOARCH=ia64\n+    GOARCH_FAMILY=IA64\n+    GOARCH_CACHELINESIZE=16384\n+    GOARCH_PHYSPAGESIZE=8192\n     ;;\n   m68k*-*-*)\n-    is_m68k=yes\n     GOARCH=m68k\n+    GOARCH_FAMILY=M68K\n+    GOARCH_BIGENDIAN=1\n+    GOARCH_CACHELINESIZE=16\n+    GOARCH_PCQUANTUM=4\n+    GOARCH_INT64ALIGN=4\n     ;;\n   mips*-*-*)\n     AC_COMPILE_IFELSE([\n@@ -267,72 +293,98 @@ changequote([,])dnl\n     \"n64\") GOARCH=mipsn64 ;;\n     \"o64\") GOARCH=mipso64 ;;\n     esac\n+    case \"$mips_abi\" in\n+    \"o32\" | \"n32\")\n+        GOARCH_FAMILY=MIPS\n+\tGOARCH_INT64ALIGN=4\n+\tGOARCH_MINFRAMESIZE=4\n+        ;;\n+    \"n64\" | \"o64\")\n+        GOARCH_FAMILY=MIPS64\n+\tGOARCH_MINFRAMESIZE=8\n+        ;;\n+    esac\n+    case \"${host}\" in\n+    mips*el)\n+        ;;\n+    *)\n+\tGOARCH_BIGENDIAN=1\n+        ;;\n+    esac\n+    GOARCH_CACHELINESIZE=32\n+    GOARCH_PHYSPAGESIZE=16384\n+    GOARCH_PCQUANTUM=4\n     ;;\n   rs6000*-*-* | powerpc*-*-*)\n     AC_COMPILE_IFELSE([\n #ifdef _ARCH_PPC64\n #error 64-bit\n #endif],\n-[is_ppc=yes],\n-    [AC_COMPILE_IFELSE([\n+[GOARCH=ppc\n+GOARCH_FAMILY=PPC\n+GOARCH_BIGENDIAN=1\n+GOARCH_INT64ALIGN=4\n+],\n+    [\n+GOARCH_FAMILY=PPC64\n+AC_COMPILE_IFELSE([\n #if defined(_BIG_ENDIAN) || defined(__BIG_ENDIAN__)\n #error 64be\n #endif],\n-[is_ppc64le=yes],[is_ppc64=yes])])\n-    if test \"$is_ppc\" = \"yes\"; then\n-      GOARCH=ppc\n-    elif test \"$is_ppc64\" = \"yes\"; then\n-      GOARCH=ppc64\n-    else\n-      GOARCH=ppc64le\n-    fi\n+[GOARCH=ppc64le\n+],\n+[GOARCH=ppc64\n+GOARCH_BIGENDIAN=1\n+])])\n+    GOARCH_PHYSPAGESIZE=65536\n+    GOARCH_PCQUANTUM=4\n+    GOARCH_MINFRAMESIZE=32\n     ;;\n   s390*-*-*)\n     AC_COMPILE_IFELSE([\n #if defined(__s390x__)\n #error 64-bit\n #endif],\n-[is_s390=yes], [is_s390x=yes])\n-    if test \"$is_s390\" = \"yes\"; then\n-      GOARCH=s390\n-    else\n-      GOARCH=s390x\n-    fi\n+[GOARCH=s390\n+GOARCH_FAMILY=S390\n+GOARCH_INT64ALIGN=4\n+GOARCH_MINFRAMESIZE=4\n+], [GOARCH=s390x\n+GOARCH_FAMILY=S390X\n+GOARCH_MINFRAMESIZE=8\n+])\n+    GOARCH_BIGENDIAN=1\n+    GOARCH_CACHELINESIZE=256\n+    GOARCH_PCQUANTUM=2\n     ;;\n   sparc*-*-*)\n     AC_COMPILE_IFELSE([\n #if defined(__sparcv9) || defined(__arch64__)\n #error 64-bit\n #endif],\n-[is_sparc=yes], [is_sparc64=yes])\n-    if test \"$is_sparc\" = \"yes\"; then\n-      GOARCH=sparc\n-    else\n-      GOARCH=sparc64\n-    fi\n+[GOARCH=sparc\n+GOARCH_FAMILY=SPARC\n+GOARCH_INT64ALIGN=4\n+],\n+[GOARCH=sparc64\n+GOARCH_FAMILY=SPARC64\n+])\n+    GOARCH_BIGENDIAN=1\n+    GOARCH_PHYSPAGESIZE=8192\n+    GOARCH_PCQUANTUM=4\n     ;;\n esac\n-AM_CONDITIONAL(LIBGO_IS_386, test $is_386 = yes)\n-AM_CONDITIONAL(LIBGO_IS_ALPHA, test $is_alpha = yes)\n-AM_CONDITIONAL(LIBGO_IS_ARM, test $is_arm = yes)\n-AM_CONDITIONAL(LIBGO_IS_ARM64, test $is_arm64 = yes)\n-AM_CONDITIONAL(LIBGO_IS_IA64, test $is_ia64 = yes)\n-AM_CONDITIONAL(LIBGO_IS_M68K, test $is_m68k = yes)\n-AM_CONDITIONAL(LIBGO_IS_MIPS, test $mips_abi != unknown)\n-AM_CONDITIONAL(LIBGO_IS_MIPSO32, test $mips_abi = o32)\n-AM_CONDITIONAL(LIBGO_IS_MIPSN32, test $mips_abi = n32)\n-AM_CONDITIONAL(LIBGO_IS_MIPSN64, test $mips_abi = n64)\n-AM_CONDITIONAL(LIBGO_IS_MIPSO64, test $mips_abi = o64)\n-AM_CONDITIONAL(LIBGO_IS_MIPS64, test $mips_abi = n64 -o $mips_abi = o64)\n-AM_CONDITIONAL(LIBGO_IS_PPC, test $is_ppc = yes)\n-AM_CONDITIONAL(LIBGO_IS_PPC64, test $is_ppc64 = yes)\n-AM_CONDITIONAL(LIBGO_IS_PPC64LE, test $is_ppc64le = yes)\n-AM_CONDITIONAL(LIBGO_IS_S390, test $is_s390 = yes)\n-AM_CONDITIONAL(LIBGO_IS_S390X, test $is_s390x = yes)\n-AM_CONDITIONAL(LIBGO_IS_SPARC, test $is_sparc = yes)\n-AM_CONDITIONAL(LIBGO_IS_SPARC64, test $is_sparc64 = yes)\n-AM_CONDITIONAL(LIBGO_IS_X86_64, test $is_x86_64 = yes)\n AC_SUBST(GOARCH)\n+AC_SUBST(GOARCH_FAMILY)\n+AC_SUBST(GOARCH_BIGENDIAN)\n+AC_SUBST(GOARCH_CACHELINESIZE)\n+AC_SUBST(GOARCH_PHYSPAGESIZE)\n+AC_SUBST(GOARCH_PCQUANTUM)\n+AC_SUBST(GOARCH_INT64ALIGN)\n+AC_SUBST(GOARCH_HUGEPAGESIZE)\n+AC_SUBST(GOARCH_MINFRAMESIZE)\n+AC_SUBST(ALLGOARCH)\n+AC_SUBST(ALLGOARCHFAMILY)\n \n dnl Some files are only present when needed for specific architectures.\n GO_LIBCALL_OS_FILE="}, {"sha": "e0c5aacc55a66f93bab1ac243c7af3d857b86a8e", "filename": "libgo/go/runtime/extern.go", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fgo%2Fruntime%2Fextern.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fgo%2Fruntime%2Fextern.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fextern.go?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -157,6 +157,8 @@ of the run-time system.\n */\n package runtime\n \n+import \"runtime/internal/sys\"\n+\n // Gosched yields the processor, allowing other goroutines to run.  It does not\n // suspend the current goroutine, so execution resumes automatically.\n func Gosched()\n@@ -282,23 +284,23 @@ func GOROOT() string {\n \tif s != \"\" {\n \t\treturn s\n \t}\n-\treturn defaultGoroot\n+\treturn sys.DefaultGoroot\n }\n \n // Version returns the Go tree's version string.\n // It is either the commit hash and date at the time of the build or,\n // when possible, a release tag like \"go1.3\".\n func Version() string {\n-\treturn theVersion\n+\treturn sys.TheVersion\n }\n \n // GOOS is the running program's operating system target:\n // one of darwin, freebsd, linux, and so on.\n-const GOOS string = theGoos\n+const GOOS string = sys.GOOS\n \n // GOARCH is the running program's architecture target:\n // 386, amd64, arm, or s390x.\n-const GOARCH string = theGoarch\n+const GOARCH string = sys.GOARCH\n \n // GCCGOTOOLDIR is the Tool Dir for the gccgo build\n-const GCCGOTOOLDIR string = theGccgoToolDir\n+const GCCGOTOOLDIR string = sys.GccgoToolDir"}, {"sha": "f33209a887853df0f270a2a0aca869878ada20ce", "filename": "libgo/go/runtime/internal/sys/intrinsics.go", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fintrinsics.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fintrinsics.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fintrinsics.go?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package sys\n+\n+//extern __builtin_ctz\n+func builtinCtz32(uint32) int32\n+\n+//extern __builtin_ctzll\n+func builtinCtz64(uint64) int32\n+\n+//go:nosplit\n+\n+// Ctz64 counts trailing (low-order) zeroes,\n+// and if all are zero, then 64.\n+func Ctz64(x uint64) uint64 {\n+\tif x == 0 {\n+\t\treturn 64\n+\t}\n+\treturn uint64(builtinCtz64(x))\n+}\n+\n+//go:nosplit\n+\n+// Ctz32 counts trailing (low-order) zeroes,\n+// and if all are zero, then 32.\n+func Ctz32(x uint32) uint32 {\n+\tif x == 0 {\n+\t\treturn 32\n+\t}\n+\treturn uint32(builtinCtz32(x))\n+}\n+\n+//go:nosplit\n+\n+// Ctz16 counts trailing (low-order) zeroes,\n+// and if all are zero, then 16.\n+func Ctz16(x uint16) uint16 {\n+\tif x == 0 {\n+\t\treturn 16\n+\t}\n+\treturn uint16(builtinCtz32(uint32(x)))\n+}\n+\n+//go:nosplit\n+\n+// Ctz8 counts trailing (low-order) zeroes,\n+// and if all are zero, then 8.\n+func Ctz8(x uint8) uint8 {\n+\tif x == 0 {\n+\t\treturn 8\n+\t}\n+\treturn uint8(builtinCtz32(uint32(x)))\n+}\n+\n+//extern __builtin_bswap64\n+func bswap64(uint64) uint64\n+\n+//go:nosplit\n+\n+// Bswap64 returns its input with byte order reversed\n+// 0x0102030405060708 -> 0x0807060504030201\n+func Bswap64(x uint64) uint64 {\n+\treturn bswap64(x)\n+}\n+\n+//extern __builtin_bswap32\n+func bswap32(uint32) uint32\n+\n+//go:nosplit\n+\n+// Bswap32 returns its input with byte order reversed\n+// 0x01020304 -> 0x04030201\n+func Bswap32(x uint32) uint32 {\n+\treturn bswap32(x)\n+}"}, {"sha": "097631bc1e525c5ea0c297639a2034d29e4e8ec0", "filename": "libgo/go/runtime/internal/sys/intrinsics_test.go", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fintrinsics_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fintrinsics_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fintrinsics_test.go?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -0,0 +1,54 @@\n+package sys_test\n+\n+import (\n+\t\"runtime/internal/sys\"\n+\t\"testing\"\n+)\n+\n+func TestCtz64(t *testing.T) {\n+\tfor i := uint(0); i <= 64; i++ {\n+\t\tx := uint64(5) << i\n+\t\tif got := sys.Ctz64(x); got != uint64(i) {\n+\t\t\tt.Errorf(\"Ctz64(%d)=%d, want %d\", x, got, i)\n+\t\t}\n+\t}\n+}\n+func TestCtz32(t *testing.T) {\n+\tfor i := uint(0); i <= 32; i++ {\n+\t\tx := uint32(5) << i\n+\t\tif got := sys.Ctz32(x); got != uint32(i) {\n+\t\t\tt.Errorf(\"Ctz32(%d)=%d, want %d\", x, got, i)\n+\t\t}\n+\t}\n+}\n+func TestCtz16(t *testing.T) {\n+\tfor i := uint(0); i <= 16; i++ {\n+\t\tx := uint16(5) << i\n+\t\tif got := sys.Ctz16(x); got != uint16(i) {\n+\t\t\tt.Errorf(\"Ctz16(%d)=%d, want %d\", x, got, i)\n+\t\t}\n+\t}\n+}\n+func TestCtz8(t *testing.T) {\n+\tfor i := uint(0); i <= 8; i++ {\n+\t\tx := uint8(5) << i\n+\t\tif got := sys.Ctz8(x); got != uint8(i) {\n+\t\t\tt.Errorf(\"Ctz8(%d)=%d, want %d\", x, got, i)\n+\t\t}\n+\t}\n+}\n+\n+func TestBswap64(t *testing.T) {\n+\tx := uint64(0x1122334455667788)\n+\ty := sys.Bswap64(x)\n+\tif y != 0x8877665544332211 {\n+\t\tt.Errorf(\"Bswap(%x)=%x, want 0x8877665544332211\", x, y)\n+\t}\n+}\n+func TestBswap32(t *testing.T) {\n+\tx := uint32(0x11223344)\n+\ty := sys.Bswap32(x)\n+\tif y != 0x44332211 {\n+\t\tt.Errorf(\"Bswap(%x)=%x, want 0x44332211\", x, y)\n+\t}\n+}"}, {"sha": "0a94502f32dd8411aa87dc91fdc0b51a756d1718", "filename": "libgo/go/runtime/internal/sys/stubs.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fstubs.go?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package sys\n+\n+// Declarations for runtime services implemented in C or assembly.\n+\n+const PtrSize = 4 << (^uintptr(0) >> 63)           // unsafe.Sizeof(uintptr(0)) but an ideal const\n+const RegSize = 4 << (^Uintreg(0) >> 63)           // unsafe.Sizeof(uintreg(0)) but an ideal const\n+const SpAlign = 1*(1-GoarchArm64) + 16*GoarchArm64 // SP alignment: 1 normally, 16 for ARM64"}, {"sha": "586a763717dbc7672cf08d86a233a5cbc8889814", "filename": "libgo/go/runtime/internal/sys/sys.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fsys.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fsys.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Finternal%2Fsys%2Fsys.go?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// package sys contains system- and configuration- and architecture-specific\n+// constants used by the runtime.\n+package sys\n+\n+// The next line makes 'go generate' write the zgen_*.go files with\n+// per-OS and per-arch information, including constants\n+// named goos_$GOOS and goarch_$GOARCH for every\n+// known GOOS and GOARCH. The constant is 1 on the\n+// current system, 0 otherwise; multiplying by them is\n+// useful for defining GOOS- or GOARCH-specific constants.\n+//go:generate go run gengoos.go"}, {"sha": "6c82a639d5f8bc974b5978bcd0b0b8c2b1a587b4", "filename": "libgo/testsuite/Makefile.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a846424359772bfe8d76fae153e1cc21f02876a1/libgo%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2FMakefile.in?ref=a846424359772bfe8d76fae153e1cc21f02876a1", "patch": "@@ -79,6 +79,9 @@ am__can_run_installinfo = \\\n DEJATOOL = $(PACKAGE)\n RUNTESTDEFAULTFLAGS = --tool $$tool --srcdir $$srcdir\n ACLOCAL = @ACLOCAL@\n+ALLGOARCH = @ALLGOARCH@\n+ALLGOARCHFAMILY = @ALLGOARCHFAMILY@\n+ALLGOOS = @ALLGOOS@\n AMTAR = @AMTAR@\n AR = @AR@\n AUTOCONF = @AUTOCONF@\n@@ -103,6 +106,14 @@ EGREP = @EGREP@\n EXEEXT = @EXEEXT@\n FGREP = @FGREP@\n GOARCH = @GOARCH@\n+GOARCH_BIGENDIAN = @GOARCH_BIGENDIAN@\n+GOARCH_CACHELINESIZE = @GOARCH_CACHELINESIZE@\n+GOARCH_FAMILY = @GOARCH_FAMILY@\n+GOARCH_HUGEPAGESIZE = @GOARCH_HUGEPAGESIZE@\n+GOARCH_INT64ALIGN = @GOARCH_INT64ALIGN@\n+GOARCH_MINFRAMESIZE = @GOARCH_MINFRAMESIZE@\n+GOARCH_PCQUANTUM = @GOARCH_PCQUANTUM@\n+GOARCH_PHYSPAGESIZE = @GOARCH_PHYSPAGESIZE@\n GOC = @GOC@\n GOCFLAGS = @GOCFLAGS@\n GOOS = @GOOS@"}]}