{"sha": "81a68b9e3774401a99719ea29640d13125745b41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFhNjhiOWUzNzc0NDAxYTk5NzE5ZWEyOTY0MGQxMzEyNTc0NWI0MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-15T00:31:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-15T00:31:20Z"}, "message": "tree-optimization: Fix tree dse of __*_chk PR93262\n\nThe following testcase shows that GCC trunk mishandles DSE of __*_chk\ncalls.  Tail trimming of the calls is fine, we want to just decrease the\nthird argument and keep the first two and last arguments unmodified.\nBut for head trimming, we currently increment the two by head_trim and\ndecrease the third by head_trim, so\n  __builtin___memcpy_chk (&a, b_2(D), 48, 32);\n  __builtin_memset (&a, 32, 16);\ninto:\n  _5 = b_2(D) + 16;\n  __builtin___memcpy_chk (&MEM <char> [(void *)&a + 16B], _5, 32, 32);\n  __builtin_memset (&a, 32, 16);\nThis is wrong, because the 32 was the determined (maximum) size of the\ndestination (char a[32]), but &a[16] has maximum size of 16, not 32.\nThe __builtin___memcpy_chk (&MEM <char> [(void *)&a + 16B], _5, 32, 32);\ncall is just folded later into\n__builtin_memcpy (&MEM <char> [(void *)&a + 16B], _5, 32);\nbecause it says that it copies as many bytes into destination as the\ndestination has.  We need:\n  __builtin___memcpy_chk (&MEM <char> [(void *)&a + 16B], _5, 32, 16);\ninstead, which will terminate the program instead of letting it silently\noverflow the buffer.\nThe patch just punts if we'd need to decrease the last argument below 0.\n\nFortunately, release branches are unaffected.\nP.S. it was quite hard to make the runtime test working, in builtins.exp\nneither dg-options nor dg-additional-options work and builtins.exp adds\n-fno-tree-dse among several other -fno-* options.  Fortunately optimize\nattribute works.\n\n2020-01-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/93262\n\t* tree-ssa-dse.c (maybe_trim_memstar_call): For *_chk builtins,\n\tperform head trimming only if the last argument is constant,\n\teither all ones, or larger or equal to head trim, in the latter\n\tcase decrease the last argument by head_trim.\n\n\t* gcc.c-torture/execute/builtins/pr93262-chk.c: New test.\n\t* gcc.c-torture/execute/builtins/pr93262-chk-lib.c: New file.\n\t* gcc.c-torture/execute/builtins/pr93262-chk.x: New file.", "tree": {"sha": "749b04e6c82a99769493fec0ced80eb9c94d4f58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/749b04e6c82a99769493fec0ced80eb9c94d4f58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81a68b9e3774401a99719ea29640d13125745b41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a68b9e3774401a99719ea29640d13125745b41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a68b9e3774401a99719ea29640d13125745b41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a68b9e3774401a99719ea29640d13125745b41/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "623c6fddd605f8f225142d714440320e4ef54d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623c6fddd605f8f225142d714440320e4ef54d84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623c6fddd605f8f225142d714440320e4ef54d84"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "56e7995305ee4c9e63e2c6ac620b26de7cfdda75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a68b9e3774401a99719ea29640d13125745b41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a68b9e3774401a99719ea29640d13125745b41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81a68b9e3774401a99719ea29640d13125745b41", "patch": "@@ -1,5 +1,11 @@\n 2020-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/93262\n+\t* tree-ssa-dse.c (maybe_trim_memstar_call): For *_chk builtins,\n+\tperform head trimming only if the last argument is constant,\n+\teither all ones, or larger or equal to head trim, in the latter\n+\tcase decrease the last argument by head_trim.\n+\n \tPR tree-optimization/93249\n \t* tree-ssa-dse.c: Include builtins.h and gimple-fold.h.\n \t(maybe_trim_memstar_call): Move head_trim and tail_trim vars to"}, {"sha": "2e59f2861c83cad391a31e3a6dce85e65c92eeb3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a68b9e3774401a99719ea29640d13125745b41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a68b9e3774401a99719ea29640d13125745b41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81a68b9e3774401a99719ea29640d13125745b41", "patch": "@@ -1,5 +1,10 @@\n 2020-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/93262\n+\t* gcc.c-torture/execute/builtins/pr93262-chk.c: New test.\n+\t* gcc.c-torture/execute/builtins/pr93262-chk-lib.c: New file.\n+\t* gcc.c-torture/execute/builtins/pr93262-chk.x: New file.\n+\n \tPR tree-optimization/93249\n \t* gcc.c-torture/execute/pr93249.c: New test.\n "}, {"sha": "9daf13e827b5f757f79552f56c57ed55258d8eb3", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/pr93262-chk-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a68b9e3774401a99719ea29640d13125745b41/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr93262-chk-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a68b9e3774401a99719ea29640d13125745b41/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr93262-chk-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr93262-chk-lib.c?ref=81a68b9e3774401a99719ea29640d13125745b41", "patch": "@@ -0,0 +1 @@\n+#include \"lib/chk.c\""}, {"sha": "66d86b44b58a633c14f41eb4f39a91f542429623", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/pr93262-chk.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a68b9e3774401a99719ea29640d13125745b41/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr93262-chk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a68b9e3774401a99719ea29640d13125745b41/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr93262-chk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr93262-chk.c?ref=81a68b9e3774401a99719ea29640d13125745b41", "patch": "@@ -0,0 +1,55 @@\n+/* PR tree-optimization/93262 */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern void *memcpy (void *, const void *, size_t);\n+extern void *memset (void *, int, size_t);\n+\n+#include \"chk.h\"\n+\n+char b[32] = \"def\";\n+char a[32] = \"abc\";\n+char c[32] = \"ghi\";\n+int l1;\n+\n+__attribute__((noipa, noinline, noclone, optimize (\"tree-dse\"))) void\n+foo (char *b)\n+{\n+  memcpy (a, b, 48);\n+  memset (a, ' ', 16);\n+}\n+\n+__attribute__((noipa, noinline, noclone, optimize (\"tree-dse\"))) void\n+bar (void)\n+{\n+  memset (a, ' ', 48);\n+  memset (a, '0', 16);\n+}\n+\n+void\n+main_test (void)\n+{\n+#ifndef __OPTIMIZE__\n+  /* Object size checking is only intended for -O[s123].  */\n+  return;\n+#endif\n+  __asm (\"\" : \"=r\" (l1) : \"0\" (l1));\n+  chk_calls = 0;\n+  chk_fail_allowed = 1;\n+  /* Runtime checks.  */\n+  if (__builtin_setjmp (chk_fail_buf) == 0)\n+    {\n+      foo (\"0123456789abcdeffedcba9876543210ghijklmnopqrstuv\");\n+      if (!l1)\n+\tabort ();\n+    }\n+  if (__builtin_setjmp (chk_fail_buf) == 0)\n+    {\n+      bar ();\n+      if (!l1)\n+\tabort ();\n+    }\n+  if (chk_calls != 2)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "6f4746d43fbc0c334a4d15c058f5a2a7176d6f3d", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/pr93262-chk.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a68b9e3774401a99719ea29640d13125745b41/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr93262-chk.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a68b9e3774401a99719ea29640d13125745b41/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr93262-chk.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr93262-chk.x?ref=81a68b9e3774401a99719ea29640d13125745b41", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { ! [check_effective_target_nonlocal_goto] } {\n+    return 1\n+}\n+\n+return 0"}, {"sha": "374143e5785e10b15f0e53c8910bde5ba701dbc3", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a68b9e3774401a99719ea29640d13125745b41/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a68b9e3774401a99719ea29640d13125745b41/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=81a68b9e3774401a99719ea29640d13125745b41", "patch": "@@ -508,6 +508,22 @@ maybe_trim_memstar_call (ao_ref *ref, sbitmap live, gimple *stmt)\n       /* Head trimming requires adjusting all the arguments.  */\n       if (head_trim)\n \t{\n+\t  /* For __*_chk need to adjust also the last argument.  */\n+\t  if (gimple_call_num_args (stmt) == 4)\n+\t    {\n+\t      tree size = gimple_call_arg (stmt, 3);\n+\t      if (!tree_fits_uhwi_p (size))\n+\t\tbreak;\n+\t      if (!integer_all_onesp (size))\n+\t\t{\n+\t\t  unsigned HOST_WIDE_INT sz = tree_to_uhwi (size);\n+\t\t  if (sz < (unsigned) head_trim)\n+\t\t    break;\n+\t\t  tree arg = wide_int_to_tree (TREE_TYPE (size),\n+\t\t\t\t\t       sz - head_trim);\n+\t\t  gimple_call_set_arg (stmt, 3, arg);\n+\t\t}\n+\t    }\n \t  tree *dst = gimple_call_arg_ptr (stmt, 0);\n \t  increment_start_addr (stmt, dst, head_trim);\n \t  tree *src = gimple_call_arg_ptr (stmt, 1);\n@@ -527,6 +543,22 @@ maybe_trim_memstar_call (ao_ref *ref, sbitmap live, gimple *stmt)\n       /* Head trimming requires adjusting all the arguments.  */\n       if (head_trim)\n \t{\n+\t  /* For __*_chk need to adjust also the last argument.  */\n+\t  if (gimple_call_num_args (stmt) == 4)\n+\t    {\n+\t      tree size = gimple_call_arg (stmt, 3);\n+\t      if (!tree_fits_uhwi_p (size))\n+\t\tbreak;\n+\t      if (!integer_all_onesp (size))\n+\t\t{\n+\t\t  unsigned HOST_WIDE_INT sz = tree_to_uhwi (size);\n+\t\t  if (sz < (unsigned) head_trim)\n+\t\t    break;\n+\t\t  tree arg = wide_int_to_tree (TREE_TYPE (size),\n+\t\t\t\t\t       sz - head_trim);\n+\t\t  gimple_call_set_arg (stmt, 3, arg);\n+\t\t}\n+\t    }\n \t  tree *dst = gimple_call_arg_ptr (stmt, 0);\n \t  increment_start_addr (stmt, dst, head_trim);\n \t  decrement_count (stmt, head_trim);"}]}