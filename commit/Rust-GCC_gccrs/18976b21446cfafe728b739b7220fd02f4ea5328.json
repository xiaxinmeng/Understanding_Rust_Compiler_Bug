{"sha": "18976b21446cfafe728b739b7220fd02f4ea5328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg5NzZiMjE0NDZjZmFmZTcyOGI3MzliNzIyMGZkMDJmNGVhNTMyOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-01-02T12:47:26Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-01-02T12:47:26Z"}, "message": "re PR c++/5123 (tree check: expected identifier_node, have template_id_expr in build_component_ref, at cp/typeck.c:2133)\n\ncp:\n\tPR c++/5123\n\t* typeck.c (build_component_ref): Cope with a TEMPLATE_ID_EXPR.\n\t(build_x_function_call): Cope with a COMPONENT_REF containing a\n\tTEMPLATE_ID_EXPR.\ntestsuite:\n\t* g++.dg/other/component1.C: New test.\n\nFrom-SVN: r48469", "tree": {"sha": "eb0baacc25269fa28738355eb686446377997055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb0baacc25269fa28738355eb686446377997055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18976b21446cfafe728b739b7220fd02f4ea5328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18976b21446cfafe728b739b7220fd02f4ea5328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18976b21446cfafe728b739b7220fd02f4ea5328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18976b21446cfafe728b739b7220fd02f4ea5328/comments", "author": null, "committer": null, "parents": [{"sha": "303d1c55d3670b538425ce63d25230730d498fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303d1c55d3670b538425ce63d25230730d498fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303d1c55d3670b538425ce63d25230730d498fa1"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "ef4c0ddf60d4cf3f4c701867172c9d5c9c805d24", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18976b21446cfafe728b739b7220fd02f4ea5328/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18976b21446cfafe728b739b7220fd02f4ea5328/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=18976b21446cfafe728b739b7220fd02f4ea5328", "patch": "@@ -1,3 +1,10 @@\n+2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/5123\n+\t* typeck.c (build_component_ref): Cope with a TEMPLATE_ID_EXPR.\n+\t(build_x_function_call): Cope with a COMPONENT_REF containing a\n+\tTEMPLATE_ID_EXPR.\n+\n 2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/5213"}, {"sha": "b939de7044710a3d87b1451dddac9904e11ebda9", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18976b21446cfafe728b739b7220fd02f4ea5328/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18976b21446cfafe728b739b7220fd02f4ea5328/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=18976b21446cfafe728b739b7220fd02f4ea5328", "patch": "@@ -2030,7 +2030,7 @@ build_component_ref (datum, component, basetype_path, protect)\n \t\t\t      basetype_path, protect));\n \n     case TEMPLATE_DECL:\n-      error (\"invalid use of %D\", datum);\n+      error (\"invalid use of `%D'\", datum);\n       datum = error_mark_node;\n       break;\n \n@@ -2114,7 +2114,10 @@ build_component_ref (datum, component, basetype_path, protect)\n   else\n     {\n       tree name = component;\n-      if (TREE_CODE (component) == VAR_DECL)\n+      \n+      if (TREE_CODE (component) == TEMPLATE_ID_EXPR)\n+\tname = TREE_OPERAND (component, 0);\n+      else if (TREE_CODE (component) == VAR_DECL)\n \tname = DECL_NAME (component);\n       if (TREE_CODE (component) == NAMESPACE_DECL)\n         /* Source is in error, but produce a sensible diagnostic.  */\n@@ -2162,8 +2165,14 @@ build_component_ref (datum, component, basetype_path, protect)\n \t\t    }\n \t\t}\n \n+\t      fndecls = TREE_VALUE (fndecls);\n+\t      \n+\t      if (TREE_CODE (component) == TEMPLATE_ID_EXPR)\n+\t\tfndecls = build_nt (TEMPLATE_ID_EXPR,\n+\t\t\t\t    fndecls, TREE_OPERAND (component, 1));\n+\t      \n \t      ref = build (COMPONENT_REF, unknown_type_node,\n-\t\t\t   datum, TREE_VALUE (fndecls));\n+\t\t\t   datum, fndecls);\n \t      return ref;\n \t    }\n \n@@ -2699,12 +2708,22 @@ build_x_function_call (function, params, decl)\n       /* Undo what we did in build_component_ref.  */\n       decl = TREE_OPERAND (function, 0);\n       function = TREE_OPERAND (function, 1);\n-      function = DECL_NAME (OVL_CURRENT (function));\n \n-      if (template_id)\n+      if (TREE_CODE (function) == TEMPLATE_ID_EXPR)\n+\t{\n+\t  my_friendly_assert (!template_id, 20011228);\n+\n+\t  template_id = function;\n+\t}\n+      else\n \t{\n-\t  TREE_OPERAND (template_id, 0) = function;\n-\t  function = template_id;\n+\t  function = DECL_NAME (OVL_CURRENT (function));\n+\n+\t  if (template_id)\n+\t    {\n+\t      TREE_OPERAND (template_id, 0) = function;\n+\t      function = template_id;\n+\t    }\n \t}\n \n       return build_method_call (decl, function, params,"}, {"sha": "dac37bd7936f19826d38ba3feb00d9cc8aacea29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18976b21446cfafe728b739b7220fd02f4ea5328/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18976b21446cfafe728b739b7220fd02f4ea5328/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18976b21446cfafe728b739b7220fd02f4ea5328", "patch": "@@ -1,5 +1,7 @@\n 2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* g++.dg/other/component1.C: New test.\n+\n \t* g++.dg/template/ttp3.C: New test.\n \n \t* g++.dg/template/friend2.C: New test."}, {"sha": "3041a23193fabea3b02c7e9dc80fa4c6413d1b0b", "filename": "gcc/testsuite/g++.dg/other/component1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18976b21446cfafe728b739b7220fd02f4ea5328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcomponent1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18976b21446cfafe728b739b7220fd02f4ea5328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcomponent1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcomponent1.C?ref=18976b21446cfafe728b739b7220fd02f4ea5328", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 28 Dec 2001 <nathan@codesourcery.com>\n+\n+// PR 5123. ICE\n+\n+struct C {\n+  template<class T> void f(T);\n+  void g ();\n+  void g (int);\n+};\n+\n+void Foo () {\n+  C c;\n+\n+  (c.g) ();\n+  (c.f) (1);\n+  \n+  (c.f<int>) (2);\n+\n+  c.g;\t\t\t// { dg-error \"statement cannot resolve\" \"\" }\n+  c.f;\t\t        // { dg-error \"statement cannot resolve\" \"\" }\n+  c.f<int>;\t\t// { dg-error \"statement cannot resolve\" \"\" }\n+  \n+  c.g == 1;\t\t// { dg-error \"invalid use of\" \"\" }\n+  c.f == 1;\t\t// { dg-error \"invalid use of\" \"\" }\n+  c.f<int> == 1;\t// { dg-error \"invalid use of\" \"\" }\n+};"}]}