{"sha": "0e81aa85294d479dea3fb9b5a71e6f7242770af6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU4MWFhODUyOTRkNDc5ZGVhM2ZiOWI1YTcxZTZmNzI0Mjc3MGFmNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-10-13T21:23:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-10-13T21:23:36Z"}, "message": "re PR c++/50437 ([C++0x] [4.7 regression] ICE for trivial use of lambda in template function)\n\n\tPR c++/50437\n\t* cp-tree.h (struct tree_lambda_expr): Add closure field.\n\t(LAMBDA_EXPR_CLOSURE): New.\n\t* pt.c (tsubst_copy_and_build) [LAMBDA_EXPR]: Likewise.\n\t* semantics.c (build_lambda_object): Use it instead of TREE_TYPE.\n\t(begin_lambda_type, lambda_function, add_capture): Likewise.\n\t(add_default_capture, lambda_expr_this_capture): Likewise.\n\nFrom-SVN: r179944", "tree": {"sha": "0b3894e6a191ea60c4236c20d9491127731db082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b3894e6a191ea60c4236c20d9491127731db082"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e81aa85294d479dea3fb9b5a71e6f7242770af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e81aa85294d479dea3fb9b5a71e6f7242770af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e81aa85294d479dea3fb9b5a71e6f7242770af6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e81aa85294d479dea3fb9b5a71e6f7242770af6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1c141a7da0daee15591401fa0a24cf71cc4734c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c141a7da0daee15591401fa0a24cf71cc4734c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c141a7da0daee15591401fa0a24cf71cc4734c"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "0322103c94126b64617b1add5e1ee1933e2ad328", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e81aa85294d479dea3fb9b5a71e6f7242770af6", "patch": "@@ -1,3 +1,13 @@\n+2011-10-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/50437\n+\t* cp-tree.h (struct tree_lambda_expr): Add closure field.\n+\t(LAMBDA_EXPR_CLOSURE): New.\n+\t* pt.c (tsubst_copy_and_build) [LAMBDA_EXPR]: Likewise.\n+\t* semantics.c (build_lambda_object): Use it instead of TREE_TYPE.\n+\t(begin_lambda_type, lambda_function, add_capture): Likewise.\n+\t(add_default_capture, lambda_expr_this_capture): Likewise.\n+\n 2011-10-13   Diego Novillo  <dnovillo@google.com>\n \n \t* cp-tree.h (struct language_function): Rename in_function_try_handler"}, {"sha": "bae6071ebcb701cd6cf22ee739c320875d497108", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0e81aa85294d479dea3fb9b5a71e6f7242770af6", "patch": "@@ -671,13 +671,20 @@ enum cp_lambda_default_capture_mode_type {\n #define LAMBDA_EXPR_PENDING_PROXIES(NODE) \\\n   (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->pending_proxies)\n \n+/* The closure type of the lambda.  Note that the TREE_TYPE of a\n+   LAMBDA_EXPR is always NULL_TREE, because we need to instantiate the\n+   LAMBDA_EXPR in order to instantiate the type.  */\n+#define LAMBDA_EXPR_CLOSURE(NODE) \\\n+  (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->closure)\n+\n struct GTY (()) tree_lambda_expr\n {\n   struct tree_typed typed;\n   tree capture_list;\n   tree this_capture;\n   tree return_type;\n   tree extra_scope;\n+  tree closure;\n   VEC(tree,gc)* pending_proxies;\n   location_t locus;\n   enum cp_lambda_default_capture_mode_type default_capture_mode;"}, {"sha": "880f3d1510d51bf483f3b97b6dab75a58fff7b5c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0e81aa85294d479dea3fb9b5a71e6f7242770af6", "patch": "@@ -13937,8 +13937,8 @@ tsubst_copy_and_build (tree t,\n       {\n \ttree r = build_lambda_expr ();\n \n-\ttree type = tsubst (TREE_TYPE (t), args, complain, NULL_TREE);\n-\tTREE_TYPE (r) = type;\n+\ttree type = tsubst (LAMBDA_EXPR_CLOSURE (t), args, complain, NULL_TREE);\n+\tLAMBDA_EXPR_CLOSURE (r) = type;\n \tCLASSTYPE_LAMBDA_EXPR (type) = r;\n \n \tLAMBDA_EXPR_LOCATION (r)"}, {"sha": "7d37fa3e2c10b8364ce95b1e199cc427f8543fc5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0e81aa85294d479dea3fb9b5a71e6f7242770af6", "patch": "@@ -8324,7 +8324,7 @@ build_lambda_object (tree lambda_expr)\n \n   /* N2927: \"[The closure] class type is not an aggregate.\"\n      But we briefly treat it as an aggregate to make this simpler.  */\n-  type = TREE_TYPE (lambda_expr);\n+  type = LAMBDA_EXPR_CLOSURE (lambda_expr);\n   CLASSTYPE_NON_AGGREGATE (type) = 0;\n   expr = finish_compound_literal (type, expr, tf_warning_or_error);\n   CLASSTYPE_NON_AGGREGATE (type) = 1;\n@@ -8365,7 +8365,7 @@ begin_lambda_type (tree lambda)\n   type = begin_class_definition (type, /*attributes=*/NULL_TREE);\n \n   /* Cross-reference the expression and the type.  */\n-  TREE_TYPE (lambda) = type;\n+  LAMBDA_EXPR_CLOSURE (lambda) = type;\n   CLASSTYPE_LAMBDA_EXPR (type) = lambda;\n \n   return type;\n@@ -8399,7 +8399,7 @@ lambda_function (tree lambda)\n {\n   tree type;\n   if (TREE_CODE (lambda) == LAMBDA_EXPR)\n-    type = TREE_TYPE (lambda);\n+    type = LAMBDA_EXPR_CLOSURE (lambda);\n   else\n     type = lambda;\n   gcc_assert (LAMBDA_TYPE_P (type));\n@@ -8714,7 +8714,7 @@ add_capture (tree lambda, tree id, tree initializer, bool by_reference_p,\n \n   /* If TREE_TYPE isn't set, we're still in the introducer, so check\n      for duplicates.  */\n-  if (!TREE_TYPE (lambda))\n+  if (!LAMBDA_EXPR_CLOSURE (lambda))\n     {\n       if (IDENTIFIER_MARKED (name))\n \t{\n@@ -8740,13 +8740,14 @@ add_capture (tree lambda, tree id, tree initializer, bool by_reference_p,\n     LAMBDA_EXPR_THIS_CAPTURE (lambda) = member;\n \n   /* Add it to the appropriate closure class if we've started it.  */\n-  if (current_class_type && current_class_type == TREE_TYPE (lambda))\n+  if (current_class_type\n+      && current_class_type == LAMBDA_EXPR_CLOSURE (lambda))\n     finish_member_declaration (member);\n \n   LAMBDA_EXPR_CAPTURE_LIST (lambda)\n     = tree_cons (member, initializer, LAMBDA_EXPR_CAPTURE_LIST (lambda));\n \n-  if (TREE_TYPE (lambda))\n+  if (LAMBDA_EXPR_CLOSURE (lambda))\n     return build_capture_proxy (member);\n   /* For explicit captures we haven't started the function yet, so we wait\n      and build the proxy from cp_parser_lambda_body.  */\n@@ -8789,7 +8790,7 @@ add_default_capture (tree lambda_stack, tree id, tree initializer)\n     {\n       tree lambda = TREE_VALUE (node);\n \n-      current_class_type = TREE_TYPE (lambda);\n+      current_class_type = LAMBDA_EXPR_CLOSURE (lambda);\n       var = add_capture (lambda,\n                             id,\n                             initializer,\n@@ -8820,7 +8821,7 @@ lambda_expr_this_capture (tree lambda)\n   if (!this_capture\n       && LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda) != CPLD_NONE)\n     {\n-      tree containing_function = TYPE_CONTEXT (TREE_TYPE (lambda));\n+      tree containing_function = TYPE_CONTEXT (LAMBDA_EXPR_CLOSURE (lambda));\n       tree lambda_stack = tree_cons (NULL_TREE, lambda, NULL_TREE);\n       tree init = NULL_TREE;\n \n@@ -8870,7 +8871,8 @@ lambda_expr_this_capture (tree lambda)\n   else\n     {\n       /* To make sure that current_class_ref is for the lambda.  */\n-      gcc_assert (TYPE_MAIN_VARIANT (TREE_TYPE (current_class_ref)) == TREE_TYPE (lambda));\n+      gcc_assert (TYPE_MAIN_VARIANT (TREE_TYPE (current_class_ref))\n+\t\t  == LAMBDA_EXPR_CLOSURE (lambda));\n \n       result = this_capture;\n "}, {"sha": "3c15036747cc8f90bbf2ea1c94c963e36e13f5f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e81aa85294d479dea3fb9b5a71e6f7242770af6", "patch": "@@ -1,5 +1,8 @@\n 2011-10-13  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/50437\n+\t* g++.dg/cpp0x/lambda/lambda-auto1.C: New.\n+\n \tPR c++/50618\n \t* g++.dg/init/vbase1.C: New.\n "}, {"sha": "b5ba06637544064711482fffc17169f0c73a734e", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-auto1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-auto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e81aa85294d479dea3fb9b5a71e6f7242770af6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-auto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-auto1.C?ref=0e81aa85294d479dea3fb9b5a71e6f7242770af6", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/50437\n+// { dg-options -std=c++0x }\n+\n+template <typename T>\n+void f()\n+{\n+    auto g = [](T t){ return t == 0; };\n+    g(T());\n+}\n+\n+int main()\n+{\n+    f<int>();\n+}"}]}