{"sha": "75d25a02fcd6d85c314700b5b2e03743f1bec04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVkMjVhMDJmY2Q2ZDg1YzMxNDcwMGI1YjJlMDM3NDNmMWJlYzA0YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2014-10-22T12:01:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-10-22T12:01:59Z"}, "message": "recog.h (extract_constrain_insn): Declare.\n\ngcc/\n\t* recog.h (extract_constrain_insn): Declare.\n\t* recog.c (extract_constrain_insn): New function.\n\t* lra.c (check_rtl): Use it.\n\t* postreload.c (reload_cse_simplify_operands): Likewise.\n\t* reg-stack.c (check_asm_stack_operands): Likewise.\n\t(subst_asm_stack_regs): Likewise.\n\t* regcprop.c (copyprop_hardreg_forward_1): Likewise.\n\t* regrename.c (build_def_use): Likewise.\n\t* sel-sched.c (get_reg_class): Likewise.\n\t* config/arm/arm.c (note_invalid_constants): Likewise.\n\t* config/s390/predicates.md (execute_operation): Likewise.\n\nFrom-SVN: r216553", "tree": {"sha": "1cfd60a35211e1d5fcc4f29a8a6797c182569882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cfd60a35211e1d5fcc4f29a8a6797c182569882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75d25a02fcd6d85c314700b5b2e03743f1bec04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d25a02fcd6d85c314700b5b2e03743f1bec04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d25a02fcd6d85c314700b5b2e03743f1bec04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d25a02fcd6d85c314700b5b2e03743f1bec04a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d95a2703476dcbacd128577bb0c41b74588132b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95a2703476dcbacd128577bb0c41b74588132b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d95a2703476dcbacd128577bb0c41b74588132b1"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "5de3d9f58b1dba6fe395102c6a57def2f0e553d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75d25a02fcd6d85c314700b5b2e03743f1bec04a", "patch": "@@ -1,3 +1,17 @@\n+2014-10-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* recog.h (extract_constrain_insn): Declare.\n+\t* recog.c (extract_constrain_insn): New function.\n+\t* lra.c (check_rtl): Use it.\n+\t* postreload.c (reload_cse_simplify_operands): Likewise.\n+\t* reg-stack.c (check_asm_stack_operands): Likewise.\n+\t(subst_asm_stack_regs): Likewise.\n+\t* regcprop.c (copyprop_hardreg_forward_1): Likewise.\n+\t* regrename.c (build_def_use): Likewise.\n+\t* sel-sched.c (get_reg_class): Likewise.\n+\t* config/arm/arm.c (note_invalid_constants): Likewise.\n+\t* config/s390/predicates.md (execute_operation): Likewise.\n+\n 2014-10-22  Jakub Jelinek  <jakub@redhat.com>\n \t    Yury Gribov  <y.gribov@samsung.com>\n "}, {"sha": "40473d006608eb0b241c42b50a3938d95709e5e6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=75d25a02fcd6d85c314700b5b2e03743f1bec04a", "patch": "@@ -17027,10 +17027,7 @@ note_invalid_constants (rtx_insn *insn, HOST_WIDE_INT address, int do_pushes)\n {\n   int opno;\n \n-  extract_insn (insn);\n-\n-  if (!constrain_operands (1))\n-    fatal_insn_not_found (insn);\n+  extract_constrain_insn (insn);\n \n   if (recog_data.n_alternatives == 0)\n     return;"}, {"sha": "237cfa77533d514985b0a97fe85f848a80248be0", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=75d25a02fcd6d85c314700b5b2e03743f1bec04a", "patch": "@@ -406,8 +406,7 @@\n   if (icode < 0)\n     return false;\n \n-  extract_insn (insn);\n-  constrain_operands (1);\n+  extract_constrain_insn (insn);\n \n   return which_alternative >= 0;\n })"}, {"sha": "6326131d8c36573d00b9109003819d4628f6874b", "filename": "gcc/lra.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=75d25a02fcd6d85c314700b5b2e03743f1bec04a", "patch": "@@ -1923,8 +1923,9 @@ check_rtl (bool final_p)\n       {\n \tif (final_p)\n \t  {\n-\t    extract_insn (insn);\n-\t    lra_assert (constrain_operands (1));\n+#ifdef ENABLED_CHECKING\n+\t    extract_constrain_insn (insn);\n+#endif\n \t    continue;\n \t  }\n \t/* LRA code is based on assumption that all addresses can be"}, {"sha": "f460bf3a3a4a5279f8fc031be026bcbd09bf6f38", "filename": "gcc/postreload.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=75d25a02fcd6d85c314700b5b2e03743f1bec04a", "patch": "@@ -405,15 +405,11 @@ reload_cse_simplify_operands (rtx_insn *insn, rtx testreg)\n   /* Array of alternatives, sorted in order of decreasing desirability.  */\n   int *alternative_order;\n \n-  extract_insn (insn);\n+  extract_constrain_insn (insn);\n \n   if (recog_data.n_alternatives == 0 || recog_data.n_operands == 0)\n     return 0;\n \n-  /* Figure out which alternative currently matches.  */\n-  if (! constrain_operands (1))\n-    fatal_insn_not_found (insn);\n-\n   alternative_reject = XALLOCAVEC (int, recog_data.n_alternatives);\n   alternative_nregs = XALLOCAVEC (int, recog_data.n_alternatives);\n   alternative_order = XALLOCAVEC (int, recog_data.n_alternatives);"}, {"sha": "199c7debbf8343b16a0088381fc3a28854a7837d", "filename": "gcc/recog.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=75d25a02fcd6d85c314700b5b2e03743f1bec04a", "patch": "@@ -2115,6 +2115,17 @@ extract_insn_cached (rtx_insn *insn)\n   recog_data.insn = insn;\n }\n \n+/* Do uncached extract_insn, constrain_operands and complain about failures.\n+   This should be used when extracting a pre-existing constrained instruction\n+   if the caller wants to know which alternative was chosen.  */\n+void\n+extract_constrain_insn (rtx_insn *insn)\n+{\n+  extract_insn (insn);\n+  if (!constrain_operands (reload_completed))\n+    fatal_insn_not_found (insn);\n+}\n+\n /* Do cached extract_insn, constrain_operands and complain about failures.\n    Used by insn_attrtab.  */\n void"}, {"sha": "d3619cbbe5a531fe99182adbccce7cfd71d4f8d3", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=75d25a02fcd6d85c314700b5b2e03743f1bec04a", "patch": "@@ -134,6 +134,7 @@ extern void add_clobbers (rtx, int);\n extern int added_clobbers_hard_reg_p (int);\n extern void insn_extract (rtx_insn *);\n extern void extract_insn (rtx_insn *);\n+extern void extract_constrain_insn (rtx_insn *insn);\n extern void extract_constrain_insn_cached (rtx_insn *);\n extern void extract_insn_cached (rtx_insn *);\n extern void preprocess_constraints (int, int, const char **,"}, {"sha": "88327ece0a189a1b551622079a10100e9b0091f3", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=75d25a02fcd6d85c314700b5b2e03743f1bec04a", "patch": "@@ -474,8 +474,7 @@ check_asm_stack_operands (rtx_insn *insn)\n \n   /* Find out what the constraints require.  If no constraint\n      alternative matches, this asm is malformed.  */\n-  extract_insn (insn);\n-  constrain_operands (1);\n+  extract_constrain_insn (insn);\n \n   preprocess_constraints (insn);\n \n@@ -2021,8 +2020,7 @@ subst_asm_stack_regs (rtx_insn *insn, stack_ptr regstack)\n   /* Find out what the constraints required.  If no constraint\n      alternative matches, that is a compiler bug: we should have caught\n      such an insn in check_asm_stack_operands.  */\n-  extract_insn (insn);\n-  constrain_operands (1);\n+  extract_constrain_insn (insn);\n \n   preprocess_constraints (insn);\n   const operand_alternative *op_alt = which_op_alt ();"}, {"sha": "e935a3572040cb7db127a9ab6582457e227e2bdc", "filename": "gcc/regcprop.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=75d25a02fcd6d85c314700b5b2e03743f1bec04a", "patch": "@@ -767,9 +767,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \t}\n \n       set = single_set (insn);\n-      extract_insn (insn);\n-      if (! constrain_operands (1))\n-\tfatal_insn_not_found (insn);\n+      extract_constrain_insn (insn);\n       preprocess_constraints (insn);\n       const operand_alternative *op_alt = which_op_alt ();\n       n_ops = recog_data.n_operands;\n@@ -870,9 +868,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \t\t}\n \t      /* We need to re-extract as validate_change clobbers\n \t\t recog_data.  */\n-\t      extract_insn (insn);\n-\t      if (! constrain_operands (1))\n-\t\tfatal_insn_not_found (insn);\n+\t      extract_constrain_insn (insn);\n \t      preprocess_constraints (insn);\n \t    }\n \n@@ -898,9 +894,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \t\t    }\n \t\t  /* We need to re-extract as validate_change clobbers\n \t\t     recog_data.  */\n-\t\t  extract_insn (insn);\n-\t\t  if (! constrain_operands (1))\n-\t\t    fatal_insn_not_found (insn);\n+\t\t  extract_constrain_insn (insn);\n \t\t  preprocess_constraints (insn);\n \t\t}\n \t    }"}, {"sha": "26bc8606b276a408eda1db67fcf369a59bb0b11c", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=75d25a02fcd6d85c314700b5b2e03743f1bec04a", "patch": "@@ -1569,9 +1569,7 @@ build_def_use (basic_block bb)\n \t     to be marked unrenamable or even cause us to abort the entire\n \t     basic block.  */\n \n-\t  extract_insn (insn);\n-\t  if (! constrain_operands (1))\n-\t    fatal_insn_not_found (insn);\n+\t  extract_constrain_insn (insn);\n \t  preprocess_constraints (insn);\n \t  const operand_alternative *op_alt = which_op_alt ();\n \t  n_ops = recog_data.n_operands;"}, {"sha": "377e1e9b5f6ed7e71d576768096a3b4f950b76cd", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d25a02fcd6d85c314700b5b2e03743f1bec04a/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=75d25a02fcd6d85c314700b5b2e03743f1bec04a", "patch": "@@ -998,9 +998,7 @@ get_reg_class (rtx_insn *insn)\n {\n   int i, n_ops;\n \n-  extract_insn (insn);\n-  if (! constrain_operands (1))\n-    fatal_insn_not_found (insn);\n+  extract_constrain_insn (insn);\n   preprocess_constraints (insn);\n   n_ops = recog_data.n_operands;\n "}]}