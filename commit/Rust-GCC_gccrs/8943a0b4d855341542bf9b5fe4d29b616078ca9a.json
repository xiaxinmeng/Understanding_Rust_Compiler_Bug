{"sha": "8943a0b4d855341542bf9b5fe4d29b616078ca9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0M2EwYjRkODU1MzQxNTQyYmY5YjVmZTRkMjliNjE2MDc4Y2E5YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-07-22T00:42:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-07-22T00:42:54Z"}, "message": "expr.c (expand_expr): Don't use GOTO_SUBROUTINE_EXPR when finally_block can be re-expanded.\n\n        * expr.c (expand_expr) [TRY_FINALLY_EXPR]: Don't use\n        GOTO_SUBROUTINE_EXPR when finally_block can be re-expanded.\n\n        * lang.c (java_unsafe_for_reeval): New.\n        (LANG_HOOKS_UNSAFE_FOR_REEVAL): New.\n\nFrom-SVN: r55636", "tree": {"sha": "9405da1d51ba2f549696823714d6adf0ba1ea1fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9405da1d51ba2f549696823714d6adf0ba1ea1fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8943a0b4d855341542bf9b5fe4d29b616078ca9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8943a0b4d855341542bf9b5fe4d29b616078ca9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8943a0b4d855341542bf9b5fe4d29b616078ca9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8943a0b4d855341542bf9b5fe4d29b616078ca9a/comments", "author": null, "committer": null, "parents": [{"sha": "b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1aef35bb1ba3ee75c7e9831b3248ab8d1f7b353"}], "stats": {"total": 91, "additions": 72, "deletions": 19}, "files": [{"sha": "55b245a0e72b50c0b93b00c2c26f80096a2eb7e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8943a0b4d855341542bf9b5fe4d29b616078ca9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8943a0b4d855341542bf9b5fe4d29b616078ca9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8943a0b4d855341542bf9b5fe4d29b616078ca9a", "patch": "@@ -1,3 +1,8 @@\n+2002-07-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.c (expand_expr) [TRY_FINALLY_EXPR]: Don't use\n+\tGOTO_SUBROUTINE_EXPR when finally_block can be re-expanded.\n+\n 2002-07-21  Richard Henderson  <rth@redhat.com>\n \n \t* unroll.c (find_splittable_givs): Do not split DEST_ADDR givs"}, {"sha": "e70bf905b205fb44983fd14b451722cce59e3b72", "filename": "gcc/expr.c", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8943a0b4d855341542bf9b5fe4d29b616078ca9a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8943a0b4d855341542bf9b5fe4d29b616078ca9a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8943a0b4d855341542bf9b5fe4d29b616078ca9a", "patch": "@@ -8965,29 +8965,49 @@ expand_expr (exp, target, tmode, modifier)\n       {\n \ttree try_block = TREE_OPERAND (exp, 0);\n \ttree finally_block = TREE_OPERAND (exp, 1);\n-\trtx finally_label = gen_label_rtx ();\n-\trtx done_label = gen_label_rtx ();\n-\trtx return_link = gen_reg_rtx (Pmode);\n-\ttree cleanup = build (GOTO_SUBROUTINE_EXPR, void_type_node,\n-\t\t\t      (tree) finally_label, (tree) return_link);\n-\tTREE_SIDE_EFFECTS (cleanup) = 1;\n \n-\t/* Start a new binding layer that will keep track of all cleanup\n-\t   actions to be performed.  */\n-\texpand_start_bindings (2);\n+        if (unsafe_for_reeval (finally_block) > 1)\n+\t  {\n+\t    /* In this case, wrapping FINALLY_BLOCK in an UNSAVE_EXPR\n+\t       is not sufficient, so we cannot expand the block twice.\n+\t       So we play games with GOTO_SUBROUTINE_EXPR to let us\n+\t       expand the thing only once.  */\n+\n+\t    rtx finally_label = gen_label_rtx ();\n+\t    rtx done_label = gen_label_rtx ();\n+\t    rtx return_link = gen_reg_rtx (Pmode);\n+\t    tree cleanup = build (GOTO_SUBROUTINE_EXPR, void_type_node,\n+\t\t\t          (tree) finally_label, (tree) return_link);\n+\t    TREE_SIDE_EFFECTS (cleanup) = 1;\n+\n+\t    /* Start a new binding layer that will keep track of all cleanup\n+\t       actions to be performed.  */\n+\t    expand_start_bindings (2);\n+\t    target_temp_slot_level = temp_slot_level;\n+\n+\t    expand_decl_cleanup (NULL_TREE, cleanup);\n+\t    op0 = expand_expr (try_block, target, tmode, modifier);\n+\n+\t    preserve_temp_slots (op0);\n+\t    expand_end_bindings (NULL_TREE, 0, 0);\n+\t    emit_jump (done_label);\n+\t    emit_label (finally_label);\n+\t    expand_expr (finally_block, const0_rtx, VOIDmode, 0);\n+\t    emit_indirect_jump (return_link);\n+\t    emit_label (done_label);\n+\t  }\n+\telse\n+\t  {\n+\t    expand_start_bindings (2);\n+\t    target_temp_slot_level = temp_slot_level;\n \n-\ttarget_temp_slot_level = temp_slot_level;\n+\t    expand_decl_cleanup (NULL_TREE, finally_block);\n+\t    op0 = expand_expr (try_block, target, tmode, modifier);\n \n-\texpand_decl_cleanup (NULL_TREE, cleanup);\n-\top0 = expand_expr (try_block, target, tmode, modifier);\n+\t    preserve_temp_slots (op0);\n+\t    expand_end_bindings (NULL_TREE, 0, 0);\n+\t  }\n \n-\tpreserve_temp_slots (op0);\n-\texpand_end_bindings (NULL_TREE, 0, 0);\n-\temit_jump (done_label);\n-\temit_label (finally_label);\n-\texpand_expr (finally_block, const0_rtx, VOIDmode, 0);\n-\temit_indirect_jump (return_link);\n-\temit_label (done_label);\n \treturn op0;\n       }\n "}, {"sha": "2ccdd0585dd9febf68e3f385f2b67c166cc402db", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8943a0b4d855341542bf9b5fe4d29b616078ca9a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8943a0b4d855341542bf9b5fe4d29b616078ca9a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8943a0b4d855341542bf9b5fe4d29b616078ca9a", "patch": "@@ -1,3 +1,8 @@\n+2002-07-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* lang.c (java_unsafe_for_reeval): New.\n+\t(LANG_HOOKS_UNSAFE_FOR_REEVAL): New.\n+\n 2002-07-21  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* jcf-path.c (GET_ENV_PATH_LIST): Remove."}, {"sha": "6d7affacbc9c57a05ccd7ad79afe0a07a38483e3", "filename": "gcc/java/lang.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8943a0b4d855341542bf9b5fe4d29b616078ca9a/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8943a0b4d855341542bf9b5fe4d29b616078ca9a/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=8943a0b4d855341542bf9b5fe4d29b616078ca9a", "patch": "@@ -61,6 +61,7 @@ static void java_print_error_function PARAMS ((diagnostic_context *,\n static int process_option_with_no PARAMS ((const char *,\n \t\t\t\t\t   const struct string_option *,\n \t\t\t\t\t   int));\n+static int java_unsafe_for_reeval PARAMS ((tree));\n \n #ifndef TARGET_OBJECT_SUFFIX\n # define TARGET_OBJECT_SUFFIX \".o\"\n@@ -238,6 +239,8 @@ struct language_function GTY(())\n #define LANG_HOOKS_POST_OPTIONS java_post_options\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE java_parse_file\n+#undef LANG_HOOKS_UNSAFE_FOR_REEVAL\n+#define LANG_HOOKS_UNSAFE_FOR_REEVAL java_unsafe_for_reeval\n #undef LANG_HOOKS_MARK_ADDRESSABLE\n #define LANG_HOOKS_MARK_ADDRESSABLE java_mark_addressable\n #undef LANG_HOOKS_EXPAND_EXPR\n@@ -794,4 +797,24 @@ java_post_options ()\n   return false;\n }\n \n+/* Called from unsafe_for_reeval.  */\n+static int\n+java_unsafe_for_reeval (t)\n+     tree t;\n+{\n+  switch (TREE_CODE (t))\n+    {\n+    case BLOCK:\n+      /* Our expander tries to expand the variables twice.  Boom.  */\n+      if (BLOCK_EXPR_DECLS (t) != NULL)\n+\treturn 2;\n+      return unsafe_for_reeval (BLOCK_EXPR_BODY (t));\n+\n+    default:\n+      break;\n+    }\n+\n+  return -1;\n+}\n+\n #include \"gt-java-lang.h\""}]}