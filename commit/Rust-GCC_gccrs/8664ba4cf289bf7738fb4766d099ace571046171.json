{"sha": "8664ba4cf289bf7738fb4766d099ace571046171", "node_id": "C_kwDOANBUbNoAKDg2NjRiYTRjZjI4OWJmNzczOGZiNDc2NmQwOTlhY2U1NzEwNDYxNzE", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-03-18T05:41:01Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-17T08:36:36Z"}, "message": "Add lowering for if-let expressions\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-expr.cc\n\t(TypeCheckExpr::visit): Add implementation for IfLetExprConseqElse.\n\t* typecheck/rust-hir-type-check-expr.h:\n\t(TypeCheckExpr::visit): Remove stub implementation for IfLetExprConseqElse.\n\t* hir/rust-ast-lower-expr.cc\n\t(ASTLoweringExpr::visit): Lower IfLetExpr{,ConseqElse}.\n\t* hir/rust-ast-lower-expr.h:\n\t(ASTLoweringExpr::visit): Likewise.\n\t* hir/rust-ast-lower-block.h\n\t(ASTLoweringIfLetBlock::visit): Lower IfLetExprConseqElse.\n\t(ASTLoweringExprWithBlock::visit): Likewise.\n\t* hir/rust-ast-lower.cc\n\t(ASTLoweringIfLetBlock::visit): Lower IfLetExprConseqElse.\n\t* hir/tree/rust-hir-expr.h\n\t(IfLetExprConseqElse::IfLetExprConseqElse): Make constructor more general.\n\t(IfLetExprConseqElse::vis_else_block): Add.\n\t(IfLetExprConseqElse::get_else_block): Add.\n\t* resolve/rust-ast-resolve-expr.cc\n\t(ResolveExpr::visit): Add IfLetExprConseqElse visitor.\n\t* resolve/rust-ast-resolve-expr.h\n\t(ResolveExpr::visit): Add IfLetExprConseqElse visitor.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/if_let_expr.rs: Increase test coverage.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "85250f3d14ad175481f65096590b0c6067834cfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85250f3d14ad175481f65096590b0c6067834cfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8664ba4cf289bf7738fb4766d099ace571046171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8664ba4cf289bf7738fb4766d099ace571046171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8664ba4cf289bf7738fb4766d099ace571046171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8664ba4cf289bf7738fb4766d099ace571046171/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cde6f8d9b531a129e2058c23729b74c976d08c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde6f8d9b531a129e2058c23729b74c976d08c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde6f8d9b531a129e2058c23729b74c976d08c4a"}], "stats": {"total": 135, "additions": 130, "deletions": 5}, "files": [{"sha": "0f90549b1c3f08f74ffdf57dfb1eb5da9392a7b0", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=8664ba4cf289bf7738fb4766d099ace571046171", "patch": "@@ -130,6 +130,8 @@ class ASTLoweringIfLetBlock : public ASTLoweringBase\n \n   void visit (AST::IfLetExpr &expr) override;\n \n+  void visit (AST::IfLetExprConseqElse &expr) override;\n+\n private:\n   ASTLoweringIfLetBlock () : ASTLoweringBase (), translated (nullptr) {}\n \n@@ -172,6 +174,11 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n     translated = ASTLoweringIfLetBlock::translate (&expr);\n   }\n \n+  void visit (AST::IfLetExprConseqElse &expr) override\n+  {\n+    translated = ASTLoweringIfLetBlock::translate (&expr);\n+  }\n+\n   void visit (AST::BlockExpr &expr) override\n   {\n     translated = ASTLoweringBlock::translate (&expr, &terminated);"}, {"sha": "d05d1277e6657f26e377ff59e95346b2a94212d3", "filename": "gcc/rust/hir/rust-ast-lower-expr.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc?ref=8664ba4cf289bf7738fb4766d099ace571046171", "patch": "@@ -103,6 +103,18 @@ ASTLoweringExpr::visit (AST::IfExprConseqElse &expr)\n   translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n }\n \n+void\n+ASTLoweringExpr::visit (AST::IfLetExpr &expr)\n+{\n+  translated = ASTLoweringIfLetBlock::translate (&expr);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::IfLetExprConseqElse &expr)\n+{\n+  translated = ASTLoweringIfLetBlock::translate (&expr);\n+}\n+\n void\n ASTLoweringExpr::visit (AST::BlockExpr &expr)\n {"}, {"sha": "cfd755cdb098353fb8cb13a21aa2d4b17c0db48d", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=8664ba4cf289bf7738fb4766d099ace571046171", "patch": "@@ -78,6 +78,8 @@ class ASTLoweringExpr : public ASTLoweringBase\n   void visit (AST::TupleExpr &expr) override;\n   void visit (AST::IfExpr &expr) override;\n   void visit (AST::IfExprConseqElse &expr) override;\n+  void visit (AST::IfLetExpr &expr) override;\n+  void visit (AST::IfLetExprConseqElse &expr) override;\n   void visit (AST::BlockExpr &expr) override;\n   void visit (AST::UnsafeBlockExpr &expr) override;\n   void visit (AST::PathInExpression &expr) override;"}, {"sha": "ca59bf2facaee6e0d4da270b61af57487b27da41", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=8664ba4cf289bf7738fb4766d099ace571046171", "patch": "@@ -227,6 +227,40 @@ ASTLoweringIfLetBlock::visit (AST::IfLetExpr &expr)\n \t\t\t\t   expr.get_locus ());\n }\n \n+void\n+ASTLoweringIfLetBlock::visit (AST::IfLetExprConseqElse &expr)\n+{\n+  std::vector<std::unique_ptr<HIR::Pattern>> patterns;\n+  for (auto &pattern : expr.get_patterns ())\n+    {\n+      HIR::Pattern *ptrn = ASTLoweringPattern::translate (pattern.get ());\n+      patterns.push_back (std::unique_ptr<HIR::Pattern> (ptrn));\n+    }\n+  HIR::Expr *value_ptr\n+    = ASTLoweringExpr::translate (expr.get_value_expr ().get ());\n+\n+  bool ignored_terminated = false;\n+  HIR::BlockExpr *block\n+    = ASTLoweringBlock::translate (expr.get_if_block ().get (),\n+\t\t\t\t   &ignored_terminated);\n+\n+  HIR::ExprWithBlock *else_block\n+    = ASTLoweringExprWithBlock::translate (expr.get_else_block ().get (),\n+\t\t\t\t\t   &ignored_terminated);\n+\n+  rust_assert (else_block);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::IfLetExprConseqElse (\n+    mapping, std::move (patterns), std::unique_ptr<HIR::Expr> (value_ptr),\n+    std::unique_ptr<HIR::BlockExpr> (block),\n+    std::unique_ptr<HIR::ExprWithBlock> (else_block), expr.get_locus ());\n+}\n+\n // rust-ast-lower-struct-field-expr.h\n \n void"}, {"sha": "30a6bf6ef3876eadbb3c0992cdf52c82c9f66d96", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=8664ba4cf289bf7738fb4766d099ace571046171", "patch": "@@ -3457,7 +3457,7 @@ class IfLetExprConseqElse : public IfLetExpr\n     Analysis::NodeMapping mappings,\n     std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n     std::unique_ptr<Expr> value, std::unique_ptr<BlockExpr> if_block,\n-    std::unique_ptr<BlockExpr> else_block, Location locus)\n+    std::unique_ptr<ExprWithBlock> else_block, Location locus)\n     : IfLetExpr (std::move (mappings), std::move (match_arm_patterns),\n \t\t std::move (value), std::move (if_block), locus),\n       else_block (std::move (else_block))\n@@ -3489,6 +3489,10 @@ class IfLetExprConseqElse : public IfLetExpr\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRExpressionVisitor &vis) override;\n \n+  void vis_else_block (HIRFullVisitor &vis) { else_block->accept_vis (vis); }\n+\n+  ExprWithBlock *get_else_block () { return else_block.get (); }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "6486fde773cd078341c8580ae83e7b43f780aff3", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc?ref=8664ba4cf289bf7738fb4766d099ace571046171", "patch": "@@ -216,6 +216,37 @@ ResolveExpr::visit (AST::IfLetExpr &expr)\n   resolver->get_label_scope ().pop ();\n }\n \n+void\n+ResolveExpr::visit (AST::IfLetExprConseqElse &expr)\n+{\n+  ResolveExpr::go (expr.get_value_expr ().get (), prefix, canonical_prefix);\n+\n+  NodeId scope_node_id = expr.get_node_id ();\n+  resolver->get_name_scope ().push (scope_node_id);\n+  resolver->get_type_scope ().push (scope_node_id);\n+  resolver->get_label_scope ().push (scope_node_id);\n+  resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n+  resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+  resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n+\n+  // We know expr.get_patterns () has one pattern at most\n+  // so there's no reason to handle it like an AltPattern.\n+  std::vector<PatternBinding> bindings\n+    = {PatternBinding (PatternBoundCtx::Product, std::set<Identifier> ())};\n+\n+  for (auto &pattern : expr.get_patterns ())\n+    {\n+      PatternDeclaration::go (pattern.get (), Rib::ItemType::Var, bindings);\n+    }\n+\n+  ResolveExpr::go (expr.get_if_block ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_else_block ().get (), prefix, canonical_prefix);\n+\n+  resolver->get_name_scope ().pop ();\n+  resolver->get_type_scope ().pop ();\n+  resolver->get_label_scope ().pop ();\n+}\n+\n void\n ResolveExpr::visit (AST::BlockExpr &expr)\n {"}, {"sha": "3c73a892ebf31482e1f0c269ed62c14dbfec3a58", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=8664ba4cf289bf7738fb4766d099ace571046171", "patch": "@@ -51,6 +51,7 @@ class ResolveExpr : public ResolverBase\n   void visit (AST::IfExpr &expr) override;\n   void visit (AST::IfExprConseqElse &expr) override;\n   void visit (AST::IfLetExpr &expr) override;\n+  void visit (AST::IfLetExprConseqElse &expr) override;\n   void visit (AST::BlockExpr &expr) override;\n   void visit (AST::UnsafeBlockExpr &expr) override;\n   void visit (AST::ArrayElemsValues &elems) override;"}, {"sha": "f8ac63266a8a88b98caf8a801bf0b9665721076d", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=8664ba4cf289bf7738fb4766d099ace571046171", "patch": "@@ -493,6 +493,42 @@ TypeCheckExpr::visit (HIR::IfLetExpr &expr)\n   infered = TyTy::TupleType::get_unit_type (expr.get_mappings ().get_hirid ());\n }\n \n+void\n+TypeCheckExpr::visit (HIR::IfLetExprConseqElse &expr)\n+{\n+  TyTy::BaseType *scrutinee_tyty\n+    = TypeCheckExpr::Resolve (expr.get_scrutinee_expr ().get ());\n+\n+  for (auto &pattern : expr.get_patterns ())\n+    {\n+      TyTy::BaseType *kase_arm_ty\n+\t= TypeCheckPattern::Resolve (pattern.get (), scrutinee_tyty);\n+\n+      unify_site (expr.get_mappings ().get_hirid (),\n+\t\t  TyTy::TyWithLocation (scrutinee_tyty),\n+\t\t  TyTy::TyWithLocation (kase_arm_ty, pattern->get_locus ()),\n+\t\t  expr.get_locus ());\n+    }\n+\n+  auto if_blk_resolved = TypeCheckExpr::Resolve (expr.get_if_block ());\n+  auto else_blk_resolved = TypeCheckExpr::Resolve (expr.get_else_block ());\n+\n+  if (if_blk_resolved->get_kind () == TyTy::NEVER)\n+    infered = else_blk_resolved;\n+  else if (else_blk_resolved->get_kind () == TyTy::NEVER)\n+    infered = if_blk_resolved;\n+  else\n+    {\n+      infered = unify_site (\n+\texpr.get_mappings ().get_hirid (),\n+\tTyTy::TyWithLocation (if_blk_resolved,\n+\t\t\t      expr.get_if_block ()->get_locus ()),\n+\tTyTy::TyWithLocation (else_blk_resolved,\n+\t\t\t      expr.get_else_block ()->get_locus ()),\n+\texpr.get_locus ());\n+    }\n+}\n+\n void\n TypeCheckExpr::visit (HIR::UnsafeBlockExpr &expr)\n {"}, {"sha": "5be9bcdb3f1d6f4b3208dc4cb80fa25180081942", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=8664ba4cf289bf7738fb4766d099ace571046171", "patch": "@@ -45,6 +45,7 @@ class TypeCheckExpr : private TypeCheckBase, private HIR::HIRExpressionVisitor\n   void visit (HIR::IfExpr &expr) override;\n   void visit (HIR::IfExprConseqElse &expr) override;\n   void visit (HIR::IfLetExpr &expr) override;\n+  void visit (HIR::IfLetExprConseqElse &) override;\n   void visit (HIR::BlockExpr &expr) override;\n   void visit (HIR::UnsafeBlockExpr &expr) override;\n   void visit (HIR::ArrayIndexExpr &expr) override;\n@@ -75,7 +76,6 @@ class TypeCheckExpr : private TypeCheckBase, private HIR::HIRExpressionVisitor\n   void visit (HIR::RangeToInclExpr &) override {}\n   void visit (HIR::WhileLetLoopExpr &) override {}\n   void visit (HIR::ForLoopExpr &) override {}\n-  void visit (HIR::IfLetExprConseqElse &) override {}\n   void visit (HIR::AwaitExpr &) override {}\n   void visit (HIR::AsyncBlockExpr &) override {}\n "}, {"sha": "ffa367b69c34d51d226c921602784bdc2cbbdc33", "filename": "gcc/testsuite/rust/compile/if_let_expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Ftestsuite%2Frust%2Fcompile%2Fif_let_expr.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8664ba4cf289bf7738fb4766d099ace571046171/gcc%2Ftestsuite%2Frust%2Fcompile%2Fif_let_expr.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fif_let_expr.rs?ref=8664ba4cf289bf7738fb4766d099ace571046171", "patch": "@@ -1,12 +1,10 @@\n-// { dg-options \"-fsyntax-only\" }\n-\n pub enum Option<T> {\n     None,\n     Some(T),\n }\n \n fn main() {\n-    let x = Option::Some(3);\n+    let x = Option::Some(3); // { dg-warning \"unused name\" }\n     let a = if let Option::Some(1) = x {\n         1\n     } else if x == Option::Some(2) {"}]}