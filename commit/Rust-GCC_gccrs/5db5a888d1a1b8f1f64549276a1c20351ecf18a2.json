{"sha": "5db5a888d1a1b8f1f64549276a1c20351ecf18a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRiNWE4ODhkMWExYjhmMWY2NDU0OTI3NmExYzIwMzUxZWNmMThhMg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-11-25T04:57:39Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-11-25T04:57:39Z"}, "message": "sh.md (sibcalli, [...]): New insns.\n\n* gcc/config/sh/sh.md (sibcalli, sibcalli_pcrel): New insns.\n(sibcall_pcrel): New insn_and_split.\n(sibcall, sibcall_value, sibcall_epilogue): New expands.\n\nFrom-SVN: r37732", "tree": {"sha": "42664e9170b47e27ce3d5f7daf2e585b7b4627d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42664e9170b47e27ce3d5f7daf2e585b7b4627d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5db5a888d1a1b8f1f64549276a1c20351ecf18a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db5a888d1a1b8f1f64549276a1c20351ecf18a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db5a888d1a1b8f1f64549276a1c20351ecf18a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db5a888d1a1b8f1f64549276a1c20351ecf18a2/comments", "author": null, "committer": null, "parents": [{"sha": "6915629f8173b6687171454aaf8e496416c0ac14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6915629f8173b6687171454aaf8e496416c0ac14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6915629f8173b6687171454aaf8e496416c0ac14"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "dfa01bb140ea22ee27f8ba13e3eff4078d652553", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db5a888d1a1b8f1f64549276a1c20351ecf18a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db5a888d1a1b8f1f64549276a1c20351ecf18a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5db5a888d1a1b8f1f64549276a1c20351ecf18a2", "patch": "@@ -1,5 +1,9 @@\n 2000-11-25  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* gcc/config/sh/sh.md (sibcalli, sibcalli_pcrel): New insns.\n+\t(sibcall_pcrel): New insn_and_split.\n+\t(sibcall, sibcall_value, sibcall_epilogue): New expands.\n+\n \t* config/sh/sh.md (GOTaddr2picreg, symGOT2reg, symGOTOFF2reg,\n \tsymPLT_label2reg, call, call_value): Don't set\n \tcurrent_function_uses_pic_offset_table."}, {"sha": "40a54ad46bdbe573195624591e5a85f37e5fbcf0", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db5a888d1a1b8f1f64549276a1c20351ecf18a2/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db5a888d1a1b8f1f64549276a1c20351ecf18a2/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=5db5a888d1a1b8f1f64549276a1c20351ecf18a2", "patch": "@@ -3529,6 +3529,96 @@\n     operands[1] = force_reg (SImode, XEXP (operands[1], 0));\n }\")\n \n+(define_insn \"sibcalli\"\n+  ;; FIXME: any call-clobbered register will do\n+  [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"z\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (use (reg:PSI FPSCR_REG))\n+   (return)]\n+  \"\"\n+  \"jmp\t@%0%#\"\n+  [(set_attr \"needs_delay_slot\" \"yes\")\n+   (set_attr \"type\" \"jump_ind\")])\n+\n+(define_insn \"sibcalli_pcrel\"\n+  ;; FIXME: any call-clobbered register will do\n+  [(call (mem:SI (match_operand:SI 0 \"arith_reg_operand\" \"z\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (use (match_operand 2 \"\" \"\"))\n+   (use (reg:PSI FPSCR_REG))\n+   (return)]\n+  \"TARGET_SH2\"\n+  \"braf\t%0\\\\n%O2:%#\"\n+  [(set_attr \"needs_delay_slot\" \"yes\")\n+   (set_attr \"type\" \"jump_ind\")])\n+\n+(define_insn_and_split \"sibcall_pcrel\"\n+  [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (use (reg:PSI FPSCR_REG))\n+   ;; FIXME: any call-clobbered register will do\n+   (clobber (match_scratch:SI 2 \"=z\"))\n+   (return)]\n+  \"TARGET_SH2 && optimize\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx lab = gen_call_site ();\n+  rtx call_insn;\n+\n+  emit_insn (gen_sym_label2reg (operands[2], operands[0], lab));\n+  call_insn = emit_call_insn (gen_sibcalli_pcrel (operands[2], operands[1],\n+\t\t\t\t\t\t  lab));\n+  SIBLING_CALL_P (call_insn) = 1;\n+  DONE;\n+}\")\n+\n+(define_expand \"sibcall\"\n+  [(parallel\n+    [(call (mem:SI (match_operand 0 \"arith_reg_operand\" \"\"))\n+\t   (match_operand 1 \"\" \"\"))\n+     (use (reg:PSI FPSCR_REG))\n+     (return)])]\n+  \"\"\n+  \"\n+{\n+  if (flag_pic && TARGET_SH2 && optimize\n+      && GET_CODE (operands[0]) == MEM\n+      && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF\n+      /* The PLT needs the PIC register, but the epilogue would have\n+\t to restore it, so we can only use PC-relative PIC calls for\n+\t static functions.  */\n+      && SYMBOL_REF_FLAG (XEXP (operands[0], 0)))\n+    {\n+      emit_call_insn (gen_sibcall_pcrel (XEXP (operands[0], 0), operands[1]));\n+      DONE;\n+    }\n+  else\n+    operands[0] = force_reg (SImode, XEXP (operands[0], 0));\n+}\")\n+\n+(define_expand \"sibcall_value\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (match_operand 1 \"\" \"\")\n+\t      (match_operand 2 \"\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  emit_call_insn (gen_sibcall (operands[1], operands[2]));\n+  DONE;\n+}\")\n+\n+(define_expand \"sibcall_epilogue\"\n+  [(return)]\n+  \"\"\n+  \"\n+{\n+  sh_expand_epilogue ();\n+  DONE;\n+}\")\n+\n (define_insn \"indirect_jump\"\n   [(set (pc)\n \t(match_operand:SI 0 \"arith_reg_operand\" \"r\"))]"}]}