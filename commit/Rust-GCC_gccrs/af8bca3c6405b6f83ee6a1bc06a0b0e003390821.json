{"sha": "af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY4YmNhM2M2NDA1YjZmODNlZTZhMWJjMDZhMGIwZTAwMzM5MDgyMQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-04-29T23:42:15Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-04-29T23:42:15Z"}, "message": "cgraph.h (cgraph_postorder): Remove declaration.\n\n2011-04-29  Martin Jambor  <mjambor@suse.cz>\n\n\t* cgraph.h (cgraph_postorder): Remove declaration.\n\t* ipa-utils.h (ipa_free_postorder_info): Declare.\n\t(ipa_reverse_postorder): Likewise.\n\t* cgraphunit.c: Include ipa-utils.h.\n\t(cgraph_expand_all_functions): Update call to ipa_reverse_postorder.\n\t* ipa-inline.c: Include ipa-utils.h.\n\t(ipa_inline): Update call to ipa_reverse_postorder.\n\t* ipa-pure-const.c (propagate_pure_const): Update call to\n\tipa_reduced_postorder and ipa_print_order.  Call\n\tipa_free_postorder_info to clean up.\n\t(propagate_nothrow): Likewise.\n\t* ipa-reference.c (propagate): Removed a useless call to\n\tipa_utils_reduced_inorder, updated a call to ipa_reduced_postorder\n\tand ipa_print_order.  Call ipa_free_postorder_info to clean up.\n\t* ipa.c: Include ipa-utils.h.\n\t(ipa_profile): Update call to ipa_reverse_postorder.\n\t(cgraph_postorder): Moved to...\n\t* ipa-utils.c (ipa_reverse_postorder): ...here and renamed.\n\t(ipa_utils_print_order): Renamed to ipa_print_order.\n\t(ipa_utils_reduced_inorder): Renamed to ipa_reduced_postorder. Updated\n\tcomments.\n\t(ipa_free_postorder_info): New function.\n\t* passes.c: Include ipa-utils.h.\n\t(do_per_function_toporder): Update call to ipa_reverse_postorder.\n\t(ipa_write_summaries): Likewise.\n\n\t* Makefile.in (passes.o): Add IPA_UTILS_H to dependencies.\n\t(cgraphunit.o): Likewise.\n\t(ipa.o): Likewise.\n\t(ipa-inline.o): Likewise.\n\nlto/\n\t* lto.c: Include ipa-utils.h.\n\t(lto_balanced_map): Update call to ipa_reverse_postorder.\n\t* Make-lang.in (lto/lto.o): Add IPA_UTILS_H to dependencies.\n\nFrom-SVN: r173197", "tree": {"sha": "223bf74a250abe0577f81e8a0db2cdb8f7243fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/223bf74a250abe0577f81e8a0db2cdb8f7243fd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48e5d11979af0dd03c54623faffddc5f0c3c1741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e5d11979af0dd03c54623faffddc5f0c3c1741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e5d11979af0dd03c54623faffddc5f0c3c1741"}], "stats": {"total": 314, "additions": 177, "deletions": 137}, "files": [{"sha": "fd6200370984d7439dd72d6d1471826940c1638c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -1,3 +1,35 @@\n+2011-04-29  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* cgraph.h (cgraph_postorder): Remove declaration.\n+\t* ipa-utils.h (ipa_free_postorder_info): Declare.\n+\t(ipa_reverse_postorder): Likewise.\n+\t* cgraphunit.c: Include ipa-utils.h.\n+\t(cgraph_expand_all_functions): Update call to ipa_reverse_postorder.\n+\t* ipa-inline.c: Include ipa-utils.h.\n+\t(ipa_inline): Update call to ipa_reverse_postorder.\n+\t* ipa-pure-const.c (propagate_pure_const): Update call to\n+\tipa_reduced_postorder and ipa_print_order.  Call\n+\tipa_free_postorder_info to clean up.\n+\t(propagate_nothrow): Likewise.\n+\t* ipa-reference.c (propagate): Removed a useless call to\n+\tipa_utils_reduced_inorder, updated a call to ipa_reduced_postorder\n+\tand ipa_print_order.  Call ipa_free_postorder_info to clean up.\n+\t* ipa.c: Include ipa-utils.h.\n+\t(ipa_profile): Update call to ipa_reverse_postorder.\n+\t(cgraph_postorder): Moved to...\n+\t* ipa-utils.c (ipa_reverse_postorder): ...here and renamed.\n+\t(ipa_utils_print_order): Renamed to ipa_print_order.\n+\t(ipa_utils_reduced_inorder): Renamed to ipa_reduced_postorder. Updated\n+\tcomments.\n+\t(ipa_free_postorder_info): New function.\n+\t* passes.c: Include ipa-utils.h.\n+\t(do_per_function_toporder): Update call to ipa_reverse_postorder.\n+\t(ipa_write_summaries): Likewise.\n+\t* Makefile.in (passes.o): Add IPA_UTILS_H to dependencies.\n+\t(cgraphunit.o): Likewise.\n+\t(ipa.o): Likewise.\n+\t(ipa-inline.o): Likewise.\n+\n 2011-04-29  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-ssa/inline-10.c: New testcase."}, {"sha": "ce50bae401c55af9f5dbe15fd3d3b136a1179fe8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -2858,7 +2858,7 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    hosthooks.h $(CGRAPH_H) $(COVERAGE_H) $(TREE_PASS_H) $(TREE_DUMP_H) \\\n    $(GGC_H) $(INTEGRATE_H) $(CPPLIB_H) $(OPTS_H) $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n    gt-passes.h $(DF_H) $(PREDICT_H) $(LTO_HEADER_H) $(LTO_SECTION_OUT_H) \\\n-   $(PLUGIN_H)\n+   $(PLUGIN_H) $(IPA_UTILS_H)\n \n plugin.o : plugin.c $(PLUGIN_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DIAGNOSTIC_CORE_H) $(TREE_H) $(TREE_PASS_H) intl.h $(PLUGIN_VERSION_H) $(GGC_H)\n@@ -3008,7 +3008,7 @@ cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) debug.h $(DIAGNOSTIC_H) \\\n    $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) $(IPA_PROP_H) \\\n    gt-cgraphunit.h tree-iterator.h $(COVERAGE_H) $(TREE_DUMP_H) \\\n-   tree-pretty-print.h gimple-pretty-print.h ipa-inline.h\n+   tree-pretty-print.h gimple-pretty-print.h ipa-inline.h $(IPA_UTILS_H)\n cgraphbuild.o : cgraphbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(CGRAPH_H) intl.h pointer-set.h $(GIMPLE_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(IPA_UTILS_H) $(EXCEPT_H) \\\n@@ -3018,7 +3018,8 @@ varpool.o : varpool.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(TIMEVAR_H) debug.h $(TARGET_H) output.h $(GIMPLE_H) \\\n    $(TREE_FLOW_H) gt-varpool.h\n ipa.o : ipa.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(CGRAPH_H) \\\n-   $(TREE_PASS_H) $(TIMEVAR_H) $(GIMPLE_H) $(GGC_H) pointer-set.h\n+   $(TREE_PASS_H) $(TIMEVAR_H) $(GIMPLE_H) $(GGC_H) pointer-set.h \\\n+   $(IPA_UTILS_H)\n ipa-prop.o : ipa-prop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    langhooks.h $(GGC_H) $(TARGET_H) $(CGRAPH_H) $(IPA_PROP_H) $(DIAGNOSTIC_H) \\\n    $(TREE_FLOW_H) $(TM_H) $(TREE_PASS_H) $(FLAGS_H) $(TREE_H) \\\n@@ -3046,7 +3047,7 @@ ipa-inline.o : ipa-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(FLAGS_H) $(CGRAPH_H) intl.h \\\n    $(DIAGNOSTIC_H) $(FIBHEAP_H) $(PARAMS_H) $(TIMEVAR_H) $(TREE_PASS_H) \\\n    $(COVERAGE_H) $(GGC_H) $(TREE_FLOW_H) $(RTL_H) $(IPA_PROP_H) \\\n-   $(EXCEPT_H) gimple-pretty-print.h ipa-inline.h $(TARGET_H)\n+   $(EXCEPT_H) gimple-pretty-print.h ipa-inline.h $(TARGET_H) $(IPA_UTILS_H)\n ipa-inline-analysis.o : ipa-inline-analysis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(FLAGS_H) $(CGRAPH_H) intl.h \\\n    $(DIAGNOSTIC_H) $(PARAMS_H) $(TIMEVAR_H) $(TREE_PASS_H) \\"}, {"sha": "251b9c882d5d0e827780833403c514b1cbc4f4a4", "filename": "gcc/cgraph.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -625,7 +625,6 @@ int compute_call_stmt_bb_frequency (tree, basic_block bb);\n \n /* In ipa.c  */\n bool cgraph_remove_unreachable_nodes (bool, FILE *);\n-int cgraph_postorder (struct cgraph_node **);\n cgraph_node_set cgraph_node_set_new (void);\n cgraph_node_set_iterator cgraph_node_set_find (cgraph_node_set,\n \t\t\t\t\t       struct cgraph_node *);"}, {"sha": "2d60929009992a8a05f471f5d084578a7fb75e04", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -139,6 +139,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coverage.h\"\n #include \"plugin.h\"\n #include \"ipa-inline.h\"\n+#include \"ipa-utils.h\"\n \n static void cgraph_expand_all_functions (void);\n static void cgraph_mark_functions_to_output (void);\n@@ -1618,7 +1619,7 @@ cgraph_expand_all_functions (void)\n   int order_pos, new_order_pos = 0;\n   int i;\n \n-  order_pos = cgraph_postorder (order);\n+  order_pos = ipa_reverse_postorder (order);\n   gcc_assert (order_pos == cgraph_n_nodes);\n \n   /* Garbage collector may remove inline clones we eliminate during"}, {"sha": "47b26f43da54e9c2f0f999023d139b9a3aa8441d", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -114,6 +114,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"except.h\"\n #include \"target.h\"\n #include \"ipa-inline.h\"\n+#include \"ipa-utils.h\"\n \n /* Statistics we collect about inlining algorithm.  */\n static int overall_size;\n@@ -1457,7 +1458,7 @@ ipa_inline (void)\n   if (dump_file)\n     dump_inline_summaries (dump_file);\n \n-  nnodes = cgraph_postorder (order);\n+  nnodes = ipa_reverse_postorder (order);\n \n   for (node = cgraph_nodes; node; node = node->next)\n     node->aux = 0;"}, {"sha": "cd5753745632c3228c526ec4cba0f0057dcb386c", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -1089,11 +1089,11 @@ propagate_pure_const (void)\n   int i;\n   struct ipa_dfs_info * w_info;\n \n-  order_pos = ipa_utils_reduced_inorder (order, true, false, NULL);\n+  order_pos = ipa_reduced_postorder (order, true, false, NULL);\n   if (dump_file)\n     {\n       dump_cgraph (dump_file);\n-      ipa_utils_print_order(dump_file, \"reduced\", order, order_pos);\n+      ipa_print_order(dump_file, \"reduced\", order, order_pos);\n     }\n \n   /* Propagate the local information thru the call graph to produce\n@@ -1339,18 +1339,7 @@ propagate_pure_const (void)\n \t}\n     }\n \n-  /* Cleanup. */\n-  for (node = cgraph_nodes; node; node = node->next)\n-    {\n-      /* Get rid of the aux information.  */\n-      if (node->aux)\n-\t{\n-\t  w_info = (struct ipa_dfs_info *) node->aux;\n-\t  free (node->aux);\n-\t  node->aux = NULL;\n-\t}\n-    }\n-\n+  ipa_free_postorder_info ();\n   free (order);\n }\n \n@@ -1368,11 +1357,11 @@ propagate_nothrow (void)\n   int i;\n   struct ipa_dfs_info * w_info;\n \n-  order_pos = ipa_utils_reduced_inorder (order, true, false, ignore_edge);\n+  order_pos = ipa_reduced_postorder (order, true, false, ignore_edge);\n   if (dump_file)\n     {\n       dump_cgraph (dump_file);\n-      ipa_utils_print_order(dump_file, \"reduced for nothrow\", order, order_pos);\n+      ipa_print_order (dump_file, \"reduced for nothrow\", order, order_pos);\n     }\n \n   /* Propagate the local information thru the call graph to produce\n@@ -1445,18 +1434,7 @@ propagate_nothrow (void)\n \t}\n     }\n \n-  /* Cleanup. */\n-  for (node = cgraph_nodes; node; node = node->next)\n-    {\n-      /* Get rid of the aux information.  */\n-      if (node->aux)\n-\t{\n-\t  w_info = (struct ipa_dfs_info *) node->aux;\n-\t  free (node->aux);\n-\t  node->aux = NULL;\n-\t}\n-    }\n-\n+  ipa_free_postorder_info ();\n   free (order);\n }\n "}, {"sha": "b14d636b633a9735d12cd62052252e694b238b59", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -615,7 +615,7 @@ propagate (void)\n   struct cgraph_node *w;\n   struct cgraph_node **order =\n     XCNEWVEC (struct cgraph_node *, cgraph_n_nodes);\n-  int order_pos = ipa_utils_reduced_inorder (order, false, true, NULL);\n+  int order_pos;\n   int i;\n \n   if (dump_file)\n@@ -628,9 +628,9 @@ propagate (void)\n      the global information.  All the nodes within a cycle will have\n      the same info so we collapse cycles first.  Then we can do the\n      propagation in one pass from the leaves to the roots.  */\n-  order_pos = ipa_utils_reduced_inorder (order, true, true, NULL);\n+  order_pos = ipa_reduced_postorder (order, true, true, NULL);\n   if (dump_file)\n-    ipa_utils_print_order(dump_file, \"reduced\", order, order_pos);\n+    ipa_print_order (dump_file, \"reduced\", order, order_pos);\n \n   for (i = 0; i < order_pos; i++ )\n     {\n@@ -914,13 +914,9 @@ propagate (void)\n \t    }\n \t}\n       free (node_info);\n-      if (node->aux)\n-\t{\n-\t  free (node->aux);\n-\t  node->aux = NULL;\n-\t}\n    }\n \n+  ipa_free_postorder_info ();\n   free (order);\n \n   bitmap_obstack_release (&local_info_obstack);"}, {"sha": "6324d7ccc5c26c70be587b2c0e1324d09ea6a11e", "filename": "gcc/ipa-utils.c", "status": "modified", "additions": 107, "deletions": 10, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.c?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -45,10 +45,10 @@ along with GCC; see the file COPYING3.  If not see\n    cgraph_nodes that has COUNT useful nodes in it.  */\n \n void\n-ipa_utils_print_order (FILE* out,\n-\t\t       const char * note,\n-\t\t       struct cgraph_node** order,\n-\t\t       int count)\n+ipa_print_order (FILE* out,\n+\t\t const char * note,\n+\t\t struct cgraph_node** order,\n+\t\t int count)\n {\n   int i;\n   fprintf (out, \"\\n\\n ordered call graph: %s\\n\", note);\n@@ -76,7 +76,7 @@ struct searchc_env {\n    has been customized for cgraph_nodes.  The env parameter is because\n    it is recursive and there are no nested functions here.  This\n    function should only be called from itself or\n-   ipa_utils_reduced_inorder.  ENV is a stack env and would be\n+   ipa_reduced_postorder.  ENV is a stack env and would be\n    unnecessary if C had nested functions.  V is the node to start\n    searching from.  */\n \n@@ -151,13 +151,15 @@ searchc (struct searchc_env* env, struct cgraph_node *v,\n \n /* Topsort the call graph by caller relation.  Put the result in ORDER.\n \n-   The REDUCE flag is true if you want the cycles reduced to single\n-   nodes.  Only consider nodes that have the output bit set. */\n+   The REDUCE flag is true if you want the cycles reduced to single nodes.  Set\n+   ALLOW_OVERWRITABLE if nodes with such availability should be included.\n+   IGNORE_EDGE, if non-NULL is a hook that may make some edges insignificant\n+   for the topological sort.   */\n \n int\n-ipa_utils_reduced_inorder (struct cgraph_node **order,\n-\t\t\t   bool reduce, bool allow_overwritable,\n-\t\t\t   bool (*ignore_edge) (struct cgraph_edge *))\n+ipa_reduced_postorder (struct cgraph_node **order,\n+\t\t       bool reduce, bool allow_overwritable,\n+\t\t       bool (*ignore_edge) (struct cgraph_edge *))\n {\n   struct cgraph_node *node;\n   struct searchc_env env;\n@@ -207,6 +209,101 @@ ipa_utils_reduced_inorder (struct cgraph_node **order,\n   return env.order_pos;\n }\n \n+/* Deallocate all ipa_dfs_info structures pointed to by the aux pointer of call\n+   graph nodes.  */\n+\n+void\n+ipa_free_postorder_info (void)\n+{\n+  struct cgraph_node *node;\n+  for (node = cgraph_nodes; node; node = node->next)\n+    {\n+      /* Get rid of the aux information.  */\n+      if (node->aux)\n+\t{\n+\t  free (node->aux);\n+\t  node->aux = NULL;\n+\t}\n+    }\n+}\n+\n+/* Fill array order with all nodes with output flag set in the reverse\n+   topological order.  Return the number of elements in the array.  */\n+\n+int\n+ipa_reverse_postorder (struct cgraph_node **order)\n+{\n+  struct cgraph_node *node, *node2;\n+  int stack_size = 0;\n+  int order_pos = 0;\n+  struct cgraph_edge *edge, last;\n+  int pass;\n+\n+  struct cgraph_node **stack =\n+    XCNEWVEC (struct cgraph_node *, cgraph_n_nodes);\n+\n+  /* We have to deal with cycles nicely, so use a depth first traversal\n+     output algorithm.  Ignore the fact that some functions won't need\n+     to be output and put them into order as well, so we get dependencies\n+     right through inline functions.  */\n+  for (node = cgraph_nodes; node; node = node->next)\n+    node->aux = NULL;\n+  for (pass = 0; pass < 2; pass++)\n+    for (node = cgraph_nodes; node; node = node->next)\n+      if (!node->aux\n+\t  && (pass\n+\t      || (!node->address_taken\n+\t\t  && !node->global.inlined_to\n+\t\t  && !cgraph_only_called_directly_p (node))))\n+\t{\n+\t  node2 = node;\n+\t  if (!node->callers)\n+\t    node->aux = &last;\n+\t  else\n+\t    node->aux = node->callers;\n+\t  while (node2)\n+\t    {\n+\t      while (node2->aux != &last)\n+\t\t{\n+\t\t  edge = (struct cgraph_edge *) node2->aux;\n+\t\t  if (edge->next_caller)\n+\t\t    node2->aux = edge->next_caller;\n+\t\t  else\n+\t\t    node2->aux = &last;\n+\t\t  /* Break possible cycles involving always-inline\n+\t\t     functions by ignoring edges from always-inline\n+\t\t     functions to non-always-inline functions.  */\n+\t\t  if (DECL_DISREGARD_INLINE_LIMITS (edge->caller->decl)\n+\t\t      && !DECL_DISREGARD_INLINE_LIMITS (edge->callee->decl))\n+\t\t    continue;\n+\t\t  if (!edge->caller->aux)\n+\t\t    {\n+\t\t      if (!edge->caller->callers)\n+\t\t\tedge->caller->aux = &last;\n+\t\t      else\n+\t\t\tedge->caller->aux = edge->caller->callers;\n+\t\t      stack[stack_size++] = node2;\n+\t\t      node2 = edge->caller;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t      if (node2->aux == &last)\n+\t\t{\n+\t\t  order[order_pos++] = node2;\n+\t\t  if (stack_size)\n+\t\t    node2 = stack[--stack_size];\n+\t\t  else\n+\t\t    node2 = NULL;\n+\t\t}\n+\t    }\n+\t}\n+  free (stack);\n+  for (node = cgraph_nodes; node; node = node->next)\n+    node->aux = NULL;\n+  return order_pos;\n+}\n+\n+\n \n /* Given a memory reference T, will return the variable at the bottom\n    of the access.  Unlike get_base_address, this will recurse thru"}, {"sha": "7b49e6a1c945bf4a0f784b200d7ffe756c5b24df", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -35,9 +35,11 @@ struct ipa_dfs_info {\n \n \n /* In ipa-utils.c  */\n-void ipa_utils_print_order (FILE*, const char *, struct cgraph_node**, int);\n-int ipa_utils_reduced_inorder (struct cgraph_node **, bool, bool,\n-\t\t\t       bool (*ignore_edge) (struct cgraph_edge *));\n+void ipa_print_order (FILE*, const char *, struct cgraph_node**, int);\n+int ipa_reduced_postorder (struct cgraph_node **, bool, bool,\n+\t\t\t  bool (*ignore_edge) (struct cgraph_edge *));\n+void ipa_free_postorder_info (void);\n+int ipa_reverse_postorder (struct cgraph_node **);\n tree get_base_var (tree);\n \n "}, {"sha": "606a9f374d1e610dee2f1f5a6b1fb8611b175bea", "filename": "gcc/ipa.c", "status": "modified", "additions": 2, "deletions": 77, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -31,82 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pointer-set.h\"\n #include \"target.h\"\n #include \"tree-iterator.h\"\n-\n-/* Fill array order with all nodes with output flag set in the reverse\n-   topological order.  */\n-\n-int\n-cgraph_postorder (struct cgraph_node **order)\n-{\n-  struct cgraph_node *node, *node2;\n-  int stack_size = 0;\n-  int order_pos = 0;\n-  struct cgraph_edge *edge, last;\n-  int pass;\n-\n-  struct cgraph_node **stack =\n-    XCNEWVEC (struct cgraph_node *, cgraph_n_nodes);\n-\n-  /* We have to deal with cycles nicely, so use a depth first traversal\n-     output algorithm.  Ignore the fact that some functions won't need\n-     to be output and put them into order as well, so we get dependencies\n-     right through inline functions.  */\n-  for (node = cgraph_nodes; node; node = node->next)\n-    node->aux = NULL;\n-  for (pass = 0; pass < 2; pass++)\n-    for (node = cgraph_nodes; node; node = node->next)\n-      if (!node->aux\n-\t  && (pass\n-\t      || (!node->address_taken\n-\t\t  && !node->global.inlined_to\n-\t\t  && !cgraph_only_called_directly_p (node))))\n-\t{\n-\t  node2 = node;\n-\t  if (!node->callers)\n-\t    node->aux = &last;\n-\t  else\n-\t    node->aux = node->callers;\n-\t  while (node2)\n-\t    {\n-\t      while (node2->aux != &last)\n-\t\t{\n-\t\t  edge = (struct cgraph_edge *) node2->aux;\n-\t\t  if (edge->next_caller)\n-\t\t    node2->aux = edge->next_caller;\n-\t\t  else\n-\t\t    node2->aux = &last;\n-\t\t  /* Break possible cycles involving always-inline\n-\t\t     functions by ignoring edges from always-inline\n-\t\t     functions to non-always-inline functions.  */\n-\t\t  if (DECL_DISREGARD_INLINE_LIMITS (edge->caller->decl)\n-\t\t      && !DECL_DISREGARD_INLINE_LIMITS (edge->callee->decl))\n-\t\t    continue;\n-\t\t  if (!edge->caller->aux)\n-\t\t    {\n-\t\t      if (!edge->caller->callers)\n-\t\t\tedge->caller->aux = &last;\n-\t\t      else\n-\t\t\tedge->caller->aux = edge->caller->callers;\n-\t\t      stack[stack_size++] = node2;\n-\t\t      node2 = edge->caller;\n-\t\t      break;\n-\t\t    }\n-\t\t}\n-\t      if (node2->aux == &last)\n-\t\t{\n-\t\t  order[order_pos++] = node2;\n-\t\t  if (stack_size)\n-\t\t    node2 = stack[--stack_size];\n-\t\t  else\n-\t\t    node2 = NULL;\n-\t\t}\n-\t    }\n-\t}\n-  free (stack);\n-  for (node = cgraph_nodes; node; node = node->next)\n-    node->aux = NULL;\n-  return order_pos;\n-}\n+#include \"ipa-utils.h\"\n \n /* Look for all functions inlined to NODE and update their inlined_to pointers\n    to INLINED_TO.  */\n@@ -1448,7 +1373,7 @@ ipa_profile (void)\n   bool something_changed = false;\n   int i;\n \n-  order_pos = cgraph_postorder (order);\n+  order_pos = ipa_reverse_postorder (order);\n   for (i = order_pos - 1; i >= 0; i--)\n     {\n       if (order[i]->local.local && cgraph_propagate_frequency (order[i]))"}, {"sha": "efcd63359194a0243f004b67fb4e1af1896c6739", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -1,3 +1,9 @@\n+2011-04-29  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* lto.c: Include ipa-utils.h.\n+\t(lto_balanced_map): Update call to ipa_reverse_postorder.\n+\t* Make-lang.in (lto/lto.o): Add IPA_UTILS_H to dependencies.\n+\n 2011-04-29  Michael Matz  <matz@suse.de>\n \n \t* lto.c (toplevel): Include tree-flow.h."}, {"sha": "d5a15f815fc1a8f919b6f1fe02be32a029edfd15", "filename": "gcc/lto/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Flto%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Flto%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FMake-lang.in?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -86,7 +86,7 @@ lto/lto.o: lto/lto.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(OPTS_H) \\\n \tlanghooks.h $(VEC_H) $(BITMAP_H) pointer-set.h $(IPA_PROP_H) \\\n \t$(COMMON_H) debug.h $(TIMEVAR_H) $(GIMPLE_H) $(LTO_H) $(LTO_TREE_H) \\\n \t$(LTO_TAGS_H) $(LTO_STREAMER_H) $(SPLAY_TREE_H) gt-lto-lto.h $(PARAMS_H) \\\n-\tipa-inline.h\n+\tipa-inline.h $(IPA_UTILS_H)\n lto/lto-object.o: lto/lto-object.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(DIAGNOSTIC_CORE_H) $(LTO_H) $(TM_H) $(LTO_STREAMER_H) \\\n \t../include/simple-object.h"}, {"sha": "a8027a4aed5d89ed50db0312a45ad1867de6b9b5", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"splay-tree.h\"\n #include \"params.h\"\n #include \"ipa-inline.h\"\n+#include \"ipa-utils.h\"\n \n static GTY(()) tree first_personality_decl;\n \n@@ -1458,7 +1459,7 @@ lto_balanced_map (void)\n      size.  Note that since nodes that are not partitioned might be put into\n      multiple partitions, this is just an estimate of real size.  This is why\n      we keep partition_size updated after every partition is finalized.  */\n-  postorder_len = cgraph_postorder (postorder);\n+  postorder_len = ipa_reverse_postorder (postorder);\n   for (i = 0; i < postorder_len; i++)\n     {\n       node = postorder[i];"}, {"sha": "da19ea8689d5dd2cd2f0a2e216409e903ff8c5ba", "filename": "gcc/passes.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8bca3c6405b6f83ee6a1bc06a0b0e003390821/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=af8bca3c6405b6f83ee6a1bc06a0b0e003390821", "patch": "@@ -73,6 +73,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"predict.h\"\n #include \"lto-streamer.h\"\n #include \"plugin.h\"\n+#include \"ipa-utils.h\"\n \n #if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n #include \"dwarf2out.h\"\n@@ -1124,7 +1125,7 @@ do_per_function_toporder (void (*callback) (void *data), void *data)\n     {\n       gcc_assert (!order);\n       order = ggc_alloc_vec_cgraph_node_ptr (cgraph_n_nodes);\n-      nnodes = cgraph_postorder (order);\n+      nnodes = ipa_reverse_postorder (order);\n       for (i = nnodes - 1; i >= 0; i--)\n         order[i]->process = 1;\n       for (i = nnodes - 1; i >= 0; i--)\n@@ -1697,7 +1698,7 @@ ipa_write_summaries (void)\n      since it causes the gimple file to be processed in the same order\n      as the source code.  */\n   order = XCNEWVEC (struct cgraph_node *, cgraph_n_nodes);\n-  order_pos = cgraph_postorder (order);\n+  order_pos = ipa_reverse_postorder (order);\n   gcc_assert (order_pos == cgraph_n_nodes);\n \n   for (i = order_pos - 1; i >= 0; i--)"}]}