{"sha": "bca504069d503b69f51f380c86c5c929651c9da8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNhNTA0MDY5ZDUwM2I2OWY1MWYzODBjODZjNWM5Mjk2NTFjOWRhOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-05-08T05:17:54Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-05-08T05:17:54Z"}, "message": "see.c, [...]: Fix comment typos.\n\n\t* see.c, tree-flow-inline.h, tree-phinodes.c: Fix comment\n\ttypos.\n\nFrom-SVN: r113621", "tree": {"sha": "3b41ded138e26f5222fd1c63db9b0f9155696bd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b41ded138e26f5222fd1c63db9b0f9155696bd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bca504069d503b69f51f380c86c5c929651c9da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca504069d503b69f51f380c86c5c929651c9da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca504069d503b69f51f380c86c5c929651c9da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca504069d503b69f51f380c86c5c929651c9da8/comments", "author": null, "committer": null, "parents": [{"sha": "923d16d409b1c8c6947d2f539ce27e233bb41c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/923d16d409b1c8c6947d2f539ce27e233bb41c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/923d16d409b1c8c6947d2f539ce27e233bb41c9a"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "1bb7acb315264afdc63b3f253c4ec615bd23ba30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca504069d503b69f51f380c86c5c929651c9da8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca504069d503b69f51f380c86c5c929651c9da8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bca504069d503b69f51f380c86c5c929651c9da8", "patch": "@@ -2,6 +2,9 @@\n \n \t* config/arm/constraints.md (c): Fix a typo.\n \n+\t* see.c, tree-flow-inline.h, tree-phinodes.c: Fix comment\n+\ttypos.\n+\n 2006-05-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/24879"}, {"sha": "8e4bd29e26a6ec2f99be5de797f74268008084f5", "filename": "gcc/see.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca504069d503b69f51f380c86c5c929651c9da8/gcc%2Fsee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca504069d503b69f51f380c86c5c929651c9da8/gcc%2Fsee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsee.c?ref=bca504069d503b69f51f380c86c5c929651c9da8", "patch": "@@ -567,7 +567,7 @@ struct see_register_properties\n };\n \n /* Occurrence of an expression.\n-   There must be at most one available occurance and at most one anticipatable\n+   There must be at most one available occurrence and at most one anticipatable\n    occurrence per basic block.  */\n struct see_occr\n {\n@@ -925,7 +925,7 @@ hash_del_properties (void *p)\n    set ((reg:WIDEmode r1) (sign_extend:WIDEmode (reg:NARROWmode r2)))\n \n    The value of the key is (REGNO (reg:WIDEmode r1))\n-   It is posibble to search this hash in two ways:\n+   It is possible to search this hash in two ways:\n    1.  By a register rtx. The Value that is been compared to the keys is the\n        REGNO of it.\n    2.  By an insn with the above pattern. The Value that is been compared to\n@@ -1648,7 +1648,7 @@ see_commit_ref_changes (splay_tree_node stn,\n    redundant.\n \n    INDEX_MAP is a mapping of an index to an expression.\n-   Return true if an instruction was insertedon an edge.\n+   Return true if an instruction was inserted on an edge.\n    Otherwise, return false.  */\n \n static bool\n@@ -2424,7 +2424,7 @@ see_replace_src (rtx *x, void *data)\n    set (subreg (dest_extension_reg)) (rhs)\n \n    We do this in 4 steps:\n-   a. Replace every use of dest_reg with a new preudo register.\n+   a. Replace every use of dest_reg with a new pseudo register.\n    b. Replace every instance of dest_reg with the subreg.\n    c. Replace every use of the new pseudo register back to dest_reg.\n    d. Try to recognize and simplify.\n@@ -2476,7 +2476,7 @@ see_def_extension_not_merged (struct see_ref_s *curr_ref_s, rtx def_se)\n   subreg = gen_lowpart_SUBREG (dest_mode, dest_extension_reg);\n   new_pseudo_reg = gen_reg_rtx (source_extension_mode);\n \n-  /* Step a: Replace every use of dest_real_reg with a new preudo register.  */\n+  /* Step a: Replace every use of dest_real_reg with a new pseudo register.  */\n   d.from = dest_real_reg;\n   d.to = new_pseudo_reg;\n   note_uses (&PATTERN (ref_copy), see_replace_src, &d);"}, {"sha": "5f7efa7de31ea7f31df5ab4c55008da23d5c7587", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca504069d503b69f51f380c86c5c929651c9da8/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca504069d503b69f51f380c86c5c929651c9da8/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=bca504069d503b69f51f380c86c5c929651c9da8", "patch": "@@ -1390,8 +1390,8 @@ first_imm_use_stmt (imm_use_iterator *imm, tree var)\n   imm->next_imm_name = NULL_USE_OPERAND_P;\n \n   /* iter_node is used as a marker within the immediate use list to indicate\n-     where the end of the current stmt's uses are.  Iintialize it to NULL\n-     stmt and use, which indicateds a marker node.  */\n+     where the end of the current stmt's uses are.  Initialize it to NULL\n+     stmt and use, which indicates a marker node.  */\n   imm->iter_node.prev = NULL_USE_OPERAND_P;\n   imm->iter_node.next = NULL_USE_OPERAND_P;\n   imm->iter_node.stmt = NULL_TREE;"}, {"sha": "98b011f89e61f58599a7b6a841432f40a81395f8", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca504069d503b69f51f380c86c5c929651c9da8/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca504069d503b69f51f380c86c5c929651c9da8/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=bca504069d503b69f51f380c86c5c929651c9da8", "patch": "@@ -417,7 +417,7 @@ remove_phi_arg_num (tree phi, int i)\n       use_operand_p old_p, new_p;\n       old_p = &PHI_ARG_IMM_USE_NODE (phi, num_elem - 1);\n       new_p = &PHI_ARG_IMM_USE_NODE (phi, i);\n-      /* Set use on new node, and link into last elements's place.  */\n+      /* Set use on new node, and link into last element's place.  */\n       *(new_p->use) = *(old_p->use);\n       relink_imm_use (new_p, old_p);\n     }"}]}