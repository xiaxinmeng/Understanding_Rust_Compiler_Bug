{"sha": "be63b77d8b202a77d7699311fa4a9aba4521b425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2M2I3N2Q4YjIwMmE3N2Q3Njk5MzExZmE0YTlhYmE0NTIxYjQyNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-21T21:29:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-21T21:29:29Z"}, "message": "re PR middle-end/56420 (Arithmetic error in computation with compile time unsigned __int128 constant)\n\n\tPR middle-end/56420\n\t* expmed.c (EXACT_POWER_OF_2_OR_ZERO_P): Do subtraction in uhwi, to\n\tavoid signed wrapping.\n\t(expand_mult): Handle properly multiplication by\n\t((dword_type) -1) << (BITS_PER_WORD - 1).  Improve multiplication by\n\t((dword_type) 1) << (BITS_PER_WORD - 1).  Avoid undefined behavior\n\tin the compiler if coeff is HOST_WIDE_INT_MIN.\n\t(expand_divmod): Don't make ext_op1 static, change it's type to\n\tuhwi.  Avoid undefined behavior in -INTVAL (op1).\n\n\t* gcc.dg/torture/pr56420.c: New test.\n\nFrom-SVN: r196215", "tree": {"sha": "d1030e594d863fd4319e656fd16f5fbba7cd2f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1030e594d863fd4319e656fd16f5fbba7cd2f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be63b77d8b202a77d7699311fa4a9aba4521b425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be63b77d8b202a77d7699311fa4a9aba4521b425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be63b77d8b202a77d7699311fa4a9aba4521b425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be63b77d8b202a77d7699311fa4a9aba4521b425/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7fde18c2a76c55f544a2f4afa6ac39c195f0392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7fde18c2a76c55f544a2f4afa6ac39c195f0392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7fde18c2a76c55f544a2f4afa6ac39c195f0392"}], "stats": {"total": 87, "additions": 77, "deletions": 10}, "files": [{"sha": "c2b35d3538cc118eb4c59d0520db577f1c4dbda3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be63b77d8b202a77d7699311fa4a9aba4521b425/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be63b77d8b202a77d7699311fa4a9aba4521b425/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be63b77d8b202a77d7699311fa4a9aba4521b425", "patch": "@@ -1,5 +1,15 @@\n 2013-02-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/56420\n+\t* expmed.c (EXACT_POWER_OF_2_OR_ZERO_P): Do subtraction in uhwi, to\n+\tavoid signed wrapping.\n+\t(expand_mult): Handle properly multiplication by\n+\t((dword_type) -1) << (BITS_PER_WORD - 1).  Improve multiplication by\n+\t((dword_type) 1) << (BITS_PER_WORD - 1).  Avoid undefined behavior\n+\tin the compiler if coeff is HOST_WIDE_INT_MIN.\n+\t(expand_divmod): Don't make ext_op1 static, change it's type to\n+\tuhwi.  Avoid undefined behavior in -INTVAL (op1).\n+\n \tPR rtl-optimization/50339\n \t* lower-subreg.h (struct lower_subreg_choices): Add splitting_ashiftrt\n \tfield."}, {"sha": "d66c6e667fbeaaff3bca7c3d353850d9cc1f8e2e", "filename": "gcc/expmed.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be63b77d8b202a77d7699311fa4a9aba4521b425/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be63b77d8b202a77d7699311fa4a9aba4521b425/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=be63b77d8b202a77d7699311fa4a9aba4521b425", "patch": "@@ -64,7 +64,8 @@ static rtx expand_smod_pow2 (enum machine_mode, rtx, HOST_WIDE_INT);\n static rtx expand_sdiv_pow2 (enum machine_mode, rtx, HOST_WIDE_INT);\n \n /* Test whether a value is zero of a power of two.  */\n-#define EXACT_POWER_OF_2_OR_ZERO_P(x) (((x) & ((x) - 1)) == 0)\n+#define EXACT_POWER_OF_2_OR_ZERO_P(x) \\\n+  (((x) & ((x) - (unsigned HOST_WIDE_INT) 1)) == 0)\n \n struct init_expmed_rtl\n {\n@@ -3079,7 +3080,10 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n \t  /* If we are multiplying in DImode, it may still be a win\n \t     to try to work with shifts and adds.  */\n \t  if (CONST_DOUBLE_HIGH (scalar_op1) == 0\n-\t      && CONST_DOUBLE_LOW (scalar_op1) > 0)\n+\t      && (CONST_DOUBLE_LOW (scalar_op1) > 0\n+\t\t  || (CONST_DOUBLE_LOW (scalar_op1) < 0\n+\t\t      && EXACT_POWER_OF_2_OR_ZERO_P\n+\t\t\t   (CONST_DOUBLE_LOW (scalar_op1)))))\n \t    {\n \t      coeff = CONST_DOUBLE_LOW (scalar_op1);\n \t      is_neg = false;\n@@ -3109,7 +3113,8 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n \t use synth_mult.  */\n \n       /* Special case powers of two.  */\n-      if (EXACT_POWER_OF_2_OR_ZERO_P (coeff))\n+      if (EXACT_POWER_OF_2_OR_ZERO_P (coeff)\n+\t  && !(is_neg && mode_bitsize > HOST_BITS_PER_WIDE_INT))\n \treturn expand_shift (LSHIFT_EXPR, mode, op0,\n \t\t\t     floor_log2 (coeff), target, unsignedp);\n \n@@ -3124,13 +3129,24 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n \t     result is interpreted as an unsigned coefficient.\n \t     Exclude cost of op0 from max_cost to match the cost\n \t     calculation of the synth_mult.  */\n+\t  coeff = -(unsigned HOST_WIDE_INT) coeff;\n \t  max_cost = (set_src_cost (gen_rtx_MULT (mode, fake_reg, op1), speed)\n \t\t      - neg_cost(speed, mode));\n-\t  if (max_cost > 0\n-\t      && choose_mult_variant (mode, -coeff, &algorithm,\n-\t\t\t\t      &variant, max_cost))\n+\t  if (max_cost <= 0)\n+\t    goto skip_synth;\n+\n+\t  /* Special case powers of two.  */\n+\t  if (EXACT_POWER_OF_2_OR_ZERO_P (coeff))\n+\t    {\n+\t      rtx temp = expand_shift (LSHIFT_EXPR, mode, op0,\n+\t\t\t\t       floor_log2 (coeff), target, unsignedp);\n+\t      return expand_unop (mode, neg_optab, temp, target, 0);\n+\t    }\n+\n+\t  if (choose_mult_variant (mode, coeff, &algorithm, &variant,\n+\t\t\t\t   max_cost))\n \t    {\n-\t      rtx temp = expand_mult_const (mode, op0, -coeff, NULL_RTX,\n+\t      rtx temp = expand_mult_const (mode, op0, coeff, NULL_RTX,\n \t\t\t\t\t    &algorithm, variant);\n \t      return expand_unop (mode, neg_optab, temp, target, 0);\n \t    }\n@@ -3813,13 +3829,12 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n   int op1_is_constant, op1_is_pow2 = 0;\n   int max_cost, extra_cost;\n   static HOST_WIDE_INT last_div_const = 0;\n-  static HOST_WIDE_INT ext_op1;\n   bool speed = optimize_insn_for_speed_p ();\n \n   op1_is_constant = CONST_INT_P (op1);\n   if (op1_is_constant)\n     {\n-      ext_op1 = INTVAL (op1);\n+      unsigned HOST_WIDE_INT ext_op1 = UINTVAL (op1);\n       if (unsignedp)\n \text_op1 &= GET_MODE_MASK (mode);\n       op1_is_pow2 = ((EXACT_POWER_OF_2_OR_ZERO_P (ext_op1)\n@@ -3967,7 +3982,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n       op1_is_pow2 = (op1_is_constant\n \t\t     && ((EXACT_POWER_OF_2_OR_ZERO_P (INTVAL (op1))\n \t\t\t  || (! unsignedp\n-\t\t\t      && EXACT_POWER_OF_2_OR_ZERO_P (-INTVAL (op1)))))) ;\n+\t\t\t      && EXACT_POWER_OF_2_OR_ZERO_P (-UINTVAL (op1))))));\n     }\n \n   /* If one of the operands is a volatile MEM, copy it into a register.  */"}, {"sha": "7df8623d28893a7d59f5636b2ac76285c4d3f622", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be63b77d8b202a77d7699311fa4a9aba4521b425/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be63b77d8b202a77d7699311fa4a9aba4521b425/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be63b77d8b202a77d7699311fa4a9aba4521b425", "patch": "@@ -1,3 +1,8 @@\n+2013-02-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/56420\n+\t* gcc.dg/torture/pr56420.c: New test.\n+\n 2013-02-20  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR middle-end/56108"}, {"sha": "6fa1a803dd6f6d00065888378bb6c0e8b047923e", "filename": "gcc/testsuite/gcc.dg/torture/pr56420.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be63b77d8b202a77d7699311fa4a9aba4521b425/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56420.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be63b77d8b202a77d7699311fa4a9aba4521b425/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56420.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56420.c?ref=be63b77d8b202a77d7699311fa4a9aba4521b425", "patch": "@@ -0,0 +1,37 @@\n+/* PR middle-end/56420 */\n+/* { dg-do run { target int128 } } */\n+\n+extern void abort (void);\n+\n+__attribute__((noinline, noclone)) __uint128_t\n+foo (__uint128_t x)\n+{\n+  return x * (((__uint128_t) -1) << 63);\n+}\n+\n+__attribute__((noinline, noclone)) __uint128_t\n+bar (__uint128_t x)\n+{\n+  return x * (((__uint128_t) 1) << 63);\n+}\n+\n+__attribute__((noinline, noclone)) __uint128_t\n+baz (__uint128_t x)\n+{\n+  return x * -(((__uint128_t) 1) << 62);\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (1) != (((__uint128_t) -1) << 63)\n+      || foo (8) != (((__uint128_t) -1) << 66))\n+    abort ();\n+  if (bar (1) != (((__uint128_t) 1) << 63)\n+      || bar (8) != (((__uint128_t) 1) << 66))\n+    abort ();\n+  if (baz (1) != -(((__uint128_t) 1) << 62)\n+      || baz (8) != ((-(((__uint128_t) 1) << 62)) << 3))\n+    abort ();\n+  return 0;\n+}"}]}