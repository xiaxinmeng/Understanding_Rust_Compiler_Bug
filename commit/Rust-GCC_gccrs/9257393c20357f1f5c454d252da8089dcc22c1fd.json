{"sha": "9257393c20357f1f5c454d252da8089dcc22c1fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI1NzM5M2MyMDM1N2YxZjVjNDU0ZDI1MmRhODA4OWRjYzIyYzFmZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-13T03:57:40Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-13T03:57:40Z"}, "message": "Makefile.in (gcc.o, [...]): Depend on gcc.h.\n\n\t* Makefile.in (gcc.o, gccspec.o, cppspec.o): Depend on gcc.h.\n\n\t* gcc.h: New file.\n\t(lang_specific_driver): Don't take a function pointer parameter.\n\tAll callers changed.\n\n\t* gcc.c: Include gcc.h.\n\t(do_spec, fancy_abort,lang_specific_driver,lang_specific_pre_link,\n\tlang_specific_extra_outfiles, fatal): Don't declare.\n\t(multilib_defaults_raw): Constify.\n\t(read_specs): Call memset, rather than bzero.\n\t(main): Call return, not exit.\n\t(lookup_compiler): Call memcpy, not bcopy.\n\t(fatal): Make extern.\n\n\t* cppspec.c: Include gcc.h.\n\t(lang_specific_driver): Initialize variable `quote'.  Constify a\n\tchar*.  All calls to the function pointer parameter now\n\texplicitly call `fatal'.\n\n\t* gccspec.c (lang_specific_driver): Include gcc.h.\n\ncp:\n\n\t* Make-lang.in (g++spec.o): Depend on system.h and gcc.h.\n\n\t* g++spec.c: Include gcc.h.\n\t(lang_specific_driver): Constify a char*.  Call xcalloc, not\n \txmalloc/bzero.  All calls to the function pointer parameter now\n \texplicitly call `fatal'.\n\nf:\n\n\t* Make-lang.in (g77spec.o): Depend on system.h and gcc.h.\n\n\t* g77spec.c: Include gcc.h.\n\t(g77_xargv): Constify.\n\t(g77_fn): Add parameter prototypes.\n\t(lookup_option, append_arg): Add static prototypes.\n\t(g77_newargv): Constify.\n\t(lookup_option, append_arg, lang_specific_driver): Constify a char*.\n\t(lang_specific_driver): All calls to the function pointer\n \tparameter now explicitly call `fatal'.\n\njava:\n\n\t* Make-lang.in (jvspec.o): Depend on system.h and gcc.h.\n\n\t* jvspec.c: Include gcc.h.  Don't include gansidecl.h.\n\t(do_spec, lang_specific_pre_link, lang_specific_driver,\n\tinput_filename, input_filename_length): Don't declare.\n\t(main_class_name, jvgenmain_spec, lang_specific_driver):\n\tConstify a char*.\n\t(lang_specific_driver): All calls to the function pointer\n\tparameter now explicitly call `fatal'.\n\nFrom-SVN: r29367", "tree": {"sha": "6e552cd6afac414afba22bf962c7bef94bf8e7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e552cd6afac414afba22bf962c7bef94bf8e7f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9257393c20357f1f5c454d252da8089dcc22c1fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9257393c20357f1f5c454d252da8089dcc22c1fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9257393c20357f1f5c454d252da8089dcc22c1fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9257393c20357f1f5c454d252da8089dcc22c1fd/comments", "author": null, "committer": null, "parents": [{"sha": "5d73aa6323d0795b477d1725ed9e62fcb7e9494c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d73aa6323d0795b477d1725ed9e62fcb7e9494c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d73aa6323d0795b477d1725ed9e62fcb7e9494c"}], "stats": {"total": 302, "additions": 193, "deletions": 109}, "files": [{"sha": "e681e609980a992765e8f47d7412d028dc893e85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -1,3 +1,27 @@\n+Sun Sep 12 23:28:20 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (gcc.o, gccspec.o, cppspec.o): Depend on gcc.h.\n+\n+\t* gcc.h: New file.\n+\t(lang_specific_driver): Don't take a function pointer parameter.\n+\tAll callers changed.\n+\n+\t* gcc.c: Include gcc.h.\n+\t(do_spec, fancy_abort,lang_specific_driver,lang_specific_pre_link,\n+\tlang_specific_extra_outfiles, fatal): Don't declare.\n+\t(multilib_defaults_raw): Constify.\n+\t(read_specs): Call memset, rather than bzero.\n+\t(main): Call return, not exit.\n+\t(lookup_compiler): Call memcpy, not bcopy.\n+\t(fatal): Make extern.\n+\n+\t* cppspec.c: Include gcc.h.\n+\t(lang_specific_driver): Initialize variable `quote'.  Constify a\n+\tchar*.  All calls to the function pointer parameter now\n+\texplicitly call `fatal'.\n+\n+\t* gccspec.c (lang_specific_driver): Include gcc.h.\n+\n Sun Sep 12 19:52:10 1999  Richard Earnshaw <rearnsha@arm.com>\n \n \t* arm.c (note_invalid_constants): Use recog_data.operand_type"}, {"sha": "1799933d602682cd215b657a7ca0ced56eb4f305", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -1419,13 +1419,13 @@ DRIVER_DEFINES = \\\n   -DDEFAULT_TARGET_MACHINE=\\\"$(target_alias)\\\" \\\n   -DTOOLDIR_BASE_PREFIX=\\\"$(exec_prefix)/\\\"\n gcc.o: gcc.c $(CONFIG_H) system.h intl.h multilib.h \\\n-    Makefile $(lang_specs_files) prefix.h\n+    Makefile $(lang_specs_files) prefix.h gcc.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n   $(DRIVER_DEFINES) \\\n   -c `echo $(srcdir)/gcc.c | sed 's,^\\./,,'`\n \n-gccspec.o: gccspec.c $(CONFIG_H) system.h\n-cppspec.o: cppspec.c $(CONFIG_H) system.h\n+gccspec.o: gccspec.c $(CONFIG_H) system.h gcc.h\n+cppspec.o: cppspec.c $(CONFIG_H) system.h gcc.h\n \n tree-check.h: s-check ; @true\n s-check : gencheck $(srcdir)/move-if-change"}, {"sha": "5d11fe63351bdbe339cd3069b38efce26bf3aedb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -1,3 +1,12 @@\n+Sun Sep 12 23:29:07 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Make-lang.in (g++spec.o): Depend on system.h and gcc.h.\n+\n+\t* g++spec.c: Include gcc.h.\n+\t(lang_specific_driver): Constify a char*.  Call xcalloc, not\n+ \txmalloc/bzero.  All calls to the function pointer parameter now\n+ \texplicitly call `fatal'.\n+\n 1999-09-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* call.c (implicit_conversion): Robustify.  Handle OFFSET_REFs."}, {"sha": "3051d9104136393a6c22aa0d62c56f878d9fc44b", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -75,7 +75,7 @@ C++ c++: cc1plus$(exeext)\n # Tell GNU make to ignore these if they exist.\n .PHONY: C++ c++\n \n-g++spec.o: $(srcdir)/cp/g++spec.c\n+g++spec.o: $(srcdir)/cp/g++spec.c system.h gcc.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/cp/g++spec.c\n \n $(INTL_TARGETS): $(srcdir)/cp/parse.c"}, {"sha": "239390d9c2df1ecaa307e834d90e8a9b7db343c8", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -20,6 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"gcc.h\"\n \n /* This bit is set if we saw a `-xfoo' language specification.  */\n #define LANGSPEC\t(1<<1)\n@@ -37,8 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n void\n-lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n-     void (*fn)();\n+lang_specific_driver (in_argc, in_argv, in_added_libraries)\n      int *in_argc;\n      char ***in_argv;\n      int *in_added_libraries;\n@@ -59,21 +59,22 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n \n   /* Used to track options that take arguments, so we don't go wrapping\n      those with -xc++/-xnone.  */\n-  char *quote = NULL;\n+  const char *quote = NULL;\n \n   /* The new argument list will be contained in this.  */\n-  char **arglist;\n+  char **real_arglist;\n+  const char **arglist;\n \n   /* Non-zero if we saw a `-xfoo' language specification on the\n      command line.  Used to avoid adding our own -xc++ if the user\n      already gave a language for the file.  */\n   int saw_speclang = 0;\n \n   /* \"-lm\" or \"-lmath\" if it appears on the command line.  */\n-  char *saw_math = 0;\n+  const char *saw_math = 0;\n \n   /* \"-lc\" if it appears on the command line.  */\n-  char *saw_libc = 0;\n+  const char *saw_libc = 0;\n \n   /* An array used to flag each argument that needs a bit set for\n      LANGSPEC, MATHLIB, or WITHLIBC.  */\n@@ -98,8 +99,7 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n   argv = *in_argv;\n   added_libraries = *in_added_libraries;\n \n-  args = (int *) xmalloc (argc * sizeof (int));\n-  bzero ((char *) args, argc * sizeof (int));\n+  args = (int *) xcalloc (argc, sizeof (int));\n \n   for (i = 1; i < argc; i++)\n     {\n@@ -188,7 +188,7 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n     }\n \n   if (quote)\n-    (*fn) (\"argument to `%s' missing\\n\", quote);\n+    fatal (\"argument to `%s' missing\\n\", quote);\n \n   /* If we know we don't have to do anything, bail now.  */\n   if (! added && ! library)\n@@ -199,7 +199,8 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n \n   /* Make sure to have room for the trailing NULL argument.  */\n   num_args = argc + added + need_math + 1;\n-  arglist = (char **) xmalloc (num_args * sizeof (char *));\n+  real_arglist = (char **) xmalloc (num_args * sizeof (char *));\n+  arglist = (const char **) real_arglist;\n \n   /* NOTE: We start at 1 now, not 0.  */\n   for (i = 0, j = 0; i < argc; i++, j++)\n@@ -253,7 +254,7 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n   arglist[j] = NULL;\n \n   *in_argc = j;\n-  *in_argv = arglist;\n+  *in_argv = real_arglist;\n   *in_added_libraries = added_libraries;\n }\n "}, {"sha": "f9a632f2433e1e314041b765b61fbca04e98ea62", "filename": "gcc/cppspec.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppspec.c?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -20,6 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"gcc.h\"\n \n /* The `cpp' executable installed in $(bindir) and $(cpp_install_dir)\n    is a customized version of the gcc driver.  It forces -E; -S and -c\n@@ -69,8 +70,7 @@ static const char *const known_suffixes[] =\n \n /* Filter argc and argv before processing by the gcc driver proper. */\n void\n-lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n-     void (*errfn) PVPROTO((const char *, ...));\n+lang_specific_driver (in_argc, in_argv, in_added_libraries)\n      int *in_argc;\n      char ***in_argv;\n      int *in_added_libraries ATTRIBUTE_UNUSED;\n@@ -99,8 +99,9 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n   /* Do we need to fix up an input file with an unrecognized suffix? */\n   int need_fixups = 1;\n   \n-  int i, j, quote;\n-  char **new_argv;\n+  int i, j, quote = 0;\n+  char **real_new_argv;\n+  const char **new_argv;\n   int new_argc;\n \n   /* First pass.  If we see an -S or -c, barf.  If we see an input file,\n@@ -124,8 +125,8 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n \t\tneed_E = 0;\n \t      else if (argv[i][1] == 'S' || argv[i][1] == 'c')\n \t\t{\n-\t\t  (*errfn) (\"`%s' is not a legal option to the preprocessor\",\n-\t\t\t    argv[i]);\n+\t\t  fatal (\"`%s' is not a legal option to the preprocessor\",\n+\t\t\t argv[i]);\n \t\t  return;\n \t\t}\n \t      else if (argv[i][1] == 'x')\n@@ -148,7 +149,7 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n \t  seen_input++;\n \t  if (seen_input == 3)\n \t    {\n-\t      (*errfn) (\"too many input files\");\n+\t      fatal (\"too many input files\");\n \t      return;\n \t    }\n \t  else if (seen_input == 2)\n@@ -195,7 +196,8 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n     return;\n \n   /* One more slot for a terminating null.  */\n-  new_argv = (char **) xmalloc ((new_argc + 1) * sizeof(char *));\n+  real_new_argv = (char **) xmalloc ((new_argc + 1) * sizeof(char *));\n+  new_argv = (const char **) real_new_argv.\n \n   new_argv[0] = argv[0];\n   j = 1;\n@@ -223,7 +225,7 @@ lang_specific_driver (errfn, in_argc, in_argv, in_added_libraries)\n \n   new_argv[j] = NULL;\n   *in_argc = new_argc;\n-  *in_argv = new_argv;\n+  *in_argv = real_new_argv;\n } \n \n /* Called before linking.  Returns 0 on success and -1 on failure. */"}, {"sha": "c0b1b0239ba570a67b660767ed10ffae4695e38f", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -1,3 +1,16 @@\n+Sun Sep 12 23:29:47 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Make-lang.in (g77spec.o): Depend on system.h and gcc.h.\n+\n+\t* g77spec.c: Include gcc.h.\n+\t(g77_xargv): Constify.\n+\t(g77_fn): Add parameter prototypes.\n+\t(lookup_option, append_arg): Add static prototypes.\n+\t(g77_newargv): Constify.\n+\t(lookup_option, append_arg, lang_specific_driver): Constify a char*.\n+\t(lang_specific_driver): All calls to the function pointer\n+ \tparameter now explicitly call `fatal'.\n+\n Fri Sep 10 10:32:32 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* com.h: Delete declarations for all tree nodes now moved to\n@@ -494,7 +507,7 @@ Sun Apr 11 21:33:33 1999  Mumit Khan  <khan@xraylith.wisc.edu>\n \t* g77spec.c (lang_specific_driver): Check whether MATH_LIBRARY is\n \tnull to decide whether to use it.\n \n-Wed Apr  7 09:47:09 1999  Kaveh R. Ghazi  <ghazi@snafu.rutgers.edu>\n+Wed Apr  7 09:47:09 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ansify.c (die): Specify void argument.\n "}, {"sha": "1009b71008e9b1089fd13bbe6a4980d81e85a446", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -59,7 +59,7 @@ F77 f77: f771$(exeext)\n   f77.extraclean f77.maintainer-clean f77.distdir f77.rebuilt \\\n   f77.stage1 f77.stage2 f77.stage3 f77.stage4\n \n-g77spec.o: $(srcdir)/f/g77spec.c $(srcdir)/f/version.h\n+g77spec.o: $(srcdir)/f/g77spec.c $(srcdir)/f/version.h system.h gcc.h\n \tcase \"$(LANGUAGES)\" in \\\n \t  *[fF]77*) touch lang-f77;; \\\n \t  *) rm -f lang-f77;; \\"}, {"sha": "96621c44071ecf10e8ba757afa41e59721035a61", "filename": "gcc/f/g77spec.c", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Ff%2Fg77spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Ff%2Fg77spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77spec.c?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -46,6 +46,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"gcc.h\"\n #include <f/version.h>\n \n #ifndef MATH_LIBRARY\n@@ -85,12 +86,15 @@ typedef enum\n \n /* The original argument list and related info is copied here.  */\n static int g77_xargc;\n-static char **g77_xargv;\n-static void (*g77_fn)();\n+static const char **g77_xargv;\n+static void lookup_option PARAMS ((Option *, int *, const char **,\n+\t\t\t\t   const char *));\n+static void append_arg PARAMS ((const char *));\n \n /* The new argument list will be built here.  */\n static int g77_newargc;\n-static char **g77_newargv;\n+static char **real_g77_newargv;\n+static const char **g77_newargv;\n \n extern char *version_string;\n \n@@ -136,12 +140,12 @@ static void\n lookup_option (xopt, xskip, xarg, text)\n      Option *xopt;\n      int *xskip;\n-     char **xarg;\n-     char *text;\n+     const char **xarg;\n+     const char *text;\n {\n   Option opt = OPTION_;\n   int skip;\n-  char *arg = NULL;\n+  const char *arg = NULL;\n \n   if ((skip = SWITCH_TAKES_ARG (text[1])))\n     skip -= (text[2] != '\\0');\t/* See gcc.c. */\n@@ -216,7 +220,7 @@ lookup_option (xopt, xskip, xarg, text)\n \n static void\n append_arg (arg)\n-     char *arg;\n+     const char *arg;\n {\n   static int newargsize;\n \n@@ -238,37 +242,37 @@ append_arg (arg)\n       int i;\n \n       newargsize = (g77_xargc << 2) + 20;\t/* This should handle all. */\n-      g77_newargv = (char **) xmalloc (newargsize * sizeof (char *));\n+      real_g77_newargv = (char **) xmalloc (newargsize * sizeof (char *));\n+      g77_newargv = (const char **) real_g77_newargv;\n \n       /* Copy what has been done so far.  */\n       for (i = 0; i < g77_newargc; ++i)\n \tg77_newargv[i] = g77_xargv[i];\n     }\n \n   if (g77_newargc == newargsize)\n-    (*g77_fn) (\"overflowed output arg list for `%s'\", arg);\n+    fatal (\"overflowed output arg list for `%s'\", arg);\n \n   g77_newargv[g77_newargc++] = arg;\n }\n \n void\n-lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n-     void (*fn)();\n+lang_specific_driver (in_argc, in_argv, in_added_libraries)\n      int *in_argc;\n      char ***in_argv;\n-     int *in_added_libraries;\n+     int *in_added_libraries ATTRIBUTE_UNUSED;\n {\n   int argc = *in_argc;\n-  char **argv = *in_argv;\n+  const char **argv = (const char **) *in_argv;\n   int i;\n   int verbose = 0;\n   Option opt;\n   int skip;\n-  char *arg;\n+  const char *arg;\n \n   /* This will be NULL if we encounter a situation where we should not\n      link in libf2c.  */\n-  char *library = FORTRAN_LIBRARY;\n+  const char *library = FORTRAN_LIBRARY;\n \n   /* This will become 0 if anything other than -v and kin (like -V)\n      is seen, meaning the user is trying to accomplish something.\n@@ -304,7 +308,6 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n   g77_xargv = argv;\n   g77_newargc = 0;\n   g77_newargv = argv;\n-  g77_fn = fn;\n \n   /* First pass through arglist.\n \n@@ -434,7 +437,7 @@ For bug reporting instructions, please see:\\n\\\n #endif\n \n \tcase OPTION_driver:\n-\t  (*fn) (\"--driver no longer supported\", argv[i]);\n+\t  fatal (\"--driver no longer supported\", argv[i]);\n \t  break;\n \n \tdefault:\n@@ -448,11 +451,11 @@ For bug reporting instructions, please see:\\n\\\n       if (i + skip < argc)\n \ti += skip;\n       else\n-\t(*fn) (\"argument to `%s' missing\", argv[i]);\n+\tfatal (\"argument to `%s' missing\", argv[i]);\n     }\n \n   if ((n_outfiles != 0) && (n_infiles == 0))\n-    (*fn) (\"No input files; unwilling to write output files\");\n+    fatal (\"No input files; unwilling to write output files\");\n \n   /* Second pass through arglist, transforming arguments as appropriate.  */\n \n@@ -486,7 +489,7 @@ For bug reporting instructions, please see:\\n\\\n \t  if (opt == OPTION_x)\n \t    {\n \t      /* Track input language. */\n-\t      char *lang;\n+\t      const char *lang;\n \n \t      if (arg == NULL)\n \t\tlang = argv[i+1];\n@@ -569,7 +572,7 @@ For bug reporting instructions, please see:\\n\\\n     }\n \n   *in_argc = g77_newargc;\n-  *in_argv = g77_newargv;\n+  *in_argv = real_g77_newargv;\n }\n \n /* Called before linking.  Returns 0 on success and -1 on failure. */"}, {"sha": "ff61c1ca1cd9c23f60938ed4a442f03ac72ed608", "filename": "gcc/gcc.c", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -38,6 +38,7 @@ compilation is specified by a string called a \"spec\".  */\n #include \"obstack.h\"\n #include \"intl.h\"\n #include \"prefix.h\"\n+#include \"gcc.h\"\n \n #ifdef VMS\n #define exit __posix_exit\n@@ -190,7 +191,6 @@ static void clear_failure_queue PROTO((void));\n static int check_live_switch\tPROTO((int, int));\n static const char *handle_braces PROTO((const char *));\n static char *save_string\tPROTO((const char *, int));\n-extern int do_spec\t\tPROTO((const char *));\n static int do_spec_1\t\tPROTO((const char *, int, const char *));\n static const char *find_file\tPROTO((const char *));\n static int is_directory\t\tPROTO((const char *, const char *, int));\n@@ -205,8 +205,6 @@ static void pfatal_with_name\tPROTO((const char *)) ATTRIBUTE_NORETURN;\n static void perror_with_name\tPROTO((const char *));\n static void pfatal_pexecute\tPROTO((const char *, const char *))\n   ATTRIBUTE_NORETURN;\n-static void fatal\t\tPVPROTO((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n static void error\t\tPVPROTO((const char *, ...))\n   ATTRIBUTE_PRINTF_1;\n static void notice\t\tPVPROTO((const char *, ...))\n@@ -220,18 +218,6 @@ static int execute\t\t\tPROTO ((void));\n static void unused_prefix_warnings\tPROTO ((struct path_prefix *));\n static void clear_args\t\t\tPROTO ((void));\n static void fatal_error\t\t\tPROTO ((int));\n-\n-void fancy_abort\t\tPROTO((void)) ATTRIBUTE_NORETURN;\n-\n-/* Called before processing to change/add/remove arguments. */\n-extern void lang_specific_driver PROTO ((void (*) PVPROTO((const char *, ...)),\n-\t\t\t\t\t int *, char ***, int *));\n-\n-/* Called before linking.  Returns 0 on success and -1 on failure. */\n-extern int lang_specific_pre_link ();\n-\n-/* Number of extra output files that lang_specific_pre_link may generate. */\n-extern int lang_specific_extra_outfiles;\n \f\n /* Specs are strings containing lines, each of which (if not blank)\n is made up of a program name, and arguments separated by spaces.\n@@ -503,7 +489,7 @@ static char *multilib_defaults;\n #define MULTILIB_DEFAULTS { \"\" }\n #endif\n \n-static char *multilib_defaults_raw[] = MULTILIB_DEFAULTS;\n+static const  char *const multilib_defaults_raw[] = MULTILIB_DEFAULTS;\n \n struct user_specs {\n   struct user_specs *next;\n@@ -1657,12 +1643,11 @@ read_specs (filename, main_p)\n \t\t\t (n_compilers + 2) * sizeof (struct compiler)));\n \n \t  compilers[n_compilers].suffix = suffix;\n-\t  bzero ((char *) compilers[n_compilers].spec,\n-\t\t sizeof compilers[n_compilers].spec);\n+\t  memset (compilers[n_compilers].spec, 0,\n+\t\t  sizeof compilers[n_compilers].spec);\n \t  compilers[n_compilers].spec[0] = spec;\n \t  n_compilers++;\n-\t  bzero ((char *) &compilers[n_compilers],\n-\t\t sizeof compilers[n_compilers]);\n+\t  memset (&compilers[n_compilers], 0, sizeof compilers[n_compilers]);\n \t}\n \n       if (*suffix == 0)\n@@ -2714,7 +2699,7 @@ process_command (argc, argv)\n   translate_options (&argc, &argv);\n \n   /* Do language-specific adjustment/addition of flags.  */\n-  lang_specific_driver (fatal, &argc, &argv, &added_libraries);\n+  lang_specific_driver (&argc, &argv, &added_libraries);\n \n   /* Scan argv twice.  Here, the first time, just count how many switches\n      there will be in their vector, and how many input files in theirs.\n@@ -4914,26 +4899,26 @@ main (argc, argv)\n       printf (\"install: %s%s\\n\", standard_exec_prefix, machine_suffix);\n       printf (\"programs: %s\\n\", build_search_list (&exec_prefixes, \"\", 0));\n       printf (\"libraries: %s\\n\", build_search_list (&startfile_prefixes, \"\", 0));\n-      exit (0);\n+      return (0);\n     }\n \n   if (print_file_name)\n     {\n       printf (\"%s\\n\", find_file (print_file_name));\n-      exit (0);\n+      return (0);\n     }\n \n   if (print_prog_name)\n     {\n       char *newname = find_a_file (&exec_prefixes, print_prog_name, X_OK);\n       printf (\"%s\\n\", (newname ? newname : print_prog_name));\n-      exit (0);\n+      return (0);\n     }\n \n   if (print_multi_lib)\n     {\n       print_multilib_info ();\n-      exit (0);\n+      return (0);\n     }\n \n   if (print_multi_directory)\n@@ -4942,7 +4927,7 @@ main (argc, argv)\n \tprintf (\".\\n\");\n       else\n \tprintf (\"%s\\n\", multilib_dir);\n-      exit (0);\n+      return (0);\n     }\n \n   if (print_help_list)\n@@ -4954,7 +4939,7 @@ main (argc, argv)\n \t  printf (\"\\nFor bug reporting instructions, please see:\\n\");\n \t  printf (\"<URL:http://www.gnu.org/software/gcc/faq.html#bugreport>.\\n\");\n \t  \n-\t  exit (0);\n+\t  return (0);\n \t}\n \n       /* We do not exit here.  Instead we have created a fake input file\n@@ -4981,7 +4966,7 @@ main (argc, argv)\n \t\tversion_string, compiler_version);\n \n       if (n_infiles == 0)\n-\texit (0);\n+\treturn (0);\n     }\n \n   if (n_infiles == added_libraries)\n@@ -5146,9 +5131,7 @@ main (argc, argv)\n       printf (\"<URL:http://www.gnu.org/software/gcc/faq.html#bugreport>\\n\");\n     }\n   \n-  exit (error_count > 0 ? (signal_count ? 2 : 1) : 0);\n-  /* NOTREACHED */\n-  return 0;\n+  return (error_count > 0 ? (signal_count ? 2 : 1) : 0);\n }\n \n /* Find the proper compilation spec for the file name NAME,\n@@ -5208,8 +5191,9 @@ lookup_compiler (name, length, language)\n \t      language = cp->spec[0] + 1;\n \t      new = (struct compiler *) xmalloc (sizeof (struct compiler));\n \t      new->suffix = cp->suffix;\n-\t      bcopy ((char *) lookup_compiler (NULL_PTR, 0, language)->spec,\n-\t\t     (char *) new->spec, sizeof new->spec);\n+\t      memcpy (new->spec,\n+\t\t      lookup_compiler (NULL_PTR, 0, language)->spec,\n+\t\t      sizeof new->spec);\n \t      return new;\n \t    }\n \n@@ -5280,7 +5264,7 @@ fancy_abort ()\n \f\n /* Output an error message and exit */\n \n-static void\n+void\n fatal VPROTO((const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES"}, {"sha": "3e870e2b590f40a0a4bbca3a2357146b532badc7", "filename": "gcc/gcc.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -0,0 +1,43 @@\n+/* Header file for modules that link with gcc.c\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifndef __GCC_H__\n+#define __GCC_H__\n+\n+/* These are exported by gcc.c. */\n+extern int do_spec PARAMS ((const char *));\n+extern void fancy_abort PARAMS ((void)) ATTRIBUTE_NORETURN;\n+extern const char *input_filename;\n+extern size_t input_filename_length;\n+extern void fatal PARAMS ((const char *, ...))\n+     ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n+\n+/* Spec files linked with gcc.c must provide definitions for these. */\n+\n+/* Called before processing to change/add/remove arguments. */\n+extern void lang_specific_driver PARAMS ((int *, char ***, int *));\n+\n+/* Called before linking.  Returns 0 on success and -1 on failure. */\n+extern int lang_specific_pre_link PARAMS ((void));\n+\n+/* Number of extra output files that lang_specific_pre_link may generate. */\n+extern int lang_specific_extra_outfiles;\n+\n+#endif /* ! __GCC_H__ */"}, {"sha": "5df63ab099fa0cea755acd5f4454a602d094cba4", "filename": "gcc/gccspec.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fgccspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fgccspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgccspec.c?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -20,11 +20,11 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"gcc.h\"\n \n /* Filter argc and argv before processing by the gcc driver proper. */\n void\n-lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n-     void (*fn)() ATTRIBUTE_UNUSED;\n+lang_specific_driver (in_argc, in_argv, in_added_libraries)\n      int *in_argc ATTRIBUTE_UNUSED;\n      char ***in_argv ATTRIBUTE_UNUSED;\n      int *in_added_libraries ATTRIBUTE_UNUSED;"}, {"sha": "8fd784fd388fbf8d0c69f7a957f2038dfd083d16", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -1,3 +1,15 @@\n+Sun Sep 12 23:30:09 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Make-lang.in (jvspec.o): Depend on system.h and gcc.h.\n+\n+\t* jvspec.c: Include gcc.h.  Don't include gansidecl.h.\n+\t(do_spec, lang_specific_pre_link, lang_specific_driver,\n+\tinput_filename, input_filename_length): Don't declare.\n+\t(main_class_name, jvgenmain_spec, lang_specific_driver):\n+\tConstify a char*.\n+\t(lang_specific_driver): All calls to the function pointer\n+\tparameter now explicitly call `fatal'. \n+\n Sat Sep 11 16:46:44 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (find_applicable_accessible_methods_list): Search"}, {"sha": "b55ee451ac9daaf0e957e5903c57abe1d1443baf", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -80,7 +80,7 @@ JAVA_SRCS = $(srcdir)/java/parse.y $(srcdir)/java/class.c \\\n jc1$(exeext): $(P) $(JAVA_SRCS) $(LIBDEPS) stamp-objlist ggc-callbacks.o\n \tcd java; $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jc1$(exeext)\n \n-jvspec.o: $(srcdir)/java/jvspec.c\n+jvspec.o: $(srcdir)/java/jvspec.c system.h gcc.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$(INCLUDES) $(srcdir)/java/jvspec.c\n "}, {"sha": "e3b3a23a5e686056590b8378a2cb63e974674376", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257393c20357f1f5c454d252da8089dcc22c1fd/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=9257393c20357f1f5c454d252da8089dcc22c1fd", "patch": "@@ -24,10 +24,8 @@ of Sun Microsystems, Inc. in the United States and other countries.\n The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n #include \"config.h\"\n-\n #include \"system.h\"\n-\n-#include \"gansidecl.h\"\n+#include \"gcc.h\"\n \n /* Name of spec file.  */\n #define SPEC_FILE \"libgcj.spec\"\n@@ -42,22 +40,16 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #define CLASS_FILE_ARG\t(1<<4)\n \n static char *find_spec_file\tPROTO ((const char *));\n-extern int do_spec\t\tPROTO((char *));\n-extern int lang_specific_pre_link PROTO((void));\n-extern void lang_specific_driver PROTO ((void (*) (const char *, ...),\n-\t\t\t\t\t int *, char ***, int *));\n-extern char *input_filename;\n-extern size_t input_filename_length;\n-\n-char *main_class_name = NULL;\n+\n+static const char *main_class_name = NULL;\n int lang_specific_extra_outfiles = 0;\n \n /* Once we have the proper support in jc1 (and gcc.c) working,\n    set COMBINE_INPUTS to one.  This enables combining multiple *.java\n    and *.class input files to be passed to a single jc1 invocation. */\n #define COMBINE_INPUTS 0\n \n-char jvgenmain_spec[] =\n+const char jvgenmain_spec[] =\n   \"jvgenmain %i %{!pipe:%u.i} |\\n\\\n    cc1 %{!pipe:%U.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n@@ -92,8 +84,7 @@ find_spec_file (dir)\n }\n \n void\n-lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n-     void (*fn) PROTO ((const char *, ...));\n+lang_specific_driver (in_argc, in_argv, in_added_libraries)\n      int *in_argc;\n      char ***in_argv;\n      int *in_added_libraries;\n@@ -138,27 +129,28 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n \n   /* Used to track options that take arguments, so we don't go wrapping\n      those with -xc++/-xnone.  */\n-  char *quote = NULL;\n+  const char *quote = NULL;\n \n   /* The new argument list will be contained in this.  */\n-  char **arglist;\n+  char **real_arglist;\n+  const char **arglist;\n \n   /* Non-zero if we saw a `-xfoo' language specification on the\n      command line.  Used to avoid adding our own -xc++ if the user\n      already gave a language for the file.  */\n   int saw_speclang = 0;\n \n   /* \"-lm\" or \"-lmath\" if it appears on the command line.  */\n-  char *saw_math ATTRIBUTE_UNUSED = 0;\n+  const char *saw_math ATTRIBUTE_UNUSED = 0;\n \n   /* \"-lc\" if it appears on the command line.  */\n-  char *saw_libc ATTRIBUTE_UNUSED = 0;\n+  const char *saw_libc ATTRIBUTE_UNUSED = 0;\n \n   /* \"-lgcjgc\" if it appears on the command line.  */\n-  char *saw_gc ATTRIBUTE_UNUSED = 0;\n+  const char *saw_gc ATTRIBUTE_UNUSED = 0;\n \n   /* Saw `-l' option for the thread library.  */\n-  char *saw_threadlib ATTRIBUTE_UNUSED = 0;\n+  const char *saw_threadlib ATTRIBUTE_UNUSED = 0;\n \n   /* Saw `-lgcj' on command line.  */\n   int saw_libgcj ATTRIBUTE_UNUSED = 0;\n@@ -337,7 +329,7 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n     }\n \n   if (quote)\n-    (*fn) (\"argument to `%s' missing\\n\", quote);\n+    fatal (\"argument to `%s' missing\\n\", quote);\n \n   num_args = argc + added;\n   if (saw_C)\n@@ -349,7 +341,7 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n       num_args += 2;  /* For -o NONE. */\n #endif\n       if (saw_o)\n-\t(*fn) (\"cannot specify both -C and -o\");\n+\tfatal (\"cannot specify both -C and -o\");\n     }\n #if COMBINE_INPUTS\n   if (saw_o && java_files_count + (saw_C ? 0 : class_files_count) > 1)\n@@ -385,7 +377,8 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n   if (saw_g + saw_O == 0)\n     num_args++;\n   num_args++;\n-  arglist = (char **) xmalloc ((num_args + 1) * sizeof (char *));\n+  arglist = (const char **)\n+    (real_arglist = (char **) xmalloc ((num_args + 1) * sizeof (char *)));\n \n   for (i = 0, j = 0; i < argc; i++, j++)\n     {\n@@ -421,7 +414,7 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n       if (strncmp (argv[i], \"-fmain=\", 7) == 0)\n \t{\n \t  if (! will_link)\n-\t    (*fn) (\"cannot specify `main' class when not linking\");\n+\t    fatal (\"cannot specify `main' class when not linking\");\n \t  --j;\n \t  continue;\n \t}\n@@ -480,7 +473,7 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n   arglist[j] = NULL;\n \n   *in_argc = j;\n-  *in_argv = arglist;\n+  *in_argv = real_arglist;\n   *in_added_libraries = added_libraries;\n }\n "}]}