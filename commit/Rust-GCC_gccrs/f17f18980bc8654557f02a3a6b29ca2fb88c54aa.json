{"sha": "f17f18980bc8654557f02a3a6b29ca2fb88c54aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3ZjE4OTgwYmM4NjU0NTU3ZjAyYTNhNmIyOWNhMmZiODhjNTRhYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-05-13T04:59:33Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-13T04:59:33Z"}, "message": "java-tree.def (JAVA_EXC_OBJ_EXPR): New.\n\n        * java-tree.def (JAVA_EXC_OBJ_EXPR): New.\n        * expr.c (java_lang_expand_expr): Expand it.\n        (process_jvm_instruction): Build JAVA_EXC_OBJ_EXPR instead of\n        calling build_exception_object_ref.\n        * parse.y (catch_clause_parameter): Likewise.\n        (build_dot_class_method): Likewise.\n        (try_reference_assignconv): Likewise.\n        * check-init.c (check_init): Check JAVA_EXC_OBJ_EXPR not EXC_PTR_EXPR.\n        * jcf-write.c (generate_bytecode_insns): Likewise.\n\nFrom-SVN: r42030", "tree": {"sha": "d37b268dcb8cc4b3d21e21a0832052417e87e5f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d37b268dcb8cc4b3d21e21a0832052417e87e5f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f17f18980bc8654557f02a3a6b29ca2fb88c54aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17f18980bc8654557f02a3a6b29ca2fb88c54aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17f18980bc8654557f02a3a6b29ca2fb88c54aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/comments", "author": null, "committer": null, "parents": [{"sha": "d9c219593bd31a92d0c7a7ee111604cc0f8b7234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c219593bd31a92d0c7a7ee111604cc0f8b7234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c219593bd31a92d0c7a7ee111604cc0f8b7234"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "1c8e207595f8b2d36c6f0f9afb3818ca37d5a3b3", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f17f18980bc8654557f02a3a6b29ca2fb88c54aa", "patch": "@@ -1,3 +1,15 @@\n+2001-05-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* java-tree.def (JAVA_EXC_OBJ_EXPR): New.\n+\t* expr.c (java_lang_expand_expr): Expand it.\n+\t(process_jvm_instruction): Build JAVA_EXC_OBJ_EXPR instead of\n+\tcalling build_exception_object_ref.\n+\t* parse.y (catch_clause_parameter): Likewise.\n+\t(build_dot_class_method): Likewise.\n+\t(try_reference_assignconv): Likewise.\n+\t* check-init.c (check_init): Check JAVA_EXC_OBJ_EXPR not EXC_PTR_EXPR.\n+\t* jcf-write.c (generate_bytecode_insns): Likewise.\n+\n 2001-05-07  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* parse.y (build_unresolved_array_type): Set"}, {"sha": "19764439e0e0e882f0bd48c2b258be96eccebda8", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=f17f18980bc8654557f02a3a6b29ca2fb88c54aa", "patch": "@@ -681,7 +681,7 @@ check_init (exp, before)\n     case INTEGER_CST:\n     case REAL_CST:\n     case STRING_CST:\n-    case EXC_PTR_EXPR:\n+    case JAVA_EXC_OBJ_EXPR:\n       break;\n \n     case NEW_CLASS_EXPR:"}, {"sha": "861069d95bc3ebb5aa1ee9fd0074d7d7a4ccc933", "filename": "gcc/java/expr.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=f17f18980bc8654557f02a3a6b29ca2fb88c54aa", "patch": "@@ -2351,9 +2351,9 @@ get_primitive_array_vtable (tree elt)\n struct rtx_def *\n java_lang_expand_expr (exp, target, tmode, modifier)\n      register tree exp;\n-     rtx target ATTRIBUTE_UNUSED;\n-     enum machine_mode tmode ATTRIBUTE_UNUSED;\n-     enum expand_modifier modifier ATTRIBUTE_UNUSED;\n+     rtx target;\n+     enum machine_mode tmode;\n+     enum expand_modifier modifier;\n {\n   tree current;\n \n@@ -2506,6 +2506,10 @@ java_lang_expand_expr (exp, target, tmode, modifier)\n       expand_end_all_catch ();\n       return const0_rtx;\n \n+    case JAVA_EXC_OBJ_EXPR:\n+      return expand_expr (build_exception_object_ref (TREE_TYPE (exp)),\n+\t\t\t  target, tmode, modifier);\n+\n     default:\n       internal_error (\"Can't expand %s\", tree_code_name [TREE_CODE (exp)]);\n     }\n@@ -2803,7 +2807,7 @@ process_jvm_instruction (PC, byte_ops, length)\n   if (instruction_bits [PC] & BCODE_EXCEPTION_TARGET)\n     {\n       tree type = pop_type (ptr_type_node);\n-      push_value (build_exception_object_ref (type));\n+      push_value (build (JAVA_EXC_OBJ_EXPR, type));\n     }\n \n   switch (byte_ops[PC++])"}, {"sha": "c2e926f910b8de6d57e61f7cdf04c782047c5b7f", "filename": "gcc/java/java-tree.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2Fjava-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2Fjava-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.def?ref=f17f18980bc8654557f02a3a6b29ca2fb88c54aa", "patch": "@@ -93,6 +93,10 @@ DEFTREECODE (CLASS_LITERAL, \"class_literal\", '1', 1)\n    is used for context detection, so that special rules can be\n    enforced. */\n DEFTREECODE (INSTANCE_INITIALIZERS_EXPR, \"instance_initializers_expr\", '1', 1)\n+\n+/* The Java object within the exception object from the runtime.  */\n+DEFTREECODE (JAVA_EXC_OBJ_EXPR, \"java_exc_obj_expr\", 'e', 0)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "9a4eb5b21c6b9d34ca3ffa411e98298c7942d9b7", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=f17f18980bc8654557f02a3a6b29ca2fb88c54aa", "patch": "@@ -2451,7 +2451,7 @@ generate_bytecode_insns (exp, target, state)\n \t  }\n       }\n       break;\n-    case EXC_PTR_EXPR:\n+    case JAVA_EXC_OBJ_EXPR:\n       NOTE_PUSH (1);  /* Pushed by exception system. */\n       break;\n     case NEW_CLASS_EXPR:"}, {"sha": "10283b50562ac7d61a59a3e84973a6152fa52a10", "filename": "gcc/java/parse.y", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f18980bc8654557f02a3a6b29ca2fb88c54aa/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=f17f18980bc8654557f02a3a6b29ca2fb88c54aa", "patch": "@@ -1888,7 +1888,7 @@ catch_clause_parameter:\n \t\t  tree ccpb = enter_block ();\n \t\t  tree init = build_assignment\n \t\t    (ASSIGN_TK, $2.location, TREE_PURPOSE ($3), \n-\t\t     build_exception_object_ref (ptr_type_node));\n+\t\t     build (JAVA_EXC_OBJ_EXPR, ptr_type_node));\n \t\t  declare_local_variables (0, TREE_VALUE ($3),\n \t\t\t\t\t   build_tree_list (TREE_PURPOSE ($3),\n \t\t\t\t\t\t\t    init));\n@@ -8415,7 +8415,7 @@ build_dot_class_method (class)\n   \n   /* We initialize the variable with the exception handler. */\n   catch = build (MODIFY_EXPR, NULL_TREE, catch_clause_param,\n-\t\t build_exception_object_ref (ptr_type_node));\n+\t\t build (JAVA_EXC_OBJ_EXPR, ptr_type_node));\n   add_stmt_to_block (catch_block, NULL_TREE, catch);\n \n   /* We add the statement throwing the new exception */\n@@ -12624,7 +12624,7 @@ try_reference_assignconv (lhs_type, rhs)\n       else if (valid_ref_assignconv_cast_p (rhs_type, lhs_type, 0))\n \tnew_rhs = rhs;\n       /* This is a magic assignment that we process differently */\n-      else if (TREE_CODE (rhs) == EXC_PTR_EXPR)\n+      else if (TREE_CODE (rhs) == JAVA_EXC_OBJ_EXPR)\n \tnew_rhs = rhs;\n     }\n   return new_rhs;"}]}