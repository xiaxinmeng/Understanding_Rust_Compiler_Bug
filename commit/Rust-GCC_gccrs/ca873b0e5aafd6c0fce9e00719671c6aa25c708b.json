{"sha": "ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4NzNiMGU1YWFmZDZjMGZjZTllMDA3MTk2NzFjNmFhMjVjNzA4Yg==", "commit": {"author": {"name": "Simon Baldwin", "email": "simonb@google.com", "date": "2008-05-01T19:03:32Z"}, "committer": {"name": "Simon Baldwin", "email": "simonb@gcc.gnu.org", "date": "2008-05-01T19:03:32Z"}, "message": "c-common.h (warn_array_subscript_range): New function.\n\n        * c-common.h (warn_array_subscript_range): New function.\n        * c-common.c (warn_array_subscript_range): Ditto.\n        * tree-vrp.c (check_array_ref): Corrected code to agree with\n        comment, ignoring only arrays of size 0 or size 1.\n        * c-typeck.c (build_array_ref): Call warn_array_subscript_range.\n\n        * testsuite/gcc.dg/Warray-bounds.c: Updated for frontend warnings,\n        additional tests for arrays of size 0 and size 1.\n        * testsuite/g++.dg/warn/Warray-bounds.c: Ditto.\n        * testsuite/gcc.dg/Warray-bounds-noopt.c: New testcase.\n        * testsuite/g++.dg/warn/Warray-bounds-noopt.c: Ditto.\n\n        * typeck.c (build_array_ref): Call warn_array_subscript_range.\n\nFrom-SVN: r134865", "tree": {"sha": "9ed540dc4bc280eaffa691609aa5d92b79a62090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ed540dc4bc280eaffa691609aa5d92b79a62090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/comments", "author": null, "committer": null, "parents": [{"sha": "99c25ac11ec95adec4139b7aa79a4741a52111be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c25ac11ec95adec4139b7aa79a4741a52111be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99c25ac11ec95adec4139b7aa79a4741a52111be"}], "stats": {"total": 446, "additions": 425, "deletions": 21}, "files": [{"sha": "fc9095efa6cfd8db7b6260c7b671b86588428ead", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -1,3 +1,11 @@\n+2008-05-01  Simon Baldwin <simonb@google.com>\n+\n+\t* c-common.h (warn_array_subscript_range): New function.\n+\t* c-common.c (warn_array_subscript_range): Ditto.\n+\t* tree-vrp.c (check_array_ref): Corrected code to agree with\n+\tcomment, ignoring only arrays of size 0 or size 1.\n+\t* c-typeck.c (build_array_ref): Call warn_array_subscript_range.\n+\n 2008-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_builtin_type): Replace"}, {"sha": "3fa16492658fcbaede785b6ed703da4e0a2213cd", "filename": "gcc/c-common.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -7452,6 +7452,60 @@ warn_array_subscript_with_type_char (tree index)\n     warning (OPT_Wchar_subscripts, \"array subscript has type %<char%>\");\n }\n \n+/* Warn about obvious array bounds errors for fixed size arrays that\n+   are indexed by a constant.  This is a subset of similar checks in\n+   tree-vrp.c; by doing this here we can get some level of checking\n+   from non-optimized, non-vrp compilation.  Returns true if a warning\n+   is issued.  */\n+\n+bool\n+warn_array_subscript_range (const_tree array, const_tree index)\n+{\n+  if (skip_evaluation == 0\n+      && TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE\n+      && TYPE_DOMAIN (TREE_TYPE (array)) && TREE_CODE (index) == INTEGER_CST)\n+    {\n+      const_tree max_index;\n+\n+      max_index = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (array)));\n+      if (max_index && TREE_CODE (max_index) == INTEGER_CST\n+          && tree_int_cst_lt (max_index, index)\n+          && !tree_int_cst_equal (index, max_index)\n+          /* Always allow off-by-one.  */\n+          && !tree_int_cst_equal (int_const_binop (PLUS_EXPR,\n+                                                   max_index,\n+                                                   integer_one_node,\n+                                                   0),\n+                                  index)\n+          /* Accesses after the end of arrays of size 0 (gcc\n+             extension) and 1 are likely intentional (\"struct\n+             hack\").  Note that max_index is array dimension - 1.  */\n+          && compare_tree_int (max_index, 1) >= 0)\n+        {\n+          warning (OPT_Warray_bounds,\n+                   \"array subscript is above array bounds\");\n+          return true;\n+        }\n+      else\n+        {\n+          const_tree min_index;\n+\n+          min_index = TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (array)));\n+          if (min_index && TREE_CODE (min_index) == INTEGER_CST\n+              && tree_int_cst_lt (index, min_index))\n+            {\n+              warning (OPT_Warray_bounds,\n+                       compare_tree_int (min_index, 0) == 0\n+                           ? \"array subscript is negative\"\n+                           : \"array subscript is below array bounds\");\n+              return true;\n+            }\n+        }\n+    }\n+\n+  return false;\n+}\n+\n /* Implement -Wparentheses for the unexpected C precedence rules, to\n    cover cases like x + y << z which readers are likely to\n    misinterpret.  We have seen an expression in which CODE is a binary"}, {"sha": "4f4a414c6d3ef453ce1ae9eddc1bb7053fe24230", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -893,6 +893,7 @@ extern int complete_array_type (tree *, tree, bool);\n extern tree builtin_type_for_size (int, bool);\n \n extern void warn_array_subscript_with_type_char (tree);\n+extern bool warn_array_subscript_range (const_tree, const_tree);\n extern void warn_about_parentheses (enum tree_code, enum tree_code,\n \t\t\t\t    enum tree_code);\n extern void warn_for_unused_label (tree label);"}, {"sha": "dc4cb2b95af27be9c0cb56d453a69b3577a2a2a2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -2086,7 +2086,12 @@ build_array_ref (tree array, tree index)\n \n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n     {\n-      tree rval, type;\n+      tree rval, type, ref;\n+      bool has_warned_on_bounds_check = false;\n+\n+      /* Warn about any obvious array bounds errors for fixed size arrays that\n+         are indexed by a constant.  */\n+      has_warned_on_bounds_check = warn_array_subscript_range (array, index);\n \n       /* An array that is indexed by a non-constant\n \t cannot be stored in a register; we must be able to do\n@@ -2139,7 +2144,12 @@ build_array_ref (tree array, tree index)\n \t       in an inline function.\n \t       Hope it doesn't break something else.  */\n \t    | TREE_THIS_VOLATILE (array));\n-      return require_complete_type (fold (rval));\n+      ref = require_complete_type (fold (rval));\n+\n+      /* Suppress bounds warning in tree-vrp.c if already warned here.  */\n+      if (has_warned_on_bounds_check)\n+        TREE_NO_WARNING (ref) = 1;\n+      return ref;\n     }\n   else\n     {"}, {"sha": "29b70d02ad499f8ba9d6304934a94d378e4d2cc8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -1,3 +1,7 @@\n+2008-05-01  Simon Baldwin <simonb@google.com>\n+\n+\t* typeck.c (build_array_ref): Call warn_array_subscript_range.\n+\n 2008-04-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/35986"}, {"sha": "1447182ed017adf032ae37d4c2683a13a07f7d45", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -2556,7 +2556,8 @@ build_array_ref (tree array, tree idx)\n \n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n     {\n-      tree rval, type;\n+      bool has_warned_on_bounds_check = false;\n+      tree rval, type, ref;\n \n       warn_array_subscript_with_type_char (idx);\n \n@@ -2573,6 +2574,10 @@ build_array_ref (tree array, tree idx)\n \t pointer arithmetic.)  */\n       idx = perform_integral_promotions (idx);\n \n+      /* Warn about any obvious array bounds errors for fixed size arrays that\n+         are indexed by a constant.  */\n+      has_warned_on_bounds_check = warn_array_subscript_range (array, idx);\n+\n       /* An array that is indexed by a non-constant\n \t cannot be stored in a register; we must be able to do\n \t address arithmetic on its address.\n@@ -2623,7 +2628,12 @@ build_array_ref (tree array, tree idx)\n \t|= (CP_TYPE_VOLATILE_P (type) | TREE_SIDE_EFFECTS (array));\n       TREE_THIS_VOLATILE (rval)\n \t|= (CP_TYPE_VOLATILE_P (type) | TREE_THIS_VOLATILE (array));\n-      return require_complete_type (fold_if_not_in_template (rval));\n+      ref = require_complete_type (fold_if_not_in_template (rval));\n+\n+      /* Suppress bounds warning in tree-vrp.c if already warned here.  */\n+      if (has_warned_on_bounds_check)\n+        TREE_NO_WARNING (ref) = 1;\n+      return ref;\n     }\n \n   {"}, {"sha": "c147219ad1b9e820b0b00e4759c331ab2fb7356f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -2679,7 +2679,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n @option{-Wall} turns on the following warning flags:\n \n @gccoptlist{-Waddress   @gol\n--Warray-bounds @r{(only with} @option{-O2}@r{)}  @gol\n+-Warray-bounds @r{(some checks, but more complete with} @option{-O2}@r{)}  @gol\n -Wc++0x-compat  @gol\n -Wchar-subscripts  @gol\n -Wimplicit-int  @gol\n@@ -3382,9 +3382,10 @@ false positives.\n @item -Warray-bounds\n @opindex Wno-array-bounds\n @opindex Warray-bounds\n-This option is only active when @option{-ftree-vrp} is active\n-(default for -O2 and above). It warns about subscripts to arrays\n-that are always out of bounds. This warning is enabled by @option{-Wall}.\n+This option detects some cases of out-of-bounds accesses in unoptimized\n+compilations.  More cases are detected when @option{-ftree-vrp} is enabled.\n+(The @option{-ftree-vrp} option is enabled automatically when compiling with\n+@option{-O2} or higher optimization options.)\n \n @item -Wno-div-by-zero\n @opindex Wno-div-by-zero"}, {"sha": "c4ef1364b47f49c2c4e1b73f66648baadfdbf320", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -1,3 +1,11 @@\n+2008-05-01  Simon Baldwin <simonb@google.com>\n+\n+\t* testsuite/gcc.dg/Warray-bounds.c: Updated for frontend warnings,\n+\tadditional tests for arrays of size 0 and size 1.\n+\t* testsuite/g++.dg/warn/Warray-bounds.c: Ditto.\n+\t* testsuite/gcc.dg/Warray-bounds-noopt.c: New testcase.\n+\t* testsuite/g++.dg/warn/Warray-bounds-noopt.c: Ditto.\n+\n 2008-05-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/36093"}, {"sha": "650f2690e5ce4e926c123d9b2f2bdf6a037de2cf", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-noopt.C", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-noopt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-noopt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-noopt.C?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Warray-bounds\" } */\n+\n+int a[10];\n+\n+static inline int n(void) {\n+    __SIZE_TYPE__ strlen(const char *s);\n+    return strlen(\"12345\");\n+}\n+\n+void g(int *p);\n+void h(int p);\n+\n+int* f(void) {\n+    int b[10];\n+    int i;\n+    struct {\n+       int c[10];\n+    } c;\n+    int p[0], q[1], r[2], s[3], t[4];\n+\n+    a[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    a[ 0] = 0;\n+    a[ 1] = 0;\n+\n+\n+    a[ 9] = 0;\n+    a[10] = 0;\n+    a[11] = 0;             /* { dg-warning \"array subscript\" } */\n+    a[2 * n() - 11] = 0;\n+    a[2 * n() - 10] = 0;\n+    a[2 * n() -  1] = 0;\n+    a[2 * n() -  0] = 0;\n+\n+    b[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    b[ 0] = 0;\n+    b[ 1] = 0;\n+    b[ 9] = 0;\n+    b[10] = 0;\n+    b[11] = 0;             /* { dg-warning \"array subscript\" } */\n+    b[2 * n() - 11] = 0;\n+    b[2 * n() - 10] = 0;\n+    b[2 * n() -  1] = 0;\n+    b[2 * n() -  0] = 0;\n+\n+    c.c[-1] = 0;           /* { dg-warning \"array subscript\" } */\n+    c.c[ 0] = 0;\n+    c.c[ 1] = 0;\n+    c.c[ 9] = 0;\n+    c.c[10] = 0;\n+    c.c[11] = 0;           /* { dg-warning \"array subscript\" } */\n+    c.c[2 * n() - 11] = 0;\n+    c.c[2 * n() - 10] = 0;\n+    c.c[2 * n() -  1] = 0;\n+    c.c[2 * n() -  0] = 0;\n+\n+    g(&a[8]);\n+    g(&a[9]);\n+    g(&a[10]);\n+    g(&a[11]);             /* { dg-warning \"array subscript\" } */\n+    g(&a[-30]+10);         /* { dg-warning \"array subscript\" } */\n+    g(&a[-30]+30);         /* { dg-warning \"array subscript\" } */\n+\n+    g(&b[10]);\n+    g(&c.c[10]);\n+    g(&b[11]);             /* { dg-warning \"array subscript\" } */\n+    g(&c.c[11]);           /* { dg-warning \"array subscript\" } */\n+\n+    g(&a[0]);\n+    g(&b[0]);\n+    g(&c.c[0]);\n+\n+    g(&a[-1]);             /* { dg-warning \"array subscript\" } */\n+    g(&b[-1]);             /* { dg-warning \"array subscript\" } */ \n+    h(sizeof a[-1]);\n+    h(sizeof a[10]);\n+    h(sizeof b[-1]);\n+    h(sizeof b[10]);\n+    h(sizeof c.c[-1]);\n+    h(sizeof c.c[10]);\n+\n+    p[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    p[0] = 0;\n+    p[1] = 0;\n+\n+    q[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    q[0] = 0;\n+    q[1] = 0;\n+    q[2] = 0;\n+\n+    r[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    r[0] = 0;\n+    r[1] = 0;\n+    r[2] = 0;\n+    r[3] = 0;              /* { dg-warning \"array subscript\" } */\n+\n+    s[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    s[0] = 0;\n+    s[1] = 0;\n+    s[2] = 0;\n+    s[3] = 0;\n+    s[4] = 0;              /* { dg-warning \"array subscript\" } */\n+\n+    t[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    t[0] = 0;\n+    t[1] = 0;\n+    t[2] = 0;\n+    t[3] = 0;\n+    t[4] = 0;\n+    t[5] = 0;              /* { dg-warning \"array subscript\" } */\n+\n+    if (10 < 10)\n+       a[10] = 0;\n+    if (10 < 10)\n+       b[10] = 0;\n+    if (-1 >= 0)\n+       c.c[-1] = 0;        /* { dg-warning \"array subscript\" } */\n+\n+    for (i = 20; i < 30; ++i)\n+             a[i] = 1;\n+\n+    return a;\n+}"}, {"sha": "02fd8171869dd4c6e40c5f7f28f3ef9f6ae8b6ff", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds.C", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds.C?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -17,6 +17,7 @@ int* f(void) {\n     struct {\n        int c[10];\n     } c;\n+    int p[0], q[1], r[2], s[3], t[4];\n \n     a[-1] = 0;             /* { dg-warning \"array subscript\" } */\n     a[ 0] = 0;\n@@ -57,12 +58,11 @@ int* f(void) {\n     g(&a[9]);\n     g(&a[10]);\n     g(&a[11]);             /* { dg-warning \"array subscript\" } */\n-    g(&a[-30]+10);             /* { dg-warning \"array subscript\" } */\n-    g(&a[-30]+30);\n+    g(&a[-30]+10);         /* { dg-warning \"array subscript\" } */\n+    g(&a[-30]+30);         /* { dg-warning \"array subscript\" } */\n \n     g(&b[10]);\n     g(&c.c[10]);\n-    g(&a[11]);             /* { dg-warning \"array subscript\" } */\n     g(&b[11]);             /* { dg-warning \"array subscript\" } */\n     g(&c.c[11]);           /* { dg-warning \"array subscript\" } */\n \n@@ -79,13 +79,45 @@ int* f(void) {\n     h(sizeof c.c[-1]);\n     h(sizeof c.c[10]);\n \n+    p[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    p[0] = 0;\n+    p[1] = 0;\n+\n+    q[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    q[0] = 0;\n+    q[1] = 0;\n+    q[2] = 0;\n+\n+    r[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    r[0] = 0;\n+    r[1] = 0;\n+    r[2] = 0;\n+    r[3] = 0;              /* { dg-warning \"array subscript\" } */\n+\n+    s[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    s[0] = 0;\n+    s[1] = 0;\n+    s[2] = 0;\n+    s[3] = 0;\n+    s[4] = 0;              /* { dg-warning \"array subscript\" } */\n+\n+    t[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    t[0] = 0;\n+    t[1] = 0;\n+    t[2] = 0;\n+    t[3] = 0;\n+    t[4] = 0;\n+    t[5] = 0;              /* { dg-warning \"array subscript\" } */\n+\n     if (10 < 10)\n        a[10] = 0;\n     if (10 < 10)\n        b[10] = 0;\n     if (-1 >= 0)\n-       c.c[-1] = 0;\n+       c.c[-1] = 0;        /* { dg-warning \"array subscript\" } */\n+\n+    for (i = 20; i < 30; ++i)\n+             a[i] = 1;       /* { dg-warning \"array subscript\" } */\n \n     return a;\n }\n-"}, {"sha": "650f2690e5ce4e926c123d9b2f2bdf6a037de2cf", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-noopt.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-noopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-noopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-noopt.c?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Warray-bounds\" } */\n+\n+int a[10];\n+\n+static inline int n(void) {\n+    __SIZE_TYPE__ strlen(const char *s);\n+    return strlen(\"12345\");\n+}\n+\n+void g(int *p);\n+void h(int p);\n+\n+int* f(void) {\n+    int b[10];\n+    int i;\n+    struct {\n+       int c[10];\n+    } c;\n+    int p[0], q[1], r[2], s[3], t[4];\n+\n+    a[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    a[ 0] = 0;\n+    a[ 1] = 0;\n+\n+\n+    a[ 9] = 0;\n+    a[10] = 0;\n+    a[11] = 0;             /* { dg-warning \"array subscript\" } */\n+    a[2 * n() - 11] = 0;\n+    a[2 * n() - 10] = 0;\n+    a[2 * n() -  1] = 0;\n+    a[2 * n() -  0] = 0;\n+\n+    b[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    b[ 0] = 0;\n+    b[ 1] = 0;\n+    b[ 9] = 0;\n+    b[10] = 0;\n+    b[11] = 0;             /* { dg-warning \"array subscript\" } */\n+    b[2 * n() - 11] = 0;\n+    b[2 * n() - 10] = 0;\n+    b[2 * n() -  1] = 0;\n+    b[2 * n() -  0] = 0;\n+\n+    c.c[-1] = 0;           /* { dg-warning \"array subscript\" } */\n+    c.c[ 0] = 0;\n+    c.c[ 1] = 0;\n+    c.c[ 9] = 0;\n+    c.c[10] = 0;\n+    c.c[11] = 0;           /* { dg-warning \"array subscript\" } */\n+    c.c[2 * n() - 11] = 0;\n+    c.c[2 * n() - 10] = 0;\n+    c.c[2 * n() -  1] = 0;\n+    c.c[2 * n() -  0] = 0;\n+\n+    g(&a[8]);\n+    g(&a[9]);\n+    g(&a[10]);\n+    g(&a[11]);             /* { dg-warning \"array subscript\" } */\n+    g(&a[-30]+10);         /* { dg-warning \"array subscript\" } */\n+    g(&a[-30]+30);         /* { dg-warning \"array subscript\" } */\n+\n+    g(&b[10]);\n+    g(&c.c[10]);\n+    g(&b[11]);             /* { dg-warning \"array subscript\" } */\n+    g(&c.c[11]);           /* { dg-warning \"array subscript\" } */\n+\n+    g(&a[0]);\n+    g(&b[0]);\n+    g(&c.c[0]);\n+\n+    g(&a[-1]);             /* { dg-warning \"array subscript\" } */\n+    g(&b[-1]);             /* { dg-warning \"array subscript\" } */ \n+    h(sizeof a[-1]);\n+    h(sizeof a[10]);\n+    h(sizeof b[-1]);\n+    h(sizeof b[10]);\n+    h(sizeof c.c[-1]);\n+    h(sizeof c.c[10]);\n+\n+    p[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    p[0] = 0;\n+    p[1] = 0;\n+\n+    q[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    q[0] = 0;\n+    q[1] = 0;\n+    q[2] = 0;\n+\n+    r[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    r[0] = 0;\n+    r[1] = 0;\n+    r[2] = 0;\n+    r[3] = 0;              /* { dg-warning \"array subscript\" } */\n+\n+    s[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    s[0] = 0;\n+    s[1] = 0;\n+    s[2] = 0;\n+    s[3] = 0;\n+    s[4] = 0;              /* { dg-warning \"array subscript\" } */\n+\n+    t[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    t[0] = 0;\n+    t[1] = 0;\n+    t[2] = 0;\n+    t[3] = 0;\n+    t[4] = 0;\n+    t[5] = 0;              /* { dg-warning \"array subscript\" } */\n+\n+    if (10 < 10)\n+       a[10] = 0;\n+    if (10 < 10)\n+       b[10] = 0;\n+    if (-1 >= 0)\n+       c.c[-1] = 0;        /* { dg-warning \"array subscript\" } */\n+\n+    for (i = 20; i < 30; ++i)\n+             a[i] = 1;\n+\n+    return a;\n+}"}, {"sha": "02fd8171869dd4c6e40c5f7f28f3ef9f6ae8b6ff", "filename": "gcc/testsuite/gcc.dg/Warray-bounds.c", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds.c?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -17,6 +17,7 @@ int* f(void) {\n     struct {\n        int c[10];\n     } c;\n+    int p[0], q[1], r[2], s[3], t[4];\n \n     a[-1] = 0;             /* { dg-warning \"array subscript\" } */\n     a[ 0] = 0;\n@@ -56,13 +57,13 @@ int* f(void) {\n     g(&a[8]);\n     g(&a[9]);\n     g(&a[10]);\n-    g(&a[11]);             /* { dg-warning \"array subscript\" \"\" { xfail *-*-* } } */\n-    g(&a[-30]+10);             /* { dg-warning \"array subscript\" } */\n-    g(&a[-30]+30);\n+    g(&a[11]);             /* { dg-warning \"array subscript\" } */\n+    g(&a[-30]+10);         /* { dg-warning \"array subscript\" } */\n+    g(&a[-30]+30);         /* { dg-warning \"array subscript\" } */\n \n     g(&b[10]);\n     g(&c.c[10]);\n-    g(&b[11]);             /* { dg-warning \"array subscript\" \"\" { xfail *-*-* } } */\n+    g(&b[11]);             /* { dg-warning \"array subscript\" } */\n     g(&c.c[11]);           /* { dg-warning \"array subscript\" } */\n \n     g(&a[0]);\n@@ -78,16 +79,45 @@ int* f(void) {\n     h(sizeof c.c[-1]);\n     h(sizeof c.c[10]);\n \n+    p[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    p[0] = 0;\n+    p[1] = 0;\n+\n+    q[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    q[0] = 0;\n+    q[1] = 0;\n+    q[2] = 0;\n+\n+    r[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    r[0] = 0;\n+    r[1] = 0;\n+    r[2] = 0;\n+    r[3] = 0;              /* { dg-warning \"array subscript\" } */\n+\n+    s[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    s[0] = 0;\n+    s[1] = 0;\n+    s[2] = 0;\n+    s[3] = 0;\n+    s[4] = 0;              /* { dg-warning \"array subscript\" } */\n+\n+    t[-1] = 0;             /* { dg-warning \"array subscript\" } */\n+    t[0] = 0;\n+    t[1] = 0;\n+    t[2] = 0;\n+    t[3] = 0;\n+    t[4] = 0;\n+    t[5] = 0;              /* { dg-warning \"array subscript\" } */\n+\n     if (10 < 10)\n        a[10] = 0;\n     if (10 < 10)\n        b[10] = 0;\n     if (-1 >= 0)\n-       c.c[-1] = 0;\n+       c.c[-1] = 0;        /* { dg-warning \"array subscript\" } */\n \n     for (i = 20; i < 30; ++i)\n              a[i] = 1;       /* { dg-warning \"array subscript\" } */\n \n     return a;\n }\n-"}, {"sha": "61031996185f4ceb92767eddc752cb8a78c640d6", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca873b0e5aafd6c0fce9e00719671c6aa25c708b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ca873b0e5aafd6c0fce9e00719671c6aa25c708b", "patch": "@@ -4645,8 +4645,8 @@ check_array_ref (tree ref, location_t* locus, bool ignore_off_by_one)\n           && TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (ref))) == NULL_TREE)\n       /* Accesses after the end of arrays of size 0 (gcc\n          extension) and 1 are likely intentional (\"struct\n-         hack\").  */\n-      || compare_tree_int (up_bound, 1) <= 0)\n+         hack\").  Note that up_bound is array dimension - 1.  */\n+      || compare_tree_int (up_bound, 1) < 0)\n     return;\n \n   low_bound = array_ref_low_bound (ref);"}]}