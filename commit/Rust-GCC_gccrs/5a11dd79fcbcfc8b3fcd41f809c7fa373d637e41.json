{"sha": "5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExMWRkNzlmY2JjZmM4YjNmY2Q0MWY4MDljN2ZhMzczZDYzN2U0MQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-08T15:12:19Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-09T14:46:32Z"}, "message": "Make TyTyVisitor a pure abstract class\n\nThis will help enforce consistency of visitors to fix issues with\nTyTy unification rules.", "tree": {"sha": "b99c4ea138b3c5355f2782ab4e6c93082069d0d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b99c4ea138b3c5355f2782ab4e6c93082069d0d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06d946d52234e2776be002662439d43e3d557673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d946d52234e2776be002662439d43e3d557673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d946d52234e2776be002662439d43e3d557673"}], "stats": {"total": 255, "additions": 185, "deletions": 70}, "files": [{"sha": "298ff5022175e7e878a3aa27c9f2f4f55f18a0c5", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "patch": "@@ -221,12 +221,18 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   virtual ~TyTyResolveCompile () {}\n \n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n \n   void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n \n   void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n \n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::ADTType &type) override\n   {\n     ::Btype *compiled_type = nullptr;"}, {"sha": "137b74b040761a164311e8c3e78d19468144e168", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "patch": "@@ -43,13 +43,19 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   ~TyTyCompile () {}\n \n-  void visit (TyTy::InferType &type) override\n-  {\n-    // there shouldn't be any of these left\n-    gcc_unreachable ();\n-  }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n \n-  void visit (TyTy::UnitType &type) override {}\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n \n   void visit (TyTy::FnType &type) override\n   {\n@@ -82,8 +88,6 @@ class TyTyCompile : public TyTy::TyVisitor\n \t\t\t\tmappings->lookup_location (type.get_ref ()));\n   }\n \n-  void visit (TyTy::ParamType &type) override {}\n-\n   void visit (TyTy::BoolType &type) override\n   {\n     translated = backend->named_type (\"bool\", backend->bool_type (),\n@@ -205,6 +209,18 @@ class TyTyExtractParamsFromFnType : public TyTy::TyVisitor\n \n   ~TyTyExtractParamsFromFnType () {}\n \n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::FnType &type) override\n   {\n     ok = true;\n@@ -234,6 +250,18 @@ class TyTyExtractRetFromFnType : public TyTy::TyVisitor\n \n   ~TyTyExtractRetFromFnType () {}\n \n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::FnType &type) override\n   {\n     ok = true;\n@@ -261,6 +289,18 @@ class TyTyCompileParam : public TyTy::TyVisitor\n \n   ~TyTyCompileParam () {}\n \n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::ParamType &type) override\n   {\n     auto btype = TyTyCompile::compile (backend, type.get_base_type ());"}, {"sha": "62320a6fe37e1677524e3dd55135a600a1059151", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "patch": "@@ -43,6 +43,18 @@ class ResolveFnType : public TyTy::TyVisitor\n     return state;\n   }\n \n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::FnType &type) override { state = type.return_type (); }\n \n private:"}, {"sha": "cd171d183ef2a3640d7ce8034b670f0819dc46a0", "filename": "gcc/rust/typecheck/rust-tyctx.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc?ref=5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "patch": "@@ -69,7 +69,10 @@ TypeCheckContext::lookup_type (HirId id, TyTy::TyBase **type)\n {\n   auto it = resolved.find (id);\n   if (it == resolved.end ())\n-    return false;\n+    {\n+      *type = new TyTy::ErrorType (id);\n+      return false;\n+    }\n \n   *type = it->second;\n   return true;"}, {"sha": "c3fcb1a5a5cd61233cb145623c757c1e45f4b0c8", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "patch": "@@ -38,6 +38,18 @@ class TypeCheckCallExpr : private TyVisitor\n   }\n   ~TypeCheckCallExpr () {}\n \n+  void visit (UnitType &type) override { gcc_unreachable (); }\n+  void visit (InferType &type) override { gcc_unreachable (); }\n+  void visit (StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (ADTType &type) override { gcc_unreachable (); }\n+  void visit (ParamType &type) override { gcc_unreachable (); }\n+  void visit (ArrayType &type) override { gcc_unreachable (); }\n+  void visit (BoolType &type) override { gcc_unreachable (); }\n+  void visit (IntType &type) override { gcc_unreachable (); }\n+  void visit (UintType &type) override { gcc_unreachable (); }\n+  void visit (FloatType &type) override { gcc_unreachable (); }\n+  void visit (ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (FnType &type) override;\n \n private:"}, {"sha": "3d2196a53660d86c1f2578e7fd337ee6ef1c4c95", "filename": "gcc/rust/typecheck/rust-tyty-resolver.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h?ref=5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "patch": "@@ -151,6 +151,18 @@ class TyTyExtractorArray : public TyTy::TyVisitor\n \n   virtual ~TyTyExtractorArray () {}\n \n+  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+\n   void visit (TyTy::ArrayType &type) override { extracted = type.get_type (); }\n \n private:"}, {"sha": "677013f864f3af107d02783b636c5f14a28357ce", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 45, "deletions": 50, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "patch": "@@ -113,23 +113,48 @@ class BaseRules : public TyVisitor\n     rust_fatal_error (def_locus, \"declared here\");\n   }\n \n+  virtual void visit (FloatType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n+  }\n+\n+  virtual void visit (ErrorType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n+  }\n+\n+  virtual void visit (StructFieldType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n+  }\n+\n protected:\n-  BaseRules (TyBase *base) : mappings (Analysis::Mappings::get ()), base (base)\n+  BaseRules (TyBase *base)\n+    : mappings (Analysis::Mappings::get ()), base (base),\n+      resolved (new ErrorType (base->get_ref ()))\n   {}\n \n   Analysis::Mappings *mappings;\n-\n-private:\n   TyBase *base;\n+  TyBase *resolved;\n };\n \n class InferRules : protected BaseRules\n {\n public:\n-  InferRules (InferType *base)\n-    : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~InferRules () {}\n+  InferRules (InferType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -139,36 +164,34 @@ class InferRules : protected BaseRules\n \n   // we are an inference variable so this means we can take the other as the\n   // type\n-  virtual void visit (UnitType &type) override\n+  void visit (UnitType &type) override\n   {\n     resolved = new UnitType (type.get_ref ());\n   }\n \n-  virtual void visit (BoolType &type) override\n+  void visit (BoolType &type) override\n   {\n     resolved = new BoolType (type.get_ref ());\n   }\n \n-  virtual void visit (IntType &type) override\n+  void visit (IntType &type) override\n   {\n     resolved = new IntType (type.get_ref (), type.get_kind ());\n   }\n \n-  virtual void visit (UintType &type) override\n+  void visit (UintType &type) override\n   {\n     resolved = new UintType (type.get_ref (), type.get_kind ());\n   }\n \n private:\n   InferType *base;\n-  TyBase *resolved;\n };\n \n class StructFieldTypeRules : protected BaseRules\n {\n public:\n-  StructFieldTypeRules (StructFieldType *base)\n-    : BaseRules (base), base (base), resolved (nullptr)\n+  StructFieldTypeRules (StructFieldType *base) : BaseRules (base), base (base)\n   {}\n \n   TyBase *combine (TyBase *other)\n@@ -179,15 +202,12 @@ class StructFieldTypeRules : protected BaseRules\n \n private:\n   StructFieldType *base;\n-  TyBase *resolved;\n };\n \n class UnitRules : protected BaseRules\n {\n public:\n-  UnitRules (UnitType *base) : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~UnitRules () {}\n+  UnitRules (UnitType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -199,14 +219,12 @@ class UnitRules : protected BaseRules\n \n private:\n   UnitType *base;\n-  TyBase *resolved;\n };\n \n class FnRules : protected BaseRules\n {\n public:\n-  FnRules (FnType *base) : BaseRules (base), base (base), resolved (nullptr) {}\n-  ~FnRules () {}\n+  FnRules (FnType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -216,16 +234,12 @@ class FnRules : protected BaseRules\n \n private:\n   FnType *base;\n-  TyBase *resolved;\n };\n \n class ParamRules : protected BaseRules\n {\n public:\n-  ParamRules (ParamType *base)\n-    : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~ParamRules () {}\n+  ParamRules (ParamType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -235,17 +249,12 @@ class ParamRules : protected BaseRules\n \n private:\n   ParamType *base;\n-  TyBase *resolved;\n };\n \n class ArrayRules : protected BaseRules\n {\n public:\n-  ArrayRules (ArrayType *base)\n-    : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-\n-  ~ArrayRules () {}\n+  ArrayRules (ArrayType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -274,15 +283,12 @@ class ArrayRules : protected BaseRules\n \n private:\n   ArrayType *base;\n-  TyBase *resolved;\n };\n \n class BoolRules : protected BaseRules\n {\n public:\n-  BoolRules (BoolType *base) : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~BoolRules () {}\n+  BoolRules (BoolType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -297,15 +303,12 @@ class BoolRules : protected BaseRules\n \n private:\n   BoolType *base;\n-  TyBase *resolved;\n };\n \n class IntRules : protected BaseRules\n {\n public:\n-  IntRules (IntType *base) : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~IntRules () {}\n+  IntRules (IntType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -321,15 +324,12 @@ class IntRules : protected BaseRules\n \n private:\n   IntType *base;\n-  TyBase *resolved;\n };\n \n class UintRules : protected BaseRules\n {\n public:\n-  UintRules (UintType *base) : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~UintRules () {}\n+  UintRules (UintType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -345,16 +345,12 @@ class UintRules : protected BaseRules\n \n private:\n   UintType *base;\n-  TyBase *resolved;\n };\n \n class FloatRules : protected BaseRules\n {\n public:\n-  FloatRules (FloatType *base)\n-    : BaseRules (base), base (base), resolved (nullptr)\n-  {}\n-  ~FloatRules () {}\n+  FloatRules (FloatType *base) : BaseRules (base), base (base) {}\n \n   TyBase *combine (TyBase *other)\n   {\n@@ -370,7 +366,6 @@ class FloatRules : protected BaseRules\n \n private:\n   FloatType *base;\n-  TyBase *resolved;\n };\n \n } // namespace TyTy"}, {"sha": "def43cd8d2339b500b773fb0a0be8837c8532685", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "patch": "@@ -27,17 +27,18 @@ namespace TyTy {\n class TyVisitor\n {\n public:\n-  virtual void visit (UnitType &type) {}\n-  virtual void visit (InferType &type) {}\n-  virtual void visit (StructFieldType &type) {}\n-  virtual void visit (ADTType &type) {}\n-  virtual void visit (FnType &type) {}\n-  virtual void visit (ParamType &type) {}\n-  virtual void visit (ArrayType &type) {}\n-  virtual void visit (BoolType &type) {}\n-  virtual void visit (IntType &type) {}\n-  virtual void visit (UintType &type) {}\n-  virtual void visit (FloatType &type) {}\n+  virtual void visit (UnitType &type) = 0;\n+  virtual void visit (InferType &type) = 0;\n+  virtual void visit (StructFieldType &type) = 0;\n+  virtual void visit (ADTType &type) = 0;\n+  virtual void visit (FnType &type) = 0;\n+  virtual void visit (ParamType &type) = 0;\n+  virtual void visit (ArrayType &type) = 0;\n+  virtual void visit (BoolType &type) = 0;\n+  virtual void visit (IntType &type) = 0;\n+  virtual void visit (UintType &type) = 0;\n+  virtual void visit (FloatType &type) = 0;\n+  virtual void visit (ErrorType &type) = 0;\n };\n \n } // namespace TyTy"}, {"sha": "033f83970e28d47ea1e9516a9d0a3266ecc0f920", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "patch": "@@ -63,6 +63,25 @@ InferType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+void\n+ErrorType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+ErrorType::as_string () const\n+{\n+  return \"<tyty::error>\";\n+}\n+\n+TyBase *\n+ErrorType::combine (TyBase *other)\n+{\n+  // rust_error_at ();\n+  return this;\n+}\n+\n void\n StructFieldType::accept_vis (TyVisitor &vis)\n {"}, {"sha": "be7ec0c47fce6c8f6a3d9f1e0ec91a7f4f46caf4", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=5a11dd79fcbcfc8b3fcd41f809c7fa373d637e41", "patch": "@@ -43,6 +43,7 @@ enum TypeKind\n   UNIT,\n   FIELD,\n   // there are more to add...\n+  ERROR\n };\n \n class TyVisitor;\n@@ -84,6 +85,20 @@ class InferType : public TyBase\n   TyBase *combine (TyBase *other) override;\n };\n \n+class ErrorType : public TyBase\n+{\n+public:\n+  ErrorType (HirId ref) : TyBase (ref, TypeKind::ERROR) {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  bool is_unit () const override { return true; }\n+\n+  std::string as_string () const override;\n+\n+  TyBase *combine (TyBase *other) override;\n+};\n+\n class UnitType : public TyBase\n {\n public:"}]}