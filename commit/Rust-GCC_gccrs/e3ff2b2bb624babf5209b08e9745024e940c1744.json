{"sha": "e3ff2b2bb624babf5209b08e9745024e940c1744", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNmZjJiMmJiNjI0YmFiZjUyMDliMDhlOTc0NTAyNGU5NDBjMTc0NA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-11T19:00:07Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-11T19:00:07Z"}, "message": "2003-10-11  Michael Koch  <konqueror@gmx.de>\n\n\t* java/security/Key.java,\n\t* java/security/PrivateKey.java,\n\t* java/security/PublicKey.java,\n\t* java/security/acl/Acl.java,\n\t* java/security/acl/AclEntry.java,\n\t* java/security/acl/Group.java,\n\t* java/security/acl/Owner.java,\n\t* java/security/acl/Permission.java,\n\t* java/security/cert/X509Extension.java,\n\t* java/security/interfaces/DSAKey.java,\n\t* java/security/interfaces/DSAKeyPairGenerator.java,\n\t* java/security/interfaces/DSAParams.java,\n\t* java/security/interfaces/DSAPrivateKey.java,\n\t* java/security/interfaces/DSAPublicKey.java,\n\t* java/security/interfaces/RSAKey.java,\n\t* java/security/interfaces/RSAPrivateCrtKey.java,\n\t* java/security/interfaces/RSAPrivateKey.java,\n\t* java/security/interfaces/RSAPublicKey.java:\n\tRemoved redundant modifiers.\n\nFrom-SVN: r72360", "tree": {"sha": "2af671e2772212be2424269d3f7cca08b3fe5238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2af671e2772212be2424269d3f7cca08b3fe5238"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3ff2b2bb624babf5209b08e9745024e940c1744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ff2b2bb624babf5209b08e9745024e940c1744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3ff2b2bb624babf5209b08e9745024e940c1744", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ff2b2bb624babf5209b08e9745024e940c1744/comments", "author": null, "committer": null, "parents": [{"sha": "6233cbbc8894869291cb257cb37a615d6ff91243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6233cbbc8894869291cb257cb37a615d6ff91243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6233cbbc8894869291cb257cb37a615d6ff91243"}], "stats": {"total": 137, "additions": 82, "deletions": 55}, "files": [{"sha": "8374e3f7be1067cb68eddd317e2e5202eda5c420", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -1,3 +1,25 @@\n+2003-10-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/security/Key.java,\n+\t* java/security/PrivateKey.java,\n+\t* java/security/PublicKey.java,\n+\t* java/security/acl/Acl.java,\n+\t* java/security/acl/AclEntry.java,\n+\t* java/security/acl/Group.java,\n+\t* java/security/acl/Owner.java,\n+\t* java/security/acl/Permission.java,\n+\t* java/security/cert/X509Extension.java,\n+\t* java/security/interfaces/DSAKey.java,\n+\t* java/security/interfaces/DSAKeyPairGenerator.java,\n+\t* java/security/interfaces/DSAParams.java,\n+\t* java/security/interfaces/DSAPrivateKey.java,\n+\t* java/security/interfaces/DSAPublicKey.java,\n+\t* java/security/interfaces/RSAKey.java,\n+\t* java/security/interfaces/RSAPrivateCrtKey.java,\n+\t* java/security/interfaces/RSAPrivateKey.java,\n+\t* java/security/interfaces/RSAPublicKey.java:\n+\tRemoved redundant modifiers.\n+\n 2003-10-11  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/rmi/server/ProtocolConstants.java,"}, {"sha": "195e50bb527c521eaf82731f822c75f9042b9463", "filename": "libjava/java/security/Key.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2FKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2FKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKey.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -64,7 +64,7 @@ public interface Key extends Serializable\n   /**\n    * The version identifier used for serialization.\n    */\n-  public static final long serialVersionUID = 6603384152749567654L;\n+  long serialVersionUID = 6603384152749567654L;\n \n   /**\n    * This method returns the name of the algorithm for this key.  This is a"}, {"sha": "40b97f58b9a3ab8b19e37ae843f5eabfa82c4626", "filename": "libjava/java/security/PrivateKey.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2FPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2FPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrivateKey.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -58,5 +58,5 @@ public interface PrivateKey extends Key\n   /**\n    * The version identifier used for serialization.\n    */\n-  public static final long serialVersionUID = 6034044314589513430L;\n+  long serialVersionUID = 6034044314589513430L;\n } // interface PrivateKey"}, {"sha": "81ab764615f383363ff7ba0fba0e388f13d17f98", "filename": "libjava/java/security/PublicKey.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2FPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2FPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPublicKey.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -56,5 +56,5 @@ public interface PublicKey extends Key\n   /**\n    * The version identifier used for serialization.\n    */\n-  public static final long serialVersionUID = 7187392471159151072L;\n+  long serialVersionUID = 7187392471159151072L;\n } // interface PublicKey"}, {"sha": "4229c92ddb766938c063d8ca084844a9716e16be", "filename": "libjava/java/security/acl/Acl.java", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Facl%2FAcl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Facl%2FAcl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FAcl.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -69,7 +69,7 @@ public interface Acl extends Owner\n    *\n    * @return The name of this ACL\n    */\n-  public abstract String getName();\n+  String getName();\n \n   /**\n    * This method sets the name of the ACL\n@@ -79,7 +79,7 @@ public interface Acl extends Owner\n    *\n    * @exception NotOwnerException If the caller is not an owner of this ACL.\n    */\n-  public abstract void setName(Principal caller, String name)\n+  void setName(Principal caller, String name)\n     throws NotOwnerException;\n \n   /**\n@@ -88,11 +88,13 @@ public abstract void setName(Principal caller, String name)\n    * @param caller The <code>Principal</code> requesting the addition\n    * @param entry The ACL entry to add\n    *\n-   * @return <code>true</code> if the entry was added, <code>false</code> if there is already an entry of the same type for the <code>Principal</code>.\n+   * @return <code>true</code> if the entry was added, <code>false</code>\n+   * if there is already an entry of the same type for the\n+   * <code>Principal</code>.\n    *\n    * @exception NotOwnerException If the caller is not an owner of this ACL.\n    */\n-  public abstract boolean addEntry(Principal caller, AclEntry entry) \n+  boolean addEntry(Principal caller, AclEntry entry) \n     throws NotOwnerException;\n \n   /**\n@@ -101,11 +103,12 @@ public abstract boolean addEntry(Principal caller, AclEntry entry)\n    * @param caller The <code>Principal</code> requesting the deletion.\n    * @param entry The ACL entry to delete\n    *\n-   * @return <code>true</code> if the entry was deleted, or <code>false</code> if this entry was not part of the ACL to begin with\n+   * @return <code>true</code> if the entry was deleted, or <code>false</code>\n+   * if this entry was not part of the ACL to begin with\n    *\n    * @exception NotOwnerException If the caller is not an owner of this ACL.\n    */\n-  public abstract boolean removeEntry(Principal caller, AclEntry entry)\n+  boolean removeEntry(Principal caller, AclEntry entry)\n     throws NotOwnerException;\n \n   /**\n@@ -114,7 +117,7 @@ public abstract boolean removeEntry(Principal caller, AclEntry entry)\n    *\n    * @return An enumeration of the ACL entries\n    */\n-  public abstract Enumeration entries();\n+  Enumeration entries();\n \n   /**\n    * This method tests whether or not the specified <code>Principal</code>\n@@ -123,9 +126,10 @@ public abstract boolean removeEntry(Principal caller, AclEntry entry)\n    * @param user The <code>Principal</code> to test\n    * @param perm The <code>Permission</code> to test for\n    *\n-   * @return <code>true</code> if the user has been granted the permission, <code>false</code> otherwise\n+   * @return <code>true</code> if the user has been granted the permission,\n+   * <code>false</code> otherwise\n    */\n-  public abstract boolean checkPermission(Principal user, Permission perm);\n+  boolean checkPermission(Principal user, Permission perm);\n \n   /**\n    * This method returns a list of <code>Permission</code>'s that are granted\n@@ -138,12 +142,12 @@ public abstract boolean removeEntry(Principal caller, AclEntry entry)\n    *\n    * @return A list of permissions for the <code>Principal</code>.\n    */\n-  public abstract Enumeration getPermissions(Principal user);\n+  Enumeration getPermissions(Principal user);\n \n   /**\n    * This method returns the ACL as a <code>String</code>\n    *\n    * @return A <code>String</code> representation of this ACL\n    */\n-  public abstract String toString();\n+  String toString();\n }"}, {"sha": "0cb99a81818484f5f13b34673e88b3e0b3c9b491", "filename": "libjava/java/security/acl/AclEntry.java", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Facl%2FAclEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Facl%2FAclEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FAclEntry.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -63,7 +63,7 @@ public interface AclEntry extends Cloneable\n    *\n    * @return The <code>Principal</code> for this ACL entry\n    */\n-  public abstract Principal getPrincipal();\n+  Principal getPrincipal();\n \n   /**\n    * This method sets ths <code>Principal</code> associated with this\n@@ -74,22 +74,22 @@ public interface AclEntry extends Cloneable\n    *\n    * @return <code>true</code> if the <code>Principal</code> was successfully set or <code>false</code> if this entry already has a <code>Principal</code>.\n    */\n-  public abstract boolean setPrincipal(Principal user);\n+  boolean setPrincipal(Principal user);\n \n   /**\n    * This method sets this ACL entry to be a <em>negative</em> entry, indicating\n    * that it contains a list of permissions that are <em>not</em> granted\n    * to the entry's <code>Principal</code>.  Note that there is no way to\n    * undo this operation.\n    */\n-  public abstract void setNegativePermissions();\n+  void setNegativePermissions();\n \n   /**\n    * This method tests whether or not this ACL entry is a negative entry or not.\n    *\n    * @return <code>true</code> if this ACL entry is negative, <code>false</code> otherwise\n    */\n-  public abstract boolean isNegative();\n+  boolean isNegative();\n \n   /**\n    * This method adds the specified permission to this ACL entry.\n@@ -98,7 +98,7 @@ public interface AclEntry extends Cloneable\n    *\n    * @return <code>true</code> if the permission was added or <code>false</code> if it was already set for this entry\n    */\n-  public abstract boolean addPermission(Permission permission);\n+  boolean addPermission(Permission permission);\n \n   /**\n    * This method deletes the specified permission to this ACL entry.\n@@ -107,7 +107,7 @@ public interface AclEntry extends Cloneable\n    *\n    * @return <code>true</code> if the permission was successfully deleted or <code>false</code> if the permission was not part of this ACL to begin with\n    */\n-  public abstract boolean removePermission(Permission perm);\n+  boolean removePermission(Permission perm);\n \n   /**\n    * This method tests whether or not the specified permission is associated\n@@ -117,27 +117,27 @@ public interface AclEntry extends Cloneable\n    *\n    * @return <code>true</code> if this permission is associated with this entry or <code>false</code> otherwise\n    */\n-  public abstract boolean checkPermission(Permission permission);\n+  boolean checkPermission(Permission permission);\n \n   /**\n    * This method returns a list of all <code>Permission</code> objects\n    * associated with this ACL entry as an <code>Enumeration</code>.\n    *\n    * @return A list of permissions for this ACL entry\n    */\n-  public abstract Enumeration permissions();\n+  Enumeration permissions();\n \n   /**\n    * This method returns this object as a <code>String</code>.\n    *\n    * @return A <code>String</code> representation of this object\n    */\n-  public abstract String toString();\n+  String toString();\n \n   /**\n    * This method returns a clone of this ACL entry\n    *\n    * @return A clone of this ACL entry\n    */\n-  public abstract Object clone();\n+  Object clone();\n }"}, {"sha": "10718a76b7e7bb6ef512f65317dadbd5437dafef", "filename": "libjava/java/security/acl/Group.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Facl%2FGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Facl%2FGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FGroup.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -59,7 +59,7 @@ public interface Group extends Principal\n    *\n    * @return <code>true</code> if the user was successfully added or <code>false</code> if the user is already a member\n    */\n-  public abstract boolean addMember(Principal user);\n+  boolean addMember(Principal user);\n \n   /**\n    * This method deletes a member from the group.\n@@ -68,7 +68,7 @@ public interface Group extends Principal\n    *\n    * @return <code>true</code> if the user was successfully deleted or <code>false</code> if the user is not a member of the group\n    */\n-  public abstract boolean removeMember(Principal user);\n+  boolean removeMember(Principal user);\n \n   /**\n    * This method tests whether or not a given <code>Principal</code> is a\n@@ -78,13 +78,13 @@ public interface Group extends Principal\n    *\n    * @return <code>true</code> if the user is member, <code>false</code> otherwise\n    */\n-  public abstract boolean isMember(Principal member);\n+  boolean isMember(Principal member);\n \n   /**\n    * This method returns a list of all members of the group as an \n    * <code>Enumeration</code>.\n    *\n    * @return The list of all members of the group\n    */\n-  public abstract Enumeration members();\n+  Enumeration members();\n }"}, {"sha": "7732fc7f7b01941d00945943a5b1e1f9871f21e0", "filename": "libjava/java/security/acl/Owner.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Facl%2FOwner.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Facl%2FOwner.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FOwner.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -64,7 +64,7 @@\n    *\n    * @exception NotOwnerException If the caller is not already an owner of this ACL\n    */\n-  public abstract boolean addOwner(Principal caller, Principal owner) \n+  boolean addOwner(Principal caller, Principal owner) \n     throws NotOwnerException;\n \n   /**\n@@ -82,7 +82,7 @@ public abstract boolean addOwner(Principal caller, Principal owner)\n    * @exception NotOwnerException If the caller is not already an owner of this ACL\n    * @exception LastOwnerException If completing the operation would delete the last ACL owner\n    */\n-  public abstract boolean deleteOwner(Principal caller, Principal owner) \n+  boolean deleteOwner(Principal caller, Principal owner) \n     throws NotOwnerException, LastOwnerException;\n \n   /**\n@@ -91,5 +91,5 @@ public abstract boolean deleteOwner(Principal caller, Principal owner)\n    *\n    * @return <code>true</code> if the <code>Principal</code> is an owner, <code>false</code> otherwise\n    */\n-  public abstract boolean isOwner(Principal owner);\n+  boolean isOwner(Principal owner);\n }"}, {"sha": "ca5000f8bbc3be9e79652b4bbe55c17cd7834ac6", "filename": "libjava/java/security/acl/Permission.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Facl%2FPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Facl%2FPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FPermission.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -56,12 +56,12 @@\n    *\n    * @return <code>true</code> if the specified permission is the same as this one, <code>false</code> otherwise\n    */\n-  public abstract boolean equals(Object perm);\n+  boolean equals (Object perm);\n \n   /**\n    * This method returns this <code>Permission</code> as a <code>String</code>.\n    *\n    * @return A <code>String</code> representing this permission.\n    */\n-  public String toString();\n+  String toString();\n }"}, {"sha": "8e33bb5ad4a8650b7c7d16849f2de428e9eb1262", "filename": "libjava/java/security/cert/X509Extension.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Fcert%2FX509Extension.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Fcert%2FX509Extension.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FX509Extension.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -81,7 +81,7 @@ This is used for X.509 v3 Certificates and CRL v2 (Certificate\n \n      @return true if has unsupported extension, false otherwise\t\n   */\n-  public boolean hasUnsupportedCriticalExtension();\n+  boolean hasUnsupportedCriticalExtension();\n \n   /**\n      Returns a set of the CRITICAL extension OIDs from the \n@@ -91,7 +91,7 @@ This is used for X.509 v3 Certificates and CRL v2 (Certificate\n      @return A Set containing the OIDs. If there are no CRITICAL\n      extensions or extensions at all this returns null.\n   */\n-  public Set getCriticalExtensionOIDs();\n+  Set getCriticalExtensionOIDs();\n \n   /**\n      Returns a set of the NON-CRITICAL extension OIDs from the \n@@ -101,13 +101,13 @@ This is used for X.509 v3 Certificates and CRL v2 (Certificate\n      @return A Set containing the OIDs. If there are no NON-CRITICAL\n      extensions or extensions at all this returns null.\n   */\n-  public Set getNonCriticalExtensionOIDs();\n+  Set getNonCriticalExtensionOIDs();\n \n   /**\n      Returns the DER encoded OCTET string for the specified\n      extension value identified by a OID. The OID is a string\n      of number separated by periods. Ex: 12.23.45.67\n   */\n-  public byte[] getExtensionValue(String oid);\n+  byte[] getExtensionValue(String oid);\n \n }"}, {"sha": "ea0aa1a4b707c06b2e4fe6f9c81d40b1110cab74", "filename": "libjava/java/security/interfaces/DSAKey.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -52,5 +52,5 @@\n    *\n    * @return The DSA parameters\n    */\n-  public abstract DSAParams getParams();\n+  DSAParams getParams();\n }"}, {"sha": "dc957a31881200e0ed99d400ea3326b8be6cf945", "filename": "libjava/java/security/interfaces/DSAKeyPairGenerator.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKeyPairGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKeyPairGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKeyPairGenerator.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -62,7 +62,7 @@\n    *\n    * @exception InvalidParameterException If the parameters passed are not valid\n    */\n-  public abstract void initialize(DSAParams params, SecureRandom random)\n+  void initialize (DSAParams params, SecureRandom random)\n     throws InvalidParameterException;\n \n   /**\n@@ -80,7 +80,6 @@ public abstract void initialize(DSAParams params, SecureRandom random)\n    *\n    * @exception InvalidParameterException If a parameter is invalid\n    */\n-  public abstract void initialize(int modlen, boolean genParams, \n-\t\t\t\t  SecureRandom random)\n+  void initialize (int modlen, boolean genParams, SecureRandom random)\n     throws InvalidParameterException;\n }"}, {"sha": "5239abe05de91ea13f84557a5a614a4382b3c847", "filename": "libjava/java/security/interfaces/DSAParams.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAParams.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAParams.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAParams.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -54,19 +54,19 @@\n    *\n    * @return The DSA base value\n    */\n-  public abstract BigInteger getG();\n+  BigInteger getG();\n \n   /**\n    * Returns the prime, or 'p' value\n    *\n    * @return The DSA prime value\n    */\n-  public abstract BigInteger getP();\n+  BigInteger getP();\n \n   /**\n    * Returns the subprime, or 'q' value\n    *\n    * @return The DSA subprime value\n    */\n-  public abstract BigInteger getQ();\n+  BigInteger getQ();\n }"}, {"sha": "201d54f2f3074f9a0fcb425c707c4413cc5cad0a", "filename": "libjava/java/security/interfaces/DSAPrivateKey.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -52,5 +52,5 @@ public interface DSAPrivateKey extends DSAKey, PrivateKey\n   /**\n    * This method returns the value of the DSA private key\n    */\n-  public BigInteger getX();\n+  BigInteger getX();\n }"}, {"sha": "74f24482dcfe96094e74b5f4fc8b35dd0c4945b5", "filename": "libjava/java/security/interfaces/DSAPublicKey.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -52,5 +52,5 @@ public interface DSAPublicKey extends DSAKey, PublicKey\n   /**\n    * This method returns the value of the DSA public key\n    */\n-  public BigInteger getY();\n+  BigInteger getY();\n }"}, {"sha": "83cc286cfe025b03a4fb10f0dbf8f3d5decd6b7e", "filename": "libjava/java/security/interfaces/RSAKey.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAKey.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -37,6 +37,8 @@\n \n package java.security.interfaces;\n \n+import java.math.BigInteger;\n+\n /**\n    A generic RSA Key interface for public and private keys\n \n@@ -51,5 +53,5 @@\n \n      @returns a modulus\n    */\n-  public java.math.BigInteger getModulus();\n+  BigInteger getModulus();\n }"}, {"sha": "8af1bb9168ef37c9c087e19bb63050dedb46dc00", "filename": "libjava/java/security/interfaces/RSAPrivateCrtKey.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateCrtKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateCrtKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateCrtKey.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -54,40 +54,40 @@ public interface RSAPrivateCrtKey extends RSAPrivateKey\n    *\n    * @return The public exponent for this key\n    */\n-  public abstract BigInteger getPublicExponent();\n+  BigInteger getPublicExponent();\n \n   /**\n    * Returns the primeP value\n    *\n    * @return The primeP value\n    */\n-  public abstract BigInteger getPrimeP();\n+  BigInteger getPrimeP();\n \n   /**\n    * Returns the primeQ value\n    *\n    * @return The primeQ value\n    */\n-  public abstract BigInteger getPrimeQ();\n+  BigInteger getPrimeQ();\n \n   /**\n    * Returns the primeExponentP\n    *\n    * @return The primeExponentP\n    */\n-  public abstract BigInteger getPrimeExponentP();\n+  BigInteger getPrimeExponentP();\n \n   /**\n    * Returns the primeExponentQ\n    *\n    * @return The primeExponentQ\n    */\n-  public abstract BigInteger getPrimeExponentQ();\n+  BigInteger getPrimeExponentQ();\n \n   /**\n    * Returns the CRT coefficient\n    *\n    * @return The CRT coefficient\n    */\n-  public abstract BigInteger getCrtCoefficient();\n+  BigInteger getCrtCoefficient();\n }"}, {"sha": "34b9798b62709f79d3fe6874462bcf8b3effa08f", "filename": "libjava/java/security/interfaces/RSAPrivateKey.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateKey.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -54,5 +54,5 @@ public interface RSAPrivateKey extends PrivateKey, RSAKey\n    *\n    * @return The private exponent value for this key\n    */\n-  public abstract BigInteger getPrivateExponent();\n+  BigInteger getPrivateExponent();\n }"}, {"sha": "b9b532cd9b06e5bdde00f4619f66d86b7872882e", "filename": "libjava/java/security/interfaces/RSAPublicKey.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ff2b2bb624babf5209b08e9745024e940c1744/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPublicKey.java?ref=e3ff2b2bb624babf5209b08e9745024e940c1744", "patch": "@@ -54,5 +54,5 @@ public interface RSAPublicKey extends PublicKey, RSAKey\n    *\n    * @return The public exponent value for this key\n    */\n-  public abstract BigInteger getPublicExponent();\n+  BigInteger getPublicExponent();\n }"}]}