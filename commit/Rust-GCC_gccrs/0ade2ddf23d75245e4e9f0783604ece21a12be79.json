{"sha": "0ade2ddf23d75245e4e9f0783604ece21a12be79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkZTJkZGYyM2Q3NTI0NWU0ZTlmMDc4MzYwNGVjZTIxYTEyYmU3OQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-03-10T00:39:49Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-03-10T00:39:49Z"}, "message": "re PR libgcj/23495 (java.lang.String.equals is suboptimal)\n\n\tPR libgcj/23495:\n\t* java/lang/natString.cc (_Jv_NewString): Use memcpy.\n\t(equals): Use memcmp.\n\t(contentEquals): Likewise.\n\t(getChars): Use memcpy.\n\t(toCharArray): Likewise.\n\t(regionMatches): Use memcmp.\n\t(regionMatches): Likewise.\n\t(startsWith): Likewise.\n\t(concat): Use memcpy.\n\t(valueOf): Likewise.\n\nFrom-SVN: r111919", "tree": {"sha": "9e761455ea347a648221e80684644f0cc0172490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e761455ea347a648221e80684644f0cc0172490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ade2ddf23d75245e4e9f0783604ece21a12be79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ade2ddf23d75245e4e9f0783604ece21a12be79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ade2ddf23d75245e4e9f0783604ece21a12be79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ade2ddf23d75245e4e9f0783604ece21a12be79/comments", "author": null, "committer": null, "parents": [{"sha": "1e65f958481ffdd6900aca8a324e55d0f192d309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e65f958481ffdd6900aca8a324e55d0f192d309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e65f958481ffdd6900aca8a324e55d0f192d309"}], "stats": {"total": 108, "additions": 51, "deletions": 57}, "files": [{"sha": "2e09bccd1d441177a1d152e984e7521b0fab9a54", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ade2ddf23d75245e4e9f0783604ece21a12be79/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ade2ddf23d75245e4e9f0783604ece21a12be79/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0ade2ddf23d75245e4e9f0783604ece21a12be79", "patch": "@@ -1,3 +1,17 @@\n+2006-03-09  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libgcj/23495:\n+\t* java/lang/natString.cc (_Jv_NewString): Use memcpy.\n+\t(equals): Use memcmp.\n+\t(contentEquals): Likewise.\n+\t(getChars): Use memcpy.\n+\t(toCharArray): Likewise.\n+\t(regionMatches): Use memcmp.\n+\t(regionMatches): Likewise.\n+\t(startsWith): Likewise.\n+\t(concat): Use memcpy.\n+\t(valueOf): Likewise.\n+\n 2006-03-09  Tom Tromey  <tromey@redhat.com>\n \n \t* configure: Rebuilt."}, {"sha": "f3f3e4d567b50d6ebb1999a0c3e7c286dd57d5dd", "filename": "libjava/java/lang/natString.cc", "status": "modified", "additions": 37, "deletions": 57, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ade2ddf23d75245e4e9f0783604ece21a12be79/libjava%2Fjava%2Flang%2FnatString.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ade2ddf23d75245e4e9f0783604ece21a12be79/libjava%2Fjava%2Flang%2FnatString.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatString.cc?ref=0ade2ddf23d75245e4e9f0783604ece21a12be79", "patch": "@@ -409,8 +409,7 @@ _Jv_NewString(const jchar *chars, jsize len)\n {\n   jstring str = _Jv_AllocString(len);\n   jchar* data = JvGetStringChars (str);\n-  while (--len >= 0)\n-    *data++ = *chars++;\n+  memcpy (data, chars, len * sizeof (jchar));\n   return str;\n }\n \n@@ -534,16 +533,20 @@ java::lang::String::equals(jobject anObject)\n   jstring other = (jstring) anObject;\n   if (count != other->count)\n     return false;\n-  /* if both are interned, return false. */\n-  jint i = count;\n+\n+  // If both have cached hash codes, check that.  If the cached hash\n+  // codes are zero, don't bother trying to compute them.\n+  int myHash = cachedHashCode;\n+  int otherHash = other->cachedHashCode;\n+  if (myHash && otherHash && myHash != otherHash)\n+    return false;\n+\n+  // We could see if both are interned, and return false.  But that\n+  // seems too expensive.\n+\n   jchar *xptr = JvGetStringChars (this);\n   jchar *yptr = JvGetStringChars (other);\n-  while (--i >= 0)\n-    {\n-      if (*xptr++ != *yptr++)\n-\treturn false;\n-    }\n-  return true;\n+  return ! memcmp (xptr, yptr, count * sizeof (jchar));\n }\n \n jboolean\n@@ -556,13 +559,9 @@ java::lang::String::contentEquals(java::lang::StringBuffer* buffer)\n     return false;\n   if (data == buffer->value)\n     return true; // Possible if shared.\n-  jint i = count;\n   jchar *xptr = JvGetStringChars(this);\n   jchar *yptr = elements(buffer->value);\n-  while (--i >= 0)\n-    if (*xptr++ != *yptr++)\n-      return false;\n-  return true;\n+  return ! memcmp (xptr, yptr, count * sizeof (jchar));\n }\n \n jboolean\n@@ -599,9 +598,8 @@ java::lang::String::getChars(jint srcBegin, jint srcEnd,\n     throw new ArrayIndexOutOfBoundsException;\n   jchar *dPtr = elements (dst) + dstBegin;\n   jchar *sPtr = JvGetStringChars (this) + srcBegin;\n-  jint i = srcEnd-srcBegin;\n-  while (--i >= 0)\n-    *dPtr++ = *sPtr++;\n+  jint i = srcEnd - srcBegin;\n+  memcpy (dPtr, sPtr, i * sizeof (jchar));\n }\n \n jbyteArray\n@@ -666,8 +664,7 @@ java::lang::String::toCharArray()\n   jchar *dPtr = elements (array);\n   jchar *sPtr = JvGetStringChars (this);\n   jint i = count;\n-  while (--i >= 0)\n-    *dPtr++ = *sPtr++;\n+  memcpy (dPtr, sPtr, i * sizeof (jchar));\n   return array;\n }\n \n@@ -704,12 +701,7 @@ java::lang::String::regionMatches (jint toffset,\n   jchar *tptr = JvGetStringChars (this) + toffset;\n   jchar *optr = JvGetStringChars (other) + ooffset;\n   jint i = len;\n-  while (--i >= 0)\n-    {\n-      if (*tptr++ != *optr++)\n-\treturn false;\n-    }\n-  return true;\n+  return ! memcmp (tptr, optr, i * sizeof (jchar));\n }\n \n jint\n@@ -742,25 +734,20 @@ java::lang::String::regionMatches (jboolean ignoreCase, jint toffset,\n   jchar *optr = JvGetStringChars (other) + ooffset;\n   jint i = len;\n   if (ignoreCase)\n-    while (--i >= 0)\n-      {\n-\tjchar tch = *tptr++;\n-\tjchar och = *optr++;\n-\tif ((java::lang::Character::toLowerCase (tch)\n-\t     != java::lang::Character::toLowerCase (och))\n-\t    && (java::lang::Character::toUpperCase (tch)\n-\t\t!= java::lang::Character::toUpperCase (och)))\n-\t  return false;\n-      }\n-  else\n-    while (--i >= 0)\n-      {\n-\tjchar tch = *tptr++;\n-\tjchar och = *optr++;\n-\tif (tch != och)\n-\t  return false;\n-      }\n-  return true;\n+    {\n+      while (--i >= 0)\n+\t{\n+\t  jchar tch = *tptr++;\n+\t  jchar och = *optr++;\n+\t  if ((java::lang::Character::toLowerCase (tch)\n+\t       != java::lang::Character::toLowerCase (och))\n+\t      && (java::lang::Character::toUpperCase (tch)\n+\t\t  != java::lang::Character::toUpperCase (och)))\n+\t    return false;\n+\t}\n+      return true;\n+    }\n+  return ! memcmp (tptr, optr, i * sizeof (jchar));\n }\n \n jboolean\n@@ -771,12 +758,7 @@ java::lang::String::startsWith (jstring prefix, jint toffset)\n     return false;\n   jchar *xptr = JvGetStringChars (this) + toffset;\n   jchar *yptr = JvGetStringChars (prefix);\n-  while (--i >= 0)\n-    {\n-      if (*xptr++ != *yptr++)\n-\treturn false;\n-    }\n-  return true;\n+  return ! memcmp (xptr, yptr, i * sizeof (jchar));\n }\n \n jint\n@@ -868,12 +850,11 @@ java::lang::String::concat(jstring str)\n   jchar *dstPtr = JvGetStringChars(result);\n   jchar *srcPtr = JvGetStringChars(this);\n   jint i = count;\n-  while (--i >= 0)\n-    *dstPtr++ = *srcPtr++;\n+  memcpy (dstPtr, srcPtr, i * sizeof (jchar));\n+  dstPtr += i;\n   srcPtr = JvGetStringChars(str);\n   i = str->count;\n-  while (--i >= 0)\n-    *dstPtr++ = *srcPtr++;\n+  memcpy (dstPtr, srcPtr, i * sizeof (jchar));\n   return result;\n }\n \n@@ -1048,8 +1029,7 @@ java::lang::String::valueOf(jcharArray data, jint offset, jint count)\n   jstring result = JvAllocString(count);\n   jchar *sPtr = elements (data) + offset;\n   jchar *dPtr = JvGetStringChars(result);\n-  while (--count >= 0)\n-    *dPtr++ = *sPtr++;\n+  memcpy (dPtr, sPtr, count * sizeof (jchar));\n   return result;\n }\n "}]}