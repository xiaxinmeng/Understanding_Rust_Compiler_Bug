{"sha": "6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJlODViMjVjMmZhZGM1YzE5MTJmNGU2NjRkMDc1ZmEwOGZhM2UxNQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-11-29T20:46:14Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-11-29T20:46:14Z"}, "message": "cfgcleanup.c (outgoing_edges_match, [...]): Remove CASE_DROPS_THROUGH checks, it is never defined.\n\n\t* cfgcleanup.c (outgoing_edges_match, try_crossjump_to_edge):\n\tRemove CASE_DROPS_THROUGH checks, it is never defined.\n\t* cfglyout.c (fixup_reorder_chain): Likewise.\n\t* cfgrtl.c (rtl_verify_flow_info): Likewise.\n\t* stmt.c (expand_case): Likewise.\n\t* cfgbuild.c (make_edges): Likewise.  Also remove force_fallthru,\n\tit is now always 0.\n\t* system.h (CASE_DROPS_THROUGH): Poison.\n\t* doc/md.texi (casesi): Remove documentation of CASE_DROPS_THROUGH.\n\t* doc/tm.texi (casesi): Remove documentation of CASE_DROPS_THROUGH.\n\n\t* config/v850/v850.h: Remove commented out CASE_DROPS_THROUGH.\n\nFrom-SVN: r91488", "tree": {"sha": "19ff7e4a9275ba4b32556d6dcb4edd68c18e5bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19ff7e4a9275ba4b32556d6dcb4edd68c18e5bf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/comments", "author": null, "committer": null, "parents": [{"sha": "5e23162d1a2ebf9f9a765f5d8c1c8a1b99a3dfa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e23162d1a2ebf9f9a765f5d8c1c8a1b99a3dfa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e23162d1a2ebf9f9a765f5d8c1c8a1b99a3dfa2"}], "stats": {"total": 77, "additions": 22, "deletions": 55}, "files": [{"sha": "801ecee75e78e2a2b2a6b6cbd5825496236dc5ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "patch": "@@ -1,3 +1,18 @@\n+2004-11-29  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* cfgcleanup.c (outgoing_edges_match, try_crossjump_to_edge):\n+\tRemove CASE_DROPS_THROUGH checks, it is never defined.\n+\t* cfglyout.c (fixup_reorder_chain): Likewise.\n+\t* cfgrtl.c (rtl_verify_flow_info): Likewise.\n+\t* stmt.c (expand_case): Likewise.\n+\t* cfgbuild.c (make_edges): Likewise.  Also remove force_fallthru,\n+\tit is now always 0.\n+\t* system.h (CASE_DROPS_THROUGH): Poison.\n+\t* doc/md.texi (casesi): Remove documentation of CASE_DROPS_THROUGH.\n+\t* doc/tm.texi (casesi): Remove documentation of CASE_DROPS_THROUGH.\n+\n+\t* config/v850/v850.h: Remove commented out CASE_DROPS_THROUGH.\n+\n 2004-11-29  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/18725\n@@ -802,7 +817,7 @@\n \tUse amd64 instead of 64.\n \n 2004-11-24  Mark Mitchell  <mark@codesourcery.com>\n-            Joseph Myers  <joseph@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n \n \t* crtstuff.c (IN_LIBGCC2): Define it.\n \t(EH_FRAME_SECTION_CONST): Check EH_TABLES_CAN_BE_READ_ONLY"}, {"sha": "5761cd2f56e703dde6ffd30913ff820e6753f2f9", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "patch": "@@ -269,7 +269,6 @@ make_edges (basic_block min, basic_block max, int update_p)\n     {\n       rtx insn, x;\n       enum rtx_code code;\n-      int force_fallthru = 0;\n       edge e;\n \n       if (LABEL_P (BB_HEAD (bb))\n@@ -320,12 +319,6 @@ make_edges (basic_block min, basic_block max, int update_p)\n \t\t  && GET_CODE (XEXP (SET_SRC (tmp), 2)) == LABEL_REF)\n \t\tmake_label_edge (edge_cache, bb,\n \t\t\t\t XEXP (XEXP (SET_SRC (tmp), 2), 0), 0);\n-\n-#ifdef CASE_DROPS_THROUGH\n-\t      /* Silly VAXen.  The ADDR_VEC is going to be in the way of\n-\t\t us naturally detecting fallthru into the next block.  */\n-\t      force_fallthru = 1;\n-#endif\n \t    }\n \n \t  /* If this is a computed jump, then mark it as reaching\n@@ -398,11 +391,11 @@ make_edges (basic_block min, basic_block max, int update_p)\n \t     && NOTE_LINE_NUMBER (insn) != NOTE_INSN_BASIC_BLOCK)\n \tinsn = NEXT_INSN (insn);\n \n-      if (!insn || (bb->next_bb == EXIT_BLOCK_PTR && force_fallthru))\n+      if (!insn)\n \tcached_make_edge (edge_cache, bb, EXIT_BLOCK_PTR, EDGE_FALLTHRU);\n       else if (bb->next_bb != EXIT_BLOCK_PTR)\n \t{\n-\t  if (force_fallthru || insn == BB_HEAD (bb->next_bb))\n+\t  if (insn == BB_HEAD (bb->next_bb))\n \t    cached_make_edge (edge_cache, bb, bb->next_bb, EDGE_FALLTHRU);\n \t}\n     }"}, {"sha": "1cb3f2ed86e625acbeeaa0b5ecbc6ebf671330de", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "patch": "@@ -1353,7 +1353,6 @@ outgoing_edges_match (int mode, basic_block bb1, basic_block bb2)\n   /* Generic case - we are seeing a computed jump, table jump or trapping\n      instruction.  */\n \n-#ifndef CASE_DROPS_THROUGH\n   /* Check whether there are tablejumps in the end of BB1 and BB2.\n      Return true if they are identical.  */\n     {\n@@ -1427,7 +1426,6 @@ outgoing_edges_match (int mode, basic_block bb1, basic_block bb2)\n \t  return false;\n \t}\n     }\n-#endif\n \n   /* First ensure that the instructions match.  There may be many outgoing\n      edges so this test is generally cheaper.  */\n@@ -1565,7 +1563,6 @@ try_crossjump_to_edge (int mode, edge e1, edge e2)\n       && (newpos1 != BB_HEAD (src1)))\n     return false;\n \n-#ifndef CASE_DROPS_THROUGH\n   /* Here we know that the insns in the end of SRC1 which are common with SRC2\n      will be deleted.\n      If we have tablejumps in the end of SRC1 and SRC2\n@@ -1596,7 +1593,6 @@ try_crossjump_to_edge (int mode, edge e1, edge e2)\n \t    }\n \t}\n     }\n-#endif\n \n   /* Avoid splitting if possible.  */\n   if (newpos2 == BB_HEAD (src2))"}, {"sha": "241e97628e3ef0210756887f60a37988e420891c", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "patch": "@@ -739,21 +739,11 @@ fixup_reorder_chain (void)\n \t    }\n \t  else\n \t    {\n-#ifndef CASE_DROPS_THROUGH\n \t      /* Otherwise we have some return, switch or computed\n \t\t jump.  In the 99% case, there should not have been a\n \t\t fallthru edge.  */\n \t      gcc_assert (returnjump_p (bb_end_insn) || !e_fall);\n \t      continue;\n-#else\n-\t      if (returnjump_p (bb_end_insn) || !e_fall)\n-\t\tcontinue;\n-\t      /* Except for VAX.  Since we didn't have predication for the\n-\t\t tablejump, the fallthru block should not have moved.  */\n-\t      if (bb->rbi->next == e_fall->dest)\n-\t\tcontinue;\n-\t      bb_end_insn = skip_insns_after_block (bb);\n-#endif\n \t    }\n \t}\n       else"}, {"sha": "ec92966fb87666690c741970ef3d35442ce75eee", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "patch": "@@ -2191,13 +2191,7 @@ rtl_verify_flow_info (void)\n \t  else\n \t    for (insn = NEXT_INSN (BB_END (e->src)); insn != BB_HEAD (e->dest);\n \t\t insn = NEXT_INSN (insn))\n-\t      if (BARRIER_P (insn)\n-#ifndef CASE_DROPS_THROUGH\n-\t\t  || INSN_P (insn)\n-#else\n-\t\t  || (INSN_P (insn) && ! JUMP_TABLE_DATA_P (insn))\n-#endif\n-\t\t  )\n+\t      if (BARRIER_P (insn) || INSN_P (insn))\n \t\t{\n \t\t  error (\"verify_flow_info: Incorrect fallthru %i->%i\",\n \t\t\t e->src->index, e->dest->index);"}, {"sha": "2b67c3f0f3fafc255923a662eedd307855b42fdc", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "patch": "@@ -1240,11 +1240,6 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE (TARGET_BIG_SWITCH ? SImode : HImode)\n \n-/* Define this if the case instruction drops through after the table\n-   when the index is out of range.  Don't define it if the case insn\n-   jumps to the default label instead.  */\n-/* #define CASE_DROPS_THROUGH */\n-\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table."}, {"sha": "9e11e44fd506c4c52f83276b55dee8102aa5db1d", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "patch": "@@ -3500,11 +3500,6 @@ A label that precedes the table itself.\n \n @item\n A label to jump to if the index has a value outside the bounds.\n-(If the machine-description macro @code{CASE_DROPS_THROUGH} is defined,\n-then an out-of-bounds index drops through to the code following\n-the jump table instead of jumping to this label.  In that case,\n-this label is not actually used by the @samp{casesi} instruction,\n-but it is always provided as an operand.)\n @end enumerate\n \n The table is a @code{addr_vec} or @code{addr_diff_vec} inside of a"}, {"sha": "788bc420fc62b0136cfdab447647e4c381eb0387", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "patch": "@@ -8717,12 +8717,6 @@ contain relative addresses only when @option{-fPIC} or @option{-fPIC}\n is in effect.\n @end defmac\n \n-@defmac CASE_DROPS_THROUGH\n-Define this if control falls through a @code{case} insn when the index\n-value is out of range.  This means the specified default-label is\n-actually ignored by the @code{case} insn proper.\n-@end defmac\n-\n @defmac CASE_VALUES_THRESHOLD\n Define this to be the smallest number of different values for which it\n is best to use a jump-table instead of a tree of conditional branches."}, {"sha": "5e3f3649fb3d6778998300c41a4ab1cb308cc00c", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "patch": "@@ -2553,14 +2553,8 @@ expand_case (tree exp)\n \t    emit_jump_insn (gen_rtx_ADDR_VEC (CASE_VECTOR_MODE,\n \t\t\t\t\t      gen_rtvec_v (ncases, labelvec)));\n \n-\t  /* If the case insn drops through the table,\n-\t     after the table we must jump to the default-label.\n-\t     Otherwise record no drop-through after the table.  */\n-#ifdef CASE_DROPS_THROUGH\n-\t  emit_jump (default_label);\n-#else\n+\t  /* Record no drop-through after the table.  */\n \t  emit_barrier ();\n-#endif\n \t}\n \n       before_case = NEXT_INSN (before_case);"}, {"sha": "fb6b485092986a76998aff53327f97046871dfcd", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be85b25c2fadc5c1912f4e664d075fa08fa3e15/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=6be85b25c2fadc5c1912f4e664d075fa08fa3e15", "patch": "@@ -658,7 +658,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tGDB_INV_REF_REGPARM_STABS_LETTER DBX_MEMPARM_STABS_LETTER\t   \\\n \tPUT_SDB_SRC_FILE STABS_GCC_MARKER DBX_OUTPUT_FUNCTION_END\t   \\\n \tDBX_OUTPUT_GCC_MARKER DBX_FINISH_SYMBOL SDB_GENERATE_FAKE\t   \\\n-\tNON_SAVING_SETJMP TARGET_LATE_RTL_PROLOGUE_EPILOGUE\n+\tNON_SAVING_SETJMP TARGET_LATE_RTL_PROLOGUE_EPILOGUE\t\t   \\\n+\tCASE_DROPS_THROUGH\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}