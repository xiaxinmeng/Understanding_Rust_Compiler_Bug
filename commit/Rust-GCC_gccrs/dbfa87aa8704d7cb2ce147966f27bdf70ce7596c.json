{"sha": "dbfa87aa8704d7cb2ce147966f27bdf70ce7596c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJmYTg3YWE4NzA0ZDdjYjJjZTE0Nzk2NmYyN2JkZjcwY2U3NTk2Yw==", "commit": {"author": {"name": "Yuri Rumyantsev", "email": "ysrumyan@gmail.com", "date": "2015-08-11T13:52:17Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-08-11T13:52:17Z"}, "message": "tree-vect-stmts.c (vectorizable_shift): Add missed test on vect_induction_def.\n\ngcc/\n\n\t* tree-vect-stmts.c (vectorizable_shift): Add missed test on\n\tvect_induction_def.\n\ngcc/testsuite:\n\n\t* gcc.target/i386/avx2-vect-shift.c: New test.\n\nFrom-SVN: r226781", "tree": {"sha": "99a8e7b99d3199dd01af6513354c0b5d5aa5f8cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99a8e7b99d3199dd01af6513354c0b5d5aa5f8cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c/comments", "author": {"login": "ysrumyan", "id": 44425612, "node_id": "MDQ6VXNlcjQ0NDI1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/44425612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysrumyan", "html_url": "https://github.com/ysrumyan", "followers_url": "https://api.github.com/users/ysrumyan/followers", "following_url": "https://api.github.com/users/ysrumyan/following{/other_user}", "gists_url": "https://api.github.com/users/ysrumyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysrumyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysrumyan/subscriptions", "organizations_url": "https://api.github.com/users/ysrumyan/orgs", "repos_url": "https://api.github.com/users/ysrumyan/repos", "events_url": "https://api.github.com/users/ysrumyan/events{/privacy}", "received_events_url": "https://api.github.com/users/ysrumyan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b32bc1ac16670eef2a0e61ae7bad47f8cfd278ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32bc1ac16670eef2a0e61ae7bad47f8cfd278ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b32bc1ac16670eef2a0e61ae7bad47f8cfd278ed"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "7e311106e4a35b60722aab7e6343d9350276ef69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbfa87aa8704d7cb2ce147966f27bdf70ce7596c", "patch": "@@ -1,3 +1,8 @@\n+2015-08-11  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\t* tree-vect-stmts.c (vectorizable_shift): Add missed test on\n+\tvect_induction_def.\n+\n 2015-08-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/66098"}, {"sha": "93cacfb9bf2aa7d15f91f7cdf4666f7f51ae9314", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dbfa87aa8704d7cb2ce147966f27bdf70ce7596c", "patch": "@@ -1,3 +1,7 @@\n+2015-08-11  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\t* gcc.target/i386/avx2-vect-shift.c: New test.\n+\n 2015-08-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/66098"}, {"sha": "c82e370c3551e2950ade42694f7a61f88d778dd1", "filename": "gcc/testsuite/gcc.target/i386/avx2-vect-shift.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-shift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-shift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-shift.c?ref=dbfa87aa8704d7cb2ce147966f27bdf70ce7596c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-mavx2 -O3 -fdump-tree-vect-details\" } */\n+\n+#define N 32\n+typedef unsigned int u32;\n+u32 a[N];\n+\n+void foo()\n+{\n+  int i;\n+  for (i=0; i<N;i++)\n+    a[i] = 1 << i;\n+}\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2ddd4343a2a922c0790937220ab26b14fec5af75", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfa87aa8704d7cb2ce147966f27bdf70ce7596c/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=dbfa87aa8704d7cb2ce147966f27bdf70ce7596c", "patch": "@@ -4461,7 +4461,9 @@ vectorizable_shift (gimple stmt, gimple_stmt_iterator *gsi,\n   /* Determine whether the shift amount is a vector, or scalar.  If the\n      shift/rotate amount is a vector, use the vector/vector shift optabs.  */\n \n-  if (dt[1] == vect_internal_def && !slp_node)\n+  if ((dt[1] == vect_internal_def\n+       || dt[1] == vect_induction_def)\n+      && !slp_node)\n     scalar_shift_arg = false;\n   else if (dt[1] == vect_constant_def\n \t   || dt[1] == vect_external_def"}]}