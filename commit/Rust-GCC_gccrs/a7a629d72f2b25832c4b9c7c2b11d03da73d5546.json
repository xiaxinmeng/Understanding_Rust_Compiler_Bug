{"sha": "a7a629d72f2b25832c4b9c7c2b11d03da73d5546", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhNjI5ZDcyZjJiMjU4MzJjNGI5YzdjMmIxMWQwM2RhNzNkNTU0Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-05-21T12:44:44Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-05-21T12:44:44Z"}, "message": "combine.c (find_split_point): Handle ASHIFT like MULT to encourage multiply-accumulate/shift-add insn generation.\n\n\t* combine.c (find_split_point): Handle ASHIFT like MULT to encourage\n\tmultiply-accumulate/shift-add insn generation.\n\n\t* gcc.target/hppa/shadd-2.c: New test.\n\nFrom-SVN: r223481", "tree": {"sha": "634c25240aea15d29c8cc3ef04f40c0ffb62eedb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/634c25240aea15d29c8cc3ef04f40c0ffb62eedb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7a629d72f2b25832c4b9c7c2b11d03da73d5546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a629d72f2b25832c4b9c7c2b11d03da73d5546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a629d72f2b25832c4b9c7c2b11d03da73d5546", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a629d72f2b25832c4b9c7c2b11d03da73d5546/comments", "author": null, "committer": null, "parents": [{"sha": "b47fbc5307fe0f03ff302627d8977c402e34feff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47fbc5307fe0f03ff302627d8977c402e34feff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b47fbc5307fe0f03ff302627d8977c402e34feff"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "f4012b795364b51d7b30b20d6d06a02c487cb816", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a629d72f2b25832c4b9c7c2b11d03da73d5546/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a629d72f2b25832c4b9c7c2b11d03da73d5546/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7a629d72f2b25832c4b9c7c2b11d03da73d5546", "patch": "@@ -1,3 +1,8 @@\n+2015-05-21  Jeff Law  <law@redhat.com>\n+\n+\t* combine.c (find_split_point): Handle ASHIFT like MULT to encourage\n+\tmultiply-accumulate/shift-add insn generation.\n+\n 2015-05-21  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54236"}, {"sha": "8c527a74587e6cc4286ed988d9c61c7ecc6b2232", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a629d72f2b25832c4b9c7c2b11d03da73d5546/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a629d72f2b25832c4b9c7c2b11d03da73d5546/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=a7a629d72f2b25832c4b9c7c2b11d03da73d5546", "patch": "@@ -5145,7 +5145,9 @@ find_split_point (rtx *loc, rtx_insn *insn, bool set_src)\n       /* Split at a multiply-accumulate instruction.  However if this is\n          the SET_SRC, we likely do not have such an instruction and it's\n          worthless to try this split.  */\n-      if (!set_src && GET_CODE (XEXP (x, 0)) == MULT)\n+      if (!set_src\n+\t  && (GET_CODE (XEXP (x, 0)) == MULT\n+\t      || GET_CODE (XEXP (x, 0)) == ASHIFT))\n         return loc;\n \n     default:"}, {"sha": "283644cdba28ac3d47a10ce6ef23999d2b5d7461", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a629d72f2b25832c4b9c7c2b11d03da73d5546/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a629d72f2b25832c4b9c7c2b11d03da73d5546/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7a629d72f2b25832c4b9c7c2b11d03da73d5546", "patch": "@@ -1,3 +1,7 @@\n+2015-05-21  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.target/hppa/shadd-2.c: New test.\n+\n 2015-05-21  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54236"}, {"sha": "34708e51597333b4c0b46b511b1a24491327542e", "filename": "gcc/testsuite/gcc.target/hppa/shadd-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a629d72f2b25832c4b9c7c2b11d03da73d5546/gcc%2Ftestsuite%2Fgcc.target%2Fhppa%2Fshadd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a629d72f2b25832c4b9c7c2b11d03da73d5546/gcc%2Ftestsuite%2Fgcc.target%2Fhppa%2Fshadd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fhppa%2Fshadd-2.c?ref=a7a629d72f2b25832c4b9c7c2b11d03da73d5546", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-final { scan-assembler-times \"sh.add\" 2 } }  */\n+\n+typedef struct rtx_def *rtx;\n+typedef const struct rtx_def *const_rtx;\n+enum machine_mode\n+{\n+  VOIDmode, BLKmode, CCmode, CCGCmode, CCGOCmode, CCNOmode, CCAmode, CCCmode,\n+    CCOmode, CCSmode, CCZmode, CCFPmode, CCFPUmode, BImode, QImode, HImode,\n+    SImode, DImode, TImode, OImode, QQmode, HQmode, SQmode, DQmode, TQmode,\n+    UQQmode, UHQmode, USQmode, UDQmode, UTQmode, HAmode, SAmode, DAmode,\n+    TAmode, UHAmode, USAmode, UDAmode, UTAmode, SFmode, DFmode, XFmode,\n+    TFmode, SDmode, DDmode, TDmode, CQImode, CHImode, CSImode, CDImode,\n+    CTImode, COImode, SCmode, DCmode, XCmode, TCmode, V2QImode, V4QImode,\n+    V2HImode, V1SImode, V8QImode, V4HImode, V2SImode, V1DImode, V16QImode,\n+    V8HImode, V4SImode, V2DImode, V1TImode, V32QImode, V16HImode, V8SImode,\n+    V4DImode, V2TImode, V64QImode, V32HImode, V16SImode, V8DImode, V4TImode,\n+    V2SFmode, V4SFmode, V2DFmode, V8SFmode, V4DFmode, V2TFmode, V16SFmode,\n+    V8DFmode, V4TFmode, MAX_MACHINE_MODE, NUM_MACHINE_MODES = MAX_MACHINE_MODE\n+};\n+struct rtx_def\n+{\n+  __extension__ enum machine_mode mode:8;\n+};\n+struct target_regs\n+{\n+  unsigned char x_hard_regno_nregs[53][MAX_MACHINE_MODE];\n+};\n+extern void oof (void);\n+extern int rhs_regno (rtx);\n+\n+extern struct target_regs default_target_regs;\n+__inline__ unsigned int\n+end_hard_regno (enum machine_mode mode, unsigned int regno)\n+{\n+  return regno +\n+    ((&default_target_regs)->x_hard_regno_nregs)[regno][(int) mode];\n+}\n+\n+void\n+note_btr_set (rtx dest, const_rtx set\n+\t      __attribute__ ((__unused__)), void *data)\n+{\n+  int regno, end_regno;\n+  end_regno = end_hard_regno (((dest)->mode), (rhs_regno (dest)));\n+  for (; regno < end_regno; regno++)\n+    oof ();\n+}"}]}