{"sha": "3ca4d07dffe49b9c51f713cb78c785ecb185b04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NhNGQwN2RmZmU0OWI5YzUxZjcxM2NiNzhjNzg1ZWNiMTg1YjA0YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-12-15T12:59:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-12-15T12:59:05Z"}, "message": "vstring.h (operator+(__versa_string<>&&, const __versa_string<>&), [...]): Add.\n\n2010-12-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/ext/vstring.h (operator+(__versa_string<>&&,\n\tconst __versa_string<>&), operator+(const __versa_string<>&,\n\t__versa_string<>&&), operator+(__versa_string<>&&,\n\t__versa_string<>&&), operator+(const _CharT*,\n\t__versa_string<>&&), operator+(_CharT, __versa_string<>&&),\n\toperator+(__versa_string<>&&, const _CharT*),\n\toperator+(__versa_string<>&&, _CharT)): Add.\n\t* testsuite/ext/vstring/operators/1.cc: New.\n\nFrom-SVN: r167853", "tree": {"sha": "ff2021fb6ec9de11c31e35052fb7b2e3ea2495bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff2021fb6ec9de11c31e35052fb7b2e3ea2495bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ca4d07dffe49b9c51f713cb78c785ecb185b04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca4d07dffe49b9c51f713cb78c785ecb185b04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ca4d07dffe49b9c51f713cb78c785ecb185b04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca4d07dffe49b9c51f713cb78c785ecb185b04a/comments", "author": null, "committer": null, "parents": [{"sha": "5519175f4c25f46a987b1e7dd964d153b9a68419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5519175f4c25f46a987b1e7dd964d153b9a68419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5519175f4c25f46a987b1e7dd964d153b9a68419"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "08fdfa369ed72c573d6ab4ad5974847f6cad5c4c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca4d07dffe49b9c51f713cb78c785ecb185b04a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca4d07dffe49b9c51f713cb78c785ecb185b04a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3ca4d07dffe49b9c51f713cb78c785ecb185b04a", "patch": "@@ -1,3 +1,14 @@\n+2010-12-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/ext/vstring.h (operator+(__versa_string<>&&,\n+\tconst __versa_string<>&), operator+(const __versa_string<>&,\n+\t__versa_string<>&&), operator+(__versa_string<>&&,\n+\t__versa_string<>&&), operator+(const _CharT*,\n+\t__versa_string<>&&), operator+(_CharT, __versa_string<>&&),\n+\toperator+(__versa_string<>&&, const _CharT*),\n+\toperator+(__versa_string<>&&, _CharT)): Add.\n+\t* testsuite/ext/vstring/operators/1.cc: New.\n+\n 2010-12-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/46951"}, {"sha": "faca91be5098fa790c04d90b2ed64a79a321ec98", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca4d07dffe49b9c51f713cb78c785ecb185b04a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca4d07dffe49b9c51f713cb78c785ecb185b04a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=3ca4d07dffe49b9c51f713cb78c785ecb185b04a", "patch": "@@ -2098,6 +2098,57 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n \t      _CharT __rhs);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(__versa_string<_CharT, _Traits, _Alloc, _Base>&& __lhs,\n+\t      const __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { return std::move(__lhs.append(__rhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(const __versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t      __versa_string<_CharT, _Traits, _Alloc, _Base>&& __rhs)\n+    { return std::move(__rhs.insert(0, __lhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(__versa_string<_CharT, _Traits, _Alloc, _Base>&& __lhs,\n+\t      __versa_string<_CharT, _Traits, _Alloc, _Base>&& __rhs)\n+    { return std::move(__lhs.append(__rhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(const _CharT* __lhs,\n+\t      __versa_string<_CharT, _Traits, _Alloc, _Base>&& __rhs)\n+    { return std::move(__rhs.insert(0, __lhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(_CharT __lhs,\n+\t      __versa_string<_CharT, _Traits, _Alloc, _Base>&& __rhs)\n+    { return std::move(__rhs.insert(0, 1, __lhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(__versa_string<_CharT, _Traits, _Alloc, _Base>&& __lhs,\n+\t      const _CharT* __rhs)\n+    { return std::move(__lhs.append(__rhs)); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline __versa_string<_CharT, _Traits, _Alloc, _Base>\n+    operator+(__versa_string<_CharT, _Traits, _Alloc, _Base>&& __lhs,\n+\t      _CharT __rhs)\n+    { return std::move(__lhs.append(1, __rhs)); }\n+#endif\n+\n   // operator ==\n   /**\n    *  @brief  Test equivalence of two strings."}, {"sha": "f7cb7992d94a51082858f987ac1f6bdaf64e40b7", "filename": "libstdc++-v3/testsuite/ext/vstring/operators/1.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca4d07dffe49b9c51f713cb78c785ecb185b04a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Foperators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca4d07dffe49b9c51f713cb78c785ecb185b04a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Foperators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Foperators%2F1.cc?ref=3ca4d07dffe49b9c51f713cb78c785ecb185b04a", "patch": "@@ -0,0 +1,93 @@\n+// 2010-12-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+#include <ext/vstring.h>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using __gnu_cxx::__vstring;\n+\n+  VERIFY( (__vstring(\"abc\") + __vstring(\"def\")\n+\t   == __vstring(\"abcdef\")) );\n+  __vstring s1(\"abc\");\n+  VERIFY( s1 + __vstring(\"def\") == __vstring(\"abcdef\") );\n+  __vstring s2(\"def\");\n+  VERIFY( __vstring(\"abc\") + s2 == __vstring(\"abcdef\") );\n+  VERIFY( __vstring(\"abc\") + 'd' == __vstring(\"abcd\") );\n+  VERIFY( __vstring(\"abc\") + \"def\" == __vstring(\"abcdef\") );\n+  VERIFY( 'a' + __vstring(\"bcd\") == __vstring(\"abcd\") );\n+  VERIFY( \"abc\" + __vstring(\"def\") == __vstring(\"abcdef\") );\n+\n+  VERIFY( (__vstring(\"abcdefghij\") + __vstring(\"klmnopqrst\")\n+\t   == __vstring(\"abcdefghijklmnopqrst\")) );\n+  __vstring s1l(\"abcdefghij\");\n+  VERIFY( (s1l + __vstring(\"klmnopqrst\")\n+\t   == __vstring(\"abcdefghijklmnopqrst\")) );\n+  __vstring s2l(\"klmnopqrst\");\n+  VERIFY( (__vstring(\"abcdefghij\") + s2l\n+\t   == __vstring(\"abcdefghijklmnopqrst\")) );\n+  VERIFY( (__vstring(\"abcdefghijklmno\") + 'p'\n+\t   == __vstring(\"abcdefghijklmnop\")) );\n+  VERIFY( (__vstring(\"abcdefghijklmno\") + \"pqrst\"\n+\t   == __vstring(\"abcdefghijklmnopqrst\")) );\n+  VERIFY( ('a' + __vstring(\"bcdefghijklmnop\")\n+\t   == __vstring(\"abcdefghijklmnop\")) );\n+  VERIFY( (\"abcde\" + __vstring(\"fghijklmnopqrst\")\n+\t   == __vstring(\"abcdefghijklmnopqrst\")) );\n+\n+  VERIFY( (__vstring(\"abcdefghijklmnopqrst\") + __vstring(\"uvwxy\")\n+\t   == __vstring(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (__vstring(\"abcde\") + __vstring(\"fghijklmnopqrstuvwxy\")\n+\t   == __vstring(\"abcdefghijklmnopqrstuvwxy\")) );\n+  __vstring s1ll1(\"abcdefghijklmnopqrst\");\n+  VERIFY( (s1ll1 + __vstring(\"uvwxy\")\n+\t   == __vstring(\"abcdefghijklmnopqrstuvwxy\")) );\n+  __vstring s1ll2(\"abcde\");\n+  VERIFY( (s1ll2 + __vstring(\"fghijklmnopqrstuvwxy\")\n+\t   == __vstring(\"abcdefghijklmnopqrstuvwxy\")) );\n+  __vstring s2ll1(\"fghijklmnopqrstuvwxy\");\n+  VERIFY( (__vstring(\"abcde\") + s2ll1\n+\t   == __vstring(\"abcdefghijklmnopqrstuvwxy\")) );\n+  __vstring s2ll2(\"uvwxy\");\n+  VERIFY( (__vstring(\"abcdefghijklmnopqrst\") + s2ll2\n+\t   == __vstring(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (__vstring(\"abcdefghijklmnopqrst\") + 'u'\n+\t   == __vstring(\"abcdefghijklmnopqrstu\")) );\n+  VERIFY( (__vstring(\"abcdefghijklmnopqrst\") + \"uvwxy\"\n+\t   == __vstring(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (__vstring(\"abcde\") + \"fghijklmnopqrstuvwxy\"\n+\t   == __vstring(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( ('a' + __vstring(\"bcdefghijklmnopqrstuvwxy\")\n+\t   == __vstring(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (\"abcde\" + __vstring(\"fghijklmnopqrstuvwxy\")\n+\t   == __vstring(\"abcdefghijklmnopqrstuvwxy\")) );\n+  VERIFY( (\"abcdefghijklmnopqrst\" + __vstring(\"uvwxy\")\n+\t   == __vstring(\"abcdefghijklmnopqrstuvwxy\")) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}