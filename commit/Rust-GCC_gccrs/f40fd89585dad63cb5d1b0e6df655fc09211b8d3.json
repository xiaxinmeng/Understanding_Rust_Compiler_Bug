{"sha": "f40fd89585dad63cb5d1b0e6df655fc09211b8d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQwZmQ4OTU4NWRhZDYzY2I1ZDFiMGU2ZGY2NTVmYzA5MjExYjhkMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-03-13T18:09:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-03-13T18:09:12Z"}, "message": "jit-recording.c (dump::write): Also check vasprintf return value.\n\n\t* jit-recording.c (dump::write): Also check vasprintf return value.\n\t(recording::context::add_error_va): Ditto.\n\t(recording::string::from_printf): Ditto.\n\nFrom-SVN: r221426", "tree": {"sha": "99a768a7d65989cb5fa2ea301f09462a024a1218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99a768a7d65989cb5fa2ea301f09462a024a1218"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f40fd89585dad63cb5d1b0e6df655fc09211b8d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40fd89585dad63cb5d1b0e6df655fc09211b8d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f40fd89585dad63cb5d1b0e6df655fc09211b8d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40fd89585dad63cb5d1b0e6df655fc09211b8d3/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18eb0d132457974c8bda7e847597b2c802c69876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18eb0d132457974c8bda7e847597b2c802c69876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18eb0d132457974c8bda7e847597b2c802c69876"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "4c02a3fe522f098284944dc02704395294c69073", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40fd89585dad63cb5d1b0e6df655fc09211b8d3/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40fd89585dad63cb5d1b0e6df655fc09211b8d3/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=f40fd89585dad63cb5d1b0e6df655fc09211b8d3", "patch": "@@ -1,3 +1,9 @@\n+2015-03-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* jit-recording.c (dump::write): Also check vasprintf return value.\n+\t(recording::context::add_error_va): Ditto.\n+\t(recording::string::from_printf): Ditto.\n+\n 2015-03-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* docs/internals/index.rst (Packaging notes): New section."}, {"sha": "32d7f31a8c353b799deda678f114175bdda9cb30", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40fd89585dad63cb5d1b0e6df655fc09211b8d3/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40fd89585dad63cb5d1b0e6df655fc09211b8d3/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=f40fd89585dad63cb5d1b0e6df655fc09211b8d3", "patch": "@@ -77,19 +77,20 @@ dump::~dump ()\n void\n dump::write (const char *fmt, ...)\n {\n+  int len;\n   va_list ap;\n-  char *buf = NULL;\n+  char *buf;\n \n   /* If there was an error opening the file, we've already reported it.\n      Don't attempt further work.  */\n   if (!m_file)\n     return;\n \n   va_start (ap, fmt);\n-  vasprintf (&buf, fmt, ap);\n+  len = vasprintf (&buf, fmt, ap);\n   va_end (ap);\n \n-  if (!buf)\n+  if (buf == NULL || len < 0)\n     {\n       m_ctxt.add_error (NULL, \"malloc failure writing to dumpfile %s\",\n \t\t\tm_filename);\n@@ -1231,22 +1232,23 @@ recording::context::add_error (location *loc, const char *fmt, ...)\n void\n recording::context::add_error_va (location *loc, const char *fmt, va_list ap)\n {\n+  int len;\n   char *malloced_msg;\n   const char *errmsg;\n   bool has_ownership;\n \n   JIT_LOG_SCOPE (get_logger ());\n \n-  vasprintf (&malloced_msg, fmt, ap);\n-  if (malloced_msg)\n+  len = vasprintf (&malloced_msg, fmt, ap);\n+  if (malloced_msg == NULL || len < 0)\n     {\n-      errmsg = malloced_msg;\n-      has_ownership = true;\n+      errmsg = \"out of memory generating error message\";\n+      has_ownership = false;\n     }\n   else\n     {\n-      errmsg = \"out of memory generating error message\";\n-      has_ownership = false;\n+      errmsg = malloced_msg;\n+      has_ownership = true;\n     }\n   if (get_logger ())\n     get_logger ()->log (\"error %i: %s\", m_error_count, errmsg);\n@@ -1709,15 +1711,16 @@ recording::string::~string ()\n recording::string *\n recording::string::from_printf (context *ctxt, const char *fmt, ...)\n {\n+  int len;\n   va_list ap;\n-  char *buf = NULL;\n+  char *buf;\n   recording::string *result;\n \n   va_start (ap, fmt);\n-  vasprintf (&buf, fmt, ap);\n+  len = vasprintf (&buf, fmt, ap);\n   va_end (ap);\n \n-  if (!buf)\n+  if (buf == NULL || len < 0)\n     {\n       ctxt->add_error (NULL, \"malloc failure\");\n       return NULL;"}]}