{"sha": "dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQyZDczYTc0N2IxZTBiYTAwZDlmMWFhNzliZTVhYzhiMDg3ZDZjZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T10:47:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T10:47:02Z"}, "message": "[multiple changes]\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb (Traverse_Declarations_Or_Statement): Function\n\tform, returning value of Current_Dominant upon exit, for chaining\n\tpurposes.\n\t(Traverse_Declarations_Or_Statement.Traverse_One, case\n\tN_Block_Statement): First statement is dominated by last declaration.\n\t(Traverse_Subprogram_Or_Task_Body): Ditto.\n\t(Traverse_Package_Declaration): First private\n\tdeclaration is dominated by last visible declaration.\n\t(Traverse_Sync_Definition): Ditto.\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnat_rm.texi: Restrict the requirement for Scalar_Storage_Order\n\tmatching Bit_Order to record types only, since array types do not\n\thave a Bit_Order.\n\n2013-01-02  Vincent Celier  <celier@adacore.com>\n\n\t* gnat_ugn.texi: Remove documentation of -gnateO, which is an\n\tinternal switch.\n\t* usage.adb: Indicate that -gnateO is an internal switch.\n\nFrom-SVN: r194794", "tree": {"sha": "474777b594f86d5dc1f359034215a058ba971515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/474777b594f86d5dc1f359034215a058ba971515"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce/comments", "author": null, "committer": null, "parents": [{"sha": "7130729aa07512f6349dc85d86454cdb6c152b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7130729aa07512f6349dc85d86454cdb6c152b38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7130729aa07512f6349dc85d86454cdb6c152b38"}], "stats": {"total": 138, "additions": 103, "deletions": 35}, "files": [{"sha": "fd9f0e6427af81fe093a5d3453e9192e1b4bfb13", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce", "patch": "@@ -1,3 +1,27 @@\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb (Traverse_Declarations_Or_Statement): Function\n+\tform, returning value of Current_Dominant upon exit, for chaining\n+\tpurposes.\n+\t(Traverse_Declarations_Or_Statement.Traverse_One, case\n+\tN_Block_Statement): First statement is dominated by last declaration.\n+\t(Traverse_Subprogram_Or_Task_Body): Ditto.\n+\t(Traverse_Package_Declaration): First private\n+\tdeclaration is dominated by last visible declaration.\n+\t(Traverse_Sync_Definition): Ditto.\n+\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat_rm.texi: Restrict the requirement for Scalar_Storage_Order\n+\tmatching Bit_Order to record types only, since array types do not\n+\thave a Bit_Order.\n+\n+2013-01-02  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnat_ugn.texi: Remove documentation of -gnateO, which is an\n+\tinternal switch.\n+\t* usage.adb: Indicate that -gnateO is an internal switch.\n+\n 2013-01-02  Thomas Quinot  <quinot@adacore.com>\n \n \t* par_sco.adb: Add SCO generation for task types and single"}, {"sha": "0a89386af57238a7a343b065fb17245a845f3e6e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce", "patch": "@@ -6846,13 +6846,13 @@ that make up scalar components are ordered within S. Other properties are\n as for standard representation attribute @code{Bit_Order}, as defined by\n Ada RM 13.5.3(4). The default is @code{System.Default_Bit_Order}.\n \n-If @code{@var{S}'Scalar_Storage_Order} is specified explicitly, it shall be\n-equal to @code{@var{S}'Bit_Order}. Note: This means that if a\n-@code{Scalar_Storage_Order} attribute definition clause is not confirming,\n-then the type's @code{Bit_Order} shall be specified explicitly and set to\n-the same value.\n+For a record type @var{S}, if @code{@var{S}'Scalar_Storage_Order} is\n+specified explicitly, it shall be equal to @code{@var{S}'Bit_Order}. Note:\n+This means that if a @code{Scalar_Storage_Order} attribute definition\n+clause is not confirming, then the type's @code{Bit_Order} shall be\n+specified explicitly and set to the same value.\n \n-If a component of S has itself a record or array type, then it shall also\n+If a component of @var{S} has itself a record or array type, then it shall also\n have a @code{Scalar_Storage_Order} attribute definition clause. In addition,\n if the component does not start on a byte boundary, then the scalar storage\n order specified for S and for the nested component type shall be identical.\n@@ -6864,10 +6864,11 @@ A confirming @code{Scalar_Storage_Order} attribute definition clause (i.e.\n with a value equal to @code{System.Default_Bit_Order}) has no effect.\n \n If the opposite storage order is specified, then whenever the value of\n-a scalar component of S is read, the storage elements of the enclosing\n-machine scalar are first reversed (before retrieving the component value,\n-possibly applying some shift and mask operatings on the enclosing machine\n-scalar), and the opposite operation is done for writes.\n+a scalar component of an object of type @var{S} is read, the storage\n+elements of the enclosing machine scalar are first reversed (before\n+retrieving the component value, possibly applying some shift and mask\n+operatings on the enclosing machine scalar), and the opposite operation\n+is done for writes.\n \n In that case, the restrictions set forth in 13.5.1(10.3/2) for scalar components\n are relaxed. Instead, the following rules apply:"}, {"sha": "d96a724df6d4b5392be69bd00bdf41f71e996cb2", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce", "patch": "@@ -4242,10 +4242,6 @@ Specify a mapping file\n @end ifclear\n (@pxref{Units to Sources Mapping Files}).\n \n-@item -gnateO=@var{path}\n-@cindex @option{-gnateO} (@command{gcc})\n-Specify a path for the object files.\n-\n @item -gnatep=@var{file}\n @cindex @option{-gnatep} (@command{gcc})\n Specify a preprocessing data file"}, {"sha": "d1361fdac12fbe93595e2c688b120a9954f67cac", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 67, "deletions": 20, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce", "patch": "@@ -154,6 +154,13 @@ package body Par_SCO is\n    --  Process L, a list of statements or declarations dominated by D.\n    --  If P is present, it is processed as though it had been prepended to L.\n \n+   function Traverse_Declarations_Or_Statements\n+     (L : List_Id;\n+      D : Dominant_Info := No_Dominant;\n+      P : Node_Id       := Empty) return Dominant_Info;\n+   --  Same as above, and returns dominant information corresponding to the\n+   --  last node with SCO in L.\n+\n    --  The following Traverse_* routines perform appropriate calls to\n    --  Traverse_Declarations_Or_Statements to traverse specific node kinds\n \n@@ -1024,8 +1031,7 @@ package body Par_SCO is\n       --  original source occurrence of the pragma.\n \n       if not (Generate_SCO\n-               and then\n-                 In_Extended_Main_Source_Unit (Cunit_Entity (Current_Sem_Unit))\n+               and then In_Extended_Main_Source_Unit (Loc)\n                and then not (In_Instance or In_Inlined_Body))\n       then\n          return;\n@@ -1183,6 +1189,17 @@ package body Par_SCO is\n      (L : List_Id;\n       D : Dominant_Info := No_Dominant;\n       P : Node_Id       := Empty)\n+   is\n+      Discard_Dom : Dominant_Info;\n+      pragma Warnings (Off, Discard_Dom);\n+   begin\n+      Discard_Dom := Traverse_Declarations_Or_Statements (L, D, P);\n+   end Traverse_Declarations_Or_Statements;\n+\n+   function Traverse_Declarations_Or_Statements\n+     (L : List_Id;\n+      D : Dominant_Info := No_Dominant;\n+      P : Node_Id       := Empty) return Dominant_Info\n    is\n       Current_Dominant : Dominant_Info := D;\n       --  Dominance information for the current basic block\n@@ -1441,6 +1458,9 @@ package body Par_SCO is\n                --  entry since Set_SCO_Pragma_Enabled will be called when\n                --  analyzing actual checks, possibly in other units).\n \n+               --  Pre/post can have checks in client units too because of\n+               --  inheritance, so should they be moved here???\n+\n                when Aspect_Predicate         |\n                     Aspect_Static_Predicate  |\n                     Aspect_Dynamic_Predicate |\n@@ -1587,9 +1607,14 @@ package body Par_SCO is\n \n             when N_Block_Statement =>\n                Set_Statement_Entry;\n-               Traverse_Declarations_Or_Statements\n-                 (L => Declarations (N),\n-                  D => Current_Dominant);\n+\n+               --  The first statement in the handled sequence of statements\n+               --  is dominated by the elaboration of the last declaration.\n+\n+               Current_Dominant := Traverse_Declarations_Or_Statements\n+                                     (L => Declarations (N),\n+                                      D => Current_Dominant);\n+\n                Traverse_Handled_Statement_Sequence\n                  (N => Handled_Statement_Sequence (N),\n                   D => Current_Dominant);\n@@ -1916,6 +1941,9 @@ package body Par_SCO is\n                         Process_Decisions_Defer (Expression (Arg), 'P');\n                         Typ := 'p';\n \n+                        --  Pre/postconditions can be inherited so SCO should\n+                        --  never be deactivated???\n+\n                      when Name_Debug =>\n                         if Present (Arg) and then Present (Next (Arg)) then\n \n@@ -1934,6 +1962,10 @@ package body Par_SCO is\n                      --  for any embedded expressions, and the pragma is\n                      --  never disabled.\n \n+                     --  Should generate P decisions (not X) for assertion\n+                     --  related pragmas: [Type_]Invariant,\n+                     --  [{Static,Dynamic}_]Predicate???\n+\n                      when others =>\n                         Process_Decisions_Defer (N, 'X');\n                         Typ := 'P';\n@@ -2053,6 +2085,8 @@ package body Par_SCO is\n       if Present (P) or else Is_Non_Empty_List (L) then\n          Set_Statement_Entry;\n       end if;\n+\n+      return Current_Dominant;\n    end Traverse_Declarations_Or_Statements;\n \n    ------------------------------------------\n@@ -2100,9 +2134,15 @@ package body Par_SCO is\n    ---------------------------\n \n    procedure Traverse_Package_Body (N : Node_Id) is\n+      Dom : Dominant_Info;\n    begin\n-      Traverse_Declarations_Or_Statements (Declarations (N));\n-      Traverse_Handled_Statement_Sequence (Handled_Statement_Sequence (N));\n+      --  The first statement in the handled sequence of statements is\n+      --  dominated by the elaboration of the last declaration.\n+\n+      Dom := Traverse_Declarations_Or_Statements (Declarations (N));\n+\n+      Traverse_Handled_Statement_Sequence\n+        (Handled_Statement_Sequence (N), Dom);\n    end Traverse_Package_Body;\n \n    ----------------------------------\n@@ -2111,9 +2151,13 @@ package body Par_SCO is\n \n    procedure Traverse_Package_Declaration (N : Node_Id) is\n       Spec : constant Node_Id := Specification (N);\n+      Dom  : Dominant_Info;\n    begin\n-      Traverse_Declarations_Or_Statements (Visible_Declarations (Spec));\n-      Traverse_Declarations_Or_Statements (Private_Declarations (Spec));\n+      --  The first private declaration is dominated by the last visible\n+      --  declaration.\n+\n+      Dom := Traverse_Declarations_Or_Statements (Visible_Declarations (Spec));\n+      Traverse_Declarations_Or_Statements (Private_Declarations (Spec), Dom);\n    end Traverse_Package_Declaration;\n \n    ------------------------------\n@@ -2145,19 +2189,13 @@ package body Par_SCO is\n \n       Vis_Decl := Visible_Declarations (Sync_Def);\n \n-      Traverse_Declarations_Or_Statements\n-        (L => Vis_Decl,\n-         D => Dom_Info);\n+      Dom_Info := Traverse_Declarations_Or_Statements\n+                    (L => Vis_Decl,\n+                     D => Dom_Info);\n \n       --  If visible declarations are present, the first private declaration\n       --  is dominated by the last visible declaration.\n \n-      --  This is incorrect if Last (Vis_Decl) does not generate a SCO???\n-\n-      if not Is_Empty_List (Vis_Decl) then\n-         Dom_Info.N := Last (Vis_Decl);\n-      end if;\n-\n       Traverse_Declarations_Or_Statements\n         (L => Private_Declarations (Sync_Def),\n          D => Dom_Info);\n@@ -2171,9 +2209,18 @@ package body Par_SCO is\n      (N : Node_Id;\n       D : Dominant_Info := No_Dominant)\n    is\n+      Decls    : constant List_Id := Declarations (N);\n+      Dom_Info : Dominant_Info := D;\n    begin\n-      Traverse_Declarations_Or_Statements (Declarations (N), D);\n-      Traverse_Handled_Statement_Sequence (Handled_Statement_Sequence (N), D);\n+      --  If declarations are present, the first statement is dominated by the\n+      --  last declaration.\n+\n+      Dom_Info := Traverse_Declarations_Or_Statements\n+                    (L => Decls, D => Dom_Info);\n+\n+      Traverse_Handled_Statement_Sequence\n+        (N => Handled_Statement_Sequence (N),\n+         D => Dom_Info);\n    end Traverse_Subprogram_Or_Task_Body;\n \n end Par_SCO;"}, {"sha": "180e44ebf3e05bf90a46cf6fe8c343eddd3f6cf7", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=dd2d73a747b1e0ba00d9f1aa79be5ac8b087d6ce", "patch": "@@ -225,7 +225,7 @@ begin\n    --  Line for -gnateO=?\n \n    Write_Switch_Char (\"eO=?\");\n-   Write_Line (\"Specify an object path file\");\n+   Write_Line (\"Specify an object path file (internal switch)\");\n \n    --  Line for -gnatep switch\n "}]}