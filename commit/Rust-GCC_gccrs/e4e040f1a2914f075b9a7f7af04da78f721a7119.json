{"sha": "e4e040f1a2914f075b9a7f7af04da78f721a7119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRlMDQwZjFhMjkxNGYwNzViOWE3ZjdhZjA0ZGE3OGY3MjFhNzExOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-07-26T08:51:14Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-26T08:51:14Z"}, "message": "alpha.c: Use SUBREG_P predicate.\n\n\t* config/alpha/alpha.c: Use SUBREG_P predicate.\n\t* config/alpha/predicates.md: Ditto.\n\nFrom-SVN: r226232", "tree": {"sha": "acf8f5a1eee830af34915d49453aea7d176096d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acf8f5a1eee830af34915d49453aea7d176096d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4e040f1a2914f075b9a7f7af04da78f721a7119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e040f1a2914f075b9a7f7af04da78f721a7119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4e040f1a2914f075b9a7f7af04da78f721a7119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e040f1a2914f075b9a7f7af04da78f721a7119/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2446df2021fa63f52712e959dd6fe64cd9f35f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2446df2021fa63f52712e959dd6fe64cd9f35f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2446df2021fa63f52712e959dd6fe64cd9f35f0d"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "10df3252b31c2bd866166d3c95f38864f3756a19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e040f1a2914f075b9a7f7af04da78f721a7119/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e040f1a2914f075b9a7f7af04da78f721a7119/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4e040f1a2914f075b9a7f7af04da78f721a7119", "patch": "@@ -1,3 +1,8 @@\n+2015-07-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c: Use SUBREG_P predicate.\n+\t* config/alpha/predicates.md: Ditto.\n+\n 2015-07-25  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config.host (s390*-*-*): Include driver-native.c only when"}, {"sha": "ca07cc7052bf0ca41a859cf38cb3b18d69dd1cf0", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e040f1a2914f075b9a7f7af04da78f721a7119/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e040f1a2914f075b9a7f7af04da78f721a7119/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=e4e040f1a2914f075b9a7f7af04da78f721a7119", "patch": "@@ -700,7 +700,7 @@ resolve_reload_operand (rtx op)\n   if (reload_in_progress)\n     {\n       rtx tmp = op;\n-      if (GET_CODE (tmp) == SUBREG)\n+      if (SUBREG_P (tmp))\n \ttmp = SUBREG_REG (tmp);\n       if (REG_P (tmp)\n \t  && REGNO (tmp) >= FIRST_PSEUDO_REGISTER)\n@@ -891,7 +891,7 @@ alpha_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n     x = XEXP (x, 0);\n \n   /* Discard non-paradoxical subregs.  */\n-  if (GET_CODE (x) == SUBREG\n+  if (SUBREG_P (x)\n       && (GET_MODE_SIZE (GET_MODE (x))\n \t  < GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n     x = SUBREG_REG (x);\n@@ -919,7 +919,7 @@ alpha_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n       x = XEXP (x, 0);\n \n       /* Discard non-paradoxical subregs.  */\n-      if (GET_CODE (x) == SUBREG\n+      if (SUBREG_P (x)\n           && (GET_MODE_SIZE (GET_MODE (x))\n \t      < GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n \tx = SUBREG_REG (x);\n@@ -953,7 +953,7 @@ alpha_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n \t  x = XEXP (x, 0);\n \n \t  /* Discard non-paradoxical subregs.  */\n-\t  if (GET_CODE (x) == SUBREG\n+\t  if (SUBREG_P (x)\n \t      && (GET_MODE_SIZE (GET_MODE (x))\n \t\t  < GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n \t    x = SUBREG_REG (x);"}, {"sha": "e24b3bde37fa3ebdda69d1fc24d5d58ead50cf3a", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e040f1a2914f075b9a7f7af04da78f721a7119/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e040f1a2914f075b9a7f7af04da78f721a7119/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=e4e040f1a2914f075b9a7f7af04da78f721a7119", "patch": "@@ -134,7 +134,7 @@\n (define_predicate \"hard_fp_register_operand\"\n   (match_operand 0 \"register_operand\")\n {\n-  if (GET_CODE (op) == SUBREG)\n+  if (SUBREG_P (op))\n     op = SUBREG_REG (op);\n   return REGNO_REG_CLASS (REGNO (op)) == FLOAT_REGS;\n })\n@@ -143,7 +143,7 @@\n (define_predicate \"hard_int_register_operand\"\n   (match_operand 0 \"register_operand\")\n {\n-  if (GET_CODE (op) == SUBREG)\n+  if (SUBREG_P (op))\n     op = SUBREG_REG (op);\n   return REGNO_REG_CLASS (REGNO (op)) == GENERAL_REGS;\n })\n@@ -506,7 +506,7 @@\n (define_special_predicate \"any_memory_operand\"\n   (match_code \"mem,reg,subreg\")\n {\n-  if (GET_CODE (op) == SUBREG)\n+  if (SUBREG_P (op))\n     op = SUBREG_REG (op);\n \n   if (MEM_P (op))\n@@ -537,7 +537,7 @@\n (define_predicate \"reg_not_elim_operand\"\n   (match_operand 0 \"register_operand\")\n {\n-  if (GET_CODE (op) == SUBREG)\n+  if (SUBREG_P (op))\n     op = SUBREG_REG (op);\n   return op != frame_pointer_rtx && op != arg_pointer_rtx;\n })"}]}