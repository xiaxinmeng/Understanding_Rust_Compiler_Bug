{"sha": "b83b13331aca413cac80b0d7928b59b12e490f93", "node_id": "C_kwDOANBUbNoAKGI4M2IxMzMzMWFjYTQxM2NhYzgwYjBkNzkyOGI1OWIxMmU0OTBmOTM", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-03-07T10:55:29Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-10-02T09:33:00Z"}, "message": "Adjust LIBGCC2_INCLUDES for VxWorks and augment comment\n\nInvestigating the reasons for libgcc build failures in a canadian\ncontext, orthogonally to the recent update of vxcrtstuff, exposed\ninteresting differences in the way include search paths are managed\nbetween a regular Linux->VxWorks cross build and a canadian setup\nbuilding a Windows->VxWorks toolchain in a Linux environment.\n\nThis change augments the comment attached to LIBGCC2_INCLUDE in\nlibgcc/config/t-vxworks to better describe the parameters at play.\n\nIt also adjusts the addition of options for gcc/include and\ngcc/include-fixed to minimize the actual differences for libgcc\nin the two kinds of configurations.\n\n2022-03-06  Olivier Hainque  <hainque@adacore.com>\n\nlibgcc/\n\t* config/t-vxworks (LIBGCC2_INCLUDE): Augment comment.  Move\n\t-I options for gcc/include and gcc/include-fixed at the end\n\tand make them -isystem.", "tree": {"sha": "67447da0e70362f20c21098cc0f090f73a71d683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67447da0e70362f20c21098cc0f090f73a71d683"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b83b13331aca413cac80b0d7928b59b12e490f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83b13331aca413cac80b0d7928b59b12e490f93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b83b13331aca413cac80b0d7928b59b12e490f93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83b13331aca413cac80b0d7928b59b12e490f93/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f26f5b584856927337728ddc598c44f1426fa32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f26f5b584856927337728ddc598c44f1426fa32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f26f5b584856927337728ddc598c44f1426fa32"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "81a4deab073fea3a119db8772a6b7fdffba30b99", "filename": "libgcc/config/t-vxworks", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83b13331aca413cac80b0d7928b59b12e490f93/libgcc%2Fconfig%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83b13331aca413cac80b0d7928b59b12e490f93/libgcc%2Fconfig%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-vxworks?ref=b83b13331aca413cac80b0d7928b59b12e490f93", "patch": "@@ -5,17 +5,37 @@ LIBGCC2_DEBUG_CFLAGS =\n # VxWorks specific entry point.\n LIB2FUNCS_EXCLUDE += _clear_cache\n \n-# This ensures that the correct target headers are used; some VxWorks\n-# system headers have names that collide with GCC's internal (host)\n-# headers, e.g. regs.h. Make sure the local libgcc headers still\n-# prevail (e.g. unwind.h), and that gcc provided header files intended\n-# to be user visible eventually are visible as well.\n+# Arrange to have the correct target headers used when compiling\n+# libgcc.  We specifically need to handle VxWorks system headers\n+# having names that collide with GCC's internal headers.\n+#\n+# For example, compiling gthr-vxworks.c #includes <taskLib.h>\n+# which in turn #includes <regs.h>, which exists both in the gcc\n+# source tree and as a VxWorks system header.  We need that\n+# #include to get the VxWorks version, not the compiler one.\n+#\n+# We still need to make sure that the local libgcc headers prevail\n+# (e.g. ./unwind.h), and that gcc provided header files intended\n+# to be user visible eventually are visible as well (gcc/include\n+# and gcc/include-fixed).\n+#\n+# The latter are added unconditionally as -isystem during regular\n+# cross builds via the %I spec processing and search paths introduced\n+# by -B options. These take priority over whatever we can add here,\n+# even with -nostdinc, and end up at the tail of the search chain.\n+#\n+# We keep explicit options nevertheless, to accommodate canadian\n+# setups where the libraries are built with an installed cross compiler,\n+# without -B.  Also note, incidentally, that the detection of duplicate\n+# paths differs between Windows and Linux hosts as the latter can perform\n+# inode based checks while the former may only rely on name comparisons.\n+\n LIBGCC2_INCLUDES = -nostdinc -I. \\\n-  -I$(MULTIBUILDTOP)../../gcc/include-fixed$(MULTISUBDIR) \\\n-  -I$(MULTIBUILDTOP)../../gcc/include \\\n   $(if $(findstring vxworks7, $(target_noncanonical)), \\\n     -I$(VSB_DIR)/h -I$(VSB_DIR)/share/h -I=/system -I=/public, \\\n-    -I=/ -I=/wrn/coreip)\n+    -I=/ -I=/wrn/coreip) \\\n+  -isystem $(MULTIBUILDTOP)../../gcc/include-fixed$(MULTISUBDIR) \\\n+  -isystem $(MULTIBUILDTOP)../../gcc/include\n \n # Use these also for the vxcrstuff objects (.e.g for version.h), on top of\n # the options possibly already set specifically for the target:"}]}