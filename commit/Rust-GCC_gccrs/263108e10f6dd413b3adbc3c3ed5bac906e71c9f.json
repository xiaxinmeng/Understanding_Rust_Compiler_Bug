{"sha": "263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzMTA4ZTEwZjZkZDQxM2IzYWRiYzNjM2VkNWJhYzkwNmU3MWM5Zg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2006-07-13T22:58:07Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2006-07-13T22:58:07Z"}, "message": "sourcebuild.texi (Test Directives): Document dg-shouldfail.\n\ngcc:\n\n\t* doc/sourcebuild.texi (Test Directives): Document dg-shouldfail.\n\ngcc/testsuite:\n\n\t* lib/gcc-dg.exp (tool_load): Wrapper to support shouldfail tests.\n\t(dg-test): Support shouldfail tests.\n\t* lib/target-supports-dg.exp (dg-shouldfail): New.\n\t* gcc.test-framework/test-framework.awk: Handle shouldfail tests.\n\t* gcc.test-framework/dg-do-run-sf-exp-F.c: New test.\n\t* gcc.test-framework/dg-do-run-sf-exp-P.c: New test.\n\t* gcc.test-framework/dg-do-run-sft-exp-F.c: New test.\n\t* gcc.test-framework/dg-do-run-sft-exp-P.c: New test.\n\t* gcc.test-framework/dg-dox-run-sf-exp-XF.c: New test.\n\t* gcc.test-framework/dg-dox-run-sf-exp-XP.c: New test.\n\nFrom-SVN: r115424", "tree": {"sha": "16059cfdc327445328728cd69a9c3c6758161309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16059cfdc327445328728cd69a9c3c6758161309"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/comments", "author": null, "committer": null, "parents": [{"sha": "43e6b77cbbeba36b1d15bf368aeb2e86d8fec26e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43e6b77cbbeba36b1d15bf368aeb2e86d8fec26e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43e6b77cbbeba36b1d15bf368aeb2e86d8fec26e"}], "stats": {"total": 137, "additions": 136, "deletions": 1}, "files": [{"sha": "6dca0bf66773df613fed6fcf26b78bdabde84a5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -1,3 +1,7 @@\n+2006-07-13  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/sourcebuild.texi (Test Directives): Document dg-shouldfail.\n+\n 2006-07-13  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (cgraph_varpool_analyze_pending_decls): Call"}, {"sha": "d7f18c5c15465be6fb10abe7b35e68606b054fb3", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -1004,6 +1004,10 @@ Skip the test if the test target, including current multilib flags,\n is not covered by the effective-target keyword.\n This directive must appear after any @code{dg-do} directive in the test.\n \n+@item  @{ dg-shouldfail @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}\n+Expect the test executable to return a nonzero exit status if the\n+conditions (which are the same as for @code{dg-skip-if}) are met.\n+\n @item @{ dg-error @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}\n This DejaGnu directive appears on a source line that is expected to get\n an error message, or else specifies the source line associated with the"}, {"sha": "8b711994d3d23628bde3f208fbec4a45e7c6f243", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -1,3 +1,16 @@\n+2006-07-13  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* lib/gcc-dg.exp (tool_load): Wrapper to support shouldfail tests.\n+\t(dg-test): Support shouldfail tests.\n+\t* lib/target-supports-dg.exp (dg-shouldfail): New.\n+\t* gcc.test-framework/test-framework.awk: Handle shouldfail tests.\n+\t* gcc.test-framework/dg-do-run-sf-exp-F.c: New test.\n+\t* gcc.test-framework/dg-do-run-sf-exp-P.c: New test.\n+\t* gcc.test-framework/dg-do-run-sft-exp-F.c: New test.\n+\t* gcc.test-framework/dg-do-run-sft-exp-P.c: New test.\n+\t* gcc.test-framework/dg-dox-run-sf-exp-XF.c: New test.\n+\t* gcc.test-framework/dg-dox-run-sf-exp-XP.c: New test.\n+\n 2006-07-13  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.target/i386/memcpy-1.c: New."}, {"sha": "076c14c5260925fc5e2f6b73887ba0221418535b", "filename": "gcc/testsuite/gcc.test-framework/dg-do-run-sf-exp-F.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sf-exp-F.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sf-exp-F.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sf-exp-F.c?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"required comment\" } */\n+\n+int\n+main ()\n+{\n+    return 0;  /* We expect nonzero, so this fails.  */\n+}"}, {"sha": "6e9dd849c59bec5251733f7d9d5f33dc9123debc", "filename": "gcc/testsuite/gcc.test-framework/dg-do-run-sf-exp-P.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sf-exp-P.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sf-exp-P.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sf-exp-P.c?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"required comment\" } */\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+    abort ();  /* We expect nonzero, so this passes.  */\n+}"}, {"sha": "8695bd66a2bbbf91f257ab27493d5bd3fbf7b570", "filename": "gcc/testsuite/gcc.test-framework/dg-do-run-sft-exp-F.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sft-exp-F.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sft-exp-F.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sft-exp-F.c?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"comment\" { unknown-*-* } { \"*\" } { \"\" } } */\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+    abort ();  /* Directive is ignored so we expect zero; this fails.  */\n+}"}, {"sha": "0695df9142b6bd8b0e883b5f8fac10e8784fb076", "filename": "gcc/testsuite/gcc.test-framework/dg-do-run-sft-exp-P.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sft-exp-P.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sft-exp-P.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sft-exp-P.c?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"comment\" { *-*-* } { \"*\" } { \"\" } } */\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+    abort ();  /* We expect nonzero exit, so this passes.  */\n+}"}, {"sha": "e5eae7775c4a4d83297d97b3a81ddaba5deefcf2", "filename": "gcc/testsuite/gcc.test-framework/dg-dox-run-sf-exp-XF.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-dox-run-sf-exp-XF.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-dox-run-sf-exp-XF.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-dox-run-sf-exp-XF.c?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run { xfail *-*-* } } */\n+/* { dg-shouldfail \"required comment\" } */\n+\n+int\n+main ()\n+{\n+    return 0;  /* We want nonzero but expect to fail; XFAIL.  */\n+}"}, {"sha": "59b5f8be21ff55d2a3ce8c7e91a32f54d53135e3", "filename": "gcc/testsuite/gcc.test-framework/dg-dox-run-sf-exp-XP.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-dox-run-sf-exp-XP.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-dox-run-sf-exp-XP.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-dox-run-sf-exp-XP.c?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run { xfail *-*-* } } */\n+/* { dg-shouldfail \"required comment\" } */\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+    abort ();  /* We want nonzero, but expect to fail; XPASS.  */\n+}"}, {"sha": "4c1436fe74d461100ecf5a6cf2fb15f76ca51e8c", "filename": "gcc/testsuite/gcc.test-framework/test-framework.awk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -3,7 +3,7 @@\n # of passing tests.\n #\n #\n-# Copyright (c) 2004, 2005 Free Software Foundation, Inc.\n+# Copyright (c) 2004, 2005, 2006 Free Software Foundation, Inc.\n #\n # This file is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -45,6 +45,8 @@ BEGIN\t\t\t{ skip = 1; passes = 0; fails = 0; }\n /^PASS.*sa.*-1.c.*(test for excess errors)/ { ignore(); next }\n # The other dox tests pass the compile step; ignore that message.\n /^PASS.*dox.*(test for excess errors)/ { ignore(); next }\n+# The sf tests pass the compile step; ignore that message.\n+/^PASS.*sf.*(test for excess errors)/ { ignore(); next }\n # Ignore lines that begin with comma.\n /^,/\t\t\t{ ignore(); next }\n # For tests of dg-output, ignore successful compilation."}, {"sha": "869f944b4a505e90b54e8801c8b9a8344e8c9719", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -186,6 +186,28 @@ proc gcc-dg-prune { system text } {\n     return $text\n }\n \n+# Replace ${tool}_load with a wrapper to provide for an expected nonzero\n+# exit status.  Multiple languages include this file so this handles them\n+# all, not just gcc.\n+if { [info procs ${tool}_load] != [list] \\\n+      && [info procs saved_${tool}_load] == [list] } {\n+    rename ${tool}_load saved_${tool}_load\n+\n+    proc ${tool}_load { program args } {\n+\tglobal tool\n+\tglobal shouldfail\n+\tset result [saved_${tool}_load $program $args]\n+\tif { $shouldfail != 0 } {\n+\t    switch [lindex $result 0] {\n+\t\t\"pass\" { set status \"fail\" }\n+\t\t\"fail\" { set status \"pass\" }\n+\t    }\n+\t    set result [list $status [lindex $result 1]]\n+\t}\n+\treturn $result\n+    }\n+}\n+\n # Utility routines.\n \n #\n@@ -436,12 +458,14 @@ if { [info procs saved-dg-test] == [list] } {\n \tglobal additional_prunes\n \tglobal errorInfo\n \tglobal compiler_conditional_xfail_data\n+\tglobal shouldfail\n \n \tif { [ catch { eval saved-dg-test $args } errmsg ] } {\n \t    set saved_info $errorInfo\n \t    set additional_files \"\"\n \t    set additional_sources \"\"\n \t    set additional_prunes \"\"\n+\t    set shouldfail 0\n \t    if [info exists compiler_conditional_xfail_data] {\n \t\tunset compiler_conditional_xfail_data\n \t    }\n@@ -450,6 +474,7 @@ if { [info procs saved-dg-test] == [list] } {\n \tset additional_files \"\"\n \tset additional_sources \"\"\n \tset additional_prunes \"\"\n+\tset shouldfail 0\n \tif [info exists compiler_conditional_xfail_data] {\n \t    unset compiler_conditional_xfail_data\n \t}"}, {"sha": "929f8bcf241503c1bd48d730b2e6832bf94c44a3", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263108e10f6dd413b3adbc3c3ed5bac906e71c9f/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=263108e10f6dd413b3adbc3c3ed5bac906e71c9f", "patch": "@@ -265,6 +265,37 @@ proc dg-xfail-if { args } {\n     }\n }\n \n+# Record whether the program is expected to return a nonzero status.\n+\n+set shouldfail 0\n+\n+proc dg-shouldfail { args } {\n+    # Don't bother if we're already skipping the test.\n+    upvar dg-do-what dg-do-what\n+    if { [lindex ${dg-do-what} 1] == \"N\" } {\n+      return\n+    }\n+\n+    global shouldfail\n+\n+    set args [lreplace $args 0 0]\n+    if { [llength $args] > 1 } {\n+\tset selector [list target [lindex $args 1]]\n+\tif { [dg-process-target $selector] == \"S\" } {\n+\t    # The target matches, now check the flags.  These variables\n+\t    # are defined in DejaGnu's dg-test, needed by check-flags.\n+\t    upvar dg-extra-tool-flags dg-extra-tool-flags\n+\t    upvar tool_flags tool_flags\n+\n+\t    if [check-flags $args] {\n+\t\tset shouldfail 1\n+\t    }\n+\t}\n+    } else {\n+\tset shouldfail 1\n+    }\n+}\n+\n # Intercept the call to the DejaGnu version of dg-process-target to\n # support use of an effective-target keyword in place of a list of\n # target triplets to xfail or skip a test."}]}