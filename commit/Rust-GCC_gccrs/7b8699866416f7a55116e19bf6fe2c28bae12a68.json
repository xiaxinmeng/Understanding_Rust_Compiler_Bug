{"sha": "7b8699866416f7a55116e19bf6fe2c28bae12a68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I4Njk5ODY2NDE2ZjdhNTUxMTZlMTliZjZmZTJjMjhiYWUxMmE2OA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-12T00:43:15Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-12T00:43:15Z"}, "message": "In libobjc/:\n\n        * objc/deprecated/objc_error.h: New file.\n        * objc/objc-api.h: Include deprecated/objc_error.h instead of\n        defining objc_error and related.\n        * error.c: New file.  Added _objc_abort function which replaces\n        objc_error.  No change in functionality as they both print an\n        error and abort.\n        * misc.c: File removed.  Code moved into memory.c and error.c.\n        * memory.c: New file.\n        * objc-private/error.h: New file.\n        * archive.c: Include objc-private/error.h and use _objc_abort\n        instead of objc_error everywhere.\n        * class.c: Same change.\n        * encoding.c: Same change.\n        * init.c: Same change, and simplified init_check_module_version.\n        * memory.c: Same change.\n        * sendmsg.c:  Same change.\n        * thr.c: Same change.\n        * Makefile.in (OBJ_DEPRECATED_H): Added objc_error.h.\n        (OBJ_H): Reordered list.\n        (OBJS): Removed misc.lo, added memory.lo and error.lo.\n        (OBJS_GC): Removed misc_gc.lo, added memory_gc.lo and error_gc.lo.\n        (misc_gc.lo): Rule removed.\n        (error_gc.lo): Rule added.\n        (memory_gc.lo): Rule added.\n\nFrom-SVN: r164223", "tree": {"sha": "e22bed6f4601015a5042c0e66fd318e63707468e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e22bed6f4601015a5042c0e66fd318e63707468e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b8699866416f7a55116e19bf6fe2c28bae12a68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8699866416f7a55116e19bf6fe2c28bae12a68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8699866416f7a55116e19bf6fe2c28bae12a68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8699866416f7a55116e19bf6fe2c28bae12a68/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "201fb1f2283994930d4bc07f9eaeaaf7d98052c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201fb1f2283994930d4bc07f9eaeaaf7d98052c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/201fb1f2283994930d4bc07f9eaeaaf7d98052c0"}], "stats": {"total": 591, "additions": 374, "deletions": 217}, "files": [{"sha": "0d46882a8ea900feb0b383fee8300a7dd8e7dada", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -1,3 +1,30 @@\n+2010-09-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/deprecated/objc_error.h: New file.\n+\t* objc/objc-api.h: Include deprecated/objc_error.h instead of\n+\tdefining objc_error and related.\n+\t* error.c: New file.  Added _objc_abort function which replaces\n+\tobjc_error.  No change in functionality as they both print an\n+\terror and abort.\n+\t* misc.c: File removed.  Code moved into memory.c and error.c.\n+\t* memory.c: New file.\n+\t* objc-private/error.h: New file.\n+\t* archive.c: Include objc-private/error.h and use _objc_abort\n+\tinstead of objc_error everywhere.\n+\t* class.c: Same change.\n+\t* encoding.c: Same change.\n+\t* init.c: Same change, and simplified init_check_module_version.\n+\t* memory.c: Same change.\n+\t* sendmsg.c:  Same change.\n+\t* thr.c: Same change.\n+\t* Makefile.in (OBJ_DEPRECATED_H): Added objc_error.h.\n+\t(OBJ_H): Reordered list.\n+\t(OBJS): Removed misc.lo, added memory.lo and error.lo.\n+\t(OBJS_GC): Removed misc_gc.lo, added memory_gc.lo and error_gc.lo.\n+\t(misc_gc.lo): Rule removed.\n+\t(error_gc.lo): Rule added.\n+\t(memory_gc.lo): Rule added.\n+\t\n 2010-09-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/objc.h (__GNU_LIBOBJC__): New #define providing an easy way"}, {"sha": "ac042accf964b69cde42b60f849e5fd5d0002fc3", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 54, "deletions": 18, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -147,18 +147,18 @@ OBJC_H = \\\n   objc.h \\\n   objc-exception.h \\\n   \\\n-  message.h \\\n-  hash.h \\\n-  objc-list.h \\\n-  sarray.h \\\n-  objc-api.h \\\n   NXConstStr.h \\\n   Object.h \\\n   Protocol.h \\\n   encoding.h \\\n-  typedstream.h \\\n+  hash.h \\\n+  message.h \\\n+  objc-api.h \\\n+  objc-decls.h \\\n+  objc-list.h \\\n+  sarray.h \\\n   thr.h \\\n-  objc-decls.h\n+  typedstream.h\n \n # User-visible header files containing deprecated APIs, from the\n # objc/deprecated directory\n@@ -167,6 +167,7 @@ OBJC_DEPRECATED_H = \\\n   MetaClass.h \\\n   Object.h \\\n   STR.h \\\n+  objc_error.h \\\n   objc_unexpected_exception.h \\\n   struct_objc_class.h \\\n   struct_objc_protocol.h \\\n@@ -175,16 +176,47 @@ OBJC_DEPRECATED_H = \\\n \n # Modules that comprise the runtime library.\n \n-OBJS =    archive.lo class.lo encoding.lo gc.lo hash.lo init.lo linking.lo \\\n-\t  misc.lo nil_method.lo NXConstStr.lo Object.lo objects.lo \\\n-\t  Protocol.lo sarray.lo selector.lo sendmsg.lo thr.lo \\\n-\t  exception.lo\n-\n-OBJS_GC = archive_gc.lo class_gc.lo encoding_gc.lo gc_gc.lo hash_gc.lo \\\n-\t  init_gc.lo linking_gc.lo misc_gc.lo nil_method_gc.lo \\\n-\t  NXConstStr_gc.lo Object_gc.lo objects_gc.lo Protocol_gc.lo \\\n-\t  sarray_gc.lo selector_gc.lo sendmsg_gc.lo thr_gc.lo \\\n-\t  exception_gc.lo\n+OBJS =  \\\n+   NXConstStr.lo \\\n+   Object.lo \\\n+   Protocol.lo \\\n+   archive.lo \\\n+   class.lo \\\n+   encoding.lo \\\n+   error.lo \\\n+   gc.lo \\\n+   hash.lo \\\n+   init.lo \\\n+   linking.lo \\\n+   memory.lo \\\n+   nil_method.lo \\\n+   objects.lo \\\n+   sarray.lo \\\n+   selector.lo \\\n+   sendmsg.lo \\\n+   thr.lo \\\n+   exception.lo\n+\n+OBJS_GC = \\\n+   NXConstStr_gc.lo \\\n+   Object_gc.lo \\\n+   Protocol_gc.lo \\\n+   archive_gc.lo \\\n+   class_gc.lo \\\n+   encoding_gc.lo \\\n+   error_gc.lo \\\n+   gc_gc.lo \\\n+   hash_gc.lo \\\n+   init_gc.lo \\\n+   linking_gc.lo \\\n+   memory_gc.lo \\\n+   nil_method_gc.lo \\\n+   objects_gc.lo \\\n+   sarray_gc.lo \\\n+   selector_gc.lo \\\n+   sendmsg_gc.lo \\\n+   thr_gc.lo \\\n+   exception_gc.lo\n \n runtime-info.h: \n \techo \"\" > tmp-runtime.m\n@@ -208,6 +240,10 @@ encoding_gc.lo: encoding.c\n \t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n \t\t$(INCLUDES) $<\n \n+error_gc.lo: error.c\n+\t$(LIBTOOL_COMPILE) $(CC) -c $(ALL_CFLAGS) -o $@ $(OBJC_GCFLAGS) \\\n+\t\t$(INCLUDES) $<\n+\n gc.lo: gc.c\n \t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(INCLUDES) $<\n \n@@ -231,7 +267,7 @@ linking_gc.lo: linking.m\n \t$(LIBTOOL_COMPILE) $(CC) -fgnu-runtime -c -o $@ $(ALL_CFLAGS) \\\n \t\t$(OBJC_GCFLAGS) $(INCLUDES) $<\n \n-misc_gc.lo: misc.c\n+memory_gc.lo: memory.c\n \t$(LIBTOOL_COMPILE) $(CC) -c $(ALL_CFLAGS) -o $@ $(OBJC_GCFLAGS) \\\n \t\t$(INCLUDES) $<\n "}, {"sha": "9b46976fbf48337ca659416ac8e776ab4070163d", "filename": "libobjc/archive.c", "status": "modified", "additions": 34, "deletions": 49, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Farchive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Farchive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Farchive.c?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -22,7 +22,10 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+/* This file is entirely deprecated and will be removed.  */\n+\n #include \"objc-private/common.h\"\n+#include \"objc-private/error.h\"\n #include \"tconfig.h\"\n #include \"objc/objc.h\"\n #include \"objc/objc-api.h\"\n@@ -364,8 +367,7 @@ __objc_write_extension (struct objc_typed_stream *stream, unsigned char code)\n     }\n   else \n     {\n-      objc_error (nil, OBJC_ERR_BAD_OPCODE,\n-\t\t  \"__objc_write_extension: bad opcode %c\\n\", code);\n+      _objc_abort (\"__objc_write_extension: bad opcode %c\\n\", code);\n       return -1;\n     }\n }\n@@ -402,8 +404,7 @@ objc_write_root_object (struct objc_typed_stream *stream, id object)\n {\n   int len = 0;\n   if (stream->writing_root_p)\n-    objc_error (nil, OBJC_ERR_RECURSE_ROOT, \n-\t\t\"objc_write_root_object called recursively\");\n+    _objc_abort (\"objc_write_root_object called recursively\");\n   else\n     {\n       stream->writing_root_p = 1;\n@@ -527,9 +528,8 @@ objc_read_char (struct objc_typed_stream *stream, char *val)\n \t}\n \n       else\n-\tobjc_error (nil, OBJC_ERR_BAD_DATA,\n-\t\t    \"expected 8bit signed int, got %dbit int\",\n-\t\t    (int) (buf&_B_NUMBER)*8);\n+\t_objc_abort (\"expected 8bit signed int, got %dbit int\",\n+\t\t     (int) (buf&_B_NUMBER)*8);\n     }\n   return len;\n }\n@@ -549,9 +549,8 @@ objc_read_unsigned_char (struct objc_typed_stream *stream, unsigned char *val)\n \tlen = (*stream->read) (stream->physical, (char*)val, 1);\n \n       else\n-\tobjc_error (nil, OBJC_ERR_BAD_DATA,\n-\t\t    \"expected 8bit unsigned int, got %dbit int\",\n-\t\t    (int) (buf&_B_NUMBER)*8);\n+\t_objc_abort (\"expected 8bit unsigned int, got %dbit int\",\n+\t\t     (int) (buf&_B_NUMBER)*8);\n     }\n   return len;\n }\n@@ -571,8 +570,7 @@ objc_read_short (struct objc_typed_stream *stream, short *value)\n \t  int pos = 1;\n \t  int nbytes = buf[0] & _B_NUMBER;\n \t  if (nbytes > (int) sizeof (short))\n-\t    objc_error (nil, OBJC_ERR_BAD_DATA,\n-\t\t        \"expected short, got bigger (%dbits)\", nbytes*8);\n+\t    _objc_abort (\"expected short, got bigger (%dbits)\", nbytes*8);\n \t  len = (*stream->read) (stream->physical, (char*)buf + 1, nbytes);\n \t  (*value) = 0;\n \t  while (pos <= nbytes)\n@@ -600,8 +598,7 @@ objc_read_unsigned_short (struct objc_typed_stream *stream,\n \t  int pos = 1;\n \t  int nbytes = buf[0] & _B_NUMBER;\n \t  if (nbytes > (int) sizeof (short))\n-\t    objc_error (nil, OBJC_ERR_BAD_DATA,\n-\t\t        \"expected short, got int or bigger\");\n+\t    _objc_abort (\"expected short, got int or bigger\");\n \t  len = (*stream->read) (stream->physical, (char*)buf + 1, nbytes);\n \t  (*value) = 0;\n \t  while (pos <= nbytes)\n@@ -627,7 +624,7 @@ objc_read_int (struct objc_typed_stream *stream, int *value)\n \t  int pos = 1;\n \t  int nbytes = buf[0] & _B_NUMBER;\n \t  if (nbytes > (int) sizeof (int))\n-\t    objc_error (nil, OBJC_ERR_BAD_DATA, \"expected int, got bigger\");\n+\t    _objc_abort (\"expected int, got bigger\");\n \t  len = (*stream->read) (stream->physical, (char*)buf + 1, nbytes);\n \t  (*value) = 0;\n \t  while (pos <= nbytes)\n@@ -654,7 +651,7 @@ objc_read_long (struct objc_typed_stream *stream, long *value)\n \t  int pos = 1;\n \t  int nbytes = buf[0] & _B_NUMBER;\n \t  if (nbytes > (int) sizeof (long))\n-\t    objc_error (nil, OBJC_ERR_BAD_DATA, \"expected long, got bigger\");\n+\t    _objc_abort (\"expected long, got bigger\");\n \t  len = (*stream->read) (stream->physical, (char*)buf + 1, nbytes);\n \t  (*value) = 0;\n \t  while (pos <= nbytes)\n@@ -675,7 +672,7 @@ __objc_read_nbyte_uint (struct objc_typed_stream *stream,\n   unsigned char buf[sizeof (unsigned int) + 1];\n \n   if (nbytes > sizeof (int))\n-    objc_error (nil, OBJC_ERR_BAD_DATA, \"expected int, got bigger\");\n+    _objc_abort (\"expected int, got bigger\");\n \n   len = (*stream->read) (stream->physical, (char*)buf, nbytes);\n   (*val) = 0;\n@@ -712,7 +709,7 @@ __objc_read_nbyte_ulong (struct objc_typed_stream *stream,\n   unsigned char buf[sizeof (unsigned long) + 1];\n \n   if (nbytes > sizeof (long))\n-    objc_error (nil, OBJC_ERR_BAD_DATA, \"expected long, got bigger\");\n+    _objc_abort (\"expected long, got bigger\");\n \n   len = (*stream->read) (stream->physical, (char*)buf, nbytes);\n   (*val) = 0;\n@@ -793,8 +790,7 @@ objc_read_string (struct objc_typed_stream *stream,\n \tbreak;\n \t\n       default:\n-\tobjc_error (nil, OBJC_ERR_BAD_DATA,\n-\t\t    \"expected string, got opcode %c\\n\", (buf[0]&_B_CODE));\n+\t_objc_abort (\"expected string, got opcode %c\\n\", (buf[0]&_B_CODE));\n       }\n     }\n \n@@ -839,14 +835,13 @@ objc_read_object (struct objc_typed_stream *stream, id *object)\n \t  /* check null-byte */\n \t  len = (*stream->read) (stream->physical, (char*)buf, 1);\n \t  if (buf[0] != '\\0')\n-\t    objc_error (nil, OBJC_ERR_BAD_DATA,\n-\t\t        \"expected null-byte, got opcode %c\", buf[0]);\n+\t    _objc_abort (\"expected null-byte, got opcode %c\", buf[0]);\n \t}\n \n       else if ((buf[0]&_B_CODE) == _B_UCOMM)\n \t{\n \t  if (key)\n-\t    objc_error (nil, OBJC_ERR_BAD_KEY, \"cannot register use upcode...\");\n+\t    _objc_abort (\"cannot register use upcode...\");\n \t  len = __objc_read_nbyte_ulong (stream, (buf[0] & _B_VALUE), &key);\n \t  (*object) = objc_hash_value_for_key (stream->object_table,\n \t\t\t\t\t       LONG2PTR(key));\n@@ -866,15 +861,13 @@ objc_read_object (struct objc_typed_stream *stream, id *object)\n       else if (buf[0] == (_B_EXT | _BX_OBJROOT)) /* a root object */\n \t{\n \t  if (key)\n-\t    objc_error (nil, OBJC_ERR_BAD_KEY,\n-\t\t        \"cannot register root object...\");\n+\t    _objc_abort (\"cannot register root object...\");\n \t  len = objc_read_object (stream, object);\n \t  __objc_finish_read_root_object (stream);\n \t}\n \n       else\n-\tobjc_error (nil, OBJC_ERR_BAD_DATA,\n-\t\t    \"expected object, got opcode %c\", buf[0]);\n+\t_objc_abort (\"expected object, got opcode %c\", buf[0]);\n     }\n   return len;\n }\n@@ -917,18 +910,16 @@ objc_read_class (struct objc_typed_stream *stream, Class *class)\n       else if ((buf[0]&_B_CODE) == _B_UCOMM)\n \t{\n \t  if (key)\n-\t    objc_error (nil, OBJC_ERR_BAD_KEY, \"cannot register use upcode...\");\n+\t    _objc_abort (\"cannot register use upcode...\");\n \t  len = __objc_read_nbyte_ulong (stream, (buf[0] & _B_VALUE), &key);\n \t  *class = objc_hash_value_for_key (stream->stream_table,\n \t\t\t\t\t    LONG2PTR(key));\n \t  if (! *class)\n-\t    objc_error (nil, OBJC_ERR_BAD_CLASS,\n-\t\t        \"cannot find class for key %lu\", key);\n+\t    _objc_abort (\"cannot find class for key %lu\", key);\n \t}\n \n       else\n-\tobjc_error (nil, OBJC_ERR_BAD_DATA,\n-\t\t    \"expected class, got opcode %c\", buf[0]);\n+\t_objc_abort (\"expected class, got opcode %c\", buf[0]);\n     }\n   return len;\n }\n@@ -974,15 +965,14 @@ objc_read_selector (struct objc_typed_stream *stream, SEL* selector)\n       else if ((buf[0]&_B_CODE) == _B_UCOMM)\n \t{\n \t  if (key)\n-\t    objc_error (nil, OBJC_ERR_BAD_KEY, \"cannot register use upcode...\");\n+\t    _objc_abort (\"cannot register use upcode...\");\n \t  len = __objc_read_nbyte_ulong (stream, (buf[0] & _B_VALUE), &key);\n \t  (*selector) = objc_hash_value_for_key (stream->stream_table, \n \t\t\t\t\t\t LONG2PTR(key));\n \t}\n \n       else\n-\tobjc_error (nil, OBJC_ERR_BAD_DATA,\n-\t\t    \"expected selector, got opcode %c\", buf[0]);\n+\t_objc_abort (\"expected selector, got opcode %c\", buf[0]);\n     }\n   return len;\n }\n@@ -1082,8 +1072,7 @@ objc_write_type (TypedStream *stream, const char *type, const void *data)\n \n   default:\n     {\n-      objc_error (nil, OBJC_ERR_BAD_TYPE,\n-\t\t  \"objc_write_type: cannot parse typespec: %s\\n\", type);\n+      _objc_abort (\"objc_write_type: cannot parse typespec: %s\\n\", type);\n       return 0;\n     }\n   }\n@@ -1178,8 +1167,7 @@ objc_read_type(TypedStream *stream, const char *type, void *data)\n \n   default:\n     {\n-      objc_error (nil, OBJC_ERR_BAD_TYPE,\n-\t\t  \"objc_read_type: cannot parse typespec: %s\\n\", type);\n+      _objc_abort (\"objc_read_type: cannot parse typespec: %s\\n\", type);\n       return 0;\n     }\n   }\n@@ -1276,13 +1264,12 @@ objc_write_types (TypedStream *stream, const char *type, ...)\n \t  res = objc_write_array (stream, t, len, va_arg (args, void *));\n \t  t = objc_skip_typespec (t);\n \t  if (*t != _C_ARY_E)\n-\t    objc_error (nil, OBJC_ERR_BAD_TYPE, \"expected `]', got: %s\", t);\n+\t    _objc_abort (\"expected `]', got: %s\", t);\n \t}\n \tbreak; \n \t\n       default:\n-\tobjc_error (nil, OBJC_ERR_BAD_TYPE, \n-\t\t    \"objc_write_types: cannot parse typespec: %s\\n\", type);\n+\t_objc_abort (\"objc_write_types: cannot parse typespec: %s\\n\", type);\n       }\n     }\n   va_end(args);\n@@ -1368,13 +1355,12 @@ objc_read_types(TypedStream *stream, const char *type, ...)\n \t  res = objc_read_array (stream, t, len, va_arg (args, void *));\n \t  t = objc_skip_typespec (t);\n \t  if (*t != _C_ARY_E)\n-\t    objc_error (nil, OBJC_ERR_BAD_TYPE, \"expected `]', got: %s\", t);\n+\t    _objc_abort (\"expected `]', got: %s\", t);\n \t}\n \tbreak; \n \t\n       default:\n-\tobjc_error (nil, OBJC_ERR_BAD_TYPE, \n-\t\t    \"objc_read_types: cannot parse typespec: %s\\n\", type);\n+\t_objc_abort (\"objc_read_types: cannot parse typespec: %s\\n\", type);\n       }\n     }\n   va_end (args);\n@@ -1446,7 +1432,7 @@ __objc_no_write (FILE *file __attribute__ ((__unused__)),\n \t\t const char *data __attribute__ ((__unused__)),\n \t\t int len __attribute__ ((__unused__)))\n {\n-  objc_error (nil, OBJC_ERR_NO_WRITE, \"TypedStream not open for writing\");\n+  _objc_abort (\"TypedStream not open for writing\");\n   return 0;\n }\n \n@@ -1455,7 +1441,7 @@ __objc_no_read (FILE *file __attribute__ ((__unused__)),\n \t\tconst char *data __attribute__ ((__unused__)),\n \t\tint len __attribute__ ((__unused__)))\n {\n-  objc_error (nil, OBJC_ERR_NO_READ, \"TypedStream not open for reading\");\n+  _objc_abort (\"TypedStream not open for reading\");\n   return 0;\n }\n \n@@ -1470,8 +1456,7 @@ __objc_read_typed_stream_signature (TypedStream *stream)\n     ;\n   sscanf (buffer, \"GNU TypedStream %d\", &stream->version);\n   if (stream->version != OBJC_TYPED_STREAM_VERSION)\n-    objc_error (nil, OBJC_ERR_STREAM_VERSION,\n-\t\t\"cannot handle TypedStream version %d\", stream->version);\n+    _objc_abort (\"cannot handle TypedStream version %d\", stream->version);\n   return 1;\n }\n "}, {"sha": "76f9e8feecda0a7bf25604d134ad8211f1fd8d19", "filename": "libobjc/class.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fclass.c?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -88,6 +88,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   structures is freeing data when is removed from the structures.  */\n \n #include \"objc-private/common.h\"\n+#include \"objc-private/error.h\"\n #include \"objc/objc.h\"\n #include \"objc/objc-api.h\"\n #include \"objc/thr.h\"\n@@ -500,8 +501,9 @@ objc_get_class (const char *name)\n   if (class)\n     return class;\n   \n-  objc_error (nil, OBJC_ERR_BAD_CLASS, \n-              \"objc runtime: cannot find class %s\\n\", name);\n+  /* FIXME: Should we abort the program here ?  */\n+  _objc_abort (\"objc runtime: cannot find class %s\\n\", name);\n+\n   return 0;\n }\n "}, {"sha": "c0d79d9f349cd5653898433475dc16850271c31d", "filename": "libobjc/encoding.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -27,7 +27,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* FIXME: This file has no business including tm.h.  */\n \n+/* FIXME: This file contains functions that will abort the entire\n+   program if they fail.  Is that really needed ?\n+*/\n+\n #include \"objc-private/common.h\"\n+#include \"objc-private/error.h\"\n #include \"tconfig.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n@@ -316,16 +321,19 @@ objc_sizeof_type (const char *type)\n \t    \n \t    default:\n \t      {\n-\t\tobjc_error (nil, OBJC_ERR_BAD_TYPE, \"unknown complex type %s\\n\",\n-\t\t\t    type);\n+\t\t/* FIXME: Is this so bad that we have to abort the\n+\t\t   entire program ?  (it applies to all the other\n+\t\t   _objc_abort calls in this file).\n+\t\t*/\n+\t\t_objc_abort (\"unknown complex type %s\\n\", type);\n \t\treturn 0;\n \t      }\n \t}\n     }\n \n   default:\n     {\n-      objc_error (nil, OBJC_ERR_BAD_TYPE, \"unknown type %s\\n\", type);\n+      _objc_abort (\"unknown type %s\\n\", type);\n       return 0;\n     }\n   }\n@@ -491,16 +499,15 @@ objc_alignof_type (const char *type)\n \t    \n \t    default:\n \t      {\n-\t\tobjc_error (nil, OBJC_ERR_BAD_TYPE, \"unknown complex type %s\\n\",\n-\t\t\t    type);\n+\t\t_objc_abort (\"unknown complex type %s\\n\", type);\n \t\treturn 0;\n \t      }\n \t}\n     }\n \n   default:\n     {\n-      objc_error (nil, OBJC_ERR_BAD_TYPE, \"unknown type %s\\n\", type);\n+      _objc_abort (\"unknown type %s\\n\", type);\n       return 0;\n     }\n   }\n@@ -643,7 +650,7 @@ objc_skip_typespec (const char *type)\n       return ++type;\n     else\n       {\n-\tobjc_error (nil, OBJC_ERR_BAD_TYPE, \"bad array type %s\\n\", type);\n+\t_objc_abort (\"bad array type %s\\n\", type);\n \treturn 0;\n       }\n \n@@ -684,7 +691,7 @@ objc_skip_typespec (const char *type)\n \n   default:\n     {\n-      objc_error (nil, OBJC_ERR_BAD_TYPE, \"unknown type %s\\n\", type);\n+      _objc_abort (\"unknown type %s\\n\", type);\n       return 0;\n     }\n   }\n@@ -882,9 +889,8 @@ objc_layout_structure (const char *type,\n \n   if (*type != _C_UNION_B && *type != _C_STRUCT_B)\n     {\n-      objc_error (nil, OBJC_ERR_BAD_TYPE,\n-                 \"record (or union) type expected in objc_layout_structure, got %s\\n\",\n-                 type);\n+      _objc_abort (\"record (or union) type expected in objc_layout_structure, got %s\\n\",\n+\t\t   type);\n     }\n \n   type ++;"}, {"sha": "0dc8fd8dae0f9b84be4345c1cdbfc7150bcf5d41", "filename": "libobjc/error.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Ferror.c?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -0,0 +1,99 @@\n+/* GNU Objective C Runtime Error Functions\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997, 2002, 2009, 2010\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"objc-private/common.h\"\n+#include \"objc-private/error.h\"\n+\n+/* __USE_FIXED_PROTOTYPES__ used to be required to get prototypes for\n+   malloc, free, etc. on some platforms.  It is unclear if we still\n+   need it, but it can't hurt.\n+*/\n+#define __USE_FIXED_PROTOTYPES__\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <stdarg.h>\n+\n+/* Prints an error message and aborts the program.  */\n+void\n+_objc_abort (const char *fmt, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, fmt);\n+  vfprintf (stderr, fmt, ap);\n+  abort ();\n+  va_end (ap);\n+}\n+\n+/* The rest of the file is deprecated.  */\n+#include \"objc/objc.h\"\n+#include \"objc/objc-api.h\"\n+\n+/*\n+** Error handler function\n+** NULL so that default is to just print to stderr\n+*/\n+static objc_error_handler _objc_error_handler = NULL;\n+\n+/* Trigger an objc error */\n+void\n+objc_error (id object, int code, const char *fmt, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, fmt);\n+  objc_verror (object, code, fmt, ap);\n+  va_end (ap);\n+}\n+\n+/* Trigger an objc error */\n+void\n+objc_verror (id object, int code, const char *fmt, va_list ap)\n+{\n+  BOOL result = NO;\n+\n+  /* Call the error handler if its there\n+     Otherwise print to stderr */\n+  if (_objc_error_handler)\n+    result = (*_objc_error_handler) (object, code, fmt, ap);\n+  else\n+    vfprintf (stderr, fmt, ap);\n+\n+  /* Continue if the error handler says its ok\n+     Otherwise abort the program */\n+  if (result)\n+    return;\n+  else\n+    abort ();\n+}\n+\n+/* Set the error handler */\n+objc_error_handler\n+objc_set_error_handler (objc_error_handler func)\n+{\n+  objc_error_handler temp = _objc_error_handler;\n+  _objc_error_handler = func;\n+  return temp;\n+}"}, {"sha": "de624cf79c16766813fb63017f334ec22e896af8", "filename": "libobjc/init.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -25,6 +25,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"objc-private/common.h\"\n+#include \"objc-private/error.h\"\n #include \"objc/objc.h\"\n #include \"objc/objc-api.h\"\n #include \"objc/thr.h\"\n@@ -824,17 +825,8 @@ init_check_module_version (Module_t module)\n {\n   if ((module->version != OBJC_VERSION) || (module->size != sizeof (Module)))\n     {\n-      int code;\n-\n-      if (module->version > OBJC_VERSION)\n-\tcode = OBJC_ERR_OBJC_VERSION;\n-      else if (module->version < OBJC_VERSION)\n-\tcode = OBJC_ERR_GCC_VERSION;\n-      else\n-\tcode = OBJC_ERR_MODULE_SIZE;\n-\n-      objc_error (nil, code, \"Module %s version %d doesn't match runtime %d\\n\",\n-\t\t  module->name, (int)module->version, OBJC_VERSION);\n+      _objc_abort (\"Module %s version %d doesn't match runtime %d\\n\",\n+\t\t   module->name, (int)module->version, OBJC_VERSION);\n     }\n }\n \n@@ -876,11 +868,10 @@ __objc_init_protocols (struct objc_protocol_list *protos)\n \t}\n       else if (protos->list[i]->class_pointer != proto_class)\n \t{\n-\t  objc_error (nil, OBJC_ERR_PROTOCOL_VERSION,\n-\t\t     \"Version %d doesn't match runtime protocol version %d\\n\",\n-\t\t     (int) ((char *) protos->list[i]->class_pointer\n-\t\t\t    - (char *) 0),\n-\t\t     PROTOCOL_VERSION);\n+\t  _objc_abort (\"Version %d doesn't match runtime protocol version %d\\n\",\n+\t\t       (int) ((char *) protos->list[i]->class_pointer\n+\t\t\t      - (char *) 0),\n+\t\t       PROTOCOL_VERSION);\n \t}\n     }\n "}, {"sha": "2d27fa5dce3b86bfd242b4443fafd1893d4cf926", "filename": "libobjc/libobjc.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Flibobjc.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Flibobjc.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Flibobjc.def?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -16,6 +16,8 @@\n ;  You should have received a copy of the GNU General Public License along with\n ;  GCC; see the file COPYING3.  If not, see <http://www.gnu.org/licenses/>.\n \n+; FIXME: This file needs to be updated or removed\n+\n LIBRARY libobjc\n EXPORTS\n search_for_method_in_list"}, {"sha": "2cb4dd360d0cc7b9818b81af641239a010fc3f4a", "filename": "libobjc/memory.c", "status": "renamed", "additions": 24, "deletions": 67, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fmemory.c?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -1,5 +1,5 @@\n-/* GNU Objective C Runtime Miscellaneous \n-   Copyright (C) 1993, 1994, 1995, 1996, 1997, 2002, 2009\n+/* GNU Objective C Runtime Memory allocation functions\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997, 2002, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup\n \n@@ -25,6 +25,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"objc-private/common.h\"\n+#include \"objc-private/error.h\"\n \n /* __USE_FIXED_PROTOTYPES__ used to be required to get prototypes for\n    malloc, free, etc. on some platforms.  It is unclear if we still\n@@ -38,65 +39,18 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc-private/runtime.h\"\n \n /*\n-** Error handler function\n-** NULL so that default is to just print to stderr\n-*/\n-static objc_error_handler _objc_error_handler = NULL;\n-\n-/* Trigger an objc error */\n-void\n-objc_error (id object, int code, const char *fmt, ...)\n-{\n-  va_list ap;\n-\n-  va_start (ap, fmt);\n-  objc_verror (object, code, fmt, ap);\n-  va_end (ap);\n-}\n-\n-/* Trigger an objc error */\n-void\n-objc_verror (id object, int code, const char *fmt, va_list ap)\n-{\n-  BOOL result = NO;\n-\n-  /* Call the error handler if its there\n-     Otherwise print to stderr */\n-  if (_objc_error_handler)\n-    result = (*_objc_error_handler) (object, code, fmt, ap);\n-  else\n-    vfprintf (stderr, fmt, ap);\n-\n-  /* Continue if the error handler says its ok\n-     Otherwise abort the program */\n-  if (result)\n-    return;\n-  else\n-    abort ();\n-}\n-\n-/* Set the error handler */\n-objc_error_handler\n-objc_set_error_handler (objc_error_handler func)\n-{\n-  objc_error_handler temp = _objc_error_handler;\n-  _objc_error_handler = func;\n-  return temp;\n-}\n-\n-/*\n-** Standard functions for memory allocation and disposal.\n-** Users should use these functions in their ObjC programs so\n-** that they work properly with garbage collectors as well as\n-** can take advantage of the exception/error handling available.\n+  Standard functions for memory allocation and disposal.  Users should\n+  use these functions in their ObjC programs so that they work\n+  properly with garbage collectors as well as can take advantage of\n+  the exception/error handling available.\n */\n \n void *\n objc_malloc (size_t size)\n {\n   void *res = (void *) (*_objc_malloc) (size);\n   if (! res)\n-    objc_error (nil, OBJC_ERR_MEMORY, \"Virtual memory exhausted\\n\");\n+    _objc_abort (\"Virtual memory exhausted\\n\");\n   return res;\n }\n \n@@ -105,7 +59,7 @@ objc_atomic_malloc (size_t size)\n {\n   void *res = (void *) (*_objc_atomic_malloc) (size);\n   if (! res)\n-    objc_error (nil, OBJC_ERR_MEMORY, \"Virtual memory exhausted\\n\");\n+    _objc_abort (\"Virtual memory exhausted\\n\");\n   return res;\n }\n \n@@ -114,7 +68,7 @@ objc_valloc (size_t size)\n {\n   void *res = (void *) (*_objc_valloc) (size);\n   if (! res)\n-    objc_error (nil, OBJC_ERR_MEMORY, \"Virtual memory exhausted\\n\");\n+    _objc_abort (\"Virtual memory exhausted\\n\");\n   return res;\n }\n \n@@ -123,7 +77,7 @@ objc_realloc (void *mem, size_t size)\n {\n   void *res = (void *) (*_objc_realloc) (mem, size);\n   if (! res)\n-    objc_error (nil, OBJC_ERR_MEMORY, \"Virtual memory exhausted\\n\");\n+    _objc_abort (\"Virtual memory exhausted\\n\");\n   return res;\n }\n \n@@ -132,7 +86,7 @@ objc_calloc (size_t nelem, size_t size)\n {\n   void *res = (void *) (*_objc_calloc) (nelem, size);\n   if (! res)\n-    objc_error (nil, OBJC_ERR_MEMORY, \"Virtual memory exhausted\\n\");\n+    _objc_abort (\"Virtual memory exhausted\\n\");\n   return res;\n }\n \n@@ -143,25 +97,28 @@ objc_free (void *mem)\n }\n \n /*\n-** Hook functions for memory allocation and disposal.\n-** This makes it easy to substitute garbage collection systems\n-** such as Boehm's GC by assigning these function pointers\n-** to the GC's allocation routines.  By default these point\n-** to the ANSI standard malloc, realloc, free, etc.\n-**\n-** Users should call the normal objc routines above for\n-** memory allocation and disposal within their programs.\n+  Hook functions for memory allocation and disposal.  This makes it\n+  easy to substitute garbage collection systems such as Boehm's GC by\n+  assigning these function pointers to the GC's allocation routines.\n+  By default these point to the ANSI standard malloc, realloc, free,\n+  etc.\n+\n+  Users should call the normal objc routines above for memory\n+  allocation and disposal within their programs.\n */\n \n #if OBJC_WITH_GC\n #include <gc.h>\n \n+/* FIXME: The following sounds pointless because the GC_malloc\n+   documentation says that it returns memory that is already zeroed!\n+*/\n static void *\n GC_calloc (size_t nelem, size_t size)\n {\n   void *p = GC_malloc (nelem * size);\n   if (! p)\n-    objc_error (nil, OBJC_ERR_MEMORY, \"Virtual memory exhausted!\\n\");\n+    _objc_abort (\"Virtual memory exhausted!\\n\");\n \n   memset (p, 0, nelem * size);\n   return p;", "previous_filename": "libobjc/misc.c"}, {"sha": "2df9cb733ec2602e78e02db14c7ba86419c13a15", "filename": "libobjc/objc-private/error.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fobjc-private%2Ferror.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fobjc-private%2Ferror.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Ferror.h?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -0,0 +1,37 @@\n+/* GNU Objective C Runtime Common Private Definitions\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+   Contributed by Nicola Pero\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under the\n+terms of the GNU General Public License as published by the Free Software\n+Foundation; either version 3, or (at your option) any later version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n+details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef __objc_private_error_INCLUDE_GNU\n+#define __objc_private_error_INCLUDE_GNU\n+\n+/* Prints an unrecoverable error to stderr, then aborts the program.\n+   This should only be used for errors that really are unrecorevable:\n+   failure to allocate memory, and failure to load an Objective-C\n+   module.  All other usages of this function should be converted into\n+   some milder type of error.\n+*/\n+void\n+_objc_abort (const char *fmt, ...);\n+\n+#endif /* __objc_private_error_INCLUDE_GNU */"}, {"sha": "7a7ebe941b29fa5b73bad7ecb4896fda36bc3657", "filename": "libobjc/objc/deprecated/objc_error.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fobjc%2Fdeprecated%2Fobjc_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fobjc%2Fdeprecated%2Fobjc_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fobjc_error.h?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -0,0 +1,56 @@\n+/* This API is incredibly limited and unsophisticated.  objc_error()\n+   generally causes the program to abort, so it should only be used\n+   when something so dramatic happens that it could be pointless to\n+   continue.  Only two cases I can think of: failure to allocate new\n+   memory or failure to load an Objective-C module.\n+*/\n+/* Error handling\n+  \n+   Call objc_error() or objc_verror() to record an error; this error\n+   routine will generally exit the program but not necessarily if the\n+   user has installed his own error handler.\n+  \n+   Call objc_set_error_handler to assign your own function for\n+   handling errors.  The function should return YES if it is ok\n+   to continue execution, or return NO or just abort if the\n+   program should be stopped.  The default error handler is just to\n+   print a message on stderr.\n+  \n+   The error handler function should be of type objc_error_handler\n+   The first parameter is an object instance of relevance.\n+   The second parameter is an error code.\n+   The third parameter is a format string in the printf style.\n+   The fourth parameter is a variable list of arguments.  */\n+void objc_error(id object, int code, const char* fmt, ...);\n+void objc_verror(id object, int code, const char* fmt, va_list ap);\n+typedef BOOL (*objc_error_handler)(id, int code, const char *fmt, va_list ap);\n+objc_error_handler objc_set_error_handler(objc_error_handler func);\n+\n+/* Error codes\n+   These are used by the runtime library, and your\n+   error handling may use them to determine if the error is\n+   hard or soft thus whether execution can continue or abort.  */\n+#define OBJC_ERR_UNKNOWN 0             /* Generic error */\n+\n+#define OBJC_ERR_OBJC_VERSION 1        /* Incorrect runtime version */\n+#define OBJC_ERR_GCC_VERSION 2         /* Incorrect compiler version */\n+#define OBJC_ERR_MODULE_SIZE 3         /* Bad module size */\n+#define OBJC_ERR_PROTOCOL_VERSION 4    /* Incorrect protocol version */\n+\n+#define OBJC_ERR_MEMORY 10             /* Out of memory */\n+\n+#define OBJC_ERR_RECURSE_ROOT 20       /* Attempt to archive the root\n+\t\t\t\t\t  object more than once. */\n+#define OBJC_ERR_BAD_DATA 21           /* Didn't read expected data */\n+#define OBJC_ERR_BAD_KEY 22            /* Bad key for object */\n+#define OBJC_ERR_BAD_CLASS 23          /* Unknown class */\n+#define OBJC_ERR_BAD_TYPE 24           /* Bad type specification */\n+#define OBJC_ERR_NO_READ 25            /* Cannot read stream */\n+#define OBJC_ERR_NO_WRITE 26           /* Cannot write stream */\n+#define OBJC_ERR_STREAM_VERSION 27     /* Incorrect stream version */\n+#define OBJC_ERR_BAD_OPCODE 28         /* Bad opcode */\n+\n+#define OBJC_ERR_UNIMPLEMENTED 30      /* Method is not implemented */\n+\n+#define OBJC_ERR_BAD_STATE 40          /* Bad thread state */\n+"}, {"sha": "89c5fcd9f3b7f9849d6d2b26564561629cab9d7a", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -83,55 +83,7 @@ struct objc_method_description\n #define _C_COMPLEX   'j'\n \n \n-/* Error handling\n-  \n-   Call objc_error() or objc_verror() to record an error; this error\n-   routine will generally exit the program but not necessarily if the\n-   user has installed his own error handler.\n-  \n-   Call objc_set_error_handler to assign your own function for\n-   handling errors.  The function should return YES if it is ok\n-   to continue execution, or return NO or just abort if the\n-   program should be stopped.  The default error handler is just to\n-   print a message on stderr.\n-  \n-   The error handler function should be of type objc_error_handler\n-   The first parameter is an object instance of relevance.\n-   The second parameter is an error code.\n-   The third parameter is a format string in the printf style.\n-   The fourth parameter is a variable list of arguments.  */\n-extern void objc_error(id object, int code, const char* fmt, ...);\n-extern void objc_verror(id object, int code, const char* fmt, va_list ap);\n-typedef BOOL (*objc_error_handler)(id, int code, const char *fmt, va_list ap);\n-extern objc_error_handler objc_set_error_handler(objc_error_handler func);\n-\n-/* Error codes\n-   These are used by the runtime library, and your\n-   error handling may use them to determine if the error is\n-   hard or soft thus whether execution can continue or abort.  */\n-#define OBJC_ERR_UNKNOWN 0             /* Generic error */\n-\n-#define OBJC_ERR_OBJC_VERSION 1        /* Incorrect runtime version */\n-#define OBJC_ERR_GCC_VERSION 2         /* Incorrect compiler version */\n-#define OBJC_ERR_MODULE_SIZE 3         /* Bad module size */\n-#define OBJC_ERR_PROTOCOL_VERSION 4    /* Incorrect protocol version */\n-\n-#define OBJC_ERR_MEMORY 10             /* Out of memory */\n-\n-#define OBJC_ERR_RECURSE_ROOT 20       /* Attempt to archive the root\n-\t\t\t\t\t  object more than once. */\n-#define OBJC_ERR_BAD_DATA 21           /* Didn't read expected data */\n-#define OBJC_ERR_BAD_KEY 22            /* Bad key for object */\n-#define OBJC_ERR_BAD_CLASS 23          /* Unknown class */\n-#define OBJC_ERR_BAD_TYPE 24           /* Bad type specification */\n-#define OBJC_ERR_NO_READ 25            /* Cannot read stream */\n-#define OBJC_ERR_NO_WRITE 26           /* Cannot write stream */\n-#define OBJC_ERR_STREAM_VERSION 27     /* Incorrect stream version */\n-#define OBJC_ERR_BAD_OPCODE 28         /* Bad opcode */\n-\n-#define OBJC_ERR_UNIMPLEMENTED 30      /* Method is not implemented */\n-\n-#define OBJC_ERR_BAD_STATE 40          /* Bad thread state */\n+#include \"deprecated/objc_error.h\"\n \n \n /* For every class which happens to have statically allocated instances in"}, {"sha": "32d9dc7bea626417c10902fbec4b22dbcbcd86d4", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -29,6 +29,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    and friends.  */\n \n #include \"objc-private/common.h\"\n+#include \"objc-private/error.h\"\n #include \"tconfig.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n@@ -661,6 +662,7 @@ __objc_forward (id object, SEL sel, arglist_t args)\n \t      : \"instance\" ),\n              object->class_pointer->name, sel_get_name (sel));\n \n+    /* TODO: support for error: is surely deprecated ? */\n     err_sel = sel_get_any_uid (\"error:\");\n     if (__objc_responds_to (object, err_sel))\n       {\n@@ -670,7 +672,7 @@ __objc_forward (id object, SEL sel, arglist_t args)\n \n     /* The object doesn't respond to doesNotRecognize: or error:;  Therefore,\n        a default action is taken. */\n-    objc_error (object, OBJC_ERR_UNIMPLEMENTED, \"%s\\n\", msg);\n+    _objc_abort (\"%s\\n\", msg);\n \n     return 0;\n   }"}, {"sha": "50196e81c583ae932bb255044926e3eb3066e194", "filename": "libobjc/thr.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fthr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8699866416f7a55116e19bf6fe2c28bae12a68/libobjc%2Fthr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fthr.c?ref=7b8699866416f7a55116e19bf6fe2c28bae12a68", "patch": "@@ -23,6 +23,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"objc-private/common.h\"\n+#include \"objc-private/error.h\"\n #define _LIBOBJC\n /* The line below is needed for declarations of functions such as\n    pthread_mutexattr_settype, without which gthr-posix.h may fail to\n@@ -129,12 +130,16 @@ __objc_thread_detach_function (struct __objc_thread_start_state *istate)\n     if ((imp = (id (*) (id, SEL, id))objc_msg_lookup (object, selector)))\n \t(*imp) (object, selector, argument);\n     else\n-      objc_error (object, OBJC_ERR_UNIMPLEMENTED,\n-\t\t  \"objc_thread_detach called with bad selector.\\n\");\n+      {\n+\t/* FIXME: Should we abort here ? */\n+\t_objc_abort (\"objc_thread_detach called with bad selector.\\n\");\n+      }\n   }\n   else\n-    objc_error (nil, OBJC_ERR_BAD_STATE,\n-\t        \"objc_thread_detach called with NULL state.\\n\");\n+    {\n+      /* FIXME: Should we abort here ? */\n+      _objc_abort (\"objc_thread_detach called with NULL state.\\n\");\n+    }\n \n   /* Exit the thread */\n   objc_thread_exit ();"}]}