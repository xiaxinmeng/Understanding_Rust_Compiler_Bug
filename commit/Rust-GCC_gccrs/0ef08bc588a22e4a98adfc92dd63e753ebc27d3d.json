{"sha": "0ef08bc588a22e4a98adfc92dd63e753ebc27d3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVmMDhiYzU4OGEyMmU0YTk4YWRmYzkyZGQ2M2U3NTNlYmMyN2QzZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:16:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:16:59Z"}, "message": "hash-map-traits.h (unbounded_hashmap_traits): New class.\n\ngcc/\n\t* hash-map-traits.h (unbounded_hashmap_traits): New class.\n\t(unbounded_int_hashmap_traits): Likewise.\n\t* cfgexpand.c (part_traits): Use unbounded_int_hashmap_traits.\n\nFrom-SVN: r224975", "tree": {"sha": "5f307e170e4efeb85e02b752e687e921eae3eedf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f307e170e4efeb85e02b752e687e921eae3eedf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9654754bd9ab263c3d2a6e04bbd1a4dc36f9f280"}], "stats": {"total": 106, "additions": 87, "deletions": 19}, "files": [{"sha": "70f14f66ff91b281efb1ef172027b270e2824910", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ef08bc588a22e4a98adfc92dd63e753ebc27d3d", "patch": "@@ -1,3 +1,9 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-map-traits.h (unbounded_hashmap_traits): New class.\n+\t(unbounded_int_hashmap_traits): Likewise.\n+\t* cfgexpand.c (part_traits): Use unbounded_int_hashmap_traits.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* ipa-icf.h (symbol_compare_hash): New class."}, {"sha": "a2b9977ebb1f103e6b60acb4a21331332da2c1c1", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=0ef08bc588a22e4a98adfc92dd63e753ebc27d3d", "patch": "@@ -610,25 +610,7 @@ stack_var_cmp (const void *a, const void *b)\n   return 0;\n }\n \n-struct part_traits : default_hashmap_traits\n-{\n-  template<typename T>\n-    static bool\n-    is_deleted (T &e)\n-    { return e.m_value == reinterpret_cast<void *> (1); }\n-\n-  template<typename T> static bool is_empty (T &e) { return e.m_value == NULL; }\n-  template<typename T>\n-    static void\n-    mark_deleted (T &e)\n-    { e.m_value = reinterpret_cast<T> (1); }\n-\n-  template<typename T>\n-    static void\n-    mark_empty (T &e)\n-      { e.m_value = NULL; }\n-};\n-\n+struct part_traits : unbounded_int_hashmap_traits <size_t, bitmap> {};\n typedef hash_map<size_t, bitmap, part_traits> part_hashmap;\n \n /* If the points-to solution *PI points to variables that are in a partition"}, {"sha": "9cab0ec66c7464ef2ecc819445d0eb1b86fb237d", "filename": "gcc/hash-map-traits.h", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d/gcc%2Fhash-map-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef08bc588a22e4a98adfc92dd63e753ebc27d3d/gcc%2Fhash-map-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-traits.h?ref=0ef08bc588a22e4a98adfc92dd63e753ebc27d3d", "patch": "@@ -174,4 +174,84 @@ simple_hashmap_traits <H>::mark_deleted (T &entry)\n   H::mark_deleted (entry.m_key);\n }\n \n+/* Implement traits for a hash_map with values of type Value for cases\n+   in which the key cannot represent empty and deleted slots.  Instead\n+   record empty and deleted entries in Value.  Derived classes must\n+   implement the hash and equal_keys functions.  */\n+\n+template <typename Value>\n+struct unbounded_hashmap_traits\n+{\n+  template <typename T> static inline void remove (T &);\n+  template <typename T> static inline bool is_empty (const T &);\n+  template <typename T> static inline bool is_deleted (const T &);\n+  template <typename T> static inline void mark_empty (T &);\n+  template <typename T> static inline void mark_deleted (T &);\n+};\n+\n+template <typename Value>\n+template <typename T>\n+inline void\n+unbounded_hashmap_traits <Value>::remove (T &entry)\n+{\n+  default_hash_traits <Value>::remove (entry.m_value);\n+}\n+\n+template <typename Value>\n+template <typename T>\n+inline bool\n+unbounded_hashmap_traits <Value>::is_empty (const T &entry)\n+{\n+  return default_hash_traits <Value>::is_empty (entry.m_value);\n+}\n+\n+template <typename Value>\n+template <typename T>\n+inline bool\n+unbounded_hashmap_traits <Value>::is_deleted (const T &entry)\n+{\n+  return default_hash_traits <Value>::is_deleted (entry.m_value);\n+}\n+\n+template <typename Value>\n+template <typename T>\n+inline void\n+unbounded_hashmap_traits <Value>::mark_empty (T &entry)\n+{\n+  default_hash_traits <Value>::mark_empty (entry.m_value);\n+}\n+\n+template <typename Value>\n+template <typename T>\n+inline void\n+unbounded_hashmap_traits <Value>::mark_deleted (T &entry)\n+{\n+  default_hash_traits <Value>::mark_deleted (entry.m_value);\n+}\n+\n+/* Implement traits for a hash_map from integer type Key to Value in\n+   cases where Key has no spare values for recording empty and deleted\n+   slots.  */\n+\n+template <typename Key, typename Value>\n+struct unbounded_int_hashmap_traits : unbounded_hashmap_traits <Value>\n+{\n+  static inline hashval_t hash (Key);\n+  static inline bool equal_keys (Key, Key);\n+};\n+\n+template <typename Key, typename Value>\n+inline hashval_t\n+unbounded_int_hashmap_traits <Key, Value>::hash (Key k)\n+{\n+  return k;\n+}\n+\n+template <typename Key, typename Value>\n+inline bool\n+unbounded_int_hashmap_traits <Key, Value>::equal_keys (Key k1, Key k2)\n+{\n+  return k1 == k2;\n+}\n+\n #endif // HASH_MAP_TRAITS_H"}]}