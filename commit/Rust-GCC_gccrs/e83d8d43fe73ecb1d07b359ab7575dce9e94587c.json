{"sha": "e83d8d43fe73ecb1d07b359ab7575dce9e94587c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzZDhkNDNmZTczZWNiMWQwN2IzNTlhYjc1NzVkY2U5ZTk0NTg3Yw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-06-26T17:39:40Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-06-26T17:39:40Z"}, "message": "re PR preprocessor/15933 (Caching of include files breaks compilation)\n\n\tPR 15933\n\tPartially revert patch of 2004-06-05.\n\t* files.c (search_cache): Remove pfile argument.  Don't check\n\tfor file that would be found by \"\" or <> search here...\n\t(_cpp_find_file): ...do it here, before calling find_file_in_dir.\n\tDo not apply directory-of-current-file correction to files\n\tfound by this check.  Rearrange code slightly.\n\nFrom-SVN: r83714", "tree": {"sha": "cafc671d99ae6f5359167bf98eee54375a7ba567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cafc671d99ae6f5359167bf98eee54375a7ba567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e83d8d43fe73ecb1d07b359ab7575dce9e94587c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83d8d43fe73ecb1d07b359ab7575dce9e94587c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e83d8d43fe73ecb1d07b359ab7575dce9e94587c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83d8d43fe73ecb1d07b359ab7575dce9e94587c/comments", "author": null, "committer": null, "parents": [{"sha": "ddc9ce91157ab23b35e1127c695feb5889f3ff53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc9ce91157ab23b35e1127c695feb5889f3ff53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc9ce91157ab23b35e1127c695feb5889f3ff53"}], "stats": {"total": 72, "additions": 31, "deletions": 41}, "files": [{"sha": "64f88ad854b75c3b2fe2e8cd4f49355d71e5a5e2", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83d8d43fe73ecb1d07b359ab7575dce9e94587c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83d8d43fe73ecb1d07b359ab7575dce9e94587c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e83d8d43fe73ecb1d07b359ab7575dce9e94587c", "patch": "@@ -1,3 +1,12 @@\n+2004-06-26  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPartially revert patch of 2004-06-05.\n+\t* files.c (search_cache): Remove pfile argument.  Don't check\n+\tfor file that would be found by \"\" or <> search here...\n+\t(_cpp_find_file): ...do it here, before calling find_file_in_dir.\n+\tDo not apply directory-of-current-file correction to files\n+\tfound by this check.  Rearrange code slightly.\n+\n 2004-06-21  Geoffrey Keating  <geoffk@apple.com>\n \n \t* files.c (should_stack_file): Correct swapped parameters to call"}, {"sha": "cd8d077ef71f294ba5bdc1be7cc18ae82b734f82", "filename": "libcpp/files.c", "status": "modified", "additions": 22, "deletions": 41, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83d8d43fe73ecb1d07b359ab7575dce9e94587c/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83d8d43fe73ecb1d07b359ab7575dce9e94587c/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=e83d8d43fe73ecb1d07b359ab7575dce9e94587c", "patch": "@@ -158,8 +158,7 @@ static struct cpp_dir *search_path_head (cpp_reader *, const char *fname,\n \t\t\t\t int angle_brackets, enum include_type);\n static const char *dir_name_of_file (_cpp_file *file);\n static void open_file_failed (cpp_reader *pfile, _cpp_file *file);\n-static struct file_hash_entry *search_cache (cpp_reader *pfile,\n-\t\t\t\t\t     struct file_hash_entry *head,\n+static struct file_hash_entry *search_cache (struct file_hash_entry *head,\n \t\t\t\t\t     const cpp_dir *start_dir);\n static _cpp_file *make_cpp_file (cpp_reader *, cpp_dir *, const char *fname);\n static cpp_dir *make_cpp_dir (cpp_reader *, const char *dir_name, int sysp);\n@@ -407,7 +406,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n \t\t\t      INSERT);\n \n   /* First check the cache before we resort to memory allocation.  */\n-  entry = search_cache (pfile, *hash_slot, start_dir);\n+  entry = search_cache (*hash_slot, start_dir);\n   if (entry)\n     return entry->u.file;\n \n@@ -416,6 +415,21 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n   /* Try each path in the include chain.  */\n   for (; !fake ;)\n     {\n+      if (file->dir == pfile->quote_include\n+\t  || file->dir == pfile->bracket_include)\n+\t{\n+\t  entry = search_cache (*hash_slot, file->dir);\n+\t  if (entry)\n+\t    {\n+\t      /* Found the same file again.  Record it as reachable\n+\t\t from this position, too.  */\n+\t      free ((char *) file->name);\n+\t      free (file);\n+\t      file = entry->u.file;\n+\t      goto found;\n+\t    }\n+\t}\n+\n       if (find_file_in_dir (pfile, file, &invalid_pch))\n \tbreak;\n \n@@ -438,19 +452,9 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n \t}\n     }\n \n-  if (entry)\n-    {\n-      /* Cache for START_DIR too, sharing the _cpp_file structure.  */\n-      free ((char *) file->name);\n-      free (file);\n-      file = entry->u.file;\n-    }\n-  else\n-    {\n-      /* This is a new file; put it in the list.  */\n-      file->next_file = pfile->all_files;\n-      pfile->all_files = file;\n-    }\n+  /* This is a new file; put it in the list.  */\n+  file->next_file = pfile->all_files;\n+  pfile->all_files = file;\n \n   /* If this file was found in the directory-of-the-current-file,\n      check whether that directory is reachable via one of the normal\n@@ -479,6 +483,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n \tstart_dir = proper_start_dir;\n     }\n \n+ found:\n   /* Store this new result in the hash table.  */\n   entry = new_file_hash_entry (pfile);\n   entry->next = *hash_slot;\n@@ -838,8 +843,7 @@ open_file_failed (cpp_reader *pfile, _cpp_file *file)\n /* Search in the chain beginning at HEAD for a file whose search path\n    started at START_DIR != NULL.  */\n static struct file_hash_entry *\n-search_cache (cpp_reader *pfile, struct file_hash_entry *head,\n-\t      const cpp_dir *start_dir)\n+search_cache (struct file_hash_entry *head, const cpp_dir *start_dir)\n {\n   struct file_hash_entry *p;\n \n@@ -848,29 +852,6 @@ search_cache (cpp_reader *pfile, struct file_hash_entry *head,\n   for (p = head; p; p = p->next)\n     if (p->start_dir == start_dir)\n       return p;\n-\n-  /* If the given location is for a search of the directory containing\n-     the current file, check for a match starting at the base of the\n-     quoted include chain.  */\n-  if (start_dir->next == pfile->quote_include)\n-    {\n-      start_dir = pfile->quote_include;\n-      for (p = head; p; p = p->next)\n-\tif (p->start_dir == start_dir)\n-\t  return p;\n-    }\n-\n-  /* If the given location is for a search from the base of the quoted\n-     include chain, check for a match starting at the base of the\n-     bracket include chain.  */\n-  if (start_dir == pfile->quote_include)\n-    {\n-      start_dir = pfile->bracket_include;\n-      for (p = head; p; p = p->next)\n-\tif (p->start_dir == start_dir)\n-\t  return p;\n-    }\n-\n   return 0;\n }\n "}]}