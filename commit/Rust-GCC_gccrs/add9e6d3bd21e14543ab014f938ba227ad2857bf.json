{"sha": "add9e6d3bd21e14543ab014f938ba227ad2857bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRkOWU2ZDNiZDIxZTE0NTQzYWIwMTRmOTM4YmEyMjdhZDI4NTdiZg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2006-02-18T21:09:35Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-02-18T21:09:35Z"}, "message": "re PR tree-optimization/25680 (Store CCP does not understand REALPART_EXPR < COMPLEX_CST >)\n\n2006-02-18  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/25680\n        * tree-ssa-ccp.c (ccp_fold): Handle store CCP of REALPART_EXPR and\n        IMAGPART_EXPR.\n2006-02-18  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/25680\n        * testsuite/gcc.dg/tree-ssa/complex-3.c: New test.\n\nFrom-SVN: r111251", "tree": {"sha": "685297e000b9ec35689a0cf68b160a3e8c08680c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/685297e000b9ec35689a0cf68b160a3e8c08680c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/add9e6d3bd21e14543ab014f938ba227ad2857bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add9e6d3bd21e14543ab014f938ba227ad2857bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/add9e6d3bd21e14543ab014f938ba227ad2857bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add9e6d3bd21e14543ab014f938ba227ad2857bf/comments", "author": null, "committer": null, "parents": [{"sha": "c8ca29f104d4e1294ecd13288d2e02b5f5e29e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ca29f104d4e1294ecd13288d2e02b5f5e29e42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8ca29f104d4e1294ecd13288d2e02b5f5e29e42"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "851936294ca50c455b4c996a3ec43891d8d1a9be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add9e6d3bd21e14543ab014f938ba227ad2857bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add9e6d3bd21e14543ab014f938ba227ad2857bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=add9e6d3bd21e14543ab014f938ba227ad2857bf", "patch": "@@ -1,3 +1,9 @@\n+2006-02-18  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/25680\n+\t* tree-ssa-ccp.c (ccp_fold): Handle store CCP of REALPART_EXPR and\n+\tIMAGPART_EXPR.\n+\n 2006-02-18  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-flow.h (struct var_ann_d): Rename field is_alias_tag to"}, {"sha": "f705bddb63996b4e43f9f5fe1dc973309e5e61e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add9e6d3bd21e14543ab014f938ba227ad2857bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add9e6d3bd21e14543ab014f938ba227ad2857bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=add9e6d3bd21e14543ab014f938ba227ad2857bf", "patch": "@@ -1,3 +1,8 @@\n+2006-02-18  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+        PR tree-opt/25680\n+        * testsuite/gcc.dg/tree-ssa/complex-3.c: New test.\n+\n 2006-02-18  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.dg/tree-ssa/20031106-1.c: Fix the final scan of the"}, {"sha": "a3544955f7016b3d7fdd44df124934c49a5d3c1c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/complex-3.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add9e6d3bd21e14543ab014f938ba227ad2857bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add9e6d3bd21e14543ab014f938ba227ad2857bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcomplex-3.c?ref=add9e6d3bd21e14543ab014f938ba227ad2857bf", "patch": "@@ -1,3 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+int g(_Complex int*);\n+int f(void)\n+{\n+  _Complex int t = 0;\n+  int i, j;\n+ __real__ t += 2;\n+ __imag__ t += 2;\n+  return g(&t);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__complex__\" 0 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+\n /* { dg-do compile } */\n /* { dg-options \"-O -fdump-tree-optimized\" } */\n "}, {"sha": "ec70c36d6d37d743674a7db5c791790f6fde84c9", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add9e6d3bd21e14543ab014f938ba227ad2857bf/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add9e6d3bd21e14543ab014f938ba227ad2857bf/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=add9e6d3bd21e14543ab014f938ba227ad2857bf", "patch": "@@ -855,11 +855,19 @@ ccp_fold (tree stmt)\n       /* If the RHS is a memory load, see if the VUSEs associated with\n \t it are a valid constant for that memory load.  */\n       prop_value_t *val = get_value_loaded_by (stmt, const_val);\n-      if (val && val->mem_ref\n-\t  && operand_equal_p (val->mem_ref, rhs, 0))\n-\treturn val->value;\n-      else\n-\treturn NULL_TREE;\n+      if (val && val->mem_ref)\n+\t{\n+\t  if (operand_equal_p (val->mem_ref, rhs, 0))\n+\t    return val->value;\n+\n+\t  /* If RHS is extracting REALPART_EXPR or IMAGPART_EXPR of a\n+\t     complex type with a known constant value, return it.  */\n+\t  if ((TREE_CODE (rhs) == REALPART_EXPR\n+\t       || TREE_CODE (rhs) == IMAGPART_EXPR)\n+\t      && operand_equal_p (val->mem_ref, TREE_OPERAND (rhs, 0), 0))\n+\t    return fold_build1 (TREE_CODE (rhs), TREE_TYPE (rhs), val->value);\n+\t}\n+      return NULL_TREE;\n     }\n \n   /* Unary operators.  Note that we know the single operand must"}]}