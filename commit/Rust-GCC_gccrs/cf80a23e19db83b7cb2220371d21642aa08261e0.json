{"sha": "cf80a23e19db83b7cb2220371d21642aa08261e0", "node_id": "C_kwDOANBUbNoAKGNmODBhMjNlMTlkYjgzYjdjYjIyMjAzNzFkMjE2NDJhYTA4MjYxZTA", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-09T02:19:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-09T02:19:23Z"}, "message": "analyzer: handle memmove like memcpy\n\ngcc/analyzer/ChangeLog:\n\t* region-model-impl-calls.cc (class kf_memcpy): Rename to...\n\t(class kf_memcpy_memmove): ...this.\n\t(kf_memcpy::impl_call_pre): Rename to...\n\t(kf_memcpy_memmove::impl_call_pre): ...this, and check the src for\n\tpoison.\n\t(register_known_functions): Update for above renaming, and\n\tregister BUILT_IN_MEMMOVE and BUILT_IN_MEMMOVE_CHK.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/memcpy-1.c (test_8a, test_8b): New tests.\n\t* gcc.dg/analyzer/memmove-1.c: New test, based on memcpy-1.c\n\t* gcc.dg/analyzer/out-of-bounds-1.c (test7): Update expected\n\tresult for uninit srcBuf.\n\t* gcc.dg/analyzer/out-of-bounds-5.c (test8, test9): Add\n\tdg-warnings for memcpy from uninit src vla.\n\t* gcc.dg/analyzer/pr104308.c (test_memmove_within_uninit):\n\tExpect creation point note to be missing on riscv*-*-*.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "e6ca2dd6f4cb71f17a3e407e4c6cc1c3c0a8fe12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6ca2dd6f4cb71f17a3e407e4c6cc1c3c0a8fe12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf80a23e19db83b7cb2220371d21642aa08261e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf80a23e19db83b7cb2220371d21642aa08261e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf80a23e19db83b7cb2220371d21642aa08261e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf80a23e19db83b7cb2220371d21642aa08261e0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2996b5c053d38d4543c9491258b051d6c032a011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2996b5c053d38d4543c9491258b051d6c032a011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2996b5c053d38d4543c9491258b051d6c032a011"}], "stats": {"total": 220, "additions": 212, "deletions": 8}, "files": [{"sha": "ff2f1b1ef9c1263574bb7342f73601535e8f11ee", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=cf80a23e19db83b7cb2220371d21642aa08261e0", "patch": "@@ -246,10 +246,12 @@ kf_malloc::impl_call_pre (const call_details &cd) const\n     }\n }\n \n-/* Handler for \"memcpy\" and \"__builtin_memcpy\".  */\n-// TODO: complain about overlapping src and dest.\n+/* Handler for \"memcpy\" and \"__builtin_memcpy\",\n+   \"memmove\", and \"__builtin_memmove\".  */\n+/* TODO: complain about overlapping src and dest for the memcpy\n+   variants.  */\n \n-class kf_memcpy : public known_function\n+class kf_memcpy_memmove : public known_function\n {\n public:\n   bool matches_call_types_p (const call_details &cd) const final override\n@@ -263,7 +265,7 @@ class kf_memcpy : public known_function\n };\n \n void\n-kf_memcpy::impl_call_pre (const call_details &cd) const\n+kf_memcpy_memmove::impl_call_pre (const call_details &cd) const\n {\n   const svalue *dest_ptr_sval = cd.get_arg_svalue (0);\n   const svalue *src_ptr_sval = cd.get_arg_svalue (1);\n@@ -285,6 +287,8 @@ kf_memcpy::impl_call_pre (const call_details &cd) const\n     = mgr->get_sized_region (dest_reg, NULL_TREE, num_bytes_sval);\n   const svalue *src_contents_sval\n     = model->get_store_value (sized_src_reg, cd.get_ctxt ());\n+  model->check_for_poison (src_contents_sval, cd.get_arg_tree (1),\n+\t\t\t   cd.get_ctxt ());\n   model->set_value (sized_dest_reg, src_contents_sval, cd.get_ctxt ());\n }\n \n@@ -927,8 +931,10 @@ register_known_functions (known_function_manager &kfm)\n     kfm.add (BUILT_IN_EXPECT_WITH_PROBABILITY, make_unique<kf_expect> ());\n     kfm.add (BUILT_IN_FREE, make_unique<kf_free> ());\n     kfm.add (BUILT_IN_MALLOC, make_unique<kf_malloc> ());\n-    kfm.add (BUILT_IN_MEMCPY, make_unique<kf_memcpy> ());\n-    kfm.add (BUILT_IN_MEMCPY_CHK, make_unique<kf_memcpy> ());\n+    kfm.add (BUILT_IN_MEMCPY, make_unique<kf_memcpy_memmove> ());\n+    kfm.add (BUILT_IN_MEMCPY_CHK, make_unique<kf_memcpy_memmove> ());\n+    kfm.add (BUILT_IN_MEMMOVE, make_unique<kf_memcpy_memmove> ());\n+    kfm.add (BUILT_IN_MEMMOVE_CHK, make_unique<kf_memcpy_memmove> ());\n     kfm.add (BUILT_IN_MEMSET, make_unique<kf_memset> ());\n     kfm.add (BUILT_IN_MEMSET_CHK, make_unique<kf_memset> ());\n     kfm.add (BUILT_IN_REALLOC, make_unique<kf_realloc> ());"}, {"sha": "b1ffed0a979b21f9bcca03e827a15ad390eac32f", "filename": "gcc/testsuite/gcc.dg/analyzer/memcpy-1.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemcpy-1.c?ref=cf80a23e19db83b7cb2220371d21642aa08261e0", "patch": "@@ -166,3 +166,17 @@ void test_7b (void *src, size_t sz)\n {\n   memcpy ((void *)\"hello world\", src, sz); /* { dg-warning \"write to string literal\" } */\n }\n+\n+/* memcpy from uninitialized buffer.  */\n+\n+void test_8a (void *dst)\n+{\n+  char src[16];\n+  memcpy (dst, src, 16); /* { dg-warning \"use of uninitialized value\" } */\n+}\n+\n+void test_8b (void *dst, size_t n)\n+{\n+  char src[16];\n+  memcpy (dst, src, n); /* { dg-warning \"use of uninitialized value\" } */\n+}"}, {"sha": "06627ede0817822b9dc4cc9a3468f011464514a7", "filename": "gcc/testsuite/gcc.dg/analyzer/memmove-1.c", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemmove-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemmove-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemmove-1.c?ref=cf80a23e19db83b7cb2220371d21642aa08261e0", "patch": "@@ -0,0 +1,182 @@\n+#include <string.h>\n+#include \"analyzer-decls.h\"\n+\n+/* Function for thwarting expansion of memmove by optimizer.  */\n+\n+typedef void * (*memmove_t) (void *dst, const void *src, size_t n);\n+  \n+static memmove_t __attribute__((noinline))\n+get_memmove (void)\n+{\n+  return memmove;\n+}\n+\n+void *test_1 (void *dst, void *src, size_t n)\n+{\n+  void *result = memmove (dst, src, n);\n+  __analyzer_eval (result == dst); /* { dg-warning \"TRUE\" } */\n+  return result;\n+}\n+\n+void *test_1a (void *dst, void *src, size_t n)\n+{\n+  void *result = __memmove_chk (dst, src, n, -1);\n+  __analyzer_eval (result == dst); /* { dg-warning \"TRUE\" } */\n+  return result;\n+}\n+\n+void *test_1b (void *dst, void *src, size_t n)\n+{\n+  memmove_t fn = get_memmove ();\n+  void *result = fn (dst, src, n);\n+  __analyzer_eval (result == dst); /* { dg-warning \"TRUE\" } */\n+  return result;\n+}\n+\n+void test_2 (int i)\n+{\n+  int j;\n+  memmove (&j, &i, sizeof (int));\n+  __analyzer_eval (i == j); /* { dg-warning \"TRUE\" } */\n+}\n+\n+void test_2a (int i)\n+{\n+  int j;\n+  __memmove_chk (&j, &i, sizeof (int), sizeof (int));\n+  __analyzer_eval (i == j);  /* { dg-warning \"TRUE\" } */\n+}\n+\n+void test_2b (int i)\n+{\n+  int j;\n+  memmove_t fn = get_memmove ();\n+  fn (&j, &i, sizeof (int));\n+  __analyzer_eval (i == j); /* { dg-warning \"TRUE\" } */\n+}\n+\n+void test_3 (void *src, size_t n)\n+{\n+  char buf[40], other[40];\n+  buf[0] = 'a';\n+  other[0] = 'b';\n+  __analyzer_eval (buf[0] == 'a');    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (other[0] == 'b');  /* { dg-warning \"TRUE\" } */\n+\n+  memmove (buf, src, n);\n+  __analyzer_eval (buf[0] == 'a');    /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (other[0] == 'b');  /* { dg-warning \"TRUE\" } */\n+}\n+\n+void test_3b (void *src, size_t n)\n+{\n+  char buf[40], other[40];\n+  memmove_t fn = get_memmove ();\n+  buf[0] = 'a';\n+  other[0] = 'b';\n+  __analyzer_eval (buf[0] == 'a');    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (other[0] == 'b');  /* { dg-warning \"TRUE\" } */\n+\n+  fn (buf, src, n);\n+  __analyzer_eval (buf[0] == 'a');    /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (other[0] == 'b');  /* { dg-warning \"TRUE\" } */\n+}\n+\n+/* Overwriting a zeroed buffer, then memmove of the result.  */\n+\n+void test_4 (int a, int b)\n+{\n+  int src[1024];\n+  int dst[1024];\n+  memset (src, 0, sizeof (src));\n+  src[42] = a;\n+  src[100] = b;\n+  __analyzer_eval (src[0] == 0);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[42] == a);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[100] == b);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[1023] == 0);    /* { dg-warning \"TRUE\" } */\n+\n+  memmove (dst, src, sizeof (src));\n+  __analyzer_eval (dst[0] == 0);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[42] == a);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[100] == b);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[1023] == 0);    /* { dg-warning \"TRUE\" } */  \n+}\n+\n+void test_4b (int a, int b)\n+{\n+  int src[1024];\n+  int dst[1024];\n+  memmove_t fn = get_memmove ();\n+  memset (src, 0, sizeof (src));\n+  src[42] = a;\n+  src[100] = b;\n+  __analyzer_eval (src[0] == 0);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[42] == a);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[100] == b);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[1023] == 0);    /* { dg-warning \"TRUE\" } */\n+\n+  fn (dst, src, sizeof (src));\n+  __analyzer_eval (dst[0] == 0);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[42] == a);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[100] == b);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[1023] == 0);    /* { dg-warning \"TRUE\" } */  \n+}\n+\n+/* Populating a buffer from an unknown buffer.  */\n+\n+void test_5 (void *src, size_t sz)\n+{\n+  char dst[1024];\n+  memmove (dst, src, sizeof (dst));\n+  __analyzer_eval (dst[0] == 0); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (dst[1023] == 0); /* { dg-warning \"UNKNOWN\" } */\n+}\n+\n+void test_5b (void *src, size_t sz)\n+{\n+  char dst[1024];\n+  memmove_t fn = get_memmove ();\n+  fn (dst, src, sizeof (dst));\n+  __analyzer_eval (dst[0] == 0); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (dst[1023] == 0); /* { dg-warning \"UNKNOWN\" } */\n+}\n+\n+/* Zero-sized memmove.  */\n+\n+void test_6 (void *dst, void *src)\n+{\n+  memmove (dst, src, 0);\n+}\n+\n+void test_6b (void *dst, void *src)\n+{\n+  memmove_t fn = get_memmove ();\n+  fn (dst, src, 0);\n+}\n+\n+/* memmove to string literal.  */\n+\n+void test_7 (void *src, size_t sz)\n+{\n+  memmove ((void *)\"hello world\", src, sz); /* { dg-warning \"write to string literal\" } */\n+}\n+\n+void test_7b (void *src, size_t sz)\n+{\n+  memmove ((void *)\"hello world\", src, sz); /* { dg-warning \"write to string literal\" } */\n+}\n+\n+/* memcpy from uninitialized buffer.  */\n+\n+void test_8a (void *dst)\n+{\n+  char src[16];\n+  memmove (dst, src, 16); /* { dg-warning \"use of uninitialized value\" } */\n+}\n+\n+void test_8b (void *dst, size_t n)\n+{\n+  char src[16];\n+  memmove (dst, src, n); /* { dg-warning \"use of uninitialized value\" } */\n+}"}, {"sha": "93b379c173ab3d9e550c782bc43aa897ef107930", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-1.c?ref=cf80a23e19db83b7cb2220371d21642aa08261e0", "patch": "@@ -117,6 +117,6 @@ void test7 (void)\n \n   // TODO: Should we handle widening_svalues as a follow-up?\n   /* { dg-warning \"over-read\" \"warning\" { xfail *-*-* } test7 } */\n+  /* { dg-warning \"use of uninitialized value\" \"uninit warning\" { target *-*-* } test7 } */\n   /* { dg-warning \"overflow\" \"warning\" { xfail *-*-* } test7 } */\n-  /* { dg-message \"\" \"note\" { xfail *-*-* } test7 } */\n }"}, {"sha": "eb6aae0f8cbaa17439cfc0dd4cfe34f879aa00eb", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-5.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-5.c?ref=cf80a23e19db83b7cb2220371d21642aa08261e0", "patch": "@@ -69,6 +69,7 @@ void test8 (size_t size, size_t offset)\n   char dst[size];\n   memcpy (dst, src, size + offset); /* { dg-line test8 } */\n   /* { dg-warning \"over-read\" \"warning\" { target *-*-* } test8 } */\n+  /* { dg-warning \"use of uninitialized value\" \"warning\" { target *-*-* } test8 } */\n   /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test8 } */\n }\n \n@@ -78,6 +79,7 @@ void test9 (size_t size, size_t offset)\n   int32_t dst[size];\n   memcpy (dst, src, 4 * size + 1); /* { dg-line test9 } */\n   /* { dg-warning \"over-read\" \"warning\" { target *-*-* } test9 } */\n+  /* { dg-warning \"use of uninitialized value\" \"warning\" { target *-*-* } test9 } */\n   /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test9 } */\n }\n "}, {"sha": "e6a2c8821bf54b4d1a94b8809f96853c64cce208", "filename": "gcc/testsuite/gcc.dg/analyzer/pr104308.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf80a23e19db83b7cb2220371d21642aa08261e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c?ref=cf80a23e19db83b7cb2220371d21642aa08261e0", "patch": "@@ -6,7 +6,7 @@\n \n int test_memmove_within_uninit (void)\n {\n-  char s[5]; /* { dg-message \"region created on stack here\" } */\n+  char s[5]; /* { dg-message \"region created on stack here\" \"\" { xfail riscv*-*-* } } */\n   memmove(s, s + 1, 2); /* { dg-warning \"use of uninitialized value\" } */\n   return 0;\n }"}]}