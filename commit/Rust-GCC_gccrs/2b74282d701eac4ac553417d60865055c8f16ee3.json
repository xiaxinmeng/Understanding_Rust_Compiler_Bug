{"sha": "2b74282d701eac4ac553417d60865055c8f16ee3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI3NDI4MmQ3MDFlYWM0YWM1NTM0MTdkNjA4NjUwNTVjOGYxNmVlMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-12T18:35:48Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-12T18:35:48Z"}, "message": "tree-if-conv.c (tree_if_convert_cond_expr): Remove local variable new_cond.\n\n\t* tree-if-conv.c (tree_if_convert_cond_expr): Remove local\n\tvariable new_cond.\n\t(combine_blocks): Remove local variables exits and new_e.\n\nFrom-SVN: r96346", "tree": {"sha": "018958e5521e917788cbcc85e75a1ff4d92e2030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/018958e5521e917788cbcc85e75a1ff4d92e2030"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b74282d701eac4ac553417d60865055c8f16ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b74282d701eac4ac553417d60865055c8f16ee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b74282d701eac4ac553417d60865055c8f16ee3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b74282d701eac4ac553417d60865055c8f16ee3/comments", "author": null, "committer": null, "parents": [{"sha": "f7448d502cfa30c94e8f05081ebf95a690a2c1f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7448d502cfa30c94e8f05081ebf95a690a2c1f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7448d502cfa30c94e8f05081ebf95a690a2c1f5"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "4137e13fe12ef63f75d574519751c6c01d40340c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b74282d701eac4ac553417d60865055c8f16ee3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b74282d701eac4ac553417d60865055c8f16ee3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b74282d701eac4ac553417d60865055c8f16ee3", "patch": "@@ -34,6 +34,10 @@\n \t(compare_for_stack_reg): Remove local variable flags_user.\n \t(convert_regs_1): Remove local variable deleted.\n \n+\t* tree-if-conv.c (tree_if_convert_cond_expr): Remove local\n+\tvariable new_cond.\n+\t(combine_blocks): Remove local variables exits and new_e.\n+\n 2005-03-12  Geoffrey Keating  <geoffk@apple.com>\n \n \t* c-lex.c (c_lex_with_flags): Add parameter to call to "}, {"sha": "d22a61735598ff3675c41f79e8afc3201607477e", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b74282d701eac4ac553417d60865055c8f16ee3/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b74282d701eac4ac553417d60865055c8f16ee3/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=2b74282d701eac4ac553417d60865055c8f16ee3", "patch": "@@ -271,9 +271,8 @@ static void\n tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n \t\t\t   block_stmt_iterator *bsi)\n {\n-  tree c, c2, new_cond;\n+  tree c, c2;\n   edge true_edge, false_edge;\n-  new_cond = NULL_TREE;\n \n   gcc_assert (TREE_CODE (stmt) == COND_EXPR);\n \n@@ -294,8 +293,8 @@ tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n   /* Add new condition into destination's predicate list.  */\n \n   /* If 'c' is true then TRUE_EDGE is taken.  */\n-  new_cond = add_to_dst_predicate_list (loop, true_edge->dest, cond,\n-\t\t\t\t\tunshare_expr (c), bsi);\n+  add_to_dst_predicate_list (loop, true_edge->dest, cond,\n+\t\t\t     unshare_expr (c), bsi);\n \n   if (!is_gimple_reg(c) && is_gimple_condexpr (c))\n     {\n@@ -859,7 +858,8 @@ combine_blocks (struct loop *loop)\n   unsigned int orig_loop_num_nodes = loop->num_nodes;\n   unsigned int i;\n   unsigned int n_exits;\n-  edge *exits = get_loop_exit_edges (loop, &n_exits);\n+\n+  get_loop_exit_edges (loop, &n_exits);\n   /* Process phi nodes to prepare blocks for merge.  */\n   process_phi_nodes (loop);\n \n@@ -880,11 +880,10 @@ combine_blocks (struct loop *loop)\n \n       if (bb == exit_bb)\n \t{\n-\t  edge new_e;\n \t  edge_iterator ei;\n \n \t  /* Connect this node with loop header.  */\n-\t  new_e = make_edge (ifc_bbs[0], bb, EDGE_FALLTHRU);\n+\t  make_edge (ifc_bbs[0], bb, EDGE_FALLTHRU);\n \t  set_immediate_dominator (CDI_DOMINATORS, bb, ifc_bbs[0]);\n \n \t  if (exit_bb != loop->latch)\n@@ -914,7 +913,6 @@ combine_blocks (struct loop *loop)\n  \t loop->header and loop->latch blocks.  */\n       if (bb == loop->latch && n_exits == 0)\n  \t{\n-\t  exits = NULL; /* To suppress unused warning.  */\n  \t  make_edge (loop->header, loop->latch, EDGE_FALLTHRU);\n  \t  set_immediate_dominator (CDI_DOMINATORS, loop->latch, loop->header);\n \t  continue;"}]}