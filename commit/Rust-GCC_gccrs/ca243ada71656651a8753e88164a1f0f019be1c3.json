{"sha": "ca243ada71656651a8753e88164a1f0f019be1c3", "node_id": "C_kwDOANBUbNoAKGNhMjQzYWRhNzE2NTY2NTFhODc1M2U4ODE2NGExZjBmMDE5YmUxYzM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-18T12:39:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-18T16:14:15Z"}, "message": "libstdc++: Fix std::char_traits<C>::move for constexpr\n\nThe constexpr branch in __gnu_cxx::char_traits::move compares the string\narguments to see if they overlap, but relational comparisons between\nunrelated pointers are not core constant expressions.\n\nI want to replace the comparisons with a loop using pointer equality to\ndetermine whether the end of the source string is in the destination\nstring. However, that doesn't work with GCC, due to PR c++/89074 so\nallocate a temporary buffer instead and copy out into that first, so\nthat overlapping source and destination don't matter. The allocation\nisn't supported by the current Intel icc so use the loop as a fallback.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/char_traits.h (__gnu_cxx::char_traits::move):\n\tDo not compare unrelated pointers during constant evaluation.\n\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++20.cc:\n\tImprove tests for char_traits::move.", "tree": {"sha": "1818ddadb761c14d7987a57b6fffae8fbb9655cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1818ddadb761c14d7987a57b6fffae8fbb9655cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca243ada71656651a8753e88164a1f0f019be1c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca243ada71656651a8753e88164a1f0f019be1c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca243ada71656651a8753e88164a1f0f019be1c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca243ada71656651a8753e88164a1f0f019be1c3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16fab6d691b1410abdf794230246ab9753d183af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16fab6d691b1410abdf794230246ab9753d183af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16fab6d691b1410abdf794230246ab9753d183af"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "3c9f4ad94201fe6012ae567025473bc242addea4", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca243ada71656651a8753e88164a1f0f019be1c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca243ada71656651a8753e88164a1f0f019be1c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=ca243ada71656651a8753e88164a1f0f019be1c3", "patch": "@@ -192,18 +192,46 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (__n == 0)\n \treturn __s1;\n-#ifdef __cpp_lib_is_constant_evaluated\n+#if __cpp_lib_is_constant_evaluated\n       if (std::is_constant_evaluated())\n \t{\n-\t  if (__s1 > __s2 && __s1 < __s2 + __n)\n-\t    std::copy_backward(__s2, __s2 + __n, __s1 + __n);\n+\t  if (__s1 == __s2) // unlikely, but saves a lot of work\n+\t    return __s1;\n+#if __cpp_constexpr_dynamic_alloc\n+\t  // The overlap detection below fails due to PR c++/89074,\n+\t  // so use a temporary buffer instead.\n+\t  char_type* __tmp = new char_type[__n];\n+\t  copy(__tmp, __s2, __n);\n+\t  copy(__s1, __tmp, __n);\n+\t  delete[] __tmp;\n+#else\n+\t  const auto __end = __s2 + __n - 1;\n+\t  bool __overlap = false;\n+\t  for (std::size_t __i = 0; __i < __n - 1; ++__i)\n+\t    {\n+\t      if (__s1 + __i == __end)\n+\t\t{\n+\t\t  __overlap = true;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  if (__overlap)\n+\t    {\n+\t      do\n+\t\t{\n+\t\t  --__n;\n+\t\t  assign(__s1[__n], __s2[__n]);\n+\t\t}\n+\t      while (__n > 0);\n+\t    }\n \t  else\n-\t    std::copy(__s2, __s2 + __n, __s1);\n+\t    copy(__s1, __s2, __n);\n+#endif\n \t  return __s1;\n \t}\n #endif\n-      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,\n-\t\t\t\t\t\t    __n * sizeof(char_type)));\n+      __builtin_memmove(__s1, __s2, __n * sizeof(char_type));\n+      return __s1;\n     }\n \n   template<typename _CharT>"}, {"sha": "56400bb18c93784e91eebbbf99557a38675eaac6", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/constexpr_functions_c++20.cc", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca243ada71656651a8753e88164a1f0f019be1c3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca243ada71656651a8753e88164a1f0f019be1c3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B20.cc?ref=ca243ada71656651a8753e88164a1f0f019be1c3", "patch": "@@ -1,5 +1,5 @@\n-// { dg-options \"-std=gnu++2a\" }\n-// { dg-do compile { target c++2a } }\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n \n // Copyright (C) 2017-2021 Free Software Foundation, Inc.\n //\n@@ -25,9 +25,26 @@ template<typename CT>\n   test_move()\n   {\n     using char_type = typename CT::char_type;\n+\n+    // Overlapping strings\n     char_type s1[3] = {1, 2, 3};\n     CT::move(s1+1, s1, 2);\n-    return s1[0]==char_type{1} && s1[1]==char_type{1} && s1[2]==char_type{2};\n+    if (s1[0] != char_type{1} || s1[1] != char_type{1} || s1[2] != char_type{2})\n+      throw 1;\n+    CT::move(s1, s1+1, 2);\n+    if (s1[0] != char_type{1} || s1[1] != char_type{2} || s1[2] != char_type{2})\n+      throw 2;\n+\n+    // Disjoint strings\n+    char_type why_is_six_scared_of_seven[] = {4, 5, 6};\n+    char_type because789[] = {7, 8, 9};\n+    CT::move(why_is_six_scared_of_seven, because789, 3);\n+    if (why_is_six_scared_of_seven[0] != char_type{7}\n+\t|| why_is_six_scared_of_seven[1] != char_type{8}\n+\t|| why_is_six_scared_of_seven[2] != char_type{9})\n+      throw 3;\n+\n+    return true;\n   }\n \n #ifndef __cpp_lib_constexpr_string"}]}