{"sha": "84ff66b884e9a67d83fa58c659a3aff52b38e138", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRmZjY2Yjg4NGU5YTY3ZDgzZmE1OGM2NTlhM2FmZjUyYjM4ZTEzOA==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2015-10-09T16:08:35Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-10-09T16:08:35Z"}, "message": "[PATCH V3][GCC] Algorithmic optimization in match and simplify\n\ngcc/ChangeLog\n\n\t* match.pd: ((X inner_op C0) outer_op C1) New pattern.\n\t((X & C2) << C1): Expand to...\n\t(X {&,^,|} C2 << C1): ...This.\n\t((X & C2) >> C1): Expand to...\n\t(X {&,^,|} C2 >> C1): ...This.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.dg/tree-ssa/forwprop-33.c: New.\n\n\nCo-Authored-By: Hale Wang <hale.wang@arm.com>\n\nFrom-SVN: r228661", "tree": {"sha": "7e894d743084e5a7b02d3bc20b55b143ab2d9da8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e894d743084e5a7b02d3bc20b55b143ab2d9da8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84ff66b884e9a67d83fa58c659a3aff52b38e138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ff66b884e9a67d83fa58c659a3aff52b38e138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ff66b884e9a67d83fa58c659a3aff52b38e138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ff66b884e9a67d83fa58c659a3aff52b38e138/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fc87f2fc2c26f2f36e5ea2108b8827637ef064c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc87f2fc2c26f2f36e5ea2108b8827637ef064c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fc87f2fc2c26f2f36e5ea2108b8827637ef064c"}], "stats": {"total": 144, "additions": 137, "deletions": 7}, "files": [{"sha": "6156bd09c02c9fa77fc007dbbfe72a3967f0bb08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff66b884e9a67d83fa58c659a3aff52b38e138/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff66b884e9a67d83fa58c659a3aff52b38e138/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84ff66b884e9a67d83fa58c659a3aff52b38e138", "patch": "@@ -1,3 +1,11 @@\n+2015-10-09  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* match.pd: ((X inner_op C0) outer_op C1) New pattern.\n+\t((X & C2) << C1): Expand to...\n+\t(X {&,^,|} C2 << C1): ...This.\n+\t((X & C2) >> C1): Expand to...\n+\t(X {&,^,|} C2 >> C1): ...This.\n+\n 2015-10-09  Alexander Fomin  <alexander.fomin@intel.com>\n \n \tPR target/67895"}, {"sha": "b02dd03430d0d71fac989da16c7cf0f552dc5b4f", "filename": "gcc/match.pd", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff66b884e9a67d83fa58c659a3aff52b38e138/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff66b884e9a67d83fa58c659a3aff52b38e138/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=84ff66b884e9a67d83fa58c659a3aff52b38e138", "patch": "@@ -710,6 +710,51 @@ along with GCC; see the file COPYING3.  If not see\n       && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n   (convert (bit_and (bit_not @1) @0))))\n \n+\n+\n+/* ((X inner_op C0) outer_op C1)\n+   With X being a tree where value_range has reasoned certain bits to always be\n+   zero throughout its computed value range,\n+   inner_op = {|,^}, outer_op = {|,^} and inner_op != outer_op\n+   where zero_mask has 1's for all bits that are sure to be 0 in\n+   and 0's otherwise.\n+   if (inner_op == '^') C0 &= ~C1;\n+   if ((C0 & ~zero_mask) == 0) then emit (X outer_op (C0 outer_op C1)\n+   if ((C1 & ~zero_mask) == 0) then emit (X inner_op (C0 outer_op C1)\n+*/\n+(for inner_op (bit_ior bit_xor)\n+     outer_op (bit_xor bit_ior)\n+(simplify\n+ (outer_op\n+  (inner_op:s @2 INTEGER_CST@0) INTEGER_CST@1)\n+ (with\n+  {\n+    bool fail = false;\n+    wide_int zero_mask_not;\n+    wide_int C0;\n+    wide_int cst_emit;\n+\n+    if (TREE_CODE (@2) == SSA_NAME)\n+      zero_mask_not = get_nonzero_bits (@2);\n+    else\n+      fail = true;\n+\n+    if (inner_op == BIT_XOR_EXPR)\n+      {\n+\tC0 = wi::bit_and_not (@0, @1);\n+\tcst_emit = wi::bit_or (C0, @1);\n+      }\n+    else\n+      {\n+\tC0 = @0;\n+\tcst_emit = wi::bit_xor (@0, @1);\n+      }\n+  }\n+  (if (!fail && wi::bit_and (C0, zero_mask_not) == 0)\n+   (outer_op @2 { wide_int_to_tree (type, cst_emit); })\n+   (if (!fail && wi::bit_and (@1, zero_mask_not) == 0)\n+    (inner_op @2 { wide_int_to_tree (type, cst_emit); }))))))\n+\n /* Associate (p +p off1) +p off2 as (p +p (off1 + off2)).  */\n (simplify\n   (pointer_plus (pointer_plus:s @0 @1) @3)\n@@ -1103,14 +1148,15 @@ along with GCC; see the file COPYING3.  If not see\n \t     (bit_and (convert (shift:shift_type (convert @3) @1)) { newmaskt; })\n \t     (bit_and @4 { newmaskt; })))))))))))))\n \n-/* Fold (X & C2) << C1 into (X << C1) & (C2 << C1)\n-   (X & C2) >> C1 into (X >> C1) & (C2 >> C1).  */\n+/* Fold (X {&,^,|} C2) << C1 into (X << C1) {&,^,|} (C2 << C1)\n+   (X {&,^,|} C2) >> C1 into (X >> C1) & (C2 >> C1).  */\n (for shift (lshift rshift)\n- (simplify\n-  (shift (convert?:s (bit_and:s @0 INTEGER_CST@2)) INTEGER_CST@1)\n-  (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n-   (with { tree mask = int_const_binop (shift, fold_convert (type, @2), @1); }\n-    (bit_and (shift (convert @0) @1) { mask; })))))\n+ (for bit_op (bit_and bit_xor bit_ior)\n+  (simplify\n+   (shift (convert?:s (bit_op:s @0 INTEGER_CST@2)) INTEGER_CST@1)\n+   (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+    (with { tree mask = int_const_binop (shift, fold_convert (type, @2), @1); }\n+     (bit_op (shift (convert @0) @1) { mask; }))))))\n \n \n /* Simplifications of conversions.  */"}, {"sha": "929bfa57a97495f4a187ee9f72974b023ad5b53f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff66b884e9a67d83fa58c659a3aff52b38e138/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff66b884e9a67d83fa58c659a3aff52b38e138/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84ff66b884e9a67d83fa58c659a3aff52b38e138", "patch": "@@ -1,3 +1,8 @@\n+2015-10-09  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Hale Wang  <hale.wang@arm.com>\n+\n+\t* gcc.dg/tree-ssa/forwprop-33.c: New.\n+\n 2015-10-09  Alexander Fomin  <alexander.fomin@intel.com>\n \n \tPR target/67895"}, {"sha": "c7124deee11f3655d7c50bd9605bb7caddba6470", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-33.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff66b884e9a67d83fa58c659a3aff52b38e138/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff66b884e9a67d83fa58c659a3aff52b38e138/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-33.c?ref=84ff66b884e9a67d83fa58c659a3aff52b38e138", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop3\" } */\n+\n+unsigned short\n+test1 (unsigned short a)\n+{\n+  a ^= 0x4002;\n+  a >>= 1;\n+  a |= 0x8000; /* Simplify to ((a >> 1) ^ 0xa001).  */\n+  return a;\n+}\n+/* { dg-final { scan-tree-dump \"\\\\^ 40961\" \"forwprop3\" } } */\n+\n+unsigned short\n+test2 (unsigned short a)\n+{\n+  a |= 0x4002;\n+  a <<= 1;\n+  a ^= 0x0001; /* Simplify to ((a << 1) | 0x8005).  */\n+  return a;\n+}\n+/* { dg-final { scan-tree-dump \"\\\\| 32773\" \"forwprop3\" } } */\n+\n+unsigned short\n+test3 (unsigned short a)\n+{\n+  a &= 0xd123;\n+  a ^= 0x6040;\n+  a |= 0xc031; /* Simplify to ((a & 0xd123) | 0xe071).  */\n+  return a;\n+}\n+/* { dg-final { scan-tree-dump \"\\\\| 57457\" \"forwprop3\" } } */\n+\n+unsigned short\n+test4 (unsigned short a)\n+{\n+  a ^= 0x8002;\n+  a >>= 1;\n+  a |= 0x8000;\n+  return a;\n+}\n+/* { dg-final { scan-tree-dump \"\\\\^ 49153\" \"forwprop3\" } } */\n+\n+unsigned short\n+test5 (unsigned short a)\n+{\n+  a ^= 0x8002;\n+  a >>= 1;\n+  a |= 0x8001; /* Only move shift inward: (((a >> 1) ^ 0x4001) | 0x8001).  */\n+  return a;\n+}\n+/* { dg-final { scan-tree-dump \"\\\\^ 16385\" \"forwprop3\" } } */\n+/* { dg-final { scan-tree-dump \"\\\\| 32769\" \"forwprop3\" } } */\n+\n+short\n+test6 (short a)\n+{\n+  a &= 0x7fff;\n+  a >>= 2;\n+  return a;\n+}\n+/* { dg-final { scan-tree-dump \"\\\\& 8191\" \"forwprop3\" } } */\n+\n+short\n+test7 (short a)\n+{\n+  a &= 0x8fff;\n+  a >>= 2;\n+  return a;\n+}\n+/* { dg-final { scan-tree-dump \"\\\\& -7169\" \"forwprop3\" } } */"}]}