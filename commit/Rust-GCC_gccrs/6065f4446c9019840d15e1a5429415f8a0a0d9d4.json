{"sha": "6065f4446c9019840d15e1a5429415f8a0a0d9d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA2NWY0NDQ2YzkwMTk4NDBkMTVlMWE1NDI5NDE1ZjhhMGEwZDlkNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-10-15T15:58:42Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-10-15T15:58:42Z"}, "message": "i386.c (ix86_rtx_costs): Make difference between x87 and SSE operations.\n\n\n\t* i386.c (ix86_rtx_costs): Make difference between x87 and SSE\n\toperations.\n\t* i386.h (struct processor_costs): Add addss, mulss, mulsd, divss,\n\tdivsd, sqrtss and sqrtsd\n\t* x86-tune-costs.h: Add new entries to all costs.\n\t(znver1_cost): Fix to match real instruction latencies.\n\nFrom-SVN: r253769", "tree": {"sha": "337e2b0b92516d162c58d1e0f5cb41ddeaf23e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/337e2b0b92516d162c58d1e0f5cb41ddeaf23e85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6065f4446c9019840d15e1a5429415f8a0a0d9d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6065f4446c9019840d15e1a5429415f8a0a0d9d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6065f4446c9019840d15e1a5429415f8a0a0d9d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6065f4446c9019840d15e1a5429415f8a0a0d9d4/comments", "author": null, "committer": null, "parents": [{"sha": "31677224bcb5aad17f84bf717efc5f302923e47b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31677224bcb5aad17f84bf717efc5f302923e47b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31677224bcb5aad17f84bf717efc5f302923e47b"}], "stats": {"total": 287, "additions": 259, "deletions": 28}, "files": [{"sha": "4a582bd9445b73352b9f4f8fa00260ebcbc51cbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6065f4446c9019840d15e1a5429415f8a0a0d9d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6065f4446c9019840d15e1a5429415f8a0a0d9d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6065f4446c9019840d15e1a5429415f8a0a0d9d4", "patch": "@@ -1,3 +1,12 @@\n+2017-10-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* i386.c (ix86_rtx_costs): Make difference between x87 and SSE\n+\toperations.\n+\t* i386.h (struct processor_costs): Add addss, mulss, mulsd, divss,\n+\tdivsd, sqrtss and sqrtsd\n+\t* x86-tune-costs.h: Add new entries to all costs.\n+\t(znver1_cost): Fix to match real instruction latencies.\n+\n 2017-10-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "}, {"sha": "28462c0fc9a7c82a66ba52e7daaa0b047c0e4aec", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6065f4446c9019840d15e1a5429415f8a0a0d9d4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6065f4446c9019840d15e1a5429415f8a0a0d9d4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6065f4446c9019840d15e1a5429415f8a0a0d9d4", "patch": "@@ -38812,6 +38812,9 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n   enum rtx_code outer_code = (enum rtx_code) outer_code_i;\n   const struct processor_costs *cost = speed ? ix86_cost : &ix86_size_cost;\n   int src_cost;\n+  machine_mode inner_mode = mode;\n+  if (VECTOR_MODE_P (mode))\n+    inner_mode = GET_MODE_INNER (mode);\n \n   switch (code)\n     {\n@@ -39012,7 +39015,7 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n \n         /* ??? SSE scalar/vector cost should be used here.  */\n         /* ??? Bald assumption that fma has the same cost as fmul.  */\n-        *total = cost->fmul;\n+        *total = mode == SFmode ? cost->mulss : cost->mulsd;\n \t*total += rtx_cost (XEXP (x, 1), mode, FMA, 1, speed);\n \n         /* Negate in op0 or op2 is free: FMS, FNMA, FNMS.  */\n@@ -39031,8 +39034,7 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n     case MULT:\n       if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n \t{\n-\t  /* ??? SSE scalar cost should be used here.  */\n-\t  *total = cost->fmul;\n+\t  *total = inner_mode == DFmode ? cost->mulsd : cost->mulss;\n \t  return false;\n \t}\n       else if (X87_FLOAT_MODE_P (mode))\n@@ -39043,7 +39045,7 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n       else if (FLOAT_MODE_P (mode))\n \t{\n \t  /* ??? SSE vector cost should be used here.  */\n-\t  *total = cost->fmul;\n+\t  *total = inner_mode == DFmode ? cost->mulsd : cost->mulss;\n \t  return false;\n \t}\n       else if (GET_MODE_CLASS (mode) == MODE_VECTOR_INT)\n@@ -39071,7 +39073,7 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n \t  else if (mode == V4SImode && !(TARGET_SSE4_1 || TARGET_AVX))\n \t    *total = cost->fmul * 2 + cost->fabs * 5;\n \t  else\n-\t    *total = cost->fmul;\n+\t    *total = inner_mode == DFmode ? cost->mulsd : cost->mulss;\n \t  return false;\n \t}\n       else\n@@ -39125,13 +39127,12 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n     case MOD:\n     case UMOD:\n       if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n-\t/* ??? SSE cost should be used here.  */\n-\t*total = cost->fdiv;\n+\t*total = inner_mode == DFmode ? cost->divsd : cost->divss;\n       else if (X87_FLOAT_MODE_P (mode))\n \t*total = cost->fdiv;\n       else if (FLOAT_MODE_P (mode))\n \t/* ??? SSE vector cost should be used here.  */\n-\t*total = cost->fdiv;\n+\t*total = inner_mode == DFmode ? cost->divsd : cost->divss;\n       else\n \t*total = cost->divide[MODE_INDEX (mode)];\n       return false;\n@@ -39210,8 +39211,7 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n \n       if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n \t{\n-\t  /* ??? SSE cost should be used here.  */\n-\t  *total = cost->fadd;\n+\t  *total = cost->addss;\n \t  return false;\n \t}\n       else if (X87_FLOAT_MODE_P (mode))\n@@ -39221,8 +39221,8 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n \t}\n       else if (FLOAT_MODE_P (mode))\n \t{\n-\t  /* ??? SSE vector cost should be used here.  */\n-\t  *total = cost->fadd;\n+\t  /* We should account if registers are split.  */\n+\t  *total = cost->addss;\n \t  return false;\n \t}\n       /* FALLTHRU */\n@@ -39317,13 +39317,12 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n \n     case SQRT:\n       if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n-\t/* ??? SSE cost should be used here.  */\n-\t*total = cost->fsqrt;\n+\t*total = mode == SFmode ? cost->sqrtss : cost->sqrtsd;\n       else if (X87_FLOAT_MODE_P (mode))\n \t*total = cost->fsqrt;\n       else if (FLOAT_MODE_P (mode))\n \t/* ??? SSE vector cost should be used here.  */\n-\t*total = cost->fsqrt;\n+\t*total = mode == SFmode ? cost->sqrtss : cost->sqrtsd;\n       return false;\n \n     case UNSPEC:"}, {"sha": "a602650c3320d17e98ce53c2bc659c9de451b3d2", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6065f4446c9019840d15e1a5429415f8a0a0d9d4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6065f4446c9019840d15e1a5429415f8a0a0d9d4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6065f4446c9019840d15e1a5429415f8a0a0d9d4", "patch": "@@ -257,6 +257,13 @@ struct processor_costs {\n   const int fsqrt;\t\t/* cost of FSQRT instruction.  */\n \t\t\t\t/* Specify what algorithm\n \t\t\t\t   to use for stringops on unknown size.  */\n+  const int addss;\t\t/* cost of ADDSS/SD SUBSS/SD instructions.  */\n+  const int mulss;\t\t/* cost of MULSS instructions.  */\n+  const int mulsd;\t\t/* cost of MULSD instructions.  */\n+  const int divss;\t\t/* cost of DIVSS instructions.  */\n+  const int divsd;\t\t/* cost of DIVSD instructions.  */\n+  const int sqrtss;\t\t/* cost of SQRTSS instructions.  */\n+  const int sqrtsd;\t\t/* cost of SQRTSD instructions.  */\n   const int reassoc_int, reassoc_fp, reassoc_vec_int, reassoc_vec_fp;\n \t\t\t\t/* Specify reassociation width for integer,\n \t\t\t\t   fp, vector integer and vector fp"}, {"sha": "1a5702f0d741eecc88e63ffa945733c39afcd247", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 229, "deletions": 13, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6065f4446c9019840d15e1a5429415f8a0a0d9d4/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6065f4446c9019840d15e1a5429415f8a0a0d9d4/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=6065f4446c9019840d15e1a5429415f8a0a0d9d4", "patch": "@@ -65,6 +65,14 @@ struct processor_costs ix86_size_cost = {/* costs for tuning for size */\n   COSTS_N_BYTES (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_BYTES (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_BYTES (2),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_BYTES (2),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   ix86_size_memcpy,\n   ix86_size_memset,\n@@ -142,6 +150,14 @@ struct processor_costs i386_cost = {\t/* 386 specific costs */\n   COSTS_N_INSNS (22),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (24),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (122),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (23),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (27),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (27),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (88),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (88),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (122),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (122),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   i386_memcpy,\n   i386_memset,\n@@ -220,6 +236,14 @@ struct processor_costs i486_cost = {\t/* 486 specific costs */\n   COSTS_N_INSNS (3),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (3),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (83),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (8),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (16),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (16),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (73),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (74),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (83),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (83),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   i486_memcpy,\n   i486_memset,\n@@ -296,6 +320,14 @@ struct processor_costs pentium_cost = {\n   COSTS_N_INSNS (1),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (1),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (70),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (3),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (39),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (39),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (70),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (70),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   pentium_memcpy,\n   pentium_memset,\n@@ -365,6 +397,14 @@ struct processor_costs lakemont_cost = {\n   COSTS_N_INSNS (1),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (1),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (70),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (5),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (31),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (60),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (31),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (63),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   pentium_memcpy,\n   pentium_memset,\n@@ -449,6 +489,14 @@ struct processor_costs pentiumpro_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (56),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (3),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (18),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (18),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (31),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (31),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   pentiumpro_memcpy,\n   pentiumpro_memset,\n@@ -525,6 +573,14 @@ struct processor_costs geode_cost = {\n   COSTS_N_INSNS (1),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (1),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (54),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (6),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (11),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (11),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (47),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (47),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (54),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (54),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   geode_memcpy,\n   geode_memset,\n@@ -603,6 +659,14 @@ struct processor_costs k6_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (56),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (2),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (56),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (56),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (56),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (56),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   k6_memcpy,\n   k6_memset,\n@@ -681,6 +745,15 @@ struct processor_costs athlon_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (35),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (4),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSD instruction.  */\n+  /* 11-16  */\n+  COSTS_N_INSNS (16),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (24),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (19),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (19),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   athlon_memcpy,\n   athlon_memset,\n@@ -768,6 +841,15 @@ struct processor_costs k8_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (35),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (4),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSD instruction.  */\n+  /* 11-16  */\n+  COSTS_N_INSNS (16),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (19),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (27),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   k8_memcpy,\n   k8_memset,\n@@ -862,6 +944,15 @@ struct processor_costs amdfam10_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (35),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (4),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSD instruction.  */\n+  /* 11-16  */\n+  COSTS_N_INSNS (16),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (19),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (27),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   amdfam10_memcpy,\n   amdfam10_memset,\n@@ -957,6 +1048,16 @@ const struct processor_costs bdver1_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (52),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (6),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of MULSD instruction.  */\n+  /* 9-24  */\n+  COSTS_N_INSNS (24),\t\t\t/* cost of DIVSS instruction.  */\n+  /* 9-27  */\n+  COSTS_N_INSNS (27),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (15),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (26),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 2, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   bdver1_memcpy,\n   bdver1_memset,\n@@ -1053,6 +1154,16 @@ const struct processor_costs bdver2_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (52),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (6),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of MULSD instruction.  */\n+  /* 9-24  */\n+  COSTS_N_INSNS (24),\t\t\t/* cost of DIVSS instruction.  */\n+  /* 9-27  */\n+  COSTS_N_INSNS (27),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (15),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (26),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 2, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   bdver2_memcpy,\n   bdver2_memset,\n@@ -1140,6 +1251,16 @@ struct processor_costs bdver3_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (52),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (6),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of MULSD instruction.  */\n+  /* 9-24  */\n+  COSTS_N_INSNS (24),\t\t\t/* cost of DIVSS instruction.  */\n+  /* 9-27  */\n+  COSTS_N_INSNS (27),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (15),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (26),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 2, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   bdver3_memcpy,\n   bdver3_memset,\n@@ -1226,6 +1347,16 @@ struct processor_costs bdver4_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (52),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (6),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of MULSD instruction.  */\n+  /* 9-24  */\n+  COSTS_N_INSNS (24),\t\t\t/* cost of DIVSS instruction.  */\n+  /* 9-27  */\n+  COSTS_N_INSNS (27),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (15),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (26),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 2, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   bdver4_memcpy,\n   bdver4_memset,\n@@ -1264,15 +1395,17 @@ struct processor_costs znver1_cost = {\n   {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI.  */\n    COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t HI.  */\n    COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t SI.  */\n-   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t DI.  */\n-   COSTS_N_INSNS (4)},\t\t\t/*\t\t\t      other.  */\n+   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t DI.  */\n+   COSTS_N_INSNS (3)},\t\t\t/*\t\t\t      other.  */\n   0,\t\t\t\t\t/* cost of multiply per each bit\n \t\t\t\t\t    set.  */\n-  {COSTS_N_INSNS (19),\t\t\t/* cost of a divide/mod for QI.  */\n-   COSTS_N_INSNS (35),\t\t\t/*\t\t\t    HI.  */\n-   COSTS_N_INSNS (51),\t\t\t/*\t\t\t    SI.  */\n-   COSTS_N_INSNS (83),\t\t\t/*\t\t\t    DI.  */\n-   COSTS_N_INSNS (83)},\t\t\t/*\t\t\t    other.  */\n+   /* Depending on parameters, idiv can get faster on ryzen.  This is upper\n+      bound.  */\n+  {COSTS_N_INSNS (16),\t\t\t/* cost of a divide/mod for QI.  */\n+   COSTS_N_INSNS (22),\t\t\t/*\t\t\t    HI.  */\n+   COSTS_N_INSNS (30),\t\t\t/*\t\t\t    SI.  */\n+   COSTS_N_INSNS (45),\t\t\t/*\t\t\t    DI.  */\n+   COSTS_N_INSNS (45)},\t\t\t/*\t\t\t    other.  */\n   COSTS_N_INSNS (1),\t\t\t/* cost of movsx.  */\n   COSTS_N_INSNS (1),\t\t\t/* cost of movzx.  */\n   8,\t\t\t\t\t/* \"large\" insn.  */\n@@ -1310,12 +1443,23 @@ struct processor_costs znver1_cost = {\n      time).  */\n   100,\t\t\t\t\t/* number of parallel prefetches.  */\n   3,\t\t\t\t\t/* Branch cost.  */\n-  COSTS_N_INSNS (6),\t\t\t/* cost of FADD and FSUB insns.  */\n-  COSTS_N_INSNS (6),\t\t\t/* cost of FMUL instruction.  */\n-  COSTS_N_INSNS (42),\t\t\t/* cost of FDIV instruction.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n-  COSTS_N_INSNS (52),\t\t\t/* cost of FSQRT instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FMUL instruction.  */\n+  /* Latency of fdiv is 8-15.  */\n+  COSTS_N_INSNS (15),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FCHS instruction.  */\n+  /* Latency of fsqrt is 4-10.  */\n+  COSTS_N_INSNS (10),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (3),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (10),\t\t\t/* cost of DIVSS instruction.  */\n+  /* 9-13  */\n+  COSTS_N_INSNS (13),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (10),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (15),\t\t\t/* cost of SQRTSD instruction.  */\n   /* Zen can execute 4 integer operations per cycle. FP operations take 3 cycles\n      and it can execute 2 integer additions and 2 multiplications thus\n      reassociation may make sense up to with of 6.  SPEC2k6 bencharks suggests\n@@ -1413,6 +1557,14 @@ const struct processor_costs btver1_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (35),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (3),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (13),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (17),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (14),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (48),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   btver1_memcpy,\n   btver1_memset,\n@@ -1499,6 +1651,14 @@ const struct processor_costs btver2_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (35),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (3),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (13),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (19),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (16),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (21),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   btver2_memcpy,\n   btver2_memset,\n@@ -1576,6 +1736,14 @@ struct processor_costs pentium4_cost = {\n   COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (43),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (4),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (23),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (38),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (23),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (38),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   pentium4_memcpy,\n   pentium4_memset,\n@@ -1656,6 +1824,14 @@ struct processor_costs nocona_cost = {\n   COSTS_N_INSNS (3),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (3),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (44),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (5),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (7),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (7),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (32),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (40),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (32),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (41),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 1, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   nocona_memcpy,\n   nocona_memset,\n@@ -1734,6 +1910,14 @@ struct processor_costs atom_cost = {\n   COSTS_N_INSNS (8),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (8),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (40),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (5),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (31),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (60),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (31),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (63),\t\t\t/* cost of SQRTSD instruction.  */\n   2, 2, 2, 2,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   atom_memcpy,\n   atom_memset,\n@@ -1812,6 +1996,14 @@ struct processor_costs slm_cost = {\n   COSTS_N_INSNS (8),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (8),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (40),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (3),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (39),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (69),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (35),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 2, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   slm_memcpy,\n   slm_memset,\n@@ -1890,6 +2082,14 @@ struct processor_costs intel_cost = {\n   COSTS_N_INSNS (8),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (8),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (40),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (8),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (40),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (40),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 4, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   intel_memcpy,\n   intel_memset,\n@@ -1978,6 +2178,14 @@ struct processor_costs generic_cost = {\n   COSTS_N_INSNS (8),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (8),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (40),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (8),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (40),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (40),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 2, 1, 1,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   generic_memcpy,\n   generic_memset,\n@@ -2065,6 +2273,14 @@ struct processor_costs core_cost = {\n   COSTS_N_INSNS (8),\t\t\t/* cost of FABS instruction.  */\n   COSTS_N_INSNS (8),\t\t\t/* cost of FCHS instruction.  */\n   COSTS_N_INSNS (40),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (3),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (18),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (32),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (30),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (58),\t\t\t/* cost of SQRTSD instruction.  */\n   1, 4, 2, 2,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n   core_memcpy,\n   core_memset,"}]}