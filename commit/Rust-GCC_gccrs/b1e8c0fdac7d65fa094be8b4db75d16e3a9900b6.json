{"sha": "b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFlOGMwZmRhYzdkNjVmYTA5NGJlOGI0ZGI3NWQxNmUzYTk5MDBiNg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2004-08-02T16:45:52Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2004-08-02T16:45:52Z"}, "message": "libiberty.h (XDELETE, [...]): Remove any const-qualification before disposal.\n\ninclude/\n        * libiberty.h (XDELETE, XDELETEVEC, XRESIZEVEC): Remove any\n        const-qualification before disposal.\n\ngcc/\n        * vec.h (DEF_VEC_P): Add proper cast to uses of vec_o_reserve and\n        vec_p_reserve.\n        * langhooks.h (lang_hooks::builtin_function): Rename parameter\n        from \"class\" to \"bt_class\".\n\nFrom-SVN: r85441", "tree": {"sha": "bf0f8b7e626dc9c8437fc98e1faad01c2a368052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf0f8b7e626dc9c8437fc98e1faad01c2a368052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8965ece1043514b1f829647a48b4e1059b4ada81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8965ece1043514b1f829647a48b4e1059b4ada81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8965ece1043514b1f829647a48b4e1059b4ada81"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "23750e3751a17fc856da6e2e9cac9832f89dc1b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6", "patch": "@@ -1,3 +1,10 @@\n+2004-08-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* vec.h (DEF_VEC_P): Add proper cast to uses of vec_o_reserve and\n+\tvec_p_reserve. \n+\t* langhooks.h (lang_hooks::builtin_function): Rename parameter\n+\tfrom \"class\" to \"bt_class\".\n+\n 2004-08-02  Paul Brook  <paul@codesourcery.com>\n \n \tPR rtl-optimization/15068"}, {"sha": "108b4515e31ee817086ba2fbecd91008369b7c8a", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6", "patch": "@@ -411,7 +411,7 @@ struct lang_hooks\n      the name to be called if we can't opencode the function.  If\n      ATTRS is nonzero, use that for the function's attribute list.  */\n   tree (*builtin_function) (const char *name, tree type, int function_code,\n-\t\t\t    enum built_in_class class,\n+\t\t\t    enum built_in_class bt_class,\n \t\t\t    const char *library_name, tree attrs);\n \n   /* Whenever you add entries here, make sure you adjust langhooks-def.h"}, {"sha": "33d9bf6a6dd2fafd8589fd60af31074a6e03aa0a", "filename": "gcc/vec.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6", "patch": "@@ -390,7 +390,7 @@ static inline int VEC_OP (TDEF,iterate)\t\t\t  \t     \t  \\\n static inline VEC (TDEF) *VEC_OP (TDEF,alloc)\t\t\t\t  \\\n      (int alloc_ MEM_STAT_DECL)\t\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n-  return vec_p_reserve (NULL, alloc_ - !alloc_ PASS_MEM_STAT);\t\t  \\\n+  return (VEC (TDEF) *) vec_p_reserve (NULL, alloc_ - !alloc_ PASS_MEM_STAT);\\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline size_t VEC_OP (TDEF,embedded_size)\t\t\t  \\\n@@ -419,7 +419,7 @@ static inline int VEC_OP (TDEF,reserve)\t       \t\t\t\t  \\\n   int extend = VEC_OP (TDEF,space) (*vec_, alloc_);\t\t\t  \\\n \t\t  \t\t\t\t\t\t\t  \\\n   if (extend)\t  \t\t\t\t\t\t\t  \\\n-    *vec_ = vec_p_reserve (*vec_, alloc_ PASS_MEM_STAT);\t\t  \\\n+    *vec_ = (VEC (TDEF) *) vec_p_reserve (*vec_, alloc_ PASS_MEM_STAT);   \\\n \t\t  \t\t\t\t\t\t\t  \\\n   return extend;\t\t\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n@@ -583,9 +583,9 @@ static inline int VEC_OP (TDEF,iterate)\t\t\t  \t     \t  \\\n static inline VEC (TDEF) *VEC_OP (TDEF,alloc)      \t\t\t  \\\n      (int alloc_ MEM_STAT_DECL)\t\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n-  return vec_o_reserve (NULL, alloc_ - !alloc_,\t\t\t\t  \\\n-\t\t\toffsetof (VEC(TDEF),vec), sizeof (TDEF)\t\t  \\\n-\t\t\tPASS_MEM_STAT);\t\t\t\t\t  \\\n+  return (VEC (TDEF) *) vec_o_reserve (NULL, alloc_ - !alloc_,\t\t  \\\n+                                       offsetof (VEC(TDEF),vec), sizeof (TDEF)\\\n+                                       PASS_MEM_STAT);\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n static inline size_t VEC_OP (TDEF,embedded_size)\t\t\t  \\\n@@ -614,7 +614,7 @@ static inline int VEC_OP (TDEF,reserve)\t   \t    \t\t\t  \\\n   int extend = VEC_OP (TDEF,space) (*vec_, alloc_);\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n   if (extend)\t\t\t\t\t\t\t\t  \\\n-    *vec_ = vec_o_reserve (*vec_, alloc_,\t\t\t\t  \\\n+    *vec_ = (VEC (TDEF) *) vec_o_reserve (*vec_, alloc_,\t\t  \\\n \t\t\t   offsetof (VEC(TDEF),vec), sizeof (TDEF)\t  \\\n \t\t\t   PASS_MEM_STAT);\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\"}, {"sha": "6fabb45307b17c9f048c0e1c63d89dd0a8a0da61", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6", "patch": "@@ -1,3 +1,8 @@\n+2004-08-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* libiberty.h (XDELETE, XDELETEVEC, XRESIZEVEC): Remove any\n+\tconst-qualification before disposal.\n+\n 2004-07-24  Bernardo Innocenti  <bernie@develer.com>\n \n \t* ansidecl.h (ARG_UNUSED): New Macro."}, {"sha": "a90b4ddcbe857084e05c15823c4b3cc998a34d76", "filename": "include/libiberty.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=b1e8c0fdac7d65fa094be8b4db75d16e3a9900b6", "patch": "@@ -261,14 +261,14 @@ extern double physmem_available PARAMS ((void));\n \n #define XNEW(T)\t\t\t((T *) xmalloc (sizeof (T)))\n #define XCNEW(T)\t\t((T *) xcalloc (1, sizeof (T)))\n-#define XDELETE(P)\t\tfree ((P))\n+#define XDELETE(P)\t\tfree ((void*) (P))\n \n /* Array allocators.  */\n \n #define XNEWVEC(T, N)\t\t((T *) xmalloc (sizeof (T) * (N)))\n #define XCNEWVEC(T, N)\t\t((T *) xcalloc ((N), sizeof (T)))\n-#define XRESIZEVEC(T, P, N)\t((T *) xrealloc ((P), sizeof (T) * (N)))\n-#define XDELETEVEC(P)\t\tfree ((P))\n+#define XRESIZEVEC(T, P, N)\t((T *) xrealloc ((void *) (P), sizeof (T) * (N)))\n+#define XDELETEVEC(P)\t\tfree ((void*) (P))\n \n /* Allocators for variable-sized structures and raw buffers.  */\n "}]}