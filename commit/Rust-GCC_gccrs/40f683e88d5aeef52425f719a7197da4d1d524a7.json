{"sha": "40f683e88d5aeef52425f719a7197da4d1d524a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmNjgzZTg4ZDVhZWVmNTI0MjVmNzE5YTcxOTdkYTRkMWQ1MjRhNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-10-24T11:22:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-10-24T11:22:42Z"}, "message": "tree-vrp.c (evrp_dom_walker::before_dom_children): Ignore backedges when identifying the single predecessor to take conditional...\n\n2016-10-24  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vrp.c (evrp_dom_walker::before_dom_children): Ignore\n\tbackedges when identifying the single predecessor to take\n\tconditional info from.  Use SCEV to get at ranges for loop IVs.\n\t* lto-streamer-out.c (lto_write_mode_table): CSE inner mode to\n\tavoid false warning.\n\n\t* gcc.dg/tree-ssa/cunroll-13.c: Disable EVRP.\n\t* gcc.dg/tree-ssa/pr21458.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21458-2.c: New testcase for EVRP.\n\nFrom-SVN: r241470", "tree": {"sha": "f437f7ebf06c7ddb56c34be09fee7a257e8d2c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f437f7ebf06c7ddb56c34be09fee7a257e8d2c20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f683e88d5aeef52425f719a7197da4d1d524a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f683e88d5aeef52425f719a7197da4d1d524a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f683e88d5aeef52425f719a7197da4d1d524a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f683e88d5aeef52425f719a7197da4d1d524a7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a5792b660b24aed969139573707bc20702c81d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a5792b660b24aed969139573707bc20702c81d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a5792b660b24aed969139573707bc20702c81d4"}], "stats": {"total": 94, "additions": 78, "deletions": 16}, "files": [{"sha": "e8ddeb014f209a36df91bd0809431f438e24842a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40f683e88d5aeef52425f719a7197da4d1d524a7", "patch": "@@ -1,3 +1,11 @@\n+2016-10-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (evrp_dom_walker::before_dom_children): Ignore\n+\tbackedges when identifying the single predecessor to take\n+\tconditional info from.  Use SCEV to get at ranges for loop IVs.\n+\t* lto-streamer-out.c (lto_write_mode_table): CSE inner mode to\n+\tavoid false warning.\n+\n 2016-10-24  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/78093"}, {"sha": "22d8ac90724339839290e3b5b137f6da7e45720f", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=40f683e88d5aeef52425f719a7197da4d1d524a7", "patch": "@@ -2720,8 +2720,9 @@ lto_write_mode_table (void)\n     if (streamer_mode_table[i])\n       {\n \tmachine_mode m = (machine_mode) i;\n-\tif (GET_MODE_INNER (m) != m)\n-\t  streamer_mode_table[(int) GET_MODE_INNER (m)] = 1;\n+\tmachine_mode inner_m = GET_MODE_INNER (m);\n+\tif (inner_m != m)\n+\t  streamer_mode_table[(int) inner_m] = 1;\n       }\n   /* First stream modes that have GET_MODE_INNER (m) == m,\n      so that we can refer to them afterwards.  */"}, {"sha": "eb0f9761511f5784c36136c6b75728d33ffdddb3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40f683e88d5aeef52425f719a7197da4d1d524a7", "patch": "@@ -1,3 +1,9 @@\n+2016-10-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/cunroll-13.c: Disable EVRP.\n+\t* gcc.dg/tree-ssa/pr21458.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21458-2.c: New testcase for EVRP.\n+\n 2016-10-24  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/78093"}, {"sha": "f3fe8b514687ec954633025eb734c0f29d5e4e1b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-13.c?ref=40f683e88d5aeef52425f719a7197da4d1d524a7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fdisable-tree-cunrolli -fdisable-tree-vrp1 -fdump-tree-cunroll-blocks-details\" } */\n+/* { dg-options \"-O3 -fdisable-tree-evrp -fdisable-tree-cunrolli -fdisable-tree-vrp1 -fdump-tree-cunroll-blocks-details\" } */\n struct a {int a[8];int b;};\n void\n t(struct a *a)\n@@ -8,7 +8,7 @@ t(struct a *a)\n     a->a[i]++;\n }\n /* This pass relies on the fact that we do not eliminate the redundant test for i early.\n-   It is necessary to disable all passes that do so.  At the moment it is vrp1 and cunrolli.  */\n+   It is necessary to disable all passes that do so.  At the moment it is evrp, vrp1 and cunrolli.  */\n /* { dg-final { scan-tree-dump-times \"Loop 1 iterates 123454 times\" 1 \"cunroll\" } } */\n /* { dg-final { scan-tree-dump-times \"Last iteration exit edge was proved true\" 1 \"cunroll\" } } */\n /* { dg-final { scan-tree-dump-times \"Exit condition of peeled iterations was eliminated\" 1 \"cunroll\" } } */"}, {"sha": "2aee42f4c05f683dca2202d09993c8ac8ec682fa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21458-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21458-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21458-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21458-2.c?ref=40f683e88d5aeef52425f719a7197da4d1d524a7", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp-details\" } */\n+\n+extern void g (void);\n+extern void bar (int);\n+\n+int\n+foo (int a)\n+{\n+  int i;\n+\n+  for (i = 1; i < 100; i++)\n+    {\n+      if (i)\n+\tg ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Predicate evaluates to: 1\" 1 \"evrp\" } } */"}, {"sha": "97d17f21cfbbaf2f4fd5aba23574eefe4dc928b1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21458.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21458.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21458.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21458.c?ref=40f683e88d5aeef52425f719a7197da4d1d524a7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n \n extern void g (void);\n extern void bar (int);"}, {"sha": "fcdb3417bb3b3fa26bee8cd66ef2e5457134903c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f683e88d5aeef52425f719a7197da4d1d524a7/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=40f683e88d5aeef52425f719a7197da4d1d524a7", "patch": "@@ -10693,12 +10693,29 @@ edge\n evrp_dom_walker::before_dom_children (basic_block bb)\n {\n   tree op0 = NULL_TREE;\n+  edge_iterator ei;\n+  edge e;\n \n   push_value_range (NULL_TREE, NULL);\n-  if (single_pred_p (bb))\n+\n+  edge pred_e = NULL;\n+  FOR_EACH_EDGE (e, ei, bb->preds)\n     {\n-      edge e = single_pred_edge (bb);\n-      gimple *stmt = last_stmt (e->src);\n+      /* Ignore simple backedges from this to allow recording conditions\n+\t in loop headers.  */\n+      if (dominated_by_p (CDI_DOMINATORS, e->src, e->dest))\n+\tcontinue;\n+      if (! pred_e)\n+\tpred_e = e;\n+      else\n+\t{\n+\t  pred_e = NULL;\n+\t  break;\n+\t}\n+    }\n+  if (pred_e)\n+    {\n+      gimple *stmt = last_stmt (pred_e->src);\n       if (stmt\n \t  && gimple_code (stmt) == GIMPLE_COND\n \t  && (op0 = gimple_cond_lhs (stmt))\n@@ -10715,7 +10732,7 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t    op1 = drop_tree_overflow (op1);\n \n \t  /* If condition is false, invert the cond.  */\n-\t  if (e->flags & EDGE_FALSE_VALUE)\n+\t  if (pred_e->flags & EDGE_FALSE_VALUE)\n \t    code = invert_tree_comparison (gimple_cond_code (stmt),\n \t\t\t\t\t   HONOR_NANS (op0));\n \t  /* Add VR when (OP0 CODE OP1) condition is true.  */\n@@ -10743,11 +10760,7 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n     }\n \n   /* Visit PHI stmts and discover any new VRs possible.  */\n-  gimple_stmt_iterator gsi;\n-  edge e;\n-  edge_iterator ei;\n   bool has_unvisited_preds = false;\n-\n   FOR_EACH_EDGE (e, ei, bb->preds)\n     if (e->flags & EDGE_EXECUTABLE\n \t&& !(e->src->flags & BB_VISITED))\n@@ -10761,12 +10774,26 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n     {\n       gphi *phi = gpi.phi ();\n       tree lhs = PHI_RESULT (phi);\n+      if (virtual_operand_p (lhs))\n+\tcontinue;\n       value_range vr_result = VR_INITIALIZER;\n+      bool interesting = stmt_interesting_for_vrp (phi);\n       if (!has_unvisited_preds\n-\t  && stmt_interesting_for_vrp (phi))\n+\t  && interesting)\n \textract_range_from_phi_node (phi, &vr_result);\n       else\n-\tset_value_range_to_varying (&vr_result);\n+\t{\n+\t  set_value_range_to_varying (&vr_result);\n+\t  /* When we have an unvisited executable predecessor we can't\n+\t     use PHI arg ranges which may be still UNDEFINED but have\n+\t     to use VARYING for them.  But we can still resort to\n+\t     SCEV for loop header PHIs.  */\n+\t  struct loop *l;\n+\t  if (interesting\n+\t      && (l = loop_containing_stmt (phi))\n+\t      && l->header == gimple_bb (phi))\n+\t    adjust_range_with_scev (&vr_result, l, phi, lhs);\n+\t}\n       update_value_range (lhs, &vr_result);\n \n       /* Mark PHIs whose lhs we fully propagate for removal.  */\n@@ -10778,7 +10805,8 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n   edge taken_edge = NULL;\n \n   /* Visit all other stmts and discover any new VRs possible.  */\n-  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+  for (gimple_stmt_iterator gsi = gsi_start_bb (bb);\n+       !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       gimple *stmt = gsi_stmt (gsi);\n       tree output = NULL_TREE;"}]}