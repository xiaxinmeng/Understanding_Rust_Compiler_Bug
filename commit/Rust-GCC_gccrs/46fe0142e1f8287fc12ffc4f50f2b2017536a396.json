{"sha": "46fe0142e1f8287fc12ffc4f50f2b2017536a396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmZTAxNDJlMWY4Mjg3ZmMxMmZmYzRmNTBmMmIyMDE3NTM2YTM5Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-20T13:27:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-20T13:27:46Z"}, "message": "[multiple changes]\n\n2009-07-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat1drv.adb (Gnat1drv): Set operating mode to Generate_Code when\n\tCodePeer_Mode is set, to benefit from full front-end expansion\n\t(e.g. generics).\n\n2009-07-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb: Add guard.\n\n\t* exp_disp.adb, sem_disp.adb (Make_DT): Check underlying view of type\n\tfor possible attribute definition of External_Tag, in case clause\n\tappears in the private part of a package.\n\nFrom-SVN: r149816", "tree": {"sha": "7c69fb55e5b3b96a3f71edeb69caf5474d14d555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c69fb55e5b3b96a3f71edeb69caf5474d14d555"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46fe0142e1f8287fc12ffc4f50f2b2017536a396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fe0142e1f8287fc12ffc4f50f2b2017536a396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fe0142e1f8287fc12ffc4f50f2b2017536a396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fe0142e1f8287fc12ffc4f50f2b2017536a396/comments", "author": null, "committer": null, "parents": [{"sha": "f043707fcfe68d11d4a7d45ffad3b3d40f6923f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f043707fcfe68d11d4a7d45ffad3b3d40f6923f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f043707fcfe68d11d4a7d45ffad3b3d40f6923f1"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "e16a9be138fedf024c746aa8db4002be82469102", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe0142e1f8287fc12ffc4f50f2b2017536a396/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe0142e1f8287fc12ffc4f50f2b2017536a396/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=46fe0142e1f8287fc12ffc4f50f2b2017536a396", "patch": "@@ -1,3 +1,17 @@\n+2009-07-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb (Gnat1drv): Set operating mode to Generate_Code when\n+\tCodePeer_Mode is set, to benefit from full front-end expansion\n+\t(e.g. generics).\n+\n+2009-07-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb: Add guard.\n+\n+\t* exp_disp.adb, sem_disp.adb (Make_DT): Check underlying view of type\n+\tfor possible attribute definition of External_Tag, in case clause\n+\tappears in the private part of a package.\n+\n 2009-07-20  Jerome Guitton  <guitton@adacore.com>\n \n \t* gcc-interface/Makefile.in: cleanup powerpc linux target pairs."}, {"sha": "f60e7bc2db9035bf6b22afc0a9b855a62f7c7241", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe0142e1f8287fc12ffc4f50f2b2017536a396/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe0142e1f8287fc12ffc4f50f2b2017536a396/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=46fe0142e1f8287fc12ffc4f50f2b2017536a396", "patch": "@@ -4405,12 +4405,13 @@ package body Exp_Disp is\n       --  specific tagged type, as opposed to one of its ancestors.\n       --  If the type is an unconstrained type extension, we are building the\n       --  dispatch table of its anonymous base type, so the external tag, if\n-      --  any was specified, must be retrieved from the first subtype.\n+      --  any was specified, must be retrieved from the first subtype. Go to\n+      --  the full view in case the clause is in the private part.\n \n       else\n          declare\n             Def : constant Node_Id := Get_Attribute_Definition_Clause\n-                                        (First_Subtype (Typ),\n+                                        (Underlying_Type (First_Subtype (Typ)),\n                                          Attribute_External_Tag);\n \n             Old_Val : String_Id;"}, {"sha": "c77d74fb2494d74f3f114c781b4a72b60ab97118", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe0142e1f8287fc12ffc4f50f2b2017536a396/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe0142e1f8287fc12ffc4f50f2b2017536a396/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=46fe0142e1f8287fc12ffc4f50f2b2017536a396", "patch": "@@ -184,11 +184,10 @@ procedure Gnat1drv is\n \n          Polling_Required := False;\n \n-         --  Set operating mode to check semantics with full front-end\n-         --  expansion, but no back-end code generation.\n+         --  Set operating mode to Generate_Code to benefit from full\n+         --  front-end expansion (e.g. generics).\n \n-         Operating_Mode := Check_Semantics;\n-         Debug_Flag_X   := True;\n+         Operating_Mode := Generate_Code;\n \n          --  We need SCIL generation of course\n "}, {"sha": "b8235e5e28cd54ce86169c03931c7b2bde6c1c49", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fe0142e1f8287fc12ffc4f50f2b2017536a396/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fe0142e1f8287fc12ffc4f50f2b2017536a396/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=46fe0142e1f8287fc12ffc4f50f2b2017536a396", "patch": "@@ -3644,15 +3644,16 @@ package body Sem_Res is\n               and then (Is_Class_Wide_Type (Designated_Type (A_Typ))\n                          or else (Nkind (A) = N_Attribute_Reference\n                                    and then\n-                                  Is_Class_Wide_Type (Etype (Prefix (A)))))\n+                                     Is_Class_Wide_Type (Etype (Prefix (A)))))\n               and then not Is_Class_Wide_Type (Designated_Type (F_Typ))\n               and then not Is_Controlling_Formal (F)\n \n-              --  Disable these checks in imported C++ subprograms\n+              --  Disable these checks for call to imported C++ subprograms\n \n-              and then not (Is_Imported (Entity (Name (N)))\n-                              and then Convention (Entity (Name (N)))\n-                                         = Convention_CPP)\n+              and then not\n+                (Is_Entity_Name (Name (N))\n+                  and then Is_Imported (Entity (Name (N)))\n+                  and then Convention (Entity (Name (N))) = Convention_CPP)\n             then\n                Error_Msg_N\n                  (\"access to class-wide argument not allowed here!\", A);"}]}