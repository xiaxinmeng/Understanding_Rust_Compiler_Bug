{"sha": "fc47a2fd42f26f36a9e1c6be95694552ae9e01c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM0N2EyZmQ0MmYyNmYzNmE5ZTFjNmJlOTU2OTQ1NTJhZTllMDFjOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-05-25T13:56:16Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-05-25T13:56:16Z"}, "message": "re PR rtl-optimization/83628 (performance regression when accessing arrays on alpha)\n\n\tPR target/83628\n\t* config/alpha/alpha.md (ashlsi3): New insn pattern.\n\t(*ashlsi_se): Rename from *ashldi_se.  Define as sign\n\textension of SImode operation.  Use const123_operand predicate.\n\t(*saddsi_1): Remove.\n\t(*saddl_se_1): Ditto.\n\t(*ssubsi_1): Ditto.\n\t(*ssubl_se_1): Ditto.\n\t* config/alpha/predicates.md (const123_operand): New predicate.\n\t* config/alpha/constraints.md (P): Use IN_RANGE.\n\nFrom-SVN: r260760", "tree": {"sha": "3c802d8d367544bebb6152b34c90993b74b5e98e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c802d8d367544bebb6152b34c90993b74b5e98e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "27312bf2148af2bea946fcec8f4c2e1231e8d63b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27312bf2148af2bea946fcec8f4c2e1231e8d63b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27312bf2148af2bea946fcec8f4c2e1231e8d63b"}], "stats": {"total": 106, "additions": 36, "deletions": 70}, "files": [{"sha": "04b94ff9ad69e3ece9a179b65c5cf63565e86351", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc47a2fd42f26f36a9e1c6be95694552ae9e01c9", "patch": "@@ -1,3 +1,16 @@\n+2018-05-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/83628\n+\t* config/alpha/alpha.md (ashlsi3): New insn pattern.\n+\t(*ashlsi_se): Rename from *ashldi_se.  Define as sign\n+\textension of SImode operation.  Use const123_operand predicate.\n+\t(*saddsi_1): Remove.\n+\t(*saddl_se_1): Ditto.\n+\t(*ssubsi_1): Ditto.\n+\t(*ssubl_se_1): Ditto.\n+\t* config/alpha/predicates.md (const123_operand): New predicate.\n+\t* config/alpha/constraints.md (P): Use IN_RANGE.\n+\n 2018-05-25  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-alias.h (refs_may_alias_p): Add tbaa_p bool parameter,"}, {"sha": "57c04f78d0faac645adcc64bb21ec03c355faa26", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 17, "deletions": 69, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=fc47a2fd42f26f36a9e1c6be95694552ae9e01c9", "patch": "@@ -527,21 +527,6 @@\n    s%P2add<modesuffix> %1,%3,%0\n    s%P2sub<modesuffix> %1,%n3,%0\")\n \n-(define_insn_and_split \"*saddsi_1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(plus:SI\n-\t (subreg:SI\n-\t  (ashift:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r,r\")\n-\t\t     (match_operand:DI 2 \"const23_operand\" \"I,I\")) 0)\n-\t (match_operand:SI 3 \"sext_add_operand\" \"rI,O\")))]\n-  \"\"\n-  \"#\"\n-  \"\"\n-  [(set (match_dup 0)\n-\t(plus:SI (ashift:SI (match_dup 1) (match_dup 2))\n-\t\t (match_dup 3)))]\n-  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n-\n (define_insn \"*saddl_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(sign_extend:DI\n@@ -554,23 +539,6 @@\n    s%P2addl %1,%3,%0\n    s%P2subl %1,%n3,%0\")\n \n-(define_insn_and_split \"*saddl_se_1\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(sign_extend:DI\n-\t (plus:SI\n-\t  (subreg:SI\n-\t   (ashift:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r,r\")\n-\t\t      (match_operand:DI 2 \"const23_operand\" \"I,I\")) 0)\n-\t (match_operand:SI 3 \"sext_add_operand\" \"rI,O\"))))]\n-  \"\"\n-  \"#\"\n-  \"\"\n-  [(set (match_dup 0)\n-\t(sign_extend:DI\n-\t (plus:SI (ashift:SI (match_dup 1) (match_dup 2))\n-\t\t  (match_dup 3))))]\n-  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n-\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(sign_extend:DI\n@@ -660,21 +628,6 @@\n   \"\"\n   \"s%P2sub<modesuffix> %1,%3,%0\")\n \n-(define_insn_and_split \"*ssubsi_1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(minus:SI\n-\t (subreg:SI\n-\t  (ashift:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"const23_operand\" \"I\")) 0)\n-\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"rI\")))]\n-  \"\"\n-  \"#\"\n-  \"\"\n-  [(set (match_dup 0)\n-\t(minus:SI (ashift:SI (match_dup 1) (match_dup 2))\n-\t\t  (match_dup 3)))]\n-  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n-\n (define_insn \"*ssubl_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n@@ -685,23 +638,6 @@\n   \"\"\n   \"s%P2subl %1,%3,%0\")\n \n-(define_insn_and_split \"*ssubl_se_1\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI\n-\t (minus:SI\n-\t  (subreg:SI\n-\t   (ashift:DI (match_operand:DI 1 \"reg_not_elim_operand\" \"r\")\n-\t\t      (match_operand:DI 2 \"const23_operand\" \"I\")) 0)\n-\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"rI\"))))]\n-  \"\"\n-  \"#\"\n-  \"\"\n-  [(set (match_dup 0)\n-\t(sign_extend:DI\n-\t (minus:SI (ashift:SI (match_dup 1) (match_dup 2))\n-\t\t   (match_dup 3))))]\n-  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n-\n (define_insn \"subv<mode>3\"\n   [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n \t(minus:I48MODE (match_operand:I48MODE 1 \"reg_or_0_operand\" \"rJ\")\n@@ -1260,13 +1196,25 @@\n }\n   [(set_attr \"type\" \"iadd,shift\")])\n \n-(define_insn \"*ashldi_se\"\n+(define_insn \"ashlsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ashift:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n+\t\t   (match_operand:SI 2 \"const123_operand\" \"P\")))]\n+  \"\"\n+{\n+  if (operands[2] == const1_rtx)\n+    return \"addl %r1,%r1,%0\";\n+  else\n+    return \"s%P2addl %r1,0,%0\";\n+}\n+  [(set_attr \"type\" \"iadd\")])\n+\n+(define_insn \"*ashlsi_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t (subreg:SI (ashift:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t\t       (match_operand:DI 2 \"const_int_operand\" \"P\"))\n-\t\t    0)))]\n-  \"IN_RANGE (INTVAL (operands[2]), 1, 3)\"\n+\t (ashift:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n+\t\t    (match_operand:SI 2 \"const123_operand\" \"P\"))))]\n+  \"\"\n {\n   if (operands[2] == const1_rtx)\n     return \"addl %r1,%r1,%0\";"}, {"sha": "b2640f71b0d68d6e7f6363ca59160d80728ae9c8", "filename": "gcc/config/alpha/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9/gcc%2Fconfig%2Falpha%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9/gcc%2Fconfig%2Falpha%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fconstraints.md?ref=fc47a2fd42f26f36a9e1c6be95694552ae9e01c9", "patch": "@@ -82,7 +82,7 @@\n (define_constraint \"P\"\n   \"The constant 1, 2 or 3\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival == 1 || ival == 2 || ival == 3\")))\n+       (match_test \"IN_RANGE (ival, 1, 3)\")))\n \n ;; Floating-point constant constraints.\n (define_constraint \"G\""}, {"sha": "016562e4b37e5bbb98e114f4e7448627dc7a3023", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc47a2fd42f26f36a9e1c6be95694552ae9e01c9/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=fc47a2fd42f26f36a9e1c6be95694552ae9e01c9", "patch": "@@ -74,6 +74,11 @@\n   (and (match_code \"const_int,const_wide_int,const_double,const_vector\")\n        (not (match_test \"op == CONST0_RTX (mode)\"))))\n \n+;; Return 1 if OP is the constant 1, 2 or 3.\n+(define_predicate \"const123_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 1, 3)\")))\n+\n ;; Return 1 if OP is the constant 2 or 3.\n (define_predicate \"const23_operand\"\n   (and (match_code \"const_int\")"}]}