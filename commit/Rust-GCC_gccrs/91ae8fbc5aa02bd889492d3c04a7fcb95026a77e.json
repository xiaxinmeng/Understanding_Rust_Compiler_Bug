{"sha": "91ae8fbc5aa02bd889492d3c04a7fcb95026a77e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFhZThmYmM1YWEwMmJkODg5NDkyZDNjMDRhN2ZjYjk1MDI2YTc3ZQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:24Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:24Z"}, "message": "VAX: Remove `c' operand format specifier overload\n\nThe `c' operand format specifier is handled directly by the middle end\nin `output_asm_insn':\n\n   %cN means require operand N to be a constant\n      and print the constant expression with no punctuation.\n\nhowever it resorts to the target for constants that are not valid\naddresses:\n\n\t    else if (letter == 'c')\n\t      {\n\t\tif (CONSTANT_ADDRESS_P (operands[opnum]))\n\t\t  output_addr_const (asm_out_file, operands[opnum]);\n\t\telse\n\t\t  output_operand (operands[opnum], 'c');\n\t      }\n\nThe VAX backend expects the fallback never to happen and overloads `c'\nwith the branch condition code.  This is confusing however and it is not\nlike we are short of letters, so instead make the branch condition code\nuse `k', and then for consistency make `K' the reverse branch condition\ncode format specifier.  This is safe to do as we provide no means to use\na computed branch condition code in user `asm'.\n\n\tgcc/\n\t* config/vax/vax.c (print_operand): Replace `c' and `C' with\n\t`k' and `K' respectively.\n\t* config/vax/vax.md (*branch, *branch_reversed): Update\n\taccordingly.", "tree": {"sha": "37e369e06d42e1958c9deaa10e8867b7419e07aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e369e06d42e1958c9deaa10e8867b7419e07aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91ae8fbc5aa02bd889492d3c04a7fcb95026a77e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ae8fbc5aa02bd889492d3c04a7fcb95026a77e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ae8fbc5aa02bd889492d3c04a7fcb95026a77e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ae8fbc5aa02bd889492d3c04a7fcb95026a77e/comments", "author": null, "committer": null, "parents": [{"sha": "a27d5f9a73978f20cfef1796a94f6a1a82438146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27d5f9a73978f20cfef1796a94f6a1a82438146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a27d5f9a73978f20cfef1796a94f6a1a82438146"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "0b3b76ed6da8241d1f909e3ad7d8eabc8d55967f", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ae8fbc5aa02bd889492d3c04a7fcb95026a77e/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ae8fbc5aa02bd889492d3c04a7fcb95026a77e/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=91ae8fbc5aa02bd889492d3c04a7fcb95026a77e", "patch": "@@ -509,9 +509,9 @@ print_operand (FILE *file, rtx x, int code)\n     fputc (ASM_DOUBLE_CHAR, file);\n   else if (code == '|')\n     fputs (REGISTER_PREFIX, file);\n-  else if (code == 'c')\n+  else if (code == 'k')\n     fputs (cond_name (x), file);\n-  else if (code == 'C')\n+  else if (code == 'K')\n     fputs (rev_cond_name (x), file);\n   else if (code == 'D' && CONST_INT_P (x) && INTVAL (x) < 0)\n     fprintf (file, \"$\" NEG_HWI_PRINT_HEX16, INTVAL (x));"}, {"sha": "e3018a0ee06ccbc9cebf19e5901fc910d327d997", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ae8fbc5aa02bd889492d3c04a7fcb95026a77e/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ae8fbc5aa02bd889492d3c04a7fcb95026a77e/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=91ae8fbc5aa02bd889492d3c04a7fcb95026a77e", "patch": "@@ -1111,7 +1111,7 @@\n \t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"j%c0 %l1\")\n+  \"j%k0 %l1\")\n \n ;; Recognize reversed jumps.\n (define_insn \"*branch_reversed\"\n@@ -1122,7 +1122,7 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 1 \"\" \"\"))))]\n   \"\"\n-  \"j%C0 %l1\") ; %C0 negates condition\n+  \"j%K0 %l1\") ; %K0 negates condition\n \f\n ;; Recognize jbs, jlbs, jbc and jlbc instructions.  Note that the operand\n ;; of jlbs and jlbc insns are SImode in the hardware.  However, if it is"}]}