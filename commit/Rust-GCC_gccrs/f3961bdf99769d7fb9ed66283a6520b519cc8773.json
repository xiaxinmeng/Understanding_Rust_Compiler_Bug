{"sha": "f3961bdf99769d7fb9ed66283a6520b519cc8773", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM5NjFiZGY5OTc2OWQ3ZmI5ZWQ2NjI4M2E2NTIwYjUxOWNjODc3Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-09-27T09:27:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-09-27T09:27:05Z"}, "message": "cmath (__pow_helper): Remove.\n\n2010-09-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/c_std/cmath (__pow_helper): Remove.\n\t(__cmath_power): Remove declaration.\n\t* include/c_global/cmath: Likewise.\n\t* include/std/complex (__complex_pow_unsigned): Add.\n\t(pow(const complex<_Tp>&, int)): Use the latter.\n\t* include/c_std/cmath.tcc: Remove file.\n\t* include/c_global/cmath.tcc: Likewise.\n\t* acinclude.m4: Adjust.\n\t* include/Makefile.am: Likewise.\n\t* configure: Regenerate.\n\t* include/Makefile.in: Likewise.\n\nFrom-SVN: r164645", "tree": {"sha": "e91a88e04ef45c0add337e06a9114ba5e687d471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e91a88e04ef45c0add337e06a9114ba5e687d471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3961bdf99769d7fb9ed66283a6520b519cc8773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3961bdf99769d7fb9ed66283a6520b519cc8773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3961bdf99769d7fb9ed66283a6520b519cc8773", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3961bdf99769d7fb9ed66283a6520b519cc8773/comments", "author": null, "committer": null, "parents": [{"sha": "6300156042c8ea54f146abe9a7deb9c7ebdef655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6300156042c8ea54f146abe9a7deb9c7ebdef655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6300156042c8ea54f146abe9a7deb9c7ebdef655"}], "stats": {"total": 250, "additions": 52, "deletions": 198}, "files": [{"sha": "42ea0b3d32662fe3d4a6c00abdadb7fbef2321d7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f3961bdf99769d7fb9ed66283a6520b519cc8773", "patch": "@@ -1,3 +1,17 @@\n+2010-09-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/c_std/cmath (__pow_helper): Remove.\n+\t(__cmath_power): Remove declaration.\n+\t* include/c_global/cmath: Likewise.\n+\t* include/std/complex (__complex_pow_unsigned): Add.\n+\t(pow(const complex<_Tp>&, int)): Use the latter.\n+\t* include/c_std/cmath.tcc: Remove file.\n+\t* include/c_global/cmath.tcc: Likewise.\n+\t* acinclude.m4: Adjust.\n+\t* include/Makefile.am: Likewise.\n+\t* configure: Regenerate.\n+\t* include/Makefile.in: Likewise.\n+\n 2010-09-22  David Krauss  <potswa@mac.com>\n \n \tPR libstdc++/45628"}, {"sha": "3b14f02dd3b6965cbfc355c5196a94bbac119f1d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=f3961bdf99769d7fb9ed66283a6520b519cc8773", "patch": "@@ -1695,16 +1695,11 @@ AC_DEFUN([GLIBCXX_ENABLE_CHEADERS], [\n      c_compatibility=yes\n   fi\n \n-  if test $enable_cheaders = c_global || test $enable_cheaders = c_std; then\n-     c_extra=yes\n-  fi\n-\n   AC_SUBST(C_INCLUDE_DIR)\n   GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_C, test $enable_cheaders = c)\n   GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_C_STD, test $enable_cheaders = c_std)\n   GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_C_GLOBAL, test $enable_cheaders = c_global)\n   GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_COMPATIBILITY, test $c_compatibility = yes)\n-  GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_EXTRA, test $c_extra = yes)\n ])\n \n "}, {"sha": "166d2e3021aaade9775eb8e398e24a2f6a42021e", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=f3961bdf99769d7fb9ed66283a6520b519cc8773", "patch": "@@ -649,8 +649,6 @@ ENABLE_PARALLEL_TRUE\n GLIBCXX_BUILD_DEBUG_FALSE\n GLIBCXX_BUILD_DEBUG_TRUE\n DEBUG_FLAGS\n-GLIBCXX_C_HEADERS_EXTRA_FALSE\n-GLIBCXX_C_HEADERS_EXTRA_TRUE\n GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE\n GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE\n GLIBCXX_C_HEADERS_C_GLOBAL_FALSE\n@@ -11468,7 +11466,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11471 \"configure\"\n+#line 11469 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11574,7 +11572,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11577 \"configure\"\n+#line 11575 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14914,7 +14912,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 14917 \"configure\"\n+#line 14915 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15282,7 +15280,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15285 \"configure\"\n+#line 15283 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15319,7 +15317,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15322 \"configure\"\n+#line 15320 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15356,7 +15354,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15359 \"configure\"\n+#line 15357 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15394,7 +15392,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15397 \"configure\"\n+#line 15395 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15470,7 +15468,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15473 \"configure\"\n+#line 15471 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16071,11 +16069,6 @@ $as_echo \"$as_me: \\\"C\\\" header strategy set to $enable_cheaders\" >&6;}\n      c_compatibility=yes\n   fi\n \n-  if test $enable_cheaders = c_global || test $enable_cheaders = c_std; then\n-     c_extra=yes\n-  fi\n-\n-\n \n \n \n@@ -58987,15 +58980,6 @@ else\n fi\n \n \n-    if test $c_extra = yes; then\n-  GLIBCXX_C_HEADERS_EXTRA_TRUE=\n-  GLIBCXX_C_HEADERS_EXTRA_FALSE='#'\n-else\n-  GLIBCXX_C_HEADERS_EXTRA_TRUE='#'\n-  GLIBCXX_C_HEADERS_EXTRA_FALSE=\n-fi\n-\n-\n     if test $enable_libstdcxx_debug = yes; then\n   GLIBCXX_BUILD_DEBUG_TRUE=\n   GLIBCXX_BUILD_DEBUG_FALSE='#'\n@@ -59453,10 +59437,6 @@ if test -z \"${GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE}\" && test -z \"${GLIBCXX_C_HEA\n   as_fn_error \"conditional \\\"GLIBCXX_C_HEADERS_COMPATIBILITY\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n-if test -z \"${GLIBCXX_C_HEADERS_EXTRA_TRUE}\" && test -z \"${GLIBCXX_C_HEADERS_EXTRA_FALSE}\"; then\n-  as_fn_error \"conditional \\\"GLIBCXX_C_HEADERS_EXTRA\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n if test -z \"${GLIBCXX_BUILD_DEBUG_TRUE}\" && test -z \"${GLIBCXX_BUILD_DEBUG_FALSE}\"; then\n   as_fn_error \"conditional \\\"GLIBCXX_BUILD_DEBUG\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "460e1ffa3a779027ef717850d42260bb3097cb1b", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=f3961bdf99769d7fb9ed66283a6520b519cc8773", "patch": "@@ -824,15 +824,8 @@ profile_impl_headers = \\\n \t${profile_impl_srcdir}/profiler_list_to_vector.h \\\n \t${profile_impl_srcdir}/profiler_list_to_slist.h\n \n-# Some of the different \"C\" header models need extra files.\n # Some \"C\" header schemes require the \"C\" compatibility headers.\n # For --enable-cheaders=c_std\n-if GLIBCXX_C_HEADERS_EXTRA\n-c_base_headers_extra = ${c_base_srcdir}/cmath.tcc\n-else\n-c_base_headers_extra =\n-endif\n-\n if GLIBCXX_C_HEADERS_COMPATIBILITY\n c_compatibility_headers_extra = ${c_compatibility_headers}\n else\n@@ -915,10 +908,10 @@ endif\n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n allstamped = \\\n-\tstamp-std stamp-bits stamp-c_base stamp-c_base_extra \\\n-\tstamp-c_compatibility  stamp-backward stamp-ext stamp-pb \\\n-\tstamp-tr1 stamp-tr1-impl stamp-decimal stamp-debug \\\n-\tstamp-parallel stamp-profile stamp-profile-impl stamp-host \n+\tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n+\tstamp-backward stamp-ext stamp-pb stamp-tr1 stamp-tr1-impl \\\n+\tstamp-decimal stamp-debug stamp-parallel stamp-profile \\\n+\tstamp-profile-impl stamp-host \n \n # List of all files that are created by explicit building, editing, or\n # catenation."}, {"sha": "f8a971865bc60289fde569e975f4fca76105d1fc", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=f3961bdf99769d7fb9ed66283a6520b519cc8773", "patch": "@@ -1058,13 +1058,10 @@ profile_impl_headers = \\\n \t${profile_impl_srcdir}/profiler_list_to_vector.h \\\n \t${profile_impl_srcdir}/profiler_list_to_slist.h\n \n-@GLIBCXX_C_HEADERS_EXTRA_FALSE@c_base_headers_extra = \n+@GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n-# Some of the different \"C\" header models need extra files.\n # Some \"C\" header schemes require the \"C\" compatibility headers.\n # For --enable-cheaders=c_std\n-@GLIBCXX_C_HEADERS_EXTRA_TRUE@c_base_headers_extra = ${c_base_srcdir}/cmath.tcc\n-@GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = ${c_compatibility_headers}\n host_srcdir = ${glibcxx_srcdir}/$(OS_INC_SRCDIR)\n host_builddir = ./${host_alias}/bits\n@@ -1138,10 +1135,10 @@ PCHFLAGS = -x c++-header -nostdinc++ $(CXXFLAGS)\n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n allstamped = \\\n-\tstamp-std stamp-bits stamp-c_base stamp-c_base_extra \\\n-\tstamp-c_compatibility  stamp-backward stamp-ext stamp-pb \\\n-\tstamp-tr1 stamp-tr1-impl stamp-decimal stamp-debug \\\n-\tstamp-parallel stamp-profile stamp-profile-impl stamp-host \n+\tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n+\tstamp-backward stamp-ext stamp-pb stamp-tr1 stamp-tr1-impl \\\n+\tstamp-decimal stamp-debug stamp-parallel stamp-profile \\\n+\tstamp-profile-impl stamp-host \n \n \n # List of all files that are created by explicit building, editing, or"}, {"sha": "3469b3884e8ad76fdf316b91fac90da6c3ae17a4", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=f3961bdf99769d7fb9ed66283a6520b519cc8773", "patch": "@@ -76,20 +76,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  // Forward declaration of a helper function.  This really should be\n-  // an `exported' forward declaration.\n-  template<typename _Tp>\n-    _Tp __cmath_power(_Tp, unsigned int);\n-\n-  template<typename _Tp>\n-    inline _Tp\n-    __pow_helper(_Tp __x, int __n)\n-    {\n-      return __n < 0\n-        ? _Tp(1)/__cmath_power(__x, -__n)\n-        : __cmath_power(__x, __n);\n-    }\n-\n   inline double\n   abs(double __x)\n   { return __builtin_fabs(__x); }\n@@ -859,10 +845,6 @@ _GLIBCXX_END_NAMESPACE\n #endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n #endif\n \n-#ifndef _GLIBCXX_EXPORT_TEMPLATE\n-# include <bits/cmath.tcc>\n-#endif\n-\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n #  if defined(_GLIBCXX_INCLUDE_AS_TR1)\n #    error C++0x header cannot be included from TR1 header"}, {"sha": "9f4c853a8eab61452a7703681a8f8acca52f54bd", "filename": "libstdc++-v3/include/c_global/cmath.tcc", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6300156042c8ea54f146abe9a7deb9c7ebdef655/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6300156042c8ea54f146abe9a7deb9c7ebdef655/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath.tcc?ref=6300156042c8ea54f146abe9a7deb9c7ebdef655", "patch": "@@ -1,55 +0,0 @@\n-// -*- C++ -*- C math library.\n-\n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n-// Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// This file was written by Gabriel Dos Reis <gdr@codesourcery.com>\n-\n-/** @file cmath.tcc\n- *  This is a Standard C++ Library file.\n- */\n-\n-#ifndef _GLIBCXX_CMATH_TCC\n-#define _GLIBCXX_CMATH_TCC 1\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n-  template<typename _Tp>\n-    inline _Tp\n-    __cmath_power(_Tp __x, unsigned int __n)\n-    {\n-      _Tp __y = __n % 2 ? __x : _Tp(1);\n-\n-      while (__n >>= 1)\n-        {\n-          __x = __x * __x;\n-          if (__n % 2)\n-            __y = __y * __x;\n-        }\n-\n-      return __y;\n-    }\n-\n-_GLIBCXX_END_NAMESPACE\n-\n-#endif"}, {"sha": "fcdfa15b95ca0a93efdc04816fa6802d55e9df49", "filename": "libstdc++-v3/include/c_std/cmath", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath?ref=f3961bdf99769d7fb9ed66283a6520b519cc8773", "patch": "@@ -77,10 +77,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  // Forward declaration of a helper function.  This really should be\n-  // an `exported' forward declaration.\n-  template<typename _Tp> _Tp __cmath_power(_Tp, unsigned int);\n-\n   inline double\n   abs(double __x)\n   { return __builtin_fabs(__x); }\n@@ -344,15 +340,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   modf(long double __x, long double* __iptr)\n   { return __builtin_modfl(__x, __iptr); }\n \n-  template<typename _Tp>\n-    inline _Tp\n-    __pow_helper(_Tp __x, int __n)\n-    {\n-      return __n < 0\n-        ? _Tp(1)/__cmath_power(__x, -__n)\n-        : __cmath_power(__x, __n);\n-    }\n-\n   using ::pow;\n \n   inline float\n@@ -590,8 +577,4 @@ _GLIBCXX_END_NAMESPACE\n #endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n #endif\n \n-#ifndef _GLIBCXX_EXPORT_TEMPLATE\n-# include <bits/cmath.tcc>\n-#endif\n-\n #endif"}, {"sha": "9f4c853a8eab61452a7703681a8f8acca52f54bd", "filename": "libstdc++-v3/include/c_std/cmath.tcc", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6300156042c8ea54f146abe9a7deb9c7ebdef655/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6300156042c8ea54f146abe9a7deb9c7ebdef655/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc?ref=6300156042c8ea54f146abe9a7deb9c7ebdef655", "patch": "@@ -1,55 +0,0 @@\n-// -*- C++ -*- C math library.\n-\n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n-// Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// This file was written by Gabriel Dos Reis <gdr@codesourcery.com>\n-\n-/** @file cmath.tcc\n- *  This is a Standard C++ Library file.\n- */\n-\n-#ifndef _GLIBCXX_CMATH_TCC\n-#define _GLIBCXX_CMATH_TCC 1\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n-  template<typename _Tp>\n-    inline _Tp\n-    __cmath_power(_Tp __x, unsigned int __n)\n-    {\n-      _Tp __y = __n % 2 ? __x : _Tp(1);\n-\n-      while (__n >>= 1)\n-        {\n-          __x = __x * __x;\n-          if (__n % 2)\n-            __y = __y * __x;\n-        }\n-\n-      return __y;\n-    }\n-\n-_GLIBCXX_END_NAMESPACE\n-\n-#endif"}, {"sha": "93056510e087057ed6536b97e2caa710dc506c52", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3961bdf99769d7fb9ed66283a6520b519cc8773/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=f3961bdf99769d7fb9ed66283a6520b519cc8773", "patch": "@@ -951,12 +951,32 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   //                          raised to the __y-th power.  The branch\n   //                          cut is on the negative axis.\n #ifndef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp>\n+    complex<_Tp>\n+    __complex_pow_unsigned(complex<_Tp> __x, unsigned __n)\n+    {\n+      complex<_Tp> __y = __n % 2 ? __x : complex<_Tp>(1);\n+\n+      while (__n >>= 1)\n+        {\n+          __x *= __x;\n+          if (__n % 2)\n+            __y *= __x;\n+        }\n+\n+      return __y;\n+    }\n+\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 844. complex pow return type is ambiguous.\n   template<typename _Tp>\n     inline complex<_Tp>\n     pow(const complex<_Tp>& __z, int __n)\n-    { return std::__pow_helper(__z, __n); }\n+    {\n+      return __n < 0\n+        ? complex<_Tp>(1) / std::__complex_pow_unsigned(__z, -__n)\n+        : std::__complex_pow_unsigned(__z, __n);\n+    }\n #endif\n \n   template<typename _Tp>"}]}