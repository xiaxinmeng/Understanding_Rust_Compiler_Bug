{"sha": "e8e818399d70c5a5a3d30a54d305c6e2b92e2c66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThlODE4Mzk5ZDcwYzVhNWEzZDMwYTU0ZDMwNWM2ZTJiOTJlMmM2Ng==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-09-23T10:07:50Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-09-23T10:07:50Z"}, "message": "AArch64: Implement missing _p64 intrinsics for vector permutes\n\nThis patch implements some missing vector permute intrinsics operating on poly64x2_t types.\nThey are implemented identically to their uint64x2_t brethren.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\ngcc/\n\tPR target/71233\n\t* config/aarch64/arm_neon.h (vtrn1q_p64, vtrn2q_p64, vuzp1q_p64,\n\tvuzp2q_p64, vzip1q_p64, vzip2q_p64): Define.\n\ngcc/testsuite/\n\tPR target/71233\n\t* gcc.target/aarch64/simd/trn_zip_p64_1.c: New test.", "tree": {"sha": "25325f2dd3f55ccb30d518bd82b32e403c7c0976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25325f2dd3f55ccb30d518bd82b32e403c7c0976"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8e818399d70c5a5a3d30a54d305c6e2b92e2c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e818399d70c5a5a3d30a54d305c6e2b92e2c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8e818399d70c5a5a3d30a54d305c6e2b92e2c66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e818399d70c5a5a3d30a54d305c6e2b92e2c66/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2868e4bcff2c7b882d01231f039459c00e59d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2868e4bcff2c7b882d01231f039459c00e59d7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2868e4bcff2c7b882d01231f039459c00e59d7b"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "e8c130f5e80696778b553572cf023cc880a2233e", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e818399d70c5a5a3d30a54d305c6e2b92e2c66/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e818399d70c5a5a3d30a54d305c6e2b92e2c66/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=e8e818399d70c5a5a3d30a54d305c6e2b92e2c66", "patch": "@@ -30568,6 +30568,17 @@ vtrn1q_u32 (uint32x4_t __a, uint32x4_t __b)\n #endif\n }\n \n+__extension__ extern __inline poly64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vtrn1q_p64 (poly64x2_t __a, poly64x2_t __b)\n+{\n+#ifdef __AARCH64EB__\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {3, 1});\n+#else\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {0, 2});\n+#endif\n+}\n+\n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtrn1q_u64 (uint64x2_t __a, uint64x2_t __b)\n@@ -30838,6 +30849,18 @@ vtrn2q_u64 (uint64x2_t __a, uint64x2_t __b)\n #endif\n }\n \n+\n+__extension__ extern __inline poly64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vtrn2q_p64 (poly64x2_t __a, poly64x2_t __b)\n+{\n+#ifdef __AARCH64EB__\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {2, 0});\n+#else\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {1, 3});\n+#endif\n+}\n+\n __extension__ extern __inline float16x4x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtrn_f16 (float16x4_t __a, float16x4_t __b)\n@@ -31484,6 +31507,17 @@ vuzp1q_u64 (uint64x2_t __a, uint64x2_t __b)\n #endif\n }\n \n+__extension__ extern __inline poly64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vuzp1q_p64 (poly64x2_t __a, poly64x2_t __b)\n+{\n+#ifdef __AARCH64EB__\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {3, 1});\n+#else\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {0, 2});\n+#endif\n+}\n+\n __extension__ extern __inline float16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vuzp2_f16 (float16x4_t __a, float16x4_t __b)\n@@ -31743,6 +31777,17 @@ vuzp2q_u64 (uint64x2_t __a, uint64x2_t __b)\n #endif\n }\n \n+__extension__ extern __inline poly64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vuzp2q_p64 (poly64x2_t __a, poly64x2_t __b)\n+{\n+#ifdef __AARCH64EB__\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {2, 0});\n+#else\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {1, 3});\n+#endif\n+}\n+\n __INTERLEAVE_LIST (uzp)\n \n /* vzip */\n@@ -32011,6 +32056,17 @@ vzip1q_u64 (uint64x2_t __a, uint64x2_t __b)\n #endif\n }\n \n+__extension__ extern __inline poly64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vzip1q_p64 (poly64x2_t __a, poly64x2_t __b)\n+{\n+#ifdef __AARCH64EB__\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {3, 1});\n+#else\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {0, 2});\n+#endif\n+}\n+\n __extension__ extern __inline float16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vzip2_f16 (float16x4_t __a, float16x4_t __b)\n@@ -32275,6 +32331,17 @@ vzip2q_u64 (uint64x2_t __a, uint64x2_t __b)\n #endif\n }\n \n+__extension__ extern __inline poly64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vzip2q_p64 (poly64x2_t __a, poly64x2_t __b)\n+{\n+#ifdef __AARCH64EB__\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {2, 0});\n+#else\n+  return __builtin_shuffle (__a, __b, (poly64x2_t) {1, 3});\n+#endif\n+}\n+\n __INTERLEAVE_LIST (zip)\n \n #undef __INTERLEAVE_LIST"}, {"sha": "a47321db80b0d4846c5878f61692056c2b94c1c1", "filename": "gcc/testsuite/gcc.target/aarch64/simd/trn_zip_p64_1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e818399d70c5a5a3d30a54d305c6e2b92e2c66/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Ftrn_zip_p64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e818399d70c5a5a3d30a54d305c6e2b92e2c66/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Ftrn_zip_p64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Ftrn_zip_p64_1.c?ref=e8e818399d70c5a5a3d30a54d305c6e2b92e2c66", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+#include <arm_neon.h>\n+\n+poly64x2_t\n+foo (poly64x2_t a, poly64x2_t b)\n+{\n+  return vtrn1q_p64 (a, b);\n+}\n+\n+poly64x2_t\n+foo1 (poly64x2_t a, poly64x2_t b)\n+{\n+  return vtrn2q_p64 (a, b);\n+}\n+\n+poly64x2_t\n+foo2 (poly64x2_t a, poly64x2_t b)\n+{\n+  return vuzp1q_p64 (a, b);\n+}\n+\n+poly64x2_t\n+foo3 (poly64x2_t a, poly64x2_t b)\n+{\n+  return vuzp2q_p64 (a, b);\n+}\n+\n+poly64x2_t\n+foo4 (poly64x2_t a, poly64x2_t b)\n+{\n+  return vzip1q_p64 (a, b);\n+}\n+\n+poly64x2_t\n+foo5 (poly64x2_t a, poly64x2_t b)\n+{\n+  return vzip2q_p64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times {zip1\\tv0.2d, v0.2d, v1.2d} 3 } } */\n+/* { dg-final { scan-assembler-times {zip2\\tv0.2d, v0.2d, v1.2d} 3 } } */\n+"}]}