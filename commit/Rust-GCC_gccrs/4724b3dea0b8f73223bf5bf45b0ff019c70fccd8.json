{"sha": "4724b3dea0b8f73223bf5bf45b0ff019c70fccd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcyNGIzZGVhMGI4ZjczMjIzYmY1YmY0NWIwZmYwMTljNzBmY2NkOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-08-15T09:30:20Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-08-15T09:30:20Z"}, "message": "(declare_hidden_char_array): New function to factor out duplicate code in declare_function_name.\n\n(declare_hidden_char_array): New function to\nfactor out duplicate code in declare_function_name.\nDon't set DECL_EXTERNAL (which is illegal without TREE_PUBLIC)\nto prevent output; instead, set TREE_ASM_WRITTEN.\n\n(declare_function_name): Use declare_hidden_char_array.\n\nFrom-SVN: r5161", "tree": {"sha": "040674da827827c22eb4f8f80be94e7d461bf148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/040674da827827c22eb4f8f80be94e7d461bf148"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4724b3dea0b8f73223bf5bf45b0ff019c70fccd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4724b3dea0b8f73223bf5bf45b0ff019c70fccd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4724b3dea0b8f73223bf5bf45b0ff019c70fccd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4724b3dea0b8f73223bf5bf45b0ff019c70fccd8/comments", "author": null, "committer": null, "parents": [{"sha": "0bc9c2526844e064f4f032d0de56164a7c44581f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc9c2526844e064f4f032d0de56164a7c44581f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc9c2526844e064f4f032d0de56164a7c44581f"}], "stats": {"total": 48, "additions": 19, "deletions": 29}, "files": [{"sha": "8d10aa33e69fe9a0709538f678150604228388ae", "filename": "gcc/c-common.c", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4724b3dea0b8f73223bf5bf45b0ff019c70fccd8/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4724b3dea0b8f73223bf5bf45b0ff019c70fccd8/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4724b3dea0b8f73223bf5bf45b0ff019c70fccd8", "patch": "@@ -27,14 +27,14 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n extern struct obstack permanent_obstack;\n \n+static void declare_hidden_char_array PROTO((char *, char *));\n+\n /* Make bindings for __FUNCTION__ and __PRETTY_FUNCTION__.  */\n \n void\n declare_function_name ()\n {\n-  tree decl, type, init;\n   char *name, *printable_name;\n-  int len;\n \n   if (current_function_decl == NULL)\n     {\n@@ -54,44 +54,34 @@ declare_function_name ()\n       printable_name = (*decl_printable_name) (current_function_decl, &kind);\n     }\n \n-  /* If the default size of char arrays isn't big enough for the name,\n-     make a bigger one.  */\n-  len = strlen (name) + 1;\n-  type = char_array_type_node;\n-  if (TREE_INT_CST_LOW (TYPE_MAX_VALUE (TREE_TYPE (char_array_type_node)))\n-      < len)\n-    type = build_array_type (char_type_node,\n-\t\t\t     build_index_type (build_int_2 (len, 0)));\n+  declare_hidden_char_array (\"__FUNCTION__\", name);\n+  declare_hidden_char_array (\"__PRETTY_FUNCTION__\", printable_name);\n+}\n \n-  push_obstacks_nochange ();\n-  decl = build_decl (VAR_DECL, get_identifier (\"__FUNCTION__\"), type);\n-  TREE_STATIC (decl) = 1;\n-  TREE_READONLY (decl) = 1;\n-  DECL_SOURCE_LINE (decl) = 0;\n-  DECL_IN_SYSTEM_HEADER (decl) = 1;\n-  DECL_IGNORED_P (decl) = 1;\n-  DECL_EXTERNAL (decl) = 1;\n-  init = build_string (len, name);\n-  TREE_TYPE (init) = type;\n-  DECL_INITIAL (decl) = init;\n-  finish_decl (pushdecl (decl), init, NULL_TREE);\n+static void\n+declare_hidden_char_array (name, value)\n+     char *name, *value;\n+{\n+  tree decl, type, init;\n+  int vlen;\n \n-  len = strlen (printable_name) + 1;\n+  /* If the default size of char arrays isn't big enough for the name,\n+     make a bigger one.  */\n+  vlen = strlen (value) + 1;\n   type = char_array_type_node;\n-  if (TREE_INT_CST_LOW (TYPE_MAX_VALUE (TREE_TYPE (char_array_type_node)))\n-      < len)\n+  if (TREE_INT_CST_LOW (TYPE_MAX_VALUE (TREE_TYPE (type))) < vlen)\n     type = build_array_type (char_type_node,\n-\t\t\t     build_index_type (build_int_2 (len, 0)));\n+\t\t\t     build_index_type (build_int_2 (vlen, 0)));\n \n   push_obstacks_nochange ();\n-  decl = build_decl (VAR_DECL, get_identifier (\"__PRETTY_FUNCTION__\"), type);\n+  decl = build_decl (VAR_DECL, get_identifier (name), type);\n   TREE_STATIC (decl) = 1;\n   TREE_READONLY (decl) = 1;\n+  TREE_ASM_WRITTEN (decl) = 1;\n   DECL_SOURCE_LINE (decl) = 0;\n   DECL_IN_SYSTEM_HEADER (decl) = 1;\n   DECL_IGNORED_P (decl) = 1;\n-  DECL_EXTERNAL (decl) = 1;\n-  init = build_string (len, printable_name);\n+  init = build_string (vlen, value);\n   TREE_TYPE (init) = type;\n   DECL_INITIAL (decl) = init;\n   finish_decl (pushdecl (decl), init, NULL_TREE);"}]}