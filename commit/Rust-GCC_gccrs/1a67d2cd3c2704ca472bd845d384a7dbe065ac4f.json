{"sha": "1a67d2cd3c2704ca472bd845d384a7dbe065ac4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE2N2QyY2QzYzI3MDRjYTQ3MmJkODQ1ZDM4NGE3ZGJlMDY1YWM0Zg==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-12-02T23:01:24Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-12-02T23:01:24Z"}, "message": "do not insert code outside the generated region\n\non the testcase we used to generate code in the function entry bb_0,\nand that choked the cfg verifier.\n\n\t* graphite-isl-ast-to-gimple.c (copy_bb_and_scalar_dependences): Check\n\tthat insertion point is still in the region.\n\n\t* gfortran.dg/graphite/id-26.f03: New.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r231211", "tree": {"sha": "e08d24a370c3d7d299cccc488b294b839271aca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e08d24a370c3d7d299cccc488b294b839271aca6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa26da223666589dee005765740ed40ee290c22f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa26da223666589dee005765740ed40ee290c22f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa26da223666589dee005765740ed40ee290c22f"}], "stats": {"total": 144, "additions": 144, "deletions": 0}, "files": [{"sha": "d6ba2e83f78a12b77aba0ee1776525a8a50ff176", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a67d2cd3c2704ca472bd845d384a7dbe065ac4f", "patch": "@@ -1,3 +1,9 @@\n+2015-12-02  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-isl-ast-to-gimple.c (copy_bb_and_scalar_dependences): Check\n+\tthat insertion point is still in the region.\n+\n 2015-12-02  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "497b200f55a788a05697ae5c8952004819b34e08", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=1a67d2cd3c2704ca472bd845d384a7dbe065ac4f", "patch": "@@ -2944,6 +2944,7 @@ translate_isl_ast_to_gimple::copy_bb_and_scalar_dependences (basic_block bb,\n \n \t  /* If a corresponding merge-point was not found, then abort codegen.  */\n \t  if (phi_bb->loop_father != loop_father\n+\t      || !bb_in_sese_p (phi_bb, region->if_region->true_region->region)\n \t      || !copy_cond_phi_nodes (bb, phi_bb, iv_map))\n \t    {\n \t      codegen_error = true;"}, {"sha": "328f1ec27e0af4558de55c9d5e65c68fd7dfe439", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a67d2cd3c2704ca472bd845d384a7dbe065ac4f", "patch": "@@ -1,3 +1,8 @@\n+2015-12-02  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* gfortran.dg/graphite/id-26.f03: New.\n+\n 2015-12-02  Jason Merrill  <jason@redhat.com>\n \n \t* lib/g++.exp: Handle --stds= option."}, {"sha": "c22cb169015c62f98b0955de35eb32fd9366f225", "filename": "gcc/testsuite/gfortran.dg/graphite/id-26.f03", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-26.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a67d2cd3c2704ca472bd845d384a7dbe065ac4f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-26.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-26.f03?ref=1a67d2cd3c2704ca472bd845d384a7dbe065ac4f", "patch": "@@ -0,0 +1,132 @@\n+! { dg-options \"-fcray-pointer -floop-nest-optimize\" }\n+\n+  use iso_c_binding, only : c_ptr, c_ptrdiff_t, c_loc\n+  interface\n+    subroutine foo (x, y, z, w)\n+      use iso_c_binding, only : c_ptr\n+      real, pointer :: x(:), y(:), w(:)\n+      type(c_ptr) :: z\n+    end subroutine\n+    subroutine bar (x, y, z, w)\n+      use iso_c_binding, only : c_ptr\n+      real, pointer :: x(:), y(:), w(:)\n+      type(c_ptr) :: z\n+    end subroutine\n+    subroutine baz (x, c)\n+      real, pointer :: x(:)\n+      real, allocatable :: c(:)\n+    end subroutine\n+  end interface\n+  type dt\n+    real, allocatable :: a(:)\n+  end type\n+  type (dt) :: b(64)\n+  real, target :: a(4096+63)\n+  real, pointer :: p(:), q(:), r(:), s(:)\n+  real, allocatable :: c(:)\n+  integer(c_ptrdiff_t) :: o\n+  integer :: i\n+  o = 64 - mod (loc (a), 64)\n+  if (o == 64) o = 0\n+  o = o / sizeof(0.0)\n+  p => a(o + 1:o + 1024)\n+  q => a(o + 1025:o + 2048)\n+  r => a(o + 2049:o + 3072)\n+  s => a(o + 3073:o + 4096)\n+  do i = 1, 1024\n+    p(i) = i\n+    q(i) = i\n+    r(i) = i\n+    s(i) = i\n+  end do\n+  call foo (p, q, c_loc (r(1)), s)\n+  do i = 1, 1024\n+    if (p(i) /= i * i + 3 * i + 2) call abort\n+    p(i) = i\n+  end do\n+  call bar (p, q, c_loc (r(1)), s)\n+  do i = 1, 1024\n+    if (p(i) /= i * i + 3 * i + 2) call abort\n+  end do\n+  ! Attempt to create 64-byte aligned allocatable\n+  do i = 1, 64\n+    allocate (c(1023 + i))\n+    if (iand (loc (c(1)), 63) == 0) exit\n+    deallocate (c)\n+    allocate (b(i)%a(1023 + i))\n+    allocate (c(1023 + i))\n+    if (iand (loc (c(1)), 63) == 0) exit\n+    deallocate (c)\n+  end do\n+  if (allocated (c)) then\n+    do i = 1, 1024\n+      c(i) = 2 * i\n+    end do\n+    call baz (p, c)\n+    do i = 1, 1024\n+      if (p(i) /= i * i + 5 * i + 2) call abort\n+    end do\n+  end if\n+end\n+subroutine foo (x, y, z, w)\n+  use iso_c_binding, only : c_ptr, c_f_pointer\n+  real, pointer :: x(:), y(:), w(:), p(:)\n+  type(c_ptr) :: z\n+  integer :: i\n+  real :: pt(1024)\n+  pointer (ip, pt)\n+  ip = loc (w)\n+!$omp simd aligned (x, y : 64)\n+  do i = 1, 1024\n+    x(i) = x(i) * y(i) + 2.0\n+  end do\n+!$omp simd aligned (x, z : 64) private (p)\n+  do i = 1, 1024\n+    call c_f_pointer (z, p, shape=[1024])\n+    x(i) = x(i) + p(i)\n+  end do\n+!$omp simd aligned (x, ip : 64)\n+  do i = 1, 1024\n+    x(i) = x(i) + 2 * pt(i)\n+  end do\n+!$omp end simd\n+end subroutine\n+subroutine bar (x, y, z, w)\n+  use iso_c_binding, only : c_ptr, c_f_pointer\n+  real, pointer :: x(:), y(:), w(:), a(:), b(:)\n+  type(c_ptr) :: z, c\n+  integer :: i\n+  real :: pt(1024)\n+  pointer (ip, pt)\n+  ip = loc (w)\n+  a => x\n+  b => y\n+  c = z\n+!$omp simd aligned (a, b : 64)\n+  do i = 1, 1024\n+    a(i) = a(i) * b(i) + 2.0\n+  end do\n+!$omp simd aligned (a, c : 64)\n+  do i = 1, 1024\n+    block\n+      real, pointer :: p(:)\n+      call c_f_pointer (c, p, shape=[1024])\n+      a(i) = a(i) + p(i)\n+    end block\n+  end do\n+!$omp simd aligned (a, ip : 64)\n+  do i = 1, 1024\n+    a(i) = a(i) + 2 * pt(i)\n+  end do\n+!$omp end simd\n+end subroutine\n+subroutine baz (x, c)\n+  real, pointer :: x(:)\n+  real, allocatable :: c(:)\n+  integer :: i\n+!$omp simd aligned (x, c : 64)\n+  do i = 1, 1024\n+    x(i) = x(i) + c(i)\n+  end do\n+!$omp end simd\n+end subroutine baz"}]}