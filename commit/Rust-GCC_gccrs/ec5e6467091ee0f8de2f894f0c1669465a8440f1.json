{"sha": "ec5e6467091ee0f8de2f894f0c1669465a8440f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM1ZTY0NjcwOTFlZTBmOGRlMmY4OTRmMGMxNjY5NDY1YTg0NDBmMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-14T11:44:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-14T13:07:17Z"}, "message": "adjust BB SLP build from scalars heuristics\n\nWe can end up with { _1, 1.0 } * { 3.0, _2 } which isn't really\nprofitable.  The following adjusts things so we reject more than\none possibly expensive (non-constant and not uniform) vector CTOR\nand instead build a CTOR for the scalar operation results.\n\nThis also moves a check in vect_get_and_check_slp_defs to a better\nplace.\n\n2020-10-14  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Move\n\tcheck for duplicate/interleave of variable size constants\n\tto a place done once and early.\n\t(vect_build_slp_tree_2): Adjust heuristics when to build\n\ta BB SLP node from scalars.", "tree": {"sha": "c928f949a7af97b4bc3921ae1a90d5add8870af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c928f949a7af97b4bc3921ae1a90d5add8870af3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec5e6467091ee0f8de2f894f0c1669465a8440f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5e6467091ee0f8de2f894f0c1669465a8440f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5e6467091ee0f8de2f894f0c1669465a8440f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5e6467091ee0f8de2f894f0c1669465a8440f1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17d5739a6b103cdd3315f5d0e09fe8faa6620a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d5739a6b103cdd3315f5d0e09fe8faa6620a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d5739a6b103cdd3315f5d0e09fe8faa6620a03"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "ba681fe6d5e83ab52bd4d70963b62ce48f7c796d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5e6467091ee0f8de2f894f0c1669465a8440f1/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5e6467091ee0f8de2f894f0c1669465a8440f1/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=ec5e6467091ee0f8de2f894f0c1669465a8440f1", "patch": "@@ -457,8 +457,23 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char swap,\n       if (def_stmt_info && is_pattern_stmt_p (def_stmt_info))\n \toprnd_info->any_pattern = true;\n \n+      tree type = TREE_TYPE (oprnd);\n       if (first)\n \t{\n+\t  if ((dt == vect_constant_def\n+\t       || dt == vect_external_def)\n+\t      && !GET_MODE_SIZE (vinfo->vector_mode).is_constant ()\n+\t      && (TREE_CODE (type) == BOOLEAN_TYPE\n+\t\t  || !can_duplicate_and_interleave_p (vinfo, stmts.length (),\n+\t\t\t\t\t\t      type)))\n+\t    {\n+\t      if (dump_enabled_p ())\n+\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"Build SLP failed: invalid type of def \"\n+\t\t\t\t \"for variable-length SLP %T\\n\", oprnd);\n+\t      return -1;\n+\t    }\n+\n \t  /* For the swapping logic below force vect_reduction_def\n \t     for the reduction op in a SLP reduction group.  */\n \t  if (!STMT_VINFO_DATA_REF (stmt_info)\n@@ -467,7 +482,7 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char swap,\n \t      && def_stmt_info)\n \t    dt = vect_reduction_def;\n \t  oprnd_info->first_dt = dt;\n-\t  oprnd_info->first_op_type = TREE_TYPE (oprnd);\n+\t  oprnd_info->first_op_type = type;\n \t}\n       else\n \t{\n@@ -476,7 +491,6 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char swap,\n \t     types for reduction chains: the first stmt must be a\n \t     vect_reduction_def (a phi node), and the rest\n \t     end in the reduction chain.  */\n-\t  tree type = TREE_TYPE (oprnd);\n \t  if ((oprnd_info->first_dt != dt\n \t       && !(oprnd_info->first_dt == vect_reduction_def\n \t\t    && !STMT_VINFO_DATA_REF (stmt_info)\n@@ -514,19 +528,6 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char swap,\n \n \t      return 1;\n \t    }\n-\t  if ((dt == vect_constant_def\n-\t       || dt == vect_external_def)\n-\t      && !GET_MODE_SIZE (vinfo->vector_mode).is_constant ()\n-\t      && (TREE_CODE (type) == BOOLEAN_TYPE\n-\t\t  || !can_duplicate_and_interleave_p (vinfo, stmts.length (),\n-\t\t\t\t\t\t      type)))\n-\t    {\n-\t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t \"Build SLP failed: invalid type of def \"\n-\t\t\t\t \"for variable-length SLP %T\\n\", oprnd);\n-\t      return -1;\n-\t    }\n \t}\n \n       /* Check the types of the definitions.  */\n@@ -1568,7 +1569,8 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n   vect_free_oprnd_info (oprnds_info);\n \n   /* If we have all children of a child built up from uniform scalars\n-     then just throw that away, causing it built up from scalars.\n+     or does more than one possibly expensive vector construction then\n+     just throw that away, causing it built up from scalars.\n      The exception is the SLP node for the vector store.  */\n   if (is_a <bb_vec_info> (vinfo)\n       && !STMT_VINFO_GROUPED_ACCESS (stmt_info)\n@@ -1579,11 +1581,20 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n     {\n       slp_tree child;\n       unsigned j;\n+      bool all_uniform_p = true;\n+      unsigned n_vector_builds = 0;\n       FOR_EACH_VEC_ELT (children, j, child)\n-\tif (SLP_TREE_DEF_TYPE (child) == vect_internal_def\n-\t    || !vect_slp_tree_uniform_p (child))\n-\t  break;\n-      if (!child)\n+\t{\n+\t  if (SLP_TREE_DEF_TYPE (child) == vect_internal_def)\n+\t    all_uniform_p = false;\n+\t  else if (!vect_slp_tree_uniform_p (child))\n+\t    {\n+\t      all_uniform_p = false;\n+\t      if (SLP_TREE_DEF_TYPE (child) == vect_external_def)\n+\t\tn_vector_builds++;\n+\t    }\n+\t}\n+      if (all_uniform_p || n_vector_builds > 1)\n \t{\n \t  /* Roll back.  */\n \t  matches[0] = false;"}]}