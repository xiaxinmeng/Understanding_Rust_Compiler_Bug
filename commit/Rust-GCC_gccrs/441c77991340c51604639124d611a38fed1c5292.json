{"sha": "441c77991340c51604639124d611a38fed1c5292", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQxYzc3OTkxMzQwYzUxNjA0NjM5MTI0ZDYxMWEzOGZlZDFjNTI5Mg==", "commit": {"author": {"name": "Joerg Brunsmann", "email": "joerg_brunsmann@yahoo.de", "date": "2002-11-18T18:09:35Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-11-18T18:09:35Z"}, "message": "KeyStore.java (getInstance): Fix comment and throw IllegalArgumentException if given provider is null.\n\n2002-11-18  Joerg Brunsmann  <joerg_brunsmann@yahoo.de>\n\n\t* java/security/KeyStore.java (getInstance): Fix\n\tcomment and throw IllegalArgumentException if\n\tgiven provider is null.\n\t(getInstance): New method for jdk1.4 compatibility.\n\nFrom-SVN: r59226", "tree": {"sha": "10a142e469fd4fab5b4d57cd7d58f9ed3bafa892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10a142e469fd4fab5b4d57cd7d58f9ed3bafa892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/441c77991340c51604639124d611a38fed1c5292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441c77991340c51604639124d611a38fed1c5292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441c77991340c51604639124d611a38fed1c5292", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441c77991340c51604639124d611a38fed1c5292/comments", "author": null, "committer": null, "parents": [{"sha": "ac655495ad80baa2208f6cd205711718a2892229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac655495ad80baa2208f6cd205711718a2892229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac655495ad80baa2208f6cd205711718a2892229"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "bc8774b6a004d867d300046dafe28976d02c0107", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441c77991340c51604639124d611a38fed1c5292/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441c77991340c51604639124d611a38fed1c5292/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=441c77991340c51604639124d611a38fed1c5292", "patch": "@@ -1,3 +1,10 @@\n+2002-11-18  Joerg Brunsmann  <joerg_brunsmann@yahoo.de>\n+\n+\t* java/security/KeyStore.java (getInstance): Fix\n+\tcomment and throw IllegalArgumentException if \n+\tgiven provider is null.\n+\t(getInstance): New method for jdk1.4 compatibility.\n+\n 2002-11-18  Michael Koch <konqueror@gmx.de>\n \n \t* java/net/PlainSocketImpl.java: Fix imports."}, {"sha": "1627bc5610a06fc292b8dfad7e166a1693bc81e2", "filename": "libjava/java/security/KeyStore.java", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441c77991340c51604639124d611a38fed1c5292/libjava%2Fjava%2Fsecurity%2FKeyStore.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441c77991340c51604639124d611a38fed1c5292/libjava%2Fjava%2Fsecurity%2FKeyStore.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyStore.java?ref=441c77991340c51604639124d611a38fed1c5292", "patch": "@@ -1,5 +1,5 @@\n /* KeyStore.java --- Key Store Class\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -92,9 +92,9 @@ protected KeyStore(KeyStoreSpi keyStoreSpi, Provider provider, String type)\n   /** \n      Gets an instance of the KeyStore class representing\n      the specified keystore. If the type is not \n-     found then, it throws CertificateException.\n+     found then, it throws KeyStoreException.\n \n-     @param type the type of certificate to choose\n+     @param type the type of keystore to choose\n \n      @return a KeyStore repesenting the desired type\n \n@@ -117,27 +117,60 @@ public static KeyStore getInstance(String type) throws KeyStoreException\n   /** \n      Gets an instance of the KeyStore class representing\n      the specified key store from the specified provider. \n-     If the type is not found then, it throws CertificateException. \n+     If the type is not found then, it throws KeyStoreException. \n      If the provider is not found, then it throws \n      NoSuchProviderException.\n \n-     @param type the type of certificate to choose\n+     @param type the type of keystore to choose\n+     @param provider the provider name\n \n      @return a KeyStore repesenting the desired type\n \n-     @throws KeyStoreException if the type of keystore is not implemented by providers\n+     @throws KeyStoreException if the type of keystore is not \n+              implemented by the given provider\n      @throws NoSuchProviderException if the provider is not found\n+     @throws IllegalArgumentException if the provider string is \n+               null or empty\n    */\n   public static KeyStore getInstance(String type, String provider)\n     throws KeyStoreException, NoSuchProviderException\n   {\n+    if (provider == null || provider.length() == 0)\n+      throw new IllegalArgumentException(\"Illegal provider\");\n     Provider p = Security.getProvider(provider);\n     if (p == null)\n       throw new NoSuchProviderException();\n \n     return getInstance(p.getProperty(\"KeyStore.\" + type), type, p);\n   }\n \n+  /** \n+     Gets an instance of the KeyStore class representing\n+     the specified key store from the specified provider. \n+     If the type is not found then, it throws KeyStoreException. \n+     If the provider is not found, then it throws \n+     NoSuchProviderException.\n+\n+     @param type the type of keystore to choose\n+     @param provider the keystore provider\n+\n+     @return a KeyStore repesenting the desired type\n+\n+     @throws KeyStoreException if the type of keystore is not \n+              implemented by the given provider\n+     @throws IllegalArgumentException if the provider object is null\n+     @since 1.4\n+   */\n+  public static KeyStore getInstance(String type, Provider provider)\n+    throws KeyStoreException \n+  {\n+    if (provider == null)\n+      throw new IllegalArgumentException(\"Illegal provider\");\n+\n+    return getInstance(provider.getProperty(\"KeyStore.\" + type),\n+\t\t       type, provider);\n+  }\n+\n   private static KeyStore getInstance(String classname,\n \t\t\t\t      String type,\n \t\t\t\t      Provider provider)"}]}