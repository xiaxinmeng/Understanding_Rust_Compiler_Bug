{"sha": "3071bfa9c33aaad54db7ae1e87f0b5e26f095022", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3MWJmYTljMzNhYWFkNTRkYjdhZTFlODdmMGI1ZTI2ZjA5NTAyMg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-12-12T13:57:32Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-12-12T13:57:32Z"}, "message": "re PR middle-end/78716 (ICE in gimplify_va_arg_expr, at gimplify.c:12650 (i686-linux-gnu))\n\n\tPR middle-end/78716\n\t* gimplify.c (gimplify_va_arg_expr): Don't require ADDR_EXPR for\n\tCase 1; check POINTER_TYPE_P instead.\n\n\t* g++.dg/other/vararg-5.C: New.\n\nFrom-SVN: r243553", "tree": {"sha": "570d46db7b508e23aa0ad2623da034fa2122e779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/570d46db7b508e23aa0ad2623da034fa2122e779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3071bfa9c33aaad54db7ae1e87f0b5e26f095022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3071bfa9c33aaad54db7ae1e87f0b5e26f095022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3071bfa9c33aaad54db7ae1e87f0b5e26f095022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3071bfa9c33aaad54db7ae1e87f0b5e26f095022/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66dbcf2d4d74b29f7188dd682116ace71f2fc977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66dbcf2d4d74b29f7188dd682116ace71f2fc977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66dbcf2d4d74b29f7188dd682116ace71f2fc977"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "81b0a3b48e769b6cd3c3109742b45cab8f17b855", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3071bfa9c33aaad54db7ae1e87f0b5e26f095022/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3071bfa9c33aaad54db7ae1e87f0b5e26f095022/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3071bfa9c33aaad54db7ae1e87f0b5e26f095022", "patch": "@@ -1,3 +1,9 @@\n+2016-12-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/78716\n+\t* gimplify.c (gimplify_va_arg_expr): Don't require ADDR_EXPR for\n+\tCase 1; check POINTER_TYPE_P instead.\n+\n 2016-12-12  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR rtl-optimization/78669"}, {"sha": "b738855a63754afdb47aa945f44dbde09fef2abe", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3071bfa9c33aaad54db7ae1e87f0b5e26f095022/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3071bfa9c33aaad54db7ae1e87f0b5e26f095022/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3071bfa9c33aaad54db7ae1e87f0b5e26f095022", "patch": "@@ -12643,7 +12643,7 @@ gimplify_va_arg_expr (tree *expr_p, gimple_seq *pre_p,\n     return GS_ERROR;\n   have_va_type = targetm.canonical_va_list_type (have_va_type);\n   if (have_va_type == NULL_TREE\n-      && TREE_CODE (valist) == ADDR_EXPR)\n+      && POINTER_TYPE_P (TREE_TYPE (valist)))\n     /* Handle 'Case 1: Not an array type' from c-common.c/build_va_arg.  */\n     have_va_type\n       = targetm.canonical_va_list_type (TREE_TYPE (TREE_TYPE (valist)));"}, {"sha": "588c51bd1409eaae557316bbe69bbd11a83c8cb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3071bfa9c33aaad54db7ae1e87f0b5e26f095022/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3071bfa9c33aaad54db7ae1e87f0b5e26f095022/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3071bfa9c33aaad54db7ae1e87f0b5e26f095022", "patch": "@@ -1,3 +1,8 @@\n+2016-12-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/78716\n+\t* g++.dg/other/vararg-5.C: New.\n+\n 2016-12-12  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR rtl-optimization/78669"}, {"sha": "9327bd6570f93a842d29d012b4e0a8bee3df9874", "filename": "gcc/testsuite/g++.dg/other/vararg-5.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3071bfa9c33aaad54db7ae1e87f0b5e26f095022/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvararg-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3071bfa9c33aaad54db7ae1e87f0b5e26f095022/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvararg-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvararg-5.C?ref=3071bfa9c33aaad54db7ae1e87f0b5e26f095022", "patch": "@@ -0,0 +1,24 @@\n+// PR middle-end/78716\n+// { dg-do compile }\n+\n+template <typename = int, typename = int, typename = int, typename = int,\n+\t           typename = int>\n+\t\t   struct a;\n+\t\t   template <typename> struct b;\n+\t\t   template <typename = int, typename d = void> class e : b<d>::c {\n+\t\t     public:\n+\t\t         typedef e f;\n+\t\t\t   typedef typename b<d>::c g;\n+\t\t\t     e(__builtin_va_list *s) : g(__builtin_va_arg(*s, int)) {}\n+\t\t   };\n+template <> struct b<void> { typedef e<> c; };\n+template <> struct e<> { template <typename h> e(h); };\n+template <typename i> class a<i> : public e<i> {};\n+template <typename i, typename j, typename k, typename l>\n+class a<i, j, k, l> : e<typename a<j>::f> {\n+  public:\n+      template <typename m, typename n, typename o, typename p>\n+\t  a(a<m, n, o, p>) : a::f(0) {}\n+};\n+template <typename i, typename j, typename k, typename l> a<> r(i, j, k, l);\n+void q() { a<float, float>(r(4, 6, 9, 7)); }"}]}