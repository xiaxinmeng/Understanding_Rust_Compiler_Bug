{"sha": "6cbd8875831925383fd1909c9b97867a7d5a538d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiZDg4NzU4MzE5MjUzODNmZDE5MDljOWI5Nzg2N2E3ZDVhNTM4ZA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-08-11T19:52:46Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-08-11T19:52:46Z"}, "message": "target.def (output_addr_const_extra): New hook.\n\n\t* target.def (output_addr_const_extra): New hook.\n\t* doc/tm.texi.in (TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA): Document.\n\t* doc/tm.texi: Regenerate.\n\t* targhooks.c (default_asm_output_addr_const_extra): New function.\n\t* targhooks.h (default_asm_output_addr_const_extra): Declare.\n\t* final.c: (output_addr_const): Use TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n\ttarget hook.\n\n\t* config/i386/i386.h (OUTPUT_ADDR_CONST_EXTRA): Remove.\n\t* config/i386/i386-protos.h (output_addr_const_extra): Remove.\n\t* config/i386/i386.h (output_addr_const_extra): Rename to...\n\t(i386_asm_output_addr_const_extra): ...this. Make static.\n\t(TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA): Define.\n\nFrom-SVN: r163104", "tree": {"sha": "28ce38ee745b0494c0ddb96c95b700125a32461e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28ce38ee745b0494c0ddb96c95b700125a32461e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cbd8875831925383fd1909c9b97867a7d5a538d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbd8875831925383fd1909c9b97867a7d5a538d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbd8875831925383fd1909c9b97867a7d5a538d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbd8875831925383fd1909c9b97867a7d5a538d/comments", "author": null, "committer": null, "parents": [{"sha": "51ba747afcde4335b7b7888b179da1d6d4917152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ba747afcde4335b7b7888b179da1d6d4917152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ba747afcde4335b7b7888b179da1d6d4917152"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "c09d32c785b24ab16b4c6d2e40e9d743089e280f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cbd8875831925383fd1909c9b97867a7d5a538d", "patch": "@@ -1,3 +1,19 @@\n+2010-08-11  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* target.def (output_addr_const_extra): New hook.\n+\t* doc/tm.texi.in (TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA): Document.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.c (default_asm_output_addr_const_extra): New function.\n+\t* targhooks.h (default_asm_output_addr_const_extra): Declare.\n+\t* final.c: (output_addr_const): Use TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n+\ttarget hook.\n+\n+\t* config/i386/i386.h (OUTPUT_ADDR_CONST_EXTRA): Remove.\n+\t* config/i386/i386-protos.h (output_addr_const_extra): Remove.\n+\t* config/i386/i386.h (output_addr_const_extra): Rename to...\n+\t(i386_asm_output_addr_const_extra): ...this. Make static.\n+\t(TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA): Define.\n+\n 2010-08-11  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.h (HARD_REGNO_CALL_PART_CLOBBERED): New."}, {"sha": "a72a432299a3d687d7a9ea09c2317eb2a63ad4a7", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=6cbd8875831925383fd1909c9b97867a7d5a538d", "patch": "@@ -62,7 +62,6 @@ extern int legitimate_pic_address_disp_p (rtx);\n \n extern void print_reg (rtx, int, FILE*);\n extern void ix86_print_operand (FILE *, rtx, int);\n-extern bool output_addr_const_extra (FILE*, rtx);\n \n extern void split_di (rtx[], int, rtx[], rtx[]);\n extern void split_ti (rtx[], int, rtx[], rtx[]);"}, {"sha": "c3863acb81f0a29dd711086ce0292352b206cb8e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6cbd8875831925383fd1909c9b97867a7d5a538d", "patch": "@@ -13124,8 +13124,10 @@ ix86_print_operand_address (FILE *file, rtx addr)\n     }\n }\n \n-bool\n-output_addr_const_extra (FILE *file, rtx x)\n+/* Implementation of TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA.  */\n+\n+static bool\n+i386_asm_output_addr_const_extra (FILE *file, rtx x)\n {\n   rtx op;\n \n@@ -31539,6 +31541,8 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #define TARGET_PRINT_OPERAND_ADDRESS ix86_print_operand_address\n #undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n #define TARGET_PRINT_OPERAND_PUNCT_VALID_P ix86_print_operand_punct_valid_p\n+#undef TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n+#define TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA i386_asm_output_addr_const_extra \n \n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST ix86_adjust_cost"}, {"sha": "57c224420f65610612045db883893c868c9bbbc9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6cbd8875831925383fd1909c9b97867a7d5a538d", "patch": "@@ -2123,12 +2123,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\"call \" CRT_MKSTR(__USER_LABEL_PREFIX__) #FUNC \"\\n\"\t\\\n \tTEXT_SECTION_ASM_OP);\n \f\n-#define OUTPUT_ADDR_CONST_EXTRA(FILE, X, FAIL)\t\\\n-do {\t\t\t\t\t\t\\\n-  if (! output_addr_const_extra (FILE, (X)))\t\\\n-    goto FAIL;\t\t\t\t\t\\\n-} while (0);\n-\f\n /* Which processor to schedule for. The cpu attribute defines a list that\n    mirrors this list, so changes to i386.md must be made at the same time.  */\n "}, {"sha": "3e38618e79c92bf7166a7ca6883effb7a46578da", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6cbd8875831925383fd1909c9b97867a7d5a538d", "patch": "@@ -7410,6 +7410,18 @@ The default implementation of this hook will use the\n when the relevant string is @code{NULL}.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA (FILE *@var{file}, rtx @var{x})\n+A target hook to recognize @var{rtx} patterns that @code{output_addr_const}\n+can't deal with, and output assembly code to @var{file} corresponding to\n+the pattern @var{x}.  This may be used to allow machine-dependent\n+@code{UNSPEC}s to appear within constants.\n+\n+If target hook fails to recognize a pattern, it must return @code{false},\n+so that a standard error message is printed.  If it prints an error message\n+itself, by calling, for example, @code{output_operand_lossage}, it may just\n+return @code{true}.\n+@end deftypefn\n+\n @defmac OUTPUT_ADDR_CONST_EXTRA (@var{stream}, @var{x}, @var{fail})\n A C statement to recognize @var{rtx} patterns that\n @code{output_addr_const} can't deal with, and output assembly code to"}, {"sha": "63589168f8d0426c9966fb9290c44b3bc1a78756", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=6cbd8875831925383fd1909c9b97867a7d5a538d", "patch": "@@ -7401,6 +7401,18 @@ The default implementation of this hook will use the\n when the relevant string is @code{NULL}.\n @end deftypefn\n \n+@hook TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n+A target hook to recognize @var{rtx} patterns that @code{output_addr_const}\n+can't deal with, and output assembly code to @var{file} corresponding to\n+the pattern @var{x}.  This may be used to allow machine-dependent\n+@code{UNSPEC}s to appear within constants.\n+\n+If target hook fails to recognize a pattern, it must return @code{false},\n+so that a standard error message is printed.  If it prints an error message\n+itself, by calling, for example, @code{output_operand_lossage}, it may just\n+return @code{true}.\n+@end deftypefn\n+\n @defmac OUTPUT_ADDR_CONST_EXTRA (@var{stream}, @var{x}, @var{fail})\n A C statement to recognize @var{rtx} patterns that\n @code{output_addr_const} can't deal with, and output assembly code to"}, {"sha": "73c60691d276063db47cf4e6d9f8856ed5ac0a63", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6cbd8875831925383fd1909c9b97867a7d5a538d", "patch": "@@ -3620,12 +3620,9 @@ output_addr_const (FILE *file, rtx x)\n       break;\n \n     default:\n-#ifdef OUTPUT_ADDR_CONST_EXTRA\n-      OUTPUT_ADDR_CONST_EXTRA (file, x, fail);\n-      break;\n+      if (targetm.asm_out.output_addr_const_extra (file, x))\n+\tbreak;\n \n-    fail:\n-#endif\n       output_operand_lossage (\"invalid expression as operand\");\n     }\n }"}, {"sha": "46e3ef761964419df722003a1c5f5a010cd4209d", "filename": "gcc/target.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=6cbd8875831925383fd1909c9b97867a7d5a538d", "patch": "@@ -415,6 +415,12 @@ DEFHOOK\n  void ,(FILE *file, const char *name),\n  default_asm_output_source_filename)\n \n+DEFHOOK\n+(output_addr_const_extra,\n+ \"\",\n+ bool, (FILE *file, rtx x),\n+ default_asm_output_addr_const_extra)\n+\n /* ??? The TARGET_PRINT_OPERAND* hooks are part of the asm_out struct,\n    even though that is not reflected in the macro name to override their\n    initializers.  */"}, {"sha": "9898225f2d199f879e6fdc33664e5a6773ef7c38", "filename": "gcc/targhooks.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=6cbd8875831925383fd1909c9b97867a7d5a538d", "patch": "@@ -356,6 +356,21 @@ default_print_operand_punct_valid_p (unsigned char code ATTRIBUTE_UNUSED)\n #endif\n }\n \n+/* The default implementation of TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA.  */\n+\n+bool\n+default_asm_output_addr_const_extra (FILE *file ATTRIBUTE_UNUSED,\n+\t\t\t\t     rtx x ATTRIBUTE_UNUSED)\n+{\n+#ifdef OUTPUT_ADDR_CONST_EXTRA\n+  OUTPUT_ADDR_CONST_EXTRA (file, x, fail);\n+  return true;\n+\n+fail:\n+#endif\n+  return false;\n+}\n+\n /* True if MODE is valid for the target.  By \"valid\", we mean able to\n    be manipulated in non-trivial ways.  In particular, this means all\n    the arithmetic is supported."}, {"sha": "bc43bc2595a6f008a64d200ac33085449626cf3d", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd8875831925383fd1909c9b97867a7d5a538d/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=6cbd8875831925383fd1909c9b97867a7d5a538d", "patch": "@@ -65,6 +65,7 @@ extern bool hook_callee_copies_named\n extern void default_print_operand (FILE *, rtx, int);\n extern void default_print_operand_address (FILE *, rtx);\n extern bool default_print_operand_punct_valid_p (unsigned char);\n+extern bool default_asm_output_addr_const_extra (FILE *, rtx);\n \n extern bool default_scalar_mode_supported_p (enum machine_mode);\n extern bool default_decimal_float_supported_p (void);"}]}