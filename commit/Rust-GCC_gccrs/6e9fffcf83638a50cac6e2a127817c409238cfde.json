{"sha": "6e9fffcf83638a50cac6e2a127817c409238cfde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU5ZmZmY2Y4MzYzOGE1MGNhYzZlMmExMjc4MTdjNDA5MjM4Y2ZkZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-05-15T15:05:07Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-05-15T15:05:07Z"}, "message": "i386: Emulate MMX punpcklXX/punpckhXX with SSE punpcklXX\n\nEmulate MMX punpcklXX/punpckhXX with SSE punpcklXX.  For MMX punpckhXX,\nmove bits 64:127 to bits 0:63 in SSE register.  Only SSE register source\noperand is allowed.\n\n\tPR target/89021\n\t* config/i386/i386-expand.c (ix86_split_mmx_punpck): New function.\n\t* config/i386/i386-protos.h (ix86_split_mmx_punpck): New\n\tprototype.\n\t* config/i386/mmx.m (mmx_punpckhbw): Changed to\n\tdefine_insn_and_split to support SSE emulation.\n\t(mmx_punpcklbw): Likewise.\n\t(mmx_punpckhwd): Likewise.\n\t(mmx_punpcklwd): Likewise.\n\t(mmx_punpckhdq): Likewise.\n\t(mmx_punpckldq): Likewise.\n\nFrom-SVN: r271216", "tree": {"sha": "1175217033e97657fd12bbfa1a2bea9f9704fcce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1175217033e97657fd12bbfa1a2bea9f9704fcce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e9fffcf83638a50cac6e2a127817c409238cfde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9fffcf83638a50cac6e2a127817c409238cfde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9fffcf83638a50cac6e2a127817c409238cfde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9fffcf83638a50cac6e2a127817c409238cfde/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74ebb2a36adbb18da52f7eb25b54655b04c7be4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74ebb2a36adbb18da52f7eb25b54655b04c7be4"}], "stats": {"total": 230, "additions": 182, "deletions": 48}, "files": [{"sha": "3e5e2d2439c2b5917e9038b975557e931fedf550", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9fffcf83638a50cac6e2a127817c409238cfde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9fffcf83638a50cac6e2a127817c409238cfde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e9fffcf83638a50cac6e2a127817c409238cfde", "patch": "@@ -1,3 +1,17 @@\n+2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89021\n+\t* config/i386/i386-expand.c (ix86_split_mmx_punpck): New function.\n+\t* config/i386/i386-protos.h (ix86_split_mmx_punpck): New\n+\tprototype.\n+\t* config/i386/mmx.m (mmx_punpckhbw): Changed to\n+\tdefine_insn_and_split to support SSE emulation.\n+\t(mmx_punpcklbw): Likewise.\n+\t(mmx_punpckhwd): Likewise.\n+\t(mmx_punpcklwd): Likewise.\n+\t(mmx_punpckhdq): Likewise.\n+\t(mmx_punpckldq): Likewise.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "81300f6f2c73a5cc4c1705c508235d36e4791bb0", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9fffcf83638a50cac6e2a127817c409238cfde/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9fffcf83638a50cac6e2a127817c409238cfde/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=6e9fffcf83638a50cac6e2a127817c409238cfde", "patch": "@@ -716,6 +716,83 @@ ix86_split_mmx_pack (rtx operands[], enum rtx_code code)\n   ix86_move_vector_high_sse_to_mmx (op0);\n }\n \n+/* Split MMX punpcklXX/punpckhXX with SSE punpcklXX.  */\n+\n+void\n+ix86_split_mmx_punpck (rtx operands[], bool high_p)\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  rtx op2 = operands[2];\n+  machine_mode mode = GET_MODE (op0);\n+  rtx mask;\n+  /* The corresponding SSE mode.  */\n+  machine_mode sse_mode, double_sse_mode;\n+\n+  switch (mode)\n+    {\n+    case E_V8QImode:\n+      sse_mode = V16QImode;\n+      double_sse_mode = V32QImode;\n+      mask = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t       gen_rtvec (16,\n+\t\t\t\t\t  GEN_INT (0), GEN_INT (16),\n+\t\t\t\t\t  GEN_INT (1), GEN_INT (17),\n+\t\t\t\t\t  GEN_INT (2), GEN_INT (18),\n+\t\t\t\t\t  GEN_INT (3), GEN_INT (19),\n+\t\t\t\t\t  GEN_INT (4), GEN_INT (20),\n+\t\t\t\t\t  GEN_INT (5), GEN_INT (21),\n+\t\t\t\t\t  GEN_INT (6), GEN_INT (22),\n+\t\t\t\t\t  GEN_INT (7), GEN_INT (23)));\n+      break;\n+\n+    case E_V4HImode:\n+      sse_mode = V8HImode;\n+      double_sse_mode = V16HImode;\n+      mask = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t       gen_rtvec (8,\n+\t\t\t\t\t  GEN_INT (0), GEN_INT (8),\n+\t\t\t\t\t  GEN_INT (1), GEN_INT (9),\n+\t\t\t\t\t  GEN_INT (2), GEN_INT (10),\n+\t\t\t\t\t  GEN_INT (3), GEN_INT (11)));\n+      break;\n+\n+    case E_V2SImode:\n+      sse_mode = V4SImode;\n+      double_sse_mode = V8SImode;\n+      mask = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t       gen_rtvec (4,\n+\t\t\t\t\t  GEN_INT (0), GEN_INT (4),\n+\t\t\t\t\t  GEN_INT (1), GEN_INT (5)));\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* Generate SSE punpcklXX.  */\n+  rtx dest = lowpart_subreg (sse_mode, op0, GET_MODE (op0));\n+  op1 = lowpart_subreg (sse_mode, op1, GET_MODE (op1));\n+  op2 = lowpart_subreg (sse_mode, op2, GET_MODE (op2));\n+\n+  op1 = gen_rtx_VEC_CONCAT (double_sse_mode, op1, op2);\n+  op2 = gen_rtx_VEC_SELECT (sse_mode, op1, mask);\n+  rtx insn = gen_rtx_SET (dest, op2);\n+  emit_insn (insn);\n+\n+  if (high_p)\n+    {\n+      /* Move bits 64:127 to bits 0:63.  */\n+      mask = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t       gen_rtvec (4, GEN_INT (2), GEN_INT (3),\n+\t\t\t\t\t  GEN_INT (0), GEN_INT (0)));\n+      dest = lowpart_subreg (V4SImode, dest, GET_MODE (dest));\n+      op1 = gen_rtx_VEC_SELECT (V4SImode, dest, mask);\n+      insn = gen_rtx_SET (dest, op1);\n+      emit_insn (insn);\n+    }\n+}\n+\n /* Helper function of ix86_fixup_binary_operands to canonicalize\n    operand order.  Returns true if the operands should be swapped.  */\n "}, {"sha": "b9de1e7983e5b9994b7a5477019688cc53dcb312", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9fffcf83638a50cac6e2a127817c409238cfde/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9fffcf83638a50cac6e2a127817c409238cfde/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=6e9fffcf83638a50cac6e2a127817c409238cfde", "patch": "@@ -202,6 +202,7 @@ extern rtx ix86_split_stack_guard (void);\n \n extern void ix86_move_vector_high_sse_to_mmx (rtx);\n extern void ix86_split_mmx_pack (rtx[], enum rtx_code);\n+extern void ix86_split_mmx_punpck (rtx[], bool);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, int);"}, {"sha": "b3fc7f3e67b4cc9c30255f43c229aa34964fac61", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 90, "deletions": 48, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9fffcf83638a50cac6e2a127817c409238cfde/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9fffcf83638a50cac6e2a127817c409238cfde/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=6e9fffcf83638a50cac6e2a127817c409238cfde", "patch": "@@ -1089,87 +1089,129 @@\n    (set_attr \"type\" \"mmxshft,sselog,sselog\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_insn \"mmx_punpckhbw\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+(define_insn_and_split \"mmx_punpckhbw\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y,x,Yv\")\n \t(vec_select:V8QI\n \t  (vec_concat:V16QI\n-\t    (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\"))\n+\t    (match_operand:V8QI 1 \"register_operand\" \"0,0,Yv\")\n+\t    (match_operand:V8QI 2 \"register_mmxmem_operand\" \"ym,x,Yv\"))\n           (parallel [(const_int 4) (const_int 12)\n                      (const_int 5) (const_int 13)\n                      (const_int 6) (const_int 14)\n                      (const_int 7) (const_int 15)])))]\n-  \"TARGET_MMX\"\n-  \"punpckhbw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   punpckhbw\\t{%2, %0|%0, %2}\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_mmx_punpck (operands, true); DONE;\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxcvt,sselog,sselog\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_insn \"mmx_punpcklbw\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+(define_insn_and_split \"mmx_punpcklbw\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y,x,Yv\")\n \t(vec_select:V8QI\n \t  (vec_concat:V16QI\n-\t    (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\"))\n+\t    (match_operand:V8QI 1 \"register_operand\" \"0,0,Yv\")\n+\t    (match_operand:V8QI 2 \"register_mmxmem_operand\" \"ym,x,Yv\"))\n           (parallel [(const_int 0) (const_int 8)\n                      (const_int 1) (const_int 9)\n                      (const_int 2) (const_int 10)\n                      (const_int 3) (const_int 11)])))]\n-  \"TARGET_MMX\"\n-  \"punpcklbw\\t{%2, %0|%0, %k2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   punpcklbw\\t{%2, %0|%0, %k2}\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_mmx_punpck (operands, false); DONE;\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxcvt,sselog,sselog\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_insn \"mmx_punpckhwd\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+(define_insn_and_split \"mmx_punpckhwd\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y,x,Yv\")\n \t(vec_select:V4HI\n \t  (vec_concat:V8HI\n-\t    (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\"))\n+\t    (match_operand:V4HI 1 \"register_operand\" \"0,0,Yv\")\n+\t    (match_operand:V4HI 2 \"register_mmxmem_operand\" \"ym,x,Yv\"))\n           (parallel [(const_int 2) (const_int 6)\n                      (const_int 3) (const_int 7)])))]\n-  \"TARGET_MMX\"\n-  \"punpckhwd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   punpckhwd\\t{%2, %0|%0, %2}\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_mmx_punpck (operands, true); DONE;\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxcvt,sselog,sselog\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_insn \"mmx_punpcklwd\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+(define_insn_and_split \"mmx_punpcklwd\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y,x,Yv\")\n \t(vec_select:V4HI\n \t  (vec_concat:V8HI\n-\t    (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\"))\n+\t    (match_operand:V4HI 1 \"register_operand\" \"0,0,Yv\")\n+\t    (match_operand:V4HI 2 \"register_mmxmem_operand\" \"ym,x,Yv\"))\n           (parallel [(const_int 0) (const_int 4)\n                      (const_int 1) (const_int 5)])))]\n-  \"TARGET_MMX\"\n-  \"punpcklwd\\t{%2, %0|%0, %k2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   punpcklwd\\t{%2, %0|%0, %k2}\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_mmx_punpck (operands, false); DONE;\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxcvt,sselog,sselog\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_insn \"mmx_punpckhdq\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+(define_insn_and_split \"mmx_punpckhdq\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y,x,Yv\")\n \t(vec_select:V2SI\n \t  (vec_concat:V4SI\n-\t    (match_operand:V2SI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\"))\n+\t    (match_operand:V2SI 1 \"register_operand\" \"0,0,Yv\")\n+\t    (match_operand:V2SI 2 \"register_mmxmem_operand\" \"ym,x,Yv\"))\n \t  (parallel [(const_int 1)\n \t\t     (const_int 3)])))]\n-  \"TARGET_MMX\"\n-  \"punpckhdq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   punpckhdq\\t{%2, %0|%0, %2}\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_mmx_punpck (operands, true); DONE;\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxcvt,sselog,sselog\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_insn \"mmx_punpckldq\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+(define_insn_and_split \"mmx_punpckldq\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y,x,Yv\")\n \t(vec_select:V2SI\n \t  (vec_concat:V4SI\n-\t    (match_operand:V2SI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\"))\n+\t    (match_operand:V2SI 1 \"register_operand\" \"0,0,Yv\")\n+\t    (match_operand:V2SI 2 \"register_mmxmem_operand\" \"ym,x,Yv\"))\n \t  (parallel [(const_int 0)\n \t\t     (const_int 2)])))]\n-  \"TARGET_MMX\"\n-  \"punpckldq\\t{%2, %0|%0, %k2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   punpckldq\\t{%2, %0|%0, %k2}\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_mmx_punpck (operands, false); DONE;\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxcvt,sselog,sselog\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n (define_expand \"mmx_pinsrw\"\n   [(set (match_operand:V4HI 0 \"register_operand\")"}]}