{"sha": "387cd9d37950a93225f19bc4054e45638dd7d29a", "node_id": "C_kwDOANBUbNoAKDM4N2NkOWQzNzk1MGE5MzIyNWYxOWJjNDA1NGU0NTYzOGRkN2QyOWE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-04T13:45:26Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-26T19:10:08Z"}, "message": "RISC-V: Refine Phase 3 of VSETVL PASS\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vsetvl.cc (can_backward_propagate_p): Fix for null iter_bb.\n\t(vector_insn_info::set_demand_info): New function.\n\t(pass_vsetvl::emit_local_forward_vsetvls): Adjust for refinement of Phase 3.\n\t(pass_vsetvl::merge_successors): Ditto.\n\t(pass_vsetvl::compute_global_backward_infos): Ditto.\n\t(pass_vsetvl::backward_demand_fusion): Ditto.\n\t(pass_vsetvl::forward_demand_fusion): Ditto.\n\t(pass_vsetvl::demand_fusion): New function.\n\t(pass_vsetvl::lazy_vsetvl): Adjust for refinement of phase 3.\n\t* config/riscv/riscv-vsetvl.h: New function declaration.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-27.c: Update\n\ttestcase.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-28.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-45.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-25.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-26.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-27.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-28.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-3.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-7.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-12.c: Ditto.", "tree": {"sha": "7605cff22c043f09e61c4ae7659bcc7af1944d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7605cff22c043f09e61c4ae7659bcc7af1944d1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387cd9d37950a93225f19bc4054e45638dd7d29a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387cd9d37950a93225f19bc4054e45638dd7d29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387cd9d37950a93225f19bc4054e45638dd7d29a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387cd9d37950a93225f19bc4054e45638dd7d29a/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cca9c44eca42d71ef20fc00a261616ba66edd089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca9c44eca42d71ef20fc00a261616ba66edd089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca9c44eca42d71ef20fc00a261616ba66edd089"}], "stats": {"total": 193, "additions": 155, "deletions": 38}, "files": [{"sha": "9ed081d0a720372c80e5fa04426f5b284d91fedc", "filename": "gcc/config/riscv/riscv-vsetvl.cc", "status": "modified", "additions": 127, "deletions": 10, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -43,7 +43,8 @@ along with GCC; see the file COPYING3.  If not see\n     -  Phase 2 - Emit vsetvl instructions within each basic block according to\n        demand, compute and save ANTLOC && AVLOC of each block.\n \n-    -  Phase 3 - Backward demanded info propagation and fusion across blocks.\n+    -  Phase 3 - Backward && forward demanded info propagation and fusion across\n+       blocks.\n \n     -  Phase 4 - Lazy code motion including: compute local properties,\n        pre_edge_lcm and vsetvl insertion && delete edges for LCM results.\n@@ -434,8 +435,12 @@ can_backward_propagate_p (const function_info *ssa, const basic_block cfg_bb,\n \tset_info *ultimate_def = look_through_degenerate_phi (set);\n \tconst basic_block ultimate_bb = ultimate_def->bb ()->cfg_bb ();\n \tFOR_BB_BETWEEN (iter_bb, ultimate_bb, def->bb ()->cfg_bb (), next_bb)\n-\t  if (iter_bb->index == cfg_bb->index)\n-\t    return true;\n+\t  {\n+\t    if (!iter_bb)\n+\t      break;\n+\t    if (iter_bb->index == cfg_bb->index)\n+\t      return true;\n+\t  }\n \n \treturn false;\n       };\n@@ -1172,6 +1177,19 @@ vector_insn_info::parse_insn (insn_info *insn)\n     m_demands[DEMAND_MASK_POLICY] = true;\n }\n \n+void\n+vector_insn_info::set_demand_info (const vector_insn_info &other)\n+{\n+  set_sew (other.get_sew ());\n+  set_vlmul (other.get_vlmul ());\n+  set_ratio (other.get_ratio ());\n+  set_ta (other.get_ta ());\n+  set_ma (other.get_ma ());\n+  set_avl_info (other.get_avl_info ());\n+  for (size_t i = 0; i < NUM_DEMAND; i++)\n+    m_demands[i] = other.demand_p ((enum demand_type) i);\n+}\n+\n void\n vector_insn_info::demand_vl_vtype ()\n {\n@@ -1691,8 +1709,10 @@ class pass_vsetvl : public rtl_opt_pass\n   void emit_local_forward_vsetvls (const bb_info *);\n \n   /* Phase 3.  */\n-  void merge_successors (const basic_block, const basic_block);\n-  void compute_global_backward_infos (void);\n+  bool merge_successors (const basic_block, const basic_block);\n+  bool backward_demand_fusion (void);\n+  bool forward_demand_fusion (void);\n+  void demand_fusion (void);\n \n   /* Phase 4.  */\n   void prune_expressions (void);\n@@ -1866,7 +1886,7 @@ pass_vsetvl::emit_local_forward_vsetvls (const bb_info *bb)\n }\n \n /* Merge all successors of Father except child node.  */\n-void\n+bool\n pass_vsetvl::merge_successors (const basic_block father,\n \t\t\t       const basic_block child)\n {\n@@ -1878,6 +1898,7 @@ pass_vsetvl::merge_successors (const basic_block father,\n   gcc_assert (father_info.reaching_out.dirty_p ()\n \t      || father_info.reaching_out.empty_p ());\n \n+  bool changed_p = false;\n   FOR_EACH_EDGE (e, ei, father->succs)\n     {\n       const basic_block succ = e->dest;\n@@ -1907,12 +1928,15 @@ pass_vsetvl::merge_successors (const basic_block father,\n \n       father_info.local_dem = new_info;\n       father_info.reaching_out = new_info;\n+      changed_p = true;\n     }\n+\n+  return changed_p;\n }\n \n /* Compute global backward demanded info.  */\n-void\n-pass_vsetvl::compute_global_backward_infos (void)\n+bool\n+pass_vsetvl::backward_demand_fusion (void)\n {\n   /* We compute global infos by backward propagation.\n      We want to have better performance in these following cases:\n@@ -1939,6 +1963,7 @@ pass_vsetvl::compute_global_backward_infos (void)\n \t   We backward propagate the first VSETVL into e32,mf2 so that we\n \t   could be able to eliminate the second VSETVL in LCM.  */\n \n+  bool changed_p = false;\n   for (const bb_info *bb : crtl->ssa->reverse_bbs ())\n     {\n       basic_block cfg_bb = bb->cfg_bb ();\n@@ -1982,9 +2007,10 @@ pass_vsetvl::compute_global_backward_infos (void)\n \t\t  block_info.reaching_out.set_dirty ();\n \t\t  block_info.reaching_out.set_dirty_pat (new_pat);\n \t\t  block_info.local_dem = block_info.reaching_out;\n+\t\t  changed_p = true;\n \t\t}\n \n-\t      merge_successors (e->src, cfg_bb);\n+\t      changed_p |= merge_successors (e->src, cfg_bb);\n \t    }\n \t  else if (block_info.reaching_out.dirty_p ())\n \t    {\n@@ -2011,6 +2037,7 @@ pass_vsetvl::compute_global_backward_infos (void)\n \t      new_info.set_dirty_pat (new_pat);\n \t      block_info.local_dem = new_info;\n \t      block_info.reaching_out = new_info;\n+\t      changed_p = true;\n \t    }\n \t  else\n \t    {\n@@ -2031,9 +2058,99 @@ pass_vsetvl::compute_global_backward_infos (void)\n \t      if (block_info.local_dem == block_info.reaching_out)\n \t\tblock_info.local_dem = new_info;\n \t      block_info.reaching_out = new_info;\n+\t      changed_p = true;\n \t    }\n \t}\n     }\n+  return changed_p;\n+}\n+\n+/* Compute global forward demanded info.  */\n+bool\n+pass_vsetvl::forward_demand_fusion (void)\n+{\n+  /* Enhance the global information propagation especially\n+     backward propagation miss the propagation.\n+     Consider such case:\n+\n+\t\t\tbb0\n+\t\t\t(TU)\n+\t\t       /   \\\n+\t\t     bb1   bb2\n+\t\t     (TU)  (ANY)\n+  existing edge -----> \\    / (TU) <----- LCM create this edge.\n+\t\t\tbb3\n+\t\t\t(TU)\n+\n+     Base on the situation, LCM fails to eliminate the VSETVL instruction and\n+     insert an edge from bb2 to bb3 since we can't backward propagate bb3 into\n+     bb2. To avoid this confusing LCM result and non-optimal codegen, we should\n+     forward propagate information from bb0 to bb2 which is friendly to LCM.  */\n+  bool changed_p = false;\n+  for (const bb_info *bb : crtl->ssa->bbs ())\n+    {\n+      basic_block cfg_bb = bb->cfg_bb ();\n+      const auto &prop\n+\t= m_vector_manager->vector_block_infos[cfg_bb->index].reaching_out;\n+\n+      /* If there is nothing to propagate, just skip it.  */\n+      if (!prop.valid_or_dirty_p ())\n+\tcontinue;\n+\n+      edge e;\n+      edge_iterator ei;\n+      /* Forward propagate to each successor.  */\n+      FOR_EACH_EDGE (e, ei, cfg_bb->succs)\n+\t{\n+\t  auto &local_dem\n+\t    = m_vector_manager->vector_block_infos[e->dest->index].local_dem;\n+\t  auto &reaching_out\n+\t    = m_vector_manager->vector_block_infos[e->dest->index].reaching_out;\n+\n+\t  /* It's quite obvious, we don't need to propagate itself.  */\n+\t  if (e->dest->index == cfg_bb->index)\n+\t    continue;\n+\n+\t  /* If there is nothing to propagate, just skip it.  */\n+\t  if (!local_dem.valid_or_dirty_p ())\n+\t    continue;\n+\n+\t  if (prop > local_dem)\n+\t    {\n+\t      if (local_dem.dirty_p ())\n+\t\t{\n+\t\t  gcc_assert (local_dem == reaching_out);\n+\t\t  rtx dirty_pat\n+\t\t    = gen_vsetvl_pat (prop.get_insn ()->rtl (), prop);\n+\t\t  local_dem = prop;\n+\t\t  local_dem.set_dirty ();\n+\t\t  local_dem.set_dirty_pat (dirty_pat);\n+\t\t  reaching_out = local_dem;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (reaching_out == local_dem)\n+\t\t    reaching_out.set_demand_info (prop);\n+\t\t  local_dem.set_demand_info (prop);\n+\t\t  change_vsetvl_insn (local_dem.get_insn (), prop);\n+\t\t}\n+\t      changed_p = true;\n+\t    }\n+\t}\n+    }\n+  return changed_p;\n+}\n+\n+void\n+pass_vsetvl::demand_fusion (void)\n+{\n+  bool changed_p = true;\n+  while (changed_p)\n+    {\n+      changed_p = false;\n+      changed_p |= backward_demand_fusion ();\n+      changed_p |= forward_demand_fusion ();\n+    }\n \n   if (dump_file)\n     {\n@@ -2517,7 +2634,7 @@ pass_vsetvl::lazy_vsetvl (void)\n   /* Phase 3 - Propagate demanded info across blocks.  */\n   if (dump_file)\n     fprintf (dump_file, \"\\nPhase 3: Demands propagation across blocks\\n\");\n-  compute_global_backward_infos ();\n+  demand_fusion ();\n   if (dump_file)\n     m_vector_manager->dump (dump_file);\n "}, {"sha": "72a02289adba5ea3c91d997eb2c3378fab46886f", "filename": "gcc/config/riscv/riscv-vsetvl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.h?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -273,6 +273,7 @@ class vector_insn_info : public vl_vtype_info\n   void set_dirty () { m_state = DIRTY; }\n   void set_dirty_pat (rtx pat) { m_dirty_pat = pat; }\n   void set_insn (rtl_ssa::insn_info *insn) { m_insn = insn; }\n+  void set_demand_info (const vector_insn_info &);\n \n   bool demand_p (enum demand_type type) const { return m_demands[type]; }\n   void demand (enum demand_type type) { m_demands[type] = true; }"}, {"sha": "52e16d6a109df2e84bffea7ba90bf08b3fe1eb1f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-27.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-27.c?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -38,7 +38,7 @@ void f (void * restrict in, void * restrict out, void * restrict in2, void * res\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n@@ -48,4 +48,4 @@ void f (void * restrict in, void * restrict out, void * restrict in2, void * res\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 10 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "98df1fc7dabe7ea995cb06611e24f9c984a9cea8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-28.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-28.c?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -40,7 +40,7 @@ void f (void * restrict in, void * restrict out, void * restrict in2, void * res\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n@@ -51,4 +51,4 @@ void f (void * restrict in, void * restrict out, void * restrict in2, void * res\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 10 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 11 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "3c2b5271e0cb4e2e2c446d60602e81a02a7a5d61", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-45.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-45.c?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -30,5 +30,5 @@ void foo5_5 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m,\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "13aa25ec6b36a4d128cde7f3d50b591ecaf173e2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-25.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-25.c?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -563,10 +563,10 @@ void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "a5e065d012a625b703ae6e89843d68b6a84e0ef1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-26.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-26.c?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -483,10 +483,10 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n "}, {"sha": "927595144ab647ba85334ab6bdae27eb48735216", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-27.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-27.c?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -483,9 +483,9 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "cbb4501605bbc2ae6d9c104566a7764a3b7be0ac", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-28.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-28.c?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -83,4 +83,4 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "ad89899f65c6c3d97a8b524942b237e194747d2f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-3.c?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -31,5 +31,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "46f62927d0c3a61f078cae205e52783e7acf6de3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-7.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-7.c?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -23,4 +23,3 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, si\n /* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {j\\s+\\.L[0-9]+\\s+\\.L[0-9]+:\\s+vlm\\.v} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "66c36ab24f8b67da08c79ccc91983631d992a62c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387cd9d37950a93225f19bc4054e45638dd7d29a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-12.c?ref=387cd9d37950a93225f19bc4054e45638dd7d29a", "patch": "@@ -52,4 +52,4 @@ void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond1, int con\n     }\n }\n /* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+"}]}