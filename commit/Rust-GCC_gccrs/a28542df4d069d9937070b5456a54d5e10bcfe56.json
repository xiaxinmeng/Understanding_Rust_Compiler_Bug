{"sha": "a28542df4d069d9937070b5456a54d5e10bcfe56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI4NTQyZGY0ZDA2OWQ5OTM3MDcwYjU0NTZhNTRkNWUxMGJjZmU1Ng==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-25T13:53:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-25T13:58:07Z"}, "message": "c++: DECL_BUILTIN_P for builtins\n\nWe currently detect builtin decls via DECL_ARTIFICIAL &&\n!DECL_HIDDEN_FUNCTION_P, which, besides being clunky, is a problem as\nhiddenness is a property of the symbol table -- not the decl being\nhidden.  This adds DECL_BUILTIN_P, which just looks at the\nSOURCE_LOCATION -- we have a magic one for builtins.\n\nOne of the consequential changes is to make function-scope omp udrs\nhave function context (needed because otherwise duplicate-decls thinks\nthe types don't match at the point we check).  This is also morally\nbetter, because that's what they are -- nested functions, stop lying.\n\n(That's actually my plan for all DECL_LOCAL_DECL_P decls, as they are\ndistinct decls to the namespace-scope decl they alias.)\n\n\tgcc/cp/\n\t* cp-tree.h (DECL_BUILTIN_P): New.\n\t* decl.c (duplicate_decls): Use it.  Do not treat omp-udr as a\n\tbuiltin.\n\t* name-lookup.c (anticipated_builtin): Use it.\n\t(set_decl_context_in_fn): Function-scope OMP UDRs have function context.\n\t(do_nonmember_using_decl): Use DECL_BUILTIN_P.\n\t* parser.c (cp_parser_omp_declare_reduction): Function-scope OMP\n\tUDRs have function context.  Assert we never find a valid duplicate.\n\t* pt.c (tsubst_expr): Function-scope OMP UDRs have function context.\n\tlibcc1/\n\t* libcp1plugin.cc (supplement_binding): Use DECL_BULTIN_P.", "tree": {"sha": "be1f8948f5340c1e7d84ff3408b1951e66a11fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be1f8948f5340c1e7d84ff3408b1951e66a11fb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a28542df4d069d9937070b5456a54d5e10bcfe56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28542df4d069d9937070b5456a54d5e10bcfe56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a28542df4d069d9937070b5456a54d5e10bcfe56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28542df4d069d9937070b5456a54d5e10bcfe56/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69cf7decf1be230739b1e309115832373025b41d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69cf7decf1be230739b1e309115832373025b41d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69cf7decf1be230739b1e309115832373025b41d"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "bd78f00ba9799195b97f018f3b8454c70e84d9b0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28542df4d069d9937070b5456a54d5e10bcfe56/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28542df4d069d9937070b5456a54d5e10bcfe56/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a28542df4d069d9937070b5456a54d5e10bcfe56", "patch": "@@ -4040,6 +4040,10 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define FNDECL_USED_AUTO(NODE) \\\n   TREE_LANG_FLAG_2 (FUNCTION_DECL_CHECK (NODE))\n \n+/* True if NODE is a builtin decl.  */\n+#define DECL_BUILTIN_P(NODE) \\\n+  (DECL_SOURCE_LOCATION(NODE) == BUILTINS_LOCATION)\n+\n /* Nonzero if NODE is a DECL which we know about but which has not\n    been explicitly declared, such as a built-in function or a friend\n    declared inside a class.  In the latter case DECL_HIDDEN_FRIEND_P"}, {"sha": "1709dd9a370bb0fcdbfe91f6db657547590dd013", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28542df4d069d9937070b5456a54d5e10bcfe56/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28542df4d069d9937070b5456a54d5e10bcfe56/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a28542df4d069d9937070b5456a54d5e10bcfe56", "patch": "@@ -1464,9 +1464,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \n   /* Check for redeclaration and other discrepancies.  */\n   if (TREE_CODE (olddecl) == FUNCTION_DECL\n-      && DECL_ARTIFICIAL (olddecl)\n-      /* A C++20 implicit friend operator== uses the normal path (94462).  */\n-      && !DECL_HIDDEN_FRIEND_P (olddecl))\n+      && DECL_BUILTIN_P (olddecl))\n     {\n       if (TREE_CODE (newdecl) != FUNCTION_DECL)\n \t{\n@@ -1508,15 +1506,6 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t      \"declaration %q#D\", newdecl, olddecl);\n \t  return NULL_TREE;\n \t}\n-      else if (DECL_OMP_DECLARE_REDUCTION_P (olddecl))\n-\t{\n-\t  gcc_assert (DECL_OMP_DECLARE_REDUCTION_P (newdecl));\n-\t  error_at (newdecl_loc,\n-\t\t    \"redeclaration of %<pragma omp declare reduction%>\");\n-\t  inform (olddecl_loc,\n-\t\t  \"previous %<pragma omp declare reduction%> declaration\");\n-\t  return error_mark_node;\n-\t}\n       else if (!types_match)\n \t{\n \t  /* Avoid warnings redeclaring built-ins which have not been\n@@ -1815,6 +1804,17 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  return error_mark_node;\n \t}\n     }\n+  else if (TREE_CODE (newdecl) == FUNCTION_DECL\n+\t   && DECL_OMP_DECLARE_REDUCTION_P (newdecl))\n+    {\n+      /* OMP UDRs are never duplicates. */\n+      gcc_assert (DECL_OMP_DECLARE_REDUCTION_P (olddecl));\n+      error_at (newdecl_loc,\n+\t\t\"redeclaration of %<pragma omp declare reduction%>\");\n+      inform (olddecl_loc,\n+\t      \"previous %<pragma omp declare reduction%> declaration\");\n+      return error_mark_node;\n+    }\n   else if (TREE_CODE (newdecl) == FUNCTION_DECL\n \t    && ((DECL_TEMPLATE_SPECIALIZATION (olddecl)\n \t\t && (!DECL_TEMPLATE_INFO (newdecl)"}, {"sha": "dbc6cc32dd8a9cfcc4128faed22732845f9d05a6", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28542df4d069d9937070b5456a54d5e10bcfe56/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28542df4d069d9937070b5456a54d5e10bcfe56/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=a28542df4d069d9937070b5456a54d5e10bcfe56", "patch": "@@ -2119,10 +2119,10 @@ anticipated_builtin_p (tree ovl)\n   tree fn = OVL_FUNCTION (ovl);\n   gcc_checking_assert (DECL_ANTICIPATED (fn));\n \n-  if (DECL_HIDDEN_FRIEND_P (fn))\n-    return false;\n+  if (DECL_BUILTIN_P (fn))\n+    return true;\n \n-  return true;\n+  return false;\n }\n \n /* BINDING records an existing declaration for a name in the current scope.\n@@ -2857,9 +2857,12 @@ set_decl_context_in_fn (tree ctx, tree decl)\n {\n   if (TREE_CODE (decl) == FUNCTION_DECL\n       || (VAR_P (decl) && DECL_EXTERNAL (decl)))\n-    /* Make sure local externs are marked as such.  */\n+    /* Make sure local externs are marked as such.  OMP UDRs really\n+       are nested functions.  */\n     gcc_checking_assert (DECL_LOCAL_DECL_P (decl)\n-\t\t\t && DECL_NAMESPACE_SCOPE_P (decl));\n+\t\t\t && (DECL_NAMESPACE_SCOPE_P (decl)\n+\t\t\t     || (TREE_CODE (decl) == FUNCTION_DECL\n+\t\t\t\t && DECL_OMP_DECLARE_REDUCTION_P (decl))));\n \n   if (!DECL_CONTEXT (decl)\n       /* When parsing the parameter list of a function declarator,\n@@ -3934,7 +3937,7 @@ do_nonmember_using_decl (name_lookup &lookup, bool fn_scope_p,\n \t\t}\n \t      else if (old.using_p ())\n \t\tcontinue; /* This is a using decl. */\n-\t      else if (old.hidden_p () && !DECL_HIDDEN_FRIEND_P (old_fn))\n+\t      else if (old.hidden_p () && DECL_BUILTIN_P (old_fn))\n \t\tcontinue; /* This is an anticipated builtin.  */\n \t      else if (!matching_fn_p (new_fn, old_fn))\n \t\tcontinue; /* Parameters do not match.  */"}, {"sha": "ccfae78f65118745263bc5fcde386ebc63e11837", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28542df4d069d9937070b5456a54d5e10bcfe56/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28542df4d069d9937070b5456a54d5e10bcfe56/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a28542df4d069d9937070b5456a54d5e10bcfe56", "patch": "@@ -42567,7 +42567,7 @@ cp_parser_omp_declare_reduction (cp_parser *parser, cp_token *pragma_tok,\n       if (current_function_decl)\n \t{\n \t  block_scope = true;\n-\t  DECL_CONTEXT (fndecl) = global_namespace;\n+\t  DECL_CONTEXT (fndecl) = current_function_decl;\n \t  DECL_LOCAL_DECL_P (fndecl) = true;\n \t  if (!processing_template_decl)\n \t    pushdecl (fndecl);\n@@ -42592,7 +42592,9 @@ cp_parser_omp_declare_reduction (cp_parser *parser, cp_token *pragma_tok,\n       else\n \t{\n \t  DECL_CONTEXT (fndecl) = current_namespace;\n-\t  pushdecl (fndecl);\n+\t  tree d = pushdecl (fndecl);\n+\t  /* We should never meet a matched duplicate decl.  */\n+\t  gcc_checking_assert (d == error_mark_node || d == fndecl);\n \t}\n       if (!block_scope)\n \tstart_preparsed_function (fndecl, NULL_TREE, SF_PRE_PARSED);"}, {"sha": "a4530dba14e1f2f665f51d265caa3254112d9f6b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28542df4d069d9937070b5456a54d5e10bcfe56/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28542df4d069d9937070b5456a54d5e10bcfe56/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a28542df4d069d9937070b5456a54d5e10bcfe56", "patch": "@@ -18109,16 +18109,11 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\telse if (DECL_IMPLICIT_TYPEDEF_P (t))\n \t\t  /* We already did a pushtag.  */;\n \t\telse if (TREE_CODE (decl) == FUNCTION_DECL\n-\t\t\t && DECL_OMP_DECLARE_REDUCTION_P (decl)\n-\t\t\t && DECL_FUNCTION_SCOPE_P (pattern_decl))\n+\t\t\t && DECL_LOCAL_DECL_P (decl)\n+\t\t\t && DECL_OMP_DECLARE_REDUCTION_P (decl))\n \t\t  {\n-\t\t    /* We pretend this is regular local extern decl of\n-\t\t       a namespace-scope fn.  Then we make it really\n-\t\t       local, it is a nested function.  */\n-\t\t    gcc_checking_assert (DECL_LOCAL_DECL_P (decl));\n-\t\t    DECL_CONTEXT (decl) = global_namespace;\n-\t\t    pushdecl (decl);\n \t\t    DECL_CONTEXT (decl) = current_function_decl;\n+\t\t    pushdecl (decl);\n \t\t    if (cp_check_omp_declare_reduction (decl))\n \t\t      instantiate_body (pattern_decl, args, decl, true);\n \t\t  }"}, {"sha": "3fe310dbb8e93c02af1697257e877d115b9260fb", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28542df4d069d9937070b5456a54d5e10bcfe56/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28542df4d069d9937070b5456a54d5e10bcfe56/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=a28542df4d069d9937070b5456a54d5e10bcfe56", "patch": "@@ -354,7 +354,7 @@ supplement_binding (cxx_binding *binding, tree decl)\n \t      declared, pretend it is not there at all.  */\n \t   || (TREE_CODE (target_bval) == FUNCTION_DECL\n \t       && DECL_ANTICIPATED (target_bval)\n-\t       && !DECL_HIDDEN_FRIEND_P (target_bval)))\n+\t       && DECL_BUILTIN_P (target_bval)))\n     binding->value = decl;\n   else if (TREE_CODE (target_bval) == TYPE_DECL\n \t   && DECL_ARTIFICIAL (target_bval)"}]}