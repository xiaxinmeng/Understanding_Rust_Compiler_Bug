{"sha": "d0558f420b2a5692fd38ac76ffa97ae6c1726ed9", "node_id": "C_kwDOANBUbNoAKGQwNTU4ZjQyMGIyYTU2OTJmZDM4YWM3NmZmYTk3YWU2YzE3MjZlZDk", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2023-01-03T13:40:47Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2023-01-03T13:40:47Z"}, "message": "Improve ix86_expand_int_movcc to allow condition (mask) sharing.\n\nThis patch modifies the way that ix86_expand_int_movcc generates RTL,\nto allow the condition mask to be shared/reused between multiple\nconditional move sequences.  Such redundancy is common when RTL\nif-conversion transforms non-trivial basic blocks.\n\nAs a motivating example, consider the new test case:\n\nint a, b, c, d;\nint foo(int x)\n{\n    if (x == 0) {\n        a = 3;\n        b = 1;\n        c = 4;\n        d = 1;\n    } else {\n        a = 5;\n        b = 9;\n        c = 2;\n        d = 7;\n    }\n    return x;\n}\n\nThis is currently compiled, with -O2, to:\n\nfoo:\tcmpl\t$1, %edi\n\tmovl\t%edi, %eax\n\tsbbl\t%edi, %edi\n\tandl\t$-2, %edi\n\taddl\t$5, %edi\n\tcmpl\t$1, %eax\n\tsbbl\t%esi, %esi\n\tmovl\t%edi, a(%rip)\n\tandl\t$-8, %esi\n\taddl\t$9, %esi\n\tcmpl\t$1, %eax\n\tsbbl\t%ecx, %ecx\n\tmovl\t%esi, b(%rip)\n\tandl\t$2, %ecx\n\taddl\t$2, %ecx\n\tcmpl\t$1, %eax\n\tsbbl\t%edx, %edx\n\tmovl\t%ecx, c(%rip)\n\tandl\t$-6, %edx\n\taddl\t$7, %edx\n\tmovl\t%edx, d(%rip)\n\tret\n\nNotice that the if-then-else blocks have been if-converted into four\nconditional move sequences/assignments, each consisting of cmpl, sbbl,\nandl and addl.  However, as the conditions are the same, the cmpl and\nsbbl instructions used to generate the mask could be shared by CSE.\n\nThis patch enables that so that we now generate:\n\nfoo:    cmpl    $1, %edi\n        movl    %edi, %eax\n        sbbl    %edx, %edx\n        movl    %edx, %edi\n        movl    %edx, %esi\n        movl    %edx, %ecx\n        andl    $-6, %edx\n        andl    $-2, %edi\n        andl    $-8, %esi\n        andl    $2, %ecx\n        addl    $7, %edx\n        addl    $5, %edi\n        addl    $9, %esi\n        addl    $2, %ecx\n        movl    %edx, d(%rip)\n        movl    %edi, a(%rip)\n        movl    %esi, b(%rip)\n        movl    %ecx, c(%rip)\n        ret\n\nNotice, the code now contains only a single cmpl and a single sbbl,\nwith result being shared (via movl).\n\n2023-01-03  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386-expand.cc (ix86_expand_int_movcc): Rewrite\n\tRTL expansion to allow condition (mask) to be shared/reused,\n\tby avoiding overwriting pseudos and adding REG_EQUAL notes.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/cmov10.c: New test case.", "tree": {"sha": "7071eee51b1e31a16996154ed6392f4303afe06b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7071eee51b1e31a16996154ed6392f4303afe06b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0558f420b2a5692fd38ac76ffa97ae6c1726ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0558f420b2a5692fd38ac76ffa97ae6c1726ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0558f420b2a5692fd38ac76ffa97ae6c1726ed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0558f420b2a5692fd38ac76ffa97ae6c1726ed9/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de59d8bd163a4b2e50ab566441ab49d7212c3356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de59d8bd163a4b2e50ab566441ab49d7212c3356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de59d8bd163a4b2e50ab566441ab49d7212c3356"}], "stats": {"total": 67, "additions": 41, "deletions": 26}, "files": [{"sha": "4fd7c3ccd9189474e88c3370239ea2372f3b6b46", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0558f420b2a5692fd38ac76ffa97ae6c1726ed9/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0558f420b2a5692fd38ac76ffa97ae6c1726ed9/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=d0558f420b2a5692fd38ac76ffa97ae6c1726ed9", "patch": "@@ -3284,8 +3284,8 @@ ix86_expand_int_movcc (rtx operands[])\n \t  || negate_cc_compare_p\n \t  || ix86_expand_carry_flag_compare (code, op0, op1, &compare_op))\n \t{\n-\t  /* Detect overlap between destination and compare sources.  */\n-\t  rtx tmp = out;\n+\t  /* Place comparison result in its own pseudo.  */\n+\t  rtx tmp = gen_reg_rtx (mode);\n \n \t  if (negate_cc_compare_p)\n \t    {\n@@ -3295,7 +3295,6 @@ ix86_expand_int_movcc (rtx operands[])\n \t\temit_insn (gen_x86_negsi_ccc (gen_reg_rtx (SImode),\n \t\t\t\t\t      gen_lowpart (SImode, op0)));\n \n-\t      tmp = gen_reg_rtx (mode);\n \t      if (mode == DImode)\n \t\temit_insn (gen_x86_movdicc_0_m1_neg (tmp));\n \t      else\n@@ -3337,9 +3336,6 @@ ix86_expand_int_movcc (rtx operands[])\n \t\t}\n \t      diff = ct - cf;\n \n-\t      if (reg_overlap_mentioned_p (out, compare_op))\n-\t\ttmp = gen_reg_rtx (mode);\n-\n \t      if (mode == DImode)\n \t\temit_insn (gen_x86_movdicc_0_m1 (tmp, flags, compare_op));\n \t      else\n@@ -3358,6 +3354,11 @@ ix86_expand_int_movcc (rtx operands[])\n \t      tmp = emit_store_flag (tmp, code, op0, op1, VOIDmode, 0, -1);\n \t    }\n \n+\t  /* Add a REG_EQUAL note to allow condition to be shared.  */\n+\t  rtx note = gen_rtx_fmt_ee (code, mode, op0, op1);\n+\t  set_unique_reg_note (get_last_insn (), REG_EQUAL,\n+\t\t\t       gen_rtx_NEG (mode, note));\n+\n \t  if (diff == 1)\n \t    {\n \t      /*\n@@ -3368,9 +3369,8 @@ ix86_expand_int_movcc (rtx operands[])\n \t       * Size 5 - 8.\n \t       */\n \t      if (ct)\n-\t\ttmp = expand_simple_binop (mode, PLUS,\n-\t\t\t\t\t   tmp, GEN_INT (ct),\n-\t\t\t\t\t   copy_rtx (tmp), 1, OPTAB_DIRECT);\n+\t\ttmp = expand_simple_binop (mode, PLUS, tmp, GEN_INT (ct),\n+\t\t\t\t\t   NULL_RTX, 1, OPTAB_DIRECT);\n \t    }\n \t  else if (cf == -1)\n \t    {\n@@ -3381,9 +3381,8 @@ ix86_expand_int_movcc (rtx operands[])\n \t       *\n \t       * Size 8.\n \t       */\n-\t      tmp = expand_simple_binop (mode, IOR,\n-\t\t\t\t\t tmp, GEN_INT (ct),\n-\t\t\t\t\t copy_rtx (tmp), 1, OPTAB_DIRECT);\n+\t      tmp = expand_simple_binop (mode, IOR, tmp, GEN_INT (ct),\n+\t\t\t\t\t NULL_RTX, 1, OPTAB_DIRECT);\n \t    }\n \t  else if (diff == -1 && ct)\n \t    {\n@@ -3395,11 +3394,10 @@ ix86_expand_int_movcc (rtx operands[])\n \t       *\n \t       * Size 8 - 11.\n \t       */\n-\t      tmp = expand_simple_unop (mode, NOT, tmp, copy_rtx (tmp), 1);\n+\t      tmp = expand_simple_unop (mode, NOT, tmp, NULL_RTX, 1);\n \t      if (cf)\n-\t\ttmp = expand_simple_binop (mode, PLUS,\n-\t\t\t\t\t   copy_rtx (tmp), GEN_INT (cf),\n-\t\t\t\t\t   copy_rtx (tmp), 1, OPTAB_DIRECT);\n+\t\ttmp = expand_simple_binop (mode, PLUS, tmp, GEN_INT (cf),\n+\t\t\t\t\t   NULL_RTX, 1, OPTAB_DIRECT);\n \t    }\n \t  else\n \t    {\n@@ -3417,22 +3415,18 @@ ix86_expand_int_movcc (rtx operands[])\n \t\t{\n \t\t  cf = ct;\n \t\t  ct = 0;\n-\t\t  tmp = expand_simple_unop (mode, NOT, tmp, copy_rtx (tmp), 1);\n+\t\t  tmp = expand_simple_unop (mode, NOT, tmp, NULL_RTX, 1);\n \t\t}\n \n-\t      tmp = expand_simple_binop (mode, AND,\n-\t\t\t\t\t copy_rtx (tmp),\n+\t      tmp = expand_simple_binop (mode, AND, tmp,\n \t\t\t\t\t gen_int_mode (cf - ct, mode),\n-\t\t\t\t\t copy_rtx (tmp), 1, OPTAB_DIRECT);\n+\t\t\t\t\t NULL_RTX, 1, OPTAB_DIRECT);\n \t      if (ct)\n-\t\ttmp = expand_simple_binop (mode, PLUS,\n-\t\t\t\t\t   copy_rtx (tmp), GEN_INT (ct),\n-\t\t\t\t\t   copy_rtx (tmp), 1, OPTAB_DIRECT);\n+\t\ttmp = expand_simple_binop (mode, PLUS, tmp, GEN_INT (ct),\n+\t\t\t\t\t   NULL_RTX, 1, OPTAB_DIRECT);\n \t    }\n \n-\t  if (!rtx_equal_p (tmp, out))\n-\t    emit_move_insn (copy_rtx (out), copy_rtx (tmp));\n-\n+\t  emit_move_insn (out, tmp);\n \t  return true;\n \t}\n "}, {"sha": "142b4d7d051cf1c840251b85062d7f347d16f91b", "filename": "gcc/testsuite/gcc.target/i386/cmov10.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0558f420b2a5692fd38ac76ffa97ae6c1726ed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0558f420b2a5692fd38ac76ffa97ae6c1726ed9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov10.c?ref=d0558f420b2a5692fd38ac76ffa97ae6c1726ed9", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+int a, b, c, d;\n+\n+int foo(int x)\n+{\n+    if (x == 0) {\n+        a = 3;\n+        b = 1;\n+        c = 4;\n+        d = 1;\n+    } else {\n+        a = 5;\n+        b = 9;\n+        c = 2;\n+        d = 7;\n+    }\n+    return x;\n+}\n+/* { dg-final { scan-assembler-times \"cmpl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sbbl\" 1 } } */"}]}