{"sha": "056061d8da51885e41182e2cd2d44b2435c25a00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2MDYxZDhkYTUxODg1ZTQxMTgyZTJjZDJkNDRiMjQzNWMyNWEwMA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-09-01T23:26:36Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-09-01T23:26:36Z"}, "message": "varasm.c (output_constant): Let the target resolve conversions of addresses to non-default pointer sizes.\n\n* varasm.c (output_constant): Let the target resolve\nconversions of addresses to non-default pointer sizes.\n\nFrom-SVN: r103750", "tree": {"sha": "0d310b0b29272a8adbb7c0ca038399a3e4784a88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d310b0b29272a8adbb7c0ca038399a3e4784a88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056061d8da51885e41182e2cd2d44b2435c25a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056061d8da51885e41182e2cd2d44b2435c25a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056061d8da51885e41182e2cd2d44b2435c25a00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056061d8da51885e41182e2cd2d44b2435c25a00/comments", "author": null, "committer": null, "parents": [{"sha": "4eafe8821205e06658911b724a204043dcf25ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eafe8821205e06658911b724a204043dcf25ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eafe8821205e06658911b724a204043dcf25ee8"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "9d20f4b542a774449fccd84a7ad2ec18e0e77351", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056061d8da51885e41182e2cd2d44b2435c25a00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056061d8da51885e41182e2cd2d44b2435c25a00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=056061d8da51885e41182e2cd2d44b2435c25a00", "patch": "@@ -1,3 +1,8 @@\n+2005-09-01  DJ Delorie  <dj@redhat.com>\n+\n+\t* varasm.c (output_constant): Let the target resolve\n+\tconversions of addresses to non-default pointer sizes.\n+\n 2005-09-01  Nicolas Pitre <nico@cam.org>\n \n \t* config/arm/arm.c (arm_legitimize_address): Split absolute addresses"}, {"sha": "a85f659c32ae02d2486e2b1cac11fd8de7b16441", "filename": "gcc/varasm.c", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056061d8da51885e41182e2cd2d44b2435c25a00/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056061d8da51885e41182e2cd2d44b2435c25a00/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=056061d8da51885e41182e2cd2d44b2435c25a00", "patch": "@@ -3847,12 +3847,46 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n   if (size == 0 || flag_syntax_only)\n     return;\n \n+  /* See if we're trying to intialize a pointer in a non-default mode\n+     to the address of some declaration somewhere.  If the target says\n+     the mode is valid for pointers, assume the target has a way of\n+     resolving it.  */\n+  if (TREE_CODE (exp) == NOP_EXPR\n+      && POINTER_TYPE_P (TREE_TYPE (exp))\n+      && targetm.valid_pointer_mode (TYPE_MODE (TREE_TYPE (exp))))\n+    {\n+      tree saved_type = TREE_TYPE (exp);\n+\n+      /* Peel off any intermediate conversions-to-pointer for valid\n+\t pointer modes.  */\n+      while (TREE_CODE (exp) == NOP_EXPR\n+\t     && POINTER_TYPE_P (TREE_TYPE (exp))\n+\t     && targetm.valid_pointer_mode (TYPE_MODE (TREE_TYPE (exp))))\n+\texp = TREE_OPERAND (exp, 0);\n+\n+      /* If what we're left with is the address of something, we can\n+\t convert the address to the final type and output it that\n+\t way.  */\n+      if (TREE_CODE (exp) == ADDR_EXPR)\n+\texp = build1 (ADDR_EXPR, saved_type, TREE_OPERAND (exp, 0));\n+    }\n+\n   /* Eliminate any conversions since we'll be outputting the underlying\n      constant.  */\n   while (TREE_CODE (exp) == NOP_EXPR || TREE_CODE (exp) == CONVERT_EXPR\n \t || TREE_CODE (exp) == NON_LVALUE_EXPR\n \t || TREE_CODE (exp) == VIEW_CONVERT_EXPR)\n-    exp = TREE_OPERAND (exp, 0);\n+    {\n+      HOST_WIDE_INT type_size = int_size_in_bytes (TREE_TYPE (exp));\n+      HOST_WIDE_INT op_size = int_size_in_bytes (TREE_TYPE (TREE_OPERAND (exp, 0)));\n+\n+      /* Make sure eliminating the conversion is really a no-op.  */\n+      if (type_size != op_size)\n+\tinternal_error (\"no-op convert from %wd to %wd bytes in initializer\",\n+\t\t\top_size, type_size);\n+\n+      exp = TREE_OPERAND (exp, 0);\n+    }\n \n   code = TREE_CODE (TREE_TYPE (exp));\n   thissize = int_size_in_bytes (TREE_TYPE (exp));"}]}