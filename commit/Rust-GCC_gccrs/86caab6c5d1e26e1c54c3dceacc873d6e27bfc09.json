{"sha": "86caab6c5d1e26e1c54c3dceacc873d6e27bfc09", "node_id": "C_kwDOANBUbNoAKDg2Y2FhYjZjNWQxZTI2ZTFjNTRjM2RjZWFjYzg3M2Q2ZTI3YmZjMDk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-19T22:31:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-19T22:31:15Z"}, "message": "c++: Fix up handling of non-dependent subscript with static operator[] [PR108437]\n\nAs the following testcases shows, when adding static operator[]\nsupport I've missed that the 2 build_min_non_dep_op_overload functions\nneed to be adjusted.  The first one we only use for the single index\ncase, but as cp_tree_code_length (ARRAY_REF) is 2, we were running\ninto an assertion there which compared nargs and expected_nargs.\nFor ARRAY_REF, the operator[] is either a non-static member or newly\nstatic member, never out of class and for the static member case\nif user uses single index the operator[] needs to have a single\nargument as well, but the function is called with 2 - the object\nit is invoked on and the index.  We need to evaluate side-effects\nof the object and use just a single argument in the call - the index.\nThe other build_min_non_dep_op_overload overload has been added\nsolely for ARRAY_REF - CALL_EXPR is the other operator that accepts\nvariable number of operands but that one goes through different\nroutines.  There we asserted it is a METHOD_TYPE, so again\nwe shouldn't assert that but handle the case when it is not one\nby making sure object's side-effects are evaluated if needed and\npassing all the index arguments to the static operator[].\n\n2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/108437\n\t* cp-tree.h (keep_unused_object_arg): Declare.\n\t* call.cc (keep_unused_object_arg): No longer static.\n\t* tree.cc (build_min_non_dep_op_overload): Handle ARRAY_REF\n\twith overload being static member function.\n\n\t* g++.dg/cpp23/subscript12.C: New test.\n\t* g++.dg/cpp23/subscript13.C: New test.", "tree": {"sha": "1ceb7d654a64ea530709578cd1bbb50869c14394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ceb7d654a64ea530709578cd1bbb50869c14394"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b9a989adc042b304572fd6d4ade46b47be6ccb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9a989adc042b304572fd6d4ade46b47be6ccb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b9a989adc042b304572fd6d4ade46b47be6ccb8"}], "stats": {"total": 110, "additions": 102, "deletions": 8}, "files": [{"sha": "991730713e6bd94ce33cc6d084622210a3e54789", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=86caab6c5d1e26e1c54c3dceacc873d6e27bfc09", "patch": "@@ -5187,7 +5187,7 @@ build_operator_new_call (tree fnname, vec<tree, va_gc> **args,\n    or static operator(), in which cases the source expression\n    would be `obj[...]' or `obj(...)'.  */\n \n-static tree\n+tree\n keep_unused_object_arg (tree result, tree obj, tree fn)\n {\n   if (result == NULL_TREE"}, {"sha": "9f188724cf2f2944565842d5b02c8167144a6048", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=86caab6c5d1e26e1c54c3dceacc873d6e27bfc09", "patch": "@@ -6599,6 +6599,7 @@ inline tree build_new_op (const op_location_t &loc, enum tree_code code,\n   return build_new_op (loc, code, flags, arg1, arg2, NULL_TREE, NULL_TREE,\n \t\t       NULL, complain);\n }\n+extern tree keep_unused_object_arg\t\t(tree, tree, tree);\n extern tree build_op_call\t\t\t(tree, vec<tree, va_gc> **,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_op_subscript\t\t\t(const op_location_t &, tree,"}, {"sha": "c1da868732b2eaad5d9095e6e5090fa3c6fa1847", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=86caab6c5d1e26e1c54c3dceacc873d6e27bfc09", "patch": "@@ -3693,14 +3693,20 @@ build_min_non_dep_op_overload (enum tree_code op,\n {\n   va_list p;\n   int nargs, expected_nargs;\n-  tree fn, call;\n+  tree fn, call, obj = NULL_TREE;\n \n   non_dep = extract_call_expr (non_dep);\n \n   nargs = call_expr_nargs (non_dep);\n \n   expected_nargs = cp_tree_code_length (op);\n-  if (TREE_CODE (TREE_TYPE (overload)) == METHOD_TYPE)\n+  if (TREE_CODE (TREE_TYPE (overload)) == METHOD_TYPE\n+      /* For ARRAY_REF, operator[] is either a non-static member or newly\n+\t static member, never out of class and for the static member case\n+\t if user uses single index the operator[] needs to have a single\n+\t argument as well, but the function is called with 2 - the object\n+\t it is invoked on and the index.  */\n+      || op == ARRAY_REF)\n     expected_nargs -= 1;\n   if ((op == POSTINCREMENT_EXPR\n        || op == POSTDECREMENT_EXPR)\n@@ -3715,6 +3721,8 @@ build_min_non_dep_op_overload (enum tree_code op,\n   if (TREE_CODE (TREE_TYPE (overload)) == FUNCTION_TYPE)\n     {\n       fn = overload;\n+      if (op == ARRAY_REF)\n+\tobj = va_arg (p, tree);\n       for (int i = 0; i < nargs; i++)\n \t{\n \t  tree arg = va_arg (p, tree);\n@@ -3746,6 +3754,8 @@ build_min_non_dep_op_overload (enum tree_code op,\n   CALL_EXPR_ORDERED_ARGS (call_expr) = CALL_EXPR_ORDERED_ARGS (non_dep);\n   CALL_EXPR_REVERSE_ARGS (call_expr) = CALL_EXPR_REVERSE_ARGS (non_dep);\n \n+  if (obj)\n+    return keep_unused_object_arg (call, obj, overload);\n   return call;\n }\n \n@@ -3759,11 +3769,15 @@ build_min_non_dep_op_overload (tree non_dep, tree overload, tree object,\n   non_dep = extract_call_expr (non_dep);\n \n   unsigned int nargs = call_expr_nargs (non_dep);\n-  gcc_assert (TREE_CODE (TREE_TYPE (overload)) == METHOD_TYPE);\n-  tree binfo = TYPE_BINFO (TREE_TYPE (object));\n-  tree method = build_baselink (binfo, binfo, overload, NULL_TREE);\n-  tree fn = build_min (COMPONENT_REF, TREE_TYPE (overload),\n-\t\t       object, method, NULL_TREE);\n+  tree fn = overload;\n+  if (TREE_CODE (TREE_TYPE (overload)) == METHOD_TYPE)\n+    {\n+      tree binfo = TYPE_BINFO (TREE_TYPE (object));\n+      tree method = build_baselink (binfo, binfo, overload, NULL_TREE);\n+      fn = build_min (COMPONENT_REF, TREE_TYPE (overload),\n+\t\t      object, method, NULL_TREE);\n+      object = NULL_TREE;\n+    }\n   gcc_assert (vec_safe_length (args) == nargs);\n \n   tree call = build_min_non_dep_call_vec (non_dep, fn, args);\n@@ -3774,6 +3788,8 @@ build_min_non_dep_op_overload (tree non_dep, tree overload, tree object,\n   CALL_EXPR_ORDERED_ARGS (call_expr) = CALL_EXPR_ORDERED_ARGS (non_dep);\n   CALL_EXPR_REVERSE_ARGS (call_expr) = CALL_EXPR_REVERSE_ARGS (non_dep);\n \n+  if (object)\n+    return keep_unused_object_arg (call, object, overload);\n   return call;\n }\n "}, {"sha": "49cd8a6ac5b06d75439299a2fd09c1c7db9a036c", "filename": "gcc/testsuite/g++.dg/cpp23/subscript12.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript12.C?ref=86caab6c5d1e26e1c54c3dceacc873d6e27bfc09", "patch": "@@ -0,0 +1,34 @@\n+// PR c++/108437\n+// { dg-do run { target c++23 } }\n+\n+struct S { static int &operator[] (int x) { static int a[2]; return a[x]; } };\n+struct U { static int &operator[] (int x, int y, int z) { static int a[2]; return a[x + y + z]; } };\n+struct V { static int &operator[] () { static int a; return a; } };\n+\n+template <class T, class W, class X> void\n+foo ()\n+{\n+  S s;\n+  s[0]++;\n+  T t;\n+  t[0]++;\n+  U u;\n+  u[0, 0, 0]++;\n+  V v;\n+  v[]++;\n+  W w;\n+  w[0, 0, 0]++;\n+  X x;\n+  x[]++;\n+}\n+\n+int\n+main ()\n+{\n+  S::operator[] (0) = 1;\n+  U::operator[] (0, 0, 0) = 2;\n+  V::operator[] () = 3;\n+  foo <S, U, V> ();\n+  if (S::operator[] (0) != 3 || U::operator[] (0, 0, 0) != 4 || V::operator[] () != 5)\n+    __builtin_abort ();\n+}"}, {"sha": "3fb3b4975b1876da1d111a767d9e18a91ca5e3a8", "filename": "gcc/testsuite/g++.dg/cpp23/subscript13.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript13.C?ref=86caab6c5d1e26e1c54c3dceacc873d6e27bfc09", "patch": "@@ -0,0 +1,43 @@\n+// PR c++/108437\n+// { dg-do run { target c++23 } }\n+\n+struct S { static int &operator[] (int x) { static int a[2]; return a[x]; } };\n+struct U { static int &operator[] (int x, int y, int z) { static int a[2]; return a[x + y + z]; } };\n+struct V { static int &operator[] () { static int a; return a; } };\n+int cnt;\n+\n+template <typename T>\n+T &\n+bar (T &x)\n+{\n+  ++cnt;\n+  return x;\n+}\n+\n+template <class T, class W, class X> void\n+foo ()\n+{\n+  S s;\n+  bar (s)[0]++;\n+  T t;\n+  bar (t)[0]++;\n+  U u;\n+  bar (u)[0, 0, 0]++;\n+  V v;\n+  bar (v)[]++;\n+  W w;\n+  bar (w)[0, 0, 0]++;\n+  X x;\n+  bar (x)[]++;\n+}\n+\n+int\n+main ()\n+{\n+  S::operator[] (0) = 1;\n+  U::operator[] (0, 0, 0) = 2;\n+  V::operator[] () = 3;\n+  foo <S, U, V> ();\n+  if (S::operator[] (0) != 3 || U::operator[] (0, 0, 0) != 4 || V::operator[] () != 5 || cnt != 6)\n+    __builtin_abort ();\n+}"}]}