{"sha": "c91b27155288e9869fc8345c689f7f6b90b0ee7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkxYjI3MTU1Mjg4ZTk4NjlmYzgzNDVjNjg5ZjdmNmI5MGIwZWU3ZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-03-28T18:23:18Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-03-28T18:23:18Z"}, "message": "PR c++/89836 - bool constant expression and explicit conversions.\n\n\t* call.c (build_converted_constant_expr_internal): New function,\n\trenamed from...\n\t(build_converted_constant_expr): ...this.  New.\n\t(build_converted_constant_bool_expr): New.\n\t* cp-tree.h (build_converted_constant_bool_expr): Declare.\n\t* decl.c (build_explicit_specifier): Call\n\tbuild_converted_constant_bool_expr.\n\n\t* g++.dg/cpp2a/explicit15.C: New test.\n\nFrom-SVN: r270002", "tree": {"sha": "f27feea1b40cd6810496a8e21ebfb9e94cd223ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f27feea1b40cd6810496a8e21ebfb9e94cd223ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c91b27155288e9869fc8345c689f7f6b90b0ee7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91b27155288e9869fc8345c689f7f6b90b0ee7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c91b27155288e9869fc8345c689f7f6b90b0ee7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91b27155288e9869fc8345c689f7f6b90b0ee7e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb15c8b7f76f90ebcf234e4c772a0e21346ef301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb15c8b7f76f90ebcf234e4c772a0e21346ef301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb15c8b7f76f90ebcf234e4c772a0e21346ef301"}], "stats": {"total": 79, "additions": 65, "deletions": 14}, "files": [{"sha": "075e977b70b3c59059a3fc2636d26e96f4816008", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c91b27155288e9869fc8345c689f7f6b90b0ee7e", "patch": "@@ -1,3 +1,14 @@\n+2019-03-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89836 - bool constant expression and explicit conversions.\n+\t* call.c (build_converted_constant_expr_internal): New function,\n+\trenamed from...\n+\t(build_converted_constant_expr): ...this.  New.\n+\t(build_converted_constant_bool_expr): New.\n+\t* cp-tree.h (build_converted_constant_bool_expr): Declare.\n+\t* decl.c (build_explicit_specifier): Call\n+\tbuild_converted_constant_bool_expr.\n+\n 2019-03-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89785"}, {"sha": "bc5179416a54d882e82956c5f83ca303eb9c23a0", "filename": "gcc/cp/call.c", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c91b27155288e9869fc8345c689f7f6b90b0ee7e", "patch": "@@ -4175,18 +4175,11 @@ build_user_type_conversion (tree totype, tree expr, int flags,\n   return ret;\n }\n \n-/* Subroutine of convert_nontype_argument.\n-\n-   EXPR is an expression used in a context that requires a converted\n-   constant-expression, such as a template non-type parameter.  Do any\n-   necessary conversions (that are permitted for converted\n-   constant-expressions) to convert it to the desired type.\n-\n-   If conversion is successful, returns the converted expression;\n-   otherwise, returns error_mark_node.  */\n+/* Worker for build_converted_constant_expr.  */\n \n-tree\n-build_converted_constant_expr (tree type, tree expr, tsubst_flags_t complain)\n+static tree\n+build_converted_constant_expr_internal (tree type, tree expr,\n+\t\t\t\t\tint flags, tsubst_flags_t complain)\n {\n   conversion *conv;\n   void *p;\n@@ -4200,8 +4193,7 @@ build_converted_constant_expr (tree type, tree expr, tsubst_flags_t complain)\n   p = conversion_obstack_alloc (0);\n \n   conv = implicit_conversion (type, TREE_TYPE (expr), expr,\n-\t\t\t      /*c_cast_p=*/false,\n-\t\t\t      LOOKUP_IMPLICIT, complain);\n+\t\t\t      /*c_cast_p=*/false, flags, complain);\n \n   /* A converted constant expression of type T is an expression, implicitly\n      converted to type T, where the converted expression is a constant\n@@ -4304,6 +4296,38 @@ build_converted_constant_expr (tree type, tree expr, tsubst_flags_t complain)\n   return expr;\n }\n \n+/* Subroutine of convert_nontype_argument.\n+\n+   EXPR is an expression used in a context that requires a converted\n+   constant-expression, such as a template non-type parameter.  Do any\n+   necessary conversions (that are permitted for converted\n+   constant-expressions) to convert it to the desired type.\n+\n+   This function doesn't consider explicit conversion functions.  If\n+   you mean to use \"a contextually converted constant expression of type\n+   bool\", use build_converted_constant_bool_expr.\n+\n+   If conversion is successful, returns the converted expression;\n+   otherwise, returns error_mark_node.  */\n+\n+tree\n+build_converted_constant_expr (tree type, tree expr, tsubst_flags_t complain)\n+{\n+  return build_converted_constant_expr_internal (type, expr, LOOKUP_IMPLICIT,\n+\t\t\t\t\t\t complain);\n+}\n+\n+/* Used to create \"a contextually converted constant expression of type\n+   bool\".  This differs from build_converted_constant_expr in that it\n+   also considers explicit conversion functions.  */\n+\n+tree\n+build_converted_constant_bool_expr (tree expr, tsubst_flags_t complain)\n+{\n+  return build_converted_constant_expr_internal (boolean_type_node, expr,\n+\t\t\t\t\t\t LOOKUP_NORMAL, complain);\n+}\n+\n /* Do any initial processing on the arguments to a function call.  */\n \n static vec<tree, va_gc> *"}, {"sha": "fd612b0dbb1bc4d4b7d96c9177cce4987f6eb763", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c91b27155288e9869fc8345c689f7f6b90b0ee7e", "patch": "@@ -6233,6 +6233,7 @@ extern int remaining_arguments\t\t\t(tree);\n extern tree perform_implicit_conversion\t\t(tree, tree, tsubst_flags_t);\n extern tree perform_implicit_conversion_flags\t(tree, tree, tsubst_flags_t, int);\n extern tree build_converted_constant_expr\t(tree, tree, tsubst_flags_t);\n+extern tree build_converted_constant_bool_expr\t(tree, tsubst_flags_t);\n extern tree perform_direct_initialization_if_possible (tree, tree, bool,\n                                                        tsubst_flags_t);\n extern tree in_charge_arg_for_name\t\t(tree);"}, {"sha": "c46a39665bd9bb441eb2671acb2c3d909c05302b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c91b27155288e9869fc8345c689f7f6b90b0ee7e", "patch": "@@ -16700,7 +16700,7 @@ build_explicit_specifier (tree expr, tsubst_flags_t complain)\n   expr = instantiate_non_dependent_expr_sfinae (expr, complain);\n   /* Don't let convert_like_real create more template codes.  */\n   processing_template_decl_sentinel s;\n-  expr = build_converted_constant_expr (boolean_type_node, expr, complain);\n+  expr = build_converted_constant_bool_expr (expr, complain);\n   expr = cxx_constant_value (expr);\n   return expr;\n }"}, {"sha": "0210cd72935049a295b79367c3489d12d4a2a444", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c91b27155288e9869fc8345c689f7f6b90b0ee7e", "patch": "@@ -1,3 +1,8 @@\n+2019-03-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89836 - bool constant expression and explicit conversions.\n+\t* g++.dg/cpp2a/explicit15.C: New test.\n+\n 2019-03-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/89812"}, {"sha": "e0058f6dc8727b823cd7dfd1d8d27f5ea51b1966", "filename": "gcc/testsuite/g++.dg/cpp2a/explicit15.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91b27155288e9869fc8345c689f7f6b90b0ee7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit15.C?ref=c91b27155288e9869fc8345c689f7f6b90b0ee7e", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/89836\n+// { dg-do compile { target c++2a } }\n+\n+struct W { \n+  constexpr explicit operator bool() { return true; };\n+};\n+\n+struct U {\n+  explicit(W()) U(int);\n+};"}]}