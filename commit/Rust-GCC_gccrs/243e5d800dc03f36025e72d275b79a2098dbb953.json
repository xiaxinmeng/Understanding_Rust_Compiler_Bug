{"sha": "243e5d800dc03f36025e72d275b79a2098dbb953", "node_id": "C_kwDOANBUbNoAKDI0M2U1ZDgwMGRjMDNmMzYwMjVlNzJkMjc1Yjc5YTIwOThkYmI5NTM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-20T18:39:01Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-22T10:48:42Z"}, "message": "Ensure autoderef for generic recivers in method calls\n\nThis changes our TyTy::BaseType::can_eq interface to allow\nParamTypes to be compatable with everything except reference\nand pointer types to ensure we apply autoderef adjustments\ncorrectly.\n\nFixes #753", "tree": {"sha": "de1905c8fe94727095d0aead8c883dc1b4b76016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de1905c8fe94727095d0aead8c883dc1b4b76016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/243e5d800dc03f36025e72d275b79a2098dbb953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243e5d800dc03f36025e72d275b79a2098dbb953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243e5d800dc03f36025e72d275b79a2098dbb953", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243e5d800dc03f36025e72d275b79a2098dbb953/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe77d2d5747b0c9f44c01eba4f6898fbb2790f23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe77d2d5747b0c9f44c01eba4f6898fbb2790f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe77d2d5747b0c9f44c01eba4f6898fbb2790f23"}], "stats": {"total": 484, "additions": 323, "deletions": 161}, "files": [{"sha": "98ae5ab65d9c9179fd6d78a091e4dc56990f28e9", "filename": "gcc/rust/typecheck/rust-hir-dot-operator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -115,7 +115,7 @@ class MethodResolution\n \t    if (fn->is_method ())\n \t      {\n \t\tTyTy::BaseType *fn_self = fn->get_self_type ();\n-\t\tif (receiver->can_eq (fn_self, false))\n+\t\tif (receiver->can_eq (fn_self, false, true))\n \t\t  {\n \t\t    return &c;\n \t\t  }\n@@ -143,7 +143,7 @@ class MethodResolution\n \t    if (fn->is_method ())\n \t      {\n \t\tTyTy::BaseType *fn_self = fn->get_self_type ();\n-\t\tif (receiver->can_eq (fn_self, false))\n+\t\tif (receiver->can_eq (fn_self, false, true))\n \t\t  {\n \t\t    return &c;\n \t\t  }\n@@ -165,7 +165,7 @@ class MethodResolution\n \t    if (fn->is_method ())\n \t      {\n \t\tTyTy::BaseType *fn_self = fn->get_self_type ();\n-\t\tif (receiver->can_eq (fn_self, false))\n+\t\tif (receiver->can_eq (fn_self, false, true))\n \t\t  {\n \t\t    return &c;\n \t\t  }"}, {"sha": "eac86b01cdccdfba67fb3674db9717da0e1e91d1", "filename": "gcc/rust/typecheck/rust-hir-inherent-impl-overlap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-inherent-impl-overlap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-inherent-impl-overlap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-inherent-impl-overlap.h?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -122,7 +122,7 @@ class OverlappingImplItemPass : public TypeCheckBase\n \t    if (query == candidate)\n \t      continue;\n \n-\t    if (query->can_eq (candidate, false))\n+\t    if (query->can_eq (candidate, false, false))\n \t      possible_collision (it->second, iy->second);\n \t  }\n       }"}, {"sha": "8ceec00ffceb2f5ec6a4c3adf247a93af313c259", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -227,7 +227,7 @@ class PathProbeType : public TypeCheckBase\n     bool ok = context->lookup_type (impl_ty_id, &impl_block_ty);\n     rust_assert (ok);\n \n-    if (!receiver->can_eq (impl_block_ty, false))\n+    if (!receiver->can_eq (impl_block_ty, false, false))\n       return;\n \n     // lets visit the impl_item"}, {"sha": "8c415ebd4460db33af0299dc3633f0679e5f33ff", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -320,7 +320,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t    // always be at the end of the list\n \n \t    auto s = fn->get_self_type ()->get_root ();\n-\t    rust_assert (s->can_eq (adt, false));\n+\t    rust_assert (s->can_eq (adt, false, false));\n \t    rust_assert (s->get_kind () == TyTy::TypeKind::ADT);\n \t    const TyTy::ADTType *self_adt\n \t      = static_cast<const TyTy::ADTType *> (s);"}, {"sha": "f3a08707dfd916e600ff1d36c5a23f3e181f4c02", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -377,7 +377,7 @@ class TypeCheckImplItemWithTrait : public TypeCheckImplItem\n       return;\n \n     // check the types are compatible\n-    if (!resolved_trait_item.get_tyty ()->can_eq (lookup, true))\n+    if (!resolved_trait_item.get_tyty ()->can_eq (lookup, true, false))\n       {\n \tRichLocation r (constant.get_locus ());\n \tr.add_range (resolved_trait_item.get_locus ());\n@@ -413,7 +413,7 @@ class TypeCheckImplItemWithTrait : public TypeCheckImplItem\n       return;\n \n     // check the types are compatible\n-    if (!resolved_trait_item.get_tyty ()->can_eq (lookup, true))\n+    if (!resolved_trait_item.get_tyty ()->can_eq (lookup, true, false))\n       {\n \tRichLocation r (type.get_locus ());\n \tr.add_range (resolved_trait_item.get_locus ());\n@@ -487,7 +487,7 @@ class TypeCheckImplItemWithTrait : public TypeCheckImplItem\n       = trait_item_fntype->handle_substitions (implicit_self_substs);\n \n     // check the types are compatible\n-    if (!trait_item_fntype->can_eq (fntype, true))\n+    if (!trait_item_fntype->can_eq (fntype, true, false))\n       {\n \tRichLocation r (function.get_locus ());\n \tr.add_range (resolved_trait_item.get_locus ());"}, {"sha": "c74ac85ae7e20d8c7d4dd1617f23295988a5a23d", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -376,9 +376,12 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n \t      AssociatedImplTrait *lookup_associated = nullptr;\n \t      bool found_impl_trait = context->lookup_associated_trait_impl (\n \t\timpl->get_mappings ().get_hirid (), &lookup_associated);\n-\t      rust_assert (found_impl_trait);\n \n-\t      lookup_associated->setup_associated_types ();\n+\t      // setup associated mappings if possible we might be resolving a\n+\t      // path within a default implementation of a trait function\n+\t      // see: testsuite/rust/compile/torture/traits16.rs\n+\t      if (found_impl_trait)\n+\t\tlookup_associated->setup_associated_types ();\n \n \t      // we need a new ty_ref_id for this trait item\n \t      tyseg = tyseg->clone ();"}, {"sha": "5760c4e9c5d5dc30878d1d311f00f2564b0e89c2", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -187,7 +187,7 @@ class TypeCheckContext\n \n     for (auto &item : it->second)\n       {\n-\tif (item.first->can_eq (self, false))\n+\tif (item.first->can_eq (self, false, false))\n \t  {\n \t    *mapping = item.second;\n \t    return true;"}, {"sha": "89093949e4172dec2e4244ddfd022147adbc275d", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -40,7 +40,7 @@ TypeBoundsProbe::scan ()\n       if (!ok)\n \treturn true;\n \n-      if (!receiver->can_eq (impl_type, false))\n+      if (!receiver->can_eq (impl_type, false, false))\n \treturn true;\n \n       possible_trait_paths.push_back ({impl->get_trait_ref ().get (), impl});"}, {"sha": "9ebd5647cc11723035812f252df551d4dca9a601", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 149, "deletions": 78, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -371,8 +371,18 @@ class BaseCmp : public TyConstVisitor\n \n   virtual void visit (const ParamType &type) override\n   {\n-    // it is ok for types to can eq to a ParamType\n-    ok = true;\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n   }\n \n   virtual void visit (const DynamicObjectType &type) override\n@@ -408,17 +418,18 @@ class BaseCmp : public TyConstVisitor\n   }\n \n protected:\n-  BaseCmp (const BaseType *base, bool emit_errors)\n+  BaseCmp (const BaseType *base, bool emit_errors, bool autoderef_mode)\n     : mappings (Analysis::Mappings::get ()),\n       context (Resolver::TypeCheckContext::get ()), ok (false),\n-      emit_error_flag (emit_errors)\n+      emit_error_flag (emit_errors), autoderef_mode_flag (autoderef_mode)\n   {}\n \n   Analysis::Mappings *mappings;\n   Resolver::TypeCheckContext *context;\n \n   bool ok;\n   bool emit_error_flag;\n+  bool autoderef_mode_flag;\n \n private:\n   /* Returns a pointer to the ty that created this rule. */\n@@ -430,8 +441,8 @@ class InferCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  InferCmp (const InferType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  InferCmp (const InferType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const BoolType &type) override\n@@ -641,18 +652,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (const ParamType &type) override\n-  {\n-    bool is_valid\n-      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n-    if (is_valid)\n-      {\n-\tok = true;\n-\treturn;\n-      }\n-\n-    BaseCmp::visit (type);\n-  }\n+  void visit (const ParamType &) override { ok = true; }\n \n   void visit (const DynamicObjectType &type) override\n   {\n@@ -690,8 +690,8 @@ class FnCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  FnCmp (const FnType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  FnCmp (const FnType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const InferType &type) override\n@@ -712,7 +712,7 @@ class FnCmp : public BaseCmp\n \tauto a = base->param_at (i).second;\n \tauto b = type.param_at (i).second;\n \n-\tif (!a->can_eq (b, emit_error_flag))\n+\tif (!a->can_eq (b, emit_error_flag, autoderef_mode_flag))\n \t  {\n \t    emit_error_flag = false;\n \t    BaseCmp::visit (type);\n@@ -721,7 +721,8 @@ class FnCmp : public BaseCmp\n       }\n \n     if (!base->get_return_type ()->can_eq (type.get_return_type (),\n-\t\t\t\t\t   emit_error_flag))\n+\t\t\t\t\t   emit_error_flag,\n+\t\t\t\t\t   autoderef_mode_flag))\n       {\n \temit_error_flag = false;\n \tBaseCmp::visit (type);\n@@ -741,8 +742,8 @@ class FnptrCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  FnptrCmp (const FnPtr *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  FnptrCmp (const FnPtr *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const InferType &type) override\n@@ -766,7 +767,8 @@ class FnptrCmp : public BaseCmp\n \n     auto this_ret_type = base->get_return_type ();\n     auto other_ret_type = type.get_return_type ();\n-    if (!this_ret_type->can_eq (other_ret_type, emit_error_flag))\n+    if (!this_ret_type->can_eq (other_ret_type, emit_error_flag,\n+\t\t\t\tautoderef_mode_flag))\n       {\n \tBaseCmp::visit (type);\n \treturn;\n@@ -776,7 +778,8 @@ class FnptrCmp : public BaseCmp\n       {\n \tauto this_param = base->param_at (i);\n \tauto other_param = type.param_at (i);\n-\tif (!this_param->can_eq (other_param, emit_error_flag))\n+\tif (!this_param->can_eq (other_param, emit_error_flag,\n+\t\t\t\t autoderef_mode_flag))\n \t  {\n \t    BaseCmp::visit (type);\n \t    return;\n@@ -796,7 +799,8 @@ class FnptrCmp : public BaseCmp\n \n     auto this_ret_type = base->get_return_type ();\n     auto other_ret_type = type.get_return_type ();\n-    if (!this_ret_type->can_eq (other_ret_type, emit_error_flag))\n+    if (!this_ret_type->can_eq (other_ret_type, emit_error_flag,\n+\t\t\t\tautoderef_mode_flag))\n       {\n \tBaseCmp::visit (type);\n \treturn;\n@@ -806,7 +810,8 @@ class FnptrCmp : public BaseCmp\n       {\n \tauto this_param = base->param_at (i);\n \tauto other_param = type.param_at (i).second;\n-\tif (!this_param->can_eq (other_param, emit_error_flag))\n+\tif (!this_param->can_eq (other_param, emit_error_flag,\n+\t\t\t\t autoderef_mode_flag))\n \t  {\n \t    BaseCmp::visit (type);\n \t    return;\n@@ -826,8 +831,8 @@ class ClosureCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ClosureCmp (const ClosureType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  ClosureCmp (const ClosureType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n private:\n@@ -840,8 +845,8 @@ class ArrayCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ArrayCmp (const ArrayType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  ArrayCmp (const ArrayType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const ArrayType &type) override\n@@ -856,7 +861,8 @@ class ArrayCmp : public BaseCmp\n     // check base type\n     const BaseType *base_element = base->get_element_type ();\n     const BaseType *other_element = type.get_element_type ();\n-    if (!base_element->can_eq (other_element, emit_error_flag))\n+    if (!base_element->can_eq (other_element, emit_error_flag,\n+\t\t\t       autoderef_mode_flag))\n       {\n \tBaseCmp::visit (type);\n \treturn;\n@@ -865,6 +871,8 @@ class ArrayCmp : public BaseCmp\n     ok = true;\n   }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const ArrayType *base;\n@@ -875,8 +883,8 @@ class BoolCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  BoolCmp (const BoolType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  BoolCmp (const BoolType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const BoolType &type) override { ok = true; }\n@@ -886,6 +894,8 @@ class BoolCmp : public BaseCmp\n     ok = type.get_infer_kind () == InferType::InferTypeKind::GENERAL;\n   }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const BoolType *base;\n@@ -896,8 +906,8 @@ class IntCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  IntCmp (const IntType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  IntCmp (const IntType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const InferType &type) override\n@@ -910,6 +920,8 @@ class IntCmp : public BaseCmp\n     ok = type.get_int_kind () == base->get_int_kind ();\n   }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const IntType *base;\n@@ -920,8 +932,8 @@ class UintCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  UintCmp (const UintType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  UintCmp (const UintType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const InferType &type) override\n@@ -934,6 +946,8 @@ class UintCmp : public BaseCmp\n     ok = type.get_uint_kind () == base->get_uint_kind ();\n   }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const UintType *base;\n@@ -944,8 +958,8 @@ class FloatCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  FloatCmp (const FloatType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  FloatCmp (const FloatType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const InferType &type) override\n@@ -958,6 +972,8 @@ class FloatCmp : public BaseCmp\n     ok = type.get_float_kind () == base->get_float_kind ();\n   }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const FloatType *base;\n@@ -968,8 +984,8 @@ class ADTCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ADTCmp (const ADTType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  ADTCmp (const ADTType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const ADTType &type) override\n@@ -994,7 +1010,8 @@ class ADTCmp : public BaseCmp\n \tTyTy::BaseType *this_field_ty = base_field->get_field_type ();\n \tTyTy::BaseType *other_field_ty = other_field->get_field_type ();\n \n-\tif (!this_field_ty->can_eq (other_field_ty, emit_error_flag))\n+\tif (!this_field_ty->can_eq (other_field_ty, emit_error_flag,\n+\t\t\t\t    autoderef_mode_flag))\n \t  {\n \t    BaseCmp::visit (type);\n \t    return;\n@@ -1004,6 +1021,8 @@ class ADTCmp : public BaseCmp\n     ok = true;\n   }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const ADTType *base;\n@@ -1014,8 +1033,8 @@ class TupleCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  TupleCmp (const TupleType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  TupleCmp (const TupleType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const TupleType &type) override\n@@ -1031,7 +1050,7 @@ class TupleCmp : public BaseCmp\n \tBaseType *bo = base->get_field (i);\n \tBaseType *fo = type.get_field (i);\n \n-\tif (!bo->can_eq (fo, emit_error_flag))\n+\tif (!bo->can_eq (fo, emit_error_flag, autoderef_mode_flag))\n \t  {\n \t    BaseCmp::visit (type);\n \t    return;\n@@ -1041,6 +1060,8 @@ class TupleCmp : public BaseCmp\n     ok = true;\n   }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const TupleType *base;\n@@ -1051,8 +1072,8 @@ class USizeCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  USizeCmp (const USizeType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  USizeCmp (const USizeType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const InferType &type) override\n@@ -1062,6 +1083,8 @@ class USizeCmp : public BaseCmp\n \n   void visit (const USizeType &type) override { ok = true; }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const USizeType *base;\n@@ -1072,8 +1095,8 @@ class ISizeCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ISizeCmp (const ISizeType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  ISizeCmp (const ISizeType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const InferType &type) override\n@@ -1083,6 +1106,8 @@ class ISizeCmp : public BaseCmp\n \n   void visit (const ISizeType &type) override { ok = true; }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const ISizeType *base;\n@@ -1093,8 +1118,8 @@ class CharCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  CharCmp (const CharType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  CharCmp (const CharType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const InferType &type) override\n@@ -1104,6 +1129,8 @@ class CharCmp : public BaseCmp\n \n   void visit (const CharType &type) override { ok = true; }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const CharType *base;\n@@ -1114,16 +1141,18 @@ class ReferenceCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ReferenceCmp (const ReferenceType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  ReferenceCmp (const ReferenceType *base, bool emit_errors,\n+\t\tbool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const ReferenceType &type) override\n   {\n     auto base_type = base->get_base ();\n     auto other_base_type = type.get_base ();\n \n-    ok = base_type->can_eq (other_base_type, emit_error_flag)\n+    ok = base_type->can_eq (other_base_type, emit_error_flag,\n+\t\t\t    autoderef_mode_flag)\n \t && (base->is_mutable () == type.is_mutable ());\n   }\n \n@@ -1137,16 +1166,17 @@ class PointerCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  PointerCmp (const PointerType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  PointerCmp (const PointerType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const ReferenceType &type) override\n   {\n     auto base_type = base->get_base ();\n     auto other_base_type = type.get_base ();\n \n-    ok = base_type->can_eq (other_base_type, emit_error_flag)\n+    ok = base_type->can_eq (other_base_type, emit_error_flag,\n+\t\t\t    autoderef_mode_flag)\n \t && (base->is_mutable () == type.is_mutable ());\n   }\n \n@@ -1160,8 +1190,8 @@ class ParamCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ParamCmp (const ParamType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  ParamCmp (const ParamType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   // param types are a placeholder we shouldn't have cases where we unify\n@@ -1183,13 +1213,7 @@ class ParamCmp : public BaseCmp\n     bool ok = context->lookup_type (base->get_ty_ref (), &lookup);\n     rust_assert (ok);\n \n-    if (lookup->get_kind () == TypeKind::PARAM)\n-      {\n-\tInferType infer (UNKNOWN_HIRID, InferType::InferTypeKind::GENERAL);\n-\treturn infer.can_eq (other, emit_error_flag);\n-      }\n-\n-    return lookup->can_eq (other, emit_error_flag);\n+    return lookup->can_eq (other, emit_error_flag, autoderef_mode_flag);\n   }\n \n   // imagine the case where we have:\n@@ -1198,7 +1222,46 @@ class ParamCmp : public BaseCmp\n   // impl <X>Foo<X> { ... }\n   // both of these types are compatible so we mostly care about the number of\n   // generic arguments\n-  void visit (const ParamType &type) override { ok = true; }\n+  void visit (const ParamType &) override { ok = true; }\n+\n+  void visit (const TupleType &) override { ok = true; }\n+\n+  void visit (const ADTType &) override { ok = true; }\n+\n+  void visit (const InferType &) override { ok = true; }\n+\n+  void visit (const FnType &) override { ok = true; }\n+\n+  void visit (const FnPtr &) override { ok = true; }\n+\n+  void visit (const ArrayType &) override { ok = true; }\n+\n+  void visit (const BoolType &) override { ok = true; }\n+\n+  void visit (const IntType &) override { ok = true; }\n+\n+  void visit (const UintType &) override { ok = true; }\n+\n+  void visit (const USizeType &) override { ok = true; }\n+\n+  void visit (const ISizeType &) override { ok = true; }\n+\n+  void visit (const FloatType &) override { ok = true; }\n+\n+  void visit (const CharType &) override { ok = true; }\n+\n+  void visit (const ReferenceType &) override { ok = !autoderef_mode_flag; }\n+\n+  void visit (const PointerType &) override { ok = !autoderef_mode_flag; }\n+\n+  void visit (const StrType &) override { ok = true; }\n+\n+  void visit (const NeverType &) override { ok = true; }\n+\n+  void visit (const PlaceholderType &type) override\n+  {\n+    ok = base->get_symbol ().compare (type.get_symbol ()) == 0;\n+  }\n \n private:\n   const BaseType *get_base () const override { return base; }\n@@ -1211,12 +1274,14 @@ class StrCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  StrCmp (const StrType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  StrCmp (const StrType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const StrType &type) override { ok = true; }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const StrType *base;\n@@ -1227,12 +1292,14 @@ class NeverCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  NeverCmp (const NeverType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  NeverCmp (const NeverType *base, bool emit_errors, bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const NeverType &type) override { ok = true; }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const NeverType *base;\n@@ -1243,8 +1310,9 @@ class PlaceholderCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  PlaceholderCmp (const PlaceholderType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  PlaceholderCmp (const PlaceholderType *base, bool emit_errors,\n+\t\t  bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   bool can_eq (const BaseType *other) override\n@@ -1253,7 +1321,7 @@ class PlaceholderCmp : public BaseCmp\n       return BaseCmp::can_eq (other);\n \n     BaseType *lookup = base->resolve ();\n-    return lookup->can_eq (other, emit_error_flag);\n+    return lookup->can_eq (other, emit_error_flag, autoderef_mode_flag);\n   }\n \n   void visit (const TupleType &) override { ok = true; }\n@@ -1308,8 +1376,9 @@ class DynamicCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  DynamicCmp (const DynamicObjectType *base, bool emit_errors)\n-    : BaseCmp (base, emit_errors), base (base)\n+  DynamicCmp (const DynamicObjectType *base, bool emit_errors,\n+\t      bool autoderef_mode)\n+    : BaseCmp (base, emit_errors, autoderef_mode), base (base)\n   {}\n \n   void visit (const DynamicObjectType &type) override\n@@ -1324,6 +1393,8 @@ class DynamicCmp : public BaseCmp\n     ok = base->bounds_compatible (type, ref_locus, false);\n   }\n \n+  void visit (const ParamType &type) override { ok = true; }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n "}, {"sha": "37f93b40cf4ed81172fbe90c7c9f73cbc4e6f7d1", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 69, "deletions": 46, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -201,9 +201,10 @@ InferType::unify (BaseType *other)\n }\n \n bool\n-InferType::can_eq (const BaseType *other, bool emit_errors) const\n+InferType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t   bool autoderef_mode) const\n {\n-  InferCmp r (this, emit_errors);\n+  InferCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -278,7 +279,8 @@ ErrorType::unify (BaseType *other)\n }\n \n bool\n-ErrorType::can_eq (const BaseType *other, bool emit_errors) const\n+ErrorType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t   bool autoderef_mode) const\n {\n   return get_kind () == other->get_kind ();\n }\n@@ -641,9 +643,10 @@ ADTType::cast (BaseType *other)\n }\n \n bool\n-ADTType::can_eq (const BaseType *other, bool emit_errors) const\n+ADTType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t bool autoderef_mode) const\n {\n-  ADTCmp r (this, emit_errors);\n+  ADTCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -822,9 +825,10 @@ TupleType::cast (BaseType *other)\n }\n \n bool\n-TupleType::can_eq (const BaseType *other, bool emit_errors) const\n+TupleType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t   bool autoderef_mode) const\n {\n-  TupleCmp r (this, emit_errors);\n+  TupleCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -926,9 +930,10 @@ FnType::cast (BaseType *other)\n }\n \n bool\n-FnType::can_eq (const BaseType *other, bool emit_errors) const\n+FnType::can_eq (const BaseType *other, bool emit_errors,\n+\t\tbool autoderef_mode) const\n {\n-  FnCmp r (this, emit_errors);\n+  FnCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1143,9 +1148,10 @@ FnPtr::cast (BaseType *other)\n }\n \n bool\n-FnPtr::can_eq (const BaseType *other, bool emit_errors) const\n+FnPtr::can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const\n {\n-  FnptrCmp r (this, emit_errors);\n+  FnptrCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1209,9 +1215,10 @@ ClosureType::unify (BaseType *other)\n }\n \n bool\n-ClosureType::can_eq (const BaseType *other, bool emit_errors) const\n+ClosureType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t     bool autoderef_mode) const\n {\n-  ClosureCmp r (this, emit_errors);\n+  ClosureCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1297,9 +1304,10 @@ ArrayType::cast (BaseType *other)\n }\n \n bool\n-ArrayType::can_eq (const BaseType *other, bool emit_errors) const\n+ArrayType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t   bool autoderef_mode) const\n {\n-  ArrayCmp r (this, emit_errors);\n+  ArrayCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1372,9 +1380,10 @@ BoolType::cast (BaseType *other)\n }\n \n bool\n-BoolType::can_eq (const BaseType *other, bool emit_errors) const\n+BoolType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t  bool autoderef_mode) const\n {\n-  BoolCmp r (this, emit_errors);\n+  BoolCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1438,9 +1447,10 @@ IntType::cast (BaseType *other)\n }\n \n bool\n-IntType::can_eq (const BaseType *other, bool emit_errors) const\n+IntType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t bool autoderef_mode) const\n {\n-  IntCmp r (this, emit_errors);\n+  IntCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1515,9 +1525,10 @@ UintType::cast (BaseType *other)\n }\n \n bool\n-UintType::can_eq (const BaseType *other, bool emit_errors) const\n+UintType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t  bool autoderef_mode) const\n {\n-  UintCmp r (this, emit_errors);\n+  UintCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1586,9 +1597,10 @@ FloatType::cast (BaseType *other)\n }\n \n bool\n-FloatType::can_eq (const BaseType *other, bool emit_errors) const\n+FloatType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t   bool autoderef_mode) const\n {\n-  FloatCmp r (this, emit_errors);\n+  FloatCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1649,9 +1661,10 @@ USizeType::cast (BaseType *other)\n }\n \n bool\n-USizeType::can_eq (const BaseType *other, bool emit_errors) const\n+USizeType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t   bool autoderef_mode) const\n {\n-  USizeCmp r (this, emit_errors);\n+  USizeCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1701,9 +1714,10 @@ ISizeType::cast (BaseType *other)\n }\n \n bool\n-ISizeType::can_eq (const BaseType *other, bool emit_errors) const\n+ISizeType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t   bool autoderef_mode) const\n {\n-  ISizeCmp r (this, emit_errors);\n+  ISizeCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1753,9 +1767,10 @@ CharType::cast (BaseType *other)\n }\n \n bool\n-CharType::can_eq (const BaseType *other, bool emit_errors) const\n+CharType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t  bool autoderef_mode) const\n {\n-  CharCmp r (this, emit_errors);\n+  CharCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1806,9 +1821,10 @@ ReferenceType::cast (BaseType *other)\n }\n \n bool\n-ReferenceType::can_eq (const BaseType *other, bool emit_errors) const\n+ReferenceType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t       bool autoderef_mode) const\n {\n-  ReferenceCmp r (this, emit_errors);\n+  ReferenceCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1892,9 +1908,10 @@ PointerType::cast (BaseType *other)\n }\n \n bool\n-PointerType::can_eq (const BaseType *other, bool emit_errors) const\n+PointerType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t     bool autoderef_mode) const\n {\n-  PointerCmp r (this, emit_errors);\n+  PointerCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -1987,9 +2004,10 @@ ParamType::cast (BaseType *other)\n }\n \n bool\n-ParamType::can_eq (const BaseType *other, bool emit_errors) const\n+ParamType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t   bool autoderef_mode) const\n {\n-  ParamCmp r (this, emit_errors);\n+  ParamCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -2044,7 +2062,7 @@ ParamType::is_equal (const BaseType &other) const\n     return false;\n \n   if (can_resolve ())\n-    return resolve ()->can_eq (other2.resolve (), false);\n+    return resolve ()->can_eq (other2.resolve (), false, false);\n \n   return get_symbol ().compare (other2.get_symbol ()) == 0;\n }\n@@ -2108,9 +2126,10 @@ StrType::cast (BaseType *other)\n }\n \n bool\n-StrType::can_eq (const BaseType *other, bool emit_errors) const\n+StrType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t bool autoderef_mode) const\n {\n-  StrCmp r (this, emit_errors);\n+  StrCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -2160,9 +2179,10 @@ NeverType::cast (BaseType *other)\n }\n \n bool\n-NeverType::can_eq (const BaseType *other, bool emit_errors) const\n+NeverType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t   bool autoderef_mode) const\n {\n-  NeverCmp r (this, emit_errors);\n+  NeverCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -2215,9 +2235,10 @@ PlaceholderType::cast (BaseType *other)\n }\n \n bool\n-PlaceholderType::can_eq (const BaseType *other, bool emit_errors) const\n+PlaceholderType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t\t bool autoderef_mode) const\n {\n-  PlaceholderCmp r (this, emit_errors);\n+  PlaceholderCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n \n@@ -2315,9 +2336,10 @@ ProjectionType::cast (BaseType *other)\n }\n \n bool\n-ProjectionType::can_eq (const BaseType *other, bool emit_errors) const\n+ProjectionType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t\tbool autoderef_mode) const\n {\n-  return base->can_eq (other, emit_errors);\n+  return base->can_eq (other, emit_errors, autoderef_mode);\n }\n \n BaseType *\n@@ -2421,9 +2443,10 @@ DynamicObjectType::unify (BaseType *other)\n }\n \n bool\n-DynamicObjectType::can_eq (const BaseType *other, bool emit_errors) const\n+DynamicObjectType::can_eq (const BaseType *other, bool emit_errors,\n+\t\t\t   bool autoderef_mode) const\n {\n-  DynamicCmp r (this, emit_errors);\n+  DynamicCmp r (this, emit_errors, autoderef_mode);\n   return r.can_eq (other);\n }\n "}, {"sha": "27daa7cf57d8fbdaf71e3412d7f45e930eae166c", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 48, "deletions": 24, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -259,7 +259,8 @@ class BaseType : public TypeBoundsMappings\n   //\n   // It can also be used to optional emit errors for trait item compatibility\n   // checks\n-  virtual bool can_eq (const BaseType *other, bool emit_errors) const = 0;\n+  virtual bool can_eq (const BaseType *other, bool emit_errors,\n+\t\t       bool autoderef_mode) const = 0;\n \n   // this is the base coercion interface for types\n   virtual BaseType *coerce (BaseType *other) = 0;\n@@ -404,7 +405,8 @@ class InferType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n \n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n@@ -442,7 +444,8 @@ class ErrorType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -476,7 +479,8 @@ class ParamType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -564,7 +568,8 @@ class TupleType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -998,7 +1003,8 @@ class ADTType : public BaseType, public SubstitutionRef\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1126,7 +1132,8 @@ class FnType : public BaseType, public SubstitutionRef\n   std::string get_identifier () const { return identifier; }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1234,7 +1241,8 @@ class FnPtr : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1294,7 +1302,8 @@ class ClosureType : public BaseType, public SubstitutionRef\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1346,7 +1355,8 @@ class ArrayType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1388,7 +1398,8 @@ class BoolType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1424,7 +1435,8 @@ class IntType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1467,7 +1479,8 @@ class UintType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1508,7 +1521,8 @@ class FloatType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1541,7 +1555,8 @@ class USizeType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1567,7 +1582,8 @@ class ISizeType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1593,7 +1609,8 @@ class CharType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1623,7 +1640,8 @@ class ReferenceType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1670,7 +1688,8 @@ class PointerType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1715,7 +1734,8 @@ class StrType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1751,7 +1771,8 @@ class NeverType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1784,7 +1805,8 @@ class PlaceholderType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1852,7 +1874,8 @@ class ProjectionType : public BaseType, public SubstitutionRef\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n \n@@ -1912,7 +1935,8 @@ class DynamicObjectType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  bool can_eq (const BaseType *other, bool emit_errors,\n+\t       bool autoderef_mode) const override final;\n   BaseType *coerce (BaseType *other) override;\n   BaseType *cast (BaseType *other) override;\n   bool is_equal (const BaseType &other) const override;"}, {"sha": "da8a560388e20a710ba86840a28fd7b1bfa43302", "filename": "gcc/testsuite/rust/execute/torture/trait8.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243e5d800dc03f36025e72d275b79a2098dbb953/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait8.rs?ref=243e5d800dc03f36025e72d275b79a2098dbb953", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-output \"123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+pub trait Foo {\n+    type A;\n+\n+    fn bar(&self) -> Self::A;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}\n+\n+struct S(i32);\n+impl Foo for S {\n+    type A = i32;\n+\n+    fn bar(&self) -> Self::A {\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        self.0\n+    }\n+}\n+\n+fn test_bar<T: Foo>(x: T) -> T::A {\n+    x.bar()\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = S(123);\n+\n+    let bar: i32 = test_bar(a);\n+    unsafe {\n+        let a = \"%i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, bar);\n+    }\n+\n+    0\n+}"}]}