{"sha": "ce51e8439a491910348a1c5aea43b55f000ba8ac", "node_id": "C_kwDOANBUbNoAKGNlNTFlODQzOWE0OTE5MTAzNDhhMWM1YWVhNDNiNTVmMDAwYmE4YWM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-14T02:20:25Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-14T08:35:07Z"}, "message": "doc: port new documentation from Sphinx\n\ngcc/ChangeLog:\n\n\t* doc/contrib.texi: Port from Sphinx.\n\t* doc/cpp.texi: Likewise.\n\t* doc/install.texi: Likewise.\n\t* doc/invoke.texi: Likewise.\n\ngcc/fortran/ChangeLog:\n\n\t* gfortran.texi: Port from Sphinx.", "tree": {"sha": "f585d8d0570dc2e9fdb6c5d26a8449daebe2c953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f585d8d0570dc2e9fdb6c5d26a8449daebe2c953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce51e8439a491910348a1c5aea43b55f000ba8ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce51e8439a491910348a1c5aea43b55f000ba8ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce51e8439a491910348a1c5aea43b55f000ba8ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce51e8439a491910348a1c5aea43b55f000ba8ac/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "191dbc35688262c9c2bb1d623950a197eff80b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191dbc35688262c9c2bb1d623950a197eff80b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191dbc35688262c9c2bb1d623950a197eff80b80"}], "stats": {"total": 158, "additions": 149, "deletions": 9}, "files": [{"sha": "e3de5cc9c5db4c52716632c20a5a5263e14eda52", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce51e8439a491910348a1c5aea43b55f000ba8ac/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce51e8439a491910348a1c5aea43b55f000ba8ac/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=ce51e8439a491910348a1c5aea43b55f000ba8ac", "patch": "@@ -9,7 +9,7 @@\n The GCC project would like to thank its many contributors.  Without them the\n project would not have been nearly as successful as it has been.  Any omissions\n in this list are accidental.  Feel free to contact\n-@email{law@@redhat.com} or @email{gerald@@pfeifer.com} if you have been left\n+@email{jlaw@@ventanamicro.com} or @email{gerald@@pfeifer.com} if you have been left\n out or some of your contributions are not listed.  Please keep this list in\n alphabetical order.\n "}, {"sha": "1be29eb605e515d7c32c1d0d2cb8215e32325414", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce51e8439a491910348a1c5aea43b55f000ba8ac/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce51e8439a491910348a1c5aea43b55f000ba8ac/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=ce51e8439a491910348a1c5aea43b55f000ba8ac", "patch": "@@ -3843,6 +3843,9 @@ file will never be read again, no matter what.  It is a less-portable\n alternative to using @samp{#ifndef} to guard the contents of header files\n against multiple inclusions.\n \n+@code{#pragma region @{tokens@}...}, @code{#pragma endregion @{tokens@}...}\n+These pragmas are accepted, but have no effect.\n+\n @end ftable\n \n @node Other Directives"}, {"sha": "589c64965b2ac0f1a5b071a1b7f37098e1245a74", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce51e8439a491910348a1c5aea43b55f000ba8ac/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce51e8439a491910348a1c5aea43b55f000ba8ac/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=ce51e8439a491910348a1c5aea43b55f000ba8ac", "patch": "@@ -3102,9 +3102,7 @@ but it can give you confidence in your new GCC installation or point out\n problems before you install and start using your new GCC@.\n \n First, you must have @uref{download.html,,downloaded the testsuites}.\n-These are part of the full distribution, but if you downloaded the\n-``core'' compiler plus any front ends, you must download the testsuites\n-separately.\n+These are included in the source tarball.\n \n Second, you must have the testing tools installed.  This includes\n @uref{https://www.gnu.org/software/dejagnu/,,DejaGnu}, Tcl, and Expect;"}, {"sha": "449df59729884aa3292559fffcfbbcc99182c13a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 143, "deletions": 3, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce51e8439a491910348a1c5aea43b55f000ba8ac/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce51e8439a491910348a1c5aea43b55f000ba8ac/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ce51e8439a491910348a1c5aea43b55f000ba8ac", "patch": "@@ -458,6 +458,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-analyzer-file-leak @gol\n -Wno-analyzer-free-of-non-heap @gol\n -Wno-analyzer-imprecise-fp-arithmetic @gol\n+-Wno-analyzer-infinite-recursion @gol\n -Wno-analyzer-jump-through-null @gol\n -Wno-analyzer-malloc-leak @gol\n -Wno-analyzer-mismatching-deallocation @gol\n@@ -471,6 +472,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-analyzer-shift-count-overflow @gol\n -Wno-analyzer-stale-setjmp-buffer @gol\n -Wno-analyzer-tainted-allocation-size @gol\n+-Wno-analyzer-tainted-assertion @gol\n -Wno-analyzer-tainted-array-index @gol\n -Wno-analyzer-tainted-divisor @gol\n -Wno-analyzer-tainted-offset @gol\n@@ -1461,7 +1463,8 @@ See RS/6000 and PowerPC Options.\n -mgeneral-regs-only  -mcall-ms2sysv-xlogues -mrelax-cmpxchg-loop @gol\n -mindirect-branch=@var{choice}  -mfunction-return=@var{choice} @gol\n -mindirect-branch-register -mharden-sls=@var{choice} @gol\n--mindirect-branch-cs-prefix -mneeded -mno-direct-extern-access}\n+-mindirect-branch-cs-prefix -mneeded -mno-direct-extern-access @gol\n+-munroll-only-small-loops}\n \n @emph{x86 Windows Options}\n @gccoptlist{-mconsole  -mcygwin  -mno-cygwin  -mdll @gol\n@@ -3667,6 +3670,16 @@ const T& foo (const T&) @{ @dots{} @}\n #pragma GCC diagnostic pop\n @end smallexample\n \n+@option{-Wdangling-reference} also warns about code like\n+\n+@smallexample\n+auto p = std::minmax(1, 2);\n+@end smallexample\n+\n+where @code{std::minmax} returns @code{std::pair<const int&, const int&>}, and\n+both references dangle after the end of the full expression that contains\n+the call to @code{std::minmax}.\n+\n This warning is enabled by @option{-Wall}.\n \n @item -Wdelete-non-virtual-dtor @r{(C++ and Objective-C++ only)}\n@@ -6482,6 +6495,10 @@ optimization levels but requires optimization in order to detect infinite\n recursion in calls between two or more functions.\n @option{-Winfinite-recursion} is included in @option{-Wall}.\n \n+Compare with @option{-Wanalyzer-infinite-recursion} which provides a\n+similar diagnostic, but is implemented in a different way (as part of\n+@option{-fanalyzer}).\n+\n @item -Winit-self @r{(C, C++, Objective-C and Objective-C++ only)}\n @opindex Winit-self\n @opindex Wno-init-self\n@@ -9892,6 +9909,7 @@ Enabling this option effectively enables the following warnings:\n \n @gccoptlist{ @gol\n -Wanalyzer-allocation-size @gol\n+-Wanalyzer-deref-before-check @gol\n -Wanalyzer-double-fclose @gol\n -Wanalyzer-double-free @gol\n -Wanalyzer-exposure-through-output-file @gol\n@@ -9904,6 +9922,7 @@ Enabling this option effectively enables the following warnings:\n -Wanalyzer-file-leak @gol\n -Wanalyzer-free-of-non-heap @gol\n -Wanalyzer-imprecise-fp-arithmetic @gol\n+-Wanalyzer-infinite-recursion @gol\n -Wanalyzer-jump-through-null @gol\n -Wanalyzer-malloc-leak @gol\n -Wanalyzer-mismatching-deallocation @gol\n@@ -9962,6 +9981,30 @@ multiple of @code{sizeof (*pointer)}.\n \n See @uref{https://cwe.mitre.org/data/definitions/131.html, CWE-131: Incorrect Calculation of Buffer Size}.\n \n+@item -Wno-analyzer-deref-before-check\n+@opindex Wanalyzer-deref-before-check\n+@opindex Wno-analyzer-deref-before-check\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-deref-before-check}\n+to disable it.\n+\n+This diagnostic warns for paths through the code in which a pointer\n+is checked for @code{NULL} *after* it has already been\n+dereferenced, suggesting that the pointer could have been NULL.\n+Such cases suggest that the check for NULL is either redundant,\n+or that it needs to be moved to before the pointer is dereferenced.\n+\n+This diagnostic also considers values passed to a function argument\n+marked with @code{__attribute__((nonnull))} as requiring a non-NULL\n+value, and thus will complain if such values are checked for @code{NULL}\n+after returning from such a function call.\n+\n+This diagnostic is unlikely to be reported when any level of optimization\n+is enabled, as GCC's optimization logic will typically consider such\n+checks for NULL as being redundant, and optimize them away before the\n+analyzer \"sees\" them.  Hence optimization should be disabled when\n+attempting to trigger this diagnostic.\n+\n @item -Wno-analyzer-double-fclose\n @opindex Wanalyzer-double-fclose\n @opindex Wno-analyzer-double-fclose\n@@ -10118,6 +10161,30 @@ arithmetic is used in locations where precise computation is needed.  This\n diagnostic only warns on use of floating-point operands inside the\n calculation of an allocation size at the moment.\n \n+@item -Wno-analyzer-infinite-recursion\n+@opindex Wanalyzer-infinite-recursion\n+@opindex Wno-analyzer-infinite-recursion\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-infinite-recursion} to disable it.\n+\n+This diagnostics warns for paths through the code which appear to\n+lead to infinite recursion.\n+\n+Specifically, when the analyzer \"sees\" a recursive call, it will compare\n+the state of memory at the entry to the new frame with that at the entry\n+to the previous frame of that function on the stack.  The warning is\n+issued if nothing in memory appears to be changing; any changes observed\n+to parameters or globals are assumed to lead to termination of the\n+recursion and thus suppress the warning.\n+\n+This diagnostic is likely to miss cases of infinite recursion that\n+are convered to iteration by the optimizer before the analyzer \"sees\"\n+them.  Hence optimization should be disabled when attempting to trigger\n+this diagnostic.\n+\n+Compare with @option{-Winfinite-recursion}, which provides a similar\n+diagnostic, but is implemented in a different way.\n+\n @item -Wno-analyzer-jump-through-null\n @opindex Wanalyzer-jump-through-null\n @opindex Wno-analyzer-jump-through-null\n@@ -10292,6 +10359,69 @@ of service attack.\n \n See @uref{https://cwe.mitre.org/data/definitions/789.html, CWE-789: Memory Allocation with Excessive Size Value}.\n \n+@item -Wno-analyzer-tainted-assertion\n+@opindex Wanalyzer-tainted-assertion\n+@opindex Wno-analyzer-tainted-assertion\n+\n+This warning requires both @option{-fanalyzer} and\n+@option{-fanalyzer-checker=taint} to enable it;\n+use @option{-Wno-analyzer-tainted-assertion} to disable it.\n+\n+This diagnostic warns for paths through the code in which a value\n+that could be under an attacker's control is used as part of a\n+condition without being first sanitized, and that condition guards a\n+call to a function marked with attribute @code{noreturn}\n+(such as the function @code{__builtin_unreachable}).  Such functions\n+typically indicate abnormal termination of the program, such as for\n+assertion failure handlers.  For example:\n+\n+@smallexample\n+assert (some_tainted_value < SOME_LIMIT);\n+@end smallexample\n+\n+In such cases:\n+\n+@itemize\n+@item\n+when assertion-checking is enabled: an attacker could trigger\n+a denial of service by injecting an assertion failure\n+\n+@item\n+when assertion-checking is disabled, such as by defining @code{NDEBUG},\n+an attacker could inject data that subverts the process, since it\n+presumably violates a precondition that is being assumed by the code.\n+\n+@end itemize\n+\n+Note that when assertion-checking is disabled, the assertions are\n+typically removed by the preprocessor before the analyzer has a chance\n+to \"see\" them, so this diagnostic can only generate warnings on builds\n+in which assertion-checking is enabled.\n+\n+For the purpose of this warning, any function marked with attribute\n+@code{noreturn} is considered as a possible assertion failure\n+handler, including @code{__builtin_unreachable}.  Note that these functions\n+are sometimes removed by the optimizer before the analyzer \"sees\" them.\n+Hence optimization should be disabled when attempting to trigger this\n+diagnostic.\n+\n+See @uref{https://cwe.mitre.org/data/definitions/617.html, CWE-617: Reachable Assertion}.\n+\n+The warning can also report problematic constructions such as\n+\n+@smallexample\n+switch (some_tainted_value) @{\n+case 0:\n+  /* [...etc; various valid cases omitted...] */\n+  break;\n+\n+default:\n+  __builtin_unreachable (); /* BUG: attacker can trigger this  */\n+@}\n+@end smallexample\n+\n+despite the above not being an assertion failure, strictly speaking.\n+\n @item -Wno-analyzer-tainted-array-index\n @opindex Wanalyzer-tainted-array-index\n @opindex Wno-analyzer-tainted-array-index\n@@ -10586,6 +10716,7 @@ to enable them.\n following warnings from @option{-fanalyzer}:\n \n @gccoptlist{ @gol\n+-Wanalyzer-deref-before-check @gol\n -Wanalyzer-double-fclose @gol\n -Wanalyzer-double-free @gol\n -Wanalyzer-exposure-through-output-file @gol\n@@ -19862,8 +19993,9 @@ performance of the code.  Permissible values for this option are:\n @samp{cortex-a57.cortex-a53}, @samp{cortex-a72.cortex-a53},\n @samp{cortex-a73.cortex-a35}, @samp{cortex-a73.cortex-a53},\n @samp{cortex-a75.cortex-a55}, @samp{cortex-a76.cortex-a55},\n-@samp{cortex-r82}, @samp{cortex-x1}, @samp{cortex-x2},\n-@samp{cortex-a510}, @samp{cortex-a710}, @samp{ampere1}, @samp{native}.\n+@samp{cortex-r82}, @samp{cortex-x1}, @samp{cortex-x1c}, @samp{cortex-x2},\n+@samp{cortex-a510}, @samp{cortex-a710}, @samp{cortex-a715}, @samp{ampere1},\n+@samp{native}.\n \n The values @samp{cortex-a57.cortex-a53}, @samp{cortex-a72.cortex-a53},\n @samp{cortex-a73.cortex-a35}, @samp{cortex-a73.cortex-a53},\n@@ -33838,6 +33970,14 @@ treat access to protected symbols as local symbols.  The default is\n @option{-mno-direct-extern-access} and executable compiled with\n @option{-mdirect-extern-access} may not be binary compatible if\n protected symbols are used in shared libraries and executable.\n+\n+@item -munroll-only-small-loops\n+@opindex munroll-only-small-loops\n+@opindex mno-unroll-only-small-loops\n+Controls conservative small loop unrolling. It is default enabled by\n+O2, and unrolls loop with less than 4 insns by 1 time. Explicit\n+-f[no-]unroll-[all-]loops would disable this flag to avoid any\n+unintended unrolling behavior that user does not want.\n @end table\n \n @node x86 Windows Options"}, {"sha": "60fac2e0417766c356e9afd970f52320f1a9a2f4", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce51e8439a491910348a1c5aea43b55f000ba8ac/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce51e8439a491910348a1c5aea43b55f000ba8ac/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=ce51e8439a491910348a1c5aea43b55f000ba8ac", "patch": "@@ -3763,8 +3763,7 @@ is used for dummy arguments; with @code{VALUE}, those variables are\n passed by value.\n \n For @code{OPTIONAL} dummy arguments, an absent argument is denoted\n-by a NULL pointer, except for scalar dummy arguments of type\n-@code{INTEGER}, @code{LOGICAL}, @code{REAL} and @code{COMPLEX}\n+by a NULL pointer, except for scalar dummy arguments of intrinsic type\n which have the @code{VALUE} attribute.  For those, a hidden Boolean\n argument (@code{logical(kind=C_bool),value}) is used to indicate\n whether the argument is present."}]}