{"sha": "ec0ce6e261a7963807419c597bb8644e7a7972ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMwY2U2ZTI2MWE3OTYzODA3NDE5YzU5N2JiODY0NGU3YTc5NzJmZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-10-26T18:13:38Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-10-26T18:13:38Z"}, "message": "c-parse.in (cast_expr): Constify.\n\n        * c-parse.in (cast_expr): Constify.\n\n        * cccp.c (special_symbol): Likewise.\n\n        * cse.c (hash_cse_reg_info, cse_reg_info_equal_p): Likewise.\n\n        * dwarf2out.c (base_type_die): Likewise.\n\n        * global.c (allocno_compare): Likewise.\n\n        * local-alloc.c (qty_compare_1, qty_sugg_compare_1): Likewise.\n\n        * regclass.c (fix_register): Likewise.\n\n        * rtl.h (fix_register): Likewise.\n\n        * stupid.c (stupid_reg_compare): Likewise.\n\n        * toplev.c (decode_f_option): Likewise.\n\n        * tree.c (build_complex_type): Likewise.\n\nFrom-SVN: r30196", "tree": {"sha": "40abe675a8aa34a0e0ee833d87a1bb5ee20dd16c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40abe675a8aa34a0e0ee833d87a1bb5ee20dd16c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec0ce6e261a7963807419c597bb8644e7a7972ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0ce6e261a7963807419c597bb8644e7a7972ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec0ce6e261a7963807419c597bb8644e7a7972ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0ce6e261a7963807419c597bb8644e7a7972ff/comments", "author": null, "committer": null, "parents": [{"sha": "d8d79d15881ec97586e941c199e94a9c88088aca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d79d15881ec97586e941c199e94a9c88088aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d79d15881ec97586e941c199e94a9c88088aca"}], "stats": {"total": 66, "additions": 45, "deletions": 21}, "files": [{"sha": "bfa6bb9c9f75aaf25d5f310d4cd241f72b12680f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -1,3 +1,27 @@\n+Tue Oct 26 14:10:23 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-parse.in (cast_expr): Constify.\n+\n+\t* cccp.c (special_symbol): Likewise.\n+\n+\t* cse.c (hash_cse_reg_info, cse_reg_info_equal_p): Likewise.\n+\n+\t* dwarf2out.c (base_type_die): Likewise.\n+\n+\t* global.c (allocno_compare): Likewise.\n+\n+\t* local-alloc.c (qty_compare_1, qty_sugg_compare_1): Likewise.\n+\n+\t* regclass.c (fix_register): Likewise.\n+\n+\t* rtl.h (fix_register): Likewise.\n+\n+\t* stupid.c (stupid_reg_compare): Likewise.\n+\n+\t* toplev.c (decode_f_option): Likewise.\n+\n+\t* tree.c (build_complex_type): Likewise.\n+\n Tue Oct 26 18:35:25 1999  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* output.h: Don't unnecessarily conditionalize prototypes on TREE_CODE."}, {"sha": "80cb75cd7daeca0367e8a0272d2cd102d021334d", "filename": "gcc/c-parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.c?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -2046,7 +2046,7 @@ case 61:\n     break;}\n case 62:\n #line 481 \"c-parse.y\"\n-{ char *name;\n+{ const char *name;\n \t\t  tree result = pop_init_level (0);\n \t\t  tree type = yyvsp[-5].ttype;\n \t\t  finish_init ();"}, {"sha": "6811b45b98ef46f68b541c71b5c26f718bb829af", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -523,7 +523,7 @@ cast_expr:\n \t\t  $2 = groktypename ($2);\n \t\t  really_start_incremental_init ($2); }\n \t  initlist_maybe_comma '}'  %prec UNARY\n-\t\t{ char *name;\n+\t\t{ const char *name;\n \t\t  tree result = pop_init_level (0);\n \t\t  tree type = $2;\n \t\t  finish_init ();"}, {"sha": "0e0b36bc30e7c178eeaea47f56a8b305db4de2af", "filename": "gcc/c-parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -478,7 +478,7 @@ cast_expr:\n \t\t  $2 = groktypename ($2);\n \t\t  really_start_incremental_init ($2); }\n \t  initlist_maybe_comma '}'  %prec UNARY\n-\t\t{ char *name;\n+\t\t{ const char *name;\n \t\t  tree result = pop_init_level (0);\n \t\t  tree type = $2;\n \t\t  finish_init ();"}, {"sha": "b5f31a1ab2a4aac3beb4caa72ba2dac2b0079b29", "filename": "gcc/cccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -4261,7 +4261,7 @@ special_symbol (hp, op)\n #ifdef STDC_0_IN_SYSTEM_HEADERS\n     if (ip->system_header_p\n \t&& hp->length == 8 && bcmp (hp->name, \"__STDC__\", 8) == 0\n-\t&& !lookup ((U_CHAR *) \"__STRICT_ANSI__\", -1, -1))\n+\t&& !lookup ((const U_CHAR *) \"__STRICT_ANSI__\", -1, -1))\n       buf = \"0\";\n #endif\n     if (pcp_inside_if && pcp_outfile)"}, {"sha": "d729cb29a1afa4dddacd067fe51e6541a24df68d", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -899,16 +899,16 @@ static unsigned int\n hash_cse_reg_info (el_ptr)\n      hash_table_entry_t el_ptr;\n {\n-  return ((struct cse_reg_info *) el_ptr)->regno;\n+  return ((const struct cse_reg_info *) el_ptr)->regno;\n }\n \n static int\n cse_reg_info_equal_p (el_ptr1, el_ptr2)\n      hash_table_entry_t el_ptr1;\n      hash_table_entry_t el_ptr2;\n {\n-  return (((struct cse_reg_info *) el_ptr1)->regno\n-\t  == ((struct cse_reg_info *) el_ptr2)->regno);\n+  return (((const struct cse_reg_info *) el_ptr1)->regno\n+\t  == ((const struct cse_reg_info *) el_ptr2)->regno);\n }\n \n /* Clear the hash table and initialize each register with its own quantity,"}, {"sha": "a9ee93c53343e0e78e806b00365811ec44609b3c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -6165,7 +6165,7 @@ base_type_die (type)\n      register tree type;\n {\n   register dw_die_ref base_type_result;\n-  register char *type_name;\n+  register const char *type_name;\n   register enum dwarf_type encoding;\n   register tree name = TYPE_NAME (type);\n "}, {"sha": "3ca1d9ccd030a103874eb9d03d2429bf6ea3f24d", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -594,7 +594,7 @@ allocno_compare (v1p, v2p)\n      const PTR v1p;\n      const PTR v2p;\n {\n-  int v1 = *(int *)v1p, v2 = *(int *)v2p;\n+  int v1 = *(const int *)v1p, v2 = *(const int *)v2p;\n   /* Note that the quotient will never be bigger than\n      the value of floor_log2 times the maximum number of\n      times a register can occur in one insn (surely less than 100)."}, {"sha": "ee72b7d794eea2bbf4f8f209cb0c1cdc79d50c3e", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -1503,7 +1503,7 @@ qty_compare_1 (q1p, q2p)\n      const PTR q1p;\n      const PTR q2p;\n {\n-  register int q1 = *(int *)q1p, q2 = *(int *)q2p;\n+  register int q1 = *(const int *)q1p, q2 = *(const int *)q2p;\n   register int tem = QTY_CMP_PRI (q2) - QTY_CMP_PRI (q1);\n \n   if (tem != 0)\n@@ -1543,7 +1543,7 @@ qty_sugg_compare_1 (q1p, q2p)\n      const PTR q1p;\n      const PTR q2p;\n {\n-  register int q1 = *(int *)q1p, q2 = *(int *)q2p;\n+  register int q1 = *(const int *)q1p, q2 = *(const int *)q2p;\n   register int tem = QTY_CMP_SUGG (q1) - QTY_CMP_SUGG (q2);\n \n   if (tem != 0)"}, {"sha": "1445dbda9ff00cf508ac877c0921cda04846ef8a", "filename": "gcc/objc/objc-parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fobjc%2Fobjc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fobjc%2Fobjc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.c?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -2529,7 +2529,7 @@ case 64:\n     break;}\n case 65:\n #line 507 \"objc-parse.y\"\n-{ char *name;\n+{ const char *name;\n \t\t  tree result = pop_init_level (0);\n \t\t  tree type = yyvsp[-5].ttype;\n \t\t  finish_init ();"}, {"sha": "5292430d00bb29bd9e01a4970a1410ac2e3fa897", "filename": "gcc/objc/objc-parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fobjc%2Fobjc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fobjc%2Fobjc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.y?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -504,7 +504,7 @@ cast_expr:\n \t\t  $2 = groktypename ($2);\n \t\t  really_start_incremental_init ($2); }\n \t  initlist_maybe_comma '}'  %prec UNARY\n-\t\t{ char *name;\n+\t\t{ const char *name;\n \t\t  tree result = pop_init_level (0);\n \t\t  tree type = $2;\n \t\t  finish_init ();"}, {"sha": "a2258b73ffa82001eb6b3b38f638c27bc660ec22", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -571,7 +571,7 @@ choose_hard_reg_mode (regno, nregs)\n \n void\n fix_register (name, fixed, call_used)\n-     char *name;\n+     const char *name;\n      int fixed, call_used;\n {\n   int i;"}, {"sha": "629e062dad9c4da73d89637be52fa0086b248c98", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -1565,7 +1565,7 @@ extern void regclass_init\t\tPROTO ((void));\n extern void regclass\t\t\tPROTO ((rtx, int));\n extern void reg_scan\t\t\tPROTO ((rtx, int, int));\n extern void reg_scan_update\t\tPROTO ((rtx, rtx, int));\n-extern void fix_register\t\tPROTO ((char *, int, int));\n+extern void fix_register\t\tPROTO ((const char *, int, int));\n \n /* In regmove.c */\n #ifdef BUFSIZ"}, {"sha": "09ea8babc74423015bdb104139bcf958726dc033", "filename": "gcc/stupid.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fstupid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Fstupid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstupid.c?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -446,7 +446,7 @@ stupid_reg_compare (r1p, r2p)\n      const PTR r1p;\n      const PTR r2p;\n {\n-  register int r1 = *(int *)r1p, r2 = *(int *)r2p;\n+  register int r1 = *(const int *)r1p, r2 = *(const int *)r2p;\n   register int len1 = reg_where_dead[r1] - REG_WHERE_BORN (r1);\n   register int len2 = reg_where_dead[r2] - REG_WHERE_BORN (r2);\n   int tem;"}, {"sha": "3f0118991abcb1e21965ec5edd4d28679e930d8d", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -4833,14 +4833,14 @@ decode_f_option (arg)\n       read_integral_parameter (arg + 13, arg - 2, inline_max_insns);\n #ifdef INSN_SCHEDULING\n   else if (!strncmp (arg, \"sched-verbose=\", 14))\n-    fix_sched_param (\"verbose\", (char *)(arg + 14));\n+    fix_sched_param (\"verbose\", (const char *)(arg + 14));\n #endif\n   else if (!strncmp (arg, \"fixed-\", 6))\n-    fix_register ((char *)(arg + 6), 1, 1);\n+    fix_register ((const char *)(arg + 6), 1, 1);\n   else if (!strncmp (arg, \"call-used-\", 10))\n-    fix_register ((char *)(arg + 10), 0, 1);\n+    fix_register ((const char *)(arg + 10), 0, 1);\n   else if (!strncmp (arg, \"call-saved-\", 11))\n-    fix_register ((char *)(arg + 11), 0, 0);\n+    fix_register ((const char *)(arg + 11), 0, 0);\n   else if (!strncmp (arg, \"align-loops=\", 12))\n     align_loops = read_integral_parameter (arg + 12, arg - 2, align_loops);\n   else if (!strncmp (arg, \"align-functions=\", 16))"}, {"sha": "0d3a7761c5b367ad186a3b84a0491c191db14d74", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0ce6e261a7963807419c597bb8644e7a7972ff/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ec0ce6e261a7963807419c597bb8644e7a7972ff", "patch": "@@ -4528,7 +4528,7 @@ build_complex_type (component_type)\n      since complex is a fundamental type.  */\n   if (write_symbols == DWARF2_DEBUG && ! TYPE_NAME (t))\n     {\n-      char *name;\n+      const char *name;\n       if (component_type == char_type_node)\n \tname = \"complex char\";\n       else if (component_type == signed_char_type_node)"}]}