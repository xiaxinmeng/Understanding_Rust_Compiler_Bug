{"sha": "14e18d7100de30f3c2991401bbb414d2e3ffb716", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRlMThkNzEwMGRlMzBmM2MyOTkxNDAxYmJiNDE0ZDJlM2ZmYjcxNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-08-24T14:28:16Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-08-24T14:28:16Z"}, "message": "C: fix logic within c_expr::get_location\n\nIn r251239 I added a c_expr::get_location method for use by\nc_parser_expr_list for building the vec<location_t> for\nan expression list, rather than using the location of the first token.\n\nWhen determining whether to use the location within the tree node,\nor fall back to the range in the c_expr, I used EXPR_CAN_HAVE_LOCATION,\nrather than EXPR_HAS_LOCATION.  This meant that any tree nodes of kinds\nthat *can* have a location but which erroneously had\n   EXPR_LOCATION (value) == UNKNOWN_LOCATION\nhad that value added to the vec<location_t>, leading to missing\nlocation information when reporting on the issue\n(seen with gcc.dg/Wtraditional-conversion-2.c for m68k).\n\nThis patch addresses this in two ways:\n\n(a) it fixes the specific issue in this failing test case, by\n    setting up the location properly on the EXCESS_PRECISION_EXPR.\n\n(b) updating c_expr::get_location by only using the EXPR_LOCATION\n    if it's sane.  Arguably this is papering over bugs, but they are\n    pre-existing ones exposed by r251239, and I'd rather have this\n    fix in place than play whack-a-mole on any other such \"missing\n    location\" bugs that are lurking in the codebase.\n\ngcc/c/ChangeLog:\n\t* c-tree.h (c_expr::get_location) Use EXPR_HAS_LOCATION rather\n\tthan CAN_HAVE_LOCATION_P when determining whether to use the\n\tlocation_t value within \"value\".\n\ngcc/c-family/ChangeLog:\n\t* c-lex.c (interpret_float): Use token location\n\twhen building an EXCESS_PRECISION_EXPR.\n\nFrom-SVN: r251335", "tree": {"sha": "5542f916a0b042bb557eb0d1ec63a38f76dc078e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5542f916a0b042bb557eb0d1ec63a38f76dc078e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14e18d7100de30f3c2991401bbb414d2e3ffb716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e18d7100de30f3c2991401bbb414d2e3ffb716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e18d7100de30f3c2991401bbb414d2e3ffb716", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e18d7100de30f3c2991401bbb414d2e3ffb716/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "845c76ce64bf1cbfcf89651ff84ce8abc28533af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/845c76ce64bf1cbfcf89651ff84ce8abc28533af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/845c76ce64bf1cbfcf89651ff84ce8abc28533af"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "3dd50557907896680ea494f1630e38b0c9078fc1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e18d7100de30f3c2991401bbb414d2e3ffb716/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e18d7100de30f3c2991401bbb414d2e3ffb716/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=14e18d7100de30f3c2991401bbb414d2e3ffb716", "patch": "@@ -1,3 +1,8 @@\n+2017-08-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-lex.c (interpret_float): Use token location\n+\twhen building an EXCESS_PRECISION_EXPR.\n+\n 2017-08-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.c (check_function_arguments): Add \"arglogs\" param; pass"}, {"sha": "a614b266baf165ece495342235a64a0b26398bcb", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e18d7100de30f3c2991401bbb414d2e3ffb716/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e18d7100de30f3c2991401bbb414d2e3ffb716/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=14e18d7100de30f3c2991401bbb414d2e3ffb716", "patch": "@@ -988,7 +988,7 @@ interpret_float (const cpp_token *token, unsigned int flags,\n     }\n \n   if (type != const_type)\n-    value = build1 (EXCESS_PRECISION_EXPR, type, value);\n+    value = build1_loc (token->src_loc, EXCESS_PRECISION_EXPR, type, value);\n \n   return value;\n }"}, {"sha": "0cf7bd26167eabece9aeda44a22f90cb84c7a2cb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e18d7100de30f3c2991401bbb414d2e3ffb716/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e18d7100de30f3c2991401bbb414d2e3ffb716/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=14e18d7100de30f3c2991401bbb414d2e3ffb716", "patch": "@@ -1,3 +1,9 @@\n+2017-08-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-tree.h (c_expr::get_location) Use EXPR_HAS_LOCATION rather\n+\tthan CAN_HAVE_LOCATION_P when determining whether to use the\n+\tlocation_t value within \"value\".\n+\n 2017-08-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-parser.c (c_parser_expr_list): Use c_expr::get_location ()"}, {"sha": "96c7ae7613ff5049b2d39bb19266ea2706de8193", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e18d7100de30f3c2991401bbb414d2e3ffb716/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e18d7100de30f3c2991401bbb414d2e3ffb716/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=14e18d7100de30f3c2991401bbb414d2e3ffb716", "patch": "@@ -149,7 +149,7 @@ struct c_expr\n \n   location_t get_location () const\n   {\n-    if (CAN_HAVE_LOCATION_P (value))\n+    if (EXPR_HAS_LOCATION (value))\n       return EXPR_LOCATION (value);\n     else\n       return make_location (get_start (), get_start (), get_finish ());"}]}