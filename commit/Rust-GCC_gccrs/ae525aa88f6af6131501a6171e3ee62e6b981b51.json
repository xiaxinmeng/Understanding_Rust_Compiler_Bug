{"sha": "ae525aa88f6af6131501a6171e3ee62e6b981b51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1MjVhYTg4ZjZhZjYxMzE1MDFhNjE3MWUzZWU2MmU2Yjk4MWI1MQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2009-07-13T13:21:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-13T13:21:47Z"}, "message": "exp_ch7.adb, [...] (Make_Temporary): Utility to create a defining identifier and link it to the expression whose...\n\n2009-07-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch7.adb, exp_util.adb, tbuild.adb, tbuild.ads, exp_ch4.adb,\n\texp_aggr.adb (Make_Temporary): Utility to create a defining identifier\n\tand link it to the expression whose value it captures.\n\nFrom-SVN: r149585", "tree": {"sha": "7d58b5b4a02dc6f1de4d537cc33e9b1575010534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d58b5b4a02dc6f1de4d537cc33e9b1575010534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae525aa88f6af6131501a6171e3ee62e6b981b51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae525aa88f6af6131501a6171e3ee62e6b981b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae525aa88f6af6131501a6171e3ee62e6b981b51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae525aa88f6af6131501a6171e3ee62e6b981b51/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7209434bdc1561d3adf2bc2c848c3b6ba74f19d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7209434bdc1561d3adf2bc2c848c3b6ba74f19d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7209434bdc1561d3adf2bc2c848c3b6ba74f19d"}], "stats": {"total": 76, "additions": 41, "deletions": 35}, "files": [{"sha": "5d888c03c3d57db43f6d49f27146460e1f8e80e1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ae525aa88f6af6131501a6171e3ee62e6b981b51", "patch": "@@ -1,3 +1,9 @@\n+2009-07-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch7.adb, exp_util.adb, tbuild.adb, tbuild.ads, exp_ch4.adb,\n+\texp_aggr.adb (Make_Temporary): Utility to create a defining identifier\n+\tand link it to the expression whose value it captures.\n+\n 2009-07-13  Robert Dewar  <dewar@adacore.com>\n \n \t* output.adb: Minor comment addition for last change"}, {"sha": "11174614df1155fffde7c77b1b4d906ca58671b5", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=ae525aa88f6af6131501a6171e3ee62e6b981b51", "patch": "@@ -2996,13 +2996,11 @@ package body Exp_Aggr is\n                      --  will be used to capture the aggregate assignments.\n \n                      TmpE : constant Entity_Id :=\n-                              Make_Defining_Identifier (Loc,\n-                                New_Internal_Name ('A'));\n+                              Make_Temporary (Loc, New_Internal_Name ('A'), N);\n \n                      TmpD : constant Node_Id :=\n                               Make_Object_Declaration (Loc,\n-                                Defining_Identifier =>\n-                                  TmpE,\n+                                Defining_Identifier => TmpE,\n                                 Object_Definition   =>\n                                   New_Reference_To (SubE, Loc));\n \n@@ -3588,7 +3586,7 @@ package body Exp_Aggr is\n          Rewrite (Parent (N), Make_Null_Statement (Loc));\n \n       else\n-         Temp := Make_Defining_Identifier (Loc, New_Internal_Name ('A'));\n+         Temp := Make_Temporary (Loc, New_Internal_Name ('A'), N);\n \n          --  If the type inherits unknown discriminants, use the view with\n          --  known discriminants if available.\n@@ -5203,7 +5201,7 @@ package body Exp_Aggr is\n \n       else\n          Maybe_In_Place_OK := False;\n-         Tmp := Make_Defining_Identifier (Loc, New_Internal_Name ('A'));\n+         Tmp := Make_Temporary (Loc, New_Internal_Name ('A'), N);\n          Tmp_Decl :=\n            Make_Object_Declaration\n              (Loc,"}, {"sha": "f8f2caa79b38dfb52da6f5cc5c601a3017459ae4", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=ae525aa88f6af6131501a6171e3ee62e6b981b51", "patch": "@@ -4043,7 +4043,7 @@ package body Exp_Ch4 is\n       --  and replace the conditional expresion by a reference to Cnn.all ???\n \n       if Present (Then_Actions (N)) or else Present (Else_Actions (N)) then\n-         Cnn := Make_Defining_Identifier (Loc, New_Internal_Name ('C'));\n+         Cnn := Make_Temporary (Loc, New_Internal_Name ('C'), N);\n \n          New_If :=\n            Make_Implicit_If_Statement (N,\n@@ -4092,10 +4092,6 @@ package body Exp_Ch4 is\n \n          Insert_Action (N, New_If);\n          Analyze_And_Resolve (N, Typ);\n-\n-         --  Link temporary to original expression, for CodePeer\n-\n-         Set_Related_Expression (Cnn, Original_Node (N));\n       end if;\n    end Expand_N_Conditional_Expression;\n "}, {"sha": "9dd585742142a5b96624d911d242545eeb45aab5", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=ae525aa88f6af6131501a6171e3ee62e6b981b51", "patch": "@@ -3552,14 +3552,10 @@ package body Exp_Ch7 is\n    procedure Wrap_Transient_Expression (N : Node_Id) is\n       Loc  : constant Source_Ptr := Sloc (N);\n       E    : constant Entity_Id :=\n-               Make_Defining_Identifier (Loc, New_Internal_Name ('E'));\n+               Make_Temporary (Loc, New_Internal_Name ('E'), N);\n       Etyp : constant Entity_Id := Etype (N);\n \n    begin\n-      --  Indicate the origin of the temporary, for better reports\n-      --  in CodePeer.\n-\n-      Set_Related_Expression (E, N);\n       Insert_Actions (N, New_List (\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => E,"}, {"sha": "bd7f90cbe39fe7d527abd2226573a7975b90bdaf", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=ae525aa88f6af6131501a6171e3ee62e6b981b51", "patch": "@@ -4588,7 +4588,7 @@ package body Exp_Util is\n                    or else Nkind (Exp) in N_Op\n                    or else (not Name_Req and then Is_Volatile_Reference (Exp)))\n       then\n-         Def_Id := Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n+         Def_Id := Make_Temporary (Loc, New_Internal_Name ('R'), Exp);\n          Set_Etype (Def_Id, Exp_Type);\n          Res := New_Reference_To (Def_Id, Loc);\n \n@@ -4601,14 +4601,12 @@ package body Exp_Util is\n \n          Set_Assignment_OK (E);\n          Insert_Action (Exp, E);\n-         Set_Related_Expression (Def_Id, Exp);\n \n       --  If the expression has the form v.all then we can just capture\n       --  the pointer, and then do an explicit dereference on the result.\n \n       elsif Nkind (Exp) = N_Explicit_Dereference then\n-         Def_Id :=\n-           Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n+         Def_Id := Make_Temporary (Loc, New_Internal_Name ('R'), Exp);\n          Res :=\n            Make_Explicit_Dereference (Loc, New_Reference_To (Def_Id, Loc));\n \n@@ -4619,7 +4617,6 @@ package body Exp_Util is\n                New_Reference_To (Etype (Prefix (Exp)), Loc),\n              Constant_Present    => True,\n              Expression          => Relocate_Node (Prefix (Exp))));\n-         Set_Related_Expression (Def_Id, Exp);\n \n       --  Similar processing for an unchecked conversion of an expression\n       --  of the form v.all, where we want the same kind of treatment.\n@@ -4653,18 +4650,17 @@ package body Exp_Util is\n             --  Use a renaming to capture the expression, rather than create\n             --  a controlled temporary.\n \n-            Def_Id := Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n+            Def_Id := Make_Temporary (Loc, New_Internal_Name ('R'), Exp);\n             Res := New_Reference_To (Def_Id, Loc);\n \n             Insert_Action (Exp,\n               Make_Object_Renaming_Declaration (Loc,\n                 Defining_Identifier => Def_Id,\n                 Subtype_Mark        => New_Reference_To (Exp_Type, Loc),\n                 Name                => Relocate_Node (Exp)));\n-            Set_Related_Expression (Def_Id, Exp);\n \n          else\n-            Def_Id := Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n+            Def_Id := Make_Temporary (Loc, New_Internal_Name ('R'), Exp);\n             Set_Etype (Def_Id, Exp_Type);\n             Res := New_Reference_To (Def_Id, Loc);\n \n@@ -4677,7 +4673,6 @@ package body Exp_Util is\n \n             Set_Assignment_OK (E);\n             Insert_Action (Exp, E);\n-            Set_Related_Expression (Def_Id, Exp);\n          end if;\n \n       --  For expressions that denote objects, we can use a renaming scheme.\n@@ -4688,7 +4683,7 @@ package body Exp_Util is\n         and then Nkind (Exp) /= N_Function_Call\n         and then (Name_Req or else not Is_Volatile_Reference (Exp))\n       then\n-         Def_Id := Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n+         Def_Id := Make_Temporary (Loc, New_Internal_Name ('R'), Exp);\n \n          if Nkind (Exp) = N_Selected_Component\n            and then Nkind (Prefix (Exp)) = N_Function_Call\n@@ -4721,8 +4716,6 @@ package body Exp_Util is\n                 Name                => Relocate_Node (Exp)));\n          end if;\n \n-         Set_Related_Expression (Def_Id, Exp);\n-\n          --  If this is a packed reference, or a selected component with a\n          --  non-standard representation, a reference to the temporary will\n          --  be replaced by a copy of the original expression (see\n@@ -4758,8 +4751,7 @@ package body Exp_Util is\n          then\n             declare\n                Obj  : constant Entity_Id :=\n-                        Make_Defining_Identifier (Loc,\n-                          Chars => New_Internal_Name ('F'));\n+                        Make_Temporary (Loc, New_Internal_Name ('F'), Exp);\n                Decl : Node_Id;\n \n             begin\n@@ -4770,7 +4762,6 @@ package body Exp_Util is\n                    Expression          => Relocate_Node (Exp));\n                Insert_Action (Exp, Decl);\n                Set_Etype (Obj, Exp_Type);\n-               Set_Related_Expression (Obj, Exp);\n                Rewrite (Exp, New_Occurrence_Of (Obj, Loc));\n                return;\n             end;\n@@ -4790,7 +4781,7 @@ package body Exp_Util is\n          E := Exp;\n          Insert_Action (Exp, Ptr_Typ_Decl);\n \n-         Def_Id := Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n+         Def_Id := Make_Temporary (Loc, New_Internal_Name ('R'), Exp);\n          Set_Etype (Def_Id, Exp_Type);\n \n          Res :=\n@@ -4828,7 +4819,6 @@ package body Exp_Util is\n              Defining_Identifier => Def_Id,\n              Object_Definition   => New_Reference_To (Ref_Type, Loc),\n              Expression          => New_Exp));\n-         Set_Related_Expression (Def_Id, Exp);\n       end if;\n \n       --  Preserve the Assignment_OK flag in all copies, since at least"}, {"sha": "be882055af46a9df5f0e2b9ffdcd8f30e5fccd22", "filename": "gcc/ada/tbuild.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Ftbuild.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Ftbuild.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.adb?ref=ae525aa88f6af6131501a6171e3ee62e6b981b51", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -436,6 +436,18 @@ package body Tbuild is\n           Strval => End_String);\n    end Make_String_Literal;\n \n+   function Make_Temporary\n+     (Loc  :  Source_Ptr;\n+      Id   :  Name_Id;\n+      Related_Node : Node_Id := Empty) return Node_Id\n+   is\n+      Temp : Node_Id;\n+   begin\n+      Temp := Make_Defining_Identifier (Loc, Id);\n+      Set_Related_Expression (Temp, Related_Node);\n+      return Temp;\n+   end Make_Temporary;\n+\n    ---------------------------\n    -- Make_Unsuppress_Block --\n    ---------------------------"}, {"sha": "f12b616c93afa6889534871cc1b0b8e67fde567c", "filename": "gcc/ada/tbuild.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Ftbuild.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae525aa88f6af6131501a6171e3ee62e6b981b51/gcc%2Fada%2Ftbuild.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.ads?ref=ae525aa88f6af6131501a6171e3ee62e6b981b51", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -175,6 +175,14 @@ package Tbuild is\n    --  A convenient form of Make_String_Literal, where the string value\n    --  is given as a normal string instead of a String_Id value.\n \n+   function Make_Temporary\n+     (Loc :   Source_Ptr;\n+      Id  :  Name_Id;\n+      Related_Node : Node_Id := Empty) return Node_Id;\n+   --  Create a defining identifier to capture the value of an expression\n+   --  or aggregate, and link it to the expression that it replaces, in\n+   --  order to provide better CodePeer reports.\n+\n    function Make_Unsuppress_Block\n      (Loc   : Source_Ptr;\n       Check : Name_Id;"}]}