{"sha": "f8f5c4b3aa71b9bcc430d514129294ccacf93626", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhmNWM0YjNhYTcxYjliY2M0MzBkNTE0MTI5Mjk0Y2NhY2Y5MzYyNg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-01-05T01:41:36Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-01-05T01:41:36Z"}, "message": "re PR c/19152 (IMA and external inline don't get along)\n\n2005-01-04  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR c/19152\n        * c-decl.c (diagnose_mismatched_decls): Accept \"extern inline\" declared\n        after the full declaration if the are in two different TUs.\n\nFrom-SVN: r92918", "tree": {"sha": "d86e96d66b105812b84c3711957b1431c1222576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d86e96d66b105812b84c3711957b1431c1222576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8f5c4b3aa71b9bcc430d514129294ccacf93626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f5c4b3aa71b9bcc430d514129294ccacf93626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f5c4b3aa71b9bcc430d514129294ccacf93626", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f5c4b3aa71b9bcc430d514129294ccacf93626/comments", "author": null, "committer": null, "parents": [{"sha": "8d0cf6032ba0a5e01330379a98067b1f7a50dd2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0cf6032ba0a5e01330379a98067b1f7a50dd2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d0cf6032ba0a5e01330379a98067b1f7a50dd2f"}], "stats": {"total": 61, "additions": 49, "deletions": 12}, "files": [{"sha": "2d8e69aa278172613d0f03d3a8b80095eb8d5c3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f5c4b3aa71b9bcc430d514129294ccacf93626/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f5c4b3aa71b9bcc430d514129294ccacf93626/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8f5c4b3aa71b9bcc430d514129294ccacf93626", "patch": "@@ -1,4 +1,10 @@\n-2005-01-04 Richard Henderson  <rth@redhat.com>\n+2005-01-04  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR c/19152\n+\t* c-decl.c (diagnose_mismatched_decls): Accept \"extern inline\" declared\n+\tafter the full declaration if the are in two different TUs.\n+\n+2005-01-04  Richard Henderson  <rth@redhat.com>\n \n \tPR tree-opt/19158\n \t* tree-sra.c (generate_one_element_init): Just"}, {"sha": "6673927eab608caa7a8bf3154d99ed460fd04db1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f5c4b3aa71b9bcc430d514129294ccacf93626/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f5c4b3aa71b9bcc430d514129294ccacf93626/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f8f5c4b3aa71b9bcc430d514129294ccacf93626", "patch": "@@ -1116,6 +1116,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   tree newtype, oldtype;\n   bool pedwarned = false;\n   bool warned = false;\n+  bool retval = true;\n \n   /* If we have error_mark_node for either decl or type, just discard\n      the previous decl - we're in an error cascade already.  */\n@@ -1266,17 +1267,47 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \n       if (DECL_INITIAL (newdecl))\n \t{\n-\t  if (DECL_INITIAL (olddecl)\n-\t      && !(DECL_DECLARED_INLINE_P (olddecl)\n-\t\t   && DECL_EXTERNAL (olddecl)\n-\t\t   && !(DECL_DECLARED_INLINE_P (newdecl)\n-\t\t\t&& DECL_EXTERNAL (newdecl)\n-\t    \t\t&& same_translation_unit_p (olddecl, newdecl))))\n+\t  if (DECL_INITIAL (olddecl))\n \t    {\n-\t      error (\"%Jredefinition of %qD\", newdecl, newdecl);\n-\t      locate_old_decl (olddecl, error);\n-\t      return false;\n-\t    }\n+\t      /* If both decls have extern inline and are in the same TU,\n+\t         reject the new decl.  */\n+\t      if (DECL_DECLARED_INLINE_P (olddecl)\n+\t\t  && DECL_EXTERNAL (olddecl)\n+\t\t  && DECL_DECLARED_INLINE_P (newdecl)\n+\t\t  && DECL_EXTERNAL (newdecl)\n+\t\t  && same_translation_unit_p (newdecl, olddecl))\n+\t\t{\n+\t\t  error (\"%Jredefinition of %qD\", newdecl, newdecl);\n+\t\t  locate_old_decl (olddecl, error);\n+\t\t  return false;\n+\t\t}\n+\t      /* If both decls have not extern inline, reject the new decl.  */\n+\t      if (!DECL_DECLARED_INLINE_P (olddecl)\n+\t\t  && !DECL_EXTERNAL (olddecl)\n+\t\t  && !DECL_DECLARED_INLINE_P (newdecl)\n+\t\t  && !DECL_EXTERNAL (newdecl))\n+\t\t{\n+\t\t  error (\"%Jredefinition of %qD\", newdecl, newdecl);\n+\t\t  locate_old_decl (olddecl, error);\n+\t\t  return false;\n+\t\t}\n+\t      /* If the new decl is declared as extern inline, error if they are\n+\t         in the same TU, otherwise retain the old decl.  */\n+\t      if (!DECL_DECLARED_INLINE_P (olddecl)\n+\t\t  && !DECL_EXTERNAL (olddecl)\n+\t\t  && DECL_DECLARED_INLINE_P (newdecl)\n+\t\t  && DECL_EXTERNAL (newdecl))\n+\t\t{\n+\t\t  if (same_translation_unit_p (newdecl, olddecl))\n+\t\t    {\n+\t\t      error (\"%Jredefinition of %qD\", newdecl, newdecl);\n+\t\t      locate_old_decl (olddecl, error);\n+\t\t      return false;\n+\t\t    }\n+\t\t  else\n+\t\t    retval = false;\n+\t\t}\n+\t   }\n \t}\n       /* If we have a prototype after an old-style function definition,\n \t the argument types must be checked specially.  */\n@@ -1518,7 +1549,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   if (warned || pedwarned)\n     locate_old_decl (olddecl, pedwarned ? pedwarn : warning);\n \n-  return true;\n+  return retval;\n }\n \n /* Subroutine of duplicate_decls.  NEWDECL has been found to be"}]}