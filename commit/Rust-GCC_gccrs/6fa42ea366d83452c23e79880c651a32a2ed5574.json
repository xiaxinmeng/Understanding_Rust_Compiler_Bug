{"sha": "6fa42ea366d83452c23e79880c651a32a2ed5574", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZhNDJlYTM2NmQ4MzQ1MmMyM2U3OTg4MGM2NTFhMzJhMmVkNTU3NA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-11-23T23:34:05Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-11-23T23:34:05Z"}, "message": "Fix e500 offset handling for TImode.\n\nGiven my previous fix for a missing insn pattern for e500, building\nglibc runs into an assembler error \"Error: operand out of range (256\nis not between 0 and 248)\".  This comes from an insn:\n\n(insn 115 1209 1210 (set (reg:DF 27 27 [orig:294 _129 ] [294])\n        (subreg:DF (mem/c:TI (plus:SI (reg/f:SI 1 1)\n                    (const_int 256 [0x100])) [14 %sfp+256 S16 A128]) 0)) 1909 {*frob_df_ti}\n     (nil))\n\nThis patch adjusts the offset handling for TImode - and TDmode and\nPTImode in case such subregs can arise for them - to be the same as\nfor TFmode, so that proper SPE offset checks are made in the\nTARGET_E500_DOUBLE case.\n\nThis allows the glibc build to complete.  Testing shows 372 FAILs\nacross the gcc, g++ and libstdc++ testsuites; more cleanup is\ncertainly needed, but this gets to the point where the toolchain at\nleast builds so it's possible to compare test results when fixing\nbugs.\n\n\t* config/rs6000/rs6000.c (rs6000_legitimate_offset_address_p): For\n\tTARGET_E500_DOUBLE. handle TDmode, TImode and PTImode the same as\n\tTFmode, IFmode and KFmode.\n\nFrom-SVN: r242814", "tree": {"sha": "8ed0e5f36ae382010ce6fac05a32f6d5e7e470de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ed0e5f36ae382010ce6fac05a32f6d5e7e470de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fa42ea366d83452c23e79880c651a32a2ed5574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa42ea366d83452c23e79880c651a32a2ed5574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fa42ea366d83452c23e79880c651a32a2ed5574", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa42ea366d83452c23e79880c651a32a2ed5574/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03f24169cd08ba3dca65248ff7cc4d7a18d35a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f24169cd08ba3dca65248ff7cc4d7a18d35a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f24169cd08ba3dca65248ff7cc4d7a18d35a48"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "ca575bc0e23965c8296adde5415470575954a6fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa42ea366d83452c23e79880c651a32a2ed5574/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa42ea366d83452c23e79880c651a32a2ed5574/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fa42ea366d83452c23e79880c651a32a2ed5574", "patch": "@@ -1,3 +1,9 @@\n+2016-11-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_legitimate_offset_address_p): For\n+\tTARGET_E500_DOUBLE. handle TDmode, TImode and PTImode the same as\n+\tTFmode, IFmode and KFmode.\n+\n 2016-11-23  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/rs6000/spe.md (*frob_<SPE64:mode>_ti_8): New insn"}, {"sha": "7cf71e6caa6869189b65412ed5def6a41e6335d2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa42ea366d83452c23e79880c651a32a2ed5574/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa42ea366d83452c23e79880c651a32a2ed5574/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6fa42ea366d83452c23e79880c651a32a2ed5574", "patch": "@@ -8443,14 +8443,13 @@ rs6000_legitimate_offset_address_p (machine_mode mode, rtx x,\n     case TFmode:\n     case IFmode:\n     case KFmode:\n+    case TDmode:\n+    case TImode:\n+    case PTImode:\n       if (TARGET_E500_DOUBLE)\n \treturn (SPE_CONST_OFFSET_OK (offset)\n \t\t&& SPE_CONST_OFFSET_OK (offset + 8));\n-      /* fall through */\n \n-    case TDmode:\n-    case TImode:\n-    case PTImode:\n       extra = 8;\n       if (!worst_case)\n \tbreak;"}]}