{"sha": "1f26ff11b688e3cec00da85b13f6f33e23fc7410", "node_id": "C_kwDOANBUbNoAKDFmMjZmZjExYjY4OGUzY2VjMDBkYTg1YjEzZjZmMzNlMjNmYzc0MTA", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2021-11-30T23:40:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-06T17:11:34Z"}, "message": "[Ada] Spurious error when using current instance of type\n\ngcc/ada/\n\n\t* exp_ch3.adb (Build_Assignment): Replace current instance of\n\ttype with Init_Proc formal.\n\t* sem_attr.adb (OK_Self_Reference): Handle recognition of\n\tCurrent_Instance to detect certain expansion.\n\t* sem_ch4.adb (Analyze_One_Call): Set actual's type when the\n\tactual in question is a current instance and its corresponding\n\tformal is an incomplete type.\n\t* sem_util.adb (Is_Current_Instance): Add check for incomplete\n\tviews and add comment.", "tree": {"sha": "aef0ab468460253d75f67e5d16c5bfbbfb8f3ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aef0ab468460253d75f67e5d16c5bfbbfb8f3ce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f26ff11b688e3cec00da85b13f6f33e23fc7410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f26ff11b688e3cec00da85b13f6f33e23fc7410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f26ff11b688e3cec00da85b13f6f33e23fc7410", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f26ff11b688e3cec00da85b13f6f33e23fc7410/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0590ed7248a46c06c9f0d166af7eb8c9bb046a66"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "265799115c601faeb2d6a2267409c56b3183cf87", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f26ff11b688e3cec00da85b13f6f33e23fc7410/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f26ff11b688e3cec00da85b13f6f33e23fc7410/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=1f26ff11b688e3cec00da85b13f6f33e23fc7410", "patch": "@@ -2022,6 +2022,25 @@ package body Exp_Ch3 is\n                          Elmt2 => Defining_Identifier (First\n                                    (Parameter_Specifications\n                                       (Parent (Proc_Id)))));\n+\n+               --  If the type has an incomplete view, a current instance\n+               --  may have an incomplete type. In that case, it must also be\n+               --  replaced by the formal of the Init_Proc.\n+\n+               if Nkind (Parent (Rec_Type)) = N_Full_Type_Declaration\n+                 and then Present (Incomplete_View (Parent (Rec_Type)))\n+               then\n+                  Append_Elmt (\n+                    N  => Defining_Identifier\n+                            (Incomplete_View (Parent (Rec_Type))),\n+                    To => Map);\n+                  Append_Elmt (\n+                    N  => Defining_Identifier\n+                            (First\n+                              (Parameter_Specifications\n+                                (Parent (Proc_Id)))),\n+                    To => Map);\n+               end if;\n             end if;\n \n             Exp := New_Copy_Tree (Exp, New_Scope => Proc_Id, Map => Map);"}, {"sha": "30bd335ef83606d2c74760f8f2231b5a9d8e12ad", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f26ff11b688e3cec00da85b13f6f33e23fc7410/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f26ff11b688e3cec00da85b13f6f33e23fc7410/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=1f26ff11b688e3cec00da85b13f6f33e23fc7410", "patch": "@@ -989,7 +989,15 @@ package body Sem_Attr is\n                   Set_Etype  (P, Typ);\n                end if;\n \n-               if Typ = Scop then\n+               --  A current instance typically appears immediately within\n+               --  the type declaration, but may be nested within an internally\n+               --  generated temporary scope - as for an aggregate of a\n+               --  discriminated component.\n+\n+               if Typ = Scop\n+                 or else (In_Open_Scopes (Typ)\n+                           and then not Comes_From_Source (Scop))\n+               then\n                   declare\n                      Q : Node_Id := Parent (N);\n "}, {"sha": "46e259d26efe4606f0a277e1128079104ceee5f6", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f26ff11b688e3cec00da85b13f6f33e23fc7410/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f26ff11b688e3cec00da85b13f6f33e23fc7410/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=1f26ff11b688e3cec00da85b13f6f33e23fc7410", "patch": "@@ -3727,6 +3727,24 @@ package body Sem_Ch4 is\n                   Next_Actual (Actual);\n                   Next_Formal (Formal);\n \n+               --  A current instance used as an actual of a function,\n+               --  whose body has not been seen, may include a formal\n+               --  whose type is an incomplete view of an enclosing\n+               --  type declaration containing the current call (e.g.\n+               --  in the Expression for a component declaration).\n+\n+               --  In this case, update the signature of the subprogram\n+               --  so the formal has the type of the full view.\n+\n+               elsif Inside_Init_Proc\n+                 and then Nkind (Actual) = N_Identifier\n+                 and then Ekind (Etype (Formal)) = E_Incomplete_Type\n+                 and then Etype (Actual) = Full_View (Etype (Formal))\n+               then\n+                  Set_Etype (Formal, Etype (Actual));\n+                  Next_Actual (Actual);\n+                  Next_Formal (Formal);\n+\n                --  Handle failed type check\n \n                else"}, {"sha": "acd2f2f3d387e41f68dbb1412f3de495afb6459b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f26ff11b688e3cec00da85b13f6f33e23fc7410/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f26ff11b688e3cec00da85b13f6f33e23fc7410/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1f26ff11b688e3cec00da85b13f6f33e23fc7410", "patch": "@@ -16680,7 +16680,18 @@ package body Sem_Util is\n                           | N_Private_Type_Declaration\n                           | N_Subtype_Declaration\n               and then Comes_From_Source (P)\n-              and then Defining_Entity (P) = Typ\n+\n+              --  If the type has a previous incomplete declaration, the\n+              --  reference in the type definition may have the incomplete\n+              --  view. So, here we detect if this incomplete view is a current\n+              --  instance by checking if its full view is the entity of the\n+              --  full declaration begin analyzed.\n+\n+              and then\n+                (Defining_Entity (P) = Typ\n+                  or else\n+                   (Ekind (Typ) = E_Incomplete_Type\n+                     and then Full_View (Typ) = Defining_Entity (P)))\n             then\n                return True;\n "}]}