{"sha": "eb996a4ac9d4abe017e094872f638ecee872c2cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI5OTZhNGFjOWQ0YWJlMDE3ZTA5NDg3MmY2MzhlY2VlODcyYzJjYg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2007-04-28T00:07:40Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2007-04-28T00:07:40Z"}, "message": "re PR target/31701 (SH: wrong epilogue for sibling calls)\n\n\tPR target/31701\n\t* config/sh/sh.c (output_stack_adjust): Avoid using the frame\n\tregister itself to hold the offset constant.  Tell flow the use\n\tof r4 and r5 when they are used.\n\nFrom-SVN: r124248", "tree": {"sha": "0ddbb1979b558e1cfe35d3ccf0e84d85dc7fac57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ddbb1979b558e1cfe35d3ccf0e84d85dc7fac57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb996a4ac9d4abe017e094872f638ecee872c2cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb996a4ac9d4abe017e094872f638ecee872c2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb996a4ac9d4abe017e094872f638ecee872c2cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb996a4ac9d4abe017e094872f638ecee872c2cb/comments", "author": null, "committer": null, "parents": [{"sha": "805ea2f32d7d203204992a11d436a4221872ec9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805ea2f32d7d203204992a11d436a4221872ec9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/805ea2f32d7d203204992a11d436a4221872ec9e"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "bd61b8ee3445efaa93350a5d9e06d285eb36443a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb996a4ac9d4abe017e094872f638ecee872c2cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb996a4ac9d4abe017e094872f638ecee872c2cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb996a4ac9d4abe017e094872f638ecee872c2cb", "patch": "@@ -1,3 +1,10 @@\n+2007-04-27  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/31701\n+\t* config/sh/sh.c (output_stack_adjust): Avoid using the frame\n+\tregister itself to hold the offset constant.  Tell flow the use\n+\tof r4 and r5 when they are used.\n+\n 2007-04-27  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c (forward_propagate_into_cond): Keep track"}, {"sha": "ffa25095eb43c27e66c6ac0f64f3dcbcce58c1b7", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb996a4ac9d4abe017e094872f638ecee872c2cb/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb996a4ac9d4abe017e094872f638ecee872c2cb/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=eb996a4ac9d4abe017e094872f638ecee872c2cb", "patch": "@@ -5619,7 +5619,13 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \t      temp = scavenge_reg (&temps);\n \t    }\n \t  if (temp < 0 && live_regs_mask)\n-\t    temp = scavenge_reg (live_regs_mask);\n+\t    {\n+\t      HARD_REG_SET temps;\n+\n+\t      COPY_HARD_REG_SET (temps, *live_regs_mask);\n+\t      CLEAR_HARD_REG_BIT (temps, REGNO (reg));\n+\t      temp = scavenge_reg (&temps);\n+\t    }\n \t  if (temp < 0)\n \t    {\n \t      rtx adj_reg, tmp_reg, mem;\n@@ -5668,6 +5674,9 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \t      emit_move_insn (adj_reg, mem);\n \t      mem = gen_tmp_stack_mem (Pmode, gen_rtx_POST_INC (Pmode, reg));\n \t      emit_move_insn (tmp_reg, mem);\n+\t      /* Tell flow the insns that pop r4/r5 aren't dead.  */\n+\t      emit_insn (gen_rtx_USE (VOIDmode, tmp_reg));\n+\t      emit_insn (gen_rtx_USE (VOIDmode, adj_reg));\n \t      return;\n \t    }\n \t  const_reg = gen_rtx_REG (GET_MODE (reg), temp);"}]}