{"sha": "f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJmMDhiZTdlYTEzYjc1NjMyZjFlY2RkZGJlZmI5MjhiOGZjMGZlNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-11-20T20:59:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-11-20T20:59:19Z"}, "message": "re PR libstdc++/49204 ([C++0x] remaining issues in <future>)\n\n\tPR libstdc++/49204\n\t* include/std/future (__future_base::_State_base): Rename to\n\t__future_base::_State_baseV2.\n\t(__future_base::_State_baseV2::~_State_baseV2): Define as defaulted.\n\t(__future_base::_State_baseV2::_M_run_deferred): Rename to\n\t_M_complete_async.\n\t(__future_base::_State_baseV2::_M_has_deferred): Add new virtual.\n\t(__future_base::_State_baseV2::wait_for): Call _M_has_deferred() to\n\ttest for a deferred function, or call _M_complete_async() to join an\n\tasync thread that has made the shared state ready.\n\t(__future_base::_State_baseV2::wait_until): Likewise.\n\t(__future_base::_Async_state_common): Rename to _Async_state_commonV2.\n\t(__future_base::_Async_state_commonV2::_M_run_deferred): Rename to\n\t_M_complete_async.\n\t* src/c++11/compatibility-thread-c++0x.cc (__future_base::_State_base):\n\tExport old definition.\n\t(__future_base::_Async_state_common): Likewise.\n\t* src/c++11/future.cc (__future_base::_State_base::~_State_base):\n\tRemove.\n\t* doc/xml/manual/status_cxx2011.xml: Update status.\n\t* testsuite/30_threads/async/async.cc: Test future_status::timeout\n\tand future_status::ready.\n\t* testsuite/30_threads/async/sync.cc: Test future_status::deferred.\n\nFrom-SVN: r205144", "tree": {"sha": "52b3906db49c694dccf669aa2f545f7476b715f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52b3906db49c694dccf669aa2f545f7476b715f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2d0d374f69a87cde1a18bbcf197ff45168764fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d0d374f69a87cde1a18bbcf197ff45168764fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2d0d374f69a87cde1a18bbcf197ff45168764fa"}], "stats": {"total": 202, "additions": 160, "deletions": 42}, "files": [{"sha": "c1e20c2c8e46e553f2a2cb9505bc934b506964b0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "patch": "@@ -4,6 +4,30 @@\n \t* include/ext/pointer.h (pointer_traits<>::rebind<>): Add template\n \tkeyword in nested name.\n \n+\tPR libstdc++/49204\n+\t* include/std/future (__future_base::_State_base): Rename to\n+\t__future_base::_State_baseV2.\n+\t(__future_base::_State_baseV2::~_State_baseV2): Define as defaulted.\n+\t(__future_base::_State_baseV2::_M_run_deferred): Rename to\n+\t_M_complete_async.\n+\t(__future_base::_State_baseV2::_M_has_deferred): Add new virtual.\n+\t(__future_base::_State_baseV2::wait_for): Call _M_has_deferred() to\n+\ttest for a deferred function, or call _M_complete_async() to join an\n+\tasync thread that has made the shared state ready.\n+\t(__future_base::_State_baseV2::wait_until): Likewise.\n+\t(__future_base::_Async_state_common): Rename to _Async_state_commonV2.\n+\t(__future_base::_Async_state_commonV2::_M_run_deferred): Rename to\n+\t_M_complete_async.\n+\t* src/c++11/compatibility-thread-c++0x.cc (__future_base::_State_base):\n+\tExport old definition.\n+\t(__future_base::_Async_state_common): Likewise.\n+\t* src/c++11/future.cc (__future_base::_State_base::~_State_base):\n+\tRemove.\n+\t* doc/xml/manual/status_cxx2011.xml: Update status.\n+\t* testsuite/30_threads/async/async.cc: Test future_status::timeout\n+\tand future_status::ready.\n+\t* testsuite/30_threads/async/sync.cc: Test future_status::deferred.\n+\n 2013-11-20  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* testsuite/17_intro/static.cc: Ignore AIX TOC reload warnings."}, {"sha": "bda8a79a30df8eae1367a8965b29a5dafc27c0e7", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "patch": "@@ -2503,18 +2503,16 @@ particular release.\n       <entry>Missing set_*_at_thread_exit</entry>\n     </row>\n     <row>\n-      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry>30.6.6</entry>\n       <entry>Class template <code>future</code></entry>\n-      <entry>Partial</entry>\n-      <entry>Timed waiting functions do not return future_status::deferred</entry>\n+      <entry>Y</entry>\n+      <entry/>\n     </row>\n     <row>\n-      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry>30.6.7</entry>\n       <entry>Class template <code>shared_future</code></entry>\n-      <entry>Partial</entry>\n-      <entry>Timed waiting functions do not return future_status::deferred</entry>\n+      <entry>Y</entry>\n+      <entry/>\n     </row>\n     <row>\n       <entry>30.6.8</entry>"}, {"sha": "b37578600d90da17377d2a2cc83f4cb6205d47c4", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 57, "deletions": 27, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "patch": "@@ -298,7 +298,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /// Base class for state between a promise and one or more\n     /// associated futures.\n-    class _State_base\n+    class _State_baseV2\n     {\n       typedef _Ptr<_Result_base> _Ptr_type;\n \n@@ -309,15 +309,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       once_flag\t\t\t_M_once;\n \n     public:\n-      _State_base() noexcept : _M_result(), _M_retrieved(ATOMIC_FLAG_INIT) { }\n-      _State_base(const _State_base&) = delete;\n-      _State_base& operator=(const _State_base&) = delete;\n-      virtual ~_State_base();\n+      _State_baseV2() noexcept : _M_result(), _M_retrieved(ATOMIC_FLAG_INIT)\n+\t{ }\n+      _State_baseV2(const _State_baseV2&) = delete;\n+      _State_baseV2& operator=(const _State_baseV2&) = delete;\n+      virtual ~_State_baseV2() = default;\n \n       _Result_base&\n       wait()\n       {\n-\t_M_run_deferred();\n+\t_M_complete_async();\n \tunique_lock<mutex> __lock(_M_mutex);\n \t_M_cond.wait(__lock, [&] { return _M_ready(); });\n \treturn *_M_result;\n@@ -328,8 +329,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         wait_for(const chrono::duration<_Rep, _Period>& __rel)\n         {\n \t  unique_lock<mutex> __lock(_M_mutex);\n-\t  if (_M_cond.wait_for(__lock, __rel, [&] { return _M_ready(); }))\n+\t  if (_M_ready())\n \t    return future_status::ready;\n+\t  if (_M_has_deferred())\n+\t    return future_status::deferred;\n+\t  if (_M_cond.wait_for(__lock, __rel, [&] { return _M_ready(); }))\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 2100.  timed waiting functions must also join\n+\t      _M_complete_async();\n+\t      return future_status::ready;\n+\t    }\n \t  return future_status::timeout;\n \t}\n \n@@ -338,8 +348,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         wait_until(const chrono::time_point<_Clock, _Duration>& __abs)\n         {\n \t  unique_lock<mutex> __lock(_M_mutex);\n-\t  if (_M_cond.wait_until(__lock, __abs, [&] { return _M_ready(); }))\n+\t  if (_M_ready())\n \t    return future_status::ready;\n+\t  if (_M_has_deferred())\n+\t    return future_status::deferred;\n+\t  if (_M_cond.wait_until(__lock, __abs, [&] { return _M_ready(); }))\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 2100.  timed waiting functions must also join\n+\t      _M_complete_async();\n+\t      return future_status::ready;\n+\t    }\n \t  return future_status::timeout;\n \t}\n \n@@ -349,7 +368,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         bool __set = __ignore_failure;\n         // all calls to this function are serialized,\n         // side-effects of invoking __res only happen once\n-        call_once(_M_once, &_State_base::_M_do_set, this, ref(__res),\n+        call_once(_M_once, &_State_baseV2::_M_do_set, this, ref(__res),\n             ref(__set));\n         if (!__set)\n           __throw_future_error(int(future_errc::promise_already_satisfied));\n@@ -393,7 +412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n           typename promise<_Res>::_Ptr_type operator()()\n           {\n-            _State_base::_S_check(_M_promise->_M_future);\n+            _State_baseV2::_S_check(_M_promise->_M_future);\n             _M_promise->_M_storage->_M_set(_M_arg);\n             return std::move(_M_promise->_M_storage);\n           }\n@@ -407,7 +426,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         {\n           typename promise<_Res>::_Ptr_type operator()()\n           {\n-            _State_base::_S_check(_M_promise->_M_future);\n+            _State_baseV2::_S_check(_M_promise->_M_future);\n             _M_promise->_M_storage->_M_set(std::move(_M_arg));\n             return std::move(_M_promise->_M_storage);\n           }\n@@ -423,7 +442,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         {\n           typename promise<_Res>::_Ptr_type operator()()\n           {\n-            _State_base::_S_check(_M_promise->_M_future);\n+            _State_baseV2::_S_check(_M_promise->_M_future);\n             _M_promise->_M_storage->_M_error = _M_ex;\n             return std::move(_M_promise->_M_storage);\n           }\n@@ -472,15 +491,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool _M_ready() const noexcept { return static_cast<bool>(_M_result); }\n \n-      // Misnamed: waits for completion of async function.\n-      virtual void _M_run_deferred() { }\n+      // Wait for completion of async function.\n+      virtual void _M_complete_async() { }\n+\n+      // Return true if state contains a deferred function.\n+      virtual bool _M_has_deferred() const { return false; }\n     };\n \n+#ifdef _GLIBCXX_ASYNC_ABI_COMPAT\n+    class _State_base;\n+    class _Async_state_common;\n+#else\n+    using _State_base = _State_baseV2;\n+    class _Async_state_commonV2;\n+#endif\n+\n     template<typename _BoundFn, typename = typename _BoundFn::result_type>\n       class _Deferred_state;\n \n-    class _Async_state_common;\n-\n     template<typename _BoundFn, typename = typename _BoundFn::result_type>\n       class _Async_state_impl;\n \n@@ -538,6 +566,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void _M_destroy() { delete this; }\n     };\n \n+#ifndef _GLIBCXX_ASYNC_ABI_COMPAT\n \n   /// Common implementation for future and shared_future.\n   template<typename _Res>\n@@ -1439,26 +1468,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Ptr_type _M_result;\n       _BoundFn _M_fn;\n \n+      // Run the deferred function.\n       virtual void\n-      _M_run_deferred()\n+      _M_complete_async()\n       {\n         // safe to call multiple times so ignore failure\n         _M_set_result(_S_task_setter(_M_result, _M_fn), true);\n       }\n+\n+      virtual bool\n+      _M_has_deferred() const { return static_cast<bool>(_M_result); }\n     };\n \n-  class __future_base::_Async_state_common : public __future_base::_State_base\n+  class __future_base::_Async_state_commonV2\n+    : public __future_base::_State_base\n   {\n   protected:\n-#ifdef _GLIBCXX_ASYNC_ABI_COMPAT\n-    ~_Async_state_common();\n-#else\n-    ~_Async_state_common() = default;\n-#endif\n+    ~_Async_state_commonV2() = default;\n \n-    // Allow non-timed waiting functions to block until the thread completes,\n-    // as if joined.\n-    virtual void _M_run_deferred() { _M_join(); }\n+    // Make waiting functions block until the thread completes, as if joined.\n+    virtual void _M_complete_async() { _M_join(); }\n \n     void _M_join() { std::call_once(_M_once, &thread::join, ref(_M_thread)); }\n \n@@ -1468,7 +1497,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _BoundFn, typename _Res>\n     class __future_base::_Async_state_impl final\n-    : public __future_base::_Async_state_common\n+    : public __future_base::_Async_state_commonV2\n     {\n     public:\n       explicit\n@@ -1536,6 +1565,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::forward<_Args>(__args)...);\n     }\n \n+#endif // _GLIBCXX_ASYNC_ABI_COMPAT\n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n        // && ATOMIC_INT_LOCK_FREE\n "}, {"sha": "bec7a2b6a6496f29a738327a37e57b05e7719b0c", "filename": "libstdc++-v3/src/c++11/compatibility-thread-c++0x.cc", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc?ref=f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "patch": "@@ -23,7 +23,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <bits/c++config.h>\n-#if defined(_GLIBCXX_HAVE_TLS) && defined(_GLIBCXX_SHARED)\n+#if defined(_GLIBCXX_SHARED)\n #define _GLIBCXX_ASYNC_ABI_COMPAT\n #endif\n \n@@ -78,20 +78,49 @@ _GLIBCXX_ASM_SYMVER(_ZN9__gnu_cxx11try_to_lockE, _ZSt11try_to_lock, GLIBCXX_3.4.\n \n \n // XXX GLIBCXX_ABI Deprecated\n-// gcc-4.7.0\n+// gcc-4.7.0, gcc-4.9.0\n // <future> export changes\n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1) \\\n   && (ATOMIC_INT_LOCK_FREE > 1)\n-#if defined(_GLIBCXX_HAVE_TLS) && defined(_GLIBCXX_SHARED)\n+#if defined(_GLIBCXX_SHARED)\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  // Replaced by _State_baseV2 in gcc-4.9.0\n+  class __future_base::_State_base\n+  {\n+    typedef _Ptr<_Result_base> _Ptr_type;\n+\n+    _Ptr_type\t\t\t_M_result;\n+    mutex               \t_M_mutex;\n+    condition_variable  \t_M_cond;\n+    atomic_flag         \t_M_retrieved;\n+    once_flag\t\t\t_M_once;\n+  public:\n+    virtual ~_State_base();\n+    virtual void _M_run_deferred() { }\n+  };\n+  __future_base::_State_base::~_State_base() { }\n+\n+  // Replaced by _Async_state_commonV2 in gcc-4.9.0\n+  class __future_base::_Async_state_common : public __future_base::_State_base\n+  {\n+  protected:\n+    ~_Async_state_common();\n+    virtual void _M_run_deferred() { _M_join(); }\n+    void _M_join() { std::call_once(_M_once, &thread::join, ref(_M_thread)); }\n+    thread _M_thread;\n+    once_flag _M_once;\n+  };\n+#if defined(_GLIBCXX_HAVE_TLS)\n+  // Replaced with inline definition in gcc-4.8.0\n   __future_base::_Async_state_common::~_Async_state_common() { _M_join(); }\n \n   // Explicit instantiation due to -fno-implicit-instantiation.\n   template void call_once(once_flag&, void (thread::*&&)(), reference_wrapper<thread>&&);\n   template _Bind_simple_helper<void (thread::*)(), reference_wrapper<thread>>::__type __bind_simple(void (thread::*&&)(), reference_wrapper<thread>&&);\n+#endif // _GLIBCXX_HAVE_TLS\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n-#endif\n+#endif // _GLIBCXX_SHARED\n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "e253ac3cee9b7f02fe98f7e53e3f27a6af2629c1", "filename": "libstdc++-v3/src/c++11/future.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc?ref=f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "patch": "@@ -82,8 +82,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   __future_base::_Result_base::_Result_base() = default;\n \n   __future_base::_Result_base::~_Result_base() = default;\n-\n-  __future_base::_State_base::~_State_base() = default;\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "1f94494d0a3374f0d954707cbc5817eb70cb52db", "filename": "libstdc++-v3/testsuite/30_threads/async/async.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc?ref=f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "patch": "@@ -39,19 +39,38 @@ struct work {\n };\n \n void test01()\n+{\n+  mutex m;\n+  condition_variable cv;\n+  unique_lock<mutex> l(m);\n+  future<void> f1 = async(launch::async, work(), ref(m), ref(cv));\n+  cv.wait(l);\n+  f1.get();\n+}\n+\n+void test02()\n {\n   bool test __attribute__((unused)) = true;\n \n   mutex m;\n   condition_variable cv;\n   unique_lock<mutex> l(m);\n   future<void> f1 = async(launch::async, work(), ref(m), ref(cv));\n+  std::future_status status;\n+  status = f1.wait_for(std::chrono::milliseconds(1));\n+  VERIFY( status == std::future_status::timeout );\n+  status = f1.wait_until(std::chrono::system_clock::now());\n+  VERIFY( status == std::future_status::timeout );\n   cv.wait(l);\n-  f1.get();\n+  status = f1.wait_for(std::chrono::milliseconds(0));\n+  VERIFY( status == std::future_status::ready );\n+  status = f1.wait_until(std::chrono::system_clock::now());\n+  VERIFY( status == std::future_status::ready );\n }\n \n int main()\n {\n   test01();\n+  test02();\n   return 0;\n }"}, {"sha": "3e9cd34cd55a965de43d33ada57e81c0db7df2dc", "filename": "libstdc++-v3/testsuite/30_threads/async/sync.cc", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fsync.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fsync.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fsync.cc?ref=f2f08be7ea13b75632f1ecdddbefb928b8fc0fe4", "patch": "@@ -39,12 +39,32 @@ void test01()\n   using namespace std;\n \n   int a = 1;\n-  int b = 10;\n-  int c = 100;\n+  int b = 1;\n+  int c = 1;\n   future<int> f1 = async(launch::deferred, sum(), a, ref(b), cref(c));\n+  a = 0;\n+  b = 10;\n+  c = 100;\n+\n+  const std::chrono::seconds delay(10);\n+  const auto then = std::chrono::system_clock::now() + delay;\n \n   VERIFY( f1.valid() );\n+  // timed waiting functions should return 'deferred' immediately\n+  VERIFY( f1.wait_until(then) == std::future_status::deferred );\n+  VERIFY( f1.wait_for(delay) == std::future_status::deferred );\n+  VERIFY( std::chrono::system_clock::now() < then );\n+\n+  f1.wait();\n+\n+  VERIFY( f1.valid() );\n+  // timed waiting functions should return 'ready' immediately\n+  VERIFY( f1.wait_until(then) == std::future_status::ready );\n+  VERIFY( f1.wait_for(delay) == std::future_status::ready );\n+  VERIFY( std::chrono::system_clock::now() < then );\n+\n   VERIFY( f1.get() == 111 );\n+  VERIFY( !f1.valid() );\n }\n \n int main()"}]}