{"sha": "e7a0af84d68f50b65dffa1af462d10bd4bf03939", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdhMGFmODRkNjhmNTBiNjVkZmZhMWFmNDYyZDEwYmQ0YmYwMzkzOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-19T21:11:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-19T21:11:39Z"}, "message": "libstdc++: Implement std::make_unique_for_overwrite\n\nThis is the std::unique_ptr part of P1020R1 (as amended by P1973R1) for\nC++20. The std::shared_ptr part still needs to be done.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/unique_ptr.h (make_unique_for_overwrite): Define\n\tfor C++20.\n\t* testsuite/20_util/unique_ptr/creation/array_neg.cc: Remove\n\tunused header. Adjust standard reference.\n\t* testsuite/20_util/unique_ptr/creation/for_overwrite.cc: New test.\n\t* testsuite/20_util/unique_ptr/creation/for_overwrite__neg.cc: New test.", "tree": {"sha": "ad0aa318c41652ae2c9a474134733f37331316e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad0aa318c41652ae2c9a474134733f37331316e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7a0af84d68f50b65dffa1af462d10bd4bf03939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a0af84d68f50b65dffa1af462d10bd4bf03939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a0af84d68f50b65dffa1af462d10bd4bf03939", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a0af84d68f50b65dffa1af462d10bd4bf03939/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "badeac77f55276d047b3cc202e4ddd49ba643d8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/badeac77f55276d047b3cc202e4ddd49ba643d8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/badeac77f55276d047b3cc202e4ddd49ba643d8a"}], "stats": {"total": 124, "additions": 121, "deletions": 3}, "files": [{"sha": "252ea89917b0328847450733b56eec9982a769e6", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a0af84d68f50b65dffa1af462d10bd4bf03939/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a0af84d68f50b65dffa1af462d10bd4bf03939/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=e7a0af84d68f50b65dffa1af462d10bd4bf03939", "patch": "@@ -969,8 +969,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Disable std::make_unique for arrays of known bound\n   template<typename _Tp, typename... _Args>\n-    inline typename _MakeUniq<_Tp>::__invalid_type\n+    typename _MakeUniq<_Tp>::__invalid_type\n     make_unique(_Args&&...) = delete;\n+\n+#if __cplusplus > 201703L\n+  /// std::make_unique_for_overwrite for single objects\n+  template<typename _Tp>\n+    inline typename _MakeUniq<_Tp>::__single_object\n+    make_unique_for_overwrite()\n+    { return unique_ptr<_Tp>(new _Tp); }\n+\n+  /// std::make_unique_for_overwrite for arrays of unknown bound\n+  template<typename _Tp>\n+    inline typename _MakeUniq<_Tp>::__array\n+    make_unique_for_overwrite(size_t __n)\n+    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__n]); }\n+\n+  /// Disable std::make_unique_for_overwrite for arrays of known bound\n+  template<typename _Tp, typename... _Args>\n+    typename _MakeUniq<_Tp>::__invalid_type\n+    make_unique_for_overwrite(_Args&&...) = delete;\n+#endif // C++20\n+\n   // @} relates unique_ptr\n #endif // C++14\n "}, {"sha": "a76cacb103139bfba91e59faee0b4e0fe4f03593", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/creation/array_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a0af84d68f50b65dffa1af462d10bd4bf03939/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Farray_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a0af84d68f50b65dffa1af462d10bd4bf03939/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Farray_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Farray_neg.cc?ref=e7a0af84d68f50b65dffa1af462d10bd4bf03939", "patch": "@@ -17,10 +17,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 20.9.1.4 unique_ptr creation [unique.ptr.create]\n+// C++14 20.8.1.4 unique_ptr creation [unique.ptr.create]\n \n #include <memory>\n-#include <testsuite_hooks.h>\n \n struct A { };\n "}, {"sha": "e7231c2ac95fe9707ae138ebfb7d57e3c649f8cd", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/creation/for_overwrite.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a0af84d68f50b65dffa1af462d10bd4bf03939/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Ffor_overwrite.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a0af84d68f50b65dffa1af462d10bd4bf03939/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Ffor_overwrite.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Ffor_overwrite.cc?ref=e7a0af84d68f50b65dffa1af462d10bd4bf03939", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++20 20.11.1.5 unique_ptr creation [unique.ptr.create]\n+\n+#include <memory>\n+#include <cstdlib>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+void* operator new(std::size_t n)\n+{\n+  void* p = std::malloc(n);\n+  std::memset(p, 0xaa, n);\n+  return p;\n+}\n+\n+void operator delete(void* p) { std::free(p); }\n+void operator delete(void* p, std::size_t) { std::free(p); }\n+\n+void\n+test01()\n+{\n+  std::unique_ptr<int> a = std::make_unique_for_overwrite<int>();\n+  VERIFY( a != nullptr );\n+  unsigned char buf[sizeof(int)];\n+  std::memcpy(buf, a.get(), sizeof(buf));\n+  for (unsigned char c : buf)\n+    VERIFY( c == 0xaa );\n+}\n+\n+void\n+test02()\n+{\n+  std::unique_ptr<int[]> a = std::make_unique_for_overwrite<int[]>(3);\n+  VERIFY( a != nullptr );\n+  unsigned char buf[3 * sizeof(int)];\n+  std::memcpy(buf, a.get(), sizeof(buf));\n+  for (unsigned char c : buf)\n+    VERIFY( c == 0xaa );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "3571ae244a6e3ed00ca8a80557ed09384868e56d", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/creation/for_overwrite__neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a0af84d68f50b65dffa1af462d10bd4bf03939/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Ffor_overwrite__neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a0af84d68f50b65dffa1af462d10bd4bf03939/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Ffor_overwrite__neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Ffor_overwrite__neg.cc?ref=e7a0af84d68f50b65dffa1af462d10bd4bf03939", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++20 20.11.1.5 unique_ptr creation [unique.ptr.create]\n+\n+#include <memory>\n+\n+struct A { };\n+\n+auto p1 = std::make_unique_for_overwrite<A>(1);   // { dg-error \"no matching function\" }\n+auto p1 = std::make_unique_for_overwrite<A[]>();  // { dg-error \"no matching function\" }\n+auto p2 = std::make_unique_for_overwrite<A[]>(1, 2); // { dg-error \"no matching function\" }\n+auto p3 = std::make_unique_for_overwrite<A[1]>(); // { dg-error \"deleted\" }\n+auto p4 = std::make_unique_for_overwrite<A[1]>(1);// { dg-error \"deleted\" }\n+\n+// { dg-prune-output \"declared here\" }\n+// { dg-prune-output \"no type named\" }"}]}