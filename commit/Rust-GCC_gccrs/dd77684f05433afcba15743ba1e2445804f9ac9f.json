{"sha": "dd77684f05433afcba15743ba1e2445804f9ac9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ3NzY4NGYwNTQzM2FmY2JhMTU3NDNiYTFlMjQ0NTgwNGY5YWM5Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-02T16:46:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-02T16:46:10Z"}, "message": "re PR rtl-optimization/70467 (Useless \"and [esp],-1\" emitted on AND with uint64_t variable)\n\n\tPR rtl-optimization/70467\n\t* cse.c (cse_insn): Handle no-op MEM moves after folding.\n\n\t* gcc.target/i386/pr70467-1.c: New test.\n\nFrom-SVN: r235765", "tree": {"sha": "5f22241d45864ce8739e25506d2dd7036092c783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f22241d45864ce8739e25506d2dd7036092c783"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd77684f05433afcba15743ba1e2445804f9ac9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd77684f05433afcba15743ba1e2445804f9ac9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd77684f05433afcba15743ba1e2445804f9ac9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd77684f05433afcba15743ba1e2445804f9ac9f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d40790c8ac4f81026252a119e11a104ffd49701f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40790c8ac4f81026252a119e11a104ffd49701f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40790c8ac4f81026252a119e11a104ffd49701f"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "a5339da2527fd73008aa4205c208ccd791894ce2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd77684f05433afcba15743ba1e2445804f9ac9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd77684f05433afcba15743ba1e2445804f9ac9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd77684f05433afcba15743ba1e2445804f9ac9f", "patch": "@@ -1,5 +1,8 @@\n 2016-05-02  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/70467\n+\t* cse.c (cse_insn): Handle no-op MEM moves after folding.\n+\n \tPR rtl-optimization/70467\n \t* ipa-pure-const.c (check_call): Handle internal calls even in\n \tipa mode like in local mode."}, {"sha": "7456e84c3294c31f25bfa5464e352cbb056ca1e1", "filename": "gcc/cse.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd77684f05433afcba15743ba1e2445804f9ac9f/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd77684f05433afcba15743ba1e2445804f9ac9f/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=dd77684f05433afcba15743ba1e2445804f9ac9f", "patch": "@@ -4575,6 +4575,7 @@ cse_insn (rtx_insn *insn)\n   for (i = 0; i < n_sets; i++)\n     {\n       bool repeat = false;\n+      bool mem_noop_insn = false;\n       rtx src, dest;\n       rtx src_folded;\n       struct table_elt *elt = 0, *p;\n@@ -5166,7 +5167,7 @@ cse_insn (rtx_insn *insn)\n \t    }\n \n \t  /* Avoid creation of overlapping memory moves.  */\n-\t  if (MEM_P (trial) && MEM_P (SET_DEST (sets[i].rtl)))\n+\t  if (MEM_P (trial) && MEM_P (dest) && !rtx_equal_p (trial, dest))\n \t    {\n \t      rtx src, dest;\n \n@@ -5277,6 +5278,21 @@ cse_insn (rtx_insn *insn)\n \t      break;\n \t    }\n \n+\t  /* Similarly, lots of targets don't allow no-op\n+\t     (set (mem x) (mem x)) moves.  */\n+\t  else if (n_sets == 1\n+\t\t   && MEM_P (trial)\n+\t\t   && MEM_P (dest)\n+\t\t   && rtx_equal_p (trial, dest)\n+\t\t   && !side_effects_p (dest)\n+\t\t   && (cfun->can_delete_dead_exceptions\n+\t\t       || insn_nothrow_p (insn)))\n+\t    {\n+\t      SET_SRC (sets[i].rtl) = trial;\n+\t      mem_noop_insn = true;\n+\t      break;\n+\t    }\n+\n \t  /* Reject certain invalid forms of CONST that we create.  */\n \t  else if (CONSTANT_P (trial)\n \t\t   && GET_CODE (trial) == CONST\n@@ -5495,6 +5511,16 @@ cse_insn (rtx_insn *insn)\n \t  sets[i].rtl = 0;\n \t}\n \n+      /* Similarly for no-op MEM moves.  */\n+      else if (mem_noop_insn)\n+\t{\n+\t  if (cfun->can_throw_non_call_exceptions && can_throw_internal (insn))\n+\t    cse_cfg_altered = true;\n+\t  delete_insn_and_edges (insn);\n+\t  /* No more processing for this set.  */\n+\t  sets[i].rtl = 0;\n+\t}\n+\n       /* If this SET is now setting PC to a label, we know it used to\n \t be a conditional or computed branch.  */\n       else if (dest == pc_rtx && GET_CODE (src) == LABEL_REF"}, {"sha": "328a9a5f056052a5a9e7fc10c7be46a7d3f1bd1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd77684f05433afcba15743ba1e2445804f9ac9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd77684f05433afcba15743ba1e2445804f9ac9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd77684f05433afcba15743ba1e2445804f9ac9f", "patch": "@@ -1,3 +1,8 @@\n+2016-05-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/70467\n+\t* gcc.target/i386/pr70467-1.c: New test.\n+\n 2016-05-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gcc.dg/spec-options.c: Run the test on all targets."}, {"sha": "4e112c88d07bc40582d947d05429d41596f8d5e5", "filename": "gcc/testsuite/gcc.target/i386/pr70467-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd77684f05433afcba15743ba1e2445804f9ac9f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70467-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd77684f05433afcba15743ba1e2445804f9ac9f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70467-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70467-1.c?ref=dd77684f05433afcba15743ba1e2445804f9ac9f", "patch": "@@ -0,0 +1,55 @@\n+/* PR rtl-optimization/70467 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-sse\" } */\n+\n+void foo (unsigned long long *);\n+\n+void\n+bar (void)\n+{\n+  unsigned long long a;\n+  foo (&a);\n+  a &= 0x7fffffffffffffffULL;\n+  foo (&a);\n+  a &= 0xffffffff7fffffffULL;\n+  foo (&a);\n+  a &= 0x7fffffff00000000ULL;\n+  foo (&a);\n+  a &= 0x000000007fffffffULL;\n+  foo (&a);\n+  a &= 0x00000000ffffffffULL;\n+  foo (&a);\n+  a &= 0xffffffff00000000ULL;\n+  foo (&a);\n+  a |= 0x7fffffffffffffffULL;\n+  foo (&a);\n+  a |= 0xffffffff7fffffffULL;\n+  foo (&a);\n+  a |= 0x7fffffff00000000ULL;\n+  foo (&a);\n+  a |= 0x000000007fffffffULL;\n+  foo (&a);\n+  a |= 0x00000000ffffffffULL;\n+  foo (&a);\n+  a |= 0xffffffff00000000ULL;\n+  foo (&a);\n+  a ^= 0x7fffffffffffffffULL;\n+  foo (&a);\n+  a ^= 0xffffffff7fffffffULL;\n+  foo (&a);\n+  a ^= 0x7fffffff00000000ULL;\n+  foo (&a);\n+  a ^= 0x000000007fffffffULL;\n+  foo (&a);\n+  a ^= 0x00000000ffffffffULL;\n+  foo (&a);\n+  a ^= 0xffffffff00000000ULL;\n+  foo (&a);\n+}\n+\n+/* { dg-final { scan-assembler-not \"andl\\[ \\t\\]*.-1,\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"andl\\[ \\t\\]*.0,\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"orl\\[ \\t\\]*.-1,\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"orl\\[ \\t\\]*.0,\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"xorl\\[ \\t\\]*.-1,\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"xorl\\[ \\t\\]*.0,\" { target ia32 } } } */"}]}