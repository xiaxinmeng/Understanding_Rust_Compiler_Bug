{"sha": "eb711c86b329bfa59b2cb1f3c5ec07d1a14f8151", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3MTFjODZiMzI5YmZhNTliMmNiMWYzYzVlYzA3ZDFhMTRmODE1MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-01T00:13:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-01T00:13:20Z"}, "message": "Unify error and message functions:\n\n* toplev.c: Include \"gvarargs.h\".\n(fatal_insn_not_found): Omit superfluous argument to error.\n(vmessage, v_message_with_file_and_line): New functions.\n(v_message_with_decl, file_and_line_for_asm): Likewise.\n(v_error_with_file_and_line, v_error_with_decl): Likewise.\n(v_error_for_asm, verror, vfatal): Likewise.\n(v_warning_with_file_and_line, v_warning_with_decl): Likewise.\n(v_warning_for_asm, vwarning): Likewise.\n(error_with_file_and_line, error_with_decl, error, fatal): Now just wrappers\nfor above functions.\n(error_for_asm, warning_with_file_and_line): Likewise.\n(warning_with_decl, warning_for_asm, warning): Likewise.\n\nFrom-SVN: r6451", "tree": {"sha": "c9d8b465fe21aae649c1676e409789ede65bb310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9d8b465fe21aae649c1676e409789ede65bb310"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb711c86b329bfa59b2cb1f3c5ec07d1a14f8151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb711c86b329bfa59b2cb1f3c5ec07d1a14f8151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb711c86b329bfa59b2cb1f3c5ec07d1a14f8151", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb711c86b329bfa59b2cb1f3c5ec07d1a14f8151/comments", "author": null, "committer": null, "parents": [{"sha": "7ecd5f1a30c8b5c48ed8659b1c7571a3180ea24e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ecd5f1a30c8b5c48ed8659b1c7571a3180ea24e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ecd5f1a30c8b5c48ed8659b1c7571a3180ea24e"}], "stats": {"total": 579, "additions": 426, "deletions": 153}, "files": [{"sha": "c69b23cd73e7b8d6d76472e6908002071c66cfc6", "filename": "gcc/toplev.c", "status": "modified", "additions": 426, "deletions": 153, "changes": 579, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb711c86b329bfa59b2cb1f3c5ec07d1a14f8151/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb711c86b329bfa59b2cb1f3c5ec07d1a14f8151/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=eb711c86b329bfa59b2cb1f3c5ec07d1a14f8151", "patch": "@@ -24,11 +24,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    Error messages and low-level interface to malloc also handled here.  */\n \n #include \"config.h\"\n-#include <sys/types.h>\n+#include \"gvarargs.h\"\n #include <stdio.h>\n #include <signal.h>\n #include <setjmp.h>\n-\n+#include <sys/types.h>\n #include <sys/stat.h>\n \n #ifdef USG\n@@ -900,9 +900,9 @@ fatal_insn_not_found (insn)\n   if (!output_bytecode)\n     {\n       if (INSN_CODE (insn) < 0)\n-\terror (\"internal error--unrecognizable insn:\", 0);\n+\terror (\"internal error--unrecognizable insn:\");\n       else\n-\terror (\"internal error--insn does not satisfy its constraints:\", 0);\n+\terror (\"internal error--insn does not satisfy its constraints:\");\n       debug_rtx (insn);\n     }\n   if (asm_out_file)\n@@ -1029,85 +1029,112 @@ report_error_function (file)\n       last_error_tick = input_file_stack_tick;\n     }\n }\n+\f\n+/* Print a message.  */\n \n-/* Report an error at the current line number.\n-   S is a string and ARGLIST are args for `printf'.  We use HOST_WIDE_INT\n-   as the type for these args assuming it is wide enough to hold a\n-   pointer.  This isn't terribly portable, but is the best we can do\n-   without vprintf universally available.  */\n-\n-#define arglist a1, a2, a3\n-#define arglist_dcl HOST_WIDE_INT a1, a2, a3;\n-\n-void\n-error (s, arglist)\n+static void\n+vmessage (prefix, s, ap)\n+     char *prefix;\n      char *s;\n-     arglist_dcl\n+     va_list ap;\n {\n-  error_with_file_and_line (input_filename, lineno, s, arglist);\n+  if (prefix)\n+    fprintf (stderr, \"%s: \", prefix);\n+\n+#ifdef HAVE_VPRINTF\n+  vfprintf (stderr, s, ap);\n+#else\n+  {\n+    HOST_WIDE_INT v1 = va_arg(ap, HOST_WIDE_INT);\n+    HOST_WIDE_INT v2 = va_arg(ap, HOST_WIDE_INT);\n+    HOST_WIDE_INT v3 = va_arg(ap, HOST_WIDE_INT);\n+    fprintf (stderr, s, v1, v2, v3);\n+  }\n+#endif\n }\n \n-/* Report an error at line LINE of file FILE.\n-   S and ARGLIST are a string and args for `printf'.  */\n+/* Print a message relevant to line LINE of file FILE.  */\n \n-void\n-error_with_file_and_line (file, line, s, arglist)\n+static void\n+v_message_with_file_and_line (file, line, prefix, s, ap)\n      char *file;\n      int line;\n+     char *prefix;\n      char *s;\n-     arglist_dcl\n+     va_list ap;\n {\n-  count_error (0);\n-\n-  report_error_function (file);\n-\n   if (file)\n     fprintf (stderr, \"%s:%d: \", file, line);\n   else\n     fprintf (stderr, \"%s: \", progname);\n-  fprintf (stderr, s, arglist);\n \n-  fprintf (stderr, \"\\n\");\n+  vmessage (prefix, s, ap);\n+  fputc ('\\n', stderr);\n }\n \n-/* Report an error at the declaration DECL.\n-   S and V are a string and an arg which uses %s to substitute\n-   the declaration name.  */\n+/* Print a message relevant to the given DECL.  */\n \n-void\n-error_with_decl (decl, s, v)\n+static void\n+v_message_with_decl (decl, prefix, s, ap)\n      tree decl;\n+     char *prefix;\n      char *s;\n-     HOST_WIDE_INT v;\n+     va_list ap;\n {\n-  char *junk;\n-  count_error (0);\n-\n-  report_error_function (DECL_SOURCE_FILE (decl));\n+  char *n, *p, *junk;\n \n   fprintf (stderr, \"%s:%d: \",\n \t   DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n \n-  if (DECL_NAME (decl))\n-    fprintf (stderr, s, (*decl_printable_name) (decl, &junk), v);\n-  else\n-    fprintf (stderr, s, \"((anonymous))\", v);\n-  fprintf (stderr, \"\\n\");\n+  if (prefix)\n+    fprintf (stderr, \"%s: \", prefix);\n+\n+  /* Do magic to get around lack of varargs support for insertion\n+     of arguments into existing list.  We know that the decl is first;\n+     we ass_u_me that it will be printed with \"%s\".  */\n+\n+  for (p = s; *p; ++p)\n+    {\n+      if (*p == '%')\n+\t{\n+\t  if (*(p + 1) == '%')\n+\t    ++p;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+\n+  if (p > s)\n+    fwrite (s, p - s, 1, stderr);\n+\n+  if (*p == '%')\n+    {\n+      char *n = (DECL_NAME (decl)\n+\t\t ? (*decl_printable_name) (decl, &junk)\n+\t\t : \"((anonymous))\");\n+      fputs (n, stderr);\n+      while (*p)\n+\t{\n+\t  ++p;\n+\t  if (isalpha (*(p - 1) & 0xFF))\n+\t    break;\n+\t}\n+    }\n+\n+  if (*p)\n+    vmessage ((char *)NULL, p, ap);\n+\n+  fputc ('\\n', stderr);\n }\n \n-/* Report an error at the line number of the insn INSN.\n-   S and ARGLIST are a string and args for `printf'.\n-   This is used only when INSN is an `asm' with operands,\n-   and each ASM_OPERANDS records its own source file and line.  */\n+/* Figure file and line of the given INSN.  */\n \n-void\n-error_for_asm (insn, s, arglist)\n+static void\n+file_and_line_for_asm (insn, pfile, pline)\n      rtx insn;\n-     char *s;\n-     arglist_dcl\n+     char **pfile;\n+     int *pline;\n {\n-  char *filename;\n-  int line;\n   rtx body = PATTERN (insn);\n   rtx asmop;\n \n@@ -1122,195 +1149,441 @@ error_for_asm (insn, s, arglist)\n   else if (GET_CODE (body) == PARALLEL\n \t   && GET_CODE (XVECEXP (body, 0, 0)) == ASM_OPERANDS)\n     asmop = XVECEXP (body, 0, 0);\n+  else\n+    asmop = NULL;\n+\n+  if (asmop)\n+    {\n+      *pfile = ASM_OPERANDS_SOURCE_FILE (asmop);\n+      *pline = ASM_OPERANDS_SOURCE_LINE (asmop);\n+    }\n+  else\n+    {\n+      *pfile = input_filename;\n+      *pline = lineno;\n+    }\n+}\n \n-  filename = ASM_OPERANDS_SOURCE_FILE (asmop);\n-  line = ASM_OPERANDS_SOURCE_LINE (asmop);\n+/* Report an error at line LINE of file FILE.  */\n \n-  error_with_file_and_line (filename, line, s, arglist);\n+static void\n+v_error_with_file_and_line (file, line, s, ap)\n+     char *file;\n+     int line;\n+     char *s;\n+     va_list ap;\n+{\n+  count_error (0);\n+  report_error_function (file);\n+  v_message_with_file_and_line (file, line, (char *)NULL, s, ap);\n }\n \n void\n-fatal (s, arglist)\n-     char *s;\n-     arglist_dcl\n+error_with_file_and_line (va_alist)\n+     va_dcl\n+     /* (char *file, int line, char *s, ...) */\n {\n-  error (s, arglist);\n-  exit (34);\n+  va_list ap;\n+  char *file;\n+  int line;\n+  char *s;\n+\n+  va_start (ap);\n+  file = va_arg (ap, char *);\n+  line = va_arg (ap, int);\n+  s = va_arg (ap, char *);\n+  v_error_with_file_and_line (file, line, s, ap);\n+  va_end (ap);\n }\n \n-/* Report a warning at line LINE.\n-   S and ARGLIST are a string and args for `printf'.  */\n+/* Report an error at the declaration DECL.\n+   S is a format string which uses %s to substitute the declaration\n+   name; subsequent substitutions are a la printf.  */\n+\n+static void\n+v_error_with_decl (decl, s, ap)\n+     tree decl;\n+     char *s;\n+     va_list ap;\n+{\n+  count_error (0);\n+  report_error_function (DECL_SOURCE_FILE (decl));\n+  v_message_with_decl (decl, (char *)NULL, s, ap);\n+}\n \n void\n-warning_with_file_and_line (file, line, s, arglist)\n-     char *file;\n-     int line;\n+error_with_decl (va_alist)\n+     va_dcl\n+     /* (tree decl, char *s, ...) */\n+{\n+  va_list ap;\n+  tree decl;\n+  char *s;\n+\n+  va_start (ap);\n+  decl = va_arg (ap, tree);\n+  s = va_arg (ap, char *);\n+  v_error_with_decl (decl, s, ap);\n+  va_end (ap);\n+}\n+\n+/* Report an error at the line number of the insn INSN.\n+   This is used only when INSN is an `asm' with operands,\n+   and each ASM_OPERANDS records its own source file and line.  */\n+\n+static void\n+v_error_for_asm (insn, s, ap)\n+     rtx insn;\n      char *s;\n-     arglist_dcl\n+     va_list ap;\n {\n-  if (count_error (1) == 0)\n-    return;\n+  char *file;\n+  int line;\n \n+  count_error (0);\n+  file_and_line_for_asm (insn, &file, &line);\n   report_error_function (file);\n+  v_message_with_file_and_line (file, line, (char *)NULL, s, ap);\n+}\n \n-  if (file)\n-    fprintf (stderr, \"%s:%d: \", file, line);\n-  else\n-    fprintf (stderr, \"%s: \", progname);\n-\n-  fprintf (stderr, \"warning: \");\n-  fprintf (stderr, s, arglist);\n-  fprintf (stderr, \"\\n\");\n+void\n+error_for_asm (va_alist)\n+     va_dcl\n+     /* (rtx insn, char *s, ...) */\n+{\n+  va_list ap;\n+  rtx insn;\n+  char *s;\n+\n+  va_start (ap);\n+  insn = va_arg (ap, rtx);\n+  s = va_arg (ap, char *);\n+  v_error_for_asm (insn, s, ap);\n+  va_end (ap);\n }\n \n-/* Report a warning at the current line number.\n-   S and ARGLIST are a string and args for `printf'.  */\n+/* Report an error at the current line number.  */\n \n-void\n-warning (s, arglist)\n+static void\n+verror (s, ap)\n      char *s;\n-     arglist_dcl\n+     va_list ap;\n {\n-  warning_with_file_and_line (input_filename, lineno, s, arglist);\n+  v_error_with_file_and_line (input_filename, lineno, s, ap);\n }\n \n-/* Report a warning at the declaration DECL.\n-   S is string which uses %s to substitute the declaration name.\n-   V is a second parameter that S can refer to.  */\n+void\n+error (va_alist)\n+     va_dcl\n+     /* (char *s, ...) */\n+{\n+  va_list ap;\n+  char *s;\n+\n+  va_start (ap);\n+  s = va_arg (ap, char *);\n+  verror (s, ap);\n+  va_end (ap);\n+}\n+\n+/* Report a fatal error at the current line number.  */\n+\n+static void\n+vfatal (s, ap)\n+     char *s;\n+     va_list ap;\n+{\n+  verror (s, ap);\n+  exit (34);\n+}\n \n void\n-warning_with_decl (decl, s, v)\n-     tree decl;\n+fatal (va_alist)\n+     va_dcl\n+     /* (char *s, ...) */\n+{\n+  va_list ap;\n+  char *s;\n+\n+  va_start (ap);\n+  s = va_arg (ap, char *);\n+  vfatal (s, ap);\n+  va_end (ap);\n+}\n+\n+/* Report a warning at line LINE of file FILE.  */\n+\n+static void\n+v_warning_with_file_and_line (file, line, s, ap)\n+     char *file;\n+     int line;\n      char *s;\n-     HOST_WIDE_INT v;\n+     va_list ap;\n {\n-  char *junk;\n+  if (count_error (1))\n+    {\n+      report_error_function (file);\n+      v_message_with_file_and_line (file, line, \"warning\", s, ap);\n+    }\n+}\n \n-  if (count_error (1) == 0)\n-    return;\n+void\n+warning_with_file_and_line (va_alist)\n+     va_dcl\n+     /* (char *file, int line, char *s, ...) */\n+{\n+  va_list ap;\n+  char *file;\n+  int line;\n+  char *s;\n+\n+  va_start (ap);\n+  file = va_arg (ap, char *);\n+  line = va_arg (ap, int);\n+  s = va_arg (ap, char *);\n+  v_warning_with_file_and_line (file, line, s, ap);\n+  va_end (ap);\n+}\n \n-  report_error_function (DECL_SOURCE_FILE (decl));\n+/* Report a warning at the declaration DECL.\n+   S is a format string which uses %s to substitute the declaration\n+   name; subsequent substitutions are a la printf.  */\n \n-  fprintf (stderr, \"%s:%d: \",\n-\t   DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n+static void\n+v_warning_with_decl (decl, s, ap)\n+     tree decl;\n+     char *s;\n+     va_list ap;\n+{\n+  if (count_error (1))\n+    {\n+      report_error_function (DECL_SOURCE_FILE (decl));\n+      v_message_with_decl (decl, \"warning\", s, ap);\n+    }\n+}\n \n-  fprintf (stderr, \"warning: \");\n-  if (DECL_NAME (decl))\n-    fprintf (stderr, s, (*decl_printable_name) (decl, &junk), v);\n-  else\n-    fprintf (stderr, s, \"((anonymous))\", v);\n-  fprintf (stderr, \"\\n\");\n+void\n+warning_with_decl (va_alist)\n+     va_dcl\n+     /* (tree decl, char *s, ...) */\n+{\n+  va_list ap;\n+  tree decl;\n+  char *s;\n+\n+  va_start (ap);\n+  decl = va_arg (ap, tree);\n+  s = va_arg (ap, char *);\n+  v_warning_with_decl (decl, s, ap);\n+  va_end (ap);\n }\n \n /* Report a warning at the line number of the insn INSN.\n-   S and ARGLIST are a string and args for `printf'.\n    This is used only when INSN is an `asm' with operands,\n    and each ASM_OPERANDS records its own source file and line.  */\n \n-void\n-warning_for_asm (insn, s, arglist)\n+static void\n+v_warning_for_asm (insn, s, ap)\n      rtx insn;\n      char *s;\n-     arglist_dcl\n+     va_list ap;\n {\n-  char *filename;\n-  int line;\n-  rtx body = PATTERN (insn);\n-  rtx asmop;\n+  if (count_error (1))\n+    {\n+      char *file;\n+      int line;\n \n-  /* Find the (or one of the) ASM_OPERANDS in the insn.  */\n-  if (GET_CODE (body) == SET && GET_CODE (SET_SRC (body)) == ASM_OPERANDS)\n-    asmop = SET_SRC (body);\n-  else if (GET_CODE (body) == ASM_OPERANDS)\n-    asmop = body;\n-  else if (GET_CODE (body) == PARALLEL\n-\t   && GET_CODE (XVECEXP (body, 0, 0)) == SET)\n-    asmop = SET_SRC (XVECEXP (body, 0, 0));\n-  else if (GET_CODE (body) == PARALLEL\n-\t   && GET_CODE (XVECEXP (body, 0, 0)) == ASM_OPERANDS)\n-    asmop = XVECEXP (body, 0, 0);\n+      file_and_line_for_asm (insn, &file, &line);\n+      report_error_function (file);\n+      v_message_with_file_and_line (file, line, \"warning\", s, ap);\n+    }\n+}\n+\n+void\n+warning_for_asm (va_alist)\n+     va_dcl\n+     /* (rtx insn, char *s, ...) */\n+{\n+  va_list ap;\n+  rtx insn;\n+  char *s;\n+\n+  va_start (ap);\n+  insn = va_arg (ap, rtx);\n+  s = va_arg (ap, char *);\n+  v_warning_for_asm (insn, s, ap);\n+  va_end (ap);\n+}\n+\n+/* Report a warning at the current line number.  */\n+\n+static void\n+vwarning (s, ap)\n+     char *s;\n+     va_list ap;\n+{\n+  v_warning_with_file_and_line (input_filename, lineno, s, ap);\n+}\n \n-  filename = ASM_OPERANDS_SOURCE_FILE (asmop);\n-  line = ASM_OPERANDS_SOURCE_LINE (asmop);\n+void\n+warning (va_alist)\n+     va_dcl\n+{\n+  va_list ap;\n+  char *s;\n \n-  warning_with_file_and_line (filename, line, s, arglist);\n+  va_start (ap);\n+  s = va_arg (ap, char *);\n+  vwarning (s, ap);\n+  va_end (ap);\n }\n-\f\n+\n /* These functions issue either warnings or errors depending on\n    -pedantic-errors.  */\n \n-void\n-pedwarn (s, arglist)\n+static void\n+vpedwarn (s, ap)\n      char *s;\n-     arglist_dcl\n+     va_list ap;\n {\n   if (flag_pedantic_errors)\n-    error (s, arglist);\n+    verror (s, ap);\n   else\n-    warning (s, arglist);\n+    vwarning (s, ap);\n }\n \n void\n-pedwarn_with_decl (decl, s, v)\n+pedwarn (va_alist)\n+     va_dcl\n+     /* (char *s, ...) */\n+{\n+  va_list ap;\n+  char *s;\n+\n+  va_start (ap);\n+  s = va_arg (ap, char *);\n+  vpedwarn (s, ap);\n+  va_end (ap);\n+}\n+\n+static void\n+v_pedwarn_with_decl (decl, s, ap)\n      tree decl;\n      char *s;\n-     HOST_WIDE_INT v;\n+     va_list ap;\n {\n   if (flag_pedantic_errors)\n-    error_with_decl (decl, s, v);\n+    v_error_with_decl (decl, s, ap);\n   else\n-    warning_with_decl (decl, s, v);\n+    v_warning_with_decl (decl, s, ap);\n }\n \n void\n-pedwarn_with_file_and_line (file, line, s, arglist)\n+pedwarn_with_decl (va_alist)\n+     va_dcl\n+     /* (tree decl, char *s, ...) */\n+{\n+  va_list ap;\n+  tree decl;\n+  char *s;\n+\n+  va_start (ap);\n+  decl = va_arg (ap, tree);\n+  s = va_arg (ap, char *);\n+  v_pedwarn_with_decl (decl, s, ap);\n+  va_end (ap);\n+}\n+\n+static void\n+v_pedwarn_with_file_and_line (file, line, s, ap)\n      char *file;\n      int line;\n      char *s;\n-     arglist_dcl\n+     va_list ap;\n {\n   if (flag_pedantic_errors)\n-    error_with_file_and_line (file, line, s, arglist);\n+    v_error_with_file_and_line (file, line, s, ap);\n   else\n-    warning_with_file_and_line (file, line, s, arglist);\n+    v_warning_with_file_and_line (file, line, s, ap);\n }\n \n-/* Apologize for not implementing some feature.\n-   S and ARGLIST are a string and args for `printf'.  */\n-\n void\n-sorry (s, arglist)\n+pedwarn_with_file_and_line (va_alist)\n+     va_dcl\n+     /* (char *file, int line, char *s, ...) */\n+{\n+  va_list ap;\n+  char *file;\n+  int line;\n+  char *s;\n+\n+  va_start (ap);\n+  file = va_arg (ap, char *);\n+  line = va_arg (ap, int);\n+  s = va_arg (ap, char *);\n+  v_pedwarn_with_file_and_line (file, line, s, ap);\n+  va_end (ap);\n+}\n+\n+/* Apologize for not implementing some feature.  */\n+\n+static void\n+vsorry (s, ap)\n      char *s;\n-     arglist_dcl\n+     va_list ap;\n {\n   sorrycount++;\n   if (input_filename)\n     fprintf (stderr, \"%s:%d: \", input_filename, lineno);\n   else\n     fprintf (stderr, \"%s: \", progname);\n+  vmessage (\"sorry, not implemented\", s, ap);\n+  fputc ('\\n', stderr);\n+}\n \n-  fprintf (stderr, \"sorry, not implemented: \");\n-  fprintf (stderr, s, arglist);\n-  fprintf (stderr, \"\\n\");\n+void\n+sorry (va_alist)\n+     va_dcl\n+     /* (char *s, ...) */\n+{\n+  va_list ap;\n+  char *s;\n+\n+  va_start (ap);\n+  s = va_arg (ap, char *);\n+  vsorry (s, ap);\n+  va_end (ap);\n }\n \n-/* Apologize for not implementing some feature, then quit.\n-   S and ARGLIST are a string and args for `printf'.  */\n+/* Apologize for not implementing some feature, then quit.  */\n \n-void\n-really_sorry (s, arglist)\n+static void\n+v_really_sorry (s, ap)\n      char *s;\n-     arglist_dcl\n+     va_list ap;\n {\n+  sorrycount++;\n   if (input_filename)\n     fprintf (stderr, \"%s:%d: \", input_filename, lineno);\n   else\n     fprintf (stderr, \"%s: \", progname);\n-\n-  fprintf (stderr, \"sorry, not implemented: \");\n-  fprintf (stderr, s, arglist);\n+  vmessage (\"sorry, not implemented\", s, ap);\n   fatal (\" (fatal)\\n\");\n }\n+\n+void\n+really_sorry (va_alist)\n+     va_dcl\n+     /* (char *s, ...) */\n+{\n+  va_list ap;\n+  char *s;\n+\n+  va_start (ap);\n+  s = va_arg (ap, char *);\n+  v_really_sorry (s, ap);\n+  va_end (ap);\n+}\n \f\n /* More 'friendly' abort that prints the line and file.\n    config.h can #define abort fancy_abort if you like that sort of thing."}]}