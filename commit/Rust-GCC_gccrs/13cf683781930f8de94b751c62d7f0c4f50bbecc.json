{"sha": "13cf683781930f8de94b751c62d7f0c4f50bbecc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNjZjY4Mzc4MTkzMGY4ZGU5NGI3NTFjNjJkN2YwYzRmNTBiYmVjYw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-11-17T02:51:55Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-11-17T02:51:55Z"}, "message": "lambda-code.c (lambda_loopnest_to_gcc_loopnest): Swap the test when the edge has the opposite meaning...\n\n2004-11-16  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* lambda-code.c (lambda_loopnest_to_gcc_loopnest): Swap\n\tthe test when the edge has the opposite meaning, not when\n\tthe first argument is invariant.\n\nFrom-SVN: r90788", "tree": {"sha": "a69f8c518df4f108376addac249336f3a3c3529d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a69f8c518df4f108376addac249336f3a3c3529d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13cf683781930f8de94b751c62d7f0c4f50bbecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13cf683781930f8de94b751c62d7f0c4f50bbecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13cf683781930f8de94b751c62d7f0c4f50bbecc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13cf683781930f8de94b751c62d7f0c4f50bbecc/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "354ed18fbdb5cc66777bd445463810332ac362c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354ed18fbdb5cc66777bd445463810332ac362c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/354ed18fbdb5cc66777bd445463810332ac362c5"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "1461084c592ffa49f8cd37e702259f04ece2b7e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cf683781930f8de94b751c62d7f0c4f50bbecc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cf683781930f8de94b751c62d7f0c4f50bbecc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13cf683781930f8de94b751c62d7f0c4f50bbecc", "patch": "@@ -1,3 +1,9 @@\n+2004-11-16  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* lambda-code.c (lambda_loopnest_to_gcc_loopnest): Swap\n+\tthe test when the edge has the opposite meaning, not when\n+\tthe first argument is invariant.\n+\n 2004-11-16  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/rs6000.c (rs6000_override_options): Split e500v2"}, {"sha": "96d9798aabd13c30606cfa5f19a066d415a63ea7", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cf683781930f8de94b751c62d7f0c4f50bbecc/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cf683781930f8de94b751c62d7f0c4f50bbecc/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=13cf683781930f8de94b751c62d7f0c4f50bbecc", "patch": "@@ -1867,6 +1867,7 @@ lambda_loopnest_to_gcc_loopnest (struct loop *old_loopnest,\n     {\n       lambda_loop newloop;\n       basic_block bb;\n+      edge exit;\n       tree ivvar, ivvarinced, exitcond, stmts;\n       enum tree_code testtype;\n       tree newupperbound, newlowerbound;\n@@ -1908,6 +1909,7 @@ lambda_loopnest_to_gcc_loopnest (struct loop *old_loopnest,\n \t\t\t\t\t     type,\n \t\t\t\t\t     new_ivs,\n \t\t\t\t\t     invariants, MIN_EXPR, &stmts);\n+      exit = temp->single_exit;\n       exitcond = get_loop_exit_condition (temp);\n       bb = bb_for_stmt (exitcond);\n       bsi = bsi_start (bb);\n@@ -1928,14 +1930,13 @@ lambda_loopnest_to_gcc_loopnest (struct loop *old_loopnest,\n       \n       testtype = LL_STEP (newloop) >= 0 ? LE_EXPR : GE_EXPR;\n       \n-      /* Since we don't know which cond_expr part currently points to each\n-\t edge, check which one is invariant and make sure we reverse the\n-\t comparison if we are trying to replace a <= 50 with 50 >= newiv.\n-\t This ensures that we still canonicalize to <invariant> <test>\n-\t <induction variable>.  */\n-      if (!expr_invariant_in_loop_p (temp, TREE_OPERAND (exitcond, 0)))\n+      /* We want to build a conditional where true means exit the loop, and\n+\t false means continue the loop.\n+\t So swap the testtype if this isn't the way things are.*/\n+\n+      if (exit->flags & EDGE_FALSE_VALUE)\n \ttesttype = swap_tree_comparison (testtype);\n-\t\n+\n       COND_EXPR_COND (exitcond) = build (testtype,\n \t\t\t\t\t boolean_type_node,\n \t\t\t\t\t newupperbound, ivvarinced);"}]}