{"sha": "05f1883cfd041adba5f595e97118100b6e00a524", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmMTg4M2NmZDA0MWFkYmE1ZjU5NWU5NzExODEwMGI2ZTAwYTUyNA==", "commit": {"author": {"name": "David Candler", "email": "David.Candler@arm.com", "date": "2020-11-06T17:53:03Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-06T17:53:03Z"}, "message": "aarch64: Use intrinsics for upper saturating shift right\n\nThe use of vqshrn_high_n_s32 was triggering an unneeded register move, because\nsqshrn2 is destructive but was declared as inline assembly in arm_neon.h. This\npatch implements sqshrn2 and uqshrn2 as actual intrinsics which do not trigger\nthe unnecessary move, along with new tests to cover them.\n\ngcc/ChangeLog\n\n2020-11-06  David Candler  <david.candler@arm.com>\n\n\t* config/aarch64/aarch64-builtins.c\n\t(TYPES_SHIFT2IMM): Add define.\n\t(TYPES_SHIFT2IMM_UUSS): Add define.\n\t(TYPES_USHIFT2IMM): Add define.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_<sur>q<r>shr<u>n2_n<mode>): Add new insn for upper saturating shift right.\n\t* config/aarch64/aarch64-simd-builtins.def: Add intrinsics.\n\t* config/aarch64/arm_neon.h:\n\t(vqrshrn_high_n_s16): Expand using intrinsic rather than inline asm.\n\t(vqrshrn_high_n_s32): Likewise.\n\t(vqrshrn_high_n_s64): Likewise.\n\t(vqrshrn_high_n_u16): Likewise.\n\t(vqrshrn_high_n_u32): Likewise.\n\t(vqrshrn_high_n_u64): Likewise.\n\t(vqrshrun_high_n_s16): Likewise.\n\t(vqrshrun_high_n_s32): Likewise.\n\t(vqrshrun_high_n_s64): Likewise.\n\t(vqshrn_high_n_s16): Likewise.\n\t(vqshrn_high_n_s32): Likewise.\n\t(vqshrn_high_n_s64): Likewise.\n\t(vqshrn_high_n_u16): Likewise.\n\t(vqshrn_high_n_u32): Likewise.\n\t(vqshrn_high_n_u64): Likewise.\n\t(vqshrun_high_n_s16): Likewise.\n\t(vqshrun_high_n_s32): Likewise.\n\t(vqshrun_high_n_s64): Likewise.\n\ngcc/testsuite/ChangeLog\n\n2020-11-06  David Candler  <david.candler@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrshrn_high_n.c: New testcase.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrshrun_high_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshrn_high_n.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshrun_high_n.c: Likewise.\n\t* gcc.target/aarch64/narrow_high-intrinsics.c: Update expected assembler\n\tfor sqshrun2, sqrshrun2, sqshrn2, uqshrn2, sqrshrn2 and uqrshrn2.", "tree": {"sha": "be113c28a40d6f8ee01b2412f99f04acd4f99704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be113c28a40d6f8ee01b2412f99f04acd4f99704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05f1883cfd041adba5f595e97118100b6e00a524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f1883cfd041adba5f595e97118100b6e00a524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f1883cfd041adba5f595e97118100b6e00a524", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f1883cfd041adba5f595e97118100b6e00a524/comments", "author": {"login": "dcandler", "id": 56445371, "node_id": "MDQ6VXNlcjU2NDQ1Mzcx", "avatar_url": "https://avatars.githubusercontent.com/u/56445371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcandler", "html_url": "https://github.com/dcandler", "followers_url": "https://api.github.com/users/dcandler/followers", "following_url": "https://api.github.com/users/dcandler/following{/other_user}", "gists_url": "https://api.github.com/users/dcandler/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcandler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcandler/subscriptions", "organizations_url": "https://api.github.com/users/dcandler/orgs", "repos_url": "https://api.github.com/users/dcandler/repos", "events_url": "https://api.github.com/users/dcandler/events{/privacy}", "received_events_url": "https://api.github.com/users/dcandler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b5f564a5d958295d51a1a7ff825896a89f22b75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b5f564a5d958295d51a1a7ff825896a89f22b75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b5f564a5d958295d51a1a7ff825896a89f22b75"}], "stats": {"total": 1112, "additions": 854, "deletions": 258}, "files": [{"sha": "5defdb050fa4210f4031244eb307df5770a4d57b", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=05f1883cfd041adba5f595e97118100b6e00a524", "patch": "@@ -266,6 +266,11 @@ static enum aarch64_type_qualifiers\n aarch64_types_unsigned_shift_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned, qualifier_immediate };\n #define TYPES_USHIFTIMM (aarch64_types_unsigned_shift_qualifiers)\n+#define TYPES_USHIFT2IMM (aarch64_types_ternopu_imm_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_shift2_to_unsigned_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_none, qualifier_immediate };\n+#define TYPES_SHIFT2IMM_UUSS (aarch64_types_shift2_to_unsigned_qualifiers)\n \n static enum aarch64_type_qualifiers\n aarch64_types_ternop_s_imm_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n@@ -277,6 +282,7 @@ aarch64_types_ternop_s_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define TYPES_SETREG (aarch64_types_ternop_s_imm_qualifiers)\n #define TYPES_SHIFTINSERT (aarch64_types_ternop_s_imm_qualifiers)\n #define TYPES_SHIFTACC (aarch64_types_ternop_s_imm_qualifiers)\n+#define TYPES_SHIFT2IMM (aarch64_types_ternop_s_imm_qualifiers)\n \n static enum aarch64_type_qualifiers\n aarch64_types_ternop_p_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]"}, {"sha": "09f275cd4fc723688dfc365817ffc102fe1f5ea1", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=05f1883cfd041adba5f595e97118100b6e00a524", "patch": "@@ -285,6 +285,13 @@\n   BUILTIN_VSQN_HSDI (USHIFTIMM, uqshrn_n, 0, ALL)\n   BUILTIN_VSQN_HSDI (SHIFTIMM, sqrshrn_n, 0, ALL)\n   BUILTIN_VSQN_HSDI (USHIFTIMM, uqrshrn_n, 0, ALL)\n+  /* Implemented by aarch64_<sur>q<r>shr<u>n2_n<mode>.  */\n+  BUILTIN_VQN (SHIFT2IMM_UUSS, sqshrun2_n, 0, NONE)\n+  BUILTIN_VQN (SHIFT2IMM_UUSS, sqrshrun2_n, 0, NONE)\n+  BUILTIN_VQN (SHIFT2IMM, sqshrn2_n, 0, NONE)\n+  BUILTIN_VQN (USHIFT2IMM, uqshrn2_n, 0, NONE)\n+  BUILTIN_VQN (SHIFT2IMM, sqrshrn2_n, 0, NONE)\n+  BUILTIN_VQN (USHIFT2IMM, uqrshrn2_n, 0, NONE)\n   /* Implemented by aarch64_<sur>s<lr>i_n<mode>.  */\n   BUILTIN_VSDQ_I_DI (SHIFTINSERT, ssri_n, 0, ALL)\n   BUILTIN_VSDQ_I_DI (USHIFTACC, usri_n, 0, ALL)"}, {"sha": "2cf6fe9154a2ee1b21ad9e8e2a6109805022be7f", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=05f1883cfd041adba5f595e97118100b6e00a524", "patch": "@@ -4720,6 +4720,17 @@\n   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n )\n \n+(define_insn \"aarch64_<sur>q<r>shr<u>n2_n<mode>\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+        (unspec:<VNARROWQ2> [(match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n+\t\t\t     (match_operand:VQN 2 \"register_operand\" \"w\")\n+\t\t\t     (match_operand:SI 3 \"aarch64_simd_shift_imm_offset_<ve_mode>\" \"i\")]\n+                            VQSHRN_N))]\n+  \"TARGET_SIMD\"\n+  \"<sur>q<r>shr<u>n2\\\\t%<vn2>0.<V2ntype>, %<v>2.<Vtype>, %3\"\n+  [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n+)\n+\n \n ;; cm(eq|ge|gt|lt|le)\n ;; Note, we have constraints for Dz and Z as different expanders"}, {"sha": "d79c1a27ecebf70ba0e29eefdb3cb9b4877bb831", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 108, "deletions": 252, "changes": 360, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=05f1883cfd041adba5f595e97118100b6e00a524", "patch": "@@ -9993,275 +9993,131 @@ vqrdmulhq_n_s32 (int32x4_t __a, int32_t __b)\n   return __result;\n }\n \n-#define vqrshrn_high_n_s16(a, b, c)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x8_t b_ = (b);                                              \\\n-       int8x8_t a_ = (a);                                               \\\n-       int8x16_t result = vcombine_s8                                   \\\n-                            (a_, vcreate_s8                             \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"sqrshrn2 %0.16b, %1.8h, #%2\"                           \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqrshrn_high_n_s16 (int8x8_t __a, int16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqrshrn2_nv8hi (__a, __b, __c);\n+}\n \n-#define vqrshrn_high_n_s32(a, b, c)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t b_ = (b);                                              \\\n-       int16x4_t a_ = (a);                                              \\\n-       int16x8_t result = vcombine_s16                                  \\\n-                            (a_, vcreate_s16                            \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"sqrshrn2 %0.8h, %1.4s, #%2\"                            \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqrshrn_high_n_s32 (int16x4_t __a, int32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqrshrn2_nv4si (__a, __b, __c);\n+}\n \n-#define vqrshrn_high_n_s64(a, b, c)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int64x2_t b_ = (b);                                              \\\n-       int32x2_t a_ = (a);                                              \\\n-       int32x4_t result = vcombine_s32                                  \\\n-                            (a_, vcreate_s32                            \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"sqrshrn2 %0.4s, %1.2d, #%2\"                            \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqrshrn_high_n_s64 (int32x2_t __a, int64x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqrshrn2_nv2di (__a, __b, __c);\n+}\n \n-#define vqrshrn_high_n_u16(a, b, c)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x8_t b_ = (b);                                             \\\n-       uint8x8_t a_ = (a);                                              \\\n-       uint8x16_t result = vcombine_u8                                  \\\n-                             (a_, vcreate_u8                            \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"uqrshrn2 %0.16b, %1.8h, #%2\"                           \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqrshrn_high_n_u16 (uint8x8_t __a, uint16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_uqrshrn2_nv8hi_uuus (__a, __b, __c);\n+}\n \n-#define vqrshrn_high_n_u32(a, b, c)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x4_t b_ = (b);                                             \\\n-       uint16x4_t a_ = (a);                                             \\\n-       uint16x8_t result = vcombine_u16                                 \\\n-                             (a_, vcreate_u16                           \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"uqrshrn2 %0.8h, %1.4s, #%2\"                            \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqrshrn_high_n_u32 (uint16x4_t __a, uint32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_uqrshrn2_nv4si_uuus (__a, __b, __c);\n+}\n \n-#define vqrshrn_high_n_u64(a, b, c)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint64x2_t b_ = (b);                                             \\\n-       uint32x2_t a_ = (a);                                             \\\n-       uint32x4_t result = vcombine_u32                                 \\\n-                             (a_, vcreate_u32                           \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"uqrshrn2 %0.4s, %1.2d, #%2\"                            \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqrshrn_high_n_u64 (uint32x2_t __a, uint64x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_uqrshrn2_nv2di_uuus (__a, __b, __c);\n+}\n \n-#define vqrshrun_high_n_s16(a, b, c)                                    \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x8_t b_ = (b);                                              \\\n-       uint8x8_t a_ = (a);                                              \\\n-       uint8x16_t result = vcombine_u8                                  \\\n-                             (a_, vcreate_u8                            \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"sqrshrun2 %0.16b, %1.8h, #%2\"                          \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqrshrun_high_n_s16 (uint8x8_t __a, int16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqrshrun2_nv8hi_uuss (__a, __b, __c);\n+}\n \n-#define vqrshrun_high_n_s32(a, b, c)                                    \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t b_ = (b);                                              \\\n-       uint16x4_t a_ = (a);                                             \\\n-       uint16x8_t result = vcombine_u16                                 \\\n-                             (a_, vcreate_u16                           \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"sqrshrun2 %0.8h, %1.4s, #%2\"                           \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqrshrun_high_n_s32 (uint16x4_t __a, int32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqrshrun2_nv4si_uuss (__a, __b, __c);\n+}\n \n-#define vqrshrun_high_n_s64(a, b, c)                                    \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int64x2_t b_ = (b);                                              \\\n-       uint32x2_t a_ = (a);                                             \\\n-       uint32x4_t result = vcombine_u32                                 \\\n-                             (a_, vcreate_u32                           \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"sqrshrun2 %0.4s, %1.2d, #%2\"                           \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqrshrun_high_n_s64 (uint32x2_t __a, int64x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqrshrun2_nv2di_uuss (__a, __b, __c);\n+}\n \n-#define vqshrn_high_n_s16(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x8_t b_ = (b);                                              \\\n-       int8x8_t a_ = (a);                                               \\\n-       int8x16_t result = vcombine_s8                                   \\\n-                            (a_, vcreate_s8                             \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"sqshrn2 %0.16b, %1.8h, #%2\"                            \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqshrn_high_n_s16 (int8x8_t __a, int16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqshrn2_nv8hi (__a, __b, __c);\n+}\n \n-#define vqshrn_high_n_s32(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t b_ = (b);                                              \\\n-       int16x4_t a_ = (a);                                              \\\n-       int16x8_t result = vcombine_s16                                  \\\n-                            (a_, vcreate_s16                            \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"sqshrn2 %0.8h, %1.4s, #%2\"                             \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqshrn_high_n_s32 (int16x4_t __a, int32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqshrn2_nv4si (__a, __b, __c);\n+}\n \n-#define vqshrn_high_n_s64(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int64x2_t b_ = (b);                                              \\\n-       int32x2_t a_ = (a);                                              \\\n-       int32x4_t result = vcombine_s32                                  \\\n-                            (a_, vcreate_s32                            \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"sqshrn2 %0.4s, %1.2d, #%2\"                             \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqshrn_high_n_s64 (int32x2_t __a, int64x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqshrn2_nv2di (__a, __b, __c);\n+}\n \n-#define vqshrn_high_n_u16(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x8_t b_ = (b);                                             \\\n-       uint8x8_t a_ = (a);                                              \\\n-       uint8x16_t result = vcombine_u8                                  \\\n-                             (a_, vcreate_u8                            \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"uqshrn2 %0.16b, %1.8h, #%2\"                            \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqshrn_high_n_u16 (uint8x8_t __a, uint16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_uqshrn2_nv8hi_uuus (__a, __b, __c);\n+}\n \n-#define vqshrn_high_n_u32(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x4_t b_ = (b);                                             \\\n-       uint16x4_t a_ = (a);                                             \\\n-       uint16x8_t result = vcombine_u16                                 \\\n-                             (a_, vcreate_u16                           \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"uqshrn2 %0.8h, %1.4s, #%2\"                             \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqshrn_high_n_u32 (uint16x4_t __a, uint32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_uqshrn2_nv4si_uuus (__a, __b, __c);\n+}\n \n-#define vqshrn_high_n_u64(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint64x2_t b_ = (b);                                             \\\n-       uint32x2_t a_ = (a);                                             \\\n-       uint32x4_t result = vcombine_u32                                 \\\n-                             (a_, vcreate_u32                           \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"uqshrn2 %0.4s, %1.2d, #%2\"                             \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqshrn_high_n_u64 (uint32x2_t __a, uint64x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_uqshrn2_nv2di_uuus (__a, __b, __c);\n+}\n \n-#define vqshrun_high_n_s16(a, b, c)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x8_t b_ = (b);                                              \\\n-       uint8x8_t a_ = (a);                                              \\\n-       uint8x16_t result = vcombine_u8                                  \\\n-                             (a_, vcreate_u8                            \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"sqshrun2 %0.16b, %1.8h, #%2\"                           \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqshrun_high_n_s16 (uint8x8_t __a, int16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqshrun2_nv8hi_uuss (__a, __b, __c);\n+}\n \n-#define vqshrun_high_n_s32(a, b, c)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t b_ = (b);                                              \\\n-       uint16x4_t a_ = (a);                                             \\\n-       uint16x8_t result = vcombine_u16                                 \\\n-                             (a_, vcreate_u16                           \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"sqshrun2 %0.8h, %1.4s, #%2\"                            \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqshrun_high_n_s32 (uint16x4_t __a, int32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqshrun2_nv4si_uuss (__a, __b, __c);\n+}\n \n-#define vqshrun_high_n_s64(a, b, c)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int64x2_t b_ = (b);                                              \\\n-       uint32x2_t a_ = (a);                                             \\\n-       uint32x4_t result = vcombine_u32                                 \\\n-                             (a_, vcreate_u32                           \\\n-                                    (__AARCH64_UINT64_C (0x0)));        \\\n-       __asm__ (\"sqshrun2 %0.4s, %1.2d, #%2\"                            \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vqshrun_high_n_s64 (uint32x2_t __a, int64x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_sqshrun2_nv2di_uuss (__a, __b, __c);\n+}\n \n #define vrshrn_high_n_s16(a, b, c)                                      \\\n   __extension__                                                         \\"}, {"sha": "d9add2908d100b10640c29ec43d3c7d0eff2acb5", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrshrn_high_n.c", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrn_high_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrn_high_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrn_high_n.c?ref=05f1883cfd041adba5f595e97118100b6e00a524", "patch": "@@ -0,0 +1,192 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t0xf8, 0xf9, 0xf9, 0xfa,\n+\t\t\t\t\t0xfa, 0xfb, 0xfb, 0xfc };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t0xfff8, 0xfff9, 0xfff9, 0xfffa };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t0xfffffffc, 0xfffffffc };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t 0xffffffff, 0xffffffff };\n+\n+/* Expected results with shift by 3.  */\n+VECT_VAR_DECL(expected_sh3,int,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t    0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t    0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t    0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_sh3,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t    0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_sh3,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t    0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_sh3,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_sh3,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t     0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_sh3,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t     0xffffffff, 0xffffffff };\n+\n+/* Expected results with shift by max amount.  */\n+VECT_VAR_DECL(expected_shmax,int,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t      0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t      0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t      0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_shmax,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t      0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_shmax,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t      0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_shmax,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t       0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t       0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t       0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_shmax,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t       0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_shmax,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t       0xffffffff, 0xffffffff };\n+\n+#define INSN vqrshrn_high_n\n+#define TEST_MSG \"VQRSHRN_HIGH_N\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  /* Basic test: y=vqrshrn_high_n(x,v), then store the result.  */\n+#define TEST_VQRSHRN_HIGH_N2(INSN, T1, T2, W, W2, N, N2, V) \\\n+  VECT_VAR(vector_res, T1, W2, N2) =\t\t\t    \\\n+    INSN##_##T2##W(VECT_VAR(vector1, T1, W2, N),\t    \\\n+\t\t   VECT_VAR(vector2, T1, W, N), V);\t    \\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2),\t\t    \\\n+\t\t VECT_VAR(vector_res, T1, W2, N2));\t    \\\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQRSHRN_HIGH_N1(INSN, T1, T2, W, W2, N, N2, V) \\\n+  TEST_VQRSHRN_HIGH_N2(INSN, T1, T2, W, W2, N, N2, V)\n+\n+#define TEST_VQRSHRN_HIGH_N(T1, T2, W, W2, N, N2, V) \\\n+  TEST_VQRSHRN_HIGH_N1(INSN, T1, T2, W, W2, N, N2, V)\n+\n+\n+  DECL_VARIABLE(vector1, int, 8, 8);\n+  DECL_VARIABLE(vector1, int, 16, 4);\n+  DECL_VARIABLE(vector1, int, 32, 2);\n+  DECL_VARIABLE(vector1, uint, 8, 8);\n+  DECL_VARIABLE(vector1, uint, 16, 4);\n+  DECL_VARIABLE(vector1, uint, 32, 2);\n+\n+  /* vector is twice as large as vector_res.  */\n+  DECL_VARIABLE(vector2, int, 16, 8);\n+  DECL_VARIABLE(vector2, int, 32, 4);\n+  DECL_VARIABLE(vector2, int, 64, 2);\n+  DECL_VARIABLE(vector2, uint, 16, 8);\n+  DECL_VARIABLE(vector2, uint, 32, 4);\n+  DECL_VARIABLE(vector2, uint, 64, 2);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  clean_results ();\n+\n+  VLOAD(vector1, buffer, , int, s, 8, 8);\n+  VLOAD(vector1, buffer, , int, s, 16, 4);\n+  VLOAD(vector1, buffer, , int, s, 32, 2);\n+  VLOAD(vector1, buffer, , uint, u, 8, 8);\n+  VLOAD(vector1, buffer, , uint, u, 16, 4);\n+  VLOAD(vector1, buffer, , uint, u, 32, 2);\n+\n+  VLOAD(vector2, buffer, q, int, s, 16, 8);\n+  VLOAD(vector2, buffer, q, int, s, 32, 4);\n+  VLOAD(vector2, buffer, q, int, s, 64, 2);\n+  VLOAD(vector2, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector2, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector2, buffer, q, uint, u, 64, 2);\n+\n+  /* Choose shift amount arbitrarily.  */\n+#define CMT \"\"\n+  TEST_VQRSHRN_HIGH_N(int, s, 16, 8, 8, 16, 1);\n+  TEST_VQRSHRN_HIGH_N(int, s, 32, 16, 4, 8, 1);\n+  TEST_VQRSHRN_HIGH_N(int, s, 64, 32, 2, 4, 2);\n+  TEST_VQRSHRN_HIGH_N(uint, u, 16, 8, 8, 16, 2);\n+  TEST_VQRSHRN_HIGH_N(uint, u, 32, 16, 4, 8, 3);\n+  TEST_VQRSHRN_HIGH_N(uint, u, 64, 32, 2, 4, 3);\n+\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+\n+\n+  /* Another set of tests, shifting max value by 3.  */\n+  VDUP(vector1, , int, s, 8, 8, 0x7F);\n+  VDUP(vector1, , int, s, 16, 4, 0x7FFF);\n+  VDUP(vector1, , int, s, 32, 2, 0x7FFFFFFFLL);\n+  VDUP(vector1, , uint, u, 8, 8, 0xFF);\n+  VDUP(vector1, , uint, u, 16, 4, 0xFFFF);\n+  VDUP(vector1, , uint, u, 32, 2, 0xFFFFFFFFULL);\n+\n+  VDUP(vector2, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector2, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector2, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector2, q, uint, u, 16, 8, 0xFFFF);\n+  VDUP(vector2, q, uint, u, 32, 4, 0xFFFFFFFF);\n+  VDUP(vector2, q, uint, u, 64, 2, 0xFFFFFFFFFFFFFFFFULL);\n+\n+#undef CMT\n+#define CMT \" (check saturation: shift by 3)\"\n+  TEST_VQRSHRN_HIGH_N(int, s, 16, 8, 8, 16, 3);\n+  TEST_VQRSHRN_HIGH_N(int, s, 32, 16, 4, 8, 3);\n+  TEST_VQRSHRN_HIGH_N(int, s, 64, 32, 2, 4, 3);\n+  TEST_VQRSHRN_HIGH_N(uint, u, 16, 8, 8, 16, 3);\n+  TEST_VQRSHRN_HIGH_N(uint, u, 32, 16, 4, 8, 3);\n+  TEST_VQRSHRN_HIGH_N(uint, u, 64, 32, 2, 4, 3);\n+\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_sh3, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_sh3, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_sh3, CMT);\n+\n+\n+  /* Shift by max amount.  */\n+#undef CMT\n+#define CMT \" (check saturation: shift by max)\"\n+  TEST_VQRSHRN_HIGH_N(int, s, 16, 8, 8, 16, 8);\n+  TEST_VQRSHRN_HIGH_N(int, s, 32, 16, 4, 8, 16);\n+  TEST_VQRSHRN_HIGH_N(int, s, 64, 32, 2, 4, 32);\n+  TEST_VQRSHRN_HIGH_N(uint, u, 16, 8, 8, 16, 8);\n+  TEST_VQRSHRN_HIGH_N(uint, u, 32, 16, 4, 8, 16);\n+  TEST_VQRSHRN_HIGH_N(uint, u, 64, 32, 2, 4, 32);\n+\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_shmax, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_shmax, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_shmax, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqrshrn_high_n ();\n+  return 0;\n+}"}, {"sha": "1a3788cd14a2883202b5396c08da1d87a4b2ed71", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrshrun_high_n.c", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrun_high_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrun_high_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrun_high_n.c?ref=05f1883cfd041adba5f595e97118100b6e00a524", "patch": "@@ -0,0 +1,194 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results with negative input.  */\n+VECT_VAR_DECL(expected_neg,uint,8,16) [] = { 0xfe, 0xfe, 0xfe, 0xfe,\n+\t\t\t\t\t     0xfe, 0xfe, 0xfe, 0xfe,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,16,8) [] = { 0xfffd, 0xfffd, 0xfffd, 0xfffd,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,32,4) [] = { 0xfffffffc, 0xfffffffc, 0x0, 0x0 };\n+\n+/* Expected results with max input value shifted by 1.  */\n+VECT_VAR_DECL(expected_max_sh1,uint,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_max_sh1,uint,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t\t 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_max_sh1,uint,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t\t 0xffffffff, 0xffffffff };\n+\n+/* Expected results with max input value shifted by max amount.  */\n+VECT_VAR_DECL(expected_max_shmax,uint,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t   0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t   0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t   0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_max_shmax,uint,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t\t   0x8000, 0x8000, 0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_max_shmax,uint,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t\t   0x80000000, 0x80000000 };\n+\n+/* Expected results with min input value shifted by max amount.  */\n+VECT_VAR_DECL(expected_min_shmax,uint,8,16) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t   0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t   0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_min_shmax,uint,16,8) [] = { 0x8000, 0x8000, 0x8000, 0x8000,\n+\t\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_min_shmax,uint,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t   0x0, 0x0 };\n+\n+/* Expected results with inputs in usual range.  */\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x12, 0x12, 0x12, 0x12,\n+\t\t\t\t\t 0x12, 0x12, 0x12, 0x12,\n+\t\t\t\t\t 0x49, 0x49, 0x49, 0x49,\n+\t\t\t\t\t 0x49, 0x49, 0x49, 0x49 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x4321, 0x4321, 0x4321, 0x4321,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xdeadbeef, 0xdeadbeef,\n+\t\t\t\t\t 0xdeadbf, 0xdeadbf };\n+\n+#define INSN vqrshrun_high_n\n+#define TEST_MSG \"VQRSHRUN_HIGH_N\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  /* Basic test: y=vqrshrun_high_n(x,v), then store the result.  */\n+#define TEST_VQRSHRUN_HIGH_N2(INSN, T1, T2, W, W2, N, N2, V) \\\n+  VECT_VAR(vector_res, uint, W2, N2) =\t\t\t     \\\n+    INSN##_##T2##W(VECT_VAR(vector1, uint, W2, N),\t     \\\n+\t\t   VECT_VAR(vector2, T1, W, N), V);\t     \\\n+  vst1q_u##W2(VECT_VAR(result, uint, W2, N2),\t\t     \\\n+\t      VECT_VAR(vector_res, uint, W2, N2));\t     \\\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQRSHRUN_HIGH_N1(INSN, T1, T2, W, W2, N, N2, V) \\\n+  TEST_VQRSHRUN_HIGH_N2(INSN, T1, T2, W, W2, N, N2, V)\n+\n+#define TEST_VQRSHRUN_HIGH_N(T1, T2, W, W2, N, N2, V) \\\n+  TEST_VQRSHRUN_HIGH_N1(INSN, T1, T2, W, W2, N, N2, V)\n+\n+\n+  DECL_VARIABLE(vector1, uint, 8, 8);\n+  DECL_VARIABLE(vector1, uint, 16, 4);\n+  DECL_VARIABLE(vector1, uint, 32, 2);\n+\n+  /* vector is twice as large as vector_res.  */\n+  DECL_VARIABLE(vector2, int, 16, 8);\n+  DECL_VARIABLE(vector2, int, 32, 4);\n+  DECL_VARIABLE(vector2, int, 64, 2);\n+\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with negative values, to check saturation on\n+     limits.  */\n+  VDUP(vector1, , uint, u, 8, 8, -2);\n+  VDUP(vector1, , uint, u, 16, 4, -3);\n+  VDUP(vector1, , uint, u, 32, 2, -4);\n+\n+  VDUP(vector2, q, int, s, 16, 8, -2);\n+  VDUP(vector2, q, int, s, 32, 4, -3);\n+  VDUP(vector2, q, int, s, 64, 2, -4);\n+\n+  /* Choose shift amount arbitrarily.   */\n+#define CMT \" (negative input)\"\n+  TEST_VQRSHRUN_HIGH_N(int, s, 16, 8, 8, 16, 3);\n+  TEST_VQRSHRUN_HIGH_N(int, s, 32, 16, 4, 8, 4);\n+  TEST_VQRSHRUN_HIGH_N(int, s, 64, 32, 2, 4, 2);\n+\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_neg, CMT);\n+\n+\n+  /* Fill input vector with max value, to check saturation on\n+     limits.  */\n+  VDUP(vector1, , uint, u, 8, 8, 0x7F);\n+  VDUP(vector1, , uint, u, 16, 4, 0x7FFF);\n+  VDUP(vector1, , uint, u, 32, 2, 0x7FFFFFFFLL);\n+\n+  VDUP(vector2, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector2, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector2, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+\n+  /* shift by 1.  */\n+#undef CMT\n+#define CMT \" (check cumulative saturation: shift by 1)\"\n+  TEST_VQRSHRUN_HIGH_N(int, s, 16, 8, 8, 16, 1);\n+  TEST_VQRSHRUN_HIGH_N(int, s, 32, 16, 4, 8, 1);\n+  TEST_VQRSHRUN_HIGH_N(int, s, 64, 32, 2, 4, 1);\n+\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh1, CMT);\n+\n+\n+  /* shift by max.  */\n+#undef CMT\n+#define CMT \" (check cumulative saturation: shift by max, positive input)\"\n+  TEST_VQRSHRUN_HIGH_N(int, s, 16, 8, 8, 16, 8);\n+  TEST_VQRSHRUN_HIGH_N(int, s, 32, 16, 4, 8, 16);\n+  TEST_VQRSHRUN_HIGH_N(int, s, 64, 32, 2, 4, 32);\n+\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_shmax, CMT);\n+\n+\n+  /* Fill input vector with min value, to check saturation on limits.  */\n+  VDUP(vector1, , uint, u, 8, 8, 0x80);\n+  VDUP(vector1, , uint, u, 16, 4, 0x8000);\n+  VDUP(vector1, , uint, u, 32, 2, 0x80000000LL);\n+\n+  VDUP(vector2, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector2, q, int, s, 32, 4, 0x80000000);\n+  VDUP(vector2, q, int, s, 64, 2, 0x8000000000000000LL);\n+\n+  /* shift by max  */\n+#undef CMT\n+#define CMT \" (check cumulative saturation: shift by max, negative input)\"\n+  TEST_VQRSHRUN_HIGH_N(int, s, 16, 8, 8, 16, 8);\n+  TEST_VQRSHRUN_HIGH_N(int, s, 32, 16, 4, 8, 16);\n+  TEST_VQRSHRUN_HIGH_N(int, s, 64, 32, 2, 4, 32);\n+\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_min_shmax, CMT);\n+\n+\n+  /* Fill input vector with positive values, to check normal case.  */\n+  VDUP(vector1, , uint, u, 8, 8, 0x12);\n+  VDUP(vector1, , uint, u, 16, 4, 0x4321);\n+  VDUP(vector1, , uint, u, 32, 2, 0xDEADBEEF);\n+\n+  VDUP(vector2, q, int, s, 16, 8, 0x1234);\n+  VDUP(vector2, q, int, s, 32, 4, 0x87654321);\n+  VDUP(vector2, q, int, s, 64, 2, 0xDEADBEEF);\n+\n+  /* shift arbitrary amount.  */\n+#undef CMT\n+#define CMT \"\"\n+  TEST_VQRSHRUN_HIGH_N(int, s, 16, 8, 8, 16, 6);\n+  TEST_VQRSHRUN_HIGH_N(int, s, 32, 16, 4, 8, 7);\n+  TEST_VQRSHRUN_HIGH_N(int, s, 64, 32, 2, 4, 8);\n+\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqrshrun_high_n ();\n+  return 0;\n+}"}, {"sha": "72aecc15ba29ce04e1acf2f7edd0a2dd98d690ff", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshrn_high_n.c", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrn_high_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrn_high_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrn_high_n.c?ref=05f1883cfd041adba5f595e97118100b6e00a524", "patch": "@@ -0,0 +1,190 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t0xf8, 0xf8, 0xf9, 0xf9,\n+\t\t\t\t\t0xfa, 0xfa, 0xfb, 0xfb };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t0xfff8, 0xfff8, 0xfff9, 0xfff9 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t0xfffffffc, 0xfffffffc };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t 0xffffffff, 0xffffffff };\n+\n+/* Expected results with max input value shifted by 3.  */\n+VECT_VAR_DECL(expected_max_sh3,int,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_max_sh3,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_max_sh3,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t\t0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_max_sh3,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_max_sh3,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t\t 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_max_sh3,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t\t 0xffffffff, 0xffffffff };\n+\n+/* Expected results with max input value shifted by type size.  */\n+VECT_VAR_DECL(expected_max_shmax,int,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t  0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t  0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t  0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_max_shmax,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t\t  0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_max_shmax,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t\t  0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_max_shmax,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t   0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t   0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t   0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_max_shmax,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_max_shmax,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t\t   0xffffffff, 0xffffffff };\n+\n+#define INSN vqshrn_high_n\n+#define TEST_MSG \"VQSHRN_HIGH_N\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  /* Basic test: y=vqshrn_high_n(x1,x2,v), then store the result.  */\n+#define TEST_VQSHRN_HIGH_N2(INSN, T1, T2, W, W2, N, N2, V) \\\n+  VECT_VAR(vector_res, T1, W2, N2) =\t\t\t   \\\n+    INSN##_##T2##W(VECT_VAR(vector1, T1, W2, N),\t   \\\n+\t\t   VECT_VAR(vector2, T1, W, N), V);\t   \\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2),\t\t   \\\n+\t\t VECT_VAR(vector_res, T1, W2, N2));\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQSHRN_HIGH_N1(INSN, T1, T2, W, W2, N, N2, V) \\\n+  TEST_VQSHRN_HIGH_N2(INSN, T1, T2, W, W2, N, N2, V)\n+\n+#define TEST_VQSHRN_HIGH_N(T1, T2, W, W2, N, N2, V) \\\n+  TEST_VQSHRN_HIGH_N1(INSN, T1, T2, W, W2, N, N2, V)\n+\n+\n+  DECL_VARIABLE(vector1, int, 8, 8);\n+  DECL_VARIABLE(vector1, int, 16, 4);\n+  DECL_VARIABLE(vector1, int, 32, 2);\n+  DECL_VARIABLE(vector1, uint, 8, 8);\n+  DECL_VARIABLE(vector1, uint, 16, 4);\n+  DECL_VARIABLE(vector1, uint, 32, 2);\n+\n+  /* vector is twice as large as vector_res.  */\n+  DECL_VARIABLE(vector2, int, 16, 8);\n+  DECL_VARIABLE(vector2, int, 32, 4);\n+  DECL_VARIABLE(vector2, int, 64, 2);\n+  DECL_VARIABLE(vector2, uint, 16, 8);\n+  DECL_VARIABLE(vector2, uint, 32, 4);\n+  DECL_VARIABLE(vector2, uint, 64, 2);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  clean_results ();\n+\n+  VLOAD(vector1, buffer, , int, s, 8, 8);\n+  VLOAD(vector1, buffer, , int, s, 16, 4);\n+  VLOAD(vector1, buffer, , int, s, 32, 2);\n+  VLOAD(vector1, buffer, , uint, u, 8, 8);\n+  VLOAD(vector1, buffer, , uint, u, 16, 4);\n+  VLOAD(vector1, buffer, , uint, u, 32, 2);\n+\n+  VLOAD(vector2, buffer, q, int, s, 16, 8);\n+  VLOAD(vector2, buffer, q, int, s, 32, 4);\n+  VLOAD(vector2, buffer, q, int, s, 64, 2);\n+  VLOAD(vector2, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector2, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector2, buffer, q, uint, u, 64, 2);\n+\n+  /* Choose shift amount arbitrarily.  */\n+#define CMT \"\"\n+  TEST_VQSHRN_HIGH_N(int, s, 16, 8, 8, 16, 1);\n+  TEST_VQSHRN_HIGH_N(int, s, 32, 16, 4, 8, 1);\n+  TEST_VQSHRN_HIGH_N(int, s, 64, 32, 2, 4, 2);\n+  TEST_VQSHRN_HIGH_N(uint, u, 16, 8, 8, 16, 2);\n+  TEST_VQSHRN_HIGH_N(uint, u, 32, 16, 4, 8, 3);\n+  TEST_VQSHRN_HIGH_N(uint, u, 64, 32, 2, 4, 3);\n+\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+\n+  /* Use max possible value as input.  */\n+  VDUP(vector1, , int, s, 8, 8, 0x7F);\n+  VDUP(vector1, , int, s, 16, 4, 0x7FFF);\n+  VDUP(vector1, , int, s, 32, 2, 0x7FFFFFFFLL);\n+  VDUP(vector1, , uint, u, 8, 8, 0xFF);\n+  VDUP(vector1, , uint, u, 16, 4, 0xFFFF);\n+  VDUP(vector1, , uint, u, 32, 2, 0xFFFFFFFFULL);\n+\n+  VDUP(vector2, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector2, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector2, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector2, q, uint, u, 16, 8, 0xFFFF);\n+  VDUP(vector2, q, uint, u, 32, 4, 0xFFFFFFFF);\n+  VDUP(vector2, q, uint, u, 64, 2, 0xFFFFFFFFFFFFFFFFULL);\n+\n+#undef CMT\n+#define CMT \" (check saturation: shift by 3)\"\n+  TEST_VQSHRN_HIGH_N(int, s, 16, 8, 8, 16, 3);\n+  TEST_VQSHRN_HIGH_N(int, s, 32, 16, 4, 8, 3);\n+  TEST_VQSHRN_HIGH_N(int, s, 64, 32, 2, 4, 3);\n+  TEST_VQSHRN_HIGH_N(uint, u, 16, 8, 8, 16, 3);\n+  TEST_VQSHRN_HIGH_N(uint, u, 32, 16, 4, 8, 3);\n+  TEST_VQSHRN_HIGH_N(uint, u, 64, 32, 2, 4, 3);\n+\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh3, CMT);\n+\n+\n+#undef CMT\n+#define CMT \" (check saturation: shift by max)\"\n+  TEST_VQSHRN_HIGH_N(int, s, 16, 8, 8, 16, 8);\n+  TEST_VQSHRN_HIGH_N(int, s, 32, 16, 4, 8, 16);\n+  TEST_VQSHRN_HIGH_N(int, s, 64, 32, 2, 4, 32);\n+  TEST_VQSHRN_HIGH_N(uint, u, 16, 8, 8, 16, 8);\n+  TEST_VQSHRN_HIGH_N(uint, u, 32, 16, 4, 8, 16);\n+  TEST_VQSHRN_HIGH_N(uint, u, 64, 32, 2, 4, 32);\n+\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_shmax, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqshrn_high_n ();\n+  return 0;\n+}"}, {"sha": "4885c029d1a41a2b5d28722868defbc3e21fcb73", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshrun_high_n.c", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrun_high_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrun_high_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrun_high_n.c?ref=05f1883cfd041adba5f595e97118100b6e00a524", "patch": "@@ -0,0 +1,140 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results with negative input.  */\n+VECT_VAR_DECL(expected_neg,uint,8,16) [] = { 0xfe, 0xfe, 0xfe, 0xfe,\n+\t\t\t\t\t     0xfe, 0xfe, 0xfe, 0xfe,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t     0x0,0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,16,8) [] = { 0xfffd, 0xfffd, 0xfffd, 0xfffd,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,32,4) [] = { 0xfffffffc, 0xfffffffc,\n+\t\t\t\t\t     0x0, 0x0 };\n+\n+/* Expected results with max input value shifted by 1.  */\n+VECT_VAR_DECL(expected_max_sh1,uint,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_max_sh1,uint,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t\t 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_max_sh1,uint,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t\t 0xffffffff, 0xffffffff };\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x12, 0x12, 0x12, 0x12,\n+\t\t\t\t\t 0x12, 0x12, 0x12, 0x12,\n+\t\t\t\t\t 0x48, 0x48, 0x48, 0x48,\n+\t\t\t\t\t 0x48, 0x48, 0x48, 0x48 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x4321, 0x4321, 0x4321, 0x4321,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xdeadbeef, 0xdeadbeef,\n+\t\t\t\t\t 0xdeadbe, 0xdeadbe };\n+\n+#define INSN vqshrun_high_n\n+#define TEST_MSG \"VQSHRUN_HIGH_N\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  /* Basic test: y=vqshrun_high_n(x,v), then store the result.  */\n+#define TEST_VQSHRUN_HIGH_N2(INSN, T1, T2, W, W2, N, N2, V) \\\n+  VECT_VAR(vector_res, uint, W2, N2) =\t\t\t    \\\n+    INSN##_##T2##W(VECT_VAR(vector1,uint, W2, N),\t    \\\n+\t\t   VECT_VAR(vector2, T1, W, N), V);\t    \\\n+  vst1q_u##W2(VECT_VAR(result, uint, W2, N2),\t\t    \\\n+\t      VECT_VAR(vector_res, uint, W2, N2));\t    \\\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQSHRUN_HIGH_N1(INSN, T1, T2, W, W2, N, N2, V) \\\n+  TEST_VQSHRUN_HIGH_N2(INSN, T1, T2, W, W2, N, N2, V)\n+\n+#define TEST_VQSHRUN_HIGH_N(T1, T2, W, W2, N, N2, V) \\\n+  TEST_VQSHRUN_HIGH_N1(INSN, T1, T2, W, W2, N, N2, V)\n+\n+\n+  DECL_VARIABLE(vector1, uint, 8, 8);\n+  DECL_VARIABLE(vector1, uint, 16, 4);\n+  DECL_VARIABLE(vector1, uint, 32, 2);\n+\n+  /* vector is twice as large as vector_res.  */\n+  DECL_VARIABLE(vector2, int, 16, 8);\n+  DECL_VARIABLE(vector2, int, 32, 4);\n+  DECL_VARIABLE(vector2, int, 64, 2);\n+\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with negative values, to check saturation on\n+     limits.  */\n+  VDUP(vector1, , uint, u, 8, 8, -2);\n+  VDUP(vector1, , uint, u, 16, 4, -3);\n+  VDUP(vector1, , uint, u, 32, 2, -4);\n+\n+  VDUP(vector2, q, int, s, 16, 8, -2);\n+  VDUP(vector2, q, int, s, 32, 4, -3);\n+  VDUP(vector2, q, int, s, 64, 2, -4);\n+\n+  /* Choose shift amount arbitrarily.  */\n+#define CMT \" (negative input)\"\n+  TEST_VQSHRUN_HIGH_N(int, s, 16, 8, 8, 16, 3);\n+  TEST_VQSHRUN_HIGH_N(int, s, 32, 16, 4, 8, 4);\n+  TEST_VQSHRUN_HIGH_N(int, s, 64, 32, 2, 4, 2);\n+\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_neg, CMT);\n+\n+\n+  /* Fill input vector with max value, to check saturation on\n+     limits.  */\n+  VDUP(vector1, , uint, u, 8, 8, 0x7F);\n+  VDUP(vector1, , uint, u, 16, 4, 0x7FFF);\n+  VDUP(vector1, , uint, u, 32, 2, 0x7FFFFFFFLL);\n+\n+  VDUP(vector2, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector2, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector2, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+\n+#undef CMT\n+#define CMT \" (check cumulative saturation)\"\n+  TEST_VQSHRUN_HIGH_N(int, s, 16, 8, 8, 16, 1);\n+  TEST_VQSHRUN_HIGH_N(int, s, 32, 16, 4, 8, 1);\n+  TEST_VQSHRUN_HIGH_N(int, s, 64, 32, 2, 4, 1);\n+\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh1, CMT);\n+\n+\n+  /* Fill input vector with positive values, to check normal case.  */\n+  VDUP(vector1, , uint, u, 8, 8, 0x12);\n+  VDUP(vector1, , uint, u, 16, 4, 0x4321);\n+  VDUP(vector1, , uint, u, 32, 2, 0xDEADBEEF);\n+\n+  VDUP(vector2, q, int, s, 16, 8, 0x1234);\n+  VDUP(vector2, q, int, s, 32, 4, 0x87654321);\n+  VDUP(vector2, q, int, s, 64, 2, 0xDEADBEEF);\n+\n+#undef CMT\n+#define CMT \"\"\n+  TEST_VQSHRUN_HIGH_N(int, s, 16, 8, 8, 16, 6);\n+  TEST_VQSHRUN_HIGH_N(int, s, 32, 16, 4, 8, 7);\n+  TEST_VQSHRUN_HIGH_N(int, s, 64, 32, 2, 4, 8);\n+\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqshrun_high_n ();\n+  return 0;\n+}"}, {"sha": "07d780300586299eea675c5ef09527d0f8066794", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_high-intrinsics.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f1883cfd041adba5f595e97118100b6e00a524/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c?ref=05f1883cfd041adba5f595e97118100b6e00a524", "patch": "@@ -113,12 +113,12 @@ ONE (vmovn_high, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n /* { dg-final { scan-assembler-times \"raddhn2\\\\tv\" 6} }  */\n /* { dg-final { scan-assembler-times \"\\\\trshrn2 v\" 6} }  */\n /* { dg-final { scan-assembler-times \"\\\\tshrn2 v\" 6} }  */\n-/* { dg-final { scan-assembler-times \"sqshrun2 v\" 3} }  */\n-/* { dg-final { scan-assembler-times \"sqrshrun2 v\" 3} }  */\n-/* { dg-final { scan-assembler-times \"sqshrn2 v\" 3} }  */\n-/* { dg-final { scan-assembler-times \"uqshrn2 v\" 3} }  */\n-/* { dg-final { scan-assembler-times \"sqrshrn2 v\" 3} }  */\n-/* { dg-final { scan-assembler-times \"uqrshrn2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"sqshrun2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"sqrshrun2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"sqshrn2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"uqshrn2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"sqrshrn2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"uqrshrn2\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"uqxtn2 v\" 3} }  */\n /* { dg-final { scan-assembler-times \"sqxtn2 v\" 3} }  */\n /* { dg-final { scan-assembler-times \"sqxtun2 v\" 3} }  */"}]}