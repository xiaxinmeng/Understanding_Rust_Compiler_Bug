{"sha": "d7ad6040df4c6cdca2da4ee2801860da2c0164ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhZDYwNDBkZjRjNmNkY2EyZGE0ZWUyODAxODYwZGEyYzAxNjRiYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-09T21:50:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-09T21:50:26Z"}, "message": "Add port done awhile ago for the ARC cpu.\n\n        * arc/arc.h: New file.\n        * arc/arc.c: New file.\n        * arc/arc.md: New file.\n        * arc/initfini.c: New file.\n        * arc/lib1funcs.asm: New file.\n        * arc/t-arc: New file.\n        * arc/xm-arc.h: New file.\n        * ginclude/va-arc.h: New file.\n        * ginclude/stdarg.h: Include va-arc.h ifdef __arc__.\n        * ginclude/varargs.h: Likewise.\n        * Makefile.in (USER_H): Add va-arc.h.\n        * configure.in (arc-*-elf*): Recognize.\n        * longlong.h: Add ARC support.\nMostly so I can test changes in snapshot scripts.\n\n        * expr.c (clear_storage): Use CONST0_RTX instead of const0_rtx.\n        when clearing non-BLKmode data.\nFixes sparc problem.\n\nFrom-SVN: r15184", "tree": {"sha": "a5284e7a82cd004a36c041a7bcf59f223354afbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5284e7a82cd004a36c041a7bcf59f223354afbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7ad6040df4c6cdca2da4ee2801860da2c0164ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ad6040df4c6cdca2da4ee2801860da2c0164ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ad6040df4c6cdca2da4ee2801860da2c0164ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ad6040df4c6cdca2da4ee2801860da2c0164ba/comments", "author": null, "committer": null, "parents": [{"sha": "233bd86d2e8877607e0d731f2bb6809d13a30460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233bd86d2e8877607e0d731f2bb6809d13a30460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/233bd86d2e8877607e0d731f2bb6809d13a30460"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "084e2292bf5c8a840abd4135b45617e024eba71a", "filename": "gcc/config/arc/initfini.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ad6040df4c6cdca2da4ee2801860da2c0164ba/gcc%2Fconfig%2Farc%2Finitfini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ad6040df4c6cdca2da4ee2801860da2c0164ba/gcc%2Fconfig%2Farc%2Finitfini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Finitfini.c?ref=d7ad6040df4c6cdca2da4ee2801860da2c0164ba", "patch": "@@ -0,0 +1,157 @@\n+/* .init/.fini section handling + C++ global constructor/destructor handling.\n+   This file is based on crtstuff.c, sol2-crti.asm, sol2-crtn.asm.\n+\n+Copyright (C) 1995, 1997 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this file with files\n+   compiled with GCC to produce an executable, this does not cause\n+   the resulting executable to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+/*  Declare a pointer to void function type.  */\n+typedef void (*func_ptr) (void);\n+\n+#ifdef CRT_INIT\n+\n+/* NOTE:  In order to be able to support SVR4 shared libraries, we arrange\n+   to have one set of symbols { __CTOR_LIST__, __DTOR_LIST__, __CTOR_END__,\n+   __DTOR_END__ } per root executable and also one set of these symbols\n+   per shared library.  So in any given whole process image, we may have\n+   multiple definitions of each of these symbols.  In order to prevent\n+   these definitions from conflicting with one another, and in order to\n+   ensure that the proper lists are used for the initialization/finalization\n+   of each individual shared library (respectively), we give these symbols\n+   only internal (i.e. `static') linkage, and we also make it a point to\n+   refer to only the __CTOR_END__ symbol in crtfini.o and the __DTOR_LIST__\n+   symbol in crtinit.o, where they are defined.  */\n+\n+static func_ptr __CTOR_LIST__[1] __attribute__ ((section (\".ctors\")))\n+     = { (func_ptr) (-1) };\n+\n+static func_ptr __DTOR_LIST__[1] __attribute__ ((section (\".dtors\")))\n+     = { (func_ptr) (-1) };\n+\n+/* Run all the global destructors on exit from the program.  */\n+ \n+/* Some systems place the number of pointers in the first word of the\n+   table.  On SVR4 however, that word is -1.  In all cases, the table is\n+   null-terminated.  On SVR4, we start from the beginning of the list and\n+   invoke each per-compilation-unit destructor routine in order\n+   until we find that null.\n+\n+   Note that this function MUST be static.  There will be one of these\n+   functions in each root executable and one in each shared library, but\n+   although they all have the same code, each one is unique in that it\n+   refers to one particular associated `__DTOR_LIST__' which belongs to the\n+   same particular root executable or shared library file.  */\n+\n+static void __do_global_dtors ()\n+asm (\"__do_global_dtors\") __attribute__ ((section (\".text\")));\n+\n+static void\n+__do_global_dtors ()\n+{\n+  func_ptr *p;\n+  for (p = __DTOR_LIST__ + 1; *p; p++)\n+    (*p) ();\n+}\n+\n+/* .init section start.\n+   This must appear at the start of the .init section.  */\n+\n+asm (\"\n+\t.section .init\\n\n+\t.global init\\n\n+\t.word 0\\n\n+init:\\n\n+\tst blink,[sp,4]\\n\n+\tst fp,[sp]\\n\n+\tmov fp,sp\\n\n+\tsub sp,sp,16\\n\n+\");\n+\n+/* .fini section start.\n+   This must appear at the start of the .init section.  */\n+\n+asm (\"\n+\t.section .fini\\n\n+\t.global fini\\n\n+\t.word 0\\n\n+fini:\\n\n+\tst blink,[sp,4]\\n\n+\tst fp,[sp]\\n\n+\tmov fp,sp\\n\n+\tsub sp,sp,16\\n\n+\tbl.nd __do_global_dtors\n+\");\n+\n+#endif /* CRT_INIT */\n+\n+#ifdef CRT_FINI\n+\n+/* Put a word containing zero at the end of each of our two lists of function\n+   addresses.  Note that the words defined here go into the .ctors and .dtors\n+   sections of the crtend.o file, and since that file is always linked in\n+   last, these words naturally end up at the very ends of the two lists\n+   contained in these two sections.  */\n+\n+static func_ptr __CTOR_END__[1] __attribute__ ((section (\".ctors\")))\n+     = { (func_ptr) 0 };\n+\n+static func_ptr __DTOR_END__[1] __attribute__ ((section (\".dtors\")))\n+     = { (func_ptr) 0 };\n+\n+/* Run all global constructors for the program.\n+   Note that they are run in reverse order.  */\n+\n+static void __do_global_ctors ()\n+asm (\"__do_global_ctors\") __attribute__ ((section (\".text\")));\n+\n+static void\n+__do_global_ctors ()\n+{\n+  func_ptr *p;\n+  for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)\n+    (*p) ();\n+}\n+\n+/* .init section end.\n+   This must live at the end of the .init section.  */\n+\n+asm (\"\n+\t.section .init\\n\n+\tbl.nd __do_global_ctors\n+\tld blink,[fp,4]\\n\n+\tj.d blink\\n\n+\tld.a fp,[sp,16]\\n\n+\");\n+\n+/* .fini section end.\n+   This must live at the end of the .fini section.  */\n+\n+asm (\"\n+\t.section .fini\\n\n+\tld blink,[fp,4]\\n\n+\tj.d blink\\n\n+\tld.a fp,[sp,16]\\n\n+\");\n+\n+#endif /* CRT_FINI */"}]}