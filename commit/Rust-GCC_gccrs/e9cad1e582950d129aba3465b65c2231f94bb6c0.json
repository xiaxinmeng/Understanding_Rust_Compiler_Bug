{"sha": "e9cad1e582950d129aba3465b65c2231f94bb6c0", "node_id": "C_kwDOANBUbNoAKGU5Y2FkMWU1ODI5NTBkMTI5YWJhMzQ2NWI2NWMyMjMxZjk0YmI2YzA", "commit": {"author": {"name": "Andrew Carlotti", "email": "andrew.carlotti@arm.com", "date": "2022-07-13T08:01:51Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-07-13T08:01:51Z"}, "message": "aarch64: Don't return invalid GIMPLE assign statements\n\naarch64_general_gimple_fold_builtin doesn't check whether the LHS of a\nfunction call is null before converting it to an assign statement. To avoid\nreturning an invalid GIMPLE statement in this case, we instead assign the\nexpression result to a new (unused) variable.\n\nThis change only affects code that:\n1) Calls an intrinsic function that has no side effects;\n2) Does not use or store the value returned by the intrinsic;\n3) Uses parameters that prevent the front-end eliminating the call prior to\ngimplification.\n\nThe ICE is unlikely to have occurred in the wild, as it relies on the presence\nof a redundant intrinsic call.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.cc\n\t(aarch64_general_gimple_fold_builtin): Add fixup for invalid GIMPLE.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/advsimd-intrinsics/ignored_return_1.c: New test.", "tree": {"sha": "f937c8637e8e1db45766125626b3ad54cdb00b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f937c8637e8e1db45766125626b3ad54cdb00b7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9cad1e582950d129aba3465b65c2231f94bb6c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cad1e582950d129aba3465b65c2231f94bb6c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9cad1e582950d129aba3465b65c2231f94bb6c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cad1e582950d129aba3465b65c2231f94bb6c0/comments", "author": {"login": "andrewcarlotti", "id": 11681428, "node_id": "MDQ6VXNlcjExNjgxNDI4", "avatar_url": "https://avatars.githubusercontent.com/u/11681428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewcarlotti", "html_url": "https://github.com/andrewcarlotti", "followers_url": "https://api.github.com/users/andrewcarlotti/followers", "following_url": "https://api.github.com/users/andrewcarlotti/following{/other_user}", "gists_url": "https://api.github.com/users/andrewcarlotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewcarlotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewcarlotti/subscriptions", "organizations_url": "https://api.github.com/users/andrewcarlotti/orgs", "repos_url": "https://api.github.com/users/andrewcarlotti/repos", "events_url": "https://api.github.com/users/andrewcarlotti/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewcarlotti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c479c40f8c8fee0fb70e8a365b61c55739f448e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c479c40f8c8fee0fb70e8a365b61c55739f448e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c479c40f8c8fee0fb70e8a365b61c55739f448e1"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "4621c6d43da515c02f1a7ecf657b0cf6338e463f", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9cad1e582950d129aba3465b65c2231f94bb6c0/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9cad1e582950d129aba3465b65c2231f94bb6c0/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=e9cad1e582950d129aba3465b65c2231f94bb6c0", "patch": "@@ -2907,6 +2907,16 @@ aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt,\n     default:\n       break;\n     }\n+\n+  /* GIMPLE assign statements (unlike calls) require a non-null lhs. If we\n+     created an assign statement with a null lhs, then fix this by assigning\n+     to a new (and subsequently unused) variable. */\n+  if (new_stmt && is_gimple_assign (new_stmt) && !gimple_assign_lhs (new_stmt))\n+    {\n+      tree new_lhs = make_ssa_name (gimple_call_return_type (stmt));\n+      gimple_assign_set_lhs (new_stmt, new_lhs);\n+    }\n+\n   return new_stmt;\n }\n "}, {"sha": "345307456b175307f5cb22de5e59cfc6254f2737", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/ignored_return_1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9cad1e582950d129aba3465b65c2231f94bb6c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fignored_return_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9cad1e582950d129aba3465b65c2231f94bb6c0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fignored_return_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fignored_return_1.c?ref=e9cad1e582950d129aba3465b65c2231f94bb6c0", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+\n+#include <arm_neon.h>\n+\n+int8_t *bar();\n+\n+void foo() {\n+  __builtin_aarch64_ld1v16qi(bar());\n+}"}]}