{"sha": "639a8102c038087dc5c48115522a5e1f9259d38e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM5YTgxMDJjMDM4MDg3ZGM1YzQ4MTE1NTIyYTVlMWY5MjU5ZDM4ZQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2003-03-21T23:25:21Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2003-03-21T23:25:21Z"}, "message": "m68hc11.h (ASM_DECLARE_FUNCTION_NAME): Fix typo in writing .interrupt command.\n\n\t* config/m68hc11/m68hc11.h (ASM_DECLARE_FUNCTION_NAME): Fix typo in\n\twriting .interrupt command.\n\t* config/m68hc11/m68hc11.md (\"call\"): Look at the symbol to see\n\tif it's a far or near function.\n\t(\"call_value\"): Likewise.\n\t* config/m68hc11/m68hc11.c (m68hc11_attribute_table): Add far and\n\tnear attributes.\n\t(m68hc11_handle_fntype_attribute): Accept attributes on methods.\n\t(m68hc11_override_options): Ignore -mlong-calls for 68HC11.\n\t(m68hc11_initial_elimination_offset): Set current_function_far\n\taccording to attributes.\n\t(expand_prologue): Likewise.\n\t(trap_handler_symbol): New global to keep track of trap handlers.\n\t(m68hc11_encode_section_info): Mark symbol as far if needed; set\n\ttrap symbol.\n\t(m68hc11_is_far_symbol): New function.\n\t(m68hc11_is_trap_symbol): New function.\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_is_far_symbol): Declare.\n\t(m68hc11_is_trap_symbol): Declare.\n\nFrom-SVN: r64685", "tree": {"sha": "f9e71f168442d54c90c2837ecd5516d584bd85d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9e71f168442d54c90c2837ecd5516d584bd85d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/639a8102c038087dc5c48115522a5e1f9259d38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639a8102c038087dc5c48115522a5e1f9259d38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/639a8102c038087dc5c48115522a5e1f9259d38e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639a8102c038087dc5c48115522a5e1f9259d38e/comments", "author": null, "committer": null, "parents": [{"sha": "d7394366f2888097b0cb0cc38fc865d78e35b848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7394366f2888097b0cb0cc38fc865d78e35b848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7394366f2888097b0cb0cc38fc865d78e35b848"}], "stats": {"total": 116, "additions": 105, "deletions": 11}, "files": [{"sha": "c07cfb95fd8bb29d2b79590af4e8e4fe883c0a69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639a8102c038087dc5c48115522a5e1f9259d38e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639a8102c038087dc5c48115522a5e1f9259d38e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=639a8102c038087dc5c48115522a5e1f9259d38e", "patch": "@@ -1,3 +1,25 @@\n+2003-03-22  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.h (ASM_DECLARE_FUNCTION_NAME): Fix typo in\n+\twriting .interrupt command.\n+\t* config/m68hc11/m68hc11.md (\"call\"): Look at the symbol to see\n+\tif it's a far or near function.\n+\t(\"call_value\"): Likewise.\n+\t* config/m68hc11/m68hc11.c (m68hc11_attribute_table): Add far and\n+\tnear attributes.\n+\t(m68hc11_handle_fntype_attribute): Accept attributes on methods.\n+\t(m68hc11_override_options): Ignore -mlong-calls for 68HC11.\n+\t(m68hc11_initial_elimination_offset): Set current_function_far\n+\taccording to attributes.\n+\t(expand_prologue): Likewise.\n+\t(trap_handler_symbol): New global to keep track of trap handlers.\n+\t(m68hc11_encode_section_info): Mark symbol as far if needed; set\n+\ttrap symbol.\n+\t(m68hc11_is_far_symbol): New function.\n+\t(m68hc11_is_trap_symbol): New function.\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_is_far_symbol): Declare.\n+\t(m68hc11_is_trap_symbol): Declare.\n+\n Fri Mar 21 23:12:33 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (ix86_compute_frame_layout): Recompute fast prologues"}, {"sha": "20b5ae02fa4ed57fc3b1ee6999574722bcb5efd7", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639a8102c038087dc5c48115522a5e1f9259d38e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639a8102c038087dc5c48115522a5e1f9259d38e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=639a8102c038087dc5c48115522a5e1f9259d38e", "patch": "@@ -141,6 +141,9 @@ extern int m68hc11_function_arg_padding PARAMS((enum machine_mode, tree));\n \n extern void m68hc11_function_epilogue PARAMS((FILE*,int));\n \n+extern int m68hc11_is_far_symbol PARAMS((rtx));\n+extern int m68hc11_is_trap_symbol PARAMS((rtx));\n+\n #endif /* TREE_CODE */\n \n extern HOST_WIDE_INT m68hc11_min_offset;"}, {"sha": "1a0cd80aed0f67b5063881d54a03fe13d4dcce41", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639a8102c038087dc5c48115522a5e1f9259d38e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639a8102c038087dc5c48115522a5e1f9259d38e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=639a8102c038087dc5c48115522a5e1f9259d38e", "patch": "@@ -276,6 +276,7 @@ m68hc11_override_options ()\n       m68hc11_tmp_regs_class = D_REGS;\n       if (m68hc11_soft_reg_count == 0 && !TARGET_M6812)\n \tm68hc11_soft_reg_count = \"4\";\n+      target_flags &= ~MASK_LONG_CALLS;\n     }\n \n   /* Configure for a 68hc12 processor.  */\n@@ -1232,9 +1233,16 @@ const struct attribute_spec m68hc11_attribute_table[] =\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n   { \"interrupt\", 0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n   { \"trap\",      0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n+  { \"far\",       0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n+  { \"near\",      0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n   { NULL,        0, 0, false, false, false, NULL }\n };\n \n+/* Keep track of the symbol which has a `trap' attribute and which uses\n+   the `swi' calling convention.  Since there is only one trap, we only\n+   record one such symbol.  If there are several, a warning is reported.  */\n+static rtx trap_handler_symbol = 0;\n+\n /* Handle an attribute requiring a FUNCTION_TYPE, FIELD_DECL or TYPE_DECL;\n    arguments as in struct attribute_spec.handler.  */\n static tree\n@@ -1246,6 +1254,7 @@ m68hc11_handle_fntype_attribute (node, name, args, flags, no_add_attrs)\n      bool *no_add_attrs;\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE\n+      && TREE_CODE (*node) != METHOD_TYPE\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n@@ -1268,16 +1277,56 @@ m68hc11_encode_section_info (decl, first)\n {\n   tree func_attr;\n   int trap_handler;\n+  int is_far = 0;\n   rtx rtl;\n-\n+  \n   if (TREE_CODE (decl) != FUNCTION_DECL)\n     return;\n \n   rtl = DECL_RTL (decl);\n \n   func_attr = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n+\n+\n+  if (lookup_attribute (\"far\", func_attr) != NULL_TREE)\n+    is_far = 1;\n+  else if (lookup_attribute (\"near\", func_attr) == NULL_TREE)\n+    is_far = TARGET_LONG_CALLS != 0;\n+\n   trap_handler = lookup_attribute (\"trap\", func_attr) != NULL_TREE;\n-  SYMBOL_REF_FLAG (XEXP (rtl, 0)) = trap_handler;\n+  if (trap_handler && is_far)\n+    {\n+      warning (\"`trap' and `far' attributes are not compatible, ignoring `far'\");\n+      trap_handler = 0;\n+    }\n+  if (trap_handler)\n+    {\n+      if (trap_handler_symbol != 0)\n+        warning (\"`trap' attribute is already used\");\n+      else\n+        trap_handler_symbol = XEXP (rtl, 0);\n+    }\n+  SYMBOL_REF_FLAG (XEXP (rtl, 0)) = is_far;\n+}\n+\n+int\n+m68hc11_is_far_symbol (sym)\n+     rtx sym;\n+{\n+  if (GET_CODE (sym) == MEM)\n+    sym = XEXP (sym, 0);\n+\n+  return SYMBOL_REF_FLAG (sym);\n+}\n+\n+int\n+m68hc11_is_trap_symbol (sym)\n+     rtx sym;\n+{\n+  if (GET_CODE (sym) == MEM)\n+    sym = XEXP (sym, 0);\n+\n+  return trap_handler_symbol != 0 && rtx_equal_p (trap_handler_symbol, sym);\n }\n \f\n \n@@ -1317,6 +1366,14 @@ m68hc11_initial_elimination_offset (from, to)\n   /* For a trap handler, we must take into account the registers which\n      are pushed on the stack during the trap (except the PC).  */\n   func_attr = TYPE_ATTRIBUTES (TREE_TYPE (current_function_decl));\n+\n+  if (lookup_attribute (\"far\", func_attr) != 0)\n+    current_function_far = 1;\n+  else if (lookup_attribute (\"near\", func_attr) != 0)\n+    current_function_far = 0;\n+  else\n+    current_function_far = TARGET_LONG_CALLS != 0;\n+\n   trap_handler = lookup_attribute (\"trap\", func_attr) != NULL_TREE;\n   if (trap_handler && from == ARG_POINTER_REGNUM)\n     size = 7;\n@@ -1611,6 +1668,12 @@ expand_prologue ()\n   current_function_interrupt = lookup_attribute (\"interrupt\",\n \t\t\t\t\t\t func_attr) != NULL_TREE;\n   current_function_trap = lookup_attribute (\"trap\", func_attr) != NULL_TREE;\n+  if (lookup_attribute (\"far\", func_attr) != NULL_TREE)\n+    current_function_far = 1;\n+  else if (lookup_attribute (\"near\", func_attr) != NULL_TREE)\n+    current_function_far = 0;\n+  else\n+    current_function_far = TARGET_LONG_CALLS != 0;\n \n   /* Get the scratch register to build the frame and push registers.\n      If the first argument is a 32-bit quantity, the D+X registers"}, {"sha": "4ba138908b236ded5600f21929b038fc457b6446", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639a8102c038087dc5c48115522a5e1f9259d38e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639a8102c038087dc5c48115522a5e1f9259d38e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=639a8102c038087dc5c48115522a5e1f9259d38e", "patch": "@@ -1560,7 +1560,7 @@ do {                                                                    \\\n         {\t\t\t\t\t\t\\\n \t  fprintf (FILE, \"\\t.interrupt\\t\");\t\t\\\n \t  assemble_name (FILE, NAME);\t\t\t\\\n-\t  putc ('\\b', FILE);\t\t\t\t\\\n+\t  putc ('\\n', FILE);\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n       ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\\\n       ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\\"}, {"sha": "7b202c4c8e3b6a4d09dc10e542d7d0fea120e6fe", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639a8102c038087dc5c48115522a5e1f9259d38e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639a8102c038087dc5c48115522a5e1f9259d38e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=639a8102c038087dc5c48115522a5e1f9259d38e", "patch": "@@ -6390,14 +6390,17 @@\n   \"\"\n  \"*\n {\n-  int far_call = current_function_far;\n-\n   if (GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF)\n     {\n-      if (SYMBOL_REF_FLAG (XEXP (operands[0], 0)) == 1)\n+      if (m68hc11_is_far_symbol (operands[0]))\n+        {\n+\t  output_asm_insn (\\\"call\\\\t%0\\\", operands);\n+\t  return \\\"\\\";\n+\t}\n+      if (m68hc11_is_trap_symbol (operands[0]))\n         return \\\"swi\\\";\n       else\n-        return far_call ? \\\"call\\\\t%0\\\" : \\\"bsr\\\\t%0\\\";\n+        return \\\"bsr\\\\t%0\\\";\n     }\n   else\n     {\n@@ -6412,14 +6415,17 @@\n   \"\"\n  \"*\n {\n-  int far_call = current_function_far;\n-\n   if (GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n     {\n-      if (SYMBOL_REF_FLAG (XEXP (operands[1], 0)) == 1)\n+      if (m68hc11_is_far_symbol (operands[1]))\n+        {\n+\t  output_asm_insn (\\\"call\\\\t%1\\\", operands);\n+\t  return \\\"\\\";\n+\t}\n+      if (m68hc11_is_trap_symbol (operands[0]))\n         return \\\"swi\\\";\n       else\n-        return far_call ? \\\"call\\\\t%1\\\" : \\\"bsr\\\\t%1\\\";\n+        return \\\"bsr\\\\t%1\\\";\n     }\n   else\n     {"}]}