{"sha": "50ddbd0282e06614b29f0d3f3be5fbe70085a8bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBkZGJkMDI4MmUwNjYxNGIyOWYwZDNmM2JlNWZiZTcwMDg1YThiZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-15T09:51:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-15T21:46:13Z"}, "message": "analyzer: fix ICE when merging constraints w/o transitivity [PR96650]\n\nPR analyzer/96650 reports an assertion failure when merging the\nintersection of two sets of constraints, due to the resulting\nconstraints being infeasible.\n\nIt turns out that the two input sets were each infeasible if\ntransitivity were considered, but -fanalyzer-transitivity was off.\nHowever for this case, the merging code was \"discovering\" the\ntransitive infeasibility of the intersection of the constraints even\nwhen -fanalyzer-transitivity is off, triggering an assertion failure.\n\nI attempted various fixes for this, but each of them would have\nintroduced O(N^2) logic into the constraint-handling code into the\n-fno-analyzer-transitivity case (with N == the number of constraints).\n\nThis patch fixes the ICE by tweaking the assertion, so that we\nsilently drop such constraints if -fanalyzer-transitivity is off.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/96650\n\t* constraint-manager.cc (merger_fact_visitor::on_fact): Replace\n\tassertion that add_constraint succeeded with an assertion that\n\tif it fails, -fanalyzer-transitivity is off.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/96650\n\t* gcc.dg/analyzer/pr96650-1-notrans.c: New test.\n\t* gcc.dg/analyzer/pr96650-1-trans.c: New test.\n\t* gcc.dg/analyzer/pr96650-2-notrans.c: New test.\n\t* gcc.dg/analyzer/pr96650-2-trans.c: New test.", "tree": {"sha": "bf10d46f9bb5455675a79c99bc7d6c14e105fbf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf10d46f9bb5455675a79c99bc7d6c14e105fbf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b9bdd52037061d7a5bd77d177b060c93c528a5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b9bdd52037061d7a5bd77d177b060c93c528a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b9bdd52037061d7a5bd77d177b060c93c528a5d"}], "stats": {"total": 130, "additions": 129, "deletions": 1}, "files": [{"sha": "521501fd4f459a62b59218abff28ac179f9de39a", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=50ddbd0282e06614b29f0d3f3be5fbe70085a8bd", "patch": "@@ -1752,7 +1752,15 @@ class merger_fact_visitor : public fact_visitor\n     if (m_cm_b->eval_condition (lhs, code, rhs).is_true ())\n       {\n \tbool sat = m_out->add_constraint (lhs, code, rhs);\n-\tgcc_assert (sat);\n+\tif (!sat)\n+\t  {\n+\t    /* If -fanalyzer-transitivity is off, we can encounter cases\n+\t       where at least one of the two constraint_managers being merged\n+\t       is infeasible, but we only discover that infeasibility\n+\t       during merging (PR analyzer/96650).\n+\t       Silently drop such constraints.  */\n+\t    gcc_assert (!flag_analyzer_transitivity);\n+\t  }\n       }\n   }\n "}, {"sha": "94c755540b0ab8338ac28c5f973acf1bd3e53616", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96650-1-notrans.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-1-notrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-1-notrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-1-notrans.c?ref=50ddbd0282e06614b29f0d3f3be5fbe70085a8bd", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-additional-options \"-O2 -fno-analyzer-transitivity\" } */\n+\n+int *wf;\n+\n+void\n+yd (void);\n+\n+int\n+cy (void);\n+\n+int *\n+ee (int hp)\n+{\n+  if (hp != 0)\n+    yd ();\n+\n+  return 0;\n+}\n+\n+void\n+z0 (int co)\n+{\n+  int l4 = sizeof (int);\n+\n+ aq:\n+  wf = ee (l4);\n+  if (l4 < co)\n+    l4 = cy () + sizeof (int);\n+  goto aq;\n+}"}, {"sha": "b20630bb8069ad72a13d5c7b1f2a119a260e2674", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96650-1-trans.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-1-trans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-1-trans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-1-trans.c?ref=50ddbd0282e06614b29f0d3f3be5fbe70085a8bd", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-additional-options \"-O2 -fanalyzer-transitivity\" } */\n+\n+int *wf;\n+\n+void\n+yd (void);\n+\n+int\n+cy (void);\n+\n+int *\n+ee (int hp)\n+{\n+  if (hp != 0)\n+    yd ();\n+\n+  return 0;\n+}\n+\n+void\n+z0 (int co)\n+{\n+  int l4 = sizeof (int);\n+\n+ aq:\n+  wf = ee (l4);\n+  if (l4 < co)\n+    l4 = cy () + sizeof (int);\n+  goto aq;\n+}"}, {"sha": "fc7c045a32f2859877cb3f816ff4e70378e5b05a", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96650-2-notrans.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-2-notrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-2-notrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-2-notrans.c?ref=50ddbd0282e06614b29f0d3f3be5fbe70085a8bd", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-additional-options \"-fno-analyzer-transitivity\" } */\n+\n+#include \"analyzer-decls.h\"\n+\n+int foo (void);\n+\n+/* Infeasible path, requiring transitivity to find.  */\n+\n+void test_1 (int co, int y)\n+{\n+  if (4 < co)\n+    if (co < y)\n+      if (y == 0)\n+\t__analyzer_dump_path (); /* { dg-message \"path\" } */\n+}\n+\n+/* Infeasible path, requiring transitivity to find, with a merger.  */\n+\n+void test_2 (int co, int y, int z)\n+{\n+  if (4 < co)\n+    if (co < y)\n+      if (y == 0)\n+\t{\n+\t  while (foo ())\n+\t    {\n+\t    }\n+\t  __analyzer_dump_path (); /* { dg-message \"path\" } */\n+\t}\n+}"}, {"sha": "8d0c295087656c1d9d5dfa65587db74989ad1f55", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96650-2-trans.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-2-trans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ddbd0282e06614b29f0d3f3be5fbe70085a8bd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-2-trans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96650-2-trans.c?ref=50ddbd0282e06614b29f0d3f3be5fbe70085a8bd", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-additional-options \"-fanalyzer-transitivity\" } */\n+\n+#include \"analyzer-decls.h\"\n+\n+int foo (void);\n+\n+/* Infeasible path, requiring transitivity to find.  */\n+\n+void test_1 (int co, int y)\n+{\n+  if (4 < co)\n+    if (co < y)\n+      if (y == 0)\n+\t__analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+}\n+\n+/* Infeasible path, requiring transitivity to find, with a merger.  */\n+\n+void test_2 (int co, int y, int z)\n+{\n+  if (4 < co)\n+    if (co < y)\n+      if (y == 0)\n+\t{\n+\t  while (foo ())\n+\t    {\n+\t    }\n+\t  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+\t}\n+}"}]}