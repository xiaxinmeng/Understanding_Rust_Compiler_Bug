{"sha": "ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U5NjE0NjhiNzBmYTJiY2JiNTkzYjZiMWEzMzQ1MjUwZjI0ZTBhYQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-07-28T02:44:06Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-07-28T02:44:06Z"}, "message": "TLtest.java: Reduce sleep time.\n\n2004-07-27  Bryce McKinlay  <mckinlay@redhat.com>\n\n\t* testsuite/libjava.lang/TLtest.java: Reduce sleep time.\n\t* testsuite/libjava.lang/Thread_Alive.java: Remove old email address.\n\tReduce sleep time.\n\t* testsuite/libjava.lang/Thread_HoldsLock.java: Modify to work around\n\tcompiler bug.\n\t* testsuite/libjava.lang/Thread_Interrupt.java: Remove old email\n\taddress. Reduce sleep times. Synchronize with target threads before\n\tattempting to interrupt them. Don't try to calibrate yeild count,\n\tinstead, always loop for a fixed time.\n\t* testsuite/libjava.lang/Thread_Join.java: Remove old email address.\n\t* testsuite/libjava.lang/Thread_Monitor.java: Likewise.\n\t* testsuite/libjava.lang/Thread_Wait.java: Likewise.\n\t* testsuite/libjava.lang/Thread_Wait_2.java: Likewise.\n\t* testsuite/libjava.lang/Thread_Wait_Interrupt.java: Likewise.\n\t* testsuite/libjava.lang/pr179.java: Likewise.\n\t* testsuite/libjava.lang/Thread_Sleep.java: Likewise. Reduce sleep\n\ttime. Remove upper bounds check on sleep time.\n\nFrom-SVN: r85248", "tree": {"sha": "06674ef80e2e86692b58726dc0403136307bc01b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06674ef80e2e86692b58726dc0403136307bc01b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/comments", "author": null, "committer": null, "parents": [{"sha": "1a837f7746a6627e3651119531de18fcd95d6dfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a837f7746a6627e3651119531de18fcd95d6dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a837f7746a6627e3651119531de18fcd95d6dfd"}], "stats": {"total": 104, "additions": 58, "deletions": 46}, "files": [{"sha": "09ef462660057b6894fb80c8e609050bbec94ca2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -1,3 +1,23 @@\n+2004-07-27  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* testsuite/libjava.lang/TLtest.java: Reduce sleep time.\n+\t* testsuite/libjava.lang/Thread_Alive.java: Remove old email address.\n+\tReduce sleep time.\n+\t* testsuite/libjava.lang/Thread_HoldsLock.java: Modify to work around\n+\tcompiler bug.\n+\t* testsuite/libjava.lang/Thread_Interrupt.java: Remove old email \n+\taddress. Reduce sleep times. Synchronize with target threads before\n+\tattempting to interrupt them. Don't try to calibrate yeild count,\n+\tinstead, always loop for a fixed time.\n+\t* testsuite/libjava.lang/Thread_Join.java: Remove old email address.\n+\t* testsuite/libjava.lang/Thread_Monitor.java: Likewise.\n+\t* testsuite/libjava.lang/Thread_Wait.java: Likewise.\n+\t* testsuite/libjava.lang/Thread_Wait_2.java: Likewise.\n+\t* testsuite/libjava.lang/Thread_Wait_Interrupt.java: Likewise.\n+\t* testsuite/libjava.lang/pr179.java: Likewise.\n+\t* testsuite/libjava.lang/Thread_Sleep.java: Likewise. Reduce sleep\n+\ttime. Remove upper bounds check on sleep time. \n+\n 2004-07-27  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* testsuite/libjava.lang/Thread_HoldsLock.java: New test case."}, {"sha": "6ddd0cbcd89f3ea9d6ee746b0485d39b1c0a97a6", "filename": "libjava/testsuite/libjava.lang/TLtest.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FTLtest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FTLtest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FTLtest.java?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -46,7 +46,7 @@ public void run () {\n \t    d.set (Integer.toString (value));\n \n \t    try {\n-\t\tsleep((int)(Math.random() * 500));\n+\t\tsleep((int)((Math.random() * 20)));\n \t    } catch (InterruptedException e) {}\n \t}\n "}, {"sha": "e885e1624cd1ed0788cdad0d9283b1c89507b202", "filename": "libjava/testsuite/libjava.lang/Thread_Alive.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Alive.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Alive.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Alive.java?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -1,6 +1,5 @@\n // Test the status of the isAlive() flag before, during, and after thread \n // execution. Check that thread's threadgroup is null after thread exits.\n-// Origin: Bryce McKinlay <bryce@albatross.co.nz>\n \n public class Thread_Alive implements Runnable\n {\n@@ -12,7 +11,7 @@ public static void main(String args[]) throws InterruptedException\n     t.start();\n     System.out.println(t.isAlive());\n \n-    Thread.sleep(100);\n+    Thread.sleep(50);\n     \n     synchronized (ta)\n     {"}, {"sha": "62119a16083d6537b44580a4a10227b117d10d5c", "filename": "libjava/testsuite/libjava.lang/Thread_HoldsLock.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_HoldsLock.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_HoldsLock.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_HoldsLock.java?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -20,8 +20,8 @@ public static void main(String args[]) throws InterruptedException\n   \n   public void check()\n   {\n-    boolean held = Thread.currentThread().holdsLock(lock);\n-    System.out.println(held);\n+    Thread this_thread = Thread.currentThread();\n+    System.out.println(this_thread.holdsLock(lock));\n   }\n }\n "}, {"sha": "a69247422fea14e1ca5bd40c3639bcb1d9afe21b", "filename": "libjava/testsuite/libjava.lang/Thread_Interrupt.java", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Interrupt.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Interrupt.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Interrupt.java?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -1,11 +1,21 @@\n // Test interrupt() behaviour on a thread in wait(), sleep(), and spinning \n // in a loop.\n-// Origin: Bryce McKinlay <bryce@albatross.co.nz>\n \n-class Waiter extends Thread\n+class ThreadBase extends Thread\n+{\n+  boolean ready = false;\n+  \n+  synchronized void ready()\n+  {\n+    ready = true;\n+  }\n+}\n+\n+class Waiter extends ThreadBase\n {\n   public synchronized void run()\n   {\n+    super.ready();\n     System.out.println (\"wait()\");\n     try\n     {\n@@ -22,14 +32,15 @@ public synchronized void run()\n   }\n }\n \n-class Sleeper extends Thread\n+class Sleeper extends ThreadBase\n {\n   public void run()\n   {\n+    super.ready();\n     System.out.println (\"sleep()\");\n     try\n     {\n-      sleep(2000);\n+      sleep(5000);\n       System.out.println(\"Error: sleep() completed normally.\");\n     }\n     catch (InterruptedException x)\n@@ -42,40 +53,23 @@ public void run()\n   }\n }\n \n-class Looper extends Thread\n+class Looper extends ThreadBase\n {\n-  // Return the number of Thread.yield()s we can do in 500ms.\n-  static long calibrate ()\n-  {\n-    long i = 1;\n-\n-    for (int tries = 0; tries < 40; tries++)\n-      {\n-\tlong t = System.currentTimeMillis();\n-\tfor (long n = 0; n < i; n++)\n-\t  Thread.yield();\n-\tlong t_prime = System.currentTimeMillis();\n-\tif (t_prime - t > 500)\n-\t  return i;\n-\ti *= 2;\n-      }\n-    // We have no system clock.  Give up.\n-    throw new RuntimeException (\"We have no system clock.\");\n-  }\n-\n-  static long yields = calibrate ();\n-\n   public void run()\n   {\n+    super.ready();\n     System.out.println (\"Busy waiting\");\n \n     int count = 0;\n-    for (long i=0; i < yields; i++)\n+    long start = System.currentTimeMillis();\n+    while (true)\n       {\n         Thread.yield();\n-\tcount += 5;\n \tif (isInterrupted ())\n \t  break;\n+\tlong now = System.currentTimeMillis();\t\n+\tif ((now - start) > 5000)\n+\t  break;\n       }\n     synchronized (this)\n     {  \n@@ -91,10 +85,11 @@ public void run()\n   }\n }\n \n-class Joiner extends Thread\n+class Joiner extends ThreadBase\n {\n   public void run()\n   {\n+    super.ready();\n     System.out.println(\"join()\");\n     try\n     {\n@@ -133,11 +128,17 @@ public static void main(String args[])\n     sleep_and_interrupt (j);\n   }\n   \n-  public static void sleep_and_interrupt(Thread t)\n+  public static void sleep_and_interrupt(ThreadBase t)\n   {\n     try\n     {\n-      Thread.sleep (250);\n+      synchronized (t)\n+        {\n+\t  while (!t.ready)\n+\t    t.wait(10);\n+\t}\n+    \n+      Thread.sleep (50);\n       t.interrupt ();\n       long t1 = System.currentTimeMillis();\n       t.join (5000);"}, {"sha": "9f7f2fb1590cf5d0a9348269e6f0b8d6563d1f0e", "filename": "libjava/testsuite/libjava.lang/Thread_Join.java", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Join.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Join.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Join.java?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -1,5 +1,4 @@\n // Many threads join a single thread.\n-// Origin: Bryce McKinlay <bryce@albatross.co.nz>\n \n class Sleeper implements Runnable\n {"}, {"sha": "649a75c762c1d3d70e7f3d297903e38f0103b3cd", "filename": "libjava/testsuite/libjava.lang/Thread_Monitor.java", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Monitor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Monitor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Monitor.java?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -1,5 +1,4 @@\n // Test that monitor locks work and are recursive.\n-// Origin: Bryce McKinlay <bryce@albatross.co.nz>\n \n class T implements Runnable\n {"}, {"sha": "7220a6a3a6a364475cbd160cf4c0c9897882ba5c", "filename": "libjava/testsuite/libjava.lang/Thread_Sleep.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Sleep.java?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -1,5 +1,4 @@\n // Test that Thread.sleep() works.\n-// Origin: Bryce McKinlay <bryce@albatross.co.nz>\n \n public class Thread_Sleep\n {\n@@ -9,9 +8,9 @@ public static void main(String args[])\n     {\n       long start = System.currentTimeMillis();\n       System.out.println(\"sleeping\");\n-      Thread.sleep(1000);\n+      Thread.sleep(50);\n       long end = System.currentTimeMillis();\n-      if ((end - start) > 1100 || (end - start) < 990)\n+      if ((end - start) < 50)\n         System.out.println (\"failed\");\n       else\n \tSystem.out.println(\"ok\");"}, {"sha": "88508243a0ae654d23c2a43fc9418c23470723a2", "filename": "libjava/testsuite/libjava.lang/Thread_Wait.java", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait.java?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -1,5 +1,4 @@\n // Test basic thread creation and wait/notify functionality.\n-// Origin: Bryce McKinlay <bryce@albatross.co.nz>\n \n public class Thread_Wait implements Runnable\n {"}, {"sha": "7ee51726c29b9978aa2087bed9378d2196c2c2dc", "filename": "libjava/testsuite/libjava.lang/Thread_Wait_2.java", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait_2.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait_2.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait_2.java?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -1,6 +1,5 @@\n // Create many threads waiting on a monitor. Interrupt some of them. Do the \n // others wake up correctly with notify() and/or notifyAll()?\n-// Origin: Bryce McKinlay <bryce@albatross.co.nz>\n \n import java.util.Vector;\n "}, {"sha": "609527cda9963e78a09e9b684b7461fdf261cd1e", "filename": "libjava/testsuite/libjava.lang/Thread_Wait_Interrupt.java", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait_Interrupt.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait_Interrupt.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait_Interrupt.java?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -1,6 +1,5 @@\n // Create two threads waiting on a monitor. Interrupt one of them. Does the \n // other wake up correctly?\n-// Origin: Bryce McKinlay <bryce@albatross.co.nz>\n \n class Waiter extends Thread\n {"}, {"sha": "7124dedeef13361171a547dffd293fb8a47230ac", "filename": "libjava/testsuite/libjava.lang/pr179.java", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2Fpr179.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce961468b70fa2bcbb593b6b1a3345250f24e0aa/libjava%2Ftestsuite%2Flibjava.lang%2Fpr179.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2Fpr179.java?ref=ce961468b70fa2bcbb593b6b1a3345250f24e0aa", "patch": "@@ -4,8 +4,6 @@\n // Class.isInstance() and Class.isAssignableFrom(), and isAssignableFrom()\n // functionality in the event that an interface argument that is not \n // implemented by any loaded class is given.\n-//\n-// Bryce McKinlay <bryce@albatross.co.nz>\n \n class A\n {"}]}