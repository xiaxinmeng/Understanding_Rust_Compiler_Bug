{"sha": "fed5a41fb1c2c91b77297fdd6d3731078f480441", "node_id": "C_kwDOANBUbNoAKGZlZDVhNDFmYjFjMmM5MWI3NzI5N2ZkZDZkMzczMTA3OGY0ODA0NDE", "commit": {"author": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-04-05T07:19:45Z"}, "committer": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-04-11T08:31:17Z"}, "message": "macros: add concat! macro\n\nSigned-off-by: Zixing Liu <liushuyu011@gmail.com>", "tree": {"sha": "ef4ff6dbee0aa56a50dec5fc9aef7df711f577bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef4ff6dbee0aa56a50dec5fc9aef7df711f577bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fed5a41fb1c2c91b77297fdd6d3731078f480441", "comment_count": 2, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE6x/rcKrl3aOwzUVJI9HORTRBlDcFAmJT51YACgkQI9HORTRB\nlDcpkBAAnIdzZzgdvCgUOvsFI7s6XkZan7QhK4yMURp8F4SPfYWcLcQpoIY1YolC\nDurebjMozitl2yqXwhVn8DbuQeDY3BCRWvbIXoKcTATliNzwDAzARLjbjM6RTfGM\nYElaHoF62Tw46JiPxVd59TH+W8hetrrys9RmSiKc7C9eO94uNyW27aU8Z3Rm7HBV\n3tgPs8Zb+PH8Cra1ct4xwBi8JibMPq/hp5kLcyIsulTyAMVEbBZyNzWipitWIREy\nyV5+bTuGl/RWU9yny5IoFyfcqzqQdDdsLRjOSzO/xSz6sEhp52ERTCT2T+pfDOT+\nSXO5Xq/WxwlFDY7UfvTrSzKK1UjDxMY4Z3U7UkY2LQdXbxobsSxoa6cBRRxZ2+yM\nGOcYkcTLpfxn7Ifu4Rh2KdZJF2UEDBZdgziPYp/NYNV0YlKGtKcxzOsaUmORV2mI\n78Xyjh9GbpNebMQwIl5vi6M6Le4yKeSpJ4e6RyxWFcCdyxbgRwIuk9pbgw0uaTCW\n3drGvezyG6CpBYTnR9B89oj3GQUJwIqJOCXwuVP1lNslvXVgwW7De3OILHFUDMsW\n2hJ6udT3/UTkeU2/bPUnpcQVWlLqKtblBycGlyVAgrSDuKEWDLvJvB0wus8F670Q\nUqhJY/MuGkpxuNxgKyDUbVua9s8pU3VkEsKSYVnd55HTfaU6GJY=\n=JEbv\n-----END PGP SIGNATURE-----", "payload": "tree ef4ff6dbee0aa56a50dec5fc9aef7df711f577bd\nparent e43a5c5373b341d217d2f5403f31f5174b8c4e2f\nauthor liushuyu <liushuyu011@gmail.com> 1649143185 -0600\ncommitter liushuyu <liushuyu011@gmail.com> 1649665877 -0600\n\nmacros: add concat! macro\n\nSigned-off-by: Zixing Liu <liushuyu011@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed5a41fb1c2c91b77297fdd6d3731078f480441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed5a41fb1c2c91b77297fdd6d3731078f480441", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed5a41fb1c2c91b77297fdd6d3731078f480441/comments", "author": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e43a5c5373b341d217d2f5403f31f5174b8c4e2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43a5c5373b341d217d2f5403f31f5174b8c4e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e43a5c5373b341d217d2f5403f31f5174b8c4e2f"}], "stats": {"total": 111, "additions": 102, "deletions": 9}, "files": [{"sha": "85520ec60a497244236ffe4c390d560cb00a9ec4", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 60, "deletions": 9, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed5a41fb1c2c91b77297fdd6d3731078f480441/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed5a41fb1c2c91b77297fdd6d3731078f480441/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=fed5a41fb1c2c91b77297fdd6d3731078f480441", "patch": "@@ -34,17 +34,12 @@ make_string (Location locus, std::string value)\n \t\t\t  PrimitiveCoreType::CORETYPE_STR, {}, locus));\n }\n \n-/* Parse a single string literal from the given delimited token tree,\n-   and return the LiteralExpr for it. Allow for an optional trailing comma,\n-   but otherwise enforce that these are the only tokens.  */\n+/* Match the end token of a macro given the start delimiter of the macro */\n \n-std::unique_ptr<AST::LiteralExpr>\n-parse_single_string_literal (AST::DelimTokenTree &invoc_token_tree,\n-\t\t\t     Location invoc_locus)\n+static inline TokenId\n+macro_end_token (AST::DelimTokenTree &invoc_token_tree,\n+\t\t Parser<MacroInvocLexer> &parser)\n {\n-  MacroInvocLexer lex (invoc_token_tree.to_token_stream ());\n-  Parser<MacroInvocLexer> parser (std::move (lex));\n-\n   auto last_token_id = TokenId::RIGHT_CURLY;\n   switch (invoc_token_tree.get_delim_type ())\n     {\n@@ -63,6 +58,22 @@ parse_single_string_literal (AST::DelimTokenTree &invoc_token_tree,\n       break;\n     }\n \n+  return last_token_id;\n+}\n+\n+/* Parse a single string literal from the given delimited token tree,\n+   and return the LiteralExpr for it. Allow for an optional trailing comma,\n+   but otherwise enforce that these are the only tokens.  */\n+\n+std::unique_ptr<AST::LiteralExpr>\n+parse_single_string_literal (AST::DelimTokenTree &invoc_token_tree,\n+\t\t\t     Location invoc_locus)\n+{\n+  MacroInvocLexer lex (invoc_token_tree.to_token_stream ());\n+  Parser<MacroInvocLexer> parser (std::move (lex));\n+\n+  auto last_token_id = macro_end_token (invoc_token_tree, parser);\n+\n   std::unique_ptr<AST::LiteralExpr> lit_expr = nullptr;\n \n   if (parser.peek_current_token ()->get_id () == STRING_LITERAL)\n@@ -252,4 +263,44 @@ MacroBuiltin::compile_error (Location invoc_locus, AST::MacroInvocData &invoc)\n   return AST::ASTFragment::create_error ();\n }\n \n+/* Expand builtin macro concat!(), which joins all the literal parameters\n+   into a string with no delimiter. */\n+\n+AST::ASTFragment\n+MacroBuiltin::concat (Location invoc_locus, AST::MacroInvocData &invoc)\n+{\n+  auto invoc_token_tree = invoc.get_delim_tok_tree ();\n+  MacroInvocLexer lex (invoc_token_tree.to_token_stream ());\n+  Parser<MacroInvocLexer> parser (std::move (lex));\n+  auto str = std::string ();\n+  bool has_error = false;\n+\n+  auto last_token_id = macro_end_token (invoc_token_tree, parser);\n+\n+  /* NOTE: concat! could accept no argument, so we don't have any checks here */\n+  while (parser.peek_current_token ()->get_id () != last_token_id)\n+    {\n+      auto lit_expr = parser.parse_literal_expr ();\n+      if (lit_expr)\n+\t{\n+\t  str += lit_expr->as_string ();\n+\t}\n+      else\n+\t{\n+\t  rust_error_at (parser.peek_current_token ()->get_locus (),\n+\t\t\t \"argument must be a constant literal\");\n+\t  has_error = true;\n+\t}\n+      parser.maybe_skip_token (COMMA);\n+    }\n+\n+  parser.skip_token (last_token_id);\n+\n+  if (has_error)\n+    return AST::ASTFragment::create_error ();\n+\n+  auto node = AST::SingleASTNode (make_string (invoc_locus, str));\n+  return AST::ASTFragment ({node});\n+}\n+\n } // namespace Rust"}, {"sha": "a581af4c9ab732feefe7cfff73090985730c77af", "filename": "gcc/rust/expand/rust-macro-builtins.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed5a41fb1c2c91b77297fdd6d3731078f480441/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed5a41fb1c2c91b77297fdd6d3731078f480441/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h?ref=fed5a41fb1c2c91b77297fdd6d3731078f480441", "patch": "@@ -80,6 +80,9 @@ class MacroBuiltin\n \n   static AST::ASTFragment compile_error (Location invoc_locus,\n \t\t\t\t\t AST::MacroInvocData &invoc);\n+\n+  static AST::ASTFragment concat (Location invoc_locus,\n+\t\t\t\t  AST::MacroInvocData &invoc);\n };\n } // namespace Rust\n "}, {"sha": "7bacc4c0f01b807b7ae2e00733fe07caf525cccf", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed5a41fb1c2c91b77297fdd6d3731078f480441/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed5a41fb1c2c91b77297fdd6d3731078f480441/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=fed5a41fb1c2c91b77297fdd6d3731078f480441", "patch": "@@ -754,6 +754,7 @@ Mappings::insert_macro_def (AST::MacroRulesDefinition *macro)\n       {\"include_bytes\", MacroBuiltin::include_bytes},\n       {\"include_str\", MacroBuiltin::include_str},\n       {\"compile_error\", MacroBuiltin::compile_error},\n+      {\"concat\", MacroBuiltin::concat},\n     };\n \n   auto builtin = builtin_macros.find (macro->get_rule_name ());"}, {"sha": "1fcd65fd648fc8535d562ea68fa4c6cacd28f4f6", "filename": "gcc/testsuite/rust/compile/builtin_macro_concat.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed5a41fb1c2c91b77297fdd6d3731078f480441/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_concat.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed5a41fb1c2c91b77297fdd6d3731078f480441/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_concat.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_concat.rs?ref=fed5a41fb1c2c91b77297fdd6d3731078f480441", "patch": "@@ -0,0 +1,15 @@\n+macro_rules! concat {\n+  () => {{}};\n+}\n+\n+fn main () {\n+  let not_literal = \"identifier\";\n+  concat! ();\n+  concat! (,); // { dg-error \"argument must be a constant literal\" }\n+  concat! (not_literal); // { dg-error \"argument must be a constant literal\" }\n+  concat! (\"message\");\n+  concat! (\"message\",);\n+  concat! (\"message\",1, true, false, 1.0, 10usize, 2000u64);\n+  concat! (\"message\",1, true, false, 1.0, 10usize, 2000u64,);\n+  concat! (\"m\", not_literal); // { dg-error \"argument must be a constant literal\" }\n+}"}, {"sha": "ca405857320b8c7ecf589f95b9c17da7f311d709", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_concat.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed5a41fb1c2c91b77297fdd6d3731078f480441/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed5a41fb1c2c91b77297fdd6d3731078f480441/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs?ref=fed5a41fb1c2c91b77297fdd6d3731078f480441", "patch": "@@ -0,0 +1,23 @@\n+// { dg-output \"\\ntest10btrue2.15\\ntest10bfalse2.151\\n\" }\n+macro_rules! concat {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: &str) {\n+    printf(\"%s\\n\" as *const str as *const i8, s as *const str as *const i8);\n+}\n+\n+fn main() -> i32 {\n+    let a = concat!();\n+    let b = concat!(\"test\", 10, 'b', true, 2.15);\n+    let c = concat!(\"test\", 10, 'b', false, 2.15, 1u64);\n+    print(a);\n+    print(b);\n+    print(c);\n+\n+    0\n+}"}]}