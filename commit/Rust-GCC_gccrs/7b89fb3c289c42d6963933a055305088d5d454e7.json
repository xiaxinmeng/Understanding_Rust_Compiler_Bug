{"sha": "7b89fb3c289c42d6963933a055305088d5d454e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I4OWZiM2MyODljNDJkNjk2MzkzM2EwNTUzMDUwODhkNWQ0NTRlNw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-08-26T18:37:23Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-26T18:37:23Z"}, "message": "re PR fortran/31298 ([F03] use mod, operator(+) => operator(.userOp.) not supported)\n\n2007-08-26  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/31298\n\t* module.c (mio_symbol_ref,mio_interface_rest):  Return pointer_info.\n\t(load_operator_interfaces): Support multible loading of an operator.\n\n2007-08-26  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/31298\n\t* gfortran.dg/use_10.f90: New.\n\nFrom-SVN: r127812", "tree": {"sha": "760b9877098698809b758175b8260e7ed865d150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/760b9877098698809b758175b8260e7ed865d150"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b89fb3c289c42d6963933a055305088d5d454e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b89fb3c289c42d6963933a055305088d5d454e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b89fb3c289c42d6963933a055305088d5d454e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b89fb3c289c42d6963933a055305088d5d454e7/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "041cf9874e0d49528ea7b284e935467bc1d9106d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041cf9874e0d49528ea7b284e935467bc1d9106d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/041cf9874e0d49528ea7b284e935467bc1d9106d"}], "stats": {"total": 90, "additions": 77, "deletions": 13}, "files": [{"sha": "81d7bddd56d09c558193e0d92cccf7df13bcc93a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b89fb3c289c42d6963933a055305088d5d454e7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b89fb3c289c42d6963933a055305088d5d454e7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7b89fb3c289c42d6963933a055305088d5d454e7", "patch": "@@ -1,3 +1,9 @@\n+2007-08-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/31298\n+\t* module.c (mio_symbol_ref,mio_interface_rest):  Return pointer_info.\n+\t(load_operator_interfaces): Support multible loading of an operator.\n+\n 2007-08-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/32985"}, {"sha": "0b01ee4c8cbec569690399c9c3c027f4198925e9", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b89fb3c289c42d6963933a055305088d5d454e7/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b89fb3c289c42d6963933a055305088d5d454e7/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=7b89fb3c289c42d6963933a055305088d5d454e7", "patch": "@@ -1391,7 +1391,8 @@ write_atom (atom_type atom, const void *v)\n    written.  */\n \n static void mio_expr (gfc_expr **);\n-static void mio_symbol_ref (gfc_symbol **);\n+pointer_info *mio_symbol_ref (gfc_symbol **);\n+pointer_info *mio_interface_rest (gfc_interface **);\n static void mio_symtree_ref (gfc_symtree **);\n \n /* Read or write an enumerated value.  On writing, we return the input\n@@ -2247,7 +2248,7 @@ mio_formal_arglist (gfc_symbol *sym)\n \n /* Save or restore a reference to a symbol node.  */\n \n-void\n+pointer_info *\n mio_symbol_ref (gfc_symbol **symp)\n {\n   pointer_info *p;\n@@ -2266,6 +2267,7 @@ mio_symbol_ref (gfc_symbol **symp)\n       if (p->u.rsym.state == UNUSED)\n \tp->u.rsym.state = NEEDED;\n     }\n+  return p;\n }\n \n \n@@ -2916,10 +2918,11 @@ mio_namelist (gfc_symbol *sym)\n    interfaces.  Checking for duplicate and ambiguous interfaces has to\n    be done later when all symbols have been loaded.  */\n \n-static void\n+pointer_info *\n mio_interface_rest (gfc_interface **ip)\n {\n   gfc_interface *tail, *p;\n+  pointer_info *pi = NULL;\n \n   if (iomode == IO_OUTPUT)\n     {\n@@ -2945,7 +2948,7 @@ mio_interface_rest (gfc_interface **ip)\n \n \t  p = gfc_get_interface ();\n \t  p->where = gfc_current_locus;\n-\t  mio_symbol_ref (&p->sym);\n+\t  pi = mio_symbol_ref (&p->sym);\n \n \t  if (tail == NULL)\n \t    *ip = p;\n@@ -2957,6 +2960,7 @@ mio_interface_rest (gfc_interface **ip)\n     }\n \n   mio_rparen ();\n+  return pi;\n }\n \n \n@@ -3136,6 +3140,8 @@ load_operator_interfaces (void)\n   const char *p;\n   char name[GFC_MAX_SYMBOL_LEN + 1], module[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_user_op *uop;\n+  pointer_info *pi = NULL;\n+  int n, i;\n \n   mio_lparen ();\n \n@@ -3146,16 +3152,34 @@ load_operator_interfaces (void)\n       mio_internal_string (name);\n       mio_internal_string (module);\n \n-      /* Decide if we need to load this one or not.  */\n-      p = find_use_name (name, true);\n-      if (p == NULL)\n-\t{\n-\t  while (parse_atom () != ATOM_RPAREN);\n-\t}\n-      else\n+      n = number_use_names (name, true);\n+      n = n ? n : 1;\n+\n+      for (i = 1; i <= n; i++)\n \t{\n-\t  uop = gfc_get_uop (p);\n-\t  mio_interface_rest (&uop->operator);\n+\t  /* Decide if we need to load this one or not.  */\n+\t  p = find_use_name_n (name, &i, true);\n+\n+\t  if (p == NULL)\n+\t    {\n+\t      while (parse_atom () != ATOM_RPAREN);\n+\t      continue;\n+\t    }\n+\n+\t  if (i == 1)\n+\t    {\n+\t      uop = gfc_get_uop (p);\n+\t      pi = mio_interface_rest (&uop->operator);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (gfc_find_uop (p, NULL))\n+\t\tcontinue;\n+\t      uop = gfc_get_uop (p);\n+\t      uop->operator = gfc_get_interface ();\n+\t      uop->operator->where = gfc_current_locus;\n+\t      add_fixup (pi->integer, &uop->operator->sym);\n+\t    }\n \t}\n     }\n "}, {"sha": "43875beb80f1f726a7dad3b2394cb6bd618cf27c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b89fb3c289c42d6963933a055305088d5d454e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b89fb3c289c42d6963933a055305088d5d454e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b89fb3c289c42d6963933a055305088d5d454e7", "patch": "@@ -1,3 +1,8 @@\n+2007-08-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/31298\n+\t* gfortran.dg/use_10.f90: New.\n+\n 2007-08-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/32985"}, {"sha": "e52fcff7e5956e02390ee0fd343296cd2485e456", "filename": "gcc/testsuite/gfortran.dg/use_10.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b89fb3c289c42d6963933a055305088d5d454e7/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b89fb3c289c42d6963933a055305088d5d454e7/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_10.f90?ref=7b89fb3c289c42d6963933a055305088d5d454e7", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+module a\n+ implicit none\n+interface operator(.op.)\n+  module procedure sub\n+end interface\n+interface operator(.ops.)\n+  module procedure sub2\n+end interface\n+\n+contains\n+  function sub(i)\n+    integer :: sub\n+    integer,intent(in) :: i\n+    sub = -i\n+  end function sub\n+  function sub2(i)\n+    integer :: sub2\n+    integer,intent(in) :: i\n+    sub2 = i\n+  end function sub2\n+end module a\n+\n+program test\n+use a, only: operator(.op.), operator(.op.), &\n+operator(.my.)=>operator(.op.),operator(.ops.)=>operator(.op.)\n+implicit none\n+if (.my.2 /= -2 .or. .op.3 /= -3 .or. .ops.7 /= -7) call abort()\n+end"}]}