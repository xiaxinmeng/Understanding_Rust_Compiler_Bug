{"sha": "c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk1ZTBlZGM0NTg4YjM4MTFiZWMyZmM0ZDRhYTFiZjBiN2EwNDU2YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-19T10:30:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-19T10:30:52Z"}, "message": "Minor reformatting.\n\nFrom-SVN: r165693", "tree": {"sha": "63878f8259d12a16d22466ef0e63bbf4e5bd46e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63878f8259d12a16d22466ef0e63bbf4e5bd46e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a/comments", "author": null, "committer": null, "parents": [{"sha": "4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4adf3c50f1398e6efc4ab6f5e061e2ecea145855"}], "stats": {"total": 105, "additions": 52, "deletions": 53}, "files": [{"sha": "e742c490952dbc1b7172112db46652660828be80", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a", "patch": "@@ -4348,24 +4348,19 @@ package body Exp_Ch4 is\n             R    : constant Node_Id := Relocate_Node (Alt);\n \n          begin\n-            if (Is_Entity_Name (Alt)\n-                  and then Is_Type (Entity (Alt)))\n-              or else Nkind (Alt) = N_Range\n+            if (Is_Entity_Name (Alt) and then Is_Type (Entity (Alt)))\n+               or else Nkind (Alt) = N_Range\n             then\n-               Cond :=\n-                 Make_In (Sloc (Alt),\n-                   Left_Opnd  => L,\n-                   Right_Opnd => R);\n+               Cond := Make_In (Sloc (Alt), Left_Opnd  => L, Right_Opnd => R);\n             else\n-               Cond := Make_Op_Eq (Sloc (Alt),\n-                 Left_Opnd  => L,\n-                 Right_Opnd => R);\n+               Cond :=\n+                 Make_Op_Eq (Sloc (Alt), Left_Opnd  => L, Right_Opnd => R);\n             end if;\n \n             return Cond;\n          end Make_Cond;\n \n-      --  Start of proessing for Expand_N_In\n+      --  Start of processing for Expand_N_In\n \n       begin\n          Alt := Last (Alternatives (N));\n@@ -4419,7 +4414,7 @@ package body Exp_Ch4 is\n       --  Check case of explicit test for an expression in range of its\n       --  subtype. This is suspicious usage and we replace it with a 'Valid\n       --  test and give a warning. For floating point types however, this is a\n-      --  standard way to check for finite numbers, and using 'Valid vould\n+      --  standard way to check for finite numbers, and using 'Valid would\n       --  typically be a pessimization.\n \n       if Is_Scalar_Type (Etype (Lop))\n@@ -4475,17 +4470,19 @@ package body Exp_Ch4 is\n             --  the same as the type of the expression.\n \n          begin\n-            --  If test is explicit x'first .. x'last, replace by valid check\n+            --  If test is explicit x'First .. x'Last, replace by valid check\n \n             if Is_Scalar_Type (Ltyp)\n               and then Nkind (Lo_Orig) = N_Attribute_Reference\n               and then Attribute_Name (Lo_Orig) = Name_First\n               and then Nkind (Prefix (Lo_Orig)) in N_Has_Entity\n               and then Entity (Prefix (Lo_Orig)) = Ltyp\n+\n               and then Nkind (Hi_Orig) = N_Attribute_Reference\n               and then Attribute_Name (Hi_Orig) = Name_Last\n               and then Nkind (Prefix (Hi_Orig)) in N_Has_Entity\n               and then Entity (Prefix (Hi_Orig)) = Ltyp\n+\n               and then Comes_From_Source (N)\n               and then VM_Target = No_VM\n             then\n@@ -4669,7 +4666,7 @@ package body Exp_Ch4 is\n \n                return;\n \n-            --  If type is scalar type, rewrite as x in t'first .. t'last.\n+            --  If type is scalar type, rewrite as x in t'First .. t'Last.\n             --  This reason we do this is that the bounds may have the wrong\n             --  type if they come from the original type definition. Also this\n             --  way we get all the processing above for an explicit range."}, {"sha": "56ce9a7ee8e72313eb161ca8bb2d242cf4b5f470", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a", "patch": "@@ -1661,21 +1661,22 @@ package body Exp_Ch9 is\n               Make_Parameter_Specification (Loc,\n                 Defining_Identifier => Index,\n                 Parameter_Type      =>\n-                 New_Occurrence_Of (Entry_Index_Type (E), Loc)));\n+                  New_Occurrence_Of (Entry_Index_Type (E), Loc)));\n \n-            Entry_Name := Make_Indexed_Component (Loc,\n-               Prefix => Entry_Name,\n-               Expressions => New_List (New_Occurrence_Of (Index, Loc)));\n+            Entry_Name :=\n+              Make_Indexed_Component (Loc,\n+                Prefix      => Entry_Name,\n+                Expressions => New_List (New_Occurrence_Of (Index, Loc)));\n          end;\n       end if;\n \n       Entry_Call :=\n         Make_Procedure_Call_Statement (Loc,\n-          Name => Entry_Name,\n+          Name                   => Entry_Name,\n           Parameter_Associations => Actuals);\n \n-      --  Now add formals that match those of the entry, and build actuals\n-      --  for the nested entry call.\n+      --  Now add formals that match those of the entry, and build actuals for\n+      --  the nested entry call.\n \n       declare\n          Form      : Entity_Id;\n@@ -1689,8 +1690,8 @@ package body Exp_Ch9 is\n             Parm_Spec :=\n               Make_Parameter_Specification (Loc,\n                 Defining_Identifier => New_Form,\n-                Out_Present         =>  Out_Present (Parent (Form)),\n-                In_Present          =>  In_Present  (Parent (Form)),\n+                Out_Present         => Out_Present (Parent (Form)),\n+                In_Present          => In_Present  (Parent (Form)),\n                 Parameter_Type      => New_Occurrence_Of (Etype (Form), Loc));\n \n             Append (Parm_Spec, Specs);\n@@ -1728,16 +1729,16 @@ package body Exp_Ch9 is\n       Set_PPC_Wrapper (E, Wrapper_Id);\n       Wrapper_Body :=\n         Make_Subprogram_Body (Loc,\n-          Specification =>\n+          Specification              =>\n             Make_Procedure_Specification (Loc,\n-              Defining_Unit_Name => Wrapper_Id,\n+              Defining_Unit_Name       => Wrapper_Id,\n               Parameter_Specifications => Specs),\n-         Declarations => Decls,\n-         Handled_Statement_Sequence =>\n-           Make_Handled_Sequence_Of_Statements (Loc,\n-             Statements => New_List (Entry_Call)));\n+          Declarations               => Decls,\n+          Handled_Statement_Sequence =>\n+            Make_Handled_Sequence_Of_Statements (Loc,\n+              Statements => New_List (Entry_Call)));\n \n-      --  The wrapper body is analyzed when the enclosing type is frozen.\n+      --  The wrapper body is analyzed when the enclosing type is frozen\n \n       Append_Freeze_Action (Defining_Entity (Decl), Wrapper_Body);\n    end Build_PPC_Wrapper;\n@@ -1857,7 +1858,7 @@ package body Exp_Ch9 is\n \n                Nam :=\n                  Make_Selected_Component (Loc,\n-                   Prefix =>\n+                   Prefix        =>\n                      Unchecked_Convert_To\n                        (Corresponding_Concurrent_Type (Obj_Typ), Conv_Id),\n                    Selector_Name => New_Reference_To (Subp_Id, Loc));"}, {"sha": "6386fdaede11933a868a27342fbfa34cf547a0f7", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a", "patch": "@@ -6263,11 +6263,14 @@ package body Exp_Disp is\n       --  Import the dispatch table DT of tagged type Tag_Typ. Required to\n       --  generate forward references and statically allocate the table. For\n       --  primary dispatch tables that require no dispatch table generate:\n+\n       --     DT : static aliased constant Non_Dispatch_Table_Wrapper;\n-      --     $pragma import (ada, DT);\n+      --     pragma Import (Ada, DT);\n+\n       --  Otherwise generate:\n+\n       --     DT : static aliased constant Dispatch_Table_Wrapper (Nb_Prim);\n-      --     $pragma import (ada, DT);\n+      --     pragma Import (Ada, DT);\n \n       ---------------\n       -- Import_DT --\n@@ -6292,8 +6295,7 @@ package body Exp_Disp is\n \n          Get_External_Name (DT, True);\n          Set_Interface_Name (DT,\n-           Make_String_Literal (Loc,\n-             Strval => String_From_Name_Buffer));\n+           Make_String_Literal (Loc, Strval => String_From_Name_Buffer));\n \n          --  Ensure proper Sprint output of this implicit importation\n \n@@ -6305,9 +6307,7 @@ package body Exp_Disp is\n \n          --  No dispatch table required\n \n-         if not Is_Secondary_DT\n-           and then not Has_DT (Tag_Typ)\n-         then\n+         if not Is_Secondary_DT and then not Has_DT (Tag_Typ) then\n             Append_To (Result,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => DT,\n@@ -6323,8 +6323,8 @@ package body Exp_Disp is\n             Nb_Prim :=\n               UI_To_Int (DT_Entry_Count (First_Tag_Component (Tag_Typ)));\n \n-            --  If the tagged type has no primitives we add a dummy slot\n-            --  whose address will be the tag of this type.\n+            --  If the tagged type has no primitives we add a dummy slot whose\n+            --  address will be the tag of this type.\n \n             if Nb_Prim = 0 then\n                DT_Constr_List :=\n@@ -6384,8 +6384,8 @@ package body Exp_Disp is\n       --  For CPP types there is no need to build the dispatch tables since\n       --  they are imported from the C++ side. If the CPP type has an IP then\n       --  we declare now the variable that will store the copy of the C++ tag.\n-      --  If the CPP type is an interface, we need the variable as well,\n-      --  because it becomes the pointer to the corresponding secondary table.\n+      --  If the CPP type is an interface, we need the variable as well because\n+      --  it becomes the pointer to the corresponding secondary table.\n \n       if Is_CPP_Class (Typ) then\n          if Has_CPP_Constructors (Typ) or else Is_Interface (Typ) then\n@@ -6413,7 +6413,7 @@ package body Exp_Disp is\n          Append_Elmt (Predef_Prims_Ptr, Access_Disp_Table (Typ));\n \n          --  Import the forward declaration of the Dispatch Table wrapper\n-         --  record (Make_DT will take care of its exportation)\n+         --  record (Make_DT will take care of exporting it).\n \n          if Building_Static_DT (Typ) then\n             Set_Dispatch_Table_Wrappers (Typ, New_Elmt_List);\n@@ -6499,12 +6499,12 @@ package body Exp_Disp is\n       if Has_Interfaces (Typ) then\n          Collect_Interface_Components (Typ, Typ_Comps);\n \n-         --  For each interface type we build an unique external name\n-         --  associated with its secondary dispatch table. This name is used to\n-         --  declare an object that references this secondary dispatch table,\n-         --  value that will be used for the elaboration of Typ's objects and\n-         --  also for the elaboration of objects of derivations of Typ that do\n-         --  not override the primitives of this interface type.\n+         --  For each interface type we build a unique external name associated\n+         --  with its secondary dispatch table. This name is used to declare an\n+         --  object that references this secondary dispatch table, whose value\n+         --  will be used for the elaboration of Typ objects, and also for the\n+         --  elaboration of objects of types derived from Typ that do not\n+         --  override the primitives of this interface type.\n \n          Suffix_Index := 1;\n \n@@ -6520,7 +6520,7 @@ package body Exp_Disp is\n                Typ_Name := Name_Find;\n \n                --  Declare variables that will store the copy of the C++\n-               --  secondary tags\n+               --  secondary tags.\n \n                Iface_DT_Ptr :=\n                  Make_Defining_Identifier (Loc,\n@@ -6727,6 +6727,7 @@ package body Exp_Disp is\n             --  Add the freezing nodes of these declarations; required to avoid\n             --  generating these freezing nodes in wrong scopes (for example in\n             --  the IC routine of a derivation of Typ).\n+            --  What is an \"IC routine\"? Is \"init_proc\" meant here???\n \n             Append_List_To (Result, Freeze_Entity (DT_Prims, Typ));\n             Append_List_To (Result, Freeze_Entity (DT_Prims_Acc, Typ));"}, {"sha": "235aca4b47232fad51e884ded8d21b8935dc3f39", "filename": "gcc/ada/i-cexten.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a/gcc%2Fada%2Fi-cexten.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a/gcc%2Fada%2Fi-cexten.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cexten.ads?ref=c95e0edc4588b3811bec2fc4d4aa1bf0b7a0456a", "patch": "@@ -36,7 +36,7 @@ with System;\n \n package Interfaces.C.Extensions is\n \n-   --  Definitions for C \"void\" and \"void*\" types\n+   --  Definitions for C \"void\" and \"void *\" types\n \n    subtype void     is System.Address;\n    subtype void_ptr is System.Address;\n@@ -55,12 +55,12 @@ package Interfaces.C.Extensions is\n \n    subtype bool is plain_char;\n \n-   --  64bit integer types\n+   --  64-bit integer types\n \n    subtype long_long is Long_Long_Integer;\n    type unsigned_long_long is mod 2 ** 64;\n \n-   --  128bit integer type available on 64bit platforms:\n+   --  128-bit integer type available on 64-bit platforms:\n    --  typedef int signed_128 __attribute__ ((mode (TI)));\n \n    type Signed_128 is record"}]}