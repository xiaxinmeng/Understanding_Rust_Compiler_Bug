{"sha": "d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdiMGZjYWEzOWJjNjEyYjRiODBmYjE1MjlkMTllZjNjMWM4NDJlYQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-11-24T22:45:18Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-11-24T22:45:18Z"}, "message": "PR tree-optimization/78476 - snprintf(0, 0, ...) with known arguments not optimized away\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/78476\n\t* gcc.dg/tree-ssa/builtin-sprintf-5.c: New test.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/78476\n\t* gimple-ssa-sprintf.c (struct pass_sprintf_length::call_info):\n\tAdd a member.\n\t(handle_gimple_call): Adjust signature.\n\t(try_substitute_return_value): Remove calls to bounded functions\n\twith zero buffer size whose result is known.\n\t(pass_sprintf_length::execute): Adjust call to handle_gimple_call.\n\nFrom-SVN: r242854", "tree": {"sha": "7ee68f768e332dc043f3d3122d0c2568c3153af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ee68f768e332dc043f3d3122d0c2568c3153af3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea/comments", "author": null, "committer": null, "parents": [{"sha": "6f8bb7637206ba0ea0b736dc3528bbb76d074c47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8bb7637206ba0ea0b736dc3528bbb76d074c47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f8bb7637206ba0ea0b736dc3528bbb76d074c47"}], "stats": {"total": 183, "additions": 170, "deletions": 13}, "files": [{"sha": "ab4ab36ea4cbb38021cffc32d8d0678f56414b0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea", "patch": "@@ -1,3 +1,13 @@\n+2016-11-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/78476\n+\t* gimple-ssa-sprintf.c (struct pass_sprintf_length::call_info):\n+\tAdd a member.\n+\t(handle_gimple_call): Adjust signature.\n+\t(try_substitute_return_value): Remove calls to bounded functions\n+\twith zero buffer size whose result is known.\n+\t(pass_sprintf_length::execute): Adjust call to handle_gimple_call.\n+\n 2016-11-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* varasm.c (assemble_start_function): Wrap align_log definition in\n@@ -47,6 +57,7 @@\n \tPR target/67822\n \t* config/nvptx/mkoffload.c (main): Allow -fopenmp.\n \n+>>>>>>> .r242853\n 2016-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* common/config/sparc/sparc-common.c (sparc_option_optimization_table):"}, {"sha": "dc2b66d3430ae36e1ba38777e38758d47c23f646", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-object-size.h\"\n #include \"params.h\"\n #include \"tree-cfg.h\"\n+#include \"tree-ssa-propagate.h\"\n #include \"calls.h\"\n #include \"cfgloop.h\"\n #include \"intl.h\"\n@@ -122,7 +123,7 @@ class pass_sprintf_length : public gimple_opt_pass\n       fold_return_value = param;\n     }\n \n-  void handle_gimple_call (gimple_stmt_iterator);\n+  void handle_gimple_call (gimple_stmt_iterator*);\n \n   struct call_info;\n   void compute_format_length (const call_info &, format_result *);\n@@ -712,6 +713,11 @@ struct pass_sprintf_length::call_info\n   /* True for functions like snprintf that specify the size of\n      the destination, false for others like sprintf that don't.  */\n   bool bounded;\n+\n+  /* True for bounded functions like snprintf that specify a zero-size\n+     buffer as a request to compute the size of output without actually\n+     writing any.  */\n+  bool nowrite;\n };\n \n /* Return the result of formatting the '%%' directive.  */\n@@ -2481,7 +2487,7 @@ get_destination_size (tree dest)\n    have its range set to the range of return values, if that is known.  */\n \n static void\n-try_substitute_return_value (gimple_stmt_iterator gsi,\n+try_substitute_return_value (gimple_stmt_iterator *gsi,\n \t\t\t     const pass_sprintf_length::call_info &info,\n \t\t\t     const format_result &res)\n {\n@@ -2497,14 +2503,29 @@ try_substitute_return_value (gimple_stmt_iterator gsi,\n       && (info.bounded || res.number_chars <= info.objsize)\n       && res.number_chars - 1 <= target_int_max ())\n     {\n-      /* Replace the left-hand side of the call with the constant\n-\t result of the formatted function minus 1 for the terminating\n-\t NUL which the functions' return value does not include.  */\n-      gimple_call_set_lhs (info.callstmt, NULL_TREE);\n       tree cst = build_int_cst (integer_type_node, res.number_chars - 1);\n-      gimple *g = gimple_build_assign (lhs, cst);\n-      gsi_insert_after (&gsi, g, GSI_NEW_STMT);\n-      update_stmt (info.callstmt);\n+\n+      if (info.nowrite)\n+\t{\n+\t  /* Replace the call to the bounded function with a zero size\n+\t     (e.g., snprintf(0, 0, \"%i\", 123) with the constant result\n+\t     of the function minus 1 for the terminating NUL which\n+\t     the function's  return value does not include.  */\n+\t  if (!update_call_from_tree (gsi, cst))\n+\t    gimplify_and_update_call_from_tree (gsi, cst);\n+\t  gimple *callstmt = gsi_stmt (*gsi);\n+\t  update_stmt (callstmt);\n+\t}\n+      else\n+\t{\n+\t  /* Replace the left-hand side of the call with the constant\n+\t     result of the formatted function minus 1 for the terminating\n+\t     NUL which the function's return value does not include.  */\n+\t  gimple_call_set_lhs (info.callstmt, NULL_TREE);\n+\t  gimple *g = gimple_build_assign (lhs, cst);\n+\t  gsi_insert_after (gsi, g, GSI_NEW_STMT);\n+\t  update_stmt (info.callstmt);\n+\t}\n \n       if (dump_file)\n \t{\n@@ -2514,7 +2535,8 @@ try_substitute_return_value (gimple_stmt_iterator gsi,\n \t  print_generic_expr (dump_file, cst, dump_flags);\n \t  fprintf (dump_file, \" for \");\n \t  print_generic_expr (dump_file, info.func, dump_flags);\n-\t  fprintf (dump_file, \" return value (output %s).\\n\",\n+\t  fprintf (dump_file, \" %s (output %s).\\n\",\n+\t\t   info.nowrite ? \"call\" : \"return value\",\n \t\t   res.constant ? \"constant\" : \"variable\");\n \t}\n     }\n@@ -2579,11 +2601,11 @@ try_substitute_return_value (gimple_stmt_iterator gsi,\n    functions and if so, handle it.  */\n \n void\n-pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator gsi)\n+pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n {\n   call_info info = call_info ();\n \n-  info.callstmt = gsi_stmt (gsi);\n+  info.callstmt = gsi_stmt (*gsi);\n   if (!gimple_call_builtin_p (info.callstmt, BUILT_IN_NORMAL))\n     return;\n \n@@ -2736,6 +2758,7 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator gsi)\n \t without actually producing any.  Pretend the size is\n \t unlimited in this case.  */\n       info.objsize = HOST_WIDE_INT_MAX;\n+      info.nowrite = true;\n     }\n   else\n     {\n@@ -2796,7 +2819,7 @@ pass_sprintf_length::execute (function *fun)\n \t  gimple *stmt = gsi_stmt (si);\n \n \t  if (is_gimple_call (stmt))\n-\t    handle_gimple_call (si);\n+\t    handle_gimple_call (&si);\n \t}\n     }\n "}, {"sha": "5e81768b4d0351411fca35ddce385ab275d250f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea", "patch": "@@ -1,3 +1,8 @@\n+2016-11-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/78476\n+\t* gcc.dg/tree-ssa/builtin-sprintf-5.c: New test.\n+\n 2016-11-24  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/77541"}, {"sha": "d568f9cbda3a9631c753d0f1c4d2292f822fa4d6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-5.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-5.c?ref=d7b0fcaa39bc612b4b80fb1529d19ef3c1c842ea", "patch": "@@ -0,0 +1,118 @@\n+/* PR middle-end/78476 - snprintf(0, 0, ...) with known arguments not\n+   optimized away\n+   { dg-compile }\n+   { dg-options \"-O2 -fdump-tree-optimized\" }\n+   { dg-require-effective-target int32plus } */\n+\n+#define CAT(s, n)   s ## n\n+#define FAIL(line)  CAT (failure_on_line_, line)\n+#define PASS(line)  CAT (success_on_line_, line)\n+\n+/* Emit a call to a function named failure_on_line_NNN when EXPR is false.  */\n+#define ASSERT(value, expect)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    extern void FAIL (__LINE__)(int);\t\t\\\n+    extern void PASS (__LINE__)(int);\t\t\\\n+    if (value == expect)\t\t\t\\\n+      PASS (__LINE__)(value);\t\t\t\\\n+    else\t\t\t\t\t\\\n+      FAIL (__LINE__)(value);\t\t\t\\\n+  } while (0)\n+\n+#define T(expect, ...)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    int n = __builtin_snprintf (0, 0, __VA_ARGS__);\t\\\n+    ASSERT (n, expect);\t\t\t\t\t\\\n+  } while (0)\n+\n+int ival (int i) { return i; }\n+\n+void test_arg_int (int i, int n)\n+{\n+  T (1, \"%i\", ival (0));\n+  T (1, \"%i\", ival (1));\n+  T (2, \"%i%i\", ival (0), ival (1));\n+  T (3, \"%i%i%i\", ival (0), ival (1), ival (9));\n+  T (5, \"%i %i %i\", ival (0), ival (1), ival (9));\n+\n+  T (5, \"%i %i %i\", ival (0), ival (1), ival (9));\n+\n+  T (13, \"%hhu.%hhu.%hhu.%hhu\", ival (23), ival (78), ival (216), ival (135));\n+\n+  for (i = 0; i != 9; ++i)\n+    T (1, \"%i\", i);\n+\n+  for (i = -n; i != n; ++i)\n+    T (8, \"%08x\", i);\n+}\n+\n+void test_arg_string (const char *s)\n+{\n+  T ( 0, \"%-s\", \"\");\n+  T ( 1, \"%%\");\n+  T ( 1, \"%-s\", \"1\");\n+  T ( 2, \"%-s\", \"12\");\n+  T ( 3, \"%-s\", \"123\");\n+  T ( 5, \"s=%s\", \"123\");\n+  T (10, \"%%s=\\\"%s\\\"\", \"12345\");\n+\n+  T ( 1, \"%.*s\", 1, \"123\");\n+  T ( 2, \"%.*s\", 2, \"123\");\n+  T ( 3, \"%.*s\", 3, \"123\");\n+  T ( 3, \"%.*s\", 4, \"123\");\n+\n+  T ( 1, \"%1.*s\", 1, \"123\");\n+  T ( 2, \"%1.*s\", 2, \"123\");\n+  T ( 3, \"%1.*s\", 3, \"123\");\n+  T ( 3, \"%1.*s\", 4, \"123\");\n+  T ( 4, \"%4.*s\", 1, \"123\");\n+  T ( 4, \"%4.*s\", 2, \"123\");\n+  T ( 4, \"%4.*s\", 3, \"123\");\n+  T ( 4, \"%4.*s\", 4, \"123\");\n+  T ( 4, \"%4.*s\", 5, \"123\");\n+\n+  const char *a = \"123\";\n+  const char *b = \"456\";\n+\n+  T ( 3, \"%-s\", s ? a : b);\n+  T ( 0, \"%.0s\", s);\n+  T ( 1, \"%1.1s\", s);\n+  T ( 2, \"%2.2s\", s);\n+  T ( 2, \"%2.1s\", s);\n+}\n+\n+void test_arg_multiarg (int i, double d)\n+{\n+  T (16, \"%i %f %s\", 123, 3.14, \"abc\");\n+  T (16, \"%12i %s\", i, \"abc\");\n+  T (16, \"%*i %s\", 12, i, \"abc\");\n+}\n+\n+#define TV(expect, fmt, va)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    int n = __builtin_vsnprintf (0, 0, fmt, va);\t\\\n+    ASSERT (n, expect);\t\t\t\t\t\\\n+  } while (0)\n+\n+void test_va_int (__builtin_va_list va)\n+{\n+  TV ( 2, \"%02hhx\", va);\n+  TV ( 2, \"%02.*hhx\", va);\n+  TV ( 4, \"%04hx\", va);\n+  TV ( 4, \"%04.*hx\", va);\n+}\n+\n+void test_va_multiarg (__builtin_va_list va)\n+{\n+  TV ( 8, \"%8x\", va);\n+  TV ( 8, \"% 8x\", va);\n+  TV ( 9, \"%9x\", va);\n+  TV (11, \"%11o\", va);\n+  TV (12, \"%12o\", va);\n+\n+  TV (16, \"%12i %3.2s\", va);\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-not \"failure_on_line\" \"optimized\"} }\n+   { dg-final { scan-tree-dump-not \"snprintf\" \"optimized\"} } */"}]}