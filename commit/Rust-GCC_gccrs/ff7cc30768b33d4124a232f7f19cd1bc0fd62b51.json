{"sha": "ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY3Y2MzMDc2OGIzM2Q0MTI0YTIzMmY3ZjE5Y2QxYmMwZmQ2MmI1MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-28T20:09:17Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-28T20:09:17Z"}, "message": "ChangeLog.0, [...]: Fix spelling errors.\n\n\t* ChangeLog.0, ChangeLog.1, ChangeLog.2, ChangeLog.3, ChangeLog.4,\n\tChangeLog.5, ChangeLog, FSFChangeLog.10, FSFChangeLog.11,\n\tc-common.c, c-common.h, c-parse.in, c-typeck.c, cfg.c, config.gcc,\n\tconfigure, configure.in, except.c, except.h, flow.c, function.c,\n\tgcc.c, gcse.c, genrecog.c, libgcc2.c, loop.c, loop.h, params.def,\n\tpredict.def, predict.h, reg-stack.c, regmove.c, sched-deps.c,\n\tsched-int.h, sibcall.c, ssa.c, stringpool.c, toplev.c, tree.c,\n\tunroll.c: Fix spelling errors.\n\nFrom-SVN: r46595", "tree": {"sha": "c77fe1bb905e48b9ef6d1aa767606adced63e933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c77fe1bb905e48b9ef6d1aa767606adced63e933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "306ef64467b81eff37995c0620ee097c9d174463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/306ef64467b81eff37995c0620ee097c9d174463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/306ef64467b81eff37995c0620ee097c9d174463"}], "stats": {"total": 169, "additions": 89, "deletions": 80}, "files": [{"sha": "b3b83b23ef86ac348234cc40dc43a6d59b60357b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -1,5 +1,14 @@\n 2001-10-28  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n+\t* ChangeLog.0, ChangeLog.1, ChangeLog.2, ChangeLog.3, ChangeLog.4,\n+\tChangeLog.5, ChangeLog, FSFChangeLog.10, FSFChangeLog.11,\n+\tc-common.c, c-common.h, c-parse.in, c-typeck.c, cfg.c, config.gcc,\n+\tconfigure, configure.in, except.c, except.h, flow.c, function.c,\n+\tgcc.c, gcse.c, genrecog.c, libgcc2.c, loop.c, loop.h, params.def,\n+\tpredict.def, predict.h, reg-stack.c, regmove.c, sched-deps.c,\n+\tsched-int.h, sibcall.c, ssa.c, stringpool.c, toplev.c, tree.c,\n+\tunroll.c: Fix spelling errors.\n+\n \t* doc/extend.texi, doc/invoke.texi: Fix spelling.\n \n \t* doc/gcc.texi: Document use of \"dependent\" and American spelling.\n@@ -717,7 +726,7 @@ Sat Oct 20 12:01:07 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(c_expand_body): Measure time.\n \t* toplev.c (rest_of_compilation): Measure time of mode switching\n \tseparately.\n-\t* Makefile.in (c-decl.o, cfgcleanup.o): Add dependancy.\n+\t* Makefile.in (c-decl.o, cfgcleanup.o): Add dependency.\n \n \t* toplev.c (flag_asynchronous_unwind_tables): New global variable.\n \t(lang_independent_options): Add asynchronous-unwind-tables\n@@ -1131,7 +1140,7 @@ Wed Oct 17 00:01:02 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t64bit operations require split on 64bit machine.\n \t(CONST_COST): Make large 64bit constants expensive on 64bit compilation.\n \n-\t* i386.c (ix86_setup_incomming_varargs): Fix mode of PLUS.\n+\t* i386.c (ix86_setup_incoming_varargs): Fix mode of PLUS.\n \t(ix86_expand_move): Avoid pushes of memory if size does not match;\n \tmove long constants to register.\n \t(x86_initialize_trampoline): Fix mode.\n@@ -4916,7 +4925,7 @@ Sun Sep  2 18:37:54 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-08-31  Richard Henderson  <rth@redhat.com>\n \n-\t* sched-deps.c (add_dependence): Don't elide dependancy if the\n+\t* sched-deps.c (add_dependence): Don't elide dependency if the\n \tconditional used by insn is modified in elem.\n \n 2001-08-31  Nick Clifton  <nickc@cambridge.redhat.com>\n@@ -8922,7 +8931,7 @@ Thu Jul 26 14:04:03 EDT 2001  John Wehle  (john@feith.com)\n 2001-07-26  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* params.def (PARAM_MAX_PENDING_LIST_LENGTH): Add parameter to\n-\tlimit length of dependancy flush list.\n+\tlimit length of dependency flush list.\n \t* params.h (MAX_PENDING_LIST_LENGTH): Define.\n \t* sched-int.h  (struct deps): Add pending_flush_length field.\n \t* sched-deps.c (flush_pending_lists): Last_pending_memory_flush now"}, {"sha": "c5589f4a43f99638386fc4d1d2e49f8362e8e948", "filename": "gcc/ChangeLog.0", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.0", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.0", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.0?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -5188,7 +5188,7 @@ Wed Apr 15 01:21:21 1998  Jeffrey A Law  (law@cygnus.com)\n \n Tue Apr 14 23:39:13 1998  Richard Henderson  <rth@cygnus.com>\n \n-\t* alpha.md: Revert Oct 27 change, as it is superceded by Kenner's\n+\t* alpha.md: Revert Oct 27 change, as it is superseded by Kenner's\n \tNov 8 find_replacement change.  Move decls of get_unaligned_address\n \t* alpha.h: ... here.\n \n@@ -5370,7 +5370,7 @@ Wed Apr  8 12:51:19 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* invoke.texi: Add ARC options.\n \n-\t* gcc.c (proces_command): Improve error message for -o with\n+\t* gcc.c (process_command): Improve error message for -o with\n \teither -c or -S.\n \n \t* i386/x-cygwin32 (CLIB): Link in advapi32."}, {"sha": "05305362c0d702c347d950ff3ec29c4be3b49cf5", "filename": "gcc/ChangeLog.1", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.1?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -1423,7 +1423,7 @@ Fri Apr 12 15:00:52 1999  Stan Cox  <scox@cygnus.com>\n \t* cpphash.c (collect_expansion, macroexpand,\n \tpush_macro_expansion): Make the escape character in macro\n \tbuffers '\\r', not '@'.  Remove code to protect literal\n-\toccurences of the escape character; '\\r' cannot appear\n+\toccurrences of the escape character; '\\r' cannot appear\n \tin a macro buffer unless we put it there.\n \t* cpplib.c (skip_comment, copy_comment, cpp_skip_hspace,\n \tcopy_rest_of_line, cpp_get_token, parse_string,\n@@ -12503,7 +12503,7 @@ Thu Oct  1 10:42:27 1998  Nick Clifton  <nickc@cygnus.com>\n \t* c-common.c (decl_attributes): Call PRAGMA_INSERT_ATTRIBUTES\n \tif it is defined.\n \n-\t* c-lex.c: Replace occurances of HANDLE_SYSV_PRAGMA with\n+\t* c-lex.c: Replace occurrences of HANDLE_SYSV_PRAGMA with\n \tHANDLE_GENERIC_PRAGMAS.\n \n \t* varasm.c: Move definition of 'struct weak_syms' into"}, {"sha": "a975a5685c691351a46d06c7a63ef2d29c972c3d", "filename": "gcc/ChangeLog.2", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.2?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -2889,7 +2889,7 @@ Tue Nov  9 14:55:44 1999  Nick Clifton  <nickc@cygnus.com>\n \t(reg_or_cmp_int16_operand): New predicate function.\n \t(extend_operand): New predicate function.\n \t(m32r_adjust_code): New scheduling function.\n-\t(m32r_adjust_priorty): New scheduling function.\n+\t(m32r_adjust_priority): New scheduling function.\n \t(m32r_sched_init): New scheduling function.\n \t(m32r_sched_reorder): New scheduling function.\n \t(m32r_sched_variable_issue): New scheduling function.\n@@ -4248,7 +4248,7 @@ Tue Oct 26 18:23:38 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \t(record_reg_life_pat, record_reg_life, find_blocks): Remove.\n \t(nan): New.\n \t(goto_block_pat, print_blocks, dump_stack_info): Remove.\n-\t(reg_to_stack): Simplified test for existance of fp code.  Use\n+\t(reg_to_stack): Simplified test for existence of fp code.  Use\n \tflow.c code.  Call shorten_branches after cross-jump opt.\n \t(check_asm_stack_operands): Renamed from record_asm_reg_life.\n \tReturn false if the asm doesn't use stack regs.  Don't do life\n@@ -10124,7 +10124,7 @@ Wed Aug 25 13:41:47 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n \tprototypes.\n \t* toplev.c (rest_of_compilation): Initialize node cache.\n \t* Makefile.in (OBJS): Add lists.o to list of object files.\n-\t(lists.o): Add dependancies.\n+\t(lists.o): Add dependencies.\n \n Wed Aug 25 17:31:56 1999  Nick Clifton  <nickc@cygnus.com>\n \n@@ -13070,7 +13070,7 @@ Thu Jul  8 12:55:12 1999  Jeffrey A Law  (law@cygnus.com)\n \n Thu Jul  8 18:03:19 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n-\t* reload1.c (choose_reload_regs): Never call remove_adress_replacements\n+\t* reload1.c (choose_reload_regs): Never call remove_address_replacements\n \twhen reload_out equals reload_in.\n \n Thu Jul  8 16:50:14 1999  Nick Clifton  <nickc@cygnus.com>"}, {"sha": "3b8ba6f422c0a020c0249a08e79271218054faac", "filename": "gcc/ChangeLog.3", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.3?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -40,7 +40,7 @@\n \t(do_import): Likewise.\n \t(do_include_next): Likewise.\n \t(gcc_pragmas): Add dependency pragma.\n-\t(do_pragma_dependancy): New pragma.\n+\t(do_pragma_dependency): New pragma.\n \n 2000-06-29  Jason Merrill  <jason@redhat.com>\n \n@@ -2684,7 +2684,7 @@ Thu May 25 02:09:10 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* fold-const.c (extract_muldiv): When constructing a\n \tmultiplier/divisor, do not expect const_binop to correctly\n-\tdetermine if overflow has occured, so check explicitly.\n+\tdetermine if overflow has occurred, so check explicitly.\n \n 2000-05-24  Alexandre Oliva  <aoliva@cygnus.com>\n \n@@ -3799,7 +3799,7 @@ Wed May 10 21:31:44 2000  Jim Wilson  <wilson@cygnus.com>\n \n \t* Makefile.in (libgcc.a, stmp-multilib): Depend on FPBIT and DPBIT.\n \t* mklibgcc.in: Rewrite to not use functions.  Don't shortcut\n-\tdependancies on FPBIT and DPBIT.\n+\tdependencies on FPBIT and DPBIT.\n \n 2000-05-10  Nick Clifton  <nickc@redhat.com>\n \n@@ -4065,7 +4065,7 @@ Mon May  8 17:16:48 2000  Jim Wilson  <wilson@cygnus.com>\n \t* config/ia64/ia64.h (predicate_operator): Declare.\n \n \t* config/ia64/ia64.md (extendsfdf2): Split the nop case out\n-\tof existance.\n+\tof existence.\n \n \t* gensupport.c (process_rtx): Copy and post-process each member\n \tof the define_insn rtvec individually.\n@@ -9830,7 +9830,7 @@ Fri Mar 17 08:09:14 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(add_pure_or_virtual_attribute, gen_enumeration_type_die): Likewise.\n \t* dwarfout.c: Similar changes to dwarf2out.c.\n \t* expr.c (expand_expr, case ARRAY_REF): Remove redundant code.\n-\t* genoutput.c (n_occurences): Return -1 for null string.\n+\t* genoutput.c (n_occurrences): Return -1 for null string.\n \t(strip_whitespace): Accept null string and make into function.\n \t(scan_operands): Reflect above changes.\n \t* sdbout.c (plain_type_1): Use host_integerp and tree_low_cst.\n@@ -16497,7 +16497,7 @@ Thu Jan  6 13:44:59 CET 2000  Jan Hubicka  <jh@suse.cz>\n \tflag_data_sections or UNIQUE_SECTION_P are true.\n \n \t* tm.texi (UNIQUE_SECTION): Document that it can be called for\n-\tunitialised data decls.\n+\tuninitialized data decls.\n \n \t* config/i386/winnt.c (i386_pe_unique_section): Cope with\n \tbeing called for uninitialised data."}, {"sha": "3f5645972db71e101e5b3676fa07059d79bc9bce", "filename": "gcc/ChangeLog.4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.4?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -5361,7 +5361,7 @@ Tue Oct 31 15:33:27 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n \t* regrename.c: Rewrite to handle multi-register modes and\n \tcond_exec instructions.\n-\t* Makefile.in (regrename.o): Update dependancies.\n+\t* Makefile.in (regrename.o): Update dependencies.\n \t* recog.h (struct operand_alternative): Add is_address.\n \t* recog.c (preprocess_constraints) [case 'p']: Set it.\n "}, {"sha": "9109d0015e74c552ba1309fa9d97ae7adafb510a", "filename": "gcc/ChangeLog.5", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FChangeLog.5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.5?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -1054,7 +1054,7 @@ Mon Jun 18 17:27:24 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(unroll_loop): Drop prediction notes on preconditioning.\n \t* predict.def (PRED_LOOP_PRECONDITIONG, PRED_LOOP_CONDITION):\n \tNew; add comments on the others.\n-\t* Makefile.in: (unroll.o): Add dependancy on predict.h.\n+\t* Makefile.in: (unroll.o): Add dependency on predict.h.\n \t* loop.c (strength_reduce): Fix branch prediction.\n \n Mon Jun 18 17:26:56 CEST 2001  Jan Hubicka  <jh@suse.cz>\n@@ -1363,7 +1363,7 @@ Tue Jun 12 12:20:12 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(strength_reduce): Drop branch prediction note in case\n \tnumber of iterations is known.\n \t* predict.def (PRED_LOOP_ITERATIONS): new.\n-\t* Makefile.in (loop.o): Add dependancy on predict.h\n+\t* Makefile.in (loop.o): Add dependency on predict.h\n \n 2001-06-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -1684,7 +1684,7 @@ Sun Jun 10 00:35:37 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t* jump.c: Include predict.h\n \t(duplicate_loop_exit_test): Drop branch prediction notes.\n \t(invert_jump): Use invert_br_probabilities.\n-\t* Makefile.in: Add dependancy on predict.h for jump and predict pass.\n+\t* Makefile.in: Add dependency on predict.h for jump and predict pass.\n \t* ifcvt.c (dead_or_predicable): Use invert_br_probabilities.\n \t* combine.c (distribute_notes): Handle BR_PRED.\n \n@@ -14214,7 +14214,7 @@ Wed Jan  3 08:53:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* c-common.h (ASM_INPUT_P): New.\n \t* c-parse.in (asm): Set it when needed.\n \t* c-semantics.c (genrtl_asm_stmt): Test it instead of the\n-\texistance of an operand.\n+\texistence of an operand.\n \n Tue Jan  2 20:27:07 MET 2001  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "69fe3e79b0a6077232c311d23af86dd7f278d468", "filename": "gcc/FSFChangeLog.10", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FFSFChangeLog.10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FFSFChangeLog.10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.10?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -5807,7 +5807,7 @@ Fri Jul 28 08:47:51 1995  Jim Wilson  <wilson@chestnut.cygnus.com>\n \t(xcoffout_begin_function): Call dbxout_parms and\n \tASM_OUTPUT_SOURCE_LINE.\n \n-\t* va-mips.h: Change every occurance of #if __mips>=3 to\n+\t* va-mips.h: Change every occurrence of #if __mips>=3 to\n \t#ifdef __mips64.\n \t* mips/abi64.h (CPP_SPEC): Output -D__mips64 when -mips3, or -mips4,\n \tor -mgp64.  Output -U__mips64 when -mgp32."}, {"sha": "86bed938fbd9c2c42be288fc2739bd66715dcb26", "filename": "gcc/FSFChangeLog.11", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FFSFChangeLog.11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2FFSFChangeLog.11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.11?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -492,7 +492,7 @@ Fri Nov 28 12:34:03 1997  Scott Christley  <scottc@net-community.com>\n \n \t* objc/Make-lang.in (runtime-info.h): Add comment in file.\n \n-\t* objc/selector.c: Replace all occurences of sarray_get\n+\t* objc/selector.c: Replace all occurrences of sarray_get\n \twith sarray_get_safe.\n \t* objc/sendmsg.c: Likewise.\n \n@@ -7666,7 +7666,7 @@ Sun Feb  2 19:43:17 1997  Scott Christley <scottc@net-community.com>\n \t(__alpha__): Remove unneeded code.\n \t(objc_error): Allow user specified error handler function to\n \ttrap and handle the objc error.  Added an error code parameter\n-\twhich indicates the specific error that occured.\n+\twhich indicates the specific error that occurred.\n \t(objc_malloc, objc_atomic_malloc): Replace call to objc_fatal\n \tfunction with call to objc_error function.\n \t(objc_valloc, objc_realloc, objc_calloc): Likewise.\n@@ -9480,7 +9480,7 @@ Sat Oct 26 14:04:09 1996  Ben Harris  <bjh21@cam.ac.uk>\n Sat Oct 26 13:59:05 1996  Richard Kenner  (kenner@vlsi1.ultra.nyu.edu)\n \n \t* explow.c (allocate_dynamic_stack_space): Delete reference to\n-\tnonexistant macro ALLOCATE_OUTGOING_ARGS.\n+\tnonexistent macro ALLOCATE_OUTGOING_ARGS.\n \n \t* next.h (CPP_PREDEFINES): Add -D_NEXT_SOURCE.\n "}, {"sha": "e70fee2ea1bb25adaac9d6676d4ff5b1b2248776", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -396,7 +396,7 @@ finish_fname_decls ()\n   \n   if (body)\n     {\n-      /* They were called into existance, so add to statement tree.  */\n+      /* They were called into existence, so add to statement tree.  */\n       body = chainon (body,\n \t\t      TREE_CHAIN (DECL_SAVED_TREE (current_function_decl)));\n       body = build_stmt (COMPOUND_STMT, body);"}, {"sha": "421eaa4f934f85a36883286e957a93193171a92f", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -555,14 +555,14 @@ extern tree strip_array_types                   PARAMS ((tree));\n    will always be false, since there are no destructors.)  */\n #define STMT_IS_FULL_EXPR_P(NODE) TREE_LANG_FLAG_1 ((NODE))\n \n-/* IF_STMT accessors. These give access to the condtion of the if\n+/* IF_STMT accessors. These give access to the condition of the if\n    statement, the then block of the if statement, and the else block\n    of the if stsatement if it exists.  */\n #define IF_COND(NODE)           TREE_OPERAND (IF_STMT_CHECK (NODE), 0)\n #define THEN_CLAUSE(NODE)       TREE_OPERAND (IF_STMT_CHECK (NODE), 1)\n #define ELSE_CLAUSE(NODE)       TREE_OPERAND (IF_STMT_CHECK (NODE), 2)\n \n-/* WHILE_STMT accessors. These give access to the condtion of the\n+/* WHILE_STMT accessors. These give access to the condition of the\n    while statement and the body of the while statement, respectively.  */\n #define WHILE_COND(NODE)        TREE_OPERAND (WHILE_STMT_CHECK (NODE), 0)\n #define WHILE_BODY(NODE)        TREE_OPERAND (WHILE_STMT_CHECK (NODE), 1)\n@@ -648,7 +648,7 @@ extern tree strip_array_types                   PARAMS ((tree));\n   (SCOPE_STMT_BLOCK ((NODE)) == NULL_TREE)\n \n /* Nonzero for a SCOPE_STMT which represents a lexical scope, but\n-   which should be treated as non-existant from the point of view of\n+   which should be treated as non-existent from the point of view of\n    running cleanup actions.  */\n #define SCOPE_NO_CLEANUPS_P(NODE) \\\n   (TREE_LANG_FLAG_3 (SCOPE_STMT_CHECK (NODE)))"}, {"sha": "8c1b26fff54e36326c9ba34c1f55484ba6c3fb65", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -2256,7 +2256,7 @@ lineno_stmt:\n \t\t      /* ??? We currently have no way of recording\n \t\t\t the filename for a statement.  This probably\n \t\t\t matters little in practice at the moment,\n-\t\t\t but I suspect that problems will ocurr when\n+\t\t\t but I suspect that problems will occur when\n \t\t\t doing inlining at the tree level.  */\n \t\t    }\n \t\t}"}, {"sha": "881e7ffbc0dcd2806b084688285bb241de461863", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -5451,7 +5451,7 @@ pop_init_level (implicit)\n \t  else if (pedantic)\n \t    pedwarn_init (\"initialization of a flexible array member\");\n \n-\t  /* We have already issued an error message for the existance\n+\t  /* We have already issued an error message for the existence\n \t     of a flexible array member not at the end of the structure.\n \t     Discard the initializer so that we do not abort later.  */\n \t  if (TREE_CHAIN (constructor_fields) != NULL_TREE)"}, {"sha": "83b0ff0603777cbac33aa8cd290c4b74b5be8d47", "filename": "gcc/cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -262,7 +262,7 @@ cached_make_edge (edge_cache, src, dst, flags)\n   switch (use_edge_cache)\n     {\n     default:\n-      /* Quick test for non-existance of the edge.  */\n+      /* Quick test for non-existence of the edge.  */\n       if (! TEST_BIT (edge_cache[src->index], dst->index))\n \tbreak;\n \n@@ -569,7 +569,7 @@ dump_edge_info (file, e, do_succ)\n     }\n }\n \f\n-/* Simple routies to easily allocate AUX fields of basic blocks.  */\n+/* Simple routines to easily allocate AUX fields of basic blocks.  */\n static struct obstack block_aux_obstack;\n static void *first_block_aux_obj = 0;\n static struct obstack edge_aux_obstack;"}, {"sha": "2f6e7fb059c212c588c8538c83788c9ddd5d830f", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -92,16 +92,16 @@\n #\n #  extra_programs\tLike extra_passes, but these are used when linking.\n #\n-#  host_extra_objs\tList of extra host-dependant objects that should\n+#  host_extra_objs\tList of extra host-dependent objects that should\n #\t\t\tbe linked into the compiler proper.\n #\n-#  host_extra_gcc_objs\tList of extra host-dependant objects that should\n+#  host_extra_gcc_objs\tList of extra host-dependent objects that should\n #\t\t\tbe linked into the gcc driver.\n #\n-#  c_target_objs\tList of extra target-dependant objects that be\n+#  c_target_objs\tList of extra target-dependent objects that be\n #\t\t\tlinked into the C compiler only.\n #\n-#  cxx_target_objs\tList of extra target-dependant objects that be\n+#  cxx_target_objs\tList of extra target-dependent objects that be\n #\t\t\tlinked into the C++ compiler only.\n #\n #  build_xm_defines\tList of macros to define when compiling for the"}, {"sha": "094f2d0f3e6770c10909f5622988fd901cc60171", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -7911,7 +7911,7 @@ else\n #  -e 's|^\\$(prefix)||'   matches and eliminates 'prefix' from 'exec_prefix'\n #  -e 's|/$||'            match a trailing forward slash and eliminates it\n #  -e 's|^[^/]|/|'        forces the string to start with a forward slash (*)\n-#  -e 's|/[^/]*|../|g'    replaces each occurance of /<directory> with ../\n+#  -e 's|/[^/]*|../|g'    replaces each occurrence of /<directory> with ../\n #\n # (*) Note this pattern overwrites the first character of the string\n # with a forward slash if one is not already present.  This is not a"}, {"sha": "89cc802e53f3a7e03d09bfa75c5bb7371156659f", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -2030,7 +2030,7 @@ changequote(<<, >>)dnl\n #  -e 's|^\\$(prefix)||'   matches and eliminates 'prefix' from 'exec_prefix'\n #  -e 's|/$||'            match a trailing forward slash and eliminates it\n #  -e 's|^[^/]|/|'        forces the string to start with a forward slash (*)\n-#  -e 's|/[^/]*|../|g'    replaces each occurance of /<directory> with ../\n+#  -e 's|/[^/]*|../|g'    replaces each occurrence of /<directory> with ../\n #\n # (*) Note this pattern overwrites the first character of the string\n # with a forward slash if one is not already present.  This is not a"}, {"sha": "0740a2fcfb45f6c71f9ce8e3c385ca571e1d6e3b", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -834,7 +834,7 @@ expand_end_all_catch ()\n \n /* End an exception region for an exception type filter.  ALLOWED is a\n    TREE_LIST of types to be matched by the runtime.  FAILURE is an\n-   expression to invoke if a mismatch ocurrs.\n+   expression to invoke if a mismatch occurs.\n \n    ??? We could use these semantics for calls to rethrow, too; if we can\n    see the surrounding catch clause, we know that the exception we're"}, {"sha": "0a272688f92ca4f3ea3701582b5aa636aa1e5721", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -72,7 +72,7 @@ extern void expand_end_all_catch\t\tPARAMS ((void));\n \n /* End an exception region for an exception type filter.  ALLOWED is a\n    TREE_LIST of TREE_VALUE objects to be matched by the runtime.\n-   FAILURE is a function to invoke if a mismatch ocurrs.  */\n+   FAILURE is a function to invoke if a mismatch occurs.  */\n extern void expand_eh_region_end_allowed\tPARAMS ((tree, tree));\n \n /* End an exception region for a must-not-throw filter.  FAILURE is a"}, {"sha": "a58cf51a045cb46eb80b5481022740994f3bd46b", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -2228,7 +2228,7 @@ invalidate_mems_from_autoinc (pbi, insn)\n       invalidate_mems_from_set (pbi, XEXP (note, 0));\n }\n \n-/* EXP is a REG.  Remove any dependant entries from pbi->mem_set_list.  */\n+/* EXP is a REG.  Remove any dependent entries from pbi->mem_set_list.  */\n \n static void\n invalidate_mems_from_set (pbi, exp)"}, {"sha": "1f1c58bed4695cbefa118495cacfd54fd38e2e48", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -7482,7 +7482,7 @@ thread_prologue_and_epilogue_insns (f)\n       rtx insn, next;\n \n       /* Similarly, move any line notes that appear after the epilogue.\n-         There is no need, however, to be quite so anal about the existance\n+         There is no need, however, to be quite so anal about the existence\n \t of such a note.  */\n       for (insn = epilogue_end; insn; insn = next)\n \t{"}, {"sha": "ad68645f2e3cda2e280fce1afa53e7fe963afbbc", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -459,7 +459,7 @@ or with constant text in a single argument.\n \tspecified to CC.  Note that the tail part of the -S option\n \t(i.e. the part matched by the `*') will be substituted for each\n \toccurrence of %* within X.\n- %{<S}  remove all occurences of -S from the command line.\n+ %{<S}  remove all occurrences of -S from the command line.\n         Note - this option is position dependent.  % commands in the\n         spec string before this option will see -S, % commands in the\n         spec string after this option will not.\n@@ -1458,7 +1458,7 @@ init_spec ()\n \n \t(3) For each ET_DYN we're linking against (either through -lfoo\n \t    or /some/path/foo.so), check to see whether it or one of\n-\t    its dependancies depends on a shared libgcc.\n+\t    its dependencies depends on a shared libgcc.\n \n \t(4) If \"-shared\"\n \n@@ -1666,7 +1666,7 @@ store_arg (arg, delete_always, delete_failure)\n     record_temp_file (arg, delete_always, delete_failure);\n }\n \f\n-/* Load specs from a file name named FILENAME, replacing occurances of\n+/* Load specs from a file name named FILENAME, replacing occurrences of\n    various different types of line-endings, \\r\\n, \\n\\r and just \\r, with\n    a single \\n.  */\n \n@@ -5559,7 +5559,7 @@ main (argc, argv)\n   xmalloc_set_program_name (programname);\n \n #ifdef GCC_DRIVER_HOST_INITIALIZATION\n-  /* Perform host dependant initialization when needed.  */\n+  /* Perform host dependent initialization when needed.  */\n   GCC_DRIVER_HOST_INITIALIZATION;\n #endif\n "}, {"sha": "a6cd29e092e8738b6c88b0e7064b5dc6d747319a", "filename": "gcc/gcse.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -4741,14 +4741,14 @@ pre_edge_insert (edge_list, index_map)\n \t\tstruct expr *expr = index_map[j];\n \t\tstruct occr *occr;\n \n-\t\t/* Now look at each deleted occurence of this expression.  */\n+\t\t/* Now look at each deleted occurrence of this expression.  */\n \t\tfor (occr = expr->antic_occr; occr != NULL; occr = occr->next)\n \t\t  {\n \t\t    if (! occr->deleted_p)\n \t\t      continue;\n \n \t\t    /* Insert this expression on this edge if if it would\n-\t\t       reach the deleted occurence in BB.  */\n+\t\t       reach the deleted occurrence in BB.  */\n \t\t    if (!TEST_BIT (inserted[e], j))\n \t\t      {\n \t\t\trtx insn;\n@@ -5693,7 +5693,7 @@ hoist_code ()\n \t\t    hoistable++;\n \t\t}\n \n-\t      /* If we found more than one hoistable occurence of this\n+\t      /* If we found more than one hoistable occurrence of this\n \t\t expression, then note it in the bitmap of expressions to\n \t\t hoist.  It makes no sense to hoist things which are computed\n \t\t in only one BB, and doing so tends to pessimize register\n@@ -5744,7 +5744,7 @@ hoist_code ()\n \t\t  /* The expression is computed in the dominated block and\n \t\t     it would be safe to compute it at the start of the\n \t\t     dominated block.  Now we have to determine if the\n-\t\t     expresion would reach the dominated block if it was\n+\t\t     expression would reach the dominated block if it was\n \t\t     placed at the end of BB.  */\n \t\t  if (hoist_expr_reaches_here_p (BASIC_BLOCK (bb), i, \n \t\t\t\t\t\t BASIC_BLOCK (dominated), NULL))\n@@ -5754,7 +5754,7 @@ hoist_code ()\n \t\t      rtx insn;\n \t\t      rtx set;\n \n-\t\t      /* Find the right occurence of this expression.  */\n+\t\t      /* Find the right occurrence of this expression.  */\n \t\t      while (BLOCK_NUM (occr->insn) != dominated && occr)\n \t\t\toccr = occr->next;\n \n@@ -5856,7 +5856,7 @@ one_code_hoisting_pass ()\n     load towards the exit, and we end up with no loads or stores of 'i'\n     in the loop.  */\n \n-/* This will search the ldst list for a matching expresion. If it\n+/* This will search the ldst list for a matching expression. If it\n    doesn't find one, we create one and initialize it.  */\n \n static struct ls_expr *\n@@ -6767,7 +6767,7 @@ insert_store (expr, e)\n   \n   /* If we are inserting this expression on ALL predecessor edges of a BB,\n      insert it at the start of the BB, and reset the insert bits on the other\n-     edges so we don;t try to insert it on the other edges.  */\n+     edges so we don't try to insert it on the other edges.  */\n   bb = e->dest;\n   for (tmp = e->dest->pred; tmp ; tmp = tmp->pred_next)\n     {"}, {"sha": "f2e6b28da2481dbc4171a9cd3544442ff4d2b02f", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -1200,7 +1200,7 @@ maybe_both_true_1 (d1, d2)\n   struct decision_test *t1, *t2;\n \n   /* A match_operand with no predicate can match anything.  Recognize\n-     this by the existance of a lone DT_accept_op test.  */\n+     this by the existence of a lone DT_accept_op test.  */\n   if (d1->type == DT_accept_op || d2->type == DT_accept_op)\n     return 1;\n "}, {"sha": "2ac66b1affcb7d056c6e660330f5a390d4a40467", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -2080,7 +2080,7 @@ __bb_init_prg (void)\n                    malloc (BB_BUCKETS * sizeof (struct bb_edge *));\n       if (bb_hashbuckets)\n \t/* Use a loop here rather than calling bzero to avoid having to\n-\t   conditionalize its existance.  */\n+\t   conditionalize its existence.  */\n \tfor (i = 0; i < BB_BUCKETS; i++)\n \t  bb_hashbuckets[i] = 0;\n     }"}, {"sha": "8e8806312618931db4dce9be8dce8aaebfa703ae", "filename": "gcc/loop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -6480,7 +6480,7 @@ combine_givs_p (g1, g2)\n {\n   rtx comb, ret;\n \n-  /* With the introduction of ext dependant givs, we must care for modes.\n+  /* With the introduction of ext dependent givs, we must care for modes.\n      G2 must not use a wider mode than G1.  */\n   if (GET_MODE_SIZE (g1->mode) < GET_MODE_SIZE (g2->mode))\n     return NULL_RTX;\n@@ -6526,7 +6526,7 @@ combine_givs_p (g1, g2)\n   return NULL_RTX;\n }\n \f\n-/* Check each extension dependant giv in this class to see if its\n+/* Check each extension dependent giv in this class to see if its\n    root biv is safe from wrapping in the interior mode, which would\n    make the giv illegal.  */\n \n@@ -6658,7 +6658,7 @@ check_ext_dependant_givs (bl, loop_info)\n \t    if (loop_dump_stream)\n \t      {\n \t\tfprintf (loop_dump_stream,\n-\t\t\t \"Verified ext dependant giv at %d of reg %d\\n\",\n+\t\t\t \"Verified ext dependent giv at %d of reg %d\\n\",\n \t\t\t INSN_UID (v->insn), bl->regno);\n \t      }\n \t  }\n@@ -6681,7 +6681,7 @@ check_ext_dependant_givs (bl, loop_info)\n \t\t  }\n \n \t\tfprintf (loop_dump_stream,\n-\t\t\t \"Failed ext dependant giv at %d, %s\\n\",\n+\t\t\t \"Failed ext dependent giv at %d, %s\\n\",\n \t\t\t INSN_UID (v->insn), why);\n \t      }\n \t    v->ignore = 1;"}, {"sha": "061c6abc49df7a63e033448d8c9d1ce7ecd19a8a", "filename": "gcc/loop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Floop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Floop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.h?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -136,7 +136,7 @@ struct induction\n \t\t\t\t   derives another.  This occurs when the\n \t\t\t\t   giv spans a biv update by incrementation.  */\n   rtx ext_dependant;\t\t/* If nonzero, is a sign or zero extension\n-\t\t\t\t   if a biv on which this giv is dependant.  */\n+\t\t\t\t   if a biv on which this giv is dependent.  */\n   struct induction *next_iv;\t/* For givs, links together all givs that are\n \t\t\t\t   based on the same biv.  For bivs, links\n \t\t\t\t   together all biv entries that refer to the"}, {"sha": "2a1d3a3b12c00b86174b60f8af15729b64ae2734", "filename": "gcc/params.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -69,9 +69,9 @@ DEFPARAM(PARAM_MAX_DELAY_SLOT_LIVE_SEARCH,\n \t 333)\n \n /* This parameter limits the number of branch elements that the \n-   scheduler will track anti-dependancies through without resetting\n+   scheduler will track anti-dependencies through without resetting\n    the tracking mechanism.  Large functions with few calls or barriers \n-   can generate lists containing many 1000's of dependancies.  Generally \n+   can generate lists containing many 1000's of dependencies.  Generally \n    the compiler either uses all available memory, or runs for far too long.  */\n DEFPARAM(PARAM_MAX_PENDING_LIST_LENGTH,\n \t \"max-pending-list-length\","}, {"sha": "01290b77d567736564a4c581de452b717e0da838", "filename": "gcc/predict.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -46,7 +46,7 @@ DEF_PREDICTOR (PRED_DS_THEORY, \"DS theory\", PROB_ALWAYS, 0)\n    matching heuristics from this list.  */\n DEF_PREDICTOR (PRED_FIRST_MATCH, \"first match\", PROB_ALWAYS, 0)\n \n-/* Heuristic applying when no heuristic bellow applies.  */\n+/* Heuristic applying when no heuristic below applies.  */\n DEF_PREDICTOR (PRED_NO_PREDICTION, \"no prediction\", PROB_ALWAYS, 0)\n \n /* Mark unconditional jump as taken.  */"}, {"sha": "6af5f8d8af118d240559d06a6f2ec9cd563332d8", "filename": "gcc/predict.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fpredict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fpredict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.h?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -38,7 +38,7 @@ extern void predict_insn_def\tPARAMS ((rtx, enum br_predictor,\n \t\t\t\t\t enum prediction));\n extern void predict_insn\tPARAMS ((rtx, enum br_predictor, int));\n \n-/* Avoid unneeded dependancy on basic_block.h  */\n+/* Avoid unneeded dependency on basic_block.h  */\n #ifdef BASIC_BLOCK\n extern void predict_edge\tPARAMS ((edge, enum br_predictor, int));\n extern void predict_edge_def\tPARAMS ((edge, enum br_predictor,"}, {"sha": "006f063475d065acce19df39e7eda431b9a62c13", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -2626,7 +2626,7 @@ convert_regs_1 (file, block)\n \n   /* Find the edge we will copy stack from.  It should be the most frequent\n      one as it will get cheapest after compensation code is generated,\n-     if multiple such exists, take one with largest count, preffer critical\n+     if multiple such exists, take one with largest count, prefer critical\n      one (as splitting critical edges is more expensive), or one with lowest\n      index, to avoid random changes with different orders of the edges.  */\n   for (e = block->pred; e ; e = e->pred_next)"}, {"sha": "1c4d56aa26444ce738a7039f423d5f52edeb0608", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -2372,7 +2372,7 @@ combine_stack_adjustments_for_block (bb)\n \t\t or a deallocation into the second insn.  We can not\n \t\t combine an allocation followed by a deallocation.\n \n-\t\t The only somewhat frequent ocurrence of the later is when\n+\t\t The only somewhat frequent occurrence of the later is when\n \t\t a function allocates a stack frame but does not use it.\n \t\t For this case, we would need to analyze rtl stream to be\n \t\t sure that allocated area is really unused.  This means not"}, {"sha": "13e929cf3caf807591d9e639fac1a12c3d8fd875", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -1017,7 +1017,7 @@ sched_analyze_insn (deps, x, insn, loop_notes)\n       sched_analyze_2 (deps, COND_EXEC_TEST (x), insn);\n \n       /* ??? Should be recording conditions so we reduce the number of\n-\t false dependancies.  */\n+\t false dependencies.  */\n       x = COND_EXEC_CODE (x);\n       code = GET_CODE (x);\n     }"}, {"sha": "298a94ccadfb25fcf997d585e0bcb9aabccdf1e0", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -162,7 +162,7 @@ extern struct sched_info *current_sched_info;\n struct haifa_insn_data\n {\n   /* A list of insns which depend on the instruction.  Unlike LOG_LINKS,\n-     it represents forward dependancies.  */\n+     it represents forward dependencies.  */\n   rtx depend;\n \n   /* The line number note in effect for each insn.  For line number"}, {"sha": "fe76865aa3ca5d78a45638a1a2108c5d7d92cb05", "filename": "gcc/sibcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -429,7 +429,7 @@ uses_addressof (x)\n }\n \n /* Scan the sequence of insns in SEQ to see if any have an ADDRESSOF\n-   rtl expression or current_function_internal_arg_pointer occurences\n+   rtl expression or current_function_internal_arg_pointer occurrences\n    not enclosed within a MEM.  If an ADDRESSOF expression or\n    current_function_internal_arg_pointer is found, return nonzero, otherwise\n    return zero."}, {"sha": "c2b49c79dd05c8b26eb9f4e86e5eb14e42b76d5a", "filename": "gcc/ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -1231,7 +1231,7 @@ ephi_add_node (reg, nodes, n_nodes)\n /* Part one of the topological sort.  This is a forward (downward) search\n    through the graph collecting a stack of nodes to process.  Assuming no\n    cycles, the nodes at top of the stack when we are finished will have\n-   no other dependancies.  */\n+   no other dependencies.  */\n \n static int *\n ephi_forward (t, visited, succ, tstack)"}, {"sha": "bdee2c4ecac12a9097faaec27968966e754d44c9", "filename": "gcc/stringpool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -18,7 +18,7 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n-/* String text, identifer text and identifier node allocator.  Strings\n+/* String text, identifier text and identifier node allocator.  Strings\n    allocated by ggc_alloc_string are stored in an obstack which is\n    never shrunk.  Identifiers are uniquely stored in a hash table.\n "}, {"sha": "cd7fc11c67baa581f94aafb0973dc0c96be98eac", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -1119,7 +1119,7 @@ lang_independent_options f_options[] =\n   {\"rename-registers\", &flag_rename_registers, 1,\n    N_(\"Do the register renaming optimization pass\") },\n   {\"common\", &flag_no_common, 0,\n-   N_(\"Do not put unitialised globals in the common section\") },\n+   N_(\"Do not put uninitialized globals in the common section\") },\n   {\"inhibit-size-directive\", &flag_inhibit_size_directive, 1,\n    N_(\"Do not generate .size directives\") },\n   {\"function-sections\", &flag_function_sections, 1,\n@@ -1539,7 +1539,7 @@ lang_independent_options W_options[] =\n   {\"unreachable-code\", &warn_notreached, 1,\n    N_(\"Warn about code that will never be executed\") },\n   {\"uninitialized\", &warn_uninitialized, 1,\n-   N_(\"Warn about unitialized automatic variables\") },\n+   N_(\"Warn about uninitialized automatic variables\") },\n   {\"inline\", &warn_inline, 1,\n    N_(\"Warn when an inlined function cannot be inlined\") },\n   {\"packed\", &warn_packed, 1,\n@@ -1719,7 +1719,7 @@ set_float_handler (handler)\n    pointer FN, and one argument DATA.  DATA is usually a struct which\n    contains the real input and output for function FN.  This function\n    returns 0 (failure) if longjmp was called (i.e. an exception\n-   occured.)  It returns 1 (success) otherwise.  */\n+   occurred.)  It returns 1 (success) otherwise.  */\n \n int\n do_float_handler (fn, data)"}, {"sha": "bb781170e4556f3a5a57930c0f1d632ac38c858a", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -2765,8 +2765,8 @@ is_attribute_p (attr, ident)\n /* Given an attribute name and a list of attributes, return a pointer to the\n    attribute's list element if the attribute is part of the list, or NULL_TREE\n    if not found.  If the attribute appears more than once, this only\n-   returns the first occurance; the TREE_CHAIN of the return value should\n-   be passed back in if further occurances are wanted.  */\n+   returns the first occurrence; the TREE_CHAIN of the return value should\n+   be passed back in if further occurrences are wanted.  */\n \n tree\n lookup_attribute (attr_name, list)"}, {"sha": "97e968e5a242b3defc12eceef2835518cf0bc178", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "patch": "@@ -3669,7 +3669,7 @@ loop_iterations (loop)\n \t  increment = fold_rtx_mult_add (v->mult_val,\n \t\t\t\t\t extend_value_for_giv (v, increment),\n \t\t\t\t\t const0_rtx, v->mode);\n-\t  /* The caller assumes that one full increment has occured at the\n+\t  /* The caller assumes that one full increment has occurred at the\n \t     first loop test.  But that's not true when the biv is incremented\n \t     after the giv is set (which is the usual case), e.g.:\n \t     i = 6; do {;} while (i++ < 9) ."}]}