{"sha": "abfe01cec91fae69bb05700bf6a53f41a64fd15c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJmZTAxY2VjOTFmYWU2OWJiMDU3MDBiZjZhNTNmNDFhNjRmZDE1Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-02-03T20:42:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-02-03T20:42:35Z"}, "message": "re PR c++/12909 (ambiguity in mangling vector types)\n\n\tPR c++/12909\n\t* mangle.c (write_type) [VECTOR_TYPE]: Change mangling.\n\nFrom-SVN: r156481", "tree": {"sha": "f8b4a568a621bd1d216e238d04ed36cb854f1bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8b4a568a621bd1d216e238d04ed36cb854f1bc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abfe01cec91fae69bb05700bf6a53f41a64fd15c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abfe01cec91fae69bb05700bf6a53f41a64fd15c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abfe01cec91fae69bb05700bf6a53f41a64fd15c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abfe01cec91fae69bb05700bf6a53f41a64fd15c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07738b87c4273fcfd97bf40940fe4f26ea555292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07738b87c4273fcfd97bf40940fe4f26ea555292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07738b87c4273fcfd97bf40940fe4f26ea555292"}], "stats": {"total": 120, "additions": 113, "deletions": 7}, "files": [{"sha": "a4358b5ea50d8b54cedc048fdac8283f56ed2c6d", "filename": "gcc/common.opt", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfe01cec91fae69bb05700bf6a53f41a64fd15c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfe01cec91fae69bb05700bf6a53f41a64fd15c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=abfe01cec91fae69bb05700bf6a53f41a64fd15c", "patch": "@@ -266,7 +266,13 @@ Common Separate\n ;\n ; 1: The version of the ABI first used in G++ 3.2.\n ;\n-; 2: The version of the ABI first used in G++ 3.4.\n+; 2: The version of the ABI first used in G++ 3.4 (and current default).\n+;\n+; 3: The version of the ABI that fixes the missing underscore\n+;    in template non-type arguments of pointer type.\n+;\n+; 4: The version of the ABI that introduces unambiguous mangling of\n+;    vector types.\n ;\n ; Additional positive integers will be assigned as new versions of\n ; the ABI become the default version of the ABI."}, {"sha": "c3b1bdc2a6073ca244e90fc394e2b07d80a159d9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfe01cec91fae69bb05700bf6a53f41a64fd15c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfe01cec91fae69bb05700bf6a53f41a64fd15c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=abfe01cec91fae69bb05700bf6a53f41a64fd15c", "patch": "@@ -1,3 +1,9 @@\n+2010-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/12909\n+\t* mangle.c (write_type) [VECTOR_TYPE]: Change mangling with\n+\t-fabi-version=4.\n+\n 2010-02-02  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41090"}, {"sha": "37293f1b4db26254b6773b8a07ac9e53522f2360", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfe01cec91fae69bb05700bf6a53f41a64fd15c/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfe01cec91fae69bb05700bf6a53f41a64fd15c/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=abfe01cec91fae69bb05700bf6a53f41a64fd15c", "patch": "@@ -1850,7 +1850,16 @@ write_type (tree type)\n \t      break;\n \n \t    case VECTOR_TYPE:\n-\t      write_string (\"U8__vector\");\n+\t      if (abi_version_at_least (4))\n+\t\t{\n+\t\t  write_string (\"Dv\");\n+\t\t  /* Non-constant vector size would be encoded with\n+\t\t     _ expression, but we don't support that yet.  */\n+\t\t  write_unsigned_number (TYPE_VECTOR_SUBPARTS (type));\n+\t\t  write_char ('_');\n+\t\t}\n+\t      else\n+\t\twrite_string (\"U8__vector\");\n \t      write_type (TREE_TYPE (type));\n \t      break;\n "}, {"sha": "0c849b9298e954df7651a05cddf587512fed5835", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfe01cec91fae69bb05700bf6a53f41a64fd15c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfe01cec91fae69bb05700bf6a53f41a64fd15c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=abfe01cec91fae69bb05700bf6a53f41a64fd15c", "patch": "@@ -1,5 +1,8 @@\n 2010-02-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/12909\n+\t* g++.dg/abi/mangle36.C: New.\n+\n \tPR c++/35652\n \t* g++.dg/warn/string1.C: New.\n "}, {"sha": "aaace6570a2510090c32a7ec6c60b3e39c3816de", "filename": "gcc/testsuite/g++.dg/abi/mangle36.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfe01cec91fae69bb05700bf6a53f41a64fd15c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfe01cec91fae69bb05700bf6a53f41a64fd15c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle36.C?ref=abfe01cec91fae69bb05700bf6a53f41a64fd15c", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/41959\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-mavx -fabi-version=4\" }\n+// { dg-final { scan-assembler \"_Z1fDv4_f\" } }\n+// { dg-final { scan-assembler \"_Z1fDv8_f\" } }\n+\n+#include <x86intrin.h>\n+void f(__m128) { }\n+void f(__m256) { }"}, {"sha": "8ad073de53205f760efcd8b79da7229d5ed6f3a6", "filename": "include/demangle.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfe01cec91fae69bb05700bf6a53f41a64fd15c/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfe01cec91fae69bb05700bf6a53f41a64fd15c/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=abfe01cec91fae69bb05700bf6a53f41a64fd15c", "patch": "@@ -326,6 +326,9 @@ enum demangle_component_type\n   DEMANGLE_COMPONENT_PTRMEM_TYPE,\n   /* A fixed-point type.  */\n   DEMANGLE_COMPONENT_FIXED_TYPE,\n+  /* A vector type.  The left subtree is the number of elements,\n+     the right subtree is the element type.  */\n+  DEMANGLE_COMPONENT_VECTOR_TYPE,\n   /* An argument list.  The left subtree is the current argument, and\n      the right subtree is either NULL or another ARGLIST node.  */\n   DEMANGLE_COMPONENT_ARGLIST,\n@@ -378,6 +381,8 @@ enum demangle_component_type\n   DEMANGLE_COMPONENT_COMPOUND_NAME,\n   /* A name formed by a single character.  */\n   DEMANGLE_COMPONENT_CHARACTER,\n+  /* A number.  */\n+  DEMANGLE_COMPONENT_NUMBER,\n   /* A decltype type.  */\n   DEMANGLE_COMPONENT_DECLTYPE,\n   /* Global constructors keyed to name.  */"}, {"sha": "d4a43ec33e8f41aef739a26ff0d3c973c117ec45", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfe01cec91fae69bb05700bf6a53f41a64fd15c/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfe01cec91fae69bb05700bf6a53f41a64fd15c/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=abfe01cec91fae69bb05700bf6a53f41a64fd15c", "patch": "@@ -1,3 +1,9 @@\n+2010-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/12909\n+\t* cp-demangle.c (d_number_component, d_vector_type): New.\n+\t(cplus_demangle_type, d_print_comp, d_print_mod): Handle vectors.\n+\n 2010-01-25  Ian Lance Taylor  <iant@google.com>\n \n \t* cp-demangle.c (cplus_demangle_type): Check for invalid type"}, {"sha": "75706b3bd2a4c444aa7e3baeb680415619044d26", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 61, "deletions": 5, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfe01cec91fae69bb05700bf6a53f41a64fd15c/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfe01cec91fae69bb05700bf6a53f41a64fd15c/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=abfe01cec91fae69bb05700bf6a53f41a64fd15c", "patch": "@@ -389,6 +389,8 @@ d_class_enum_type (struct d_info *);\n \n static struct demangle_component *d_array_type (struct d_info *);\n \n+static struct demangle_component *d_vector_type (struct d_info *);\n+\n static struct demangle_component *\n d_pointer_to_member_type (struct d_info *);\n \n@@ -796,6 +798,7 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_LITERAL:\n     case DEMANGLE_COMPONENT_LITERAL_NEG:\n     case DEMANGLE_COMPONENT_COMPOUND_NAME:\n+    case DEMANGLE_COMPONENT_VECTOR_TYPE:\n       if (left == NULL || right == NULL)\n \treturn NULL;\n       break;\n@@ -1442,6 +1445,20 @@ d_number (struct d_info *di)\n     }\n }\n \n+/* Like d_number, but returns a demangle_component.  */\n+\n+static struct demangle_component *\n+d_number_component (struct d_info *di)\n+{\n+  struct demangle_component *ret = d_make_empty (di);\n+  if (ret)\n+    {\n+      ret->type = DEMANGLE_COMPONENT_NUMBER;\n+      ret->u.s_number.number = d_number (di);\n+    }\n+  return ret;\n+}\n+\n /* identifier ::= <(unqualified source code identifier)>  */\n \n static struct demangle_component *\n@@ -2200,6 +2217,10 @@ cplus_demangle_type (struct d_info *di)\n \t  ret->u.s_fixed.sat = (peek == 's');\n \t  break;\n \n+\tcase 'v':\n+\t  ret = d_vector_type (di);\n+\t  break;\n+\n \tdefault:\n \t  return NULL;\n \t}\n@@ -2418,6 +2439,34 @@ d_array_type (struct d_info *di)\n \t\t      cplus_demangle_type (di));\n }\n \n+/* <vector-type> ::= Dv <number> _ <type>\n+                 ::= Dv _ <expression> _ <type> */\n+\n+static struct demangle_component *\n+d_vector_type (struct d_info *di)\n+{\n+  char peek;\n+  struct demangle_component *dim;\n+\n+  peek = d_peek_char (di);\n+  if (peek == '_')\n+    {\n+      d_advance (di, 1);\n+      dim = d_expression (di);\n+    }\n+  else\n+    dim = d_number_component (di);\n+\n+  if (dim == NULL)\n+    return NULL;\n+\n+  if (! d_check_char (di, '_'))\n+    return NULL;\n+\n+  return d_make_comp (di, DEMANGLE_COMPONENT_VECTOR_TYPE, dim,\n+\t\t      cplus_demangle_type (di));\n+}\n+\n /* <pointer-to-member-type> ::= M <(class) type> <(member) type>  */\n \n static struct demangle_component *\n@@ -3930,6 +3979,7 @@ d_print_comp (struct d_print_info *dpi,\n       }\n \n     case DEMANGLE_COMPONENT_PTRMEM_TYPE:\n+    case DEMANGLE_COMPONENT_VECTOR_TYPE:\n       {\n \tstruct d_print_mod dpm;\n \n@@ -3944,11 +3994,7 @@ d_print_comp (struct d_print_info *dpi,\n \t/* If the modifier didn't get printed by the type, print it\n \t   now.  */\n \tif (! dpm.printed)\n-\t  {\n-\t    d_append_char (dpi, ' ');\n-\t    d_print_comp (dpi, d_left (dc));\n-\t    d_append_string (dpi, \"::*\");\n-\t  }\n+\t  d_print_mod (dpi, dc);\n \n \tdpi->modifiers = dpm.next;\n \n@@ -4168,6 +4214,10 @@ d_print_comp (struct d_print_info *dpi,\n       }\n       return;\n \n+    case DEMANGLE_COMPONENT_NUMBER:\n+      d_append_num (dpi, dc->u.s_number.number);\n+      return;\n+\n     case DEMANGLE_COMPONENT_JAVA_RESOURCE:\n       d_append_string (dpi, \"java resource \");\n       d_print_comp (dpi, d_left (dc));\n@@ -4440,6 +4490,12 @@ d_print_mod (struct d_print_info *dpi,\n     case DEMANGLE_COMPONENT_TYPED_NAME:\n       d_print_comp (dpi, d_left (mod));\n       return;\n+    case DEMANGLE_COMPONENT_VECTOR_TYPE:\n+      d_append_string (dpi, \" vector[\");\n+      d_print_comp (dpi, d_left (mod));\n+      d_append_char (dpi, ']');\n+      return;\n+\n     default:\n       /* Otherwise, we have something that won't go back on the\n \t modifier stack, so we can just print it.  */"}, {"sha": "3662f163063fca714293f65fd6b5b5792dca5dca", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfe01cec91fae69bb05700bf6a53f41a64fd15c/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfe01cec91fae69bb05700bf6a53f41a64fd15c/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=abfe01cec91fae69bb05700bf6a53f41a64fd15c", "patch": "@@ -3926,6 +3926,12 @@ S<int>::x::{lambda()#3}::operator()() const\n --format=gnu-v3\n _Z1fN1SUt_E\n f(S::{unnamed type#1})\n+--format=gnu-v3\n+_Z1fDv32_f\n+f(float vector[32])\n+--format=gnu-v3\n+_Z1fIfLi4EEvDv_T0__T_\n+void f<float, 4>(float vector[4])\n #\n # Ada (GNAT) tests.\n #"}]}