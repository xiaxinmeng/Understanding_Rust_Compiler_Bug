{"sha": "ad2aab5c816a6fd56b46210c0a4a4c6243da1de9", "node_id": "C_kwDOANBUbNoAKGFkMmFhYjVjODE2YTZmZDU2YjQ2MjEwYzBhNGE0YzYyNDNkYTFkZTk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-24T07:24:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-24T07:24:26Z"}, "message": "openmp: Fix ICE with taskgroup at -O0 -fexceptions [PR107001]\n\nThe following testcase ICEs because with -O0 -fexceptions GOMP_taskgroup_end\ncall isn't directly followed by GOMP_RETURN statement, but there are some\nconditionals to handle exceptions and we fail to find the correct GOMP_RETURN.\n\nThe fix is to treat taskgroup similarly to target data, both of these constructs\nemit a try { body } finally { end_call } around the construct's body during\ngimplification and we need to see proper construct nesting during gimplification\nand omp lowering (including nesting of regions checks), but during omp expansion\nwe don't really need their nesting anymore, all we need is emit something at\nthe start of the region and the end of the region is the end API call we've\nalready emitted during gimplification.  For target data, we weren't adding\nGOMP_RETURN statement during omp lowering, so after that pass it is treated\nmerely like stand-alone omp directives.  This patch does the same for\ntaskgroup too.\n\n2022-09-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/107001\n\t* omp-low.cc (lower_omp_taskgroup): Don't add GOMP_RETURN statement\n\tat the end.\n\t* omp-expand.cc (build_omp_regions_1): Clarify GF_OMP_TARGET_KIND_DATA\n\tis not stand-alone directive.  For GIMPLE_OMP_TASKGROUP, also don't\n\tupdate parent.\n\t(omp_make_gimple_edges) <case GIMPLE_OMP_TASKGROUP>: Reset\n\tcur_region back after new_omp_region.\n\n\t* c-c++-common/gomp/pr107001.c: New test.", "tree": {"sha": "5ae5b0af70a6bc1591f6f336cef4a41a784bc590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ae5b0af70a6bc1591f6f336cef4a41a784bc590"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5bccb608c665ac3f62adb1817c42c845812428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5bccb608c665ac3f62adb1817c42c845812428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5bccb608c665ac3f62adb1817c42c845812428"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "5dc0bf16e17ed0a10ab916c74cd7a19889f11014", "filename": "gcc/omp-expand.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9/gcc%2Fomp-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9/gcc%2Fomp-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.cc?ref=ad2aab5c816a6fd56b46210c0a4a4c6243da1de9", "patch": "@@ -10712,7 +10712,10 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \t\tcase GF_OMP_TARGET_KIND_OACC_ENTER_DATA:\n \t\tcase GF_OMP_TARGET_KIND_OACC_EXIT_DATA:\n \t\tcase GF_OMP_TARGET_KIND_OACC_DECLARE:\n-\t\t  /* ..., other than for those stand-alone directives...  */\n+\t\t  /* ..., other than for those stand-alone directives...\n+\t\t     To be precise, target data isn't stand-alone, but\n+\t\t     gimplifier put the end API call into try finally block\n+\t\t     for it, so omp expansion can treat it as such.  */\n \t\t  region = NULL;\n \t\t  break;\n \t\tdefault:\n@@ -10728,6 +10731,11 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \t\t   && gimple_omp_task_taskwait_p (stmt))\n \t    /* #pragma omp taskwait depend(...) is a stand-alone directive.  */\n \t    region = NULL;\n+\t  else if (code == GIMPLE_OMP_TASKGROUP)\n+\t    /* #pragma omp taskgroup isn't a stand-alone directive, but\n+\t       gimplifier put the end API call into try finall block\n+\t       for it, so omp expansion can treat it as such.  */\n+\t    region = NULL;\n \t  /* ..., this directive becomes the parent for a new region.  */\n \t  if (region)\n \t    parent = region;\n@@ -10927,13 +10935,18 @@ omp_make_gimple_edges (basic_block bb, struct omp_region **region,\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_MASKED:\n     case GIMPLE_OMP_SCOPE:\n-    case GIMPLE_OMP_TASKGROUP:\n     case GIMPLE_OMP_CRITICAL:\n     case GIMPLE_OMP_SECTION:\n       cur_region = new_omp_region (bb, code, cur_region);\n       fallthru = true;\n       break;\n \n+    case GIMPLE_OMP_TASKGROUP:\n+      cur_region = new_omp_region (bb, code, cur_region);\n+      fallthru = true;\n+      cur_region = cur_region->outer;\n+      break;\n+\n     case GIMPLE_OMP_TASK:\n       cur_region = new_omp_region (bb, code, cur_region);\n       fallthru = true;"}, {"sha": "d9f9aaebc0b0572f3e92cbb93cde0e65d10cebc0", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=ad2aab5c816a6fd56b46210c0a4a4c6243da1de9", "patch": "@@ -9724,7 +9724,6 @@ lower_omp_taskgroup (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   gimple_bind_add_seq (bind, gimple_omp_body (stmt));\n   gimple_omp_set_body (stmt, NULL);\n \n-  gimple_bind_add_stmt (bind, gimple_build_omp_return (true));\n   gimple_bind_add_seq (bind, dseq);\n \n   pop_gimplify_context (bind);"}, {"sha": "9c19d9b874584afaf460f9d4cb36f2b465d17be0", "filename": "gcc/testsuite/c-c++-common/gomp/pr107001.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr107001.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr107001.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr107001.c?ref=ad2aab5c816a6fd56b46210c0a4a4c6243da1de9", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/107001 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -fopenmp -fexceptions\" } */\n+/* { dg-require-effective-target exceptions } */\n+\n+void bar (void);\n+void foo (void)\n+{\n+  #pragma omp taskgroup\n+  {\n+    #pragma omp taskgroup\n+    bar ();\n+  }\n+}"}]}