{"sha": "40c88b9403ef1e2b2e93ff70a5fb794916027665", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBjODhiOTQwM2VmMWUyYjJlOTNmZjcwYTVmYjc5NDkxNjAyNzY2NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-09-14T19:27:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-09-14T19:27:21Z"}, "message": "exp_dbug.ads (Packed Array Encoding): Document the new encoding for the unconstrained case.\n\n\t* exp_dbug.ads (Packed Array Encoding): Document the new encoding for\n\tthe unconstrained case.\n\t* gcc-interfaces/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Implement\n\tthe encoding.  Do not give a name to the pointer type to the XUT type.\n\t* gcc-interfaces/utils.c (gnat_pushdecl): Propagate DECL_ORIGINAL_TYPE\n\tfor fat pointer types, if any.  Make sure DECL_ARTIFICIAL is cleared\n\ton nodes with DECL_ORIGINAL_TYPE set.\n\t(update_pointer_to): Set DECL_ORIGINAL_TYPE to the original pointer\n\tfor fat pointer types.  Make sure DECL_ARTIFICIAL is cleared.\n\nFrom-SVN: r151697", "tree": {"sha": "60a554690ff540bb38e350af14ceebfd44fee09f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60a554690ff540bb38e350af14ceebfd44fee09f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40c88b9403ef1e2b2e93ff70a5fb794916027665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c88b9403ef1e2b2e93ff70a5fb794916027665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c88b9403ef1e2b2e93ff70a5fb794916027665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c88b9403ef1e2b2e93ff70a5fb794916027665/comments", "author": null, "committer": null, "parents": [{"sha": "1d65f45cfaefa060737af130c3fc69afb3030980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d65f45cfaefa060737af130c3fc69afb3030980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d65f45cfaefa060737af130c3fc69afb3030980"}], "stats": {"total": 74, "additions": 59, "deletions": 15}, "files": [{"sha": "110d7357c2267426a266263ac17e79762dc6b8e0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c88b9403ef1e2b2e93ff70a5fb794916027665/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c88b9403ef1e2b2e93ff70a5fb794916027665/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=40c88b9403ef1e2b2e93ff70a5fb794916027665", "patch": "@@ -1,3 +1,15 @@\n+2009-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_dbug.ads (Packed Array Encoding): Document the new encoding for\n+\tthe unconstrained case.\n+\t* gcc-interfaces/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Implement\n+\tthe encoding.  Do not give a name to the pointer type to the XUT type.\n+\t* gcc-interfaces/utils.c (gnat_pushdecl): Propagate DECL_ORIGINAL_TYPE\n+\tfor fat pointer types, if any.  Make sure DECL_ARTIFICIAL is cleared\n+\ton nodes with DECL_ORIGINAL_TYPE set.\n+\t(update_pointer_to): Set DECL_ORIGINAL_TYPE to the original pointer\n+\tfor fat pointer types.  Make sure DECL_ARTIFICIAL is cleared.\n+\n 2009-09-14  Richard Henderson  <rth@redhat.com>\n \n \t* gcc-interface/misc.c (gnat_init_gcc_eh): Don't call"}, {"sha": "3c3144641d8266b84cce8dfb3fd38fab14d946d5", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c88b9403ef1e2b2e93ff70a5fb794916027665/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c88b9403ef1e2b2e93ff70a5fb794916027665/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=40c88b9403ef1e2b2e93ff70a5fb794916027665", "patch": "@@ -1094,8 +1094,8 @@ package Exp_Dbug is\n    -- Packed Array Encoding --\n    ---------------------------\n \n-   --  For every packed array, two types are created, and both appear in\n-   --  the debugging output.\n+   --  For every constrained packed array, two types are created, and both\n+   --  appear in the debugging output:\n \n    --    The original declared array type is a perfectly normal array type,\n    --    and its index bounds indicate the original bounds of the array.\n@@ -1110,12 +1110,27 @@ package Exp_Dbug is\n    --    ttt___XPnnn\n \n    --  where\n+\n    --    ttt is the name of the original declared array\n    --    nnn is the component size in bits (1-31)\n \n-   --  When the debugger sees that an object is of a type that is encoded\n-   --  in this manner, it can use the original type to determine the bounds,\n-   --  and the component size to determine the packing details.\n+   --  When the debugger sees that an object is of a type that is encoded in\n+   --  this manner, it can use the original type to determine the bounds and\n+   --  the component type, and the component size to determine the packing\n+   --  details.\n+\n+   --  For an unconstrained packed array, the corresponding packed array type\n+   --  is neither used in the generated code nor for debugging information,\n+   --  only the original type is used. In order to convey the packing in the\n+   --  debugging information, the compiler generates the associated fat- and\n+   --  thin-pointer types (see the Pointers to Unconstrained Array section\n+   --  below) using the name of the corresponding packed array type as the\n+   --  base name, i.e. ttt___XPnnn___XUP and ttt___XPnnn___XUT respectively.\n+\n+   --  When the debugger sees that an object is of a type that is encoded in\n+   --  this manner, it can use the type of the fields to determine the bounds\n+   --  and the component type, and the component size to determine the packing\n+   --  details.\n \n    -------------------------------------------\n    -- Packed Array Representation in Memory --\n@@ -1257,6 +1272,7 @@ package Exp_Dbug is\n    --      fat-pointer type whose name is \"arr___XUP\", where \"arr\" is the name\n    --      of the array type, and use it to represent the array type itself in\n    --      the debugging information.\n+\n    --      For each pointer to this unconstrained array type, the compiler will\n    --      generate a typedef that points to the above \"arr___XUP\" fat-pointer\n    --      type. As a consequence, when it comes to fat-pointer types:"}, {"sha": "ed393388c5cf4ec4c93de51bad6fe8991f5b67a1", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c88b9403ef1e2b2e93ff70a5fb794916027665/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c88b9403ef1e2b2e93ff70a5fb794916027665/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=40c88b9403ef1e2b2e93ff70a5fb794916027665", "patch": "@@ -1782,7 +1782,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n     case E_String_Type:\n     case E_Array_Type:\n       {\n-\tEntity_Id gnat_index;\n+\tEntity_Id gnat_index, gnat_name;\n \tconst bool convention_fortran_p\n \t  = (Convention (gnat_entity) == Convention_Fortran);\n \tconst int ndim = Number_Dimensions (gnat_entity);\n@@ -2066,25 +2066,25 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t  tem, NULL, !Comes_From_Source (gnat_entity),\n \t\t\t  debug_info_p, gnat_entity);\n \n-\t/* Give the fat pointer type a name.  */\n-\tcreate_type_decl (create_concat_name (gnat_entity, \"XUP\"),\n+\t/* Give the fat pointer type a name.  If this is a packed type, tell\n+\t   the debugger how to interpret the underlying bits.  */\n+\tif (Present (Packed_Array_Type (gnat_entity)))\n+\t  gnat_name = Packed_Array_Type (gnat_entity);\n+\telse\n+\t  gnat_name = gnat_entity;\n+\tcreate_type_decl (create_concat_name (gnat_name, \"XUP\"),\n \t\t\t  gnu_fat_type, NULL, true,\n \t\t\t  debug_info_p, gnat_entity);\n \n        /* Create the type to be used as what a thin pointer designates: an\n           record type for the object and its template with the field offsets\n           shifted to have the template at a negative offset.  */\n \ttem = build_unc_object_type (gnu_template_type, tem,\n-\t\t\t\t     create_concat_name (gnat_entity, \"XUT\"));\n+\t\t\t\t     create_concat_name (gnat_name, \"XUT\"));\n \tshift_unc_components_for_thin_pointers (tem);\n \n \tSET_TYPE_UNCONSTRAINED_ARRAY (tem, gnu_type);\n \tTYPE_OBJECT_RECORD_TYPE (gnu_type) = tem;\n-\n-\t/* Give the thin pointer type a name.  */\n-\tcreate_type_decl (create_concat_name (gnat_entity, \"XUX\"),\n-\t\t\t  build_pointer_type (tem), NULL, true,\n-\t\t\t  debug_info_p, gnat_entity);\n       }\n       break;\n "}, {"sha": "31f24ce034025227b551d8c54fa5d9f538fd00d5", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c88b9403ef1e2b2e93ff70a5fb794916027665/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c88b9403ef1e2b2e93ff70a5fb794916027665/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=40c88b9403ef1e2b2e93ff70a5fb794916027665", "patch": "@@ -495,8 +495,12 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \t  TYPE_NAME (tt) = decl;\n \t  TREE_USED (tt) = TREE_USED (t);\n \t  TREE_TYPE (decl) = tt;\n-\t  DECL_ORIGINAL_TYPE (decl) = t;\n+\t  if (DECL_ORIGINAL_TYPE (TYPE_NAME (t)))\n+\t    DECL_ORIGINAL_TYPE (decl) = DECL_ORIGINAL_TYPE (TYPE_NAME (t));\n+\t  else\n+\t    DECL_ORIGINAL_TYPE (decl) = t;\n \t  t = NULL_TREE;\n+\t  DECL_ARTIFICIAL (decl) = 0;\n \t}\n       else if (DECL_ARTIFICIAL (TYPE_NAME (t)) && !DECL_ARTIFICIAL (decl))\n \t;\n@@ -3665,6 +3669,18 @@ update_pointer_to (tree old_type, tree new_type)\n       TYPE_POINTER_TO (new_type) = TYPE_REFERENCE_TO (new_type)\n \t= TREE_TYPE (new_type) = ptr;\n \n+      /* And show the original pointer NEW_PTR to the debugger.  This is the\n+\t counterpart of the equivalent processing in gnat_pushdecl when the\n+\t unconstrained array type is frozen after access types to it.  Note\n+\t that update_pointer_to can be invoked multiple times on the same\n+\t couple of types because of the type variants.  */\n+      if (TYPE_NAME (ptr)\n+\t  && TREE_CODE (TYPE_NAME (ptr)) == TYPE_DECL\n+\t  && !DECL_ORIGINAL_TYPE (TYPE_NAME (ptr)))\n+\t{\n+\t  DECL_ORIGINAL_TYPE (TYPE_NAME (ptr)) = new_ptr;\n+\t  DECL_ARTIFICIAL (TYPE_NAME (ptr)) = 0;\n+\t}\n       for (var = TYPE_MAIN_VARIANT (ptr); var; var = TYPE_NEXT_VARIANT (var))\n \tSET_TYPE_UNCONSTRAINED_ARRAY (var, new_type);\n "}]}