{"sha": "eece52b53b75767593282d178bae12ceebb33f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjZTUyYjUzYjc1NzY3NTkzMjgyZDE3OGJhZTEyY2VlYmIzM2YxMg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-12-11T16:25:43Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-12-16T11:44:19Z"}, "message": "opts: Remove all usages of Report keyword.\n\ngcc/brig/ChangeLog:\n\n\t* lang.opt: Remove usage of Report.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt: Remove usage of Report.\n\ngcc/ChangeLog:\n\n\t* common.opt: Remove usage of Report.\n\t* config/aarch64/aarch64.opt: Ditto.\n\t* config/alpha/alpha.opt: Ditto.\n\t* config/arc/arc.opt: Ditto.\n\t* config/arm/arm.opt: Ditto.\n\t* config/avr/avr.opt: Ditto.\n\t* config/bfin/bfin.opt: Ditto.\n\t* config/bpf/bpf.opt: Ditto.\n\t* config/c6x/c6x.opt: Ditto.\n\t* config/cr16/cr16.opt: Ditto.\n\t* config/cris/cris.opt: Ditto.\n\t* config/cris/elf.opt: Ditto.\n\t* config/csky/csky.opt: Ditto.\n\t* config/darwin.opt: Ditto.\n\t* config/fr30/fr30.opt: Ditto.\n\t* config/frv/frv.opt: Ditto.\n\t* config/ft32/ft32.opt: Ditto.\n\t* config/gcn/gcn.opt: Ditto.\n\t* config/i386/cygming.opt: Ditto.\n\t* config/i386/i386.opt: Ditto.\n\t* config/ia64/ia64.opt: Ditto.\n\t* config/ia64/ilp32.opt: Ditto.\n\t* config/linux-android.opt: Ditto.\n\t* config/linux.opt: Ditto.\n\t* config/lm32/lm32.opt: Ditto.\n\t* config/m32r/m32r.opt: Ditto.\n\t* config/m68k/m68k.opt: Ditto.\n\t* config/mcore/mcore.opt: Ditto.\n\t* config/microblaze/microblaze.opt: Ditto.\n\t* config/mips/mips.opt: Ditto.\n\t* config/mmix/mmix.opt: Ditto.\n\t* config/mn10300/mn10300.opt: Ditto.\n\t* config/moxie/moxie.opt: Ditto.\n\t* config/msp430/msp430.opt: Ditto.\n\t* config/nds32/nds32.opt: Ditto.\n\t* config/nios2/elf.opt: Ditto.\n\t* config/nios2/nios2.opt: Ditto.\n\t* config/nvptx/nvptx.opt: Ditto.\n\t* config/pa/pa.opt: Ditto.\n\t* config/pdp11/pdp11.opt: Ditto.\n\t* config/pru/pru.opt: Ditto.\n\t* config/riscv/riscv.opt: Ditto.\n\t* config/rl78/rl78.opt: Ditto.\n\t* config/rs6000/aix64.opt: Ditto.\n\t* config/rs6000/linux64.opt: Ditto.\n\t* config/rs6000/rs6000.opt: Ditto.\n\t* config/rs6000/sysv4.opt: Ditto.\n\t* config/rx/elf.opt: Ditto.\n\t* config/rx/rx.opt: Ditto.\n\t* config/s390/s390.opt: Ditto.\n\t* config/s390/tpf.opt: Ditto.\n\t* config/sh/sh.opt: Ditto.\n\t* config/sol2.opt: Ditto.\n\t* config/sparc/long-double-switch.opt: Ditto.\n\t* config/sparc/sparc.opt: Ditto.\n\t* config/tilegx/tilegx.opt: Ditto.\n\t* config/tilepro/tilepro.opt: Ditto.\n\t* config/v850/v850.opt: Ditto.\n\t* config/visium/visium.opt: Ditto.\n\t* config/vms/vms.opt: Ditto.\n\t* config/vxworks.opt: Ditto.\n\t* config/xtensa/xtensa.opt: Ditto.\n\ngcc/lto/ChangeLog:\n\n\t* lang.opt: Remove usage of Report.", "tree": {"sha": "d80ca0a0b333b6fbc9bd30e4a285d5a23c009cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d80ca0a0b333b6fbc9bd30e4a285d5a23c009cfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eece52b53b75767593282d178bae12ceebb33f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eece52b53b75767593282d178bae12ceebb33f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eece52b53b75767593282d178bae12ceebb33f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eece52b53b75767593282d178bae12ceebb33f12/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5137d1ae6a1fe4a3ff8b5983f6e4d9aeb69e5486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5137d1ae6a1fe4a3ff8b5983f6e4d9aeb69e5486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5137d1ae6a1fe4a3ff8b5983f6e4d9aeb69e5486"}], "stats": {"total": 2766, "additions": 1383, "deletions": 1383}, "files": [{"sha": "39a4ddff2ad50d878ba86db146fe89b2052b2138", "filename": "gcc/brig/lang.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fbrig%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fbrig%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Flang.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -32,7 +32,7 @@ BRIG Separate Alias(d)\n BRIG Joined Alias(d)\n \n fassume-phsa\n-BRIG Report Var(flag_assume_phsa) Init(1) Optimization\n+BRIG Var(flag_assume_phsa) Init(1) Optimization\n Assume we are finalizing for phsa and its libhsail-rt.  Enables additional\n phsa-specific optimizations (default).\n "}, {"sha": "21d8cd03709adee3662e7648086e1c89989b34d5", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -1647,7 +1647,7 @@ C++ ObjC++ Var(flag_no_gnu_keywords, 0)\n Recognize GNU-defined keywords.\n \n fgnu-runtime\n-ObjC ObjC++ LTO Report RejectNegative Var(flag_next_runtime,0) Init(NEXT_OBJC_RUNTIME)\n+ObjC ObjC++ LTO RejectNegative Var(flag_next_runtime,0) Init(NEXT_OBJC_RUNTIME)\n Generate code for GNU runtime environment.\n \n fgnu89-inline\n@@ -1691,7 +1691,7 @@ ffriend-injection\n C++ ObjC++ WarnRemoved\n \n fkeep-inline-dllexport\n-C C++ ObjC ObjC++ Var(flag_keep_inline_dllexport) Init(1) Report Condition(TARGET_DLLIMPORT_DECL_ATTRIBUTES)\n+C C++ ObjC ObjC++ Var(flag_keep_inline_dllexport) Init(1) Condition(TARGET_DLLIMPORT_DECL_ATTRIBUTES)\n Don't emit dllexported inline functions unless needed.\n \n flabels-ok\n@@ -1780,7 +1780,7 @@ C++ ObjC++ Var(flag_new_ttp)\n Implement resolution of DR 150 for matching of template template arguments.\n \n fnext-runtime\n-ObjC ObjC++ LTO Report RejectNegative Var(flag_next_runtime)\n+ObjC ObjC++ LTO RejectNegative Var(flag_next_runtime)\n Generate code for NeXT (Apple Mac OS X) runtime environment.\n \n fnil-receivers\n@@ -1821,7 +1821,7 @@ C++ ObjC++ Optimization Var(flag_nothrow_opt)\n Treat a throw() exception specification as noexcept to improve code size.\n \n fobjc-abi-version=\n-ObjC ObjC++ LTO Joined Report RejectNegative UInteger Var(flag_objc_abi)\n+ObjC ObjC++ LTO Joined RejectNegative UInteger Var(flag_objc_abi)\n Specify which ABI to use for Objective-C family code and meta-data generation.\n \n ; Generate special '- .cxx_construct' and '- .cxx_destruct' methods"}, {"sha": "fcb86c8545038b669f58f7c79788f6f62f0b5eb0", "filename": "gcc/common.opt", "status": "modified", "additions": 292, "deletions": 292, "changes": 584, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -298,7 +298,7 @@ Common Driver Var(help_flag)\n Display this information.\n \n -help=\n-Common Driver Report Joined\n+Common Driver Joined\n --help=<class>\tDisplay descriptions of a specific class of options.  <class> is one or more of optimizers, target, warnings, undocumented, params.\n \n -language\n@@ -978,42 +978,42 @@ Common Joined RejectNegative UInteger Var(flag_abi_version) Init(0)\n The version of the C++ ABI in use.\n \n faggressive-loop-optimizations\n-Common Report Var(flag_aggressive_loop_optimizations) Optimization Init(1)\n+Common Var(flag_aggressive_loop_optimizations) Optimization Init(1)\n Aggressively optimize loops using language constraints.\n \n falign-functions\n-Common Report Var(flag_align_functions) Optimization\n+Common Var(flag_align_functions) Optimization\n Align the start of functions.\n \n falign-functions=\n Common RejectNegative Joined Var(str_align_functions) Optimization\n \n flimit-function-alignment\n-Common Report Var(flag_limit_function_alignment) Optimization Init(0)\n+Common Var(flag_limit_function_alignment) Optimization Init(0)\n \n falign-jumps\n-Common Report Var(flag_align_jumps) Optimization\n+Common Var(flag_align_jumps) Optimization\n Align labels which are only reached by jumping.\n \n falign-jumps=\n Common RejectNegative Joined Var(str_align_jumps) Optimization\n \n falign-labels\n-Common Report Var(flag_align_labels) Optimization\n+Common Var(flag_align_labels) Optimization\n Align all labels.\n \n falign-labels=\n Common RejectNegative Joined Var(str_align_labels) Optimization\n \n falign-loops\n-Common Report Var(flag_align_loops) Optimization\n+Common Var(flag_align_loops) Optimization\n Align the start of loops.\n \n falign-loops=\n Common RejectNegative Joined Var(str_align_loops) Optimization\n \n fallow-store-data-races\n-Common Report Var(flag_store_data_races) Optimization\n+Common Var(flag_store_data_races) Optimization\n Allow the compiler to introduce new data races on stores.\n \n fanalyzer\n@@ -1037,11 +1037,11 @@ Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n fsanitize=\n-Common Driver Report Joined\n+Common Driver Joined\n Select what to sanitize.\n \n fsanitize-coverage=\n-Common Report Joined\n+Common Joined\n Select type of coverage sanitization.\n \n fasan-shadow-offset=\n@@ -1054,30 +1054,30 @@ Common Joined RejectNegative Var(common_deferred_options) Defer\n in user-defined sections.\n \n fsanitize-recover=\n-Common Report Joined\n+Common Joined\n After diagnosing undefined behavior attempt to continue execution.\n \n fsanitize-recover\n-Common Report\n+Common\n This switch is deprecated; use -fsanitize-recover= instead.\n \n fsanitize-address-use-after-scope\n-Common Driver Report Var(flag_sanitize_address_use_after_scope) Init(0)\n+Common Driver Var(flag_sanitize_address_use_after_scope) Init(0)\n \n fsanitize-undefined-trap-on-error\n-Common Driver Report Var(flag_sanitize_undefined_trap_on_error) Init(0)\n+Common Driver Var(flag_sanitize_undefined_trap_on_error) Init(0)\n Use trap instead of a library function for undefined behavior sanitization.\n \n fasynchronous-unwind-tables\n-Common Report Var(flag_asynchronous_unwind_tables) Optimization\n+Common Var(flag_asynchronous_unwind_tables) Optimization\n Generate unwind tables that are exact at each instruction boundary.\n \n fauto-inc-dec\n-Common Report Var(flag_auto_inc_dec) Init(1) Optimization\n+Common Var(flag_auto_inc_dec) Init(1) Optimization\n Generate auto-inc/dec instructions.\n \n fauto-profile\n-Common Report Var(flag_auto_profile)\n+Common Var(flag_auto_profile)\n Use sample profile information for call graph node weights. The default\n profile file is fbdata.afdo in 'pwd'.\n \n@@ -1091,15 +1091,15 @@ file is specified in the argument.\n ; For Java: defaults to on.\n ; For Fortran: defaults to off.\n fbounds-check\n-Common Report Var(flag_bounds_check)\n+Common Var(flag_bounds_check)\n Generate code to check bounds before indexing arrays.\n \n fbranch-count-reg\n-Common Report Var(flag_branch_on_count_reg) Optimization\n+Common Var(flag_branch_on_count_reg) Optimization\n Replace add, compare, branch with branch on count register.\n \n fbranch-probabilities\n-Common Report Var(flag_branch_probabilities) Optimization\n+Common Var(flag_branch_probabilities) Optimization\n Use profiling information for branch probabilities.\n \n fbranch-target-load-optimize\n@@ -1115,11 +1115,11 @@ Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fcallgraph-info\n-Common Report RejectNegative Var(flag_callgraph_info) Init(NO_CALLGRAPH_INFO);\n+Common RejectNegative Var(flag_callgraph_info) Init(NO_CALLGRAPH_INFO);\n Output callgraph information on a per-file basis.\n \n fcallgraph-info=\n-Common Report RejectNegative Joined\n+Common RejectNegative Joined\n Output callgraph information on a per-file basis with decorations.\n \n fcall-saved-\n@@ -1134,7 +1134,7 @@ Common Joined RejectNegative Var(common_deferred_options) Defer\n ; be saved across function calls, if that produces overall better code.\n ; Optional now, so people can test it.\n fcaller-saves\n-Common Report Var(flag_caller_saves) Optimization\n+Common Var(flag_caller_saves) Optimization\n Save registers around function calls.\n \n fcheck-data-deps\n@@ -1154,15 +1154,15 @@ Common Joined RejectNegative UInteger Var(flag_checking)\n Perform internal consistency checkings.\n \n fcode-hoisting\n-Common Report Var(flag_code_hoisting) Optimization\n+Common Var(flag_code_hoisting) Optimization\n Enable code hoisting.\n \n fcombine-stack-adjustments\n-Common Report Var(flag_combine_stack_adjustments) Optimization\n+Common Var(flag_combine_stack_adjustments) Optimization\n Looks for opportunities to reduce stack adjustments and stack references.\n \n fcommon\n-Common Report Var(flag_no_common,0) Init(1)\n+Common Var(flag_no_common,0) Init(1)\n Put uninitialized globals in the common section.\n \n fcompare-debug\n@@ -1178,43 +1178,43 @@ Common Driver RejectNegative Var(flag_compare_debug)\n Run only the second compilation of -fcompare-debug.\n \n fcompare-elim\n-Common Report Var(flag_compare_elim_after_reload) Optimization\n+Common Var(flag_compare_elim_after_reload) Optimization\n Perform comparison elimination after register allocation has finished.\n \n fconserve-stack\n Common Var(flag_conserve_stack) Optimization\n Do not perform optimizations increasing noticeably stack usage.\n \n fcprop-registers\n-Common Report Var(flag_cprop_registers) Optimization\n+Common Var(flag_cprop_registers) Optimization\n Perform a register copy-propagation optimization pass.\n \n fcrossjumping\n-Common Report Var(flag_crossjumping) Optimization\n+Common Var(flag_crossjumping) Optimization\n Perform cross-jumping optimization.\n \n fcse-follow-jumps\n-Common Report Var(flag_cse_follow_jumps) Optimization\n+Common Var(flag_cse_follow_jumps) Optimization\n When running CSE, follow jumps to their targets.\n \n fcse-skip-blocks\n Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fcx-limited-range\n-Common Report Var(flag_cx_limited_range) Optimization SetByCombined\n+Common Var(flag_cx_limited_range) Optimization SetByCombined\n Omit range reduction step when performing complex division.\n \n fcx-fortran-rules\n-Common Report Var(flag_cx_fortran_rules) Optimization\n+Common Var(flag_cx_fortran_rules) Optimization\n Complex multiplication and division follow Fortran rules.\n \n fdata-sections\n-Common Report Var(flag_data_sections)\n+Common Var(flag_data_sections)\n Place data items into their own section.\n \n fdbg-cnt-list\n-Common Report Var(flag_dbg_cnt_list)\n+Common Var(flag_dbg_cnt_list)\n List all available debugging counters with their limits and counts.\n \n fdbg-cnt=\n@@ -1230,37 +1230,37 @@ Common Joined RejectNegative Var(common_deferred_options) Defer\n -ffile-prefix-map=<old>=<new>\tMap one directory name to another in compilation result.\n \n fdebug-types-section\n-Common Report Var(flag_debug_types_section) Init(0)\n+Common Var(flag_debug_types_section) Init(0)\n Output .debug_types section when using DWARF v4 debuginfo.\n \n ; Nonzero for -fdefer-pop: don't pop args after each function call\n ; instead save them up to pop many calls' args with one insns.\n fdefer-pop\n-Common Report Var(flag_defer_pop) Optimization\n+Common Var(flag_defer_pop) Optimization\n Defer popping functions args from stack until later.\n \n fdelayed-branch\n-Common Report Var(flag_delayed_branch) Optimization\n+Common Var(flag_delayed_branch) Optimization\n Attempt to fill delay slots of branch instructions.\n \n fdelete-dead-exceptions\n-Common Report Var(flag_delete_dead_exceptions) Init(0) Optimization\n+Common Var(flag_delete_dead_exceptions) Init(0) Optimization\n Delete dead instructions that may throw exceptions.\n \n fdelete-null-pointer-checks\n-Common Report Var(flag_delete_null_pointer_checks) Init(-1) Optimization\n+Common Var(flag_delete_null_pointer_checks) Init(-1) Optimization\n Delete useless null pointer checks.\n \n fdevirtualize-at-ltrans\n-Common Report Var(flag_ltrans_devirtualize)\n+Common Var(flag_ltrans_devirtualize)\n Stream extra data to support more aggressive devirtualization in LTO local transformation mode.\n \n fdevirtualize-speculatively\n-Common Report Var(flag_devirtualize_speculatively) Optimization\n+Common Var(flag_devirtualize_speculatively) Optimization\n Perform speculative devirtualization.\n \n fdevirtualize\n-Common Report Var(flag_devirtualize) Optimization\n+Common Var(flag_devirtualize) Optimization\n Try to convert virtual calls to direct ones.\n \n fdiagnostics-show-location=\n@@ -1442,7 +1442,7 @@ Common RejectNegative Joined Var(flag_dump_go_spec)\n -fdump-go-spec=filename\tWrite all declarations to file as Go code.\n \n fdump-noaddr\n-Common Report Var(flag_dump_noaddr)\n+Common Var(flag_dump_noaddr)\n Suppress output of addresses in debugging dumps.\n \n freport-bug\n@@ -1459,47 +1459,47 @@ Common Var(flag_dump_passes) Init(0)\n Dump optimization passes.\n \n fdump-unnumbered\n-Common Report Var(flag_dump_unnumbered)\n+Common Var(flag_dump_unnumbered)\n Suppress output of instruction numbers, line number notes and addresses in debugging dumps.\n \n fdump-unnumbered-links\n-Common Report Var(flag_dump_unnumbered_links)\n+Common Var(flag_dump_unnumbered_links)\n Suppress output of previous and next insn numbers in debugging dumps.\n \n fdwarf2-cfi-asm\n-Common Report Var(flag_dwarf2_cfi_asm) Init(HAVE_GAS_CFI_DIRECTIVE)\n+Common Var(flag_dwarf2_cfi_asm) Init(HAVE_GAS_CFI_DIRECTIVE)\n Enable CFI tables via GAS assembler directives.\n \n fearly-inlining\n-Common Report Var(flag_early_inlining) Init(1) Optimization\n+Common Var(flag_early_inlining) Init(1) Optimization\n Perform early inlining.\n \n feliminate-dwarf2-dups\n Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fipa-sra\n-Common Report Var(flag_ipa_sra) Init(0) Optimization\n+Common Var(flag_ipa_sra) Init(0) Optimization\n Perform interprocedural reduction of aggregates.\n \n feliminate-unused-debug-symbols\n-Common Report Var(flag_debug_only_used_symbols) Init(1)\n+Common Var(flag_debug_only_used_symbols) Init(1)\n Perform unused symbol elimination in debug info.\n \n feliminate-unused-debug-types\n-Common Report Var(flag_eliminate_unused_debug_types) Init(1)\n+Common Var(flag_eliminate_unused_debug_types) Init(1)\n Perform unused type elimination in debug info.\n \n femit-class-debug-always\n-Common Report Var(flag_emit_class_debug_always) Init(0)\n+Common Var(flag_emit_class_debug_always) Init(0)\n Do not suppress C++ class debug information.\n \n fexceptions\n-Common Report Var(flag_exceptions) Optimization\n+Common Var(flag_exceptions) Optimization\n Enable exception handling.\n \n fexpensive-optimizations\n-Common Report Var(flag_expensive_optimizations) Optimization\n+Common Var(flag_expensive_optimizations) Optimization\n Perform a number of minor, expensive optimizations.\n \n fexcess-precision=\n@@ -1538,27 +1538,27 @@ Common Var(flag_fat_lto_objects)\n Output lto objects containing both the intermediate language and binary output.\n \n ffinite-math-only\n-Common Report Var(flag_finite_math_only) Optimization SetByCombined\n+Common Var(flag_finite_math_only) Optimization SetByCombined\n Assume no NaNs or infinities are generated.\n \n ffinite-loops\n-Common Report Var(flag_finite_loops) Optimization Init(0)\n+Common Var(flag_finite_loops) Optimization Init(0)\n Assume that loops with an exit will terminate and not loop indefinitely.\n \n ffixed-\n Common Joined RejectNegative Var(common_deferred_options) Defer\n -ffixed-<register>\tMark <register> as being unavailable to the compiler.\n \n ffloat-store\n-Common Report Var(flag_float_store) Optimization\n+Common Var(flag_float_store) Optimization\n Don't allocate floats and doubles in extended-precision registers.\n \n fforce-addr\n Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fforward-propagate\n-Common Report Var(flag_forward_propagate) Optimization\n+Common Var(flag_forward_propagate) Optimization\n Perform a forward propagation pass on RTL.\n \n ffp-contract=\n@@ -1579,39 +1579,39 @@ EnumValue\n Enum(fp_contract_mode) String(fast) Value(FP_CONTRACT_FAST)\n \n ffp-int-builtin-inexact\n-Common Report Var(flag_fp_int_builtin_inexact) Init(1) Optimization\n+Common Var(flag_fp_int_builtin_inexact) Init(1) Optimization\n Allow built-in functions ceil, floor, round, trunc to raise \\\"inexact\\\" exceptions.\n \n ; Nonzero means don't put addresses of constant functions in registers.\n ; Used for compiling the Unix kernel, where strange substitutions are\n ; done on the assembly output.\n ffunction-cse\n-Common Report Var(flag_no_function_cse,0) Optimization\n+Common Var(flag_no_function_cse,0) Optimization\n Allow function addresses to be held in registers.\n \n ffunction-sections\n-Common Report Var(flag_function_sections)\n+Common Var(flag_function_sections)\n Place each function into its own section.\n \n fgcse\n-Common Report Var(flag_gcse) Optimization\n+Common Var(flag_gcse) Optimization\n Perform global common subexpression elimination.\n \n fgcse-lm\n-Common Report Var(flag_gcse_lm) Init(1) Optimization\n+Common Var(flag_gcse_lm) Init(1) Optimization\n Perform enhanced load motion during global common subexpression elimination.\n \n fgcse-sm\n-Common Report Var(flag_gcse_sm) Init(0) Optimization\n+Common Var(flag_gcse_sm) Init(0) Optimization\n Perform store motion after global common subexpression elimination.\n \n fgcse-las\n-Common Report Var(flag_gcse_las) Init(0) Optimization\n+Common Var(flag_gcse_las) Init(0) Optimization\n Perform redundant load after store elimination in global common subexpression\n elimination.\n \n fgcse-after-reload\n-Common Report Var(flag_gcse_after_reload) Optimization\n+Common Var(flag_gcse_after_reload) Optimization\n Perform global common subexpression elimination after register allocation has\n finished.\n \n@@ -1628,94 +1628,94 @@ EnumValue\n Enum(dwarf_gnat_encodings) String(minimal) Value(DWARF_GNAT_ENCODINGS_MINIMAL)\n \n fgnat-encodings=\n-Common Enum(dwarf_gnat_encodings) Joined RejectNegative Report Undocumented Var(gnat_encodings)\n+Common Enum(dwarf_gnat_encodings) Joined RejectNegative Undocumented Var(gnat_encodings)\n -fgnat-encodings=[all|gdb|minimal]\tSelect the balance between GNAT encodings and standard DWARF emitted in the debug information.\n \n ; This option is not documented yet as its semantics will change.\n fgraphite\n-Common Report Var(flag_graphite) Optimization\n+Common Var(flag_graphite) Optimization\n Enable in and out of Graphite representation.\n \n fgraphite-identity\n-Common Report Var(flag_graphite_identity) Optimization\n+Common Var(flag_graphite_identity) Optimization\n Enable Graphite Identity transformation.\n \n fhoist-adjacent-loads\n-Common Report Var(flag_hoist_adjacent_loads) Optimization\n+Common Var(flag_hoist_adjacent_loads) Optimization\n Enable hoisting adjacent loads to encourage generating conditional move\n instructions.\n \n fkeep-gc-roots-live\n-Common Undocumented Report Var(flag_keep_gc_roots_live) Optimization\n+Common Undocumented Var(flag_keep_gc_roots_live) Optimization\n ; Always keep a pointer to a live memory block\n \n flarge-source-files\n-Common Report Var(flag_large_source_files) Init(0)\n+Common Var(flag_large_source_files) Init(0)\n Improve GCC's ability to track column numbers in large source files,\n at the expense of slower compilation.\n \n floop-parallelize-all\n-Common Report Var(flag_loop_parallelize_all) Optimization\n+Common Var(flag_loop_parallelize_all) Optimization\n Mark all loops as parallel.\n \n floop-strip-mine\n Common Alias(floop-nest-optimize)\n Enable loop nest transforms.  Same as -floop-nest-optimize.\n \n floop-interchange\n-Common Report Var(flag_loop_interchange) Optimization\n+Common Var(flag_loop_interchange) Optimization\n Enable loop interchange on trees.\n \n floop-block\n Common Alias(floop-nest-optimize)\n Enable loop nest transforms.  Same as -floop-nest-optimize.\n \n floop-unroll-and-jam\n-Common Report Var(flag_unroll_jam) Optimization\n+Common Var(flag_unroll_jam) Optimization\n Perform unroll-and-jam on loops.\n \n fgnu-tm\n-Common Report Var(flag_tm)\n+Common Var(flag_tm)\n Enable support for GNU transactional memory.\n \n fgnu-unique\n-Common Report Var(flag_gnu_unique) Init(1)\n+Common Var(flag_gnu_unique) Init(1)\n Use STB_GNU_UNIQUE if supported by the assembler.\n \n floop-flatten\n Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n floop-nest-optimize\n-Common Report Var(flag_loop_nest_optimize) Optimization\n+Common Var(flag_loop_nest_optimize) Optimization\n Enable the loop nest optimizer.\n \n fstrict-volatile-bitfields\n-Common Report Var(flag_strict_volatile_bitfields) Init(-1) Optimization\n+Common Var(flag_strict_volatile_bitfields) Init(-1) Optimization\n Force bitfield accesses to match their type width.\n \n fstore-merging\n-Common Report Var(flag_store_merging) Optimization\n+Common Var(flag_store_merging) Optimization\n Merge adjacent stores.\n \n fguess-branch-probability\n-Common Report Var(flag_guess_branch_prob) Optimization\n+Common Var(flag_guess_branch_prob) Optimization\n Enable guessing of branch probabilities.\n \n ; Nonzero means ignore `#ident' directives.  0 means handle them.\n ; Generate position-independent code for executables if possible\n ; On SVR4 targets, it also controls whether or not to emit a\n ; string identifying the compiler.\n fident\n-Common Report Var(flag_no_ident,0)\n+Common Var(flag_no_ident,0)\n Process #ident directives.\n \n fif-conversion\n-Common Report Var(flag_if_conversion) Optimization\n+Common Var(flag_if_conversion) Optimization\n Perform conversion of conditional jumps to branchless equivalents.\n \n fif-conversion2\n-Common Report Var(flag_if_conversion2) Optimization\n+Common Var(flag_if_conversion2) Optimization\n Perform conversion of conditional jumps to conditional execution.\n \n fstack-reuse=\n@@ -1735,7 +1735,7 @@ EnumValue\n Enum(stack_reuse_level) String(none) Value(SR_NONE)\n \n ftree-loop-if-convert\n-Common Report Var(flag_tree_loop_if_convert) Init(-1) Optimization\n+Common Var(flag_tree_loop_if_convert) Init(-1) Optimization\n Convert conditional jumps in innermost loops to branchless equivalents.\n \n ftree-loop-if-convert-stores\n@@ -1747,29 +1747,29 @@ Does nothing. Preserved for backward compatibility.\n ; and it may be extended to other effects\n ; needed for crtstuff.c on other systems.\n finhibit-size-directive\n-Common Report Var(flag_inhibit_size_directive)\n+Common Var(flag_inhibit_size_directive)\n Do not generate .size directives.\n \n findirect-inlining\n-Common Report Var(flag_indirect_inlining) Optimization\n+Common Var(flag_indirect_inlining) Optimization\n Perform indirect inlining.\n \n ; General flag to enable inlining.  Specifying -fno-inline will disable\n ; all inlining apart from always-inline functions.\n finline\n-Common Report Var(flag_no_inline,0) Init(0) Optimization\n+Common Var(flag_no_inline,0) Init(0) Optimization\n Enable inlining of function declared \\\"inline\\\", disabling disables all inlining.\n \n finline-small-functions\n-Common Report Var(flag_inline_small_functions) Optimization\n+Common Var(flag_inline_small_functions) Optimization\n Integrate functions into their callers when code size is known not to grow.\n \n finline-functions\n-Common Report Var(flag_inline_functions) Optimization\n+Common Var(flag_inline_functions) Optimization\n Integrate functions not declared \\\"inline\\\" into their callers when profitable.\n \n finline-functions-called-once\n-Common Report Var(flag_inline_functions_called_once) Optimization\n+Common Var(flag_inline_functions_called_once) Optimization\n Integrate functions only required by their single caller.\n \n finline-limit-\n@@ -1780,14 +1780,14 @@ Common RejectNegative Joined UInteger\n -finline-limit=<number>\tLimit the size of inlined functions to <number>.\n \n finline-atomics\n-Common Report Var(flag_inline_atomics) Init(1) Optimization\n+Common Var(flag_inline_atomics) Init(1) Optimization\n Inline __atomic operations when a lock free instruction sequence is available.\n \n fcf-protection\n Common RejectNegative Alias(fcf-protection=,full)\n \n fcf-protection=\n-Common Report Joined RejectNegative Enum(cf_protection_level) Var(flag_cf_protection) Init(CF_NONE)\n+Common Joined RejectNegative Enum(cf_protection_level) Var(flag_cf_protection) Init(CF_NONE)\n -fcf-protection=[full|branch|return|none|check]\tInstrument functions with checks to verify jump/call/return control-flow transfer\n instructions have valid targets.\n \n@@ -1810,7 +1810,7 @@ EnumValue\n Enum(cf_protection_level) String(none) Value(CF_NONE)\n \n finstrument-functions\n-Common Report Var(flag_instrument_function_entry_exit)\n+Common Var(flag_instrument_function_entry_exit)\n Instrument function entry and exit with profiling calls.\n \n finstrument-functions-exclude-function-list=\n@@ -1822,59 +1822,59 @@ Common RejectNegative Joined\n -finstrument-functions-exclude-file-list=filename,...\tDo not instrument functions listed in files.\n \n fipa-cp\n-Common Report Var(flag_ipa_cp) Optimization\n+Common Var(flag_ipa_cp) Optimization\n Perform interprocedural constant propagation.\n \n fipa-cp-clone\n-Common Report Var(flag_ipa_cp_clone) Optimization\n+Common Var(flag_ipa_cp_clone) Optimization\n Perform cloning to make Interprocedural constant propagation stronger.\n \n fipa-cp-alignment\n Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fipa-bit-cp\n-Common Report Var(flag_ipa_bit_cp) Optimization\n+Common Var(flag_ipa_bit_cp) Optimization\n Perform interprocedural bitwise constant propagation.\n \n fipa-modref\n-Common Report Var(flag_ipa_modref) Optimization\n+Common Var(flag_ipa_modref) Optimization\n Perform interprocedural modref analysis.\n \n fipa-profile\n-Common Report Var(flag_ipa_profile) Init(0) Optimization\n+Common Var(flag_ipa_profile) Init(0) Optimization\n Perform interprocedural profile propagation.\n \n fipa-pta\n-Common Report Var(flag_ipa_pta) Init(0) Optimization\n+Common Var(flag_ipa_pta) Init(0) Optimization\n Perform interprocedural points-to analysis.\n \n fipa-pure-const\n-Common Report Var(flag_ipa_pure_const) Init(0) Optimization\n+Common Var(flag_ipa_pure_const) Init(0) Optimization\n Discover pure and const functions.\n \n fipa-icf\n-Common Report Var(flag_ipa_icf) Optimization\n+Common Var(flag_ipa_icf) Optimization\n Perform Identical Code Folding for functions and read-only variables.\n \n fipa-icf-functions\n-Common Report Var(flag_ipa_icf_functions) Optimization\n+Common Var(flag_ipa_icf_functions) Optimization\n Perform Identical Code Folding for functions.\n \n fipa-icf-variables\n-Common Report Var(flag_ipa_icf_variables) Optimization\n+Common Var(flag_ipa_icf_variables) Optimization\n Perform Identical Code Folding for variables.\n \n fipa-reference\n-Common Report Var(flag_ipa_reference) Init(0) Optimization\n+Common Var(flag_ipa_reference) Init(0) Optimization\n Discover read-only and non addressable static variables.\n \n fipa-reference-addressable\n-Common Report Var(flag_ipa_reference_addressable) Init(0) Optimization\n+Common Var(flag_ipa_reference_addressable) Init(0) Optimization\n Discover read-only, write-only and non-addressable static variables.\n \n fipa-stack-alignment\n-Common Report Var(flag_ipa_stack_alignment) Init(1) Optimization\n+Common Var(flag_ipa_stack_alignment) Init(1) Optimization\n Reduce stack alignment on call sites if possible.\n \n fipa-matrix-reorg\n@@ -1886,7 +1886,7 @@ Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n fipa-vrp\n-Common Report Var(flag_ipa_vrp) Optimization\n+Common Var(flag_ipa_vrp) Optimization\n Perform IPA Value Range Propagation.\n \n fira-algorithm=\n@@ -1919,29 +1919,29 @@ EnumValue\n Enum(ira_region) String(mixed) Value(IRA_REGION_MIXED)\n \n fira-hoist-pressure\n-Common Report Var(flag_ira_hoist_pressure) Init(1) Optimization\n+Common Var(flag_ira_hoist_pressure) Init(1) Optimization\n Use IRA based register pressure calculation\n in RTL hoist optimizations.\n \n fira-loop-pressure\n-Common Report Var(flag_ira_loop_pressure) Optimization\n+Common Var(flag_ira_loop_pressure) Optimization\n Use IRA based register pressure calculation\n in RTL loop optimizations.\n \n fira-share-save-slots\n-Common Report Var(flag_ira_share_save_slots) Init(1) Optimization\n+Common Var(flag_ira_share_save_slots) Init(1) Optimization\n Share slots for saving different hard registers.\n \n fira-share-spill-slots\n-Common Report Var(flag_ira_share_spill_slots) Init(1) Optimization\n+Common Var(flag_ira_share_spill_slots) Init(1) Optimization\n Share stack slots for spilled pseudo-registers.\n \n fira-verbose=\n Common RejectNegative Joined UInteger Var(flag_ira_verbose) Init(5)\n -fira-verbose=<number>\tControl IRA's level of diagnostic messages.\n \n fivopts\n-Common Report Var(flag_ivopts) Init(1) Optimization\n+Common Var(flag_ivopts) Init(1) Optimization\n Optimize induction variables on trees.\n \n fjump-tables\n@@ -1953,27 +1953,27 @@ Common Var(flag_bit_tests) Init(1) Optimization\n Use bit tests for sufficiently large switch statements.\n \n fkeep-inline-functions\n-Common Report Var(flag_keep_inline_functions)\n+Common Var(flag_keep_inline_functions)\n Generate code for functions even if they are fully inlined.\n \n fkeep-static-functions\n-Common Report Var(flag_keep_static_functions)\n+Common Var(flag_keep_static_functions)\n Generate code for static functions even if they are never called.\n \n fkeep-static-consts\n-Common Report Var(flag_keep_static_consts) Init(1)\n+Common Var(flag_keep_static_consts) Init(1)\n Emit static const variables even if they are not used.\n \n fleading-underscore\n-Common Report Var(flag_leading_underscore) Init(-1)\n+Common Var(flag_leading_underscore) Init(-1)\n Give external symbols a leading underscore.\n \n floop-optimize\n Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n flra-remat\n-Common Report Var(flag_lra_remat) Optimization\n+Common Var(flag_lra_remat) Optimization\n Do CFG-sensitive rematerialization in LRA.\n \n flto\n@@ -2016,58 +2016,58 @@ Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n flto-report\n-Common Report Var(flag_lto_report) Init(0)\n+Common Var(flag_lto_report) Init(0)\n Report various link-time optimization statistics.\n \n flto-report-wpa\n-Common Report Var(flag_lto_report_wpa) Init(0)\n+Common Var(flag_lto_report_wpa) Init(0)\n Report various link-time optimization statistics for WPA only.\n \n fmath-errno\n-Common Report Var(flag_errno_math) Init(1) Optimization SetByCombined\n+Common Var(flag_errno_math) Init(1) Optimization SetByCombined\n Set errno after built-in math functions.\n \n fmax-errors=\n Common Joined RejectNegative UInteger Var(flag_max_errors)\n -fmax-errors=<number>\tMaximum number of errors to report.\n \n fmem-report\n-Common Report Var(mem_report)\n+Common Var(mem_report)\n Report on permanent memory allocation.\n \n fmem-report-wpa\n-Common Report Var(mem_report_wpa)\n+Common Var(mem_report_wpa)\n Report on permanent memory allocation in WPA only.\n \n ; This will attempt to merge constant section constants, if 1 only\n ; string constants and constants from constant pool, if 2 also constant\n ; variables.\n fmerge-all-constants\n-Common Report Var(flag_merge_constants,2) Init(1)\n+Common Var(flag_merge_constants,2) Init(1)\n Attempt to merge identical constants and constant variables.\n \n fmerge-constants\n-Common Report Var(flag_merge_constants,1)\n+Common Var(flag_merge_constants,1)\n Attempt to merge identical constants across compilation units.\n \n fmerge-debug-strings\n-Common Report Var(flag_merge_debug_strings) Init(1)\n+Common Var(flag_merge_debug_strings) Init(1)\n Attempt to merge identical debug strings across compilation units.\n \n fmessage-length=\n Common RejectNegative Joined UInteger\n -fmessage-length=<number>\tLimit diagnostics to <number> characters per line.  0 suppresses line-wrapping.\n \n fmodulo-sched\n-Common Report Var(flag_modulo_sched) Optimization\n+Common Var(flag_modulo_sched) Optimization\n Perform SMS based modulo scheduling before the first scheduling pass.\n \n fmodulo-sched-allow-regmoves\n-Common Report Var(flag_modulo_sched_allow_regmoves) Optimization\n+Common Var(flag_modulo_sched_allow_regmoves) Optimization\n Perform SMS based modulo scheduling with register moves allowed.\n \n fmove-loop-invariants\n-Common Report Var(flag_move_loop_invariants) Optimization\n+Common Var(flag_move_loop_invariants) Optimization\n Move loop invariant computations out of loops.\n \n fdce\n@@ -2079,11 +2079,11 @@ Common Var(flag_dse) Init(0) Optimization\n Use the RTL dead store elimination pass.\n \n freschedule-modulo-scheduled-loops\n-Common Report Var(flag_resched_modulo_sched) Optimization\n+Common Var(flag_resched_modulo_sched) Optimization\n Enable/Disable the traditional scheduling in loops that already passed modulo scheduling.\n \n fnon-call-exceptions\n-Common Report Var(flag_non_call_exceptions) Optimization\n+Common Var(flag_non_call_exceptions) Optimization\n Support synchronous non-call exceptions.\n \n foffload=\n@@ -2104,83 +2104,83 @@ EnumValue\n Enum(offload_abi) String(lp64) Value(OFFLOAD_ABI_LP64)\n \n fomit-frame-pointer\n-Common Report Var(flag_omit_frame_pointer) Optimization\n+Common Var(flag_omit_frame_pointer) Optimization\n When possible do not generate stack frames.\n \n fopt-info\n-Common Report Var(flag_opt_info) Optimization\n+Common Var(flag_opt_info) Optimization\n Enable all optimization info dumps on stderr.\n \n fopt-info-\n Common Joined RejectNegative Var(common_deferred_options) Defer\n -fopt-info[-<type>=filename]\tDump compiler optimization details.\n \n fsave-optimization-record\n-Common Report Var(flag_save_optimization_record) Optimization\n+Common Var(flag_save_optimization_record) Optimization\n Write a SRCFILE.opt-record.json file detailing what optimizations were performed.\n \n foptimize-register-move\n Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n foptimize-sibling-calls\n-Common Report Var(flag_optimize_sibling_calls) Optimization\n+Common Var(flag_optimize_sibling_calls) Optimization\n Optimize sibling and tail recursive calls.\n \n fpartial-inlining\n-Common Report Var(flag_partial_inlining) Optimization\n+Common Var(flag_partial_inlining) Optimization\n Perform partial inlining.\n \n fpre-ipa-mem-report\n-Common Report Var(pre_ipa_mem_report)\n+Common Var(pre_ipa_mem_report)\n Report on memory allocation before interprocedural optimization.\n \n fpost-ipa-mem-report\n-Common Report Var(post_ipa_mem_report)\n+Common Var(post_ipa_mem_report)\n Report on memory allocation before interprocedural optimization.\n \n fpack-struct\n-Common Report Var(flag_pack_struct) Optimization\n+Common Var(flag_pack_struct) Optimization\n Pack structure members together without holes.\n \n fpack-struct=\n Common RejectNegative Joined UInteger Optimization\n -fpack-struct=<number>\tSet initial maximum structure member alignment.\n \n fpcc-struct-return\n-Common Report Var(flag_pcc_struct_return,1) Init(DEFAULT_PCC_STRUCT_RETURN)\n+Common Var(flag_pcc_struct_return,1) Init(DEFAULT_PCC_STRUCT_RETURN)\n Return small aggregates in memory, not registers.\n \n fpeel-loops\n-Common Report Var(flag_peel_loops) Optimization\n+Common Var(flag_peel_loops) Optimization\n Perform loop peeling.\n \n fpeephole\n-Common Report Var(flag_no_peephole,0) Optimization\n+Common Var(flag_no_peephole,0) Optimization\n Enable machine specific peephole optimizations.\n \n fpeephole2\n-Common Report Var(flag_peephole2) Optimization\n+Common Var(flag_peephole2) Optimization\n Enable an RTL peephole pass before sched2.\n \n fPIC\n-Common Report Var(flag_pic,2) Negative(fPIE) Init(-1)\n+Common Var(flag_pic,2) Negative(fPIE) Init(-1)\n Generate position-independent code if possible (large mode).\n \n fPIE\n-Common Report Var(flag_pie,2) Negative(fpic) Init(-1)\n+Common Var(flag_pie,2) Negative(fpic) Init(-1)\n Generate position-independent code for executables if possible (large mode).\n \n fpic\n-Common Report Var(flag_pic,1) Negative(fpie) Init(-1)\n+Common Var(flag_pic,1) Negative(fpie) Init(-1)\n Generate position-independent code if possible (small mode).\n \n fpie\n-Common Report Var(flag_pie,1) Negative(fPIC) Init(-1)\n+Common Var(flag_pie,1) Negative(fPIC) Init(-1)\n Generate position-independent code for executables if possible (small mode).\n \n fplt\n-Common Report Var(flag_plt) Init(1) Optimization\n+Common Var(flag_plt) Init(1) Optimization\n Use PLT for PIC calls (-fno-plt: load the address from GOT at call site).\n \n fplugin=\n@@ -2192,23 +2192,23 @@ Common Joined RejectNegative Var(common_deferred_options) Defer\n -fplugin-arg-<name>-<key>[=<value>]\tSpecify argument <key>=<value> for plugin <name>.\n \n fpredictive-commoning\n-Common Report Var(flag_predictive_commoning) Optimization\n+Common Var(flag_predictive_commoning) Optimization\n Run predictive commoning optimization.\n \n fprefetch-loop-arrays\n-Common Report Var(flag_prefetch_loop_arrays) Init(-1) Optimization\n+Common Var(flag_prefetch_loop_arrays) Init(-1) Optimization\n Generate prefetch instructions, if available, for arrays in loops.\n \n fprofile\n-Common Report Var(profile_flag)\n+Common Var(profile_flag)\n Enable basic program profiling code.\n \n fprofile-abs-path\n-Common Report Var(profile_abs_path_flag)\n+Common Var(profile_abs_path_flag)\n Generate absolute source path names for gcov.\n \n fprofile-arcs\n-Common Report Var(profile_arc_flag)\n+Common Var(profile_arc_flag)\n Insert arc-based program profiling code.\n \n fprofile-dir=\n@@ -2221,7 +2221,7 @@ Common Joined RejectNegative Var(profile_note_location)\n Select the name for storing the profile note file.\n \n fprofile-correction\n-Common Report Var(flag_profile_correction)\n+Common Var(flag_profile_correction)\n Enable correction of flow inconsistent profile data input.\n \n fprofile-update=\n@@ -2285,7 +2285,7 @@ Common Joined RejectNegative Var(profile_info_section)\n Register the profile information in the specified section instead of using a constructor/destructor.\n \n fprofile-partial-training\n-Common Report Var(flag_profile_partial_training) Optimization\n+Common Var(flag_profile_partial_training) Optimization\n Do not assume that functions never executed during the train run are cold.\n \n fprofile-use\n@@ -2297,15 +2297,15 @@ Common Joined RejectNegative\n Enable common options for performing profile feedback directed optimizations, and set -fprofile-dir=.\n \n fprofile-values\n-Common Report Var(flag_profile_values)\n+Common Var(flag_profile_values)\n Insert code to profile values of expressions.\n \n fprofile-report\n-Common Report Var(profile_report)\n+Common Var(profile_report)\n Report on consistency of profile.\n \n fprofile-reorder-functions\n-Common Report Var(flag_profile_reorder_functions) Optimization\n+Common Var(flag_profile_reorder_functions) Optimization\n Enable function reordering that improves code placement.\n \n fpatchable-function-entry=\n@@ -2326,19 +2326,19 @@ Common Joined RejectNegative Var(common_deferred_options) Defer\n ; records information in the assembler output file as comments, so\n ; they never reach the object file.\n frecord-gcc-switches\n-Common Report Var(flag_record_gcc_switches)\n+Common Var(flag_record_gcc_switches)\n Record gcc command line switches in the object file.\n \n freg-struct-return\n-Common Report Var(flag_pcc_struct_return,0) Optimization\n+Common Var(flag_pcc_struct_return,0) Optimization\n Return small aggregates in registers.\n \n fregmove\n Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n flifetime-dse\n-Common Report Var(flag_lifetime_dse,2) Init(2) Optimization\n+Common Var(flag_lifetime_dse,2) Init(2) Optimization\n Tell DSE that the storage for a C++ object is dead when the constructor\n starts and when the destructor finishes.\n \n@@ -2349,7 +2349,7 @@ flive-patching\n Common RejectNegative Alias(flive-patching=,inline-clone) Optimization\n \n flive-patching=\n-Common Report Joined RejectNegative Enum(live_patching_level) Var(flag_live_patching) Init(LIVE_PATCHING_NONE) Optimization\n+Common Joined RejectNegative Enum(live_patching_level) Var(flag_live_patching) Init(LIVE_PATCHING_NONE) Optimization\n -flive-patching=[inline-only-static|inline-clone]\tControl IPA\n optimizations to provide a safe compilation for live-patching.  At the same\n time, provides multiple-level control on the enabled IPA optimizations.\n@@ -2364,23 +2364,23 @@ EnumValue\n Enum(live_patching_level) String(inline-clone) Value(LIVE_PATCHING_INLINE_CLONE)\n \n fallocation-dce\n-Common Report Var(flag_allocation_dce) Init(1) Optimization\n+Common Var(flag_allocation_dce) Init(1) Optimization\n Tell DCE to remove unused C++ allocations.\n \n flive-range-shrinkage\n-Common Report Var(flag_live_range_shrinkage) Init(0) Optimization\n+Common Var(flag_live_range_shrinkage) Init(0) Optimization\n Relief of register pressure through live range shrinkage.\n \n frename-registers\n-Common Report Var(flag_rename_registers) Init(2) Optimization\n+Common Var(flag_rename_registers) Init(2) Optimization\n Perform a register renaming optimization pass.\n \n fschedule-fusion\n-Common Report Var(flag_schedule_fusion) Init(2) Optimization\n+Common Var(flag_schedule_fusion) Init(2) Optimization\n Perform a target dependent instruction fusion optimization pass.\n \n freorder-blocks\n-Common Report Var(flag_reorder_blocks) Optimization\n+Common Var(flag_reorder_blocks) Optimization\n Reorder basic blocks to improve code placement.\n \n freorder-blocks-algorithm=\n@@ -2397,100 +2397,100 @@ EnumValue\n Enum(reorder_blocks_algorithm) String(stc) Value(REORDER_BLOCKS_ALGORITHM_STC)\n \n freorder-blocks-and-partition\n-Common Report Var(flag_reorder_blocks_and_partition) Optimization\n+Common Var(flag_reorder_blocks_and_partition) Optimization\n Reorder basic blocks and partition into hot and cold sections.\n \n freorder-functions\n-Common Report Var(flag_reorder_functions) Optimization\n+Common Var(flag_reorder_functions) Optimization\n Reorder functions to improve code placement.\n \n frerun-cse-after-loop\n-Common Report Var(flag_rerun_cse_after_loop) Optimization\n+Common Var(flag_rerun_cse_after_loop) Optimization\n Add a common subexpression elimination pass after loop optimizations.\n \n frerun-loop-opt\n Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n frounding-math\n-Common Report Var(flag_rounding_math) Optimization SetByCombined\n+Common Var(flag_rounding_math) Optimization SetByCombined\n Disable optimizations that assume default FP rounding behavior.\n \n fsched-interblock\n-Common Report Var(flag_schedule_interblock) Init(1) Optimization\n+Common Var(flag_schedule_interblock) Init(1) Optimization\n Enable scheduling across basic blocks.\n \n fsched-pressure\n-Common Report Var(flag_sched_pressure) Init(0) Optimization\n+Common Var(flag_sched_pressure) Init(0) Optimization\n Enable register pressure sensitive insn scheduling.\n \n fsched-spec\n-Common Report Var(flag_schedule_speculative) Init(1) Optimization\n+Common Var(flag_schedule_speculative) Init(1) Optimization\n Allow speculative motion of non-loads.\n \n fsched-spec-load\n-Common Report Var(flag_schedule_speculative_load) Optimization\n+Common Var(flag_schedule_speculative_load) Optimization\n Allow speculative motion of some loads.\n \n fsched-spec-load-dangerous\n-Common Report Var(flag_schedule_speculative_load_dangerous) Optimization\n+Common Var(flag_schedule_speculative_load_dangerous) Optimization\n Allow speculative motion of more loads.\n \n fsched-verbose=\n Common RejectNegative Joined UInteger Var(sched_verbose_param) Init(1)\n -fsched-verbose=<number>\tSet the verbosity level of the scheduler.\n \n fsched2-use-superblocks\n-Common Report Var(flag_sched2_use_superblocks) Optimization\n+Common Var(flag_sched2_use_superblocks) Optimization\n If scheduling post reload, do superblock scheduling.\n \n fsched2-use-traces\n Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fschedule-insns\n-Common Report Var(flag_schedule_insns) Optimization\n+Common Var(flag_schedule_insns) Optimization\n Reschedule instructions before register allocation.\n \n fschedule-insns2\n-Common Report Var(flag_schedule_insns_after_reload) Optimization\n+Common Var(flag_schedule_insns_after_reload) Optimization\n Reschedule instructions after register allocation.\n \n ; This flag should be on when a target implements non-trivial\n ; scheduling hooks, maybe saving some information for its own sake.\n ; On IA64, for example, this is used for correct bundling.\n fselective-scheduling\n-Common Report Var(flag_selective_scheduling) Optimization\n+Common Var(flag_selective_scheduling) Optimization\n Schedule instructions using selective scheduling algorithm.\n \n fselective-scheduling2\n-Common Report Var(flag_selective_scheduling2) Optimization\n+Common Var(flag_selective_scheduling2) Optimization\n Run selective scheduling after reload.\n \n fself-test=\n Common Undocumented Joined Var(flag_self_test)\n Run self-tests, using the given path to locate test files.\n \n fsel-sched-pipelining\n-Common Report Var(flag_sel_sched_pipelining) Init(0) Optimization\n+Common Var(flag_sel_sched_pipelining) Init(0) Optimization\n Perform software pipelining of inner loops during selective scheduling.\n \n fsel-sched-pipelining-outer-loops\n-Common Report Var(flag_sel_sched_pipelining_outer_loops) Init(0) Optimization\n+Common Var(flag_sel_sched_pipelining_outer_loops) Init(0) Optimization\n Perform software pipelining of outer loops during selective scheduling.\n \n fsel-sched-reschedule-pipelined\n-Common Report Var(flag_sel_sched_reschedule_pipelined) Init(0) Optimization\n+Common Var(flag_sel_sched_reschedule_pipelined) Init(0) Optimization\n Reschedule pipelined regions without pipelining.\n \n fsemantic-interposition\n-Common Report Var(flag_semantic_interposition) Init(1)\n+Common Var(flag_semantic_interposition) Init(1)\n Allow interposing function (or variables) by ones with different semantics (or initializer) respectively by dynamic linker.\n \n ; sched_stalled_insns means that insns can be moved prematurely from the queue\n ; of stalled insns into the ready list.\n fsched-stalled-insns\n-Common Report Var(flag_sched_stalled_insns) Optimization UInteger\n+Common Var(flag_sched_stalled_insns) Optimization UInteger\n Allow premature scheduling of queued insns.\n \n fsched-stalled-insns=\n@@ -2502,39 +2502,39 @@ Common RejectNegative Joined UInteger Optimization\n ; premature removal from the queue of stalled insns into the ready list (has\n ; an effect only if the flag 'sched_stalled_insns' is set).\n fsched-stalled-insns-dep\n-Common Report Var(flag_sched_stalled_insns_dep,1) Init(1) Optimization UInteger\n+Common Var(flag_sched_stalled_insns_dep,1) Init(1) Optimization UInteger\n Set dependence distance checking in premature scheduling of queued insns.\n \n fsched-stalled-insns-dep=\n Common RejectNegative Joined UInteger Optimization\n -fsched-stalled-insns-dep=<number>\tSet dependence distance checking in premature scheduling of queued insns.\n \n fsched-group-heuristic\n-Common Report Var(flag_sched_group_heuristic) Init(1) Optimization\n+Common Var(flag_sched_group_heuristic) Init(1) Optimization\n Enable the group heuristic in the scheduler.\n \n fsched-critical-path-heuristic\n-Common Report Var(flag_sched_critical_path_heuristic) Init(1) Optimization\n+Common Var(flag_sched_critical_path_heuristic) Init(1) Optimization\n Enable the critical path heuristic in the scheduler.\n \n fsched-spec-insn-heuristic\n-Common Report Var(flag_sched_spec_insn_heuristic) Init(1) Optimization\n+Common Var(flag_sched_spec_insn_heuristic) Init(1) Optimization\n Enable the speculative instruction heuristic in the scheduler.\n \n fsched-rank-heuristic\n-Common Report Var(flag_sched_rank_heuristic) Init(1) Optimization\n+Common Var(flag_sched_rank_heuristic) Init(1) Optimization\n Enable the rank heuristic in the scheduler.\n \n fsched-last-insn-heuristic\n-Common Report Var(flag_sched_last_insn_heuristic) Init(1) Optimization\n+Common Var(flag_sched_last_insn_heuristic) Init(1) Optimization\n Enable the last instruction heuristic in the scheduler.\n \n fsched-dep-count-heuristic\n-Common Report Var(flag_sched_dep_count_heuristic) Init(1) Optimization\n+Common Var(flag_sched_dep_count_heuristic) Init(1) Optimization\n Enable the dependent count heuristic in the scheduler.\n \n fsection-anchors\n-Common Report Var(flag_section_anchors) Optimization\n+Common Var(flag_section_anchors) Optimization\n Access data in the same section from shared anchor points.\n \n fsee\n@@ -2546,76 +2546,76 @@ Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n free\n-Common Report Var(flag_ree) Init(0) Optimization\n+Common Var(flag_ree) Init(0) Optimization\n Turn on Redundant Extensions Elimination pass.\n \n fshow-column\n-Common Report Var(flag_show_column) Init(1)\n+Common Var(flag_show_column) Init(1)\n Show column numbers in diagnostics, when available.  Default on.\n \n fshrink-wrap\n-Common Report Var(flag_shrink_wrap) Optimization\n+Common Var(flag_shrink_wrap) Optimization\n Emit function prologues only before parts of the function that need it,\n rather than at the top of the function.\n \n fshrink-wrap-separate\n-Common Report Var(flag_shrink_wrap_separate) Init(1) Optimization\n+Common Var(flag_shrink_wrap_separate) Init(1) Optimization\n Shrink-wrap parts of the prologue and epilogue separately.\n \n fsignaling-nans\n-Common Report Var(flag_signaling_nans) Optimization SetByCombined\n+Common Var(flag_signaling_nans) Optimization SetByCombined\n Disable optimizations observable by IEEE signaling NaNs.\n \n fsigned-zeros\n-Common Report Var(flag_signed_zeros) Init(1) Optimization SetByCombined\n+Common Var(flag_signed_zeros) Init(1) Optimization SetByCombined\n Disable floating point optimizations that ignore the IEEE signedness of zero.\n \n fsingle-precision-constant\n-Common Report Var(flag_single_precision_constant) Optimization\n+Common Var(flag_single_precision_constant) Optimization\n Convert floating point constants to single precision constants.\n \n fsplit-ivs-in-unroller\n-Common Report Var(flag_split_ivs_in_unroller) Init(1) Optimization\n+Common Var(flag_split_ivs_in_unroller) Init(1) Optimization\n Split lifetimes of induction variables when loops are unrolled.\n \n fsplit-stack\n-Common Report Var(flag_split_stack) Init(-1)\n+Common Var(flag_split_stack) Init(-1)\n Generate discontiguous stack frames.\n \n fsplit-wide-types\n-Common Report Var(flag_split_wide_types) Optimization\n+Common Var(flag_split_wide_types) Optimization\n Split wide types into independent registers.\n \n fsplit-wide-types-early\n-Common Report Var(flag_split_wide_types_early) Optimization\n+Common Var(flag_split_wide_types_early) Optimization\n Split wide types into independent registers earlier.\n \n fssa-backprop\n-Common Report Var(flag_ssa_backprop) Init(1) Optimization\n+Common Var(flag_ssa_backprop) Init(1) Optimization\n Enable backward propagation of use properties at the SSA level.\n \n fssa-phiopt\n-Common Report Var(flag_ssa_phiopt) Optimization\n+Common Var(flag_ssa_phiopt) Optimization\n Optimize conditional patterns using SSA PHI nodes.\n \n fstdarg-opt\n-Common Report Var(flag_stdarg_opt) Init(1) Optimization\n+Common Var(flag_stdarg_opt) Init(1) Optimization\n Optimize amount of stdarg registers saved to stack at start of function.\n \n fvariable-expansion-in-unroller\n-Common Report Var(flag_variable_expansion_in_unroller) Optimization\n+Common Var(flag_variable_expansion_in_unroller) Optimization\n Apply variable expansion when loops are unrolled.\n \n fstack-check=\n-Common Report RejectNegative Joined Optimization\n+Common RejectNegative Joined Optimization\n -fstack-check=[no|generic|specific]\tInsert stack checking code into the program.\n \n fstack-check\n Common Alias(fstack-check=, specific, no)\n Insert stack checking code into the program.  Same as -fstack-check=specific.\n \n fstack-clash-protection\n-Common Report Var(flag_stack_clash_protection) Optimization\n+Common Var(flag_stack_clash_protection) Optimization\n Insert code to probe each page of stack space as it is allocated to protect\n from stack-clash style attacks.\n \n@@ -2631,19 +2631,19 @@ Common RejectNegative Joined Var(common_deferred_options) Defer\n -fstack-limit-symbol=<name>\tTrap if the stack goes past symbol <name>.\n \n fstack-protector\n-Common Report Var(flag_stack_protect, 1) Init(-1) Optimization\n+Common Var(flag_stack_protect, 1) Init(-1) Optimization\n Use propolice as a stack protection method.\n \n fstack-protector-all\n-Common Report RejectNegative Var(flag_stack_protect, 2) Init(-1) Optimization\n+Common RejectNegative Var(flag_stack_protect, 2) Init(-1) Optimization\n Use a stack protection method for every function.\n \n fstack-protector-strong\n-Common Report RejectNegative Var(flag_stack_protect, 3) Init(-1) Optimization\n+Common RejectNegative Var(flag_stack_protect, 3) Init(-1) Optimization\n Use a smart stack protection method for certain functions.\n \n fstack-protector-explicit\n-Common Report RejectNegative Var(flag_stack_protect, 4) Optimization\n+Common RejectNegative Var(flag_stack_protect, 4) Optimization\n Use stack protection method only for functions with the stack_protect attribute.\n \n fstack-usage\n@@ -2659,35 +2659,35 @@ Does nothing.  Preserved for backward compatibility.\n ; types do not alias expressions of certain other types.  Only used\n ; if alias analysis (in general) is enabled.\n fstrict-aliasing\n-Common Report Var(flag_strict_aliasing) Optimization\n+Common Var(flag_strict_aliasing) Optimization\n Assume strict aliasing rules apply.\n \n fstrict-overflow\n-Common Report\n+Common\n Treat signed overflow as undefined.  Negated as -fwrapv -fwrapv-pointer.\n \n fsync-libcalls\n-Common Report Var(flag_sync_libcalls) Init(1)\n+Common Var(flag_sync_libcalls) Init(1)\n Implement __atomic operations via libcalls to legacy __sync functions.\n \n fsyntax-only\n-Common Report Var(flag_syntax_only)\n+Common Var(flag_syntax_only)\n Check for syntax errors, then stop.\n \n ftest-coverage\n-Common Report Var(flag_test_coverage)\n+Common Var(flag_test_coverage)\n Create data files needed by \\\"gcov\\\".\n \n fthread-jumps\n-Common Report Var(flag_thread_jumps) Optimization\n+Common Var(flag_thread_jumps) Optimization\n Perform jump threading optimizations.\n \n ftime-report\n-Common Report Var(time_report)\n+Common Var(time_report)\n Report the time taken by each compiler pass.\n \n ftime-report-details\n-Common Report Var(time_report_details)\n+Common Var(time_report_details)\n Record times taken by sub-phases separately.\n \n ftls-model=\n@@ -2710,192 +2710,192 @@ EnumValue\n Enum(tls_model) String(local-exec) Value(TLS_MODEL_LOCAL_EXEC)\n \n ftoplevel-reorder\n-Common Report Var(flag_toplevel_reorder) Init(2) Optimization\n+Common Var(flag_toplevel_reorder) Init(2) Optimization\n Reorder top level functions, variables, and asms.\n \n ftracer\n-Common Report Var(flag_tracer) Optimization\n+Common Var(flag_tracer) Optimization\n Perform superblock formation via tail duplication.\n \n ftrampolines\n-Common Report Var(flag_trampolines) Init(0)\n+Common Var(flag_trampolines) Init(0)\n For targets that normally need trampolines for nested functions, always\n generate them instead of using descriptors.\n \n ; Zero means that floating-point math operations cannot generate a\n ; (user-visible) trap.  This is the case, for example, in nonstop\n ; IEEE 754 arithmetic.\n ftrapping-math\n-Common Report Var(flag_trapping_math) Init(1) Optimization SetByCombined\n+Common Var(flag_trapping_math) Init(1) Optimization SetByCombined\n Assume floating-point operations can trap.\n \n ftrapv\n-Common Report Var(flag_trapv) Optimization\n+Common Var(flag_trapv) Optimization\n Trap for signed overflow in addition, subtraction and multiplication.\n \n ftree-ccp\n-Common Report Var(flag_tree_ccp) Optimization\n+Common Var(flag_tree_ccp) Optimization\n Enable SSA-CCP optimization on trees.\n \n ftree-bit-ccp\n-Common Report Var(flag_tree_bit_ccp) Optimization\n+Common Var(flag_tree_bit_ccp) Optimization\n Enable SSA-BIT-CCP optimization on trees.\n \n ftree-store-ccp\n Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n ftree-ch\n-Common Report Var(flag_tree_ch) Optimization\n+Common Var(flag_tree_ch) Optimization\n Enable loop header copying on trees.\n \n ftree-coalesce-inlined-vars\n Common Ignore RejectNegative\n Does nothing.  Preserved for backward compatibility.\n \n ftree-coalesce-vars\n-Common Report Var(flag_tree_coalesce_vars) Optimization\n+Common Var(flag_tree_coalesce_vars) Optimization\n Enable SSA coalescing of user variables.\n \n ftree-copyrename\n Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n ftree-copy-prop\n-Common Report Var(flag_tree_copy_prop) Optimization\n+Common Var(flag_tree_copy_prop) Optimization\n Enable copy propagation on trees.\n \n ftree-store-copy-prop\n Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n ftree-cselim\n-Common Report Var(flag_tree_cselim) Init(2) Optimization\n+Common Var(flag_tree_cselim) Init(2) Optimization\n Transform condition stores into unconditional ones.\n \n ftree-switch-conversion\n-Common Report Var(flag_tree_switch_conversion) Optimization\n+Common Var(flag_tree_switch_conversion) Optimization\n Perform conversions of switch initializations.\n \n ftree-dce\n-Common Report Var(flag_tree_dce) Optimization\n+Common Var(flag_tree_dce) Optimization\n Enable SSA dead code elimination optimization on trees.\n \n ftree-dominator-opts\n-Common Report Var(flag_tree_dom) Optimization\n+Common Var(flag_tree_dom) Optimization\n Enable dominator optimizations.\n \n ftree-tail-merge\n-Common Report Var(flag_tree_tail_merge) Optimization\n+Common Var(flag_tree_tail_merge) Optimization\n Enable tail merging on trees.\n \n ftree-dse\n-Common Report Var(flag_tree_dse) Optimization\n+Common Var(flag_tree_dse) Optimization\n Enable dead store elimination.\n \n ftree-forwprop\n-Common Report Var(flag_tree_forwprop) Init(1) Optimization\n+Common Var(flag_tree_forwprop) Init(1) Optimization\n Enable forward propagation on trees.\n \n ftree-fre\n-Common Report Var(flag_tree_fre) Optimization\n+Common Var(flag_tree_fre) Optimization\n Enable Full Redundancy Elimination (FRE) on trees.\n \n foptimize-strlen\n-Common Report Var(flag_optimize_strlen) Optimization\n+Common Var(flag_optimize_strlen) Optimization\n Enable string length optimizations on trees.\n \n fisolate-erroneous-paths-dereference\n-Common Report Var(flag_isolate_erroneous_paths_dereference) Optimization\n+Common Var(flag_isolate_erroneous_paths_dereference) Optimization\n Detect paths that trigger erroneous or undefined behavior due to\n dereferencing a null pointer.  Isolate those paths from the main control\n flow and turn the statement with erroneous or undefined behavior into a trap.\n \n fisolate-erroneous-paths-attribute\n-Common Report Var(flag_isolate_erroneous_paths_attribute) Optimization\n+Common Var(flag_isolate_erroneous_paths_attribute) Optimization\n Detect paths that trigger erroneous or undefined behavior due to a null value\n being used in a way forbidden by a returns_nonnull or nonnull\n attribute.  Isolate those paths from the main control flow and turn the\n statement with erroneous or undefined behavior into a trap.\n \n ftree-loop-distribution\n-Common Report Var(flag_tree_loop_distribution) Optimization\n+Common Var(flag_tree_loop_distribution) Optimization\n Enable loop distribution on trees.\n \n ftree-loop-distribute-patterns\n-Common Report Var(flag_tree_loop_distribute_patterns) Optimization\n+Common Var(flag_tree_loop_distribute_patterns) Optimization\n Enable loop distribution for patterns transformed into a library call.\n \n ftree-loop-im\n-Common Report Var(flag_tree_loop_im) Init(1) Optimization\n+Common Var(flag_tree_loop_im) Init(1) Optimization\n Enable loop invariant motion on trees.\n \n ftree-loop-linear\n Common Alias(floop-nest-optimize)\n Enable loop nest transforms.  Same as -floop-nest-optimize.\n \n ftree-loop-ivcanon\n-Common Report Var(flag_tree_loop_ivcanon) Init(1) Optimization\n+Common Var(flag_tree_loop_ivcanon) Init(1) Optimization\n Create canonical induction variables in loops.\n \n ftree-loop-optimize\n-Common Report Var(flag_tree_loop_optimize) Init(1) Optimization\n+Common Var(flag_tree_loop_optimize) Init(1) Optimization\n Enable loop optimizations on tree level.\n \n ftree-parallelize-loops=\n-Common Report Joined RejectNegative UInteger Var(flag_tree_parallelize_loops) Init(1) Optimization\n+Common Joined RejectNegative UInteger Var(flag_tree_parallelize_loops) Init(1) Optimization\n -ftree-parallelize-loops=<number>\tEnable automatic parallelization of loops.\n \n ftree-phiprop\n-Common Report Var(flag_tree_phiprop) Init(1) Optimization\n+Common Var(flag_tree_phiprop) Init(1) Optimization\n Enable hoisting loads from conditional pointers.\n \n ftree-pre\n-Common Report Var(flag_tree_pre) Optimization\n+Common Var(flag_tree_pre) Optimization\n Enable SSA-PRE optimization on trees.\n \n ftree-partial-pre\n-Common Report Var(flag_tree_partial_pre) Optimization\n+Common Var(flag_tree_partial_pre) Optimization\n In SSA-PRE optimization on trees, enable partial-partial redundancy elimination.\n \n ftree-pta\n-Common Report Var(flag_tree_pta) Optimization\n+Common Var(flag_tree_pta) Optimization\n Perform function-local points-to analysis on trees.\n \n ftree-reassoc\n-Common Report Var(flag_tree_reassoc) Init(1) Optimization\n+Common Var(flag_tree_reassoc) Init(1) Optimization\n Enable reassociation on tree level.\n \n ftree-salias\n Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n ftree-sink\n-Common Report Var(flag_tree_sink) Optimization\n+Common Var(flag_tree_sink) Optimization\n Enable SSA code sinking on trees.\n \n ftree-slsr\n-Common Report Var(flag_tree_slsr) Optimization\n+Common Var(flag_tree_slsr) Optimization\n Perform straight-line strength reduction.\n \n ftree-sra\n-Common Report Var(flag_tree_sra) Optimization\n+Common Var(flag_tree_sra) Optimization\n Perform scalar replacement of aggregates.\n \n ftree-ter\n-Common Report Var(flag_tree_ter) Optimization\n+Common Var(flag_tree_ter) Optimization\n Replace temporary expressions in the SSA->normal pass.\n \n ftree-lrs\n-Common Report Var(flag_tree_live_range_split) Optimization\n+Common Var(flag_tree_live_range_split) Optimization\n Perform live range splitting during the SSA->normal pass.\n \n ftree-vrp\n-Common Report Var(flag_tree_vrp) Init(0) Optimization\n+Common Var(flag_tree_vrp) Init(0) Optimization\n Perform Value Range Propagation on trees.\n \n fsplit-paths\n-Common Report Var(flag_split_paths) Init(0) Optimization\n+Common Var(flag_split_paths) Init(0) Optimization\n Split paths leading to loop backedges.\n \n funconstrained-commons\n@@ -2904,15 +2904,15 @@ Assume common declarations may be overridden with ones with a larger\n trailing array.\n \n funit-at-a-time\n-Common Report Var(flag_unit_at_a_time) Init(1)\n+Common Var(flag_unit_at_a_time) Init(1)\n Compile whole compilation unit at a time.\n \n funroll-loops\n-Common Report Var(flag_unroll_loops) Optimization\n+Common Var(flag_unroll_loops) Optimization\n Perform loop unrolling when iteration count is known.\n \n funroll-all-loops\n-Common Report Var(flag_unroll_all_loops) Optimization\n+Common Var(flag_unroll_all_loops) Optimization\n Perform loop unrolling for all loops.\n \n funroll-completely-grow-size\n@@ -2927,36 +2927,36 @@ Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fassociative-math\n-Common Report Var(flag_associative_math) SetByCombined Optimization\n+Common Var(flag_associative_math) SetByCombined Optimization\n Allow optimization for floating-point arithmetic which may change the\n result of the operation due to rounding.\n \n freciprocal-math\n-Common Report Var(flag_reciprocal_math) SetByCombined Optimization\n+Common Var(flag_reciprocal_math) SetByCombined Optimization\n Same as -fassociative-math for expressions which include division.\n \n ; Nonzero means that unsafe floating-point math optimizations are allowed\n ; for the sake of speed.  IEEE compliance is not guaranteed, and operations\n ; are allowed to assume that their arguments and results are \"normal\"\n ; (e.g., nonnegative for SQRT).\n funsafe-math-optimizations\n-Common Report Var(flag_unsafe_math_optimizations) Optimization SetByCombined\n+Common Var(flag_unsafe_math_optimizations) Optimization SetByCombined\n Allow math optimizations that may violate IEEE or ISO standards.\n \n funswitch-loops\n-Common Report Var(flag_unswitch_loops) Optimization\n+Common Var(flag_unswitch_loops) Optimization\n Perform loop unswitching.\n \n fsplit-loops\n-Common Report Var(flag_split_loops) Optimization\n+Common Var(flag_split_loops) Optimization\n Perform loop splitting.\n \n fversion-loops-for-strides\n-Common Report Var(flag_version_loops_for_strides) Optimization\n+Common Var(flag_version_loops_for_strides) Optimization\n Version loops based on whether indices have a stride of one.\n \n funwind-tables\n-Common Report Var(flag_unwind_tables) Optimization\n+Common Var(flag_unwind_tables) Optimization\n Just generate unwind tables for exception handling.\n \n fuse-ld=bfd\n@@ -2980,46 +2980,46 @@ Common Undocumented Var(flag_use_linker_plugin)\n ; will be set according to optimize, debug_info_level and debug_hooks\n ; in process_options ().\n fvar-tracking\n-Common Report Var(flag_var_tracking) Init(2) PerFunction\n+Common Var(flag_var_tracking) Init(2) PerFunction\n Perform variable tracking.\n \n ; Positive if we should track variables at assignments, negative if\n ; we should run the var-tracking pass only to discard debug\n ; annotations.  When flag_var_tracking_assignments ==\n ; AUTODETECT_VALUE it will be set according to flag_var_tracking.\n fvar-tracking-assignments\n-Common Report Var(flag_var_tracking_assignments) Init(2) PerFunction\n+Common Var(flag_var_tracking_assignments) Init(2) PerFunction\n Perform variable tracking by annotating assignments.\n \n ; Nonzero if we should toggle flag_var_tracking_assignments after\n ; processing options and computing its default.  */\n fvar-tracking-assignments-toggle\n-Common Report Var(flag_var_tracking_assignments_toggle) PerFunction\n+Common Var(flag_var_tracking_assignments_toggle) PerFunction\n Toggle -fvar-tracking-assignments.\n \n ; Positive if we should track uninitialized variables, negative if\n ; we should run the var-tracking pass only to discard debug\n ; annotations.  When flag_var_tracking_uninit == AUTODETECT_VALUE it\n ; will be set according to flag_var_tracking.\n fvar-tracking-uninit\n-Common Report Var(flag_var_tracking_uninit) PerFunction\n+Common Var(flag_var_tracking_uninit) PerFunction\n Perform variable tracking and also tag variables that are uninitialized.\n \n ; Alias to enable both -ftree-loop-vectorize and -ftree-slp-vectorize.\n ftree-vectorize\n-Common Report Optimization\n+Common Optimization\n Enable vectorization on trees.\n \n ftree-vectorizer-verbose=\n Common Joined RejectNegative Ignore\n Does nothing.  Preserved for backward compatibility.\n \n ftree-loop-vectorize\n-Common Report Var(flag_tree_loop_vectorize) Optimization EnabledBy(ftree-vectorize)\n+Common Var(flag_tree_loop_vectorize) Optimization EnabledBy(ftree-vectorize)\n Enable loop vectorization on trees.\n \n ftree-slp-vectorize\n-Common Report Var(flag_tree_slp_vectorize) Optimization EnabledBy(ftree-vectorize)\n+Common Var(flag_tree_slp_vectorize) Optimization EnabledBy(ftree-vectorize)\n Enable basic block vectorization (SLP) on trees.\n \n fvect-cost-model=\n@@ -3054,7 +3054,7 @@ Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n ftree-scev-cprop\n-Common Report Var(flag_tree_scev_cprop) Init(1) Optimization\n+Common Var(flag_tree_scev_cprop) Init(1) Optimization\n Enable copy propagation of scalar-evolution information.\n \n ; -fverbose-asm causes extra commentary information to be produced in\n@@ -3064,7 +3064,7 @@ Enable copy propagation of scalar-evolution information.\n ; -fno-verbose-asm, the default, causes the extra information\n ; to not be added and is useful when comparing two assembler files.\n fverbose-asm\n-Common Report Var(flag_verbose_asm)\n+Common Var(flag_verbose_asm)\n Add extra commentary to assembler output.\n \n fvisibility=\n@@ -3111,35 +3111,35 @@ Common Var(flag_vtv_debug)\n Output vtable verification pointer sets information.\n \n fvpt\n-Common Report Var(flag_value_profile_transformations) Optimization\n+Common Var(flag_value_profile_transformations) Optimization\n Use expression value profiles in optimizations.\n \n fweb\n-Common Report Var(flag_web) Init(2) Optimization\n+Common Var(flag_web) Init(2) Optimization\n Construct webs and split unrelated uses of single variable.\n \n ftree-builtin-call-dce\n-Common Report Var(flag_tree_builtin_call_dce) Init(0) Optimization\n+Common Var(flag_tree_builtin_call_dce) Init(0) Optimization\n Enable conditional dead code elimination for builtin calls.\n \n fwhole-program\n-Common Report Var(flag_whole_program) Init(0)\n+Common Var(flag_whole_program) Init(0)\n Perform whole program optimizations.\n \n fwrapv-pointer\n-Common Report Var(flag_wrapv_pointer) Optimization\n+Common Var(flag_wrapv_pointer) Optimization\n Assume pointer overflow wraps around.\n \n fwrapv\n-Common Report Var(flag_wrapv) Optimization\n+Common Var(flag_wrapv) Optimization\n Assume signed arithmetic overflow wraps around.\n \n fzero-initialized-in-bss\n-Common Report Var(flag_zero_initialized_in_bss) Init(1)\n+Common Var(flag_zero_initialized_in_bss) Init(1)\n Put zero initialized data in the bss section.\n \n fzero-call-used-regs=\n-Common Report RejectNegative Joined\n+Common RejectNegative Joined\n Clear call-used registers upon function return.\n \n g\n@@ -3239,15 +3239,15 @@ Common Driver Var(debug_nonbind_markers_p) Init(2)\n Emit progressive recommended breakpoint locations.\n \n gstrict-dwarf\n-Common Driver Report Var(dwarf_strict) Init(0)\n+Common Driver Var(dwarf_strict) Init(0)\n Don't emit DWARF additions beyond selected version.\n \n gdescribe-dies\n-Common Driver Report Var(flag_describe_dies) Init(0)\n+Common Driver Var(flag_describe_dies) Init(0)\n Add description attributes to some DWARF DIEs that have no name attribute.\n \n gtoggle\n-Common Driver Report Var(flag_gtoggle)\n+Common Driver Var(flag_gtoggle)\n Toggle debug information generation.\n \n gvariable-location-views\n@@ -3491,7 +3491,7 @@ z\n Driver Joined Separate\n \n fipa-ra\n-Common Report Var(flag_ipa_ra) Optimization\n+Common Var(flag_ipa_ra) Optimization\n Use caller save register across calls if possible.\n \n ; This comment is to ensure we retain the blank line above."}, {"sha": "ded13a5be8a3dca48a6965f074c0748a49e62c35", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -64,39 +64,39 @@ EnumValue\n Enum(cmodel) String(large) Value(AARCH64_CMODEL_LARGE)\n \n mbig-endian\n-Target Report RejectNegative Mask(BIG_END)\n+Target RejectNegative Mask(BIG_END)\n Assume target CPU is configured as big endian.\n \n mgeneral-regs-only\n-Target Report RejectNegative Mask(GENERAL_REGS_ONLY) Save\n+Target RejectNegative Mask(GENERAL_REGS_ONLY) Save\n Generate code which uses only the general registers.\n \n mharden-sls=\n Target RejectNegative Joined Var(aarch64_harden_sls_string)\n Generate code to mitigate against straight line speculation.\n \n mfix-cortex-a53-835769\n-Target Report Var(aarch64_fix_a53_err835769) Init(2) Save\n+Target Var(aarch64_fix_a53_err835769) Init(2) Save\n Workaround for ARM Cortex-A53 Erratum number 835769.\n \n mfix-cortex-a53-843419\n-Target Report Var(aarch64_fix_a53_err843419) Init(2) Save\n+Target Var(aarch64_fix_a53_err843419) Init(2) Save\n Workaround for ARM Cortex-A53 Erratum number 843419.\n \n mlittle-endian\n-Target Report RejectNegative InverseMask(BIG_END)\n+Target RejectNegative InverseMask(BIG_END)\n Assume target CPU is configured as little endian.\n \n mcmodel=\n Target RejectNegative Joined Enum(cmodel) Var(aarch64_cmodel_var) Init(AARCH64_CMODEL_SMALL) Save\n Specify the code model.\n \n mstrict-align\n-Target Report Mask(STRICT_ALIGN) Save\n+Target Mask(STRICT_ALIGN) Save\n Don't assume that unaligned accesses are handled by the system.\n \n momit-leaf-frame-pointer\n-Target Report Var(flag_omit_leaf_frame_pointer) Init(2) Save\n+Target Var(flag_omit_leaf_frame_pointer) Init(2) Save\n Omit the frame pointer in leaf functions.\n \n mtls-dialect=\n@@ -153,7 +153,7 @@ EnumValue\n Enum(aarch64_abi) String(lp64) Value(AARCH64_ABI_LP64)\n \n mpc-relative-literal-loads\n-Target Report Save Var(pcrelative_literal_loads) Init(2) Save\n+Target Save Var(pcrelative_literal_loads) Init(2) Save\n PC relative literal loads.\n \n mbranch-protection=\n@@ -260,7 +260,7 @@ TargetVariable\n long aarch64_stack_protector_guard_offset = 0\n \n moutline-atomics\n-Target Report Var(aarch64_flag_outline_atomics) Init(2) Save\n+Target Var(aarch64_flag_outline_atomics) Init(2) Save\n Generate local calls to out-of-line atomic operations.\n \n -param=aarch64-sve-compare-costs="}, {"sha": "36dcdcaaef1044af24190166075e24b8298c0ec1", "filename": "gcc/config/alpha/alpha.opt", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Falpha%2Falpha.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Falpha%2Falpha.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,11 +19,11 @@\n ; <http://www.gnu.org/licenses/>.\n \n msoft-float\n-Target Report Mask(SOFT_FP)\n+Target Mask(SOFT_FP)\n Do not use hardware fp.\n \n mfp-regs\n-Target Report Mask(FPREGS)\n+Target Mask(FPREGS)\n Use fp registers.\n \n mgas\n@@ -35,70 +35,70 @@ Target RejectNegative Mask(IEEE_CONFORMANT)\n Request IEEE-conformant math library routines (OSF/1).\n \n mieee\n-Target Report RejectNegative Mask(IEEE)\n+Target RejectNegative Mask(IEEE)\n Emit IEEE-conformant code, without inexact exceptions.\n \n mieee-with-inexact\n-Target Report RejectNegative Mask(IEEE_WITH_INEXACT)\n+Target RejectNegative Mask(IEEE_WITH_INEXACT)\n \n mbuild-constants\n-Target Report Mask(BUILD_CONSTANTS)\n+Target Mask(BUILD_CONSTANTS)\n Do not emit complex integer constants to read-only memory.\n \n mfloat-vax\n-Target Report RejectNegative Mask(FLOAT_VAX)\n+Target RejectNegative Mask(FLOAT_VAX)\n Use VAX fp.\n \n mfloat-ieee\n-Target Report RejectNegative InverseMask(FLOAT_VAX)\n+Target RejectNegative InverseMask(FLOAT_VAX)\n Do not use VAX fp.\n \n mbwx\n-Target Report Mask(BWX)\n+Target Mask(BWX)\n Emit code for the byte/word ISA extension.\n \n mmax\n-Target Report Mask(MAX)\n+Target Mask(MAX)\n Emit code for the motion video ISA extension.\n \n mfix\n-Target Report Mask(FIX)\n+Target Mask(FIX)\n Emit code for the fp move and sqrt ISA extension.\n \n mcix\n-Target Report Mask(CIX)\n+Target Mask(CIX)\n Emit code for the counting ISA extension.\n \n mexplicit-relocs\n-Target Report Mask(EXPLICIT_RELOCS)\n+Target Mask(EXPLICIT_RELOCS)\n Emit code using explicit relocation directives.\n \n msmall-data\n-Target Report RejectNegative Mask(SMALL_DATA)\n+Target RejectNegative Mask(SMALL_DATA)\n Emit 16-bit relocations to the small data areas.\n \n mlarge-data\n-Target Report RejectNegative InverseMask(SMALL_DATA)\n+Target RejectNegative InverseMask(SMALL_DATA)\n Emit 32-bit relocations to the small data areas.\n \n msmall-text\n-Target Report RejectNegative Mask(SMALL_TEXT)\n+Target RejectNegative Mask(SMALL_TEXT)\n Emit direct branches to local functions.\n \n mlarge-text\n-Target Report RejectNegative InverseMask(SMALL_TEXT)\n+Target RejectNegative InverseMask(SMALL_TEXT)\n Emit indirect branches to local functions.\n \n mtls-kernel\n-Target Report Mask(TLS_KERNEL)\n+Target Mask(TLS_KERNEL)\n Emit rdval instead of rduniq for thread pointer.\n \n mlong-double-128\n-Target Report RejectNegative Mask(LONG_DOUBLE_128)\n+Target RejectNegative Mask(LONG_DOUBLE_128)\n Use 128-bit long double.\n \n mlong-double-64\n-Target Report RejectNegative InverseMask(LONG_DOUBLE_128)\n+Target RejectNegative InverseMask(LONG_DOUBLE_128)\n Use 64-bit long double.\n \n mcpu="}, {"sha": "3696a1d5b18fb7cc056e656729edea21af586f0c", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -22,39 +22,39 @@ HeaderInclude\n config/arc/arc-opts.h\n \n mbig-endian\n-Target Report RejectNegative Mask(BIG_ENDIAN)\n+Target RejectNegative Mask(BIG_ENDIAN)\n Compile code for big endian mode.\n \n mlittle-endian\n-Target Report RejectNegative InverseMask(BIG_ENDIAN)\n+Target RejectNegative InverseMask(BIG_ENDIAN)\n Compile code for little endian mode.  This is the default.\n \n mno-cond-exec\n-Target Report RejectNegative Mask(NO_COND_EXEC)\n+Target RejectNegative Mask(NO_COND_EXEC)\n Disable ARCompact specific pass to generate conditional execution instructions.\n \n mA6\n-Target Report\n+Target\n Generate ARCompact 32-bit code for ARC600 processor.\n \n mARC600\n-Target Report\n+Target\n Same as -mA6.\n \n mARC601\n-Target Report\n+Target\n Generate ARCompact 32-bit code for ARC601 processor.\n \n mA7\n-Target Report\n+Target\n Generate ARCompact 32-bit code for ARC700 processor.\n \n mARC700\n-Target Report\n+Target\n Same as -mA7.\n \n mjli-always\n-Target Report Mask(JLI_ALWAYS)\n+Target Mask(JLI_ALWAYS)\n Force all calls to be made via a jli instruction.\n \n mmpy-option=\n@@ -128,15 +128,15 @@ EnumValue\n Enum(arc_mpy) String(plus_qmacw) Value(9) Canonical\n \n mdiv-rem\n-Target Report Mask(DIVREM)\n+Target Mask(DIVREM)\n Enable DIV-REM instructions for ARCv2.\n \n mcode-density\n-Target Report Mask(CODE_DENSITY)\n+Target Mask(CODE_DENSITY)\n Enable code density instructions for ARCv2.\n \n mmixed-code\n-Target Report Mask(MIXED_CODE_SET)\n+Target Mask(MIXED_CODE_SET)\n Tweak register allocation to help 16-bit instruction generation.\n ; originally this was:\n ;Generate ARCompact 16-bit instructions intermixed with 32-bit instructions\n@@ -146,91 +146,91 @@ Tweak register allocation to help 16-bit instruction generation.\n ; We use an explict definition for the negative form because that is the\n ; actually interesting option, and we want that to have its own comment.\n mvolatile-cache\n-Target Report RejectNegative Mask(VOLATILE_CACHE_SET)\n+Target RejectNegative Mask(VOLATILE_CACHE_SET)\n Use ordinarily cached memory accesses for volatile references.\n \n mno-volatile-cache\n-Target Report RejectNegative InverseMask(VOLATILE_CACHE_SET)\n+Target RejectNegative InverseMask(VOLATILE_CACHE_SET)\n Enable cache bypass for volatile references.\n \n mbarrel-shifter\n-Target Report Mask(BARREL_SHIFTER)\n+Target Mask(BARREL_SHIFTER)\n Generate instructions supported by barrel shifter.\n \n mnorm\n-Target Report Mask(NORM_SET)\n+Target Mask(NORM_SET)\n Generate norm instruction.\n \n mswap\n-Target Report Mask(SWAP_SET)\n+Target Mask(SWAP_SET)\n Generate swap instruction.\n \n mmul64\n-Target Report Mask(MUL64_SET)\n+Target Mask(MUL64_SET)\n Generate mul64 and mulu64 instructions.\n \n mno-mpy\n-Target Report Mask(NOMPY_SET) Warn(%qs is deprecated)\n+Target Mask(NOMPY_SET) Warn(%qs is deprecated)\n Do not generate mpy instructions for ARC700.\n \n mea\n-Target Report Mask(EA_SET)\n+Target Mask(EA_SET)\n Generate extended arithmetic instructions, only valid for ARC700.\n \n msoft-float\n-Target Report Mask(0)\n+Target Mask(0)\n Dummy flag. This is the default unless FPX switches are provided explicitly.\n \n mlong-calls\n-Target Report Mask(LONG_CALLS_SET)\n+Target Mask(LONG_CALLS_SET)\n Generate call insns as register indirect calls.\n \n mno-brcc\n-Target Report Mask(NO_BRCC_SET)\n+Target Mask(NO_BRCC_SET)\n Do no generate BRcc instructions in arc_reorg.\n \n msdata\n-Target Report InverseMask(NO_SDATA_SET)\n+Target InverseMask(NO_SDATA_SET)\n Generate sdata references.  This is the default, unless you compile for PIC.\n \n mmillicode\n-Target Report Mask(MILLICODE_THUNK_SET)\n+Target Mask(MILLICODE_THUNK_SET)\n Generate millicode thunks.\n \n mspfp\n-Target Report Mask(SPFP_COMPACT_SET)\n+Target Mask(SPFP_COMPACT_SET)\n FPX: Generate Single Precision FPX (compact) instructions.\n \n mspfp-compact\n-Target Report Mask(SPFP_COMPACT_SET) MaskExists\n+Target Mask(SPFP_COMPACT_SET) MaskExists\n FPX: Generate Single Precision FPX (compact) instructions.\n \n mspfp-fast\n-Target Report Mask(SPFP_FAST_SET)\n+Target Mask(SPFP_FAST_SET)\n FPX: Generate Single Precision FPX (fast) instructions.\n \n margonaut\n-Target Report Mask(ARGONAUT_SET)\n+Target Mask(ARGONAUT_SET)\n FPX: Enable Argonaut ARC CPU Double Precision Floating Point extensions.\n \n mdpfp\n-Target Report Mask(DPFP_COMPACT_SET)\n+Target Mask(DPFP_COMPACT_SET)\n FPX: Generate Double Precision FPX (compact) instructions.\n \n mdpfp-compact\n-Target Report Mask(DPFP_COMPACT_SET) MaskExists\n+Target Mask(DPFP_COMPACT_SET) MaskExists\n FPX: Generate Double Precision FPX (compact) instructions.\n \n mdpfp-fast\n-Target Report Mask(DPFP_FAST_SET)\n+Target Mask(DPFP_FAST_SET)\n FPX: Generate Double Precision FPX (fast) instructions.\n \n mno-dpfp-lrsr\n-Target Report Mask(DPFP_DISABLE_LRSR)\n+Target Mask(DPFP_DISABLE_LRSR)\n Disable LR and SR instructions from using FPX extension aux registers.\n \n msimd\n-Target Report Mask(SIMD_SET)\n+Target Mask(SIMD_SET)\n Enable generation of ARC SIMD instructions via target-specific builtins.\n \n mcpu=\n@@ -242,7 +242,7 @@ Target RejectNegative Joined UInteger Var(arc_size_opt_level) Init(-1)\n Size optimization level: 0:none 1:opportunistic 2: regalloc 3:drop align, -Os.\n \n misize\n-Target Report PchIgnore Var(TARGET_DUMPISIZE)\n+Target PchIgnore Var(TARGET_DUMPISIZE)\n Annotate assembler instructions with estimated addresses.\n \n mmultcost=\n@@ -289,7 +289,7 @@ Target Var(TARGET_AUTO_MODIFY_REG) Init(TARGET_AUTO_MODIFY_REG_DEFAULT)\n Enable the use of pre/post modify with register displacement.\n \n mmul32x16\n-Target Report Mask(MULMAC_32BY16_SET)\n+Target Mask(MULMAC_32BY16_SET)\n Generate 32x16 multiply and mac instructions.\n \n ; the initializer is supposed to be: Init(REG_BR_PROB_BASE/2) ,\n@@ -346,42 +346,42 @@ Expand adddi3 and subdi3 at rtl generation time into add.f / adc etc.\n ; Flags used by the assembler, but for which we define preprocessor\n ; macro symbols as well.\n mcrc\n-Target Report Warn(%qs is deprecated)\n+Target Warn(%qs is deprecated)\n Enable variable polynomial CRC extension.\n \n mdsp-packa\n-Target Report Warn(%qs is deprecated)\n+Target Warn(%qs is deprecated)\n Enable DSP 3.1 Pack A extensions.\n \n mdvbf\n-Target Report Warn(%qs is deprecated)\n+Target Warn(%qs is deprecated)\n Enable dual viterbi butterfly extension.\n \n mmac-d16\n-Target Report Undocumented Warn(%qs is deprecated)\n+Target Undocumented Warn(%qs is deprecated)\n \n mmac-24\n-Target Report Undocumented Warn(%qs is deprecated)\n+Target Undocumented Warn(%qs is deprecated)\n \n mtelephony\n-Target Report RejectNegative Warn(%qs is deprecated)\n+Target RejectNegative Warn(%qs is deprecated)\n Enable Dual and Single Operand Instructions for Telephony.\n \n mxy\n-Target Report\n+Target\n Enable XY Memory extension (DSP version 3).\n \n ; ARC700 4.10 extension instructions\n mlock\n-Target Report\n+Target\n Enable Locked Load/Store Conditional extension.\n \n mswape\n-Target Report\n+Target\n Enable swap byte ordering extension instruction.\n \n mrtsc\n-Target Report Warn(%qs is deprecated)\n+Target Warn(%qs is deprecated)\n Enable 64-bit Time-Stamp Counter extension instruction.\n \n EB\n@@ -402,7 +402,7 @@ Pass -marclinux_prof option through to linker.\n \n ;; lra is still unproven for ARC, so allow to fall back to reload with -mno-lra.\n mlra\n-Target Report Var(arc_lra_flag) Init(1) Save\n+Target Var(arc_lra_flag) Init(1) Save\n Use LRA instead of reload.\n \n mlra-priority-none\n@@ -426,11 +426,11 @@ multcost=\n Target RejectNegative Joined\n \n matomic\n-Target Report Mask(ATOMIC)\n+Target Mask(ATOMIC)\n Enable atomic instructions.\n \n mll64\n-Target Report Mask(LL64)\n+Target Mask(LL64)\n Enable double load/store instructions for ARC HS.\n \n mfpu=\n@@ -484,15 +484,15 @@ mtp-regno=none\n Target RejectNegative Var(arc_tp_regno,-1)\n \n mbitops\n-Target Report Var(TARGET_NPS_BITOPS) Init(TARGET_NPS_BITOPS_DEFAULT)\n+Target Var(TARGET_NPS_BITOPS) Init(TARGET_NPS_BITOPS_DEFAULT)\n Enable use of NPS400 bit operations.\n \n mcmem\n-Target Report Var(TARGET_NPS_CMEM) Init(TARGET_NPS_CMEM_DEFAULT)\n+Target Var(TARGET_NPS_CMEM) Init(TARGET_NPS_CMEM_DEFAULT)\n Enable use of NPS400 xld/xst extension.\n \n munaligned-access\n-Target Report Var(unaligned_access) Init(UNALIGNED_ACCESS_DEFAULT)\n+Target Var(unaligned_access) Init(UNALIGNED_ACCESS_DEFAULT)\n Enable unaligned word and halfword accesses to packed data.\n \n mirq-ctrl-saved=\n@@ -529,13 +529,13 @@ EnumValue\n Enum(arc_lpc) String(32) Value(32)\n \n mrf16\n-Target Report Mask(RF16)\n+Target Mask(RF16)\n Enable 16-entry register file.\n \n mbranch-index\n-Target Report Var(TARGET_BRANCH_INDEX) Init(DEFAULT_BRANCH_INDEX)\n+Target Var(TARGET_BRANCH_INDEX) Init(DEFAULT_BRANCH_INDEX)\n Enable use of BI/BIH instructions when available.\n \n mcode-density-frame\n-Target Report Var(TARGET_CODE_DENSITY_FRAME) Init(TARGET_CODE_DENSITY_FRAME_DEFAULT)\n+Target Var(TARGET_CODE_DENSITY_FRAME) Init(TARGET_CODE_DENSITY_FRAME_DEFAULT)\n Enable ENTER_S and LEAVE_S opcodes for ARCv2."}, {"sha": "b8490094e0381459cebe3ea35f28e313a712da8a", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -55,22 +55,22 @@ EnumValue\n Enum(arm_abi_type) String(aapcs-linux) Value(ARM_ABI_AAPCS_LINUX)\n \n mabort-on-noreturn\n-Target Report Mask(ABORT_NORETURN)\n+Target Mask(ABORT_NORETURN)\n Generate a call to abort if a noreturn function returns.\n \n mapcs\n Target RejectNegative Mask(APCS_FRAME) Undocumented\n \n mapcs-frame\n-Target Report Mask(APCS_FRAME)\n+Target Mask(APCS_FRAME)\n Generate APCS conformant stack frames.\n \n mapcs-reentrant\n-Target Report Mask(APCS_REENT)\n+Target Mask(APCS_REENT)\n Generate re-entrant, PIC code.\n \n mapcs-stack-check\n-Target Report Mask(APCS_STACK) Undocumented\n+Target Mask(APCS_STACK) Undocumented\n \n march=\n Target Save RejectNegative Negative(march=) ToLower Joined Var(arm_arch_string)\n@@ -82,19 +82,19 @@ EnumValue\n Enum(arm_arch) String(native) Value(-1) DriverOnly\n \n marm\n-Target Report RejectNegative Negative(mthumb) InverseMask(THUMB)\n+Target RejectNegative Negative(mthumb) InverseMask(THUMB)\n Generate code in 32 bit ARM state.\n \n mbig-endian\n-Target Report RejectNegative Negative(mlittle-endian) Mask(BIG_END)\n+Target RejectNegative Negative(mlittle-endian) Mask(BIG_END)\n Assume target CPU is configured as big endian.\n \n mcallee-super-interworking\n-Target Report Mask(CALLEE_INTERWORKING)\n+Target Mask(CALLEE_INTERWORKING)\n Thumb: Assume non-static functions may be called from ARM code.\n \n mcaller-super-interworking\n-Target Report Mask(CALLER_INTERWORKING)\n+Target Mask(CALLER_INTERWORKING)\n Thumb: Assume function pointers may go to non-Thumb aware code.\n \n mcpu=\n@@ -123,7 +123,7 @@ EnumValue\n Enum(float_abi_type) String(hard) Value(ARM_FLOAT_ABI_HARD)\n \n mflip-thumb\n-Target Report Var(TARGET_FLIP_THUMB) Undocumented\n+Target Var(TARGET_FLIP_THUMB) Undocumented\n Switch ARM/Thumb modes on alternating functions for compiler testing.\n \n mfp16-format=\n@@ -151,31 +151,31 @@ mhard-float\n Target RejectNegative Alias(mfloat-abi=, hard) Undocumented\n \n mlittle-endian\n-Target Report RejectNegative Negative(mbig-endian) InverseMask(BIG_END)\n+Target RejectNegative Negative(mbig-endian) InverseMask(BIG_END)\n Assume target CPU is configured as little endian.\n \n mlong-calls\n-Target Report Mask(LONG_CALLS)\n+Target Mask(LONG_CALLS)\n Generate call insns as indirect calls, if necessary.\n \n mpic-data-is-text-relative\n-Target Report Var(arm_pic_data_is_text_relative) Init(TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE)\n+Target Var(arm_pic_data_is_text_relative) Init(TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE)\n Assume data segments are relative to text segment.\n \n mpic-register=\n Target RejectNegative Joined Var(arm_pic_register_string)\n Specify the register to be used for PIC addressing.\n \n mpoke-function-name\n-Target Report Mask(POKE_FUNCTION_NAME)\n+Target Mask(POKE_FUNCTION_NAME)\n Store function names in object code.\n \n msched-prolog\n-Target Report Mask(SCHED_PROLOG)\n+Target Mask(SCHED_PROLOG)\n Permit scheduling of a function's prologue sequence.\n \n msingle-pic-base\n-Target Report Mask(SINGLE_PIC_BASE)\n+Target Mask(SINGLE_PIC_BASE)\n Do not load the PIC register in function prologues.\n \n msoft-float\n@@ -186,11 +186,11 @@ Target RejectNegative Joined UInteger Var(arm_structure_size_boundary) Init(DEFA\n Specify the minimum bit alignment of structures. (Deprecated).\n \n mthumb\n-Target Report RejectNegative Negative(marm) Mask(THUMB) Save\n+Target RejectNegative Negative(marm) Mask(THUMB) Save\n Generate code for Thumb state.\n \n mthumb-interwork\n-Target Report Mask(INTERWORK)\n+Target Mask(INTERWORK)\n Support calls between Thumb and ARM instruction sets.\n \n mtls-dialect=\n@@ -215,19 +215,19 @@ EnumValue\n Enum(arm_tp_type) String(cp15) Value(TP_CP15)\n \n mtpcs-frame\n-Target Report Mask(TPCS_FRAME)\n+Target Mask(TPCS_FRAME)\n Thumb: Generate (non-leaf) stack frames even if not needed.\n \n mtpcs-leaf-frame\n-Target Report Mask(TPCS_LEAF_FRAME)\n+Target Mask(TPCS_LEAF_FRAME)\n Thumb: Generate (leaf) stack frames even if not needed.\n \n mtune=\n Target Save RejectNegative Negative(mtune=) ToLower Joined Var(arm_tune_string)\n Tune code for the given processor.\n \n mprint-tune-info\n-Target Report RejectNegative Var(print_tune_info) Init(0)\n+Target RejectNegative Var(print_tune_info) Init(0)\n Print CPU tuning information as comment in assembler file.  This is\n an option used only for regression testing of the compiler and not\n intended for ordinary use in compiling code.\n@@ -238,66 +238,66 @@ EnumValue\n Enum(processor_type) String(native) Value(-1) DriverOnly\n \n mvectorize-with-neon-quad\n-Target Report RejectNegative InverseMask(NEON_VECTORIZE_DOUBLE)\n+Target RejectNegative InverseMask(NEON_VECTORIZE_DOUBLE)\n Use Neon quad-word (rather than double-word) registers for vectorization.\n \n mvectorize-with-neon-double\n-Target Report RejectNegative Mask(NEON_VECTORIZE_DOUBLE)\n+Target RejectNegative Mask(NEON_VECTORIZE_DOUBLE)\n Use Neon double-word (rather than quad-word) registers for vectorization.\n \n mverbose-cost-dump\n Common Undocumented Var(arm_verbose_cost) Init(0)\n Enable more verbose RTX cost dumps during debug.  For GCC developers use only.\n \n mword-relocations\n-Target Report Var(target_word_relocations) Init(TARGET_DEFAULT_WORD_RELOCATIONS)\n+Target Var(target_word_relocations) Init(TARGET_DEFAULT_WORD_RELOCATIONS)\n Only generate absolute relocations on word sized values.\n \n mrestrict-it\n-Target Report Var(arm_restrict_it) Init(2) Save\n+Target Var(arm_restrict_it) Init(2) Save\n Generate IT blocks appropriate for ARMv8.\n \n mfix-cortex-m3-ldrd\n-Target Report Var(fix_cm3_ldrd) Init(2)\n+Target Var(fix_cm3_ldrd) Init(2)\n Avoid overlapping destination and address registers on LDRD instructions\n that may trigger Cortex-M3 errata.\n \n munaligned-access\n-Target Report Var(unaligned_access) Init(2) Save\n+Target Var(unaligned_access) Init(2) Save\n Enable unaligned word and halfword accesses to packed data.\n \n mneon-for-64bits\n Target WarnRemoved\n This option is deprecated and has no effect.\n \n mslow-flash-data\n-Target Report Var(target_slow_flash_data) Init(0)\n+Target Var(target_slow_flash_data) Init(0)\n Assume loading data from flash is slower than fetching instructions.\n \n masm-syntax-unified\n-Target Report Var(inline_asm_unified) Init(0) Save\n+Target Var(inline_asm_unified) Init(0) Save\n Assume unified syntax for inline assembly code.\n \n mpure-code\n-Target Report Var(target_pure_code) Init(0)\n+Target Var(target_pure_code) Init(0)\n Do not allow constant data to be placed in code sections.\n \n mbe8\n-Target Report RejectNegative Negative(mbe32) Mask(BE8)\n+Target RejectNegative Negative(mbe32) Mask(BE8)\n When linking for big-endian targets, generate a BE8 format image.\n \n mbe32\n-Target Report RejectNegative Negative(mbe8) InverseMask(BE8)\n+Target RejectNegative Negative(mbe8) InverseMask(BE8)\n When linking for big-endian targets, generate a legacy BE32 format image.\n \n mbranch-cost=\n Target RejectNegative Joined UInteger Var(arm_branch_cost) Init(-1)\n Cost to assume for a branch insn.\n \n mgeneral-regs-only\n-Target Report RejectNegative Mask(GENERAL_REGS_ONLY) Save\n+Target RejectNegative Mask(GENERAL_REGS_ONLY) Save\n Generate code which uses the core registers only (r0-r14).\n \n mfdpic\n-Target Report Mask(FDPIC)\n+Target Mask(FDPIC)\n Enable Function Descriptor PIC mode."}, {"sha": "5d849dabe8f24549f6b96ee5abc8b6f6aba0e2c8", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,116 +19,116 @@\n ; <http://www.gnu.org/licenses/>.\n \n mcall-prologues\n-Target Report Mask(CALL_PROLOGUES)\n+Target Mask(CALL_PROLOGUES)\n Use subroutines for function prologues and epilogues.\n \n mmcu=\n Target RejectNegative Joined Var(avr_mmcu) MissingArgError(missing device or architecture after %qs)\n -mmcu=MCU\tSelect the target MCU.\n \n mgas-isr-prologues\n-Target Report Var(avr_gasisr_prologues) UInteger Init(0)\n+Target Var(avr_gasisr_prologues) UInteger Init(0)\n Allow usage of __gcc_isr pseudo instructions in ISR prologues and epilogues.\n \n mn-flash=\n Target RejectNegative Joined Var(avr_n_flash) UInteger Init(-1)\n Set the number of 64 KiB flash segments.\n \n mskip-bug\n-Target Report Mask(SKIP_BUG)\n+Target Mask(SKIP_BUG)\n Indicate presence of a processor erratum.\n \n mrmw\n-Target Report Mask(RMW)\n+Target Mask(RMW)\n Enable Read-Modify-Write (RMW) instructions support/use.\n \n mdeb\n-Target Report Undocumented Mask(ALL_DEBUG)\n+Target Undocumented Mask(ALL_DEBUG)\n \n mlog=\n Target RejectNegative Joined Undocumented Var(avr_log_details)\n \n mshort-calls\n-Target Report RejectNegative Mask(SHORT_CALLS)\n+Target RejectNegative Mask(SHORT_CALLS)\n Use RJMP / RCALL even though CALL / JMP are available.\n \n mint8\n-Target Report Mask(INT8)\n+Target Mask(INT8)\n Use an 8-bit 'int' type.\n \n mno-interrupts\n-Target Report RejectNegative Mask(NO_INTERRUPTS)\n+Target RejectNegative Mask(NO_INTERRUPTS)\n Change the stack pointer without disabling interrupts.\n \n mbranch-cost=\n-Target Report Joined RejectNegative UInteger Var(avr_branch_cost) Init(0)\n+Target Joined RejectNegative UInteger Var(avr_branch_cost) Init(0)\n Set the branch costs for conditional branch instructions.  Reasonable values are small, non-negative integers.  The default branch cost is 0.\n \n mmain-is-OS_task\n-Target Report Mask(MAIN_IS_OS_TASK)\n+Target Mask(MAIN_IS_OS_TASK)\n Treat main as if it had attribute OS_task.\n \n morder1\n-Target Report Undocumented Mask(ORDER_1)\n+Target Undocumented Mask(ORDER_1)\n \n morder2\n-Target Report Undocumented Mask(ORDER_2)\n+Target Undocumented Mask(ORDER_2)\n \n mtiny-stack\n-Target Report Mask(TINY_STACK)\n+Target Mask(TINY_STACK)\n Change only the low 8 bits of the stack pointer.\n \n mrelax\n-Target Report\n+Target\n Relax branches.\n \n mpmem-wrap-around\n-Target Report\n+Target\n Make the linker relaxation machine assume that a program counter wrap-around occurs.\n \n maccumulate-args\n-Target Report Mask(ACCUMULATE_OUTGOING_ARGS)\n+Target Mask(ACCUMULATE_OUTGOING_ARGS)\n Accumulate outgoing function arguments and acquire/release the needed stack space for outgoing function arguments in function prologue/epilogue.  Without this option, outgoing arguments are pushed before calling a function and popped afterwards.  This option can lead to reduced code size for functions that call many functions that get their arguments on the stack like, for example printf.\n \n mstrict-X\n-Target Report Var(avr_strict_X) Init(0)\n+Target Var(avr_strict_X) Init(0)\n When accessing RAM, use X as imposed by the hardware, i.e. just use pre-decrement, post-increment and indirect addressing with the X register.  Without this option, the compiler may assume that there is an addressing mode X+const similar to Y+const and Z+const and emit instructions to emulate such an addressing mode for X.\n \n ;; For rationale behind -msp8 see explanation in avr.h.\n msp8\n-Target Report RejectNegative Var(avr_sp8) Init(0)\n+Target RejectNegative Var(avr_sp8) Init(0)\n The device has no SPH special function register. This option will be overridden by the compiler driver with the correct setting if presence/absence of SPH can be deduced from -mmcu=MCU.\n \n Waddr-space-convert\n-Warning C Report Var(avr_warn_addr_space_convert) Init(0)\n+Warning C Var(avr_warn_addr_space_convert) Init(0)\n Warn if the address space of an address is changed.\n \n Wmisspelled-isr\n-Warning C C++ Report Var(avr_warn_misspelled_isr) Init(1)\n+Warning C C++ Var(avr_warn_misspelled_isr) Init(1)\n Warn if the ISR is misspelled, i.e. without __vector prefix. Enabled by default.\n \n mfract-convert-truncate\n-Target Report Mask(FRACT_CONV_TRUNC)\n+Target Mask(FRACT_CONV_TRUNC)\n Allow to use truncation instead of rounding towards zero for fractional fixed-point types.\n \n mabsdata\n-Target Report Mask(ABSDATA)\n+Target Mask(ABSDATA)\n Assume that all data in static storage can be accessed by LDS / STS.  This option is only useful for reduced Tiny devices.\n \n mdouble=\n-Target Report Joined RejectNegative Var(avr_double) Init(0) Enum(avr_bits_e)\n+Target Joined RejectNegative Var(avr_double) Init(0) Enum(avr_bits_e)\n -mdouble=<BITS>\tUse <BITS> bits wide double type.\n \n mlong-double=\n-Target Report Joined RejectNegative Var(avr_long_double) Init(0) Enum(avr_bits_e)\n+Target Joined RejectNegative Var(avr_long_double) Init(0) Enum(avr_bits_e)\n -mlong-double=<BITS>\tUse <BITS> bits wide long double type.\n \n nodevicelib\n-Driver Target Report RejectNegative\n+Driver Target RejectNegative\n Do not link against the device-specific library lib<MCU>.a.\n \n nodevicespecs\n-Driver Target Report RejectNegative\n+Driver Target RejectNegative\n Do not use the device-specific specs file device-specs/specs-<MCU>.\n \n Enum"}, {"sha": "cf5ba80bc2413e1c15939ddaa443a0ceb55d90e8", "filename": "gcc/config/bfin/bfin.opt", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -44,28 +44,28 @@ Target RejectNegative Joined\n Specify the name of the target CPU.\n \n momit-leaf-frame-pointer\n-Target Report Mask(OMIT_LEAF_FRAME_POINTER)\n+Target Mask(OMIT_LEAF_FRAME_POINTER)\n Omit frame pointer for leaf functions.\n \n mlow64k\n-Target Report Mask(LOW_64K)\n+Target Mask(LOW_64K)\n Program is entirely located in low 64k of memory.\n \n mcsync-anomaly\n-Target Report Var(bfin_csync_anomaly) Init(-1)\n+Target Var(bfin_csync_anomaly) Init(-1)\n Work around a hardware anomaly by adding a number of NOPs before a\n CSYNC or SSYNC instruction.\n \n mspecld-anomaly\n-Target Report Var(bfin_specld_anomaly) Init(-1)\n+Target Var(bfin_specld_anomaly) Init(-1)\n Avoid speculative loads to work around a hardware anomaly.\n \n mid-shared-library\n-Target Report Mask(ID_SHARED_LIBRARY)\n+Target Mask(ID_SHARED_LIBRARY)\n Enabled ID based shared library.\n \n mleaf-id-shared-library\n-Target Report Mask(LEAF_ID_SHARED_LIBRARY)\n+Target Mask(LEAF_ID_SHARED_LIBRARY)\n Generate code that won't be linked against any other ID shared libraries,\n but may be used as a shared library.\n \n@@ -74,45 +74,45 @@ Target RejectNegative Joined UInteger Var(bfin_library_id)\n ID of shared library to build.\n \n msep-data\n-Target Report Mask(SEP_DATA)\n+Target Mask(SEP_DATA)\n Enable separate data segment.\n \n mlong-calls\n-Target Report Mask(LONG_CALLS)\n+Target Mask(LONG_CALLS)\n Avoid generating pc-relative calls; use indirection.\n \n mfast-fp\n-Target Report Mask(FAST_FP)\n+Target Mask(FAST_FP)\n Link with the fast floating-point library.\n \n mfdpic\n-Target Report Mask(FDPIC)\n+Target Mask(FDPIC)\n Enable Function Descriptor PIC mode.\n \n minline-plt\n-Target Report Mask(INLINE_PLT)\n+Target Mask(INLINE_PLT)\n Enable inlining of PLT in function calls.\n \n mstack-check-l1\n-Target Report Mask(STACK_CHECK_L1)\n+Target Mask(STACK_CHECK_L1)\n Do stack checking using bounds in L1 scratch memory.\n \n mmulticore\n-Target Report Mask(MULTICORE)\n+Target Mask(MULTICORE)\n Enable multicore support.\n \n mcorea\n-Target Report Mask(COREA)\n+Target Mask(COREA)\n Build for Core A.\n \n mcoreb\n-Target Report Mask(COREB)\n+Target Mask(COREB)\n Build for Core B.\n \n msdram\n-Target Report Mask(SDRAM)\n+Target Mask(SDRAM)\n Build for SDRAM.\n \n micplb\n-Target Report Mask(ICPLB)\n+Target Mask(ICPLB)\n Assume ICPLBs are enabled at runtime."}, {"sha": "1782718f2f3cc139f59a72c33b4cf9c4d78380d3", "filename": "gcc/config/bpf/bpf.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fbpf%2Fbpf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fbpf%2Fbpf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -111,17 +111,17 @@ Enum(bpf_kernel) String(5.2) Value(LINUX_V5_2)\n ; Use xBPF extensions.\n \n mxbpf\n-Target Report Mask(XBPF)\n+Target Mask(XBPF)\n Generate xBPF.\n \n ; Selecting big endian or little endian targets.\n \n mbig-endian\n-Target RejectNegative Report Mask(BIG_ENDIAN)\n+Target RejectNegative Mask(BIG_ENDIAN)\n Generate big-endian eBPF.\n \n mlittle-endian\n-Target RejectNegative Report InverseMask(BIG_ENDIAN)\n+Target RejectNegative InverseMask(BIG_ENDIAN)\n Generate little-endian eBPF.\n \n mframe-limit="}, {"sha": "d0042fa467fd453d1dacf8b21511204be5dbfd2e", "filename": "gcc/config/c6x/c6x.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fc6x%2Fc6x.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fc6x%2Fc6x.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -26,11 +26,11 @@ SourceInclude\n config/c6x/c6x-opts.h\n \n mbig-endian\n-Target Report RejectNegative Mask(BIG_ENDIAN)\n+Target RejectNegative Mask(BIG_ENDIAN)\n Use big-endian byte order.\n \n mlittle-endian\n-Target Report RejectNegative InverseMask(BIG_ENDIAN, LITTLE_ENDIAN)\n+Target RejectNegative InverseMask(BIG_ENDIAN, LITTLE_ENDIAN)\n Use little-endian byte order.\n \n msim\n@@ -59,7 +59,7 @@ Target Mask(DSBT)\n Compile for the DSBT shared library ABI.\n \n mlong-calls\n-Target Report Mask(LONG_CALLS)\n+Target Mask(LONG_CALLS)\n Avoid generating pc-relative calls; use indirection.\n \n march="}, {"sha": "1d2a6a121310ab8b95909bad8514ad95ca543742", "filename": "gcc/config/cr16/cr16.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fcr16%2Fcr16.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fcr16%2Fcr16.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -23,11 +23,11 @@ Target\n Use simulator runtime.\n \n mbit-ops\n-Target Report Mask(BIT_OPS)\n+Target Mask(BIT_OPS)\n Generate SBIT, CBIT instructions.\n \n mmac\n-Target Report Mask(MAC)\n+Target Mask(MAC)\n Support multiply accumulate instructions.\n \n mdebug-addr"}, {"sha": "f1f66e76639c011dcacad942b81f4a5d5f8d3cc3", "filename": "gcc/config/cris/cris.opt", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fcris%2Fcris.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fcris%2Fcris.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -41,111 +41,111 @@\n ; driver-like program that gets a mapping of I/O registers (all\n ; on the same page, including the TLB registers).\n mmul-bug-workaround\n-Target Report Mask(MUL_BUG)\n+Target Mask(MUL_BUG)\n Work around bug in multiplication instruction.\n \n ; TARGET_ETRAX4_ADD: Instruction-set additions from Etrax 4 and up.\n ; (Just \"lz\".)\n metrax4\n-Target Report Mask(ETRAX4_ADD)\n+Target Mask(ETRAX4_ADD)\n Compile for ETRAX 4 (CRIS v3).\n \n ; See cris_handle_option.\n metrax100\n-Target Report RejectNegative\n+Target RejectNegative\n Compile for ETRAX 100 (CRIS v8).\n \n ; See cris_handle_option.\n mno-etrax100\n-Target Report RejectNegative Undocumented\n+Target RejectNegative Undocumented\n \n mpdebug\n-Target Report Mask(PDEBUG)\n+Target Mask(PDEBUG)\n Emit verbose debug information in assembly code.\n \n ; TARGET_CCINIT: Whether to use condition-codes generated by\n ; insns other than the immediately preceding compare/test insn.\n ; Used to check for errors in notice_update_cc.\n mcc-init\n-Target Report Mask(CCINIT)\n+Target Mask(CCINIT)\n Do not use condition codes from normal instructions.\n \n ; TARGET_SIDE_EFFECT_PREFIXES: Whether to use side-effect\n ; patterns.  Used to debug the [rx=ry+i] type patterns.\n mside-effects\n-Target Report RejectNegative Mask(SIDE_EFFECT_PREFIXES) Undocumented\n+Target RejectNegative Mask(SIDE_EFFECT_PREFIXES) Undocumented\n \n mno-side-effects\n-Target Report RejectNegative InverseMask(SIDE_EFFECT_PREFIXES)\n+Target RejectNegative InverseMask(SIDE_EFFECT_PREFIXES)\n Do not emit addressing modes with side-effect assignment.\n \n ; TARGET_STACK_ALIGN: Whether to *keep* (not force) alignment of\n ; stack at 16 (or 32, depending on TARGET_ALIGN_BY_32) bits.\n mstack-align\n-Target Report RejectNegative Mask(STACK_ALIGN) Undocumented\n+Target RejectNegative Mask(STACK_ALIGN) Undocumented\n \n mno-stack-align\n-Target Report RejectNegative InverseMask(STACK_ALIGN)\n+Target RejectNegative InverseMask(STACK_ALIGN)\n Do not tune stack alignment.\n \n ; TARGET_DATA_ALIGN: Whether to do alignment on individual\n ; modifiable objects.\n mdata-align\n-Target Report RejectNegative Mask(DATA_ALIGN) Undocumented\n+Target RejectNegative Mask(DATA_ALIGN) Undocumented\n \n mno-data-align\n-Target Report RejectNegative InverseMask(DATA_ALIGN)\n+Target RejectNegative InverseMask(DATA_ALIGN)\n Do not tune writable data alignment.\n \n ; TARGET_CONST_ALIGN: Whether to do alignment on individual\n ; non-modifiable objects.\n mconst-align\n-Target Report RejectNegative Mask(CONST_ALIGN) Undocumented\n+Target RejectNegative Mask(CONST_ALIGN) Undocumented\n \n mno-const-align\n-Target Report RejectNegative InverseMask(CONST_ALIGN)\n+Target RejectNegative InverseMask(CONST_ALIGN)\n Do not tune code and read-only data alignment.\n \n ; See cris_handle_option.\n m32-bit\n-Target Report RejectNegative Undocumented\n+Target RejectNegative Undocumented\n \n ; See cris_handle_option.\n m32bit\n-Target Report RejectNegative\n+Target RejectNegative\n Align code and data to 32 bits.\n \n ; See cris_handle_option.\n m16-bit\n-Target Report RejectNegative Undocumented\n+Target RejectNegative Undocumented\n \n ; See cris_handle_option.\n m16bit\n-Target Report RejectNegative Undocumented\n+Target RejectNegative Undocumented\n \n ; See cris_handle_option.\n m8-bit\n-Target Report RejectNegative Undocumented\n+Target RejectNegative Undocumented\n \n ; See cris_handle_option.\n m8bit\n-Target Report RejectNegative\n+Target RejectNegative\n Don't align items in code or data.\n \n ; TARGET_PROLOGUE_EPILOGUE: Whether or not to omit function\n ; prologue and epilogue.\n mprologue-epilogue\n-Target Report RejectNegative Mask(PROLOGUE_EPILOGUE) Undocumented\n+Target RejectNegative Mask(PROLOGUE_EPILOGUE) Undocumented\n \n mno-prologue-epilogue\n-Target Report RejectNegative InverseMask(PROLOGUE_EPILOGUE)\n+Target RejectNegative InverseMask(PROLOGUE_EPILOGUE)\n Do not emit function prologue or epilogue.\n \n ; We have to handle this m-option here since we can't wash it\n ; off in both CC1_SPEC and CC1PLUS_SPEC.\n \n mbest-lib-options\n-Target Report RejectNegative\n+Target RejectNegative\n Use the most feature-enabling options allowed by other options.\n \n ; FIXME: The following comment relates to gcc before cris.opt.\n@@ -154,37 +154,37 @@ Use the most feature-enabling options allowed by other options.\n ; gcc.c to forget it, if there's a \"later\" -mbest-lib-options.\n ; Kludgy, but needed for some multilibbed files.\n moverride-best-lib-options\n-Target Report RejectNegative\n+Target RejectNegative\n Override -mbest-lib-options.\n \n mcpu=\n-Target Report RejectNegative Joined Undocumented Var(cris_cpu_str)\n+Target RejectNegative Joined Undocumented Var(cris_cpu_str)\n \n march=\n-Target Report RejectNegative Joined Var(cris_cpu_str)\n+Target RejectNegative Joined Var(cris_cpu_str)\n -march=ARCH\tGenerate code for the specified chip or CPU version.\n \n mtune=\n-Target Report RejectNegative Joined Var(cris_tune_str)\n+Target RejectNegative Joined Var(cris_tune_str)\n -mtune=ARCH\tTune alignment for the specified chip or CPU version.\n \n mmax-stackframe=\n-Target Report RejectNegative Joined Var(cris_max_stackframe_str)\n+Target RejectNegative Joined Var(cris_max_stackframe_str)\n -mmax-stackframe=SIZE\tWarn when a stackframe is larger than the specified size.\n \n max-stackframe=\n-Target Report RejectNegative Joined Undocumented Var(cris_max_stackframe_str)\n+Target RejectNegative Joined Undocumented Var(cris_max_stackframe_str)\n \n mtrap-using-break8\n-Target Report Var(cris_trap_using_break8) Init(2)\n+Target Var(cris_trap_using_break8) Init(2)\n Emit traps as \\\"break 8\\\", default for CRIS v3 and up.  If disabled, calls to abort() are used.\n \n mtrap-unaligned-atomic\n-Target Report Var(cris_trap_unaligned_atomic) Init(2)\n+Target Var(cris_trap_unaligned_atomic) Init(2)\n Emit checks causing \\\"break 8\\\" instructions to execute when applying atomic builtins on misaligned memory.\n \n munaligned-atomic-may-use-library\n-Target Report Var(cris_atomics_calling_libfunc) Init(2)\n+Target Var(cris_atomics_calling_libfunc) Init(2)\n Handle atomic builtins that may be applied to unaligned data by calling library functions. Overrides -mtrap-unaligned-atomic.\n \n ; TARGET_SVINTO: Currently this just affects alignment.  FIXME:"}, {"sha": "f32b0c6bcf9b24cd4317bf07efc38159e20ec0c7", "filename": "gcc/config/cris/elf.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fcris%2Felf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fcris%2Felf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Felf.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,7 +19,7 @@\n ; <http://www.gnu.org/licenses/>.\n \n melf\n-Target Report RejectNegative Undocumented\n+Target RejectNegative Undocumented\n \n sim\n Driver JoinedOrMissing"}, {"sha": "d5fbbdcd6c16ceaa3251424a91f561ed194a1905", "filename": "gcc/config/csky/csky.opt", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fcsky%2Fcsky.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fcsky%2Fcsky.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -27,7 +27,7 @@ config/csky/csky_opts.h\n \n ; For backward compatibility only.\n march=ck803s\n-Target Report Var(flag_arch_ck803s) Undocumented\n+Target Var(flag_arch_ck803s) Undocumented\n \n march=\n Target RejectNegative ToLower Joined Enum(csky_arch) Var(csky_arch_option) Save\n@@ -40,18 +40,18 @@ Specify the target processor.\n ;; Endianness options.\n \n mbig-endian\n-Target RejectNegative Report Mask(BIG_ENDIAN)\n+Target RejectNegative Mask(BIG_ENDIAN)\n Generate big-endian code.\n \n EB\n-Target RejectNegative Report Alias(mbig-endian) Undocumented\n+Target RejectNegative Alias(mbig-endian) Undocumented\n \n mlittle-endian\n-Target RejectNegative Report InverseMask(BIG_ENDIAN)\n+Target RejectNegative InverseMask(BIG_ENDIAN)\n Generate little-endian code.\n \n EL\n-Target RejectNegative Report Alias(mlittle-endian) Undocumented\n+Target RejectNegative Alias(mlittle-endian) Undocumented\n \n ;; Floating point options.  These affect code generation but not\n ;; assembly.\n@@ -90,107 +90,107 @@ Target RejectNegative Joined Enum(csky_fpu) Var(csky_fpu_index) Init(TARGET_FPU_\n Specify the target floating-point hardware/format.\n \n mdouble-float\n-Target Report Var(TARGET_DOUBLE_FLOAT) Init(-1)\n+Target Var(TARGET_DOUBLE_FLOAT) Init(-1)\n Generate C-SKY FPU double float instructions (default for hard float).\n \n mfdivdu\n-Target Report Var(TARGET_FDIVDU) Init(-1)\n+Target Var(TARGET_FDIVDU) Init(-1)\n Generate frecipd/fsqrtd/fdivd instructions (default for hard float).\n \n ;; Instruction set extensions.  Most of these don't affect code\n ;; generation, and are passed through to the assembler.\n ;; There are builtin preprocessor defines for each of these.\n \n melrw\n-Target Report Var(TARGET_ELRW) Init(-1)\n+Target Var(TARGET_ELRW) Init(-1)\n Enable the extended LRW instruction (default for CK801).\n \n mistack\n-Target Report Mask(ISTACK)\n+Target Mask(ISTACK)\n Enable interrupt stack instructions.\n \n mmp\n-Target Report RejectNegative Mask(MP)\n+Target RejectNegative Mask(MP)\n Enable multiprocessor instructions.\n \n mcp\n-Target Report RejectNegative Mask(CP)\n+Target RejectNegative Mask(CP)\n Enable coprocessor instructions.\n \n mcache\n-Target Report RejectNegative Mask(CACHE)\n+Target RejectNegative Mask(CACHE)\n Enable cache prefetch instructions.\n \n msecurity\n-Target Report RejectNegative Mask(SECURITY)\n+Target RejectNegative Mask(SECURITY)\n Enable C-SKY SECURE instructions.\n \n mmac\n-Target Report RejectNegative Alias(msecurity) Undocumented\n+Target RejectNegative Alias(msecurity) Undocumented\n \n mtrust\n-Target Report RejectNegative Mask(TRUST)\n+Target RejectNegative Mask(TRUST)\n Enable C-SKY TRUST instructions.\n \n mdsp\n-Target Report RejectNegative Var(TARGET_DSP)\n+Target RejectNegative Var(TARGET_DSP)\n Enable C-SKY DSP instructions.\n \n medsp\n-Target Report RejectNegative Mask(EDSP)\n+Target RejectNegative Mask(EDSP)\n Enable C-SKY Enhanced DSP instructions.\n \n mvdsp\n-Target Report RejectNegative Mask(VDSP)\n+Target RejectNegative Mask(VDSP)\n Enable C-SKY Vector DSP instructions.\n \n ;; Code generation options not passed to the assembler.\n \n mdiv\n-Target Report Var(TARGET_DIV) Init(-1)\n+Target Var(TARGET_DIV) Init(-1)\n Generate divide instructions.\n \n msmart\n-Target Report Var(TARGET_MINI_REGISTERS) Init(-1)\n+Target Var(TARGET_MINI_REGISTERS) Init(-1)\n Generate code for Smart Mode.\n \n mhigh-registers\n-Target Report Var(TARGET_HIGH_REGISTERS) Init(-1)\n+Target Var(TARGET_HIGH_REGISTERS) Init(-1)\n Enable use of R16-R31 (default).\n \n manchor\n-Target Report Var(TARGET_ANCHOR)\n+Target Var(TARGET_ANCHOR)\n Generate code using global anchor symbol addresses.\n \n mpushpop\n-Target Report Var(TARGET_PUSHPOP) Init(1)\n+Target Var(TARGET_PUSHPOP) Init(1)\n Generate push/pop instructions (default).\n \n mmultiple-stld\n-Target Report Var(TARGET_MULTIPLE_STLD) Init(-1)\n+Target Var(TARGET_MULTIPLE_STLD) Init(-1)\n Generate stm/ldm instructions (default).\n \n mstm\n-Target Report Alias(mmultiple-stld) Undocumented\n+Target Alias(mmultiple-stld) Undocumented\n \n mconstpool\n-Target Report Var(TARGET_CONSTANT_POOL) Init(-1)\n+Target Var(TARGET_CONSTANT_POOL) Init(-1)\n Generate constant pools in the compiler instead of assembler.\n \n mstack-size\n-Target Report Var(TARGET_STACK_SIZE) Init(0)\n+Target Var(TARGET_STACK_SIZE) Init(0)\n Emit .stack_size directives.\n \n mccrt\n-Target Report Var(TARGET_LIBCCRT) Init(0)\n+Target Var(TARGET_LIBCCRT) Init(0)\n Generate code for C-SKY compiler runtime instead of libgcc.\n \n mbranch-cost=\n-Target Report Joined RejectNegative UInteger Var(csky_branch_cost) Init(1)\n+Target Joined RejectNegative UInteger Var(csky_branch_cost) Init(1)\n Set the branch costs to roughly the specified number of instructions.\n \n msched-prolog\n-Target Report Var(flag_sched_prolog) Init(0)\n+Target Var(flag_sched_prolog) Init(0)\n Permit scheduling of function prologue and epilogue sequences.\n \n msim"}, {"sha": "aa4dea2f8dd9429a0e4c392dfe28fe0977c664af", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -30,61 +30,61 @@ dependency-file\n C ObjC C++ ObjC++ Separate Alias(MF) MissingArgError(missing filename after %qs)\n \n fapple-kext\n-Target Report C++ Var(flag_apple_kext)\n+Target C++ Var(flag_apple_kext)\n Generate code for darwin loadable kernel extensions.\n \n iframework\n Target RejectNegative C ObjC C++ ObjC++ Joined Separate\n -iframework <dir>\tAdd <dir> to the end of the system framework include path.\n \n mconstant-cfstrings\n-Target Report Var(darwin_constant_cfstrings) Init(1)\n+Target Var(darwin_constant_cfstrings) Init(1)\n Generate compile-time CFString objects.\n \n Wnonportable-cfstrings\n-Target Report Var(darwin_warn_nonportable_cfstrings) Init(1) Warning\n+Target Var(darwin_warn_nonportable_cfstrings) Init(1) Warning\n Warn if constant CFString objects contain non-portable characters.\n \n ; Use new-style pic stubs if this is true, x86 only so far.\n matt-stubs\n-Target Report Var(darwin_macho_att_stub) Init(1)\n+Target Var(darwin_macho_att_stub) Init(1)\n Generate AT&T-style stubs for Mach-O.\n \n mdynamic-no-pic\n-Target Common Report Mask(MACHO_DYNAMIC_NO_PIC)\n+Target Common Mask(MACHO_DYNAMIC_NO_PIC)\n Generate code suitable for executables (NOT shared libs).\n \n mfix-and-continue\n-Target Report Var(darwin_fix_and_continue)\n+Target Var(darwin_fix_and_continue)\n Generate code suitable for fast turn around debugging.\n \n mkernel\n-Target Report Var(flag_mkernel)\n+Target Var(flag_mkernel)\n Generate code for the kernel or loadable kernel extensions.\n \n ; The Init here is for the convenience of GCC developers, so that cc1\n ; and cc1plus don't crash if no -mmacosx-version-min is passed.  The\n ; driver will always pass a -mmacosx-version-min, so in normal use the\n ; Init is never used.\n mmacosx-version-min=\n-Target RejectNegative Joined Report Var(darwin_macosx_version_min) Init(DEF_MIN_OSX_VERSION)\n+Target RejectNegative Joined Var(darwin_macosx_version_min) Init(DEF_MIN_OSX_VERSION)\n The earliest macOS version on which this program will run.\n \n ; Really, only relevant to PowerPC which has a 4 byte bool by default.\n mone-byte-bool\n-Target RejectNegative Report Var(darwin_one_byte_bool)\n+Target RejectNegative Var(darwin_one_byte_bool)\n Set sizeof(bool) to 1.\n \n msymbol-stubs\n-Target Report Var(darwin_symbol_stubs) Init(0)\n+Target Var(darwin_symbol_stubs) Init(0)\n Force generation of external symbol indirection stubs.\n \n ; Some code-gen may be improved / adjusted if the linker is sufficiently modern.\n mtarget-linker=\n-Target RejectNegative Joined Report Alias(mtarget-linker)\n+Target RejectNegative Joined Alias(mtarget-linker)\n \n mtarget-linker\n-Target RejectNegative Joined Separate Report Var(darwin_target_linker) Init(LD64_VERSION)\n+Target RejectNegative Joined Separate Var(darwin_target_linker) Init(LD64_VERSION)\n -mtarget-linker <version>\tSpecify that ld64 <version> is the toolchain linker for the current invocation.\n \n ; Driver options."}, {"sha": "5178b0c006e8e884a73700a139cbc9eef4aa182c", "filename": "gcc/config/fr30/fr30.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Ffr30%2Ffr30.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Ffr30%2Ffr30.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,7 +19,7 @@\n ; <http://www.gnu.org/licenses/>.\n \n msmall-model\n-Target Report Mask(SMALL_MODEL)\n+Target Mask(SMALL_MODEL)\n Assume small address space.\n \n mno-lsim"}, {"sha": "f75f2ea84c8c374ac5cbf8348018f5f754aacfdd", "filename": "gcc/config/frv/frv.opt", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Ffrv%2Ffrv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Ffrv%2Ffrv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -26,19 +26,19 @@ Variable\n frv_cpu_t frv_cpu_type = CPU_TYPE\n \n macc-4\n-Target Report RejectNegative Mask(ACC_4)\n+Target RejectNegative Mask(ACC_4)\n Use 4 media accumulators.\n \n macc-8\n-Target Report RejectNegative InverseMask(ACC_4, ACC_8)\n+Target RejectNegative InverseMask(ACC_4, ACC_8)\n Use 8 media accumulators.\n \n malign-labels\n-Target Report Mask(ALIGN_LABELS)\n+Target Mask(ALIGN_LABELS)\n Enable label alignment optimizations.\n \n malloc-cc\n-Target Report RejectNegative Mask(ALLOC_CC)\n+Target RejectNegative Mask(ALLOC_CC)\n Dynamically allocate cc registers.\n \n ; We used to default the branch cost to 2, but it was changed it to 1 to avoid\n@@ -49,7 +49,7 @@ Target RejectNegative Joined UInteger Var(frv_branch_cost_int) Init(1)\n Set the cost of branches.\n \n mcond-exec\n-Target Report Mask(COND_EXEC)\n+Target Mask(COND_EXEC)\n Enable conditional execution other than moves/scc.\n \n mcond-exec-insns=\n@@ -61,7 +61,7 @@ Target RejectNegative Joined UInteger Var(frv_condexec_temps) Init(4)\n Change the number of temporary registers that are available to conditionally-executed sequences.\n \n mcond-move\n-Target Report Mask(COND_MOVE)\n+Target Mask(COND_MOVE)\n Enable conditional moves.\n \n mcpu=\n@@ -118,75 +118,75 @@ mdebug-stack\n Target Undocumented Var(TARGET_DEBUG_STACK)\n \n mdouble\n-Target Report Mask(DOUBLE)\n+Target Mask(DOUBLE)\n Use fp double instructions.\n \n mdword\n-Target Report Mask(DWORD)\n+Target Mask(DWORD)\n Change the ABI to allow double word insns.\n \n mfdpic\n-Target Report Mask(FDPIC)\n+Target Mask(FDPIC)\n Enable Function Descriptor PIC mode.\n \n mfixed-cc\n-Target Report RejectNegative InverseMask(ALLOC_CC, FIXED_CC)\n+Target RejectNegative InverseMask(ALLOC_CC, FIXED_CC)\n Just use icc0/fcc0.\n \n mfpr-32\n-Target Report RejectNegative Mask(FPR_32)\n+Target RejectNegative Mask(FPR_32)\n Only use 32 FPRs.\n \n mfpr-64\n-Target Report RejectNegative InverseMask(FPR_32, FPR_64)\n+Target RejectNegative InverseMask(FPR_32, FPR_64)\n Use 64 FPRs.\n \n mgpr-32\n-Target Report RejectNegative Mask(GPR_32)\n+Target RejectNegative Mask(GPR_32)\n Only use 32 GPRs.\n \n mgpr-64\n-Target Report RejectNegative InverseMask(GPR_32, GPR_64)\n+Target RejectNegative InverseMask(GPR_32, GPR_64)\n Use 64 GPRs.\n \n mgprel-ro\n-Target Report Mask(GPREL_RO)\n+Target Mask(GPREL_RO)\n Enable use of GPREL for read-only data in FDPIC.\n \n mhard-float\n-Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)\n+Target RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)\n Use hardware floating point.\n \n minline-plt\n-Target Report Mask(INLINE_PLT)\n+Target Mask(INLINE_PLT)\n Enable inlining of PLT in function calls.\n \n mlibrary-pic\n-Target Report Mask(LIBPIC)\n+Target Mask(LIBPIC)\n Enable PIC support for building libraries.\n \n mlinked-fp\n-Target Report Mask(LINKED_FP)\n+Target Mask(LINKED_FP)\n Follow the EABI linkage requirements.\n \n mlong-calls\n-Target Report Mask(LONG_CALLS)\n+Target Mask(LONG_CALLS)\n Disallow direct calls to global functions.\n \n mmedia\n-Target Report Mask(MEDIA)\n+Target Mask(MEDIA)\n Use media instructions.\n \n mmuladd\n-Target Report Mask(MULADD)\n+Target Mask(MULADD)\n Use multiply add/subtract instructions.\n \n mmulti-cond-exec\n-Target Report Mask(MULTI_CE)\n+Target Mask(MULTI_CE)\n Enable optimizing &&/|| in conditional execution.\n \n mnested-cond-exec\n-Target Report Mask(NESTED_CE)\n+Target Mask(NESTED_CE)\n Enable nested conditional execution optimizations.\n \n ; Not used by the compiler proper.\n@@ -195,31 +195,31 @@ Target RejectNegative\n Do not mark ABI switches in e_flags.\n \n moptimize-membar\n-Target Report Mask(OPTIMIZE_MEMBAR)\n+Target Mask(OPTIMIZE_MEMBAR)\n Remove redundant membars.\n \n mpack\n-Target Report Mask(PACK)\n+Target Mask(PACK)\n Pack VLIW instructions.\n \n mscc\n-Target Report Mask(SCC)\n+Target Mask(SCC)\n Enable setting GPRs to the result of comparisons.\n \n msched-lookahead=\n Target RejectNegative Joined UInteger Var(frv_sched_lookahead) Init(4)\n Change the amount of scheduler lookahead.\n \n msoft-float\n-Target Report RejectNegative Mask(SOFT_FLOAT)\n+Target RejectNegative Mask(SOFT_FLOAT)\n Use software floating point.\n \n mTLS\n-Target Report RejectNegative Mask(BIG_TLS)\n+Target RejectNegative Mask(BIG_TLS)\n Assume a large TLS segment.\n \n mtls\n-Target Report RejectNegative InverseMask(BIG_TLS)\n+Target RejectNegative InverseMask(BIG_TLS)\n Do not assume a large TLS segment.\n \n ; Not used by the compiler proper.\n@@ -233,5 +233,5 @@ Target RejectNegative\n Link with the library-pic libraries.\n \n mvliw-branch\n-Target Report Mask(VLIW_BRANCH)\n+Target Mask(VLIW_BRANCH)\n Allow branches to be packed with other instructions."}, {"sha": "0283037277af7b562a55953f18963377a781ef1a", "filename": "gcc/config/ft32/ft32.opt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fft32%2Fft32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fft32%2Fft32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,25 +19,25 @@\n ; <http://www.gnu.org/licenses/>.\n \n msim\n-Target Report Mask(SIM)\n+Target Mask(SIM)\n Target the software simulator.\n \n mlra\n-Target Report Var(ft32_lra_flag) Init(0) Save\n+Target Var(ft32_lra_flag) Init(0) Save\n Use LRA instead of reload.\n \n mnodiv\n-Target Report Mask(NODIV)\n+Target Mask(NODIV)\n Avoid use of the DIV and MOD instructions.\n \n mft32b\n-Target Report Mask(FT32B)\n+Target Mask(FT32B)\n Target the FT32B architecture.\n \n mcompress\n-Target Report Mask(COMPRESS)\n+Target Mask(COMPRESS)\n Enable FT32B code compression.\n \n mnopm\n-Target Report Mask(NOPM)\n+Target Mask(NOPM)\n Avoid placing any readable data in program memory."}, {"sha": "a0d791f1c33e7fdec421f302e17adb6eaa20878d", "filename": "gcc/config/gcn/gcn.opt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fgcn%2Fgcn.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fgcn%2Fgcn.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -43,31 +43,31 @@ Target RejectNegative Joined ToLower Enum(gpu_type) Var(gcn_tune) Init(PROCESSOR\n Specify the name of the target GPU.\n \n m32\n-Target Report RejectNegative InverseMask(ABI64)\n+Target RejectNegative InverseMask(ABI64)\n Generate code for a 32-bit ABI.\n \n m64\n-Target Report RejectNegative Mask(ABI64)\n+Target RejectNegative Mask(ABI64)\n Generate code for a 64-bit ABI.\n \n mgomp\n-Target Report RejectNegative\n+Target RejectNegative\n Enable OpenMP GPU offloading.\n \n bool flag_bypass_init_error = false\n \n mbypass-init-error\n-Target Report RejectNegative Var(flag_bypass_init_error)\n+Target RejectNegative Var(flag_bypass_init_error)\n \n bool flag_worker_partitioning = false\n \n macc-experimental-workers\n-Target Report Var(flag_worker_partitioning) Init(0)\n+Target Var(flag_worker_partitioning) Init(0)\n \n int stack_size_opt = -1\n \n mstack-size=\n-Target Report RejectNegative Joined UInteger Var(stack_size_opt) Init(-1)\n+Target RejectNegative Joined UInteger Var(stack_size_opt) Init(-1)\n -mstack-size=<number>\tSet the private segment size per wave-front, in bytes.\n \n Wopenacc-dims"}, {"sha": "f9d6d97665402a5af67fbec23944b1c6e9af8e5d", "filename": "gcc/config/i386/cygming.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fi386%2Fcygming.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fi386%2Fcygming.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -27,7 +27,7 @@ Target RejectNegative\n Generate code for a DLL.\n \n mnop-fun-dllimport\n-Target Report Var(TARGET_NOP_FUN_DLLIMPORT)\n+Target Var(TARGET_NOP_FUN_DLLIMPORT)\n Ignore dllimport for functions.\n \n mthreads\n@@ -51,14 +51,14 @@ Target Condition({defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS)})\n Compile code that relies on Cygwin DLL wrappers to support C++ operator new/delete replacement.\n \n fset-stack-executable\n-Common Report Var(flag_setstackexecutable) Init(1) Optimization\n+Common Var(flag_setstackexecutable) Init(1) Optimization\n For nested functions on stack executable permission is set.\n \n posix\n Driver\n \n fwritable-relocated-rdata\n-Common Report Var(flag_writable_rel_rdata) Init(0)\n+Common Var(flag_writable_rel_rdata) Init(0)\n Put relocated read-only data into .data section.\n \n ; Retain blank line above"}, {"sha": "be3a6cd50cd08fa97711b0d4c46a77f3527908cc", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 152, "deletions": 152, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -194,35 +194,35 @@ enum ix86_veclibabi x_ix86_veclibabi_type\n \n ;; x86 options\n m128bit-long-double\n-Target RejectNegative Report Mask(128BIT_LONG_DOUBLE) Save\n+Target RejectNegative Mask(128BIT_LONG_DOUBLE) Save\n sizeof(long double) is 16.\n \n m80387\n-Target Report Mask(80387) Save\n+Target Mask(80387) Save\n Use hardware fp.\n \n m96bit-long-double\n-Target RejectNegative Report InverseMask(128BIT_LONG_DOUBLE) Save\n+Target RejectNegative InverseMask(128BIT_LONG_DOUBLE) Save\n sizeof(long double) is 12.\n \n mlong-double-80\n-Target Report RejectNegative Negative(mlong-double-64) InverseMask(LONG_DOUBLE_64) Save\n+Target RejectNegative Negative(mlong-double-64) InverseMask(LONG_DOUBLE_64) Save\n Use 80-bit long double.\n \n mlong-double-64\n-Target Report RejectNegative Negative(mlong-double-128) Mask(LONG_DOUBLE_64) InverseMask(LONG_DOUBLE_128) Save\n+Target RejectNegative Negative(mlong-double-128) Mask(LONG_DOUBLE_64) InverseMask(LONG_DOUBLE_128) Save\n Use 64-bit long double.\n \n mlong-double-128\n-Target Report RejectNegative Negative(mlong-double-80) Mask(LONG_DOUBLE_128) InverseMask(LONG_DOUBLE_64) Save\n+Target RejectNegative Negative(mlong-double-80) Mask(LONG_DOUBLE_128) InverseMask(LONG_DOUBLE_64) Save\n Use 128-bit long double.\n \n maccumulate-outgoing-args\n-Target Report Mask(ACCUMULATE_OUTGOING_ARGS) Save\n+Target Mask(ACCUMULATE_OUTGOING_ARGS) Save\n Reserve space for outgoing arguments in the function prologue.\n \n malign-double\n-Target Report Mask(ALIGN_DOUBLE) Save\n+Target Mask(ALIGN_DOUBLE) Save\n Align some doubles on dword boundary.\n \n malign-functions=\n@@ -238,7 +238,7 @@ Target RejectNegative Joined UInteger\n Loop code aligned to this power of 2.\n \n malign-stringops\n-Target RejectNegative Report InverseMask(NO_ALIGN_STRINGOPS, ALIGN_STRINGOPS) Save\n+Target RejectNegative InverseMask(NO_ALIGN_STRINGOPS, ALIGN_STRINGOPS) Save\n Align destination of the string operations.\n \n malign-data=\n@@ -325,15 +325,15 @@ mcpu=\n Target RejectNegative Joined Undocumented Alias(mtune=) Warn(%<-mcpu=%> is deprecated; use %<-mtune=%> or %<-march=%> instead)\n \n mfancy-math-387\n-Target RejectNegative Report InverseMask(NO_FANCY_MATH_387, USE_FANCY_MATH_387) Save\n+Target RejectNegative InverseMask(NO_FANCY_MATH_387, USE_FANCY_MATH_387) Save\n Generate sin, cos, sqrt for FPU.\n \n mforce-drap\n-Target Report Var(ix86_force_drap)\n+Target Var(ix86_force_drap)\n Always use Dynamic Realigned Argument Pointer (DRAP) to realign stack.\n \n mfp-ret-in-387\n-Target Report Mask(FLOAT_RETURNS) Save\n+Target Mask(FLOAT_RETURNS) Save\n Return values of functions in FPU registers.\n \n mfpmath=\n@@ -370,50 +370,50 @@ Target RejectNegative Mask(80387) Save\n Use hardware fp.\n \n mieee-fp\n-Target Report Mask(IEEE_FP) Save\n+Target Mask(IEEE_FP) Save\n Use IEEE math for fp comparisons.\n \n minline-all-stringops\n-Target Report Mask(INLINE_ALL_STRINGOPS) Save\n+Target Mask(INLINE_ALL_STRINGOPS) Save\n Inline all known string operations.\n \n minline-stringops-dynamically\n-Target Report Mask(INLINE_STRINGOPS_DYNAMICALLY) Save\n+Target Mask(INLINE_STRINGOPS_DYNAMICALLY) Save\n Inline memset/memcpy string operations, but perform inline version only for small blocks.\n \n mintel-syntax\n Target Undocumented Alias(masm=, intel, att) Warn(%<-mintel-syntax%> and %<-mno-intel-syntax%> are deprecated; use %<-masm=intel%> and %<-masm=att%> instead)\n \n mms-bitfields\n-Target Report Mask(MS_BITFIELD_LAYOUT) Save\n+Target Mask(MS_BITFIELD_LAYOUT) Save\n Use native (MS) bitfield layout.\n \n mno-align-stringops\n-Target RejectNegative Report Mask(NO_ALIGN_STRINGOPS) Undocumented Save\n+Target RejectNegative Mask(NO_ALIGN_STRINGOPS) Undocumented Save\n \n mno-fancy-math-387\n-Target RejectNegative Report Mask(NO_FANCY_MATH_387) Undocumented Save\n+Target RejectNegative Mask(NO_FANCY_MATH_387) Undocumented Save\n \n mno-push-args\n-Target RejectNegative Report Mask(NO_PUSH_ARGS) Undocumented Save\n+Target RejectNegative Mask(NO_PUSH_ARGS) Undocumented Save\n \n mno-red-zone\n-Target RejectNegative Report Mask(NO_RED_ZONE) Undocumented Save\n+Target RejectNegative Mask(NO_RED_ZONE) Undocumented Save\n \n momit-leaf-frame-pointer\n-Target Report Mask(OMIT_LEAF_FRAME_POINTER) Save\n+Target Mask(OMIT_LEAF_FRAME_POINTER) Save\n Omit the frame pointer in leaf functions.\n \n mpc32\n-Target RejectNegative Report\n+Target RejectNegative\n Set 80387 floating-point precision to 32-bit.\n \n mpc64\n-Target RejectNegative Report\n+Target RejectNegative\n Set 80387 floating-point precision to 64-bit.\n \n mpc80\n-Target RejectNegative Report\n+Target RejectNegative\n Set 80387 floating-point precision to 80-bit.\n \n mpreferred-stack-boundary=\n@@ -425,19 +425,19 @@ Target RejectNegative Joined UInteger Var(ix86_incoming_stack_boundary_arg)\n Assume incoming stack aligned to this power of 2.\n \n mpush-args\n-Target Report InverseMask(NO_PUSH_ARGS, PUSH_ARGS) Save\n+Target InverseMask(NO_PUSH_ARGS, PUSH_ARGS) Save\n Use push instructions to save outgoing arguments.\n \n mred-zone\n-Target RejectNegative Report InverseMask(NO_RED_ZONE, RED_ZONE) Save\n+Target RejectNegative InverseMask(NO_RED_ZONE, RED_ZONE) Save\n Use red-zone in the x86-64 code.\n \n mregparm=\n Target RejectNegative Joined UInteger Var(ix86_regparm)\n Number of registers used to pass integer arguments.\n \n mrtd\n-Target Report Mask(RTD) Save\n+Target Mask(RTD) Save\n Alternate calling convention.\n \n msoft-float\n@@ -449,11 +449,11 @@ Target RejectNegative Mask(SSEREGPARM) Save\n Use SSE register passing conventions for SF and DF mode.\n \n mstackrealign\n-Target Report Var(ix86_force_align_arg_pointer)\n+Target Var(ix86_force_align_arg_pointer)\n Realign stack in prologue.\n \n mstack-arg-probe\n-Target Report Mask(STACK_PROBE) Save\n+Target Mask(STACK_PROBE) Save\n Enable stack probing.\n \n mmemcpy-strategy=\n@@ -511,7 +511,7 @@ EnumValue\n Enum(tls_dialect) String(gnu2) Value(TLS_DIALECT_GNU2)\n \n mtls-direct-seg-refs\n-Target Report Mask(TLS_DIRECT_SEG_REFS)\n+Target Mask(TLS_DIRECT_SEG_REFS)\n Use direct references against %gs when accessing tls data.\n \n mtune=\n@@ -530,7 +530,7 @@ mdump-tune-features\n Target RejectNegative Var(ix86_dump_tunes)\n \n miamcu\n-Target Report Mask(IAMCU)\n+Target Mask(IAMCU)\n Generate code that conforms to Intel MCU psABI.\n \n mabi=\n@@ -548,7 +548,7 @@ EnumValue\n Enum(calling_abi) String(ms) Value(MS_ABI)\n \n mcall-ms2sysv-xlogues\n-Target Report Mask(CALL_MS2SYSV_XLOGUES) Save\n+Target Mask(CALL_MS2SYSV_XLOGUES) Save\n Use libgcc stubs to save and restore registers clobbered by 64-bit Microsoft to System V ABI calls.\n \n mveclibabi=\n@@ -566,28 +566,28 @@ EnumValue\n Enum(ix86_veclibabi) String(acml) Value(ix86_veclibabi_type_acml)\n \n mvect8-ret-in-mem\n-Target Report Mask(VECT8_RETURNS) Save\n+Target Mask(VECT8_RETURNS) Save\n Return 8-byte vectors in memory.\n \n mrecip\n-Target Report Mask(RECIP) Save\n+Target Mask(RECIP) Save\n Generate reciprocals instead of divss and sqrtss.\n \n mrecip=\n-Target Report RejectNegative Joined Var(ix86_recip_name)\n+Target RejectNegative Joined Var(ix86_recip_name)\n Control generation of reciprocal estimates.\n \n mcld\n-Target Report Mask(CLD) Save\n+Target Mask(CLD) Save\n Generate cld instruction in the function prologue.\n \n mvzeroupper\n-Target Report Mask(VZEROUPPER) Save\n+Target Mask(VZEROUPPER) Save\n Generate vzeroupper instruction before a transfer of control flow out of\n the function.\n \n mstv\n-Target Report Mask(STV) Save\n+Target Mask(STV) Save\n Disable Scalar to Vector optimization pass transforming 64-bit integer\n computations into a vector ones.\n \n@@ -601,7 +601,7 @@ Target Alias(mprefer-vector-width=, 128, 256)\n Use 128-bit AVX instructions instead of 256-bit AVX instructions in the auto-vectorizer.\n \n mprefer-vector-width=\n-Target Report RejectNegative Joined Var(prefer_vector_width_type) Enum(prefer_vector_width) Init(PVW_NONE) Save\n+Target RejectNegative Joined Var(prefer_vector_width_type) Enum(prefer_vector_width) Init(PVW_NONE) Save\n Use given register vector width instructions instead of maximum register width in the auto-vectorizer.\n \n Enum\n@@ -623,326 +623,326 @@ Enum(prefer_vector_width) String(512) Value(PVW_AVX512)\n ;; ISA support\n \n m32\n-Target RejectNegative Negative(m64) Report InverseMask(ISA_64BIT) Var(ix86_isa_flags) Save\n+Target RejectNegative Negative(m64) InverseMask(ISA_64BIT) Var(ix86_isa_flags) Save\n Generate 32bit i386 code.\n \n m64\n-Target RejectNegative Negative(mx32) Report Mask(ABI_64) Var(ix86_isa_flags) Save\n+Target RejectNegative Negative(mx32) Mask(ABI_64) Var(ix86_isa_flags) Save\n Generate 64bit x86-64 code.\n \n mx32\n-Target RejectNegative Negative(m16) Report Mask(ABI_X32) Var(ix86_isa_flags) Save\n+Target RejectNegative Negative(m16) Mask(ABI_X32) Var(ix86_isa_flags) Save\n Generate 32bit x86-64 code.\n \n m16\n-Target RejectNegative Negative(m32) Report Mask(CODE16) InverseMask(ISA_64BIT) Var(ix86_isa_flags) Save\n+Target RejectNegative Negative(m32) Mask(CODE16) InverseMask(ISA_64BIT) Var(ix86_isa_flags) Save\n Generate 16bit i386 code.\n \n mmmx\n-Target Report Mask(ISA_MMX) Var(ix86_isa_flags) Save\n+Target Mask(ISA_MMX) Var(ix86_isa_flags) Save\n Support MMX built-in functions.\n \n m3dnow\n-Target Report Mask(ISA_3DNOW) Var(ix86_isa_flags) Save\n+Target Mask(ISA_3DNOW) Var(ix86_isa_flags) Save\n Support 3DNow! built-in functions.\n \n m3dnowa\n-Target Report Mask(ISA_3DNOW_A) Var(ix86_isa_flags) Save\n+Target Mask(ISA_3DNOW_A) Var(ix86_isa_flags) Save\n Support Athlon 3Dnow! built-in functions.\n \n msse\n-Target Report Mask(ISA_SSE) Var(ix86_isa_flags) Save\n+Target Mask(ISA_SSE) Var(ix86_isa_flags) Save\n Support MMX and SSE built-in functions and code generation.\n \n msse2\n-Target Report Mask(ISA_SSE2) Var(ix86_isa_flags) Save\n+Target Mask(ISA_SSE2) Var(ix86_isa_flags) Save\n Support MMX, SSE and SSE2 built-in functions and code generation.\n \n msse3\n-Target Report Mask(ISA_SSE3) Var(ix86_isa_flags) Save\n+Target Mask(ISA_SSE3) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation.\n \n mssse3\n-Target Report Mask(ISA_SSSE3) Var(ix86_isa_flags) Save\n+Target Mask(ISA_SSSE3) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3 and SSSE3 built-in functions and code generation.\n \n msse4.1\n-Target Report Mask(ISA_SSE4_1) Var(ix86_isa_flags) Save\n+Target Mask(ISA_SSE4_1) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1 built-in functions and code generation.\n \n msse4.2\n-Target Report Mask(ISA_SSE4_2) Var(ix86_isa_flags) Save\n+Target Mask(ISA_SSE4_2) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 built-in functions and code generation.\n \n msse4\n-Target RejectNegative Report Mask(ISA_SSE4_2) Var(ix86_isa_flags) Save\n+Target RejectNegative Mask(ISA_SSE4_2) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 built-in functions and code generation.\n \n mno-sse4\n-Target RejectNegative Report InverseMask(ISA_SSE4_1) Var(ix86_isa_flags) Save\n+Target RejectNegative InverseMask(ISA_SSE4_1) Var(ix86_isa_flags) Save\n Do not support SSE4.1 and SSE4.2 built-in functions and code generation.\n \n msse5\n Target Undocumented Alias(mavx) Warn(%<-msse5%> was removed)\n ;; Deprecated\n \n mavx\n-Target Report Mask(ISA_AVX) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX built-in functions and code generation.\n \n mavx2\n-Target Report Mask(ISA_AVX2) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX2) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and AVX2 built-in functions and code generation.\n \n mavx512f\n-Target Report Mask(ISA_AVX512F) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512F) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F built-in functions and code generation.\n \n mavx512pf\n-Target Report Mask(ISA_AVX512PF) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512PF) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512PF built-in functions and code generation.\n \n mavx512er\n-Target Report Mask(ISA_AVX512ER) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512ER) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512ER built-in functions and code generation.\n \n mavx512cd\n-Target Report Mask(ISA_AVX512CD) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512CD) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512CD built-in functions and code generation.\n \n mavx512dq\n-Target Report Mask(ISA_AVX512DQ) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512DQ) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512DQ built-in functions and code generation.\n \n mavx512bw\n-Target Report Mask(ISA_AVX512BW) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512BW) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512BW built-in functions and code generation.\n \n mavx512vl\n-Target Report Mask(ISA_AVX512VL) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512VL) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512VL built-in functions and code generation.\n \n mavx512ifma\n-Target Report Mask(ISA_AVX512IFMA) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512IFMA) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512IFMA built-in functions and code generation.\n \n mavx512vbmi\n-Target Report Mask(ISA_AVX512VBMI) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512VBMI) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512VBMI built-in functions and code generation.\n \n mavx5124fmaps\n-Target Report Mask(ISA2_AVX5124FMAPS) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_AVX5124FMAPS) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX5124FMAPS built-in functions and code generation.\n \n mavx5124vnniw\n-Target Report Mask(ISA2_AVX5124VNNIW) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_AVX5124VNNIW) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX5124VNNIW built-in functions and code generation.\n \n mavx512vpopcntdq\n-Target Report Mask(ISA_AVX512VPOPCNTDQ) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512VPOPCNTDQ) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512VPOPCNTDQ built-in functions and code generation.\n \n mavx512vbmi2\n-Target Report Mask(ISA_AVX512VBMI2) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512VBMI2) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512VBMI2 built-in functions and code generation.\n \n mavx512vnni\n-Target Report Mask(ISA_AVX512VNNI) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512VNNI) Var(ix86_isa_flags) Save\n Support AVX512VNNI built-in functions and code generation.\n \n mavx512bitalg\n-Target Report Mask(ISA_AVX512BITALG) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AVX512BITALG) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512BITALG built-in functions and code generation.\n \n mavx512vp2intersect\n-Target Report Mask(ISA2_AVX512VP2INTERSECT) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_AVX512VP2INTERSECT) Var(ix86_isa_flags2) Save\n Support AVX512VP2INTERSECT built-in functions and code generation.\n \n mfma\n-Target Report Mask(ISA_FMA) Var(ix86_isa_flags) Save\n+Target Mask(ISA_FMA) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-in functions and code generation.\n \n msse4a\n-Target Report Mask(ISA_SSE4A) Var(ix86_isa_flags) Save\n+Target Mask(ISA_SSE4A) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3 and SSE4A built-in functions and code generation.\n \n mfma4\n-Target Report Mask(ISA_FMA4) Var(ix86_isa_flags) Save\n+Target Mask(ISA_FMA4) Var(ix86_isa_flags) Save\n Support FMA4 built-in functions and code generation.\n \n mxop\n-Target Report Mask(ISA_XOP) Var(ix86_isa_flags) Save\n+Target Mask(ISA_XOP) Var(ix86_isa_flags) Save\n Support XOP built-in functions and code generation.\n \n mlwp\n-Target Report Mask(ISA_LWP) Var(ix86_isa_flags) Save\n+Target Mask(ISA_LWP) Var(ix86_isa_flags) Save\n Support LWP built-in functions and code generation.\n \n mabm\n-Target Report Mask(ISA_ABM) Var(ix86_isa_flags) Save\n+Target Mask(ISA_ABM) Var(ix86_isa_flags) Save\n Support code generation of Advanced Bit Manipulation (ABM) instructions.\n \n mpopcnt\n-Target Report Mask(ISA_POPCNT) Var(ix86_isa_flags) Save\n+Target Mask(ISA_POPCNT) Var(ix86_isa_flags) Save\n Support code generation of popcnt instruction.\n \n mpconfig\n-Target Report Mask(ISA2_PCONFIG) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_PCONFIG) Var(ix86_isa_flags2) Save\n Support PCONFIG built-in functions and code generation.\n \n mwbnoinvd\n-Target Report Mask(ISA2_WBNOINVD) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_WBNOINVD) Var(ix86_isa_flags2) Save\n Support WBNOINVD built-in functions and code generation.\n \n mptwrite\n-Target Report Mask(ISA2_PTWRITE) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_PTWRITE) Var(ix86_isa_flags2) Save\n Support PTWRITE built-in functions and code generation.\n \n muintr\n-Target Report Mask(ISA2_UINTR) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_UINTR) Var(ix86_isa_flags2) Save\n Support UINTR built-in functions and code generation.\n \n msgx\n-Target Report Mask(ISA2_SGX) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_SGX) Var(ix86_isa_flags2) Save\n Support SGX built-in functions and code generation.\n \n mrdpid\n-Target Report Mask(ISA2_RDPID) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_RDPID) Var(ix86_isa_flags2) Save\n Support RDPID built-in functions and code generation.\n \n mgfni\n-Target Report Mask(ISA_GFNI) Var(ix86_isa_flags) Save\n+Target Mask(ISA_GFNI) Var(ix86_isa_flags) Save\n Support GFNI built-in functions and code generation.\n \n mvaes\n-Target Report Mask(ISA2_VAES) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_VAES) Var(ix86_isa_flags2) Save\n Support VAES built-in functions and code generation.\n \n mvpclmulqdq\n-Target Report Mask(ISA_VPCLMULQDQ) Var(ix86_isa_flags) Save\n+Target Mask(ISA_VPCLMULQDQ) Var(ix86_isa_flags) Save\n Support VPCLMULQDQ built-in functions and code generation.\n \n mbmi\n-Target Report Mask(ISA_BMI) Var(ix86_isa_flags) Save\n+Target Mask(ISA_BMI) Var(ix86_isa_flags) Save\n Support BMI built-in functions and code generation.\n \n mbmi2\n-Target Report Mask(ISA_BMI2) Var(ix86_isa_flags) Save\n+Target Mask(ISA_BMI2) Var(ix86_isa_flags) Save\n Support BMI2 built-in functions and code generation.\n \n mlzcnt\n-Target Report Mask(ISA_LZCNT) Var(ix86_isa_flags) Save\n+Target Mask(ISA_LZCNT) Var(ix86_isa_flags) Save\n Support LZCNT built-in function and code generation.\n \n mhle\n-Target Report Mask(ISA2_HLE) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_HLE) Var(ix86_isa_flags2) Save\n Support Hardware Lock Elision prefixes.\n \n mrdseed\n-Target Report Mask(ISA_RDSEED) Var(ix86_isa_flags) Save\n+Target Mask(ISA_RDSEED) Var(ix86_isa_flags) Save\n Support RDSEED instruction.\n \n mprfchw\n-Target Report Mask(ISA_PRFCHW) Var(ix86_isa_flags) Save\n+Target Mask(ISA_PRFCHW) Var(ix86_isa_flags) Save\n Support PREFETCHW instruction.\n \n madx\n-Target Report Mask(ISA_ADX) Var(ix86_isa_flags) Save\n+Target Mask(ISA_ADX) Var(ix86_isa_flags) Save\n Support flag-preserving add-carry instructions.\n \n mclflushopt\n-Target Report Mask(ISA_CLFLUSHOPT) Var(ix86_isa_flags) Save\n+Target Mask(ISA_CLFLUSHOPT) Var(ix86_isa_flags) Save\n Support CLFLUSHOPT instructions.\n \n mclwb\n-Target Report Mask(ISA_CLWB) Var(ix86_isa_flags) Save\n+Target Mask(ISA_CLWB) Var(ix86_isa_flags) Save\n Support CLWB instruction.\n \n mpcommit\n Target WarnRemoved\n \n mfxsr\n-Target Report Mask(ISA_FXSR) Var(ix86_isa_flags) Save\n+Target Mask(ISA_FXSR) Var(ix86_isa_flags) Save\n Support FXSAVE and FXRSTOR instructions.\n \n mxsave\n-Target Report Mask(ISA_XSAVE) Var(ix86_isa_flags) Save\n+Target Mask(ISA_XSAVE) Var(ix86_isa_flags) Save\n Support XSAVE and XRSTOR instructions.\n \n mxsaveopt\n-Target Report Mask(ISA_XSAVEOPT) Var(ix86_isa_flags) Save\n+Target Mask(ISA_XSAVEOPT) Var(ix86_isa_flags) Save\n Support XSAVEOPT instruction.\n \n mxsavec\n-Target Report Mask(ISA_XSAVEC) Var(ix86_isa_flags) Save\n+Target Mask(ISA_XSAVEC) Var(ix86_isa_flags) Save\n Support XSAVEC instructions.\n \n mxsaves\n-Target Report Mask(ISA_XSAVES) Var(ix86_isa_flags) Save\n+Target Mask(ISA_XSAVES) Var(ix86_isa_flags) Save\n Support XSAVES and XRSTORS instructions.\n \n mtbm\n-Target Report Mask(ISA_TBM) Var(ix86_isa_flags) Save\n+Target Mask(ISA_TBM) Var(ix86_isa_flags) Save\n Support TBM built-in functions and code generation.\n \n mcx16\n-Target Report Mask(ISA2_CX16) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_CX16) Var(ix86_isa_flags2) Save\n Support code generation of cmpxchg16b instruction.\n \n msahf\n-Target Report Mask(ISA_SAHF) Var(ix86_isa_flags) Save\n+Target Mask(ISA_SAHF) Var(ix86_isa_flags) Save\n Support code generation of sahf instruction in 64bit x86-64 code.\n \n mmovbe\n-Target Report Mask(ISA2_MOVBE) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_MOVBE) Var(ix86_isa_flags2) Save\n Support code generation of movbe instruction.\n \n mcrc32\n-Target Report Mask(ISA_CRC32) Var(ix86_isa_flags) Save\n+Target Mask(ISA_CRC32) Var(ix86_isa_flags) Save\n Support code generation of crc32 instruction.\n \n maes\n-Target Report Mask(ISA_AES) Var(ix86_isa_flags) Save\n+Target Mask(ISA_AES) Var(ix86_isa_flags) Save\n Support AES built-in functions and code generation.\n \n msha\n-Target Report Mask(ISA_SHA) Var(ix86_isa_flags) Save\n+Target Mask(ISA_SHA) Var(ix86_isa_flags) Save\n Support SHA1 and SHA256 built-in functions and code generation.\n \n mpclmul\n-Target Report Mask(ISA_PCLMUL) Var(ix86_isa_flags) Save\n+Target Mask(ISA_PCLMUL) Var(ix86_isa_flags) Save\n Support PCLMUL built-in functions and code generation.\n \n msse2avx\n-Target Report Var(ix86_sse2avx)\n+Target Var(ix86_sse2avx)\n Encode SSE instructions with VEX prefix.\n \n mfsgsbase\n-Target Report Mask(ISA_FSGSBASE) Var(ix86_isa_flags) Save\n+Target Mask(ISA_FSGSBASE) Var(ix86_isa_flags) Save\n Support FSGSBASE built-in functions and code generation.\n \n mrdrnd\n-Target Report Mask(ISA_RDRND) Var(ix86_isa_flags) Save\n+Target Mask(ISA_RDRND) Var(ix86_isa_flags) Save\n Support RDRND built-in functions and code generation.\n \n mf16c\n-Target Report Mask(ISA_F16C) Var(ix86_isa_flags) Save\n+Target Mask(ISA_F16C) Var(ix86_isa_flags) Save\n Support F16C built-in functions and code generation.\n \n mprefetchwt1\n-Target Report Mask(ISA_PREFETCHWT1) Var(ix86_isa_flags) Save\n+Target Mask(ISA_PREFETCHWT1) Var(ix86_isa_flags) Save\n Support PREFETCHWT1 built-in functions and code generation.\n \n mfentry\n-Target Report Var(flag_fentry)\n+Target Var(flag_fentry)\n Emit profiling counter call at function entry before prologue.\n \n mrecord-mcount\n-Target Report Var(flag_record_mcount)\n+Target Var(flag_record_mcount)\n Generate __mcount_loc section with all mcount or __fentry__ calls.\n \n mnop-mcount\n-Target Report Var(flag_nop_mcount)\n+Target Var(flag_nop_mcount)\n Generate mcount/__fentry__ calls as nops. To activate they need to be\n patched in.\n \n@@ -955,39 +955,39 @@ Target RejectNegative Joined Var(fentry_section)\n Set name of section to record mrecord-mcount calls.\n \n mskip-rax-setup\n-Target Report Var(flag_skip_rax_setup)\n+Target Var(flag_skip_rax_setup)\n Skip setting up RAX register when passing variable arguments.\n \n m8bit-idiv\n-Target Report Mask(USE_8BIT_IDIV) Save\n+Target Mask(USE_8BIT_IDIV) Save\n Expand 32bit/64bit integer divide into 8bit unsigned integer divide with run-time check.\n \n mavx256-split-unaligned-load\n-Target Report Mask(AVX256_SPLIT_UNALIGNED_LOAD) Save\n+Target Mask(AVX256_SPLIT_UNALIGNED_LOAD) Save\n Split 32-byte AVX unaligned load.\n \n mavx256-split-unaligned-store\n-Target Report Mask(AVX256_SPLIT_UNALIGNED_STORE) Save\n+Target Mask(AVX256_SPLIT_UNALIGNED_STORE) Save\n Split 32-byte AVX unaligned store.\n \n mrtm\n-Target Report Mask(ISA_RTM) Var(ix86_isa_flags) Save\n+Target Mask(ISA_RTM) Var(ix86_isa_flags) Save\n Support RTM built-in functions and code generation.\n \n mmpx\n Target WarnRemoved\n Removed in GCC 9.  This switch has no effect.\n \n mmwaitx\n-Target Report Mask(ISA2_MWAITX) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_MWAITX) Var(ix86_isa_flags2) Save\n Support MWAITX and MONITORX built-in functions and code generation.\n \n mclzero\n-Target Report Mask(ISA2_CLZERO) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_CLZERO) Var(ix86_isa_flags2) Save\n Support CLZERO built-in functions and code generation.\n \n mpku\n-Target Report Mask(ISA_PKU) Var(ix86_isa_flags) Save\n+Target Mask(ISA_PKU) Var(ix86_isa_flags) Save\n Support PKU built-in functions and code generation.\n \n mstack-protector-guard=\n@@ -1026,34 +1026,34 @@ mmitigate-rop\n Target WarnRemoved\n \n mgeneral-regs-only\n-Target Report RejectNegative Mask(GENERAL_REGS_ONLY) Var(ix86_target_flags) Save\n+Target RejectNegative Mask(GENERAL_REGS_ONLY) Var(ix86_target_flags) Save\n Generate code which uses only the general registers.\n \n mshstk\n-Target Report Mask(ISA_SHSTK) Var(ix86_isa_flags) Save\n+Target Mask(ISA_SHSTK) Var(ix86_isa_flags) Save\n Enable shadow stack built-in functions from Control-flow Enforcement\n Technology (CET).\n \n mcet-switch\n-Target Report Undocumented Var(flag_cet_switch) Init(0)\n+Target Undocumented Var(flag_cet_switch) Init(0)\n Turn on CET instrumentation for switch statements that use a jump table and\n an indirect jump.\n \n mmanual-endbr\n-Target Report Var(flag_manual_endbr) Init(0)\n+Target Var(flag_manual_endbr) Init(0)\n Insert ENDBR instruction at function entry only via cf_check attribute\n for CET instrumentation.\n \n mforce-indirect-call\n-Target Report Var(flag_force_indirect_call) Init(0)\n+Target Var(flag_force_indirect_call) Init(0)\n Make all function calls indirect.\n \n mindirect-branch=\n-Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_indirect_branch) Init(indirect_branch_keep)\n+Target RejectNegative Joined Enum(indirect_branch) Var(ix86_indirect_branch) Init(indirect_branch_keep)\n Convert indirect call and jump to call and return thunks.\n \n mfunction-return=\n-Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_function_return) Init(indirect_branch_keep)\n+Target RejectNegative Joined Enum(indirect_branch) Var(ix86_function_return) Init(indirect_branch_keep)\n Convert function return to call and return thunk.\n \n Enum\n@@ -1073,27 +1073,27 @@ EnumValue\n Enum(indirect_branch) String(thunk-extern) Value(indirect_branch_thunk_extern)\n \n mindirect-branch-register\n-Target Report Var(ix86_indirect_branch_register) Init(0)\n+Target Var(ix86_indirect_branch_register) Init(0)\n Force indirect call and jump via register.\n \n mmovdiri\n-Target Report Mask(ISA_MOVDIRI) Var(ix86_isa_flags) Save\n+Target Mask(ISA_MOVDIRI) Var(ix86_isa_flags) Save\n Support MOVDIRI built-in functions and code generation.\n \n mmovdir64b\n-Target Report Mask(ISA2_MOVDIR64B) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_MOVDIR64B) Var(ix86_isa_flags2) Save\n Support MOVDIR64B built-in functions and code generation.\n \n mwaitpkg\n-Target Report Mask(ISA2_WAITPKG) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_WAITPKG) Var(ix86_isa_flags2) Save\n Support WAITPKG built-in functions and code generation.\n \n mcldemote\n-Target Report Mask(ISA2_CLDEMOTE) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_CLDEMOTE) Var(ix86_isa_flags2) Save\n Support CLDEMOTE built-in functions and code generation.\n \n minstrument-return=\n-Target Report RejectNegative Joined Enum(instrument_return) Var(ix86_instrument_return) Init(instrument_return_none)\n+Target RejectNegative Joined Enum(instrument_return) Var(ix86_instrument_return) Init(instrument_return_none)\n Instrument function exit in instrumented functions with __fentry__.\n \n Enum\n@@ -1110,55 +1110,55 @@ EnumValue\n Enum(instrument_return) String(nop5) Value(instrument_return_nop5)\n \n mrecord-return\n-Target Report Var(ix86_flag_record_return) Init(0)\n+Target Var(ix86_flag_record_return) Init(0)\n Generate a __return_loc section pointing to all return instrumentation code.\n \n mavx512bf16\n-Target Report Mask(ISA2_AVX512BF16) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_AVX512BF16) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and\n AVX512BF16 built-in functions and code generation.\n \n menqcmd\n-Target Report Mask(ISA2_ENQCMD) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_ENQCMD) Var(ix86_isa_flags2) Save\n Support ENQCMD built-in functions and code generation.\n \n mserialize\n-Target Report Mask(ISA2_SERIALIZE) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_SERIALIZE) Var(ix86_isa_flags2) Save\n Support SERIALIZE built-in functions and code generation.\n \n mtsxldtrk\n-Target Report Mask(ISA2_TSXLDTRK) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_TSXLDTRK) Var(ix86_isa_flags2) Save\n Support TSXLDTRK built-in functions and code generation.\n \n mamx-tile\n-Target Report Mask(ISA2_AMX_TILE) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_AMX_TILE) Var(ix86_isa_flags2) Save\n Support AMX-TILE built-in functions and code generation.\n \n mamx-int8\n-Target Report Mask(ISA2_AMX_INT8) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_AMX_INT8) Var(ix86_isa_flags2) Save\n Support AMX-INT8 built-in functions and code generation.\n \n mamx-bf16\n-Target Report Mask(ISA2_AMX_BF16) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_AMX_BF16) Var(ix86_isa_flags2) Save\n Support AMX-BF16 built-in functions and code generation.\n \n mhreset\n-Target Report Mask(ISA2_HRESET) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_HRESET) Var(ix86_isa_flags2) Save\n Support HRESET built-in functions and code generation.\n \n mkl\n-Target Report Mask(ISA2_KL) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_KL) Var(ix86_isa_flags2) Save\n Support KL built-in functions and code generation.\n \n mwidekl\n-Target Report Mask(ISA2_WIDEKL) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_WIDEKL) Var(ix86_isa_flags2) Save\n Support WIDEKL built-in functions and code generation.\n \n mavxvnni\n-Target Report Mask(ISA2_AVXVNNI) Var(ix86_isa_flags2) Save\n+Target Mask(ISA2_AVXVNNI) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, and\n AVXVNNI built-in functions and code generation.\n \n mneeded\n-Target Report Var(ix86_needed) Save\n+Target Var(ix86_needed) Save\n Emit GNU_PROPERTY_X86_ISA_1_NEEDED GNU property."}, {"sha": "5646d29c13727c73b7433bf4a27c82bd082e2bb2", "filename": "gcc/config/ia64/ia64.opt", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fia64%2Fia64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fia64%2Fia64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -24,89 +24,89 @@ Variable\n enum processor_type ia64_tune = PROCESSOR_ITANIUM2\n \n mbig-endian\n-Target Report RejectNegative Mask(BIG_ENDIAN)\n+Target RejectNegative Mask(BIG_ENDIAN)\n Generate big endian code.\n \n mlittle-endian\n-Target Report RejectNegative InverseMask(BIG_ENDIAN)\n+Target RejectNegative InverseMask(BIG_ENDIAN)\n Generate little endian code.\n \n mgnu-as\n-Target Report Mask(GNU_AS)\n+Target Mask(GNU_AS)\n Generate code for GNU as.\n \n mgnu-ld\n-Target Report Mask(GNU_LD)\n+Target Mask(GNU_LD)\n Generate code for GNU ld.\n \n mvolatile-asm-stop\n-Target Report Mask(VOL_ASM_STOP)\n+Target Mask(VOL_ASM_STOP)\n Emit stop bits before and after volatile extended asms.\n \n mregister-names\n Target Mask(REG_NAMES)\n Use in/loc/out register names.\n \n mno-sdata\n-Target Report RejectNegative Mask(NO_SDATA)\n+Target RejectNegative Mask(NO_SDATA)\n \n msdata\n-Target Report RejectNegative InverseMask(NO_SDATA)\n+Target RejectNegative InverseMask(NO_SDATA)\n Enable use of sdata/scommon/sbss.\n \n mno-pic\n-Target Report RejectNegative Mask(NO_PIC)\n+Target RejectNegative Mask(NO_PIC)\n Generate code without GP reg.\n \n mconstant-gp\n-Target Report RejectNegative Mask(CONST_GP)\n+Target RejectNegative Mask(CONST_GP)\n gp is constant (but save/restore gp on indirect calls).\n \n mauto-pic\n-Target Report RejectNegative Mask(AUTO_PIC)\n+Target RejectNegative Mask(AUTO_PIC)\n Generate self-relocatable code.\n \n minline-float-divide-min-latency\n-Target Report RejectNegative Var(TARGET_INLINE_FLOAT_DIV, 1)\n+Target RejectNegative Var(TARGET_INLINE_FLOAT_DIV, 1)\n Generate inline floating point division, optimize for latency.\n \n minline-float-divide-max-throughput\n-Target Report RejectNegative Var(TARGET_INLINE_FLOAT_DIV, 2) Init(2)\n+Target RejectNegative Var(TARGET_INLINE_FLOAT_DIV, 2) Init(2)\n Generate inline floating point division, optimize for throughput.\n \n mno-inline-float-divide\n-Target Report RejectNegative Var(TARGET_INLINE_FLOAT_DIV, 0)\n+Target RejectNegative Var(TARGET_INLINE_FLOAT_DIV, 0)\n \n minline-int-divide-min-latency\n-Target Report RejectNegative Var(TARGET_INLINE_INT_DIV, 1)\n+Target RejectNegative Var(TARGET_INLINE_INT_DIV, 1)\n Generate inline integer division, optimize for latency.\n \n minline-int-divide-max-throughput\n-Target Report RejectNegative Var(TARGET_INLINE_INT_DIV, 2)\n+Target RejectNegative Var(TARGET_INLINE_INT_DIV, 2)\n Generate inline integer division, optimize for throughput.\n \n mno-inline-int-divide\n-Target Report RejectNegative Var(TARGET_INLINE_INT_DIV, 0)\n+Target RejectNegative Var(TARGET_INLINE_INT_DIV, 0)\n Do not inline integer division.\n \n minline-sqrt-min-latency\n-Target Report RejectNegative Var(TARGET_INLINE_SQRT, 1)\n+Target RejectNegative Var(TARGET_INLINE_SQRT, 1)\n Generate inline square root, optimize for latency.\n \n minline-sqrt-max-throughput\n-Target Report RejectNegative Var(TARGET_INLINE_SQRT, 2)\n+Target RejectNegative Var(TARGET_INLINE_SQRT, 2)\n Generate inline square root, optimize for throughput.\n \n mno-inline-sqrt\n-Target Report RejectNegative Var(TARGET_INLINE_SQRT, 0)\n+Target RejectNegative Var(TARGET_INLINE_SQRT, 0)\n Do not inline square root.\n \n mdwarf2-asm\n-Target Report Mask(DWARF2_ASM)\n+Target Mask(DWARF2_ASM)\n Enable DWARF line debug info via GNU as.\n \n mearly-stop-bits\n-Target Report Mask(EARLY_STOP_BITS)\n+Target Mask(EARLY_STOP_BITS)\n Enable earlier placing stop bits for better scheduling.\n \n mfixed-range=\n@@ -132,35 +132,35 @@ EnumValue\n Enum(ia64_tune) String(mckinley) Value(PROCESSOR_ITANIUM2)\n \n msched-br-data-spec\n-Target Report Var(mflag_sched_br_data_spec) Init(0)\n+Target Var(mflag_sched_br_data_spec) Init(0)\n Use data speculation before reload.\n \n msched-ar-data-spec\n-Target Report Var(mflag_sched_ar_data_spec) Init(1)\n+Target Var(mflag_sched_ar_data_spec) Init(1)\n Use data speculation after reload.\n \n msched-control-spec\n-Target Report Var(mflag_sched_control_spec) Init(2)\n+Target Var(mflag_sched_control_spec) Init(2)\n Use control speculation.\n \n msched-br-in-data-spec\n-Target Report Var(mflag_sched_br_in_data_spec) Init(1)\n+Target Var(mflag_sched_br_in_data_spec) Init(1)\n Use in block data speculation before reload.\n \n msched-ar-in-data-spec\n-Target Report Var(mflag_sched_ar_in_data_spec) Init(1)\n+Target Var(mflag_sched_ar_in_data_spec) Init(1)\n Use in block data speculation after reload.\n \n msched-in-control-spec\n-Target Report Var(mflag_sched_in_control_spec) Init(1)\n+Target Var(mflag_sched_in_control_spec) Init(1)\n Use in block control speculation.\n \n msched-spec-ldc\n-Target Report Var(mflag_sched_spec_ldc) Init(1)\n+Target Var(mflag_sched_spec_ldc) Init(1)\n Use simple data speculation check.\n \n msched-spec-control-ldc\n-Target Report Var(mflag_sched_spec_control_ldc) Init(0)\n+Target Var(mflag_sched_spec_control_ldc) Init(0)\n Use simple data speculation check for control speculation.\n \n msched-prefer-non-data-spec-insns\n@@ -170,27 +170,27 @@ msched-prefer-non-control-spec-insns\n Target WarnRemoved\n \n msched-count-spec-in-critical-path\n-Target Report Var(mflag_sched_count_spec_in_critical_path) Init(0)\n+Target Var(mflag_sched_count_spec_in_critical_path) Init(0)\n Count speculative dependencies while calculating priority of instructions.\n \n msched-stop-bits-after-every-cycle\n-Target Report Var(mflag_sched_stop_bits_after_every_cycle) Init(1)\n+Target Var(mflag_sched_stop_bits_after_every_cycle) Init(1)\n Place a stop bit after every cycle when scheduling.\n \n msched-fp-mem-deps-zero-cost\n-Target Report Var(mflag_sched_fp_mem_deps_zero_cost) Init(0)\n+Target Var(mflag_sched_fp_mem_deps_zero_cost) Init(0)\n Assume that floating-point stores and loads are not likely to cause conflict when placed into one instruction group.\n \n msched-max-memory-insns=\n Target RejectNegative Joined UInteger Var(ia64_max_memory_insns) Init(1)\n Soft limit on number of memory insns per instruction group, giving lower priority to subsequent memory insns attempting to schedule in the same insn group. Frequently useful to prevent cache bank conflicts.  Default value is 1.\n \n msched-max-memory-insns-hard-limit\n-Target Report Var(mflag_sched_mem_insns_hard_limit) Init(0)\n+Target Var(mflag_sched_mem_insns_hard_limit) Init(0)\n Disallow more than 'msched-max-memory-insns' in instruction group. Otherwise, limit is 'soft' (prefer non-memory operations when limit is reached).\n \n msel-sched-dont-check-control-spec\n-Target Report Var(mflag_sel_sched_dont_check_control_spec) Init(0)\n+Target Var(mflag_sel_sched_dont_check_control_spec) Init(0)\n Don't generate checks for control speculation in selective scheduling.\n \n ; This comment is to ensure we retain the blank line above."}, {"sha": "5c9a5a32066f5903264b60844a14f672a379a5ca", "filename": "gcc/config/ia64/ilp32.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fia64%2Filp32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fia64%2Filp32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Filp32.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -1,7 +1,7 @@\n milp32\n-Target Report RejectNegative Mask(ILP32)\n+Target RejectNegative Mask(ILP32)\n Generate ILP32 code.\n \n mlp64\n-Target Report RejectNegative InverseMask(ILP32)\n+Target RejectNegative InverseMask(ILP32)\n Generate LP64 code."}, {"sha": "2d607048938344f77dd52fb45e0e16db0e724060", "filename": "gcc/config/linux-android.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Flinux-android.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Flinux-android.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-android.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,7 +19,7 @@\n ; <http://www.gnu.org/licenses/>.\n \n mandroid\n-Target Report Mask(ANDROID) Var(flag_android) Init(ANDROID_DEFAULT ? OPTION_MASK_ANDROID : 0)\n+Target Mask(ANDROID) Var(flag_android) Init(ANDROID_DEFAULT ? OPTION_MASK_ANDROID : 0)\n Generate code for the Android platform.\n \n tno-android-cc"}, {"sha": "34b0a9ea7499de67ed5f49a041c7d34175917c00", "filename": "gcc/config/linux.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Flinux.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Flinux.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -20,17 +20,17 @@\n ; <http://www.gnu.org/licenses/>.\n \n mbionic\n-Target Report RejectNegative Var(linux_libc,LIBC_BIONIC) Init(DEFAULT_LIBC) Negative(mglibc)\n+Target RejectNegative Var(linux_libc,LIBC_BIONIC) Init(DEFAULT_LIBC) Negative(mglibc)\n Use Bionic C library.\n \n mglibc\n-Target Report RejectNegative Var(linux_libc,LIBC_GLIBC) Negative(muclibc)\n+Target RejectNegative Var(linux_libc,LIBC_GLIBC) Negative(muclibc)\n Use GNU C library.\n \n muclibc\n-Target Report RejectNegative Var(linux_libc,LIBC_UCLIBC) Negative(mmusl)\n+Target RejectNegative Var(linux_libc,LIBC_UCLIBC) Negative(mmusl)\n Use uClibc C library.\n \n mmusl\n-Target Report RejectNegative Var(linux_libc,LIBC_MUSL) Negative(mbionic)\n+Target RejectNegative Var(linux_libc,LIBC_MUSL) Negative(mbionic)\n Use musl C library."}, {"sha": "1260b48fbc17d02d3eba01e1471ddaa83ccada4c", "filename": "gcc/config/lm32/lm32.opt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Flm32%2Flm32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Flm32%2Flm32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -20,21 +20,21 @@\n ;  <http://www.gnu.org/licenses/>.  \n    \n mmultiply-enabled\n-Target Report Mask(MULTIPLY_ENABLED)\n+Target Mask(MULTIPLY_ENABLED)\n Enable multiply instructions.\n \n mdivide-enabled\n-Target Report Mask(DIVIDE_ENABLED)\n+Target Mask(DIVIDE_ENABLED)\n Enable divide and modulus instructions.\n \n mbarrel-shift-enabled\n-Target Report Mask(BARREL_SHIFT_ENABLED)\n+Target Mask(BARREL_SHIFT_ENABLED)\n Enable barrel shift instructions.\n \n msign-extend-enabled\n-Target Report Mask(SIGN_EXTEND_ENABLED)\n+Target Mask(SIGN_EXTEND_ENABLED)\n Enable sign extend instructions.\n \n muser-enabled\n-Target Report Mask(USER_ENABLED)\n+Target Mask(USER_ENABLED)\n Enable user-defined instructions."}, {"sha": "b9a33c6c310cb777d252d6b07f8351fb114e91e9", "filename": "gcc/config/m32r/m32r.opt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fm32r%2Fm32r.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fm32r%2Fm32r.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -30,27 +30,27 @@ Variable\n enum m32r_sdata m32r_sdata_selected = M32R_SDATA_DEFAULT\n \n m32rx\n-Target Report RejectNegative Mask(M32RX)\n+Target RejectNegative Mask(M32RX)\n Compile for the m32rx.\n \n m32r2\n-Target Report RejectNegative Mask(M32R2)\n+Target RejectNegative Mask(M32R2)\n Compile for the m32r2.\n \n m32r\n Target RejectNegative\n Compile for the m32r.\n \n malign-loops\n-Target Report Mask(ALIGN_LOOPS)\n+Target Mask(ALIGN_LOOPS)\n Align all loops to 32 byte boundary.\n \n mbranch-cost=1\n-Target Report RejectNegative Mask(BRANCH_COST)\n+Target RejectNegative Mask(BRANCH_COST)\n Prefer branches over conditional execution.\n \n mbranch-cost=2\n-Target Report RejectNegative InverseMask(BRANCH_COST)\n+Target RejectNegative InverseMask(BRANCH_COST)\n Give branches their default cost.\n \n mdebug\n@@ -66,11 +66,11 @@ Target RejectNegative Joined UInteger Var(m32r_cache_flush_trap) Init(CACHE_FLUS\n Specify cache flush trap number.\n \n missue-rate=1\n-Target Report RejectNegative Mask(LOW_ISSUE_RATE)\n+Target RejectNegative Mask(LOW_ISSUE_RATE)\n Only issue one instruction per cycle.\n \n missue-rate=2\n-Target Report RejectNegative InverseMask(LOW_ISSUE_RATE)\n+Target RejectNegative InverseMask(LOW_ISSUE_RATE)\n Allow two instructions to be issued per cycle.\n \n mmodel="}, {"sha": "14d09d420d572abac53077be926ca71d641cd7cc", "filename": "gcc/config/m68k/m68k.opt", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -95,15 +95,15 @@ Target RejectNegative Mask(HARD_FLOAT)\n Generate code that uses 68881 floating-point instructions.\n \n malign-int\n-Target Report Mask(ALIGN_INT)\n+Target Mask(ALIGN_INT)\n Align variables on a 32-bit boundary.\n \n march=\n Target RejectNegative Joined Enum(m68k_isa) Var(m68k_arch_option)\n Specify the name of the target architecture.\n \n mbitfield\n-Target Report Mask(BITFIELD)\n+Target Mask(BITFIELD)\n Use the bit-field instructions.\n \n mc68000\n@@ -127,7 +127,7 @@ Target RejectNegative Alias(mcpu=, 68332)\n Generate code for a cpu32.\n \n mdiv\n-Target Report Mask(CF_HWDIV)\n+Target Mask(CF_HWDIV)\n Use hardware division instructions on ColdFire.\n \n mfidoa\n@@ -139,11 +139,11 @@ Target RejectNegative Mask(HARD_FLOAT)\n Generate code which uses hardware floating point instructions.\n \n mid-shared-library\n-Target Report Mask(ID_SHARED_LIBRARY)\n+Target Mask(ID_SHARED_LIBRARY)\n Enable ID based shared library.\n \n mlong-jump-table-offsets\n-Target Report RejectNegative Mask(LONG_JUMP_TABLE_OFFSETS)\n+Target RejectNegative Mask(LONG_JUMP_TABLE_OFFSETS)\n Use 32-bit offsets in jump tables rather than 16-bit offsets.\n \n mnobitfield\n@@ -159,41 +159,41 @@ Target RejectNegative InverseMask(SHORT)\n Consider type 'int' to be 32 bits wide.\n \n mpcrel\n-Target Report Mask(PCREL)\n+Target Mask(PCREL)\n Generate pc-relative code.\n \n mrtd\n-Target Report Mask(RTD)\n+Target Mask(RTD)\n Use different calling convention using 'rtd'.\n \n msep-data\n-Target Report Mask(SEP_DATA)\n+Target Mask(SEP_DATA)\n Enable separate data segment.\n \n mshared-library-id=\n Target RejectNegative Joined UInteger\n ID of shared library to build.\n \n mshort\n-Target Report Mask(SHORT)\n+Target Mask(SHORT)\n Consider type 'int' to be 16 bits wide.\n \n msoft-float\n Target RejectNegative InverseMask(HARD_FLOAT)\n Generate code with library calls for floating point.\n \n mstrict-align\n-Target Report Mask(STRICT_ALIGNMENT)\n+Target Mask(STRICT_ALIGNMENT)\n Do not use unaligned memory references.\n \n mtune=\n Target RejectNegative Joined Enum(uarch_type) Var(m68k_tune_option) Init(unk_arch)\n Tune for the specified target CPU or architecture.\n \n mxgot\n-Target Report Mask(XGOT)\n+Target Mask(XGOT)\n Support more than 8192 GOT entries on ColdFire.\n \n mxtls\n-Target Report Mask(XTLS)\n+Target Mask(XTLS)\n Support TLS segment larger than 64K."}, {"sha": "3b3e5565edf5e9b8c8c8a54d1dcfbc675b714b47", "filename": "gcc/config/mcore/mcore.opt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmcore%2Fmcore.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmcore%2Fmcore.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,35 +19,35 @@\n ; <http://www.gnu.org/licenses/>.\n \n m210\n-Target RejectNegative Report InverseMask(M340)\n+Target RejectNegative InverseMask(M340)\n Generate code for the M*Core M210.\n \n m340\n-Target RejectNegative Report Mask(M340)\n+Target RejectNegative Mask(M340)\n Generate code for the M*Core M340.\n \n m4byte-functions\n-Target Report Mask(OVERALIGN_FUNC)\n+Target Mask(OVERALIGN_FUNC)\n Force functions to be aligned to a 4 byte boundary.\n \n mbig-endian\n-Target RejectNegative Report InverseMask(LITTLE_END)\n+Target RejectNegative InverseMask(LITTLE_END)\n Generate big-endian code.\n \n mcallgraph-data\n-Target Report Mask(CG_DATA)\n+Target Mask(CG_DATA)\n Emit call graph information.\n \n mdiv\n-Target Report Mask(DIV)\n+Target Mask(DIV)\n Use the divide instruction.\n \n mhardlit\n-Target Report Mask(HARDLIT)\n+Target Mask(HARDLIT)\n Inline constants if it can be done in 2 insns or less.\n \n mlittle-endian\n-Target RejectNegative Report Mask(LITTLE_END)\n+Target RejectNegative Mask(LITTLE_END)\n Generate little-endian code.\n \n ; Not used by the compiler proper.\n@@ -56,11 +56,11 @@ Target RejectNegative\n Assume that run-time support has been provided, so omit -lsim from the linker command line.\n \n mrelax-immediates\n-Target Report Mask(RELAX_IMM)\n+Target Mask(RELAX_IMM)\n Use arbitrary sized immediates in bit operations.\n \n mslow-bytes\n-Target Report Mask(SLOW_BYTES)\n+Target Mask(SLOW_BYTES)\n Prefer word accesses over byte accesses.\n \n ; Maximum size we are allowed to grow the stack in a single operation.\n@@ -71,5 +71,5 @@ Target RejectNegative Joined UInteger Var(mcore_stack_increment) Init(STACK_UNIT\n Set the maximum amount for a single stack increment operation.\n \n mwide-bitfields\n-Target Report Mask(W_FIELD)\n+Target Mask(W_FIELD)\n Always treat bitfields as int-sized."}, {"sha": "8b3c2c12f3e46f002064ea2370f0542e590625e6", "filename": "gcc/config/microblaze/microblaze.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -36,11 +36,11 @@ Zxl-mode-xmdstub\n Driver\n \n msoft-float\n-Target Report RejectNegative Mask(SOFT_FLOAT)\n+Target RejectNegative Mask(SOFT_FLOAT)\n Use software emulation for floating point (default).\n \n mhard-float\n-Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)\n+Target RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)\n Use hardware floating point instructions.\n \n msmall-divides\n@@ -56,11 +56,11 @@ Target Mask(MEMCPY)\n Don't optimize block moves, use memcpy.\n \n mbig-endian\n-Target Report RejectNegative InverseMask(LITTLE_ENDIAN)\n+Target RejectNegative InverseMask(LITTLE_ENDIAN)\n Assume target CPU is configured as big endian.\n \n mlittle-endian\n-Target Report RejectNegative Mask(LITTLE_ENDIAN)\n+Target RejectNegative Mask(LITTLE_ENDIAN)\n Assume target CPU is configured as little endian.\n \n mxl-soft-mul"}, {"sha": "d2bfa9cd06aebca8292b3a1b5d929efb9002ce40", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 82, "deletions": 82, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -51,15 +51,15 @@ EnumValue\n Enum(mips_abi) String(eabi) Value(ABI_EABI)\n \n mabicalls\n-Target Report Mask(ABICALLS)\n+Target Mask(ABICALLS)\n Generate code that can be used in SVR4-style dynamic objects.\n \n mmad\n-Target Report Var(TARGET_MAD)\n+Target Var(TARGET_MAD)\n Use PMC-style 'mad' instructions.\n \n mimadd\n-Target Report Mask(IMADD)\n+Target Mask(IMADD)\n Use integer madd/msub instructions.\n \n march=\n@@ -71,15 +71,15 @@ Target RejectNegative Joined UInteger Var(mips_branch_cost)\n -mbranch-cost=COST\tSet the cost of branches to roughly COST instructions.\n \n mbranch-likely\n-Target Report Mask(BRANCHLIKELY)\n+Target Mask(BRANCHLIKELY)\n Use Branch Likely instructions, overriding the architecture default.\n \n mflip-mips16\n-Target Report Var(TARGET_FLIP_MIPS16)\n+Target Var(TARGET_FLIP_MIPS16)\n Switch on/off MIPS16 ASE on alternating functions for compiler testing.\n \n mcheck-zero-division\n-Target Report Mask(CHECK_ZERO_DIV)\n+Target Mask(CHECK_ZERO_DIV)\n Trap on integer divide by zero.\n \n mcode-readable=\n@@ -100,27 +100,27 @@ EnumValue\n Enum(mips_code_readable_setting) String(no) Value(CODE_READABLE_NO)\n \n mdivide-breaks\n-Target Report RejectNegative Mask(DIVIDE_BREAKS)\n+Target RejectNegative Mask(DIVIDE_BREAKS)\n Use branch-and-break sequences to check for integer divide by zero.\n \n mdivide-traps\n-Target Report RejectNegative InverseMask(DIVIDE_BREAKS, DIVIDE_TRAPS)\n+Target RejectNegative InverseMask(DIVIDE_BREAKS, DIVIDE_TRAPS)\n Use trap instructions to check for integer divide by zero.\n \n mdmx\n-Target Report RejectNegative Var(TARGET_MDMX)\n+Target RejectNegative Var(TARGET_MDMX)\n Allow the use of MDMX instructions.\n \n mdouble-float\n-Target Report RejectNegative InverseMask(SINGLE_FLOAT, DOUBLE_FLOAT)\n+Target RejectNegative InverseMask(SINGLE_FLOAT, DOUBLE_FLOAT)\n Allow hardware floating-point instructions to cover both 32-bit and 64-bit operations.\n \n mdsp\n-Target Report Var(TARGET_DSP)\n+Target Var(TARGET_DSP)\n Use MIPS-DSP instructions.\n \n mdspr2\n-Target Report Var(TARGET_DSPR2)\n+Target Var(TARGET_DSPR2)\n Use MIPS-DSP REV 2 instructions.\n \n mdebug\n@@ -130,83 +130,83 @@ mdebugd\n Target Var(TARGET_DEBUG_D_MODE) Undocumented\n \n meb\n-Target Report RejectNegative Mask(BIG_ENDIAN)\n+Target RejectNegative Mask(BIG_ENDIAN)\n Use big-endian byte order.\n \n mel\n-Target Report RejectNegative InverseMask(BIG_ENDIAN, LITTLE_ENDIAN)\n+Target RejectNegative InverseMask(BIG_ENDIAN, LITTLE_ENDIAN)\n Use little-endian byte order.\n \n membedded-data\n-Target Report Var(TARGET_EMBEDDED_DATA)\n+Target Var(TARGET_EMBEDDED_DATA)\n Use ROM instead of RAM.\n \n meva\n-Target Report Var(TARGET_EVA)\n+Target Var(TARGET_EVA)\n Use Enhanced Virtual Addressing instructions.\n \n mexplicit-relocs\n-Target Report Mask(EXPLICIT_RELOCS)\n+Target Mask(EXPLICIT_RELOCS)\n Use NewABI-style %reloc() assembly operators.\n \n mextern-sdata\n-Target Report Var(TARGET_EXTERN_SDATA) Init(1)\n+Target Var(TARGET_EXTERN_SDATA) Init(1)\n Use -G for data that is not defined by the current object.\n \n mfix-24k\n-Target Report Var(TARGET_FIX_24K)\n+Target Var(TARGET_FIX_24K)\n Work around certain 24K errata.\n \n mfix-r4000\n-Target Report Mask(FIX_R4000)\n+Target Mask(FIX_R4000)\n Work around certain R4000 errata.\n \n mfix-r4400\n-Target Report Mask(FIX_R4400)\n+Target Mask(FIX_R4400)\n Work around certain R4400 errata.\n \n mfix-r5900\n-Target Report Mask(FIX_R5900)\n+Target Mask(FIX_R5900)\n Work around the R5900 short loop erratum.\n \n mfix-rm7000\n-Target Report Var(TARGET_FIX_RM7000)\n+Target Var(TARGET_FIX_RM7000)\n Work around certain RM7000 errata.\n \n mfix-r10000\n-Target Report Mask(FIX_R10000)\n+Target Mask(FIX_R10000)\n Work around certain R10000 errata.\n \n mfix-sb1\n-Target Report Var(TARGET_FIX_SB1)\n+Target Var(TARGET_FIX_SB1)\n Work around errata for early SB-1 revision 2 cores.\n \n mfix-vr4120\n-Target Report Var(TARGET_FIX_VR4120)\n+Target Var(TARGET_FIX_VR4120)\n Work around certain VR4120 errata.\n \n mfix-vr4130\n-Target Report Var(TARGET_FIX_VR4130)\n+Target Var(TARGET_FIX_VR4130)\n Work around VR4130 mflo/mfhi errata.\n \n mfix4300\n-Target Report Var(TARGET_4300_MUL_FIX)\n+Target Var(TARGET_4300_MUL_FIX)\n Work around an early 4300 hardware bug.\n \n mfp-exceptions\n-Target Report Var(TARGET_FP_EXCEPTIONS) Init(1)\n+Target Var(TARGET_FP_EXCEPTIONS) Init(1)\n FP exceptions are enabled.\n \n mfp32\n-Target Report RejectNegative InverseMask(FLOAT64)\n+Target RejectNegative InverseMask(FLOAT64)\n Use 32-bit floating-point registers.\n \n mfpxx\n-Target Report RejectNegative Mask(FLOATXX)\n+Target RejectNegative Mask(FLOATXX)\n Conform to the o32 FPXX ABI.\n \n mfp64\n-Target Report RejectNegative Mask(FLOAT64)\n+Target RejectNegative Mask(FLOAT64)\n Use 64-bit floating-point registers.\n \n mflush-func=\n@@ -232,111 +232,111 @@ EnumValue\n Enum(mips_ieee_754_value) String(legacy) Value(MIPS_IEEE_754_LEGACY)\n \n mgp32\n-Target Report RejectNegative InverseMask(64BIT)\n+Target RejectNegative InverseMask(64BIT)\n Use 32-bit general registers.\n \n mgp64\n-Target Report RejectNegative Mask(64BIT)\n+Target RejectNegative Mask(64BIT)\n Use 64-bit general registers.\n \n mgpopt\n-Target Report Var(TARGET_GPOPT) Init(1)\n+Target Var(TARGET_GPOPT) Init(1)\n Use GP-relative addressing to access small data.\n \n mplt\n-Target Report Var(TARGET_PLT)\n+Target Var(TARGET_PLT)\n When generating -mabicalls code, allow executables to use PLTs and copy relocations.\n \n mhard-float\n-Target Report RejectNegative InverseMask(SOFT_FLOAT_ABI, HARD_FLOAT_ABI)\n+Target RejectNegative InverseMask(SOFT_FLOAT_ABI, HARD_FLOAT_ABI)\n Allow the use of hardware floating-point ABI and instructions.\n \n minterlink-compressed\n-Target Report Var(TARGET_INTERLINK_COMPRESSED) Init(0)\n+Target Var(TARGET_INTERLINK_COMPRESSED) Init(0)\n Generate code that is link-compatible with MIPS16 and microMIPS code.\n \n minterlink-mips16\n-Target Report Var(TARGET_INTERLINK_COMPRESSED) Init(0)\n+Target Var(TARGET_INTERLINK_COMPRESSED) Init(0)\n An alias for minterlink-compressed provided for backward-compatibility.\n \n mips\n Target RejectNegative Joined ToLower Enum(mips_mips_opt_value) Var(mips_isa_option)\n -mipsN\tGenerate code for ISA level N.\n \n mips16\n-Target Report RejectNegative Mask(MIPS16)\n+Target RejectNegative Mask(MIPS16)\n Generate MIPS16 code.\n \n mips3d\n-Target Report RejectNegative Var(TARGET_MIPS3D)\n+Target RejectNegative Var(TARGET_MIPS3D)\n Use MIPS-3D instructions.\n \n mllsc\n-Target Report Mask(LLSC)\n+Target Mask(LLSC)\n Use ll, sc and sync instructions.\n \n mlocal-sdata\n-Target Report Var(TARGET_LOCAL_SDATA) Init(1)\n+Target Var(TARGET_LOCAL_SDATA) Init(1)\n Use -G for object-local data.\n \n mlong-calls\n-Target Report Var(TARGET_LONG_CALLS)\n+Target Var(TARGET_LONG_CALLS)\n Use indirect calls.\n \n mlong32\n-Target Report RejectNegative InverseMask(LONG64, LONG32)\n+Target RejectNegative InverseMask(LONG64, LONG32)\n Use a 32-bit long type.\n \n mlong64\n-Target Report RejectNegative Mask(LONG64)\n+Target RejectNegative Mask(LONG64)\n Use a 64-bit long type.\n \n mmcount-ra-address\n-Target Report Var(TARGET_MCOUNT_RA_ADDRESS)\n+Target Var(TARGET_MCOUNT_RA_ADDRESS)\n Pass the address of the ra save location to _mcount in $12.\n \n mmemcpy\n-Target Report Mask(MEMCPY)\n+Target Mask(MEMCPY)\n Don't optimize block moves.\n \n mmicromips\n-Target Report Mask(MICROMIPS)\n+Target Mask(MICROMIPS)\n Use microMIPS instructions.\n \n mmsa\n-Target Report Mask(MSA)\n+Target Mask(MSA)\n Use MIPS MSA Extension instructions.\n \n mmt\n-Target Report Var(TARGET_MT)\n+Target Var(TARGET_MT)\n Allow the use of MT instructions.\n \n mno-float\n-Target Report RejectNegative Var(TARGET_NO_FLOAT) Condition(TARGET_SUPPORTS_NO_FLOAT)\n+Target RejectNegative Var(TARGET_NO_FLOAT) Condition(TARGET_SUPPORTS_NO_FLOAT)\n Prevent the use of all floating-point operations.\n \n mmcu\n-Target Report Var(TARGET_MCU)\n+Target Var(TARGET_MCU)\n Use MCU instructions.\n \n mno-flush-func\n Target RejectNegative\n Do not use a cache-flushing function before calling stack trampolines.\n \n mno-mdmx\n-Target Report RejectNegative Var(TARGET_MDMX, 0)\n+Target RejectNegative Var(TARGET_MDMX, 0)\n Do not use MDMX instructions.\n \n mno-mips16\n-Target Report RejectNegative InverseMask(MIPS16)\n+Target RejectNegative InverseMask(MIPS16)\n Generate normal-mode code.\n \n mno-mips3d\n-Target Report RejectNegative Var(TARGET_MIPS3D, 0)\n+Target RejectNegative Var(TARGET_MIPS3D, 0)\n Do not use MIPS-3D instructions.\n \n mpaired-single\n-Target Report Mask(PAIRED_SINGLE_FLOAT)\n+Target Mask(PAIRED_SINGLE_FLOAT)\n Use paired-single floating-point instructions.\n \n mr10k-cache-barrier=\n@@ -357,98 +357,98 @@ EnumValue\n Enum(mips_r10k_cache_barrier_setting) String(none) Value(R10K_CACHE_BARRIER_NONE)\n \n mrelax-pic-calls\n-Target Report Mask(RELAX_PIC_CALLS)\n+Target Mask(RELAX_PIC_CALLS)\n Try to allow the linker to turn PIC calls into direct calls.\n \n mshared\n-Target Report Var(TARGET_SHARED) Init(1)\n+Target Var(TARGET_SHARED) Init(1)\n When generating -mabicalls code, make the code suitable for use in shared libraries.\n \n msingle-float\n-Target Report RejectNegative Mask(SINGLE_FLOAT)\n+Target RejectNegative Mask(SINGLE_FLOAT)\n Restrict the use of hardware floating-point instructions to 32-bit operations.\n \n msmartmips\n-Target Report Mask(SMARTMIPS)\n+Target Mask(SMARTMIPS)\n Use SmartMIPS instructions.\n \n msoft-float\n-Target Report RejectNegative Mask(SOFT_FLOAT_ABI)\n+Target RejectNegative Mask(SOFT_FLOAT_ABI)\n Prevent the use of all hardware floating-point instructions.\n \n msplit-addresses\n-Target Report Mask(SPLIT_ADDRESSES)\n+Target Mask(SPLIT_ADDRESSES)\n Optimize lui/addiu address loads.\n \n msym32\n-Target Report Var(TARGET_SYM32)\n+Target Var(TARGET_SYM32)\n Assume all symbols have 32-bit values.\n \n msynci\n-Target Report Mask(SYNCI)\n+Target Mask(SYNCI)\n Use synci instruction to invalidate i-cache.\n \n mlra\n-Target Report Var(mips_lra_flag) Init(1) Save\n+Target Var(mips_lra_flag) Init(1) Save\n Use LRA instead of reload.\n \n mlxc1-sxc1\n-Target Report Var(mips_lxc1_sxc1) Init(1)\n+Target Var(mips_lxc1_sxc1) Init(1)\n Use lwxc1/swxc1/ldxc1/sdxc1 instructions where applicable.\n \n mmadd4\n-Target Report Var(mips_madd4) Init(1)\n+Target Var(mips_madd4) Init(1)\n Use 4-operand madd.s/madd.d and related instructions where applicable.\n \n mtune=\n Target RejectNegative Joined Var(mips_tune_option) ToLower Enum(mips_arch_opt_value)\n -mtune=PROCESSOR\tOptimize the output for PROCESSOR.\n \n muninit-const-in-rodata\n-Target Report Var(TARGET_UNINIT_CONST_IN_RODATA)\n+Target Var(TARGET_UNINIT_CONST_IN_RODATA)\n Put uninitialized constants in ROM (needs -membedded-data).\n \n mvirt\n-Target Report Var(TARGET_VIRT)\n+Target Var(TARGET_VIRT)\n Use Virtualization (VZ) instructions.\n \n mxpa\n-Target Report Var(TARGET_XPA)\n+Target Var(TARGET_XPA)\n Use eXtended Physical Address (XPA) instructions.\n \n mcrc\n-Target Report Var(TARGET_CRC)\n+Target Var(TARGET_CRC)\n Use Cyclic Redundancy Check (CRC) instructions.\n \n mginv\n-Target Report Var(TARGET_GINV)\n+Target Var(TARGET_GINV)\n Use Global INValidate (GINV) instructions.\n \n mvr4130-align\n-Target Report Mask(VR4130_ALIGN)\n+Target Mask(VR4130_ALIGN)\n Perform VR4130-specific alignment optimizations.\n \n mxgot\n-Target Report Var(TARGET_XGOT)\n+Target Var(TARGET_XGOT)\n Lift restrictions on GOT size.\n \n modd-spreg\n-Target Report Mask(ODD_SPREG)\n+Target Mask(ODD_SPREG)\n Enable use of odd-numbered single-precision registers.\n \n mframe-header-opt\n-Target Report Var(flag_frame_header_optimization) Optimization\n+Target Var(flag_frame_header_optimization) Optimization\n Optimize frame header.\n \n noasmopt\n Driver\n \n mload-store-pairs\n-Target Report Var(TARGET_LOAD_STORE_PAIRS) Init(1)\n+Target Var(TARGET_LOAD_STORE_PAIRS) Init(1)\n Enable load/store bonding.\n \n mcompact-branches=\n-Target RejectNegative JoinedOrMissing Var(mips_cb) Report Enum(mips_cb_setting) Init(MIPS_CB_OPTIMAL)\n+Target RejectNegative JoinedOrMissing Var(mips_cb) Enum(mips_cb_setting) Init(MIPS_CB_OPTIMAL)\n Specify the compact branch usage policy.\n \n Enum\n@@ -465,13 +465,13 @@ EnumValue\n Enum(mips_cb_setting) String(always) Value(MIPS_CB_ALWAYS)\n \n mloongson-mmi\n-Target Report Mask(LOONGSON_MMI)\n+Target Mask(LOONGSON_MMI)\n Use Loongson MultiMedia extensions Instructions (MMI) instructions.\n \n mloongson-ext\n-Target Report Mask(LOONGSON_EXT)\n+Target Mask(LOONGSON_EXT)\n Use Loongson EXTension (EXT) instructions.\n \n mloongson-ext2\n-Target Report Var(TARGET_LOONGSON_EXT2)\n+Target Var(TARGET_LOONGSON_EXT2)\n Use Loongson EXTension R2 (EXT2) instructions."}, {"sha": "38e5c598d7a598e123dc0d36e73292e1baad6134", "filename": "gcc/config/mmix/mmix.opt", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmmix%2Fmmix.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmmix%2Fmmix.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -20,48 +20,48 @@\n \n ; FIXME: Get rid of this one.\n mlibfuncs\n-Target Report Mask(LIBFUNC)\n+Target Mask(LIBFUNC)\n For intrinsics library: pass all parameters in registers.\n \n mabi=mmixware\n-Target Report RejectNegative InverseMask(ABI_GNU)\n+Target RejectNegative InverseMask(ABI_GNU)\n Use register stack for parameters and return value.\n \n mabi=gnu\n-Target Report RejectNegative Mask(ABI_GNU)\n+Target RejectNegative Mask(ABI_GNU)\n Use call-clobbered registers for parameters and return value.\n \n ; FIXME: Provide a way to *load* the epsilon register.\n mepsilon\n-Target Report Mask(FCMP_EPSILON)\n+Target Mask(FCMP_EPSILON)\n Use epsilon-respecting floating point compare instructions.\n \n mzero-extend\n-Target Report Mask(ZERO_EXTEND)\n+Target Mask(ZERO_EXTEND)\n Use zero-extending memory loads, not sign-extending ones.\n \n mknuthdiv\n-Target Report Mask(KNUTH_DIVISION)\n+Target Mask(KNUTH_DIVISION)\n Generate divide results with reminder having the same sign as the divisor (not the dividend).\n \n mtoplevel-symbols\n-Target Report Mask(TOPLEVEL_SYMBOLS)\n+Target Mask(TOPLEVEL_SYMBOLS)\n Prepend global symbols with \\\":\\\" (for use with PREFIX).\n \n mno-set-program-start\n-Target Report RejectNegative\n+Target RejectNegative\n Do not provide a default start-address 0x100 of the program.\n \n melf\n-Target Report RejectNegative\n+Target RejectNegative\n Link to emit program in ELF format (rather than mmo).\n \n mbranch-predict\n-Target Report RejectNegative Mask(BRANCH_PREDICT)\n+Target RejectNegative Mask(BRANCH_PREDICT)\n Use P-mnemonics for branches statically predicted as taken.\n \n mno-branch-predict\n-Target Report RejectNegative InverseMask(BRANCH_PREDICT)\n+Target RejectNegative InverseMask(BRANCH_PREDICT)\n Don't use P-mnemonics for branches.\n \n ; We use the term \"base address\" since that's what Knuth uses.  The base\n@@ -75,25 +75,25 @@ Don't use P-mnemonics for branches.\n ; registers, and you'll not find out until link time whether you\n ; should have compiled with -mno-base-addresses.\n mbase-addresses\n-Target Report RejectNegative Mask(BASE_ADDRESSES)\n+Target RejectNegative Mask(BASE_ADDRESSES)\n Use addresses that allocate global registers.\n \n mno-base-addresses\n-Target Report RejectNegative InverseMask(BASE_ADDRESSES)\n+Target RejectNegative InverseMask(BASE_ADDRESSES)\n Do not use addresses that allocate global registers.\n \n msingle-exit\n-Target Report RejectNegative InverseMask(USE_RETURN_INSN)\n+Target RejectNegative InverseMask(USE_RETURN_INSN)\n Generate a single exit point for each function.\n \n mno-single-exit\n-Target Report RejectNegative Mask(USE_RETURN_INSN)\n+Target RejectNegative Mask(USE_RETURN_INSN)\n Do not generate a single exit point for each function.\n \n mset-program-start=\n-Target Report RejectNegative Joined\n+Target RejectNegative Joined\n Set start-address of the program.\n \n mset-data-start=\n-Target Report RejectNegative Joined\n+Target RejectNegative Joined\n Set start-address of data."}, {"sha": "b1b9c8b2ca4b62c601ca67ef025e495de79280ce", "filename": "gcc/config/mn10300/mn10300.opt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmn10300%2Fmn10300.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmn10300%2Fmn10300.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -34,15 +34,15 @@ Target\n Target the AM33/2.0 processor.\n \n mam34\n-Target Report\n+Target\n Target the AM34 processor.\n \n mtune=\n Target RejectNegative Joined Var(mn10300_tune_string)\n Tune code for the given processor.\n \n mmult-bug\n-Target Report Mask(MULT_BUG)\n+Target Mask(MULT_BUG)\n Work around hardware multiply bug.\n \n ; Ignored by the compiler\n@@ -55,13 +55,13 @@ Target RejectNegative\n Enable linker relaxations.\n \n mreturn-pointer-on-d0\n-Target Report Mask(PTR_A0D0)\n+Target Mask(PTR_A0D0)\n Return pointers in both a0 and d0.\n \n mliw\n-Target Report Mask(ALLOW_LIW)\n+Target Mask(ALLOW_LIW)\n Allow gcc to generate LIW instructions.\n \n msetlb\n-Target Report Mask(ALLOW_SETLB)\n+Target Mask(ALLOW_SETLB)\n Allow gcc to generate the SETLB and Lcc instructions."}, {"sha": "7c77823e2c0c3450e894de0a9bef4a74a92e738d", "filename": "gcc/config/moxie/moxie.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmoxie%2Fmoxie.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmoxie%2Fmoxie.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,15 +19,15 @@\n ; <http://www.gnu.org/licenses/>.\n \n meb\n-Target RejectNegative Report InverseMask(LITTLE_ENDIAN)\n+Target RejectNegative InverseMask(LITTLE_ENDIAN)\n Generate big-endian code.\n \n mel\n-Target RejectNegative Report Mask(LITTLE_ENDIAN)\n+Target RejectNegative Mask(LITTLE_ENDIAN)\n Generate little-endian code.\n \n mmul.x\n-Target Report Mask(HAS_MULX)\n+Target Mask(HAS_MULX)\n Enable MUL.X and UMUL.X instructions.\n \n ; Ignored by the compiler"}, {"sha": "56dc996f9d941e5eed5f3e0e8d50d4433cb4d93d", "filename": "gcc/config/msp430/msp430.opt", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -3,27 +3,27 @@ Target\n Use simulator runtime.\n \n mtiny-printf\n-Target Report Mask(TINY_PRINTF)\n+Target Mask(TINY_PRINTF)\n Use a lightweight configuration of printf and puts to reduce code size. For single-threaded applications, not requiring reentrant I/O only. Requires Newlib Nano IO.\n \n masm-hex\n Target Mask(ASM_HEX)\n Force assembly output to always use hex constants.\n \n mmcu=\n-Target Report ToLower Joined RejectNegative Var(target_mcu)\n+Target ToLower Joined RejectNegative Var(target_mcu)\n Specify the MCU to build for.\n \n mwarn-mcu\n-Target Report Var(msp430_warn_mcu) Init(1)\n+Target Var(msp430_warn_mcu) Init(1)\n Warn if an MCU name is unrecognized or conflicts with other options (default: on).\n \n mwarn-devices-csv\n-Target Report Var(msp430_warn_devices_csv) Init(1)\n+Target Var(msp430_warn_devices_csv) Init(1)\n Warn if devices.csv is not found or there are problem parsing it (default: on).\n \n mcpu=\n-Target Report Joined RejectNegative Var(target_cpu) ToLower Enum(msp430_cpu_types) Init(MSP430_CPU_MSP430X_DEFAULT)\n+Target Joined RejectNegative Var(target_cpu) ToLower Enum(msp430_cpu_types) Init(MSP430_CPU_MSP430X_DEFAULT)\n Specify the ISA to build for: msp430, msp430x, msp430xv2.\n \n Enum\n@@ -48,29 +48,29 @@ EnumValue\n Enum(msp430_cpu_types) String(430xv2) Value(MSP430_CPU_MSP430XV2)\n \n mlarge\n-Target Report Mask(LARGE) RejectNegative\n+Target Mask(LARGE) RejectNegative\n Select large model - 20-bit addresses/pointers.\n \n msmall\n-Target Report InverseMask(LARGE) RejectNegative\n+Target InverseMask(LARGE) RejectNegative\n Select small model - 16-bit addresses/pointers (default).\n \n mrelax\n-Target Report\n+Target\n Optimize opcode sizes at link time.\n \n mOs\n Target Undocumented Mask(OPT_SPACE)\n \n minrt\n-Target Report Mask(MINRT) RejectNegative\n+Target Mask(MINRT) RejectNegative\n Use a minimum runtime (no static initializers or ctors) for memory-constrained devices.\n \n HeaderInclude\n config/msp430/msp430-opts.h\n \n mhwmult=\n-Target Joined RejectNegative Report ToLower Var(msp430_hwmult_type) Enum(msp430_hwmult_types) Init(MSP430_HWMULT_AUTO)\n+Target Joined RejectNegative ToLower Var(msp430_hwmult_type) Enum(msp430_hwmult_types) Init(MSP430_HWMULT_AUTO)\n Specify the type of hardware multiply to support.\n \n Enum\n@@ -92,15 +92,15 @@ EnumValue\n Enum(msp430_hwmult_types) String(f5series) Value(MSP430_HWMULT_F5SERIES)\n \n mcode-region=\n-Target Joined RejectNegative Report ToLower Var(msp430_code_region) Enum(msp430_regions) Init(MSP430_REGION_LOWER)\n+Target Joined RejectNegative ToLower Var(msp430_code_region) Enum(msp430_regions) Init(MSP430_REGION_LOWER)\n Specify whether functions should be placed into the lower or upper memory regions, or if they should be shuffled between the regions (either) for best fit (default: lower).\n \n mdata-region=\n-Target Joined RejectNegative Report ToLower Var(msp430_data_region) Enum(msp430_regions) Init(MSP430_REGION_LOWER)\n+Target Joined RejectNegative ToLower Var(msp430_data_region) Enum(msp430_regions) Init(MSP430_REGION_LOWER)\n Specify whether variables should be placed into the lower or upper memory regions, or if they should be shuffled between the regions (either) for best fit (default: lower).\n \n muse-lower-region-prefix\n-Target Mask(USE_LOWER_REGION_PREFIX) Report\n+Target Mask(USE_LOWER_REGION_PREFIX)\n Add the .lower prefix to section names when compiling with -m{code,data}-region=lower (disabled by default).\n \n Enum\n@@ -119,20 +119,20 @@ EnumValue\n Enum(msp430_regions) String(upper) Value(MSP430_REGION_UPPER)\n \n msilicon-errata=\n-Target Joined RejectNegative Report ToLower\n+Target Joined RejectNegative ToLower\n Passes on a request to the assembler to enable fixes for various silicon errata.\n \n msilicon-errata-warn=\n-Target Joined RejectNegative Report ToLower\n+Target Joined RejectNegative ToLower\n Passes on a request to the assembler to warn about various silicon errata.\n \n mdevices-csv-loc=\n-Target Joined Var(msp430_devices_csv_loc) RejectNegative Report\n+Target Joined Var(msp430_devices_csv_loc) RejectNegative\n The path to devices.csv.  The GCC driver can normally locate devices.csv itself\n and pass this option to the compiler, so the user shouldn't need to pass this.\n \n mmax-inline-shift=\n-Target RejectNegative Joined UInteger IntegerRange(0,65) Var(msp430_max_inline_shift) Init(65) Report\n+Target RejectNegative Joined UInteger IntegerRange(0,65) Var(msp430_max_inline_shift) Init(65)\n For shift operations by a constant amount, which require an individual instruction to shift by one\n position, set the maximum number of inline shift instructions (maximum value 64) to emit instead of using the corresponding __mspabi helper function.\n The default value is 4."}, {"sha": "dcd05c989dcb03ecbb27250e86cc20ecddc5f3f1", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -67,11 +67,11 @@ Specify use soft floating point ABI which mean alias to -mabi=2fp+.\n ; ---------------------------------------------------------------\n \n mreduced-regs\n-Target Report RejectNegative Negative(mfull-regs) Mask(REDUCED_REGS)\n+Target RejectNegative Negative(mfull-regs) Mask(REDUCED_REGS)\n Use reduced-set registers for register allocation.\n \n mfull-regs\n-Target Report RejectNegative Negative(mreduced-regs) InverseMask(REDUCED_REGS)\n+Target RejectNegative Negative(mreduced-regs) InverseMask(REDUCED_REGS)\n Use full-set registers for register allocation.\n \n ; ---------------------------------------------------------------\n@@ -115,43 +115,43 @@ EnumValue\n Enum(nds32_ict_model_type) String(large) Value(ICT_MODEL_LARGE)\n \n mcmov\n-Target Report Mask(CMOV)\n+Target Mask(CMOV)\n Generate conditional move instructions.\n \n mhw-abs\n-Target Report Mask(HW_ABS)\n+Target Mask(HW_ABS)\n Generate hardware abs instructions.\n \n mext-perf\n-Target Report Mask(EXT_PERF)\n+Target Mask(EXT_PERF)\n Generate performance extension instructions.\n \n mext-perf2\n-Target Report Mask(EXT_PERF2)\n+Target Mask(EXT_PERF2)\n Generate performance extension version 2 instructions.\n \n mext-string\n-Target Report Mask(EXT_STRING)\n+Target Mask(EXT_STRING)\n Generate string extension instructions.\n \n mext-dsp\n-Target Report Mask(EXT_DSP)\n+Target Mask(EXT_DSP)\n Generate DSP extension instructions.\n \n mv3push\n-Target Report Mask(V3PUSH)\n+Target Mask(V3PUSH)\n Generate v3 push25/pop25 instructions.\n \n m16-bit\n-Target Report Mask(16_BIT)\n+Target Mask(16_BIT)\n Generate 16-bit instructions.\n \n mrelax-hint\n-Target Report Mask(RELAX_HINT)\n+Target Mask(RELAX_HINT)\n Insert relax hint for linker to do relaxation.\n \n mvh\n-Target Report Mask(VH) Condition(!TARGET_LINUX_ABI)\n+Target Mask(VH) Condition(!TARGET_LINUX_ABI)\n Enable Virtual Hosting support.\n \n misr-vector-size=\n@@ -421,27 +421,27 @@ EnumValue\n Enum(nds32_register_ports) String(2r1w) Value(REG_PORT_2R1W)\n \n mctor-dtor\n-Target Report\n+Target\n Enable constructor/destructor feature.\n \n mrelax\n-Target Report\n+Target\n Guide linker to relax instructions.\n \n mext-fpu-fma\n-Target Report Mask(EXT_FPU_FMA)\n+Target Mask(EXT_FPU_FMA)\n Generate floating-point multiply-accumulation instructions.\n \n mext-fpu-sp\n-Target Report Mask(FPU_SINGLE)\n+Target Mask(FPU_SINGLE)\n Generate single-precision floating-point instructions.\n \n mext-fpu-dp\n-Target Report Mask(FPU_DOUBLE)\n+Target Mask(FPU_DOUBLE)\n Generate double-precision floating-point instructions.\n \n mforce-no-ext-dsp\n-Target Undocumented Report Mask(FORCE_NO_EXT_DSP)\n+Target Undocumented Mask(FORCE_NO_EXT_DSP)\n Force disable hardware loop, even use -mext-dsp.\n \n msched-prolog-epilog\n@@ -457,9 +457,9 @@ Target Var(flag_always_save_lp) Init(0)\n Always save $lp in the stack.\n \n munaligned-access\n-Target Report Var(flag_unaligned_access) Init(0)\n+Target Var(flag_unaligned_access) Init(0)\n Enable unaligned word and halfword accesses to packed data.\n \n minline-asm-r15\n-Target Report Var(flag_inline_asm_r15) Init(0)\n+Target Var(flag_inline_asm_r15) Init(0)\n Allow use r15 for inline ASM."}, {"sha": "e8626e0167f1c4e692f1388f6574f3aa9ee986ce", "filename": "gcc/config/nios2/elf.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fnios2%2Felf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fnios2%2Felf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Felf.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -22,7 +22,7 @@\n ; toolchains.\n \n msmallc\n-Target Report RejectNegative\n+Target RejectNegative\n Link with a limited version of the C library.\n \n msys-lib=\n@@ -34,5 +34,5 @@ Target RejectNegative Joined Var(nios2_sys_crt0_string)\n Name of the startfile.\n \n mhal\n-Target Report RejectNegative\n+Target RejectNegative\n Link with HAL BSP."}, {"sha": "39d278a3df0d0854b7b63059437b2ef3e14eedb5", "filename": "gcc/config/nios2/nios2.opt", "status": "modified", "additions": 129, "deletions": 129, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fnios2%2Fnios2.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fnios2%2Fnios2.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -31,31 +31,31 @@ TargetSave\n int saved_custom_code_index[256]\n \n mhw-div\n-Target Report Mask(HAS_DIV)\n+Target Mask(HAS_DIV)\n Enable DIV, DIVU.\n \n mhw-mul\n-Target Report Mask(HAS_MUL)\n+Target Mask(HAS_MUL)\n Enable MUL instructions.\n \n mhw-mulx\n-Target Report Mask(HAS_MULX)\n+Target Mask(HAS_MULX)\n Enable MULX instructions, assume fast shifter.\n \n mfast-sw-div\n-Target Report Mask(FAST_SW_DIV)\n+Target Mask(FAST_SW_DIV)\n Use table based fast divide (default at -O3).\n \n mbypass-cache\n-Target Report Mask(BYPASS_CACHE)\n+Target Mask(BYPASS_CACHE)\n All memory accesses use I/O load/store instructions.\n \n mno-cache-volatile\n-Target Report RejectNegative Mask(BYPASS_CACHE_VOLATILE)\n+Target RejectNegative Mask(BYPASS_CACHE_VOLATILE)\n Volatile memory accesses use I/O load/store instructions.\n \n mcache-volatile\n-Target Report RejectNegative Undocumented InverseMask(BYPASS_CACHE_VOLATILE)\n+Target RejectNegative Undocumented InverseMask(BYPASS_CACHE_VOLATILE)\n Volatile memory accesses do not use I/O load/store instructions.\n \n mgpopt=\n@@ -82,487 +82,487 @@ EnumValue\n Enum(nios2_gpopt_type) String(all) Value(gpopt_all)\n \n mgpopt\n-Target Report RejectNegative Var(nios2_gpopt_option, gpopt_local)\n+Target RejectNegative Var(nios2_gpopt_option, gpopt_local)\n Equivalent to -mgpopt=local.\n \n mno-gpopt\n-Target Report RejectNegative Var(nios2_gpopt_option, gpopt_none)\n+Target RejectNegative Var(nios2_gpopt_option, gpopt_none)\n Equivalent to -mgpopt=none.\n \n meb\n-Target Report RejectNegative Mask(BIG_ENDIAN)\n+Target RejectNegative Mask(BIG_ENDIAN)\n Use big-endian byte order.\n \n mel\n-Target Report RejectNegative InverseMask(BIG_ENDIAN)\n+Target RejectNegative InverseMask(BIG_ENDIAN)\n Use little-endian byte order.\n \n mcustom-fpu-cfg=\n Target RejectNegative Joined Var(nios2_custom_fpu_cfg_string)\n Floating point custom instruction configuration name.\n \n mno-custom-ftruncds\n-Target Report RejectNegative Var(nios2_custom_ftruncds, -1)\n+Target RejectNegative Var(nios2_custom_ftruncds, -1)\n Do not use the ftruncds custom instruction.\n \n mcustom-ftruncds=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_ftruncds) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_ftruncds) Init(-1)\n Integer id (N) of ftruncds custom instruction.\n \n mno-custom-fextsd\n-Target Report RejectNegative Var(nios2_custom_fextsd, -1)\n+Target RejectNegative Var(nios2_custom_fextsd, -1)\n Do not use the fextsd custom instruction.\n \n mcustom-fextsd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fextsd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fextsd) Init(-1)\n Integer id (N) of fextsd custom instruction.\n \n mno-custom-fixdu\n-Target Report RejectNegative Var(nios2_custom_fixdu, -1)\n+Target RejectNegative Var(nios2_custom_fixdu, -1)\n Do not use the fixdu custom instruction.\n \n mcustom-fixdu=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fixdu) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fixdu) Init(-1)\n Integer id (N) of fixdu custom instruction.\n \n mno-custom-fixdi\n-Target Report RejectNegative Var(nios2_custom_fixdi, -1)\n+Target RejectNegative Var(nios2_custom_fixdi, -1)\n Do not use the fixdi custom instruction.\n \n mcustom-fixdi=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fixdi) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fixdi) Init(-1)\n Integer id (N) of fixdi custom instruction.\n \n mno-custom-fixsu\n-Target Report RejectNegative Var(nios2_custom_fixsu, -1)\n+Target RejectNegative Var(nios2_custom_fixsu, -1)\n Do not use the fixsu custom instruction.\n \n mcustom-fixsu=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fixsu) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fixsu) Init(-1)\n Integer id (N) of fixsu custom instruction.\n \n mno-custom-fixsi\n-Target Report RejectNegative Var(nios2_custom_fixsi, -1)\n+Target RejectNegative Var(nios2_custom_fixsi, -1)\n Do not use the fixsi custom instruction.\n \n mcustom-fixsi=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fixsi) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fixsi) Init(-1)\n Integer id (N) of fixsi custom instruction.\n \n mno-custom-floatud\n-Target Report RejectNegative Var(nios2_custom_floatud, -1)\n+Target RejectNegative Var(nios2_custom_floatud, -1)\n Do not use the floatud custom instruction.\n \n mcustom-floatud=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_floatud) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_floatud) Init(-1)\n Integer id (N) of floatud custom instruction.\n \n mno-custom-floatid\n-Target Report RejectNegative Var(nios2_custom_floatid, -1)\n+Target RejectNegative Var(nios2_custom_floatid, -1)\n Do not use the floatid custom instruction.\n \n mcustom-floatid=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_floatid) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_floatid) Init(-1)\n Integer id (N) of floatid custom instruction.\n \n mno-custom-floatus\n-Target Report RejectNegative Var(nios2_custom_floatus, -1)\n+Target RejectNegative Var(nios2_custom_floatus, -1)\n Do not use the floatus custom instruction.\n \n mcustom-floatus=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_floatus) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_floatus) Init(-1)\n Integer id (N) of floatus custom instruction.\n \n mno-custom-floatis\n-Target Report RejectNegative Var(nios2_custom_floatis, -1)\n+Target RejectNegative Var(nios2_custom_floatis, -1)\n Do not use the floatis custom instruction.\n \n mcustom-floatis=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_floatis) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_floatis) Init(-1)\n Integer id (N) of floatis custom instruction.\n \n mno-custom-fcmpned\n-Target Report RejectNegative Var(nios2_custom_fcmpned, -1)\n+Target RejectNegative Var(nios2_custom_fcmpned, -1)\n Do not use the fcmpned custom instruction.\n \n mcustom-fcmpned=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpned) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmpned) Init(-1)\n Integer id (N) of fcmpned custom instruction.\n \n mno-custom-fcmpeqd\n-Target Report RejectNegative Var(nios2_custom_fcmpeqd, -1)\n+Target RejectNegative Var(nios2_custom_fcmpeqd, -1)\n Do not use the fcmpeqd custom instruction.\n \n mcustom-fcmpeqd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpeqd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmpeqd) Init(-1)\n Integer id (N) of fcmpeqd custom instruction.\n \n mno-custom-fcmpged\n-Target Report RejectNegative Var(nios2_custom_fcmpged, -1)\n+Target RejectNegative Var(nios2_custom_fcmpged, -1)\n Do not use the fcmpged custom instruction.\n \n mcustom-fcmpged=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpged) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmpged) Init(-1)\n Integer id (N) of fcmpged custom instruction.\n \n mno-custom-fcmpgtd\n-Target Report RejectNegative Var(nios2_custom_fcmpgtd, -1)\n+Target RejectNegative Var(nios2_custom_fcmpgtd, -1)\n Do not use the fcmpgtd custom instruction.\n \n mcustom-fcmpgtd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpgtd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmpgtd) Init(-1)\n Integer id (N) of fcmpgtd custom instruction.\n \n mno-custom-fcmpled\n-Target Report RejectNegative Var(nios2_custom_fcmpled, -1)\n+Target RejectNegative Var(nios2_custom_fcmpled, -1)\n Do not use the fcmpled custom instruction.\n \n mcustom-fcmpled=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpled) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmpled) Init(-1)\n Integer id (N) of fcmpled custom instruction.\n \n mno-custom-fcmpltd\n-Target Report RejectNegative Var(nios2_custom_fcmpltd, -1)\n+Target RejectNegative Var(nios2_custom_fcmpltd, -1)\n Do not use the fcmpltd custom instruction.\n \n mcustom-fcmpltd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpltd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmpltd) Init(-1)\n Integer id (N) of fcmpltd custom instruction.\n \n mno-custom-flogd\n-Target Report RejectNegative Var(nios2_custom_flogd, -1)\n+Target RejectNegative Var(nios2_custom_flogd, -1)\n Do not use the flogd custom instruction.\n \n mcustom-flogd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_flogd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_flogd) Init(-1)\n Integer id (N) of flogd custom instruction.\n \n mno-custom-fexpd\n-Target Report RejectNegative Var(nios2_custom_fexpd, -1)\n+Target RejectNegative Var(nios2_custom_fexpd, -1)\n Do not use the fexpd custom instruction.\n \n mcustom-fexpd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fexpd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fexpd) Init(-1)\n Integer id (N) of fexpd custom instruction.\n \n mno-custom-fatand\n-Target Report RejectNegative Var(nios2_custom_fatand, -1)\n+Target RejectNegative Var(nios2_custom_fatand, -1)\n Do not use the fatand custom instruction.\n \n mcustom-fatand=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fatand) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fatand) Init(-1)\n Integer id (N) of fatand custom instruction.\n \n mno-custom-ftand\n-Target Report RejectNegative Var(nios2_custom_ftand, -1)\n+Target RejectNegative Var(nios2_custom_ftand, -1)\n Do not use the ftand custom instruction.\n \n mcustom-ftand=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_ftand) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_ftand) Init(-1)\n Integer id (N) of ftand custom instruction.\n \n mno-custom-fsind\n-Target Report RejectNegative Var(nios2_custom_fsind, -1)\n+Target RejectNegative Var(nios2_custom_fsind, -1)\n Do not use the fsind custom instruction.\n \n mcustom-fsind=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fsind) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fsind) Init(-1)\n Integer id (N) of fsind custom instruction.\n \n mno-custom-fcosd\n-Target Report RejectNegative Var(nios2_custom_fcosd, -1)\n+Target RejectNegative Var(nios2_custom_fcosd, -1)\n Do not use the fcosd custom instruction.\n \n mcustom-fcosd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcosd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcosd) Init(-1)\n Integer id (N) of fcosd custom instruction.\n \n mno-custom-fsqrtd\n-Target Report RejectNegative Var(nios2_custom_fsqrtd, -1)\n+Target RejectNegative Var(nios2_custom_fsqrtd, -1)\n Do not use the fsqrtd custom instruction.\n \n mcustom-fsqrtd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fsqrtd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fsqrtd) Init(-1)\n Integer id (N) of fsqrtd custom instruction.\n \n mno-custom-fabsd\n-Target Report RejectNegative Var(nios2_custom_fabsd, -1)\n+Target RejectNegative Var(nios2_custom_fabsd, -1)\n Do not use the fabsd custom instruction.\n \n mcustom-fabsd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fabsd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fabsd) Init(-1)\n Integer id (N) of fabsd custom instruction.\n \n mno-custom-fnegd\n-Target Report RejectNegative Var(nios2_custom_fnegd, -1)\n+Target RejectNegative Var(nios2_custom_fnegd, -1)\n Do not use the fnegd custom instruction.\n \n mcustom-fnegd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fnegd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fnegd) Init(-1)\n Integer id (N) of fnegd custom instruction.\n \n mno-custom-fmaxd\n-Target Report RejectNegative Var(nios2_custom_fmaxd, -1)\n+Target RejectNegative Var(nios2_custom_fmaxd, -1)\n Do not use the fmaxd custom instruction.\n \n mcustom-fmaxd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fmaxd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fmaxd) Init(-1)\n Integer id (N) of fmaxd custom instruction.\n \n mno-custom-fmind\n-Target Report RejectNegative Var(nios2_custom_fmind, -1)\n+Target RejectNegative Var(nios2_custom_fmind, -1)\n Do not use the fmind custom instruction.\n \n mcustom-fmind=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fmind) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fmind) Init(-1)\n Integer id (N) of fmind custom instruction.\n \n mno-custom-fdivd\n-Target Report RejectNegative Var(nios2_custom_fdivd, -1)\n+Target RejectNegative Var(nios2_custom_fdivd, -1)\n Do not use the fdivd custom instruction.\n \n mcustom-fdivd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fdivd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fdivd) Init(-1)\n Integer id (N) of fdivd custom instruction.\n \n mno-custom-fmuld\n-Target Report RejectNegative Var(nios2_custom_fmuld, -1)\n+Target RejectNegative Var(nios2_custom_fmuld, -1)\n Do not use the fmuld custom instruction.\n \n mcustom-fmuld=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fmuld) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fmuld) Init(-1)\n Integer id (N) of fmuld custom instruction.\n \n mno-custom-fsubd\n-Target Report RejectNegative Var(nios2_custom_fsubd, -1)\n+Target RejectNegative Var(nios2_custom_fsubd, -1)\n Do not use the fsubd custom instruction.\n \n mcustom-fsubd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fsubd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fsubd) Init(-1)\n Integer id (N) of fsubd custom instruction.\n \n mno-custom-faddd\n-Target Report RejectNegative Var(nios2_custom_faddd, -1)\n+Target RejectNegative Var(nios2_custom_faddd, -1)\n Do not use the faddd custom instruction.\n \n mcustom-faddd=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_faddd) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_faddd) Init(-1)\n Integer id (N) of faddd custom instruction.\n \n mno-custom-fcmpnes\n-Target Report RejectNegative Var(nios2_custom_fcmpnes, -1)\n+Target RejectNegative Var(nios2_custom_fcmpnes, -1)\n Do not use the fcmpnes custom instruction.\n \n mcustom-fcmpnes=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpnes) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmpnes) Init(-1)\n Integer id (N) of fcmpnes custom instruction.\n \n mno-custom-fcmpeqs\n-Target Report RejectNegative Var(nios2_custom_fcmpeqs, -1)\n+Target RejectNegative Var(nios2_custom_fcmpeqs, -1)\n Do not use the fcmpeqs custom instruction.\n \n mcustom-fcmpeqs=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpeqs) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmpeqs) Init(-1)\n Integer id (N) of fcmpeqs custom instruction.\n \n mno-custom-fcmpges\n-Target Report RejectNegative Var(nios2_custom_fcmpges, -1)\n+Target RejectNegative Var(nios2_custom_fcmpges, -1)\n Do not use the fcmpges custom instruction.\n \n mcustom-fcmpges=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpges) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmpges) Init(-1)\n Integer id (N) of fcmpges custom instruction.\n \n mno-custom-fcmpgts\n-Target Report RejectNegative Var(nios2_custom_fcmpgts, -1)\n+Target RejectNegative Var(nios2_custom_fcmpgts, -1)\n Do not use the fcmpgts custom instruction.\n \n mcustom-fcmpgts=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmpgts) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmpgts) Init(-1)\n Integer id (N) of fcmpgts custom instruction.\n \n mno-custom-fcmples\n-Target Report RejectNegative Var(nios2_custom_fcmples, -1)\n+Target RejectNegative Var(nios2_custom_fcmples, -1)\n Do not use the fcmples custom instruction.\n \n mcustom-fcmples=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmples) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmples) Init(-1)\n Integer id (N) of fcmples custom instruction.\n \n mno-custom-fcmplts\n-Target Report RejectNegative Var(nios2_custom_fcmplts, -1)\n+Target RejectNegative Var(nios2_custom_fcmplts, -1)\n Do not use the fcmplts custom instruction.\n \n mcustom-fcmplts=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcmplts) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcmplts) Init(-1)\n Integer id (N) of fcmplts custom instruction.\n \n mno-custom-flogs\n-Target Report RejectNegative Var(nios2_custom_flogs, -1)\n+Target RejectNegative Var(nios2_custom_flogs, -1)\n Do not use the flogs custom instruction.\n \n mcustom-flogs=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_flogs) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_flogs) Init(-1)\n Integer id (N) of flogs custom instruction.\n \n mno-custom-fexps\n-Target Report RejectNegative Var(nios2_custom_fexps, -1)\n+Target RejectNegative Var(nios2_custom_fexps, -1)\n Do not use the fexps custom instruction.\n \n mcustom-fexps=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fexps) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fexps) Init(-1)\n Integer id (N) of fexps custom instruction.\n \n mno-custom-fatans\n-Target Report RejectNegative Var(nios2_custom_fatans, -1)\n+Target RejectNegative Var(nios2_custom_fatans, -1)\n Do not use the fatans custom instruction.\n \n mcustom-fatans=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fatans) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fatans) Init(-1)\n Integer id (N) of fatans custom instruction.\n \n mno-custom-ftans\n-Target Report RejectNegative Var(nios2_custom_ftans, -1)\n+Target RejectNegative Var(nios2_custom_ftans, -1)\n Do not use the ftans custom instruction.\n \n mcustom-ftans=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_ftans) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_ftans) Init(-1)\n Integer id (N) of ftans custom instruction.\n \n mno-custom-fsins\n-Target Report RejectNegative Var(nios2_custom_fsins, -1)\n+Target RejectNegative Var(nios2_custom_fsins, -1)\n Do not use the fsins custom instruction.\n \n mcustom-fsins=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fsins) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fsins) Init(-1)\n Integer id (N) of fsins custom instruction.\n \n mno-custom-fcoss\n-Target Report RejectNegative Var(nios2_custom_fcoss, -1)\n+Target RejectNegative Var(nios2_custom_fcoss, -1)\n Do not use the fcoss custom instruction.\n \n mcustom-fcoss=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fcoss) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fcoss) Init(-1)\n Integer id (N) of fcoss custom instruction.\n \n mno-custom-fsqrts\n-Target Report RejectNegative Var(nios2_custom_fsqrts, -1)\n+Target RejectNegative Var(nios2_custom_fsqrts, -1)\n Do not use the fsqrts custom instruction.\n \n mcustom-fsqrts=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fsqrts) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fsqrts) Init(-1)\n Integer id (N) of fsqrts custom instruction.\n \n mno-custom-fabss\n-Target Report RejectNegative Var(nios2_custom_fabss, -1)\n+Target RejectNegative Var(nios2_custom_fabss, -1)\n Do not use the fabss custom instr.\n \n mcustom-fabss=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fabss) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fabss) Init(-1)\n Integer id (N) of fabss custom instruction.\n \n mno-custom-fnegs\n-Target Report RejectNegative Var(nios2_custom_fnegs, -1)\n+Target RejectNegative Var(nios2_custom_fnegs, -1)\n Do not use the fnegs custom instruction.\n \n mcustom-fnegs=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fnegs) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fnegs) Init(-1)\n Integer id (N) of fnegs custom instruction.\n \n mno-custom-fmaxs\n-Target Report RejectNegative Var(nios2_custom_fmaxs, -1)\n+Target RejectNegative Var(nios2_custom_fmaxs, -1)\n Do not use the fmaxs custom instruction.\n \n mcustom-fmaxs=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fmaxs) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fmaxs) Init(-1)\n Integer id (N) of fmaxs custom instruction.\n \n mno-custom-fmins\n-Target Report RejectNegative Var(nios2_custom_fmins, -1)\n+Target RejectNegative Var(nios2_custom_fmins, -1)\n Do not use the fmins custom instruction.\n \n mcustom-fmins=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fmins) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fmins) Init(-1)\n Integer id (N) of fmins custom instruction.\n \n mno-custom-fdivs\n-Target Report RejectNegative Var(nios2_custom_fdivs, -1)\n+Target RejectNegative Var(nios2_custom_fdivs, -1)\n Do not use the fdivs custom instruction.\n \n mcustom-fdivs=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fdivs) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fdivs) Init(-1)\n Integer id (N) of fdivs custom instruction.\n \n mno-custom-fmuls\n-Target Report RejectNegative Var(nios2_custom_fmuls, -1)\n+Target RejectNegative Var(nios2_custom_fmuls, -1)\n Do not use the fmuls custom instruction.\n \n mcustom-fmuls=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fmuls) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fmuls) Init(-1)\n Integer id (N) of fmuls custom instruction.\n \n mno-custom-fsubs\n-Target Report RejectNegative Var(nios2_custom_fsubs, -1)\n+Target RejectNegative Var(nios2_custom_fsubs, -1)\n Do not use the fsubs custom instruction.\n \n mcustom-fsubs=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fsubs) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fsubs) Init(-1)\n Integer id (N) of fsubs custom instruction.\n \n mno-custom-fadds\n-Target Report RejectNegative Var(nios2_custom_fadds, -1)\n+Target RejectNegative Var(nios2_custom_fadds, -1)\n Do not use the fadds custom instruction.\n \n mcustom-fadds=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fadds) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fadds) Init(-1)\n Integer id (N) of fadds custom instruction.\n \n mno-custom-frdy\n-Target Report RejectNegative Var(nios2_custom_frdy, -1)\n+Target RejectNegative Var(nios2_custom_frdy, -1)\n Do not use the frdy custom instruction.\n \n mcustom-frdy=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_frdy) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_frdy) Init(-1)\n Integer id (N) of frdy custom instruction.\n \n mno-custom-frdxhi\n-Target Report RejectNegative Var(nios2_custom_frdxhi, -1)\n+Target RejectNegative Var(nios2_custom_frdxhi, -1)\n Do not use the frdxhi custom instruction.\n \n mcustom-frdxhi=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_frdxhi) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_frdxhi) Init(-1)\n Integer id (N) of frdxhi custom instruction.\n \n mno-custom-frdxlo\n-Target Report RejectNegative Var(nios2_custom_frdxlo, -1)\n+Target RejectNegative Var(nios2_custom_frdxlo, -1)\n Do not use the frdxlo custom instruction.\n \n mcustom-frdxlo=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_frdxlo) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_frdxlo) Init(-1)\n Integer id (N) of frdxlo custom instruction.\n \n mno-custom-fwry\n-Target Report RejectNegative Var(nios2_custom_fwry, -1)\n+Target RejectNegative Var(nios2_custom_fwry, -1)\n Do not use the fwry custom instruction.\n \n mcustom-fwry=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fwry) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fwry) Init(-1)\n Integer id (N) of fwry custom instruction.\n \n mno-custom-fwrx\n-Target Report RejectNegative Var(nios2_custom_fwrx, -1)\n+Target RejectNegative Var(nios2_custom_fwrx, -1)\n Do not use the fwrx custom instruction.\n \n mcustom-fwrx=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_fwrx) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_fwrx) Init(-1)\n Integer id (N) of fwrx custom instruction.\n \n mno-custom-round\n-Target Report RejectNegative Var(nios2_custom_round, -1)\n+Target RejectNegative Var(nios2_custom_round, -1)\n Do not use the round custom instruction.\n \n mcustom-round=\n-Target Report RejectNegative Joined UInteger Var(nios2_custom_round) Init(-1)\n+Target RejectNegative Joined UInteger Var(nios2_custom_round) Init(-1)\n Integer id (N) of round custom instruction.\n \n march=\n@@ -580,11 +580,11 @@ EnumValue\n Enum(nios2_arch_type) String(r2) Value(ARCH_R2)\n \n mbmx\n-Target Report Mask(HAS_BMX)\n+Target Mask(HAS_BMX)\n Enable generation of R2 BMX instructions.\n \n mcdx\n-Target Report Mask(HAS_CDX)\n+Target Mask(HAS_CDX)\n Enable generation of R2 CDX instructions.\n \n mgprel-sec="}, {"sha": "465f20e1b7b16192ae5d625c8e2dbbda3a1e7256", "filename": "gcc/config/nvptx/nvptx.opt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -20,35 +20,35 @@\n ; It's not clear whether this was ever build/tested/used, so this is no longer\n ; exposed to the user.\n ;m32\n-;Target Report RejectNegative InverseMask(ABI64)\n+;Target RejectNegative InverseMask(ABI64)\n ;Generate code for a 32-bit ABI.\n \n m64\n-Target Report RejectNegative Mask(ABI64)\n+Target RejectNegative Mask(ABI64)\n Generate code for a 64-bit ABI.\n \n mmainkernel\n-Target Report RejectNegative\n+Target RejectNegative\n Link in code for a __main kernel.\n \n moptimize\n-Target Report Var(nvptx_optimize) Init(-1)\n+Target Var(nvptx_optimize) Init(-1)\n Optimize partition neutering.\n \n msoft-stack\n-Target Report Mask(SOFT_STACK)\n+Target Mask(SOFT_STACK)\n Use custom stacks instead of local memory for automatic storage.\n \n msoft-stack-reserve-local=\n-Target Report Joined RejectNegative UInteger Var(nvptx_softstack_size) Init(128)\n+Target Joined RejectNegative UInteger Var(nvptx_softstack_size) Init(128)\n Specify size of .local memory used for stack when the exact amount is not known.\n \n muniform-simt\n-Target Report Mask(UNIFORM_SIMT)\n+Target Mask(UNIFORM_SIMT)\n Generate code that can keep local state uniform across all lanes.\n \n mgomp\n-Target Report Mask(GOMP)\n+Target Mask(GOMP)\n Generate code for OpenMP offloading: enables -msoft-stack and -muniform-simt.\n \n Enum"}, {"sha": "402a88bce367be7521231321acde43f1f5de0eb7", "filename": "gcc/config/pa/pa.opt", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fpa%2Fpa.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fpa%2Fpa.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -42,31 +42,31 @@ Target Ignore\n Does nothing.  Preserved for backward compatibility.\n \n mcaller-copies\n-Target Report Mask(CALLER_COPIES)\n+Target Mask(CALLER_COPIES)\n Caller copies function arguments passed by hidden reference.\n \n mcoherent-ldcw\n-Target Report Var(TARGET_COHERENT_LDCW) Init(1)\n+Target Var(TARGET_COHERENT_LDCW) Init(1)\n Use ldcw/ldcd coherent cache-control hint.\n \n mdisable-fpregs\n-Target Report Mask(DISABLE_FPREGS)\n+Target Mask(DISABLE_FPREGS)\n Disable FP regs.\n \n mdisable-indexing\n-Target Report Mask(DISABLE_INDEXING)\n+Target Mask(DISABLE_INDEXING)\n Disable indexed addressing.\n \n mfast-indirect-calls\n-Target Report Mask(FAST_INDIRECT_CALLS)\n+Target Mask(FAST_INDIRECT_CALLS)\n Generate fast indirect calls.\n \n mfixed-range=\n Target RejectNegative Joined Var(pa_deferred_options) Defer\n Specify range of registers to make fixed.\n \n mgas\n-Target Report Mask(GAS)\n+Target Mask(GAS)\n Assume code will be assembled by GAS.\n \n mjump-in-delay\n@@ -79,23 +79,23 @@ Target RejectNegative\n Enable linker optimizations.\n \n mlong-calls\n-Target Report Mask(LONG_CALLS)\n+Target Mask(LONG_CALLS)\n Always generate long calls.\n \n mlong-load-store\n-Target Report Mask(LONG_LOAD_STORE)\n+Target Mask(LONG_LOAD_STORE)\n Emit long load/store sequences.\n \n mnosnake\n Target RejectNegative\n Generate PA1.0 code.\n \n mno-space-regs\n-Target RejectNegative Report Mask(NO_SPACE_REGS)\n+Target RejectNegative Mask(NO_SPACE_REGS)\n Disable space regs.\n \n mordered\n-Target Report Var(TARGET_ORDERED) Init(0)\n+Target Var(TARGET_ORDERED) Init(0)\n Assume memory references are ordered and barriers are not needed.\n \n mpa-risc-1-0\n@@ -111,7 +111,7 @@ Target RejectNegative Mask(PA_20)\n Generate PA2.0 code (requires binutils 2.10 or later).\n \n mportable-runtime\n-Target Report Mask(PORTABLE_RUNTIME)\n+Target Mask(PORTABLE_RUNTIME)\n Use portable calling conventions.\n \n mschedule=\n@@ -140,13 +140,13 @@ EnumValue\n Enum(pa_schedule) String(7300) Value(PROCESSOR_7300)\n \n msoft-float\n-Target Report Mask(SOFT_FLOAT)\n+Target Mask(SOFT_FLOAT)\n Use software floating point.\n \n msnake\n Target RejectNegative\n Generate PA1.1 code.\n \n mspace-regs\n-Target RejectNegative Report InverseMask(NO_SPACE_REGS)\n+Target RejectNegative InverseMask(NO_SPACE_REGS)\n Do not disable space regs."}, {"sha": "17a452a9d67b7f3e2f0e922d176f23198c258016", "filename": "gcc/config/pdp11/pdp11.opt", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -23,49 +23,49 @@ Target RejectNegative\n Generate code for an 11/10.\n \n m40\n-Target Report Mask(40)\n+Target Mask(40)\n Generate code for an 11/40.\n \n m45\n-Target Report Mask(45)\n+Target Mask(45)\n Generate code for an 11/45.\n \n mac0\n-Target Report Mask(AC0)\n+Target Mask(AC0)\n Return floating-point results in ac0 (fr0 in Unix assembler syntax).\n \n mdec-asm\n-Target RejectNegative Report Mask(DEC_ASM) Negative(mgnu-asm)\n+Target RejectNegative Mask(DEC_ASM) Negative(mgnu-asm)\n Use the DEC assembler syntax.\n \n mgnu-asm\n-Target RejectNegative Report Mask(GNU_ASM) Negative(munix-asm)\n+Target RejectNegative Mask(GNU_ASM) Negative(munix-asm)\n Use the GNU assembler syntax.\n \n mfpu\n-Target RejectNegative Report Mask(FPU)\n+Target RejectNegative Mask(FPU)\n Use hardware floating point.\n \n mint16\n-Target Report InverseMask(INT32, INT16)\n+Target InverseMask(INT32, INT16)\n Use 16 bit int.\n \n mint32\n-Target Report Mask(INT32)\n+Target Mask(INT32)\n Use 32 bit int.\n \n msoft-float\n-Target RejectNegative Report InverseMask(FPU, SOFT_FLOAT)\n+Target RejectNegative InverseMask(FPU, SOFT_FLOAT)\n Do not use hardware floating point.\n \n msplit\n-Target Report Mask(SPLIT)\n+Target Mask(SPLIT)\n Target has split I&D.\n \n munix-asm\n-Target RejectNegative Report Mask(UNIX_ASM) Negative(mdec-asm)\n+Target RejectNegative Mask(UNIX_ASM) Negative(mdec-asm)\n Use UNIX assembler syntax.\n \n mlra\n-Target Report Mask(LRA)\n+Target Mask(LRA)\n Use LRA register allocator."}, {"sha": "f44a8f8021e56da4a063b670d75294711bf5999b", "filename": "gcc/config/pru/pru.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fpru%2Fpru.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fpru%2Fpru.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -22,7 +22,7 @@ HeaderInclude\n config/pru/pru-opts.h\n \n minrt\n-Target Report Mask(MINRT) RejectNegative\n+Target Mask(MINRT) RejectNegative\n Use a minimum runtime (no static initializers or ctors) for memory-constrained\n devices.\n \n@@ -31,7 +31,7 @@ Target RejectNegative Joined\n -mmcu=MCU\tSelect the target System-On-Chip variant that embeds this PRU.\n \n mno-relax\n-Target Report RejectNegative\n+Target RejectNegative\n Make GCC pass the --no-relax command-line option to the linker instead of\n the --relax option.\n \n@@ -40,7 +40,7 @@ Target Mask(OPT_LOOP)\n Allow (or do not allow) gcc to use the LOOP instruction.\n \n mabi=\n-Target RejectNegative Report Joined Enum(pru_abi_t) Var(pru_current_abi) Init(PRU_ABI_GNU) Save\n+Target RejectNegative Joined Enum(pru_abi_t) Var(pru_current_abi) Init(PRU_ABI_GNU) Save\n Select target ABI variant.\n \n Enum"}, {"sha": "25120e2d7f8d19da0a4f88beb4a12330d1e883b7", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -26,11 +26,11 @@ Target RejectNegative Joined UInteger Var(riscv_branch_cost)\n -mbranch-cost=N\tSet the cost of branches to roughly N instructions.\n \n mplt\n-Target Report Var(TARGET_PLT) Init(1)\n+Target Var(TARGET_PLT) Init(1)\n When generating -fpic code, allow the use of PLTs. Ignored for fno-pic.\n \n mabi=\n-Target Report RejectNegative Joined Enum(abi_type) Var(riscv_abi) Init(ABI_ILP32)\n+Target RejectNegative Joined Enum(abi_type) Var(riscv_abi) Init(ABI_ILP32)\n Specify integer and floating-point calling convention.\n \n mpreferred-stack-boundary=\n@@ -63,15 +63,15 @@ EnumValue\n Enum(abi_type) String(lp64d) Value(ABI_LP64D)\n \n mfdiv\n-Target Report Mask(FDIV)\n+Target Mask(FDIV)\n Use hardware floating-point divide and square root instructions.\n \n mdiv\n-Target Report Mask(DIV)\n+Target Mask(DIV)\n Use hardware instructions for integer division.\n \n march=\n-Target Report RejectNegative Joined\n+Target RejectNegative Joined\n -march=\tGenerate code for given RISC-V ISA (e.g. RV64IM).  ISA strings must be\n lower-case.\n \n@@ -88,7 +88,7 @@ Target Joined Separate UInteger Var(g_switch_value) Init(8)\n -msmall-data-limit=N\tPut global and static data smaller than <number> bytes into a special section (on some targets).\n \n msave-restore\n-Target Report Mask(SAVE_RESTORE)\n+Target Mask(SAVE_RESTORE)\n Use smaller but slower prologue and epilogue code.\n \n mshorten-memrefs\n@@ -98,11 +98,11 @@ memory accesses to be generated as compressed instructions.  Currently targets\n 32-bit integer load/stores.\n \n mcmodel=\n-Target Report RejectNegative Joined Enum(code_model) Var(riscv_cmodel) Init(TARGET_DEFAULT_CMODEL)\n+Target RejectNegative Joined Enum(code_model) Var(riscv_cmodel) Init(TARGET_DEFAULT_CMODEL)\n Specify the code model.\n \n mstrict-align\n-Target Report Mask(STRICT_ALIGN) Save\n+Target Mask(STRICT_ALIGN) Save\n Do not generate unaligned memory accesses.\n \n Enum\n@@ -116,7 +116,7 @@ EnumValue\n Enum(code_model) String(medany) Value(CM_MEDANY)\n \n mexplicit-relocs\n-Target Report Mask(EXPLICIT_RELOCS)\n+Target Mask(EXPLICIT_RELOCS)\n Use %reloc() operators, rather than assembly macros, to load addresses.\n \n mrelax\n@@ -139,7 +139,7 @@ Mask(RVC)\n Mask(RVE)\n \n mriscv-attribute\n-Target Report Var(riscv_emit_attribute_p) Init(-1)\n+Target Var(riscv_emit_attribute_p) Init(-1)\n Emit RISC-V ELF attribute.\n \n malign-data=\n@@ -201,5 +201,5 @@ EnumValue\n Enum(isa_spec_class) String(20191213) Value(ISA_SPEC_CLASS_20191213)\n \n misa-spec=\n-Target Report RejectNegative Joined Enum(isa_spec_class) Var(riscv_isa_spec) Init(TARGET_DEFAULT_ISA_SPEC)\n+Target RejectNegative Joined Enum(isa_spec_class) Var(riscv_isa_spec) Init(TARGET_DEFAULT_ISA_SPEC)\n Set the version of RISC-V ISA spec."}, {"sha": "619e0fd7da893decdbee505924b24b0cdbf2c685", "filename": "gcc/config/rl78/rl78.opt", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frl78%2Frl78.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frl78%2Frl78.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -23,11 +23,11 @@ HeaderInclude\n config/rl78/rl78-opts.h\n \n msim\n-Target Report\n+Target\n Use the simulator runtime.\n \n mmul=\n-Target RejectNegative Joined Var(rl78_mul_type) Report Tolower Enum(rl78_mul_types) Init(MUL_UNINIT)\n+Target RejectNegative Joined Var(rl78_mul_type) Tolower Enum(rl78_mul_types) Init(MUL_UNINIT)\n Selects the type of hardware multiplication and division to use (none/g13/g14).\n \n Enum\n@@ -46,15 +46,15 @@ EnumValue\n Enum(rl78_mul_types) String(rl78) Value(MUL_G14)\n \n mallregs\n-Target Mask(ALLREGS) Report Optimization\n+Target Mask(ALLREGS) Optimization\n Use all registers, reserving none for interrupt handlers.\n \n mrelax\n-Target Report Optimization\n+Target Optimization\n Enable assembler and linker relaxation.  Enabled by default at -Os.\n \n mcpu=\n-Target RejectNegative Joined Var(rl78_cpu_type) Report ToLower Enum(rl78_cpu_types) Init(CPU_UNINIT)\n+Target RejectNegative Joined Var(rl78_cpu_type) ToLower Enum(rl78_cpu_types) Init(CPU_UNINIT)\n Selects the type of RL78 core being targeted (g10/g13/g14).  The default is the G14.  If set, also selects the hardware multiply support to be used.\n \n Enum\n@@ -73,19 +73,19 @@ EnumValue\n Enum(rl78_cpu_types) String(rl78) Value(CPU_G14)\n \n mg10\n-Target RejectNegative Report Alias(mcpu=, g10)\n+Target RejectNegative Alias(mcpu=, g10)\n Alias for -mcpu=g10.\n \n mg13\n-Target RejectNegative Report Alias(mcpu=, g13)\n+Target RejectNegative Alias(mcpu=, g13)\n Alias for -mcpu=g13.\n \n mg14\n-Target RejectNegative Report Alias(mcpu=, g14)\n+Target RejectNegative Alias(mcpu=, g14)\n Alias for -mcpu=g14.\n \n mrl78\n-Target RejectNegative Report Alias(mcpu=, g14)\n+Target RejectNegative Alias(mcpu=, g14)\n Alias for -mcpu=g14.\n \n mes0"}, {"sha": "51d166858f3c09ec9ef43a33500ea9f73779ff71", "filename": "gcc/config/rs6000/aix64.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frs6000%2Faix64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frs6000%2Faix64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix64.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -20,11 +20,11 @@\n ; <http://www.gnu.org/licenses/>.\n \n maix64\n-Target Report RejectNegative Negative(maix32) Mask(64BIT) Var(rs6000_isa_flags)\n+Target RejectNegative Negative(maix32) Mask(64BIT) Var(rs6000_isa_flags)\n Compile for 64-bit pointers.\n \n maix32\n-Target Report RejectNegative Negative(maix64) InverseMask(64BIT) Var(rs6000_isa_flags)\n+Target RejectNegative Negative(maix64) InverseMask(64BIT) Var(rs6000_isa_flags)\n Compile for 32-bit pointers.\n \n mcmodel=\n@@ -45,7 +45,7 @@ EnumValue\n Enum(rs6000_cmodel) String(large) Value(CMODEL_LARGE)\n \n mpe\n-Target Report RejectNegative Var(internal_nothing_1) Save\n+Target RejectNegative Var(internal_nothing_1) Save\n Support message passing with the Parallel Environment.\n \n posix"}, {"sha": "cafeb1e24e26e001bbd435b87335da31536a3fd8", "filename": "gcc/config/rs6000/linux64.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frs6000%2Flinux64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frs6000%2Flinux64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -20,7 +20,7 @@\n ; <http://www.gnu.org/licenses/>.\n \n mprofile-kernel\n-Target Report Var(profile_kernel) Save\n+Target Var(profile_kernel) Save\n Call mcount for profiling before a function prologue.\n \n mcmodel="}, {"sha": "6efeafd2486d2ab96a2b0bf261a2a350bf9aa154", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -117,31 +117,31 @@ mpowerpc\n Target RejectNegative Undocumented Ignore\n \n mpowerpc64\n-Target Report Mask(POWERPC64) Var(rs6000_isa_flags)\n+Target Mask(POWERPC64) Var(rs6000_isa_flags)\n Use PowerPC-64 instruction set.\n \n mpowerpc-gpopt\n-Target Report Mask(PPC_GPOPT) Var(rs6000_isa_flags)\n+Target Mask(PPC_GPOPT) Var(rs6000_isa_flags)\n Use PowerPC General Purpose group optional instructions.\n \n mpowerpc-gfxopt\n-Target Report Mask(PPC_GFXOPT) Var(rs6000_isa_flags)\n+Target Mask(PPC_GFXOPT) Var(rs6000_isa_flags)\n Use PowerPC Graphics group optional instructions.\n \n mmfcrf\n-Target Report Mask(MFCRF) Var(rs6000_isa_flags)\n+Target Mask(MFCRF) Var(rs6000_isa_flags)\n Use PowerPC V2.01 single field mfcr instruction.\n \n mpopcntb\n-Target Report Mask(POPCNTB) Var(rs6000_isa_flags)\n+Target Mask(POPCNTB) Var(rs6000_isa_flags)\n Use PowerPC V2.02 popcntb instruction.\n \n mfprnd\n-Target Report Mask(FPRND) Var(rs6000_isa_flags)\n+Target Mask(FPRND) Var(rs6000_isa_flags)\n Use PowerPC V2.02 floating point rounding instructions.\n \n mcmpb\n-Target Report Mask(CMPB) Var(rs6000_isa_flags)\n+Target Mask(CMPB) Var(rs6000_isa_flags)\n Use PowerPC V2.05 compare bytes instruction.\n \n ;; This option existed in the past, but now is always off.\n@@ -152,27 +152,27 @@ mmfpgpr\n Target RejectNegative Undocumented WarnRemoved\n \n maltivec\n-Target Report Mask(ALTIVEC) Var(rs6000_isa_flags)\n+Target Mask(ALTIVEC) Var(rs6000_isa_flags)\n Use AltiVec instructions.\n \n mfold-gimple\n-Target Report Var(rs6000_fold_gimple) Init(1)\n+Target Var(rs6000_fold_gimple) Init(1)\n Enable early gimple folding of builtins.\n \n mhard-dfp\n-Target Report Mask(DFP) Var(rs6000_isa_flags)\n+Target Mask(DFP) Var(rs6000_isa_flags)\n Use decimal floating point instructions.\n \n mmulhw\n-Target Report Mask(MULHW) Var(rs6000_isa_flags)\n+Target Mask(MULHW) Var(rs6000_isa_flags)\n Use 4xx half-word multiply instructions.\n \n mdlmzb\n-Target Report Mask(DLMZB) Var(rs6000_isa_flags)\n+Target Mask(DLMZB) Var(rs6000_isa_flags)\n Use 4xx string-search dlmzb instruction.\n \n mmultiple\n-Target Report Mask(MULTIPLE) Var(rs6000_isa_flags)\n+Target Mask(MULTIPLE) Var(rs6000_isa_flags)\n Generate load/store multiple instructions.\n \n ;; This option existed in the past, but now is always off.\n@@ -183,106 +183,106 @@ mstring\n Target RejectNegative Undocumented WarnRemoved\n \n msoft-float\n-Target Report RejectNegative Mask(SOFT_FLOAT) Var(rs6000_isa_flags)\n+Target RejectNegative Mask(SOFT_FLOAT) Var(rs6000_isa_flags)\n Do not use hardware floating point.\n \n mhard-float\n-Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT) Var(rs6000_isa_flags)\n+Target RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT) Var(rs6000_isa_flags)\n Use hardware floating point.\n \n mpopcntd\n-Target Report Mask(POPCNTD) Var(rs6000_isa_flags)\n+Target Mask(POPCNTD) Var(rs6000_isa_flags)\n Use PowerPC V2.06 popcntd instruction.\n \n mfriz\n-Target Report Var(TARGET_FRIZ) Init(-1) Save\n+Target Var(TARGET_FRIZ) Init(-1) Save\n Under -ffast-math, generate a FRIZ instruction for (double)(long long) conversions.\n \n mveclibabi=\n Target RejectNegative Joined Var(rs6000_veclibabi_name)\n Vector library ABI to use.\n \n mvsx\n-Target Report Mask(VSX) Var(rs6000_isa_flags)\n+Target Mask(VSX) Var(rs6000_isa_flags)\n Use vector/scalar (VSX) instructions.\n \n mvsx-align-128\n-Target Undocumented Report Var(TARGET_VSX_ALIGN_128) Save\n+Target Undocumented Var(TARGET_VSX_ALIGN_128) Save\n ; If -mvsx, set alignment to 128 bits instead of 32/64\n \n mallow-movmisalign\n Target Undocumented Var(TARGET_ALLOW_MOVMISALIGN) Init(-1) Save\n ; Allow the movmisalign in DF/DI vectors\n \n mefficient-unaligned-vsx\n-Target Undocumented Report Mask(EFFICIENT_UNALIGNED_VSX) Var(rs6000_isa_flags)\n+Target Undocumented Mask(EFFICIENT_UNALIGNED_VSX) Var(rs6000_isa_flags)\n ; Consider unaligned VSX vector and fp accesses to be efficient\n \n msched-groups\n-Target Undocumented Report Var(TARGET_SCHED_GROUPS) Init(-1) Save\n+Target Undocumented Var(TARGET_SCHED_GROUPS) Init(-1) Save\n ; Explicitly set rs6000_sched_groups\n \n malways-hint\n-Target Undocumented Report Var(TARGET_ALWAYS_HINT) Init(-1) Save\n+Target Undocumented Var(TARGET_ALWAYS_HINT) Init(-1) Save\n ; Explicitly set rs6000_always_hint\n \n malign-branch-targets\n-Target Undocumented Report Var(TARGET_ALIGN_BRANCH_TARGETS) Init(-1) Save\n+Target Undocumented Var(TARGET_ALIGN_BRANCH_TARGETS) Init(-1) Save\n ; Explicitly set rs6000_align_branch_targets\n \n mno-update\n-Target Report RejectNegative Mask(NO_UPDATE) Var(rs6000_isa_flags)\n+Target RejectNegative Mask(NO_UPDATE) Var(rs6000_isa_flags)\n Do not generate load/store with update instructions.\n \n mupdate\n-Target Report RejectNegative InverseMask(NO_UPDATE, UPDATE) Var(rs6000_isa_flags)\n+Target RejectNegative InverseMask(NO_UPDATE, UPDATE) Var(rs6000_isa_flags)\n Generate load/store with update instructions.\n \n msingle-pic-base\n-Target Report Var(TARGET_SINGLE_PIC_BASE) Init(0)\n+Target Var(TARGET_SINGLE_PIC_BASE) Init(0)\n Do not load the PIC register in function prologues.\n \n mavoid-indexed-addresses\n-Target Report Var(TARGET_AVOID_XFORM) Init(-1) Save\n+Target Var(TARGET_AVOID_XFORM) Init(-1) Save\n Avoid generation of indexed load/store instructions when possible.\n \n msched-epilog\n Target Undocumented Var(TARGET_SCHED_PROLOG) Init(1) Save\n \n msched-prolog\n-Target Report Var(TARGET_SCHED_PROLOG) Save\n+Target Var(TARGET_SCHED_PROLOG) Save\n Schedule the start and end of the procedure.\n \n maix-struct-return\n-Target Report RejectNegative Var(aix_struct_return) Save\n+Target RejectNegative Var(aix_struct_return) Save\n Return all structures in memory (AIX default).\n \n msvr4-struct-return\n-Target Report RejectNegative Var(aix_struct_return,0) Save\n+Target RejectNegative Var(aix_struct_return,0) Save\n Return small structures in registers (SVR4 default).\n \n mxl-compat\n-Target Report Var(TARGET_XL_COMPAT) Save\n+Target Var(TARGET_XL_COMPAT) Save\n Conform more closely to IBM XLC semantics.\n \n mrecip\n-Target Report\n+Target\n Generate software reciprocal divide and square root for better throughput.\n \n mrecip=\n-Target Report RejectNegative Joined Var(rs6000_recip_name)\n+Target RejectNegative Joined Var(rs6000_recip_name)\n Generate software reciprocal divide and square root for better throughput.\n \n mrecip-precision\n-Target Report Mask(RECIP_PRECISION) Var(rs6000_isa_flags)\n+Target Mask(RECIP_PRECISION) Var(rs6000_isa_flags)\n Assume that the reciprocal estimate instructions provide more accuracy.\n \n mno-fp-in-toc\n-Target Report RejectNegative Var(TARGET_NO_FP_IN_TOC) Save\n+Target RejectNegative Var(TARGET_NO_FP_IN_TOC) Save\n Do not place floating point constants in TOC.\n \n mfp-in-toc\n-Target Report RejectNegative Var(TARGET_NO_FP_IN_TOC,0) Save\n+Target RejectNegative Var(TARGET_NO_FP_IN_TOC,0) Save\n Place floating point constants in TOC.\n \n mno-sum-in-toc\n@@ -301,15 +301,15 @@ Place symbol+offset constants in TOC.\n ;   This is at the cost of having 2 extra loads and one extra store per\n ;   function, and one less allocable register.\n mminimal-toc\n-Target Report Mask(MINIMAL_TOC) Var(rs6000_isa_flags)\n+Target Mask(MINIMAL_TOC) Var(rs6000_isa_flags)\n Use only one TOC entry per procedure.\n \n mfull-toc\n-Target Report\n+Target\n Put everything in the regular TOC.\n \n mvrsave\n-Target Report Var(TARGET_ALTIVEC_VRSAVE) Save\n+Target Var(TARGET_ALTIVEC_VRSAVE) Save\n Generate VRSAVE instructions when generating AltiVec code.\n \n mvrsave=no\n@@ -321,31 +321,31 @@ Target RejectNegative Alias(mvrsave) Warn(%<-mvrsave=yes%> is deprecated; use %<\n Deprecated option.  Use -mvrsave instead.\n \n mblock-move-inline-limit=\n-Target Report Var(rs6000_block_move_inline_limit) Init(0) RejectNegative Joined UInteger Save\n+Target Var(rs6000_block_move_inline_limit) Init(0) RejectNegative Joined UInteger Save\n Max number of bytes to move inline.\n \n mblock-ops-unaligned-vsx\n-Target Report Mask(BLOCK_OPS_UNALIGNED_VSX) Var(rs6000_isa_flags)\n+Target Mask(BLOCK_OPS_UNALIGNED_VSX) Var(rs6000_isa_flags)\n Generate unaligned VSX load/store for inline expansion of memcpy/memmove.\n \n mblock-ops-vector-pair\n Target Undocumented Mask(BLOCK_OPS_VECTOR_PAIR) Var(rs6000_isa_flags)\n Generate unaligned VSX vector pair load/store for inline expansion of memcpy/memmove.\n \n mblock-compare-inline-limit=\n-Target Report Var(rs6000_block_compare_inline_limit) Init(63) RejectNegative Joined UInteger Save\n+Target Var(rs6000_block_compare_inline_limit) Init(63) RejectNegative Joined UInteger Save\n Max number of bytes to compare without loops.\n \n mblock-compare-inline-loop-limit=\n-Target Report Var(rs6000_block_compare_inline_loop_limit) Init(-1) RejectNegative Joined UInteger Save\n+Target Var(rs6000_block_compare_inline_loop_limit) Init(-1) RejectNegative Joined UInteger Save\n Max number of bytes to compare with loops.\n \n mstring-compare-inline-limit=\n-Target Report Var(rs6000_string_compare_inline_limit) Init(64) RejectNegative Joined UInteger Save\n+Target Var(rs6000_string_compare_inline_limit) Init(64) RejectNegative Joined UInteger Save\n Max number of bytes to compare.\n \n misel\n-Target Report Mask(ISEL) Var(rs6000_isa_flags)\n+Target Mask(ISEL) Var(rs6000_isa_flags)\n Generate isel instructions.\n \n mdebug=\n@@ -409,7 +409,7 @@ EnumValue\n Enum(rs6000_traceback_type) String(no) Value(traceback_none)\n \n mlongcall\n-Target Report Var(rs6000_default_long_calls) Save\n+Target Var(rs6000_default_long_calls) Save\n Avoid all range limits on call instructions.\n \n ; This option existed in the past, but now is always on.\n@@ -456,50 +456,50 @@ Target RejectNegative Joined UInteger Var(rs6000_sched_restricted_insns_priority\n Specify scheduling priority for dispatch slot restricted insns.\n \n mpointers-to-nested-functions\n-Target Report Var(TARGET_POINTERS_TO_NESTED_FUNCTIONS) Init(1) Save\n+Target Var(TARGET_POINTERS_TO_NESTED_FUNCTIONS) Init(1) Save\n Use r11 to hold the static link in calls to functions via pointers.\n \n msave-toc-indirect\n-Target Report Mask(SAVE_TOC_INDIRECT) Var(rs6000_isa_flags)\n+Target Mask(SAVE_TOC_INDIRECT) Var(rs6000_isa_flags)\n Save the TOC in the prologue for indirect calls rather than inline.\n \n ; This option existed in the past, but now is always the same as -mvsx.\n mvsx-timode\n Target RejectNegative Undocumented Ignore\n \n mpower8-fusion\n-Target Report Mask(P8_FUSION) Var(rs6000_isa_flags)\n+Target Mask(P8_FUSION) Var(rs6000_isa_flags)\n Fuse certain integer operations together for better performance on power8.\n \n mpower8-fusion-sign\n Target Undocumented Mask(P8_FUSION_SIGN) Var(rs6000_isa_flags)\n Allow sign extension in fusion operations.\n \n mpower8-vector\n-Target Report Mask(P8_VECTOR) Var(rs6000_isa_flags)\n+Target Mask(P8_VECTOR) Var(rs6000_isa_flags)\n Use vector and scalar instructions added in ISA 2.07.\n \n mcrypto\n-Target Report Mask(CRYPTO) Var(rs6000_isa_flags)\n+Target Mask(CRYPTO) Var(rs6000_isa_flags)\n Use ISA 2.07 Category:Vector.AES and Category:Vector.SHA2 instructions.\n \n mdirect-move\n Target Undocumented Mask(DIRECT_MOVE) Var(rs6000_isa_flags) WarnRemoved\n \n mhtm\n-Target Report Mask(HTM) Var(rs6000_isa_flags)\n+Target Mask(HTM) Var(rs6000_isa_flags)\n Use ISA 2.07 transactional memory (HTM) instructions.\n \n mquad-memory\n-Target Report Mask(QUAD_MEMORY) Var(rs6000_isa_flags)\n+Target Mask(QUAD_MEMORY) Var(rs6000_isa_flags)\n Generate the quad word memory instructions (lq/stq).\n \n mquad-memory-atomic\n-Target Report Mask(QUAD_MEMORY_ATOMIC) Var(rs6000_isa_flags)\n+Target Mask(QUAD_MEMORY_ATOMIC) Var(rs6000_isa_flags)\n Generate the quad word memory atomic instructions (lqarx/stqcx).\n \n mcompat-align-parm\n-Target Report Var(rs6000_compat_align_parm) Init(0) Save\n+Target Var(rs6000_compat_align_parm) Init(0) Save\n Generate aggregate parameter passing code with at most 64-bit alignment.\n \n moptimize-swaps\n@@ -511,11 +511,11 @@ Target Undocumented Var(unroll_only_small_loops) Init(0) Save\n ; Use conservative small loop unrolling.\n \n mpower9-misc\n-Target Undocumented Report Mask(P9_MISC) Var(rs6000_isa_flags)\n+Target Undocumented Mask(P9_MISC) Var(rs6000_isa_flags)\n Use certain scalar instructions added in ISA 3.0.\n \n mpower9-vector\n-Target Undocumented Report Mask(P9_VECTOR) Var(rs6000_isa_flags)\n+Target Undocumented Mask(P9_VECTOR) Var(rs6000_isa_flags)\n Use vector instructions added in ISA 3.0.\n \n mpower9-minmax\n@@ -527,15 +527,15 @@ Target Undocumented Mask(TOC_FUSION) Var(rs6000_isa_flags)\n Fuse medium/large code model toc references with the memory instruction.\n \n mmodulo\n-Target Undocumented Report Mask(MODULO) Var(rs6000_isa_flags)\n+Target Undocumented Mask(MODULO) Var(rs6000_isa_flags)\n Generate the integer modulo instructions.\n \n mfloat128\n-Target Report Mask(FLOAT128_KEYWORD) Var(rs6000_isa_flags)\n+Target Mask(FLOAT128_KEYWORD) Var(rs6000_isa_flags)\n Enable IEEE 128-bit floating point via the __float128 keyword.\n \n mfloat128-hardware\n-Target Report Mask(FLOAT128_HW) Var(rs6000_isa_flags)\n+Target Mask(FLOAT128_HW) Var(rs6000_isa_flags)\n Enable using IEEE 128-bit floating point instructions.\n \n mfloat128-convert\n@@ -579,15 +579,15 @@ mpower10\n Target Undocumented Mask(POWER10) Var(rs6000_isa_flags) WarnRemoved\n \n mprefixed\n-Target Report Mask(PREFIXED) Var(rs6000_isa_flags)\n+Target Mask(PREFIXED) Var(rs6000_isa_flags)\n Generate (do not generate) prefixed memory instructions.\n \n mpcrel\n-Target Report Mask(PCREL) Var(rs6000_isa_flags)\n+Target Mask(PCREL) Var(rs6000_isa_flags)\n Generate (do not generate) pc-relative memory addressing.\n \n mmma\n-Target Report Mask(MMA) Var(rs6000_isa_flags)\n+Target Mask(MMA) Var(rs6000_isa_flags)\n Generate (do not generate) MMA instructions.\n \n mrelative-jumptables"}, {"sha": "85729f31981d6575fe433de0797d983e1fa4d676", "filename": "gcc/config/rs6000/sysv4.opt", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -28,7 +28,7 @@ Target RejectNegative Joined Var(rs6000_sdata_name)\n -msdata=[none,data,sysv,eabi]\tSelect method for sdata handling.\n \n mreadonly-in-sdata\n-Target Report Var(rs6000_readonly_in_sdata) Init(1) Save\n+Target Var(rs6000_readonly_in_sdata) Init(1) Save\n Allow readonly data in sdata.\n \n mtls-size=\n@@ -48,36 +48,36 @@ EnumValue\n Enum(rs6000_tls_size) String(64) Value(64)\n \n mbit-align\n-Target Report Var(TARGET_NO_BITFIELD_TYPE) Save\n+Target Var(TARGET_NO_BITFIELD_TYPE) Save\n Align to the base type of the bit-field.\n \n mstrict-align\n-Target Report Mask(STRICT_ALIGN) Var(rs6000_isa_flags)\n+Target Mask(STRICT_ALIGN) Var(rs6000_isa_flags)\n Align to the base type of the bit-field.\n Don't assume that unaligned accesses are handled by the system.\n \n mrelocatable\n-Target Report Mask(RELOCATABLE) Var(rs6000_isa_flags)\n+Target Mask(RELOCATABLE) Var(rs6000_isa_flags)\n Produce code relocatable at runtime.\n \n mrelocatable-lib\n Target\n Produce code relocatable at runtime.\n \n mlittle-endian\n-Target Report RejectNegative Mask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n+Target RejectNegative Mask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n Produce little endian code.\n \n mlittle\n-Target Report RejectNegative Mask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n+Target RejectNegative Mask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n Produce little endian code.\n \n mbig-endian\n-Target Report RejectNegative InverseMask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n+Target RejectNegative InverseMask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n Produce big endian code.\n \n mbig\n-Target Report RejectNegative InverseMask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n+Target RejectNegative InverseMask(LITTLE_ENDIAN) Var(rs6000_isa_flags)\n Produce big endian code.\n \n ;; FIXME: This does nothing.  What should be done?\n@@ -99,11 +99,11 @@ Target RejectNegative\n No description yet.\n \n meabi\n-Target Report Mask(EABI) Var(rs6000_isa_flags)\n+Target Mask(EABI) Var(rs6000_isa_flags)\n Use EABI.\n \n mbit-word\n-Target Report Var(TARGET_NO_BITFIELD_WORD) Save\n+Target Var(TARGET_NO_BITFIELD_WORD) Save\n Allow bit-fields to cross word boundaries.\n \n mregnames\n@@ -141,29 +141,29 @@ Target RejectNegative\n No description yet.\n \n m64\n-Target Report RejectNegative Negative(m32) Mask(64BIT) Var(rs6000_isa_flags)\n+Target RejectNegative Negative(m32) Mask(64BIT) Var(rs6000_isa_flags)\n Generate 64-bit code.\n \n m32\n-Target Report RejectNegative Negative(m64) InverseMask(64BIT) Var(rs6000_isa_flags)\n+Target RejectNegative Negative(m64) InverseMask(64BIT) Var(rs6000_isa_flags)\n Generate 32-bit code.\n \n mnewlib\n Target RejectNegative\n No description yet.\n \n msecure-plt\n-Target Report RejectNegative Var(secure_plt, 1) Save\n+Target RejectNegative Var(secure_plt, 1) Save\n Generate code to use a non-exec PLT and GOT.\n \n mbss-plt\n-Target Report RejectNegative Var(secure_plt, 0) Save\n+Target RejectNegative Var(secure_plt, 0) Save\n Generate code for old exec BSS PLT.\n \n mpltseq\n-Target Report Var(rs6000_pltseq) Init(1) Save\n+Target Var(rs6000_pltseq) Init(1) Save\n Use inline plt sequences to implement long calls and -fno-plt.\n \n mgnu-attribute\n-Target Report Var(rs6000_gnu_attr) Init(1) Save\n+Target Var(rs6000_gnu_attr) Init(1) Save\n Emit .gnu_attribute tags."}, {"sha": "6145b4d30058ceea7904731e5bbe90526eb0690c", "filename": "gcc/config/rx/elf.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frx%2Felf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frx%2Felf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Felf.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -28,7 +28,7 @@ Use the simulator runtime.\n ;---------------------------------------------------\n \n mas100-syntax\n-Target Mask(AS100_SYNTAX) Report\n+Target Mask(AS100_SYNTAX)\n Generate assembler output that is compatible with the Renesas AS100 assembler.  This may restrict some of the compiler's capabilities.  The default is to generate GAS compatible syntax.\n \n ;---------------------------------------------------"}, {"sha": "274e18727a44353b73e711ea6a61fc50829bbadb", "filename": "gcc/config/rx/rx.opt", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frx%2Frx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Frx%2Frx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -25,28 +25,28 @@ config/rx/rx-opts.h\n ; The default is -fpu -m32bit-doubles.\n \n m64bit-doubles\n-Target RejectNegative Mask(64BIT_DOUBLES) Report\n+Target RejectNegative Mask(64BIT_DOUBLES)\n Store doubles in 64 bits.\n \n m32bit-doubles\n-Target RejectNegative InverseMask(64BIT_DOUBLES) Report\n+Target RejectNegative InverseMask(64BIT_DOUBLES)\n Stores doubles in 32 bits.  This is the default.\n \n nofpu\n Target RejectNegative Alias(mnofpu)\n Disable the use of RX FPU instructions.\n \n mnofpu\n-Target RejectNegative Mask(NO_USE_FPU) Report Undocumented\n+Target RejectNegative Mask(NO_USE_FPU) Undocumented\n \n fpu\n-Target RejectNegative InverseMask(NO_USE_FPU) Report\n+Target RejectNegative InverseMask(NO_USE_FPU)\n Enable the use of RX FPU instructions.  This is the default.\n \n ;---------------------------------------------------\n \n mcpu=\n-Target RejectNegative Joined Var(rx_cpu_type) Report ToLower Enum(rx_cpu_types) Init(RX600)\n+Target RejectNegative Joined Var(rx_cpu_type) ToLower Enum(rx_cpu_types) Init(RX600)\n Specify the target RX cpu type.\n \n Enum\n@@ -67,11 +67,11 @@ Enum(rx_cpu_types) String(rx100) Value(RX100)\n ;---------------------------------------------------\n \n mbig-endian-data\n-Target RejectNegative Mask(BIG_ENDIAN_DATA) Report\n+Target RejectNegative Mask(BIG_ENDIAN_DATA)\n Data is stored in big-endian format.\n \n mlittle-endian-data\n-Target RejectNegative InverseMask(BIG_ENDIAN_DATA) Report\n+Target RejectNegative InverseMask(BIG_ENDIAN_DATA)\n Data is stored in little-endian format.  (Default).\n \n ;---------------------------------------------------\n@@ -113,33 +113,33 @@ Enables Position-Independent-Data (PID) mode.\n ;---------------------------------------------------\n \n mwarn-multiple-fast-interrupts\n-Target Report Var(rx_warn_multiple_fast_interrupts) Init(1) Warning\n+Target Var(rx_warn_multiple_fast_interrupts) Init(1) Warning\n Warn when multiple, different, fast interrupt handlers are in the compilation unit.\n \n ;---------------------------------------------------\n \n mgcc-abi\n-Target RejectNegative Report Mask(GCC_ABI)\n+Target RejectNegative Mask(GCC_ABI)\n Enable the use of the old, broken, ABI where all stacked function arguments are aligned to 32-bits.\n \n mrx-abi\n-Target RejectNegative Report InverseMask(GCC_ABI)\n+Target RejectNegative InverseMask(GCC_ABI)\n Enable the use the standard RX ABI where all stacked function arguments are naturally aligned.  This is the default.\n \n ;---------------------------------------------------\n \n mlra\n-Target Report Mask(ENABLE_LRA)\n+Target Mask(ENABLE_LRA)\n Enable the use of the LRA register allocator.\n \n ;---------------------------------------------------\n \n mallow-string-insns\n-Target Report Var(rx_allow_string_insns) Init(1)\n+Target Var(rx_allow_string_insns) Init(1)\n Enables or disables the use of the SMOVF, SMOVB, SMOVU, SUNTIL, SWHILE and RMPA instructions.  Enabled by default.\n \n ;---------------------------------------------------\n \n mjsr\n-Target Report Mask(JSR)\n+Target Mask(JSR)\n Always use JSR, never BSR, for calls."}, {"sha": "4bee31282db0fcebc0b4bf385034bf53a9689a08", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -44,11 +44,11 @@ Variable\n long s390_cost_pointer\n \n m31\n-Target Report RejectNegative Negative(m64) InverseMask(64BIT)\n+Target RejectNegative Negative(m64) InverseMask(64BIT)\n 31 bit ABI.\n \n m64\n-Target Report RejectNegative Negative(m31) Mask(64BIT)\n+Target RejectNegative Negative(m31) Mask(64BIT)\n 64 bit ABI.\n \n march=\n@@ -119,27 +119,27 @@ EnumValue\n Enum(processor_type) String(native) Value(PROCESSOR_NATIVE) DriverOnly\n \n mbackchain\n-Target Report Mask(BACKCHAIN) Save\n+Target Mask(BACKCHAIN) Save\n Maintain backchain pointer.\n \n mdebug\n-Target Report Mask(DEBUG_ARG) Save\n+Target Mask(DEBUG_ARG) Save\n Additional debug prints.\n \n mesa\n-Target Report RejectNegative Negative(mzarch) InverseMask(ZARCH)\n+Target RejectNegative Negative(mzarch) InverseMask(ZARCH)\n ESA/390 architecture.\n \n mhard-dfp\n-Target Report Mask(HARD_DFP) Save\n+Target Mask(HARD_DFP) Save\n Enable decimal floating point hardware support.\n \n mhard-float\n-Target Report RejectNegative Negative(msoft-float) InverseMask(SOFT_FLOAT, HARD_FLOAT) Save\n+Target RejectNegative Negative(msoft-float) InverseMask(SOFT_FLOAT, HARD_FLOAT) Save\n Enable hardware floating point.\n \n mhotpatch=\n-Target RejectNegative Report Joined Var(s390_deferred_options) Defer\n+Target RejectNegative Joined Var(s390_deferred_options) Defer\n Takes two non-negative integer numbers separated by a comma.\n Prepend the function label with the number of two-byte Nop\n instructions indicated by the first.  Append Nop instructions\n@@ -149,31 +149,31 @@ label.  Nop instructions of the largest possible size are used\n size.  Using 0 for both values disables hotpatching.\n \n mlong-double-128\n-Target Report RejectNegative Negative(mlong-double-64) Mask(LONG_DOUBLE_128)\n+Target RejectNegative Negative(mlong-double-64) Mask(LONG_DOUBLE_128)\n Use 128-bit long double.\n \n mlong-double-64\n-Target Report RejectNegative Negative(mlong-double-128) InverseMask(LONG_DOUBLE_128)\n+Target RejectNegative Negative(mlong-double-128) InverseMask(LONG_DOUBLE_128)\n Use 64-bit long double.\n \n mhtm\n-Target Report Mask(OPT_HTM) Save\n+Target Mask(OPT_HTM) Save\n Use hardware transactional execution instructions.\n \n mvx\n-Target Report Mask(OPT_VX) Save\n+Target Mask(OPT_VX) Save\n Use hardware vector facility instructions and enable the vector ABI.\n \n mpacked-stack\n-Target Report Mask(PACKED_STACK) Save\n+Target Mask(PACKED_STACK) Save\n Use packed stack layout.\n \n msmall-exec\n-Target Report Mask(SMALL_EXEC) Save\n+Target Mask(SMALL_EXEC) Save\n Use bras for executable < 64k.\n \n msoft-float\n-Target Report RejectNegative Negative(mhard-float) Mask(SOFT_FLOAT) Save\n+Target RejectNegative Negative(mhard-float) Mask(SOFT_FLOAT) Save\n Disable hardware floating point.\n \n mstack-guard=\n@@ -197,11 +197,11 @@ Target RejectNegative Joined Enum(processor_type) Var(s390_tune) Init(PROCESSOR_\n Schedule code for given CPU.\n \n mmvcle\n-Target Report Mask(MVCLE) Save\n+Target Mask(MVCLE) Save\n Use the mvcle instruction for block moves.\n \n mzvector\n-Target Report Mask(ZVECTOR) Save\n+Target Mask(ZVECTOR) Save\n Enable the z vector language extension providing the context-sensitive\n vector macro and enable the Altivec-style builtins in vecintrin.h.\n \n@@ -214,54 +214,54 @@ Target RejectNegative Joined UInteger Var(s390_warn_framesize) Save\n Warn if a single function's framesize exceeds the given framesize.\n \n mzarch\n-Target Report RejectNegative Negative(mesa) Mask(ZARCH)\n+Target RejectNegative Negative(mesa) Mask(ZARCH)\n z/Architecture.\n \n mbranch-cost=\n-Target Report Joined RejectNegative UInteger Var(s390_branch_cost) Init(1) Save\n+Target Joined RejectNegative UInteger Var(s390_branch_cost) Init(1) Save\n Set the branch costs for conditional branch instructions.  Reasonable\n values are small, non-negative integers.  The default branch cost is\n 1.\n \n mlra\n-Target Report Var(s390_lra_flag) Init(1) Save\n+Target Var(s390_lra_flag) Init(1) Save\n Use LRA instead of reload.\n \n mpic-data-is-text-relative\n-Target Report Var(s390_pic_data_is_text_relative) Init(TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE)\n+Target Var(s390_pic_data_is_text_relative) Init(TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE)\n Assume data segments are relative to text segment.\n \n \n mindirect-branch=\n-Target Report RejectNegative Joined Enum(indirect_branch) Var(s390_indirect_branch) Init(indirect_branch_keep)\n+Target RejectNegative Joined Enum(indirect_branch) Var(s390_indirect_branch) Init(indirect_branch_keep)\n Wrap all indirect branches into execute in order to disable branch\n prediction.\n \n mindirect-branch-jump=\n-Target Report RejectNegative Joined Enum(indirect_branch) Var(s390_indirect_branch_jump) Init(indirect_branch_keep)\n+Target RejectNegative Joined Enum(indirect_branch) Var(s390_indirect_branch_jump) Init(indirect_branch_keep)\n Wrap indirect table jumps and computed gotos into execute in order to\n disable branch prediction.  Using thunk or thunk-extern with this\n option requires the thunks to be considered signal handlers to order to\n generate correct CFI.  For environments where unwinding (e.g. for\n exceptions) is required please use thunk-inline instead.\n \n mindirect-branch-call=\n-Target Report RejectNegative Joined Enum(indirect_branch) Var(s390_indirect_branch_call) Init(indirect_branch_keep)\n+Target RejectNegative Joined Enum(indirect_branch) Var(s390_indirect_branch_call) Init(indirect_branch_keep)\n Wrap all indirect calls into execute in order to disable branch prediction.\n \n mfunction-return=\n-Target Report RejectNegative Joined Enum(indirect_branch) Var(s390_function_return) Init(indirect_branch_keep)\n+Target RejectNegative Joined Enum(indirect_branch) Var(s390_function_return) Init(indirect_branch_keep)\n Wrap all indirect return branches into execute in order to disable branch\n prediction.\n \n mfunction-return-mem=\n-Target Report RejectNegative Joined Enum(indirect_branch) Var(s390_function_return_mem) Init(indirect_branch_keep)\n+Target RejectNegative Joined Enum(indirect_branch) Var(s390_function_return_mem) Init(indirect_branch_keep)\n Wrap indirect return branches into execute in order to disable branch\n prediction. This affects only branches where the return address is\n going to be restored from memory.\n \n mfunction-return-reg=\n-Target Report RejectNegative Joined Enum(indirect_branch) Var(s390_function_return_reg) Init(indirect_branch_keep)\n+Target RejectNegative Joined Enum(indirect_branch) Var(s390_function_return_reg) Init(indirect_branch_keep)\n Wrap indirect return branches into execute in order to disable branch\n prediction. This affects only branches where the return address\n doesn't need to be restored from memory.\n@@ -283,7 +283,7 @@ EnumValue\n Enum(indirect_branch) String(thunk-extern) Value(indirect_branch_thunk_extern)\n \n mindirect-branch-table\n-Target Report Var(s390_indirect_branch_table) Init(TARGET_DEFAULT_INDIRECT_BRANCH_TABLE)\n+Target Var(s390_indirect_branch_table) Init(TARGET_DEFAULT_INDIRECT_BRANCH_TABLE)\n Generate sections .s390_indirect_jump, .s390_indirect_call,\n .s390_return_reg, and .s390_return_mem to contain the indirect branch\n locations which have been patched as part of using one of the\n@@ -292,21 +292,21 @@ consist of an array of 32 bit elements. Each entry holds the offset\n from the entry to the patched location.\n \n mfentry\n-Target Report Var(flag_fentry)\n+Target Var(flag_fentry)\n Emit profiling counter call at function entry before prologue. The compiled\n code will require a 64-bit CPU and glibc 2.29 or newer to run.\n \n mrecord-mcount\n-Target Report Var(flag_record_mcount)\n+Target Var(flag_record_mcount)\n Generate __mcount_loc section with all _mcount and __fentry__ calls.\n \n mnop-mcount\n-Target Report Var(flag_nop_mcount)\n+Target Var(flag_nop_mcount)\n Generate mcount/__fentry__ calls as nops. To activate they need to be\n patched in.\n \n mvx-long-double-fma\n-Target Report Undocumented Var(flag_vx_long_double_fma)\n+Target Undocumented Var(flag_vx_long_double_fma)\n Emit fused multiply-add instructions for long doubles in vector registers\n (wfmaxb, wfmsxb, wfnmaxb, wfnmsxb).  Reassociation pass does not handle\n fused multiply-adds, therefore code generated by the middle-end is prone to"}, {"sha": "6132803586ff8e1415f64a2859d730f03800ca87", "filename": "gcc/config/s390/tpf.opt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fs390%2Ftpf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fs390%2Ftpf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,29 +19,29 @@\n ; <http://www.gnu.org/licenses/>.\n \n mtpf-trace\n-Target Report Mask(TPF_PROFILING)\n+Target Mask(TPF_PROFILING)\n Enable TPF-OS tracing code.\n \n mtpf-trace-hook-prologue-check=\n-Target RejectNegative Report Joined UInteger Var(s390_tpf_trace_hook_prologue_check) Init(TPF_TRACE_PROLOGUE_CHECK)\n+Target RejectNegative Joined UInteger Var(s390_tpf_trace_hook_prologue_check) Init(TPF_TRACE_PROLOGUE_CHECK)\n Set the trace check address for prologue tpf hook\n \n mtpf-trace-hook-prologue-target=\n-Target RejectNegative Report Joined UInteger Var(s390_tpf_trace_hook_prologue_target) Init(TPF_TRACE_PROLOGUE_TARGET)\n+Target RejectNegative Joined UInteger Var(s390_tpf_trace_hook_prologue_target) Init(TPF_TRACE_PROLOGUE_TARGET)\n Set the trace jump address for prologue tpf hook\n \n mtpf-trace-hook-epilogue-check=\n-Target RejectNegative Report Joined UInteger Var(s390_tpf_trace_hook_epilogue_check) Init(TPF_TRACE_EPILOGUE_CHECK)\n+Target RejectNegative Joined UInteger Var(s390_tpf_trace_hook_epilogue_check) Init(TPF_TRACE_EPILOGUE_CHECK)\n Set the trace check address for epilogue tpf hook\n \n mtpf-trace-hook-epilogue-target=\n-Target RejectNegative Report Joined UInteger Var(s390_tpf_trace_hook_epilogue_target) Init(TPF_TRACE_EPILOGUE_TARGET)\n+Target RejectNegative Joined UInteger Var(s390_tpf_trace_hook_epilogue_target) Init(TPF_TRACE_EPILOGUE_TARGET)\n Set the trace jump address for epilogue tpf hook\n \n mtpf-trace-skip\n-Target Report Var(s390_tpf_trace_skip) Init(0)\n+Target Var(s390_tpf_trace_skip) Init(0)\n Set the prologue and epilogue hook addresses to TPF_TRACE_PROLOGUE_SKIP_TARGET and TPF_TRACE_EPILOGUE_SKIP_TARGET. Equivalent to using -mtpf-trace-hook-prologue-target=TPF_TRACE_PROLOGUE_SKIP_TARGET and -mtpf-trace-hook-epilogue-target=TPF_TRACE_EPILOGUE_SKIP_TARGET\n \n mmain\n-Target Report\n+Target\n Specify main object for TPF-OS."}, {"sha": "fb6d82907b87b2b71acdf76f375b4b3c5c724a3c", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -175,35 +175,35 @@ Target RejectNegative Condition(SUPPORT_SH4AL)\n Generate SH4al-dsp code.\n \n maccumulate-outgoing-args\n-Target Report Var(TARGET_ACCUMULATE_OUTGOING_ARGS) Init(1)\n+Target Var(TARGET_ACCUMULATE_OUTGOING_ARGS) Init(1)\n Reserve space for outgoing arguments in the function prologue.\n \n mb\n-Target Report RejectNegative InverseMask(LITTLE_ENDIAN)\n+Target RejectNegative InverseMask(LITTLE_ENDIAN)\n Generate code in big endian mode.\n \n mbigtable\n-Target Report RejectNegative Mask(BIGTABLE)\n+Target RejectNegative Mask(BIGTABLE)\n Generate 32-bit offsets in switch tables.\n \n mbitops\n-Target Report RejectNegative Mask(BITOPS)\n+Target RejectNegative Mask(BITOPS)\n Generate bit instructions.\n \n mbranch-cost=\n Target RejectNegative Joined UInteger Var(sh_branch_cost) Init(-1)\n Cost to assume for a branch insn.\n \n mzdcbranch\n-Target Report Var(TARGET_ZDCBRANCH)\n+Target Var(TARGET_ZDCBRANCH)\n Assume that zero displacement conditional branches are fast.\n \n mcbranch-force-delay-slot\n-Target Report RejectNegative Var(TARGET_CBRANCH_FORCE_DELAY_SLOT) Init(0)\n+Target RejectNegative Var(TARGET_CBRANCH_FORCE_DELAY_SLOT) Init(0)\n Force the usage of delay slots for conditional branches.\n \n mdalign\n-Target Report RejectNegative Mask(ALIGN_DOUBLE)\n+Target RejectNegative Mask(ALIGN_DOUBLE)\n Align doubles at 64-bit boundaries.\n \n mdiv=\n@@ -215,7 +215,7 @@ Target RejectNegative Joined Var(sh_divsi3_libfunc) Init(\"\")\n Specify name for 32 bit signed division function.\n \n mfdpic\n-Target Report Var(TARGET_FDPIC) Init(0)\n+Target Var(TARGET_FDPIC) Init(0)\n Generate ELF FDPIC code.\n \n mfmovd\n@@ -227,53 +227,53 @@ Target RejectNegative Joined Var(sh_fixed_range_str)\n Specify range of registers to make fixed.\n \n mhitachi\n-Target Report RejectNegative Mask(HITACHI)\n+Target RejectNegative Mask(HITACHI)\n Follow Renesas (formerly Hitachi) / SuperH calling conventions.\n \n mieee\n Target Var(TARGET_IEEE)\n Increase the IEEE compliance for floating-point comparisons.\n \n minline-ic_invalidate\n-Target Report Var(TARGET_INLINE_IC_INVALIDATE)\n+Target Var(TARGET_INLINE_IC_INVALIDATE)\n Inline code to invalidate instruction cache entries after setting up nested function trampolines.\n \n misize\n-Target Report RejectNegative Mask(DUMPISIZE)\n+Target RejectNegative Mask(DUMPISIZE)\n Annotate assembler instructions with estimated addresses.\n \n ml\n-Target Report RejectNegative Mask(LITTLE_ENDIAN)\n+Target RejectNegative Mask(LITTLE_ENDIAN)\n Generate code in little endian mode.\n \n mnomacsave\n-Target Report RejectNegative Mask(NOMACSAVE)\n+Target RejectNegative Mask(NOMACSAVE)\n Mark MAC register as call-clobbered.\n \n ;; ??? This option is not useful, but is retained in case there are people\n ;; who are still relying on it.  It may be deleted in the future.\n mpadstruct\n-Target Report RejectNegative Mask(PADSTRUCT)\n+Target RejectNegative Mask(PADSTRUCT)\n Make structs a multiple of 4 bytes (warning: ABI altered).\n \n mprefergot\n-Target Report RejectNegative Mask(PREFERGOT)\n+Target RejectNegative Mask(PREFERGOT)\n Emit function-calls using global offset table when generating PIC.\n \n mrelax\n-Target Report RejectNegative Mask(RELAX)\n+Target RejectNegative Mask(RELAX)\n Shorten address references during linking.\n \n mrenesas\n Target Mask(HITACHI)\n Follow Renesas (formerly Hitachi) / SuperH calling conventions.\n \n matomic-model=\n-Target Report RejectNegative Joined Var(sh_atomic_model_str)\n+Target RejectNegative Joined Var(sh_atomic_model_str)\n Specify the model for atomic operations.\n \n mtas\n-Target Report RejectNegative Var(TARGET_ENABLE_TAS)\n+Target RejectNegative Var(TARGET_ENABLE_TAS)\n Use tas.b instruction for __atomic_test_and_set.\n \n multcost=\n@@ -299,5 +299,5 @@ Target Var(TARGET_FSRRA)\n Enable the use of the fsrra instruction.\n \n mlra\n-Target Report Var(sh_lra_flag) Init(0) Save\n+Target Var(sh_lra_flag) Init(0) Save\n Use LRA instead of reload (transitional)."}, {"sha": "99cb263e94c2fdaeea596439963d0618bbcce4fa", "filename": "gcc/config/sol2.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fsol2.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fsol2.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -28,11 +28,11 @@ Ym,\n Driver Joined\n \n mclear-hwcap\n-Target Report\n+Target\n Clear hardware capabilities when linking.\n \n mimpure-text\n-Target Report\n+Target\n Pass -z text to linker.\n \n pthread"}, {"sha": "76e25de3f38fb3febff5e291fae4045fa7b7b7ba", "filename": "gcc/config/sparc/long-double-switch.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fsparc%2Flong-double-switch.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fsparc%2Flong-double-switch.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flong-double-switch.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,9 +19,9 @@\n ; <http://www.gnu.org/licenses/>.\n \n mlong-double-128\n-Target Report RejectNegative Mask(LONG_DOUBLE_128)\n+Target RejectNegative Mask(LONG_DOUBLE_128)\n Use 128-bit long double.\n \n mlong-double-64\n-Target Report RejectNegative InverseMask(LONG_DOUBLE_128)\n+Target RejectNegative InverseMask(LONG_DOUBLE_128)\n Use 64-bit long double."}, {"sha": "7731e7ecabfd3dace99b60c29adddae5b942e4e7", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -26,7 +26,7 @@ TargetVariable\n unsigned int sparc_debug\n \n mfpu\n-Target Report Mask(FPU)\n+Target Mask(FPU)\n Use hardware FP.\n \n mhard-float\n@@ -38,103 +38,103 @@ Target RejectNegative InverseMask(FPU)\n Do not use hardware FP.\n \n mflat\n-Target Report Mask(FLAT)\n+Target Mask(FLAT)\n Use flat register window model.\n \n munaligned-doubles\n-Target Report Mask(UNALIGNED_DOUBLES)\n+Target Mask(UNALIGNED_DOUBLES)\n Assume possible double misalignment.\n \n mapp-regs\n-Target Report Mask(APP_REGS)\n+Target Mask(APP_REGS)\n Use ABI reserved registers.\n \n mhard-quad-float\n-Target Report RejectNegative Mask(HARD_QUAD)\n+Target RejectNegative Mask(HARD_QUAD)\n Use hardware quad FP instructions.\n \n msoft-quad-float\n-Target Report RejectNegative InverseMask(HARD_QUAD)\n+Target RejectNegative InverseMask(HARD_QUAD)\n Do not use hardware quad fp instructions.\n \n mlra\n-Target Report Mask(LRA)\n+Target Mask(LRA)\n Enable Local Register Allocation.\n \n mv8plus\n-Target Report Mask(V8PLUS)\n+Target Mask(V8PLUS)\n Compile for V8+ ABI.\n \n mvis\n-Target Report Mask(VIS)\n+Target Mask(VIS)\n Use UltraSPARC Visual Instruction Set version 1.0 extensions.\n \n mvis2\n-Target Report Mask(VIS2)\n+Target Mask(VIS2)\n Use UltraSPARC Visual Instruction Set version 2.0 extensions.\n \n mvis3\n-Target Report Mask(VIS3)\n+Target Mask(VIS3)\n Use UltraSPARC Visual Instruction Set version 3.0 extensions.\n \n mvis4\n-Target Report Mask(VIS4)\n+Target Mask(VIS4)\n Use UltraSPARC Visual Instruction Set version 4.0 extensions.\n \n mvis4b\n-Target Report Mask(VIS4B)\n+Target Mask(VIS4B)\n Use additional VIS instructions introduced in OSA2017.\n \n mcbcond\n-Target Report Mask(CBCOND)\n+Target Mask(CBCOND)\n Use UltraSPARC Compare-and-Branch extensions.\n \n mfmaf\n-Target Report Mask(FMAF)\n+Target Mask(FMAF)\n Use UltraSPARC Fused Multiply-Add extensions.\n \n mfsmuld\n-Target Report Mask(FSMULD)\n+Target Mask(FSMULD)\n Use Floating-point Multiply Single to Double (FsMULd) instruction.\n \n mpopc\n-Target Report Mask(POPC)\n+Target Mask(POPC)\n Use UltraSPARC Population-Count instruction.\n \n msubxc\n-Target Report Mask(SUBXC)\n+Target Mask(SUBXC)\n Use UltraSPARC Subtract-Extended-with-Carry instruction.\n \n mptr64\n-Target Report RejectNegative Mask(PTR64)\n+Target RejectNegative Mask(PTR64)\n Pointers are 64-bit.\n \n mptr32\n-Target Report RejectNegative InverseMask(PTR64)\n+Target RejectNegative InverseMask(PTR64)\n Pointers are 32-bit.\n \n m64\n-Target Report RejectNegative Mask(64BIT)\n+Target RejectNegative Mask(64BIT)\n Use 64-bit ABI.\n \n m32\n-Target Report RejectNegative InverseMask(64BIT)\n+Target RejectNegative InverseMask(64BIT)\n Use 32-bit ABI.\n \n mstack-bias\n-Target Report Mask(STACK_BIAS)\n+Target Mask(STACK_BIAS)\n Use stack bias.\n \n mfaster-structs\n-Target Report Mask(FASTER_STRUCTS)\n+Target Mask(FASTER_STRUCTS)\n Use structs on stronger alignment for double-word copies.\n \n mrelax\n Target\n Optimize tail call instructions in assembler and linker.\n \n muser-mode\n-Target Report InverseMask(SV_MODE)\n+Target InverseMask(SV_MODE)\n Do not generate code that can only run in supervisor mode (default).\n \n mcpu=\n@@ -247,24 +247,24 @@ Target RejectNegative Joined Undocumented Var(sparc_debug_string)\n Enable debug output.\n \n mstd-struct-return\n-Target Report Var(sparc_std_struct_return)\n+Target Var(sparc_std_struct_return)\n Enable strict 32-bit psABI struct return checking.\n \n mfix-at697f\n-Target Report RejectNegative Var(sparc_fix_at697f)\n+Target RejectNegative Var(sparc_fix_at697f)\n Enable workaround for single erratum of AT697F processor\n (corresponding to erratum #13 of AT697E processor).\n \n mfix-ut699\n-Target Report RejectNegative Var(sparc_fix_ut699)\n+Target RejectNegative Var(sparc_fix_ut699)\n Enable workarounds for the errata of the UT699 processor.\n \n mfix-ut700\n-Target Report RejectNegative Var(sparc_fix_ut700)\n+Target RejectNegative Var(sparc_fix_ut700)\n Enable workarounds for the errata of the UT699E/UT700 processor.\n \n mfix-gr712rc\n-Target Report RejectNegative Var(sparc_fix_gr712rc)\n+Target RejectNegative Var(sparc_fix_gr712rc)\n Enable workarounds for the errata of the GR712RC processor.\n \n ;; Enable workaround for back-to-back store errata"}, {"sha": "883e09a37ea96bc62ee79bb9407756fe9ab18615", "filename": "gcc/config/tilegx/tilegx.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Ftilegx%2Ftilegx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Ftilegx%2Ftilegx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -33,19 +33,19 @@ EnumValue\n Enum(tilegx_cpu) String(tilegx) Value(0)\n \n m32\n-Target Report RejectNegative Negative(m64) Mask(32BIT)\n+Target RejectNegative Negative(m64) Mask(32BIT)\n Compile with 32 bit longs and pointers.\n \n m64\n-Target Report RejectNegative Negative(m32) InverseMask(32BIT, 64BIT)\n+Target RejectNegative Negative(m32) InverseMask(32BIT, 64BIT)\n Compile with 64 bit longs and pointers.\n \n mbig-endian\n-Target Report RejectNegative Mask(BIG_ENDIAN)\n+Target RejectNegative Mask(BIG_ENDIAN)\n Use big-endian byte order.\n \n mlittle-endian\n-Target Report RejectNegative InverseMask(BIG_ENDIAN)\n+Target RejectNegative InverseMask(BIG_ENDIAN)\n Use little-endian byte order.\n \n mcmodel="}, {"sha": "e4ed3a04ac07aa89982c7a2c535dd4deb2beaa5f", "filename": "gcc/config/tilepro/tilepro.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Ftilepro%2Ftilepro.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Ftilepro%2Ftilepro.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,7 +19,7 @@\n ; <http://www.gnu.org/licenses/>.\n \n m32\n-Target Report RejectNegative\n+Target RejectNegative\n Compile with 32 bit longs and pointers, which is the only supported\n behavior and thus the flag is ignored.\n "}, {"sha": "69d62f34d0b8dab9cdfd0ed4c2410ceac9bfca1f", "filename": "gcc/config/v850/v850.opt", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fv850%2Fv850.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fv850%2Fv850.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -25,34 +25,34 @@ Variable\n int small_memory_max[(int)SMALL_MEMORY_max] = { 0, 0, 0 }\n \n mapp-regs\n-Target Report Mask(APP_REGS)\n+Target Mask(APP_REGS)\n Use registers r2 and r5.\n \n mbig-switch\n-Target Report Mask(BIG_SWITCH)\n+Target Mask(BIG_SWITCH)\n Use 4 byte entries in switch tables.\n \n mdebug\n-Target Report Mask(DEBUG)\n+Target Mask(DEBUG)\n Enable backend debugging.\n \n mdisable-callt\n-Target Report Mask(DISABLE_CALLT)\n+Target Mask(DISABLE_CALLT)\n Do not use the callt instruction (default).\n \n mep\n-Target Report Mask(EP)\n+Target Mask(EP)\n Reuse r30 on a per function basis.\n \n mghs\n Target RejectNegative InverseMask(GCC_ABI) MaskExists\n \n mlong-calls\n-Target Report Mask(LONG_CALLS)\n+Target Mask(LONG_CALLS)\n Prohibit PC relative function calls.\n \n mprolog-function\n-Target Report Mask(PROLOG_FUNCTION)\n+Target Mask(PROLOG_FUNCTION)\n Use stubs for function prologues.\n \n msda=\n@@ -63,7 +63,7 @@ msda-\n Target RejectNegative Joined Undocumented Alias(msda=)\n \n msmall-sld\n-Target Report Mask(SMALL_SLD)\n+Target Mask(SMALL_SLD)\n Enable the use of the short load instructions.\n \n mspace\n@@ -78,22 +78,22 @@ mtda-\n Target RejectNegative Joined Undocumented Alias(mtda=)\n \n mno-strict-align\n-Target Report Mask(NO_STRICT_ALIGN)\n+Target Mask(NO_STRICT_ALIGN)\n Do not enforce strict alignment.\n \n mjump-tables-in-data-section\n-Target Report Mask(JUMP_TABLES_IN_DATA_SECTION)\n+Target Mask(JUMP_TABLES_IN_DATA_SECTION)\n Put jump tables for switch statements into the .data section rather than the .code section.\n \n mUS-bit-set\n-Target Report Mask(US_BIT_SET)\n+Target Mask(US_BIT_SET)\n \n mv850\n-Target Report RejectNegative Mask(V850)\n+Target RejectNegative Mask(V850)\n Compile for the v850 processor.\n \n mv850e\n-Target Report RejectNegative Mask(V850E)\n+Target RejectNegative Mask(V850E)\n Compile for the v850e processor.\n \n mv850e1\n@@ -105,22 +105,22 @@ Target RejectNegative Mask(V850E1)\n Compile for the v850es variant of the v850e1.\n \n mv850e2\n-Target Report RejectNegative Mask(V850E2)\n+Target RejectNegative Mask(V850E2)\n Compile for the v850e2 processor.\n \n mv850e2v3\n-Target Report RejectNegative Mask(V850E2V3)\n+Target RejectNegative Mask(V850E2V3)\n Compile for the v850e2v3 processor.\n \n mv850e3v5\n-Target Report RejectNegative Mask(V850E3V5)\n+Target RejectNegative Mask(V850E3V5)\n Compile for the v850e3v5 processor.\n \n mv850e2v4\n Target RejectNegative Mask(V850E3V5) MaskExists\n \n mloop\n-Target Report Mask(LOOP)\n+Target Mask(LOOP)\n Enable v850e3v5 loop instructions.\n \n mzda=\n@@ -131,29 +131,29 @@ mzda-\n Target RejectNegative Joined Undocumented Alias(mzda=)\n \n mrelax\n-Target Report Mask(RELAX)\n+Target Mask(RELAX)\n Enable relaxing in the assembler.\n \n mlong-jumps\n-Target Report Mask(BIG_SWITCH) MaskExists\n+Target Mask(BIG_SWITCH) MaskExists\n Prohibit PC relative jumps.\n \n msoft-float\n-Target Report RejectNegative Mask(SOFT_FLOAT)\n+Target RejectNegative Mask(SOFT_FLOAT)\n Inhibit the use of hardware floating point instructions.\n \n mhard-float\n-Target Report RejectNegative InverseMask(SOFT_FLOAT) MaskExists\n+Target RejectNegative InverseMask(SOFT_FLOAT) MaskExists\n Allow the use of hardware floating point instructions for V850E2V3 and up.\n \n mrh850-abi\n-Target RejectNegative Report InverseMask(GCC_ABI) MaskExists\n+Target RejectNegative InverseMask(GCC_ABI) MaskExists\n Enable support for the RH850 ABI.  This is the default.\n \n mgcc-abi\n-Target RejectNegative Report Mask(GCC_ABI)\n+Target RejectNegative Mask(GCC_ABI)\n Enable support for the old GCC ABI.\n \n m8byte-align\n-Target Report Mask(8BYTE_ALIGN)\n+Target Mask(8BYTE_ALIGN)\n Support alignments of up to 64-bits."}, {"sha": "efb792ad9ed44caa954b27bbd074ae40be76f3b6", "filename": "gcc/config/visium/visium.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fvisium%2Fvisium.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fvisium%2Fvisium.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -29,7 +29,7 @@ Target RejectNegative\n Link with libc.a and libsim.a.\n \n mfpu\n-Target Report Mask(FPU)\n+Target Mask(FPU)\n Use hardware FP (default).\n \n mhard-float\n@@ -61,11 +61,11 @@ EnumValue\n Enum(visium_processor_type) String(gr6) Value(PROCESSOR_GR6)\n \n msv-mode\n-Target RejectNegative Report Mask(SV_MODE)\n+Target RejectNegative Mask(SV_MODE)\n Generate code for the supervisor mode (default).\n \n muser-mode\n-Target RejectNegative Report InverseMask(SV_MODE)\n+Target RejectNegative InverseMask(SV_MODE)\n Generate code for the user mode.\n \n menable-trampolines"}, {"sha": "827e95f13534549fcd1504f5d4c662ba03e4b5af", "filename": "gcc/config/vms/vms.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fvms%2Fvms.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fvms%2Fvms.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -23,19 +23,19 @@ map\n Target RejectNegative\n \n mmalloc64\n-Target Report Var(flag_vms_malloc64) Init(1)\n+Target Var(flag_vms_malloc64) Init(1)\n Malloc data into P2 space.\n \n mdebug-main=\n Target RejectNegative Joined Var(vms_debug_main)\n Set name of main routine for the debugger.\n \n mvms-return-codes\n-Target Report Var(flag_vms_return_codes)\n+Target Var(flag_vms_return_codes)\n Use VMS exit codes instead of posix ones.\n \n mpointer-size=\n-Target Joined Report RejectNegative Enum(vms_pointer_size) Var(flag_vms_pointer_size) Init(VMS_POINTER_SIZE_NONE)\n+Target Joined RejectNegative Enum(vms_pointer_size) Var(flag_vms_pointer_size) Init(VMS_POINTER_SIZE_NONE)\n -mpointer-size=[no,32,short,64,long]\tSet the default pointer size.\n \n Enum"}, {"sha": "9e0aaf2803f3b845fe50e8c4d4ce1bc3d6c4debe", "filename": "gcc/config/vxworks.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fvxworks.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fvxworks.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -32,7 +32,7 @@ Xbind-now\n Driver Condition(VXWORKS_KIND == VXWORKS_KIND_NORMAL)\n \n mrtp\n-Target Report RejectNegative Mask(VXWORKS_RTP) Condition(VXWORKS_KIND == VXWORKS_KIND_NORMAL)\n+Target RejectNegative Mask(VXWORKS_RTP) Condition(VXWORKS_KIND == VXWORKS_KIND_NORMAL)\n Assume the VxWorks RTP environment.\n \n ; VxWorks AE has two modes: kernel mode and vThreads mode.  In"}, {"sha": "4887f5a4ff62065dc01299e5845a1052fada8992", "filename": "gcc/config/xtensa/xtensa.opt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -19,11 +19,11 @@\n ; <http://www.gnu.org/licenses/>.\n \n mconst16\n-Target Report Mask(CONST16)\n+Target Mask(CONST16)\n Use CONST16 instruction to load constants.\n \n mforce-no-pic\n-Target Report Mask(FORCE_NO_PIC)\n+Target Mask(FORCE_NO_PIC)\n Disable position-independent code (PIC) for use in OS kernel code.\n \n mlongcalls\n@@ -39,20 +39,20 @@ Target\n Intersperse literal pools with code in the text section.\n \n mauto-litpools\n-Target Report Mask(AUTO_LITPOOLS)\n+Target Mask(AUTO_LITPOOLS)\n Relax literals in assembler and place them automatically in the text section.\n \n mserialize-volatile\n-Target Report Mask(SERIALIZE_VOLATILE)\n+Target Mask(SERIALIZE_VOLATILE)\n -mno-serialize-volatile\tDo not serialize volatile memory references with MEMW instructions.\n \n TargetVariable\n int xtensa_windowed_abi = -1\n \n mabi=call0\n-Target Report RejectNegative Var(xtensa_windowed_abi, 0)\n+Target RejectNegative Var(xtensa_windowed_abi, 0)\n Use call0 ABI.\n \n mabi=windowed\n-Target Report RejectNegative Var(xtensa_windowed_abi, 1)\n+Target RejectNegative Var(xtensa_windowed_abi, 1)\n Use windowed registers ABI."}, {"sha": "2ef76f187ae3d846b28a70165986683c84843c9b", "filename": "gcc/lto/lang.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Flto%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece52b53b75767593282d178bae12ceebb33f12/gcc%2Flto%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flang.opt?ref=eece52b53b75767593282d178bae12ceebb33f12", "patch": "@@ -49,20 +49,20 @@ EnumValue\n Enum(lto_linker_output) String(exec) Value(LTO_LINKER_OUTPUT_EXEC)\n \n flinker-output=\n-LTO Report Driver Joined RejectNegative Enum(lto_linker_output) Var(flag_lto_linker_output) Init(LTO_LINKER_OUTPUT_UNKNOWN)\n+LTO Driver Joined RejectNegative Enum(lto_linker_output) Var(flag_lto_linker_output) Init(LTO_LINKER_OUTPUT_UNKNOWN)\n Set linker output type (used internally during LTO optimization).\n \n \n fltrans\n-LTO Report Var(flag_ltrans)\n+LTO Var(flag_ltrans)\n Run the link-time optimizer in local transformation (LTRANS) mode.\n \n fltrans-output-list=\n LTO Joined Var(ltrans_output_list)\n Specify a file to which a list of files output by LTRANS is written.\n \n fwpa\n-LTO Driver Report\n+LTO Driver\n Run the link-time optimizer in whole program analysis (WPA) mode.\n \n fwpa="}]}