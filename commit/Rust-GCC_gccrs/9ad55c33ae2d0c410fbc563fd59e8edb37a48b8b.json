{"sha": "9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkNTVjMzNhZTJkMGM0MTBmYmM1NjNmZDU5ZThlZGIzN2E0OGI4Yg==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-06-07T18:57:43Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-06-07T18:57:43Z"}, "message": "re PR fortran/40008 (F2008: Add NEWUNIT= for OPEN statement)\n\n2009-05-31  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/40008\n\t* gfortran.h (gfc_open): Add newunit expression to structure.\n\t* io.c (io_tag): Add new unit tag and fix whitespace.\n\t(match_open_element): Add matching for newunit.\n\t(gfc_free_open): Free the newunit expression.\n\t(gfc_resolve_open): Add newunit to resolution and check constraints.\n\t(gfc_resolve_close): Add check for non-negative unit.\n\t(gfc_resolve_filepos): Likewise.\n\t(gfc_resolve_dt): Likewise.\n\t* trans-io.c (set_parameter_value): Build runtime checks for unit\n\tnumbers within range of kind=4 integer. (gfc_trans_open) Set the\n\tnewunit parameter.\n\t* ioparm.def (IOPARM): Define the newunit parameter as a pointer\n\tto GFC_INTEGER_4, pint4.\n\nFrom-SVN: r148252", "tree": {"sha": "e2b0715b914cdb097c8b193771d9487252906c00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2b0715b914cdb097c8b193771d9487252906c00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b/comments", "author": null, "committer": null, "parents": [{"sha": "690aefeba465a8fc85b779fa56d24ad892f17281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690aefeba465a8fc85b779fa56d24ad892f17281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/690aefeba465a8fc85b779fa56d24ad892f17281"}], "stats": {"total": 95, "additions": 83, "deletions": 12}, "files": [{"sha": "14cef2b7a676063c6050ab45d3133186ea4f276b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b", "patch": "@@ -1,3 +1,20 @@\n+2009-05-31  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/40008\n+\t* gfortran.h (gfc_open): Add newunit expression to structure.\n+\t* io.c (io_tag): Add new unit tag and fix whitespace.\n+\t(match_open_element): Add matching for newunit.\n+\t(gfc_free_open): Free the newunit expression.\n+\t(gfc_resolve_open): Add newunit to resolution and check constraints.\n+\t(gfc_resolve_close): Add check for non-negative unit.\n+\t(gfc_resolve_filepos): Likewise.\n+\t(gfc_resolve_dt): Likewise.\n+\t* trans-io.c (set_parameter_value): Build runtime checks for unit\n+\tnumbers within range of kind=4 integer. (gfc_trans_open) Set the\n+\tnewunit parameter.\n+\t* ioparm.def (IOPARM): Define the newunit parameter as a pointer\n+\tto GFC_INTEGER_4, pint4.\n+\n 2009-06-07  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/25104"}, {"sha": "c8347d032c0cae3384e6cf38f329e4ff8868b4ed", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b", "patch": "@@ -1818,7 +1818,7 @@ typedef struct\n {\n   gfc_expr *unit, *file, *status, *access, *form, *recl,\n     *blank, *position, *action, *delim, *pad, *iostat, *iomsg, *convert,\n-    *decimal, *encoding, *round, *sign, *asynchronous, *id;\n+    *decimal, *encoding, *round, *sign, *asynchronous, *id, *newunit;\n   gfc_st_label *err;\n }\n gfc_open;"}, {"sha": "ea562923f05b12a219632337e2327d2c2f87ce13", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b", "patch": "@@ -38,8 +38,8 @@ typedef struct\n io_tag;\n \n static const io_tag\n-\ttag_file\t= { \"FILE\", \" file =\", \" %e\", BT_CHARACTER },\n-\ttag_status\t= { \"STATUS\", \" status =\", \" %e\", BT_CHARACTER},\n+\ttag_file\t= {\"FILE\", \" file =\", \" %e\", BT_CHARACTER },\n+\ttag_status\t= {\"STATUS\", \" status =\", \" %e\", BT_CHARACTER},\n \ttag_e_access\t= {\"ACCESS\", \" access =\", \" %e\", BT_CHARACTER},\n \ttag_e_form\t= {\"FORM\", \" form =\", \" %e\", BT_CHARACTER},\n \ttag_e_recl\t= {\"RECL\", \" recl =\", \" %e\", BT_INTEGER},\n@@ -94,7 +94,8 @@ static const io_tag\n \ttag_end\t\t= {\"END\", \" end =\", \" %l\", BT_UNKNOWN},\n \ttag_eor\t\t= {\"EOR\", \" eor =\", \" %l\", BT_UNKNOWN},\n \ttag_id\t\t= {\"ID\", \" id =\", \" %v\", BT_INTEGER},\n-\ttag_pending\t= {\"PENDING\", \" pending =\", \" %v\", BT_LOGICAL};\n+\ttag_pending\t= {\"PENDING\", \" pending =\", \" %v\", BT_LOGICAL},\n+\ttag_newunit\t= {\"NEWUNIT\", \" newunit =\", \" %v\", BT_INTEGER};\n \n static gfc_dt *current_dt;\n \n@@ -1422,6 +1423,9 @@ match_open_element (gfc_open *open)\n   if (m != MATCH_NO)\n     return m;\n   m = match_etag (&tag_convert, &open->convert);\n+  if (m != MATCH_NO)\n+    return m;\n+  m = match_out_tag (&tag_newunit, &open->newunit);\n   if (m != MATCH_NO)\n     return m;\n \n@@ -1456,6 +1460,7 @@ gfc_free_open (gfc_open *open)\n   gfc_free_expr (open->sign);\n   gfc_free_expr (open->convert);\n   gfc_free_expr (open->asynchronous);\n+  gfc_free_expr (open->newunit);\n   gfc_free (open);\n }\n \n@@ -1485,6 +1490,7 @@ gfc_resolve_open (gfc_open *open)\n   RESOLVE_TAG (&tag_e_round, open->round);\n   RESOLVE_TAG (&tag_e_sign, open->sign);\n   RESOLVE_TAG (&tag_convert, open->convert);\n+  RESOLVE_TAG (&tag_newunit, open->newunit);\n \n   if (gfc_reference_st_label (open->err, ST_LABEL_TARGET) == FAILURE)\n     return FAILURE;\n@@ -1645,6 +1651,26 @@ gfc_match_open (void)\n     }\n \n   warn = (open->err || open->iostat) ? true : false;\n+\n+  /* Checks on NEWUNIT specifier.  */\n+  if (open->newunit)\n+    {\n+      if (open->unit)\n+\t{\n+\t  gfc_error (\"UNIT specifier not allowed with NEWUNIT at %C\");\n+\t  goto cleanup;\n+\t}\n+\n+      if (!(open->file || (open->status\n+          && gfc_wide_strncasecmp (open->status->value.character.string,\n+\t\t\t\t   \"scratch\", 7) == 0)))\n+\t{\n+\t  gfc_error (\"NEWUNIT specifier must have FILE= \"\n+\t\t     \"or STATUS='scratch' at %C\");\n+\t  goto cleanup;\n+\t}\n+    }\n+\n   /* Checks on the ACCESS specifier.  */\n   if (open->access && open->access->expr_type == EXPR_CONSTANT)\n     {\n@@ -2072,6 +2098,14 @@ gfc_resolve_close (gfc_close *close)\n   if (gfc_reference_st_label (close->err, ST_LABEL_TARGET) == FAILURE)\n     return FAILURE;\n \n+  if (close->unit->expr_type == EXPR_CONSTANT\n+      && close->unit->ts.type == BT_INTEGER\n+      && mpz_sgn (close->unit->value.integer) < 0)\n+    {\n+      gfc_error (\"UNIT number in CLOSE statement at %L must be non-negative\",\n+\t\t &close->unit->where);\n+    }\n+\n   return SUCCESS;\n }\n \n@@ -2194,6 +2228,14 @@ gfc_resolve_filepos (gfc_filepos *fp)\n   if (gfc_reference_st_label (fp->err, ST_LABEL_TARGET) == FAILURE)\n     return FAILURE;\n \n+  if (fp->unit->expr_type == EXPR_CONSTANT\n+      && fp->unit->ts.type == BT_INTEGER\n+      && mpz_sgn (fp->unit->value.integer) < 0)\n+    {\n+      gfc_error (\"UNIT number in statement at %L must be non-negative\",\n+\t\t &fp->unit->where);\n+    }\n+\n   return SUCCESS;\n }\n \n@@ -2589,6 +2631,12 @@ gfc_resolve_dt (gfc_dt *dt)\n       return FAILURE;\n     }\n \n+  if (e->expr_type == EXPR_CONSTANT && e->ts.type == BT_INTEGER\n+      && mpz_sgn (e->value.integer) < 0)\n+    {\n+      gfc_error (\"UNIT number in statement at %L must be non-negative\", &e->where);\n+    }\n+\n   if (dt->extra_comma\n       && gfc_notify_std (GFC_STD_GNU, \"Extension: Comma before i/o \"\n \t\t\t \"item list at %L\", &dt->extra_comma->where) == FAILURE)"}, {"sha": "7de7a5101dcb86381c13ce209c48f0e75d2f2545", "filename": "gcc/fortran/ioparm.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b/gcc%2Ffortran%2Fioparm.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b/gcc%2Ffortran%2Fioparm.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fioparm.def?ref=9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b", "patch": "@@ -49,6 +49,7 @@ IOPARM (open,    encoding,\t1 << 19, char1)\n IOPARM (open,    round,\t\t1 << 20, char2)\n IOPARM (open,    sign,\t\t1 << 21, char1)\n IOPARM (open,    asynchronous,\t1 << 22, char2)\n+IOPARM (open,    newunit,\t1 << 23, pint4)\n IOPARM (close,   common,\t0,\t common)\n IOPARM (close,   status,\t1 << 7,  char1)\n IOPARM (filepos, common,\t0,\t common)"}, {"sha": "bdd70f587402cc8acb0098e71f39977d7b0db7bb", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b", "patch": "@@ -469,26 +469,27 @@ set_parameter_value (stmtblock_t *block, tree var, enum iofield type,\n   gfc_conv_expr_val (&se, e);\n \n   /* If we're storing a UNIT number, we need to check it first.  */\n-  if (type == IOPARM_common_unit && e->ts.kind != 4)\n+  if (type == IOPARM_common_unit && e->ts.kind > 4)\n     {\n-      tree cond, max;\n+      tree cond, val;\n       int i;\n \n       /* Don't evaluate the UNIT number multiple times.  */\n       se.expr = gfc_evaluate_now (se.expr, &se.pre);\n \n-      /* UNIT numbers should be nonnegative.  */\n+      /* UNIT numbers should be greater than the min.  */\n+      i = gfc_validate_kind (BT_INTEGER, 4, false);\n+      val = gfc_conv_mpz_to_tree (gfc_integer_kinds[i].pedantic_min_int, 4);\n       cond = fold_build2 (LT_EXPR, boolean_type_node, se.expr,\n-\t\t\t  build_int_cst (TREE_TYPE (se.expr),0));\n+\t\t\t  fold_convert (TREE_TYPE (se.expr), val));\n       gfc_trans_io_runtime_check (cond, var, LIBERROR_BAD_UNIT,\n-\t\t\t       \"Negative unit number in I/O statement\",\n+\t\t\t       \"Unit number in I/O statement too small\",\n \t\t\t       &se.pre);\n     \n       /* UNIT numbers should be less than the max.  */\n-      i = gfc_validate_kind (BT_INTEGER, 4, false);\n-      max = gfc_conv_mpz_to_tree (gfc_integer_kinds[i].huge, 4);\n+      val = gfc_conv_mpz_to_tree (gfc_integer_kinds[i].huge, 4);\n       cond = fold_build2 (GT_EXPR, boolean_type_node, se.expr,\n-\t\t\t  fold_convert (TREE_TYPE (se.expr), max));\n+\t\t\t  fold_convert (TREE_TYPE (se.expr), val));\n       gfc_trans_io_runtime_check (cond, var, LIBERROR_BAD_UNIT,\n \t\t\t       \"Unit number in I/O statement too large\",\n \t\t\t       &se.pre);\n@@ -950,6 +951,10 @@ gfc_trans_open (gfc_code * code)\n   if (p->convert)\n     mask |= set_string (&block, &post_block, var, IOPARM_open_convert,\n \t\t\tp->convert);\n+\t\t\t\n+  if (p->newunit)\n+    mask |= set_parameter_ref (&block, &post_block, var, IOPARM_open_newunit,\n+\t\t\t       p->newunit);\n \n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n "}]}