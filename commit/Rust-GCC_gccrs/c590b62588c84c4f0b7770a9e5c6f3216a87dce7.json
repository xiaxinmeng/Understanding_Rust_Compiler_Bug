{"sha": "c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU5MGI2MjU4OGM4NGM0ZjBiNzc3MGE5ZTVjNmYzMjE2YTg3ZGNlNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-10-20T22:37:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-20T22:37:14Z"}, "message": "target.h (struct gcc_target): Line wrap.\n\n\t* target.h (struct gcc_target): Line wrap.\n\n\t* config/alpha/alpha.c (alpha_output_mi_thunk_osf): Static.\n\t(TARGET_ASM_OUTPUT_MI_THUNK): Define here...\n\t* config/alpha/alpha.h: ... not here.\n\t* config/alpha/alpha-protos.h: Update.\n\n\t* config/arm/arm.c, config/arm/arm.h, config/arm/arm-protos.h\n\tconfig/cris/cris-protos.h, config/cris/cris.c, config/cris/cris.h,\n\tconfig/frv/frv-protos.h, config/frv/frv.c, config/frv/frv.h,\n\tconfig/i386/i386-protos.h, config/i386/i386.c, config/i386/openbsd.h,\n\tconfig/i386/unix.h, config/i960/i960-protos.h, config/i960/i960.c,\n\tconfig/i960/i960.h, config/ia64/ia64-protos.h, config/ia64/ia64.c,\n\tconfig/ia64/ia64.h, config/m68k/linux.h, config/m68k/m68k-protos.h,\n\tconfig/m68k/m68k.c, config/m68k/netbsd-elf.h, config/m68k/openbsd.h,\n\tconfig/mmix/mmix-protos.h, config/mmix/mmix.c, config/mmix/mmix.h,\n\tconfig/pa/pa-protos.h, config/pa/pa.c, config/pa/pa.h,\n\tconfig/s390/s390-protos.h, config/s390/s390.c, config/s390/s390.h,\n\tconfig/sparc/openbsd.h, config/sparc/sparc-protos.h,\n\tconfig/sparc/sparc.c, config/sparc/sparc.h,\n\tconfig/stormy16/stormy16-protos.h, config/stormy16/stormy16.c,\n\tconfig/stormy16/stormy16.h: Similarly.\n\n\t* config/m68k/m68k.c (m68k_output_mi_thunk): Replicate mnemonic\n\tselection logic from call patterns.\n\nFrom-SVN: r58340", "tree": {"sha": "abe4a377f5765b9d4daf391afe9b62b6a6f5af4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abe4a377f5765b9d4daf391afe9b62b6a6f5af4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/comments", "author": null, "committer": null, "parents": [{"sha": "16f7d029b9501a8dce95d7a4cc00e54f687ddf59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f7d029b9501a8dce95d7a4cc00e54f687ddf59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f7d029b9501a8dce95d7a4cc00e54f687ddf59"}], "stats": {"total": 428, "additions": 175, "deletions": 253}, "files": [{"sha": "33e88b92402ccd92463b39ff6b424ed49ceea410", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -1,3 +1,31 @@\n+2002-10-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* target.h (struct gcc_target): Line wrap.\n+\n+\t* config/alpha/alpha.c (alpha_output_mi_thunk_osf): Static.\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): Define here...\n+\t* config/alpha/alpha.h: ... not here.\n+\t* config/alpha/alpha-protos.h: Update.\n+\n+\t* config/arm/arm.c, config/arm/arm.h, config/arm/arm-protos.h\n+\tconfig/cris/cris-protos.h, config/cris/cris.c, config/cris/cris.h,\n+\tconfig/frv/frv-protos.h, config/frv/frv.c, config/frv/frv.h,\n+\tconfig/i386/i386-protos.h, config/i386/i386.c, config/i386/openbsd.h,\n+\tconfig/i386/unix.h, config/i960/i960-protos.h, config/i960/i960.c,\n+\tconfig/i960/i960.h, config/ia64/ia64-protos.h, config/ia64/ia64.c,\n+\tconfig/ia64/ia64.h, config/m68k/linux.h, config/m68k/m68k-protos.h,\n+\tconfig/m68k/m68k.c, config/m68k/netbsd-elf.h, config/m68k/openbsd.h,\n+\tconfig/mmix/mmix-protos.h, config/mmix/mmix.c, config/mmix/mmix.h,\n+\tconfig/pa/pa-protos.h, config/pa/pa.c, config/pa/pa.h, \n+\tconfig/s390/s390-protos.h, config/s390/s390.c, config/s390/s390.h,\n+\tconfig/sparc/openbsd.h, config/sparc/sparc-protos.h,\n+\tconfig/sparc/sparc.c, config/sparc/sparc.h,\n+\tconfig/stormy16/stormy16-protos.h, config/stormy16/stormy16.c,\n+\tconfig/stormy16/stormy16.h: Similarly.\n+\n+\t* config/m68k/m68k.c (m68k_output_mi_thunk): Replicate mnemonic\n+\tselection logic from call patterns.\n+\n 2002-10-20  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/m68k/m68k.c (m68k_output_mi_thunk): Fix typo."}, {"sha": "71079eff7e8045b6588244b54354bcb99c61fcdc", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -141,7 +141,6 @@ extern rtx function_arg PARAMS ((CUMULATIVE_ARGS, enum machine_mode,\n \t\t\t\t tree, int));\n extern void alpha_start_function PARAMS ((FILE *, const char *, tree));\n extern void alpha_end_function PARAMS ((FILE *, const char *, tree));\n-extern void alpha_output_mi_thunk_osf PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \n #ifdef REAL_VALUE_TYPE\n extern int check_float_value PARAMS ((enum machine_mode,"}, {"sha": "8f900af4e5b8a5e72fe6455fba705690af81d1bd", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -195,6 +195,11 @@ static void alpha_write_linkage\n   PARAMS ((FILE *, const char *, tree));\n #endif\n \n+#if TARGET_ABI_OSF\n+static void alpha_output_mi_thunk_osf\n+  PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+#endif\n+\n static struct machine_function * alpha_init_machine_status\n   PARAMS ((void));\n \n@@ -292,6 +297,11 @@ static void unicosmk_unique_section PARAMS ((tree, int));\n #undef  TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN alpha_expand_builtin\n \n+#if TARGET_ABI_OSF\n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK alpha_output_mi_thunk_osf\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Parse target option strings.  */\n@@ -7839,7 +7849,8 @@ alpha_end_function (file, fnname, decl)\n     }\n }\n \n-/* Emit a tail call to FUNCTION after adjusting THIS by DELTA. \n+#if TARGET_ABI_OSF\n+/* Emit a tail call to FUNCTION after adjusting THIS by DELTA.\n \n    In order to avoid the hordes of differences between generated code\n    with and without TARGET_EXPLICIT_RELOCS, and to avoid duplicating\n@@ -7848,7 +7859,7 @@ alpha_end_function (file, fnname, decl)\n \n    Not sure why this idea hasn't been explored before...  */\n \n-void\n+static void\n alpha_output_mi_thunk_osf (file, thunk_fndecl, delta, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;\n@@ -7908,6 +7919,7 @@ alpha_output_mi_thunk_osf (file, thunk_fndecl, delta, function)\n   final (insn, file, 1, 0);\n   final_end_function ();\n }\n+#endif /* TARGET_ABI_OSF */\n \f\n /* Debugging support.  */\n "}, {"sha": "39973770d7114d5067983526c3b64a46adfd053a", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -2138,7 +2138,3 @@ do {\t\t\t\t\t\t\t\\\n \n /* Generate calls to memcpy, etc., not bcopy, etc.  */\n #define TARGET_MEM_FUNCTIONS 1\n-\n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-#define TARGET_ASM_OUTPUT_MI_THUNK alpha_output_mi_thunk_osf"}, {"sha": "2055d1467613877ff577f0262048f8f5d6e2db72", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -194,7 +194,6 @@ extern int  arm_dllexport_p \t\tPARAMS ((tree));\n extern int  arm_dllimport_p \t\tPARAMS ((tree));\n extern void arm_mark_dllexport \t\tPARAMS ((tree));\n extern void arm_mark_dllimport \t\tPARAMS ((tree));\n-extern void arm_output_mi_thunk         PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif\n \n extern void arm_init_builtins\t\tPARAMS ((void));"}, {"sha": "70e0291403abdccd5390886d799ad56468257378", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -126,6 +126,8 @@ static void\t arm_encode_section_info\tPARAMS ((tree, int));\n #ifdef AOF_ASSEMBLER\n static void\t aof_globalize_label\t\tPARAMS ((FILE *, const char *));\n #endif\n+static void arm_output_mi_thunk\t\t\tPARAMS ((FILE *, tree,\n+\t\t\t\t\t\t\t HOST_WIDE_INT, tree));\n \n #undef Hint\n #undef Mmode\n@@ -188,6 +190,9 @@ static void\t aof_globalize_label\t\tPARAMS ((FILE *, const char *));\n #undef TARGET_STRIP_NAME_ENCODING\n #define TARGET_STRIP_NAME_ENCODING arm_strip_name_encoding\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK arm_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -11131,7 +11136,10 @@ arm_encode_section_info (decl, first)\n }\n #endif /* !ARM_PE */\n \n-void\n+/* Output code to add DELTA to the first argument, and then jump\n+   to FUNCTION.  Used for C++ multiple inheritance.  */\n+\n+static void\n arm_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;"}, {"sha": "2f5ba3b7262147f176a2c0908368ae51468d521d", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -2695,10 +2695,6 @@ extern int making_const_table;\n   else\t\t\t\t\t\t\\\n     THUMB_PRINT_OPERAND_ADDRESS (STREAM, X)\n      \n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-#define TARGET_ASM_OUTPUT_MI_THUNK arm_output_mi_thunk\n-\n /* A C expression whose value is RTL representing the value of the return\n    address for the frame COUNT steps up from the current frame.  */\n "}, {"sha": "7da668eeefa395720a545915e82db3e2fcde4a9f", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -52,12 +52,6 @@ extern rtx cris_expand_builtin_va_arg PARAMS ((tree, tree));\n # endif\n #endif /* RTX_CODE */\n \n-#ifdef STDIO_INCLUDED\n-# ifdef TREE_CODE\n-extern void cris_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n-# endif\n-#endif\n-\n #ifdef GCC_C_PRAGMA_H\n extern void cris_pragma_expand_mul PARAMS ((cpp_reader *));\n #endif"}, {"sha": "3d33a724594ee835a799a259874e046bbd2699a7", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -101,6 +101,10 @@ static void cris_target_asm_function_epilogue\n static void cris_encode_section_info PARAMS ((tree, int));\n static void cris_operand_lossage PARAMS ((const char *, rtx));\n \n+static void cris_asm_output_mi_thunk\n+  PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+\n+\n /* The function cris_target_asm_function_epilogue puts the last insn to\n    output here.  It always fits; there won't be a symbol operand.  Used in\n    delay_slots_for_epilogue and function_epilogue.  */\n@@ -153,6 +157,9 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO cris_encode_section_info\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK cris_asm_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Predicate functions.  */\n@@ -2572,7 +2579,7 @@ cris_override_options ()\n \n /* The TARGET_ASM_OUTPUT_MI_THUNK worker.  */\n \n-void\n+static void\n cris_asm_output_mi_thunk (stream, thunkdecl, delta, funcdecl)\n      FILE *stream;\n      tree thunkdecl ATTRIBUTE_UNUSED;"}, {"sha": "4aa88466c809690050c71659216d344d395d6194", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -1013,9 +1013,6 @@ struct cum_args {int regs;};\n #define ELIGIBLE_FOR_EPILOGUE_DELAY(INSN, N) \\\n   cris_eligible_for_epilogue_delay (INSN)\n \n-#define TARGET_ASM_OUTPUT_MI_THUNK cris_asm_output_mi_thunk\n-\n-\n /* Node: Profiling */\n \n #define FUNCTION_PROFILER(FILE, LABELNO)  \\"}, {"sha": "3c9bff6d31044198ae6bf3789208c5c9010ebbbf", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -1879,37 +1879,6 @@ typedef struct d30v_stack {\n    `DELAY_SLOTS_FOR_EPILOGUE'.  */\n /* #define ELIGIBLE_FOR_EPILOGUE_DELAY(INSN, N) */\n \n-/* A C compound statement that outputs the assembler code for a thunk function,\n-   used to implement C++ virtual function calls with multiple inheritance.  The\n-   thunk acts as a wrapper around a virtual function, adjusting the implicit\n-   object parameter before handing control off to the real function.\n-\n-   First, emit code to add the integer DELTA to the location that contains the\n-   incoming first argument.  Assume that this argument contains a pointer, and\n-   is the one used to pass the `this' pointer in C++.  This is the incoming\n-   argument *before* the function prologue, e.g. `%o0' on a sparc.  The\n-   addition must preserve the values of all other incoming arguments.\n-\n-   After the addition, emit code to jump to FUNCTION, which is a\n-   `FUNCTION_DECL'.  This is a direct pure jump, not a call, and does not touch\n-   the return address.  Hence returning from FUNCTION will return to whoever\n-   called the current `thunk'.\n-\n-   The effect must be as if FUNCTION had been called directly with the\n-   adjusted first argument.  This macro is responsible for emitting\n-   all of the code for a thunk function; output_function_prologue()\n-   and output_function_epilogue() are not invoked.\n-\n-   The THUNK_FNDECL is redundant.  (DELTA and FUNCTION have already been\n-   extracted from it.)  It might possibly be useful on some targets, but\n-   probably not.\n-\n-   If you do not define this macro, the target-independent code in the C++\n-   frontend will generate a less efficient heavyweight thunk that calls\n-   FUNCTION instead of jumping to it.  The generic approach does not support\n-   varargs.  */\n-/* #define TARGET_ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) */\n-\n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */\n typedef struct machine_function GTY(())"}, {"sha": "4f5a422cbae3eeff09c749cf15bcb70dbecb36d0", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -113,11 +113,6 @@ extern rtx frv_return_addr_rtx\t\t\tPARAMS ((int, rtx));\n extern rtx frv_index_memory\t\t\tPARAMS ((rtx,\n \t\t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t\t int));\n-\n-#ifdef TREE_CODE\n-extern void frv_asm_output_mi_thunk\t\tPARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n-#endif\t/* TREE_CODE */\n-\n extern const char *frv_asm_output_opcode\n \t\t\t\t \tPARAMS ((FILE *, const char *));\n extern void frv_final_prescan_insn\tPARAMS ((rtx, rtx *, int));"}, {"sha": "7ef2e1adbfba744185478c6c66bc7d0c7a5f22a5", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -279,6 +279,7 @@ static void frv_encode_section_info\t\tPARAMS ((tree, int));\n static void frv_init_builtins\t\t\tPARAMS ((void));\n static rtx frv_expand_builtin\t\t\tPARAMS ((tree, rtx, rtx, enum machine_mode, int));\n static bool frv_in_small_data_p\t\t\tPARAMS ((tree));\n+static void frv_asm_output_mi_thunk\t\tPARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n@@ -298,6 +299,9 @@ static bool frv_in_small_data_p\t\t\tPARAMS ((tree));\n #undef TARGET_IN_SMALL_DATA_P\n #define TARGET_IN_SMALL_DATA_P frv_in_small_data_p\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK frv_asm_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Given a SYMBOL_REF, return true if it points to small data.  */\n@@ -1866,7 +1870,7 @@ frv_expand_epilogue (sibcall_p)\n    FUNCTION instead of jumping to it.  The generic approach does not support\n    varargs.  */\n \n-void\n+static void\n frv_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;"}, {"sha": "954e86f5b4d6e0d784b8636de1f69560197d7cbb", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -2068,38 +2068,6 @@ struct machine_function GTY(())\n    adjustment in a function that has no frame pointer, and the compiler knows\n    this regardless of `EXIT_IGNORE_STACK'.  */\n #define EXIT_IGNORE_STACK 1\n-\n-/* A C compound statement that outputs the assembler code for a thunk function,\n-   used to implement C++ virtual function calls with multiple inheritance.  The\n-   thunk acts as a wrapper around a virtual function, adjusting the implicit\n-   object parameter before handing control off to the real function.\n-\n-   First, emit code to add the integer DELTA to the location that contains the\n-   incoming first argument.  Assume that this argument contains a pointer, and\n-   is the one used to pass the `this' pointer in C++.  This is the incoming\n-   argument *before* the function prologue, e.g. `%o0' on a sparc.  The\n-   addition must preserve the values of all other incoming arguments.\n-\n-   After the addition, emit code to jump to FUNCTION, which is a\n-   `FUNCTION_DECL'.  This is a direct pure jump, not a call, and does not touch\n-   the return address.  Hence returning from FUNCTION will return to whoever\n-   called the current `thunk'.\n-\n-   The effect must be as if FUNCTION had been called directly with the adjusted\n-   first argument.  This macro is responsible for emitting all of the code for\n-   a thunk function; `FUNCTION_PROLOGUE' and `FUNCTION_EPILOGUE' are not\n-   invoked.\n-\n-   The THUNK_FNDECL is redundant.  (DELTA and FUNCTION have already been\n-   extracted from it.)  It might possibly be useful on some targets, but\n-   probably not.\n-\n-   If you do not define this macro, the target-independent code in the C++\n-   frontend will generate a less efficient heavyweight thunk that calls\n-   FUNCTION instead of jumping to it.  The generic approach does not support\n-   varargs.  */\n-#define TARGET_ASM_OUTPUT_MI_THUNK frv_asm_output_mi_thunk\n-\n \f\n /* Generating Code for Profiling.  */\n "}, {"sha": "df45f6a153cafe4a11ba1913d331fc5f1dabae30", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -211,8 +211,6 @@ extern tree ix86_handle_shared_attribute PARAMS ((tree *, tree, tree, int, bool\n extern unsigned int i386_pe_section_type_flags PARAMS ((tree, const char *,\n \t\t\t\t\t\t\tint));\n extern void i386_pe_asm_named_section PARAMS ((const char *, unsigned int));\n-extern void x86_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n-extern void x86_output_mi_vcall_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n extern int x86_field_alignment PARAMS ((tree, int));\n #endif\n "}, {"sha": "50ade5b626586d3e87d0878b25acfb8dd37bae44", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -751,6 +751,9 @@ static int ia32_use_dfa_pipeline_interface PARAMS ((void));\n static int ia32_multipass_dfa_lookahead PARAMS ((void));\n static void ix86_init_mmx_sse_builtins PARAMS ((void));\n static rtx ia32_this_parameter PARAMS ((tree));\n+static void x86_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+static void x86_output_mi_vcall_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t       HOST_WIDE_INT, tree));\n \n struct ix86_address\n {\n@@ -897,6 +900,11 @@ static enum x86_64_reg_class merge_classes PARAMS ((enum x86_64_reg_class,\n #define TARGET_HAVE_TLS true\n #endif\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK x86_output_mi_thunk\n+#undef TARGET_ASM_OUTPUT_MI_VCALL_THUNK\n+#define TARGET_ASM_OUTPUT_MI_VCALL_THUNK x86_output_mi_vcall_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n@@ -13933,7 +13941,7 @@ ia32_this_parameter (function)\n }\n \n \n-void\n+static void\n x86_output_mi_vcall_thunk (file, thunk, delta, vcall_index, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n@@ -14037,7 +14045,7 @@ x86_output_mi_vcall_thunk (file, thunk, delta, vcall_index, function)\n     }\n }\n \n-void\n+static void\n x86_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk;"}, {"sha": "60f16575e21d415ffe7d329cf74978c401ae020d", "filename": "gcc/config/i386/openbsd.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsd.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -96,9 +96,6 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_PREFERRED_EH_DATA_FORMAT\n \n-\n-/* Note that we pick up TARGET_ASM_OUTPUT_MI_THUNK from unix.h.  */\n-\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \";#\"\n "}, {"sha": "e69f26d7490c906b6fc44be41920af9b0721324a", "filename": "gcc/config/i386/unix.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi386%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi386%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Funix.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -65,8 +65,3 @@ Boston, MA 02111-1307, USA.  */\n    and returns float values in the 387.  */\n \n #define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n-\n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-#define TARGET_ASM_OUTPUT_MI_THUNK x86_output_mi_thunk\n-#define TARGET_ASM_OUTPUT_MI_VCALL_THUNK x86_output_mi_vcall_thunk"}, {"sha": "7e2685d9f09e5d858e8969cee9e4d2d752e389a6", "filename": "gcc/config/i960/i960-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -86,7 +86,6 @@ extern void i960_setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *, enum machine\n extern tree i960_build_va_list PARAMS ((void));\n extern int i960_final_reg_parm_stack_space PARAMS ((int, tree));\n extern int i960_reg_parm_stack_space PARAMS ((tree));\n-extern void i960_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif /* TREE_CODE */\n \n extern int process_pragma PARAMS ((int(*)(void), void(*)(int), const char *));"}, {"sha": "b15e27d9327d1fac0ee79a0effb60751172dee2e", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -46,6 +46,7 @@ Boston, MA 02111-1307, USA.  */\n \n static void i960_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void i960_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void i960_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -98,6 +99,9 @@ static int ret_label = 0;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE i960_output_function_epilogue\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK i960_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Override conflicting target switch options.\n@@ -2825,7 +2829,7 @@ i960_scan_opcode (p)\n     }\n }\n \n-void\n+static void\n i960_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;"}, {"sha": "9af2964fbbba59dc44bd04b781bb8a5fc3099e12", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -1463,7 +1463,3 @@ extern enum insn_types i960_last_insn_type;\n /* Defined in reload.c, and used in insn-recog.c.  */\n \n extern int rtx_equal_function_value_matters;\n-\n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-#define TARGET_ASM_OUTPUT_MI_THUNK i960_output_mi_thunk"}, {"sha": "36af17aa70ac04a1f9eeff4b473ddf040600fe8f", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -121,7 +121,6 @@ extern int ia64_function_arg_pass_by_reference PARAMS((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t       tree, int));\n extern int ia64_return_in_memory PARAMS((tree));\n extern void ia64_asm_output_external PARAMS((FILE *, tree, const char *));\n-extern void ia64_output_mi_thunk PARAMS((FILE *, tree, HOST_WIDE_INT, tree));\n #endif /* TREE_CODE */\n \n extern int ia64_register_move_cost PARAMS((enum machine_mode, enum reg_class,"}, {"sha": "17c3fc61ac86a289a36ced2b5ba61c3e8ae85978", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -161,6 +161,8 @@ static int ia64_sched_reorder PARAMS ((FILE *, int, rtx *, int *, int));\n static int ia64_sched_reorder2 PARAMS ((FILE *, int, rtx *, int *, int));\n static int ia64_variable_issue PARAMS ((FILE *, int, rtx, int));\n \n+static void ia64_output_mi_thunk PARAMS((FILE *, tree, HOST_WIDE_INT, tree));\n+\n static void ia64_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n static void ia64_aix_select_section PARAMS ((tree, int,\n@@ -244,6 +246,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #define TARGET_HAVE_TLS true\n #endif\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK ia64_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return 1 if OP is a valid operand for the MEM of a CALL insn.  */\n@@ -8159,7 +8164,7 @@ ia64_aix_select_rtx_section (mode, x, align)\n   flag_pic = save_pic;\n }\n \n-void\n+static void\n ia64_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;"}, {"sha": "ed1bbac1fa6ddbaabd4944b63bcb0e923171aaa1", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -1428,11 +1428,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_FILE_START(FILE) \\\n   emit_safe_across_calls (FILE)\n \n-/* A C compound statement that outputs the assembler code for a thunk function,\n-   used to implement C++ virtual function calls with multiple inheritance.  */\n-\n-#define TARGET_ASM_OUTPUT_MI_THUNK ia64_output_mi_thunk\n-\n /* Output part N of a function descriptor for DECL.  For ia64, both\n    words are emitted with a single relocation, so ignore N > 0.  */\n #define ASM_OUTPUT_FDESC(FILE, DECL, PART)\t\t\t\t\\"}, {"sha": "bf80cea9f9c984ef86ae0d59a94700654cacbb48", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -354,7 +354,3 @@ do {\t\t\t\t\t\t\t\t\t\\\n      : \"d\" (_beg), \"d\" (_len)\t\t\t\t\t\t\\\n      : \"%d0\", \"%d2\", \"%d3\");\t\t\t\t\t\t\\\n }\n-\f\n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-#define TARGET_ASM_OUTPUT_MI_THUNK m68k_output_mi_thunk"}, {"sha": "72120ead37f03e6eae3f8fb347132af6b610b358", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -64,10 +64,6 @@ extern int pcrel_address PARAMS ((rtx, enum machine_mode));\n extern rtx legitimize_pic_address PARAMS ((rtx, enum machine_mode, rtx));\n #endif /* RTX_CODE */\n \n-#ifdef TREE_CODE\n-extern void m68k_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n-#endif /* TREE_CODE */\n-\n extern int flags_in_68881 PARAMS ((void));\n extern int use_return_insn PARAMS ((void));\n extern void override_options PARAMS ((void));"}, {"sha": "9543e98f056576dc2dd7fbecfdb217bdf472750d", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 57, "deletions": 20, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -65,6 +65,7 @@ static void m68k_coff_asm_named_section PARAMS ((const char *, unsigned int));\n #ifdef CTOR_LIST_BEGIN\n static void m68k_svr3_asm_out_constructor PARAMS ((rtx, int));\n #endif\n+static void m68k_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \f\n \n /* Alignment to use for loops and jumps */\n@@ -122,6 +123,9 @@ int m68k_last_compare_had_fp_operands;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE m68k_output_function_epilogue\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK m68k_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n@@ -3836,34 +3840,67 @@ m68k_svr3_asm_out_constructor (symbol, priority)\n }\n #endif\n \n-void\n+static void\n m68k_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n      tree function;\n {\n-  if (delta > 0 && delta <= 8)\t\t\t\t\t\t\n+  rtx xops[1];\n+  const char *fmt;\n+\n+  if (delta > 0 && delta <= 8)\n     asm_fprintf (file, \"\\taddq.l %I%d,4(%Rsp)\\n\", (int) delta);\n-  else if (delta < 0 && delta >= -8)\t\t\t\t\t\n+  else if (delta < 0 && delta >= -8)\n     asm_fprintf (file, \"\\tsubq.l %I%d,4(%Rsp)\\n\", (int) -delta);\n-  else\t\t\t\t\t\t\t\t\t\n+  else\n     {\n       asm_fprintf (file, \"\\tadd.l %I\");\n-      fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\t\t\n-      asm_fprintf (file, \",4(%Rsp)\\n\", delta);\t\t\n-    }\n-\t\t\t\t\t\t\t\t\t\n-  if (flag_pic)\t\t\t\t\t\t\t\t\n-    {\t\t\t\t\t\t\t\t\t\n-      fprintf (file, \"\\tbra.l \");\t\t\t\t\t\n-      assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\t\n-      fprintf (file, \"@PLTPC\\n\");\t\t\t\t\t\n-    }\t\t\t\t\t\t\t\t\t\n-  else\t\t\t\t\t\t\t\t\t\n-    {\t\t\t\t\t\t\t\t\t\n-      fprintf (file, \"\\tjmp \");\t\t\t\t\t\t\n-      assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\t\n-      fprintf (file, \"\\n\");\t\t\t\t\t\t\n-    }\t\t\t\t\t\t\t\t\t\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n+      asm_fprintf (file, \",4(%Rsp)\\n\");\n+    }\n+\n+  xops[0] = DECL_RTL (function);\n+\n+  /* Logic taken from call patterns in m68k.md.  */\n+  if (flag_pic)\n+    {\n+      if (TARGET_PCREL)\n+\tfmt = \"bra.l %o0\";\n+      else\n+\t{\n+#ifdef MOTOROLA\n+#ifdef HPUX_ASM\n+\t  fmt = \"bra.l %0\";\n+#else\n+#ifdef USE_GAS\n+\t  fmt = \"bra.l %0@PLTPC\";\n+#else\n+\t  fmt = \"bra %0@PLTPC\";\n+#endif\n+#endif\n+#else\n+#ifdef USE_GAS\n+\t  fmt = \"bra.l %0\";\n+#else\n+\t  fmt = \"jbra %0,a1\";\n+#endif\n+#endif\n+\t}\n+    }\n+  else\n+    {\n+#if defined (MOTOROLA) && !defined (USE_GAS)\n+#ifdef MOTOROLA_BSR\n+      fmt = \"bra %0\";\n+#else\n+      fmt = \"jmp %0\";\n+#endif\n+#else\n+      fmt = \"jbra %0\";\n+#endif\n+    }\n+\n+  output_asm_insn (fmt, xops);\n }"}, {"sha": "f9576da2905151b5363d230280906a04752b0353", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -421,12 +421,6 @@ while (0)\n #undef DEFAULT_PCC_STRUCT_RETURN\n #define DEFAULT_PCC_STRUCT_RETURN 1\n \n-\n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-\n-#define TARGET_ASM_OUTPUT_MI_THUNK m68k_output_mi_thunk\n-\n /* Output assembler code for a block containing the constant parts\n    of a trampoline, leaving space for the variable parts.  */\n "}, {"sha": "0a5038c4dc79661866874b0a11069e181911a6d1", "filename": "gcc/config/m68k/openbsd.h", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fm68k%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fm68k%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fopenbsd.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -84,38 +84,3 @@ Boston, MA 02111-1307, USA.  */\n    dwarf unwind information. egcs doesn't try too hard to check internal\n    configuration files...  */\n #define DWARF2_UNWIND_INFO 0\n-\n-\n-/* TODO: TARGET_ASM_OUTPUT_MI_THUNK is busted. I need to figure out \n-   what bra func@PLTPC means under linux, and find the corresponding \n-   construction for our gas/pic setup.  */\n-#if 0\n-/* Taken from linux.h. Processor dependent optimized code to handle C++\n-   multiple inheritance vtable lookup.  */\n-\n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-#define TARGET_ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (DELTA > 0 && DELTA <= 8)\t\t\t\t\t\t\\\n-    asm_fprintf (FILE, \"\\taddq.l %I%d,4(%Rsp)\\n\", DELTA);\t\t\\\n-  else if (DELTA < 0 && DELTA >= -8)\t\t\t\t\t\\\n-    asm_fprintf (FILE, \"\\tsubq.l %I%d,4(%Rsp)\\n\", -DELTA);\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    asm_fprintf (FILE, \"\\tadd.l %I%d,4(%Rsp)\\n\", DELTA);\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tbra.l \");\t\t\t\t\t\\\n-      assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n-      fprintf (FILE, \"@PLTPC\\n\");\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tjmp \");\t\t\t\t\t\t\\\n-      assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n-      fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n-#endif\n-"}, {"sha": "a6a4e3cddd8c6eff00aa48d0889e831bcfad02c0", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -80,7 +80,6 @@ extern void mmix_asm_output_aligned_local\n   PARAMS ((FILE *, const char *, int, int));\n extern void mmix_asm_declare_register_global\n   PARAMS ((FILE *, tree, int, const char *));\n-extern void mmix_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \n /* Need tree.h and rtl.h */\n # ifdef RTX_CODE"}, {"sha": "141ad2e56c30824a407905f1399c013192f0802b", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -130,6 +130,8 @@ static void mmix_target_asm_function_prologue\n static void mmix_target_asm_function_end_prologue PARAMS ((FILE *));\n static void mmix_target_asm_function_epilogue\n   PARAMS ((FILE *, HOST_WIDE_INT));\n+static void mmix_asm_output_mi_thunk\n+  PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \n \n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n@@ -162,6 +164,9 @@ static void mmix_target_asm_function_epilogue\n #undef TARGET_STRIP_NAME_ENCODING\n #define TARGET_STRIP_NAME_ENCODING  mmix_strip_name_encoding\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK mmix_asm_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Functions that are expansions for target macros.\n@@ -772,7 +777,7 @@ mmix_target_asm_function_epilogue (stream, locals_size)\n \n /* TARGET_ASM_OUTPUT_MI_THUNK.  */\n \n-void\n+static void\n mmix_asm_output_mi_thunk (stream, fndecl, delta, func)\n      FILE * stream;\n      tree fndecl ATTRIBUTE_UNUSED;"}, {"sha": "05c053113e5294bf815c486909f4d792393406e4", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -795,9 +795,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n #define EPILOGUE_USES(REGNO) \\\n  ((REGNO) == MMIX_INCOMING_RETURN_ADDRESS_REGNUM)\n \n-#define TARGET_ASM_OUTPUT_MI_THUNK mmix_asm_output_mi_thunk\n-\n-\n /* Node: Profiling */\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\\\n  mmix_function_profiler (FILE, LABELNO)"}, {"sha": "ca115fb55fc09ff103267b28469a584a60b0c237", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -126,9 +126,6 @@ extern int eq_neq_comparison_operator PARAMS ((rtx, enum machine_mode));\n extern int insn_refs_are_delayed PARAMS ((rtx));\n #endif /* RTX_CODE */\n \n-/* Prototype function used in macro TARGET_ASM_OUTPUT_MI_THUNK.  */\n-extern void pa_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-\n /* Prototype function used in macro CONST_OK_FOR_LETTER_P.  */\n extern int zdepi_cint_p PARAMS ((unsigned HOST_WIDE_INT));\n \n@@ -163,6 +160,4 @@ extern rtx function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode,\n extern int function_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t       enum machine_mode,\n \t\t\t\t\t       tree, int));\n-\n-extern void pa_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif /* TREE_CODE */"}, {"sha": "48f4a38c5a27e2c73eaa64498e2b29c5f1a98ecf", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -108,6 +108,7 @@ static void store_reg PARAMS ((int, int, int));\n static void store_reg_modify PARAMS ((int, int, int));\n static void load_reg PARAMS ((int, int, int));\n static void set_reg_plus_d PARAMS ((int, int, int, int));\n+static void pa_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void pa_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static int pa_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int pa_adjust_priority PARAMS ((rtx, int));\n@@ -118,6 +119,8 @@ static void pa_encode_section_info PARAMS ((tree, int));\n static const char *pa_strip_name_encoding PARAMS ((const char *));\n static void pa_globalize_label PARAMS ((FILE *, const char *))\n      ATTRIBUTE_UNUSED;\n+static void pa_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -194,6 +197,9 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_STRIP_NAME_ENCODING\n #define TARGET_STRIP_NAME_ENCODING pa_strip_name_encoding\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK pa_asm_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n void\n@@ -3148,7 +3154,7 @@ compute_frame_size (size, fregs_live)\n    to do a \"save\" insn.  The decision about whether or not\n    to do this is made in regclass.c.  */\n \n-void\n+static void\n pa_output_function_prologue (file, size)\n      FILE *file;\n      HOST_WIDE_INT size ATTRIBUTE_UNUSED;\n@@ -6549,7 +6555,7 @@ is_function_label_plus_const (op)\n \n /* Output assembly code for a thunk to FUNCTION.  */\n \n-void\n+static void\n pa_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n      FILE *file;\n      tree thunk_fndecl;"}, {"sha": "924571a10f76ed33c337fe3a83ebc54d2479d8b6", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -897,8 +897,6 @@ extern GTY(()) rtx hppa_compare_op0;\n extern GTY(()) rtx hppa_compare_op1;\n extern enum cmp_type hppa_branch_type;\n \n-#define TARGET_ASM_OUTPUT_MI_THUNK pa_asm_output_mi_thunk\n-\n /* On HPPA, we emit profiling code as rtl via PROFILE_HOOK rather than\n    as assembly via FUNCTION_PROFILER.  Just output a local label.\n    We can't use the function label because the GAS SOM target can't"}, {"sha": "09822bcabc370369f61d1064ba2d96c1e674fff9", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -86,7 +86,6 @@ extern tree s390_build_va_list PARAMS ((void));\n extern rtx s390_function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n extern void s390_va_start PARAMS ((tree, rtx));\n extern rtx s390_va_arg PARAMS ((tree, tree));\n-extern void s390_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif /* RTX_CODE */\n #endif /* TREE_CODE */\n "}, {"sha": "1b046d313878a61c09c3b21a8383c141544ccfb3", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -54,6 +54,7 @@ static int s390_adjust_priority PARAMS ((rtx, int));\n static void s390_select_rtx_section PARAMS ((enum machine_mode, rtx, \n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n static void s390_encode_section_info PARAMS ((tree, int));\n+static void s390_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n@@ -80,6 +81,9 @@ static void s390_encode_section_info PARAMS ((tree, int));\n #undef\tTARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO s390_encode_section_info\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK s390_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n extern int reload_completed;\n@@ -5583,7 +5587,7 @@ s390_encode_section_info (decl, first)\n     }\n }\n \n-void\n+static void\n s390_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;"}, {"sha": "37c6ade1f532fa6011c7bbcd5ad7ef19d1a92db4", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -854,10 +854,6 @@ CUMULATIVE_ARGS;\n \n #define EXIT_IGNORE_STACK       1\n \n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-#define TARGET_ASM_OUTPUT_MI_THUNK s390_output_mi_thunk\n-\n /* Addressing modes, and classification of registers for them.  */\n \n /* #define HAVE_POST_INCREMENT */"}, {"sha": "a4333df79ab527c07b98c6cd3c63a4f614d5a177", "filename": "gcc/config/sparc/openbsd.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fsparc%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fsparc%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fopenbsd.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -63,5 +63,3 @@ Boston, MA 02111-1307, USA.  */\n #define DWARF2_UNWIND_INFO 0\n \n #undef ASM_PREFERRED_EH_DATA_FORMAT\n-\n-/* Default sparc.h does already define TARGET_ASM_OUTPUT_MI_THUNK */"}, {"sha": "0aa6e58f7da983528c1d6198aebab97c60854db6", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -123,6 +123,4 @@ extern int sparc_extra_constraint_check PARAMS ((rtx, int, int));\n extern int sparc_rtx_costs PARAMS ((rtx, enum rtx_code, enum rtx_code));\n #endif /* RTX_CODE */\n \n-extern void sparc_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n-\n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "44fedc7b61c82d791a4f99873b1d8677652eb24b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -176,6 +176,7 @@ static void emit_soft_tfmode_cvt PARAMS ((enum rtx_code, rtx *));\n static void emit_hard_tfmode_operation PARAMS ((enum rtx_code, rtx *));\n \n static void sparc_encode_section_info PARAMS ((tree, int));\n+static void sparc_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \f\n /* Option handling.  */\n \n@@ -239,6 +240,9 @@ enum processor_type sparc_cpu;\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO sparc_encode_section_info\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK sparc_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Validate and override various options, and do some machine dependent\n@@ -8448,7 +8452,7 @@ sparc_encode_section_info (decl, first)\n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n \n-void\n+static void\n sparc_output_mi_thunk (file, thunk_fndecl, delta, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;"}, {"sha": "53cb8756550469eae9a707422494c29a0d492a76", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -2867,10 +2867,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n   fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n \n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-#define TARGET_ASM_OUTPUT_MI_THUNK sparc_output_mi_thunk\n-\n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n   ((CHAR) == '#' || (CHAR) == '*' || (CHAR) == '^' || (CHAR) == '(' || (CHAR) == '_')\n "}, {"sha": "e957de1403c2adf314260ab02e7dfbf718fa2b04", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -45,7 +45,6 @@ extern void    xstormy16_expand_builtin_va_start PARAMS ((tree, rtx));\n extern rtx     xstormy16_expand_builtin_va_arg PARAMS ((tree, tree));\n extern void    xstormy16_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n extern rtx     xstormy16_function_value PARAMS ((tree, tree));\n-extern void    xstormy16_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif\n \n #ifdef RTX_CODE"}, {"sha": "de0cc9037875a55f726e09bfa32684893cac026a", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -50,6 +50,8 @@ static rtx emit_addhi3_postreload PARAMS ((rtx, rtx, rtx));\n static void xstormy16_asm_out_constructor PARAMS ((rtx, int));\n static void xstormy16_asm_out_destructor PARAMS ((rtx, int));\n static void xstormy16_encode_section_info PARAMS ((tree, int));\n+static void xstormy16_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t\t   tree));\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  */\n@@ -1380,7 +1382,7 @@ xstormy16_function_value (valtype, func)\n    extracted from it.)  It might possibly be useful on some targets, but\n    probably not.  */\n \n-void\n+static void\n xstormy16_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;\n@@ -2031,4 +2033,7 @@ xstormy16_handle_interrupt_attribute (node, name, args, flags, no_add_attrs)\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO xstormy16_encode_section_info\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK xstormy16_asm_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "50a784c4fb5e022f925a8ee3542a63030bf17448", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -1593,39 +1593,6 @@ enum reg_class\n    You need not define this macro if you did not define\n    `DELAY_SLOTS_FOR_EPILOGUE'.  */\n /* #define ELIGIBLE_FOR_EPILOGUE_DELAY(INSN, N) */\n-\n-/* A C compound statement that outputs the assembler code for a thunk function,\n-   used to implement C++ virtual function calls with multiple inheritance.  The\n-   thunk acts as a wrapper around a virtual function, adjusting the implicit\n-   object parameter before handing control off to the real function.\n-\n-   First, emit code to add the integer DELTA to the location that contains the\n-   incoming first argument.  Assume that this argument contains a pointer, and\n-   is the one used to pass the `this' pointer in C++.  This is the incoming\n-   argument *before* the function prologue, e.g. `%o0' on a sparc.  The\n-   addition must preserve the values of all other incoming arguments.\n-\n-   After the addition, emit code to jump to FUNCTION, which is a\n-   `FUNCTION_DECL'.  This is a direct pure jump, not a call, and does not touch\n-   the return address.  Hence returning from FUNCTION will return to whoever\n-   called the current `thunk'.\n-\n-   The effect must be as if @var{function} had been called directly\n-   with the adjusted first argument.  This macro is responsible for\n-   emitting all of the code for a thunk function;\n-   TARGET_ASM_FUNCTION_PROLOGUE and TARGET_ASM_FUNCTION_EPILOGUE are\n-   not invoked.\n-\n-   The THUNK_FNDECL is redundant.  (DELTA and FUNCTION have already been\n-   extracted from it.)  It might possibly be useful on some targets, but\n-   probably not.\n-\n-   If you do not define this macro, the target-independent code in the C++\n-   frontend will generate a less efficient heavyweight thunk that calls\n-   FUNCTION instead of jumping to it.  The generic approach does not support\n-   varargs.  */\n-#define TARGET_ASM_OUTPUT_MI_THUNK xstormy16_asm_output_mi_thunk\n-\n \f\n /* Generating Code for Profiling.  */\n "}, {"sha": "eb674c943f1f2af49ca213319524ff9ec9400872", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c590b62588c84c4f0b7770a9e5c6f3216a87dce7/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=c590b62588c84c4f0b7770a9e5c6f3216a87dce7", "patch": "@@ -123,9 +123,9 @@ struct gcc_target\n     /* Output the assembler code for a thunk function.  */\n     void (* output_mi_thunk) PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \n-    /* Output the assembler code for a thunk function with a vcall\n-       offset.  */\n-    void (* output_mi_vcall_thunk) PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n+    /* Output the assembler code for a thunk function with a vcall offset.  */\n+    void (* output_mi_vcall_thunk) PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t    HOST_WIDE_INT, tree));\n   } asm_out;\n \n   /* Functions relating to instruction scheduling.  */"}]}