{"sha": "b846980537e3d2f272c461fac6777c6d991aeb67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg0Njk4MDUzN2UzZDJmMjcyYzQ2MWZhYzY3NzdjNmQ5OTFhZWI2Nw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2014-05-09T11:20:43Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2014-05-09T11:20:43Z"}, "message": "re PR target/61055 ([avr] wrong test instruction after increment with -O1)\n\ngcc/config/avr\n\tPR target/61055\n\t* config/avr/avr.md (cc): Add new attribute set_vzn.\n\t(addqi3, addqq3, adduqq3, subqi3, subqq3, subuqq3, negqi2) [cc]:\n\tSet cc insn attribute to set_vzn instead of set_zn for alternatives\n\twith INC, DEC or NEG.\n\t* config/avr/avr.c (avr_notice_update_cc): Handle SET_VZN.\n\t(avr_out_plus_1): ADIW sets cc0 to CC_SET_CZN.\n\tINC, DEC and ADD+ADC set cc0 to CC_CLOBBER.\n\ngcc/testsuite/\n\tPR target/61055\n\t* gcc.target/avr/torture/pr61055.c: New test.\n\nFrom-SVN: r210267", "tree": {"sha": "23cd01570b81a57b568a9a032d48643a350cc98f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23cd01570b81a57b568a9a032d48643a350cc98f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b846980537e3d2f272c461fac6777c6d991aeb67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b846980537e3d2f272c461fac6777c6d991aeb67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b846980537e3d2f272c461fac6777c6d991aeb67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b846980537e3d2f272c461fac6777c6d991aeb67/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eac3e079667d0a56f2ba84469a764407f3aee2a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac3e079667d0a56f2ba84469a764407f3aee2a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eac3e079667d0a56f2ba84469a764407f3aee2a9"}], "stats": {"total": 123, "additions": 117, "deletions": 6}, "files": [{"sha": "ef75bcb9ff9f05bc64b8e8403723299c92067fc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b846980537e3d2f272c461fac6777c6d991aeb67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b846980537e3d2f272c461fac6777c6d991aeb67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b846980537e3d2f272c461fac6777c6d991aeb67", "patch": "@@ -1,3 +1,14 @@\n+2014-05-09  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/61055\n+\t* config/avr/avr.md (cc): Add new attribute set_vzn.\n+\t(addqi3, addqq3, adduqq3, subqi3, subqq3, subuqq3, negqi2) [cc]:\n+\tSet cc insn attribute to set_vzn instead of set_zn for alternatives\n+\twith INC, DEC or NEG.\n+\t* config/avr/avr.c (avr_notice_update_cc): Handle SET_VZN.\n+\t(avr_out_plus_1): ADIW sets cc0 to CC_SET_CZN.\n+\tINC, DEC and ADD+ADC set cc0 to CC_CLOBBER.\n+\n 2014-05-09  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tRevert:"}, {"sha": "536fe68cb86d294d64c4ed905817c47acba74dd6", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b846980537e3d2f272c461fac6777c6d991aeb67/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b846980537e3d2f272c461fac6777c6d991aeb67/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=b846980537e3d2f272c461fac6777c6d991aeb67", "patch": "@@ -2359,6 +2359,12 @@ avr_notice_update_cc (rtx body ATTRIBUTE_UNUSED, rtx insn)\n         }\n       break;\n \n+    case CC_SET_VZN:\n+      /* Insn like INC, DEC, NEG that set Z,N,V.  We currently don't make use\n+         of this combination, cf. also PR61055.  */\n+      CC_STATUS_INIT;\n+      break;\n+\n     case CC_SET_CZN:\n       /* Insn sets the Z,N,C flags of CC to recog_operand[0].\n          The V flag may or may not be known but that's ok because\n@@ -6290,7 +6296,7 @@ avr_out_plus_1 (rtx *xop, int *plen, enum rtx_code code, int *pcc,\n \n   if (REG_P (xop[2]))\n     {\n-      *pcc = MINUS == code ? (int) CC_SET_CZN : (int) CC_SET_N;\n+      *pcc = MINUS == code ? (int) CC_SET_CZN : (int) CC_CLOBBER;\n \n       for (i = 0; i < n_bytes; i++)\n         {\n@@ -6399,7 +6405,7 @@ avr_out_plus_1 (rtx *xop, int *plen, enum rtx_code code, int *pcc,\n                                op, plen, 1);\n \n                   if (n_bytes == 2 && PLUS == code)\n-                    *pcc = CC_SET_ZN;\n+                    *pcc = CC_SET_CZN;\n                 }\n \n               i++;\n@@ -6422,6 +6428,7 @@ avr_out_plus_1 (rtx *xop, int *plen, enum rtx_code code, int *pcc,\n         {\n           avr_asm_len ((code == PLUS) ^ (val8 == 1) ? \"dec %0\" : \"inc %0\",\n                        op, plen, 1);\n+          *pcc = CC_CLOBBER;\n           break;\n         }\n "}, {"sha": "2c59bf3f93bd3ef34a77ef17eea6177f55f009b8", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b846980537e3d2f272c461fac6777c6d991aeb67/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b846980537e3d2f272c461fac6777c6d991aeb67/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=b846980537e3d2f272c461fac6777c6d991aeb67", "patch": "@@ -90,7 +90,7 @@\n (include \"constraints.md\")\n \n ;; Condition code settings.\n-(define_attr \"cc\" \"none,set_czn,set_zn,set_n,compare,clobber,\n+(define_attr \"cc\" \"none,set_czn,set_zn,set_vzn,set_n,compare,clobber,\n                    plus,ldi\"\n   (const_string \"none\"))\n \n@@ -1098,7 +1098,7 @@\n \tinc %0\\;inc %0\n \tdec %0\\;dec %0\"\n   [(set_attr \"length\" \"1,1,1,1,2,2\")\n-   (set_attr \"cc\" \"set_czn,set_czn,set_zn,set_zn,set_zn,set_zn\")])\n+   (set_attr \"cc\" \"set_czn,set_czn,set_vzn,set_vzn,set_vzn,set_vzn\")])\n \n ;; \"addhi3\"\n ;; \"addhq3\" \"adduhq3\"\n@@ -1369,7 +1369,7 @@\n \tdec %0\\;dec %0\n \tinc %0\\;inc %0\"\n   [(set_attr \"length\" \"1,1,1,1,2,2\")\n-   (set_attr \"cc\" \"set_czn,set_czn,set_zn,set_zn,set_zn,set_zn\")])\n+   (set_attr \"cc\" \"set_czn,set_czn,set_vzn,set_vzn,set_vzn,set_vzn\")])\n \n ;; \"subhi3\"\n ;; \"subhq3\" \"subuhq3\"\n@@ -3992,7 +3992,7 @@\n   \"\"\n   \"neg %0\"\n   [(set_attr \"length\" \"1\")\n-   (set_attr \"cc\" \"set_zn\")])\n+   (set_attr \"cc\" \"set_vzn\")])\n \n (define_insn \"*negqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\"                        \"=r\")"}, {"sha": "891897662e7c53663b1a99d869197046d242f865", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b846980537e3d2f272c461fac6777c6d991aeb67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b846980537e3d2f272c461fac6777c6d991aeb67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b846980537e3d2f272c461fac6777c6d991aeb67", "patch": "@@ -1,3 +1,8 @@\n+2014-05-09  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/61055\n+\t* gcc.target/avr/torture/pr61055.c: New test.\n+\n 2014-05-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/50459"}, {"sha": "9dd1f427d00057793037a31d3bdd64f05ba88064", "filename": "gcc/testsuite/gcc.target/avr/torture/pr61055.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b846980537e3d2f272c461fac6777c6d991aeb67/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr61055.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b846980537e3d2f272c461fac6777c6d991aeb67/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr61055.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr61055.c?ref=b846980537e3d2f272c461fac6777c6d991aeb67", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-do run } */\n+/* { dg-options { -fno-peephole2 } } */\n+\n+#include <stdlib.h>\n+\n+typedef __UINT16_TYPE__ uint16_t;\n+typedef __INT16_TYPE__  int16_t;\n+typedef __UINT8_TYPE__  uint8_t;\n+\n+uint8_t __attribute__((noinline,noclone))\n+fun_inc (uint8_t c0)\n+{\n+  register uint8_t c asm (\"r15\") = c0;\n+\n+  /* Force target value into R15 (lower register)  */\n+  asm (\"\" : \"+l\" (c));\n+\n+  c++;\n+  if (c >= 0x80)\n+    c = 0;\n+  \n+  asm (\"\" : \"+l\" (c));\n+\n+  return c;\n+}\n+\n+uint8_t __attribute__((noinline,noclone))\n+fun_dec (uint8_t c0)\n+{\n+  register uint8_t c asm (\"r15\") = c0;\n+\n+  /* Force target value into R15 (lower register)  */\n+  asm (\"\" : \"+l\" (c));\n+\n+  c--;\n+  if (c < 0x80)\n+    c = 0;\n+  \n+  asm (\"\" : \"+l\" (c));\n+\n+  return c;\n+}\n+\n+\n+uint8_t __attribute__((noinline,noclone))\n+fun_neg (uint8_t c0)\n+{\n+  register uint8_t c asm (\"r15\") = c0;\n+\n+  c = -c;\n+  if (c >= 0x80)\n+    c = 0;\n+\n+  return c;\n+}\n+\n+uint16_t __attribute__((noinline,noclone))\n+fun_adiw (uint16_t c0)\n+{\n+  register uint16_t c asm (\"r24\") = c0;\n+\n+  /* Force target value into R24 (for ADIW) */\n+  asm (\"\" : \"+r\" (c));\n+\n+  c += 2;\n+  if (c >= 0x8000)\n+    c = 0;\n+\n+  asm (\"\" : \"+r\" (c));\n+  \n+  return c;\n+}\n+\n+\n+int main()\n+{\n+  if (fun_inc (0x7f) != 0)\n+    abort();\n+  \n+  if (fun_neg (0x80) != 0)\n+    abort();\n+  \n+  if (fun_adiw (0x7ffe) != 0)\n+    abort();\n+\n+  exit (0);\n+  return 0;\n+}"}]}