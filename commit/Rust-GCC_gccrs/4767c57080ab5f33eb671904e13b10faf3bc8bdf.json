{"sha": "4767c57080ab5f33eb671904e13b10faf3bc8bdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc2N2M1NzA4MGFiNWYzM2ViNjcxOTA0ZTEzYjEwZmFmM2JjOGJkZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-24T20:24:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-24T20:24:00Z"}, "message": "* gcc.c-torture/compile/20040824-1.c: New test.\n\nFrom-SVN: r86513", "tree": {"sha": "053c41789771654d6da9f5340f3288259603d42a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/053c41789771654d6da9f5340f3288259603d42a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4767c57080ab5f33eb671904e13b10faf3bc8bdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4767c57080ab5f33eb671904e13b10faf3bc8bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4767c57080ab5f33eb671904e13b10faf3bc8bdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4767c57080ab5f33eb671904e13b10faf3bc8bdf/comments", "author": null, "committer": null, "parents": [{"sha": "a657c98a58e32c0112e9800a82256472e6ee49eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a657c98a58e32c0112e9800a82256472e6ee49eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a657c98a58e32c0112e9800a82256472e6ee49eb"}], "stats": {"total": 123, "additions": 42, "deletions": 81}, "files": [{"sha": "be76cee5dc8718a8fda06f66010731069e3f7b08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4767c57080ab5f33eb671904e13b10faf3bc8bdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4767c57080ab5f33eb671904e13b10faf3bc8bdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4767c57080ab5f33eb671904e13b10faf3bc8bdf", "patch": "@@ -1,3 +1,7 @@\n+2004-08-24  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c-torture/compile/20040824-1.c: New test.\n+\n 2004-08-24  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md: Include predicates.md."}, {"sha": "177da63bd135ce42e727eb219810001325e579fc", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4767c57080ab5f33eb671904e13b10faf3bc8bdf/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4767c57080ab5f33eb671904e13b10faf3bc8bdf/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=4767c57080ab5f33eb671904e13b10faf3bc8bdf", "patch": "@@ -203,7 +203,7 @@ extern const char *mips_output_conditional_branch (rtx, rtx *, int, int,\n extern const char *mips_output_division (const char *, rtx *);\n extern unsigned int mips_hard_regno_nregs (int, enum machine_mode);\n extern bool mips_linked_madd_p (rtx, rtx);\n-extern const char *mips_emit_prefetch (rtx *);\n+extern rtx mips_prefetch_cookie (rtx, rtx);\n \n extern void irix_asm_output_align (FILE *, unsigned);\n extern const char *current_section_name (void);"}, {"sha": "022d7b443ad52333825a5b970f98d5cb9a38be8a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4767c57080ab5f33eb671904e13b10faf3bc8bdf/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4767c57080ab5f33eb671904e13b10faf3bc8bdf/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4767c57080ab5f33eb671904e13b10faf3bc8bdf", "patch": "@@ -4836,6 +4836,10 @@ print_operand_address (FILE *file, rtx x)\n \treturn;\n \n       case ADDRESS_CONST_INT:\n+\toutput_addr_const (file, x);\n+\tfprintf (file, \"(%s)\", reg_names[0]);\n+\treturn;\n+\n       case ADDRESS_SYMBOLIC:\n \toutput_addr_const (file, x);\n \treturn;\n@@ -9080,26 +9084,22 @@ mips_multipass_dfa_lookahead (void)\n   return 0;\n }\n \f\n+/* Given that we have an rtx of the form (prefetch ... WRITE LOCALITY),\n+   return the first operand of the associated \"pref\" or \"prefx\" insn.  */\n \n-const char *\n-mips_emit_prefetch (rtx *operands)\n-{\n-  int write = INTVAL (operands[1]);\n-  int locality = INTVAL (operands[2]);\n-  int indexed = GET_CODE (operands[3]) == REG;\n-  int code;\n-  char buffer[30];\n-\n-  if (locality <= 0)\n-    code = (write ? 5 : 4);\t/* store_streamed / load_streamed.  */\n-  else if (locality <= 2)\n-    code = (write ? 1 : 0);\t/* store / load.  */\n-  else\n-    code = (write ? 7 : 6);\t/* store_retained / load_retained.  */\n+rtx\n+mips_prefetch_cookie (rtx write, rtx locality)\n+{\n+  /* store_streamed / load_streamed.  */\n+  if (INTVAL (locality) <= 0)\n+    return GEN_INT (INTVAL (write) + 4);\n+\n+  /* store / load.  */\n+  if (INTVAL (locality) <= 2)\n+    return write;\n \n-  sprintf (buffer, \"%s\\t%d,%%3(%%0)\", indexed ? \"prefx\" : \"pref\", code);\n-  output_asm_insn (buffer, operands);\n-  return \"\";\n+  /* store_retained / load_retained.  */\n+  return GEN_INT (INTVAL (write) + 6);\n }\n \n #include \"gt-mips.h\""}, {"sha": "b0179d97022571f1c1caf8742e2544f3d01f072c", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 17, "deletions": 62, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4767c57080ab5f33eb671904e13b10faf3bc8bdf/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4767c57080ab5f33eb671904e13b10faf3bc8bdf/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=4767c57080ab5f33eb671904e13b10faf3bc8bdf", "patch": "@@ -5975,73 +5975,28 @@ beq\\t%2,%.,1b\\;\\\n ;;\n \n \n-(define_expand \"prefetch\"\n-  [(prefetch (match_operand 0 \"address_operand\")\n-\t     (match_operand 1 \"const_int_operand\")\n-\t     (match_operand 2 \"const_int_operand\"))]\n-  \"ISA_HAS_PREFETCH\"\n-{\n-  if (symbolic_operand (operands[0], GET_MODE (operands[0])))\n-    operands[0] = force_reg (GET_MODE (operands[0]), operands[0]);\n-})\n-\n-(define_insn \"prefetch_si_address\"\n-  [(prefetch (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t      (match_operand:SI 3 \"const_int_operand\" \"I\"))\n-\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n-\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))]\n-  \"ISA_HAS_PREFETCH && Pmode == SImode\"\n-  { return mips_emit_prefetch (operands); }\n-  [(set_attr \"type\" \"prefetch\")])\n-\n-(define_insn \"prefetch_indexed_si\"\n-  [(prefetch (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t      (match_operand:SI 3 \"register_operand\" \"r\"))\n-\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n-\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))]\n-  \"ISA_HAS_PREFETCHX && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && Pmode == SImode\"\n-  { return mips_emit_prefetch (operands); }\n-  [(set_attr \"type\" \"prefetchx\")])\n-\n-(define_insn \"prefetch_si\"\n-  [(prefetch (match_operand:SI 0 \"register_operand\" \"r\")\n-\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n-\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))]\n-  \"ISA_HAS_PREFETCH && Pmode == SImode\"\n-{\n-  operands[3] = const0_rtx;\n-  return mips_emit_prefetch (operands);\n+(define_insn \"prefetch\"\n+  [(prefetch (match_operand:QI 0 \"address_operand\" \"p\")\n+\t     (match_operand 1 \"const_int_operand\" \"n\")\n+\t     (match_operand 2 \"const_int_operand\" \"n\"))]\n+  \"ISA_HAS_PREFETCH && TARGET_EXPLICIT_RELOCS\"\n+{\n+  operands[1] = mips_prefetch_cookie (operands[1], operands[2]);\n+  return \"pref\\t%1,%a0\";\n }\n   [(set_attr \"type\" \"prefetch\")])\n \n-(define_insn \"prefetch_di_address\"\n-  [(prefetch (plus:DI (match_operand:DI 0 \"register_operand\" \"r\")\n-\t\t      (match_operand:DI 3 \"const_int_operand\" \"I\"))\n-\t     (match_operand:DI 1 \"const_int_operand\" \"n\")\n-\t     (match_operand:DI 2 \"const_int_operand\" \"n\"))]\n-  \"ISA_HAS_PREFETCH && Pmode == DImode\"\n-  { return mips_emit_prefetch (operands); }\n-  [(set_attr \"type\" \"prefetch\")])\n-\n-(define_insn \"prefetch_indexed_di\"\n-  [(prefetch (plus:DI (match_operand:DI 0 \"register_operand\" \"r\")\n-\t\t      (match_operand:DI 3 \"register_operand\" \"r\"))\n-\t     (match_operand:DI 1 \"const_int_operand\" \"n\")\n-\t     (match_operand:DI 2 \"const_int_operand\" \"n\"))]\n-  \"ISA_HAS_PREFETCHX && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && Pmode == DImode\"\n-  { return mips_emit_prefetch (operands); }\n-  [(set_attr \"type\" \"prefetchx\")])\n-\n-(define_insn \"prefetch_di\"\n-  [(prefetch (match_operand:DI 0 \"register_operand\" \"r\")\n-\t     (match_operand:DI 1 \"const_int_operand\" \"n\")\n-\t     (match_operand:DI 2 \"const_int_operand\" \"n\"))]\n-  \"ISA_HAS_PREFETCH && Pmode == DImode\"\n+(define_insn \"*prefetch_indexed_<mode>\"\n+  [(prefetch (plus:P (match_operand:P 0 \"register_operand\" \"d\")\n+\t\t     (match_operand:P 1 \"register_operand\" \"d\"))\n+\t     (match_operand 2 \"const_int_operand\" \"n\")\n+\t     (match_operand 3 \"const_int_operand\" \"n\"))]\n+  \"ISA_HAS_PREFETCHX && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n {\n-  operands[3] = const0_rtx;\n-  return mips_emit_prefetch (operands);\n+  operands[2] = mips_prefetch_cookie (operands[2], operands[3]);\n+  return \"prefx\\t%2,%1(%0)\";\n }\n-  [(set_attr \"type\" \"prefetch\")])\n+  [(set_attr \"type\" \"prefetchx\")])\n \n (define_insn \"nop\"\n   [(const_int 0)]"}, {"sha": "7d81932f33cedda80504c2c767fa6cd75ce85bbe", "filename": "gcc/testsuite/gcc.c-torture/compile/20040824-1.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4767c57080ab5f33eb671904e13b10faf3bc8bdf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040824-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4767c57080ab5f33eb671904e13b10faf3bc8bdf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040824-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040824-1.c?ref=4767c57080ab5f33eb671904e13b10faf3bc8bdf", "patch": "@@ -0,0 +1,2 @@\n+/* This caused an out-of-range address on the MIPS port.  */\n+void foo (char *x) { __builtin_prefetch (x + 0x8000); }"}]}