{"sha": "a40ff0ae8b8d28d5713792ca108f688f2ca4825a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQwZmYwYWU4YjhkMjhkNTcxMzc5MmNhMTA4ZjY4OGYyY2E0ODI1YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-07-27T19:13:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-27T19:13:42Z"}, "message": "re PR c/45784 (gcc OpenMP - error: invalid controlling predicate)\n\n\tPR c/45784\n\t* c-omp.c (c_finish_omp_for): If the condition is wrapped in\n\trhs of COMPOUND_EXPR(s), skip them and readd their lhs into\n\tnew COMPOUND_EXPRs around the rhs of the comparison.\n\n\t* testsuite/libgomp.c/pr45784.c: New test.\n\t* testsuite/libgomp.c++/pr45784.C: New test.\n\nFrom-SVN: r250635", "tree": {"sha": "8e297a3f30cbc148915200b3e303439c75bae8c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e297a3f30cbc148915200b3e303439c75bae8c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a40ff0ae8b8d28d5713792ca108f688f2ca4825a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40ff0ae8b8d28d5713792ca108f688f2ca4825a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a40ff0ae8b8d28d5713792ca108f688f2ca4825a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40ff0ae8b8d28d5713792ca108f688f2ca4825a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f9e09b55416098b04b3071549cdd53ab95ff8b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9e09b55416098b04b3071549cdd53ab95ff8b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9e09b55416098b04b3071549cdd53ab95ff8b5"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "c05ca124ddc93fabd2fb8209e6a8385bd74a12d9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ff0ae8b8d28d5713792ca108f688f2ca4825a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ff0ae8b8d28d5713792ca108f688f2ca4825a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a40ff0ae8b8d28d5713792ca108f688f2ca4825a", "patch": "@@ -1,3 +1,10 @@\n+2017-07-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/45784\n+\t* c-omp.c (c_finish_omp_for): If the condition is wrapped in\n+\trhs of COMPOUND_EXPR(s), skip them and readd their lhs into\n+\tnew COMPOUND_EXPRs around the rhs of the comparison.\n+\n 2017-07-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/81417"}, {"sha": "977cb0ea15303d22486769541faf070cfcb91002", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ff0ae8b8d28d5713792ca108f688f2ca4825a/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ff0ae8b8d28d5713792ca108f688f2ca4825a/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=a40ff0ae8b8d28d5713792ca108f688f2ca4825a", "patch": "@@ -531,6 +531,12 @@ c_finish_omp_for (location_t locus, enum tree_code code, tree declv,\n \t{\n \t  bool cond_ok = false;\n \n+\t  /* E.g. C sizeof (vla) could add COMPOUND_EXPRs with\n+\t     evaluation of the vla VAR_DECL.  We need to readd\n+\t     them to the non-decl operand.  See PR45784.  */\n+\t  while (TREE_CODE (cond) == COMPOUND_EXPR)\n+\t    cond = TREE_OPERAND (cond, 1);\n+\n \t  if (EXPR_HAS_LOCATION (cond))\n \t    elocus = EXPR_LOCATION (cond);\n \n@@ -605,6 +611,21 @@ c_finish_omp_for (location_t locus, enum tree_code code, tree declv,\n \t\t  else if (code != CILK_SIMD && code != CILK_FOR)\n \t\t    cond_ok = false;\n \t\t}\n+\n+\t      if (cond_ok && TREE_VEC_ELT (condv, i) != cond)\n+\t\t{\n+\t\t  tree ce = NULL_TREE, *pce = &ce;\n+\t\t  tree type = TREE_TYPE (TREE_OPERAND (cond, 1));\n+\t\t  for (tree c = TREE_VEC_ELT (condv, i); c != cond;\n+\t\t       c = TREE_OPERAND (c, 1))\n+\t\t    {\n+\t\t      *pce = build2 (COMPOUND_EXPR, type, TREE_OPERAND (c, 0),\n+\t\t\t\t     TREE_OPERAND (cond, 1));\n+\t\t      pce = &TREE_OPERAND (*pce, 1);\n+\t\t    }\n+\t\t  TREE_OPERAND (cond, 1) = ce;\n+\t\t  TREE_VEC_ELT (condv, i) = cond;\n+\t\t}\n \t    }\n \n \t  if (!cond_ok)"}, {"sha": "0e6258ff87a3af8d98e52ae21c5e24df057d40f1", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ff0ae8b8d28d5713792ca108f688f2ca4825a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ff0ae8b8d28d5713792ca108f688f2ca4825a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a40ff0ae8b8d28d5713792ca108f688f2ca4825a", "patch": "@@ -1,3 +1,9 @@\n+2017-07-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/45784\n+\t* testsuite/libgomp.c/pr45784.c: New test.\n+\t* testsuite/libgomp.c++/pr45784.C: New test.\n+\n 2017-07-19  Tom de Vries  <tom@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c/vec.c: New test."}, {"sha": "306246c754af910615dcc884dc8726ba572dc9fd", "filename": "libgomp/testsuite/libgomp.c++/pr45784.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ff0ae8b8d28d5713792ca108f688f2ca4825a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr45784.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ff0ae8b8d28d5713792ca108f688f2ca4825a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr45784.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr45784.C?ref=a40ff0ae8b8d28d5713792ca108f688f2ca4825a", "patch": "@@ -0,0 +1,5 @@\n+// PR c/45784\n+// { dg-do run }\n+\n+#include \"../libgomp.c/pr45784.c\"\n+"}, {"sha": "78612108bf6334e9668923351372529a9898158a", "filename": "libgomp/testsuite/libgomp.c/pr45784.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ff0ae8b8d28d5713792ca108f688f2ca4825a/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr45784.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ff0ae8b8d28d5713792ca108f688f2ca4825a/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr45784.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr45784.c?ref=a40ff0ae8b8d28d5713792ca108f688f2ca4825a", "patch": "@@ -0,0 +1,41 @@\n+/* PR c/45784 */\n+/* { dg-do run } */\n+\n+void\n+foo (int n)\n+{\n+  char *p, vla[2 * n];\n+  int i;\n+  #pragma omp parallel for\n+  for (p = vla; p < vla + (sizeof (vla) / sizeof (vla[0])); p++)\n+    *p = ' ';\n+  #pragma omp parallel for\n+  for (i = 0; i < 2 * n; i++)\n+    if (vla[i] != ' ')\n+      __builtin_abort ();\n+}\n+\n+void\n+bar (int n)\n+{\n+  char *p, vla1[n], vla2[n * 2], vla3[n * 3], vla4[n * 4];\n+  int i;\n+  __builtin_memset (vla4, ' ', n * 4);\n+  #pragma omp parallel for\n+  for (p = vla4 + sizeof (vla1); p < vla4 + sizeof (vla3) - sizeof (vla2) + sizeof (vla1); p += sizeof (vla4) / sizeof (vla4))\n+    p[0] = '!';\n+  #pragma omp parallel for\n+  for (i = 0; i < n * 4; i++)\n+    if (vla4[i] != ((i >= n && i < 2 * n) ? '!' : ' '))\n+      __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  volatile int n;\n+  n = 128;\n+  foo (n);\n+  bar (n);\n+  return 0;\n+}"}]}