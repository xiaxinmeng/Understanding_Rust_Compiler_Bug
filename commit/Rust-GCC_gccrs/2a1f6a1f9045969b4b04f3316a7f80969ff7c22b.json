{"sha": "2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmExZjZhMWY5MDQ1OTY5YjRiMDRmMzMxNmE3ZjgwOTY5ZmY3YzIyYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-19T16:41:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-19T16:41:25Z"}, "message": "[multiple changes]\n\n2012-03-19  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch6.adb: Minor code clean up.\n\n2012-03-19  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Scan_Make_Arg): Make sure all significant -m switches\n\ton the command line are counted.\n\n2012-03-19  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_elab.adb (Generate_Elab_Warnings): Fix spec, fix attribute\n\treference case\n\n2012-03-19  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch4.adb (Check_Bad_Exp): New procedure\n\n2012-03-19  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb, sem_attr.adb, sem_attr.ads, snames.ads-tmpl: Add\n\tinitial framework for Valid_Scalars attribute.\n\n2012-03-19  Robert Dewar  <dewar@adacore.com>\n\n\t* scng.adb (Scan): Recognize incorrect preprocessor directive\n\n2012-03-19  Robert Dewar  <dewar@adacore.com>\n\n\t* atree.adb (Allocate_Initialize_Node): Use Num_Extension_Nodes\n\t* atree.ads (Num_Extension_Nodes): New variable\n\t* debug.adb: New debug flag -gnatd.N\n\t* gnat1drv.adb (Adjust_Global_Switches): Adjust\n\tNum_Extension_Nodes if -gnatd.N set\n\n2012-03-19  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* einfo.ads: Minor update to First_Rep_Item and Has_Gigi_Rep_Item\n\tdescriptions.\n\n2012-03-19  Robert Dewar  <dewar@adacore.com>\n\n\t* opt.ads: Remove HLO_Active flag.\n\t* sem.adb: Remove call of high level optimizer.\n\t* sem.ads (New_Nodes_OK): Removed.\n\t* sem_ch10.adb: Remove references to New_Nodes_OK.\n\t* switch-c.adb: Remove handling of -gnatH switch.\n\nFrom-SVN: r185528", "tree": {"sha": "9e8370f258615466dcb25746f2f0432ed0898d2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e8370f258615466dcb25746f2f0432ed0898d2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/comments", "author": null, "committer": null, "parents": [{"sha": "119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/119e3be6ca8ad32ed4cb683a5d1f7ae0b7279a8a"}], "stats": {"total": 339, "additions": 261, "deletions": 78}, "files": [{"sha": "5a6aa8c5d1d63f941fb833b435860e1ef970bbde", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -1,3 +1,51 @@\n+2012-03-19  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch6.adb: Minor code clean up.\n+\n+2012-03-19  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Scan_Make_Arg): Make sure all significant -m switches\n+\ton the command line are counted.\n+\n+2012-03-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_elab.adb (Generate_Elab_Warnings): Fix spec, fix attribute\n+\treference case\n+\n+2012-03-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch4.adb (Check_Bad_Exp): New procedure\n+\n+2012-03-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb, sem_attr.adb, sem_attr.ads, snames.ads-tmpl: Add\n+\tinitial framework for Valid_Scalars attribute.\n+\n+2012-03-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* scng.adb (Scan): Recognize incorrect preprocessor directive\n+\n+2012-03-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* atree.adb (Allocate_Initialize_Node): Use Num_Extension_Nodes\n+\t* atree.ads (Num_Extension_Nodes): New variable\n+\t* debug.adb: New debug flag -gnatd.N\n+\t* gnat1drv.adb (Adjust_Global_Switches): Adjust\n+\tNum_Extension_Nodes if -gnatd.N set\n+\n+2012-03-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads: Minor update to First_Rep_Item and Has_Gigi_Rep_Item\n+\tdescriptions.\n+\n+2012-03-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.ads: Remove HLO_Active flag.\n+\t* sem.adb: Remove call of high level optimizer.\n+\t* sem.ads (New_Nodes_OK): Removed.\n+\t* sem_ch10.adb: Remove references to New_Nodes_OK.\n+\t* switch-c.adb: Remove handling of -gnatH switch.\n+\n 2012-03-19  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch6.adb (Check_Subprogram_Contract): Do not emit warnings"}, {"sha": "dce76e9db4141e044ca2c367f5353559579fa030", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -516,11 +516,11 @@ package body Atree is\n \n       if With_Extension then\n          if Present (Src) and then Has_Extension (Src) then\n-            for J in 1 .. 4 loop\n+            for J in 1 .. Num_Extension_Nodes loop\n                Nodes.Append (Nodes.Table (Src + Node_Id (J)));\n             end loop;\n          else\n-            for J in 1 .. 4 loop\n+            for J in 1 .. Num_Extension_Nodes loop\n                Nodes.Append (Default_Node_Extension);\n             end loop;\n          end if;"}, {"sha": "c0568ba5c77ff9989b2bc578367182774a7f009a", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -65,6 +65,17 @@ package Atree is\n --  syntax tree format. Subsequent processing in the front end traverses the\n --  tree, transforming it in various ways and adding semantic information.\n \n+   ----------------------\n+   -- Size of Entities --\n+   ----------------------\n+\n+   --  Currently entities are composed of 5 sequentially allocated 32-byte\n+   --  nodes, considered as a single record. The following definition gives\n+   --  the number of extension nodes.\n+\n+   Num_Extension_Nodes : Int := 4;\n+   --  This value is increased by one if debug flag -gnatd.N is set\n+\n    ----------------------------------------\n    -- Definitions of Fields in Tree Node --\n    ----------------------------------------"}, {"sha": "bb3e4857ad500ba577f86d2a80ec16c63351200a", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -131,7 +131,7 @@ package body Debug is\n    --  d.K  Alfa detection only mode for gnat2why\n    --  d.L  Depend on back end for limited types in conditional expressions\n    --  d.M\n-   --  d.N\n+   --  d.N  Add node to all entities\n    --  d.O  Dump internal SCO tables\n    --  d.P  Previous (non-optimized) handling of length comparisons\n    --  d.Q\n@@ -629,6 +629,10 @@ package body Debug is\n    --       case expansion, leaving it up to the back end to handle conditional\n    --       expressions correctly.\n \n+   --  d.N  Enlarge entities by one node (but don't attempt to use this extra\n+   --       node for storage of any flags or fields). This can be used to do\n+   --       experiments on the impact of increasing entity sizes.\n+\n    --  d.O  Dump internal SCO tables. Before outputting the SCO information to\n    --       the ALI file, the internal SCO tables (SCO_Table/SCO_Unit_Table)\n    --       are dumped for debugging purposes."}, {"sha": "cf5aebe731196d73eece8bc7b2826c618138c9c2", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -1277,11 +1277,13 @@ package Einfo is\n --       reflect the specified information. However, there are some items that\n --       are only reflected in the chain. These include:\n --\n---          Alignment attribute definition clause\n --          Machine_Attribute pragma\n --          Link_Alias pragma\n --          Linker_Section pragma\n+--          Linker_Constructor pragma\n+--          Linker_Destructor pragma\n --          Weak_External pragma\n+--          Thread_Local_Storage pragma\n --\n --       If any of these items are present, then the flag Has_Gigi_Rep_Item is\n --       set, indicating that Gigi should search the chain.\n@@ -1530,6 +1532,7 @@ package Einfo is\n --          Linker_Constructor pragma\n --          Linker_Destructor pragma\n --          Weak_External pragma\n+--          Thread_Local_Storage pragma\n --\n --       If this flag is set, then Gigi should scan the rep item chain to\n --       process any of these items that appear. At least one such item will"}, {"sha": "b8058ae2442b17ae51130edcfea77b35c0bc5422", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -5368,6 +5368,15 @@ package body Exp_Attr is\n          Validity_Checks_On := Save_Validity_Checks_On;\n       end Valid;\n \n+      -------------------\n+      -- Valid_Scalars --\n+      -------------------\n+\n+      when Attribute_Valid_Scalars => Valid_Scalars : declare\n+      begin\n+         raise Program_Error;\n+      end Valid_Scalars;\n+\n       -----------\n       -- Value --\n       -----------"}, {"sha": "783babda0568753894c1f65bccbdafed4902bfc7", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -289,6 +289,12 @@ procedure Gnat1drv is\n          Ttypes.Target_Strict_Alignment := True;\n       end if;\n \n+      --  Increase size of allocated entities if debug flag -gnatd.N is set\n+\n+      if Debug_Flag_Dot_NN then\n+         Atree.Num_Extension_Nodes := Atree.Num_Extension_Nodes + 1;\n+      end if;\n+\n       --  Disable static allocation of dispatch tables if -gnatd.t or if layout\n       --  is enabled. The front end's layout phase currently treats types that\n       --  have discriminant-dependent arrays as not being static even when a"}, {"sha": "e43495bd2381d76363abb4c654cf4ee8ae0e6010", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -7423,6 +7423,16 @@ package body Make is\n \n          Add_Switch (Argv, Program_Args, And_Save => And_Save);\n \n+         --  Make sure that all significant switches -m on the command line\n+         --  are counted.\n+\n+         if Argv'Length > 2\n+           and then Argv (1 .. 2) = \"-m\"\n+           and then Argv /= \"-mieee\"\n+         then\n+            N_M_Switch := N_M_Switch + 1;\n+         end if;\n+\n       --  Handle non-default compiler, binder, linker, and handle --RTS switch\n \n       elsif Argv'Length > 2 and then Argv (1 .. 2) = \"--\" then"}, {"sha": "a1dc37cf51cfc9cdd1d077930042271cc4daf97a", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -666,10 +666,6 @@ package Opt is\n    --  Heap size for memory allocations. Valid values are 32 and 64. Only\n    --  available on VMS.\n \n-   HLO_Active : Boolean := False;\n-   --  GNAT\n-   --  True if High Level Optimizer is activated (-gnatH switch)\n-\n    Identifier_Character_Set : Character;\n    --  GNAT\n    --  This variable indicates the character set to be used for identifiers."}, {"sha": "79aa85fad2d806827e0ed6b08d3630e896f7a684", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -81,6 +81,9 @@ package body Ch4 is\n    --  Called to place complaint about bad range attribute at the given\n    --  source location. Terminates by raising Error_Resync.\n \n+   procedure Check_Bad_Exp;\n+   --  Called after scanning a**b, posts error if ** detected\n+\n    procedure P_Membership_Test (N : Node_Id);\n    --  N is the node for a N_In or N_Not_In node whose right operand has not\n    --  yet been processed. It is called just after scanning out the IN keyword.\n@@ -107,6 +110,20 @@ package body Ch4 is\n       Resync_Expression;\n    end Bad_Range_Attribute;\n \n+   -------------------\n+   -- Check_Bad_Exp --\n+   -------------------\n+\n+   procedure Check_Bad_Exp is\n+   begin\n+      if Token = Tok_Double_Asterisk then\n+         Error_Msg_SC (\"parenthesization required for '*'*\");\n+         Scan; -- past **\n+         Discard_Junk_Node (P_Primary);\n+         Check_Bad_Exp;\n+      end if;\n+   end Check_Bad_Exp;\n+\n    --------------------------\n    -- 4.1  Name (also 6.4) --\n    --------------------------\n@@ -1933,6 +1950,7 @@ package body Ch4 is\n                Scan; -- past **\n                Set_Left_Opnd (Node2, Node1);\n                Set_Right_Opnd (Node2, P_Primary);\n+               Check_Bad_Exp;\n                Node1 := Node2;\n             end if;\n \n@@ -2320,6 +2338,7 @@ package body Ch4 is\n             Scan; -- past **\n             Set_Left_Opnd (Node2, Node1);\n             Set_Right_Opnd (Node2, P_Primary);\n+            Check_Bad_Exp;\n             return Node2;\n          else\n             return Node1;"}, {"sha": "b0a17db28b96941259e245ebea635fcd8580241d", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2242,6 +2242,71 @@ package body Scng is\n                Scan_Ptr := Scan_Ptr + 1;\n                return;\n \n+            --  Check for something looking like a preprocessor directive\n+\n+            elsif Source (Scan_Ptr) = '#'\n+              and then (Source (Scan_Ptr + 1 .. Scan_Ptr + 2) = \"if\"\n+                          or else\n+                        Source (Scan_Ptr + 1 .. Scan_Ptr + 5) = \"elsif\"\n+                          or else\n+                        Source (Scan_Ptr + 1 .. Scan_Ptr + 4) = \"else\"\n+                          or else\n+                        Source (Scan_Ptr + 1 .. Scan_Ptr + 3) = \"end\")\n+            then\n+               Error_Msg_S\n+                 (\"preprocessor directive ignored, preprocessor not active\");\n+\n+               --  Skip to end of line\n+\n+               loop\n+                  if Source (Scan_Ptr) in Graphic_Character\n+                       or else\n+                     Source (Scan_Ptr) = HT\n+                  then\n+                     Scan_Ptr := Scan_Ptr + 1;\n+\n+                  --  Done if line terminator or EOF\n+\n+                  elsif Source (Scan_Ptr) in Line_Terminator\n+                          or else\n+                        Source (Scan_Ptr) = EOF\n+                  then\n+                     exit;\n+\n+                  --  If we have a wide character, we have to scan it out,\n+                  --  because it might be a legitimate line terminator\n+\n+                  elsif Start_Of_Wide_Character then\n+                     declare\n+                        Wptr : constant Source_Ptr := Scan_Ptr;\n+                        Code : Char_Code;\n+                        Err  : Boolean;\n+\n+                     begin\n+                        Scan_Wide (Source, Scan_Ptr, Code, Err);\n+\n+                        --  If not well formed wide character, then just skip\n+                        --  past it and ignore it.\n+\n+                        if Err then\n+                           Scan_Ptr := Wptr + 1;\n+\n+                        --  If UTF_32 terminator, terminate comment scan\n+\n+                        elsif Is_UTF_32_Line_Terminator (UTF_32 (Code)) then\n+                           Scan_Ptr := Wptr;\n+                           exit;\n+                        end if;\n+                     end;\n+\n+                  --  Else keep going (don't worry about bad comment chars\n+                  --  in this context, we just want to find the end of line.\n+\n+                  else\n+                     Scan_Ptr := Scan_Ptr + 1;\n+                  end if;\n+               end loop;\n+\n             --  Otherwise, this is an illegal character\n \n             else"}, {"sha": "2e50d3dc73b3060dea01fc8993f5cd63f882c780", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -30,7 +30,6 @@ with Elists;   use Elists;\n with Errout;   use Errout;\n with Expander; use Expander;\n with Fname;    use Fname;\n-with HLO;      use HLO;\n with Lib;      use Lib;\n with Lib.Load; use Lib.Load;\n with Nlists;   use Nlists;\n@@ -1367,7 +1366,6 @@ package body Sem is\n       S_Global_Dis_Names : constant Boolean          := Global_Discard_Names;\n       S_In_Spec_Expr     : constant Boolean          := In_Spec_Expression;\n       S_Inside_A_Generic : constant Boolean          := Inside_A_Generic;\n-      S_New_Nodes_OK     : constant Int              := New_Nodes_OK;\n       S_Outer_Gen_Scope  : constant Entity_Id        := Outer_Generic_Scope;\n \n       Generic_Main : constant Boolean :=\n@@ -1386,8 +1384,7 @@ package body Sem is\n       --  and we need to restore these saved values at the end.\n \n       procedure Do_Analyze;\n-      --  Procedure to analyze the compilation unit. This is called more than\n-      --  once when the high level optimizer is activated.\n+      --  Procedure to analyze the compilation unit\n \n       ----------------\n       -- Do_Analyze --\n@@ -1491,15 +1488,6 @@ package body Sem is\n \n       if not Analyzed (Comp_Unit) then\n          Initialize_Version (Current_Sem_Unit);\n-         if HLO_Active then\n-            Expander_Mode_Save_And_Set (False);\n-            New_Nodes_OK := 1;\n-            Do_Analyze;\n-            Reset_Analyzed_Flags (Comp_Unit);\n-            Expander_Mode_Restore;\n-            High_Level_Optimize (Comp_Unit);\n-            New_Nodes_OK := 0;\n-         end if;\n \n          --  Do analysis, and then append the compilation unit onto the\n          --  Comp_Unit_List, if appropriate. This is done after analysis,\n@@ -1547,7 +1535,6 @@ package body Sem is\n       GNAT_Mode            := S_GNAT_Mode;\n       In_Spec_Expression   := S_In_Spec_Expr;\n       Inside_A_Generic     := S_Inside_A_Generic;\n-      New_Nodes_OK         := S_New_Nodes_OK;\n       Outer_Generic_Scope  := S_Outer_Gen_Scope;\n \n       Restore_Opt_Config_Switches (Save_Config_Switches);"}, {"sha": "00babf3b371b7c049047807e0953afd2a971579e", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -209,10 +209,6 @@ with Types;  use Types;\n \n package Sem is\n \n-   New_Nodes_OK : Int := 1;\n-   --  Temporary flag for use in checking out HLO. Set non-zero if it is\n-   --  OK to generate new nodes.\n-\n    -----------------------------\n    -- Semantic Analysis Flags --\n    -----------------------------"}, {"sha": "77db15ed21e092d23baf38b1d2f242222d70b26f", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -5196,6 +5196,15 @@ package body Sem_Attr is\n \n          Set_Etype (N, Standard_Boolean);\n \n+      -------------------\n+      -- Valid_Scalars --\n+      -------------------\n+\n+      when Attribute_Valid_Scalars =>\n+         Check_E0;\n+         Check_Type;\n+         --  More stuff TBD ???\n+\n       -----------\n       -- Value --\n       -----------\n@@ -6034,7 +6043,7 @@ package body Sem_Attr is\n          return;\n \n       --  No other cases are foldable (they certainly aren't static, and at\n-      --  the moment we don't try to fold any cases other than these three).\n+      --  the moment we don't try to fold any cases other than the ones above).\n \n       else\n          Check_Expressions;\n@@ -8145,6 +8154,7 @@ package body Sem_Attr is\n            Attribute_Universal_Literal_String   |\n            Attribute_Unrestricted_Access        |\n            Attribute_Valid                      |\n+           Attribute_Valid_Scalars              |\n            Attribute_Value                      |\n            Attribute_Wchar_T_Size               |\n            Attribute_Wide_Value                 |"}, {"sha": "25e6adf3519a670b6292f43b8647a509a4f7c949", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -549,6 +549,13 @@ package Sem_Attr is\n       --  Natural'Size is typically 31, the value of Natural'VADS_Size is 32.\n       --  For all other types, Size and VADS_Size yield the same value.\n \n+      -------------------\n+      -- Valid_Scalars --\n+      -------------------\n+\n+      Attribute_Valid_Scalars => True,\n+      --  Typ'Valid_Scalars applies to ???\n+\n       ----------------\n       -- Value_Size --\n       ----------------"}, {"sha": "64e7e3220265ddd4544f37eac87de62cf26f1f5e", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -2977,7 +2977,6 @@ package body Sem_Ch10 is\n    --  Start of processing for Expand_With_Clause\n \n    begin\n-      New_Nodes_OK := New_Nodes_OK + 1;\n       Withn :=\n         Make_With_Clause (Loc,\n           Name => Build_Unit_Name (Nam));\n@@ -3002,8 +3001,6 @@ package body Sem_Ch10 is\n       if Nkind (Nam) = N_Expanded_Name then\n          Expand_With_Clause (Item, Prefix (Nam), N);\n       end if;\n-\n-      New_Nodes_OK := New_Nodes_OK - 1;\n    end Expand_With_Clause;\n \n    -----------------------\n@@ -3165,7 +3162,6 @@ package body Sem_Ch10 is\n          return;\n       end if;\n \n-      New_Nodes_OK := New_Nodes_OK + 1;\n       Withn := Make_With_Clause (Loc, Name => Build_Unit_Name);\n \n       Set_Library_Unit          (Withn, P);\n@@ -3183,8 +3179,6 @@ package body Sem_Ch10 is\n       if Is_Child_Spec (P_Unit) then\n          Implicit_With_On_Parent (P_Unit, N);\n       end if;\n-\n-      New_Nodes_OK := New_Nodes_OK - 1;\n    end Implicit_With_On_Parent;\n \n    --------------\n@@ -3734,8 +3728,6 @@ package body Sem_Ch10 is\n       --  Start of processing for Expand_Limited_With_Clause\n \n       begin\n-         New_Nodes_OK := New_Nodes_OK + 1;\n-\n          if Nkind (Nam) = N_Identifier then\n \n             --  Create node for name of withed unit\n@@ -3793,8 +3785,6 @@ package body Sem_Ch10 is\n                Install_Limited_Withed_Unit (Withn);\n             end if;\n          end if;\n-\n-         New_Nodes_OK := New_Nodes_OK - 1;\n       end Expand_Limited_With_Clause;\n \n       ----------------------"}, {"sha": "8ec60c7abb3367889e72170a565b911271326b97", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -6963,7 +6963,10 @@ package body Sem_Ch6 is\n       --  is precisely evaluated in the pre-state. Otherwise return OK.\n \n       function Is_Trivial_Post_Or_Ensures (N : Node_Id) return Boolean;\n-      --  Return whether node N is trivially \"True\" or \"False\"\n+      --  Return True if node N is trivially \"True\" or \"False\", and it comes\n+      --  from source. In particular, nodes that are statically known \"True\" or\n+      --  \"False\" by the compiler but not written as such in source code are\n+      --  not considered as trivial.\n \n       procedure Process_Contract_Cases (Spec : Node_Id);\n       --  This processes the Spec_CTC_List from Spec, processing any contract\n@@ -7064,7 +7067,8 @@ package body Sem_Ch6 is\n          return Is_Entity_Name (N)\n            and then (Entity (N) = Standard_True\n                        or else\n-                     Entity (N) = Standard_False);\n+                     Entity (N) = Standard_False)\n+           and then Comes_From_Source (N);\n       end Is_Trivial_Post_Or_Ensures;\n \n       ----------------------------"}, {"sha": "e37056e64fe80c56bd64f3832fbc8039ea81fc39", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 50, "deletions": 28, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -182,16 +182,19 @@ package body Sem_Elab is\n       In_Init_Proc      : Boolean := False);\n    --  This is the internal recursive routine that is called to check for\n    --  possible elaboration error. The argument N is a subprogram call or\n-   --  generic instantiation to be checked, and E is the entity of the called\n-   --  subprogram, or instantiated generic unit. The flag Outer_Scope is the\n-   --  outer level scope for the original call. Inter_Unit_Only is set if the\n-   --  call is only to be checked in the case where it is to another unit (and\n-   --  skipped if within a unit). Generate_Warnings is set to False to suppress\n-   --  warning messages about missing pragma Elaborate_All's. These messages\n-   --  are not wanted for inner calls in the dynamic model. Note that an\n-   --  instance of the Access attribute applied to a subprogram also generates\n-   --  a call to this procedure (since the referenced subprogram may be called\n-   --  later indirectly). Flag In_Init_Proc should be set whenever the current\n+   --  generic instantiation, or 'Access attribute reference to be checked, and\n+   --  E is the entity of the called subprogram, or instantiated generic unit,\n+   --  or subprogram referenced by 'Access.\n+   --\n+   --  The flag Outer_Scope is the outer level scope for the original call.\n+   --  Inter_Unit_Only is set if the call is only to be checked in the\n+   --  case where it is to another unit (and skipped if within a unit).\n+   --  Generate_Warnings is set to False to suppress warning messages about\n+   --  missing pragma Elaborate_All's. These messages are not wanted for\n+   --  inner calls in the dynamic model. Note that an instance of the Access\n+   --  attribute applied to a subprogram also generates a call to this\n+   --  procedure (since the referenced subprogram may be called later\n+   --  indirectly). Flag In_Init_Proc should be set whenever the current\n    --  context is a type init proc.\n \n    procedure Check_Bad_Instantiation (N : Node_Id);\n@@ -519,6 +522,9 @@ package body Sem_Elab is\n       Inst_Case : constant Boolean := Nkind (N) in N_Generic_Instantiation;\n       --  Indicates if we have instantiation case\n \n+      Access_Case : constant Boolean := Nkind (N) = N_Attribute_Reference;\n+      --  Indicates if we have Access attribute case\n+\n       Caller_Unit_Internal : Boolean;\n       Callee_Unit_Internal : Boolean;\n \n@@ -704,9 +710,9 @@ package body Sem_Elab is\n            Is_Internal_File_Name\n              (Unit_File_Name (Get_Source_Unit (E_Scope)));\n \n-         --  Do not give a warning if the with'ed unit is internal\n-         --  and this is the generic instantiation case (this saves a\n-         --  lot of hassle dealing with the Text_IO special child units)\n+         --  Do not give a warning if the with'ed unit is internal and this is\n+         --  the generic instantiation case (this saves a lot of hassle dealing\n+         --  with the Text_IO special child units)\n \n          if Callee_Unit_Internal and Inst_Case then\n             return;\n@@ -720,9 +726,9 @@ package body Sem_Elab is\n                 (Unit_File_Name (Get_Source_Unit (C_Scope)));\n          end if;\n \n-         --  Do not give a warning if the with'ed unit is internal\n-         --  and the caller is not internal (since the binder always\n-         --  elaborates internal units first).\n+         --  Do not give a warning if the with'ed unit is internal and the\n+         --  caller is not internal (since the binder always elaborates\n+         --  internal units first).\n \n          if Callee_Unit_Internal and (not Caller_Unit_Internal) then\n             return;\n@@ -743,15 +749,15 @@ package body Sem_Elab is\n          end if;\n \n          --  If the call is in an instance, and the called entity is not\n-         --  defined in the same instance, then the elaboration issue\n-         --  focuses around the unit containing the template, it is\n-         --  this unit which requires an Elaborate_All.\n+         --  defined in the same instance, then the elaboration issue focuses\n+         --  around the unit containing the template, it is this unit which\n+         --  requires an Elaborate_All.\n \n-         --  However, if we are doing dynamic elaboration, we need to\n-         --  chase the call in the usual manner.\n+         --  However, if we are doing dynamic elaboration, we need to chase the\n+         --  call in the usual manner.\n \n-         --  We do not handle the case of calling a generic formal correctly\n-         --  in the static case. See test 4703-004 to explore this gap ???\n+         --  We do not handle the case of calling a generic formal correctly in\n+         --  the static case.???\n \n          Inst_Caller := Instantiation (Get_Source_File_Index (Sloc (N)));\n          Inst_Callee := Instantiation (Get_Source_File_Index (Sloc (Ent)));\n@@ -871,6 +877,8 @@ package body Sem_Elab is\n                   Ent   : Node_Or_Entity_Id);\n                --  Generate a call to Error_Msg_NE with parameters Msg_D or\n                --  Msg_S (for dynamic or static elaboration model), N and Ent.\n+               --  Msg_D is suppressed for the attribute reference case, since\n+               --  we never raise Program_Error for an attribute reference.\n \n                ------------------\n                -- Elab_Warning --\n@@ -883,7 +891,9 @@ package body Sem_Elab is\n                is\n                begin\n                   if Dynamic_Elaboration_Checks then\n-                     Error_Msg_NE (Msg_D, N, Ent);\n+                     if not Access_Case then\n+                        Error_Msg_NE (Msg_D, N, Ent);\n+                     end if;\n                   else\n                      Error_Msg_NE (Msg_S, N, Ent);\n                   end if;\n@@ -892,11 +902,23 @@ package body Sem_Elab is\n             --  Start of processing for Generate_Elab_Warnings\n \n             begin\n+               --  Instantiation case\n+\n                if Inst_Case then\n                   Elab_Warning\n                     (\"instantiation of& may raise Program_Error?\",\n                      \"info: instantiation of& during elaboration?\", Ent);\n \n+               --  Indirect call case, warning only in static elaboration\n+               --  case, because the attribute reference itself cannot raise\n+               --  an exception.\n+\n+               elsif Access_Case then\n+                  Elab_Warning\n+                    (\"\", \"info: access to& during elaboration?\", Ent);\n+\n+               --  Subprogram call case\n+\n                else\n                   if Nkind (Name (N)) in N_Has_Entity\n                     and then Is_Init_Proc (Entity (Name (N)))\n@@ -922,6 +944,7 @@ package body Sem_Elab is\n                     (\"\\missing pragma Elaborate for&?\",\n                      \"\\info: implicit pragma Elaborate for& generated?\",\n                      W_Scope);\n+\n                else\n                   Elab_Warning\n                     (\"\\missing pragma Elaborate_All for&?\",\n@@ -960,7 +983,8 @@ package body Sem_Elab is\n                Insert_Elab_Check (N,\n                  Make_Attribute_Reference (Loc,\n                    Attribute_Name => Name_Elaborated,\n-                   Prefix => New_Occurrence_Of (Spec_Entity (E_Scope), Loc)));\n+                   Prefix         =>\n+                     New_Occurrence_Of (Spec_Entity (E_Scope), Loc)));\n \n                --  Prevent duplicate elaboration checks on the same call,\n                --  which can happen if the body enclosing the call appears\n@@ -990,9 +1014,7 @@ package body Sem_Elab is\n             --  Do not generate an Elaborate_All for finalization routines\n             --  which perform partial clean up as part of initialization.\n \n-            elsif In_Init_Proc\n-              and then Is_Finalization_Procedure (Ent)\n-            then\n+            elsif In_Init_Proc and then Is_Finalization_Procedure (Ent) then\n                null;\n \n             --  Here we need to generate an implicit elaborate all"}, {"sha": "ed30b9b5aac368388a79845d60d2eb460d14294c", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -854,6 +854,7 @@ package Snames is\n    Name_VADS_Size                      : constant Name_Id := N + $; -- GNAT\n    Name_Val                            : constant Name_Id := N + $;\n    Name_Valid                          : constant Name_Id := N + $;\n+   Name_Valid_Scalars                  : constant Name_Id := N + $; -- GNAT\n    Name_Value_Size                     : constant Name_Id := N + $; -- GNAT\n    Name_Variable_Indexing              : constant Name_Id := N + $; -- GNAT\n    Name_Version                        : constant Name_Id := N + $;\n@@ -1418,6 +1419,7 @@ package Snames is\n       Attribute_VADS_Size,\n       Attribute_Val,\n       Attribute_Valid,\n+      Attribute_Valid_Scalars,\n       Attribute_Value_Size,\n       Attribute_Variable_Indexing,\n       Attribute_Version,"}, {"sha": "789fb9b5b4d6b8160b59cde52f36df11d26696e6", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1f6a1f9045969b4b04f3316a7f80969ff7c22b/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=2a1f6a1f9045969b4b04f3316a7f80969ff7c22b", "patch": "@@ -634,12 +634,6 @@ package body Switch.C is\n                Ptr := Ptr + 1;\n                Usage_Requested := True;\n \n-            --  Processing for H switch\n-\n-            when 'H' =>\n-               Ptr := Ptr + 1;\n-               HLO_Active := True;\n-\n             --  Processing for i switch\n \n             when 'i' =>"}]}