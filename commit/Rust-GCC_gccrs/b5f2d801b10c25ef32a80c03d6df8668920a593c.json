{"sha": "b5f2d801b10c25ef32a80c03d6df8668920a593c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmMmQ4MDFiMTBjMjVlZjMyYTgwYzAzZDZkZjg2Njg5MjBhNTkzYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:09:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:09:27Z"}, "message": "[9/77] Add SCALAR_FLOAT_TYPE_MODE\n\nThis patch adds a macro that extracts the TYPE_MODE and forcibly\nconverts it to a scalar_float_mode.  The forcible conversion\nincludes a gcc_checking_assert that the mode is a SCALAR_FLOAT_MODE_P.\n\nThis becomes important as more static type checking is added by\nlater patches.  It has the additional benefit of bypassing the\nVECTOR_TYPE_P (...) ? vector_type_mode (...) : ... condition\nin TYPE_MODE; in release builds the new macro is a simple\nfield access.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree.h (SCALAR_FLOAT_TYPE_MODE): New macro.\n\t* builtins.c (expand_builtin_signbit): Use it instead of TYPE_MODE.\n\t* fold-const.c (fold_convert_const_real_from_fixed): Likewise.\n\t(native_encode_real): Likewise.\n\t(native_interpret_real): Likewise.\n\t* hsa-brig.c (emit_immediate_scalar_to_buffer): Likewise.\n\t* tree-vrp.c (simplify_float_conversion_using_ranges): Likewise.\n\ngcc/cp/\n\t* mangle.c (write_real_cst): Use SCALAR_FLOAT_TYPE_MODE\n\tinstead of TYPE_MODE.\n\ngcc/fortran/\n\t* target-memory.c (size_float): Use SCALAR_FLOAT_TYPE_MODE\n\tinstead of TYPE_MODE.\n\ngcc/objc/\n\t* objc-encoding.c (encode_type): Use SCALAR_FLOAT_TYPE_MODE\n\tinstead of TYPE_MODE.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251460", "tree": {"sha": "7128c82384620d1aa931e09c93420443dbee1554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7128c82384620d1aa931e09c93420443dbee1554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5f2d801b10c25ef32a80c03d6df8668920a593c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f2d801b10c25ef32a80c03d6df8668920a593c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f2d801b10c25ef32a80c03d6df8668920a593c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f2d801b10c25ef32a80c03d6df8668920a593c/comments", "author": null, "committer": null, "parents": [{"sha": "3205ab28e639b69e5979f9d8336e2be75f681661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3205ab28e639b69e5979f9d8336e2be75f681661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3205ab28e639b69e5979f9d8336e2be75f681661"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "5ca560ee2b1804a3c353ca68aefaaed6dc44a081", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -1,3 +1,15 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree.h (SCALAR_FLOAT_TYPE_MODE): New macro.\n+\t* builtins.c (expand_builtin_signbit): Use it instead of TYPE_MODE.\n+\t* fold-const.c (fold_convert_const_real_from_fixed): Likewise.\n+\t(native_encode_real): Likewise.\n+\t(native_interpret_real): Likewise.\n+\t* hsa-brig.c (emit_immediate_scalar_to_buffer): Likewise.\n+\t* tree-vrp.c (simplify_float_conversion_using_ranges): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "4cb1d37ddfd9485344e836cdf68320b4ea4ae84d", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -5301,7 +5301,8 @@ static rtx\n expand_builtin_signbit (tree exp, rtx target)\n {\n   const struct real_format *fmt;\n-  machine_mode fmode, imode, rmode;\n+  scalar_float_mode fmode;\n+  machine_mode imode, rmode;\n   tree arg;\n   int word, bitpos;\n   enum insn_code icode;\n@@ -5312,7 +5313,7 @@ expand_builtin_signbit (tree exp, rtx target)\n     return NULL_RTX;\n \n   arg = CALL_EXPR_ARG (exp, 0);\n-  fmode = TYPE_MODE (TREE_TYPE (arg));\n+  fmode = SCALAR_FLOAT_TYPE_MODE (TREE_TYPE (arg));\n   rmode = TYPE_MODE (TREE_TYPE (exp));\n   fmt = REAL_MODE_FORMAT (fmode);\n "}, {"sha": "fc6231c66595a3ef2bad285b643a05aa40c4bbba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -1,3 +1,10 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* mangle.c (write_real_cst): Use SCALAR_FLOAT_TYPE_MODE\n+\tinstead of TYPE_MODE.\n+\n 2017-08-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/81236 - ICE with template-id in generic lambda"}, {"sha": "15f442133e6711ff6f6bb7efa0f03279a82d1752", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -1788,7 +1788,7 @@ write_real_cst (const tree value)\n   int i, limit, dir;\n \n   tree type = TREE_TYPE (value);\n-  int words = GET_MODE_BITSIZE (TYPE_MODE (type)) / 32;\n+  int words = GET_MODE_BITSIZE (SCALAR_FLOAT_TYPE_MODE (type)) / 32;\n \n   real_to_target (target_real, &TREE_REAL_CST (value),\n \t\t  TYPE_MODE (type));"}, {"sha": "27f4f4eb59f7aa1b3a1a3d2bf91b1272e36e3e7d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -2032,7 +2032,8 @@ fold_convert_const_real_from_fixed (tree type, const_tree arg1)\n   REAL_VALUE_TYPE value;\n   tree t;\n \n-  real_convert_from_fixed (&value, TYPE_MODE (type), &TREE_FIXED_CST (arg1));\n+  real_convert_from_fixed (&value, SCALAR_FLOAT_TYPE_MODE (type),\n+\t\t\t   &TREE_FIXED_CST (arg1));\n   t = build_real (type, value);\n \n   TREE_OVERFLOW (t) = TREE_OVERFLOW (arg1);\n@@ -7057,7 +7058,7 @@ static int\n native_encode_real (const_tree expr, unsigned char *ptr, int len, int off)\n {\n   tree type = TREE_TYPE (expr);\n-  int total_bytes = GET_MODE_SIZE (TYPE_MODE (type));\n+  int total_bytes = GET_MODE_SIZE (SCALAR_FLOAT_TYPE_MODE (type));\n   int byte, offset, word, words, bitpos;\n   unsigned char value;\n \n@@ -7302,7 +7303,7 @@ native_interpret_fixed (tree type, const unsigned char *ptr, int len)\n static tree\n native_interpret_real (tree type, const unsigned char *ptr, int len)\n {\n-  machine_mode mode = TYPE_MODE (type);\n+  scalar_float_mode mode = SCALAR_FLOAT_TYPE_MODE (type);\n   int total_bytes = GET_MODE_SIZE (mode);\n   unsigned char value;\n   /* There are always 32 bits in each long, no matter the size of"}, {"sha": "6baf74f27bbeec1a9beec93cce349d638ab550c5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -1,3 +1,10 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target-memory.c (size_float): Use SCALAR_FLOAT_TYPE_MODE\n+\tinstead of TYPE_MODE.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "1c8de1c59aa3d2587e36bc8fb13d73d4b11ebe59", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -46,7 +46,7 @@ size_integer (int kind)\n static size_t\n size_float (int kind)\n {\n-  return GET_MODE_SIZE (TYPE_MODE (gfc_get_real_type (kind)));;\n+  return GET_MODE_SIZE (SCALAR_FLOAT_TYPE_MODE (gfc_get_real_type (kind)));\n }\n \n "}, {"sha": "d15ce261ed2c543cb56fddae029a55eab69ed4d8", "filename": "gcc/hsa-brig.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fhsa-brig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fhsa-brig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-brig.c?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -910,7 +910,7 @@ emit_immediate_scalar_to_buffer (tree value, char *data, unsigned need_len)\n \t\t \"operands\");\n \t  return 2;\n \t}\n-      unsigned int_len = GET_MODE_SIZE (TYPE_MODE (type));\n+      unsigned int_len = GET_MODE_SIZE (SCALAR_FLOAT_TYPE_MODE (type));\n       /* There are always 32 bits in each long, no matter the size of\n \t the hosts long.  */\n       long tmp[6];"}, {"sha": "8270c92e91e91bd1b20a0ba957a54282f61008f2", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -1,3 +1,10 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* objc-encoding.c (encode_type): Use SCALAR_FLOAT_TYPE_MODE\n+\tinstead of TYPE_MODE.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "bd59a29265e68504c99c4e64b0a97be309cc5032", "filename": "gcc/objc/objc-encoding.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fobjc%2Fobjc-encoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Fobjc%2Fobjc-encoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-encoding.c?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -664,7 +664,7 @@ encode_type (tree type, int curtype, int format)\n       {\n \tchar c;\n \t/* Floating point types.  */\n-\tswitch (GET_MODE_BITSIZE (TYPE_MODE (type)))\n+\tswitch (GET_MODE_BITSIZE (SCALAR_FLOAT_TYPE_MODE (type)))\n \t  {\n \t  case 32:  c = 'f'; break;\n \t  case 64:  c = 'd'; break;"}, {"sha": "4da6a2b3863114239e8bd5062db6c50229497ffa", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -10094,7 +10094,8 @@ simplify_float_conversion_using_ranges (gimple_stmt_iterator *gsi,\n {\n   tree rhs1 = gimple_assign_rhs1 (stmt);\n   value_range *vr = get_value_range (rhs1);\n-  machine_mode fltmode = TYPE_MODE (TREE_TYPE (gimple_assign_lhs (stmt)));\n+  scalar_float_mode fltmode\n+    = SCALAR_FLOAT_TYPE_MODE (TREE_TYPE (gimple_assign_lhs (stmt)));\n   machine_mode mode;\n   tree tem;\n   gassign *conv;"}, {"sha": "47dfa38b04578bc938430919f6b50c534eef0ed6", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f2d801b10c25ef32a80c03d6df8668920a593c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b5f2d801b10c25ef32a80c03d6df8668920a593c", "patch": "@@ -1849,6 +1849,8 @@ extern void protected_set_expr_location (tree, location_t);\n #define TYPE_MODE(NODE) \\\n   (VECTOR_TYPE_P (TYPE_CHECK (NODE)) \\\n    ? vector_type_mode (NODE) : (NODE)->type_common.mode)\n+#define SCALAR_FLOAT_TYPE_MODE(NODE) \\\n+  (as_a <scalar_float_mode> (TYPE_CHECK (NODE)->type_common.mode))\n #define SET_TYPE_MODE(NODE, MODE) \\\n   (TYPE_CHECK (NODE)->type_common.mode = (MODE))\n "}]}