{"sha": "cb3f06480a17f98579704b9927632627a3814c5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzZjA2NDgwYTE3Zjk4NTc5NzA0Yjk5Mjc2MzI2MjdhMzgxNGM1Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-06T08:19:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-06T08:19:08Z"}, "message": "openmp: Fix handling of non-addressable shared scalars in parallel nested inside of target [PR93515]\n\nAs the following testcase shows, we need to consider even target to be a construct\nthat forces not to use copy in/out for shared on parallel inside of the target.\nE.g. for parallel nested inside another parallel or host teams, we already avoid\ncopy in/out and we need to treat target the same.\n\n2020-02-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libgomp/93515\n\t* omp-low.c (use_pointer_for_field): For nested constructs, also\n\tlook for map clauses on target construct.\n\t(scan_omp_1_stmt) <case GIMPLE_OMP_TARGET>: Bump temporarily\n\ttaskreg_nesting_level.\n\n\t* testsuite/libgomp.c-c++-common/pr93515.c: New test.", "tree": {"sha": "59befb018cc2c77aa27bb3aa9f18bacb94b0e428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59befb018cc2c77aa27bb3aa9f18bacb94b0e428"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb3f06480a17f98579704b9927632627a3814c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3f06480a17f98579704b9927632627a3814c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3f06480a17f98579704b9927632627a3814c5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3f06480a17f98579704b9927632627a3814c5c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf785618ecc90e3f063b99572de48cb91aa5ab5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf785618ecc90e3f063b99572de48cb91aa5ab5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf785618ecc90e3f063b99572de48cb91aa5ab5d"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "b5b465a922d6c4a9a21995d8bf13e3901a5ddc10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3f06480a17f98579704b9927632627a3814c5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3f06480a17f98579704b9927632627a3814c5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb3f06480a17f98579704b9927632627a3814c5c", "patch": "@@ -1,5 +1,11 @@\n 2020-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR libgomp/93515\n+\t* omp-low.c (use_pointer_for_field): For nested constructs, also\n+\tlook for map clauses on target construct.\n+\t(scan_omp_1_stmt) <case GIMPLE_OMP_TARGET>: Bump temporarily\n+\ttaskreg_nesting_level.\n+\n \tPR libgomp/93515\n \t* gimplify.c (gimplify_scan_omp_clauses) <do_notice>: If adding\n \tshared clause, call omp_notice_variable on outer context if any."}, {"sha": "67565d61400388db608ffaf8876a15ecd349f1ab", "filename": "gcc/omp-low.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3f06480a17f98579704b9927632627a3814c5c/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3f06480a17f98579704b9927632627a3814c5c/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=cb3f06480a17f98579704b9927632627a3814c5c", "patch": "@@ -477,18 +477,30 @@ use_pointer_for_field (tree decl, omp_context *shared_ctx)\n \t  omp_context *up;\n \n \t  for (up = shared_ctx->outer; up; up = up->outer)\n-\t    if (is_taskreg_ctx (up) && maybe_lookup_decl (decl, up))\n+\t    if ((is_taskreg_ctx (up)\n+\t\t || (gimple_code (up->stmt) == GIMPLE_OMP_TARGET\n+\t\t     && is_gimple_omp_offloaded (up->stmt)))\n+\t\t&& maybe_lookup_decl (decl, up))\n \t      break;\n \n \t  if (up)\n \t    {\n \t      tree c;\n \n-\t      for (c = gimple_omp_taskreg_clauses (up->stmt);\n-\t\t   c; c = OMP_CLAUSE_CHAIN (c))\n-\t\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_SHARED\n-\t\t    && OMP_CLAUSE_DECL (c) == decl)\n-\t\t  break;\n+\t      if (gimple_code (up->stmt) == GIMPLE_OMP_TARGET)\n+\t\t{\n+\t\t  for (c = gimple_omp_target_clauses (up->stmt);\n+\t\t       c; c = OMP_CLAUSE_CHAIN (c))\n+\t\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t\t\t&& OMP_CLAUSE_DECL (c) == decl)\n+\t\t      break;\n+\t\t}\n+\t      else\n+\t\tfor (c = gimple_omp_taskreg_clauses (up->stmt);\n+\t\t     c; c = OMP_CLAUSE_CHAIN (c))\n+\t\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_SHARED\n+\t\t      && OMP_CLAUSE_DECL (c) == decl)\n+\t\t    break;\n \n \t      if (c)\n \t\tgoto maybe_mark_addressable_and_ret;\n@@ -3781,7 +3793,14 @@ scan_omp_1_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n       break;\n \n     case GIMPLE_OMP_TARGET:\n-      scan_omp_target (as_a <gomp_target *> (stmt), ctx);\n+      if (is_gimple_omp_offloaded (stmt))\n+\t{\n+\t  taskreg_nesting_level++;\n+\t  scan_omp_target (as_a <gomp_target *> (stmt), ctx);\n+\t  taskreg_nesting_level--;\n+\t}\n+      else\n+\tscan_omp_target (as_a <gomp_target *> (stmt), ctx);\n       break;\n \n     case GIMPLE_OMP_TEAMS:"}, {"sha": "ba14005c6ea51b5b1879e8fac7958676911318d5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3f06480a17f98579704b9927632627a3814c5c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3f06480a17f98579704b9927632627a3814c5c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=cb3f06480a17f98579704b9927632627a3814c5c", "patch": "@@ -1,3 +1,8 @@\n+2020-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/93515\n+\t* testsuite/libgomp.c-c++-common/pr93515.c: New test.\n+\n 2020-02-05  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/lib/libgomp.exp"}, {"sha": "8a69088ccec184216a65057ef7370c5043cabf39", "filename": "libgomp/testsuite/libgomp.c-c++-common/pr93515.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3f06480a17f98579704b9927632627a3814c5c/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr93515.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3f06480a17f98579704b9927632627a3814c5c/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr93515.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr93515.c?ref=cb3f06480a17f98579704b9927632627a3814c5c", "patch": "@@ -0,0 +1,36 @@\n+/* PR libgomp/93515 */\n+\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  int i;\n+  int a = 42;\n+#pragma omp target teams distribute parallel for defaultmap(tofrom: scalar)\n+  for (i = 0; i < 64; ++i)\n+    if (omp_get_team_num () == 0)\n+      if (omp_get_thread_num () == 0)\n+\ta = 142;\n+  if (a != 142)\n+    __builtin_abort ();\n+  a = 42;\n+#pragma omp target parallel for defaultmap(tofrom: scalar)\n+  for (i = 0; i < 64; ++i)\n+    if (omp_get_thread_num () == 0)\n+      a = 143;\n+  if (a != 143)\n+    __builtin_abort ();\n+  a = 42;\n+#pragma omp target firstprivate(a)\n+  {\n+    #pragma omp parallel for\n+    for (i = 0; i < 64; ++i)\n+      if (omp_get_thread_num () == 0)\n+\ta = 144;\n+    if (a != 144)\n+      abort ();\n+  }\n+  return 0;\n+}"}]}