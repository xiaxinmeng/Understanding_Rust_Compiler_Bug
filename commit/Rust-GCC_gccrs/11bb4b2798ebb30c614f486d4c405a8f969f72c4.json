{"sha": "11bb4b2798ebb30c614f486d4c405a8f969f72c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFiYjRiMjc5OGViYjMwYzYxNGY0ODZkNGM0MDVhOGY5NjlmNzJjNA==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-08-31T18:51:08Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-08-31T18:51:08Z"}, "message": "Make-lang.in (CXX_AND_OBJCXX_OBJS): Add cp/cp-objcp-common.o.\n\n2004-08-31  Ziemowit Laski  <zlaski@apple.com>\n\n        * Make-lang.in (CXX_AND_OBJCXX_OBJS): Add cp/cp-objcp-common.o.\n        (cp/cp-lang.o): Depend on debug.h, gtype-cp.h and cp/cp-objcp-common.h.\n        (cp/cp-decl.c): Do not depend on gtype-cp.h.\n        (cp/cp-objcp-common.o): New target.\n        * cp-lang.c: Include debug.h, cp-objcp-common.h and gtype-cp.h.\n        (cxx_get_alias_set, cxx_warn_unused_global_decl, cp_expr_size,\n        cp_tree_size, cp_var_mod_type_p, cxx_initialize_diagnostics): Move\n        prototypes and definitions to cp-objcp-common.h and cp-objcp-common.c,\n        respectively.\n        (LANG_HOOKS_TREE_SIZE, LANG_HOOKS_FINISH,\n        LANG_HOOKS_CLEAR_BINDING_STACK, LANG_HOOKS_INIT_OPTIONS,\n        LANG_HOOKS_INITIALIZE_DIAGNOSTICS, LANG_HOOKS_HANDLE_OPTION,\n        LANG_HOOKS_HANDLE_FILENAME, LANG_HOOKS_MISSING_ARGUMENT,\n        LANG_HOOKS_POST_OPTIONS, LANG_HOOKS_GET_ALIAS_SET,\n        LANG_HOOKS_EXPAND_CONSTANT, LANG_HOOKS_EXPAND_EXPR,\n        LANG_HOOKS_EXPAND_DECL, LANG_HOOKS_PARSE_FILE,\n        LANG_HOOKS_DUP_LANG_SPECIFIC_DECL, LANG_HOOKS_TRUTHVALUE_CONVERSION,\n        LANG_HOOKS_SET_DECL_ASSEMBLER_NAME, LANG_HOOKS_MARK_ADDRESSABLE,\n        LANG_HOOKS_PRINT_STATISTICS, LANG_HOOKS_PRINT_XNODE,\n        LANG_HOOKS_PRINT_DECL, LANG_HOOKS_PRINT_TYPE,\n        LANG_HOOKS_PRINT_IDENTIFIER, LANG_HOOKS_PRINT_ERROR_FUNCTION,\n        LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, LANG_HOOKS_WRITE_GLOBALS,\n        LANG_HOOKS_FUNCTION_INIT, LANG_HOOKS_FUNCTION_FINAL,\n        LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P,\n        LANG_HOOKS_COMMON_ATTRIBUTE_TABLE, LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE,\n        LANG_HOOKS_ATTRIBUTE_TABLE, LANG_HOOKS_TREE_INLINING_WALK_SUBTREES,\n        LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN,\n        LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS,\n        LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P,\n        LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P,\n        LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P,\n        LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN,\n        LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN, LANG_HOOKS_EXPR_SIZE,\n        LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR,\n        LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION, LANG_HOOKS_MAKE_TYPE,\n        LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIZE,\n        LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n        LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE, LANG_HOOKS_INCOMPLETE_TYPE_ERROR,\n        LANG_HOOKS_TYPE_PROMOTES_TO, LANG_HOOKS_REGISTER_BUILTIN_TYPE,\n        LANG_HOOKS_GIMPLIFY_EXPR, LANG_HOOKS_FOLD_OBJ_TYPE_REF): Move\n        hooks to cp-objcp-common.h.\n        (finish_file): New function.\n        * cp-objcp-common.c: New file.\n        * cp-objcp-common.h: New file.\n        * cp-tree.h (cp_finish_file): New prototype.\n        * decl.c: Do not include gtype-cp.h.\n        * decl2.c (finish_file): Rename to cp_finish_file.\n\nFrom-SVN: r86837", "tree": {"sha": "dff740e6130eb0b1821f2508cf868efe2cd89df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dff740e6130eb0b1821f2508cf868efe2cd89df2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11bb4b2798ebb30c614f486d4c405a8f969f72c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11bb4b2798ebb30c614f486d4c405a8f969f72c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11bb4b2798ebb30c614f486d4c405a8f969f72c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11bb4b2798ebb30c614f486d4c405a8f969f72c4/comments", "author": null, "committer": null, "parents": [{"sha": "c61eceebfae296bfab51a3af14bf09f2808d260c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61eceebfae296bfab51a3af14bf09f2808d260c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61eceebfae296bfab51a3af14bf09f2808d260c"}], "stats": {"total": 664, "additions": 409, "deletions": 255}, "files": [{"sha": "b942b8202d44314e28a674713082ad36f631c99f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=11bb4b2798ebb30c614f486d4c405a8f969f72c4", "patch": "@@ -1,3 +1,53 @@\n+2004-08-31  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* Make-lang.in (CXX_AND_OBJCXX_OBJS): Add cp/cp-objcp-common.o.\n+\t(cp/cp-lang.o): Depend on debug.h, gtype-cp.h and cp/cp-objcp-common.h.\n+\t(cp/cp-decl.c): Do not depend on gtype-cp.h.\n+\t(cp/cp-objcp-common.o): New target.\n+\t* cp-lang.c: Include debug.h, cp-objcp-common.h and gtype-cp.h.\n+\t(cxx_get_alias_set, cxx_warn_unused_global_decl, cp_expr_size,\n+\tcp_tree_size, cp_var_mod_type_p, cxx_initialize_diagnostics): Move\n+\tprototypes and definitions to cp-objcp-common.h and cp-objcp-common.c,\n+\trespectively.\n+\t(LANG_HOOKS_TREE_SIZE, LANG_HOOKS_FINISH,\n+\tLANG_HOOKS_CLEAR_BINDING_STACK, LANG_HOOKS_INIT_OPTIONS,\n+\tLANG_HOOKS_INITIALIZE_DIAGNOSTICS, LANG_HOOKS_HANDLE_OPTION,\n+\tLANG_HOOKS_HANDLE_FILENAME, LANG_HOOKS_MISSING_ARGUMENT,\n+\tLANG_HOOKS_POST_OPTIONS, LANG_HOOKS_GET_ALIAS_SET,\n+\tLANG_HOOKS_EXPAND_CONSTANT, LANG_HOOKS_EXPAND_EXPR,\n+\tLANG_HOOKS_EXPAND_DECL, LANG_HOOKS_PARSE_FILE,\n+\tLANG_HOOKS_DUP_LANG_SPECIFIC_DECL, LANG_HOOKS_TRUTHVALUE_CONVERSION,\n+\tLANG_HOOKS_SET_DECL_ASSEMBLER_NAME, LANG_HOOKS_MARK_ADDRESSABLE,\n+\tLANG_HOOKS_PRINT_STATISTICS, LANG_HOOKS_PRINT_XNODE,\n+\tLANG_HOOKS_PRINT_DECL, LANG_HOOKS_PRINT_TYPE,\n+\tLANG_HOOKS_PRINT_IDENTIFIER, LANG_HOOKS_PRINT_ERROR_FUNCTION,\n+\tLANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, LANG_HOOKS_WRITE_GLOBALS,\n+\tLANG_HOOKS_FUNCTION_INIT, LANG_HOOKS_FUNCTION_FINAL,\n+\tLANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P,\n+\tLANG_HOOKS_COMMON_ATTRIBUTE_TABLE, LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE,\n+\tLANG_HOOKS_ATTRIBUTE_TABLE, LANG_HOOKS_TREE_INLINING_WALK_SUBTREES,\n+\tLANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN,\n+\tLANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS,\n+\tLANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P, \n+\tLANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P,\n+\tLANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P,\n+\tLANG_HOOKS_TREE_DUMP_DUMP_TREE_FN,\n+\tLANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN, LANG_HOOKS_EXPR_SIZE,\n+\tLANG_HOOKS_CALLGRAPH_ANALYZE_EXPR,\n+\tLANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION, LANG_HOOKS_MAKE_TYPE,\n+\tLANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIZE,\n+\tLANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,\n+\tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE, LANG_HOOKS_INCOMPLETE_TYPE_ERROR,\n+\tLANG_HOOKS_TYPE_PROMOTES_TO, LANG_HOOKS_REGISTER_BUILTIN_TYPE,\n+\tLANG_HOOKS_GIMPLIFY_EXPR, LANG_HOOKS_FOLD_OBJ_TYPE_REF): Move\n+\thooks to cp-objcp-common.h.\n+\t(finish_file): New function.\n+\t* cp-objcp-common.c: New file.\n+\t* cp-objcp-common.h: New file.\n+\t* cp-tree.h (cp_finish_file): New prototype.\n+\t* decl.c: Do not include gtype-cp.h.\n+\t* decl2.c (finish_file): Rename to cp_finish_file.\n+\t\n 2004-08-31  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/17221"}, {"sha": "3e91bf9078076e1ab7eb3205df6dfffb63acc1bf", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=11bb4b2798ebb30c614f486d4c405a8f969f72c4", "patch": "@@ -81,7 +81,7 @@ CXX_AND_OBJCXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\\n  cp/class.o cp/decl2.o cp/error.o cp/lex.o cp/parser.o cp/ptree.o cp/rtti.o \\\n  cp/typeck.o cp/cvt.o cp/except.o cp/friend.o cp/init.o cp/method.o \\\n  cp/search.o cp/semantics.o cp/tree.o cp/repo.o cp/dump.o cp/optimize.o \\\n- cp/mangle.o cp/name-lookup.o cp/cxx-pretty-print.o \\\n+ cp/mangle.o cp/cp-objcp-common.o cp/name-lookup.o cp/cxx-pretty-print.o \\\n  cp/cp-gimplify.o tree-mudflap.o $(CXX_C_OBJS)\n \n # Language-specific object files for C++.\n@@ -224,14 +224,19 @@ CXX_PRETTY_PRINT_H = cp/cxx-pretty-print.h $(C_PRETTY_PRINT_H)\n \n cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) flags.h \\\n   c-pragma.h toplev.h output.h input.h cp/operators.def $(TM_P_H)\n-cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) $(TM_H) toplev.h langhooks.h \\\n-  $(LANGHOOKS_DEF_H) c-common.h $(CXX_PRETTY_PRINT_H) $(DIAGNOSTIC_H)\n+cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) $(TM_H) toplev.h debug.h langhooks.h \\\n+  $(LANGHOOKS_DEF_H) c-common.h gtype-cp.h $(CXX_PRETTY_PRINT_H) $(DIAGNOSTIC_H) \\\n+  cp/cp-objcp-common.h\n cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) flags.h cp/decl.h stack.h \\\n   output.h $(EXPR_H) except.h toplev.h $(HASHTAB_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H) tree-inline.h diagnostic.h c-pragma.h \\\n-  debug.h gt-cp-decl.h gtype-cp.h timevar.h $(TREE_FLOW_H)\n+  debug.h gt-cp-decl.h timevar.h $(TREE_FLOW_H)\n cp/decl2.o: cp/decl2.c $(CXX_TREE_H) $(TM_H) flags.h cp/decl.h $(EXPR_H) \\\n   output.h except.h toplev.h $(RTL_H) c-common.h gt-cp-decl2.h cgraph.h\n+cp/cp-objcp-common.o : cp/cp-objcp-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(TM_H) $(TREE_H) $(CXX_TREE_H) c-common.h toplev.h langhooks.h \\\n+  $(LANGHOOKS_DEF_H) $(DIAGNOSTIC_H) debug.h $(CXX_PRETTY_PRINT_H) \\\n+  cp/cp-objcp-common.h\n cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h output.h $(TM_P_H) \\\n    diagnostic.h gt-cp-typeck2.h\n cp/typeck.o: cp/typeck.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) $(EXPR_H) toplev.h \\"}, {"sha": "ac89be0f682654046879080ff793cb4f31380ad7", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 18, "deletions": 248, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=11bb4b2798ebb30c614f486d4c405a8f969f72c4", "patch": "@@ -31,146 +31,26 @@ Boston, MA 02111-1307, USA.  */\n #include \"langhooks-def.h\"\n #include \"diagnostic.h\"\n #include \"cxx-pretty-print.h\"\n+#include \"debug.h\"\n+#include \"cp-objcp-common.h\"\n \n enum c_language_kind c_language = clk_cxx;\n \n-static HOST_WIDE_INT cxx_get_alias_set (tree);\n-static bool cxx_warn_unused_global_decl (tree);\n-static tree cp_expr_size (tree);\n-static size_t cp_tree_size (enum tree_code);\n-static bool cp_var_mod_type_p (tree, tree);\n+/* Lang hooks common to C++ and ObjC++ are declared in cp/cp-objcp-common.h;\n+   consequently, there should be very few hooks below.  */\n+\n static int cxx_types_compatible_p (tree, tree);\n-static void cxx_initialize_diagnostics (diagnostic_context *);\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU C++\"\n-#undef LANG_HOOKS_TREE_SIZE\n-#define LANG_HOOKS_TREE_SIZE cp_tree_size\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT cxx_init\n-#undef LANG_HOOKS_FINISH\n-#define LANG_HOOKS_FINISH cxx_finish\n-#undef LANG_HOOKS_CLEAR_BINDING_STACK\n-#define LANG_HOOKS_CLEAR_BINDING_STACK pop_everything\n-#undef LANG_HOOKS_INIT_OPTIONS\n-#define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n-#undef LANG_HOOKS_INITIALIZE_DIAGNOSTICS\n-#define LANG_HOOKS_INITIALIZE_DIAGNOSTICS cxx_initialize_diagnostics\n-#undef LANG_HOOKS_HANDLE_OPTION\n-#define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n-#undef LANG_HOOKS_HANDLE_FILENAME\n-#define LANG_HOOKS_HANDLE_FILENAME c_common_handle_filename\n-#undef LANG_HOOKS_MISSING_ARGUMENT\n-#define LANG_HOOKS_MISSING_ARGUMENT c_common_missing_argument\n-#undef LANG_HOOKS_POST_OPTIONS\n-#define LANG_HOOKS_POST_OPTIONS c_common_post_options\n-#undef LANG_HOOKS_GET_ALIAS_SET\n-#define LANG_HOOKS_GET_ALIAS_SET cxx_get_alias_set\n-#undef LANG_HOOKS_EXPAND_CONSTANT\n-#define LANG_HOOKS_EXPAND_CONSTANT cplus_expand_constant\n-#undef LANG_HOOKS_EXPAND_EXPR\n-#define LANG_HOOKS_EXPAND_EXPR cxx_expand_expr\n-#undef LANG_HOOKS_EXPAND_DECL\n-#define LANG_HOOKS_EXPAND_DECL c_expand_decl\n-#undef LANG_HOOKS_PARSE_FILE\n-#define LANG_HOOKS_PARSE_FILE c_common_parse_file\n-#undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL\n-#define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL cxx_dup_lang_specific_decl\n-#undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n-#define LANG_HOOKS_TRUTHVALUE_CONVERSION c_common_truthvalue_conversion\n-#undef LANG_HOOKS_SET_DECL_ASSEMBLER_NAME\n-#define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME mangle_decl\n-#undef LANG_HOOKS_MARK_ADDRESSABLE\n-#define LANG_HOOKS_MARK_ADDRESSABLE cxx_mark_addressable\n-#undef LANG_HOOKS_PRINT_STATISTICS\n-#define LANG_HOOKS_PRINT_STATISTICS cxx_print_statistics\n-#undef LANG_HOOKS_PRINT_XNODE\n-#define LANG_HOOKS_PRINT_XNODE cxx_print_xnode\n-#undef LANG_HOOKS_PRINT_DECL\n-#define LANG_HOOKS_PRINT_DECL cxx_print_decl\n-#undef LANG_HOOKS_PRINT_TYPE\n-#define LANG_HOOKS_PRINT_TYPE cxx_print_type\n-#undef LANG_HOOKS_PRINT_IDENTIFIER\n-#define LANG_HOOKS_PRINT_IDENTIFIER cxx_print_identifier\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tcxx_printable_name\n-#undef LANG_HOOKS_PRINT_ERROR_FUNCTION\n-#define LANG_HOOKS_PRINT_ERROR_FUNCTION\tcxx_print_error_function\n-#undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL\n-#define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL cxx_warn_unused_global_decl\n-#undef LANG_HOOKS_WRITE_GLOBALS\n-#define LANG_HOOKS_WRITE_GLOBALS lhd_do_nothing\n-\n-\n-#undef LANG_HOOKS_FUNCTION_INIT\n-#define LANG_HOOKS_FUNCTION_INIT cxx_push_function_context\n-#undef LANG_HOOKS_FUNCTION_FINAL\n-#define LANG_HOOKS_FUNCTION_FINAL cxx_pop_function_context\n-#undef LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P\n-#define LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P cp_missing_noreturn_ok_p\n-\n-/* Attribute hooks.  */\n-#undef LANG_HOOKS_COMMON_ATTRIBUTE_TABLE\n-#define LANG_HOOKS_COMMON_ATTRIBUTE_TABLE c_common_attribute_table\n-#undef LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE\n-#define LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE c_common_format_attribute_table\n-#undef LANG_HOOKS_ATTRIBUTE_TABLE\n-#define LANG_HOOKS_ATTRIBUTE_TABLE cxx_attribute_table\n-\n-#undef LANG_HOOKS_TREE_INLINING_WALK_SUBTREES\n-#define LANG_HOOKS_TREE_INLINING_WALK_SUBTREES \\\n-  cp_walk_subtrees\n-#undef LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN\n-#define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n-  cp_cannot_inline_tree_fn\n-#undef LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS\n-#define LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS \\\n-  cp_add_pending_fn_decls\n-#undef LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P\n-#define LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P \\\n-  cp_auto_var_in_fn_p\n-#undef LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P\n-#define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P anon_aggr_type_p\n-#undef LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P\n-#define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P cp_var_mod_type_p\n-#undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n-#define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN cp_dump_tree\n-#undef LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN\n-#define LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN cp_type_quals\n-#undef LANG_HOOKS_EXPR_SIZE\n-#define LANG_HOOKS_EXPR_SIZE cp_expr_size\n-\n-#undef LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR\n-#define LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR cxx_callgraph_analyze_expr\n-#undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n-#define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION expand_body\n-\n-#undef LANG_HOOKS_MAKE_TYPE\n-#define LANG_HOOKS_MAKE_TYPE cxx_make_type\n-#undef LANG_HOOKS_TYPE_FOR_MODE\n-#define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n-#undef LANG_HOOKS_TYPE_FOR_SIZE\n-#define LANG_HOOKS_TYPE_FOR_SIZE c_common_type_for_size\n-#undef LANG_HOOKS_SIGNED_TYPE\n-#define LANG_HOOKS_SIGNED_TYPE c_common_signed_type\n-#undef LANG_HOOKS_UNSIGNED_TYPE\n-#define LANG_HOOKS_UNSIGNED_TYPE c_common_unsigned_type\n-#undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n-#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n-#undef LANG_HOOKS_INCOMPLETE_TYPE_ERROR\n-#define LANG_HOOKS_INCOMPLETE_TYPE_ERROR cxx_incomplete_type_error\n-#undef LANG_HOOKS_TYPE_PROMOTES_TO\n-#define LANG_HOOKS_TYPE_PROMOTES_TO cxx_type_promotes_to\n #undef LANG_HOOKS_TYPES_COMPATIBLE_P\n #define LANG_HOOKS_TYPES_COMPATIBLE_P cxx_types_compatible_p\n-#undef LANG_HOOKS_REGISTER_BUILTIN_TYPE\n-#define LANG_HOOKS_REGISTER_BUILTIN_TYPE c_register_builtin_type\n-#undef LANG_HOOKS_GIMPLIFY_EXPR\n-#define LANG_HOOKS_GIMPLIFY_EXPR cp_gimplify_expr\n-#undef LANG_HOOKS_FOLD_OBJ_TYPE_REF\n-#define LANG_HOOKS_FOLD_OBJ_TYPE_REF cp_fold_obj_type_ref\n \n-/* Each front end provides its own hooks, for toplev.c.  */\n+/* Each front end provides its own lang hook initializer.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n /* Tree code classes.  */\n@@ -214,104 +94,8 @@ const char *const tree_code_name[] = {\n };\n #undef DEFTREECODE\n \n-/* Special routine to get the alias set for C++.  */\n-\n-static HOST_WIDE_INT\n-cxx_get_alias_set (tree t)\n-{\n-  if (IS_FAKE_BASE_TYPE (t))\n-    /* The base variant of a type must be in the same alias set as the\n-       complete type.  */\n-    return get_alias_set (TYPE_CONTEXT (t));\n-\n-  /* Punt on PMFs until we canonicalize functions properly.  */\n-  if (TYPE_PTRMEMFUNC_P (t))\n-    return 0;\n-\n-  return c_common_get_alias_set (t);\n-}\n-\n-/* Called from check_global_declarations.  */\n-\n-static bool\n-cxx_warn_unused_global_decl (tree decl)\n-{\n-  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl))\n-    return false;\n-  if (DECL_IN_SYSTEM_HEADER (decl))\n-    return false;\n-\n-  /* Const variables take the place of #defines in C++.  */\n-  if (TREE_CODE (decl) == VAR_DECL && TREE_READONLY (decl))\n-    return false;\n-\n-  return true;\n-}\n-\n-/* Langhook for expr_size: Tell the backend that the value of an expression\n-   of non-POD class type does not include any tail padding; a derived class\n-   might have allocated something there.  */\n-\n-static tree\n-cp_expr_size (tree exp)\n-{\n-  if (CLASS_TYPE_P (TREE_TYPE (exp)))\n-    {\n-      /* The backend should not be interested in the size of an expression\n-\t of a type with both of these set; all copies of such types must go\n-\t through a constructor or assignment op.  */\n-      gcc_assert (!TYPE_HAS_COMPLEX_INIT_REF (TREE_TYPE (exp))\n-\t\t  || !TYPE_HAS_COMPLEX_ASSIGN_REF (TREE_TYPE (exp))\n-\t\t  /* But storing a CONSTRUCTOR isn't a copy.  */\n-\t\t  || TREE_CODE (exp) == CONSTRUCTOR);\n-      \n-      /* This would be wrong for a type with virtual bases, but they are\n-\t caught by the assert above.  */\n-      return (is_empty_class (TREE_TYPE (exp))\n-\t      ? size_zero_node\n-\t      : CLASSTYPE_SIZE_UNIT (TREE_TYPE (exp)));\n-    }\n-  else\n-    /* Use the default code.  */\n-    return lhd_expr_size (exp);\n-}\n-\n-/* Langhook for tree_size: determine size of our 'x' and 'c' nodes.  */\n-static size_t\n-cp_tree_size (enum tree_code code)\n-{\n-  switch (code)\n-    {\n-    case TINST_LEVEL:\t\treturn sizeof (struct tinst_level_s);\n-    case PTRMEM_CST: \t\treturn sizeof (struct ptrmem_cst);\n-    case BASELINK:\t\treturn sizeof (struct tree_baselink);\n-    case TEMPLATE_PARM_INDEX: \treturn sizeof (template_parm_index);\n-    case DEFAULT_ARG:\t\treturn sizeof (struct tree_default_arg);\n-    case OVERLOAD:\t\treturn sizeof (struct tree_overload);\n-    default:\n-      gcc_unreachable ();\n-    }\n-  /* NOTREACHED */\n-}\n-\n-/* Returns true if T is a variably modified type, in the sense of C99.\n-   FN is as passed to variably_modified_p.\n-   This routine needs only check cases that cannot be handled by the\n-   language-independent logic in tree.c.  */\n-\n-static bool\n-cp_var_mod_type_p (tree type, tree fn)\n-{\n-  /* If TYPE is a pointer-to-member, it is variably modified if either\n-     the class or the member are variably modified.  */\n-  if (TYPE_PTR_TO_MEMBER_P (type))\n-    return (variably_modified_type_p (TYPE_PTRMEM_CLASS_TYPE (type), fn)\n-\t    || variably_modified_type_p (TYPE_PTRMEM_POINTED_TO_TYPE (type),\n-\t\t\t\t\t fn));\n-\n-  /* All other types are not variably modified.  */\n-  return false;\n-}\n+/* Lang hook routines common to C++ and ObjC++ appear in cp/cp-objcp-common.c;\n+   there should be very few routines below.  */\n \n /* This compares two types for equivalence (\"compatible\" in C-based languages).\n    This routine should only return 1 if it is sure.  It should not be used\n@@ -332,35 +116,21 @@ static int cxx_types_compatible_p (tree x, tree y)\n   return 0;\n }\n \n-/* Construct a C++-aware pretty-printer for CONTEXT.  It is assumed\n-   that CONTEXT->printer is an already constructed basic pretty_printer.  */\n-static void\n-cxx_initialize_diagnostics (diagnostic_context *context)\n-{\n-  pretty_printer *base = context->printer;\n-  cxx_pretty_printer *pp = xmalloc (sizeof (cxx_pretty_printer));\n-  memcpy (pp_base (pp), base, sizeof (pretty_printer));\n-  pp_cxx_pretty_printer_init (pp);\n-  context->printer = (pretty_printer *) pp;\n+/* The following function does something real, but only in Objective-C++.  */\n \n-  /* It is safe to free this object because it was previously malloc()'d.  */\n-  free (base);\n-}\n-\n-/* Stubs to keep c-opts.c happy.  */\n-void\n-push_file_scope (void)\n+tree\n+objcp_tsubst_copy_and_build (tree t ATTRIBUTE_UNUSED, tree args ATTRIBUTE_UNUSED, \n+\t\t\t     tsubst_flags_t complain ATTRIBUTE_UNUSED, \n+\t\t\t     tree in_decl ATTRIBUTE_UNUSED,\n+\t\t\t     bool function_p ATTRIBUTE_UNUSED)\n {\n+  return NULL_TREE;\n }\n \n void\n-pop_file_scope (void)\n+finish_file (void)\n {\n+  cp_finish_file ();\n }\n \n-/* c-pragma.c needs to query whether a decl has extern \"C\" linkage.  */\n-bool\n-has_c_linkage (tree decl)\n-{\n-  return DECL_EXTERN_C_P (decl);\n-}\n+#include \"gtype-cp.h\""}, {"sha": "b8b8bad6a8607cd6da76dcfbd3ba6b5fe3db1b0a", "filename": "gcc/cp/cp-objcp-common.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=11bb4b2798ebb30c614f486d4c405a8f969f72c4", "patch": "@@ -0,0 +1,167 @@\n+/* Some code common to C++ and ObjC++ front ends.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Ziemowit Laski  <zlaski@apple.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"cp-tree.h\"\n+#include \"c-common.h\"\n+#include \"toplev.h\"\n+#include \"langhooks.h\"\n+#include \"langhooks-def.h\"\n+#include \"diagnostic.h\"\n+#include \"debug.h\"\n+#include \"cxx-pretty-print.h\"\n+#include \"cp-objcp-common.h\"\n+\n+/* Special routine to get the alias set for C++.  */\n+\n+HOST_WIDE_INT\n+cxx_get_alias_set (tree t)\n+{\n+  if (IS_FAKE_BASE_TYPE (t))\n+    /* The base variant of a type must be in the same alias set as the\n+       complete type.  */\n+    return get_alias_set (TYPE_CONTEXT (t));\n+\n+  /* Punt on PMFs until we canonicalize functions properly.  */\n+  if (TYPE_PTRMEMFUNC_P (t))\n+    return 0;\n+\n+  return c_common_get_alias_set (t);\n+}\n+\n+/* Called from check_global_declarations.  */\n+\n+bool\n+cxx_warn_unused_global_decl (tree decl)\n+{\n+  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl))\n+    return false;\n+  if (DECL_IN_SYSTEM_HEADER (decl))\n+    return false;\n+\n+  /* Const variables take the place of #defines in C++.  */\n+  if (TREE_CODE (decl) == VAR_DECL && TREE_READONLY (decl))\n+    return false;\n+\n+  return true;\n+}\n+\n+/* Langhook for expr_size: Tell the backend that the value of an expression\n+   of non-POD class type does not include any tail padding; a derived class\n+   might have allocated something there.  */\n+\n+tree\n+cp_expr_size (tree exp)\n+{\n+  if (CLASS_TYPE_P (TREE_TYPE (exp)))\n+    {\n+      /* The backend should not be interested in the size of an expression\n+\t of a type with both of these set; all copies of such types must go\n+\t through a constructor or assignment op.  */\n+      gcc_assert (!TYPE_HAS_COMPLEX_INIT_REF (TREE_TYPE (exp))\n+\t\t  || !TYPE_HAS_COMPLEX_ASSIGN_REF (TREE_TYPE (exp))\n+\t\t  /* But storing a CONSTRUCTOR isn't a copy.  */\n+\t\t  || TREE_CODE (exp) == CONSTRUCTOR);\n+      \n+      /* This would be wrong for a type with virtual bases, but they are\n+\t caught by the assert above.  */\n+      return (is_empty_class (TREE_TYPE (exp))\n+\t      ? size_zero_node\n+\t      : CLASSTYPE_SIZE_UNIT (TREE_TYPE (exp)));\n+    }\n+  else\n+    /* Use the default code.  */\n+    return lhd_expr_size (exp);\n+}\n+\n+/* Langhook for tree_size: determine size of our 'x' and 'c' nodes.  */\n+size_t\n+cp_tree_size (enum tree_code code)\n+{\n+  switch (code)\n+    {\n+    case TINST_LEVEL:\t\treturn sizeof (struct tinst_level_s);\n+    case PTRMEM_CST: \t\treturn sizeof (struct ptrmem_cst);\n+    case BASELINK:\t\treturn sizeof (struct tree_baselink);\n+    case TEMPLATE_PARM_INDEX: \treturn sizeof (template_parm_index);\n+    case DEFAULT_ARG:\t\treturn sizeof (struct tree_default_arg);\n+    case OVERLOAD:\t\treturn sizeof (struct tree_overload);\n+    default:\n+      gcc_unreachable ();\n+    }\n+  /* NOTREACHED */\n+}\n+\n+/* Returns true if T is a variably modified type, in the sense of C99.\n+   FN is as passed to variably_modified_p.\n+   This routine needs only check cases that cannot be handled by the\n+   language-independent logic in tree.c.  */\n+\n+bool\n+cp_var_mod_type_p (tree type, tree fn)\n+{\n+  /* If TYPE is a pointer-to-member, it is variably modified if either\n+     the class or the member are variably modified.  */\n+  if (TYPE_PTR_TO_MEMBER_P (type))\n+    return (variably_modified_type_p (TYPE_PTRMEM_CLASS_TYPE (type), fn)\n+\t    || variably_modified_type_p (TYPE_PTRMEM_POINTED_TO_TYPE (type),\n+\t\t\t\t\t fn));\n+\n+  /* All other types are not variably modified.  */\n+  return false;\n+}\n+\n+/* Construct a C++-aware pretty-printer for CONTEXT.  It is assumed\n+   that CONTEXT->printer is an already constructed basic pretty_printer.  */\n+void\n+cxx_initialize_diagnostics (diagnostic_context *context)\n+{\n+  pretty_printer *base = context->printer;\n+  cxx_pretty_printer *pp = xmalloc (sizeof (cxx_pretty_printer));\n+  memcpy (pp_base (pp), base, sizeof (pretty_printer));\n+  pp_cxx_pretty_printer_init (pp);\n+  context->printer = (pretty_printer *) pp;\n+\n+  /* It is safe to free this object because it was previously malloc()'d.  */\n+  free (base);\n+}\n+\n+/* Stubs to keep c-opts.c happy.  */\n+void\n+push_file_scope (void)\n+{\n+}\n+\n+void\n+pop_file_scope (void)\n+{\n+}\n+\n+/* c-pragma.c needs to query whether a decl has extern \"C\" linkage.  */\n+bool\n+has_c_linkage (tree decl)\n+{\n+  return DECL_EXTERN_C_P (decl);\n+}"}, {"sha": "1599080e896f9269ad976a9c92fc004c4138b3a3", "filename": "gcc/cp/cp-objcp-common.h", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=11bb4b2798ebb30c614f486d4c405a8f969f72c4", "patch": "@@ -0,0 +1,162 @@\n+/* Language hooks common to C++ and ObjC++ front ends.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Ziemowit Laski  <zlaski@apple.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#ifndef GCC_CP_OBJCP_COMMON\n+#define GCC_CP_OBJCP_COMMON\n+\n+/* In cp/cp-objcp-common.c.  */\n+\n+extern HOST_WIDE_INT cxx_get_alias_set (tree);\n+extern bool cxx_warn_unused_global_decl (tree);\n+extern tree cp_expr_size (tree);\n+extern size_t cp_tree_size (enum tree_code);\n+extern bool cp_var_mod_type_p (tree, tree);\n+extern void cxx_initialize_diagnostics (struct diagnostic_context *);\n+\n+/* In cp/cp-lang.c and objcp/objcp-lang.c.  */\n+\n+extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t, \n+\t\t\t\t\t tree, bool);\n+\n+/* Lang hooks that are shared between C++ and ObjC++ are defined here.  Hooks\n+   specific to C++ or ObjC++ go in cp/cp-lang.c and objcp/objcp-lang.c,\n+   respectively.  */\n+\n+#undef LANG_HOOKS_TREE_SIZE\n+#define LANG_HOOKS_TREE_SIZE cp_tree_size\n+#undef LANG_HOOKS_FINISH\n+#define LANG_HOOKS_FINISH cxx_finish\n+#undef LANG_HOOKS_CLEAR_BINDING_STACK\n+#define LANG_HOOKS_CLEAR_BINDING_STACK pop_everything\n+#undef LANG_HOOKS_INIT_OPTIONS\n+#define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n+#undef LANG_HOOKS_INITIALIZE_DIAGNOSTICS\n+#define LANG_HOOKS_INITIALIZE_DIAGNOSTICS cxx_initialize_diagnostics\n+#undef LANG_HOOKS_HANDLE_OPTION\n+#define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n+#undef LANG_HOOKS_HANDLE_FILENAME\n+#define LANG_HOOKS_HANDLE_FILENAME c_common_handle_filename\n+#undef LANG_HOOKS_MISSING_ARGUMENT\n+#define LANG_HOOKS_MISSING_ARGUMENT c_common_missing_argument\n+#undef LANG_HOOKS_POST_OPTIONS\n+#define LANG_HOOKS_POST_OPTIONS c_common_post_options\n+#undef LANG_HOOKS_GET_ALIAS_SET\n+#define LANG_HOOKS_GET_ALIAS_SET cxx_get_alias_set\n+#undef LANG_HOOKS_EXPAND_CONSTANT\n+#define LANG_HOOKS_EXPAND_CONSTANT cplus_expand_constant\n+#undef LANG_HOOKS_EXPAND_EXPR\n+#define LANG_HOOKS_EXPAND_EXPR cxx_expand_expr\n+#undef LANG_HOOKS_EXPAND_DECL\n+#define LANG_HOOKS_EXPAND_DECL c_expand_decl\n+#undef LANG_HOOKS_PARSE_FILE\n+#define LANG_HOOKS_PARSE_FILE c_common_parse_file\n+#undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL\n+#define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL cxx_dup_lang_specific_decl\n+#undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n+#define LANG_HOOKS_TRUTHVALUE_CONVERSION c_common_truthvalue_conversion\n+#undef LANG_HOOKS_SET_DECL_ASSEMBLER_NAME\n+#define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME mangle_decl\n+#undef LANG_HOOKS_MARK_ADDRESSABLE\n+#define LANG_HOOKS_MARK_ADDRESSABLE cxx_mark_addressable\n+#undef LANG_HOOKS_PRINT_STATISTICS\n+#define LANG_HOOKS_PRINT_STATISTICS cxx_print_statistics\n+#undef LANG_HOOKS_PRINT_XNODE\n+#define LANG_HOOKS_PRINT_XNODE cxx_print_xnode\n+#undef LANG_HOOKS_PRINT_DECL\n+#define LANG_HOOKS_PRINT_DECL cxx_print_decl\n+#undef LANG_HOOKS_PRINT_TYPE\n+#define LANG_HOOKS_PRINT_TYPE cxx_print_type\n+#undef LANG_HOOKS_PRINT_IDENTIFIER\n+#define LANG_HOOKS_PRINT_IDENTIFIER cxx_print_identifier\n+#undef LANG_HOOKS_PRINT_ERROR_FUNCTION\n+#define LANG_HOOKS_PRINT_ERROR_FUNCTION\tcxx_print_error_function\n+#undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL\n+#define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL cxx_warn_unused_global_decl\n+#undef LANG_HOOKS_WRITE_GLOBALS\n+#define LANG_HOOKS_WRITE_GLOBALS lhd_do_nothing\n+\n+#undef LANG_HOOKS_FUNCTION_INIT\n+#define LANG_HOOKS_FUNCTION_INIT cxx_push_function_context\n+#undef LANG_HOOKS_FUNCTION_FINAL\n+#define LANG_HOOKS_FUNCTION_FINAL cxx_pop_function_context\n+#undef LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P\n+#define LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P cp_missing_noreturn_ok_p\n+\n+/* Attribute hooks.  */\n+#undef LANG_HOOKS_COMMON_ATTRIBUTE_TABLE\n+#define LANG_HOOKS_COMMON_ATTRIBUTE_TABLE c_common_attribute_table\n+#undef LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE\n+#define LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE c_common_format_attribute_table\n+#undef LANG_HOOKS_ATTRIBUTE_TABLE\n+#define LANG_HOOKS_ATTRIBUTE_TABLE cxx_attribute_table\n+\n+#undef LANG_HOOKS_TREE_INLINING_WALK_SUBTREES\n+#define LANG_HOOKS_TREE_INLINING_WALK_SUBTREES \\\n+  cp_walk_subtrees\n+#undef LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN\n+#define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n+  cp_cannot_inline_tree_fn\n+#undef LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS\n+#define LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS \\\n+  cp_add_pending_fn_decls\n+#undef LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P\n+#define LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P \\\n+  cp_auto_var_in_fn_p\n+#undef LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P\n+#define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P anon_aggr_type_p\n+#undef LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P\n+#define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P cp_var_mod_type_p\n+#undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n+#define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN cp_dump_tree\n+#undef LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN\n+#define LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN cp_type_quals\n+#undef LANG_HOOKS_EXPR_SIZE\n+#define LANG_HOOKS_EXPR_SIZE cp_expr_size\n+\n+#undef LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR\n+#define LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR cxx_callgraph_analyze_expr\n+#undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n+#define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION expand_body\n+\n+#undef LANG_HOOKS_MAKE_TYPE\n+#define LANG_HOOKS_MAKE_TYPE cxx_make_type\n+#undef LANG_HOOKS_TYPE_FOR_MODE\n+#define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n+#undef LANG_HOOKS_TYPE_FOR_SIZE\n+#define LANG_HOOKS_TYPE_FOR_SIZE c_common_type_for_size\n+#undef LANG_HOOKS_SIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_TYPE c_common_signed_type\n+#undef LANG_HOOKS_UNSIGNED_TYPE\n+#define LANG_HOOKS_UNSIGNED_TYPE c_common_unsigned_type\n+#undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n+#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n+#undef LANG_HOOKS_INCOMPLETE_TYPE_ERROR\n+#define LANG_HOOKS_INCOMPLETE_TYPE_ERROR cxx_incomplete_type_error\n+#undef LANG_HOOKS_TYPE_PROMOTES_TO\n+#define LANG_HOOKS_TYPE_PROMOTES_TO cxx_type_promotes_to\n+#undef LANG_HOOKS_REGISTER_BUILTIN_TYPE\n+#define LANG_HOOKS_REGISTER_BUILTIN_TYPE c_register_builtin_type\n+#undef LANG_HOOKS_GIMPLIFY_EXPR\n+#define LANG_HOOKS_GIMPLIFY_EXPR cp_gimplify_expr\n+#undef LANG_HOOKS_FOLD_OBJ_TYPE_REF\n+#define LANG_HOOKS_FOLD_OBJ_TYPE_REF cp_fold_obj_type_ref\n+\n+#endif /* GCC_CP_OBJCP_COMMON */"}, {"sha": "8267f725139699588bd9392e187f83b99e602ead", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=11bb4b2798ebb30c614f486d4c405a8f969f72c4", "patch": "@@ -3815,6 +3815,7 @@ extern tree groktypefield\t\t\t(tree, tree);\n extern void cplus_decl_attributes (tree *, tree, int);\n extern void finish_anon_union (tree);\n extern tree finish_table (tree, tree, tree, int);\n+extern void cp_finish_file (void);\n extern tree coerce_new_type (tree);\n extern tree coerce_delete_type (tree);\n extern void comdat_linkage (tree);"}, {"sha": "55db551001b9f65f93ec665cdaab37e6464c9e3c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=11bb4b2798ebb30c614f486d4c405a8f969f72c4", "patch": "@@ -10834,4 +10834,3 @@ cp_missing_noreturn_ok_p (tree decl)\n }\n \n #include \"gt-cp-decl.h\"\n-#include \"gtype-cp.h\""}, {"sha": "33a9ef52243b64377e276deb3a3cebc56f011a4c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11bb4b2798ebb30c614f486d4c405a8f969f72c4/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=11bb4b2798ebb30c614f486d4c405a8f969f72c4", "patch": "@@ -1399,7 +1399,7 @@ maybe_make_one_only (tree decl)\n   if (! flag_weak)\n     return;\n \n-  /* We can't set DECL_COMDAT on functions, or finish_file will think\n+  /* We can't set DECL_COMDAT on functions, or cp_finish_file will think\n      we can get away with not emitting them if they aren't used.  We need\n      to for variables so that cp_finish_decl will update their linkage,\n      because their DECL_INITIAL may not have been set properly yet.  */\n@@ -2709,7 +2709,7 @@ cxx_callgraph_analyze_expr (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n    first, since that way we only need to reverse the decls once.  */\n \n void\n-finish_file (void)\n+cp_finish_file (void)\n {\n   tree vars;\n   bool reconsider;"}]}