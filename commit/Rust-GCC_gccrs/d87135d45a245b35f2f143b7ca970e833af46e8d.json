{"sha": "d87135d45a245b35f2f143b7ca970e833af46e8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg3MTM1ZDQ1YTI0NWIzNWYyZjE0M2I3Y2E5NzBlODMzYWY0NmU4ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-12-01T16:29:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-12-01T16:29:22Z"}, "message": "stl_tempbuf.h (__get_temporary_buffer): Fold in get_temporary_buffer.\n\n2007-12-01  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_tempbuf.h (__get_temporary_buffer): Fold\n\tin get_temporary_buffer.\n\nFrom-SVN: r130557", "tree": {"sha": "7a24477fe94ebb813cf7666f201cc8f42209b0e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a24477fe94ebb813cf7666f201cc8f42209b0e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d87135d45a245b35f2f143b7ca970e833af46e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87135d45a245b35f2f143b7ca970e833af46e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d87135d45a245b35f2f143b7ca970e833af46e8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87135d45a245b35f2f143b7ca970e833af46e8d/comments", "author": null, "committer": null, "parents": [{"sha": "353301145bc799346eb4349c68c3e043b08c28cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353301145bc799346eb4349c68c3e043b08c28cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/353301145bc799346eb4349c68c3e043b08c28cc"}], "stats": {"total": 50, "additions": 22, "deletions": 28}, "files": [{"sha": "e5dc1f9b775accd6db670eaef68da4ef7cadcf04", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87135d45a245b35f2f143b7ca970e833af46e8d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87135d45a245b35f2f143b7ca970e833af46e8d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d87135d45a245b35f2f143b7ca970e833af46e8d", "patch": "@@ -1,6 +1,11 @@\n+2007-12-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_tempbuf.h (__get_temporary_buffer): Fold\n+\tin get_temporary_buffer.\n+\n 2007-11-29  Andris Pavenis <andris.pavenis@iki.fi>\n \n-    \t* src/Makefile.am: Use separate vpath lines for each path.\n+\t* src/Makefile.am: Use separate vpath lines for each path.\n \n 2007-11-28  Johannes Singler  <singler@ira.uka.de>\n "}, {"sha": "3a22fab061527586909b5e4bd9d59b5e7a480ace", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87135d45a245b35f2f143b7ca970e833af46e8d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87135d45a245b35f2f143b7ca970e833af46e8d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=d87135d45a245b35f2f143b7ca970e833af46e8d", "patch": "@@ -69,14 +69,25 @@\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n-   *  @if maint\n-   *  This is a helper function.  The unused second parameter exists to\n-   *  permit the real get_temporary_buffer to use template parameter deduction.\n-   *  @endif\n+   *  @brief Allocates a temporary buffer.\n+   *  @param  len  The number of objects of type Tp.\n+   *  @return See full description.\n+   *\n+   *  Reinventing the wheel, but this time with prettier spokes!\n+   *\n+   *  This function tries to obtain storage for @c len adjacent Tp\n+   *  objects.  The objects themselves are not constructed, of course.\n+   *  A pair<> is returned containing \"the buffer s address and\n+   *  capacity (in the units of sizeof(Tp)), or a pair of 0 values if\n+   *  no storage can be obtained.\"  Note that the capacity obtained\n+   *  may be less than that requested if the memory is unavailable;\n+   *  you should compare len with the .second return value.\n+   *\n+   * Provides the nothrow exception guarantee.\n    */\n   template<typename _Tp>\n     pair<_Tp*, ptrdiff_t>\n-    __get_temporary_buffer(ptrdiff_t __len, _Tp*)\n+    get_temporary_buffer(ptrdiff_t __len)\n     {\n       const ptrdiff_t __max =\n \t__gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);\n@@ -94,28 +105,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);\n     }\n \n-  /**\n-   *  @brief Allocates a temporary buffer.\n-   *  @param  len  The number of objects of type Tp.\n-   *  @return See full description.\n-   *\n-   *  Reinventing the wheel, but this time with prettier spokes!\n-   *\n-   *  This function tries to obtain storage for @c len adjacent Tp\n-   *  objects.  The objects themselves are not constructed, of course.\n-   *  A pair<> is returned containing \"the buffer s address and\n-   *  capacity (in the units of sizeof(Tp)), or a pair of 0 values if\n-   *  no storage can be obtained.\"  Note that the capacity obtained\n-   *  may be less than that requested if the memory is unavailable;\n-   *  you should compare len with the .second return value.\n-   *\n-   * Provides the nothrow exception guarantee.\n-   */\n-  template<typename _Tp>\n-    inline pair<_Tp*, ptrdiff_t>\n-    get_temporary_buffer(ptrdiff_t __len)\n-    { return std::__get_temporary_buffer(__len, static_cast<_Tp*>(0)); }\n-\n   /**\n    *  @brief The companion to get_temporary_buffer().\n    *  @param  p  A buffer previously allocated by get_temporary_buffer."}]}