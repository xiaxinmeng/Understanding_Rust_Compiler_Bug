{"sha": "8d0b2b33748014ee57973c1d7bc9fd7706bb3da9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQwYjJiMzM3NDgwMTRlZTU3OTczYzFkN2JjOWZkNzcwNmJiM2RhOQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-07-25T14:02:52Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-07-25T14:44:46Z"}, "message": "amdgcn: Enable TImode\n\nThis enables types __int128 et al for move, add, subtract, and logical\noperations.  At least shift, rotate, multiple, divide, and modulus are broken\nso we can expect some test failures.\n\nThis is required now because libgomp no longer builds without __int128.\n\nAn additional patch will be required to unbreak the libgfortran build.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn.c (gcn_scalar_mode_supported_p): New function.\n\t(TARGET_SCALAR_MODE_SUPPORTED_P): New define.", "tree": {"sha": "8c190c90f75d3eea393f24722b1212ef27a7d3ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c190c90f75d3eea393f24722b1212ef27a7d3ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d0b2b33748014ee57973c1d7bc9fd7706bb3da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0b2b33748014ee57973c1d7bc9fd7706bb3da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d0b2b33748014ee57973c1d7bc9fd7706bb3da9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0b2b33748014ee57973c1d7bc9fd7706bb3da9/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53256ee3d582162d0ef914c068b58a02aa20c466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53256ee3d582162d0ef914c068b58a02aa20c466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53256ee3d582162d0ef914c068b58a02aa20c466"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "8b3c4544dd536ad0ec17290d2d3b65df99eeb84e", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0b2b33748014ee57973c1d7bc9fd7706bb3da9/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0b2b33748014ee57973c1d7bc9fd7706bb3da9/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=8d0b2b33748014ee57973c1d7bc9fd7706bb3da9", "patch": "@@ -350,6 +350,19 @@ static const struct attribute_spec gcn_attribute_table[] = {\n /* }}}  */\n /* {{{ Registers and modes.  */\n \n+/* Implement TARGET_SCALAR_MODE_SUPPORTED_P.  */\n+\n+bool\n+gcn_scalar_mode_supported_p (scalar_mode mode)\n+{\n+  return (mode == BImode\n+\t  || mode == QImode\n+\t  || mode == HImode /* || mode == HFmode  */\n+\t  || mode == SImode || mode == SFmode\n+\t  || mode == DImode || mode == DFmode\n+\t  || mode == TImode);\n+}\n+\n /* Implement TARGET_CLASS_MAX_NREGS.\n  \n    Return the number of hard registers needed to hold a value of MODE in\n@@ -6331,6 +6344,8 @@ gcn_dwarf_register_span (rtx rtl)\n #define TARGET_SECONDARY_RELOAD gcn_secondary_reload\n #undef  TARGET_SECTION_TYPE_FLAGS\n #define TARGET_SECTION_TYPE_FLAGS gcn_section_type_flags\n+#undef  TARGET_SCALAR_MODE_SUPPORTED_P\n+#define TARGET_SCALAR_MODE_SUPPORTED_P gcn_scalar_mode_supported_p\n #undef  TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P\n #define TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P \\\n   gcn_small_register_classes_for_mode_p"}]}