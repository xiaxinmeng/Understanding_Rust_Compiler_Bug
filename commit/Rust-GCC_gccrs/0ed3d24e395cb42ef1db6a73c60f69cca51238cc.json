{"sha": "0ed3d24e395cb42ef1db6a73c60f69cca51238cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVkM2QyNGUzOTVjYjQyZWYxZGI2YTczYzYwZjY5Y2NhNTEyMzhjYw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2012-12-03T16:11:21Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2012-12-03T16:11:21Z"}, "message": "re PR middle-end/55401 (uninstrumented path in TM clones are still instrumented)\n\n\tPR middle-end/55401\n\t* trans-mem.c (get_tm_region_blocks): Exclude uninstrumented\n\tblocks from vector if requested.\n\t(collect_bb2reg): Pass new argument to\n\tget_tm_region_blocks.\n\t(get_bb_regions_instrumented): Add INCLUDE_UNINSTRUMENTED_P\n\targument, and pass it to expand_regions.\n\t(execute_tm_mark): Pass new argument to\n\tget_bb_regions_instrumented.\n\t(execute_tm_edges): Same.\n\nFrom-SVN: r194099", "tree": {"sha": "58fa9f23494cb6c480e17f1f381819513c57e5fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58fa9f23494cb6c480e17f1f381819513c57e5fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ed3d24e395cb42ef1db6a73c60f69cca51238cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed3d24e395cb42ef1db6a73c60f69cca51238cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ed3d24e395cb42ef1db6a73c60f69cca51238cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed3d24e395cb42ef1db6a73c60f69cca51238cc/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3692e025bfb3c96c2ad4dd681edb112ae401c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3692e025bfb3c96c2ad4dd681edb112ae401c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3692e025bfb3c96c2ad4dd681edb112ae401c77"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "84833f4352c6af7bab7b8623e01d937fca0f4f71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed3d24e395cb42ef1db6a73c60f69cca51238cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed3d24e395cb42ef1db6a73c60f69cca51238cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ed3d24e395cb42ef1db6a73c60f69cca51238cc", "patch": "@@ -1,3 +1,16 @@\n+2012-12-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR middle-end/55401\n+\t* trans-mem.c (get_tm_region_blocks): Exclude uninstrumented\n+\tblocks from vector if requested.\n+\t(collect_bb2reg): Pass new argument to\n+\tget_tm_region_blocks.\n+\t(get_bb_regions_instrumented): Add INCLUDE_UNINSTRUMENTED_P\n+\targument, and pass it to expand_regions.\n+\t(execute_tm_mark): Pass new argument to\n+\tget_bb_regions_instrumented.\n+\t(execute_tm_edges): Same.\n+\n 2012-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* asan.c (instrument_mem_region_access): Don't instrument"}, {"sha": "1ac7d975715decbbd36de4ea6fb7e0f327519b2e", "filename": "gcc/testsuite/gcc.dg/tm/pr55401.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed3d24e395cb42ef1db6a73c60f69cca51238cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpr55401.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed3d24e395cb42ef1db6a73c60f69cca51238cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpr55401.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpr55401.c?ref=0ed3d24e395cb42ef1db6a73c60f69cca51238cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgnu-tm -O0 -fdump-tree-optimized\" } */\n+\n+int george;\n+int ringo;\n+\n+__attribute__((transaction_callable))\n+void foo()\n+{\n+  ringo=666;\n+  __transaction_atomic {\n+      george=999;\n+  }\n+}\n+\n+/* There should only be 2 instrumented writes to GEORGE: one in FOO,\n+   and one in the transactional clone to FOO.  There should NOT be\n+   more than one instrumented write to GEORGE in the clone of\n+   FOO.  */\n+/* { dg-final { scan-tree-dump-times \"ITM_WU\\[0-9\\] \\\\(&george,\" 2 \"optimized\" } } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "8762ad358bd9ece85025559404cd2189de163777", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed3d24e395cb42ef1db6a73c60f69cca51238cc/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed3d24e395cb42ef1db6a73c60f69cca51238cc/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=0ed3d24e395cb42ef1db6a73c60f69cca51238cc", "patch": "@@ -2394,14 +2394,19 @@ expand_block_tm (struct tm_region *region, basic_block bb)\n /* Return the list of basic-blocks in REGION.\n \n    STOP_AT_IRREVOCABLE_P is true if caller is uninterested in blocks\n-   following a TM_IRREVOCABLE call.  */\n+   following a TM_IRREVOCABLE call.\n+\n+   INCLUDE_UNINSTRUMENTED_P is TRUE if we should include the\n+   uninstrumented code path blocks in the list of basic blocks\n+   returned, false otherwise.  */\n \n static vec<basic_block> \n get_tm_region_blocks (basic_block entry_block,\n \t\t      bitmap exit_blocks,\n \t\t      bitmap irr_blocks,\n \t\t      bitmap all_region_blocks,\n-\t\t      bool stop_at_irrevocable_p)\n+\t\t      bool stop_at_irrevocable_p,\n+\t\t      bool include_uninstrumented_p = true)\n {\n   vec<basic_block> bbs = vNULL;\n   unsigned i;\n@@ -2427,7 +2432,9 @@ get_tm_region_blocks (basic_block entry_block,\n \tcontinue;\n \n       FOR_EACH_EDGE (e, ei, bb->succs)\n-\tif (!bitmap_bit_p (visited_blocks, e->dest->index))\n+\tif ((include_uninstrumented_p\n+\t     || !(e->flags & EDGE_TM_UNINSTRUMENTED))\n+\t    && !bitmap_bit_p (visited_blocks, e->dest->index))\n \t  {\n \t    bitmap_set_bit (visited_blocks, e->dest->index);\n \t    bbs.safe_push (e->dest);\n@@ -2442,11 +2449,19 @@ get_tm_region_blocks (basic_block entry_block,\n   return bbs;\n }\n \n+// Callback data for collect_bb2reg.\n+struct bb2reg_stuff\n+{\n+  vec<tm_region_p> *bb2reg;\n+  bool include_uninstrumented_p;\n+};\n+\n // Callback for expand_regions, collect innermost region data for each bb.\n static void *\n collect_bb2reg (struct tm_region *region, void *data)\n {\n-  vec<tm_region_p> *bb2reg = (vec<tm_region_p> *) data;\n+  struct bb2reg_stuff *stuff = (struct bb2reg_stuff *)data;\n+  vec<tm_region_p> *bb2reg = stuff->bb2reg;\n   vec<basic_block> queue;\n   unsigned int i;\n   basic_block bb;\n@@ -2455,7 +2470,8 @@ collect_bb2reg (struct tm_region *region, void *data)\n \t\t\t\tregion->exit_blocks,\n \t\t\t\tregion->irr_blocks,\n \t\t\t\tNULL,\n-\t\t\t\t/*stop_at_irr_p=*/true);\n+\t\t\t\t/*stop_at_irr_p=*/true,\n+\t\t\t\tstuff->include_uninstrumented_p);\n \n   // We expect expand_region to perform a post-order traversal of the region\n   // tree.  Therefore the last region seen for any bb is the innermost.\n@@ -2468,7 +2484,8 @@ collect_bb2reg (struct tm_region *region, void *data)\n \n // Returns a vector, indexed by BB->INDEX, of the innermost tm_region to\n // which a basic block belongs.  Note that we only consider the instrumented\n-// code paths for the region; the uninstrumented code paths are ignored.\n+// code paths for the region; the uninstrumented code paths are ignored if\n+// INCLUDE_UNINSTRUMENTED_P is false.\n //\n // ??? This data is very similar to the bb_regions array that is collected\n // during tm_region_init.  Or, rather, this data is similar to what could\n@@ -2489,14 +2506,18 @@ collect_bb2reg (struct tm_region *region, void *data)\n // only known instance of this block sharing.\n \n static vec<tm_region_p>\n-get_bb_regions_instrumented (bool traverse_clones)\n+get_bb_regions_instrumented (bool traverse_clones,\n+\t\t\t     bool include_uninstrumented_p)\n {\n   unsigned n = last_basic_block;\n+  struct bb2reg_stuff stuff;\n   vec<tm_region_p> ret;\n \n   ret.create (n);\n   ret.safe_grow_cleared (n);\n-  expand_regions (all_tm_regions, collect_bb2reg, &ret, traverse_clones);\n+  stuff.bb2reg = &ret;\n+  stuff.include_uninstrumented_p = include_uninstrumented_p;\n+  expand_regions (all_tm_regions, collect_bb2reg, &stuff, traverse_clones);\n \n   return ret;\n }\n@@ -2830,7 +2851,8 @@ execute_tm_mark (void)\n   tm_log_init ();\n \n   vec<tm_region_p> bb_regions\n-    = get_bb_regions_instrumented (/*traverse_clones=*/true);\n+    = get_bb_regions_instrumented (/*traverse_clones=*/true,\n+\t\t\t\t   /*include_uninstrumented_p=*/false);\n   struct tm_region *r;\n   unsigned i;\n \n@@ -3004,7 +3026,8 @@ static unsigned int\n execute_tm_edges (void)\n {\n   vec<tm_region_p> bb_regions\n-    = get_bb_regions_instrumented (/*traverse_clones=*/false);\n+    = get_bb_regions_instrumented (/*traverse_clones=*/false,\n+\t\t\t\t   /*include_uninstrumented_p=*/true);\n   struct tm_region *r;\n   unsigned i;\n "}]}