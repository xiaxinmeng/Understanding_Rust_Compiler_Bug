{"sha": "c66ce1f5b7295de1c4d43b3fdb702cf038084e7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY2Y2UxZjViNzI5NWRlMWM0ZDQzYjNmZGI3MDJjZjAzODA4NGU3Yw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-12T17:49:16Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-12T17:49:16Z"}, "message": "testsuite_flags.in: New, simplified interface.\n\n\n2001-05-11   Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite_flags.in: New, simplified interface.\n\t* testsuite/lib/libstdc++-v3-dg.exp: New test harness.\n\t* testsuite/libstdc++-v3.dg: Add.\n\t* testsuite/libstdc++-v3.dg/dg.exp: Add.\n\nFrom-SVN: r41999", "tree": {"sha": "5dc49aa2c51e937a2ddeda279b2c34f7599736da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dc49aa2c51e937a2ddeda279b2c34f7599736da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c66ce1f5b7295de1c4d43b3fdb702cf038084e7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c66ce1f5b7295de1c4d43b3fdb702cf038084e7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c66ce1f5b7295de1c4d43b3fdb702cf038084e7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c66ce1f5b7295de1c4d43b3fdb702cf038084e7c/comments", "author": null, "committer": null, "parents": [{"sha": "70769376dbb084d23630ddac9fbeb07f0ee2d204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70769376dbb084d23630ddac9fbeb07f0ee2d204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70769376dbb084d23630ddac9fbeb07f0ee2d204"}], "stats": {"total": 179, "additions": 179, "deletions": 0}, "files": [{"sha": "8f2f83266aa6bf6904ea3bf1986c6f964cb2ca12", "filename": "libstdc++-v3/testsuite/lib/libstdc++-v3-dg.exp", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66ce1f5b7295de1c4d43b3fdb702cf038084e7c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66ce1f5b7295de1c4d43b3fdb702cf038084e7c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp?ref=c66ce1f5b7295de1c4d43b3fdb702cf038084e7c", "patch": "@@ -0,0 +1,132 @@\n+#   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Define libstdc++-v3 callbacks for dg.exp.\n+\n+load_lib dg.exp\n+load_lib libgloss.exp\n+\n+proc libstdc++-v3-init { args } {\n+    global srcdir\n+    global outdir\n+    global blddir\n+    global cxx\n+    global includes\n+    global cxxflags\n+\n+    set blddir   [lookfor_file $outdir libstdc++-v3]\n+    set cxx \t [exec sh ${blddir}/testsuite_flags --build-cxx]\n+    set cxxflags [exec sh ${blddir}/testsuite_flags --cxxflags]\n+    set includes [exec sh ${blddir}/testsuite_flags --build-includes]\n+\n+    # By default, we assume we want to run program images.\n+    global dg-do-what-default\n+    set dg-do-what-default run\n+\n+    # Copy any required data files.\n+    foreach tst [glob -nocomplain \"$srcdir/*/*.tst\"] {\n+\tfile copy -force $tst $outdir\n+    }\n+    foreach txt [glob -nocomplain \"$srcdir/*/*.txt\"] {\n+\tfile copy -force $txt $outdir\n+    }\n+}\n+\n+proc libstdc++-v3-dg-test { prog do_what extra_tool_flags } {\n+    # Set up the compiler flags, based on what we're going to do.\n+\n+    switch $do_what {\n+\t\"preprocess\" {\n+\t    set compile_type \"preprocess\"\n+\t    set output_file \"[file rootname [file tail $prog]].i\"\n+\t}\n+\t\"compile\" {\n+\t    set compile_type \"assembly\"\n+\t    set output_file \"[file rootname [file tail $prog]].s\"\n+\t}\n+\t\"assemble\" {\n+\t    set compile_type \"object\"\n+\t    set output_file \"[file rootname [file tail $prog]].o\"\n+\t}\n+\t\"link\" {\n+\t    set compile_type \"executable\"\n+\t    set output_file \"a.out\"\n+\t}\n+\t\"run\" {\n+\t    set compile_type \"executable\"\n+\t    # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n+\t    # Should this be handled elsewhere?\n+\t    # YES.\n+\t    set output_file \"./a.out\"\n+\t    # This is the only place where we care if an executable was\n+\t    # created or not.  If it was, dg.exp will try to run it.\n+\t    remote_file build delete $output_file;\n+\t}\n+\tdefault {\n+\t    perror \"$do_what: not a valid dg-do keyword\"\n+\t    return \"\"\n+\t}\n+    }\n+    set options \"\"\n+    if { $extra_tool_flags != \"\" } {\n+\tlappend options \"additional_flags=$extra_tool_flags\"\n+    }\n+\n+    set comp_output [libstdc++-v3_target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options];\n+\n+    return [list $comp_output $output_file]\n+}\n+\n+\n+proc libstdc++-v3_target_compile { source dest type options } {\n+    global gluefile \n+    global wrap_flags\n+    global cxx\n+    global cxxflags\n+    global includes\n+\n+    if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n+    }\n+\n+    set cxx_final $cxx\n+    set cxxlibglossflags  [libgloss_link_flags]\n+    set cxx_final [concat $cxx_final $cxxlibglossflags]\n+    set cxx_final [concat $cxx_final $cxxflags]\n+    set cxx_final [concat $cxx_final $includes]\n+    lappend options \"compiler=$cxx_final\";\n+\n+    return [target_compile $source $dest $type $options]\n+}\n+\n+\n+proc libstdc++-v3_exit { args } {\n+    global gluefile;\n+\n+    if [info exists gluefile] {\n+\tfile_on_build delete $gluefile;\n+\tunset gluefile;\n+    }\n+}\n+\n+proc libstdc++-v3-finish { } {\n+    # do hacks to remove any check-DEJAGNU errors\n+set exit_status 0\n+set status 0\n+#return 0\n+}\n+"}, {"sha": "c5c22c3c28773cc3b6b8d900786b02eb14523c4d", "filename": "libstdc++-v3/testsuite/libstdc++-v3.dg/dg.exp", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66ce1f5b7295de1c4d43b3fdb702cf038084e7c/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66ce1f5b7295de1c4d43b3fdb702cf038084e7c/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp?ref=c66ce1f5b7295de1c4d43b3fdb702cf038084e7c", "patch": "@@ -0,0 +1,47 @@\n+#   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# libstdc++-v3 testsuite that uses the 'dg.exp' driver.\n+\n+# Load support procs.\n+load_lib libstdc++-v3-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CXXFLAGS\n+if ![info exists DEFAULT_CXXFLAGS] then {\n+    set DEFAULT_CXXFLAGS \" -DDEBUG_ASSERT\"\n+}\n+\n+# Initialize 'dg' last or dejagnu exits with an error...\n+libstdc++-v3-init\n+dg-init\n+\n+\n+## Set ulimits.  \n+## This should normally be handled on a per-test basis through @xxx@-keywords.\n+## The following limit is expressed in kilobytes.  For history, have a \n+## look at http://gcc.gnu.org/ml/libstdc++/2000-10/msg00029.html\n+set maximum-memory-usage 16384\n+set shell-ulimit-command ulimit\n+remote_exec host ${shell-ulimit-command} \"-d ${maximum-memory-usage}\"\n+remote_exec host ${shell-ulimit-command} \"-v ${maximum-memory-usage}\"\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/*/*.cc]] \\\n+        \"\" $DEFAULT_CXXFLAGS\n+\n+# All done.\n+dg-finish"}]}