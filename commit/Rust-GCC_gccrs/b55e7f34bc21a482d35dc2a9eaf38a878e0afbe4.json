{"sha": "b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU1ZTdmMzRiYzIxYTQ4MmQzNWRjMmE5ZWFmMzhhODc4ZTBhZmJlNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-09-29T06:52:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-09-29T06:52:04Z"}, "message": "decl.c (gnat_to_gnu_entity): Do not set \"const\" flag on \"pure\" Ada subprograms if SJLJ exceptions are used.\n\n\t* decl.c (gnat_to_gnu_entity) <E_Procedure>: Do not set \"const\" flag\n\ton \"pure\" Ada subprograms if SJLJ exceptions are used.\n\t* trans.c (Handled_Sequence_Of_Statements_to_gnu): Set TREE_NO_WARNING\n\ton the declaration node of JMPBUF_SAVE.\n\t* utils.c (init_gigi_decls): Set DECL_IS_PURE on the declaration nodes\n\tof Get_Jmpbuf_Address_Soft and Get_GNAT_Exception.\n\t* utils2.c (build_call_0_expr): Do not set TREE_SIDE_EFFECTS.\n\nFrom-SVN: r117299", "tree": {"sha": "d53b9b08a5977db3599ce6576e9b27bd13562c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d53b9b08a5977db3599ce6576e9b27bd13562c90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4/comments", "author": null, "committer": null, "parents": [{"sha": "4f6c213142e5ce6f5ee17ef5d0f1cb85cd0ff573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6c213142e5ce6f5ee17ef5d0f1cb85cd0ff573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6c213142e5ce6f5ee17ef5d0f1cb85cd0ff573"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "d078714d1ae0eb06eda0e743ee42c26ecff9e677", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4", "patch": "@@ -1,3 +1,13 @@\n+2006-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (gnat_to_gnu_entity) <E_Procedure>: Do not set \"const\" flag\n+\ton \"pure\" Ada subprograms if SJLJ exceptions are used.\n+\t* trans.c (Handled_Sequence_Of_Statements_to_gnu): Set TREE_NO_WARNING\n+\ton the declaration node of JMPBUF_SAVE.\n+\t* utils.c (init_gigi_decls): Set DECL_IS_PURE on the declaration nodes\n+\tof Get_Jmpbuf_Address_Soft and Get_GNAT_Exception.\n+\t* utils2.c (build_call_0_expr): Do not set TREE_SIDE_EFFECTS.\n+\n 2006-08-20  Laurent GUERBY  <laurent@guerby.net>\n \n         PR ada/28716"}, {"sha": "fac6f2f06e3c73defedf6044a4a0b0f3cb478ed7", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4", "patch": "@@ -3768,11 +3768,20 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tif (TREE_CODE (gnu_return_type) == VOID_TYPE)\n \t  pure_flag = false;\n \n+\t/* The semantics of \"pure\" in Ada essentially matches that of \"const\"\n+\t   in the back-end.  In particular, both properties are orthogonal to\n+\t   the \"nothrow\" property.  But this is true only if the EH circuitry\n+\t   is explicit in the internal representation of the back-end.  If we\n+\t   are to completely hide the EH circuitry from it, we need to declare\n+\t   that calls to pure Ada subprograms that can throw have side effects\n+\t   since they can trigger an \"abnormal\" transfer of control flow; thus\n+\t   they can be neither \"const\" nor \"pure\" in the back-end sense.  */\n \tgnu_type\n \t  = build_qualified_type (gnu_type,\n-\t\t\t\t  (TYPE_QUALS (gnu_type)\n-\t\t\t\t   | (TYPE_QUAL_CONST * pure_flag)\n-\t\t\t\t   | (TYPE_QUAL_VOLATILE * volatile_flag)));\n+\t\t\t\t  TYPE_QUALS (gnu_type)\n+\t\t\t\t  | (Exception_Mechanism == Back_End_Exceptions\n+\t\t\t\t     ? TYPE_QUAL_CONST * pure_flag : 0)\n+\t\t\t\t  | (TYPE_QUAL_VOLATILE * volatile_flag));\n \n \tSloc_to_locus (Sloc (gnat_entity), &input_location);\n \n@@ -3841,6 +3850,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t\t\t    inline_flag, public_flag,\n \t\t\t\t\t    extern_flag, attr_list,\n \t\t\t\t\t    gnat_entity);\n+\n \t    DECL_STUBBED_P (gnu_decl)\n \t      = Convention (gnat_entity) == Convention_Stubbed;\n \t  }"}, {"sha": "fe820bf0ccffed47bdb23d7811220ca22c0ca731", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4", "patch": "@@ -2167,6 +2167,11 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n \t\t\t\t\t  build_call_0_expr (get_jmpbuf_decl),\n \t\t\t\t\t  false, false, false, false, NULL,\n \t\t\t\t\t  gnat_node);\n+      /* The __builtin_setjmp receivers will immediately reinstall it.  Now\n+\t because of the unstructured form of EH used by setjmp_longjmp, there\n+\t might be forward edges going to __builtin_setjmp receivers on which\n+\t it is uninitialized, although they will never be actually taken.  */\n+      TREE_NO_WARNING (gnu_jmpsave_decl) = 1;\n       gnu_jmpbuf_decl = create_var_decl (get_identifier (\"JMP_BUF\"),\n \t\t\t\t\t NULL_TREE, jmpbuf_type,\n \t\t\t\t\t NULL_TREE, false, false, false, false,"}, {"sha": "3874e39bb8c20b5d2ba25d528a0bcee4ea92a50d", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4", "patch": "@@ -518,6 +518,8 @@ init_gigi_decls (tree long_long_float_type, tree exception_type)\n     (get_identifier (\"system__soft_links__get_jmpbuf_address_soft\"),\n      NULL_TREE, build_function_type (jmpbuf_ptr_type, NULL_TREE),\n      NULL_TREE, false, true, true, NULL, Empty);\n+  /* Avoid creating superfluous edges to __builtin_setjmp receivers.  */\n+  DECL_IS_PURE (get_jmpbuf_decl) = 1;\n \n   set_jmpbuf_decl\n     = create_subprog_decl\n@@ -534,6 +536,8 @@ init_gigi_decls (tree long_long_float_type, tree exception_type)\n      NULL_TREE,\n      build_function_type (build_pointer_type (except_type_node), NULL_TREE),\n      NULL_TREE, false, true, true, NULL, Empty);\n+  /* Avoid creating superfluous edges to __builtin_setjmp receivers.  */\n+  DECL_IS_PURE (get_excptr_decl) = 1;\n \n   /* Functions that raise exceptions. */\n   raise_nodefer_decl"}, {"sha": "ffca59798caa5b2b3b9eae8664cb47109a5b3529", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=b55e7f34bc21a482d35dc2a9eaf38a878e0afbe4", "patch": "@@ -1431,7 +1431,8 @@ build_call_0_expr (tree fundecl)\n \t\t      build_unary_op (ADDR_EXPR, NULL_TREE, fundecl),\n \t\t      NULL_TREE, NULL_TREE);\n \n-  TREE_SIDE_EFFECTS (call) = 1;\n+  /* We rely on build3 to compute TREE_SIDE_EFFECTS.  This makes it possible\n+     to propagate the DECL_IS_PURE flag on parameterless functions.  */\n \n   return call;\n }"}]}