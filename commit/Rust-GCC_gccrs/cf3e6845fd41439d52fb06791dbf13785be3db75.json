{"sha": "cf3e6845fd41439d52fb06791dbf13785be3db75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YzZTY4NDVmZDQxNDM5ZDUyZmIwNjc5MWRiZjEzNzg1YmUzZGI3NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-29T15:20:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-29T15:20:44Z"}, "message": "[multiple changes]\n\n2014-01-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch7.adb, sem_prag.adb, sem_ch4.adb, sem_ch6.adb: Minor code\n\treorganization.\n\n2014-01-29  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_rm.texi: Update description of SPARK_Mode pragma.\n\n2014-01-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_ch9.adb (Expand_N_Protected_Body): Remove Num_Entries.\n\nFrom-SVN: r207243", "tree": {"sha": "f57ee8285d7052f73d6f9d070256780b506b4f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f57ee8285d7052f73d6f9d070256780b506b4f8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf3e6845fd41439d52fb06791dbf13785be3db75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3e6845fd41439d52fb06791dbf13785be3db75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3e6845fd41439d52fb06791dbf13785be3db75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3e6845fd41439d52fb06791dbf13785be3db75/comments", "author": null, "committer": null, "parents": [{"sha": "f90d14ac693f4eb59f54cc6f534555de2efa83dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90d14ac693f4eb59f54cc6f534555de2efa83dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90d14ac693f4eb59f54cc6f534555de2efa83dd"}], "stats": {"total": 218, "additions": 92, "deletions": 126}, "files": [{"sha": "23fc4021aca45d7df28bb033ca56a376a859233b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cf3e6845fd41439d52fb06791dbf13785be3db75", "patch": "@@ -1,3 +1,16 @@\n+2014-01-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch7.adb, sem_prag.adb, sem_ch4.adb, sem_ch6.adb: Minor code\n+\treorganization.\n+\n+2014-01-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_rm.texi: Update description of SPARK_Mode pragma.\n+\n+2014-01-29  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Protected_Body): Remove Num_Entries.\n+\n 2014-01-29  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_ch4.adb (Find_Component_In_Instance): Update comment."}, {"sha": "694569ddc24c07033a023ab7a9dc9ec26f0b8baa", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=cf3e6845fd41439d52fb06791dbf13785be3db75", "patch": "@@ -8436,7 +8436,6 @@ package body Exp_Ch9 is\n       Current_Node : Node_Id;\n       Disp_Op_Body : Node_Id;\n       New_Op_Body  : Node_Id;\n-      Num_Entries  : Natural := 0;\n       Op_Body      : Node_Id;\n       Op_Id        : Entity_Id;\n \n@@ -8625,8 +8624,6 @@ package body Exp_Ch9 is\n \n             when N_Entry_Body =>\n                Op_Id := Defining_Identifier (Op_Body);\n-               Num_Entries := Num_Entries + 1;\n-\n                New_Op_Body := Build_Protected_Entry (Op_Body, Op_Id, Pid);\n \n                Insert_After (Current_Node, New_Op_Body);"}, {"sha": "abb00383157a6d6931b78766ca754f8ff3ef1a1e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 41, "deletions": 90, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=cf3e6845fd41439d52fb06791dbf13785be3db75", "patch": "@@ -6309,124 +6309,75 @@ pragma SPARK_Mode [(On | Off)] ;\n @end smallexample\n \n @noindent\n-This pragma is used to specify whether a construct must\n-satisfy the syntactic and semantic rules of the SPARK 2014 programming\n-language. The pragma is intended for use with formal verification tools\n-and has no effect on the generated code.\n+In general a program can have some parts that are in SPARK 2014 (and\n+follow all the rules in the SPARK Reference Manual), and some parts\n+that are full Ada 2012.\n \n-The SPARK_Mode pragma is used to specify the value of the SPARK_Mode aspect\n-(either Off or On) of an entity.\n-More precisely, it is used to specify the aspect value of a ``section''\n-of an entity (the term ``section'' is defined below).\n-If a Spark_Mode pragma's (optional) argument is omitted,\n-an implicit argument of On is assumed.\n-\n-A SPARK_Mode pragma may be used as a configuration pragma and then has the\n-semantics described below.\n-\n-A SPARK_Mode pragma can be used as a local pragma only\n-in the following contexts:\n+The SPARK_Mode pragma is used to identify which parts are in SPARK\n+2014 (by default programs are in full Ada). The SPARK_Mode pragma can\n+be used in the following places:\n \n @itemize @bullet\n \n @item\n-When the pragma is at the start of the visible declarations (preceded only\n-by other pragmas) of a package declaration, it marks the visible part\n-of the package as being in or out of SPARK 2014.\n+As a configuration pragma, in which case it sets the default mode for\n+all units compiled with this pragma.\n \n @item\n-When the pragma appears at the start of the private declarations of a\n-package (preceded only by other pragmas), it marks the private part\n-of the package as being in or out of SPARK 2014.\n+Immediately following a library-level subprogram spec\n \n @item\n-When the pragma appears at the start of the declarations of a\n-package body (preceded only by other pragmas),\n-it marks the declaration list of the package body body as being\n-in or out of SPARK 2014.\n+Immediately within a library-level package body\n \n @item\n-When the pragma appears at the start of the elaboration statements of\n-a package body (preceded only by other pragmas),\n-it marks the handled_sequence_of_statements of the package body\n-as being in or out of SPARK 2014.\n+Immediately following the @code{private} keyword of a library-level\n+package spec\n \n @item\n-When the pragma appears after a subprogram declaration (with only other\n-pragmas intervening), it marks the subprogram's specification as\n-being in or out of SPARK 2014.\n+Immediately following the @code{begin} keyword of a library-level\n+package body\n \n @item\n-When the pragma appears at the start of the declarations of a subprogram\n-body (preceded only by other pragmas), it marks the subprogram body\n-as being in or out of SPARK 2014. For a subprogram body which is\n-not a completion of another declaration, it also applies to the\n-specification of the subprogram.\n+Immediately within a library-level subprogram body\n \n @end itemize\n \n-A package is defined to have 4 ``sections'': its visible part, its private\n-part, its body's declaration list, and its body's\n-handled_sequence_of_statements. Any other construct which requires a\n-completion is defined to have 2 ``sections'': its declaration and its\n-completion. Any other construct is defined to have 1 section.\n+@noindent\n+Normally a subprogram or package spec/body inherits the current mode\n+that is active at the point it is declared. But this can be overridden\n+by pragma within the spec or body as above.\n \n-The SPARK_Mode aspect value of an arbitrary section of an arbitrary Ada entity\n-or construct is then defined to be the following value:\n+The basic consistency rule is that you can't turn SPARK_Mode back\n+@code{On}, once you have explicitly (with a pragma) turned if\n+@code{Off}. So the following rules apply:\n \n-@itemize\n+@noindent\n+If a subprogram spec has SPARK_Mode @code{Off}, then the body must\n+also have SPARK_Mode @code{Off}.\n \n-@item\n-If SPARK_Mode has been specified for the given section of the given entity or\n-construct, then the specified value;\n+@noindent\n+For a package, we have four parts:\n \n+@itemize\n @item\n-else if SPARK_Mode has been specified for at least one preceding section of\n-the same entity, then the SPARK_Mode of the immediately preceding section;\n-\n+the package public declarations\n @item\n-else for any of the visible part or body declarations of a library unit package\n-or either section of a library unit subprogram, if there is an applicable\n-SPARK_Mode configuration pragma then the value specified by the\n-pragma; if no such configuration pragma applies, then an implicit\n-specification of Off is assumed;\n-\n+the package private part\n @item\n-else for any subsequent (i.e., not the first) section of a library unit\n-package, the SPARK_Mode of the preceding section;\n-\n+the body of the package\n @item\n-else the SPARK_Mode of the enclosing section of the nearest enclosing package\n-or subprogram;\n-\n+the elaboration code after @code{begin}\n @end itemize\n \n-If the above computation does not specify a SPARK_Mode setting for any\n-construct other than one of the four sections of a package, then a result of On\n-or Off is determined instead based on the legality (with respect to the rules\n-of SPARK 2014) of the construct. The construct's SPARK_Mode is On if and only\n-if the construct is in SPARK 2014.\n-\n-If an earlier section of an entity has a Spark_Mode of Off, then the\n-Spark_Mode aspect of any later section of that entity shall not be\n-specified to be On. For example,\n-if the specification of a subprogram has a Spark_Mode of Off, then the\n-body of the subprogram shall not have a Spark_Mode of On.\n-\n-The following rules apply to SPARK code (i.e., constructs which\n-have a SPARK_Mode aspect value of On):\n-\n-@itemize\n-\n-@item\n-SPARK code shall only reference SPARK declarations, but a SPARK declaration\n-which requires a completion may have a non-SPARK completion.\n-\n-@item\n-SPARK code shall only enclose SPARK code, except that SPARK code may enclose\n-a non-SPARK completion of an enclosed SPARK declaration.\n-\n-@end itemize\n+@noindent\n+For a package, the rule is that if you explicitly turn SPARK_Mode\n+@code{Off} for any part, then all the following parts must have\n+SPARK_Mode @code{Off}. Note that this may require repeating a pragma\n+SPARK_Mode (@code{Off}) in the body. For example, if we have a\n+configuration pragma SPARK_Mode (@code{On}) that turns the mode on by\n+default everywhere, and one particular package spec has pragma\n+SPARK_Mode (@code{Off}), then that pragma will need to be repeated in\n+the package body.\n \n @node Pragma Static_Elaboration_Desired\n @unnumberedsec Pragma Static_Elaboration_Desired"}, {"sha": "c7fc43269ccfbf370700f7b6fdbded72b3091f57", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=cf3e6845fd41439d52fb06791dbf13785be3db75", "patch": "@@ -3972,7 +3972,9 @@ package body Sem_Ch4 is\n             Next_Component (Comp);\n          end loop;\n \n-         --  Need comment on what is going on when we fall through ???\n+         --  If we fall through, no match, so no changes made\n+\n+         return;\n       end Find_Component_In_Instance;\n \n       ------------------------------"}, {"sha": "68775fbde7b5a2e9953f5ad801f41f4fd32cdd5b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=cf3e6845fd41439d52fb06791dbf13785be3db75", "patch": "@@ -3260,7 +3260,7 @@ package body Sem_Ch6 is\n                Error_Msg_N (\"incorrect application of SPARK_Mode#\", N);\n                Error_Msg_Sloc := Sloc (SPARK_Pragma (Spec_Id));\n                Error_Msg_NE\n-                 (\"\\value Off was set for SPARK_Mode on & #\", N, Spec_Id);\n+                 (\"\\value Off was set for SPARK_Mode on&#\", N, Spec_Id);\n             end if;\n \n          elsif Nkind (Parent (Parent (Spec_Id))) = N_Subprogram_Body_Stub then\n@@ -3270,8 +3270,7 @@ package body Sem_Ch6 is\n             Error_Msg_Sloc := Sloc (SPARK_Pragma (Body_Id));\n             Error_Msg_N (\"incorrect application of SPARK_Mode#\", N);\n             Error_Msg_Sloc := Sloc (Spec_Id);\n-            Error_Msg_NE\n-              (\"\\no value was set for SPARK_Mode on & #\", N, Spec_Id);\n+            Error_Msg_NE (\"\\no value was set for SPARK_Mode on&#\", N, Spec_Id);\n          end if;\n       end if;\n \n@@ -3348,12 +3347,11 @@ package body Sem_Ch6 is\n       --  the body of the procedure. But first we deal with a special case\n       --  where we want to modify this check. If the body of the subprogram\n       --  starts with a raise statement or its equivalent, or if the body\n-      --  consists entirely of a null statement, then it is pretty obvious\n-      --  that it is OK to not reference the parameters. For example, this\n-      --  might be the following common idiom for a stubbed function:\n-      --  statement of the procedure raises an exception. In particular this\n-      --  deals with the common idiom of a stubbed function, which might\n-      --  appear as something like:\n+      --  consists entirely of a null statement, then it is pretty obvious that\n+      --  it is OK to not reference the parameters. For example, this might be\n+      --  the following common idiom for a stubbed function: statement of the\n+      --  procedure raises an exception. In particular this deals with the\n+      --  common idiom of a stubbed function, which appears something like:\n \n       --     function F (A : Integer) return Some_Type;\n       --        X : Some_Type;\n@@ -3649,12 +3647,12 @@ package body Sem_Ch6 is\n       New_Overloaded_Entity (Designator);\n       Check_Delayed_Subprogram (Designator);\n \n-      --  If the type of the first formal of the current subprogram is a\n-      --  non-generic tagged private type, mark the subprogram as being a\n-      --  private primitive. Ditto if this is a function with controlling\n-      --  result, and the return type is currently private. In both cases,\n-      --  the type of the controlling argument or result must be in the\n-      --  current scope for the operation to be primitive.\n+      --  If the type of the first formal of the current subprogram is a non-\n+      --  generic tagged private type, mark the subprogram as being a private\n+      --  primitive. Ditto if this is a function with controlling result, and\n+      --  the return type is currently private. In both cases, the type of the\n+      --  controlling argument or result must be in the current scope for the\n+      --  operation to be primitive.\n \n       if Has_Controlling_Result (Designator)\n         and then Is_Private_Type (Etype (Designator))"}, {"sha": "4b6a6e424820d3e6e2271e65be2cf1cc1c0e189b", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=cf3e6845fd41439d52fb06791dbf13785be3db75", "patch": "@@ -349,6 +349,7 @@ package body Sem_Ch7 is\n       --  Set SPARK_Mode only for non-generic package\n \n       if Ekind (Spec_Id) = E_Package then\n+\n          --  Set SPARK_Mode from context\n \n          Set_SPARK_Pragma (Body_Id, SPARK_Mode_Pragma);\n@@ -391,9 +392,9 @@ package body Sem_Ch7 is\n          Inspect_Deferred_Constant_Completion (Declarations (N));\n       end if;\n \n-      --  After declarations have been analyzed, the body has been set\n-      --  its final value of SPARK_Mode. Check that SPARK_Mode for body\n-      --  is consistent with SPARK_Mode for spec.\n+      --  After declarations have been analyzed, the body has been set to have\n+      --  the final value of SPARK_Mode. Check that the SPARK_Mode for the body\n+      --  is consistent with the SPARK_Mode for the spec.\n \n       if Present (SPARK_Pragma (Body_Id)) then\n          if Present (SPARK_Aux_Pragma (Spec_Id)) then\n@@ -404,16 +405,16 @@ package body Sem_Ch7 is\n                Error_Msg_Sloc := Sloc (SPARK_Pragma (Body_Id));\n                Error_Msg_N (\"incorrect application of SPARK_Mode#\", N);\n                Error_Msg_Sloc := Sloc (SPARK_Aux_Pragma (Spec_Id));\n-               Error_Msg_NE (\"\\value Off was set for SPARK_Mode on & #\",\n-                             N, Spec_Id);\n+               Error_Msg_NE\n+                 (\"\\value Off was set for SPARK_Mode on & #\", N, Spec_Id);\n             end if;\n \n          else\n             Error_Msg_Sloc := Sloc (SPARK_Pragma (Body_Id));\n             Error_Msg_N (\"incorrect application of SPARK_Mode#\", N);\n             Error_Msg_Sloc := Sloc (Spec_Id);\n-            Error_Msg_NE (\"\\no value was set for SPARK_Mode on & #\",\n-                          N, Spec_Id);\n+            Error_Msg_NE\n+              (\"\\no value was set for SPARK_Mode on & #\", N, Spec_Id);\n          end if;\n       end if;\n \n@@ -539,12 +540,13 @@ package body Sem_Ch7 is\n             function Has_Referencer\n               (L     : List_Id;\n                Outer : Boolean) return  Boolean;\n-            --  Traverse the given list of declarations in reverse order.\n-            --  Return True if a referencer is present. Return False if none is\n-            --  found. The Outer parameter is True for the outer level call and\n-            --  False for inner level calls for nested packages. If Outer is\n-            --  True, then any entities up to the point of hitting a referencer\n-            --  get their Is_Public flag cleared, so that the entities will be\n+            --  Traverse given list of declarations in reverse order. Return\n+            --  True if a referencer is present. Return False if none is found.\n+            --\n+            --  The Outer parameter is True for the outer level call and False\n+            --  for inner level calls for nested packages. If Outer is True,\n+            --  then any entities up to the point of hitting a referencer get\n+            --  their Is_Public flag cleared, so that the entities will be\n             --  treated as static entities in the C sense, and need not have\n             --  fully qualified names. Furthermore, if the referencer is an\n             --  inlined subprogram that doesn't reference other subprograms,"}, {"sha": "b6846d452997a835facc9bd8d3bd0bd72036bb53", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3e6845fd41439d52fb06791dbf13785be3db75/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=cf3e6845fd41439d52fb06791dbf13785be3db75", "patch": "@@ -18628,7 +18628,8 @@ package body Sem_Prag is\n             procedure Check_Pragma_Conformance\n               (Context_Pragma : Node_Id;\n                Entity_Pragma  : Node_Id;\n-               Entity         : Entity_Id) is\n+               Entity         : Entity_Id)\n+            is\n             begin\n                if Present (Context_Pragma) then\n                   pragma Assert (Nkind (Context_Pragma) = N_Pragma);\n@@ -18654,15 +18655,17 @@ package body Sem_Prag is\n                         Error_Msg_N (\"incorrect use of SPARK_Mode\", Arg1);\n                         Error_Msg_Sloc := Sloc (Entity_Pragma);\n                         Error_Msg_NE\n-                          (\"\\value Off was set for SPARK_Mode on & #\",\n+                          (\"\\value Off was set for SPARK_Mode on&#\",\n                            Arg1, Entity);\n                         raise Pragma_Exit;\n                      end if;\n+\n                   else\n                      Error_Msg_N (\"incorrect use of SPARK_Mode\", Arg1);\n                      Error_Msg_Sloc := Sloc (Entity);\n-                     Error_Msg_NE (\"\\no value was set for SPARK_Mode on & #\",\n-                                   Arg1, Entity);\n+                     Error_Msg_NE\n+                       (\"\\no value was set for SPARK_Mode on&#\",\n+                        Arg1, Entity);\n                      raise Pragma_Exit;\n                   end if;\n                end if;"}]}