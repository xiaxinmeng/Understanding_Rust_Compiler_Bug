{"sha": "cfca21cb617a6618d59419031dbafa9901cdb360", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZjYTIxY2I2MTdhNjYxOGQ1OTQxOTAzMWRiYWZhOTkwMWNkYjM2MA==", "commit": {"author": {"name": "Peter Barada", "email": "peter@the-baradas.com", "date": "2004-10-22T12:47:24Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-10-22T12:47:24Z"}, "message": "m68k.h (HARD_REGNO_RENAME_OK): New macro.\n\n\t* config/m68k/m68k.h (HARD_REGNO_RENAME_OK): New macro.\n\t* config/m68k/m68k.c (m68k_hard regno_rename_ok): Disallow\n\trenaming of non-live registers in interrupt functions.\n\t* config/m68k/m68k-protos.h (m68k_hard_regno_rename_ok): Add prototype.\n\nFrom-SVN: r89441", "tree": {"sha": "43359c11c7f5bbd27bcfc04b3fa9c413511b0bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43359c11c7f5bbd27bcfc04b3fa9c413511b0bd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfca21cb617a6618d59419031dbafa9901cdb360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfca21cb617a6618d59419031dbafa9901cdb360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfca21cb617a6618d59419031dbafa9901cdb360", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfca21cb617a6618d59419031dbafa9901cdb360/comments", "author": null, "committer": null, "parents": [{"sha": "76aebc9f3e3d418ae396e0d4e2d0632f3df89927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76aebc9f3e3d418ae396e0d4e2d0632f3df89927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76aebc9f3e3d418ae396e0d4e2d0632f3df89927"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "b5b0acdc4225c27e4aae0688cd09a16121d6940e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfca21cb617a6618d59419031dbafa9901cdb360/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfca21cb617a6618d59419031dbafa9901cdb360/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfca21cb617a6618d59419031dbafa9901cdb360", "patch": "@@ -1,3 +1,10 @@\n+2004-10-22  Peter Barada <peter@the-baradas.com>\n+\n+\t* config/m68k/m68k.h (HARD_REGNO_RENAME_OK): New macro.\n+\t* config/m68k/m68k.c (m68k_hard regno_rename_ok): Disallow\n+\trenaming of non-live registers in interrupt functions.\n+\t* config/m68k/m68k-protos.h (m68k_hard_regno_rename_ok): Add prototype.\n+\n 2004-10-22  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* tree-ssa-loop-niter.c (inverse): Count in HOST_WIDE_INT if possible."}, {"sha": "4b66927d23938e6b9551264b2b3f72cf5f98fddb", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfca21cb617a6618d59419031dbafa9901cdb360/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfca21cb617a6618d59419031dbafa9901cdb360/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=cfca21cb617a6618d59419031dbafa9901cdb360", "patch": "@@ -50,9 +50,11 @@ extern void print_operand_address (FILE *, rtx);\n extern void print_operand (FILE *, rtx, int);\n extern void notice_update_cc (rtx, rtx);\n extern rtx legitimize_pic_address (rtx, enum machine_mode, rtx);\n+\n #endif /* RTX_CODE */\n \n extern int flags_in_68881 (void);\n extern bool use_return_insn (void);\n extern void override_options (void);\n extern void init_68881_table (void);\n+extern int m68k_hard_regno_rename_ok(unsigned int, unsigned int);"}, {"sha": "18b8fb415015f9b66b29b742e2002fd97a7f3d3a", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfca21cb617a6618d59419031dbafa9901cdb360/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfca21cb617a6618d59419031dbafa9901cdb360/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=cfca21cb617a6618d59419031dbafa9901cdb360", "patch": "@@ -3428,3 +3428,20 @@ m68k_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n {\n   return gen_rtx_REG (Pmode, M68K_STRUCT_VALUE_REGNUM);\n }\n+\n+/* Return nonzero if register old_reg can be renamed to register new_reg.  */\n+int\n+m68k_hard_regno_rename_ok (unsigned int old_reg ATTRIBUTE_UNUSED,\n+\t\t\t   unsigned int new_reg)\n+{\n+\n+  /* Interrupt functions can only use registers that have already been\n+     saved by the prologue, even if they would normally be\n+     call-clobbered.  */\n+\n+  if (m68k_interrupt_function_p (current_function_decl)\n+      && !regs_ever_live[new_reg])\n+    return 0;\n+\n+  return 1;\n+}"}, {"sha": "a7a36f90d9d33f21933a4536e1acb5bfebf2178a", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfca21cb617a6618d59419031dbafa9901cdb360/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfca21cb617a6618d59419031dbafa9901cdb360/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=cfca21cb617a6618d59419031dbafa9901cdb360", "patch": "@@ -480,6 +480,12 @@ extern int target_flags;\n   ((REGNO) >= 16 ? GET_MODE_NUNITS (MODE)\t\\\n    : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n+/* A C expression that is nonzero if hard register NEW_REG can be\n+   considered for use as a rename register for OLD_REG register.  */\n+\n+#define HARD_REGNO_RENAME_OK(OLD_REG, NEW_REG) \\\n+  m68k_hard_regno_rename_ok (OLD_REG, NEW_REG)\n+\n /* On the m68k, the cpu registers can hold any mode but the 68881 registers\n    can hold only SFmode or DFmode.  */\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\"}]}