{"sha": "8ef0ceb479317a58b0a2009428e09fc4f0cb74ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVmMGNlYjQ3OTMxN2E1OGIwYTIwMDk0MjhlMDlmYzRmMGNiNzRjYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2006-11-28T07:44:11Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2006-11-28T07:44:11Z"}, "message": "pack-test-1.c: Use __alignof__ to determine natural alignments.\n\n\t* gcc.dg/pack-test-1.c: Use __alignof__ to determine natural\n\talignments.\n\nFrom-SVN: r119277", "tree": {"sha": "042949222a16d244206c0bfa356b7f3f1778bb51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/042949222a16d244206c0bfa356b7f3f1778bb51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ef0ceb479317a58b0a2009428e09fc4f0cb74ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ef0ceb479317a58b0a2009428e09fc4f0cb74ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ef0ceb479317a58b0a2009428e09fc4f0cb74ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ef0ceb479317a58b0a2009428e09fc4f0cb74ca/comments", "author": null, "committer": null, "parents": [{"sha": "69a498424152c5d13d5fa8a4cca4176f27ceceb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a498424152c5d13d5fa8a4cca4176f27ceceb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69a498424152c5d13d5fa8a4cca4176f27ceceb5"}], "stats": {"total": 119, "additions": 66, "deletions": 53}, "files": [{"sha": "fba7c2a44e8e2607d23eab00bb443c8f7c23c1e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ef0ceb479317a58b0a2009428e09fc4f0cb74ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ef0ceb479317a58b0a2009428e09fc4f0cb74ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ef0ceb479317a58b0a2009428e09fc4f0cb74ca", "patch": "@@ -1,3 +1,8 @@\n+2006-11-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gcc.dg/pack-test-1.c: Use __alignof__ to determine natural\n+\talignments.\n+\n 2006-11-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29976"}, {"sha": "8bd3f6c7528e74219aa56258cbbcb474b14dbd85", "filename": "gcc/testsuite/gcc.dg/pack-test-1.c", "status": "modified", "additions": 61, "deletions": 53, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ef0ceb479317a58b0a2009428e09fc4f0cb74ca/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ef0ceb479317a58b0a2009428e09fc4f0cb74ca/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.c?ref=8ef0ceb479317a58b0a2009428e09fc4f0cb74ca", "patch": "@@ -3,47 +3,49 @@\n \n /* { dg-do compile { target { { *-*-linux* *-*-cygwin* powerpc*-*-eabi* } && { ! default_packed } } } } */\n \n-/* We only test the alignment of char, short, and int, because these\n-   are the only ones that are pretty certain to be the same across\n-   platforms (and maybe not even those).  Mainly we're just testing\n-   whether pushing and popping seem to be working correctly, and\n-   verifying the (alignment == 1) case, which is really the only\n-   reason anyone would use this pragma anyway.\n-*/\n+/* Mainly we're just testing whether pushing and popping seem to be\n+   working correctly, and verifying the (alignment == 1) case, which\n+   is really the only reason anyone would use this pragma anyway. */\n \n #include <stddef.h>\n \n-/* gap in bytes between fields a and b in struct s */\n-#define gap(s, a, b) (offsetof(struct s, a) - offsetof(struct s, b))\n /* generalized compile-time test expression */\n #define test(n, expr) int test_##n [(expr) ? 1 : -1]\n-/* test a gap */\n-#define testgap(n, a, b, val) test(n, gap(SNAME, a, b) == val)\n+\n+/* Round V down to multiple of A */\n+#define floor(v,a) ((v) / (a) * (a))\n+\n+/* Offset of field with alignment A in structure S after a field P of\n+   type PT */\n+#define offset(s,p,pt,a) \\\n+\tfloor ((offsetof(struct s, p) + sizeof (pt) + (a) - 1), a)\n+\n+/* regular minimum */\n+#define min(a,b)  ((a) < (b) ? (a) : (b))\n+\n+/* Check that field A (type AT) followed by field B (type BT) are\n+   packed according to P */\n+#define test_pack(n, a, at, b, bt, p) \\\n+\ttest(n, offsetof (struct SNAME, b) \\\n+ \t        == min (offset (SNAME,a,at,__alignof__(bt)), \\\n+\t\t        offset (SNAME,a,at,p)))\n+\n+/* Test offset of field F in structs s1 and s2 are the same.  */\n+#define test_offset(n, s1, s2, f) \\\n+\ttest (n, (offsetof(struct s1, f) == offsetof(struct s2, f)))\n \n #define SNAME s0\n #include \"pack-test-1.h\"\n \n-/* Save original alignment values.  Can't use const ints because they\n-   won't be expanded and we'll get bogus errors about variable length\n-   arrays.  (Possible bug in C front end?)  Use s0, not SNAME, so these\n-   won't change later.  */\n-#define al1 gap(s0, f1, f0)\n-#define al2 gap(s0, f2, f1)\n-#define al3 gap(s0, f3, f2)\n-#define al4 gap(s0, f4, f3)\n-#define al5 gap(s0, f5, f4)\n-#define al6 gap(s0, f6, f5)\n-#define al7 gap(s0, f7, f6)\n-\n #undef SNAME\n #define SNAME s1\n #pragma pack(push, p1, 1)\n #include \"pack-test-1.h\"\n \n void SNAME() {\n-  testgap(0, f1, f0, sizeof(char));\n-  testgap(1, f3, f2, sizeof(short));\n-  testgap(2, f5, f4, sizeof(int));\n+  test_pack(0, f0, char, f1, double, 1);\n+  test_pack(1, f2, short, f3, double, 1);\n+  test_pack(2, f4, int, f5, double, 1);\n }\n \n #undef SNAME\n@@ -52,9 +54,9 @@ void SNAME() {\n #include \"pack-test-1.h\"\n \n void SNAME() {\n-  testgap(0, f1, f0, sizeof(short));\n-  testgap(1, f3, f2, sizeof(short));\n-  testgap(2, f5, f4, sizeof(int));\n+  test_pack(0, f0, char, f1, double, 2);\n+  test_pack(1, f2, short, f3, double, 2);\n+  test_pack(2, f4, int, f5, double, 2);\n }\n \n #undef SNAME\n@@ -63,9 +65,9 @@ void SNAME() {\n #include \"pack-test-1.h\"\n \n void SNAME() {\n-  testgap(0, f1, f0, sizeof(int));\n-  testgap(1, f3, f2, sizeof(int));\n-  testgap(2, f5, f4, sizeof(int));\n+  test_pack(0, f0, char, f1, double, 4);\n+  test_pack(1, f2, short, f3, double, 4);\n+  test_pack(2, f4, int, f5, double, 4);\n }\n \n #undef SNAME\n@@ -74,9 +76,9 @@ void SNAME() {\n #include \"pack-test-1.h\"\n \n void SNAME() {\n-  testgap(0, f1, f0, sizeof(short));\n-  testgap(1, f3, f2, sizeof(short));\n-  testgap(2, f5, f4, sizeof(int));\n+  test_pack(0, f0, char, f1, double, 2);\n+  test_pack(1, f2, short, f3, double, 2);\n+  test_pack(2, f4, int, f5, double, 2);\n }\n \n #undef SNAME\n@@ -85,9 +87,9 @@ void SNAME() {\n #include \"pack-test-1.h\"\n \n void SNAME() {\n-  testgap(0, f1, f0, sizeof(char));\n-  testgap(1, f3, f2, sizeof(short));\n-  testgap(2, f5, f4, sizeof(int));\n+  test_pack(0, f0, char, f1, double, 1);\n+  test_pack(1, f2, short, f3, double, 1);\n+  test_pack(2, f4, int, f5, double, 1);\n }\n \n #undef SNAME\n@@ -96,9 +98,12 @@ void SNAME() {\n #include \"pack-test-1.h\"\n \n void SNAME() {\n-  testgap(0, f1, f0, al1);\n-  testgap(1, f3, f2, al3);\n-  testgap(2, f5, f4, al5);\n+  test_offset (0, s0, SNAME, f0);\n+  test_offset (1, s0, SNAME, f1);\n+  test_offset (2, s0, SNAME, f2);\n+  test_offset (3, s0, SNAME, f3);\n+  test_offset (4, s0, SNAME, f4);\n+  test_offset (5, s0, SNAME, f5);\n }\n \n #undef SNAME\n@@ -107,9 +112,9 @@ void SNAME() {\n #include \"pack-test-1.h\"\n \n void SNAME() {\n-  testgap(0, f1, f0, sizeof(char));\n-  testgap(1, f3, f2, sizeof(short));\n-  testgap(2, f5, f4, sizeof(int));\n+  test_pack(0, f0, char, f1, double, 1);\n+  test_pack(1, f2, short, f3, double, 1);\n+  test_pack(2, f4, int, f5, double, 1);\n }\n \n #undef SNAME\n@@ -118,9 +123,9 @@ void SNAME() {\n #include \"pack-test-1.h\"\n \n void SNAME() {\n-  testgap(0, f1, f0, sizeof(short));\n-  testgap(1, f3, f2, sizeof(short));\n-  testgap(2, f5, f4, sizeof(int));\n+  test_pack(0, f0, char, f1, double, 2);\n+  test_pack(1, f2, short, f3, double, 2);\n+  test_pack(2, f4, int, f5, double, 2);\n }\n \n #undef SNAME\n@@ -129,9 +134,9 @@ void SNAME() {\n #include \"pack-test-1.h\"\n \n void SNAME() {\n-  testgap(0, f1, f0, sizeof(char));\n-  testgap(1, f3, f2, sizeof(short));\n-  testgap(2, f5, f4, sizeof(int));\n+  test_pack(0, f0, char, f1, double, 1);\n+  test_pack(1, f2, short, f3, double, 1);\n+  test_pack(2, f4, int, f5, double, 1);\n }\n \n #undef SNAME\n@@ -140,7 +145,10 @@ void SNAME() {\n #include \"pack-test-1.h\"\n \n void SNAME() {\n-  testgap(0, f1, f0, al1);\n-  testgap(1, f3, f2, al3);\n-  testgap(2, f5, f4, al5);\n+  test_offset (0, s0, SNAME, f0);\n+  test_offset (1, s0, SNAME, f1);\n+  test_offset (2, s0, SNAME, f2);\n+  test_offset (3, s0, SNAME, f3);\n+  test_offset (4, s0, SNAME, f4);\n+  test_offset (5, s0, SNAME, f5);\n }"}]}