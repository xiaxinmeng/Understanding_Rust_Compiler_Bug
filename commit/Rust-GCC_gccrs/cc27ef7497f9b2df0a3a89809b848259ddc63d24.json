{"sha": "cc27ef7497f9b2df0a3a89809b848259ddc63d24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyN2VmNzQ5N2Y5YjJkZjBhM2E4OTgwOWI4NDgyNTlkZGM2M2QyNA==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1997-02-11T19:59:59Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1997-02-11T19:59:59Z"}, "message": "(ELIMINABLE_REGS): updated comments.\n\nFrom-SVN: r13625", "tree": {"sha": "44ccbce978646fe89e401d1e3836637610ff4575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44ccbce978646fe89e401d1e3836637610ff4575"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc27ef7497f9b2df0a3a89809b848259ddc63d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc27ef7497f9b2df0a3a89809b848259ddc63d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc27ef7497f9b2df0a3a89809b848259ddc63d24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc27ef7497f9b2df0a3a89809b848259ddc63d24/comments", "author": null, "committer": null, "parents": [{"sha": "ad7e369fd519d5ccea15bafb57b1e36edc119266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7e369fd519d5ccea15bafb57b1e36edc119266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad7e369fd519d5ccea15bafb57b1e36edc119266"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "763048b3b9f87159971ce7aa63968097da46a366", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27ef7497f9b2df0a3a89809b848259ddc63d24/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27ef7497f9b2df0a3a89809b848259ddc63d24/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=cc27ef7497f9b2df0a3a89809b848259ddc63d24", "patch": "@@ -387,16 +387,27 @@ do {\t\t\t\t\t\t\t\t\\\n \n /* Definitions for register eliminations.\n \n-   We have two registers that can be eliminated on the SH.  First, the\n+   We have three registers that can be eliminated on the SH.  First, the\n    frame pointer register can often be eliminated in favor of the stack\n    pointer register.  Secondly, the argument pointer register can always be\n-   eliminated; it is replaced with either the stack or frame pointer.  */\n+   eliminated; it is replaced with either the stack or frame pointer.\n+   Third, there is the retuen address pointer, which can also be replaced\n+   with either the stack or the frame pointer.  */\n \n /* This is an array of structures.  Each structure initializes one pair\n    of eliminable registers.  The \"from\" register number is given first,\n    followed by \"to\".  Eliminations of the same \"from\" register are listed\n    in order of preference.  */\n \n+/* If you add any registers here that are not actually hard registers,\n+   and that have any alternative of elimination that doesn't always\n+   apply, you need to amend calc_live_regs to exclude it, because\n+   reload spills all eliminable registers where it sees an\n+   can_eliminate == 0 entry, thus making them 'live' .\n+   If you add any hard registers that can be eliminated in different\n+   ways, you have to patch reload to spill them only when all alternatives\n+   of elimination fail.  */\n+\n #define ELIMINABLE_REGS\t\t\t\t\t\t\\\n {{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\\\n  { RETURN_ADDRESS_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\"}]}