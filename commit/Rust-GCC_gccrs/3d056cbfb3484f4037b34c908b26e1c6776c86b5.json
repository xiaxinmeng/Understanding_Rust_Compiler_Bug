{"sha": "3d056cbfb3484f4037b34c908b26e1c6776c86b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QwNTZjYmZiMzQ4NGY0MDM3YjM0YzkwOGIyNmUxYzY3NzZjODZiNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-01-28T15:58:29Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-01-28T16:02:17Z"}, "message": "preprocessor: Make __has_include a builtin macro [PR93452]\n\nThe clever hack of '#define __has_include __has_include' breaks -dD\nand -fdirectives-only, because that emits definitions.  This turns\n__has_include into a proper builtin macro.  Thus it's never emitted\nvia -dD, and because use outside of directive processing is undefined,\nwe can just expand it anywhere.\n\n\tPR preprocessor/93452\n\t* internal.h (struct spec_nodes): Drop n__has_include{,_next}.\n\t* directives.c (lex_macro_node): Don't check __has_include redef.\n\t* expr.c (eval_token): Drop __has_include eval.\n\t(parse_has_include): Move to ...\n\t* macro.c (builtin_has_include): ... here.\n\t(_cpp_builtin_macro_text): Eval __has_include{,_next}.\n\t* include/cpplib.h (enum cpp_builtin_type): Add BT_HAS_INCLUDE{,_NEXT}.\n\t* init.c (builtin_array): Add them.\n\t(cpp_init_builtins): Drop __has_include{,_next} init here ...\n\t* pch.c (cpp_read_state): ... and here.\n\t* traditional.c (enum ls): Drop has_include states ...\n\t(_cpp_scan_out_logical_line): ... and here.", "tree": {"sha": "591410d4cd98b8777276072cc5af998a3f97d97c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/591410d4cd98b8777276072cc5af998a3f97d97c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d056cbfb3484f4037b34c908b26e1c6776c86b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d056cbfb3484f4037b34c908b26e1c6776c86b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d056cbfb3484f4037b34c908b26e1c6776c86b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d056cbfb3484f4037b34c908b26e1c6776c86b5/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d81aaab6d54379cd3835b33d84d9be5c5be099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d81aaab6d54379cd3835b33d84d9be5c5be099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d81aaab6d54379cd3835b33d84d9be5c5be099"}], "stats": {"total": 196, "additions": 103, "deletions": 93}, "files": [{"sha": "f0986e492384679b942429d90934584d76f26377", "filename": "gcc/testsuite/c-c++-common/cpp/pr93452-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d056cbfb3484f4037b34c908b26e1c6776c86b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr93452-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d056cbfb3484f4037b34c908b26e1c6776c86b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr93452-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr93452-1.c?ref=3d056cbfb3484f4037b34c908b26e1c6776c86b5", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do preprocess } */\n+/* { dg-additional-options \"-fdirectives-only\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* A regexp that doesn't match itself!  */\n+/* { dg-final { scan-file-not pr93452-1.i {_[_]has_include} } } */"}, {"sha": "c9ab0e9f76394a6ddc09813f4202292b73e6622f", "filename": "gcc/testsuite/c-c++-common/cpp/pr93452-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d056cbfb3484f4037b34c908b26e1c6776c86b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr93452-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d056cbfb3484f4037b34c908b26e1c6776c86b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr93452-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr93452-2.c?ref=3d056cbfb3484f4037b34c908b26e1c6776c86b5", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do preprocess } */\n+/* { dg-additional-options \"-dD\" } */\n+\n+#if __has_include (\"who cares\" )\n+#endif\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-file-not pr93452-2.i {__has_include} } } */"}, {"sha": "f749622a5f736233621d00d6119eee246ae15da1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=3d056cbfb3484f4037b34c908b26e1c6776c86b5", "patch": "@@ -1,3 +1,19 @@\n+2020-01-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR preprocessor/93452\n+\t* internal.h (struct spec_nodes): Drop n__has_include{,_next}.\n+\t* directives.c (lex_macro_node): Don't check __has_include redef.\n+\t* expr.c (eval_token): Drop __has_include eval.\n+\t(parse_has_include): Move to ...\n+\t* macro.c (builtin_has_include): ... here.\n+\t(_cpp_builtin_macro_text): Eval __has_include{,_next}.\n+\t* include/cpplib.h (enum cpp_builtin_type): Add BT_HAS_INCLUDE{,_NEXT}.\n+\t* init.c (builtin_array): Add them.\n+\t(cpp_init_builtins): Drop __has_include{,_next} init here ...\n+\t* pch.c (cpp_read_state): ... and here.\n+\t* traditional.c (enum ls): Drop has_include states ...\n+\t(_cpp_scan_out_logical_line): ... and here.\n+\n 2020-01-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* configure: Regenerate."}, {"sha": "bbfdfcd33686c475eda80cdd0ed1b6a3453cf60b", "filename": "libcpp/directives.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=3d056cbfb3484f4037b34c908b26e1c6776c86b5", "patch": "@@ -596,9 +596,7 @@ lex_macro_node (cpp_reader *pfile, bool is_def_or_undef)\n       cpp_hashnode *node = token->val.node.node;\n \n       if (is_def_or_undef\n-\t  && (node == pfile->spec_nodes.n_defined\n-\t      || node == pfile->spec_nodes.n__has_include\n-\t      || node == pfile->spec_nodes.n__has_include_next))\n+\t  && node == pfile->spec_nodes.n_defined)\n \tcpp_error (pfile, CPP_DL_ERROR,\n \t\t   \"\\\"%s\\\" cannot be used as a macro name\",\n \t\t   NODE_NAME (node));"}, {"sha": "2ae9be07c1a52fa6c2f786c4e98789ad58962d84", "filename": "libcpp/expr.c", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=3d056cbfb3484f4037b34c908b26e1c6776c86b5", "patch": "@@ -64,8 +64,6 @@ static unsigned int interpret_float_suffix (cpp_reader *, const uchar *, size_t)\n static unsigned int interpret_int_suffix (cpp_reader *, const uchar *, size_t);\n static void check_promotion (cpp_reader *, const struct op *);\n \n-static cpp_num parse_has_include (cpp_reader *, cpp_hashnode *, include_type);\n-\n /* Token type abuse to create unary plus and minus operators.  */\n #define CPP_UPLUS ((enum cpp_ttype) (CPP_LAST_CPP_OP + 1))\n #define CPP_UMINUS ((enum cpp_ttype) (CPP_LAST_CPP_OP + 2))\n@@ -1159,10 +1157,6 @@ eval_token (cpp_reader *pfile, const cpp_token *token,\n     case CPP_NAME:\n       if (token->val.node.node == pfile->spec_nodes.n_defined)\n \treturn parse_defined (pfile);\n-      else if (token->val.node.node == pfile->spec_nodes.n__has_include)\n-\treturn parse_has_include (pfile, token->val.node.node, IT_INCLUDE);\n-      else if (token->val.node.node == pfile->spec_nodes.n__has_include_next)\n-\treturn parse_has_include (pfile, token->val.node.node, IT_INCLUDE_NEXT);\n       else if (CPP_OPTION (pfile, cplusplus)\n \t       && (token->val.node.node == pfile->spec_nodes.n_true\n \t\t   || token->val.node.node == pfile->spec_nodes.n_false))\n@@ -2189,55 +2183,3 @@ num_div_op (cpp_reader *pfile, cpp_num lhs, cpp_num rhs, enum cpp_ttype op,\n   return lhs;\n }\n \n-/* Handle meeting \"__has_include\" in a preprocessor expression.  */\n-static cpp_num\n-parse_has_include (cpp_reader *pfile, cpp_hashnode *op, include_type type)\n-{\n-  cpp_num result;\n-\n-  result.unsignedp = false;\n-  result.high = 0;\n-  result.overflow = false;\n-  result.low = 0;\n-\n-  pfile->state.angled_headers = true;\n-  const cpp_token *token = cpp_get_token (pfile);\n-  bool paren = token->type == CPP_OPEN_PAREN;\n-  if (paren)\n-    token = cpp_get_token (pfile);\n-  else\n-    cpp_error (pfile, CPP_DL_ERROR,\n-\t       \"missing '(' before \\\"%s\\\" operand\", NODE_NAME (op));\n-  pfile->state.angled_headers = false;\n-\n-  bool bracket = token->type != CPP_STRING;\n-  char *fname = NULL;\n-  if (token->type == CPP_STRING || token->type == CPP_HEADER_NAME)\n-    {\n-      fname = XNEWVEC (char, token->val.str.len - 1);\n-      memcpy (fname, token->val.str.text + 1, token->val.str.len - 2);\n-      fname[token->val.str.len - 2] = '\\0';\n-    }\n-  else if (token->type == CPP_LESS)\n-    fname = _cpp_bracket_include (pfile);\n-  else\n-    cpp_error (pfile, CPP_DL_ERROR,\n-\t       \"operator \\\"%s\\\" requires a header-name\", NODE_NAME (op));\n-\n-  if (fname)\n-    {\n-      /* Do not do the lookup if we're skipping, that's unnecessary\n-\t IO.  */\n-      if (!pfile->state.skip_eval\n-\t  && _cpp_has_header (pfile, fname, bracket, type))\n-\tresult.low = 1;\n-\n-      XDELETEVEC (fname);\n-    }\n-\n-  if (paren && !SEEN_EOL () && cpp_get_token (pfile)->type != CPP_CLOSE_PAREN)\n-    cpp_error (pfile, CPP_DL_ERROR,\n-\t       \"missing ')' after \\\"%s\\\" operand\", NODE_NAME (op));\n-\n-  return result;\n-}"}, {"sha": "07caadb88e7a2620480ba87b0877132f3ea125ac", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=3d056cbfb3484f4037b34c908b26e1c6776c86b5", "patch": "@@ -860,7 +860,9 @@ enum cpp_builtin_type\n   BT_TIMESTAMP,\t\t\t/* `__TIMESTAMP__' */\n   BT_COUNTER,\t\t\t/* `__COUNTER__' */\n   BT_HAS_ATTRIBUTE,\t\t/* `__has_attribute(x)' */\n-  BT_HAS_BUILTIN\t\t/* `__has_builtin(x)' */\n+  BT_HAS_BUILTIN,\t\t/* `__has_builtin(x)' */\n+  BT_HAS_INCLUDE,\t\t/* `__has_include(x)' */\n+  BT_HAS_INCLUDE_NEXT,\t\t/* `__has_include_next(x)' */\n };\n \n #define CPP_HASHNODE(HNODE)\t((cpp_hashnode *) (HNODE))"}, {"sha": "a3cd8e28f6263267a391f9fc137f578eff5705e6", "filename": "libcpp/init.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=3d056cbfb3484f4037b34c908b26e1c6776c86b5", "patch": "@@ -404,6 +404,8 @@ static const struct builtin_macro builtin_array[] =\n   B(\"__has_attribute\",\t BT_HAS_ATTRIBUTE, true),\n   B(\"__has_cpp_attribute\", BT_HAS_ATTRIBUTE, true),\n   B(\"__has_builtin\",\t BT_HAS_BUILTIN,   true),\n+  B(\"__has_include\",\t BT_HAS_INCLUDE,   true),\n+  B(\"__has_include_next\",BT_HAS_INCLUDE_NEXT,   true),\n   /* Keep builtins not used for -traditional-cpp at the end, and\n      update init_builtins() if any more are added.  */\n   B(\"_Pragma\",\t\t BT_PRAGMA,        true),\n@@ -578,17 +580,6 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n \n   if (CPP_OPTION (pfile, objc))\n     _cpp_define_builtin (pfile, \"__OBJC__ 1\");\n-\n-  /* These two behave as macros for #ifdef, but are evaluated\n-     specially inside #if.  */\n-  _cpp_define_builtin (pfile, \"__has_include __has_include\");\n-  _cpp_define_builtin (pfile, \"__has_include_next __has_include_next\");\n-  pfile->spec_nodes.n__has_include\n-    = cpp_lookup (pfile, DSC(\"__has_include\"));\n-  pfile->spec_nodes.n__has_include->flags |= NODE_DIAGNOSTIC;\n-  pfile->spec_nodes.n__has_include_next\n-    = cpp_lookup (pfile, DSC(\"__has_include_next\"));\n-  pfile->spec_nodes.n__has_include_next->flags |= NODE_DIAGNOSTIC;\n }\n \n /* Sanity-checks are dependent on command-line options, so it is"}, {"sha": "97d9bdbea776b9b1ef22f18777f033688c96ee88", "filename": "libcpp/internal.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=3d056cbfb3484f4037b34c908b26e1c6776c86b5", "patch": "@@ -290,8 +290,6 @@ struct spec_nodes\n   cpp_hashnode *n_false;\t\t/* C++ keyword false */\n   cpp_hashnode *n__VA_ARGS__;\t\t/* C99 vararg macros */\n   cpp_hashnode *n__VA_OPT__;\t\t/* C++ vararg macros */\n-  cpp_hashnode *n__has_include;\t\t/* __has_include operator */\n-  cpp_hashnode *n__has_include_next;\t/* __has_include_next operator */\n };\n \n typedef struct _cpp_line_note _cpp_line_note;"}, {"sha": "ec3f8b7b73cb38fccfaaf987f72b6ec4a9263ca5", "filename": "libcpp/macro.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=3d056cbfb3484f4037b34c908b26e1c6776c86b5", "patch": "@@ -336,6 +336,56 @@ unsigned num_expanded_macros_counter = 0;\n    from macro expansion.  */\n unsigned num_macro_tokens_counter = 0;\n \n+/* Handle meeting \"__has_include\" builtin macro.  */\n+\n+static int\n+builtin_has_include (cpp_reader *pfile, cpp_hashnode *op, bool has_next)\n+{\n+  int result = 0;\n+\n+  pfile->state.angled_headers = true;\n+  const cpp_token *token = cpp_get_token (pfile);\n+  bool paren = token->type == CPP_OPEN_PAREN;\n+  if (paren)\n+    token = cpp_get_token (pfile);\n+  else\n+    cpp_error (pfile, CPP_DL_ERROR,\n+\t       \"missing '(' before \\\"%s\\\" operand\", NODE_NAME (op));\n+  pfile->state.angled_headers = false;\n+\n+  bool bracket = token->type != CPP_STRING;\n+  char *fname = NULL;\n+  if (token->type == CPP_STRING || token->type == CPP_HEADER_NAME)\n+    {\n+      fname = XNEWVEC (char, token->val.str.len - 1);\n+      memcpy (fname, token->val.str.text + 1, token->val.str.len - 2);\n+      fname[token->val.str.len - 2] = '\\0';\n+    }\n+  else if (token->type == CPP_LESS)\n+    fname = _cpp_bracket_include (pfile);\n+  else\n+    cpp_error (pfile, CPP_DL_ERROR,\n+\t       \"operator \\\"%s\\\" requires a header-name\", NODE_NAME (op));\n+\n+  if (fname)\n+    {\n+      /* Do not do the lookup if we're skipping, that's unnecessary\n+\t IO.  */\n+      if (!pfile->state.skip_eval\n+\t  && _cpp_has_header (pfile, fname, bracket,\n+\t\t\t      has_next ? IT_INCLUDE_NEXT : IT_INCLUDE))\n+\tresult = 1;\n+\n+      XDELETEVEC (fname);\n+    }\n+\n+  if (paren && !SEEN_EOL () && cpp_get_token (pfile)->type != CPP_CLOSE_PAREN)\n+    cpp_error (pfile, CPP_DL_ERROR,\n+\t       \"missing ')' after \\\"%s\\\" operand\", NODE_NAME (op));\n+\n+  return result;\n+}\n+\n /* Emits a warning if NODE is a macro defined in the main file that\n    has not been used.  */\n int\n@@ -572,6 +622,12 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,\n     case BT_HAS_BUILTIN:\n       number = pfile->cb.has_builtin (pfile);\n       break;\n+\n+    case BT_HAS_INCLUDE:\n+    case BT_HAS_INCLUDE_NEXT:\n+      number = builtin_has_include (pfile, node,\n+\t\t\t\t    node->value.builtin == BT_HAS_INCLUDE_NEXT);\n+      break;\n     }\n \n   if (result == NULL)"}, {"sha": "fcdf3875d0b214ec4d3d7bf4192c7d33da2c0cee", "filename": "libcpp/pch.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=3d056cbfb3484f4037b34c908b26e1c6776c86b5", "patch": "@@ -811,8 +811,6 @@ cpp_read_state (cpp_reader *r, const char *name, FILE *f,\n     s->n_false\t\t= cpp_lookup (r, DSC(\"false\"));\n     s->n__VA_ARGS__     = cpp_lookup (r, DSC(\"__VA_ARGS__\"));\n     s->n__VA_OPT__      = cpp_lookup (r, DSC(\"__VA_OPT__\"));\n-    s->n__has_include   = cpp_lookup (r, DSC(\"__has_include\"));\n-    s->n__has_include_next = cpp_lookup (r, DSC(\"__has_include_next\"));\n   }\n \n   old_state = r->state;"}, {"sha": "039fcfe27f547545e77edc3f9c2b9c9575f55540", "filename": "libcpp/traditional.c", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d056cbfb3484f4037b34c908b26e1c6776c86b5/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=3d056cbfb3484f4037b34c908b26e1c6776c86b5", "patch": "@@ -77,9 +77,8 @@ enum ls {ls_none = 0,\t\t/* Normal state.  */\n \t ls_defined_close,\t/* Looking for ')' of defined().  */\n \t ls_hash,\t\t/* After # in preprocessor conditional.  */\n \t ls_predicate,\t\t/* After the predicate, maybe paren?  */\n-\t ls_answer,\t\t/* In answer to predicate.  */\n-\t ls_has_include,\t/* After __has_include.  */\n-\t ls_has_include_close};\t/* Looking for ')' of __has_include.  */\n+\t ls_answer\t\t/* In answer to predicate.  */\n+};\n \n /* Lexing TODO: Maybe handle space in escaped newlines.  Stop lex.c\n    from recognizing comments and directives during its lexing pass.  */\n@@ -564,13 +563,6 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro,\n \t\t  lex_state = ls_defined;\n \t\t  continue;\n \t\t}\n-\t      else if (pfile->state.in_expression\n-\t\t       && (node == pfile->spec_nodes.n__has_include\n-\t\t\t|| node == pfile->spec_nodes.n__has_include_next))\n-\t\t{\n-\t\t  lex_state = ls_has_include;\n-\t\t  continue;\n-\t\t}\n \t    }\n \t  break;\n \n@@ -594,8 +586,6 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro,\n \t\tlex_state = ls_answer;\n \t      else if (lex_state == ls_defined)\n \t\tlex_state = ls_defined_close;\n-\t      else if (lex_state == ls_has_include)\n-\t\tlex_state = ls_has_include_close;\n \t    }\n \t  break;\n \n@@ -729,8 +719,7 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro,\n \t\t      goto new_context;\n \t\t    }\n \t\t}\n-\t      else if (lex_state == ls_answer || lex_state == ls_defined_close\n-\t\t\t|| lex_state == ls_has_include_close)\n+\t      else if (lex_state == ls_answer || lex_state == ls_defined_close)\n \t\tlex_state = ls_none;\n \t    }\n \t  break;\n@@ -811,8 +800,7 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro,\n \tlex_state = ls_none;\n       else if (lex_state == ls_hash\n \t       || lex_state == ls_predicate\n-\t       || lex_state == ls_defined\n-\t       || lex_state == ls_has_include)\n+\t       || lex_state == ls_defined)\n \tlex_state = ls_none;\n \n       /* ls_answer and ls_defined_close keep going until ')'.  */"}]}