{"sha": "cc9ae24cbea172e0810524ec506339b918e944ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M5YWUyNGNiZWExNzJlMDgxMDUyNGVjNTA2MzM5YjkxOGU5NDRhZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-05-06T18:35:00Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-05-06T18:35:00Z"}, "message": "re PR fortran/18918 (Eventually support Fortran 2008's coarrays [co-arrays])\n\n2011-05-06  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * caf/libcaf.h: Cleanup headers.\n        (_gfortran_caf_critical, _gfortran_caf_end_critical): Make stub.\n        (caf_register_t): New enum.\n        (_gfortran_caf_register, _gfortran_caf_deregister): New prototype.\n        * caf/single.c (_gfortran_caf_critical,\n        _gfortran_caf_end_critical): Remove.\n        (_gfortran_caf_register, _gfortran_caf_deregister): New functions.\n        * caf/mpi.c (_gfortran_caf_critical,\n        _gfortran_caf_end_critical): Remove.\n        (_gfortran_caf_register, _gfortran_caf_deregister): New functions.\n        (caf_world_window): Remove global variable.\n        (_gfortran_caf_init): Fix off-by-one error of this_image.\n\nFrom-SVN: r173505", "tree": {"sha": "1afaa1e180693afcdcb19e2fe41817bef8308c16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1afaa1e180693afcdcb19e2fe41817bef8308c16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc9ae24cbea172e0810524ec506339b918e944ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9ae24cbea172e0810524ec506339b918e944ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9ae24cbea172e0810524ec506339b918e944ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9ae24cbea172e0810524ec506339b918e944ae/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b040949f623196f1959b1c21a2b851d835d9970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b040949f623196f1959b1c21a2b851d835d9970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b040949f623196f1959b1c21a2b851d835d9970"}], "stats": {"total": 122, "additions": 81, "deletions": 41}, "files": [{"sha": "e40450087de2164b42c2859134a071f94e557bbe", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9ae24cbea172e0810524ec506339b918e944ae/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9ae24cbea172e0810524ec506339b918e944ae/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=cc9ae24cbea172e0810524ec506339b918e944ae", "patch": "@@ -1,3 +1,19 @@\n+2011-05-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* caf/libcaf.h: Cleanup headers.\n+\t(_gfortran_caf_critical, _gfortran_caf_end_critical): Make stub.\n+\t(caf_register_t): New enum.\n+\t(_gfortran_caf_register, _gfortran_caf_deregister): New prototype.\n+\t* caf/single.c (_gfortran_caf_critical,\n+\t_gfortran_caf_end_critical): Remove.\n+\t(_gfortran_caf_register, _gfortran_caf_deregister): New functions.\n+\t* caf/mpi.c (_gfortran_caf_critical,\n+\t_gfortran_caf_end_critical): Remove.\n+\t(_gfortran_caf_register, _gfortran_caf_deregister): New functions.\n+\t(caf_world_window): Remove global variable.\n+\t(_gfortran_caf_init): Fix off-by-one error of this_image.\n+\n 2011-05-04  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/48787"}, {"sha": "7b19f0d2dd098aa2855b65e4f9def651c51d39b9", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9ae24cbea172e0810524ec506339b918e944ae/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9ae24cbea172e0810524ec506339b918e944ae/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=cc9ae24cbea172e0810524ec506339b918e944ae", "patch": "@@ -27,8 +27,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef LIBCAF_H\n #define LIBCAF_H\n \n-#include <stdint.h>\n-#include <string.h>\n+#include <stdint.h>\t/* For int32_t.  */\n+#include <stddef.h>\t/* For ptrdiff_t.  */\n+\n \n /* Definitions of the Fortran 2008 standard; need to kept in sync with\n    ISO_FORTRAN_ENV, cf. libgfortran.h.  */\n@@ -38,16 +39,32 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define STAT_STOPPED_IMAGE \t3\n \n \n+typedef enum caf_register_t {\n+  CAF_REGTYPE_COARRAY,\n+  CAF_REGTYPE_LOCK,\n+  CAF_REGTYPE_LOCK_COMP \n+}\n+caf_register_t;\n+\n+\n void _gfortran_caf_init (int *, char ***, int *, int *);\n void _gfortran_caf_finalize (void);\n \n+void * _gfortran_caf_register (ptrdiff_t, caf_register_t, void **);\n+int _gfortran_caf_deregister (void **);\n+\n+\n int _gfortran_caf_sync_all (char *, int);\n-int _gfortran_caf_sync_images (int count, int images[], char *, int);\n+int _gfortran_caf_sync_images (int, int[], char *, int);\n+\n+/* FIXME: The CRITICAL functions should be removed;\n+   the functionality is better represented using Coarray's lock feature.  */\n+void _gfortran_caf_critical (void)  { }\n+void _gfortran_caf_end_critical (void)  { }\n \n-void _gfortran_caf_critical (void);\n-void _gfortran_caf_end_critical (void);\n \n-void _gfortran_caf_error_stop_str (const char *, int32_t) __attribute__ ((noreturn));\n+void _gfortran_caf_error_stop_str (const char *, int32_t)\n+     __attribute__ ((noreturn));\n void _gfortran_caf_error_stop (int32_t) __attribute__ ((noreturn));\n \n #endif  /* LIBCAF_H  */"}, {"sha": "9b7bb333c2283560d48d07c795577fe941410e65", "filename": "libgfortran/caf/mpi.c", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9ae24cbea172e0810524ec506339b918e944ae/libgfortran%2Fcaf%2Fmpi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9ae24cbea172e0810524ec506339b918e944ae/libgfortran%2Fcaf%2Fmpi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fmpi.c?ref=cc9ae24cbea172e0810524ec506339b918e944ae", "patch": "@@ -27,8 +27,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"libcaf.h\"\n #include <stdio.h>\n #include <stdlib.h>\n+#include <string.h>\t/* For memcpy.  */\n #include <mpi.h>\n \n+\n /* Define GFC_CAF_CHECK to enable run-time checking.  */\n /* #define GFC_CAF_CHECK  1  */\n \n@@ -39,7 +41,6 @@ static void error_stop (int error) __attribute__ ((noreturn));\n static int caf_mpi_initialized;\n static int caf_this_image;\n static int caf_num_images;\n-static MPI_Win caf_world_window;\n \n \n /* Initialize coarray program.  This routine assumes that no other\n@@ -58,13 +59,9 @@ _gfortran_caf_init (int *argc, char ***argv, int *this_image, int *num_images)\n     MPI_Init (argc, argv);\n \n   MPI_Comm_rank (MPI_COMM_WORLD, &caf_this_image);\n-  *this_image = caf_this_image + 1;\n+  *this_image = ++caf_this_image;\n   MPI_Comm_size (MPI_COMM_WORLD, &caf_num_images);\n   *num_images = caf_num_images;\n-\n-  /* Obtain window for CRITICAL section locking.  */\n-  MPI_Win_create (NULL, 0, 1, MPI_INFO_NULL, MPI_COMM_WORLD,\n-\t\t  &caf_world_window);\n }\n \n \n@@ -73,13 +70,28 @@ _gfortran_caf_init (int *argc, char ***argv, int *this_image, int *num_images)\n void\n _gfortran_caf_finalize (void)\n {\n-  MPI_Win_free (&caf_world_window);\n-\n   if (!caf_mpi_initialized)\n     MPI_Finalize ();\n }\n \n \n+void *\n+_gfortran_caf_register (ptrdiff_t size,\n+                        caf_register_t type __attribute__ ((unused)),\n+                        void **token)\n+{\n+  *token = NULL;\n+  return malloc (size);\n+}\n+\n+\n+int\n+_gfortran_caf_deregister (void **token __attribute__ ((unused)))\n+{\n+  return 0;\n+}\n+\n+\n /* SYNC ALL - the return value matches Fortran's STAT argument.  */\n \n int\n@@ -156,22 +168,6 @@ _gfortran_caf_sync_images (int count, int images[], char *errmsg,\n }\n \n \n-/* CRITICAL BLOCK. */\n-\n-void\n-_gfortran_caf_critical (void)\n-{\n-  MPI_Win_lock (MPI_LOCK_SHARED, 0, 0, caf_world_window);\n-}\n-\n-\n-void\n-_gfortran_caf_end_critical (void)\n-{\n-  MPI_Win_unlock (0, caf_world_window);\n-}\n-\n-\n /* ERROR STOP the other images.  */\n \n static void"}, {"sha": "c5c66b4b95549b1b3bcd7d2e0d4d9fd84368fb28", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9ae24cbea172e0810524ec506339b918e944ae/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9ae24cbea172e0810524ec506339b918e944ae/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=cc9ae24cbea172e0810524ec506339b918e944ae", "patch": "@@ -26,16 +26,16 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"libcaf.h\"\n #include <stdio.h>  /* For fputs and fprintf.  */\n-#include <stdlib.h> /* For exit.  */\n+#include <stdlib.h> /* For exit and malloc.  */\n \n /* Define GFC_CAF_CHECK to enable run-time checking.  */\n /* #define GFC_CAF_CHECK  1  */\n \n-\n /* Single-image implementation of the CAF library.\n    Note: For performance reasons -fcoarry=single should be used\n    rather than this library.  */\n \n+\n void\n _gfortran_caf_init (int *argc __attribute__ ((unused)),\n \t\t    char ***argv __attribute__ ((unused)),\n@@ -45,11 +45,30 @@ _gfortran_caf_init (int *argc __attribute__ ((unused)),\n   *num_images = 1;\n }\n \n+\n void\n _gfortran_caf_finalize (void)\n {\n }\n \n+\n+void *\n+_gfortran_caf_register (ptrdiff_t size,\n+\t\t\tcaf_register_t type __attribute__ ((unused)),\n+\t\t\tvoid **token)\n+{\n+  *token = NULL;\n+  return malloc (size);\n+}\n+\n+\n+int\n+_gfortran_caf_deregister (void **token __attribute__ ((unused)))\n+{\n+  return 0;\n+}\n+\n+\n int\n _gfortran_caf_sync_all (char *errmsg __attribute__ ((unused)),\n \t\t\tint errmsg_len __attribute__ ((unused)))\n@@ -78,15 +97,6 @@ _gfortran_caf_sync_images (int count __attribute__ ((unused)),\n   return 0;\n }\n \n-void\n-_gfortran_caf_critical (void)\n-{\n-}\n-\n-void\n-_gfortran_caf_end_critical (void)\n-{\n-}\n \n void\n _gfortran_caf_error_stop_str (const char *string, int32_t len)\n@@ -99,6 +109,7 @@ _gfortran_caf_error_stop_str (const char *string, int32_t len)\n   exit (1);\n }\n \n+\n void\n _gfortran_caf_error_stop (int32_t error)\n {"}]}