{"sha": "b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ3NjNmNWM0YTlkMmJkZTA5NjNiYmI5NDIyYWEzNDgwYzVlODFkYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-16T09:03:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-16T09:03:56Z"}, "message": "[multiple changes]\n\n2009-04-16  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-nmsc.adb (Path_Name_Of): fix memory leak\n\n2009-04-16  Robert Dewar  <dewar@adacore.com>\n\n\t* sinfo.ads (Backwards_OK, Forwards_OK): Clarify documentation\n\n2009-04-16  Vincent Celier  <celier@adacore.com>\n\n\t* fmap.adb (Initialize): Show the current line when the mapping file\n\tis detected as \"incorrectly formatted\".\n\n2009-04-16  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch12.adb: Minor reformatting\n\n\t* sem_ch5.adb: Minor comment addition\n\n\t* sem_util.adb: Minor reformatting\n\n\t* sinput-p.adb: Minor reformatting\n\tAdd missing pragma Warnings (On)\n\nFrom-SVN: r146152", "tree": {"sha": "1988421b1a76b066acdb0b87a9eb5302ceb428bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1988421b1a76b066acdb0b87a9eb5302ceb428bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/comments", "author": null, "committer": null, "parents": [{"sha": "0c72247e06e7cebbe398cb3c3948e77d8939f5ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c72247e06e7cebbe398cb3c3948e77d8939f5ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c72247e06e7cebbe398cb3c3948e77d8939f5ce"}], "stats": {"total": 86, "additions": 64, "deletions": 22}, "files": [{"sha": "7ce16489967eca1bc4d0eed498ae2f1754fa759d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "patch": "@@ -1,3 +1,27 @@\n+2009-04-16  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-nmsc.adb (Path_Name_Of): fix memory leak\n+\n+2009-04-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sinfo.ads (Backwards_OK, Forwards_OK): Clarify documentation\n+\n+2009-04-16  Vincent Celier  <celier@adacore.com>\n+\n+\t* fmap.adb (Initialize): Show the current line when the mapping file\n+\tis detected as \"incorrectly formatted\".\n+\n+2009-04-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch12.adb: Minor reformatting\n+\n+\t* sem_ch5.adb: Minor comment addition\n+\n+\t* sem_util.adb: Minor reformatting\n+\n+\t* sinput-p.adb: Minor reformatting\n+\tAdd missing pragma Warnings (On)\n+\n 2009-04-16  Ed Falis  <falis@adacore.com>\n \n \t* s-vxwext-kernel.adb: (ERROR): deleted unused constant"}, {"sha": "0d5061dd18d80b742cb5f96498508a2b9bc189e9", "filename": "gcc/ada/fmap.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Ffmap.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Ffmap.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffmap.adb?ref=b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "patch": "@@ -321,9 +321,10 @@ package body Fmap is\n             if (Last < First + 2) or else (SP (Last - 1) /= '%')\n               or else (SP (Last) /= 's' and then SP (Last) /= 'b')\n             then\n-               Write_Str (\"warning: mapping file \"\"\");\n-               Write_Str (File_Name);\n-               Write_Line (\"\"\" is incorrectly formatted\");\n+               Write_Line\n+                 (\"warning: mapping file \"\"\" & File_Name &\n+                  \"\"\" is incorrectly formatted\");\n+               Write_Line (\"Line = \"\"\" & SP (First .. Last) & '\"');\n                Empty_Tables;\n                return;\n             end if;"}, {"sha": "16125109054f5df908b0d2715da64aefe3c151c3", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "patch": "@@ -8827,8 +8827,13 @@ package body Prj.Nmsc is\n       if Result = null then\n          return \"\";\n       else\n-         Canonical_Case_File_Name (Result.all);\n-         return Result.all;\n+         declare\n+            R : String := Result.all;\n+         begin\n+            Free (Result);\n+            Canonical_Case_File_Name (R);\n+            return R;\n+         end;\n       end if;\n    end Path_Name_Of;\n "}, {"sha": "f0212e032edb5280f80669b6cbcbb48f07aac816", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "patch": "@@ -6173,7 +6173,6 @@ package body Sem_Ch12 is\n \n       begin\n          E1 := First_Entity (P);\n-\n          while Present (E1) and then  E1 /= Instance loop\n             if Ekind (E1) = E_Package\n               and then Nkind (Parent (E1)) = N_Package_Renaming_Declaration"}, {"sha": "5cf092c9917fcdd160fe2c443ae1227333211a6a", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "patch": "@@ -2032,7 +2032,8 @@ package body Sem_Ch5 is\n       End_Scope;\n       Kill_Current_Values;\n \n-      --  No point in checking for warnings in code we generated\n+      --  Check for infinite loop. We skip this check for generated code, since\n+      --  it justs waste time and makes debugging the routine called harder.\n \n       if Comes_From_Source (N) then\n          Check_Infinite_Loop_Warning (N);"}, {"sha": "d036c858e8419be21835c4a6ebf3ef31f5f00187", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "patch": "@@ -7242,7 +7242,7 @@ package body Sem_Util is\n             end if;\n \n          when N_Reference            =>\n-               return N = Prefix (P);\n+            return N = Prefix (P);\n \n          when N_Explicit_Dereference =>\n             return False;"}, {"sha": "5a20bc7cf49d0da7542866cfb3e5ee82634b7d37", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "patch": "@@ -621,10 +621,15 @@ package Sinfo is\n    --    A flag present in the N_Assignment_Statement node. It is used only\n    --    if the type being assigned is an array type, and is set if analysis\n    --    determines that it is definitely safe to do the copy backwards, i.e.\n-   --    starting at the highest addressed element. Note that if neither of the\n-   --    flags Forwards_OK or Backwards_OK is set, it means that the front end\n-   --    could not determine that either direction is definitely safe, and a\n-   --    runtime check may be required if the backend cannot figure it out.\n+   --    starting at the highest addressed element. This is the case if either\n+   --    the operands do not overlap, or they may overlap, but if they do,\n+   --    then the left operand is at a higher address than the right operand.\n+   --\n+   --    Note: If neither of the flags Forwards_OK or Backwards_OK is set, it\n+   --    means that the front end could not determine that either direction is\n+   --    definitely safe, and a runtime check may be required if the backend\n+   --    cannot figure it out. If both flags Forwards_OK and Backwards_OK are\n+   --    set, it means that the front end can assure no overlap of operands.\n \n    --  Body_To_Inline (Node3-Sem)\n    --    present in subprogram declarations. Denotes analyzed but unexpanded\n@@ -1023,10 +1028,15 @@ package Sinfo is\n    --    A flag present in the N_Assignment_Statement node. It is used only\n    --    if the type being assigned is an array type, and is set if analysis\n    --    determines that it is definitely safe to do the copy forwards, i.e.\n-   --    starting at the lowest addressed element. Note that if neither of the\n-   --    flags Forwards_OK or Backwards_OK is set, it means that the front end\n-   --    could not determine that either direction is definitely safe, and a\n-   --    runtime check is required.\n+   --    starting at the lowest addressed element. This is the case if either\n+   --    the operands do not overlap, or they may overlap, but if they do,\n+   --    then the left operand is at a lower address than the right operand.\n+   --\n+   --    Note: If neither of the flags Forwards_OK or Backwards_OK is set, it\n+   --    means that the front end could not determine that either direction is\n+   --    definitely safe, and a runtime check may be required if the backend\n+   --    cannot figure it out. If both flags Forwards_OK and Backwards_OK are\n+   --    set, it means that the front end can assure no overlap of operands.\n \n    --  From_At_End (Flag4-Sem)\n    --    This flag is set on an N_Raise_Statement node if it corresponds to"}, {"sha": "04a4eea8fb37268b0df5b3083ffebb58d3a4e3a3", "filename": "gcc/ada/sinput-p.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fsinput-p.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4763f5c4a9d2bde0963bbb9422aa3480c5e81da/gcc%2Fada%2Fsinput-p.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-p.adb?ref=b4763f5c4a9d2bde0963bbb9422aa3480c5e81da", "patch": "@@ -51,10 +51,11 @@ package body Sinput.P is\n \n    procedure Clear_Source_File_Table is\n       use System;\n+\n    begin\n       for X in 1 .. Source_File.Last loop\n          declare\n-            S : Source_File_Record renames Source_File.Table (X);\n+            S  : Source_File_Record renames Source_File.Table (X);\n             Lo : constant Source_Ptr := S.Source_First;\n             Hi : constant Source_Ptr := S.Source_Last;\n             subtype Actual_Source_Buffer is Source_Buffer (Lo .. Hi);\n@@ -75,6 +76,8 @@ package body Sinput.P is\n             function To_Actual_Source_Ptr is new\n               Ada.Unchecked_Conversion (Address, Actual_Source_Ptr);\n \n+            pragma Warnings (On);\n+\n             Actual_Ptr : Actual_Source_Ptr :=\n                            To_Actual_Source_Ptr (S.Source_Text (Lo)'Address);\n \n@@ -155,11 +158,10 @@ package body Sinput.P is\n       Prj.Err.Scanner.Set_Special_Character ('#');\n       Prj.Err.Scanner.Set_Special_Character ('$');\n \n-      --  We scan past junk to the first interesting compilation unit\n-      --  token, to see if it is SEPARATE. We ignore WITH keywords during\n-      --  this and also PRIVATE. The reason for ignoring PRIVATE is that\n-      --  it handles some error situations, and also to handle PRIVATE WITH\n-      --  in Ada 2005 mode.\n+      --  We scan past junk to the first interesting compilation unit token, to\n+      --  see if it is SEPARATE. We ignore WITH keywords during this and also\n+      --  PRIVATE. The reason for ignoring PRIVATE is that it handles some\n+      --  error situations, and also to handle PRIVATE WITH in Ada 2005 mode.\n \n       while Token = Tok_With\n         or else Token = Tok_Private"}]}