{"sha": "e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVjZmMyOWY1OWVmYzlhOGI4YmMyOWMzNWFiMTYwYWU0ZDc2YzJiNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-25T19:19:42Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-25T19:19:42Z"}, "message": "cselib.c (entry_and_rtx_equal_p): Constify.\n\n\t* cselib.c (entry_and_rtx_equal_p): Constify.\n\t* gengtype.c (output_mangled_typename, write_types, write_local):\n\tLikewise.\n\t* gengtype.h (const_type_p): New.\n\t* see.c (eq_descriptor_extension, hash_descriptor_extension):\n\tConstify.\n\t* tlink.c (scan_linker_output): De-constify.\n\t* tree-ssa-loop-im.c (memref_eq): Constify.\n\t* tree-ssa-structalias.c (const_shared_bitmap_info_t): New.\n\t(shared_bitmap_hash, shared_bitmap_eq): Constify.\n\ncp:\n\t* parser.c (cp_parser_string_literal, cp_parser_sizeof_operand):\n\tConstify.\n\nFrom-SVN: r126926", "tree": {"sha": "25657045a0e1f680a00555098079cb87bb9d1384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25657045a0e1f680a00555098079cb87bb9d1384"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/comments", "author": null, "committer": null, "parents": [{"sha": "741ac903839251f16d331f4d1c11f444eaec684f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741ac903839251f16d331f4d1c11f444eaec684f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/741ac903839251f16d331f4d1c11f444eaec684f"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "c1e42ef48dc2666c18f2e286d4c8d16733acd148", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "patch": "@@ -1,3 +1,16 @@\n+2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cselib.c (entry_and_rtx_equal_p): Constify.\n+\t* gengtype.c (output_mangled_typename, write_types, write_local):\n+\tLikewise.\n+\t* gengtype.h (const_type_p): New.\n+\t* see.c (eq_descriptor_extension, hash_descriptor_extension):\n+\tConstify.\n+\t* tlink.c (scan_linker_output): De-constify.\n+\t* tree-ssa-loop-im.c (memref_eq): Constify.\n+\t* tree-ssa-structalias.c (const_shared_bitmap_info_t): New.\n+\t(shared_bitmap_hash, shared_bitmap_eq): Constify.\n+\n 2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-common.c (fname_as_string, c_type_hash): Constify."}, {"sha": "7b1dc9244d30f474ad8591a6b5aaf33a71173c85", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "patch": "@@ -1,3 +1,8 @@\n+2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* parser.c (cp_parser_string_literal, cp_parser_sizeof_operand):\n+\tConstify.\n+\n 2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* decl.c (typename_hash, typename_compare): Constify."}, {"sha": "b8d2b15a083fc6e759d8ab4f7865569466cb3164", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "patch": "@@ -2896,7 +2896,7 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok)\n \t{\n \t  cp_lexer_consume_token (parser->lexer);\n \t  count++;\n-\t  str.text = (unsigned char *)TREE_STRING_POINTER (tok->u.value);\n+\t  str.text = (const unsigned char *)TREE_STRING_POINTER (tok->u.value);\n \t  str.len = TREE_STRING_LENGTH (tok->u.value);\n \t  if (tok->type == CPP_WSTRING)\n \t    wide = true;\n@@ -17111,6 +17111,7 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n   static const char *format;\n   tree expr = NULL_TREE;\n   const char *saved_message;\n+  char *tmp;\n   bool saved_integral_constant_expression_p;\n   bool saved_non_integral_constant_expression_p;\n   bool pack_expansion_p = false;\n@@ -17123,12 +17124,11 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n      old message.  */\n   saved_message = parser->type_definition_forbidden_message;\n   /* And create the new one.  */\n-  parser->type_definition_forbidden_message\n-    = XNEWVEC (const char, strlen (format)\n+  parser->type_definition_forbidden_message = tmp\n+    = XNEWVEC (char, strlen (format)\n \t       + strlen (IDENTIFIER_POINTER (ridpointers[keyword]))\n \t       + 1 /* `\\0' */);\n-  sprintf ((char *) parser->type_definition_forbidden_message,\n-\t   format, IDENTIFIER_POINTER (ridpointers[keyword]));\n+  sprintf (tmp, format, IDENTIFIER_POINTER (ridpointers[keyword]));\n \n   /* The restrictions on constant-expressions do not apply inside\n      sizeof expressions.  */\n@@ -17204,7 +17204,7 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n   --skip_evaluation;\n \n   /* Free the message we created.  */\n-  free ((char *) parser->type_definition_forbidden_message);\n+  free (tmp);\n   /* And restore the old one.  */\n   parser->type_definition_forbidden_message = saved_message;\n   parser->integral_constant_expression_p"}, {"sha": "54af8e1bfa81f09f89cd7c404370d555f0ec367b", "filename": "gcc/cselib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "patch": "@@ -234,7 +234,7 @@ static int\n entry_and_rtx_equal_p (const void *entry, const void *x_arg)\n {\n   struct elt_loc_list *l;\n-  const cselib_val *v = (const cselib_val *) entry;\n+  const cselib_val *const v = (const cselib_val *) entry;\n   rtx x = (rtx) x_arg;\n   enum machine_mode mode = GET_MODE (x);\n "}, {"sha": "f1cc05b95fda81ce3e63dcea0019df4e645c2101", "filename": "gcc/gengtype.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "patch": "@@ -1751,7 +1751,7 @@ struct write_types_data\n \n static void output_escaped_param (struct walk_type_data *d,\n \t\t\t\t  const char *, const char *);\n-static void output_mangled_typename (outf_p, type_p);\n+static void output_mangled_typename (outf_p, const_type_p);\n static void walk_type (type_p t, struct walk_type_data *d);\n static void write_func_for_structure\n      (type_p orig_s, type_p s, type_p * param,\n@@ -1804,7 +1804,7 @@ struct walk_type_data\n /* Print a mangled name representing T to OF.  */\n \n static void\n-output_mangled_typename (outf_p of, type_p t)\n+output_mangled_typename (outf_p of, const_type_p t)\n {\n   if (t == NULL)\n     oprintf (of, \"Z\");\n@@ -2580,7 +2580,7 @@ write_types (type_p structures, type_p param_structs,\n \tfor (opt = s->u.s.opt; opt; opt = opt->next)\n \t  if (strcmp (opt->name, \"ptr_alias\") == 0)\n \t    {\n-\t      type_p t = (type_p) opt->info;\n+\t      const_type_p const t = (const_type_p) opt->info;\n \t      if (t->kind == TYPE_STRUCT\n \t\t  || t->kind == TYPE_UNION\n \t\t  || t->kind == TYPE_LANG_STRUCT)\n@@ -2759,7 +2759,7 @@ write_local (type_p structures, type_p param_structs)\n \tfor (opt = s->u.s.opt; opt; opt = opt->next)\n \t  if (strcmp (opt->name, \"ptr_alias\") == 0)\n \t    {\n-\t      type_p t = (type_p) opt->info;\n+\t      const_type_p const t = (const_type_p) opt->info;\n \t      if (t->kind == TYPE_STRUCT\n \t\t  || t->kind == TYPE_UNION\n \t\t  || t->kind == TYPE_LANG_STRUCT)"}, {"sha": "5fffb7ef2c995e94fbb64c7990e80540acd48e44", "filename": "gcc/gengtype.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "patch": "@@ -31,6 +31,7 @@ struct fileloc {\n /* Data types handed around within, but opaque to, the lexer and parser.  */\n typedef struct pair *pair_p;\n typedef struct type *type_p;\n+typedef const struct type *const_type_p;\n typedef struct options *options_p;\n \n /* Variables used to communicate between the lexer and the parser.  */"}, {"sha": "c58e8dd62e8a6c07383e0d755c9f56dae7fffd6e", "filename": "gcc/see.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fsee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Fsee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsee.c?ref=e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "patch": "@@ -933,12 +933,12 @@ hash_del_properties (void *p)\n static int\n eq_descriptor_extension (const void *p1, const void *p2)\n {\n-  const rtx insn = (rtx) p1;\n-  const rtx element = (rtx) p2;\n+  const_rtx const insn = (const_rtx) p1;\n+  const_rtx const element = (const_rtx) p2;\n   rtx set1 = single_set (insn);\n   rtx dest_reg1;\n   rtx set2 = NULL;\n-  rtx dest_reg2 = NULL;\n+  const_rtx dest_reg2 = NULL;\n \n   gcc_assert (set1 && element && (REG_P (element) || INSN_P (element)));\n \n@@ -962,7 +962,7 @@ eq_descriptor_extension (const void *p1, const void *p2)\n static hashval_t\n hash_descriptor_extension (const void *p)\n {\n-  const rtx r = (rtx) p;\n+  const_rtx const r = (const_rtx) p;\n   rtx set, lhs;\n \n   if (r && REG_P (r))"}, {"sha": "b6a8a18b5327a123ace1ff51bff3fd82a5bce34a", "filename": "gcc/tlink.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "patch": "@@ -658,7 +658,7 @@ scan_linker_output (const char *fname)\n       if (! sym && ! end)\n \t/* Try a mangled name in quotes.  */\n \t{\n-\t  const char *oldq = q + 1;\n+\t  char *oldq = q + 1;\n \t  demangled *dem = 0;\n \t  q = 0;\n "}, {"sha": "76619dd2c5e62dc180ca199df89d6653376489cf", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "patch": "@@ -1294,7 +1294,7 @@ memref_hash (const void *obj)\n static int\n memref_eq (const void *obj1, const void *obj2)\n {\n-  const struct mem_ref *mem1 = (const struct mem_ref *) obj1;\n+  const struct mem_ref *const mem1 = (const struct mem_ref *) obj1;\n \n   return operand_equal_p (mem1->mem, (tree) obj2, 0);\n }"}, {"sha": "efd39f0b06acfe323234992d6188895588462c13", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=e5cfc29f59efc9a8b8bc29c35ab160ae4d76c2b6", "patch": "@@ -4266,6 +4266,7 @@ typedef struct shared_bitmap_info\n   bitmap pt_vars;\n   hashval_t hashcode;\n } *shared_bitmap_info_t;\n+typedef const struct shared_bitmap_info *const_shared_bitmap_info_t;\n \n static htab_t shared_bitmap_table;\n \n@@ -4274,7 +4275,7 @@ static htab_t shared_bitmap_table;\n static hashval_t\n shared_bitmap_hash (const void *p)\n {\n-  const shared_bitmap_info_t bi = (shared_bitmap_info_t) p;\n+  const_shared_bitmap_info_t const bi = (const_shared_bitmap_info_t) p;\n   return bi->hashcode;\n }\n \n@@ -4283,8 +4284,8 @@ shared_bitmap_hash (const void *p)\n static int\n shared_bitmap_eq (const void *p1, const void *p2)\n {\n-  const shared_bitmap_info_t sbi1 = (shared_bitmap_info_t) p1;\n-  const shared_bitmap_info_t sbi2 = (shared_bitmap_info_t) p2;\n+  const_shared_bitmap_info_t const sbi1 = (const_shared_bitmap_info_t) p1;\n+  const_shared_bitmap_info_t const sbi2 = (const_shared_bitmap_info_t) p2;\n   return bitmap_equal_p (sbi1->pt_vars, sbi2->pt_vars);\n }\n "}]}