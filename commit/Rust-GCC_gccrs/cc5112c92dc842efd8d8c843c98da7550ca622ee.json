{"sha": "cc5112c92dc842efd8d8c843c98da7550ca622ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M1MTEyYzkyZGM4NDJlZmQ4ZDhjODQzYzk4ZGE3NTUwY2E2MjJlZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-07-04T07:14:54Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-07-04T07:14:54Z"}, "message": "Makefile.am (target_headers): Add fpos.h\n\n\n2003-07-03  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/Makefile.am (target_headers): Add fpos.h\n\t(bits_headers): Remove.\n\t* include/Makefile.in: Regenerate.\n\t* configure.in: Add FPOS_INC_SRCDIR, substitute it.\n\t* configure: Regenerate.\n\t* configure.host: Add fpos_include_dir.\n\t* config/os/gnu-linux/fpos.h: New.\n\t* config/os/generic/fpos.h: Add.\n\t* include/bits/fpos.h: Remove.\n\n\t* config/io/c_io_stdio.h: Remove fpos_t typedef.\n\n\t* include/bits/fstream.tcc: Tweaks.\n\t* include/std/std_fstream.h: Same.\n\n\t* testsuite/27_io/fpos/1.cc (test01): Uncomment. Move to...\n\t* testsuite/27_io/fpos/mbstate_t/1.cc: ...here.\n\t* testsuite/27_io/fpos/mbstate_t/2.cc: Same.\n\t* testsuite/27_io/fpos/mbstate_t/3.cc: Same.\n\t* testsuite/27_io/fpos/1.cc: New.\n\n2003-07-03  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Petur Runolfsson  <peturr02@ru.is>\n\n\t* include/std/std_streambuf.h: Remove _M_pos.\n\t* config/io/basic_file_stdio.h: Use seekpos instead of seekoff.\n\t* config/io/basic_file_stdio.cc: Same, use fseek instead of lseek,\n\tuse fread/fwrite instead of read/write.\n\t* testsuite/27_io/basic_filebuf/showmanyc/char/9533-2.cc: Fix.\n\t* testsuite/27_io/basic_filebuf/sputn/char/9339.cc: Close filebufs\n\tbefore reading again.\n\t* testsuite/27_io/objects/char/6.cc: Tweak.\n\nCo-Authored-By: Petur Runolfsson <peturr02@ru.is>\n\nFrom-SVN: r68913", "tree": {"sha": "f6477f6ea2ce98fc00e1b8204a966534889f6973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6477f6ea2ce98fc00e1b8204a966534889f6973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc5112c92dc842efd8d8c843c98da7550ca622ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc5112c92dc842efd8d8c843c98da7550ca622ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc5112c92dc842efd8d8c843c98da7550ca622ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc5112c92dc842efd8d8c843c98da7550ca622ee/comments", "author": null, "committer": null, "parents": [{"sha": "cc2f5d34f375b75a39068a750f5ca7c78bc2b302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2f5d34f375b75a39068a750f5ca7c78bc2b302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc2f5d34f375b75a39068a750f5ca7c78bc2b302"}], "stats": {"total": 2788, "additions": 1491, "deletions": 1297}, "files": [{"sha": "10162cce11351719edba68bd87b3b32a416015fc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -1,3 +1,38 @@\n+2003-07-03  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/Makefile.am (target_headers): Add fpos.h\n+\t(bits_headers): Remove.\n+\t* include/Makefile.in: Regenerate.\n+\t* configure.in: Add FPOS_INC_SRCDIR, substitute it.\n+\t* configure: Regenerate.\n+\t* configure.host: Add fpos_include_dir.\n+\t* config/os/gnu-linux/fpos.h: New.\n+\t* config/os/generic/fpos.h: Add.\t\n+\t* include/bits/fpos.h: Remove.\t\n+\n+\t* config/io/c_io_stdio.h: Remove fpos_t typedef.\n+\n+\t* include/bits/fstream.tcc: Tweaks.\n+\t* include/std/std_fstream.h: Same.\n+\t\n+\t* testsuite/27_io/fpos/1.cc (test01): Uncomment. Move to...\n+\t* testsuite/27_io/fpos/mbstate_t/1.cc: ...here.\n+\t* testsuite/27_io/fpos/mbstate_t/2.cc: Same.\n+\t* testsuite/27_io/fpos/mbstate_t/3.cc: Same.\n+\t* testsuite/27_io/fpos/1.cc: New.\n+\t\n+2003-07-03  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Petur Runolfsson  <peturr02@ru.is>\n+\t\n+\t* include/std/std_streambuf.h: Remove _M_pos.\n+\t* config/io/basic_file_stdio.h: Use seekpos instead of seekoff.\n+\t* config/io/basic_file_stdio.cc: Same, use fseek instead of lseek,\n+\tuse fread/fwrite instead of read/write.\n+\t* testsuite/27_io/basic_filebuf/showmanyc/char/9533-2.cc: Fix.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/9339.cc: Close filebufs\n+\tbefore reading again.\n+\t* testsuite/27_io/objects/char/6.cc: Tweak.\n+\t\n 2003-07-03  David Edelsohn  <edelsohn@gnu.org>\n \n \t* testsuite/22_locale/num_put/put/char/7.cc: Guard with"}, {"sha": "d13d33d8e0288b9b128ee288dd0acab1161162a7", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -1362,7 +1362,12 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       exit 1\n       ;;\n   esac\n+\n+  dnl Set directory for fpos.h\n+  FPOS_H=$fpos_include_dir\n+\n   AC_SUBST(CSTDIO_H)\n+  AC_SUBST(FPOS_H)\n   AC_SUBST(BASIC_FILE_H)\n   AC_SUBST(BASIC_FILE_CC)\n ])"}, {"sha": "6b1347d531f02f98d18bf6abdc5e89998ebaa4a1", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -1374,7 +1374,12 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       exit 1\n       ;;\n   esac\n+\n+  dnl Set directory for fpos.h\n+  FPOS_H=$fpos_include_dir\n+\n   AC_SUBST(CSTDIO_H)\n+  AC_SUBST(FPOS_H)\n   AC_SUBST(BASIC_FILE_H)\n   AC_SUBST(BASIC_FILE_CC)\n ])"}, {"sha": "a5453c24200a6835328d37f1c5a3e0c92135c544", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -207,33 +207,33 @@ namespace std\n  \n   streamsize \n   __basic_file<char>::xsgetn(char* __s, streamsize __n)\n-  {\n-    streamsize __ret;\n-    do\n-      __ret = read(this->fd(), __s, __n);\n-    while (__ret == -1L && errno == EINTR);\n-    return __ret;\n-  }\n+  { return fread(__s, 1, __n, _M_cfile); }\n     \n   streamsize \n   __basic_file<char>::xsputn(const char* __s, streamsize __n)\n+  { return fwrite(__s, 1, __n, _M_cfile); }\n+\n+  streampos\n+  __basic_file<char>::seekoff(streamoff off, ios_base::seekdir way, \n+\t\t\t      ios_base::openmode /*__mode*/)\n   {\n-    streamsize __ret;\n-    do\n-      __ret = write(this->fd(), __s, __n);\n-    while (__ret == -1L && errno == EINTR);\n-    return __ret;\n+    streampos ret(-1);\n+    fpos_t tmp;\n+    if (!fseek(_M_cfile, off, way) && !fgetpos(_M_cfile, &tmp))\n+      ret = tmp; \n+    return ret;\n+  }\n+\n+  streampos\n+  __basic_file<char>::seekpos(streampos pos, ios_base::openmode /*__mode*/)\n+  {\n+    streampos ret(-1);\n+    fpos_t tmp = pos; \n+    if (!fsetpos(_M_cfile, &tmp) && !fgetpos(_M_cfile, &tmp))\n+      ret = tmp; \n+    return ret;\n   }\n-  \n-  streamoff\n-  __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way, \n-\t\t\t      ios_base::openmode /*__mode*/)\n-  { return lseek(this->fd(), __off, __way); }\n \n-  streamoff\n-  __basic_file<char>::seekpos(streamoff __pos, ios_base::openmode /*__mode*/)\n-  { return lseek(this->fd(), __pos, ios_base::beg); }\n-  \n   int \n   __basic_file<char>::sync() \n   { return fflush(_M_cfile); }"}, {"sha": "0b984ebb2a97c4ccbad420595ae4add171b165f6", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -99,12 +99,12 @@ namespace std\n       streamsize \n       xsgetn(char* __s, streamsize __n);\n \n-      streamoff\n+      streampos\n       seekoff(streamoff __off, ios_base::seekdir __way, \n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n-      streamoff\n-      seekpos(streamoff __pos, \n+      streampos\n+      seekpos(streampos __pos, \n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n       int "}, {"sha": "7eb1828e48227993e31903d360c88651350de3e0", "filename": "libstdc++-v3/config/io/c_io_stdio.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -1,6 +1,6 @@\n // underlying io library  -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,20 +38,19 @@\n \n namespace std \n {\n-// for fpos.h\n+  // for fpos.h\n   typedef long  \tstreamoff;\n   typedef ptrdiff_t\tstreamsize; // Signed integral type\n #if _GLIBCPP_USE_WCHAR_T\n   typedef ptrdiff_t\twstreamsize;\n #endif\n-  typedef fpos_t  \t__c_streampos;\n \n   typedef __gthread_mutex_t __c_lock;\n \n-// for basic_file.h\n+  // for basic_file.h\n   typedef FILE __c_file;\n \n-// for ios_base.h\n+  // for ios_base.h\n   struct __ios_flags\n   {\n     typedef short __int_type;\n@@ -90,4 +89,4 @@ namespace std\n   };\n }\n \n-#endif // _CPP_IO_STDIO_H\n+#endif"}, {"sha": "baaeb62f2643d68e462e812d434c78d061025847", "filename": "libstdc++-v3/config/os/generic/fpos.h", "status": "renamed", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ffpos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ffpos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ffpos.h?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -1,6 +1,7 @@\n-// File position object and stream types\n+// File position object and stream types, generic version -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -55,26 +56,22 @@ namespace std\n   template<typename _StateT>\n     class fpos\n     {\n-    public:\n-      // Types:\n-      typedef _StateT __state_type;\n-\n     private:\n       streamoff \t_M_off;\n-      __state_type \t_M_st;\n+      _StateT \t\t_M_st;\n \n     public:\n-      __state_type\n+      _StateT\n       state() const  { return _M_st; }\n \n       void \n-      state(__state_type __st)  { _M_st = __st; }\n+      state(_StateT __st)  { _M_st = __st; }\n+\n+      fpos(): _M_off(streamoff()), _M_st(_StateT()) { }\n \n       // NB: The standard defines only the implicit copy ctor and the\n       // previous two members.  The rest is a \"conforming extension\".\n-      fpos(): _M_off(streamoff()), _M_st(__state_type()) { }\n-\n-      fpos(streamoff __off, __state_type __st = __state_type())\n+      fpos(streamoff __off, _StateT __st = _StateT())\n       :  _M_off(__off), _M_st(__st) { }\n \n       operator streamoff() const { return _M_off; }\n@@ -107,13 +104,7 @@ namespace std\n \n       bool  \n       operator!=(const fpos& __pos) const\n-      { return _M_off != __pos._M_off; }\n-\n-      streamoff \n-      _M_position() const { return _M_off; }\n-\n-      void\n-      _M_position(streamoff __off)  { _M_off = __off; }\n+      { return !(*this == __pos); }\n     };\n \n   /// 27.2, paragraph 10 about fpos/char_traits circularity", "previous_filename": "libstdc++-v3/include/bits/fpos.h"}, {"sha": "1a3e474723813977541d5f5d5512ad311dd5f48e", "filename": "libstdc++-v3/config/os/gnu-linux/fpos.h", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Ffpos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Ffpos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Ffpos.h?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -0,0 +1,144 @@\n+// File position object and stream types, GNU version -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003 \n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 27 Input/output library\n+//\n+\n+/** @file fpos.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _CPP_BITS_FPOS_H\n+#define _CPP_BITS_FPOS_H 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++io.h>\n+#include <cwchar> \t// For mbstate_t.\n+\n+namespace std\n+{\n+  // 27.4.1  Types\n+\n+  // [27.4.3] template class fpos\n+  /**\n+   *  @doctodo\n+  */\n+  template<typename _StateT>\n+    class fpos\n+    {\n+    private:\n+      fpos_t\t\t_M_pos;\n+\n+    public:\n+      _StateT\n+      state() const;\n+\n+      void \n+      state(_StateT __st);\n+\n+      fpos() : _M_pos(fpos_t()) { }\n+\n+      // NB: The standard defines only the implicit copy ctor and the\n+      // previous two members.  The rest is a \"conforming extension\".\n+      fpos(streamoff __off, _StateT __st = _StateT());\n+\n+      fpos(const fpos_t& __pos) : _M_pos(__pos) { }\n+\n+      operator streamoff() const { return _M_pos.__pos; }\n+\n+      operator fpos_t() const { return _M_pos; }\n+\n+      fpos& \n+      operator+=(streamoff __off) \n+      { \n+\t_M_pos.__pos += __off; \n+\treturn *this; \n+      }\n+\n+      fpos& \n+      operator-=(streamoff __off) \n+      { \n+\t_M_pos.__pos -= __off; \n+\treturn *this; \n+      }\n+\n+      fpos \n+      operator+(streamoff __off) \n+      { \n+\tfpos __t(*this); \n+\t__t += __off;\n+\treturn __t;\n+      }\n+\n+      fpos      \n+      operator-(streamoff __off) \n+      { \n+\tfpos __t(*this); \n+\t__t -= __off; \n+\treturn __t;\n+      }\n+\n+      bool  \n+      operator==(const fpos& __pos) const\n+      { return _M_pos.__pos == __pos._M_pos.__pos; }\n+\n+      bool  \n+      operator!=(const fpos& __pos) const\n+      { return !(*this == __pos); }\n+    };\n+\n+  template<>\n+    inline mbstate_t\n+    fpos<mbstate_t>::state() const { return _M_pos.__state; }\n+\n+  template<>\n+    inline void \n+    fpos<mbstate_t>::state(mbstate_t __st) { _M_pos.__state = __st; }\n+\n+  template<>\n+    inline \n+    fpos<mbstate_t>::fpos(streamoff __off, mbstate_t __st) : _M_pos(fpos_t())\n+    { \n+      _M_pos.__pos = __off;\n+      _M_pos.__state = __st;\n+    }\n+\n+  /// 27.2, paragraph 10 about fpos/char_traits circularity\n+  typedef fpos<mbstate_t> \t\tstreampos;\n+#  ifdef _GLIBCPP_USE_WCHAR_T\n+  /// 27.2, paragraph 10 about fpos/char_traits circularity\n+  typedef fpos<mbstate_t> \t\twstreampos;\n+#  endif\n+}  // namespace std\n+\n+#endif "}, {"sha": "0c88438fe26168a20eeaa42e124680ffdaa29fe8", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1197, "deletions": 1188, "changes": 2385, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee"}, {"sha": "09ea2c54e5de8e3d2cad8830af333af07533484d", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -30,6 +30,8 @@\n #   abi_baseline_pair      directory name for ABI compat testing,\n #                          defaults to host_cpu-host_os (as per config.guess)\n #\n+#   fpos_include_dir       directory for definition of fpos template\n+#\n #   ATOMICITYH             location of atomicity.h,\n #                          defaults to cpu_include_dir\n #\n@@ -52,7 +54,7 @@\n # systems out there.  :-)\n c_model=c_std\n c_compatibility=no\n-\n+fpos_include_dir=generic\n \n # HOST-SPECIFIC OVERRIDES\n # Set any CPU-dependent bits.\n@@ -142,6 +144,7 @@ case \"${host_os}\" in\n     ;;\n   gnu* | linux*)\n     os_include_dir=\"os/gnu-linux\"\n+    fpos_include_dir=$os_include_dir\n     ;;\n   hpux*)\n     os_include_dir=\"os/hpux\""}, {"sha": "160a7fec1992ec8ea12d7973b9b3994dfdbb8a49", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -443,10 +443,13 @@ GLIBCPP_CONFIGURE_TESTSUITE\n # Propagate the target-specific source directories through the build chain.\n # (Nothing currently uses cpu_include_dir directly; only ATOMICITYH \n # uses it, and it only gets used in this file.)\n-OS_INC_SRCDIR=config/${os_include_dir}\n ATOMICITY_INC_SRCDIR=config/${ATOMICITYH}\n-AC_SUBST(OS_INC_SRCDIR)\n+OS_INC_SRCDIR=config/${os_include_dir}\n+FPOS_INC_SRCDIR=config/${fpos_include_dir}\n AC_SUBST(ATOMICITY_INC_SRCDIR)\n+AC_SUBST(FPOS_INC_SRCDIR)\n+AC_SUBST(OS_INC_SRCDIR)\n+\n \n # Determine cross-compile flags and all AM_CONDITIONALs.\n AC_SUBST(GLIBCPP_IS_CROSS_COMPILING)"}, {"sha": "bf88735227a845725d8362b409fed3d33b6620d3", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -116,7 +116,6 @@ bits_headers = \\\n \t${bits_srcdir}/cpp_type_traits.h \\\n \t${bits_srcdir}/demangle.h \\\n \t${bits_srcdir}/deque.tcc \\\n-\t${bits_srcdir}/fpos.h \\\n \t${bits_srcdir}/fstream.tcc \\\n \t${bits_srcdir}/functexcept.h \\\n \t${bits_srcdir}/gslice.h \\\n@@ -323,7 +322,8 @@ target_headers = \\\n \t${target_srcdir}/ctype_inline.h \\\n \t${target_srcdir}/ctype_noninline.h \\\n \t${target_srcdir}/os_defines.h \\\n-\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \n+\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n+\t${glibcpp_srcdir}/@FPOS_INC_SRCDIR@/fpos.h \n \n # Non-installed target_header files.\n target_headers_noinst = \\"}, {"sha": "0233ca57d613049fe2a93b9381e3f82275050678", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -91,6 +91,8 @@ DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+FPOS_H = @FPOS_H@\n+FPOS_INC_SRCDIR = @FPOS_INC_SRCDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n@@ -232,7 +234,6 @@ bits_headers = \\\n \t${bits_srcdir}/cpp_type_traits.h \\\n \t${bits_srcdir}/demangle.h \\\n \t${bits_srcdir}/deque.tcc \\\n-\t${bits_srcdir}/fpos.h \\\n \t${bits_srcdir}/fstream.tcc \\\n \t${bits_srcdir}/functexcept.h \\\n \t${bits_srcdir}/gslice.h \\\n@@ -433,7 +434,8 @@ target_headers = \\\n \t${target_srcdir}/ctype_inline.h \\\n \t${target_srcdir}/ctype_noninline.h \\\n \t${target_srcdir}/os_defines.h \\\n-\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \n+\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n+\t${glibcpp_srcdir}/@FPOS_INC_SRCDIR@/fpos.h \n \n \n # Non-installed target_header files."}, {"sha": "bb5316881055c4247c2d3a9fe54e450c4a594447", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -1,4 +1,4 @@\n-// basic_ios locale and locale-related member functions -*- C++ -*-\n+// basic_ios member functions -*- C++ -*-\n \n // Copyright (C) 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n //"}, {"sha": "fddfd63e72118cdeb9993bcd917393996f7f98c9", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -98,9 +98,9 @@ namespace std\n \t      _M_writing = false;\n \t      _M_set_buffer(-1);\n \n+\t      // 27.8.1.3,4\n \t      if ((__mode & ios_base::ate) \n \t\t  && this->seekoff(0, ios_base::end, __mode) < 0)\n-\t\t// 27.8.1.3,4\n \t\tthis->close();\n \t      else\n \t\t__ret = this;\n@@ -203,7 +203,8 @@ namespace std\n \t  streamsize __ilen = 0;\n \t  if (__check_facet(_M_codecvt).always_noconv())\n \t    {\n-\t      __elen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()), __buflen);\n+\t      __elen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()), \n+\t\t\t\t      __buflen);\n \t      __ilen = __elen;\n \t    }\n \t  else\n@@ -490,11 +491,8 @@ namespace std\n \t  // Ditch any pback buffers to avoid confusion.\n \t  _M_destroy_pback();\n \n-\t  // Sync the internal and external streams.\t      \n-\t  off_type __computed_off = __off;\n-\t  \n-\t  if (this->pbase() < this->pptr()\n-\t      || _M_last_overflowed)\n+\t  off_type __computed_off = __off;\t  \n+\t  if (this->pbase() < this->pptr())\n \t    {\n \t      // Part one: update the output sequence.\n \t      this->sync();\n@@ -505,7 +503,7 @@ namespace std\n \t  else if (_M_reading && __way == ios_base::cur)\n \t    __computed_off += this->gptr() - this->egptr();\n \t  \n-\t  // Return pos_type(off_type(-1)) in case of failure.\n+\t  // Returns pos_type(off_type(-1)) in case of failure.\n \t  __ret = _M_file.seekoff(__computed_off * __width, __way, __mode);\n \t  \n \t  _M_reading = false;"}, {"sha": "b97c9443de955069eeb29a6b5df8084071beb815", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -218,9 +218,7 @@ namespace std\n       */\n       virtual\n       ~basic_filebuf()\n-      {\n-\tthis->close();\n-      }\n+      { this->close(); }\n \n       // Members:\n       /**"}, {"sha": "0943739a1c821e47495b1aea98fb80285b9fb8ae", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -183,13 +183,6 @@ namespace std\n       */\n       locale \t\t\t_M_buf_locale;\t\n \n-      /**\n-       *  @if maint\n-       *  Yet unused.\n-       *  @endif\n-      */\n-      fpos<__state_type>\t_M_pos;\n-\n   public:\n       /// Destructor deallocates no buffer space.\n       virtual "}, {"sha": "3a6aa302cce4a7edd7a383c181822de0e2b795d3", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/showmanyc/char/9533-2.cc", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fshowmanyc%2Fchar%2F9533-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fshowmanyc%2Fchar%2F9533-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fshowmanyc%2Fchar%2F9533-2.cc?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -27,32 +27,28 @@ void test_02()\n   using namespace std;\n   bool test = true;  \n   const char* name = \"tmp_file1\";\n-\n   const char* strlit = \"0123456789\";\n   \n-  filebuf fbout;\n-  fbout.open(name, ios_base::out | ios_base::trunc);\n-\t\n+  filebuf fb;\n+\n   int written = 0;\n+  fb.open(name, ios_base::out | ios_base::trunc);\t\n   for (int i = 0; i < BUFSIZ; ++i)\n-    written += fbout.sputn(strlit, 10);\n-\n-  fbout.close();\n+    written += fb.sputn(strlit, 10);\n+  fb.close();\n   \n-  ifstream in(name);\n-  int sum = 0;\n-  bool gotsome;\n-\n+  int read = 0;\n+  int n = 0;\n+  char buf[10];\n+  fb.open(name, ios_base::in);\n   do\n     {\n-      char buf[100];\n-      int n = in.readsome(buf, sizeof(buf));\n-      gotsome = (n > 0);\n-      sum += n;\n+      n = fb.sgetn(buf, sizeof(buf));\n+      read += n;\n     }\n-  while (gotsome);\n+  while (n);\n \n-  VERIFY( sum == written );\n+  VERIFY( read == written );\n }\n \n int"}, {"sha": "fb93139862015176239188aa7363b39eb3dac4cb", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/9339.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F9339.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F9339.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F9339.cc?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -31,12 +31,14 @@ void test01()\n   fbuf01.open(\"tmp_9339\", ios_base::out | ios_base::trunc);\n   streamsize s1 = fbuf01.sputn(\"Pete Goldlust @ Carl Hammer Gallery\", len);\n   VERIFY( s1 == len );\n+  fbuf01.close();\n \n   filebuf fbuf02;\n   char buf[256];\n   fbuf02.open(\"tmp_9339\", ios_base::in);\n   streamsize s2 = fbuf02.sgetn(buf, 256);\n   VERIFY( s2 == len );\n+  fbuf02.close();\n }\n \n int main()"}, {"sha": "3a8fef7722f6dd95f32119bad61731b12a05037a", "filename": "libstdc++-v3/testsuite/27_io/fpos/mbstate_t/1.cc", "status": "renamed", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F1.cc?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -38,11 +38,11 @@ void test01()\n   bool test = true;\n \n   typedef std::mbstate_t state_type;\n-  state_type state01;\n-  state_type state02;\n+  state_type state01 = state_type();\n+  state_type state02 = state_type();\n \n-  std::streampos pos01;\n-  std::streampos pos02;\n+  std::streampos pos01(0);\n+  std::streampos pos02(0);\n \n   std::streamoff off01;\n   std::streamoff off02;\n@@ -53,15 +53,16 @@ void test01()\n   // 27.4.3.1 fpos members\n   // void state(state_type s);\n   // state_type state();\n-#if 0\n-// XXX Need to have some sanity checking for the mbstate_t type, or\n-// whatever the insantiating type for class fpos happens to be for\n-// streampos, as things like equality operators and assignment\n-// operators, increment and deincrement operators need to be in place.\n+\n+  // XXX Need to have better sanity checking for the mbstate_t type,\n+  // or whatever the insantiating type for class fpos happens to be\n+  // for streampos, as things like equality operators and assignment\n+  // operators, increment and deincrement operators need to be in\n+  // place.\n   pos01.state(state02);\n   state01 = pos01.state();\n-  VERIFY( state01 == state02 );\n-#endif\n+  test = memcmp(&state01, &state02, sizeof(state_type)) == 0;\n+  VERIFY( test );\n }\n \n int main() ", "previous_filename": "libstdc++-v3/testsuite/27_io/fpos/1.cc"}, {"sha": "46c64b8bef5a6eec95a76c77fc5bf73bb170bd75", "filename": "libstdc++-v3/testsuite/27_io/fpos/mbstate_t/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F2.cc?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "previous_filename": "libstdc++-v3/testsuite/27_io/fpos/2.cc"}, {"sha": "777de9e7ad0797a3cf8f9a864fd4239f6e5f0beb", "filename": "libstdc++-v3/testsuite/27_io/fpos/mbstate_t/3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F3.cc?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "previous_filename": "libstdc++-v3/testsuite/27_io/fpos/3.cc"}, {"sha": "af3aa8c0b479f8bbf592110f0b52f85d698fb786", "filename": "libstdc++-v3/testsuite/27_io/objects/char/6.cc", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5112c92dc842efd8d8c843c98da7550ca622ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6.cc?ref=cc5112c92dc842efd8d8c843c98da7550ca622ee", "patch": "@@ -26,21 +26,31 @@\n \n #include <iostream>\n #include <streambuf>\n+#include <testsuite_hooks.h>\n \n class Badbuf : public std::streambuf\n {\n protected:\n   virtual int sync()\n-  {\n-    return -1;\n-  }\n+  { return -1; }\n };\n \n void test06()\n {\n-  std::ios_base::Init init;\n-  std::cout.rdbuf(new Badbuf);\n-  std::cout.exceptions(std::ios_base::badbit);\n+  bool test = true;\n+\n+  try\n+    {\n+      // No-op in current code.\n+      std::ios_base::Init init;\n+      std::cout.rdbuf(new Badbuf);\n+      std::cout.exceptions(std::ios_base::badbit);\n+    }\n+  catch(...)\n+    {\n+      test = false;\n+    }\n+  VERIFY( test );\n }\n \n int main()"}]}