{"sha": "ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U5NWFiYzQxZTk5OGM4ZDFlMWIyMTEyYTYzNGQ1YTZjZGQ5ZWRlMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-11-22T20:37:58Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-11-22T20:37:58Z"}, "message": "C/C++: fix quoting of \"aka\" typedef information (PR 62170)\n\nPR 62170 describes a problem with how the quoting in pp_format\ninteracts with the \"aka\" information for typedefs in %qT for\nthe C family of frontends, and also now for %qH and %qI in the\nC++ frontend: we print:\n\n  'Py_ssize_t* {aka int*}'\n   ^^^^^^^^^^^^^^^^^^^^^^ colorized as \"quote\"\n\ni.e.\n  '[START_COLOR]Py_ssize_t* {aka int*}[END_COLOR]'\n\nwhen we should print:\n\n  'Py_ssize_t*' {aka 'int*'}\n   ^^^^^^^^^^^        ^^^^ colorized as \"quote\"\n\ni.e.\n  '[START_COLOR]Py_ssize_t*[END_COLOR]' {aka '[START_COLOR]int*[END_COLOR]'}\n\nwhere the opening and closing quote characters and colorization are\nadded by the 'q' handling within pp_format.\n\nThis patch fixes the quoting by updating the %T handling in C and C++\nand the %H/%I handling in C++ to insert the quoting appropriately.\nIt converts the \"quote\" param of the pp_format_decoder callback from\nbool to bool *, allowing for the %T and %H/%I handlers to write\nfalse back to it, to avoid printing the closing quote for the cases\nlike the above where the trailing closing quote isn't needed.\n\nIt introduces pp_begin_quote/pp_end_quote to simplify this.  These\ntake a \"bool show_color\", rather than using \"pp_show_color (pp)\"\nsince cxx_pp's pp_show_color isn't currently initialized (since\ncxx_initialize_diagnostics happens before diagnostic_color_init).\n\ngcc/c/ChangeLog:\n\tPR c++/62170\n\t* c-objc-common.c (c_tree_printer): Convert penultimate param from\n\tbool to bool *.  Within '%T' handling, if showing an \"aka\", use\n\t\"quoted\" param to add appropriate quoting.\n\ngcc/cp/ChangeLog:\n\tPR c++/62170\n\t* error.c (type_to_string): Add leading comment.  Add params\n\t\"postprocessed\", \"quote\", and \"show_color\", using them to fix\n\tquoting of the \"aka\" for types involving typedefs.\n\t(arg_to_string): Update for new params to type_to_string.\n\t(cxx_format_postprocessor::handle): Likewise.\n\t(cp_printer): Convert penultimate param from bool to bool *.\n\tUpdate call to type_to_string and calls to\n\tdefer_phase_2_of_type_diff.\n\ngcc/fortran/ChangeLog:\n\tPR c++/62170\n\t* error.c (gfc_notify_std): Convert \"quoted\" param from bool to\n\tbool *.\n\ngcc/ChangeLog:\n\tPR c++/62170\n\t* pretty-print.c (pp_format): Move quoting implementation to\n\tpp_begin_quote and pp_end_quote.  Update pp_format_decoder call\n\tto pass address of \"quote\" local.\n\t(pp_begin_quote): New function.\n\t(pp_end_quote): New function.\n\t* pretty-print.h (printer_fn): Convert penultimate param from bool\n\tto bool *.\n\t(pp_begin_quote): New decl.\n\t(pp_end_quote): New decl.\n\t* tree-diagnostic.c (default_tree_printer): Convert penultimate\n\tparam from bool to bool *.\n\t* tree-diagnostic.h (default_tree_printer): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/62170\n\t* g++.dg/diagnostic/aka1.C: Update expected error messages to\n\treflect fixes to quoting.\n\t* g++.dg/diagnostic/aka2.C: New test case.\n\t* g++.dg/parse/error55.C: Update expected error messages to\n\treflect fixes to quoting.\n\t* gcc.dg/diag-aka-1.c: Likewise.\n\t* gcc.dg/diag-aka-2.c: New test case.\n\t* gcc.dg/pr13804-1.c: Update expected error messages to reflect\n\tfixes to quoting.\n\t* gcc.dg/pr56980.c: Likewise.\n\t* gcc.dg/pr65050.c: Likewise.\n\t* gcc.dg/redecl-14.c: Likewise.\n\t* gcc.dg/utf16-4.c Likewise.\n\t* gcc.target/i386/sse-vect-types.c (__m128d): Likewise.\n\t* obj-c++.dg/invalid-type-1.mm: Likewise.\n\t* objc.dg/proto-lossage-4.m: Likewise.\n\nFrom-SVN: r255076", "tree": {"sha": "1dfdcc2ae24d09d53824e4b7b34934a19d570519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfdcc2ae24d09d53824e4b7b34934a19d570519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8d9aa38aed6489fa28308d3955e3467c5eb935b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d9aa38aed6489fa28308d3955e3467c5eb935b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d9aa38aed6489fa28308d3955e3467c5eb935b"}], "stats": {"total": 312, "additions": 255, "deletions": 57}, "files": [{"sha": "c9793ece18d1e595632f3989cd737aa0ceefff39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -1,3 +1,19 @@\n+2017-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/62170\n+\t* pretty-print.c (pp_format): Move quoting implementation to\n+\tpp_begin_quote and pp_end_quote.  Update pp_format_decoder call\n+\tto pass address of \"quote\" local.\n+\t(pp_begin_quote): New function.\n+\t(pp_end_quote): New function.\n+\t* pretty-print.h (printer_fn): Convert penultimate param from bool\n+\tto bool *.\n+\t(pp_begin_quote): New decl.\n+\t(pp_end_quote): New decl.\n+\t* tree-diagnostic.c (default_tree_printer): Convert penultimate\n+\tparam from bool to bool *.\n+\t* tree-diagnostic.h (default_tree_printer): Likewise.\n+\n 2017-11-22  Jeff Law  <law@redhat.com>\n \n \t* gimple-ssa-evrp-analyze.c (evrp_range_analyzer::evrp_range_analyzer)"}, {"sha": "344eb262a1b8e17e05677f100f459f9caba25254", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -1,3 +1,10 @@\n+2017-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/62170\n+\t* c-objc-common.c (c_tree_printer): Convert penultimate param from\n+\tbool to bool *.  Within '%T' handling, if showing an \"aka\", use\n+\t\"quoted\" param to add appropriate quoting.\n+\n 2017-11-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/60336"}, {"sha": "6d923eb64e753ee6097efcd2e31294935c49abfb", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-objc-common.h\"\n \n static bool c_tree_printer (pretty_printer *, text_info *, const char *,\n-\t\t\t    int, bool, bool, bool, bool, const char **);\n+\t\t\t    int, bool, bool, bool, bool *, const char **);\n \n bool\n c_missing_noreturn_ok_p (tree decl)\n@@ -79,7 +79,7 @@ c_objc_common_init (void)\n static bool\n c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n \t\tint precision, bool wide, bool set_locus, bool hash,\n-\t\tbool, const char **)\n+\t\tbool *quoted, const char **)\n {\n   tree t = NULL_TREE;\n   tree name;\n@@ -166,12 +166,20 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n \t      return true;\n \n \t    /* They're not, print the stripped version now.  */\n+\t    if (*quoted)\n+\t      pp_end_quote (pp, pp_show_color (pp));\n \t    pp_c_whitespace (cpp);\n \t    pp_left_brace (cpp);\n \t    pp_c_ws_string (cpp, _(\"aka\"));\n \t    pp_c_whitespace (cpp);\n+\t    if (*quoted)\n+\t      pp_begin_quote (pp, pp_show_color (pp));\n \t    cpp->type_id (TYPE_CANONICAL (t));\n+\t    if (*quoted)\n+\t      pp_end_quote (pp, pp_show_color (pp));\n \t    pp_right_brace (cpp);\n+\t    /* No further closing quotes are needed.  */\n+\t    *quoted = false;\n \t  }\n \treturn true;\n       }"}, {"sha": "f97187eaf1cd950d5c42c58b0b7fef8aa0ae032d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -1,3 +1,15 @@\n+2017-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/62170\n+\t* error.c (type_to_string): Add leading comment.  Add params\n+\t\"postprocessed\", \"quote\", and \"show_color\", using them to fix\n+\tquoting of the \"aka\" for types involving typedefs.\n+\t(arg_to_string): Update for new params to type_to_string.\n+\t(cxx_format_postprocessor::handle): Likewise.\n+\t(cp_printer): Convert penultimate param from bool to bool *.\n+\tUpdate call to type_to_string and calls to\n+\tdefer_phase_2_of_type_diff.\n+\n 2017-11-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/60336"}, {"sha": "a47822a2d1bdb8894039f3834cca9e65123e3191", "filename": "gcc/cp/error.c", "status": "modified", "additions": 81, "deletions": 18, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -57,7 +57,7 @@ static const char *expr_to_string (tree);\n static const char *fndecl_to_string (tree, int);\n static const char *op_to_string\t(bool, enum tree_code);\n static const char *parm_to_string (int);\n-static const char *type_to_string (tree, int);\n+static const char *type_to_string (tree, int, bool, bool *, bool);\n \n static void dump_alias_template_specialization (cxx_pretty_printer *, tree, int);\n static void dump_type (cxx_pretty_printer *, tree, int);\n@@ -99,7 +99,7 @@ static void cp_diagnostic_starter (diagnostic_context *, diagnostic_info *);\n static void cp_print_error_function (diagnostic_context *, diagnostic_info *);\n \n static bool cp_printer (pretty_printer *, text_info *, const char *,\n-\t\t\tint, bool, bool, bool, bool, const char **);\n+\t\t\tint, bool, bool, bool, bool *, const char **);\n \n /* Struct for handling %H or %I, which require delaying printing the\n    type until a postprocessing stage.  */\n@@ -3144,16 +3144,48 @@ op_to_string (bool assop, enum tree_code p)\n   return id ? IDENTIFIER_POINTER (id) : M_(\"<unknown>\");\n }\n \n+/* Return a GC-allocated representation of type TYP, with verbosity VERBOSE.\n+\n+   If QUOTE is non-NULL and if *QUOTE is true, then quotes are added to the\n+   string in appropriate places, and *QUOTE is written to with false\n+   to suppress pp_format's trailing close quote so that e.g.\n+     foo_typedef {aka underlying_foo} {enum}\n+   can be printed by \"%qT\" as:\n+     `foo_typedef' {aka `underlying_foo'} {enum}\n+   rather than:\n+     `foo_typedef {aka underlying_foo} {enum}'\n+   When adding such quotes, if POSTPROCESSED is true (for handling %H and %I)\n+   then a leading open quote will be added, whereas if POSTPROCESSED is false\n+   (for handling %T) then any leading quote has already been added by\n+   pp_format, or is not needed due to QUOTE being NULL (for template arguments\n+   within %H and %I).\n+\n+   SHOW_COLOR is used to determine the colorization of any quotes that\n+   are added.  */\n+\n static const char *\n-type_to_string (tree typ, int verbose)\n+type_to_string (tree typ, int verbose, bool postprocessed, bool *quote,\n+\t\tbool show_color)\n {\n   int flags = 0;\n   if (verbose)\n     flags |= TFF_CLASS_KEY_OR_ENUM;\n   flags |= TFF_TEMPLATE_HEADER;\n \n   reinit_cxx_pp ();\n+\n+  if (postprocessed && quote && *quote)\n+    pp_begin_quote (cxx_pp, show_color);\n+\n+  struct obstack *ob = pp_buffer (cxx_pp)->obstack;\n+  int type_start, type_len;\n+  type_start = obstack_object_size (ob);\n+\n   dump_type (cxx_pp, typ, flags);\n+\n+  /* Remember the end of the initial dump.  */\n+  type_len = obstack_object_size (ob) - type_start;\n+\n   /* If we're printing a type that involves typedefs, also print the\n      stripped version.  But sometimes the stripped version looks\n      exactly the same, so we don't want it after all.  To avoid printing\n@@ -3162,21 +3194,44 @@ type_to_string (tree typ, int verbose)\n       && !uses_template_parms (typ))\n     {\n       int aka_start, aka_len; char *p;\n-      struct obstack *ob = pp_buffer (cxx_pp)->obstack;\n-      /* Remember the end of the initial dump.  */\n-      int len = obstack_object_size (ob);\n       tree aka = strip_typedefs (typ);\n+      if (quote && *quote)\n+\tpp_end_quote (cxx_pp, show_color);\n       pp_string (cxx_pp, \" {aka\");\n       pp_cxx_whitespace (cxx_pp);\n+      if (quote && *quote)\n+\tpp_begin_quote (cxx_pp, show_color);\n       /* And remember the start of the aka dump.  */\n       aka_start = obstack_object_size (ob);\n       dump_type (cxx_pp, aka, flags);\n       aka_len = obstack_object_size (ob) - aka_start;\n+      if (quote && *quote)\n+\tpp_end_quote (cxx_pp, show_color);\n       pp_right_brace (cxx_pp);\n       p = (char*)obstack_base (ob);\n-      /* If they are identical, cut off the aka with a NUL.  */\n-      if (len == aka_len && memcmp (p, p+aka_start, len) == 0)\n-\tp[len] = '\\0';\n+      /* If they are identical, cut off the aka by unwinding the obstack.  */\n+      if (type_len == aka_len\n+\t  && memcmp (p + type_start, p+aka_start, type_len) == 0)\n+\t{\n+\t  /* We can't add a '\\0' here, since we may be adding a closing quote\n+\t     below, and it would be hidden by the '\\0'.\n+\t     Instead, manually unwind the current object within the obstack\n+\t     so that the insertion point is at the end of the type, before\n+\t     the \"' {aka\".  */\n+\t  int delta = type_start + type_len - obstack_object_size (ob);\n+\t  gcc_assert (delta <= 0);\n+\t  obstack_blank_fast (ob, delta);\n+\t}\n+      else\n+\tif (quote)\n+\t  /* No further closing quotes are needed.  */\n+\t  *quote = false;\n+    }\n+\n+  if (quote && *quote)\n+    {\n+      pp_end_quote (cxx_pp, show_color);\n+      *quote = false;\n     }\n   return pp_ggc_formatted_text (cxx_pp);\n }\n@@ -3634,7 +3689,7 @@ static const char *\n arg_to_string (tree arg, bool verbose)\n {\n   if (TYPE_P (arg))\n-    return type_to_string (arg, verbose);\n+    return type_to_string (arg, verbose, true, NULL, false);\n   else\n     return expr_to_string (arg);\n }\n@@ -3924,10 +3979,13 @@ cxx_format_postprocessor::handle (pretty_printer *pp)\n \t}\n       else\n \t{\n-\t  /* If the types were not comparable, they are printed normally,\n-\t     and no difference tree is printed.  */\n-\t  type_a_text = type_to_string (type_a.m_tree, type_a.m_verbose);\n-\t  type_b_text = type_to_string (type_b.m_tree, type_b.m_verbose);\n+\t  /* If the types were not comparable (or if only one of %H/%I was\n+\t     provided), they are printed normally, and no difference tree\n+\t     is printed.  */\n+\t  type_a_text = type_to_string (type_a.m_tree, type_a.m_verbose,\n+\t\t\t\t\ttrue, &type_a.m_quote, show_color);\n+\t  type_b_text = type_to_string (type_b.m_tree, type_b.m_verbose,\n+\t\t\t\t\ttrue, &type_b.m_quote, show_color);\n \t}\n \n       if (type_a.m_quote)\n@@ -4000,7 +4058,7 @@ defer_phase_2_of_type_diff (deferred_printed_type *deferred,\n static bool\n cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n \t    int precision, bool wide, bool set_locus, bool verbose,\n-\t    bool quoted, const char **buffer_ptr)\n+\t    bool *quoted, const char **buffer_ptr)\n {\n   gcc_assert (pp->m_format_postprocessor);\n   cxx_format_postprocessor *postprocessor\n@@ -4043,7 +4101,12 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n     case 'P': result = parm_to_string (next_int);\t\tbreak;\n     case 'Q': result = op_to_string (true, next_tcode);\t\tbreak;\n     case 'S': result = subst_to_string (next_tree);\t\tbreak;\n-    case 'T': result = type_to_string (next_tree, verbose);\tbreak;\n+    case 'T':\n+      {\n+\tresult = type_to_string (next_tree, verbose, false, quoted,\n+\t\t\t\t pp_show_color (pp));\n+      }\n+      break;\n     case 'V': result = cv_to_string (next_tree, verbose);\tbreak;\n     case 'X': result = eh_spec_to_string (next_tree, verbose);  break;\n \n@@ -4059,14 +4122,14 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n     case 'H':\n       {\n \tdefer_phase_2_of_type_diff (&postprocessor->m_type_a, next_tree,\n-\t\t\t\t    buffer_ptr, verbose, quoted);\n+\t\t\t\t    buffer_ptr, verbose, *quoted);\n \treturn true;\n       }\n \n     case 'I':\n       {\n \tdefer_phase_2_of_type_diff (&postprocessor->m_type_b, next_tree,\n-\t\t\t\t    buffer_ptr, verbose, quoted);\n+\t\t\t\t    buffer_ptr, verbose, *quoted);\n \treturn true;\n       }\n "}, {"sha": "cf1b320a73479e751703794c3408db4b78981db9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -1,3 +1,9 @@\n+2017-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/62170\n+\t* error.c (gfc_notify_std): Convert \"quoted\" param from bool to\n+\tbool *.\n+\n 2017-11-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/36313"}, {"sha": "2cece498b319b979a374a7a7e79079759068e35e", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -918,7 +918,7 @@ gfc_notify_std (int std, const char *gmsgid, ...)\n static bool\n gfc_format_decoder (pretty_printer *pp, text_info *text, const char *spec,\n \t\t    int precision, bool wide, bool set_locus, bool hash,\n-\t\t    bool quoted, const char **buffer_ptr)\n+\t\t    bool *quoted, const char **buffer_ptr)\n {\n   switch (*spec)\n     {"}, {"sha": "1fbd2fe045f488289f621f3be6357388778c667b", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -1209,10 +1209,7 @@ pp_format (pretty_printer *pp, text_info *text)\n       gcc_assert (!wide || precision == 0);\n \n       if (quote)\n-\t{\n-\t  pp_string (pp, open_quote);\n-\t  pp_string (pp, colorize_start (pp_show_color (pp), \"quote\"));\n-\t}\n+\tpp_begin_quote (pp, pp_show_color (pp));\n \n       switch (*p)\n \t{\n@@ -1345,19 +1342,21 @@ pp_format (pretty_printer *pp, text_info *text)\n \t  {\n \t    bool ok;\n \n+\t    /* Call the format decoder.\n+\t       Pass the address of \"quote\" so that format decoders can\n+\t       potentially disable printing of the closing quote\n+\t       (e.g. when printing \"'TYPEDEF' aka 'TYPE'\" in the C family\n+\t       of frontends).  */\n \t    gcc_assert (pp_format_decoder (pp));\n \t    ok = pp_format_decoder (pp) (pp, text, p,\n-\t\t\t\t\t precision, wide, plus, hash, quote,\n+\t\t\t\t\t precision, wide, plus, hash, &quote,\n \t\t\t\t\t formatters[argno]);\n \t    gcc_assert (ok);\n \t  }\n \t}\n \n       if (quote)\n-\t{\n-\t  pp_string (pp, colorize_stop (pp_show_color (pp)));\n-\t  pp_string (pp, close_quote);\n-\t}\n+\tpp_end_quote (pp, pp_show_color (pp));\n \n       obstack_1grow (&buffer->chunk_obstack, '\\0');\n       *formatters[argno] = XOBFINISH (&buffer->chunk_obstack, const char *);\n@@ -1731,6 +1730,26 @@ pp_separate_with (pretty_printer *pp, char c)\n   pp_space (pp);\n }\n \n+/* Add a localized open quote, and if SHOW_COLOR is true, begin colorizing\n+   using the \"quote\" color.  */\n+\n+void\n+pp_begin_quote (pretty_printer *pp, bool show_color)\n+{\n+  pp_string (pp, open_quote);\n+  pp_string (pp, colorize_start (show_color, \"quote\"));\n+}\n+\n+/* If SHOW_COLOR is true, stop colorizing.\n+   Add a localized close quote.  */\n+\n+void\n+pp_end_quote (pretty_printer *pp, bool show_color)\n+{\n+  pp_string (pp, colorize_stop (show_color));\n+  pp_string (pp, close_quote);\n+}\n+\n \f\n /* The string starting at P has LEN (at least 1) bytes left; if they\n    start with a valid UTF-8 sequence, return the length of that"}, {"sha": "9f6e2bb29a5563c4cd74b87c956c3a83deea36f7", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -179,7 +179,7 @@ struct pp_wrapping_mode_t\n    A client-supplied formatter returns true if everything goes well,\n    otherwise it returns false.  */\n typedef bool (*printer_fn) (pretty_printer *, text_info *, const char *,\n-\t\t\t    int, bool, bool, bool, bool, const char **);\n+\t\t\t    int, bool, bool, bool, bool *, const char **);\n \n /* Client supplied function used to decode formats.  */\n #define pp_format_decoder(PP) (PP)->format_decoder\n@@ -386,6 +386,9 @@ extern void pp_write_text_to_stream (pretty_printer *);\n extern void pp_write_text_as_dot_label_to_stream (pretty_printer *, bool);\n extern void pp_maybe_space (pretty_printer *);\n \n+extern void pp_begin_quote (pretty_printer *, bool);\n+extern void pp_end_quote (pretty_printer *, bool);\n+\n /* Switch into verbatim mode and return the old mode.  */\n static inline pp_wrapping_mode_t\n pp_set_verbatim_wrapping_ (pretty_printer *pp)"}, {"sha": "705625e4b4934be1ca2d69b4efc32fbe9d5a501e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -1,3 +1,23 @@\n+2017-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/62170\n+\t* g++.dg/diagnostic/aka1.C: Update expected error messages to\n+\treflect fixes to quoting.\n+\t* g++.dg/diagnostic/aka2.C: New test case.\n+\t* g++.dg/parse/error55.C: Update expected error messages to\n+\treflect fixes to quoting.\n+\t* gcc.dg/diag-aka-1.c: Likewise.\n+\t* gcc.dg/diag-aka-2.c: New test case.\n+\t* gcc.dg/pr13804-1.c: Update expected error messages to reflect\n+\tfixes to quoting.\n+\t* gcc.dg/pr56980.c: Likewise.\n+\t* gcc.dg/pr65050.c: Likewise.\n+\t* gcc.dg/redecl-14.c: Likewise.\n+\t* gcc.dg/utf16-4.c Likewise.\n+\t* gcc.target/i386/sse-vect-types.c (__m128d): Likewise.\n+\t* obj-c++.dg/invalid-type-1.mm: Likewise.\n+\t* objc.dg/proto-lossage-4.m: Likewise.\n+\n 2017-11-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/target-supports.exp (check_effective_target_bswap16): Remove"}, {"sha": "cb314fb6536b890573f4d2405d5e7c6466a70c74", "filename": "gcc/testsuite/g++.dg/diagnostic/aka1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka1.C?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -12,4 +12,4 @@ void A::f() {\n typedef A B;\n \n // We do want an aka for a real typedef.\n-B b = 0;\t\t\t// { dg-error \"B .aka A.\" }\n+B b = 0;\t\t\t// { dg-error \"'B' {aka 'A'}\" }"}, {"sha": "a43f9e30a888f27fd717a985035902049c91b8b7", "filename": "gcc/testsuite/g++.dg/diagnostic/aka2.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka2.C?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -0,0 +1,32 @@\n+/* Verify that the \"aka\" descriptions for typedefs are correctly\n+   quoted (PR 62170).  */\n+\n+/* Exercise %H and %I.  */\n+\n+typedef struct s1 t1;\n+typedef struct s2 {int i;} t2;\n+\n+int foo(t1 *);\n+\n+void test_1 () {\n+  t2 pos;\n+\n+  foo (&pos); // { dg-error \"cannot convert 't2\\\\*' {aka 's2\\\\*'} to 't1\\\\*' {aka 's1\\\\*'} for argument '1' to 'int foo\\\\(t1\\\\*\\\\)'\" }\n+}\n+\n+/* Exercise %T.  */\n+\n+typedef struct s3\n+{  \n+  void m3 ();\n+} t3;\n+\n+void test_2 (const s3 *ptr)\n+{\n+  ptr->m3 (); // { dg-error \"passing 'const s3' as 'this' argument discards qualifiers\" }\n+}\n+\n+void test_3 (const t3 *ptr)\n+{\n+  ptr->m3 (); // { dg-error \"passing 'const t3' {aka 'const s3'} as 'this' argument discards qualifiers\" }\n+}"}, {"sha": "70af85d91bcc2bd0d992e371e5eb3b90908cee35", "filename": "gcc/testsuite/g++.dg/parse/error55.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror55.C?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -3,5 +3,5 @@\n class A { };\n typedef A B;\n void foo (B &a) {\n-  a.x();  // { dg-error \"'B {aka class A}' has no member named 'x'\" }\n+  a.x();  // { dg-error \"'B' {aka 'class A'} has no member named 'x'\" }\n }"}, {"sha": "fde4ca7c74312e75931e52e1849b8254bde2cc21", "filename": "gcc/testsuite/gcc.dg/diag-aka-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-1.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -10,7 +10,7 @@ typedef int IA[];\n typedef IA *IAP;\n extern IAP arr[];\n \n-void fn1 (B *); /* { dg-message \"expected .B \\\\* {aka struct A \\\\*}. but argument is of type .struct B \\\\*.\" } */\n+void fn1 (B *); /* { dg-message \"expected 'B \\\\*' {aka 'struct A \\\\*'} but argument is of type 'struct B \\\\*'\" } */\n void fn2 (TFC *);\n \n void \n@@ -24,6 +24,6 @@ bar (B *b, int *i)\n int\n foo (void *a)\n {\n-  T *t = a; /* { dg-warning \"request for implicit conversion from .void \\\\*. to .T \\\\* {aka struct T \\\\*}. not\" } */\n+  T *t = a; /* { dg-warning \"request for implicit conversion from 'void \\\\*' to 'T \\\\*' {aka 'struct T \\\\*'} not\" } */\n   return t->i;\n }"}, {"sha": "a4b22429c3cb013dbb351508dc7c72e06e9bb793", "filename": "gcc/testsuite/gcc.dg/diag-aka-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-2.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -0,0 +1,12 @@\n+/* Verify that the \"aka\" descriptions for typedefs are correctly\n+   quoted (PR 62170).  */\n+\n+typedef struct s1 t1;\n+\n+int foo(t1 *); /* { dg-message \"expected 't1 \\\\*' {aka 'struct s1 \\\\*'} but argument is of type 't2 \\\\*' {aka 'struct s2 \\\\*'}\" } */\n+\n+int bar() {\n+  typedef struct s2 {int i;} t2;\n+  t2 pos;\n+  return foo(&pos); /* { dg-error \"incompatible pointer type\" } */\n+}"}, {"sha": "5fc17f427cb0301a09bb1aa01e1ed86f7933f0e8", "filename": "gcc/testsuite/gcc.dg/pr13804-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr13804-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr13804-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr13804-1.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -20,9 +20,9 @@ void\n f (void)\n {\n   x0.c; /* { dg-error \"'struct s0' has no member named 'c'\" } */\n-  x1.c; /* { dg-error \"'S0 {aka struct s0}' has no member named 'c'\" } */\n+  x1.c; /* { dg-error \"'S0' {aka 'struct s0'} has no member named 'c'\" } */\n   x2.c; /* { dg-error \"'union u0' has no member named 'c'\" } */\n-  x3.c; /* { dg-error \"'U0 {aka union u0}' has no member named 'c'\" } */\n+  x3.c; /* { dg-error \"'U0' {aka 'union u0'} has no member named 'c'\" } */\n   x4->c; /* { dg-error \"'struct s0' has no member named 'c'\" } */\n   x5->c; /* { dg-error \"'union u0' has no member named 'c'\" } */\n }"}, {"sha": "5303c6135fa78cda5eeebb01b2b144f8425a54f7", "filename": "gcc/testsuite/gcc.dg/pr56980.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56980.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56980.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56980.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -5,12 +5,12 @@ typedef struct A { int i; } B;\n typedef union U { int i; } V;\n typedef enum E { G } F;\n \n-void foo_s (struct A); /* { dg-message \"expected .struct A. but argument is of type .B \\\\* {aka struct A \\\\*}.\" } */\n-void foo_u (union U); /* { dg-message \"expected .union U. but argument is of type .V \\\\* {aka union U \\\\*}.\" } */\n-void foo_e (enum E); /* { dg-message \"expected .enum E. but argument is of type .F \\\\* {aka enum E \\\\*}.\" } */\n-void foo_sp (B *); /* { dg-message \"expected .B \\\\* {aka struct A \\\\*}. but argument is of type .struct B \\\\*.\" } */\n-void foo_up (V *); /* { dg-message \"expected .V \\\\* {aka union U \\\\*}. but argument is of type .union V \\\\*.\" } */\n-void foo_ep (F *); /* { dg-message \"expected .F \\\\* {aka enum E \\\\*}. but argument is of type .enum F \\\\*.\" } */\n+void foo_s (struct A); /* { dg-message \"expected .struct A. but argument is of type 'B \\\\*' {aka 'struct A \\\\*'}\" } */\n+void foo_u (union U); /* { dg-message \"expected .union U. but argument is of type 'V \\\\*' {aka 'union U \\\\*'}\" } */\n+void foo_e (enum E); /* { dg-message \"expected .enum E. but argument is of type 'F \\\\*' {aka 'enum E \\\\*'}\" } */\n+void foo_sp (B *); /* { dg-message \"expected 'B \\\\*' {aka 'struct A \\\\*'} but argument is of type .struct B \\\\*.\" } */\n+void foo_up (V *); /* { dg-message \"expected 'V \\\\*' {aka 'union U \\\\*'} but argument is of type .union V \\\\*.\" } */\n+void foo_ep (F *); /* { dg-message \"expected 'F \\\\*' {aka 'enum E \\\\*'} but argument is of type .enum F \\\\*.\" } */\n \n void \n bar (B *b, V *v, F *f)"}, {"sha": "e29559d3e73fe880a104b2af65b254b08ac2ac0f", "filename": "gcc/testsuite/gcc.dg/pr65050.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65050.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65050.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65050.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -2,22 +2,22 @@\n /* { dg-do compile } */\n \n typedef int A[];\n-struct S { int i; A a[5]; } s; /* { dg-error \"array type has incomplete element type .A {aka int\\\\\\[\\\\\\]}.\" } */\n+struct S { int i; A a[5]; } s; /* { dg-error \"array type has incomplete element type 'A' {aka 'int\\\\\\[\\\\\\]'}\" } */\n extern void foo (int p[2][]); /* { dg-error \"array type has incomplete element type .int\\\\\\[\\\\\\].\" } */\n-extern void bar (A p[2]); /* { dg-error \"array type has incomplete element type .A {aka int\\\\\\[\\\\\\]}.\" } */\n+extern void bar (A p[2]); /* { dg-error \"array type has incomplete element type 'A' {aka 'int\\\\\\[\\\\\\]'}\" } */\n \n void\n foo (int p[2][]) /* { dg-error \"array type has incomplete element type .int\\\\\\[\\\\\\].\" } */\n {\n }\n \n void\n-bar (A p[2]) /* { dg-error \"array type has incomplete element type .A {aka int\\\\\\[\\\\\\]}.\" } */\n+bar (A p[2]) /* { dg-error \"array type has incomplete element type 'A' {aka 'int\\\\\\[\\\\\\]'}\" } */\n {\n }\n \n struct T;\n struct T t[5]; /* { dg-error \"array type has incomplete element type .struct T.\" } */\n struct U u[] = { { \"abc\" } }; /* { dg-error \"array type has incomplete element type .struct U.\" } */\n typedef struct T TT;\n-TT tt[5]; /* { dg-error \"array type has incomplete element type .TT {aka struct T}.\" } */\n+TT tt[5]; /* { dg-error \"array type has incomplete element type 'TT' {aka 'struct T'}\" } */"}, {"sha": "1bf1d96eadc13749682cd4467844d30994da8063", "filename": "gcc/testsuite/gcc.dg/redecl-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-14.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -18,5 +18,5 @@ f (void)\n   }\n   extern IAP a[];\n   extern IAP a[5];\n-  sizeof (*a[0]); /* { dg-error \"invalid application of 'sizeof' to incomplete type 'IA {aka int\\\\\\[\\\\\\]}'\" } */\n+  sizeof (*a[0]); /* { dg-error \"invalid application of 'sizeof' to incomplete type 'IA' {aka 'int\\\\\\[\\\\\\]'}\" } */\n }"}, {"sha": "4b203877dde73eb12191a875bd15b21250bab4f4", "filename": "gcc/testsuite/gcc.dg/utf16-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Futf16-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.dg%2Futf16-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf16-4.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -12,7 +12,7 @@ char16_t\tc2 = u'\\U00064321';\t/* { dg-warning \"constant too long\" } */\n char16_t\tc3 = 'a';\n char16_t\tc4 = U'a';\n char16_t\tc5 = U'\\u2029';\n-char16_t\tc6 = U'\\U00064321';\t/* { dg-warning \"conversion from .(long )?unsigned int. to .char16_t {aka short unsigned int}. changes value from .410401. to .17185.\" } */\n+char16_t\tc6 = U'\\U00064321';\t/* { dg-warning \"conversion from .(long )?unsigned int. to 'char16_t' {aka 'short unsigned int'} changes value from .410401. to .17185.\" } */\n char16_t\tc7 = L'a';\n char16_t\tc8 = L'\\u2029';\n char16_t \tc9 = L'\\U00064321';\t/* { dg-warning \"conversion\" \"\" { target { 4byte_wchar_t } } } */"}, {"sha": "ac4ece400eead2880668632f9bfd4c97dd14e512", "filename": "gcc/testsuite/gcc.target/i386/sse-vect-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-vect-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-vect-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-vect-types.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -10,4 +10,4 @@ __m128d foo1(__m128d z, __m128d  a, int N) {\n   }\n   return a;\n }\n-/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 0 } */\n+/* { dg-message \"note: expected '.*'.* but argument is of type '.*'\" \"note: expected\" { target *-*-* } 0 } */"}, {"sha": "59c86667995986a549cd3bdd69c9b17bf967bd41", "filename": "gcc/testsuite/obj-c++.dg/invalid-type-1.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Finvalid-type-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Finvalid-type-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Finvalid-type-1.mm?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -18,8 +18,8 @@ - (void) method;\n \n AClass <MyProtocol> *object1; /* This is fine.  */\n \n-Integer <MyProtocol> *object2; /* { dg-error \".Integer {aka int}. is not a template\" } */\n+Integer <MyProtocol> *object2; /* { dg-error \"'Integer' {aka 'int'} is not a template\" } */\n /* { dg-error \".MyProtocol. was not declared in this scope\" \"\" { target *-*-* } .-1 } */\n \n-Integer <NonExistingProtocol> *object3; /* { dg-error \".Integer {aka int}. is not a template\" } */\n+Integer <NonExistingProtocol> *object3; /* { dg-error \"'Integer' {aka 'int'} is not a template\" } */\n /* { dg-error \".NonExistingProtocol. was not declared in this scope\" \"\" { target *-*-* } .-1 } */"}, {"sha": "182e92d94b202a5e572f45b658724dda47d4e0a1", "filename": "gcc/testsuite/objc.dg/proto-lossage-4.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -28,21 +28,21 @@ long foo(void) {\n   receiver += [receiver anotherValue]; /* { dg-warning \"invalid receiver type .intptr_t.\" } */\n \n   receiver += [(Obj *)receiver someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment to 'intptr_t {aka (long )?int}' from 'id' makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n+/* { dg-warning \"assignment to 'intptr_t' {aka '(long )?int'} from 'id' makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n \n   receiver += [(Obj *)receiver anotherValue];\n   receiver += [(Obj <Proto> *)receiver someValue];\n   receiver += [(Obj <Proto> *)receiver anotherValue];\n   receiver += [objrcvr someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment to 'intptr_t {aka (long )?int}' from 'id' makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n+/* { dg-warning \"assignment to 'intptr_t' {aka '(long )?int'} from 'id' makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n \n   receiver += [objrcvr anotherValue];\n   receiver += [(Obj <Proto> *)objrcvr someValue];\n   receiver += [(Obj <Proto> *)objrcvr anotherValue];\n   receiver += [objrcvr2 someValue];\n   receiver += [objrcvr2 anotherValue];\n   receiver += [(Obj *)objrcvr2 someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment to 'intptr_t {aka (long )?int}' from 'id' makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n+/* { dg-warning \"assignment to 'intptr_t' {aka '(long )?int'} from 'id' makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n \n   receiver += [(Obj *)objrcvr2 anotherValue];\n "}, {"sha": "c80ae54162079a1a5aaff84b4d153f3369e872c4", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -246,7 +246,7 @@ virt_loc_aware_diagnostic_finalizer (diagnostic_context *context,\n bool\n default_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n \t\t      int precision, bool wide, bool set_locus, bool hash,\n-\t\t      bool, const char **)\n+\t\t      bool *, const char **)\n {\n   tree t;\n "}, {"sha": "e38bb44204ba0e226dbef7e051580147118d62de", "filename": "gcc/tree-diagnostic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftree-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0/gcc%2Ftree-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.h?ref=ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0", "patch": "@@ -55,6 +55,6 @@ void virt_loc_aware_diagnostic_finalizer (diagnostic_context *,\n \n void tree_diagnostics_defaults (diagnostic_context *context);\n bool default_tree_printer (pretty_printer *, text_info *, const char *,\n-\t\t\t   int, bool, bool, bool, bool, const char **);\n+\t\t\t   int, bool, bool, bool, bool *, const char **);\n \n #endif /* ! GCC_TREE_DIAGNOSTIC_H */"}]}