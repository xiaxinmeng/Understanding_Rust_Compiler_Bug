{"sha": "d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM3Njk0MTBjNjVhN2QzZjJkNTg0MDJjM2VjZjVjMjUzZTM0MGMyZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-12-18T19:23:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-12-18T19:23:01Z"}, "message": "typeck.c (cxx_sizeof_or_alignof_type): Add location_t parameter and use it throughout.\n\n/gcc/cp\n2019-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (cxx_sizeof_or_alignof_type): Add location_t parameter\n\tand use it throughout.\n\t(cxx_sizeof_expr): Likewise.\n\t(cxx_alignof_expr): Likewise.\n\t(cxx_sizeof_or_alignof_expr): Likewise.\n\t(cxx_alignas_expr): Update call.\n\t* decl.c (fold_sizeof_expr): Likewise.\n\t* pt.c (tsubst_copy): Likewise.\n\t(tsubst_copy_and_build): Likewise.\n\t* except.c (build_throw): Add location_t parameter and use it.\n\t(expand_end_catch_block): Update call.\n\t* parser.c (cp_parser_unary_expression): Update\n\tcxx_sizeof_or_alignof_type and cxx_sizeof_or_alignof_expr calls,\n\tpass the compound location.\n\t(cp_parser_throw_expression): Likewise pass the combined location\n\tto build_throw.\n\t* cp-tree.h: Update declarations.\n\n\t* semantics.c (finish_handler_parms): Use DECL_SOURCE_LOCATION.\n\t* decl2.c (check_classfn): Likewise.\n\n\t* except.c (is_admissible_throw_operand_or_catch_parameter):\n\tExploit cp_expr_loc_or_input_loc in one place.\n\n\t* except.c (create_try_catch_expr): Remove, unused.\n\n/libcc1\n2019-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* libcp1plugin.cc (plugin_build_unary_expr): Update build_throw\n\tand cxx_sizeof_or_alignof_expr calls.\n\t(plugin_build_unary_type_expr): Likewise for\n\tcxx_sizeof_or_alignof_type.\n\n/gcc/testsuite\n2019-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/alignof2.C: New.\n\t* g++.dg/diagnostic/alignof3.C: Likewise.\n\t* g++.dg/diagnostic/incomplete-type-1.C: Likewise.\n\t* g++.dg/warn/Wcatch-value-3b.C: Likewise.\n\t* g++.dg/cpp0x/alignof3.C: Check location(s) too.\n\t* g++.dg/cpp1z/decomp-bitfield1.C: Likewise.\n\t* g++.dg/cpp1z/has-unique-obj-representations2.C: Likewise.\n\t* g++.dg/expr/sizeof3.C: Likewise.\n\t* g++.dg/ext/flexary6.C: Likewise.\n\t* g++.dg/ext/vla4.C: Likewise.\n\t* g++.dg/template/sizeof11.C: Likewise.\n\t* g++.dg/warn/Wcatch-value-1.C: Likewise.\n\t* g++.dg/warn/Wcatch-value-2.C: Likewise.\n\t* g++.dg/warn/Wcatch-value-3.C: Likewise.\n\t* g++.old-deja/g++.brendan/sizeof1.C: Likewise.\n\t* g++.old-deja/g++.brendan/sizeof3.C: Likewise.\n\t* g++.old-deja/g++.brendan/sizeof4.C: Likewise.\n\t* g++.old-deja/g++.eh/ctor1.C: Likewise.\n\t* g++.old-deja/g++.jason/ambig1.C: Likewise.\n\t* g++.old-deja/g++.other/sizeof4.C: Likewise.\n\nFrom-SVN: r279543", "tree": {"sha": "b4db956e077c48a691a959e453a8afb0aa65b4cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4db956e077c48a691a959e453a8afb0aa65b4cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/comments", "author": null, "committer": null, "parents": [{"sha": "a7389ce5d4505a7a3596539ad3a844a850e769d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7389ce5d4505a7a3596539ad3a844a850e769d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7389ce5d4505a7a3596539ad3a844a850e769d4"}], "stats": {"total": 403, "additions": 271, "deletions": 132}, "files": [{"sha": "90a6d18a7e9814a944705bb6f9ed62e65ec95265", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -1,3 +1,31 @@\n+2019-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (cxx_sizeof_or_alignof_type): Add location_t parameter\n+\tand use it throughout.\n+\t(cxx_sizeof_expr): Likewise.\n+\t(cxx_alignof_expr): Likewise.\n+\t(cxx_sizeof_or_alignof_expr): Likewise.\n+\t(cxx_alignas_expr): Update call.\n+\t* decl.c (fold_sizeof_expr): Likewise.\n+\t* pt.c (tsubst_copy): Likewise.\n+\t(tsubst_copy_and_build): Likewise.\n+\t* except.c (build_throw): Add location_t parameter and use it.\n+\t(expand_end_catch_block): Update call.\n+\t* parser.c (cp_parser_unary_expression): Update\n+\tcxx_sizeof_or_alignof_type and cxx_sizeof_or_alignof_expr calls,\n+\tpass the compound location.\n+\t(cp_parser_throw_expression): Likewise pass the combined location\n+\tto build_throw.\n+\t* cp-tree.h: Update declarations.\n+\n+\t* semantics.c (finish_handler_parms): Use DECL_SOURCE_LOCATION.\n+\t* decl2.c (check_classfn): Likewise.\n+\n+\t* except.c (is_admissible_throw_operand_or_catch_parameter):\n+\tExploit cp_expr_loc_or_input_loc in one place.\n+\n+\t* except.c (create_try_catch_expr): Remove, unused.\n+\n 2019-12-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/12333 - X::~X() with implicit this->."}, {"sha": "3d1d62c2de83e0550917e3424d94fba6cee68e6d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -6657,7 +6657,7 @@ extern void init_exception_processing\t\t(void);\n extern tree expand_start_catch_block\t\t(tree);\n extern void expand_end_catch_block\t\t(void);\n extern tree build_exc_ptr\t\t\t(void);\n-extern tree build_throw\t\t\t\t(tree);\n+extern tree build_throw\t\t\t\t(location_t, tree);\n extern int nothrow_libfn_p\t\t\t(const_tree);\n extern void check_handlers\t\t\t(tree);\n extern tree finish_noexcept_expr\t\t(tree, tsubst_flags_t);\n@@ -6674,7 +6674,6 @@ extern tree begin_eh_spec_block\t\t\t(void);\n extern void finish_eh_spec_block\t\t(tree, tree);\n extern tree build_eh_type_type\t\t\t(tree);\n extern tree cp_protect_cleanup_actions\t\t(void);\n-extern tree create_try_catch_expr               (tree, tree);\n extern tree template_parms_to_args\t\t(tree);\n extern tree template_parms_level_to_args\t(tree);\n extern tree generic_targs_for\t\t\t(tree);\n@@ -7487,8 +7486,10 @@ extern bool compparms\t\t\t\t(const_tree, const_tree);\n extern int comp_cv_qualification\t\t(const_tree, const_tree);\n extern int comp_cv_qualification\t\t(int, int);\n extern int comp_cv_qual_signature\t\t(tree, tree);\n-extern tree cxx_sizeof_or_alignof_expr\t\t(tree, enum tree_code, bool);\n-extern tree cxx_sizeof_or_alignof_type\t\t(tree, enum tree_code, bool, bool);\n+extern tree cxx_sizeof_or_alignof_expr\t\t(location_t, tree,\n+\t\t\t\t\t\t enum tree_code, bool);\n+extern tree cxx_sizeof_or_alignof_type\t\t(location_t, tree,\n+\t\t\t\t\t\t enum tree_code, bool, bool);\n extern tree cxx_alignas_expr                    (tree);\n extern tree cxx_sizeof_nowarn                   (tree);\n extern tree is_bitfield_expr_with_lowered_type  (const_tree);\n@@ -7604,7 +7605,7 @@ extern tree cp_build_binary_op                  (const op_location_t &,\n extern tree build_x_vec_perm_expr               (location_t,\n \t\t\t\t\t\t tree, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n-#define cxx_sizeof(T)  cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, false, true)\n+#define cxx_sizeof(T)  cxx_sizeof_or_alignof_type (input_location, T, SIZEOF_EXPR, false, true)\n extern tree build_simple_component_ref\t\t(tree, tree);\n extern tree build_ptrmemfunc_access_expr\t(tree, tree);\n extern tree build_address\t\t\t(tree);"}, {"sha": "7d4c947fb5869f457b3aadfe71bbe7b8dd55cd16", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -10219,13 +10219,16 @@ fold_sizeof_expr (tree t)\n {\n   tree r;\n   if (SIZEOF_EXPR_TYPE_P (t))\n-    r = cxx_sizeof_or_alignof_type (TREE_TYPE (TREE_OPERAND (t, 0)),\n+    r = cxx_sizeof_or_alignof_type (EXPR_LOCATION (t),\n+\t\t\t\t    TREE_TYPE (TREE_OPERAND (t, 0)),\n \t\t\t\t    SIZEOF_EXPR, false, false);\n   else if (TYPE_P (TREE_OPERAND (t, 0)))\n-    r = cxx_sizeof_or_alignof_type (TREE_OPERAND (t, 0), SIZEOF_EXPR,\n+    r = cxx_sizeof_or_alignof_type (EXPR_LOCATION (t),\n+\t\t\t\t    TREE_OPERAND (t, 0), SIZEOF_EXPR,\n \t\t\t\t    false, false);\n   else\n-    r = cxx_sizeof_or_alignof_expr (TREE_OPERAND (t, 0), SIZEOF_EXPR,\n+    r = cxx_sizeof_or_alignof_expr (EXPR_LOCATION (t),\n+\t\t\t\t    TREE_OPERAND (t, 0), SIZEOF_EXPR,\n \t\t\t\t    false);\n   if (r == error_mark_node)\n     r = size_one_node;"}, {"sha": "0352954b817ad19f14aaf7f5b06c81db8d0eafe5", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -698,7 +698,8 @@ check_classfn (tree ctype, tree function, tree template_parms)\n   if (!matched)\n     {\n       if (!COMPLETE_TYPE_P (ctype))\n-\tcxx_incomplete_type_error (function, ctype);\n+\tcxx_incomplete_type_error (DECL_SOURCE_LOCATION (function),\n+\t\t\t\t   function, ctype);\n       else\n \t{\n \t  if (DECL_CONV_FN_P (function))"}, {"sha": "e385c676b17995b7f399e9980cbe42c67371face", "filename": "gcc/cp/except.c", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -507,7 +507,7 @@ expand_end_catch_block (void)\n       && (DECL_CONSTRUCTOR_P (current_function_decl)\n \t  || DECL_DESTRUCTOR_P (current_function_decl)))\n     {\n-      tree rethrow = build_throw (NULL_TREE);\n+      tree rethrow = build_throw (input_location, NULL_TREE);\n       TREE_NO_WARNING (rethrow) = true;\n       finish_expr_stmt (rethrow);\n     }\n@@ -627,7 +627,7 @@ wrap_cleanups_r (tree *tp, int *walk_subtrees, void * /*data*/)\n /* Build a throw expression.  */\n \n tree\n-build_throw (tree exp)\n+build_throw (location_t loc, tree exp)\n {\n   if (exp == error_mark_node)\n     return exp;\n@@ -637,12 +637,13 @@ build_throw (tree exp)\n       if (cfun)\n \tcurrent_function_returns_abnormally = 1;\n       exp = build_min (THROW_EXPR, void_type_node, exp);\n-      SET_EXPR_LOCATION (exp, input_location);\n+      SET_EXPR_LOCATION (exp, loc);\n       return exp;\n     }\n \n   if (exp && null_node_p (exp))\n-    warning (0, \"throwing NULL, which has integral, not pointer type\");\n+    warning_at (loc, 0,\n+\t\t\"throwing NULL, which has integral, not pointer type\");\n \n   if (exp != NULL_TREE)\n     {\n@@ -758,6 +759,7 @@ build_throw (tree exp)\n \t{\n \t  int flags = LOOKUP_NORMAL | LOOKUP_ONLYCONVERTING;\n \t  bool converted = false;\n+\t  location_t exp_loc = cp_expr_loc_or_loc (exp, loc);\n \n \t  /* Under C++0x [12.8/16 class.copy], a thrown lvalue is sometimes\n \t     treated as an rvalue for the purposes of overload resolution\n@@ -790,7 +792,7 @@ build_throw (tree exp)\n \n \t  if (exp == error_mark_node)\n \t    {\n-\t      error (\"  in thrown expression\");\n+\t      inform (exp_loc, \"  in thrown expression\");\n \t      return error_mark_node;\n \t    }\n \t}\n@@ -867,8 +869,7 @@ build_throw (tree exp)\n       exp = cp_build_function_call_vec (rethrow_fn, NULL, tf_warning_or_error);\n     }\n \n-  exp = build1 (THROW_EXPR, void_type_node, exp);\n-  SET_EXPR_LOCATION (exp, input_location);\n+  exp = build1_loc (loc, THROW_EXPR, void_type_node, exp);\n \n   return exp;\n }\n@@ -948,8 +949,9 @@ is_admissible_throw_operand_or_catch_parameter (tree t, bool is_throw)\n   else if (variably_modified_type_p (type, NULL_TREE))\n     {\n       if (is_throw)\n-\terror (\"cannot throw expression of type %qT because it involves \"\n-\t       \"types of variable size\", type);\n+\terror_at (cp_expr_loc_or_input_loc (expr),\n+\t\t  \"cannot throw expression of type %qT because it involves \"\n+\t\t  \"types of variable size\", type);\n       else\n \terror (\"cannot catch type %qT because it involves types of \"\n \t       \"variable size\", type);\n@@ -1321,22 +1323,4 @@ build_noexcept_spec (tree expr, tsubst_flags_t complain)\n     }\n }\n \n-/* Returns a TRY_CATCH_EXPR that will put TRY_LIST and CATCH_LIST in the\n-   TRY and CATCH locations.  CATCH_LIST must be a STATEMENT_LIST */\n-\n-tree\n-create_try_catch_expr (tree try_expr, tree catch_list)\n-{\n-  location_t loc = EXPR_LOCATION (try_expr);\n- \n-  append_to_statement_list (do_begin_catch (), &catch_list);\n-  append_to_statement_list (build_throw (NULL_TREE), &catch_list);\n-  tree catch_tf_expr = build_stmt (loc, TRY_FINALLY_EXPR, catch_list, \n-\t\t\t\t   do_end_catch (NULL_TREE));\n-  catch_list = build2 (CATCH_EXPR, void_type_node, NULL_TREE,\n-\t\t       catch_tf_expr);\n-  tree try_catch_expr = build_stmt (loc, TRY_CATCH_EXPR, try_expr, catch_list);\n-  return try_catch_expr;\n-}\n-\n #include \"gt-cp-except.h\""}, {"sha": "1f7526ea6e07fe929ac4699a87689097c643c42a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -8170,9 +8170,17 @@ cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n \t    /* Parse the operand.  */\n \t    operand = cp_parser_sizeof_operand (parser, keyword);\n \n+\t    /* Construct a location e.g. :\n+              alignof (expr)\n+              ^~~~~~~~~~~~~~\n+              with start == caret at the start of the \"alignof\"/\"sizeof\"\n+              token, with the endpoint at the final closing paren.  */\n+\t    location_t compound_loc\n+\t      = make_location (start_loc, start_loc, parser->lexer);\n+\n \t    if (TYPE_P (operand))\n-\t      ret = cxx_sizeof_or_alignof_type (operand, op, std_alignof,\n-\t\t\t\t\t\ttrue);\n+\t      ret = cxx_sizeof_or_alignof_type (compound_loc, operand, op,\n+\t\t\t\t\t\tstd_alignof, true);\n \t    else\n \t      {\n \t\t/* ISO C++ defines alignof only with types, not with\n@@ -8183,7 +8191,8 @@ cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n \t\t\t   \"ISO C++ does not allow %<alignof%> \"\n \t\t\t   \"with a non-type\");\n \n-\t\tret = cxx_sizeof_or_alignof_expr (operand, op, true);\n+\t\tret = cxx_sizeof_or_alignof_expr (compound_loc,\n+\t\t\t\t\t\t  operand, op, true);\n \t      }\n \t    /* For SIZEOF_EXPR, just issue diagnostics, but keep\n \t       SIZEOF_EXPR with the original operand.  */\n@@ -8202,19 +8211,11 @@ cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n \t\t      ret = build_min (SIZEOF_EXPR, size_type_node, operand);\n \t\t    TREE_SIDE_EFFECTS (ret) = 0;\n \t\t    TREE_READONLY (ret) = 1;\n+\t\t    SET_EXPR_LOCATION (ret, compound_loc);\n \t\t  }\n \t      }\n \n-\t    /* Construct a location e.g. :\n-\t       alignof (expr)\n-\t       ^~~~~~~~~~~~~~\n-\t       with start == caret at the start of the \"alignof\"/\"sizeof\"\n-\t       token, with the endpoint at the final closing paren.  */\n-\t    location_t compound_loc\n-\t      = make_location (start_loc, start_loc, parser->lexer);\n-\n-\t    cp_expr ret_expr (ret);\n-\t    ret_expr.set_location (compound_loc);\n+\t    cp_expr ret_expr (ret, compound_loc);\n \t    ret_expr = ret_expr.maybe_add_location_wrapper ();\n \t    return ret_expr;\n \t  }\n@@ -26066,8 +26067,7 @@ cp_parser_throw_expression (cp_parser* parser)\n      the end at the end of the final token we consumed.  */\n   location_t combined_loc = make_location (start_loc, start_loc,\n \t\t\t\t\t   parser->lexer);\n-  expression = build_throw (expression);\n-  protected_set_expr_location (expression, combined_loc);\n+  expression = build_throw (combined_loc, expression);\n \n   return expression;\n }"}, {"sha": "e9cf46c174a941d97718cee414ce4718fa340f6f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -16400,11 +16400,13 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\texpanded = make_argument_pack (expanded);\n \n \t      if (TYPE_P (expanded))\n-\t\treturn cxx_sizeof_or_alignof_type (expanded, SIZEOF_EXPR,\n+\t\treturn cxx_sizeof_or_alignof_type (input_location,\n+\t\t\t\t\t\t   expanded, SIZEOF_EXPR,\n \t\t\t\t\t\t   false,\n \t\t\t\t\t\t   complain & tf_error);\n \t      else\n-\t\treturn cxx_sizeof_or_alignof_expr (expanded, SIZEOF_EXPR,\n+\t\treturn cxx_sizeof_or_alignof_expr (input_location,\n+\t\t\t\t\t\t   expanded, SIZEOF_EXPR,\n                                                    complain & tf_error);\n \t    }\n \t  else\n@@ -19194,10 +19196,12 @@ tsubst_copy_and_build (tree t,\n \t    --c_inhibit_evaluation_warnings;\n \t  }\n         if (TYPE_P (op1))\n-\t  r = cxx_sizeof_or_alignof_type (op1, TREE_CODE (t), std_alignof,\n+\t  r = cxx_sizeof_or_alignof_type (input_location,\n+\t\t\t\t\t  op1, TREE_CODE (t), std_alignof,\n \t\t\t\t\t  complain & tf_error);\n \telse\n-\t  r = cxx_sizeof_or_alignof_expr (op1, TREE_CODE (t),\n+\t  r = cxx_sizeof_or_alignof_expr (input_location,\n+\t\t\t\t\t  op1, TREE_CODE (t),\n \t\t\t\t\t  complain & tf_error);\n \tif (TREE_CODE (t) == SIZEOF_EXPR && r != error_mark_node)\n \t  {\n@@ -19959,7 +19963,7 @@ tsubst_copy_and_build (tree t,\n \n     case THROW_EXPR:\n       RETURN (build_throw\n-\t(RECUR (TREE_OPERAND (t, 0))));\n+       (input_location, RECUR (TREE_OPERAND (t, 0))));\n \n     case CONSTRUCTOR:\n       {"}, {"sha": "1d664af71500351519ca1ff910097a35a2c36c1b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -1429,15 +1429,19 @@ finish_handler_parms (tree decl, tree handler)\n \t  if (CLASS_TYPE_P (orig_type))\n \t    {\n \t      if (TYPE_POLYMORPHIC_P (orig_type))\n-\t\twarning (OPT_Wcatch_value_,\n-\t\t\t \"catching polymorphic type %q#T by value\", orig_type);\n+\t\twarning_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\t    OPT_Wcatch_value_,\n+\t\t\t    \"catching polymorphic type %q#T by value\",\n+\t\t\t    orig_type);\n \t      else if (warn_catch_value > 1)\n-\t\twarning (OPT_Wcatch_value_,\n-\t\t\t \"catching type %q#T by value\", orig_type);\n+\t\twarning_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\t    OPT_Wcatch_value_,\n+\t\t\t    \"catching type %q#T by value\", orig_type);\n \t    }\n \t  else if (warn_catch_value > 2)\n-\t    warning (OPT_Wcatch_value_,\n-\t\t     \"catching non-reference type %q#T\", orig_type);\n+\t    warning_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\tOPT_Wcatch_value_,\n+\t\t\t\"catching non-reference type %q#T\", orig_type);\n \t}\n     }\n   HANDLER_TYPE (handler) = type;"}, {"sha": "41ef8966f49f7f80fcafca54d3548ec3bc791de9", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -1662,8 +1662,8 @@ compparms (const_tree parms1, const_tree parms2)\n    SIZEOF_EXPR.  */\n \n tree\n-cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool std_alignof,\n-\t\t\t    bool complain)\n+cxx_sizeof_or_alignof_type (location_t loc, tree type, enum tree_code op,\n+\t\t\t    bool std_alignof, bool complain)\n {\n   gcc_assert (op == SIZEOF_EXPR || op == ALIGNOF_EXPR);\n   if (type == error_mark_node)\n@@ -1674,7 +1674,7 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool std_alignof,\n     {\n       if (complain)\n \t{\n-\t  pedwarn (input_location, OPT_Wpointer_arith,\n+\t  pedwarn (loc, OPT_Wpointer_arith,\n \t\t   \"invalid application of %qs to a member function\",\n \t\t   OVL_OP_INFO (false, op)->name);\n \t  return size_one_node;\n@@ -1701,10 +1701,11 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool std_alignof,\n       TREE_READONLY (value) = 1;\n       if (op == ALIGNOF_EXPR && std_alignof)\n \tALIGNOF_EXPR_STD_P (value) = true;\n+      SET_EXPR_LOCATION (value, loc);\n       return value;\n     }\n \n-  return c_sizeof_or_alignof_type (input_location, complete_type (type),\n+  return c_sizeof_or_alignof_type (loc, complete_type (type),\n \t\t\t\t   op == SIZEOF_EXPR, std_alignof,\n \t\t\t\t   complain);\n }\n@@ -1723,13 +1724,14 @@ cxx_sizeof_nowarn (tree type)\n   else if (!COMPLETE_TYPE_P (type))\n     return size_zero_node;\n   else\n-    return cxx_sizeof_or_alignof_type (type, SIZEOF_EXPR, false, false);\n+    return cxx_sizeof_or_alignof_type (input_location, type,\n+\t\t\t\t       SIZEOF_EXPR, false, false);\n }\n \n /* Process a sizeof expression where the operand is an expression.  */\n \n static tree\n-cxx_sizeof_expr (tree e, tsubst_flags_t complain)\n+cxx_sizeof_expr (location_t loc, tree e, tsubst_flags_t complain)\n {\n   if (e == error_mark_node)\n     return error_mark_node;\n@@ -1739,10 +1741,12 @@ cxx_sizeof_expr (tree e, tsubst_flags_t complain)\n       e = build_min (SIZEOF_EXPR, size_type_node, e);\n       TREE_SIDE_EFFECTS (e) = 0;\n       TREE_READONLY (e) = 1;\n+      SET_EXPR_LOCATION (e, loc);\n \n       return e;\n     }\n \n+  location_t e_loc = cp_expr_loc_or_loc (e, loc);\n   STRIP_ANY_LOCATION_WRAPPER (e);\n \n   /* To get the size of a static data member declared as an array of\n@@ -1757,8 +1761,9 @@ cxx_sizeof_expr (tree e, tsubst_flags_t complain)\n       && (complain & tf_warning))\n     {\n       auto_diagnostic_group d;\n-      if (warning (OPT_Wsizeof_array_argument, \"%<sizeof%> on array function \"\n-\t\t   \"parameter %qE will return size of %qT\", e, TREE_TYPE (e)))\n+      if (warning_at (e_loc, OPT_Wsizeof_array_argument,\n+\t\t      \"%<sizeof%> on array function parameter %qE \"\n+\t\t      \"will return size of %qT\", e, TREE_TYPE (e)))\n \tinform (DECL_SOURCE_LOCATION (e), \"declared here\");\n     }\n \n@@ -1767,7 +1772,7 @@ cxx_sizeof_expr (tree e, tsubst_flags_t complain)\n   if (bitfield_p (e))\n     {\n       if (complain & tf_error)\n-\terror_at (cp_expr_loc_or_input_loc (e),\n+\terror_at (e_loc,\n \t\t  \"invalid application of %<sizeof%> to a bit-field\");\n       else\n         return error_mark_node;\n@@ -1776,25 +1781,25 @@ cxx_sizeof_expr (tree e, tsubst_flags_t complain)\n   else if (is_overloaded_fn (e))\n     {\n       if (complain & tf_error)\n-\tpermerror (cp_expr_loc_or_input_loc (e),\n-\t\t   \"ISO C++ forbids applying %<sizeof%> to an expression \"\n-\t\t   \"of function type\");\n+\tpermerror (e_loc, \"ISO C++ forbids applying %<sizeof%> to \"\n+\t\t   \"an expression of function type\");\n       else\n         return error_mark_node;\n       e = char_type_node;\n     }\n   else if (type_unknown_p (e))\n     {\n       if (complain & tf_error)\n-        cxx_incomplete_type_error (e, TREE_TYPE (e));\n+        cxx_incomplete_type_error (e_loc, e, TREE_TYPE (e));\n       else\n         return error_mark_node;\n       e = char_type_node;\n     }\n   else\n     e = TREE_TYPE (e);\n \n-  return cxx_sizeof_or_alignof_type (e, SIZEOF_EXPR, false, complain & tf_error);\n+  return cxx_sizeof_or_alignof_type (loc, e, SIZEOF_EXPR, false,\n+\t\t\t\t     complain & tf_error);\n }\n \n /* Implement the __alignof keyword: Return the minimum required\n@@ -1803,7 +1808,7 @@ cxx_sizeof_expr (tree e, tsubst_flags_t complain)\n    \"aligned\" __attribute__ specification).  */\n \n static tree\n-cxx_alignof_expr (tree e, tsubst_flags_t complain)\n+cxx_alignof_expr (location_t loc, tree e, tsubst_flags_t complain)\n {\n   tree t;\n \n@@ -1815,15 +1820,17 @@ cxx_alignof_expr (tree e, tsubst_flags_t complain)\n       e = build_min (ALIGNOF_EXPR, size_type_node, e);\n       TREE_SIDE_EFFECTS (e) = 0;\n       TREE_READONLY (e) = 1;\n+      SET_EXPR_LOCATION (e, loc);\n \n       return e;\n     }\n \n+  location_t e_loc = cp_expr_loc_or_loc (e, loc);\n   STRIP_ANY_LOCATION_WRAPPER (e);\n \n   e = mark_type_use (e);\n \n-  if (!verify_type_context (input_location, TCTX_ALIGNOF, TREE_TYPE (e),\n+  if (!verify_type_context (loc, TCTX_ALIGNOF, TREE_TYPE (e),\n \t\t\t    !(complain & tf_error)))\n     {\n       if (!(complain & tf_error))\n@@ -1835,7 +1842,7 @@ cxx_alignof_expr (tree e, tsubst_flags_t complain)\n   else if (bitfield_p (e))\n     {\n       if (complain & tf_error)\n-\terror_at (cp_expr_loc_or_input_loc (e),\n+\terror_at (e_loc,\n \t\t  \"invalid application of %<__alignof%> to a bit-field\");\n       else\n         return error_mark_node;\n@@ -1847,9 +1854,8 @@ cxx_alignof_expr (tree e, tsubst_flags_t complain)\n   else if (is_overloaded_fn (e))\n     {\n       if (complain & tf_error)\n-\tpermerror (cp_expr_loc_or_input_loc (e),\n-\t\t   \"ISO C++ forbids applying %<__alignof%> to an expression \"\n-\t\t   \"of function type\");\n+\tpermerror (e_loc, \"ISO C++ forbids applying %<__alignof%> to \"\n+\t\t   \"an expression of function type\");\n       else\n         return error_mark_node;\n       if (TREE_CODE (e) == FUNCTION_DECL)\n@@ -1860,28 +1866,30 @@ cxx_alignof_expr (tree e, tsubst_flags_t complain)\n   else if (type_unknown_p (e))\n     {\n       if (complain & tf_error)\n-        cxx_incomplete_type_error (e, TREE_TYPE (e));\n+        cxx_incomplete_type_error (e_loc, e, TREE_TYPE (e));\n       else\n         return error_mark_node;\n       t = size_one_node;\n     }\n   else\n-    return cxx_sizeof_or_alignof_type (TREE_TYPE (e), ALIGNOF_EXPR, false,\n+    return cxx_sizeof_or_alignof_type (loc, TREE_TYPE (e),\n+\t\t\t\t       ALIGNOF_EXPR, false,\n                                        complain & tf_error);\n \n-  return fold_convert (size_type_node, t);\n+  return fold_convert_loc (loc, size_type_node, t);\n }\n \n /* Process a sizeof or alignof expression E with code OP where the operand\n    is an expression.  */\n \n tree\n-cxx_sizeof_or_alignof_expr (tree e, enum tree_code op, bool complain)\n+cxx_sizeof_or_alignof_expr (location_t loc, tree e, enum tree_code op,\n+\t\t\t    bool complain)\n {\n   if (op == SIZEOF_EXPR)\n-    return cxx_sizeof_expr (e, complain? tf_warning_or_error : tf_none);\n+    return cxx_sizeof_expr (loc, e, complain? tf_warning_or_error : tf_none);\n   else\n-    return cxx_alignof_expr (e, complain? tf_warning_or_error : tf_none);\n+    return cxx_alignof_expr (loc, e, complain? tf_warning_or_error : tf_none);\n }\n \n /*  Build a representation of an expression 'alignas(E).'  Return the\n@@ -1905,7 +1913,8 @@ cxx_alignas_expr (tree e)\n \t   alignas(type-id ), it shall have the same effect as\n \t   alignas(alignof(type-id )).  */\n \n-    return cxx_sizeof_or_alignof_type (e, ALIGNOF_EXPR, true, false);\n+    return cxx_sizeof_or_alignof_type (input_location,\n+\t\t\t\t       e, ALIGNOF_EXPR, true, false);\n   \n   /* If we reach this point, it means the alignas expression if of\n      the form \"alignas(assignment-expression)\", so we should follow"}, {"sha": "340f9096520387532f87dc69ca31bd4d5229a1ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -1,3 +1,26 @@\n+2019-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/alignof2.C: New.\n+\t* g++.dg/diagnostic/alignof3.C: Likewise.\n+\t* g++.dg/diagnostic/incomplete-type-1.C: Likewise.\n+\t* g++.dg/warn/Wcatch-value-3b.C: Likewise.\n+\t* g++.dg/cpp0x/alignof3.C: Check location(s) too.\n+\t* g++.dg/cpp1z/decomp-bitfield1.C: Likewise.\n+\t* g++.dg/cpp1z/has-unique-obj-representations2.C: Likewise.\n+\t* g++.dg/expr/sizeof3.C: Likewise.\n+\t* g++.dg/ext/flexary6.C: Likewise.\n+\t* g++.dg/ext/vla4.C: Likewise.\n+\t* g++.dg/template/sizeof11.C: Likewise.\n+\t* g++.dg/warn/Wcatch-value-1.C: Likewise.\n+\t* g++.dg/warn/Wcatch-value-2.C: Likewise.\n+\t* g++.dg/warn/Wcatch-value-3.C: Likewise.\n+\t* g++.old-deja/g++.brendan/sizeof1.C: Likewise.\n+\t* g++.old-deja/g++.brendan/sizeof3.C: Likewise.\n+\t* g++.old-deja/g++.brendan/sizeof4.C: Likewise.\n+\t* g++.old-deja/g++.eh/ctor1.C: Likewise.\n+\t* g++.old-deja/g++.jason/ambig1.C: Likewise.\n+\t* g++.old-deja/g++.other/sizeof4.C: Likewise.\n+\n 2019-12-18  Peter Bergner <bergner@linux.ibm.com>\n \n \tPR bootstrap/92661"}, {"sha": "fa373ec3f09dabd3037bfc3220ce03204858ca45", "filename": "gcc/testsuite/g++.dg/cpp0x/alignof3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof3.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -2,5 +2,5 @@\n // { dg-options \"-pedantic\" }\n int main(void)\n {\n-  alignof(void (void));   // { dg-warning \"function type\" }\n+  alignof(void (void));   // { dg-warning \"3:ISO C\\\\+\\\\+ does not permit .alignof. applied to a function type\" }\n }"}, {"sha": "fcf93eb80fab3817430b440f87c84ff74360f9b4", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp-bitfield1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-bitfield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-bitfield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-bitfield1.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -15,5 +15,5 @@ void f()\n \n   long &r = x;\t\t\t// { dg-error \"bit\" }\n   &x;\t\t\t\t// { dg-error \"bit\" }\n-  sizeof(x);\t\t\t// { dg-error \"bit\" }\n+  sizeof(x);\t\t\t// { dg-error \"10:invalid application of .sizeof. to a bit-field\" }\n }"}, {"sha": "3daea89d78d7915e24a5b1d85bf4ea56f92563fd", "filename": "gcc/testsuite/g++.dg/cpp1z/has-unique-obj-representations2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations2.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -1,6 +1,6 @@\n struct S;\n-struct T { S t; };\t\t\t\t\t// { dg-error \"incomplete type\" }\n-struct U { int u[sizeof (S)]; };\t\t\t// { dg-error \"incomplete type\" }\n+struct T { S t; };\t\t\t\t\t// { dg-error \"14:field .t. has incomplete type\" }\n+struct U { int u[sizeof (S)]; };\t\t\t// { dg-error \"18:invalid application of .sizeof. to incomplete type\" }\n union V { char c; char d[]; };\t\t\t\t// { dg-error \"24:flexible array member in union\" }\n bool a = __has_unique_object_representations (S);\t// { dg-error \"incomplete type\" }\n bool b = __has_unique_object_representations (T);"}, {"sha": "0498cb5aa48ff455a4375d4ac99ef2c9475872fd", "filename": "gcc/testsuite/g++.dg/diagnostic/alignof2.C", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Falignof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Falignof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Falignof2.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -0,0 +1,2 @@\n+void f();\n+int i = __alignof(f); // { dg-error \"19:ISO C\\\\+\\\\+ forbids applying .__alignof.\" }"}, {"sha": "5a3e3f5c2a89ebeb1cdfdf55afd18a7b5dcefb46", "filename": "gcc/testsuite/g++.dg/diagnostic/alignof3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Falignof3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Falignof3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Falignof3.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -0,0 +1,5 @@\n+struct A { long i: 2; };\n+void f()\n+{\n+  __alignof(A::i); // { dg-error \"16:invalid application of .__alignof. to a bit-field\" }\n+}"}, {"sha": "8b08d73010a4872d958c4546d4ca54d380d3e150", "filename": "gcc/testsuite/g++.dg/diagnostic/incomplete-type-1.C", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fincomplete-type-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fincomplete-type-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fincomplete-type-1.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -0,0 +1,2 @@\n+template<typename> struct A; // { dg-message \"27:declaration\" }\n+template<typename T> A<T>::A(); // { dg-error \"22:invalid use of incomplete type\" }"}, {"sha": "915c86b2b72f439fd7dd6c168b95d00d8694aa0a", "filename": "gcc/testsuite/g++.dg/expr/sizeof3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fsizeof3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fsizeof3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fsizeof3.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -1,4 +1,4 @@\n // PR c++/15337\n \n class CCC; \n-int main() { sizeof(CCC); return 0; } // { dg-error \".*CCC.*\" }\n+int main() { sizeof(CCC); return 0; } // { dg-error \"14:invalid application of .sizeof. to incomplete type .CCC.\" }"}, {"sha": "e53c5d68583d80c99ec1a2f0f621136d49f35b9f", "filename": "gcc/testsuite/g++.dg/ext/flexary6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary6.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -9,7 +9,7 @@ struct A {\n   int n;\n   int a[];\n   enum {\n-    e = sizeof a   // { dg-error \"invalid application of .sizeof. to incomplete type\" }\n+    e = sizeof a   // { dg-error \"9:invalid application of .sizeof. to incomplete type\" }\n   };\n };\n \n@@ -18,6 +18,6 @@ struct B {\n   typedef int A[];\n   A a;\n   enum {\n-    e = sizeof a   // { dg-error \"invalid application of .sizeof. to incomplete type\" }\n+    e = sizeof a   // { dg-error \"9:invalid application of .sizeof. to incomplete type\" }\n   };\n };"}, {"sha": "e96f2735f8ac4f7787ac7ec2464c7d08edaaa0a9", "filename": "gcc/testsuite/g++.dg/ext/vla4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla4.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -6,7 +6,7 @@\n void f(int i) {\n   try {\n     int a[i];\n-    throw &a; // { dg-error \"int \\\\(\\\\*\\\\)\\\\\\[i\\\\\\]\" }\n+    throw &a; // { dg-error \"11:cannot throw expression of type .int \\\\(\\\\*\\\\)\\\\\\[i\\\\\\].\" }\n   } catch (int (*)[i]) { // { dg-error \"variable size\" }\n   }\n }"}, {"sha": "b1d4f72c7712eabed9c70475a81f5bb5a88737b1", "filename": "gcc/testsuite/g++.dg/template/sizeof11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsizeof11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsizeof11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsizeof11.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -9,6 +9,6 @@ template < int> void g()\n template < class T > struct B;\n template < int> void f()\n {\n-  sizeof (B<int>); // { dg-error \"incomplete\" }\n+  sizeof (B<int>); // { dg-error \"3:invalid application of .sizeof. to incomplete type\" }\n }\n "}, {"sha": "a84b337b939cacc8bcadeee6c3af5e92e654eb9f", "filename": "gcc/testsuite/g++.dg/warn/Wcatch-value-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-1.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -10,8 +10,8 @@ void foo()\n   try {}\n   catch (D)    {}\n   catch (C)    {}\n-  catch (B)    {}  // { dg-warning \"catching polymorphic type\" }\n-  catch (A)    {}  // { dg-warning \"catching polymorphic type\" }\n+  catch (B)    {}  // { dg-warning \"10:catching polymorphic type\" }\n+  catch (A)    {}  // { dg-warning \"10:catching polymorphic type\" }\n   catch (A*)   {}\n   catch (int)  {}\n \n@@ -27,7 +27,7 @@ void foo()\n template<typename T> void foo1()\n {\n   try {}\n-  catch (T) {}  // { dg-warning \"catching polymorphic type\" }\n+  catch (T) {}  // { dg-warning \"10:catching polymorphic type\" }\n }\n \n template<typename T> void foo2()"}, {"sha": "e20719c155bee4d0c4d53953be62cd65c90c086b", "filename": "gcc/testsuite/g++.dg/warn/Wcatch-value-2.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-2.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -8,10 +8,10 @@ struct D : C {};\n void foo()\n {\n   try {}\n-  catch (D)    {}  // { dg-warning \"catching type\" }\n-  catch (C)    {}  // { dg-warning \"catching type\" }\n-  catch (B)    {}  // { dg-warning \"catching polymorphic type\" }\n-  catch (A)    {}  // { dg-warning \"catching polymorphic type\" }\n+  catch (D)    {}  // { dg-warning \"10:catching type\" }\n+  catch (C)    {}  // { dg-warning \"10:catching type\" }\n+  catch (B)    {}  // { dg-warning \"10:catching polymorphic type\" }\n+  catch (A)    {}  // { dg-warning \"10:catching polymorphic type\" }\n   catch (A*)   {}\n   catch (int)  {}\n \n@@ -27,7 +27,7 @@ void foo()\n template<typename T> void foo1()\n {\n   try {}\n-  catch (T) {}  // { dg-warning \"catching\" }\n+  catch (T) {}  // { dg-warning \"10:catching\" }\n }\n \n template<typename T> void foo2()"}, {"sha": "c91a3c0859045f95a6c2fc44c64388797f2532df", "filename": "gcc/testsuite/g++.dg/warn/Wcatch-value-3.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-3.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -8,12 +8,12 @@ struct D : C {};\n void foo()\n {\n   try {}\n-  catch (D)    {}  // { dg-warning \"catching type\" }\n-  catch (C)    {}  // { dg-warning \"catching type\" }\n-  catch (B)    {}  // { dg-warning \"catching polymorphic type\" }\n-  catch (A)    {}  // { dg-warning \"catching polymorphic type\" }\n+  catch (D)    {}  // { dg-warning \"10:catching type\" }\n+  catch (C)    {}  // { dg-warning \"10:catching type\" }\n+  catch (B)    {}  // { dg-warning \"10:catching polymorphic type\" }\n+  catch (A)    {}  // { dg-warning \"10:catching polymorphic type\" }\n   catch (A*)   {}  // { dg-warning \"catching non-reference type\" }\n-  catch (int)  {}  // { dg-warning \"catching non-reference type\" }\n+  catch (int)  {}  // { dg-warning \"10:catching non-reference type\" }\n \n   try {}\n   catch (D&)   {}\n@@ -27,7 +27,7 @@ void foo()\n template<typename T> void foo1()\n {\n   try {}\n-  catch (T) {}  // { dg-warning \"catching\" }\n+  catch (T) {}  // { dg-warning \"10:catching\" }\n }\n \n template<typename T> void foo2()"}, {"sha": "cb9af4a60192d38c32482084d8ce7dc2c8d80bf9", "filename": "gcc/testsuite/g++.dg/warn/Wcatch-value-3b.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-3b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-3b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-3b.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -0,0 +1,64 @@\n+// { dg-options \"-Wcatch-value=3\" }\n+\n+struct A { virtual ~A() {} };\n+struct B : A {};\n+struct C {};\n+struct D : C {};\n+\n+void foo()\n+{\n+  try {}\n+  catch (D d)    {}  // { dg-warning \"12:catching type\" }\n+  catch (C c)    {}  // { dg-warning \"12:catching type\" }\n+  catch (B b)    {}  // { dg-warning \"12:catching polymorphic type\" }\n+  catch (A a)    {}  // { dg-warning \"12:catching polymorphic type\" }\n+  catch (A* a)   {}  // { dg-warning \"13:catching non-reference type\" }\n+  catch (int i)  {}  // { dg-warning \"14:catching non-reference type\" }\n+\n+  try {}\n+  catch (D& d)   {}\n+  catch (C& c)   {}\n+  catch (B& b)   {}\n+  catch (A& a)   {}\n+  catch (A* a)   {}  // { dg-warning \"13:catching non-reference type\" }\n+  catch (int& i) {}\n+}\n+\n+template<typename T> void foo1()\n+{\n+  try {}\n+  catch (T t) {}  // { dg-warning \"12:catching\" }\n+}\n+\n+template<typename T> void foo2()\n+{\n+  try {}\n+  catch (T* t) {}  // { dg-warning \"13:catching non-reference type\" }\n+\n+  try {}\n+  catch (T&) {}\n+\n+  try {}\n+  catch (const T&) {}\n+}\n+\n+void bar()\n+{\n+  foo1<int&>();\n+  foo1<const A&>();\n+  foo1<B&>();\n+  foo1<const C&>();\n+  foo1<D&>();\n+\n+  foo1<int>();  // { dg-message \"required\" }\n+  foo1<A>();    // { dg-message \"required\" }\n+  foo1<B>();    // { dg-message \"required\" }\n+  foo1<C>();    // { dg-message \"required\" }\n+  foo1<D>();    // { dg-message \"required\" }\n+\n+  foo2<int>();  // { dg-message \"required\" }\n+  foo2<A>();    // { dg-message \"required\" }\n+  foo2<B>();    // { dg-message \"required\" }\n+  foo2<C>();    // { dg-message \"required\" }\n+  foo2<D>();    // { dg-message \"required\" }\n+}"}, {"sha": "47ee1625e1f1153a674498a60038d15f6bafbdf1", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/sizeof1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof1.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -9,7 +9,7 @@ int\n main()\n {\n   // sizeof may not be applied to a function\n-  int i = sizeof( f);// { dg-error \"\" } .*\n+  int i = sizeof( f);// { dg-error \"19:ISO C\\\\+\\\\+ forbids applying .sizeof.\" } .*\n \n   return 0;\n }"}, {"sha": "309f1b6e8b128d813329fe6cbccc6355ec30932e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/sizeof3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof3.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -9,7 +9,7 @@ int\n main()\n {\n   // sizeof may not be applied to an undefined class\n-  int k = sizeof (bar);// { dg-error \"\" } .*\n+  int k = sizeof (bar);// { dg-error \"11:invalid application of .sizeof. to incomplete type\" } .*\n \n   return 0;\n }"}, {"sha": "8649c753b41749e7c78dc2d93f1dad2bafdbd68e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/sizeof4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fsizeof4.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -7,7 +7,7 @@ int\n main()\n {\n   // sizeof may not be applied to the type void\n-  int l = sizeof (void);// { dg-error \"\" } .*\n+  int l = sizeof (void);// { dg-error \"11:invalid application of .sizeof. to a void type\" } .*\n \n   return 0;\n }"}, {"sha": "cc39ac3953fa34627383f3bfc1660d1f5127cee9", "filename": "gcc/testsuite/g++.old-deja/g++.eh/ctor1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fctor1.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -11,7 +11,7 @@ main ()\n   try\n     {\n       throw A();\t\t// { dg-error \"rvalue\" \"\" { target c++14_down } } can't copy\n-      // { dg-error \"thrown expression\" \"expr\" { target c++14_down } .-1 }\n+      // { dg-message \"13:thrown expression\" \"expr\" { target c++14_down } .-1 }\n     }\n   catch (...) { }\n }"}, {"sha": "e6123995ad6da15eb30dd27fb553464003fd79f6", "filename": "gcc/testsuite/g++.old-deja/g++.jason/ambig1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fambig1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fambig1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fambig1.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -3,5 +3,5 @@\n // Testcase for ambiguity between functional cast and abstract declarator.\n // This ambiguity accounts for 6 of the r/r conflicts.\n \n-int i = sizeof (int ());\t// { dg-error \"\" } sizeof applied to fn type\n+int i = sizeof (int ());\t// { dg-error \"9:invalid application of .sizeof. to a function type\" } sizeof applied to fn type\n int j = sizeof (int () + 1);"}, {"sha": "3a2699a73632e0913af4232a45313ed18703c31b", "filename": "gcc/testsuite/g++.old-deja/g++.other/sizeof4.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsizeof4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsizeof4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsizeof4.C?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -17,21 +17,21 @@ void fn () {}\n \n int main (int argc, char **argv)\n {\n-  sizeof (s);           // { dg-error \"\" } incomplete\n-  sizeof (0, s);        // { dg-error \"\" } incomplete\n-  sizeof (argc ? s : s); // { dg-error \"\" } incomplete\n+  sizeof (s);           // { dg-error \"3:invalid application of .sizeof. to incomplete type\" } incomplete\n+  sizeof (0, s);        // { dg-error \"3:invalid application of .sizeof. to incomplete type\" } incomplete\n+  sizeof (argc ? s : s); // { dg-error \"3:invalid application of .sizeof. to incomplete type\" } incomplete\n \n-  sizeof (arys);        // { dg-error \"\" } incomplete\n-  sizeof (0, arys);     // { dg-error \"\" } incomplete\n-  sizeof (argc ? arys : arys); // { dg-error \"\" } incomplete\n+  sizeof (arys);        // { dg-error \"3:invalid application of .sizeof. to incomplete type\" } incomplete\n+  sizeof (0, arys);     // { dg-error \"3:invalid application of .sizeof. to incomplete type\" } incomplete\n+  sizeof (argc ? arys : arys); // { dg-error \"3:invalid application of .sizeof. to incomplete type\" } incomplete\n \n-  sizeof (aryt);        // { dg-error \"\" } incomplete\n-  sizeof (0, aryt);     // { dg-error \"\" } incomplete\n-  sizeof (argc ? aryt : aryt); // { dg-error \"\" } incomplete\n+  sizeof (aryt);        // { dg-error \"3:invalid application of .sizeof. to incomplete type\" } incomplete\n+  sizeof (0, aryt);     // { dg-error \"3:invalid application of .sizeof. to incomplete type\" } incomplete\n+  sizeof (argc ? aryt : aryt); // { dg-error \"3:invalid application of .sizeof. to incomplete type\" } incomplete\n   \n-  sizeof (fn);            // { dg-error \"\" } cannot take size of function\n-  sizeof (0, fn);         // { dg-error \"\" } cannot take size of function\n-  sizeof (argc ? fn : fn); // { dg-error \"\" } cannot take size of function\n+  sizeof (fn);            // { dg-error \"11:ISO C\\\\+\\\\+ forbids applying .sizeof.\" } cannot take size of function\n+  sizeof (0, fn);         // { dg-error \"3:invalid application of .sizeof. to a function type\" } cannot take size of function\n+  sizeof (argc ? fn : fn); // { dg-error \"3:invalid application of .sizeof. to a function type\" } cannot take size of function\n   \n   sizeof (&fn);       // ok\n   sizeof (0, &fn);    // ok"}, {"sha": "a56deb5a9db4d92e5ca446c942b7fe50d30bcac3", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -1,3 +1,10 @@\n+2019-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* libcp1plugin.cc (plugin_build_unary_expr): Update build_throw\n+\tand cxx_sizeof_or_alignof_expr calls.\n+\t(plugin_build_unary_type_expr): Likewise for\n+\tcxx_sizeof_or_alignof_type.\n+\n 2019-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* libcp1plugin.cc (plugin_build_cast_expr): Adjust build_cast"}, {"sha": "56eaf9b4f1410dc2c7a7822f3612a507665163c2", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3769410c65a7d3f2d58402c3ecf5c253e340c2e/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "patch": "@@ -2797,7 +2797,7 @@ plugin_build_unary_expr (cc1_plugin::connection *self,\n       break;\n \n     case THROW_EXPR:\n-      result = build_throw (op0);\n+      result = build_throw (input_location, op0);\n       break;\n \n     case TYPEID_EXPR:\n@@ -2806,7 +2806,8 @@ plugin_build_unary_expr (cc1_plugin::connection *self,\n \n     case SIZEOF_EXPR:\n     case ALIGNOF_EXPR:\n-      result = cxx_sizeof_or_alignof_expr (op0, opcode, true);\n+      result = cxx_sizeof_or_alignof_expr (input_location,\n+\t\t\t\t\t   op0, opcode, true);\n       break;\n \n     case DELETE_EXPR:\n@@ -3048,7 +3049,8 @@ plugin_build_unary_type_expr (cc1_plugin::connection *self,\n \n     default:\n       /* Use the C++11 alignof semantics.  */\n-      result = cxx_sizeof_or_alignof_type (type, opcode, true, true);\n+      result = cxx_sizeof_or_alignof_type (input_location, type,\n+\t\t\t\t\t   opcode, true, true);\n     }\n \n   if (template_dependent_p)"}]}