{"sha": "a8a5f4a9721cba832bf734c4be40d4a3f523d031", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThhNWY0YTk3MjFjYmE4MzJiZjczNGM0YmU0MGQ0YTNmNTIzZDAzMQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-04-30T19:02:23Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-04-30T19:02:23Z"}, "message": "gfortran.h (gfc_init_coarray_decl): Remove.\n\n2014-04-30  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.h (gfc_init_coarray_decl): Remove.\n        * parse.c (translate_all_program_units): Remove call to it.\n        (gfc_parse_file): Update call.\n        * trans.h (gfor_fndecl_caf_this_image,\n        gfor_fndecl_caf_num_images): Add.\n        (gfort_gvar_caf_num_images,\n        gfort_gvar_caf_this_image): Remove.\n        * trans-decl.c (gfor_fndecl_caf_this_image,\n        gfor_fndecl_caf_num_images): Add.\n        (gfort_gvar_caf_num_images,\n        gfort_gvar_caf_this_image): Remove.\n        (gfc_build_builtin_function_decls): Init new decl.\n        (gfc_init_coarray_dec): Remove.\n        (create_main_function): Change calls.\n        * trans-intrinsic.c (trans_this_image, trans_image_index,\n        conv_intrinsic_cobound): Generate call to new library function\n        instead of to a static variable.\n        * trans-stmt.c (gfc_trans_sync): Ditto.\n\n2014-04-30  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray_lib_this_image_1.f90: New.\n        * gfortran.dg/coarray_lib_this_image_2.f90: New.\n\n2014-04-30  Tobias Burnus  <burnus@net-b.de>\n\n        * caf/libcaf.h (_gfortran_caf_this_image,\n        * _gfortran_caf_num_images):\n        New prototypes.\n        (_gfortran_caf_init): Change prototype.\n        (mpi_token_t): New typedef.\n        (TOKEN): New define.\n        * caf/mpi.c (_gfortran_caf_this_image,\n        * _gfortran_caf_num_images):\n        New functions.\n        (_gfortran_caf_init): Update.\n        (_gfortran_caf_finalize, _gfortran_caf_register,\n        _gfortran_caf_deregister): Use mpi_token_t.\n        * caf/single.c (_gfortran_caf_this_image,\n        * _gfortran_caf_num_images):\n        New functions.\n        (_gfortran_caf_init): Update.\n        (_gfortran_caf_finalize, _gfortran_caf_register,\n        _gfortran_caf_deregister): Use mpi_token_t, simplify.\n\nFrom-SVN: r209951", "tree": {"sha": "2ffac560d70a10f75cbb96e29d94316c0dbbaef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ffac560d70a10f75cbb96e29d94316c0dbbaef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8a5f4a9721cba832bf734c4be40d4a3f523d031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a5f4a9721cba832bf734c4be40d4a3f523d031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a5f4a9721cba832bf734c4be40d4a3f523d031", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a5f4a9721cba832bf734c4be40d4a3f523d031/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7"}], "stats": {"total": 346, "additions": 215, "deletions": 131}, "files": [{"sha": "3502f489f22eaa0dafa142cc1b28bd6e65b80e75", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -1,3 +1,24 @@\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_init_coarray_decl): Remove.\n+\t* parse.c (translate_all_program_units): Remove call to it.\n+\t(gfc_parse_file): Update call.\n+\t* trans.h (gfor_fndecl_caf_this_image,\n+\tgfor_fndecl_caf_num_images): Add.\n+\t(gfort_gvar_caf_num_images,\n+\tgfort_gvar_caf_this_image): Remove.\n+\t* trans-decl.c (gfor_fndecl_caf_this_image,\n+\tgfor_fndecl_caf_num_images): Add.\n+\t(gfort_gvar_caf_num_images,\n+\tgfort_gvar_caf_this_image): Remove.\n+\t(gfc_build_builtin_function_decls): Init new decl.\n+\t(gfc_init_coarray_dec): Remove.\n+\t(create_main_function): Change calls.\n+\t* trans-intrinsic.c (trans_this_image, trans_image_index,\n+\tconv_intrinsic_cobound): Generate call to new library function\n+\tinstead of to a static variable.\n+\t* trans-stmt.c (gfc_trans_sync): Ditto.\n+\n 2014-04-30  Tobias Burnus  <burnus@net-b.de>\n \n \t* trans-expr.c (get_tree_for_caf_expr): Fix handling of polymorphic"}, {"sha": "0707b58bd2b62d54dc27a98af86b484f12cbf71c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -2948,7 +2948,6 @@ bool gfc_convert_to_structure_constructor (gfc_expr *, gfc_symbol *,\n /* trans.c */\n void gfc_generate_code (gfc_namespace *);\n void gfc_generate_module_code (gfc_namespace *);\n-void gfc_init_coarray_decl (bool);\n \n /* trans-intrinsic.c */\n bool gfc_inline_intrinsic_function_p (gfc_expr *);"}, {"sha": "77667150176216ad0ee4fe2a0475bf6dfcd27a21", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -4495,19 +4495,13 @@ clean_up_modules (gfc_gsymbol *gsym)\n /* Translate all the program units. This could be in a different order\n    to resolution if there are forward references in the file.  */\n static void\n-translate_all_program_units (gfc_namespace *gfc_global_ns_list,\n-\t\t\t     bool main_in_tu)\n+translate_all_program_units (gfc_namespace *gfc_global_ns_list)\n {\n   int errors;\n \n   gfc_current_ns = gfc_global_ns_list;\n   gfc_get_errors (NULL, &errors);\n \n-  /* If the main program is in the translation unit and we have\n-     -fcoarray=libs, generate the static variables.  */\n-  if (gfc_option.coarray == GFC_FCOARRAY_LIB && main_in_tu)\n-    gfc_init_coarray_decl (true);\n-\n   /* We first translate all modules to make sure that later parts\n      of the program can use the decl. Then we translate the nonmodules.  */\n \n@@ -4729,7 +4723,7 @@ gfc_parse_file (void)\n       }\n \n   /* Do the translation.  */\n-  translate_all_program_units (gfc_global_ns_list, seen_program);\n+  translate_all_program_units (gfc_global_ns_list);\n \n   gfc_end_source_files ();\n   return true;"}, {"sha": "c835a3b34de3ead91ee4039d03d470ea24284eb5", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 13, "deletions": 64, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -121,6 +121,8 @@ tree gfor_fndecl_associated;\n /* Coarray run-time library function decls.  */\n tree gfor_fndecl_caf_init;\n tree gfor_fndecl_caf_finalize;\n+tree gfor_fndecl_caf_this_image;\n+tree gfor_fndecl_caf_num_images;\n tree gfor_fndecl_caf_register;\n tree gfor_fndecl_caf_deregister;\n tree gfor_fndecl_caf_critical;\n@@ -130,11 +132,6 @@ tree gfor_fndecl_caf_sync_images;\n tree gfor_fndecl_caf_error_stop;\n tree gfor_fndecl_caf_error_stop_str;\n \n-/* Coarray global variables for num_images/this_image.  */\n-\n-tree gfort_gvar_caf_num_images;\n-tree gfort_gvar_caf_this_image;\n-\n \n /* Math functions.  Many other math functions are handled in\n    trans-intrinsic.c.  */\n@@ -3247,6 +3244,14 @@ gfc_build_builtin_function_decls (void)\n       gfor_fndecl_caf_finalize = gfc_build_library_function_decl (\n \tget_identifier (PREFIX(\"caf_finalize\")), void_type_node, 0);\n \n+      gfor_fndecl_caf_this_image = gfc_build_library_function_decl (\n+\t\t   get_identifier (PREFIX(\"caf_this_image\")), integer_type_node,\n+\t\t   1, integer_type_node);\n+\n+      gfor_fndecl_caf_num_images = gfc_build_library_function_decl (\n+\t\t   get_identifier (PREFIX(\"caf_num_images\")), integer_type_node,\n+\t\t   2, integer_type_node, boolean_type_node);\n+\n       gfor_fndecl_caf_register = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_register\")), \"...WWW\", pvoid_type_node, 6,\n         size_type_node, integer_type_node, ppvoid_type_node, pint_type,\n@@ -5105,59 +5110,6 @@ add_argument_checking (stmtblock_t *block, gfc_symbol *sym)\n }\n \n \n-/* Generate the _gfortran_caf_this_image and _gfortran_caf_num_images\n-   global variables for -fcoarray=lib. They are placed into the translation\n-   unit of the main program.  Make sure that in one TU (the one of the main\n-   program), the first call to gfc_init_coarray_decl is done with true.\n-   Otherwise, expect link errors.  */\n-\n-void\n-gfc_init_coarray_decl (bool main_tu)\n-{\n-  if (gfc_option.coarray != GFC_FCOARRAY_LIB)\n-    return;\n-\n-  if (gfort_gvar_caf_this_image || gfort_gvar_caf_num_images)\n-    return;\n-\n-  push_cfun (cfun);\n-\n-  gfort_gvar_caf_this_image\n-\t= build_decl (input_location, VAR_DECL,\n-\t\t      get_identifier (PREFIX(\"caf_this_image\")),\n-\t\t      integer_type_node);\n-  DECL_ARTIFICIAL (gfort_gvar_caf_this_image) = 1;\n-  TREE_USED (gfort_gvar_caf_this_image) = 1;\n-  TREE_PUBLIC (gfort_gvar_caf_this_image) = 1;\n-  TREE_READONLY (gfort_gvar_caf_this_image) = 0;\n-\n-  if (main_tu)\n-    TREE_STATIC (gfort_gvar_caf_this_image) = 1;\n-  else\n-    DECL_EXTERNAL (gfort_gvar_caf_this_image) = 1;\n-\n-  pushdecl_top_level (gfort_gvar_caf_this_image);\n-\n-  gfort_gvar_caf_num_images\n-\t= build_decl (input_location, VAR_DECL,\n-\t\t      get_identifier (PREFIX(\"caf_num_images\")),\n-\t\t      integer_type_node);\n-  DECL_ARTIFICIAL (gfort_gvar_caf_num_images) = 1;\n-  TREE_USED (gfort_gvar_caf_num_images) = 1;\n-  TREE_PUBLIC (gfort_gvar_caf_num_images) = 1;\n-  TREE_READONLY (gfort_gvar_caf_num_images) = 0;\n-\n-  if (main_tu)\n-    TREE_STATIC (gfort_gvar_caf_num_images) = 1;\n-  else\n-    DECL_EXTERNAL (gfort_gvar_caf_num_images) = 1;\n-\n-  pushdecl_top_level (gfort_gvar_caf_num_images);\n-\n-  pop_cfun ();\n-}\n-\n-\n static void\n create_main_function (tree fndecl)\n {\n@@ -5237,20 +5189,17 @@ create_main_function (tree fndecl)\n \n   /* Call some libgfortran initialization routines, call then MAIN__(). */\n \n-  /* Call _gfortran_caf_init (*argc, ***argv, *this_image, *num_images).  */\n+  /* Call _gfortran_caf_init (*argc, ***argv).  */\n   if (gfc_option.coarray == GFC_FCOARRAY_LIB)\n     {\n       tree pint_type, pppchar_type;\n       pint_type = build_pointer_type (integer_type_node);\n       pppchar_type\n \t= build_pointer_type (build_pointer_type (pchar_type_node));\n \n-      gfc_init_coarray_decl (true);\n-      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_init, 4,\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_init, 2,\n \t\tgfc_build_addr_expr (pint_type, argc),\n-\t\tgfc_build_addr_expr (pppchar_type, argv),\n-\t\tgfc_build_addr_expr (pint_type, gfort_gvar_caf_this_image),\n-\t\tgfc_build_addr_expr (pint_type, gfort_gvar_caf_num_images));\n+\t\tgfc_build_addr_expr (pppchar_type, argv));\n       gfc_add_expr_to_block (&body, tmp);\n     }\n "}, {"sha": "e13c0dedd11917f583f6ddc2d309e8d8d2c045e6", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -937,13 +937,13 @@ trans_this_image (gfc_se * se, gfc_expr *expr)\n   /* The case -fcoarray=single is handled elsewhere.  */\n   gcc_assert (gfc_option.coarray != GFC_FCOARRAY_SINGLE);\n \n-  gfc_init_coarray_decl (false);\n-\n   /* Argument-free version: THIS_IMAGE().  */\n   if (expr->value.function.actual->expr == NULL)\n     {\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_this_image, 1,\n+\t\t\t\t integer_zero_node);\n       se->expr = fold_convert (gfc_get_int_type (gfc_default_integer_kind),\n-\t\t\t       gfort_gvar_caf_this_image);\n+\t\t\t       tmp);\n       return;\n     }\n \n@@ -1039,9 +1039,10 @@ trans_this_image (gfc_se * se, gfc_expr *expr)\n   */\n \n   /* this_image () - 1.  */\n-  tmp = fold_convert (type, gfort_gvar_caf_this_image);\n-  tmp = fold_build2_loc (input_location, MINUS_EXPR, type, tmp,\n-\t\t       build_int_cst (type, 1));\n+  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_this_image, 1,\n+\t\t\t     integer_zero_node);\n+  tmp = fold_build2_loc (input_location, MINUS_EXPR, type,\n+\t\t\t fold_convert (type, tmp), build_int_cst (type, 1));\n   if (corank == 1)\n     {\n       /* sub(1) = m + lcobound(corank).  */\n@@ -1244,8 +1245,10 @@ trans_image_index (gfc_se * se, gfc_expr *expr)\n     num_images = build_int_cst (type, 1);\n   else\n     {\n-      gfc_init_coarray_decl (false);\n-      num_images = fold_convert (type, gfort_gvar_caf_num_images);\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_num_images, 2,\n+\t\t\t\t integer_zero_node,\n+\t\t\t\t build_int_cst (integer_type_node, -1));\n+      num_images = fold_convert (type, tmp);\n     }\n \n   tmp = gfc_create_var (type, NULL);\n@@ -1264,9 +1267,10 @@ trans_image_index (gfc_se * se, gfc_expr *expr)\n static void\n trans_num_images (gfc_se * se)\n {\n-  gfc_init_coarray_decl (false);\n-  se->expr = fold_convert (gfc_get_int_type (gfc_default_integer_kind),\n-\t\t\t   gfort_gvar_caf_num_images);\n+  tree tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_num_images, 2,\n+\t\t\t\t  integer_zero_node,\n+\t\t\t\t  build_int_cst (integer_type_node, -1));\n+  se->expr = fold_convert (gfc_get_int_type (gfc_default_integer_kind), tmp);\n }\n \n \n@@ -1607,13 +1611,13 @@ conv_intrinsic_cobound (gfc_se * se, gfc_expr * expr)\n \t{\n           tree cosize;\n \n-\t  gfc_init_coarray_decl (false);\n \t  cosize = gfc_conv_descriptor_cosize (desc, arg->expr->rank, corank);\n-\n+\t  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_num_images,\n+\t\t\t\t     2, integer_zero_node,\n+\t\t\t\t     build_int_cst (integer_type_node, -1));\n \t  tmp = fold_build2_loc (input_location, MINUS_EXPR,\n \t\t\t\t gfc_array_index_type,\n-\t\t\t\t fold_convert (gfc_array_index_type,\n-\t\t\t\t\t       gfort_gvar_caf_num_images),\n+\t\t\t\t fold_convert (gfc_array_index_type, tmp),\n \t\t\t\t build_int_cst (gfc_array_index_type, 1));\n \t  tmp = fold_build2_loc (input_location, TRUNC_DIV_EXPR,\n \t\t\t\t gfc_array_index_type, tmp,\n@@ -1624,11 +1628,12 @@ conv_intrinsic_cobound (gfc_se * se, gfc_expr * expr)\n       else if (gfc_option.coarray != GFC_FCOARRAY_SINGLE)\n \t{\n \t  /* ubound = lbound + num_images() - 1.  */\n-\t  gfc_init_coarray_decl (false);\n+\t  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_num_images,\n+\t\t\t\t     2, integer_zero_node,\n+\t\t\t\t     build_int_cst (integer_type_node, -1));\n \t  tmp = fold_build2_loc (input_location, MINUS_EXPR,\n \t\t\t\t gfc_array_index_type,\n-\t\t\t\t fold_convert (gfc_array_index_type,\n-\t\t\t\t\t       gfort_gvar_caf_num_images),\n+\t\t\t\t fold_convert (gfc_array_index_type, tmp),\n \t\t\t\t build_int_cst (gfc_array_index_type, 1));\n \t  resbound = fold_build2_loc (input_location, PLUS_EXPR,\n \t\t\t\t      gfc_array_index_type, resbound, tmp);"}, {"sha": "212a2586d2acae0e0f1fd98b2ae67a5f861750ed", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -784,8 +784,11 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n       else\n \t{\n \t  tree cond2;\n+\t  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_num_images,\n+\t\t\t\t     2, integer_zero_node,\n+\t\t\t\t     build_int_cst (integer_type_node, -1));\n \t  cond = fold_build2_loc (input_location, GT_EXPR, boolean_type_node,\n-\t\t\t\t  images, gfort_gvar_caf_num_images);\n+\t\t\t\t  images, tmp);\n \t  cond2 = fold_build2_loc (input_location, LT_EXPR, boolean_type_node,\n \t\t\t\t   images,\n \t\t\t\t   build_int_cst (TREE_TYPE (images), 1));"}, {"sha": "f69371288a90333260e8250fd44cfc5518f06144", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -1303,7 +1303,14 @@ gfc_build_array_type (tree type, gfc_array_spec * as,\n {\n   tree lbound[GFC_MAX_DIMENSIONS];\n   tree ubound[GFC_MAX_DIMENSIONS];\n-  int n;\n+  int n, corank;\n+\n+  /* Assumed-shape arrays do not have codimension information stored in the\n+     descriptor.  */\n+  corank = as->corank;\n+  if (as->type == AS_ASSUMED_SHAPE ||\n+      (as->type == AS_ASSUMED_RANK && akind == GFC_ARRAY_ALLOCATABLE))\n+    corank = 0;\n \n   if (as->type == AS_ASSUMED_RANK)\n     for (n = 0; n < GFC_MAX_DIMENSIONS; n++)\n@@ -1322,14 +1329,14 @@ gfc_build_array_type (tree type, gfc_array_spec * as,\n       ubound[n] = gfc_conv_array_bound (as->upper[n]);\n     }\n \n-  for (n = as->rank; n < as->rank + as->corank; n++)\n+  for (n = as->rank; n < as->rank + corank; n++)\n     {\n       if (as->type != AS_DEFERRED && as->lower[n] == NULL)\n         lbound[n] = gfc_index_one_node;\n       else\n         lbound[n] = gfc_conv_array_bound (as->lower[n]);\n \n-      if (n < as->rank + as->corank - 1)\n+      if (n < as->rank + corank - 1)\n \tubound[n] = gfc_conv_array_bound (as->upper[n]);\n     }\n \n@@ -1341,7 +1348,7 @@ gfc_build_array_type (tree type, gfc_array_spec * as,\n \t\t       : GFC_ARRAY_ASSUMED_RANK;\n   return gfc_get_array_type_bounds (type, as->rank == -1\n \t\t\t\t\t  ? GFC_MAX_DIMENSIONS : as->rank,\n-\t\t\t\t    as->corank, lbound,\n+\t\t\t\t    corank, lbound,\n \t\t\t\t    ubound, 0, akind, restricted);\n }\n \f"}, {"sha": "13b0a0005442138960541374d0a3d41a59d512d4", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -699,6 +699,8 @@ extern GTY(()) tree gfor_fndecl_associated;\n /* Coarray run-time library function decls.  */\n extern GTY(()) tree gfor_fndecl_caf_init;\n extern GTY(()) tree gfor_fndecl_caf_finalize;\n+extern GTY(()) tree gfor_fndecl_caf_this_image;\n+extern GTY(()) tree gfor_fndecl_caf_num_images;\n extern GTY(()) tree gfor_fndecl_caf_register;\n extern GTY(()) tree gfor_fndecl_caf_deregister;\n extern GTY(()) tree gfor_fndecl_caf_critical;\n@@ -708,10 +710,6 @@ extern GTY(()) tree gfor_fndecl_caf_sync_images;\n extern GTY(()) tree gfor_fndecl_caf_error_stop;\n extern GTY(()) tree gfor_fndecl_caf_error_stop_str;\n \n-/* Coarray global variables for num_images/this_image.  */\n-extern GTY(()) tree gfort_gvar_caf_num_images;\n-extern GTY(()) tree gfort_gvar_caf_this_image;\n-\n \n /* Math functions.  Many other math functions are handled in\n    trans-intrinsic.c.  */"}, {"sha": "74791d9155b1bd8f6d81862c8a46af7de30556e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -1,3 +1,8 @@\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_lib_this_image_1.f90: New.\n+\t* gfortran.dg/coarray_lib_this_image_2.f90: New.\n+\n 2014-04-30  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/coarray_poly_4.f90: New."}, {"sha": "fe565165884e07565f66ccc19a57fe7e971bedfb", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_this_image_1.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_this_image_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_this_image_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_this_image_1.f90?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib -fdump-tree-original\" }\n+!\n+\n+  implicit none\n+  real :: x(2)[*]\n+  call bar(x)\n+contains\n+  subroutine bar(x)\n+    integer :: mylcobound, myucobound, mylbound, mythis_image\n+    real :: x(2)[5:*]\n+    mylcobound = lcobound(x,dim=1)\n+    myucobound = ucobound(x,dim=1)\n+    mylbound = lbound(x,dim=1)\n+    mythis_image = this_image()\n+  end subroutine bar\n+end\n+\n+! { dg-final { scan-tree-dump-times \"bar \\\\(real\\\\(kind=4\\\\)\\\\\\[2\\\\\\] \\\\* restrict x, void \\\\* restrict caf_token.., integer\\\\(kind=8\\\\) caf_offset..\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"mylcobound = 5;\" 1 \"original\" } }\n+! { dg.final { scan-tree-dump-times \"parm...dim\\\\\\[1\\\\\\].lbound = 5;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"myucobound = \\\\(integer\\\\(kind=4\\\\)\\\\) \\\\(\\\\(\\\\(unsigned int\\\\) parm...dim\\\\\\[1\\\\\\].lbound \\\\+ \\\\(unsigned int\\\\) _gfortran_caf_num_images \\\\(0, -1\\\\)\\\\) \\\\+ 4294967295\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"mylbound = 1;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"mythis_image = _gfortran_caf_this_image \\\\(0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"bar \\\\(x, caf_token.., 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_init \\\\(&argc, &argv\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "9219b2a6571ad3fb641dd27f087393d783562ec2", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_this_image_2.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_this_image_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_this_image_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_this_image_2.f90?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib -fdump-tree-original\" }\n+!\n+\n+  implicit none\n+  real :: x(2)[*]\n+  call bar(x)\n+contains\n+  subroutine bar(x)\n+    integer :: mylcobound, myucobound, mylbound, mythis_image\n+    real :: x(:)[5:*]\n+    mylcobound = lcobound(x,dim=1)\n+    myucobound = ucobound(x,dim=1)\n+    mylbound = lbound(x,dim=1)\n+    mythis_image = this_image()\n+  end subroutine bar\n+end\n+\n+! { dg-final { scan-tree-dump-times \"bar \\\\(struct array2_real\\\\(kind=4\\\\) & restrict x, void \\\\* restrict caf_token.., integer\\\\(kind=8\\\\) caf_offset..\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"mylcobound = 5;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"parm...dim\\\\\\[1\\\\\\].lbound = 5;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"myucobound = \\\\(integer\\\\(kind=4\\\\)\\\\) \\\\(\\\\(\\\\(unsigned int\\\\) parm...dim\\\\\\[1\\\\\\].lbound \\\\+ \\\\(unsigned int\\\\) _gfortran_caf_num_images \\\\(0, -1\\\\)\\\\) \\\\+ 4294967295\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"mylbound = parm...dim\\\\\\[0\\\\\\].stride >= 0 && parm...dim\\\\\\[0\\\\\\].ubound >= parm...dim\\\\\\[0\\\\\\].lbound \\\\|\\\\| parm...dim\\\\\\[0\\\\\\].stride < 0 \\\\? \\\\(integer\\\\(kind=4\\\\)\\\\) parm...dim\\\\\\[0\\\\\\].lbound : 1;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"mythis_image = _gfortran_caf_this_image \\\\(0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"bar \\\\(&parm.\\[0-9\\]+, caf_token.\\[0-9\\]+, \\\\(integer\\\\(kind=8\\\\)\\\\) parm.\\[0-9\\]+.data - \\\\(integer\\\\(kind=8\\\\)\\\\) x\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_init \\\\(&argc, &argv\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "e78a498c7f681fb56e199a3f26003d1f6d6e7c63", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -1,3 +1,21 @@\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (_gfortran_caf_this_image, _gfortran_caf_num_images):\n+\tNew prototypes.\n+\t(_gfortran_caf_init): Change prototype.\n+\t(mpi_token_t): New typedef.\n+\t(TOKEN): New define.\n+\t* caf/mpi.c (_gfortran_caf_this_image, _gfortran_caf_num_images):\n+\tNew functions.\n+\t(_gfortran_caf_init): Update.\n+\t(_gfortran_caf_finalize, _gfortran_caf_register,\n+\t_gfortran_caf_deregister): Use mpi_token_t.\n+\t* caf/single.c (_gfortran_caf_this_image, _gfortran_caf_num_images):\n+\tNew functions.\n+\t(_gfortran_caf_init): Update.\n+\t(_gfortran_caf_finalize, _gfortran_caf_register,\n+\t_gfortran_caf_deregister): Use mpi_token_t, simplify.\n+\n 2014-04-26  Jerry DeLisle  <jvdelisle@gcc.gnu>\n \n \tPR libfortran/52539"}, {"sha": "8b8fd3e2b8f5e8a0b28b22c6cc37242f8ae7d0a4", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -26,8 +26,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef LIBCAF_H\n #define LIBCAF_H\n \n+#include <stdbool.h>\n+#include <stddef.h>\t/* For size_t.  */\n #include <stdint.h>\t/* For int32_t.  */\n-#include <stddef.h>\t/* For ptrdiff_t.  */\n \n #ifndef __GNUC__\n #define __attribute__(x)\n@@ -55,21 +56,25 @@ typedef enum caf_register_t {\n }\n caf_register_t;\n \n+typedef void* caf_token_t;\n+\n /* Linked list of static coarrays registered.  */\n typedef struct caf_static_t {\n-  void **token;\n+  caf_token_t token;\n   struct caf_static_t *prev;\n }\n caf_static_t;\n \n \n-void _gfortran_caf_init (int *, char ***, int *, int *);\n+void _gfortran_caf_init (int *, char ***);\n void _gfortran_caf_finalize (void);\n \n-void * _gfortran_caf_register (ptrdiff_t, caf_register_t, void ***, int *,\n-\t\t\t       char *, int);\n-void _gfortran_caf_deregister (void ***, int *, char *, int);\n+int _gfortran_caf_this_image (int);\n+int _gfortran_caf_num_images (int, bool);\n \n+void *_gfortran_caf_register (size_t, caf_register_t, caf_token_t *, int *,\n+\t\t\t      char *, int);\n+void _gfortran_caf_deregister (caf_token_t *, int *, char *, int);\n \n void _gfortran_caf_sync_all (int *, char *, int);\n void _gfortran_caf_sync_images (int, int[], int *, char *, int);"}, {"sha": "fe2baf4633caa4b981e814dccd9e41acc101298c", "filename": "libgfortran/caf/mpi.c", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/libgfortran%2Fcaf%2Fmpi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/libgfortran%2Fcaf%2Fmpi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fmpi.c?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -34,6 +34,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Define GFC_CAF_CHECK to enable run-time checking.  */\n /* #define GFC_CAF_CHECK  1  */\n \n+typedef void ** mpi_token_t;\n+#define TOKEN(X) ((mpi_token_t) (X))\n \n static void error_stop (int error) __attribute__ ((noreturn));\n \n@@ -73,7 +75,7 @@ caf_runtime_error (const char *message, ...)\n    libaray is initialized.  */\n \n void\n-_gfortran_caf_init (int *argc, char ***argv, int *this_image, int *num_images)\n+_gfortran_caf_init (int *argc, char ***argv)\n {\n   if (caf_num_images == 0)\n     {\n@@ -87,11 +89,6 @@ _gfortran_caf_init (int *argc, char ***argv, int *this_image, int *num_images)\n       MPI_Comm_rank (MPI_COMM_WORLD, &caf_this_image);\n       caf_this_image++;\n     }\n-\n-  if (this_image)\n-    *this_image = caf_this_image;\n-  if (num_images)\n-    *num_images = caf_num_images;\n }\n \n \n@@ -104,8 +101,8 @@ _gfortran_caf_finalize (void)\n     {\n       caf_static_t *tmp = caf_static_list->prev;\n \n-      free (caf_static_list->token[caf_this_image-1]);\n-      free (caf_static_list->token);\n+      free (TOKEN (caf_static_list->token)[caf_this_image-1]);\n+      free (TOKEN (caf_static_list->token));\n       free (caf_static_list);\n       caf_static_list = tmp;\n     }\n@@ -117,8 +114,23 @@ _gfortran_caf_finalize (void)\n }\n \n \n+int\n+_gfortran_caf_this_image (int distance __attribute__ ((unused)))\n+{\n+  return caf_this_image;\n+}\n+\n+\n+int\n+_gfortran_caf_num_images (int distance __attribute__ ((unused)),\n+\t\t\t  bool failed __attribute__ ((unused)))\n+{\n+  return caf_num_images;\n+}\n+\n+\n void *\n-_gfortran_caf_register (ptrdiff_t size, caf_register_t type, void ***token,\n+_gfortran_caf_register (size_t size, caf_register_t type, caf_token_t *token,\n \t\t\tint *stat, char *errmsg, int errmsg_len)\n {\n   void *local;\n@@ -129,17 +141,17 @@ _gfortran_caf_register (ptrdiff_t size, caf_register_t type, void ***token,\n \n   /* Start MPI if not already started.  */\n   if (caf_num_images == 0)\n-    _gfortran_caf_init (NULL, NULL, NULL, NULL);\n+    _gfortran_caf_init (NULL, NULL);\n \n   /* Token contains only a list of pointers.  */\n   local = malloc (size);\n-  *token = malloc (sizeof (void*) * caf_num_images);\n+  *token = malloc (sizeof (mpi_token_t) * caf_num_images);\n \n   if (unlikely (local == NULL || *token == NULL))\n     goto error;\n \n   /* token[img-1] is the address of the token in image \"img\".  */\n-  err = MPI_Allgather (&local, sizeof (void*), MPI_BYTE, *token,\n+  err = MPI_Allgather (&local, sizeof (void*), MPI_BYTE, TOKEN (*token),\n \t\t       sizeof (void*), MPI_BYTE, MPI_COMM_WORLD);\n \n   if (unlikely (err))\n@@ -192,7 +204,7 @@ _gfortran_caf_register (ptrdiff_t size, caf_register_t type, void ***token,\n \n \n void\n-_gfortran_caf_deregister (void ***token, int *stat, char *errmsg, int errmsg_len)\n+_gfortran_caf_deregister (caf_token_t *token, int *stat, char *errmsg, int errmsg_len)\n {\n   if (unlikely (caf_is_finalized))\n     {\n@@ -220,7 +232,7 @@ _gfortran_caf_deregister (void ***token, int *stat, char *errmsg, int errmsg_len\n   if (stat)\n     *stat = 0;\n \n-  free ((*token)[caf_this_image-1]);\n+  free (TOKEN (*token)[caf_this_image-1]);\n   free (*token);\n }\n "}, {"sha": "cf1ced85d907e47bcba3a89ac3b01bb36687aa30", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a5f4a9721cba832bf734c4be40d4a3f523d031/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a5f4a9721cba832bf734c4be40d4a3f523d031/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=a8a5f4a9721cba832bf734c4be40d4a3f523d031", "patch": "@@ -32,6 +32,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Define GFC_CAF_CHECK to enable run-time checking.  */\n /* #define GFC_CAF_CHECK  1  */\n \n+typedef void* single_token_t;\n+#define TOKEN(X) ((single_token_t) (X))\n+\n /* Single-image implementation of the CAF library.\n    Note: For performance reasons -fcoarry=single should be used\n    rather than this library.  */\n@@ -57,11 +60,8 @@ caf_runtime_error (const char *message, ...)\n \n void\n _gfortran_caf_init (int *argc __attribute__ ((unused)),\n-\t\t    char ***argv __attribute__ ((unused)),\n-\t\t    int *this_image, int *num_images)\n+\t\t    char ***argv __attribute__ ((unused)))\n {\n-  *this_image = 1;\n-  *num_images = 1;\n }\n \n \n@@ -71,23 +71,36 @@ _gfortran_caf_finalize (void)\n   while (caf_static_list != NULL)\n     {\n       caf_static_t *tmp = caf_static_list->prev;\n-      free (caf_static_list->token[0]);\n       free (caf_static_list->token);\n       free (caf_static_list);\n       caf_static_list = tmp;\n     }\n }\n \n \n+int\n+_gfortran_caf_this_image (int distance __attribute__ ((unused)))\n+{\n+  return 1;\n+}\n+\n+\n+int\n+_gfortran_caf_num_images (int distance __attribute__ ((unused)),\n+\t\t\t  bool failed __attribute__ ((unused)))\n+{\n+  return 1;\n+}\n+\n+\n void *\n-_gfortran_caf_register (ptrdiff_t size, caf_register_t type, void ***token,\n+_gfortran_caf_register (size_t size, caf_register_t type, caf_token_t *token,\n \t\t\tint *stat, char *errmsg, int errmsg_len)\n {\n   void *local;\n \n   local = malloc (size);\n-  *token = malloc (sizeof (void*) * 1);\n-  (*token)[0] = local;\n+  *token = malloc (sizeof (single_token_t));\n \n   if (unlikely (local == NULL || token == NULL))\n     {\n@@ -109,6 +122,8 @@ _gfortran_caf_register (ptrdiff_t size, caf_register_t type, void ***token,\n \t  caf_runtime_error (msg);\n     }\n \n+  *token = local;\n+\n   if (stat)\n     *stat = 0;\n \n@@ -124,12 +139,11 @@ _gfortran_caf_register (ptrdiff_t size, caf_register_t type, void ***token,\n \n \n void\n-_gfortran_caf_deregister (void ***token, int *stat,\n+_gfortran_caf_deregister (caf_token_t *token, int *stat,\n \t\t\t  char *errmsg __attribute__ ((unused)),\n \t\t\t  int errmsg_len __attribute__ ((unused)))\n {\n-  free ((*token)[0]);\n-  free (*token);\n+  free (TOKEN(*token));\n \n   if (stat)\n     *stat = 0;"}]}