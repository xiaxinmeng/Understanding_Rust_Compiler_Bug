{"sha": "27e4260166950b784fe270ba4f0cae9a66faf1c4", "node_id": "C_kwDOANBUbNoAKDI3ZTQyNjAxNjY5NTBiNzg0ZmUyNzBiYTRmMGNhZTlhNjZmYWYxYzQ", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-01-12T18:28:55Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-01-13T18:51:30Z"}, "message": "Add relation to unsigned right shift.\n\nIf the first operand and the shift value of a right shift operation are both\n>= 0, then we know the LHS of the operation is <= the first operand.\n\n\tPR tree-optimization/96707\n\tgcc/\n\t* range-op.cc (operator_rshift::lhs_op1_relation): New.\n\n\tgcc/testsuite/\n\t* g++.dg/pr96707.C: New.", "tree": {"sha": "837cf00a12e99bfb6ab81257c72301706f242f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/837cf00a12e99bfb6ab81257c72301706f242f04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27e4260166950b784fe270ba4f0cae9a66faf1c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e4260166950b784fe270ba4f0cae9a66faf1c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e4260166950b784fe270ba4f0cae9a66faf1c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e4260166950b784fe270ba4f0cae9a66faf1c4/comments", "author": null, "committer": null, "parents": [{"sha": "0b8464365b15ac108cd1d00d5bc56d229c1340de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8464365b15ac108cd1d00d5bc56d229c1340de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8464365b15ac108cd1d00d5bc56d229c1340de"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "19bdf30911ad50c12e405ca5c35b85294724ecc7", "filename": "gcc/range-op.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e4260166950b784fe270ba4f0cae9a66faf1c4/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e4260166950b784fe270ba4f0cae9a66faf1c4/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=27e4260166950b784fe270ba4f0cae9a66faf1c4", "patch": "@@ -1941,9 +1941,25 @@ class operator_rshift : public cross_product_operator\n \t\t\t  const irange &lhs,\n \t\t\t  const irange &op2,\n \t\t\t  relation_kind rel = VREL_NONE) const;\n+  virtual enum tree_code lhs_op1_relation (const irange &lhs,\n+\t\t\t\t\t   const irange &op1,\n+\t\t\t\t\t   const irange &op2) const;\n } op_rshift;\n \n \n+enum tree_code\n+operator_rshift::lhs_op1_relation (const irange &lhs ATTRIBUTE_UNUSED,\n+\t\t\t\t   const irange &op1,\n+\t\t\t\t   const irange &op2) const\n+{\n+  // If both operands range are >= 0, then the LHS <= op1.\n+  if (!op1.undefined_p () && !op2.undefined_p ()\n+      && wi::ge_p (op1.lower_bound (), 0, TYPE_SIGN (op1.type ()))\n+      && wi::ge_p (op2.lower_bound (), 0, TYPE_SIGN (op2.type ())))\n+    return LE_EXPR;\n+  return VREL_NONE;\n+}\n+\n bool\n operator_lshift::fold_range (irange &r, tree type,\n \t\t\t     const irange &op1,"}, {"sha": "2653fe3d043177c4326a34b59e47d324c06977b1", "filename": "gcc/testsuite/g++.dg/pr96707.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e4260166950b784fe270ba4f0cae9a66faf1c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr96707.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e4260166950b784fe270ba4f0cae9a66faf1c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr96707.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr96707.C?ref=27e4260166950b784fe270ba4f0cae9a66faf1c4", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+bool f(unsigned x, unsigned y)\n+{\n+    return (x >> y) <= x;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 1\" \"evrp\" } }  */\n+"}]}