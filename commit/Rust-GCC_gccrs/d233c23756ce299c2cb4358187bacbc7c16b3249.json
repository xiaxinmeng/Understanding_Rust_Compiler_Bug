{"sha": "d233c23756ce299c2cb4358187bacbc7c16b3249", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIzM2MyMzc1NmNlMjk5YzJjYjQzNTgxODdiYWNiYzdjMTZiMzI0OQ==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2013-03-03T00:12:28Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2013-03-03T00:12:28Z"}, "message": "Add math constants and triangular and von Mises distributions.\n\nFrom-SVN: r196407", "tree": {"sha": "e8079c415ea337fb93d37e2dbd4fc174120c99c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8079c415ea337fb93d37e2dbd4fc174120c99c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d233c23756ce299c2cb4358187bacbc7c16b3249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d233c23756ce299c2cb4358187bacbc7c16b3249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d233c23756ce299c2cb4358187bacbc7c16b3249", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d233c23756ce299c2cb4358187bacbc7c16b3249/comments", "author": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4dc1d68cf2c8bff8d984c26413d81c0041d6e9e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc1d68cf2c8bff8d984c26413d81c0041d6e9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc1d68cf2c8bff8d984c26413d81c0041d6e9e8"}], "stats": {"total": 1447, "additions": 1430, "deletions": 17}, "files": [{"sha": "cbba5e21e29b7745c6fa05407f5d080f7e0a9ace", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -1,3 +1,41 @@\n+2013-03-02  Ulrich Drepper  <drepper@gmail.com>\n+\n+\tAdd triangular and von Mises distributions.\n+\t* include/ext/random: Include <ext/cmath>.\n+\tAdd __gnu_cxx::triangular_distribution<> and\n+\t__gnu_cxx::von_mises_distribution<> classes.\n+\t* include/ext/random.tcc: Add out-of-line functions for\n+\t__gnu_cxx::triangular_distribution<> and\n+\t__gnu_cxx::von_mises_distribution<>.\n+\t* testsuite/ext/triangular_distribution/cons/default.cc: New file.\n+\t* testsuite/ext/triangular_distribution/cons/parms.cc: New file.\n+\t* testsuite/ext/triangular_distribution/operators/serialize.cc:\n+\tNew file.\n+\t* testsuite/ext/triangular_distribution/operators/equal.cc:\n+\tNew file.\n+\t* testsuite/ext/triangular_distribution/operators/inequal.cc:\n+\tNew file.\n+\t* testsuite/ext/triangular_distribution/requirements/typedefs.cc:\n+\tNew file.\n+\t* testsuite/ext/triangular_distribution/requirements/\n+\texplicit_instantiation/1.cc: New file.\n+\t* testsuite/ext/von_mises_distribution/cons/default.cc: New file.\n+\t* testsuite/ext/von_mises_distribution/cons/parms.cc: New file.\n+\t* testsuite/ext/von_mises_distribution/operators/serialize.cc:\n+\tNew file.\n+\t* testsuite/ext/von_mises_distribution/operators/equal.cc: New file.\n+\t* testsuite/ext/von_mises_distribution/operators/inequal.cc:\n+\tNew file.\n+\t* testsuite/ext/von_mises_distribution/requirements/typedefs.cc:\n+\tNew file.\n+\t* testsuite/ext/von_mises_distribution/requirements/\n+\texplicit_instantiation/1.cc: New file.\n+\n+\tAdd math constants.\n+\t* include/Makefile.am (ext_headers): Add cmath.\n+\t* include/Makefile.in: Regenerated.\n+\t* include/ext/cmath: New file.\n+\n 2013-03-01  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/abi/post/solaris2.9/baseline_symbols.txt: Regenerate."}, {"sha": "53422177444bd3d05fa17f91e5bae26a209bb66a", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -499,6 +499,7 @@ ext_headers = \\\n \t${ext_srcdir}/array_allocator.h \\\n \t${ext_srcdir}/bitmap_allocator.h \\\n \t${ext_srcdir}/cast.h \\\n+\t${ext_srcdir}/cmath \\\n \t${ext_srcdir}/codecvt_specializations.h \\\n \t${ext_srcdir}/concurrence.h \\\n \t${ext_srcdir}/debug_allocator.h \\"}, {"sha": "30d90968a817e1d320f1b326c3f45673d9016e55", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -1,9 +1,9 @@\n-# Makefile.in generated by automake 1.11.1 from Makefile.am.\n+# Makefile.in generated by automake 1.11.6 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,\n-# Inc.\n+# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n+# Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -15,6 +15,23 @@\n \n @SET_MAKE@\n VPATH = @srcdir@\n+am__make_dryrun = \\\n+  { \\\n+    am__dry=no; \\\n+    case $$MAKEFLAGS in \\\n+      *\\\\[\\ \\\t]*) \\\n+        echo 'am--echo: ; @echo \"AM\"  OK' | $(MAKE) -f - 2>/dev/null \\\n+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \\\n+      *) \\\n+        for am__flg in $$MAKEFLAGS; do \\\n+          case $$am__flg in \\\n+            *=*|--*) ;; \\\n+            *n*) am__dry=yes; break;; \\\n+          esac; \\\n+        done;; \\\n+    esac; \\\n+    test $$am__dry = yes; \\\n+  }\n pkgdatadir = $(datadir)/@PACKAGE@\n pkgincludedir = $(includedir)/@PACKAGE@\n pkglibdir = $(libdir)/@PACKAGE@\n@@ -67,6 +84,11 @@ CONFIG_CLEAN_VPATH_FILES =\n depcomp =\n am__depfiles_maybe =\n SOURCES =\n+am__can_run_installinfo = \\\n+  case $$AM_UPDATE_INFO_DIR in \\\n+    n|no|NO) false;; \\\n+    *) (install-info --version) >/dev/null 2>&1;; \\\n+  esac\n ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n ACLOCAL = @ACLOCAL@\n ALLOCATOR_H = @ALLOCATOR_H@\n@@ -759,6 +781,7 @@ ext_headers = \\\n \t${ext_srcdir}/array_allocator.h \\\n \t${ext_srcdir}/bitmap_allocator.h \\\n \t${ext_srcdir}/cast.h \\\n+\t${ext_srcdir}/cmath \\\n \t${ext_srcdir}/codecvt_specializations.h \\\n \t${ext_srcdir}/concurrence.h \\\n \t${ext_srcdir}/debug_allocator.h \\\n@@ -1191,6 +1214,7 @@ Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status\n \t    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \\\n \t    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \\\n \tesac;\n+$(top_srcdir)/fragment.am:\n \n $(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n \tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n@@ -1226,10 +1250,15 @@ install-am: all-am\n \n installcheck: installcheck-am\n install-strip:\n-\t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n-\t  install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n-\t  `test -z '$(STRIP)' || \\\n-\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n+\tif test -z '$(STRIP)'; then \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t      install; \\\n+\telse \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t    \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\" install; \\\n+\tfi\n mostlyclean-generic:\n \n clean-generic:"}, {"sha": "c17a53f1b1044f39529ebe2f6c7c7d8667cbf688", "filename": "libstdc++-v3/include/ext/cmath", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcmath?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,152 @@\n+// Math extensions -*- C++ -*-\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file ext/cmath\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _EXT_CMATH\n+#define _EXT_CMATH 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus < 201103L\n+# include <bits/c++0x_warning.h>\n+#else\n+\n+#include <cmath>\n+#include <type_traits>\n+\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // A class for math constants.\n+  template<typename _RealType>\n+    struct __math_constants\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n+      // Constant @f$ \\pi @f$.\n+      static constexpr _RealType __pi = 3.1415926535897932384626433832795029L;\n+      // Constant @f$ \\pi / 2 @f$.\n+      static constexpr _RealType __pi_half = 1.5707963267948966192313216916397514L;\n+      // Constant @f$ \\pi / 3 @f$.\n+      static constexpr _RealType __pi_third = 1.0471975511965977461542144610931676L;\n+      // Constant @f$ \\pi / 4 @f$.\n+      static constexpr _RealType __pi_quarter = 0.7853981633974483096156608458198757L;\n+      // Constant @f$ \\sqrt(\\pi / 2) @f$.\n+      static constexpr _RealType __root_pi_div_2 = 1.2533141373155002512078826424055226L;\n+      // Constant @f$ 1 / \\pi @f$.\n+      static constexpr _RealType __one_div_pi = 0.3183098861837906715377675267450287L;\n+      // Constant @f$ 2 / \\pi @f$.\n+      static constexpr _RealType __two_div_pi = 0.6366197723675813430755350534900574L;\n+      // Constant @f$ 2 / \\sqrt(\\pi) @f$.\n+      static constexpr _RealType __two_div_root_pi = 1.1283791670955125738961589031215452L;\n+\n+      // Constant Euler's number @f$ e @f$.\n+      static constexpr _RealType __e = 2.7182818284590452353602874713526625L;\n+      // Constant @f$ 1 / e @f$.\n+      static constexpr _RealType __one_div_e = 0.36787944117144232159552377016146087L;\n+      // Constant @f$ \\log_2(e) @f$.\n+      static constexpr _RealType __log2_e = 1.4426950408889634073599246810018921L;\n+      // Constant @f$ \\log_10(e) @f$.\n+      static constexpr _RealType __log10_e = 0.4342944819032518276511289189166051L;\n+      // Constant @f$ \\ln(2) @f$.\n+      static constexpr _RealType __ln_2 = 0.6931471805599453094172321214581766L;\n+      // Constant @f$ \\ln(3) @f$.\n+      static constexpr _RealType __ln_3 = 1.0986122886681096913952452369225257L;\n+      // Constant @f$ \\ln(10) @f$.\n+      static constexpr _RealType __ln_10 = 2.3025850929940456840179914546843642L;\n+\n+      // Constant Euler-Mascheroni @f$ \\gamma_E @f$.\n+      static constexpr _RealType __gamma_e = 0.5772156649015328606065120900824024L;\n+      // Constant Golden Ratio @f$ \\phi @f$.\n+      static constexpr _RealType __phi = 1.6180339887498948482045868343656381L;\n+\n+      // Constant @f$ \\sqrt(2) @f$.\n+      static constexpr _RealType __root_2 = 1.4142135623730950488016887242096981L;\n+      // Constant @f$ \\sqrt(3) @f$.\n+      static constexpr _RealType __root_3 = 1.7320508075688772935274463415058724L;\n+      // Constant @f$ \\sqrt(5) @f$.\n+      static constexpr _RealType __root_5 = 2.2360679774997896964091736687312762L;\n+      // Constant @f$ \\sqrt(7) @f$.\n+      static constexpr _RealType __root_7 = 2.6457513110645905905016157536392604L;\n+      // Constant @f$ 1 / \\sqrt(2) @f$.\n+      static constexpr _RealType __one_div_root_2 = 0.7071067811865475244008443621048490L;\n+    };\n+\n+  // And the template definitions for the constants.\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__pi;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__pi_half;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__pi_third;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__pi_quarter;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__root_pi_div_2;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__one_div_pi;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__two_div_pi;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__two_div_root_pi;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__e;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__one_div_e;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__log2_e;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__log10_e;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__ln_2;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__ln_3;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__ln_10;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__gamma_e;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__phi;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__root_2;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__root_3;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__root_5;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__root_7;\n+  template<typename _RealType>\n+    constexpr _RealType __math_constants<_RealType>::__one_div_root_2;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace __gnu_cxx\n+\n+#endif // C++11\n+\n+#endif // _EXT_CMATH"}, {"sha": "51d332b4c401483c0e2140f3511f438927d10ace", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 533, "deletions": 10, "changes": 543, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -37,6 +37,7 @@\n \n #include <random>\n #include <array>\n+#include <ext/cmath>\n #ifdef __SSE2__\n # include <x86intrin.h>\n #endif\n@@ -958,7 +959,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_nu == __p2._M_nu\n-              && __p1._M_sigma == __p2._M_sigma; }\n+\t      && __p1._M_sigma == __p2._M_sigma; }\n \n       private:\n \tvoid _M_initialize();\n@@ -1055,7 +1056,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p)\n-        {\n+\t{\n \t  typename std::normal_distribution<result_type>::param_type\n \t    __px(__p.nu(), __p.sigma()), __py(result_type(0), __p.sigma());\n \t  result_type __x = this->_M_ndx(__px, __urng);\n@@ -1200,7 +1201,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_mu == __p2._M_mu\n-              && __p1._M_omega == __p2._M_omega; }\n+\t      && __p1._M_omega == __p2._M_omega; }\n \n       private:\n \tvoid _M_initialize();\n@@ -1284,7 +1285,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p)\n-        {\n+\t{\n \t  typename std::gamma_distribution<result_type>::param_type\n \t    __pg(__p.mu(), __p.omega() / __p.mu());\n \t  return std::sqrt(this->_M_gd(__pg, __urng));\n@@ -1521,7 +1522,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p)\n-        {\n+\t{\n \t  return __p.mu() * std::pow(this->_M_ud(__urng),\n \t\t\t\t\t   -result_type(1) / __p.alpha());\n \t}\n@@ -1673,7 +1674,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_lambda == __p2._M_lambda\n-              && __p1._M_mu == __p2._M_mu\n+\t      && __p1._M_mu == __p2._M_mu\n \t      && __p1._M_nu == __p2._M_nu; }\n \n       private:\n@@ -1921,14 +1922,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t   result_type __b = result_type(1))\n       : _M_param(__a, __b),\n \t_M_ud(-1.5707963267948966192313216916397514L,\n- \t      +1.5707963267948966192313216916397514L)\n+\t      +1.5707963267948966192313216916397514L)\n       { }\n \n       explicit\n       arcsine_distribution(const param_type& __p)\n       : _M_param(__p),\n \t_M_ud(-1.5707963267948966192313216916397514L,\n- \t      +1.5707963267948966192313216916397514L)\n+\t      +1.5707963267948966192313216916397514L)\n       { }\n \n       /**\n@@ -1994,7 +1995,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p)\n-        {\n+\t{\n \t  result_type __x = std::sin(this->_M_ud(__urng));\n \t  return (__x * (__p.b() - __p.a())\n \t\t  + __p.a() + __p.b()) / result_type(2);\n@@ -2142,7 +2143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tfriend bool\n \toperator==(const param_type& __p1, const param_type& __p2)\n \t{ return __p1._M_q == __p2._M_q\n-              && __p1._M_omega == __p2._M_omega; }\n+\t      && __p1._M_omega == __p2._M_omega; }\n \n       private:\n \tvoid _M_initialize();\n@@ -2322,6 +2323,528 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const hoyt_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n \n+\n+  /**\n+   * @brief A triangular distribution for random numbers.\n+   *\n+   * The formula for the triangular probability density function is\n+   * @f[\n+   *                  / 0                          for x < a\n+   *     p(x|a,b,c) = | \\frac{2(x-a)}{(c-a)(b-a)}  for a <= x <= b\n+   *                  | \\frac{2(c-x)}{(c-a)(c-b)}  for b < x <= c\n+   *                  \\ 0                          for c < x\n+   * @f]\n+   *\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Distribution Statistics</caption>\n+   * <tr><td>Mean</td><td>@f$ \\frac{a+b+c}{2} @f$</td></tr>\n+   * <tr><td>Variance</td><td>@f$ \\frac{a^2+b^2+c^2-ab-ac-bc}\n+   *                                   {18}@f$</td></tr>\n+   * <tr><td>Range</td><td>@f$[a, c]@f$</td></tr>\n+   * </table>\n+   */\n+  template<typename _RealType = double>\n+    class triangular_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _RealType result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\tfriend class triangular_distribution<_RealType>;\n+\n+\texplicit\n+\tparam_type(_RealType __a = _RealType(0),\n+\t\t   _RealType __b = _RealType(0.5),\n+\t\t   _RealType __c = _RealType(1))\n+\t: _M_a(__a), _M_b(__b), _M_c(__c)\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_a <= _M_b);\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_b <= _M_c);\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_a < _M_c);\n+\n+\t  _M_r_ab = (_M_b - _M_a) / (_M_c - _M_a);\n+\t  _M_f_ab_ac = (_M_b - _M_a) * (_M_c - _M_a);\n+\t  _M_f_bc_ac = (_M_c - _M_b) * (_M_c - _M_a);\n+\t}\n+\n+\t_RealType\n+\ta() const\n+\t{ return _M_a; }\n+\n+\t_RealType\n+\tb() const\n+\t{ return _M_b; }\n+\n+\t_RealType\n+\tc() const\n+\t{ return _M_c; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return (__p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b\n+\t\t  && __p1._M_c == __p2._M_c); }\n+\n+      private:\n+\n+\t_RealType _M_a;\n+\t_RealType _M_b;\n+\t_RealType _M_c;\n+\t_RealType _M_r_ab;\n+\t_RealType _M_f_ab_ac;\n+\t_RealType _M_f_bc_ac;\n+      };\n+\n+      /**\n+       * @brief Constructs a triangle distribution with parameters\n+       * @f$ a @f$, @f$ b @f$ and @f$ c @f$.\n+       */\n+      explicit\n+      triangular_distribution(result_type __a = result_type(0),\n+\t\t\t      result_type __b = result_type(0.5),\n+\t\t\t      result_type __c = result_type(1))\n+      : _M_param(__a, __b, __c)\n+      { }\n+\n+      explicit\n+      triangular_distribution(const param_type& __p)\n+      : _M_param(__p)\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      { }\n+\n+      /**\n+       * @brief Returns the @f$ a @f$ of the distribution.\n+       */\n+      result_type\n+      a() const\n+      { return _M_param.a(); }\n+\n+      /**\n+       * @brief Returns the @f$ b @f$ of the distribution.\n+       */\n+      result_type\n+      b() const\n+      { return _M_param.b(); }\n+\n+      /**\n+       * @brief Returns the @f$ c @f$ of the distribution.\n+       */\n+      result_type\n+      c() const\n+      { return _M_param.c(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      { return _M_param._M_a; }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      { return _M_param._M_c; }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{ return this->operator()(__urng, _M_param); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{\n+\t  std::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t    __aurng(__urng);\n+\t  result_type __rnd = __aurng();\n+\t  if (__rnd <= __p._M_r_ab)\n+\t    return __p.a() + std::sqrt(__rnd * __p._M_f_ab_ac);\n+\t  else\n+\t    return __p.c() - std::sqrt((result_type(1) - __rnd)\n+\t\t\t\t       * __p._M_f_bc_ac);\n+\t}\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two triangle distributions have the same\n+       *        parameters and the sequences that would be generated\n+       *        are equal.\n+       */\n+      friend bool\n+      operator==(const triangular_distribution& __d1,\n+\t\t const triangular_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n+      /**\n+       * @brief Inserts a %triangular_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %triangular_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const __gnu_cxx::triangular_distribution<_RealType1>& __x);\n+\n+      /**\n+       * @brief Extracts a %triangular_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %triangular_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   __gnu_cxx::triangular_distribution<_RealType1>& __x);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+    };\n+\n+  /**\n+   * @brief Return true if two triangle distributions are different.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const __gnu_cxx::triangular_distribution<_RealType>& __d1,\n+\t       const __gnu_cxx::triangular_distribution<_RealType>& __d2)\n+   { return !(__d1 == __d2); }\n+\n+\n+  /**\n+   * @brief A von Mises distribution for random numbers.\n+   *\n+   * The formula for the von Mises probability density function is\n+   * @f[\n+   *     p(x|\\mu,\\kappa) = \\frac{e^{\\kappa \\cos(x-\\mu)}}\n+   *                            {2\\pi I_0(\\kappa)}\n+   * @f]\n+   *\n+   * The generating functions use the method according to:\n+   *\n+   * D. J. Best and N. I. Fisher, 1979. \"Efficient Simulation of the\n+   * von Mises Distribution\", Journal of the Royal Statistical Society.\n+   * Series C (Applied Statistics), Vol. 28, No. 2, pp. 152-157.\n+   *\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Distribution Statistics</caption>\n+   * <tr><td>Mean</td><td>@f$ \\mu @f$</td></tr>\n+   * <tr><td>Variance</td><td>@f$ 1-I_1(\\kappa)/I_0(\\kappa) @f$</td></tr>\n+   * <tr><td>Range</td><td>@f$[-\\pi, \\pi]@f$</td></tr>\n+   * </table>\n+   */\n+  template<typename _RealType = double>\n+    class von_mises_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _RealType result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\tfriend class von_mises_distribution<_RealType>;\n+\n+\texplicit\n+\tparam_type(_RealType __mu = _RealType(0),\n+\t\t   _RealType __kappa = _RealType(1))\n+\t: _M_mu(__mu), _M_kappa(__kappa)\n+\t{\n+\t  const _RealType __pi = __gnu_cxx::__math_constants<_RealType>::__pi;\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_mu >= -__pi && _M_mu <= __pi);\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_kappa >= _RealType(0));\n+\t}\n+\n+\t_RealType\n+\tmu() const\n+\t{ return _M_mu; }\n+\n+\t_RealType\n+\tkappa() const\n+\t{ return _M_kappa; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_kappa == __p2._M_kappa; }\n+\n+      private:\n+\n+\t_RealType _M_mu;\n+\t_RealType _M_kappa;\n+      };\n+\n+      /**\n+       * @brief Constructs a beta distribution with parameters\n+       * @f$\\mu@f$ and @f$\\kappa@f$.\n+       */\n+      explicit\n+      von_mises_distribution(result_type __mu = result_type(0),\n+\t\t\t     result_type __kappa = result_type(1))\n+\t: _M_param(__mu, __kappa)\n+      { }\n+\n+      explicit\n+      von_mises_distribution(const param_type& __p)\n+      : _M_param(__p)\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      { }\n+\n+      /**\n+       * @brief Returns the @f$ \\mu @f$ of the distribution.\n+       */\n+      result_type\n+      mu() const\n+      { return _M_param.mu(); }\n+\n+      /**\n+       * @brief Returns the @f$ \\kappa @f$ of the distribution.\n+       */\n+      result_type\n+      kappa() const\n+      { return _M_param.kappa(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      {\n+\treturn -__gnu_cxx::__math_constants<result_type>::__pi;\n+      }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      {\n+\treturn __gnu_cxx::__math_constants<result_type>::__pi;\n+      }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{ return this->operator()(__urng, _M_param); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{\n+\t  const result_type __pi\n+\t    = __gnu_cxx::__math_constants<result_type>::__pi;\n+\t  std::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t    __aurng(__urng);\n+\t  result_type __tau = (std::sqrt(result_type(4) * this->kappa()\n+\t\t\t\t\t * this->kappa() + result_type(1))\n+\t\t\t       + result_type(1));\n+\t  result_type __rho = ((__tau - std::sqrt(result_type(2) * __tau))\n+\t\t\t       / (result_type(2) * this->kappa()));\n+\t  result_type __r = ((result_type(1) + __rho * __rho)\n+\t\t\t     / (result_type(2) * __rho));\n+\n+\t  result_type __f;\n+\t  while (1)\n+\t    {\n+\t      result_type __rnd = std::cos(__pi * __aurng());\n+\t      __f = (result_type(1) + __r * __rnd) / (__r + __rnd);\n+\t      result_type __c = this->kappa() * (__r - __f);\n+\n+\t      result_type __rnd2 = __aurng();\n+\t      if (__c * (result_type(2) - __c) > __rnd2)\n+\t\tbreak;\n+\t      if (std::log(__c / __rnd2) >= __c - result_type(1))\n+\t\tbreak;\n+\t    }\n+\n+\t  result_type __res = std::acos(__f);\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\t  __res = std::copysign(__res, __aurng() - result_type(0.5));\n+#else\n+\t  if (__aurng() < result_type(0.5))\n+\t    __res = -__res;\n+#endif\n+\t  __res += this->mu();\n+\t  if (__res > __pi)\n+\t    __res -= result_type(2) * __pi;\n+\t  else if (__res < -__pi)\n+\t    __res += result_type(2) * __pi;\n+\t  return __res;\n+\t}\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two von Mises distributions have the same\n+       *        parameters and the sequences that would be generated\n+       *        are equal.\n+       */\n+      friend bool\n+      operator==(const von_mises_distribution& __d1,\n+\t\t const von_mises_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n+      /**\n+       * @brief Inserts a %von_mises_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %von_mises_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const __gnu_cxx::von_mises_distribution<_RealType1>& __x);\n+\n+      /**\n+       * @brief Extracts a %von_mises_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %von_mises_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   __gnu_cxx::von_mises_distribution<_RealType1>& __x);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+    };\n+\n+  /**\n+   * @brief Return true if two von Mises distributions are different.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const __gnu_cxx::von_mises_distribution<_RealType>& __d1,\n+\t       const __gnu_cxx::von_mises_distribution<_RealType>& __d2)\n+   { return !(__d1 == __d2); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx\n "}, {"sha": "009e0effba86cd02c5f0d6cd0f4874d94bc7098d", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -1187,6 +1187,126 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is;\n     }\n \n+\n+  template<typename _RealType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      triangular_distribution<_RealType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\n+\twhile (__f != __t)\n+\t  *__f++ = this->operator()(__urng, __param);\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const __gnu_cxx::triangular_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::max_digits10);\n+\n+      __os << __x.a() << __space << __x.b() << __space << __x.c();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       __gnu_cxx::triangular_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __a, __b, __c;\n+      __is >> __a >> __b >> __c;\n+      __x.param(typename __gnu_cxx::triangular_distribution<_RealType>::\n+\t\tparam_type(__a, __b, __c));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      von_mises_distribution<_RealType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\n+\twhile (__f != __t)\n+\t  *__f++ = this->operator()(__urng, __param);\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const __gnu_cxx::von_mises_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::max_digits10);\n+\n+      __os << __x.mu() << __space << __x.kappa();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       __gnu_cxx::von_mises_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __mu, __kappa;\n+      __is >> __mu >> __kappa;\n+      __x.param(typename __gnu_cxx::von_mises_distribution<_RealType>::\n+\t\tparam_type(__mu, __kappa));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "63303f81e6b6af02a5311f1674eaf0b708bd4e62", "filename": "libstdc++-v3/testsuite/ext/triangular_distribution/cons/default.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Fcons%2Fdefault.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2013-03-02  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::triangular_distribution<> u;\n+  VERIFY( u.a() == 0.0 );\n+  VERIFY( u.b() == 0.5 );\n+  VERIFY( u.c() == 1.0 );\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == 1.0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8380965df4658c8376001cd074db035c92433eef", "filename": "libstdc++-v3/testsuite/ext/triangular_distribution/cons/parms.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Fcons%2Fparms.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2013-03-02  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::triangular_distribution<> u(1.5, 3.0, 3.5);\n+  VERIFY( u.a() == 1.5 );\n+  VERIFY( u.b() == 3.0 );\n+  VERIFY( u.c() == 3.5 );\n+  VERIFY( u.min() == 1.5 );\n+  VERIFY( u.max() == 3.5 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c38ea4c58c49d9393d86efdb7824d61ad5cc2e62", "filename": "libstdc++-v3/testsuite/ext/triangular_distribution/operators/equal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Foperators%2Fequal.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+// 2013-03-02  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::triangular_distribution<double> u(1.5, 3.0, 4.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c4a014ea2c826f3bb7ee1d086a21067f3373b0f1", "filename": "libstdc++-v3/testsuite/ext/triangular_distribution/operators/inequal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Foperators%2Finequal.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+// 2013-03-02  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::triangular_distribution<double> u(1.5, 3.0, 5.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7878376d93a9f0fabcdecbf561e320a3892afd4a", "filename": "libstdc++-v3/testsuite/ext/triangular_distribution/operators/serialize.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Foperators%2Fserialize.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+// 2013-03-02  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  __gnu_cxx::triangular_distribution<double> u(1.5, 3.0, 4.5), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "189bdaf80c1143a661ae022a6a9db3d86442379b", "filename": "libstdc++-v3/testsuite/ext/triangular_distribution/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+template class __gnu_cxx::triangular_distribution<float>;\n+template class __gnu_cxx::triangular_distribution<double>;\n+template class __gnu_cxx::triangular_distribution<long double>;"}, {"sha": "835e8e7e9c7b26cbf80d1befb6dbe36864827555", "filename": "libstdc++-v3/testsuite/ext/triangular_distribution/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftriangular_distribution%2Frequirements%2Ftypedefs.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2013-03-02  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef __gnu_cxx::triangular_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+  typedef test_type::param_type param_type;\n+}"}, {"sha": "3183c85ed7e723f5ede8bed109a77587a8117ca5", "filename": "libstdc++-v3/testsuite/ext/von_mises_distribution/cons/default.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Fcons%2Fdefault.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2013-03-02  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::von_mises_distribution<> u;\n+  VERIFY( u.mu() == 0.0 );\n+  VERIFY( u.kappa() == 1.0 );\n+  VERIFY( u.min() == -__gnu_cxx::__math_constants<double>::__pi );\n+  VERIFY( u.max() == __gnu_cxx::__math_constants<double>::__pi );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6c1f8f730077d50fa2f6709ee8c010216c30a09d", "filename": "libstdc++-v3/testsuite/ext/von_mises_distribution/cons/parms.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Fcons%2Fparms.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2013-03-02  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::von_mises_distribution<> u(1.5, 3.0);\n+  VERIFY( u.mu() == 1.5 );\n+  VERIFY( u.kappa() == 3.0 );\n+  VERIFY( u.min() == -__gnu_cxx::__math_constants<double>::__pi );\n+  VERIFY( u.max() == __gnu_cxx::__math_constants<double>::__pi );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "569a9aae9447bfe2803a518e40f48ca27b15eff3", "filename": "libstdc++-v3/testsuite/ext/von_mises_distribution/operators/equal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Foperators%2Fequal.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+// 2013-03-02  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::von_mises_distribution<double> u(1.5, 3.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a4d2d8ddfbd6dd13d567dde9d63723d87ddb76c0", "filename": "libstdc++-v3/testsuite/ext/von_mises_distribution/operators/inequal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Foperators%2Finequal.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+// 2013-03-02  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::von_mises_distribution<double> u(1.5, 3.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5437c136ae817ddf95f4d21d665b1065f9cf0d2e", "filename": "libstdc++-v3/testsuite/ext/von_mises_distribution/operators/serialize.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Foperators%2Fserialize.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+// 2013-03-02  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  __gnu_cxx::von_mises_distribution<double> u(1.5, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d93093f4d8fae50ad5ce0d7b209604d9a1f91af5", "filename": "libstdc++-v3/testsuite/ext/von_mises_distribution/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+template class __gnu_cxx::von_mises_distribution<float>;\n+template class __gnu_cxx::von_mises_distribution<double>;\n+template class __gnu_cxx::von_mises_distribution<long double>;"}, {"sha": "c8c34abd3e254ebf2c0d5930d02dfadc4d1b8f3f", "filename": "libstdc++-v3/testsuite/ext/von_mises_distribution/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d233c23756ce299c2cb4358187bacbc7c16b3249/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvon_mises_distribution%2Frequirements%2Ftypedefs.cc?ref=d233c23756ce299c2cb4358187bacbc7c16b3249", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2013-03-02  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef __gnu_cxx::von_mises_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+  typedef test_type::param_type param_type;\n+}"}]}