{"sha": "3cb553b4684a17ca436be66895be0aeaee83644f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NiNTUzYjQ2ODRhMTdjYTQzNmJlNjY4OTViZTBhZWFlZTgzNjQ0Zg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-20T21:36:18Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-20T21:36:18Z"}, "message": "[multiple changes]\n\n2000-08-20  Zack Weinberg  <zack@wolery.cumb.org>\n\n\t* cppinit.c (cpp_init): Set global flag when called.\n\t(cpp_reader_init): Bomb out if cpp_init hasn't been called.\n\nSun Aug 20 01:41:35 MSD 2000 Dennis Chernoivanov <cdi@sparc.spb.su>\n\n        * cpplex.c (cpp_scan_buffer): Move `output_line_command' just\n        before `process_directive' so that newlines won't be missed\n        for directives.\n        (cpp_printf): Increment `print->lineno' when newline is emitted.\n\n        * cppmain.c (cb_ident): Likewise.\n        (cb_define): Likewise.\n        (cb_undef): Likewise.\n        (cb_include): Likewise.\n        (cb_def_pragma): Likewise.\n        (dump_macros_helper): Likewise.\n\n\t* gcc.dg/cpp/pragma-1.c: New test.\n\t* gcc.dg/cpp/pragma-2.c: New test.\n\nFrom-SVN: r35825", "tree": {"sha": "d81b589e39b9cc29d2ac00a4c083ae74ae5241d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d81b589e39b9cc29d2ac00a4c083ae74ae5241d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cb553b4684a17ca436be66895be0aeaee83644f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb553b4684a17ca436be66895be0aeaee83644f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb553b4684a17ca436be66895be0aeaee83644f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb553b4684a17ca436be66895be0aeaee83644f/comments", "author": null, "committer": null, "parents": [{"sha": "53e687fabb8208f715fd30172c48430eef4e2255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53e687fabb8208f715fd30172c48430eef4e2255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53e687fabb8208f715fd30172c48430eef4e2255"}], "stats": {"total": 102, "additions": 91, "deletions": 11}, "files": [{"sha": "1fd965ff843c43c62e5226306c436257a2a20e17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cb553b4684a17ca436be66895be0aeaee83644f", "patch": "@@ -1,3 +1,22 @@\n+2000-08-20  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cppinit.c (cpp_init): Set global flag when called.\n+\t(cpp_reader_init): Bomb out if cpp_init hasn't been called.\n+\n+Sun Aug 20 01:41:35 MSD 2000 Dennis Chernoivanov <cdi@sparc.spb.su>\n+\n+        * cpplex.c (cpp_scan_buffer): Move `output_line_command' just\n+        before `process_directive' so that newlines won't be missed\n+        for directives.\n+        (cpp_printf): Increment `print->lineno' when newline is emitted.\n+\n+        * cppmain.c (cb_ident): Likewise.\n+        (cb_define): Likewise.\n+        (cb_undef): Likewise.\n+        (cb_include): Likewise.\n+        (cb_def_pragma): Likewise.\n+        (dump_macros_helper): Likewise.\n+\n 2000-08-20  Richard Henderson  <rth@cygnus.com>\n \n \t* config/ia64/ia64.c (emit_insn_group_barriers): Stop if ar.lc"}, {"sha": "f1ed54fd85f166577c988def1c1a7f777515c053", "filename": "gcc/cppinit.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=3cb553b4684a17ca436be66895be0aeaee83644f", "patch": "@@ -398,21 +398,28 @@ merge_include_chains (pfile)\n   CPP_OPTION (pfile, bracket_include) = brack;\n }\n \n+/* cpp_init initializes library global state.  It might not need to do\n+   anything depending on the platform and compiler, so we have a static\n+   flag to make sure it gets called before cpp_reader_init.  */\n+\n+static int cpp_init_completed = 0;\n+\n void\n cpp_init (void)\n {\n #ifdef HOST_EBCDIC\n-  /* For non-ASCII hosts, the array needs to be sorted at runtime.  */\n+  /* For non-ASCII hosts, the cl_options array needs to be sorted at\n+     runtime.  */\n   qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n #endif\n \n-  /* Set up the trigraph map for trigraph_ok, trigraph_replace and\n-     lex_line.  */\n+  /* Set up the trigraph map and the IStable.  These don't need to do\n+     anything if we were compiled with a compiler that supports C99\n+     designated initializers.  */\n   init_trigraph_map ();\n-\n-  /* Set up the IStable.  This doesn't do anything if we were compiled\n-     with a compiler that supports C99 designated initializers.  */\n   init_IStable ();\n+\n+  cpp_init_completed = 1;\n }\n \n /* Initialize a cpp_reader structure. */\n@@ -434,6 +441,15 @@ cpp_reader_init (pfile)\n   CPP_OPTION (pfile, pending) =\n     (struct cpp_pending *) xcalloc (1, sizeof (struct cpp_pending));\n \n+  /* If cpp_init hasn't been called, generate a fatal error (by hand)\n+     and call it here.  */\n+  if (!cpp_init_completed)\n+    {\n+      fputs (\"cpp_reader_init: internal error: cpp_init not called.\\n\", stderr);\n+      pfile->errors = CPP_FATAL_LIMIT;\n+      cpp_init ();\n+    }\n+\n   _cpp_init_macros (pfile);\n   _cpp_init_stacks (pfile);\n   _cpp_init_includes (pfile);"}, {"sha": "7b07944c03b2661b301fb238e9ca9db3999f54b2", "filename": "gcc/cpplex.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=3cb553b4684a17ca436be66895be0aeaee83644f", "patch": "@@ -299,7 +299,10 @@ cpp_printf VPARAMS ((cpp_reader *pfile, cpp_printer *print,\n \n   /* End the previous line of text.  */\n   if (pfile->need_newline)\n-    putc ('\\n', print->outf);\n+    {\n+      putc ('\\n', print->outf);\n+      print->lineno++;\n+    }\n   pfile->need_newline = 0;\n \n   vfprintf (print->outf, fmt, ap);\n@@ -363,14 +366,14 @@ cpp_scan_buffer (pfile, print)\n \n       if (token->flags & BOL)\n \t{\n+\t  output_line_command (pfile, print, pfile->token_list.line);\n+\t  prev = 0;\n+\n \t  if (token->type == CPP_HASH && pfile->token_list.directive)\n \t    {\n \t      process_directive (pfile, token);\n \t      continue;\n \t    }\n-\n-\t  output_line_command (pfile, print, pfile->token_list.line);\n-\t  prev = 0;\n \t}\n \n       if (token->type != CPP_PLACEMARKER)"}, {"sha": "3e570be3584c3c82692eec4bd7e252c6767d2f99", "filename": "gcc/cppmain.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=3cb553b4684a17ca436be66895be0aeaee83644f", "patch": "@@ -142,6 +142,7 @@ cb_ident (pfile, str, len)\n      unsigned int len;\n {\n   cpp_printf (pfile, &parse_out, \"#ident \\\"%.*s\\\"\\n\", (int) len, str);\n+  parse_out.lineno++;\n }\n \n static void\n@@ -156,6 +157,7 @@ cb_define (pfile, hash)\n \t  || CPP_OPTION (pfile, dump_macros) == dump_definitions)\n \tcpp_dump_definition (pfile, parse_out.outf, hash);\n       putc ('\\n', parse_out.outf);\n+      parse_out.lineno++;\n     }\n }\n \n@@ -165,7 +167,10 @@ cb_undef (pfile, hash)\n      cpp_hashnode *hash;\n {\n   if (pfile->done_initializing)\n-    cpp_printf (pfile, &parse_out, \"#undef %s\\n\", hash->name);\n+    {\n+      cpp_printf (pfile, &parse_out, \"#undef %s\\n\", hash->name);\n+      parse_out.lineno++;\n+    }\n }\n \n static void\n@@ -183,6 +188,7 @@ cb_include (pfile, dir, str, len, ab)\n     l = '\"', r = '\"';\n \n   cpp_printf (pfile, &parse_out, \"#%s %c%.*s%c\\n\", dir, l, (int) len, str, r);\n+  parse_out.lineno++;\n }\n \n static void\n@@ -233,6 +239,7 @@ cb_def_pragma (pfile)\n   cpp_output_list (pfile, parse_out.outf, &pfile->token_list,\n \t\t   pfile->first_directive_token + 2);\n   putc ('\\n', parse_out.outf);\n+  parse_out.lineno++;\n }\n \n static void\n@@ -278,6 +285,7 @@ dump_macros_helper (pfile, hp)\n       cpp_printf (pfile, &parse_out, \"#define %s\", hp->name);\n       cpp_dump_definition (pfile, parse_out.outf, hp);\n       putc ('\\n', parse_out.outf);\n+      parse_out.lineno++;\n     }\n \n   return 1;"}, {"sha": "5382c0add29347fad1fefceecbfb2120bdbac4d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3cb553b4684a17ca436be66895be0aeaee83644f", "patch": "@@ -1,3 +1,8 @@\n+Sun Aug 20 01:41:35 MSD 2000 Dennis Chernoivanov <cdi@sparc.spb.su>\n+\n+\t* gcc.dg/cpp/pragma-1.c: New test.\n+\t* gcc.dg/cpp/pragma-2.c: New test.\n+\n 2000-08-18  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.dg/cpp/lexstrng.c: Don't include string.h."}, {"sha": "4b9295f781de19d4e8daad848a2496485890f571", "filename": "gcc/testsuite/gcc.dg/cpp/pragma-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-1.c?ref=3cb553b4684a17ca436be66895be0aeaee83644f", "patch": "@@ -0,0 +1,13 @@\n+/* Verify that preprocessor does not insert redundant newlines\n+   after #pragma */\n+/* { dg-do compile } */\n+int\n+main ()\n+{\n+#pragma unknown\n+  {\n+    error;\n+  /* { dg-error \"undeclared\" \"undeclared-variable message\" { target *-*-* } { 9 } } */\n+  /* { dg-error \"function it appears in\" \"reminder message\" { target *-*-* } { 9 } } */ \n+  }\n+}"}, {"sha": "18d540fe9e84889f835a9583803bbfa7dd1726a4", "filename": "gcc/testsuite/gcc.dg/cpp/pragma-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb553b4684a17ca436be66895be0aeaee83644f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-2.c?ref=3cb553b4684a17ca436be66895be0aeaee83644f", "patch": "@@ -0,0 +1,16 @@\n+/* Verify that preprocessor does not insert redundant newlines\n+   after #pragma, also check this for #include, #define and #undef */\n+/* { dg-do compile } */\n+/* { dg-options \"-dD\" } */\n+#include <stdio.h>\n+\n+#undef unknow_def\n+\n+int main () {\n+\n+#pragma unknown\n+  {}\n+  error;\n+  /* { dg-error \"undeclared\" \"undeclared-variable message\" { target *-*-* } { 13 } } */\n+  /* { dg-error \"function it appears in\" \"reminder message\" { target *-*-* } { 13 } } */ \n+}"}]}