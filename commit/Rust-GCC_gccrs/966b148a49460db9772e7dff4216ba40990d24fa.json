{"sha": "966b148a49460db9772e7dff4216ba40990d24fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY2YjE0OGE0OTQ2MGRiOTc3MmU3ZGZmNDIxNmJhNDA5OTBkMjRmYQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-06-19T13:29:45Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-06-19T13:29:45Z"}, "message": "combine.c (make_compound_operation): Use simplify_subreg.\n\n2005-06-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* combine.c (make_compound_operation): Use simplify_subreg.  Delete\n\ta optimization already done by simplify_subreg.\n\nFrom-SVN: r101183", "tree": {"sha": "d78e058ffb8c59dbb9c1e39898d4e3eac700544f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d78e058ffb8c59dbb9c1e39898d4e3eac700544f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/966b148a49460db9772e7dff4216ba40990d24fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966b148a49460db9772e7dff4216ba40990d24fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966b148a49460db9772e7dff4216ba40990d24fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966b148a49460db9772e7dff4216ba40990d24fa/comments", "author": null, "committer": null, "parents": [{"sha": "9f24cc73613940d9c96c8857b92c805126f34873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f24cc73613940d9c96c8857b92c805126f34873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f24cc73613940d9c96c8857b92c805126f34873"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "ef767e23634173995d3ade911cf78f0ee6fd1f9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b148a49460db9772e7dff4216ba40990d24fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b148a49460db9772e7dff4216ba40990d24fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=966b148a49460db9772e7dff4216ba40990d24fa", "patch": "@@ -1,3 +1,8 @@\n+2005-06-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* combine.c (make_compound_operation): Use simplify_subreg.  Delete\n+\ta optimization already done by simplify_subreg.\n+\n 2005-06-19  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* loop.c (scan_loop): Do not consider insns setting the frame"}, {"sha": "c4e6f95fa48b505aa8ef7deb3e62243f1e033acd", "filename": "gcc/combine.c", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966b148a49460db9772e7dff4216ba40990d24fa/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966b148a49460db9772e7dff4216ba40990d24fa/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=966b148a49460db9772e7dff4216ba40990d24fa", "patch": "@@ -6732,41 +6732,33 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n \t what it originally did, do this SUBREG as a force_to_mode.  */\n \n       tem = make_compound_operation (SUBREG_REG (x), in_code);\n-      if (GET_CODE (tem) != GET_CODE (SUBREG_REG (x))\n-\t  && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (tem))\n-\t  && subreg_lowpart_p (x))\n-\t{\n-\t  rtx newer = force_to_mode (tem, mode, ~(HOST_WIDE_INT) 0,\n-\t\t\t\t     NULL_RTX, 0);\n \n-\t  /* If we have something other than a SUBREG, we might have\n-\t     done an expansion, so rerun ourselves.  */\n-\t  if (GET_CODE (newer) != SUBREG)\n-\t    newer = make_compound_operation (newer, in_code);\n+      {\n+\trtx simplified;\n+\tsimplified = simplify_subreg (GET_MODE (x), tem, GET_MODE (tem),\n+\t\t\t\t      SUBREG_BYTE (x));\n \n-\t  return newer;\n-\t}\n+\tif (simplified)\n+\t  tem = simplified;\n \n-      /* If this is a paradoxical subreg, and the new code is a sign or\n-\t zero extension, omit the subreg and widen the extension.  If it\n-\t is a regular subreg, we can still get rid of the subreg by not\n-\t widening so much, or in fact removing the extension entirely.  */\n-      if ((GET_CODE (tem) == SIGN_EXTEND\n-\t   || GET_CODE (tem) == ZERO_EXTEND)\n-\t  && subreg_lowpart_p (x))\n-\t{\n-\t  if (GET_MODE_SIZE (mode) > GET_MODE_SIZE (GET_MODE (tem))\n-\t      || (GET_MODE_SIZE (mode) >\n-\t\t  GET_MODE_SIZE (GET_MODE (XEXP (tem, 0)))))\n-\t    {\n-\t      if (! SCALAR_INT_MODE_P (mode))\n-\t\tbreak;\n-\t      tem = gen_rtx_fmt_e (GET_CODE (tem), mode, XEXP (tem, 0));\n-\t    }\n-\t  else\n-\t    tem = gen_lowpart (mode, XEXP (tem, 0));\n+\tif (GET_CODE (tem) != GET_CODE (SUBREG_REG (x))\n+\t    && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (tem))\n+\t    && subreg_lowpart_p (x))\n+\t  {\n+\t    rtx newer = force_to_mode (tem, mode, ~(HOST_WIDE_INT) 0,\n+\t\t\t\t       NULL_RTX, 0);\n+\t    \n+\t    /* If we have something other than a SUBREG, we might have\n+\t       done an expansion, so rerun ourselves.  */\n+\t    if (GET_CODE (newer) != SUBREG)\n+\t      newer = make_compound_operation (newer, in_code);\n+\t    \n+\t    return newer;\n+\t  }\n+\n+\tif (simplified)\n \t  return tem;\n-\t}\n+      }\n       break;\n \n     default:"}]}