{"sha": "3f631671f17f44c611c70c59ef3338eab2ab67b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y2MzE2NzFmMTdmNDRjNjExYzcwYzU5ZWYzMzM4ZWFiMmFiNjdiMw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-20T16:38:43Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-20T16:38:43Z"}, "message": "libstdc++: Implement P2210 changes to split_view resolving LWG 3478\n\nThis implements the part of P2210R2 \"Superior String Splitting\" that\nresolves LWG 3478.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (split_view::_OuterIter::__at_end):\n\tCheck _M_trailing_empty.\n\t(split_view::_OuterIter::_M_trailing_empty): Define this\n\tdata member.\n\t(split_view::_OuterIter::operator++): Set _M_trailing_empty\n\tappropriately.\n\t(split_view::_OuterIter::operator==): Compare\n\t_M_trailing_empty.\n\t* testsuite/std/ranges/adaptors/100479.cc (test03): Expect two\n\tsplit parts instead of one.\n\t* testsuite/std/ranges/adaptors/split.cc (test11): New test.", "tree": {"sha": "ae600158d09966bc10d2d7c0d0acadea23fc12c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae600158d09966bc10d2d7c0d0acadea23fc12c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f631671f17f44c611c70c59ef3338eab2ab67b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f631671f17f44c611c70c59ef3338eab2ab67b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f631671f17f44c611c70c59ef3338eab2ab67b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f631671f17f44c611c70c59ef3338eab2ab67b3/comments", "author": null, "committer": null, "parents": [{"sha": "85a594f7dc8ea5c765e136f162debb668139ebd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a594f7dc8ea5c765e136f162debb668139ebd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a594f7dc8ea5c765e136f162debb668139ebd4"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "5eba69135170390729e3b84b97e4d3e75aca06e1", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f631671f17f44c611c70c59ef3338eab2ab67b3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f631671f17f44c611c70c59ef3338eab2ab67b3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=3f631671f17f44c611c70c59ef3338eab2ab67b3", "patch": "@@ -2879,7 +2879,7 @@ namespace views::__adaptor\n \n \t  constexpr bool\n \t  __at_end() const\n-\t  { return __current() == ranges::end(_M_parent->_M_base); }\n+\t  { return __current() == ranges::end(_M_parent->_M_base) && !_M_trailing_empty; }\n \n \t  // [range.split.outer] p1\n \t  //  Many of the following specifications refer to the notional member\n@@ -2909,6 +2909,7 @@ namespace views::__adaptor\n \t  [[no_unique_address]]\n \t    __detail::__maybe_present_t<forward_range<_Vp>,\n \t\t\t\t\titerator_t<_Base>> _M_current;\n+\t  bool _M_trailing_empty = false;\n \n \tpublic:\n \t  using iterator_concept = conditional_t<forward_range<_Base>,\n@@ -2971,7 +2972,10 @@ namespace views::__adaptor\n \t    // 3505. split_view::outer-iterator::operator++ misspecified\n \t    const auto __end = ranges::end(_M_parent->_M_base);\n \t    if (__current() == __end)\n-\t      return *this;\n+\t      {\n+\t\t_M_trailing_empty = false;\n+\t\treturn *this;\n+\t      }\n \t    const auto [__pbegin, __pend] = subrange{_M_parent->_M_pattern};\n \t    if (__pbegin == __pend)\n \t      ++__current();\n@@ -2980,7 +2984,11 @@ namespace views::__adaptor\n \t\t__current() = ranges::find(std::move(__current()), __end,\n \t\t\t\t\t   *__pbegin);\n \t\tif (__current() != __end)\n-\t\t  ++__current();\n+\t\t  {\n+\t\t    ++__current();\n+\t\t    if (__current() == __end)\n+\t\t      _M_trailing_empty = true;\n+\t\t  }\n \t      }\n \t    else\n \t      do\n@@ -2990,6 +2998,8 @@ namespace views::__adaptor\n \t\t  if (__p == __pend)\n \t\t    {\n \t\t      __current() = __b;\n+\t\t      if (__current() == __end)\n+\t\t\t_M_trailing_empty = true;\n \t\t      break;\n \t\t    }\n \t\t} while (++__current() != __end);\n@@ -3012,7 +3022,10 @@ namespace views::__adaptor\n \t  friend constexpr bool\n \t  operator==(const _OuterIter& __x, const _OuterIter& __y)\n \t    requires forward_range<_Base>\n-\t  { return __x._M_current == __y._M_current; }\n+\t  {\n+\t    return __x._M_current == __y._M_current\n+\t      && __x._M_trailing_empty == __y._M_trailing_empty;\n+\t  }\n \n \t  friend constexpr bool\n \t  operator==(const _OuterIter& __x, default_sentinel_t)"}, {"sha": "b16679075c68d51f153ccb3d6ed2aac9fe002dfd", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/100479.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f631671f17f44c611c70c59ef3338eab2ab67b3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100479.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f631671f17f44c611c70c59ef3338eab2ab67b3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100479.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100479.cc?ref=3f631671f17f44c611c70c59ef3338eab2ab67b3", "patch": "@@ -95,11 +95,11 @@ test03()\n     | views::drop_while([](auto) { return false; })\n     | views::filter([](auto) { return true; });\n   static_assert(ranges::forward_range<decltype(v)>);\n-  VERIFY( ranges::next(v.begin()) == v.end() );\n+  VERIFY( ranges::distance(v) == 2 );\n   auto w = v;\n-  VERIFY( ranges::next(w.begin()) == w.end() );\n+  VERIFY( ranges::distance(v) == 2 );\n   auto z = std::move(w);\n-  VERIFY( ranges::next(z.begin()) == z.end() );\n+  VERIFY( ranges::distance(v) == 2 );\n   return true;\n }\n "}, {"sha": "215856801bac02df0a0725c20a55be2c7df4508e", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/split.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f631671f17f44c611c70c59ef3338eab2ab67b3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f631671f17f44c611c70c59ef3338eab2ab67b3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc?ref=3f631671f17f44c611c70c59ef3338eab2ab67b3", "patch": "@@ -193,6 +193,25 @@ test10()\n   VERIFY( ranges::equal(v, (std::string_view[]){\"x\", \"x\"}) );\n }\n \n+void\n+test11()\n+{\n+  // LWG 3478\n+  auto v = views::split(\"text\"sv, \"text\"sv);\n+  auto i = v.begin();\n+  VERIFY( ranges::empty(*i++) );\n+  VERIFY( ranges::empty(*i++) );\n+  VERIFY( i == v.end() );\n+\n+  static_assert(ranges::distance(views::split(\" text \"sv, ' ')) == 3);\n+  static_assert(ranges::distance(views::split(\" t e x t \"sv, ' ')) == 6);\n+  static_assert(ranges::distance(views::split(\"  text  \"sv, \"  \"sv)) == 3);\n+  static_assert(ranges::distance(views::split(\"  text    \"sv, \"  \"sv)) == 4);\n+  static_assert(ranges::distance(views::split(\"  text     \"sv, \"  \"sv)) == 4);\n+  static_assert(ranges::distance(views::split(\"t\"sv, 't')) == 2);\n+  static_assert(ranges::distance(views::split(\"text\"sv, \"\"sv)) == 4);\n+}\n+\n int\n main()\n {\n@@ -206,4 +225,5 @@ main()\n   test08();\n   test09();\n   test10();\n+  test11();\n }"}]}