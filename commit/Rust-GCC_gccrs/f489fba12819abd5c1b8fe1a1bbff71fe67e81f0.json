{"sha": "f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ4OWZiYTEyODE5YWJkNWMxYjhmZTFhMWJiZmY3MWZlNjdlODFmMA==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-03-03T23:46:20Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-03-03T23:46:20Z"}, "message": "re PR fortran/33197 (Fortran 2008: math functions)\n\n\tPR fortran/33197\n\ngcc/fortran/\n\t* intrinsic.c (add_functions): Modify intrinsics ACOSH, ASINH,\n\tATANH, ERF, ERFC and GAMMA. Add intrinsics BESSEL_{J,Y}{0,1,N},\n\tERFC_SCALED, LOG_GAMMA and HYPOT.\n\t* intrinsic.h (gfc_check_hypot, gfc_simplify_hypot,\n\tgfc_resolve_hypot): New prototypes.\n\t* mathbuiltins.def: Add HYPOT builtin. Make complex versions of\n\tACOSH, ASINH and ATANH available.\n\t* gfortran.h (GFC_ISYM_ERFC_SCALED, GFC_ISYM_HYPOT): New values.\n\t* lang.opt: Add -std=f2008 option.\n\t* libgfortran.h: Define GFC_STD_F2008.\n\t* lang-specs.h: Add .f08 and .F08 file suffixes.\n\t* iresolve.c (gfc_resolve_hypot): New function.\n\t* parse.c (parse_contained): Allow empty CONTAINS for Fortran 2008.\n\t* check.c (gfc_check_hypot): New function.\n\t* trans-intrinsic.c (gfc_intrinsic_map): Define ERFC_SCALE builtin.\n\t* options.c (set_default_std_flags): Allow Fortran 2008 by default.\n\t(form_from_filename): Add .f08 suffix.\n\t(gfc_handle_option): Handle -std=f2008 option.\n\t* simplify.c (gfc_simplify_hypot): New function.\n\t* gfortran.texi: Document Fortran 2008 status and file extensions.\n\t* intrinsic.texi: Document new BESSEL_{J,Y}{0,1,N} intrinsics,\n\tas well as HYPOT and ERFC_SCALED. Update documentation of ERF,\n\tERFC, GAMMA, LGAMMA, ASINH, ACOSH and ATANH.\n\t* invoke.texi: Document the new -std=f2008 option.\n\nlibgomp/\n\t* testsuite/libgomp.fortran/fortran.exp: Add .f08 and\n\t.F08 file suffixes.\n\ngcc/testsuite/\n\t* gfortran.dg/gomp/gomp.exp: Add .f08 and .F08 file suffixes.\n\t* gfortran.dg/dg.exp: Likewise.\n\t* gfortran.dg/vect/vect.exp: Likewise.\n\t* gfortran.fortran-torture/execute/execute.exp: Likewise.\n\t* gfortran.fortran-torture/compile/compile.exp: Likewise.\n\t* gfortran.dg/gamma_1.f90: Also check log_gamma.\n\t* gfortran.dg/invalid_contains_1.f90: Remove warning about\n\tempty CONTAINS.\n\t* gfortran.dg/gamma_2.f90: Add a few error messages.\n\t* gfortran.dg/invalid_contains_2.f90: Remove warning about\n\tempty CONTAINS.\n\t* gfortran.dg/gamma_3.f90: Adjust error message.\n\t* gfortran.dg/gamma_4.f90: Test for log_gamma instead of lgamma.\n\t* gfortran.dg/bind_c_usage_9.f03: Adjust error messages.\n\t* gfortran.dg/bessel_1.f90: New test.\n\t* gfortran.dg/recursive_check_3.f90: Remove warnings.\n\t* gfortran.dg/besxy.f90: Also check for new F2008 intrinsics.\n\t* gfortran.dg/derived_function_interface_1.f90: Remove warning.\n\t* gfortran.dg/contains_empty_1.f03: New test.\n\t* gfortran.dg/erfc_scaled_1.f90: New test.\n\t* gfortran.dg/hypot_1.f90: New test.\n\t* gfortran.dg/contains_empty_2.f03: New test.\n\nlibgfortran/\n\t* intrinsics/erfc_scaled_inc.c: New file.\n\t* intrinsics/erfc_scaled.c: New file.\n\t* gfortran.map (GFORTRAN_1.0): Add _gfortran_erfc_scaled_r*.\n\t* Makefile.am: Add intrinsics/erfc_scaled.c.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r132846", "tree": {"sha": "afdccf794dd7e07d887dd608052f12f5ea83ec70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afdccf794dd7e07d887dd608052f12f5ea83ec70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1b25e49f867208ec896a7f273441d2972dd591c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b25e49f867208ec896a7f273441d2972dd591c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b25e49f867208ec896a7f273441d2972dd591c"}], "stats": {"total": 20842, "additions": 10864, "deletions": 9978}, "files": [{"sha": "38686eeb1a578c42804265307653181d62f88d9d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -1,3 +1,31 @@\n+2008-03-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33197\n+\t* intrinsic.c (add_functions): Modify intrinsics ACOSH, ASINH,\n+\tATANH, ERF, ERFC and GAMMA. Add intrinsics BESSEL_{J,Y}{0,1,N},\n+\tERFC_SCALED, LOG_GAMMA and HYPOT.\n+\t* intrinsic.h (gfc_check_hypot, gfc_simplify_hypot,\n+\tgfc_resolve_hypot): New prototypes.\n+\t* mathbuiltins.def: Add HYPOT builtin. Make complex versions of\n+\tACOSH, ASINH and ATANH available.\n+\t* gfortran.h (GFC_ISYM_ERFC_SCALED, GFC_ISYM_HYPOT): New values.\n+\t* lang.opt: Add -std=f2008 option.\n+\t* libgfortran.h: Define GFC_STD_F2008.\n+\t* lang-specs.h: Add .f08 and .F08 file suffixes.\n+\t* iresolve.c (gfc_resolve_hypot): New function.\n+\t* parse.c (parse_contained): Allow empty CONTAINS for Fortran 2008.\n+\t* check.c (gfc_check_hypot): New function.\n+\t* trans-intrinsic.c (gfc_intrinsic_map): Define ERFC_SCALE builtin.\n+\t* options.c (set_default_std_flags): Allow Fortran 2008 by default.\n+\t(form_from_filename): Add .f08 suffix.\n+\t(gfc_handle_option): Handle -std=f2008 option.\n+\t* simplify.c (gfc_simplify_hypot): New function.\n+\t* gfortran.texi: Document Fortran 2008 status and file extensions.\n+\t* intrinsic.texi: Document new BESSEL_{J,Y}{0,1,N} intrinsics,\n+\tas well as HYPOT and ERFC_SCALED. Update documentation of ERF,\n+\tERFC, GAMMA, LGAMMA, ASINH, ACOSH and ATANH.\n+\t* invoke.texi: Document the new -std=f2008 option.\n+\n 2008-03-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gfortranspec.c (lang_specific_driver): Update copyright notice"}, {"sha": "c02656ce669f9f527d2c5077d0e8cf7ce53358aa", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -1111,6 +1111,18 @@ gfc_check_huge (gfc_expr *x)\n }\n \n \n+try\n+gfc_check_hypot (gfc_expr *x, gfc_expr *y)\n+{\n+  if (type_check (x, 0, BT_REAL) == FAILURE)\n+    return FAILURE;\n+  if (same_type_check (x, 0, y, 1) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n /* Check that the single argument is an integer.  */\n \n try"}, {"sha": "07518ee8d1367e1a408e18b875b4a7a65255bdc4", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -347,6 +347,7 @@ enum gfc_isym_id\n   GFC_ISYM_EPSILON,\n   GFC_ISYM_ERF,\n   GFC_ISYM_ERFC,\n+  GFC_ISYM_ERFC_SCALED,\n   GFC_ISYM_ETIME,\n   GFC_ISYM_EXIT,\n   GFC_ISYM_EXP,\n@@ -379,6 +380,7 @@ enum gfc_isym_id\n   GFC_ISYM_GMTIME,\n   GFC_ISYM_HOSTNM,\n   GFC_ISYM_HUGE,\n+  GFC_ISYM_HYPOT,\n   GFC_ISYM_IACHAR,\n   GFC_ISYM_IAND,\n   GFC_ISYM_IARGC,"}, {"sha": "afbfe03317f6d1f2e1ff71fae90abcec1f698b3f", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 61, "deletions": 25, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -181,7 +181,7 @@ Part I: Invoking GNU Fortran\n * Runtime::              Influencing runtime behavior with environment variables.\n \n Part II: Language Reference\n-* Fortran 2003 status::  Fortran 2003 features supported by GNU Fortran.\n+* Fortran 2003 and 2008 status::  Fortran 2003 and 2008 features supported by GNU Fortran.\n * Extensions::           Language extensions implemented by GNU Fortran.\n * Intrinsic Procedures:: Intrinsic procedures supported by GNU Fortran.\n * Intrinsic Modules::    Intrinsic modules supported by GNU Fortran.\n@@ -251,7 +251,7 @@ it will do everything you expect from any decent compiler:\n @item\n Read a user's program,\n stored in a file and containing instructions written\n-in Fortran 77, Fortran 90, Fortran 95 or Fortran 2003.\n+in Fortran 77, Fortran 90, Fortran 95, Fortran 2003 or Fortran 2008.\n This file contains @dfn{source code}.\n \n @item\n@@ -369,17 +369,19 @@ Fortran) for each file in the source code, and then calls the assembler\n and linker as appropriate to produce the compiled output. In a copy of\n GCC which has been compiled with Fortran language support enabled,\n @command{gcc} will recognize files with @file{.f}, @file{.for}, @file{.ftn},\n-@file{.f90}, @file{.f95}, and @file{.f03} extensions as Fortran source code,\n-and compile it accordingly. A @command{gfortran} driver program is also\n-provided, which is identical to @command{gcc} except that it automatically\n-links the Fortran runtime libraries into the compiled program.\n+@file{.f90}, @file{.f95}, @file{.f03} and @file{.f08} extensions as\n+Fortran source code, and compile it accordingly. A @command{gfortran}\n+driver program is also provided, which is identical to @command{gcc}\n+except that it automatically links the Fortran runtime libraries into the\n+compiled program.\n \n Source files with @file{.f}, @file{.for}, @file{.fpp}, @file{.ftn}, @file{.F},\n @file{.FOR}, @file{.FPP}, and @file{.FTN} extensions are treated as fixed form.\n-Source files with @file{.f90}, @file{.f95}, @file{.f03}, @file{.F90}, \n-@file{.F95}, and @file{.F03} extensions are treated as free form.  The\n-capitalized versions of either form are run through preprocessing. Source files\n-with the lower case @file{.fpp} extension are also run through preprocessing.\n+Source files with @file{.f90}, @file{.f95}, @file{.f03}, @file{.f08},\n+@file{.F90}, @file{.F95}, @file{.F03} and @file{.F08} extensions are\n+treated as free form.  The capitalized versions of either form are run\n+through preprocessing. Source files with the lower case @file{.fpp}\n+extension are also run through preprocessing.\n \n This manual specifically documents the Fortran front end, which handles\n the programming language's syntax and semantics.  The aspects of GCC\n@@ -407,10 +409,10 @@ FPP) to allow for conditional compilation. In the case of GNU Fortran,\n this is the GNU C Preprocessor in the traditional mode. On systems with\n case-preserving file names, the preprocessor is automatically invoked if the\n file extension is @code{.F}, @code{.FOR}, @code{.FTN}, @code{.F90},\n-@code{.F95} or @code{.F03}; otherwise use for fixed-format code the option\n-@code{-x f77-cpp-input} and for free-format code @code{-x f95-cpp-input}.\n-Invocation of the preprocessor can be suppressed using @code{-x f77} or\n-@code{-x f95}.\n+@code{.F95}, @code{.F03} or @code{.F08}; otherwise use for fixed-format\n+code the option @code{-x f77-cpp-input} and for free-format code @code{-x\n+f95-cpp-input}. Invocation of the preprocessor can be suppressed using\n+@code{-x f77} or @code{-x f95}.\n \n If the GNU Fortran invoked the preprocessor, @code{__GFORTRAN__}\n is defined and @code{__GNUC__}, @code{__GNUC_MINOR__} and\n@@ -468,10 +470,10 @@ The GNU Fortran compiler is able to compile nearly all\n standard-compliant Fortran 95, Fortran 90, and Fortran 77 programs,\n including a number of standard and non-standard extensions, and can be\n used on real-world programs.  In particular, the supported extensions\n-include OpenMP, Cray-style pointers, and several Fortran 2003 features\n-such as enumeration, stream I/O, and some of the enhancements to\n-allocatable array support from TR 15581.  However, it is still under\n-development and has a few remaining rough edges.\n+include OpenMP, Cray-style pointers, and several Fortran 2003 and Fortran\n+2008 features such as enumeration, stream I/O, and some of the\n+enhancements to allocatable array support from TR 15581.  However, it is\n+still under development and has a few remaining rough edges.\n \n At present, the GNU Fortran compiler passes the\n @uref{http://www.fortran-2000.com/ArnaudRecipes/fcvs21_f95.html, \n@@ -516,9 +518,18 @@ the ISO/IEC TR-15581 enhancements to allocatable arrays, and\n the @uref{http://www.openmp.org/drupal/mp-documents/spec25.pdf,\n OpenMP Application Program Interface v2.5} specification.\n \n-In the future, the GNU Fortran compiler may also support other standard \n-variants of and extensions to the Fortran language.  These include\n-ISO/IEC 1539-1:2004 (Fortran 2003).\n+In the future, the GNU Fortran compiler will also support ISO/IEC\n+1539-1:2004 (Fortran 2003) and future Fortran standards. Partial support\n+of that standard is already provided; the current status of Fortran 2003\n+support is reported in the @ref{Fortran 2003 status} section of the\n+documentation.\n+\n+The next version of the Fortran standard after Fortran 2003 is currently\n+being developped and the GNU Fortran compiler supports some of its new\n+features. This support is based on the latest draft of the standard\n+(available from @url{http://www.nag.co.uk/sc22wg5/}) and no guarantee of\n+future compatibility is made, as the final standard might differ from the\n+draft. For more information, see the @ref{Fortran 2008 status} section.\n \n \n @c =====================================================================\n@@ -758,11 +769,19 @@ was used.\n @end tex\n \n @c ---------------------------------------------------------------------\n-@c Fortran 2003 Status\n+@c Fortran 2003 and 2008 Status\n @c ---------------------------------------------------------------------\n \n+@node Fortran 2003 and 2008 status\n+@chapter Fortran 2003 and 2008 Status\n+\n+@menu\n+* Fortran 2003 status::\n+* Fortran 2008 status::\n+@end menu\n+\n @node Fortran 2003 status\n-@chapter Fortran 2003 Status\n+@section Fortran 2003 status\n \n Although GNU Fortran focuses on implementing the Fortran 95\n standard for the time being, a few Fortran 2003 features are currently\n@@ -867,6 +886,22 @@ BOZ as argument of INT, REAL, DBLE and CMPLX.\n @end itemize\n \n \n+@node Fortran 2008 status\n+@section Fortran 2008 status\n+\n+The next version of the Fortran standard after Fortran 2003 is currently\n+being worked on by the Working Group 5 of Sub-Committee 22 of the Joint\n+Technical Committee 1 of the International Organization for\n+Standardization (ISO) and the International Electrotechnical Commission\n+(IEC). This group is known at @uref{http://www.nag.co.uk/sc22wg5/, WG5}.\n+The next revision of the Fortran standard is informally referred to as\n+Fortran 2008, reflecting its planned release year. The GNU Fortran\n+compiler has support for some of the new features in Fortran 2008. This\n+support is based on the latest draft, available from\n+@url{http://www.nag.co.uk/sc22wg5/}. However, as the final standard may\n+differ from the drafts, no guarantee of backward compatibility can be\n+made and you should only use it for experimental purposes.\n+\n @c ---------------------------------------------------------------------\n @c Extensions\n @c ---------------------------------------------------------------------\n@@ -903,8 +938,9 @@ by any standard, and those that are supported by GNU Fortran\n purely for backward compatibility with legacy compilers.  By default,\n @option{-std=gnu} allows the compiler to accept both types of\n extensions, but to warn about the use of the latter.  Specifying\n-either @option{-std=f95} or @option{-std=f2003} disables both types\n-of extensions, and @option{-std=legacy} allows both without warning.\n+either @option{-std=f95}, @option{-std=f2003} or @option{-std=f2008}\n+disables both types of extensions, and @option{-std=legacy} allows both\n+without warning.\n \n @menu\n * Old-style kind specifications::"}, {"sha": "e2f3517b47c7cca5f7cae9e1b1732210f1a8eb3f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 58, "deletions": 30, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -964,15 +964,15 @@ add_functions (void)\n \n   make_generic (\"acos\", GFC_ISYM_ACOS, GFC_STD_F77);\n \n-  add_sym_1 (\"acosh\", GFC_ISYM_ACOSH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_GNU,\n-\t     gfc_check_fn_r, gfc_simplify_acosh, gfc_resolve_acosh,\n-\t     x, BT_REAL, dr, REQUIRED);\n+  add_sym_1 (\"acosh\", GFC_ISYM_ACOSH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr,\n+\t     GFC_STD_F2008, gfc_check_fn_r, gfc_simplify_acosh,\n+\t     gfc_resolve_acosh, x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dacosh\", GFC_ISYM_ACOSH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_fn_d, gfc_simplify_acosh, gfc_resolve_acosh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"acosh\", GFC_ISYM_ACOSH, GFC_STD_GNU);\n+  make_generic (\"acosh\", GFC_ISYM_ACOSH, GFC_STD_F2008);\n \n   add_sym_1 (\"adjustl\", GFC_ISYM_ADJUSTL, CLASS_ELEMENTAL, ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_F95,\n \t     NULL, gfc_simplify_adjustl, NULL,\n@@ -1047,15 +1047,15 @@ add_functions (void)\n \n   make_generic (\"asin\", GFC_ISYM_ASIN, GFC_STD_F77);\n   \n-  add_sym_1 (\"asinh\", GFC_ISYM_ASINH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_GNU,\n-\t     gfc_check_fn_r, gfc_simplify_asinh, gfc_resolve_asinh,\n-\t     x, BT_REAL, dr, REQUIRED);\n+  add_sym_1 (\"asinh\", GFC_ISYM_ASINH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr,\n+\t     GFC_STD_F2008, gfc_check_fn_r, gfc_simplify_asinh,\n+\t     gfc_resolve_asinh, x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dasinh\", GFC_ISYM_ASINH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_fn_d, gfc_simplify_asinh, gfc_resolve_asinh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"asinh\", GFC_ISYM_ASINH, GFC_STD_GNU);\n+  make_generic (\"asinh\", GFC_ISYM_ASINH, GFC_STD_F2008);\n \n   add_sym_2 (\"associated\", GFC_ISYM_ASSOCIATED, CLASS_INQUIRY, ACTUAL_NO, BT_LOGICAL, dl,\n \t     GFC_STD_F95, gfc_check_associated, NULL, NULL,\n@@ -1073,15 +1073,15 @@ add_functions (void)\n \n   make_generic (\"atan\", GFC_ISYM_ATAN, GFC_STD_F77);\n   \n-  add_sym_1 (\"atanh\", GFC_ISYM_ATANH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_GNU,\n-\t     gfc_check_fn_r, gfc_simplify_atanh, gfc_resolve_atanh,\n-\t     x, BT_REAL, dr, REQUIRED);\n+  add_sym_1 (\"atanh\", GFC_ISYM_ATANH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr,\n+\t     GFC_STD_F2008, gfc_check_fn_r, gfc_simplify_atanh,\n+\t     gfc_resolve_atanh, x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"datanh\", GFC_ISYM_ATANH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_fn_d, gfc_simplify_atanh, gfc_resolve_atanh,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"atanh\", GFC_ISYM_ATANH, GFC_STD_GNU);\n+  make_generic (\"atanh\", GFC_ISYM_ATANH, GFC_STD_F2008);\n \n   add_sym_2 (\"atan2\", GFC_ISYM_ATAN2, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_atan2, gfc_simplify_atan2, gfc_resolve_atan2,\n@@ -1098,61 +1098,73 @@ add_functions (void)\n \t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n+  make_alias (\"bessel_j0\", GFC_STD_F2008);\n+\n   add_sym_1 (\"dbesj0\", GFC_ISYM_J0, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"besj0\", GFC_ISYM_J0, GFC_STD_GNU);\n+  make_generic (\"bessel_j0\", GFC_ISYM_J0, GFC_STD_F2008);\n \n   add_sym_1 (\"besj1\", GFC_ISYM_J1, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n+  make_alias (\"bessel_j1\", GFC_STD_F2008);\n+\n   add_sym_1 (\"dbesj1\", GFC_ISYM_J1, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"besj1\", GFC_ISYM_J1, GFC_STD_GNU);\n+  make_generic (\"bessel_j1\", GFC_ISYM_J1, GFC_STD_F2008);\n \n   add_sym_2 (\"besjn\", GFC_ISYM_JN, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn,\n \t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dr, REQUIRED);\n \n+  make_alias (\"bessel_jn\", GFC_STD_F2008);\n+\n   add_sym_2 (\"dbesjn\", GFC_ISYM_JN, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn,\n \t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"besjn\", GFC_ISYM_JN, GFC_STD_GNU);\n+  make_generic (\"bessel_jn\", GFC_ISYM_JN, GFC_STD_F2008);\n \n   add_sym_1 (\"besy0\", GFC_ISYM_Y0, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n+  make_alias (\"bessel_y0\", GFC_STD_F2008);\n+\n   add_sym_1 (\"dbesy0\", GFC_ISYM_Y0, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"besy0\", GFC_ISYM_Y0, GFC_STD_GNU);\n+  make_generic (\"bessel_y0\", GFC_ISYM_Y0, GFC_STD_F2008);\n \n   add_sym_1 (\"besy1\", GFC_ISYM_Y1, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n+  make_alias (\"bessel_y1\", GFC_STD_F2008);\n+\n   add_sym_1 (\"dbesy1\", GFC_ISYM_Y1, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"besy1\", GFC_ISYM_Y1, GFC_STD_GNU);\n+  make_generic (\"bessel_y1\", GFC_ISYM_Y1, GFC_STD_F2008);\n \n   add_sym_2 (\"besyn\", GFC_ISYM_YN, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn,\n \t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dr, REQUIRED);\n \n+  make_alias (\"bessel_yn\", GFC_STD_F2008);\n+\n   add_sym_2 (\"dbesyn\", GFC_ISYM_YN, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn,\n \t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"besyn\", GFC_ISYM_YN, GFC_STD_GNU);\n+  make_generic (\"bessel_yn\", GFC_ISYM_YN, GFC_STD_F2008);\n \n   add_sym_1 (\"bit_size\", GFC_ISYM_BIT_SIZE, CLASS_INQUIRY, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_i, gfc_simplify_bit_size, NULL,\n@@ -1339,25 +1351,31 @@ add_functions (void)\n   make_generic (\"epsilon\", GFC_ISYM_EPSILON, GFC_STD_F95);\n \n   /* G77 compatibility for the ERF() and ERFC() functions.  */\n-  add_sym_1 (\"erf\", GFC_ISYM_ERF, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n-\t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n+  add_sym_1 (\"erf\", GFC_ISYM_ERF, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr,\n+\t     GFC_STD_F2008, gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"derf\", GFC_ISYM_ERF, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"erf\", GFC_ISYM_ERF, GFC_STD_GNU);\n+  make_generic (\"erf\", GFC_ISYM_ERF, GFC_STD_F2008);\n \n-  add_sym_1 (\"erfc\", GFC_ISYM_ERFC, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n-\t     gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n+  add_sym_1 (\"erfc\", GFC_ISYM_ERFC, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr,\n+\t     GFC_STD_F2008, gfc_check_fn_r, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"derfc\", GFC_ISYM_ERFC, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_fn_d, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, REQUIRED);\n \n-  make_generic (\"erfc\", GFC_ISYM_ERFC, GFC_STD_GNU);\n+  make_generic (\"erfc\", GFC_ISYM_ERFC, GFC_STD_F2008);\n+\n+  add_sym_1 (\"erfc_scaled\", GFC_ISYM_ERFC_SCALED, CLASS_ELEMENTAL, ACTUAL_NO,\n+\t     BT_REAL, dr, GFC_STD_F2008, gfc_check_fn_r, NULL,\n+\t     gfc_resolve_g77_math1, x, BT_REAL, dr, REQUIRED);\n+\n+  make_generic (\"erfc_scaled\", GFC_ISYM_ERFC_SCALED, GFC_STD_F2008);\n \n   /* G77 compatibility */\n   add_sym_1 (\"dtime\", GFC_ISYM_DTIME, NO_CLASS, ACTUAL_NO, BT_REAL, 4,  GFC_STD_GNU,\n@@ -1458,15 +1476,15 @@ add_functions (void)\n \n   make_generic (\"fput\", GFC_ISYM_FPUT, GFC_STD_GNU);\n \n-  add_sym_1 (\"gamma\", GFC_ISYM_GAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n-\t     gfc_check_fn_r, gfc_simplify_gamma, gfc_resolve_gamma,\n-\t     x, BT_REAL, dr, REQUIRED);\n+  add_sym_1 (\"gamma\", GFC_ISYM_GAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr,\n+\t     GFC_STD_F2008, gfc_check_fn_r, gfc_simplify_gamma,\n+\t     gfc_resolve_gamma, x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dgamma\", GFC_ISYM_GAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_fn_d, gfc_simplify_gamma, gfc_resolve_gamma,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  make_generic (\"gamma\", GFC_ISYM_GAMMA, GFC_STD_GNU);\n+  make_generic (\"gamma\", GFC_ISYM_GAMMA, GFC_STD_F2008);\n \n   /* Unix IDs (g77 compatibility)  */\n   add_sym_1 (\"getcwd\", GFC_ISYM_GETCWD, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,  GFC_STD_GNU,\n@@ -1502,6 +1520,13 @@ add_functions (void)\n \n   make_generic (\"huge\", GFC_ISYM_HUGE, GFC_STD_F95);\n \n+  add_sym_2 (\"hypot\", GFC_ISYM_HYPOT, CLASS_ELEMENTAL, ACTUAL_NO,\n+\t     BT_REAL, dr, GFC_STD_F2008,\n+\t     gfc_check_hypot, gfc_simplify_hypot, gfc_resolve_hypot,\n+\t     x, BT_REAL, dr, REQUIRED, y, BT_REAL, dr, REQUIRED);\n+\n+  make_generic (\"hypot\", GFC_ISYM_HYPOT, GFC_STD_F2008);\n+\n   add_sym_2 (\"iachar\", GFC_ISYM_IACHAR, CLASS_ELEMENTAL, ACTUAL_NO,\n \t     BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ichar_iachar, gfc_simplify_iachar, gfc_resolve_iachar,\n@@ -1717,10 +1742,13 @@ add_functions (void)\n \n   make_generic (\"len_trim\", GFC_ISYM_LEN_TRIM, GFC_STD_F95);\n \n-  add_sym_1 (\"lgamma\", GFC_ISYM_LGAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"lgamma\", GFC_ISYM_LGAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL,\n+\t     dr, GFC_STD_GNU,\n \t     gfc_check_fn_r, gfc_simplify_lgamma, gfc_resolve_lgamma,\n \t     x, BT_REAL, dr, REQUIRED);\n \n+  make_alias (\"log_gamma\", GFC_STD_F2008);\n+\n   add_sym_1 (\"algama\", GFC_ISYM_LGAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_fn_r, gfc_simplify_lgamma, gfc_resolve_lgamma,\n \t     x, BT_REAL, dr, REQUIRED);\n@@ -1729,7 +1757,7 @@ add_functions (void)\n \t     gfc_check_fn_d, gfc_simplify_lgamma, gfc_resolve_lgamma,\n \t     x, BT_REAL, dr, REQUIRED);\n \n-  make_generic (\"lgamma\", GFC_ISYM_LGAMMA, GFC_STD_GNU);\n+  make_generic (\"log_gamma\", GFC_ISYM_LGAMMA, GFC_STD_F2008);\n \n \n   add_sym_2 (\"lge\", GFC_ISYM_LGE, CLASS_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F77,"}, {"sha": "3ae41451742feda373445396203f853dbc7d0100", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -67,6 +67,7 @@ try gfc_check_fn_rc (gfc_expr *);\n try gfc_check_fnum (gfc_expr *);\n try gfc_check_hostnm (gfc_expr *);\n try gfc_check_huge (gfc_expr *);\n+try gfc_check_hypot (gfc_expr *, gfc_expr *);\n try gfc_check_i (gfc_expr *);\n try gfc_check_iand (gfc_expr *, gfc_expr *);\n try gfc_check_and (gfc_expr *, gfc_expr *);\n@@ -228,6 +229,7 @@ gfc_expr *gfc_simplify_floor (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_fraction (gfc_expr *);\n gfc_expr *gfc_simplify_gamma (gfc_expr *);\n gfc_expr *gfc_simplify_huge (gfc_expr *);\n+gfc_expr *gfc_simplify_hypot (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_iachar (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_iand (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_ibclr (gfc_expr *, gfc_expr *);\n@@ -368,6 +370,7 @@ void gfc_resolve_getgid (gfc_expr *);\n void gfc_resolve_getpid (gfc_expr *);\n void gfc_resolve_getuid (gfc_expr *);\n void gfc_resolve_hostnm (gfc_expr *, gfc_expr *);\n+void gfc_resolve_hypot (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_iand (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ibclr (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ibits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "c2630b249be58e10866c82fe6dd9dd9e4efab15d", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 195, "deletions": 106, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -62,12 +62,12 @@ Some basic guidelines for editing this document:\n * @code{ATAN}:          ATAN,      Arctangent function\n * @code{ATAN2}:         ATAN2,     Arctangent function\n * @code{ATANH}:         ATANH,     Hyperbolic arctangent function\n-* @code{BESJ0}:         BESJ0,     Bessel function of the first kind of order 0\n-* @code{BESJ1}:         BESJ1,     Bessel function of the first kind of order 1\n-* @code{BESJN}:         BESJN,     Bessel function of the first kind\n-* @code{BESY0}:         BESY0,     Bessel function of the second kind of order 0\n-* @code{BESY1}:         BESY1,     Bessel function of the second kind of order 1\n-* @code{BESYN}:         BESYN,     Bessel function of the second kind\n+* @code{BESSEL_J0}:     BESSEL_J0, Bessel function of the first kind of order 0\n+* @code{BESSEL_J1}:     BESSEL_J1, Bessel function of the first kind of order 1\n+* @code{BESSEL_JN}:     BESSEL_JN, Bessel function of the first kind\n+* @code{BESSEL_Y0}:     BESSEL_Y0, Bessel function of the second kind of order 0\n+* @code{BESSEL_Y1}:     BESSEL_Y1, Bessel function of the second kind of order 1\n+* @code{BESSEL_YN}:     BESSEL_YN, Bessel function of the second kind\n * @code{BIT_SIZE}:      BIT_SIZE,  Bit size inquiry function\n * @code{BTEST}:         BTEST,     Bit test function\n * @code{C_ASSOCIATED}:  C_ASSOCIATED, Status of a C pointer\n@@ -103,6 +103,7 @@ Some basic guidelines for editing this document:\n * @code{EPSILON}:       EPSILON,   Epsilon function\n * @code{ERF}:           ERF,       Error function\n * @code{ERFC}:          ERFC,      Complementary error function\n+* @code{ERFC_SCALED}:   ERFC_SCALED, Exponentially-scaled complementary error function\n * @code{ETIME}:         ETIME,     Execution time subroutine (or function)\n * @code{EXIT}:          EXIT,      Exit the program with status.\n * @code{EXP}:           EXP,       Exponential function\n@@ -136,6 +137,7 @@ Some basic guidelines for editing this document:\n * @code{GMTIME}:        GMTIME,    Convert time to GMT info\n * @code{HOSTNM}:        HOSTNM,    Get system host name\n * @code{HUGE}:          HUGE,      Largest number of a kind\n+* @code{HYPOT}:         HYPOT,     Euclidian distance function\n * @code{IACHAR}:        IACHAR,    Code in @acronym{ASCII} collating sequence\n * @code{IAND}:          IAND,      Bitwise logical and\n * @code{IARGC}:         IARGC,     Get the number of command line arguments\n@@ -164,7 +166,7 @@ Some basic guidelines for editing this document:\n * @code{LBOUND}:        LBOUND,    Lower dimension bounds of an array\n * @code{LEN}:           LEN,       Length of a character entity\n * @code{LEN_TRIM}:      LEN_TRIM,  Length of a character entity without trailing blank characters\n-* @code{LGAMMA}:        LGAMMA,    Logarithm of the Gamma function\n+* @code{LOG_GAMMA}:     LOG_GAMMA, Logarithm of the Gamma function\n * @code{LGE}:           LGE,       Lexical greater than or equal\n * @code{LGT}:           LGT,       Lexical greater than\n * @code{LINK}:          LINK,      Create a hard link\n@@ -266,11 +268,12 @@ Some basic guidelines for editing this document:\n \n The intrinsic procedures provided by GNU Fortran include all of the\n intrinsic procedures required by the Fortran 95 standard, a set of\n-intrinsic procedures for backwards compatibility with G77, and a small\n-selection of intrinsic procedures from the Fortran 2003 standard.  Any\n-conflict between a description here and a description in either the\n-Fortran 95 standard or the Fortran 2003 standard is unintentional, and\n-the standard(s) should be considered authoritative.\n+intrinsic procedures for backwards compatibility with G77, and a\n+selection of intrinsic procedures from the Fortran 2003 and Fortran 2008\n+standards.  Any conflict between a description here and a description in\n+either the Fortran 95 standard, the Fortran 2003 standard or the Fortran\n+2008 standard is unintentional, and the standard(s) should be considered\n+authoritative.\n \n The enumeration of the @code{KIND} type parameter is processor defined in\n the Fortran 95 standard.  GNU Fortran defines the default integer type and\n@@ -574,7 +577,7 @@ Inverse function: @ref{COS}\n @code{COSH(X)}).\n \n @item @emph{Standard}:\n-GNU extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -584,13 +587,11 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be @code{REAL(*)} with a magnitude that is\n-greater or equal to one.\n+@item @var{X} @tab The type shall be @code{REAL} or @code{COMPLEX}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{REAL(*)} and it lies in the\n-range @math{0 \\leq \\acosh (x) \\leq \\infty}.\n+The return value has the same type and kind as @var{X}\n \n @item @emph{Example}:\n @smallexample\n@@ -1213,7 +1214,7 @@ Inverse function: @ref{SIN}\n @code{ASINH(X)} computes the hyperbolic arcsine of @var{X} (inverse of @code{SINH(X)}).\n \n @item @emph{Standard}:\n-GNU extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -1223,12 +1224,11 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be @code{REAL(*)}, with @var{X} a real number.\n+@item @var{X} @tab The type shall be @code{REAL} or @code{COMPLEX}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{REAL(*)} and it lies in the\n-range @math{-\\infty \\leq \\asinh (x) \\leq \\infty}.\n+The return value is of the same type and kind as  @var{X}.\n \n @item @emph{Example}:\n @smallexample\n@@ -1445,7 +1445,7 @@ end program test_atan2\n of @code{TANH(X)}).\n \n @item @emph{Standard}:\n-GNU extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -1455,13 +1455,11 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be @code{REAL(*)} with a magnitude\n-that is less than or equal to one.\n+@item @var{X} @tab The type shall be @code{REAL} or @code{COMPLEX}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{REAL(*)} and it lies in the\n-range @math{-\\infty \\leq \\atanh(x) \\leq \\infty}.\n+The return value has same type and kind as @var{X}.\n \n @item @emph{Example}:\n @smallexample\n@@ -1483,25 +1481,27 @@ Inverse function: @ref{TANH}\n \n \n \n-@node BESJ0\n-@section @code{BESJ0} --- Bessel function of the first kind of order 0\n+@node BESSEL_J0\n+@section @code{BESSEL_J0} --- Bessel function of the first kind of order 0\n+@fnindex BESSEL_J0\n @fnindex BESJ0\n @fnindex DBESJ0\n @cindex Bessel function, first kind\n \n @table @asis\n @item @emph{Description}:\n-@code{BESJ0(X)} computes the Bessel function of the first kind of order 0\n-of @var{X}.\n+@code{BESSEL_J0(X)} computes the Bessel function of the first kind of\n+order 0 of @var{X}. This function is available under the name\n+@code{BESJ0} as a GNU extension.\n \n @item @emph{Standard}:\n-GNU extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n-@code{RESULT = BESJ0(X)}\n+@code{RESULT = BESSEL_J0(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -1516,7 +1516,7 @@ range @math{ - 0.4027... \\leq Bessel (0,x) \\leq 1}.\n @smallexample\n program test_besj0\n   real(8) :: x = 0.0_8\n-  x = besj0(x)\n+  x = bessel_j0(x)\n end program test_besj0\n @end smallexample\n \n@@ -1529,25 +1529,27 @@ end program test_besj0\n \n \n \n-@node BESJ1\n-@section @code{BESJ1} --- Bessel function of the first kind of order 1\n+@node BESSEL_J1\n+@section @code{BESEL_J1} --- Bessel function of the first kind of order 1\n+@fnindex BESSEL_J1\n @fnindex BESJ1\n @fnindex DBESJ1\n @cindex Bessel function, first kind\n \n @table @asis\n @item @emph{Description}:\n-@code{BESJ1(X)} computes the Bessel function of the first kind of order 1\n-of @var{X}.\n+@code{BESSEL_J1(X)} computes the Bessel function of the first kind of\n+order 1 of @var{X}. This function is available under the name\n+@code{BESJ1} as a GNU extension.\n \n @item @emph{Standard}:\n-GNU extension\n+Fortran 2008\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n-@code{RESULT = BESJ1(X)}\n+@code{RESULT = BESSEL_J1(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -1562,7 +1564,7 @@ range @math{ - 0.5818... \\leq Bessel (0,x) \\leq 0.5818 }.\n @smallexample\n program test_besj1\n   real(8) :: x = 1.0_8\n-  x = besj1(x)\n+  x = bessel_j1(x)\n end program test_besj1\n @end smallexample\n \n@@ -1575,27 +1577,29 @@ end program test_besj1\n \n \n \n-@node BESJN\n-@section @code{BESJN} --- Bessel function of the first kind\n+@node BESSEL_JN\n+@section @code{BESSEL_JN} --- Bessel function of the first kind\n+@fnindex BESSEL_JN\n @fnindex BESJN\n @fnindex DBESJN\n @cindex Bessel function, first kind\n \n @table @asis\n @item @emph{Description}:\n-@code{BESJN(N, X)} computes the Bessel function of the first kind of order\n-@var{N} of @var{X}.\n+@code{BESSEL_JN(N, X)} computes the Bessel function of the first kind of\n+order @var{N} of @var{X}. This function is available under the name\n+@code{BESJN} as a GNU extension.\n \n If both arguments are arrays, their ranks and shapes shall conform.\n \n @item @emph{Standard}:\n-GNU extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n-@code{RESULT = BESJN(N, X)}\n+@code{RESULT = BESSEL_JN(N, X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -1610,7 +1614,7 @@ The return value is a scalar of type @code{REAL(*)}.\n @smallexample\n program test_besjn\n   real(8) :: x = 1.0_8\n-  x = besjn(5,x)\n+  x = bessel_jn(5,x)\n end program test_besjn\n @end smallexample\n \n@@ -1624,25 +1628,27 @@ end program test_besjn\n \n \n \n-@node BESY0\n-@section @code{BESY0} --- Bessel function of the second kind of order 0\n+@node BESSEL_Y0\n+@section @code{BESSEL_Y0} --- Bessel function of the second kind of order 0\n+@fnindex BESSEL_Y0\n @fnindex BESY0\n @fnindex DBESY0\n @cindex Bessel function, second kind\n \n @table @asis\n @item @emph{Description}:\n-@code{BESY0(X)} computes the Bessel function of the second kind of order 0\n-of @var{X}.\n+@code{BESSEL_Y0(X)} computes the Bessel function of the second kind of\n+order 0 of @var{X}. This function is available under the name\n+@code{BESY0} as a GNU extension.\n \n @item @emph{Standard}:\n-GNU extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n-@code{RESULT = BESY0(X)}\n+@code{RESULT = BESSEL_Y0(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -1656,7 +1662,7 @@ The return value is a scalar of type @code{REAL(*)}.\n @smallexample\n program test_besy0\n   real(8) :: x = 0.0_8\n-  x = besy0(x)\n+  x = bessel_y0(x)\n end program test_besy0\n @end smallexample\n \n@@ -1669,25 +1675,27 @@ end program test_besy0\n \n \n \n-@node BESY1\n-@section @code{BESY1} --- Bessel function of the second kind of order 1\n+@node BESSEL_Y1\n+@section @code{BESSEL_Y1} --- Bessel function of the second kind of order 1\n+@fnindex BESSEL_Y1\n @fnindex BESY1\n @fnindex DBESY1\n @cindex Bessel function, second kind\n \n @table @asis\n @item @emph{Description}:\n-@code{BESY1(X)} computes the Bessel function of the second kind of order 1\n-of @var{X}.\n+@code{BESSEL_Y1(X)} computes the Bessel function of the second kind of\n+order 1 of @var{X}. This function is available under the name\n+@code{BESY1} as a GNU extension.\n \n @item @emph{Standard}:\n-GNU extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n-@code{RESULT = BESY1(X)}\n+@code{RESULT = BESSEL_Y1(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -1701,7 +1709,7 @@ The return value is a scalar of type @code{REAL(*)}.\n @smallexample\n program test_besy1\n   real(8) :: x = 1.0_8\n-  x = besy1(x)\n+  x = bessel_y1(x)\n end program test_besy1\n @end smallexample\n \n@@ -1714,27 +1722,29 @@ end program test_besy1\n \n \n \n-@node BESYN\n-@section @code{BESYN} --- Bessel function of the second kind\n+@node BESSEL_YN\n+@section @code{BESSEL_YN} --- Bessel function of the second kind\n+@fnindex BESSEL_YN\n @fnindex BESYN\n @fnindex DBESYN\n @cindex Bessel function, second kind\n \n @table @asis\n @item @emph{Description}:\n-@code{BESYN(N, X)} computes the Bessel function of the second kind of order\n-@var{N} of @var{X}.\n+@code{BESSEL_YN(N, X)} computes the Bessel function of the second kind of\n+order @var{N} of @var{X}. This function is available under the name\n+@code{BESYN} as a GNU extension.\n \n If both arguments are arrays, their ranks and shapes shall conform.\n \n @item @emph{Standard}:\n-GNU extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n-@code{RESULT = BESYN(N, X)}\n+@code{RESULT = BESSEL_YN(N, X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -1749,7 +1759,7 @@ The return value is a scalar of type @code{REAL(*)}.\n @smallexample\n program test_besyn\n   real(8) :: x = 1.0_8\n-  x = besyn(5,x)\n+  x = bessel_yn(5,x)\n end program test_besyn\n @end smallexample\n \n@@ -1859,7 +1869,7 @@ end program test_btest\n or if @var{c_ptr1} is associated with the target @var{c_ptr2}.\n \n @item @emph{Standard}:\n-F2003 and later\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -1905,7 +1915,7 @@ end subroutine association_test\n @code{C_FUNLOC(x)} determines the C address of the argument.\n \n @item @emph{Standard}:\n-F2003 and later\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -1966,7 +1976,7 @@ Note: Due to the currently lacking support of procedure pointers in GNU Fortran\n this function is not fully operable.\n \n @item @emph{Standard}:\n-F2003 and later\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -2024,7 +2034,7 @@ end program main\n shape.\n \n @item @emph{Standard}:\n-F2003 and later\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -2077,7 +2087,7 @@ end program main\n @code{C_LOC(x)} determines the C address of the argument.\n \n @item @emph{Standard}:\n-F2003 and later\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -2399,7 +2409,7 @@ end program test_cmplx\n command line when the containing program was invoked.\n \n @item @emph{Standard}:\n-F2003\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -3511,7 +3521,7 @@ end program test_epsilon\n @code{ERF(X)} computes the error function of @var{X}.\n \n @item @emph{Standard}:\n-GNU Extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -3521,12 +3531,12 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be @code{REAL(*)}, and it shall be scalar.\n+@item @var{X} @tab The type shall be @code{REAL}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is a scalar of type @code{REAL(*)} and it is positive\n-(@math{ - 1 \\leq erf (x) \\leq 1 }.\n+The return value is of type @code{REAL}, of the same kind as\n+@var{X} and lies in the range @math{-1 \\leq erf (x) \\leq 1 }.\n \n @item @emph{Example}:\n @smallexample\n@@ -3555,7 +3565,7 @@ end program test_erf\n @code{ERFC(X)} computes the complementary error function of @var{X}.\n \n @item @emph{Standard}:\n-GNU extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -3565,12 +3575,12 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be @code{REAL(*)}, and it shall be scalar.\n+@item @var{X} @tab The type shall be @code{REAL}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is a scalar of type @code{REAL(*)} and it is positive\n-(@math{ 0 \\leq erfc (x) \\leq 2 }.\n+The return value is of type @code{REAL} and of the same kind as @var{X}.\n+It lies in the range @math{ 0 \\leq erfc (x) \\leq 2 }.\n \n @item @emph{Example}:\n @smallexample\n@@ -3589,6 +3599,44 @@ end program test_erfc\n \n \n \n+@node ERFC_SCALED\n+@section @code{ERFC_SCALED} --- Error function \n+@fnindex ERFC_SCALED\n+@cindex error function, complementary, exponentially-scaled\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ERFC_SCALED(X)} computes the exponentially-scaled complementary\n+error function of @var{X}.\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = ERFC_SCALED(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{X} @tab The type shall be @code{REAL}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL} and of the same kind as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_erfc_scaled\n+  real(8) :: x = 0.17_8\n+  x = erfc_scaled(x)\n+end program test_erfc_scaled\n+@end smallexample\n+@end table\n+\n+\n+\n @node ETIME\n @section @code{ETIME} --- Execution time subroutine (or function)\n @fnindex ETIME\n@@ -4529,7 +4577,7 @@ $$\n @end tex\n \n @item @emph{Standard}:\n-GNU Extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -4562,7 +4610,7 @@ end program test_gamma\n @end multitable\n \n @item @emph{See also}:\n-Logarithm of the Gamma function: @ref{LGAMMA}\n+Logarithm of the Gamma function: @ref{LOG_GAMMA}\n \n @end table\n \n@@ -4663,8 +4711,8 @@ END PROGRAM\n @item @emph{See also}:\n GNU Fortran 77 compatibility function: @ref{IARGC}\n \n-F2003 functions and subroutines: @ref{GET_COMMAND}, @ref{GET_COMMAND_ARGUMENT},\n-@ref{COMMAND_ARGUMENT_COUNT}\n+Fortran 2003 functions and subroutines: @ref{GET_COMMAND},\n+@ref{GET_COMMAND_ARGUMENT}, @ref{COMMAND_ARGUMENT_COUNT}\n @end table\n \n \n@@ -4680,7 +4728,7 @@ F2003 functions and subroutines: @ref{GET_COMMAND}, @ref{GET_COMMAND_ARGUMENT},\n Retrieve the entire command line that was used to invoke the program.\n \n @item @emph{Standard}:\n-F2003\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -4724,7 +4772,7 @@ Retrieve the @var{N}th argument that was passed on the\n command line when the containing program was invoked.\n \n @item @emph{Standard}:\n-F2003\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -4871,7 +4919,7 @@ END PROGRAM\n Get the @var{VALUE} of the environmental variable @var{ENVVAR}.\n \n @item @emph{Standard}:\n-F2003\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -5184,6 +5232,46 @@ end program test_huge_tiny\n \n \n \n+@node HYPOT\n+@section @code{HYPOT} --- Euclidean distance function\n+@fnindex HYPOT\n+@cindex Euclidean distance\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{HYPOT(X,Y)} is the Euclidean distance function. It is equal to\n+@math{\\sqrt{X^2 + Y^2}}, without undue underflow or overflow.\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = HYPOT(X,Y)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{X} @tab The type shall be @code{REAL}.\n+@item @var{Y} @tab The type and kind type parameter shall be the same as\n+@var{X}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value has the same type and kind type parameter as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_hypot\n+  real(4) :: x = 1.e0_4, y = 0.5e0_4\n+  x = hypot(x,y)\n+end program test_hypot\n+@end smallexample\n+@end table\n+\n+\n+\n @node IACHAR\n @section @code{IACHAR} --- Code in @acronym{ASCII} collating sequence \n @fnindex IACHAR\n@@ -5322,8 +5410,8 @@ See @ref{GETARG}\n @item @emph{See also}:\n GNU Fortran 77 compatibility subroutine: @ref{GETARG}\n \n-F2003 functions and subroutines: @ref{GET_COMMAND}, @ref{GET_COMMAND_ARGUMENT},\n-@ref{COMMAND_ARGUMENT_COUNT}\n+Fortran 2003 functions and subroutines: @ref{GET_COMMAND},\n+@ref{GET_COMMAND_ARGUMENT}, @ref{COMMAND_ARGUMENT_COUNT}\n @end table\n \n \n@@ -5915,7 +6003,7 @@ with the @code{IOSTAT_END} parameter of the intrinsic module\n @code{ISO_FORTRAN_ENV}.\n \n @item @emph{Standard}:\n-Fortran 2003.\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -5960,7 +6048,7 @@ variable with the @code{IOSTAT_EOR} parameter of the intrinsic module\n @code{ISO_FORTRAN_ENV}.\n \n @item @emph{Standard}:\n-Fortran 2003.\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6405,26 +6493,27 @@ The return value is of type @code{INTEGER} and of kind @var{KIND}. If\n \n \n \n-@node LGAMMA\n-@section @code{LGAMMA} --- Logarithm of the Gamma function\n-@fnindex GAMMA\n+@node LOG_GAMMA\n+@section @code{LOG_GAMMA} --- Logarithm of the Gamma function\n+@fnindex LOG_GAMMA\n+@fnindex LGAMMA\n @fnindex ALGAMA\n @fnindex DLGAMA\n @cindex Gamma function, logarithm of\n \n @table @asis\n @item @emph{Description}:\n-@code{GAMMA(X)} computes the natural logarithm of the absolute value of the\n-Gamma (@math{\\Gamma}) function.\n+@code{LOG_GAMMA(X)} computes the natural logarithm of the absolute value\n+of the Gamma (@math{\\Gamma}) function.\n \n @item @emph{Standard}:\n-GNU Extension\n+Fortran 2008 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n-@code{X = LGAMMA(X)}\n+@code{X = LOG_GAMMA(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -7840,7 +7929,7 @@ end program\n @var{DEST}.  @var{SRC} will become deallocated in the process.\n \n @item @emph{Standard}:\n-F2003 and later\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -7972,7 +8061,7 @@ end program test_nearest\n @code{NEW_LINE(C)} returns the new-line character.\n \n @item @emph{Standard}:\n-F2003 and later\n+Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -8103,8 +8192,8 @@ Returns a disassociated pointer.\n If @var{MOLD} is present, a dissassociated pointer of the same type is\n returned, otherwise the type is determined by context.\n \n-In Fortran 95, @var{MOLD} is optional. Please note that F2003 includes\n-cases where it is required.\n+In Fortran 95, @var{MOLD} is optional. Please note that Fortran 2003\n+includes cases where it is required.\n \n @item @emph{Standard}:\n F95 and later\n@@ -10892,7 +10981,7 @@ F95 elemental function: @ref{IEOR}\n @section @code{ISO_FORTRAN_ENV}\n @table @asis\n @item @emph{Standard}:\n-Fortran 2003\n+Fortran 2003 and later\n @end table\n \n The @code{ISO_FORTRAN_ENV} module provides the following scalar default-integer\n@@ -10932,7 +11021,7 @@ Identifies the preconnected unit identified by the asterisk\n @section @code{ISO_C_BINDING}\n @table @asis\n @item @emph{Standard}:\n-Fortran 2003\n+Fortran 2003 and later\n @end table\n \n The following intrinsic procedures are provided by the module; their"}, {"sha": "64e50701d542e191732c59f90785b0620703b93b", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -281,7 +281,7 @@ lines in the source file. The default value is 132.\n @item -fmax-identifier-length=@var{n}\n @opindex @code{fmax-identifier-length=}@var{n}\n Specify the maximum allowed identifier length. Typical values are\n-31 (Fortran 95) and 63 (Fortran 2003).\n+31 (Fortran 95) and 63 (Fortran 2003 and Fortran 2008).\n \n @item -fimplicit-none\n @opindex @code{fimplicit-none}\n@@ -322,18 +322,18 @@ on most systems, but with @option{-fno-range-check} the value will\n @item -std=@var{std}\n @opindex @code{std=}@var{std} option\n Specify the standard to which the program is expected to conform, which\n-may be one of @samp{f95}, @samp{f2003}, @samp{gnu}, or @samp{legacy}.\n-The default value for @var{std} is @samp{gnu}, which specifies a\n-superset of the Fortran 95 standard that includes all of the extensions\n-supported by GNU Fortran, although warnings will be given for obsolete\n-extensions not recommended for use in new code.  The @samp{legacy} value\n-is equivalent but without the warnings for obsolete extensions, and may\n-be useful for old non-standard programs.  The @samp{f95} and\n-@samp{f2003} values specify strict conformance to the Fortran 95 and\n-Fortran 2003 standards, respectively; errors are given for all\n-extensions beyond the relevant language standard, and warnings are given\n-for the Fortran 77 features that are permitted but obsolescent in later\n-standards.\n+may be one of @samp{f95}, @samp{f2003}, @samp{f2008}, @samp{gnu}, or\n+@samp{legacy}.  The default value for @var{std} is @samp{gnu}, which\n+specifies a superset of the Fortran 95 standard that includes all of the\n+extensions supported by GNU Fortran, although warnings will be given for\n+obsolete extensions not recommended for use in new code.  The\n+@samp{legacy} value is equivalent but without the warnings for obsolete\n+extensions, and may be useful for old non-standard programs.  The\n+@samp{f95}, @samp{f2003} and @samp{f2008} values specify strict\n+conformance to the Fortran 95, Fortran 2003 and Fortran 2008 standards,\n+respectively; errors are given for all extensions beyond the relevant\n+language standard, and warnings are given for the Fortran 77 features\n+that are permitted but obsolescent in later standards.\n \n @end table\n \n@@ -400,8 +400,8 @@ They soon find that it does not do quite what they want---it finds some\n nonstandard practices, but not all.\n However, improvements to GNU Fortran in this area are welcome.\n \n-This should be used in conjunction with @option{-std=f95} or\n-@option{-std=f2003}.\n+This should be used in conjunction with @option{-std=f95},\n+@option{-std=f2003} or @option{-std=f2008}.\n \n @item -pedantic-errors\n @opindex @code{pedantic-errors}\n@@ -445,10 +445,11 @@ The following example will trigger the warning.\n @cindex warnings, ampersand\n @cindex &\n Warn about missing ampersand in continued character constants. The warning is\n-given with @option{-Wampersand}, @option{-pedantic}, @option{-std=f95}, and\n-@option{-std=f2003}. Note: With no ampersand given in a continued character\n-constant, GNU Fortran assumes continuation at the first non-comment,\n-non-whitespace character after the ampersand that initiated the continuation.\n+given with @option{-Wampersand}, @option{-pedantic}, @option{-std=f95},\n+@option{-std=f2003} and @option{-std=f2008}. Note: With no ampersand\n+given in a continued character constant, GNU Fortran assumes continuation\n+at the first non-comment, non-whitespace character after the ampersand\n+that initiated the continuation.\n \n @item -Wcharacter-truncation\n @opindex @code{Wcharacter-truncation}\n@@ -503,7 +504,7 @@ of the Fortran Character Set.  For continuation lines, a tab followed\n by a digit between 1 and 9 is supported.  @option{-Wno-tabs} will cause\n a warning to be issued if a tab is encountered. Note, @option{-Wno-tabs}\n is active for @option{-pedantic}, @option{-std=f95}, @option{-std=f2003},\n-and @option{-Wall}.\n+@option{-std=f2008} and @option{-Wall}.\n \n @item -Wunderflow\n @opindex @code{Wunderflow}"}, {"sha": "bdb6928c4a5d882f3811fef12cf45a331ba59a85", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -879,6 +879,14 @@ gfc_resolve_hostnm (gfc_expr *f, gfc_expr *n ATTRIBUTE_UNUSED)\n }\n \n \n+void\n+gfc_resolve_hypot (gfc_expr *f, gfc_expr *x, gfc_expr *y ATTRIBUTE_UNUSED)\n+{\n+  f->ts = x->ts;\n+  f->value.function.name = gfc_get_string (\"__hypot_r%d\", x->ts.kind);\n+}\n+\n+\n void\n gfc_resolve_iand (gfc_expr *f, gfc_expr *i, gfc_expr *j)\n {"}, {"sha": "e5c54ae00118d2fb8714fe657c96137841cb45ed", "filename": "gcc/fortran/lang-specs.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang-specs.h?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -34,6 +34,7 @@\n {\".F90\", \"@f95-cpp-input\", 0, 0, 0},\n {\".F95\", \"@f95-cpp-input\", 0, 0, 0},\n {\".F03\", \"@f95-cpp-input\", 0, 0, 0},\n+{\".F08\", \"@f95-cpp-input\", 0, 0, 0},\n {\"@f95-cpp-input\",\n   \"cc1 -E -lang-fortran -traditional-cpp -D_LANGUAGE_FORTRAN %(cpp_options) \\\n       %{E|M|MM:%(cpp_debug_options)}\\\n@@ -43,6 +44,7 @@\n {\".f90\", \"@f95\", 0, 0, 0},\n {\".f95\", \"@f95\", 0, 0, 0},\n {\".f03\", \"@f95\", 0, 0, 0},\n+{\".f08\", \"@f95\", 0, 0, 0},\n {\"@f95\", \"%{!E:f951 %i %(cc1_options) %{J*} %{I*}\\\n          %{!nostdinc:-fintrinsic-modules-path finclude%s} %{!fsyntax-only:%(invoke_as)}}\", 0, 0, 0},\n {\".f\",   \"@f77\", 0, 0, 0},"}, {"sha": "a3761925f0107a73402f786e3f0b76abb1d1f0d8", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -297,6 +297,10 @@ std=f2003\n Fortran\n Conform to the ISO Fortran 2003 standard\n \n+std=f2008\n+Fortran\n+Conform to the ISO Fortran 2008 standard\n+\n std=f95\n Fortran\n Conform to the ISO Fortran 95 standard"}, {"sha": "513dbd228ab23ce9d76819682605d4f23ce589af", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -20,6 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Flags to specify which standard/extension contains a feature.\n    Note that no features were obsoleted nor deleted in F2003.  */\n+#define GFC_STD_F2008\t(1<<7)\t/* New in F2008.  */\n #define GFC_STD_LEGACY\t(1<<6)\t/* Backward compatibility.  */\n #define GFC_STD_GNU\t(1<<5)\t/* GNU Fortran extension.  */\n #define GFC_STD_F2003\t(1<<4)\t/* New in F2003.  */"}, {"sha": "6db416ef6d0d7a4b9ecf153753b2e40ebbe8d26a", "filename": "gcc/fortran/mathbuiltins.def", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fmathbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fmathbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmathbuiltins.def?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -6,11 +6,11 @@\n    Use DEFINE_MATH_BUILTIN_C if the complex versions of the builtin are\n    also available.  */\n DEFINE_MATH_BUILTIN_C (ACOS,  \"acos\",   0)\n-DEFINE_MATH_BUILTIN   (ACOSH, \"acosh\",  0)\n+DEFINE_MATH_BUILTIN_C (ACOSH, \"acosh\",  0)\n DEFINE_MATH_BUILTIN_C (ASIN,  \"asin\",   0)\n-DEFINE_MATH_BUILTIN   (ASINH, \"asinh\",  0)\n+DEFINE_MATH_BUILTIN_C (ASINH, \"asinh\",  0)\n DEFINE_MATH_BUILTIN_C (ATAN,  \"atan\",   0)\n-DEFINE_MATH_BUILTIN   (ATANH, \"atanh\",  0)\n+DEFINE_MATH_BUILTIN_C (ATANH, \"atanh\",  0)\n DEFINE_MATH_BUILTIN   (ATAN2, \"atan2\",  1)\n DEFINE_MATH_BUILTIN_C (COS,   \"cos\",    0)\n DEFINE_MATH_BUILTIN_C (COSH,  \"cosh\",   0)\n@@ -32,3 +32,4 @@ DEFINE_MATH_BUILTIN   (ERF,   \"erf\",    0)\n DEFINE_MATH_BUILTIN   (ERFC,  \"erfc\",   0)\n DEFINE_MATH_BUILTIN   (GAMMA, \"tgamma\", 0)\n DEFINE_MATH_BUILTIN   (LGAMMA,\"lgamma\", 0)\n+DEFINE_MATH_BUILTIN   (HYPOT, \"hypot\",  1)"}, {"sha": "61481b3a9d0fda362782020ce63f76e8ef9ca42d", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -42,8 +42,8 @@ static void\n set_default_std_flags (void)\n {\n   gfc_option.allow_std = GFC_STD_F95_OBS | GFC_STD_F95_DEL\n-    | GFC_STD_F2003 | GFC_STD_F95 | GFC_STD_F77 | GFC_STD_GNU\n-    | GFC_STD_LEGACY;\n+    | GFC_STD_F2003 | GFC_STD_F2008 | GFC_STD_F95 | GFC_STD_F77\n+    | GFC_STD_GNU | GFC_STD_LEGACY;\n   gfc_option.warn_std = GFC_STD_F95_DEL | GFC_STD_LEGACY;\n }\n \n@@ -155,6 +155,9 @@ form_from_filename (const char *filename)\n     \".f03\", FORM_FREE}\n     ,\n     {\n+    \".f08\", FORM_FREE}\n+    ,\n+    {\n     \".f\", FORM_FIXED}\n     ,\n     {\n@@ -752,6 +755,17 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.warn_tabs = 0;\n       break;\n \n+    case OPT_std_f2008:\n+      gfc_option.allow_std = GFC_STD_F95_OBS | GFC_STD_F77 \n+\t| GFC_STD_F2003 | GFC_STD_F95 | GFC_STD_F2008;\n+      gfc_option.warn_std = GFC_STD_F95_OBS;\n+      gfc_option.max_continue_fixed = 255;\n+      gfc_option.max_continue_free = 255;\n+      gfc_option.max_identifier_length = 63;\n+      gfc_option.warn_ampersand = 1;\n+      gfc_option.warn_tabs = 0;\n+      break;\n+\n     case OPT_std_gnu:\n       set_default_std_flags ();\n       break;"}, {"sha": "ff1d56548c8f504bfb8501c670af1fdb977ae738", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -3197,8 +3197,7 @@ parse_contained (int module)\n \n   pop_state ();\n   if (!contains_statements)\n-    /* This is valid in Fortran 2008.  */\n-    gfc_notify_std (GFC_STD_GNU, \"Extension: CONTAINS statement without \"\n+    gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: CONTAINS statement without \"\n \t\t    \"FUNCTION or SUBROUTINE statement at %C\");\n }\n "}, {"sha": "a8277ac704606aa1f2aa540572f097867fa5adb8", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -1280,6 +1280,21 @@ gfc_simplify_huge (gfc_expr *e)\n   return result;\n }\n \n+\n+gfc_expr *\n+gfc_simplify_hypot (gfc_expr *x, gfc_expr *y)\n+{\n+  gfc_expr *result;\n+\n+  if (x->expr_type != EXPR_CONSTANT || y->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n+  mpfr_hypot (result->value.real, x->value.real, y->value.real, GFC_RND_MODE);\n+  return range_check (result, \"HYPOT\");\n+}\n+\n+\n /* We use the processor's collating sequence, because all\n    systems that gfortran currently works on are ASCII.  */\n "}, {"sha": "066b18ea8c2c0f390d6217f173e9ced9ef850915", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -104,17 +104,25 @@ gfc_intrinsic_map_t;\n     true, true, NAME, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, \\\n     NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE},\n \n+#define LIB_FUNCTION(ID, NAME, HAVE_COMPLEX) \\\n+  { GFC_ISYM_ ## ID, END_BUILTINS, END_BUILTINS, END_BUILTINS, END_BUILTINS, \\\n+    END_BUILTINS, END_BUILTINS, END_BUILTINS, END_BUILTINS, \\\n+    false, HAVE_COMPLEX, true, NAME, NULL_TREE, NULL_TREE, NULL_TREE, \\\n+    NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE }\n+\n static GTY(()) gfc_intrinsic_map_t gfc_intrinsic_map[] =\n {\n   /* Functions built into gcc itself.  */\n #include \"mathbuiltins.def\"\n \n+  /* Functions in libgfortran.  */\n+  LIB_FUNCTION (ERFC_SCALED, \"erfc_scaled\", false),\n+\n   /* End the list.  */\n-  { GFC_ISYM_NONE, END_BUILTINS, END_BUILTINS, END_BUILTINS, END_BUILTINS,\n-    END_BUILTINS, END_BUILTINS, END_BUILTINS, END_BUILTINS,\n-    true, false, true, NULL, NULL_TREE, NULL_TREE, NULL_TREE,\n-    NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE }\n+  LIB_FUNCTION (NONE, NULL, false)\n+\n };\n+#undef LIB_FUNCTION\n #undef DEFINE_MATH_BUILTIN\n #undef DEFINE_MATH_BUILTIN_C\n "}, {"sha": "1bd3d91a4681402ed79c3ee85e7fc91ca27f1938", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -1,3 +1,29 @@\n+2008-03-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33197\n+\t* gfortran.dg/gomp/gomp.exp: Add .f08 and .F08 file suffixes.\n+\t* gfortran.dg/dg.exp: Likewise.\n+\t* gfortran.dg/vect/vect.exp: Likewise.\n+\t* gfortran.fortran-torture/execute/execute.exp: Likewise.\n+\t* gfortran.fortran-torture/compile/compile.exp: Likewise.\n+\t* gfortran.dg/gamma_1.f90: Also check log_gamma.\n+\t* gfortran.dg/invalid_contains_1.f90: Remove warning about\n+\tempty CONTAINS.\n+\t* gfortran.dg/gamma_2.f90: Add a few error messages.\n+\t* gfortran.dg/invalid_contains_2.f90: Remove warning about\n+\tempty CONTAINS.\n+\t* gfortran.dg/gamma_3.f90: Adjust error message.\n+\t* gfortran.dg/gamma_4.f90: Test for log_gamma instead of lgamma.\n+\t* gfortran.dg/bind_c_usage_9.f03: Adjust error messages.\n+\t* gfortran.dg/bessel_1.f90: New test.\n+\t* gfortran.dg/recursive_check_3.f90: Remove warnings.\n+\t* gfortran.dg/besxy.f90: Also check for new F2008 intrinsics.\n+\t* gfortran.dg/derived_function_interface_1.f90: Remove warning.\n+\t* gfortran.dg/contains_empty_1.f03: New test.\n+\t* gfortran.dg/erfc_scaled_1.f90: New test.\n+\t* gfortran.dg/hypot_1.f90: New test.\n+\t* gfortran.dg/contains_empty_2.f03: New test.\n+\n 2007-03-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/builtin-apply-mmx.c: Do not XFAIL on Darwin."}, {"sha": "728c5ce49caa8d88b702cea787a8fe0982c9c414", "filename": "gcc/testsuite/gfortran.dg/bessel_1.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_1.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+\n+program test\n+  implicit none\n+\n+  interface check\n+    procedure check_r4\n+    procedure check_r8\n+  end interface check\n+\n+  real(kind=4) :: x4\n+  real(kind=8) :: x8\n+\n+  x8 = 1.9_8 ; x4 = 1.9_4\n+  call check(bessel_j0 (x8), bessel_j0 (1.9_8))\n+  call check(bessel_j0 (x4), bessel_j0 (1.9_4))\n+  call check(bessel_j1 (x8), bessel_j1 (1.9_8))\n+  call check(bessel_j1 (x4), bessel_j1 (1.9_4))\n+  call check(bessel_jn (3,x8), bessel_jn (3,1.9_8))\n+  call check(bessel_jn (3,x4), bessel_jn (3,1.9_4))\n+  call check(bessel_y0 (x8), bessel_y0 (1.9_8))\n+  call check(bessel_y0 (x4), bessel_y0 (1.9_4))\n+  call check(bessel_y1 (x8), bessel_y1 (1.9_8))\n+  call check(bessel_y1 (x4), bessel_y1 (1.9_4))\n+  call check(bessel_yn (3,x8), bessel_yn (3,1.9_8))\n+  call check(bessel_yn (3,x4), bessel_yn (3,1.9_4))\n+\n+contains\n+  subroutine check_r4 (a, b)\n+    real(kind=4), intent(in) :: a, b\n+    if (abs(a - b) > 1.e-5 * abs(b)) call abort\n+  end subroutine\n+  subroutine check_r8 (a, b)\n+    real(kind=8), intent(in) :: a, b\n+    if (abs(a - b) > 1.e-7 * abs(b)) call abort\n+  end subroutine\n+end program test"}, {"sha": "5cd5c8a96c79fdda3a6a412fe7050565ee0559ff", "filename": "gcc/testsuite/gfortran.dg/besxy.f90", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fbesxy.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fbesxy.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbesxy.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -21,4 +21,21 @@ PROGRAM test_erf\n   ra = BESY0(ra)\n   ra = BESY1(ra)\n   ra = BESYN(0, ra)\n-END PROGRAM\n\\ No newline at end of file\n+\n+  r  = BESSEL_J0(r)\n+  r  = BESSEL_J1(r)\n+  r  = BESSEL_JN(0, r)\n+\n+  r  = BESSEL_Y0(r)\n+  r  = BESSEL_Y1(r)\n+  r  = BESSEL_YN(0, r)\n+\n+  ra = BESSEL_J0(ra)\n+  ra = BESSEL_J1(ra)\n+  ra = BESSEL_JN(0, ra)\n+\n+  ra = BESSEL_Y0(ra)\n+  ra = BESSEL_Y1(ra)\n+  ra = BESSEL_YN(0, ra)\n+\n+END PROGRAM"}, {"sha": "086a1166a169971d6513bd55b989a911a706e8e5", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_9.f03", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_9.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_9.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_9.f03?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -9,14 +9,14 @@ subroutine foo() bind(c)\n contains\n   subroutine bar() bind (c) ! { dg-error \"may not be specified for an internal\" }\n   end subroutine bar ! { dg-error \"Expected label\" }\n-end subroutine foo ! { dg-warning \"Extension: CONTAINS statement\" }\n+end subroutine foo ! { dg-error \"Fortran 2008: CONTAINS statement\" }\n \n subroutine foo2() bind(c)\n   use iso_c_binding\n contains\n   integer(c_int) function barbar() bind (c) ! { dg-error \"may not be specified for an internal\" }\n   end function barbar ! { dg-error \"Expecting END SUBROUTINE\" }\n-end subroutine foo2 ! { dg-warning \"Extension: CONTAINS statement\" }\n+end subroutine foo2 ! { dg-error \"Fortran 2008: CONTAINS statement\" }\n \n function one() bind(c)\n   use iso_c_binding\n@@ -25,7 +25,7 @@ function one() bind(c)\n contains\n   integer(c_int) function two() bind (c) ! { dg-error \"may not be specified for an internal\" }\n   end function two ! { dg-error \"Expected label\" }\n-end function one ! { dg-warning \"Extension: CONTAINS statement\" }\n+end function one ! { dg-error \"Fortran 2008: CONTAINS statement\" }\n \n function one2() bind(c)\n   use iso_c_binding\n@@ -34,7 +34,7 @@ function one2() bind(c)\n contains\n   subroutine three() bind (c) ! { dg-error \"may not be specified for an internal\" }\n   end subroutine three ! { dg-error \"Expecting END FUNCTION statement\" }\n-end function one2 ! { dg-warning \"Extension: CONTAINS statement\" }\n+end function one2 ! { dg-error \"Fortran 2008: CONTAINS statement\" }\n \n program main\n   use iso_c_binding\n@@ -44,4 +44,4 @@ subroutine test() bind(c) ! { dg-error \"may not be specified for an internal\" }\n   end subroutine test ! { dg-error \"Expecting END PROGRAM\" }\n   integer(c_int) function test2() bind (c) ! { dg-error \"may not be specified for an internal\" }\n   end function test2  ! { dg-error \"Expecting END PROGRAM\" }\n-end program main ! { dg-warning \"Extension: CONTAINS statement\" }\n+end program main ! { dg-error \"Fortran 2008: CONTAINS statement\" }"}, {"sha": "51b5dd90b161d1d76357923a31e7d7c5797e12cf", "filename": "gcc/testsuite/gfortran.dg/contains_empty_1.f03", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontains_empty_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontains_empty_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontains_empty_1.f03?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003 -pedantic\" }\n+program test\n+  print *, 'hello there'\n+contains\n+end program test ! { dg-error \"Fortran 2008: CONTAINS statement without\" }\n+\n+module truc\n+  integer, parameter :: answer = 42\n+contains\n+end module truc ! { dg-error \"Fortran 2008: CONTAINS statement without\" }"}, {"sha": "62e18f43d14e5a96db7d9bad3e863e503eeb43f1", "filename": "gcc/testsuite/gfortran.dg/contains_empty_2.f03", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontains_empty_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontains_empty_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontains_empty_2.f03?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008 -pedantic\" }\n+\n+program test\n+  print *, 'hello there'\n+contains\n+end program test\n+\n+module truc\n+  integer, parameter :: answer = 42\n+contains\n+end module truc\n+\n+! { dg-final { cleanup-modules \"truc\" } }"}, {"sha": "b7ee4df89a7014577ebd3d48201f58a660719fb3", "filename": "gcc/testsuite/gfortran.dg/derived_function_interface_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_function_interface_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_function_interface_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_function_interface_1.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -41,5 +41,5 @@ end function ext_fun\n   type(foo) function fun() ! { dg-error \"already has an explicit interface\" }\n   end function fun  ! { dg-error \"Expecting END PROGRAM\" }\n \n-end ! { dg-warning \"CONTAINS statement without FUNCTION or SUBROUTINE statement\" }\n+end\n ! { dg-final { cleanup-modules \"kinds\" } }"}, {"sha": "2ccdfd0be4500733267bff0e6ccd88697b111c08", "filename": "gcc/testsuite/gfortran.dg/dg.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdg.exp?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -30,7 +30,7 @@ dg-init\n \n # Main loop.\n gfortran-dg-runtest [lsort \\\n-       [glob -nocomplain $srcdir/$subdir/*.\\[fF\\]{,90,95,03} ] ] $DEFAULT_FFLAGS\n+       [glob -nocomplain $srcdir/$subdir/*.\\[fF\\]{,90,95,03,08} ] ] $DEFAULT_FFLAGS\n \n gfortran-dg-runtest [lsort \\\n        [glob -nocomplain $srcdir/$subdir/g77/*.\\[fF\\] ] ] $DEFAULT_FFLAGS"}, {"sha": "8a114e60ef9d91290a268acc0584bca763febfca", "filename": "gcc/testsuite/gfortran.dg/erfc_scaled_1.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Ferfc_scaled_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Ferfc_scaled_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ferfc_scaled_1.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+\n+program test\n+  implicit none\n+\n+  interface check\n+    procedure check_r4\n+    procedure check_r8\n+  end interface check\n+\n+  real(kind=4) :: x4\n+  real(kind=8) :: x8\n+\n+  x8 = 1.9_8 ; x4 = 1.9_4\n+\n+  call check(erfc_scaled(x8), erfc_scaled(1.9_8))\n+  call check(erfc_scaled(x4), erfc_scaled(1.9_4))\n+\n+contains\n+  subroutine check_r4 (a, b)\n+    real(kind=4), intent(in) :: a, b\n+    if (abs(a - b) > 1.e-5 * abs(b)) call abort\n+  end subroutine\n+  subroutine check_r8 (a, b)\n+    real(kind=8), intent(in) :: a, b\n+    if (abs(a - b) > 1.e-7 * abs(b)) call abort\n+  end subroutine\n+end program test"}, {"sha": "9946166952a8f286470b60abb8b52ca31a30bbf4", "filename": "gcc/testsuite/gfortran.dg/gamma_1.f90", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_1.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -8,7 +8,7 @@\n !\n program gamma_test\n implicit none\n-intrinsic :: gamma, lgamma\n+intrinsic :: gamma, lgamma, log_gamma\n integer, parameter :: sp = kind(1.0)\n integer, parameter :: dp = kind(1.0d0)\n \n@@ -21,6 +21,8 @@ program gamma_test\n \n if (abs(lgamma(1.0_sp)) > tiny(1.0_sp)) call abort()\n if (abs(lgamma(1.0_dp)) > tiny(1.0_dp)) call abort()\n+if (abs(log_gamma(1.0_sp)) > tiny(1.0_sp)) call abort()\n+if (abs(log_gamma(1.0_dp)) > tiny(1.0_dp)) call abort()\n if (abs(algama(1.0_sp)) > tiny(1.0_sp)) call abort()\n if (abs(dlgama(1.0_dp)) > tiny(1.0_dp)) call abort()\n end program gamma_test"}, {"sha": "6e8cefa6858d95ddc2a7c05f7c0da5a7d9a8eb03", "filename": "gcc/testsuite/gfortran.dg/gamma_2.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_2.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -20,12 +20,12 @@ subroutine foo()\n real(sp) :: rsp = 1.0_sp\n real(dp) :: rdp = 1.0_dp\n \n-rsp = gamma(rsp)  ! FIXME:  \"is not included in the selected standard\"\n-rdp = gamma(rdp)  ! FIXME:  \"is not included in the selected standard\"\n+rsp = gamma(rsp)  ! FIXME \"is not included in the selected standard\"\n+rdp = gamma(rdp)  ! FIXME \"is not included in the selected standard\"\n rdp = dgamma(rdp) ! { dg-error \"is not included in the selected standard\" }\n \n-rsp = lgamma(rsp) ! FIXME:  \"is not included in the selected standard\"\n-rdp = lgamma(rdp) ! FIXME:  \"is not included in the selected standard\"\n+rsp = lgamma(rsp) ! { dg-error \"is not included in the selected standard\" }\n+rdp = lgamma(rdp) ! { dg-error \"is not included in the selected standard\" }\n rsp = algama(rsp) ! { dg-error \"is not included in the selected standard\" }\n rdp = dlgama(rdp) ! { dg-error \"is not included in the selected standard\" }\n end subroutine foo"}, {"sha": "ca3d30db983205a1b38b1a41b099302e9957b9b5", "filename": "gcc/testsuite/gfortran.dg/gamma_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_3.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -16,11 +16,11 @@ program gamma_test\n x = gamma(int(1))                    ! { dg-error \"is not consistent with a specific intrinsic interface\" }\n x = dgamma(int(1))                   ! { dg-error \"must be REAL\" }\n \n-x = lgamma(cmplx(1.0,0.0))           ! { dg-error \"is not consistent with a specific intrinsic interface\" }\n+x = lgamma(cmplx(1.0,0.0))           ! { dg-error \"must be REAL\" }\n x = algama(cmplx(1.0,0.0))           ! { dg-error \"must be REAL\" }\n x = dlgama(cmplx(1.0,0.0,kind(0d0))) ! { dg-error \"must be REAL\" }\n \n-x = lgamma(int(1))                   ! { dg-error \"is not consistent with a specific intrinsic interface\" }\n+x = lgamma(int(1))                   ! { dg-error \"must be REAL\" }\n x = algama(int(1))                   ! { dg-error \"must be REAL\" }\n x = dlgama(int(1))                   ! { dg-error \"must be REAL\" }\n end program gamma_test"}, {"sha": "67e9e2314a1eaece3048a01656e24786ae6d709a", "filename": "gcc/testsuite/gfortran.dg/gamma_4.f90", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_4.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -1,20 +1,18 @@\n ! { dg-do run }\n ! { dg-require-effective-target fortran_large_real }\n !\n-! Test the vendor intrinsic (d)gamma, lgamma and algama/dlgama\n-! gamma is also part of the Fortran 2008 draft; lgamma is called\n-! log_gamma in the Fortran 2008 draft.\n+! Test the Fortran 2008 intrinsics gamma and log_gamma\n !\n ! PR fortran/32980\n !\n program gamma_test\n implicit none\n-intrinsic :: gamma, lgamma\n+intrinsic :: gamma, log_gamma\n integer, parameter :: qp = selected_real_kind(precision (0.0_8) + 1)\n \n real(qp) :: rqp\n \n if (abs(gamma(1.0_qp)  - 1.0_qp) > tiny(1.0_qp)) call abort()\n-if (abs(lgamma(1.0_qp)) > tiny(1.0_qp)) call abort()\n+if (abs(log_gamma(1.0_qp)) > tiny(1.0_qp)) call abort()\n end program gamma_test\n "}, {"sha": "34ae1466ed0346b524bf3d7e740e5d7189b748d7", "filename": "gcc/testsuite/gfortran.dg/gomp/gomp.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fgomp.exp?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -12,7 +12,7 @@ dg-init\n \n # Main loop.\n gfortran-dg-runtest [lsort \\\n-       [find $srcdir/$subdir *.\\[fF\\]{,90,95,03} ] ] \" -fopenmp\"\n+       [find $srcdir/$subdir *.\\[fF\\]{,90,95,03,08} ] ] \" -fopenmp\"\n \n # All done.\n dg-finish"}, {"sha": "59022fab93ca23150555d3e5ca882eded7add29b", "filename": "gcc/testsuite/gfortran.dg/hypot_1.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhypot_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fhypot_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhypot_1.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+\n+program test\n+  implicit none\n+\n+  interface check\n+    procedure check_r4\n+    procedure check_r8\n+  end interface check\n+\n+  real(kind=4) :: x4, y4\n+  real(kind=8) :: x8, y8\n+\n+  x8 = 1.9_8 ; x4 = 1.9_4\n+  y8 = -2.1_8 ; y4 = -2.1_4\n+\n+  call check(hypot(x8,y8), hypot(1.9_8,-2.1_8))\n+  call check(hypot(x4,y4), hypot(1.9_4,-2.1_4))\n+\n+contains\n+  subroutine check_r4 (a, b)\n+    real(kind=4), intent(in) :: a, b\n+    if (abs(a - b) > 1.e-5 * abs(b)) call abort\n+  end subroutine\n+  subroutine check_r8 (a, b)\n+    real(kind=8), intent(in) :: a, b\n+    if (abs(a - b) > 1.e-7 * abs(b)) call abort\n+  end subroutine\n+end program test"}, {"sha": "df4bb3fef2d64c68d74eb61c7bc57c48f968de6c", "filename": "gcc/testsuite/gfortran.dg/invalid_contains_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Finvalid_contains_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Finvalid_contains_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finvalid_contains_1.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -5,4 +5,4 @@ module FOO\n   subroutine FOO ! { dg-error \"conflicts with PROCEDURE\" }\n     character(len=selected_int_kind(0)) :: C ! { dg-error \"data declaration statement\" }\n   end subroutine ! { dg-error \"Expecting END MODULE statement\" }\n-end ! { dg-warning \"CONTAINS statement without FUNCTION\" }\n\\ No newline at end of file\n+end"}, {"sha": "72c1e216f0717f7c5423dba49098cafcc373460c", "filename": "gcc/testsuite/gfortran.dg/invalid_contains_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Finvalid_contains_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Finvalid_contains_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finvalid_contains_2.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -6,4 +6,4 @@ subroutine foo(i) ! { dg-error \"conflicts with PROCEDURE\" }\n     integer :: i ! { dg-error \"data declaration statement\" }\n     character(len=selected_int_kind(i)) :: c ! { dg-error \"data declaration statement\" }\n   end subroutine ! { dg-error \"Expecting END PROGRAM statement\" }\n-end program foo ! { dg-warning \"CONTAINS statement without FUNCTION\" }\n+end program foo"}, {"sha": "ec358cb12c055a64d1fe0b99b6048e14073bf598", "filename": "gcc/testsuite/gfortran.dg/recursive_check_3.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_check_3.f90?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -5,18 +5,18 @@ module m1\n pure pure subroutine a1(b) ! { dg-error \"Duplicate PURE attribute specified\" }\n   real, intent(in) :: b    ! { dg-error \"Unexpected data declaration statement\" }\n end subroutine a1          ! { dg-error \"Expecting END MODULE\" }\n-end module m1 ! { dg-warning \"CONTAINS statement without FUNCTION\" }\n+end module m1\n \n module m2\n contains\n elemental elemental subroutine a2(b) ! { dg-error \"Duplicate ELEMENTAL attribute\" }\n   real, intent(in) :: b    ! { dg-error \"Unexpected data declaration statement\" }\n end subroutine a2          ! { dg-error \"Expecting END MODULE\" }\n-end module m2 ! { dg-warning \"CONTAINS statement without FUNCTION\" }\n+end module m2\n \n module m3\n contains\n recursive recursive subroutine a3(b) ! { dg-error \"Duplicate RECURSIVE attribute\" }\n   real, intent(in) :: b    ! { dg-error \"Unexpected data declaration statement\" }\n end subroutine a3          ! { dg-error \"Expecting END MODULE\" }\n-end module m3 ! { dg-warning \"CONTAINS statement without FUNCTION\" }\n+end module m3"}, {"sha": "9f91434a702a92355adf810667de20929a80d05d", "filename": "gcc/testsuite/gfortran.dg/vect/vect.exp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -90,8 +90,8 @@ proc check_effective_target_lp64_or_vect_no_align { } {\n dg-init\n \n # Main loop.\n-gfortran-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/vect-*.\\[fF\\]{,90,95,03} ]] $DEFAULT_VECTCFLAGS\n-gfortran-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/pr*.\\[fF\\]{,90,95,03} ]] $DEFAULT_VECTCFLAGS\n+gfortran-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/vect-*.\\[fF\\]{,90,95,03,08} ]] $DEFAULT_VECTCFLAGS\n+gfortran-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/pr*.\\[fF\\]{,90,95,03,08} ]] $DEFAULT_VECTCFLAGS\n \n #### Tests with special options\n global SAVED_DEFAULT_VECTCFLAGS\n@@ -100,19 +100,19 @@ set SAVED_DEFAULT_VECTCFLAGS $DEFAULT_VECTCFLAGS\n # -ffast-math tests\n set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n lappend DEFAULT_VECTCFLAGS \"-ffast-math\"\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/fast-math-*.\\[fF\\]{,90,95,03} ]]  \\\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/fast-math-*.\\[fF\\]{,90,95,03,08} ]]  \\\n         \"\" $DEFAULT_VECTCFLAGS\n \n # -fvect-cost-model tests\n set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n lappend DEFAULT_VECTCFLAGS \"-fvect-cost-model\"\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/cost-model-*.\\[fF\\]{,90,95,03} ]]  \\\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/cost-model-*.\\[fF\\]{,90,95,03,08} ]]  \\\n         \"\" $DEFAULT_VECTCFLAGS\n \n # --param vect-max-version-for-alias-checks=0 tests\n set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n lappend DEFAULT_VECTCFLAGS \"--param\" \"vect-max-version-for-alias-checks=0\"\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/no-vfa-*.\\[fF\\]{,90,95,03} ]]  \\\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/no-vfa-*.\\[fF\\]{,90,95,03,08} ]]  \\\n         \"\" $DEFAULT_VECTCFLAGS\n \n # Clean up."}, {"sha": "d52b730646a586de96e9074b2205732749a8a178", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/compile.exp", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fcompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fcompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fcompile.exp?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -46,16 +46,51 @@ foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.f90]] {\n     fortran-torture $testcase\n }\n \n+foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.F90]] {\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+    fortran-torture $testcase\n+}\n+\n foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.f95]] {\n     if ![runtest_file_p $runtests $testcase] then {\n \tcontinue\n     }\n     fortran-torture $testcase\n }\n \n+foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.F95]] {\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+    fortran-torture $testcase\n+}\n+\n foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.f03]] {\n     if ![runtest_file_p $runtests $testcase] then {\n \tcontinue\n     }\n     fortran-torture $testcase\n }\n+\n+foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.F03]] {\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+    fortran-torture $testcase\n+}\n+\n+foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.f08]] {\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+    fortran-torture $testcase\n+}\n+\n+foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.F08]] {\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+    fortran-torture $testcase\n+}"}, {"sha": "d22372ad0da83ce8f6dfb1e4604bfe7dd757b542", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/execute.exp", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fexecute.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fexecute.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fexecute.exp?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -50,16 +50,51 @@ foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.f90]] {\n     fortran-torture-execute $testcase\n }\n \n+foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.F90]] {\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+    fortran-torture-execute $testcase\n+}\n+\n foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.f95]] {\n     if ![runtest_file_p $runtests $testcase] then {\n \tcontinue\n     }\n     fortran-torture-execute $testcase\n }\n \n+foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.F95]] {\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+    fortran-torture-execute $testcase\n+}\n+\n foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.f03]] {\n     if ![runtest_file_p $runtests $testcase] then {\n \tcontinue\n     }\n     fortran-torture-execute $testcase\n }\n+\n+foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.F03]] {\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+    fortran-torture-execute $testcase\n+}\n+\n+foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.f08]] {\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+    fortran-torture-execute $testcase\n+}\n+\n+foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/*.F08]] {\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+    fortran-torture-execute $testcase\n+}"}, {"sha": "d3ace3f7df7bbcea4884c2099eabc9159c72b082", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -1,3 +1,14 @@\n+2008-03-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33197\n+\t* intrinsics/erfc_scaled_inc.c: New file.\n+\t* intrinsics/erfc_scaled.c: New file.\n+\t* gfortran.map (GFORTRAN_1.0): Add _gfortran_erfc_scaled_r*.\n+\t* Makefile.am: Add intrinsics/erfc_scaled.c.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\n 2008-03-01  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR libfortran/35355\n@@ -13,9 +24,9 @@\n 2008-02-25  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/29549\n-        * Makefile.am: Add -fcx-fortran-rules to AM_CFLAGS for all of\n-        libgfortran.\n-        * Makefile.in: Regenerated.\n+\t* Makefile.am: Add -fcx-fortran-rules to AM_CFLAGS for all of\n+\tlibgfortran.\n+\t* Makefile.in: Regenerated.\n \n 2008-02-25  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n "}, {"sha": "b601f4f3c9a552210f0b15bcbae2a1c90df8f6d9", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -67,6 +67,7 @@ intrinsics/dtime.c \\\n intrinsics/env.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n+intrinsics/erfc_scaled.c \\\n intrinsics/etime.c \\\n intrinsics/exit.c \\\n intrinsics/fnum.c \\"}, {"sha": "92b266e76b2eb7b62f333e4b998976710ad074a0", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -361,10 +361,11 @@ am__libgfortran_la_SOURCES_DIST = runtime/backtrace.c \\\n \tintrinsics/chmod.c intrinsics/clock.c intrinsics/cpu_time.c \\\n \tintrinsics/cshift0.c intrinsics/ctime.c \\\n \tintrinsics/date_and_time.c intrinsics/dtime.c intrinsics/env.c \\\n-\tintrinsics/eoshift0.c intrinsics/eoshift2.c intrinsics/etime.c \\\n-\tintrinsics/exit.c intrinsics/fnum.c intrinsics/gerror.c \\\n-\tintrinsics/getcwd.c intrinsics/getlog.c intrinsics/getXid.c \\\n-\tintrinsics/hostnm.c intrinsics/ierrno.c intrinsics/ishftc.c \\\n+\tintrinsics/eoshift0.c intrinsics/eoshift2.c \\\n+\tintrinsics/erfc_scaled.c intrinsics/etime.c intrinsics/exit.c \\\n+\tintrinsics/fnum.c intrinsics/gerror.c intrinsics/getcwd.c \\\n+\tintrinsics/getlog.c intrinsics/getXid.c intrinsics/hostnm.c \\\n+\tintrinsics/ierrno.c intrinsics/ishftc.c \\\n \tintrinsics/iso_c_generated_procs.c intrinsics/iso_c_binding.c \\\n \tintrinsics/kill.c intrinsics/link.c intrinsics/malloc.c \\\n \tintrinsics/mvbits.c intrinsics/move_alloc.c \\\n@@ -631,16 +632,17 @@ am__objects_31 = close.lo file_pos.lo format.lo inquire.lo \\\n am__objects_32 = associated.lo abort.lo access.lo args.lo \\\n \tc99_functions.lo chdir.lo chmod.lo clock.lo cpu_time.lo \\\n \tcshift0.lo ctime.lo date_and_time.lo dtime.lo env.lo \\\n-\teoshift0.lo eoshift2.lo etime.lo exit.lo fnum.lo gerror.lo \\\n-\tgetcwd.lo getlog.lo getXid.lo hostnm.lo ierrno.lo ishftc.lo \\\n-\tiso_c_generated_procs.lo iso_c_binding.lo kill.lo link.lo \\\n-\tmalloc.lo mvbits.lo move_alloc.lo pack_generic.lo perror.lo \\\n-\tsignal.lo size.lo sleep.lo spread_generic.lo \\\n-\tstring_intrinsics.lo system.lo rand.lo random.lo rename.lo \\\n-\treshape_generic.lo reshape_packed.lo selected_int_kind.lo \\\n-\tselected_real_kind.lo stat.lo symlnk.lo system_clock.lo \\\n-\ttime.lo transpose_generic.lo umask.lo unlink.lo \\\n-\tunpack_generic.lo in_pack_generic.lo in_unpack_generic.lo\n+\teoshift0.lo eoshift2.lo erfc_scaled.lo etime.lo exit.lo \\\n+\tfnum.lo gerror.lo getcwd.lo getlog.lo getXid.lo hostnm.lo \\\n+\tierrno.lo ishftc.lo iso_c_generated_procs.lo iso_c_binding.lo \\\n+\tkill.lo link.lo malloc.lo mvbits.lo move_alloc.lo \\\n+\tpack_generic.lo perror.lo signal.lo size.lo sleep.lo \\\n+\tspread_generic.lo string_intrinsics.lo system.lo rand.lo \\\n+\trandom.lo rename.lo reshape_generic.lo reshape_packed.lo \\\n+\tselected_int_kind.lo selected_real_kind.lo stat.lo symlnk.lo \\\n+\tsystem_clock.lo time.lo transpose_generic.lo umask.lo \\\n+\tunlink.lo unpack_generic.lo in_pack_generic.lo \\\n+\tin_unpack_generic.lo\n am__objects_33 =\n am__objects_34 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n \t_abs_i4.lo _abs_i8.lo _abs_i16.lo _abs_r4.lo _abs_r8.lo \\\n@@ -905,6 +907,7 @@ intrinsics/dtime.c \\\n intrinsics/env.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n+intrinsics/erfc_scaled.c \\\n intrinsics/etime.c \\\n intrinsics/exit.c \\\n intrinsics/fnum.c \\\n@@ -1660,6 +1663,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eoshift3_16.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eoshift3_4.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eoshift3_8.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/erfc_scaled.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/error.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etime.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/exit.Plo@am__quote@\n@@ -4703,6 +4707,13 @@ eoshift2.lo: intrinsics/eoshift2.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o eoshift2.lo `test -f 'intrinsics/eoshift2.c' || echo '$(srcdir)/'`intrinsics/eoshift2.c\n \n+erfc_scaled.lo: intrinsics/erfc_scaled.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT erfc_scaled.lo -MD -MP -MF \"$(DEPDIR)/erfc_scaled.Tpo\" -c -o erfc_scaled.lo `test -f 'intrinsics/erfc_scaled.c' || echo '$(srcdir)/'`intrinsics/erfc_scaled.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/erfc_scaled.Tpo\" \"$(DEPDIR)/erfc_scaled.Plo\"; else rm -f \"$(DEPDIR)/erfc_scaled.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='intrinsics/erfc_scaled.c' object='erfc_scaled.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o erfc_scaled.lo `test -f 'intrinsics/erfc_scaled.c' || echo '$(srcdir)/'`intrinsics/erfc_scaled.c\n+\n etime.lo: intrinsics/etime.c\n @am__fastdepCC_TRUE@\tif $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT etime.lo -MD -MP -MF \"$(DEPDIR)/etime.Tpo\" -c -o etime.lo `test -f 'intrinsics/etime.c' || echo '$(srcdir)/'`intrinsics/etime.c; \\\n @am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/etime.Tpo\" \"$(DEPDIR)/etime.Plo\"; else rm -f \"$(DEPDIR)/etime.Tpo\"; exit 1; fi"}, {"sha": "ddf8dd576205a5e0ba1e87613e0fceaf5465db44", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -805,19 +805,19 @@\n /* Define to the version of this package. */\n #undef PACKAGE_VERSION\n \n-/* The size of a `char', as computed by sizeof. */\n+/* The size of `char', as computed by sizeof. */\n #undef SIZEOF_CHAR\n \n-/* The size of a `int', as computed by sizeof. */\n+/* The size of `int', as computed by sizeof. */\n #undef SIZEOF_INT\n \n-/* The size of a `long', as computed by sizeof. */\n+/* The size of `long', as computed by sizeof. */\n #undef SIZEOF_LONG\n \n-/* The size of a `short', as computed by sizeof. */\n+/* The size of `short', as computed by sizeof. */\n #undef SIZEOF_SHORT\n \n-/* The size of a `void *', as computed by sizeof. */\n+/* The size of `void *', as computed by sizeof. */\n #undef SIZEOF_VOID_P\n \n /* Define to 1 if you have the ANSI C header files. */\n@@ -835,5 +835,5 @@\n /* Define for large files, on AIX-style hosts. */\n #undef _LARGE_FILES\n \n-/* Define to `long' if <sys/types.h> does not define. */\n+/* Define to `long int' if <sys/types.h> does not define. */\n #undef off_t"}, {"sha": "c57cbfd9cce1e6f1496037b5ab5da2276cd2a62d", "filename": "libgfortran/configure", "status": "modified", "additions": 9869, "deletions": 9731, "changes": 19600, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0"}, {"sha": "33aafb668e25802c43f6b1e0ab26348836ac9a85", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -88,6 +88,10 @@ GFORTRAN_1.0 {\n     _gfortran_eoshift3_4_char;\n     _gfortran_eoshift3_8;\n     _gfortran_eoshift3_8_char;\n+    _gfortran_erfc_scaled_r4;\n+    _gfortran_erfc_scaled_r8;\n+    _gfortran_erfc_scaled_r10;\n+    _gfortran_erfc_scaled_r16;\n     _gfortran_etime;\n     _gfortran_etime_sub;\n     _gfortran_exit_i4;"}, {"sha": "d7936c6129129b3b19d244f13af94e720ab20722", "filename": "libgfortran/intrinsics/erfc_scaled.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2Fintrinsics%2Ferfc_scaled.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2Fintrinsics%2Ferfc_scaled.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ferfc_scaled.c?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -0,0 +1,57 @@\n+/* Implementation of the ERFC_SCALED intrinsic.\n+   Copyright (C) 2008 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"libgfortran.h\"\n+\n+/* This implementation of ERFC_SCALED is based on the netlib algorithm\n+   available at http://www.netlib.org/specfun/erf  */\n+\n+#ifdef HAVE_GFC_REAL_4\n+#undef KIND\n+#define KIND 4\n+#include \"erfc_scaled_inc.c\"\n+#endif\n+\n+#ifdef HAVE_GFC_REAL_8\n+#undef KIND\n+#define KIND 8\n+#include \"erfc_scaled_inc.c\"\n+#endif\n+\n+#ifdef HAVE_GFC_REAL_10\n+#undef KIND\n+#define KIND 10\n+#include \"erfc_scaled_inc.c\"\n+#endif\n+\n+#ifdef HAVE_GFC_REAL_16\n+#undef KIND\n+#define KIND 16\n+#include \"erfc_scaled_inc.c\"\n+#endif"}, {"sha": "fab815584cae1f8992999a7bfa256ed1e53295db", "filename": "libgfortran/intrinsics/erfc_scaled_inc.c", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2Fintrinsics%2Ferfc_scaled_inc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgfortran%2Fintrinsics%2Ferfc_scaled_inc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ferfc_scaled_inc.c?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -0,0 +1,175 @@\n+/* Implementation of the ERFC_SCALED intrinsic, to be included by erfc_scaled.c\n+   Copyright (c) 2008 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR a PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+/* This implementation of ERFC_SCALED is based on the netlib algorithm\n+   available at http://www.netlib.org/specfun/erf  */\n+\n+#define TYPE KIND_SUFFIX(GFC_REAL_,KIND)\n+#define CONCAT(x,y) x ## y\n+#define KIND_SUFFIX(x,y) CONCAT(x,y)\n+\n+#if (KIND == 4)\n+# define EXP(x) expf(x)\n+# define TRUNC(x) truncf(x)\n+#elif (KIND == 8)\n+# define EXP(x) exp(x)\n+# define TRUNC(x) trunc(x)\n+#else\n+# define EXP(x) expl(x)\n+# define TRUNC(x) truncl(x)\n+#endif\n+\n+extern TYPE KIND_SUFFIX(erfc_scaled_r,KIND) (TYPE);\n+export_proto(KIND_SUFFIX(erfc_scaled_r,KIND));\n+\n+TYPE\n+KIND_SUFFIX(erfc_scaled_r,KIND) (TYPE x)\n+{\n+  /* The main computation evaluates near-minimax approximations\n+     from \"Rational Chebyshev approximations for the error function\"\n+     by W. J. Cody, Math. Comp., 1969, PP. 631-638.  This\n+     transportable program uses rational functions that theoretically\n+     approximate  erf(x)  and  erfc(x)  to at least 18 significant\n+     decimal digits.  The accuracy achieved depends on the arithmetic\n+     system, the compiler, the intrinsic functions, and proper\n+     selection of the machine-dependent constants.  */\n+\n+  int i;\n+  TYPE del, res, xden, xnum, y, ysq;\n+\n+#if (KIND == 4)\n+  static TYPE xneg = -9.382, xsmall = 5.96e-8,\n+\t      xbig = 9.194, xhuge = 2.90e+3, xmax = 4.79e+37;\n+#else\n+  static TYPE xneg = -26.628, xsmall = 1.11e-16,\n+\t      xbig = 26.543, xhuge = 6.71e+7, xmax = 2.53e+307;\n+#endif\n+\n+#define SQRPI ((TYPE) 0.56418958354775628695L)\n+#define THRESH ((TYPE) 0.46875L)\n+\n+  static TYPE a[5] = { 3.16112374387056560l, 113.864154151050156l,\n+    377.485237685302021l, 3209.37758913846947l, 0.185777706184603153l };\n+\n+  static TYPE b[4] = { 23.6012909523441209l, 244.024637934444173l,\n+    1282.61652607737228l, 2844.23683343917062l };\n+\n+  static TYPE c[9] = { 0.564188496988670089l, 8.88314979438837594l,\n+    66.1191906371416295l, 298.635138197400131l, 881.952221241769090l,\n+    1712.04761263407058l, 2051.07837782607147l, 1230.33935479799725l,\n+    2.15311535474403846e-8l };\n+\n+  static TYPE d[8] = { 15.7449261107098347l, 117.693950891312499l,\n+    537.181101862009858l, 1621.38957456669019l, 3290.79923573345963l,\n+    4362.61909014324716l, 3439.36767414372164l, 1230.33935480374942l };\n+\n+  static TYPE p[6] = { 0.305326634961232344l, 0.360344899949804439l,\n+    0.125781726111229246l, 0.0160837851487422766l,\n+    0.000658749161529837803l, 0.0163153871373020978l };\n+\n+  static TYPE q[5] = { 2.56852019228982242l, 1.87295284992346047l,\n+    0.527905102951428412l, 0.0605183413124413191l,\n+    0.00233520497626869185l };\n+\n+  y = (x > 0 ? x : -x);\n+  if (y <= THRESH)\n+    {\n+      ysq = 0;\n+      if (y > xsmall)\n+\tysq = y * y;\n+      xnum = a[4]*ysq;\n+      xden = ysq;\n+      for (i = 0; i <= 2; i++)\n+\t{\n+          xnum = (xnum + a[i]) * ysq;\n+          xden = (xden + b[i]) * ysq;\n+\t}\n+      res = x * (xnum + a[3]) / (xden + b[3]);\n+      res = 1 - res;\n+      res = EXP(ysq) * res;\n+      return res;\n+    }\n+  else if (y <= 4)\n+    {\n+      xnum = c[8]*y;\n+      xden = y;\n+      for (i = 0; i <= 6; i++)\n+\t{\n+\t  xnum = (xnum + c[i]) * y;\n+\t  xden = (xden + d[i]) * y;\n+\t}\n+      res = (xnum + c[7]) / (xden + d[7]);\n+    }\n+  else\n+    {\n+      res = 0;\n+      if (y >= xbig)\n+\t{\n+          if (y >= xmax)\n+\t    goto finish;\n+          if (y >= xhuge)\n+\t    {\n+\t      res = SQRPI / y;\n+\t      goto finish;\n+\t    }\n+\t}\n+      ysq = ((TYPE) 1) / (y * y);\n+      xnum = p[5]*ysq;\n+      xden = ysq;\n+      for (i = 0; i <= 3; i++)\n+\t{\n+          xnum = (xnum + p[i]) * ysq;\n+          xden = (xden + q[i]) * ysq;\n+\t}\n+      res = ysq *(xnum + p[4]) / (xden + q[4]);\n+      res = (SQRPI -  res) / y;\n+    }\n+\n+finish:\n+  if (x < 0)\n+    {\n+      if (x < xneg)\n+\tres = __builtin_inf ();\n+      else\n+\t{\n+\t  ysq = TRUNC (x*((TYPE) 16))/((TYPE) 16);\n+\t  del = (x-ysq)*(x+ysq);\n+\t  y = EXP(ysq*ysq) * EXP(del);\n+\t  res = (y+y) - res;\n+\t}\n+    }\n+  return res;\n+}\n+\n+#undef EXP\n+#undef TRUNC\n+\n+#undef CONCAT\n+#undef TYPE\n+#undef KIND_SUFFIX"}, {"sha": "6e978d912d0071adaaa8fb93ee8d6179076c2304", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -1,3 +1,9 @@\n+2008-03-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33197\n+\t* libgomp/testsuite/libgomp.fortran/fortran.exp: Add .f08 and\n+\t.F08 file suffixes.\n+\n 2008-03-03  Peter O'Gorman  <pogma@thewrittenword.com>\n \n \tPR libgomp/33131"}, {"sha": "b7d6b1072e7a12c927b25d2e7c6f63b650d0158e", "filename": "libgomp/testsuite/libgomp.fortran/fortran.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f489fba12819abd5c1b8fe1a1bbff71fe67e81f0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp?ref=f489fba12819abd5c1b8fe1a1bbff71fe67e81f0", "patch": "@@ -10,7 +10,7 @@ dg-init\n if [file exists \"${blddir}/${lang_test_file}\"] {\n \n     # Gather a list of all tests.\n-    set tests [lsort [find $srcdir/$subdir *.\\[fF\\]{,90,95,03}]]\n+    set tests [lsort [find $srcdir/$subdir *.\\[fF\\]{,90,95,03,08}]]\n \n     set ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n     set_ld_library_path_env_vars"}]}