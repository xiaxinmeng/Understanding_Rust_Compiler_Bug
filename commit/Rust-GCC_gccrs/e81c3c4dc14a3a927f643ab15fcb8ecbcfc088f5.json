{"sha": "e81c3c4dc14a3a927f643ab15fcb8ecbcfc088f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgxYzNjNGRjMTRhM2E5MjdmNjQzYWIxNWZjYjhlY2JjZmMwODhmNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-08-07T21:28:51Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-08-07T21:28:51Z"}, "message": "[PATCH] Line map table allocation\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-08/msg00434.html\n\t* line-map.c: (linemap_init): Set default allocator here.\n\t(new_linemap): Rather than here.  Refactor allocation logic.\n\nFrom-SVN: r263366", "tree": {"sha": "02710c1f4f36f70249b23f3de0a584ee75c6332b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02710c1f4f36f70249b23f3de0a584ee75c6332b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e81c3c4dc14a3a927f643ab15fcb8ecbcfc088f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81c3c4dc14a3a927f643ab15fcb8ecbcfc088f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e81c3c4dc14a3a927f643ab15fcb8ecbcfc088f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81c3c4dc14a3a927f643ab15fcb8ecbcfc088f5/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ec78a936934332735d99894aeedc688aeb89fca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec78a936934332735d99894aeedc688aeb89fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec78a936934332735d99894aeedc688aeb89fca"}], "stats": {"total": 105, "additions": 45, "deletions": 60}, "files": [{"sha": "50fa2535888185c4f73800e3c99dd508192e23ae", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81c3c4dc14a3a927f643ab15fcb8ecbcfc088f5/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81c3c4dc14a3a927f643ab15fcb8ecbcfc088f5/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e81c3c4dc14a3a927f643ab15fcb8ecbcfc088f5", "patch": "@@ -1,3 +1,8 @@\n+2018-08-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* line-map.c: (linemap_init): Set default allocator here.\n+\t(new_linemap): Rather than here.  Refactor allocation logic.\n+\n 2018-07-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (rich_location::set_range): Remove redundant"}, {"sha": "a5dc485e79e3438165b6d6051b7cde4a076a3dac", "filename": "libcpp/line-map.c", "status": "modified", "additions": 40, "deletions": 60, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81c3c4dc14a3a927f643ab15fcb8ecbcfc088f5/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81c3c4dc14a3a927f643ab15fcb8ecbcfc088f5/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=e81c3c4dc14a3a927f643ab15fcb8ecbcfc088f5", "patch": "@@ -346,6 +346,8 @@ linemap_init (struct line_maps *set,\n #else\n   new (set) line_maps();\n #endif\n+  /* Set default reallocator (used for initial alloc too).  */\n+  set->reallocator = xrealloc;\n   set->highest_location = RESERVED_LOCATION_COUNT - 1;\n   set->highest_line = RESERVED_LOCATION_COUNT - 1;\n   set->location_adhoc_data_map.htab =\n@@ -376,81 +378,59 @@ linemap_check_files_exited (struct line_maps *set)\n static struct line_map *\n new_linemap (struct line_maps *set,  source_location start_location)\n {\n-  struct line_map *result;\n-  bool macro_map_p = start_location >= LINE_MAP_MAX_LOCATION;\n+  bool macro_p = start_location >= LINE_MAP_MAX_LOCATION;\n+  unsigned num_maps_allocated = LINEMAPS_ALLOCATED (set, macro_p);\n+  unsigned num_maps_used = LINEMAPS_USED (set, macro_p);\n \n-  if (LINEMAPS_USED (set, macro_map_p) == LINEMAPS_ALLOCATED (set, macro_map_p))\n+  if (num_maps_used == num_maps_allocated)\n     {\n-      /* We ran out of allocated line maps. Let's allocate more.  */\n-      size_t alloc_size;\n-\n-      /* Cast away extern \"C\" from the type of xrealloc.  */\n-      line_map_realloc reallocator = (set->reallocator\n-\t\t\t\t      ? set->reallocator\n-\t\t\t\t      : (line_map_realloc) xrealloc);\n-      line_map_round_alloc_size_func round_alloc_size =\n-\tset->round_alloc_size;\n-\n-      size_t map_size = (macro_map_p\n-\t\t\t ? sizeof (line_map_macro)\n-\t\t\t : sizeof (line_map_ordinary));\n+      /* We need more space!  */\n+      if (!num_maps_allocated)\n+\tnum_maps_allocated = 128;\n+      num_maps_allocated *= 2;\n+\n+      size_t size_of_a_map;\n+      void *buffer;\n+      if (macro_p)\n+\t{\n+\t  size_of_a_map = sizeof (line_map_macro);\n+\t  buffer = set->info_macro.maps;\n+\t}\n+      else\n+\t{\n+\t  size_of_a_map = sizeof (line_map_ordinary);\n+\t  buffer = set->info_ordinary.maps;\n+\t}\n \n       /* We are going to execute some dance to try to reduce the\n \t overhead of the memory allocator, in case we are using the\n \t ggc-page.c one.\n \t \n \t The actual size of memory we are going to get back from the\n-\t allocator is the smallest power of 2 that is greater than the\n-\t size we requested.  So let's consider that size then.  */\n-\n-      alloc_size =\n-\t(2 * LINEMAPS_ALLOCATED (set, macro_map_p) +  256)\n-\t* map_size;\n-\n-      /* Get the actual size of memory that is going to be allocated\n-\t by the allocator.  */\n-      alloc_size = round_alloc_size (alloc_size);\n+\t allocator may well be larger than what we ask for.  Use this\n+\t hook to find what that size is.  */\n+      size_t alloc_size\n+\t= set->round_alloc_size (num_maps_allocated * size_of_a_map);\n \n       /* Now alloc_size contains the exact memory size we would get if\n \t we have asked for the initial alloc_size amount of memory.\n-\t Let's get back to the number of macro map that amounts\n-\t to.  */\n-      LINEMAPS_ALLOCATED (set, macro_map_p) =\n-\talloc_size / map_size;\n-\n-      /* And now let's really do the re-allocation.  */\n-      if (macro_map_p)\n-\t{\n-\t  set->info_macro.maps\n-\t    = (line_map_macro *) (*reallocator) (set->info_macro.maps,\n-\t\t\t\t\t\t (LINEMAPS_ALLOCATED (set, macro_map_p)\n-\t\t\t\t\t\t  * map_size));\n-\t  result = &set->info_macro.maps[LINEMAPS_USED (set, macro_map_p)];\n-\t}\n-      else\n-\t{\n-\t  set->info_ordinary.maps =\n-\t    (line_map_ordinary *) (*reallocator) (set->info_ordinary.maps,\n-\t\t\t\t\t\t  (LINEMAPS_ALLOCATED (set, macro_map_p)\n-\t\t\t\t\t\t   * map_size));\n-\t  result = &set->info_ordinary.maps[LINEMAPS_USED (set, macro_map_p)];\n-\t}\n-      memset (result, 0,\n-\t      ((LINEMAPS_ALLOCATED (set, macro_map_p)\n-\t\t- LINEMAPS_USED (set, macro_map_p))\n-\t       * map_size));\n-    }\n-  else\n-    {\n-      if (macro_map_p)\n-\tresult = &set->info_macro.maps[LINEMAPS_USED (set, macro_map_p)];\n+\t Let's get back to the number of map that amounts to.  */\n+      unsigned num_maps = alloc_size / size_of_a_map;\n+      buffer = set->reallocator (buffer, num_maps * size_of_a_map);\n+      memset ((char *)buffer + num_maps_used * size_of_a_map, 0,\n+\t      (num_maps - num_maps_used) * size_of_a_map);\n+      if (macro_p)\n+\tset->info_macro.maps = (line_map_macro *)buffer;\n       else\n-\tresult = &set->info_ordinary.maps[LINEMAPS_USED (set, macro_map_p)];\n+\tset->info_ordinary.maps = (line_map_ordinary *)buffer;\n+      LINEMAPS_ALLOCATED (set, macro_p) = num_maps;\n     }\n \n-  result->start_location = start_location;\n+  line_map *result = (macro_p ? (line_map *)&set->info_macro.maps[num_maps_used]\n+\t\t      : (line_map *)&set->info_ordinary.maps[num_maps_used]);\n+  LINEMAPS_USED (set, macro_p)++;\n \n-  LINEMAPS_USED (set, macro_map_p)++;\n+  result->start_location = start_location;\n \n   return result;\n }"}]}