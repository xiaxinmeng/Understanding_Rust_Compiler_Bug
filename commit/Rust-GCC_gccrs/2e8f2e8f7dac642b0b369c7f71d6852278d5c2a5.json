{"sha": "2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU4ZjJlOGY3ZGFjNjQyYjBiMzY5YzdmNzFkNjg1MjI3OGQ1YzJhNQ==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2002-07-30T22:23:26Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2002-07-30T22:23:26Z"}, "message": "flags.h: Declare flag_finite_math_only.\n\n2002-07-30  Toon Moene  <toon@moene.indiv.nluug.nl>\n\n\t* flags.h: Declare flag_finite_math_only.\n\tUse it in definition of HONOR_NANS and\n\tHONOR_INFINITIES.\n\t* c-common.c (cb_register_builtins): Emit\n\t__FINITE_MATH_ONLY__ when flag_finite_math_only\n\tis set.\n\t* combine.c (simplify_if_then_else): If\n\tflag_finite_math_only is set, a == b has a\n\tdefinite value.\n\t* toplev.c: Initialize flag_finite_math_only.\n\t(set_flags_fast_math): Set it on -ffast-math.\n\t(flag_fast_math_set_p): Test it.\ndoc:\n\t* invoke.texi: Document -ffinite-math-only.\nf:\n\t* com.c (ffe_init_options): Set\n\tflag_finite_math_only.\n\t* invoke.texi: Document -fno-finite-math-only.\n\nFrom-SVN: r55887", "tree": {"sha": "de115f5445a03103a3fc5ea6fddfa87706ee7d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de115f5445a03103a3fc5ea6fddfa87706ee7d4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/comments", "author": null, "committer": null, "parents": [{"sha": "a538e5805514bc4728c76b372cf4dc89edd4d968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a538e5805514bc4728c76b372cf4dc89edd4d968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a538e5805514bc4728c76b372cf4dc89edd4d968"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "4cb00df8980a11df8ce885cb9a91e2ff6d983344", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "patch": "@@ -1,3 +1,19 @@\n+2002-07-30  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* flags.h: Declare flag_finite_math_only.\n+\tUse it in definition of HONOR_NANS and\n+\tHONOR_INFINITIES.\n+\t* c-common.c (cb_register_builtins): Emit\n+\t__FINITE_MATH_ONLY__ when flag_finite_math_only\n+\tis set.\n+\t* combine.c (simplify_if_then_else): If\n+\tflag_finite_math_only is set, a == b has a\n+\tdefinite value.\n+\t* toplev.c: Initialize flag_finite_math_only.\n+\t(set_flags_fast_math): Set it on -ffast-math.\n+\t(flag_fast_math_set_p): Test it.\n+\t* doc/invoke.texi: Document -ffinite-math-only.\n+\n 2002-07-30  Richard Henderson  <rth@redhat.com>\n \n \t* ifcvt.c (noce_get_alt_condition): Use reg_overlap_mentioned_p."}, {"sha": "0d81341bad35b1d699d1d7ac1278b60034bef0f9", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "patch": "@@ -4385,6 +4385,8 @@ cb_register_builtins (pfile)\n     cpp_define (pfile, \"__NO_INLINE__\");\n   if (flag_signaling_nans)\n     cpp_define (pfile, \"__SUPPORT_SNAN__\");\n+  if (flag_finite_math_only)\n+    cpp_define (pfile, \"__FINITE_MATH_ONLY__\");\n \n   if (flag_iso)\n     cpp_define (pfile, \"__STRICT_ANSI__\");"}, {"sha": "297e6a46b1d8477844bd004a14cb35b241454b26", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "patch": "@@ -4775,12 +4775,12 @@ simplify_if_then_else (x)\n \n   /* Convert a == b ? b : a to \"a\".  */\n   if (true_code == EQ && ! side_effects_p (cond)\n-      && (! FLOAT_MODE_P (mode) || flag_unsafe_math_optimizations)\n+      && (!FLOAT_MODE_P (mode) || !HONOR_NANS (mode))\n       && rtx_equal_p (XEXP (cond, 0), false_rtx)\n       && rtx_equal_p (XEXP (cond, 1), true_rtx))\n     return false_rtx;\n   else if (true_code == NE && ! side_effects_p (cond)\n-\t   && (! FLOAT_MODE_P (mode) || flag_unsafe_math_optimizations)\n+\t   && (!FLOAT_MODE_P (mode) || !HONOR_NANS (mode))\n \t   && rtx_equal_p (XEXP (cond, 0), true_rtx)\n \t   && rtx_equal_p (XEXP (cond, 1), false_rtx))\n     return true_rtx;"}, {"sha": "fb911977246486efce3d28289d60f8cf0982a4ee", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "patch": "@@ -273,7 +273,7 @@ in the following sections.\n -fmove-all-movables  -fnew-ra -fno-default-inline  -fno-defer-pop @gol\n -fno-function-cse  -fno-guess-branch-probability @gol\n -fno-inline  -fno-math-errno  -fno-peephole  -fno-peephole2 @gol\n--funsafe-math-optimizations -fno-trapping-math @gol\n+-funsafe-math-optimizations -ffinite-math-only -fno-trapping-math @gol\n -fno-zero-initialized-in-bss @gol\n -fomit-frame-pointer  -foptimize-register-move @gol\n -foptimize-sibling-calls  -fprefetch-loop-arrays @gol\n@@ -3408,7 +3408,8 @@ performed when this option is not used.\n @item -ffast-math\n @opindex ffast-math\n Sets @option{-fno-math-errno}, @option{-funsafe-math-optimizations}, @*\n-@option{-fno-trapping-math} and @option{-fno-signaling-nans}.\n+@option{-fno-trapping-math}, @option{-ffinite-math-only} and @*\n+@option{-fno-signaling-nans}.\n \n This option causes the preprocessor macro @code{__FAST_MATH__} to be defined.\n \n@@ -3446,6 +3447,17 @@ math functions.\n \n The default is @option{-fno-unsafe-math-optimizations}.\n \n+@item -ffinite-math-only\n+@opindex ffinite-math-only\n+Allow optimizations for floating-point arithmetic that assume\n+that arguments and results are not NaNs or +-Infs.\n+\n+This option should never be turned on by any @option{-O} option since\n+it can result in incorrect output for programs which depend on\n+an exact implementation of IEEE or ISO rules/specifications.\n+\n+The default is @option{-fno-finite-math-only}.\n+\n @item -fno-trapping-math\n @opindex fno-trapping-math\n Compile code assuming that floating-point operations cannot generate"}, {"sha": "394117a32ca258a8e57187cd301938f56012a2c5", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "patch": "@@ -1,3 +1,9 @@\n+2002-07-30  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* com.c (ffe_init_options): Set\n+\tflag_finite_math_only.\n+\t* invoke.texi: Document -fno-finite-math-only.\n+\n Mon Jul 29 22:05:35 2002  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* com.c (read_name_map): Use concat in lieu of xmalloc/strcpy."}, {"sha": "1c6b05a16a93c3c6ce4177aa89631cf7d2b89198", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "patch": "@@ -14176,6 +14176,7 @@ ffe_init_options ()\n   flag_reduce_all_givs = 1;\n   flag_argument_noalias = 2;\n   flag_merge_constants = 2;\n+  flag_finite_math_only = 1;\n   flag_errno_math = 0;\n   flag_complex_divide_method = 1;\n }"}, {"sha": "77c1c39b1ad41434419a7b6159692b6534c0aea6", "filename": "gcc/f/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Ff%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Ff%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Finvoke.texi?ref=2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "patch": "@@ -182,7 +182,7 @@ by type.  Explanations are in the following sections.\n -malign-double @gol\n -ffloat-store  -fforce-mem  -fforce-addr  -fno-inline @gol\n -ffast-math  -fstrength-reduce  -frerun-cse-after-loop @gol\n--funsafe-math-optimizations -fno-trapping-math @gol\n+-funsafe-math-optimizations -fno-finite-math-only -fno-trapping-math @gol\n -fexpensive-optimizations  -fdelayed-branch @gol\n -fschedule-insns  -fschedule-insn2  -fcaller-saves @gol\n -funroll-loops  -funroll-all-loops @gol\n@@ -1551,6 +1551,16 @@ Sets @option{-funsafe-math-optimizations}, and\n Allow optimizations that may be give incorrect results\n for certain IEEE inputs.\n \n+@cindex -fno-finite-math-only option\n+@cindex options, -fno-finite-math-only\n+@item -fno-finite-math-only\n+Fortran specifies all arithmetic that can result in a NaN or an\n+infinity as \"giving undefined results\", therefore the compiler\n+by default operates in a way that assumes no NaNs or +-Inf can\n+be generated.  If you want to use a NaN or an Inf produced by\n+means other than Fortran, use this option to compile your\n+Fortran program.\n+\n @cindex -fno-trapping-math option\n @cindex options, -fno-trapping-math\n @item -fno-trapping-math"}, {"sha": "4ff7fcf4abf8e314fdfa094642a3fa4f3d09fa7b", "filename": "gcc/flags.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "patch": "@@ -359,6 +359,10 @@ extern int flag_errno_math;\n \n extern int flag_unsafe_math_optimizations;\n \n+/* Nonzero means that no NaNs or +-Infs are expected.  */\n+\n+extern int flag_finite_math_only;\n+\n /* Zero means that floating-point math operations cannot generate a\n    (user-visible) trap.  This is the case, for example, in nonstop\n    IEEE 754 arithmetic.  */\n@@ -672,15 +676,15 @@ extern int flag_signaling_nans;\n    disabled for modes with NaNs.  The user can ask for them to be\n    done anyway using the -funsafe-math-optimizations switch.  */\n #define HONOR_NANS(MODE) \\\n-  (MODE_HAS_NANS (MODE) && !flag_unsafe_math_optimizations)\n+  (MODE_HAS_NANS (MODE) && !flag_finite_math_only)\n \n /* Like HONOR_NANs, but true if we honor signaling NaNs (or sNaNs).  */\n #define HONOR_SNANS(MODE) (flag_signaling_nans && HONOR_NANS (MODE))\n \n /* As for HONOR_NANS, but true if the mode can represent infinity and\n    the treatment of infinite values is important.  */\n #define HONOR_INFINITIES(MODE) \\\n-  (MODE_HAS_INFINITIES (MODE) && !flag_unsafe_math_optimizations)\n+  (MODE_HAS_INFINITIES (MODE) && !flag_finite_math_only)\n \n /* Like HONOR_NANS, but true if the given mode distinguishes between\n    postive and negative zero, and the sign of zero is important.  */"}, {"sha": "9fe5cade312eee39eb0054382c9e27c84de4fa4e", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2e8f2e8f7dac642b0b369c7f71d6852278d5c2a5", "patch": "@@ -575,6 +575,10 @@ int flag_errno_math = 1;\n \n int flag_unsafe_math_optimizations = 0;\n \n+/* Nonzero means that no NaNs or +-Infs are expected.  */\n+\n+int flag_finite_math_only = 0;\n+\n /* Zero means that floating-point math operations cannot generate a\n    (user-visible) trap.  This is the case, for example, in nonstop\n    IEEE 754 arithmetic.  Trapping conditions include division by zero,\n@@ -1170,6 +1174,8 @@ static const lang_independent_options f_options[] =\n    N_(\"Process #ident directives\") },\n   { \"peephole2\", &flag_peephole2, 1,\n    N_(\"Enables an rtl peephole pass run before sched2\") },\n+  {\"finite-math-only\", &flag_finite_math_only, 1,\n+   N_(\"Assume no NaNs or +-Infs are generated\") },\n   { \"guess-branch-probability\", &flag_guess_branch_prob, 1,\n    N_(\"Enables guessing of branch probabilities\") },\n   {\"math-errno\", &flag_errno_math, 1,\n@@ -1575,6 +1581,7 @@ set_fast_math_flags (set)\n {\n   flag_trapping_math = !set;\n   flag_unsafe_math_optimizations = set;\n+  flag_finite_math_only = set;\n   flag_errno_math = !set;\n   if (set)\n     flag_signaling_nans = 0;\n@@ -1586,6 +1593,7 @@ fast_math_flags_set_p ()\n {\n   return (!flag_trapping_math\n \t  && flag_unsafe_math_optimizations\n+\t  && flag_finite_math_only\n \t  && !flag_errno_math);\n }\n "}]}