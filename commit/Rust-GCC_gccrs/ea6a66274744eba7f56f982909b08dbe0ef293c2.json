{"sha": "ea6a66274744eba7f56f982909b08dbe0ef293c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE2YTY2Mjc0NzQ0ZWJhN2Y1NmY5ODI5MDliMDhkYmUwZWYyOTNjMg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2005-11-30T19:59:50Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2005-11-30T19:59:50Z"}, "message": "tree.h (CASE_FLT_FN, [...]): New macros.\n\n\t* tree.h (CASE_FLT_FN, CASE_INT_FN): New macros.\n\t* builtins.c (expand_builtin_mathfn): Use them.\n\t(expand_builtin_mathfn_2): Likewise.\n\t(expand_builtin_mathfn_3): Likewise.\n\t(expand_builtin_int_roundingfn): Likewise.\n\t(expand_builtin): Likewise.\n\t(integer_valued_real_p): Likewise.\n\t(fold_builtin_int_roundingfn): Likewise.\n\t(fold_builtin_bitop): Likewise.\n\t(fold_builtin_logarithm): Likewise.\n\t(fold_builtin_1): Likewise.\n\t* convert.c (convert_to_integer): Likewise.\n\t* fold-const.c (negate_mathfn_p): Likewise.\n\t(tree_expr_nonnegative_p): Likewise.\n\nFrom-SVN: r107733", "tree": {"sha": "a25bfbbd8528680ac1478ddb93a3ef85fed8d6c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a25bfbbd8528680ac1478ddb93a3ef85fed8d6c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea6a66274744eba7f56f982909b08dbe0ef293c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6a66274744eba7f56f982909b08dbe0ef293c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6a66274744eba7f56f982909b08dbe0ef293c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6a66274744eba7f56f982909b08dbe0ef293c2/comments", "author": null, "committer": null, "parents": [{"sha": "f6173932d327c20b74dd73676deae86aafed35a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6173932d327c20b74dd73676deae86aafed35a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6173932d327c20b74dd73676deae86aafed35a8"}], "stats": {"total": 793, "additions": 238, "deletions": 555}, "files": [{"sha": "d775fa4d8faee887ba2e231494229f432ea64167", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6a66274744eba7f56f982909b08dbe0ef293c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6a66274744eba7f56f982909b08dbe0ef293c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea6a66274744eba7f56f982909b08dbe0ef293c2", "patch": "@@ -1,3 +1,20 @@\n+2005-11-30  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* tree.h (CASE_FLT_FN, CASE_INT_FN): New macros.\n+\t* builtins.c (expand_builtin_mathfn): Use them.\n+\t(expand_builtin_mathfn_2): Likewise.\n+\t(expand_builtin_mathfn_3): Likewise.\n+\t(expand_builtin_int_roundingfn): Likewise.\n+\t(expand_builtin): Likewise.\n+\t(integer_valued_real_p): Likewise.\n+\t(fold_builtin_int_roundingfn): Likewise.\n+\t(fold_builtin_bitop): Likewise.\n+\t(fold_builtin_logarithm): Likewise.\n+\t(fold_builtin_1): Likewise.\n+\t* convert.c (convert_to_integer): Likewise.\n+\t* fold-const.c (negate_mathfn_p): Likewise.\n+\t(tree_expr_nonnegative_p): Likewise.\n+\n 2005-11-30  Dale Johannesen  <dalej@apple.com>\n             Andrew Pinski  <pinskia@physics.uc.edu>\n "}, {"sha": "aff2499d6eda39a0d79c225f4ba4a25c248ce92c", "filename": "gcc/builtins.c", "status": "modified", "additions": 156, "deletions": 468, "changes": 624, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6a66274744eba7f56f982909b08dbe0ef293c2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6a66274744eba7f56f982909b08dbe0ef293c2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ea6a66274744eba7f56f982909b08dbe0ef293c2", "patch": "@@ -1790,101 +1790,53 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n \n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n-    case BUILT_IN_SQRT:\n-    case BUILT_IN_SQRTF:\n-    case BUILT_IN_SQRTL:\n+    CASE_FLT_FN (BUILT_IN_SQRT):\n       errno_set = ! tree_expr_nonnegative_p (arg);\n       builtin_optab = sqrt_optab;\n       break;\n-    case BUILT_IN_EXP:\n-    case BUILT_IN_EXPF:\n-    case BUILT_IN_EXPL:\n+    CASE_FLT_FN (BUILT_IN_EXP):\n       errno_set = true; builtin_optab = exp_optab; break;\n-    case BUILT_IN_EXP10:\n-    case BUILT_IN_EXP10F:\n-    case BUILT_IN_EXP10L:\n-    case BUILT_IN_POW10:\n-    case BUILT_IN_POW10F:\n-    case BUILT_IN_POW10L:\n+    CASE_FLT_FN (BUILT_IN_EXP10):\n+    CASE_FLT_FN (BUILT_IN_POW10):\n       errno_set = true; builtin_optab = exp10_optab; break;\n-    case BUILT_IN_EXP2:\n-    case BUILT_IN_EXP2F:\n-    case BUILT_IN_EXP2L:\n+    CASE_FLT_FN (BUILT_IN_EXP2):\n       errno_set = true; builtin_optab = exp2_optab; break;\n-    case BUILT_IN_EXPM1:\n-    case BUILT_IN_EXPM1F:\n-    case BUILT_IN_EXPM1L:\n+    CASE_FLT_FN (BUILT_IN_EXPM1):\n       errno_set = true; builtin_optab = expm1_optab; break;\n-    case BUILT_IN_LOGB:\n-    case BUILT_IN_LOGBF:\n-    case BUILT_IN_LOGBL:\n+    CASE_FLT_FN (BUILT_IN_LOGB):\n       errno_set = true; builtin_optab = logb_optab; break;\n-    case BUILT_IN_ILOGB:\n-    case BUILT_IN_ILOGBF:\n-    case BUILT_IN_ILOGBL:\n+    CASE_FLT_FN (BUILT_IN_ILOGB):\n       errno_set = true; builtin_optab = ilogb_optab; break;\n-    case BUILT_IN_LOG:\n-    case BUILT_IN_LOGF:\n-    case BUILT_IN_LOGL:\n+    CASE_FLT_FN (BUILT_IN_LOG):\n       errno_set = true; builtin_optab = log_optab; break;\n-    case BUILT_IN_LOG10:\n-    case BUILT_IN_LOG10F:\n-    case BUILT_IN_LOG10L:\n+    CASE_FLT_FN (BUILT_IN_LOG10):\n       errno_set = true; builtin_optab = log10_optab; break;\n-    case BUILT_IN_LOG2:\n-    case BUILT_IN_LOG2F:\n-    case BUILT_IN_LOG2L:\n+    CASE_FLT_FN (BUILT_IN_LOG2):\n       errno_set = true; builtin_optab = log2_optab; break;\n-    case BUILT_IN_LOG1P:\n-    case BUILT_IN_LOG1PF:\n-    case BUILT_IN_LOG1PL:\n+    CASE_FLT_FN (BUILT_IN_LOG1P):\n       errno_set = true; builtin_optab = log1p_optab; break;\n-    case BUILT_IN_ASIN:\n-    case BUILT_IN_ASINF:\n-    case BUILT_IN_ASINL:\n+    CASE_FLT_FN (BUILT_IN_ASIN):\n       builtin_optab = asin_optab; break;\n-    case BUILT_IN_ACOS:\n-    case BUILT_IN_ACOSF:\n-    case BUILT_IN_ACOSL:\n+    CASE_FLT_FN (BUILT_IN_ACOS):\n       builtin_optab = acos_optab; break;\n-    case BUILT_IN_TAN:\n-    case BUILT_IN_TANF:\n-    case BUILT_IN_TANL:\n+    CASE_FLT_FN (BUILT_IN_TAN):\n       builtin_optab = tan_optab; break;\n-    case BUILT_IN_ATAN:\n-    case BUILT_IN_ATANF:\n-    case BUILT_IN_ATANL:\n+    CASE_FLT_FN (BUILT_IN_ATAN):\n       builtin_optab = atan_optab; break;\n-    case BUILT_IN_FLOOR:\n-    case BUILT_IN_FLOORF:\n-    case BUILT_IN_FLOORL:\n+    CASE_FLT_FN (BUILT_IN_FLOOR):\n       builtin_optab = floor_optab; break;\n-    case BUILT_IN_CEIL:\n-    case BUILT_IN_CEILF:\n-    case BUILT_IN_CEILL:\n+    CASE_FLT_FN (BUILT_IN_CEIL):\n       builtin_optab = ceil_optab; break;\n-    case BUILT_IN_TRUNC:\n-    case BUILT_IN_TRUNCF:\n-    case BUILT_IN_TRUNCL:\n+    CASE_FLT_FN (BUILT_IN_TRUNC):\n       builtin_optab = btrunc_optab; break;\n-    case BUILT_IN_ROUND:\n-    case BUILT_IN_ROUNDF:\n-    case BUILT_IN_ROUNDL:\n+    CASE_FLT_FN (BUILT_IN_ROUND):\n       builtin_optab = round_optab; break;\n-    case BUILT_IN_NEARBYINT:\n-    case BUILT_IN_NEARBYINTF:\n-    case BUILT_IN_NEARBYINTL:\n+    CASE_FLT_FN (BUILT_IN_NEARBYINT):\n       builtin_optab = nearbyint_optab; break;\n-    case BUILT_IN_RINT:\n-    case BUILT_IN_RINTF:\n-    case BUILT_IN_RINTL:\n+    CASE_FLT_FN (BUILT_IN_RINT):\n       builtin_optab = rint_optab; break;\n-    case BUILT_IN_LRINT:\n-    case BUILT_IN_LRINTF:\n-    case BUILT_IN_LRINTL:\n-    case BUILT_IN_LLRINT:\n-    case BUILT_IN_LLRINTF:\n-    case BUILT_IN_LLRINTL:\n+    CASE_FLT_FN (BUILT_IN_LRINT):\n+    CASE_FLT_FN (BUILT_IN_LLRINT):\n       builtin_optab = lrint_optab; break;\n     default:\n       gcc_unreachable ();\n@@ -2017,25 +1969,15 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n \n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n-    case BUILT_IN_POW:\n-    case BUILT_IN_POWF:\n-    case BUILT_IN_POWL:\n+    CASE_FLT_FN (BUILT_IN_POW):\n       builtin_optab = pow_optab; break;\n-    case BUILT_IN_ATAN2:\n-    case BUILT_IN_ATAN2F:\n-    case BUILT_IN_ATAN2L:\n+    CASE_FLT_FN (BUILT_IN_ATAN2):\n       builtin_optab = atan2_optab; break;\n-    case BUILT_IN_LDEXP:\n-    case BUILT_IN_LDEXPF:\n-    case BUILT_IN_LDEXPL:\n+    CASE_FLT_FN (BUILT_IN_LDEXP):\n       builtin_optab = ldexp_optab; break;\n-    case BUILT_IN_FMOD:\n-    case BUILT_IN_FMODF:\n-    case BUILT_IN_FMODL:\n+    CASE_FLT_FN (BUILT_IN_FMOD):\n       builtin_optab = fmod_optab; break;\n-    case BUILT_IN_DREM:\n-    case BUILT_IN_DREMF:\n-    case BUILT_IN_DREML:\n+    CASE_FLT_FN (BUILT_IN_DREM):\n       builtin_optab = drem_optab; break;\n     default:\n       gcc_unreachable ();\n@@ -2132,12 +2074,8 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n \n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n-    case BUILT_IN_SIN:\n-    case BUILT_IN_SINF:\n-    case BUILT_IN_SINL:\n-    case BUILT_IN_COS:\n-    case BUILT_IN_COSF:\n-    case BUILT_IN_COSL:\n+    CASE_FLT_FN (BUILT_IN_SIN):\n+    CASE_FLT_FN (BUILT_IN_COS):\n       builtin_optab = sincos_optab; break;\n     default:\n       gcc_unreachable ();\n@@ -2154,13 +2092,9 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n   if (builtin_optab->handlers[(int) mode].insn_code == CODE_FOR_nothing) {\n     switch (DECL_FUNCTION_CODE (fndecl))\n       {\n-      case BUILT_IN_SIN:\n-      case BUILT_IN_SINF:\n-      case BUILT_IN_SINL:\n+      CASE_FLT_FN (BUILT_IN_SIN):\n \tbuiltin_optab = sin_optab; break;\n-      case BUILT_IN_COS:\n-      case BUILT_IN_COSF:\n-      case BUILT_IN_COSL:\n+      CASE_FLT_FN (BUILT_IN_COS):\n \tbuiltin_optab = cos_optab; break;\n       default:\n \tgcc_unreachable ();\n@@ -2195,14 +2129,10 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n \n \t  switch (DECL_FUNCTION_CODE (fndecl))\n \t    {\n-\t    case BUILT_IN_SIN:\n-\t    case BUILT_IN_SINF:\n-\t    case BUILT_IN_SINL:\n+\t    CASE_FLT_FN (BUILT_IN_SIN):\n \t      result = expand_twoval_unop (builtin_optab, op0, 0, target, 0);\n \t      break;\n-\t    case BUILT_IN_COS:\n-\t    case BUILT_IN_COSF:\n-\t    case BUILT_IN_COSL:\n+\t    CASE_FLT_FN (BUILT_IN_COS):\n \t      result = expand_twoval_unop (builtin_optab, op0, target, 0, 0);\n \t      break;\n \t    default:\n@@ -2263,22 +2193,14 @@ expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n \n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n-    case BUILT_IN_LCEIL:\n-    case BUILT_IN_LCEILF:\n-    case BUILT_IN_LCEILL:\n-    case BUILT_IN_LLCEIL:\n-    case BUILT_IN_LLCEILF:\n-    case BUILT_IN_LLCEILL:\n+    CASE_FLT_FN (BUILT_IN_LCEIL):\n+    CASE_FLT_FN (BUILT_IN_LLCEIL):\n       builtin_optab = lceil_optab;\n       fallback_fn = BUILT_IN_CEIL;\n       break;\n \n-    case BUILT_IN_LFLOOR:\n-    case BUILT_IN_LFLOORF:\n-    case BUILT_IN_LFLOORL:\n-    case BUILT_IN_LLFLOOR:\n-    case BUILT_IN_LLFLOORF:\n-    case BUILT_IN_LLFLOORL:\n+    CASE_FLT_FN (BUILT_IN_LFLOOR):\n+    CASE_FLT_FN (BUILT_IN_LLFLOOR):\n       builtin_optab = lfloor_optab;\n       fallback_fn = BUILT_IN_FLOOR;\n       break;\n@@ -5638,168 +5560,90 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \n   switch (fcode)\n     {\n-    case BUILT_IN_FABS:\n-    case BUILT_IN_FABSF:\n-    case BUILT_IN_FABSL:\n+    CASE_FLT_FN (BUILT_IN_FABS):\n       target = expand_builtin_fabs (arglist, target, subtarget);\n       if (target)\n         return target;\n       break;\n \n-    case BUILT_IN_COPYSIGN:\n-    case BUILT_IN_COPYSIGNF:\n-    case BUILT_IN_COPYSIGNL:\n+    CASE_FLT_FN (BUILT_IN_COPYSIGN):\n       target = expand_builtin_copysign (arglist, target, subtarget);\n       if (target)\n \treturn target;\n       break;\n \n       /* Just do a normal library call if we were unable to fold\n \t the values.  */\n-    case BUILT_IN_CABS:\n-    case BUILT_IN_CABSF:\n-    case BUILT_IN_CABSL:\n+    CASE_FLT_FN (BUILT_IN_CABS):\n       break;\n \n-    case BUILT_IN_EXP:\n-    case BUILT_IN_EXPF:\n-    case BUILT_IN_EXPL:\n-    case BUILT_IN_EXP10:\n-    case BUILT_IN_EXP10F:\n-    case BUILT_IN_EXP10L:\n-    case BUILT_IN_POW10:\n-    case BUILT_IN_POW10F:\n-    case BUILT_IN_POW10L:\n-    case BUILT_IN_EXP2:\n-    case BUILT_IN_EXP2F:\n-    case BUILT_IN_EXP2L:\n-    case BUILT_IN_EXPM1:\n-    case BUILT_IN_EXPM1F:\n-    case BUILT_IN_EXPM1L:\n-    case BUILT_IN_LOGB:\n-    case BUILT_IN_LOGBF:\n-    case BUILT_IN_LOGBL:\n-    case BUILT_IN_ILOGB:\n-    case BUILT_IN_ILOGBF:\n-    case BUILT_IN_ILOGBL:\n-    case BUILT_IN_LOG:\n-    case BUILT_IN_LOGF:\n-    case BUILT_IN_LOGL:\n-    case BUILT_IN_LOG10:\n-    case BUILT_IN_LOG10F:\n-    case BUILT_IN_LOG10L:\n-    case BUILT_IN_LOG2:\n-    case BUILT_IN_LOG2F:\n-    case BUILT_IN_LOG2L:\n-    case BUILT_IN_LOG1P:\n-    case BUILT_IN_LOG1PF:\n-    case BUILT_IN_LOG1PL:\n-    case BUILT_IN_TAN:\n-    case BUILT_IN_TANF:\n-    case BUILT_IN_TANL:\n-    case BUILT_IN_ASIN:\n-    case BUILT_IN_ASINF:\n-    case BUILT_IN_ASINL:\n-    case BUILT_IN_ACOS:\n-    case BUILT_IN_ACOSF:\n-    case BUILT_IN_ACOSL:\n-    case BUILT_IN_ATAN:\n-    case BUILT_IN_ATANF:\n-    case BUILT_IN_ATANL:\n+    CASE_FLT_FN (BUILT_IN_EXP):\n+    CASE_FLT_FN (BUILT_IN_EXP10):\n+    CASE_FLT_FN (BUILT_IN_POW10):\n+    CASE_FLT_FN (BUILT_IN_EXP2):\n+    CASE_FLT_FN (BUILT_IN_EXPM1):\n+    CASE_FLT_FN (BUILT_IN_LOGB):\n+    CASE_FLT_FN (BUILT_IN_ILOGB):\n+    CASE_FLT_FN (BUILT_IN_LOG):\n+    CASE_FLT_FN (BUILT_IN_LOG10):\n+    CASE_FLT_FN (BUILT_IN_LOG2):\n+    CASE_FLT_FN (BUILT_IN_LOG1P):\n+    CASE_FLT_FN (BUILT_IN_TAN):\n+    CASE_FLT_FN (BUILT_IN_ASIN):\n+    CASE_FLT_FN (BUILT_IN_ACOS):\n+    CASE_FLT_FN (BUILT_IN_ATAN):\n       /* Treat these like sqrt only if unsafe math optimizations are allowed,\n \t because of possible accuracy problems.  */\n       if (! flag_unsafe_math_optimizations)\n \tbreak;\n-    case BUILT_IN_SQRT:\n-    case BUILT_IN_SQRTF:\n-    case BUILT_IN_SQRTL:\n-    case BUILT_IN_FLOOR:\n-    case BUILT_IN_FLOORF:\n-    case BUILT_IN_FLOORL:\n-    case BUILT_IN_CEIL:\n-    case BUILT_IN_CEILF:\n-    case BUILT_IN_CEILL:\n-    case BUILT_IN_TRUNC:\n-    case BUILT_IN_TRUNCF:\n-    case BUILT_IN_TRUNCL:\n-    case BUILT_IN_ROUND:\n-    case BUILT_IN_ROUNDF:\n-    case BUILT_IN_ROUNDL:\n-    case BUILT_IN_NEARBYINT:\n-    case BUILT_IN_NEARBYINTF:\n-    case BUILT_IN_NEARBYINTL:\n-    case BUILT_IN_RINT:\n-    case BUILT_IN_RINTF:\n-    case BUILT_IN_RINTL:\n-    case BUILT_IN_LRINT:\n-    case BUILT_IN_LRINTF:\n-    case BUILT_IN_LRINTL:\n-    case BUILT_IN_LLRINT:\n-    case BUILT_IN_LLRINTF:\n-    case BUILT_IN_LLRINTL:\n+    CASE_FLT_FN (BUILT_IN_SQRT):\n+    CASE_FLT_FN (BUILT_IN_FLOOR):\n+    CASE_FLT_FN (BUILT_IN_CEIL):\n+    CASE_FLT_FN (BUILT_IN_TRUNC):\n+    CASE_FLT_FN (BUILT_IN_ROUND):\n+    CASE_FLT_FN (BUILT_IN_NEARBYINT):\n+    CASE_FLT_FN (BUILT_IN_RINT):\n+    CASE_FLT_FN (BUILT_IN_LRINT):\n+    CASE_FLT_FN (BUILT_IN_LLRINT):\n       target = expand_builtin_mathfn (exp, target, subtarget);\n       if (target)\n \treturn target;\n       break;\n \n-    case BUILT_IN_LCEIL:\n-    case BUILT_IN_LCEILF:\n-    case BUILT_IN_LCEILL:\n-    case BUILT_IN_LLCEIL:\n-    case BUILT_IN_LLCEILF:\n-    case BUILT_IN_LLCEILL:\n-    case BUILT_IN_LFLOOR:\n-    case BUILT_IN_LFLOORF:\n-    case BUILT_IN_LFLOORL:\n-    case BUILT_IN_LLFLOOR:\n-    case BUILT_IN_LLFLOORF:\n-    case BUILT_IN_LLFLOORL:\n+    CASE_FLT_FN (BUILT_IN_LCEIL):\n+    CASE_FLT_FN (BUILT_IN_LLCEIL):\n+    CASE_FLT_FN (BUILT_IN_LFLOOR):\n+    CASE_FLT_FN (BUILT_IN_LLFLOOR):\n       target = expand_builtin_int_roundingfn (exp, target, subtarget);\n       if (target)\n \treturn target;\n       break;\n \n-    case BUILT_IN_POW:\n-    case BUILT_IN_POWF:\n-    case BUILT_IN_POWL:\n+    CASE_FLT_FN (BUILT_IN_POW):\n       target = expand_builtin_pow (exp, target, subtarget);\n       if (target)\n \treturn target;\n       break;\n \n-    case BUILT_IN_POWI:\n-    case BUILT_IN_POWIF:\n-    case BUILT_IN_POWIL:\n+    CASE_FLT_FN (BUILT_IN_POWI):\n       target = expand_builtin_powi (exp, target, subtarget);\n       if (target)\n \treturn target;\n       break;\n \n-    case BUILT_IN_ATAN2:\n-    case BUILT_IN_ATAN2F:\n-    case BUILT_IN_ATAN2L:\n-    case BUILT_IN_LDEXP:\n-    case BUILT_IN_LDEXPF:\n-    case BUILT_IN_LDEXPL:\n-    case BUILT_IN_FMOD:\n-    case BUILT_IN_FMODF:\n-    case BUILT_IN_FMODL:\n-    case BUILT_IN_DREM:\n-    case BUILT_IN_DREMF:\n-    case BUILT_IN_DREML:\n+    CASE_FLT_FN (BUILT_IN_ATAN2):\n+    CASE_FLT_FN (BUILT_IN_LDEXP):\n+    CASE_FLT_FN (BUILT_IN_FMOD):\n+    CASE_FLT_FN (BUILT_IN_DREM):\n       if (! flag_unsafe_math_optimizations)\n \tbreak;\n       target = expand_builtin_mathfn_2 (exp, target, subtarget);\n       if (target)\n \treturn target;\n       break;\n \n-    case BUILT_IN_SIN:\n-    case BUILT_IN_SINF:\n-    case BUILT_IN_SINL:\n-    case BUILT_IN_COS:\n-    case BUILT_IN_COSF:\n-    case BUILT_IN_COSL:\n+    CASE_FLT_FN (BUILT_IN_SIN):\n+    CASE_FLT_FN (BUILT_IN_COS):\n       if (! flag_unsafe_math_optimizations)\n \tbreak;\n       target = expand_builtin_mathfn_3 (exp, target, subtarget);\n@@ -5892,49 +5736,39 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       expand_stack_restore (TREE_VALUE (arglist));\n       return const0_rtx;\n \n-    case BUILT_IN_FFS:\n-    case BUILT_IN_FFSL:\n-    case BUILT_IN_FFSLL:\n+    CASE_INT_FN (BUILT_IN_FFS):\n     case BUILT_IN_FFSIMAX:\n       target = expand_builtin_unop (target_mode, arglist, target,\n \t\t\t\t    subtarget, ffs_optab);\n       if (target)\n \treturn target;\n       break;\n \n-    case BUILT_IN_CLZ:\n-    case BUILT_IN_CLZL:\n-    case BUILT_IN_CLZLL:\n+    CASE_INT_FN (BUILT_IN_CLZ):\n     case BUILT_IN_CLZIMAX:\n       target = expand_builtin_unop (target_mode, arglist, target,\n \t\t\t\t    subtarget, clz_optab);\n       if (target)\n \treturn target;\n       break;\n \n-    case BUILT_IN_CTZ:\n-    case BUILT_IN_CTZL:\n-    case BUILT_IN_CTZLL:\n+    CASE_INT_FN (BUILT_IN_CTZ):\n     case BUILT_IN_CTZIMAX:\n       target = expand_builtin_unop (target_mode, arglist, target,\n \t\t\t\t    subtarget, ctz_optab);\n       if (target)\n \treturn target;\n       break;\n \n-    case BUILT_IN_POPCOUNT:\n-    case BUILT_IN_POPCOUNTL:\n-    case BUILT_IN_POPCOUNTLL:\n+    CASE_INT_FN (BUILT_IN_POPCOUNT):\n     case BUILT_IN_POPCOUNTIMAX:\n       target = expand_builtin_unop (target_mode, arglist, target,\n \t\t\t\t    subtarget, popcount_optab);\n       if (target)\n \treturn target;\n       break;\n \n-    case BUILT_IN_PARITY:\n-    case BUILT_IN_PARITYL:\n-    case BUILT_IN_PARITYLL:\n+    CASE_INT_FN (BUILT_IN_PARITY):\n     case BUILT_IN_PARITYIMAX:\n       target = expand_builtin_unop (target_mode, arglist, target,\n \t\t\t\t    subtarget, parity_optab);\n@@ -6165,9 +5999,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn target;\n       break;\n \n-    case BUILT_IN_SIGNBIT:\n-    case BUILT_IN_SIGNBITF:\n-    case BUILT_IN_SIGNBITL:\n+    CASE_FLT_FN (BUILT_IN_SIGNBIT):\n       target = expand_builtin_signbit (exp, target);\n       if (target)\n \treturn target;\n@@ -6740,24 +6572,12 @@ integer_valued_real_p (tree t)\n     case CALL_EXPR:\n       switch (builtin_mathfn_code (t))\n \t{\n-\tcase BUILT_IN_CEIL:\n-\tcase BUILT_IN_CEILF:\n-\tcase BUILT_IN_CEILL:\n-\tcase BUILT_IN_FLOOR:\n-\tcase BUILT_IN_FLOORF:\n-\tcase BUILT_IN_FLOORL:\n-\tcase BUILT_IN_NEARBYINT:\n-\tcase BUILT_IN_NEARBYINTF:\n-\tcase BUILT_IN_NEARBYINTL:\n-\tcase BUILT_IN_RINT:\n-\tcase BUILT_IN_RINTF:\n-\tcase BUILT_IN_RINTL:\n-\tcase BUILT_IN_ROUND:\n-\tcase BUILT_IN_ROUNDF:\n-\tcase BUILT_IN_ROUNDL:\n-\tcase BUILT_IN_TRUNC:\n-\tcase BUILT_IN_TRUNCF:\n-\tcase BUILT_IN_TRUNCL:\n+\tCASE_FLT_FN (BUILT_IN_CEIL):\n+\tCASE_FLT_FN (BUILT_IN_FLOOR):\n+\tCASE_FLT_FN (BUILT_IN_NEARBYINT):\n+\tCASE_FLT_FN (BUILT_IN_RINT):\n+\tCASE_FLT_FN (BUILT_IN_ROUND):\n+\tCASE_FLT_FN (BUILT_IN_TRUNC):\n \t  return true;\n \n \tdefault:\n@@ -7348,30 +7168,18 @@ fold_builtin_int_roundingfn (tree fndecl, tree arglist)\n \n \t  switch (DECL_FUNCTION_CODE (fndecl))\n \t    {\n-\t    case BUILT_IN_LFLOOR:\n-\t    case BUILT_IN_LFLOORF:\n-\t    case BUILT_IN_LFLOORL:\n-\t    case BUILT_IN_LLFLOOR:\n-\t    case BUILT_IN_LLFLOORF:\n-\t    case BUILT_IN_LLFLOORL:\n+\t    CASE_FLT_FN (BUILT_IN_LFLOOR):\n+\t    CASE_FLT_FN (BUILT_IN_LLFLOOR):\n \t      real_floor (&r, TYPE_MODE (ftype), &x);\n \t      break;\n \n-\t    case BUILT_IN_LCEIL:\n-\t    case BUILT_IN_LCEILF:\n-\t    case BUILT_IN_LCEILL:\n-\t    case BUILT_IN_LLCEIL:\n-\t    case BUILT_IN_LLCEILF:\n-\t    case BUILT_IN_LLCEILL:\n+\t    CASE_FLT_FN (BUILT_IN_LCEIL):\n+\t    CASE_FLT_FN (BUILT_IN_LLCEIL):\n \t      real_ceil (&r, TYPE_MODE (ftype), &x);\n \t      break;\n \n-\t    case BUILT_IN_LROUND:\n-\t    case BUILT_IN_LROUNDF:\n-\t    case BUILT_IN_LROUNDL:\n-\t    case BUILT_IN_LLROUND:\n-\t    case BUILT_IN_LLROUNDF:\n-\t    case BUILT_IN_LLROUNDL:\n+\t    CASE_FLT_FN (BUILT_IN_LROUND):\n+\t    CASE_FLT_FN (BUILT_IN_LLROUND):\n \t      real_round (&r, TYPE_MODE (ftype), &x);\n \t      break;\n \n@@ -7429,9 +7237,7 @@ fold_builtin_bitop (tree fndecl, tree arglist)\n \n       switch (DECL_FUNCTION_CODE (fndecl))\n \t{\n-\tcase BUILT_IN_FFS:\n-\tcase BUILT_IN_FFSL:\n-\tcase BUILT_IN_FFSLL:\n+\tCASE_INT_FN (BUILT_IN_FFS):\n \t  if (lo != 0)\n \t    result = exact_log2 (lo & -lo) + 1;\n \t  else if (hi != 0)\n@@ -7440,9 +7246,7 @@ fold_builtin_bitop (tree fndecl, tree arglist)\n \t    result = 0;\n \t  break;\n \n-\tcase BUILT_IN_CLZ:\n-\tcase BUILT_IN_CLZL:\n-\tcase BUILT_IN_CLZLL:\n+\tCASE_INT_FN (BUILT_IN_CLZ):\n \t  if (hi != 0)\n \t    result = width - floor_log2 (hi) - 1 - HOST_BITS_PER_WIDE_INT;\n \t  else if (lo != 0)\n@@ -7451,9 +7255,7 @@ fold_builtin_bitop (tree fndecl, tree arglist)\n \t    result = width;\n \t  break;\n \n-\tcase BUILT_IN_CTZ:\n-\tcase BUILT_IN_CTZL:\n-\tcase BUILT_IN_CTZLL:\n+\tCASE_INT_FN (BUILT_IN_CTZ):\n \t  if (lo != 0)\n \t    result = exact_log2 (lo & -lo);\n \t  else if (hi != 0)\n@@ -7462,19 +7264,15 @@ fold_builtin_bitop (tree fndecl, tree arglist)\n \t    result = width;\n \t  break;\n \n-\tcase BUILT_IN_POPCOUNT:\n-\tcase BUILT_IN_POPCOUNTL:\n-\tcase BUILT_IN_POPCOUNTLL:\n+\tCASE_INT_FN (BUILT_IN_POPCOUNT):\n \t  result = 0;\n \t  while (lo)\n \t    result++, lo &= lo - 1;\n \t  while (hi)\n \t    result++, hi &= hi - 1;\n \t  break;\n \n-\tcase BUILT_IN_PARITY:\n-\tcase BUILT_IN_PARITYL:\n-\tcase BUILT_IN_PARITYLL:\n+\tCASE_INT_FN (BUILT_IN_PARITY):\n \t  result = 0;\n \t  while (lo)\n \t    result++, lo &= lo - 1;\n@@ -7559,49 +7357,35 @@ fold_builtin_logarithm (tree fndecl, tree arglist,\n \n \t  switch (fcode)\n \t  {\n-\t  case BUILT_IN_EXP:\n-\t  case BUILT_IN_EXPF:\n-\t  case BUILT_IN_EXPL:\n+\t  CASE_FLT_FN (BUILT_IN_EXP):\n \t    /* Prepare to do logN(exp(exponent) -> exponent*logN(e).  */\n \t    x = build_real (type,\n \t\t\t    real_value_truncate (TYPE_MODE (type), dconste));\n \t    exponent = TREE_VALUE (TREE_OPERAND (arg, 1));\n \t    break;\n-\t  case BUILT_IN_EXP2:\n-\t  case BUILT_IN_EXP2F:\n-\t  case BUILT_IN_EXP2L:\n+\t  CASE_FLT_FN (BUILT_IN_EXP2):\n \t    /* Prepare to do logN(exp2(exponent) -> exponent*logN(2).  */\n \t    x = build_real (type, dconst2);\n \t    exponent = TREE_VALUE (TREE_OPERAND (arg, 1));\n \t    break;\n-\t  case BUILT_IN_EXP10:\n-\t  case BUILT_IN_EXP10F:\n-\t  case BUILT_IN_EXP10L:\n-\t  case BUILT_IN_POW10:\n-\t  case BUILT_IN_POW10F:\n-\t  case BUILT_IN_POW10L:\n+\t  CASE_FLT_FN (BUILT_IN_EXP10):\n+\t  CASE_FLT_FN (BUILT_IN_POW10):\n \t    /* Prepare to do logN(exp10(exponent) -> exponent*logN(10).  */\n \t    x = build_real (type, dconst10);\n \t    exponent = TREE_VALUE (TREE_OPERAND (arg, 1));\n \t    break;\n-\t  case BUILT_IN_SQRT:\n-\t  case BUILT_IN_SQRTF:\n-\t  case BUILT_IN_SQRTL:\n+\t  CASE_FLT_FN (BUILT_IN_SQRT):\n \t    /* Prepare to do logN(sqrt(x) -> 0.5*logN(x).  */\n \t    x = TREE_VALUE (TREE_OPERAND (arg, 1));\n \t    exponent = build_real (type, dconsthalf);\n \t    break;\n-\t  case BUILT_IN_CBRT:\n-\t  case BUILT_IN_CBRTF:\n-\t  case BUILT_IN_CBRTL:\n+\t  CASE_FLT_FN (BUILT_IN_CBRT):\n \t    /* Prepare to do logN(cbrt(x) -> (1/3)*logN(x).  */\n \t    x = TREE_VALUE (TREE_OPERAND (arg, 1));\n \t    exponent = build_real (type, real_value_truncate (TYPE_MODE (type),\n \t\t\t\t\t\t\t      dconstthird));\n \t    break;\n-\t  case BUILT_IN_POW:\n-\t  case BUILT_IN_POWF:\n-\t  case BUILT_IN_POWL:\n+\t  CASE_FLT_FN (BUILT_IN_POW):\n \t    /* Prepare to do logN(pow(x,exponent) -> exponent*logN(x).  */\n \t    x = TREE_VALUE (TREE_OPERAND (arg, 1));\n \t    exponent = TREE_VALUE (TREE_CHAIN (TREE_OPERAND (arg, 1)));\n@@ -8736,9 +8520,7 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n     case BUILT_IN_STRLEN:\n       return fold_builtin_strlen (arglist);\n \n-    case BUILT_IN_FABS:\n-    case BUILT_IN_FABSF:\n-    case BUILT_IN_FABSL:\n+    CASE_FLT_FN (BUILT_IN_FABS):\n       return fold_builtin_fabs (arglist, type);\n \n     case BUILT_IN_ABS:\n@@ -8747,198 +8529,114 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n     case BUILT_IN_IMAXABS:\n       return fold_builtin_abs (arglist, type);\n \n-    case BUILT_IN_CONJ:\n-    case BUILT_IN_CONJF:\n-    case BUILT_IN_CONJL:\n+    CASE_FLT_FN (BUILT_IN_CONJ):\n       if (validate_arglist (arglist, COMPLEX_TYPE, VOID_TYPE))\n \treturn fold_build1 (CONJ_EXPR, type, TREE_VALUE (arglist));\n       break;\n \n-    case BUILT_IN_CREAL:\n-    case BUILT_IN_CREALF:\n-    case BUILT_IN_CREALL:\n+    CASE_FLT_FN (BUILT_IN_CREAL):\n       if (validate_arglist (arglist, COMPLEX_TYPE, VOID_TYPE))\n         return non_lvalue (fold_build1 (REALPART_EXPR, type,\n \t\t\t\t\tTREE_VALUE (arglist)));\n       break;\n \n-    case BUILT_IN_CIMAG:\n-    case BUILT_IN_CIMAGF:\n-    case BUILT_IN_CIMAGL:\n+    CASE_FLT_FN (BUILT_IN_CIMAG):\n       if (validate_arglist (arglist, COMPLEX_TYPE, VOID_TYPE))\n         return non_lvalue (fold_build1 (IMAGPART_EXPR, type,\n \t\t\t\t\tTREE_VALUE (arglist)));\n       break;\n \n-    case BUILT_IN_CABS:\n-    case BUILT_IN_CABSF:\n-    case BUILT_IN_CABSL:\n+    CASE_FLT_FN (BUILT_IN_CABS):\n       return fold_builtin_cabs (arglist, type);\n \n-    case BUILT_IN_SQRT:\n-    case BUILT_IN_SQRTF:\n-    case BUILT_IN_SQRTL:\n+    CASE_FLT_FN (BUILT_IN_SQRT):\n       return fold_builtin_sqrt (arglist, type);\n \n-    case BUILT_IN_CBRT:\n-    case BUILT_IN_CBRTF:\n-    case BUILT_IN_CBRTL:\n+    CASE_FLT_FN (BUILT_IN_CBRT):\n       return fold_builtin_cbrt (arglist, type);\n \n-    case BUILT_IN_SIN:\n-    case BUILT_IN_SINF:\n-    case BUILT_IN_SINL:\n+    CASE_FLT_FN (BUILT_IN_SIN):\n       return fold_builtin_sin (arglist);\n \n-    case BUILT_IN_COS:\n-    case BUILT_IN_COSF:\n-    case BUILT_IN_COSL:\n+    CASE_FLT_FN (BUILT_IN_COS):\n       return fold_builtin_cos (arglist, type, fndecl);\n \n-    case BUILT_IN_EXP:\n-    case BUILT_IN_EXPF:\n-    case BUILT_IN_EXPL:\n+    CASE_FLT_FN (BUILT_IN_EXP):\n       return fold_builtin_exponent (fndecl, arglist, &dconste);\n \n-    case BUILT_IN_EXP2:\n-    case BUILT_IN_EXP2F:\n-    case BUILT_IN_EXP2L:\n+    CASE_FLT_FN (BUILT_IN_EXP2):\n       return fold_builtin_exponent (fndecl, arglist, &dconst2);\n \n-    case BUILT_IN_EXP10:\n-    case BUILT_IN_EXP10F:\n-    case BUILT_IN_EXP10L:\n-    case BUILT_IN_POW10:\n-    case BUILT_IN_POW10F:\n-    case BUILT_IN_POW10L:\n+    CASE_FLT_FN (BUILT_IN_EXP10):\n+    CASE_FLT_FN (BUILT_IN_POW10):\n       return fold_builtin_exponent (fndecl, arglist, &dconst10);\n \n-    case BUILT_IN_LOG:\n-    case BUILT_IN_LOGF:\n-    case BUILT_IN_LOGL:\n+    CASE_FLT_FN (BUILT_IN_LOG):\n       return fold_builtin_logarithm (fndecl, arglist, &dconste);\n \n-    case BUILT_IN_LOG2:\n-    case BUILT_IN_LOG2F:\n-    case BUILT_IN_LOG2L:\n+    CASE_FLT_FN (BUILT_IN_LOG2):\n       return fold_builtin_logarithm (fndecl, arglist, &dconst2);\n \n-    case BUILT_IN_LOG10:\n-    case BUILT_IN_LOG10F:\n-    case BUILT_IN_LOG10L:\n+    CASE_FLT_FN (BUILT_IN_LOG10):\n       return fold_builtin_logarithm (fndecl, arglist, &dconst10);\n \n-    case BUILT_IN_TAN:\n-    case BUILT_IN_TANF:\n-    case BUILT_IN_TANL:\n+    CASE_FLT_FN (BUILT_IN_TAN):\n       return fold_builtin_tan (arglist);\n \n-    case BUILT_IN_ATAN:\n-    case BUILT_IN_ATANF:\n-    case BUILT_IN_ATANL:\n+    CASE_FLT_FN (BUILT_IN_ATAN):\n       return fold_builtin_atan (arglist, type);\n \n-    case BUILT_IN_POW:\n-    case BUILT_IN_POWF:\n-    case BUILT_IN_POWL:\n+    CASE_FLT_FN (BUILT_IN_POW):\n       return fold_builtin_pow (fndecl, arglist, type);\n \n-    case BUILT_IN_POWI:\n-    case BUILT_IN_POWIF:\n-    case BUILT_IN_POWIL:\n+    CASE_FLT_FN (BUILT_IN_POWI):\n       return fold_builtin_powi (fndecl, arglist, type);\n \n-    case BUILT_IN_INF:\n-    case BUILT_IN_INFF:\n-    case BUILT_IN_INFL:\n+    CASE_FLT_FN (BUILT_IN_INF):\n       return fold_builtin_inf (type, true);\n \n-    case BUILT_IN_HUGE_VAL:\n-    case BUILT_IN_HUGE_VALF:\n-    case BUILT_IN_HUGE_VALL:\n+    CASE_FLT_FN (BUILT_IN_HUGE_VAL):\n       return fold_builtin_inf (type, false);\n \n-    case BUILT_IN_NAN:\n-    case BUILT_IN_NANF:\n-    case BUILT_IN_NANL:\n+    CASE_FLT_FN (BUILT_IN_NAN):\n       return fold_builtin_nan (arglist, type, true);\n \n-    case BUILT_IN_NANS:\n-    case BUILT_IN_NANSF:\n-    case BUILT_IN_NANSL:\n+    CASE_FLT_FN (BUILT_IN_NANS):\n       return fold_builtin_nan (arglist, type, false);\n \n-    case BUILT_IN_FLOOR:\n-    case BUILT_IN_FLOORF:\n-    case BUILT_IN_FLOORL:\n+    CASE_FLT_FN (BUILT_IN_FLOOR):\n       return fold_builtin_floor (fndecl, arglist);\n \n-    case BUILT_IN_CEIL:\n-    case BUILT_IN_CEILF:\n-    case BUILT_IN_CEILL:\n+    CASE_FLT_FN (BUILT_IN_CEIL):\n       return fold_builtin_ceil (fndecl, arglist);\n \n-    case BUILT_IN_TRUNC:\n-    case BUILT_IN_TRUNCF:\n-    case BUILT_IN_TRUNCL:\n+    CASE_FLT_FN (BUILT_IN_TRUNC):\n       return fold_builtin_trunc (fndecl, arglist);\n \n-    case BUILT_IN_ROUND:\n-    case BUILT_IN_ROUNDF:\n-    case BUILT_IN_ROUNDL:\n+    CASE_FLT_FN (BUILT_IN_ROUND):\n       return fold_builtin_round (fndecl, arglist);\n \n-    case BUILT_IN_NEARBYINT:\n-    case BUILT_IN_NEARBYINTF:\n-    case BUILT_IN_NEARBYINTL:\n-    case BUILT_IN_RINT:\n-    case BUILT_IN_RINTF:\n-    case BUILT_IN_RINTL:\n+    CASE_FLT_FN (BUILT_IN_NEARBYINT):\n+    CASE_FLT_FN (BUILT_IN_RINT):\n       return fold_trunc_transparent_mathfn (fndecl, arglist);\n \n-    case BUILT_IN_LCEIL:\n-    case BUILT_IN_LCEILF:\n-    case BUILT_IN_LCEILL:\n-    case BUILT_IN_LLCEIL:\n-    case BUILT_IN_LLCEILF:\n-    case BUILT_IN_LLCEILL:\n-    case BUILT_IN_LFLOOR:\n-    case BUILT_IN_LFLOORF:\n-    case BUILT_IN_LFLOORL:\n-    case BUILT_IN_LLFLOOR:\n-    case BUILT_IN_LLFLOORF:\n-    case BUILT_IN_LLFLOORL:\n-    case BUILT_IN_LROUND:\n-    case BUILT_IN_LROUNDF:\n-    case BUILT_IN_LROUNDL:\n-    case BUILT_IN_LLROUND:\n-    case BUILT_IN_LLROUNDF:\n-    case BUILT_IN_LLROUNDL:\n+    CASE_FLT_FN (BUILT_IN_LCEIL):\n+    CASE_FLT_FN (BUILT_IN_LLCEIL):\n+    CASE_FLT_FN (BUILT_IN_LFLOOR):\n+    CASE_FLT_FN (BUILT_IN_LLFLOOR):\n+    CASE_FLT_FN (BUILT_IN_LROUND):   \n+    CASE_FLT_FN (BUILT_IN_LLROUND):\n       return fold_builtin_int_roundingfn (fndecl, arglist);\n \n-    case BUILT_IN_LRINT:\n-    case BUILT_IN_LRINTF:\n-    case BUILT_IN_LRINTL:\n-    case BUILT_IN_LLRINT:\n-    case BUILT_IN_LLRINTF:\n-    case BUILT_IN_LLRINTL:\n+    CASE_FLT_FN (BUILT_IN_LRINT):\n+    CASE_FLT_FN (BUILT_IN_LLRINT):\n       return fold_fixed_mathfn (fndecl, arglist);\n \n-    case BUILT_IN_FFS:\n-    case BUILT_IN_FFSL:\n-    case BUILT_IN_FFSLL:\n-    case BUILT_IN_CLZ:\n-    case BUILT_IN_CLZL:\n-    case BUILT_IN_CLZLL:\n-    case BUILT_IN_CTZ:\n-    case BUILT_IN_CTZL:\n-    case BUILT_IN_CTZLL:\n-    case BUILT_IN_POPCOUNT:\n-    case BUILT_IN_POPCOUNTL:\n-    case BUILT_IN_POPCOUNTLL:\n-    case BUILT_IN_PARITY:\n-    case BUILT_IN_PARITYL:\n-    case BUILT_IN_PARITYLL:\n+    CASE_INT_FN (BUILT_IN_FFS):\n+    CASE_INT_FN (BUILT_IN_CLZ):\n+    CASE_INT_FN (BUILT_IN_CTZ):\n+    CASE_INT_FN (BUILT_IN_POPCOUNT):\n+    CASE_INT_FN (BUILT_IN_PARITY):\n       return fold_builtin_bitop (fndecl, arglist);\n \n     case BUILT_IN_MEMCPY:\n@@ -8950,9 +8648,7 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n     case BUILT_IN_MEMMOVE:\n       return fold_builtin_memmove (arglist, type);\n \n-    case BUILT_IN_SIGNBIT:\n-    case BUILT_IN_SIGNBITF:\n-    case BUILT_IN_SIGNBITL:\n+    CASE_FLT_FN (BUILT_IN_SIGNBIT):\n       return fold_builtin_signbit (fndecl, arglist);\n \n     case BUILT_IN_ISASCII:\n@@ -8964,24 +8660,16 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n     case BUILT_IN_ISDIGIT:\n       return fold_builtin_isdigit (arglist);\n \n-    case BUILT_IN_COPYSIGN:\n-    case BUILT_IN_COPYSIGNF:\n-    case BUILT_IN_COPYSIGNL:\n+    CASE_FLT_FN (BUILT_IN_COPYSIGN):\n       return fold_builtin_copysign (fndecl, arglist, type);\n \n-    case BUILT_IN_FINITE:\n-    case BUILT_IN_FINITEF:\n-    case BUILT_IN_FINITEL:\n+    CASE_FLT_FN (BUILT_IN_FINITE):\n       return fold_builtin_classify (fndecl, arglist, BUILT_IN_FINITE);\n \n-    case BUILT_IN_ISINF:\n-    case BUILT_IN_ISINFF:\n-    case BUILT_IN_ISINFL:\n+    CASE_FLT_FN (BUILT_IN_ISINF):\n       return fold_builtin_classify (fndecl, arglist, BUILT_IN_ISINF);\n \n-    case BUILT_IN_ISNAN:\n-    case BUILT_IN_ISNANF:\n-    case BUILT_IN_ISNANL:\n+    CASE_FLT_FN (BUILT_IN_ISNAN):\n       return fold_builtin_classify (fndecl, arglist, BUILT_IN_ISNAN);\n \n     case BUILT_IN_ISGREATER:"}, {"sha": "beebf047b787672d9e8a78f5a03a586a51f19b3b", "filename": "gcc/convert.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6a66274744eba7f56f982909b08dbe0ef293c2/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6a66274744eba7f56f982909b08dbe0ef293c2/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=ea6a66274744eba7f56f982909b08dbe0ef293c2", "patch": "@@ -351,7 +351,7 @@ convert_to_integer (tree type, tree expr)\n       \n       switch (fcode)\n         {\n-\tcase BUILT_IN_CEIL: case BUILT_IN_CEILF: case BUILT_IN_CEILL:\n+\tCASE_FLT_FN (BUILT_IN_CEIL):\n \t  /* Only convert in ISO C99 mode.  */\n \t  if (!TARGET_C99_FUNCTIONS)\n \t    break;\n@@ -361,7 +361,7 @@ convert_to_integer (tree type, tree expr)\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LCEIL);\n \t  break;\n \n-\tcase BUILT_IN_FLOOR: case BUILT_IN_FLOORF: case BUILT_IN_FLOORL:\n+\tCASE_FLT_FN (BUILT_IN_FLOOR):\n \t  /* Only convert in ISO C99 mode.  */\n \t  if (!TARGET_C99_FUNCTIONS)\n \t    break;\n@@ -371,26 +371,26 @@ convert_to_integer (tree type, tree expr)\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LFLOOR);\n \t  break;\n \n-\tcase BUILT_IN_ROUND: case BUILT_IN_ROUNDF: case BUILT_IN_ROUNDL:\n+\tCASE_FLT_FN (BUILT_IN_ROUND):\n \t  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (long_long_integer_type_node))\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LLROUND);\n \t  else\n \t    fn = mathfn_built_in (s_intype, BUILT_IN_LROUND);\n \t  break;\n \n-\tcase BUILT_IN_RINT: case BUILT_IN_RINTF: case BUILT_IN_RINTL:\n+\tCASE_FLT_FN (BUILT_IN_RINT):\n \t  /* Only convert rint* if we can ignore math exceptions.  */\n \t  if (flag_trapping_math)\n \t    break;\n \t  /* ... Fall through ...  */\n-\tcase BUILT_IN_NEARBYINT: case BUILT_IN_NEARBYINTF: case BUILT_IN_NEARBYINTL:\n+\tCASE_FLT_FN (BUILT_IN_NEARBYINT):\n \t  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (long_long_integer_type_node))\n             fn = mathfn_built_in (s_intype, BUILT_IN_LLRINT);\n \t  else\n             fn = mathfn_built_in (s_intype, BUILT_IN_LRINT);\n \t  break;\n \n-\tcase BUILT_IN_TRUNC: case BUILT_IN_TRUNCF: case BUILT_IN_TRUNCL:\n+\tCASE_FLT_FN (BUILT_IN_TRUNC):\n \t  {\n \t    tree arglist = TREE_OPERAND (s_expr, 1);\n \t    return convert_to_integer (type, TREE_VALUE (arglist));"}, {"sha": "53f737dbe11ac1375b490c8871196899371e9fec", "filename": "gcc/fold-const.c", "status": "modified", "additions": 56, "deletions": 81, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6a66274744eba7f56f982909b08dbe0ef293c2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6a66274744eba7f56f982909b08dbe0ef293c2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ea6a66274744eba7f56f982909b08dbe0ef293c2", "patch": "@@ -865,33 +865,15 @@ negate_mathfn_p (enum built_in_function code)\n {\n   switch (code)\n     {\n-    case BUILT_IN_ASIN:\n-    case BUILT_IN_ASINF:\n-    case BUILT_IN_ASINL:\n-    case BUILT_IN_ASINH:\n-    case BUILT_IN_ASINHF:\n-    case BUILT_IN_ASINHL:\n-    case BUILT_IN_ATAN:\n-    case BUILT_IN_ATANF:\n-    case BUILT_IN_ATANL:\n-    case BUILT_IN_ATANH:\n-    case BUILT_IN_ATANHF:\n-    case BUILT_IN_ATANHL:\n-    case BUILT_IN_CBRT:\n-    case BUILT_IN_CBRTF:\n-    case BUILT_IN_CBRTL:\n-    case BUILT_IN_SIN:\n-    case BUILT_IN_SINF:\n-    case BUILT_IN_SINL:\n-    case BUILT_IN_SINH:\n-    case BUILT_IN_SINHF:\n-    case BUILT_IN_SINHL:\n-    case BUILT_IN_TAN:\n-    case BUILT_IN_TANF:\n-    case BUILT_IN_TANL:\n-    case BUILT_IN_TANH:\n-    case BUILT_IN_TANHF:\n-    case BUILT_IN_TANHL:\n+    CASE_FLT_FN (BUILT_IN_ASIN):\n+    CASE_FLT_FN (BUILT_IN_ASINH):\n+    CASE_FLT_FN (BUILT_IN_ATAN):\n+    CASE_FLT_FN (BUILT_IN_ATANH):\n+    CASE_FLT_FN (BUILT_IN_CBRT):\n+    CASE_FLT_FN (BUILT_IN_SIN):\n+    CASE_FLT_FN (BUILT_IN_SINH):\n+    CASE_FLT_FN (BUILT_IN_TAN):\n+    CASE_FLT_FN (BUILT_IN_TANH):\n       return true;\n \n     default:\n@@ -11075,84 +11057,77 @@ tree_expr_nonnegative_p (tree t)\n \tif (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n \t  switch (DECL_FUNCTION_CODE (fndecl))\n \t    {\n-#define CASE_BUILTIN_F(BUILT_IN_FN) \\\n-  case BUILT_IN_FN: case BUILT_IN_FN##F: case BUILT_IN_FN##L:\n-#define CASE_BUILTIN_I(BUILT_IN_FN) \\\n-  case BUILT_IN_FN: case BUILT_IN_FN##L: case BUILT_IN_FN##LL:\n-\n-\t    CASE_BUILTIN_F (BUILT_IN_ACOS)\n-\t    CASE_BUILTIN_F (BUILT_IN_ACOSH)\n-\t    CASE_BUILTIN_F (BUILT_IN_CABS)\n-\t    CASE_BUILTIN_F (BUILT_IN_COSH)\n-\t    CASE_BUILTIN_F (BUILT_IN_ERFC)\n-\t    CASE_BUILTIN_F (BUILT_IN_EXP)\n-\t    CASE_BUILTIN_F (BUILT_IN_EXP10)\n-\t    CASE_BUILTIN_F (BUILT_IN_EXP2)\n-\t    CASE_BUILTIN_F (BUILT_IN_FABS)\n-\t    CASE_BUILTIN_F (BUILT_IN_FDIM)\n-\t    CASE_BUILTIN_F (BUILT_IN_HYPOT)\n-\t    CASE_BUILTIN_F (BUILT_IN_POW10)\n-\t    CASE_BUILTIN_I (BUILT_IN_FFS)\n-\t    CASE_BUILTIN_I (BUILT_IN_PARITY)\n-\t    CASE_BUILTIN_I (BUILT_IN_POPCOUNT)\n+\t    CASE_FLT_FN (BUILT_IN_ACOS):\n+\t    CASE_FLT_FN (BUILT_IN_ACOSH):\n+\t    CASE_FLT_FN (BUILT_IN_CABS):\n+\t    CASE_FLT_FN (BUILT_IN_COSH):\n+\t    CASE_FLT_FN (BUILT_IN_ERFC):\n+\t    CASE_FLT_FN (BUILT_IN_EXP):\n+\t    CASE_FLT_FN (BUILT_IN_EXP10):\n+\t    CASE_FLT_FN (BUILT_IN_EXP2):\n+\t    CASE_FLT_FN (BUILT_IN_FABS):\n+\t    CASE_FLT_FN (BUILT_IN_FDIM):\n+\t    CASE_FLT_FN (BUILT_IN_HYPOT):\n+\t    CASE_FLT_FN (BUILT_IN_POW10):\n+\t    CASE_INT_FN (BUILT_IN_FFS):\n+\t    CASE_INT_FN (BUILT_IN_PARITY):\n+\t    CASE_INT_FN (BUILT_IN_POPCOUNT):\n \t      /* Always true.  */\n \t      return 1;\n \n-\t    CASE_BUILTIN_F (BUILT_IN_SQRT)\n+\t    CASE_FLT_FN (BUILT_IN_SQRT):\n \t      /* sqrt(-0.0) is -0.0.  */\n \t      if (!HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (t))))\n \t\treturn 1;\n \t      return tree_expr_nonnegative_p (TREE_VALUE (arglist));\n \n-\t    CASE_BUILTIN_F (BUILT_IN_ASINH)\n-\t    CASE_BUILTIN_F (BUILT_IN_ATAN)\n-\t    CASE_BUILTIN_F (BUILT_IN_ATANH)\n-\t    CASE_BUILTIN_F (BUILT_IN_CBRT)\n-\t    CASE_BUILTIN_F (BUILT_IN_CEIL)\n-\t    CASE_BUILTIN_F (BUILT_IN_ERF)\n-\t    CASE_BUILTIN_F (BUILT_IN_EXPM1)\n-\t    CASE_BUILTIN_F (BUILT_IN_FLOOR)\n-\t    CASE_BUILTIN_F (BUILT_IN_FMOD)\n-\t    CASE_BUILTIN_F (BUILT_IN_FREXP)\n-\t    CASE_BUILTIN_F (BUILT_IN_LCEIL)\n-\t    CASE_BUILTIN_F (BUILT_IN_LDEXP)\n-\t    CASE_BUILTIN_F (BUILT_IN_LFLOOR)\n-\t    CASE_BUILTIN_F (BUILT_IN_LLCEIL)\n-\t    CASE_BUILTIN_F (BUILT_IN_LLFLOOR)\n-\t    CASE_BUILTIN_F (BUILT_IN_LLRINT)\n-\t    CASE_BUILTIN_F (BUILT_IN_LLROUND)\n-\t    CASE_BUILTIN_F (BUILT_IN_LRINT)\n-\t    CASE_BUILTIN_F (BUILT_IN_LROUND)\n-\t    CASE_BUILTIN_F (BUILT_IN_MODF)\n-\t    CASE_BUILTIN_F (BUILT_IN_NEARBYINT)\n-\t    CASE_BUILTIN_F (BUILT_IN_POW)\n-\t    CASE_BUILTIN_F (BUILT_IN_RINT)\n-\t    CASE_BUILTIN_F (BUILT_IN_ROUND)\n-\t    CASE_BUILTIN_F (BUILT_IN_SIGNBIT)\n-\t    CASE_BUILTIN_F (BUILT_IN_SINH)\n-\t    CASE_BUILTIN_F (BUILT_IN_TANH)\n-\t    CASE_BUILTIN_F (BUILT_IN_TRUNC)\n+\t    CASE_FLT_FN (BUILT_IN_ASINH):\n+\t    CASE_FLT_FN (BUILT_IN_ATAN):\n+\t    CASE_FLT_FN (BUILT_IN_ATANH):\n+\t    CASE_FLT_FN (BUILT_IN_CBRT):\n+\t    CASE_FLT_FN (BUILT_IN_CEIL):\n+\t    CASE_FLT_FN (BUILT_IN_ERF):\n+\t    CASE_FLT_FN (BUILT_IN_EXPM1):\n+\t    CASE_FLT_FN (BUILT_IN_FLOOR):\n+\t    CASE_FLT_FN (BUILT_IN_FMOD):\n+\t    CASE_FLT_FN (BUILT_IN_FREXP):\n+\t    CASE_FLT_FN (BUILT_IN_LCEIL):\n+\t    CASE_FLT_FN (BUILT_IN_LDEXP):\n+\t    CASE_FLT_FN (BUILT_IN_LFLOOR):\n+\t    CASE_FLT_FN (BUILT_IN_LLCEIL):\n+\t    CASE_FLT_FN (BUILT_IN_LLFLOOR):\n+\t    CASE_FLT_FN (BUILT_IN_LLRINT):\n+\t    CASE_FLT_FN (BUILT_IN_LLROUND):\n+\t    CASE_FLT_FN (BUILT_IN_LRINT):\n+\t    CASE_FLT_FN (BUILT_IN_LROUND):\n+\t    CASE_FLT_FN (BUILT_IN_MODF):\n+\t    CASE_FLT_FN (BUILT_IN_NEARBYINT):\n+\t    CASE_FLT_FN (BUILT_IN_POW):\n+\t    CASE_FLT_FN (BUILT_IN_RINT):\n+\t    CASE_FLT_FN (BUILT_IN_ROUND):\n+\t    CASE_FLT_FN (BUILT_IN_SIGNBIT):\n+\t    CASE_FLT_FN (BUILT_IN_SINH):\n+\t    CASE_FLT_FN (BUILT_IN_TANH):\n+\t    CASE_FLT_FN (BUILT_IN_TRUNC):\n \t      /* True if the 1st argument is nonnegative.  */\n \t      return tree_expr_nonnegative_p (TREE_VALUE (arglist));\n \n-\t    CASE_BUILTIN_F (BUILT_IN_FMAX)\n+\t    CASE_FLT_FN (BUILT_IN_FMAX):\n \t      /* True if the 1st OR 2nd arguments are nonnegative.  */\n \t      return tree_expr_nonnegative_p (TREE_VALUE (arglist))\n \t        || tree_expr_nonnegative_p (TREE_VALUE (TREE_CHAIN (arglist)));\n \n-\t    CASE_BUILTIN_F (BUILT_IN_FMIN)\n+\t    CASE_FLT_FN (BUILT_IN_FMIN):\n \t      /* True if the 1st AND 2nd arguments are nonnegative.  */\n \t      return tree_expr_nonnegative_p (TREE_VALUE (arglist))\n \t        && tree_expr_nonnegative_p (TREE_VALUE (TREE_CHAIN (arglist)));\n \n-\t    CASE_BUILTIN_F (BUILT_IN_COPYSIGN)\n+\t    CASE_FLT_FN (BUILT_IN_COPYSIGN):\n \t      /* True if the 2nd argument is nonnegative.  */\n \t      return tree_expr_nonnegative_p (TREE_VALUE (TREE_CHAIN (arglist)));\n \n \t    default:\n \t      break;\n-#undef CASE_BUILTIN_F\n-#undef CASE_BUILTIN_I\n \t    }\n       }\n "}, {"sha": "eace8b447f965a72022d10623a6fcad5c4c1dd13", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6a66274744eba7f56f982909b08dbe0ef293c2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6a66274744eba7f56f982909b08dbe0ef293c2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ea6a66274744eba7f56f982909b08dbe0ef293c2", "patch": "@@ -234,6 +234,9 @@ extern const char * built_in_names[(int) END_BUILTINS];\n \n #define BUILTIN_ROOT_P(FN) (BUILTIN_SQRT_P (FN) || BUILTIN_CBRT_P (FN))\n \n+#define CASE_FLT_FN(FN) case FN: case FN##F: case FN##L\n+#define CASE_INT_FN(FN) case FN: case FN##L: case FN##LL\n+\n /* An array of _DECL trees for the above.  */\n extern GTY(()) tree built_in_decls[(int) END_BUILTINS];\n extern GTY(()) tree implicit_built_in_decls[(int) END_BUILTINS];"}]}