{"sha": "0236ea984c0d08f282ad03b1c36acad014e5ba4d", "node_id": "C_kwDOANBUbNoAKDAyMzZlYTk4NGMwZDA4ZjI4MmFkMDNiMWMzNmFjYWQwMTRlNWJhNGQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-17T07:05:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-23T10:55:13Z"}, "message": "Remove forward_propagate_into_cond\n\nThis is a first cleanup opportunity from the COND_EXPR gimplification\nwhich allows us to remove now redundant forward_propagate_into_cond.\n\n2022-05-23  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.cc (forward_propagate_into_cond): Remove.\n\t(pass_forwprop::execute): Do not propagate into COND_EXPR conditions.", "tree": {"sha": "ab191aebaa97f29040b7ea621cedec4d3c8ce49d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab191aebaa97f29040b7ea621cedec4d3c8ce49d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0236ea984c0d08f282ad03b1c36acad014e5ba4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0236ea984c0d08f282ad03b1c36acad014e5ba4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0236ea984c0d08f282ad03b1c36acad014e5ba4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0236ea984c0d08f282ad03b1c36acad014e5ba4d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19dd439389be2c5eb6b986d164760e061ba01938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dd439389be2c5eb6b986d164760e061ba01938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19dd439389be2c5eb6b986d164760e061ba01938"}], "stats": {"total": 79, "additions": 2, "deletions": 77}, "files": [{"sha": "d698a483ff15f5e9d17bd8dd17a023582c51ea48", "filename": "gcc/tree-ssa-forwprop.cc", "status": "modified", "additions": 2, "deletions": 77, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0236ea984c0d08f282ad03b1c36acad014e5ba4d/gcc%2Ftree-ssa-forwprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0236ea984c0d08f282ad03b1c36acad014e5ba4d/gcc%2Ftree-ssa-forwprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.cc?ref=0236ea984c0d08f282ad03b1c36acad014e5ba4d", "patch": "@@ -511,9 +511,7 @@ forward_propagate_into_comparison (gimple_stmt_iterator *gsi)\n /* Propagate from the ssa name definition statements of COND_EXPR\n    in GIMPLE_COND statement STMT into the conditional if that simplifies it.\n    Returns zero if no statement was changed, one if there were\n-   changes and two if cfg_cleanup needs to run.\n-\n-   This must be kept in sync with forward_propagate_into_cond.  */\n+   changes and two if cfg_cleanup needs to run.  */\n \n static int\n forward_propagate_into_gimple_cond (gcond *stmt)\n@@ -573,70 +571,6 @@ forward_propagate_into_gimple_cond (gcond *stmt)\n   return 0;\n }\n \n-\n-/* Propagate from the ssa name definition statements of COND_EXPR\n-   in the rhs of statement STMT into the conditional if that simplifies it.\n-   Returns true zero if the stmt was changed.  */\n-\n-static bool\n-forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n-{\n-  gimple *stmt = gsi_stmt (*gsi_p);\n-  tree tmp = NULL_TREE;\n-  tree cond = gimple_assign_rhs1 (stmt);\n-  enum tree_code code = gimple_assign_rhs_code (stmt);\n-\n-  /* We can do tree combining on SSA_NAME and comparison expressions.  */\n-  if (COMPARISON_CLASS_P (cond))\n-    tmp = forward_propagate_into_comparison_1 (stmt, TREE_CODE (cond),\n-\t\t\t\t\t       TREE_TYPE (cond),\n-\t\t\t\t\t       TREE_OPERAND (cond, 0),\n-\t\t\t\t\t       TREE_OPERAND (cond, 1));\n-  else if (TREE_CODE (cond) == SSA_NAME)\n-    {\n-      enum tree_code def_code;\n-      tree name = cond;\n-      gimple *def_stmt = get_prop_source_stmt (name, true, NULL);\n-      if (!def_stmt || !can_propagate_from (def_stmt))\n-\treturn 0;\n-\n-      def_code = gimple_assign_rhs_code (def_stmt);\n-      if (TREE_CODE_CLASS (def_code) == tcc_comparison)\n-\ttmp = fold_build2_loc (gimple_location (def_stmt),\n-\t\t\t       def_code,\n-\t\t\t       TREE_TYPE (cond),\n-\t\t\t       gimple_assign_rhs1 (def_stmt),\n-\t\t\t       gimple_assign_rhs2 (def_stmt));\n-    }\n-\n-  if (tmp\n-      && is_gimple_val (tmp))\n-    {\n-      if (dump_file)\n-\t{\n-\t  fprintf (dump_file, \"  Replaced '\");\n-\t  print_generic_expr (dump_file, cond);\n-\t  fprintf (dump_file, \"' with '\");\n-\t  print_generic_expr (dump_file, tmp);\n-\t  fprintf (dump_file, \"'\\n\");\n-\t}\n-\n-      if ((code == VEC_COND_EXPR) ? integer_all_onesp (tmp)\n-\t\t\t\t  : integer_onep (tmp))\n-\tgimple_assign_set_rhs_from_tree (gsi_p, gimple_assign_rhs2 (stmt));\n-      else if (integer_zerop (tmp))\n-\tgimple_assign_set_rhs_from_tree (gsi_p, gimple_assign_rhs3 (stmt));\n-      else\n-\tgimple_assign_set_rhs1 (stmt, unshare_expr (tmp));\n-      stmt = gsi_stmt (*gsi_p);\n-      update_stmt (stmt);\n-\n-      return true;\n-    }\n-\n-  return 0;\n-}\n-\n /* We've just substituted an ADDR_EXPR into stmt.  Update all the\n    relevant data structures to match.  */\n \n@@ -3720,16 +3654,7 @@ pass_forwprop::execute (function *fun)\n \t\t    tree rhs1 = gimple_assign_rhs1 (stmt);\n \t\t    enum tree_code code = gimple_assign_rhs_code (stmt);\n \n-\t\t    if (code == COND_EXPR)\n-\t\t      {\n-\t\t\t/* In this case the entire COND_EXPR is in rhs1. */\n-\t\t\tif (forward_propagate_into_cond (&gsi))\n-\t\t\t  {\n-\t\t\t    changed = true;\n-\t\t\t    stmt = gsi_stmt (gsi);\n-\t\t\t  }\n-\t\t      }\n-\t\t    else if (TREE_CODE_CLASS (code) == tcc_comparison)\n+\t\t    if (TREE_CODE_CLASS (code) == tcc_comparison)\n \t\t      {\n \t\t\tint did_something;\n \t\t\tdid_something = forward_propagate_into_comparison (&gsi);"}]}